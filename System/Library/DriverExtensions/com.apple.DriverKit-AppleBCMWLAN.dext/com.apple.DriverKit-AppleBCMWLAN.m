AppleBCMWLANLQM *AppleBCMWLANLQM::withDriver(AppleBCMWLANLQM *this, AppleBCMWLANCore *a2)
{
  AppleBCMWLANLQM *v3;
  AppleBCMWLANLQM *v5;

  v5 = (AppleBCMWLANLQM *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANLQMMetaClass, (OSObject **)&v5)) {
    return 0;
  }
  v3 = v5;
  if (v5 && (AppleBCMWLANLQM::initWithDriver((OSObject *)v5, this) & 1) == 0)
  {
    (*(void (**)(AppleBCMWLANLQM *))(*(void *)v3 + 16))(v3);
    return 0;
  }
  return v3;
}

uint64_t AppleBCMWLANLQM::initWithDriver(OSObject *this, AppleBCMWLANCore *a2)
{
  v4 = (OSObject_vtbl *)IOMallocZeroTyped();
  this[1].OSMetaClassBase::__vftable = v4;
  if (v4)
  {
    v4->getMetaClass = (const OSMetaClass *(__cdecl *)(const OSMetaClassBase *__hidden))a2;
    getMetaClass = (AppleBCMWLANCore *)this[1].getMetaClass;
    if (getMetaClass)
    {
      this[1].retain = (void (__cdecl *)(const OSObject *__hidden))AppleBCMWLANCore::getCommander(getMetaClass);
      v6 = this[1].OSMetaClassBase::__vftable;
      if (v6->retain)
      {
        this[1].release = (void (__cdecl *)(const OSObject *__hidden))AppleBCMWLANCore::getBssManager((AppleBCMWLANCore *)v6->getMetaClass);
        if (this[1].release)
        {
          this[1].isEqualTo = (BOOL (__cdecl *)(const OSMetaClassBase *__hidden, const OSMetaClassBase *))(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
          isEqualTo = this[1].isEqualTo;
          if (isEqualTo)
          {
            (*(void (**)(BOOL (__cdecl *)(const OSMetaClassBase *__hidden, const OSMetaClassBase *)))(*(void *)isEqualTo + 8))(isEqualTo);
            if (OSObject::init(this))
            {
              LODWORD(this[1].OSMetaClassBase::__vftable[2].Dispatch) = 4;
              LODWORD(this[1].OSMetaClassBase::__vftable[82].retain) = -75;
              (*(void (**)(const OSMetaClass *(__cdecl *)(const OSMetaClassBase *__hidden)))(*(void *)this[1].getMetaClass + 88))(this[1].getMetaClass);
              this[1].OSMetaClassBase::__vftable[152].retain = (void (__cdecl *)(const OSObject *__hidden))IO80211TimerSource::allocWithParams();
              v8 = this[1].OSMetaClassBase::__vftable;
              if (v8[152].retain)
              {
                (*(void (**)(void))(*(void *)v8->getMetaClass + 88))();
                this[1].OSMetaClassBase::__vftable[152].release = (void (__cdecl *)(const OSObject *__hidden))IO80211TimerSource::allocWithParams();
                v9 = this[1].OSMetaClassBase::__vftable;
                if (v9[152].release)
                {
                  HIDWORD(v9[82].getMetaClass) = 5000;
                  BOOL v10 = IOParseBootArgNumber("wlan.netmanager.stats-timer-interval", (char *)&this[1].OSMetaClassBase::__vftable[82].getMetaClass + 4, 4);
                  this[1].OSMetaClassBase::__vftable[151].isEqualTo = (BOOL (__cdecl *)(const OSMetaClassBase *__hidden, const OSMetaClassBase *))AppleBCMWLANStopwatch::withUptime((AppleBCMWLANStopwatch *)v10);
                  AppleBCMWLANStopwatch::start((uint64_t)this[1].OSMetaClassBase::__vftable[151].isEqualTo);
                  BYTE4(this[1].OSMetaClassBase::__vftable[151].release) = 3;
                  return 1;
                }
                if (v9->isEqualTo)
                {
                  if (CCLogStream::shouldLog()) {
                    CCLogStream::logAlert((CCLogStream *)this[1].isEqualTo, "[dk] %s@%d: Unable to get Associated timer\n");
                  }
                }
              }
              else if (v8->isEqualTo && CCLogStream::shouldLog())
              {
                CCLogStream::logAlert((CCLogStream *)this[1].isEqualTo, "[dk] %s@%d: Unable to get ivars->fChanQualUpdatedReminderTimer timer\n");
              }
              AppleBCMWLANLQM::freeResources((AppleBCMWLANLQM *)this);
            }
            else
            {
              IOLog("AppleBCMWLANLQM super init failied\n");
            }
          }
          else
          {
            IOLog("AppleBCMWLANLQM Failed to init fLogger\n");
          }
        }
        else
        {
          IOLog("AppleBCMWLANLQM Bss Maanger is null\n");
        }
      }
      else
      {
        IOLog("AppleBCMWLANLQM commander is null\n");
      }
    }
    else
    {
      IOLog("AppleBCMWLANLQM driver is null\n");
    }
  }
  else
  {
    IOLog("Failed to allocate AppleBCMWLANLQM_IVars\n");
  }
  return 0;
}

IO80211Controller *AppleBCMWLANLQM::handleChanQualUpdatedReminder(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(*(void *)(a1 + 40) + 8520) + 136))(*(void *)(*(void *)(a1 + 40) + 8520));
  result = (IO80211Controller *)AppleBCMWLANCore::isAssociated(**(AppleBCMWLANCore ***)(a1 + 40));
  if (result)
  {
    AppleBCMWLANStopwatch::restart(*(AppleBCMWLANStopwatch **)(*(void *)(a1 + 40) + 8480));
    v3 = *(IO80211Controller ***)(a1 + 40);
    v4 = *v3;
    return AppleBCMWLANCore::postChanQualEvent(v4, v3 + 1061);
  }
  return result;
}

uint64_t AppleBCMWLANLQM::freeResources(AppleBCMWLANLQM *this)
{
  v2 = (void *)*((void *)this + 5);
  uint64_t v3 = v2[1065];
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 72))(v3);
    (*(void (**)(void))(**(void **)(*((void *)this + 5) + 8520) + 16))(*(void *)(*((void *)this + 5) + 8520));
    *(void *)(*((void *)this + 5) + 8520) = 0;
    v2 = (void *)*((void *)this + 5);
  }
  uint64_t v4 = v2[1066];
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 72))(v4);
    (*(void (**)(void))(**(void **)(*((void *)this + 5) + 8528) + 16))(*(void *)(*((void *)this + 5) + 8528));
    *(void *)(*((void *)this + 5) + 8528) = 0;
    v2 = (void *)*((void *)this + 5);
  }
  uint64_t v5 = v2[1060];
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    *(void *)(*((void *)this + 5) + 8480) = 0;
    v2 = (void *)*((void *)this + 5);
  }
  uint64_t result = v2[3];
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    *(void *)(*((void *)this + 5) + 24) = 0;
  }
  return result;
}

uint64_t AppleBCMWLANLQM::handleStatUpdates(AppleBCMWLANCore ***a1, AppleBCMWLANCore *a2)
{
  *(_WORD *)&v16.octet[4] = 0;
  *(_DWORD *)v16.octet = 0;
  uint64_t v3 = a1[5];
  if (v3[1066] != a2)
  {
    if (v3[3] && CCLogStream::shouldLog()) {
      CCLogStream::logEmergency(a1[5][3], "[dk] %s@%d:Mismatched : src:%p ivars->fAssociatedTimer:%p \n", "handleStatUpdates", 3225, a2, a1[5][1066]);
    }
    uint64_t v5 = *(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a2 + 136);
    v6 = a2;
    goto LABEL_19;
  }
  char isAssociated = AppleBCMWLANCore::isAssociated(*v3);
  v8 = a1[5];
  if ((isAssociated & 1) == 0)
  {
    v6 = v8[1066];
    uint64_t v5 = *(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v6 + 136);
LABEL_19:
    return v5(v6);
  }
  int v9 = *((unsigned __int8 *)v8 + 4592);
  if (v9 == 5) {
    char v10 = 0;
  }
  else {
    char v10 = v9 + 1;
  }
  *((unsigned char *)v8 + 4592) = v10;
  v11 = (char *)a1[5] + 6537;
  if (*v11) {
    unsigned char *v11 = 0;
  }
  BOOL v15 = 0;
  uint64_t result = AppleBCMWLANLQM::loadBss((AppleBCMWLANLQM *)a1, &v15, &v16);
  if (!v15)
  {
    int updated = AppleBCMWLANLQM::updateCounters(a1, &v16);
    if ((updated + 536870212) <= 0x2F
      && ((1 << (updated + 68)) & 0x800008000001) != 0)
    {
      int v14 = updated;
      uint64_t result = (uint64_t)a1[5][3];
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result) {
          return CCLogStream::logNoticeIf(a1[5][3], 0x200uLL, "[dk] %s@%d:Not reporting stats as updateCounters failed with %d\n", "handleStatUpdates", 3256, v14);
        }
      }
    }
    else
    {
      AppleBCMWLANLQM::updateBSSInfo((AppleBCMWLANLQM *)a1);
      if (IO80211BssManager::isAssociated(a1[5][2])) {
        AppleBCMWLANLQM::checkForChannelSwitch((uint64_t)a1, (uint64_t)a1[5] + 6540);
      }
      uint64_t result = AppleBCMWLANCore::isAssociated(*a1[5]);
      if (result)
      {
        if (AppleBCMWLANCore::checkForTrafficEngineeringSupport(*a1[5])
          && (AppleBCMWLANCore::isCcaStatsExtSupported(*a1[5]) & 1) == 0)
        {
          AppleBCMWLANLQM::getLegacyCCAStats(a1);
        }
        return (*(uint64_t (**)(AppleBCMWLANCore *, void))(*(void *)a1[5][1066] + 120))(a1[5][1066], *((unsigned int *)a1[5] + 1149));
      }
    }
  }
  return result;
}

void AppleBCMWLANLQM::free(AppleBCMWLANLQM *this)
{
  if (*((void *)this + 5))
  {
    AppleBCMWLANLQM::freeResources(this);
    v2 = (void *)*((void *)this + 5);
    if (v2)
    {
      IOFree(v2, 0x2260uLL);
      *((void *)this + 5) = 0;
    }
  }
  OSObject::free((OSObject *)this);
}

void non-virtual thunk to'AppleBCMWLANLQM::free(AppleBCMWLANLQM *this)
{
}

void AppleBCMWLANLQM::updateLinkQualityMetrics(AppleBCMWLANLQM *this, int a2)
{
  unint64_t v119 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v120 = 0xAAAAAAAAAAAAAAAALL;
  if (a2)
  {
    mach_continuous_time();
    absolutetime_to_nanoseconds();
    uint64_t v4 = *((void *)this + 5);
    if (*(_DWORD *)(v4 + 148) > (*(_DWORD *)(v4 + 144) - 1))
    {
      *(_DWORD *)(v4 + 148) = 0;
      uint64_t v4 = *((void *)this + 5);
    }
    if ((IO80211BssManager::isAssociatedToAdhoc(*(IO80211BssManager **)(v4 + 16)) & 1) == 0)
    {
      uint64_t v5 = *((void *)this + 5);
      unint64_t v119 = v5 + 4816;
      unint64_t v120 = 0x500050005;
      uint64_t v6 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(v5 + 8), (uint64_t)"bssload_report", (uint64_t)&kNoTxPayload, (uint64_t)&v119, 0);
      BOOL v7 = v6 == -469794543 || v6 == -469794537;
      if (!v7 && v6 != 0)
      {
        uint64_t v109 = v6;
        if (*(void *)(*((void *)this + 5) + 24))
        {
          if (CCLogStream::shouldLog())
          {
            v110 = (void *)*((void *)this + 5);
            v111 = (CCLogStream *)v110[3];
            v112 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v110 + 112))(*v110, v109);
            CCLogStream::logNotice(v111, "[dk] %s@%d: Failed to get bss load, error %s\n", "updateLinkQualityMetrics", 502, v112);
          }
        }
      }
    }
    uint64_t v9 = *((void *)this + 5);
    int v10 = *(_DWORD *)(v9 + 148);
    if (!v10) {
      int v10 = *(_DWORD *)(v9 + 144);
    }
    uint64_t v11 = (v10 - 1);
    char isAssociatedToAdhoc = IO80211BssManager::isAssociatedToAdhoc(*(IO80211BssManager **)(v9 + 16));
    uint64_t v13 = *((void *)this + 5);
    if ((isAssociatedToAdhoc & 1) != 0
      || (int isStaInfoIoVarSupported = AppleBCMWLANCore::isStaInfoIoVarSupported(*(AppleBCMWLANCore **)v13),
          uint64_t v13 = *((void *)this + 5),
          !isStaInfoIoVarSupported)
      || *(unsigned __int16 *)(v13 + 4272) < 4u)
    {
      unint64_t v61 = *(void *)(v13 + 104 * v11 + 152);
      if (v61)
      {
        unint64_t v62 = *(void *)(v13 + 2760);
        *(void *)(v13 + 104 * *(unsigned int *)(v13 + 148) + 568) = v62 - v61;
        uint64_t v13 = *((void *)this + 5);
        if (v62 < v61)
        {
          if (*(void *)(v13 + 24))
          {
            int shouldLog = CCLogStream::shouldLog();
            uint64_t v13 = *((void *)this + 5);
            if (shouldLog)
            {
              CCLogStream::logAlert(*(CCLogStream **)(v13 + 24), "[dk] %s@%d: Overflow detected\n", "updateLinkQualityMetrics", 628);
              uint64_t v13 = *((void *)this + 5);
            }
          }
        }
      }
      unint64_t v63 = *(void *)(v13 + 104 * v11 + 168);
      if (v63)
      {
        unint64_t v64 = *(void *)(v13 + 2720);
        *(void *)(v13 + 104 * *(unsigned int *)(v13 + 148) + 584) = v64 - v63;
        uint64_t v13 = *((void *)this + 5);
        if (v64 < v63)
        {
          if (*(void *)(v13 + 24))
          {
            int v116 = CCLogStream::shouldLog();
            uint64_t v13 = *((void *)this + 5);
            if (v116)
            {
              CCLogStream::logAlert(*(CCLogStream **)(v13 + 24), "[dk] %s@%d: Overflow detected\n", "updateLinkQualityMetrics", 634);
              uint64_t v13 = *((void *)this + 5);
            }
          }
        }
      }
      unint64_t v65 = *(void *)(v13 + 104 * v11 + 160);
      if (v65)
      {
        unint64_t v66 = *(void *)(v13 + 2888);
        *(void *)(v13 + 104 * *(unsigned int *)(v13 + 148) + 576) = v66 - v65;
        uint64_t v13 = *((void *)this + 5);
        if (v66 < v65)
        {
          if (*(void *)(v13 + 24))
          {
            int v117 = CCLogStream::shouldLog();
            uint64_t v13 = *((void *)this + 5);
            if (v117)
            {
              CCLogStream::logAlert(*(CCLogStream **)(v13 + 24), "[dk] %s@%d: Overflow detected\n", "updateLinkQualityMetrics", 640);
              uint64_t v13 = *((void *)this + 5);
            }
          }
        }
      }
      *(void *)(v13 + 104 * *(unsigned int *)(v13 + 148) + 152) = *(void *)(v13 + 2760);
      *(void *)(*((void *)this + 5) + 104 * *(unsigned int *)(*((void *)this + 5) + 148) + 168) = *(void *)(*((void *)this + 5) + 2720);
      *(void *)(*((void *)this + 5) + 104 * *(unsigned int *)(*((void *)this + 5) + 148) + 160) = *(void *)(*((void *)this + 5) + 2888);
      uint64_t v67 = *((void *)this + 5);
      unint64_t v68 = *(unsigned int *)(v67 + 216 * v11 + 988);
      if (v68)
      {
        unint64_t v69 = *(void *)(v67 + 2808);
        BOOL v25 = v69 >= v68;
        unint64_t v70 = v69 - v68;
        *(_DWORD *)(v67 + 216 * *(unsigned int *)(v67 + 148) + 1852) = v70;
        uint64_t v67 = *((void *)this + 5);
        if (!v25 || HIDWORD(v70))
        {
          if (*(void *)(v67 + 24))
          {
            int v118 = CCLogStream::shouldLog();
            uint64_t v67 = *((void *)this + 5);
            if (v118)
            {
              CCLogStream::logAlert(*(CCLogStream **)(v67 + 24), "[dk] %s@%d: Overflow detected\n", "updateLinkQualityMetrics", 651);
              uint64_t v67 = *((void *)this + 5);
            }
          }
        }
      }
      *(_DWORD *)(v67 + 216 * *(unsigned int *)(v67 + 148) + 988) = *(void *)(v67 + 2808);
    }
    else
    {
      unint64_t v15 = *(unsigned int *)(v13 + 4436);
      if (v15)
      {
        unint64_t v16 = *(void *)(v13 + 104 * v11 + 152);
        v17 = (unint64_t *)(v13 + 104 * *(unsigned int *)(v13 + 148) + 568);
        if (v15 < v16)
        {
          unint64_t *v17 = v15;
          if (*(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d: Overflow detected\n", "updateLinkQualityMetrics", 516);
          }
        }
        else
        {
          unint64_t *v17 = v15 - v16;
        }
      }
      v18 = (unsigned int *)*((void *)this + 5);
      uint64_t v19 = v18[1111];
      uint64_t v20 = v18[1109];
      if (v19 | v20)
      {
        *(void *)&v18[26 * v18[37] + 146] = v20 + v19;
        uint64_t v21 = *((void *)this + 5);
        uint64_t v22 = v21 + 104 * *(unsigned int *)(v21 + 148);
        unint64_t v23 = *(void *)(v22 + 584);
        unint64_t v24 = *(void *)(v21 + 104 * v11 + 168);
        BOOL v25 = v23 >= v24;
        unint64_t v26 = v23 - v24;
        if (v25)
        {
          *(void *)(v22 + 584) = v26;
        }
        else if (*(void *)(v21 + 24) && CCLogStream::shouldLog())
        {
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d: Overflow detected\n", "updateLinkQualityMetrics", 528);
        }
      }
      uint64_t v27 = *((void *)this + 5);
      unint64_t v28 = *(unsigned int *)(v27 + 4448);
      if (v28)
      {
        unint64_t v29 = *(void *)(v27 + 104 * v11 + 160);
        v30 = (unint64_t *)(v27 + 104 * *(unsigned int *)(v27 + 148) + 576);
        if (v28 < v29)
        {
          unint64_t *v30 = v28;
          if (*(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d: Overflow detected\n", "updateLinkQualityMetrics", 536);
          }
        }
        else
        {
          unint64_t *v30 = v28 - v29;
        }
      }
      *(void *)(*((void *)this + 5) + 104 * *(unsigned int *)(*((void *)this + 5) + 148) + 152) = *(unsigned int *)(*((void *)this + 5) + 4436);
      *(void *)(*((void *)this + 5) + 104 * *(unsigned int *)(*((void *)this + 5) + 148) + 168) = *(unsigned int *)(*((void *)this + 5) + 4436) + (unint64_t)*(unsigned int *)(*((void *)this + 5) + 4444);
      *(void *)(*((void *)this + 5) + 104 * *(unsigned int *)(*((void *)this + 5) + 148) + 160) = *(unsigned int *)(*((void *)this + 5) + 4448);
      uint64_t v31 = *((void *)this + 5);
      unint64_t v32 = *(unsigned int *)(v31 + 4460);
      if (v32)
      {
        unint64_t v33 = *(void *)(v31 + 104 * v11 + 176);
        v34 = (unint64_t *)(v31 + 104 * *(unsigned int *)(v31 + 148) + 592);
        if (v32 < v33)
        {
          unint64_t *v34 = v32;
          if (*(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d: Overflow detected\n", "updateLinkQualityMetrics", 550);
          }
        }
        else
        {
          unint64_t *v34 = v32 - v33;
        }
      }
      v35 = (unsigned int *)*((void *)this + 5);
      uint64_t v36 = v35[1113];
      uint64_t v37 = v35[1115];
      if (v36 | v37)
      {
        *(void *)&v35[26 * v35[37] + 152] = v37 + v36;
        uint64_t v38 = *((void *)this + 5);
        uint64_t v39 = v38 + 104 * *(unsigned int *)(v38 + 148);
        unint64_t v40 = *(void *)(v39 + 608);
        unint64_t v41 = *(void *)(v38 + 104 * v11 + 192);
        BOOL v25 = v40 >= v41;
        unint64_t v42 = v40 - v41;
        if (v25)
        {
          *(void *)(v39 + 608) = v42;
        }
        else if (*(void *)(v38 + 24) && CCLogStream::shouldLog())
        {
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d: Overflow detected\n", "updateLinkQualityMetrics", 561);
        }
      }
      uint64_t v43 = *((void *)this + 5);
      unint64_t v44 = *(unsigned int *)(v43 + 4456);
      if (v44)
      {
        unint64_t v45 = *(void *)(v43 + 104 * v11 + 184);
        v46 = (unint64_t *)(v43 + 104 * *(unsigned int *)(v43 + 148) + 600);
        if (v44 < v45)
        {
          unint64_t *v46 = v44;
          if (*(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d: Overflow detected\n", "updateLinkQualityMetrics", 569);
          }
        }
        else
        {
          unint64_t *v46 = v44 - v45;
        }
      }
      *(void *)(*((void *)this + 5) + 104 * *(unsigned int *)(*((void *)this + 5) + 148) + 176) = *(unsigned int *)(*((void *)this + 5) + 4460);
      *(void *)(*((void *)this + 5) + 104 * *(unsigned int *)(*((void *)this + 5) + 148) + 192) = *(unsigned int *)(*((void *)this + 5) + 4460) + (unint64_t)*(unsigned int *)(*((void *)this + 5) + 4452);
      *(void *)(*((void *)this + 5) + 104 * *(unsigned int *)(*((void *)this + 5) + 148) + 184) = *(unsigned int *)(*((void *)this + 5) + 4456);
      uint64_t v47 = *((void *)this + 5);
      unsigned int v48 = *(_DWORD *)(v47 + 4340);
      if (v48 == -1)
      {
        *(_DWORD *)(v47 + 4340) = 0;
        uint64_t v47 = *((void *)this + 5);
        unsigned int v48 = *(_DWORD *)(v47 + 4340);
      }
      *(void *)(v47 + 104 * *(unsigned int *)(v47 + 148) + 200) = v48;
      uint64_t v49 = *((void *)this + 5);
      unsigned int v50 = *(_DWORD *)(v49 + 4468);
      if (v50 == -1)
      {
        *(_DWORD *)(v49 + 4468) = 0;
        uint64_t v49 = *((void *)this + 5);
        unsigned int v50 = *(_DWORD *)(v49 + 4468);
      }
      *(void *)(v49 + 104 * *(unsigned int *)(v49 + 148) + 208) = v50;
      uint64_t v51 = *((void *)this + 5);
      unsigned int v52 = *(_DWORD *)(v51 + 4360);
      if (v52)
      {
        unsigned int v53 = *(_DWORD *)(v51 + 216 * v11 + 988);
        v54 = (unsigned int *)(v51 + 216 * *(unsigned int *)(v51 + 148) + 1852);
        if (v52 < v53)
        {
          unsigned int *v54 = v52;
          if (*(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d: Overflow detected\n", "updateLinkQualityMetrics", 594);
          }
        }
        else
        {
          unsigned int *v54 = v52 - v53;
        }
      }
      *(_DWORD *)(*((void *)this + 5) + 216 * *(unsigned int *)(*((void *)this + 5) + 148) + 988) = *(_DWORD *)(*((void *)this + 5) + 4360);
      uint64_t v55 = *((void *)this + 5);
      unsigned int v56 = *(_DWORD *)(v55 + 4464);
      if (v56)
      {
        unsigned int v57 = *(_DWORD *)(v55 + 216 * v11 + 984);
        v58 = (unsigned int *)(v55 + 216 * *(unsigned int *)(v55 + 148) + 1848);
        if (v56 < v57)
        {
          unsigned int *v58 = v56;
          if (*(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d: Overflow detected\n", "updateLinkQualityMetrics", 605);
          }
        }
        else
        {
          unsigned int *v58 = v56 - v57;
        }
      }
      *(_DWORD *)(*((void *)this + 5) + 216 * *(unsigned int *)(*((void *)this + 5) + 148) + 984) = *(_DWORD *)(*((void *)this + 5) + 4464);
      uint64_t v59 = *((void *)this + 5);
      int v60 = *(_DWORD *)(v59 + 4344);
      if (v60 == -1)
      {
        *(_DWORD *)(v59 + 4344) = 0;
        uint64_t v59 = *((void *)this + 5);
        int v60 = *(_DWORD *)(v59 + 4344);
      }
      *(_DWORD *)(v59 + 216 * *(unsigned int *)(v59 + 148) + 992) = v60;
    }
    uint64_t v71 = *((void *)this + 5);
    unsigned int v72 = *(_DWORD *)(v71 + 8 * v11 + 4212);
    if (v72)
    {
      unsigned int v73 = *(_DWORD *)(v71 + 3040);
      *(_DWORD *)(v71 + 8 * *(unsigned int *)(v71 + 148) + 4244) = v73 - v72;
      uint64_t v71 = *((void *)this + 5);
      if (v73 < v72)
      {
        if (*(void *)(v71 + 24))
        {
          int v113 = CCLogStream::shouldLog();
          uint64_t v71 = *((void *)this + 5);
          if (v113)
          {
            CCLogStream::logAlert(*(CCLogStream **)(v71 + 24), "[dk] %s@%d: Overflow detected\n", "updateLinkQualityMetrics", 662);
            uint64_t v71 = *((void *)this + 5);
          }
        }
      }
    }
    *(_DWORD *)(v71 + 8 * *(unsigned int *)(v71 + 148) + 4212) = *(_DWORD *)(v71 + 3040);
    uint64_t v74 = *((void *)this + 5);
    unsigned int v75 = *(_DWORD *)(v74 + 8 * v11 + 4208);
    if (v75)
    {
      unsigned int v76 = *(_DWORD *)(v74 + 3044);
      *(_DWORD *)(v74 + 8 * *(unsigned int *)(v74 + 148) + 4240) = v76 - v75;
      uint64_t v74 = *((void *)this + 5);
      if (v76 < v75)
      {
        if (*(void *)(v74 + 24))
        {
          int v114 = CCLogStream::shouldLog();
          uint64_t v74 = *((void *)this + 5);
          if (v114)
          {
            CCLogStream::logAlert(*(CCLogStream **)(v74 + 24), "[dk] %s@%d: Overflow detected\n", "updateLinkQualityMetrics", 669);
            uint64_t v74 = *((void *)this + 5);
          }
        }
      }
    }
    *(_DWORD *)(v74 + 8 * *(unsigned int *)(v74 + 148) + 4208) = *(_DWORD *)(v74 + 3044);
    if ((IO80211BssManager::isAssociatedToAdhoc(*(IO80211BssManager **)(*((void *)this + 5) + 16)) & 1) == 0)
    {
      if (AppleBCMWLANCore::isEnhancedTrgDisconnectEnabled(**((AppleBCMWLANCore ***)this + 5)))
      {
        uint64_t v77 = *((void *)this + 5);
        if (*(unsigned __int16 *)(v77 + 4272) <= 3u && *(void *)(v77 + 24) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:Invalid Sta_Info Version: %d \n", "updateLinkQualityMetrics", 675, *(unsigned __int16 *)(*((void *)this + 5) + 4272));
        }
      }
    }
    AppleBCMWLANLQM::logAdditionalTxRxCounters(this);
  }
  if (*(unsigned char *)(*((void *)this + 5) + 4593)
    || ((int v78 = *(unsigned __int8 *)(*((void *)this + 5) + 4592), v78 != 5) ? (v79 = v78 == 0) : (v79 = 1), v79))
  {
    AppleBCMWLANLQM::recalculateRSSIAvg(this);
    uint64_t v80 = *((void *)this + 5);
    int v81 = *(_DWORD *)(v80 + 44);
    int v82 = *(_DWORD *)(v80 + 4600);
    if (v81 >= v82) {
      int v83 = 100;
    }
    else {
      int v83 = -2;
    }
    if (v81 >= 1) {
      int v83 = -2;
    }
    if (v81 >= v82) {
      int v84 = v83;
    }
    else {
      int v84 = 50;
    }
    if (IO80211BssManager::isAssociatedOn2G(*(IO80211BssManager **)(v80 + 16)))
    {
      char BtCoexState = AppleBCMWLANCore::getBtCoexState(**((AppleBCMWLANCore ***)this + 5));
      int v86 = v84 == 100 ? 50 : v84;
      if ((BtCoexState & 3) != 0) {
        int v84 = v86;
      }
    }
    uint64_t v87 = *((void *)this + 5);
    if (v84 != *(_DWORD *)(v87 + 4604))
    {
      *(_DWORD *)(v87 + 4604) = v84;
      uint64_t v88 = *((void *)this + 5);
      if (*(void *)(v88 + 24))
      {
        int v89 = CCLogStream::shouldLog();
        uint64_t v88 = *((void *)this + 5);
        if (v89)
        {
          CCLogStream::logAlert(*(CCLogStream **)(v88 + 24), "[dk] %s@%d:Report LQM to User Land %d, ivars->fAverageRSSI %d\n", "updateLinkQualityMetrics", 711, *(_DWORD *)(v88 + 4604), *(_DWORD *)(v88 + 44));
          uint64_t v88 = *((void *)this + 5);
        }
      }
      AppleBCMWLANCore::setLQM(*(AppleBCMWLANCore **)v88);
    }
  }
  if (a2)
  {
    uint64_t v90 = *((void *)this + 5);
    unsigned int v91 = *(_DWORD *)(v90 + 148);
    if (v91 < *(_DWORD *)(v90 + 144) - 1) {
      unsigned int v92 = v91 + 1;
    }
    else {
      unsigned int v92 = 0;
    }
    *(_DWORD *)(v90 + 148) = v92;
    v93 = (_DWORD *)*((void *)this + 5);
    unsigned int v94 = v93[760];
    unsigned int v95 = v93[1629];
    v93[1628] = v94 - v95;
    uint64_t v96 = *((void *)this + 5);
    if (v94 < v95)
    {
      if (*(void *)(v96 + 24))
      {
        int v97 = CCLogStream::shouldLog();
        uint64_t v96 = *((void *)this + 5);
        if (v97)
        {
          CCLogStream::logAlert(*(CCLogStream **)(v96 + 24), "[dk] %s@%d: Overflow detected calculating ivars->fRxBeacons ivars->fInfraSpecificStatistics.rxbeaconmbss %d, ivars->fRxBeaconsStartCount %d, ivars->fRxBeacons %d \n", "updateLinkQualityMetrics", 729, *(_DWORD *)(v96 + 3040), *(_DWORD *)(v96 + 6516), *(_DWORD *)(v96 + 6512));
          uint64_t v96 = *((void *)this + 5);
        }
      }
    }
    BOOL v98 = AppleBCMWLANCore::is4387C2Up(*(OSDictionary **)v96);
    uint64_t v99 = *((void *)this + 5);
    if (v98 && *(_WORD *)(v99 + 3032) == 2 && (*(unsigned char *)(v99 + 3036) & 2) != 0)
    {
      unsigned int v100 = *(_DWORD *)(v99 + 3060);
      unsigned int v101 = *(_DWORD *)(v99 + 6524);
      *(_DWORD *)(v99 + 6520) = v100 - v101;
      uint64_t v102 = *((void *)this + 5);
      if (v100 < v101)
      {
        if (*(void *)(v102 + 24))
        {
          int v103 = CCLogStream::shouldLog();
          uint64_t v102 = *((void *)this + 5);
          if (v103)
          {
            CCLogStream::logAlert(*(CCLogStream **)(v102 + 24), "[dk] %s@%d: Overflow detected calculating ivars->fRxDurMulticast (%d), ivars->fInfraSpecificStatistics.rxdur_multicast %d, ivars->fRxDurStartMulticast %d \n", "updateLinkQualityMetrics", 736, *(_DWORD *)(v102 + 6520), *(_DWORD *)(v102 + 3060), *(_DWORD *)(v102 + 6524));
            uint64_t v102 = *((void *)this + 5);
          }
        }
      }
      unsigned int v104 = *(_DWORD *)(v102 + 3056);
      unsigned int v105 = *(_DWORD *)(v102 + 6532);
      *(_DWORD *)(v102 + 6528) = v104 - v105;
      uint64_t v106 = *((void *)this + 5);
      if (v104 < v105)
      {
        if (*(void *)(v106 + 24))
        {
          int v107 = CCLogStream::shouldLog();
          uint64_t v106 = *((void *)this + 5);
          if (v107)
          {
            CCLogStream::logAlert(*(CCLogStream **)(v106 + 24), "[dk] %s@%d: Overflow detected calculating ivars->fRxDurBroadcast (%d), ivars->fInfraSpecificStatistics.rxdur_broadcast %d,\tivars->fRxDurBroadcast %d \n", "updateLinkQualityMetrics", 741, *(_DWORD *)(v106 + 6528), *(_DWORD *)(v106 + 3056), *(_DWORD *)(v106 + 6532));
            uint64_t v106 = *((void *)this + 5);
          }
        }
      }
      if (*(void *)(v106 + 24))
      {
        int v108 = CCLogStream::shouldLog();
        uint64_t v106 = *((void *)this + 5);
        if (v108)
        {
          CCLogStream::logAlert(*(CCLogStream **)(v106 + 24), "[dk] %s@%d:For current session updated fRxDurMulticast %d, fRxDurBroadcast %d \n", "updateLinkQualityMetrics", 743, *(_DWORD *)(v106 + 6520), *(_DWORD *)(v106 + 6528));
          uint64_t v106 = *((void *)this + 5);
        }
      }
      *(void *)(v106 + 3064) = *(unsigned int *)(v106 + 4336);
      *(void *)(*((void *)this + 5) + 3072) = *(void *)(*((void *)this + 5) + 4408);
      uint64_t v99 = *((void *)this + 5);
    }
    unint64_t v119 = v99 + 4832;
    unint64_t v120 = 0xC400C400C4;
    if (!AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(v99 + 8), (uint64_t)"wme_counters", (uint64_t)&kNoTxPayload, (uint64_t)&v119, 0))
    {
      mach_continuous_time();
      absolutetime_to_nanoseconds();
    }
  }
}

void AppleBCMWLANLQM::logAdditionalTxRxCounters(AppleBCMWLANLQM *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (*(_DWORD *)(v2 + 2712))
  {
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(v2 + 984), (char *)(v2 + 1848), 0x10u, (unsigned int *)(v2 + 2832), 0xD8u, 8, 0);
    uint64_t v2 = *((void *)this + 5);
  }
  int isAssociatedOnHighBand = IO80211BssManager::isAssociatedOnHighBand(*(IO80211BssManager **)(v2 + 16));
  uint64_t v4 = *((void *)this + 5);
  uint64_t v5 = isAssociatedOnHighBand ^ 1u;
  int v6 = *(_DWORD *)(v4 + 4568);
  *(_DWORD *)(v4 + 4568) = v5;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v58 = v7;
  long long v59 = v7;
  long long v56 = v7;
  long long v57 = v7;
  long long v54 = v7;
  long long v55 = v7;
  long long v52 = v7;
  long long v53 = v7;
  long long v50 = v7;
  long long v51 = v7;
  long long v48 = v7;
  long long v49 = v7;
  long long v46 = v7;
  long long v47 = v7;
  *(_OWORD *)__str = v7;
  long long v45 = v7;
  uint64_t v8 = *((void *)this + 5);
  if (*(_DWORD *)(v8 + 2896))
  {
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(v8 + 984), (char *)(v8 + 1848), 0xB8u, (unsigned int *)(v8 + 2900), 0xD8u, 4, 0);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0xBCu, (unsigned int *)(*((void *)this + 5) + 2904), 0xD8u, 4, 0);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0xC0u, (unsigned int *)(*((void *)this + 5) + 2908), 0xD8u, 4, 0);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0xC4u, (unsigned int *)(*((void *)this + 5) + 2912), 0xD8u, 4, 0);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0xC8u, (unsigned int *)(*((void *)this + 5) + 2916), 0xD8u, 4, 0);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0xCCu, (unsigned int *)(*((void *)this + 5) + 2920), 0xD8u, 4, 0);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0xD0u, (unsigned int *)(*((void *)this + 5) + 2924), 0xD8u, 4, 0);
    if (isAssociatedOnHighBand) {
      uint64_t v9 = "HighBand";
    }
    else {
      uint64_t v9 = "2G";
    }
    int v10 = (_DWORD *)(*((void *)this + 5) + 216 * *(unsigned int *)(*((void *)this + 5) + 148));
    snprintf(__str, 0x100uLL, " (%s) rxToss=%u rxLastTossRsn=%u rxNoFrag=%u rxNoCmplId=%u rxNoHaddr=%u rxMulti=%u rxUndec=%u\n", v9, v10[508], v10[509], v10[510], v10[511], v10[512], v10[513], v10[514]);
    AppleBCMWLANCore::refreshLQMLogs(**((void **)this + 5), 0xAu, (long long *)__str);
    uint64_t v8 = *((void *)this + 5);
  }
  if (*(_DWORD *)(v8 + 160 * v5 + 3088))
  {
    uint64_t v11 = (32 * v5) | (v5 << 7);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(v8 + 152), (char *)(v8 + 568), 0x40u, (unsigned int *)(v8 + v11 + 3192), 0x68u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 152), (char *)(*((void *)this + 5) + 568), 0x44u, (unsigned int *)(*((void *)this + 5) + v11 + 3196), 0x68u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 152), (char *)(*((void *)this + 5) + 568), 0x48u, (unsigned int *)(*((void *)this + 5) + v11 + 3200), 0x68u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 152), (char *)(*((void *)this + 5) + 568), 0x4Cu, (unsigned int *)(*((void *)this + 5) + v11 + 3204), 0x68u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 152), (char *)(*((void *)this + 5) + 568), 0x50u, (unsigned int *)(*((void *)this + 5) + v11 + 3208), 0x68u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 152), (char *)(*((void *)this + 5) + 568), 0x54u, (unsigned int *)(*((void *)this + 5) + v11 + 3212), 0x68u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 152), (char *)(*((void *)this + 5) + 568), 0x58u, (unsigned int *)(*((void *)this + 5) + v11 + 3216), 0x68u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 152), (char *)(*((void *)this + 5) + 568), 0x5Cu, (unsigned int *)(*((void *)this + 5) + v11 + 3220), 0x68u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 152), (char *)(*((void *)this + 5) + 568), 0x60u, (unsigned int *)(*((void *)this + 5) + v11 + 3224), 0x68u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 152), (char *)(*((void *)this + 5) + 568), 0x64u, (unsigned int *)(*((void *)this + 5) + v11 + 3228), 0x68u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0x18u, (unsigned int *)(*((void *)this + 5) + v11 + 3104), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0x1Cu, (unsigned int *)(*((void *)this + 5) + v11 + 3108), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0x20u, (unsigned int *)(*((void *)this + 5) + v11 + 3112), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0x24u, (unsigned int *)(*((void *)this + 5) + v11 + 3116), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0x28u, (unsigned int *)(*((void *)this + 5) + v11 + 3124), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0x2Cu, (unsigned int *)(*((void *)this + 5) + v11 + 3128), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0x30u, (unsigned int *)(*((void *)this + 5) + v11 + 3120), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0x34u, (unsigned int *)(*((void *)this + 5) + v11 + 3132), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0x38u, (unsigned int *)(*((void *)this + 5) + v11 + 3136), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0x3Cu, (unsigned int *)(*((void *)this + 5) + v11 + 3140), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0x40u, (unsigned int *)(*((void *)this + 5) + v11 + 3144), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0x44u, (unsigned int *)(*((void *)this + 5) + v11 + 3148), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0x48u, (unsigned int *)(*((void *)this + 5) + v11 + 3152), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0x4Cu, (unsigned int *)(*((void *)this + 5) + v11 + 3156), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0x50u, (unsigned int *)(*((void *)this + 5) + v11 + 3160), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0x54u, (unsigned int *)(*((void *)this + 5) + v11 + 3164), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0x58u, (unsigned int *)(*((void *)this + 5) + v11 + 3168), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0x5Cu, (unsigned int *)(*((void *)this + 5) + v11 + 3172), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0x60u, (unsigned int *)(*((void *)this + 5) + v11 + 3176), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0x64u, (unsigned int *)(*((void *)this + 5) + v11 + 3180), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0x68u, (unsigned int *)(*((void *)this + 5) + v11 + 3184), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0x6Cu, (unsigned int *)(*((void *)this + 5) + v11 + 3188), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0xA8u, (unsigned int *)(*((void *)this + 5) + v11 + 3232), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0xACu, (unsigned int *)(*((void *)this + 5) + v11 + 3236), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0xB0u, (unsigned int *)(*((void *)this + 5) + v11 + 3240), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0xB4u, (unsigned int *)(*((void *)this + 5) + v11 + 3244), 0xD8u, 4, v6 != v5);
    if (isAssociatedOnHighBand) {
      v12 = "HighBand";
    }
    else {
      v12 = "2G";
    }
    uint64_t v13 = *((void *)this + 5) + 216 * *(unsigned int *)(*((void *)this + 5) + 148);
    snprintf(__str, 0x100uLL, " (%s) rxCrsGlitch=%u rxBphyCrsGlitch=%u rxStart=%u rxBadPLCP=%u rxBphyBadPLCP=%u rxBadFCS=%u rxFifo0Ovfl=%u rxFifo1Ovfl=%u rx_nobuf=%llu rxAnyErr=%u rxResponseTimeout=%u rxNoDelim=%u rxFrmTooLong=%u rxFrmTooShort=%u\n", v12, *(_DWORD *)(v13 + 1892), *(_DWORD *)(v13 + 1952), *(_DWORD *)(v13 + 1896), *(_DWORD *)(v13 + 1888), *(_DWORD *)(v13 + 1956), *(_DWORD *)(v13 + 1884), *(_DWORD *)(v13 + 1932), *(_DWORD *)(v13 + 1936), *(void *)(v13 + 1864), *(_DWORD *)(v13 + 1880), *(_DWORD *)(v13 + 1924), *(_DWORD *)(v13 + 1928), *(_DWORD *)(v13 + 1872), *(_DWORD *)(v13 + 1876));
    AppleBCMWLANCore::refreshLQMLogs(**((void **)this + 5), 2u, (long long *)__str);
    uint64_t v14 = *((void *)this + 5);
    unsigned int v15 = *(_DWORD *)(v14 + 148);
    unint64_t v16 = (_DWORD *)(v14 + 104 * v15);
    v17 = (_DWORD *)(v14 + 216 * v15);
    snprintf(__str, 0x100uLL, "(%s) txRTSFrm=%u txRTSFail=%u rxCTSUcast=%u rxRTSUcast=%u txCTSFrm=%u txAMPDU=%u rxBACK=%u txPhyError=%u txAllFrm=%u txMPDU=%u txUcast=%u rxACKUcast=%u OfdmDesense=%d dB\n", v12, v16[159], v16[165], v17[479], v17[478], v16[160], v16[162], v17[485], v16[164], v16[158], v16[163], v16[166], v17[480], *(_DWORD *)(v14 + 4824));
    AppleBCMWLANCore::refreshLQMLogs(**((void **)this + 5), 3u, (long long *)__str);
    uint64_t v18 = *((void *)this + 5);
    unsigned int v19 = *(_DWORD *)(v18 + 148);
    uint64_t v20 = (_DWORD *)(v18 + 216 * v19);
    snprintf(__str, 0x100uLL, "(%s) rxBeaconMbss=%u rxBeaconObss=%u rxDataUcastMbss=%u rxMgmtUcastMbss=%u rxCNTRLUcast=%u txACKFrm=%u txBACK=%u ctxFifoFull=%u ctxFifo2Full=%u rxDataMcast=%u rxMgmtMcast=%u\n", v12, v20[486], v20[487], v20[475], v20[476], v20[477], *(_DWORD *)(v18 + 104 * v19 + 644), *(_DWORD *)(v18 + 104 * v19 + 668), v20[504], v20[505], v20[506], v20[507]);
    AppleBCMWLANCore::refreshLQMLogs(**((void **)this + 5), 4u, (long long *)__str);
    uint64_t v8 = *((void *)this + 5);
  }
  if (*(_DWORD *)(v8 + 72 * v5 + 3728))
  {
    uint64_t v21 = (8 * v5) | (v5 << 6);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(v8 + 984), (char *)(v8 + 1848), 0x70u, (unsigned int *)(v8 + v21 + 3744), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0x74u, (unsigned int *)(*((void *)this + 5) + v21 + 3748), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0x78u, (unsigned int *)(*((void *)this + 5) + v21 + 3752), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0x7Cu, (unsigned int *)(*((void *)this + 5) + v21 + 3756), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0x80u, (unsigned int *)(*((void *)this + 5) + v21 + 3760), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0x84u, (unsigned int *)(*((void *)this + 5) + v21 + 3764), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0x88u, (unsigned int *)(*((void *)this + 5) + v21 + 3768), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0x8Cu, (unsigned int *)(*((void *)this + 5) + v21 + 3772), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0x90u, (unsigned int *)(*((void *)this + 5) + v21 + 3776), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0x94u, (unsigned int *)(*((void *)this + 5) + v21 + 3780), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0x98u, (unsigned int *)(*((void *)this + 5) + v21 + 3784), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0x9Cu, (unsigned int *)(*((void *)this + 5) + v21 + 3788), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0xA0u, (unsigned int *)(*((void *)this + 5) + v21 + 3792), 0xD8u, 4, v6 != v5);
    AppleBCMWLANLQM::updateDeltaTxRxStats(this, (char *)(*((void *)this + 5) + 984), (char *)(*((void *)this + 5) + 1848), 0xA4u, (unsigned int *)(*((void *)this + 5) + v21 + 3796), 0xD8u, 4, v6 != v5);
    uint64_t v22 = *((void *)this + 5);
    unsigned int v23 = *(_DWORD *)(v22 + 148);
    unint64_t v24 = (_DWORD *)(v22 + 216 * v23);
    int v25 = *(_DWORD *)(v22 + 104 * v23 + 668);
    unint64_t v26 = isAssociatedOnHighBand ? "HighBand" : "2G";
    snprintf(__str, 0x100uLL, "RX AMPDU (%s) rxAmpdu=%u txBACK(Ucode)=%u rxMpduInAmpdu=%u rxholes=%u rxdup=%u rxstuck=%u rxoow=%u rxoos=%u rxaddbareq=%u txaddbaresp=%u rxbar=%u txdelba=%u rxdelba=%u rxQueued=%u rxRetryNoBA=%u\n", v26, v24[490], v25, v24[491], v24[492], v24[493], v24[494], v24[495], v24[496], v24[497], v24[498], v24[499], v24[500], v24[501], v24[502],
      v24[503]);
    AppleBCMWLANCore::refreshLQMLogs(**((void **)this + 5), 5u, (long long *)__str);
    if (AppleBCMWLANCore::checkForAdvEcountersSupport(**((AppleBCMWLANCore ***)this + 5)))
    {
      RxMpduLostNonBa = (_DWORD *)AppleBCMWLANCore::getRxMpduLostNonBa(**((AppleBCMWLANCore ***)this + 5), v5);
      unint64_t v28 = (AppleBCMWLANCore **)*((void *)this + 5);
      if (v28[3])
      {
        int shouldLog = CCLogStream::shouldLog();
        unint64_t v28 = (AppleBCMWLANCore **)*((void *)this + 5);
        if (shouldLog)
        {
          CCLogStream::logInfo(v28[3], "[dk] %s@%d:Lost MPDUs in nonAMPDU tids 0:%u, 1:%u, 2:%u, 3:%u, 4:%u, 5:%u, 6:%u, 7:%u\n", "logAdditionalTxRxCounters", 1431, *RxMpduLostNonBa, RxMpduLostNonBa[1], RxMpduLostNonBa[2], RxMpduLostNonBa[3], RxMpduLostNonBa[4], RxMpduLostNonBa[5], RxMpduLostNonBa[6], RxMpduLostNonBa[7]);
          unint64_t v28 = (AppleBCMWLANCore **)*((void *)this + 5);
        }
      }
      RxMpduLostBa = (_DWORD *)AppleBCMWLANCore::getRxMpduLostBa(*v28, v5);
      uint64_t v31 = (AppleBCMWLANCore **)*((void *)this + 5);
      if (v31[3])
      {
        int v32 = CCLogStream::shouldLog();
        uint64_t v31 = (AppleBCMWLANCore **)*((void *)this + 5);
        if (v32)
        {
          CCLogStream::logInfo(v31[3], "[dk] %s@%d:Lost MPDUs in AMPDU tids 0:%u, 1:%u, 2:%u, 3:%u, 4:%u, 5:%u, 6:%u, 7:%u\n", "logAdditionalTxRxCounters", 1435, *RxMpduLostBa, RxMpduLostBa[1], RxMpduLostBa[2], RxMpduLostBa[3], RxMpduLostBa[4], RxMpduLostBa[5], RxMpduLostBa[6], RxMpduLostBa[7]);
          uint64_t v31 = (AppleBCMWLANCore **)*((void *)this + 5);
        }
      }
      RxWmeStats = (_DWORD *)AppleBCMWLANCore::getRxWmeStats(*v31, v5);
      uint64_t v34 = *((void *)this + 5);
      uint64_t v35 = v34 + 216 * *(unsigned int *)(v34 + 148);
      int v36 = *(_DWORD *)(v35 + 1968);
      unsigned int v37 = *(_DWORD *)(v35 + 1964) + v36;
      if (v37 < 2) {
        unsigned int v38 = 0;
      }
      else {
        unsigned int v38 = 100 * v36 / v37;
      }
      AppleBCMWLANCore::setRxPer(*(void *)v34, v38);
      int RxPer = AppleBCMWLANCore::getRxPer(**((AppleBCMWLANCore ***)this + 5));
      snprintf(__str, 0x100uLL, "WME RX MPDUs (rxPER %u %%) in tids 0:%u, 1:%u, 2:%u, 3:%u, 4:%u, 5:%u, 6:%u, 7:%u\n", RxPer, *RxWmeStats, RxWmeStats[1], RxWmeStats[2], RxWmeStats[3], RxWmeStats[4], RxWmeStats[5], RxWmeStats[6], RxWmeStats[7]);
      AppleBCMWLANCore::refreshLQMLogs(**((void **)this + 5), 6u, (long long *)__str);
      DeltaTxWmeStats = (_DWORD *)AppleBCMWLANCore::getDeltaTxWmeStats(**((AppleBCMWLANCore ***)this + 5), v5);
      if (*(void *)(*((void *)this + 5) + 24))
      {
        if (CCLogStream::shouldLog())
        {
          unint64_t v41 = (AppleBCMWLANCore **)*((void *)this + 5);
          unint64_t v42 = v41[3];
          int TxPer = AppleBCMWLANCore::getTxPer(*v41);
          CCLogStream::logInfo(v42, "[dk] %s@%d:WME TX MPDUs (txPER %u %%) in tids 0:%u, 1:%u, 2:%u, 3:%u, 4:%u, 5:%u, 6:%u, 7:%u\n", "logAdditionalTxRxCounters", 1453, TxPer, *DeltaTxWmeStats, DeltaTxWmeStats[1], DeltaTxWmeStats[2], DeltaTxWmeStats[3], DeltaTxWmeStats[4], DeltaTxWmeStats[5], DeltaTxWmeStats[6], DeltaTxWmeStats[7]);
        }
      }
    }
  }
}

float AppleBCMWLANLQM::recalculateRSSIAvg(AppleBCMWLANLQM *this)
{
  int v1 = 0;
  int v2 = 0;
  uint64_t v3 = *((void *)this + 5);
  for (uint64_t i = 36; i != 44; ++i)
  {
    v2 += *(char *)(v3 + i);
    if (*(unsigned char *)(v3 + i)) {
      ++v1;
    }
  }
  if (v1)
  {
    *(_DWORD *)(v3 + 44) = v2 / v1;
    uint64_t v3 = *((void *)this + 5);
  }
  uint64_t v5 = 0;
  int32x4_t v6 = 0uLL;
  v7.i64[0] = 0x100000001;
  v7.i64[1] = 0x100000001;
  int32x4_t v8 = 0uLL;
  int32x4_t v9 = 0uLL;
  int32x4_t v10 = 0uLL;
  int32x4_t v11 = 0uLL;
  int32x4_t v12 = 0uLL;
  int32x4_t v13 = 0uLL;
  int32x4_t v14 = 0uLL;
  do
  {
    int8x16_t v15 = *(int8x16_t *)(v3 + 76 + v5);
    int16x8_t v16 = vmovl_s8(*(int8x8_t *)v15.i8);
    int16x8_t v17 = vmovl_high_s8(v15);
    int32x4_t v14 = vaddw_high_s16(v14, v17);
    int32x4_t v13 = vaddw_s16(v13, *(int16x4_t *)v17.i8);
    int32x4_t v12 = vaddw_high_s16(v12, v16);
    int32x4_t v11 = vaddw_s16(v11, *(int16x4_t *)v16.i8);
    uint8x16_t v18 = (uint8x16_t)vtstq_s8(v15, v15);
    uint16x8_t v19 = vmovl_u8(*(uint8x8_t *)v18.i8);
    uint16x8_t v20 = vmovl_high_u8(v18);
    int32x4_t v10 = vaddq_s32(v10, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v20), v7));
    int32x4_t v9 = vaddq_s32(v9, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v20.i8), v7));
    int32x4_t v8 = vaddq_s32(v8, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v19), v7));
    int32x4_t v6 = vaddq_s32(v6, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v19.i8), v7));
    v5 += 16;
  }
  while (v5 != 64);
  float result = COERCE_FLOAT(vaddvq_s32(vaddq_s32(vaddq_s32(v6, v9), vaddq_s32(v8, v10))));
  float v22 = result;
  if (result != 0.0)
  {
    float result = COERCE_FLOAT(vaddvq_s32(vaddq_s32(vaddq_s32(v11, v13), vaddq_s32(v12, v14))));
    *(_DWORD *)(v3 + 140) = SLODWORD(result) / SLODWORD(v22);
  }
  return result;
}

__n128 AppleBCMWLANLQM::getExtCCAStats(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __n128 result = *(__n128 *)(*(void *)(a1 + 40) + 8488);
    *(_OWORD *)(a2 + 12) = *(_OWORD *)(*(void *)(a1 + 40) + 8500);
    *(__n128 *)a2 = result;
  }
  return result;
}

uint64_t AppleBCMWLANLQM::resetLinkQualityMetrics(AppleBCMWLANLQM *this, int a2)
{
  for (uint64_t i = 0; i != 8; ++i)
  {
    *(unsigned char *)(*((void *)this + 5) + i + 36) = -85;
    *(unsigned char *)(*((void *)this + 5) + i + 76) = -85;
  }
  uint64_t v5 = -416;
  uint64_t v6 = 984;
  uint64_t v7 = 4240;
  do
  {
    uint64_t v8 = *((void *)this + 5) + v5;
    *(void *)(v8 + 664) = 0;
    *(_OWORD *)(v8 + 632) = 0uLL;
    *(_OWORD *)(v8 + 648) = 0uLL;
    *(_OWORD *)(v8 + 600) = 0uLL;
    *(_OWORD *)(v8 + 616) = 0uLL;
    *(_OWORD *)(v8 + 568) = 0uLL;
    *(_OWORD *)(v8 + 584) = 0uLL;
    uint64_t v9 = *((void *)this + 5) + v5;
    *(void *)(v9 + 1080) = 0;
    *(_OWORD *)(v9 + 1048) = 0uLL;
    *(_OWORD *)(v9 + 1064) = 0uLL;
    *(_OWORD *)(v9 + 1016) = 0uLL;
    *(_OWORD *)(v9 + 1032) = 0uLL;
    *(_OWORD *)(v9 + 984) = 0uLL;
    *(_OWORD *)(v9 + 1000) = 0uLL;
    uint64_t v10 = *((void *)this + 5) + v6;
    *(void *)(v10 + 208) = 0;
    *(_OWORD *)(v10 + 176) = 0uLL;
    *(_OWORD *)(v10 + 192) = 0uLL;
    *(_OWORD *)(v10 + 144) = 0uLL;
    *(_OWORD *)(v10 + 160) = 0uLL;
    *(_OWORD *)(v10 + 112) = 0uLL;
    *(_OWORD *)(v10 + 128) = 0uLL;
    *(_OWORD *)(v10 + 80) = 0uLL;
    *(_OWORD *)(v10 + 96) = 0uLL;
    *(_OWORD *)(v10 + 48) = 0uLL;
    *(_OWORD *)(v10 + 64) = 0uLL;
    *(_OWORD *)(v10 + 16) = 0uLL;
    *(_OWORD *)(v10 + 32) = 0uLL;
    *(_OWORD *)uint64_t v10 = 0uLL;
    uint64_t v11 = *((void *)this + 5) + v6;
    *(void *)(v11 + 1072) = 0;
    *(_OWORD *)(v11 + 1056) = 0uLL;
    *(_OWORD *)(v11 + 1040) = 0uLL;
    *(_OWORD *)(v11 + 1008) = 0uLL;
    *(_OWORD *)(v11 + 1024) = 0uLL;
    *(_OWORD *)(v11 + 976) = 0uLL;
    *(_OWORD *)(v11 + 992) = 0uLL;
    *(_OWORD *)(v11 + 944) = 0uLL;
    *(_OWORD *)(v11 + 960) = 0uLL;
    *(_OWORD *)(v11 + 912) = 0uLL;
    *(_OWORD *)(v11 + 928) = 0uLL;
    *(_OWORD *)(v11 + 880) = 0uLL;
    *(_OWORD *)(v11 + 896) = 0uLL;
    *(_OWORD *)(v11 + 864) = 0uLL;
    *(void *)(*((void *)this + 5) + v7 - 32) = 0;
    *(void *)(*((void *)this + 5) + v7) = 0;
    v6 += 216;
    v7 += 8;
    v5 += 104;
  }
  while (v5);
  uint64_t v12 = *((void *)this + 5) + 4816;
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 0;
  *(_DWORD *)(*((void *)this + 5) + 6512) = 0;
  *(_DWORD *)(*((void *)this + 5) + 148) = 0;
  uint64_t v13 = *((void *)this + 5);
  *(void *)(v13 + 2888) = 0;
  *(_OWORD *)(v13 + 2856) = 0u;
  *(_OWORD *)(v13 + 2872) = 0u;
  *(_OWORD *)(v13 + 2824) = 0u;
  *(_OWORD *)(v13 + 2840) = 0u;
  *(_OWORD *)(v13 + 2792) = 0u;
  *(_OWORD *)(v13 + 2808) = 0u;
  *(_OWORD *)(v13 + 2760) = 0u;
  *(_OWORD *)(v13 + 2776) = 0u;
  *(_OWORD *)(v13 + 2728) = 0u;
  *(_OWORD *)(v13 + 2744) = 0u;
  *(_OWORD *)(v13 + 2712) = 0u;
  uint64_t v14 = *((void *)this + 5);
  *(_OWORD *)(v14 + 2912) = 0u;
  *(_OWORD *)(v14 + 2896) = 0u;
  uint64_t v15 = *((void *)this + 5);
  *(void *)(v15 + 3024) = 0;
  *(_OWORD *)(v15 + 3008) = 0u;
  *(_OWORD *)(v15 + 2992) = 0u;
  *(_OWORD *)(v15 + 2976) = 0u;
  *(_OWORD *)(v15 + 2960) = 0u;
  *(_OWORD *)(v15 + 2944) = 0u;
  *(_OWORD *)(v15 + 2928) = 0u;
  *(_DWORD *)(*((void *)this + 5) + 6516) = *(_DWORD *)(*((void *)this + 5) + 3040);
  BOOL v16 = AppleBCMWLANCore::is4387C2Up(**((OSDictionary ***)this + 5));
  uint64_t v17 = *((void *)this + 5);
  if (v16 && *(_WORD *)(v17 + 3032) == 2)
  {
    *(_DWORD *)(v17 + 6520) = 0;
    *(_DWORD *)(*((void *)this + 5) + 6528) = 0;
    *(_DWORD *)(*((void *)this + 5) + 6524) = *(_DWORD *)(*((void *)this + 5) + 3060);
    *(_DWORD *)(*((void *)this + 5) + 6532) = *(_DWORD *)(*((void *)this + 5) + 3056);
    uint64_t v17 = *((void *)this + 5);
    if (*(void *)(v17 + 24))
    {
      int shouldLog = CCLogStream::shouldLog();
      uint64_t v17 = *((void *)this + 5);
      if (shouldLog)
      {
        CCLogStream::logAlert(*(CCLogStream **)(v17 + 24), "[dk] %s@%d:Reset fRxDurStartMulticast %d, fRxDurStartBroadcast %d \n", "resetLinkQualityMetrics", 810, *(_DWORD *)(v17 + 6524), *(_DWORD *)(v17 + 6532));
        uint64_t v17 = *((void *)this + 5);
      }
    }
  }
  *(void *)(v17 + 3080) = 0;
  *(_OWORD *)(v17 + 3048) = 0u;
  *(_OWORD *)(v17 + 3064) = 0u;
  *(_OWORD *)(v17 + 3032) = 0u;
  uint64_t v19 = *((void *)this + 5);
  *(void *)(v19 + 4560) = 0;
  *(_OWORD *)(v19 + 4544) = 0u;
  *(_OWORD *)(v19 + 4528) = 0u;
  *(_OWORD *)(v19 + 4512) = 0u;
  *(_OWORD *)(v19 + 4496) = 0u;
  *(_OWORD *)(v19 + 4480) = 0u;
  *(_OWORD *)(v19 + 4464) = 0u;
  *(_OWORD *)(v19 + 4448) = 0u;
  *(_OWORD *)(v19 + 4432) = 0u;
  *(_OWORD *)(v19 + 4416) = 0u;
  *(_OWORD *)(v19 + 4400) = 0u;
  *(_OWORD *)(v19 + 4384) = 0u;
  *(_OWORD *)(v19 + 4368) = 0u;
  *(_OWORD *)(v19 + 4352) = 0u;
  *(_OWORD *)(v19 + 4336) = 0u;
  *(_OWORD *)(v19 + 4320) = 0u;
  *(_OWORD *)(v19 + 4304) = 0u;
  *(_OWORD *)(v19 + 4288) = 0u;
  *(_OWORD *)(v19 + 4272) = 0u;
  *(_DWORD *)(*((void *)this + 5) + 4604) = a2;
  uint64_t v20 = *((void *)this + 5);
  if (*(void *)(v20 + 24))
  {
    int v21 = CCLogStream::shouldLog();
    uint64_t v20 = *((void *)this + 5);
    if (v21)
    {
      CCLogStream::logInfo(*(CCLogStream **)(v20 + 24), "[dk] %s@%d:Report LQM as %d\n", "resetLinkQualityMetrics", 821, *(_DWORD *)(v20 + 4604));
      uint64_t v20 = *((void *)this + 5);
    }
  }
  uint64_t result = AppleBCMWLANCore::setLQM(*(AppleBCMWLANCore **)v20);
  *(unsigned char *)(*((void *)this + 5) + 4592) = 0;
  return result;
}

uint64_t AppleBCMWLANLQM::getPerCoreRssi(uint64_t this, signed __int8 *a2)
{
  if (a2)
  {
    *a2 = *(unsigned char *)(*(void *)(this + 40) + 2 * *(unsigned int *)(*(void *)(this + 40) + 52) + 56);
    a2[1] = *(unsigned char *)(*(void *)(this + 40) + 2 * *(unsigned int *)(*(void *)(this + 40) + 52) + 57);
  }
  return this;
}

IO80211Controller *AppleBCMWLANLQM::updateLQM(uint64_t a1, char *a2, int a3)
{
  uint64_t result = (IO80211Controller *)AppleBCMWLANCore::isAssociated(**(AppleBCMWLANCore ***)(a1 + 40));
  if (result)
  {
    uint64_t result = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(*(void *)(a1 + 40) + 16));
    if (result)
    {
      if (*a2)
      {
        uint64_t v7 = *(void *)(a1 + 40);
        if ((*((_DWORD *)a2 + 1) - 11) <= 0xFFFFFF90)
        {
          if (*(void *)(v7 + 24))
          {
            int shouldLog = CCLogStream::shouldLog();
            uint64_t v7 = *(void *)(a1 + 40);
            if (shouldLog)
            {
              CCLogStream::logAlert(*(CCLogStream **)(v7 + 24), "[dk] %s@%d:rssi %d dbm is out of range?\n", "updateLQM", 883, *((_DWORD *)a2 + 1));
              uint64_t v7 = *(void *)(a1 + 40);
            }
          }
        }
        CurrentBSS = (IO80211BSSBeacon *)AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(v7 + 16));
        IO80211BSSBeacon::updateRSSI(CurrentBSS, *((_DWORD *)a2 + 1));
        int v10 = *((_DWORD *)a2 + 1);
        *(_DWORD *)(*(void *)(a1 + 40) + 48) = v10;
        ++*(_DWORD *)(*(void *)(a1 + 40) + 32);
        *(_DWORD *)(*(void *)(a1 + 40) + 32) &= 7u;
        *(unsigned char *)(*(void *)(a1 + 40) + *(unsigned int *)(*(void *)(a1 + 40) + 32) + 36) = v10;
      }
      if (a2[8])
      {
        uint64_t v11 = *(void *)(a1 + 40);
        if (a2[9] - 11 <= 0x90)
        {
          if (*(void *)(v11 + 24))
          {
            int v12 = CCLogStream::shouldLog();
            uint64_t v11 = *(void *)(a1 + 40);
            if (v12)
            {
              CCLogStream::logAlert(*(CCLogStream **)(v11 + 24), "[dk] %s@%d:Core0 Rssi %d dbm is out of range?\n", "updateLQM", 896, a2[9]);
              uint64_t v11 = *(void *)(a1 + 40);
            }
          }
        }
        if (a2[10] - 11 <= 0x90)
        {
          if (*(void *)(v11 + 24))
          {
            int v13 = CCLogStream::shouldLog();
            uint64_t v11 = *(void *)(a1 + 40);
            if (v13)
            {
              CCLogStream::logAlert(*(CCLogStream **)(v11 + 24), "[dk] %s@%d:Core1 Rssi %d dbm is out of range?\n", "updateLQM", 899, a2[10]);
              uint64_t v11 = *(void *)(a1 + 40);
            }
          }
        }
        ++*(_DWORD *)(v11 + 52);
        *(_DWORD *)(*(void *)(a1 + 40) + 52) &= 7u;
        *(unsigned char *)(*(void *)(a1 + 40) + 2 * *(unsigned int *)(*(void *)(a1 + 40) + 52) + 56) = a2[9];
        *(unsigned char *)(*(void *)(a1 + 40) + 2 * *(unsigned int *)(*(void *)(a1 + 40) + 52) + 57) = a2[10];
      }
      if (a2[14])
      {
        uint64_t v14 = (IO80211BSSBeacon *)AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(*(void *)(a1 + 40) + 16));
        IO80211BSSBeacon::updateNoise(v14, *((_WORD *)a2 + 8));
      }
      if (a2[188])
      {
        uint64_t v15 = (IO80211BSSBeacon *)AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(*(void *)(a1 + 40) + 16));
        IO80211BSSBeacon::updateNoiseDeltaOverTwoCores(v15, a2[189]);
      }
      if (a2[11])
      {
        BOOL v16 = (IO80211BSSBeacon *)AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(*(void *)(a1 + 40) + 16));
        IO80211BSSBeacon::updateSNR(v16, *((_WORD *)a2 + 6));
      }
      if (a3)
      {
        uint64_t v17 = AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(*(void *)(a1 + 40) + 16));
        (*(void (**)(uint64_t, const char *, void, void, void, void, void))(*(void *)v17 + 576))(v17, "AppleBCMWLAN update LQM:", 0, 0, 0, 0, 0);
      }
      uint64_t v18 = *(void *)(a1 + 40);
      if (*(void *)(v18 + 4584) == *(void *)(v18 + 4576))
      {
        a2[80] = 0;
        a2[329] = 0;
        *(void *)(a2 + 20) = 0;
        *(void *)(a2 + 36) = 0;
        *(void *)(a2 + 28) = 0;
        *(void *)(a2 + 42) = 0;
      }
      else
      {
        unsigned int v19 = *(_DWORD *)(v18 + 148);
        if (v19 >= *(_DWORD *)(v18 + 144) || v19 == 0) {
          unsigned int v19 = *(_DWORD *)(v18 + 144);
        }
        uint64_t v21 = v19 - 1;
        *((_DWORD *)a2 + 7) = *(void *)(v18 + 104 * v21 + 584);
        *((_DWORD *)a2 + 6) = *(void *)(*(void *)(a1 + 40) + 104 * v21 + 576);
        int v22 = *(_DWORD *)(*(void *)(a1 + 40) + 104 * v21 + 568);
        *((_DWORD *)a2 + 5) = v22;
        *((_DWORD *)a2 + 16) = *(void *)(*(void *)(a1 + 40) + 104 * v21 + 200);
        *((_DWORD *)a2 + 17) = *(void *)(*(void *)(a1 + 40) + 104 * v21 + 208);
        *((_DWORD *)a2 + 19) = *(_DWORD *)(*(void *)(a1 + 40) + 216 * v21 + 2032);
        AppleBCMWLANCore::setDeltaTxFail(**(void **)(a1 + 40), v22);
        unsigned int v23 = *((_DWORD *)a2 + 7);
        if (v23) {
          unsigned int v24 = 100 * *((_DWORD *)a2 + 5) / v23;
        }
        else {
          unsigned int v24 = 0;
        }
        AppleBCMWLANCore::setTxPer(**(void **)(a1 + 40), v24);
        *((_DWORD *)a2 + 8) = *(_DWORD *)(*(void *)(a1 + 40) + 216 * v21 + 1848);
        *((_DWORD *)a2 + 9) = *(_DWORD *)(*(void *)(a1 + 40) + 216 * v21 + 1852);
        *((_DWORD *)a2 + 18) = *(_DWORD *)(*(void *)(a1 + 40) + 216 * v21 + 992);
        *((_DWORD *)a2 + 10) = *(_DWORD *)(*(void *)(a1 + 40) + 8 * v21 + 4244);
        *((_DWORD *)a2 + 11) = *(_DWORD *)(*(void *)(a1 + 40) + 8 * v21 + 4240);
        a2[48] = 1;
        a2[80] = 0;
        uint64_t v25 = *(void *)(a1 + 40);
        if (*(_WORD *)(v25 + 4816))
        {
          a2[80] = 1;
          *((_WORD *)a2 + 41) = *(_WORD *)(*(void *)(a1 + 40) + 4816);
          *((_DWORD *)a2 + 21) = (3289700 * *(unsigned __int8 *)(*(void *)(a1 + 40) + 4820)) >> 23;
          *((_DWORD *)a2 + 22) = *(unsigned __int16 *)(*(void *)(a1 + 40) + 4818);
          uint64_t v25 = *(void *)(a1 + 40);
        }
        if (*(unsigned __int16 *)(v25 + 4272) < 4u)
        {
          char v26 = 0;
        }
        else
        {
          *((_DWORD *)a2 + 15) = *(void *)(v25 + 104 * v21 + 608);
          *((_DWORD *)a2 + 14) = *(void *)(*(void *)(a1 + 40) + 104 * v21 + 600);
          *((_DWORD *)a2 + 13) = *(void *)(*(void *)(a1 + 40) + 104 * v21 + 592);
          char v26 = 1;
        }
        a2[49] = v26;
        a2[329] = 1;
        *(void *)(*(void *)(a1 + 40) + 4584) = *(void *)(*(void *)(a1 + 40) + 4576);
      }
      a2[328] = 1;
      a2[18] = 1;
      IO80211BssManager::getCurrentCCA(*(IO80211BssManager **)(*(void *)(a1 + 40) + 16), a2 + 19);
      int isCcaStatsExtSupported = AppleBCMWLANCore::isCcaStatsExtSupported(**(AppleBCMWLANCore ***)(a1 + 40));
      int CurrentCCAStats = IO80211BssManager::getCurrentCCAStats();
      int v29 = CurrentCCAStats;
      if (isCcaStatsExtSupported)
      {
        uint64_t v30 = *(void *)(*(void *)(a1 + 40) + 24);
        if (v29)
        {
          if (v30 && CCLogStream::shouldLog()) {
            CCLogStream::logAlertIf(*(CCLogStream **)(*(void *)(a1 + 40) + 24), 0x200uLL, "[dk] %s@%d:Failed to getCCAStats\n", "updateLQM", 1000);
          }
        }
        else if (v30 && CCLogStream::shouldLog())
        {
          CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 40) + 24), 0x200uLL, "[dk] %s@%d:CCA:%d CCAStats Total[self:%d other:%d intf:%d ts:%d] Wake[self:%d other:%d intf:%d ts:%d] Sleep[self:%d other:%d intf:%d ts:%d]\n", "updateLQM", 1007, a2[19], a2[172], a2[173]);
        }
      }
      else if (CurrentCCAStats == -536870160 {
             && *(void *)(*(void *)(a1 + 40) + 24)
      }
             && CCLogStream::shouldLog())
      {
        CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 40) + 24), 0x200uLL, "[dk] %s@%d:CCA:%d CCAStats Total[self:%d other:%d intf:%d ts:%d] \n", "updateLQM");
      }
      a2[192] = *(unsigned char *)(*(void *)(a1 + 40) + 8780);
      uint64_t v31 = *(void *)(a1 + 40);
      if (*(unsigned char *)(v31 + 8780))
      {
        int v32 = (long long *)(v31 + 8660);
        long long v33 = *v32;
        long long v34 = v32[1];
        long long v35 = v32[3];
        *((_OWORD *)a2 + 15) = v32[2];
        *((_OWORD *)a2 + 16) = v35;
        *((_OWORD *)a2 + 13) = v33;
        *((_OWORD *)a2 + 14) = v34;
        long long v36 = v32[4];
        long long v37 = v32[5];
        long long v38 = v32[6];
        *((void *)a2 + 40) = *((void *)v32 + 14);
        *((_OWORD *)a2 + 18) = v37;
        *((_OWORD *)a2 + 19) = v38;
        *((_OWORD *)a2 + 17) = v36;
        a2[193] = *(unsigned char *)(*(void *)(a1 + 40) + 8781);
        *((_DWORD *)a2 + 49) = *(_DWORD *)(*(void *)(a1 + 40) + 8784);
        *((_DWORD *)a2 + 50) = *(_DWORD *)(*(void *)(a1 + 40) + 8788);
        *((_DWORD *)a2 + 51) = *(_DWORD *)(*(void *)(a1 + 40) + 8792);
        *(_DWORD *)(*(void *)(a1 + 40) + 8784) = 0;
        *(_DWORD *)(*(void *)(a1 + 40) + 8788) = 0;
        *(_DWORD *)(*(void *)(a1 + 40) + 8792) = 0;
      }
      if (*a2 || a2[14] || a2[11] || a2[8])
      {
        uint64_t v39 = **(IO80211Controller ***)(a1 + 40);
        return AppleBCMWLANCore::postLQMEvent(v39, a2);
      }
      else
      {
        uint64_t result = *(IO80211Controller **)(*(void *)(a1 + 40) + 24);
        if (result)
        {
          uint64_t result = (IO80211Controller *)CCLogStream::shouldLog();
          if (result) {
            return (IO80211Controller *)CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 40) + 24), 0x200uLL, "[dk] %s@%d:Not posting LQM event: hasRssi(%d) hasNoise(%d) hasSnr(%d) has_per_ant_rssi(%d)\n", "updateLQM", 1045, *a2, a2[14], a2[11], a2[8]);
          }
        }
      }
    }
  }
  return result;
}

IO80211Controller *AppleBCMWLANLQM::updateRSSI(AppleBCMWLANLQM *this, int a2)
{
  memset(v3, 0, 332);
  DWORD1(v3[0]) = a2;
  LOBYTE(v3[0]) = 1;
  BYTE8(v3[0]) = 1;
  return AppleBCMWLANLQM::updateLQM((uint64_t)this, (char *)v3, 0);
}

uint64_t AppleBCMWLANLQM::updatePerCoreRssi(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 3758097084;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  v11[0] = &v12;
  v11[1] = 0x1000100010;
  uint64_t v4 = *(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 8);
  v10[0] = &v12;
  v10[1] = 16;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarGet(v4, (uint64_t)"phy_rssi_ant", (uint64_t)v10, (uint64_t)v11, 0);
  if (v5)
  {
    if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog())
    {
      uint64_t v6 = *(void **)(a1 + 40);
      uint64_t v7 = (CCLogStream *)v6[3];
      uint64_t v8 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v6 + 112))(*v6, v5);
      CCLogStream::logAlert(v7, "[dk] %s@%d: phy_rssi_ant Failed %s\n", "updatePerCoreRssi", 1102, v8);
    }
  }
  else
  {
    *(unsigned char *)(a2 + 8) = 1;
    *(_WORD *)(a2 + 9) = v13;
  }
  return v5;
}

uint64_t AppleBCMWLANLQM::updatePerCoreNoise(uint64_t a1, unsigned char *a2)
{
  if (!IO80211BssManager::isAssociated(*(IO80211BssManager **)(*(void *)(a1 + 40) + 16))) {
    return 3766625283;
  }
  if (!a2) {
    return 3758097084;
  }
  int v12 = 0;
  v10[1] = 0xC000C000CLL;
  uint64_t v11 = 0;
  uint64_t v4 = *(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 8);
  v9[0] = &v11;
  v9[1] = 12;
  v10[0] = &v11;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarGet(v4, (uint64_t)"phy_noise_ant", (uint64_t)v9, (uint64_t)v10, 0);
  if (v5)
  {
    if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d: phy_noise_ant Failed \n", "updatePerCoreNoise", 1136);
    }
  }
  else if (HIDWORD(v11) == 2)
  {
    a2[188] = 1;
    char v6 = v12;
    a2[190] = v12;
    char v7 = BYTE1(v12);
    a2[191] = BYTE1(v12);
    a2[189] = v7 - v6;
  }
  return v5;
}

uint64_t AppleBCMWLANLQM::updatePerCoreRssiAsync(uint64_t a1, const void *a2)
{
  uint64_t v4 = (void *)IOMallocZeroTyped();
  if (v4)
  {
    uint64_t v5 = v4;
    memcpy(v4, a2, 0x14CuLL);
    v10[0] = a1;
    v10[1] = AppleBCMWLANLQM::handlePerCoreRssiAsyncCallback;
    void v10[2] = v5;
    char v6 = *(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 8);
    int v9 = 1048592;
    uint64_t v7 = AppleBCMWLANCommander::sendIOVarGet(v6, (uint64_t)"phy_rssi_ant", (uint64_t)&kNoTxPayload, (unsigned __int16 *)&v9, (uint64_t)v10, 0);
    if (v7 && *(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d: Failed GET phy_rssi_ant IOCTL, cret[0x%08x]\n");
    }
  }
  else
  {
    uint64_t v7 = 3758097085;
    if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d: Failed to allocate memory\n");
    }
  }
  return v7;
}

void AppleBCMWLANLQM::handlePerCoreRssiAsyncCallback(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, char *address)
{
  if (a3)
  {
    if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog())
    {
      uint64_t v11 = *(void **)(a1 + 40);
      int v12 = (CCLogStream *)v11[3];
      uint64_t v13 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v11 + 112))(*v11, a3);
      CCLogStream::logAlert(v12, "[dk] %s@%d:Error: Failed to get per core RSSI: %s\n", "handlePerCoreRssiAsyncCallback", 1178, v13);
      if (!address) {
        return;
      }
    }
    else if (!address)
    {
      return;
    }
  }
  else
  {
    uint64_t v8 = *a4;
    address[8] = 1;
    address[9] = *(unsigned char *)(v8 + 8);
    address[10] = *(unsigned char *)(v8 + 9);
    int v9 = *(CCLogStream **)(*(void *)(a1 + 40) + 24);
    if (v9) {
      int shouldLog = CCLogStream::shouldLog(v9, 0x8000uLL);
    }
    else {
      int shouldLog = 0;
    }
    AppleBCMWLANLQM::updateLQM(a1, address, shouldLog);
  }
  IOFree(address, 0x14CuLL);
}

uint64_t AppleBCMWLANLQM::getRecentRxPlcpErrCnt(AppleBCMWLANLQM *this)
{
  return *(unsigned int *)(*((void *)this + 5) + 216 * *(unsigned int *)(*((void *)this + 5) + 148) + 1888);
}

uint64_t AppleBCMWLANLQM::getRecentRxBadFcsCnt(AppleBCMWLANLQM *this)
{
  return *(unsigned int *)(*((void *)this + 5) + 216 * *(unsigned int *)(*((void *)this + 5) + 148) + 1884);
}

uint64_t AppleBCMWLANLQM::getRecentRxFramesCnt(AppleBCMWLANLQM *this)
{
  return *(unsigned int *)(*((void *)this + 5) + 216 * *(unsigned int *)(*((void *)this + 5) + 148) + 1852);
}

uint64_t AppleBCMWLANLQM::updateDeltaTxRxStats(AppleBCMWLANLQM *this, char *a2, char *a3, unsigned int a4, unsigned int *a5, unsigned int a6, int a7, char a8)
{
  uint64_t v9 = *((void *)this + 5);
  int v10 = *(_DWORD *)(v9 + 148);
  int v11 = v10;
  if (!v10) {
    int v11 = *(_DWORD *)(v9 + 144);
  }
  if (a2)
  {
    if (a3)
    {
      if (a5)
      {
        if (a4 >= a6)
        {
          uint64_t v19 = 3758097084;
          if (*(void *)(v9 + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:%s unexpected offset = %u\n");
          }
        }
        else
        {
          if (a7 == 4 || a7 == 8)
          {
            int v12 = &a2[(v11 - 1) * a6];
            uint64_t v14 = v10 * a6;
            uint64_t v15 = &a3[v14];
            BOOL v16 = &a2[v14];
            if (a7 != 8)
            {
              unsigned int v17 = *a5;
              if ((a8 & 1) == 0)
              {
                unsigned int v22 = *(_DWORD *)&v12[a4];
                if (!v22)
                {
LABEL_20:
                  uint64_t v19 = 0;
                  *(_DWORD *)&v16[a4] = v17;
                  return v19;
                }
                unsigned int v18 = v17 - v22;
                if (v17 >= v22) {
                  goto LABEL_19;
                }
                int v26 = v22;
                unint64_t v28 = v16;
                if (!*(void *)(v9 + 24))
                {
                  unsigned int v18 = 0;
                  goto LABEL_19;
                }
                int shouldLog = CCLogStream::shouldLog();
                unsigned int v18 = 0;
                BOOL v16 = v28;
                if (!shouldLog)
                {
LABEL_19:
                  *(_DWORD *)&v15[a4] = v18;
                  goto LABEL_20;
                }
                CCLogStream::logEmergency(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d: Overflow detected, valin32[%u] pval32[%u]\n", "updateDeltaTxRxStats", 1489, v17, v26);
                BOOL v16 = v28;
              }
              unsigned int v18 = 0;
              goto LABEL_19;
            }
            unint64_t v20 = *(void *)a5;
            if (a8)
            {
              unint64_t v21 = 0;
            }
            else
            {
              unint64_t v23 = *(void *)&v12[a4];
              if (!v23)
              {
LABEL_24:
                uint64_t v19 = 0;
                *(void *)&v16[a4] = v20;
                return v19;
              }
              unint64_t v21 = v20 - v23;
              if (v20 < v23)
              {
                uint64_t v27 = v23;
                int v29 = v16;
                if (*(void *)(v9 + 24) && CCLogStream::shouldLog()) {
                  CCLogStream::logEmergency(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d: Overflow detected, valin64[%llu] pval64[%llu]\n", "updateDeltaTxRxStats", 1505, v20, v27);
                }
                unint64_t v21 = 0;
                BOOL v16 = v29;
              }
            }
            *(void *)&v15[a4] = v21;
            goto LABEL_24;
          }
          uint64_t v19 = 3758097084;
          if (*(void *)(v9 + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:%s unexpected sizeOfData = %u\n");
          }
        }
      }
      else
      {
        uint64_t v19 = 3758097084;
        if (*(void *)(v9 + 24) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:%s ptrValIn == NULL\n");
        }
      }
    }
    else
    {
      uint64_t v19 = 3758097084;
      if (*(void *)(v9 + 24) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:%s ptrDeltaStruct == NULL\n");
      }
    }
  }
  else
  {
    uint64_t v19 = 3758097084;
    if (*(void *)(v9 + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:%s ptrHistStruct == NULL\n");
    }
  }
  return v19;
}

uint64_t AppleBCMWLANLQM::updateInfraStatistics(AppleBCMWLANLQM *this, OSData *a2)
{
  unsigned int v6 = 0;
  memset(v7, 170, sizeof(v7));
  AppleBCMWLANUtil::AutoreleasedAlignedOSData::AutoreleasedAlignedOSData((AppleBCMWLANUtil::AutoreleasedAlignedOSData *)v7, a2, 4);
  uint64_t v3 = v7[0];
  if (v7[0])
  {
    *(void *)(*((void *)this + 5) + 2720) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v7[0], 4uLL);
    *(void *)(*((void *)this + 5) + 2728) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 8uLL);
    *(void *)(*((void *)this + 5) + 2736) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x10uLL);
    *(void *)(*((void *)this + 5) + 2744) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x20uLL);
    *(void *)(*((void *)this + 5) + 2752) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x28uLL);
    *(void *)(*((void *)this + 5) + 2760) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x1B0uLL);
    *(void *)(*((void *)this + 5) + 2768) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x1B4uLL);
    *(void *)(*((void *)this + 5) + 2776) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x1B8uLL);
    *(void *)(*((void *)this + 5) + 2784) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x1D8uLL);
    *(void *)(*((void *)this + 5) + 2800) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x1A8uLL);
    *(void *)(*((void *)this + 5) + 2888) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0xCuLL);
    *(void *)(*((void *)this + 5) + 2808) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x40uLL);
    *(void *)(*((void *)this + 5) + 2816) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x44uLL);
    *(void *)(*((void *)this + 5) + 2824) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x48uLL);
    *(void *)(*((void *)this + 5) + 2832) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x50uLL);
    *(void *)(*((void *)this + 5) + 2840) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x64uLL);
    *(void *)(*((void *)this + 5) + 2848) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x60uLL);
    *(void *)(*((void *)this + 5) + 2856) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x1D0uLL);
    *(void *)(*((void *)this + 5) + 2864) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x2A0uLL);
    *(void *)(*((void *)this + 5) + 2872) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x1C0uLL);
    *(void *)(*((void *)this + 5) + 2880) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x1C4uLL);
    *(_DWORD *)(*((void *)this + 5) + 2928) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x36CuLL);
    *(_DWORD *)(*((void *)this + 5) + 2932) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x370uLL);
    *(_DWORD *)(*((void *)this + 5) + 2936) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x374uLL);
    *(_DWORD *)(*((void *)this + 5) + 2940) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x378uLL);
    *(_DWORD *)(*((void *)this + 5) + 2944) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x37CuLL);
    *(_DWORD *)(*((void *)this + 5) + 2948) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x380uLL);
    *(_DWORD *)(*((void *)this + 5) + 2960) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x38CuLL);
    *(_DWORD *)(*((void *)this + 5) + 2964) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x390uLL);
    *(_DWORD *)(*((void *)this + 5) + 2968) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x394uLL);
    *(_DWORD *)(*((void *)this + 5) + 2980) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x3A0uLL);
    *(_DWORD *)(*((void *)this + 5) + 2984) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x3A4uLL);
    *(_DWORD *)(*((void *)this + 5) + 2988) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x3A8uLL);
    *(_DWORD *)(*((void *)this + 5) + 2992) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x3ACuLL);
    *(_DWORD *)(*((void *)this + 5) + 2996) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x3B0uLL);
    *(_DWORD *)(*((void *)this + 5) + 3000) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x3B4uLL);
    *(_DWORD *)(*((void *)this + 5) + 3004) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x3B8uLL);
    *(_DWORD *)(*((void *)this + 5) + 3016) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x3C4uLL);
    *(_DWORD *)(*((void *)this + 5) + 3020) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x3C8uLL);
    *(_DWORD *)(*((void *)this + 5) + 3024) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x364uLL);
    *(_DWORD *)(*((void *)this + 5) + 3028) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x368uLL);
    *(_DWORD *)(*((void *)this + 5) + 3040) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x158uLL);
    *(_DWORD *)(*((void *)this + 5) + 3044) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0xB8uLL);
    AppleBCMWLANLQM::updateInfraMuticastBroadcastDuration((OSDictionary ***)this);
    uint64_t v4 = v6;
  }
  else
  {
    uint64_t v4 = 3758097084;
    if (*(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:Failed to create aligned wl_cnt_t data\n", "updateInfraStatistics", 1523);
    }
  }
  AppleBCMWLANUtil::AutoreleasedAlignedOSData::~AutoreleasedAlignedOSData((AppleBCMWLANUtil::AutoreleasedAlignedOSData *)v7);
  return v4;
}

BOOL AppleBCMWLANLQM::updateInfraMuticastBroadcastDuration(OSDictionary ***this)
{
  BOOL result = AppleBCMWLANCore::is4387C2Up(*this[5]);
  if (result)
  {
    uint64_t v3 = this[5];
    if (*((_WORD *)v3 + 1516) == 2 && (*((unsigned char *)v3 + 3036) & 2) != 0)
    {
      v3[383] = (OSDictionary *)*((unsigned int *)v3 + 1084);
      this[5][384] = this[5][551];
    }
  }
  return result;
}

__n128 AppleBCMWLANLQM::updateInfraMuticastBroadcastDuration(uint64_t a1, __n128 *a2)
{
  if (AppleBCMWLANCore::is4387C2Up(**(OSDictionary ***)(a1 + 40)))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    if (*(_WORD *)(v5 + 3032) == 2)
    {
      a2[32].n128_u32[1] |= *(_DWORD *)(v5 + 3036);
      uint64_t v6 = *(void *)(a1 + 40);
      if ((*(unsigned char *)(v6 + 3036) & 2) != 0)
      {
        unint64_t v7 = *(void *)(v6 + 3080);
        a2[32].n128_u64[1] = *(void *)(v6 + 3056);
        __n128 result = *(__n128 *)(v6 + 3064);
        a2[33] = result;
        a2[34].n128_u64[0] = v7;
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANLQM::updateInfraGenericStatistics(AppleBCMWLANLQM *this, OSData *a2)
{
  BytesNoCopy = OSData::getBytesNoCopy(a2);
  *(void *)(*((void *)this + 5) + 2720) = BytesNoCopy[1];
  *(void *)(*((void *)this + 5) + 2728) = BytesNoCopy[2];
  *(void *)(*((void *)this + 5) + 2736) = BytesNoCopy[3];
  *(void *)(*((void *)this + 5) + 2744) = BytesNoCopy[4];
  *(void *)(*((void *)this + 5) + 2752) = BytesNoCopy[5];
  *(void *)(*((void *)this + 5) + 2760) = BytesNoCopy[6];
  *(void *)(*((void *)this + 5) + 2768) = BytesNoCopy[7];
  *(void *)(*((void *)this + 5) + 2776) = BytesNoCopy[8];
  *(void *)(*((void *)this + 5) + 2784) = BytesNoCopy[9];
  *(void *)(*((void *)this + 5) + 2800) = BytesNoCopy[11];
  *(void *)(*((void *)this + 5) + 2888) = BytesNoCopy[22];
  *(void *)(*((void *)this + 5) + 2808) = BytesNoCopy[12];
  *(void *)(*((void *)this + 5) + 2816) = BytesNoCopy[13];
  *(void *)(*((void *)this + 5) + 2824) = BytesNoCopy[14];
  *(void *)(*((void *)this + 5) + 2832) = BytesNoCopy[15];
  *(void *)(*((void *)this + 5) + 2840) = BytesNoCopy[16];
  *(void *)(*((void *)this + 5) + 2848) = BytesNoCopy[17];
  *(void *)(*((void *)this + 5) + 2856) = BytesNoCopy[18];
  *(void *)(*((void *)this + 5) + 2864) = BytesNoCopy[19];
  *(void *)(*((void *)this + 5) + 2872) = BytesNoCopy[20];
  *(_DWORD *)(*((void *)this + 5) + 2712) = 1;
  return 0;
}

uint64_t AppleBCMWLANLQM::updateInfraSpecificStatistics(AppleBCMWLANLQM *this, OSData *a2)
{
  unsigned int v12 = 0;
  BytesNoCopy = (unsigned __int16 *)OSData::getBytesNoCopy(a2);
  memset(v13, 170, sizeof(v13));
  AppleBCMWLANUtil::AutoreleasedAlignedOSData::AutoreleasedAlignedOSData((AppleBCMWLANUtil::AutoreleasedAlignedOSData *)v13, a2, 4);
  uint64_t v5 = v13[0];
  if (v13[0])
  {
    int v6 = *BytesNoCopy;
    *(_WORD *)(*((void *)this + 5) + 3032) = (unsigned __int16)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v12, (int *)2, v13[0], 0);
    *(_WORD *)(*((void *)this + 5) + 3034) = (unsigned __int16)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v12, (int *)2, v5, 2uLL);
    *(_DWORD *)(*((void *)this + 5) + 3040) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v12, (int *)4, v5, 4uLL);
    *(_DWORD *)(*((void *)this + 5) + 3044) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v12, (int *)4, v5, 8uLL);
    if (v6 != 1)
    {
      *(_DWORD *)(*((void *)this + 5) + 3036) |= 1u;
      *(_DWORD *)(*((void *)this + 5) + 3048) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v12, (int *)4, v5, 0xCuLL);
      *(_DWORD *)(*((void *)this + 5) + 3052) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v12, (int *)4, v5, 0x10uLL);
      if (AppleBCMWLANCore::is4387C2Up(**((OSDictionary ***)this + 5)) && BytesNoCopy[1] - 21 <= 7)
      {
        *(_DWORD *)(*((void *)this + 5) + 3036) |= 2u;
        *(_DWORD *)(*((void *)this + 5) + 3060) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v12, (int *)4, v5, 0x18uLL);
        *(_DWORD *)(*((void *)this + 5) + 3056) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v12, (int *)4, v5, 0x14uLL);
        *(void *)(*((void *)this + 5) + 3064) = *(unsigned int *)(*((void *)this + 5) + 4336);
        *(void *)(*((void *)this + 5) + 3072) = *(void *)(*((void *)this + 5) + 4408);
      }
    }
    uint64_t PrimaryInterface = AppleBCMWLANCore::getPrimaryInterface(**((AppleBCMWLANCore ***)this + 5));
    uint64_t v8 = *((void *)this + 5);
    if (PrimaryInterface)
    {
      uint64_t v9 = AppleBCMWLANCore::getPrimaryInterface(*(AppleBCMWLANCore **)v8);
      if (((*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v9 + 800))(v9, 0, *((void *)this + 5) + 3032) & 1) == 0)
      {
        if (*(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog()) {
          CCLogStream::logEmergency(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:ivars->getPrimaryInterfaceId->setInfraSpecificFrameStats failed\n", "updateInfraSpecificStatistics", 1730);
        }
        unsigned int v12 = -536870212;
      }
    }
    else if (*(void *)(v8 + 24) && CCLogStream::shouldLog())
    {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:Infra interface is not existing %d\n", "updateInfraSpecificStatistics", 1732, 1732);
    }
    uint64_t v10 = v12;
  }
  else
  {
    uint64_t v10 = 3758097084;
    if (*(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:Failed to create aligned infraSpecificStats data\n", "updateInfraSpecificStatistics", 1692);
    }
  }
  AppleBCMWLANUtil::AutoreleasedAlignedOSData::~AutoreleasedAlignedOSData((AppleBCMWLANUtil::AutoreleasedAlignedOSData *)v13);
  return v10;
}

uint64_t AppleBCMWLANLQM::setInfraSpecificStatsVersion(uint64_t this, __int16 a2)
{
  *(_WORD *)(*(void *)(this + 40) + 3032) = a2;
  return this;
}

uint64_t AppleBCMWLANLQM::updateInfraControlManagementStatistics(AppleBCMWLANLQM *this, OSData *a2)
{
  int v5 = 0;
  *(_DWORD *)(*((void *)this + 5) + 2928) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v5, (int *)4, a2, 4uLL);
  *(_DWORD *)(*((void *)this + 5) + 2932) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v5, (int *)4, a2, 8uLL);
  *(_DWORD *)(*((void *)this + 5) + 2936) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v5, (int *)4, a2, 0xCuLL);
  *(_DWORD *)(*((void *)this + 5) + 2940) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v5, (int *)4, a2, 0x10uLL);
  *(_DWORD *)(*((void *)this + 5) + 2944) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v5, (int *)4, a2, 0x14uLL);
  *(_DWORD *)(*((void *)this + 5) + 2948) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v5, (int *)4, a2, 0x18uLL);
  *(_DWORD *)(*((void *)this + 5) + 2960) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v5, (int *)4, a2, 0x24uLL);
  *(_DWORD *)(*((void *)this + 5) + 2964) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v5, (int *)4, a2, 0x28uLL);
  *(_DWORD *)(*((void *)this + 5) + 2968) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v5, (int *)4, a2, 0x2CuLL);
  *(_DWORD *)(*((void *)this + 5) + 2980) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v5, (int *)4, a2, 0x38uLL);
  *(_DWORD *)(*((void *)this + 5) + 2984) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v5, (int *)4, a2, 0x3CuLL);
  *(_DWORD *)(*((void *)this + 5) + 2988) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v5, (int *)4, a2, 0x40uLL);
  *(_DWORD *)(*((void *)this + 5) + 2992) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v5, (int *)4, a2, 0x44uLL);
  *(_DWORD *)(*((void *)this + 5) + 2996) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v5, (int *)4, a2, 0x48uLL);
  *(_DWORD *)(*((void *)this + 5) + 3000) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v5, (int *)4, a2, 0x4CuLL);
  *(_DWORD *)(*((void *)this + 5) + 3004) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v5, (int *)4, a2, 0x50uLL);
  *(_DWORD *)(*((void *)this + 5) + 3016) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v5, (int *)4, a2, 0x5CuLL);
  *(_DWORD *)(*((void *)this + 5) + 3020) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v5, (int *)4, a2, 0x60uLL);
  *(_DWORD *)(*((void *)this + 5) + 3024) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v5, (int *)4, a2, 0x64uLL);
  *(_DWORD *)(*((void *)this + 5) + 3028) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v5, (int *)4, a2, 0x68uLL);
  return 0;
}

__n128 AppleBCMWLANLQM::postDeltaSliceUcodeStatistics(AppleBCMWLANLQM *this, unsigned int a2)
{
  int v4 = IO80211BssManager::isAssociatedOnHighBand(*(IO80211BssManager **)(*((void *)this + 5) + 16)) ^ 1;
  unint64_t v183 = 0xAAAAAAAAAAAAAAAALL;
  int v149 = -1431655766;
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  unsigned int v6 = a2;
  *(void *)(*((void *)this + 5) + 160 * a2 + 3096) = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v7 = (AppleBCMWLANCore **)*((void *)this + 5);
  uint64_t v8 = &v7[20 * a2];
  uint64_t v9 = v8[427];
  unint64_t v10 = v183 - (void)v9;
  BOOL v11 = v183 < (unint64_t)v9;
  int v12 = *((_DWORD *)v8 + 852);
  if (v4 == a2 && v12 != 0 && v10 > 0x10C388CFFLL)
  {
    BOOL v16 = &v7[20 * a2];
    unsigned int v17 = *((_DWORD *)v16 + 776);
    unsigned int v18 = *((_DWORD *)v16 + 856);
    unsigned int v151 = v17 - v18;
    if (v17 < v18) {
      BOOL v11 = 1;
    }
    BOOL v148 = v11;
    unsigned int v19 = *((_DWORD *)v16 + 777);
    unsigned int v20 = *((_DWORD *)v16 + 857);
    BOOL v21 = v19 >= v20;
    unsigned int v22 = v19 - v20;
    char v23 = !v21;
    char v147 = v23;
    unsigned int v152 = v22;
    unsigned int v24 = *((_DWORD *)v16 + 778);
    unsigned int v25 = *((_DWORD *)v16 + 858);
    BOOL v21 = v24 >= v25;
    unsigned int v26 = v24 - v25;
    char v27 = !v21;
    char v146 = v27;
    unsigned int v153 = v26;
    unsigned int v28 = *((_DWORD *)v16 + 779);
    unsigned int v29 = *((_DWORD *)v16 + 859);
    BOOL v21 = v28 >= v29;
    unsigned int v30 = v28 - v29;
    char v31 = !v21;
    char v145 = v31;
    unsigned int v154 = v30;
    unsigned int v32 = *((_DWORD *)v16 + 780);
    unsigned int v33 = *((_DWORD *)v16 + 860);
    BOOL v21 = v32 >= v33;
    unsigned int v34 = v32 - v33;
    char v35 = !v21;
    char v144 = v35;
    unsigned int v155 = v34;
    unsigned int v36 = *((_DWORD *)v16 + 781);
    unsigned int v37 = *((_DWORD *)v16 + 861);
    BOOL v21 = v36 >= v37;
    unsigned int v38 = v36 - v37;
    char v39 = !v21;
    char v143 = v39;
    unsigned int v156 = v38;
    unsigned int v40 = *((_DWORD *)v16 + 782);
    unsigned int v41 = *((_DWORD *)v16 + 862);
    BOOL v21 = v40 >= v41;
    unsigned int v42 = v40 - v41;
    char v43 = !v21;
    char v142 = v43;
    unsigned int v157 = v42;
    unsigned int v44 = *((_DWORD *)v16 + 783);
    unsigned int v45 = *((_DWORD *)v16 + 863);
    BOOL v21 = v44 >= v45;
    unsigned int v46 = v44 - v45;
    char v47 = !v21;
    char v141 = v47;
    unsigned int v158 = v46;
    unsigned int v48 = *((_DWORD *)v16 + 784);
    unsigned int v49 = *((_DWORD *)v16 + 864);
    BOOL v21 = v48 >= v49;
    unsigned int v50 = v48 - v49;
    char v51 = !v21;
    unsigned int v159 = v50;
    unsigned int v52 = *((_DWORD *)v16 + 785);
    unsigned int v53 = *((_DWORD *)v16 + 865);
    BOOL v21 = v52 >= v53;
    unsigned int v54 = v52 - v53;
    char v55 = !v21;
    unsigned int v160 = v54;
    unsigned int v56 = *((_DWORD *)v16 + 786);
    unsigned int v57 = *((_DWORD *)v16 + 866);
    BOOL v21 = v56 >= v57;
    unsigned int v58 = v56 - v57;
    char v59 = !v21;
    unsigned int v161 = v58;
    unsigned int v60 = *((_DWORD *)v16 + 787);
    unsigned int v61 = *((_DWORD *)v16 + 867);
    BOOL v21 = v60 >= v61;
    unsigned int v62 = v60 - v61;
    char v63 = !v21;
    unsigned int v162 = v62;
    unsigned int v64 = *((_DWORD *)v16 + 788);
    unsigned int v65 = *((_DWORD *)v16 + 868);
    BOOL v21 = v64 >= v65;
    unsigned int v66 = v64 - v65;
    char v67 = !v21;
    unsigned int v163 = v66;
    unsigned int v68 = *((_DWORD *)v16 + 789);
    unsigned int v69 = *((_DWORD *)v16 + 869);
    BOOL v21 = v68 >= v69;
    unsigned int v70 = v68 - v69;
    char v71 = !v21;
    unsigned int v164 = v70;
    unsigned int v72 = *((_DWORD *)v16 + 790);
    unsigned int v73 = *((_DWORD *)v16 + 870);
    BOOL v21 = v72 >= v73;
    unsigned int v74 = v72 - v73;
    char v75 = !v21;
    unsigned int v165 = v74;
    unsigned int v76 = *((_DWORD *)v16 + 791);
    unsigned int v77 = *((_DWORD *)v16 + 871);
    BOOL v21 = v76 >= v77;
    unsigned int v78 = v76 - v77;
    char v79 = !v21;
    unsigned int v166 = v78;
    unsigned int v80 = *((_DWORD *)v16 + 792);
    unsigned int v81 = *((_DWORD *)v16 + 872);
    BOOL v21 = v80 >= v81;
    unsigned int v82 = v80 - v81;
    char v83 = !v21;
    unsigned int v167 = v82;
    unsigned int v84 = *((_DWORD *)v16 + 793);
    unsigned int v85 = *((_DWORD *)v16 + 873);
    BOOL v21 = v84 >= v85;
    unsigned int v86 = v84 - v85;
    char v87 = !v21;
    unsigned int v168 = v86;
    unsigned int v88 = *((_DWORD *)v16 + 794);
    unsigned int v89 = *((_DWORD *)v16 + 874);
    BOOL v21 = v88 >= v89;
    unsigned int v90 = v88 - v89;
    char v91 = !v21;
    unsigned int v169 = v90;
    unsigned int v92 = *((_DWORD *)v16 + 795);
    unsigned int v93 = *((_DWORD *)v16 + 875);
    BOOL v21 = v92 >= v93;
    unsigned int v94 = v92 - v93;
    char v95 = !v21;
    unsigned int v170 = v94;
    unsigned int v96 = *((_DWORD *)v16 + 796);
    unsigned int v97 = *((_DWORD *)v16 + 876);
    BOOL v21 = v96 >= v97;
    unsigned int v98 = v96 - v97;
    char v99 = !v21;
    unsigned int v171 = v98;
    unsigned int v100 = *((_DWORD *)v16 + 797);
    unsigned int v101 = *((_DWORD *)v16 + 877);
    BOOL v21 = v100 >= v101;
    unsigned int v102 = v100 - v101;
    char v103 = !v21;
    unsigned int v172 = v102;
    unsigned int v104 = *((_DWORD *)v16 + 798);
    unsigned int v105 = *((_DWORD *)v16 + 878);
    BOOL v21 = v104 >= v105;
    unsigned int v106 = v104 - v105;
    char v107 = !v21;
    unsigned int v173 = v106;
    unsigned int v108 = *((_DWORD *)v16 + 799);
    unsigned int v109 = *((_DWORD *)v16 + 879);
    BOOL v21 = v108 >= v109;
    unsigned int v110 = v108 - v109;
    char v111 = !v21;
    unsigned int v174 = v110;
    unsigned int v112 = *((_DWORD *)v16 + 800);
    unsigned int v113 = *((_DWORD *)v16 + 880);
    BOOL v21 = v112 >= v113;
    unsigned int v114 = v112 - v113;
    char v115 = !v21;
    unsigned int v175 = v114;
    unsigned int v116 = *((_DWORD *)v16 + 801);
    unsigned int v117 = *((_DWORD *)v16 + 881);
    BOOL v21 = v116 >= v117;
    unsigned int v118 = v116 - v117;
    char v119 = !v21;
    unsigned int v176 = v118;
    unsigned int v120 = *((_DWORD *)v16 + 802);
    unsigned int v121 = *((_DWORD *)v16 + 882);
    BOOL v21 = v120 >= v121;
    unsigned int v122 = v120 - v121;
    char v123 = !v21;
    unsigned int v177 = v122;
    unsigned int v124 = *((_DWORD *)v16 + 803);
    unsigned int v125 = *((_DWORD *)v16 + 883);
    BOOL v21 = v124 >= v125;
    unsigned int v126 = v124 - v125;
    char v127 = !v21;
    unsigned int v178 = v126;
    unsigned int v128 = *((_DWORD *)v16 + 804);
    unsigned int v129 = *((_DWORD *)v16 + 884);
    BOOL v21 = v128 >= v129;
    unsigned int v130 = v128 - v129;
    char v131 = !v21;
    unsigned int v179 = v130;
    unsigned int v132 = *((_DWORD *)v16 + 805);
    unsigned int v133 = *((_DWORD *)v16 + 885);
    unsigned int v180 = v132 - v133;
    BOOL v134 = v132 < v133;
    unsigned int v135 = *((_DWORD *)v16 + 806);
    unsigned int v136 = *((_DWORD *)v16 + 886);
    unsigned int v181 = v135 - v136;
    BOOL v137 = v135 < v136;
    unsigned int v138 = *((_DWORD *)v16 + 807);
    unsigned int v139 = *((_DWORD *)v16 + 887);
    unsigned int v182 = v138 - v139;
    v150 = v16[387];
    if (!v148
      && (v147 & 1) == 0
      && (v146 & 1) == 0
      && (v145 & 1) == 0
      && (v144 & 1) == 0
      && (v143 & 1) == 0
      && (v142 & 1) == 0
      && (v141 & 1) == 0
      && (v51 & 1) == 0
      && (v55 & 1) == 0
      && (v59 & 1) == 0
      && (v63 & 1) == 0
      && (v67 & 1) == 0
      && (v71 & 1) == 0
      && (v75 & 1) == 0
      && (v79 & 1) == 0
      && (v83 & 1) == 0
      && (v87 & 1) == 0
      && (v91 & 1) == 0
      && (v95 & 1) == 0
      && (v99 & 1) == 0
      && (v103 & 1) == 0
      && (v107 & 1) == 0
      && (v111 & 1) == 0
      && (v115 & 1) == 0
      && (v119 & 1) == 0
      && (v123 & 1) == 0
      && (v127 & 1) == 0
      && (v131 & 1) == 0
      && !v134
      && !v137
      && v138 >= v139)
    {
      int v149 = 0;
      if (*v7) {
        AppleBCMWLANCore::postMessageInfra(*v7, 0xAFu, &v149, 0x8CuLL);
      }
    }
    unint64_t v7 = (AppleBCMWLANCore **)*((void *)this + 5);
    goto LABEL_134;
  }
  if (v12) {
    BOOL v15 = v10 > 0x10C388CFFLL;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
LABEL_134:
    v140 = &v7[20 * v6];
    *((_OWORD *)v140 + 219) = *((_OWORD *)v140 + 199);
    *((_OWORD *)v140 + 220) = *((_OWORD *)v140 + 200);
    *((_OWORD *)v140 + 221) = *((_OWORD *)v140 + 201);
    *((_OWORD *)v140 + 222) = *((_OWORD *)v140 + 202);
    *((_OWORD *)v140 + 215) = *((_OWORD *)v140 + 195);
    *((_OWORD *)v140 + 216) = *((_OWORD *)v140 + 196);
    *((_OWORD *)v140 + 217) = *((_OWORD *)v140 + 197);
    *((_OWORD *)v140 + 218) = *((_OWORD *)v140 + 198);
    *((_OWORD *)v140 + 213) = *((_OWORD *)v140 + 193);
    __n128 result = *((__n128 *)v140 + 194);
    *((__n128 *)v140 + 214) = result;
  }
  return result;
}

__n128 AppleBCMWLANLQM::printDeltaSliceUcodeRxErrs(AppleBCMWLANLQM *this, unsigned int a2)
{
  int isAssociatedOnHighBand = IO80211BssManager::isAssociatedOnHighBand(*(IO80211BssManager **)(*((void *)this + 5) + 16));
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  unsigned int v6 = a2;
  *(void *)(*((void *)this + 5) + 48 * a2 + 4024) = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v7 = (IO80211Controller **)*((void *)this + 5);
  uint64_t v8 = &v7[6 * a2];
  unint64_t v9 = (unint64_t)v8[515];
  BOOL v10 = v9 <= 0xAAAAAAAAAAAAAAAALL;
  unint64_t v11 = 0xAAAAAAAAAAAAAAAALL - v9;
  char v12 = !v10;
  int v13 = *((_DWORD *)v8 + 1028);
  if ((isAssociatedOnHighBand ^ 1) == a2 && v13 != 0 && v11 > 0x10C388CFFLL)
  {
    unsigned int v18 = &v7[6 * a2];
    unsigned int v19 = *((_DWORD *)v18 + 1008);
    unsigned int v20 = *((_DWORD *)v18 + 1032);
    int v21 = v19 - v20;
    if (v19 < v20) {
      char v22 = 1;
    }
    else {
      char v22 = v12;
    }
    unsigned int v23 = *((_DWORD *)v18 + 1009);
    unsigned int v24 = *((_DWORD *)v18 + 1033);
    int v25 = v23 - v24;
    BOOL v26 = v23 < v24;
    unsigned int v27 = *((_DWORD *)v18 + 1010);
    unsigned int v28 = *((_DWORD *)v18 + 1034);
    int v29 = v27 - v28;
    BOOL v30 = v27 < v28;
    unsigned int v31 = *((_DWORD *)v18 + 1011);
    unsigned int v32 = *((_DWORD *)v18 + 1035);
    int v33 = v31 - v32;
    BOOL v34 = v31 < v32;
    unsigned int v35 = *((_DWORD *)v18 + 1012);
    unsigned int v36 = *((_DWORD *)v18 + 1036);
    int v37 = v35 - v36;
    BOOL v38 = v35 < v36;
    unsigned int v39 = *((_DWORD *)v18 + 1013);
    unsigned int v40 = *((_DWORD *)v18 + 1037);
    int v41 = v39 - v40;
    BOOL v42 = v39 < v40;
    unsigned int v43 = *((_DWORD *)v18 + 1014);
    unsigned int v44 = *((_DWORD *)v18 + 1038);
    int v45 = v43 - v44;
    BOOL v46 = v43 < v44;
    if ((v22 & 1) == 0 && !v26 && !v30 && !v34 && !v38 && !v42 && !v46)
    {
      if (*v7 && IO80211Controller::isLQMOSLOGEnabled(*v7)) {
        io80211_os_log();
      }
      char v47 = (IO80211Controller *)**((void **)this + 5);
      if (v47 && IO80211Controller::isLQMIOLOGEnabled(v47))
      {
        unsigned int v48 = "2G";
        if (isAssociatedOnHighBand) {
          unsigned int v48 = "HighBand";
        }
        IOLog("LQM-WIFI: (%s)  rxNotPrimary20s=%u ucodeLateDrop=%u rxInvalidUcodeLateWrongMACPHY=%u rxLate30us=%u rxLegacyFrmInvalid=%u txSifsErr=%u ooseqMacSusp=%u\n", v48, v21, v25, v29, v33, v37, v41, v45);
      }
      unint64_t v7 = (IO80211Controller **)*((void *)this + 5);
      if (*v7)
      {
        int isLQMCCLOGEnabled = IO80211Controller::isLQMCCLOGEnabled(*v7);
        unint64_t v7 = (IO80211Controller **)*((void *)this + 5);
        if (isLQMCCLOGEnabled)
        {
          unsigned int v50 = *v7;
          char v51 = "2G";
          if (isAssociatedOnHighBand) {
            char v51 = "HighBand";
          }
          IO80211Controller::logLQMToCC(v50, "LQM-WIFI: (%s)  rxNotPrimary20s=%u ucodeLateDrop=%u rxInvalidUcodeLateWrongMACPHY=%u rxLate30us=%u rxLegacyFrmInvalid=%u txSifsErr=%u ooseqMacSusp=%u\n", v51, v21, v25, v29, v33, v37, v41, v45);
          unint64_t v7 = (IO80211Controller **)*((void *)this + 5);
        }
      }
    }
    goto LABEL_16;
  }
  if (v13) {
    BOOL v16 = v11 > 0x10C388CFFLL;
  }
  else {
    BOOL v16 = 1;
  }
  if (v16)
  {
LABEL_16:
    unsigned int v17 = &v7[6 * v6];
    *((_OWORD *)v17 + 257) = *((_OWORD *)v17 + 251);
    *((_OWORD *)v17 + 258) = *((_OWORD *)v17 + 252);
    __n128 result = *((__n128 *)v17 + 253);
    *((__n128 *)v17 + 259) = result;
  }
  return result;
}

__n128 AppleBCMWLANLQM::printDeltaDynBWStats(AppleBCMWLANLQM *this)
{
  uint64_t v2 = *((void *)this + 5);
  unsigned int v3 = *(_DWORD *)(v2 + 4612);
  unsigned int v4 = *(_DWORD *)(v2 + 4712);
  int v109 = v3 - v4;
  BOOL v5 = v3 < v4;
  unsigned int v6 = *(_DWORD *)(v2 + 4616);
  unsigned int v7 = *(_DWORD *)(v2 + 4716);
  int v108 = v6 - v7;
  BOOL v8 = v6 < v7;
  unsigned int v9 = *(_DWORD *)(v2 + 4620);
  unsigned int v10 = *(_DWORD *)(v2 + 4720);
  int v107 = v9 - v10;
  BOOL v11 = v9 < v10;
  unsigned int v12 = *(_DWORD *)(v2 + 4624);
  unsigned int v13 = *(_DWORD *)(v2 + 4724);
  int v106 = v12 - v13;
  BOOL v14 = v12 < v13;
  unsigned int v15 = *(_DWORD *)(v2 + 4628);
  unsigned int v16 = *(_DWORD *)(v2 + 4728);
  int v105 = v15 - v16;
  BOOL v17 = v15 < v16;
  unsigned int v18 = *(_DWORD *)(v2 + 4632);
  unsigned int v19 = *(_DWORD *)(v2 + 4732);
  int v104 = v18 - v19;
  BOOL v20 = v18 < v19;
  unsigned int v21 = *(_DWORD *)(v2 + 4636);
  unsigned int v22 = *(_DWORD *)(v2 + 4736);
  int v103 = v21 - v22;
  BOOL v23 = v21 < v22;
  unsigned int v24 = *(_DWORD *)(v2 + 4640);
  unsigned int v25 = *(_DWORD *)(v2 + 4740);
  int v102 = v24 - v25;
  BOOL v26 = v24 < v25;
  unsigned int v27 = *(_DWORD *)(v2 + 4644);
  unsigned int v28 = *(_DWORD *)(v2 + 4744);
  int v101 = v27 - v28;
  BOOL v29 = v27 < v28;
  unsigned int v30 = *(_DWORD *)(v2 + 4648);
  unsigned int v31 = *(_DWORD *)(v2 + 4748);
  int v100 = v30 - v31;
  BOOL v32 = v30 < v31;
  unsigned int v33 = *(_DWORD *)(v2 + 4652);
  unsigned int v34 = *(_DWORD *)(v2 + 4752);
  int v99 = v33 - v34;
  BOOL v35 = v33 < v34;
  unsigned int v36 = *(_DWORD *)(v2 + 4656);
  unsigned int v37 = *(_DWORD *)(v2 + 4756);
  int v98 = v36 - v37;
  BOOL v38 = v36 < v37;
  unsigned int v39 = *(_DWORD *)(v2 + 4660);
  unsigned int v40 = *(_DWORD *)(v2 + 4760);
  int v97 = v39 - v40;
  BOOL v41 = v39 < v40;
  unsigned int v42 = *(_DWORD *)(v2 + 4664);
  unsigned int v43 = *(_DWORD *)(v2 + 4764);
  int v96 = v42 - v43;
  BOOL v44 = v42 < v43;
  unsigned int v45 = *(_DWORD *)(v2 + 4668);
  unsigned int v46 = *(_DWORD *)(v2 + 4768);
  int v47 = v45 - v46;
  BOOL v48 = v45 < v46;
  unsigned int v49 = *(_DWORD *)(v2 + 4672);
  unsigned int v50 = *(_DWORD *)(v2 + 4772);
  int v51 = v49 - v50;
  BOOL v52 = v49 < v50;
  unsigned int v53 = *(_DWORD *)(v2 + 4692);
  unsigned int v54 = *(_DWORD *)(v2 + 4792);
  int v95 = v53 - v54;
  BOOL v55 = v53 < v54;
  unsigned int v56 = *(_DWORD *)(v2 + 4696);
  unsigned int v57 = *(_DWORD *)(v2 + 4796);
  int v94 = v56 - v57;
  BOOL v58 = v56 < v57;
  unsigned int v59 = *(_DWORD *)(v2 + 4700);
  unsigned int v60 = *(_DWORD *)(v2 + 4800);
  int v93 = v59 - v60;
  BOOL v61 = v59 < v60;
  unsigned int v62 = *(_DWORD *)(v2 + 4704);
  unsigned int v63 = *(_DWORD *)(v2 + 4804);
  int v92 = v62 - v63;
  BOOL v64 = v62 < v63;
  unsigned int v65 = *(_DWORD *)(v2 + 4676);
  unsigned int v66 = *(_DWORD *)(v2 + 4776);
  int v91 = v65 - v66;
  BOOL v67 = v65 < v66;
  unsigned int v68 = *(_DWORD *)(v2 + 4680);
  unsigned int v69 = *(_DWORD *)(v2 + 4780);
  int v90 = v68 - v69;
  BOOL v70 = v68 < v69;
  unsigned int v71 = *(_DWORD *)(v2 + 4684);
  unsigned int v72 = *(_DWORD *)(v2 + 4784);
  int v89 = v71 - v72;
  BOOL v73 = v71 < v72;
  unsigned int v74 = *(_DWORD *)(v2 + 4688);
  unsigned int v75 = *(_DWORD *)(v2 + 4788);
  BOOL v76 = v74 >= v75;
  int v77 = v74 - v75;
  char v78 = !v76;
  if (!v5
    && !v8
    && !v11
    && !v14
    && !v17
    && !v20
    && !v23
    && !v26
    && !v29
    && !v32
    && !v35
    && !v38
    && !v41
    && !v44
    && !v48
    && !v52
    && !v55
    && !v58
    && !v61
    && !v64
    && !v67
    && !v70
    && !v73
    && (v78 & 1) == 0)
  {
    if (*(void *)v2 && IO80211Controller::isLQMOSLOGEnabled(*(IO80211Controller **)v2)) {
      io80211_os_log();
    }
    char v79 = (IO80211Controller *)**((void **)this + 5);
    if (v79 && IO80211Controller::isLQMIOLOGEnabled(v79)) {
      IOLog("LQM-WIFI: Dynamic BW Stats: TxRTS [%u,  %u,  %u,  %u]   RxRTS [%u,  %u,  %u,  %u]   TxCTS [%u,  %u,  %u,  %u]   RxCTS [%u,  %u,  %u,  %u]\n", v109, v108, v107, v106, v105, v104, v103, v102, v101, v100, v99, v98, v97, v96, v47, v51);
    }
    unsigned int v80 = (IO80211Controller *)**((void **)this + 5);
    if (v80)
    {
      int isLQMCCLOGEnabled = IO80211Controller::isLQMCCLOGEnabled(v80);
      unsigned int v82 = (IO80211Controller **)*((void *)this + 5);
      if (isLQMCCLOGEnabled)
      {
        IO80211Controller::logLQMToCC(*v82, "LQM-WIFI: Dynamic BW Stats: TxRTS [%u,  %u,  %u,  %u]   RxRTS [%u,  %u,  %u,  %u]   TxCTS [%u,  %u,  %u,  %u]   RxCTS [%u,  %u,  %u,  %u]\n", v109, v108, v107, v106, v105, v104, v103, v102, v101, v100, v99, v98, v97, v96, v47, v51);
        unsigned int v82 = (IO80211Controller **)*((void *)this + 5);
      }
      if (*v82 && IO80211Controller::isLQMOSLOGEnabled(*v82)) {
        io80211_os_log();
      }
    }
    char v83 = (IO80211Controller *)**((void **)this + 5);
    if (v83 && IO80211Controller::isLQMIOLOGEnabled(v83)) {
      IOLog("LQM-WIFI: Dynamic BW Stats: TxMPDU [%u,  %u,  %u,  %u]   RxMPDU [%u,  %u,  %u,  %u]\n", v95, v94, v93, v92, v91, v90, v89, v77);
    }
    unsigned int v84 = (IO80211Controller *)**((void **)this + 5);
    if (v84 && IO80211Controller::isLQMCCLOGEnabled(v84)) {
      IO80211Controller::logLQMToCC(**((IO80211Controller ***)this + 5), "LQM-WIFI: Dynamic BW Stats: TxMPDU [%u,  %u,  %u,  %u]   RxMPDU [%u,  %u,  %u,  %u]\n", v95, v94, v93, v92, v91, v90, v89, v77);
    }
  }
  uint64_t v85 = *((void *)this + 5);
  __n128 result = *(__n128 *)(v85 + 4656);
  long long v87 = *(_OWORD *)(v85 + 4688);
  *(_OWORD *)(v85 + 4772) = *(_OWORD *)(v85 + 4672);
  *(_OWORD *)(v85 + 4788) = v87;
  *(_DWORD *)(v85 + 4804) = *(_DWORD *)(v85 + 4704);
  long long v88 = *(_OWORD *)(v85 + 4624);
  *(_OWORD *)(v85 + 4708) = *(_OWORD *)(v85 + 4608);
  *(_OWORD *)(v85 + 4724) = v88;
  *(_OWORD *)(v85 + 4740) = *(_OWORD *)(v85 + 4640);
  *(__n128 *)(v85 + 4756) = result;
  return result;
}

uint64_t AppleBCMWLANLQM::updateSliceUcodeStatistics(AppleBCMWLANLQM *this, OSData *a2, unsigned int a3, int a4)
{
  unsigned int v22 = 0;
  if (a3 >= 2)
  {
    uint64_t v20 = 3758097084;
    if (*(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logEmergency(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:Out of range slice index %d\n", "updateSliceUcodeStatistics", 1982, a3);
    }
  }
  else
  {
    switch(a4)
    {
      case 1:
        unsigned __int8 BytesNoCopy = OSData::getBytesNoCopy(a2, 0, 4uLL);
        uint64_t v8 = *((void *)this + 5);
        if ((BytesNoCopy & 3) == 0)
        {
          unsigned int v9 = a3;
          uint64_t v10 = 5 * a3;
          uint64_t v11 = *(unsigned int *)(v8 + 160 * a3 + 3240);
          *(_DWORD *)(*((void *)this + 5) + 32 * v10 + 3104) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x48uLL);
          *(_DWORD *)(*((void *)this + 5) + 32 * v10 + 3108) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x4CuLL);
          *(_DWORD *)(*((void *)this + 5) + 32 * v10 + 3112) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x50uLL);
          *(_DWORD *)(*((void *)this + 5) + 32 * v10 + 3116) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x54uLL);
          *(_DWORD *)(*((void *)this + 5) + 32 * v10 + 3124) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x58uLL);
          *(_DWORD *)(*((void *)this + 5) + 32 * v10 + 3128) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x5CuLL);
          *(_DWORD *)(*((void *)this + 5) + 32 * v10 + 3132) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x64uLL);
          *(_DWORD *)(*((void *)this + 5) + 32 * v10 + 3140) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x6CuLL);
          *(_DWORD *)(*((void *)this + 5) + 32 * v10 + 3144) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x70uLL);
          *(_DWORD *)(*((void *)this + 5) + 32 * v10 + 3148) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x74uLL);
          *(_DWORD *)(*((void *)this + 5) + 32 * v10 + 3152) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x78uLL);
          *(_DWORD *)(*((void *)this + 5) + 32 * v10 + 3156) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0xA8uLL);
          *(_DWORD *)(*((void *)this + 5) + 32 * v10 + 3160) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0xB0uLL);
          *(_DWORD *)(*((void *)this + 5) + 32 * v10 + 3164) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0xB4uLL);
          *(_DWORD *)(*((void *)this + 5) + 32 * v10 + 3168) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0xB8uLL);
          *(_DWORD *)(*((void *)this + 5) + 32 * v10 + 3172) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0xE8uLL);
          *(_DWORD *)(*((void *)this + 5) + 32 * v10 + 3192) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0);
          *(_DWORD *)(*((void *)this + 5) + 32 * v10 + 3196) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 4uLL);
          *(_DWORD *)(*((void *)this + 5) + 32 * v10 + 3200) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 8uLL);
          *(_DWORD *)(*((void *)this + 5) + 32 * v10 + 3204) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0xCuLL);
          *(_DWORD *)(*((void *)this + 5) + 32 * v10 + 3208) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x30uLL);
          *(_DWORD *)(*((void *)this + 5) + 32 * v10 + 3216) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x3CuLL);
          *(_DWORD *)(*((void *)this + 5) + 32 * v10 + 3220) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0xDCuLL);
          *(_DWORD *)(*((void *)this + 5) + 32 * v10 + 3224) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0xE0uLL);
          *(_DWORD *)(*((void *)this + 5) + 32 * v10 + 3228) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0xECuLL);
          *(_DWORD *)(*((void *)this + 5) + 32 * v10 + 3212) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x34uLL);
          *(_DWORD *)(*((void *)this + 5) + 32 * v10 + 3120) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x60uLL);
          *(_DWORD *)(*((void *)this + 5) + 32 * v10 + 3136) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x68uLL);
          *(_DWORD *)(*((void *)this + 5) + 32 * v10 + 3176) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x9CuLL);
          *(_DWORD *)(*((void *)this + 5) + 32 * v10 + 3180) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0xA4uLL);
          *(_DWORD *)(*((void *)this + 5) + 32 * v10 + 3184) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0xF0uLL);
          *(_DWORD *)(*((void *)this + 5) + 32 * v10 + 3188) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0xFCuLL);
          *(_DWORD *)(*((void *)this + 5) + 32 * v10 + 3240) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x90uLL);
          unsigned int v12 = a2;
          size_t v13 = 148;
          goto LABEL_10;
        }
        uint64_t v20 = 3758097084;
        if (*(void *)(v8 + 24) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:GE40_UCODE_V1 alignment fails\n");
        }
        break;
      case 3:
        unsigned __int8 v16 = OSData::getBytesNoCopy(a2, 0, 4uLL);
        uint64_t v17 = *((void *)this + 5);
        if ((v16 & 3) == 0)
        {
          unsigned int v9 = a3;
          uint64_t v10 = 5 * a3;
          uint64_t v11 = *(unsigned int *)(v17 + 160 * a3 + 3240);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3104) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x30uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3108) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x34uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3112) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x38uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3116) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x3CuLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3124) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x40uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3128) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x44uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3132) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x4CuLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3140) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x54uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3144) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x58uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3148) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x5CuLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3152) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x60uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3156) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x90uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3160) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x98uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3164) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x100uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3168) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x104uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3172) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0xC4uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3192) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3196) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 4uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3200) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 8uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3204) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0xCuLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3208) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x18uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3216) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x24uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3220) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0xB8uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3224) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0xBCuLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3228) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0xC8uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3212) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x34uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3120) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x48uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3136) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x50uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3176) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x84uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3180) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x8CuLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3184) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0xCCuLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3188) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0xD8uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3232) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x128uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3236) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x1B0uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3240) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x78uLL);
          unsigned int v12 = a2;
          size_t v13 = 124;
          goto LABEL_10;
        }
        uint64_t v20 = 3758097084;
        if (*(void *)(v17 + 24) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:GE80_UCODE_V1 alignment fails\n");
        }
        break;
      case 4:
        unsigned __int8 v14 = OSData::getBytesNoCopy(a2, 4uLL, 4uLL);
        uint64_t v15 = *((void *)this + 5);
        if ((v14 & 3) == 0)
        {
          unsigned int v9 = a3;
          uint64_t v10 = 5 * a3;
          uint64_t v11 = *(unsigned int *)(v15 + 160 * a3 + 3240);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3104) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x10CuLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3108) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x110uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3112) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x20CuLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3116) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x210uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3124) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x104uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3128) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x108uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3132) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x1F0uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3140) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x50uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3144) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x48uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3148) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x4CuLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3152) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x58uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3156) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x160uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3160) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x114uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3164) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x138uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3168) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x13CuLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3172) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x94uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3120) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 4uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3136) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x54uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3176) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x40uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3180) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x80uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3184) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x120uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3188) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x130uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3232) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x154uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3236) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x158uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3240) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x208uLL);
          unsigned int v12 = a2;
          size_t v13 = 60;
LABEL_10:
          *(_DWORD *)(*((void *)this + 5) + 32 * v10 + 3244) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, v12, v13);
          uint64_t v18 = *((void *)this + 5);
          uint64_t v19 = *(unsigned int *)(v18 + 32 * v10 + 3240);
          if (v19 > v11) {
            *(void *)(v18 + 3080) += v19 - v11;
          }
          goto LABEL_14;
        }
        uint64_t v20 = 3758097084;
        if (*(void *)(v15 + 24) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:GE88_UCODE_RX_V1 alignment fails\n");
        }
        break;
      case 6:
        if (((unint64_t)OSData::getBytesNoCopy(a2, 4uLL, 4uLL) & 3) == 0)
        {
          unsigned int v9 = a3;
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3192) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 4uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3196) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 8uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3200) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0xCuLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3204) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x10uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3208) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x40uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3216) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x8CuLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3220) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x7CuLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3224) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x48uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3228) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x14uLL);
          *(_DWORD *)(*((void *)this + 5) + 160 * a3 + 3212) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, a2, 0x14CuLL);
          goto LABEL_14;
        }
        uint64_t v20 = 3758097084;
        if (*(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:GE88_UCODE_TX_V1 alignment fails\n");
        }
        break;
      default:
        unsigned int v9 = a3;
LABEL_14:
        *(_DWORD *)(*((void *)this + 5) + 160 * v9 + 3088) = 1;
        AppleBCMWLANLQM::postDeltaSliceUcodeStatistics(this, a3);
        uint64_t v20 = v22;
        break;
    }
  }
  return v20;
}

uint64_t AppleBCMWLANLQM::updateAdditionalRxCounters(AppleBCMWLANLQM *this, OSData *a2)
{
  unsigned int v6 = 0;
  memset(v7, 170, sizeof(v7));
  AppleBCMWLANUtil::AutoreleasedAlignedOSData::AutoreleasedAlignedOSData((AppleBCMWLANUtil::AutoreleasedAlignedOSData *)v7, a2, 2);
  unsigned int v3 = v7[0];
  if (v7[0])
  {
    *(_DWORD *)(*((void *)this + 5) + 2900) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v7[0], 0x30CuLL);
    *(_DWORD *)(*((void *)this + 5) + 2904) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x314uLL);
    *(_DWORD *)(*((void *)this + 5) + 2908) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x334uLL);
    *(_DWORD *)(*((void *)this + 5) + 2912) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x338uLL);
    *(_DWORD *)(*((void *)this + 5) + 2916) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0x33CuLL);
    *(_DWORD *)(*((void *)this + 5) + 2920) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0xE8uLL);
    *(_DWORD *)(*((void *)this + 5) + 2924) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v6, (int *)4, v3, 0xF4uLL);
    *(_DWORD *)(*((void *)this + 5) + 2896) = 1;
    uint64_t v4 = v6;
  }
  else
  {
    if (*(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logEmergency(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:Failed to allocate alignedCounters\n", "updateAdditionalRxCounters", 2139);
    }
    uint64_t v4 = 3758097084;
    unsigned int v6 = -536870212;
  }
  AppleBCMWLANUtil::AutoreleasedAlignedOSData::~AutoreleasedAlignedOSData((AppleBCMWLANUtil::AutoreleasedAlignedOSData *)v7);
  return v4;
}

uint64_t AppleBCMWLANLQM::updateSliceUcodeRxErr(AppleBCMWLANLQM *this, OSData *a2, unsigned int a3, int a4)
{
  unsigned int v16 = 0;
  if (a3 >= 2)
  {
    uint64_t v13 = 3758097084;
    if (*(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logEmergency(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:Out of range slice index %d\n", "updateSliceUcodeRxErr", 2158, a3);
    }
    return v13;
  }
  if (a4 != 2305)
  {
    if (a4 != 4117)
    {
      unsigned int v9 = a3;
      goto LABEL_12;
    }
    if (((unint64_t)OSData::getBytesNoCopy(a2, 0, 4uLL) & 3) == 0)
    {
      unsigned __int16 CounterValueSafe = (unsigned __int16)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v16, (int *)2, a2, 0);
      unsigned __int16 v8 = (unsigned __int16)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v16, (int *)2, a2, 2uLL);
      if (CounterValueSafe == 1)
      {
        if ((v8 & 0xFFE0) != 0)
        {
          unsigned int v9 = a3;
          uint64_t v10 = 3 * a3;
          *(_DWORD *)(*((void *)this + 5) + 48 * a3 + 4032) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v16, (int *)4, a2, 4uLL);
          *(_DWORD *)(*((void *)this + 5) + 48 * a3 + 4036) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v16, (int *)4, a2, 8uLL);
          *(_DWORD *)(*((void *)this + 5) + 48 * a3 + 4040) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v16, (int *)4, a2, 0xCuLL);
          *(_DWORD *)(*((void *)this + 5) + 48 * a3 + 4044) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v16, (int *)4, a2, 0x10uLL);
          *(_DWORD *)(*((void *)this + 5) + 48 * a3 + 4048) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v16, (int *)4, a2, 0x14uLL);
          *(_DWORD *)(*((void *)this + 5) + 48 * a3 + 4052) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v16, (int *)4, a2, 0x18uLL);
          uint64_t v11 = a2;
          size_t v12 = 28;
LABEL_10:
          *(_DWORD *)(*((void *)this + 5) + 16 * v10 + 4056) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v16, (int *)4, v11, v12);
LABEL_12:
          *(_DWORD *)(*((void *)this + 5) + 48 * v9 + 4016) = 1;
          AppleBCMWLANLQM::printDeltaSliceUcodeRxErrs(this, a3);
          return v16;
        }
        uint64_t v13 = 3758097084;
        if (*(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:Unexpected length\n");
        }
      }
      else
      {
        uint64_t v13 = 3758097084;
        if (*(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:Unexpected Version\n");
        }
      }
      return v13;
    }
    uint64_t v13 = 3758097084;
    if (!*(void *)(*((void *)this + 5) + 24) || !CCLogStream::shouldLog()) {
      return v13;
    }
    uint64_t v15 = *(CCLogStream **)(*((void *)this + 5) + 24);
LABEL_23:
    CCLogStream::logAlert(v15, "[dk] %s@%d:alignment fails\n");
    return v13;
  }
  if (((unint64_t)OSData::getBytesNoCopy(a2, 0, 4uLL) & 3) == 0)
  {
    unsigned int v9 = a3;
    uint64_t v10 = 3 * a3;
    *(_DWORD *)(*((void *)this + 5) + 48 * a3 + 4032) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v16, (int *)4, a2, 0);
    *(_DWORD *)(*((void *)this + 5) + 48 * a3 + 4036) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v16, (int *)4, a2, 4uLL);
    *(_DWORD *)(*((void *)this + 5) + 48 * a3 + 4040) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v16, (int *)4, a2, 8uLL);
    *(_DWORD *)(*((void *)this + 5) + 48 * a3 + 4044) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v16, (int *)4, a2, 0xCuLL);
    *(_DWORD *)(*((void *)this + 5) + 48 * a3 + 4048) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v16, (int *)4, a2, 0x10uLL);
    *(_DWORD *)(*((void *)this + 5) + 48 * a3 + 4052) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v16, (int *)4, a2, 0x14uLL);
    uint64_t v11 = a2;
    size_t v12 = 24;
    goto LABEL_10;
  }
  uint64_t v13 = 3758097084;
  if (*(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog())
  {
    uint64_t v15 = *(CCLogStream **)(*((void *)this + 5) + 24);
    goto LABEL_23;
  }
  return v13;
}

uint64_t AppleBCMWLANLQM::updateDynBwStats(AppleBCMWLANLQM *this, int a2, OSData *a3)
{
  uint64_t result = 0;
  unsigned int v12 = 0;
  if (a2 != 4107)
  {
    uint64_t v13 = 0;
    mach_continuous_time();
    absolutetime_to_nanoseconds();
    if (((unint64_t)OSData::getBytesNoCopy(a3, 0, 4uLL) & 3) != 0)
    {
      if (*(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:Dynamic BW stats alignment fails\n");
      }
      return -536870212;
    }
    *(_WORD *)(*((void *)this + 5) + 4608) = (unsigned __int16)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v12, (int *)2, a3, 0);
    *(_WORD *)(*((void *)this + 5) + 4610) = (unsigned __int16)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v12, (int *)2, a3, 2uLL);
    if (a2 == 4121)
    {
      uint64_t v9 = *((void *)this + 5);
      if (*(_WORD *)(v9 + 4608) == 1)
      {
        if (*(unsigned __int16 *)(v9 + 4610) <= 0x43u)
        {
          if (!*(void *)(v9 + 24) || !CCLogStream::shouldLog()) {
            return -536870212;
          }
          unsigned __int16 v8 = *(CCLogStream **)(*((void *)this + 5) + 24);
LABEL_30:
          CCLogStream::logAlert(v8, "[dk] %s@%d:Unexpected length\n");
          return -536870212;
        }
LABEL_12:
        *(_DWORD *)(*((void *)this + 5) + 4612) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v12, (int *)4, a3, 4uLL);
        *(_DWORD *)(*((void *)this + 5) + 4616) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v12, (int *)4, a3, 8uLL);
        *(_DWORD *)(*((void *)this + 5) + 4620) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v12, (int *)4, a3, 0xCuLL);
        *(_DWORD *)(*((void *)this + 5) + 4624) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v12, (int *)4, a3, 0x10uLL);
        *(_DWORD *)(*((void *)this + 5) + 4628) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v12, (int *)4, a3, 0x14uLL);
        *(_DWORD *)(*((void *)this + 5) + 4632) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v12, (int *)4, a3, 0x18uLL);
        *(_DWORD *)(*((void *)this + 5) + 4636) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v12, (int *)4, a3, 0x1CuLL);
        *(_DWORD *)(*((void *)this + 5) + 4640) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v12, (int *)4, a3, 0x20uLL);
        *(_DWORD *)(*((void *)this + 5) + 4644) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v12, (int *)4, a3, 0x24uLL);
        *(_DWORD *)(*((void *)this + 5) + 4648) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v12, (int *)4, a3, 0x28uLL);
        *(_DWORD *)(*((void *)this + 5) + 4652) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v12, (int *)4, a3, 0x2CuLL);
        *(_DWORD *)(*((void *)this + 5) + 4656) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v12, (int *)4, a3, 0x30uLL);
        *(_DWORD *)(*((void *)this + 5) + 4660) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v12, (int *)4, a3, 0x34uLL);
        *(_DWORD *)(*((void *)this + 5) + 4664) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v12, (int *)4, a3, 0x38uLL);
        *(_DWORD *)(*((void *)this + 5) + 4668) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v12, (int *)4, a3, 0x3CuLL);
        *(_DWORD *)(*((void *)this + 5) + 4612) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v12, (int *)4, a3, 4uLL);
        uint64_t v10 = *((void *)this + 5);
        if (-*(void *)(v10 + 4808) >> 2 >= 0x465uLL)
        {
          *(void *)(v10 + 4808) = 0;
          AppleBCMWLANLQM::printDeltaDynBWStats(this);
        }
        return v12;
      }
      if (!*(void *)(v9 + 24) || !CCLogStream::shouldLog()) {
        return -536870212;
      }
      uint64_t v11 = *(CCLogStream **)(*((void *)this + 5) + 24);
    }
    else
    {
      if (a2 != 4108) {
        goto LABEL_12;
      }
      uint64_t v7 = *((void *)this + 5);
      if (*(_WORD *)(v7 + 4608) == 2)
      {
        if (*(unsigned __int16 *)(v7 + 4610) <= 0x63u)
        {
          if (!*(void *)(v7 + 24) || !CCLogStream::shouldLog()) {
            return -536870212;
          }
          unsigned __int16 v8 = *(CCLogStream **)(*((void *)this + 5) + 24);
          goto LABEL_30;
        }
        goto LABEL_12;
      }
      if (!*(void *)(v7 + 24) || !CCLogStream::shouldLog()) {
        return -536870212;
      }
      uint64_t v11 = *(CCLogStream **)(*((void *)this + 5) + 24);
    }
    CCLogStream::logAlert(v11, "[dk] %s@%d:Unexpected Version\n");
    return -536870212;
  }
  return result;
}

uint64_t AppleBCMWLANLQM::updateSliceRxAmpduStats(AppleBCMWLANLQM *this, OSData *a2, unsigned int a3)
{
  unsigned int v71 = 0;
  int isAssociatedOnHighBand = IO80211BssManager::isAssociatedOnHighBand(*(IO80211BssManager **)(*((void *)this + 5) + 16));
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v68 = v7;
  long long v69 = v7;
  long long v66 = v7;
  long long v67 = v7;
  if (a3 >= 2)
  {
    if (*(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logEmergency(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:Out of range slice index %d\n", "updateSliceRxAmpduStats", 2270, a3);
    }
    return -536870212;
  }
  int v8 = isAssociatedOnHighBand;
  if (((unint64_t)OSData::getBytesNoCopy(a2, 4uLL, 4uLL) & 3) != 0)
  {
    if (*(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:alignment fails\n", "updateSliceRxAmpduStats", 2271);
    }
    return -536870212;
  }
  unint64_t v70 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v9 = 9 * a3;
  *(_DWORD *)(*((void *)this + 5) + 8 * v9 + 3744) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v71, (int *)4, a2, 4uLL);
  *(_DWORD *)(*((void *)this + 5) + 8 * v9 + 3748) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v71, (int *)4, a2, 8uLL);
  *(_DWORD *)(*((void *)this + 5) + 8 * v9 + 3752) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v71, (int *)4, a2, 0x20uLL);
  *(_DWORD *)(*((void *)this + 5) + 8 * v9 + 3756) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v71, (int *)4, a2, 0x28uLL);
  *(_DWORD *)(*((void *)this + 5) + 8 * v9 + 3760) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v71, (int *)4, a2, 0x2CuLL);
  *(_DWORD *)(*((void *)this + 5) + 8 * v9 + 3764) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v71, (int *)4, a2, 0x30uLL);
  *(_DWORD *)(*((void *)this + 5) + 8 * v9 + 3768) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v71, (int *)4, a2, 0x34uLL);
  *(_DWORD *)(*((void *)this + 5) + 8 * v9 + 3772) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v71, (int *)4, a2, 0x38uLL);
  *(_DWORD *)(*((void *)this + 5) + 8 * v9 + 3776) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v71, (int *)4, a2, 0x3CuLL);
  *(_DWORD *)(*((void *)this + 5) + 8 * v9 + 3780) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v71, (int *)4, a2, 0x40uLL);
  *(_DWORD *)(*((void *)this + 5) + 8 * v9 + 3784) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v71, (int *)4, a2, 0x4CuLL);
  *(_DWORD *)(*((void *)this + 5) + 8 * v9 + 3788) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v71, (int *)4, a2, 0x50uLL);
  *(_DWORD *)(*((void *)this + 5) + 8 * v9 + 3792) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v71, (int *)4, a2, 0x24uLL);
  if (OSData::getLength(a2) >= 0x55) {
    *(_DWORD *)(*((void *)this + 5) + 72 * a3 + 3796) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v71, (int *)4, a2, 0x54uLL);
  }
  *(_DWORD *)(*((void *)this + 5) + 72 * a3 + 3728) = 1;
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  *(void *)(*((void *)this + 5) + 72 * a3 + 3736) = v70;
  uint64_t v10 = (AppleBCMWLANCore **)*((void *)this + 5);
  uint64_t v11 = &v10[9 * a3];
  unsigned int v12 = v11[485];
  unint64_t v13 = v70 - (void)v12;
  BOOL v14 = v70 < (unint64_t)v12;
  int v15 = *((_DWORD *)v11 + 968);
  if ((v8 ^ 1) == a3 && v15 && v13 > 0x10C388CFFLL)
  {
    unsigned int v16 = &v10[9 * a3];
    unsigned int v17 = *((_DWORD *)v16 + 936);
    unsigned int v18 = *((_DWORD *)v16 + 972);
    HIDWORD(v66) = v17 - v18;
    if (v17 < v18) {
      BOOL v14 = 1;
    }
    unsigned int v19 = *((_DWORD *)v16 + 937);
    unsigned int v20 = *((_DWORD *)v16 + 973);
    BOOL v21 = v19 >= v20;
    unsigned int v22 = v19 - v20;
    char v23 = !v21;
    LODWORD(v67) = v22;
    unsigned int v24 = *((_DWORD *)v16 + 938);
    unsigned int v25 = *((_DWORD *)v16 + 974);
    BOOL v21 = v24 >= v25;
    unsigned int v26 = v24 - v25;
    char v27 = !v21;
    DWORD1(v67) = v26;
    unsigned int v28 = *((_DWORD *)v16 + 939);
    unsigned int v29 = *((_DWORD *)v16 + 975);
    BOOL v21 = v28 >= v29;
    unsigned int v30 = v28 - v29;
    char v31 = !v21;
    DWORD2(v67) = v30;
    unsigned int v32 = *((_DWORD *)v16 + 940);
    unsigned int v33 = *((_DWORD *)v16 + 976);
    BOOL v21 = v32 >= v33;
    unsigned int v34 = v32 - v33;
    char v35 = !v21;
    HIDWORD(v67) = v34;
    unsigned int v36 = *((_DWORD *)v16 + 941);
    unsigned int v37 = *((_DWORD *)v16 + 977);
    BOOL v21 = v36 >= v37;
    unsigned int v38 = v36 - v37;
    char v39 = !v21;
    LODWORD(v68) = v38;
    unsigned int v40 = *((_DWORD *)v16 + 942);
    unsigned int v41 = *((_DWORD *)v16 + 978);
    BOOL v21 = v40 >= v41;
    unsigned int v42 = v40 - v41;
    char v43 = !v21;
    DWORD1(v68) = v42;
    unsigned int v44 = *((_DWORD *)v16 + 943);
    unsigned int v45 = *((_DWORD *)v16 + 979);
    BOOL v21 = v44 >= v45;
    unsigned int v46 = v44 - v45;
    char v47 = !v21;
    DWORD2(v68) = v46;
    unsigned int v48 = *((_DWORD *)v16 + 944);
    unsigned int v49 = *((_DWORD *)v16 + 980);
    BOOL v21 = v48 >= v49;
    unsigned int v50 = v48 - v49;
    char v51 = !v21;
    HIDWORD(v68) = v50;
    unsigned int v52 = *((_DWORD *)v16 + 945);
    unsigned int v53 = *((_DWORD *)v16 + 981);
    BOOL v21 = v52 >= v53;
    unsigned int v54 = v52 - v53;
    char v55 = !v21;
    LODWORD(v69) = v54;
    unsigned int v56 = *((_DWORD *)v16 + 946);
    unsigned int v57 = *((_DWORD *)v16 + 982);
    BOOL v21 = v56 >= v57;
    unsigned int v58 = v56 - v57;
    char v59 = !v21;
    DWORD1(v69) = v58;
    unsigned int v60 = *((_DWORD *)v16 + 947);
    unsigned int v61 = *((_DWORD *)v16 + 983);
    BOOL v21 = v60 >= v61;
    unsigned int v62 = v60 - v61;
    char v63 = !v21;
    DWORD2(v69) = v62;
    HIDWORD(v69) = *((_DWORD *)v16 + 948);
    *(void *)((char *)&v66 + 4) = v16[467];
    if (!v14
      && (v23 & 1) == 0
      && (v27 & 1) == 0
      && (v31 & 1) == 0
      && (v35 & 1) == 0
      && (v39 & 1) == 0
      && (v43 & 1) == 0
      && (v47 & 1) == 0
      && (v51 & 1) == 0
      && (v55 & 1) == 0
      && (v59 & 1) == 0
      && (v63 & 1) == 0)
    {
      LODWORD(v66) = 0;
      if (*v10) {
        AppleBCMWLANCore::postMessageInfra(*v10, 0xAEu, &v66, 0x40uLL);
      }
    }
    uint64_t v10 = (AppleBCMWLANCore **)*((void *)this + 5);
    goto LABEL_60;
  }
  if (!v15 || v13 > 0x10C388CFFLL)
  {
LABEL_60:
    BOOL v64 = &v10[9 * a3];
    *((_OWORD *)v64 + 243) = *((_OWORD *)v64 + 234);
    *((_OWORD *)v64 + 244) = *((_OWORD *)v64 + 235);
    *((_OWORD *)v64 + 245) = *((_OWORD *)v64 + 236);
    v64[492] = v64[474];
    *((_OWORD *)v64 + 242) = *((_OWORD *)v64 + 233);
  }
  return v71;
}

uint64_t AppleBCMWLANLQM::dumpStats(AppleBCMWLANCore ***this, char *a2, unsigned int a3, int a4)
{
  AppleBCMWLANLQM::recalculateRSSIAvg((AppleBCMWLANLQM *)this);
  NetAdapter = (AppleBCMWLANNetAdapter *)AppleBCMWLANCore::getNetAdapter(*this[5]);
  unint64_t v9 = AppleBCMWLANNetAdapter::getLastRealTimeChange(NetAdapter);
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  uint64_t v10 = (AppleBCMWLANNetAdapter *)AppleBCMWLANCore::getNetAdapter(*this[5]);
  unint64_t v55 = v9 / 0x3B9ACA00;
  unint64_t v56 = v9 % 0x3B9ACA00;
  uint64_t isRealTimeTrafficSettingEnabled = AppleBCMWLANNetAdapter::isRealTimeTrafficSettingEnabled(v10);
  uint64_t v54 = 0x2DD01FC06;
  uint64_t v57 = a3;
  unsigned int v11 = IO80211Print();
  unsigned int v12 = this[5][2];
  if (v12) {
    v11 += IO80211BssManager::dumpBSS(v12, a2);
  }
  int v58 = a4;
  unint64_t v13 = (char *)IOMallocZeroData();
  BOOL v14 = v13;
  if (!v13
    || (*unint64_t v13 = 0,
        LODWORD(v13) = snprintf(v13, 0x400uLL, "RSSI         Avg %d [", *((_DWORD *)this[5] + 11)),
        unsigned int v15 = 1024,
        v13 <= 0x3FF))
  {
    unsigned int v15 = v13;
  }
  for (uint64_t i = 36; i != 44; ++i)
  {
    unsigned int v17 = 0;
    if (!v14
      || v15 > 0x3FE
      || ((v18 = 1024, i != 43) ? (unsigned int v19 = " ") : (unsigned int v19 = "]"),
          unsigned int v17 = snprintf(&v14[v15], 1024 - v15, "%d%s", *((char *)this[5] + i), v19),
          v17 <= 0x3FF))
    {
      int v18 = v17;
    }
    v15 += v18;
  }
  unsigned int v20 = 0;
  if (!v14
    || v15 > 0x3FE
    || (int v21 = 1024,
        unsigned int v20 = snprintf(&v14[v15], 1024 - v15, "\n", isRealTimeTrafficSettingEnabled, v54, 473034410, v55, v56),
        v20 <= 0x3FF))
  {
    int v21 = v20;
  }
  char v59 = a2;
  if (a2)
  {
    if (v14)
    {
      unsigned int v22 = &a2[v57 + v11];
      if (v58 - v11 >= v21 + v15) {
        size_t v23 = v21 + v15;
      }
      else {
        size_t v23 = v58 - v11;
      }
      if ((unint64_t)v22 > 0x7FFFFDFFFFFFLL) {
        IOLog("%s:%06u: BUF_PRINT_EMIT: Invalid address detected: buf[%p] addr[%p] len[%6d] remain[%6d] printed[%6d] e[%d]\n", "dumpStats", 2354, v14, &a2[v57 + v11], v23, v58 - v11, v21 + v15, 0);
      }
      else {
        memmove(v22, v14, v23);
      }
      *BOOL v14 = 0;
      v11 += v23;
      goto LABEL_34;
    }
LABEL_31:
    unsigned int v24 = 0;
LABEL_35:
    unsigned int v25 = v24;
    goto LABEL_36;
  }
  if (!v14) {
    goto LABEL_31;
  }
  if (this[5][3] && CCLogStream::shouldLog()) {
    CCLogStream::log();
  }
  *BOOL v14 = 0;
LABEL_34:
  unsigned int v25 = 1024;
  unsigned int v24 = snprintf(v14, 0x400uLL, "RSSI Rx Data Avg %d [", *((_DWORD *)this[5] + 35));
  if (v24 <= 0x3FF) {
    goto LABEL_35;
  }
LABEL_36:
  for (uint64_t j = 0; j != 64; ++j)
  {
    unsigned int v27 = 0;
    if (!v14 || v25 > 0x3FE) {
      goto LABEL_45;
    }
    int v28 = 1024;
    if ((j & 7) != 0) {
      unsigned int v29 = " ";
    }
    else {
      unsigned int v29 = "  ";
    }
    if (j == 63) {
      unsigned int v29 = "]";
    }
    unsigned int v27 = snprintf(&v14[v25], 1024 - v25, "%d%s", *((char *)this[5] + j + 76), v29);
    if (v27 <= 0x3FF) {
LABEL_45:
    }
      int v28 = v27;
    v25 += v28;
  }
  unsigned int v30 = 0;
  if (!v14 || v25 > 0x3FE || (int v31 = 1024, v30 = snprintf(&v14[v25], 1024 - v25, "\n"), v30 <= 0x3FF)) {
    int v31 = v30;
  }
  if (!a2)
  {
    if (v14)
    {
      if (this[5][3] && CCLogStream::shouldLog()) {
        CCLogStream::log();
      }
      goto LABEL_65;
    }
LABEL_62:
    unsigned int v34 = 0;
    goto LABEL_66;
  }
  if (!v14) {
    goto LABEL_62;
  }
  unsigned int v32 = &a2[v57 + v11];
  if (v58 - v11 >= v31 + v25) {
    size_t v33 = v31 + v25;
  }
  else {
    size_t v33 = v58 - v11;
  }
  if ((unint64_t)v32 > 0x7FFFFDFFFFFFLL) {
    IOLog("%s:%06u: BUF_PRINT_EMIT: Invalid address detected: buf[%p] addr[%p] len[%6d] remain[%6d] printed[%6d] e[%d]\n", "dumpStats", 2364, v14, &a2[v57 + v11], v33, v58 - v11, v31 + v25, 0);
  }
  else {
    memmove(v32, v14, v33);
  }
  v11 += v33;
LABEL_65:
  strcpy(v14, "TxStats [");
  unsigned int v34 = 9;
LABEL_66:
  char v35 = this[5];
  LODWORD(v36) = *((_DWORD *)v35 + 36);
  if (v36)
  {
    uint64_t v37 = 0;
    unint64_t v38 = 0;
    do
    {
      unsigned int v39 = 0;
      if (!v14
        || v34 > 0x3FE
        || ((int v40 = 1024, v41 = &v35[v37], v42 = *(_OWORD *)(v41 + 19), v43 = v41[21], v38 != v36 - 1)
          ? (unsigned int v44 = " ")
          : (unsigned int v44 = "]"),
            unsigned int v39 = snprintf(&v14[v34], 1024 - v34, "(Fl=%u Rt=%u Tx=%u)%s", v42, DWORD2(v42), v43, v44),
            v39 <= 0x3FF))
      {
        int v40 = v39;
      }
      v34 += v40;
      ++v38;
      char v35 = this[5];
      unint64_t v36 = *((unsigned int *)v35 + 36);
      v37 += 13;
    }
    while (v38 < v36);
  }
  unsigned int v45 = 0;
  if (v14)
  {
    unsigned int v46 = v59;
    if (v34 <= 0x3FE)
    {
      int v47 = 1024;
      unsigned int v45 = snprintf(&v14[v34], 1024 - v34, "\n");
      if (v45 > 0x3FF)
      {
        if (v59) {
          goto LABEL_80;
        }
        goto LABEL_88;
      }
    }
  }
  else
  {
    unsigned int v46 = v59;
  }
  int v47 = v45;
  if (v46)
  {
LABEL_80:
    if (v14)
    {
      unsigned int v48 = v47 + v34;
      unsigned int v49 = &v46[v57 + v11];
      if (v58 - v11 >= v47 + v34) {
        size_t v50 = v48;
      }
      else {
        size_t v50 = v58 - v11;
      }
      if ((unint64_t)v49 > 0x7FFFFDFFFFFFLL) {
        IOLog("%s:%06u: BUF_PRINT_EMIT: Invalid address detected: buf[%p] addr[%p] len[%6d] remain[%6d] printed[%6d] e[%d]\n", "dumpStats", 2375, v14, &v46[v57 + v11], v50, v58 - v11, v48, 0);
      }
      else {
        memmove(v49, v14, v50);
      }
      *BOOL v14 = 0;
      v11 += v50;
      unsigned int v46 = v59;
    }
    goto LABEL_96;
  }
LABEL_88:
  if (v14)
  {
    if (this[5][3] && CCLogStream::shouldLog()) {
      CCLogStream::log();
    }
    *BOOL v14 = 0;
  }
LABEL_96:
  int v51 = AppleBCMWLANLQM::dumpWmeCounters((AppleBCMWLANLQM *)this, v46);
  if (v14) {
    IOFreeData();
  }
  return v51 + v11;
}

uint64_t AppleBCMWLANLQM::dumpWmeCounters(AppleBCMWLANLQM *this, char *a2)
{
  return IO80211Print();
}

uint64_t AppleBCMWLANLQM::setStatsTimerIntervalMS(AppleBCMWLANLQM *this, uint64_t a2)
{
  *(unsigned char *)(*((void *)this + 5) + 4593) = a2 == 5000;
  *(_DWORD *)(*((void *)this + 5) + 4596) = a2;
  uint64_t v2 = *((void *)this + 5);
  if (*(void *)(v2 + 8528))
  {
    if (a2 == 1000)
    {
      char v6 = 15;
    }
    else
    {
      if (a2 != 5000)
      {
        if (*(void *)(v2 + 24))
        {
          int shouldLog = CCLogStream::shouldLog();
          uint64_t v2 = *((void *)this + 5);
          if (shouldLog)
          {
            CCLogStream::logAlert(*(CCLogStream **)(v2 + 24), "[dk] %s@%d: Error: Unknown timer interval %d\n", "setStatsTimerIntervalMS", 2418, a2);
            uint64_t v2 = *((void *)this + 5);
          }
        }
      }
      char v6 = 3;
    }
    *(unsigned char *)(v2 + 8476) = v6;
    (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 5) + 8528) + 120))(*(void *)(*((void *)this + 5) + 8528), a2);
  }
  return 0;
}

uint64_t AppleBCMWLANLQM::loadBss(AppleBCMWLANLQM *this, BOOL *a2, ether_addr *a3)
{
  uint64_t v6 = 3766625283;
  *a2 = 1;
  if (AppleBCMWLANCore::isAssociated(**((AppleBCMWLANCore ***)this + 5)))
  {
    *(_DWORD *)(*((void *)this + 5) + 6540) = 1936;
    uint64_t v7 = *((void *)this + 5);
    v30[0] = v7 + 6540;
    v30[1] = 0x79000880790;
    int v8 = *(AppleBCMWLANCommander **)(v7 + 8);
    v29[0] = v7 + 6540;
    v29[1] = 4;
    uint64_t v9 = AppleBCMWLANCommander::runIOCtlGet(v8, 136, (uint64_t)v29, (uint64_t)v30, 0);
    uint64_t v10 = *((void *)this + 5);
    if (v9)
    {
      uint64_t v11 = v9;
      if (*(void *)(v10 + 24) && CCLogStream::shouldLog())
      {
        unsigned int v19 = (void *)*((void *)this + 5);
        unsigned int v20 = (CCLogStream *)v19[3];
        int v21 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v19 + 112))(*v19, v11);
        CCLogStream::logCrit(v20, "[dk] %s@%d: WLC_GET_BSS_INFO Failed %s\n", "loadBss", 2473, v21);
      }
      if (v11 == -536870185) {
        unsigned int v12 = -536870185;
      }
      else {
        unsigned int v12 = 0;
      }
      if (v11 == -536870165) {
        return 3758097131;
      }
      else {
        return v12;
      }
    }
    else if (AppleBCMWLANCore::isAssociated(*(AppleBCMWLANCore **)v10))
    {
      uint64_t v13 = *((void *)this + 5);
      if (*(_DWORD *)(v13 + 6552) | *(unsigned __int16 *)(v13 + 6556))
      {
        *a2 = 0;
        uint64_t v14 = *((void *)this + 5);
        int v15 = *(_DWORD *)(v14 + 6552);
        *(_WORD *)&a3->octet[4] = *(_WORD *)(v14 + 6556);
        *(_DWORD *)a3->octet = v15;
        *(unsigned char *)(*((void *)this + 5) + 6538) = 0;
      }
      else
      {
        ++*(unsigned char *)(v13 + 6538);
        IO80211BssManager::getCurrentBSSID(*(IO80211BssManager **)(*((void *)this + 5) + 16), a3);
        if (*(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog())
        {
          unsigned int v22 = *(CCLogStream **)(*((void *)this + 5) + 24);
          if (IO80211_io80211isDebuggable()) {
            int v23 = *(unsigned __int8 *)(*((void *)this + 5) + 6552);
          }
          else {
            int v23 = 0;
          }
          if (IO80211_io80211isDebuggable()) {
            int v24 = *(unsigned __int8 *)(*((void *)this + 5) + 6553);
          }
          else {
            int v24 = 0;
          }
          if (IO80211_io80211isDebuggable()) {
            int v25 = *(unsigned __int8 *)(*((void *)this + 5) + 6554);
          }
          else {
            int v25 = 0;
          }
          if (IO80211_io80211isDebuggable()) {
            int v26 = *(unsigned __int8 *)(*((void *)this + 5) + 6555);
          }
          else {
            int v26 = 0;
          }
          if (IO80211_io80211isDebuggable()) {
            int v27 = *(unsigned __int8 *)(*((void *)this + 5) + 6556);
          }
          else {
            int v27 = 0;
          }
          if (IO80211_io80211isDebuggable()) {
            int v28 = *(unsigned __int8 *)(*((void *)this + 5) + 6557);
          }
          else {
            int v28 = 0;
          }
          CCLogStream::logNoticeIf(v22, 0x200uLL, "[dk] %s@%d: Invalid MAC %02x:%02x:%02x:%02x:%02x:%02x (%u / %u)\n", "loadBss", 2500, v23, v24, v25, v26, v27, v28, *(unsigned __int8 *)(*((void *)this + 5) + 6538), *(unsigned __int8 *)(*((void *)this + 5) + 8476));
        }
      }
      uint64_t v16 = *((void *)this + 5);
      if (*(unsigned __int8 *)(v16 + 6538) >= *(unsigned __int8 *)(v16 + 8476))
      {
        if (*(void *)(v16 + 24) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d: Invalid MAC reported %u times\n", "loadBss", 2511, *(unsigned __int8 *)(*((void *)this + 5) + 6538));
        }
        if (AppleBCMWLAN_isVerboseDebugLoggingAllowed()
          && AppleBCMWLANCore::getFaultReporter(**((AppleBCMWLANCore ***)this + 5)))
        {
          FaultReporter = (CCFaultReporter *)AppleBCMWLANCore::getFaultReporter(**((AppleBCMWLANCore ***)this + 5));
          CCFaultReporter::reportFault(FaultReporter, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANLQM.cpp", 0x9D3u, "loadBss", 0, -469792766, 0);
        }
        uint64_t v6 = 0;
        *(unsigned char *)(*((void *)this + 5) + 6538) = 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return v6;
}

uint64_t AppleBCMWLANLQM::checkForChannelSwitch(uint64_t a1, uint64_t a2)
{
  ChanSpecHandler = (int **)AppleBCMWLANCore::getChanSpecHandler(**(AppleBCMWLANCore ***)(a1 + 40));
  AppleBCMWLANChanSpec::getAppleChannelSpec(ChanSpecHandler, *(unsigned __int16 *)(a2 + 76));
  uint64_t v5 = AppleBCMWLANCore::getChanSpecHandler(**(AppleBCMWLANCore ***)(a1 + 40));
  uint64_t v6 = *(void *)AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(*(void *)(a1 + 40) + 16));
  unsigned __int16 v7 = (*(uint64_t (**)(void))(v6 + 264))();
  uint64_t result = AppleBCMWLANChanSpec::getBCMChannelSpec(v5, v7);
  if (*(unsigned __int16 *)(a2 + 76) != result)
  {
    int v9 = result;
    uint64_t v10 = *(void *)(a1 + 40);
    if (*(void *)(v10 + 24))
    {
      int shouldLog = CCLogStream::shouldLog();
      uint64_t v10 = *(void *)(a1 + 40);
      if (shouldLog)
      {
        int v18 = *(CCLogStream **)(v10 + 24);
        CurrentBSS = (const void *)AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(v10 + 16));
        uint64_t v20 = *(void *)AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(*(void *)(a1 + 40) + 16));
        int v21 = (*(uint64_t (**)(void))(v20 + 256))();
        CCLogStream::logAlertIf(v18, 0x200uLL, "[dk] %s@%d:updating channel %p spec %x %u -> %x ctl %u\n", "checkForChannelSwitch", 2538, CurrentBSS, v9, v21, *(unsigned __int16 *)(a2 + 76), *(unsigned __int8 *)(a2 + 92));
        uint64_t v10 = *(void *)(a1 + 40);
      }
    }
    AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(v10 + 16));
    if (!*(unsigned char *)(a2 + 85)) {
      ChanSpecGetPrimaryChannel();
    }
    IO80211BSSBeacon::updateChannelInfo();
    uint64_t v12 = AppleBCMWLANCore::getChanSpecHandler(**(AppleBCMWLANCore ***)(a1 + 40));
    uint64_t v13 = *(void *)AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(*(void *)(a1 + 40) + 16));
    unsigned __int16 v14 = (*(uint64_t (**)(void))(v13 + 264))();
    int BCMChannelSpec = AppleBCMWLANChanSpec::getBCMChannelSpec(v12, v14);
    if (*(void *)(*(void *)(a1 + 40) + 24))
    {
      int v16 = CCLogStream::shouldLog();
      uint64_t v17 = *(void *)(a1 + 40);
      if (v16)
      {
        unsigned int v22 = *(CCLogStream **)(v17 + 24);
        uint64_t v23 = AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(v17 + 16));
        int v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 256))(v23);
        CCLogStream::logAlertIf(v22, 0x200uLL, "[dk] %s@%d:updated channel spec %x ch %u\n", "checkForChannelSwitch", 2541, BCMChannelSpec, v24);
      }
    }
    unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
    int v26 = -1431655766;
    if (!IO80211BssManager::getCurrentChannel()) {
      AppleBCMWLANCore::postMessageInfra(**(AppleBCMWLANCore ***)(a1 + 40), 0x52u, &v25, 0xCuLL);
    }
    return AppleBCMWLANCore::reportWiFiChanTransitionToSac(**(void ***)(a1 + 40), v25, v26, 1u);
  }
  return result;
}

uint64_t AppleBCMWLANLQM::updateBSSInfo(AppleBCMWLANLQM *this)
{
  long long v24 = 0u;
  memset(v25, 0, sizeof(v25));
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  uint64_t v2 = *((void *)this + 5);
  DWORD1(v6) = *(__int16 *)(v2 + 6622);
  LOBYTE(v6) = 1;
  if (*(unsigned __int16 *)(v2 + 6660) >= 0x7Eu)
  {
    WORD6(v6) = *(_WORD *)(v2 + 6668);
    BYTE11(v6) = 1;
    LOWORD(v7) = *(char *)(v2 + 6624);
    BYTE14(v6) = 1;
  }
  if (AppleBCMWLANLQM::updatePerCoreRssi((uint64_t)this, (uint64_t)&v6)
    && *(void *)(*((void *)this + 5) + 24)
    && CCLogStream::shouldLog())
  {
    CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:Failed to get per core RSSI \n", "updateBSSInfo", 2575);
  }
  BYTE12(v17) = 1;
  if (AppleBCMWLANLQM::updatePerCoreNoise((uint64_t)this, &v6)
    && *(void *)(*((void *)this + 5) + 24)
    && CCLogStream::shouldLog())
  {
    CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:Failed to get noise Delta \n", "updateBSSInfo", 2581);
  }
  AppleBCMWLANLQM::updateLQM((uint64_t)this, (char *)&v6, 0);
  unsigned int v3 = (AppleBCMWLANCore *)**((void **)this + 5);
  if (v3)
  {
    if (AppleBCMWLANCore::getConfigManager(v3))
    {
      ConfigManager = (AppleBCMWLANConfigManager *)AppleBCMWLANCore::getConfigManager(**((AppleBCMWLANCore ***)this + 5));
      if (AppleBCMWLANConfigManager::isTxFailEventSupported(ConfigManager))
      {
        if (AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(*((void *)this + 5) + 16))
          && (_BYTE)v6
          && (DWORD1(v6) + 70) >= 6)
        {
          AppleBCMWLANCore::configureTxFailEventThreshold(**((AppleBCMWLANCore ***)this + 5), SDWORD1(v6) > -71);
        }
      }
    }
  }
  return 0;
}

uint64_t AppleBCMWLANLQM::updateCounters(AppleBCMWLANCore ***this, ether_addr *a2)
{
  if (!AppleBCMWLANCore::isAssociated(*this[5])) {
    return 3766625283;
  }
  if (!AppleBCMWLANCore::isStaInfoIoVarSupported(*this[5])
    || (IO80211BssManager::isAssociatedToAdhoc(this[5][2]) & 1) != 0)
  {
    uint64_t v4 = 0;
LABEL_5:
    AppleBCMWLANLQM::updateLinkQualityMetrics((AppleBCMWLANLQM *)this, 1);
    return v4;
  }
  uint64_t StaInfo = AppleBCMWLANLQM::getStaInfo((uint64_t)this, (uint64_t)a2, (uint64_t)(this[5] + 534));
  uint64_t v4 = StaInfo;
  if (!StaInfo || StaInfo == -469794537)
  {
    if (AppleBCMWLANCore::featureFlagIsBitSet(*this[5], 115)
      && AppleBCMWLANCore::get11beAdapter(*this[5]))
    {
      AppleBCMWLANLQM::getMloPerfStats((AppleBCMWLANLQM *)this, a2);
    }
    goto LABEL_5;
  }
  return v4;
}

uint64_t AppleBCMWLANLQM::getStaInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (AppleBCMWLANCore::getFirmwareInterfaceVersion(**(AppleBCMWLANCore ***)(a1 + 40)) >= 7)
  {
    if (AppleBCMWLANCore::getFirmwareInterfaceVersion(**(AppleBCMWLANCore ***)(a1 + 40)) >= 0xF) {
      unsigned int v6 = 296;
    }
    else {
      unsigned int v6 = 280;
    }
  }
  else
  {
    unsigned int v6 = 264;
  }
  uint64_t v7 = v6;
  uint64_t v8 = IOMallocZeroData();
  if (!v8) {
    return 12;
  }
  uint64_t v9 = v8;
  v36[0] = v8;
  v36[1] = v7 | ((unint64_t)(v7 | (v7 << 16)) << 16);
  long long v10 = *(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 8);
  v35[0] = a2;
  v35[1] = 6;
  uint64_t v11 = AppleBCMWLANCommander::runIOVarGet(v10, (uint64_t)"sta_info", (uint64_t)v35, (uint64_t)v36, 0);
  if (v11)
  {
    if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog())
    {
      long long v12 = *(void **)(a1 + 40);
      long long v13 = (CCLogStream *)v12[3];
      long long v14 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v12 + 112))(*v12, v11);
      CCLogStream::logCrit(v13, "[dk] %s@%d: Failed to get peer Stats, error %s\n", "getStaInfo", 2822, v14);
    }
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)v9;
    long long v15 = *(_OWORD *)(v9 + 16);
    long long v16 = *(_OWORD *)(v9 + 32);
    long long v17 = *(_OWORD *)(v9 + 64);
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(v9 + 48);
    *(_OWORD *)(a3 + 64) = v17;
    *(_OWORD *)(a3 + 16) = v15;
    *(_OWORD *)(a3 + 32) = v16;
    long long v18 = *(_OWORD *)(v9 + 80);
    long long v19 = *(_OWORD *)(v9 + 96);
    long long v20 = *(_OWORD *)(v9 + 128);
    *(_OWORD *)(a3 + 112) = *(_OWORD *)(v9 + 112);
    *(_OWORD *)(a3 + 128) = v20;
    *(_OWORD *)(a3 + 80) = v18;
    *(_OWORD *)(a3 + 96) = v19;
    long long v21 = *(_OWORD *)(v9 + 144);
    long long v22 = *(_OWORD *)(v9 + 160);
    long long v23 = *(_OWORD *)(v9 + 192);
    *(_OWORD *)(a3 + 176) = *(_OWORD *)(v9 + 176);
    *(_OWORD *)(a3 + 192) = v23;
    *(_OWORD *)(a3 + 144) = v21;
    *(_OWORD *)(a3 + 160) = v22;
    if (AppleBCMWLANCore::getFirmwareInterfaceVersion(**(AppleBCMWLANCore ***)(a1 + 40)) > 6)
    {
      unsigned int FirmwareInterfaceVersion = AppleBCMWLANCore::getFirmwareInterfaceVersion(**(AppleBCMWLANCore ***)(a1 + 40));
      unint64_t v25 = (_OWORD *)(a3 + 208);
      int v26 = (_OWORD *)(v9 + 208);
      if (FirmwareInterfaceVersion > 0xE)
      {
        long long v30 = *(_OWORD *)(v9 + 224);
        *unint64_t v25 = *v26;
        *(_OWORD *)(a3 + 224) = v30;
        long long v31 = *(_OWORD *)(v9 + 240);
        long long v32 = *(_OWORD *)(v9 + 256);
        long long v33 = *(_OWORD *)(v9 + 272);
        *(void *)(a3 + 288) = *(void *)(v9 + 288);
        *(_OWORD *)(a3 + 256) = v32;
        *(_OWORD *)(a3 + 272) = v33;
        *(_OWORD *)(a3 + 240) = v31;
      }
      else
      {
        *unint64_t v25 = *v26;
        long long v27 = *(_OWORD *)(v9 + 224);
        long long v28 = *(_OWORD *)(v9 + 240);
        long long v29 = *(_OWORD *)(v9 + 256);
        *(void *)(a3 + 272) = *(void *)(v9 + 272);
        *(_OWORD *)(a3 + 240) = v28;
        *(_OWORD *)(a3 + 256) = v29;
        *(_OWORD *)(a3 + 224) = v27;
      }
    }
    else
    {
      *(_DWORD *)(a3 + 208) = 3407873;
      *(_DWORD *)(a3 + 212) = *(_DWORD *)v9;
      *(_OWORD *)(a3 + 216) = *(_OWORD *)(v9 + 4);
      *(_OWORD *)(a3 + 232) = *(_OWORD *)(v9 + 20);
      *(_OWORD *)(a3 + 248) = *(_OWORD *)(v9 + 36);
    }
  }
  IOFreeData();
  return v11;
}

AppleBCMWLANLQM *AppleBCMWLANLQM::getMloPerfStats(AppleBCMWLANLQM *this, ether_addr *a2)
{
  unsigned int v3 = this;
  uint64_t v4 = *((void *)this + 5);
  if (*(unsigned char *)(v4 + 8536))
  {
    uint64_t v5 = (AppleBCMWLANCore ***)AppleBCMWLANCore::get11beAdapter(*(AppleBCMWLANCore **)v4);
    this = (AppleBCMWLANLQM *)AppleBCMWLAN11beAdapter::getMloStatus(v5);
    *(unsigned char *)(*((void *)v3 + 5) + 8536) = 0;
    uint64_t v4 = *((void *)v3 + 5);
  }
  if (*(unsigned char *)(v4 + 8780))
  {
    int v6 = 0;
    do
      this = (AppleBCMWLANLQM *)AppleBCMWLANLQM::getMloPerLinkStats(v3, v6++, a2);
    while (*(unsigned __int8 *)(*((void *)v3 + 5) + 8780) > v6);
  }
  return this;
}

uint64_t AppleBCMWLANLQM::updateMloLinkChangeInfo(uint64_t a1, unsigned __int16 *a2)
{
  *(unsigned char *)(*(void *)(a1 + 40) + 8536) = 1;
  int v4 = *((unsigned __int8 *)a2 + 4);
  switch(v4)
  {
    case 4:
      uint64_t v5 = *(void *)(a1 + 40);
      uint64_t v6 = 8792;
      goto LABEL_7;
    case 6:
      uint64_t v5 = *(void *)(a1 + 40);
      uint64_t v6 = 8784;
      goto LABEL_7;
    case 5:
      uint64_t v5 = *(void *)(a1 + 40);
      uint64_t v6 = 8788;
LABEL_7:
      ++*(_DWORD *)(v5 + v6);
      break;
  }
  uint64_t result = *(void *)(*(void *)(a1 + 40) + 24);
  if (result)
  {
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      int v32 = *a2;
      unsigned int v34 = *(CCLogStream **)(*(void *)(a1 + 40) + 24);
      int v30 = a2[1];
      int v28 = *((unsigned __int8 *)a2 + 4);
      int v14 = *((unsigned __int8 *)a2 + 5);
      int v15 = *((unsigned __int8 *)a2 + 12);
      int v16 = *((unsigned __int8 *)a2 + 13);
      if (IO80211_io80211isDebuggable()) {
        int v17 = *((unsigned __int8 *)a2 + 6);
      }
      else {
        int v17 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v18 = *((unsigned __int8 *)a2 + 7);
      }
      else {
        int v18 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v19 = *((unsigned __int8 *)a2 + 8);
      }
      else {
        int v19 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v20 = *((unsigned __int8 *)a2 + 9);
      }
      else {
        int v20 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v21 = *((unsigned __int8 *)a2 + 10);
      }
      else {
        int v21 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v22 = *((unsigned __int8 *)a2 + 11);
      }
      else {
        int v22 = 0;
      }
      uint64_t result = CCLogStream::logAlert(v34, "[dk] %s@%d:v=<%d> len=<%d> opcode<%d> role=<%d> num_links=<%d>  pref_band_link_idx=<%d> mld_addr =%02x:%02x:%02x:%02x:%02x:%02x\n", "updateMloLinkChangeInfo", 2664, v32, v30, v28, v14, v15, v16, v17, v18, v19, v20, v21, v22);
    }
  }
  if (*((unsigned char *)a2 + 12))
  {
    unint64_t v8 = 0;
    uint64_t v9 = a2 + 13;
    do
    {
      uint64_t result = *(void *)(*(void *)(a1 + 40) + 24);
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          int v31 = *((unsigned __int8 *)v9 - 10);
          long long v33 = *(CCLogStream **)(*(void *)(a1 + 40) + 24);
          int v29 = *((unsigned __int8 *)v9 - 9);
          int v27 = *((unsigned __int8 *)v9 - 8);
          int v26 = *((unsigned __int8 *)v9 - 7);
          int v25 = *v9;
          if (IO80211_io80211isDebuggable()) {
            int v24 = *((unsigned __int8 *)v9 - 6);
          }
          else {
            int v24 = 0;
          }
          if (IO80211_io80211isDebuggable()) {
            int v23 = *((unsigned __int8 *)v9 - 5);
          }
          else {
            int v23 = 0;
          }
          if (IO80211_io80211isDebuggable()) {
            int v10 = *((unsigned __int8 *)v9 - 4);
          }
          else {
            int v10 = 0;
          }
          if (IO80211_io80211isDebuggable()) {
            int v11 = *((unsigned __int8 *)v9 - 3);
          }
          else {
            int v11 = 0;
          }
          if (IO80211_io80211isDebuggable()) {
            int v12 = *((unsigned __int8 *)v9 - 2);
          }
          else {
            int v12 = 0;
          }
          if (IO80211_io80211isDebuggable()) {
            int v13 = *((unsigned __int8 *)v9 - 1);
          }
          else {
            int v13 = 0;
          }
          uint64_t result = CCLogStream::logAlert(v33, "[dk] %s@%d:i =<%d> if_idx=<%d> cfg_idx=<%d> link_id<%d> link_idx=<%d> chanspec=<%x> link_addr =%02x:%02x:%02x:%02x:%02x:%02x\n", "updateMloLinkChangeInfo", 2674, v8, v31, v29, v27, v26, v25, v24, v23, v10, v11, v12, v13);
        }
      }
      ++v8;
      v9 += 6;
    }
    while (v8 < *((unsigned __int8 *)a2 + 12));
  }
  return result;
}

uint64_t AppleBCMWLANLQM::updateNumOfMloLinks(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)(this + 40) + 8780) = a2;
  return this;
}

uint64_t AppleBCMWLANLQM::updateMloTrafficSwitchState(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)(this + 40) + 8781) = a2;
  return this;
}

uint64_t AppleBCMWLANLQM::storeMloLinkInfo(uint64_t this, unsigned int a2, uint64_t a3, const ether_addr *a4)
{
  if (a2 <= 2)
  {
    uint64_t v7 = this;
    ChanSpecHandler = (int **)AppleBCMWLANCore::getChanSpecHandler(**(AppleBCMWLANCore ***)(this + 40));
    this = AppleBCMWLANChanSpec::getAppleChannelSpec(ChanSpecHandler, a3);
    *(_WORD *)(*(void *)(v7 + 40) + 40 * a2 + 8541) = this;
    *(_WORD *)(*(void *)(v7 + 40) + 40 * a2 + 8661) = this;
    uint64_t v9 = *(void *)(v7 + 40) + 40 * a2 + 8540;
    __int16 v10 = *(_WORD *)&a4->octet[4];
    *(_DWORD *)(v9 + 3) = *(_DWORD *)a4->octet;
    *(_WORD *)(v9 + 7) = v10;
    uint64_t v11 = *(void *)(v7 + 40) + 40 * a2 + 8660;
    __int16 v12 = *(_WORD *)&a4->octet[4];
    *(_DWORD *)(v11 + 3) = *(_DWORD *)a4->octet;
    *(_WORD *)(v11 + 7) = v12;
  }
  return this;
}

uint64_t AppleBCMWLANLQM::getMloPerLinkStats(AppleBCMWLANLQM *this, unsigned int a2, ether_addr *a3)
{
  __int16 v55 = -21846;
  char v56 = -86;
  char v54 = -86;
  int v53 = -1431655766;
  uint64_t v6 = IOMallocZeroData();
  if (!v6) {
    AppleBCMWLANLQM::getMloPerLinkStats();
  }
  uint64_t v7 = v6;
  *(void *)(v6 + 288) = 0;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_OWORD *)(v6 + 224) = 0u;
  *(_OWORD *)(v6 + 240) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 208) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)uint64_t v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  uint64_t v8 = a2;
  BOOL v10 = *(_DWORD *)(*((void *)this + 5) + 40 * a2 + 8543) == *(_DWORD *)a3->octet
     && *(unsigned __int16 *)(*((void *)this + 5) + 40 * a2 + 8547) == *(unsigned __int16 *)&a3->octet[4];
  *(unsigned char *)(*((void *)this + 5) + 40 * a2 + 8540) = v10;
  *(unsigned char *)(*((void *)this + 5) + 40 * a2 + 8660) = *(unsigned char *)(*((void *)this + 5) + 40 * a2 + 8540);
  uint64_t v11 = *((void *)this + 5);
  if (*(unsigned char *)(v11 + 40 * a2 + 8660))
  {
    uint64_t v12 = v11 + 4272;
    goto LABEL_10;
  }
  uint64_t StaInfo = AppleBCMWLANLQM::getStaInfo((uint64_t)this, v11 + 40 * a2 + 8543, v6);
  uint64_t v11 = *((void *)this + 5);
  if (!StaInfo)
  {
    uint64_t v12 = v7;
LABEL_10:
    unsigned int v13 = *(_DWORD *)(v12 + 12);
    uint64_t v14 = v11 + 40 * v8;
    unsigned int v15 = *(_DWORD *)(v14 + 8552);
    BOOL v16 = v13 >= v15;
    unsigned int v17 = v13 - v15;
    int v18 = !v16;
    *(_DWORD *)(v14 + 8672) = v17;
    unsigned int v19 = *(_DWORD *)(v12 + 172);
    uint64_t v20 = *((void *)this + 5) + 40 * v8;
    unsigned int v21 = *(_DWORD *)(v20 + 8556);
    *(_DWORD *)(v20 + 8676) = v19 - v21;
    if (v19 < v21) {
      int v22 = 1;
    }
    else {
      int v22 = v18;
    }
    unsigned int v23 = *(_DWORD *)(v12 + 60);
    uint64_t v24 = *((void *)this + 5) + 40 * v8;
    unsigned int v25 = *(_DWORD *)(v24 + 8564);
    *(_DWORD *)(v24 + 8684) = v23 - v25;
    if (v23 < v25) {
      int v22 = 1;
    }
    unsigned int v26 = *(_DWORD *)(v12 + 56);
    uint64_t v27 = *((void *)this + 5) + 40 * v8;
    unsigned int v28 = *(_DWORD *)(v27 + 8560);
    *(_DWORD *)(v27 + 8680) = v26 - v28;
    if (v26 < v28) {
      int v22 = 1;
    }
    unsigned int v29 = *(_DWORD *)(v12 + 164);
    uint64_t v30 = *((void *)this + 5) + 40 * v8;
    unsigned int v31 = *(_DWORD *)(v30 + 8568);
    *(_DWORD *)(v30 + 8688) = v29 - v31;
    if (v29 < v31) {
      int v32 = 1;
    }
    else {
      int v32 = v22;
    }
    unsigned int v33 = *(unsigned __int16 *)(*((void *)this + 5) + 40 * v8 + 8661);
    unsigned int v34 = v33 >> 14;
    if (v33 >> 14)
    {
      if (v34 == 1)
      {
        __int16 v35 = 18230;
      }
      else
      {
        if (v34 != 3)
        {
LABEL_35:
          char v56 = 0;
          switch((v33 >> 11) & 7)
          {
            case 2u:
              int v41 = 541929522;
              goto LABEL_40;
            case 3u:
              int v41 = 541929524;
              goto LABEL_40;
            case 4u:
              int v41 = 541929528;
              goto LABEL_40;
            case 5u:
              int v41 = 1295005233;
LABEL_40:
              int v53 = v41;
              break;
            default:
              break;
          }
          char v54 = 0;
          int PrimaryChannel = ChanSpecGetPrimaryChannel();
          uint64_t v43 = *((void *)this + 5);
          if (*(void *)(v43 + 24))
          {
            int shouldLog = CCLogStream::shouldLog();
            uint64_t v43 = *((void *)this + 5);
            if (shouldLog)
            {
              size_t v50 = *(CCLogStream **)(v43 + 24);
              uint64_t v51 = v43 + 40 * v8;
              unsigned int v52 = "NO";
              if (v32) {
                unsigned int v52 = "YES";
              }
              CCLogStream::logAlert(v50, "[dk] %s@%d:MLO Stats [%s Preferred:%u] chan: %u / %s rssi: [%d, %d] tx_pkts: %d rx_pkts: %d tx_rate: %d rx_rate: %d tx_fail: %d ex_retry: %d idle: %d ovflo: %s\n", "getMloPerLinkStats", 2783, (const char *)&v55, *(unsigned __int8 *)(v51 + 8660), PrimaryChannel, (const char *)&v53, *(char *)(v12 + 144), *(char *)(v12 + 145), *(_DWORD *)(v51 + 8676), *(_DWORD *)(v51 + 8684), *(_DWORD *)(v12 + 68), *(_DWORD *)(v12 + 72), *(_DWORD *)(v51 + 8680), *(_DWORD *)(v51 + 8688), *(_DWORD *)(v51 + 8672), v52);
              uint64_t v43 = *((void *)this + 5);
            }
          }
          uint64_t v37 = 0;
          char v45 = *(unsigned char *)(v12 + 144);
          *(unsigned char *)(v43 + 40 * v8 + 8549) = v45;
          *(unsigned char *)(*((void *)this + 5) + 40 * v8 + 8669) = v45;
          char v46 = *(unsigned char *)(v12 + 145);
          *(unsigned char *)(*((void *)this + 5) + 40 * v8 + 8550) = v46;
          *(unsigned char *)(*((void *)this + 5) + 40 * v8 + 8670) = v46;
          int v47 = *(_DWORD *)(v12 + 68);
          *(_DWORD *)(*((void *)this + 5) + 40 * v8 + 8572) = v47;
          *(_DWORD *)(*((void *)this + 5) + 40 * v8 + 8692) = v47;
          int v48 = *(_DWORD *)(v12 + 72);
          *(_DWORD *)(*((void *)this + 5) + 40 * v8 + 8576) = v48;
          *(_DWORD *)(*((void *)this + 5) + 40 * v8 + 8696) = v48;
          *(_DWORD *)(*((void *)this + 5) + 40 * v8 + 8552) = *(_DWORD *)(v12 + 12);
          *(_DWORD *)(*((void *)this + 5) + 40 * v8 + 8556) = *(_DWORD *)(v12 + 172);
          *(_DWORD *)(*((void *)this + 5) + 40 * v8 + 8564) = *(_DWORD *)(v12 + 60);
          *(_DWORD *)(*((void *)this + 5) + 40 * v8 + 8560) = *(_DWORD *)(v12 + 56);
          *(_DWORD *)(*((void *)this + 5) + 40 * v8 + 8568) = *(_DWORD *)(v12 + 164);
          goto LABEL_44;
        }
        __int16 v35 = 18229;
      }
    }
    else
    {
      __int16 v35 = 18226;
    }
    __int16 v55 = v35;
    goto LABEL_35;
  }
  uint64_t v37 = StaInfo;
  if (*(void *)(v11 + 24) && CCLogStream::shouldLog())
  {
    unint64_t v38 = (void *)*((void *)this + 5);
    unsigned int v39 = (CCLogStream *)v38[3];
    int v40 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v38 + 112))(*v38, v37);
    CCLogStream::logCrit(v39, "[dk] %s@%d: Failed to get peer Stats, error %s\n", "getMloPerLinkStats", 2737, v40);
  }
LABEL_44:
  IOFreeData();
  return v37;
}

uint64_t AppleBCMWLANLQM::getCurrentTxRate(AppleBCMWLANCore ***this, unsigned int *a2)
{
  if (!AppleBCMWLANCore::isAssociated(*this[5])) {
    return 3766625283;
  }
  uint64_t result = 0;
  *a2 = *((_DWORD *)this[5] + 1085) / 0x3E8u;
  return result;
}

uint64_t AppleBCMWLANLQM::setGoodLQMRssiThreshold(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 40) + 4600) = a2;
  return this;
}

uint64_t AppleBCMWLANLQM::checkInfraStaPeerStatsSupport(AppleBCMWLANLQM *this)
{
  __int16 v3 = 0;
  int v2 = 0;
  return AppleBCMWLANLQM::getStaInfo((uint64_t)this, (uint64_t)&v2, *((void *)this + 5) + 4272);
}

uint64_t AppleBCMWLANLQM::updateOFDMDesense(uint64_t this, int a2)
{
  *(unsigned char *)(*(void *)(this + 40) + 4828) = 1;
  *(_DWORD *)(*(void *)(this + 40) + 4824) = a2;
  return this;
}

IO80211Controller *AppleBCMWLANLQM::handleLQMEvent(IO80211Controller *result, _DWORD *a2)
{
  uint64_t v2 = (uint64_t)result;
  int v3 = a2[5];
  if (v3 == 4)
  {
    unsigned int v11 = a2[12];
    if (v11)
    {
      uint64_t result = (IO80211Controller *)AppleBCMWLANCore::isAssociated(**((AppleBCMWLANCore ***)result + 5));
      if (result)
      {
        long long v31 = 0u;
        memset(v32, 0, sizeof(v32));
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        long long v15 = 0u;
        long long v16 = 0u;
        long long v13 = 0u;
        long long v14 = 0u;
        DWORD1(v13) = bswap32(v11);
        LOBYTE(v13) = 1;
        BYTE8(v13) = 1;
        uint64_t v12 = v2;
        int v10 = 0;
        return AppleBCMWLANLQM::updateLQM(v12, (char *)&v13, v10);
      }
    }
  }
  else if (v3 == 12)
  {
    unsigned int v4 = a2[12];
    unsigned int v5 = a2[13];
    unsigned int v6 = a2[14];
    long long v31 = 0u;
    memset(v32, 0, sizeof(v32));
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    DWORD1(v13) = bswap32(v4);
    if (v4)
    {
      uint64_t result = (IO80211Controller *)AppleBCMWLANCore::isAssociated(**((AppleBCMWLANCore ***)result + 5));
      if (result)
      {
        LOBYTE(v13) = 1;
        WORD6(v13) = bswap32(v5);
        BYTE11(v13) = 1;
        LOWORD(v14) = bswap32(v6);
        BYTE14(v13) = 1;
        BYTE8(v13) = 1;
        uint64_t result = (IO80211Controller *)AppleBCMWLANLQM::updatePerCoreRssiAsync(v2, &v13);
        if (result)
        {
          uint64_t v7 = *(void *)(v2 + 40);
          if (*(void *)(v7 + 24))
          {
            int shouldLog = CCLogStream::shouldLog();
            uint64_t v7 = *(void *)(v2 + 40);
            if (shouldLog)
            {
              CCLogStream::logAlert(*(CCLogStream **)(v7 + 24), "[dk] %s@%d:Failed to get per core RSSI\n", "handleLQMEvent", 2937);
              uint64_t v7 = *(void *)(v2 + 40);
            }
          }
          uint64_t v9 = *(CCLogStream **)(v7 + 24);
          if (v9) {
            int v10 = CCLogStream::shouldLog(v9, 0x8000uLL);
          }
          else {
            int v10 = 0;
          }
          uint64_t v12 = v2;
          return AppleBCMWLANLQM::updateLQM(v12, (char *)&v13, v10);
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANLQM::getLegacyCCAStats(AppleBCMWLANCore ***this)
{
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  int v24 = -1431655766;
  uint64_t result = AppleBCMWLANCore::isAssociated(*this[5]);
  if (result)
  {
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    int v22 = 0;
    uint64_t result = IOMallocZeroData();
    if (result)
    {
      uint64_t v3 = result;
      if (!IO80211BssManager::getCurrentChannel())
      {
        *(_WORD *)uint64_t v3 = WORD2(v23) | 0xD000;
        *(_WORD *)(v3 + 2) = 5;
        *(void *)(v3 + 12) = 0;
        *(void *)(v3 + 4) = 0;
        *(_DWORD *)(v3 + 20) = 0;
        v19[0] = v3;
        v19[1] = 0x1800180018;
        unsigned int v4 = this[5][1];
        v18[0] = v3;
        v18[1] = 24;
        uint64_t v5 = AppleBCMWLANCommander::runIOVarGet(v4, (uint64_t)"cca_get_stats", (uint64_t)v18, (uint64_t)v19, 0);
        if (v5)
        {
          uint64_t v6 = v5;
          if (this[5][3])
          {
            if (CCLogStream::shouldLog())
            {
              uint64_t v7 = this[5];
              uint64_t v8 = v7[3];
              uint64_t v9 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)*v7 + 112))(*v7, v6);
              CCLogStream::logAlert(v8, "[dk] %s@%d: Unable to get Legacy CCA Stats %s\n", "getLegacyCCAStats", 3010, v9);
            }
          }
        }
        else
        {
          int v22 = *(_DWORD *)(v3 + 20);
          uint64_t v10 = *(unsigned __int16 *)(v3 + 2);
          if (*(_WORD *)(v3 + 2))
          {
            unsigned int v11 = 0;
            unsigned int v12 = 0;
            int v13 = 0;
            int v14 = 0;
            int v15 = 0;
            long long v16 = (_DWORD *)(v3 + 16);
            do
            {
              int v17 = *(v16 - 3);
              if (v17)
              {
                v12 += v17;
                v13 += *(v16 - 2);
                v14 += *(v16 - 1);
                v15 += *v16;
                ++v11;
              }
              v16 += 5;
              --v10;
            }
            while (v10);
          }
          else
          {
            int v15 = 0;
            int v14 = 0;
            int v13 = 0;
            unsigned int v12 = 0;
            unsigned int v11 = 0;
          }
          LODWORD(v20) = v12 / v11;
          HIDWORD(v20) = 100 * v13 / v12;
          LODWORD(v21) = 100 * v14 / v12;
          HIDWORD(v21) = 100 * v15 / v12;
          if (AppleBCMWLANBssManager::getCurrentBSS(this[5][2]))
          {
            AppleBCMWLANBssManager::getCurrentBSS(this[5][2]);
            IO80211BSSBeacon::updateLegacyCCAStats();
          }
          if (this[5][3] && CCLogStream::shouldLog()) {
            CCLogStream::logNoticeIf(this[5][3], 0x200uLL, "[dk] %s@%d:Legacy CCA Stats: duration:%d congest_ibss:%d congest_obss:%d interference:%d timestamp:%d \n", "getLegacyCCAStats", 3040, v20, HIDWORD(v20), v21, HIDWORD(v21), *(_DWORD *)(v3 + 20));
          }
        }
      }
      return IOFreeData();
    }
  }
  return result;
}

uint64_t AppleBCMWLANLQM::updateCCA(uint64_t a1, _DWORD *a2)
{
  if (!AppleBCMWLANCore::isAssociated(**(AppleBCMWLANCore ***)(a1 + 40))) {
    return 3766625283;
  }
  unsigned int v4 = (100 * a2[1]) / *a2;
  CurrentBSS = (IO80211BSSBeacon *)AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(*(void *)(a1 + 40) + 16));
  IO80211BSSBeacon::updateCCA(CurrentBSS, v4);
  IO80211BssManager::getCurrentChannel();
  uint64_t v6 = *(void *)(a1 + 40);
  *(_OWORD *)(v6 + 8488) = 0u;
  *(void *)(v6 + 8504) = 0;
  *(_DWORD *)(v6 + 8512) = 0;
  *(unsigned char *)(*(void *)(a1 + 40) + 8494) = v4;
  *(_WORD *)(*(void *)(a1 + 40) + 8492) = -21846;
  *(_DWORD *)(*(void *)(a1 + 40) + 8488) = a2[2];
  unint64_t Split_us = AppleBCMWLANStopwatch::getSplit_us(*(AppleBCMWLANStopwatch **)(*(void *)(a1 + 40) + 8480));
  if (Split_us < 0x4C4B40)
  {
    (*(void (**)(void, unint64_t))(**(void **)(*(void *)(a1 + 40) + 8520) + 120))(*(void *)(*(void *)(a1 + 40) + 8520), (5000000 - Split_us) / 0x3E8uLL);
  }
  else
  {
    (*(void (**)(void))(**(void **)(*(void *)(a1 + 40) + 8520) + 136))(*(void *)(*(void *)(a1 + 40) + 8520));
    AppleBCMWLANStopwatch::restart(*(AppleBCMWLANStopwatch **)(*(void *)(a1 + 40) + 8480));
    AppleBCMWLANCore::postChanQualEvent(**(IO80211Controller ***)(a1 + 40), (void *)(*(void *)(a1 + 40) + 8488));
  }
  return 0;
}

uint64_t AppleBCMWLANLQM::updateCCAStats(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  if (!AppleBCMWLANCore::isAssociated(**(AppleBCMWLANCore ***)(a1 + 40))) {
    return 3766625283;
  }
  if (a3 && a2 && a4)
  {
    if (*a2)
    {
      unsigned int v8 = 100 * (a2[2] + a2[1] + a2[3]) / *a2;
      CurrentBSS = (IO80211BSSBeacon *)AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(*(void *)(a1 + 40) + 16));
      IO80211BSSBeacon::updateCCA(CurrentBSS, v8);
      IO80211BssManager::getCurrentChannel();
      uint64_t v10 = *(void *)(a1 + 40);
      *(_OWORD *)(v10 + 8488) = 0u;
      *(void *)(v10 + 8504) = 0;
      *(_DWORD *)(v10 + 8512) = 0;
      *(unsigned char *)(*(void *)(a1 + 40) + 8494) = v8;
      *(_WORD *)(*(void *)(a1 + 40) + 8492) = -21846;
      unsigned int v11 = a2[4];
      *(_DWORD *)(*(void *)(a1 + 40) + 8488) = v11;
      uint64_t v12 = *(void *)(a1 + 40);
      if (*(void *)(v12 + 24))
      {
        int shouldLog = CCLogStream::shouldLog();
        uint64_t v12 = *(void *)(a1 + 40);
        unsigned int v11 = a2[4];
        if (shouldLog)
        {
          CCLogStream::logNoticeIf(*(CCLogStream **)(v12 + 24), 0x200uLL, "[dk] %s@%d:RawStats: Total[self:%d other:%d intf:%d dur:%d ts:%d] Wake[self:%d other:%d intf:%d dur:%d ts:%d] Sleep[self:%d other:%d intf:%d dur:%d ts:%d]\n", "updateCCAStats", 3111, a2[1], a2[2], a2[3], *a2, v11, a4[1], a4[2], a4[3], *a4, a4[4], a3[1], a3[2], a3[3],
            *a3,
            a3[4]);
          uint64_t v12 = *(void *)(a1 + 40);
          unsigned int v11 = a2[4];
        }
      }
      *(unsigned char *)(v12 + 8496) = 0;
      *(_WORD *)(*(void *)(a1 + 40) + 8498) = v11;
      unsigned int v14 = *a2;
      unsigned int v15 = a2[1];
      if (v15 <= *a2 && a2[2] <= v14 && v14 >= 0x64)
      {
        unsigned int v16 = a2[3];
        if (v16 <= v14)
        {
          *(unsigned char *)(*(void *)(a1 + 40) + 8500) = 100 * v15 / v14;
          *(unsigned char *)(*(void *)(a1 + 40) + 8501) = 100 * a2[2] / v14;
          *(unsigned char *)(*(void *)(a1 + 40) + 8502) = 100 * v16 / v14;
          *(unsigned char *)(*(void *)(a1 + 40) + 8496) = 1;
        }
      }
      *(_WORD *)(*(void *)(a1 + 40) + 8504) = a3[4];
      unsigned int v17 = *a3;
      unsigned int v18 = a3[1];
      if (v18 <= *a3 && a3[2] <= v17 && v17 >= 0x64)
      {
        unsigned int v19 = a3[3];
        if (v19 <= v17)
        {
          *(unsigned char *)(*(void *)(a1 + 40) + 8506) = 100 * v18 / v17;
          *(unsigned char *)(*(void *)(a1 + 40) + 8507) = 100 * a3[2] / v17;
          *(unsigned char *)(*(void *)(a1 + 40) + 8508) = 100 * v19 / v17;
          *(unsigned char *)(*(void *)(a1 + 40) + 8496) = 1;
        }
      }
      *(_WORD *)(*(void *)(a1 + 40) + 8510) = a4[4];
      unsigned int v20 = *a4;
      unsigned int v21 = a4[1];
      if (v21 <= *a4 && a4[2] <= v20 && v20 >= 0x64)
      {
        unsigned int v22 = a4[3];
        if (v22 <= v20)
        {
          *(unsigned char *)(*(void *)(a1 + 40) + 8512) = 100 * v21 / v20;
          *(unsigned char *)(*(void *)(a1 + 40) + 8513) = 100 * a4[2] / v20;
          *(unsigned char *)(*(void *)(a1 + 40) + 8514) = 100 * v22 / v20;
          *(unsigned char *)(*(void *)(a1 + 40) + 8496) = 1;
        }
      }
      uint64_t v23 = *(void *)(a1 + 40);
      if (*(void *)(v23 + 24))
      {
        int v24 = CCLogStream::shouldLog();
        uint64_t v25 = *(void *)(a1 + 40);
        if (v24)
        {
          CCLogStream::logNoticeIf(*(CCLogStream **)(v25 + 24), 0x200uLL, "[dk] %s@%d:CCA:%d CCAStats(pc) Total[self:%d other:%d intf:%d ts:%d] Wake[self:%d other:%d intf:%d ts:%d] Sleep[self:%d other:%d intf:%d ts:%d]\n", "updateCCAStats", 3149, (char)v8, *(char *)(v23 + 8500), *(char *)(v23 + 8501), *(char *)(v23 + 8502), *(unsigned __int16 *)(v23 + 8498), *(char *)(v23 + 8512), *(char *)(v23 + 8513), *(char *)(v23 + 8514), *(unsigned __int16 *)(v23 + 8510), *(char *)(v23 + 8506), *(char *)(v23 + 8507), *(char *)(v23 + 8508), *(unsigned __int16 *)(v23 + 8504));
          uint64_t v25 = *(void *)(a1 + 40);
        }
      }
      else
      {
        uint64_t v25 = *(void *)(a1 + 40);
      }
      AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(v25 + 16));
      IO80211BSSBeacon::updateCCAStats();
      IO80211Controller::setChanExtendedCCA();
      unint64_t Split_us = AppleBCMWLANStopwatch::getSplit_us(*(AppleBCMWLANStopwatch **)(*(void *)(a1 + 40) + 8480));
      if (Split_us < 0x4C4B40)
      {
        (*(void (**)(void, unint64_t))(**(void **)(*(void *)(a1 + 40) + 8520) + 120))(*(void *)(*(void *)(a1 + 40) + 8520), (5000000 - Split_us) / 0x3E8uLL);
      }
      else
      {
        (*(void (**)(void))(**(void **)(*(void *)(a1 + 40) + 8520) + 136))(*(void *)(*(void *)(a1 + 40) + 8520));
        AppleBCMWLANStopwatch::restart(*(AppleBCMWLANStopwatch **)(*(void *)(a1 + 40) + 8480));
        AppleBCMWLANCore::postChanQualEvent(**(IO80211Controller ***)(a1 + 40), (void *)(*(void *)(a1 + 40) + 8488));
      }
      return 0;
    }
    else
    {
      uint64_t v26 = 3758097084;
      if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:Zero duration for ccaTotal\n");
      }
    }
  }
  else
  {
    uint64_t v26 = 3758097084;
    if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:Null args ccaTotal(%p) ccaNoPM(%p) ccaPM(%p)\n");
    }
  }
  return v26;
}

uint64_t AppleBCMWLANLQM::getStatsTimerIntervalMS(AppleBCMWLANLQM *this)
{
  return *(unsigned int *)(*((void *)this + 5) + 4596);
}

uint64_t AppleBCMWLANLQM::setCountersProvidedViaEcounters(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)(this + 40) + 6536) = a2;
  return this;
}

uint64_t AppleBCMWLANLQM::setPendingBssidUpdatePostRoam(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)(this + 40) + 6537) = a2;
  return this;
}

uint64_t AppleBCMWLANLQM::isBssidUpdatePendingPostRoam(AppleBCMWLANLQM *this)
{
  return *(unsigned __int8 *)(*((void *)this + 5) + 6537);
}

uint64_t AppleBCMWLANLQM::retriggerAssocTimer(AppleBCMWLANLQM *this)
{
  uint64_t result = *(void *)(*((void *)this + 5) + 8528);
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 136))(result);
    uint64_t v3 = *(uint64_t (**)(void))(**(void **)(*((void *)this + 5) + 8528) + 120);
    return v3();
  }
  return result;
}

uint64_t AppleBCMWLANLQM::stopAssocTimer(AppleBCMWLANLQM *this)
{
  uint64_t v2 = *((void *)this + 5);
  uint64_t result = *(void *)(v2 + 8528);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 136))(result);
    uint64_t v2 = *((void *)this + 5);
  }
  *(unsigned char *)(v2 + 6538) = 0;
  return result;
}

uint64_t AppleBCMWLANLQM::startAssocTimer(AppleBCMWLANLQM *this)
{
  uint64_t v2 = *((void *)this + 5);
  uint64_t result = *(void *)(v2 + 8528);
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 136))(result);
    uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(*((void *)this + 5) + 8528) + 120))(*(void *)(*((void *)this + 5) + 8528), *(unsigned int *)(*((void *)this + 5) + 4596));
    uint64_t v2 = *((void *)this + 5);
  }
  *(unsigned char *)(v2 + 6538) = 0;
  return result;
}

uint64_t AppleBCMWLANLQM::updatePeerStatsAddrForIndex(uint64_t this, unsigned __int8 *a2, unsigned int a3)
{
  if (a2)
  {
    if (a3 <= 3)
    {
      uint64_t v3 = *(void *)(this + 40) + 311 * a3;
      int v4 = *(_DWORD *)a2;
      *(_WORD *)(v3 + 5264) = *((_WORD *)a2 + 2);
      *(_DWORD *)(v3 + 5260) = v4;
    }
  }
  return this;
}

uint64_t AppleBCMWLANLQM::updatePeerTxLatencyAndPer(uint64_t this, unsigned int a2, char a3, int a4)
{
  *(unsigned char *)(*(void *)(this + 40) + 311 * a2 + 5566) = a3;
  *(_DWORD *)(*(void *)(this + 40) + 311 * a2 + 5567) = a4;
  return this;
}

uint64_t AppleBCMWLANLQM::findPeerStatsIndex(AppleBCMWLANLQM *this, const ether_addr *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *((void *)this + 5);
  for (uint64_t i = v3 + 5260;
        *(_DWORD *)a2->octet != *(_DWORD *)i || *(unsigned __int16 *)&a2->octet[4] != *(unsigned __int16 *)(i + 4);
        i += 311)
  {
    if (++v2 == 4)
    {
      uint64_t v2 = 0;
      for (uint64_t j = v3 + 5260; *(_DWORD *)j || *(_WORD *)(j + 4) != 0; j += 311)
      {
        if (++v2 == 4)
        {
          bzero((void *)(v3 + 5260), 0x4DCuLL);
          LOBYTE(v2) = 0;
          return v2;
        }
      }
      return v2;
    }
  }
  return v2;
}

uint64_t AppleBCMWLANLQM::printPeerCommonStats(uint64_t a1, unsigned __int8 *a2, int a3, int a4)
{
  uint64_t result = *(void *)(*(void *)(a1 + 40) + 24);
  if (result)
  {
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v9 = "SoftAP Client";
      if (!a4) {
        uint64_t v9 = "P2P Peer";
      }
      return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:<-------> %s [%02x:%02x:%02x:%02x:%02x:%02x] interface %u, observation_time %u ms <------->\n", "printPeerCommonStats", 3458, v9, *a2, a2[1], a2[2], a2[3], a2[4], a2[5], a3, *((_DWORD *)a2 + 2));
    }
  }
  return result;
}

uint64_t AppleBCMWLANLQM::printPeerChanStats(uint64_t a1, _DWORD *a2, int a3, int a4)
{
  uint64_t result = *(void *)(*(void *)(a1 + 40) + 24);
  if (result)
  {
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v9 = "P2P Peer";
      if (a4) {
        uint64_t v9 = "SoftAP Client";
      }
      return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:%s chan %u, rssi %d dBm, txrate %u, rxrate %u, txdur %u ms, rxdur %u ms, txrts %u rxcts %u, txctrl %u, txucast %u, txphyerr %u\n", "printPeerChanStats", 3469, v9, a3, a2[4], a2[6], a2[7], a2[2], a2[3], a2[8], a2[9], a2[12], a2[11], a2[10]);
    }
  }
  return result;
}

uint64_t AppleBCMWLANLQM::printPeerRxAmpduStats(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t result = *(void *)(*(void *)(a1 + 40) + 24);
  if (result)
  {
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v7 = "P2P Peer";
      if (a3) {
        uint64_t v7 = "SoftAP Client";
      }
      return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:%s RXAMPDU: ampdu %u, mpdu %u, holes %u, dup %u, stuck %u, oow %u, oos %u, bar %u, txback %u, addbareq %u, txaddbaresp %u \n", "printPeerRxAmpduStats", 3478, v7, *a2, a2[1], a2[2], a2[3], a2[4], a2[5], a2[6], a2[12], a2[7], a2[10], a2[11]);
    }
  }
  return result;
}

uint64_t AppleBCMWLANLQM::printPeerTxAmpduStats(uint64_t a1, unsigned int *a2, int a3)
{
  uint64_t result = *(void *)(*(void *)(a1 + 40) + 24);
  if (a3)
  {
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result) {
        return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:SoftAP Client TXAMPDU: ampdu %u, mpdu %u, ucast %u, addbareq %u, rxaddbaresp %u, delba %u, rxdelba %u, bar %u\n", "printPeerTxAmpduStats", 3489);
      }
    }
  }
  else if (result)
  {
    uint64_t result = CCLogStream::shouldLog();
    if (result) {
      return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:P2P Peer TXAMPDU: ampdu %u, mpdu %u, ucast %u, addbareq %u, rxaddbaresp %u, delba %u, rxdelba %u, bar %u, per %u %%, latency(P95) %u ms\n", "printPeerTxAmpduStats", 3494, *a2);
    }
  }
  return result;
}

uint64_t AppleBCMWLANLQM::updatePerPeerCommonStats(AppleBCMWLANLQM *a1, int a2, ether_addr *a3)
{
  uint64_t PeerStatsIndex = AppleBCMWLANLQM::findPeerStatsIndex(a1, a3);
  uint64_t v7 = *((void *)a1 + 5) + 311 * PeerStatsIndex;
  __int16 v8 = *(_WORD *)&a3->octet[4];
  *(_DWORD *)(v7 + 5260) = *(_DWORD *)a3->octet;
  *(_WORD *)(v7 + 5264) = v8;
  *(_DWORD *)(*((void *)a1 + 5) + 311 * PeerStatsIndex + 5266) = a2;
  *(_DWORD *)(*((void *)a1 + 5) + 311 * PeerStatsIndex + 5270) = *(_DWORD *)&a3[1].octet[2];
  AppleBCMWLANLQM::printPeerCommonStats((uint64_t)a1, a3->octet, a2, 0);
  return PeerStatsIndex;
}

uint64_t AppleBCMWLANLQM::updatePerPeerChanStats(AppleBCMWLANLQM *this, unsigned int a2, _DWORD *a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = (AppleBCMWLANCore **)*((void *)this + 5);
  uint64_t v7 = 311 * a2 + 5274;
  while (*(unsigned __int16 *)((char *)v6 + v7) != *(unsigned __int16 *)a3)
  {
    ++v5;
    v7 += 50;
    if (v5 == 4)
    {
      uint64_t v5 = 0;
      uint64_t v9 = 311 * a2 + 5274;
      while (*(_WORD *)((char *)v6 + v9))
      {
        ++v5;
        v9 += 50;
        if (v5 == 4)
        {
          LOBYTE(v5) = 0;
          uint64_t v10 = (uint64_t)v6 + 311 * a2 + 5260;
          *(void *)(v10 + 206) = 0;
          *(_OWORD *)(v10 + 190) = 0u;
          *(_OWORD *)(v10 + 174) = 0u;
          *(_OWORD *)(v10 + 158) = 0u;
          *(_OWORD *)(v10 + 142) = 0u;
          *(_OWORD *)(v10 + 126) = 0u;
          *(_OWORD *)(v10 + 110) = 0u;
          *(_OWORD *)(v10 + 94) = 0u;
          *(_OWORD *)(v10 + 78) = 0u;
          *(_OWORD *)(v10 + 62) = 0u;
          *(_OWORD *)(v10 + 46) = 0u;
          *(_OWORD *)(v10 + 30) = 0u;
          *(_OWORD *)(v10 + 14) = 0u;
          uint64_t v6 = (AppleBCMWLANCore **)*((void *)this + 5);
          goto LABEL_8;
        }
      }
      break;
    }
  }
LABEL_8:
  ChanSpecHandler = (int **)AppleBCMWLANCore::getChanSpecHandler(*v6);
  AppleBCMWLANChanSpec::getAppleChannelSpec(ChanSpecHandler, *(unsigned __int16 *)a3);
  int PrimaryChannel = ChanSpecGetPrimaryChannel();
  *(_WORD *)(*((void *)this + 5) + 311 * a2 + 50 * v5 + 5274) = *(_WORD *)a3;
  *(_DWORD *)(*((void *)this + 5) + 311 * a2 + 50 * v5 + 5276) = a3[1];
  *(void *)(*((void *)this + 5) + 311 * a2 + 50 * v5 + 5280) = *((void *)a3 + 1);
  *(_OWORD *)(*((void *)this + 5) + 311 * a2 + 50 * v5 + 5288) = *((_OWORD *)a3 + 1);
  uint64_t v13 = *((void *)this + 5) + 311 * a2 + 50 * v5;
  int v14 = a3[12];
  *(_OWORD *)(v13 + 5304) = *((_OWORD *)a3 + 2);
  *(_DWORD *)(v13 + 5320) = v14;
  return AppleBCMWLANLQM::printPeerChanStats((uint64_t)this, a3, PrimaryChannel, 0);
}

uint64_t AppleBCMWLANLQM::updatePerPeerRxAmpduStats(AppleBCMWLANLQM *this, unsigned int a2, long long *a3)
{
  uint64_t v3 = *((void *)this + 5) + 311 * a2 + 5260;
  uint64_t v4 = *((void *)this + 5) + 311 * a2 + 5474;
  long long v5 = *(long long *)((char *)a3 + 44);
  long long v6 = *a3;
  long long v7 = a3[1];
  *(_OWORD *)(v3 + 246) = a3[2];
  *(_OWORD *)(v3 + 230) = v7;
  *(_OWORD *)(v3 + 214) = v6;
  *(_OWORD *)(v4 + 44) = v5;
  return AppleBCMWLANLQM::printPeerRxAmpduStats((uint64_t)this, a3, 0);
}

uint64_t AppleBCMWLANLQM::updatePerPeerTxAmpduStats(AppleBCMWLANLQM *this, unsigned int a2, unsigned int *a3)
{
  uint64_t v3 = (_OWORD *)(*((void *)this + 5) + 311 * a2 + 5534);
  long long v4 = *((_OWORD *)a3 + 1);
  *uint64_t v3 = *(_OWORD *)a3;
  v3[1] = v4;
  return AppleBCMWLANLQM::printPeerTxAmpduStats((uint64_t)this, a3, 0);
}

uint64_t AppleBCMWLANLQM::updateChanSeqCommonStats(uint64_t result, uint64_t a2, long long *a3)
{
  if (a2 && a3)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    long long v7 = *(AppleBCMWLANCore ***)(result + 40);
    uint64_t v8 = 5028;
    while (*(unsigned __int16 *)(a2 + 4) != *(unsigned __int16 *)((char *)v7 + v8))
    {
      ++v6;
      v8 += 58;
      if (v6 == 4)
      {
        uint64_t v6 = 0;
        uint64_t v9 = 5028;
        while (*(_WORD *)((char *)v7 + v9))
        {
          ++v6;
          v9 += 58;
          if (v6 == 4)
          {
            LOBYTE(v6) = 0;
            uint64_t v10 = (char *)v7 + 5028;
            *((void *)v10 + 28) = 0;
            *((_OWORD *)v10 + 12) = 0u;
            *((_OWORD *)v10 + 13) = 0u;
            *((_OWORD *)v10 + 10) = 0u;
            *((_OWORD *)v10 + 11) = 0u;
            *((_OWORD *)v10 + 8) = 0u;
            *((_OWORD *)v10 + 9) = 0u;
            *((_OWORD *)v10 + 6) = 0u;
            *((_OWORD *)v10 + 7) = 0u;
            *((_OWORD *)v10 + 4) = 0u;
            *((_OWORD *)v10 + 5) = 0u;
            *((_OWORD *)v10 + 2) = 0u;
            *((_OWORD *)v10 + 3) = 0u;
            *(_OWORD *)uint64_t v10 = 0u;
            *((_OWORD *)v10 + 1) = 0u;
            long long v7 = *(AppleBCMWLANCore ***)(result + 40);
            goto LABEL_10;
          }
        }
        break;
      }
    }
LABEL_10:
    ChanSpecHandler = (int **)AppleBCMWLANCore::getChanSpecHandler(*v7);
    AppleBCMWLANChanSpec::getAppleChannelSpec(ChanSpecHandler, *(unsigned __int16 *)(a2 + 4));
    int PrimaryChannel = ChanSpecGetPrimaryChannel();
    *(_WORD *)(*(void *)(v5 + 40) + 58 * v6 + 5028) = *(_WORD *)(a2 + 4);
    *(_DWORD *)(*(void *)(v5 + 40) + 58 * v6 + 5030) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(*(void *)(v5 + 40) + 58 * v6 + 5034) = *(_DWORD *)(a2 + 12);
    uint64_t v13 = *(void *)(v5 + 40) + 58 * v6 + 5028;
    long long v14 = *a3;
    long long v15 = a3[1];
    *(_OWORD *)(v13 + 42) = a3[2];
    *(_OWORD *)(v13 + 26) = v15;
    *(_OWORD *)(v13 + 10) = v14;
    uint64_t result = *(void *)(*(void *)(v5 + 40) + 24);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result) {
        return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(v5 + 40) + 24), "[dk] %s@%d:P2P chan %u: dur %u, entry %u, crsglitch %u, start %u, badplcp %u, badfcs %u, f0ov %u, f1ov %u, anyerr %u, resptout %u, frmtooln %u, frmtoosh %u\n", "updateChanSeqCommonStats", 3603, PrimaryChannel, *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 12), *((_DWORD *)a3 + 5), *((_DWORD *)a3 + 6), *((_DWORD *)a3 + 4), *((_DWORD *)a3 + 3), *((_DWORD *)a3 + 9), *((_DWORD *)a3 + 10), *((_DWORD *)a3 + 2), *((_DWORD *)a3 + 7), *(_DWORD *)a3, *((_DWORD *)a3 + 1));
      }
    }
  }
  return result;
}

AppleBCMWLANUtil::AutoreleasedAlignedOSData *AppleBCMWLANUtil::AutoreleasedAlignedOSData::AutoreleasedAlignedOSData(AppleBCMWLANUtil::AutoreleasedAlignedOSData *this, OSData *a2, uint64_t a3)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  if (((a3 - 1) & (unint64_t)OSData::getBytesNoCopy(a2)) == 0)
  {
    unsigned __int8 BytesNoCopy = (void *)OSData::getBytesNoCopy(a2);
    size_t Length = OSData::getLength(a2);
    uint64_t v8 = BytesNoCopy;
    goto LABEL_5;
  }
  OSData::getLength(a2);
  uint64_t v5 = IOMallocZeroData();
  *((void *)this + 1) = v5;
  if (v5)
  {
    *((_DWORD *)this + 4) = OSData::getLength(a2);
    uint64_t v6 = (void *)*((void *)this + 1);
    long long v7 = OSData::getBytesNoCopy(a2);
    memcpy(v6, v7, *((unsigned int *)this + 4));
    uint64_t v8 = (void *)*((void *)this + 1);
    size_t Length = *((unsigned int *)this + 4);
LABEL_5:
    *(void *)this = OSData::withBytesNoCopy(v8, Length);
  }
  return this;
}

void AppleBCMWLANUtil::AutoreleasedAlignedOSData::~AutoreleasedAlignedOSData(AppleBCMWLANUtil::AutoreleasedAlignedOSData *this)
{
  uint64_t v2 = *(void *)this;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
    *(void *)this = 0;
  }
  if (*((void *)this + 1))
  {
    IOFreeData();
    *((void *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
  }
}

void _GLOBAL__sub_I_AppleBCMWLANLQM_cpp()
{
  kNullRange = 0;
}

AppleBCMWLANBGScanAdapter *AppleBCMWLANBGScanAdapter::withDriver(AppleBCMWLANBGScanAdapter *this, AppleBCMWLANCore *a2)
{
  uint64_t v5 = (AppleBCMWLANBGScanAdapter *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANBGScanAdapterMetaClass, (OSObject **)&v5)) {
    return 0;
  }
  uint64_t v3 = v5;
  if (v5 && (AppleBCMWLANBGScanAdapter::initWithDriver(v5, this) & 1) == 0)
  {
    (*(void (**)(AppleBCMWLANBGScanAdapter *))(*(void *)v3 + 16))(v3);
    return 0;
  }
  return v3;
}

uint64_t AppleBCMWLANBGScanAdapter::initWithDriver(AppleBCMWLANBGScanAdapter *this, AppleBCMWLANCore *a2)
{
  long long v4 = (void *)IOMallocZeroTyped();
  *((void *)this + 5) = v4;
  if (!v4)
  {
    IOLog("Failed to allocate AppleBCMWLANBGScanAdapter_IVars\n");
    return 0;
  }
  void *v4 = a2;
  uint64_t v5 = (AppleBCMWLANCore *)**((void **)this + 5);
  if (!v5)
  {
    IOLog("AppleBCMWLANBGScanAdapter driver is null\n");
    return 0;
  }
  *(void *)(*((void *)this + 5) + 8) = AppleBCMWLANCore::getCommander(v5);
  uint64_t v6 = *((void *)this + 5);
  if (!*(void *)(v6 + 8))
  {
    IOLog("AppleBCMWLANBGScanAdapter commander is null\n");
    return 0;
  }
  *(void *)(*((void *)this + 5) + 16) = AppleBCMWLANCore::getConfigManager(*(AppleBCMWLANCore **)v6);
  if (!*(void *)(*((void *)this + 5) + 16))
  {
    IOLog("AppleBCMWLANBGScanAdapter configManager is null\n");
    return 0;
  }
  *(void *)(*((void *)this + 5) + 24) = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  if (!*(void *)(*((void *)this + 5) + 24))
  {
    IOLog("AppleBCMWLANBGScanAdapter Failed to init fLogger\n");
    return 0;
  }
  *(void *)(*((void *)this + 5) + 4848) = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a2 + 88))(a2);
  if (!*(void *)(*((void *)this + 5) + 4848))
  {
    IOLog("AppleBCMWLANBGScanAdapter Failed to init fWorkqueue\n");
    return 0;
  }
  if (!OSObject::init((OSObject *)this))
  {
    IOLog("AppleBCMWLANBGScanAdapter super init failied\n");
    return 0;
  }
  if (!AppleBCMWLANBGScanAdapter::initScanMac(this))
  {
    IOLog("AppleBCMWLANBGScanAdapter failed to init ScanMac\n");
    return 0;
  }
  *(_DWORD *)(*((void *)this + 5) + 40) = 0;
  bzero((void *)(*((void *)this + 5) + 44), 0x12C0uLL);
  uint64_t v7 = *(void *)AppleBCMWLANCore::getBus(**((AppleBCMWLANCore ***)this + 5));
  int v8 = (*(uint64_t (**)(void))(v7 + 368))();
  int v9 = 20;
  *(_DWORD *)(*((void *)this + 5) + 32) = 20;
  if ((v8 - 4377) > 1)
  {
    if (v8 == 4399 || v8 == 4388)
    {
      uint64_t v10 = *((void *)this + 5);
      int v9 = 40;
    }
    else
    {
      if (v8 == 4387)
      {
        unsigned __int8 v15 = 0;
        *(_WORD *)__dst = 0;
        AppleBCMWLANCore::getChipRevString(**((OSDictionaryPtr **)this + 5), __dst, 3uLL);
        if (*(unsigned __int16 *)__dst ^ 0x3042 | v15) {
          int v12 = 40;
        }
        else {
          int v12 = 30;
        }
        *(_DWORD *)(*((void *)this + 5) + 32) = v12;
        if (*(void *)(*((void *)this + 5) + 24))
        {
          if (CCLogStream::shouldLog()) {
            CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:Detected 4387-%s and overiding scan record value %d\n", "initWithDriver", 148, __dst, *(_DWORD *)(*((void *)this + 5) + 32));
          }
        }
        return 1;
      }
      uint64_t v10 = *((void *)this + 5);
    }
  }
  else
  {
    uint64_t v10 = *((void *)this + 5);
    int v9 = 30;
  }
  *(_DWORD *)(v10 + 32) = v9;
  return 1;
}

BOOL AppleBCMWLANBGScanAdapter::initScanMac(AppleBCMWLANBGScanAdapter *this)
{
  unsigned __int16 v19 = 0;
  int v18 = 0;
  *(void *)unsigned int v20 = 0;
  uint64_t v21 = 0;
  __int16 v22 = 0;
  *(_WORD *)(*((void *)this + 5) + 4858) = 0;
  *(_DWORD *)(*((void *)this + 5) + 4860) = 3600000;
  *(_WORD *)(*((void *)this + 5) + 4864) = 0;
  uint64_t v2 = *((void *)this + 5);
  *(_DWORD *)(v2 + 4870) = 0;
  *(_WORD *)(v2 + 4874) = 0;
  uint64_t v3 = *((void *)this + 5);
  *(_DWORD *)(v3 + 4876) = 0;
  *(_WORD *)(v3 + 4880) = 0;
  uint64_t v4 = *((void *)this + 5);
  *(_DWORD *)(v4 + 4882) = 0;
  *(_WORD *)(v4 + 4886) = 0;
  if (IOParseBootArgNumber("wlan.privmac.scanbitmap", &v19, 2))
  {
    *(_WORD *)(*((void *)this + 5) + 4858) = v19;
    if (*(void *)(*((void *)this + 5) + 24))
    {
      if (CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:boot-args set scanmac bitmap 0x%x\n", "initScanMac", 1733, v19);
      }
    }
  }
  IOParseBootArgNumber("wlan.debug.disableScanRandomMac", &v18, 4);
  if (v18)
  {
    *(_WORD *)(*((void *)this + 5) + 4858) = 64;
    if (*(void *)(*((void *)this + 5) + 24))
    {
      if (CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:boot-args disableScanRandomMac %d\n", "initScanMac", 1740, v18);
      }
    }
  }
  if (IOParseBootArgString("wlan.privmac.address", v20, 18))
  {
    int v5 = _parseMacAddress((ether_addr *)(*((void *)this + 5) + 4864), v20);
    uint64_t v6 = *((void *)this + 5);
    uint64_t v7 = *(void *)(v6 + 24);
    if (v5)
    {
      if (v7)
      {
        int shouldLog = CCLogStream::shouldLog();
        uint64_t v6 = *((void *)this + 5);
        if (shouldLog)
        {
          CCLogStream::logAlert(*(CCLogStream **)(v6 + 24), "[dk] %s@%d:fail to parse Private MAC address <%s> ret %d \n", "initScanMac", 1755, v20, v5);
          uint64_t v6 = *((void *)this + 5);
        }
      }
      *(_DWORD *)(v6 + 4870) = 0;
      *(_WORD *)(v6 + 4874) = 0;
    }
    else if (v7 && CCLogStream::shouldLog())
    {
      uint64_t v16 = *((void *)this + 5);
      CCLogStream::logAlert(*(CCLogStream **)(v16 + 24), "[dk] %s@%d:boot-args set Private MAC address to %02x:%02x:%02x:%02x:%02x:%02x\n", "initScanMac", 1753, *(unsigned __int8 *)(v16 + 4864), *(unsigned __int8 *)(v16 + 4865), *(unsigned __int8 *)(v16 + 4866), *(unsigned __int8 *)(v16 + 4867), *(unsigned __int8 *)(v16 + 4868), *(unsigned __int8 *)(v16 + 4869));
    }
  }
  if (IOParseBootArgString("wlan.scanmac.randommask", v20, 18))
  {
    int v9 = _parseMacAddress((ether_addr *)(*((void *)this + 5) + 4876), v20);
    uint64_t v10 = *((void *)this + 5);
    uint64_t v11 = *(void *)(v10 + 24);
    if (v9)
    {
      if (v11)
      {
        int v12 = CCLogStream::shouldLog();
        uint64_t v10 = *((void *)this + 5);
        if (v12)
        {
          CCLogStream::logAlert(*(CCLogStream **)(v10 + 24), "[dk] %s@%d:fail to parse Scan MAC Random Mask <%s> ret %d \n", "initScanMac", 1770, v20, v9);
          uint64_t v10 = *((void *)this + 5);
        }
      }
      *(_WORD *)(v10 + 4880) = 0;
      *(_DWORD *)(v10 + 4876) = 0;
    }
    else if (v11 && CCLogStream::shouldLog())
    {
      uint64_t v17 = *((void *)this + 5);
      CCLogStream::logAlert(*(CCLogStream **)(v17 + 24), "[dk] %s@%d:boot-args set Scan MAC Random Mask to %02x:%02x:%02x:%02x:%02x:%02x\n", "initScanMac", 1768, *(unsigned __int8 *)(v17 + 4876), *(unsigned __int8 *)(v17 + 4877), *(unsigned __int8 *)(v17 + 4878), *(unsigned __int8 *)(v17 + 4879), *(unsigned __int8 *)(v17 + 4880), *(unsigned __int8 *)(v17 + 4881));
    }
  }
  *(void *)(*((void *)this + 5) + 4912) = IO80211TimerSource::allocWithParams();
  uint64_t v13 = *((void *)this + 5);
  uint64_t v14 = *(void *)(v13 + 4912);
  if (!v14 && *(void *)(v13 + 24) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:Failed to Init Scan Privacy Mac timer\n", "initScanMac", 1779);
  }
  return v14 != 0;
}

void AppleBCMWLANBGScanAdapter::free(OSObject *this)
{
  uint64_t v2 = this[1].OSMetaClassBase::__vftable;
  if (v2)
  {
    init = v2[87].init;
    if (!init
      || ((*(void (**)(BOOL (__cdecl *)(OSObject *__hidden)))(*(void *)init + 72))(v2[87].init),
          (*(void (**)(BOOL (__cdecl *)(OSObject *__hidden)))(*(void *)this[1].OSMetaClassBase::__vftable[87].init
                                                                       + 16))(this[1].OSMetaClassBase::__vftable[87].init),
          this[1].OSMetaClassBase::__vftable[87].init = 0,
          (uint64_t v2 = this[1].OSMetaClassBase::__vftable) != 0))
    {
      IOFree(v2, 0x1338uLL);
      this[1].OSMetaClassBase::__vftable = 0;
    }
  }
  OSObject::free(this);
}

void non-virtual thunk to'AppleBCMWLANBGScanAdapter::free(AppleBCMWLANBGScanAdapter *this)
{
}

uint64_t AppleBCMWLANBGScanAdapter::setWCL_CONFIG_BG_MOTIONPROFILE(AppleBCMWLANBGScanAdapter *a1, unsigned char *a2)
{
  if (*(void *)(*((void *)a1 + 5) + 24) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*((void *)a1 + 5) + 24), "[dk] %s@%d:Configure BG Motion Profile\n", "setWCL_CONFIG_BG_MOTIONPROFILE", 187);
  }
  if (AppleBCMWLANBGScanAdapter::configureMotionProfileMapping(a1))
  {
    uint64_t v4 = 3758097084;
    if (*(void *)(*((void *)a1 + 5) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)a1 + 5) + 24), "[dk] %s@%d:Failed to configure Motion Profile Mapping\n");
    }
  }
  else
  {
    if (AppleBCMWLANBGScanAdapter::configureMotionProfilePNO((uint64_t)a1, a2)
      && *(void *)(*((void *)a1 + 5) + 24)
      && CCLogStream::shouldLog())
    {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)a1 + 5) + 24), "[dk] %s@%d:Failed to configure Motion Profile for PNO\n", "setWCL_CONFIG_BG_MOTIONPROFILE", 196);
    }
    uint64_t v4 = AppleBCMWLANBGScanAdapter::configureMotionProfileEPNO((uint64_t)a1, (uint64_t)a2);
    uint64_t v5 = *(void *)(*((void *)a1 + 5) + 24);
    if (v4)
    {
      if (v5 && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*((void *)a1 + 5) + 24), "[dk] %s@%d:Failed to configure Motion Profile for EPNO\n");
      }
    }
    else
    {
      if (v5 && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*((void *)a1 + 5) + 24), "[dk] %s@%d:Configured Motion Profiles for SSID/BSSID Based PNO Networks\n", "setWCL_CONFIG_BG_MOTIONPROFILE", 203);
      }
      return 0;
    }
  }
  return v4;
}

uint64_t AppleBCMWLANBGScanAdapter::configureMotionProfileMapping(AppleBCMWLANBGScanAdapter *this)
{
  memset(v16, 0, sizeof(v16));
  long long v15 = 0u;
  long long v14 = 0u;
  memset(&v13[1], 0, 80);
  __int32 MotionProfileGPIOConfig = AppleBCMWLANConfigManager::getMotionProfileGPIOConfig(*(AppleBCMWLANConfigManager **)(*((void *)this + 5) + 16));
  uint64_t v3 = *((void *)this + 5);
  if (MotionProfileGPIOConfig)
  {
    __int32 v4 = MotionProfileGPIOConfig;
    uint64_t MotionProfiles = AppleBCMWLANConfigManager::getMotionProfiles(*(AppleBCMWLANConfigManager **)(v3 + 16));
    v13[0] = 1;
    v13[2] = v4;
    v6.i32[0] = v4;
    LOBYTE(v13[3]) = 1 << vaddlv_u8((uint8x8_t)vcnt_s8(v6));
    *(_DWORD *)&v13[4] = (unsigned __int16)MotionProfiles;
    strcpy((char *)&v13[6], "frozen");
    v13[12] = WORD1(MotionProfiles);
    v13[13] = 1;
    strcpy((char *)&v13[14], "Moving");
    v13[20] = WORD2(MotionProfiles);
    v13[21] = 2;
    strcpy((char *)&v13[22], "Pedestrian");
    v13[28] = HIWORD(MotionProfiles);
    v13[29] = 3;
    strcpy((char *)&v13[30], "Driving");
    uint64_t v7 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
    v12[0] = v13;
    v12[1] = 136;
    uint64_t v8 = AppleBCMWLANCommander::runIOVarSet(v7, (uint64_t)"mpf_map", (uint64_t)v12, 0, 0);
    if (v8 && *(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog())
    {
      int v9 = (void *)*((void *)this + 5);
      uint64_t v10 = (CCLogStream *)v9[3];
      (*(void (**)(void, uint64_t))(*(void *)*v9 + 112))(*v9, v8);
      CCLogStream::logAlert(v10, "[dk] %s@%d: Error: Failed to Configure Motion Profile Mapping :  Ret %s\n");
    }
  }
  else
  {
    uint64_t v8 = 3758097095;
    if (*(void *)(v3 + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:No GPIO's are configured from Device Tree\n");
    }
  }
  return v8;
}

uint64_t AppleBCMWLANBGScanAdapter::configureMotionProfilePNO(uint64_t a1, unsigned char *a2)
{
  if (!a2[1]) {
    return 3758096385;
  }
  int v4 = 0;
  uint64_t v5 = 0;
  memset(&v17[1], 0, 64);
  v17[0] = 1;
  int8x8_t v6 = a2 + 6;
  while (1)
  {
    int v7 = *((unsigned __int16 *)v6 - 2);
    uint64_t v8 = &v17[v5];
    int v9 = *v6 * v7;
    v8[1] = v7;
    v8[2] = v9;
    *((_WORD *)v8 + 7) = *((_WORD *)v6 - 1);
    if (AppleBCMWLANCore::checkForScanCoreSupport(**(AppleBCMWLANCore ***)(a1 + 40))) {
      AppleBCMWLANCore::checkForLPSCDisable(**(AppleBCMWLANCore ***)(a1 + 40));
    }
    if (*a2) {
      break;
    }
    if (v4 == 3 || !v4) {
      LOWORD(v17[v5 + 3]) = 3;
    }
    v6 += 6;
    v5 += 4;
    ++v4;
    if (v5 == 16) {
      goto LABEL_13;
    }
  }
  LOWORD(v17[v5 + 3]) = 3;
LABEL_13:
  uint64_t v11 = *(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 8);
  v16[0] = v17;
  v16[1] = 68;
  uint64_t v10 = AppleBCMWLANCommander::runIOVarSet(v11, (uint64_t)"pfn_mpfset", (uint64_t)v16, 0, 0);
  if (v10 && *(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog())
  {
    uint64_t v13 = *(void **)(a1 + 40);
    long long v14 = (CCLogStream *)v13[3];
    long long v15 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v13 + 112))(*v13, v10);
    CCLogStream::logAlert(v14, "[dk] %s@%d: Error: Failed to Configure Motion Profile Set :  Ret %s\n", "configureMotionProfilePNO", 742, v15);
  }
  return v10;
}

uint64_t AppleBCMWLANBGScanAdapter::configureMotionProfileEPNO(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 26)) {
    return 0;
  }
  uint64_t v4 = 0;
  memset(&v20[1], 0, 64);
  v20[0] = 65537;
  uint64_t v5 = (unsigned __int8 *)(a2 + 32);
  while (1)
  {
    int v6 = *((unsigned __int16 *)v5 - 2);
    int v7 = &v20[v4];
    int v8 = *v5 * v6;
    v7[1] = v6;
    v7[2] = v8;
    *((_WORD *)v7 + 7) = *((_WORD *)v5 - 1);
    if (AppleBCMWLANCore::checkForScanCoreSupport(**(AppleBCMWLANCore ***)(a1 + 40))
      && (AppleBCMWLANCore::checkForLPSCDisable(**(AppleBCMWLANCore ***)(a1 + 40)) & 1) == 0)
    {
      if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog())
      {
        __int16 v9 = 8;
        CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:Low Power ePNO Config: pfn_mpfset flags = 0x%x\n", "configureMotionProfileEPNO", 776, 8);
      }
      else
      {
        __int16 v9 = 8;
      }
    }
    else
    {
      __int16 v9 = 0;
    }
    if (*(unsigned char *)a2) {
      break;
    }
    __int16 v10 = v9 | 3;
    if (v4 * 4) {
      __int16 v10 = v9;
    }
    LOWORD(v20[v4 + 3]) = v10;
    if ((AppleBCMWLANCore::is4377Up(**(AppleBCMWLANCore ***)(a1 + 40)) & 1) == 0)
    {
      int v11 = *(unsigned __int16 *)(a2 + 2);
      int v12 = *v5 * v11;
      v7[1] = v11;
      v7[2] = v12;
    }
    v5 += 6;
    v4 += 4;
    if (v4 == 16) {
      goto LABEL_19;
    }
  }
  LOWORD(v20[v4 + 3]) = v9 | 3;
LABEL_19:
  long long v14 = *(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 8);
  v19[0] = v20;
  v19[1] = 68;
  uint64_t v13 = AppleBCMWLANCommander::runIOVarSet(v14, (uint64_t)"pfn_mpfset", (uint64_t)v19, 0, 0);
  if (v13 && *(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog())
  {
    uint64_t v16 = *(void **)(a1 + 40);
    uint64_t v17 = (CCLogStream *)v16[3];
    int v18 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v16 + 112))(*v16, v13);
    CCLogStream::logAlert(v17, "[dk] %s@%d: Error: Failed to Configure Motion Profile Set :  Ret %s\n", "configureMotionProfileEPNO", 814, v18);
  }
  return v13;
}

uint64_t AppleBCMWLANBGScanAdapter::setWCL_CONFIG_BG_NETWORK(AppleBCMWLANCore ***a1, unsigned __int8 *a2)
{
  *((unsigned char *)a1[5] + 36) = 0;
  *((unsigned char *)a1[5] + 4844) = 0;
  if (a1[5][3] && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(a1[5][3], "[dk] %s@%d:Configure BG Networks\n", "setWCL_CONFIG_BG_NETWORK", 221);
  }
  int v4 = AppleBCMWLANBGScanAdapter::configurePFN((AppleBCMWLANBGScanAdapter *)a1, 0);
  uint64_t v5 = a1[5];
  if (v4)
  {
    int v6 = v4;
    if (v5[3])
    {
      int shouldLog = CCLogStream::shouldLog();
      uint64_t v5 = a1[5];
      if (shouldLog)
      {
        CCLogStream::logAlert(v5[3], "[dk] %s@%d: Failed to Disable PFN : %d\n", "setWCL_CONFIG_BG_NETWORK", 225, v6);
        uint64_t v5 = a1[5];
      }
    }
  }
  uint64_t v8 = AppleBCMWLANCommander::runIOVarSet(v5[1], (uint64_t)"pfnclear", (uint64_t)&kNoTxPayload, 0, 0);
  if (v8) {
    return v8;
  }
  uint64_t v10 = AppleBCMWLANBGScanAdapter::configurePFNSuspend((AppleBCMWLANBGScanAdapter *)a1, 0);
  if (v10)
  {
    uint64_t v8 = v10;
    if (a1[5][3] && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(a1[5][3], "[dk] %s@%d: Failure to Suspend BG Scan: %d\n");
    }
    return v8;
  }
  if (!*((_DWORD *)a2 + 5) && !*((_DWORD *)a2 + 230) && !*a2)
  {
    if (a1[5][3] && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(a1[5][3], "[dk] %s@%d: Not enabled, num_ssid_networks[%u], num_bssid_networks[%u], fBGScanCacheState[%u]\n", "setWCL_CONFIG_BG_NETWORK", 244, *((_DWORD *)a2 + 5), *((_DWORD *)a2 + 230), *a2);
    }
    return 0;
  }
  *((_DWORD *)a1[5] + 10) = *((_DWORD *)a2 + 861);
  bzero((char *)a1[5] + 44, 0x12C0uLL);
  memcpy((char *)a1[5] + 44, a2 + 3448, 0x12C0uLL);
  int v11 = *a2;
  *((unsigned char *)a1[5] + 4845) = v11;
  *((unsigned char *)a1[5] + 4846) = a2[2];
  long long v53 = 0uLL;
  int v54 = 0;
  uint64_t v52 = 2;
  unsigned __int16 v12 = (a2[1] != 0) << 6;
  *(void *)((char *)&v53 + 4) = v12;
  if (v11)
  {
    WORD2(v53) = v12 | 0x1020;
    uint64_t v13 = *(void *)AppleBCMWLANCore::getBus(*a1[5]);
    if ((*(unsigned int (**)(void))(v13 + 368))() >> 1 >= 0x88D) {
      WORD2(v53) = v12 | 0x3020;
    }
  }
  int v14 = *((unsigned __int16 *)a2 + 2);
  WORD3(v53) = 30;
  int v15 = a2[8] * v14;
  HIDWORD(v52) = v14;
  LODWORD(v53) = v15;
  BYTE10(v53) = a2[7];
  BYTE11(v53) = a2[6];
  HIDWORD(v53) = 0;
  if (!*a2)
  {
    LOBYTE(v19) = 3;
    goto LABEL_27;
  }
  if (!*((_DWORD *)a2 + 4))
  {
    int v19 = *((_DWORD *)a1[5] + 8);
    goto LABEL_27;
  }
  unsigned int v16 = *((_DWORD *)a2 + 4);
  BYTE9(v53) = *((_DWORD *)a2 + 4);
  uint64_t v17 = *(void *)AppleBCMWLANCore::getBus(*a1[5]);
  int v18 = (*(uint64_t (**)(void))(v17 + 368))();
  if ((v18 - 4377) <= 1 && v16 >= 0x1F)
  {
    LOBYTE(v19) = 30;
    goto LABEL_27;
  }
  if (v18 == 4387)
  {
    char __dst[2] = 0;
    *(_WORD *)__dst = 0;
    AppleBCMWLANCore::getChipRevString((OSDictionaryPtr)*a1[5], __dst, 3uLL);
    int v34 = *(unsigned __int16 *)__dst ^ 0x3042 | __dst[2];
    if (v34 || BYTE9(v53) <= 0x1Eu)
    {
      if (!v34 || BYTE9(v53) < 0x29u)
      {
LABEL_87:
        if (a1[5][3] && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(a1[5][3], "[dk] %s@%d:Detected 4387-%s and overiding scan record limit value %d\n", "setWCL_CONFIG_BG_NETWORK", 308, __dst, BYTE9(v53));
        }
        goto LABEL_28;
      }
      char v35 = 40;
    }
    else
    {
      char v35 = 30;
    }
    BYTE9(v53) = v35;
    goto LABEL_87;
  }
  BOOL v51 = v18 == 4399 || v18 == 4388;
  if (v51 && v16 >= 0x29)
  {
    LOBYTE(v19) = 40;
  }
  else
  {
    if (v16 < 0x15) {
      goto LABEL_28;
    }
    LOBYTE(v19) = 20;
  }
LABEL_27:
  BYTE9(v53) = v19;
LABEL_28:
  BYTE8(v53) = *((_DWORD *)a2 + 3);
  if (AppleBCMWLANCore::getFirmwareInterfaceVersion(*a1[5]) <= 0xB) {
    __int16 v20 = 2;
  }
  else {
    __int16 v20 = 3;
  }
  LOWORD(v52) = v20;
  LOWORD(v54) = 5140;
  uint64_t v21 = a1[5][1];
  *(void *)__dst = &v52;
  uint64_t v56 = 28;
  uint64_t v22 = AppleBCMWLANCommander::runIOVarSet(v21, (uint64_t)"pfn_set", (uint64_t)__dst, 0, 0);
  if (v22)
  {
    uint64_t v8 = v22;
    if (a1[5][3] && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(a1[5][3], "[dk] %s@%d: Failure to configure PNO: %d\n");
    }
    return v8;
  }
  uint64_t v23 = IOMallocZeroData();
  if (!v23) {
    return 12;
  }
  uint64_t v24 = v23;
  if (*((_DWORD *)a2 + 5))
  {
    unint64_t v25 = 0;
    uint64_t v26 = (uint64_t)(a2 + 24);
    uint64_t v27 = v23;
    do
    {
      AppleBCMWLANBGScanAdapter::populatePreferredSSIDNetworks((uint64_t)a1, v27, v26);
      *((unsigned char *)a1[5] + 36) |= 1u;
      v27 += 56;
      ++v25;
      unint64_t v28 = *((unsigned int *)a2 + 5);
      v26 += 56;
    }
    while (v25 < v28);
    if (v28)
    {
      long long v29 = a1[5][1];
      unsigned __int16 v30 = 56 * v28;
      uint64_t v31 = v30 & 0xFFF8;
      uint64_t v32 = (v30 & 0xFFF8) != 0 ? v24 : 0;
      *(void *)__dst = v32;
      uint64_t v56 = v31;
      uint64_t v33 = AppleBCMWLANCommander::runIOVarSet(v29, (uint64_t)"pfn_add", (uint64_t)__dst, 0, 0);
      if (v33)
      {
        uint64_t v8 = v33;
        if (a1[5][3] && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(a1[5][3], "[dk] %s@%d: Failure to add network to PNO list: %d\n", "setWCL_CONFIG_BG_NETWORK", 356, v8);
        }
        goto LABEL_97;
      }
    }
  }
  uint64_t v36 = *((unsigned int *)a2 + 230);
  if (v36 <= 0xB4) {
    size_t v37 = 8 * v36;
  }
  else {
    size_t v37 = 1440;
  }
  uint64_t v38 = IOMallocZeroData();
  if (!v38)
  {
    uint64_t v8 = 12;
    goto LABEL_97;
  }
  unsigned int v39 = (void *)v38;
  if (!*((_DWORD *)a2 + 230))
  {
    uint64_t v8 = 0;
    goto LABEL_96;
  }
  unint64_t v40 = 0;
  int v41 = 0;
  uint64_t v42 = (uint64_t)(a2 + 924);
  uint64_t v43 = (unsigned __int8 *)v38;
  while (1)
  {
    AppleBCMWLANBGScanAdapter::populatePreferredBSSIDNetworks((uint64_t)a1, v43, v42);
    *((unsigned char *)a1[5] + 36) |= 2u;
    int v44 = (unsigned __int16)(v40 + 1);
    HIDWORD(v45) = -1527099483 * v44;
    LODWORD(v45) = -1527099483 * v44;
    if ((v45 >> 2) < 0x16C16C2) {
      break;
    }
    unsigned int v46 = *((_DWORD *)a2 + 230);
    if (v46 == v44) {
      break;
    }
    v43 += 8;
LABEL_68:
    ++v40;
    v42 += 7;
    if (v40 >= v46)
    {
      uint64_t v8 = 0;
      goto LABEL_96;
    }
  }
  int v47 = a1[5][1];
  int v48 = v44 - v41;
  if (((8 * v48) & 0xFFF8) != 0) {
    unsigned int v49 = v39;
  }
  else {
    unsigned int v49 = 0;
  }
  *(void *)__dst = v49;
  uint64_t v56 = 8 * (v48 & 0x1FFF);
  uint64_t v8 = AppleBCMWLANCommander::runIOVarSet(v47, (uint64_t)"pfn_add_bssid", (uint64_t)__dst, 0, 0);
  size_t v50 = a1[5][3];
  if (!v8)
  {
    if (v50 && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(a1[5][3], "[dk] %s@%d: Enhanced PNO: Added %d new set of preferred Networks Total %d \n", "setWCL_CONFIG_BG_NETWORK", 401, v48, (unsigned __int16)(v40 + 1));
    }
    bzero(v39, v37);
    unsigned int v46 = *((_DWORD *)a2 + 230);
    uint64_t v43 = (unsigned __int8 *)v39;
    int v41 = (unsigned __int16)(v40 + 1);
    goto LABEL_68;
  }
  if (v50 && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(a1[5][3], "[dk] %s@%d: Failure to add network to PNO list: %d\n", "setWCL_CONFIG_BG_NETWORK", 398, v8);
  }
LABEL_96:
  IOFreeData();
LABEL_97:
  IOFreeData();
  return v8;
}

uint64_t AppleBCMWLANBGScanAdapter::configurePFN(AppleBCMWLANBGScanAdapter *this, int a2)
{
  int v7 = a2;
  uint64_t v3 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
  v6[0] = &v7;
  v6[1] = 4;
  uint64_t v4 = AppleBCMWLANCommander::runIOVarSet(v3, (uint64_t)"pfn", (uint64_t)v6, 0, 0);
  if (v4 && *(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d: Failure to start PFN: %d\n", "configurePFN", 446, v4);
  }
  return v4;
}

uint64_t AppleBCMWLANBGScanAdapter::configurePFNSuspend(AppleBCMWLANBGScanAdapter *this, int a2)
{
  int v14 = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(***((void ***)this + 5) + 88))(**((void **)this + 5));
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 136))(v3))
  {
    int v11 = this;
    uint64_t v12 = (uint64_t)AppleBCMWLANBGScanAdapter::handlePFNSuspendAsyncCallBack;
    uint64_t v13 = 0;
    uint64_t v4 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 5) + 8), (uint64_t)"pfn_suspend");
    if (v4 && *(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog())
    {
      uint64_t v5 = (void *)*((void *)this + 5);
      int v6 = (CCLogStream *)v5[3];
      (*(void (**)(void, uint64_t))(*(void *)*v5 + 112))(*v5, v4);
      CCLogStream::logAlert(v6, "[dk] %s@%d: Failure to start PFN: %s\n");
    }
  }
  else
  {
    int v7 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
    int v11 = (AppleBCMWLANBGScanAdapter *)&v14;
    uint64_t v12 = 4;
    uint64_t v4 = AppleBCMWLANCommander::runIOVarSet(v7, (uint64_t)"pfn_suspend", (uint64_t)&v11, 0, 0);
    if (v4 && *(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog())
    {
      __int16 v9 = (void *)*((void *)this + 5);
      uint64_t v10 = (CCLogStream *)v9[3];
      (*(void (**)(void, uint64_t))(*(void *)*v9 + 112))(*v9, v4);
      CCLogStream::logAlert(v10, "[dk] %s@%d: Failure to start PNO: %s\n");
    }
  }
  return v4;
}

uint64_t AppleBCMWLANBGScanAdapter::populatePreferredSSIDNetworks(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (const char *)(a2 + 4);
  memcpy((void *)(a2 + 4), (const void *)(a3 + 8), *(unsigned int *)(a3 + 4));
  *(_DWORD *)a2 = *(_DWORD *)(a3 + 4);
  if (*(unsigned char *)(a3 + 49)) {
    int v7 = *(_DWORD *)(a2 + 36) | 4;
  }
  else {
    int v7 = *(_DWORD *)(a2 + 36);
  }
  int v8 = v7 | 0xB510;
  *(_DWORD *)(a2 + 36) = v8;
  unsigned int v9 = *(_DWORD *)(a3 + 52);
  if (v9 >= 0xFFFFFF7B) {
    *(_DWORD *)(a2 + 36) = v8 & 0xFFFF00FF | (((unsigned __int16)(((_WORD)v9 << 8) + 1280) >> 8) << 8);
  }
  *(_OWORD *)(a2 + 40) = xmmword_1003037A0;
  if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:Add SSID: %s\n", "populatePreferredSSIDNetworks", 912, v6);
  }
  return 1;
}

uint64_t AppleBCMWLANBGScanAdapter::populatePreferredBSSIDNetworks(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *((_WORD *)a2 + 3) = 0;
  __int16 v5 = 16 * (*(unsigned char *)(a3 + 6) & 1);
  *((_WORD *)a2 + 3) = v5;
  if ((*(unsigned char *)(a3 + 6) & 2) != 0) {
    *((_WORD *)a2 + 3) = v5 | 8;
  }
  __int16 v6 = *(_WORD *)(a3 + 4);
  *(_DWORD *)a2 = *(_DWORD *)a3;
  *((_WORD *)a2 + 2) = v6;
  if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog())
  {
    __int16 v8 = *((_WORD *)a2 + 3);
    unsigned int v9 = "LOST";
    if ((v8 & 0x10) == 0) {
      unsigned int v9 = 0;
    }
    if ((v8 & 8) != 0) {
      uint64_t v10 = "FOUND";
    }
    else {
      uint64_t v10 = 0;
    }
    CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:Add BSSID %02x:%02x:%02x:%02x:%02x:%02x, [%s %s]\n", "populatePreferredBSSIDNetworks", 948, *a2, a2[1], a2[2], a2[3], a2[4], a2[5], v9, v10);
  }
  return 1;
}

uint64_t AppleBCMWLANBGScanAdapter::setWCL_CONFIG_BGSCAN(AppleBCMWLANBGScanAdapter *this, unsigned char *a2)
{
  if (*a2)
  {
    if (*(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:Disable BGScan\n", "setWCL_CONFIG_BGSCAN", 416);
    }
    return AppleBCMWLANBGScanAdapter::configurePFN(this, 0);
  }
  else
  {
    if (a2[1])
    {
      if (*(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:Configure PNO\n", "setWCL_CONFIG_BGSCAN", 421);
      }
      uint64_t v5 = AppleBCMWLANBGScanAdapter::configPNO(this, a2[2]);
      if (v5 && *(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog())
      {
        if (a2[2]) {
          __int16 v6 = "Suspend";
        }
        else {
          __int16 v6 = "Resume";
        }
        CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:Failed to %s PNO %d\n", "setWCL_CONFIG_BGSCAN", 424, v6, v5);
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
    if (a2[3])
    {
      if (*(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:Configure EPNO\n", "setWCL_CONFIG_BGSCAN", 429);
      }
      uint64_t v5 = AppleBCMWLANBGScanAdapter::configEPNO(this, a2[4]);
      if (v5 && *(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog())
      {
        int v7 = "Suspend";
        if (!a2[4]) {
          int v7 = "Resume";
        }
        CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:Failed to %s EPNO %d\n", "setWCL_CONFIG_BGSCAN", 432, v7, v5);
      }
    }
    return v5;
  }
}

uint64_t AppleBCMWLANBGScanAdapter::configPNO(AppleBCMWLANBGScanAdapter *this, int a2)
{
  if (a2) {
    int v4 = 2;
  }
  else {
    int v4 = 1;
  }
  int v23 = v4;
  uint64_t v5 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
  v22[0] = &v23;
  v22[1] = 4;
  uint64_t v6 = AppleBCMWLANCommander::runIOVarSet(v5, (uint64_t)"scan_nprobes", (uint64_t)v22, 0, 0);
  int v7 = (AppleBCMWLANCore **)*((void *)this + 5);
  if (v6)
  {
    uint64_t v8 = v6;
    if (v7[3])
    {
      int shouldLog = CCLogStream::shouldLog();
      int v7 = (AppleBCMWLANCore **)*((void *)this + 5);
      if (shouldLog)
      {
        int v19 = v7[3];
        __int16 v20 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)*v7 + 112))(*v7, v8);
        CCLogStream::logAlert(v19, "[dk] %s@%d: Failure to set number of scan probes: %s\n", "configPNO", 485, v20);
        int v7 = (AppleBCMWLANCore **)*((void *)this + 5);
      }
    }
  }
  if ((AppleBCMWLANCore::isEnhancedPNOEnabled(*v7) & 1) == 0)
  {
    if (!a2)
    {
LABEL_17:
      int v11 = this;
      int v12 = 1;
      goto LABEL_18;
    }
LABEL_14:
    int v11 = this;
    int v12 = 0;
LABEL_18:
    uint64_t v14 = AppleBCMWLANBGScanAdapter::configurePFN(v11, v12);
    goto LABEL_21;
  }
  if ((*(unsigned char *)(*((void *)this + 5) + 36) & 2) == 0)
  {
    if (!a2)
    {
      uint64_t v10 = AppleBCMWLANBGScanAdapter::configureBGScanParams(this, 2);
      if (v10)
      {
LABEL_22:
        if (*(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog())
        {
          if (a2) {
            int v15 = "Suspend";
          }
          else {
            int v15 = "Resume";
          }
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:Failed to %s PNO\n", "configPNO", 517, v15);
        }
        return v10;
      }
      goto LABEL_17;
    }
    goto LABEL_14;
  }
  if (a2) {
    int v13 = 1;
  }
  else {
    int v13 = 3;
  }
  uint64_t v14 = AppleBCMWLANBGScanAdapter::configureBGScanParams(this, v13);
LABEL_21:
  uint64_t v10 = v14;
  if (v14) {
    goto LABEL_22;
  }
  uint64_t v16 = *((void *)this + 5);
  if (*(void *)(v16 + 24))
  {
    int v17 = CCLogStream::shouldLog();
    uint64_t v16 = *((void *)this + 5);
    if (v17)
    {
      if (a2) {
        uint64_t v21 = "Suspend";
      }
      else {
        uint64_t v21 = "Resume";
      }
      CCLogStream::logAlert(*(CCLogStream **)(v16 + 24), "[dk] %s@%d:Succesfully %s PNO\n", "configPNO", 519, v21);
      uint64_t v16 = *((void *)this + 5);
    }
  }
  uint64_t v10 = 0;
  *(unsigned char *)(v16 + 4844) = a2 == 0;
  return v10;
}

uint64_t AppleBCMWLANBGScanAdapter::configEPNO(AppleBCMWLANBGScanAdapter *this, int a2)
{
  if (*(unsigned char *)(*((void *)this + 5) + 4844)) {
    int v4 = 3;
  }
  else {
    int v4 = 1;
  }
  uint64_t v5 = AppleBCMWLANBGScanAdapter::configureBGScanParams(this, v4);
  uint64_t v6 = v5;
  if (a2)
  {
    if (!v5)
    {
      uint64_t v6 = AppleBCMWLANBGScanAdapter::configurePFN(this, 1);
      if (!v6)
      {
        uint64_t v6 = AppleBCMWLANBGScanAdapter::configurePFNSuspend(this, 1);
        if (!v6)
        {
          int v7 = (AppleBCMWLANCore **)*((void *)this + 5);
          if (v7[3])
          {
            int shouldLog = CCLogStream::shouldLog();
            int v7 = (AppleBCMWLANCore **)*((void *)this + 5);
            if (shouldLog)
            {
              CCLogStream::logAlert(v7[3], "[dk] %s@%d:Succesfully Suspend EPNO\n", "configEPNO", 560);
              int v7 = (AppleBCMWLANCore **)*((void *)this + 5);
            }
          }
          unsigned int v9 = *v7;
          unsigned int v10 = 37;
LABEL_22:
          AppleBCMWLANCore::postMessageInfra(v9, v10, 0, 0);
          return 0;
        }
      }
    }
  }
  else if (!v5)
  {
    uint64_t v6 = AppleBCMWLANBGScanAdapter::configurePFN(this, 1);
    if (!v6)
    {
      uint64_t v6 = AppleBCMWLANBGScanAdapter::configurePFNSuspend(this, 0);
      if (!v6)
      {
        int v12 = (AppleBCMWLANCore **)*((void *)this + 5);
        if (v12[3])
        {
          int v13 = CCLogStream::shouldLog();
          int v12 = (AppleBCMWLANCore **)*((void *)this + 5);
          if (v13)
          {
            CCLogStream::logAlert(v12[3], "[dk] %s@%d:Succesfully Resume EPNO\n", "configEPNO", 563);
            int v12 = (AppleBCMWLANCore **)*((void *)this + 5);
          }
        }
        unsigned int v9 = *v12;
        unsigned int v10 = 38;
        goto LABEL_22;
      }
    }
  }
  if (*(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog())
  {
    if (a2) {
      uint64_t v14 = "Disable";
    }
    else {
      uint64_t v14 = "Enable";
    }
    CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:Failed to %s EPNO\n", "configEPNO", 557, v14);
  }
  return v6;
}

uint64_t AppleBCMWLANBGScanAdapter::handlePFNSuspendAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(*(void *)(result + 40) + 24);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = *(void **)(v3 + 40);
        uint64_t v6 = (CCLogStream *)v5[3];
        int v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 112))(*v5, a3);
        return CCLogStream::logAlert(v6, "[dk] %s@%d: Error: cannot set PFN Suspend/Resume : %s\n", "handlePFNSuspendAsyncCallBack", 1372, v7);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANBGScanAdapter::configureBGScanParams(AppleBCMWLANBGScanAdapter *this, int a2)
{
  memset(v30, 0, 140);
  int v4 = (AppleBCMWLANCore **)*((void *)this + 5);
  if (v4[3])
  {
    int shouldLog = CCLogStream::shouldLog();
    int v4 = (AppleBCMWLANCore **)*((void *)this + 5);
    if (shouldLog)
    {
      uint64_t v26 = v4[3];
      uint64_t v27 = "BSSID_BASED_SCAN";
      if ((a2 & 1) == 0) {
        uint64_t v27 = 0;
      }
      unint64_t v28 = "SSID_BASED_SCAN";
      if ((a2 & 2) == 0) {
        unint64_t v28 = 0;
      }
      CCLogStream::logAlert(v26, "[dk] %s@%d:%s: ScanType [%s %s]\n", "configureBGScanParams", 961, "configureBGScanParams", v27, v28);
      int v4 = (AppleBCMWLANCore **)*((void *)this + 5);
    }
  }
  BOOL isRestrictedCountry = AppleBCMWLANCore::isRestrictedCountry(*v4);
  if ((a2 & 2) != 0 && isRestrictedCountry)
  {
    if (*(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d: Prohibited channel scanning not allowed in PNO\n", "configureBGScanParams", 967);
    }
    int v7 = 2;
  }
  else
  {
    DWORD2(v30[8]) = 1;
    int v7 = 3;
  }
  uint64_t v8 = *((void *)this + 5);
  int v9 = *(unsigned __int8 *)(v8 + 4845);
  if (!*(unsigned char *)(v8 + 4845)) {
    DWORD2(v30[8]) = v7;
  }
  if ((~a2 & 3) == 0)
  {
    LODWORD(v30[0]) = 0;
    if (*(void *)(v8 + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:WL_PFN_REPORT_ALLNET configured\n");
    }
    goto LABEL_16;
  }
  if (a2)
  {
    LODWORD(v30[0]) = 2;
    if (*(void *)(v8 + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d: BSSID based PNO is Configured\n", "configureBGScanParams", 983);
    }
    if (AppleBCMWLANCore::getFirmwareInterfaceVersion(**((AppleBCMWLANCore ***)this + 5)) < 0x11)
    {
      uint64_t v14 = *((void *)this + 5);
      DWORD1(v30[0]) = *(_DWORD *)(v14 + 40);
      if (DWORD1(v30[0]))
      {
        unsigned __int8 v23 = 0;
        do
        {
          if (*(void *)(v14 + 24))
          {
            int v24 = CCLogStream::shouldLog();
            uint64_t v14 = *((void *)this + 5);
            if (v24)
            {
              CCLogStream::logAlert(*(CCLogStream **)(v14 + 24), "[dk] %s@%d:Channel Number %d ", "configureBGScanParams", 1031, *(_DWORD *)(v14 + 12 * v23 + 48));
              uint64_t v14 = *((void *)this + 5);
            }
          }
          *((_WORD *)v30 + v23 + 4) = *(_DWORD *)(v14 + 12 * v23 + 48);
          ++v23;
        }
        while (*(_DWORD *)(v14 + 40) > v23);
        goto LABEL_16;
      }
    }
    else
    {
      LOWORD(v29[0]) = 0;
      uint64_t v14 = *((void *)this + 5);
      if (*(_DWORD *)(v14 + 40))
      {
        unsigned __int8 v15 = 0;
        do
        {
          unsigned int v16 = v15;
          uint64_t v17 = v14 + 12 * v15;
          int v20 = *(_DWORD *)(v17 + 52);
          int v18 = (int *)(v17 + 52);
          int v19 = v20;
          if ((v20 & 2) == 0)
          {
            int *v18 = v19 | 2;
            uint64_t v14 = *((void *)this + 5);
          }
          if (AppleBCMWLANCore::getChanSpec(*(void **)v14, v14 + 12 * v16 + 44, (unsigned __int16 *)v29))BOOL v21 = 1; {
          else
          }
            BOOL v21 = LOWORD(v29[0]) == 0;
          if (v21)
          {
            if (*(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog()) {
              CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:Invaid chanspec channel=%d flags=0x%x. skipping channel -> WA for wifid bug!\n", "configureBGScanParams", 1018, *(_DWORD *)(*((void *)this + 5) + 12 * v16 + 48), *(_DWORD *)(*((void *)this + 5) + 12 * v16 + 52));
            }
          }
          else
          {
            int v22 = DWORD1(v30[0]);
            *((_WORD *)v30 + SDWORD1(v30[0]) + 4) = v29[0];
            DWORD1(v30[0]) = v22 + 1;
            LOWORD(v29[0]) = 0;
          }
          unsigned __int8 v15 = v16 + 1;
          uint64_t v14 = *((void *)this + 5);
        }
        while (*(_DWORD *)(v14 + 40) > (v16 + 1));
        if (DWORD1(v30[0])) {
          goto LABEL_16;
        }
      }
    }
    if (!*(_DWORD *)(v14 + 40))
    {
LABEL_16:
      unsigned int v10 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
      v29[0] = v30;
      v29[1] = 140;
      uint64_t v11 = AppleBCMWLANCommander::runIOVarSet(v10, (uint64_t)"pfn_cfg", (uint64_t)v29, 0, 0);
      if (v11 && *(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog())
      {
        int v12 = (void *)*((void *)this + 5);
        int v13 = (CCLogStream *)v12[3];
        (*(void (**)(void, uint64_t))(*(void *)*v12 + 112))(*v12, v11);
        CCLogStream::logAlert(v13, "[dk] %s@%d: Failure to configure PFN : %s\n");
      }
      return v11;
    }
    uint64_t v11 = 3758097095;
    if (*(void *)(v14 + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:No valid channels num req %d \n");
    }
  }
  else
  {
    if ((a2 & 2) != 0)
    {
      if (v9)
      {
        LODWORD(v30[0]) = 0;
        if (*(void *)(v8 + 24) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d: SSID based PNO and Background Scan Cache are Configured\n");
        }
      }
      else
      {
        LODWORD(v30[0]) = 1;
        if (*(void *)(v8 + 24) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d: SSID based PNO is Configured\n");
        }
      }
      goto LABEL_16;
    }
    uint64_t v11 = 3758097095;
    if (*(void *)(v8 + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:UnSupported: ScanType %d\n");
    }
  }
  return v11;
}

uint64_t AppleBCMWLANBGScanAdapter::setWCL_CONFIG_BG_PARAMS(AppleBCMWLANBGScanAdapter *a1, uint64_t a2)
{
  if (*(void *)(*((void *)a1 + 5) + 24) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*((void *)a1 + 5) + 24), "[dk] %s@%d:Configure BGScan Params\n", "setWCL_CONFIG_BG_PARAMS", 575);
  }
  if (*(unsigned char *)a2)
  {
    uint64_t v4 = AppleBCMWLANBGScanAdapter::configureDynamicScanFreq((uint64_t)a1, *(unsigned __int8 *)(a2 + 1));
    if (v4 && *(void *)(*((void *)a1 + 5) + 24) && CCLogStream::shouldLog())
    {
      if (*(unsigned char *)(a2 + 1)) {
        uint64_t v5 = "Enable";
      }
      else {
        uint64_t v5 = "Disable";
      }
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)a1 + 5) + 24), "[dk] %s@%d:Failed to %s Dynamic Scan Freq %d\n", "setWCL_CONFIG_BG_PARAMS", 579, v5, v4);
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v4 = AppleBCMWLANBGScanAdapter::configureUnAssociatedScanTime(a1, *(unsigned __int8 *)(a2 + 25), *(_DWORD *)(a2 + 28));
    if (v4)
    {
      if (*(void *)(*((void *)a1 + 5) + 24) && CCLogStream::shouldLog())
      {
        int v7 = "Enable";
        if (!*(unsigned char *)(a2 + 25)) {
          int v7 = "Disable";
        }
        CCLogStream::logAlert(*(CCLogStream **)(*((void *)a1 + 5) + 24), "[dk] %s@%d:Failed to %s UnAssociate Scan Time %d\n", "setWCL_CONFIG_BG_PARAMS", 586, v7, v4);
      }
    }
  }
  return v4;
}

uint64_t AppleBCMWLANBGScanAdapter::configureDynamicScanFreq(uint64_t a1, int a2)
{
  uint64_t v4 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 8), (uint64_t)"pfn_override");
  if (v4 && *(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog())
  {
    uint64_t v6 = *(void **)(a1 + 40);
    int v7 = (CCLogStream *)v6[3];
    if (a2) {
      uint64_t v8 = "Configure";
    }
    else {
      uint64_t v8 = "UnConfigure";
    }
    int v9 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v6 + 112))(*v6, v4);
    CCLogStream::logAlert(v7, "[dk] %s@%d: Error: Failed to %s Dynamic Scan Freq :  Ret %s\n", "configureDynamicScanFreq", 1088, v8, v9);
  }
  return v4;
}

uint64_t AppleBCMWLANBGScanAdapter::configureUnAssociatedScanTime(AppleBCMWLANBGScanAdapter *this, int a2, int a3)
{
  int v16 = a3;
  uint64_t v5 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
  v15[0] = &v16;
  v15[1] = 4;
  uint64_t v6 = AppleBCMWLANCommander::runIOVarSet(v5, (uint64_t)"scan_unassoc_time", (uint64_t)v15, 0, 0);
  uint64_t v7 = v6;
  BOOL v8 = v6 == -469794537 || v6 == 0;
  if (!v8 && *(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog())
  {
    unsigned int v10 = (void *)*((void *)this + 5);
    uint64_t v11 = (CCLogStream *)v10[3];
    if (a2) {
      int v12 = "Configure";
    }
    else {
      int v12 = "UnConfigure";
    }
    int v13 = v16;
    uint64_t v14 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v10 + 112))(*v10, v7);
    CCLogStream::logAlert(v11, "[dk] %s@%d: Failure to %s UnAssociated Scan Time to %u: %s\n", "configureUnAssociatedScanTime", 1112, v12, v13, v14);
  }
  return v7;
}

uint64_t AppleBCMWLANBGScanAdapter::getWCL_BGSCAN_CACHE_RESULT(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = AppleBCMWLANBGScanAdapter::collectBGScanCachedResults(a1, a2);
  if (v3 && *(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:Failed to collect BGScan Cache Result %d\n", "getWCL_BGSCAN_CACHE_RESULT", 599, v3);
  }
  return v3;
}

uint64_t AppleBCMWLANBGScanAdapter::collectBGScanCachedResults(uint64_t a1, unsigned int *a2)
{
  unsigned __int8 v7 = 0;
  if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog())
  {
    uint64_t v5 = *(CCLogStream **)(*(void *)(a1 + 40) + 24);
    unint64_t CurrentContinuousTimeMilliSeconds = getCurrentContinuousTimeMilliSeconds();
    CCLogStream::logAlert(v5, "[dk] %s@%d:Start Collecting Cache Results @ Time %llu\n", "collectBGScanCachedResults", 1123, CurrentContinuousTimeMilliSeconds / 0x3E8);
  }
  uint64_t result = AppleBCMWLANBGScanAdapter::retrieveBGScanCachedInfo(a1, &v7, a2);
  if (!result)
  {
    if (v7) {
      return 0;
    }
    uint64_t result = AppleBCMWLANBGScanAdapter::retrieveBGScanCachedInfo(a1, &v7, a2);
    if (!result)
    {
      uint64_t result = *(void *)(*(void *)(a1 + 40) + 24);
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          CCLogStream::logAlertIf(*(CCLogStream **)(*(void *)(a1 + 40) + 24), 0x80000000uLL, "[dk] %s@%d:bgScanResultsComplete %d\n", "collectBGScanCachedResults", 1131, v7);
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANBGScanAdapter::getMotionProfileState(AppleBCMWLANBGScanAdapter *this)
{
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = AppleBCMWLANConfigManager::getMotionProfileGPIOConfig(*(AppleBCMWLANConfigManager **)(*((void *)this + 5)
                                                                                               + 16));
  if (result)
  {
    v15[0] = &v16;
    v15[1] = 0x1400140014;
    int v16 = 1;
    uint64_t v3 = (*(uint64_t (**)(void))(***((void ***)this + 5) + 88))(**((void **)this + 5));
    if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 136))(v3))
    {
      int v12 = (int *)this;
      uint64_t v13 = (uint64_t)AppleBCMWLANBGScanAdapter::handleGetMotionStateAsyncCallBack;
      uint64_t v14 = 0;
      uint64_t v4 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
      v11[0] = &v16;
      v11[1] = 20;
      int v10 = 1310740;
      if (AppleBCMWLANCommander::sendIOVarGet(v4, (uint64_t)"mpf_state", (uint64_t)v11, (unsigned __int16 *)&v10, (uint64_t)&v12, 0)&& *(void *)(*((void *)this + 5) + 24))
      {
        if (CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d: Failed GET IOCTL, cret[0x%08x]\n");
        }
      }
      return 0;
    }
    uint64_t v5 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
    int v12 = &v16;
    uint64_t v13 = 20;
    uint64_t v6 = AppleBCMWLANCommander::runIOVarGet(v5, (uint64_t)"mpf_state", (uint64_t)&v12, (uint64_t)v15, 0);
    if (v6 == -469794537) {
      return 0;
    }
    uint64_t v7 = v6;
    if (!v6) {
      return (unsigned __int16)v17;
    }
    uint64_t result = *(void *)(*((void *)this + 5) + 24);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        BOOL v8 = (void *)*((void *)this + 5);
        int v9 = (CCLogStream *)v8[3];
        (*(void (**)(void, uint64_t))(*(void *)*v8 + 112))(*v8, v7);
        CCLogStream::logAlert(v9, "[dk] %s@%d:Error: cannot get mpf state : ret %x: %s\n");
        return 0;
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANBGScanAdapter::handleGetMotionStateAsyncCallBack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3)
  {
    uint64_t result = *(void *)(*(void *)(a1 + 40) + 24);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v7 = *(void **)(a1 + 40);
        BOOL v8 = (CCLogStream *)v7[3];
        int v9 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v7 + 112))(*v7, a3);
        return CCLogStream::logAlert(v8, "[dk] %s@%d: Error: cannot get mpf state from the firmware: %s\n", "handleGetMotionStateAsyncCallBack", 863, v9);
      }
    }
  }
  else
  {
    uint64_t v10 = *a4;
    uint64_t result = *(void *)(*(void *)(a1 + 40) + 24);
    if (*a4)
    {
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          unint64_t v11 = *(__int16 *)(v10 + 4);
          if (v11 >= 3)
          {
            if (v11 == 3) {
              int v12 = "Driving";
            }
            else {
              int v12 = "Unknown";
            }
          }
          else
          {
            int v12 = off_100381418[v11];
          }
          return CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:Device is %s\n", "handleGetMotionStateAsyncCallBack", 877, v12);
        }
      }
    }
    else if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result) {
        return CCLogStream::logNotice(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d: no valid data \n", "handleGetMotionStateAsyncCallBack", 868);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANBGScanAdapter::handleSetDynamicScanFreqAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(*(void *)(result + 40) + 24);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = *(void **)(v3 + 40);
        uint64_t v6 = (CCLogStream *)v5[3];
        uint64_t v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 112))(*v5, a3);
        return CCLogStream::logAlert(v6, "[dk] %s@%d: Error: cannot set Dynamic Scan Freq : %s\n", "handleSetDynamicScanFreqAsyncCallBack", 1101, v7);
      }
    }
  }
  return result;
}

uint64_t getCurrentContinuousTimeMilliSeconds(void)
{
  return 0;
}

uint64_t AppleBCMWLANBGScanAdapter::retrieveBGScanCachedInfo(uint64_t a1, unsigned char *a2, unsigned int *a3)
{
  unsigned __int16 v6 = AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 8)) - 14;
  uint64_t v7 = IOMallocZeroData();
  if (!v7) {
    return 12;
  }
  BOOL v8 = (int *)v7;
  unsigned int FirmwareInterfaceVersion = AppleBCMWLANCore::getFirmwareInterfaceVersion(**(AppleBCMWLANCore ***)(a1 + 40));
  uint64_t v10 = 12582912;
  if (FirmwareInterfaceVersion > 0x10) {
    uint64_t v10 = 14680064;
  }
  if (v6) {
    unint64_t v11 = v8;
  }
  else {
    unint64_t v11 = 0;
  }
  unint64_t v12 = v10 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)v6 << 32) | v6;
  if (!v6) {
    unint64_t v12 = 0;
  }
  v18[0] = v11;
  v18[1] = v12;
  uint64_t v13 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 8), (uint64_t)"pfnbest_bssid", (uint64_t)&kNoTxPayload, (uint64_t)v18, 0);
  if (v13)
  {
    if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog())
    {
      uint64_t v14 = *(void **)(a1 + 40);
      unsigned __int8 v15 = (CCLogStream *)v14[3];
      int v16 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v14 + 112))(*v14, v13);
      CCLogStream::logAlert(v15, "[dk] %s@%d: Error: Failed to collect BGScan Results :  Ret %s\n", "retrieveBGScanCachedInfo", 1169, v16);
    }
  }
  else
  {
    *a2 = AppleBCMWLANBGScanAdapter::assembleBGScanCachedResults(a1, v8, v8, a3);
  }
  IOFreeData();
  return v13;
}

uint64_t AppleBCMWLANBGScanAdapter::assembleBGScanCachedResults(uint64_t a1, _DWORD *a2, int *a3, unsigned int *a4)
{
  unsigned int v4 = a2[2];
  if (!v4) {
    return 1;
  }
  if (v4 >= 0x141)
  {
    if (*(void *)(*(void *)(a1 + 40) + 24))
    {
      BOOL v13 = 0;
      if (!CCLogStream::shouldLog()) {
        return v13;
      }
      CCLogStream::logEmergency(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:Too many networks in BGCacheNetwork result %d\n");
    }
    return 0;
  }
  unsigned int v8 = *a4;
  unsigned int v9 = v4 + *a4;
  if (v9 >= 0x141)
  {
    if (*(void *)(*(void *)(a1 + 40) + 24))
    {
      BOOL v13 = 0;
      if (!CCLogStream::shouldLog()) {
        return v13;
      }
      CCLogStream::logEmergency(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:Adding to ScanCache will exceed maxinum networks: previous pData->num_networks %u pRetrievedCachedScanInfo->count %u\n");
    }
    return 0;
  }
  unint64_t v11 = a3 + 3;
  int v10 = *a3;
  *a4 = v9;
  if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
    CCLogStream::logAlertIf(*(CCLogStream **)(*(void *)(a1 + 40) + 24), 0x80000000uLL, "[dk] %s@%d:PFN Version %d Status %d Count %d\n", "assembleBGScanCachedResults", 1219, v10, a2[1], a2[2]);
  }
  unsigned int v12 = a2[1];
  BOOL v13 = v12 != 0;
  if (v12 > 1) {
    return 1;
  }
  if (a2[2])
  {
    unint64_t v14 = 0;
    do
    {
      unsigned int v26 = *v11;
      __int16 v27 = *((_WORD *)v11 + 2);
      if (*a2 == 3)
      {
        unsigned int v15 = *((unsigned __int8 *)v11 + 6);
        uint64_t v16 = *(void *)AppleBCMWLANCore::getBus(**(AppleBCMWLANCore ***)(a1 + 40));
        if ((*(unsigned int (**)(void))(v16 + 368))() >> 1 < 0x88D) {
          unsigned int v17 = 0;
        }
        else {
          unsigned int v17 = *((unsigned __int8 *)v11 + 8);
        }
        int v21 = (v17 >> 1) & 1;
        unsigned int v18 = *((unsigned __int8 *)v11 + 12);
        uint64_t v22 = 16;
      }
      else
      {
        unsigned int v15 = *((unsigned __int8 *)v11 + 6);
        unsigned int v18 = *((unsigned __int8 *)v11 + 7);
        uint64_t v19 = *(void *)AppleBCMWLANCore::getBus(**(AppleBCMWLANCore ***)(a1 + 40));
        if ((*(unsigned int (**)(void))(v19 + 368))() >> 1 < 0x88D) {
          unsigned __int8 v20 = 0;
        }
        else {
          unsigned __int8 v20 = *((unsigned char *)v11 + 8);
        }
        LOBYTE(v21) = v20 >> 1;
        uint64_t v22 = 12;
      }
      unsigned __int16 v23 = *((_WORD *)v11 + 5);
      unint64_t v11 = (_DWORD *)((char *)v11 + v22);
      int v24 = &a4[5 * v8 + 5 * v14];
      v24[1] = v26;
      *((_WORD *)v24 + 4) = v27;
      *((unsigned char *)v24 + 10) = v21 & 1;
      *((unsigned char *)v24 + 11) = 0;
      v24[3] = v23;
      v24[4] = v15;
      v24[5] = v18;
      ++v14;
    }
    while (v14 < a2[2]);
  }
  if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:%u BGScan cached network collected\n", "assembleBGScanCachedResults", 1300, *a4);
  }
  return v13;
}

uint64_t AppleBCMWLANBGScanAdapter::scanBackoffEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  if (a2)
  {
    int v4 = *(_DWORD *)(a2 + 4);
    if (v4 == 167)
    {
      int v5 = 1;
      goto LABEL_9;
    }
    if (v4 == 168)
    {
      int v5 = 2;
LABEL_9:
      LODWORD(v11) = v5;
      if (*(_DWORD *)(a2 + 12) == 1)
      {
        int v7 = 1;
        HIDWORD(v11) = 1;
      }
      else
      {
        int v7 = 0;
      }
      unsigned int v8 = *(AppleBCMWLANCore ***)(a1 + 40);
      if (v8[3])
      {
        int shouldLog = CCLogStream::shouldLog();
        unsigned int v8 = *(AppleBCMWLANCore ***)(a1 + 40);
        if (shouldLog)
        {
          CCLogStream::logNoticeIf(v8[3], 0x80000000uLL, "[dk] %s@%d: Posting received scan backoff event: wle->event_type %u mapped to scangroup %u, wle->reason %u mapped to reason %u\n", "scanBackoffEvent", 1357, *(_DWORD *)(a2 + 4), v5, *(_DWORD *)(a2 + 12), v7);
          unsigned int v8 = *(AppleBCMWLANCore ***)(a1 + 40);
        }
      }
      return AppleBCMWLANCore::postMessageInfra(*v8, 0x5Au, &v10, 0x10uLL);
    }
    uint64_t result = *(void *)(*(void *)(a1 + 40) + 24);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result) {
        return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:Unexpected event %u received with reason %u, ignoring\n");
      }
    }
  }
  else
  {
    uint64_t result = *(void *)(*(void *)(a1 + 40) + 24);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result) {
        return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:Null event parameter, ignoring\n");
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANBGScanAdapter::parsePFNAllGoneExtEvent(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 20) <= 5u && *(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:Event msg length is too short %u", "parsePFNAllGoneExtEvent", 1381, *(_DWORD *)(a2 + 20));
  }
  int v4 = *(AppleBCMWLANCore ***)(a1 + 40);
  if (v4[3])
  {
    int shouldLog = CCLogStream::shouldLog();
    int v4 = *(AppleBCMWLANCore ***)(a1 + 40);
    if (shouldLog)
    {
      CCLogStream::logAlert(v4[3], "[dk] %s@%d:Got WLC_E_PFN_SCAN_ALLGONE_EXT event with flag = %d (0/1 - legacy scan/low power scan)\n", "parsePFNAllGoneExtEvent", 1384, *(_WORD *)(a2 + 52) & 1);
      int v4 = *(AppleBCMWLANCore ***)(a1 + 40);
    }
  }
  uint64_t result = AppleBCMWLANCore::isEnhancedPNOEnabled(*v4);
  if (result)
  {
    int v7 = **(IOService ***)(a1 + 40);
    if (*(_WORD *)(a2 + 52)) {
      int v8 = 3;
    }
    else {
      int v8 = 2;
    }
    return AppleBCMWLANCore::sendePNOEventsCoreAnalytics(v7, v8);
  }
  return result;
}

uint64_t AppleBCMWLANBGScanAdapter::parseBGScanEvent(uint64_t a1, uint64_t a2)
{
  if (AppleBCMWLANCore::isEnhancedPNOEnabled(**(AppleBCMWLANCore ***)(a1 + 40)))
  {
    return AppleBCMWLANBGScanAdapter::retrievePfnScanInfo(a1, a2);
  }
  else if (*(_DWORD *)(a2 + 20) > 3u)
  {
    unsigned int v5 = *(unsigned __int16 *)(a2 + 48);
    uint64_t v6 = 12;
    unint64_t v7 = 56;
    switch(*(_WORD *)(a2 + 48))
    {
      case 1:
        goto LABEL_27;
      case 2:
        goto LABEL_16;
      case 4:
        if (AppleBCMWLANCore::checkForScanCoreSupport(**(AppleBCMWLANCore ***)(a1 + 40))
          && (AppleBCMWLANCore::checkForLPSCDisable(**(AppleBCMWLANCore ***)(a1 + 40)) & 1) == 0
          && *(_DWORD *)(a2 + 20) >= 0x3Cu
          && *(void *)(*(void *)(a1 + 40) + 24)
          && CCLogStream::shouldLog())
        {
          CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:Got WLC_E_PFN_NET_FOUND event with flag = %d (0/1 - legacy scan/low power scan)\n", "parseBGScanEvent", 1423, *(_WORD *)(a2 + 54) & 1);
        }
LABEL_16:
        uint64_t v6 = 16;
        unint64_t v7 = 60;
        goto LABEL_27;
      case 5:
        if (AppleBCMWLANCore::checkForScanCoreSupport(**(AppleBCMWLANCore ***)(a1 + 40))
          && (AppleBCMWLANCore::checkForLPSCDisable(**(AppleBCMWLANCore ***)(a1 + 40)) & 1) == 0
          && *(_DWORD *)(a2 + 20) >= 0x40u
          && *(void *)(*(void *)(a1 + 40) + 24)
          && CCLogStream::shouldLog())
        {
          CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:Got WLC_E_PFN_NET_FOUND event with flag = %d (0/1 - legacy scan/low power scan)\n", "parseBGScanEvent", 1432, *(_WORD *)(a2 + 54) & 1);
        }
        uint64_t v6 = 16;
        unint64_t v7 = 64;
LABEL_27:
        if (v7 <= *(unsigned int *)(a2 + 20))
        {
          memset(&v21[1], 0, 112);
          long long v18 = 0u;
          long long v19 = 0u;
          uint64_t v8 = a2 + 48 + v6;
          char v20 = 0;
          if (v5 > 4)
          {
            uint64_t v13 = *(void *)v8;
            unsigned int v14 = *(unsigned __int8 *)(v8 + 8);
            *(_OWORD *)unsigned int v17 = *(_OWORD *)(v8 + 9);
            *(_OWORD *)&v17[16] = *(_OWORD *)(v8 + 25);
            *(_DWORD *)&v17[31] = *(_DWORD *)(v8 + 40);
            WORD2(v21[6]) = WORD2(*(void *)v8);
            LODWORD(v21[6]) = v13;
            HIDWORD(v21[1]) = v14;
            if (v14 >= 0x21)
            {
              if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
                CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:Invalid SSID length %u, truncated it to maximum legal length\n", "parseBGScanEvent", 1476, v14);
              }
              HIDWORD(v21[1]) = 32;
            }
            long long v11 = *(_OWORD *)&v17[3];
            long long v12 = *(_OWORD *)&v17[19];
          }
          else
          {
            int v9 = *(_DWORD *)v8;
            WORD2(v21[6]) = *(_WORD *)(v8 + 4);
            unsigned int v10 = *(unsigned __int8 *)(v8 + 7);
            LODWORD(v21[6]) = v9;
            HIDWORD(v21[1]) = v10;
            if (v10 >= 0x21)
            {
              if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
                CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:Invalid SSID length %u, truncated it to maximum legal length\n", "parseBGScanEvent", 1460, v10);
              }
              HIDWORD(v21[1]) = 32;
            }
            long long v11 = *(_OWORD *)(v8 + 8);
            long long v12 = *(_OWORD *)(v8 + 24);
          }
          *(_OWORD *)&v21[2] = v11;
          *(_OWORD *)&v21[4] = v12;
          long long v18 = v11;
          long long v19 = v12;
          unsigned int v15 = *(AppleBCMWLANCore ***)(a1 + 40);
          if (v15[3])
          {
            int shouldLog = CCLogStream::shouldLog();
            unsigned int v15 = *(AppleBCMWLANCore ***)(a1 + 40);
            if (shouldLog)
            {
              CCLogStream::logAlert(v15[3], "[dk] %s@%d: FOUND PNO network with SSID: %s \n", "parseBGScanEvent", 1484, (const char *)&v18);
              unsigned int v15 = *(AppleBCMWLANCore ***)(a1 + 40);
            }
          }
          BYTE6(v21[6]) = 1;
          v21[0] = 0x100000002;
          uint64_t result = AppleBCMWLANCore::postMessageInfra(*v15, 0x1Fu, v21, 0x40uLL);
        }
        else
        {
          uint64_t result = *(void *)(*(void *)(a1 + 40) + 24);
          if (result)
          {
            uint64_t result = CCLogStream::shouldLog();
            if (result) {
              uint64_t result = CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:Invalid BG scan event msg length %u");
            }
          }
        }
        break;
      default:
        uint64_t result = *(void *)(*(void *)(a1 + 40) + 24);
        if (result)
        {
          uint64_t result = CCLogStream::shouldLog();
          if (result) {
            uint64_t result = CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:Invalid PFN Scan Result Version %u\n");
          }
        }
        break;
    }
  }
  else
  {
    uint64_t result = *(void *)(*(void *)(a1 + 40) + 24);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result) {
        return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:Event msg length is too short %u");
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANBGScanAdapter::retrievePfnScanInfo(uint64_t a1, uint64_t a2)
{
  char v37 = -86;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __dst[0] = v4;
  __dst[1] = v4;
  if (*(_DWORD *)(a2 + 20) <= 3u)
  {
    if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:Check1:Event msg length is too short %u");
    }
    return 0;
  }
  uint64_t v5 = *(unsigned __int16 *)(a2 + 48);
  if (v5 != 1)
  {
    if (v5 != 2)
    {
      if (v5 == 5)
      {
        if (!AppleBCMWLANCore::checkForScanCoreSupport(**(AppleBCMWLANCore ***)(a1 + 40))
          || (AppleBCMWLANCore::checkForLPSCDisable(**(AppleBCMWLANCore ***)(a1 + 40)) & 1) != 0
          || *(_DWORD *)(a2 + 20) < 0x40u)
        {
          goto LABEL_26;
        }
        if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:Got WLC_E_PFN_NET_FOUND event with flag = %d (0/1 - legacy scan/low power scan)\n", "retrievePfnScanInfo", 1552, *(_WORD *)(a2 + 54) & 1);
        }
      }
      else
      {
        if (v5 != 4)
        {
          if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:Invalid PFN Scan Result Version %u\n");
          }
          return 0;
        }
        if (!AppleBCMWLANCore::checkForScanCoreSupport(**(AppleBCMWLANCore ***)(a1 + 40))
          || (AppleBCMWLANCore::checkForLPSCDisable(**(AppleBCMWLANCore ***)(a1 + 40)) & 1) != 0
          || *(_DWORD *)(a2 + 20) < 0x3Cu)
        {
          goto LABEL_26;
        }
        if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:Got WLC_E_PFN_NET_FOUND event with flag = %d (0/1 - legacy scan/low power scan)\n", "retrievePfnScanInfo", 1539, *(_WORD *)(a2 + 54) & 1);
        }
      }
      AppleBCMWLANCore::sendePNOEventsCoreAnalytics(**(IOService ***)(a1 + 40), (*(_WORD *)(a2 + 54) & 1) != 0);
    }
LABEL_26:
    unsigned int v6 = 16;
    goto LABEL_27;
  }
  unsigned int v6 = 12;
LABEL_27:
  unint64_t v7 = *(unsigned int *)(a2 + 20);
  if (v7 < v6)
  {
    if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:check2:Invalid event msg length %u");
    }
    return 0;
  }
  uint64_t v8 = *(unsigned int *)(a2 + 56);
  if (v8)
  {
    uint64_t v9 = 48 * v8;
    if ((v5 - 1) <= 3) {
      uint64_t v9 = 44 * v8;
    }
    uint64_t v10 = 44 * v8;
    if (v5 != 1) {
      uint64_t v10 = v9;
    }
    if (v10 + (unint64_t)v6 > v7)
    {
      if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:check3:Invalid event msg length %u, version %u, number of records %u\n");
      }
      return 0;
    }
    unsigned __int16 v12 = 0;
    int v46 = 0;
    long long v45 = 0u;
    long long v44 = 0u;
    uint64_t v13 = a2 + 48 + v6;
    long long v43 = 0u;
    long long v42 = 0u;
    long long v41 = 0u;
    long long v40 = 0u;
    long long v39 = 0u;
    int v38 = v5;
    while (1)
    {
      while (1)
      {
        if (v5 > 4)
        {
          uint64_t v21 = v5;
          uint64_t v22 = *(void *)v13;
          unsigned int v18 = *(unsigned __int8 *)(v13 + 8);
          *(_DWORD *)&v35[31] = *(_DWORD *)(v13 + 40);
          *(_OWORD *)char v35 = *(_OWORD *)(v13 + 9);
          *(_OWORD *)&v35[16] = *(_OWORD *)(v13 + 25);
          __int16 v23 = *(_WORD *)(v13 + 44);
          int v24 = *(unsigned __int16 *)(v13 + 46);
          unsigned int v14 = v12;
          unint64_t v25 = &v38 + 14 * v12;
          unsigned int v26 = v25 + 2;
          *((_WORD *)v25 + 26) = WORD2(*(void *)v13);
          v25[12] = v22;
          v25[3] = v18;
          if (v18 >= 0x21)
          {
            if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
              CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:Invalid SSID length %u, truncated it to maximum legal length\n", "retrievePfnScanInfo", 1652, v26[1]);
            }
            unsigned int v18 = 32;
            v26[1] = 32;
          }
          *(_OWORD *)(v26 + 2) = *(_OWORD *)&v35[3];
          *(_OWORD *)(v26 + 6) = *(_OWORD *)&v35[19];
          __int16 v27 = &v38 + 14 * v12;
          *((_WORD *)v27 + 28) = v23;
          v27[15] = v24;
          v13 += 48;
          uint64_t v5 = v21;
        }
        else
        {
          unsigned int v14 = v12;
          unsigned int v15 = &v38 + 14 * v12;
          uint64_t v16 = v15 + 2;
          int v17 = *(_DWORD *)v13;
          *((_WORD *)v15 + 26) = *(_WORD *)(v13 + 4);
          v15[12] = v17;
          unsigned int v18 = *(unsigned __int8 *)(v13 + 7);
          v15[3] = v18;
          if (v18 >= 0x21)
          {
            if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
              CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:Invalid SSID length %u, truncated it to maximum legal length\n", "retrievePfnScanInfo", 1626, v16[1]);
            }
            unsigned int v18 = 32;
            v16[1] = 32;
          }
          *(_OWORD *)(v16 + 6) = 0u;
          *(_OWORD *)(v16 + 2) = 0u;
          long long v19 = *(_OWORD *)(v13 + 8);
          *(_OWORD *)(v16 + 6) = *(_OWORD *)(v13 + 24);
          *(_OWORD *)(v16 + 2) = v19;
          char v20 = &v38 + 14 * v12;
          *((_WORD *)v20 + 28) = *(_WORD *)(v13 + 40);
          v20[15] = *(unsigned __int16 *)(v13 + 42);
          v13 += 44;
        }
        --*(_DWORD *)(a2 + 56);
        unint64_t v28 = &v38 + 14 * v14;
        *((unsigned char *)v28 + 54) |= 1u;
        if (v18 >= 0x20) {
          size_t v29 = 32;
        }
        else {
          size_t v29 = v18;
        }
        memcpy(__dst, v28 + 4, v29);
        *((unsigned char *)__dst + v18) = 0;
        uint64_t v30 = *(void *)(a1 + 40);
        if (*(void *)(v30 + 24))
        {
          int shouldLog = CCLogStream::shouldLog();
          uint64_t v30 = *(void *)(a1 + 40);
          if (shouldLog)
          {
            CCLogStream::logAlert(*(CCLogStream **)(v30 + 24), "[dk] %s@%d: FOUND PNO network SSID:", "retrievePfnScanInfo", 1675);
            uint64_t v30 = *(void *)(a1 + 40);
          }
        }
        if (*(void *)(v30 + 24) && CCLogStream::shouldLog())
        {
          int v34 = (unsigned __int8 *)(&v38 + 14 * v14);
          CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:%s  BSSID: %02x %02x %02x %02x %02x %02x \n", "retrievePfnScanInfo", 1679, (const char *)__dst, v34[48], v34[49], v34[50], v34[51], v34[52], v34[53]);
        }
        LODWORD(v39) = ++v12;
        if (v12 < 2u) {
          break;
        }
        uint64_t v32 = **(AppleBCMWLANCore ***)(a1 + 40);
        unint64_t v33 = 56 * v12 + 8;
LABEL_71:
        AppleBCMWLANCore::postMessageInfra(v32, 0x1Fu, &v38, v33);
        unsigned __int16 v12 = 0;
        if (!*(_DWORD *)(a2 + 56)) {
          return 0;
        }
      }
      if (!*(_DWORD *)(a2 + 56))
      {
        uint64_t v32 = **(AppleBCMWLANCore ***)(a1 + 40);
        unint64_t v33 = 64;
        goto LABEL_71;
      }
    }
  }
  if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:no BG scan records found\n");
  }
  return 0;
}

BOOL AppleBCMWLANBGScanAdapter::isBGScanCacheRollOverEnabled(AppleBCMWLANBGScanAdapter *this)
{
  return *(unsigned char *)(*((void *)this + 5) + 4846) != 0;
}

BOOL AppleBCMWLANBGScanAdapter::isBGScanConfigured(AppleBCMWLANBGScanAdapter *this)
{
  return *(unsigned char *)(*((void *)this + 5) + 36) != 0;
}

uint64_t _parseMacAddress(ether_addr *a1, char *a2)
{
  if (a1)
  {
    unint64_t v2 = 0;
    for (uint64_t i = a2 + 2; ; i += 3)
    {
      int v4 = *(i - 2);
      if (!*(i - 2)) {
        return 0xFFFFFFFFLL;
      }
      int v5 = *(i - 1);
      if (!*(i - 1)) {
        return 4294967294;
      }
      char v6 = v4 <= 64 ? 64 : 9;
      char v7 = v4 + v6;
      char v8 = v5 <= 64 ? -48 : -55;
      if (v5 > 96) {
        char v8 = -87;
      }
      a1->octet[v2] = v5 + v8 + 16 * v7;
      if (v2 <= 4 && *i != 58 && *i) {
        break;
      }
      if (++v2 == 6) {
        return 0;
      }
    }
    return 4294967293;
  }
  else
  {
    IOLog("%s::%s[%u] Error: Assert failure\n", "/AppleInternal/Library/BuildRoots/9f16a0bb-a2ea-11ef-bacb-1e361567c031/Applications/Xcode.app/Contents/Developer/Platforms/DriverKit.platform/Developer/SDKs/DriverKit.iPhoneOS24.2.Internal.sdk/System/DriverKit/System/Library/PrivateFrameworks/IO80211DriverKit.framework/PrivateHeaders/IO80211Util.h", "_parseMacAddress", 921);
    return 0;
  }
}

uint64_t AppleBCMWLANBGScanAdapter::scanPrivacyMACTimer(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 40);
  if (*(void *)(v2 + 4912) == a2)
  {
    uint64_t v3 = result;
    if (*(void *)(v2 + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logNotice(*(CCLogStream **)(*(void *)(v3 + 40) + 24), "[dk] %s@%d:Scan Privacy MAC Timer Timed out. Configure New Privacy MAC Address \n", "scanPrivacyMACTimer", 1794);
    }
    uint64_t result = (uint64_t)AppleBCMWLANBGScanAdapter::generateAndApplyNewPrivateMACForScans((AppleBCMWLANCore ***)v3);
    if (result)
    {
      uint64_t result = *(void *)(*(void *)(v3 + 40) + 24);
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result) {
          return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(v3 + 40) + 24), "[dk] %s@%d:Failed to configure Private MAC Address for Scans\n", "scanPrivacyMACTimer", 1800);
        }
      }
    }
  }
  return result;
}

AppleBCMWLANCore *AppleBCMWLANBGScanAdapter::generateAndApplyNewPrivateMACForScans(AppleBCMWLANCore ***this)
{
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  if (!AppleBCMWLANCore::isPrivateMacEnabled(*this[5])) {
    return 0;
  }
  LOBYTE(v22) = 0;
  int v21 = 0x80000;
  if ((*(unsigned int (**)(AppleBCMWLANCore *))(*(void *)this[5][606] + 136))(this[5][606]))
  {
    unsigned int v18 = (int *)this;
    uint64_t v19 = (uint64_t)AppleBCMWLANBGScanAdapter::handleGetScanMacStateAsyncCallBack;
    uint64_t v20 = 0;
    uint64_t v2 = this[5][1];
    uint64_t v16 = &v21;
    uint64_t v17 = 12;
    int v15 = 786436;
    uint64_t v3 = AppleBCMWLANCommander::sendIOVarGet(v2, (uint64_t)"scanmac", (uint64_t)&v16, (unsigned __int16 *)&v15, (uint64_t)&v18, 0);
    if (v3)
    {
      uint64_t v4 = v3;
      if (this[5][3])
      {
        if (CCLogStream::shouldLog())
        {
          unsigned __int16 v12 = this[5];
          uint64_t v13 = v12[3];
          unsigned int v14 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)*v12 + 112))(*v12, v4);
          CCLogStream::logAlert(v13, "[dk] %s@%d: Failed GET IOCTL, cret %s\n", "generateAndApplyNewPrivateMACForScans", 1879, v14);
        }
      }
    }
    return 0;
  }
  unsigned int v18 = &v21;
  uint64_t v19 = 0xC0004000CLL;
  char v7 = this[5][1];
  uint64_t v16 = &v21;
  uint64_t v17 = 12;
  uint64_t v8 = AppleBCMWLANCommander::runIOVarGet(v7, (uint64_t)"scanmac", (uint64_t)&v16, (uint64_t)&v18, 0);
  if (v8)
  {
    int v5 = (AppleBCMWLANCore *)v8;
    if (this[5][3] && CCLogStream::shouldLog())
    {
      uint64_t v9 = this[5];
      uint64_t v10 = v9[3];
      long long v11 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, AppleBCMWLANCore *))(*(void *)*v9 + 112))(*v9, v5);
      CCLogStream::logNoticeIf(v10, 0x80000000uLL, "[dk] %s@%d:Cannot get ScanMac State: ret %s\n", "generateAndApplyNewPrivateMACForScans", 1889, v11);
    }
  }
  else
  {
    if (!(_BYTE)v22)
    {
      if (this[5][3] && CCLogStream::shouldLog()) {
        CCLogStream::logNotice(this[5][3], "[dk] %s@%d:Private MAC Not enabled in FW\n", "generateAndApplyNewPrivateMACForScans", 1904);
      }
      return 0;
    }
    int v5 = AppleBCMWLANBGScanAdapter::configurePrivateMACForScans(this, 2);
    if (v5 && this[5][3] && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(this[5][3], "[dk] %s@%d:Failed to Configure New Private MAC Address for Scans\n", "generateAndApplyNewPrivateMACForScans", 1899);
    }
  }
  return v5;
}

uint64_t AppleBCMWLANBGScanAdapter::enablePrivateMACForScans(AppleBCMWLANBGScanAdapter *this)
{
  *(unsigned char *)(*((void *)this + 5) + 4856) = 1;
  if (AppleBCMWLANBGScanAdapter::configurePrivateMACForScans((AppleBCMWLANCore ***)this, 0)
    && *(void *)(*((void *)this + 5) + 24)
    && CCLogStream::shouldLog())
  {
    CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:Failed to configure Private MAC Address for Scans \n", "enablePrivateMACForScans", 1818);
  }
  return 0;
}

AppleBCMWLANCore *AppleBCMWLANBGScanAdapter::configurePrivateMACForScans(AppleBCMWLANCore ***this, int a2)
{
  *(void *)unsigned __int16 v12 = 0;
  uint64_t result = (AppleBCMWLANCore *)AppleBCMWLANCore::isPrivateMacEnabled(*this[5]);
  if (result)
  {
    uint64_t result = 0;
    switch(a2)
    {
      case 0:
      case 4:
        goto LABEL_19;
      case 1:
        uint64_t result = this[5][3];
        if (result)
        {
          uint64_t result = (AppleBCMWLANCore *)CCLogStream::shouldLog();
          if (result)
          {
            CCLogStream::logAlert(this[5][3], "[dk] %s@%d:WL_SCANMAC_SUBCMD_BSSCFG is not used now\n", "configurePrivateMACForScans", 2016);
            uint64_t result = 0;
          }
        }
        break;
      case 2:
        int v5 = this[5];
        if (*((_DWORD *)v5 + 1219) | *((unsigned __int16 *)v5 + 2440))
        {
          *(_DWORD *)&v12[6] = *((_DWORD *)v5 + 1219);
          __int16 v13 = *((_WORD *)v5 + 2440);
          char v6 = v12[6] & 0xFC;
        }
        else
        {
          __int16 v13 = -1;
          *(_DWORD *)&v12[6] = -1;
          char v6 = -4;
        }
        v12[6] = v6;
        if (*((_DWORD *)v5 + 1216) | *((unsigned __int16 *)v5 + 2434))
        {
          *(_DWORD *)unsigned __int16 v12 = *((_DWORD *)v5 + 1216);
          *(_WORD *)&v12[4] = *((_WORD *)v5 + 2434);
        }
        else
        {
          read_random();
          int v5 = this[5];
        }
        v12[0] = v12[0] & 0xFC | 2;
        if (v5[3])
        {
          int shouldLog = CCLogStream::shouldLog();
          int v5 = this[5];
          if (shouldLog)
          {
            CCLogStream::logAlertIf(v5[3], 0x40000000000uLL, "[dk] %s@%d:PRIVATE MAC %02x:%02x:%02x:%02x:%02x:%02x\n", "configurePrivateMACForScans", 1998, v12[0], v12[1], v12[2], v12[3], v12[4], v12[5]);
            int v5 = this[5];
          }
        }
        if (v5[3])
        {
          int v8 = CCLogStream::shouldLog();
          int v5 = this[5];
          if (v8)
          {
            CCLogStream::logAlertIf(v5[3], 0x40000000000uLL, "[dk] %s@%d:scan mac random mask %02x:%02x:%02x:%02x:%02x:%02x\n", "configurePrivateMACForScans", 2001, v12[6], v12[7], v12[8], v12[9], v13, HIBYTE(v13));
            int v5 = this[5];
          }
        }
        *(_DWORD *)((char *)v5 + 4870) = *(_DWORD *)v12;
        *((_WORD *)v5 + 2437) = *(_WORD *)&v12[4];
        uint64_t v9 = this[5];
        *((_DWORD *)v9 + 1222) = *(_DWORD *)((char *)v9 + 4894);
        *((_WORD *)v9 + 2446) = *((_WORD *)v9 + 2449);
        uint64_t v10 = this[5];
        *(_DWORD *)((char *)v10 + 4894) = *(_DWORD *)v12;
        *((_WORD *)v10 + 2449) = *(_WORD *)&v12[4];
        long long v11 = this[5];
        *(_DWORD *)((char *)v11 + 4882) = *(_DWORD *)&v12[6];
        *((_WORD *)v11 + 2443) = v13;
LABEL_19:
        uint64_t result = (AppleBCMWLANCore *)AppleBCMWLANCommander::sendIOVarSet(this[5][1], (uint64_t)"scanmac");
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t AppleBCMWLANBGScanAdapter::disablePrivateMACForScans(AppleBCMWLANBGScanAdapter *this)
{
  *(unsigned char *)(*((void *)this + 5) + 4856) = 0;
  if (AppleBCMWLANBGScanAdapter::configurePrivateMACForScans((AppleBCMWLANCore ***)this, 4)
    && *(void *)(*((void *)this + 5) + 24)
    && CCLogStream::shouldLog())
  {
    CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:Failed to configure Private MAC Address for Scans \n", "disablePrivateMACForScans", 1837);
  }
  return 0;
}

uint64_t AppleBCMWLANBGScanAdapter::handleGetScanMacStateAsyncCallBack(AppleBCMWLANBGScanAdapter *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t result = *(void *)(*((void *)this + 5) + 24);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        char v7 = (void *)*((void *)this + 5);
        int v8 = (CCLogStream *)v7[3];
        (*(void (**)(void, uint64_t))(*(void *)*v7 + 112))(*v7, a3);
        return CCLogStream::logAlert(v8, "[dk] %s@%d: Error: cannot get ScanMac Statefrom the firmware: %s\n");
      }
    }
  }
  else if (*(void *)a4)
  {
    if (*(unsigned char *)(*(void *)a4 + 4))
    {
      uint64_t result = (uint64_t)AppleBCMWLANBGScanAdapter::configurePrivateMACForScans((AppleBCMWLANCore ***)this, 2);
      if (result)
      {
        uint64_t result = *(void *)(*((void *)this + 5) + 24);
        if (result)
        {
          uint64_t result = CCLogStream::shouldLog();
          if (result) {
            return CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:Failed to Configure New Private MAC Address for Scans\n");
          }
        }
      }
    }
    else
    {
      uint64_t result = *(void *)(*((void *)this + 5) + 24);
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result) {
          return CCLogStream::logNoticeIf(*(CCLogStream **)(*((void *)this + 5) + 24), 0x80000000uLL, "[dk] %s@%d:Private MAC Not enabled in FW\n", "handleGetScanMacStateAsyncCallBack", 2072);
        }
      }
    }
  }
  else
  {
    uint64_t result = *(void *)(*((void *)this + 5) + 24);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result) {
        return CCLogStream::logNotice(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d: no valid data \n", "handleGetScanMacStateAsyncCallBack", 2052);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANBGScanAdapter::handleSetPrivateMACForScansAsyncCallBack(AppleBCMWLANBGScanAdapter *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *((void *)this + 5);
  if (a3)
  {
    if (*(void *)(v4 + 24) && CCLogStream::shouldLog())
    {
      char v6 = (void *)*((void *)this + 5);
      char v7 = (CCLogStream *)v6[3];
      int v8 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v6 + 112))(*v6, a3);
      CCLogStream::logAlert(v7, "[dk] %s@%d: Error: cannot Configure Private Mac Address : %s\n", "handleSetPrivateMACForScansAsyncCallBack", 2085, v8);
    }
  }
  else
  {
    uint64_t result = AppleBCMWLANCore::isAssociated(*(AppleBCMWLANCore **)v4);
    if (result) {
      return result;
    }
  }
  return AppleBCMWLANBGScanAdapter::resetScanPrivacyMacTimer(this);
}

uint64_t AppleBCMWLANBGScanAdapter::isPrivateMacEnabled(AppleBCMWLANCore ***this)
{
  uint64_t result = AppleBCMWLANCore::isPrivateMacEnabled(*this[5]);
  if (result) {
    return *((unsigned char *)this[5] + 4856) != 0;
  }
  return result;
}

uint64_t AppleBCMWLANBGScanAdapter::resetScanPrivacyMacTimer(AppleBCMWLANBGScanAdapter *this)
{
  uint64_t result = *(void *)(*((void *)this + 5) + 4912);
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 136))(result);
    uint64_t v3 = *(uint64_t (**)(void))(**(void **)(*((void *)this + 5) + 4912) + 120);
    return v3();
  }
  return result;
}

uint64_t AppleBCMWLANBGScanAdapter::cancelScanPrivacyMacTimer(AppleBCMWLANBGScanAdapter *this)
{
  uint64_t result = *(void *)(*((void *)this + 5) + 4912);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 136))();
  }
  return result;
}

uint64_t AppleBCMWLANBGScanAdapter::copyCurrentToOnSleepPrivateMac(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 40);
  *(_DWORD *)(v1 + 4900) = *(_DWORD *)(v1 + 4894);
  *(_WORD *)(v1 + 4904) = *(_WORD *)(v1 + 4898);
  return this;
}

uint64_t AppleBCMWLANBGScanAdapter::configureBGScanPrivateMac(uint64_t this, unsigned __int8 *a2)
{
  for (uint64_t i = 0; i != 6; ++i)
    *(unsigned char *)(*(void *)(this + 40) + i + 4864) = a2[i];
  *(unsigned char *)(*(void *)(this + 40) + 4864) |= 2u;
  *(unsigned char *)(*(void *)(this + 40) + 4864) &= ~1u;
  return this;
}

uint64_t AppleBCMWLANBGScanAdapter::configureBGScanMacRandomMask(uint64_t this, unsigned __int8 *a2)
{
  for (uint64_t i = 0; i != 6; ++i)
    *(unsigned char *)(*(void *)(this + 40) + i + 4876) = a2[i];
  *(unsigned char *)(*(void *)(this + 40) + 4876) &= 0xFCu;
  return this;
}

uint64_t AppleBCMWLANBGScanAdapter::configureBGScanPrivateMacTimeout(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 40) + 4860) = 1000 * a2;
  return this;
}

uint64_t AppleBCMWLANBGScanAdapter::getBGScanMacRandomMask(uint64_t this, unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(this + 40);
  int v3 = *(_DWORD *)(v2 + 4882);
  *((_WORD *)a2 + 2) = *(_WORD *)(v2 + 4886);
  *(_DWORD *)a2 = v3;
  return this;
}

uint64_t AppleBCMWLANBGScanAdapter::getBGScanPrivateMac(uint64_t this, unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(this + 40);
  int v3 = *(_DWORD *)(v2 + 4870);
  *((_WORD *)a2 + 2) = *(_WORD *)(v2 + 4874);
  *(_DWORD *)a2 = v3;
  return this;
}

uint64_t AppleBCMWLANBGScanAdapter::getPrevAndCurrentBGScanPrivateMac(uint64_t this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = *(void *)(this + 40);
  int v4 = *(_DWORD *)(v3 + 4894);
  *((_WORD *)a2 + 2) = *(_WORD *)(v3 + 4898);
  *(_DWORD *)a2 = v4;
  uint64_t v5 = *(void *)(this + 40);
  int v6 = *(_DWORD *)(v5 + 4900);
  *((_WORD *)a3 + 2) = *(_WORD *)(v5 + 4904);
  *(_DWORD *)a3 = v6;
  return this;
}

uint64_t AppleBCMWLANBGScanAdapter::getPrivateMacTimeout(AppleBCMWLANBGScanAdapter *this)
{
  return *(unsigned int *)(*((void *)this + 5) + 4860);
}

void _GLOBAL__sub_I_AppleBCMWLANBGScanAdapter_cpp()
{
  kNullRange = 0;
}

AppleBCMWLANNetAdapter *AppleBCMWLANNetAdapter::withDriver(AppleBCMWLANNetAdapter *this, AppleBCMWLANCore *a2)
{
  uint64_t v5 = (AppleBCMWLANNetAdapter *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANNetAdapterMetaClass, (OSObject **)&v5)) {
    return 0;
  }
  uint64_t v3 = v5;
  if (v5 && (AppleBCMWLANNetAdapter::initWithDriver(v5, this) & 1) == 0)
  {
    (*(void (**)(AppleBCMWLANNetAdapter *))(*(void *)v3 + 16))(v3);
    return 0;
  }
  return v3;
}

uint64_t AppleBCMWLANNetAdapter::initWithDriver(AppleBCMWLANNetAdapter *this, AppleBCMWLANCore *a2)
{
  int v4 = (void *)IOMallocZeroTyped();
  *((void *)this + 5) = v4;
  if (!v4)
  {
    IOLog("Failed to allocate AppleBCMWLANNetAdapter_IVars\n", 0, AppleBCMWLANNetAdapter::collectImmediateFaultDataCallback, 0, 0, AppleBCMWLANNetAdapter::induceFaultCallback);
    return 0;
  }
  void *v4 = a2;
  uint64_t v5 = (AppleBCMWLANCore *)**((void **)this + 5);
  if (!v5)
  {
    IOLog("AppleBCMWLANNetAdapter driver is null\n", 0, AppleBCMWLANNetAdapter::collectImmediateFaultDataCallback, 0, 0, AppleBCMWLANNetAdapter::induceFaultCallback);
    return 0;
  }
  *(void *)(*((void *)this + 5) + 8) = AppleBCMWLANCore::getCommander(v5);
  uint64_t v6 = *((void *)this + 5);
  if (!*(void *)(v6 + 8))
  {
    IOLog("AppleBCMWLANNetAdapter commander is null\n", 0, AppleBCMWLANNetAdapter::collectImmediateFaultDataCallback, 0, 0, AppleBCMWLANNetAdapter::induceFaultCallback);
    return 0;
  }
  *(void *)(*((void *)this + 5) + 16) = AppleBCMWLANCore::getConfigManager(*(AppleBCMWLANCore **)v6);
  uint64_t v7 = *((void *)this + 5);
  if (!*(void *)(v7 + 16))
  {
    IOLog("AppleBCMWLANNetAdapter configManager is null\n", 0, AppleBCMWLANNetAdapter::collectImmediateFaultDataCallback, 0, 0, AppleBCMWLANNetAdapter::induceFaultCallback);
    return 0;
  }
  *(void *)(*((void *)this + 5) + 24) = AppleBCMWLANCore::getBssManager(*(AppleBCMWLANCore **)v7);
  if (!*(void *)(*((void *)this + 5) + 24))
  {
    IOLog("AppleBCMWLANNetAdapter fBssManager is null\n", 0, AppleBCMWLANNetAdapter::collectImmediateFaultDataCallback, 0, 0, AppleBCMWLANNetAdapter::induceFaultCallback);
    return 0;
  }
  *(void *)(*((void *)this + 5) + 32) = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  uint64_t v8 = *(void *)(*((void *)this + 5) + 32);
  if (!v8)
  {
    IOLog("AppleBCMWLANNetAdapter Failed to init fLogger\n", 0, AppleBCMWLANNetAdapter::collectImmediateFaultDataCallback, 0, 0, AppleBCMWLANNetAdapter::induceFaultCallback);
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  if (!OSObject::init((OSObject *)this))
  {
    IOLog("AppleBCMWLANNetAdapter super init failied\n", 0, AppleBCMWLANNetAdapter::collectImmediateFaultDataCallback, 0, 0, AppleBCMWLANNetAdapter::induceFaultCallback);
    return 0;
  }
  *(void *)(*((void *)this + 5) + 40) = AppleBCMWLANCore::getFaultReporter(**((AppleBCMWLANCore ***)this + 5));
  (*(void (**)(void))(**(void **)(*((void *)this + 5) + 40) + 8))(*(void *)(*((void *)this + 5)
                                                                                                 + 40));
  getClassNameHelper((OSObject *)this);
  CCFaultReporter::registerCallbacks();
  *(_DWORD *)(*((void *)this + 5) + 48) = 10;
  uint64_t result = 1;
  *(unsigned char *)(*((void *)this + 5) + 66) = 1;
  return result;
}

uint64_t AppleBCMWLANNetAdapter::collectImmediateFaultDataCallback(AppleBCMWLANCore ***this, CCFaultReport *a2)
{
  int v4 = (char *)IOMallocZeroData();
  if (v4)
  {
    uint64_t v5 = v4;
    AppleBCMWLANNetAdapter::dumpStats(this, v4, 0, 4095);
    OSStringPtr v6 = OSString::withCString("NetManagerState.txt");
    OSStringPtr v7 = OSString::withCString(v5);
    (*(void (**)(CCFaultReport *, OSStringPtr, OSStringPtr))(*(void *)a2 + 192))(a2, v6, v7);
    IOFreeData();
  }
  return 0;
}

uint64_t AppleBCMWLANNetAdapter::induceFaultCallback(AppleBCMWLANNetAdapter *this, int a2, const char *a3)
{
  if (a2 == -528348669)
  {
    uint64_t result = AppleBCMWLANCommander::runIOCtlSet(*(AppleBCMWLANCommander **)(*((void *)this + 5) + 8), 3, (uint64_t)&kNoTxPayload, 0, 0);
    if (!result)
    {
      OSStringPtr v6 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
      return AppleBCMWLANCommander::runIOCtlSet(v6, 2, (uint64_t)&kNoTxPayload, 0, 0);
    }
  }
  else if (a2 == -528348670)
  {
    int v8 = 0;
    int v4 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
    v7[0] = &v8;
    v7[1] = 4;
    return AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"phy_forcecal", (uint64_t)v7, 0, 0);
  }
  else
  {
    return 0;
  }
  return result;
}

void AppleBCMWLANNetAdapter::free(AppleBCMWLANNetAdapter *this)
{
  if (*((void *)this + 5))
  {
    AppleBCMWLANNetAdapter::freeResources(this);
    uint64_t v2 = (void *)*((void *)this + 5);
    if (v2)
    {
      IOFree(v2, 0x48uLL);
      *((void *)this + 5) = 0;
    }
  }
  OSObject::free((OSObject *)this);
}

uint64_t AppleBCMWLANNetAdapter::freeResources(AppleBCMWLANNetAdapter *this)
{
  uint64_t v2 = *((void *)this + 5);
  uint64_t v3 = *(void *)(v2 + 32);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    *(void *)(*((void *)this + 5) + 32) = 0;
    uint64_t v2 = *((void *)this + 5);
  }
  uint64_t result = *(void *)(v2 + 40);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    *(void *)(*((void *)this + 5) + 40) = 0;
  }
  return result;
}

void non-virtual thunk to'AppleBCMWLANNetAdapter::free(AppleBCMWLANNetAdapter *this)
{
}

BOOL (__cdecl *AppleBCMWLANNetAdapter::stop(OSObject *this))(OSObject *__hidden this)
{
  uint64_t result = this[1].init;
  if (result) {
    return (BOOL (__cdecl *)(OSObject *__hidden))CCFaultReporter::unregisterCallbacks((CCFaultReporter *)result, this);
  }
  return result;
}

uint64_t AppleBCMWLANNetAdapter::configureRetryLimit(AppleBCMWLANNetAdapter *this, int a2)
{
  int v12 = a2;
  v11[0] = this;
  v11[1] = AppleBCMWLANNetAdapter::setRetryLimitAsyncCallback;
  void v11[2] = 0;
  uint64_t v3 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
  v10[0] = &v12;
  v10[1] = 4;
  uint64_t v4 = AppleBCMWLANCommander::sendIOCtlSet(v3, 34, (uint64_t)v10, kNoRxExpected, (uint64_t)v11, 0);
  if (v4 && *(void *)(*((void *)this + 5) + 32) && CCLogStream::shouldLog())
  {
    OSStringPtr v6 = (void *)*((void *)this + 5);
    OSStringPtr v7 = (CCLogStream *)v6[4];
    int v8 = v12;
    uint64_t v9 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v6 + 112))(*v6, v4);
    CCLogStream::logAlert(v7, "[dk] %s@%d: Error: cannot set long retry count: ret %x: %s\n", "configureRetryLimit", 206, v8, v9);
  }
  return v4;
}

uint64_t AppleBCMWLANNetAdapter::setRetryLimitAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(*(void *)(result + 40) + 32);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = *(void **)(v3 + 40);
        OSStringPtr v6 = (CCLogStream *)v5[4];
        OSStringPtr v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 112))(*v5, a3);
        return CCLogStream::logCrit(v6, "[dk] %s@%d: setting Long Retry Limit failure, error %s\n", "setRetryLimitAsyncCallback", 2114, v7);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANNetAdapter::configureRTSThreshold(AppleBCMWLANNetAdapter *this, int a2)
{
  uint64_t v3 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 5) + 8), (uint64_t)"rtsthresh");
  if (v3 && *(void *)(*((void *)this + 5) + 32) && CCLogStream::shouldLog())
  {
    uint64_t v5 = (void *)*((void *)this + 5);
    OSStringPtr v6 = (CCLogStream *)v5[4];
    OSStringPtr v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 112))(*v5, v3);
    CCLogStream::logAlert(v6, "[dk] %s@%d: Error: cannot set  RTS : ret %x: %s\n", "configureRTSThreshold", 219, a2, v7);
  }
  return v3;
}

uint64_t AppleBCMWLANNetAdapter::setRTSThresholdAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(*(void *)(result + 40) + 32);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = *(void **)(v3 + 40);
        OSStringPtr v6 = (CCLogStream *)v5[4];
        OSStringPtr v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 112))(*v5, a3);
        return CCLogStream::logCrit(v6, "[dk] %s@%d: setting Aggressive RTS Threshold failure, error %s\n", "setRTSThresholdAsyncCallback", 2121, v7);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANNetAdapter::getFWHotChannels(uint64_t a1, uint64_t a2)
{
  bzero(v14, 0x5FAuLL);
  *(_DWORD *)((char *)&v14[1] + 2) = 380;
  v13[0] = v14;
  v13[1] = 0x5F4000405FALL;
  uint64_t v4 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 8), (uint64_t)"roam_channels_in_hotlist", (uint64_t)&kNoTxPayload, (uint64_t)v13, 0);
  if (v4)
  {
    if (*(void *)(*(void *)(a1 + 40) + 32) && CCLogStream::shouldLog())
    {
      uint64_t v5 = *(void **)(a1 + 40);
      OSStringPtr v6 = (CCLogStream *)v5[4];
      OSStringPtr v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 112))(*v5, v4);
      CCLogStream::logAlert(v6, "[dk] %s@%d: Error: cannot get roam channel hot list %s\n", "getFWHotChannels", 237, v7);
    }
  }
  else
  {
    int v8 = v14[0];
    if (v14[0] >= 7u) {
      int v8 = 7;
    }
    *(_DWORD *)(a2 + 16) = v8;
    if (*(void *)(*(void *)(a1 + 40) + 32)
      && (int shouldLog = CCLogStream::shouldLog(), v8 = *(_DWORD *)(a2 + 16), shouldLog))
    {
      CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 32), "[dk] %s@%d:getFWHotChannels %d\n", "getFWHotChannels", 240, *(_DWORD *)(a2 + 16));
      if (!*(_DWORD *)(a2 + 16)) {
        return v4;
      }
    }
    else if (!v8)
    {
      return v4;
    }
    unint64_t v10 = 0;
    do
    {
      ChanSpecHandler = (int **)AppleBCMWLANCore::getChanSpecHandler(**(AppleBCMWLANCore ***)(a1 + 40));
      *(_WORD *)(a2 + 2 * v10) = AppleBCMWLANChanSpec::getAppleChannelSpec(ChanSpecHandler, LOWORD(v14[v10 + 1]));
      ++v10;
    }
    while (v10 < *(unsigned int *)(a2 + 16));
  }
  return v4;
}

uint64_t AppleBCMWLANNetAdapter::sendReassocCommand(AppleBCMWLANNetAdapter *this, void *a2, unsigned __int16 a3)
{
  IO80211Hexdump();
  OSStringPtr v6 = (void *)*((void *)this + 5);
  v17[0] = *v6;
  v17[1] = AppleBCMWLANCore::startRoamScanAsyncCallback;
  v17[2] = 0;
  OSStringPtr v7 = (AppleBCMWLANCommander *)v6[1];
  LODWORD(v6) = a2 != 0;
  BOOL v8 = a3 != 0;
  BOOL v9 = (v6 & v8) == 0;
  if ((v6 & v8) != 0) {
    uint64_t v10 = a3;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v9) {
    long long v11 = 0;
  }
  else {
    long long v11 = a2;
  }
  v16[0] = v11;
  v16[1] = v10;
  int v12 = a3;
  if (a3 <= 6u) {
    int v12 = 6;
  }
  int v15 = (v12 << 16) | 6;
  uint64_t v13 = AppleBCMWLANCommander::sendIOCtlSet(v7, 53, (uint64_t)v16, (unsigned __int16 *)&v15, (uint64_t)v17, 0);
  if (v13 && *(void *)(*((void *)this + 5) + 32) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 32), "[dk] %s@%d:Error: Failed to send Reassoc Command \n", "sendReassocCommand", 264);
  }
  return v13;
}

uint64_t AppleBCMWLANNetAdapter::sendIOVReassocCommand(AppleBCMWLANNetAdapter *this, void *a2)
{
  IO80211Hexdump();
  uint64_t v3 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 5) + 8), (uint64_t)"reassoc");
  if (v3 && *(void *)(*((void *)this + 5) + 32) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 32), "[dk] %s@%d:Error: Failed to send Reassoc Command \n", "sendIOVReassocCommand", 283);
  }
  return v3;
}

uint64_t AppleBCMWLANNetAdapter::sendReassocCommandLegacy(AppleBCMWLANCore ***a1, unsigned __int16 *a2)
{
  unsigned int v4 = *((_DWORD *)a2 + 37);
  if (*((_DWORD *)a2 + 36) >= 7u) {
    unsigned int v5 = 7;
  }
  else {
    unsigned int v5 = *((_DWORD *)a2 + 36);
  }
  int v16 = 0;
  memset(v15, 0, sizeof(v15));
  if (v4 >= 7) {
    uint64_t v6 = 7;
  }
  else {
    uint64_t v6 = v4;
  }
  if (AppleBCMWLANCore::isAssociated(*a1[5]))
  {
    if (v5 < 2)
    {
      LODWORD(v15[0]) = *((_DWORD *)a2 + 25);
      WORD2(v15[0]) = a2[52];
    }
    else
    {
      WORD3(v15[0]) = v5;
      memcpy((char *)&v15[1] + 10, a2 + 50, 6 * (v5 - 1) + 6);
    }
    DWORD2(v15[0]) = v6;
    AppleBCMWLANNetAdapter::getChanspecArray((uint64_t)a1, a2, (_WORD *)((unint64_t)v15 | 0xC), v6);
    return AppleBCMWLANNetAdapter::sendReassocCommand((AppleBCMWLANNetAdapter *)a1, v15, 0x44u);
  }
  else
  {
    if ((!a1[5][4] || (CCLogStream::shouldLogConsole() & 1) == 0)
      && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109634;
      int v10 = 78;
      __int16 v11 = 2080;
      int v12 = "sendReassocCommandLegacy";
      __int16 v13 = 1024;
      int v14 = 304;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: Not Associated, Bail out\n", buf, 0x18u);
    }
    uint64_t v7 = 3758097084;
    if (a1[5][4] && CCLogStream::shouldLog()) {
      CCLogStream::logNotice(a1[5][4], "[dk] %s@%d:Not Associated, Bail out\n", "sendReassocCommandLegacy", 304);
    }
  }
  return v7;
}

uint64_t AppleBCMWLANNetAdapter::getChanspecArray(uint64_t a1, unsigned __int16 *a2, _WORD *a3, uint64_t a4)
{
  if (*(void *)(*(void *)(a1 + 40) + 32) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 32), "[dk] %s@%d:number of channels = %d ", "getChanspecArray", 595, a4);
  }
  for (uint64_t i = 0; a4; --a4)
  {
    uint64_t ChanSpecHandler = AppleBCMWLANCore::getChanSpecHandler(**(AppleBCMWLANCore ***)(a1 + 40));
    *a3++ = AppleBCMWLANChanSpec::getBCMChannelSpec(ChanSpecHandler, *a2);
    unsigned int v10 = *a2++;
    uint64_t i = (1 << (v10 >> 14)) | i;
  }
  return i;
}

uint64_t AppleBCMWLANNetAdapter::sendReassocCommandV3(AppleBCMWLANCore ***a1, uint64_t a2)
{
  uint64_t v4 = 3758097084;
  unsigned int v5 = *(_DWORD *)(a2 + 144);
  unsigned int v6 = *(_DWORD *)(a2 + 148);
  if (v5 >= 7) {
    uint64_t v7 = 7;
  }
  else {
    uint64_t v7 = v5;
  }
  if (v6 >= 0x32) {
    uint64_t v8 = 50;
  }
  else {
    uint64_t v8 = v6;
  }
  uint64_t v9 = IOMallocZeroData();
  if (v9)
  {
    uint64_t v10 = v9;
    *(_WORD *)uint64_t v9 = 3;
    *(_WORD *)(v9 + 8) = 3;
    *(_DWORD *)(v9 + 28) = v8;
    if (AppleBCMWLANCore::isAssociated(*a1[5]))
    {
      AppleBCMWLANNetAdapter::getChanspecArray((uint64_t)a1, (unsigned __int16 *)a2, (_WORD *)(v10 + 32), v8);
      if (v7 < 2)
      {
        *(_WORD *)(v10 + 18) = 0;
        int v14 = *(_DWORD *)(a2 + 100);
        *(_WORD *)(v10 + 16) = *(_WORD *)(a2 + 104);
        *(_DWORD *)(v10 + 12) = v14;
      }
      else
      {
        uint64_t v11 = v10 + 32 + 2 * v8;
        *(_WORD *)(v10 + 18) = v7;
        int v12 = (int *)(a2 + 100);
        do
        {
          int v13 = *v12;
          *(_WORD *)(v11 + 4) = *((_WORD *)v12 + 2);
          *(_DWORD *)uint64_t v11 = v13;
          v11 += 6;
          int v12 = (int *)((char *)v12 + 6);
          --v7;
        }
        while (v7);
      }
      if ((*(unsigned char *)(a2 + 152) & 1) == 0) {
        *(_DWORD *)(v10 + 4) |= 0x100u;
      }
      *(_WORD *)(v10 + 2) = 2 * *(_DWORD *)(v10 + 28) + 6 * *(_WORD *)(v10 + 18) + 32;
      uint64_t v4 = AppleBCMWLANNetAdapter::sendIOVReassocCommand((AppleBCMWLANNetAdapter *)a1, (void *)v10);
    }
    else
    {
      if ((!a1[5][4] || (CCLogStream::shouldLogConsole() & 1) == 0)
        && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109634;
        int v17 = 78;
        __int16 v18 = 2080;
        uint64_t v19 = "sendReassocCommandV3";
        __int16 v20 = 1024;
        int v21 = 353;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: Not Associated, Bail out\n", buf, 0x18u);
      }
      if (a1[5][4] && CCLogStream::shouldLog()) {
        CCLogStream::logNotice(a1[5][4], "[dk] %s@%d:Not Associated, Bail out\n", "sendReassocCommandV3", 353);
      }
    }
    IOFreeData();
  }
  return v4;
}

uint64_t AppleBCMWLANNetAdapter::sendReassocCommandV1(AppleBCMWLANCore ***a1, uint64_t a2)
{
  uint64_t v4 = 3758097084;
  unsigned int v5 = *(_DWORD *)(a2 + 144);
  unsigned int v6 = *(_DWORD *)(a2 + 148);
  if (v5 >= 7) {
    uint64_t v7 = 7;
  }
  else {
    uint64_t v7 = v5;
  }
  if (v6 >= 0x32) {
    uint64_t v8 = 50;
  }
  else {
    uint64_t v8 = v6;
  }
  uint64_t v9 = IOMallocZeroData();
  if (v9)
  {
    uint64_t v10 = v9;
    *(_WORD *)uint64_t v9 = 2;
    *(_WORD *)(v9 + 8) = 1;
    *(_DWORD *)(v9 + 20) = v8;
    if (AppleBCMWLANCore::isAssociated(*a1[5]))
    {
      AppleBCMWLANNetAdapter::getChanspecArray((uint64_t)a1, (unsigned __int16 *)a2, (_WORD *)(v10 + 24), v8);
      if (v7 < 2)
      {
        *(_WORD *)(v10 + 18) = 0;
        int v14 = *(_DWORD *)(a2 + 100);
        *(_WORD *)(v10 + 16) = *(_WORD *)(a2 + 104);
        *(_DWORD *)(v10 + 12) = v14;
      }
      else
      {
        uint64_t v11 = v10 + 24 + 2 * v8;
        *(_WORD *)(v10 + 18) = v7;
        int v12 = (int *)(a2 + 100);
        do
        {
          int v13 = *v12;
          *(_WORD *)(v11 + 4) = *((_WORD *)v12 + 2);
          *(_DWORD *)uint64_t v11 = v13;
          v11 += 6;
          int v12 = (int *)((char *)v12 + 6);
          --v7;
        }
        while (v7);
      }
      if ((*(unsigned char *)(a2 + 152) & 1) == 0) {
        *(_DWORD *)(v10 + 4) |= 0x100u;
      }
      *(_WORD *)(v10 + 2) = 2 * *(_DWORD *)(v10 + 20) + 6 * *(_WORD *)(v10 + 18) + 24;
      uint64_t v4 = AppleBCMWLANNetAdapter::sendIOVReassocCommand((AppleBCMWLANNetAdapter *)a1, (void *)v10);
    }
    else
    {
      if ((!a1[5][4] || (CCLogStream::shouldLogConsole() & 1) == 0)
        && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109634;
        int v17 = 78;
        __int16 v18 = 2080;
        uint64_t v19 = "sendReassocCommandV1";
        __int16 v20 = 1024;
        int v21 = 410;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: Not Associated, Bail out\n", buf, 0x18u);
      }
      if (a1[5][4] && CCLogStream::shouldLog()) {
        CCLogStream::logNotice(a1[5][4], "[dk] %s@%d:Not Associated, Bail out\n", "sendReassocCommandV1", 410);
      }
    }
    IOFreeData();
  }
  return v4;
}

uint64_t AppleBCMWLANNetAdapter::sendReassocCommand(AppleBCMWLANCore ***a1, unsigned __int16 *a2)
{
  if (AppleBCMWLANCore::getFirmwareInterfaceVersion(*a1[5]) < 0x15)
  {
    if (AppleBCMWLANCore::getFirmwareInterfaceVersion(*a1[5]) < 0x11)
    {
      return AppleBCMWLANNetAdapter::sendReassocCommandLegacy(a1, a2);
    }
    else
    {
      return AppleBCMWLANNetAdapter::sendReassocCommandV1(a1, (uint64_t)a2);
    }
  }
  else
  {
    return AppleBCMWLANNetAdapter::sendReassocCommandV3(a1, (uint64_t)a2);
  }
}

uint64_t AppleBCMWLANNetAdapter::setDefaultMode(AppleBCMWLANNetAdapter *this)
{
  *(unsigned char *)(*((void *)this + 5) + 52) = 0;
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  if (!AppleBCMWLANCore::isAssociated(**((AppleBCMWLANCore ***)this + 5))) {
    return 3766625283;
  }
  uint64_t v2 = AppleBCMWLANNetAdapter::configureRetryLimit(this, 6);
  uint64_t v3 = v2;
  if (v2 == -536870185 || v2 == -536870165) {
    return v3;
  }
  if (!AppleBCMWLANCore::isAssociated(**((AppleBCMWLANCore ***)this + 5))) {
    return 3766625283;
  }
  uint64_t v4 = AppleBCMWLANNetAdapter::configureRTSThreshold(this, 2347);
  uint64_t v3 = v4;
  if (v4 == -536870185 || v4 == -536870165) {
    return v3;
  }
  if (!AppleBCMWLANCore::isAssociated(**((AppleBCMWLANCore ***)this + 5))) {
    return 3766625283;
  }
  int v21 = 0;
  uint64_t v20 = 0;
  int v19 = *(_DWORD *)AppleBCMWLANCore::getWmeParams(**((AppleBCMWLANCore ***)this + 5), 3u);
  unsigned int v5 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
  int v17 = &v19;
  uint64_t v18 = 16;
  uint64_t v6 = AppleBCMWLANCommander::runIOVarSet(v5, (uint64_t)"wme_ac_sta", (uint64_t)&v17, 0, 0);
  uint64_t v7 = *((void *)this + 5);
  if (!v6) {
    goto LABEL_15;
  }
  uint64_t v3 = v6;
  if (*(void *)(v7 + 32) && CCLogStream::shouldLog())
  {
    uint64_t v11 = (void *)*((void *)this + 5);
    int v12 = (CCLogStream *)v11[4];
    int v13 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v11 + 112))(*v11, v3);
    CCLogStream::logAlert(v12, "[dk] %s@%d: Error: cannot set wme_ac_sta (VO): ret %x %s\n", "setDefaultMode", 496, v3, v13);
  }
  if (v3 != -536870185 && v3 != -536870165)
  {
    uint64_t v7 = *((void *)this + 5);
LABEL_15:
    uint64_t v3 = 3766625283;
    if (AppleBCMWLANCore::isAssociated(*(AppleBCMWLANCore **)v7))
    {
      int v19 = *(_DWORD *)AppleBCMWLANCore::getWmeParams(**((AppleBCMWLANCore ***)this + 5), 2u);
      uint64_t v8 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
      int v17 = &v19;
      uint64_t v18 = 16;
      uint64_t v3 = AppleBCMWLANCommander::runIOVarSet(v8, (uint64_t)"wme_ac_sta", (uint64_t)&v17, 0, 0);
      if (v3)
      {
        if (*(void *)(*((void *)this + 5) + 32) && CCLogStream::shouldLog())
        {
          int v14 = (void *)*((void *)this + 5);
          int v15 = (CCLogStream *)v14[4];
          int v16 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v14 + 112))(*v14, v3);
          CCLogStream::logAlert(v15, "[dk] %s@%d: Error: cannot set wme_ac_sta (VI): ret %x %s\n", "setDefaultMode", 509, v3, v16);
        }
        if (v3 == -536870185 || v3 == -536870165) {
          return 3758097084;
        }
        else {
          return 0;
        }
      }
    }
  }
  return v3;
}

uint64_t AppleBCMWLANNetAdapter::setRealTimeMode(AppleBCMWLANNetAdapter *this)
{
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  *(unsigned char *)(*((void *)this + 5) + 52) = 1;
  if (!AppleBCMWLANCore::isAssociated(**((AppleBCMWLANCore ***)this + 5))) {
    return 3766625283;
  }
  uint64_t v2 = AppleBCMWLANNetAdapter::configureRetryLimit(this, 12);
  uint64_t v3 = v2;
  if (v2 == -536870185 || v2 == -536870165) {
    return v3;
  }
  if (!AppleBCMWLANCore::isAssociated(**((AppleBCMWLANCore ***)this + 5))) {
    return 3766625283;
  }
  v26[0] = 0;
  v26[1] = 0;
  unsigned int v4 = *(unsigned __int8 *)(AppleBCMWLANCore::getWmeParams(**((AppleBCMWLANCore ***)this + 5), 2u) + 1);
  uint64_t WmeParams = AppleBCMWLANCore::getWmeParams(**((AppleBCMWLANCore ***)this + 5), 3u);
  uint64_t v6 = *((void *)this + 5);
  if (*(_DWORD *)(v6 + 48) <= *(unsigned __int8 *)(WmeParams + 1) >> 4) {
    goto LABEL_14;
  }
  LODWORD(v26[0]) = *(_DWORD *)AppleBCMWLANCore::getWmeParams(*(AppleBCMWLANCore **)v6, 3u);
  if (!AppleBCMWLANCore::isAssociated(**((AppleBCMWLANCore ***)this + 5))) {
    return 3766625283;
  }
  uint64_t v7 = AppleBCMWLANCore::getWmeParams(**((AppleBCMWLANCore ***)this + 5), 3u);
  uint64_t v8 = *((void *)this + 5);
  BYTE1(v26[0]) = *(unsigned char *)(v7 + 1) & 0xF | (16 * *(unsigned char *)(v8 + 48));
  uint64_t v9 = *(AppleBCMWLANCommander **)(v8 + 8);
  int v24 = v26;
  uint64_t v25 = 16;
  uint64_t v10 = AppleBCMWLANCommander::runIOVarSet(v9, (uint64_t)"wme_ac_sta", (uint64_t)&v24, 0, 0);
  uint64_t v6 = *((void *)this + 5);
  if (!v10)
  {
LABEL_14:
    if (*(_DWORD *)(v6 + 48) <= v4 >> 4) {
      return 0;
    }
    LODWORD(v26[0]) = *(_DWORD *)AppleBCMWLANCore::getWmeParams(*(AppleBCMWLANCore **)v6, 2u);
    uint64_t v3 = 3766625283;
    if (AppleBCMWLANCore::isAssociated(**((AppleBCMWLANCore ***)this + 5)))
    {
      uint64_t v11 = AppleBCMWLANCore::getWmeParams(**((AppleBCMWLANCore ***)this + 5), 2u);
      uint64_t v12 = *((void *)this + 5);
      BYTE1(v26[0]) = *(unsigned char *)(v11 + 1) & 0xF | (16 * *(unsigned char *)(v12 + 48));
      int v13 = *(AppleBCMWLANCommander **)(v12 + 8);
      int v24 = v26;
      uint64_t v25 = 16;
      uint64_t v3 = AppleBCMWLANCommander::runIOVarSet(v13, (uint64_t)"wme_ac_sta", (uint64_t)&v24, 0, 0);
      if (v3)
      {
        if (*(void *)(*((void *)this + 5) + 32) && CCLogStream::shouldLog())
        {
          int v19 = (void *)*((void *)this + 5);
          uint64_t v20 = (CCLogStream *)v19[4];
          int v21 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v19 + 112))(*v19, v3);
          CCLogStream::logAlert(v20, "[dk] %s@%d: Error: cannot set wme_ac_sta (VO): ret %x: %s\n", "setRealTimeMode", 581, v3, v21);
        }
        if (v3 == -536870185) {
          unsigned int v14 = -536870185;
        }
        else {
          unsigned int v14 = 0;
        }
        if (v3 == -536870165) {
          return 3758097131;
        }
        else {
          return v14;
        }
      }
    }
    return v3;
  }
  uint64_t v3 = v10;
  if (*(void *)(v6 + 32) && CCLogStream::shouldLog())
  {
    int v16 = (void *)*((void *)this + 5);
    unsigned int v23 = v4;
    int v17 = (CCLogStream *)v16[4];
    uint64_t v22 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v16 + 112))(*v16, v3);
    uint64_t v18 = v17;
    unsigned int v4 = v23;
    CCLogStream::logAlert(v18, "[dk] %s@%d: Error: cannot set wme_ac_sta (VI): ret %x: %s\n", "setRealTimeMode", 565, v3, v22);
  }
  if (v3 != -536870185 && v3 != -536870165)
  {
    uint64_t v6 = *((void *)this + 5);
    goto LABEL_14;
  }
  return v3;
}

uint64_t AppleBCMWLANNetAdapter::setDefaultWMEParamsSync(AppleBCMWLANNetAdapter *this)
{
  *(unsigned char *)(*((void *)this + 5) + 52) = 0;
  AppleBCMWLANNetAdapter::configureRetryLimit(this, 6);
  AppleBCMWLANNetAdapter::configureRTSThreshold(this, 2347);
  uint64_t v18 = 0;
  int v19 = 0;
  int v17 = *(_DWORD *)AppleBCMWLANCore::getWmeParams(**((AppleBCMWLANCore ***)this + 5), 3u);
  uint64_t v2 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
  int v15 = &v17;
  uint64_t v16 = 16;
  uint64_t v3 = AppleBCMWLANCommander::runIOVarSet(v2, (uint64_t)"wme_ac_sta", (uint64_t)&v15, 0, 0);
  unsigned int v4 = (AppleBCMWLANCore **)*((void *)this + 5);
  if (v3)
  {
    uint64_t v5 = v3;
    if (v4[4])
    {
      int shouldLog = CCLogStream::shouldLog();
      unsigned int v4 = (AppleBCMWLANCore **)*((void *)this + 5);
      if (shouldLog)
      {
        uint64_t v10 = v4[4];
        uint64_t v11 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)*v4 + 112))(*v4, v5);
        CCLogStream::logAlert(v10, "[dk] %s@%d: Error: cannot set wme_ac_sta (VO): ret %x %s\n", "setDefaultWMEParamsSync", 627, v5, v11);
        unsigned int v4 = (AppleBCMWLANCore **)*((void *)this + 5);
      }
    }
  }
  int v17 = *(_DWORD *)AppleBCMWLANCore::getWmeParams(*v4, 2u);
  uint64_t v7 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
  int v15 = &v17;
  uint64_t v16 = 16;
  uint64_t result = AppleBCMWLANCommander::runIOVarSet(v7, (uint64_t)"wme_ac_sta", (uint64_t)&v15, 0, 0);
  if (result)
  {
    uint64_t v9 = result;
    uint64_t result = *(void *)(*((void *)this + 5) + 32);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v12 = (void *)*((void *)this + 5);
        int v13 = (CCLogStream *)v12[4];
        unsigned int v14 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v12 + 112))(*v12, v9);
        return CCLogStream::logAlert(v13, "[dk] %s@%d: Error: cannot set wme_ac_sta (VI): ret %x %s\n", "setDefaultWMEParamsSync", 634, v9, v14);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANNetAdapter::setEnhancedDisassocParams(uint64_t a1, int a2, int a3, int a4)
{
  unint64_t MaxCmdTxPayload = AppleBCMWLANCommander::getMaxCmdTxPayload(*(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 8));
  unint64_t MaxCmdRxPayload = AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 8));
  uint64_t v10 = *(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 8);
  if (MaxCmdTxPayload >= MaxCmdRxPayload) {
    AppleBCMWLANCommander::getMaxCmdRxPayload(v10);
  }
  else {
    AppleBCMWLANCommander::getMaxCmdTxPayload(v10);
  }
  uint64_t result = IOMallocZeroData();
  if (result)
  {
    uint64_t v12 = result;
    if (a2) {
      int v13 = 6579297;
    }
    else {
      int v13 = 7103844;
    }
    *(_DWORD *)uint64_t result = v13;
    *(_DWORD *)(result + 12) = 385879005;
    *(void *)(result + 4) = 0x20000000001;
    *(unsigned char *)(result + 16) = -14;
    *(_DWORD *)(result + 17) = 67174922;
    *(_DWORD *)(result + 21) = a3;
    if (a4 == 10)
    {
      uint64_t v23 = a1;
      uint64_t v24 = (uint64_t)AppleBCMWLANNetAdapter::setDisassocReasonAppleIEAsyncCallback;
      uint64_t v25 = 0;
      uint64_t v19 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 8), (uint64_t)"vndr_ie");
      if (v19)
      {
        uint64_t v20 = v19;
        if (*(void *)(*(void *)(a1 + 40) + 32))
        {
          if (CCLogStream::shouldLog())
          {
            int v21 = *(void **)(a1 + 40);
            uint64_t v22 = (CCLogStream *)v21[4];
            (*(void (**)(void, uint64_t))(*(void *)*v21 + 112))(*v21, v20);
            CCLogStream::logCrit(v22, "[dk] %s@%d: Error: cannot Add Apple IE in Disassociation Frame: ret %x %s\n");
          }
        }
      }
    }
    else if (a4 == 6)
    {
      unsigned int v14 = *(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 8);
      uint64_t v23 = v12;
      uint64_t v24 = 28;
      uint64_t v15 = AppleBCMWLANCommander::runIOVarSet(v14, (uint64_t)"vndr_ie", (uint64_t)&v23, 0, 0);
      if (v15)
      {
        uint64_t v16 = v15;
        if (*(void *)(*(void *)(a1 + 40) + 32))
        {
          if (CCLogStream::shouldLog())
          {
            int v17 = *(void **)(a1 + 40);
            uint64_t v18 = (CCLogStream *)v17[4];
            (*(void (**)(void, uint64_t))(*(void *)*v17 + 112))(*v17, v16);
            CCLogStream::logCrit(v18, "[dk] %s@%d: vndr_ie error %s - failed to add IE\n");
          }
        }
      }
    }
    return IOFreeData();
  }
  return result;
}

uint64_t AppleBCMWLANNetAdapter::setDisassocReasonAppleIEAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(*(void *)(result + 40) + 32);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = *(void **)(v3 + 40);
        uint64_t v6 = (CCLogStream *)v5[4];
        uint64_t v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 112))(*v5, a3);
        return CCLogStream::logAlert(v6, "[dk] %s@%d: Error: cannot set/unset Apple IE in Disassociation Frame: %s\n", "setDisassocReasonAppleIEAsyncCallback", 712, v7);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANNetAdapter::getRSSIPerAntenna(AppleBCMWLANCore ***this, int32x4_t *a2)
{
  if (!AppleBCMWLANCore::isAssociated(*this[5])) {
    return 3766625283;
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  v12[0] = &v13;
  v12[1] = 0x1000100010;
  unsigned int v4 = this[5][1];
  v11[0] = &v13;
  v11[1] = 16;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarGet(v4, (uint64_t)"phy_rssi_ant", (uint64_t)v11, (uint64_t)v12, 0);
  if (v5)
  {
    if (this[5][4] && CCLogStream::shouldLog())
    {
      uint64_t v7 = this[5];
      uint64_t v8 = v7[4];
      uint64_t v9 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)*v7 + 112))(*v7, v5);
      CCLogStream::logAlert(v8, "[dk] %s@%d: phy_rssi_ant Failed %s\n", "getRSSIPerAntenna", 775, v9);
    }
  }
  else
  {
    v6.i32[0] = v14;
    *a2 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v6));
  }
  return v5;
}

uint64_t AppleBCMWLANNetAdapter::checkCcaStatsExtSupport(AppleBCMWLANCore ***this)
{
  if (AppleBCMWLANCore::getFirmwareInterfaceVersion(*this[5]) >= 0x15) {
    size_t v2 = 88;
  }
  else {
    size_t v2 = 72;
  }
  uint64_t v3 = IOMallocZeroData();
  unsigned int v4 = this[5];
  if (v3)
  {
    uint64_t v5 = (void *)v3;
    if (AppleBCMWLANCore::getFirmwareInterfaceVersion(*v4) > 0x14)
    {
      memset(&__src[4], 0, 80);
      int v11 = 0;
      *(_DWORD *)__src = 5767172;
      __src[4] = 1;
      *(_WORD *)&__src[6] = 1;
      *(_DWORD *)&__src[12] = 69633;
    }
    else
    {
      memset(__src, 0, 72);
      *(_DWORD *)&__src[2] = 268501064;
      *(_WORD *)&__src[6] = 1;
    }
    memcpy(v5, __src, v2);
    v9[0] = v5;
    v9[1] = v2 | (v2 << 32);
    v8[0] = v5;
    v8[1] = v2;
    uint64_t v6 = AppleBCMWLANCommander::runIOVarGet(this[5][1], (uint64_t)"cca_get_stats_ext", (uint64_t)v8, (uint64_t)v9, 0);
    if (v6 == -469794537 && this[5][4] && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(this[5][4], "[dk] %s@%d:cca_get_stats_ext not supported!\n", "checkCcaStatsExtSupport", 831);
    }
    IOFreeData();
  }
  else
  {
    uint64_t v6 = 3758097084;
    if (v4[4] && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(this[5][4], "[dk] %s@%d:Unable to allocate memory for rxBuffSize\n", "checkCcaStatsExtSupport", 802);
    }
  }
  return v6;
}

uint64_t AppleBCMWLANNetAdapter::checkRoamCacheQuerySupport(AppleBCMWLANNetAdapter *this)
{
  __int16 v8 = -21846;
  uint64_t v2 = IOMallocZeroData();
  if (v2)
  {
    v6[0] = v2;
    v6[1] = 0x10000000100;
    v5[0] = &v7;
    v5[1] = 6;
    int v7 = 1;
    uint64_t v3 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*((void *)this + 5) + 8), (uint64_t)"roam_cache", (uint64_t)v5, (uint64_t)v6, 0);
    if (v3 == -469794537 && *(void *)(*((void *)this + 5) + 32) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 32), "[dk] %s@%d:Roam Cache Query not supported! \n", "checkRoamCacheQuerySupport", 855);
    }
    IOFreeData();
  }
  else
  {
    uint64_t v3 = 3758097084;
    if (*(void *)(*((void *)this + 5) + 32) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 32), "[dk] %s@%d:Unable to allocate memory for rxBuf\n", "checkRoamCacheQuerySupport", 844);
    }
  }
  return v3;
}

uint64_t AppleBCMWLANNetAdapter::handleRoam(uint64_t a1, uint64_t a2)
{
  if ((!*(void *)(*(void *)(a1 + 40) + 32) || (CCLogStream::shouldLogConsole() & 1) == 0)
    && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    LQM = (AppleBCMWLANLQM *)AppleBCMWLANCore::getLQM(**(AppleBCMWLANCore ***)(a1 + 40));
    int isBssidUpdatePendingPostRoam = AppleBCMWLANLQM::isBssidUpdatePendingPostRoam(LQM);
    if (a2) {
      int v6 = *(_DWORD *)(a2 + 8);
    }
    else {
      int v6 = 1;
    }
    *(_DWORD *)buf = 67110402;
    int v36 = 78;
    __int16 v37 = 2080;
    int v38 = "handleRoam";
    __int16 v39 = 1024;
    int v40 = 866;
    __int16 v41 = 2080;
    long long v42 = "handleRoam";
    __int16 v43 = 1024;
    int v44 = isBssidUpdatePendingPostRoam;
    __int16 v45 = 1024;
    int v46 = v6;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: %s: BssidUpdatePostRoam=%u status:%u\n", buf, 0x2Eu);
  }
  if (!*(void *)(*(void *)(a1 + 40) + 32) || !CCLogStream::shouldLog())
  {
    if (a2) {
      goto LABEL_11;
    }
LABEL_36:
    uint64_t v25 = AppleBCMWLANCore::getLQM(**(AppleBCMWLANCore ***)(a1 + 40));
    return AppleBCMWLANLQM::setPendingBssidUpdatePostRoam(v25, 0);
  }
  uint64_t v20 = *(AppleBCMWLANCore ***)(a1 + 40);
  int v21 = v20[4];
  uint64_t v22 = (AppleBCMWLANLQM *)AppleBCMWLANCore::getLQM(*v20);
  int v23 = AppleBCMWLANLQM::isBssidUpdatePendingPostRoam(v22);
  if (a2) {
    int v24 = *(_DWORD *)(a2 + 8);
  }
  else {
    int v24 = 1;
  }
  CCLogStream::logNotice(v21, "[dk] %s@%d:%s: BssidUpdatePostRoam=%u status:%u\n", "handleRoam", 866, "handleRoam", v23, v24);
  if (!a2) {
    goto LABEL_36;
  }
LABEL_11:
  int v7 = *(AppleBCMWLANCore ***)(a1 + 40);
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v8 = AppleBCMWLANCore::getLQM(*v7);
    AppleBCMWLANLQM::setPendingBssidUpdatePostRoam(v8, 0);
    goto LABEL_13;
  }
  CurrentBSS = (IO80211BSSBeacon *)AppleBCMWLANBssManager::getCurrentBSS(v7[3]);
  if ((!*(void *)(*(void *)(a1 + 40) + 32) || (CCLogStream::shouldLogConsole() & 1) == 0)
    && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    if (CurrentBSS) {
      int isFtEnabled = IO80211BSSBeacon::isFtEnabled(CurrentBSS);
    }
    else {
      int isFtEnabled = 0;
    }
    *(_DWORD *)buf = 67110146;
    int v36 = 78;
    __int16 v37 = 2080;
    int v38 = "handleRoam";
    __int16 v39 = 1024;
    int v40 = 871;
    __int16 v41 = 2080;
    long long v42 = "handleRoam";
    __int16 v43 = 1024;
    int v44 = isFtEnabled;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: %s: isFBT:%u \n", buf, 0x28u);
  }
  if (!*(void *)(*(void *)(a1 + 40) + 32) || !CCLogStream::shouldLog())
  {
    if (!CurrentBSS) {
      goto LABEL_13;
    }
LABEL_29:
    if (IO80211BSSBeacon::isFtEnabled(CurrentBSS))
    {
      uint64_t v18 = (AppleBCMWLANLQM *)AppleBCMWLANCore::getLQM(**(AppleBCMWLANCore ***)(a1 + 40));
      if (AppleBCMWLANLQM::isBssidUpdatePendingPostRoam(v18))
      {
        AppleBCMWLANCore::setBeaconListenInterval(**(AppleBCMWLANCore ***)(a1 + 40));
        uint64_t v19 = (AppleBCMWLANLQM *)AppleBCMWLANCore::getLQM(**(AppleBCMWLANCore ***)(a1 + 40));
        AppleBCMWLANLQM::retriggerAssocTimer(v19);
      }
    }
    goto LABEL_13;
  }
  uint64_t v30 = *(CCLogStream **)(*(void *)(a1 + 40) + 32);
  if (CurrentBSS) {
    int v31 = IO80211BSSBeacon::isFtEnabled(CurrentBSS);
  }
  else {
    int v31 = 0;
  }
  CCLogStream::logNotice(v30, "[dk] %s@%d:%s: isFBT:%u \n", "handleRoam", 871, "handleRoam", v31);
  if (CurrentBSS) {
    goto LABEL_29;
  }
LABEL_13:
  uint64_t result = *(void *)(*(void *)(a1 + 40) + 32);
  if (result)
  {
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      int v34 = *(CCLogStream **)(*(void *)(a1 + 40) + 32);
      uint64_t v10 = *(unsigned int *)(a2 + 8);
      int v11 = stringFromStatusInEvent(*(_DWORD *)(a2 + 8), 0);
      uint64_t v12 = *(unsigned int *)(a2 + 12);
      uint64_t v13 = (const char *)stringFromReason(*(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 12));
      int v33 = *(unsigned __int16 *)(a2 + 2);
      uint64_t v32 = *(unsigned int *)(a2 + 16);
      int v14 = 0;
      if (IO80211_io80211isDebuggable()) {
        int v14 = *(unsigned __int8 *)(a2 + 24);
      }
      if (IO80211_io80211isDebuggable()) {
        int v15 = *(unsigned __int8 *)(a2 + 25);
      }
      else {
        int v15 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v26 = *(unsigned __int8 *)(a2 + 26);
      }
      else {
        int v26 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v27 = *(unsigned __int8 *)(a2 + 27);
      }
      else {
        int v27 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v28 = *(unsigned __int8 *)(a2 + 28);
      }
      else {
        int v28 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v29 = *(unsigned __int8 *)(a2 + 29);
      }
      else {
        int v29 = 0;
      }
      return CCLogStream::logAlert(v34, "[dk] %s@%d:status = %lu %s, reason = %lu %s, flags = 0x%x, authtype = %lu, addr = %02x:%02x:%02x:%02x:%02x:%02x\n", "handleRoam", 885, v10, v11, v12, v13, v33, v32, v14, v15, v26, v27, v28, v29);
    }
  }
  return result;
}

uint64_t AppleBCMWLANNetAdapter::handleLink(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(AppleBCMWLANCore ***)(a1 + 40);
  if (v4[4])
  {
    int shouldLog = CCLogStream::shouldLog();
    unsigned int v4 = *(AppleBCMWLANCore ***)(a1 + 40);
    if (shouldLog)
    {
      int v23 = v4[4];
      uint64_t v10 = *(unsigned int *)(a2 + 8);
      uint64_t v22 = stringFromStatusInEvent(*(_DWORD *)(a2 + 8), 0);
      uint64_t v11 = *(unsigned int *)(a2 + 12);
      uint64_t v12 = stringFromReason(*(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 12));
      int v20 = *(unsigned __int16 *)(a2 + 2);
      int v21 = (const char *)v12;
      uint64_t v13 = *(unsigned int *)(a2 + 16);
      int v14 = 0;
      if (IO80211_io80211isDebuggable()) {
        int v14 = *(unsigned __int8 *)(a2 + 24);
      }
      if (IO80211_io80211isDebuggable()) {
        int v15 = *(unsigned __int8 *)(a2 + 25);
      }
      else {
        int v15 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v16 = *(unsigned __int8 *)(a2 + 26);
      }
      else {
        int v16 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v17 = *(unsigned __int8 *)(a2 + 27);
      }
      else {
        int v17 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v18 = *(unsigned __int8 *)(a2 + 28);
      }
      else {
        int v18 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v19 = *(unsigned __int8 *)(a2 + 29);
      }
      else {
        int v19 = 0;
      }
      CCLogStream::logAlert(v23, "[dk] %s@%d: status = %lu %s, f/w reason = %lu %s, flags = 0x%x, authtype = %lu, addr = %02x:%02x:%02x:%02x:%02x:%02x\n", "handleLink", 895, v10, v22, v11, v21, v20, v13, v14, v15, v16, v17, v18, v19);
      unsigned int v4 = *(AppleBCMWLANCore ***)(a1 + 40);
    }
  }
  JoinAdapter = (AppleBCMWLANJoinAdapter *)AppleBCMWLANCore::getJoinAdapter(*v4);
  AppleBCMWLANJoinAdapter::configureDefaultUnAssocDwell(JoinAdapter);
  if (*(_DWORD *)(a2 + 8))
  {
    if ((!*(void *)(*(void *)(a1 + 40) + 32) || (CCLogStream::shouldLogConsole() & 1) == 0)
      && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109634;
      int v25 = 87;
      *(_WORD *)int v26 = 2080;
      *(void *)&void v26[2] = "handleLink";
      __int16 v27 = 1024;
      int v28 = 901;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d:      Link change event indicates failure\n", buf, 0x18u);
    }
    uint64_t result = *(void *)(*(void *)(a1 + 40) + 32);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result) {
        return CCLogStream::logWarn(*(CCLogStream **)(*(void *)(a1 + 40) + 32), "[dk] %s@%d:     Link change event indicates failure\n", "handleLink", 901);
      }
    }
  }
  else
  {
    BYTE2(v25) = *(unsigned char *)(a2 + 2) & 1;
    *(_DWORD *)buf = *(_DWORD *)(a2 + 24);
    LOWORD(v25) = *(_WORD *)(a2 + 28);
    unsigned int v8 = *(_DWORD *)(a2 + 12) - 1;
    if (v8 >= 9) {
      unsigned int v8 = 255;
    }
    *(_DWORD *)int v26 = v8;
    uint64_t v9 = *(void *)(*(uint64_t (**)(void))(***(void ***)(a1 + 40) + 128))(**(void **)(a1 + 40));
    HIBYTE(v25) = (*(uint64_t (**)(void))(v9 + 616))();
    return AppleBCMWLANCore::postMessageInfra(**(AppleBCMWLANCore ***)(a1 + 40), 0xD8u, buf, 0xCuLL);
  }
  return result;
}

uint64_t AppleBCMWLANNetAdapter::setLinkDown(AppleBCMWLANNetAdapter *this, int a2, int a3)
{
  int v6 = (const OSMetaClassBase *)(*(uint64_t (**)(void))(***((void ***)this + 5) + 128))(**((void **)this + 5));
  int v7 = OSMetaClassBase::safeMetaCast(v6, (const OSMetaClass *)gAppleBCMWLANSkywalkInterfaceMetaClass);
  AppleBCMWLANCore::updateInactivityAndSleepCounters(**((void ***)this + 5), 2);
  char isAssociated = AppleBCMWLANCore::isAssociated(**((AppleBCMWLANCore ***)this + 5));
  uint64_t v9 = *((void *)this + 5);
  uint64_t v10 = *(void *)(v9 + 32);
  if (isAssociated)
  {
    if (v10)
    {
      int shouldLog = CCLogStream::shouldLog();
      uint64_t v9 = *((void *)this + 5);
      if (shouldLog)
      {
        CCLogStream::logAlert(*(CCLogStream **)(v9 + 32), "[dk] %s@%d: Tearing down link (debounce=%d) debounceTimeout = %d \n", "setLinkDown", 926, a2, a3);
        uint64_t v9 = *((void *)this + 5);
      }
    }
    uint64_t CurrentBSS = AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(v9 + 24));
    (*(void (**)(uint64_t, const char *, const char *, void, void, void))(*(void *)CurrentBSS + 584))(CurrentBSS, "AppleBCMWLAN Left BSS(down):  ", "setLinkDown", 0, 0, 0);
    if (AppleBCMWLANCore::checkForScanCoreSupport(**((AppleBCMWLANCore ***)this + 5))
      && (AppleBCMWLANCore::checkForLPSCDisable(**((AppleBCMWLANCore ***)this + 5)) & 1) == 0
      && (IO80211BssManager::isAssociatedToAdhoc(*(IO80211BssManager **)(*((void *)this + 5) + 24)) & 1) == 0)
    {
      memset(v21, 0, 44);
      AppleBCMWLANCore::collectBeaconRxCounters(**((AppleBCMWLANCore ***)this + 5), (uint64_t)v21, 1);
      AppleBCMWLANCore::collectSCTxBlankingSummary(**((IOService ***)this + 5));
      AppleBCMWLANCore::dumpCurTxDCSummary(**((AppleBCMWLANCore ***)this + 5));
      AppleBCMWLANCore::collectTxDCSlice0Ant0Summary(**((IOService ***)this + 5));
      AppleBCMWLANCore::collectTxDCSlice1Ant0Summary(**((IOService ***)this + 5));
      AppleBCMWLANCore::collectDynSARPerSliceSummary(**((AppleBCMWLANCore ***)this + 5), 0);
      v13.n128_f64[0] = AppleBCMWLANCore::collectDynSARPerSliceSummary(**((AppleBCMWLANCore ***)this + 5), 1u);
    }
    ((void (*)(OSMetaClassBase *, void, __n128))v7->__vftable[33].Dispatch)(v7, 0, v13);
    AppleBCMWLANBssManager::setCurrentBSS(*(IO80211BssManager **)(*((void *)this + 5) + 24), 0);
    uint64_t v14 = *(void *)(*(uint64_t (**)(void))(***((void ***)this + 5) + 128))(**((void **)this + 5));
    (*(void (**)(void))(v14 + 624))();
    TxPowerManager = (AppleBCMWLANCore ***)AppleBCMWLANCore::getTxPowerManager(**((AppleBCMWLANCore ***)this + 5));
    AppleBCMWLANTxPowerManager::dynTxSDBStopUpdate(TxPowerManager, 1);
    LQM = (AppleBCMWLANLQM *)AppleBCMWLANCore::getLQM(**((AppleBCMWLANCore ***)this + 5));
    AppleBCMWLANLQM::resetLinkQualityMetrics(LQM, -2);
    AppleBCMWLANCore::clearPmk(**((AppleBCMWLANCore ***)this + 5));
    AppleBCMWLANCore::linkChangeEvent(**((AppleBCMWLANCore ***)this + 5), 0, 0);
    AppleBCMWLANCore::isScanResumeAllowed(**((IO80211Controller ***)this + 5));
    AppleBCMWLANCore::sendHostScanStatsCoreAnalytics(**((AppleBCMWLANCore ***)this + 5));
    AppleBCMWLANCore::SendSlicesScanStatsCoreAnalytics(**((IOService ***)this + 5));
    if (AppleBCMWLANCore::checkForTrafficEngineeringSupport(**((AppleBCMWLANCore ***)this + 5))) {
      AppleBCMWLANCore::setupTrafficMonitoring(**((AppleBCMWLANCore ***)this + 5), 0);
    }
    AppleBCMWLANCore::handleLinkDown(**((AppleBCMWLANCore ***)this + 5));
    int v17 = (AppleBCMWLANLQM *)AppleBCMWLANCore::getLQM(**((AppleBCMWLANCore ***)this + 5));
    AppleBCMWLANLQM::stopAssocTimer(v17);
    uint64_t v18 = AppleBCMWLANCore::getLQM(**((AppleBCMWLANCore ***)this + 5));
    AppleBCMWLANLQM::updateNumOfMloLinks(v18, 0);
    AppleBCMWLANCore::resetWoWConfig(**((AppleBCMWLANCore ***)this + 5));
    return 0;
  }
  else
  {
    uint64_t v19 = 3766625283;
    if (v10 && CCLogStream::shouldLog()) {
      CCLogStream::logNotice(*(CCLogStream **)(*((void *)this + 5) + 32), "[dk] %s@%d: Link is already down\n", "setLinkDown", 921);
    }
  }
  return v19;
}

uint64_t AppleBCMWLANNetAdapter::setLinkUp(AppleBCMWLANCore ***this, ether_addr *a2, int a3, int a4)
{
  uint64_t v34 = 0;
  char v35 = &v34;
  uint64_t v36 = 0x2000000000;
  uint64_t v37 = 0;
  int isAssociated = AppleBCMWLANCore::isAssociated(*this[5]);
  int v33 = 0;
  unint64_t v32 = 0;
  *((unsigned char *)this[5] + 65) = 1;
  if (!a4) {
    goto LABEL_13;
  }
  uint64_t v9 = (const OSMetaClassBase *)(*(uint64_t (**)(void))(*(void *)*this[5] + 128))(*this[5]);
  uint64_t v10 = OSMetaClassBase::safeMetaCast(v9, (const OSMetaClass *)gAppleBCMWLANSkywalkInterfaceMetaClass);
  if (v10)
  {
    ((void (*)(OSMetaClassBase *, ether_addr *))v10->__vftable[33].Dispatch)(v10, a2);
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 1107296256;
    v31[2] = ___ZN22AppleBCMWLANNetAdapter9setLinkUpER10ether_addrbb_block_invoke;
    v31[3] = &__block_descriptor_tmp;
    v31[4] = &v34;
    v31[5] = this;
    uint64_t BssInfo = AppleBCMWLANNetAdapter::getBssInfo((uint64_t)this, (uint64_t)v31);
    if (!this[5][4] || !CCLogStream::shouldLog())
    {
      if (BssInfo) {
        goto LABEL_37;
      }
      goto LABEL_6;
    }
    CCLogStream::logAlert(this[5][4], "[dk] %s@%d:Set Link up isRoam =<%d> ret=<%d>\n", "setLinkUp", 1020, isAssociated, BssInfo);
    if (!BssInfo)
    {
LABEL_6:
      uint64_t v12 = (IO80211BSSBeacon *)v35[3];
      if (!v12) {
        goto LABEL_36;
      }
      if (!isAssociated)
      {
        AppleBCMWLANBssManager::setCurrentBSS(this[5][3], v12);
        AppleBCMWLANNetAdapter::updateMCSSetAsync((AppleBCMWLANNetAdapter *)this);
        AppleBCMWLANNetAdapter::updateRateSetAsync((AppleBCMWLANNetAdapter *)this);
        AppleBCMWLANCore::resetWoWConfig(*this[5]);
        if (!a3)
        {
LABEL_15:
          if (a4)
          {
            uint64_t CurrentBSS = AppleBCMWLANBssManager::getCurrentBSS(this[5][3]);
            if (((*(uint64_t (**)(uint64_t))(*(void *)CurrentBSS + 464))(CurrentBSS) & 8) != 0
              && AppleBCMWLANCore::checkForSaePKSupport(*this[5])
              && AppleBCMWLANCore::checkForWPA3SAESupport(*this[5]))
            {
              JoinAdapter = (AppleBCMWLANJoinAdapter *)AppleBCMWLANCore::getJoinAdapter(*this[5]);
              AppleBCMWLANJoinAdapter::getAssociatedRSNXE(JoinAdapter);
            }
            LQM = (AppleBCMWLANLQM *)AppleBCMWLANCore::getLQM(*this[5]);
            AppleBCMWLANLQM::resetLinkQualityMetrics(LQM, -1);
            uint64_t v22 = (AppleBCMWLANLQM *)AppleBCMWLANCore::getLQM(*this[5]);
            AppleBCMWLANLQM::updateLinkQualityMetrics(v22, 0);
            AppleBCMWLANCore::setNeedsScanSnapshotAtLinkUp((uint64_t)*this[5], 1);
            AppleBCMWLANCore::resetInactivityAndSleepStats((uint64_t)*this[5]);
            uint64_t v23 = *(void *)AppleBCMWLANBssManager::getCurrentBSS(this[5][3]);
            __int16 v24 = (*(uint64_t (**)(void))(v23 + 264))();
            uint64_t v25 = (uint64_t)*this[5];
            if ((v24 & 0xC000) != 0)
            {
              AppleBCMWLANCore::setIsInfraOn2G(v25, 0);
              if (isAssociated)
              {
LABEL_25:
                AppleBCMWLANCore::resetScanRoamStats(*this[5]);
                AppleBCMWLANCore::resetSlicesScanModeStats(*this[5]);
                if (AppleBCMWLANCore::checkForTrafficEngineeringSupport(*this[5])) {
                  AppleBCMWLANCore::setupTrafficMonitoring(*this[5], 1);
                }
                if (AppleBCMWLANCore::checkForQoSMgmtSupport(*this[5])
                  && AppleBCMWLANCore::getQoSMSCSFeatureFlag(*this[5])
                  && AppleBCMWLANCore::getQoSRealTimeAppActiveStatus(*this[5]))
                {
                  AppleBCMWLANCore::sendQoSMgmtMSCSReq(*this[5], 1);
                }
                IO80211BssManager::getCurrentChannel();
                AppleBCMWLANCore::reportWiFiChanTransitionToSac(*this[5], v32, v33, 1u);
                AppleBCMWLANCore::collectWmeParameters(*this[5]);
                if (isAssociated) {
                  AppleBCMWLANCore::configureSupplicantTimeOutForEAPAssociation(*this[5]);
                }
                __int16 v27 = (AppleBCMWLANLQM *)AppleBCMWLANCore::getLQM(*this[5]);
                AppleBCMWLANLQM::startAssocTimer(v27);
                if (AppleBCMWLANCore::featureFlagIsBitSet(*this[5], 115)
                  && AppleBCMWLANCore::get11beAdapter(*this[5]))
                {
                  int v28 = (AppleBCMWLANCore ***)AppleBCMWLANCore::get11beAdapter(*this[5]);
                  AppleBCMWLAN11beAdapter::getMloStatus(v28);
                }
                goto LABEL_36;
              }
            }
            else
            {
              AppleBCMWLANCore::setIsInfraOn2G(v25, 1);
              TxPowerManager = (AppleBCMWLANCore ***)AppleBCMWLANCore::getTxPowerManager(*this[5]);
              AppleBCMWLANTxPowerManager::dynTxSDBStartUpdate(TxPowerManager, 1);
              if (isAssociated) {
                goto LABEL_25;
              }
            }
            AppleBCMWLANCore::linkChangeEvent(*this[5], 0, 1);
            goto LABEL_25;
          }
LABEL_36:
          uint64_t BssInfo = 0;
          goto LABEL_37;
        }
LABEL_14:
        uint64_t v18 = *(void *)(*(uint64_t (**)(void))(*(void *)*this[5] + 128))(*this[5]);
        (*(void (**)(void))(v18 + 624))();
        goto LABEL_15;
      }
      if (!(*(unsigned int (**)(IO80211BSSBeacon *))(*(void *)v12 + 128))(v12)
        || (*(unsigned int (**)(uint64_t))(*(void *)v35[3] + 128))(v35[3]) == 1
        && *(unsigned char *)(*(uint64_t (**)(uint64_t))(*(void *)v35[3] + 96))(v35[3]) == 32)
      {
        uint64_t v13 = v35[3];
        uint64_t v14 = AppleBCMWLANBssManager::getCurrentBSS(this[5][3]);
        uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 88))(v14);
        uint64_t v16 = AppleBCMWLANBssManager::getCurrentBSS(this[5][3]);
        uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 128))(v16);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13 + 112))(v13, v15, v17);
      }
      AppleBCMWLANCore::buildRoamCompletionStatus(*this[5], (IO80211BSSBeacon *)v35[3]);
      AppleBCMWLANBssManager::setCurrentBSS(this[5][3], (IO80211BSSBeacon *)v35[3]);
      AppleBCMWLANNetAdapter::updateMCSSetAsync((AppleBCMWLANNetAdapter *)this);
      AppleBCMWLANNetAdapter::updateRateSetAsync((AppleBCMWLANNetAdapter *)this);
      AppleBCMWLANCore::collectDtimConfigFromFW(*this[5]);
LABEL_13:
      if (!a3) {
        goto LABEL_15;
      }
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t BssInfo = 3758097084;
  }
LABEL_37:
  uint64_t v29 = v35[3];
  if (v29)
  {
    (*(void (**)(uint64_t))(*(void *)v29 + 16))(v29);
    v35[3] = 0;
  }
  *((unsigned char *)this[5] + 65) = 0;
  _Block_object_dispose(&v34, 8);
  return BssInfo;
}

uint64_t AppleBCMWLANNetAdapter::getBssInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 3758097084;
  if (a2)
  {
    uint64_t v5 = (_DWORD *)IOMallocZeroData();
    if (v5)
    {
      int v6 = v5;
      *uint64_t v5 = 1936;
      v12[0] = v5;
      v12[1] = 0x79000880790;
      int v7 = *(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 8);
      v11[0] = v6;
      v11[1] = 4;
      uint64_t v8 = AppleBCMWLANCommander::runIOCtlGet(v7, 136, (uint64_t)v11, (uint64_t)v12, 0);
      if (v8)
      {
        uint64_t v2 = v8;
        if (*(void *)(*(void *)(a1 + 40) + 32) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 32), "[dk] %s@%d:Fw fail command WLC_GET_BSS_INFO \n", "getBssInfo", 1326);
        }
      }
      else
      {
        uint64_t ChanSpecHandler = (int **)AppleBCMWLANCore::getChanSpecHandler(**(AppleBCMWLANCore ***)(a1 + 40));
        LOWORD(v11[0]) = AppleBCMWLANChanSpec::getAppleChannelSpec(ChanSpecHandler, *((unsigned __int16 *)v6 + 38));
        uint64_t v2 = (*(uint64_t (**)(uint64_t, _DWORD *, void *))(a2 + 16))(a2, v6 + 1, v11);
      }
      IOFreeData();
    }
    else
    {
      return 3758097085;
    }
  }
  return v2;
}

uint64_t ___ZN22AppleBCMWLANNetAdapter9setLinkUpER10ether_addrbb_block_invoke(uint64_t a1, unsigned int *a2, __int16 *a3)
{
  __int16 v5 = *a3;
  size_t v6 = a2[1];
  int v7 = *(void **)(*(void *)(a1 + 40) + 40);
  uint64_t v8 = v7[4];
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)*v7 + 1840))(*v7);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = AppleBCMWLANBSSBeacon::fromWLBSSInfo(a2, v5, v6, v8, v9);
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    return 0;
  }
  else {
    return 3758097084;
  }
}

void __copy_helper_block_8_32r(uint64_t a1, uint64_t a2)
{
}

void __destroy_helper_block_8_32r(uint64_t a1)
{
}

uint64_t AppleBCMWLANNetAdapter::updateMCSSetAsync(AppleBCMWLANNetAdapter *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (!*(unsigned char *)(v1 + 66)) {
    return 3825172759;
  }
  v11[0] = this;
  v11[1] = AppleBCMWLANNetAdapter::updateMCSSetAsyncCallback;
  void v11[2] = 0;
  if (AppleBCMWLANCore::getFirmwareInterfaceVersion(*(AppleBCMWLANCore **)v1) >= 7)
  {
    if (AppleBCMWLANCore::getFirmwareInterfaceVersion(**((AppleBCMWLANCore ***)this + 5)) >= 0xF) {
      int v3 = 5767256;
    }
    else {
      int v3 = 4718664;
    }
  }
  else
  {
    int v3 = 3407924;
  }
  __int16 v5 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
  int v10 = v3;
  uint64_t v4 = AppleBCMWLANCommander::sendIOVarGet(v5, (uint64_t)"cur_rateset", (uint64_t)&kNoTxPayload, (unsigned __int16 *)&v10, (uint64_t)v11, 0);
  if (v4 && *(void *)(*((void *)this + 5) + 32) && CCLogStream::shouldLog())
  {
    int v7 = (void *)*((void *)this + 5);
    uint64_t v8 = (CCLogStream *)v7[4];
    uint64_t v9 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v7 + 112))(*v7, v4);
    CCLogStream::logCrit(v8, "[dk] %s@%d: cur_rateset send async failed, error %s\n", "updateMCSSetAsync", 1356, v9);
  }
  return v4;
}

uint64_t AppleBCMWLANNetAdapter::updateRateSetAsync(AppleBCMWLANNetAdapter *this)
{
  v9[0] = this;
  v9[1] = AppleBCMWLANNetAdapter::updateRateSetAsyncCallback;
  void v9[2] = 0;
  uint64_t v2 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
  int v8 = 1310740;
  uint64_t v3 = AppleBCMWLANCommander::sendIOCtlGet(v2, 114, (uint64_t)&kNoTxPayload, (unsigned __int16 *)&v8, (uint64_t)v9, 0);
  if (v3 && *(void *)(*((void *)this + 5) + 32) && CCLogStream::shouldLog())
  {
    __int16 v5 = (void *)*((void *)this + 5);
    size_t v6 = (CCLogStream *)v5[4];
    int v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 112))(*v5, v3);
    CCLogStream::logCrit(v6, "[dk] %s@%d: WLC_GET_CURR_RATESET send async failed, error %s\n", "updateRateSetAsync", 1522, v7);
  }
  return v3;
}

uint64_t AppleBCMWLANNetAdapter::leaveNetworkRequest(AppleBCMWLANCore ***a1, uint64_t a2)
{
  return AppleBCMWLANNetAdapter::leaveNetworkSync(a1, *(_DWORD *)a2, *(unsigned char *)(a2 + 16) == 0, *(_DWORD *)(a2 + 4), *(unsigned __int16 *)(a2 + 10), *(unsigned int *)(a2 + 19) | ((unint64_t)*(unsigned __int16 *)(a2 + 23) << 32), "WCL Requsted");
}

uint64_t AppleBCMWLANNetAdapter::leaveNetworkSync(AppleBCMWLANCore ***a1, unsigned int a2, unsigned int a3, int a4, unsigned int a5, uint64_t a6, const char *a7)
{
  int v8 = a1[5];
  if (*((unsigned char *)v8 + 64))
  {
    if (v8[4] && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(a1[5][4], "[dk] %s@%d:kDeauthdCurrNetwork already set. Skipping call to leaveNetworkSync\n", "leaveNetworkSync", 1146);
    }
    return 0;
  }
  else
  {
    if (a5)
    {
      AppleBCMWLANNetAdapter::setDisassocDelay(a1, a5);
      int v8 = a1[5];
    }
    JoinAdapter = (AppleBCMWLANJoinAdapter *)AppleBCMWLANCore::getJoinAdapter(*v8);
    AppleBCMWLANJoinAdapter::disableICVErrorEventsAsync(JoinAdapter);
    v46[1] = a6;
    __int16 v48 = -21846;
    v46[0] = a2;
    __int16 v47 = WORD2(a6);
    *((unsigned char *)a1[5] + 64) = 1;
    int isEnhancedDisassociationReasonEnabled = AppleBCMWLANConfigManager::isEnhancedDisassociationReasonEnabled(a1[5][2]);
    if (a4) {
      int v17 = isEnhancedDisassociationReasonEnabled;
    }
    else {
      int v17 = 0;
    }
    if (v17 == 1) {
      AppleBCMWLANNetAdapter::setEnhancedDisassocParams((uint64_t)a1, 1, a4, 6);
    }
    int v18 = AppleBCMWLANCore::checkForBeaconDriftMitiSupport(*a1[5]);
    uint64_t v19 = a1[5];
    if (v18)
    {
      if (v19[4])
      {
        int shouldLog = CCLogStream::shouldLog();
        uint64_t v19 = a1[5];
        if (shouldLog)
        {
          CCLogStream::logInfo(v19[4], "[dk] %s@%d: Configuring Beacon drift mitigation params for active non IBSS mode (Sync)\n", "leaveNetworkSync", 1183);
          uint64_t v19 = a1[5];
        }
      }
      int isAssociated = AppleBCMWLANCore::isAssociated(*v19);
      uint64_t v19 = a1[5];
      if (isAssociated)
      {
        int OPMode = IO80211BssManager::getOPMode(v19[3]);
        uint64_t v19 = a1[5];
        if (OPMode != 2)
        {
          if (v19[4])
          {
            int v23 = CCLogStream::shouldLog();
            uint64_t v19 = a1[5];
            if (v23)
            {
              CCLogStream::logInfo(v19[4], "[dk] %s@%d: Configuring Beacon drift mitigation params to FW Active Link Loss\n", "leaveNetworkSync", 1185);
              uint64_t v19 = a1[5];
            }
          }
          uint64_t v24 = AppleBCMWLANConfigManager::configureBeaconDriftOffsetConfig(v19[2], 0);
          uint64_t v19 = a1[5];
          if (v24)
          {
            uint64_t v25 = v24;
            if (v19[4])
            {
              int v26 = CCLogStream::shouldLog();
              uint64_t v19 = a1[5];
              if (v26)
              {
                int v43 = v17;
                int v40 = v19[4];
                long long v42 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)*v19 + 112))(*v19, v25);
                __int16 v41 = v40;
                int v17 = v43;
                CCLogStream::logAlert(v41, "[dk] %s@%d: Configuring Beacon drift mitigation params failed: %s\n", "leaveNetworkSync", 1188, v42);
                uint64_t v19 = a1[5];
              }
            }
          }
        }
      }
    }
    v45[0] = v46;
    v45[1] = 0xC000C000CLL;
    if (v19[4])
    {
      int v27 = CCLogStream::shouldLog();
      uint64_t v19 = a1[5];
      if (v27)
      {
        uint64_t v34 = v19[4];
        if (a3 <= 1) {
          char v35 = mapLeaveMethodToBcomCmdString(LeaveMethod)::map[a3];
        }
        else {
          char v35 = "???";
        }
        int v38 = "unkown";
        if (a7) {
          int v38 = a7;
        }
        CCLogStream::logAlert(v34, "[dk] %s@%d: Host sending firmware ('%s')/%u, method[%u] reason[%u] info[%u] helpString[%s]\n", "leaveNetworkSync", 1197, v35, v46[0], a3, a2, a4, v38);
        uint64_t v19 = a1[5];
      }
    }
    int v28 = v19[1];
    if (a3 <= 1) {
      int v29 = mapLeaveMethodToBcomCmd(LeaveMethod)::map[a3];
    }
    else {
      int v29 = 52;
    }
    v44[0] = v46;
    v44[1] = 12;
    uint64_t v9 = AppleBCMWLANCommander::runIOCtlSet(v28, v29, (uint64_t)v44, (uint64_t)v45, 0);
    uint64_t v30 = a1[5];
    if (v9)
    {
      if (v30[4])
      {
        int v31 = CCLogStream::shouldLog();
        uint64_t v30 = a1[5];
        if (v31)
        {
          uint64_t v36 = v30[4];
          if (a3 <= 1) {
            uint64_t v37 = mapLeaveMethodToBcomCmdString(LeaveMethod)::map[a3];
          }
          else {
            uint64_t v37 = "???";
          }
          __int16 v39 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)*v30 + 112))(*v30, v9);
          CCLogStream::logCrit(v36, "[dk] %s@%d: %s(%lu) failed, error %s\n", "leaveNetworkSync", 1201, v37, a2, v39);
          uint64_t v30 = a1[5];
        }
      }
      *((unsigned char *)v30 + 64) = 0;
      AppleBCMWLANCore::recoverFromDisassocFailure((uint64_t)*a1[5], v9);
    }
    else
    {
      if (AppleBCMWLANCore::checkForTrafficEngineeringSupport(*v30)) {
        AppleBCMWLANCore::setupTrafficMonitoring(*a1[5], 0);
      }
      AppleBCMWLANNetAdapter::setDefaultWMEParamsSync((AppleBCMWLANNetAdapter *)a1);
      IO80211BssManager::resetRateAndIndexSet(a1[5][3]);
      PowerManager = (AppleBCMWLANPowerManager *)AppleBCMWLANCore::getPowerManager(*a1[5]);
      AppleBCMWLANPowerManager::handleLinkDownConfiguration(PowerManager);
      AppleBCMWLANNetAdapter::clearAdHocCreated((AppleBCMWLANNetAdapter *)a1);
      if (v17) {
        AppleBCMWLANNetAdapter::setEnhancedDisassocParams((uint64_t)a1, 0, a4, 6);
      }
      AppleBCMWLANCore::clearLPASConfigState((uint64_t)*a1[5]);
      *((unsigned char *)a1[5] + 64) = 0;
    }
  }
  return v9;
}

uint64_t AppleBCMWLANNetAdapter::setDisassocDelay(AppleBCMWLANCore ***this, unsigned int a2)
{
  unsigned int v15 = a2;
  uint64_t v4 = *(void *)AppleBCMWLANCore::getBus(*this[5]);
  if ((*(unsigned int (**)(void))(v4 + 368))() <= 0x1122)
  {
    if (a2 >= 0xA) {
      int v5 = 10;
    }
    else {
      int v5 = a2;
    }
    unsigned int v15 = v5;
  }
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)*this[5] + 88))(*this[5]);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 136))(v6))
  {
    uint64_t v12 = this;
    uint64_t v13 = (uint64_t)AppleBCMWLANNetAdapter::setDisassocDelayAsyncCallback;
    uint64_t v14 = 0;
    uint64_t v7 = AppleBCMWLANCommander::sendIOVarSet(this[5][1], (uint64_t)"disassoc_dly");
  }
  else
  {
    int v8 = this[5][1];
    uint64_t v12 = (AppleBCMWLANCore ***)&v15;
    uint64_t v13 = 4;
    uint64_t v7 = AppleBCMWLANCommander::runIOVarSet(v8, (uint64_t)"disassoc_dly", (uint64_t)&v12, 0, 0);
  }
  uint64_t v9 = v7;
  int v10 = this[5][4];
  if (v9)
  {
    if (v10 && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(this[5][4], "[dk] %s@%d:Could not set disassoc_dly %u: error %x\n", "setDisassocDelay", 2358, v15, v9);
    }
  }
  else if (v10 && CCLogStream::shouldLog())
  {
    CCLogStream::logInfo(this[5][4], "[dk] %s@%d:disassoc_dly is set to %d\n", "setDisassocDelay", 2360, v15);
  }
  return v9;
}

uint64_t AppleBCMWLANNetAdapter::clearAdHocCreated(AppleBCMWLANNetAdapter *this)
{
  uint64_t result = IO80211BssManager::isAdhocCreated(*(IO80211BssManager **)(*((void *)this + 5) + 24));
  if (result)
  {
    char v3 = AppleBCMWLANCore::useAppleRSNSupplicant(**((AppleBCMWLANCore ***)this + 5));
    uint64_t v4 = (void *)*((void *)this + 5);
    if ((v3 & 1) == 0)
    {
      unsigned int v16 = 1;
      uint64_t v5 = (*(uint64_t (**)(void))(*(void *)*v4 + 88))();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 136))(v5))
      {
        uint64_t v13 = (unsigned int *)this;
        uint64_t v14 = (uint64_t)AppleBCMWLANNetAdapter::handleConfigureSupplicantAsyncCallback;
        uint64_t v15 = 0;
        uint64_t v6 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 5) + 8), (uint64_t)"sup_wpa");
      }
      else
      {
        uint64_t v7 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
        uint64_t v13 = &v16;
        uint64_t v14 = 4;
        uint64_t v6 = AppleBCMWLANCommander::runIOVarSet(v7, (uint64_t)"sup_wpa", (uint64_t)&v13, 0, 0);
      }
      uint64_t v8 = v6;
      uint64_t v4 = (void *)*((void *)this + 5);
      if (v6 && v4[4])
      {
        int shouldLog = CCLogStream::shouldLog();
        uint64_t v4 = (void *)*((void *)this + 5);
        if (shouldLog)
        {
          int v10 = (CCLogStream *)v4[4];
          uint64_t v11 = v16;
          uint64_t v12 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v4 + 112))(*v4, v8);
          CCLogStream::logCrit(v10, "[dk] %s@%d: sup_wpa(%lu) failed, error %s\n", "clearAdHocCreated", 1699, v11, v12);
          uint64_t v4 = (void *)*((void *)this + 5);
        }
      }
    }
    return IO80211BssManager::setAdHocCreated((IO80211BssManager *)v4[3], 0);
  }
  return result;
}

uint64_t AppleBCMWLANNetAdapter::sendInternalLinkDownInd(AppleBCMWLANNetAdapter *this)
{
  memset(v4, 0, 7);
  uint64_t v2 = *(void *)(*(uint64_t (**)(void))(***((void ***)this + 5) + 128))(**((void **)this + 5));
  v4[7] = (*(uint64_t (**)(void))(v2 + 616))();
  int v5 = 9;
  return AppleBCMWLANCore::postMessageInfra(**((AppleBCMWLANCore ***)this + 5), 0xD8u, v4, 0xCuLL);
}

uint64_t AppleBCMWLANNetAdapter::quiesce(AppleBCMWLANCore ***this)
{
  LQM = (AppleBCMWLANLQM *)AppleBCMWLANCore::getLQM(*this[5]);
  AppleBCMWLANLQM::stopAssocTimer(LQM);
  return 0;
}

uint64_t AppleBCMWLANNetAdapter::getExtendedBssInfo(AppleBCMWLANCore ***a1, uint64_t a2)
{
  if (!a2) {
    return 3758097084;
  }
  uint64_t result = AppleBCMWLANNetAdapter::updateRateSetSync((uint64_t)a1, a2);
  if (!result)
  {
    uint64_t result = AppleBCMWLANNetAdapter::updateMCSSetSyc((uint64_t)a1, a2 + 188, a2 + 204, a2 + 212);
    if (!result)
    {
      AppleBCMWLANNetAdapter::getAssociatedWPARSNIESync((AppleBCMWLANNetAdapter *)a1, (unsigned __int8 *)(a2 + 221), 0x101u);
      uint64_t result = AppleBCMWLANCore::featureFlagIsBitSet(*a1[5], 115);
      if (result)
      {
        uint64_t result = AppleBCMWLANCore::get11beAdapter(*a1[5]);
        if (result)
        {
          int v5 = (AppleBCMWLAN11beAdapter *)AppleBCMWLANCore::get11beAdapter(*a1[5]);
          BOOL isMloConnection = AppleBCMWLAN11beAdapter::isMloConnection(v5);
          uint64_t result = 0;
          *(unsigned char *)(a2 + 220) = isMloConnection;
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANNetAdapter::updateRateSetSync(uint64_t a1, uint64_t a2)
{
  memset(v10, 170, 20);
  v9[0] = v10;
  v9[1] = 0x1400140014;
  uint64_t v4 = AppleBCMWLANCommander::runIOCtlGet(*(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 8), 114, (uint64_t)&kNoTxPayload, (uint64_t)v9, 0);
  if (v4)
  {
    if (*(void *)(*(void *)(a1 + 40) + 32) && CCLogStream::shouldLog())
    {
      int v5 = *(void **)(a1 + 40);
      uint64_t v6 = (CCLogStream *)v5[4];
      uint64_t v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 112))(*v5, v4);
      CCLogStream::logCrit(v6, "[dk] %s@%d: WLC_GET_CURR_RATESET send async failed, error %s\n", "updateRateSetSync", 1537, v7);
    }
  }
  else
  {
    mapBcomRatesetToAppleRateset(a2, v10);
  }
  return v4;
}

uint64_t AppleBCMWLANNetAdapter::updateMCSSetSyc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (!*(unsigned char *)(v4 + 66)) {
    return 3825172759;
  }
  if (AppleBCMWLANCore::getFirmwareInterfaceVersion(*(AppleBCMWLANCore **)v4) >= 7)
  {
    if (AppleBCMWLANCore::getFirmwareInterfaceVersion(**(AppleBCMWLANCore ***)(a1 + 40)) >= 0xF) {
      unsigned int v9 = 88;
    }
    else {
      unsigned int v9 = 72;
    }
  }
  else
  {
    unsigned int v9 = 52;
  }
  uint64_t v11 = v9;
  uint64_t v12 = IOMallocZeroData();
  if (!v12) {
    return 3758097085;
  }
  uint64_t v13 = (long long *)v12;
  v18[0] = v12;
  v18[1] = v11 | ((unint64_t)(v11 | (v11 << 16)) << 16);
  uint64_t v10 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 8), (uint64_t)"cur_rateset", (uint64_t)&kNoTxPayload, (uint64_t)v18, 0);
  if (v10)
  {
    if (*(void *)(*(void *)(a1 + 40) + 32) && CCLogStream::shouldLog())
    {
      uint64_t v14 = *(void **)(a1 + 40);
      uint64_t v15 = (CCLogStream *)v14[4];
      unsigned int v16 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v14 + 112))(*v14, v10);
      CCLogStream::logCrit(v15, "[dk] %s@%d: cur_rateset send async failed, error %s\n", "updateMCSSetSyc", 1394, v16);
    }
  }
  else
  {
    AppleBCMWLANNetAdapter::updateMCSSet(a1, v13, a2, a3, a4);
  }
  IOFreeData();
  return v10;
}

uint64_t AppleBCMWLANNetAdapter::getAssociatedWPARSNIESync(AppleBCMWLANNetAdapter *this, unsigned __int8 *a2, unsigned int a3)
{
  BOOL v4 = a2 != 0;
  BOOL v5 = a3 != 0;
  BOOL v6 = !v4 || !v5;
  if (v4 && v5) {
    uint64_t v7 = a3 | 0x10101010000;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v6) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = a2;
  }
  v15[0] = v8;
  v15[1] = v7;
  uint64_t v9 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*((void *)this + 5) + 8), (uint64_t)"wpaie", (uint64_t)&kNoTxPayload, (uint64_t)v15, 0);
  if (v9)
  {
    uint64_t v10 = v9;
    if (*(void *)(*((void *)this + 5) + 32))
    {
      if (CCLogStream::shouldLog())
      {
        uint64_t v12 = (void *)*((void *)this + 5);
        uint64_t v13 = (CCLogStream *)v12[4];
        uint64_t v14 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v12 + 112))(*v12, v10);
        CCLogStream::logCrit(v13, "[dk] %s@%d: wpaie failed, error %s\n", "getAssociatedWPARSNIESync", 1895, v14);
      }
    }
  }
  return 0;
}

uint64_t AppleBCMWLANNetAdapter::updateMCSSetAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v4 = result;
  if (a3)
  {
    if (a3 == -469794537)
    {
      *(unsigned char *)(*(void *)(result + 40) + 66) = 0;
    }
    else
    {
      uint64_t result = *(void *)(*(void *)(result + 40) + 32);
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          uint64_t v7 = *(void **)(v4 + 40);
          uint64_t v8 = (CCLogStream *)v7[4];
          uint64_t v9 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v7 + 112))(*v7, a3);
          return CCLogStream::logAlert(v8, "[dk] %s@%d:Error: cannot get cur_rateset: %s\n", "updateMCSSetAsyncCallback", 1495, v9);
        }
      }
    }
  }
  else
  {
    BOOL v6 = *a4;
    if (*a4)
    {
      v12[0] = 0;
      v12[1] = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      return AppleBCMWLANNetAdapter::updateMCSSet(result, v6, (uint64_t)v12, (uint64_t)&v11, (uint64_t)&v10);
    }
  }
  return result;
}

uint64_t AppleBCMWLANNetAdapter::updateMCSSet(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = 0;
  long long v26 = 0u;
  memset(v25, 0, sizeof(v25));
  if (AppleBCMWLANCore::getFirmwareInterfaceVersion(**(AppleBCMWLANCore ***)(a1 + 40)) > 6)
  {
    if (AppleBCMWLANCore::getFirmwareInterfaceVersion(**(AppleBCMWLANCore ***)(a1 + 40)) > 0xE)
    {
      long long v11 = a2[3];
      v25[1] = a2[2];
      v25[2] = v11;
      long long v26 = a2[4];
      uint64_t v27 = *((void *)a2 + 10);
    }
    else
    {
      long long v10 = a2[3];
      v25[1] = a2[2];
      v25[2] = v10;
      *(void *)&long long v26 = *((void *)a2 + 8);
    }
    long long v24 = *a2;
    v25[0] = a2[1];
  }
  else
  {
    DWORD1(v24) = *(_DWORD *)a2;
    *(_OWORD *)((char *)v25 + 8) = *(long long *)((char *)a2 + 20);
    *(_OWORD *)((char *)&v25[1] + 8) = *(long long *)((char *)a2 + 36);
  }
  if (DWORD1(v24) >= 0xA) {
    int v12 = 10;
  }
  else {
    int v12 = DWORD1(v24);
  }
  if (v12)
  {
    if (DWORD1(v24) >= 0xA) {
      size_t v13 = 10;
    }
    else {
      size_t v13 = DWORD1(v24);
    }
    memcpy((void *)(a3 + 4), (char *)v25 + 8, v13);
  }
  IO80211BssManager::setMCSIndexSet();
  *(_WORD *)(a4 + 4) = -1;
  if (!AppleBCMWLANCore::isFWAPIVer11nOnly(**(AppleBCMWLANCore ***)(a1 + 40)))
  {
    if (AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(*(void *)(a1 + 40) + 24)))
    {
      uint64_t CurrentBSS = AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(*(void *)(a1 + 40) + 24));
      if ((*(unsigned int (**)(uint64_t))(*(void *)CurrentBSS + 448))(CurrentBSS))
      {
        uint64_t v15 = 0;
        int v16 = *(unsigned __int16 *)(a4 + 4);
        do
        {
          int16x4_t v17 = (int16x4_t)vand_s8((int8x8_t)vmovn_s32(vtstq_s32(vdupq_n_s32(*(unsigned __int16 *)((char *)&v25[1] + v15 + 8)), (int32x4_t)xmmword_1003037F0)), (int8x8_t)0x1000100010001);
          v17.i16[3] = 0;
          __int16 v18 = vaddv_s16(v17);
          if ((unsigned __int16)(v18 - 1) <= 2u)
          {
            int v16 = v16 & ~(3 << v15) | ((((_BYTE)v18 - 1) & 3) << v15);
            *(_WORD *)(a4 + 4) = v16;
          }
          v15 += 2;
        }
        while (v15 != 16);
      }
    }
  }
  IO80211BssManager::setVHTMCSIndexSet();
  if (!AppleBCMWLANCore::isFWAPIVer11nOnly(**(AppleBCMWLANCore ***)(a1 + 40))
    && AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(*(void *)(a1 + 40) + 24))
    && (uint64_t v19 = AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(*(void *)(a1 + 40) + 24)),
        (*(unsigned int (**)(uint64_t))(*(void *)v19 + 456))(v19)))
  {
    uint64_t v20 = 0;
    int v21 = *(unsigned __int16 *)(a5 + 4);
    do
    {
      int v21 = v21 & ~(3 << v20) | ((*(_WORD *)((unsigned char *)&v25[2] + v20 + 8) & 3) << v20);
      v20 += 2;
    }
    while (v20 != 16);
    *(_WORD *)(a5 + 4) = v21;
  }
  else
  {
    *(_WORD *)(a5 + 4) = -1;
  }
  uint64_t v22 = *(void *)(*(void *)(a1 + 40) + 24);
  return IO80211BssManager::setHEMCSIndexSet(v22, a5);
}

uint64_t AppleBCMWLANNetAdapter::updateRateSetAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v4 = result;
  if (a3)
  {
    uint64_t result = *(void *)(*(void *)(result + 40) + 32);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        BOOL v6 = *(void **)(v4 + 40);
        uint64_t v7 = (CCLogStream *)v6[4];
        uint64_t v8 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v6 + 112))(*v6, a3);
        return CCLogStream::logAlert(v7, "[dk] %s@%d:Error: cannot get CURR_RATESET: %s\n", "updateRateSetAsyncCallback", 1562, v8);
      }
    }
  }
  else
  {
    uint64_t v9 = *a4;
    if (*a4)
    {
      long long v10 = *v9;
      int v12 = *((_DWORD *)v9 + 4);
      long long v11 = v10;
      *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&v14[12] = v10;
      v13[9] = v10;
      *(_OWORD *)uint64_t v14 = v10;
      v13[7] = v10;
      v13[8] = v10;
      v13[5] = v10;
      v13[6] = v10;
      v13[3] = v10;
      v13[4] = v10;
      v13[1] = v10;
      void v13[2] = v10;
      v13[0] = v10;
      mapBcomRatesetToAppleRateset((uint64_t)v13, &v11);
      return IO80211BssManager::setRateSet();
    }
  }
  return result;
}

uint64_t AppleBCMWLANNetAdapter::setRealTimeVoViEcwmax(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 40) + 48) = a2;
  return this;
}

uint64_t AppleBCMWLANNetAdapter::isRealTimeTrafficSettingEnabled(AppleBCMWLANNetAdapter *this)
{
  return *(unsigned __int8 *)(*((void *)this + 5) + 52);
}

uint64_t AppleBCMWLANNetAdapter::getLastRealTimeChange(AppleBCMWLANNetAdapter *this)
{
  return *(void *)(*((void *)this + 5) + 56);
}

uint64_t AppleBCMWLANNetAdapter::setQosParams(AppleBCMWLANNetAdapter *this, _DWORD *a2)
{
  char v4 = *((unsigned char *)a2 + 22);
  if (v4)
  {
    uint64_t v5 = AppleBCMWLANNetAdapter::configureRetryLimit(this, *a2);
    if (v5) {
      goto LABEL_19;
    }
    char v4 = *((unsigned char *)a2 + 22);
  }
  if ((v4 & 2) != 0)
  {
    uint64_t v5 = AppleBCMWLANNetAdapter::configureRTSThreshold(this, a2[1]);
    if (v5) {
      goto LABEL_19;
    }
    char v4 = *((unsigned char *)a2 + 22);
  }
  if ((v4 & 0x10) != 0)
  {
    uint64_t v5 = AppleBCMWLANNetAdapter::configurePM((uint64_t)this, a2[4]);
    if (!v5)
    {
      char v4 = *((unsigned char *)a2 + 22);
      goto LABEL_10;
    }
LABEL_19:
    uint64_t v6 = v5;
    goto LABEL_15;
  }
LABEL_10:
  if ((v4 & 4) != 0)
  {
    AppleBCMWLANNetAdapter::configureLifeTime(this);
    char v4 = *((unsigned char *)a2 + 22);
  }
  if ((v4 & 8) != 0) {
    AppleBCMWLANNetAdapter::configureLifeTime(this);
  }
  uint64_t v6 = 0;
LABEL_15:
  if (*(void *)(*((void *)this + 5) + 32) && CCLogStream::shouldLog())
  {
    unsigned int v8 = *((unsigned __int8 *)a2 + 22);
    CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 32), "[dk] %s@%d:retryCount=<%d:%d> rtsThreshold=<%d:%d> pmMode=<%d:%d> voLifeTime=<%d:%d> viLifeTime=<%d:%d> rv=<%x>\n", "setQosParams", 1656, *a2, v8 & 1, a2[1], (v8 >> 1) & 1, a2[4], (v8 >> 4) & 1, a2[2], (v8 >> 2) & 1, a2[3], (v8 >> 3) & 1, v6);
  }
  return v6;
}

uint64_t AppleBCMWLANNetAdapter::configurePM(uint64_t a1, int a2)
{
  int v12 = 2 * (a2 != 0);
  v11[0] = a1;
  v11[1] = AppleBCMWLANNetAdapter::setPowerManagementAsyncCallback;
  void v11[2] = 0;
  char v3 = *(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 8);
  v10[0] = &v12;
  v10[1] = 4;
  int v9 = 262148;
  uint64_t v4 = AppleBCMWLANCommander::sendIOCtlSet(v3, 86, (uint64_t)v10, (unsigned __int16 *)&v9, (uint64_t)v11, 0);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 32);
  if (v4)
  {
    if (v5 && CCLogStream::shouldLog())
    {
      uint64_t v6 = *(void **)(a1 + 40);
      uint64_t v7 = (CCLogStream *)v6[4];
      (*(void (**)(void, uint64_t))(*(void *)*v6 + 112))(*v6, v4);
      CCLogStream::logAlert(v7, "[dk] %s@%d: Error: cannot set PM: ret %d: %s\n");
    }
  }
  else if (v5 && CCLogStream::shouldLog())
  {
    CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 32), "[dk] %s@%d: Powersave mode to: %ld\n");
  }
  return v4;
}

uint64_t AppleBCMWLANNetAdapter::configureLifeTime(AppleBCMWLANNetAdapter *this)
{
  uint64_t result = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 5) + 8), (uint64_t)"lifetime");
  if (result)
  {
    uint64_t v3 = result;
    if (*(void *)(*((void *)this + 5) + 32))
    {
      if (CCLogStream::shouldLog())
      {
        uint64_t v4 = (void *)*((void *)this + 5);
        uint64_t v5 = (CCLogStream *)v4[4];
        uint64_t v6 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v4 + 112))(*v4, v3);
        CCLogStream::logAlert(v5, "[dk] %s@%d: Error: Unable to set packet lifetime. ret %s\n", "configureLifeTime", 2389, v6);
      }
    }
    return 6;
  }
  return result;
}

uint64_t AppleBCMWLANNetAdapter::setPowerManagementAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(*(void *)(result + 40) + 32);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = *(void **)(v3 + 40);
        uint64_t v6 = (CCLogStream *)v5[4];
        uint64_t v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 112))(*v5, a3);
        return CCLogStream::logCrit(v6, "[dk] %s@%d: setting powermanagement failure, error %s\n", "setPowerManagementAsyncCallback", 2128, v7);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANNetAdapter::handleConfigureSupplicantAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(*(void *)(result + 40) + 32);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = *(void **)(v3 + 40);
        uint64_t v6 = (CCLogStream *)v5[4];
        uint64_t v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 112))(*v5, a3);
        return CCLogStream::logAlert(v6, "[dk] %s@%d:Failed to Configure Supplicant: %s\n", "handleConfigureSupplicantAsyncCallback", 2105, v7);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANNetAdapter::handleBeacomMuteMitigation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  int v5 = *(unsigned __int16 *)(v4 + 68);
  unint64_t v48 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v49 = 0xAAAAAAAAAAAAAAAALL;
  if (*(void *)(v4 + 32) && CCLogStream::shouldLog())
  {
    int v46 = *(CCLogStream **)(*(void *)(a1 + 40) + 32);
    uint64_t v13 = *(unsigned int *)(a2 + 8);
    uint64_t v14 = stringFromStatusInEvent(*(_DWORD *)(a2 + 8), 0);
    int v40 = *(unsigned __int16 *)(a2 + 2);
    uint64_t v15 = *(unsigned int *)(a2 + 16);
    uint64_t v42 = *(unsigned int *)(a2 + 12);
    int v44 = v14;
    int v16 = 0;
    if (IO80211_io80211isDebuggable()) {
      int v16 = *(unsigned __int8 *)(a2 + 24);
    }
    if (IO80211_io80211isDebuggable()) {
      int v17 = *(unsigned __int8 *)(a2 + 25);
    }
    else {
      int v17 = 0;
    }
    if (IO80211_io80211isDebuggable()) {
      int v22 = *(unsigned __int8 *)(a2 + 26);
    }
    else {
      int v22 = 0;
    }
    if (IO80211_io80211isDebuggable()) {
      int v24 = *(unsigned __int8 *)(a2 + 27);
    }
    else {
      int v24 = 0;
    }
    if (IO80211_io80211isDebuggable()) {
      int v26 = *(unsigned __int8 *)(a2 + 28);
    }
    else {
      int v26 = 0;
    }
    if (IO80211_io80211isDebuggable()) {
      int v28 = *(unsigned __int8 *)(a2 + 29);
    }
    else {
      int v28 = 0;
    }
    CCLogStream::logNotice(v46, "[dk] %s@%d: status = %lu %s, reason = %lu, flags = 0x%x, authtype = %lu, addr = %02x:%02x:%02x:%02x:%02x:%02x\n", "handleBeacomMuteMitigation", 1715, v13, v44, v42, v40, v15, v16, v17, v22, v24, v26, v28);
  }
  switch(*(_DWORD *)(a2 + 12))
  {
    case 1:
      if (*(void *)(*(void *)(a1 + 40) + 32) && CCLogStream::shouldLog())
      {
        uint64_t v30 = *(CCLogStream **)(*(void *)(a1 + 40) + 32);
        int v31 = stringFromStatusInEvent(*(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 4));
        CCLogStream::logInfo(v30, "[dk] %s@%d:FW sent BCN_MUTE_MITI_ACTIVE for beacon mitigation activation!! status %s\n", "handleBeacomMuteMitigation", 1719, v31);
      }
      int v6 = 1;
      break;
    case 2:
      if (*(void *)(*(void *)(a1 + 40) + 32) && CCLogStream::shouldLog())
      {
        unint64_t v32 = *(CCLogStream **)(*(void *)(a1 + 40) + 32);
        int v33 = stringFromStatusInEvent(*(_DWORD *)(a2 + 8), 0);
        CCLogStream::logInfo(v32, "[dk] %s@%d:FW sent BCN_MUTE_MITI_END for beacon mitigation activation!! status %s\n", "handleBeacomMuteMitigation", 1724, v33);
      }
      int v6 = 2;
      break;
    case 3:
      if (*(void *)(*(void *)(a1 + 40) + 32) && CCLogStream::shouldLog())
      {
        uint64_t v34 = *(CCLogStream **)(*(void *)(a1 + 40) + 32);
        char v35 = (const char *)stringFromReason(*(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 12));
        uint64_t v36 = stringFromStatusInEvent(*(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 4));
        CCLogStream::logInfo(v34, "[dk] %s@%d:FW sent %s for beacon mitigation activation!! status %s\n", "handleBeacomMuteMitigation", 1730, v35, v36);
      }
      int v6 = 3;
      break;
    case 4:
      if (*(void *)(*(void *)(a1 + 40) + 32) && CCLogStream::shouldLog())
      {
        uint64_t v37 = *(CCLogStream **)(*(void *)(a1 + 40) + 32);
        int v38 = stringFromStatusInEvent(*(_DWORD *)(a2 + 8), 0);
        CCLogStream::logInfo(v37, "[dk] %s@%d:FW sent BCN_MUTE_MITI_FAILED for attempted beacon mitigation!! status %s\n", "handleBeacomMuteMitigation", 1735, v38);
      }
      int v6 = 4;
      break;
    default:
      int v6 = 0;
      break;
  }
  unsigned int v7 = *(_DWORD *)(a2 + 20);
  if (v5 == 2)
  {
    if (v7 <= 7 && *(void *)(*(void *)(a1 + 40) + 32) && (CCLogStream::shouldLog() & 1) != 0)
    {
      int v8 = 1747;
LABEL_71:
      CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 32), "[dk] %s@%d:ERROR: Invalid miti event data length %d,\n", "handleBeacomMuteMitigation", v8, *(_DWORD *)(a2 + 20));
    }
  }
  else if (v7 <= 7 && *(void *)(*(void *)(a1 + 40) + 32) && CCLogStream::shouldLog())
  {
    int v8 = 1754;
    goto LABEL_71;
  }
  __int16 v9 = *(_WORD *)(a2 + 52);
  long long v10 = *(void **)(a1 + 40);
  if (v10[4])
  {
    int shouldLog = CCLogStream::shouldLog();
    long long v10 = *(void **)(a1 + 40);
    if (shouldLog)
    {
      __int16 v47 = (CCLogStream *)v10[4];
      uint64_t v18 = *(unsigned int *)(a2 + 8);
      uint64_t v19 = stringFromStatusInEvent(*(_DWORD *)(a2 + 8), 0);
      int v41 = *(unsigned __int16 *)(a2 + 2);
      uint64_t v43 = *(unsigned int *)(a2 + 12);
      __int16 v45 = v19;
      uint64_t v39 = *(unsigned int *)(a2 + 16);
      int v20 = 0;
      if (IO80211_io80211isDebuggable()) {
        int v20 = *(unsigned __int8 *)(a2 + 24);
      }
      if (IO80211_io80211isDebuggable()) {
        int v21 = *(unsigned __int8 *)(a2 + 25);
      }
      else {
        int v21 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v23 = *(unsigned __int8 *)(a2 + 26);
      }
      else {
        int v23 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v25 = *(unsigned __int8 *)(a2 + 27);
      }
      else {
        int v25 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v27 = *(unsigned __int8 *)(a2 + 28);
      }
      else {
        int v27 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v29 = *(unsigned __int8 *)(a2 + 29);
      }
      else {
        int v29 = 0;
      }
      CCLogStream::logNotice(v47, "[dk] %s@%d:Updating Bcn miti status = %lu %s, reason = %lu, flags = 0x%x, authtype = %lu, addr = %02x:%02x:%02x:%02x:%02x:%02x\n", "handleBeacomMuteMitigation", 1761, v18, v45, v43, v41, v39, v20, v21, v23, v25, v27, v29);
      long long v10 = *(void **)(a1 + 40);
    }
  }
  LODWORD(v48) = *(_DWORD *)(a2 + 24);
  WORD2(v48) = *(_WORD *)(a2 + 28);
  WORD2(v49) = v9;
  LODWORD(v49) = v6;
  uint64_t result = (*(uint64_t (**)(void))(*(void *)*v10 + 128))();
  if (result) {
    return AppleBCMWLANCore::postMessageInfra(**(AppleBCMWLANCore ***)(a1 + 40), 0xCAu, &v48, 0x10uLL);
  }
  return result;
}

uint64_t AppleBCMWLANNetAdapter::getBeaconMuteMitigationVersion(AppleBCMWLANNetAdapter *this)
{
  return *(unsigned __int16 *)(*((void *)this + 5) + 68);
}

uint64_t AppleBCMWLANNetAdapter::handleBssTransEvent(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *(unsigned int *)(a2 + 20);
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5 != 8)
  {
    if (v5 != 7)
    {
      uint64_t result = *(void *)(*(void *)(result + 40) + 32);
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result) {
          return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(v3 + 40) + 32), "[dk] %s@%d:Invalid Reason codes in BTM Events\n");
        }
      }
      return result;
    }
    if (v4 <= 6)
    {
      uint64_t result = *(void *)(*(void *)(result + 40) + 32);
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          int v6 = *(CCLogStream **)(*(void *)(v3 + 40) + 32);
          return CCLogStream::logAlert(v6, "[dk] %s@%d:Event msg length is too short %u");
        }
      }
      return result;
    }
    unsigned int v7 = *(CCLogStream ***)(result + 40);
    if (!*v7) {
      return result;
    }
    if (v7[4])
    {
      int shouldLog = CCLogStream::shouldLog();
      unsigned int v7 = *(CCLogStream ***)(v3 + 40);
      if (shouldLog)
      {
        CCLogStream::logNotice(v7[4], "[dk] %s@%d:Post BTM Request APPLE80211_M_ACTION_FRAME event, size = %d\n", "handleBssTransEvent", 1799, v4);
        unsigned int v7 = *(CCLogStream ***)(v3 + 40);
      }
    }
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*v7 + 128))();
    if (!result) {
      return result;
    }
    __int16 v9 = (void *)(a2 + 48);
    long long v10 = **(AppleBCMWLANCore ***)(v3 + 40);
    unint64_t v11 = v4;
LABEL_30:
    return AppleBCMWLANCore::postMessageInfra(v10, 0x8Fu, v9, v11);
  }
  if (v4 > 3)
  {
    int v12 = *(CCLogStream ***)(result + 40);
    uint64_t result = (uint64_t)v12[4];
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      int v12 = *(CCLogStream ***)(v3 + 40);
      if (result)
      {
        uint64_t result = CCLogStream::logNotice(v12[4], "[dk] %s@%d:Sent BSS Transition Response: Category Code = %d Action Code = %d dialog Token = %d Status = %d \n", "handleBssTransEvent", 1819, *(unsigned __int8 *)(a2 + 48), *(unsigned __int8 *)(a2 + 49), *(unsigned __int8 *)(a2 + 50), *(unsigned __int8 *)(a2 + 51));
        int v12 = *(CCLogStream ***)(v3 + 40);
      }
    }
    if (!*v12) {
      return result;
    }
    if (v12[4])
    {
      int v13 = CCLogStream::shouldLog();
      int v12 = *(CCLogStream ***)(v3 + 40);
      if (v13)
      {
        CCLogStream::logNotice(v12[4], "[dk] %s@%d:Post BTM Response APPLE80211_M_ACTION_FRAME event, size = %lu \n", "handleBssTransEvent", 1822, 5);
        int v12 = *(CCLogStream ***)(v3 + 40);
      }
    }
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*v12 + 128))();
    if (!result) {
      return result;
    }
    __int16 v9 = (void *)(a2 + 48);
    long long v10 = **(AppleBCMWLANCore ***)(v3 + 40);
    unint64_t v11 = 5;
    goto LABEL_30;
  }
  uint64_t result = *(void *)(*(void *)(result + 40) + 32);
  if (result)
  {
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      int v6 = *(CCLogStream **)(*(void *)(v3 + 40) + 32);
      return CCLogStream::logAlert(v6, "[dk] %s@%d:Event msg length is too short %u");
    }
  }
  return result;
}

uint64_t AppleBCMWLANNetAdapter::dumpStats(AppleBCMWLANCore ***this, char *a2, unsigned int a3, int a4)
{
  if ((AppleBCMWLANCore::isAssociated(*this[5]) & 1) == 0) {
    return IO80211Print();
  }
  LQM = (AppleBCMWLANCore ***)AppleBCMWLANCore::getLQM(*this[5]);
  return AppleBCMWLANLQM::dumpStats(LQM, a2, a3, a4);
}

uint64_t AppleBCMWLANNetAdapter::setLimitedAggregation(AppleBCMWLANCore ***this, int a2)
{
  int v13 = a2;
  uint64_t v3 = *(void *)AppleBCMWLANCore::getBus(*this[5]);
  if ((*(unsigned int (**)(void))(v3 + 368))() < 0x1103) {
    return 0;
  }
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)*this[5] + 88))(*this[5]);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 136))(v4))
  {
    long long v10 = this;
    uint64_t v11 = (uint64_t)AppleBCMWLANNetAdapter::handleLimitedAggregationAsyncCallback;
    uint64_t v12 = 0;
    uint64_t v5 = AppleBCMWLANCommander::sendIOVarSet(this[5][1], (uint64_t)"btc_lim_agg_enab");
  }
  else
  {
    int v6 = this[5][1];
    long long v10 = (AppleBCMWLANCore ***)&v13;
    uint64_t v11 = 4;
    uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v6, (uint64_t)"btc_lim_agg_enab", (uint64_t)&v10, 0, 0);
  }
  uint64_t v7 = v5;
  int v8 = this[5][4];
  if (v7)
  {
    if (v8 && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(this[5][4], "[dk] %s@%d:cannot set btc_lim_agg_enab %u: ret %x\n", "setLimitedAggregation", 1944, v13, v7);
    }
  }
  else if (v8 && CCLogStream::shouldLog())
  {
    CCLogStream::logNoticeIf(this[5][4], 0x80uLL, "[dk] %s@%d:Limited Aggregation is configured to %d\n", "setLimitedAggregation", 1946, v13);
  }
  if (this[5][4] && CCLogStream::shouldLog()) {
    CCLogStream::logInfo(this[5][4], "[dk] %s@%d:%s: Limited Aggregation is configured to %d\n", "setLimitedAggregation", 1948, "setLimitedAggregation", v13);
  }
  return v7;
}

BOOL AppleBCMWLANNetAdapter::isLimitedAggregationSupported(AppleBCMWLANCore ***this)
{
  uint64_t Bus = AppleBCMWLANCore::getBus(*this[5]);
  return (*(unsigned int (**)(uint64_t))(*(void *)Bus + 368))(Bus) > 0x1102;
}

uint64_t AppleBCMWLANNetAdapter::handleLimitedAggregationAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(*(void *)(result + 40) + 32);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = *(void **)(v3 + 40);
        int v6 = (CCLogStream *)v5[4];
        uint64_t v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 112))(*v5, a3);
        return CCLogStream::logAlert(v6, "[dk] %s@%d:Setting limited aggregation failed: %s\n", "handleLimitedAggregationAsyncCallback", 2146, v7);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANNetAdapter::setBeaconMuteMitigationVersion(AppleBCMWLANNetAdapter *this)
{
  if (AppleBCMWLANCore::checkForBeaconMuteMitiSupport(**((AppleBCMWLANCore ***)this + 5)))
  {
    int v10 = 0;
    uint64_t v9 = 0;
    int v8 = 1048578;
    v7[0] = &v8;
    v7[1] = 0x1000100010;
    uint64_t v2 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
    v6[0] = &v8;
    v6[1] = 16;
    uint64_t v3 = AppleBCMWLANCommander::runIOVarGet(v2, (uint64_t)"bcn_mute_miti_config", (uint64_t)v6, (uint64_t)v7, 0);
    if (v3)
    {
      if (*(void *)(*((void *)this + 5) + 32) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 32), "[dk] %s@%d:Failed to collect bcn mute mitigation configuration info \n");
      }
    }
    else
    {
      uint64_t v4 = *((void *)this + 5);
      if ((unsigned __int16)v8 == 1)
      {
        *(_WORD *)(v4 + 68) = 1;
        if (*(void *)(*((void *)this + 5) + 32) && CCLogStream::shouldLog()) {
          CCLogStream::logInfo(*(CCLogStream **)(*((void *)this + 5) + 32), "[dk] %s@%d:Beacon mute mitigation FW version is %d \n", "setBeaconMuteMitigationVersion", 1984, 1);
        }
      }
      else
      {
        *(_WORD *)(v4 + 68) = 2;
        if (*(void *)(*((void *)this + 5) + 32) && CCLogStream::shouldLog()) {
          CCLogStream::logInfo(*(CCLogStream **)(*((void *)this + 5) + 32), "[dk] %s@%d:Beacon mute mitigation FW version is %d \n", "setBeaconMuteMitigationVersion", 1987, 2);
        }
      }
      if (*(void *)(*((void *)this + 5) + 32) && CCLogStream::shouldLog()) {
        CCLogStream::logInfo(*(CCLogStream **)(*((void *)this + 5) + 32), "[dk] %s@%d:Beacon mute mitigation FW version is %d \n", "setBeaconMuteMitigationVersion", 1990, *(unsigned __int16 *)(*((void *)this + 5) + 68));
      }
    }
  }
  else
  {
    uint64_t v3 = 3758097095;
    if (*(void *)(*((void *)this + 5) + 32) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 32), "[dk] %s@%d:Failed to collect bcn mute mitigation configuration info, feature not supported\n");
    }
  }
  return v3;
}

uint64_t AppleBCMWLANNetAdapter::configureBeaconMitigationParams(AppleBCMWLANCore ***this, __int16 a2, char a3, char a4)
{
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  int v25 = 0;
  uint64_t v24 = 0;
  if (!AppleBCMWLANCore::checkForBeaconMuteMitiSupport(*this[5])) {
    return 3758097084;
  }
  if (AppleBCMWLANCore::isAssociated(*this[5])) {
    int v8 = 2;
  }
  else {
    int v8 = 7;
  }
  uint64_t v9 = this[5];
  if (*((_WORD *)v9 + 34) == 2)
  {
    BYTE4(v27) = a4;
    LOBYTE(v27) = 1;
    LODWORD(v26) = 1048578;
    HIDWORD(v26) = v8;
    int v10 = &v26;
    uint64_t v11 = 16;
    BYTE1(v27) = a3;
  }
  else
  {
    LOBYTE(v25) = 1;
    LODWORD(v24) = 786433;
    HIDWORD(v24) = v8;
    BYTE1(v25) = a3;
    int v10 = &v24;
    uint64_t v11 = 12;
  }
  *((_WORD *)v10 + 5) = a2;
  v23[0] = v10;
  v23[1] = v11;
  uint64_t v12 = (*(uint64_t (**)(void))(*(void *)*v9 + 88))();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 136))(v12)) {
    uint64_t v13 = AppleBCMWLANCommander::sendIOVarSet(this[5][1], (uint64_t)"bcn_mute_miti_config");
  }
  else {
    uint64_t v13 = AppleBCMWLANCommander::runIOVarSet(this[5][1], (uint64_t)"bcn_mute_miti_config", (uint64_t)v23, 0, 0);
  }
  uint64_t v14 = v13;
  uint64_t v15 = this[5][4];
  if (v14)
  {
    if (v15 && CCLogStream::shouldLog())
    {
      int v16 = this[5];
      int v17 = v16[4];
      uint64_t v18 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)*v16 + 112))(*v16, v14);
      CCLogStream::logAlert(v17, "[dk] %s@%d:bcn_mute_miti_config setting failed, error %s\n", "configureBeaconMitigationParams", 2033, v18);
    }
  }
  else
  {
    if (v15 && CCLogStream::shouldLog())
    {
      int v20 = this[5];
      int v21 = v20[4];
      int v22 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, void))(*(void *)*v20 + 112))(*v20, 0);
      CCLogStream::logInfo(v21, "[dk] %s@%d:Configured BCM MUTE parametes to FW %s \n", "configureBeaconMitigationParams", 2031, v22);
    }
    return 0;
  }
  return v14;
}

uint64_t AppleBCMWLANNetAdapter::handleBeaconMuteMitiAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(*(void *)(result + 40) + 32);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = *(void **)(v3 + 40);
        int v6 = (CCLogStream *)v5[4];
        uint64_t v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 112))(*v5, a3);
        return CCLogStream::logAlert(v6, "[dk] %s@%d: Error: cannot set becon mute mitigation params %s\n", "handleBeaconMuteMitiAsyncCallBack", 2139, v7);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANNetAdapter::overrideACMConfiguration(AppleBCMWLANCore ***this)
{
  uint64_t WmeParams = (unsigned char *)AppleBCMWLANCore::getWmeParams(*this[5], 3u);
  if (!WmeParams || (*WmeParams & 0x10) == 0) {
    return 3758096385;
  }
  *WmeParams &= ~0x10u;
  uint64_t v3 = AppleBCMWLANCommander::sendIOVarSet(this[5][1], (uint64_t)"wme_ac_sta");
  if (v3 && this[5][4] && CCLogStream::shouldLog())
  {
    uint64_t v5 = this[5];
    int v6 = v5[4];
    uint64_t v7 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)*v5 + 112))(*v5, v3);
    CCLogStream::logAlert(v6, "[dk] %s@%d: Error: cannot set wme_ac_sta (VO): ret %x %s\n", "overrideACMConfiguration", 2058, v3, v7);
  }
  return v3;
}

uint64_t AppleBCMWLANNetAdapter::configureACMOverrideForFastLaneAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(*(void *)(result + 40) + 32);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = *(void **)(v3 + 40);
        int v6 = (CCLogStream *)v5[4];
        uint64_t v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 112))(*v5, a3);
        return CCLogStream::logAlert(v6, "[dk] %s@%d: Error: Cannot Override ACM Bit %s\n", "configureACMOverrideForFastLaneAsyncCallback", 2071, v7);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANNetAdapter::sendActionFrame(AppleBCMWLANNetAdapter *this, ether_addr *a2, unsigned __int8 *a3, unsigned int a4, unsigned __int8 *a5, unsigned int a6, int a7, int a8)
{
  bzero(v22, 0x718uLL);
  uint64_t result = 3758097084;
  if (a5 && a6 + a4 <= 0x707)
  {
    uint64_t v17 = 0;
    v20[0] = a8;
    v20[1] = a7;
    int v21 = *(_DWORD *)a2->octet;
    v22[0] = *(_WORD *)&a2->octet[4];
    int v26 = 1;
    __int16 v25 = a6 + a4;
    int v23 = v21;
    __int16 v24 = v22[0];
    if (a3 && a4)
    {
      uint64_t v17 = a4;
      memcpy(v27, a3, a4);
    }
    if (a6) {
      memcpy(&v27[v17], a5, a6);
    }
    v19[0] = v20;
    v19[1] = 1828;
    uint64_t v18 = (*(uint64_t (**)(void))(***((void ***)this + 5) + 88))(**((void **)this + 5));
    if ((*(unsigned int (**)(uint64_t))(*(void *)v18 + 136))(v18)) {
      return AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 5) + 8), (uint64_t)"actframe");
    }
    else {
      return AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 5) + 8), (uint64_t)"actframe", (uint64_t)v19, 0, 0);
    }
  }
  return result;
}

uint64_t AppleBCMWLANNetAdapter::handleActionFrameCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(*(void *)(a1 + 40) + 32);
  if (a3)
  {
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v6 = *(void **)(a1 + 40);
        uint64_t v7 = (CCLogStream *)v6[4];
        (*(void (**)(void, uint64_t))(*(void *)*v6 + 112))(*v6, a3);
        return CCLogStream::logAlert(v7, "[dk] %s@%d:Error: cannot send action frame %s\n");
      }
    }
  }
  else if (result)
  {
    uint64_t result = CCLogStream::shouldLog();
    if (result) {
      return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 32), "[dk] %s@%d:Successfully sent ACTION frame \n");
    }
  }
  return result;
}

uint64_t AppleBCMWLANNetAdapter::sendActionFrameV2(AppleBCMWLANNetAdapter *this, ether_addr *a2, unsigned __int8 *a3, unsigned int a4, unsigned __int8 *a5, unsigned int a6, int a7, int a8)
{
  __int16 v9 = a6 + a4;
  if (a6 + a4 < 0x708)
  {
    if (a5)
    {
      size_t __n = a4;
      unsigned __int16 v18 = a4 + a6 + 52;
      uint64_t v19 = IOMallocZeroData();
      if (v19)
      {
        uint64_t v20 = v19;
        size_t v21 = 0;
        *(_WORD *)uint64_t v19 = 2;
        *(_WORD *)(v19 + 2) = v18;
        *(_DWORD *)(v19 + 4) = a8;
        *(_DWORD *)(v19 + 8) = a7;
        int v22 = *(_DWORD *)a2->octet;
        *(_WORD *)(v19 + 16) = *(_WORD *)&a2->octet[4];
        *(_DWORD *)(v19 + 12) = v22;
        *(_WORD *)(v19 + 22) = a4 + a6 + 32;
        *(_WORD *)(v19 + 24) = 32;
        *(_DWORD *)(v19 + 32) = 1;
        *(_WORD *)(v19 + 48) = 0;
        *(_WORD *)(v19 + 50) = v9;
        int v23 = *(_DWORD *)a2->octet;
        *(_WORD *)(v19 + 30) = *(_WORD *)&a2->octet[4];
        *(_DWORD *)(v19 + 26) = v23;
        if (a3 && a4)
        {
          memcpy((void *)(v19 + 52), a3, __n);
          size_t v21 = __n;
        }
        if (a6) {
          memcpy((void *)(v20 + v21 + 52), a5, a6);
        }
        if (v18) {
          uint64_t v24 = v20;
        }
        else {
          uint64_t v24 = 0;
        }
        v30[0] = v24;
        v30[1] = v18;
        uint64_t v25 = (*(uint64_t (**)(void))(***((void ***)this + 5) + 88))(**((void **)this + 5));
        if ((*(unsigned int (**)(uint64_t))(*(void *)v25 + 136))(v25)) {
          uint64_t v26 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 5) + 8), (uint64_t)"actframe");
        }
        else {
          uint64_t v26 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 5) + 8), (uint64_t)"actframe", (uint64_t)v30, 0, 0);
        }
        uint64_t v10 = v26;
        IOFreeData();
      }
      else if (*(void *)(*((void *)this + 5) + 32))
      {
        uint64_t v10 = 3758097085;
        if (CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 32), "[dk] %s@%d:ActionFrame Config buffer allocation failed\n");
        }
      }
      else
      {
        return 3758097085;
      }
    }
    else
    {
      uint64_t v10 = 3758097084;
      if (*(void *)(*((void *)this + 5) + 32) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 32), "[dk] %s@%d:ActionFrame pData is NULL!\n");
      }
    }
  }
  else
  {
    uint64_t v10 = 3758097084;
    if (*(void *)(*((void *)this + 5) + 32) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 32), "[dk] %s@%d:ActionFrame size is too big!\n");
    }
  }
  return v10;
}

uint64_t AppleBCMWLANNetAdapter::setDisassocDelayAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(*(void *)(result + 40) + 32);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = *(void **)(v3 + 40);
        int v6 = (CCLogStream *)v5[4];
        uint64_t v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 112))(*v5, a3);
        return CCLogStream::logAlert(v6, "[dk] %s@%d:Setting disassoc_dly failed: %s\n", "setDisassocDelayAsyncCallback", 2308, v7);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANNetAdapter::isBringingUpLink(AppleBCMWLANNetAdapter *this)
{
  return *(unsigned __int8 *)(*((void *)this + 5) + 65);
}

uint64_t AppleBCMWLANNetAdapter::handleConfigureLifeTimeAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(*(void *)(result + 40) + 32);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = *(void **)(v3 + 40);
        int v6 = (CCLogStream *)v5[4];
        uint64_t v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 112))(*v5, a3);
        return CCLogStream::logAlert(v6, "[dk] %s@%d: Failed to configure packet lifetime %s\n", "handleConfigureLifeTimeAsyncCallBack", 2370, v7);
      }
    }
  }
  return result;
}

void _GLOBAL__sub_I_AppleBCMWLANNetAdapter_cpp()
{
  kNullRange = 0;
}

void *AppleBCMWLANInfraProtocol::initWithProvider(AppleBCMWLANInfraProtocol *this, AppleBCMWLANCore *a2)
{
  uint64_t result = (void *)IOMallocZeroTyped();
  *((void *)this + 17) = result;
  if (result)
  {
    void *result = a2;
    return (void *)(**((void **)this + 17) != 0);
  }
  return result;
}

uint64_t AppleBCMWLANInfraProtocol::free(AppleBCMWLANInfraProtocol *this)
{
  **((void **)this + 17) = 0;
  uint64_t v2 = (void *)*((void *)this + 17);
  if (v2)
  {
    IOFree(v2, 8uLL);
    *((void *)this + 17) = 0;
  }
  return IO80211InfraInterface::free(this);
}

uint64_t AppleBCMWLANInfraProtocol::getCHANNEL(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 480))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getCHANNEL(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 480))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 480))();
}

uint64_t AppleBCMWLANInfraProtocol::getPOWERSAVE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 592))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getPOWERSAVE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 592))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 592))();
}

uint64_t AppleBCMWLANInfraProtocol::getTXPOWER(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 632))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getTXPOWER(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 632))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 632))();
}

uint64_t AppleBCMWLANInfraProtocol::getRATE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 536))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getRATE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 536))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 536))();
}

uint64_t AppleBCMWLANInfraProtocol::getOP_MODE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 504))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getOP_MODE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 504))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 504))();
}

uint64_t AppleBCMWLANInfraProtocol::getRSSI(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 512))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getRSSI(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 512))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 512))();
}

uint64_t AppleBCMWLANInfraProtocol::getSUPPORTED_CHANNELS(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 704))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getSUPPORTED_CHANNELS(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 704))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 704))();
}

uint64_t AppleBCMWLANInfraProtocol::getRSN_XE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 736))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getRSN_XE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 736))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 736))();
}

uint64_t AppleBCMWLANInfraProtocol::getGUARD_INTERVAL(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 864))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getGUARD_INTERVAL(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 864))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 864))();
}

uint64_t AppleBCMWLANInfraProtocol::getMCS(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 840))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getMCS(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 840))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 840))();
}

uint64_t AppleBCMWLANInfraProtocol::getPOWER_DEBUG_INFO(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 752))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getPOWER_DEBUG_INFO(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 752))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 752))();
}

uint64_t AppleBCMWLANInfraProtocol::getHT_CAPABILITY(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 760))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getHT_CAPABILITY(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 760))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 760))();
}

uint64_t AppleBCMWLANInfraProtocol::getMCS_VHT(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 848))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getMCS_VHT(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 848))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 848))();
}

uint64_t AppleBCMWLANInfraProtocol::getCHANNELS_INFO(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 920))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getCHANNELS_INFO(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 920))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 920))();
}

uint64_t AppleBCMWLANInfraProtocol::getVHT_CAPABILITY(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 776))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getVHT_CAPABILITY(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 776))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 776))();
}

uint64_t AppleBCMWLANInfraProtocol::getROAM_PROFILE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1800))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getROAM_PROFILE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1800))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1800))();
}

uint64_t AppleBCMWLANInfraProtocol::getDBG_GUARD_TIME_PARAMS(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 616))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getDBG_GUARD_TIME_PARAMS(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 616))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 616))();
}

uint64_t AppleBCMWLANInfraProtocol::getLEAKY_AP_STATS_MODE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 624))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getLEAKY_AP_STATS_MODE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 624))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 624))();
}

uint64_t AppleBCMWLANInfraProtocol::getCOUNTRY_CHANNELS(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 712))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getCOUNTRY_CHANNELS(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 712))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 712))();
}

uint64_t AppleBCMWLANInfraProtocol::getPRIVATE_MAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1664))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getPRIVATE_MAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1664))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1664))();
}

uint64_t AppleBCMWLANInfraProtocol::getTKO_PARAMS(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1784))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getTKO_PARAMS(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1784))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1784))();
}

uint64_t AppleBCMWLANInfraProtocol::getTKO_DUMP(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1792))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getTKO_DUMP(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1792))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1792))();
}

uint64_t AppleBCMWLANInfraProtocol::getHW_SUPPORTED_CHANNELS(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 696))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getHW_SUPPORTED_CHANNELS(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 696))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 696))();
}

uint64_t AppleBCMWLANInfraProtocol::getBTCOEX_PROFILE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 800))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getBTCOEX_PROFILE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 800))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 800))();
}

uint64_t AppleBCMWLANInfraProtocol::getBTCOEX_PROFILE_ACTIVE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 832))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getBTCOEX_PROFILE_ACTIVE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 832))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 832))();
}

uint64_t AppleBCMWLANInfraProtocol::getTRAP_INFO(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANCore::getTRAP_INFO(**(AppleBCMWLANCore ***)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getTRAP_INFO(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANCore::getTRAP_INFO(**(AppleBCMWLANCore ***)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::getTRAP_INFO(**(AppleBCMWLANCore ***)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::getTHERMAL_INDEX(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 640))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getTHERMAL_INDEX(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 640))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 640))();
}

uint64_t AppleBCMWLANInfraProtocol::getMAX_NSS_FOR_AP(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 880))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getMAX_NSS_FOR_AP(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 880))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 880))();
}

uint64_t AppleBCMWLANInfraProtocol::getBTCOEX_2G_CHAIN_DISABLE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 888))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getBTCOEX_2G_CHAIN_DISABLE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 888))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 888))();
}

uint64_t AppleBCMWLANInfraProtocol::getPOWER_BUDGET(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 656))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getPOWER_BUDGET(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 656))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 656))();
}

uint64_t AppleBCMWLANInfraProtocol::getWIFI_BT_5G_POLICY(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 960))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getWIFI_BT_5G_POLICY(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 960))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 960))();
}

uint64_t AppleBCMWLANInfraProtocol::getWIFI_NOISE_PER_ANT(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 968))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getWIFI_NOISE_PER_ANT(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 968))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 968))();
}

uint64_t AppleBCMWLANInfraProtocol::getLQM_CONFIG(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 976))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getLQM_CONFIG(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 976))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 976))();
}

uint64_t AppleBCMWLANInfraProtocol::getTRAP_CRASHTRACER_MINI_DUMP(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANCore::getTRAP_CRASHTRACER_MINI_DUMP(**(void **)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getTRAP_CRASHTRACER_MINI_DUMP(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANCore::getTRAP_CRASHTRACER_MINI_DUMP(**(void **)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::getTRAP_CRASHTRACER_MINI_DUMP(**(void **)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::getBEACON_INFO(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 648))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getBEACON_INFO(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 648))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 648))();
}

uint64_t AppleBCMWLANInfraProtocol::getCHIP_POWER_RANGE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 680))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getCHIP_POWER_RANGE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 680))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 680))();
}

uint64_t AppleBCMWLANInfraProtocol::getNSS(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1720))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getNSS(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1720))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1720))();
}

uint64_t AppleBCMWLANInfraProtocol::getHW_ADDR(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 688))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getHW_ADDR(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 688))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 688))();
}

uint64_t AppleBCMWLANInfraProtocol::getCHIP_DIAGS(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 584))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getCHIP_DIAGS(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 584))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 584))();
}

uint64_t AppleBCMWLANInfraProtocol::getMIMO_STATUS(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getMIMO_STATUS(**(AppleBCMWLANCore ***)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getMIMO_STATUS(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getMIMO_STATUS(**(AppleBCMWLANCore ***)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::getMIMO_STATUS(**(AppleBCMWLANCore ***)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::getCUR_PMK(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getCUR_PMK(**(void **)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getCUR_PMK(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getCUR_PMK(**(void **)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::getCUR_PMK(**(void **)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::getDYNSAR_DETAIL(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 720))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getDYNSAR_DETAIL(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 720))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 720))();
}

uint64_t AppleBCMWLANInfraProtocol::getLQM_SUMMARY(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getLQM_SUMMARY(**(void **)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getLQM_SUMMARY(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getLQM_SUMMARY(**(void **)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::getLQM_SUMMARY(**(void **)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::getTIMESYNC_INFO(uint64_t a1)
{
  return AppleBCMWLANCore::getTIMESYNC_INFO(**(void **)(a1 + 136));
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getTIMESYNC_INFO(uint64_t a1)
{
  return AppleBCMWLANCore::getTIMESYNC_INFO(**(void **)(a1 + 24));
}

{
  return AppleBCMWLANCore::getTIMESYNC_INFO(**(void **)(a1 + 8));
}

uint64_t AppleBCMWLANInfraProtocol::getSENSING_DATA(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1768))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getSENSING_DATA(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1768))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1768))();
}

uint64_t AppleBCMWLANInfraProtocol::getCOUNTRY_BAND_SUPPORT(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 904))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getCOUNTRY_BAND_SUPPORT(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 904))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 904))();
}

uint64_t AppleBCMWLANInfraProtocol::getCHIP_COUNTER_STATS(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getCHIP_COUNTER_STATS(**(AppleBCMWLANCore ***)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getCHIP_COUNTER_STATS(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getCHIP_COUNTER_STATS(**(AppleBCMWLANCore ***)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::getCHIP_COUNTER_STATS(**(AppleBCMWLANCore ***)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::getAWDL_RSDB_CAPS(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 792))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getAWDL_RSDB_CAPS(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 792))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 792))();
}

uint64_t AppleBCMWLANInfraProtocol::getBSS_BLACKLIST(uint64_t a1)
{
  return AppleBCMWLANCore::getBSS_BLACKLIST(**(void **)(a1 + 136));
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getBSS_BLACKLIST(uint64_t a1)
{
  return AppleBCMWLANCore::getBSS_BLACKLIST(**(void **)(a1 + 24));
}

{
  return AppleBCMWLANCore::getBSS_BLACKLIST(**(void **)(a1 + 8));
}

uint64_t AppleBCMWLANInfraProtocol::getTXRX_CHAIN_INFO(uint64_t a1, char *a2)
{
  return AppleBCMWLANCore::getTXRX_CHAIN_INFO(**(void ***)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getTXRX_CHAIN_INFO(uint64_t a1, char *a2)
{
  return AppleBCMWLANCore::getTXRX_CHAIN_INFO(**(void ***)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::getTXRX_CHAIN_INFO(**(void ***)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::getSLOW_WIFI_FEATURE_ENABLED(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1000))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getSLOW_WIFI_FEATURE_ENABLED(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1000))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1000))();
}

uint64_t AppleBCMWLANInfraProtocol::getSIB_COEX_STATUS(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1008))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getSIB_COEX_STATUS(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1008))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1008))();
}

uint64_t AppleBCMWLANInfraProtocol::getWCL_FW_HOT_CHANNELS(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1808))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getWCL_FW_HOT_CHANNELS(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1808))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1808))();
}

uint64_t AppleBCMWLANInfraProtocol::getWCL_LOW_LATENCY_INFO(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 928))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getWCL_LOW_LATENCY_INFO(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 928))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 928))();
}

uint64_t AppleBCMWLANInfraProtocol::getWCL_BSS_INFO(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 936))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getWCL_BSS_INFO(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 936))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 936))();
}

uint64_t AppleBCMWLANInfraProtocol::getWCL_EXTENDED_BSS_INFO(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 944))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getWCL_EXTENDED_BSS_INFO(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 944))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 944))();
}

uint64_t AppleBCMWLANInfraProtocol::getWCL_TRAFFIC_COUNTERS(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 952))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getWCL_TRAFFIC_COUNTERS(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 952))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 952))();
}

uint64_t AppleBCMWLANInfraProtocol::getWCL_GET_TX_BLANKING_STATUS(AppleBCMWLANCore ***this, unsigned int *a2)
{
  return AppleBCMWLANCore::getWCL_GET_TX_BLANKING_STATUS(*this[17], a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getWCL_GET_TX_BLANKING_STATUS(AppleBCMWLANCore ***this, unsigned int *a2)
{
  return AppleBCMWLANCore::getWCL_GET_TX_BLANKING_STATUS(*this[3], a2);
}

{
  return AppleBCMWLANCore::getWCL_GET_TX_BLANKING_STATUS(*this[1], a2);
}

uint64_t AppleBCMWLANInfraProtocol::getWCL_CHANNELS_INFO(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getWCL_CHANNELS_INFO(**(AppleBCMWLANCore ***)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getWCL_CHANNELS_INFO(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getWCL_CHANNELS_INFO(**(AppleBCMWLANCore ***)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::getWCL_CHANNELS_INFO(**(AppleBCMWLANCore ***)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::getWCL_LOW_LATENCY_INFO_STATS(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getWCL_LOW_LATENCY_INFO_STATS(**(void **)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getWCL_LOW_LATENCY_INFO_STATS(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getWCL_LOW_LATENCY_INFO_STATS(**(void **)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::getWCL_LOW_LATENCY_INFO_STATS(**(void **)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::getWCL_BGSCAN_CACHE_RESULT(uint64_t a1, unsigned int *a2)
{
  return AppleBCMWLANCore::getWCL_BGSCAN_CACHE_RESULT(**(void **)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getWCL_BGSCAN_CACHE_RESULT(uint64_t a1, unsigned int *a2)
{
  return AppleBCMWLANCore::getWCL_BGSCAN_CACHE_RESULT(**(void **)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::getWCL_BGSCAN_CACHE_RESULT(**(void **)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::getOFFLOAD_TCPKA_ENABLE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 744))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getOFFLOAD_TCPKA_ENABLE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 744))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 744))();
}

uint64_t AppleBCMWLANInfraProtocol::getMDNS_OFFLOAD_CONFIG()
{
  return AppleBCMWLANCore::getMDNS_OFFLOAD_CONFIG();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getMDNS_OFFLOAD_CONFIG()
{
  return AppleBCMWLANCore::getMDNS_OFFLOAD_CONFIG();
}

{
  return AppleBCMWLANCore::getMDNS_OFFLOAD_CONFIG();
}

uint64_t AppleBCMWLANInfraProtocol::getHP2P_CTRL(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return AppleBCMWLANCore::getHP2P_CTRL(**(AppleBCMWLANCore ***)(a1 + 136), 8, (unsigned int *)(a2 + 4));
  }
  else {
    return 3758097084;
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getHP2P_CTRL(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return AppleBCMWLANCore::getHP2P_CTRL(**(AppleBCMWLANCore ***)(a1 + 24), 8, (unsigned int *)(a2 + 4));
  }
  else {
    return 3758097084;
  }
}

{
  if (a2) {
    return AppleBCMWLANCore::getHP2P_CTRL(**(AppleBCMWLANCore ***)(a1 + 8), 8, (unsigned int *)(a2 + 4));
  }
  else {
    return 3758097084;
  }
}

uint64_t AppleBCMWLANInfraProtocol::getCOUNTRY_CHANNELS_INFO()
{
  return 3758097095;
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getCOUNTRY_CHANNELS_INFO()
{
  return 3758097095;
}

{
  return 3758097095;
}

uint64_t AppleBCMWLANInfraProtocol::getRANGING_START()
{
  return 3758097095;
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getRANGING_START()
{
  return 3758097095;
}

{
  return 3758097095;
}

uint64_t AppleBCMWLANInfraProtocol::getRANGING_ENABLE()
{
  return 3758097095;
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getRANGING_ENABLE()
{
  return 3758097095;
}

{
  return 3758097095;
}

uint64_t AppleBCMWLANInfraProtocol::getRANGING_CAPS()
{
  return 3758097095;
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getRANGING_CAPS()
{
  return 3758097095;
}

{
  return 3758097095;
}

uint64_t AppleBCMWLANInfraProtocol::getWCL_WNM_OFFLOAD()
{
  return 3758097095;
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getWCL_WNM_OFFLOAD()
{
  return 3758097095;
}

{
  return 3758097095;
}

uint64_t AppleBCMWLANInfraProtocol::getFW_CLOCK_INFO()
{
  return 3758097095;
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getFW_CLOCK_INFO()
{
  return 3758097095;
}

{
  return 3758097095;
}

uint64_t AppleBCMWLANInfraProtocol::getTIMESYNC_STATS()
{
  return 3758097095;
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getTIMESYNC_STATS()
{
  return 3758097095;
}

{
  return 3758097095;
}

uint64_t AppleBCMWLANInfraProtocol::setCIPHER_KEY(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1080))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setCIPHER_KEY(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1080))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1080))();
}

uint64_t AppleBCMWLANInfraProtocol::setCHANNEL(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1112))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setCHANNEL(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1112))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1112))();
}

uint64_t AppleBCMWLANInfraProtocol::setPOWERSAVE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1128))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setPOWERSAVE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1128))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1128))();
}

uint64_t AppleBCMWLANInfraProtocol::setTXPOWER(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1152))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setTXPOWER(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1152))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1152))();
}

uint64_t AppleBCMWLANInfraProtocol::setRATE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1176))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setRATE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1176))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1176))();
}

uint64_t AppleBCMWLANInfraProtocol::setIBSS_MODE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1064))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setIBSS_MODE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1064))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1064))();
}

uint64_t AppleBCMWLANInfraProtocol::setAP_MODE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1120))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setAP_MODE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1120))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1120))();
}

uint64_t AppleBCMWLANInfraProtocol::setRSN_XE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1192))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setRSN_XE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1192))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1192))();
}

uint64_t AppleBCMWLANInfraProtocol::setIE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1216))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setIE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1216))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1216))();
}

uint64_t AppleBCMWLANInfraProtocol::setWOW_TEST(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1200))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setWOW_TEST(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1200))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1200))();
}

uint64_t AppleBCMWLANInfraProtocol::setVIRTUAL_IF_CREATE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1704))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setVIRTUAL_IF_CREATE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1704))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1704))();
}

uint64_t AppleBCMWLANInfraProtocol::setHT_CAPABILITY(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 768))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setHT_CAPABILITY(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 768))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 768))();
}

uint64_t AppleBCMWLANInfraProtocol::setOFFLOAD_ARP(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1040))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setOFFLOAD_ARP(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1040))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1040))();
}

uint64_t AppleBCMWLANInfraProtocol::setOFFLOAD_NDP(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1048))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setOFFLOAD_NDP(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1048))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1048))();
}

uint64_t AppleBCMWLANInfraProtocol::setGAS_REQ(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1232))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setGAS_REQ(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1232))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1232))();
}

uint64_t AppleBCMWLANInfraProtocol::setVHT_CAPABILITY(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 784))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setVHT_CAPABILITY(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 784))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 784))();
}

uint64_t AppleBCMWLANInfraProtocol::setDBG_GUARD_TIME_PARAMS(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1136))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setDBG_GUARD_TIME_PARAMS(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1136))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1136))();
}

uint64_t AppleBCMWLANInfraProtocol::setLEAKY_AP_STATS_MODE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1144))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setLEAKY_AP_STATS_MODE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1144))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1144))();
}

uint64_t AppleBCMWLANInfraProtocol::setPRIVATE_MAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1672))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setPRIVATE_MAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1672))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1672))();
}

uint64_t AppleBCMWLANInfraProtocol::setRESET_CHIP(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setRESET_CHIP(**(IO80211Controller ***)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setRESET_CHIP(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setRESET_CHIP(**(IO80211Controller ***)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setRESET_CHIP(**(IO80211Controller ***)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setCRASH(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setCRASH(**(void **)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setCRASH(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setCRASH(**(void **)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setCRASH(**(void **)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setRANGING_ENABLE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1592))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setRANGING_ENABLE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1592))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1592))();
}

uint64_t AppleBCMWLANInfraProtocol::setRANGING_START(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1600))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setRANGING_START(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1600))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1600))();
}

uint64_t AppleBCMWLANInfraProtocol::setTKO_PARAMS(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1624))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setTKO_PARAMS(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1624))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1624))();
}

uint64_t AppleBCMWLANInfraProtocol::setBTCOEX_PROFILE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1544))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setBTCOEX_PROFILE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1544))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1544))();
}

uint64_t AppleBCMWLANInfraProtocol::setBTCOEX_PROFILE_ACTIVE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1584))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setBTCOEX_PROFILE_ACTIVE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1584))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1584))();
}

uint64_t AppleBCMWLANInfraProtocol::setTHERMAL_INDEX(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1160))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setTHERMAL_INDEX(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1160))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1160))();
}

uint64_t AppleBCMWLANInfraProtocol::setBTCOEX_2G_CHAIN_DISABLE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1576))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setBTCOEX_2G_CHAIN_DISABLE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1576))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1576))();
}

uint64_t AppleBCMWLANInfraProtocol::setPOWER_BUDGET(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1168))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setPOWER_BUDGET(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1168))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1168))();
}

uint64_t AppleBCMWLANInfraProtocol::setWIFI_BT_5G_POLICY(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1688))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setWIFI_BT_5G_POLICY(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1688))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1688))();
}

uint64_t AppleBCMWLANInfraProtocol::setLQM_CONFIG(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1712))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setLQM_CONFIG(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1712))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1712))();
}

uint64_t AppleBCMWLANInfraProtocol::setUSB_HOST_NOTIFICATION(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1728))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setUSB_HOST_NOTIFICATION(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1728))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1728))();
}

uint64_t AppleBCMWLANInfraProtocol::setHP2P_CTRL(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setHP2P_CTRL(**(void ***)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setHP2P_CTRL(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setHP2P_CTRL(**(void ***)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setHP2P_CTRL(**(void ***)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setSET_PROPERTY(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1736))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setSET_PROPERTY(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1736))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1736))();
}

uint64_t AppleBCMWLANInfraProtocol::setPM_MODE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1696))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setPM_MODE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1696))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1696))();
}

uint64_t AppleBCMWLANInfraProtocol::setREALTIME_QOS_MSCS(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1864))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setREALTIME_QOS_MSCS(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1864))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1864))();
}

uint64_t AppleBCMWLANInfraProtocol::setSENSING_ENABLE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1752))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setSENSING_ENABLE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1752))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1752))();
}

uint64_t AppleBCMWLANInfraProtocol::setSENSING_DISABLE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1760))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setSENSING_DISABLE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1760))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1760))();
}

uint64_t AppleBCMWLANInfraProtocol::set6G_MODE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1024))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::set6G_MODE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1024))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1024))();
}

uint64_t AppleBCMWLANInfraProtocol::setWCL_REASSOC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1632))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setWCL_REASSOC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1632))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1632))();
}

uint64_t AppleBCMWLANInfraProtocol::setWCL_SET_ROAM_LOCK(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1096))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setWCL_SET_ROAM_LOCK(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1096))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1096))();
}

uint64_t AppleBCMWLANInfraProtocol::setWCL_LEGACY_ROAM_PROFILE_CONFIG(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1640))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setWCL_LEGACY_ROAM_PROFILE_CONFIG(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1640))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1640))();
}

uint64_t AppleBCMWLANInfraProtocol::setWCL_ROAM_PROFILE_CONFIG(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1648))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setWCL_ROAM_PROFILE_CONFIG(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1648))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1648))();
}

uint64_t AppleBCMWLANInfraProtocol::setWCL_SCAN_ABORT(AppleBCMWLANCore ***this, void *a2)
{
  return AppleBCMWLANCore::setWCL_SCAN_ABORT(*this[17], a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setWCL_SCAN_ABORT(AppleBCMWLANCore ***this, void *a2)
{
  return AppleBCMWLANCore::setWCL_SCAN_ABORT(*this[3], a2);
}

{
  return AppleBCMWLANCore::setWCL_SCAN_ABORT(*this[1], a2);
}

uint64_t AppleBCMWLANInfraProtocol::setWCL_JOIN_ABORT(AppleBCMWLANCore ***this, void *a2)
{
  return AppleBCMWLANCore::setWCL_JOIN_ABORT(*this[17], a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setWCL_JOIN_ABORT(AppleBCMWLANCore ***this, void *a2)
{
  return AppleBCMWLANCore::setWCL_JOIN_ABORT(*this[3], a2);
}

{
  return AppleBCMWLANCore::setWCL_JOIN_ABORT(*this[1], a2);
}

uint64_t AppleBCMWLANInfraProtocol::setWCL_TRIGGER_CC(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setWCL_TRIGGER_CC(**(void **)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setWCL_TRIGGER_CC(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setWCL_TRIGGER_CC(**(void **)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setWCL_TRIGGER_CC(**(void **)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setWCL_REAL_TIME_MODE(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANCore::setWCL_REAL_TIME_MODE(**(void **)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setWCL_REAL_TIME_MODE(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANCore::setWCL_REAL_TIME_MODE(**(void **)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setWCL_REAL_TIME_MODE(**(void **)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setWCL_ROAM_USER_CACHE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1656))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setWCL_ROAM_USER_CACHE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1656))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1656))();
}

uint64_t AppleBCMWLANInfraProtocol::setWCL_ARP_MODE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setWCL_ARP_MODE(**(AppleBCMWLANCore ***)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setWCL_ARP_MODE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setWCL_ARP_MODE(**(AppleBCMWLANCore ***)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setWCL_ARP_MODE(**(AppleBCMWLANCore ***)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setWCL_SCAN_REQ(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 992))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setWCL_SCAN_REQ(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 992))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 992))();
}

uint64_t AppleBCMWLANInfraProtocol::setWCL_ASSOCIATE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1056))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setWCL_ASSOCIATE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1056))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1056))();
}

uint64_t AppleBCMWLANInfraProtocol::setWCL_QOS_PARAMS(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setWCL_QOS_PARAMS(**(AppleBCMWLANCore ***)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setWCL_QOS_PARAMS(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setWCL_QOS_PARAMS(**(AppleBCMWLANCore ***)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setWCL_QOS_PARAMS(**(AppleBCMWLANCore ***)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setWCL_LINK_UP_DONE(AppleBCMWLANCore ***this, void *a2)
{
  return AppleBCMWLANCore::setWCL_LINK_UP_DONE(*this[17], a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setWCL_LINK_UP_DONE(AppleBCMWLANCore ***this, void *a2)
{
  return AppleBCMWLANCore::setWCL_LINK_UP_DONE(*this[3], a2);
}

{
  return AppleBCMWLANCore::setWCL_LINK_UP_DONE(*this[1], a2);
}

uint64_t AppleBCMWLANInfraProtocol::setWCL_SET_SCAN_HOME_AWAY_TIME(uint64_t a1, int *a2)
{
  return AppleBCMWLANCore::setWCL_SET_SCAN_HOME_AWAY_TIME(**(void **)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setWCL_SET_SCAN_HOME_AWAY_TIME(uint64_t a1, int *a2)
{
  return AppleBCMWLANCore::setWCL_SET_SCAN_HOME_AWAY_TIME(**(void **)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setWCL_SET_SCAN_HOME_AWAY_TIME(**(void **)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setWCL_ULOFDMA_STATE(uint64_t a1, int *a2)
{
  return AppleBCMWLANCore::setWCL_ULOFDMA_STATE(**(void **)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setWCL_ULOFDMA_STATE(uint64_t a1, int *a2)
{
  return AppleBCMWLANCore::setWCL_ULOFDMA_STATE(**(void **)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setWCL_ULOFDMA_STATE(**(void **)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setWCL_ACTION_FRAME(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setWCL_ACTION_FRAME(**(void **)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setWCL_ACTION_FRAME(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setWCL_ACTION_FRAME(**(void **)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setWCL_ACTION_FRAME(**(void **)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setOS_FEATURE_FLAGS(uint64_t a1, void *a2)
{
  return AppleBCMWLANCore::setOS_FEATURE_FLAGS(**(AppleBCMWLANCore ***)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setOS_FEATURE_FLAGS(uint64_t a1, void *a2)
{
  return AppleBCMWLANCore::setOS_FEATURE_FLAGS(**(AppleBCMWLANCore ***)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setOS_FEATURE_FLAGS(**(AppleBCMWLANCore ***)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setDHCP_RENEWAL_DATA(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANCore::setDHCP_RENEWAL_DATA(**(void ***)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setDHCP_RENEWAL_DATA(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANCore::setDHCP_RENEWAL_DATA(**(void ***)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setDHCP_RENEWAL_DATA(**(void ***)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setBATTERY_POWERSAVE_CONFIG(uint64_t a1, int *a2)
{
  return AppleBCMWLANCore::setBATTERY_POWERSAVE_CONFIG(**(AppleBCMWLANCore ***)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setBATTERY_POWERSAVE_CONFIG(uint64_t a1, int *a2)
{
  return AppleBCMWLANCore::setBATTERY_POWERSAVE_CONFIG(**(AppleBCMWLANCore ***)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setBATTERY_POWERSAVE_CONFIG(**(AppleBCMWLANCore ***)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setMIMO_CONFIG(uint64_t a1, int *a2)
{
  return AppleBCMWLANCore::setMIMO_CONFIG(**(AppleBCMWLANCore ***)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setMIMO_CONFIG(uint64_t a1, int *a2)
{
  return AppleBCMWLANCore::setMIMO_CONFIG(**(AppleBCMWLANCore ***)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setMIMO_CONFIG(**(AppleBCMWLANCore ***)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setPOWER_PROFILE(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANCore::setPOWER_PROFILE(**(void ***)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setPOWER_PROFILE(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANCore::setPOWER_PROFILE(**(void ***)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setPOWER_PROFILE(**(void ***)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setHEARTBEAT(AppleBCMWLANCore ***this, void *a2)
{
  return AppleBCMWLANCore::setHEARTBEAT(*this[17], a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setHEARTBEAT(AppleBCMWLANCore ***this, void *a2)
{
  return AppleBCMWLANCore::setHEARTBEAT(*this[3], a2);
}

{
  return AppleBCMWLANCore::setHEARTBEAT(*this[1], a2);
}

uint64_t AppleBCMWLANInfraProtocol::setINTERFACE_SETTING(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANCore::setINTERFACE_SETTING(**(void **)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setINTERFACE_SETTING(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANCore::setINTERFACE_SETTING(**(void **)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setINTERFACE_SETTING(**(void **)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setBYPASS_TX_POWER_CAP(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANCore::setBYPASS_TX_POWER_CAP(**(AppleBCMWLANCore ***)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setBYPASS_TX_POWER_CAP(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANCore::setBYPASS_TX_POWER_CAP(**(AppleBCMWLANCore ***)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setBYPASS_TX_POWER_CAP(**(AppleBCMWLANCore ***)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setFACETIME_WIFICALLING_PARAMS(uint64_t a1, int *a2)
{
  return AppleBCMWLANCore::setFACETIME_WIFICALLING_PARAMS(**(AppleBCMWLANCore ***)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setFACETIME_WIFICALLING_PARAMS(uint64_t a1, int *a2)
{
  return AppleBCMWLANCore::setFACETIME_WIFICALLING_PARAMS(**(AppleBCMWLANCore ***)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setFACETIME_WIFICALLING_PARAMS(**(AppleBCMWLANCore ***)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setIPV4_PARAMS(uint64_t a1, int *a2)
{
  return AppleBCMWLANCore::setIPV4_PARAMS(**(AppleBCMWLANCore ***)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setIPV4_PARAMS(uint64_t a1, int *a2)
{
  return AppleBCMWLANCore::setIPV4_PARAMS(**(AppleBCMWLANCore ***)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setIPV4_PARAMS(**(AppleBCMWLANCore ***)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setWCL_LIMITED_AGGREGATION(uint64_t a1, int *a2)
{
  return AppleBCMWLANCore::setWCL_LIMITED_AGGREGATION(**(void **)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setWCL_LIMITED_AGGREGATION(uint64_t a1, int *a2)
{
  return AppleBCMWLANCore::setWCL_LIMITED_AGGREGATION(**(void **)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setWCL_LIMITED_AGGREGATION(**(void **)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setWCL_BCN_MUTE_CONFIG(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setWCL_BCN_MUTE_CONFIG(**(void **)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setWCL_BCN_MUTE_CONFIG(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setWCL_BCN_MUTE_CONFIG(**(void **)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setWCL_BCN_MUTE_CONFIG(**(void **)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setBSS_BLACKLIST(uint64_t a1, long long *a2)
{
  return AppleBCMWLANCore::setBSS_BLACKLIST(**(AppleBCMWLANCore ***)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setBSS_BLACKLIST(uint64_t a1, long long *a2)
{
  return AppleBCMWLANCore::setBSS_BLACKLIST(**(AppleBCMWLANCore ***)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setBSS_BLACKLIST(**(AppleBCMWLANCore ***)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setEAP_FILTER_CONFIG(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANCore::setEAP_FILTER_CONFIG(**(void ***)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setEAP_FILTER_CONFIG(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANCore::setEAP_FILTER_CONFIG(**(void ***)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setEAP_FILTER_CONFIG(**(void ***)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setDUAL_POWER_MODE(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANCore::setDUAL_POWER_MODE(**(AppleBCMWLANCore ***)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setDUAL_POWER_MODE(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANCore::setDUAL_POWER_MODE(**(AppleBCMWLANCore ***)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setDUAL_POWER_MODE(**(AppleBCMWLANCore ***)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setWCL_CONFIG_BG_MOTIONPROFILE(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANCore::setWCL_CONFIG_BG_MOTIONPROFILE(**(void **)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setWCL_CONFIG_BG_MOTIONPROFILE(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANCore::setWCL_CONFIG_BG_MOTIONPROFILE(**(void **)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setWCL_CONFIG_BG_MOTIONPROFILE(**(void **)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setWCL_CONFIG_BG_NETWORK(uint64_t a1, unsigned __int8 *a2)
{
  return AppleBCMWLANCore::setWCL_CONFIG_BG_NETWORK(**(void **)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setWCL_CONFIG_BG_NETWORK(uint64_t a1, unsigned __int8 *a2)
{
  return AppleBCMWLANCore::setWCL_CONFIG_BG_NETWORK(**(void **)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setWCL_CONFIG_BG_NETWORK(**(void **)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setWCL_CONFIG_BGSCAN(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANCore::setWCL_CONFIG_BGSCAN(**(void **)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setWCL_CONFIG_BGSCAN(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANCore::setWCL_CONFIG_BGSCAN(**(void **)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setWCL_CONFIG_BGSCAN(**(void **)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setWCL_CONFIG_BG_PARAMS(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setWCL_CONFIG_BG_PARAMS(**(void **)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setWCL_CONFIG_BG_PARAMS(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setWCL_CONFIG_BG_PARAMS(**(void **)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setWCL_CONFIG_BG_PARAMS(**(void **)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setCONGESTION_CTRL_IND(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANCore::setCONGESTION_CTRL_IND(**(void ***)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setCONGESTION_CTRL_IND(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANCore::setCONGESTION_CTRL_IND(**(void ***)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setCONGESTION_CTRL_IND(**(void ***)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setIPV6_PARAMS(uint64_t a1, unsigned int *a2)
{
  return AppleBCMWLANCore::setIPV6_PARAMS(**(void ***)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setIPV6_PARAMS(uint64_t a1, unsigned int *a2)
{
  return AppleBCMWLANCore::setIPV6_PARAMS(**(void ***)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setIPV6_PARAMS(**(void ***)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setINFRA_ENUMERATED(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANCore::setINFRA_ENUMERATED(**(void **)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setINFRA_ENUMERATED(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANCore::setINFRA_ENUMERATED(**(void **)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setINFRA_ENUMERATED(**(void **)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setLMTPC_CONFIG(uint64_t a1, unsigned __int8 *a2)
{
  return AppleBCMWLANCore::setLMTPC_CONFIG(**(AppleBCMWLANCore ***)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setLMTPC_CONFIG(uint64_t a1, unsigned __int8 *a2)
{
  return AppleBCMWLANCore::setLMTPC_CONFIG(**(AppleBCMWLANCore ***)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setLMTPC_CONFIG(**(AppleBCMWLANCore ***)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setTRAFFIC_ENG_PARAMS(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setTRAFFIC_ENG_PARAMS(**(void **)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setTRAFFIC_ENG_PARAMS(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setTRAFFIC_ENG_PARAMS(**(void **)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setTRAFFIC_ENG_PARAMS(**(void **)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setLE_SCAN_PARAM(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANCore::setLE_SCAN_PARAM(**(void ***)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setLE_SCAN_PARAM(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANCore::setLE_SCAN_PARAM(**(void ***)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setLE_SCAN_PARAM(**(void ***)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setOFFLOAD_TCPKA_ENABLE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1208))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setOFFLOAD_TCPKA_ENABLE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1208))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1208))();
}

uint64_t AppleBCMWLANInfraProtocol::setWCL_ASSOCIATED_SLEEP(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1816))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setWCL_ASSOCIATED_SLEEP(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1816))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1816))();
}

uint64_t AppleBCMWLANInfraProtocol::setWCL_SOI_CONFIG(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1824))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setWCL_SOI_CONFIG(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1824))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1824))();
}

uint64_t AppleBCMWLANInfraProtocol::setDYNAMIC_RSSI_WINDOW_CONFIG(uint64_t a1, int *a2)
{
  return AppleBCMWLANCore::setDYNAMIC_RSSI_WINDOW_CONFIG(**(AppleBCMWLANCore ***)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setDYNAMIC_RSSI_WINDOW_CONFIG(uint64_t a1, int *a2)
{
  return AppleBCMWLANCore::setDYNAMIC_RSSI_WINDOW_CONFIG(**(AppleBCMWLANCore ***)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setDYNAMIC_RSSI_WINDOW_CONFIG(**(AppleBCMWLANCore ***)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setNDD_REQ(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1016))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setNDD_REQ(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1016))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1016))();
}

uint64_t AppleBCMWLANInfraProtocol::setMWS_WIFI_TYPE_7_BITMAP_WIFI_ENH(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANCore::setMWS_WIFI_TYPE_7_BITMAP_WIFI_ENH(**(void ***)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setMWS_WIFI_TYPE_7_BITMAP_WIFI_ENH(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANCore::setMWS_WIFI_TYPE_7_BITMAP_WIFI_ENH(**(void ***)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setMWS_WIFI_TYPE_7_BITMAP_WIFI_ENH(**(void ***)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setMWS_COEX_BITMAP_WIFI_ENH(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANCore::setMWS_COEX_BITMAP_WIFI_ENH(**(void ***)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setMWS_COEX_BITMAP_WIFI_ENH(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANCore::setMWS_COEX_BITMAP_WIFI_ENH(**(void ***)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setMWS_COEX_BITMAP_WIFI_ENH(**(void ***)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setMWS_DISABLE_OCL_BITMAP_WIFI_ENH(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANCore::setMWS_DISABLE_OCL_BITMAP_WIFI_ENH(**(void ***)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setMWS_DISABLE_OCL_BITMAP_WIFI_ENH(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANCore::setMWS_DISABLE_OCL_BITMAP_WIFI_ENH(**(void ***)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setMWS_DISABLE_OCL_BITMAP_WIFI_ENH(**(void ***)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setMWS_RFEM_CONFIG_WIFI_ENH(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANCore::setMWS_RFEM_CONFIG_WIFI_ENH(**(void ***)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setMWS_RFEM_CONFIG_WIFI_ENH(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANCore::setMWS_RFEM_CONFIG_WIFI_ENH(**(void ***)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setMWS_RFEM_CONFIG_WIFI_ENH(**(void ***)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setMWS_ASSOC_PROTECTION_BITMAP_WIFI_ENH(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANCore::setMWS_ASSOC_PROTECTION_BITMAP_WIFI_ENH(**(void ***)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setMWS_ASSOC_PROTECTION_BITMAP_WIFI_ENH(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANCore::setMWS_ASSOC_PROTECTION_BITMAP_WIFI_ENH(**(void ***)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setMWS_ASSOC_PROTECTION_BITMAP_WIFI_ENH(**(void ***)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setMWS_SCAN_FREQ_WIFI_ENH(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANCore::setMWS_SCAN_FREQ_WIFI_ENH(**(void ***)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setMWS_SCAN_FREQ_WIFI_ENH(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANCore::setMWS_SCAN_FREQ_WIFI_ENH(**(void ***)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setMWS_SCAN_FREQ_WIFI_ENH(**(void ***)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setMWS_SCAN_FREQ_MODE_WIFI_ENH(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANCore::setMWS_SCAN_FREQ_MODE_WIFI_ENH(**(void ***)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setMWS_SCAN_FREQ_MODE_WIFI_ENH(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANCore::setMWS_SCAN_FREQ_MODE_WIFI_ENH(**(void ***)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setMWS_SCAN_FREQ_MODE_WIFI_ENH(**(void ***)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setMWS_CONDITION_ID_BITMAP_WIFI_ENH(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setMWS_CONDITION_ID_BITMAP_WIFI_ENH(**(void ***)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setMWS_CONDITION_ID_BITMAP_WIFI_ENH(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setMWS_CONDITION_ID_BITMAP_WIFI_ENH(**(void ***)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setMWS_CONDITION_ID_BITMAP_WIFI_ENH(**(void ***)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setMWS_ANTENNA_SELECTION_WIFI_ENH(uint64_t a1, unsigned __int16 *a2)
{
  return AppleBCMWLANCore::setMWS_ANTENNA_SELECTION_WIFI_ENH(**(void ***)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setMWS_ANTENNA_SELECTION_WIFI_ENH(uint64_t a1, unsigned __int16 *a2)
{
  return AppleBCMWLANCore::setMWS_ANTENNA_SELECTION_WIFI_ENH(**(void ***)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setMWS_ANTENNA_SELECTION_WIFI_ENH(**(void ***)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setCLEAR_PMKSA_CACHE(AppleBCMWLANCore ***this, void *a2)
{
  return AppleBCMWLANCore::setCLEAR_PMKSA_CACHE(*this[17]);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setCLEAR_PMKSA_CACHE(AppleBCMWLANCore ***this, void *a2)
{
  return AppleBCMWLANCore::setCLEAR_PMKSA_CACHE(*this[3]);
}

{
  return AppleBCMWLANCore::setCLEAR_PMKSA_CACHE(*this[1]);
}

uint64_t AppleBCMWLANInfraProtocol::setRANGING_AUTHENTICATE(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(***(void ***)(a1 + 136) + 1608))(**(void **)(a1 + 136), a1, a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setRANGING_AUTHENTICATE(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(***(void ***)(a1 + 24) + 1608))(**(void **)(a1 + 24), a1 - 112, a2);
}

{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 1608))(**(void **)(a1 + 8), a1 - 128, a2);
}

uint64_t AppleBCMWLANInfraProtocol::setWCL_UPDATE_FAST_LANE(AppleBCMWLANCore ***a1, unsigned char *a2)
{
  if (!a2) {
    return 3758097084;
  }
  ((void (*)(AppleBCMWLANCore ***, BOOL))(*a1)[53])(a1, *a2 != 0);
  if (*a2)
  {
    if (a2[1])
    {
      NetAdapter = (AppleBCMWLANCore ***)AppleBCMWLANCore::getNetAdapter(*a1[17]);
      AppleBCMWLANNetAdapter::overrideACMConfiguration(NetAdapter);
    }
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setWCL_UPDATE_FAST_LANE(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANInfraProtocol::setWCL_UPDATE_FAST_LANE((AppleBCMWLANCore ***)(a1 - 112), a2);
}

{
  return AppleBCMWLANInfraProtocol::setWCL_UPDATE_FAST_LANE((AppleBCMWLANCore ***)(a1 - 128), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setSET_WIFI_ASSERTION_STATE()
{
  return 3758097095;
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setSET_WIFI_ASSERTION_STATE()
{
  return 3758097095;
}

{
  return 3758097095;
}

uint64_t AppleBCMWLANInfraProtocol::setROAM_CACHE_UPDATE()
{
  return 3758097095;
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setROAM_CACHE_UPDATE()
{
  return 3758097095;
}

{
  return 3758097095;
}

uint64_t AppleBCMWLANInfraProtocol::setWOW_LOW_POWER_MODE()
{
  return 3758097095;
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setWOW_LOW_POWER_MODE()
{
  return 3758097095;
}

{
  return 3758097095;
}

uint64_t AppleBCMWLANInfraProtocol::setSTAND_ALONE_MODE_STATE()
{
  return 3758097095;
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setSTAND_ALONE_MODE_STATE()
{
  return 3758097095;
}

{
  return 3758097095;
}

uint64_t AppleBCMWLANInfraProtocol::setVOICE_IND_STATE()
{
  return 3758097095;
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setVOICE_IND_STATE()
{
  return 3758097095;
}

{
  return 3758097095;
}

uint64_t AppleBCMWLANInfraProtocol::setMWS_TIME_SHARING_WIFI_ENH()
{
  return 3758097095;
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setMWS_TIME_SHARING_WIFI_ENH()
{
  return 3758097095;
}

{
  return 3758097095;
}

uint64_t AppleBCMWLANInfraProtocol::setWCL_WNM_OPS(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANCore::setWCL_WNM_OPS(**(void **)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setWCL_WNM_OPS(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANCore::setWCL_WNM_OPS(**(void **)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setWCL_WNM_OPS(**(void **)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setWCL_WNM_OFFLOAD(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANCore::setWCL_WNM_OFFLOAD(**(void **)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setWCL_WNM_OFFLOAD(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANCore::setWCL_WNM_OFFLOAD(**(void **)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setWCL_WNM_OFFLOAD(**(void **)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setROAM_PROFILE()
{
  return 3758097095;
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setROAM_PROFILE()
{
  return 3758097095;
}

{
  return 3758097095;
}

uint64_t AppleBCMWLANInfraProtocol::setGAS_ABORT(AppleBCMWLANInfraProtocol *this, void *a2)
{
  return (*(uint64_t (**)(void, void *))(***((void ***)this + 17) + 1240))(**((void **)this + 17), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setGAS_ABORT(AppleBCMWLANInfraProtocol *this, void *a2)
{
  return (*(uint64_t (**)(void, void *))(***((void ***)this + 3) + 1240))(**((void **)this + 3), a2);
}

{
  return (*(uint64_t (**)(void, void *))(***((void ***)this + 1) + 1240))(**((void **)this + 1), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setWCL_LINK_STATE_UPDATE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setWCL_LINK_STATE_UPDATE(**(void **)(a1 + 136), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setWCL_LINK_STATE_UPDATE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setWCL_LINK_STATE_UPDATE(**(void **)(a1 + 24), a2);
}

{
  return AppleBCMWLANCore::setWCL_LINK_STATE_UPDATE(**(void **)(a1 + 8), a2);
}

uint64_t AppleBCMWLANInfraProtocol::setWCL_LEAVE_NETWORK(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 136) + 1088))();
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setWCL_LEAVE_NETWORK(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 1088))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 1088))();
}

uint64_t AppleBCMWLANInfraProtocol::setHOST_CLOCK_INFO()
{
  return 3758097095;
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setHOST_CLOCK_INFO()
{
  return 3758097095;
}

{
  return 3758097095;
}

uint64_t AppleBCMWLANInfraProtocol::setTIMESYNC_GPIO()
{
  return 3758097095;
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setTIMESYNC_GPIO()
{
  return 3758097095;
}

{
  return 3758097095;
}

uint64_t AppleBCMWLANInfraProtocol::setFW_CLOCK_SOURCE()
{
  return 3758097095;
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setFW_CLOCK_SOURCE()
{
  return 3758097095;
}

{
  return 3758097095;
}

uint64_t AppleBCMWLANInfraProtocol::setTIMESYNC_TX_POLICY()
{
  return 3758097095;
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setTIMESYNC_TX_POLICY()
{
  return 3758097095;
}

{
  return 3758097095;
}

uint64_t AppleBCMWLANInfraProtocol::setTIMESYNC_RX_POLICY()
{
  return 3758097095;
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setTIMESYNC_RX_POLICY()
{
  return 3758097095;
}

{
  return 3758097095;
}

uint64_t AppleBCMWLANInfraProtocol::setTIMESTAMPING_EN()
{
  return 3758097095;
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setTIMESTAMPING_EN()
{
  return 3758097095;
}

{
  return 3758097095;
}

uint64_t AppleBCMWLANInfraProtocol::getHE_COUNTERS()
{
  return 3758097095;
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::getHE_COUNTERS()
{
  return 3758097095;
}

{
  return 3758097095;
}

uint64_t AppleBCMWLANInfraProtocol::setSDB_ENABLE()
{
  return 3758097095;
}

uint64_t non-virtual thunk to'AppleBCMWLANInfraProtocol::setSDB_ENABLE()
{
  return 3758097095;
}

{
  return 3758097095;
}

void _GLOBAL__sub_I_AppleBCMWLANInfraProtocol_cpp()
{
  kNullRange = 0;
}

AppleBCMWLANRoamAdapter *AppleBCMWLANRoamAdapter::withDriver(AppleBCMWLANRoamAdapter *this, AppleBCMWLANCore *a2)
{
  uint64_t v5 = (AppleBCMWLANRoamAdapter *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANRoamAdapterMetaClass, (OSObject **)&v5)) {
    return 0;
  }
  uint64_t v3 = v5;
  if (v5 && (AppleBCMWLANRoamAdapter::initWithDriver((OSObject *)v5, this) & 1) == 0)
  {
    (*(void (**)(AppleBCMWLANRoamAdapter *))(*(void *)v3 + 16))(v3);
    return 0;
  }
  return v3;
}

uint64_t AppleBCMWLANRoamAdapter::initWithDriver(OSObject *this, AppleBCMWLANCore *a2)
{
  uint64_t v4 = (OSObject_vtbl *)IOMallocZeroTyped();
  this[1].OSMetaClassBase::__vftable = v4;
  if (v4)
  {
    v4->getMetaClass = (const OSMetaClass *(__cdecl *)(const OSMetaClassBase *__hidden))a2;
    getMetaClass = (AppleBCMWLANCore *)this[1].getMetaClass;
    if (getMetaClass)
    {
      this[1].retain = (void (__cdecl *)(const OSObject *__hidden))AppleBCMWLANCore::getCommander(getMetaClass);
      int v6 = this[1].OSMetaClassBase::__vftable;
      if (v6->retain)
      {
        this[1].release = (void (__cdecl *)(const OSObject *__hidden))AppleBCMWLANCore::getConfigManager((AppleBCMWLANCore *)v6->getMetaClass);
        if (this[1].release)
        {
          this[1].isEqualTo = (BOOL (__cdecl *)(const OSMetaClassBase *__hidden, const OSMetaClassBase *))(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
          isEqualTo = this[1].isEqualTo;
          if (isEqualTo)
          {
            (*(void (**)(BOOL (__cdecl *)(const OSMetaClassBase *__hidden, const OSMetaClassBase *)))(*(void *)isEqualTo + 8))(isEqualTo);
            if (OSObject::init(this)) {
              return 1;
            }
            IOLog("AppleBCMWLANRoamAdapter super init failied\n");
          }
          else
          {
            IOLog("AppleBCMWLANRoamAdapter Failed to init fLogger\n");
          }
        }
        else
        {
          IOLog("AppleBCMWLANRoamAdapter configManager is null\n");
        }
      }
      else
      {
        IOLog("AppleBCMWLANRoamAdapter commander is null\n");
      }
    }
    else
    {
      IOLog("AppleBCMWLANRoamAdapter driver is null\n");
    }
  }
  else
  {
    IOLog("Failed to allocate AppleBCMWLANRoamAdapter_IVars\n");
  }
  return 0;
}

void AppleBCMWLANRoamAdapter::free(OSObject *this)
{
  uint64_t v2 = this[1].OSMetaClassBase::__vftable;
  if (v2)
  {
    isEqualTo = v2->isEqualTo;
    if (!isEqualTo
      || ((*(void (**)(BOOL (__cdecl *)(const OSMetaClassBase *__hidden, const OSMetaClassBase *)))(*(void *)isEqualTo + 16))(v2->isEqualTo),
          this[1].isEqualTo = 0,
          (uint64_t v2 = this[1].OSMetaClassBase::__vftable) != 0))
    {
      IOFree(v2, 0x28uLL);
      this[1].OSMetaClassBase::__vftable = 0;
    }
  }
  OSObject::free(this);
}

void non-virtual thunk to'AppleBCMWLANRoamAdapter::free(AppleBCMWLANRoamAdapter *this)
{
}

uint64_t AppleBCMWLANRoamAdapter::getCurrentRoamProfile(AppleBCMWLANRoamAdapter *this)
{
  return *(unsigned int *)(*((void *)this + 5) + 32);
}

uint64_t AppleBCMWLANRoamAdapter::setRoaming5GBandBoost(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 3758097084;
  uint64_t Bus = AppleBCMWLANCore::getBus(**(AppleBCMWLANCore ***)(a1 + 40));
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)Bus + 368))(Bus);
  if (v6 != 4387 && v6 != 4378) {
    return 3758097095;
  }
  if (*(unsigned char *)a2)
  {
    __int16 v8 = *(_WORD *)(a2 + 1);
    uint64_t v9 = IOMallocZeroData();
    *(_DWORD *)uint64_t v9 = 524289;
    *(_WORD *)(v9 + 4) = v8;
    *(_WORD *)(v9 + 6) = 0;
    v21[0] = v9;
    v21[1] = 8;
    AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 8));
    uint64_t v10 = IOMallocZeroData();
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = (*(uint64_t (**)(void))(***(void ***)(a1 + 40) + 88))(**(void **)(a1 + 40));
      if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 136))(v12))
      {
        uint64_t v18 = a1;
        uint64_t v19 = AppleBCMWLANRoamAdapter::setRoaming5GBandBoost;
        uint64_t v20 = 0;
        uint64_t v13 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 8), (uint64_t)"roam_5g_bandboost");
      }
      else
      {
        unsigned __int16 MaxCmdRxPayload = AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(*(void *)(a1 + 40)
                                                                                              + 8));
        unint64_t v15 = ((unint64_t)(unsigned __int16)AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 8)) << 32) | MaxCmdRxPayload;
        if (MaxCmdRxPayload)
        {
          uint64_t v16 = v11;
        }
        else
        {
          unint64_t v15 = 0;
          uint64_t v16 = 0;
        }
        uint64_t v18 = v16;
        uint64_t v19 = (uint64_t (*)())v15;
        uint64_t v13 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 8), (uint64_t)"roam_5g_bandboost", (uint64_t)v21, (uint64_t)&v18, 0);
      }
      uint64_t v4 = v13;
      IOFreeData();
    }
    else
    {
      uint64_t v4 = 3758097085;
    }
    IOFreeData();
  }
  return v4;
}

uint64_t AppleBCMWLANRoamAdapter::setRoamingProfile(uint64_t a1, uint64_t a2)
{
  if (AppleBCMWLANCore::checkForScanCoreSupport(**(AppleBCMWLANCore ***)(a1 + 40)))
  {
    return AppleBCMWLANRoamAdapter::setRoamingProfileV4(a1, (unsigned __int16 *)a2);
  }
  if (AppleBCMWLANCore::getFirmwareInterfaceVersion(**(AppleBCMWLANCore ***)(a1 + 40)) < 6)
  {
    int v5 = *(_DWORD *)(a2 + 76);
    if (v5)
    {
      if (v5 == 1)
      {
        int v48 = 0;
        int v6 = 4;
      }
      else
      {
        if (v5 != 3) {
          panic("getWlBand invalid band <%d> \n", *(_DWORD *)(a2 + 76));
        }
        int v48 = 1;
        int v6 = 1;
      }
    }
    else
    {
      int v48 = 0;
      int v6 = 2;
    }
    uint64_t v50 = a1;
    memset(&v53[1], 0, 68);
    v53[0] = v6;
    uint64_t v7 = (unsigned __int16 *)(a2 + 2);
    uint64_t v52 = a2;
    int v47 = v6;
    if (*(_WORD *)(a2 + 2))
    {
      uint64_t v8 = 0;
      int v9 = 0;
      int v46 = v6;
      uint64_t v10 = a2;
      while (1)
      {
        unsigned int v11 = *(_DWORD *)(a2 + 72);
        if ((*(_WORD *)v10 & 0x10) != 0)
        {
          unsigned int v12 = (*(_DWORD *)(a2 + 72) & 4u) >> 2;
          int v13 = ((*(_DWORD *)(a2 + 72) & 4) == 0) & (*(_DWORD *)(a2 + 72) >> 1);
          if ((v11 & 0x10) != 0)
          {
            int v14 = 0;
            BOOL v16 = (v11 & 7) == 1 || *(_DWORD *)(v52 + 68) == 3;
            HIDWORD(v49) = v16;
            LODWORD(v49) = 1;
          }
          else
          {
            LODWORD(v49) = 0;
            HIDWORD(v49) = (*(_DWORD *)(a2 + 72) & 7) == 1;
            int v14 = 0;
          }
        }
        else
        {
          LOBYTE(v12) = 0;
          LOBYTE(v13) = 0;
          uint64_t v49 = 0;
          int v14 = (v11 >> 5) & 1;
        }
        int v17 = 0;
        char v18 = v12 | v13;
        if ((v18 & 1) == 0 && (v14 & 1) == 0) {
          int v17 = (v11 >> 3) & 1;
        }
        if ((*(_WORD *)v10 & 4) != 0)
        {
          uint64_t v19 = *(AppleBCMWLANCore ***)(v50 + 40);
          if ((v18 & 1) == 0)
          {
            if (AppleBCMWLANCore::is4378Up(*v19)) {
              char v20 = 17;
            }
            else {
              char v20 = 1;
            }
            LOBYTE(v53[v8 + 2]) |= v20;
            uint64_t v19 = *(AppleBCMWLANCore ***)(v50 + 40);
          }
          if (AppleBCMWLANConfigManager::isExternallyPoweredPlatform(v19[2])) {
            LOBYTE(v53[v8 + 2]) |= 4u;
          }
        }
        int v51 = v17;
        if ((*(_WORD *)v10 & 8) != 0) {
          LOBYTE(v53[v8 + 2]) |= 2u;
        }
        __int16 v21 = *(_WORD *)(v10 + 2);
        int v22 = &v53[v8];
        *((unsigned char *)v22 + 9) = v21;
        *((unsigned char *)v22 + 10) = *(unsigned char *)(v10 + 4);
        if (!*(unsigned char *)(v52 + 84)) {
          *((unsigned char *)v22 + 11) = *(unsigned char *)(v10 + 16);
        }
        __int16 v23 = *(_WORD *)(v10 + 18);
        *((unsigned char *)v22 + 12) = v23;
        *((unsigned char *)v22 + 13) = *(unsigned char *)(v10 + 20);
        uint64_t v24 = *(void *)(v10 + 6);
        *(void *)((char *)v22 + 14) = v24;
        *((_WORD *)v22 + 11) = *(_WORD *)(v10 + 14);
        __int16 v25 = WORD1(v24);
        if (!v14)
        {
          a2 = v52;
          goto LABEL_53;
        }
        a2 = v52;
        if (*(void *)(*(void *)(v50 + 40) + 24) && CCLogStream::shouldLog()) {
          CCLogStream::logInfo(*(CCLogStream **)(*(void *)(v50 + 40) + 24), "[dk] %s@%d:Adaptive Roam Config, Trigger %d\n", "setRoamingProfile", 278, *(__int16 *)(v52 + 80));
        }
        if ((v22[2] & 0x11) == 0) {
          break;
        }
        LOWORD(v26) = *(_WORD *)(v52 + 80);
LABEL_49:
        int v27 = (__int16)v26 + 5;
        if (v27 >= (char)v23) {
          LOBYTE(v27) = v23;
        }
        *((unsigned char *)v22 + 12) = v27;
LABEL_53:
        if ((*(unsigned char *)(a2 + 72) & 4) != 0 && (*(_WORD *)v10 & 4) != 0)
        {
          *((_WORD *)v22 + 9) = v25;
          *((_WORD *)v22 + 11) = v25;
        }
        if (v12)
        {
          if (*(void *)(*(void *)(v50 + 40) + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logAlert(*(CCLogStream **)(*(void *)(v50 + 40) + 24), "[dk] %s@%d:useLpasOffset roam_prof Roam profile[%d], Band[%d]: to FW with lpas offset %d\n", "setRoamingProfile", 329, v9, v46, -10);
          }
          *((unsigned char *)v22 + 9) = v21 - 10;
          int v28 = *((char *)v22 + 10);
          if (v28 >= -90) {
            char v29 = v28 - 10;
          }
          else {
            char v29 = -100;
          }
          *((unsigned char *)v22 + 10) = v29;
          int v30 = v51;
          if (v8 * 4) {
            BYTE2(v53[4 * (v9 - 1) + 2]) -= 10;
          }
        }
        else
        {
          int v30 = v51;
          if (HIDWORD(v49))
          {
            HIBYTE(v53[v8 + 2]) = 8;
            *((_WORD *)v22 + 7) = 1;
            *(_DWORD *)((char *)v22 + 18) = 65538;
            *((_WORD *)v22 + 11) = 2;
            if (v48 && *(_DWORD *)(a2 + 68) == 3) {
              *((unsigned char *)v22 + 13) = 0;
            }
            if (v49 && *(__int16 *)(v10 + 4) <= -100)
            {
              if (*(void *)(*(void *)(v50 + 40) + 24) && CCLogStream::shouldLog()) {
                CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(v50 + 40) + 24), 0x4000uLL, "[dk] %s@%d:Using motion offsets in the roam profile[%d]: CandDelta:%d\n", "setRoamingProfile", 361, v9, *(char *)(a2 + 82));
              }
              HIBYTE(v53[v8 + 2]) = *(unsigned char *)(a2 + 82);
            }
          }
        }
        if (v30 && *(__int16 *)(v10 + 4) == -128) {
          *((_WORD *)v22 + 9) = 2;
        }
        __int16 v31 = v8 * 4 + 16;
        if (v8 == 8)
        {
          __int16 v33 = 48;
          goto LABEL_96;
        }
        int v32 = *(unsigned __int16 *)(v10 + 24);
        v10 += 22;
        ++v9;
        __int16 v33 = v8 * 4 + 16;
        v8 += 4;
        if (!v32) {
          goto LABEL_96;
        }
      }
      if (v48)
      {
        int v26 = *(unsigned __int16 *)(v52 + 80);
        if (*(__int16 *)(v10 + 4) == -128)
        {
LABEL_88:
          if ((__int16)v26 <= -75) {
            HIBYTE(v53[v8 + 2]) -= 2;
          }
          if (v8 * 4)
          {
            if (v26)
            {
              uint64_t v34 = &v53[4 * (v9 - 1)];
              int v36 = *((char *)v34 + 10);
              char v35 = (char *)v34 + 10;
              if (v36 > (char)v21) {
                unsigned char *v35 = v21;
              }
            }
          }
          goto LABEL_49;
        }
      }
      else
      {
        int v26 = *(unsigned __int16 *)(v52 + 80);
      }
      if ((__int16)v26 < (char)v21)
      {
        *((unsigned char *)v22 + 9) = v26;
        LOBYTE(v21) = v26;
      }
      *(void *)((char *)v22 + 14) = 0x20005000A0001;
      *((_WORD *)v22 + 11) = 30;
      __int16 v25 = 10;
      goto LABEL_88;
    }
    __int16 v33 = 0;
    __int16 v31 = HIWORD(v53[1]);
LABEL_96:
    HIWORD(v53[1]) = v31;
    if (*(unsigned char *)(a2 + 73))
    {
      uint64_t v37 = (char *)&v53[2] + 2;
      int v38 = &dword_10030384C;
      for (uint64_t i = 2; i != 68; i += 22)
      {
        if (!*(_WORD *)(a2 + i)) {
          break;
        }
        *(v37 - 1) = *v38;
        *uint64_t v37 = *(v38 - 1);
        v37 += 16;
        v38 += 2;
      }
    }
    uint64_t v40 = 0;
    int v41 = (char *)&v53[2] + 3;
    while (1)
    {
      int v42 = *v7;
      v7 += 11;
      uint64_t v43 = *(void *)(v50 + 40);
      if (!v42) {
        break;
      }
      if (*(void *)(v43 + 24) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*(void *)(v50 + 40) + 24), "[dk] %s@%d:Issuing roam_prof to FW: Roam profile[%d]: Band:%d, RSSI:[%d,%d], Flag:0x%x, ScanParams:(%d,%d,%d,%d,%d), Candidate:(%d,%d,%d)\n", "setRoamingProfile", 386, v40, v47, *(v41 - 2), *(v41 - 1), *(v41 - 3), *(unsigned __int16 *)(v41 + 3), *(unsigned __int16 *)(v41 + 5), *(unsigned __int16 *)(v41 + 7), *(unsigned __int16 *)(v41 + 9), *(unsigned __int16 *)(v41 + 11), *v41, v41[2], v41[1]);
      }
      ++v40;
      v41 += 16;
      if (v40 == 3)
      {
        uint64_t v43 = *(void *)(v50 + 40);
        break;
      }
    }
    if (v33)
    {
      uint64_t v44 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(v43 + 8), (uint64_t)"roam_prof");
      if (v44)
      {
        uint64_t v45 = v44;
        if (*(void *)(*(void *)(v50 + 40) + 24) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*(void *)(v50 + 40) + 24), "[dk] %s@%d: Error: setting roam profile for band %d failed\n", "setRoamingProfile", 397, v47);
        }
        return v45;
      }
      uint64_t v43 = *(void *)(v50 + 40);
    }
    uint64_t v45 = 0;
    *(_DWORD *)(v43 + 32) = *(_DWORD *)(v52 + 68);
    return v45;
  }
  return AppleBCMWLANRoamAdapter::setRoamingProfileV2(a1, (unsigned __int16 *)a2);
}

uint64_t AppleBCMWLANRoamAdapter::setRoamingProfileV4(uint64_t a1, unsigned __int16 *a2)
{
  int v4 = *((_DWORD *)a2 + 19);
  if (v4)
  {
    if (v4 == 1)
    {
      int v60 = 0;
      int v5 = 4;
    }
    else
    {
      if (v4 != 3) {
        panic("getWlBand invalid band <%d> \n", *((_DWORD *)a2 + 19));
      }
      int v60 = 1;
      int v5 = 1;
    }
  }
  else
  {
    int v60 = 0;
    int v5 = 2;
  }
  AppleBCMWLANRoamAdapter::setRoaming5GBandBoost(a1, (uint64_t)(a2 + 44));
  uint64_t v6 = 0;
  int v7 = 0;
  memset(v69, 0, sizeof(v69));
  int v67 = v5;
  int v68 = 3;
  int v59 = v5;
  int v58 = v5;
  uint64_t v8 = a2;
  while (v8[1])
  {
    unsigned __int16 v9 = *v8;
    unsigned int v10 = *((_DWORD *)a2 + 18);
    if ((*v8 & 0x10) == 0)
    {
      unsigned int v11 = 0;
      int v12 = 0;
      uint64_t v64 = 0;
LABEL_16:
      int v61 = 0;
      goto LABEL_21;
    }
    unsigned int v11 = (*((_DWORD *)a2 + 18) & 4u) >> 2;
    int v12 = ((*((_DWORD *)a2 + 18) & 4) == 0) & (*((_DWORD *)a2 + 18) >> 1);
    if ((v10 & 0x26) != 0)
    {
      if ((v10 & 0x20) != 0)
      {
        int v61 = 0;
        uint64_t v64 = 0;
        char v13 = (*((_DWORD *)a2 + 18) & 6) != 0;
        int v14 = 1;
        goto LABEL_25;
      }
      LODWORD(v64) = 0;
      int v15 = 0;
      if ((v10 & 0x10) == 0)
      {
LABEL_15:
        HIDWORD(v64) = v15;
        goto LABEL_16;
      }
    }
    else
    {
      int v15 = *((_DWORD *)a2 + 18) & 1;
      LODWORD(v64) = (v10 >> 7) & 1;
      if ((v10 & 0x10) == 0) {
        goto LABEL_15;
      }
    }
    if (*((_DWORD *)a2 + 17) == 3) {
      int v15 = 1;
    }
    HIDWORD(v64) = v15;
    int v61 = 1;
LABEL_21:
    int v14 = (v10 >> 5) & 1;
    char v13 = v11 | v12;
    if (((v11 | v12) & 1) == 0 && (v10 & 0x20) == 0)
    {
      int v63 = (v10 >> 3) & 1;
      if ((v9 & 4) == 0)
      {
        unsigned int v11 = 0;
        int v12 = 0;
        int v14 = 0;
        goto LABEL_36;
      }
      int v14 = 0;
      int v12 = 0;
      unsigned int v11 = 0;
      BOOL v16 = *(AppleBCMWLANCore ***)(a1 + 40);
LABEL_30:
      if (AppleBCMWLANCore::is4378Up(*v16)) {
        char v17 = 17;
      }
      else {
        char v17 = 1;
      }
      v69[v6] |= v17;
      BOOL v16 = *(AppleBCMWLANCore ***)(a1 + 40);
      goto LABEL_34;
    }
LABEL_25:
    if ((v9 & 4) == 0)
    {
      int v63 = 0;
      goto LABEL_36;
    }
    int v63 = 0;
    BOOL v16 = *(AppleBCMWLANCore ***)(a1 + 40);
    if ((v13 & 1) == 0) {
      goto LABEL_30;
    }
LABEL_34:
    if (AppleBCMWLANConfigManager::isExternallyPoweredPlatform(v16[2])) {
      v69[v6] |= 4u;
    }
LABEL_36:
    if ((*v8 & 8) != 0) {
      v69[v6] |= 2u;
    }
    if ((a2[36] & 6) == 0)
    {
      if (AppleBCMWLANCore::is4387C0Up(**(OSDictionary ***)(a1 + 40))
        && AppleBCMWLANCore::getTxPowerManager(**(AppleBCMWLANCore ***)(a1 + 40))
        && (TxPowerManager = (AppleBCMWLANTxPowerManager *)AppleBCMWLANCore::getTxPowerManager(**(AppleBCMWLANCore ***)(a1 + 40)),
            AppleBCMWLANTxPowerManager::getDynSARMode(TxPowerManager) == 2))
      {
        if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
          CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:WL_ROAM_PROF_EXTSCAN flag is NOT enabled due to hybrid DSA!\n", "setRoamingProfileV4", 783);
        }
      }
      else
      {
        v69[v6] |= 8u;
      }
    }
    if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:band=%d, bcm_roam_profile.roam_prof[%d].roam_flags=0x%x, fAppliedRoamOffsets=%d\n", "setRoamingProfileV4", 789, v58, v7, v69[v6], *((_DWORD *)a2 + 18));
    }
    unsigned int v66 = v11;
    uint64_t v19 = (char *)&v67 + v6;
    *((_WORD *)v19 + 12) = 2560;
    unsigned __int16 v20 = v8[1];
    v19[9] = v20;
    v19[10] = *((unsigned char *)v8 + 4);
    if (!*((unsigned char *)a2 + 84)) {
      v19[11] = *((unsigned char *)v8 + 16);
    }
    unsigned __int16 v21 = v8[9];
    v19[12] = v21;
    v19[13] = *((unsigned char *)v8 + 20);
    uint64_t v22 = *(void *)(v8 + 3);
    *(void *)(v19 + 14) = v22;
    *((_WORD *)v19 + 11) = v8[7];
    *((_WORD *)v19 + 13) = 5;
    v19[28] = 10;
    unsigned __int16 v62 = WORD1(v22);
    unsigned __int16 v65 = WORD2(v22);
    if ((*(unsigned char *)v8 & 4) != 0
      && *((_DWORD *)a2 + 17) == 3
      && AppleBCMWLANCore::is4378Up(**(AppleBCMWLANCore ***)(a1 + 40)))
    {
      *((void *)v19 + 2) = 0xB40002001E005ALL;
      unsigned __int16 v62 = 90;
      unsigned __int16 v65 = 30;
    }
    uint64_t v23 = *(void *)(a1 + 40);
    if (*(void *)(v23 + 24))
    {
      int shouldLog = CCLogStream::shouldLog();
      uint64_t v23 = *(void *)(a1 + 40);
      if (shouldLog)
      {
        CCLogStream::logInfo(*(CCLogStream **)(v23 + 24), "[dk] %s@%d:useLpasOffset %d useWoWOffset %d poorlqmOffset %d activeTrafficOffset %d BtAudioActiveOffset %d useMotionOffset %d useAdaptiveRoamMode %d\n", "setRoamingProfileV4", 818, v66 & 1, v12, v63, HIDWORD(v64), v64, v61, v14);
        uint64_t v23 = *(void *)(a1 + 40);
      }
    }
    if (*(void *)(v23 + 24))
    {
      int v25 = CCLogStream::shouldLog();
      uint64_t v23 = *(void *)(a1 + 40);
      if (v25)
      {
        CCLogStream::logInfo(*(CCLogStream **)(v23 + 24), "[dk] %s@%d:pParams[i].flags %x CI Delta %x ,  pParams[i].flags & kRoamUseLazyScan = %d bcm_roam_profile.roam_prof[i].roam_flags %x bcm_roam_profile.roam_prof[i].roam_flags & WL_ROAM_PROF_LAZY = %d bcm_roam_profile.roam_prof[i].roam_flags & WL_ROAM_FIND_HIGHER_BAND_ONLY = %d\n", "setRoamingProfileV4", 825, *v8, *v8 & 8, *v8 & 4, v19[8], v19[8] & 1, v19[8] & 0x10);
        uint64_t v23 = *(void *)(a1 + 40);
      }
    }
    if (*(void *)(v23 + 24) && CCLogStream::shouldLog())
    {
      CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:pParams[i].triggers.lower %d pParams[i].triggers.upper %d\n", "setRoamingProfileV4", 828, (__int16)v8[2], (__int16)v8[1]);
      if (!v14)
      {
LABEL_115:
        int v27 = HIDWORD(v64);
LABEL_116:
        char v29 = v20;
        goto LABEL_117;
      }
    }
    else if (!v14)
    {
      goto LABEL_115;
    }
    if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:Adaptive Roam Config, Trigger %d\n", "setRoamingProfileV4", 832, (__int16)a2[40]);
    }
    int v26 = *((_DWORD *)a2 + 17);
    if (v26 == 2)
    {
      int v27 = HIDWORD(v64);
      if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
        CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:band %d pRoamProfileConfig->params[i].triggers.lower %d pRoamProfileConfig->common.roamTrigger %d pRoamProfileConfig->common.roamTrigger %d bcm_roam_profile.roam_prof[i].roam_trigger %d\n", "setRoamingProfileV4", 897, v59, (__int16)v8[2], (__int16)a2[40], (__int16)a2[40], (char)v20);
      }
      if (v59 == 1)
      {
        int v35 = (__int16)a2[40];
        char v29 = v20;
        if ((__int16)v8[2] == -128)
        {
          if (v35 < (char)v20)
          {
            v19[9] = a2[40];
            char v29 = v35;
          }
          *(void *)(v19 + 14) = 0x2001401680001;
          *((_WORD *)v19 + 11) = 90;
          unsigned __int16 v62 = 360;
          __int16 v36 = 20;
LABEL_96:
          unsigned __int16 v65 = v36;
        }
LABEL_97:
        if (!v6) {
          goto LABEL_117;
        }
      }
      else
      {
        char v29 = v20;
        if (v59 == 2)
        {
          int v35 = (__int16)a2[40];
          if ((__int16)v8[2] == -128)
          {
            if (v35 < (char)v20)
            {
              v19[9] = a2[40];
              char v29 = v35;
            }
            *((void *)v19 + 2) = 0x5A0001005A0168;
            unsigned __int16 v62 = 360;
            __int16 v36 = 90;
            goto LABEL_96;
          }
          goto LABEL_97;
        }
        LOWORD(v35) = a2[40];
        if (!v6) {
          goto LABEL_117;
        }
      }
      if ((_WORD)v35) {
        goto LABEL_112;
      }
      goto LABEL_117;
    }
    int v27 = HIDWORD(v64);
    if (v26 != 3) {
      goto LABEL_116;
    }
    int v28 = v19[8];
    char v29 = v20;
    if ((v28 & 0x11111111) == 0)
    {
      int v30 = (__int16)a2[40];
      if (v60)
      {
        if (v30 >= (__int16)v8[1]) {
          goto LABEL_80;
        }
        int v31 = (__int16)v8[2];
        if (v31 <= -75 && v31 != -128)
        {
          if (AppleBCMWLANCore::is4378Up(**(AppleBCMWLANCore ***)(a1 + 40))) {
            char v32 = 16;
          }
          else {
            char v32 = v28;
          }
          v19[8] = v28 | v32;
          int v30 = (__int16)a2[40];
          if (v30 <= -75) {
            v69[v6 + 3] = 8;
          }
          char v29 = v20;
LABEL_80:
          LOWORD(v31) = v8[2];
        }
        if ((unsigned __int16)v31 == 65408)
        {
          __int16 v33 = 1;
          unsigned __int16 v62 = 30;
          unsigned __int16 v65 = 2;
          LOBYTE(v31) = v30;
          __int16 v34 = 2;
          goto LABEL_106;
        }
      }
      else
      {
        LOWORD(v31) = v8[2];
      }
      __int16 v34 = 30;
      __int16 v33 = 2;
      if (v30 < (__int16)v31)
      {
        unsigned __int16 v62 = 10;
        unsigned __int16 v65 = 5;
        goto LABEL_107;
      }
      unsigned __int16 v62 = 10;
      unsigned __int16 v65 = 5;
      LOBYTE(v31) = v30;
LABEL_106:
      if (v30 < v29)
      {
LABEL_107:
        v19[9] = v31;
        char v29 = v31;
      }
      *((_WORD *)v19 + 7) = 1;
      *((_WORD *)v19 + 9) = v65;
      *((_WORD *)v19 + 8) = v62;
      *((_WORD *)v19 + 10) = v33;
      *((_WORD *)v19 + 11) = v34;
      char v37 = v30 + 5;
      if (v30 + 5 >= (char)v21) {
        char v37 = v21;
      }
      v19[12] = v37;
      if (!v6 || !v30) {
        goto LABEL_117;
      }
LABEL_112:
      int v38 = &v67 + 7 * (v7 - 1);
      int v40 = *((char *)v38 + 10);
      uint64_t v39 = (char *)v38 + 10;
      if (v40 > v29) {
        *uint64_t v39 = v29;
      }
    }
LABEL_117:
    if ((a2[36] & 4) != 0)
    {
      unsigned int v41 = v66;
      int v42 = v64;
      if ((*v8 & 4) != 0)
      {
        *((_WORD *)v19 + 9) = v62;
        *((_WORD *)v19 + 11) = v62;
        unsigned __int16 v65 = v62;
      }
    }
    else
    {
      unsigned int v41 = v66;
      int v42 = v64;
    }
    if (v41)
    {
      v19[9] = v29 - 10;
      int v43 = v19[10];
      if (v43 >= -90) {
        char v44 = v43 - 10;
      }
      else {
        char v44 = -100;
      }
      v19[10] = v44;
      if (v6) {
        v69[28 * (v7 - 1) + 2] -= 10;
      }
    }
    else if ((v42 | v27) == 1)
    {
      v69[v6 + 3] = 8;
      *((_WORD *)v19 + 7) = 1;
      *(_DWORD *)(v19 + 18) = 65538;
      *((_WORD *)v19 + 11) = 2;
      if (v60 && *((_DWORD *)a2 + 17) == 3) {
        v19[13] = 0;
      }
      if (((v42 | v61 ^ 1) & 1) == 0 && (__int16)v8[2] <= -100)
      {
        if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
          CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 40) + 24), 0x4000uLL, "[dk] %s@%d:Using motion offsets in the roam profile. CandDelta:%d\n", "setRoamingProfileV4", 966, *((char *)a2 + 82));
        }
        v69[v6 + 3] = *((unsigned char *)a2 + 82);
      }
      unsigned __int16 v65 = 2;
      unsigned int v41 = v66;
    }
    if (v63 && (__int16)v8[2] == -128)
    {
      unsigned __int16 v65 = 2;
      *((_WORD *)v19 + 9) = 2;
    }
    if (((v41 | v42 | v27 | AppleBCMWLANCore::checkForLPSCDisable(**(AppleBCMWLANCore ***)(a1 + 40))) & 1) != 0
      || *((unsigned char *)a2 + 85))
    {
      *(_DWORD *)&v69[v6 + 24] = 0;
    }
    else
    {
      if (v62 >> 1 <= v65) {
        int v45 = v65;
      }
      else {
        int v45 = v62 >> 1;
      }
      int v46 = (char *)&v67 + v6;
      *((_WORD *)v46 + 16) = v45;
      *((_WORD *)v46 + 17) = v62;
      if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
        CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:LPSC: lp_roam_scan_period = %d, max_fullscan_period = %d Legacy: init_scan_period = %d, fullscan_period = %d\n", "setRoamingProfileV4", 992, v45, v62, v65, v62);
      }
    }
    v6 += 28;
    HIWORD(v68) = v6;
    ++v7;
    v8 += 11;
    if (v6 == 84) {
      break;
    }
  }
  if (*((unsigned char *)a2 + 73))
  {
    int v47 = &v69[2];
    int v48 = &dword_10030384C;
    for (uint64_t i = 1; i != 34; i += 11)
    {
      if (!a2[i]) {
        break;
      }
      *(v47 - 1) = *v48;
      *int v47 = *(v48 - 1);
      v47 += 28;
      v48 += 2;
    }
  }
  uint64_t v50 = 0;
  int v51 = 0;
  uint64_t v52 = a2 + 1;
  while (1)
  {
    int v53 = *v52;
    v52 += 11;
    uint64_t v54 = *(void *)(a1 + 40);
    if (!v53) {
      break;
    }
    if (*(void *)(v54 + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:Roam profile[%d]: Band:%d, RSSI:[%d,%d], Flag:0x%x, ScanParams:(%d,%d,%d,%d,%d), Candidate:(%d,%d,%d) LP %d %d\n", "setRoamingProfileV4", 1011, v51, v59, (char)v69[v50 + 1], (char)v69[v50 + 2], v69[v50], *(unsigned __int16 *)&v69[v50 + 6], *(unsigned __int16 *)&v69[v50 + 8], *(unsigned __int16 *)&v69[v50 + 10], *(unsigned __int16 *)&v69[v50 + 12], *(unsigned __int16 *)&v69[v50 + 14], (char)v69[v50 + 3], (char)v69[v50 + 5], (char)v69[v50 + 4], *(unsigned __int16 *)&v69[v50 + 24], *(unsigned __int16 *)&v69[v50 + 26]);
    }
    ++v51;
    v50 += 28;
    if (v50 == 84)
    {
      uint64_t v54 = *(void *)(a1 + 40);
      break;
    }
  }
  if (!(_WORD)v6)
  {
LABEL_169:
    uint64_t v56 = 0;
    *(_DWORD *)(v54 + 32) = *((_DWORD *)a2 + 17);
    return v56;
  }
  uint64_t v55 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(v54 + 8), (uint64_t)"roam_prof");
  if (!v55)
  {
    uint64_t v54 = *(void *)(a1 + 40);
    goto LABEL_169;
  }
  uint64_t v56 = v55;
  if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d: Error: setting roam profile for band %d failed\n", "setRoamingProfileV4", 1022, v59);
  }
  return v56;
}

uint64_t AppleBCMWLANRoamAdapter::setRoamingProfileV2(uint64_t a1, unsigned __int16 *a2)
{
  int v4 = *((_DWORD *)a2 + 19);
  if (v4)
  {
    if (v4 == 1)
    {
      int v54 = 0;
      int v5 = 4;
    }
    else
    {
      if (v4 != 3) {
        panic("getWlBand invalid band <%d> \n", *((_DWORD *)a2 + 19));
      }
      int v54 = 1;
      int v5 = 1;
    }
  }
  else
  {
    int v54 = 0;
    int v5 = 2;
  }
  uint64_t Bus = AppleBCMWLANCore::getBus(**(AppleBCMWLANCore ***)(a1 + 40));
  int v52 = (*(uint64_t (**)(uint64_t))(*(void *)Bus + 368))(Bus);
  AppleBCMWLANRoamAdapter::setRoaming5GBandBoost(a1, (uint64_t)(a2 + 44));
  uint64_t v7 = 0;
  int v8 = 0;
  memset(v62, 0, sizeof(v62));
  int v60 = v5;
  int v61 = 1;
  int v53 = v5;
  unsigned __int16 v9 = a2;
  while (v9[1])
  {
    unsigned __int16 v10 = *v9;
    unsigned int v11 = *((_DWORD *)a2 + 18);
    if ((*v9 & 0x10) != 0)
    {
      unsigned int v12 = (*((_DWORD *)a2 + 18) & 4u) >> 2;
      int v13 = ((*((_DWORD *)a2 + 18) & 4) == 0) & (*((_DWORD *)a2 + 18) >> 1);
      if ((v11 & 0x26) != 0)
      {
        int v14 = 0;
        if ((v11 & 0x20) != 0)
        {
          int v55 = 0;
          int v57 = 0;
          char v15 = (*((_DWORD *)a2 + 18) & 6) != 0;
          int v16 = 1;
          goto LABEL_27;
        }
        int v57 = 0;
        if ((v11 & 0x10) == 0)
        {
LABEL_18:
          int v55 = 0;
          goto LABEL_23;
        }
      }
      else
      {
        int v57 = *((_DWORD *)a2 + 18) & 1;
        if (v52 == 4378)
        {
          int v14 = (v11 >> 7) & 1;
          if ((v11 & 0x10) == 0) {
            goto LABEL_18;
          }
        }
        else
        {
          int v14 = 0;
          if ((v11 & 0x10) == 0) {
            goto LABEL_18;
          }
        }
      }
      int v17 = v57;
      if (*((_DWORD *)a2 + 17) == 3) {
        int v17 = 1;
      }
      int v57 = v17;
      int v55 = 1;
    }
    else
    {
      LOBYTE(v12) = 0;
      int v13 = 0;
      int v57 = 0;
      int v55 = 0;
      int v14 = 0;
    }
LABEL_23:
    int v16 = (v11 >> 5) & 1;
    char v15 = v12 | v13;
    if (((v12 | v13) & 1) == 0 && (v11 & 0x20) == 0)
    {
      int v59 = (v11 >> 3) & 1;
      if ((v10 & 4) == 0)
      {
        LOBYTE(v12) = 0;
        int v13 = 0;
        int v16 = 0;
        goto LABEL_38;
      }
      int v16 = 0;
      int v13 = 0;
      LOBYTE(v12) = 0;
      char v18 = *(AppleBCMWLANCore ***)(a1 + 40);
LABEL_32:
      if (AppleBCMWLANCore::is4378Up(*v18)) {
        char v19 = 17;
      }
      else {
        char v19 = 1;
      }
      *((unsigned char *)v62 + v7) |= v19;
      char v18 = *(AppleBCMWLANCore ***)(a1 + 40);
      goto LABEL_36;
    }
LABEL_27:
    if ((v10 & 4) == 0)
    {
      int v59 = 0;
      goto LABEL_38;
    }
    int v59 = 0;
    char v18 = *(AppleBCMWLANCore ***)(a1 + 40);
    if ((v15 & 1) == 0) {
      goto LABEL_32;
    }
LABEL_36:
    if (AppleBCMWLANConfigManager::isExternallyPoweredPlatform(v18[2])) {
      *((unsigned char *)v62 + v7) |= 4u;
    }
LABEL_38:
    if ((*v9 & 8) != 0) {
      *((unsigned char *)v62 + v7) |= 2u;
    }
    if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:useLpasOffset %d useWoWOffset %d poorlqmOffset %d activeTrafficOffset %d BtAudioActiveOffset %d useMotionOffset %d useAdaptiveRoamMode %d\n", "setRoamingProfileV2", 489, v12 & 1, v13, v59, v57, v14, v55, v16);
    }
    char v58 = v12;
    int v56 = v14;
    unsigned __int16 v20 = (char *)&v60 + v7;
    *((_WORD *)v20 + 12) = 2560;
    unsigned __int16 v21 = v9[1];
    v20[9] = v21;
    v20[10] = *((unsigned char *)v9 + 4);
    if (!*((unsigned char *)a2 + 84)) {
      v20[11] = *((unsigned char *)v9 + 16);
    }
    unsigned __int16 v22 = v9[9];
    v20[12] = v22;
    v20[13] = *((unsigned char *)v9 + 20);
    uint64_t v23 = *(void *)(v9 + 3);
    *(void *)(v20 + 14) = v23;
    *((_WORD *)v20 + 11) = v9[7];
    __int16 v24 = WORD1(v23);
    if ((*(unsigned char *)v9 & 4) != 0
      && *((_DWORD *)a2 + 17) == 3
      && AppleBCMWLANCore::is4378Up(**(AppleBCMWLANCore ***)(a1 + 40)))
    {
      *((void *)v20 + 2) = 0xB40002001E005ALL;
      __int16 v24 = 90;
    }
    uint64_t v25 = *(void *)(a1 + 40);
    if (*(void *)(v25 + 24))
    {
      int shouldLog = CCLogStream::shouldLog();
      uint64_t v25 = *(void *)(a1 + 40);
      if (shouldLog)
      {
        CCLogStream::logInfo(*(CCLogStream **)(v25 + 24), "[dk] %s@%d:pParams[i].flags %x CI Delta %x ,  pParams[i].flags & kRoamUseLazyScan = %d bcm_roam_profile.roam_prof[i].roam_flags %x bcm_roam_profile.roam_prof[i].roam_flags & (int8)WL_ROAM_PROF_LAZY = %d bcm_roam_profile.roam_prof[i].roam_flags & (int8)WL_ROAM_FIND_HIGHER_BAND_ONLY = %d\n", "setRoamingProfileV2", 521, *v9, *v9 & 8, *v9 & 4, v20[8], v20[8] & 1, v20[8] & 0x10);
        uint64_t v25 = *(void *)(a1 + 40);
      }
    }
    if (*(void *)(v25 + 24) && CCLogStream::shouldLog())
    {
      CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:pParams[i].triggers.lower %d pParams[i].triggers.upper %d\n", "setRoamingProfileV2", 524, (__int16)v9[2], (__int16)v9[1]);
      if (!v16) {
        goto LABEL_104;
      }
    }
    else if (!v16)
    {
      goto LABEL_104;
    }
    if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:Adaptive Roam Config, Trigger %d\n", "setRoamingProfileV2", 528, (__int16)a2[40]);
    }
    int v27 = *((_DWORD *)a2 + 17);
    if (v27 == 2)
    {
      if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
        CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:band %d pParams[i].triggers.lower %d pRoamProfileConfig->common.roamTrigger %d pRoamProfileConfig->common.roamTrigger %d bcm_roam_profile.roam_prof[i].roam_trigger %d\n", "setRoamingProfileV2", 592, v53, (__int16)v9[2], (__int16)a2[40], (__int16)a2[40], (char)v21);
      }
      if (v53 == 1)
      {
        int v34 = (__int16)a2[40];
        if ((__int16)v9[2] == -128)
        {
          if (v34 < (char)v21)
          {
            v20[9] = a2[40];
            LOBYTE(v21) = v34;
          }
          *(void *)(v20 + 14) = 0x2001401680001;
          *((_WORD *)v20 + 11) = 90;
LABEL_86:
          __int16 v24 = 360;
        }
LABEL_87:
        if (!v7) {
          goto LABEL_104;
        }
      }
      else
      {
        if (v53 == 2)
        {
          int v34 = (__int16)a2[40];
          if ((__int16)v9[2] == -128)
          {
            if (v34 < (char)v21)
            {
              v20[9] = a2[40];
              LOBYTE(v21) = v34;
            }
            *((void *)v20 + 2) = 0x5A0001005A0168;
            goto LABEL_86;
          }
          goto LABEL_87;
        }
        LOWORD(v34) = a2[40];
        if (!v7) {
          goto LABEL_104;
        }
      }
      if ((_WORD)v34) {
        goto LABEL_102;
      }
      goto LABEL_104;
    }
    if (v27 == 3)
    {
      int v28 = v20[8];
      if ((v28 & 0x11111111) == 0)
      {
        int v29 = (__int16)a2[40];
        if (v54)
        {
          if (v29 >= (__int16)v9[1]) {
            goto LABEL_70;
          }
          int v30 = (__int16)v9[2];
          if (v30 <= -75 && v30 != -128)
          {
            if (AppleBCMWLANCore::is4378Up(**(AppleBCMWLANCore ***)(a1 + 40))) {
              char v31 = 16;
            }
            else {
              char v31 = v28;
            }
            char v20[8] = v28 | v31;
            int v29 = (__int16)a2[40];
            if (v29 <= -75) {
              *((unsigned char *)v62 + v7 + 3) = 8;
            }
LABEL_70:
            LOWORD(v30) = v9[2];
          }
          if ((unsigned __int16)v30 == 65408)
          {
            LOBYTE(v30) = v29;
            uint64_t v32 = 0x200010002001ELL;
            uint64_t v33 = 0x200010002001ELL;
            goto LABEL_96;
          }
        }
        else
        {
          LOWORD(v30) = v9[2];
        }
        if (v29 < (__int16)v30)
        {
          uint64_t v32 = 0x1E00020005000ALL;
          goto LABEL_97;
        }
        LOBYTE(v30) = v29;
        uint64_t v32 = 0x1E00020005000ALL;
        uint64_t v33 = 0x1E00020005000ALL;
LABEL_96:
        if (v29 < (char)v21)
        {
LABEL_97:
          v20[9] = v30;
          LOBYTE(v21) = v30;
          uint64_t v33 = v32;
        }
        *((_WORD *)v20 + 7) = 1;
        *((void *)v20 + 2) = v33;
        char v35 = v29 + 5;
        if (v29 + 5 >= (char)v22) {
          char v35 = v22;
        }
        v20[12] = v35;
        __int16 v24 = v33;
        if (!v7 || !v29) {
          goto LABEL_104;
        }
LABEL_102:
        __int16 v36 = &v60 + 5 * (v8 - 1);
        int v38 = *((char *)v36 + 10);
        char v37 = (char *)v36 + 10;
        if (v38 > (char)v21) {
          *char v37 = v21;
        }
      }
    }
LABEL_104:
    if ((a2[36] & 4) != 0 && (*v9 & 4) != 0)
    {
      *((_WORD *)v20 + 9) = v24;
      *((_WORD *)v20 + 11) = v24;
    }
    if (v58)
    {
      v20[9] = v21 - 10;
      int v39 = v20[10];
      if (v39 >= -90) {
        char v40 = v39 - 10;
      }
      else {
        char v40 = -100;
      }
      v20[10] = v40;
      if (v7) {
        *((unsigned char *)v62 + 20 * (v8 - 1) + 2) -= 10;
      }
    }
    else if ((v56 | v57) == 1)
    {
      *((unsigned char *)v62 + v7 + 3) = 8;
      *((_WORD *)v20 + 7) = 1;
      *((_WORD *)v20 + 9) = 2;
      *((_WORD *)v20 + 10) = 1;
      *((_WORD *)v20 + 11) = 2;
      if (v54 && *((_DWORD *)a2 + 17) == 3) {
        v20[13] = 0;
      }
      if (((v56 | v55 ^ 1) & 1) == 0 && (__int16)v9[2] <= -100)
      {
        if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
          CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 40) + 24), 0x4000uLL, "[dk] %s@%d:Using motion offsets in the roam profile[%d]: CandDelta:%d\n", "setRoamingProfileV2", 661, v8, *((char *)a2 + 82));
        }
        *((unsigned char *)v62 + v7 + 3) = *((unsigned char *)a2 + 82);
      }
    }
    if (v59 && (__int16)v9[2] == -128) {
      *((_WORD *)v20 + 9) = 2;
    }
    v7 += 20;
    HIWORD(v61) = v7;
    ++v8;
    v9 += 11;
    if (v7 == 60) {
      break;
    }
  }
  if (*((unsigned char *)a2 + 73))
  {
    unsigned int v41 = (char *)v62 + 2;
    int v42 = &dword_10030384C;
    for (uint64_t i = 1; i != 34; i += 11)
    {
      if (!a2[i]) {
        break;
      }
      *(v41 - 1) = *v42;
      *unsigned int v41 = *(v42 - 1);
      v41 += 20;
      v42 += 2;
    }
  }
  uint64_t v44 = 0;
  int v45 = a2 + 1;
  int v46 = (char *)v62 + 3;
  while (1)
  {
    int v47 = *v45;
    v45 += 11;
    uint64_t v48 = *(void *)(a1 + 40);
    if (!v47) {
      break;
    }
    if (*(void *)(v48 + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:%s:Issuing roam_prof to FW: Roam profile[%d]: Band:%d, RSSI:[%d,%d], Flag:0x%x, ScanParams:(%d,%d,%d,%d,%d),Candidate:(%d,%d,%d)\n", "setRoamingProfileV2", 686, "setRoamingProfileV2", v44, v53, *(v46 - 2), *(v46 - 1), *(v46 - 3), *(unsigned __int16 *)(v46 + 3), *(unsigned __int16 *)(v46 + 5), *(unsigned __int16 *)(v46 + 7), *(unsigned __int16 *)(v46 + 9), *(unsigned __int16 *)(v46 + 11), *v46, v46[2], v46[1]);
    }
    ++v44;
    v46 += 20;
    if (v44 == 3)
    {
      uint64_t v48 = *(void *)(a1 + 40);
      break;
    }
  }
  if (!(_WORD)v7)
  {
LABEL_147:
    uint64_t v50 = 0;
    *(_DWORD *)(v48 + 32) = *((_DWORD *)a2 + 17);
    return v50;
  }
  uint64_t v49 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(v48 + 8), (uint64_t)"roam_prof");
  if (!v49)
  {
    uint64_t v48 = *(void *)(a1 + 40);
    goto LABEL_147;
  }
  uint64_t v50 = v49;
  if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d: Error: setting roam profile for band %d failed\n", "setRoamingProfileV2", 697, v53);
  }
  return v50;
}

uint64_t AppleBCMWLANRoamAdapter::handleRoamProfileAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(*(void *)(result + 40) + 24);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v5 = *(void **)(v3 + 40);
        uint64_t v6 = (CCLogStream *)v5[3];
        uint64_t v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 112))(*v5, a3);
        return CCLogStream::logAlert(v6, "[dk] %s@%d: Error: cannot set roam profile error=%s\n", "handleRoamProfileAsyncCallBack", 1191, v7);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANRoamAdapter::getRoamFlags(uint64_t a1, char *a2)
{
  unsigned int v2 = *a2;
  uint64_t v3 = v2 & 1 | ((((v2 & 6) >> 1) & 3) << 8) & 0xFFFFE7FF | (v2 >> 1) & 4 | ((((v2 & 0x30) >> 4) & 3) << 11) | (v2 >> 5) & 2;
  if ((v2 & 0x80000000) != 0)
  {
    if (AppleBCMWLANCore::is4387C0Up(**(OSDictionary ***)(a1 + 40))
      && AppleBCMWLANCore::getTxPowerManager(**(AppleBCMWLANCore ***)(a1 + 40))
      && (TxPowerManager = (AppleBCMWLANTxPowerManager *)AppleBCMWLANCore::getTxPowerManager(**(AppleBCMWLANCore ***)(a1 + 40)),
          AppleBCMWLANTxPowerManager::getDynSARMode(TxPowerManager) == 2))
    {
      if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
        CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:WL_ROAM_PROF_EXTSCAN flag is NOT enabled due to hybrid DSA!\n", "getRoamFlags", 1068);
      }
    }
    else
    {
      return v3 | 8;
    }
  }
  return v3;
}

uint64_t AppleBCMWLANRoamAdapter::setRoamBracket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)(a3 + 22) = 1802;
  *(_DWORD *)(a3 + 18) = 330240;
  *(void *)(a3 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a3 + 16) = *(_WORD *)(a2 + 16);
  int v6 = AppleBCMWLANCore::checkForLPSCDisable(**(AppleBCMWLANCore ***)(a1 + 40));
  __int16 v7 = *(_WORD *)(a2 + 18);
  __int16 v8 = *(_WORD *)(a2 + 20);
  if (v6)
  {
    __int16 v7 = 0;
    __int16 v8 = 0;
  }
  *(_WORD *)(a3 + 26) = v7;
  *(_WORD *)(a3 + 28) = v8;
  uint64_t result = AppleBCMWLANRoamAdapter::getRoamFlags(a1, (char *)a2);
  *(_DWORD *)a3 = result;
  *(unsigned char *)(a3 + 4) = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a3 + 5) = *(unsigned char *)(a2 + 6);
  *(unsigned char *)(a3 + 6) = *(unsigned char *)(a2 + 26);
  *(unsigned char *)(a3 + 31) = *(unsigned char *)(a2 + 30);
  *(unsigned char *)(a3 + 30) = *(unsigned char *)(a2 + 28);
  *(unsigned char *)(a3 + 33) = *(unsigned char *)(a2 + 36);
  *(unsigned char *)(a3 + 32) = *(unsigned char *)(a2 + 34);
  *(unsigned char *)(a3 + 35) = *(unsigned char *)(a2 + 42);
  *(unsigned char *)(a3 + 34) = *(unsigned char *)(a2 + 40);
  return result;
}

uint64_t AppleBCMWLANRoamAdapter::printProfile(uint64_t result, uint64_t a2)
{
  if (*(unsigned __int16 *)(a2 + 6) >= 0x24u)
  {
    uint64_t v3 = result;
    uint64_t v4 = 0;
    unint64_t v5 = *(unsigned __int16 *)(a2 + 6) / 0x24uLL;
    int v6 = (char *)(a2 + 43);
    do
    {
      uint64_t result = *(void *)(*(void *)(v3 + 40) + 24);
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result) {
          uint64_t result = CCLogStream::logAlert(*(CCLogStream **)(*(void *)(v3 + 40) + 24), "[dk] %s@%d:WiFiRoam : profile[%d]: Band:%d, RSSI:[%d,%d], Flag:0x%x, ScanParams:(%d,%d,%d,%d,%d), Candidate_2g:(%d,%d,%d), Candidate_5g:(%d,%d,%d), Candidate_6g:(%d,%d,%d) LP %d %d\n", "printProfile", 1133, v4, *(_DWORD *)a2, *(v6 - 31), *(v6 - 30), *(_DWORD *)(v6 - 35), *(unsigned __int16 *)(v6 - 27), *(unsigned __int16 *)(v6 - 25), *(unsigned __int16 *)(v6 - 23), *(unsigned __int16 *)(v6 - 21), *(unsigned __int16 *)(v6 - 19), *(v6 - 29), *(v6 - 4), *(v6 - 5), *(v6 - 29),
        }
                     *(v6 - 2),
                     *(v6 - 3),
                     *(v6 - 29),
                     *v6,
                     *(v6 - 1),
                     *(unsigned __int16 *)(v6 - 9),
                     *(unsigned __int16 *)(v6 - 7));
      }
      ++v4;
      v6 += 36;
    }
    while (v5 != v4);
  }
  return result;
}

uint64_t AppleBCMWLANRoamAdapter::setRoamingProfileV6(uint64_t a1, uint64_t a2, int a3)
{
  long long v12 = 0u;
  int v21 = 0;
  long long v20 = 0u;
  long long v19 = 0u;
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  long long v14 = 0u;
  long long v13 = 0u;
  int v11 = a3;
  LOWORD(v12) = 5;
  if (a3 != -1)
  {
    if (*(_WORD *)(a2 + 8))
    {
      uint64_t v4 = (unsigned __int16 *)(a2 + 52);
      uint64_t v5 = 8;
      do
      {
        AppleBCMWLANRoamAdapter::setRoamBracket(a1, (uint64_t)(v4 - 24), (uint64_t)&v11 + v5);
        __int16 v6 = WORD1(v12) + 36;
        WORD1(v12) += 36;
        v5 += 36;
        if (v5 == 116) {
          break;
        }
        int v7 = *v4;
        v4 += 22;
      }
      while (v7);
    }
    else
    {
      __int16 v6 = 0;
    }
    AppleBCMWLANRoamAdapter::printProfile(a1, (uint64_t)&v11);
    if (v6)
    {
      uint64_t v8 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 8), (uint64_t)"roam_prof");
      uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 24);
      if (v8)
      {
        if (v9 && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d: WiFiRoam : Error: setting roam profile for band %d failed\n", "setRoamingProfileV6", 1174, v11);
        }
        return v8;
      }
      if (v9 && CCLogStream::shouldLog()) {
        CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 40) + 24), 0x4000uLL, "[dk] %s@%d:%s WiFiRoam : Successfully set the roaming profile for band %d\n", "setRoamingProfileV6", 1177, "setRoamingProfileV6", v11);
      }
    }
    return 0;
  }
  uint64_t v8 = 3758097090;
  if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
    CCLogStream::logAlertIf(*(CCLogStream **)(*(void *)(a1 + 40) + 24), 0x4000uLL, "[dk] %s@%d:%s WiFiRoam : Invalid band (%d) passed. Nothing to do.\n", "setRoamingProfileV6", 1149, "setRoamingProfileV6", -1);
  }
  return v8;
}

uint64_t AppleBCMWLANRoamAdapter::setLEGACY_ROAM_PROFILE_CONFIG(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = AppleBCMWLANRoamAdapter::setRoamingProfile(a1, a2);
    uint64_t v4 = *(void *)(a1 + 40);
    if (v3)
    {
      if (*(void *)(v4 + 24) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:fail to configure legacy profile\n");
      }
    }
    else
    {
      AppleBCMWLANRoamAdapter::configureMultiAPBit((AppleBCMWLANCore ***)a1, (*(_DWORD *)(v4 + 32) < 9u) & (0x148u >> *(_DWORD *)(v4 + 32)));
    }
  }
  else
  {
    uint64_t v3 = 3758097084;
    if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:pRoamProfileConfig is null\n");
    }
  }
  return v3;
}

AppleBCMWLANCore *AppleBCMWLANRoamAdapter::configureMultiAPBit(AppleBCMWLANCore ***this, int a2)
{
  uint64_t result = (AppleBCMWLANCore *)AppleBCMWLANCore::featureFlagIsBitSet(*this[5], 20);
  if (result) {
    BOOL v5 = a2 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t result = (AppleBCMWLANCore *)AppleBCMWLANCommander::sendIOVarSet(this[5][1], (uint64_t)"roam_multi_ap_env");
    if (result)
    {
      uint64_t v6 = (uint64_t)result;
      uint64_t result = this[5][3];
      if (result)
      {
        uint64_t result = (AppleBCMWLANCore *)CCLogStream::shouldLog();
        if (result)
        {
          int v7 = this[5];
          uint64_t v8 = v7[3];
          uint64_t v9 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)*v7 + 112))(*v7, v6);
          return (AppleBCMWLANCore *)CCLogStream::logAlert(v8, "[dk] %s@%d: Failure to set Multi AP Bit : %s\n", "configureMultiAPBit", 2470, v9);
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANRoamAdapter::setROAM_PROFILE_CONFIG(uint64_t a1, _DWORD *a2)
{
  if (a2)
  {
    if (*a2)
    {
      uint64_t v4 = AppleBCMWLANRoamAdapter::setRoamingProfileV6(a1, (uint64_t)a2, 2);
      if (v4)
      {
        if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:fail to configure 2g profile is null\n");
        }
        return v4;
      }
    }
    else
    {
      uint64_t v4 = 3758097084;
    }
    if (a2[34] && (uint64_t v4 = AppleBCMWLANRoamAdapter::setRoamingProfileV6(a1, (uint64_t)(a2 + 34), 1), v4))
    {
      if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:fail to configure 5g profile is null\n");
      }
    }
    else if (a2[68] && (uint64_t v4 = AppleBCMWLANRoamAdapter::setRoamingProfileV6(a1, (uint64_t)(a2 + 68), 4), v4))
    {
      if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:fail to configure 6g profile is null\n");
      }
    }
    else
    {
      *(_DWORD *)(*(void *)(a1 + 40) + 32) = a2[102];
      AppleBCMWLANRoamAdapter::configureMultiAPBit((AppleBCMWLANCore ***)a1, (*(_DWORD *)(*(void *)(a1 + 40) + 32) < 9u) & (0x148u >> *(_DWORD *)(*(void *)(a1 + 40) + 32)));
    }
  }
  else
  {
    uint64_t v4 = 3758097084;
    if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:pRoamProfileConfig is null\n");
    }
  }
  return v4;
}

uint64_t AppleBCMWLANRoamAdapter::cmdROAM_USER_CACHE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = IOMallocZeroData();
  if (v6)
  {
    uint64_t v7 = v6;
    if (!a2)
    {
      uint64_t OverrideStateFromUserRoamCache = 3758097084;
      if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:input buffer is null\n", "cmdROAM_USER_CACHE", 1252);
      }
      goto LABEL_22;
    }
    if (*(_WORD *)(a2 + 120) && AppleBCMWLANRoamAdapter::isAdaptiveRoamRequestValid(a1, a2))
    {
      uint64_t OverrideStateFromUserRoamCache = AppleBCMWLANRoamAdapter::clearChannelsFromUserRoamCache(a1, v7);
      if (OverrideStateFromUserRoamCache)
      {
LABEL_14:
        if (*(unsigned char *)(a2 + 124)) {
          uint64_t OverrideStateFromUserRoamCache = AppleBCMWLANRoamAdapter::setOverrideStateFromUserRoamCache(a1, *(unsigned char *)(a2 + 122) != 0, v7);
        }
        if (a3 && *(unsigned char *)(a2 + 126)) {
          uint64_t OverrideStateFromUserRoamCache = AppleBCMWLANRoamAdapter::getOverrideStateFromUserRoamCache(a1, a3, v7);
        }
        if (a3 && *(unsigned char *)(a2 + 125)) {
          uint64_t OverrideStateFromUserRoamCache = AppleBCMWLANRoamAdapter::getChannelsFromUserRoamCache(a1, a3, v7, 0x78u);
        }
LABEL_22:
        IOFreeData();
        return OverrideStateFromUserRoamCache;
      }
      uint64_t v9 = AppleBCMWLANRoamAdapter::addChannelsToUserRoamCache(a1, a2, *(__int16 *)(a2 + 120), v7);
    }
    else
    {
      if (!*(unsigned char *)(a2 + 123))
      {
        uint64_t OverrideStateFromUserRoamCache = 3758097084;
        goto LABEL_14;
      }
      uint64_t v9 = AppleBCMWLANRoamAdapter::clearChannelsFromUserRoamCache(a1, v7);
    }
    uint64_t OverrideStateFromUserRoamCache = v9;
    goto LABEL_14;
  }
  uint64_t OverrideStateFromUserRoamCache = 3758097084;
  if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:cmdROAM_USER_CACHE failed to allocate cmd\n ", "cmdROAM_USER_CACHE", 1251);
  }
  return OverrideStateFromUserRoamCache;
}

uint64_t AppleBCMWLANRoamAdapter::isAdaptiveRoamRequestValid(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v8 = 0;
  if (!a2 || *(__int16 *)(a2 + 120) < 1) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = a2;
  do
  {
    if (AppleBCMWLANCore::getChanSpec(**(void ***)(a1 + 40), v5, &v8)) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v8 == 0;
    }
    uint64_t result = !v6;
    if (!v6) {
      break;
    }
    ++v4;
    v5 += 12;
  }
  while (v4 < *(__int16 *)(a2 + 120));
  return result;
}

uint64_t AppleBCMWLANRoamAdapter::clearChannelsFromUserRoamCache(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = 524289;
  *(_WORD *)(a2 + 8) = 0;
  if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:clear channels \n", "clearChannelsFromUserRoamCache", 1332);
  }
  *(_DWORD *)(a2 + 4) = 3;
  uint64_t v4 = *(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(unsigned __int16 *)(a2 + 2);
  if (*(_WORD *)(a2 + 2)) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  v12[0] = v6;
  v12[1] = v5;
  uint64_t v7 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"user_roam_cache", (uint64_t)v12, 0, 0);
  if (v7 && *(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog())
  {
    uint64_t v9 = *(void **)(a1 + 40);
    unsigned __int16 v10 = (CCLogStream *)v9[3];
    int v11 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v9 + 112))(*v9, v7);
    CCLogStream::logAlert(v10, "[dk] %s@%d: Failed to clear User Roam  cache %s\n", "clearChannelsFromUserRoamCache", 1340, v11);
  }
  return v7;
}

uint64_t AppleBCMWLANRoamAdapter::addChannelsToUserRoamCache(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  LODWORD(v5) = a3;
  unsigned __int16 v20 = 0;
  *(void *)a4 = 0x1000A0001;
  *(_WORD *)(a4 + 8) = 0;
  if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:number of channels = %d \n", "addChannelsToUserRoamCache", 1301, v5);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = (unsigned __int16)v5;
    do
    {
      AppleBCMWLANCore::getChanSpec(**(void ***)(a1 + 40), a2, &v20);
      unsigned __int16 v8 = v20;
      if (v20)
      {
        uint64_t v9 = *(unsigned __int16 *)(a4 + 8);
        *(_WORD *)(a4 + 8) = v9 + 1;
        *(_WORD *)(a4 + 10 + 2 * v9) = v8;
      }
      a2 += 12;
      --v5;
    }
    while (v5);
  }
  unsigned __int16 v10 = *(_WORD *)(a4 + 2) + 2 * *(_WORD *)(a4 + 8);
  *(_WORD *)(a4 + 2) = v10;
  int v11 = *(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 8);
  uint64_t v12 = v10;
  if (v10) {
    uint64_t v13 = a4;
  }
  else {
    uint64_t v13 = 0;
  }
  v19[0] = v13;
  v19[1] = v12;
  uint64_t v14 = AppleBCMWLANCommander::runIOVarSet(v11, (uint64_t)"user_roam_cache", (uint64_t)v19, 0, 0);
  if (v14 && *(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog())
  {
    long long v16 = *(void **)(a1 + 40);
    long long v17 = (CCLogStream *)v16[3];
    long long v18 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v16 + 112))(*v16, v14);
    CCLogStream::logAlert(v17, "[dk] %s@%d: Failed to add User Roam cache channels %s\n", "addChannelsToUserRoamCache", 1319, v18);
  }
  return v14;
}

uint64_t AppleBCMWLANRoamAdapter::setOverrideStateFromUserRoamCache(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 4) = 4;
  *(_DWORD *)(a3 + 8) = a2;
  *(_WORD *)(a3 + 2) = 12;
  uint64_t v5 = *(void *)(a1 + 40);
  if (*(void *)(v5 + 24))
  {
    int shouldLog = CCLogStream::shouldLog();
    uint64_t v5 = *(void *)(a1 + 40);
    if (shouldLog)
    {
      CCLogStream::logAlert(*(CCLogStream **)(v5 + 24), "[dk] %s@%d:set override =%d \n", "setOverrideStateFromUserRoamCache", 1358, a2);
      uint64_t v5 = *(void *)(a1 + 40);
    }
  }
  unsigned __int16 v8 = *(AppleBCMWLANCommander **)(v5 + 8);
  uint64_t v9 = *(unsigned __int16 *)(a3 + 2);
  if (*(_WORD *)(a3 + 2)) {
    uint64_t v10 = a3;
  }
  else {
    uint64_t v10 = 0;
  }
  v16[0] = v10;
  v16[1] = v9;
  uint64_t v11 = AppleBCMWLANCommander::runIOVarSet(v8, (uint64_t)"user_roam_cache", (uint64_t)v16, 0, 0);
  if (v11 && *(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog())
  {
    uint64_t v13 = *(void **)(a1 + 40);
    uint64_t v14 = (CCLogStream *)v13[3];
    long long v15 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v13 + 112))(*v13, v11);
    CCLogStream::logAlert(v14, "[dk] %s@%d: Failed to set User Roam cache override %s\n", "setOverrideStateFromUserRoamCache", 1362, v15);
  }
  return v11;
}

uint64_t AppleBCMWLANRoamAdapter::getOverrideStateFromUserRoamCache(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = 0x40008AAAALL;
  int v15 = -1431699456;
  uint64_t v6 = 0xC000C000CLL;
  if (!a3) {
    uint64_t v6 = 0;
  }
  v13[0] = a3;
  v13[1] = v6;
  uint64_t v7 = *(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 8);
  v12[0] = &v14;
  v12[1] = 8;
  uint64_t v8 = AppleBCMWLANCommander::runIOVarGet(v7, (uint64_t)"user_roam_cache", (uint64_t)v12, (uint64_t)v13, 0);
  if (v8)
  {
    if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog())
    {
      uint64_t v9 = *(void **)(a1 + 40);
      uint64_t v10 = (CCLogStream *)v9[3];
      (*(void (**)(void, uint64_t))(*(void *)*v9 + 112))(*v9, v8);
      CCLogStream::logAlert(v10, "[dk] %s@%d: Failed to get User Roam override state %s\n");
    }
  }
  else
  {
    *(unsigned char *)(a2 + 122) = *(_DWORD *)(a3 + 8);
    if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:get override =%d \n");
    }
  }
  return v8;
}

uint64_t AppleBCMWLANRoamAdapter::getChannelsFromUserRoamCache(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  uint64_t v24 = 567978;
  int v25 = -1431699456;
  BOOL v7 = a3 != 0;
  BOOL v8 = a4 != 0;
  BOOL v9 = !v7 || !v8;
  if (v7 && v8) {
    unint64_t v10 = a4 | ((unint64_t)a4 << 32) | 0xC0000;
  }
  else {
    unint64_t v10 = 0;
  }
  if (v9) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = a3;
  }
  v23[0] = v11;
  v23[1] = v10;
  uint64_t v12 = *(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 8);
  v22[0] = &v24;
  v22[1] = 8;
  uint64_t v13 = AppleBCMWLANCommander::runIOVarGet(v12, (uint64_t)"user_roam_cache", (uint64_t)v22, (uint64_t)v23, 0);
  if (v13)
  {
    if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog())
    {
      uint64_t v14 = *(void **)(a1 + 40);
      int v15 = (CCLogStream *)v14[3];
      long long v16 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v14 + 112))(*v14, v13);
      CCLogStream::logAlert(v15, "[dk] %s@%d: Failed to get User Roam cache %s\n", "getChannelsFromUserRoamCache", 1411, v16);
    }
  }
  else
  {
    unsigned int v17 = *(unsigned __int16 *)(a3 + 8);
    if (v17 >= 0xA) {
      LOWORD(v17) = 10;
    }
    *(_WORD *)(a2 + 120) = v17;
    if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:Total Channel Numbers %d sent %d\n", "getChannelsFromUserRoamCache", 1405, *(unsigned __int16 *)(a3 + 8), *(__int16 *)(a2 + 120));
    }
    if (*(_WORD *)(a3 + 8))
    {
      unint64_t v18 = 0;
      uint64_t v19 = a3 + 10;
      do
      {
        uint64_t ChanSpecHandler = (int **)AppleBCMWLANCore::getChanSpecHandler(**(AppleBCMWLANCore ***)(a1 + 40));
        AppleBCMWLANChanSpec::getApple80211ChannelSpec(ChanSpecHandler, *(unsigned __int16 *)(v19 + 2 * v18), a2);
        if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d: Channel = %x sent %d", "getChannelsFromUserRoamCache", 1408, *(unsigned __int16 *)(v19 + 2 * v18), *(_DWORD *)(a2 + 4));
        }
        ++v18;
        a2 += 12;
      }
      while (v18 < *(unsigned __int16 *)(a3 + 8));
    }
  }
  return v13;
}

uint64_t AppleBCMWLANRoamAdapter::getROAM_PROFILE(uint64_t a1, _DWORD *a2)
{
  uint64_t PrimaryInterface = AppleBCMWLANCore::getPrimaryInterface(**(AppleBCMWLANCore ***)(a1 + 40));
  uint64_t result = 22;
  if (a2 && PrimaryInterface)
  {
    uint64_t v6 = 0;
    a2[1] = 4;
    a2[33] = 2;
    a2[65] = 1024;
    do
    {
      uint64_t result = AppleBCMWLANRoamAdapter::getRoamProfilePerBand(a1, (uint64_t)&a2[v6]);
      if (!result) {
        a2[v6 + 3] = 1;
      }
      v6 += 32;
    }
    while (v6 != 96);
  }
  return result;
}

uint64_t AppleBCMWLANRoamAdapter::getRoamProfilePerBand(uint64_t a1, uint64_t a2)
{
  if (!AppleBCMWLANCore::isAssociated(**(AppleBCMWLANCore ***)(a1 + 40))) {
    return 3766625283;
  }
  if (AppleBCMWLANCore::getFirmwareInterfaceVersion(**(AppleBCMWLANCore ***)(a1 + 40)) <= 0x10)
  {
    if (AppleBCMWLANCore::getFirmwareInterfaceVersion(**(AppleBCMWLANCore ***)(a1 + 40)) <= 0xD)
    {
      if (AppleBCMWLANCore::getFirmwareInterfaceVersion(**(AppleBCMWLANCore ***)(a1 + 40)) >= 6) {
        unsigned int v4 = 88;
      }
      else {
        unsigned int v4 = 72;
      }
    }
    else
    {
      unsigned int v4 = 120;
    }
  }
  else
  {
    unsigned int v4 = 152;
  }
  uint64_t v6 = v4;
  uint64_t v7 = IOMallocZeroData();
  if (v7)
  {
    uint64_t v8 = v7;
    if (AppleBCMWLANCore::getFirmwareInterfaceVersion(**(AppleBCMWLANCore ***)(a1 + 40)) < 0x11)
    {
      if (AppleBCMWLANCore::getFirmwareInterfaceVersion(**(AppleBCMWLANCore ***)(a1 + 40)) < 0xE)
      {
        if (AppleBCMWLANCore::getFirmwareInterfaceVersion(**(AppleBCMWLANCore ***)(a1 + 40)) > 5)
        {
          uint64_t v12 = 0;
          uint64_t v14 = 0;
          uint64_t v15 = 0;
          *(_WORD *)(v8 + 4) = 1;
          if ((*(unsigned char *)(a2 + 4) & 2) != 0) {
            int v11 = 1;
          }
          else {
            int v11 = 2;
          }
          uint64_t v13 = v8;
        }
        else
        {
          uint64_t v13 = 0;
          uint64_t v14 = 0;
          uint64_t v15 = 0;
          *(_WORD *)(v8 + 4) = 0;
          if ((*(unsigned char *)(a2 + 4) & 2) != 0) {
            int v11 = 1;
          }
          else {
            int v11 = 2;
          }
          uint64_t v12 = v8;
        }
      }
      else
      {
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v15 = 0;
        *(_WORD *)(v8 + 4) = 3;
        if ((*(unsigned char *)(a2 + 4) & 2) != 0) {
          int v11 = 1;
        }
        else {
          int v11 = 2;
        }
        uint64_t v14 = v8;
      }
    }
    else
    {
      *(_WORD *)(v8 + 4) = 5;
      int v9 = *(_DWORD *)(a2 + 4);
      if ((v9 & 2) != 0) {
        int v10 = 1;
      }
      else {
        int v10 = 2;
      }
      if ((v9 & 0x400) != 0) {
        int v11 = 4;
      }
      else {
        int v11 = v10;
      }
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = v8;
    }
    *(_DWORD *)uint64_t v8 = v11;
    v45[0] = v8;
    v45[1] = v6 | ((unint64_t)(v6 | (v6 << 16)) << 16);
    long long v16 = *(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 8);
    v44[0] = v8;
    v44[1] = 8;
    uint64_t v17 = AppleBCMWLANCommander::runIOVarGet(v16, (uint64_t)"roam_prof", (uint64_t)v44, (uint64_t)v45, 0);
    if (v17)
    {
      uint64_t v5 = v17;
LABEL_71:
      IOFreeData();
      return v5;
    }
    if (AppleBCMWLANCore::getFirmwareInterfaceVersion(**(AppleBCMWLANCore ***)(a1 + 40)) >= 0x11)
    {
      unsigned int v18 = *(unsigned __int16 *)(v15 + 6);
      LODWORD(v19) = v18 / 0x24;
      *(_DWORD *)(a2 + 8) = v18 / 0x24;
      if (v18 >= 0x24)
      {
        unint64_t v20 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = a2 + 20;
        while (1)
        {
          unint64_t v23 = v15 + v20;
          __int16 v24 = *(_WORD *)(v15 + v20 + 18);
          if (!v24)
          {
            unsigned int v25 = v21;
            goto LABEL_68;
          }
          *(_DWORD *)(v22 - 4) = *(unsigned __int8 *)(v23 + 8);
          *(unsigned char *)uint64_t v22 = *(unsigned char *)(v23 + 12);
          *(_WORD *)(v22 + 1) = *(_WORD *)(v23 + 13);
          *(_DWORD *)(v22 + 5) = *(_DWORD *)(v23 + 38);
          *(_WORD *)(v22 + 9) = *(_WORD *)(v23 + 42);
          *(_WORD *)(v22 + 12) = *(_WORD *)(v23 + 16);
          *(_WORD *)(v22 + 14) = v24;
          *(_WORD *)(v22 + 16) = *(_WORD *)(v23 + 20);
          *(_DWORD *)(v22 + 18) = *(_DWORD *)(v23 + 22);
          *(_WORD *)(v22 + 3) = 32639;
          if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 40) + 24), 0x4000uLL, "[dk] %s@%d:%s WiFiRoam : Roam profile[%d]: Band:%d, RSSI:[%d,%d], Flag:0x%x, ScanParams:(%d,%d,%d,%d,%d), Candidate_2g:(%d,%d,%d), Candidate_5g:(%d,%d,%d), Candidate_6g:(%d,%d,%d), LPCore: [%d, %d]\n", "getRoamProfilePerBand", 1561, "getRoamProfilePerBand", v21, *(_DWORD *)v15, *(char *)(v23 + 12), *(char *)(v23 + 13), *(_DWORD *)(v23 + 8), *(unsigned __int16 *)(v23 + 16), *(unsigned __int16 *)(v23 + 18), *(unsigned __int16 *)(v23 + 20), *(unsigned __int16 *)(v23 + 22), *(unsigned __int16 *)(v23 + 24), *(char *)(v23 + 14), *(char *)(v22 + 6),
          }
              *(char *)(v22 + 5),
              *(char *)(v23 + 14),
              *(char *)(v22 + 8),
              *(char *)(v22 + 7),
              *(char *)(v23 + 14),
              *(char *)(v22 + 10),
              *(char *)(v22 + 9),
              *(unsigned __int16 *)(v15 + v20 + 34),
              *(unsigned __int16 *)(v15 + v20 + 36));
          unsigned int v25 = v21 + 1;
          unint64_t v19 = *(unsigned int *)(a2 + 8);
          if (v21 + 1 >= v19) {
            break;
          }
          v20 += 36;
          v22 += 28;
          ++v21;
          if (v20 > *(unsigned __int16 *)(v15 + 6)) {
            goto LABEL_68;
          }
        }
        unsigned int v25 = v21 + 1;
        goto LABEL_68;
      }
      goto LABEL_67;
    }
    if (AppleBCMWLANCore::getFirmwareInterfaceVersion(**(AppleBCMWLANCore ***)(a1 + 40)) >= 0xE)
    {
      unsigned int v26 = *(unsigned __int16 *)(v14 + 6);
      LODWORD(v19) = v26 / 0x1C;
      *(_DWORD *)(a2 + 8) = v26 / 0x1C;
      if (v26 >= 0x1C)
      {
        unint64_t v27 = 0;
        uint64_t v28 = 0;
        while (1)
        {
          unint64_t v29 = v14 + v27;
          __int16 v30 = *(_WORD *)(v14 + v27 + 16);
          if (!v30)
          {
            unsigned int v25 = v28;
            goto LABEL_68;
          }
          unint64_t v31 = a2 + 16 + v27;
          *(_DWORD *)unint64_t v31 = *(unsigned __int8 *)(v29 + 8);
          *(_DWORD *)(v31 + 4) = *(_DWORD *)(v29 + 9);
          *(unsigned char *)(v31 + 8) = *(unsigned char *)(v29 + 13);
          *(_WORD *)(v31 + 16) = *(_WORD *)(v29 + 14);
          *(_WORD *)(v31 + 18) = v30;
          *(_WORD *)(v31 + 20) = *(_WORD *)(v29 + 18);
          *(_DWORD *)(v31 + 22) = *(_DWORD *)(v29 + 20);
          if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 40) + 24), 0x4000uLL, "[dk] %s@%d:WiFiRoam : Roam profile[%d]: Band:%d, RSSI:[%d,%d], Flag:0x%x, ScanParams:(%d,%d,%d,%d,%d), Candidate:(%d,%d,%d), LPCore: [%d, %d]\n", "getRoamProfilePerBand", 1606, v28, *(_DWORD *)v14, *(char *)(v29 + 9), *(char *)(v29 + 10), *(unsigned __int8 *)(v29 + 8), *(unsigned __int16 *)(v29 + 14), *(unsigned __int16 *)(v29 + 16), *(unsigned __int16 *)(v29 + 18), *(unsigned __int16 *)(v29 + 20), *(unsigned __int16 *)(v29 + 22), *(char *)(v29 + 11), *(char *)(v29 + 13), *(char *)(v29 + 12),
          }
              *(unsigned __int16 *)(v14 + v27 + 32),
              *(unsigned __int16 *)(v14 + v27 + 34));
          unsigned int v25 = v28 + 1;
          unint64_t v19 = *(unsigned int *)(a2 + 8);
          if (v28 + 1 >= v19) {
            break;
          }
          v27 += 28;
          ++v28;
          if (v27 > *(unsigned __int16 *)(v14 + 6)) {
            goto LABEL_68;
          }
        }
        unsigned int v25 = v28 + 1;
        goto LABEL_68;
      }
      goto LABEL_67;
    }
    if (AppleBCMWLANCore::getFirmwareInterfaceVersion(**(AppleBCMWLANCore ***)(a1 + 40)) > 5)
    {
      unsigned int v38 = *(unsigned __int16 *)(v13 + 6);
      LODWORD(v19) = v38 / 0x14;
      *(_DWORD *)(a2 + 8) = v38 / 0x14;
      if (v38 >= 0x14)
      {
        unint64_t v40 = 0;
        uint64_t v34 = 0;
        uint64_t v41 = a2 + 16;
        while (1)
        {
          unint64_t v42 = v13 + v40;
          __int16 v43 = *(_WORD *)(v13 + v40 + 16);
          if (!v43) {
            goto LABEL_84;
          }
          *(_DWORD *)uint64_t v41 = *(unsigned __int8 *)(v42 + 8);
          *(_DWORD *)(v41 + 4) = *(_DWORD *)(v42 + 9);
          *(unsigned char *)(v41 + 8) = *(unsigned char *)(v42 + 13);
          *(_WORD *)(v41 + 16) = *(_WORD *)(v42 + 14);
          *(_WORD *)(v41 + 18) = v43;
          *(_WORD *)(v41 + 20) = *(_WORD *)(v42 + 18);
          *(_DWORD *)(v41 + 22) = *(_DWORD *)(v42 + 20);
          if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 40) + 24), 0x4000uLL, "[dk] %s@%d:WiFiRoam : Roam profile[%d]: Band:%d, RSSI:[%d,%d], Flag:0x%x, ScanParams:(%d,%d,%d,%d,%d), Candidate:(%d,%d,%d)\n", "getRoamProfilePerBand", 1670, v34, *(_DWORD *)v13, *(char *)(v42 + 9), *(char *)(v42 + 10), *(char *)(v42 + 8), *(unsigned __int16 *)(v42 + 14), *(unsigned __int16 *)(v42 + 16), *(unsigned __int16 *)(v42 + 18), *(unsigned __int16 *)(v42 + 20), *(unsigned __int16 *)(v42 + 22), *(char *)(v42 + 11), *(char *)(v42 + 13), *(char *)(v42 + 12));
          }
          unsigned int v25 = v34 + 1;
          unint64_t v19 = *(unsigned int *)(a2 + 8);
          if (v34 + 1 >= v19)
          {
LABEL_86:
            unsigned int v25 = v34 + 1;
            goto LABEL_68;
          }
          v41 += 28;
          v40 += 20;
          ++v34;
          if (v40 > *(unsigned __int16 *)(v13 + 6)) {
            goto LABEL_68;
          }
        }
      }
    }
    else
    {
      unsigned int v32 = *(unsigned __int16 *)(v12 + 6);
      LODWORD(v19) = v32 >> 4;
      *(_DWORD *)(a2 + 8) = v32 >> 4;
      if (v32 >= 0x10)
      {
        unint64_t v33 = 0;
        uint64_t v34 = 0;
        uint64_t v35 = a2 + 16;
        while (1)
        {
          unint64_t v36 = v12 + v33;
          __int16 v37 = *(_WORD *)(v12 + v33 + 16);
          if (!v37) {
            break;
          }
          *(_DWORD *)uint64_t v35 = *(unsigned __int8 *)(v36 + 8);
          *(_DWORD *)(v35 + 4) = *(_DWORD *)(v36 + 9);
          *(unsigned char *)(v35 + 8) = *(unsigned char *)(v36 + 13);
          *(_WORD *)(v35 + 16) = *(_WORD *)(v36 + 14);
          *(_WORD *)(v35 + 18) = v37;
          *(_WORD *)(v35 + 20) = *(_WORD *)(v36 + 18);
          *(_DWORD *)(v35 + 22) = *(_DWORD *)(v36 + 20);
          if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 40) + 24), 0x4000uLL, "[dk] %s@%d:WiFiRoam : Roam profile[%d]: Band:%d, RSSI:[%d,%d], Flag:0x%x, ScanParams:(%d,%d,%d,%d,%d), Candidate:(%d,%d,%d)\n", "getRoamProfilePerBand", 1638, v34, *(_DWORD *)v12, *(char *)(v36 + 9), *(char *)(v36 + 10), *(char *)(v36 + 8), *(unsigned __int16 *)(v36 + 14), *(unsigned __int16 *)(v36 + 16), *(unsigned __int16 *)(v36 + 18), *(unsigned __int16 *)(v36 + 20), *(unsigned __int16 *)(v36 + 22), *(char *)(v36 + 11), *(char *)(v36 + 13), *(char *)(v36 + 12));
          }
          unsigned int v25 = v34 + 1;
          unint64_t v19 = *(unsigned int *)(a2 + 8);
          if (v34 + 1 >= v19) {
            goto LABEL_86;
          }
          v35 += 28;
          v33 += 16;
          ++v34;
          if (v33 > *(unsigned __int16 *)(v12 + 6)) {
            goto LABEL_68;
          }
        }
LABEL_84:
        unsigned int v25 = v34;
        goto LABEL_68;
      }
    }
LABEL_67:
    unsigned int v25 = 0;
LABEL_68:
    if (v25 < v19) {
      *(_DWORD *)(a2 + 8) = v25;
    }
    uint64_t v5 = 0;
    goto LABEL_71;
  }
  return 12;
}

uint64_t AppleBCMWLANRoamAdapter::set6GCandidateBoost(AppleBCMWLANCore ***this, char a2)
{
  if (AppleBCMWLANCore::getFirmwareInterfaceVersion(*this[5]) < 0x11) {
    return 0;
  }
  __int16 v6 = 12800;
  char v7 = a2;
  uint64_t v4 = AppleBCMWLANRoamAdapter::applyRoamingCandidateBoost((uint64_t)this, (unsigned __int8 *)&v6, 1);
  if (v4 && this[5][3] && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(this[5][3], "[dk] %s@%d:%s WiFiRoam : Unable to set 6G candidate boost\n", "set6GCandidateBoost", 1748, "set6GCandidateBoost");
  }
  return v4;
}

uint64_t AppleBCMWLANRoamAdapter::applyRoamingCandidateBoost(uint64_t a1, unsigned __int8 *a2, char a3)
{
  if (a2)
  {
    __int16 v22 = 775;
    unsigned __int8 v23 = *a2;
    __int16 v24 = *(_WORD *)(a2 + 1);
    int v25 = 513;
    __int16 v6 = *(AppleBCMWLANCore ***)(a1 + 40);
    if (v6[3])
    {
      int shouldLog = CCLogStream::shouldLog();
      __int16 v6 = *(AppleBCMWLANCore ***)(a1 + 40);
      if (shouldLog)
      {
        CCLogStream::logNoticeIf(v6[3], 0x80uLL, "[dk] %s@%d:%s WiFiRoam : Applying roam candidate boost of %d for 2GHz, %d for 5GHz and %d for 6GHz \n", "applyRoamingCandidateBoost", 1778, "applyRoamingCandidateBoost", *a2, a2[1], a2[2]);
        __int16 v6 = *(AppleBCMWLANCore ***)(a1 + 40);
      }
    }
    int v8 = AppleBCMWLANCore::checkFor6GSupportCardCapability(*v6);
    int v9 = *(AppleBCMWLANCommander ***)(a1 + 40);
    if (v8 && v9[3] && (int v10 = CCLogStream::shouldLog(), v9 = *(AppleBCMWLANCommander ***)(a1 + 40), v10))
    {
      CCLogStream::logAlert(v9[3], "[dk] %s@%d:%s:%d: Issuing join_pref to FW: Applying roam candidate boost of %d for 2GHz, %d for 5GHz and %d for 6GHz \n", "applyRoamingCandidateBoost", 1781, "applyRoamingCandidateBoost", 1781, *a2, a2[1], a2[2]);
      int v9 = *(AppleBCMWLANCommander ***)(a1 + 40);
      if (a3) {
        goto LABEL_10;
      }
    }
    else if (a3)
    {
      goto LABEL_10;
    }
    uint64_t v11 = (*(uint64_t (**)(void))(*(void *)*v9 + 88))();
    int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 136))(v11);
    int v9 = *(AppleBCMWLANCommander ***)(a1 + 40);
    if (!v12)
    {
      uint64_t v15 = v9[1];
      unint64_t v19 = &v22;
      uint64_t v20 = 9;
      uint64_t v13 = AppleBCMWLANCommander::runIOVarSet(v15, (uint64_t)"join_pref", (uint64_t)&v19, 0, 0);
      goto LABEL_15;
    }
LABEL_10:
    unint64_t v19 = (__int16 *)a1;
    uint64_t v20 = (uint64_t)AppleBCMWLANRoamAdapter::applyRoamingCandidateBoostCallback;
    uint64_t v21 = 0;
    uint64_t v13 = AppleBCMWLANCommander::sendIOVarSet(v9[1], (uint64_t)"join_pref");
LABEL_15:
    uint64_t v14 = v13;
    if (v13 && *(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog())
    {
      uint64_t v17 = *(void **)(a1 + 40);
      unsigned int v18 = (CCLogStream *)v17[3];
      (*(void (**)(void, uint64_t))(*(void *)*v17 + 112))(*v17, v14);
      CCLogStream::logAlert(v18, "[dk] %s@%d: Error: cannot set join_pref : ret %x: %s\n");
    }
    return v14;
  }
  uint64_t v14 = 3758097084;
  if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:WiFiRoam : invalid join preference\n");
  }
  return v14;
}

uint64_t AppleBCMWLANRoamAdapter::restore6GCandidateBoost(AppleBCMWLANCore ***this)
{
  return AppleBCMWLANRoamAdapter::set6GCandidateBoost(this, 70);
}

uint64_t AppleBCMWLANRoamAdapter::applyRoamingCandidateBoostCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 && *(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog())
  {
    __int16 v6 = *(void **)(a1 + 40);
    char v7 = (CCLogStream *)v6[3];
    int v8 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v6 + 112))(*v6, a3);
    CCLogStream::logAlert(v7, "[dk] %s@%d: Error: cannot set join_pref for boost : ret %x: %s\n", "applyRoamingCandidateBoostCallback", 1762, a3, v8);
  }
  return 0;
}

uint64_t AppleBCMWLANRoamAdapter::skipPscScansForRoamScans(AppleBCMWLANRoamAdapter *this, int a2)
{
  uint64_t v4 = (CCLogStream **)*((void *)this + 5);
  if (v4[3])
  {
    int shouldLog = CCLogStream::shouldLog();
    uint64_t v4 = (CCLogStream **)*((void *)this + 5);
    if (shouldLog)
    {
      CCLogStream::logAlert(v4[3], "[dk] %s@%d:[WiFiRoam]: Issuing join_pref to FW:PSC scans for roam scans are skipped : [%hhu]\n", "skipPscScansForRoamScans", 1807, a2);
      uint64_t v4 = (CCLogStream **)*((void *)this + 5);
    }
  }
  __int16 v17 = 264;
  char v18 = a2;
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)*v4 + 88))();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 136))(v6))
  {
    uint64_t v14 = (__int16 *)this;
    uint64_t v15 = (uint64_t)AppleBCMWLANRoamAdapter::skipPscScansForRoamScansCallback;
    uint64_t v16 = 0;
    uint64_t v7 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 5) + 8), (uint64_t)"join_pref");
  }
  else
  {
    int v8 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
    uint64_t v14 = &v17;
    uint64_t v15 = 3;
    uint64_t v7 = AppleBCMWLANCommander::runIOVarSet(v8, (uint64_t)"join_pref", (uint64_t)&v14, 0, 0);
  }
  uint64_t v9 = v7;
  if (v7 && *(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog())
  {
    uint64_t v11 = (void *)*((void *)this + 5);
    int v12 = (CCLogStream *)v11[3];
    uint64_t v13 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v11 + 112))(*v11, v9);
    CCLogStream::logAlert(v12, "[dk] %s@%d: Error: cannot set join_pref PSC scan preference : ret %x: %s\n", "skipPscScansForRoamScans", 1820, v9, v13);
  }
  return v9;
}

uint64_t AppleBCMWLANRoamAdapter::skipPscScansForRoamScansCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 && *(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog())
  {
    uint64_t v6 = *(void **)(a1 + 40);
    uint64_t v7 = (CCLogStream *)v6[3];
    int v8 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v6 + 112))(*v6, a3);
    CCLogStream::logAlert(v7, "[dk] %s@%d: Error: cannot set join_pref for PSC scan prefernece for roam scans : ret %x: %s\n", "skipPscScansForRoamScansCallback", 1829, a3, v8);
  }
  return 0;
}

uint64_t AppleBCMWLANRoamAdapter::disable6GForRoamScans(AppleBCMWLANRoamAdapter *this, char a2)
{
  __int16 v14 = 265;
  char v15 = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(***((void ***)this + 5) + 88))(**((void **)this + 5));
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 136))(v3))
  {
    uint64_t v11 = (__int16 *)this;
    uint64_t v12 = (uint64_t)AppleBCMWLANRoamAdapter::disable6GForRoamScansCallback;
    uint64_t v13 = 0;
    uint64_t v4 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 5) + 8), (uint64_t)"join_pref");
  }
  else
  {
    uint64_t v5 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
    uint64_t v11 = &v14;
    uint64_t v12 = 3;
    uint64_t v4 = AppleBCMWLANCommander::runIOVarSet(v5, (uint64_t)"join_pref", (uint64_t)&v11, 0, 0);
  }
  uint64_t v6 = v4;
  if (v4 && *(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog())
  {
    int v8 = (void *)*((void *)this + 5);
    uint64_t v9 = (CCLogStream *)v8[3];
    int v10 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v8 + 112))(*v8, v6);
    CCLogStream::logAlert(v9, "[dk] %s@%d: Error: disable 6G Roam Scan : ret %x: %s\n", "disable6GForRoamScans", 1850, v6, v10);
  }
  return v6;
}

uint64_t AppleBCMWLANRoamAdapter::disable6GForRoamScansCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 && *(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog())
  {
    uint64_t v6 = *(void **)(a1 + 40);
    uint64_t v7 = (CCLogStream *)v6[3];
    int v8 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v6 + 112))(*v6, a3);
    CCLogStream::logAlert(v7, "[dk] %s@%d: Error: cannot disable 6G Roam Scan : ret %x: %s\n", "disable6GForRoamScansCallback", 1858, a3, v8);
  }
  return 0;
}

uint64_t AppleBCMWLANRoamAdapter::rxSigSetRssiCompThreshold(AppleBCMWLANCore ***this, int a2)
{
  if (AppleBCMWLANCore::getFirmwareInterfaceVersion(*this[5]) > 0x10)
  {
    return AppleBCMWLANRoamAdapter::rxSigSetVal((AppleBCMWLANRoamAdapter *)this, "WL_RXSIG_CMD_RSSI_COMP", 14, a2);
  }
  else
  {
    if (this[5][3])
    {
      if (CCLogStream::shouldLog()) {
        CCLogStream::logAlert(this[5][3], "[dk] %s@%d:WiFiRoam : Rx RSSI compensation not supported! [%d]\n", "rxSigSetRssiCompThreshold", 1873, -536870201);
      }
    }
    return 3758097095;
  }
}

uint64_t AppleBCMWLANRoamAdapter::rxSigSetVal(AppleBCMWLANRoamAdapter *this, const char *a2, __int16 a3, int a4)
{
  if (AppleBCMWLANCore::getFirmwareInterfaceVersion(**((AppleBCMWLANCore ***)this + 5)) > 0x10)
  {
    uint64_t v9 = IOMallocZeroData();
    if (v9)
    {
      *(_DWORD *)uint64_t v9 = 655617;
      *(_WORD *)(v9 + 4) = a3;
      *(_DWORD *)(v9 + 6) = a4;
      v17[0] = v9;
      v17[1] = 16;
      uint64_t v10 = (*(uint64_t (**)(void))(***((void ***)this + 5) + 88))(**((void **)this + 5));
      if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 136))(v10))
      {
        int v11 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 5) + 8), (uint64_t)"rxsig");
        if (v11)
        {
          int v12 = v11;
          if (*(void *)(*((void *)this + 5) + 24))
          {
            if (CCLogStream::shouldLog()) {
              CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d: Failed to set rxsig, iovret[0x%08x]\n", "rxSigSetVal", 2008, v12);
            }
          }
        }
        uint64_t v8 = 0;
      }
      else
      {
        uint64_t v8 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 5) + 8), (uint64_t)"rxsig", (uint64_t)v17, 0, 0);
        if (v8 && *(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog())
        {
          __int16 v14 = (void *)*((void *)this + 5);
          char v15 = (CCLogStream *)v14[3];
          uint64_t v16 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v14 + 112))(*v14, v8);
          CCLogStream::logAlert(v15, "[dk] %s@%d:WiFiRoam: rxsig : Failed to run rxsig set var (%s), %s\n", "rxSigSetVal", 2014, a2, v16);
        }
      }
      IOFreeData();
    }
    else
    {
      uint64_t v8 = 3758097085;
      if (*(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:WiFiRoam : Buffer allocation failed!. No memory\n");
      }
    }
  }
  else
  {
    uint64_t v8 = 3758097095;
    if (*(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:WiFiRoam : Rx RSSI compensation not supported! [%d]\n");
    }
  }
  return v8;
}

uint64_t AppleBCMWLANRoamAdapter::rxSigSetRssiCompSmoothValues(AppleBCMWLANCore ***this, const unsigned __int8 *a2, unsigned int a3)
{
  if (AppleBCMWLANCore::getFirmwareInterfaceVersion(*this[5]) > 0x10)
  {
    return AppleBCMWLANRoamAdapter::rxSigSetCompTbl((AppleBCMWLANRoamAdapter *)this, "WL_RXSIG_CMD_RSSI_COMP_TBL", 15, a2, a3);
  }
  else
  {
    if (this[5][3])
    {
      if (CCLogStream::shouldLog()) {
        CCLogStream::logAlert(this[5][3], "[dk] %s@%d:WiFiRoam : Rx RSSI compensation not supported! [%d]\n", "rxSigSetRssiCompSmoothValues", 1889, -536870201);
      }
    }
    return 3758097095;
  }
}

uint64_t AppleBCMWLANRoamAdapter::rxSigSetCompTbl(AppleBCMWLANRoamAdapter *this, const char *a2, __int16 a3, const unsigned __int8 *a4, unsigned int a5)
{
  if (AppleBCMWLANCore::getFirmwareInterfaceVersion(**((AppleBCMWLANCore ***)this + 5)) > 0x10)
  {
    size_t v11 = a5 + 4;
    uint64_t v12 = IOMallocZeroData();
    if (v12)
    {
      uint64_t v13 = (const void *)v12;
      *(_WORD *)uint64_t v12 = 1;
      *(unsigned char *)(v12 + 2) = a5 >> 2;
      memcpy((void *)(v12 + 4), a4, a5);
      __int16 v14 = (_WORD *)IOMallocZeroData();
      if (v14)
      {
        char v15 = v14;
        *__int16 v14 = 257;
        v14[1] = v11;
        v14[2] = a3;
        memcpy(v14 + 3, v13, v11);
        v23[0] = v15;
        v23[1] = v11 + 6;
        uint64_t v16 = (*(uint64_t (**)(void))(***((void ***)this + 5) + 88))(**((void **)this + 5));
        if ((*(unsigned int (**)(uint64_t))(*(void *)v16 + 136))(v16))
        {
          int v17 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 5) + 8), (uint64_t)"rxsig");
          if (v17)
          {
            int v18 = v17;
            if (*(void *)(*((void *)this + 5) + 24))
            {
              if (CCLogStream::shouldLog()) {
                CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d: Failed to set rxsig, iovret[0x%08x]\n", "rxSigSetCompTbl", 1950, v18);
              }
            }
          }
          uint64_t v10 = 0;
        }
        else
        {
          uint64_t v10 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 5) + 8), (uint64_t)"rxsig", (uint64_t)v23, 0, 0);
          if (v10 && *(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog())
          {
            uint64_t v20 = (void *)*((void *)this + 5);
            uint64_t v21 = (CCLogStream *)v20[3];
            __int16 v22 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v20 + 112))(*v20, v10);
            CCLogStream::logAlert(v21, "[dk] %s@%d:WiFiRoam: rxsig : Failed to run rxsig set var for comp tbl(%s), %s\n", "rxSigSetCompTbl", 1956, a2, v22);
          }
        }
        IOFreeData();
      }
      else
      {
        uint64_t v10 = 3758097085;
        if (*(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:WiFiRoam : Buffer allocation failed!. No memory\n", "rxSigSetCompTbl", 1932);
        }
      }
      IOFreeData();
    }
    else
    {
      return 12;
    }
  }
  else
  {
    uint64_t v10 = 3758097095;
    if (*(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 24), "[dk] %s@%d:WiFiRoam : Rx RSSI compensation not supported! [%d]\n", "rxSigSetCompTbl", 1906, -536870201);
    }
  }
  return v10;
}

uint64_t AppleBCMWLANRoamAdapter::handleConfigureRxSigSetCompTblAsyncCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t result = *(void *)(*(void *)(a1 + 40) + 24);
  if (a3)
  {
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v9 = *(void **)(a1 + 40);
        uint64_t v10 = (CCLogStream *)v9[3];
        size_t v11 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v9 + 112))(*v9, a3);
        return CCLogStream::logAlert(v10, "[dk] %s@%d:WiFiRoam: rxsig : Failed to Configure rxsig Set Var for comp tbl%s, %s\n", "handleConfigureRxSigSetCompTblAsyncCallback", 1966, a5, v11);
      }
    }
  }
  else if (result)
  {
    uint64_t result = CCLogStream::shouldLog();
    if (result) {
      return CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:WiFiRoam : Successfully configured rssi comp tbl\n", "handleConfigureRxSigSetCompTblAsyncCallback", 1968);
    }
  }
  return result;
}

uint64_t AppleBCMWLANRoamAdapter::handleConfigureRxSigSetValAsyncCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t result = *(void *)(*(void *)(a1 + 40) + 24);
  if (a3)
  {
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v9 = *(void **)(a1 + 40);
        uint64_t v10 = (CCLogStream *)v9[3];
        size_t v11 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v9 + 112))(*v9, a3);
        return CCLogStream::logAlert(v10, "[dk] %s@%d:WiFiRoam: rxsig : Failed to Configure rxsig Set Var %s, %s\n", "handleConfigureRxSigSetValAsyncCallback", 2024, a5, v11);
      }
    }
  }
  else if (result)
  {
    uint64_t result = CCLogStream::shouldLog();
    if (result) {
      return CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:WiFiRoam : Successfully configured rssi comp threshold\n", "handleConfigureRxSigSetValAsyncCallback", 2026);
    }
  }
  return result;
}

uint64_t AppleBCMWLANRoamAdapter::parseRoamCacheXTLV(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = *(unsigned __int16 *)(a2 + 2);
  if (v4 >= 0x401)
  {
    uint64_t v46 = 3758097084;
    if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:Invalid len: %d\n");
    }
  }
  else if (v4 < 4)
  {
    return 0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = (unsigned __int16 *)(a2 + 4);
    while ((v7 & 3) == 0)
    {
      size_t v8 = v7[1];
      unint64_t v9 = (unsigned __int16)(v8 + 4);
      if (v4 < v9)
      {
        uint64_t v46 = 3758097084;
        if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:Bad tagMemoryUsage: %d remainingLength %d\n");
        }
        return v46;
      }
      int v10 = *v7;
      size_t v11 = OSData::withBytesNoCopy(v7 + 2, v8);
      uint64_t v12 = v11;
      switch(v10)
      {
        case 0:
          break;
        case 1:
          unsigned __int8 BytesNoCopy = (__int16 *)OSData::getBytesNoCopy(v11);
          *(_DWORD *)(a3 + 4) = *((unsigned __int8 *)BytesNoCopy + 2);
          *(_DWORD *)(a3 + 8) = *((unsigned __int8 *)BytesNoCopy + 3);
          *(unsigned char *)(a3 + 3) = *((_DWORD *)BytesNoCopy + 1);
          *(_DWORD *)(a3 + 12) = *((_DWORD *)BytesNoCopy + 2);
          *(unsigned char *)(a3 + 2) = 1;
          *(unsigned char *)a3 = *(unsigned char *)BytesNoCopy;
          if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:roamReason %d roamStatus %d roamScanCount %d roamScanAge %d curBssRssi %d\n", "parseRoamCacheXTLV", 2122, *((unsigned __int8 *)BytesNoCopy + 2), *((unsigned __int8 *)BytesNoCopy + 3), *((_DWORD *)BytesNoCopy + 1), *((_DWORD *)BytesNoCopy + 2), *BytesNoCopy);
          }
          break;
        case 2:
          if (v6 > 2) {
            break;
          }
          __int16 v14 = (unsigned __int16 *)OSData::getBytesNoCopy(v11);
          char v15 = v14;
          uint64_t v16 = a3 + 20 * v6;
          *(unsigned char *)(v16 + 23) = *(unsigned char *)v14;
          unsigned int v17 = v14[1];
          *(unsigned char *)(v16 + 22) = v14[1];
          if (v17 >= 0xF) {
            __int16 v18 = 18;
          }
          else {
            __int16 v18 = 10;
          }
          *(_WORD *)(v16 + 32) = v18;
          *(_DWORD *)(v16 + 24) = *((_DWORD *)v14 + 1);
          *(_DWORD *)(v16 + 28) = v14[4];
          unsigned __int16 v19 = v14[7];
          *(_DWORD *)(v16 + 16) = *(_DWORD *)(v14 + 5);
          *(_WORD *)(v16 + 20) = v19;
          if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d: (%d) BSSID %02x:%02x:%02x:%02x:%02x:%02x, RSSI %d chan %d age %d load %d\n", "parseRoamCacheXTLV", 2147, v6, *((unsigned __int8 *)v15 + 10));
          }
          goto LABEL_44;
        case 3:
          uint64_t v20 = (unsigned __int16 *)OSData::getBytesNoCopy(v11);
          if (v6 > 2) {
            break;
          }
          uint64_t v21 = v20;
          uint64_t v22 = a3 + 20 * v6;
          *(unsigned char *)(v22 + 23) = *(unsigned char *)v20;
          unsigned int v23 = v20[1];
          *(unsigned char *)(v22 + 22) = v20[1];
          if (v23 >= 0xF) {
            __int16 v24 = 18;
          }
          else {
            __int16 v24 = 10;
          }
          *(_WORD *)(v22 + 32) = v24;
          *(_DWORD *)(v22 + 24) = *((_DWORD *)v20 + 1);
          *(_DWORD *)(v22 + 28) = v20[4];
          int v25 = *(_DWORD *)(v20 + 5);
          *(_WORD *)(v22 + 20) = v20[7];
          *(_DWORD *)(v22 + 16) = v25;
          if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d: User Roam Cache (%d) BSSID %02x:%02x:%02x:%02x:%02x:%02x, RSSI %d chan %d age %d load %d\n", "parseRoamCacheXTLV", 2234, v6, *((unsigned __int8 *)v21 + 10));
          }
          goto LABEL_44;
        case 4:
          if (v6 > 2) {
            break;
          }
          if (AppleBCMWLANCore::getFirmwareInterfaceVersion(**(AppleBCMWLANCore ***)(a1 + 40)) >= 0x11)
          {
            unsigned int v26 = OSData::getBytesNoCopy(v12);
            uint64_t v27 = a3 + 20 * v6;
            *(unsigned char *)(v27 + 23) = *(unsigned char *)v26;
            uint64_t ChanSpecHandler = (int **)AppleBCMWLANCore::getChanSpecHandler(**(AppleBCMWLANCore ***)(a1 + 40));
            AppleBCMWLANChanSpec::getAppleChannelSpec(ChanSpecHandler, *((unsigned __int16 *)v26 + 1));
            ChanSpecConvToApple80211Channel();
            *(unsigned char *)(v27 + 22) = -86;
            *(_WORD *)(v27 + 32) = -21846;
            *(_DWORD *)(v27 + 24) = v26[1];
            *(_DWORD *)(v27 + 28) = *((unsigned __int16 *)v26 + 4);
            int v29 = *(_DWORD *)((char *)v26 + 10);
            *(_WORD *)(v27 + 20) = *((_WORD *)v26 + 7);
            *(_DWORD *)(v27 + 16) = v29;
            if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
              CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d: (%d) BSSID %02x:%02x:%02x:%02x:%02x:%02x, RSSI %d chanspec %d age %d load %d\n", "parseRoamCacheXTLV", 2171, v6, *((unsigned __int8 *)v26 + 10));
            }
            goto LABEL_44;
          }
          if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:%s Legacy chipset and invalid tag : %d\n", "parseRoamCacheXTLV", 2176, "parseRoamCacheXTLV", 4);
          }
          break;
        case 5:
          if (AppleBCMWLANCore::getFirmwareInterfaceVersion(**(AppleBCMWLANCore ***)(a1 + 40)) < 0x11)
          {
            if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
              CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:%s Legacy chipset and invalid tag : %d\n", "parseRoamCacheXTLV", 2266, "parseRoamCacheXTLV", 5);
            }
            break;
          }
          __int16 v30 = OSData::getBytesNoCopy(v12);
          if (v6 > 2) {
            break;
          }
          unint64_t v31 = v30;
          uint64_t v32 = a3 + 20 * v6;
          *(unsigned char *)(v32 + 23) = *v30;
          unint64_t v33 = (int **)AppleBCMWLANCore::getChanSpecHandler(**(AppleBCMWLANCore ***)(a1 + 40));
          AppleBCMWLANChanSpec::getAppleChannelSpec(v33, *((unsigned __int16 *)v31 + 1));
          ChanSpecConvToApple80211Channel();
          *(unsigned char *)(v32 + 22) = -86;
          *(_WORD *)(v32 + 32) = -21846;
          *(_DWORD *)(v32 + 24) = *((_DWORD *)v31 + 1);
          *(_DWORD *)(v32 + 28) = *((unsigned __int16 *)v31 + 4);
          int v34 = *(_DWORD *)(v31 + 10);
          *(_WORD *)(v32 + 20) = *((_WORD *)v31 + 7);
          *(_DWORD *)(v32 + 16) = v34;
          if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d: User Roam Cache (%d) BSSID %02x:%02x:%02x:%02x:%02x:%02x, RSSI %d chanspec %d age %d load %d\n", "parseRoamCacheXTLV", 2260, v6, v31[10]);
          }
          goto LABEL_44;
        case 6:
          if (v6 > 2) {
            break;
          }
          if (AppleBCMWLANCore::getFirmwareInterfaceVersion(**(AppleBCMWLANCore ***)(a1 + 40)) >= 0x11)
          {
            uint64_t v35 = OSData::getBytesNoCopy(v12);
            uint64_t v36 = a3 + 20 * v6;
            *(unsigned char *)(v36 + 23) = *(unsigned char *)v35;
            __int16 v37 = (int **)AppleBCMWLANCore::getChanSpecHandler(**(AppleBCMWLANCore ***)(a1 + 40));
            AppleBCMWLANChanSpec::getAppleChannelSpec(v37, *((unsigned __int16 *)v35 + 1));
            ChanSpecConvToApple80211Channel();
            *(unsigned char *)(v36 + 22) = -86;
            *(_WORD *)(v36 + 32) = -21846;
            *(_DWORD *)(v36 + 24) = v35[1];
            *(_DWORD *)(v36 + 28) = *((unsigned __int16 *)v35 + 4);
            int v38 = *(_DWORD *)((char *)v35 + 10);
            *(_WORD *)(v36 + 20) = *((_WORD *)v35 + 7);
            *(_DWORD *)(v36 + 16) = v38;
            if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog())
            {
              int v39 = *(CCLogStream **)(*(void *)(a1 + 40) + 24);
              uint64_t v54 = *((unsigned __int8 *)v35 + 10);
              uint64_t v52 = *((unsigned __int8 *)v35 + 11);
              uint64_t v50 = *((unsigned __int8 *)v35 + 12);
              uint64_t v48 = *((unsigned __int8 *)v35 + 13);
              IO80211_io80211isDebuggable();
              IO80211_io80211isDebuggable();
              IO80211_io80211isDebuggable();
              IO80211_io80211isDebuggable();
              IO80211_io80211isDebuggable();
              IO80211_io80211isDebuggable();
              CCLogStream::logInfo(v39, "[dk] %s@%d: (%d) BSSID %02x:%02x:%02x:%02x:%02x:%02x, MLD:%02x:%02x:%02x:%02x:%02x:%02x RSSI %d chanspec %d age %d load %d\n", "parseRoamCacheXTLV", 2197, v6, v54, v52, v50, v48);
            }
            goto LABEL_44;
          }
          if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:%s Legacy chipset and invalid tag : %d\n", "parseRoamCacheXTLV", 2203, "parseRoamCacheXTLV", 6);
          }
          break;
        case 7:
          if (AppleBCMWLANCore::getFirmwareInterfaceVersion(**(AppleBCMWLANCore ***)(a1 + 40)) < 0x11)
          {
            if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
              CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:%s Legacy chipset and invalid tag : %d\n", "parseRoamCacheXTLV", 2296, "parseRoamCacheXTLV", 7);
            }
          }
          else
          {
            unint64_t v40 = OSData::getBytesNoCopy(v12);
            if (v6 <= 2)
            {
              uint64_t v41 = v40;
              uint64_t v42 = a3 + 20 * v6;
              *(unsigned char *)(v42 + 23) = *v40;
              __int16 v43 = (int **)AppleBCMWLANCore::getChanSpecHandler(**(AppleBCMWLANCore ***)(a1 + 40));
              AppleBCMWLANChanSpec::getAppleChannelSpec(v43, *((unsigned __int16 *)v41 + 1));
              ChanSpecConvToApple80211Channel();
              *(unsigned char *)(v42 + 22) = -86;
              *(_WORD *)(v42 + 32) = -21846;
              *(_DWORD *)(v42 + 24) = *((_DWORD *)v41 + 1);
              *(_DWORD *)(v42 + 28) = *((unsigned __int16 *)v41 + 4);
              int v44 = *(_DWORD *)(v41 + 10);
              *(_WORD *)(v42 + 20) = *((_WORD *)v41 + 7);
              *(_DWORD *)(v42 + 16) = v44;
              if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog())
              {
                int v45 = *(CCLogStream **)(*(void *)(a1 + 40) + 24);
                uint64_t v55 = v41[10];
                uint64_t v53 = v41[11];
                uint64_t v51 = v41[12];
                uint64_t v49 = v41[13];
                IO80211_io80211isDebuggable();
                IO80211_io80211isDebuggable();
                IO80211_io80211isDebuggable();
                IO80211_io80211isDebuggable();
                IO80211_io80211isDebuggable();
                IO80211_io80211isDebuggable();
                CCLogStream::logInfo(v45, "[dk] %s@%d: User Roam Cache (%d) BSSID %02x:%02x:%02x:%02x:%02x:%02x, MLD:%02x:%02x:%02x:%02x:%02x:%02x, RSSI %d chanspec %d age %d load %d\n", "parseRoamCacheXTLV", 2289, v6, v55, v53, v51, v49);
              }
LABEL_44:
              uint64_t v6 = (v6 + 1);
              *(unsigned char *)(a3 + 1) = v6;
            }
          }
          break;
        default:
          if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:Invalid tag id %d\n", "parseRoamCacheXTLV", 2301, v10);
          }
          uint64_t v46 = 3758097084;
          if (v12) {
            ((void (*)(const OSData *))v12->release)(v12);
          }
          return v46;
      }
      if (v12) {
        ((void (*)(const OSData *))v12->release)(v12);
      }
      uint64_t v7 = (unsigned __int16 *)((char *)v7 + v9);
      v4 -= v9;
      if (v4 <= 3) {
        return 0;
      }
    }
    uint64_t v46 = 3758097084;
    if (*(void *)(*(void *)(a1 + 40) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:Buffer not aligned\n");
    }
  }
  return v46;
}

IO80211Controller *AppleBCMWLANRoamAdapter::getRoamCacheAsyncCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  memset(v15, 0, 76);
  if (a3)
  {
    uint64_t result = *(IO80211Controller **)(*(void *)(a1 + 40) + 24);
    if (result)
    {
      uint64_t result = (IO80211Controller *)CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v13 = *(void **)(a1 + 40);
        __int16 v14 = (CCLogStream *)v13[3];
        (*(void (**)(void, uint64_t))(*(void *)*v13 + 112))(*v13, a3);
        return (IO80211Controller *)CCLogStream::logWarn(v14, "[dk] %s@%d:Failed to get roam cache (error=%d (%s)\n");
      }
    }
  }
  else if (*a4)
  {
    uint64_t v7 = AppleBCMWLANRoamAdapter::parseRoamCacheXTLV(a1, *a4, (uint64_t)v15);
    size_t v8 = *(IO80211Controller ***)(a1 + 40);
    if (v7)
    {
      uint64_t v9 = v7;
      uint64_t result = v8[3];
      if (result)
      {
        uint64_t result = (IO80211Controller *)CCLogStream::shouldLog();
        if (result)
        {
          int v10 = *(void **)(a1 + 40);
          size_t v11 = (CCLogStream *)v10[3];
          uint64_t v12 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v10 + 112))(*v10, v9);
          return (IO80211Controller *)CCLogStream::logAlert(v11, "[dk] %s@%d:Failed to parse roam cache %s\n", "getRoamCacheAsyncCallback", 2337, v12);
        }
      }
    }
    else
    {
      return AppleBCMWLANCore::postRoamCacheEvent(*v8, v15);
    }
  }
  else
  {
    uint64_t result = *(IO80211Controller **)(*(void *)(a1 + 40) + 24);
    if (result)
    {
      uint64_t result = (IO80211Controller *)CCLogStream::shouldLog();
      if (result) {
        return (IO80211Controller *)CCLogStream::logWarn(*(CCLogStream **)(*(void *)(a1 + 40) + 24), "[dk] %s@%d:Null roam cache response buffer\n");
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANRoamAdapter::getRoamCacheAsync(AppleBCMWLANRoamAdapter *this)
{
  __int16 v12 = 0;
  if (AppleBCMWLANCore::checkForRoamCacheSupport(**((AppleBCMWLANCore ***)this + 5)))
  {
    v10[0] = this;
    v10[1] = AppleBCMWLANRoamAdapter::getRoamCacheAsyncCallback;
    void v10[2] = 0;
    int v11 = 1;
    unsigned int v2 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
    v9[0] = &v11;
    v9[1] = 6;
    int v8 = 0x4000000;
    uint64_t v3 = AppleBCMWLANCommander::sendIOVarGet(v2, (uint64_t)"roam_cache", (uint64_t)v9, (unsigned __int16 *)&v8, (uint64_t)v10, 0);
    if (v3 && *(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog())
    {
      unint64_t v4 = (void *)*((void *)this + 5);
      uint64_t v5 = (CCLogStream *)v4[3];
      uint64_t v6 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v4 + 112))(*v4, v3);
      CCLogStream::logAlert(v5, "[dk] %s@%d:Failed to send roam cache iovar %s\n", "getRoamCacheAsync", 2366, v6);
    }
  }
  else
  {
    uint64_t v3 = 3758097084;
    if (*(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlertIf(*(CCLogStream **)(*((void *)this + 5) + 24), 0x4000uLL, "[dk] %s@%d:No Roam Cache Support\n", "getRoamCacheAsync", 2353);
    }
  }
  return v3;
}

uint64_t AppleBCMWLANRoamAdapter::setRoamLock(AppleBCMWLANRoamAdapter *this, unsigned int a2)
{
  uint64_t v3 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 5) + 8), (uint64_t)"roam_off");
  if (v3 && *(void *)(*((void *)this + 5) + 24) && CCLogStream::shouldLog())
  {
    uint64_t v5 = (void *)*((void *)this + 5);
    uint64_t v6 = (CCLogStream *)v5[3];
    uint64_t v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 112))(*v5, v3);
    CCLogStream::logAlert(v6, "[dk] %s@%d: cannot set roam_off to %lu : ret %x: %s \n", "setRoamLock", 2449, a2, v3, v7);
  }
  return v3;
}

uint64_t AppleBCMWLANRoamAdapter::handleRoamOffAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    if ((!*(void *)(*(void *)(result + 40) + 24) || (CCLogStream::shouldLogConsole() & 1) == 0)
      && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(v4 + 40) + 112))(**(void **)(v4 + 40), a3);
      *(_DWORD *)buf = 67109890;
      int v10 = 65;
      __int16 v11 = 2080;
      __int16 v12 = "handleRoamOffAsyncCallBack";
      __int16 v13 = 1024;
      int v14 = 2481;
      __int16 v15 = 2080;
      uint64_t v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d:  Error: cannot set roam_off %s\n", buf, 0x22u);
    }
    uint64_t result = *(void *)(*(void *)(v4 + 40) + 24);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v6 = *(void **)(v4 + 40);
        uint64_t v7 = (CCLogStream *)v6[3];
        int v8 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v6 + 112))(*v6, a3);
        return CCLogStream::logAlert(v7, "[dk] %s@%d: Error: cannot set roam_off %s\n", "handleRoamOffAsyncCallBack", 2481, v8);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANRoamAdapter::handleMultiAPBitAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    if ((!*(void *)(*(void *)(result + 40) + 24) || (CCLogStream::shouldLogConsole() & 1) == 0)
      && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(v4 + 40) + 112))(**(void **)(v4 + 40), a3);
      *(_DWORD *)buf = 67109890;
      int v10 = 65;
      __int16 v11 = 2080;
      __int16 v12 = "handleMultiAPBitAsyncCallBack";
      __int16 v13 = 1024;
      int v14 = 2490;
      __int16 v15 = 2080;
      uint64_t v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d:  Error: cannot set MultiAPBit %s\n", buf, 0x22u);
    }
    uint64_t result = *(void *)(*(void *)(v4 + 40) + 24);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v6 = *(void **)(v4 + 40);
        uint64_t v7 = (CCLogStream *)v6[3];
        int v8 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v6 + 112))(*v6, a3);
        return CCLogStream::logAlert(v7, "[dk] %s@%d: Error: cannot set MultiAPBit %s\n", "handleMultiAPBitAsyncCallBack", 2490, v8);
      }
    }
  }
  return result;
}

void _GLOBAL__sub_I_AppleBCMWLANRoamAdapter_cpp()
{
  kNullRange = 0;
}

AppleBCMWLANNearbyDeviceDiscoveryAdapter *AppleBCMWLANNearbyDeviceDiscoveryAdapter::withDriver(AppleBCMWLANNearbyDeviceDiscoveryAdapter *this, AppleBCMWLANCore *a2)
{
  uint64_t v5 = (AppleBCMWLANNearbyDeviceDiscoveryAdapter *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANNearbyDeviceDiscoveryAdapterMetaClass, (OSObject **)&v5)) {
    return 0;
  }
  uint64_t v3 = v5;
  if (v5 && (AppleBCMWLANNearbyDeviceDiscoveryAdapter::initWithDriver((OSObject *)v5, this) & 1) == 0)
  {
    (*(void (**)(AppleBCMWLANNearbyDeviceDiscoveryAdapter *))(*(void *)v3 + 16))(v3);
    return 0;
  }
  return v3;
}

uint64_t AppleBCMWLANNearbyDeviceDiscoveryAdapter::initWithDriver(OSObject *this, AppleBCMWLANCore *a2)
{
  kern_return_t (__cdecl *Dispatch)(OSObject *__hidden, const IORPC);
  BOOL (__cdecl *isEqualTo)(const OSMetaClassBase *__hidden, const OSMetaClassBase *);
  BOOL (__cdecl *init)(OSObject *__hidden);

  if (OSObject::init(this))
  {
    uint64_t v4 = IOMallocZeroTyped();
    this[1].OSMetaClassBase::__vftable = (OSObject_vtbl *)v4;
    if (v4)
    {
      *(void *)(v4 + 16) = a2;
      if (this[1].release)
      {
        this[1].Dispatch = (kern_return_t (__cdecl *)(OSObject *__hidden, const IORPC))(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
        Dispatch = this[1].Dispatch;
        if (Dispatch)
        {
          (*(void (**)(kern_return_t (__cdecl *)(OSObject *__hidden, const IORPC *__struct_ptr)))(*(void *)Dispatch + 8))(Dispatch);
          this[1].isEqualTo = (BOOL (__cdecl *)(const OSMetaClassBase *__hidden, const OSMetaClassBase *))AppleBCMWLANCore::getCommander(a2);
          isEqualTo = this[1].isEqualTo;
          if (isEqualTo)
          {
            (*(void (**)(BOOL (__cdecl *)(const OSMetaClassBase *__hidden, const OSMetaClassBase *)))(*(void *)isEqualTo + 8))(isEqualTo);
            this[1].init = (BOOL (__cdecl *)(OSObject *__hidden))AppleBCMWLANCore::getFaultReporter((AppleBCMWLANCore *)this[1].release);
            init = this[1].init;
            if (init)
            {
              (*(void (**)(BOOL (__cdecl *)(OSObject *__hidden)))(*(void *)init + 8))(init);
              LOBYTE(this[1].getMetaClass) = 0;
              HIDWORD(this[1].getMetaClass) = -1;
              LODWORD(this[1].retain) = -1;
              return 1;
            }
            getClassNameHelper(this);
            IOLog("%s::%s(): Unable to get faultreporter\n");
          }
          else
          {
            getClassNameHelper(this);
            IOLog("%s::%s(): Unable to get commander\n");
          }
        }
        else
        {
          getClassNameHelper(this);
          IOLog("%s::%s(): Unable to get debug logger\n");
        }
      }
      else
      {
        getClassNameHelper(this);
        IOLog("%s::%s(): Unable to get driver\n");
      }
    }
    else
    {
      IOLog("Ivars alloc failed");
    }
  }
  else
  {
    IOLog("super init failed");
  }
  AppleBCMWLANNearbyDeviceDiscoveryAdapter::freeResources((AppleBCMWLANNearbyDeviceDiscoveryAdapter *)this);
  return 0;
}

void AppleBCMWLANNearbyDeviceDiscoveryAdapter::free(void **this)
{
  if (this[5])
  {
    AppleBCMWLANNearbyDeviceDiscoveryAdapter::freeResources((AppleBCMWLANNearbyDeviceDiscoveryAdapter *)this);
    memset_s(this[5], 0x30uLL, 0, 0x30uLL);
    unsigned int v2 = this[5];
    if (v2)
    {
      IOFree(v2, 0x30uLL);
      this[5] = 0;
    }
  }
  OSObject::free((OSObject *)this);
}

uint64_t AppleBCMWLANNearbyDeviceDiscoveryAdapter::freeResources(AppleBCMWLANNearbyDeviceDiscoveryAdapter *this)
{
  unsigned int v2 = (void *)*((void *)this + 5);
  uint64_t v3 = v2[3];
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    *(void *)(*((void *)this + 5) + 24) = 0;
    unsigned int v2 = (void *)*((void *)this + 5);
  }
  uint64_t v4 = v2[4];
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
    *(void *)(*((void *)this + 5) + 32) = 0;
    unsigned int v2 = (void *)*((void *)this + 5);
  }
  uint64_t result = v2[5];
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    *(void *)(*((void *)this + 5) + 40) = 0;
  }
  return result;
}

void non-virtual thunk to'AppleBCMWLANNearbyDeviceDiscoveryAdapter::free(void **this)
{
}

uint64_t AppleBCMWLANNearbyDeviceDiscoveryAdapter::setNDD_REQ(uint64_t a1, uint64_t a2)
{
  char isNDDCapable = AppleBCMWLANCore::isNDDCapable(*(AppleBCMWLANCore **)(*(void *)(a1 + 40) + 16));
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 32);
  if (isNDDCapable)
  {
    if (v5 && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 32), "[dk] %s@%d:%s:timeout=%u, channel=%u, filters=%u, bandwidth=%d, band=%d, mode=%d, type=%d\n", "setNDD_REQ", 103, "setNDD_REQ", *(_DWORD *)(a2 + 8), *(_WORD *)(a2 + 16), *(_DWORD *)(a2 + 12), (*(unsigned __int16 *)(a2 + 16) >> 11) & 7, *(unsigned __int16 *)(a2 + 16) >> 14, *(_DWORD *)a2, *(_DWORD *)(a2 + 4));
    }
    if (*(_DWORD *)(a2 + 12))
    {
      unint64_t v6 = 0;
      uint64_t v7 = (unsigned __int8 *)(a2 + 45);
      do
      {
        if (*(void *)(*(void *)(a1 + 40) + 32) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 32), "[dk] %s@%d:%s:ta=[%x:%x:%x:%x:%x:%x], ra=[%x:%x:%x:%x:%x:%x], bssid=[%x:%x:%x:%x:%x:%x], frameType=%u, numReports=%u\n", "setNDD_REQ", 105, "setNDD_REQ", *(v7 - 11), *(v7 - 10), *(v7 - 9), *(v7 - 8), *(v7 - 7), *(v7 - 6), *(v7 - 17), *(v7 - 16), *(v7 - 15), *(v7 - 14), *(v7 - 13), *(v7 - 12), *(v7 - 5), *(v7 - 4),
        }
            *(v7 - 3),
            *(v7 - 2),
            *(v7 - 1),
            *v7,
            *(_DWORD *)(v7 - 25),
            *(_DWORD *)(v7 - 21));
        ++v6;
        v7 += 28;
      }
      while (v6 < *(unsigned int *)(a2 + 12));
    }
    if (*(_DWORD *)a2 == 1)
    {
      return AppleBCMWLANNearbyDeviceDiscoveryAdapter::configureNDDStart(a1, a2);
    }
    else
    {
      return AppleBCMWLANNearbyDeviceDiscoveryAdapter::configureNDDStop(a1, a2);
    }
  }
  else
  {
    if (v5 && CCLogStream::shouldLog())
    {
      uint64_t v9 = *(void *)(a1 + 40);
      int v10 = *(CCLogStream **)(v9 + 32);
      int v11 = AppleBCMWLANCore::isNDDCapable(*(AppleBCMWLANCore **)(v9 + 16));
      CCLogStream::logAlert(v10, "[dk] %s@%d:NDD not supported %d\n", "setNDD_REQ", 99, v11);
    }
    return 3758097095;
  }
}

uint64_t AppleBCMWLANNearbyDeviceDiscoveryAdapter::configureNDDStart(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  if (a2 && (*(_DWORD *)(a2 + 12) - 1) <= 7)
  {
    int v4 = 0;
    do
    {
      uint64_t v5 = IOMallocZeroData();
      if (!v5)
      {
        uint64_t v20 = 3758097085;
        if (*(void *)(*(void *)(a1 + 40) + 32) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 32), "[dk] %s@%d:%s:%d No memory to allocate buffers for filter cmd\n");
        }
        return v20;
      }
      unint64_t v6 = (unsigned char *)v5;
      *(_DWORD *)uint64_t v5 = 1835009;
      uint64_t v7 = a2 + 28 * v4;
      int v8 = *(_DWORD *)(v7 + 34);
      *(_WORD *)(v5 + 18) = *(_WORD *)(v7 + 38);
      *(_DWORD *)(v5 + 14) = v8;
      int v9 = *(_DWORD *)(*(void *)(a1 + 40) + 8);
      if (v9 == -1)
      {
        *(_WORD *)(v5 + 28) = *(_DWORD *)(a2 + 28 * v4 + 24);
      }
      else
      {
        *(_WORD *)(v5 + 28) = v9;
        if (*(void *)(*(void *)(a1 + 40) + 32) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 32), "[dk] %s@%d:%s: Configuring override num reports value %u\n", "configureNDDStart", 307, "configureNDDStart", *(_DWORD *)(*(void *)(a1 + 40) + 8));
        }
      }
      v6[30] = -1;
      v6[31] = v4;
      if (*(_DWORD *)(a2 + 4) == 2)
      {
        unsigned int v10 = 0;
        while (1)
        {
          v6[4] = v10;
          uint64_t v36 = v6;
          uint64_t v37 = 34;
          uint64_t v11 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 24), (uint64_t)"eds", (uint64_t)&v36, 0, 0);
          if (v11) {
            break;
          }
          if (v10++ > 1) {
            goto LABEL_26;
          }
        }
        uint64_t v20 = v11;
        if (*(void *)(*(void *)(a1 + 40) + 32) && CCLogStream::shouldLog())
        {
          uint64_t v33 = *(void *)(a1 + 40);
          int v34 = *(CCLogStream **)(v33 + 32);
          uint64_t v35 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v33 + 16) + 112))(*(void *)(v33 + 16), v20);
          CCLogStream::logAlert(v34, "[dk] %s@%d:Unable to set WL_EDS_IOV_XTLV_FILTER_ADD: %s[%d] for filter id %d radio %d\n", "configureNDDStart", 318, v35, v20, v4, v6[4]);
        }
        goto LABEL_46;
      }
      v6[4] = 2;
      uint64_t v36 = v6;
      uint64_t v37 = 34;
      uint64_t v13 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 24), (uint64_t)"eds", (uint64_t)&v36, 0, 0);
      uint64_t v14 = *(void *)(a1 + 40);
      if (v13)
      {
        uint64_t v20 = v13;
        if (*(void *)(v14 + 32) && CCLogStream::shouldLog())
        {
          uint64_t v24 = *(void *)(a1 + 40);
          int v25 = *(CCLogStream **)(v24 + 32);
          unsigned int v26 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v24 + 16) + 112))(*(void *)(v24 + 16), v20);
          CCLogStream::logAlert(v25, "[dk] %s@%d:Unable to set WL_EDS_IOV_XTLV_FILTER_ADD: %s[%d] for filter id %d radio %d\n", "configureNDDStart", 327, v26, v20, v4, v6[4]);
        }
        goto LABEL_46;
      }
      if (*(unsigned char *)v14)
      {
        if (*(void *)(v14 + 32) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 32), "[dk] %s@%d:Debug mode force on LPSC enabled. Skipping programming of main/aux core\n", "configureNDDStart", 343);
        }
      }
      else
      {
        unsigned int v15 = *(unsigned __int16 *)(a2 + 16);
        if (!(v15 >> 14))
        {
          v6[4] = 0;
          unsigned int v15 = *(unsigned __int16 *)(a2 + 16);
        }
        if (((v15 >> 14) | 2) == 3) {
          v6[4] = 1;
        }
        uint64_t v36 = v6;
        uint64_t v37 = 34;
        uint64_t v16 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 24), (uint64_t)"eds", (uint64_t)&v36, 0, 0);
        if (v16)
        {
          uint64_t v20 = v16;
          if (*(void *)(*(void *)(a1 + 40) + 32) && CCLogStream::shouldLog())
          {
            uint64_t v27 = *(void *)(a1 + 40);
            uint64_t v28 = *(CCLogStream **)(v27 + 32);
            int v29 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v27 + 16) + 112))(*(void *)(v27 + 16), v20);
            CCLogStream::logAlert(v28, "[dk] %s@%d:Unable to set WL_EDS_IOV_XTLV_FILTER_ADD: %s[%d] for filter id %d radio %d\n", "configureNDDStart", 340, v29, v20, v4, v6[4]);
          }
          goto LABEL_46;
        }
      }
LABEL_26:
      IOFreeData();
      unsigned __int8 v17 = v4 + 1;
      int v4 = (v4 + 1);
    }
    while (*(unsigned __int8 *)(a2 + 12) > v17);
    uint64_t v18 = IOMallocZeroData();
    if (v18)
    {
      uint64_t v19 = v18;
      *(_DWORD *)uint64_t v18 = 524308;
      if (*(_DWORD *)(a2 + 4) == 2)
      {
        *(unsigned char *)(v18 + 4) = 0;
        goto LABEL_41;
      }
      *(unsigned char *)(v18 + 4) |= **(unsigned char **)(a1 + 40) ^ 1 | 2;
      int v21 = *(_DWORD *)(*(void *)(a1 + 40) + 4);
      if (v21 == -1)
      {
LABEL_41:
        *(_DWORD *)(v18 + 8) = *(_DWORD *)(a2 + 8);
      }
      else
      {
        *(_DWORD *)(v18 + 8) = v21;
        if (*(void *)(*(void *)(a1 + 40) + 32) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 32), "[dk] %s@%d:%s: Configuring override timeout value %u\n", "configureNDDStart", 374, "configureNDDStart", *(_DWORD *)(*(void *)(a1 + 40) + 4));
        }
      }
      uint64_t ChanSpecHandler = AppleBCMWLANCore::getChanSpecHandler(*(AppleBCMWLANCore **)(*(void *)(a1 + 40) + 16));
      *(_WORD *)(v19 + 6) = AppleBCMWLANChanSpec::getBCMChannelSpec(ChanSpecHandler, *(_WORD *)(a2 + 16));
      uint64_t v36 = (unsigned char *)v19;
      uint64_t v37 = 14;
      uint64_t v20 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 24), (uint64_t)"eds", (uint64_t)&v36, 0, 0);
      if (v20 && *(void *)(*(void *)(a1 + 40) + 32) && CCLogStream::shouldLog())
      {
        uint64_t v30 = *(void *)(a1 + 40);
        unint64_t v31 = *(CCLogStream **)(v30 + 32);
        uint64_t v32 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v30 + 16) + 112))(*(void *)(v30 + 16), v20);
        CCLogStream::logAlert(v31, "[dk] %s@%d:Unable to set WL_EDS_IOV_XTLV_START: %s[%d]\n", "configureNDDStart", 383, v32, v20);
      }
LABEL_46:
      IOFreeData();
      return v20;
    }
    uint64_t v20 = 3758097085;
    if (*(void *)(*(void *)(a1 + 40) + 32) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 32), "[dk] %s@%d:%s:%d No memory to allocate buffers for start cmd\n");
    }
  }
  else
  {
    uint64_t v20 = 3758097095;
    if (*(void *)(*(void *)(a1 + 40) + 32) && CCLogStream::shouldLog())
    {
      CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 32), "[dk] %s@%d:Invalid NDD filters %u\n", "configureNDDStart", 284, *(_DWORD *)(a2 + 12));
      return 3758097095;
    }
  }
  return v20;
}

uint64_t AppleBCMWLANNearbyDeviceDiscoveryAdapter::configureNDDStop(uint64_t a1, uint64_t a2)
{
  if (!a2 || *(_DWORD *)(a2 + 12) >= 9u)
  {
    uint64_t v7 = 3758097095;
    if (*(void *)(*(void *)(a1 + 40) + 32) && CCLogStream::shouldLog())
    {
      CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 32), "[dk] %s@%d:Invalid NDD filters %u\n", "configureNDDStop", 397, *(_DWORD *)(a2 + 12));
      return 3758097095;
    }
    return v7;
  }
  uint64_t v4 = IOMallocZeroData();
  if (!v4)
  {
    uint64_t v7 = 3758097085;
    if (!*(void *)(*(void *)(a1 + 40) + 32) || !CCLogStream::shouldLog()) {
      return v7;
    }
    int v8 = *(CCLogStream **)(*(void *)(a1 + 40) + 32);
    int v9 = 405;
LABEL_25:
    CCLogStream::logAlert(v8, "[dk] %s@%d:%s:%d No memory to allocate buffers for filter cmd\n", "configureNDDStop", v9, "configureNDDStop", v9);
    return v7;
  }
  *(_DWORD *)uint64_t v4 = 262148;
  *(_WORD *)(v4 + 4) = -1;
  uint64_t v15 = v4;
  uint64_t v16 = 10;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 24), (uint64_t)"eds", (uint64_t)&v15, 0, 0);
  if (v5)
  {
    uint64_t v7 = v5;
    if (*(void *)(*(void *)(a1 + 40) + 32) && CCLogStream::shouldLog())
    {
      uint64_t v11 = *(void *)(a1 + 40);
      __int16 v12 = *(CCLogStream **)(v11 + 32);
      (*(void (**)(void, uint64_t))(**(void **)(v11 + 16) + 112))(*(void *)(v11 + 16), v7);
      CCLogStream::logAlert(v12, "[dk] %s@%d:Unable to set WL_EDS_IOV_XTLV_FILTER_ABORT: %s[%d]\n");
    }
    goto LABEL_7;
  }
  IOFreeData();
  uint64_t v6 = IOMallocZeroData();
  if (v6)
  {
    *(_DWORD *)uint64_t v6 = 262147;
    *(_WORD *)(v6 + 4) = -1;
    uint64_t v15 = v6;
    uint64_t v16 = 10;
    uint64_t v7 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 24), (uint64_t)"eds", (uint64_t)&v15, 0, 0);
    if (v7 && *(void *)(*(void *)(a1 + 40) + 32) && CCLogStream::shouldLog())
    {
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(CCLogStream **)(v13 + 32);
      (*(void (**)(void, uint64_t))(**(void **)(v13 + 16) + 112))(*(void *)(v13 + 16), v7);
      CCLogStream::logAlert(v14, "[dk] %s@%d:Unable to set WL_EDS_IOV_XTLV_FILTER_DELETE: %s[%d]\n");
    }
LABEL_7:
    IOFreeData();
    return v7;
  }
  uint64_t v7 = 3758097085;
  if (*(void *)(*(void *)(a1 + 40) + 32) && CCLogStream::shouldLog())
  {
    int v8 = *(CCLogStream **)(*(void *)(a1 + 40) + 32);
    int v9 = 428;
    goto LABEL_25;
  }
  return v7;
}

uint64_t AppleBCMWLANNearbyDeviceDiscoveryAdapter::dbgForceLPSCForNDD(uint64_t this, char a2)
{
  **(unsigned char **)(this + 40) = a2;
  return this;
}

uint64_t AppleBCMWLANNearbyDeviceDiscoveryAdapter::dbgSetNDDTimeoutMsForActive(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 40) + 4) = a2;
  return this;
}

uint64_t AppleBCMWLANNearbyDeviceDiscoveryAdapter::dbgSetNDDNumReports(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 40) + 8) = a2;
  return this;
}

uint64_t AppleBCMWLANNearbyDeviceDiscoveryAdapter::processNDDReportEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = 0;
  long long v13 = 0u;
  long long v14 = 0u;
  if (*(_WORD *)(a2 + 48) == 1)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    if (*(_DWORD *)(a2 + 20) == 56)
    {
      uint64_t ChanSpecHandler = (int **)AppleBCMWLANCore::getChanSpecHandler(*(AppleBCMWLANCore **)(v4 + 16));
      WORD1(v15) = AppleBCMWLANChanSpec::getAppleChannelSpec(ChanSpecHandler, *(unsigned __int16 *)(a2 + 90));
      uint64_t v16 = *(void *)(a2 + 56);
      int v6 = *(_DWORD *)(a2 + 64);
      WORD2(v14) = *(_WORD *)(a2 + 68);
      *(_DWORD *)((char *)&v14 + 6) = *(_DWORD *)(a2 + 70);
      WORD5(v14) = *(_WORD *)(a2 + 74);
      HIDWORD(v14) = *(_DWORD *)(a2 + 76);
      LOWORD(v15) = *(_WORD *)(a2 + 80);
      int v7 = *(unsigned __int8 *)(a2 + 83);
      LODWORD(v14) = v6;
      DWORD2(v1AppleBCMWLANNearbyDeviceDiscoveryAdapter::free(this - 3) = v7;
      *(_DWORD *)((char *)&v13 + 2) = *(_DWORD *)(a2 + 84);
      LOBYTE(v1AppleBCMWLANNearbyDeviceDiscoveryAdapter::free(this - 3) = *(unsigned char *)(a2 + 88);
      BYTE1(v1AppleBCMWLANNearbyDeviceDiscoveryAdapter::free(this - 3) = 1;
      HIDWORD(v1AppleBCMWLANNearbyDeviceDiscoveryAdapter::free(this - 3) = ratespec2rate(*(void *)(*(void *)(a1 + 40) + 32), *(_DWORD *)(a2 + 92));
      AppleBCMWLANCore::postMessageInfra(*(AppleBCMWLANCore **)(*(void *)(a1 + 40) + 16), 0xEFu, &v13, 0x30uLL);
      uint64_t v8 = *(void *)(a1 + 40);
      if (*(void *)(v8 + 32))
      {
        int shouldLog = CCLogStream::shouldLog();
        uint64_t v8 = *(void *)(a1 + 40);
        if (shouldLog)
        {
          CCLogStream::logAlert(*(CCLogStream **)(v8 + 32), "[dk] %s@%d:version=%u, length=%u, timestamp=%llu, ra=[%x:%x:%x:%x:%x:%x], ta=[%x:%x:%x:%x:%x:%x], bssid=[%x:%x:%x:%x:%x:%x]", "processNDDReportEvent", 177, *(unsigned __int16 *)(a2 + 48), *(unsigned __int16 *)(a2 + 50), *(void *)(a2 + 56), *(unsigned __int8 *)(a2 + 64), *(unsigned __int8 *)(a2 + 65), *(unsigned __int8 *)(a2 + 66), *(unsigned __int8 *)(a2 + 67), *(unsigned __int8 *)(a2 + 68), *(unsigned __int8 *)(a2 + 69), *(unsigned __int8 *)(a2 + 70), *(unsigned __int8 *)(a2 + 71), *(unsigned __int8 *)(a2 + 72), *(unsigned __int8 *)(a2 + 73), *(unsigned __int8 *)(a2 + 74), *(unsigned __int8 *)(a2 + 75),
            *(unsigned __int8 *)(a2 + 76),
            *(unsigned __int8 *)(a2 + 77),
            *(unsigned __int8 *)(a2 + 78),
            *(unsigned __int8 *)(a2 + 79),
            *(unsigned __int8 *)(a2 + 80),
            *(unsigned __int8 *)(a2 + 81));
          uint64_t v8 = *(void *)(a1 + 40);
        }
      }
      if (*(void *)(v8 + 32))
      {
        int v10 = CCLogStream::shouldLog();
        uint64_t v8 = *(void *)(a1 + 40);
        if (v10)
        {
          CCLogStream::logAlert(*(CCLogStream **)(v8 + 32), "[dk] %s@%d:filterId=%d, fType=%d, rssi[0]=%d, rssi[1]=%d, rssi[2]=%d, rssi[3]=%d, numAnt=%d, radioInd=%d fc=%u\n", "processNDDReportEvent", 178, *(unsigned __int8 *)(a2 + 82), *(unsigned __int8 *)(a2 + 83), *(char *)(a2 + 84), *(char *)(a2 + 85), *(char *)(a2 + 86), *(char *)(a2 + 87), *(unsigned __int8 *)(a2 + 88), *(unsigned __int8 *)(a2 + 89), *(unsigned __int16 *)(a2 + 96));
          uint64_t v8 = *(void *)(a1 + 40);
        }
      }
      uint64_t result = *(void *)(v8 + 32);
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          __int16 v12 = *(CCLogStream **)(*(void *)(a1 + 40) + 32);
          ratespec2rate((uint64_t)v12, *(_DWORD *)(a2 + 92));
          return CCLogStream::logAlert(v12, "[dk] %s@%d:ChanSpec channel=%d, sunChannel=%d, bandwidth=%d, band=%d, rate=%u\n", "processNDDReportEvent");
        }
      }
    }
    else
    {
      uint64_t result = *(void *)(v4 + 32);
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result) {
          return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 32), "[dk] %s@%d:%s:%dInvalid data len received %u\n");
        }
      }
    }
  }
  else
  {
    uint64_t result = *(void *)(*(void *)(a1 + 40) + 32);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result) {
        return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 32), "[dk] %s@%d:%s:%dInvalid event version, received %u\n");
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANNearbyDeviceDiscoveryAdapter::processNDDStatusEvent(uint64_t a1, uint64_t a2)
{
  if (*(_WORD *)(a2 + 48) == 1)
  {
    if (*(_DWORD *)(a2 + 20) == 20)
    {
      if (*(unsigned char *)(a2 + 54) == 1)
      {
        if (*(void *)(*(void *)(a1 + 40) + 32) && CCLogStream::shouldLog()) {
          CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 40) + 32), "[dk] %s@%d:NDD start event received\n", "processNDDStatusEvent", 201);
        }
        goto LABEL_14;
      }
      int v3 = *(unsigned __int16 *)(a2 + 52);
      int v8 = 0;
      HIDWORD(v4) = v3;
      LODWORD(v4) = (v3 << 16) - 0x400000;
      unsigned int v5 = (unsigned __int16)(v4 >> 22);
      if (v5 >= 2)
      {
        if (v5 == 3)
        {
          int v6 = -528349953;
          goto LABEL_12;
        }
        if (v5 != 7)
        {
LABEL_13:
          AppleBCMWLANCore::postMessageInfra(*(AppleBCMWLANCore **)(*(void *)(a1 + 40) + 16), 0xEEu, &v8, 4uLL);
LABEL_14:
          uint64_t result = *(void *)(*(void *)(a1 + 40) + 32);
          if (result)
          {
            uint64_t result = CCLogStream::shouldLog();
            if (result) {
              return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 32), "[dk] %s@%d:version=%u, length=%u, inactiveReason=%d, status=%d, remainDur=%u, accumDur=%u\n", "processNDDStatusEvent");
            }
          }
          return result;
        }
      }
      int v6 = -528350192;
LABEL_12:
      int v8 = v6;
      goto LABEL_13;
    }
    uint64_t result = *(void *)(*(void *)(a1 + 40) + 32);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result) {
        return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 32), "[dk] %s@%d:%s:%dInvalid data len received %u\n");
      }
    }
  }
  else
  {
    uint64_t result = *(void *)(*(void *)(a1 + 40) + 32);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result) {
        return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 32), "[dk] %s@%d:%s:%dInvalid event version, received %u\n");
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANNearbyDeviceDiscoveryAdapter::handleNDDFWEvents(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    int v3 = *(_DWORD *)(a2 + 8);
    switch(v3)
    {
      case 3:
        if (*(_WORD *)(a2 + 48) == 1)
        {
          uint64_t result = *(void *)(*(void *)(a1 + 40) + 32);
          if (*(_DWORD *)(a2 + 20) == 12)
          {
            if (result)
            {
              uint64_t result = CCLogStream::shouldLog();
              if (result) {
                return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 32), "[dk] %s@%d:Version=%u, length=%u, filterId=%u, radioEnc=%u, curNumRpts=%u, validityMask=%u filterStatus=%u inactiveReason=%u\n", "handleNDDFWEvents", 265);
              }
            }
          }
          else if (result)
          {
            uint64_t result = CCLogStream::shouldLog();
            if (result) {
              return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 32), "[dk] %s@%d:%s:%dInvalid data len received %u\n");
            }
          }
        }
        else
        {
          uint64_t result = *(void *)(*(void *)(a1 + 40) + 32);
          if (result)
          {
            uint64_t result = CCLogStream::shouldLog();
            if (result) {
              return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 32), "[dk] %s@%d:%s:%dInvalid filter status version, received %u\n");
            }
          }
        }
        break;
      case 2:
        return AppleBCMWLANNearbyDeviceDiscoveryAdapter::processNDDReportEvent(a1, a2);
      case 1:
        return AppleBCMWLANNearbyDeviceDiscoveryAdapter::processNDDStatusEvent(a1, a2);
      default:
        uint64_t result = *(void *)(*(void *)(a1 + 40) + 32);
        if (result)
        {
          uint64_t result = CCLogStream::shouldLog();
          if (result) {
            return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 32), "[dk] %s@%d:%s:%dInvalid event status %u\n");
          }
        }
        break;
    }
  }
  else
  {
    uint64_t result = *(void *)(*(void *)(a1 + 40) + 32);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result) {
        return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 32), "[dk] %s@%d:%s:%dInvalid event\n");
      }
    }
  }
  return result;
}

void _GLOBAL__sub_I_AppleBCMWLANNearbyDeviceDiscoveryAdapter_cpp()
{
  kNullRange = 0;
}

uint64_t AppleBCMWLANApFeatureConfig::free(AppleBCMWLANApFeatureConfig *this)
{
  unsigned int v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    IOFree(v2, 0x10uLL);
    *((void *)this + 7) = 0;
  }
  return IO80211ApFeatureConfig::free(this);
}

uint64_t non-virtual thunk to'AppleBCMWLANApFeatureConfig::free(AppleBCMWLANApFeatureConfig *this)
{
  return AppleBCMWLANApFeatureConfig::free((AppleBCMWLANApFeatureConfig *)((char *)this - 24));
}

uint64_t AppleBCMWLANApFeatureConfig::handleLimitedAggregation(AppleBCMWLANCore ***this)
{
  int LimitedAggregationEnable = IO80211ApFeatureConfig::getLimitedAggregationEnable((IO80211ApFeatureConfig *)this);
  NetAdapter = (AppleBCMWLANCore ***)AppleBCMWLANCore::getNetAdapter(*this[7]);
  return AppleBCMWLANNetAdapter::setLimitedAggregation(NetAdapter, LimitedAggregationEnable);
}

uint64_t non-virtual thunk to'AppleBCMWLANApFeatureConfig::handleLimitedAggregation(AppleBCMWLANCore ***this)
{
  return AppleBCMWLANApFeatureConfig::handleLimitedAggregation(this - 5);
}

uint64_t AppleBCMWLANApFeatureConfig::sendBeaconMitigationParams(uint64_t a1, uint64_t a2)
{
  NetAdapter = (AppleBCMWLANCore ***)AppleBCMWLANCore::getNetAdapter(**(AppleBCMWLANCore ***)(a1 + 56));
  __int16 v4 = *(_WORD *)a2;
  char v5 = *(unsigned char *)(a2 + 2);
  char v6 = *(unsigned char *)(a2 + 3);
  return AppleBCMWLANNetAdapter::configureBeaconMitigationParams(NetAdapter, v4, v5, v6);
}

uint64_t non-virtual thunk to'AppleBCMWLANApFeatureConfig::sendBeaconMitigationParams(uint64_t a1, uint64_t a2)
{
  NetAdapter = (AppleBCMWLANCore ***)AppleBCMWLANCore::getNetAdapter(**(AppleBCMWLANCore ***)(a1 + 16));
  __int16 v4 = *(_WORD *)a2;
  char v5 = *(unsigned char *)(a2 + 2);
  char v6 = *(unsigned char *)(a2 + 3);
  return AppleBCMWLANNetAdapter::configureBeaconMitigationParams(NetAdapter, v4, v5, v6);
}

void _GLOBAL__sub_I_AppleBCMWLANApFeatureConfig_cpp()
{
  kNullRange = 0;
}

OSObject *AppleBCMWLANGASAdapter::withDriver(const OSMetaClass *(__cdecl *a1)(const OSMetaClassBase *__hidden this))
{
  __int16 v4 = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANGASAdapterMetaClass, &v4)) {
    return 0;
  }
  unsigned int v2 = v4;
  if (v4 && (AppleBCMWLANGASAdapter::initWithDriver(v4, a1) & 1) == 0)
  {
    ((void (*)(OSObject *))v2->release)(v2);
    return 0;
  }
  return v2;
}

uint64_t AppleBCMWLANGASAdapter::initWithDriver(OSObject *a1, const OSMetaClass *(__cdecl *a2)(const OSMetaClassBase *__hidden this))
{
  __int16 v4 = (OSObject_vtbl *)IOMallocZeroTyped();
  a1[1].OSMetaClassBase::__vftable = v4;
  if (v4)
  {
    v4->getMetaClass = a2;
    getMetaClass = (AppleBCMWLANCore *)a1[1].getMetaClass;
    if (getMetaClass)
    {
      a1[1].retain = (void (__cdecl *)(const OSObject *__hidden))AppleBCMWLANCore::getCommander(getMetaClass);
      retain = a1[1].retain;
      if (retain)
      {
        (*(void (**)(void (__cdecl *)(const OSObject *__hidden)))(*(void *)retain + 8))(retain);
        a1[1].release = (void (__cdecl *)(const OSObject *__hidden))(*(uint64_t (**)(const OSMetaClass *(__cdecl *)(const OSMetaClassBase *__hidden)))(*(void *)a2 + 1848))(a2);
        release = a1[1].release;
        if (release)
        {
          (*(void (**)(void (__cdecl *)(const OSObject *__hidden)))(*(void *)release + 8))(release);
          if (OSObject::init(a1))
          {
            LOBYTE(a1[1].isEqualTo) = 0;
            return 1;
          }
          IOLog("AppleBCMWLANGASAdapter super init failied\n");
        }
        else
        {
          IOLog("AppleBCMWLANGASAdapter Failed to init fLogger\n");
        }
      }
      else
      {
        IOLog("AppleBCMWLANGASAdapter commander is null\n");
      }
    }
    else
    {
      IOLog("AppleBCMWLANGASAdapter driver is null\n");
    }
  }
  else
  {
    IOLog("Failed to allocate AppleBCMWLANGASAdapter_IVars\n");
  }
  ((void (*)(OSObject *))a1->free)(a1);
  return 0;
}

void AppleBCMWLANGASAdapter::free(AppleBCMWLANGASAdapter *this)
{
  if (*((void *)this + 5))
  {
    AppleBCMWLANGASAdapter::freeResources(this);
    unsigned int v2 = (void *)*((void *)this + 5);
    if (v2)
    {
      IOFree(v2, 0x20uLL);
      *((void *)this + 5) = 0;
    }
  }
  OSObject::free((OSObject *)this);
}

uint64_t AppleBCMWLANGASAdapter::freeResources(AppleBCMWLANGASAdapter *this)
{
  uint64_t v2 = *((void *)this + 5);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    *(void *)(*((void *)this + 5) + 16) = 0;
    uint64_t v2 = *((void *)this + 5);
  }
  uint64_t result = *(void *)(v2 + 8);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    *(void *)(*((void *)this + 5) + 8) = 0;
  }
  return result;
}

void non-virtual thunk to'AppleBCMWLANGASAdapter::free(AppleBCMWLANGASAdapter *this)
{
}

uint64_t AppleBCMWLANGASAdapter::setHotspot20CapsIndicationIE(AppleBCMWLANGASAdapter *this)
{
  uint64_t v2 = IOMallocZeroData();
  if (!v2) {
    return 12;
  }
  uint64_t v3 = v2;
  *(_DWORD *)uint64_t v2 = 1867515357;
  *(_WORD *)(v2 + 4) = 4250;
  *(unsigned char *)(v2 + 6) = 0;
  __int16 v4 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
  v10[0] = v3;
  v10[1] = 8;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"hs20_ie", (uint64_t)v10, 0, 0);
  if (v5 && *(void *)(*((void *)this + 5) + 16) && CCLogStream::shouldLog())
  {
    int v7 = (void *)*((void *)this + 5);
    int v8 = (CCLogStream *)v7[2];
    int v9 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v7 + 112))(*v7, v5);
    CCLogStream::logAlert(v8, "[dk] %s@%d: Failure to configure hs20_ie: %s\n", "setHotspot20CapsIndicationIE", 148, v9);
  }
  IOFreeData();
  return v5;
}

uint64_t AppleBCMWLANGASAdapter::setHotspot20InterworkingIE(AppleBCMWLANGASAdapter *this)
{
  uint64_t v2 = IOMallocZeroData();
  if (!v2) {
    return 12;
  }
  uint64_t v3 = v2;
  *(void *)uint64_t v2 = 0x100646461;
  *(_WORD *)(v2 + 12) = 1899;
  *(_DWORD *)(v2 + 8) = 272;
  *(unsigned char *)(v2 + 14) = 15;
  *(_DWORD *)(v2 + 15) = -1;
  *(_WORD *)(v2 + 19) = -1;
  __int16 v4 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
  v10[0] = v3;
  v10[1] = 21;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"ie", (uint64_t)v10, 0, 0);
  if (v5 && *(void *)(*((void *)this + 5) + 16) && CCLogStream::shouldLog())
  {
    int v7 = (void *)*((void *)this + 5);
    int v8 = (CCLogStream *)v7[2];
    int v9 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v7 + 112))(*v7, v5);
    CCLogStream::logCrit(v8, "[dk] %s@%d: HS20 ie error %s - failed to add IE\n", "setHotspot20InterworkingIE", 197, v9);
  }
  IOFreeData();
  return v5;
}

uint64_t AppleBCMWLANGASAdapter::setGASQueryParams(uint64_t a1, uint64_t a2)
{
  memset(v19, 0, sizeof(v19));
  uint64_t v4 = *(void *)(a1 + 40);
  if (*(void *)(v4 + 16))
  {
    int shouldLog = CCLogStream::shouldLog();
    uint64_t v4 = *(void *)(a1 + 40);
    if (shouldLog)
    {
      CCLogStream::logNoticeIf(*(CCLogStream **)(v4 + 16), 0x100000uLL, "[dk] %s@%d:Enter %s \n", "setGASQueryParams", 209, "setGASQueryParams");
      uint64_t v4 = *(void *)(a1 + 40);
    }
  }
  uint64_t v17 = 0x303E800C80000;
  unsigned __int16 v18 = *(_WORD *)(a2 + 8);
  size_t v6 = v18;
  int v7 = (const void *)(a2 + 10);
  if (v18 <= 0xFFu) {
    size_t v8 = 256 - v18;
  }
  else {
    size_t v8 = 0;
  }
  bzero((char *)v19 + v18, v8);
  memcpy(v19, v7, v6);
  int v9 = *(AppleBCMWLANCommander **)(v4 + 8);
  v16[0] = &v17;
  v16[1] = 266;
  uint64_t v10 = AppleBCMWLANCommander::runIOVarSet(v9, (uint64_t)"anqpo_set", (uint64_t)v16, 0, 0);
  uint64_t v11 = *(void **)(a1 + 40);
  if (v10)
  {
    if (v11[2])
    {
      int v13 = CCLogStream::shouldLog();
      uint64_t v11 = *(void **)(a1 + 40);
      if (v13)
      {
        long long v14 = (CCLogStream *)v11[2];
        uint64_t v15 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v11 + 112))(*v11, v10);
        CCLogStream::logAlert(v14, "[dk] %s@%d:Failed with Status %s\n", "setGASQueryParams", 224, v15);
        uint64_t v11 = *(void **)(a1 + 40);
      }
    }
  }
  if (v11[2] && CCLogStream::shouldLog()) {
    CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 40) + 16), 0x100000uLL, "[dk] %s@%d:Leave %s \n", "setGASQueryParams", 227, "setGASQueryParams");
  }
  return v10;
}

uint64_t AppleBCMWLANGASAdapter::startGASQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(AppleBCMWLANCore ***)(a1 + 40);
  if (v4[2])
  {
    int shouldLog = CCLogStream::shouldLog();
    uint64_t v4 = *(AppleBCMWLANCore ***)(a1 + 40);
    if (shouldLog)
    {
      CCLogStream::logNoticeIf(v4[2], 0x100000uLL, "[dk] %s@%d:Enter %s \n", "startGASQuery", 237, "startGASQuery");
      uint64_t v4 = *(AppleBCMWLANCore ***)(a1 + 40);
    }
  }
  if (AppleBCMWLANCore::getFirmwareInterfaceVersion(*v4) < 0x11)
  {
    if (AppleBCMWLANCore::getFirmwareInterfaceVersion(**(AppleBCMWLANCore ***)(a1 + 40)) >= 0xA) {
      unsigned __int16 v6 = 12 * *(_WORD *)(a2 + 528) + 20;
    }
    else {
      unsigned __int16 v6 = (8 * *(_WORD *)(a2 + 528)) | 2;
    }
  }
  else
  {
    unsigned __int16 v6 = 12 * *(_WORD *)(a2 + 528) + 8;
  }
  int v7 = (_WORD *)IOMallocZeroData();
  size_t v8 = *(AppleBCMWLANCore ***)(a1 + 40);
  int v9 = v8[2];
  if (v7)
  {
    if (v9)
    {
      int v10 = CCLogStream::shouldLog();
      size_t v8 = *(AppleBCMWLANCore ***)(a1 + 40);
      if (v10)
      {
        CCLogStream::logNoticeIf(v8[2], 0x100000uLL, "[dk] %s@%d:Number of GAS Peers to be Queried %d\n", "startGASQuery", 253, *(unsigned __int16 *)(a2 + 528));
        size_t v8 = *(AppleBCMWLANCore ***)(a1 + 40);
      }
    }
    if (AppleBCMWLANCore::getFirmwareInterfaceVersion(*v8) < 0x11)
    {
      unsigned int FirmwareInterfaceVersion = AppleBCMWLANCore::getFirmwareInterfaceVersion(**(AppleBCMWLANCore ***)(a1 + 40));
      int v20 = *(unsigned __int16 *)(a2 + 528);
      if (FirmwareInterfaceVersion < 0xA)
      {
        *int v7 = v20;
        if (v20)
        {
          unint64_t v25 = 0;
          unsigned int v26 = (int *)(a2 + 538);
          uint64_t v27 = (unsigned __int8 *)(v7 + 2);
          do
          {
            *((_WORD *)v27 - 1) = *((_WORD *)v26 - 1);
            int v28 = *v26;
            *((_WORD *)v27 + 2) = *((_WORD *)v26 + 2);
            *(_DWORD *)uint64_t v27 = v28;
            if (*(void *)(*(void *)(a1 + 40) + 16) && CCLogStream::shouldLog()) {
              CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 40) + 16), 0x100000uLL, "[dk] %s@%d:GAS Peer BSSID %02x %02x %02x %02x %02x %02x\t Channel %d\n", "startGASQuery", 296, *v27, v27[1], v27[2], v27[3], v27[4], v27[5], *((unsigned __int16 *)v27 - 1));
            }
            v26 += 3;
            ++v25;
            v27 += 8;
          }
          while (v25 < *(unsigned __int16 *)(a2 + 528));
        }
      }
      else
      {
        void v7[2] = v20;
        *int v7 = 2;
        if (v20)
        {
          unint64_t v21 = 0;
          uint64_t v22 = (int *)(a2 + 538);
          unsigned int v23 = v7 + 4;
          do
          {
            *unsigned int v23 = *((_WORD *)v22 - 1);
            int v24 = *v22;
            v23[3] = *((_WORD *)v22 + 2);
            *(_DWORD *)(v23 + 1) = v24;
            if (*(void *)(*(void *)(a1 + 40) + 16) && CCLogStream::shouldLog()) {
              CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 40) + 16), 0x100000uLL, "[dk] %s@%d:GAS Peer BSSID %02x %02x %02x %02x %02x %02x\t Channel %d\n", "startGASQuery", 285, *((unsigned __int8 *)v23 + 2), *((unsigned __int8 *)v23 + 3), *((unsigned __int8 *)v23 + 4), *((unsigned __int8 *)v23 + 5), *((unsigned __int8 *)v23 + 6), *((unsigned __int8 *)v23 + 7), *v23);
            }
            v22 += 3;
            ++v21;
            v23 += 6;
          }
          while (v21 < *(unsigned __int16 *)(a2 + 528));
        }
      }
    }
    else
    {
      void v7[2] = *(_WORD *)(a2 + 528);
      *int v7 = 3;
      if (*(_WORD *)(a2 + 528))
      {
        unint64_t v11 = 0;
        uint64_t v12 = a2 + 538;
        int v13 = v7 + 4;
        do
        {
          unsigned int v14 = *(unsigned __int8 *)(v12 - 2);
          if (v14 >= 0xF) {
            LOWORD(v14) = v14 | 0xC000;
          }
          unsigned __int16 v15 = v14 | 0x1000;
          uint64_t ChanSpecHandler = AppleBCMWLANCore::getChanSpecHandler(**(AppleBCMWLANCore ***)(a1 + 40));
          *int v13 = AppleBCMWLANChanSpec::getBCMChannelSpec(ChanSpecHandler, v15);
          unsigned __int16 v17 = *(_WORD *)(v12 + 4);
          *(_DWORD *)(v13 + 1) = *(_DWORD *)v12;
          v13[3] = v17;
          if (*(void *)(*(void *)(a1 + 40) + 16) && CCLogStream::shouldLog()) {
            CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 40) + 16), 0x100000uLL, "[dk] %s@%d:GAS Peer BSSID %02x %02x %02x %02x %02x %02x\t Channel %d\n", "startGASQuery", 273, *((unsigned __int8 *)v13 + 2), *((unsigned __int8 *)v13 + 3), *((unsigned __int8 *)v13 + 4), *((unsigned __int8 *)v13 + 5), *((unsigned __int8 *)v13 + 6), *((unsigned __int8 *)v13 + 7), *v13);
          }
          v12 += 12;
          ++v11;
          v13 += 6;
        }
        while (v11 < *(unsigned __int16 *)(a2 + 528));
      }
    }
    uint64_t v29 = *(void *)(a1 + 40);
    if (*(void *)(v29 + 16))
    {
      int v30 = CCLogStream::shouldLog();
      uint64_t v29 = *(void *)(a1 + 40);
      if (v30)
      {
        CCLogStream::logAlert(*(CCLogStream **)(v29 + 16), "[dk] %s@%d:Start GAS Query\n", "startGASQuery", 301);
        uint64_t v29 = *(void *)(a1 + 40);
      }
    }
    unint64_t v31 = *(AppleBCMWLANCommander **)(v29 + 8);
    if (v6) {
      uint64_t v32 = v7;
    }
    else {
      uint64_t v32 = 0;
    }
    v37[0] = v32;
    v37[1] = v6;
    uint64_t v18 = AppleBCMWLANCommander::runIOVarSet(v31, (uint64_t)"anqpo_start_query", (uint64_t)v37, 0, 0);
    if (v18 && *(void *)(*(void *)(a1 + 40) + 16) && CCLogStream::shouldLog())
    {
      int v34 = *(void **)(a1 + 40);
      uint64_t v35 = (CCLogStream *)v34[2];
      uint64_t v36 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v34 + 112))(*v34, v18);
      CCLogStream::logAlert(v35, "[dk] %s@%d:%s: Failed with Status %s\n", "startGASQuery", 303, "startGASQuery", v36);
    }
  }
  else
  {
    uint64_t v18 = 3758097085;
    if (v9 && CCLogStream::shouldLog()) {
      CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 40) + 16), 0x100000uLL, "[dk] %s@%d:GAS Peer Buffer memory allocation failed\n", "startGASQuery", 249);
    }
  }
  if (*(void *)(*(void *)(a1 + 40) + 16) && CCLogStream::shouldLog())
  {
    CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 40) + 16), 0x100000uLL, "[dk] %s@%d:Leave %s \n", "startGASQuery", 306, "startGASQuery");
    if (!v7) {
      return v18;
    }
    goto LABEL_51;
  }
  if (v7) {
LABEL_51:
  }
    IOFreeData();
  return v18;
}

uint64_t AppleBCMWLANGASAdapter::issueGASAbort(AppleBCMWLANGASAdapter *this)
{
  int v12 = 1;
  uint64_t v2 = *((void *)this + 5);
  if (*(void *)(v2 + 16))
  {
    int shouldLog = CCLogStream::shouldLog();
    uint64_t v2 = *((void *)this + 5);
    if (shouldLog)
    {
      CCLogStream::logNoticeIf(*(CCLogStream **)(v2 + 16), 0x100000uLL, "[dk] %s@%d:Enter %s \n", "issueGASAbort", 315, "issueGASAbort");
      uint64_t v2 = *((void *)this + 5);
    }
  }
  uint64_t v4 = *(AppleBCMWLANCommander **)(v2 + 8);
  v11[0] = &v12;
  v11[1] = 4;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"anqpo_stop_query", (uint64_t)v11, 0, 0);
  uint64_t v6 = *(void *)(*((void *)this + 5) + 16);
  if (v5)
  {
    if (v6 && CCLogStream::shouldLog())
    {
      size_t v8 = (void *)*((void *)this + 5);
      int v9 = (CCLogStream *)v8[2];
      int v10 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v8 + 112))(*v8, v5);
      CCLogStream::logAlert(v9, "[dk] %s@%d:Line %d Failed to Abort GAS Query %s\n", "issueGASAbort", 319, 319, v10);
    }
  }
  else if (v6 && CCLogStream::shouldLog())
  {
    CCLogStream::logAlertIf(*(CCLogStream **)(*((void *)this + 5) + 16), 0x100000uLL, "[dk] %s@%d:GAS Query Aborted\n", "issueGASAbort", 321);
  }
  if (*(void *)(*((void *)this + 5) + 16) && CCLogStream::shouldLog()) {
    CCLogStream::logNoticeIf(*(CCLogStream **)(*((void *)this + 5) + 16), 0x100000uLL, "[dk] %s@%d:Leave %s \n", "issueGASAbort", 324, "issueGASAbort");
  }
  return v5;
}

uint64_t AppleBCMWLANGASAdapter::setGAS_REQ(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (!*(void *)(*(void *)(a1 + 40) + 16) || !CCLogStream::shouldLog())
  {
    if (a2) {
      goto LABEL_4;
    }
LABEL_22:
    uint64_t started = 3758097090;
    goto LABEL_10;
  }
  CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 40) + 16), 0x100000uLL, "[dk] %s@%d:Enter %s \n", "setGAS_REQ", 353, "setGAS_REQ");
  if (!a2) {
    goto LABEL_22;
  }
LABEL_4:
  uint64_t isGASQueryAllowed = AppleBCMWLANCore::isGASQueryAllowed(**(AppleBCMWLANCore ***)(a1 + 40), a2, a3);
  if (isGASQueryAllowed)
  {
    uint64_t started = isGASQueryAllowed;
  }
  else
  {
    uint64_t v6 = AppleBCMWLANGASAdapter::setGASQueryParams(a1, a2);
    uint64_t v7 = *(void *)(a1 + 40);
    if (v6)
    {
      uint64_t started = v6;
      if (*(void *)(v7 + 16) && CCLogStream::shouldLog())
      {
        int v10 = *(void **)(a1 + 40);
        unint64_t v11 = (CCLogStream *)v10[2];
        (*(void (**)(void, uint64_t))(*(void *)*v10 + 112))(*v10, started);
        CCLogStream::logAlert(v11, "[dk] %s@%d:setGASQueryParams Failed %s\n");
      }
    }
    else
    {
      *(unsigned char *)(v7 + 24) = 1;
      if (*(void *)(*(void *)(a1 + 40) + 16) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 16), "[dk] %s@%d:AppleBCMWLANGASAdapter::setGAS_REQ: Sending GAS Query\n", "setGAS_REQ", 365);
      }
      uint64_t started = AppleBCMWLANGASAdapter::startGASQuery(a1, a2);
      if (started)
      {
        *(unsigned char *)(*(void *)(a1 + 40) + 24) = 0;
        if (*(void *)(*(void *)(a1 + 40) + 16))
        {
          if (CCLogStream::shouldLog())
          {
            int v12 = *(void **)(a1 + 40);
            int v13 = (CCLogStream *)v12[2];
            (*(void (**)(void, uint64_t))(*(void *)*v12 + 112))(*v12, started);
            CCLogStream::logAlert(v13, "[dk] %s@%d:startGASQuery Failed %s\n");
          }
        }
      }
    }
  }
LABEL_10:
  if (*(void *)(*(void *)(a1 + 40) + 16) && CCLogStream::shouldLog()) {
    CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 40) + 16), 0x100000uLL, "[dk] %s@%d:Leave %s \n", "setGAS_REQ", 374, "setGAS_REQ");
  }
  return started;
}

AppleBCMWLANCore *AppleBCMWLANGASAdapter::sendGasCompleteEvent(AppleBCMWLANCore ***this, unsigned int a2)
{
  unsigned int v7 = a2;
  if (a2 < 4)
  {
    uint64_t result = (AppleBCMWLANCore *)AppleBCMWLANGASAdapter::isGASEventAllowed(this);
    if (result) {
      return result;
    }
    uint64_t v5 = this[5];
    if (v5[2])
    {
      int shouldLog = CCLogStream::shouldLog();
      uint64_t v5 = this[5];
      if (shouldLog)
      {
        CCLogStream::logAlert(v5[2], "[dk] %s@%d:AppleBCMWLANGASAdapter::sendGasCompleteEvent: GAS COMPLETE event status %u\n", "sendGasCompleteEvent", 391, a2);
        uint64_t v5 = this[5];
      }
    }
    AppleBCMWLANCore::postMessageInfra(*v5, 0xDCu, &v7, 4uLL);
    return 0;
  }
  uint64_t result = this[5][2];
  if (result)
  {
    uint64_t result = (AppleBCMWLANCore *)CCLogStream::shouldLog();
    if (result)
    {
      CCLogStream::logAlert(this[5][2], "[dk] %s@%d:Invalid gas event status argument %u\n", "sendGasCompleteEvent", 386, a2);
      return 0;
    }
  }
  return result;
}

uint64_t AppleBCMWLANGASAdapter::isGASEventAllowed(AppleBCMWLANCore ***this)
{
  uint64_t PrimaryInterface = AppleBCMWLANCore::getPrimaryInterface(*this[5]);
  uint64_t v3 = this[5];
  if (PrimaryInterface)
  {
    AppleBCMWLANCore::isShutdownPending(*v3);
    return 0;
  }
  else
  {
    uint64_t v4 = 3758097095;
    if (v3[2] && CCLogStream::shouldLog()) {
      CCLogStream::logCrit(this[5][2], "[dk] %s@%d:NO INTER %s %d\n", "isGASEventAllowed", 490, "IOReturn AppleBCMWLANGASAdapter::isGASEventAllowed()", 490);
    }
  }
  return v4;
}

AppleBCMWLANCore *AppleBCMWLANGASAdapter::setGAS_ABORT(AppleBCMWLANGASAdapter *this)
{
  uint64_t v2 = (AppleBCMWLANCore **)*((void *)this + 5);
  if (v2[2])
  {
    int shouldLog = CCLogStream::shouldLog();
    uint64_t v2 = (AppleBCMWLANCore **)*((void *)this + 5);
    if (shouldLog)
    {
      CCLogStream::logNoticeIf(v2[2], 0x100000uLL, "[dk] %s@%d:Enter %s \n", "setGAS_ABORT", 411, "setGAS_ABORT");
      uint64_t v2 = (AppleBCMWLANCore **)*((void *)this + 5);
    }
  }
  if ((AppleBCMWLANCore::featureFlagIsBitSet(*v2, 17) & 1) == 0)
  {
    if (*(void *)(*((void *)this + 5) + 16) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 16), "[dk] %s@%d:%s: ANQP Offload Disabled\n");
    }
    goto LABEL_17;
  }
  uint64_t v4 = AppleBCMWLANGASAdapter::issueGASAbort(this);
  if (v4)
  {
    uint64_t v8 = v4;
    if (*(void *)(*((void *)this + 5) + 16) && CCLogStream::shouldLog())
    {
      int v9 = (void *)*((void *)this + 5);
      int v10 = (CCLogStream *)v9[2];
      (*(void (**)(void, uint64_t))(*(void *)*v9 + 112))(*v9, v8);
      CCLogStream::logAlert(v10, "[dk] %s@%d:setGAS_ABORT Failed %s\n");
    }
LABEL_17:
    unsigned int v5 = 2;
    goto LABEL_7;
  }
  unsigned int v5 = 0;
LABEL_7:
  uint64_t v6 = AppleBCMWLANGASAdapter::sendGasCompleteEvent((AppleBCMWLANCore ***)this, v5);
  *(unsigned char *)(*((void *)this + 5) + 24) = 0;
  if (*(void *)(*((void *)this + 5) + 16) && CCLogStream::shouldLog()) {
    CCLogStream::logNoticeIf(*(CCLogStream **)(*((void *)this + 5) + 16), 0x100000uLL, "[dk] %s@%d:Leave %s \n", "setGAS_ABORT", 430, "setGAS_ABORT");
  }
  return v6;
}

uint64_t AppleBCMWLANGASAdapter::bcmEventStatusToAppleGasEventStatus(AppleBCMWLANGASAdapter *this, unsigned int a2, unsigned int *a3)
{
  if (*(void *)(*((void *)this + 5) + 16) && CCLogStream::shouldLog()) {
    CCLogStream::logNoticeIf(*(CCLogStream **)(*((void *)this + 5) + 16), 0x100000uLL, "[dk] %s@%d:Enter %s \n", "bcmEventStatusToAppleGasEventStatus", 459, "bcmEventStatusToAppleGasEventStatus");
  }
  if (a2 <= 8 && ((0x113u >> a2) & 1) != 0)
  {
    uint64_t v6 = 0;
    *a3 = dword_100303878[a2];
  }
  else
  {
    uint64_t v6 = 3758096385;
  }
  if (*(void *)(*((void *)this + 5) + 16) && CCLogStream::shouldLog()) {
    CCLogStream::logNoticeIf(*(CCLogStream **)(*((void *)this + 5) + 16), 0x100000uLL, "[dk] %s@%d:Leave %s \n", "bcmEventStatusToAppleGasEventStatus", 479, "bcmEventStatusToAppleGasEventStatus");
  }
  return v6;
}

uint64_t AppleBCMWLANGASAdapter::handleGAS_FRAGMENT_RX(AppleBCMWLANGASAdapter *this, uint64_t a2)
{
  unsigned int v21 = 0;
  if (*(void *)(*((void *)this + 5) + 16) && CCLogStream::shouldLog()) {
    CCLogStream::logNoticeIf(*(CCLogStream **)(*((void *)this + 5) + 16), 0x100000uLL, "[dk] %s@%d:Enter %s \n", "handleGAS_FRAGMENT_RX", 509, "handleGAS_FRAGMENT_RX");
  }
  int v20 = this;
  if (!a2)
  {
    if (*(void *)(*((void *)this + 5) + 16) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 16), "[dk] %s@%d:No Data attached to Event\n");
    }
LABEL_12:
    uint64_t v16 = 0;
    goto LABEL_13;
  }
  uint64_t v4 = AppleBCMWLANGASAdapter::bcmEventStatusToAppleGasEventStatus(this, *(_DWORD *)(a2 + 8), &v21);
  if (!v4)
  {
    int v5 = *(unsigned __int8 *)(a2 + 28);
    uint64_t v6 = *(unsigned int *)(a2 + 20);
    if (v6 <= 7)
    {
      if (*(void *)(*((void *)this + 5) + 16) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 16), "[dk] %s@%d:Invalid event message length=%u, too small to hold GAS response header length=%lu\n");
      }
    }
    else
    {
      int v7 = *(unsigned __int8 *)(a2 + 24);
      int v8 = *(unsigned __int8 *)(a2 + 25);
      int v9 = *(unsigned __int8 *)(a2 + 26);
      int v10 = *(unsigned __int8 *)(a2 + 27);
      int v11 = *(unsigned __int8 *)(a2 + 29);
      unsigned int v12 = v21;
      *(_DWORD *)(a2 + 28) = v21;
      *(_DWORD *)(a2 + 40) = v6;
      int v18 = v5;
      int v19 = v7;
      *(unsigned char *)(a2 + 32) = v7;
      *(unsigned char *)(a2 + 3AppleBCMWLANNearbyDeviceDiscoveryAdapter::free(this - 3) = v8;
      *(unsigned char *)(a2 + 34) = v9;
      *(unsigned char *)(a2 + 35) = v10;
      *(unsigned char *)(a2 + 36) = v5;
      *(unsigned char *)(a2 + 37) = v11;
      uint64_t isGASEventAllowed = AppleBCMWLANGASAdapter::isGASEventAllowed((AppleBCMWLANCore ***)v20);
      if (isGASEventAllowed)
      {
        uint64_t v16 = isGASEventAllowed;
        goto LABEL_13;
      }
      *(_DWORD *)(a2 + 44) = 1;
      unsigned int v14 = (AppleBCMWLANCore **)*((void *)v20 + 5);
      if (v14[2])
      {
        int shouldLog = CCLogStream::shouldLog();
        unsigned int v14 = (AppleBCMWLANCore **)*((void *)v20 + 5);
        if (shouldLog)
        {
          CCLogStream::logAlert(v14[2], "[dk] %s@%d:AppleBCMWLANGASAdapter::handleGAS_FRAGMENT_RX: %02x:%02x:%02x:%02x:%02x:%02x bcmEventStatus %u appleGasEventStatus %u\n", "handleGAS_FRAGMENT_RX", 543, v19, v8, v9, v10, v18, v11, *(_DWORD *)(a2 + 8), v12);
          unsigned int v14 = (AppleBCMWLANCore **)*((void *)v20 + 5);
        }
      }
      AppleBCMWLANCore::postMessageInfra(*v14, 0xDBu, (void *)(a2 + 28), v6 + 20);
    }
    goto LABEL_12;
  }
  uint64_t v16 = v4;
  if (*(void *)(*((void *)this + 5) + 16) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 16), "[dk] %s@%d:Invalid event status value %u\n", "handleGAS_FRAGMENT_RX", 515, *(_DWORD *)(a2 + 8));
  }
LABEL_13:
  if (*(void *)(*((void *)v20 + 5) + 16) && CCLogStream::shouldLog()) {
    CCLogStream::logNoticeIf(*(CCLogStream **)(*((void *)v20 + 5) + 16), 0x100000uLL, "[dk] %s@%d:Leave %s \n", "handleGAS_FRAGMENT_RX", 554, "handleGAS_FRAGMENT_RX");
  }
  return v16;
}

AppleBCMWLANCore *AppleBCMWLANGASAdapter::handleGAS_COMPLETE(AppleBCMWLANGASAdapter *a1, uint64_t a2)
{
  unsigned int v10 = 0;
  if (*(void *)(*((void *)a1 + 5) + 16) && CCLogStream::shouldLog()) {
    CCLogStream::logNoticeIf(*(CCLogStream **)(*((void *)a1 + 5) + 16), 0x100000uLL, "[dk] %s@%d:Enter %s \n", "handleGAS_COMPLETE", 563, "handleGAS_COMPLETE");
  }
  uint64_t v4 = *((void *)a1 + 5);
  if (!a2)
  {
    if (*(void *)(v4 + 16) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)a1 + 5) + 16), "[dk] %s@%d:No Data attached to Event\n");
    }
    goto LABEL_22;
  }
  if (AppleBCMWLANCore::isShutdownPending(*(AppleBCMWLANCore **)v4))
  {
    if (*(void *)(*((void *)a1 + 5) + 16) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)a1 + 5) + 16), "[dk] %s@%d:Driver in RebootShutdownPending state\n");
    }
LABEL_22:
    int v5 = 0;
    goto LABEL_12;
  }
  int v5 = (AppleBCMWLANCore *)AppleBCMWLANGASAdapter::bcmEventStatusToAppleGasEventStatus(a1, *(_DWORD *)(a2 + 8), &v10);
  uint64_t v6 = *(void *)(*((void *)a1 + 5) + 16);
  if (v5)
  {
    if (v6 && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)a1 + 5) + 16), "[dk] %s@%d:Invalid bcm event status value %u\n", "handleGAS_COMPLETE", 570, *(_DWORD *)(a2 + 8));
    }
  }
  else
  {
    if (v6)
    {
      int shouldLog = CCLogStream::shouldLog();
      unsigned int v8 = v10;
      if (shouldLog) {
        CCLogStream::logAlert(*(CCLogStream **)(*((void *)a1 + 5) + 16), "[dk] %s@%d:AppleBCMWLANGASAdapter::handleGAS_COMPLETE: %02x:%02x:%02x:%02x:%02x:%02x bcmEventStatus %u appleGasEventStatus %u\n", "handleGAS_COMPLETE", 573, *(unsigned __int8 *)(a2 + 24), *(unsigned __int8 *)(a2 + 25), *(unsigned __int8 *)(a2 + 26), *(unsigned __int8 *)(a2 + 27), *(unsigned __int8 *)(a2 + 28), *(unsigned __int8 *)(a2 + 29), *(_DWORD *)(a2 + 8), v10);
      }
    }
    else
    {
      unsigned int v8 = v10;
    }
    int v5 = AppleBCMWLANGASAdapter::sendGasCompleteEvent((AppleBCMWLANCore ***)a1, v8);
  }
LABEL_12:
  *(unsigned char *)(*((void *)a1 + 5) + 24) = 0;
  if (*(void *)(*((void *)a1 + 5) + 16) && CCLogStream::shouldLog()) {
    CCLogStream::logNoticeIf(*(CCLogStream **)(*((void *)a1 + 5) + 16), 0x100000uLL, "[dk] %s@%d:Leave %s \n", "handleGAS_COMPLETE", 580, "handleGAS_COMPLETE");
  }
  return v5;
}

uint64_t AppleBCMWLANGASAdapter::isBusy(AppleBCMWLANGASAdapter *this)
{
  return *(unsigned __int8 *)(*((void *)this + 5) + 24);
}

void _GLOBAL__sub_I_AppleBCMWLANGASAdapter_cpp()
{
  kNullRange = 0;
}

AppleBCMWLANBssManager *AppleBCMWLANBssManager::withOptions(AppleBCMWLANBssManager *this, AppleBCMWLANCore *a2)
{
  int v5 = (AppleBCMWLANBssManager *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANBssManagerMetaClass, (OSObject **)&v5)) {
    return 0;
  }
  uint64_t v3 = v5;
  if (v5 && (AppleBCMWLANBssManager::initWithDriver(v5, this) & 1) == 0)
  {
    (*(void (**)(AppleBCMWLANBssManager *))(*(void *)v3 + 16))(v3);
    return 0;
  }
  return v3;
}

uint64_t AppleBCMWLANBssManager::initWithDriver(AppleBCMWLANBssManager *this, AppleBCMWLANCore *a2)
{
  uint64_t result = IOMallocZeroTyped();
  *((void *)this + 6) = result;
  if (result)
  {
    *(void *)(result + 8) = a2;
    if (a2)
    {
      int v5 = (CCLogStream *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 6) + 8) + 1848))(*(void *)(*((void *)this + 6) + 8));
      uint64_t result = IO80211BssManager::initwithOptions(this, v5);
      if (result)
      {
        *(void *)(*((void *)this + 6) + 16) = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a2
                                                                                                  + 1848))(a2);
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t AppleBCMWLANBssManager::free(AppleBCMWLANBssManager *this)
{
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    IOFree(v2, 0x18uLL);
    *((void *)this + 6) = 0;
  }
  return IO80211BssManager::free(this);
}

uint64_t non-virtual thunk to'AppleBCMWLANBssManager::free(AppleBCMWLANBssManager *this)
{
  return AppleBCMWLANBssManager::free((AppleBCMWLANBssManager *)((char *)this - 24));
}

uint64_t AppleBCMWLANBssManager::setCurrentBSS(IO80211BssManager *a1, IO80211BSSBeacon *a2)
{
  char v4 = AppleBCMWLANCore::checkForOWESupport(*(AppleBCMWLANCore **)(*((void *)a1 + 6) + 8));
  IO80211BssManager::setCurrentBSS(a1, a2, v4);
  int v20 = 0;
  uint64_t v19 = 0;
  **((void **)a1 + 6) = a2;
  if (a2)
  {
    if (!IO80211BssManager::getCurrentChannel()) {
      AppleBCMWLANCore::postMessageInfra(*(AppleBCMWLANCore **)(*((void *)a1 + 6) + 8), 0x52u, &v19, 0xCuLL);
    }
    int v5 = &kSliceChannelSwitchDwellHistConfig;
    if ((AppleBCMWLANBssManager::setCurrentBSS(AppleBCMWLANBSSBeacon *)::logCC & 1) == 0)
    {
      unsigned __int16 v6 = (*(uint64_t (**)(IO80211BSSBeacon *))(*(void *)a2 + 264))(a2);
      uint64_t ChanSpecHandler = AppleBCMWLANCore::getChanSpecHandler(*(AppleBCMWLANCore **)(*((void *)a1 + 6) + 8));
      unsigned int v8 = v6;
      int BCMChannelSpec = AppleBCMWLANChanSpec::getBCMChannelSpec(ChanSpecHandler, v6);
      if (v6 >= 0xC000u)
      {
        int v10 = BCMChannelSpec;
        int v11 = (int **)AppleBCMWLANCore::getChanSpecHandler(*(AppleBCMWLANCore **)(*((void *)a1 + 6) + 8));
        if ((AppleBCMWLANChanSpec::isValid5GChanSpec(v11, v10) & 1) == 0)
        {
          uint64_t v12 = *((void *)a1 + 6);
          if (*(void *)(v12 + 16))
          {
            int shouldLog = CCLogStream::shouldLog();
            uint64_t v12 = *((void *)a1 + 6);
            if (shouldLog)
            {
              uint64_t v16 = *(CCLogStream **)(v12 + 16);
              int PrimaryChannel = ChanSpecGetPrimaryChannel();
              unsigned __int16 v17 = v16;
              int v5 = (unsigned char *)&kSliceChannelSwitchDwellHistConfig;
              CCLogStream::logAlert(v17, "[dk] %s@%d:invalid 5G channel spec %x appleChanSpec (%d, %d, %d, %d)\n", "setCurrentBSS", 117, v10, PrimaryChannel, (v8 >> 8) & 7, (v8 >> 11) & 7, 3);
              uint64_t v12 = *((void *)a1 + 6);
            }
          }
          if (AppleBCMWLANCore::getFaultReporter(*(AppleBCMWLANCore **)(v12 + 8)))
          {
            FaultReporter = (CCFaultReporter *)AppleBCMWLANCore::getFaultReporter(*(AppleBCMWLANCore **)(*((void *)a1 + 6) + 8));
            CCFaultReporter::reportFault(FaultReporter, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANBssManager.cpp", 0x77u, "setCurrentBSS", 0, -469793469, 0);
          }
          v5[1496] = 1;
        }
      }
    }
  }
  else
  {
    AppleBCMWLANCore::postMessageInfra(*(AppleBCMWLANCore **)(*((void *)a1 + 6) + 8), 0x52u, &v19, 0xCuLL);
  }
  return AppleBCMWLANCore::setConcurrencyState(*(void **)(*((void *)a1 + 6) + 8), 1, a2 != 0);
}

uint64_t AppleBCMWLANBssManager::getCurrentBSS(AppleBCMWLANBssManager *this)
{
  return **((void **)this + 6);
}

void _GLOBAL__sub_I_AppleBCMWLANBssManager_cpp()
{
  kNullRange = 0;
}

void _GLOBAL__sub_I_AppleBCMWLANBonjourOffload_cpp()
{
  kNullRange = 0;
}

uint64_t AppleBCMWLANIOReportingCore::getIndexForProcessName(AppleBCMWLANIOReportingCore *this, OSString *a2)
{
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x2000000000;
  uint64_t v21 = 0;
  uint64_t v14 = 0;
  unsigned __int16 v15 = &v14;
  uint64_t v16 = 0x2000000000;
  char v17 = 0;
  uint64_t v3 = *(void *)(*((void *)this + 7) + 24);
  v13[0] = 0;
  v13[1] = v13;
  void v13[2] = 0x2000000000;
  v13[3] = 0;
  if (a2 && v3)
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    void v12[2] = ___ZN27AppleBCMWLANIOReportingCore22getIndexForProcessNameEP8OSString_block_invoke;
    v12[3] = &__block_descriptor_tmp_0;
    v12[4] = v13;
    v12[5] = &v14;
    v12[6] = &v18;
    v12[7] = a2;
    (*(void (**)(uint64_t, void *))(*(void *)v3 + 56))(v3, v12);
    if (!*((unsigned char *)v15 + 24))
    {
      if (AppleBCMWLANIOReporting::getLogger(this))
      {
        AppleBCMWLANIOReporting::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
          CStringNoCopy = OSString::getCStringNoCopy(a2);
          CCLogStream::logAlert(Logger, "[dk] %s@%d:Adding new process to IOReporting caller list: %s\n", "getIndexForProcessName", 207, CStringNoCopy);
        }
      }
      if (!OSArray::setObject(*(OSArray **)(*((void *)this + 7) + 24), a2))
      {
        if (AppleBCMWLANIOReporting::getLogger(this))
        {
          AppleBCMWLANIOReporting::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            int v5 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
            unsigned __int16 v6 = OSString::getCStringNoCopy(a2);
            CCLogStream::logAlert(v5, "[dk] %s@%d:Failed to add new processName %s\n", "getIndexForProcessName", 208, v6);
          }
        }
      }
    }
  }
  else if (AppleBCMWLANIOReporting::getLogger(this))
  {
    AppleBCMWLANIOReporting::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      int v9 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
      CCLogStream::logEmergency(v9, "[dk] %s@%d:Failed to create iter\n", "getIndexForProcessName", 184);
    }
  }
  uint64_t v7 = v19[3];
  _Block_object_dispose(v13, 8);
  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v18, 8);
  return v7;
}

uint64_t ___ZN27AppleBCMWLANIOReportingCore22getIndexForProcessNameEP8OSString_block_invoke(uint64_t a1, OSMetaClassBase *anObject)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = OSMetaClassBase::safeMetaCast(anObject, gOSStringMetaClass);
  uint64_t v3 = *(const OSString **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (!v3) {
    return 0;
  }
  if (OSString::isEqualTo(*(const OSString **)(a1 + 56), v3))
  {
    uint64_t result = 0;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  else
  {
    ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    return 1;
  }
  return result;
}

void __copy_helper_block_8_32r40r48r(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 32), *(const void **)(a2 + 32), 8);
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 8);
  char v4 = *(const void **)(a2 + 48);
  _Block_object_assign((void *)(a1 + 48), v4, 8);
}

void __destroy_helper_block_8_32r40r48r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 48), 8);
  _Block_object_dispose(*(const void **)(a1 + 40), 8);
  uint64_t v2 = *(const void **)(a1 + 32);
  _Block_object_dispose(v2, 8);
}

uint64_t AppleBCMWLANIOReportingCore::accountingForUpdateReport(AppleBCMWLANIOReportingCore *this, int a2, unint64_t a3)
{
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)((char *)v42 + 15) = v5;
  long long v41 = v5;
  v42[0] = v5;
  long long v39 = v5;
  long long v40 = v5;
  long long v37 = v5;
  long long v38 = v5;
  long long v35 = v5;
  long long v36 = v5;
  long long v33 = v5;
  long long v34 = v5;
  long long v31 = v5;
  long long v32 = v5;
  long long v29 = v5;
  long long v30 = v5;
  *(_OWORD *)cString = v5;
  if (IO80211ThreadProcessInfo::getProcessName((IO80211ThreadProcessInfo *)cString, (char *)0xFF, a3)) {
    IO80211Controller::getProcessName(*(IO80211Controller **)(*((void *)this + 7) + 208), cString, 0xFFuLL);
  }
  unsigned __int16 v6 = OSString::withCString(cString);
  if (v6)
  {
    uint64_t v7 = v6;
    unsigned int v8 = *(IOSimpleReporter **)(*((void *)this + 7) + 8);
    uint64_t IndexForProcessName = AppleBCMWLANIOReportingCore::getIndexForProcessName(this, v6);
    if (IOSimpleReporter::incrementValue(v8, IndexForProcessName + 0x5A5A632020202020, 1))
    {
      int v10 = *(IOReporter **)(*((void *)this + 7) + 8);
      unint64_t v11 = AppleBCMWLANIOReportingCore::getIndexForProcessName(this, v7) + 0x5A5A632020202020;
      CStringNoCopy = OSString::getCStringNoCopy(v7);
      IOReporter::addChannel(v10, v11, CStringNoCopy);
      int v13 = *(IOSimpleReporter **)(*((void *)this + 7) + 8);
      uint64_t v14 = AppleBCMWLANIOReportingCore::getIndexForProcessName(this, v7);
      if (IOSimpleReporter::incrementValue(v13, v14 + 0x5A5A632020202020, 1))
      {
        if (AppleBCMWLANIOReporting::getLogger(this))
        {
          AppleBCMWLANIOReporting::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
            uint64_t v27 = OSString::getCStringNoCopy(v7);
            CCLogStream::logAlert(Logger, "[dk] %s@%d:Failed to add kUpdateReportReport for %s\n", "accountingForUpdateReport", 270, v27);
          }
        }
      }
      if (a2) {
        unint64_t v15 = 0x5A5A662020202020;
      }
      else {
        unint64_t v15 = 0x5A5A732020202020;
      }
      IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8), v15, 1);
      uint64_t v16 = (void (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getRemoveReporterCallback(this);
      uint64_t Target = AppleBCMWLANIOReporting::getTarget(this);
      uint64_t CurrentBSS = AppleBCMWLANBssManager::getCurrentBSS(this);
      v16(Target, CurrentBSS, 0, "IOReporter API", "UpdateReport Calls");
      AddReporterCallback = (void (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(this);
      uint64_t v20 = AppleBCMWLANIOReporting::getTarget(this);
      uint64_t v21 = AppleBCMWLANBssManager::getCurrentBSS(this);
      AddReporterCallback(v20, v21, *(void *)(*((void *)this + 7) + 8), "IOReporter API", "UpdateReport Calls");
    }
    else
    {
      if (a2) {
        unint64_t v24 = 0x5A5A662020202020;
      }
      else {
        unint64_t v24 = 0x5A5A732020202020;
      }
      IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8), v24, 1);
    }
    ((void (*)(OSString *))v7->release)(v7);
    return 0;
  }
  else
  {
    uint64_t v22 = 3758097084;
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v23 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logAlert(v23, "[dk] %s@%d:Failed to create processName\n", "accountingForUpdateReport", 262);
      }
    }
  }
  return v22;
}

uint64_t AppleBCMWLANIOReportingCore::accountingForConfigureReport(AppleBCMWLANIOReportingCore *this, int a2, unint64_t a3)
{
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)((char *)v42 + 15) = v5;
  long long v41 = v5;
  v42[0] = v5;
  long long v39 = v5;
  long long v40 = v5;
  long long v37 = v5;
  long long v38 = v5;
  long long v35 = v5;
  long long v36 = v5;
  long long v33 = v5;
  long long v34 = v5;
  long long v31 = v5;
  long long v32 = v5;
  long long v29 = v5;
  long long v30 = v5;
  *(_OWORD *)cString = v5;
  if (IO80211ThreadProcessInfo::getProcessName((IO80211ThreadProcessInfo *)cString, (char *)0xFF, a3)) {
    IO80211Controller::getProcessName(*(IO80211Controller **)(*((void *)this + 7) + 208), cString, 0xFFuLL);
  }
  unsigned __int16 v6 = OSString::withCString(cString);
  if (v6)
  {
    uint64_t v7 = v6;
    unsigned int v8 = (IOSimpleReporter *)**((void **)this + 7);
    uint64_t IndexForProcessName = AppleBCMWLANIOReportingCore::getIndexForProcessName(this, v6);
    if (IOSimpleReporter::incrementValue(v8, IndexForProcessName + 0x5A46632020202020, 1))
    {
      int v10 = (IOReporter *)**((void **)this + 7);
      unint64_t v11 = AppleBCMWLANIOReportingCore::getIndexForProcessName(this, v7) + 0x5A46632020202020;
      CStringNoCopy = OSString::getCStringNoCopy(v7);
      IOReporter::addChannel(v10, v11, CStringNoCopy);
      int v13 = (IOSimpleReporter *)**((void **)this + 7);
      uint64_t v14 = AppleBCMWLANIOReportingCore::getIndexForProcessName(this, v7);
      if (IOSimpleReporter::incrementValue(v13, v14 + 0x5A46632020202020, 1))
      {
        if (AppleBCMWLANIOReporting::getLogger(this))
        {
          AppleBCMWLANIOReporting::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
            uint64_t v27 = OSString::getCStringNoCopy(v7);
            CCLogStream::logAlert(Logger, "[dk] %s@%d:Failed to add kConfigureReportReport for %s\n", "accountingForConfigureReport", 313, v27);
          }
        }
      }
      if (a2) {
        unint64_t v15 = 0x5A46662020202020;
      }
      else {
        unint64_t v15 = 0x5A46732020202020;
      }
      IOSimpleReporter::incrementValue(**((IOSimpleReporter ***)this + 7), v15, 1);
      uint64_t v16 = (void (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getRemoveReporterCallback(this);
      uint64_t Target = AppleBCMWLANIOReporting::getTarget(this);
      uint64_t CurrentBSS = AppleBCMWLANBssManager::getCurrentBSS(this);
      v16(Target, CurrentBSS, 0, "IOReporter API", "ConfigureReport Calls");
      AddReporterCallback = (void (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(this);
      uint64_t v20 = AppleBCMWLANIOReporting::getTarget(this);
      uint64_t v21 = AppleBCMWLANBssManager::getCurrentBSS(this);
      AddReporterCallback(v20, v21, **((void **)this + 7), "IOReporter API", "ConfigureReport Calls");
    }
    else
    {
      if (a2) {
        unint64_t v24 = 0x5A46662020202020;
      }
      else {
        unint64_t v24 = 0x5A46732020202020;
      }
      IOSimpleReporter::incrementValue(**((IOSimpleReporter ***)this + 7), v24, 1);
    }
    ((void (*)(OSString *))v7->release)(v7);
    return 0;
  }
  else
  {
    uint64_t v22 = 3758097084;
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v23 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logAlert(v23, "[dk] %s@%d:Failed to create processName\n", "accountingForConfigureReport", 305);
      }
    }
  }
  return v22;
}

uint64_t AppleBCMWLANIOReportingCore::incrementStaleConfigurationDetected(AppleBCMWLANIOReportingCore *this, uint64_t a2, unint64_t a3)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)((char *)v41 + 15) = v4;
  long long v40 = v4;
  v41[0] = v4;
  long long v38 = v4;
  long long v39 = v4;
  long long v36 = v4;
  long long v37 = v4;
  long long v34 = v4;
  long long v35 = v4;
  long long v32 = v4;
  long long v33 = v4;
  long long v30 = v4;
  long long v31 = v4;
  long long v28 = v4;
  long long v29 = v4;
  *(_OWORD *)cString = v4;
  if (IO80211ThreadProcessInfo::getProcessName((IO80211ThreadProcessInfo *)cString, (char *)0xFF, a3)) {
    IO80211Controller::getProcessName(*(IO80211Controller **)(*((void *)this + 7) + 208), cString, 0xFFuLL);
  }
  OSStringPtr v5 = OSString::withCString(cString);
  uint64_t Logger = AppleBCMWLANIOReporting::getLogger(this);
  if (v5)
  {
    if (Logger)
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v22 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CStringNoCopy = OSString::getCStringNoCopy(v5);
        CCLogStream::logInfo(v22, "[dk] %s@%d:Caller: %s used a stale config\n", "incrementStaleConfigurationDetected", 351, CStringNoCopy);
      }
    }
    uint64_t v7 = *(IOSimpleReporter **)(*((void *)this + 7) + 16);
    uint64_t IndexForProcessName = AppleBCMWLANIOReportingCore::getIndexForProcessName(this, v5);
    if (IOSimpleReporter::incrementValue(v7, IndexForProcessName + 0x5A53732020202020, 1))
    {
      int v9 = *(IOReporter **)(*((void *)this + 7) + 16);
      unint64_t v10 = AppleBCMWLANIOReportingCore::getIndexForProcessName(this, v5) + 0x5A53732020202020;
      unint64_t v11 = OSString::getCStringNoCopy(v5);
      IOReporter::addChannel(v9, v10, v11);
      uint64_t v12 = *(IOSimpleReporter **)(*((void *)this + 7) + 16);
      uint64_t v13 = AppleBCMWLANIOReportingCore::getIndexForProcessName(this, v5);
      if (IOSimpleReporter::incrementValue(v12, v13 + 0x5A53732020202020, 1))
      {
        if (AppleBCMWLANIOReporting::getLogger(this))
        {
          AppleBCMWLANIOReporting::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            unint64_t v25 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
            unsigned int v26 = OSString::getCStringNoCopy(v5);
            CCLogStream::logAlert(v25, "[dk] %s@%d:Failed to add kStaleConfigurationReport for %s\n", "incrementStaleConfigurationDetected", 357, v26);
          }
        }
      }
      uint64_t v14 = (void (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getRemoveReporterCallback(this);
      uint64_t Target = AppleBCMWLANIOReporting::getTarget(this);
      uint64_t CurrentBSS = AppleBCMWLANBssManager::getCurrentBSS(this);
      v14(Target, CurrentBSS, 0, "IOReporter API", "Stale Configuration Detected");
      AddReporterCallback = (void (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(this);
      uint64_t v18 = AppleBCMWLANIOReporting::getTarget(this);
      uint64_t v19 = AppleBCMWLANBssManager::getCurrentBSS(this);
      AddReporterCallback(v18, v19, *(void *)(*((void *)this + 7) + 16), "IOReporter API", "Stale Configuration Detected");
    }
    ((void (*)(OSStringPtr))v5->release)(v5);
    return 0;
  }
  else
  {
    uint64_t v20 = 3758097084;
    if (Logger)
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v24 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logAlert(v24, "[dk] %s@%d:Failed to create processName\n", "incrementStaleConfigurationDetected", 347);
      }
    }
  }
  return v20;
}

uint64_t AppleBCMWLANIOReportingCore::report(AppleBCMWLANBssManager *this, unsigned int *a2)
{
  long long v4 = *(IOSimpleReporter **)(*((void *)this + 7) + 32);
  if (v4)
  {
    uint64_t v5 = 0;
LABEL_8:
    IOSimpleReporter::setValue(v4, 0x5048324444624374uLL, a2[19]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 32), 0x5044324844624374uLL, a2[20]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 32), 0x5020205375624374uLL, a2[21]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 32), 0x5020436F6D704374uLL, a2[22]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 32), 0x505278436F6D4374uLL, a2[23]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 32), 0x505278436F6D4462uLL, a2[24]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 32), 0x505478436F6D4374uLL, a2[25]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 32), 0x505478436F6D4462uLL, a2[26]);
    return v5;
  }
  uint64_t v5 = 3758097084;
  uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(this);
  ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
  *(void *)(*((void *)this + 7) + 32) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v8);
  if (!*(void *)(*((void *)this + 7) + 32)) {
    return 3758097085;
  }
  Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(this);
  OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)this + 7) + 32));
  (*(void (**)(void))(**(void **)(*((void *)this + 7) + 32) + 16))(*(void *)(*((void *)this + 7)
                                                                                                  + 32));
  for (uint64_t i = 0; i != 128; i += 16)
    uint64_t v11 = IOReporter::addChannel(*(IOReporter **)(*((void *)this + 7) + 32), *(void *)((char *)&kWIOReport + i), *(const char **)((char *)&kWIOReport + i + 8));
  uint64_t v12 = v11;
  AddReporterCallback = (void (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(this);
  uint64_t Target = AppleBCMWLANIOReporting::getTarget(this);
  uint64_t v15 = AppleBCMWLANBssManager::getCurrentBSS(this);
  AddReporterCallback(Target, v15, *(void *)(*((void *)this + 7) + 32), "WIO", "IPC Counters");
  long long v4 = *(IOSimpleReporter **)(*((void *)this + 7) + 32);
  if (v4)
  {
    uint64_t v5 = v12;
    goto LABEL_8;
  }
  if (AppleBCMWLANIOReporting::getLogger(this))
  {
    AppleBCMWLANIOReporting::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:Failed to create ivars->fWIOCountersReporter\n", "report", 386);
    }
  }
  return v5;
}

uint64_t AppleBCMWLANIOReportingCore::incrementEventLogCounter(AppleBCMWLANIOReportingCore *this, int a2, uint64_t a3)
{
  *(_DWORD *)__str = -1431655766;
  snprintf(__str, 4uLL, "%03d", a2);
  uint64_t v6 = __str[0];
  uint64_t v7 = __str[1];
  uint64_t v8 = __str[2];
  uint64_t v9 = *((void *)this + 7);
  unint64_t v10 = *(IOSimpleReporter **)(v9 + 40);
  if (!v10)
  {
    ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(*(IO80211Controller **)(v9 + 208));
    *(void *)(*((void *)this + 7) + 40) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v12);
    if (!*(void *)(*((void *)this + 7) + 40)) {
      return 3758097085;
    }
    Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(this);
    OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)this + 7) + 40));
    (*(void (**)(void))(**(void **)(*((void *)this + 7) + 40) + 16))(*(void *)(*((void *)this + 7) + 40));
    unint64_t v10 = *(IOSimpleReporter **)(*((void *)this + 7) + 40);
  }
  uint64_t v14 = (v7 << 8) | (v6 << 16) | v8;
  if (IOSimpleReporter::incrementValue(v10, v14 | 0x454C540000000000, 1))
  {
    memset(v40, 170, 22);
    *(void *)long long v39 = 0xAAAAAAAAAAAAAAAALL;
    if (convertBcomTagToString(a2))
    {
      convertBcomTagToString(a2);
      snprintf(v39, 0x1EuLL, "%s");
    }
    else
    {
      snprintf(v39, 0x1EuLL, "%d");
    }
    uint64_t v15 = IOReporter::addChannel(*(IOReporter **)(*((void *)this + 7) + 40), v14 | 0x454C540000000000, v39);
    if (v15)
    {
      uint64_t v16 = v15;
      if (AppleBCMWLANIOReporting::getLogger(this))
      {
        AppleBCMWLANIOReporting::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
          CCLogStream::logAlert(Logger, "[dk] %s@%d:ivars->fEventLogTagReporter->addChannel failed \n");
        }
      }
      return v16;
    }
    IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 40), v14 | 0x454C540000000000, 1);
    uint64_t v18 = (void (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getRemoveReporterCallback(this);
    uint64_t Target = AppleBCMWLANIOReporting::getTarget(this);
    uint64_t CurrentBSS = AppleBCMWLANBssManager::getCurrentBSS(this);
    v18(Target, CurrentBSS, 0, "Event Log", "Tag counters");
    AddReporterCallback = (void (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(this);
    uint64_t v22 = AppleBCMWLANIOReporting::getTarget(this);
    uint64_t v23 = AppleBCMWLANBssManager::getCurrentBSS(this);
    AddReporterCallback(v22, v23, *(void *)(*((void *)this + 7) + 40), "Event Log", "Tag counters");
  }
  uint64_t v24 = *((void *)this + 7);
  unint64_t v25 = *(IOSimpleReporter **)(v24 + 48);
  if (!v25)
  {
    unsigned int v26 = (IOSimpleReporter *)IO80211Controller::getReporterProvider(*(IO80211Controller **)(v24 + 208));
    *(void *)(*((void *)this + 7) + 48) = IOSimpleReporter::with(v26, (IOService *)0x8010, 0, v27);
    if (*(void *)(*((void *)this + 7) + 48))
    {
      long long v28 = (OSSet *)AppleBCMWLANIOReporting::getReporter(this);
      OSSet::setObject(v28, *(const OSMetaClassBase **)(*((void *)this + 7) + 48));
      (*(void (**)(void))(**(void **)(*((void *)this + 7) + 48) + 16))(*(void *)(*((void *)this + 7) + 48));
      unint64_t v25 = *(IOSimpleReporter **)(*((void *)this + 7) + 48);
      goto LABEL_16;
    }
    return 3758097085;
  }
LABEL_16:
  if (!IOSimpleReporter::incrementValue(v25, v14 | 0x454C544200000000, a3)) {
    return 0;
  }
  memset(v40, 170, 22);
  *(void *)long long v39 = 0xAAAAAAAAAAAAAAAALL;
  if (convertBcomTagToString(a2))
  {
    convertBcomTagToString(a2);
    snprintf(v39, 0x1EuLL, "%s");
  }
  else
  {
    snprintf(v39, 0x1EuLL, "%d");
  }
  uint64_t v29 = IOReporter::addChannel(*(IOReporter **)(*((void *)this + 7) + 48), v14 | 0x454C544200000000, v39);
  if (v29)
  {
    uint64_t v16 = v29;
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        long long v30 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logAlert(v30, "[dk] %s@%d:ivars->fEventLogTagBytesReporter->addChannel failed \n");
      }
    }
  }
  else
  {
    uint64_t v16 = IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 48), v14 | 0x454C544200000000, a3);
    long long v31 = (void (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getRemoveReporterCallback(this);
    uint64_t v32 = AppleBCMWLANIOReporting::getTarget(this);
    uint64_t v33 = AppleBCMWLANBssManager::getCurrentBSS(this);
    v31(v32, v33, 0, "Event Log", "Tag Received Bytes");
    long long v34 = (void (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(this);
    uint64_t v35 = AppleBCMWLANIOReporting::getTarget(this);
    uint64_t v36 = AppleBCMWLANBssManager::getCurrentBSS(this);
    v34(v35, v36, *(void *)(*((void *)this + 7) + 48), "Event Log", "Tag Received Bytes");
  }
  return v16;
}

uint64_t AppleBCMWLANIOReportingCore::reportWakeToInterfaceEnableTime(AppleBCMWLANIOReportingCore *this)
{
  return 3758097090;
}

uint64_t AppleBCMWLANIOReportingCore::getSystemPowerStateCheckPoint(AppleBCMWLANIOReportingCore *this, int a2, int a3, int a4)
{
  switch(a2)
  {
    case 0:
      switch(a4)
      {
        case 0:
          uint64_t result = a3 ^ 1u;
          break;
        case 1:
          BOOL v5 = a3 == 0;
          unsigned int v6 = 6;
          goto LABEL_8;
        case 2:
          BOOL v5 = a3 == 0;
          unsigned int v6 = 2;
          goto LABEL_8;
        case 3:
          BOOL v5 = a3 == 0;
          unsigned int v6 = 4;
          goto LABEL_8;
        default:
          goto LABEL_4;
      }
      return result;
    case 1:
      BOOL v5 = a3 == 0;
      unsigned int v6 = 12;
      goto LABEL_8;
    case 2:
      BOOL v5 = a3 == 0;
      unsigned int v6 = 10;
      goto LABEL_8;
    case 3:
      BOOL v5 = a3 == 0;
      unsigned int v6 = 8;
LABEL_8:
      if (v5) {
        uint64_t result = v6 + 1;
      }
      else {
        uint64_t result = v6;
      }
      break;
    default:
LABEL_4:
      uint64_t result = 16;
      break;
  }
  return result;
}

uint64_t AppleBCMWLANIOReportingCore::sendPowerStateTimeToCoreAnalytics(AppleBCMWLANIOReportingCore *this, unsigned int a2, unsigned int a3)
{
  read_random();
  OSStringPtr v6 = OSString::withCString("com.apple.wifi.SystemSleepStates");
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = OSDictionary::withCapacity(1u);
    if (v8)
    {
      if (a2 >= 0x10)
      {
        if (AppleBCMWLANIOReporting::getLogger(this))
        {
          AppleBCMWLANIOReporting::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
            CCLogStream::logAlert(Logger, "[dk] %s@%d:Invalid systemPowerState type =%d\n", "sendPowerStateTimeToCoreAnalytics", 754, a2);
          }
        }
      }
      else
      {
        OSStringPtr v9 = OSString::withCString(off_100381D78[a2]);
        if (v9)
        {
          unint64_t v10 = v9;
          OSNumberPtr v11 = OSNumber::withNumber(a3, 0x20uLL);
          if (v11)
          {
            OSDictionary::setObject(v8, v10, v11);
            if (!IOService::CoreAnalyticsSendEvent(*(IOService **)(*((void *)this + 7) + 208), 0, v7, v8, 0))
            {
              uint64_t v12 = 1;
              goto LABEL_29;
            }
            if (AppleBCMWLANIOReporting::getLogger(this))
            {
              AppleBCMWLANIOReporting::getLogger(this);
              uint64_t v12 = 0;
              if (!CCLogStream::shouldLog()) {
                goto LABEL_29;
              }
              uint64_t v13 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
              CStringNoCopy = OSString::getCStringNoCopy(v7);
              CCLogStream::logEmergency(v13, "[dk] %s@%d:Failed to send CoreAnalyticsSendEvent for event %s", "sendPowerStateTimeToCoreAnalytics", 764, CStringNoCopy);
            }
          }
          else if (AppleBCMWLANIOReporting::getLogger(this))
          {
            AppleBCMWLANIOReporting::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v20 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
              CCLogStream::logAlert(v20, "[dk] %s@%d:Fail to allocate numValue\n", "sendPowerStateTimeToCoreAnalytics", 760);
            }
          }
          uint64_t v12 = 0;
LABEL_29:
          ((void (*)(const OSObject *))v10->release)(v10);
          if (v11) {
            ((void (*)(OSNumberPtr))v11->release)(v11);
          }
          goto LABEL_31;
        }
      }
      if (AppleBCMWLANIOReporting::getLogger(this))
      {
        AppleBCMWLANIOReporting::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v18 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
          CCLogStream::logAlert(v18, "[dk] %s@%d:Fail to allocate keyString\n");
        }
      }
    }
    else if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v15 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logAlert(v15, "[dk] %s@%d:Fail to allocate eventPayload\n");
      }
    }
    uint64_t v12 = 0;
LABEL_31:
    ((void (*)(OSString *))v7->release)(v7);
    if (v8) {
      ((void (*)(OSDictionary *))v8->release)(v8);
    }
    return v12;
  }
  if (AppleBCMWLANIOReporting::getLogger(this))
  {
    AppleBCMWLANIOReporting::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v19 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
      CCLogStream::logAlert(v19, "[dk] %s@%d:Fail to allocate eventName\n", "sendPowerStateTimeToCoreAnalytics", 699);
    }
  }
  return 0;
}

AppleBCMWLANIOReportingCore *AppleBCMWLANIOReportingCore::reportDeltaPowerTimeIfNeeded(AppleBCMWLANIOReportingCore *this, int a2, int a3)
{
  if (!a2 && a3)
  {
    uint64_t v3 = *((void *)this + 7);
    long long v4 = (void *)(v3 + 216);
    BOOL v5 = (void *)(v3 + 240);
    unsigned int v6 = 14;
    return (AppleBCMWLANIOReportingCore *)AppleBCMWLANIOReportingCore::sendPowerStateTimeToCoreAnalytics(this, v6, (*v4 - *v5) / 0xF4240uLL);
  }
  if (a2 == 1 && (a3 & 1) == 0)
  {
    uint64_t v7 = *((void *)this + 7);
    BOOL v5 = (void *)(v7 + 224);
    long long v4 = (void *)(v7 + 232);
    unsigned int v6 = 15;
    return (AppleBCMWLANIOReportingCore *)AppleBCMWLANIOReportingCore::sendPowerStateTimeToCoreAnalytics(this, v6, (*v4 - *v5) / 0xF4240uLL);
  }
  return this;
}

uint64_t AppleBCMWLANIOReportingCore::reportSystemPowerState(AppleBCMWLANIOReportingCore *this, unint64_t *a2, int a3, int a4, int a5)
{
  uint64_t v5 = 3758097090;
  if (a2 <= 3)
  {
    char v7 = a4;
    unsigned int v9 = a2;
    unsigned int v11 = a4 ^ 1;
    mach_continuous_nanoseconds = (AppleBCMWLANIOReportingCore *)AppleBCMWLANUtil::get_mach_continuous_nanoseconds(0, a2);
    *(void *)(*((void *)this + 7) + 16 * v9 + 8 * v11 + 216) = mach_continuous_nanoseconds;
    if (v7) {
      return 0;
    }
    unsigned int v13 = AppleBCMWLANIOReportingCore::getSystemPowerStateCheckPoint(mach_continuous_nanoseconds, v9, a3, a5);
    if (v13 <= 0xF)
    {
      uint64_t v14 = *((void *)this + 7) + 16 * v9;
      AppleBCMWLANIOReportingCore::sendPowerStateTimeToCoreAnalytics(this, v13, (*(void *)(v14 + 224) - *(void *)(v14 + 216)) / 0xF4240uLL);
      AppleBCMWLANIOReportingCore::reportDeltaPowerTimeIfNeeded(this, v9, a3);
      return 0;
    }
  }
  return v5;
}

uint64_t AppleBCMWLANIOReportingCore::reportWakeReason(AppleBCMWLANIOReportingCore *this, unsigned int a2)
{
  uint64_t v2 = 3758097084;
  if (a2 > 0xFF) {
    return v2;
  }
  uint64_t v5 = *((void *)this + 7);
  unsigned int v6 = *(IOSimpleReporter **)(v5 + 104);
  if (!v6)
  {
    ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(*(IO80211Controller **)(v5 + 208));
    *(void *)(*((void *)this + 7) + 104) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v8);
    if (!*(void *)(*((void *)this + 7) + 104)) {
      return 3758097085;
    }
    Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(this);
    OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)this + 7) + 104));
    (*(void (**)(void))(**(void **)(*((void *)this + 7) + 104) + 16))(*(void *)(*((void *)this + 7) + 104));
    unsigned int v6 = *(IOSimpleReporter **)(*((void *)this + 7) + 104);
  }
  if (!IOSimpleReporter::incrementValue(v6, a2 | 0x5769466957616B20, 1)) {
    return 0;
  }
  memset(v20, 170, 22);
  *(void *)__str = 0xAAAAAAAAAAAAAAAALL;
  if (a2 < 0xD8)
  {
    if (convertEventToString(a2, 0, 0))
    {
      convertEventToString(a2, 0, 0);
      goto LABEL_12;
    }
    snprintf(__str, 0x1EuLL, "Event %d");
  }
  else
  {
    if (convertAdditionalEventToString(a2))
    {
      convertAdditionalEventToString(a2);
LABEL_12:
      snprintf(__str, 0x1EuLL, "%s");
      goto LABEL_15;
    }
    snprintf(__str, 0x1EuLL, "Additional Event %d");
  }
LABEL_15:
  uint64_t v10 = IOReporter::addChannel(*(IOReporter **)(*((void *)this + 7) + 104), a2 | 0x5769466957616B20, __str);
  if (v10)
  {
    uint64_t v2 = v10;
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:ivars->fWakeReasonReporter->addChannel failed \n", "reportWakeReason", 817);
      }
    }
  }
  else
  {
    uint64_t v2 = IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 104), a2 | 0x5769466957616B20, 1);
    uint64_t v12 = (void (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getRemoveReporterCallback(this);
    uint64_t Target = AppleBCMWLANIOReporting::getTarget(this);
    uint64_t CurrentBSS = AppleBCMWLANBssManager::getCurrentBSS(this);
    v12(Target, CurrentBSS, 0, "WiFi Wake", "Reasons");
    AddReporterCallback = (void (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(this);
    uint64_t v16 = AppleBCMWLANIOReporting::getTarget(this);
    uint64_t v17 = AppleBCMWLANBssManager::getCurrentBSS(this);
    AddReporterCallback(v16, v17, *(void *)(*((void *)this + 7) + 104), "WiFi Wake", "Reasons");
  }
  return v2;
}

uint64_t AppleBCMWLANIOReportingCore::incrementBackoffStuckDetected(AppleBCMWLANIOReportingCore *this)
{
  uint64_t v2 = *((void *)this + 7);
  uint64_t v3 = *(IOSimpleReporter **)(v2 + 120);
  if (!v3)
  {
    ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(*(IO80211Controller **)(v2 + 208));
    *(void *)(*((void *)this + 7) + 120) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v5);
    if (!*(void *)(*((void *)this + 7) + 120)) {
      return 3758097085;
    }
    Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(this);
    OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)this + 7) + 120));
    (*(void (**)(void))(**(void **)(*((void *)this + 7) + 120) + 16))(*(void *)(*((void *)this + 7) + 120));
    uint64_t v3 = *(IOSimpleReporter **)(*((void *)this + 7) + 120);
  }
  if (!IOSimpleReporter::incrementValue(v3, 0x426B6F666653746BuLL, 1)) {
    return 0;
  }
  uint64_t v7 = IOReporter::addChannel(*(IOReporter **)(*((void *)this + 7) + 120), 0x426B6F666653746BuLL, "Backoff Stuck Detected");
  if (v7)
  {
    uint64_t v8 = v7;
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:ivars->fBackoffStuckValue->addChannel failed \n", "incrementBackoffStuckDetected", 891);
      }
    }
  }
  else
  {
    uint64_t v8 = IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 120), 0x426B6F666653746BuLL, 1);
    uint64_t v10 = (void (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getRemoveReporterCallback(this);
    uint64_t Target = AppleBCMWLANIOReporting::getTarget(this);
    uint64_t CurrentBSS = AppleBCMWLANBssManager::getCurrentBSS(this);
    v10(Target, CurrentBSS, 0, "TX STATUS", "TX Backoff Stuck");
    AddReporterCallback = (void (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(this);
    uint64_t v14 = AppleBCMWLANIOReporting::getTarget(this);
    uint64_t v15 = AppleBCMWLANBssManager::getCurrentBSS(this);
    AddReporterCallback(v14, v15, *(void *)(*((void *)this + 7) + 120), "TX STATUS", "TX Backoff Stuck");
  }
  return v8;
}

uint64_t AppleBCMWLANIOReportingCore::updateScanRoamStats(AppleBCMWLANBssManager *this, uint64_t a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v8 = *(IOSimpleReporter **)(*((void *)this + 7) + 136);
  if (v8)
  {
    uint64_t v9 = 0;
LABEL_8:
    IOSimpleReporter::setValue(v8, 0x535253736E447572uLL, *(void *)a2);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 136), 0x53524E505271574DuLL, a3[2]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 136), 0x53524E5052715753uLL, a3[3]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 136), 0x53524C505271574DuLL, a3[4]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 136), 0x53524C5052715753uLL, a3[5]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 136), 0x535253535271574DuLL, a3[6]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 136), 0x53525353526A574DuLL, a3[7]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 136), 0x535253526D577873uLL, *(unsigned int *)(a2 + 8));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 136), 0x5352534C63577873uLL, *(unsigned int *)(a2 + 12));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 136), 0x5352534853526571uLL, *(unsigned int *)(a2 + 16));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 136), 0x535253485352656AuLL, *(unsigned int *)(a2 + 20));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 136), 0x5352534853436D70uLL, *(unsigned int *)(a2 + 24));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 136), 0x53525348534C6F50uLL, *(unsigned int *)(a2 + 28));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 136), 0x53525348534C6F4CuLL, *(unsigned int *)(a2 + 32));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 136), 0x53525348534C504FuLL, *(unsigned int *)(a2 + 36));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 136), 0x53525353526A4C50uLL, a4[2]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 136), 0x53525353526A4A6EuLL, a4[3]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 136), 0x53525353526A4279uLL, a4[4]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 136), 0x53525353526A4950uLL, a4[5]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 136), 0x53525353526A4C52uLL, a4[6]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 136), 0x53525353526A4C53uLL, a4[7]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 136), 0x53525353526A426BuLL, a4[8]);
    return v9;
  }
  uint64_t v9 = 3758097084;
  uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(this);
  ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
  *(void *)(*((void *)this + 7) + 136) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v12);
  if (!*(void *)(*((void *)this + 7) + 136)) {
    return 3758097085;
  }
  Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(this);
  OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)this + 7) + 136));
  (*(void (**)(void))(**(void **)(*((void *)this + 7) + 136) + 16))(*(void *)(*((void *)this + 7) + 136));
  for (uint64_t i = 0; i != 400; i += 16)
    uint64_t v15 = IOReporter::addChannel(*(IOReporter **)(*((void *)this + 7) + 136), *(void *)((char *)&kPDScanRoamReport + i), *(const char **)((char *)&kPDScanRoamReport + i + 8));
  uint64_t v16 = v15;
  AddReporterCallback = (void (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(this);
  uint64_t Target = AppleBCMWLANIOReporting::getTarget(this);
  uint64_t v19 = AppleBCMWLANBssManager::getCurrentBSS(this);
  AddReporterCallback(Target, v19, *(void *)(*((void *)this + 7) + 136), "SCAN-ROAM", "Scan/Roam Stats");
  uint64_t v8 = *(IOSimpleReporter **)(*((void *)this + 7) + 136);
  if (v8)
  {
    uint64_t v9 = v16;
    goto LABEL_8;
  }
  if (AppleBCMWLANIOReporting::getLogger(this))
  {
    AppleBCMWLANIOReporting::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:Failed to create ivars->fScanRoamStatsReporter\n", "updateScanRoamStats", 916);
    }
  }
  return v9;
}

uint64_t AppleBCMWLANIOReportingCore::updateBeaconOffloadStats(AppleBCMWLANBssManager *this, unsigned int *a2, uint64_t a3)
{
  unsigned int v6 = *(IOSimpleReporter **)(*((void *)this + 7) + 128);
  if (v6)
  {
    uint64_t v7 = 0;
LABEL_8:
    IOSimpleReporter::setValue(v6, 0x424F53736E447572uLL, a3);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 128), 0x424F546F54447572uLL, a2[9] / 0x3E8uLL);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 128), 0x424F527820436E74uLL, a2[5]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 128), 0x424F4D7364436E74uLL, a2[6]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 128), 0x424F456E74436E74uLL, a2[2]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 128), 0x424F52656A436E74uLL, a2[4]);
    return v7;
  }
  uint64_t v7 = 3758097084;
  uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(this);
  ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
  *(void *)(*((void *)this + 7) + 128) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v10);
  if (!*(void *)(*((void *)this + 7) + 128)) {
    return 3758097085;
  }
  Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(this);
  OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)this + 7) + 128));
  (*(void (**)(void))(**(void **)(*((void *)this + 7) + 128) + 16))(*(void *)(*((void *)this + 7) + 128));
  for (uint64_t i = 0; i != 96; i += 16)
    uint64_t v13 = IOReporter::addChannel(*(IOReporter **)(*((void *)this + 7) + 128), *(void *)((char *)&kPrivateDriverBcnOffloadReport + i), *(const char **)((char *)&kPrivateDriverBcnOffloadReport + i + 8));
  uint64_t v14 = v13;
  AddReporterCallback = (void (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(this);
  uint64_t Target = AppleBCMWLANIOReporting::getTarget(this);
  uint64_t v17 = AppleBCMWLANBssManager::getCurrentBSS(this);
  AddReporterCallback(Target, v17, *(void *)(*((void *)this + 7) + 128), "BCN OFFLOAD", "Beacon Offload Stats");
  unsigned int v6 = *(IOSimpleReporter **)(*((void *)this + 7) + 128);
  if (v6)
  {
    uint64_t v7 = v14;
    goto LABEL_8;
  }
  if (AppleBCMWLANIOReporting::getLogger(this))
  {
    AppleBCMWLANIOReporting::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:Failed to create ivars->fBeaconOffloadStatsReporter\n", "updateBeaconOffloadStats", 956);
    }
  }
  return v7;
}

uint64_t AppleBCMWLANIOReportingCore::updateInactivitySleepStats(AppleBCMWLANIOReportingCore *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *((void *)this + 7);
  if (!v5)
  {
    uint64_t v10 = 3758097084;
    if (!AppleBCMWLANIOReporting::getLogger(this)) {
      return v10;
    }
    AppleBCMWLANIOReporting::getLogger(this);
    if (!CCLogStream::shouldLog()) {
      return v10;
    }
    uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
    int v22 = 973;
LABEL_20:
    CCLogStream::logCrit(Logger, "[dk] %s@%d:Failed to allocate AppleBCMWLANIOReportingCore_IVars\n", "updateInactivitySleepStats", v22);
    return v10;
  }
  uint64_t v9 = *(IOSimpleReporter **)(v5 + 144);
  if (v9)
  {
LABEL_8:
    IOSimpleReporter::setValue(v9, 0x4953576966447572uLL, a2);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 144), 0x4953434941447572uLL, a3);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 144), 0x4953434C57447572uLL, a4);
    return 0;
  }
  uint64_t v10 = 3758097084;
  uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(this);
  ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
  *(void *)(*((void *)this + 7) + 144) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v13);
  if (!*(void *)(*((void *)this + 7) + 144)) {
    return 3758097085;
  }
  Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(this);
  OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)this + 7) + 144));
  (*(void (**)(void))(**(void **)(*((void *)this + 7) + 144) + 16))(*(void *)(*((void *)this + 7) + 144));
  for (uint64_t i = 0; i != 48; i += 16)
    IOReporter::addChannel(*(IOReporter **)(*((void *)this + 7) + 144), *(void *)((char *)&kPDInactivitySleepReport + i), *(const char **)((char *)&kPDInactivitySleepReport + i + 8));
  AddReporterCallback = (unsigned int (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(this);
  uint64_t Target = AppleBCMWLANIOReporting::getTarget(this);
  uint64_t v18 = AppleBCMWLANBssManager::getCurrentBSS(this);
  if (AddReporterCallback(Target, v18, *(void *)(*((void *)this + 7) + 144), "INACTIVITY-SLEEP", "Inactivity/Sleep Stats"))
  {
    if (!AppleBCMWLANIOReporting::getLogger(this)) {
      return v10;
    }
    AppleBCMWLANIOReporting::getLogger(this);
    if (!CCLogStream::shouldLog()) {
      return v10;
    }
    uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
    int v22 = 977;
    goto LABEL_20;
  }
  uint64_t v9 = *(IOSimpleReporter **)(*((void *)this + 7) + 144);
  if (v9) {
    goto LABEL_8;
  }
  if (AppleBCMWLANIOReporting::getLogger(this))
  {
    AppleBCMWLANIOReporting::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v20 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
      CCLogStream::logAlert(v20, "[dk] %s@%d:Failed to create ivars->fInactivityAndSleepStatsReporter\n", "updateInactivitySleepStats", 980);
    }
  }
  return v10;
}

uint64_t AppleBCMWLANIOReportingCore::reportSCTxBlankingStats(AppleBCMWLANBssManager *this, unsigned int *a2)
{
  long long v4 = *(IOSimpleReporter **)(*((void *)this + 7) + 152);
  if (v4)
  {
    uint64_t v5 = 0;
LABEL_8:
    IOSimpleReporter::setValue(v4, 0x53434E4243436E74uLL, *((void *)a2 + 16));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 152), 0x5343426C55624231uLL, *a2);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 152), 0x5343424341634231uLL, *((void *)a2 + 1));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 152), 0x534342434D634231uLL, *((void *)a2 + 2));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 152), 0x5343424354434231uLL, *((void *)a2 + 3));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 152), 0x5343426C55624232uLL, a2[8]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 152), 0x5343424341634232uLL, *((void *)a2 + 5));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 152), 0x534342434D634232uLL, *((void *)a2 + 6));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 152), 0x5343424354434232uLL, *((void *)a2 + 7));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 152), 0x5343426C55624233uLL, a2[16]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 152), 0x5343424341634233uLL, *((void *)a2 + 9));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 152), 0x534342434D634233uLL, *((void *)a2 + 10));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 152), 0x5343424354434233uLL, *((void *)a2 + 11));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 152), 0x5343426C55624234uLL, a2[24]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 152), 0x5343424341634234uLL, *((void *)a2 + 13));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 152), 0x534342434D634234uLL, *((void *)a2 + 14));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 152), 0x5343424354434234uLL, *((void *)a2 + 15));
    return v5;
  }
  uint64_t v5 = 3758097084;
  uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(this);
  ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
  *(void *)(*((void *)this + 7) + 152) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v8);
  if (!*(void *)(*((void *)this + 7) + 152)) {
    return 3758097085;
  }
  Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(this);
  OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)this + 7) + 152));
  (*(void (**)(void))(**(void **)(*((void *)this + 7) + 152) + 16))(*(void *)(*((void *)this + 7) + 152));
  for (uint64_t i = 0; i != 272; i += 16)
    uint64_t v11 = IOReporter::addChannel(*(IOReporter **)(*((void *)this + 7) + 152), *(void *)((char *)&kPrivateDriverSCTxBlkReport + i), *(const char **)((char *)&kPrivateDriverSCTxBlkReport + i + 8));
  uint64_t v12 = v11;
  AddReporterCallback = (void (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(this);
  uint64_t Target = AppleBCMWLANIOReporting::getTarget(this);
  uint64_t v15 = AppleBCMWLANBssManager::getCurrentBSS(this);
  AddReporterCallback(Target, v15, *(void *)(*((void *)this + 7) + 152), "LPSC Tx Blanking", "Scan Core Tx Blanking Stats");
  long long v4 = *(IOSimpleReporter **)(*((void *)this + 7) + 152);
  if (v4)
  {
    uint64_t v5 = v12;
    goto LABEL_8;
  }
  if (AppleBCMWLANIOReporting::getLogger(this))
  {
    AppleBCMWLANIOReporting::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:Failed to create ivars->fSCTxBlankingStatsReporter\n", "reportSCTxBlankingStats", 1000);
    }
  }
  return v5;
}

uint64_t AppleBCMWLANIOReportingCore::reportTxDC(AppleBCMWLANIOReporting *this, unsigned __int8 *a2)
{
  uint64_t v3 = *((void *)this + 7);
  if (!v3)
  {
    uint64_t v6 = 3758097084;
    if (!AppleBCMWLANIOReporting::getLogger(this)) {
      return v6;
    }
    AppleBCMWLANIOReporting::getLogger(this);
    if (!CCLogStream::shouldLog()) {
      return v6;
    }
    uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
    int v18 = 1030;
LABEL_20:
    CCLogStream::logCrit(Logger, "[dk] %s@%d:Failed to allocate AppleBCMWLANIOReportingCore_IVars\n", "reportTxDC", v18);
    return v6;
  }
  uint64_t v5 = *(IOSimpleReporter **)(v3 + 160);
  if (v5)
  {
LABEL_8:
    IOSimpleReporter::setValue(v5, 0x5478444335474130uLL, *a2);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 160), 0x5478444335474131uLL, a2[1]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 160), 0x5478444335474132uLL, a2[2]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 160), 0x5478444335474133uLL, a2[3]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 160), 0x5478444332474130uLL, a2[4]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 160), 0x5478444332474131uLL, a2[5]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 160), 0x5478444332474132uLL, a2[6]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 160), 0x5478444332474133uLL, a2[7]);
    return 0;
  }
  uint64_t v6 = 3758097084;
  uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(this);
  ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
  *(void *)(*((void *)this + 7) + 160) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v9);
  if (!*(void *)(*((void *)this + 7) + 160)) {
    return 3758097085;
  }
  Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(this);
  OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)this + 7) + 160));
  (*(void (**)(void))(**(void **)(*((void *)this + 7) + 160) + 16))(*(void *)(*((void *)this + 7) + 160));
  for (uint64_t i = 0; i != 128; i += 16)
    IOReporter::addChannel(*(IOReporter **)(*((void *)this + 7) + 160), *(void *)((char *)&kPrivateDriverTxDutyCycleReport + i), *(const char **)((char *)&kPrivateDriverTxDutyCycleReport + i + 8));
  AddReporterCallback = (unsigned int (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(this);
  uint64_t Target = AppleBCMWLANIOReporting::getTarget(this);
  uint64_t v14 = AppleBCMWLANBssManager::getCurrentBSS(this);
  if (AddReporterCallback(Target, v14, *(void *)(*((void *)this + 7) + 160), "TxDC", "Tx Duty Cycle Stats"))
  {
    if (!AppleBCMWLANIOReporting::getLogger(this)) {
      return v6;
    }
    AppleBCMWLANIOReporting::getLogger(this);
    if (!CCLogStream::shouldLog()) {
      return v6;
    }
    uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
    int v18 = 1034;
    goto LABEL_20;
  }
  uint64_t v5 = *(IOSimpleReporter **)(*((void *)this + 7) + 160);
  if (v5) {
    goto LABEL_8;
  }
  if (AppleBCMWLANIOReporting::getLogger(this))
  {
    AppleBCMWLANIOReporting::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v16 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
      CCLogStream::logAlert(v16, "[dk] %s@%d:Failed to create ivars->fTxDCReporter\n", "reportTxDC", 1037);
    }
  }
  return v6;
}

uint64_t AppleBCMWLANIOReportingCore::reportTxDCSlice0Ant0(AppleBCMWLANIOReporting *this, uint64_t *a2)
{
  uint64_t v3 = *((void *)this + 7);
  if (v3)
  {
    uint64_t v5 = *(IOSimpleReporter **)(v3 + 168);
    if (v5)
    {
      uint64_t v6 = 0;
LABEL_9:
      IOSimpleReporter::setValue(v5, 0x4453304130203130uLL, a2[1]);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 168), 0x4453304130203230uLL, a2[2]);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 168), 0x4453304130203330uLL, a2[3]);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 168), 0x4453304130203430uLL, a2[4]);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 168), 0x4453304130203530uLL, a2[5]);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 168), 0x4453304130203630uLL, a2[6]);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 168), 0x4453304130203730uLL, a2[7]);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 168), 0x4453304130203830uLL, a2[8]);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 168), 0x4453304130203930uLL, a2[9]);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 168), 0x4453304130313030uLL, a2[10]);
      return v6;
    }
    uint64_t v6 = 3758097084;
    uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(this);
    ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
    *(void *)(*((void *)this + 7) + 168) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v9);
    if (!*(void *)(*((void *)this + 7) + 168)) {
      return 3758097085;
    }
    Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(this);
    OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)this + 7) + 168));
    (*(void (**)(void))(**(void **)(*((void *)this + 7) + 168) + 16))(*(void *)(*((void *)this + 7) + 168));
    for (uint64_t i = 0; i != 160; i += 16)
      uint64_t v12 = IOReporter::addChannel(*(IOReporter **)(*((void *)this + 7) + 168), *(void *)((char *)&kPrivateDriverTxDutyCycleSlice0Ant0Report + i), *(const char **)((char *)&kPrivateDriverTxDutyCycleSlice0Ant0Report + i + 8));
    uint64_t v13 = v12;
    AddReporterCallback = (void (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(this);
    uint64_t Target = AppleBCMWLANIOReporting::getTarget(this);
    uint64_t v16 = AppleBCMWLANBssManager::getCurrentBSS(this);
    AddReporterCallback(Target, v16, *(void *)(*((void *)this + 7) + 168), "TxDC Slice0 Ant0", "Tx Duty Cycle Stats Slice0 Ant0");
    uint64_t v5 = *(IOSimpleReporter **)(*((void *)this + 7) + 168);
    if (v5)
    {
      uint64_t v6 = v13;
      goto LABEL_9;
    }
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:Failed to create ivars->fTxDCSlice0Ant0Reporter\n", "reportTxDCSlice0Ant0", 1064);
      }
    }
  }
  else
  {
    uint64_t v6 = 3758097084;
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v19 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logCrit(v19, "[dk] %s@%d:Failed to allocate AppleBCMWLANIOReportingCore_IVars\n", "reportTxDCSlice0Ant0", 1058);
      }
    }
  }
  return v6;
}

uint64_t AppleBCMWLANIOReportingCore::reportTxDCSlice1Ant0(AppleBCMWLANIOReporting *this, uint64_t *a2)
{
  uint64_t v3 = *((void *)this + 7);
  if (v3)
  {
    uint64_t v5 = *(IOSimpleReporter **)(v3 + 176);
    if (v5)
    {
      uint64_t v6 = 0;
LABEL_9:
      IOSimpleReporter::setValue(v5, 0x4453314130203130uLL, a2[1]);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 176), 0x4453314130203230uLL, a2[2]);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 176), 0x4453314130203330uLL, a2[3]);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 176), 0x4453314130203430uLL, a2[4]);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 176), 0x4453314130203530uLL, a2[5]);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 176), 0x4453314130203630uLL, a2[6]);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 176), 0x4453314130203730uLL, a2[7]);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 176), 0x4453314130203830uLL, a2[8]);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 176), 0x4453314130203930uLL, a2[9]);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 176), 0x4453314130313030uLL, a2[10]);
      return v6;
    }
    uint64_t v6 = 3758097084;
    uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(this);
    ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
    *(void *)(*((void *)this + 7) + 176) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v9);
    if (!*(void *)(*((void *)this + 7) + 176)) {
      return 3758097085;
    }
    Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(this);
    OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)this + 7) + 176));
    (*(void (**)(void))(**(void **)(*((void *)this + 7) + 176) + 16))(*(void *)(*((void *)this + 7) + 176));
    for (uint64_t i = 0; i != 160; i += 16)
      uint64_t v12 = IOReporter::addChannel(*(IOReporter **)(*((void *)this + 7) + 176), *(void *)((char *)&kPrivateDriverTxDutyCycleSlice1Ant0Report + i), *(const char **)((char *)&kPrivateDriverTxDutyCycleSlice1Ant0Report + i + 8));
    uint64_t v13 = v12;
    AddReporterCallback = (void (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(this);
    uint64_t Target = AppleBCMWLANIOReporting::getTarget(this);
    uint64_t v16 = AppleBCMWLANBssManager::getCurrentBSS(this);
    AddReporterCallback(Target, v16, *(void *)(*((void *)this + 7) + 176), "TxDC Slice1 Ant0", "Tx Duty Cycle Stats Slice1 Ant0");
    uint64_t v5 = *(IOSimpleReporter **)(*((void *)this + 7) + 176);
    if (v5)
    {
      uint64_t v6 = v13;
      goto LABEL_9;
    }
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:Failed to create ivars->fTxDCSlice1Ant0Reporter\n", "reportTxDCSlice1Ant0", 1093);
      }
    }
  }
  else
  {
    uint64_t v6 = 3758097084;
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v19 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logCrit(v19, "[dk] %s@%d:Failed to allocate AppleBCMWLANIOReportingCore_IVars\n", "reportTxDCSlice1Ant0", 1087);
      }
    }
  }
  return v6;
}

uint64_t AppleBCMWLANIOReportingCore::reportEventLogSet(AppleBCMWLANIOReportingCore *this, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *((void *)this + 7);
  uint64_t v7 = *(IOSimpleReporter **)(v6 + 56);
  if (!v7)
  {
    ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(*(IO80211Controller **)(v6 + 208));
    *(void *)(*((void *)this + 7) + 56) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v9);
    if (!*(void *)(*((void *)this + 7) + 56)) {
      return 3758097085;
    }
    Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(this);
    OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)this + 7) + 56));
    (*(void (**)(void))(**(void **)(*((void *)this + 7) + 56) + 16))(*(void *)(*((void *)this + 7) + 56));
    uint64_t v7 = *(IOSimpleReporter **)(*((void *)this + 7) + 56);
  }
  unint64_t v11 = (a2 | 0x454C530000000100) - 256;
  if (IOSimpleReporter::incrementValue(v7, v11, 1))
  {
    memset(v31, 170, 22);
    *(void *)__str = 0xAAAAAAAAAAAAAAAALL;
    if (convertBcomSetToString(a2))
    {
      convertBcomSetToString(a2);
      snprintf(__str, 0x1EuLL, "%s");
    }
    else
    {
      snprintf(__str, 0x1EuLL, "%d");
    }
    uint64_t v13 = IOReporter::addChannel(*(IOReporter **)(*((void *)this + 7) + 56), v11, __str);
    if (v13)
    {
      uint64_t v12 = v13;
      if (AppleBCMWLANIOReporting::getLogger(this))
      {
        AppleBCMWLANIOReporting::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
          CCLogStream::logAlert(Logger, "[dk] %s@%d:ivars->fEventLogSetReporter->addChannel for %s failed \n", "reportEventLogSet", 1665, __str);
        }
      }
      return v12;
    }
    uint64_t v12 = IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 56), v11, 1);
    uint64_t v15 = (void (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getRemoveReporterCallback(this);
    uint64_t Target = AppleBCMWLANIOReporting::getTarget(this);
    uint64_t CurrentBSS = AppleBCMWLANBssManager::getCurrentBSS(this);
    v15(Target, CurrentBSS, 0, "Event Log", "Set counters");
    AddReporterCallback = (void (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(this);
    uint64_t v19 = AppleBCMWLANIOReporting::getTarget(this);
    uint64_t v20 = AppleBCMWLANBssManager::getCurrentBSS(this);
    AddReporterCallback(v19, v20, *(void *)(*((void *)this + 7) + 56), "Event Log", "Set counters");
    if (!a3) {
      return v12;
    }
  }
  else
  {
    uint64_t v12 = 0;
    if (!a3) {
      return v12;
    }
  }
  if (!IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 56), a2 | 0x454C530000000100, a3))return 0; {
  memset(v31, 170, 22);
  }
  *(void *)__str = 0xAAAAAAAAAAAAAAAALL;
  if (convertBcomSetToString(a2))
  {
    convertBcomSetToString(a2);
    snprintf(__str, 0x1EuLL, "Dropped %s");
  }
  else
  {
    snprintf(__str, 0x1EuLL, "Dropped %d");
  }
  uint64_t v21 = IOReporter::addChannel(*(IOReporter **)(*((void *)this + 7) + 56), a2 | 0x454C530000000100, __str);
  if (v21)
  {
    uint64_t v12 = v21;
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        int v22 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logAlert(v22, "[dk] %s@%d:ivars->fEventLogSetReporter->addChannel for %s failed \n", "reportEventLogSet", 1690, __str);
      }
    }
  }
  else
  {
    uint64_t v12 = IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 56), a2 | 0x454C530000000100, a3);
    uint64_t v23 = (void (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getRemoveReporterCallback(this);
    uint64_t v24 = AppleBCMWLANIOReporting::getTarget(this);
    uint64_t v25 = AppleBCMWLANBssManager::getCurrentBSS(this);
    v23(v24, v25, 0, "Event Log", "Set counters");
    unsigned int v26 = (void (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(this);
    uint64_t v27 = AppleBCMWLANIOReporting::getTarget(this);
    uint64_t v28 = AppleBCMWLANBssManager::getCurrentBSS(this);
    v26(v27, v28, *(void *)(*((void *)this + 7) + 56), "Event Log", "Set counters");
  }
  return v12;
}

uint64_t AppleBCMWLANIOReportingCore::reportEventLogSetSize(AppleBCMWLANIOReportingCore *this, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *((void *)this + 7);
  uint64_t v7 = *(IOSimpleReporter **)(v6 + 64);
  if (!v7)
  {
    ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(*(IO80211Controller **)(v6 + 208));
    *(void *)(*((void *)this + 7) + 64) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v9);
    if (!*(void *)(*((void *)this + 7) + 64)) {
      return 3758097085;
    }
    Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(this);
    OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)this + 7) + 64));
    (*(void (**)(void))(**(void **)(*((void *)this + 7) + 64) + 16))(*(void *)(*((void *)this + 7) + 64));
    uint64_t v7 = *(IOSimpleReporter **)(*((void *)this + 7) + 64);
  }
  if (!IOSimpleReporter::incrementValue(v7, a2 | 0x454C534200000000, a3)) {
    return 0;
  }
  memset(v22, 170, 22);
  *(void *)__str = 0xAAAAAAAAAAAAAAAALL;
  if (convertBcomSetToString(a2))
  {
    convertBcomSetToString(a2);
    snprintf(__str, 0x1EuLL, "%s");
  }
  else
  {
    snprintf(__str, 0x1EuLL, "%d");
  }
  uint64_t v12 = IOReporter::addChannel(*(IOReporter **)(*((void *)this + 7) + 64), a2 | 0x454C534200000000, __str);
  if (v12)
  {
    uint64_t v11 = v12;
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:ivars->fEventLogSetSizeReporter->addChannel for %s failed \n", "reportEventLogSetSize", 1732, __str);
      }
    }
  }
  else
  {
    uint64_t v11 = IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 64), a2 | 0x454C534200000000, a3);
    uint64_t v14 = (void (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getRemoveReporterCallback(this);
    uint64_t Target = AppleBCMWLANIOReporting::getTarget(this);
    uint64_t CurrentBSS = AppleBCMWLANBssManager::getCurrentBSS(this);
    v14(Target, CurrentBSS, 0, "Event Log", "Set Received Bytes");
    AddReporterCallback = (void (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(this);
    uint64_t v18 = AppleBCMWLANIOReporting::getTarget(this);
    uint64_t v19 = AppleBCMWLANBssManager::getCurrentBSS(this);
    AddReporterCallback(v18, v19, *(void *)(*((void *)this + 7) + 64), "Event Log", "Set Received Bytes");
  }
  return v11;
}

uint64_t AppleBCMWLANIOReportingCore::createDefaultReportersAndLegend(AppleBCMWLANIOReportingCore *this)
{
  *(_DWORD *)(*((void *)this + 7) + 184) = 100;
  *(_DWORD *)(*((void *)this + 7) + 188) = 250;
  *(_DWORD *)(*((void *)this + 7) + 192) = 500;
  *(_DWORD *)(*((void *)this + 7) + 196) = 1000;
  *(_DWORD *)(*((void *)this + 7) + 200) = 1200;
  *(_DWORD *)(*((void *)this + 7) + 204) = 1648;
  *(_DWORD *)(*((void *)this + 7) + 72) = 5;
  *(_DWORD *)(*((void *)this + 7) + 76) = 10;
  *(_DWORD *)(*((void *)this + 7) + 80) = 100;
  *(_DWORD *)(*((void *)this + 7) + 84) = 1000;
  *(_DWORD *)(*((void *)this + 7) + 88) = 5000;
  *(_DWORD *)(*((void *)this + 7) + 92) = 10000;
  *(void *)(*((void *)this + 7) + 24) = OSArray::withCapacity(0xAu);
  uint64_t v2 = *(void *)(*((void *)this + 7) + 24);
  uint64_t Logger = AppleBCMWLANIOReporting::getLogger(this);
  if (v2)
  {
    if (Logger)
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        int v22 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logAlert(v22, "[dk] %s@%d:Adding %s %s \n", "createDefaultReportersAndLegend", 1981, "IOReporter API", "ConfigureReport Calls");
      }
    }
    ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(*(IO80211Controller **)(*((void *)this + 7) + 208));
    **((void **)this + 7) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v5);
    if (!**((void **)this + 7)) {
      return 0;
    }
    Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(this);
    OSSet::setObject(Reporter, **((const OSMetaClassBase ***)this + 7));
    (*(void (**)(void))(***((void ***)this + 7) + 16))(**((void **)this + 7));
    IOReporter::addChannel(**((IOReporter ***)this + 7), 0x5A46732020202020uLL, "Success");
    IOReporter::addChannel(**((IOReporter ***)this + 7), 0x5A46662020202020uLL, "Failed");
    AddReporterCallback = (void (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(this);
    uint64_t Target = AppleBCMWLANIOReporting::getTarget(this);
    uint64_t CurrentBSS = AppleBCMWLANBssManager::getCurrentBSS(this);
    AddReporterCallback(Target, CurrentBSS, **((void **)this + 7), "IOReporter API", "ConfigureReport Calls");
    uint64_t v10 = (IOSimpleReporter *)IO80211Controller::getReporterProvider(*(IO80211Controller **)(*((void *)this + 7)
                                                                                           + 208));
    *(void *)(*((void *)this + 7) + 8) = IOSimpleReporter::with(v10, (IOService *)0x8010, 0, v11);
    if (!*(void *)(*((void *)this + 7) + 8)) {
      return 0;
    }
    uint64_t v12 = (OSSet *)AppleBCMWLANIOReporting::getReporter(this);
    OSSet::setObject(v12, *(const OSMetaClassBase **)(*((void *)this + 7) + 8));
    (*(void (**)(void))(**(void **)(*((void *)this + 7) + 8) + 16))(*(void *)(*((void *)this + 7) + 8));
    IOReporter::addChannel(*(IOReporter **)(*((void *)this + 7) + 8), 0x5A5A732020202020uLL, "Success");
    IOReporter::addChannel(*(IOReporter **)(*((void *)this + 7) + 8), 0x5A5A662020202020uLL, "Failed");
    uint64_t v13 = (void (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(this);
    uint64_t v14 = AppleBCMWLANIOReporting::getTarget(this);
    uint64_t v15 = AppleBCMWLANBssManager::getCurrentBSS(this);
    v13(v14, v15, *(void *)(*((void *)this + 7) + 8), "IOReporter API", "UpdateReport Calls");
    uint64_t v16 = (IOSimpleReporter *)IO80211Controller::getReporterProvider(*(IO80211Controller **)(*((void *)this + 7)
                                                                                           + 208));
    *(void *)(*((void *)this + 7) + 16) = IOSimpleReporter::with(v16, (IOService *)0x8010, 0, v17);
    if (!*(void *)(*((void *)this + 7) + 16)) {
      return 0;
    }
    uint64_t v18 = (OSSet *)AppleBCMWLANIOReporting::getReporter(this);
    OSSet::setObject(v18, *(const OSMetaClassBase **)(*((void *)this + 7) + 16));
    (*(void (**)(void))(**(void **)(*((void *)this + 7) + 16) + 16))(*(void *)(*((void *)this + 7) + 16));
    return 1;
  }
  if (!Logger) {
    return 1;
  }
  AppleBCMWLANIOReporting::getLogger(this);
  uint64_t v19 = 1;
  if (CCLogStream::shouldLog())
  {
    uint64_t v21 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
    CCLogStream::logAlert(v21, "[dk] %s@%d:Failed to create ivars->_processNameIndex\n", "createDefaultReportersAndLegend", 1979);
  }
  return v19;
}

uint64_t non-virtual thunk to'AppleBCMWLANIOReportingCore::createDefaultReportersAndLegend(AppleBCMWLANIOReportingCore *this)
{
  return AppleBCMWLANIOReportingCore::createDefaultReportersAndLegend((AppleBCMWLANIOReportingCore *)((char *)this - 40));
}

uint64_t AppleBCMWLANIOReportingCore::destroyReporters(AppleBCMWLANIOReportingCore *this)
{
  uint64_t v2 = (void (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getRemoveReporterCallback(this);
  uint64_t Target = AppleBCMWLANIOReporting::getTarget(this);
  uint64_t CurrentBSS = AppleBCMWLANBssManager::getCurrentBSS(this);
  v2(Target, CurrentBSS, 0, "Event Log", "Tag counters");
  unint64_t v5 = (void (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getRemoveReporterCallback(this);
  uint64_t v6 = AppleBCMWLANIOReporting::getTarget(this);
  uint64_t v7 = AppleBCMWLANBssManager::getCurrentBSS(this);
  v5(v6, v7, *(void *)(*((void *)this + 7) + 96), "Chip Memory", "Chip Memory Usage");
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, const char *, const char *))AppleBCMWLANIOReporting::getRemoveReporterCallback(this);
  uint64_t v8 = AppleBCMWLANIOReporting::getTarget(this);
  uint64_t v9 = AppleBCMWLANBssManager::getCurrentBSS(this);
  uint64_t v10 = *(void *)(*((void *)this + 7) + 32);
  return v12(v8, v9, v10, "WIO", "IPC Counters");
}

uint64_t non-virtual thunk to'AppleBCMWLANIOReportingCore::destroyReporters(AppleBCMWLANIOReportingCore *this)
{
  return AppleBCMWLANIOReportingCore::destroyReporters((AppleBCMWLANIOReportingCore *)((char *)this - 40));
}

uint64_t AppleBCMWLANIOReportingCore::configureAllReports(AppleBCMWLANIOReportingCore *this)
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANIOReportingCore::configureAllReports(AppleBCMWLANIOReportingCore *this)
{
  return 0;
}

uint64_t AppleBCMWLANIOReportingCore::updateAllReports(AppleBCMWLANIOReportingCore *this)
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANIOReportingCore::updateAllReports(AppleBCMWLANIOReportingCore *this)
{
  return 0;
}

uint64_t AppleBCMWLANIOReportingCore::init(void *a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 48);
  void v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  uint64_t v8 = *(void *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  uint64_t result = AppleBCMWLANIOReporting::init((uint64_t)a1, (uint64_t)v7);
  if (result)
  {
    uint64_t result = IOMallocZeroTyped();
    a1[7] = result;
    if (result)
    {
      *(void *)(a1[7] + 208) = OSMetaClassBase::safeMetaCast(*(const OSMetaClassBase **)(a2 + 8), (const OSMetaClass *)gAppleBCMWLANCoreMetaClass);
      return (*(uint64_t (**)(void *))(*a1 + 64))(a1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANIOReportingCore::init(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANIOReportingCore::init((void *)(a1 - 40), a2);
}

OSObject *AppleBCMWLANIOReportingCore::with(uint64_t a1)
{
  pObject = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANIOReportingCoreMetaClass, &pObject)) {
    return 0;
  }
  uint64_t v2 = pObject;
  if (pObject)
  {
    long long v4 = *(_OWORD *)(a1 + 16);
    v6[0] = *(_OWORD *)a1;
    v6[1] = v4;
    uint64_t v7 = *(void *)(a1 + 64);
    long long v5 = *(_OWORD *)(a1 + 48);
    void v6[2] = *(_OWORD *)(a1 + 32);
    v6[3] = v5;
    if ((((uint64_t (*)(OSObject *, _OWORD *))pObject->OSMetaClassBase::__vftable[1].getMetaClass)(pObject, v6) & 1) == 0)
    {
      ((void (*)(OSObject *))v2->release)(v2);
      return 0;
    }
  }
  return v2;
}

void AppleBCMWLANIOReportingCore::free(OSObject *this)
{
  if (this[1].meta)
  {
    ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[1].Dispatch)(this);
    memset_s(this[1].meta, 0x118uLL, 0, 0x118uLL);
    meta = this[1].meta;
    if (meta)
    {
      IOFree(meta, 0x118uLL);
      this[1].meta = 0;
    }
  }
  AppleBCMWLANIOReporting::free(this);
}

void non-virtual thunk to'AppleBCMWLANIOReportingCore::free(AppleBCMWLANIOReportingCore *this)
{
}

void _GLOBAL__sub_I_AppleBCMWLANIOReportingCore_cpp()
{
  kNullRange = 0;
}

uint64_t AppleBCMWLANIOReportingPerSlice::initRxErrorReporter(AppleBCMWLANBssManager *a1, uint64_t a2)
{
  uint64_t v4 = 3758097084;
  uint64_t v5 = IOMallocZeroData();
  if (v5)
  {
    uint64_t v6 = (char *)v5;
    uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
    ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
    *(void *)(*((void *)a1 + 7) + 8 * a2 + 376) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v9);
    if (*(void *)(*((void *)a1 + 7) + 8 * a2 + 376))
    {
      uint64_t v10 = a2;
      Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
      OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 376));
      uint64_t v12 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 376);
      (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
      for (uint64_t i = 0; i != 128; i += 16)
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 376), *(void *)((char *)&kSliceCountersRxErrorReport + i) ^ (a2 << 56), *(const char **)((char *)&kSliceCountersRxErrorReport + i + 8));
      snprintf(v6, 0x32uLL, "%s %d", "Slice", a2);
      AddReporterCallback = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
      uint64_t Target = AppleBCMWLANIOReporting::getTarget(a1);
      uint64_t v16 = AppleBCMWLANBssManager::getCurrentBSS(a1);
      uint64_t v4 = AddReporterCallback(Target, v16, *(void *)(*((void *)a1 + 7) + 8 * v10 + 376), v6, "Rx Error Counters");
    }
    else
    {
      uint64_t v4 = 3758097085;
    }
    IOFreeData();
  }
  else if (AppleBCMWLANIOReporting::getLogger(a1))
  {
    AppleBCMWLANIOReporting::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
      CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to alloc AppleBCMWLANUtil::AutoreleasedBuffer\n", "initRxErrorReporter", 526);
    }
  }
  return v4;
}

uint64_t AppleBCMWLANIOReportingPerSlice::initTxMngReporter(AppleBCMWLANBssManager *a1, uint64_t a2)
{
  uint64_t v4 = 3758097084;
  uint64_t v5 = IOMallocZeroData();
  if (v5)
  {
    uint64_t v6 = (char *)v5;
    uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
    ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
    *(void *)(*((void *)a1 + 7) + 8 * a2 + 440) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v9);
    if (*(void *)(*((void *)a1 + 7) + 8 * a2 + 440))
    {
      uint64_t v10 = a2;
      Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
      OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 440));
      uint64_t v12 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 440);
      (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
      uint64_t v13 = 0;
      uint64_t v14 = a2 << 56;
      do
      {
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 440), kSliceCountersTxMgmtReport[v13] ^ v14, (const char *)kSliceCountersTxMgmtReport[v13 + 1]);
        v13 += 2;
      }
      while (v13 != 22);
      snprintf(v6, 0x32uLL, "%s %d", "Slice Frames: slice ", a2);
      AddReporterCallback = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
      uint64_t Target = AppleBCMWLANIOReporting::getTarget(a1);
      uint64_t v17 = AppleBCMWLANBssManager::getCurrentBSS(a1);
      uint64_t v18 = AddReporterCallback(Target, v17, *(void *)(*((void *)a1 + 7) + 8 * v10 + 440), v6, "Tx Management Frame Counters");
      if (!*(void *)(*((void *)a1 + 7) + 8 * v10 + 168))
      {
        *(void *)(*((void *)a1 + 7) + 8 * v10 + 168) = IOMallocZeroData();
        if (!*(void *)(*((void *)a1 + 7) + 8 * v10 + 168))
        {
          if (AppleBCMWLANIOReporting::getLogger(a1))
          {
            AppleBCMWLANIOReporting::getLogger(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
              CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to alloc ivars->fSliceCountersTxManagementCountersLUT\n", "initTxMngReporter", 563);
            }
          }
          goto LABEL_11;
        }
        for (uint64_t i = 0; i != 22; i += 2)
          *(void *)(*(void *)(*((void *)a1 + 7) + 8 * v10 + 168) + i * 8) = kSliceCountersTxMgmtReport[i] ^ v14;
        *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * v10 + 168) + 8) = 632;
        *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * v10 + 168) + 24) = 656;
        *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * v10 + 168) + 40) = 640;
        *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * v10 + 168) + 56) = 664;
        *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * v10 + 168) + 72) = 688;
        *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * v10 + 168) + 88) = 696;
        *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * v10 + 168) + 104) = 648;
        *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * v10 + 168) + 120) = 672;
        *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * v10 + 168) + 136) = 680;
        *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * v10 + 168) + 152) = 704;
        *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * v10 + 168) + 168) = 632;
      }
      uint64_t v4 = v18;
    }
LABEL_11:
    IOFreeData();
    return v4;
  }
  if (AppleBCMWLANIOReporting::getLogger(a1))
  {
    AppleBCMWLANIOReporting::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v21 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
      CCLogStream::logEmergency(v21, "[dk] %s@%d:Failed to alloc AppleBCMWLANUtil::AutoreleasedBuffer\n", "initTxMngReporter", 552);
    }
  }
  return v4;
}

uint64_t AppleBCMWLANIOReportingPerSlice::initRxMngReporter(AppleBCMWLANBssManager *a1, uint64_t a2)
{
  uint64_t v4 = 3758097084;
  uint64_t v5 = IOMallocZeroData();
  if (v5)
  {
    uint64_t v6 = (char *)v5;
    uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
    ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
    *(void *)(*((void *)a1 + 7) + 8 * a2 + 456) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v9);
    if (*(void *)(*((void *)a1 + 7) + 8 * a2 + 456))
    {
      uint64_t v10 = a2;
      Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
      OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 456));
      uint64_t v12 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 456);
      (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
      uint64_t v13 = 0;
      uint64_t v14 = a2 << 56;
      do
      {
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 456), kSliceCountersRxMgmtReport[v13] ^ v14, (const char *)kSliceCountersRxMgmtReport[v13 + 1]);
        v13 += 2;
      }
      while (v13 != 24);
      snprintf(v6, 0x32uLL, "%s %d", "Slice Frames: slice ", a2);
      AddReporterCallback = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
      uint64_t Target = AppleBCMWLANIOReporting::getTarget(a1);
      uint64_t v17 = AppleBCMWLANBssManager::getCurrentBSS(a1);
      uint64_t v18 = AddReporterCallback(Target, v17, *(void *)(*((void *)a1 + 7) + 8 * v10 + 456), v6, "Rx Management Frame Counters");
      if (!*(void *)(*((void *)a1 + 7) + 8 * v10 + 184))
      {
        *(void *)(*((void *)a1 + 7) + 8 * v10 + 184) = IOMallocZeroData();
        if (!*(void *)(*((void *)a1 + 7) + 8 * v10 + 184))
        {
          if (AppleBCMWLANIOReporting::getLogger(a1))
          {
            AppleBCMWLANIOReporting::getLogger(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
              CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to alloc ivars->fSliceCountersRxManagementCountersLUT\n", "initRxMngReporter", 609);
            }
          }
          goto LABEL_12;
        }
        for (uint64_t i = 0; i != 24; i += 2)
          *(void *)(*(void *)(*((void *)a1 + 7) + 8 * v10 + 184) + i * 8) = kSliceCountersRxMgmtReport[i] ^ v14;
        *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * v10 + 184) + 8) = 636;
        *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * v10 + 184) + 24) = 660;
        *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * v10 + 184) + 40) = 644;
        *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * v10 + 184) + 56) = 668;
        *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * v10 + 184) + 72) = 692;
        *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * v10 + 184) + 88) = 700;
        *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * v10 + 184) + 104) = 652;
        *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * v10 + 184) + 120) = 676;
        *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * v10 + 184) + 136) = 684;
        *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * v10 + 184) + 152) = 708;
        if (AppleBCMWLANCore::checkFor6GSupportCardCapability(*(AppleBCMWLANCore **)(*((void *)a1 + 7) + 1504))) {
          *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * v10 + 184) + 184) = 860;
        }
      }
      uint64_t v4 = v18;
    }
LABEL_12:
    IOFreeData();
    return v4;
  }
  if (AppleBCMWLANIOReporting::getLogger(a1))
  {
    AppleBCMWLANIOReporting::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v21 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
      CCLogStream::logEmergency(v21, "[dk] %s@%d:Failed to alloc AppleBCMWLANUtil::AutoreleasedBuffer\n", "initRxMngReporter", 597);
    }
  }
  return v4;
}

uint64_t AppleBCMWLANIOReportingPerSlice::initLTECoexReporter(AppleBCMWLANBssManager *a1, uint64_t a2)
{
  uint64_t v4 = 3758097084;
  uint64_t v5 = IOMallocZeroData();
  if (v5)
  {
    uint64_t v6 = (char *)v5;
    if ((int)a2 > 1) {
      goto LABEL_42;
    }
    uint64_t v7 = *((void *)a1 + 7);
    uint64_t v8 = a2;
    if (*(void *)(v7 + 8 * a2 + 56))
    {
      uint64_t v4 = 0;
    }
    else
    {
      uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
      ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
      *(void *)(*((void *)a1 + 7) + 8 * a2 + 56) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v12);
      if (!*(void *)(*((void *)a1 + 7) + 8 * a2 + 56))
      {
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to allocate IOSimpleReporter\n", "initLTECoexReporter", 653);
          }
        }
        goto LABEL_42;
      }
      Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
      OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 56));
      uint64_t v14 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 56);
      (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
      for (uint64_t i = 0; i != 22; i += 2)
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 56), kLTECoexFramesReport[i] | ((unint64_t)a2 << 48), (const char *)kLTECoexFramesReport[i + 1]);
      snprintf(v6, 0x32uLL, "%s slice %d", "No LTE Frame Counters", a2);
      AddReporterCallbacuint64_t k = (uint64_t (*)(uint64_t, uint64_t, void, const char *, char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
      uint64_t Target = AppleBCMWLANIOReporting::getTarget(a1);
      uint64_t v18 = AppleBCMWLANBssManager::getCurrentBSS(a1);
      uint64_t v4 = AddReporterCallback(Target, v18, *(void *)(*((void *)a1 + 7) + 8 * a2 + 56), "LTE Coex", v6);
      uint64_t v7 = *((void *)a1 + 7);
    }
    if (!*(void *)(v7 + 8 * a2 + 120))
    {
      *(void *)(*((void *)a1 + 7) + 8 * a2 + 120) = IOMallocZeroData();
      if (!*(void *)(*((void *)a1 + 7) + 8 * a2 + 120))
      {
        if (!AppleBCMWLANIOReporting::getLogger(a1)) {
          goto LABEL_64;
        }
        AppleBCMWLANIOReporting::getLogger(a1);
        if (!CCLogStream::shouldLog()) {
          goto LABEL_64;
        }
        goto LABEL_61;
      }
      for (uint64_t j = 0; j != 22; j += 2)
        *(void *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 120) + j * 8) = kLTECoexFramesReport[j] | ((unint64_t)a2 << 48);
      *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 120) + 8) = 8;
      *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 120) + 24) = 12;
      *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 120) + 40) = 16;
      *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 120) + 56) = 20;
      *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 120) + 72) = 24;
      *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 120) + 88) = 28;
      *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 120) + 104) = 32;
      *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 120) + 120) = 36;
      *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 120) + 136) = 40;
      *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 120) + 152) = 44;
      *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 120) + 168) = 48;
      uint64_t v7 = *((void *)a1 + 7);
    }
    if (!*(void *)(v7 + 8 * a2 + 72))
    {
      uint64_t v20 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
      uint64_t v21 = (IOSimpleReporter *)IO80211Controller::getReporterProvider(v20);
      *(void *)(*((void *)a1 + 7) + 8 * a2 + 72) = IOSimpleReporter::with(v21, (IOService *)0x8010, 0, v22);
      if (!*(void *)(*((void *)a1 + 7) + 8 * a2 + 72))
      {
        if (!AppleBCMWLANIOReporting::getLogger(a1)) {
          goto LABEL_64;
        }
        AppleBCMWLANIOReporting::getLogger(a1);
        if (!CCLogStream::shouldLog()) {
          goto LABEL_64;
        }
        goto LABEL_65;
      }
      uint64_t v23 = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
      OSSet::setObject(v23, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 72));
      uint64_t v24 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 72);
      (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
      for (uint64_t k = 0; k != 22; k += 2)
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 72), kLTECoexFramesReport[k] | ((unint64_t)a2 << 48) | 0x10000000000, (const char *)kLTECoexFramesReport[k + 1]);
      snprintf(v6, 0x32uLL, "%s slice %d", "Light LTE Frame Counters", a2);
      unsigned int v26 = (uint64_t (*)(uint64_t, uint64_t, void, const char *, char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
      uint64_t v27 = AppleBCMWLANIOReporting::getTarget(a1);
      uint64_t v28 = AppleBCMWLANBssManager::getCurrentBSS(a1);
      uint64_t v4 = v26(v27, v28, *(void *)(*((void *)a1 + 7) + 8 * a2 + 72), "LTE Coex", v6);
      uint64_t v7 = *((void *)a1 + 7);
    }
    if (!*(void *)(v7 + 8 * a2 + 136))
    {
      *(void *)(*((void *)a1 + 7) + 8 * a2 + 136) = IOMallocZeroData();
      if (!*(void *)(*((void *)a1 + 7) + 8 * a2 + 136))
      {
        if (!AppleBCMWLANIOReporting::getLogger(a1)) {
          goto LABEL_64;
        }
        AppleBCMWLANIOReporting::getLogger(a1);
        if (!CCLogStream::shouldLog()) {
          goto LABEL_64;
        }
        goto LABEL_61;
      }
      for (uint64_t m = 0; m != 22; m += 2)
        *(void *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 136) + m * 8) = kLTECoexFramesReport[m] | ((unint64_t)a2 << 48);
      *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 136) + 8) = 52;
      *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 136) + 24) = 60;
      *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 136) + 40) = 64;
      *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 136) + 56) = 56;
      *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 136) + 72) = 68;
      *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 136) + 88) = 72;
      *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 136) + 104) = 76;
      *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 136) + 120) = 80;
      *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 136) + 136) = 84;
      *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 136) + 152) = 88;
      *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 136) + 168) = 92;
      uint64_t v7 = *((void *)a1 + 7);
    }
    if (!*(void *)(v7 + 8 * a2 + 88))
    {
      long long v30 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
      long long v31 = (IOSimpleReporter *)IO80211Controller::getReporterProvider(v30);
      *(void *)(*((void *)a1 + 7) + 8 * a2 + 88) = IOSimpleReporter::with(v31, (IOService *)0x8010, 0, v32);
      if (!*(void *)(*((void *)a1 + 7) + 8 * a2 + 88))
      {
        if (!AppleBCMWLANIOReporting::getLogger(a1)) {
          goto LABEL_64;
        }
        AppleBCMWLANIOReporting::getLogger(a1);
        if (!CCLogStream::shouldLog()) {
          goto LABEL_64;
        }
        goto LABEL_65;
      }
      uint64_t v33 = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
      OSSet::setObject(v33, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 88));
      uint64_t v34 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 88);
      (*(void (**)(uint64_t))(*(void *)v34 + 16))(v34);
      for (uint64_t n = 0; n != 22; n += 2)
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 88), kLTECoexFramesReport[n] | ((unint64_t)a2 << 48) | 0x20000000000, (const char *)kLTECoexFramesReport[n + 1]);
      snprintf(v6, 0x32uLL, "%s slice %d", "Heavy LTE Frame Counters", a2);
      uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, void, const char *, char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
      uint64_t v37 = AppleBCMWLANIOReporting::getTarget(a1);
      uint64_t v38 = AppleBCMWLANBssManager::getCurrentBSS(a1);
      uint64_t v4 = v36(v37, v38, *(void *)(*((void *)a1 + 7) + 8 * a2 + 88), "LTE Coex", v6);
      uint64_t v7 = *((void *)a1 + 7);
    }
    if (*(void *)(v7 + 8 * a2 + 152))
    {
LABEL_37:
      if (!*(void *)(v7 + 8 * a2 + 104))
      {
        long long v40 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
        long long v41 = (IOSimpleReporter *)IO80211Controller::getReporterProvider(v40);
        *(void *)(*((void *)a1 + 7) + 8 * a2 + 104) = IOSimpleReporter::with(v41, (IOService *)0x8010, 0, v42);
        if (*(void *)(*((void *)a1 + 7) + 8 * a2 + 104))
        {
          __int16 v43 = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
          OSSet::setObject(v43, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 104));
          uint64_t v44 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 104);
          (*(void (**)(uint64_t))(*(void *)v44 + 16))(v44);
          for (iuint64_t i = 0; ii != 80; ii += 16)
            IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 104), *(void *)((char *)&kLTESpecificCountersReport + ii) ^ (a2 << 56), *(const char **)((char *)&kLTESpecificCountersReport + ii + 8));
          snprintf(v6, 0x32uLL, "%s slice %d", "WLAN Specific Counters", a2);
          uint64_t v46 = (uint64_t (*)(uint64_t, uint64_t, void, const char *, char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
          uint64_t v47 = AppleBCMWLANIOReporting::getTarget(a1);
          uint64_t v48 = AppleBCMWLANBssManager::getCurrentBSS(a1);
          uint64_t v4 = v46(v47, v48, *(void *)(*((void *)a1 + 7) + 8 * v8 + 104), "LTE Coex", v6);
          goto LABEL_42;
        }
        if (!AppleBCMWLANIOReporting::getLogger(a1)) {
          goto LABEL_64;
        }
        AppleBCMWLANIOReporting::getLogger(a1);
        if (!CCLogStream::shouldLog()) {
          goto LABEL_64;
        }
LABEL_65:
        uint64_t v52 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
        CCLogStream::logEmergency(v52, "[dk] %s@%d:Failed to allocate IOSimpleReporter\n");
        goto LABEL_64;
      }
LABEL_42:
      IOFreeData();
      return v4;
    }
    *(void *)(*((void *)a1 + 7) + 8 * a2 + 152) = IOMallocZeroData();
    if (*(void *)(*((void *)a1 + 7) + 8 * a2 + 152))
    {
      for (juint64_t j = 0; jj != 22; jj += 2)
        *(void *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 152) + jj * 8) = kLTECoexFramesReport[jj] | ((unint64_t)a2 << 48) | 0x20000000000;
      *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 152) + 8) = 96;
      *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 152) + 24) = 104;
      *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 152) + 40) = 108;
      *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 152) + 56) = 100;
      *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 152) + 72) = 112;
      *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 152) + 88) = 116;
      *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 152) + 104) = 120;
      *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 152) + 120) = 124;
      *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 152) + 136) = 128;
      *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 152) + 152) = 132;
      *(_DWORD *)(*(void *)(*((void *)a1 + 7) + 8 * a2 + 152) + 168) = 136;
      uint64_t v7 = *((void *)a1 + 7);
      goto LABEL_37;
    }
    if (!AppleBCMWLANIOReporting::getLogger(a1)) {
      goto LABEL_64;
    }
    AppleBCMWLANIOReporting::getLogger(a1);
    if (!CCLogStream::shouldLog()) {
      goto LABEL_64;
    }
LABEL_61:
    uint64_t v51 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
    CCLogStream::logEmergency(v51, "[dk] %s@%d:Failed to alloc ivars->fNoLTEFrameCountersLUT\n");
LABEL_64:
    uint64_t v4 = 3758097084;
    goto LABEL_42;
  }
  if (AppleBCMWLANIOReporting::getLogger(a1))
  {
    AppleBCMWLANIOReporting::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      unint64_t v9 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
      CCLogStream::logEmergency(v9, "[dk] %s@%d:Failed to alloc AppleBCMWLANUtil::AutoreleasedBuffer\n", "initLTECoexReporter", 647);
    }
  }
  return v4;
}

uint64_t AppleBCMWLANIOReportingPerSlice::reportLTECoexStatisticsPerSlice(AppleBCMWLANIOReporting *a1, OSData *a2, uint64_t a3)
{
  unsigned int v38 = 0;
  uint64_t v5 = 3758097084;
  memset(v39, 170, sizeof(v39));
  AppleBCMWLANUtil::AutoreleasedAlignedOSData::AutoreleasedAlignedOSData((AppleBCMWLANUtil::AutoreleasedAlignedOSData *)v39, a2, 2);
  uint64_t v6 = v39[0];
  if (!v39[0])
  {
    if (AppleBCMWLANIOReporting::getLogger(a1))
    {
      AppleBCMWLANIOReporting::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
        CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to allocate alignedCounters\n");
      }
    }
    goto LABEL_19;
  }
  if ((int)a3 > 1) {
    goto LABEL_13;
  }
  if (!*(unsigned char *)(*((void *)a1 + 7) + a3 + 39))
  {
    if (!AppleBCMWLANIOReportingPerSlice::initLTECoexReporter(a1, a3))
    {
      *(unsigned char *)(*((void *)a1 + 7) + a3 + 39) = 1;
      goto LABEL_6;
    }
    if (AppleBCMWLANIOReporting::getLogger(a1))
    {
      AppleBCMWLANIOReporting::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v37 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
        CCLogStream::logEmergency(v37, "[dk] %s@%d:Failed to init LTE Coex reporters\n");
      }
    }
LABEL_19:
    unsigned int v38 = -536870212;
    goto LABEL_13;
  }
LABEL_6:
  for (uint64_t i = 0; i != 176; i += 16)
  {
    uint64_t v8 = *((void *)a1 + 7) + 8 * a3;
    unint64_t v9 = *(IOSimpleReporter **)(v8 + 56);
    uint64_t v10 = *(void *)(v8 + 136) + i;
    unint64_t v11 = *(void *)v10;
    unsigned __int16 CounterValueSafe = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v38, (int *)4, v6, *(unsigned int *)(v10 + 8));
    IOSimpleReporter::setValue(v9, v11, (uint64_t)CounterValueSafe);
  }
  for (uint64_t j = 0; j != 176; j += 16)
  {
    uint64_t v14 = *((void *)a1 + 7) + 8 * a3;
    uint64_t v15 = *(IOSimpleReporter **)(v14 + 72);
    uint64_t v16 = *(void *)(v14 + 136) + j;
    unint64_t v17 = *(void *)v16;
    uint64_t v18 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v38, (int *)4, v6, *(unsigned int *)(v16 + 8));
    IOSimpleReporter::setValue(v15, v17, (uint64_t)v18);
  }
  for (uint64_t k = 0; k != 176; k += 16)
  {
    uint64_t v20 = *((void *)a1 + 7) + 8 * a3;
    uint64_t v21 = *(IOSimpleReporter **)(v20 + 88);
    uint64_t v22 = *(void *)(v20 + 152) + k;
    unint64_t v23 = *(void *)v22;
    uint64_t v24 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v38, (int *)4, v6, *(unsigned int *)(v22 + 8));
    IOSimpleReporter::setValue(v21, v23, (uint64_t)v24);
  }
  uint64_t v25 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * a3 + 104);
  unsigned int v26 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v38, (int *)2, v6, 0x92uLL);
  IOSimpleReporter::setValue(v25, (a3 << 56) ^ 0x5420206E54784672, (uint64_t)v26);
  uint64_t v27 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * a3 + 104);
  uint64_t v28 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v38, (int *)2, v6, 0x94uLL);
  IOSimpleReporter::setValue(v27, (a3 << 56) ^ 0x5220206E54784672, (uint64_t)v28);
  uint64_t v29 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * a3 + 104);
  long long v30 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v38, (int *)2, v6, 0x9EuLL);
  IOSimpleReporter::setValue(v29, (a3 << 56) ^ 0x5220206E52747279, (uint64_t)v30);
  long long v31 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * a3 + 104);
  unint64_t v32 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v38, (int *)2, v6, 0x9CuLL);
  IOSimpleReporter::setValue(v31, (a3 << 56) ^ 0x5420206E54785265, (uint64_t)v32);
  uint64_t v33 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * a3 + 104);
  uint64_t v34 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v38, (int *)2, v6, 0x9AuLL);
  IOSimpleReporter::setValue(v33, (a3 << 56) ^ 0x6420206E43747852, (uint64_t)v34);
  uint64_t v5 = v38;
LABEL_13:
  AppleBCMWLANUtil::AutoreleasedAlignedOSData::~AutoreleasedAlignedOSData((AppleBCMWLANUtil::AutoreleasedAlignedOSData *)v39);
  return v5;
}

uint64_t AppleBCMWLANIOReportingPerSlice::reportUcodeCntPerSlice(AppleBCMWLANIOReporting *this, OSData *a2, uint64_t a3, int a4, uint64_t a5)
{
  unsigned int inited = 0;
  if ((int)a3 >= 2)
  {
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logEmergency(Logger, "[dk] %s@%d:Out of range slice index %d\n", "reportUcodeCntPerSlice", 852, a3);
      }
    }
    return -536870212;
  }
  uint64_t v7 = *((void *)this + 7);
  if (!v7)
  {
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v54 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logCrit(v54, "[dk] %s@%d:Failed to allocate AppleBCMWLANIOReportingPerSlice_IVars\n", "reportUcodeCntPerSlice", 853);
      }
    }
    return -536870212;
  }
  if (*(unsigned char *)(v7 + a3 + 41))
  {
    if (a4) {
      goto LABEL_5;
    }
LABEL_10:
    int v61 = 0;
    size_t v60 = 80;
    size_t v59 = 0x600000005CLL;
    size_t start = 0x5800000054;
    size_t v12 = 76;
    size_t v13 = 72;
    goto LABEL_12;
  }
  unsigned int inited = AppleBCMWLANIOReportingPerSlice::initRxErrorReporter(this, a3);
  if (inited)
  {
    if (!AppleBCMWLANIOReporting::getLogger(this)) {
      return inited;
    }
    AppleBCMWLANIOReporting::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v55 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
      CCLogStream::logEmergency(v55, "[dk] %s@%d:Failed to initiate Rx error reporter\n");
    }
    goto LABEL_64;
  }
  *(unsigned char *)(*((void *)this + 7) + a3 + 41) = 1;
  if (!a4) {
    goto LABEL_10;
  }
LABEL_5:
  int v11 = 0;
  if (a4 == 1)
  {
    int v61 = 1;
    size_t v60 = 56;
    size_t v59 = 0x4800000044;
    size_t start = 0x400000003CLL;
    size_t v12 = 52;
    size_t v13 = 48;
  }
  else
  {
    int v61 = 0;
    if (a4 != 2) {
      goto LABEL_13;
    }
    int v61 = 0;
    size_t v60 = 0x10000020CLL;
    size_t v59 = 0x400000108;
    size_t start = 0x10400000210;
    size_t v12 = 272;
    size_t v13 = 268;
  }
LABEL_12:
  uint64_t v14 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 376);
  unsigned __int16 CounterValueSafe = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, v13);
  IOSimpleReporter::setValue(v14, (a3 << 56) ^ 0x536C52784572544CLL, (uint64_t)CounterValueSafe);
  uint64_t v16 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 376);
  unint64_t v17 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, v12);
  IOSimpleReporter::setValue(v16, (a3 << 56) ^ 0x536C527845725453, (uint64_t)v17);
  uint64_t v18 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 376);
  uint64_t v19 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, start);
  IOSimpleReporter::setValue(v18, (a3 << 56) ^ 0x536C527845724653, (uint64_t)v19);
  uint64_t v20 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 376);
  uint64_t v21 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, HIDWORD(start));
  IOSimpleReporter::setValue(v20, (a3 << 56) ^ 0x536C527845725050, (uint64_t)v21);
  uint64_t v22 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 376);
  unint64_t v23 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, v59);
  IOSimpleReporter::setValue(v22, (a3 << 56) ^ 0x536C527845724343, (uint64_t)v23);
  uint64_t v24 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 376);
  uint64_t v25 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, HIDWORD(v59));
  IOSimpleReporter::setValue(v24, (a3 << 56) ^ 0x536C527845724750, (uint64_t)v25);
  unsigned int v26 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 376);
  uint64_t v27 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, v60);
  IOSimpleReporter::setValue(v26, (a3 << 56) ^ 0x536C527845614E79, (uint64_t)v27);
  int v11 = HIDWORD(v60);
LABEL_13:
  uint64_t v28 = *((void *)this + 7);
  if (*(unsigned char *)(v28 + a3 + 43)) {
    goto LABEL_16;
  }
  unsigned int inited = AppleBCMWLANIOReportingPerSlice::initTxMngReporter(this, a3);
  if (inited)
  {
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        int v56 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logEmergency(v56, "[dk] %s@%d:Failed to initiate Tx management reporter\n");
      }
    }
LABEL_64:
    if (inited) {
      return inited;
    }
    return -536870212;
  }
  *(unsigned char *)(*((void *)this + 7) + a3 + 4AppleBCMWLANNearbyDeviceDiscoveryAdapter::free(this - 3) = 1;
  uint64_t v28 = *((void *)this + 7);
LABEL_16:
  if (!a4)
  {
    uint64_t v29 = *(IOSimpleReporter **)(v28 + 8 * a3 + 440);
    long long v30 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x14uLL);
    IOSimpleReporter::setValue(v29, (a3 << 56) ^ 0x536C547842656163, (uint64_t)v30);
    uint64_t v28 = *((void *)this + 7);
  }
  if (v61)
  {
    long long v31 = *(IOSimpleReporter **)(v28 + 8 * a3 + 440);
    unint64_t v32 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x14uLL);
    IOSimpleReporter::setValue(v31, (a3 << 56) ^ 0x536C547842656163, (uint64_t)v32);
    uint64_t v28 = *((void *)this + 7);
  }
  if (a4 == 3)
  {
    uint64_t v33 = *(IOSimpleReporter **)(v28 + 8 * a3 + 440);
    uint64_t v34 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x20uLL);
    IOSimpleReporter::setValue(v33, (a3 << 56) ^ 0x536C547842656163, (uint64_t)v34);
    uint64_t v28 = *((void *)this + 7);
  }
  if (!*(unsigned char *)(v28 + a3 + 45))
  {
    unsigned int inited = AppleBCMWLANIOReportingPerSlice::initRxMngReporter(this, a3);
    if (!inited)
    {
      *(unsigned char *)(*((void *)this + 7) + a3 + 45) = 1;
      goto LABEL_25;
    }
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        int v57 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logEmergency(v57, "[dk] %s@%d:Failed to initiate Rx management reporter\n");
      }
    }
    goto LABEL_64;
  }
LABEL_25:
  if (!a4)
  {
    uint64_t v35 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 456);
    uint64_t v36 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x9CuLL);
    IOSimpleReporter::setValue(v35, (a3 << 56) ^ 0x536C527842656163, (uint64_t)v36);
  }
  if (!v61)
  {
    if (!v11) {
      goto LABEL_29;
    }
LABEL_32:
    long long v39 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 456);
    long long v40 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x40uLL);
    IOSimpleReporter::setValue(v39, (a3 << 56) ^ 0x536C527842656163, (uint64_t)v40);
    if (!a5) {
      return inited;
    }
    goto LABEL_33;
  }
  uint64_t v37 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 456);
  unsigned int v38 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x84uLL);
  IOSimpleReporter::setValue(v37, (a3 << 56) ^ 0x536C527842656163, (uint64_t)v38);
  if (v11) {
    goto LABEL_32;
  }
LABEL_29:
  if (!a5) {
    return inited;
  }
LABEL_33:
  if (!a4)
  {
    uint64_t v46 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x60uLL);
    uint64_t v47 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x58uLL);
    *(void *)(a5 + 1440) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x48uLL);
    *(void *)(a5 + 1448) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x4CuLL);
    *(void *)(a5 + 1464) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x54uLL);
    *(void *)(a5 + 1472) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x58uLL);
    *(void *)(a5 + 1480) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x5CuLL);
    *(void *)(a5 + 1488) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x60uLL);
    *(void *)(a5 + 2064) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0xE8uLL);
    *(void *)(a5 + 2048) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x30uLL);
    *(_DWORD *)(a5 + 2040) = 1;
    *(void *)(a5 + 2032) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0xB0uLL);
    *(void *)(a5 + 2016) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x64uLL);
    *(void *)(a5 + 2008) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x70uLL);
    int64_t v48 = (char *)v46 - (char *)v47;
    if (v46 < v47) {
      int64_t v48 = 0;
    }
    *(void *)(a5 + 2024) = v48;
    *(_DWORD *)(a5 + 2000) = 1;
    *(void *)(a5 + 2112) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0xECuLL);
    *(_DWORD *)(a5 + 2072) = 2;
    *(void *)(a5 + 1512) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x64uLL);
    *(void *)(a5 + 1520) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x68uLL);
    *(void *)(a5 + 1528) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x6CuLL);
    *(void *)(a5 + 1536) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x70uLL);
    *(void *)(a5 + 1544) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x74uLL);
    *(void *)(a5 + 1552) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x78uLL);
    *(void *)(a5 + 1560) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x7CuLL);
    *(void *)(a5 + 1568) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x80uLL);
    *(void *)(a5 + 1576) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x84uLL);
    *(void *)(a5 + 1584) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x88uLL);
    *(void *)(a5 + 1592) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x8CuLL);
    *(void *)(a5 + 1600) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x90uLL);
    *(void *)(a5 + 1608) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x94uLL);
    *(void *)(a5 + 1616) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x98uLL);
    *(void *)(a5 + 968) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x14uLL);
    *(void *)(a5 + 864) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x9CuLL);
    uint64_t v44 = a2;
    size_t v45 = 180;
    goto LABEL_45;
  }
  if (v61)
  {
    long long v41 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x48uLL);
    unint64_t v42 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x40uLL);
    *(void *)(a5 + 1440) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x30uLL);
    *(void *)(a5 + 1448) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x34uLL);
    *(void *)(a5 + 1464) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x3CuLL);
    *(void *)(a5 + 1472) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x40uLL);
    *(void *)(a5 + 1480) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x44uLL);
    *(void *)(a5 + 1488) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x48uLL);
    *(void *)(a5 + 2064) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0xC4uLL);
    *(void *)(a5 + 2048) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x18uLL);
    *(_DWORD *)(a5 + 2040) = 1;
    *(void *)(a5 + 2032) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x98uLL);
    *(void *)(a5 + 2016) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x4CuLL);
    *(void *)(a5 + 2008) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x58uLL);
    int64_t v43 = (char *)v41 - (char *)v42;
    if (v41 < v42) {
      int64_t v43 = 0;
    }
    *(void *)(a5 + 2024) = v43;
    *(_DWORD *)(a5 + 2000) = 1;
    *(void *)(a5 + 2112) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0xC8uLL);
    *(_DWORD *)(a5 + 2072) = 2;
    *(void *)(a5 + 1512) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x4CuLL);
    *(void *)(a5 + 1520) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x50uLL);
    *(void *)(a5 + 1528) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x54uLL);
    *(void *)(a5 + 1536) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x58uLL);
    *(void *)(a5 + 1544) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x5CuLL);
    *(void *)(a5 + 1552) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x60uLL);
    *(void *)(a5 + 1560) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x64uLL);
    *(void *)(a5 + 1568) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x68uLL);
    *(void *)(a5 + 1576) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x6CuLL);
    *(void *)(a5 + 1584) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x70uLL);
    *(void *)(a5 + 1592) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x74uLL);
    *(void *)(a5 + 1600) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x78uLL);
    *(void *)(a5 + 1608) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x7CuLL);
    *(void *)(a5 + 1616) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x80uLL);
    *(void *)(a5 + 968) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x14uLL);
    *(void *)(a5 + 864) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x84uLL);
    uint64_t v44 = a2;
    size_t v45 = 256;
LABEL_45:
    *(void *)(a5 + 1328) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, v44, v45);
    return inited;
  }
  if (v11)
  {
    uint64_t v49 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 4uLL);
    uint64_t v50 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x104uLL);
    *(void *)(a5 + 1440) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x10CuLL);
    *(void *)(a5 + 1448) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x110uLL);
    *(void *)(a5 + 1464) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x210uLL);
    *(void *)(a5 + 1472) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x104uLL);
    *(void *)(a5 + 1480) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x108uLL);
    *(void *)(a5 + 1488) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 4uLL);
    *(void *)(a5 + 2064) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x94uLL);
    *(_DWORD *)(a5 + 2040) = 1;
    *(void *)(a5 + 2032) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x114uLL);
    *(void *)(a5 + 2016) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x1F0uLL);
    *(void *)(a5 + 2008) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x48uLL);
    int64_t v51 = (char *)v49 - (char *)v50;
    if (v49 < v50) {
      int64_t v51 = 0;
    }
    *(void *)(a5 + 2024) = v51;
    *(_DWORD *)(a5 + 2000) = 1;
    *(void *)(a5 + 1512) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x1F0uLL);
    *(void *)(a5 + 1520) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x54uLL);
    *(void *)(a5 + 1528) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x50uLL);
    *(void *)(a5 + 1536) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x48uLL);
    *(void *)(a5 + 1544) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x4CuLL);
    *(void *)(a5 + 1552) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x58uLL);
    *(void *)(a5 + 1560) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x1FCuLL);
    *(void *)(a5 + 1568) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x70uLL);
    *(void *)(a5 + 1576) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x74uLL);
    *(void *)(a5 + 1584) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x78uLL);
    *(void *)(a5 + 1592) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x7CuLL);
    *(void *)(a5 + 1600) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x208uLL);
    *(void *)(a5 + 1608) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x3CuLL);
    *(void *)(a5 + 1616) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x38uLL);
    *(void *)(a5 + 864) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x40uLL);
    uint64_t v44 = a2;
    size_t v45 = 312;
    goto LABEL_45;
  }
  if (a4 == 3)
  {
    *(void *)(a5 + 2112) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x14uLL);
    *(_DWORD *)(a5 + 2072) = 2;
    *(void *)(a5 + 2048) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x40uLL);
    *(void *)(a5 + 968) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, a2, 0x20uLL);
  }
  return inited;
}

uint64_t AppleBCMWLANIOReportingPerSlice::reportWlCntPerSlice(AppleBCMWLANIOReporting *this, OSData *a2, uint64_t a3, unsigned __int16 **a4, int a5)
{
  uint64_t v20 = 0;
  if (a5 <= (int)a3)
  {
    uint64_t v7 = 3758097084;
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logEmergency(Logger, "[dk] %s@%d:Out of range slice index %d\n", "reportWlCntPerSlice", 1102, a3);
      }
    }
  }
  else if ((int)a3 <= 1)
  {
    int v10 = AppleBCMWLANIOReportingPerSlice::reportWlCntSliceCounters(this, a2, a3, (uint64_t)a4);
    if (v10)
    {
      int v11 = v10;
      uint64_t CurrentBSS = (IOService *)AppleBCMWLANBssManager::getCurrentBSS(this);
      int v13 = IOService::StringFromReturn(CurrentBSS, v11, &v20, 0);
      CStringNoCopy = 0;
      if (!v13) {
        CStringNoCopy = OSString::getCStringNoCopy(v20);
      }
      if (AppleBCMWLANIOReporting::getLogger(this))
      {
        AppleBCMWLANIOReporting::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v18 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
          CCLogStream::logAlert(v18, "[dk] %s@%d:Failed to report slice counters - reason %s\n", "reportWlCntPerSlice", 1120, CStringNoCopy);
        }
      }
      if (v20)
      {
        ((void (*)(OSString *))v20->release)(v20);
        uint64_t v20 = 0;
      }
    }
    else
    {
      CStringNoCopy = 0;
    }
    uint64_t v7 = AppleBCMWLANIOReportingPerSlice::reportWlCntSliceFrameCounters(this, a2, a3, a4);
    if (v7)
    {
      uint64_t v15 = (IOService *)AppleBCMWLANBssManager::getCurrentBSS(this);
      if (!IOService::StringFromReturn(v15, v7, &v20, 0)) {
        CStringNoCopy = OSString::getCStringNoCopy(v20);
      }
      if (AppleBCMWLANIOReporting::getLogger(this))
      {
        AppleBCMWLANIOReporting::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v19 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
          CCLogStream::logAlert(v19, "[dk] %s@%d:Failed to report slice frame counters - reason %s\n", "reportWlCntPerSlice", 1135, CStringNoCopy);
        }
      }
      if (v20) {
        ((void (*)(OSString *))v20->release)(v20);
      }
    }
  }
  else
  {
    return 0;
  }
  return v7;
}

uint64_t AppleBCMWLANIOReportingPerSlice::reportWlCntSliceCounters(AppleBCMWLANIOReporting *a1, OSData *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v77 = 0;
  uint64_t v7 = 3758097084;
  memset(v78, 170, sizeof(v78));
  AppleBCMWLANUtil::AutoreleasedAlignedOSData::AutoreleasedAlignedOSData((AppleBCMWLANUtil::AutoreleasedAlignedOSData *)v78, a2, 2);
  uint64_t v8 = v78[0];
  if (!v78[0])
  {
    if (AppleBCMWLANIOReporting::getLogger(a1))
    {
      AppleBCMWLANIOReporting::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
        CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to allocate alignedCounters\n");
      }
    }
    goto LABEL_38;
  }
  if ((int)a3 > 1) {
    goto LABEL_32;
  }
  uint64_t v9 = *((void *)a1 + 7);
  uint64_t v10 = a3;
  if (!*(unsigned char *)(v9 + a3 + 20))
  {
    if (!AppleBCMWLANIOReportingPerSlice::initWlCntReporter((uint64_t *)a1, a3))
    {
      *(unsigned char *)(*((void *)a1 + 7) + a3 + 20) = 1;
      uint64_t v9 = *((void *)a1 + 7);
      goto LABEL_6;
    }
    if (AppleBCMWLANIOReporting::getLogger(a1))
    {
      AppleBCMWLANIOReporting::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        BOOL v76 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
        CCLogStream::logEmergency(v76, "[dk] %s@%d:Failed to init LTE Coex reporters\n");
      }
    }
LABEL_38:
    unsigned int v77 = -536870212;
    goto LABEL_32;
  }
LABEL_6:
  int v11 = *(IOSimpleReporter **)(v9 + 8 * a3 + 296);
  uint64_t v12 = a3 << 56;
  unsigned __int16 CounterValueSafe = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x40uLL);
  unsigned int v77 = IOSimpleReporter::setValue(v11, (a3 << 56) ^ 0x536C5278436E4279, (uint64_t)CounterValueSafe);
  uint64_t v14 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * a3 + 296);
  uint64_t v15 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 4uLL);
  uint64_t v16 = 0;
  unsigned int v77 = IOSimpleReporter::setValue(v14, (a3 << 56) ^ 0x536C5478436E4279, (uint64_t)v15);
  do
  {
    uint64_t v17 = *((void *)a1 + 7) + 8 * v10;
    uint64_t v18 = *(IOSimpleReporter **)(v17 + 312);
    uint64_t v19 = *(void *)(v17 + 200) + v16;
    unint64_t v20 = *(void *)v19;
    uint64_t v21 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, *(unsigned int *)(v19 + 8));
    unsigned int v77 = IOSimpleReporter::setValue(v18, v20, (uint64_t)v21);
    v16 += 16;
  }
  while (v16 != 176);
  for (uint64_t i = 0; i != 256; i += 16)
  {
    uint64_t v23 = *((void *)a1 + 7) + 8 * v10;
    uint64_t v24 = *(IOSimpleReporter **)(v23 + 328);
    uint64_t v25 = *(void *)(v23 + 216) + i;
    unint64_t v26 = *(void *)v25;
    uint64_t v27 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, *(unsigned int *)(v25 + 8));
    unsigned int v77 = IOSimpleReporter::setValue(v24, v26, (uint64_t)v27);
  }
  uint64_t v28 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v10 + 344);
  uint64_t v29 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x1A4uLL);
  IOSimpleReporter::setValue(v28, v12 ^ 0x536C527850684469, (uint64_t)v29);
  for (uint64_t j = 0; j != 128; j += 16)
  {
    uint64_t v31 = *((void *)a1 + 7) + 8 * v10;
    unint64_t v32 = *(IOSimpleReporter **)(v31 + 360);
    uint64_t v33 = *(void *)(v31 + 232) + j;
    unint64_t v34 = *(void *)v33;
    uint64_t v35 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, *(unsigned int *)(v33 + 8));
    unsigned int v77 = IOSimpleReporter::setValue(v32, v34, (uint64_t)v35);
  }
  uint64_t v36 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v10 + 376);
  uint64_t v37 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x7CuLL);
  IOSimpleReporter::setValue(v36, v12 ^ 0x536C52784572546FLL, (uint64_t)v37);
  for (uint64_t k = 0; k != 176; k += 16)
  {
    uint64_t v39 = *((void *)a1 + 7) + 8 * v10;
    long long v40 = *(IOSimpleReporter **)(v39 + 392);
    uint64_t v41 = *(void *)(v39 + 248) + k;
    unint64_t v42 = *(void *)v41;
    int64_t v43 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, *(unsigned int *)(v41 + 8));
    unsigned int v77 = IOSimpleReporter::setValue(v40, v42, (uint64_t)v43);
  }
  for (uint64_t m = 0; m != 176; m += 16)
  {
    uint64_t v45 = *((void *)a1 + 7) + 8 * v10;
    uint64_t v46 = *(IOSimpleReporter **)(v45 + 408);
    uint64_t v47 = *(void *)(v45 + 264) + m;
    unint64_t v48 = *(void *)v47;
    uint64_t v49 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, *(unsigned int *)(v47 + 8));
    unsigned int v77 = IOSimpleReporter::setValue(v46, v48, (uint64_t)v49);
  }
  for (uint64_t n = 0; n != 224; n += 16)
  {
    uint64_t v51 = *((void *)a1 + 7) + 8 * v10;
    uint64_t v52 = *(IOSimpleReporter **)(v51 + 424);
    uint64_t v53 = *(void *)(v51 + 280) + n;
    unint64_t v54 = *(void *)v53;
    uint64_t v55 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, *(unsigned int *)(v53 + 8));
    uint64_t v56 = IOSimpleReporter::setValue(v52, v54, (uint64_t)v55);
    unsigned int v77 = v56;
  }
  uint64_t v7 = v56;
  if (a4)
  {
    *(void *)(a4 + 1144) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0);
    *(void *)(a4 + 1152) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 4uLL);
    *(void *)(a4 + 1160) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 8uLL);
    *(void *)(a4 + 1168) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0xCuLL);
    *(void *)(a4 + 1176) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x10uLL);
    *(void *)(a4 + 1184) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x14uLL);
    *(void *)(a4 + 1192) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x18uLL);
    *(void *)(a4 + 1200) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x1CuLL);
    *(void *)(a4 + 1208) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x20uLL);
    *(void *)(a4 + 1216) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x24uLL);
    *(void *)(a4 + 1224) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x28uLL);
    *(void *)(a4 + 1232) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x2CuLL);
    *(void *)(a4 + 1296) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x3CuLL);
    *(void *)(a4 + 1304) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x40uLL);
    *(void *)(a4 + 1312) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x44uLL);
    *(void *)(a4 + 1320) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x48uLL);
    *(void *)(a4 + 1336) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x250uLL);
    *(void *)(a4 + 1344) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x50uLL);
    *(void *)(a4 + 1352) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x54uLL);
    *(void *)(a4 + 1360) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x58uLL);
    *(void *)(a4 + 1368) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x5CuLL);
    *(void *)(a4 + 1376) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x60uLL);
    *(void *)(a4 + 1384) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x64uLL);
    *(void *)(a4 + 1392) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x68uLL);
    *(void *)(a4 + 1400) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x6CuLL);
    *(void *)(a4 + 1408) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x70uLL);
    *(void *)(a4 + 1416) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x74uLL);
    *(void *)(a4 + 1424) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x78uLL);
    *(void *)(a4 + 1248) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x30uLL);
    *(void *)(a4 + 1256) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x34uLL);
    *(void *)(a4 + 1264) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x38uLL);
    *(void *)(a4 + 1272) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x128uLL);
    *(void *)(a4 + 1280) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x1A8uLL);
    *(void *)(a4 + 1624) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x1A4uLL);
    int v57 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0xF8uLL);
    *(void *)(a4 + 1656) = (char *)v57
                           - (char *)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x1C0uLL);
    char v58 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0xFCuLL);
    *(void *)(a4 + 1664) = (char *)v58
                           - (char *)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x1C4uLL);
    size_t v59 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x100uLL);
    *(void *)(a4 + 1672) = (char *)v59
                           - (char *)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x1C8uLL);
    size_t v60 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x104uLL);
    *(void *)(a4 + 1680) = (char *)v60
                           - (char *)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x1CCuLL);
    int v61 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x108uLL);
    *(void *)(a4 + 1688) = (char *)v61
                           - (char *)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x1D0uLL);
    unsigned __int16 v62 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x10CuLL);
    *(void *)(a4 + 1696) = (char *)v62
                           - (char *)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x1D4uLL);
    int v63 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x110uLL);
    *(void *)(a4 + 1704) = (char *)v63
                           - (char *)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x1D8uLL);
    uint64_t v64 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x114uLL);
    *(void *)(a4 + 1712) = (char *)v64
                           - (char *)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x1DCuLL);
    unsigned __int16 v65 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x118uLL);
    *(void *)(a4 + 1720) = (char *)v65
                           - (char *)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x1E0uLL);
    unsigned int v66 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x11CuLL);
    *(void *)(a4 + 1728) = (char *)v66
                           - (char *)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x1E4uLL);
    int v67 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x120uLL);
    *(void *)(a4 + 1736) = (char *)v67
                           - (char *)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x1E8uLL);
    int v68 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x124uLL);
    *(void *)(a4 + 1744) = (char *)v68
                           - (char *)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x1ECuLL);
    if (OSData::getLength(v8) < 0x349)
    {
      *(void *)(a4 + 1752) = 0;
    }
    else
    {
      long long v69 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x348uLL);
      *(void *)(a4 + 1752) = v69;
      uint64_t v70 = *(void *)(a4 + 1688);
      *(void *)(a4 + 1688) = v70 - (void)v69;
      if (v70 | (unint64_t)v69)
      {
        unsigned int v71 = *(IO80211Controller **)(*((void *)a1 + 7) + 1504);
        if (v71 && IO80211Controller::isLQMOSLOGEnabled(v71)) {
          io80211_os_log();
        }
        unsigned int v72 = *(IO80211Controller **)(*((void *)a1 + 7) + 1504);
        if (v72 && IO80211Controller::isLQMIOLOGEnabled(v72)) {
          IOLog("LQM-WIFI: ccmpreplay=%llu ccmpreplay_qosdata_nobapol_rxretry=%llu\n", *(void *)(a4 + 1688), *(void *)(a4 + 1752));
        }
        BOOL v73 = *(IO80211Controller **)(*((void *)a1 + 7) + 1504);
        if (v73 && IO80211Controller::isLQMCCLOGEnabled(v73)) {
          IO80211Controller::logLQMToCC(*(IO80211Controller **)(*((void *)a1 + 7) + 1504), "LQM-WIFI: ccmpreplay=%llu ccmpreplay_qosdata_nobapol_rxretry=%llu\n", *(void *)(a4 + 1688), *(void *)(a4 + 1752));
        }
      }
    }
    *(void *)(a4 + 1760) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x1C0uLL);
    *(void *)(a4 + 1768) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x1C4uLL);
    *(void *)(a4 + 1776) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x1C8uLL);
    *(void *)(a4 + 1784) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x1CCuLL);
    *(void *)(a4 + 1792) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x1D0uLL);
    *(void *)(a4 + 1800) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x1D4uLL);
    *(void *)(a4 + 1808) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x1D8uLL);
    *(void *)(a4 + 1816) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x1DCuLL);
    *(void *)(a4 + 1824) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x1E0uLL);
    *(void *)(a4 + 1832) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x1E4uLL);
    *(void *)(a4 + 1840) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x1E8uLL);
    *(void *)(a4 + 1848) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0x1ECuLL);
    *(void *)(a4 + 1864) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0xC0uLL);
    *(void *)(a4 + 1872) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0xC4uLL);
    *(void *)(a4 + 1880) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0xC8uLL);
    *(void *)(a4 + 1888) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0xCCuLL);
    *(void *)(a4 + 1896) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0xD0uLL);
    *(void *)(a4 + 1904) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0xD4uLL);
    *(void *)(a4 + 1912) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0xD8uLL);
    *(void *)(a4 + 1920) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0xDCuLL);
    *(void *)(a4 + 1928) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0xE0uLL);
    *(void *)(a4 + 1936) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0xE4uLL);
    *(void *)(a4 + 1944) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0xE8uLL);
    *(void *)(a4 + 1952) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0xECuLL);
    *(void *)(a4 + 1960) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0xF0uLL);
    *(void *)(a4 + 1968) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0xF4uLL);
    *(void *)(a4 + 1992) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v8, 0xF0uLL);
    *(_DWORD *)(a4 + 1984) = 1;
    uint64_t v7 = v77;
  }
LABEL_32:
  AppleBCMWLANUtil::AutoreleasedAlignedOSData::~AutoreleasedAlignedOSData((AppleBCMWLANUtil::AutoreleasedAlignedOSData *)v78);
  return v7;
}

uint64_t AppleBCMWLANIOReportingPerSlice::reportWlCntSliceFrameCounters(AppleBCMWLANIOReporting *a1, OSData *a2, uint64_t a3, unsigned __int16 **a4)
{
  unsigned int v51 = 0;
  uint64_t v8 = a3;
  if (*(unsigned char *)(*((void *)a1 + 7) + a3 + 37)) {
    goto LABEL_4;
  }
  if (!AppleBCMWLANIOReportingPerSlice::initWlCntSliceFrameReporter(a1, a3))
  {
    *(unsigned char *)(*((void *)a1 + 7) + v8 + 37) = 1;
LABEL_4:
    for (uint64_t i = 0; i != 160; i += 16)
    {
      uint64_t v10 = *((void *)a1 + 7) + 8 * v8;
      int v11 = *(IOSimpleReporter **)(v10 + 440);
      uint64_t v12 = *(void *)(v10 + 168) + i;
      unint64_t v13 = *(void *)v12;
      unsigned __int16 CounterValueSafe = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, *(unsigned int *)(v12 + 8));
      unsigned int v51 = IOSimpleReporter::setValue(v11, v13, (uint64_t)CounterValueSafe);
    }
    for (uint64_t j = 0; j != 160; j += 16)
    {
      uint64_t v16 = *((void *)a1 + 7) + 8 * v8;
      uint64_t v17 = *(IOSimpleReporter **)(v16 + 456);
      uint64_t v18 = *(void *)(v16 + 184) + j;
      unint64_t v19 = *(void *)v18;
      unint64_t v20 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, *(unsigned int *)(v18 + 8));
      unsigned int v51 = IOSimpleReporter::setValue(v17, v19, (uint64_t)v20);
    }
    if (AppleBCMWLANCore::checkFor6GSupportCardCapability(*(AppleBCMWLANCore **)(*((void *)a1 + 7) + 1504)))
    {
      uint64_t v21 = *((void *)a1 + 7) + 8 * v8;
      uint64_t v22 = *(IOSimpleReporter **)(v21 + 456);
      uint64_t v23 = *(void *)(v21 + 184);
      unint64_t v24 = *(void *)(v23 + 176);
      uint64_t v25 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, *(unsigned int *)(v23 + 184));
      IOSimpleReporter::setValue(v22, v24, (uint64_t)v25);
    }
    unint64_t v26 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v8 + 472);
    uint64_t v27 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x258uLL);
    IOSimpleReporter::setValue(v26, (a3 << 56) ^ 0x536C547842415220, (uint64_t)v27);
    uint64_t v28 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v8 + 472);
    uint64_t v29 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x2E0uLL);
    IOSimpleReporter::setValue(v28, (a3 << 56) ^ 0x536C547820424120, (uint64_t)v29);
    long long v30 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v8 + 472);
    uint64_t v31 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x260uLL);
    IOSimpleReporter::setValue(v30, (a3 << 56) ^ 0x536C54785053506FLL, (uint64_t)v31);
    unint64_t v32 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v8 + 472);
    uint64_t v33 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0xD8uLL);
    IOSimpleReporter::setValue(v32, (a3 << 56) ^ 0x536C547852545320, (uint64_t)v33);
    unint64_t v34 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v8 + 488);
    uint64_t v35 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x25CuLL);
    IOSimpleReporter::setValue(v34, (a3 << 56) ^ 0x536C527842415220, (uint64_t)v35);
    uint64_t v36 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v8 + 488);
    uint64_t v37 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x2DCuLL);
    IOSimpleReporter::setValue(v36, (a3 << 56) ^ 0x536C527820424120, (uint64_t)v37);
    unsigned int v38 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v8 + 488);
    uint64_t v39 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x264uLL);
    IOSimpleReporter::setValue(v38, (a3 << 56) ^ 0x536C52785053506FLL, (uint64_t)v39);
    long long v40 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v8 + 504);
    uint64_t v41 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x268uLL);
    IOSimpleReporter::setValue(v40, (a3 << 56) ^ 0x536C5478444E554CLL, (uint64_t)v41);
    unint64_t v42 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v8 + 504);
    int64_t v43 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x270uLL);
    IOSimpleReporter::setValue(v42, (a3 << 56) ^ 0x536C547844514F53, (uint64_t)v43);
    uint64_t v44 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v8 + 520);
    uint64_t v45 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x26CuLL);
    IOSimpleReporter::setValue(v44, (a3 << 56) ^ 0x536C5278444E554CLL, (uint64_t)v45);
    uint64_t v46 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v8 + 520);
    uint64_t v47 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x274uLL);
    IOSimpleReporter::setValue(v46, (a3 << 56) ^ 0x536C527844514F53, (uint64_t)v47);
    if (a4)
    {
      a4[115] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x278uLL);
      a4[116] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x290uLL);
      a4[117] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x280uLL);
      a4[118] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x298uLL);
      a4[119] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x2B0uLL);
      a4[120] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x2B8uLL);
      a4[123] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x288uLL);
      a4[124] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x2A0uLL);
      a4[125] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x2A8uLL);
      a4[126] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x2C0uLL);
      a4[102] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x27CuLL);
      a4[103] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x294uLL);
      a4[104] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x284uLL);
      a4[105] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x29CuLL);
      a4[106] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x2B4uLL);
      a4[107] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x2BCuLL);
      if (AppleBCMWLANCore::checkFor6GSupportCardCapability(*(AppleBCMWLANCore **)(*((void *)a1 + 7)
                                                                                                + 1504)))
        a4[114] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x35CuLL);
      a4[110] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x28CuLL);
      a4[111] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x2A4uLL);
      a4[112] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x2ACuLL);
      a4[113] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x2C4uLL);
      a4[22] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x258uLL);
      a4[23] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x2E0uLL);
      a4[24] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x260uLL);
      a4[25] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0xD8uLL);
      *a4 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x25CuLL);
      a4[1] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x2DCuLL);
      a4[2] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x264uLL);
      a4[77] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x268uLL);
      a4[84] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x270uLL);
      a4[48] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x26CuLL);
      a4[55] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v51, (int *)4, a2, 0x274uLL);
    }
    return v51;
  }
  uint64_t v48 = 3758097084;
  if (AppleBCMWLANIOReporting::getLogger(a1))
  {
    AppleBCMWLANIOReporting::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
      CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to initiate Tx management reporter\n", "reportWlCntSliceFrameCounters", 1222);
    }
  }
  return v48;
}

uint64_t AppleBCMWLANIOReportingPerSlice::initWlCntSliceFrameReporter(AppleBCMWLANIOReporting *a1, uint64_t a2)
{
  uint64_t v4 = (char *)IOMallocZeroData();
  if (v4)
  {
    uint64_t v5 = v4;
    snprintf(v4, 0x32uLL, "%s %d", "Slice Frames: slice ", a2);
    uint64_t v6 = *((void *)a1 + 7);
    uint64_t v7 = a2;
    if (!*(unsigned char *)(v6 + a2 + 43))
    {
      if (AppleBCMWLANIOReportingPerSlice::initTxMngReporter(a1, a2))
      {
        uint64_t v8 = 3758097084;
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to initiate Tx management reporter\n");
          }
        }
        goto LABEL_28;
      }
      *(unsigned char *)(*((void *)a1 + 7) + a2 + 4AppleBCMWLANNearbyDeviceDiscoveryAdapter::free(this - 3) = 1;
      uint64_t v6 = *((void *)a1 + 7);
    }
    if (!*(unsigned char *)(v6 + a2 + 45))
    {
      if (AppleBCMWLANIOReportingPerSlice::initRxMngReporter(a1, a2))
      {
        uint64_t v8 = 3758097084;
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v46 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(v46, "[dk] %s@%d:Failed to initiate Rx management reporter\n");
          }
        }
        goto LABEL_28;
      }
      *(unsigned char *)(*((void *)a1 + 7) + a2 + 45) = 1;
      uint64_t v6 = *((void *)a1 + 7);
    }
    if (*(void *)(v6 + 8 * a2 + 472))
    {
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
      ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
      *(void *)(*((void *)a1 + 7) + 8 * a2 + 472) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v12);
      if (!*(void *)(*((void *)a1 + 7) + 8 * a2 + 472)) {
        goto LABEL_30;
      }
      Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
      OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 472));
      uint64_t v14 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 472);
      (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
      for (uint64_t i = 0; i != 64; i += 16)
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 472), *(void *)((char *)&kSliceCountersTxCtlReport + i) ^ (a2 << 56), *(const char **)((char *)&kSliceCountersTxCtlReport + i + 8));
      AddReporterCallbacuint64_t k = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
      uint64_t Target = AppleBCMWLANIOReporting::getTarget(a1);
      uint64_t v18 = AppleBCMWLANBssManager::getCurrentBSS(a1);
      uint64_t v8 = AddReporterCallback(Target, v18, *(void *)(*((void *)a1 + 7) + 8 * a2 + 472), v5, "Tx Control Frame Counters");
      uint64_t v6 = *((void *)a1 + 7);
    }
    if (!*(void *)(v6 + 8 * a2 + 488))
    {
      unint64_t v19 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
      unint64_t v20 = (IOSimpleReporter *)IO80211Controller::getReporterProvider(v19);
      *(void *)(*((void *)a1 + 7) + 8 * a2 + 488) = IOSimpleReporter::with(v20, (IOService *)0x8010, 0, v21);
      if (!*(void *)(*((void *)a1 + 7) + 8 * a2 + 488)) {
        goto LABEL_30;
      }
      uint64_t v22 = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
      OSSet::setObject(v22, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 488));
      uint64_t v23 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 488);
      (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
      for (uint64_t j = 0; j != 48; j += 16)
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 488), *(void *)((char *)&kSliceCountersRxCtlReport + j) ^ (a2 << 56), *(const char **)((char *)&kSliceCountersRxCtlReport + j + 8));
      uint64_t v25 = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
      uint64_t v26 = AppleBCMWLANIOReporting::getTarget(a1);
      uint64_t v27 = AppleBCMWLANBssManager::getCurrentBSS(a1);
      uint64_t v8 = v25(v26, v27, *(void *)(*((void *)a1 + 7) + 8 * a2 + 488), v5, "Rx Control Frame Counters");
      uint64_t v6 = *((void *)a1 + 7);
    }
    if (*(void *)(v6 + 8 * a2 + 504))
    {
LABEL_25:
      if (!*(void *)(v6 + 8 * a2 + 520))
      {
        uint64_t v36 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
        uint64_t v37 = (IOSimpleReporter *)IO80211Controller::getReporterProvider(v36);
        *(void *)(*((void *)a1 + 7) + 8 * a2 + 520) = IOSimpleReporter::with(v37, (IOService *)0x8010, 0, v38);
        uint64_t v8 = 3758097084;
        if (*(void *)(*((void *)a1 + 7) + 8 * a2 + 520))
        {
          uint64_t v39 = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
          OSSet::setObject(v39, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 520));
          uint64_t v40 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 520);
          (*(void (**)(uint64_t))(*(void *)v40 + 16))(v40);
          IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 520), (a2 << 56) ^ 0x536C5278444E554CLL, "Rx NULL");
          IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 520), (a2 << 56) ^ 0x536C527844514F53, "Rx QOS NULL");
          uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
          uint64_t v42 = AppleBCMWLANIOReporting::getTarget(a1);
          uint64_t v43 = AppleBCMWLANBssManager::getCurrentBSS(a1);
          uint64_t v8 = v41(v42, v43, *(void *)(*((void *)a1 + 7) + 8 * v7 + 520), v5, "Rx Data Frame Counters");
        }
      }
      goto LABEL_28;
    }
    uint64_t v28 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
    uint64_t v29 = (IOSimpleReporter *)IO80211Controller::getReporterProvider(v28);
    *(void *)(*((void *)a1 + 7) + 8 * a2 + 504) = IOSimpleReporter::with(v29, (IOService *)0x8010, 0, v30);
    if (*(void *)(*((void *)a1 + 7) + 8 * a2 + 504))
    {
      uint64_t v31 = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
      OSSet::setObject(v31, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 504));
      uint64_t v32 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 504);
      (*(void (**)(uint64_t))(*(void *)v32 + 16))(v32);
      IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 504), (a2 << 56) ^ 0x536C5478444E554CLL, "Tx NULL");
      IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 504), (a2 << 56) ^ 0x536C547844514F53, "Tx QOS NULL");
      uint64_t v33 = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
      uint64_t v34 = AppleBCMWLANIOReporting::getTarget(a1);
      uint64_t v35 = AppleBCMWLANBssManager::getCurrentBSS(a1);
      uint64_t v8 = v33(v34, v35, *(void *)(*((void *)a1 + 7) + 8 * a2 + 504), v5, "Tx Data Frame Counters");
      uint64_t v6 = *((void *)a1 + 7);
      goto LABEL_25;
    }
LABEL_30:
    uint64_t v8 = 3758097084;
LABEL_28:
    IOFreeData();
    return v8;
  }
  uint64_t v8 = 3758097084;
  if (AppleBCMWLANIOReporting::getLogger(a1))
  {
    AppleBCMWLANIOReporting::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v9 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
      CCLogStream::logEmergency(v9, "[dk] %s@%d:Failed to alloc AppleBCMWLANUtil::AutoreleasedBuffer\n", "initWlCntSliceFrameReporter", 1160);
    }
  }
  return v8;
}

uint64_t AppleBCMWLANIOReportingPerSlice::initWlCntReporter(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = 3758097084;
  uint64_t v5 = (char *)IOMallocZeroData();
  if (v5)
  {
    uint64_t v6 = v5;
    if ((int)a2 > 1) {
      goto LABEL_77;
    }
    snprintf(v5, 0x32uLL, "%s %d", "Slice", a2);
    uint64_t v8 = a1 + 7;
    uint64_t v7 = a1[7];
    if (*(void *)(v7 + 8 * a2 + 296))
    {
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS((AppleBCMWLANBssManager *)a1);
      ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
      *(void *)(a1[7] + 8 * a2 + 296) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v13);
      if (!*(void *)(a1[7] + 8 * a2 + 296)) {
        goto LABEL_77;
      }
      Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter((AppleBCMWLANIOReporting *)a1);
      OSSet::setObject(Reporter, *(const OSMetaClassBase **)(a1[7] + 8 * a2 + 296));
      uint64_t v15 = *(void *)(a1[7] + 8 * a2 + 296);
      (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
      IOReporter::addChannel(*(IOReporter **)(a1[7] + 8 * a2 + 296), (a2 << 56) ^ 0x536C5478436E4279, "Tx Bytes");
      IOReporter::addChannel(*(IOReporter **)(a1[7] + 8 * a2 + 296), (a2 << 56) ^ 0x536C5278436E4279, "Rx Bytes");
      AddReporterCallbacuint64_t k = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback((AppleBCMWLANIOReporting *)a1);
      uint64_t Target = AppleBCMWLANIOReporting::getTarget((AppleBCMWLANIOReporting *)a1);
      uint64_t v18 = AppleBCMWLANBssManager::getCurrentBSS((AppleBCMWLANBssManager *)a1);
      uint64_t v9 = AddReporterCallback(Target, v18, *(void *)(a1[7] + 8 * a2 + 296), v6, "Bytes Transferred");
      uint64_t v7 = a1[7];
    }
    if (!*(void *)(v7 + 8 * a2 + 312))
    {
      unint64_t v19 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS((AppleBCMWLANBssManager *)a1);
      unint64_t v20 = (IOSimpleReporter *)IO80211Controller::getReporterProvider(v19);
      *(void *)(a1[7] + 8 * a2 + 312) = IOSimpleReporter::with(v20, (IOService *)0x8010, 0, v21);
      if (!*(void *)(a1[7] + 8 * a2 + 312)) {
        goto LABEL_77;
      }
      uint64_t v22 = (OSSet *)AppleBCMWLANIOReporting::getReporter((AppleBCMWLANIOReporting *)a1);
      OSSet::setObject(v22, *(const OSMetaClassBase **)(a1[7] + 8 * a2 + 312));
      uint64_t v23 = *(void *)(a1[7] + 8 * a2 + 312);
      (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
      for (uint64_t i = 0; i != 22; i += 2)
        IOReporter::addChannel(*(IOReporter **)(*v8 + 8 * a2 + 312), kSliceCountersTxReport[i] ^ (a2 << 56), (const char *)kSliceCountersTxReport[i + 1]);
      uint64_t v25 = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback((AppleBCMWLANIOReporting *)a1);
      uint64_t v26 = AppleBCMWLANIOReporting::getTarget((AppleBCMWLANIOReporting *)a1);
      uint64_t v27 = AppleBCMWLANBssManager::getCurrentBSS((AppleBCMWLANBssManager *)a1);
      uint64_t v9 = v25(v26, v27, *(void *)(a1[7] + 8 * a2 + 312), v6, "Tx Counters");
      uint64_t v7 = a1[7];
    }
    if (!*(void *)(v7 + 8 * a2 + 200))
    {
      *(void *)(*v8 + 8 * a2 + 200) = IOMallocZeroData();
      if (!*(void *)(*v8 + 8 * a2 + 200))
      {
        if (AppleBCMWLANIOReporting::getLogger((AppleBCMWLANIOReporting *)a1))
        {
          AppleBCMWLANIOReporting::getLogger((AppleBCMWLANIOReporting *)a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger((AppleBCMWLANIOReporting *)a1);
            CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to alloc ivars->fSliceCountersTxCountersLUT\n");
          }
        }
        goto LABEL_77;
      }
      for (uint64_t j = 0; j != 22; j += 2)
        *(void *)(*(void *)(*v8 + 8 * a2 + 200) + j * 8) = kSliceCountersTxReport[j] ^ (a2 << 56);
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 200) + 8) = 0;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 200) + 24) = 8;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 200) + 40) = 12;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 200) + 56) = 36;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 200) + 72) = 16;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 200) + 88) = 24;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 200) + 104) = 28;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 200) + 120) = 20;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 200) + 136) = 32;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 200) + 152) = 40;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 200) + 168) = 44;
      uint64_t v7 = *v8;
    }
    if (!*(void *)(v7 + 8 * a2 + 328))
    {
      uint64_t v29 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS((AppleBCMWLANBssManager *)a1);
      unint64_t v30 = (IOSimpleReporter *)IO80211Controller::getReporterProvider(v29);
      *(void *)(a1[7] + 8 * a2 + 328) = IOSimpleReporter::with(v30, (IOService *)0x8010, 0, v31);
      if (!*(void *)(a1[7] + 8 * a2 + 328)) {
        goto LABEL_77;
      }
      uint64_t v32 = (OSSet *)AppleBCMWLANIOReporting::getReporter((AppleBCMWLANIOReporting *)a1);
      OSSet::setObject(v32, *(const OSMetaClassBase **)(a1[7] + 8 * a2 + 328));
      uint64_t v33 = *(void *)(a1[7] + 8 * a2 + 328);
      (*(void (**)(uint64_t))(*(void *)v33 + 16))(v33);
      for (uint64_t k = 0; k != 32; k += 2)
        IOReporter::addChannel(*(IOReporter **)(*v8 + 8 * a2 + 328), kSliceCountersRxReport[k] ^ (a2 << 56), (const char *)kSliceCountersRxReport[k + 1]);
      uint64_t v35 = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback((AppleBCMWLANIOReporting *)a1);
      uint64_t v36 = AppleBCMWLANIOReporting::getTarget((AppleBCMWLANIOReporting *)a1);
      uint64_t v37 = AppleBCMWLANBssManager::getCurrentBSS((AppleBCMWLANBssManager *)a1);
      uint64_t v9 = v35(v36, v37, *(void *)(a1[7] + 8 * a2 + 328), v6, "Rx Counters");
      uint64_t v7 = a1[7];
    }
    if (!*(void *)(v7 + 8 * a2 + 216))
    {
      *(void *)(*v8 + 8 * a2 + 216) = IOMallocZeroData();
      if (!*(void *)(*v8 + 8 * a2 + 216))
      {
        if (AppleBCMWLANIOReporting::getLogger((AppleBCMWLANIOReporting *)a1))
        {
          AppleBCMWLANIOReporting::getLogger((AppleBCMWLANIOReporting *)a1);
          if (CCLogStream::shouldLog())
          {
            int v89 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger((AppleBCMWLANIOReporting *)a1);
            CCLogStream::logEmergency(v89, "[dk] %s@%d:Failed to alloc ivars->fSliceCountersRxCountersLUT\n");
          }
        }
        goto LABEL_77;
      }
      for (uint64_t m = 0; m != 32; m += 2)
        *(void *)(*(void *)(*v8 + 8 * a2 + 216) + m * 8) = kSliceCountersRxReport[m] ^ (a2 << 56);
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 216) + 8) = 60;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 216) + 24) = 68;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 216) + 56) = 76;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 216) + 136) = 92;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 216) + 152) = 96;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 216) + 40) = 72;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 216) + 88) = 80;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 216) + 104) = 84;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 216) + 120) = 88;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 216) + 168) = 100;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 216) + 184) = 104;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 216) + 200) = 108;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 216) + 216) = 112;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 216) + 232) = 116;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 216) + 248) = 120;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 216) + 72) = 592;
      uint64_t v7 = *v8;
    }
    if (!*(void *)(v7 + 8 * a2 + 344))
    {
      uint64_t v39 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS((AppleBCMWLANBssManager *)a1);
      uint64_t v40 = (IOSimpleReporter *)IO80211Controller::getReporterProvider(v39);
      *(void *)(a1[7] + 8 * a2 + 344) = IOSimpleReporter::with(v40, (IOService *)0x8010, 0, v41);
      if (!*(void *)(a1[7] + 8 * a2 + 344)) {
        goto LABEL_77;
      }
      uint64_t v42 = (OSSet *)AppleBCMWLANIOReporting::getReporter((AppleBCMWLANIOReporting *)a1);
      OSSet::setObject(v42, *(const OSMetaClassBase **)(a1[7] + 8 * a2 + 344));
      uint64_t v43 = *(void *)(a1[7] + 8 * a2 + 344);
      (*(void (**)(uint64_t))(*(void *)v43 + 16))(v43);
      IOReporter::addChannel(*(IOReporter **)(a1[7] + 8 * a2 + 344), (a2 << 56) ^ 0x536C527850684469, "Rx RF Disabled");
      uint64_t v44 = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback((AppleBCMWLANIOReporting *)a1);
      uint64_t v45 = AppleBCMWLANIOReporting::getTarget((AppleBCMWLANIOReporting *)a1);
      uint64_t v46 = AppleBCMWLANBssManager::getCurrentBSS((AppleBCMWLANBssManager *)a1);
      uint64_t v9 = v44(v45, v46, *(void *)(a1[7] + 8 * a2 + 344), v6, "Rx Phy Error Counters");
      uint64_t v7 = a1[7];
    }
    if (!*(void *)(v7 + 8 * a2 + 360))
    {
      uint64_t v47 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS((AppleBCMWLANBssManager *)a1);
      uint64_t v48 = (IOSimpleReporter *)IO80211Controller::getReporterProvider(v47);
      *(void *)(a1[7] + 8 * a2 + 360) = IOSimpleReporter::with(v48, (IOService *)0x8010, 0, v49);
      if (!*(void *)(a1[7] + 8 * a2 + 360)) {
        goto LABEL_77;
      }
      uint64_t v50 = (OSSet *)AppleBCMWLANIOReporting::getReporter((AppleBCMWLANIOReporting *)a1);
      OSSet::setObject(v50, *(const OSMetaClassBase **)(a1[7] + 8 * a2 + 360));
      uint64_t v51 = *(void *)(a1[7] + 8 * a2 + 360);
      (*(void (**)(uint64_t))(*(void *)v51 + 16))(v51);
      for (uint64_t n = 0; n != 16; n += 2)
        IOReporter::addChannel(*(IOReporter **)(*v8 + 8 * a2 + 360), kSliceCountersTxErrorReport[n] ^ (a2 << 56), (const char *)kSliceCountersTxErrorReport[n + 1]);
      uint64_t v53 = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback((AppleBCMWLANIOReporting *)a1);
      uint64_t v54 = AppleBCMWLANIOReporting::getTarget((AppleBCMWLANIOReporting *)a1);
      uint64_t v55 = AppleBCMWLANBssManager::getCurrentBSS((AppleBCMWLANBssManager *)a1);
      uint64_t v9 = v53(v54, v55, *(void *)(a1[7] + 8 * a2 + 360), v6, "Tx Error Counters");
      uint64_t v7 = a1[7];
    }
    if (!*(void *)(v7 + 8 * a2 + 232))
    {
      *(void *)(*v8 + 8 * a2 + 232) = IOMallocZeroData();
      if (!*(void *)(*v8 + 8 * a2 + 232))
      {
        if (!AppleBCMWLANIOReporting::getLogger((AppleBCMWLANIOReporting *)a1)) {
          goto LABEL_77;
        }
        AppleBCMWLANIOReporting::getLogger((AppleBCMWLANIOReporting *)a1);
        if (!CCLogStream::shouldLog()) {
          goto LABEL_77;
        }
        goto LABEL_93;
      }
      for (iuint64_t i = 0; ii != 16; ii += 2)
        *(void *)(*(void *)(*v8 + 8 * a2 + 232) + ii * 8) = kSliceCountersTxErrorReport[ii] ^ (a2 << 56);
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 232) + 8) = 48;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 232) + 24) = 52;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 232) + 40) = 56;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 232) + 56) = 296;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 232) + 72) = 424;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 232) + 88) = 300;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 232) + 104) = 728;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 232) + 120) = 304;
      uint64_t v7 = *v8;
    }
    if (!*(unsigned char *)(v7 + a2 + 41))
    {
      if (AppleBCMWLANIOReportingPerSlice::initRxErrorReporter((AppleBCMWLANBssManager *)a1, a2))
      {
        if (AppleBCMWLANIOReporting::getLogger((AppleBCMWLANIOReporting *)a1))
        {
          AppleBCMWLANIOReporting::getLogger((AppleBCMWLANIOReporting *)a1);
          if (CCLogStream::shouldLog())
          {
            int v90 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger((AppleBCMWLANIOReporting *)a1);
            CCLogStream::logEmergency(v90, "[dk] %s@%d:Failed to initiate Rx error reporter\n");
          }
        }
        goto LABEL_77;
      }
      uint64_t v9 = 0;
      *(unsigned char *)(*v8 + a2 + 41) = 1;
      uint64_t v7 = *v8;
    }
    if (!*(void *)(v7 + 8 * a2 + 392))
    {
      int v57 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS((AppleBCMWLANBssManager *)a1);
      char v58 = (IOSimpleReporter *)IO80211Controller::getReporterProvider(v57);
      *(void *)(a1[7] + 8 * a2 + 392) = IOSimpleReporter::with(v58, (IOService *)0x8010, 0, v59);
      if (!*(void *)(a1[7] + 8 * a2 + 392)) {
        goto LABEL_77;
      }
      size_t v60 = (OSSet *)AppleBCMWLANIOReporting::getReporter((AppleBCMWLANIOReporting *)a1);
      OSSet::setObject(v60, *(const OSMetaClassBase **)(a1[7] + 8 * a2 + 392));
      uint64_t v61 = *(void *)(a1[7] + 8 * a2 + 392);
      (*(void (**)(uint64_t))(*(void *)v61 + 16))(v61);
      for (juint64_t j = 0; jj != 22; jj += 2)
        IOReporter::addChannel(*(IOReporter **)(*v8 + 8 * a2 + 392), kSliceCountersWPA2Report[jj] ^ (a2 << 56), (const char *)kSliceCountersWPA2Report[jj + 1]);
      int v63 = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback((AppleBCMWLANIOReporting *)a1);
      uint64_t v64 = AppleBCMWLANIOReporting::getTarget((AppleBCMWLANIOReporting *)a1);
      uint64_t v65 = AppleBCMWLANBssManager::getCurrentBSS((AppleBCMWLANBssManager *)a1);
      uint64_t v9 = v63(v64, v65, *(void *)(a1[7] + 8 * a2 + 392), v6, "WPA2 Counters");
      uint64_t v7 = a1[7];
    }
    if (*(void *)(v7 + 8 * a2 + 248)) {
      goto LABEL_56;
    }
    *(void *)(*v8 + 8 * a2 + 248) = IOMallocZeroData();
    if (*(void *)(*v8 + 8 * a2 + 248))
    {
      for (kuint64_t k = 0; kk != 22; kk += 2)
        *(void *)(*(void *)(*v8 + 8 * a2 + 248) + kk * 8) = kSliceCountersWPA2Report[kk] ^ (a2 << 56);
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 248) + 8) = 248;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 248) + 24) = 252;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 248) + 40) = 256;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 248) + 56) = 260;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 248) + 72) = 264;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 248) + 88) = 268;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 248) + 104) = 272;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 248) + 120) = 280;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 248) + 136) = 284;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 248) + 152) = 288;
      *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 248) + 168) = 292;
      uint64_t v7 = *v8;
LABEL_56:
      if (!*(void *)(v7 + 8 * a2 + 408))
      {
        int v67 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS((AppleBCMWLANBssManager *)a1);
        int v68 = (IOSimpleReporter *)IO80211Controller::getReporterProvider(v67);
        *(void *)(a1[7] + 8 * a2 + 408) = IOSimpleReporter::with(v68, (IOService *)0x8010, 0, v69);
        if (!*(void *)(a1[7] + 8 * a2 + 408)) {
          goto LABEL_77;
        }
        uint64_t v70 = (OSSet *)AppleBCMWLANIOReporting::getReporter((AppleBCMWLANIOReporting *)a1);
        OSSet::setObject(v70, *(const OSMetaClassBase **)(a1[7] + 8 * a2 + 408));
        uint64_t v71 = *(void *)(a1[7] + 8 * a2 + 408);
        (*(void (**)(uint64_t))(*(void *)v71 + 16))(v71);
        for (muint64_t m = 0; mm != 22; mm += 2)
          IOReporter::addChannel(*(IOReporter **)(*v8 + 8 * a2 + 408), kSliceCountersmcastWPA2Report[mm] ^ (a2 << 56), (const char *)kSliceCountersmcastWPA2Report[mm + 1]);
        BOOL v73 = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback((AppleBCMWLANIOReporting *)a1);
        uint64_t v74 = AppleBCMWLANIOReporting::getTarget((AppleBCMWLANIOReporting *)a1);
        uint64_t v75 = AppleBCMWLANBssManager::getCurrentBSS((AppleBCMWLANBssManager *)a1);
        uint64_t v9 = v73(v74, v75, *(void *)(a1[7] + 8 * a2 + 408), v6, "WPA2 Multicast Counters");
        uint64_t v7 = a1[7];
      }
      if (!*(void *)(v7 + 8 * a2 + 264))
      {
        *(void *)(*v8 + 8 * a2 + 264) = IOMallocZeroData();
        if (!*(void *)(*v8 + 8 * a2 + 264))
        {
          if (!AppleBCMWLANIOReporting::getLogger((AppleBCMWLANIOReporting *)a1)) {
            goto LABEL_77;
          }
          AppleBCMWLANIOReporting::getLogger((AppleBCMWLANIOReporting *)a1);
          if (!CCLogStream::shouldLog()) {
            goto LABEL_77;
          }
          goto LABEL_99;
        }
        for (nuint64_t n = 0; nn != 22; nn += 2)
          *(void *)(*(void *)(*v8 + 8 * a2 + 264) + nn * 8) = kSliceCountersmcastWPA2Report[nn] ^ (a2 << 56);
        *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 264) + 8) = 448;
        *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 264) + 24) = 452;
        *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 264) + 40) = 456;
        *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 264) + 56) = 460;
        *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 264) + 72) = 464;
        *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 264) + 88) = 468;
        *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 264) + 104) = 472;
        *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 264) + 120) = 480;
        *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 264) + 136) = 484;
        *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 264) + 152) = 488;
        *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 264) + 168) = 492;
        uint64_t v7 = *v8;
      }
      if (*(void *)(v7 + 8 * a2 + 424))
      {
LABEL_71:
        if (*(void *)(v7 + 8 * a2 + 280))
        {
LABEL_76:
          uint64_t v4 = v9;
          goto LABEL_77;
        }
        *(void *)(*v8 + 8 * a2 + 280) = IOMallocZeroData();
        if (*(void *)(*v8 + 8 * a2 + 280))
        {
          for (uint64_t i1 = 0; i1 != 28; i1 += 2)
            *(void *)(*(void *)(*v8 + 8 * a2 + 280) + i1 * 8) = kSliceCountersdot11Report[i1] ^ (a2 << 56);
          *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 280) + 8) = 192;
          *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 280) + 24) = 240;
          *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 280) + 40) = 196;
          *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 280) + 56) = 200;
          *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 280) + 72) = 204;
          *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 280) + 88) = 208;
          *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 280) + 104) = 212;
          *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 280) + 120) = 216;
          *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 280) + 136) = 220;
          *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 280) + 152) = 224;
          *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 280) + 168) = 228;
          *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 280) + 184) = 232;
          *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 280) + 200) = 236;
          *(_DWORD *)(*(void *)(*v8 + 8 * a2 + 280) + 216) = 244;
          goto LABEL_76;
        }
        if (!AppleBCMWLANIOReporting::getLogger((AppleBCMWLANIOReporting *)a1)) {
          goto LABEL_77;
        }
        AppleBCMWLANIOReporting::getLogger((AppleBCMWLANIOReporting *)a1);
        if (!CCLogStream::shouldLog()) {
          goto LABEL_77;
        }
LABEL_99:
        int v92 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger((AppleBCMWLANIOReporting *)a1);
        CCLogStream::logEmergency(v92, "[dk] %s@%d:Failed to alloc ivars->fSliceCountersWPA2mcastCountersLUT\n");
        goto LABEL_77;
      }
      unsigned int v77 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS((AppleBCMWLANBssManager *)a1);
      char v78 = (IOSimpleReporter *)IO80211Controller::getReporterProvider(v77);
      *(void *)(a1[7] + 8 * a2 + 424) = IOSimpleReporter::with(v78, (IOService *)0x8010, 0, v79);
      if (*(void *)(a1[7] + 8 * a2 + 424))
      {
        unsigned int v80 = (OSSet *)AppleBCMWLANIOReporting::getReporter((AppleBCMWLANIOReporting *)a1);
        OSSet::setObject(v80, *(const OSMetaClassBase **)(a1[7] + 8 * a2 + 424));
        uint64_t v81 = *(void *)(a1[7] + 8 * a2 + 424);
        (*(void (**)(uint64_t))(*(void *)v81 + 16))(v81);
        for (uint64_t i2 = 0; i2 != 28; i2 += 2)
          IOReporter::addChannel(*(IOReporter **)(*v8 + 8 * a2 + 424), kSliceCountersdot11Report[i2] ^ (a2 << 56), (const char *)kSliceCountersdot11Report[i2 + 1]);
        char v83 = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback((AppleBCMWLANIOReporting *)a1);
        uint64_t v84 = AppleBCMWLANIOReporting::getTarget((AppleBCMWLANIOReporting *)a1);
        uint64_t v85 = AppleBCMWLANBssManager::getCurrentBSS((AppleBCMWLANBssManager *)a1);
        uint64_t v9 = v83(v84, v85, *(void *)(a1[7] + 8 * a2 + 424), v6, "dot11 MIB Counters");
        uint64_t v7 = a1[7];
        goto LABEL_71;
      }
LABEL_77:
      IOFreeData();
      return v4;
    }
    if (!AppleBCMWLANIOReporting::getLogger((AppleBCMWLANIOReporting *)a1)) {
      goto LABEL_77;
    }
    AppleBCMWLANIOReporting::getLogger((AppleBCMWLANIOReporting *)a1);
    if (!CCLogStream::shouldLog()) {
      goto LABEL_77;
    }
LABEL_93:
    int v91 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger((AppleBCMWLANIOReporting *)a1);
    CCLogStream::logEmergency(v91, "[dk] %s@%d:Failed to alloc ivars->fSliceCountersTxErrorCountersLUT\n");
    goto LABEL_77;
  }
  if (AppleBCMWLANIOReporting::getLogger((AppleBCMWLANIOReporting *)a1))
  {
    AppleBCMWLANIOReporting::getLogger((AppleBCMWLANIOReporting *)a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v10 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger((AppleBCMWLANIOReporting *)a1);
      CCLogStream::logEmergency(v10, "[dk] %s@%d:Failed to alloc AppleBCMWLANUtil::AutoreleasedBuffer\n", "initWlCntReporter", 1334);
    }
  }
  return v4;
}

uint64_t AppleBCMWLANIOReportingPerSlice::initHeWlCntReporter(AppleBCMWLANBssManager *a1, uint64_t a2)
{
  uint64_t v4 = 3758097084;
  uint64_t v5 = (char *)IOMallocZeroData();
  if (v5)
  {
    uint64_t v6 = v5;
    if ((int)a2 <= 1)
    {
      snprintf(v5, 0x32uLL, "%s %d", "Slice", a2);
      uint64_t v7 = *((void *)a1 + 7);
      uint64_t v8 = a2;
      if (!*(void *)(v7 + 8 * a2 + 1352))
      {
        uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
        ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
        *(void *)(*((void *)a1 + 7) + 8 * a2 + 1352) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v11);
        if (!*(void *)(*((void *)a1 + 7) + 8 * a2 + 1352)) {
          goto LABEL_18;
        }
        Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
        OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 1352));
        uint64_t v13 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 1352);
        (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
        for (uint64_t i = 0; i != 112; i += 16)
          IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 1352), *(void *)((char *)&kSliceCountersTxRuReport + i) ^ (a2 << 56), *(const char **)((char *)&kSliceCountersTxRuReport + i + 8));
        AddReporterCallbacuint64_t k = (void (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
        uint64_t Target = AppleBCMWLANIOReporting::getTarget(a1);
        uint64_t v17 = AppleBCMWLANBssManager::getCurrentBSS(a1);
        AddReporterCallback(Target, v17, *(void *)(*((void *)a1 + 7) + 8 * a2 + 1352), v6, "Tx OFDMA RU Counters");
        uint64_t v7 = *((void *)a1 + 7);
      }
      if (*(void *)(v7 + 8 * a2 + 1368))
      {
        uint64_t v18 = a2 << 56;
LABEL_17:
        unsigned int v84 = IOReporter::addChannel(*(IOReporter **)(v7 + 8 * a2 + 312), v18 ^ 0x536C547846726167, "Tx dynamic Frgamented packets");
        snprintf(v6, 0x32uLL, "%s %d", "Slice", a2);
        uint64_t v29 = (void (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getRemoveReporterCallback(a1);
        uint64_t v30 = AppleBCMWLANIOReporting::getTarget(a1);
        uint64_t v31 = AppleBCMWLANBssManager::getCurrentBSS(a1);
        v29(v30, v31, 0, v6, "Tx Counters");
        uint64_t v32 = (void (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
        uint64_t v33 = AppleBCMWLANIOReporting::getTarget(a1);
        uint64_t v34 = AppleBCMWLANBssManager::getCurrentBSS(a1);
        v32(v33, v34, *(void *)(*((void *)a1 + 7) + 8 * a2 + 312), v6, "Tx Counters");
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 328), v18 ^ 0x536C527844467261, "Rx dynamic Frgamented packets");
        snprintf(v6, 0x32uLL, "%s %d", "Slice", a2);
        uint64_t v35 = (void (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getRemoveReporterCallback(a1);
        uint64_t v36 = AppleBCMWLANIOReporting::getTarget(a1);
        uint64_t v37 = AppleBCMWLANBssManager::getCurrentBSS(a1);
        v35(v36, v37, 0, v6, "Rx Counters");
        unint64_t v38 = (void (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
        uint64_t v39 = AppleBCMWLANIOReporting::getTarget(a1);
        uint64_t v40 = AppleBCMWLANBssManager::getCurrentBSS(a1);
        v38(v39, v40, *(void *)(*((void *)a1 + 7) + 8 * a2 + 328), v6, "Rx Counters");
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 344), v18 ^ 0x536C436C724D6973, "Color miss Count");
        snprintf(v6, 0x32uLL, "%s %d", "Slice", a2);
        unint64_t v41 = (void (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getRemoveReporterCallback(a1);
        uint64_t v42 = AppleBCMWLANIOReporting::getTarget(a1);
        uint64_t v43 = AppleBCMWLANBssManager::getCurrentBSS(a1);
        v41(v42, v43, 0, v6, "Rx Phy Error Counters");
        uint64_t v44 = (void (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
        uint64_t v45 = AppleBCMWLANIOReporting::getTarget(a1);
        uint64_t v46 = AppleBCMWLANBssManager::getCurrentBSS(a1);
        v44(v45, v46, *(void *)(*((void *)a1 + 7) + 8 * a2 + 344), v6, "Rx Phy Error Counters");
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 360), v18 ^ 0x536C547267454443, "Tx cancelled because CS Req");
        snprintf(v6, 0x32uLL, "%s %d", "Slice", a2);
        uint64_t v47 = (void (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getRemoveReporterCallback(a1);
        uint64_t v48 = AppleBCMWLANIOReporting::getTarget(a1);
        uint64_t v49 = AppleBCMWLANBssManager::getCurrentBSS(a1);
        v47(v48, v49, 0, v6, "Tx Error Counters");
        uint64_t v50 = (void (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
        uint64_t v51 = AppleBCMWLANIOReporting::getTarget(a1);
        uint64_t v52 = AppleBCMWLANBssManager::getCurrentBSS(a1);
        v50(v51, v52, *(void *)(*((void *)a1 + 7) + 8 * a2 + 360), v6, "Tx Error Counters");
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 376), v18 ^ 0x536C5772674E5353, "Wrong NSS");
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 376), v18 ^ 0x536C555354726752, "Unsupported Trigger Rate");
        snprintf(v6, 0x32uLL, "%s %d", "Slice", a2);
        uint64_t v53 = (void (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getRemoveReporterCallback(a1);
        uint64_t v54 = AppleBCMWLANIOReporting::getTarget(a1);
        uint64_t v55 = AppleBCMWLANBssManager::getCurrentBSS(a1);
        v53(v54, v55, 0, v6, "Rx Error Counters");
        uint64_t v56 = (void (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
        uint64_t v57 = AppleBCMWLANIOReporting::getTarget(a1);
        uint64_t v58 = AppleBCMWLANBssManager::getCurrentBSS(a1);
        v56(v57, v58, *(void *)(*((void *)a1 + 7) + 8 * a2 + 376), v6, "Rx Error Counters");
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 472), v18 ^ 0x536C547854726967, "Tx Trigger frames");
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 472), v18 ^ 0x536C54784D42616BLL, "Tx Multi TID BACK");
        snprintf(v6, 0x32uLL, "%s %d", "Slice Frames: slice ", a2);
        unint64_t v59 = (void (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getRemoveReporterCallback(a1);
        uint64_t v60 = AppleBCMWLANIOReporting::getTarget(a1);
        uint64_t v61 = AppleBCMWLANBssManager::getCurrentBSS(a1);
        v59(v60, v61, 0, v6, "Tx Control Frame Counters");
        unsigned __int16 v62 = (void (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
        uint64_t v63 = AppleBCMWLANIOReporting::getTarget(a1);
        uint64_t v64 = AppleBCMWLANBssManager::getCurrentBSS(a1);
        v62(v63, v64, *(void *)(*((void *)a1 + 7) + 8 * a2 + 472), v6, "Tx Control Frame Counters");
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 488), v18 ^ 0x536C52784D42616BLL, "Rx Multi TID BACK");
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 488), v18 ^ 0x536C52784D53426BLL, "Rx Multi STA BACK");
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 488), v18 ^ 0x536C52784D416964, "Rx Trigger with My AID");
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 488), v18 ^ 0x536C527852616E64, "Rx Trigger with Rand AID");
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 488), v18 ^ 0x536C527842547267, "Rx Trigger Basic");
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 488), v18 ^ 0x536C52785472674DLL, "Rx Trigger MU-RTS");
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 488), v18 ^ 0x536C527854726742, "Rx Trigger BSRP");
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 488), v18 ^ 0x536C5472674E4652, "Rx Trigger NFRP");
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 488), v18 ^ 0x536C547267424752, "Rx Trigger BQRP");
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 488), v18 ^ 0x536C5478544D7542, "Rx Trigger MU BAR");
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 488), v18 ^ 0x536C547267474352, "Rx Trigger GCR MU BAR");
        snprintf(v6, 0x32uLL, "%s %d", "Slice Frames: slice ", a2);
        uint64_t v65 = (void (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getRemoveReporterCallback(a1);
        uint64_t v66 = AppleBCMWLANIOReporting::getTarget(a1);
        uint64_t v67 = AppleBCMWLANBssManager::getCurrentBSS(a1);
        v65(v66, v67, 0, v6, "Rx Control Frame Counters");
        int v68 = (void (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
        uint64_t v69 = AppleBCMWLANIOReporting::getTarget(a1);
        uint64_t v70 = AppleBCMWLANBssManager::getCurrentBSS(a1);
        v68(v69, v70, *(void *)(*((void *)a1 + 7) + 8 * a2 + 488), v6, "Rx Control Frame Counters");
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 504), v18 ^ 0x536C547850504455, "Tx TBPPDU");
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 504), v18 ^ 0x536C54784E504455, "Tx Null TBPPDU");
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 504), v18 ^ 0x536C4D676D745050, "Tx he mgmt TBPPDU");
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 504), v18 ^ 0x536C54784D614D50, "Tx Multi TID AMPDU");
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 504), v18 ^ 0x536C54784E414D50, "Tx Null AMPDU in Rsp to Basic Trig");
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 504), v18 ^ 0x536C54784E425352, "Tx Null AMPDU in Rsp to BSRP");
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 504), v18 ^ 0x536C54784E6E6F46, "Tx Null AMPDU in Rsp to Trig FIFO empty");
        snprintf(v6, 0x32uLL, "%s %d", "Slice Frames: slice ", a2);
        uint64_t v71 = (void (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getRemoveReporterCallback(a1);
        uint64_t v72 = AppleBCMWLANIOReporting::getTarget(a1);
        uint64_t v73 = AppleBCMWLANBssManager::getCurrentBSS(a1);
        v71(v72, v73, 0, v6, "Tx Data Frame Counters");
        uint64_t v74 = (void (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
        uint64_t v75 = AppleBCMWLANIOReporting::getTarget(a1);
        uint64_t v76 = AppleBCMWLANBssManager::getCurrentBSS(a1);
        uint64_t v4 = v84;
        v74(v75, v76, *(void *)(*((void *)a1 + 7) + 8 * a2 + 504), v6, "Tx Data Frame Counters");
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 520), v18 ^ 0x536C527853504455, "Rx SU PPDU");
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 520), v18 ^ 0x536C527852457874, "Rx Range Extension SU PPDU");
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 520), v18 ^ 0x536C52784D505044, "Rx MU PPDU");
        snprintf(v6, 0x32uLL, "%s %d", "Slice Frames: slice ", a2);
        unsigned int v77 = (void (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getRemoveReporterCallback(a1);
        uint64_t v78 = AppleBCMWLANIOReporting::getTarget(a1);
        uint64_t v79 = AppleBCMWLANBssManager::getCurrentBSS(a1);
        v77(v78, v79, 0, v6, "Rx Data Frame Counters");
        unsigned int v80 = (void (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
        uint64_t v81 = AppleBCMWLANIOReporting::getTarget(a1);
        uint64_t v82 = AppleBCMWLANBssManager::getCurrentBSS(a1);
        v80(v81, v82, *(void *)(*((void *)a1 + 7) + 8 * v8 + 520), v6, "Rx Data Frame Counters");
        goto LABEL_18;
      }
      unint64_t v20 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
      unint64_t v21 = (IOSimpleReporter *)IO80211Controller::getReporterProvider(v20);
      *(void *)(*((void *)a1 + 7) + 8 * a2 + 1368) = IOSimpleReporter::with(v21, (IOService *)0x8010, 0, v22);
      if (*(void *)(*((void *)a1 + 7) + 8 * a2 + 1368))
      {
        uint64_t v23 = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
        OSSet::setObject(v23, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 1368));
        uint64_t v24 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 1368);
        (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
        uint64_t v25 = 0;
        uint64_t v18 = a2 << 56;
        do
        {
          IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 1368), *(void *)((char *)&kSliceCountersRxRuReport + v25) ^ v18, *(const char **)((char *)&kSliceCountersRxRuReport + v25 + 8));
          v25 += 16;
        }
        while (v25 != 112);
        uint64_t v26 = (void (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
        uint64_t v27 = AppleBCMWLANIOReporting::getTarget(a1);
        uint64_t v28 = AppleBCMWLANBssManager::getCurrentBSS(a1);
        v26(v27, v28, *(void *)(*((void *)a1 + 7) + 8 * a2 + 1368), v6, "Rx OFDMA RU Counters");
        uint64_t v7 = *((void *)a1 + 7);
        goto LABEL_17;
      }
    }
LABEL_18:
    IOFreeData();
    return v4;
  }
  if (AppleBCMWLANIOReporting::getLogger(a1))
  {
    AppleBCMWLANIOReporting::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
      CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to alloc AppleBCMWLANUtil::AutoreleasedBuffer\n", "initHeWlCntReporter", 1562);
    }
  }
  return v4;
}

uint64_t AppleBCMWLANIOReportingPerSlice::initTVPMReporter(AppleBCMWLANBssManager *a1, uint64_t a2)
{
  uint64_t v4 = 3758097084;
  uint64_t v5 = (char *)IOMallocZeroData();
  if (v5)
  {
    uint64_t v6 = v5;
    if ((int)a2 <= 1)
    {
      snprintf(v5, 0x32uLL, "%s Slice %d", "TVPM", a2);
      uint64_t v7 = *((void *)a1 + 7);
      uint64_t v8 = a2;
      if (*(void *)(v7 + 8 * a2 + 568))
      {
        uint64_t v4 = 0;
        goto LABEL_12;
      }
      uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
      ReporterProvider = (IOStateReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
      *(void *)(*((void *)a1 + 7) + 8 * a2 + 568) = IOStateReporter::with(ReporterProvider, (IOService *)0x8010, 0xAu, 0, v12);
      if (*(void *)(*((void *)a1 + 7) + 8 * a2 + 568))
      {
        Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
        OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 568));
        uint64_t v14 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 568);
        (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 568), (a2 << 56) ^ 0x4D20205478447573, "Tx Duty Cycle");
        for (uint64_t i = 0; i != 10; ++i)
          IOStateReporter::setStateID(*(IOStateReporter **)(*((void *)a1 + 7) + 8 * a2 + 568), (a2 << 56) ^ 0x4D20205478447573, i, kDsaTxDCPercStates[i]);
        AddReporterCallbacuint64_t k = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
        uint64_t Target = AppleBCMWLANIOReporting::getTarget(a1);
        uint64_t v18 = AppleBCMWLANBssManager::getCurrentBSS(a1);
        uint64_t v4 = AddReporterCallback(Target, v18, *(void *)(*((void *)a1 + 7) + 8 * a2 + 568), v6, "Tx Duty Cycle");
        uint64_t v7 = *((void *)a1 + 7);
LABEL_12:
        if (!*(void *)(v7 + 8 * a2 + 648))
        {
          unint64_t v19 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
          unint64_t v20 = (IOStateReporter *)IO80211Controller::getReporterProvider(v19);
          *(void *)(*((void *)a1 + 7) + 8 * a2 + 648) = IOStateReporter::with(v20, (IOService *)0x8010, 0xAu, 0, v21);
          if (!*(void *)(*((void *)a1 + 7) + 8 * a2 + 648)) {
            goto LABEL_44;
          }
          unint64_t v22 = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
          OSSet::setObject(v22, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 648));
          uint64_t v23 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 648);
          (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
          IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 648), (a2 << 56) ^ 0x4D20202020505073, "PPM");
          for (uint64_t j = 0; j != 10; ++j)
            IOStateReporter::setStateID(*(IOStateReporter **)(*((void *)a1 + 7) + 8 * a2 + 648), (a2 << 56) ^ 0x4D20202020505073, j, kDsaTxDCPercStates[j]);
          uint64_t v25 = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
          uint64_t v26 = AppleBCMWLANIOReporting::getTarget(a1);
          uint64_t v27 = AppleBCMWLANBssManager::getCurrentBSS(a1);
          uint64_t v4 = v25(v26, v27, *(void *)(*((void *)a1 + 7) + 8 * a2 + 648), v6, "PPM");
          uint64_t v7 = *((void *)a1 + 7);
        }
        if (!*(void *)(v7 + 8 * a2 + 664))
        {
          uint64_t v28 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
          uint64_t v29 = (IOStateReporter *)IO80211Controller::getReporterProvider(v28);
          *(void *)(*((void *)a1 + 7) + 8 * a2 + 664) = IOStateReporter::with(v29, (IOService *)0x8010, 0xAu, 0, v30);
          if (!*(void *)(*((void *)a1 + 7) + 8 * a2 + 664)) {
            goto LABEL_44;
          }
          uint64_t v31 = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
          OSSet::setObject(v31, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 664));
          uint64_t v32 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 664);
          (*(void (**)(uint64_t))(*(void *)v32 + 16))(v32);
          IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 664), (a2 << 56) ^ 0x4D202020434C5473, "CTLM Index");
          for (uint64_t k = 0; k != 10; ++k)
            IOStateReporter::setStateID(*(IOStateReporter **)(*((void *)a1 + 7) + 8 * a2 + 664), (a2 << 56) ^ 0x4D202020434C5473, k, kDsaTxDCPercStates[k]);
          uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
          uint64_t v35 = AppleBCMWLANIOReporting::getTarget(a1);
          uint64_t v36 = AppleBCMWLANBssManager::getCurrentBSS(a1);
          uint64_t v4 = v34(v35, v36, *(void *)(*((void *)a1 + 7) + 8 * a2 + 664), v6, "CTLM Index");
          uint64_t v7 = *((void *)a1 + 7);
        }
        if (!*(void *)(v7 + 8 * a2 + 584))
        {
          uint64_t v37 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
          unint64_t v38 = (IOStateReporter *)IO80211Controller::getReporterProvider(v37);
          *(void *)(*((void *)a1 + 7) + 8 * a2 + 584) = IOStateReporter::with(v38, (IOService *)0x8010, 7u, 0, v39);
          if (!*(void *)(*((void *)a1 + 7) + 8 * a2 + 584)) {
            goto LABEL_44;
          }
          uint64_t v40 = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
          OSSet::setObject(v40, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 584));
          uint64_t v41 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 584);
          (*(void (**)(uint64_t))(*(void *)v41 + 16))(v41);
          IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 584), (a2 << 56) ^ 0x4D20205478507773, "Tx Power Backoff");
          for (uint64_t m = 0; m != 7; ++m)
            IOStateReporter::setStateID(*(IOStateReporter **)(*((void *)a1 + 7) + 8 * a2 + 584), (a2 << 56) ^ 0x4D20205478507773, m, kDsaTxPowerBoostStates[m]);
          uint64_t v43 = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
          uint64_t v44 = AppleBCMWLANIOReporting::getTarget(a1);
          uint64_t v45 = AppleBCMWLANBssManager::getCurrentBSS(a1);
          uint64_t v4 = v43(v44, v45, *(void *)(*((void *)a1 + 7) + 8 * a2 + 584), v6, "Tx Power Backoff");
          uint64_t v7 = *((void *)a1 + 7);
        }
        if (*(void *)(v7 + 8 * a2 + 600))
        {
LABEL_32:
          if (*(void *)(v7 + 8 * a2 + 616)) {
            goto LABEL_37;
          }
          uint64_t v55 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
          uint64_t v56 = (IOStateReporter *)IO80211Controller::getReporterProvider(v55);
          *(void *)(*((void *)a1 + 7) + 8 * a2 + 616) = IOStateReporter::with(v56, (IOService *)0x8010, 7u, 0, v57);
          if (*(void *)(*((void *)a1 + 7) + 8 * a2 + 616))
          {
            uint64_t v58 = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
            OSSet::setObject(v58, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 616));
            uint64_t v59 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 616);
            (*(void (**)(uint64_t))(*(void *)v59 + 16))(v59);
            IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 616), (a2 << 56) ^ 0x4D202054656D7073, "Temperature");
            for (uint64_t n = 0; n != 7; ++n)
              IOStateReporter::setStateID(*(IOStateReporter **)(*((void *)a1 + 7) + 8 * a2 + 616), (a2 << 56) ^ 0x4D202054656D7073, n, kTemperatureStates[n]);
            uint64_t v61 = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
            uint64_t v62 = AppleBCMWLANIOReporting::getTarget(a1);
            uint64_t v63 = AppleBCMWLANBssManager::getCurrentBSS(a1);
            uint64_t v4 = v61(v62, v63, *(void *)(*((void *)a1 + 7) + 8 * a2 + 616), v6, "Temperature");
            uint64_t v7 = *((void *)a1 + 7);
LABEL_37:
            if (!*(void *)(v7 + 8 * a2 + 632))
            {
              uint64_t v64 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
              uint64_t v65 = (IOStateReporter *)IO80211Controller::getReporterProvider(v64);
              *(void *)(*((void *)a1 + 7) + 8 * a2 + 632) = IOStateReporter::with(v65, (IOService *)0x8010, 3u, 0, v66);
              uint64_t v4 = 3758097084;
              if (*(void *)(*((void *)a1 + 7) + 8 * a2 + 632))
              {
                uint64_t v67 = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
                OSSet::setObject(v67, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 632));
                uint64_t v68 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 632);
                (*(void (**)(uint64_t))(*(void *)v68 + 16))(v68);
                uint64_t v69 = *(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 632);
                unint64_t v70 = (a2 << 56) ^ 0x4D20204261747473;
                IOReporter::addChannel(v69, v70, "Battery Voltage");
                for (iuint64_t i = 0; ii != 3; ++ii)
                  IOStateReporter::setStateID(*(IOStateReporter **)(*((void *)a1 + 7) + 8 * v8 + 632), v70, ii, kVoltageStates[ii]);
                uint64_t v72 = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
                uint64_t v73 = AppleBCMWLANIOReporting::getTarget(a1);
                uint64_t v74 = AppleBCMWLANBssManager::getCurrentBSS(a1);
                uint64_t v4 = v72(v73, v74, *(void *)(*((void *)a1 + 7) + 8 * v8 + 632), v6, "Battery Voltage");
              }
            }
            goto LABEL_42;
          }
          goto LABEL_44;
        }
        uint64_t v46 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
        uint64_t v47 = (IOStateReporter *)IO80211Controller::getReporterProvider(v46);
        *(void *)(*((void *)a1 + 7) + 8 * a2 + 600) = IOStateReporter::with(v47, (IOService *)0x8010, 3u, 0, v48);
        if (*(void *)(*((void *)a1 + 7) + 8 * a2 + 600))
        {
          uint64_t v49 = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
          OSSet::setObject(v49, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 600));
          uint64_t v50 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 600);
          (*(void (**)(uint64_t))(*(void *)v50 + 16))(v50);
          IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 600), (a2 << 56) ^ 0x4D20204163436873, "Active Chains");
          for (juint64_t j = 0; jj != 3; ++jj)
            IOStateReporter::setStateID(*(IOStateReporter **)(*((void *)a1 + 7) + 8 * a2 + 600), (a2 << 56) ^ 0x4D20204163436873, jj, kTxChainsStates[jj]);
          uint64_t v52 = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
          uint64_t v53 = AppleBCMWLANIOReporting::getTarget(a1);
          uint64_t v54 = AppleBCMWLANBssManager::getCurrentBSS(a1);
          uint64_t v4 = v52(v53, v54, *(void *)(*((void *)a1 + 7) + 8 * a2 + 600), v6, "Active Chains");
          uint64_t v7 = *((void *)a1 + 7);
          goto LABEL_32;
        }
LABEL_44:
        uint64_t v4 = 3758097084;
      }
    }
LABEL_42:
    IOFreeData();
    return v4;
  }
  if (AppleBCMWLANIOReporting::getLogger(a1))
  {
    AppleBCMWLANIOReporting::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
      CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to alloc AppleBCMWLANUtil::AutoreleasedBuffer\n", "initTVPMReporter", 1870);
    }
  }
  return v4;
}

uint64_t AppleBCMWLANIOReportingPerSlice::reportTVPM(AppleBCMWLANIOReporting *this, OSData *a2, uint64_t a3, uint64_t a4)
{
  if ((int)a3 >= 2)
  {
    uint64_t v12 = 3758097084;
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logEmergency(Logger, "[dk] %s@%d:Out of range slice index %d\n");
      }
    }
  }
  else if (OSData::getLength(a2) == 16)
  {
    unsigned __int8 BytesNoCopy = (unsigned __int16 *)OSData::getBytesNoCopy(a2);
    uint64_t v47 = BytesNoCopy[2];
    int v50 = BytesNoCopy[3];
    uint64_t v9 = BytesNoCopy[4];
    uint64_t v49 = BytesNoCopy[5];
    uint64_t v10 = *((unsigned __int8 *)BytesNoCopy + 12);
    uint64_t v46 = *((unsigned __int8 *)BytesNoCopy + 13);
    uint64_t v45 = *((unsigned __int8 *)BytesNoCopy + 14);
    uint64_t v11 = *((void *)this + 7);
    if (!*(unsigned char *)(v11 + a3 + 16))
    {
      if (AppleBCMWLANIOReportingPerSlice::initTVPMReporter(this, a3))
      {
        uint64_t v12 = 3758097084;
        if (AppleBCMWLANIOReporting::getLogger(this))
        {
          AppleBCMWLANIOReporting::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v43 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
            CCLogStream::logEmergency(v43, "[dk] %s@%d:Failed to initTVPMReporter slice %d\n");
          }
        }
        return v12;
      }
      *(unsigned char *)(*((void *)this + 7) + a3 + 16) = 1;
      uint64_t v11 = *((void *)this + 7);
    }
    uint64_t v44 = v9;
    uint64_t v48 = v10;
    if (*(void *)(v11 + 8 * a3 + 552))
    {
      LODWORD(v12) = 0;
      goto LABEL_13;
    }
    uint64_t v12 = 3758097084;
    uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(this);
    ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
    *(void *)(*((void *)this + 7) + 8 * a3 + 552) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v15);
    if (!*(void *)(*((void *)this + 7) + 8 * a3 + 552)) {
      return v12;
    }
    Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(this);
    OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)this + 7) + 8 * a3 + 552));
    uint64_t v17 = *(void *)(*((void *)this + 7) + 8 * a3 + 552);
    (*(void (**)(uint64_t))(*(void *)v17 + 16))(v17);
    for (uint64_t i = 0; i != 128; i += 16)
      IOReporter::addChannel(*(IOReporter **)(*((void *)this + 7) + 8 * a3 + 552), *(void *)((char *)&kTVPMReport + i) ^ (a3 << 56), *(const char **)((char *)&kTVPMReport + i + 8));
    unint64_t v19 = (char *)IOMallocZeroData();
    if (v19)
    {
      unint64_t v20 = v19;
      snprintf(v19, 0x32uLL, "%s Slice %d", "TVPM", a3);
      AddReporterCallbacuint64_t k = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(this);
      uint64_t Target = AppleBCMWLANIOReporting::getTarget(this);
      uint64_t v23 = AppleBCMWLANBssManager::getCurrentBSS(this);
      LODWORD(v12) = AddReporterCallback(Target, v23, *(void *)(*((void *)this + 7) + 8 * a3 + 552), v20, "Temperature Voltage Power Management");
      IOFreeData();
      uint64_t v9 = v44;
LABEL_13:
      if (v49 >= 0xC9
        && (AppleBCMWLANIOReportingPerSlice::reportTVPM(OSData *,AppleBCMWLANSliceId,apple80211_tvpm_event *)::filedSingleInvalidStatIssue & 1) == 0)
      {
        AppleBCMWLANIOReporting::getLogger(this);
        OSData::getBytesNoCopy(a2);
        OSData::getLength(a2);
        IO80211Hexdump();
        AppleBCMWLANIOReportingPerSlice::reportTVPM(OSData *,AppleBCMWLANSliceId,apple80211_tvpm_event *)::filedSingleInvalidStatIssue = 1;
      }
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 552), (a3 << 56) ^ 0x4D20205478447574, v47);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 552), (a3 << 56) ^ 0x4D20205478507772, (__int16)-(__int16)v50);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 552), (a3 << 56) ^ 0x4D20204163436861, v9);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 552), (a3 << 56) ^ 0x4D202054656D7020, v49);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 552), (a3 << 56) ^ 0x4D20204261747456, v48);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 552), (a3 << 56) ^ 0x4D2020202050504DLL, v45);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 552), (a3 << 56) ^ 0x4D202020434C544DLL, v46);
      IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 552), (a3 << 56) ^ 0x4D2020555456504DLL, 1);
      uint64_t v24 = *(IOStateReporter **)(*((void *)this + 7) + 8 * a3 + 568);
      int PercentIndex = findPercentIndex(v47);
      IOStateReporter::setChannelState(v24, (a3 << 56) ^ 0x4D20205478447573, kDsaTxDCPercStates[PercentIndex]);
      uint64_t v26 = *(IOStateReporter **)(*((void *)this + 7) + 8 * a3 + 648);
      int v27 = findPercentIndex(v45);
      IOStateReporter::setChannelState(v26, (a3 << 56) ^ 0x4D20202020505073, kDsaTxDCPercStates[v27]);
      uint64_t v28 = *(IOStateReporter **)(*((void *)this + 7) + 8 * a3 + 664);
      int v29 = findPercentIndex(v46);
      IOStateReporter::setChannelState(v28, (a3 << 56) ^ 0x4D202020434C5473, kDsaTxDCPercStates[v29]);
      if (v50)
      {
        uint64_t v30 = a3 << 56;
        uint64_t v12 = v12;
        uint64_t v31 = a4;
        int v32 = v44;
        unsigned int v33 = v49;
        if ((__int16)-(__int16)v50 >= 5)
        {
          if ((unsigned __int16)-(__int16)v50 >= 9u)
          {
            if ((unsigned __int16)-(__int16)v50 >= 0xDu)
            {
              if ((unsigned __int16)-(__int16)v50 >= 0x11u)
              {
                uint64_t v34 = 5;
                if ((unsigned __int16)-(__int16)v50 >= 0x15u) {
                  uint64_t v34 = 6;
                }
              }
              else
              {
                uint64_t v34 = 4;
              }
            }
            else
            {
              uint64_t v34 = 3;
            }
          }
          else
          {
            uint64_t v34 = 2;
          }
        }
        else
        {
          uint64_t v34 = 1;
        }
      }
      else
      {
        uint64_t v34 = 0;
        uint64_t v12 = v12;
        uint64_t v30 = a3 << 56;
        uint64_t v31 = a4;
        int v32 = v44;
        unsigned int v33 = v49;
      }
      IOStateReporter::setChannelState(*(IOStateReporter **)(*((void *)this + 7) + 8 * a3 + 584), (a3 << 56) ^ 0x4D20205478507773, kDsaTxPowerBoostStates[v34]);
      uint64_t v36 = 1;
      if (v32 != 2) {
        uint64_t v36 = 2;
      }
      if (v32 == 1) {
        uint64_t v36 = 0;
      }
      IOStateReporter::setChannelState(*(IOStateReporter **)(*((void *)this + 7) + 8 * a3 + 600), v30 ^ 0x4D20204163436873, kTxChainsStates[v36]);
      uint64_t v37 = 0;
      if (v33 <= 0xC8) {
        unsigned int v38 = v33;
      }
      else {
        unsigned int v38 = 0;
      }
      if (v38 <= 0x54)
      {
        if (v38 <= 0x45)
        {
          if (v38 <= 0x3B)
          {
            if (v38 <= 0x31)
            {
              if (v38 <= 0x27)
              {
                uint64_t v37 = 5;
                if (v38 <= 0x1D) {
                  uint64_t v37 = 6;
                }
              }
              else
              {
                uint64_t v37 = 4;
              }
            }
            else
            {
              uint64_t v37 = 3;
            }
          }
          else
          {
            uint64_t v37 = 2;
          }
        }
        else
        {
          uint64_t v37 = 1;
        }
      }
      IOStateReporter::setChannelState(*(IOStateReporter **)(*((void *)this + 7) + 8 * a3 + 616), v30 ^ 0x4D202054656D7073, kTemperatureStates[v37]);
      uint64_t v39 = 1;
      if (v48 <= 0x1E) {
        uint64_t v39 = 2;
      }
      if (v48 > 0x20) {
        uint64_t v39 = 0;
      }
      IOStateReporter::setChannelState(*(IOStateReporter **)(*((void *)this + 7) + 8 * a3 + 632), v30 ^ 0x4D20204261747473, kVoltageStates[v39]);
      if (v31)
      {
        *(unsigned char *)uint64_t v31 = v48;
        *(unsigned char *)(v31 + 1) = v46;
        *(unsigned char *)(v31 + 2) = v45;
        *(_WORD *)(v31 + 4) = v47;
        *(_WORD *)(v31 + 6) = v50;
        *(_WORD *)(v31 + 8) = v32;
        *(_WORD *)(v31 + 10) = v33;
      }
      return v12;
    }
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v35 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logEmergency(v35, "[dk] %s@%d:Failed to alloc AppleBCMWLANUtil::AutoreleasedBuffer\n");
      }
    }
  }
  else
  {
    uint64_t v12 = 3758097084;
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v42 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        OSData::getLength(a2);
        CCLogStream::logEmergency(v42, "[dk] %s@%d:sizeof(tvpm) %lu payload->getLength() %lu\n");
      }
    }
  }
  return v12;
}

uint64_t findPercentIndex(int a1)
{
  if (a1 > 90) {
    return 0;
  }
  if (a1 > 79) {
    return 1;
  }
  if (a1 > 9) {
    int v2 = 8;
  }
  else {
    int v2 = 9;
  }
  if (a1 <= 19) {
    int v3 = v2;
  }
  else {
    int v3 = 7;
  }
  if (a1 <= 29) {
    int v4 = v3;
  }
  else {
    int v4 = 6;
  }
  if (a1 <= 39) {
    int v5 = v4;
  }
  else {
    int v5 = 5;
  }
  if (a1 <= 49) {
    int v6 = v5;
  }
  else {
    int v6 = 4;
  }
  if (a1 <= 59) {
    unsigned int v7 = v6;
  }
  else {
    unsigned int v7 = 3;
  }
  if (a1 <= 69) {
    return v7;
  }
  else {
    return 2;
  }
}

uint64_t AppleBCMWLANIOReportingPerSlice::initDynSARReporter(AppleBCMWLANBssManager *a1, uint64_t a2)
{
  uint64_t v4 = 3758097084;
  int v5 = (char *)IOMallocZeroData();
  if (v5)
  {
    int v6 = v5;
    if ((int)a2 <= 1)
    {
      snprintf(v5, 0x32uLL, "%s Slice %d", "DSA", a2);
      uint64_t v7 = *((void *)a1 + 7);
      uint64_t v8 = a2;
      if (*(void *)(v7 + 8 * a2 + 696))
      {
        uint64_t v4 = 0;
        goto LABEL_12;
      }
      uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
      ReporterProvider = (IOStateReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
      *(void *)(*((void *)a1 + 7) + 8 * a2 + 696) = IOStateReporter::with(ReporterProvider, (IOService *)0x8010, 5u, 0, v12);
      if (*(void *)(*((void *)a1 + 7) + 8 * a2 + 696))
      {
        Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
        OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 696));
        uint64_t v14 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 696);
        (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 696), (a2 << 56) ^ 0x4453537461747573, "DSA Status");
        for (uint64_t i = 0; i != 5; ++i)
          IOStateReporter::setStateID(*(IOStateReporter **)(*((void *)a1 + 7) + 8 * a2 + 696), (a2 << 56) ^ 0x4453537461747573, i, kDsaStateStates[i]);
        AddReporterCallbacuint64_t k = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
        uint64_t Target = AppleBCMWLANIOReporting::getTarget(a1);
        uint64_t v18 = AppleBCMWLANBssManager::getCurrentBSS(a1);
        uint64_t v4 = AddReporterCallback(Target, v18, *(void *)(*((void *)a1 + 7) + 8 * a2 + 696), v6, "DSA Status");
        uint64_t v7 = *((void *)a1 + 7);
LABEL_12:
        if (!*(void *)(v7 + 8 * a2 + 712))
        {
          unint64_t v19 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
          unint64_t v20 = (IOStateReporter *)IO80211Controller::getReporterProvider(v19);
          *(void *)(*((void *)a1 + 7) + 8 * a2 + 712) = IOStateReporter::with(v20, (IOService *)0x8010, 7u, 0, v21);
          if (!*(void *)(*((void *)a1 + 7) + 8 * a2 + 712)) {
            goto LABEL_59;
          }
          unint64_t v22 = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
          OSSet::setObject(v22, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 712));
          uint64_t v23 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 712);
          (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
          IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 712), (a2 << 56) ^ 0x4453507772427374, "DSA Power Boost (dB)");
          for (uint64_t j = 0; j != 7; ++j)
            IOStateReporter::setStateID(*(IOStateReporter **)(*((void *)a1 + 7) + 8 * a2 + 712), (a2 << 56) ^ 0x4453507772427374, j, kDsaTxPowerBoostStates[j]);
          uint64_t v25 = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
          uint64_t v26 = AppleBCMWLANIOReporting::getTarget(a1);
          uint64_t v27 = AppleBCMWLANBssManager::getCurrentBSS(a1);
          uint64_t v4 = v25(v26, v27, *(void *)(*((void *)a1 + 7) + 8 * a2 + 712), v6, "DSA Power Boost (dB)");
          uint64_t v7 = *((void *)a1 + 7);
        }
        if (!*(void *)(v7 + 8 * a2 + 728))
        {
          uint64_t v28 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
          int v29 = (IOStateReporter *)IO80211Controller::getReporterProvider(v28);
          *(void *)(*((void *)a1 + 7) + 8 * a2 + 728) = IOStateReporter::with(v29, (IOService *)0x8010, 0xAu, 0, v30);
          if (!*(void *)(*((void *)a1 + 7) + 8 * a2 + 728)) {
            goto LABEL_59;
          }
          uint64_t v31 = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
          OSSet::setObject(v31, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 728));
          uint64_t v32 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 728);
          (*(void (**)(uint64_t))(*(void *)v32 + 16))(v32);
          IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 728), (a2 << 56) ^ 0x44535444416E7430, "DSA TxDC Ant 0 (%)");
          for (uint64_t k = 0; k != 10; ++k)
            IOStateReporter::setStateID(*(IOStateReporter **)(*((void *)a1 + 7) + 8 * a2 + 728), (a2 << 56) ^ 0x44535444416E7430, k, kDsaTxDCPercStates[k]);
          uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *, ...))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
          uint64_t v35 = AppleBCMWLANIOReporting::getTarget(a1);
          uint64_t v36 = AppleBCMWLANBssManager::getCurrentBSS(a1);
          uint64_t v4 = v34(v35, v36, *(void *)(*((void *)a1 + 7) + 8 * a2 + 728), v6, "DSA TxDC Ant 0 (%)");
          uint64_t v7 = *((void *)a1 + 7);
        }
        if (!*(void *)(v7 + 8 * a2 + 744))
        {
          uint64_t v37 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
          unsigned int v38 = (IOStateReporter *)IO80211Controller::getReporterProvider(v37);
          *(void *)(*((void *)a1 + 7) + 8 * a2 + 744) = IOStateReporter::with(v38, (IOService *)0x8010, 0xAu, 0, v39);
          if (!*(void *)(*((void *)a1 + 7) + 8 * a2 + 744)) {
            goto LABEL_59;
          }
          uint64_t v40 = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
          OSSet::setObject(v40, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 744));
          uint64_t v41 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 744);
          (*(void (**)(uint64_t))(*(void *)v41 + 16))(v41);
          IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 744), (a2 << 56) ^ 0x44535574416E7430, "DSA Util Ant 0 (%)");
          for (uint64_t m = 0; m != 10; ++m)
            IOStateReporter::setStateID(*(IOStateReporter **)(*((void *)a1 + 7) + 8 * a2 + 744), (a2 << 56) ^ 0x44535574416E7430, m, *(void *)&kDsaUtilPercStates[8 * m]);
          uint64_t v43 = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *, ...))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
          uint64_t v44 = AppleBCMWLANIOReporting::getTarget(a1);
          uint64_t v45 = AppleBCMWLANBssManager::getCurrentBSS(a1);
          uint64_t v4 = v43(v44, v45, *(void *)(*((void *)a1 + 7) + 8 * a2 + 744), v6, "DSA Util Ant 0 (%)");
          uint64_t v7 = *((void *)a1 + 7);
        }
        if (!*(void *)(v7 + 8 * a2 + 760))
        {
          uint64_t v46 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
          uint64_t v47 = (IOStateReporter *)IO80211Controller::getReporterProvider(v46);
          *(void *)(*((void *)a1 + 7) + 8 * a2 + 760) = IOStateReporter::with(v47, (IOService *)0x8010, 0xAu, 0, v48);
          if (!*(void *)(*((void *)a1 + 7) + 8 * a2 + 760)) {
            goto LABEL_59;
          }
          uint64_t v49 = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
          OSSet::setObject(v49, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 760));
          uint64_t v50 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 760);
          (*(void (**)(uint64_t))(*(void *)v50 + 16))(v50);
          IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 760), (a2 << 56) ^ 0x44535444416E7431, "DSA TxDC Ant 1 (%)");
          for (uint64_t n = 0; n != 10; ++n)
            IOStateReporter::setStateID(*(IOStateReporter **)(*((void *)a1 + 7) + 8 * a2 + 760), (a2 << 56) ^ 0x44535444416E7431, n, kDsaTxDCPercStates[n]);
          uint64_t v52 = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *, ...))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
          uint64_t v53 = AppleBCMWLANIOReporting::getTarget(a1);
          uint64_t v54 = AppleBCMWLANBssManager::getCurrentBSS(a1);
          uint64_t v4 = v52(v53, v54, *(void *)(*((void *)a1 + 7) + 8 * a2 + 760), v6, "DSA TxDC Ant 1 (%)");
          uint64_t v7 = *((void *)a1 + 7);
        }
        if (!*(void *)(v7 + 8 * a2 + 776))
        {
          uint64_t v55 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
          uint64_t v56 = (IOStateReporter *)IO80211Controller::getReporterProvider(v55);
          *(void *)(*((void *)a1 + 7) + 8 * a2 + 776) = IOStateReporter::with(v56, (IOService *)0x8010, 0xAu, 0, v57);
          if (!*(void *)(*((void *)a1 + 7) + 8 * a2 + 776)) {
            goto LABEL_59;
          }
          uint64_t v58 = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
          OSSet::setObject(v58, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 776));
          uint64_t v59 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 776);
          (*(void (**)(uint64_t))(*(void *)v59 + 16))(v59);
          IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 776), (a2 << 56) ^ 0x44535574416E7431, "DSA Util Ant 1 (%)");
          for (iuint64_t i = 0; ii != 10; ++ii)
            IOStateReporter::setStateID(*(IOStateReporter **)(*((void *)a1 + 7) + 8 * a2 + 776), (a2 << 56) ^ 0x44535574416E7431, ii, *(void *)&kDsaUtilPercStates[8 * ii]);
          uint64_t v61 = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *, ...))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
          uint64_t v62 = AppleBCMWLANIOReporting::getTarget(a1);
          uint64_t v63 = AppleBCMWLANBssManager::getCurrentBSS(a1);
          uint64_t v4 = v61(v62, v63, *(void *)(*((void *)a1 + 7) + 8 * a2 + 776), v6, "DSA Util Ant 1 (%)");
          uint64_t v7 = *((void *)a1 + 7);
        }
        if (!*(void *)(v7 + 8 * a2 + 792))
        {
          uint64_t v64 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
          uint64_t v65 = (IOStateReporter *)IO80211Controller::getReporterProvider(v64);
          *(void *)(*((void *)a1 + 7) + 8 * a2 + 792) = IOStateReporter::with(v65, (IOService *)0x8010, 0xAu, 0, v66);
          if (!*(void *)(*((void *)a1 + 7) + 8 * a2 + 792)) {
            goto LABEL_59;
          }
          uint64_t v67 = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
          OSSet::setObject(v67, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 792));
          uint64_t v68 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 792);
          (*(void (**)(uint64_t))(*(void *)v68 + 16))(v68);
          IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 792), (a2 << 56) ^ 0x44535444416E7432, "DSA TxDC Ant 2 (%)");
          for (juint64_t j = 0; jj != 10; ++jj)
            IOStateReporter::setStateID(*(IOStateReporter **)(*((void *)a1 + 7) + 8 * a2 + 792), (a2 << 56) ^ 0x44535444416E7432, jj, kDsaTxDCPercStates[jj]);
          unint64_t v70 = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *, ...))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
          uint64_t v71 = AppleBCMWLANIOReporting::getTarget(a1);
          uint64_t v72 = AppleBCMWLANBssManager::getCurrentBSS(a1);
          uint64_t v4 = v70(v71, v72, *(void *)(*((void *)a1 + 7) + 8 * a2 + 792), v6, "DSA TxDC Ant 2 (%)");
          uint64_t v7 = *((void *)a1 + 7);
        }
        if (*(void *)(v7 + 8 * a2 + 808))
        {
LABEL_47:
          if (*(void *)(v7 + 8 * a2 + 824)) {
            goto LABEL_52;
          }
          uint64_t v82 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
          char v83 = (IOStateReporter *)IO80211Controller::getReporterProvider(v82);
          *(void *)(*((void *)a1 + 7) + 8 * a2 + 824) = IOStateReporter::with(v83, (IOService *)0x8010, 0xAu, 0, v84);
          if (*(void *)(*((void *)a1 + 7) + 8 * a2 + 824))
          {
            uint64_t v85 = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
            OSSet::setObject(v85, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 824));
            uint64_t v86 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 824);
            (*(void (**)(uint64_t))(*(void *)v86 + 16))(v86);
            IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 824), (a2 << 56) ^ 0x44535444416E7433, "DSA TxDC Ant 3 (%)");
            for (kuint64_t k = 0; kk != 10; ++kk)
              IOStateReporter::setStateID(*(IOStateReporter **)(*((void *)a1 + 7) + 8 * a2 + 824), (a2 << 56) ^ 0x44535444416E7433, kk, kDsaTxDCPercStates[kk]);
            long long v88 = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *, ...))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
            uint64_t v89 = AppleBCMWLANIOReporting::getTarget(a1);
            uint64_t v90 = AppleBCMWLANBssManager::getCurrentBSS(a1);
            uint64_t v4 = v88(v89, v90, *(void *)(*((void *)a1 + 7) + 8 * a2 + 824), v6, "DSA TxDC Ant 3 (%)");
            uint64_t v7 = *((void *)a1 + 7);
LABEL_52:
            if (!*(void *)(v7 + 8 * a2 + 840))
            {
              int v91 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
              int v92 = (IOStateReporter *)IO80211Controller::getReporterProvider(v91);
              *(void *)(*((void *)a1 + 7) + 8 * a2 + 840) = IOStateReporter::with(v92, (IOService *)0x8010, 0xAu, 0, v93);
              uint64_t v4 = 3758097084;
              if (*(void *)(*((void *)a1 + 7) + 8 * a2 + 840))
              {
                int v94 = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
                OSSet::setObject(v94, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 840));
                uint64_t v95 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 840);
                (*(void (**)(uint64_t))(*(void *)v95 + 16))(v95);
                int v96 = *(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 840);
                unint64_t v97 = (a2 << 56) ^ 0x44535574416E7433;
                IOReporter::addChannel(v96, v97, "DSA Util Ant 3 (%)");
                for (muint64_t m = 0; mm != 10; ++mm)
                  IOStateReporter::setStateID(*(IOStateReporter **)(*((void *)a1 + 7) + 8 * v8 + 840), v97, mm, *(void *)&kDsaUtilPercStates[8 * mm]);
                int v99 = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *, ...))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
                uint64_t v100 = AppleBCMWLANIOReporting::getTarget(a1);
                uint64_t v101 = AppleBCMWLANBssManager::getCurrentBSS(a1);
                uint64_t v4 = v99(v100, v101, *(void *)(*((void *)a1 + 7) + 8 * v8 + 840), v6, "DSA Util Ant 3 (%)");
              }
            }
            goto LABEL_57;
          }
          goto LABEL_59;
        }
        uint64_t v73 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
        uint64_t v74 = (IOStateReporter *)IO80211Controller::getReporterProvider(v73);
        *(void *)(*((void *)a1 + 7) + 8 * a2 + 808) = IOStateReporter::with(v74, (IOService *)0x8010, 0xAu, 0, v75);
        if (*(void *)(*((void *)a1 + 7) + 8 * a2 + 808))
        {
          uint64_t v76 = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
          OSSet::setObject(v76, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 808));
          uint64_t v77 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 808);
          (*(void (**)(uint64_t))(*(void *)v77 + 16))(v77);
          IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 808), (a2 << 56) ^ 0x44535574416E7432, "DSA Util Ant 2 (%)");
          for (nuint64_t n = 0; nn != 10; ++nn)
            IOStateReporter::setStateID(*(IOStateReporter **)(*((void *)a1 + 7) + 8 * a2 + 808), (a2 << 56) ^ 0x44535574416E7432, nn, *(void *)&kDsaUtilPercStates[8 * nn]);
          uint64_t v79 = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *, ...))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
          uint64_t v80 = AppleBCMWLANIOReporting::getTarget(a1);
          uint64_t v81 = AppleBCMWLANBssManager::getCurrentBSS(a1);
          uint64_t v4 = v79(v80, v81, *(void *)(*((void *)a1 + 7) + 8 * a2 + 808), v6, "DSA Util Ant 2 (%)");
          uint64_t v7 = *((void *)a1 + 7);
          goto LABEL_47;
        }
LABEL_59:
        uint64_t v4 = 3758097084;
      }
    }
LABEL_57:
    IOFreeData();
    return v4;
  }
  if (AppleBCMWLANIOReporting::getLogger(a1))
  {
    AppleBCMWLANIOReporting::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
      CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to alloc AppleBCMWLANUtil::AutoreleasedBuffer\n", "initDynSARReporter", 2035);
    }
  }
  return v4;
}

uint64_t AppleBCMWLANIOReportingPerSlice::reportDSA(AppleBCMWLANBssManager *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *((void *)this + 7);
  uint64_t v7 = a2;
  if (!*(unsigned char *)(v6 + a2 + 18))
  {
    if (AppleBCMWLANIOReportingPerSlice::initDynSARReporter(this, a2))
    {
      uint64_t v9 = 3758097084;
      if (AppleBCMWLANIOReporting::getLogger(this))
      {
        AppleBCMWLANIOReporting::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
          CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to initDynSARReporter slice %d\n");
        }
      }
      return v9;
    }
    *(unsigned char *)(*((void *)this + 7) + v7 + 18) = 1;
    uint64_t v6 = *((void *)this + 7);
  }
  uint64_t v8 = *(IOSimpleReporter **)(v6 + 8 * v7 + 680);
  if (v8)
  {
    LODWORD(v9) = 0;
    uint64_t v10 = a2 << 56;
LABEL_11:
    IOSimpleReporter::setValue(v8, v10 ^ 0x4420537461747573, *(unsigned __int16 *)(a3 + 64));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 680), v10 ^ 0x4420507772427374, *(unsigned __int16 *)(a3 + 66));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 680), v10 ^ 0x44205444416E7430, *(unsigned __int8 *)(a3 + 68));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 680), v10 ^ 0x44205574416E7430, *(unsigned __int8 *)(a3 + 69));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 680), v10 ^ 0x44205444416E7431, *(unsigned __int8 *)(a3 + 70));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 680), v10 ^ 0x44205574416E7431, *(unsigned __int8 *)(a3 + 71));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 680), v10 ^ 0x44205444416E7432, *(unsigned __int8 *)(a3 + 72));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 680), v10 ^ 0x44205574416E7432, *(unsigned __int8 *)(a3 + 73));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 680), v10 ^ 0x44205444416E7433, *(unsigned __int8 *)(a3 + 74));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 680), v10 ^ 0x44205574416E7433, *(unsigned __int8 *)(a3 + 75));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 680), v10 ^ 0x44204E6F4F447572, *(unsigned int *)(a3 + 8));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 680), v10 ^ 0x4420506F4F447572, *(unsigned int *)(a3 + 16));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 680), v10 ^ 0x4420465365447572, *(unsigned int *)(a3 + 24));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 680), v10 ^ 0x44204E6F4D447572, *(unsigned int *)(a3 + 32));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 680), v10 ^ 0x4420486264447572, *(unsigned int *)(a3 + 40));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 680), v10 ^ 0x4420446354447572, *(unsigned int *)(a3 + 48));
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 680), v10 ^ 0x4420504F54447572, *(unsigned int *)(a3 + 56));
    IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 680), v10 ^ 0x4420202055706474, 1);
    unint64_t v22 = *(__int16 *)(a3 + 64);
    if (v22 > 4) {
      uint64_t v23 = 4;
    }
    else {
      uint64_t v23 = *(void *)&kDsaUtilPercStates[8 * v22 + 80];
    }
    IOStateReporter::setChannelState(*(IOStateReporter **)(*((void *)this + 7) + 8 * v7 + 696), v10 ^ 0x4453537461747573, kDsaStateStates[v23]);
    unsigned int v24 = *(unsigned __int16 *)(a3 + 66);
    if (v24 >= 6) {
      unsigned int v24 = 6;
    }
    IOStateReporter::setChannelState(*(IOStateReporter **)(*((void *)this + 7) + 8 * v7 + 712), v10 ^ 0x4453507772427374, kDsaTxPowerBoostStates[v24]);
    uint64_t v25 = *(IOStateReporter **)(*((void *)this + 7) + 8 * v7 + 728);
    int PercentIndex = findPercentIndex(*(unsigned __int8 *)(a3 + 68));
    IOStateReporter::setChannelState(v25, v10 ^ 0x44535444416E7430, kDsaTxDCPercStates[PercentIndex]);
    uint64_t v27 = *(IOStateReporter **)(*((void *)this + 7) + 8 * v7 + 744);
    int v28 = findPercentIndex(*(unsigned __int8 *)(a3 + 69));
    IOStateReporter::setChannelState(v27, v10 ^ 0x44535574416E7430, *(void *)&kDsaUtilPercStates[8 * v28]);
    int v29 = *(IOStateReporter **)(*((void *)this + 7) + 8 * v7 + 760);
    int v30 = findPercentIndex(*(unsigned __int8 *)(a3 + 70));
    IOStateReporter::setChannelState(v29, v10 ^ 0x44535444416E7431, kDsaTxDCPercStates[v30]);
    uint64_t v31 = *(IOStateReporter **)(*((void *)this + 7) + 8 * v7 + 776);
    int v32 = findPercentIndex(*(unsigned __int8 *)(a3 + 71));
    IOStateReporter::setChannelState(v31, v10 ^ 0x44535574416E7431, *(void *)&kDsaUtilPercStates[8 * v32]);
    unsigned int v33 = *(IOStateReporter **)(*((void *)this + 7) + 8 * v7 + 792);
    int v34 = findPercentIndex(*(unsigned __int8 *)(a3 + 72));
    IOStateReporter::setChannelState(v33, v10 ^ 0x44535444416E7432, kDsaTxDCPercStates[v34]);
    uint64_t v35 = *(IOStateReporter **)(*((void *)this + 7) + 8 * v7 + 808);
    int v36 = findPercentIndex(*(unsigned __int8 *)(a3 + 73));
    IOStateReporter::setChannelState(v35, v10 ^ 0x44535574416E7432, *(void *)&kDsaUtilPercStates[8 * v36]);
    uint64_t v37 = *(IOStateReporter **)(*((void *)this + 7) + 8 * v7 + 824);
    int v38 = findPercentIndex(*(unsigned __int8 *)(a3 + 74));
    IOStateReporter::setChannelState(v37, v10 ^ 0x44535444416E7433, kDsaTxDCPercStates[v38]);
    unint64_t v39 = *(IOStateReporter **)(*((void *)this + 7) + 8 * v7 + 840);
    int v40 = findPercentIndex(*(unsigned __int8 *)(a3 + 75));
    IOStateReporter::setChannelState(v39, v10 ^ 0x44535574416E7433, *(void *)&kDsaUtilPercStates[8 * v40]);
    return v9;
  }
  uint64_t v9 = 3758097084;
  uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(this);
  ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
  *(void *)(*((void *)this + 7) + 8 * v7 + 680) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v13);
  if (!*(void *)(*((void *)this + 7) + 8 * v7 + 680)) {
    return v9;
  }
  Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(this);
  OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)this + 7) + 8 * v7 + 680));
  uint64_t v15 = *(void *)(*((void *)this + 7) + 8 * v7 + 680);
  (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
  uint64_t v16 = 0;
  uint64_t v10 = a2 << 56;
  do
  {
    IOReporter::addChannel(*(IOReporter **)(*((void *)this + 7) + 8 * v7 + 680), *(void *)((char *)&kDynSARReport + v16) ^ v10, *(const char **)((char *)&kDynSARReport + v16 + 8));
    v16 += 16;
  }
  while (v16 != 288);
  uint64_t v17 = (char *)IOMallocZeroData();
  if (v17)
  {
    uint64_t v18 = v17;
    snprintf(v17, 0x32uLL, "%s Slice %d", "DSA", a2);
    AddReporterCallbacuint64_t k = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(this);
    uint64_t Target = AppleBCMWLANIOReporting::getTarget(this);
    uint64_t v21 = AppleBCMWLANBssManager::getCurrentBSS(this);
    LODWORD(v9) = AddReporterCallback(Target, v21, *(void *)(*((void *)this + 7) + 8 * v7 + 680), v18, "Dynamic SAR Averaging");
    IOFreeData();
    uint64_t v8 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 680);
    goto LABEL_11;
  }
  if (AppleBCMWLANIOReporting::getLogger(this))
  {
    AppleBCMWLANIOReporting::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v42 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
      CCLogStream::logEmergency(v42, "[dk] %s@%d:Failed to alloc AppleBCMWLANUtil::AutoreleasedBuffer\n");
    }
  }
  return v9;
}

uint64_t AppleBCMWLANIOReportingPerSlice::reportTDM(AppleBCMWLANIOReporting *this, OSData *a2, uint64_t a3)
{
  if ((int)a3 >= 2)
  {
    uint64_t v18 = 3758097084;
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logEmergency(Logger, "[dk] %s@%d:Out of range slice index %d\n");
      }
    }
    return v18;
  }
  if (OSData::getLength(a2) >= 2)
  {
    int v6 = *(unsigned __int8 *)OSData::getBytesNoCopy(a2);
    if (v6 == 2)
    {
      if (OSData::getLength(a2) == 56)
      {
        unsigned __int8 BytesNoCopy = (unsigned int *)OSData::getBytesNoCopy(a2);
        uint64_t v9 = 2863311530;
        int v10 = 0;
        uint64_t v56 = BytesNoCopy[1];
        uint64_t v49 = BytesNoCopy[2];
        uint64_t v50 = BytesNoCopy[3];
        uint64_t v52 = BytesNoCopy[4];
        uint64_t v54 = BytesNoCopy[5];
        uint64_t v12 = BytesNoCopy[7];
        uint64_t v55 = BytesNoCopy[6];
        int v8 = 1;
        uint64_t v40 = 2863311530;
        uint64_t v41 = 2863311530;
        uint64_t v43 = 2863311530;
        uint64_t v44 = 2863311530;
        uint64_t v13 = BytesNoCopy[8];
        uint64_t v51 = BytesNoCopy[9];
        uint64_t v53 = BytesNoCopy[10];
        uint64_t v47 = 2863311530;
        uint64_t v46 = 2863311530;
        uint64_t v11 = 2863311530;
        uint64_t v39 = 2863311530;
        uint64_t v15 = BytesNoCopy[12];
        uint64_t v48 = BytesNoCopy[11];
        uint64_t v14 = 2863311530;
        uint64_t v42 = 2863311530;
        uint64_t v45 = 2863311530;
        uint64_t v16 = BytesNoCopy[13];
        goto LABEL_9;
      }
      if (AppleBCMWLANIOReporting::getLogger(this))
      {
        AppleBCMWLANIOReporting::getLogger(this);
        uint64_t v18 = 0;
        if (!CCLogStream::shouldLog()) {
          return v18;
        }
LABEL_35:
        uint64_t v35 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        OSData::getLength(a2);
        CCLogStream::logEmergency(v35, "[dk] %s@%d:sizeof(tdm) %lu payload->getLength() %lu\n");
      }
      return 0;
    }
    if (v6 != 1)
    {
      if (AppleBCMWLANIOReporting::getLogger(this))
      {
        AppleBCMWLANIOReporting::getLogger(this);
        uint64_t v18 = 0;
        if (!CCLogStream::shouldLog()) {
          return v18;
        }
        int v32 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logEmergency(v32, "[dk] %s@%d:Invalid TDM version - %u\n");
      }
      return 0;
    }
  }
  if (OSData::getLength(a2) != 52)
  {
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      uint64_t v18 = 0;
      if (!CCLogStream::shouldLog()) {
        return v18;
      }
      goto LABEL_35;
    }
    return 0;
  }
  uint64_t v56 = 2863311530;
  uint64_t v7 = (unsigned int *)OSData::getBytesNoCopy(a2);
  int v8 = 0;
  uint64_t v9 = v7[1];
  uint64_t v40 = v7[2];
  uint64_t v41 = v7[3];
  uint64_t v43 = v7[4];
  uint64_t v44 = v7[5];
  uint64_t v47 = v7[6];
  int v10 = 1;
  uint64_t v49 = 2863311530;
  uint64_t v50 = 2863311530;
  uint64_t v52 = 2863311530;
  uint64_t v11 = v7[8];
  uint64_t v46 = v7[7];
  uint64_t v54 = 2863311530;
  uint64_t v55 = 2863311530;
  uint64_t v12 = 2863311530;
  uint64_t v13 = 2863311530;
  uint64_t v14 = v7[10];
  uint64_t v39 = v7[9];
  uint64_t v51 = 2863311530;
  uint64_t v53 = 2863311530;
  uint64_t v48 = 2863311530;
  uint64_t v15 = 2863311530;
  uint64_t v16 = 2863311530;
  uint64_t v42 = v7[11];
  uint64_t v45 = v7[12];
LABEL_9:
  uint64_t v59 = v16;
  uint64_t v60 = v13;
  uint64_t v57 = v15;
  uint64_t v58 = v12;
  if (*(void *)(*((void *)this + 7) + 8 * a3 + 856))
  {
    uint64_t v18 = 0;
LABEL_16:
    if (v10)
    {
      int v31 = v8;
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 856), (a3 << 56) ^ 0x53202054444D6F6ELL, v9);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 856), (a3 << 56) ^ 0x53202054444D6475, v14);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 856), (a3 << 56) ^ 0x53202054444D746FLL, v40);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 856), (a3 << 56) ^ 0x53202054444D706FLL, v41);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 856), (a3 << 56) ^ 0x53202054444D7075, v43);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 856), (a3 << 56) ^ 0x53202054444D706DLL, v44);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 856), (a3 << 56) ^ 0x53202054444D746DLL, v11);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 856), (a3 << 56) ^ 0x53202054444D7462, v39);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 856), (a3 << 56) ^ 0x53202054444D7074, v47);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 856), (a3 << 56) ^ 0x53202054444D7064, v42);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 856), (a3 << 56) ^ 0x53202054444D6463, v46);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 856), (a3 << 56) ^ 0x53202054444D6464, v45);
      int v8 = v31;
    }
    if (v8)
    {
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 856), (a3 << 56) ^ 0x53202054444D6F6ELL, v56);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 856), (a3 << 56) ^ 0x53202054444D6475, v48);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 856), (a3 << 56) ^ 0x53202054444D746FLL, v49);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 856), (a3 << 56) ^ 0x53202054444D706FLL, v50);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 856), (a3 << 56) ^ 0x53202054444D706FLL, v52);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 856), (a3 << 56) ^ 0x53202054444D7075, v54);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 856), (a3 << 56) ^ 0x53202054444D706DLL, v55);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 856), (a3 << 56) ^ 0x53202054444D746DLL, v51);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 856), (a3 << 56) ^ 0x53202054444D7462, v53);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 856), (a3 << 56) ^ 0x53202054444D7074, v58);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 856), (a3 << 56) ^ 0x53202054444D7064, v57);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 856), (a3 << 56) ^ 0x53202054444D6463, v60);
      IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 856), (a3 << 56) ^ 0x53202054444D6464, v59);
    }
    return v18;
  }
  uint64_t v37 = v9;
  int v38 = v8;
  uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(this);
  ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
  *(void *)(*((void *)this + 7) + 8 * a3 + 856) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v21);
  if (!*(void *)(*((void *)this + 7) + 8 * a3 + 856)) {
    return 3758097085;
  }
  Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(this);
  OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)this + 7) + 8 * a3 + 856));
  uint64_t v23 = *(void *)(*((void *)this + 7) + 8 * a3 + 856);
  (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
  for (uint64_t i = 0; i != 224; i += 16)
    uint64_t v25 = IOReporter::addChannel(*(IOReporter **)(*((void *)this + 7) + 8 * a3 + 856), *(void *)((char *)&kTDMReport + i) ^ (a3 << 56), *(const char **)((char *)&kTDMReport + i + 8));
  uint64_t v18 = v25;
  uint64_t v26 = (char *)IOMallocZeroData();
  if (v26)
  {
    uint64_t v27 = v26;
    snprintf(v26, 0x32uLL, "%s Slice %d", "TDM", a3);
    AddReporterCallbacuint64_t k = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(this);
    uint64_t Target = AppleBCMWLANIOReporting::getTarget(this);
    uint64_t v30 = AppleBCMWLANBssManager::getCurrentBSS(this);
    uint64_t v18 = AddReporterCallback(Target, v30, *(void *)(*((void *)this + 7) + 8 * a3 + 856), v27, "TDM Counters");
    IOFreeData();
    int v8 = v38;
    uint64_t v9 = v37;
    goto LABEL_16;
  }
  if (AppleBCMWLANIOReporting::getLogger(this))
  {
    AppleBCMWLANIOReporting::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      unsigned int v33 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
      CCLogStream::logEmergency(v33, "[dk] %s@%d:Failed to alloc AppleBCMWLANUtil::AutoreleasedBuffer\n");
    }
  }
  return v18;
}

uint64_t AppleBCMWLANIOReportingPerSlice::initPwrScanStatReporter(AppleBCMWLANBssManager *a1, uint64_t a2, int a3)
{
  uint64_t v6 = 3758097084;
  uint64_t v7 = (char *)IOMallocZeroData();
  if (v7)
  {
    int v8 = v7;
    *(unsigned char *)(*((void *)a1 + 7) + 1404) = a3;
    if (a3 > (int)a2)
    {
      snprintf(v7, 0x32uLL, "%s %d", "Slice", a2);
      uint64_t v9 = *((void *)a1 + 7);
      uint64_t v10 = a2;
      if (*(void *)(v9 + 8 * a2 + 1048))
      {
        uint64_t v6 = 0;
        goto LABEL_12;
      }
      uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
      ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
      *(void *)(*((void *)a1 + 7) + 8 * a2 + 1048) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v14);
      if (*(void *)(*((void *)a1 + 7) + 8 * a2 + 1048))
      {
        Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
        OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 1048));
        uint64_t v16 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 1048);
        (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
        for (uint64_t i = 0; i != 96; i += 16)
          IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 1048), *(void *)((char *)&kSliceCountersScanCountReport + i) ^ (a2 << 56), *(const char **)((char *)&kSliceCountersScanCountReport + i + 8));
        AddReporterCallbacuint64_t k = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
        uint64_t Target = AppleBCMWLANIOReporting::getTarget(a1);
        uint64_t v20 = AppleBCMWLANBssManager::getCurrentBSS(a1);
        uint64_t v6 = AddReporterCallback(Target, v20, *(void *)(*((void *)a1 + 7) + 8 * a2 + 1048), v8, "Count Per Scan Type");
        uint64_t v9 = *((void *)a1 + 7);
LABEL_12:
        if (!*(void *)(v9 + 8 * a2 + 1072))
        {
          unint64_t v21 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
          unint64_t v22 = (IOSimpleReporter *)IO80211Controller::getReporterProvider(v21);
          *(void *)(*((void *)a1 + 7) + 8 * a2 + 1072) = IOSimpleReporter::with(v22, (IOService *)0x8010, 0, v23);
          uint64_t v6 = 3758097084;
          if (*(void *)(*((void *)a1 + 7) + 8 * a2 + 1072))
          {
            unsigned int v24 = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
            OSSet::setObject(v24, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 1072));
            uint64_t v25 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 1072);
            (*(void (**)(uint64_t))(*(void *)v25 + 16))(v25);
            uint64_t v26 = 0;
            uint64_t v27 = a2 << 56;
            do
            {
              IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * v10 + 1072), *(void *)((char *)&kSliceCountersScanDurReport + v26) ^ v27, *(const char **)((char *)&kSliceCountersScanDurReport + v26 + 8));
              v26 += 16;
            }
            while (v26 != 160);
            int v28 = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
            uint64_t v29 = AppleBCMWLANIOReporting::getTarget(a1);
            uint64_t v30 = AppleBCMWLANBssManager::getCurrentBSS(a1);
            uint64_t v6 = v28(v29, v30, *(void *)(*((void *)a1 + 7) + 8 * v10 + 1072), v8, "Dur   Per Scan Type");
          }
        }
      }
    }
    IOFreeData();
    return v6;
  }
  if (AppleBCMWLANIOReporting::getLogger(a1))
  {
    AppleBCMWLANIOReporting::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
      CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to alloc AppleBCMWLANUtil::AutoreleasedBuffer\n", "initPwrScanStatReporter", 2236);
    }
  }
  return v6;
}

uint64_t AppleBCMWLANIOReportingPerSlice::reportScanPwrStats(AppleBCMWLANIOReporting *a1, unsigned int a2, OSData *a3, uint64_t a4, int a5)
{
  unsigned int v76 = 0;
  uint64_t v10 = IOMallocZeroData();
  if (v10)
  {
    uint64_t v11 = (unsigned __int16 *)v10;
    if (a3)
    {
      if (OSData::getLength(a3) >= 0x95)
      {
        if (!AppleBCMWLANIOReporting::getLogger(a1)
          || (AppleBCMWLANIOReporting::getLogger(a1), (CCLogStream::shouldLogConsole() & 1) == 0))
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109890;
            int v78 = 65;
            __int16 v79 = 2080;
            uint64_t v80 = "reportScanPwrStats";
            __int16 v81 = 1024;
            int v82 = 2285;
            __int16 v83 = 2048;
            uint64_t v84 = 148;
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: Insufficient buf sized scan_stats_data %ld to hold payload", buf, 0x22u);
          }
        }
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logAlert(Logger, "[dk] %s@%d:Insufficient buf sized scan_stats_data %ld to hold payload");
          }
        }
      }
      else if (a5 <= (int)a4)
      {
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            unint64_t v75 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(v75, "[dk] %s@%d:Out of range slice index %d\n", "reportScanPwrStats", 2286, a4);
          }
        }
        unsigned int v76 = -536870212;
      }
      else
      {
        unsigned __int8 BytesNoCopy = OSData::getBytesNoCopy(a3);
        size_t Length = OSData::getLength(a3);
        memcpy(v11, BytesNoCopy, Length);
        uint64_t v14 = a4;
        if (*(unsigned char *)(*((void *)a1 + 7) + a4 + 22)) {
          goto LABEL_8;
        }
        if (!AppleBCMWLANIOReportingPerSlice::initPwrScanStatReporter(a1, a4, a5))
        {
          *(unsigned char *)(*((void *)a1 + 7) + a4 + 22) = 1;
LABEL_8:
          int v15 = *v11;
          if (v15 == 18)
          {
            uint64_t v41 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * a4 + 1048);
            uint64_t v42 = a4;
            unsigned __int16 CounterValueSafe = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v76, (int *)4, a3, 4uLL);
            IOSimpleReporter::setValue(v41, (a4 << 56) ^ 0x536C536355736572, (uint64_t)CounterValueSafe);
            uint64_t v44 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * a4 + 1048);
            uint64_t v45 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v76, (int *)4, a3, 0x10uLL);
            IOSimpleReporter::setValue(v44, (v42 << 56) ^ 0x536C536341736F63, (uint64_t)v45);
            uint64_t v46 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v14 + 1048);
            uint64_t v47 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v76, (int *)4, a3, 0x1CuLL);
            IOSimpleReporter::setValue(v46, (v42 << 56) ^ 0x536C5363526F616DLL, (uint64_t)v47);
            uint64_t v48 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v14 + 1048);
            uint64_t v49 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v76, (int *)4, a3, 0x28uLL);
            IOSimpleReporter::setValue(v48, (v42 << 56) ^ 0x536C5363506E6F73, (uint64_t)v49);
            uint64_t v50 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v14 + 1048);
            uint64_t v51 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v76, (int *)4, a3, 0x88uLL);
            IOSimpleReporter::setValue(v50, (v42 << 56) ^ 0x536C53634F746872, (uint64_t)v51);
            IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v14 + 1048), (v42 << 56) ^ 0x536C5357526F616DLL, a2);
            uint64_t v52 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v14 + 1072);
            uint64_t v53 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v76, (int *)4, a3, 8uLL);
            IOSimpleReporter::setValue(v52, (v42 << 56) ^ 0x5344757255736572, (uint64_t)v53);
            uint64_t v54 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v14 + 1072);
            uint64_t v55 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v76, (int *)4, a3, 0x14uLL);
            IOSimpleReporter::setValue(v54, (v42 << 56) ^ 0x5344757241736F63, (uint64_t)v55);
            uint64_t v56 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v14 + 1072);
            uint64_t v57 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v76, (int *)4, a3, 0x20uLL);
            IOSimpleReporter::setValue(v56, (v42 << 56) ^ 0x53447572526F616DLL, (uint64_t)v57);
            uint64_t v58 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v14 + 1072);
            uint64_t v59 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v76, (int *)4, a3, 0x2CuLL);
            IOSimpleReporter::setValue(v58, (v42 << 56) ^ 0x53447572506E6F73, (uint64_t)v59);
            uint64_t v60 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v14 + 1072);
            uint64_t v61 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v76, (int *)4, a3, 0x8CuLL);
            IOSimpleReporter::setValue(v60, (v42 << 56) ^ 0x534475724F746872, (uint64_t)v61);
            uint64_t v62 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v14 + 1072);
            uint64_t v63 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v76, (int *)4, a3, 0xCuLL);
            IOSimpleReporter::setValue(v62, (v42 << 56) ^ 0x53444F4355736572, (uint64_t)v63);
            uint64_t v64 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v14 + 1072);
            uint64_t v65 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v76, (int *)4, a3, 0x18uLL);
            IOSimpleReporter::setValue(v64, (v42 << 56) ^ 0x53444F4341736F63, (uint64_t)v65);
            unint64_t v66 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v14 + 1072);
            uint64_t v67 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v76, (int *)4, a3, 0x24uLL);
            IOSimpleReporter::setValue(v66, (v42 << 56) ^ 0x53444F43526F616DLL, (uint64_t)v67);
            uint64_t v68 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v14 + 1072);
            uint64_t v69 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v76, (int *)4, a3, 0x30uLL);
            IOSimpleReporter::setValue(v68, (v42 << 56) ^ 0x53444F43506E6F73, (uint64_t)v69);
            uint64_t v35 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v14 + 1072);
            unint64_t v36 = (v42 << 56) ^ 0x53444F434F746872;
            uint64_t v37 = a3;
            size_t v38 = 144;
          }
          else
          {
            if (v15 != 1)
            {
LABEL_20:
              uint64_t v39 = v76;
LABEL_21:
              IOFreeData();
              return v39;
            }
            uint64_t v16 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * a4 + 1048);
            uint64_t v17 = a4;
            uint64_t v18 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v76, (int *)4, a3, 4uLL);
            IOSimpleReporter::setValue(v16, (a4 << 56) ^ 0x536C536355736572, (uint64_t)v18);
            unint64_t v19 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * a4 + 1048);
            uint64_t v20 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v76, (int *)4, a3, 0xCuLL);
            IOSimpleReporter::setValue(v19, (v17 << 56) ^ 0x536C536341736F63, (uint64_t)v20);
            unint64_t v21 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v14 + 1048);
            unint64_t v22 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v76, (int *)4, a3, 0x14uLL);
            IOSimpleReporter::setValue(v21, (v17 << 56) ^ 0x536C5363526F616DLL, (uint64_t)v22);
            unint64_t v23 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v14 + 1048);
            unsigned int v24 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v76, (int *)4, a3, 0x1CuLL);
            IOSimpleReporter::setValue(v23, (v17 << 56) ^ 0x536C5363506E6F73, (uint64_t)v24);
            uint64_t v25 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v14 + 1048);
            uint64_t v26 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v76, (int *)4, a3, 0x5CuLL);
            IOSimpleReporter::setValue(v25, (v17 << 56) ^ 0x536C53634F746872, (uint64_t)v26);
            IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v14 + 1048), (v17 << 56) ^ 0x536C5357526F616DLL, a2);
            uint64_t v27 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v14 + 1072);
            int v28 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v76, (int *)4, a3, 8uLL);
            IOSimpleReporter::setValue(v27, (v17 << 56) ^ 0x5344757255736572, (uint64_t)v28);
            uint64_t v29 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v14 + 1072);
            uint64_t v30 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v76, (int *)4, a3, 0x10uLL);
            IOSimpleReporter::setValue(v29, (v17 << 56) ^ 0x5344757241736F63, (uint64_t)v30);
            int v31 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v14 + 1072);
            int v32 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v76, (int *)4, a3, 0x18uLL);
            IOSimpleReporter::setValue(v31, (v17 << 56) ^ 0x53447572526F616DLL, (uint64_t)v32);
            unsigned int v33 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v14 + 1072);
            int v34 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v76, (int *)4, a3, 0x20uLL);
            IOSimpleReporter::setValue(v33, (v17 << 56) ^ 0x53447572506E6F73, (uint64_t)v34);
            uint64_t v35 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v14 + 1072);
            unint64_t v36 = (v17 << 56) ^ 0x534475724F746872;
            uint64_t v37 = a3;
            size_t v38 = 96;
          }
          unint64_t v70 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v76, (int *)4, v37, v38);
          IOSimpleReporter::setValue(v35, v36, (uint64_t)v70);
          goto LABEL_20;
        }
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v74 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(v74, "[dk] %s@%d:Failed to initPwrScanStatsReporter slice %d\n", "reportScanPwrStats", 2291, a4);
          }
        }
      }
    }
    else
    {
      if (!AppleBCMWLANIOReporting::getLogger(a1)
        || (AppleBCMWLANIOReporting::getLogger(a1), (CCLogStream::shouldLogConsole() & 1) == 0))
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109634;
          int v78 = 65;
          __int16 v79 = 2080;
          uint64_t v80 = "reportScanPwrStats";
          __int16 v81 = 1024;
          int v82 = 2284;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: Received NULL pointer\n", buf, 0x18u);
        }
      }
      if (AppleBCMWLANIOReporting::getLogger(a1))
      {
        AppleBCMWLANIOReporting::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v72 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
          CCLogStream::logAlert(v72, "[dk] %s@%d:Received NULL pointer\n");
        }
      }
    }
    uint64_t v39 = 3758097084;
    unsigned int v76 = -536870212;
    goto LABEL_21;
  }
  if (!AppleBCMWLANIOReporting::getLogger(a1)
    || (AppleBCMWLANIOReporting::getLogger(a1), (CCLogStream::shouldLogConsole() & 1) == 0))
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109634;
      int v78 = 65;
      __int16 v79 = 2080;
      uint64_t v80 = "reportScanPwrStats";
      __int16 v81 = 1024;
      int v82 = 2281;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: Failed to allocate scan_stats_data buf", buf, 0x18u);
    }
  }
  uint64_t v39 = 3758097084;
  if (AppleBCMWLANIOReporting::getLogger(a1))
  {
    AppleBCMWLANIOReporting::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v40 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
      CCLogStream::logAlert(v40, "[dk] %s@%d:Failed to allocate scan_stats_data buf", "reportScanPwrStats", 2281);
    }
  }
  return v39;
}

uint64_t AppleBCMWLANIOReportingPerSlice::initPwrScanStat6EReporter(AppleBCMWLANIOReporting *a1, uint64_t a2, int a3)
{
  uint64_t v6 = (char *)IOMallocZeroData();
  if (v6)
  {
    uint64_t v7 = v6;
    if (a3 <= (int)a2)
    {
      uint64_t v8 = 3758097084;
      if (AppleBCMWLANIOReporting::getLogger(a1))
      {
        AppleBCMWLANIOReporting::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
          CCLogStream::logEmergency(Logger, "[dk] %s@%d:%s:%d:Out of range slice index %d\n");
        }
      }
    }
    else
    {
      *(unsigned char *)(*((void *)a1 + 7) + 1404) = a3;
      if (snprintf(v6, 0x32uLL, "%s %d", "Slice", a2) >= 50)
      {
        uint64_t v8 = 3758097084;
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            unint64_t v23 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(v23, "[dk] %s@%d:Incorrect length written by snprintf\n");
          }
        }
      }
      else if (*(void *)(*((void *)a1 + 7) + 8 * a2 + 1144))
      {
        uint64_t v8 = 0;
      }
      else
      {
        uint64_t v10 = a2;
        uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
        ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
        *(void *)(*((void *)a1 + 7) + 8 * a2 + 1144) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v13);
        if (*(void *)(*((void *)a1 + 7) + 8 * a2 + 1144))
        {
          Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
          OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 1144));
          uint64_t v15 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 1144);
          (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
          uint64_t v16 = 0;
          uint64_t v17 = a2 << 56;
          do
          {
            IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * v10 + 1144), *(void *)((char *)&kSliceCountersScan6eCountReport + v16) ^ v17, *(const char **)((char *)&kSliceCountersScan6eCountReport + v16 + 8));
            v16 += 16;
          }
          while (v16 != 80);
          AddReporterCallbacuint64_t k = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
          uint64_t Target = AppleBCMWLANIOReporting::getTarget(a1);
          uint64_t v20 = AppleBCMWLANBssManager::getCurrentBSS(a1);
          uint64_t v8 = AddReporterCallback(Target, v20, *(void *)(*((void *)a1 + 7) + 8 * v10 + 1144), v7, "6E Scan counts");
        }
        else
        {
          uint64_t v8 = 3758097084;
        }
      }
    }
    IOFreeData();
  }
  else
  {
    uint64_t v8 = 3758097084;
    if (AppleBCMWLANIOReporting::getLogger(a1))
    {
      AppleBCMWLANIOReporting::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v9 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
        CCLogStream::logEmergency(v9, "[dk] %s@%d:Failed to alloc AppleBCMWLANUtil::AutoreleasedBuffer\n", "initPwrScanStat6EReporter", 2350);
      }
    }
  }
  return v8;
}

uint64_t AppleBCMWLANIOReportingPerSlice::reportScanPwrStats6E(AppleBCMWLANIOReporting *this, OSData *a2, uint64_t a3, int a4)
{
  unsigned int v24 = 0;
  if (a4 <= (int)a3)
  {
    uint64_t v19 = 3758097084;
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logEmergency(Logger, "[dk] %s@%d:%s:%d:Out of range slice index %d\n");
      }
    }
  }
  else if (OSData::getLength(a2) == 24)
  {
    OSData::getBytesNoCopy(a2);
    uint64_t v8 = *((void *)this + 7);
    if (*(unsigned char *)(v8 + a3 + 25))
    {
LABEL_6:
      uint64_t v9 = *(IOSimpleReporter **)(v8 + 8 * a3 + 1144);
      unsigned __int16 CounterValueSafe = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v24, (int *)4, a2, 4uLL);
      IOSimpleReporter::setValue(v9, (a3 << 56) ^ 0x536C527855707250, (uint64_t)CounterValueSafe);
      uint64_t v11 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 1144);
      uint64_t v12 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v24, (int *)4, a2, 8uLL);
      IOSimpleReporter::setValue(v11, (a3 << 56) ^ 0x536C527855707249, (uint64_t)v12);
      unint64_t v13 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 1144);
      uint64_t v14 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v24, (int *)4, a2, 0xCuLL);
      IOSimpleReporter::setValue(v13, (a3 << 56) ^ 0x536C527846696C50, (uint64_t)v14);
      uint64_t v15 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 1144);
      uint64_t v16 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v24, (int *)4, a2, 0x10uLL);
      IOSimpleReporter::setValue(v15, (a3 << 56) ^ 0x536C527846696C49, (uint64_t)v16);
      uint64_t v17 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 1144);
      uint64_t v18 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v24, (int *)4, a2, 0x14uLL);
      IOSimpleReporter::setValue(v17, (a3 << 56) ^ 0x536C526E52366553, (uint64_t)v18);
      return v24;
    }
    if (!AppleBCMWLANIOReportingPerSlice::initPwrScanStat6EReporter(this, a3, a4))
    {
      *(unsigned char *)(*((void *)this + 7) + a3 + 25) = 1;
      uint64_t v8 = *((void *)this + 7);
      goto LABEL_6;
    }
    uint64_t v19 = 3758097084;
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v23 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logEmergency(v23, "[dk] %s@%d:Failed to initPwrScanStatsReporter slice %d\n");
      }
    }
  }
  else
  {
    uint64_t v19 = 3758097084;
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v22 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        OSData::getLength(a2);
        CCLogStream::logEmergency(v22, "[dk] %s@%d:sizeof(wl_pwr_scan_6E_stats_t) %lu cnt->getLength() %lu\n");
      }
    }
  }
  return v19;
}

uint64_t AppleBCMWLANIOReportingPerSlice::initPwrScanStatsAtLinkUpReporter(AppleBCMWLANBssManager *a1, uint64_t a2, int a3)
{
  uint64_t v6 = 3758097084;
  if (IOMallocZeroData())
  {
    if (a3 > (int)a2)
    {
      uint64_t v7 = *((void *)a1 + 7);
      uint64_t v8 = a2;
      if (*(void *)(v7 + 8 * a2 + 1096))
      {
        uint64_t v6 = 0;
        goto LABEL_12;
      }
      uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
      ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
      *(void *)(*((void *)a1 + 7) + 8 * a2 + 1096) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v12);
      if (*(void *)(*((void *)a1 + 7) + 8 * a2 + 1096))
      {
        for (uint64_t i = 0; i != 96; i += 16)
          uint64_t v14 = IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 1096), *(void *)((char *)&kSliceAtLinkUpScanCountReport + i) ^ (a2 << 56), *(const char **)((char *)&kSliceAtLinkUpScanCountReport + i + 8));
        uint64_t v6 = v14;
        uint64_t v7 = *((void *)a1 + 7);
LABEL_12:
        if (!*(void *)(v7 + 8 * a2 + 1120))
        {
          uint64_t v15 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
          uint64_t v16 = (IOSimpleReporter *)IO80211Controller::getReporterProvider(v15);
          *(void *)(*((void *)a1 + 7) + 8 * a2 + 1120) = IOSimpleReporter::with(v16, (IOService *)0x8010, 0, v17);
          uint64_t v6 = 3758097084;
          if (*(void *)(*((void *)a1 + 7) + 8 * a2 + 1120))
          {
            uint64_t v18 = 0;
            uint64_t v19 = a2 << 56;
            do
            {
              uint64_t v20 = IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * v8 + 1120), *(void *)((char *)&kSliceAtLinkupScanDurReport + v18) ^ v19, *(const char **)((char *)&kSliceAtLinkupScanDurReport + v18 + 8));
              v18 += 16;
            }
            while (v18 != 160);
            uint64_t v6 = v20;
          }
        }
      }
    }
    IOFreeData();
    return v6;
  }
  if (AppleBCMWLANIOReporting::getLogger(a1))
  {
    AppleBCMWLANIOReporting::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
      CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to alloc AppleBCMWLANUtil::AutoreleasedBuffer\n", "initPwrScanStatsAtLinkUpReporter", 2410);
    }
  }
  return v6;
}

uint64_t AppleBCMWLANIOReportingPerSlice::reportScanPwrStatsAtLinkUp(AppleBCMWLANIOReporting *a1, unsigned int a2, OSData *a3, uint64_t a4, int a5)
{
  unsigned int v77 = 0;
  uint64_t v10 = IOMallocZeroData();
  if (v10)
  {
    uint64_t v11 = (unsigned __int16 *)v10;
    if (a3)
    {
      if (OSData::getLength(a3) >= 0x95)
      {
        if (!AppleBCMWLANIOReporting::getLogger(a1)
          || (AppleBCMWLANIOReporting::getLogger(a1), (CCLogStream::shouldLogConsole() & 1) == 0))
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109890;
            int v79 = 65;
            __int16 v80 = 2080;
            __int16 v81 = "reportScanPwrStatsAtLinkUp";
            __int16 v82 = 1024;
            int v83 = 2450;
            __int16 v84 = 2048;
            uint64_t v85 = 148;
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: Insufficient buf sized scan_stats_data %ld to hold payload", buf, 0x22u);
          }
        }
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logAlert(Logger, "[dk] %s@%d:Insufficient buf sized scan_stats_data %ld to hold payload");
          }
        }
      }
      else if (a5 <= (int)a4)
      {
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            unsigned int v76 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(v76, "[dk] %s@%d:Out of range slice index %d\n", "reportScanPwrStatsAtLinkUp", 2451, a4);
          }
        }
        unsigned int v77 = -536870212;
      }
      else
      {
        unsigned __int8 BytesNoCopy = OSData::getBytesNoCopy(a3);
        size_t Length = OSData::getLength(a3);
        memcpy(v11, BytesNoCopy, Length);
        uint64_t v14 = *((void *)a1 + 7);
        uint64_t v15 = a4;
        if (*(unsigned char *)(v14 + a4 + 28)) {
          goto LABEL_8;
        }
        if (!AppleBCMWLANIOReportingPerSlice::initPwrScanStatsAtLinkUpReporter(a1, a4, a5))
        {
          *(unsigned char *)(*((void *)a1 + 7) + a4 + 28) = 1;
          uint64_t v14 = *((void *)a1 + 7);
LABEL_8:
          *(unsigned char *)(v14 + 1404) = a5;
          int v16 = *v11;
          if (v16 == 18)
          {
            uint64_t v42 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * a4 + 1096);
            uint64_t v43 = a4;
            unsigned __int16 CounterValueSafe = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, a3, 4uLL);
            IOSimpleReporter::setValue(v42, (a4 << 56) ^ 0x4155536355736572, (uint64_t)CounterValueSafe);
            uint64_t v45 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * a4 + 1096);
            uint64_t v46 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, a3, 0x10uLL);
            IOSimpleReporter::setValue(v45, (v43 << 56) ^ 0x4155536341736F63, (uint64_t)v46);
            uint64_t v47 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v15 + 1096);
            uint64_t v48 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, a3, 0x1CuLL);
            IOSimpleReporter::setValue(v47, (v43 << 56) ^ 0x41555363526F616DLL, (uint64_t)v48);
            uint64_t v49 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v15 + 1096);
            uint64_t v50 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, a3, 0x28uLL);
            IOSimpleReporter::setValue(v49, (v43 << 56) ^ 0x41555363506E6F73, (uint64_t)v50);
            uint64_t v51 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v15 + 1096);
            uint64_t v52 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, a3, 0x88uLL);
            IOSimpleReporter::setValue(v51, (v43 << 56) ^ 0x415553634F746872, (uint64_t)v52);
            IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v15 + 1096), (v43 << 56) ^ 0x41555357526F616DLL, a2);
            uint64_t v53 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v15 + 1120);
            uint64_t v54 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, a3, 8uLL);
            IOSimpleReporter::setValue(v53, (v43 << 56) ^ 0x4155447255736572, (uint64_t)v54);
            uint64_t v55 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v15 + 1120);
            uint64_t v56 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, a3, 0x14uLL);
            IOSimpleReporter::setValue(v55, (v43 << 56) ^ 0x4155447241736F63, (uint64_t)v56);
            uint64_t v57 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v15 + 1120);
            uint64_t v58 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, a3, 0x20uLL);
            IOSimpleReporter::setValue(v57, (v43 << 56) ^ 0x41554472526F616DLL, (uint64_t)v58);
            uint64_t v59 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v15 + 1120);
            uint64_t v60 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, a3, 0x2CuLL);
            IOSimpleReporter::setValue(v59, (v43 << 56) ^ 0x41554472506E6F73, (uint64_t)v60);
            uint64_t v61 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v15 + 1120);
            uint64_t v62 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, a3, 0x8CuLL);
            IOSimpleReporter::setValue(v61, (v43 << 56) ^ 0x415544724F746872, (uint64_t)v62);
            uint64_t v63 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v15 + 1120);
            uint64_t v64 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, a3, 0xCuLL);
            IOSimpleReporter::setValue(v63, (v43 << 56) ^ 0x41554F4355736572, (uint64_t)v64);
            uint64_t v65 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v15 + 1120);
            unint64_t v66 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, a3, 0x18uLL);
            IOSimpleReporter::setValue(v65, (v43 << 56) ^ 0x41554F4341736F63, (uint64_t)v66);
            uint64_t v67 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v15 + 1120);
            uint64_t v68 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, a3, 0x24uLL);
            IOSimpleReporter::setValue(v67, (v43 << 56) ^ 0x41554F43526F616DLL, (uint64_t)v68);
            uint64_t v69 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v15 + 1120);
            unint64_t v70 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, a3, 0x30uLL);
            IOSimpleReporter::setValue(v69, (v43 << 56) ^ 0x41554F43506E6F73, (uint64_t)v70);
            unint64_t v36 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v15 + 1120);
            unint64_t v37 = (v43 << 56) ^ 0x41554F434F746872;
            size_t v38 = a3;
            size_t v39 = 144;
          }
          else
          {
            if (v16 != 1)
            {
LABEL_20:
              uint64_t v40 = v77;
LABEL_21:
              IOFreeData();
              return v40;
            }
            unint64_t v17 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * a4 + 1096);
            uint64_t v18 = a4;
            uint64_t v19 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, a3, 4uLL);
            IOSimpleReporter::setValue(v17, (a4 << 56) ^ 0x4155536355736572, (uint64_t)v19);
            uint64_t v20 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * a4 + 1096);
            unint64_t v21 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, a3, 0xCuLL);
            IOSimpleReporter::setValue(v20, (v18 << 56) ^ 0x4155536341736F63, (uint64_t)v21);
            unint64_t v22 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v15 + 1096);
            unint64_t v23 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, a3, 0x14uLL);
            IOSimpleReporter::setValue(v22, (v18 << 56) ^ 0x41555363526F616DLL, (uint64_t)v23);
            unsigned int v24 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v15 + 1096);
            uint64_t v25 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, a3, 0x1CuLL);
            IOSimpleReporter::setValue(v24, (v18 << 56) ^ 0x41555363506E6F73, (uint64_t)v25);
            uint64_t v26 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v15 + 1096);
            uint64_t v27 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, a3, 0x5CuLL);
            IOSimpleReporter::setValue(v26, (v18 << 56) ^ 0x415553634F746872, (uint64_t)v27);
            IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v15 + 1096), (v18 << 56) ^ 0x41555357526F616DLL, a2);
            int v28 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v15 + 1120);
            uint64_t v29 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, a3, 8uLL);
            IOSimpleReporter::setValue(v28, (v18 << 56) ^ 0x4155447255736572, (uint64_t)v29);
            uint64_t v30 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v15 + 1120);
            int v31 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, a3, 0x10uLL);
            IOSimpleReporter::setValue(v30, (v18 << 56) ^ 0x4155447241736F63, (uint64_t)v31);
            int v32 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v15 + 1120);
            unsigned int v33 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, a3, 0x18uLL);
            IOSimpleReporter::setValue(v32, (v18 << 56) ^ 0x41554472526F616DLL, (uint64_t)v33);
            int v34 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v15 + 1120);
            uint64_t v35 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, a3, 0x20uLL);
            IOSimpleReporter::setValue(v34, (v18 << 56) ^ 0x41554472506E6F73, (uint64_t)v35);
            unint64_t v36 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v15 + 1120);
            unint64_t v37 = (v18 << 56) ^ 0x415544724F746872;
            size_t v38 = a3;
            size_t v39 = 96;
          }
          uint64_t v71 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v77, (int *)4, v38, v39);
          IOSimpleReporter::setValue(v36, v37, (uint64_t)v71);
          goto LABEL_20;
        }
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            unint64_t v75 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(v75, "[dk] %s@%d:Failed to initPwrScanStatsAtLinkUpReporter slice %d\n", "reportScanPwrStatsAtLinkUp", 2456, a4);
          }
        }
      }
    }
    else
    {
      if (!AppleBCMWLANIOReporting::getLogger(a1)
        || (AppleBCMWLANIOReporting::getLogger(a1), (CCLogStream::shouldLogConsole() & 1) == 0))
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109634;
          int v79 = 65;
          __int16 v80 = 2080;
          __int16 v81 = "reportScanPwrStatsAtLinkUp";
          __int16 v82 = 1024;
          int v83 = 2449;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: Received NULL pointer\n", buf, 0x18u);
        }
      }
      if (AppleBCMWLANIOReporting::getLogger(a1))
      {
        AppleBCMWLANIOReporting::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v73 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
          CCLogStream::logAlert(v73, "[dk] %s@%d:Received NULL pointer\n");
        }
      }
    }
    uint64_t v40 = 3758097084;
    unsigned int v77 = -536870212;
    goto LABEL_21;
  }
  if (!AppleBCMWLANIOReporting::getLogger(a1)
    || (AppleBCMWLANIOReporting::getLogger(a1), (CCLogStream::shouldLogConsole() & 1) == 0))
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109634;
      int v79 = 65;
      __int16 v80 = 2080;
      __int16 v81 = "reportScanPwrStatsAtLinkUp";
      __int16 v82 = 1024;
      int v83 = 2446;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: Failed to allocate scan_stats_data buf", buf, 0x18u);
    }
  }
  uint64_t v40 = 3758097084;
  if (AppleBCMWLANIOReporting::getLogger(a1))
  {
    AppleBCMWLANIOReporting::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v41 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
      CCLogStream::logAlert(v41, "[dk] %s@%d:Failed to allocate scan_stats_data buf", "reportScanPwrStatsAtLinkUp", 2446);
    }
  }
  return v40;
}

uint64_t AppleBCMWLANIOReportingPerSlice::initPwrScanStatsSinceLinkUpReporter(AppleBCMWLANBssManager *a1, uint64_t a2, int a3)
{
  uint64_t v6 = 3758097084;
  uint64_t v7 = (char *)IOMallocZeroData();
  if (v7)
  {
    uint64_t v8 = v7;
    if (a3 > (int)a2)
    {
      snprintf(v7, 0x32uLL, "%s %d", "Slice", a2);
      uint64_t v9 = *((void *)a1 + 7);
      uint64_t v10 = a2;
      if (*(void *)(v9 + 8 * a2 + 1168))
      {
        uint64_t v6 = 0;
        goto LABEL_12;
      }
      uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
      ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
      *(void *)(*((void *)a1 + 7) + 8 * a2 + 1168) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v14);
      if (*(void *)(*((void *)a1 + 7) + 8 * a2 + 1168))
      {
        Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
        OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 1168));
        uint64_t v16 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 1168);
        (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
        for (uint64_t i = 0; i != 96; i += 16)
          IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a2 + 1168), *(void *)((char *)&kSliceSincelinkUpScanCountReport + i) ^ (a2 << 56), *(const char **)((char *)&kSliceSincelinkUpScanCountReport + i + 8));
        AddReporterCallbacuint64_t k = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
        uint64_t Target = AppleBCMWLANIOReporting::getTarget(a1);
        uint64_t v20 = AppleBCMWLANBssManager::getCurrentBSS(a1);
        uint64_t v6 = AddReporterCallback(Target, v20, *(void *)(*((void *)a1 + 7) + 8 * a2 + 1168), v8, "Count Per Scan Type - since LinkUp");
        uint64_t v9 = *((void *)a1 + 7);
LABEL_12:
        if (!*(void *)(v9 + 8 * a2 + 1192))
        {
          unint64_t v21 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
          unint64_t v22 = (IOSimpleReporter *)IO80211Controller::getReporterProvider(v21);
          *(void *)(*((void *)a1 + 7) + 8 * a2 + 1192) = IOSimpleReporter::with(v22, (IOService *)0x8010, 0, v23);
          uint64_t v6 = 3758097084;
          if (*(void *)(*((void *)a1 + 7) + 8 * a2 + 1192))
          {
            unsigned int v24 = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
            OSSet::setObject(v24, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 1192));
            uint64_t v25 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 1192);
            (*(void (**)(uint64_t))(*(void *)v25 + 16))(v25);
            uint64_t v26 = 0;
            uint64_t v27 = a2 << 56;
            do
            {
              IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * v10 + 1192), *(void *)((char *)&kSliceSinceLinkUpScanDurReport + v26) ^ v27, *(const char **)((char *)&kSliceSinceLinkUpScanDurReport + v26 + 8));
              v26 += 16;
            }
            while (v26 != 160);
            int v28 = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
            uint64_t v29 = AppleBCMWLANIOReporting::getTarget(a1);
            uint64_t v30 = AppleBCMWLANBssManager::getCurrentBSS(a1);
            uint64_t v6 = v28(v29, v30, *(void *)(*((void *)a1 + 7) + 8 * v10 + 1192), v8, "Dur   Per Scan Type - since LinkUp");
          }
        }
      }
    }
    IOFreeData();
    return v6;
  }
  if (AppleBCMWLANIOReporting::getLogger(a1))
  {
    AppleBCMWLANIOReporting::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
      CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to alloc AppleBCMWLANUtil::AutoreleasedBuffer\n", "initPwrScanStatsSinceLinkUpReporter", 2516);
    }
  }
  return v6;
}

uint64_t AppleBCMWLANIOReportingPerSlice::reportScanPwrStatsSinceLinkUp(AppleBCMWLANIOReporting *this, uint64_t a2, int a3)
{
  if (a3 <= (int)a2)
  {
    uint64_t v70 = 3758097084;
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logEmergency(Logger, "[dk] %s@%d:Out of range slice index %d\n");
      }
    }
  }
  else
  {
    uint64_t v5 = *((void *)this + 7);
    if (!*(unsigned char *)(v5 + a2 + 28)) {
      return 0;
    }
    if (*(unsigned char *)(v5 + a2 + 31))
    {
LABEL_6:
      uint64_t v6 = v5 + 8 * a2;
      uint64_t v7 = *(IOSimpleReporter **)(v6 + 1168);
      uint64_t Value = IOSimpleReporter::getValue(*(IOSimpleReporter **)(v6 + 1048), (a2 << 56) ^ 0x536C536355736572);
      uint64_t v9 = IOSimpleReporter::getValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a2 + 1096), (a2 << 56) ^ 0x4155536355736572);
      IOSimpleReporter::setValue(v7, (a2 << 56) ^ 0x5355536355736572, Value - v9);
      uint64_t v10 = *((void *)this + 7) + 8 * a2;
      uint64_t v11 = *(IOSimpleReporter **)(v10 + 1168);
      uint64_t v12 = IOSimpleReporter::getValue(*(IOSimpleReporter **)(v10 + 1048), (a2 << 56) ^ 0x536C536341736F63);
      uint64_t v13 = IOSimpleReporter::getValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a2 + 1096), (a2 << 56) ^ 0x4155536341736F63);
      IOSimpleReporter::setValue(v11, (a2 << 56) ^ 0x5355536341736F63, v12 - v13);
      uint64_t v14 = *((void *)this + 7) + 8 * a2;
      uint64_t v15 = *(IOSimpleReporter **)(v14 + 1168);
      uint64_t v16 = IOSimpleReporter::getValue(*(IOSimpleReporter **)(v14 + 1048), (a2 << 56) ^ 0x536C5363526F616DLL);
      uint64_t v17 = IOSimpleReporter::getValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a2 + 1096), (a2 << 56) ^ 0x41555363526F616DLL);
      IOSimpleReporter::setValue(v15, (a2 << 56) ^ 0x53555363526F616DLL, v16 - v17);
      uint64_t v18 = *((void *)this + 7) + 8 * a2;
      uint64_t v19 = *(IOSimpleReporter **)(v18 + 1168);
      uint64_t v20 = IOSimpleReporter::getValue(*(IOSimpleReporter **)(v18 + 1048), (a2 << 56) ^ 0x536C5363506E6F73);
      uint64_t v21 = IOSimpleReporter::getValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a2 + 1096), (a2 << 56) ^ 0x41555363506E6F73);
      IOSimpleReporter::setValue(v19, (a2 << 56) ^ 0x53555363506E6F73, v20 - v21);
      uint64_t v22 = *((void *)this + 7) + 8 * a2;
      unint64_t v23 = *(IOSimpleReporter **)(v22 + 1168);
      uint64_t v24 = IOSimpleReporter::getValue(*(IOSimpleReporter **)(v22 + 1048), (a2 << 56) ^ 0x536C53634F746872);
      uint64_t v25 = IOSimpleReporter::getValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a2 + 1096), (a2 << 56) ^ 0x415553634F746872);
      IOSimpleReporter::setValue(v23, (a2 << 56) ^ 0x535553634F746872, v24 - v25);
      uint64_t v26 = *((void *)this + 7) + 8 * a2;
      uint64_t v27 = *(IOSimpleReporter **)(v26 + 1168);
      uint64_t v28 = IOSimpleReporter::getValue(*(IOSimpleReporter **)(v26 + 1048), (a2 << 56) ^ 0x536C5357526F616DLL);
      uint64_t v29 = IOSimpleReporter::getValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a2 + 1096), (a2 << 56) ^ 0x41555357526F616DLL);
      IOSimpleReporter::setValue(v27, (a2 << 56) ^ 0x53555357526F616DLL, v28 - v29);
      uint64_t v30 = *((void *)this + 7) + 8 * a2;
      int v31 = *(IOSimpleReporter **)(v30 + 1192);
      uint64_t v32 = IOSimpleReporter::getValue(*(IOSimpleReporter **)(v30 + 1072), (a2 << 56) ^ 0x5344757255736572);
      uint64_t v33 = IOSimpleReporter::getValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a2 + 1120), (a2 << 56) ^ 0x4155447255736572);
      IOSimpleReporter::setValue(v31, (a2 << 56) ^ 0x5355447255736572, v32 - v33);
      uint64_t v34 = *((void *)this + 7) + 8 * a2;
      uint64_t v35 = *(IOSimpleReporter **)(v34 + 1192);
      uint64_t v36 = IOSimpleReporter::getValue(*(IOSimpleReporter **)(v34 + 1072), (a2 << 56) ^ 0x5344757241736F63);
      uint64_t v37 = IOSimpleReporter::getValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a2 + 1120), (a2 << 56) ^ 0x4155447241736F63);
      IOSimpleReporter::setValue(v35, (a2 << 56) ^ 0x5355447241736F63, v36 - v37);
      uint64_t v38 = *((void *)this + 7) + 8 * a2;
      size_t v39 = *(IOSimpleReporter **)(v38 + 1192);
      uint64_t v40 = IOSimpleReporter::getValue(*(IOSimpleReporter **)(v38 + 1072), (a2 << 56) ^ 0x53447572526F616DLL);
      uint64_t v41 = IOSimpleReporter::getValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a2 + 1120), (a2 << 56) ^ 0x41554472526F616DLL);
      IOSimpleReporter::setValue(v39, (a2 << 56) ^ 0x53554472526F616DLL, v40 - v41);
      uint64_t v42 = *((void *)this + 7) + 8 * a2;
      uint64_t v43 = *(IOSimpleReporter **)(v42 + 1192);
      uint64_t v44 = IOSimpleReporter::getValue(*(IOSimpleReporter **)(v42 + 1072), (a2 << 56) ^ 0x53447572506E6F73);
      uint64_t v45 = IOSimpleReporter::getValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a2 + 1120), (a2 << 56) ^ 0x41554472506E6F73);
      IOSimpleReporter::setValue(v43, (a2 << 56) ^ 0x53554472506E6F73, v44 - v45);
      uint64_t v46 = *((void *)this + 7) + 8 * a2;
      uint64_t v47 = *(IOSimpleReporter **)(v46 + 1192);
      uint64_t v48 = IOSimpleReporter::getValue(*(IOSimpleReporter **)(v46 + 1072), (a2 << 56) ^ 0x534475724F746872);
      uint64_t v49 = IOSimpleReporter::getValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a2 + 1120), (a2 << 56) ^ 0x415544724F746872);
      IOSimpleReporter::setValue(v47, (a2 << 56) ^ 0x535544724F746872, v48 - v49);
      uint64_t v50 = *((void *)this + 7) + 8 * a2;
      uint64_t v51 = *(IOSimpleReporter **)(v50 + 1192);
      uint64_t v52 = IOSimpleReporter::getValue(*(IOSimpleReporter **)(v50 + 1072), (a2 << 56) ^ 0x53444F4355736572);
      uint64_t v53 = IOSimpleReporter::getValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a2 + 1120), (a2 << 56) ^ 0x41554F4355736572);
      IOSimpleReporter::setValue(v51, (a2 << 56) ^ 0x53554F4355736572, v52 - v53);
      uint64_t v54 = *((void *)this + 7) + 8 * a2;
      uint64_t v55 = *(IOSimpleReporter **)(v54 + 1192);
      uint64_t v56 = IOSimpleReporter::getValue(*(IOSimpleReporter **)(v54 + 1072), (a2 << 56) ^ 0x53444F4341736F63);
      uint64_t v57 = IOSimpleReporter::getValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a2 + 1120), (a2 << 56) ^ 0x41554F4341736F63);
      IOSimpleReporter::setValue(v55, (a2 << 56) ^ 0x53554F4341736F63, v56 - v57);
      uint64_t v58 = *((void *)this + 7) + 8 * a2;
      uint64_t v59 = *(IOSimpleReporter **)(v58 + 1192);
      uint64_t v60 = IOSimpleReporter::getValue(*(IOSimpleReporter **)(v58 + 1072), (a2 << 56) ^ 0x53444F43526F616DLL);
      uint64_t v61 = IOSimpleReporter::getValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a2 + 1120), (a2 << 56) ^ 0x41554F43526F616DLL);
      IOSimpleReporter::setValue(v59, (a2 << 56) ^ 0x53554F43526F616DLL, v60 - v61);
      uint64_t v62 = *((void *)this + 7) + 8 * a2;
      uint64_t v63 = *(IOSimpleReporter **)(v62 + 1192);
      uint64_t v64 = IOSimpleReporter::getValue(*(IOSimpleReporter **)(v62 + 1072), (a2 << 56) ^ 0x53444F43506E6F73);
      uint64_t v65 = IOSimpleReporter::getValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a2 + 1120), (a2 << 56) ^ 0x41554F43506E6F73);
      IOSimpleReporter::setValue(v63, (a2 << 56) ^ 0x53554F43506E6F73, v64 - v65);
      uint64_t v66 = *((void *)this + 7) + 8 * a2;
      uint64_t v67 = *(IOSimpleReporter **)(v66 + 1192);
      uint64_t v68 = IOSimpleReporter::getValue(*(IOSimpleReporter **)(v66 + 1072), (a2 << 56) ^ 0x53444F434F746872);
      uint64_t v69 = IOSimpleReporter::getValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a2 + 1120), (a2 << 56) ^ 0x41554F434F746872);
      IOSimpleReporter::setValue(v67, (a2 << 56) ^ 0x53554F434F746872, v68 - v69);
      return 0;
    }
    if (!AppleBCMWLANIOReportingPerSlice::initPwrScanStatsSinceLinkUpReporter(this, a2, a3))
    {
      *(unsigned char *)(*((void *)this + 7) + a2 + 31) = 1;
      uint64_t v5 = *((void *)this + 7);
      goto LABEL_6;
    }
    uint64_t v70 = 3758097084;
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v73 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logEmergency(v73, "[dk] %s@%d:Failed to initPwrScanStatsSinceLinkUpReporter slice %d\n");
      }
    }
  }
  return v70;
}

uint64_t AppleBCMWLANIOReportingPerSlice::initScanModeSinceLinkUpReporter(AppleBCMWLANBssManager *a1, uint64_t a2, int a3)
{
  uint64_t v6 = 3758097084;
  uint64_t v7 = (char *)IOMallocZeroData();
  if (v7)
  {
    uint64_t v8 = v7;
    if (a3 > (int)a2)
    {
      snprintf(v7, 0x32uLL, "%s %d", "Slice", a2);
      if (*(void *)(*((void *)a1 + 7) + 8 * a2 + 1216))
      {
        uint64_t v6 = 0;
      }
      else
      {
        uint64_t v10 = a2;
        uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
        ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
        *(void *)(*((void *)a1 + 7) + 8 * a2 + 1216) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v13);
        if (*(void *)(*((void *)a1 + 7) + 8 * a2 + 1216))
        {
          Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
          OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 1216));
          uint64_t v15 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 1216);
          (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
          uint64_t v16 = 0;
          uint64_t v17 = a2 << 56;
          do
          {
            IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * v10 + 1216), *(void *)((char *)&kSliceCountersScanModeReport + v16) ^ v17, *(const char **)((char *)&kSliceCountersScanModeReport + v16 + 8));
            v16 += 16;
          }
          while (v16 != 48);
          AddReporterCallbacuint64_t k = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
          uint64_t Target = AppleBCMWLANIOReporting::getTarget(a1);
          uint64_t v20 = AppleBCMWLANBssManager::getCurrentBSS(a1);
          uint64_t v6 = AddReporterCallback(Target, v20, *(void *)(*((void *)a1 + 7) + 8 * v10 + 1216), v8, "Count Per Scan Mode");
        }
      }
    }
    IOFreeData();
  }
  else if (AppleBCMWLANIOReporting::getLogger(a1))
  {
    AppleBCMWLANIOReporting::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
      CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to alloc AppleBCMWLANUtil::AutoreleasedBuffer\n", "initScanModeSinceLinkUpReporter", 2611);
    }
  }
  return v6;
}

uint64_t AppleBCMWLANIOReportingPerSlice::resetScanModeStats(uint64_t a1, uint64_t a2)
{
  IOSimpleReporter::setValue(*(IOSimpleReporter **)(*(void *)(a1 + 56) + 8 * a2 + 1216), (a2 << 56) ^ 0x536C5363616E4841, 0);
  IOSimpleReporter::setValue(*(IOSimpleReporter **)(*(void *)(a1 + 56) + 8 * a2 + 1216), (a2 << 56) ^ 0x536C5363616E4C53, 0);
  uint64_t v4 = *(IOSimpleReporter **)(*(void *)(a1 + 56) + 8 * a2 + 1216);
  return IOSimpleReporter::setValue(v4, (a2 << 56) ^ 0x536C5363616E4C50, 0);
}

uint64_t AppleBCMWLANIOReportingPerSlice::reportScanModeStatsSinceLinkUp(AppleBCMWLANIOReporting *this, uint64_t a2, int a3, int a4)
{
  if (a4 <= (int)a2)
  {
    uint64_t v16 = 3758097084;
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logEmergency(Logger, "[dk] %s@%d:Out of range slice index %d\n");
      }
    }
    return v16;
  }
  uint64_t v8 = (unsigned char *)*((void *)this + 7);
  if (!v8[34])
  {
    if (AppleBCMWLANIOReportingPerSlice::initScanModeSinceLinkUpReporter(this, 0, a4))
    {
      uint64_t v16 = 3758097084;
      if (AppleBCMWLANIOReporting::getLogger(this))
      {
        AppleBCMWLANIOReporting::getLogger(this);
        if (CCLogStream::shouldLog()) {
          goto LABEL_32;
        }
      }
      return v16;
    }
    *(unsigned char *)(*((void *)this + 7) + 34) = 1;
    AppleBCMWLANIOReportingPerSlice::resetScanModeStats((uint64_t)this, 0);
    uint64_t v8 = (unsigned char *)*((void *)this + 7);
  }
  if (!v8[35])
  {
    if (AppleBCMWLANIOReportingPerSlice::initScanModeSinceLinkUpReporter(this, 1, a4))
    {
      uint64_t v16 = 3758097084;
      if (AppleBCMWLANIOReporting::getLogger(this))
      {
        AppleBCMWLANIOReporting::getLogger(this);
        if (CCLogStream::shouldLog()) {
          goto LABEL_32;
        }
      }
      return v16;
    }
    *(unsigned char *)(*((void *)this + 7) + 35) = 1;
    AppleBCMWLANIOReportingPerSlice::resetScanModeStats((uint64_t)this, 1);
    uint64_t v8 = (unsigned char *)*((void *)this + 7);
  }
  if (v8[36]) {
    goto LABEL_11;
  }
  if (!AppleBCMWLANIOReportingPerSlice::initScanModeSinceLinkUpReporter(this, 2, a4))
  {
    *(unsigned char *)(*((void *)this + 7) + 36) = 1;
    AppleBCMWLANIOReportingPerSlice::resetScanModeStats((uint64_t)this, 2);
LABEL_11:
    if (a3 == 2)
    {
      uint64_t v11 = *(IOSimpleReporter **)(*((void *)this + 7) + 1232);
      uint64_t v12 = IOSimpleReporter::getValue(v11, 0x516C5363616E4C50uLL) + 1;
      unint64_t v13 = v11;
      unint64_t v14 = 0x516C5363616E4C50;
    }
    else
    {
      if (a3 == 1)
      {
        uint64_t v9 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a2 + 1216);
        uint64_t v10 = 0x536C5363616E4C53;
      }
      else
      {
        if (a3) {
          return 0;
        }
        uint64_t v9 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a2 + 1216);
        uint64_t v10 = 0x536C5363616E4841;
      }
      unint64_t v15 = v10 ^ (a2 << 56);
      uint64_t v12 = IOSimpleReporter::getValue(v9, v15) + 1;
      unint64_t v13 = v9;
      unint64_t v14 = v15;
    }
    IOSimpleReporter::setValue(v13, v14, v12);
    return 0;
  }
  uint64_t v16 = 3758097084;
  if (AppleBCMWLANIOReporting::getLogger(this))
  {
    AppleBCMWLANIOReporting::getLogger(this);
    if (CCLogStream::shouldLog())
    {
LABEL_32:
      uint64_t v19 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
      CCLogStream::logEmergency(v19, "[dk] %s@%d:Failed to initScanModeSinceLinkUpReporter slice %d\n");
    }
  }
  return v16;
}

uint64_t AppleBCMWLANIOReportingPerSlice::reportRC2Coex(AppleBCMWLANIOReporting *this, OSData *a2, int a3)
{
  if (a3 != 1)
  {
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logInfo(Logger, "[dk] %s@%d:Unexpected slice index %d\n", "reportRC2Coex", 2684, a3);
      }
    }
    return 0;
  }
  if (OSData::getLength(a2) <= 2)
  {
    uint64_t v45 = 3758097084;
    if (!AppleBCMWLANIOReporting::getLogger(this)) {
      return v45;
    }
    AppleBCMWLANIOReporting::getLogger(this);
    if (!CCLogStream::shouldLog()) {
      return v45;
    }
    uint64_t v51 = AppleBCMWLANIOReporting::getLogger(this);
    uint64_t v55 = 2685;
    size_t Length = OSData::getLength(a2);
    uint64_t v48 = "[dk] %s@%d:Unexpected RC2 Coex Stats length %lu\n";
    goto LABEL_48;
  }
  size_t v5 = *(unsigned __int16 *)OSData::getBytesNoCopy(a2);
  if (v5 == 3)
  {
    if (OSData::getLength(a2) == 48)
    {
      unsigned __int8 BytesNoCopy = (char *)OSData::getBytesNoCopy(a2);
      if (BytesNoCopy[2] == 48)
      {
        unsigned int v71 = v5;
        uint64_t v7 = (unsigned __int16 *)(BytesNoCopy + 4);
        uint64_t v8 = (unsigned __int16 *)(BytesNoCopy + 6);
        uint64_t v9 = (unsigned int *)(BytesNoCopy + 8);
        uint64_t v10 = (unsigned __int16 *)(BytesNoCopy + 12);
        uint64_t v11 = (unsigned __int16 *)(BytesNoCopy + 14);
        unsigned int v67 = *((unsigned __int16 *)BytesNoCopy + 18);
        uint64_t v12 = (unsigned __int16 *)(BytesNoCopy + 16);
        unint64_t v13 = (unsigned __int16 *)(BytesNoCopy + 18);
        unsigned int v63 = *((unsigned __int16 *)BytesNoCopy + 19);
        unint64_t v14 = (unsigned __int16 *)(BytesNoCopy + 20);
        unint64_t v15 = (unsigned __int16 *)(BytesNoCopy + 22);
        uint64_t v16 = (unsigned __int16 *)(BytesNoCopy + 24);
        uint64_t v17 = (unsigned __int16 *)(BytesNoCopy + 26);
        unsigned int v62 = *((unsigned __int16 *)BytesNoCopy + 21);
        uint64_t v18 = (unsigned __int16 *)(BytesNoCopy + 28);
        uint64_t v19 = (unsigned __int16 *)(BytesNoCopy + 30);
        unsigned int v64 = *((unsigned __int16 *)BytesNoCopy + 22);
        unsigned int v65 = *((unsigned __int16 *)BytesNoCopy + 20);
        uint64_t v20 = (unsigned int *)(BytesNoCopy + 32);
LABEL_16:
        uint64_t v66 = *v19;
        uint64_t v23 = *v18;
        uint64_t v24 = *v17;
        uint64_t v25 = *v16;
        uint64_t v26 = *v15;
        uint64_t v27 = *v14;
        uint64_t v28 = *v13;
        uint64_t v29 = *v12;
        uint64_t v30 = *v11;
        uint64_t v31 = *v10;
        uint64_t v32 = *v9;
        uint64_t v33 = *v8;
        uint64_t v34 = *v7;
        uint64_t v35 = *(IOSimpleReporter **)(*((void *)this + 7) + 1248);
        uint64_t v70 = *v20;
        uint64_t v69 = v23;
        if (!v35)
        {
          uint64_t v58 = *v9;
          uint64_t v59 = *v7;
          uint64_t v60 = *v8;
          uint64_t v61 = *v10;
          uint64_t v36 = v24;
          uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(this);
          ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
          *(void *)(*((void *)this + 7) + 1248) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v39);
          if (!*(void *)(*((void *)this + 7) + 1248)) {
            return 3758097085;
          }
          Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(this);
          OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)this + 7) + 1248));
          (*(void (**)(void))(**(void **)(*((void *)this + 7) + 1248) + 16))(*(void *)(*((void *)this + 7) + 1248));
          for (uint64_t i = 0; i != 304; i += 16)
            IOReporter::addChannel(*(IOReporter **)(*((void *)this + 7) + 1248), *(void *)((char *)&kRC2CoexCounters + i) ^ 0x100000000000000, *(const char **)((char *)&kRC2CoexCounters + i + 8));
          AddReporterCallbacuint64_t k = (void (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(this);
          uint64_t Target = AppleBCMWLANIOReporting::getTarget(this);
          uint64_t v44 = AppleBCMWLANBssManager::getCurrentBSS(this);
          AddReporterCallback(Target, v44, *(void *)(*((void *)this + 7) + 1248), "RC2 Coex", "Counters");
          uint64_t v35 = *(IOSimpleReporter **)(*((void *)this + 7) + 1248);
          uint64_t v24 = v36;
          uint64_t v33 = v60;
          uint64_t v31 = v61;
          uint64_t v32 = v58;
          uint64_t v34 = v59;
        }
        uint64_t v68 = v24;
        IOSimpleReporter::incrementValue(v35, 0x5343324475722020uLL, v32);
        IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 1248), 0x5343325265712020uLL, v34);
        IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 1248), 0x4672616E74632020uLL, v33);
        IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 1248), 0x5241636B504D2020uLL, v31);
        IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 1248), 0x5254584354532020uLL, v30);
        IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 1248), 0x4644656C61792020uLL, v29);
        IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 1248), 0x42506843616C2020uLL, v28);
        IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 1248), 0x4252617465522020uLL, v27);
        IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 1248), 0x4242636E4C732020uLL, v26);
        IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 1248), 0x4272694870702020uLL, v25);
        IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 1248), 0x4272697442542020uLL, v68);
        IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 1248), 0x4241574E616E2020uLL, v69);
        IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 1248), 0x4272694167672020uLL, v70);
        if (v71 >= 2)
        {
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 1248), 0x4272694D78442020uLL, v66);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 1248), 0x4272694D614D2020uLL, v67);
          if (v71 != 2)
          {
            IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 1248), 0x4272695478522020uLL, v63);
            IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 1248), 0x4272695278522020uLL, v65);
            IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 1248), 0x4272695478442020uLL, v62);
            IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 1248), 0x4272695278442020uLL, v64);
          }
        }
        return 0;
      }
      uint64_t v45 = 3758097084;
      if (AppleBCMWLANIOReporting::getLogger(this))
      {
        AppleBCMWLANIOReporting::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v53 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
          CCLogStream::logAlert(v53, "[dk] %s@%d:sizeof(rc2CoexStatsV3) %lu rc2CoexStatsV3.len() %d\n");
        }
      }
      return v45;
    }
    uint64_t v45 = 3758097084;
    if (!AppleBCMWLANIOReporting::getLogger(this)) {
      return v45;
    }
    AppleBCMWLANIOReporting::getLogger(this);
    if (!CCLogStream::shouldLog()) {
      return v45;
    }
    uint64_t v51 = AppleBCMWLANIOReporting::getLogger(this);
    size_t Length = 48;
    size_t v57 = OSData::getLength(a2);
    uint64_t v55 = 2701;
    uint64_t v48 = "[dk] %s@%d:sizeof(rc2CoexStatsV3) %lu payload->getLength() %lu\n";
    goto LABEL_48;
  }
  if (v5 != 2)
  {
    if (v5 != 1)
    {
      uint64_t v45 = 3758097084;
      if (!AppleBCMWLANIOReporting::getLogger(this)) {
        return v45;
      }
      AppleBCMWLANIOReporting::getLogger(this);
      if (!CCLogStream::shouldLog()) {
        return v45;
      }
      uint64_t v47 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
      uint64_t v55 = 2706;
      size_t Length = v5;
      uint64_t v48 = "[dk] %s@%d:Invalid RC2 Coex stats version - %u\n";
LABEL_30:
      CCLogStream::logAlert(v47, v48, "reportRC2Coex", v55, Length, v57);
      return v45;
    }
    if (OSData::getLength(a2) == 36)
    {
      uint64_t v6 = (char *)OSData::getBytesNoCopy(a2);
      if (v6[2] == 36)
      {
        unsigned int v71 = v5;
        uint64_t v7 = (unsigned __int16 *)(v6 + 4);
        uint64_t v8 = (unsigned __int16 *)(v6 + 6);
        uint64_t v9 = (unsigned int *)(v6 + 8);
        uint64_t v10 = (unsigned __int16 *)(v6 + 12);
        uint64_t v11 = (unsigned __int16 *)(v6 + 14);
        uint64_t v12 = (unsigned __int16 *)(v6 + 16);
        unint64_t v13 = (unsigned __int16 *)(v6 + 18);
        unint64_t v14 = (unsigned __int16 *)(v6 + 20);
        unint64_t v15 = (unsigned __int16 *)(v6 + 22);
        uint64_t v16 = (unsigned __int16 *)(v6 + 24);
        uint64_t v17 = (unsigned __int16 *)(v6 + 26);
        uint64_t v18 = (unsigned __int16 *)(v6 + 28);
        uint64_t v19 = (unsigned __int16 *)(v6 + 30);
        uint64_t v20 = (unsigned int *)(v6 + 32);
        unsigned int v67 = 43690;
        unsigned int v63 = 43690;
LABEL_15:
        unsigned int v64 = 43690;
        unsigned int v65 = 43690;
        unsigned int v62 = 43690;
        goto LABEL_16;
      }
      uint64_t v45 = 3758097084;
      if (AppleBCMWLANIOReporting::getLogger(this))
      {
        AppleBCMWLANIOReporting::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v52 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
          CCLogStream::logAlert(v52, "[dk] %s@%d:sizeof(rc2CoexStatsV1) %lu rc2CoexStatsV1.len() %d\n");
        }
      }
      return v45;
    }
    uint64_t v45 = 3758097084;
    if (!AppleBCMWLANIOReporting::getLogger(this)) {
      return v45;
    }
    AppleBCMWLANIOReporting::getLogger(this);
    if (!CCLogStream::shouldLog()) {
      return v45;
    }
    uint64_t v51 = AppleBCMWLANIOReporting::getLogger(this);
    size_t Length = 36;
    size_t v57 = OSData::getLength(a2);
    uint64_t v55 = 2689;
    uint64_t v48 = "[dk] %s@%d:sizeof(rc2CoexStatsV1) %lu payload->getLength() %lu\n";
LABEL_48:
    uint64_t v47 = (CCLogStream *)v51;
    goto LABEL_30;
  }
  if (OSData::getLength(a2) != 40)
  {
    uint64_t v45 = 3758097084;
    if (!AppleBCMWLANIOReporting::getLogger(this)) {
      return v45;
    }
    AppleBCMWLANIOReporting::getLogger(this);
    if (!CCLogStream::shouldLog()) {
      return v45;
    }
    uint64_t v51 = AppleBCMWLANIOReporting::getLogger(this);
    size_t Length = 40;
    size_t v57 = OSData::getLength(a2);
    uint64_t v55 = 2695;
    uint64_t v48 = "[dk] %s@%d:sizeof(rc2CoexStatsV2) %lu payload->getLength() %lu\n";
    goto LABEL_48;
  }
  uint64_t v22 = (char *)OSData::getBytesNoCopy(a2);
  if (v22[2] == 40)
  {
    unsigned int v71 = v5;
    uint64_t v7 = (unsigned __int16 *)(v22 + 4);
    uint64_t v8 = (unsigned __int16 *)(v22 + 6);
    uint64_t v9 = (unsigned int *)(v22 + 8);
    uint64_t v10 = (unsigned __int16 *)(v22 + 12);
    uint64_t v11 = (unsigned __int16 *)(v22 + 14);
    uint64_t v12 = (unsigned __int16 *)(v22 + 16);
    unint64_t v13 = (unsigned __int16 *)(v22 + 18);
    unint64_t v14 = (unsigned __int16 *)(v22 + 20);
    unint64_t v15 = (unsigned __int16 *)(v22 + 22);
    uint64_t v16 = (unsigned __int16 *)(v22 + 24);
    uint64_t v17 = (unsigned __int16 *)(v22 + 26);
    uint64_t v18 = (unsigned __int16 *)(v22 + 28);
    uint64_t v19 = (unsigned __int16 *)(v22 + 30);
    uint64_t v20 = (unsigned int *)(v22 + 32);
    unsigned int v67 = *((unsigned __int16 *)v22 + 18);
    unsigned int v63 = *((unsigned __int16 *)v22 + 19);
    goto LABEL_15;
  }
  uint64_t v45 = 3758097084;
  if (AppleBCMWLANIOReporting::getLogger(this))
  {
    AppleBCMWLANIOReporting::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v54 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
      CCLogStream::logAlert(v54, "[dk] %s@%d:sizeof(rc2CoexStatsV2) %lu rc2CoexStatsV2.len() %d\n");
    }
  }
  return v45;
}

uint64_t AppleBCMWLANIOReportingPerSlice::reportRC1Coex(AppleBCMWLANIOReporting *this, OSData *a2, int a3)
{
  if (a3)
  {
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logInfo(Logger, "[dk] %s@%d:Unexpected slice index %d\n", "reportRC1Coex", 2760, a3);
      }
    }
    return 0;
  }
  else if (OSData::getLength(a2) <= 2)
  {
    uint64_t v7 = 3758097084;
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v30 = AppleBCMWLANIOReporting::getLogger(this);
        uint64_t v32 = 2761;
        size_t Length = OSData::getLength(a2);
        uint64_t v10 = "[dk] %s@%d:Unexpected RC1 Coex Stats length %lu\n";
LABEL_44:
        uint64_t v9 = (CCLogStream *)v30;
LABEL_12:
        CCLogStream::logAlert(v9, v10, "reportRC1Coex", v32, Length, v34);
      }
    }
  }
  else
  {
    size_t v5 = *(unsigned __int16 *)OSData::getBytesNoCopy(a2);
    switch((int)v5)
    {
      case 1:
        if (OSData::getLength(a2) == 40)
        {
          unsigned __int8 BytesNoCopy = OSData::getBytesNoCopy(a2);
          if (BytesNoCopy[1] == 40) {
            goto LABEL_30;
          }
          uint64_t v7 = 3758097084;
          if (AppleBCMWLANIOReporting::getLogger(this))
          {
            AppleBCMWLANIOReporting::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v8 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
              CCLogStream::logAlert(v8, "[dk] %s@%d:sizeof(wlc_rc1cx_status_v1_t) %lu rc1CoexStats.len() %d\n");
            }
          }
        }
        else
        {
          uint64_t v7 = 3758097084;
          if (AppleBCMWLANIOReporting::getLogger(this))
          {
            AppleBCMWLANIOReporting::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v30 = AppleBCMWLANIOReporting::getLogger(this);
              size_t Length = 40;
              size_t v34 = OSData::getLength(a2);
              uint64_t v32 = 2765;
              uint64_t v10 = "[dk] %s@%d:sizeof(wlc_rc1cx_status_v1_t) %lu payload->getLength() %lu\n";
              goto LABEL_44;
            }
          }
        }
        return v7;
      case 2:
        if (OSData::getLength(a2) == 48)
        {
          unsigned __int8 BytesNoCopy = OSData::getBytesNoCopy(a2);
          if (BytesNoCopy[1] == 48) {
            goto LABEL_30;
          }
          uint64_t v7 = 3758097084;
          if (AppleBCMWLANIOReporting::getLogger(this))
          {
            AppleBCMWLANIOReporting::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v11 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
              CCLogStream::logAlert(v11, "[dk] %s@%d:sizeof(wlc_rc1cx_status_v2_t) %lu rc1CoexStats.len() %d\n");
            }
          }
        }
        else
        {
          uint64_t v7 = 3758097084;
          if (AppleBCMWLANIOReporting::getLogger(this))
          {
            AppleBCMWLANIOReporting::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v30 = AppleBCMWLANIOReporting::getLogger(this);
              size_t Length = 48;
              size_t v34 = OSData::getLength(a2);
              uint64_t v32 = 2769;
              uint64_t v10 = "[dk] %s@%d:sizeof(wlc_rc1cx_status_v2_t) %lu payload->getLength() %lu\n";
              goto LABEL_44;
            }
          }
        }
        return v7;
      case 3:
        if (OSData::getLength(a2) == 72)
        {
          unsigned __int8 BytesNoCopy = OSData::getBytesNoCopy(a2);
          if (BytesNoCopy[1] == 72) {
            goto LABEL_30;
          }
          uint64_t v7 = 3758097084;
          if (AppleBCMWLANIOReporting::getLogger(this))
          {
            AppleBCMWLANIOReporting::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v12 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
              CCLogStream::logAlert(v12, "[dk] %s@%d:sizeof(wlc_rc1cx_status_v3_t) %lu rc1CoexStats.len() %d\n");
            }
          }
        }
        else
        {
          uint64_t v7 = 3758097084;
          if (AppleBCMWLANIOReporting::getLogger(this))
          {
            AppleBCMWLANIOReporting::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v30 = AppleBCMWLANIOReporting::getLogger(this);
              size_t Length = 72;
              size_t v34 = OSData::getLength(a2);
              uint64_t v32 = 2773;
              uint64_t v10 = "[dk] %s@%d:sizeof(wlc_rc1cx_status_v3_t) %lu payload->getLength() %lu\n";
              goto LABEL_44;
            }
          }
        }
        return v7;
      case 4:
        if (OSData::getLength(a2) == 52)
        {
          unsigned __int8 BytesNoCopy = OSData::getBytesNoCopy(a2);
          if (BytesNoCopy[1] == 52) {
            goto LABEL_30;
          }
          uint64_t v7 = 3758097084;
          if (AppleBCMWLANIOReporting::getLogger(this))
          {
            AppleBCMWLANIOReporting::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              unint64_t v13 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
              CCLogStream::logAlert(v13, "[dk] %s@%d:sizeof(wlc_rc1cx_status_v4_t) %lu rc1CoexStats.len() %d\n");
            }
          }
        }
        else
        {
          uint64_t v7 = 3758097084;
          if (AppleBCMWLANIOReporting::getLogger(this))
          {
            AppleBCMWLANIOReporting::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v30 = AppleBCMWLANIOReporting::getLogger(this);
              size_t Length = 52;
              size_t v34 = OSData::getLength(a2);
              uint64_t v32 = 2777;
              uint64_t v10 = "[dk] %s@%d:sizeof(wlc_rc1cx_status_v4_t) %lu payload->getLength() %lu\n";
              goto LABEL_44;
            }
          }
        }
        return v7;
      case 5:
        if (OSData::getLength(a2) == 76)
        {
          unsigned __int8 BytesNoCopy = OSData::getBytesNoCopy(a2);
          if (BytesNoCopy[1] == 76)
          {
LABEL_30:
            uint64_t v14 = *((unsigned int *)BytesNoCopy + 7);
            uint64_t v15 = *((unsigned int *)BytesNoCopy + 6);
            uint64_t v16 = *((unsigned int *)BytesNoCopy + 3);
            uint64_t v17 = *((unsigned int *)BytesNoCopy + 2);
            uint64_t v18 = *(IOSimpleReporter **)(*((void *)this + 7) + 1256);
            if (v18)
            {
LABEL_35:
              IOSimpleReporter::incrementValue(v18, 0x5243315265712020uLL, v17);
              IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 1256), 0x5243314475722020uLL, v16);
              IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 1256), 0x5243317763722020uLL, v15);
              IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 1256), 0x5243314344752020uLL, v14);
              return 0;
            }
            uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(this);
            ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
            *(void *)(*((void *)this + 7) + 1256) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v21);
            if (*(void *)(*((void *)this + 7) + 1256))
            {
              Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(this);
              OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)this + 7) + 1256));
              (*(void (**)(void))(**(void **)(*((void *)this + 7) + 1256) + 16))(*(void *)(*((void *)this + 7) + 1256));
              for (uint64_t i = 0; i != 64; i += 16)
                IOReporter::addChannel(*(IOReporter **)(*((void *)this + 7) + 1256), *(void *)((char *)&kRC1CoexCounters + i), *(const char **)((char *)&kRC1CoexCounters + i + 8));
              AddReporterCallbacuint64_t k = (void (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(this);
              uint64_t Target = AppleBCMWLANIOReporting::getTarget(this);
              uint64_t v26 = AppleBCMWLANBssManager::getCurrentBSS(this);
              AddReporterCallback(Target, v26, *(void *)(*((void *)this + 7) + 1256), "RC1 Coex", "Counters");
              uint64_t v18 = *(IOSimpleReporter **)(*((void *)this + 7) + 1256);
              goto LABEL_35;
            }
            uint64_t v7 = 3758097085;
          }
          else
          {
            uint64_t v7 = 3758097084;
            if (AppleBCMWLANIOReporting::getLogger(this))
            {
              AppleBCMWLANIOReporting::getLogger(this);
              if (CCLogStream::shouldLog())
              {
                uint64_t v31 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
                CCLogStream::logAlert(v31, "[dk] %s@%d:sizeof(wlc_rc1cx_status_v5_t) %lu rc1CoexStats.len() %d\n");
              }
            }
          }
        }
        else
        {
          uint64_t v7 = 3758097084;
          if (AppleBCMWLANIOReporting::getLogger(this))
          {
            AppleBCMWLANIOReporting::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v30 = AppleBCMWLANIOReporting::getLogger(this);
              size_t Length = 76;
              size_t v34 = OSData::getLength(a2);
              uint64_t v32 = 2781;
              uint64_t v10 = "[dk] %s@%d:sizeof(wlc_rc1cx_status_v5_t) %lu payload->getLength() %lu\n";
              goto LABEL_44;
            }
          }
        }
        break;
      default:
        uint64_t v7 = 3758097084;
        if (!AppleBCMWLANIOReporting::getLogger(this)) {
          return v7;
        }
        AppleBCMWLANIOReporting::getLogger(this);
        if (!CCLogStream::shouldLog()) {
          return v7;
        }
        uint64_t v9 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        uint64_t v32 = 2785;
        size_t Length = v5;
        uint64_t v10 = "[dk] %s@%d:Invalid RC1 Coex stats version - %u\n";
        goto LABEL_12;
    }
  }
  return v7;
}

uint64_t AppleBCMWLANIOReportingPerSlice::reportRxMpduWme(AppleBCMWLANBssManager *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = a3;
  uint64_t v7 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * a3 + 1304);
  if (v7)
  {
    uint64_t v8 = a3 << 56;
LABEL_8:
    IOSimpleReporter::setValue(v7, v8 ^ 0x52584D5469643020, a2[1]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v6 + 1304), v8 ^ 0x52584D5469643120, a2[2]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v6 + 1304), v8 ^ 0x52584D5469643220, a2[3]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v6 + 1304), v8 ^ 0x52584D5469643320, a2[4]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v6 + 1304), v8 ^ 0x52584D5469643420, a2[5]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v6 + 1304), v8 ^ 0x52584D5469643520, a2[6]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v6 + 1304), v8 ^ 0x52584D5469643620, a2[7]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v6 + 1304), v8 ^ 0x52584D5469643720, a2[8]);
    return 0;
  }
  uint64_t v9 = (char *)IOMallocZeroData();
  if (v9)
  {
    uint64_t v10 = v9;
    snprintf(v9, 0x32uLL, "%s Slice %d", "Rx MPDU WME", a3);
    uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
    ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
    *(void *)(*((void *)a1 + 7) + 8 * v6 + 1304) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v13);
    if (!*(void *)(*((void *)a1 + 7) + 8 * v6 + 1304))
    {
      IOFreeData();
      return 3758097085;
    }
    Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
    OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * v6 + 1304));
    uint64_t v15 = *(void *)(*((void *)a1 + 7) + 8 * v6 + 1304);
    (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
    uint64_t v16 = 0;
    uint64_t v8 = a3 << 56;
    do
    {
      IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * v6 + 1304), *(void *)((char *)&kRxMpduWmeCounters + v16) ^ v8, *(const char **)((char *)&kRxMpduWmeCounters + v16 + 8));
      v16 += 16;
    }
    while (v16 != 128);
    AddReporterCallbacuint64_t k = (void (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
    uint64_t Target = AppleBCMWLANIOReporting::getTarget(a1);
    uint64_t v19 = AppleBCMWLANBssManager::getCurrentBSS(a1);
    AddReporterCallback(Target, v19, *(void *)(*((void *)a1 + 7) + 8 * v6 + 1304), v10, "Counters");
    IOFreeData();
    uint64_t v7 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v6 + 1304);
    goto LABEL_8;
  }
  uint64_t v20 = 3758097084;
  if (AppleBCMWLANIOReporting::getLogger(a1))
  {
    AppleBCMWLANIOReporting::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
      CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to alloc AppleBCMWLANUtil::AutoreleasedBuffer\n", "reportRxMpduWme", 2815);
    }
  }
  return v20;
}

uint64_t AppleBCMWLANIOReportingPerSlice::reportBTLECnxStats(AppleBCMWLANBssManager *a1, unsigned int *a2)
{
  uint64_t v4 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 1296);
  if (v4)
  {
LABEL_7:
    IOSimpleReporter::setValue(v4, 0x4D455349686E2020uLL, *a2);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 1296), 0x4D4543496C732020uLL, a2[1]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 1296), 0x4D4550496C732020uLL, a2[2]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 1296), 0x4D45544964732020uLL, a2[3]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 1296), 0x4D45443064732020uLL, a2[4]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 1296), 0x4D45443164732020uLL, a2[5]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 1296), 0x4D45443264732020uLL, a2[6]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 1296), 0x4D45443364732020uLL, a2[7]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 1296), 0x4D45443464732020uLL, a2[8]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 1296), 0x4D45443564732020uLL, a2[9]);
    return 0;
  }
  size_t v5 = (char *)IOMallocZeroData();
  if (v5)
  {
    uint64_t v6 = v5;
    snprintf(v5, 0x32uLL, "%s Slice %d", "BT LE Connection Stats", 1);
    uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
    ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
    *(void *)(*((void *)a1 + 7) + 1296) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v9);
    if (!*(void *)(*((void *)a1 + 7) + 1296))
    {
      IOFreeData();
      return 3758097085;
    }
    Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
    OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 1296));
    (*(void (**)(void))(**(void **)(*((void *)a1 + 7) + 1296) + 16))(*(void *)(*((void *)a1 + 7) + 1296));
    for (uint64_t i = 0; i != 160; i += 16)
      IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 1296), *(void *)((char *)&kBtLeCnxStatsCounters + i) ^ 0x100000000000000, *(const char **)((char *)&kBtLeCnxStatsCounters + i + 8));
    AddReporterCallbacuint64_t k = (void (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
    uint64_t Target = AppleBCMWLANIOReporting::getTarget(a1);
    uint64_t v14 = AppleBCMWLANBssManager::getCurrentBSS(a1);
    AddReporterCallback(Target, v14, *(void *)(*((void *)a1 + 7) + 1296), v6, "Counters");
    IOFreeData();
    uint64_t v4 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 1296);
    goto LABEL_7;
  }
  uint64_t v15 = 3758097084;
  if (AppleBCMWLANIOReporting::getLogger(a1))
  {
    AppleBCMWLANIOReporting::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
      CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to alloc AppleBCMWLANUtil::AutoreleasedBuffer\n", "reportBTLECnxStats", 2876);
    }
  }
  return v15;
}

uint64_t AppleBCMWLANIOReportingPerSlice::reportTxMpduWme(AppleBCMWLANBssManager *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = a3;
  uint64_t v7 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * a3 + 1320);
  if (v7)
  {
    uint64_t v8 = a3 << 56;
LABEL_8:
    IOSimpleReporter::setValue(v7, v8 ^ 0x54584D5469643020, a2[1]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v6 + 1320), v8 ^ 0x54584D5469643120, a2[2]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v6 + 1320), v8 ^ 0x54584D5469643220, a2[3]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v6 + 1320), v8 ^ 0x54584D5469643320, a2[4]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v6 + 1320), v8 ^ 0x54584D5469643420, a2[5]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v6 + 1320), v8 ^ 0x54584D5469643520, a2[6]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v6 + 1320), v8 ^ 0x54584D5469643620, a2[7]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v6 + 1320), v8 ^ 0x54584D5469643720, a2[8]);
    return 0;
  }
  unint64_t v9 = (char *)IOMallocZeroData();
  if (v9)
  {
    uint64_t v10 = v9;
    snprintf(v9, 0x32uLL, "%s Slice %d", "Tx MPDU WME", a3);
    uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
    ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
    *(void *)(*((void *)a1 + 7) + 8 * v6 + 1320) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v13);
    if (!*(void *)(*((void *)a1 + 7) + 8 * v6 + 1320))
    {
      IOFreeData();
      return 3758097085;
    }
    Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
    OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * v6 + 1320));
    uint64_t v15 = *(void *)(*((void *)a1 + 7) + 8 * v6 + 1320);
    (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
    uint64_t v16 = 0;
    uint64_t v8 = a3 << 56;
    do
    {
      IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * v6 + 1320), *(void *)((char *)&kTxMpduWmeCounters + v16) ^ v8, *(const char **)((char *)&kTxMpduWmeCounters + v16 + 8));
      v16 += 16;
    }
    while (v16 != 128);
    AddReporterCallbacuint64_t k = (void (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
    uint64_t Target = AppleBCMWLANIOReporting::getTarget(a1);
    uint64_t v19 = AppleBCMWLANBssManager::getCurrentBSS(a1);
    AddReporterCallback(Target, v19, *(void *)(*((void *)a1 + 7) + 8 * v6 + 1320), v10, "Counters");
    IOFreeData();
    uint64_t v7 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v6 + 1320);
    goto LABEL_8;
  }
  uint64_t v20 = 3758097084;
  if (AppleBCMWLANIOReporting::getLogger(a1))
  {
    AppleBCMWLANIOReporting::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
      CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to alloc AppleBCMWLANUtil::AutoreleasedBuffer\n", "reportTxMpduWme", 2911);
    }
  }
  return v20;
}

uint64_t AppleBCMWLANIOReportingPerSlice::reportRxMpduLost(AppleBCMWLANBssManager *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = a3;
  uint64_t v7 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * a3 + 1336);
  if (v7)
  {
    uint64_t v8 = a3 << 56;
LABEL_8:
    IOSimpleReporter::setValue(v7, v8 ^ 0x52584C4254696430, a2[1]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v6 + 1336), v8 ^ 0x52584C4254696431, a2[2]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v6 + 1336), v8 ^ 0x52584C4254696432, a2[3]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v6 + 1336), v8 ^ 0x52584C4254696433, a2[4]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v6 + 1336), v8 ^ 0x52584C4254696434, a2[5]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v6 + 1336), v8 ^ 0x52584C4254696435, a2[6]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v6 + 1336), v8 ^ 0x52584C4254696436, a2[7]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v6 + 1336), v8 ^ 0x52584C4254696437, a2[8]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v6 + 1336), v8 ^ 0x52584C4E54696430, a2[9]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v6 + 1336), v8 ^ 0x52584C4E54696431, a2[10]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v6 + 1336), v8 ^ 0x52584C4E54696432, a2[11]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v6 + 1336), v8 ^ 0x52584C4E54696433, a2[12]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v6 + 1336), v8 ^ 0x52584C4E54696434, a2[13]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v6 + 1336), v8 ^ 0x52584C4E54696435, a2[14]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v6 + 1336), v8 ^ 0x52584C4E54696436, a2[15]);
    IOSimpleReporter::setValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v6 + 1336), v8 ^ 0x52584C4E54696437, a2[16]);
    return 0;
  }
  unint64_t v9 = (char *)IOMallocZeroData();
  if (v9)
  {
    uint64_t v10 = v9;
    snprintf(v9, 0x32uLL, "%s Slice %d", "Rx MPDU Lost", a3);
    uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
    ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
    *(void *)(*((void *)a1 + 7) + 8 * v6 + 1336) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v13);
    if (!*(void *)(*((void *)a1 + 7) + 8 * v6 + 1336))
    {
      IOFreeData();
      return 3758097085;
    }
    Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
    OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * v6 + 1336));
    uint64_t v15 = *(void *)(*((void *)a1 + 7) + 8 * v6 + 1336);
    (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
    uint64_t v16 = 0;
    uint64_t v8 = a3 << 56;
    do
    {
      IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * v6 + 1336), *(void *)((char *)&kRxMpduLostCounters + v16) ^ v8, *(const char **)((char *)&kRxMpduLostCounters + v16 + 8));
      v16 += 16;
    }
    while (v16 != 256);
    AddReporterCallbacuint64_t k = (void (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
    uint64_t Target = AppleBCMWLANIOReporting::getTarget(a1);
    uint64_t v19 = AppleBCMWLANBssManager::getCurrentBSS(a1);
    AddReporterCallback(Target, v19, *(void *)(*((void *)a1 + 7) + 8 * v6 + 1336), v10, "Counters");
    IOFreeData();
    uint64_t v7 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * v6 + 1336);
    goto LABEL_8;
  }
  uint64_t v20 = 3758097084;
  if (AppleBCMWLANIOReporting::getLogger(a1))
  {
    AppleBCMWLANIOReporting::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
      CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to alloc AppleBCMWLANUtil::AutoreleasedBuffer\n", "reportRxMpduLost", 2943);
    }
  }
  return v20;
}

uint64_t AppleBCMWLANIOReportingPerSlice::reportExtraBTCoex(AppleBCMWLANIOReporting *this, OSData *a2, uint64_t a3)
{
  if ((int)a3 >= 2)
  {
    uint64_t v24 = 3758097084;
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logEmergency(Logger, "[dk] %s@%d:Out of range slice index %d\n");
      }
    }
  }
  else
  {
    if (OSData::getLength(a2) >= 3)
    {
      switch(*(_WORD *)OSData::getBytesNoCopy(a2))
      {
        case 3:
          goto LABEL_4;
        case 4:
          if (OSData::getLength(a2) == 92)
          {
            unsigned __int8 BytesNoCopy = (unsigned __int16 *)OSData::getBytesNoCopy(a2);
            int v8 = 0;
            char v7 = 0;
            uint64_t v108 = BytesNoCopy[17];
            uint64_t v102 = BytesNoCopy[18];
            uint64_t v103 = BytesNoCopy[19];
            uint64_t v104 = BytesNoCopy[20];
            uint64_t v105 = BytesNoCopy[21];
            uint64_t v106 = BytesNoCopy[22];
            uint64_t v107 = BytesNoCopy[23];
            uint64_t v109 = BytesNoCopy[24];
            uint64_t v110 = BytesNoCopy[25];
            uint64_t v111 = BytesNoCopy[26];
            uint64_t v112 = BytesNoCopy[27];
            uint64_t v113 = BytesNoCopy[28];
            uint64_t v114 = BytesNoCopy[29];
            uint64_t v115 = BytesNoCopy[30];
            uint64_t v116 = BytesNoCopy[31];
            uint64_t v117 = BytesNoCopy[32];
            uint64_t v118 = BytesNoCopy[33];
            uint64_t v119 = BytesNoCopy[34];
            uint64_t v120 = BytesNoCopy[35];
            uint64_t v121 = BytesNoCopy[36];
            uint64_t v122 = BytesNoCopy[37];
            uint64_t v123 = BytesNoCopy[38];
            uint64_t v124 = BytesNoCopy[39];
            uint64_t v125 = BytesNoCopy[40];
            uint64_t v126 = BytesNoCopy[41];
            uint64_t v127 = BytesNoCopy[42];
            uint64_t v128 = BytesNoCopy[43];
            uint64_t v9 = BytesNoCopy[44];
            uint64_t v10 = BytesNoCopy[45];
            int v140 = 4;
            uint64_t v138 = 43690;
            uint64_t v136 = 43690;
            uint64_t v129 = 43690;
            uint64_t v130 = 43690;
            uint64_t v131 = 43690;
            uint64_t v132 = 43690;
            uint64_t v133 = 43690;
            uint64_t v134 = 43690;
            uint64_t v135 = 43690;
            uint64_t v137 = 43690;
            goto LABEL_6;
          }
          if (AppleBCMWLANIOReporting::getLogger(this))
          {
            AppleBCMWLANIOReporting::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v35 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
              size_t Length = OSData::getLength(a2);
              CCLogStream::logEmergency(v35, "[dk] %s@%d:sizeof(btcoex) %lu payload->getLength() %lu\n", "reportExtraBTCoex", 2999, 92, Length);
            }
          }
          return 3758097084;
        case 6:
          if (OSData::getLength(a2) == 60)
          {
            uint64_t v29 = (unsigned __int16 *)OSData::getBytesNoCopy(a2);
            int v8 = 0;
            char v7 = 0;
            uint64_t v101 = v29[17];
            int v140 = 6;
            uint64_t v95 = v29[18];
            uint64_t v138 = 43690;
            uint64_t v136 = 43690;
            uint64_t v91 = v29[19];
            uint64_t v129 = 43690;
            uint64_t v130 = 43690;
            uint64_t v92 = v29[20];
            uint64_t v131 = 43690;
            uint64_t v132 = 43690;
            uint64_t v93 = v29[21];
            uint64_t v133 = 43690;
            uint64_t v134 = 43690;
            uint64_t v94 = v29[22];
            uint64_t v135 = 43690;
            uint64_t v137 = 43690;
            uint64_t v96 = v29[23];
            uint64_t v108 = 43690;
            uint64_t v102 = 43690;
            uint64_t v97 = v29[24];
            uint64_t v103 = 43690;
            uint64_t v104 = 43690;
            uint64_t v98 = v29[25];
            uint64_t v105 = 43690;
            uint64_t v106 = 43690;
            uint64_t v99 = v29[26];
            uint64_t v107 = 43690;
            uint64_t v100 = v29[27];
            uint64_t v109 = 43690;
            uint64_t v110 = 43690;
            uint64_t v111 = 43690;
            uint64_t v112 = 43690;
            uint64_t v113 = 43690;
            uint64_t v114 = 43690;
            uint64_t v115 = 43690;
            uint64_t v116 = 43690;
            uint64_t v117 = 43690;
            uint64_t v118 = 43690;
            uint64_t v119 = 43690;
            uint64_t v120 = 43690;
            uint64_t v121 = 43690;
            uint64_t v122 = 43690;
            uint64_t v123 = 43690;
            uint64_t v124 = 43690;
            uint64_t v125 = 43690;
            uint64_t v126 = 43690;
            uint64_t v127 = 43690;
            uint64_t v128 = 43690;
            uint64_t v9 = 43690;
            uint64_t v10 = 43690;
            goto LABEL_7;
          }
          if (AppleBCMWLANIOReporting::getLogger(this))
          {
            AppleBCMWLANIOReporting::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v37 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
              size_t v43 = OSData::getLength(a2);
              CCLogStream::logEmergency(v37, "[dk] %s@%d:sizeof(btcoex) %lu payload->getLength() %lu\n", "reportExtraBTCoex", 3002, 60, v43);
            }
          }
          return 3758097084;
        case 7:
          if (OSData::getLength(a2) == 72)
          {
            uint64_t v30 = (unsigned __int16 *)OSData::getBytesNoCopy(a2);
            int v8 = 0;
            char v7 = 0;
            uint64_t v90 = v30[17];
            int v140 = 7;
            uint64_t v84 = v30[18];
            uint64_t v138 = 43690;
            uint64_t v136 = 43690;
            uint64_t v80 = v30[19];
            uint64_t v129 = 43690;
            uint64_t v130 = 43690;
            uint64_t v81 = v30[20];
            uint64_t v131 = 43690;
            uint64_t v132 = 43690;
            uint64_t v82 = v30[21];
            uint64_t v133 = 43690;
            uint64_t v134 = 43690;
            uint64_t v83 = v30[22];
            uint64_t v135 = 43690;
            uint64_t v137 = 43690;
            uint64_t v85 = v30[23];
            uint64_t v108 = 43690;
            uint64_t v102 = 43690;
            uint64_t v86 = v30[24];
            uint64_t v103 = 43690;
            uint64_t v104 = 43690;
            uint64_t v87 = v30[25];
            uint64_t v105 = 43690;
            uint64_t v106 = 43690;
            uint64_t v88 = v30[26];
            uint64_t v107 = 43690;
            uint64_t v89 = v30[27];
            uint64_t v109 = 43690;
            uint64_t v110 = 43690;
            uint64_t v111 = 43690;
            uint64_t v112 = 43690;
            uint64_t v113 = 43690;
            uint64_t v114 = 43690;
            uint64_t v115 = 43690;
            uint64_t v116 = 43690;
            uint64_t v117 = 43690;
            uint64_t v118 = 43690;
            uint64_t v119 = 43690;
            uint64_t v120 = 43690;
            uint64_t v121 = 43690;
            uint64_t v122 = 43690;
            uint64_t v123 = 43690;
            uint64_t v124 = 43690;
            uint64_t v125 = 43690;
            uint64_t v126 = 43690;
            uint64_t v127 = 43690;
            uint64_t v128 = 43690;
            uint64_t v9 = 43690;
            uint64_t v10 = 43690;
            uint64_t v101 = 43690;
            uint64_t v95 = 43690;
            uint64_t v91 = 43690;
            uint64_t v92 = 43690;
            uint64_t v93 = 43690;
            uint64_t v94 = 43690;
            uint64_t v96 = 43690;
            uint64_t v97 = 43690;
            uint64_t v98 = 43690;
            uint64_t v99 = 43690;
            uint64_t v100 = 43690;
            goto LABEL_8;
          }
          if (AppleBCMWLANIOReporting::getLogger(this))
          {
            AppleBCMWLANIOReporting::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v38 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
              size_t v44 = OSData::getLength(a2);
              CCLogStream::logEmergency(v38, "[dk] %s@%d:sizeof(btcoex) %lu payload->getLength() %lu\n", "reportExtraBTCoex", 3005, 72, v44);
            }
          }
          return 3758097084;
        case 9:
          if (OSData::getLength(a2) == 76)
          {
            uint64_t v31 = (unsigned __int16 *)OSData::getBytesNoCopy(a2);
            int v8 = 0;
            char v7 = 0;
            uint64_t v79 = v31[17];
            int v140 = 9;
            uint64_t v73 = v31[18];
            uint64_t v138 = 43690;
            uint64_t v136 = 43690;
            uint64_t v69 = v31[19];
            uint64_t v129 = 43690;
            uint64_t v130 = 43690;
            uint64_t v70 = v31[20];
            uint64_t v131 = 43690;
            uint64_t v132 = 43690;
            uint64_t v71 = v31[21];
            uint64_t v133 = 43690;
            uint64_t v134 = 43690;
            uint64_t v72 = v31[22];
            uint64_t v135 = 43690;
            uint64_t v137 = 43690;
            uint64_t v74 = v31[23];
            uint64_t v108 = 43690;
            uint64_t v102 = 43690;
            uint64_t v75 = v31[24];
            uint64_t v103 = 43690;
            uint64_t v104 = 43690;
            uint64_t v76 = v31[25];
            uint64_t v105 = 43690;
            uint64_t v106 = 43690;
            uint64_t v77 = v31[26];
            uint64_t v107 = 43690;
            uint64_t v78 = v31[27];
            uint64_t v109 = 43690;
            uint64_t v110 = 43690;
            uint64_t v111 = 43690;
            uint64_t v112 = 43690;
            uint64_t v113 = 43690;
            uint64_t v114 = 43690;
            uint64_t v115 = 43690;
            uint64_t v116 = 43690;
            uint64_t v117 = 43690;
            uint64_t v118 = 43690;
            uint64_t v119 = 43690;
            uint64_t v120 = 43690;
            uint64_t v121 = 43690;
            uint64_t v122 = 43690;
            uint64_t v123 = 43690;
            uint64_t v124 = 43690;
            uint64_t v125 = 43690;
            uint64_t v126 = 43690;
            uint64_t v127 = 43690;
            uint64_t v128 = 43690;
            uint64_t v9 = 43690;
            uint64_t v10 = 43690;
            uint64_t v101 = 43690;
            uint64_t v95 = 43690;
            uint64_t v91 = 43690;
            uint64_t v92 = 43690;
            uint64_t v93 = 43690;
            uint64_t v94 = 43690;
            uint64_t v96 = 43690;
            uint64_t v97 = 43690;
            uint64_t v98 = 43690;
            uint64_t v99 = 43690;
            uint64_t v100 = 43690;
            uint64_t v90 = 43690;
            uint64_t v84 = 43690;
            uint64_t v80 = 43690;
            uint64_t v81 = 43690;
            uint64_t v82 = 43690;
            uint64_t v83 = 43690;
            uint64_t v85 = 43690;
            uint64_t v86 = 43690;
            uint64_t v87 = 43690;
            uint64_t v88 = 43690;
            uint64_t v89 = 43690;
            goto LABEL_9;
          }
          if (AppleBCMWLANIOReporting::getLogger(this))
          {
            AppleBCMWLANIOReporting::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              unint64_t v39 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
              size_t v45 = OSData::getLength(a2);
              CCLogStream::logEmergency(v39, "[dk] %s@%d:sizeof(btcoex) %lu payload->getLength() %lu\n", "reportExtraBTCoex", 3008, 76, v45);
            }
          }
          return 3758097084;
        case 0xB:
          if (OSData::getLength(a2) == 88)
          {
            uint64_t v28 = (unsigned __int16 *)OSData::getBytesNoCopy(a2);
            int v8 = 0;
            char v7 = 0;
            uint64_t v68 = v28[17];
            int v140 = 11;
            uint64_t v62 = v28[18];
            uint64_t v138 = 43690;
            uint64_t v136 = 43690;
            uint64_t v58 = v28[19];
            uint64_t v129 = 43690;
            uint64_t v130 = 43690;
            uint64_t v59 = v28[20];
            uint64_t v131 = 43690;
            uint64_t v132 = 43690;
            uint64_t v60 = v28[21];
            uint64_t v133 = 43690;
            uint64_t v134 = 43690;
            uint64_t v61 = v28[22];
            uint64_t v135 = 43690;
            uint64_t v137 = 43690;
            uint64_t v63 = v28[23];
            uint64_t v108 = 43690;
            uint64_t v102 = 43690;
            uint64_t v64 = v28[24];
            uint64_t v103 = 43690;
            uint64_t v104 = 43690;
            uint64_t v65 = v28[25];
            uint64_t v105 = 43690;
            uint64_t v106 = 43690;
            uint64_t v66 = v28[26];
            uint64_t v107 = 43690;
            uint64_t v67 = v28[27];
            uint64_t v109 = 43690;
            uint64_t v110 = 43690;
            uint64_t v111 = 43690;
            uint64_t v112 = 43690;
            uint64_t v113 = 43690;
            uint64_t v114 = 43690;
            uint64_t v115 = 43690;
            uint64_t v116 = 43690;
            uint64_t v117 = 43690;
            uint64_t v118 = 43690;
            uint64_t v119 = 43690;
            uint64_t v120 = 43690;
            uint64_t v121 = 43690;
            uint64_t v122 = 43690;
            uint64_t v123 = 43690;
            uint64_t v124 = 43690;
            uint64_t v125 = 43690;
            uint64_t v126 = 43690;
            uint64_t v127 = 43690;
            uint64_t v128 = 43690;
            uint64_t v9 = 43690;
            uint64_t v10 = 43690;
            uint64_t v101 = 43690;
            uint64_t v95 = 43690;
            uint64_t v91 = 43690;
            uint64_t v92 = 43690;
            uint64_t v93 = 43690;
            uint64_t v94 = 43690;
            uint64_t v96 = 43690;
            uint64_t v97 = 43690;
            uint64_t v98 = 43690;
            uint64_t v99 = 43690;
            uint64_t v100 = 43690;
            uint64_t v90 = 43690;
            uint64_t v84 = 43690;
            uint64_t v80 = 43690;
            uint64_t v81 = 43690;
            uint64_t v82 = 43690;
            uint64_t v83 = 43690;
            uint64_t v85 = 43690;
            uint64_t v86 = 43690;
            uint64_t v87 = 43690;
            uint64_t v88 = 43690;
            uint64_t v89 = 43690;
            uint64_t v79 = 43690;
            uint64_t v73 = 43690;
            uint64_t v69 = 43690;
            uint64_t v70 = 43690;
            uint64_t v71 = 43690;
            uint64_t v72 = 43690;
            uint64_t v74 = 43690;
            uint64_t v75 = 43690;
            uint64_t v76 = 43690;
            uint64_t v77 = 43690;
            uint64_t v78 = 43690;
            goto LABEL_10;
          }
          if (AppleBCMWLANIOReporting::getLogger(this))
          {
            AppleBCMWLANIOReporting::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v36 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
              size_t v42 = OSData::getLength(a2);
              CCLogStream::logEmergency(v36, "[dk] %s@%d:sizeof(btcoex) %lu payload->getLength() %lu\n", "reportExtraBTCoex", 3011, 88, v42);
            }
          }
          return 3758097084;
        case 0xC:
          if (OSData::getLength(a2) == 112)
          {
            uint64_t v32 = (unsigned __int16 *)OSData::getBytesNoCopy(a2);
            int v8 = 0;
            uint64_t v57 = v32[17];
            int v140 = 12;
            char v7 = 1;
            uint64_t v51 = v32[18];
            uint64_t v138 = 43690;
            uint64_t v136 = 43690;
            uint64_t v47 = v32[19];
            uint64_t v129 = 43690;
            uint64_t v130 = 43690;
            uint64_t v48 = v32[20];
            uint64_t v131 = 43690;
            uint64_t v132 = 43690;
            uint64_t v49 = v32[21];
            uint64_t v133 = 43690;
            uint64_t v134 = 43690;
            uint64_t v50 = v32[22];
            uint64_t v135 = 43690;
            uint64_t v137 = 43690;
            uint64_t v52 = v32[23];
            uint64_t v108 = 43690;
            uint64_t v102 = 43690;
            uint64_t v53 = v32[24];
            uint64_t v103 = 43690;
            uint64_t v104 = 43690;
            uint64_t v54 = v32[25];
            uint64_t v105 = 43690;
            uint64_t v106 = 43690;
            uint64_t v55 = v32[26];
            uint64_t v107 = 43690;
            uint64_t v56 = v32[27];
            uint64_t v109 = 43690;
            uint64_t v110 = 43690;
            uint64_t v111 = 43690;
            uint64_t v112 = 43690;
            uint64_t v113 = 43690;
            uint64_t v114 = 43690;
            uint64_t v115 = 43690;
            uint64_t v116 = 43690;
            uint64_t v117 = 43690;
            uint64_t v118 = 43690;
            uint64_t v119 = 43690;
            uint64_t v120 = 43690;
            uint64_t v121 = 43690;
            uint64_t v122 = 43690;
            uint64_t v123 = 43690;
            uint64_t v124 = 43690;
            uint64_t v125 = 43690;
            uint64_t v126 = 43690;
            uint64_t v127 = 43690;
            uint64_t v128 = 43690;
            uint64_t v9 = 43690;
            uint64_t v10 = 43690;
            uint64_t v101 = 43690;
            uint64_t v95 = 43690;
            uint64_t v91 = 43690;
            uint64_t v92 = 43690;
            uint64_t v93 = 43690;
            uint64_t v94 = 43690;
            uint64_t v96 = 43690;
            uint64_t v97 = 43690;
            uint64_t v98 = 43690;
            uint64_t v99 = 43690;
            uint64_t v100 = 43690;
            uint64_t v90 = 43690;
            uint64_t v84 = 43690;
            uint64_t v80 = 43690;
            uint64_t v81 = 43690;
            uint64_t v82 = 43690;
            uint64_t v83 = 43690;
            uint64_t v85 = 43690;
            uint64_t v86 = 43690;
            uint64_t v87 = 43690;
            uint64_t v88 = 43690;
            uint64_t v89 = 43690;
            uint64_t v79 = 43690;
            uint64_t v73 = 43690;
            uint64_t v69 = 43690;
            uint64_t v70 = 43690;
            uint64_t v71 = 43690;
            uint64_t v72 = 43690;
            uint64_t v74 = 43690;
            uint64_t v75 = 43690;
            uint64_t v76 = 43690;
            uint64_t v77 = 43690;
            uint64_t v78 = 43690;
            uint64_t v68 = 43690;
            uint64_t v62 = 43690;
            uint64_t v58 = 43690;
            uint64_t v59 = 43690;
            uint64_t v60 = 43690;
            uint64_t v61 = 43690;
            uint64_t v63 = 43690;
            uint64_t v64 = 43690;
            uint64_t v65 = 43690;
            uint64_t v66 = 43690;
            uint64_t v67 = 43690;
            goto LABEL_11;
          }
          if (AppleBCMWLANIOReporting::getLogger(this))
          {
            AppleBCMWLANIOReporting::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v40 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
              size_t v46 = OSData::getLength(a2);
              CCLogStream::logEmergency(v40, "[dk] %s@%d:sizeof(btcoex) %lu payload->getLength() %lu\n", "reportExtraBTCoex", 3015, 112, v46);
            }
          }
          break;
        default:
          uint64_t v24 = 3758097084;
          if (AppleBCMWLANIOReporting::getLogger(this))
          {
            AppleBCMWLANIOReporting::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v27 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
              CCLogStream::logEmergency(v27, "[dk] %s@%d:Invalid BT Coex stats version - %u\n");
            }
          }
          return v24;
      }
      return 3758097084;
    }
LABEL_4:
    if (OSData::getLength(a2) == 60)
    {
      uint64_t v6 = (unsigned __int16 *)OSData::getBytesNoCopy(a2);
      char v7 = 0;
      uint64_t v138 = v6[18];
      int v140 = 3;
      int v8 = 1;
      uint64_t v136 = v6[19];
      uint64_t v108 = 43690;
      uint64_t v102 = 43690;
      uint64_t v129 = v6[20];
      uint64_t v103 = 43690;
      uint64_t v104 = 43690;
      uint64_t v130 = v6[21];
      uint64_t v105 = 43690;
      uint64_t v106 = 43690;
      uint64_t v131 = v6[22];
      uint64_t v107 = 43690;
      uint64_t v109 = 43690;
      uint64_t v132 = v6[23];
      uint64_t v110 = 43690;
      uint64_t v111 = 43690;
      uint64_t v133 = v6[24];
      uint64_t v112 = 43690;
      uint64_t v113 = 43690;
      uint64_t v134 = v6[25];
      uint64_t v114 = 43690;
      uint64_t v115 = 43690;
      uint64_t v135 = v6[26];
      uint64_t v116 = 43690;
      uint64_t v117 = 43690;
      uint64_t v137 = v6[27];
      uint64_t v118 = 43690;
      uint64_t v119 = 43690;
      uint64_t v120 = 43690;
      uint64_t v121 = 43690;
      uint64_t v122 = 43690;
      uint64_t v123 = 43690;
      uint64_t v124 = 43690;
      uint64_t v125 = 43690;
      uint64_t v126 = 43690;
      uint64_t v127 = 43690;
      uint64_t v128 = 43690;
      uint64_t v9 = 43690;
      uint64_t v10 = 43690;
LABEL_6:
      uint64_t v101 = 43690;
      uint64_t v95 = 43690;
      uint64_t v91 = 43690;
      uint64_t v92 = 43690;
      uint64_t v93 = 43690;
      uint64_t v94 = 43690;
      uint64_t v96 = 43690;
      uint64_t v97 = 43690;
      uint64_t v98 = 43690;
      uint64_t v99 = 43690;
      uint64_t v100 = 43690;
LABEL_7:
      uint64_t v90 = 43690;
      uint64_t v84 = 43690;
      uint64_t v80 = 43690;
      uint64_t v81 = 43690;
      uint64_t v82 = 43690;
      uint64_t v83 = 43690;
      uint64_t v85 = 43690;
      uint64_t v86 = 43690;
      uint64_t v87 = 43690;
      uint64_t v88 = 43690;
      uint64_t v89 = 43690;
LABEL_8:
      uint64_t v79 = 43690;
      uint64_t v73 = 43690;
      uint64_t v69 = 43690;
      uint64_t v70 = 43690;
      uint64_t v71 = 43690;
      uint64_t v72 = 43690;
      uint64_t v74 = 43690;
      uint64_t v75 = 43690;
      uint64_t v76 = 43690;
      uint64_t v77 = 43690;
      uint64_t v78 = 43690;
LABEL_9:
      uint64_t v68 = 43690;
      uint64_t v62 = 43690;
      uint64_t v58 = 43690;
      uint64_t v59 = 43690;
      uint64_t v60 = 43690;
      uint64_t v61 = 43690;
      uint64_t v63 = 43690;
      uint64_t v64 = 43690;
      uint64_t v65 = 43690;
      uint64_t v66 = 43690;
      uint64_t v67 = 43690;
LABEL_10:
      uint64_t v57 = 43690;
      uint64_t v51 = 43690;
      uint64_t v47 = 43690;
      uint64_t v48 = 43690;
      uint64_t v49 = 43690;
      uint64_t v50 = 43690;
      uint64_t v52 = 43690;
      uint64_t v53 = 43690;
      uint64_t v54 = 43690;
      uint64_t v55 = 43690;
      uint64_t v56 = 43690;
LABEL_11:
      AppleBCMWLANCore::checkForBT5GSupport(*(AppleBCMWLANCore **)(*((void *)this + 7) + 1504));
      unsigned int v11 = 0;
      if (a3 == 1 && !*(void *)(*((void *)this + 7) + 544))
      {
        uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(this);
        ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
        *(void *)(*((void *)this + 7) + 544) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v14);
        if (!*(void *)(*((void *)this + 7) + 544)) {
          return 3758097084;
        }
        Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(this);
        OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)this + 7) + 544));
        (*(void (**)(void))(**(void **)(*((void *)this + 7) + 544) + 16))(*(void *)(*((void *)this + 7) + 544));
        for (uint64_t i = 0; i != 480; i += 16)
          IOReporter::addChannel(*(IOReporter **)(*((void *)this + 7) + 544), *(void *)((char *)&kExtraBTCoexCounters + i) ^ 0x100000000000000, *(const char **)((char *)&kExtraBTCoexCounters + i + 8));
        AddReporterCallbacuint64_t k = (uint64_t (*)(uint64_t, uint64_t, void, const char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(this);
        uint64_t Target = AppleBCMWLANIOReporting::getTarget(this);
        uint64_t v19 = AppleBCMWLANBssManager::getCurrentBSS(this);
        unsigned int v11 = AddReporterCallback(Target, v19, *(void *)(*((void *)this + 7) + 544), "BT Coex", "Extra Counters");
      }
      unsigned int v139 = v11;
      if (v8)
      {
        IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x536274706D702020, v138);
        IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744374732020, v136);
        IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362745774782020, v129);
        IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362745772782020, v130);
        IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744170542020, v131);
        IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362745041472020, v132);
        IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362745041442020, v133);
        IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744132472020, v134);
        IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744132442020, v135);
        IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362745341472020, v137);
      }
      switch(v140)
      {
        case 4:
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x536274706D702020, v108);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744374732020, v102);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362745774782020, v103);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362745772782020, v104);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744170542020, v105);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362745041472020, v106);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362745041442020, v107);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744132472020, v109);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744132442020, v110);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362745341472020, v111);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362745341442020, v112);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x53627444434D2020, v113);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744443432020, v114);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744148572020, v115);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744444432020, v116);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744147432020, v117);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744147482020, v118);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744142312020, v119);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744142322020, v120);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744142332020, v121);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744142342020, v122);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744142352020, v123);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744142362020, v124);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744142372020, v125);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744142382020, v126);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744147312020, v127);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744147332020, v128);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744147362020, v9);
          uint64_t v20 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536);
          unint64_t v21 = (a3 << 56) ^ 0x5362744147472020;
          uint64_t v22 = v10;
          goto LABEL_29;
        case 6:
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x536274706D612020, v101);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x536274706D702020, v95);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744374732020, v91);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362745774782020, v92);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362745772782020, v93);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744170542020, v94);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362745041472020, v96);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362745041442020, v97);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744132472020, v98);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744132442020, v99);
          uint64_t v20 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536);
          unint64_t v21 = (a3 << 56) ^ 0x5362745341472020;
          uint64_t v22 = v100;
          goto LABEL_29;
        case 7:
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x536274706D612020, v90);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x536274706D702020, v84);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744374732020, v80);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362745774782020, v81);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362745772782020, v82);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744170542020, v83);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362745041472020, v85);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362745041442020, v86);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744132472020, v87);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744132442020, v88);
          uint64_t v20 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536);
          unint64_t v21 = (a3 << 56) ^ 0x5362745341472020;
          uint64_t v22 = v89;
          goto LABEL_29;
        case 9:
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x536274706D612020, v79);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x536274706D702020, v73);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744374732020, v69);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362745774782020, v70);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362745772782020, v71);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744170542020, v72);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362745041472020, v74);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362745041442020, v75);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744132472020, v76);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744132442020, v77);
          uint64_t v20 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536);
          unint64_t v21 = (a3 << 56) ^ 0x5362745341472020;
          uint64_t v22 = v78;
          goto LABEL_29;
        case 11:
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x536274706D612020, v68);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x536274706D702020, v62);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744374732020, v58);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362745774782020, v59);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362745772782020, v60);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744170542020, v61);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362745041472020, v63);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362745041442020, v64);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744132472020, v65);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), (a3 << 56) ^ 0x5362744132442020, v66);
          uint64_t v20 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536);
          unint64_t v21 = (a3 << 56) ^ 0x5362745341472020;
          uint64_t v22 = v67;
          goto LABEL_29;
        default:
          char v23 = v7 ^ 1;
          if (a3 != 1) {
            char v23 = 1;
          }
          if (v23) {
            goto LABEL_30;
          }
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), 0x526274706D612020uLL, v57);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), 0x526274706D702020uLL, v51);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), 0x5262744374732020uLL, v47);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), 0x5262745774782020uLL, v48);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), 0x5262745772782020uLL, v49);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), 0x5262744170542020uLL, v50);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), 0x5262745041472020uLL, v52);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), 0x5262745041442020uLL, v53);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), 0x5262744132472020uLL, v54);
          IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536), 0x5262744132442020uLL, v55);
          uint64_t v20 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 536);
          unint64_t v21 = 0x5262745341472020;
          uint64_t v22 = v56;
LABEL_29:
          IOSimpleReporter::incrementValue(v20, v21, v22);
LABEL_30:
          uint64_t v24 = v139;
          break;
      }
    }
    else
    {
      uint64_t v24 = 3758097084;
      if (AppleBCMWLANIOReporting::getLogger(this))
      {
        AppleBCMWLANIOReporting::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          size_t v34 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
          OSData::getLength(a2);
          CCLogStream::logEmergency(v34, "[dk] %s@%d:sizeof(btcoex) %lu payload->getLength() %lu\n");
        }
      }
    }
  }
  return v24;
}

uint64_t AppleBCMWLANIOReportingPerSlice::reportHeCntPerSlice(AppleBCMWLANIOReporting *this, OSData *a2, uint64_t a3)
{
  unsigned int v147 = 0;
  if ((int)a3 >= 2)
  {
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logEmergency(Logger, "[dk] %s@%d:Out of range slice index %d\n");
      }
    }
    return -536870212;
  }
  uint64_t v6 = *((void *)this + 7);
  uint64_t v7 = a3;
  if (!*(unsigned char *)(v6 + a3 + 20))
  {
    if (AppleBCMWLANIOReportingPerSlice::initWlCntReporter((uint64_t *)this, a3))
    {
      if (AppleBCMWLANIOReporting::getLogger(this))
      {
        AppleBCMWLANIOReporting::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          char v141 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
          CCLogStream::logEmergency(v141, "[dk] %s@%d:Failed to init Slice Count reporters\n");
        }
      }
      return -536870212;
    }
    *(unsigned char *)(*((void *)this + 7) + a3 + 20) = 1;
    uint64_t v6 = *((void *)this + 7);
  }
  if (!*(unsigned char *)(v6 + a3 + 37))
  {
    if (AppleBCMWLANIOReportingPerSlice::initWlCntSliceFrameReporter(this, a3))
    {
      if (AppleBCMWLANIOReporting::getLogger(this))
      {
        AppleBCMWLANIOReporting::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          char v142 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
          CCLogStream::logEmergency(v142, "[dk] %s@%d:Failed to initiate Slice Frame reporter\n");
        }
      }
      return -536870212;
    }
    *(unsigned char *)(*((void *)this + 7) + a3 + 37) = 1;
    uint64_t v6 = *((void *)this + 7);
  }
  if (!*(unsigned char *)(v6 + a3 + 1400))
  {
    if (AppleBCMWLANIOReportingPerSlice::initHeWlCntReporter(this, a3))
    {
      if (AppleBCMWLANIOReporting::getLogger(this))
      {
        AppleBCMWLANIOReporting::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          char v143 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
          CCLogStream::logEmergency(v143, "[dk] %s@%d:Failed to initiate Slice He reporter\n");
        }
      }
      return -536870212;
    }
    *(unsigned char *)(*((void *)this + 7) + a3 + 1400) = 1;
  }
  size_t Length = OSData::getLength(a2);
  size_t v9 = OSData::getLength(a2);
  BOOL v10 = OSData::getLength(a2) == 224;
  if (AppleBCMWLANCore::getFirmwareInterfaceVersion(*(AppleBCMWLANCore **)(*((void *)this + 7) + 1504)) == 21) {
    BOOL v10 = OSData::getLength(a2) == 404;
  }
  char v11 = v9 == 220 || v10;
  if (Length != 200 && (v11 & 1) == 0)
  {
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        int v140 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        OSData::getLength(a2);
        CCLogStream::logEmergency(v140, "[dk] %s@%d:invalid payload length %lu expect one of size(%lu,%lu,%lu)\n");
      }
    }
    return -536870212;
  }
  char v144 = v11;
  size_t v146 = v9;
  int v12 = v9 == 220 || v10;
  unint64_t v13 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 312);
  uint64_t v14 = a3 << 56;
  unint64_t v15 = (a3 << 56) ^ 0x536C547846726167;
  char v145 = v12;
  if (Length == 200) {
    int v16 = 1;
  }
  else {
    int v16 = v12;
  }
  if (v16 == 1) {
    unsigned __int16 CounterValueSafe = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, 0x20uLL);
  }
  else {
    unsigned __int16 CounterValueSafe = 0;
  }
  IOSimpleReporter::setValue(v13, v15, (uint64_t)CounterValueSafe);
  uint64_t v18 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 328);
  if (v16) {
    uint64_t v19 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, 0x24uLL);
  }
  else {
    uint64_t v19 = 0;
  }
  IOSimpleReporter::setValue(v18, v14 ^ 0x536C527844467261, (uint64_t)v19);
  uint64_t v20 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 344);
  if (v16) {
    unint64_t v21 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, 0xCuLL);
  }
  else {
    unint64_t v21 = 0;
  }
  IOSimpleReporter::setValue(v20, v14 ^ 0x536C436C724D6973, (uint64_t)v21);
  uint64_t v22 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 360);
  if (v16)
  {
    if (v10) {
      size_t v23 = 156;
    }
    else {
      size_t v23 = 160;
    }
    uint64_t v24 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, v23);
  }
  else
  {
    uint64_t v24 = 0;
  }
  IOSimpleReporter::setValue(v22, v14 ^ 0x536C547267454443, (uint64_t)v24);
  uint64_t v25 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 376);
  if (v16)
  {
    if (v10) {
      size_t v26 = 160;
    }
    else {
      size_t v26 = 164;
    }
    uint64_t v27 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, v26);
  }
  else
  {
    uint64_t v27 = 0;
  }
  IOSimpleReporter::setValue(v25, v14 ^ 0x536C5772674E5353, (uint64_t)v27);
  uint64_t v28 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 376);
  if (v16)
  {
    if (v10) {
      size_t v29 = 164;
    }
    else {
      size_t v29 = 168;
    }
    uint64_t v30 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, v29);
  }
  else
  {
    uint64_t v30 = 0;
  }
  IOSimpleReporter::setValue(v28, v14 ^ 0x536C555354726752, (uint64_t)v30);
  uint64_t v31 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 1368);
  if (v16)
  {
    if (v10) {
      size_t v32 = 104;
    }
    else {
      size_t v32 = 108;
    }
    uint64_t v33 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, v32);
  }
  else
  {
    uint64_t v33 = 0;
  }
  IOSimpleReporter::setValue(v31, v14 ^ 0x536C527852753236, (uint64_t)v33);
  size_t v34 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 1368);
  if (v16)
  {
    if (v10) {
      size_t v35 = 108;
    }
    else {
      size_t v35 = 112;
    }
    uint64_t v36 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, v35);
  }
  else
  {
    uint64_t v36 = 0;
  }
  IOSimpleReporter::setValue(v34, v14 ^ 0x536C527852753532, (uint64_t)v36);
  uint64_t v37 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 1368);
  if (v16)
  {
    if (v10) {
      size_t v38 = 112;
    }
    else {
      size_t v38 = 116;
    }
    unint64_t v39 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, v38);
  }
  else
  {
    unint64_t v39 = 0;
  }
  IOSimpleReporter::setValue(v37, v14 ^ 0x536C527852753036, (uint64_t)v39);
  uint64_t v40 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 1368);
  if (v16)
  {
    if (v10) {
      size_t v41 = 116;
    }
    else {
      size_t v41 = 120;
    }
    size_t v42 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, v41);
  }
  else
  {
    size_t v42 = 0;
  }
  IOSimpleReporter::setValue(v40, v14 ^ 0x536C527852753432, (uint64_t)v42);
  size_t v43 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 1368);
  if (v16)
  {
    if (v10) {
      size_t v44 = 120;
    }
    else {
      size_t v44 = 124;
    }
    size_t v45 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, v44);
  }
  else
  {
    size_t v45 = 0;
  }
  IOSimpleReporter::setValue(v43, v14 ^ 0x536C527852753834, (uint64_t)v45);
  size_t v46 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 1368);
  if (v10)
  {
    uint64_t v47 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, 0x7CuLL);
    IOSimpleReporter::setValue(v46, v14 ^ 0x536C527852753936, (uint64_t)v47);
    uint64_t v48 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 1368);
    uint64_t v49 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, 0xC4uLL);
    IOSimpleReporter::setValue(v48, v14 ^ 0x536C527852756136, (uint64_t)v49);
    uint64_t v50 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 1352);
    size_t v51 = 128;
LABEL_94:
    uint64_t v55 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, v51);
    goto LABEL_96;
  }
  BOOL v52 = v9 == 220 || Length == 200;
  int v53 = v52;
  if (v52) {
    uint64_t v54 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, 0x80uLL);
  }
  else {
    uint64_t v54 = 0;
  }
  IOSimpleReporter::setValue(v46, v14 ^ 0x536C527852753936, (uint64_t)v54);
  uint64_t v50 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 1352);
  if (v53)
  {
    size_t v51 = 132;
    goto LABEL_94;
  }
  uint64_t v55 = 0;
LABEL_96:
  IOSimpleReporter::setValue(v50, v14 ^ 0x536C547852753236, (uint64_t)v55);
  uint64_t v56 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 1352);
  if (v16)
  {
    if (v10) {
      size_t v57 = 132;
    }
    else {
      size_t v57 = 136;
    }
    uint64_t v58 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, v57);
  }
  else
  {
    uint64_t v58 = 0;
  }
  IOSimpleReporter::setValue(v56, v14 ^ 0x536C547852753532, (uint64_t)v58);
  uint64_t v59 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 1352);
  if (v16)
  {
    if (v10) {
      size_t v60 = 136;
    }
    else {
      size_t v60 = 140;
    }
    uint64_t v61 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, v60);
  }
  else
  {
    uint64_t v61 = 0;
  }
  IOSimpleReporter::setValue(v59, v14 ^ 0x536C547852753036, (uint64_t)v61);
  uint64_t v62 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 1352);
  if (v16)
  {
    if (v10) {
      size_t v63 = 140;
    }
    else {
      size_t v63 = 144;
    }
    uint64_t v64 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, v63);
  }
  else
  {
    uint64_t v64 = 0;
  }
  IOSimpleReporter::setValue(v62, v14 ^ 0x536C547852753432, (uint64_t)v64);
  uint64_t v65 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 1352);
  if (v10)
  {
    uint64_t v66 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, 0x90uLL);
    IOSimpleReporter::setValue(v65, v14 ^ 0x536C547852753834, (uint64_t)v66);
    uint64_t v67 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 1352);
    uint64_t v68 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, 0xDCuLL);
    IOSimpleReporter::setValue(v67, v14 ^ 0x536C547852756136, (uint64_t)v68);
    uint64_t v69 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 472);
LABEL_126:
    uint64_t v73 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, 0x28uLL);
    goto LABEL_128;
  }
  BOOL v70 = v146 == 220 || Length == 200;
  int v71 = v70;
  if (v70) {
    uint64_t v72 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, 0x94uLL);
  }
  else {
    uint64_t v72 = 0;
  }
  IOSimpleReporter::setValue(v65, v14 ^ 0x536C547852753834, (uint64_t)v72);
  uint64_t v69 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 472);
  if (v71) {
    goto LABEL_126;
  }
  uint64_t v73 = 0;
LABEL_128:
  IOSimpleReporter::setValue(v69, v14 ^ 0x536C547854726967, (uint64_t)v73);
  uint64_t v74 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 472);
  if (v16) {
    uint64_t v75 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, 0x14uLL);
  }
  else {
    uint64_t v75 = 0;
  }
  IOSimpleReporter::setValue(v74, v14 ^ 0x536C54784D42616BLL, (uint64_t)v75);
  uint64_t v76 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 488);
  if (v16) {
    uint64_t v77 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, 0x18uLL);
  }
  else {
    uint64_t v77 = 0;
  }
  IOSimpleReporter::setValue(v76, v14 ^ 0x536C52784D42616BLL, (uint64_t)v77);
  uint64_t v78 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 488);
  if (v16) {
    uint64_t v79 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, 0x1CuLL);
  }
  else {
    uint64_t v79 = 0;
  }
  IOSimpleReporter::setValue(v78, v14 ^ 0x536C52784D53426BLL, (uint64_t)v79);
  uint64_t v80 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 488);
  if (v16) {
    uint64_t v81 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, 4uLL);
  }
  else {
    uint64_t v81 = 0;
  }
  IOSimpleReporter::setValue(v80, v14 ^ 0x536C52784D416964, (uint64_t)v81);
  uint64_t v82 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 488);
  if (v16) {
    uint64_t v83 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, 8uLL);
  }
  else {
    uint64_t v83 = 0;
  }
  IOSimpleReporter::setValue(v82, v14 ^ 0x536C527852616E64, (uint64_t)v83);
  uint64_t v84 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 488);
  if (v16) {
    uint64_t v85 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, 0x2CuLL);
  }
  else {
    uint64_t v85 = 0;
  }
  IOSimpleReporter::setValue(v84, v14 ^ 0x536C527842547267, (uint64_t)v85);
  uint64_t v86 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 488);
  if (v16) {
    uint64_t v87 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, 0x30uLL);
  }
  else {
    uint64_t v87 = 0;
  }
  IOSimpleReporter::setValue(v86, v14 ^ 0x536C52785472674DLL, (uint64_t)v87);
  uint64_t v88 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 488);
  if (v16) {
    uint64_t v89 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, 0x34uLL);
  }
  else {
    uint64_t v89 = 0;
  }
  IOSimpleReporter::setValue(v88, v14 ^ 0x536C527854726742, (uint64_t)v89);
  uint64_t v90 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 488);
  if (v16)
  {
    if (v10) {
      size_t v91 = 168;
    }
    else {
      size_t v91 = 172;
    }
    uint64_t v92 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, v91);
  }
  else
  {
    uint64_t v92 = 0;
  }
  IOSimpleReporter::setValue(v90, v14 ^ 0x536C5472674E4652, (uint64_t)v92);
  uint64_t v93 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 488);
  if (v16)
  {
    if (v10) {
      size_t v94 = 172;
    }
    else {
      size_t v94 = 176;
    }
    uint64_t v95 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, v94);
  }
  else
  {
    uint64_t v95 = 0;
  }
  IOSimpleReporter::setValue(v93, v14 ^ 0x536C547267424752, (uint64_t)v95);
  uint64_t v96 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 488);
  if (v16)
  {
    if (v10) {
      size_t v97 = 100;
    }
    else {
      size_t v97 = 104;
    }
    uint64_t v98 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, v97);
  }
  else
  {
    uint64_t v98 = 0;
  }
  IOSimpleReporter::setValue(v96, v14 ^ 0x536C5478544D7542, (uint64_t)v98);
  uint64_t v99 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 488);
  if (v16)
  {
    if (v10) {
      size_t v100 = 176;
    }
    else {
      size_t v100 = 180;
    }
    uint64_t v101 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, v100);
  }
  else
  {
    uint64_t v101 = 0;
  }
  IOSimpleReporter::setValue(v99, v14 ^ 0x536C547267474352, (uint64_t)v101);
  uint64_t v102 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 488);
  if (v16)
  {
    if (v10) {
      size_t v103 = 96;
    }
    else {
      size_t v103 = 100;
    }
    uint64_t v104 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, v103);
  }
  else
  {
    uint64_t v104 = 0;
  }
  IOSimpleReporter::setValue(v102, v14 ^ 0x536C527842464D43, (uint64_t)v104);
  uint64_t v105 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 504);
  if (v16) {
    uint64_t v106 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, 0x44uLL);
  }
  else {
    uint64_t v106 = 0;
  }
  IOSimpleReporter::setValue(v105, v14 ^ 0x536C547850504455, (uint64_t)v106);
  uint64_t v107 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 504);
  if (v16) {
    uint64_t v108 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, 0x48uLL);
  }
  else {
    uint64_t v108 = 0;
  }
  IOSimpleReporter::setValue(v107, v14 ^ 0x536C54784E504455, (uint64_t)v108);
  uint64_t v109 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 504);
  if (v16)
  {
    if (v10) {
      size_t v110 = 152;
    }
    else {
      size_t v110 = 156;
    }
    uint64_t v111 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, v110);
  }
  else
  {
    uint64_t v111 = 0;
  }
  IOSimpleReporter::setValue(v109, v14 ^ 0x536C4D676D745050, (uint64_t)v111);
  uint64_t v112 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 504);
  if (v16) {
    uint64_t v113 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, 0x10uLL);
  }
  else {
    uint64_t v113 = 0;
  }
  IOSimpleReporter::setValue(v112, v14 ^ 0x536C54784D614D50, (uint64_t)v113);
  uint64_t v114 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 504);
  if (v16) {
    uint64_t v115 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, 0x54uLL);
  }
  else {
    uint64_t v115 = 0;
  }
  IOSimpleReporter::setValue(v114, v14 ^ 0x536C54784E414D50, (uint64_t)v115);
  uint64_t v116 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 504);
  if (v16) {
    uint64_t v117 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, 0x58uLL);
  }
  else {
    uint64_t v117 = 0;
  }
  IOSimpleReporter::setValue(v116, v14 ^ 0x536C54784E425352, (uint64_t)v117);
  uint64_t v118 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 504);
  if (v145)
  {
    uint64_t v119 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, 0x5CuLL);
    IOSimpleReporter::setValue(v118, v14 ^ 0x536C54784E6E6F46, (uint64_t)v119);
    if ((v144 & 1) == 0)
    {
      if (Length != 200) {
        goto LABEL_217;
      }
      goto LABEL_212;
    }
    uint64_t v120 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 504);
    if (v10) {
      size_t v121 = 184;
    }
    else {
      size_t v121 = 192;
    }
    uint64_t v122 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, v121);
    unint64_t v123 = v14 ^ 0x536C54726753754ELL;
    uint64_t v124 = v120;
  }
  else
  {
    if (Length != 200)
    {
      uint64_t v136 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 504);
      unint64_t v137 = v14 ^ 0x536C54784E6E6F46;
      uint64_t v135 = 0;
      goto LABEL_221;
    }
    uint64_t v122 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, 0x5CuLL);
    uint64_t v124 = v118;
    unint64_t v123 = v14 ^ 0x536C54784E6E6F46;
  }
  IOSimpleReporter::setValue(v124, v123, (uint64_t)v122);
LABEL_212:
  uint64_t v125 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 520);
  uint64_t v126 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, 0x4CuLL);
  IOSimpleReporter::setValue(v125, v14 ^ 0x536C527853504455, (uint64_t)v126);
  uint64_t v127 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 520);
  uint64_t v128 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, 0x50uLL);
  IOSimpleReporter::setValue(v127, v14 ^ 0x536C527852457874, (uint64_t)v128);
  uint64_t v129 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 520);
  uint64_t v130 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, 0x38uLL);
  IOSimpleReporter::setValue(v129, v14 ^ 0x536C52784D505044, (uint64_t)v130);
  if (v146 == 220)
  {
    uint64_t v131 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 488);
    uint64_t v132 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, 0xBCuLL);
    IOSimpleReporter::setValue(v131, v14 ^ 0x536C527842464D44, (uint64_t)v132);
    if (v10) {
      size_t v133 = 180;
    }
    else {
      size_t v133 = 184;
    }
    goto LABEL_219;
  }
LABEL_217:
  if (v10)
  {
    size_t v133 = 180;
LABEL_219:
    uint64_t v134 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * v7 + 488);
    uint64_t v135 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v147, (int *)4, a2, v133);
    uint64_t v136 = v134;
    unint64_t v137 = v14 ^ 0x536C547267424854;
LABEL_221:
    IOSimpleReporter::setValue(v136, v137, (uint64_t)v135);
  }
  return v147;
}

uint64_t AppleBCMWLANIOReportingPerSlice::initOmiReporter(AppleBCMWLANBssManager *a1, uint64_t a2)
{
  uint64_t v4 = (char *)IOMallocZeroData();
  size_t v5 = v4;
  if (v4)
  {
    if ((int)a2 < 2)
    {
      uint64_t v6 = 3758097084;
      snprintf(v4, 0x32uLL, "%s %d", "Slice", a2);
      if (*(void *)(*((void *)a1 + 7) + 8 * a2 + 1384))
      {
LABEL_9:
        IOFreeData();
        return v6;
      }
      uint64_t v7 = a2;
      uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
      ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
      *(void *)(*((void *)a1 + 7) + 8 * a2 + 1384) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v10);
      if (!*(void *)(*((void *)a1 + 7) + 8 * a2 + 1384))
      {
        uint64_t v6 = 3758097085;
        goto LABEL_9;
      }
      Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
      OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 1384));
      uint64_t v12 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 1384);
      (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
      uint64_t v13 = 0;
      uint64_t v14 = a2 << 56;
      do
      {
        IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * v7 + 1384), *(void *)((char *)&kSliceCountersOmiReport + v13) ^ v14, *(const char **)((char *)&kSliceCountersOmiReport + v13 + 8));
        v13 += 16;
      }
      while (v13 != 256);
      AddReporterCallbacuint64_t k = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
      uint64_t Target = AppleBCMWLANIOReporting::getTarget(a1);
      uint64_t v17 = AppleBCMWLANBssManager::getCurrentBSS(a1);
      uint64_t v6 = AddReporterCallback(Target, v17, *(void *)(*((void *)a1 + 7) + 8 * v7 + 1384), v5, "OMI Counters");
      goto LABEL_8;
    }
  }
  else if ((int)a2 <= 1)
  {
    uint64_t v6 = 3758097084;
    if (AppleBCMWLANIOReporting::getLogger(a1))
    {
      AppleBCMWLANIOReporting::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
        CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to alloc AutoreleasedBuffer\n", "initOmiReporter", 3329);
      }
    }
    return v6;
  }
  uint64_t v6 = 3758097084;
  if (AppleBCMWLANIOReporting::getLogger(a1))
  {
    AppleBCMWLANIOReporting::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v19 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
      CCLogStream::logEmergency(v19, "[dk] %s@%d:Out of range slice index %d\n", "initOmiReporter", 3328, a2);
    }
  }
LABEL_8:
  if (v5) {
    goto LABEL_9;
  }
  return v6;
}

uint64_t AppleBCMWLANIOReportingPerSlice::reportOmiCntPerSlice(AppleBCMWLANIOReporting *this, OSData *a2, uint64_t a3)
{
  unsigned int v44 = 0;
  if ((int)a3 >= 2)
  {
    uint64_t v39 = 3758097084;
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logEmergency(Logger, "[dk] %s@%d:Out of range slice index %d\n");
      }
    }
  }
  else
  {
    if (*(unsigned char *)(*((void *)this + 7) + a3 + 1402)) {
      goto LABEL_5;
    }
    uint64_t inited = AppleBCMWLANIOReportingPerSlice::initOmiReporter(this, a3);
    unsigned int v44 = inited;
    if (!inited)
    {
      *(unsigned char *)(*((void *)this + 7) + a3 + 1402) = 1;
LABEL_5:
      if (OSData::getLength(a2) == 68)
      {
        uint64_t v7 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 1384);
        unsigned __int16 CounterValueSafe = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v44, (int *)4, a2, 4uLL);
        IOSimpleReporter::setValue(v7, (a3 << 56) ^ 0x53546E4F4D495363, (uint64_t)CounterValueSafe);
        size_t v9 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 1384);
        unint64_t v10 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v44, (int *)4, a2, 8uLL);
        IOSimpleReporter::setValue(v9, (a3 << 56) ^ 0x5354785375636373, (uint64_t)v10);
        char v11 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 1384);
        uint64_t v12 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v44, (int *)4, a2, 0xCuLL);
        IOSimpleReporter::setValue(v11, (a3 << 56) ^ 0x5354785265747279, (uint64_t)v12);
        uint64_t v13 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 1384);
        uint64_t v14 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v44, (int *)4, a2, 0x10uLL);
        IOSimpleReporter::setValue(v13, (a3 << 56) ^ 0x5354784475726174, (uint64_t)v14);
        unint64_t v15 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 1384);
        int v16 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v44, (int *)4, a2, 0x14uLL);
        IOSimpleReporter::setValue(v15, (a3 << 56) ^ 0x53554C4D75436667, (uint64_t)v16);
        uint64_t v17 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 1384);
        uint64_t v18 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v44, (int *)4, a2, 0x18uLL);
        IOSimpleReporter::setValue(v17, (a3 << 56) ^ 0x53554C4D75436641, (uint64_t)v18);
        uint64_t v19 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 1384);
        uint64_t v20 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v44, (int *)4, a2, 0x1CuLL);
        IOSimpleReporter::setValue(v19, (a3 << 56) ^ 0x5354784E53535320, (uint64_t)v20);
        unint64_t v21 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 1384);
        uint64_t v22 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v44, (int *)4, a2, 0x20uLL);
        IOSimpleReporter::setValue(v21, (a3 << 56) ^ 0x5354784E53535341, (uint64_t)v22);
        size_t v23 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 1384);
        uint64_t v24 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v44, (int *)4, a2, 0x24uLL);
        IOSimpleReporter::setValue(v23, (a3 << 56) ^ 0x5352784E53535320, (uint64_t)v24);
        uint64_t v25 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 1384);
        size_t v26 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v44, (int *)4, a2, 0x28uLL);
        IOSimpleReporter::setValue(v25, (a3 << 56) ^ 0x5352784E53535341, (uint64_t)v26);
        uint64_t v27 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 1384);
        uint64_t v28 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v44, (int *)4, a2, 0x2CuLL);
        IOSimpleReporter::setValue(v27, (a3 << 56) ^ 0x5354784257202020, (uint64_t)v28);
        size_t v29 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 1384);
        uint64_t v30 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v44, (int *)4, a2, 0x30uLL);
        IOSimpleReporter::setValue(v29, (a3 << 56) ^ 0x535478425741636BLL, (uint64_t)v30);
        uint64_t v31 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 1384);
        size_t v32 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v44, (int *)4, a2, 0x34uLL);
        IOSimpleReporter::setValue(v31, (a3 << 56) ^ 0x5354784572537520, (uint64_t)v32);
        uint64_t v33 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 1384);
        size_t v34 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v44, (int *)4, a2, 0x38uLL);
        IOSimpleReporter::setValue(v33, (a3 << 56) ^ 0x5354784572537541, (uint64_t)v34);
        size_t v35 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 1384);
        uint64_t v36 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v44, (int *)4, a2, 0x3CuLL);
        IOSimpleReporter::setValue(v35, (a3 << 56) ^ 0x53446C4D75525220, (uint64_t)v36);
        uint64_t v37 = *(IOSimpleReporter **)(*((void *)this + 7) + 8 * a3 + 1384);
        size_t v38 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v44, (int *)4, a2, 0x40uLL);
        IOSimpleReporter::setValue(v37, (a3 << 56) ^ 0x53446C4D75525241, (uint64_t)v38);
        return v44;
      }
      else
      {
        uint64_t v39 = 3758097084;
        if (AppleBCMWLANIOReporting::getLogger(this))
        {
          AppleBCMWLANIOReporting::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            size_t v42 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
            OSData::getLength(a2);
            CCLogStream::logEmergency(v42, "[dk] %s@%d:sizeof(wl_he_omi_cnt_wlc_v1) %lu payload->getLength() %lu\n");
          }
        }
      }
      return v39;
    }
    uint64_t v39 = inited;
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        size_t v43 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logEmergency(v43, "[dk] %s@%d:Failed to initiate OMI reporter\n");
      }
    }
  }
  return v39;
}

uint64_t AppleBCMWLANIOReportingPerSlice::addDictionaryChanspec(AppleBCMWLANIOReporting *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = IOMallocZeroData();
  if (v6)
  {
    uint64_t v7 = (char *)v6;
    uint64_t v8 = a3;
    if (!*(void *)(*((void *)a1 + 7) + 8 * a3 + 968))
    {
      *(void *)(*((void *)a1 + 7) + 8 * a3 + 968) = OSDictionary::withCapacity(0xCu);
      *(unsigned char *)(*((void *)a1 + 7) + 50) = 1;
      if (!*(void *)(*((void *)a1 + 7) + 8 * a3 + 968))
      {
        uint64_t v17 = 3758097084;
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to create ivars->fChannelSwitchDictionary[%d]\n");
          }
        }
        goto LABEL_85;
      }
    }
    AppleBCMWLANChanSpecHandle = (int **)AppleBCMWLANIOReporting::getAppleBCMWLANChanSpecHandle(a1);
    unsigned __int16 AppleChannelSpec = AppleBCMWLANChanSpec::getAppleChannelSpec(AppleBCMWLANChanSpecHandle, a2);
    AppleBCMWLANIOReporting::getAppleBCMWLANChanSpecHandle(a1);
    AppleBCMWLANChanSpec::convToAscii(AppleChannelSpec, v7, 0x32u);
    OSStringPtr v11 = OSString::withCString(v7);
    if (!v11)
    {
      uint64_t v17 = 3758097084;
      if (AppleBCMWLANIOReporting::getLogger(a1))
      {
        AppleBCMWLANIOReporting::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          int v53 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
          CCLogStream::logEmergency(v53, "[dk] %s@%d:Failed to alloc channelKey\n");
        }
      }
      goto LABEL_85;
    }
    uint64_t v12 = v11;
    Object = OSDictionary::getObject(*(const OSDictionary **)(*((void *)a1 + 7) + 8 * v8 + 968), v11);
    if (Object)
    {
      uint64_t v14 = OSDictionary::getObject(*(const OSDictionary **)(*((void *)a1 + 7) + 8 * v8 + 968), v12);
      unint64_t v15 = (OSDictionary *)OSMetaClassBase::safeMetaCast(v14, gOSDictionaryMetaClass);
      if (!v15)
      {
        uint64_t v85 = v12;
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            int v16 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(v16, "[dk] %s@%d:Failed to find channelDictionary\n");
          }
        }
LABEL_118:
        OSNumberPtr v84 = 0;
        char v61 = 0;
        unint64_t v15 = 0;
        BOOL v62 = 0;
        uint64_t v25 = 0;
        uint64_t v89 = 0;
        uint64_t v90 = 0;
        OSNumberPtr v33 = 0;
        int v63 = 0;
        OSNumberPtr v38 = 0;
        char v64 = 0;
        OSDictionaryPtr anObject = 0;
        unsigned int v44 = 0;
        uint64_t v50 = 0;
        goto LABEL_166;
      }
    }
    else
    {
      OSDictionaryPtr v19 = OSDictionary::withCapacity(1u);
      if (!v19)
      {
        uint64_t v85 = v12;
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v73 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(v73, "[dk] %s@%d:Failed to alloc channelDictionary\n");
          }
        }
        goto LABEL_118;
      }
      unint64_t v15 = v19;
      *(unsigned char *)(*((void *)a1 + 7) + 50) = 1;
    }
    uint64_t v20 = OSDictionary::getObject(v15, *(const OSObject **)(*((void *)a1 + 7) + 1464));
    BOOL v88 = v20 == 0;
    if (!v20)
    {
      OSNumberPtr v21 = OSNumber::withNumber(a2, 0x10uLL);
      if (v21)
      {
        OSNumberPtr v22 = v21;
        if (OSDictionary::setObject(v15, *(const OSObject **)(*((void *)a1 + 7) + 1464), v21))
        {
          ((void (*)(OSNumberPtr))v22->release)(v22);
          *(unsigned char *)(*((void *)a1 + 7) + 50) = 1;
          goto LABEL_19;
        }
        OSNumberPtr v84 = v22;
        uint64_t v85 = v12;
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v76 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(v76, "[dk] %s@%d:Failed to set transitions\n", "addDictionaryChanspec", 3456);
          }
        }
        uint64_t v25 = 0;
        uint64_t v89 = 0;
        uint64_t v90 = 0;
        OSNumberPtr v33 = 0;
        int v63 = 0;
        OSNumberPtr v38 = 0;
        char v64 = 0;
        OSDictionaryPtr anObject = 0;
        unsigned int v44 = 0;
        uint64_t v50 = 0;
        char v61 = 1;
      }
      else
      {
        uint64_t v85 = v12;
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v74 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(v74, "[dk] %s@%d:Failed to alloc chanspecNum\n", "addDictionaryChanspec", 3454);
          }
        }
        OSNumberPtr v84 = 0;
        char v61 = 0;
        uint64_t v25 = 0;
        uint64_t v89 = 0;
        uint64_t v90 = 0;
        OSNumberPtr v33 = 0;
        int v63 = 0;
        OSNumberPtr v38 = 0;
        char v64 = 0;
        OSDictionaryPtr anObject = 0;
        unsigned int v44 = 0;
        uint64_t v50 = 0;
      }
      BOOL v62 = Object == 0;
      goto LABEL_166;
    }
LABEL_19:
    size_t v23 = OSDictionary::getObject(v15, *(const OSObject **)(*((void *)a1 + 7) + 1408));
    BYTE4(v90) = v23 == 0;
    if (v23)
    {
      uint64_t v24 = OSDictionary::getObject(v15, *(const OSObject **)(*((void *)a1 + 7) + 1408));
      uint64_t v25 = (OSDictionary *)OSMetaClassBase::safeMetaCast(v24, gOSDictionaryMetaClass);
      if (!v25)
      {
        uint64_t v85 = v12;
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            size_t v26 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(v26, "[dk] %s@%d:Failed to get joinedAggStatsDictionary\n");
          }
        }
LABEL_126:
        OSNumberPtr v84 = 0;
        uint64_t v25 = 0;
        BYTE4(v90) = 0;
LABEL_136:
        OSNumberPtr v33 = 0;
        int v63 = 0;
        OSNumberPtr v38 = 0;
        char v64 = 0;
        OSDictionaryPtr anObject = 0;
        LOBYTE(v90) = 0;
        unsigned int v44 = 0;
        uint64_t v89 = 0;
        uint64_t v50 = 0;
LABEL_137:
        char v61 = v88;
        BOOL v62 = Object == 0;
        goto LABEL_166;
      }
    }
    else
    {
      OSDictionaryPtr v27 = OSDictionary::withCapacity(3u);
      if (!v27)
      {
        uint64_t v85 = v12;
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v75 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(v75, "[dk] %s@%d:Failed to alloc joinedAggStatsDictionary\n");
          }
        }
        goto LABEL_126;
      }
      uint64_t v25 = v27;
      *(unsigned char *)(*((void *)a1 + 7) + 50) = 1;
    }
    uint64_t v28 = OSDictionary::getObject(v25, *(const OSObject **)(*((void *)a1 + 7) + 1416));
    BOOL v29 = v28 == 0;
    if (v28)
    {
      uint64_t v30 = OSDictionary::getObject(v25, *(const OSObject **)(*((void *)a1 + 7) + 1416));
      if (!OSMetaClassBase::safeMetaCast(v30, gOSNumberMetaClass))
      {
        uint64_t v85 = v12;
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v31 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(v31, "[dk] %s@%d:Failed to get totalDur\n");
          }
        }
LABEL_135:
        OSNumberPtr v84 = 0;
        goto LABEL_136;
      }
    }
    else
    {
      uint64_t v85 = v12;
      OSNumberPtr v32 = OSNumber::withNumber(0, 0x40uLL);
      if (!v32)
      {
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v77 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(v77, "[dk] %s@%d:Failed to alloc totalDur\n");
          }
        }
        goto LABEL_135;
      }
      OSNumberPtr v33 = v32;
      *(unsigned char *)(*((void *)a1 + 7) + 50) = 1;
      if (!OSDictionary::setObject(v25, *(const OSObject **)(*((void *)a1 + 7) + 1416), v32))
      {
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v78 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(v78, "[dk] %s@%d:Failed to set totalDur\n", "addDictionaryChanspec", 3481);
          }
        }
        OSNumberPtr v84 = 0;
        OSNumberPtr v38 = 0;
        char v64 = 0;
        OSDictionaryPtr anObject = 0;
        LOBYTE(v90) = 0;
        unsigned int v44 = 0;
        uint64_t v89 = 0;
        uint64_t v50 = 0;
        int v63 = 1;
        goto LABEL_137;
      }
      ((void (*)(OSNumberPtr))v33->release)(v33);
      uint64_t v12 = v85;
    }
    size_t v34 = OSDictionary::getObject(v25, *(const OSObject **)(*((void *)a1 + 7) + 1424));
    BOOL v86 = v34 == 0;
    BOOL v87 = v29;
    if (v34)
    {
      size_t v35 = OSDictionary::getObject(v25, *(const OSObject **)(*((void *)a1 + 7) + 1424));
      if (!OSMetaClassBase::safeMetaCast(v35, gOSNumberMetaClass))
      {
        uint64_t v85 = v12;
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v36 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(v36, "[dk] %s@%d:Failed to get transitions\n");
          }
        }
LABEL_145:
        OSNumberPtr v84 = 0;
        OSNumberPtr v33 = 0;
        OSNumberPtr v38 = 0;
        char v64 = 0;
        OSDictionaryPtr anObject = 0;
        LOBYTE(v90) = 0;
        unsigned int v44 = 0;
        uint64_t v89 = 0;
        uint64_t v50 = 0;
LABEL_150:
        char v61 = v88;
        BOOL v62 = Object == 0;
        int v63 = v87;
        goto LABEL_166;
      }
    }
    else
    {
      OSNumberPtr v37 = OSNumber::withNumber(0, 0x40uLL);
      if (!v37)
      {
        uint64_t v85 = v12;
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v79 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(v79, "[dk] %s@%d:Failed to alloc transitions\n");
          }
        }
        goto LABEL_145;
      }
      OSNumberPtr v38 = v37;
      *(unsigned char *)(*((void *)a1 + 7) + 50) = 1;
      if (!OSDictionary::setObject(v25, *(const OSObject **)(*((void *)a1 + 7) + 1424), v37))
      {
        uint64_t v85 = v12;
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v80 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(v80, "[dk] %s@%d:Failed to set transitions\n", "addDictionaryChanspec", 3497);
          }
        }
        OSNumberPtr v84 = 0;
        OSNumberPtr v33 = 0;
        OSDictionaryPtr anObject = 0;
        LOBYTE(v90) = 0;
        unsigned int v44 = 0;
        uint64_t v89 = 0;
        uint64_t v50 = 0;
        char v64 = 1;
        goto LABEL_150;
      }
      ((void (*)(OSNumberPtr))v38->release)(v38);
    }
    uint64_t v39 = OSDictionary::getObject(v25, *(const OSObject **)(*((void *)a1 + 7) + 1432));
    LOBYTE(v90) = v39 == 0;
    if (v39)
    {
      uint64_t v40 = OSDictionary::getObject(v25, *(const OSObject **)(*((void *)a1 + 7) + 1432));
      size_t v41 = OSMetaClassBase::safeMetaCast(v40, gOSDictionaryMetaClass);
      if (v41)
      {
        OSDictionaryPtr anObject = (OSDictionaryPtr)v41;
        if (OSDictionary::getObject(v25, *(const OSObject **)(*((void *)a1 + 7) + 1432))) {
          goto LABEL_49;
        }
        goto LABEL_47;
      }
      uint64_t v85 = v12;
      if (AppleBCMWLANIOReporting::getLogger(a1))
      {
        AppleBCMWLANIOReporting::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v54 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
          CCLogStream::logEmergency(v54, "[dk] %s@%d:Failed to get reasonsForJoiningDictionary\n");
        }
      }
    }
    else
    {
      OSDictionaryPtr anObject = OSDictionary::withCapacity(0x10u);
      if (anObject)
      {
LABEL_47:
        *(unsigned char *)(*((void *)a1 + 7) + 50) = 1;
        if (!OSDictionary::setObject(v25, *(const OSObject **)(*((void *)a1 + 7) + 1432), anObject))
        {
          uint64_t v85 = v12;
          if (AppleBCMWLANIOReporting::getLogger(a1))
          {
            AppleBCMWLANIOReporting::getLogger(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v56 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
              CCLogStream::logEmergency(v56, "[dk] %s@%d:Failed to set reasonsForJoiningDictionary\n");
            }
          }
          goto LABEL_158;
        }
        if (!v39)
        {
          ((void (*)(OSDictionaryPtr))anObject->release)(anObject);
          OSDictionaryPtr anObject = 0;
          if (v23)
          {
LABEL_50:
            if (OSDictionary::getObject(v15, *(const OSObject **)(*((void *)a1 + 7) + 1408))) {
              goto LABEL_56;
            }
          }
LABEL_53:
          *(unsigned char *)(*((void *)a1 + 7) + 50) = 1;
          if (!OSDictionary::setObject(v15, *(const OSObject **)(*((void *)a1 + 7) + 1408), v25))
          {
            uint64_t v85 = v12;
            if (AppleBCMWLANIOReporting::getLogger(a1))
            {
              AppleBCMWLANIOReporting::getLogger(a1);
              if (CCLogStream::shouldLog())
              {
                size_t v57 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                CCLogStream::logEmergency(v57, "[dk] %s@%d:Failed to set joinedAggStatsDictionary\n");
              }
            }
            goto LABEL_158;
          }
          if (!v23)
          {
            ((void (*)(OSDictionary *))v25->release)(v25);
            uint64_t v25 = 0;
          }
LABEL_56:
          size_t v42 = OSDictionary::getObject(v15, *(const OSObject **)(*((void *)a1 + 7) + 1448));
          BYTE4(v89) = v42 == 0;
          if (v42)
          {
            size_t v43 = OSDictionary::getObject(v15, *(const OSObject **)(*((void *)a1 + 7) + 1448));
            unsigned int v44 = (OSDictionary *)OSMetaClassBase::safeMetaCast(v43, gOSDictionaryMetaClass);
            if (!v44)
            {
              uint64_t v85 = v12;
              if (AppleBCMWLANIOReporting::getLogger(a1))
              {
                AppleBCMWLANIOReporting::getLogger(a1);
                if (CCLogStream::shouldLog())
                {
                  size_t v45 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                  CCLogStream::logEmergency(v45, "[dk] %s@%d:Failed to get leftAggStatsDictionary\n");
                }
              }
LABEL_158:
              OSNumberPtr v84 = 0;
              OSNumberPtr v33 = 0;
              OSNumberPtr v38 = 0;
              goto LABEL_159;
            }
          }
          else
          {
            OSDictionaryPtr v46 = OSDictionary::withCapacity(3u);
            if (!v46)
            {
              uint64_t v85 = v12;
              if (AppleBCMWLANIOReporting::getLogger(a1))
              {
                AppleBCMWLANIOReporting::getLogger(a1);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v82 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                  CCLogStream::logEmergency(v82, "[dk] %s@%d:Failed to alloc leftAggStatsDictionary\n");
                }
              }
              goto LABEL_158;
            }
            unsigned int v44 = v46;
            *(unsigned char *)(*((void *)a1 + 7) + 50) = 1;
          }
          uint64_t v47 = OSDictionary::getObject(v44, *(const OSObject **)(*((void *)a1 + 7) + 1456));
          LOBYTE(v89) = v47 == 0;
          if (v47)
          {
            uint64_t v48 = OSDictionary::getObject(v44, *(const OSObject **)(*((void *)a1 + 7) + 1456));
            uint64_t v49 = OSMetaClassBase::safeMetaCast(v48, gOSDictionaryMetaClass);
            if (v49)
            {
              uint64_t v50 = v49;
              if (OSDictionary::getObject(v44, *(const OSObject **)(*((void *)a1 + 7) + 1456))) {
                goto LABEL_71;
              }
              goto LABEL_69;
            }
            uint64_t v85 = v12;
            if (AppleBCMWLANIOReporting::getLogger(a1))
            {
              AppleBCMWLANIOReporting::getLogger(a1);
              if (CCLogStream::shouldLog())
              {
                uint64_t v55 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                CCLogStream::logEmergency(v55, "[dk] %s@%d:Failed to get reasonsForLeavingDictionary\n");
              }
            }
          }
          else
          {
            OSDictionaryPtr v51 = OSDictionary::withCapacity(0x10u);
            if (v51)
            {
              uint64_t v50 = v51;
              *(unsigned char *)(*((void *)a1 + 7) + 50) = 1;
LABEL_69:
              *(unsigned char *)(*((void *)a1 + 7) + 50) = 1;
              if (!OSDictionary::setObject(v44, *(const OSObject **)(*((void *)a1 + 7) + 1456), v50))
              {
                uint64_t v85 = v12;
                if (AppleBCMWLANIOReporting::getLogger(a1))
                {
                  AppleBCMWLANIOReporting::getLogger(a1);
                  if (CCLogStream::shouldLog())
                  {
                    uint64_t v58 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                    CCLogStream::logEmergency(v58, "[dk] %s@%d:Failed to set reasonsForLeavingDictionary\n");
                  }
                }
                goto LABEL_111;
              }
              if (!v47)
              {
                ((void (*)(const OSMetaClassBase *))v50->release)(v50);
                uint64_t v50 = 0;
                if (v42)
                {
LABEL_72:
                  if (OSDictionary::getObject(v15, *(const OSObject **)(*((void *)a1 + 7) + 1448))) {
                    goto LABEL_77;
                  }
                }
LABEL_75:
                *(unsigned char *)(*((void *)a1 + 7) + 50) = 1;
                if (!OSDictionary::setObject(v15, *(const OSObject **)(*((void *)a1 + 7) + 1448), v44))
                {
                  uint64_t v85 = v12;
                  if (AppleBCMWLANIOReporting::getLogger(a1))
                  {
                    AppleBCMWLANIOReporting::getLogger(a1);
                    if (CCLogStream::shouldLog())
                    {
                      uint64_t v59 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                      CCLogStream::logEmergency(v59, "[dk] %s@%d:Failed to set leftAggStatsDictionary\n");
                    }
                  }
                  goto LABEL_111;
                }
                if (!v42)
                {
                  ((void (*)(OSDictionary *))v44->release)(v44);
                  unsigned int v44 = 0;
                  if (Object)
                  {
LABEL_78:
                    if (OSDictionary::getObject(*(const OSDictionary **)(*((void *)a1 + 7) + 8 * v8 + 968), v12))
                    {
LABEL_84:
                      ((void (*)(const OSObject *))v12->release)(v12);
                      uint64_t v17 = 0;
LABEL_85:
                      IOFreeData();
                      return v17;
                    }
                  }
LABEL_81:
                  *(unsigned char *)(*((void *)a1 + 7) + 50) = 1;
                  if (OSDictionary::setObject(*(OSDictionary **)(*((void *)a1 + 7) + 8 * v8 + 968), v12, v15))
                  {
                    if (!Object) {
                      ((void (*)(OSDictionary *))v15->release)(v15);
                    }
                    goto LABEL_84;
                  }
                  uint64_t v85 = v12;
                  if (AppleBCMWLANIOReporting::getLogger(a1))
                  {
                    AppleBCMWLANIOReporting::getLogger(a1);
                    if (CCLogStream::shouldLog())
                    {
                      uint64_t v72 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                      CCLogStream::logEmergency(v72, "[dk] %s@%d:Failed to set channelDictionary\n");
                    }
                  }
LABEL_111:
                  OSNumberPtr v84 = 0;
                  OSNumberPtr v33 = 0;
                  OSNumberPtr v38 = 0;
LABEL_165:
                  char v61 = v88;
                  BOOL v62 = Object == 0;
                  char v64 = v86;
                  int v63 = v87;
LABEL_166:
                  ((void (*)(const OSObject *))v85->release)(v85);
                  if (v63 && v33) {
                    ((void (*)(OSNumberPtr))v33->release)(v33);
                  }
                  char v65 = v64 ^ 1;
                  if (!v38) {
                    char v65 = 1;
                  }
                  if ((v65 & 1) == 0) {
                    ((void (*)(OSNumberPtr))v38->release)(v38);
                  }
                  char v66 = v61 ^ 1;
                  if (!v84) {
                    char v66 = 1;
                  }
                  if ((v66 & 1) == 0) {
                    ((void (*)(void))v84->release)();
                  }
                  char v67 = v90 ^ 1;
                  if (!anObject) {
                    char v67 = 1;
                  }
                  if ((v67 & 1) == 0) {
                    ((void (*)(void))anObject->release)();
                  }
                  char v68 = v89 ^ 1;
                  if (!v50) {
                    char v68 = 1;
                  }
                  if ((v68 & 1) == 0) {
                    ((void (*)(const OSMetaClassBase *))v50->release)(v50);
                  }
                  char v69 = BYTE4(v90) ^ 1;
                  if (!v25) {
                    char v69 = 1;
                  }
                  if ((v69 & 1) == 0) {
                    ((void (*)(OSDictionary *))v25->release)(v25);
                  }
                  char v70 = !v62;
                  if (!v15) {
                    char v70 = 1;
                  }
                  if ((v70 & 1) == 0) {
                    ((void (*)(OSDictionary *))v15->release)(v15);
                  }
                  uint64_t v17 = 3758097084;
                  char v71 = BYTE4(v89) ^ 1;
                  if (!v44) {
                    char v71 = 1;
                  }
                  if ((v71 & 1) == 0) {
                    ((void (*)(OSDictionary *))v44->release)(v44);
                  }
                  goto LABEL_85;
                }
LABEL_77:
                if (Object) {
                  goto LABEL_78;
                }
                goto LABEL_81;
              }
LABEL_71:
              if (v42) {
                goto LABEL_72;
              }
              goto LABEL_75;
            }
            uint64_t v85 = v12;
            if (AppleBCMWLANIOReporting::getLogger(a1))
            {
              AppleBCMWLANIOReporting::getLogger(a1);
              if (CCLogStream::shouldLog())
              {
                uint64_t v83 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                CCLogStream::logEmergency(v83, "[dk] %s@%d:Failed to alloc reasonsForLeavingDictionary\n");
              }
            }
          }
          OSNumberPtr v84 = 0;
          OSNumberPtr v33 = 0;
          OSNumberPtr v38 = 0;
          goto LABEL_164;
        }
LABEL_49:
        if (v23) {
          goto LABEL_50;
        }
        goto LABEL_53;
      }
      uint64_t v85 = v12;
      if (AppleBCMWLANIOReporting::getLogger(a1))
      {
        AppleBCMWLANIOReporting::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v81 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
          CCLogStream::logEmergency(v81, "[dk] %s@%d:Failed to alloc reasonsForJoiningDictionary\n");
        }
      }
    }
    OSNumberPtr v84 = 0;
    OSNumberPtr v33 = 0;
    OSNumberPtr v38 = 0;
    OSDictionaryPtr anObject = 0;
    LOBYTE(v90) = 0;
LABEL_159:
    unsigned int v44 = 0;
    BYTE4(v89) = 0;
LABEL_164:
    uint64_t v50 = 0;
    LOBYTE(v89) = 0;
    goto LABEL_165;
  }
  uint64_t v17 = 3758097084;
  if (AppleBCMWLANIOReporting::getLogger(a1))
  {
    AppleBCMWLANIOReporting::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v18 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
      CCLogStream::logEmergency(v18, "[dk] %s@%d:Failed to alloc AutoreleasedBuffer\n", "addDictionaryChanspec", 3421);
    }
  }
  return v17;
}

uint64_t AppleBCMWLANIOReportingPerSlice::addDictionaryChannelReasonForJoining(AppleBCMWLANIOReporting *a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v8 = IOMallocZeroData();
  if (v8)
  {
    size_t v9 = (char *)v8;
    AppleBCMWLANChanSpecHandle = (int **)AppleBCMWLANIOReporting::getAppleBCMWLANChanSpecHandle(a1);
    unsigned __int16 AppleChannelSpec = AppleBCMWLANChanSpec::getAppleChannelSpec(AppleBCMWLANChanSpecHandle, a2);
    AppleBCMWLANIOReporting::getAppleBCMWLANChanSpecHandle(a1);
    AppleBCMWLANChanSpec::convToAscii(AppleChannelSpec, v9, 0x32u);
    OSStringPtr v12 = OSString::withCString(v9);
    if (!v12)
    {
      uint64_t v32 = 3758097084;
      if (AppleBCMWLANIOReporting::getLogger(a1))
      {
        AppleBCMWLANIOReporting::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
          CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to alloc channelKey\n", "addDictionaryChannelReasonForJoining", 3661);
        }
      }
      goto LABEL_55;
    }
    uint64_t v13 = v12;
    if (a3 - 31 <= 0xFFFFFFDF)
    {
      if (AppleBCMWLANIOReporting::getLogger(a1))
      {
        AppleBCMWLANIOReporting::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          char v69 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
          CCLogStream::logAlert(v69, "[dk] %s@%d:Out of range reasonForJoining %d\n", "addDictionaryChannelReasonForJoining", 3664, a3);
        }
      }
      a3 = 0;
    }
    snprintf(v9, 0x32uLL, "%s", *((const char **)&kSliceChannelSwitchReport + 2 * a3 + 3));
    OSStringPtr v14 = OSString::withCString(v9);
    if (v14)
    {
      *(_DWORD *)(*((void *)a1 + 7) + 4 * a4 + 1028) = a3;
      unint64_t v15 = *(const OSDictionary **)(*((void *)a1 + 7) + 8 * a4 + 968);
      if (v15)
      {
        Object = OSDictionary::getObject(v15, v13);
        uint64_t v17 = (const OSDictionary *)OSMetaClassBase::safeMetaCast(Object, gOSDictionaryMetaClass);
        if (v17)
        {
          uint64_t v18 = OSDictionary::getObject(v17, *(const OSObject **)(*((void *)a1 + 7) + 1408));
          OSDictionaryPtr v19 = (const OSDictionary *)OSMetaClassBase::safeMetaCast(v18, gOSDictionaryMetaClass);
          if (v19)
          {
            uint64_t v20 = (OSDictionary *)v19;
            OSNumberPtr v21 = OSDictionary::getObject(v19, *(const OSObject **)(*((void *)a1 + 7) + 1424));
            OSNumberPtr v22 = (OSNumber *)OSMetaClassBase::safeMetaCast(v21, gOSNumberMetaClass);
            if (v22)
            {
              OSNumberPtr v23 = AppleBCMWLANIOReportingPerSlice::addNumberValue(a1, v22, v20, *(const OSString **)(*((void *)a1 + 7) + 1424), 1);
              if (v23)
              {
                OSNumberPtr v24 = v23;
                uint64_t v25 = OSDictionary::getObject(v20, *(const OSObject **)(*((void *)a1 + 7) + 1432));
                size_t v26 = (const OSDictionary *)OSMetaClassBase::safeMetaCast(v25, gOSDictionaryMetaClass);
                if (v26)
                {
                  OSDictionaryPtr v27 = (OSDictionary *)v26;
                  uint64_t v83 = v13;
                  uint64_t v28 = OSDictionary::getObject(v26, v14);
                  BOOL v82 = v28 == 0;
                  if (v28)
                  {
                    BOOL v29 = OSDictionary::getObject(v27, v14);
                    uint64_t v30 = (OSDictionary *)OSMetaClassBase::safeMetaCast(v29, gOSDictionaryMetaClass);
                    if (!v30)
                    {
                      uint64_t v81 = v24;
                      if (AppleBCMWLANIOReporting::getLogger(a1))
                      {
                        AppleBCMWLANIOReporting::getLogger(a1);
                        if (CCLogStream::shouldLog())
                        {
                          uint64_t v31 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                          CCLogStream::logEmergency(v31, "[dk] %s@%d:Failed to get reasonDictionary\n");
                        }
                      }
LABEL_97:
                      OSNumberPtr v46 = 0;
                      OSNumberPtr v40 = 0;
                      uint64_t v30 = 0;
                      BOOL v60 = 0;
                      char v80 = 0;
                      char v61 = 0;
                      BOOL v36 = 0;
                      uint64_t v13 = v83;
                      goto LABEL_128;
                    }
                  }
                  else
                  {
                    OSDictionaryPtr v34 = OSDictionary::withCapacity(3u);
                    if (!v34)
                    {
                      uint64_t v81 = v24;
                      if (AppleBCMWLANIOReporting::getLogger(a1))
                      {
                        AppleBCMWLANIOReporting::getLogger(a1);
                        if (CCLogStream::shouldLog())
                        {
                          uint64_t v73 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                          CCLogStream::logEmergency(v73, "[dk] %s@%d:Failed to alloc reasonDict\n");
                        }
                      }
                      goto LABEL_97;
                    }
                    uint64_t v30 = v34;
                    *(unsigned char *)(*((void *)a1 + 7) + 50) = 1;
                  }
                  size_t v35 = OSDictionary::getObject(v30, *(const OSObject **)(*((void *)a1 + 7) + 1440));
                  BOOL v36 = v35 == 0;
                  if (v35)
                  {
                    OSNumberPtr v37 = OSDictionary::getObject(v30, *(const OSObject **)(*((void *)a1 + 7) + 1440));
                    if (!OSMetaClassBase::safeMetaCast(v37, gOSNumberMetaClass))
                    {
                      uint64_t v81 = v24;
                      if (AppleBCMWLANIOReporting::getLogger(a1))
                      {
                        AppleBCMWLANIOReporting::getLogger(a1);
                        if (CCLogStream::shouldLog())
                        {
                          OSNumberPtr v38 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                          CCLogStream::logEmergency(v38, "[dk] %s@%d:Failed to get totalDur\n");
                        }
                      }
LABEL_101:
                      OSNumberPtr v46 = 0;
                      OSNumberPtr v40 = 0;
                      char v80 = 0;
                      char v61 = 0;
                      BOOL v36 = 0;
LABEL_126:
                      uint64_t v13 = v83;
LABEL_127:
                      BOOL v60 = v82;
                      goto LABEL_128;
                    }
                  }
                  else
                  {
                    OSNumberPtr v39 = OSNumber::withNumber(a3, 0x20uLL);
                    if (!v39)
                    {
                      uint64_t v81 = v24;
                      if (AppleBCMWLANIOReporting::getLogger(a1))
                      {
                        AppleBCMWLANIOReporting::getLogger(a1);
                        if (CCLogStream::shouldLog())
                        {
                          uint64_t v74 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                          CCLogStream::logEmergency(v74, "[dk] %s@%d:Failed to alloc reasonNum\n");
                        }
                      }
                      goto LABEL_101;
                    }
                    OSNumberPtr v40 = v39;
                    *(unsigned char *)(*((void *)a1 + 7) + 50) = 1;
                    if (!OSDictionary::setObject(v30, *(const OSObject **)(*((void *)a1 + 7) + 1440), v39))
                    {
                      uint64_t v81 = v24;
                      if (AppleBCMWLANIOReporting::getLogger(a1))
                      {
                        AppleBCMWLANIOReporting::getLogger(a1);
                        if (CCLogStream::shouldLog())
                        {
                          uint64_t v75 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                          CCLogStream::logEmergency(v75, "[dk] %s@%d:Failed to set reasonNum\n", "addDictionaryChannelReasonForJoining", 3721);
                        }
                      }
                      OSNumberPtr v46 = 0;
                      char v80 = 0;
                      char v61 = 0;
                      BOOL v36 = 1;
                      goto LABEL_126;
                    }
                    ((void (*)(OSNumberPtr))v40->release)(v40);
                  }
                  size_t v41 = OSDictionary::getObject(v30, *(const OSObject **)(*((void *)a1 + 7) + 1416));
                  BOOL v42 = v41 == 0;
                  if (v41)
                  {
                    size_t v43 = OSDictionary::getObject(v30, *(const OSObject **)(*((void *)a1 + 7) + 1416));
                    if (!OSMetaClassBase::safeMetaCast(v43, gOSNumberMetaClass))
                    {
                      uint64_t v81 = v24;
                      if (AppleBCMWLANIOReporting::getLogger(a1))
                      {
                        AppleBCMWLANIOReporting::getLogger(a1);
                        if (CCLogStream::shouldLog())
                        {
                          unsigned int v44 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                          CCLogStream::logEmergency(v44, "[dk] %s@%d:Failed to get totalDur\n");
                        }
                      }
LABEL_109:
                      OSNumberPtr v46 = 0;
                      OSNumberPtr v40 = 0;
                      char v80 = 0;
LABEL_118:
                      char v61 = 0;
                      goto LABEL_126;
                    }
                  }
                  else
                  {
                    uint64_t v81 = v24;
                    OSNumberPtr v45 = OSNumber::withNumber(0, 0x40uLL);
                    if (!v45)
                    {
                      if (AppleBCMWLANIOReporting::getLogger(a1))
                      {
                        AppleBCMWLANIOReporting::getLogger(a1);
                        if (CCLogStream::shouldLog())
                        {
                          uint64_t v76 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                          CCLogStream::logEmergency(v76, "[dk] %s@%d:Failed to alloc totalDur\n");
                        }
                      }
                      goto LABEL_109;
                    }
                    OSNumberPtr v46 = v45;
                    *(unsigned char *)(*((void *)a1 + 7) + 50) = 1;
                    if (!OSDictionary::setObject(v30, *(const OSObject **)(*((void *)a1 + 7) + 1416), v45))
                    {
                      if (AppleBCMWLANIOReporting::getLogger(a1))
                      {
                        AppleBCMWLANIOReporting::getLogger(a1);
                        if (CCLogStream::shouldLog())
                        {
                          uint64_t v77 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                          CCLogStream::logEmergency(v77, "[dk] %s@%d:Failed to set totalDur\n", "addDictionaryChannelReasonForJoining", 3737);
                        }
                      }
                      OSNumberPtr v40 = 0;
                      char v61 = 0;
                      char v80 = 1;
                      goto LABEL_126;
                    }
                    ((void (*)(OSNumberPtr))v46->release)(v46);
                  }
                  uint64_t v47 = OSDictionary::getObject(v30, *(const OSObject **)(*((void *)a1 + 7) + 1424));
                  BOOL v48 = v47 == 0;
                  if (v47)
                  {
                    uint64_t v49 = OSDictionary::getObject(v30, *(const OSObject **)(*((void *)a1 + 7) + 1424));
                    uint64_t v50 = (OSNumber *)OSMetaClassBase::safeMetaCast(v49, gOSNumberMetaClass);
                    if (v50)
                    {
                      if (AppleBCMWLANIOReportingPerSlice::addNumberValue(a1, v50, v30, *(const OSString **)(*((void *)a1 + 7) + 1424), 1))
                      {
                        if (v28)
                        {
LABEL_45:
                          if (!OSDictionary::getObject(v27, v14))
                          {
                            *(unsigned char *)(*((void *)a1 + 7) + 50) = 1;
                            if (!OSDictionary::setObject(v27, v14, v30)) {
                              goto LABEL_90;
                            }
                          }
                          goto LABEL_54;
                        }
LABEL_52:
                        *(unsigned char *)(*((void *)a1 + 7) + 50) = 1;
                        if (!OSDictionary::setObject(v27, v14, v30))
                        {
LABEL_90:
                          char v61 = v48;
                          char v80 = v42;
                          uint64_t v13 = v83;
                          if (AppleBCMWLANIOReporting::getLogger(a1))
                          {
                            AppleBCMWLANIOReporting::getLogger(a1);
                            if (CCLogStream::shouldLog())
                            {
                              uint64_t v72 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                              CCLogStream::logEmergency(v72, "[dk] %s@%d:Failed to set reasonDictionary\n", "addDictionaryChannelReasonForJoining", 3776);
                            }
                          }
                          OSNumberPtr v46 = 0;
                          uint64_t v81 = 0;
                          OSNumberPtr v40 = 0;
                          goto LABEL_127;
                        }
                        ((void (*)(OSDictionary *))v30->release)(v30);
LABEL_54:
                        ((void (*)(const OSObject *))v83->release)(v83);
                        ((void (*)(OSStringPtr))v14->release)(v14);
                        uint64_t v32 = 0;
LABEL_55:
                        IOFreeData();
                        return v32;
                      }
                      char v80 = v42;
                      if (AppleBCMWLANIOReporting::getLogger(a1))
                      {
                        AppleBCMWLANIOReporting::getLogger(a1);
                        if (CCLogStream::shouldLog())
                        {
                          int v63 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                          CCLogStream::logEmergency(v63, "[dk] %s@%d:Failed to update transitions\n");
                        }
                      }
                    }
                    else
                    {
                      char v80 = v42;
                      if (AppleBCMWLANIOReporting::getLogger(a1))
                      {
                        AppleBCMWLANIOReporting::getLogger(a1);
                        if (CCLogStream::shouldLog())
                        {
                          BOOL v62 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                          CCLogStream::logEmergency(v62, "[dk] %s@%d:Failed to get transitions\n");
                        }
                      }
                    }
                  }
                  else
                  {
                    OSNumberPtr v51 = OSNumber::withNumber(0, 0x40uLL);
                    if (v51)
                    {
                      BOOL v52 = v51;
                      *(unsigned char *)(*((void *)a1 + 7) + 50) = 1;
                      if (OSDictionary::setObject(v30, *(const OSObject **)(*((void *)a1 + 7) + 1424), v51))
                      {
                        if (AppleBCMWLANIOReportingPerSlice::addNumberValue(a1, v52, v30, *(const OSString **)(*((void *)a1 + 7) + 1424), 1))
                        {
                          ((void (*)(OSNumber *))v52->release)(v52);
                          if (v28) {
                            goto LABEL_45;
                          }
                          goto LABEL_52;
                        }
                        uint64_t v81 = v52;
                        char v80 = v42;
                        if (AppleBCMWLANIOReporting::getLogger(a1))
                        {
                          AppleBCMWLANIOReporting::getLogger(a1);
                          if (CCLogStream::shouldLog())
                          {
                            uint64_t v79 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                            CCLogStream::logEmergency(v79, "[dk] %s@%d:Failed to update transitions\n");
                          }
                        }
                      }
                      else
                      {
                        uint64_t v81 = v52;
                        char v80 = v42;
                        if (AppleBCMWLANIOReporting::getLogger(a1))
                        {
                          AppleBCMWLANIOReporting::getLogger(a1);
                          if (CCLogStream::shouldLog())
                          {
                            char v64 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                            CCLogStream::logEmergency(v64, "[dk] %s@%d:Failed to set transitions\n");
                          }
                        }
                      }
                      OSNumberPtr v46 = 0;
                      OSNumberPtr v40 = 0;
                      char v61 = 1;
                      goto LABEL_126;
                    }
                    char v80 = v42;
                    if (AppleBCMWLANIOReporting::getLogger(a1))
                    {
                      AppleBCMWLANIOReporting::getLogger(a1);
                      if (CCLogStream::shouldLog())
                      {
                        uint64_t v78 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                        CCLogStream::logEmergency(v78, "[dk] %s@%d:Failed to alloc transitions\n");
                      }
                    }
                  }
                  OSNumberPtr v46 = 0;
                  uint64_t v81 = 0;
                  OSNumberPtr v40 = 0;
                  goto LABEL_118;
                }
                uint64_t v81 = v24;
                if (AppleBCMWLANIOReporting::getLogger(a1))
                {
                  AppleBCMWLANIOReporting::getLogger(a1);
                  if (CCLogStream::shouldLog())
                  {
                    char v71 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                    CCLogStream::logEmergency(v71, "[dk] %s@%d:Failed to get reasonsForJoiningDictionary\n", "addDictionaryChannelReasonForJoining", 3696);
                  }
                }
                OSNumberPtr v46 = 0;
LABEL_79:
                OSNumberPtr v40 = 0;
                uint64_t v30 = 0;
                BOOL v60 = 0;
                char v80 = 0;
                char v61 = 0;
                BOOL v36 = 0;
LABEL_128:
                ((void (*)(const OSObject *))v13->release)(v13);
                if (v14) {
                  ((void (*)(OSStringPtr))v14->release)(v14);
                }
                char v65 = v80 ^ 1;
                if (!v46) {
                  char v65 = 1;
                }
                if ((v65 & 1) == 0) {
                  ((void (*)(OSNumberPtr))v46->release)(v46);
                }
                char v66 = v61 ^ 1;
                if (!v81) {
                  char v66 = 1;
                }
                if ((v66 & 1) == 0) {
                  ((void (*)(void))v81->release)();
                }
                char v67 = !v60;
                if (!v30) {
                  char v67 = 1;
                }
                if ((v67 & 1) == 0) {
                  ((void (*)(OSDictionary *))v30->release)(v30);
                }
                uint64_t v32 = 3758097084;
                char v68 = !v36;
                if (!v40) {
                  char v68 = 1;
                }
                if ((v68 & 1) == 0) {
                  ((void (*)(OSNumberPtr))v40->release)(v40);
                }
                goto LABEL_55;
              }
              if (AppleBCMWLANIOReporting::getLogger(a1))
              {
                AppleBCMWLANIOReporting::getLogger(a1);
                if (CCLogStream::shouldLog())
                {
                  char v70 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                  CCLogStream::logEmergency(v70, "[dk] %s@%d:Failed to update transitions\n");
                }
              }
            }
            else if (AppleBCMWLANIOReporting::getLogger(a1))
            {
              AppleBCMWLANIOReporting::getLogger(a1);
              if (CCLogStream::shouldLog())
              {
                uint64_t v59 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                CCLogStream::logEmergency(v59, "[dk] %s@%d:Failed to get transitions\n");
              }
            }
          }
          else if (AppleBCMWLANIOReporting::getLogger(a1))
          {
            AppleBCMWLANIOReporting::getLogger(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v58 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
              CCLogStream::logEmergency(v58, "[dk] %s@%d:Failed to get joinedAggStatsDictionary\n");
            }
          }
        }
        else if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            size_t v57 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(v57, "[dk] %s@%d:Failed to get channelDictionary\n");
          }
        }
      }
      else if (AppleBCMWLANIOReporting::getLogger(a1))
      {
        AppleBCMWLANIOReporting::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v56 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
          CCLogStream::logEmergency(v56, "[dk] %s@%d:No ivars->fChannelSwitchDictionary[sliceIndex]\n");
        }
      }
    }
    else if (AppleBCMWLANIOReporting::getLogger(a1))
    {
      AppleBCMWLANIOReporting::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v55 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
        CCLogStream::logEmergency(v55, "[dk] %s@%d:Failed to alloc reasonKey\n");
      }
    }
    OSNumberPtr v46 = 0;
    uint64_t v81 = 0;
    goto LABEL_79;
  }
  uint64_t v32 = 3758097084;
  if (AppleBCMWLANIOReporting::getLogger(a1))
  {
    AppleBCMWLANIOReporting::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      OSNumberPtr v33 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
      CCLogStream::logEmergency(v33, "[dk] %s@%d:Failed to alloc AutoreleasedBuffer\n", "addDictionaryChannelReasonForJoining", 3656);
    }
  }
  return v32;
}

OSNumberPtr AppleBCMWLANIOReportingPerSlice::addNumberValue(AppleBCMWLANIOReportingPerSlice *this, OSNumber *a2, OSDictionary *a3, const OSString *a4, uint64_t a5)
{
  if (a2 && a3 && a4)
  {
    uint64_t v9 = OSNumber::unsigned64BitValue(a2) + a5;
    return AppleBCMWLANIOReportingPerSlice::replaceNumberValue(this, a2, a3, a4, v9);
  }
  else
  {
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logEmergency(Logger, "[dk] %s@%d:Invalid data for %s\n", "addNumberValue", 6420, "addNumberValue");
      }
    }
    return 0;
  }
}

uint64_t AppleBCMWLANIOReportingPerSlice::addDictionaryChannelReasonForLeaving(AppleBCMWLANIOReporting *a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10 = IOMallocZeroData();
  if (v10)
  {
    OSStringPtr v11 = (char *)v10;
    AppleBCMWLANChanSpecHandle = (int **)AppleBCMWLANIOReporting::getAppleBCMWLANChanSpecHandle(a1);
    unsigned __int16 AppleChannelSpec = AppleBCMWLANChanSpec::getAppleChannelSpec(AppleBCMWLANChanSpecHandle, a2);
    AppleBCMWLANIOReporting::getAppleBCMWLANChanSpecHandle(a1);
    AppleBCMWLANChanSpec::convToAscii(AppleChannelSpec, v11, 0x32u);
    OSStringPtr v14 = OSString::withCString(v11);
    if (!v14)
    {
      uint64_t v30 = 3758097084;
      if (AppleBCMWLANIOReporting::getLogger(a1))
      {
        AppleBCMWLANIOReporting::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
          CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to alloc chLeftKey\n", "addDictionaryChannelReasonForLeaving", 3846);
        }
      }
      goto LABEL_92;
    }
    unint64_t v15 = v14;
    if (a3 - 31 <= 0xFFFFFFDF)
    {
      if (AppleBCMWLANIOReporting::getLogger(a1))
      {
        AppleBCMWLANIOReporting::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v106 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
          CCLogStream::logAlert(v106, "[dk] %s@%d:Out of range reasonForLeaving %d\n", "addDictionaryChannelReasonForLeaving", 3849, a3);
        }
      }
      a3 = 0;
    }
    snprintf(v11, 0x32uLL, "%s", *((const char **)&kSliceChannelSwitchReport + 2 * a3 + 3));
    OSStringPtr v16 = OSString::withCString(v11);
    if (!v16)
    {
      if (AppleBCMWLANIOReporting::getLogger(a1))
      {
        AppleBCMWLANIOReporting::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v107 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
          CCLogStream::logEmergency(v107, "[dk] %s@%d:Failed to alloc reasonKey\n", "addDictionaryChannelReasonForLeaving", 3855);
        }
      }
      BOOL v87 = 0;
      BOOL v88 = 0;
      BOOL v89 = 0;
      BOOL v90 = 0;
      uint64_t v28 = 0;
      OSNumberPtr v39 = 0;
      OSNumberPtr v125 = 0;
      OSNumberPtr v58 = 0;
      goto LABEL_209;
    }
    uint64_t v17 = v16;
    uint64_t v18 = *(const OSDictionary **)(*((void *)a1 + 7) + 8 * a5 + 968);
    aKey = (OSObject *)v15;
    if (!v18)
    {
      uint64_t v130 = v17;
      if (AppleBCMWLANIOReporting::getLogger(a1))
      {
        AppleBCMWLANIOReporting::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          size_t v91 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
          CCLogStream::logEmergency(v91, "[dk] %s@%d:No ivars->fChannelSwitchDictionary[sliceIndex]\n");
        }
      }
      goto LABEL_152;
    }
    Object = OSDictionary::getObject(v18, v15);
    uint64_t v20 = (const OSDictionary *)OSMetaClassBase::safeMetaCast(Object, gOSDictionaryMetaClass);
    if (!v20)
    {
      uint64_t v130 = v17;
      if (AppleBCMWLANIOReporting::getLogger(a1))
      {
        AppleBCMWLANIOReporting::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v92 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
          CCLogStream::logEmergency(v92, "[dk] %s@%d:Failed to get chLeftDictionary\n");
        }
      }
      goto LABEL_152;
    }
    OSNumberPtr v21 = OSDictionary::getObject(v20, *(const OSObject **)(*((void *)a1 + 7) + 1448));
    OSNumberPtr v22 = (const OSDictionary *)OSMetaClassBase::safeMetaCast(v21, gOSDictionaryMetaClass);
    if (!v22)
    {
      uint64_t v130 = v17;
      if (AppleBCMWLANIOReporting::getLogger(a1))
      {
        AppleBCMWLANIOReporting::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v93 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
          CCLogStream::logEmergency(v93, "[dk] %s@%d:Failed to get leftAggStatsDictionary\n");
        }
      }
      goto LABEL_152;
    }
    OSNumberPtr v23 = OSDictionary::getObject(v22, *(const OSObject **)(*((void *)a1 + 7) + 1456));
    OSNumberPtr v24 = (const OSDictionary *)OSMetaClassBase::safeMetaCast(v23, gOSDictionaryMetaClass);
    if (!v24)
    {
      uint64_t v130 = v17;
      if (AppleBCMWLANIOReporting::getLogger(a1))
      {
        AppleBCMWLANIOReporting::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          size_t v94 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
          CCLogStream::logEmergency(v94, "[dk] %s@%d:Failed to get reasonsForLeavingDictionary\n");
        }
      }
      goto LABEL_152;
    }
    uint64_t v25 = (OSDictionary *)v24;
    unsigned int v131 = a5;
    size_t v26 = OSDictionary::getObject(v24, v17);
    BOOL v129 = v26 == 0;
    if (v26)
    {
      OSDictionaryPtr v27 = OSDictionary::getObject(v25, v17);
      uint64_t v28 = (OSDictionary *)OSMetaClassBase::safeMetaCast(v27, gOSDictionaryMetaClass);
      if (!v28)
      {
        uint64_t v130 = v17;
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            BOOL v29 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(v29, "[dk] %s@%d:Failed to get reasonDictionary\n");
          }
        }
LABEL_152:
        OSNumberPtr v58 = 0;
        OSNumberPtr v125 = 0;
        uint64_t v126 = 0;
        OSNumberPtr v39 = 0;
        BOOL v129 = 0;
LABEL_153:
        BOOL v132 = 0;
        BOOL v127 = 0;
        BOOL v128 = 0;
LABEL_208:
        ((void (*)(const OSObject *))v130->release)(v130);
        unint64_t v15 = aKey;
        BOOL v87 = v128;
        BOOL v90 = v129;
        BOOL v88 = v127;
        BOOL v89 = v132;
        uint64_t v28 = v126;
LABEL_209:
        ((void (*)(const OSObject *))v15->release)(v15);
        if (v89 && v58) {
          ((void (*)(OSNumberPtr))v58->release)(v58);
        }
        char v103 = !v88;
        if (!v125) {
          char v103 = 1;
        }
        if ((v103 & 1) == 0) {
          ((void (*)(void))v125->release)();
        }
        char v104 = !v90;
        if (!v28) {
          char v104 = 1;
        }
        if ((v104 & 1) == 0) {
          ((void (*)(OSDictionary *))v28->release)(v28);
        }
        uint64_t v30 = 3758097084;
        char v105 = !v87;
        if (!v39) {
          char v105 = 1;
        }
        if ((v105 & 1) == 0) {
          ((void (*)(OSNumberPtr))v39->release)(v39);
        }
        goto LABEL_92;
      }
    }
    else
    {
      OSDictionaryPtr v32 = OSDictionary::withCapacity(3u);
      if (!v32)
      {
        uint64_t v130 = v17;
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v111 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(v111, "[dk] %s@%d:Failed to alloc reasonDict\n");
          }
        }
        goto LABEL_152;
      }
      uint64_t v28 = v32;
      *(unsigned char *)(*((void *)a1 + 7) + 50) = 1;
    }
    OSNumberPtr v33 = OSDictionary::getObject(v28, *(const OSObject **)(*((void *)a1 + 7) + 1440));
    BOOL v128 = v33 == 0;
    if (v33)
    {
      OSDictionaryPtr v34 = OSDictionary::getObject(v28, *(const OSObject **)(*((void *)a1 + 7) + 1440));
      unsigned int v35 = a3;
      if (!OSMetaClassBase::safeMetaCast(v34, gOSNumberMetaClass))
      {
        uint64_t v126 = v28;
        uint64_t v130 = v17;
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            BOOL v36 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(v36, "[dk] %s@%d:Failed to get totalDur\n");
          }
        }
LABEL_157:
        OSNumberPtr v58 = 0;
        OSNumberPtr v125 = 0;
        OSNumberPtr v39 = 0;
        goto LABEL_153;
      }
    }
    else
    {
      uint64_t v126 = v28;
      uint64_t v130 = v17;
      unsigned int v37 = a4;
      unsigned int v35 = a3;
      OSNumberPtr v38 = OSNumber::withNumber(a3, 0x20uLL);
      if (!v38)
      {
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v112 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(v112, "[dk] %s@%d:Failed to alloc reasonNum\n");
          }
        }
        goto LABEL_157;
      }
      OSNumberPtr v39 = v38;
      *(unsigned char *)(*((void *)a1 + 7) + 50) = 1;
      if (!OSDictionary::setObject(v28, *(const OSObject **)(*((void *)a1 + 7) + 1440), v38))
      {
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v113 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(v113, "[dk] %s@%d:Failed to set reasonNum\n", "addDictionaryChannelReasonForLeaving", 3893);
          }
        }
        OSNumberPtr v58 = 0;
        OSNumberPtr v125 = 0;
        BOOL v132 = 0;
        BOOL v127 = 0;
        BOOL v128 = 1;
        goto LABEL_208;
      }
      ((void (*)(OSNumberPtr))v39->release)(v39);
      a4 = v37;
      uint64_t v17 = v130;
    }
    OSNumberPtr v40 = OSDictionary::getObject(v28, *(const OSObject **)(*((void *)a1 + 7) + 1424));
    BOOL v127 = v40 == 0;
    if (v40)
    {
      size_t v41 = OSDictionary::getObject(v28, *(const OSObject **)(*((void *)a1 + 7) + 1424));
      BOOL v42 = (OSNumber *)OSMetaClassBase::safeMetaCast(v41, gOSNumberMetaClass);
      if (v42)
      {
        if (AppleBCMWLANIOReportingPerSlice::addNumberValue(a1, v42, v28, *(const OSString **)(*((void *)a1 + 7) + 1424), 1))
        {
          if (v26) {
            goto LABEL_35;
          }
          goto LABEL_41;
        }
        uint64_t v126 = v28;
        uint64_t v130 = v17;
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v98 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(v98, "[dk] %s@%d:Failed to update transitions\n");
          }
        }
      }
      else
      {
        uint64_t v126 = v28;
        uint64_t v130 = v17;
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            size_t v97 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(v97, "[dk] %s@%d:Failed to get transitions\n");
          }
        }
      }
    }
    else
    {
      uint64_t v130 = v17;
      unsigned int v43 = a4;
      OSNumberPtr v44 = OSNumber::withNumber(1uLL, 0x40uLL);
      if (v44)
      {
        OSNumberPtr v45 = v44;
        *(unsigned char *)(*((void *)a1 + 7) + 50) = 1;
        if (!OSDictionary::setObject(v28, *(const OSObject **)(*((void *)a1 + 7) + 1424), v44))
        {
          OSNumberPtr v125 = v45;
          uint64_t v126 = v28;
          if (AppleBCMWLANIOReporting::getLogger(a1))
          {
            AppleBCMWLANIOReporting::getLogger(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v115 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
              CCLogStream::logEmergency(v115, "[dk] %s@%d:Failed to set transitions\n", "addDictionaryChannelReasonForLeaving", 3911);
            }
          }
          OSNumberPtr v58 = 0;
          OSNumberPtr v39 = 0;
          BOOL v132 = 0;
          BOOL v127 = 1;
          goto LABEL_208;
        }
        ((void (*)(OSNumberPtr))v45->release)(v45);
        a4 = v43;
        uint64_t v17 = v130;
        if (v26)
        {
LABEL_35:
          if (!OSDictionary::getObject(v25, v17))
          {
            *(unsigned char *)(*((void *)a1 + 7) + 50) = 1;
            if (!OSDictionary::setObject(v25, v17, v28))
            {
LABEL_142:
              uint64_t v126 = v28;
              uint64_t v130 = v17;
              if (AppleBCMWLANIOReporting::getLogger(a1))
              {
                AppleBCMWLANIOReporting::getLogger(a1);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v102 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                  CCLogStream::logEmergency(v102, "[dk] %s@%d:Failed to set reasonDictionary\n");
                }
              }
LABEL_175:
              OSNumberPtr v58 = 0;
              OSNumberPtr v125 = 0;
              OSNumberPtr v39 = 0;
              BOOL v132 = 0;
              goto LABEL_208;
            }
          }
LABEL_43:
          ((void (*)(const OSObject *))v17->release)(v17);
          snprintf(v11, 0x32uLL, "%s", *((const char **)&kSliceChannelSwitchReport+ 2 * (*(_DWORD *)(*((void *)a1 + 7) + 4 * v131 + 1028) + 1)+ 1));
          OSStringPtr v46 = OSString::withCString(v11);
          if (!v46)
          {
            if (AppleBCMWLANIOReporting::getLogger(a1))
            {
              AppleBCMWLANIOReporting::getLogger(a1);
              unint64_t v15 = aKey;
              if (CCLogStream::shouldLog())
              {
                uint64_t v108 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                CCLogStream::logEmergency(v108, "[dk] %s@%d:Failed to alloc reasonKey\n", "addDictionaryChannelReasonForLeaving", 3951);
              }
              BOOL v89 = 0;
              OSNumberPtr v39 = 0;
              OSNumberPtr v125 = 0;
              OSNumberPtr v58 = 0;
            }
            else
            {
              BOOL v89 = 0;
              OSNumberPtr v39 = 0;
              OSNumberPtr v125 = 0;
              OSNumberPtr v58 = 0;
              unint64_t v15 = aKey;
            }
            BOOL v87 = v128;
            BOOL v90 = v26 == 0;
            BOOL v88 = v127;
            goto LABEL_209;
          }
          uint64_t v47 = v46;
          BOOL v48 = OSDictionary::getObject(*(const OSDictionary **)(*((void *)a1 + 7) + 8 * v131 + 968), aKey);
          uint64_t v49 = (const OSDictionary *)OSMetaClassBase::safeMetaCast(v48, gOSDictionaryMetaClass);
          if (!v49)
          {
            uint64_t v130 = v47;
            uint64_t v126 = v28;
            if (AppleBCMWLANIOReporting::getLogger(a1))
            {
              AppleBCMWLANIOReporting::getLogger(a1);
              if (CCLogStream::shouldLog())
              {
                uint64_t v95 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                CCLogStream::logEmergency(v95, "[dk] %s@%d:Failed to get channelDictionary\n");
              }
            }
            goto LABEL_175;
          }
          uint64_t v50 = OSDictionary::getObject(v49, *(const OSObject **)(*((void *)a1 + 7) + 1408));
          OSNumberPtr v51 = (const OSDictionary *)OSMetaClassBase::safeMetaCast(v50, gOSDictionaryMetaClass);
          if (!v51)
          {
            uint64_t v130 = v47;
            uint64_t v126 = v28;
            if (AppleBCMWLANIOReporting::getLogger(a1))
            {
              AppleBCMWLANIOReporting::getLogger(a1);
              if (CCLogStream::shouldLog())
              {
                uint64_t v96 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                CCLogStream::logEmergency(v96, "[dk] %s@%d:Failed to get joinedAggStatsDictionary\n");
              }
            }
            goto LABEL_175;
          }
          BOOL v52 = (OSDictionary *)v51;
          int v53 = OSDictionary::getObject(v51, *(const OSObject **)(*((void *)a1 + 7) + 1416));
          BOOL v132 = v53 == 0;
          if (v53)
          {
            uint64_t v54 = OSDictionary::getObject(v52, *(const OSObject **)(*((void *)a1 + 7) + 1416));
            uint64_t v55 = (OSNumber *)OSMetaClassBase::safeMetaCast(v54, gOSNumberMetaClass);
            if (!v55)
            {
              uint64_t v126 = v28;
              uint64_t v130 = v47;
              if (AppleBCMWLANIOReporting::getLogger(a1))
              {
                AppleBCMWLANIOReporting::getLogger(a1);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v99 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                  CCLogStream::logEmergency(v99, "[dk] %s@%d:Failed to get totalDur\n");
                }
              }
              goto LABEL_175;
            }
            if (!AppleBCMWLANIOReportingPerSlice::addNumberValue(a1, v55, v52, *(const OSString **)(*((void *)a1 + 7) + 1416), a4))
            {
              uint64_t v126 = v28;
              uint64_t v130 = v47;
              if (AppleBCMWLANIOReporting::getLogger(a1))
              {
                AppleBCMWLANIOReporting::getLogger(a1);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v56 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                  CCLogStream::logEmergency(v56, "[dk] %s@%d:Failed to update totalDur\n");
                }
              }
              goto LABEL_175;
            }
          }
          else
          {
            OSNumberPtr v57 = OSNumber::withNumber(a4, 0x40uLL);
            if (!v57)
            {
              uint64_t v126 = v28;
              uint64_t v130 = v47;
              if (AppleBCMWLANIOReporting::getLogger(a1))
              {
                AppleBCMWLANIOReporting::getLogger(a1);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v116 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                  CCLogStream::logEmergency(v116, "[dk] %s@%d:Failed to alloc totalDur\n");
                }
              }
              goto LABEL_175;
            }
            OSNumberPtr v58 = v57;
            *(unsigned char *)(*((void *)a1 + 7) + 50) = 1;
            if (!OSDictionary::setObject(v52, *(const OSObject **)(*((void *)a1 + 7) + 1416), v57))
            {
              uint64_t v126 = v28;
              uint64_t v130 = v47;
              if (AppleBCMWLANIOReporting::getLogger(a1))
              {
                AppleBCMWLANIOReporting::getLogger(a1);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v117 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                  CCLogStream::logEmergency(v117, "[dk] %s@%d:Failed to set totalDur\n", "addDictionaryChannelReasonForLeaving", 3966);
                }
              }
              OSNumberPtr v125 = 0;
              OSNumberPtr v39 = 0;
              BOOL v132 = 1;
              goto LABEL_208;
            }
            ((void (*)(OSNumberPtr))v58->release)(v58);
          }
          uint64_t v59 = OSDictionary::getObject(v52, *(const OSObject **)(*((void *)a1 + 7) + 1432));
          BOOL v60 = (const OSDictionary *)OSMetaClassBase::safeMetaCast(v59, gOSDictionaryMetaClass);
          if (!v60)
          {
            uint64_t v130 = v47;
            uint64_t v126 = v28;
            if (AppleBCMWLANIOReporting::getLogger(a1))
            {
              AppleBCMWLANIOReporting::getLogger(a1);
              if (CCLogStream::shouldLog())
              {
                uint64_t v109 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                CCLogStream::logEmergency(v109, "[dk] %s@%d:Failed to get reasonsForJoiningDictionary\n", "addDictionaryChannelReasonForLeaving", 3982);
              }
            }
            OSNumberPtr v58 = 0;
            OSNumberPtr v125 = 0;
            goto LABEL_184;
          }
          char v61 = (OSDictionary *)v60;
          BOOL v62 = OSDictionary::getObject(v60, v47);
          if (v62)
          {
            int v63 = OSDictionary::getObject(v61, v47);
            char v64 = (OSDictionary *)OSMetaClassBase::safeMetaCast(v63, gOSDictionaryMetaClass);
            if (!v64)
            {
              uint64_t v130 = v47;
              if (AppleBCMWLANIOReporting::getLogger(a1))
              {
                AppleBCMWLANIOReporting::getLogger(a1);
                if (CCLogStream::shouldLog())
                {
                  char v65 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                  CCLogStream::logEmergency(v65, "[dk] %s@%d:Failed to get reasonDictionary\n");
                }
              }
LABEL_183:
              OSNumberPtr v58 = 0;
              OSNumberPtr v125 = 0;
              uint64_t v126 = 0;
LABEL_184:
              OSNumberPtr v39 = 0;
              goto LABEL_208;
            }
          }
          else
          {
            OSDictionaryPtr v66 = OSDictionary::withCapacity(3u);
            if (!v66)
            {
              uint64_t v130 = v47;
              if (AppleBCMWLANIOReporting::getLogger(a1))
              {
                AppleBCMWLANIOReporting::getLogger(a1);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v118 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                  CCLogStream::logEmergency(v118, "[dk] %s@%d:Failed to alloc reasonDict\n");
                }
              }
              goto LABEL_183;
            }
            char v64 = v66;
            *(unsigned char *)(*((void *)a1 + 7) + 50) = 1;
          }
          char v67 = OSDictionary::getObject(v64, *(const OSObject **)(*((void *)a1 + 7) + 1440));
          BOOL v68 = v67 == 0;
          if (v67)
          {
            char v69 = OSDictionary::getObject(v64, *(const OSObject **)(*((void *)a1 + 7) + 1440));
            if (!OSMetaClassBase::safeMetaCast(v69, gOSNumberMetaClass))
            {
              uint64_t v126 = v64;
              uint64_t v130 = v47;
              BOOL v70 = v62 == 0;
              if (AppleBCMWLANIOReporting::getLogger(a1))
              {
                AppleBCMWLANIOReporting::getLogger(a1);
                if (CCLogStream::shouldLog())
                {
                  char v71 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                  CCLogStream::logEmergency(v71, "[dk] %s@%d:Failed to get totalDur\n");
                }
              }
LABEL_188:
              OSNumberPtr v58 = 0;
              OSNumberPtr v125 = 0;
              OSNumberPtr v39 = 0;
              BOOL v129 = v70;
              goto LABEL_208;
            }
          }
          else
          {
            OSNumberPtr v72 = OSNumber::withNumber(v35, 0x20uLL);
            if (!v72)
            {
              uint64_t v126 = v64;
              uint64_t v130 = v47;
              BOOL v70 = v62 == 0;
              if (AppleBCMWLANIOReporting::getLogger(a1))
              {
                AppleBCMWLANIOReporting::getLogger(a1);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v119 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                  CCLogStream::logEmergency(v119, "[dk] %s@%d:Failed to alloc reasonNum\n");
                }
              }
              goto LABEL_188;
            }
            OSNumberPtr v73 = v72;
            *(unsigned char *)(*((void *)a1 + 7) + 50) = 1;
            if (!OSDictionary::setObject(v64, *(const OSObject **)(*((void *)a1 + 7) + 1440), v72))
            {
              uint64_t v126 = v64;
              uint64_t v130 = v47;
              OSNumberPtr v39 = v73;
              if (AppleBCMWLANIOReporting::getLogger(a1))
              {
                AppleBCMWLANIOReporting::getLogger(a1);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v120 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                  CCLogStream::logEmergency(v120, "[dk] %s@%d:Failed to set reasonNum\n", "addDictionaryChannelReasonForLeaving", 4007);
                }
              }
              OSNumberPtr v58 = 0;
              OSNumberPtr v125 = 0;
              BOOL v128 = 1;
              BOOL v129 = v62 == 0;
              goto LABEL_208;
            }
            ((void (*)(OSNumberPtr))v73->release)(v73);
          }
          BOOL v128 = v68;
          uint64_t v74 = OSDictionary::getObject(v64, *(const OSObject **)(*((void *)a1 + 7) + 1424));
          BOOL v75 = v74 == 0;
          if (v74)
          {
            uint64_t v76 = OSDictionary::getObject(v64, *(const OSObject **)(*((void *)a1 + 7) + 1424));
            if (!OSMetaClassBase::safeMetaCast(v76, gOSNumberMetaClass))
            {
              uint64_t v126 = v64;
              uint64_t v130 = v47;
              if (AppleBCMWLANIOReporting::getLogger(a1))
              {
                AppleBCMWLANIOReporting::getLogger(a1);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v77 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                  CCLogStream::logEmergency(v77, "[dk] %s@%d:Failed to get transitions\n");
                }
              }
LABEL_196:
              OSNumberPtr v58 = 0;
              OSNumberPtr v125 = 0;
              OSNumberPtr v39 = 0;
LABEL_201:
              BOOL v129 = v62 == 0;
              goto LABEL_208;
            }
          }
          else
          {
            OSNumberPtr v78 = OSNumber::withNumber(1uLL, 0x40uLL);
            if (!v78)
            {
              uint64_t v126 = v64;
              uint64_t v130 = v47;
              if (AppleBCMWLANIOReporting::getLogger(a1))
              {
                AppleBCMWLANIOReporting::getLogger(a1);
                if (CCLogStream::shouldLog())
                {
                  size_t v121 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                  CCLogStream::logEmergency(v121, "[dk] %s@%d:Failed to alloc transitions\n");
                }
              }
              goto LABEL_196;
            }
            OSNumberPtr v79 = v78;
            *(unsigned char *)(*((void *)a1 + 7) + 50) = 1;
            if (!OSDictionary::setObject(v64, *(const OSObject **)(*((void *)a1 + 7) + 1424), v78))
            {
              OSNumberPtr v125 = v79;
              uint64_t v126 = v64;
              uint64_t v130 = v47;
              if (AppleBCMWLANIOReporting::getLogger(a1))
              {
                AppleBCMWLANIOReporting::getLogger(a1);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v122 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                  CCLogStream::logEmergency(v122, "[dk] %s@%d:Failed to set transitions\n", "addDictionaryChannelReasonForLeaving", 4023);
                }
              }
              OSNumberPtr v58 = 0;
              OSNumberPtr v39 = 0;
              BOOL v127 = 1;
              goto LABEL_201;
            }
            ((void (*)(OSNumberPtr))v79->release)(v79);
          }
          char v80 = OSDictionary::getObject(v64, *(const OSObject **)(*((void *)a1 + 7) + 1416));
          BOOL v81 = v80 == 0;
          if (v80)
          {
            BOOL v82 = OSDictionary::getObject(v64, *(const OSObject **)(*((void *)a1 + 7) + 1416));
            uint64_t v83 = (OSNumber *)OSMetaClassBase::safeMetaCast(v82, gOSNumberMetaClass);
            if (v83)
            {
              if (AppleBCMWLANIOReportingPerSlice::addNumberValue(a1, v83, v64, *(const OSString **)(*((void *)a1 + 7) + 1416), a4))
              {
                if (v62)
                {
LABEL_83:
                  if (!OSDictionary::getObject(v61, v47))
                  {
                    *(unsigned char *)(*((void *)a1 + 7) + 50) = 1;
                    if (!OSDictionary::setObject(v61, v47, v64)) {
                      goto LABEL_145;
                    }
                  }
                  goto LABEL_91;
                }
LABEL_89:
                *(unsigned char *)(*((void *)a1 + 7) + 50) = 1;
                if (!OSDictionary::setObject(v61, v47, v64))
                {
LABEL_145:
                  uint64_t v126 = v64;
                  uint64_t v130 = v47;
                  if (AppleBCMWLANIOReporting::getLogger(a1))
                  {
                    AppleBCMWLANIOReporting::getLogger(a1);
                    if (CCLogStream::shouldLog())
                    {
                      size_t v110 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                      CCLogStream::logEmergency(v110, "[dk] %s@%d:Failed to set reasonDictionary\n", "addDictionaryChannelReasonForLeaving", 4056);
                    }
                  }
                  OSNumberPtr v58 = 0;
                  OSNumberPtr v125 = 0;
                  OSNumberPtr v39 = 0;
                  BOOL v129 = v62 == 0;
                  BOOL v132 = v81;
                  goto LABEL_207;
                }
                ((void (*)(OSDictionary *))v64->release)(v64);
LABEL_91:
                ((void (*)(const OSObject *))v47->release)(v47);
                ((void (*)(OSObject *))aKey->release)(aKey);
                uint64_t v30 = 0;
LABEL_92:
                IOFreeData();
                return v30;
              }
              uint64_t v126 = v64;
              uint64_t v130 = v47;
              if (AppleBCMWLANIOReporting::getLogger(a1))
              {
                AppleBCMWLANIOReporting::getLogger(a1);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v101 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                  CCLogStream::logEmergency(v101, "[dk] %s@%d:Failed to update totalDur\n");
                }
              }
            }
            else
            {
              uint64_t v126 = v64;
              uint64_t v130 = v47;
              if (AppleBCMWLANIOReporting::getLogger(a1))
              {
                AppleBCMWLANIOReporting::getLogger(a1);
                if (CCLogStream::shouldLog())
                {
                  size_t v100 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                  CCLogStream::logEmergency(v100, "[dk] %s@%d:Failed to get totalDur\n");
                }
              }
            }
          }
          else
          {
            OSNumberPtr v84 = OSNumber::withNumber(a4, 0x40uLL);
            if (v84)
            {
              OSNumberPtr v58 = v84;
              *(unsigned char *)(*((void *)a1 + 7) + 50) = 1;
              if (OSDictionary::setObject(v64, *(const OSObject **)(*((void *)a1 + 7) + 1416), v84))
              {
                ((void (*)(OSNumberPtr))v58->release)(v58);
                if (v62) {
                  goto LABEL_83;
                }
                goto LABEL_89;
              }
              uint64_t v126 = v64;
              uint64_t v130 = v47;
              if (AppleBCMWLANIOReporting::getLogger(a1))
              {
                AppleBCMWLANIOReporting::getLogger(a1);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v124 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                  CCLogStream::logEmergency(v124, "[dk] %s@%d:Failed to set totalDur\n", "addDictionaryChannelReasonForLeaving", 4039);
                }
              }
              OSNumberPtr v125 = 0;
              OSNumberPtr v39 = 0;
              BOOL v132 = 1;
LABEL_206:
              BOOL v129 = v62 == 0;
LABEL_207:
              BOOL v127 = v75;
              goto LABEL_208;
            }
            uint64_t v126 = v64;
            uint64_t v130 = v47;
            if (AppleBCMWLANIOReporting::getLogger(a1))
            {
              AppleBCMWLANIOReporting::getLogger(a1);
              if (CCLogStream::shouldLog())
              {
                unint64_t v123 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                CCLogStream::logEmergency(v123, "[dk] %s@%d:Failed to alloc totalDur\n");
              }
            }
          }
          OSNumberPtr v58 = 0;
          OSNumberPtr v125 = 0;
          OSNumberPtr v39 = 0;
          goto LABEL_206;
        }
LABEL_41:
        *(unsigned char *)(*((void *)a1 + 7) + 50) = 1;
        if (!OSDictionary::setObject(v25, v17, v28)) {
          goto LABEL_142;
        }
        ((void (*)(OSDictionary *))v28->release)(v28);
        uint64_t v28 = 0;
        goto LABEL_43;
      }
      uint64_t v126 = v28;
      if (AppleBCMWLANIOReporting::getLogger(a1))
      {
        AppleBCMWLANIOReporting::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v114 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
          CCLogStream::logEmergency(v114, "[dk] %s@%d:Failed to alloc transitions\n");
        }
      }
    }
    OSNumberPtr v58 = 0;
    OSNumberPtr v125 = 0;
    OSNumberPtr v39 = 0;
    BOOL v132 = 0;
    BOOL v127 = 0;
    goto LABEL_208;
  }
  uint64_t v30 = 3758097084;
  if (AppleBCMWLANIOReporting::getLogger(a1))
  {
    AppleBCMWLANIOReporting::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v31 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
      CCLogStream::logEmergency(v31, "[dk] %s@%d:Failed to alloc AutoreleasedBuffer\n", "addDictionaryChannelReasonForLeaving", 3841);
    }
  }
  return v30;
}

uint64_t AppleBCMWLANIOReportingPerSlice::storeChannelSwitch(AppleBCMWLANIOReporting *a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
  unsigned int v11 = 0;
  unsigned int v21 = a2;
  while (((*((unsigned __int8 *)&v21 + ((unint64_t)v11 >> 3)) >> (v11 & 7)) & 1) == 0)
  {
    if (++v11 == 32)
    {
      unsigned int v11 = a2;
      break;
    }
  }
  uint64_t v12 = AppleBCMWLANIOReportingPerSlice::addDictionaryChanspec(a1, a3, a6);
  if (v12)
  {
    uint64_t v15 = v12;
    if (AppleBCMWLANIOReporting::getLogger(a1))
    {
      AppleBCMWLANIOReporting::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
        CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to addDictionaryChanspec");
      }
    }
  }
  else
  {
    uint64_t v13 = AppleBCMWLANIOReportingPerSlice::addDictionaryChannelReasonForJoining(a1, a3, v11, a6);
    if (v13)
    {
      uint64_t v15 = v13;
      if (AppleBCMWLANIOReporting::getLogger(a1))
      {
        AppleBCMWLANIOReporting::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v18 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
          CCLogStream::logEmergency(v18, "[dk] %s@%d:Failed to addDictionaryChannelReasonForJoining");
        }
      }
    }
    else
    {
      uint64_t v14 = AppleBCMWLANIOReportingPerSlice::addDictionaryChanspec(a1, a4, a6);
      if (v14)
      {
        uint64_t v15 = v14;
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            OSDictionaryPtr v19 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(v19, "[dk] %s@%d:Failed to addChannelDictChanspecJoinedLeft");
          }
        }
      }
      else
      {
        uint64_t v15 = AppleBCMWLANIOReportingPerSlice::addDictionaryChannelReasonForLeaving(a1, a4, v11, a5, a6);
        if (v15)
        {
          if (AppleBCMWLANIOReporting::getLogger(a1))
          {
            AppleBCMWLANIOReporting::getLogger(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v20 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
              CCLogStream::logEmergency(v20, "[dk] %s@%d:Failed to addDictionaryChannelReasonForLeaving");
            }
          }
        }
      }
    }
  }
  return v15;
}

uint64_t AppleBCMWLANIOReportingPerSlice::initUpdateReportData(AppleBCMWLANIOReporting *this, uint64_t a2, unsigned int a3, OSObject *aKey)
{
  if (a2 && aKey)
  {
    *(_DWORD *)a2 = a3;
    Object = OSDictionary::getObject(*(const OSDictionary **)(*((void *)this + 7) + 8 * a3 + 968), aKey);
    uint64_t v7 = (const OSDictionary *)OSMetaClassBase::safeMetaCast(Object, gOSDictionaryMetaClass);
    *(void *)(a2 + 16) = v7;
    if (v7)
    {
      uint64_t v8 = OSDictionary::getObject(v7, *(const OSObject **)(*((void *)this + 7) + 1464));
      uint64_t v9 = OSMetaClassBase::safeMetaCast(v8, gOSNumberMetaClass);
      *(void *)(a2 + 8) = v9;
      if (v9)
      {
        uint64_t v10 = OSDictionary::getObject(*(const OSDictionary **)(a2 + 16), *(const OSObject **)(*((void *)this + 7) + 1472));
        *(void *)(a2 + 48) = OSMetaClassBase::safeMetaCast(v10, gIOStateReporterMetaClass);
        unsigned int v11 = OSDictionary::getObject(*(const OSDictionary **)(a2 + 16), *(const OSObject **)(*((void *)this + 7) + 1480));
        *(void *)(a2 + 56) = OSMetaClassBase::safeMetaCast(v11, gIOSimpleReporterMetaClass);
        uint64_t v12 = OSDictionary::getObject(*(const OSDictionary **)(a2 + 16), *(const OSObject **)(*((void *)this + 7) + 1488));
        uint64_t v13 = 0;
        *(void *)(a2 + 64) = OSMetaClassBase::safeMetaCast(v12, gIOSimpleReporterMetaClass);
      }
      else
      {
        uint64_t v13 = 3758097084;
        if (AppleBCMWLANIOReporting::getLogger(this))
        {
          AppleBCMWLANIOReporting::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
            CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to get chanspecNum\n");
          }
        }
      }
    }
    else
    {
      uint64_t v13 = 3758097084;
      if (AppleBCMWLANIOReporting::getLogger(this))
      {
        AppleBCMWLANIOReporting::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          OSStringPtr v16 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
          CCLogStream::logEmergency(v16, "[dk] %s@%d:Failed to get channelDictionary\n");
        }
      }
    }
  }
  else
  {
    uint64_t v13 = 3758097084;
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v15 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logEmergency(v15, "[dk] %s@%d:Invalid ChannelSwitchReport_t pointer\n");
      }
    }
  }
  return v13;
}

uint64_t AppleBCMWLANIOReportingPerSlice::processUpdateLeaveReason(AppleBCMWLANIOReporting *this, unsigned __int8 *a2, OSDictionary *a3, OSObject *aKey)
{
  if (a2 && a3 && aKey)
  {
    Object = OSDictionary::getObject(a3, aKey);
    uint64_t v7 = (const OSDictionary *)OSMetaClassBase::safeMetaCast(Object, gOSDictionaryMetaClass);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = OSDictionary::getObject(v7, *(const OSObject **)(*((void *)this + 7) + 1424));
      uint64_t v10 = OSMetaClassBase::safeMetaCast(v9, gOSNumberMetaClass);
      if (v10)
      {
        unsigned int v11 = (const OSNumber *)v10;
        uint64_t v12 = OSDictionary::getObject(v8, *(const OSObject **)(*((void *)this + 7) + 1440));
        uint64_t v13 = OSMetaClassBase::safeMetaCast(v12, gOSNumberMetaClass);
        if (v13)
        {
          uint64_t v14 = (const OSNumber *)v13;
          uint64_t v15 = *a2;
          unsigned int v16 = OSNumber::unsigned16BitValue(*((const OSNumber **)a2 + 1));
          unsigned __int8 v17 = OSNumber::unsigned32BitValue(v14);
          uint64_t v18 = (IOSimpleReporter *)*((void *)a2 + 8);
          if (v18)
          {
            unint64_t v19 = v16 | (unint64_t)(v15 << 56) | 0x50577452000000 | (v17 << 16);
            uint64_t v20 = OSNumber::unsigned64BitValue(v11);
            IOSimpleReporter::setValue(v18, v19, v20);
            return 0;
          }
          else
          {
            uint64_t v21 = 3758097084;
            if (AppleBCMWLANIOReporting::getLogger(this))
            {
              AppleBCMWLANIOReporting::getLogger(this);
              if (CCLogStream::shouldLog())
              {
                uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
                CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to get switchFromReasonReporter\n");
              }
            }
          }
        }
        else
        {
          uint64_t v21 = 3758097084;
          if (AppleBCMWLANIOReporting::getLogger(this))
          {
            AppleBCMWLANIOReporting::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v25 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
              CCLogStream::logEmergency(v25, "[dk] %s@%d:Failed to get reasonNum\n");
            }
          }
        }
      }
      else
      {
        uint64_t v21 = 3758097084;
        if (AppleBCMWLANIOReporting::getLogger(this))
        {
          AppleBCMWLANIOReporting::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            OSNumberPtr v24 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
            CCLogStream::logEmergency(v24, "[dk] %s@%d:Failed to get transitions\n");
          }
        }
      }
    }
    else
    {
      uint64_t v21 = 3758097084;
      if (AppleBCMWLANIOReporting::getLogger(this))
      {
        AppleBCMWLANIOReporting::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          OSNumberPtr v23 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
          CCLogStream::logEmergency(v23, "[dk] %s@%d:Failed to get reasonDictionary\n");
        }
      }
    }
  }
  else
  {
    uint64_t v21 = 3758097084;
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        OSDictionaryPtr v27 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logEmergency(v27, "[dk] %s@%d:Invalid data for %s()\n");
      }
    }
  }
  return v21;
}

uint64_t AppleBCMWLANIOReportingPerSlice::processUpdateJoinReason(AppleBCMWLANIOReporting *this, unsigned int *a2, OSDictionary *a3, OSObject *aKey)
{
  if (a2 && a3 && aKey)
  {
    Object = OSDictionary::getObject(a3, aKey);
    uint64_t v7 = (const OSDictionary *)OSMetaClassBase::safeMetaCast(Object, gOSDictionaryMetaClass);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = OSDictionary::getObject(v7, *(const OSObject **)(*((void *)this + 7) + 1440));
      uint64_t v10 = OSMetaClassBase::safeMetaCast(v9, gOSNumberMetaClass);
      if (v10)
      {
        unsigned int v11 = (const OSNumber *)v10;
        uint64_t v12 = OSDictionary::getObject(v8, *(const OSObject **)(*((void *)this + 7) + 1416));
        uint64_t v13 = OSMetaClassBase::safeMetaCast(v12, gOSNumberMetaClass);
        if (v13)
        {
          uint64_t v14 = (const OSNumber *)v13;
          uint64_t v15 = OSDictionary::getObject(v8, *(const OSObject **)(*((void *)this + 7) + 1424));
          unsigned int v16 = OSMetaClassBase::safeMetaCast(v15, gOSNumberMetaClass);
          if (v16)
          {
            unsigned __int8 v17 = (const OSNumber *)v16;
            uint64_t v18 = *a2;
            unsigned int v19 = OSNumber::unsigned16BitValue(*((const OSNumber **)a2 + 1));
            unsigned __int8 v20 = OSNumber::unsigned32BitValue(v11);
            uint64_t v21 = (IOSimpleReporter *)*((void *)a2 + 7);
            if (v21)
            {
              unint64_t v22 = v19 | (unint64_t)(v18 << 56) | 0x50457452000000 | (v20 << 16);
              uint64_t v23 = OSNumber::unsigned64BitValue(v17);
              uint64_t v24 = IOSimpleReporter::setValue(v21, v22, v23);
              if (v24)
              {
                if (AppleBCMWLANIOReporting::getLogger(this))
                {
                  AppleBCMWLANIOReporting::getLogger(this);
                  if (CCLogStream::shouldLog())
                  {
                    uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
                    int v39 = *a2;
                    int v40 = OSNumber::unsigned16BitValue(*((const OSNumber **)a2 + 1));
                    unsigned __int8 v41 = OSNumber::unsigned32BitValue(v11);
                    CCLogStream::logNotice(Logger, "[dk] %s@%d:Failed to find switchToReasonReporter->setValue chid %llx slice %d chanspec %u reason %u \n", "processUpdateJoinReason", 4303, v22, v39, v40, v41);
                  }
                }
              }
              if (*((void *)a2 + 6))
              {
                OSNumber::unsigned64BitValue(v14);
                nanoseconds_to_absolutetime();
                uint64_t v25 = (IOStateReporter *)*((void *)a2 + 6);
                uint64_t v26 = *a2;
                unint64_t v27 = OSNumber::unsigned16BitValue(*((const OSNumber **)a2 + 1)) | (unint64_t)(v26 << 56) | 0x50517452000000;
                unint64_t v28 = *((void *)&kStateIDChannelSwitch + 2 * OSNumber::unsigned32BitValue(v11));
                uint64_t v29 = OSNumber::unsigned64BitValue(v17);
                IOStateReporter::overrideChannelState(v25, v27, v28, 0, v29, 0);
                return 0;
              }
              else if (AppleBCMWLANIOReporting::getLogger(this))
              {
                AppleBCMWLANIOReporting::getLogger(this);
                if (CCLogStream::shouldLog())
                {
                  BOOL v36 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
                  CCLogStream::logEmergency(v36, "[dk] %s@%d:Failed to get activitesStateReporter\n");
                }
              }
            }
            else
            {
              uint64_t v24 = 3758097084;
              if (AppleBCMWLANIOReporting::getLogger(this))
              {
                AppleBCMWLANIOReporting::getLogger(this);
                if (CCLogStream::shouldLog())
                {
                  unsigned int v35 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
                  CCLogStream::logEmergency(v35, "[dk] %s@%d:Failed to get switchToReasonReporter\n");
                }
              }
            }
          }
          else
          {
            uint64_t v24 = 3758097084;
            if (AppleBCMWLANIOReporting::getLogger(this))
            {
              AppleBCMWLANIOReporting::getLogger(this);
              if (CCLogStream::shouldLog())
              {
                OSDictionaryPtr v34 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
                CCLogStream::logEmergency(v34, "[dk] %s@%d:Failed to get transitions\n");
              }
            }
          }
        }
        else
        {
          uint64_t v24 = 3758097084;
          if (AppleBCMWLANIOReporting::getLogger(this))
          {
            AppleBCMWLANIOReporting::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              OSNumberPtr v33 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
              CCLogStream::logEmergency(v33, "[dk] %s@%d:Failed to get totalDur\n");
            }
          }
        }
      }
      else
      {
        uint64_t v24 = 3758097084;
        if (AppleBCMWLANIOReporting::getLogger(this))
        {
          AppleBCMWLANIOReporting::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            OSDictionaryPtr v32 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
            CCLogStream::logEmergency(v32, "[dk] %s@%d:Failed to get reasonNum\n");
          }
        }
      }
    }
    else
    {
      uint64_t v24 = 3758097084;
      if (AppleBCMWLANIOReporting::getLogger(this))
      {
        AppleBCMWLANIOReporting::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v31 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
          CCLogStream::logEmergency(v31, "[dk] %s@%d:Failed to get reasonDictionary\n");
        }
      }
    }
  }
  else
  {
    uint64_t v24 = 3758097084;
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v37 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logEmergency(v37, "[dk] %s@%d:Invalid data for %s()\n");
      }
    }
  }
  return v24;
}

uint64_t AppleBCMWLANIOReportingPerSlice::processUpdateChannelReports(AppleBCMWLANIOReporting *this, uint64_t a2, OSString *aKey, _DWORD *a4)
{
  if (aKey && a4)
  {
    unint64_t v51 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v49 = v8;
    long long v50 = v8;
    *(_OWORD *)uint64_t v47 = v8;
    *(_OWORD *)BOOL v48 = v8;
    uint64_t inited = AppleBCMWLANIOReportingPerSlice::initUpdateReportData(this, (uint64_t)v47, a2, aKey);
    if (inited)
    {
      uint64_t updated = inited;
      if (AppleBCMWLANIOReporting::getLogger(this))
      {
        AppleBCMWLANIOReporting::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
          CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to init report data\n");
        }
      }
    }
    else
    {
      Object = OSDictionary::getObject(v48[0], *(const OSObject **)(*((void *)this + 7) + 1408));
      unsigned int v11 = OSMetaClassBase::safeMetaCast(Object, gOSDictionaryMetaClass);
      if (!v11)
      {
LABEL_11:
        uint64_t v31 = OSDictionary::getObject(v48[0], *(const OSObject **)(*((void *)this + 7) + 1448));
        OSDictionaryPtr v32 = (const OSDictionary *)OSMetaClassBase::safeMetaCast(v31, gOSDictionaryMetaClass);
        if (v32)
        {
          OSNumberPtr v33 = OSDictionary::getObject(v32, *(const OSObject **)(*((void *)this + 7) + 1456));
          OSDictionaryPtr v34 = OSMetaClassBase::safeMetaCast(v33, gOSDictionaryMetaClass);
          if (v34)
          {
            uint64_t updated = AppleBCMWLANIOReportingPerSlice::iterateUpdateLeaveReason(this, (uint64_t)v47, (uint64_t)v34);
            if (updated)
            {
              if (AppleBCMWLANIOReporting::getLogger(this))
              {
                AppleBCMWLANIOReporting::getLogger(this);
                if (CCLogStream::shouldLog())
                {
                  BOOL v36 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
                  CCLogStream::logEmergency(v36, "[dk] %s@%d:Failed to iterate SwitchFromReason\n");
                }
              }
            }
            return updated;
          }
          if (AppleBCMWLANIOReporting::getLogger(this))
          {
            AppleBCMWLANIOReporting::getLogger(this);
            uint64_t updated = 0;
            if (!CCLogStream::shouldLog()) {
              return updated;
            }
            unsigned int v43 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
            CCLogStream::logEmergency(v43, "[dk] %s@%d:Failed to get reasonsForLeavingDictionary\n");
          }
        }
        return 0;
      }
      uint64_t v12 = (const OSDictionary *)v11;
      uint64_t v13 = OSDictionary::getObject(v48[1], *(const OSObject **)(*((void *)this + 7) + 1416));
      uint64_t v14 = OSMetaClassBase::safeMetaCast(v13, gOSNumberMetaClass);
      if (!v14)
      {
        if (AppleBCMWLANIOReporting::getLogger(this))
        {
          AppleBCMWLANIOReporting::getLogger(this);
          uint64_t updated = 0;
          if (!CCLogStream::shouldLog()) {
            return updated;
          }
          int v39 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
          CCLogStream::logEmergency(v39, "[dk] %s@%d:Failed to get totalDur\n");
        }
        return 0;
      }
      uint64_t v15 = (const OSNumber *)v14;
      unsigned int v16 = OSDictionary::getObject(v48[1], *(const OSObject **)(*((void *)this + 7) + 1424));
      unsigned __int8 v17 = OSMetaClassBase::safeMetaCast(v16, gOSNumberMetaClass);
      if (!v17)
      {
        if (AppleBCMWLANIOReporting::getLogger(this))
        {
          AppleBCMWLANIOReporting::getLogger(this);
          uint64_t updated = 0;
          if (!CCLogStream::shouldLog()) {
            return updated;
          }
          int v40 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
          CCLogStream::logEmergency(v40, "[dk] %s@%d:Failed to get transitions\n");
        }
        return 0;
      }
      uint64_t v18 = (const OSNumber *)v17;
      AppleBCMWLANChanSpecHandle = (int **)AppleBCMWLANIOReporting::getAppleBCMWLANChanSpecHandle(this);
      uint64_t v20 = OSNumber::unsigned16BitValue(v47[1]);
      LOWORD(AppleBCMWLANChanSpecHandle) = AppleBCMWLANChanSpec::getAppleChannelSpec(AppleBCMWLANChanSpecHandle, v20);
      AppleBCMWLANIOReporting::getAppleBCMWLANChanSpecHandle(this);
      unint64_t v21 = AppleBCMWLANChanSpec::convToStateID((unsigned __int16)AppleBCMWLANChanSpecHandle);
      OSNumber::unsigned64BitValue(v15);
      nanoseconds_to_absolutetime();
      unint64_t v22 = *(IOStateReporter **)(*((void *)this + 7) + 8 * a2 + 992);
      uint64_t v23 = OSNumber::unsigned64BitValue(v18);
      uint64_t v24 = IOStateReporter::overrideChannelState(v22, (a2 << 56) ^ 0x5350537752000000, v21, 0, v23, 0);
      if (v24)
      {
        uint64_t updated = v24;
        if (AppleBCMWLANIOReporting::getLogger(this))
        {
          AppleBCMWLANIOReporting::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            unsigned __int8 v41 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
            OSString::getCStringNoCopy(aKey);
            OSNumber::unsigned64BitValue(v15);
            OSNumber::unsigned64BitValue(v18);
            CCLogStream::logEmergency(v41, "[dk] %s@%d:Failed to ivars->fChanSWResidencyState[sliceIndex]->overrideChannelState %s dur %lldms trans %lld\n");
          }
        }
      }
      else
      {
        ++*a4;
        uint64_t v25 = OSDictionary::getObject(v48[0], *(const OSObject **)(*((void *)this + 7) + 1496));
        uint64_t v26 = OSMetaClassBase::safeMetaCast(v25, gOSNumberMetaClass);
        if (!v26)
        {
          if (AppleBCMWLANIOReporting::getLogger(this))
          {
            AppleBCMWLANIOReporting::getLogger(this);
            uint64_t updated = 0;
            if (!CCLogStream::shouldLog()) {
              return updated;
            }
            BOOL v42 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
            CCLogStream::logEmergency(v42, "[dk] %s@%d:Failed to get lastActivitesStateReporterSizeNum\n");
          }
          return 0;
        }
        unint64_t v27 = (OSNumber *)v26;
        unint64_t v28 = OSDictionary::getObject(v12, *(const OSObject **)(*((void *)this + 7) + 1432));
        uint64_t v29 = OSMetaClassBase::safeMetaCast(v28, gOSDictionaryMetaClass);
        if (!v29)
        {
          if (AppleBCMWLANIOReporting::getLogger(this))
          {
            AppleBCMWLANIOReporting::getLogger(this);
            uint64_t updated = 0;
            if (!CCLogStream::shouldLog()) {
              return updated;
            }
            OSNumberPtr v44 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
            CCLogStream::logEmergency(v44, "[dk] %s@%d:Failed to get reasonsForJoiningDictionary\n");
          }
          return 0;
        }
        uint64_t v30 = AppleBCMWLANIOReportingPerSlice::iterateUpdateJoinReason(this, (uint64_t)v47, (uint64_t)v29, v27);
        if (!v30) {
          goto LABEL_11;
        }
        uint64_t updated = v30;
        if (AppleBCMWLANIOReporting::getLogger(this))
        {
          AppleBCMWLANIOReporting::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            OSStringPtr v46 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
            CCLogStream::logEmergency(v46, "[dk] %s@%d:Failed to iterate SwitchToReason\n");
          }
        }
      }
    }
  }
  else
  {
    uint64_t updated = 3758097084;
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v37 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logEmergency(v37, "[dk] %s@%d:Invalid data for %s()\n");
      }
    }
  }
  return updated;
}

uint64_t AppleBCMWLANIOReportingPerSlice::iterateUpdateJoinReason(AppleBCMWLANIOReporting *a1, uint64_t a2, uint64_t a3, OSNumber *this)
{
  uint64_t v15 = 0;
  unsigned int v16 = &v15;
  uint64_t v17 = 0x2000000000;
  int v18 = -536870212;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2000000000;
  v14[3] = 0;
  uint64_t v8 = OSNumber::unsigned64BitValue(this);
  v13[0] = 0;
  v13[1] = v13;
  void v13[2] = 0x2000000000;
  v13[3] = 0;
  if (a2 && a3 && !this)
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    void v12[2] = ___ZN31AppleBCMWLANIOReportingPerSlice23iterateUpdateJoinReasonEP19ChannelSwitchReportP12OSDictionaryP8OSNumber_block_invoke;
    v12[3] = &__block_descriptor_tmp_1;
    v12[4] = v14;
    v12[7] = a1;
    void v12[8] = v8;
    v12[5] = v13;
    v12[6] = &v15;
    v12[9] = a2;
    unsigned char v12[10] = a3;
    (*(void (**)(uint64_t, void *))(*(void *)a3 + 56))(a3, v12);
  }
  else if (AppleBCMWLANIOReporting::getLogger(a1))
  {
    AppleBCMWLANIOReporting::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
      CCLogStream::logEmergency(Logger, "[dk] %s@%d:Invalid data for %s()\n", "iterateUpdateJoinReason", 4406, "iterateUpdateJoinReason");
    }
  }
  uint64_t v9 = *((unsigned int *)v16 + 6);
  _Block_object_dispose(v13, 8);
  _Block_object_dispose(v14, 8);
  _Block_object_dispose(&v15, 8);
  return v9;
}

uint64_t AppleBCMWLANIOReportingPerSlice::iterateUpdateLeaveReason(AppleBCMWLANIOReporting *this, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2000000000;
  int v12 = -536870212;
  v8[0] = 0;
  v8[1] = v8;
  void v8[2] = 0x2000000000;
  v8[3] = 0;
  if (a2 && a3)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 1107296256;
    void v7[2] = ___ZN31AppleBCMWLANIOReportingPerSlice24iterateUpdateLeaveReasonEP19ChannelSwitchReportP12OSDictionary_block_invoke;
    v7[3] = &__block_descriptor_tmp_128;
    _OWORD v7[4] = v8;
    v7[5] = &v9;
    v7[6] = this;
    v7[7] = a2;
    v7[8] = a3;
    (*(void (**)(uint64_t, void *))(*(void *)a3 + 56))(a3, v7);
  }
  else if (AppleBCMWLANIOReporting::getLogger(this))
  {
    AppleBCMWLANIOReporting::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
      CCLogStream::logEmergency(Logger, "[dk] %s@%d:Invalid data for %s()\n", "iterateUpdateLeaveReason", 4444, "iterateUpdateLeaveReason");
    }
  }
  uint64_t v4 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(v8, 8);
  _Block_object_dispose(&v9, 8);
  return v4;
}

uint64_t ___ZN31AppleBCMWLANIOReportingPerSlice23iterateUpdateJoinReasonEP19ChannelSwitchReportP12OSDictionaryP8OSNumber_block_invoke(uint64_t a1, OSMetaClassBase *anObject)
{
  int v3 = *(AppleBCMWLANIOReporting **)(a1 + 56);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = OSMetaClassBase::safeMetaCast(anObject, gOSStringMetaClass);
  uint64_t v4 = *(OSObject **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (!v4 || *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) >= *(void *)(a1 + 64)) {
    return 0;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = AppleBCMWLANIOReportingPerSlice::processUpdateJoinReason(v3, *(unsigned int **)(a1 + 72), *(OSDictionary **)(a1 + 80), v4);
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) != -536870212)
  {
    ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    return 1;
  }
  uint64_t result = AppleBCMWLANIOReporting::getLogger(v3);
  if (result)
  {
    AppleBCMWLANIOReporting::getLogger(v3);
    int shouldLog = CCLogStream::shouldLog();
    uint64_t result = 0;
    if (shouldLog)
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(v3);
      CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to iterate Configured Channel Reports\n", "iterateUpdateJoinReason_block_invoke", 4421);
      return 0;
    }
  }
  return result;
}

uint64_t ___ZN31AppleBCMWLANIOReportingPerSlice24iterateUpdateLeaveReasonEP19ChannelSwitchReportP12OSDictionary_block_invoke(uint64_t a1, OSMetaClassBase *anObject)
{
  int v3 = *(AppleBCMWLANIOReporting **)(a1 + 48);
  uint64_t result = (uint64_t)OSMetaClassBase::safeMetaCast(anObject, gOSStringMetaClass);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (result)
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = AppleBCMWLANIOReportingPerSlice::processUpdateLeaveReason(v3, *(unsigned __int8 **)(a1 + 56), *(OSDictionary **)(a1 + 64), *(OSObject **)(*(void *)(*(void *)(a1 + 32) + 8)+ 24));
    if (*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) == -536870212)
    {
      uint64_t result = AppleBCMWLANIOReporting::getLogger(v3);
      if (result)
      {
        AppleBCMWLANIOReporting::getLogger(v3);
        int shouldLog = CCLogStream::shouldLog();
        uint64_t result = 0;
        if (shouldLog)
        {
          uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(v3);
          CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to iterate Confgured Channel Reports\n", "iterateUpdateLeaveReason_block_invoke", 4455);
          return 0;
        }
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void __copy_helper_block_8_32r40r(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 32), *(const void **)(a2 + 32), 8);
  uint64_t v4 = *(const void **)(a2 + 40);
  _Block_object_assign((void *)(a1 + 40), v4, 8);
}

void __destroy_helper_block_8_32r40r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 8);
  int v2 = *(const void **)(a1 + 32);
  _Block_object_dispose(v2, 8);
}

uint64_t AppleBCMWLANIOReportingPerSlice::iterateUpdateChannelReports(uint64_t a1, unsigned int a2)
{
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2000000000;
  int v15 = -536870212;
  v11[0] = 0;
  v11[1] = v11;
  void v11[2] = 0x2000000000;
  void v11[3] = 0;
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(v2 + 8 * a2 + 968);
  v9[0] = 0;
  v9[1] = v9;
  void v9[2] = 0x2000000000;
  int v10 = 0;
  LODWORD(v2) = *(_DWORD *)(v2 + 4 * a2 + 1016);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  void v6[2] = ___ZN31AppleBCMWLANIOReportingPerSlice27iterateUpdateChannelReportsE19AppleBCMWLANSliceId_block_invoke;
  v6[6] = &v12;
  v6[7] = a1;
  v6[3] = &__block_descriptor_tmp_131;
  _OWORD v6[4] = v11;
  v6[5] = v9;
  int v7 = v2;
  unsigned int v8 = a2;
  (*(void (**)(uint64_t, void *))(*(void *)v3 + 56))(v3, v6);
  uint64_t v4 = *((unsigned int *)v13 + 6);
  _Block_object_dispose(v9, 8);
  _Block_object_dispose(v11, 8);
  _Block_object_dispose(&v12, 8);
  return v4;
}

uint64_t ___ZN31AppleBCMWLANIOReportingPerSlice27iterateUpdateChannelReportsE19AppleBCMWLANSliceId_block_invoke(uint64_t a1, OSMetaClassBase *anObject)
{
  uint64_t v3 = *(AppleBCMWLANIOReporting **)(a1 + 56);
  uint64_t result = (uint64_t)OSMetaClassBase::safeMetaCast(anObject, gOSStringMetaClass);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (result)
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
    unsigned int v7 = *(_DWORD *)(v5 + 24);
    uint64_t v6 = (_DWORD *)(v5 + 24);
    if (v7 >= *(_DWORD *)(a1 + 64)) {
      return 0;
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = AppleBCMWLANIOReportingPerSlice::processUpdateChannelReports(v3, *(unsigned int *)(a1 + 68), *(OSString **)(*(void *)(*(void *)(a1 + 32) + 8)+ 24), v6);
    if (*(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) == -536870212)
    {
      uint64_t result = AppleBCMWLANIOReporting::getLogger(v3);
      if (result)
      {
        AppleBCMWLANIOReporting::getLogger(v3);
        int shouldLog = CCLogStream::shouldLog();
        uint64_t result = 0;
        if (shouldLog)
        {
          uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(v3);
          CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to iterate Confgured Channel Reports\n", "iterateUpdateChannelReports_block_invoke", 4488);
          return 0;
        }
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t AppleBCMWLANIOReportingPerSlice::updateReportersChannelSwitchReport(AppleBCMWLANIOReportingPerSlice *this)
{
  uint64_t v2 = *((void *)this + 7);
  if (*(unsigned char *)(v2 + 50)) {
    (*(void (**)(void))v2)(*(void *)(v2 + 8));
  }
  uint64_t v3 = 0;
  for (char i = 1; ; char i = 0)
  {
    char v5 = i;
    if (*(void *)(*((void *)this + 7) + 8 * v3 + 968))
    {
      uint64_t updated = AppleBCMWLANIOReportingPerSlice::iterateUpdateChannelReports((uint64_t)this, v3);
      if (updated) {
        break;
      }
    }
    uint64_t v3 = 1;
    if ((v5 & 1) == 0) {
      return 0;
    }
  }
  uint64_t v7 = updated;
  if (AppleBCMWLANIOReporting::getLogger(this))
  {
    AppleBCMWLANIOReporting::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
      CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to iterate channels\n", "updateReportersChannelSwitchReport", 4600);
    }
  }
  return v7;
}

uint64_t AppleBCMWLANIOReportingPerSlice::processConfigureChannelReports(AppleBCMWLANIOReporting *a1, uint64_t a2, OSObject *aKey, int a4)
{
  Object = OSDictionary::getObject(*(const OSDictionary **)(*((void *)a1 + 7) + 8 * a2 + 968), aKey);
  unsigned int v8 = (OSDictionary *)OSMetaClassBase::safeMetaCast(Object, gOSDictionaryMetaClass);
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = AppleBCMWLANIOReportingPerSlice::addPerChannelReporters(a1, v8, a2);
    if (!v10)
    {
      uint64_t v11 = OSDictionary::getObject(v9, *(const OSObject **)(*((void *)a1 + 7) + 1464));
      uint64_t v12 = OSMetaClassBase::safeMetaCast(v11, gOSNumberMetaClass);
      if (v12)
      {
        uint64_t v13 = (const OSNumber *)v12;
        uint64_t v14 = OSDictionary::getObject(v9, *(const OSObject **)(*((void *)a1 + 7) + 1408));
        int v15 = (const OSDictionary *)OSMetaClassBase::safeMetaCast(v14, gOSDictionaryMetaClass);
        if (v15)
        {
          unsigned int v16 = v15;
          uint64_t v17 = OSDictionary::getObject(v15, *(const OSObject **)(*((void *)a1 + 7) + 1416));
          if (OSMetaClassBase::safeMetaCast(v17, gOSNumberMetaClass))
          {
            int v18 = OSDictionary::getObject(v16, *(const OSObject **)(*((void *)a1 + 7) + 1424));
            if (OSMetaClassBase::safeMetaCast(v18, gOSNumberMetaClass))
            {
              if (a4)
              {
                AppleBCMWLANChanSpecHandle = (int **)AppleBCMWLANIOReporting::getAppleBCMWLANChanSpecHandle(a1);
                uint64_t v20 = OSNumber::unsigned16BitValue(v13);
                unsigned __int16 AppleChannelSpec = AppleBCMWLANChanSpec::getAppleChannelSpec(AppleBCMWLANChanSpecHandle, v20);
                AppleBCMWLANIOReporting::getAppleBCMWLANChanSpecHandle(a1);
                unint64_t v22 = AppleBCMWLANChanSpec::convToStateID(AppleChannelSpec);
                uint64_t v23 = IOStateReporter::setStateID(*(IOStateReporter **)(*((void *)a1 + 7) + 8 * a2 + 992), (a2 << 56) ^ 0x5350537752000000, 0, v22);
                uint64_t v24 = 0;
                if (v23)
                {
                  uint64_t v25 = v23;
                  if (AppleBCMWLANIOReporting::getLogger(a1))
                  {
                    AppleBCMWLANIOReporting::getLogger(a1);
                    if (CCLogStream::shouldLog())
                    {
                      uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                      CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to setStateID indx %d id %llu\n", "processConfigureChannelReports", 4852, 0, v22);
                    }
                  }
                  return v25;
                }
                return v24;
              }
            }
            else if (AppleBCMWLANIOReporting::getLogger(a1))
            {
              AppleBCMWLANIOReporting::getLogger(a1);
              uint64_t v24 = 0;
              if (!CCLogStream::shouldLog()) {
                return v24;
              }
              uint64_t v30 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
              CCLogStream::logEmergency(v30, "[dk] %s@%d:Failed to get transitions\n");
            }
          }
          else if (AppleBCMWLANIOReporting::getLogger(a1))
          {
            AppleBCMWLANIOReporting::getLogger(a1);
            uint64_t v24 = 0;
            if (!CCLogStream::shouldLog()) {
              return v24;
            }
            uint64_t v29 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(v29, "[dk] %s@%d:Failed to get totalDur\n");
          }
        }
      }
      else if (AppleBCMWLANIOReporting::getLogger(a1))
      {
        AppleBCMWLANIOReporting::getLogger(a1);
        uint64_t v24 = 0;
        if (!CCLogStream::shouldLog()) {
          return v24;
        }
        unint64_t v28 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
        CCLogStream::logEmergency(v28, "[dk] %s@%d:Failed to get chanspecNum\n");
      }
      return 0;
    }
    uint64_t v24 = v10;
    if (AppleBCMWLANIOReporting::getLogger(a1))
    {
      AppleBCMWLANIOReporting::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        unint64_t v27 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
        CCLogStream::logEmergency(v27, "[dk] %s@%d:Failed to addPerChannelReporters \n");
      }
    }
  }
  else
  {
    uint64_t v24 = 3758097084;
    if (AppleBCMWLANIOReporting::getLogger(a1))
    {
      AppleBCMWLANIOReporting::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v26 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
        CCLogStream::logEmergency(v26, "[dk] %s@%d:Failed to get channelDictionary\n");
      }
    }
  }
  return v24;
}

uint64_t AppleBCMWLANIOReportingPerSlice::addPerChannelReporters(AppleBCMWLANIOReporting *a1, OSDictionary *a2, int a3)
{
  uint64_t v6 = IOMallocZeroData();
  uint64_t v109 = v6;
  long long v110 = xmmword_1003038A0;
  DWORD2(v110) = 4;
  if (!v6) {
    *(void *)&long long v110 = 0;
  }
  uint64_t v107 = IOMallocZeroData();
  long long v108 = xmmword_1003038B0;
  DWORD2(v108) = 4;
  if (!v107) {
    *(void *)&long long v108 = 0;
  }
  uint64_t v106 = (const char **)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)char v104 = v7;
  long long v105 = v7;
  *(_OWORD *)OSDictionaryPtr anObject = v7;
  *(_OWORD *)char v103 = v7;
  if (v6)
  {
    uint64_t v8 = 3758097084;
    *((void *)&v105 + 1) = &v109;
    uint64_t v106 = (const char **)&v107;
    LOWORD(v105) = 0;
    BYTE2(v105) = 0;
    LODWORD(anObject[0]) = a3;
    Object = OSDictionary::getObject(a2, *(const OSObject **)(*((void *)a1 + 7) + 1464));
    v104[0] = (OSNumber *)OSMetaClassBase::safeMetaCast(Object, gOSNumberMetaClass);
    if (v104[0])
    {
      AppleBCMWLANChanSpecHandle = (int **)AppleBCMWLANIOReporting::getAppleBCMWLANChanSpecHandle(a1);
      uint64_t v11 = OSNumber::unsigned16BitValue(v104[0]);
      LOWORD(AppleBCMWLANChanSpecHandle) = AppleBCMWLANChanSpec::getAppleChannelSpec(AppleBCMWLANChanSpecHandle, v11);
      AppleBCMWLANIOReporting::getAppleBCMWLANChanSpecHandle(a1);
      AppleBCMWLANChanSpec::convToAscii((unsigned __int16)AppleBCMWLANChanSpecHandle, (char *)*v106, 0x14u);
      uint64_t v12 = OSDictionary::getObject(a2, *(const OSObject **)(*((void *)a1 + 7) + 1472));
      anObject[1] = OSMetaClassBase::safeMetaCast(v12, gIOStateReporterMetaClass);
      uint64_t v13 = OSDictionary::getObject(a2, *(const OSObject **)(*((void *)a1 + 7) + 1480));
      v103[0] = OSMetaClassBase::safeMetaCast(v13, gIOSimpleReporterMetaClass);
      uint64_t v14 = OSDictionary::getObject(a2, *(const OSObject **)(*((void *)a1 + 7) + 1488));
      v103[1] = OSMetaClassBase::safeMetaCast(v14, gIOSimpleReporterMetaClass);
      int v15 = OSDictionary::getObject(a2, *(const OSObject **)(*((void *)a1 + 7) + 1408));
      unsigned int v16 = OSMetaClassBase::safeMetaCast(v15, gOSDictionaryMetaClass);
      if (!v16)
      {
        BOOL v24 = 0;
        int v25 = 0;
        unint64_t v21 = 0;
        BOOL v26 = 0;
        goto LABEL_42;
      }
      uint64_t v17 = (const OSDictionary *)v16;
      int v18 = OSDictionary::getObject(a2, *(const OSObject **)(*((void *)a1 + 7) + 1496));
      if (v18)
      {
        unsigned int v19 = OSDictionary::getObject(a2, *(const OSObject **)(*((void *)a1 + 7) + 1496));
        uint64_t v20 = OSMetaClassBase::safeMetaCast(v19, gOSNumberMetaClass);
        if (v20)
        {
          unint64_t v21 = (OSNumber *)v20;
          int v22 = 0;
          goto LABEL_18;
        }
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to get lastActivitesStateReporterSizeNum\n");
          }
        }
      }
      else
      {
        OSNumberPtr v27 = OSNumber::withNumber(0, 0x40uLL);
        if (v27)
        {
          unint64_t v21 = v27;
          if (!OSDictionary::setObject(a2, *(const OSObject **)(*((void *)a1 + 7) + 1496), v27))
          {
            if (AppleBCMWLANIOReporting::getLogger(a1))
            {
              AppleBCMWLANIOReporting::getLogger(a1);
              if (CCLogStream::shouldLog())
              {
                uint64_t v99 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                CCLogStream::logEmergency(v99, "[dk] %s@%d:Failed to set lastActivitesStateReporterSizeNum\n", "addPerChannelReporters", 5413);
              }
            }
            BOOL v24 = 0;
            int v25 = 0;
            int v66 = 0;
            goto LABEL_135;
          }
          int v22 = 1;
LABEL_18:
          unint64_t v28 = OSDictionary::getObject(v17, *(const OSObject **)(*((void *)a1 + 7) + 1432));
          uint64_t v29 = OSMetaClassBase::safeMetaCast(v28, gOSDictionaryMetaClass);
          if (v29)
          {
            uint64_t v30 = (uint64_t)v29;
            uint64_t v31 = OSNumber::unsigned64BitValue(v21);
            int v32 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 72))(v30);
            BOOL v24 = v31 != v32;
            if (v31 == v32) {
              goto LABEL_26;
            }
            if (anObject[1])
            {
              Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
              OSSet::removeObject(Reporter, anObject[1]);
              OSDictionary::removeObject(a2, *(const OSObject **)(*((void *)a1 + 7) + 1472));
              anObject[1] = 0;
            }
            uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
            ReporterProvider = (IOStateReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
            unsigned __int16 v36 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 72))(v30);
            anObject[1] = (OSMetaClassBase *)IOStateReporter::with(ReporterProvider, (IOService *)0x8010, v36, 0, v37);
            if (anObject[1])
            {
              OSNumberPtr v38 = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
              if (OSSet::setObject(v38, anObject[1]))
              {
                LOBYTE(v105) = 1;
                if (OSDictionary::setObject(a2, *(const OSObject **)(*((void *)a1 + 7) + 1472), anObject[1]))
                {
                  unsigned int v39 = OSNumber::unsigned16BitValue(v104[0]);
                  uint64_t v8 = IOReporter::addChannel((IOReporter *)anObject[1], v39 | ((unint64_t)LODWORD(anObject[0]) << 56) | 0x50517452000000, "Activities");
                  if (!v8)
                  {
LABEL_26:
                    if (v103[0] || !(*(unsigned int (**)(uint64_t))(*(void *)v30 + 72))(v30))
                    {
                      int v25 = 0;
LABEL_33:
                      uint64_t v44 = AppleBCMWLANIOReportingPerSlice::iteratePerChannelJoinReporters(a1, v30, (uint64_t)anObject);
                      if (!v44)
                      {
                        if ((_BYTE)v105)
                        {
                          OSNumberPtr v45 = *(const OSString **)(*((void *)a1 + 7) + 1496);
                          unsigned int v46 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 72))(v30);
                          OSNumberPtr v47 = AppleBCMWLANIOReportingPerSlice::replaceNumberValue(a1, v21, a2, v45, v46);
                          if (!v47)
                          {
                            if (AppleBCMWLANIOReporting::getLogger(a1))
                            {
                              AppleBCMWLANIOReporting::getLogger(a1);
                              if (CCLogStream::shouldLog())
                              {
                                uint64_t v96 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                                CCLogStream::logEmergency(v96, "[dk] %s@%d:Failed to add value to lastActivitesStateReporterSizeNum\n", "addPerChannelReporters", 5465);
                              }
                            }
                            uint64_t v8 = 0;
                            int v66 = 0;
                            goto LABEL_137;
                          }
                          BOOL v48 = v47;
                          if (!v18)
                          {
                            ((void (*)(OSNumber *))v21->release)(v21);
                            int v22 = 0;
                          }
                          snprintf(**((char ***)&v105 + 1), 0x32uLL, "%s %s", "Channel Switch: Channel", *v106);
                          long long v49 = (void (*)(uint64_t, uint64_t, void, void, const char *))AppleBCMWLANIOReporting::getRemoveReporterCallback(a1);
                          uint64_t Target = AppleBCMWLANIOReporting::getTarget(a1);
                          uint64_t v51 = AppleBCMWLANBssManager::getCurrentBSS(a1);
                          v49(Target, v51, 0, **((void **)&v105 + 1), "Activity Residency");
                          AddReporterCallbacuint64_t k = (void (*)(uint64_t, uint64_t, OSMetaClassBase *, void, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
                          uint64_t v53 = AppleBCMWLANIOReporting::getTarget(a1);
                          uint64_t v54 = AppleBCMWLANBssManager::getCurrentBSS(a1);
                          AddReporterCallback(v53, v54, anObject[1], **((void **)&v105 + 1), "Activity Residency");
                          unint64_t v21 = v48;
                        }
                        BOOL v26 = v22 != 0;
                        if (BYTE1(v105))
                        {
                          snprintf(**((char ***)&v105 + 1), 0x32uLL, "%s %s", "Channel Switch: Channel", *v106);
                          uint64_t v55 = (void (*)(uint64_t, uint64_t, void, void, const char *))AppleBCMWLANIOReporting::getRemoveReporterCallback(a1);
                          uint64_t v56 = AppleBCMWLANIOReporting::getTarget(a1);
                          uint64_t v57 = AppleBCMWLANBssManager::getCurrentBSS(a1);
                          v55(v56, v57, 0, **((void **)&v105 + 1), "Reason to Join");
                          OSNumberPtr v58 = (void (*)(uint64_t, uint64_t, OSMetaClassBase *, void, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
                          uint64_t v59 = AppleBCMWLANIOReporting::getTarget(a1);
                          uint64_t v60 = AppleBCMWLANBssManager::getCurrentBSS(a1);
                          v58(v59, v60, v103[0], **((void **)&v105 + 1), "Reason to Join");
                        }
                        uint64_t v8 = 0;
LABEL_42:
                        char v61 = OSDictionary::getObject(a2, *(const OSObject **)(*((void *)a1 + 7) + 1448));
                        BOOL v62 = (const OSDictionary *)OSMetaClassBase::safeMetaCast(v61, gOSDictionaryMetaClass);
                        if (!v62)
                        {
LABEL_54:
                          if (anObject[1]) {
                            BOOL v78 = v24;
                          }
                          else {
                            BOOL v78 = 0;
                          }
                          if (v78)
                          {
                            ((void (*)(void))anObject[1]->release)();
                            anObject[1] = 0;
                          }
                          char v79 = !v26;
                          if (!v21) {
                            char v79 = 1;
                          }
                          if ((v79 & 1) == 0) {
                            ((void (*)(OSNumber *))v21->release)(v21);
                          }
                          uint64_t v8 = 0;
                          goto LABEL_64;
                        }
                        int v63 = OSDictionary::getObject(v62, *(const OSObject **)(*((void *)a1 + 7) + 1456));
                        char v64 = OSMetaClassBase::safeMetaCast(v63, gOSDictionaryMetaClass);
                        if (v64)
                        {
                          uint64_t v65 = (uint64_t)v64;
                          if (v103[1]
                            || !((unsigned int (*)(OSMetaClassBase *))v64->__vftable[1].Dispatch)(v64))
                          {
                            int v66 = 0;
                            goto LABEL_51;
                          }
                          char v67 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
                          BOOL v68 = (IOSimpleReporter *)IO80211Controller::getReporterProvider(v67);
                          v103[1] = (OSMetaClassBase *)IOSimpleReporter::with(v68, (IOService *)0x8010, 0, v69);
                          if (v103[1])
                          {
                            BOOL v70 = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
                            if (OSSet::setObject(v70, v103[1]))
                            {
                              BYTE2(v105) = 1;
                              if (OSDictionary::setObject(a2, *(const OSObject **)(*((void *)a1 + 7) + 1488), v103[1]))
                              {
                                ((void (*)(OSMetaClassBase *))v103[1]->release)(v103[1]);
                                int v66 = 1;
LABEL_51:
                                uint64_t v71 = AppleBCMWLANIOReportingPerSlice::iteratePerChannelJoinReporters(a1, v65, (uint64_t)anObject);
                                if (!v71)
                                {
                                  if (BYTE2(v105))
                                  {
                                    snprintf(**((char ***)&v105 + 1), 0x32uLL, "%s %s", "Channel Switch: Channel", *v106);
                                    OSNumberPtr v72 = (void (*)(uint64_t, uint64_t, void, void, const char *))AppleBCMWLANIOReporting::getRemoveReporterCallback(a1);
                                    uint64_t v73 = AppleBCMWLANIOReporting::getTarget(a1);
                                    uint64_t v74 = AppleBCMWLANBssManager::getCurrentBSS(a1);
                                    v72(v73, v74, 0, **((void **)&v105 + 1), "Reasons to Leave");
                                    BOOL v75 = (void (*)(uint64_t, uint64_t, OSMetaClassBase *, void, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
                                    uint64_t v76 = AppleBCMWLANIOReporting::getTarget(a1);
                                    uint64_t v77 = AppleBCMWLANBssManager::getCurrentBSS(a1);
                                    v75(v76, v77, v103[1], **((void **)&v105 + 1), "Reasons to Leave");
                                  }
                                  goto LABEL_54;
                                }
                                uint64_t v8 = v71;
                                if (AppleBCMWLANIOReporting::getLogger(a1))
                                {
                                  AppleBCMWLANIOReporting::getLogger(a1);
                                  if (CCLogStream::shouldLog())
                                  {
                                    OSNumberPtr v84 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                                    CCLogStream::logEmergency(v84, "[dk] %s@%d:Failed to iterate perChannel Leaver Reporters\n", "addPerChannelReporters", 5510);
                                    if (!v26) {
                                      goto LABEL_137;
                                    }
                                    goto LABEL_135;
                                  }
                                }
LABEL_134:
                                if (!v26) {
                                  goto LABEL_137;
                                }
                                goto LABEL_135;
                              }
                              if (AppleBCMWLANIOReporting::getLogger(a1))
                              {
                                AppleBCMWLANIOReporting::getLogger(a1);
                                if (CCLogStream::shouldLog())
                                {
                                  uint64_t v101 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                                  CCLogStream::logEmergency(v101, "[dk] %s@%d:Failed to set switchFromReasonReporter\n");
                                }
                              }
                            }
                            else if (AppleBCMWLANIOReporting::getLogger(a1))
                            {
                              AppleBCMWLANIOReporting::getLogger(a1);
                              if (CCLogStream::shouldLog())
                              {
                                uint64_t v92 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                                CCLogStream::logEmergency(v92, "[dk] %s@%d:Failed to getReporter()->setObject(switchFromReasonReporter)\n");
                              }
                            }
                            int v66 = 1;
                            if (!v26)
                            {
LABEL_137:
                              if (v24 && anObject[1])
                              {
                                ((void (*)(OSMetaClassBase *))anObject[1]->release)(anObject[1]);
                                anObject[1] = 0;
                              }
                              if (v103[0]) {
                                int v93 = v25;
                              }
                              else {
                                int v93 = 0;
                              }
                              if (v93 == 1)
                              {
                                ((void (*)(void))v103[0]->release)();
                                v103[0] = 0;
                              }
                              if (v103[1]) {
                                int v94 = v66;
                              }
                              else {
                                int v94 = 0;
                              }
                              if (v94 == 1)
                              {
                                ((void (*)(void))v103[1]->release)();
                                v103[1] = 0;
                              }
                              goto LABEL_64;
                            }
LABEL_135:
                            if (v21) {
                              ((void (*)(OSNumber *))v21->release)(v21);
                            }
                            goto LABEL_137;
                          }
                          if (AppleBCMWLANIOReporting::getLogger(a1))
                          {
                            AppleBCMWLANIOReporting::getLogger(a1);
                            if (CCLogStream::shouldLog())
                            {
                              BOOL v90 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                              CCLogStream::logEmergency(v90, "[dk] %s@%d:Failed to alloc switchFromReasonReporter\n");
                            }
                          }
                        }
                        else if (AppleBCMWLANIOReporting::getLogger(a1))
                        {
                          AppleBCMWLANIOReporting::getLogger(a1);
                          if (CCLogStream::shouldLog())
                          {
                            uint64_t v95 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                            CCLogStream::logEmergency(v95, "[dk] %s@%d:Failed to get reasonsForLeavingDictionary\n");
                          }
                        }
                        int v66 = 0;
                        if (!v26) {
                          goto LABEL_137;
                        }
                        goto LABEL_135;
                      }
                      uint64_t v8 = v44;
                      if (AppleBCMWLANIOReporting::getLogger(a1))
                      {
                        AppleBCMWLANIOReporting::getLogger(a1);
                        if (CCLogStream::shouldLog())
                        {
                          uint64_t v83 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                          CCLogStream::logEmergency(v83, "[dk] %s@%d:Failed to iterate perChannel Join Reporters\n", "addPerChannelReporters", 5459);
                        }
                      }
                      goto LABEL_99;
                    }
                    int v40 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
                    unsigned __int8 v41 = (IOSimpleReporter *)IO80211Controller::getReporterProvider(v40);
                    v103[0] = (OSMetaClassBase *)IOSimpleReporter::with(v41, (IOService *)0x8010, 0, v42);
                    if (v103[0])
                    {
                      unsigned int v43 = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
                      if (OSSet::setObject(v43, v103[0]))
                      {
                        BYTE1(v105) = 1;
                        if (OSDictionary::setObject(a2, *(const OSObject **)(*((void *)a1 + 7) + 1480), v103[0]))
                        {
                          ((void (*)(OSMetaClassBase *))v103[0]->release)(v103[0]);
                          int v25 = 1;
                          goto LABEL_33;
                        }
                        if (AppleBCMWLANIOReporting::getLogger(a1))
                        {
                          AppleBCMWLANIOReporting::getLogger(a1);
                          if (CCLogStream::shouldLog())
                          {
                            size_t v100 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                            CCLogStream::logEmergency(v100, "[dk] %s@%d:Failed to set switchToReasonReporter\n");
                          }
                        }
                      }
                      else if (AppleBCMWLANIOReporting::getLogger(a1))
                      {
                        AppleBCMWLANIOReporting::getLogger(a1);
                        if (CCLogStream::shouldLog())
                        {
                          size_t v91 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                          CCLogStream::logEmergency(v91, "[dk] %s@%d:Failed to getReporter()->setObject(switchToReasonReporter)\n");
                        }
                      }
                      int v66 = 0;
                      int v25 = 1;
                      goto LABEL_133;
                    }
                    if (AppleBCMWLANIOReporting::getLogger(a1))
                    {
                      AppleBCMWLANIOReporting::getLogger(a1);
                      if (CCLogStream::shouldLog())
                      {
                        BOOL v89 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                        CCLogStream::logEmergency(v89, "[dk] %s@%d:Failed to alloc switchToReasonReporter\n", "addPerChannelReporters", 5445);
                      }
                    }
LABEL_98:
                    int v25 = 0;
LABEL_99:
                    int v66 = 0;
LABEL_133:
                    BOOL v26 = v18 == 0;
                    goto LABEL_134;
                  }
                  if (AppleBCMWLANIOReporting::getLogger(a1))
                  {
                    AppleBCMWLANIOReporting::getLogger(a1);
                    if (CCLogStream::shouldLog())
                    {
                      uint64_t v98 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                      CCLogStream::logEmergency(v98, "[dk] %s@%d:Failed to activitesStateReporter->addChannel");
                    }
                  }
                }
                else if (AppleBCMWLANIOReporting::getLogger(a1))
                {
                  AppleBCMWLANIOReporting::getLogger(a1);
                  if (CCLogStream::shouldLog())
                  {
                    BOOL v87 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                    CCLogStream::logEmergency(v87, "[dk] %s@%d:Failed to set activitesStateReporter\n");
                  }
                }
              }
              else if (AppleBCMWLANIOReporting::getLogger(a1))
              {
                AppleBCMWLANIOReporting::getLogger(a1);
                if (CCLogStream::shouldLog())
                {
                  BOOL v86 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                  CCLogStream::logEmergency(v86, "[dk] %s@%d:Failed to getReporter()->setObject(activitesStateReporter)\n");
                }
              }
              int v25 = 0;
              int v66 = 0;
              BOOL v24 = 1;
              goto LABEL_133;
            }
            if (AppleBCMWLANIOReporting::getLogger(a1))
            {
              AppleBCMWLANIOReporting::getLogger(a1);
              if (CCLogStream::shouldLog())
              {
                size_t v97 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                CCLogStream::logEmergency(v97, "[dk] %s@%d:Failed to alloc activitesStateReporter\n");
              }
            }
          }
          else if (AppleBCMWLANIOReporting::getLogger(a1))
          {
            AppleBCMWLANIOReporting::getLogger(a1);
            if (CCLogStream::shouldLog())
            {
              BOOL v82 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
              CCLogStream::logEmergency(v82, "[dk] %s@%d:Failed to get reasonsForJoiningDictionary\n");
            }
          }
          BOOL v24 = 0;
          goto LABEL_98;
        }
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            BOOL v88 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(v88, "[dk] %s@%d:Failed to alloc lastActivitesStateReporterSizeNum\n");
          }
        }
      }
    }
    else if (AppleBCMWLANIOReporting::getLogger(a1))
    {
      AppleBCMWLANIOReporting::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        BOOL v81 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
        CCLogStream::logEmergency(v81, "[dk] %s@%d:Failed to get chanspecNum\n");
      }
    }
  }
  else
  {
    uint64_t v8 = 3758097084;
    if (AppleBCMWLANIOReporting::getLogger(a1))
    {
      AppleBCMWLANIOReporting::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v23 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
        CCLogStream::logEmergency(v23, "[dk] %s@%d:Failed to allocate autoreleased buffers\n");
      }
    }
  }
LABEL_64:
  if (v107) {
    IOFreeData();
  }
  if (v109) {
    IOFreeData();
  }
  return v8;
}

uint64_t AppleBCMWLANIOReportingPerSlice::iterateConfigureChannelReports(uint64_t a1, unsigned int a2, char a3)
{
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2000000000;
  int v13 = -536870212;
  v9[0] = 0;
  v9[1] = v9;
  void v9[2] = 0x2000000000;
  void v9[3] = 0;
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8 * a2 + 968);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  void v6[2] = ___ZN31AppleBCMWLANIOReportingPerSlice30iterateConfigureChannelReportsE19AppleBCMWLANSliceIdb_block_invoke;
  v6[3] = &__block_descriptor_tmp_137;
  _OWORD v6[4] = v9;
  v6[5] = &v10;
  v6[6] = a1;
  unsigned int v7 = a2;
  char v8 = a3;
  (*(void (**)(uint64_t, void *))(*(void *)v3 + 56))(v3, v6);
  uint64_t v4 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(v9, 8);
  _Block_object_dispose(&v10, 8);
  return v4;
}

uint64_t ___ZN31AppleBCMWLANIOReportingPerSlice30iterateConfigureChannelReportsE19AppleBCMWLANSliceIdb_block_invoke(uint64_t a1, OSMetaClassBase *anObject)
{
  uint64_t v3 = *(AppleBCMWLANIOReporting **)(a1 + 48);
  uint64_t result = (uint64_t)OSMetaClassBase::safeMetaCast(anObject, gOSStringMetaClass);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (result)
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = AppleBCMWLANIOReportingPerSlice::processConfigureChannelReports(v3, *(unsigned int *)(a1 + 56), *(OSObject **)(*(void *)(*(void *)(a1 + 32) + 8)+ 24), *(unsigned __int8 *)(a1 + 60));
    if (*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) == -536870212)
    {
      uint64_t result = AppleBCMWLANIOReporting::getLogger(v3);
      if (result)
      {
        AppleBCMWLANIOReporting::getLogger(v3);
        int shouldLog = CCLogStream::shouldLog();
        uint64_t result = 0;
        if (shouldLog)
        {
          uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(v3);
          CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to iterate Confgured Channel Reports\n", "iterateConfigureChannelReports_block_invoke", 4878);
          return 0;
        }
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t AppleBCMWLANIOReportingPerSlice::configureReportersChannelSwitchReport(AppleBCMWLANIOReportingPerSlice *this)
{
  uint64_t v2 = IOMallocZeroData();
  if (!v2)
  {
    uint64_t v6 = 3758097084;
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to alloc AutoreleasedBuffer\n", "configureReportersChannelSwitchReport", 4926);
      }
    }
    return v6;
  }
  uint64_t v3 = (char *)v2;
  uint64_t v4 = 0;
  char v5 = 1;
  uint64_t v6 = 3758097084;
  while (1)
  {
    char v7 = v5;
    uint64_t v8 = *((void *)this + 7);
    uint64_t v9 = *(void *)(v8 + 8 * v4 + 968);
    if (!v9) {
      goto LABEL_14;
    }
    int v10 = *(_DWORD *)(v8 + 4 * v4 + 1016);
    if (v10 == (*(unsigned int (**)(uint64_t))(*(void *)v9 + 72))(v9))
    {
      uint64_t v11 = AppleBCMWLANIOReportingPerSlice::iterateConfigureChannelReports((uint64_t)this, v4, 0);
      uint64_t v6 = 0;
      if (v11) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }
    if (*(void *)(*((void *)this + 7) + 8 * v4 + 992))
    {
      Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(this);
      OSSet::removeObject(Reporter, *(const OSMetaClassBase **)(*((void *)this + 7) + 8 * v4 + 992));
    }
    uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(this);
    ReporterProvider = (IOStateReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
    uint64_t v15 = *(void *)(*((void *)this + 7) + 8 * v4 + 968);
    unsigned __int16 v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 72))(v15);
    *(void *)(*((void *)this + 7) + 8 * v4 + 992) = IOStateReporter::with(ReporterProvider, (IOService *)0x8010, v16, 0, v17);
    if (!*(void *)(*((void *)this + 7) + 8 * v4 + 992)) {
      break;
    }
    int v18 = (OSSet *)AppleBCMWLANIOReporting::getReporter(this);
    if ((OSSet::setObject(v18, *(const OSMetaClassBase **)(*((void *)this + 7) + 8 * v4 + 992)) & 1) == 0)
    {
      if (AppleBCMWLANIOReporting::getLogger(this))
      {
        AppleBCMWLANIOReporting::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v31 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
          CCLogStream::logEmergency(v31, "[dk] %s@%d:Failed to add ivars->fChanSWResidencyState to getReporter()\n");
        }
      }
      goto LABEL_16;
    }
    uint64_t v19 = *(void *)(*((void *)this + 7) + 8 * v4 + 992);
    (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
    uint64_t v20 = IOReporter::addChannel(*(IOReporter **)(*((void *)this + 7) + 8 * v4 + 992), (v4 << 56) ^ 0x5350537752000000, "Residency");
    if (v20)
    {
      uint64_t v6 = v20;
      if (AppleBCMWLANIOReporting::getLogger(this))
      {
        AppleBCMWLANIOReporting::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          int v32 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
          CCLogStream::logEmergency(v32, "[dk] %s@%d:Failed to addChannel");
        }
      }
      goto LABEL_16;
    }
    uint64_t v21 = *(void *)(*((void *)this + 7) + 8 * v4 + 968);
    *(_DWORD *)(*((void *)this + 7) + 4 * v4 + 1016) = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 72))(v21);
    uint64_t v11 = AppleBCMWLANIOReportingPerSlice::iterateConfigureChannelReports((uint64_t)this, v4, 1);
    if (v11)
    {
LABEL_21:
      uint64_t v6 = v11;
      if (AppleBCMWLANIOReporting::getLogger(this))
      {
        AppleBCMWLANIOReporting::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v29 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
          CCLogStream::logEmergency(v29, "[dk] %s@%d:Failed to iterate configure channels");
        }
      }
      goto LABEL_16;
    }
    snprintf(v3, 0x32uLL, "%s %d", "Channel Switch: Slice", v4);
    int v22 = (void (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getRemoveReporterCallback(this);
    uint64_t Target = AppleBCMWLANIOReporting::getTarget(this);
    uint64_t v24 = AppleBCMWLANBssManager::getCurrentBSS(this);
    v22(Target, v24, 0, v3, "Residency");
    AddReporterCallbacuint64_t k = (void (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(this);
    uint64_t v26 = AppleBCMWLANIOReporting::getTarget(this);
    uint64_t v27 = AppleBCMWLANBssManager::getCurrentBSS(this);
    AddReporterCallback(v26, v27, *(void *)(*((void *)this + 7) + 8 * v4 + 992), v3, "Residency");
    uint64_t v6 = 0;
LABEL_14:
    char v5 = 0;
    uint64_t v4 = 1;
    if ((v7 & 1) == 0)
    {
      uint64_t v6 = 0;
      goto LABEL_16;
    }
  }
  if (AppleBCMWLANIOReporting::getLogger(this))
  {
    AppleBCMWLANIOReporting::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v30 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
      CCLogStream::logEmergency(v30, "[dk] %s@%d:Failed to alloc ivars->fChanSWResidencyState\n");
    }
  }
LABEL_16:
  IOFreeData();
  return v6;
}

uint64_t AppleBCMWLANIOReportingPerSlice::processPerChannelJoinReporters(AppleBCMWLANIOReporting *this, OSDictionary *a2, unsigned int *a3)
{
  if (a2)
  {
    Object = OSDictionary::getObject(a2, *(const OSObject **)(*((void *)this + 7) + 1440));
    char v7 = OSMetaClassBase::safeMetaCast(Object, gOSNumberMetaClass);
    if (v7)
    {
      uint64_t v8 = (const OSNumber *)v7;
      uint64_t v9 = OSDictionary::getObject(a2, *(const OSObject **)(*((void *)this + 7) + 1416));
      if (OSMetaClassBase::safeMetaCast(v9, gOSNumberMetaClass))
      {
        int v10 = OSDictionary::getObject(a2, *(const OSObject **)(*((void *)this + 7) + 1424));
        uint64_t v11 = OSMetaClassBase::safeMetaCast(v10, gOSNumberMetaClass);
        if (v11)
        {
          uint64_t v12 = (const OSNumber *)v11;
          uint64_t v13 = *a3;
          unsigned int v14 = OSNumber::unsigned16BitValue(*((const OSNumber **)a3 + 4));
          unint64_t v15 = v14 | (unint64_t)(v13 << 56) | 0x50457452000000 | (OSNumber::unsigned32BitValue(v8) << 16);
          unsigned __int16 v16 = (IOSimpleReporter *)*((void *)a3 + 2);
          uint64_t v17 = OSNumber::unsigned64BitValue(v12);
          if (!IOSimpleReporter::setValue(v16, v15, v17)) {
            goto LABEL_8;
          }
          int v18 = (IOReporter *)*((void *)a3 + 2);
          uint32_t v19 = OSNumber::unsigned32BitValue(v8);
          uint64_t v20 = IOReporter::addChannel(v18, v15, *((const char **)&kSliceChannelSwitchReport + 2 * v19 + 3));
          if (!v20)
          {
            *((unsigned char *)a3 + 49) = 1;
LABEL_8:
            if (!*((unsigned char *)a3 + 48)) {
              return 0;
            }
            uint64_t v21 = (IOStateReporter *)*((void *)a3 + 1);
            uint64_t v22 = *a3;
            unint64_t v23 = OSNumber::unsigned16BitValue(*((const OSNumber **)a3 + 4)) | (unint64_t)(v22 << 56) | 0x50517452000000;
            uint32_t v24 = OSNumber::unsigned32BitValue(v8);
            uint64_t v25 = IOStateReporter::setStateID(v21, v23, 0, *((void *)&kStateIDChannelSwitch + 2 * v24));
            uint64_t v26 = 0;
            if (v25)
            {
              uint64_t v27 = v25;
              if (AppleBCMWLANIOReporting::getLogger(this))
              {
                AppleBCMWLANIOReporting::getLogger(this);
                if (CCLogStream::shouldLog())
                {
                  uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
                  uint32_t v35 = OSNumber::unsigned32BitValue(v8);
                  CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to activitesStateReporter->setStateID %lld rsidency %u chid %lld\n", "processPerChannelJoinReporters", 5150, *((void *)&kStateIDChannelSwitch + 2 * v35), 0, ((unint64_t)*a3 << 56) ^ 0x5350517452000000);
                }
              }
              return v27;
            }
            return v26;
          }
          uint64_t v26 = v20;
          if (AppleBCMWLANIOReporting::getLogger(this))
          {
            AppleBCMWLANIOReporting::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              OSNumberPtr v33 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
              CCLogStream::logEmergency(v33, "[dk] %s@%d:Failed to make channel\n");
            }
          }
        }
        else
        {
          uint64_t v26 = 3758097084;
          if (AppleBCMWLANIOReporting::getLogger(this))
          {
            AppleBCMWLANIOReporting::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              int v32 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
              CCLogStream::logEmergency(v32, "[dk] %s@%d:Failed to get transitions\n");
            }
          }
        }
      }
      else
      {
        uint64_t v26 = 3758097084;
        if (AppleBCMWLANIOReporting::getLogger(this))
        {
          AppleBCMWLANIOReporting::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v31 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
            CCLogStream::logEmergency(v31, "[dk] %s@%d:Failed to get totalDur\n");
          }
        }
      }
    }
    else
    {
      uint64_t v26 = 3758097084;
      if (AppleBCMWLANIOReporting::getLogger(this))
      {
        AppleBCMWLANIOReporting::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v30 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
          CCLogStream::logEmergency(v30, "[dk] %s@%d:Failed to get reasonNum\n");
        }
      }
    }
  }
  else
  {
    uint64_t v26 = 3758097084;
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v29 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logEmergency(v29, "[dk] %s@%d:Failed to get reasonDictionary\n");
      }
    }
  }
  return v26;
}

uint64_t AppleBCMWLANIOReportingPerSlice::iteratePerChannelJoinReporters(AppleBCMWLANIOReporting *this, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2000000000;
  int v13 = -536870212;
  v9[0] = 0;
  v9[1] = v9;
  void v9[2] = 0x2000000000;
  void v9[3] = 0;
  v8[0] = 0;
  v8[1] = v8;
  void v8[2] = 0x2000000000;
  v8[3] = 0;
  if (a2 && a3)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 1107296256;
    void v7[2] = ___ZN31AppleBCMWLANIOReportingPerSlice30iteratePerChannelJoinReportersEP12OSDictionaryP26perChannelJoinReporterData_block_invoke;
    v7[3] = &__block_descriptor_tmp_147;
    _OWORD v7[4] = v9;
    v7[7] = this;
    v7[8] = a2;
    void v7[9] = a3;
    v7[5] = v8;
    v7[6] = &v10;
    (*(void (**)(uint64_t, void *))(*(void *)a2 + 56))(a2, v7);
  }
  else if (AppleBCMWLANIOReporting::getLogger(this))
  {
    AppleBCMWLANIOReporting::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
      CCLogStream::logEmergency(Logger, "[dk] %s@%d:Invalid data for %s()\n", "iteratePerChannelJoinReporters", 5212, "iteratePerChannelJoinReporters");
    }
  }
  uint64_t v4 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(v8, 8);
  _Block_object_dispose(v9, 8);
  _Block_object_dispose(&v10, 8);
  return v4;
}

uint64_t ___ZN31AppleBCMWLANIOReportingPerSlice30iteratePerChannelJoinReportersEP12OSDictionaryP26perChannelJoinReporterData_block_invoke(uint64_t a1, OSMetaClassBase *anObject)
{
  uint64_t v3 = *(AppleBCMWLANIOReporting **)(a1 + 56);
  uint64_t result = (uint64_t)OSMetaClassBase::safeMetaCast(anObject, gOSStringMetaClass);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (result)
  {
    Object = OSDictionary::getObject(*(const OSDictionary **)(a1 + 64), *(const OSObject **)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = OSMetaClassBase::safeMetaCast(Object, gOSDictionaryMetaClass);
    if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
    {
      *(void *)(*(void *)(a1 + 72) + 40) = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = AppleBCMWLANIOReportingPerSlice::processPerChannelJoinReporters(v3, *(OSDictionary **)(*(void *)(*(void *)(a1 + 40) + 8)+ 24), *(unsigned int **)(a1 + 72));
      if (*(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) == -536870212)
      {
        uint64_t result = AppleBCMWLANIOReporting::getLogger(v3);
        if (result)
        {
          AppleBCMWLANIOReporting::getLogger(v3);
          int shouldLog = CCLogStream::shouldLog();
          uint64_t result = 0;
          if (shouldLog)
          {
            uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(v3);
            CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to iterate Configured Channel Reports\n");
            return 0;
          }
        }
      }
      else
      {
        return 1;
      }
    }
    else
    {
      uint64_t result = AppleBCMWLANIOReporting::getLogger(v3);
      if (result)
      {
        AppleBCMWLANIOReporting::getLogger(v3);
        int v8 = CCLogStream::shouldLog();
        uint64_t result = 0;
        if (v8)
        {
          uint64_t v9 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(v3);
          CCLogStream::logEmergency(v9, "[dk] %s@%d:Failed to create reasonDiction\ary\n");
          return 0;
        }
      }
    }
  }
  return result;
}

OSNumberPtr AppleBCMWLANIOReportingPerSlice::replaceNumberValue(AppleBCMWLANIOReportingPerSlice *this, OSNumber *a2, OSDictionary *a3, const OSString *a4, uint64_t a5)
{
  size_t v10 = OSNumber::numberOfBits(a2);
  OSNumberPtr v11 = OSNumber::withNumber(a5, v10);
  atomic_load((unsigned int *)&a2->refcount);
  if (!v11)
  {
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to alloc tmpNum for replaceNumberValue()\n", "replaceNumberValue", 6401);
      }
    }
    return 0;
  }
  OSNumberPtr v12 = v11;
  if (!OSDictionary::setObject(a3, a4, v11))
  {
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v15 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logEmergency(v15, "[dk] %s@%d:Failed to set value for replaceNumberValue()\n", "replaceNumberValue", 6403);
      }
    }
    ((void (*)(OSNumberPtr))v12->release)(v12);
    return 0;
  }
  ((void (*)(OSNumberPtr))v12->release)(v12);
  return v12;
}

uint64_t AppleBCMWLANIOReportingPerSlice::initChanSWReporter(AppleBCMWLANBssManager *a1, unsigned int a2)
{
  int v34 = 0;
  uint64_t v4 = (char *)IOMallocZeroData();
  char v5 = v4;
  if (v4)
  {
    if ((int)a2 < 3)
    {
      snprintf(v4, 0x32uLL, "%s %d", "Channel Switch: Slice", a2);
      uint64_t v6 = *((void *)a1 + 7);
      if (!*(void *)(v6 + 8 * a2 + 896))
      {
        uint64_t v7 = 3758097084;
        uint64_t CurrentBSS = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
        ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(CurrentBSS);
        *(void *)(*((void *)a1 + 7) + 8 * a2 + 896) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v10);
        if (!*(void *)(*((void *)a1 + 7) + 8 * a2 + 896)) {
          goto LABEL_29;
        }
        Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
        if ((OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 896)) & 1) == 0)
        {
          if (AppleBCMWLANIOReporting::getLogger(a1))
          {
            AppleBCMWLANIOReporting::getLogger(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
              CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to add ivars->fAggChanSWReasonsValue");
            }
          }
          goto LABEL_26;
        }
        uint64_t v12 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 896);
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        uint64_t v6 = *((void *)a1 + 7);
      }
      if (!*(void *)(v6 + 8 * a2 + 944))
      {
        int v13 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
        IO80211Controller::getReporterProvider(v13);
        *(void *)(*((void *)a1 + 7) + 8 * a2 + 944) = IOHistogramReporter::with();
        if (!*(void *)(*((void *)a1 + 7) + 8 * a2 + 944))
        {
          uint64_t v7 = 3758097084;
          if (AppleBCMWLANIOReporting::getLogger(a1))
          {
            AppleBCMWLANIOReporting::getLogger(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v27 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
              CCLogStream::logEmergency(v27, "[dk] %s@%d:Failed to allocate histogram reporter");
            }
          }
          goto LABEL_26;
        }
        unsigned int v14 = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
        if ((OSSet::setObject(v14, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 944)) & 1) == 0)
        {
          uint64_t v7 = 3758097084;
          if (AppleBCMWLANIOReporting::getLogger(a1))
          {
            AppleBCMWLANIOReporting::getLogger(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v29 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
              CCLogStream::logEmergency(v29, "[dk] %s@%d:Failed to add ivars->fAggChanDwellTimeHist");
            }
          }
          goto LABEL_26;
        }
        uint64_t v15 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 944);
        (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
        AddReporterCallbacuint64_t k = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
        uint64_t Target = AppleBCMWLANIOReporting::getTarget(a1);
        uint64_t v18 = AppleBCMWLANBssManager::getCurrentBSS(a1);
        uint64_t v19 = AddReporterCallback(Target, v18, *(void *)(*((void *)a1 + 7) + 8 * a2 + 944), v5, "Dwell Time");
        if (v19)
        {
          uint64_t v7 = v19;
          if (AppleBCMWLANIOReporting::getLogger(a1))
          {
            AppleBCMWLANIOReporting::getLogger(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v30 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
              CCLogStream::logEmergency(v30, "[dk] %s@%d:Failed to add legend for ivars->fAggChanDwellTimeHist");
            }
          }
          goto LABEL_26;
        }
        uint64_t v6 = *((void *)a1 + 7);
      }
      if (*(void *)(v6 + 8 * a2 + 872))
      {
LABEL_16:
        if (IOParseBootArgNumber("wlan.debug.chanswlimit", &v34, 4))
        {
          if (AppleBCMWLANIOReporting::getLogger(a1))
          {
            AppleBCMWLANIOReporting::getLogger(a1);
            if (CCLogStream::shouldLog())
            {
              int v32 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
              CCLogStream::logEmergency(v32, "[dk] %s@%d:Found wlan.debug.chanswlimit, enabling enforcement\n", "initChanSWReporter", 5888);
            }
          }
          uint64_t v7 = 0;
          *(unsigned char *)(*((void *)a1 + 7) + 51) = 1;
        }
        else
        {
          uint64_t v7 = 0;
        }
        goto LABEL_26;
      }
      uint64_t v7 = 3758097084;
      uint64_t v20 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
      uint64_t v21 = (IOSimpleReporter *)IO80211Controller::getReporterProvider(v20);
      *(void *)(*((void *)a1 + 7) + 8 * a2 + 872) = IOSimpleReporter::with(v21, (IOService *)0x8010, 0, v22);
      if (*(void *)(*((void *)a1 + 7) + 8 * a2 + 872))
      {
        unint64_t v23 = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
        if ((OSSet::setObject(v23, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a2 + 872)) & 1) == 0)
        {
          if (AppleBCMWLANIOReporting::getLogger(a1))
          {
            AppleBCMWLANIOReporting::getLogger(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v31 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
              CCLogStream::logEmergency(v31, "[dk] %s@%d:Failed to add ivars->fAggChanSWVisitedValue");
            }
          }
          goto LABEL_26;
        }
        uint64_t v24 = *(void *)(*((void *)a1 + 7) + 8 * a2 + 872);
        (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
        goto LABEL_16;
      }
LABEL_29:
      uint64_t v7 = 3758097085;
LABEL_26:
      IOFreeData();
      return v7;
    }
  }
  else if ((int)a2 <= 2)
  {
    uint64_t v7 = 3758097084;
    if (AppleBCMWLANIOReporting::getLogger(a1))
    {
      AppleBCMWLANIOReporting::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v25 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
        CCLogStream::logEmergency(v25, "[dk] %s@%d:Failed to alloc AutoreleasedBuffer\n", "initChanSWReporter", 5841);
      }
    }
    return v7;
  }
  if (AppleBCMWLANIOReporting::getLogger(a1))
  {
    AppleBCMWLANIOReporting::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      OSNumberPtr v33 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
      CCLogStream::logEmergency(v33, "[dk] %s@%d:Out of range slice index %d\n", "initChanSWReporter", 5840, a2);
    }
  }
  uint64_t v7 = 3758097084;
  if (v5) {
    goto LABEL_26;
  }
  return v7;
}

uint64_t AppleBCMWLANIOReportingPerSlice::reportChannelSwitchV1PerSlice(AppleBCMWLANIOReporting *a1, OSData *inData, uint64_t a3)
{
  int bytes = 0;
  char v5 = OSData::withData(inData);
  if (v5)
  {
    uint64_t v6 = v5;
    OSData::appendBytes(v5, &bytes, 4uLL);
    uint64_t v7 = AppleBCMWLANIOReportingPerSlice::reportChannelSwitchV2PerSlice(a1, v6, a3);
    ((void (*)(OSData *))v6->release)(v6);
  }
  else
  {
    uint64_t v7 = 3758097084;
    if (AppleBCMWLANIOReporting::getLogger(a1))
    {
      AppleBCMWLANIOReporting::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
        CCLogStream::logEmergency(Logger, "[dk] %s@%d:Failed to alloc\n", "reportChannelSwitchV1PerSlice", 5906);
      }
    }
  }
  return v7;
}

uint64_t AppleBCMWLANIOReportingPerSlice::reportChannelSwitchV2PerSlice(AppleBCMWLANIOReporting *a1, OSData *this, uint64_t a3)
{
  unsigned int inited = -536870212;
  size_t Length = OSData::getLength(this);
  if ((int)a3 >= 3)
  {
    if (AppleBCMWLANIOReporting::getLogger(a1))
    {
      AppleBCMWLANIOReporting::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
        CCLogStream::logEmergency(Logger, "[dk] %s@%d:Out of range slice index %d\n");
      }
    }
    return -536870212;
  }
  size_t v7 = Length;
  if (OSData::getLength(this) != 28 && OSData::getLength(this) != 24)
  {
    if (AppleBCMWLANIOReporting::getLogger(a1))
    {
      AppleBCMWLANIOReporting::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        BOOL v89 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
        OSData::getLength(this);
        CCLogStream::logEmergency(v89, "[dk] %s@%d:sizeof(wl_chansw_event_log_record...) payload->getLength() %lu\n");
      }
    }
    return -536870212;
  }
  __int16 v105 = -21846;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v104[1] = v8;
  v104[2] = v8;
  v104[0] = v8;
  *(_OWORD *)size_t v100 = v8;
  long long v101 = v8;
  long long v102 = v8;
  __int16 v103 = -21846;
  uint64_t v9 = a3;
  if (*(unsigned char *)(*((void *)a1 + 7) + a3 + 47)) {
    goto LABEL_7;
  }
  unsigned int inited = AppleBCMWLANIOReportingPerSlice::initChanSWReporter(a1, a3);
  if (!inited)
  {
    *(unsigned char *)(*((void *)a1 + 7) + a3 + 47) = 1;
LABEL_7:
    AppleBCMWLANChanSpecHandle = (int **)AppleBCMWLANIOReporting::getAppleBCMWLANChanSpecHandle(a1);
    unsigned __int16 CounterValueSafe = (unsigned __int16)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 4uLL);
    LOWORD(AppleBCMWLANChanSpecHandle) = AppleBCMWLANChanSpec::getAppleChannelSpec(AppleBCMWLANChanSpecHandle, CounterValueSafe);
    AppleBCMWLANIOReporting::getAppleBCMWLANChanSpecHandle(a1);
    AppleBCMWLANChanSpec::convToAscii((unsigned __int16)AppleBCMWLANChanSpecHandle, (char *)v104, 0x32u);
    uint64_t v12 = (int **)AppleBCMWLANIOReporting::getAppleBCMWLANChanSpecHandle(a1);
    unsigned __int16 v13 = (unsigned __int16)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 8uLL);
    LOWORD(v12) = AppleBCMWLANChanSpec::getAppleChannelSpec(v12, v13);
    AppleBCMWLANIOReporting::getAppleBCMWLANChanSpecHandle(a1);
    AppleBCMWLANChanSpec::convToAscii((unsigned __int16)v12, v100, 0x32u);
    unsigned int v14 = *(IOHistogramReporter **)(*((void *)a1 + 7) + 8 * a3 + 944);
    uint64_t v15 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 0x10uLL);
    unsigned int inited = IOHistogramReporter::tallyValue(v14, (uint64_t)v15);
    unsigned int v16 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 0x10uLL);
    unsigned int v17 = v16;
    if (v16 >= 0x418571)
    {
      if (v16 != -1)
      {
        uint64_t v18 = AppleBCMWLANIOReporting::getLogger(a1);
        if (v7 == 28)
        {
          if (v18)
          {
            AppleBCMWLANIOReporting::getLogger(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v96 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
              int v94 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 0);
              uint64_t v19 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 4uLL);
              AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 8uLL);
              AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 0xCuLL);
              AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 0x10uLL);
              AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 0x14uLL);
              AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 0x18uLL);
              CCLogStream::logCrit(v96, "[dk] %s@%d:time %llu old_chanspec %llu %s new_chanspec %llu %s chansw_reason %llu dwell_time %llu core %llu phychanswtime %llu\n", "reportChannelSwitchV2PerSlice", 5983, v94, v19, v104);
            }
          }
        }
        else if (v18)
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v98 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            uint64_t v85 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 0);
            BOOL v86 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 4uLL);
            AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 8uLL);
            AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 0xCuLL);
            AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 0x10uLL);
            AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 0x14uLL);
            CCLogStream::logCrit(v98, "[dk] %s@%d:time %llu old_chanspec %llu %s new_chanspec %llu %s chansw_reason %llu dwell_time %llu core %llu\n", "reportChannelSwitchV2PerSlice", 5972, v85, v86);
          }
        }
      }
      unsigned int v17 = 1;
    }
    uint64_t v20 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * a3 + 872);
    unsigned __int16 v21 = (unsigned __int16)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 8uLL);
    unint64_t v22 = ((unint64_t)a3 << 56) | 0x50537756000000;
    unsigned int inited = IOSimpleReporter::incrementValue(v20, v22 | v21, 1);
    if (inited)
    {
      unint64_t v23 = *(IOReporter **)(*((void *)a1 + 7) + 8 * a3 + 872);
      unsigned __int16 v24 = (unsigned __int16)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 8uLL);
      unsigned int inited = IOReporter::addChannel(v23, v24 | v22, v100);
      if (inited)
      {
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            BOOL v75 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 8uLL);
            CCLogStream::logEmergency(v75, "[dk] %s@%d:failed to add ivars->fAggChanSWVisitedValue slice %d chanspec %d\n");
          }
        }
        return -536870212;
      }
      uint64_t v25 = *(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * a3 + 872);
      unsigned __int16 v26 = (unsigned __int16)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 8uLL);
      unsigned int inited = IOSimpleReporter::incrementValue(v25, v26 | v22, 1);
      if (inited)
      {
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v76 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 8uLL);
            CCLogStream::logEmergency(v76, "[dk] %s@%d:failed to set ivars->fAggChanSWVisitedValue slice %d chanspec %d\n");
          }
        }
        return -536870212;
      }
      uint64_t v27 = (char *)IOMallocZeroData();
      if (!v27)
      {
        if (!AppleBCMWLANIOReporting::getLogger(a1)) {
          return inited;
        }
        AppleBCMWLANIOReporting::getLogger(a1);
        if (!CCLogStream::shouldLog()) {
          return inited;
        }
        goto LABEL_107;
      }
      unint64_t v28 = v27;
      snprintf(v27, 0x32uLL, "%s %d", "Channel Switch: Slice", a3);
      uint64_t v29 = (void (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getRemoveReporterCallback(a1);
      uint64_t Target = AppleBCMWLANIOReporting::getTarget(a1);
      uint64_t CurrentBSS = AppleBCMWLANBssManager::getCurrentBSS(a1);
      v29(Target, CurrentBSS, 0, v28, "Channels Visited");
      AddReporterCallbacuint64_t k = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
      uint64_t v33 = AppleBCMWLANIOReporting::getTarget(a1);
      uint64_t v34 = AppleBCMWLANBssManager::getCurrentBSS(a1);
      unsigned int inited = AddReporterCallback(v33, v34, *(void *)(*((void *)a1 + 7) + 8 * a3 + 872), v28, "Channels Visited");
      IOFreeData();
    }
    uint64_t v35 = a3 << 56;
    if (v7 != 28)
    {
LABEL_35:
      unsigned int inited = IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * a3 + 896), v35 ^ 0x5343685352777878, 1);
      if (inited)
      {
        unsigned int inited = IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a3 + 896), v35 ^ 0x5343685352777878, "Channel Switch Messages");
        if (inited)
        {
          if (!AppleBCMWLANIOReporting::getLogger(a1)) {
            return -536870212;
          }
          AppleBCMWLANIOReporting::getLogger(a1);
          if (!CCLogStream::shouldLog()) {
            return -536870212;
          }
          goto LABEL_92;
        }
        unsigned int inited = IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * a3 + 896), v35 ^ 0x5343685352777878, 1);
        if (inited)
        {
          if (!AppleBCMWLANIOReporting::getLogger(a1)) {
            return -536870212;
          }
          AppleBCMWLANIOReporting::getLogger(a1);
          if (!CCLogStream::shouldLog()) {
            return -536870212;
          }
          goto LABEL_108;
        }
        OSNumberPtr v47 = (char *)IOMallocZeroData();
        if (!v47)
        {
          if (!AppleBCMWLANIOReporting::getLogger(a1)) {
            return inited;
          }
          AppleBCMWLANIOReporting::getLogger(a1);
          if (!CCLogStream::shouldLog()) {
            return inited;
          }
          goto LABEL_107;
        }
        BOOL v48 = v47;
        snprintf(v47, 0x32uLL, "%s %d", "Channel Switch: Slice", a3);
        long long v49 = (void (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getRemoveReporterCallback(a1);
        uint64_t v50 = AppleBCMWLANIOReporting::getTarget(a1);
        uint64_t v51 = AppleBCMWLANBssManager::getCurrentBSS(a1);
        v49(v50, v51, 0, v48, "Channel Switch Reasons");
        BOOL v52 = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
        uint64_t v53 = AppleBCMWLANIOReporting::getTarget(a1);
        uint64_t v54 = AppleBCMWLANBssManager::getCurrentBSS(a1);
        unsigned int inited = v52(v53, v54, *(void *)(*((void *)a1 + 7) + 8 * a3 + 896), v48, "Channel Switch Reasons");
        IOFreeData();
      }
      unsigned int v55 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 0xCuLL);
      if ((v55 & 0xFFFFFFE0) != 0) {
        uint64_t v56 = 1;
      }
      else {
        uint64_t v56 = v55 + 1;
      }
      unint64_t v57 = *((void *)&kSliceChannelSwitchReport + 2 * v56) ^ v35;
      unsigned int inited = IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * a3 + 896), v57, 1);
      if (!inited) {
        goto LABEL_48;
      }
      unsigned int inited = IOReporter::addChannel(*(IOReporter **)(*((void *)a1 + 7) + 8 * a3 + 896), v57, *((const char **)&kSliceChannelSwitchReport + 2 * v56 + 1));
      if (!inited)
      {
        unsigned int inited = IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*((void *)a1 + 7) + 8 * a3 + 896), v57, 1);
        if (!inited)
        {
          OSNumberPtr v58 = (char *)IOMallocZeroData();
          if (v58)
          {
            uint64_t v59 = v58;
            snprintf(v58, 0x32uLL, "%s %d", "Channel Switch: Slice", a3);
            uint64_t v60 = (void (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getRemoveReporterCallback(a1);
            uint64_t v61 = AppleBCMWLANIOReporting::getTarget(a1);
            uint64_t v62 = AppleBCMWLANBssManager::getCurrentBSS(a1);
            v60(v61, v62, 0, v59, "Channel Switch Reasons");
            int v63 = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
            uint64_t v64 = AppleBCMWLANIOReporting::getTarget(a1);
            uint64_t v65 = AppleBCMWLANBssManager::getCurrentBSS(a1);
            unsigned int inited = v63(v64, v65, *(void *)(*((void *)a1 + 7) + 8 * a3 + 896), v59, "Channel Switch Reasons");
            IOFreeData();
LABEL_48:
            unsigned int v66 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 0xCuLL);
            unsigned __int16 v67 = (unsigned __int16)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 8uLL);
            unsigned __int16 v68 = (unsigned __int16)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 4uLL);
            unsigned int inited = AppleBCMWLANIOReportingPerSlice::storeChannelSwitch(a1, v66, v67, v68, v17, a3);
            if (!inited)
            {
              int v69 = *(unsigned __int16 *)(*((void *)a1 + 7) + 2 * a3 + 1040);
              if (v69 != (unsigned __int16)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 4uLL)&& *(_WORD *)(*((void *)a1 + 7) + 2 * v9 + 1040))
              {
                BOOL v70 = (int **)AppleBCMWLANIOReporting::getAppleBCMWLANChanSpecHandle(a1);
                unsigned __int16 v71 = (unsigned __int16)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 4uLL);
                LOWORD(v70) = AppleBCMWLANChanSpec::getAppleChannelSpec(v70, v71);
                AppleBCMWLANIOReporting::getAppleBCMWLANChanSpecHandle(a1);
                AppleBCMWLANChanSpec::convToAscii((unsigned __int16)v70, (char *)v104, 0x32u);
                OSNumberPtr v72 = (int **)AppleBCMWLANIOReporting::getAppleBCMWLANChanSpecHandle(a1);
                LOWORD(v70) = AppleBCMWLANChanSpec::getAppleChannelSpec(v72, *(unsigned __int16 *)(*((void *)a1 + 7) + 2 * v9 + 1040));
                AppleBCMWLANIOReporting::getAppleBCMWLANChanSpecHandle(a1);
                AppleBCMWLANChanSpec::convToAscii((unsigned __int16)v70, v100, 0x32u);
              }
              *(_WORD *)(*((void *)a1 + 7) + 2 * v9 + 1040) = (unsigned __int16)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 8uLL);
              return inited;
            }
            if (AppleBCMWLANIOReporting::getLogger(a1))
            {
              AppleBCMWLANIOReporting::getLogger(a1);
              if (CCLogStream::shouldLog())
              {
                uint64_t v77 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
                AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 8uLL);
                CCLogStream::logEmergency(v77, "[dk] %s@%d:failed to storeChannelSwitch slice %d chanspec %d\n");
              }
            }
            return -536870212;
          }
          if (!AppleBCMWLANIOReporting::getLogger(a1)) {
            return inited;
          }
          AppleBCMWLANIOReporting::getLogger(a1);
          if (!CCLogStream::shouldLog()) {
            return inited;
          }
LABEL_107:
          BOOL v88 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
          CCLogStream::logEmergency(v88, "[dk] %s@%d:Failed to alloc AutoreleasedBuffer\n");
          return inited;
        }
        if (!AppleBCMWLANIOReporting::getLogger(a1)) {
          return -536870212;
        }
        AppleBCMWLANIOReporting::getLogger(a1);
        if (!CCLogStream::shouldLog()) {
          return -536870212;
        }
LABEL_108:
        BOOL v90 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
        AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 8uLL);
        CCLogStream::logEmergency(v90, "[dk] %s@%d:failed to set ivars->fAggChanSWReasonsValue slice %d chanspec %d\n");
        return -536870212;
      }
      if (!AppleBCMWLANIOReporting::getLogger(a1)) {
        return -536870212;
      }
      AppleBCMWLANIOReporting::getLogger(a1);
      if (!CCLogStream::shouldLog()) {
        return -536870212;
      }
LABEL_92:
      char v79 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
      AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 8uLL);
      CCLogStream::logEmergency(v79, "[dk] %s@%d:failed to add ivars->fAggChanSWReasonsValue slice %d chanspec %d\n");
      return -536870212;
    }
    unsigned __int16 v36 = *(IOHistogramReporter **)(*((void *)a1 + 7) + 8 * a3 + 920);
    if (v36)
    {
LABEL_29:
      OSNumberPtr v45 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 0x18uLL);
      IOHistogramReporter::tallyValue(v36, (uint64_t)v45);
      if ((unint64_t)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 0x18uLL) >= 0xFA1)
      {
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            size_t v97 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            uint64_t v95 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 0);
            int v93 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 4uLL);
            char v80 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 8uLL);
            BOOL v81 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 0xCuLL);
            BOOL v82 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 0x10uLL);
            uint64_t v83 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 0x14uLL);
            OSNumberPtr v84 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&inited, (int *)4, this, 0x18uLL);
            CCLogStream::logInfo(v97, "[dk] %s@%d:time %llu old_chanspec %llu %s new_chanspec %llu %s chansw_reason %llu dwell_time %llu core %llu phychanswtime %llu\n", "reportChannelSwitchV2PerSlice", 6058, v95, v93, (const char *)v104, v80, v100, v81, v82, v83, v84);
          }
        }
        if (*(unsigned char *)(*((void *)a1 + 7) + 51))
        {
          CCFaultReporter = (CCFaultReporter *)AppleBCMWLANIOReporting::getCCFaultReporter(a1);
          CCFaultReporter::reportFault(CCFaultReporter, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANIOReportingPerSlice.cpp", 0x17ACu, "reportChannelSwitchV2PerSlice", 0, -469794296, "phychanswtime too long");
        }
      }
      goto LABEL_35;
    }
    unint64_t v37 = (char *)IOMallocZeroData();
    if (!v37)
    {
      if (!AppleBCMWLANIOReporting::getLogger(a1)) {
        return inited;
      }
      AppleBCMWLANIOReporting::getLogger(a1);
      if (!CCLogStream::shouldLog()) {
        return inited;
      }
      goto LABEL_107;
    }
    OSNumberPtr v38 = v37;
    snprintf(v37, 0x32uLL, "%s %d", "Channel Switch: Slice", a3);
    unsigned int v39 = (IO80211Controller *)AppleBCMWLANBssManager::getCurrentBSS(a1);
    IO80211Controller::getReporterProvider(v39);
    *(void *)(*((void *)a1 + 7) + 8 * a3 + 920) = IOHistogramReporter::with();
    if (*(void *)(*((void *)a1 + 7) + 8 * a3 + 920))
    {
      Reporter = (OSSet *)AppleBCMWLANIOReporting::getReporter(a1);
      if (OSSet::setObject(Reporter, *(const OSMetaClassBase **)(*((void *)a1 + 7) + 8 * a3 + 920)))
      {
        uint64_t v41 = *(void *)(*((void *)a1 + 7) + 8 * a3 + 920);
        (*(void (**)(uint64_t))(*(void *)v41 + 16))(v41);
        unint64_t v42 = (uint64_t (*)(uint64_t, uint64_t, void, char *, const char *))AppleBCMWLANIOReporting::getAddReporterCallback(a1);
        uint64_t v43 = AppleBCMWLANIOReporting::getTarget(a1);
        uint64_t v44 = AppleBCMWLANBssManager::getCurrentBSS(a1);
        unsigned int inited = v42(v43, v44, *(void *)(*((void *)a1 + 7) + 8 * a3 + 920), v38, "Phy Switch Time");
        if (!inited)
        {
          IOFreeData();
          unsigned __int16 v36 = *(IOHistogramReporter **)(*((void *)a1 + 7) + 8 * a3 + 920);
          goto LABEL_29;
        }
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v92 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(v92, "[dk] %s@%d:Failed to add legend for ivars->fAggPhyChanSwitchTimeHist", "reportChannelSwitchV2PerSlice", 6042);
          }
        }
LABEL_106:
        IOFreeData();
        return inited;
      }
      if (AppleBCMWLANIOReporting::getLogger(a1))
      {
        AppleBCMWLANIOReporting::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          size_t v91 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
          CCLogStream::logEmergency(v91, "[dk] %s@%d:Failed to add ivars->fAggPhyChanSwitchTimeHist");
        }
      }
    }
    else if (AppleBCMWLANIOReporting::getLogger(a1))
    {
      AppleBCMWLANIOReporting::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        BOOL v87 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
        CCLogStream::logEmergency(v87, "[dk] %s@%d:Failed to allocate histogram reporter");
      }
    }
    unsigned int inited = -536870212;
    goto LABEL_106;
  }
  if (AppleBCMWLANIOReporting::getLogger(a1))
  {
    AppleBCMWLANIOReporting::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      BOOL v78 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
      CCLogStream::logEmergency(v78, "[dk] %s@%d:Failed to initiate ChanSW reporter\n");
    }
  }
  return inited;
}

uint64_t AppleBCMWLANIOReportingPerSlice::collectImmediateFaultDataCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 56);
  uint64_t v5 = v4[121];
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    OSStringPtr v6 = OSString::withCString("ivars->fChannelSwitchDictionary[0].xml");
    (*(void (**)(uint64_t, OSStringPtr, void))(*(void *)a2 + 192))(a2, v6, *(void *)(*(void *)(a1 + 56) + 968));
    uint64_t v4 = *(void **)(a1 + 56);
  }
  uint64_t v7 = v4[122];
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    OSStringPtr v8 = OSString::withCString("ivars->fChannelSwitchDictionary[1].xml");
    (*(void (**)(uint64_t, OSStringPtr, void))(*(void *)a2 + 192))(a2, v8, *(void *)(*(void *)(a1 + 56) + 976));
    uint64_t v4 = *(void **)(a1 + 56);
  }
  uint64_t v9 = v4[123];
  if (v9)
  {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    OSStringPtr v10 = OSString::withCString("ivars->fChannelSwitchDictionary[2].xml");
    (*(void (**)(uint64_t, OSStringPtr, void))(*(void *)a2 + 192))(a2, v10, *(void *)(*(void *)(a1 + 56) + 984));
  }
  return 0;
}

uint64_t AppleBCMWLANIOReportingPerSlice::createDefaultReportersAndLegend(AppleBCMWLANIOReportingPerSlice *this)
{
  return 1;
}

uint64_t non-virtual thunk to'AppleBCMWLANIOReportingPerSlice::createDefaultReportersAndLegend(AppleBCMWLANIOReportingPerSlice *this)
{
  return 1;
}

uint64_t AppleBCMWLANIOReportingPerSlice::configureReport(AppleBCMWLANIOReportingPerSlice *this, OSCollection *a2, OSData *a3, unsigned int *a4)
{
  uint64_t v8 = (*(uint64_t (**)(AppleBCMWLANIOReportingPerSlice *))(*(void *)this + 72))(this);
  if (v8)
  {
    uint64_t v10 = v8;
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logAlert(Logger, "[dk] %s@%d: Failed configureAllReports 0x%x\n", "configureReport", 6179, v10);
      }
    }
  }
  else
  {
    uint64_t v10 = AppleBCMWLANIOReporting::configureReport((OSObject *)this, a2, a3, a4, v9);
    if (v10)
    {
      if (AppleBCMWLANIOReporting::getLogger(this))
      {
        AppleBCMWLANIOReporting::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          unsigned __int16 v13 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
          ClassNameHelper = (const char *)getClassNameHelper((OSObject *)this);
          CCLogStream::logEmergency(v13, "[dk] %s@%d:DKReporter::%s::%s(%d) AppleBCMWLANIOReporting::configureReport failed", "configureReport", 6186, ClassNameHelper, "configureReport", 6186);
        }
      }
    }
  }
  return v10;
}

uint64_t AppleBCMWLANIOReportingPerSlice::updateReport(AppleBCMWLANIOReportingPerSlice *this, OSCollection *a2, OSData *a3, unsigned int *a4, unint64_t *a5, unint64_t *a6, IOMemoryDescriptor *a7)
{
  uint64_t v14 = (*(uint64_t (**)(AppleBCMWLANIOReportingPerSlice *))(*(void *)this + 80))(this);
  if (v14)
  {
    uint64_t v15 = v14;
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logWarn(Logger, "[dk] %s@%d: Failed updateAllReports 0x%x\n", "updateReport", 6203, v15);
      }
    }
    return v15;
  }
  else
  {
    return AppleBCMWLANIOReporting::updateReport((OSObject *)this, a2, a3, a4, a5, a6, a7);
  }
}

uint64_t AppleBCMWLANIOReportingPerSlice::configureAllReports(AppleBCMWLANIOReportingPerSlice *this)
{
  uint64_t v1 = *((void *)this + 7);
  if (!*(unsigned char *)(v1 + 1046) || !*(unsigned char *)(v1 + 50)) {
    return 0;
  }
  uint64_t result = AppleBCMWLANIOReportingPerSlice::configureReportersChannelSwitchReport(this);
  *(unsigned char *)(*((void *)this + 7) + 50) = 0;
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANIOReportingPerSlice::configureAllReports(AppleBCMWLANIOReportingPerSlice *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (!*(unsigned char *)(v1 + 1046) || !*(unsigned char *)(v1 + 50)) {
    return 0;
  }
  uint64_t result = AppleBCMWLANIOReportingPerSlice::configureReportersChannelSwitchReport((AppleBCMWLANIOReportingPerSlice *)((char *)this - 40));
  *(unsigned char *)(*((void *)this + 2) + 50) = 0;
  return result;
}

uint64_t AppleBCMWLANIOReportingPerSlice::updateAllReports(AppleBCMWLANIOReportingPerSlice *this)
{
  uint64_t v2 = AppleBCMWLANIOReportingPerSlice::reportScanPwrStatsSinceLinkUp(this, 0, *(unsigned __int8 *)(*((void *)this + 7) + 1404));
  if (v2)
  {
    uint64_t updated = v2;
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logWarn(Logger, "[dk] %s@%d: Failed reportScanPwrStatsSinceLinkUp AppleBCMWLANSliceId0 0x%x\n");
      }
    }
    return updated;
  }
  uint64_t v5 = AppleBCMWLANIOReportingPerSlice::reportScanPwrStatsSinceLinkUp(this, 1, *(unsigned __int8 *)(*((void *)this + 7) + 1404));
  if (v5)
  {
    uint64_t updated = v5;
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v12 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logWarn(v12, "[dk] %s@%d: Failed reportScanPwrStatsSinceLinkUp AppleBCMWLANSliceId1 0x%x\n");
      }
    }
    return updated;
  }
  uint64_t v7 = *((void *)this + 7);
  unsigned int v8 = *(unsigned __int8 *)(v7 + 1404);
  if (v8 >= 3)
  {
    uint64_t v9 = AppleBCMWLANIOReportingPerSlice::reportScanPwrStatsSinceLinkUp(this, 2, v8);
    if (v9)
    {
      uint64_t updated = v9;
      if (AppleBCMWLANIOReporting::getLogger(this))
      {
        AppleBCMWLANIOReporting::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v10 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
          CCLogStream::logWarn(v10, "[dk] %s@%d: Failed reportScanPwrStatsSinceLinkUp AppleBCMWLANSliceId2 0x%x\n");
        }
      }
      return updated;
    }
    uint64_t v7 = *((void *)this + 7);
  }
  if (!*(unsigned char *)(v7 + 1046)) {
    return 0;
  }
  uint64_t updated = AppleBCMWLANIOReportingPerSlice::updateReportersChannelSwitchReport(this);
  if (updated)
  {
    if (AppleBCMWLANIOReporting::getLogger(this))
    {
      AppleBCMWLANIOReporting::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        OSNumberPtr v11 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(this);
        CCLogStream::logWarn(v11, "[dk] %s@%d: Failed updateReportersChannelSwitchReport 0x%x\n");
      }
    }
  }
  return updated;
}

uint64_t non-virtual thunk to'AppleBCMWLANIOReportingPerSlice::updateAllReports(AppleBCMWLANIOReportingPerSlice *this)
{
  return AppleBCMWLANIOReportingPerSlice::updateAllReports((AppleBCMWLANIOReportingPerSlice *)((char *)this - 40));
}

uint64_t AppleBCMWLANIOReportingPerSlice::init(AppleBCMWLANIOReporting *a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 48);
  void v11[2] = *(_OWORD *)(a2 + 32);
  void v11[3] = v4;
  uint64_t v12 = *(void *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v5;
  uint64_t result = AppleBCMWLANIOReporting::init((uint64_t)a1, (uint64_t)v11);
  if (result)
  {
    uint64_t result = IOMallocZeroTyped();
    *((void *)a1 + 7) = result;
    if (result)
    {
      *(unsigned char *)(result + 1404) = 2;
      uint64_t v7 = (void *)*((void *)a1 + 7);
      v7[176] = OSString::withCString("joinedStats");
      v7[177] = OSString::withCString("totalDur");
      v7[178] = OSString::withCString("transitions");
      v7[179] = OSString::withCString("reasonForJoin");
      v7[180] = OSString::withCString("reasonNumber");
      v7[181] = OSString::withCString("leftStats");
      v7[182] = OSString::withCString("reasonForLeave");
      v7[183] = OSString::withCString("chanspec");
      v7[184] = OSString::withCString("activitiesStateReporter");
      v7[185] = OSString::withCString("switchToReasonReporter");
      v7[186] = OSString::withCString("switchFromReasonReporter");
      v7[187] = OSString::withCString("lastactivitiesStateReporterSize");
      *(unsigned char *)(*((void *)a1 + 7) + 1046) = 0;
      if (IOParseBootArgNumber("wlan.chswitchreport", (void *)(*((void *)a1 + 7) + 1046), 1))
      {
        if (AppleBCMWLANIOReporting::getLogger(a1))
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t Logger = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(Logger, "[dk] %s@%d:wlan.chswitchreport is %d \n", "init", 6336, *(unsigned __int8 *)(*((void *)a1 + 7) + 1046));
          }
        }
      }
      *(void *)(*((void *)a1 + 7) + 1504) = OSMetaClassBase::safeMetaCast(*(const OSMetaClassBase **)(a2 + 8), (const OSMetaClass *)gAppleBCMWLANCoreMetaClass);
      if (*(void *)(*((void *)a1 + 7) + 1504))
      {
        return (*(uint64_t (**)(AppleBCMWLANIOReporting *))(*(void *)a1 + 64))(a1);
      }
      else
      {
        uint64_t result = AppleBCMWLANIOReporting::getLogger(a1);
        if (result)
        {
          AppleBCMWLANIOReporting::getLogger(a1);
          int shouldLog = CCLogStream::shouldLog();
          uint64_t result = 0;
          if (shouldLog)
          {
            uint64_t v9 = (CCLogStream *)AppleBCMWLANIOReporting::getLogger(a1);
            CCLogStream::logEmergency(v9, "[dk] %s@%d:Bad fProvider\n", "init", 6340);
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANIOReportingPerSlice::init(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANIOReportingPerSlice::init((AppleBCMWLANIOReporting *)(a1 - 40), a2);
}

AppleBCMWLANIOReporting *AppleBCMWLANIOReportingPerSlice::with(uint64_t a1)
{
  v6[0] = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANIOReportingPerSliceMetaClass, v6))
  {
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = (AppleBCMWLANIOReporting *)v6[0];
    if (v6[0])
    {
      long long v4 = *(_OWORD *)(a1 + 16);
      v9[0] = *(_OWORD *)a1;
      v9[1] = v4;
      uint64_t v10 = *(void *)(a1 + 64);
      long long v5 = *(_OWORD *)(a1 + 48);
      void v9[2] = *(_OWORD *)(a1 + 32);
      void v9[3] = v5;
      if ((((uint64_t (*)(OSObject *, _OWORD *))v6[0]->OSMetaClassBase::__vftable[1].getMetaClass)(v6[0], v9) & 1) == 0)
      {
        (*(void (**)(AppleBCMWLANIOReporting *))(*(void *)v2 + 16))(v2);
        return 0;
      }
    }
  }
  uint64_t v8 = 0;
  v6[0] = 0;
  long long v7 = 0u;
  v6[1] = (OSObject *)AppleBCMWLANIOReportingPerSlice::collectImmediateFaultDataCallback;
  AppleBCMWLANIOReporting::getCCFaultReporter(v2);
  getClassNameHelper((OSObject *)v2);
  CCFaultReporter::registerCallbacks();
  return v2;
}

void AppleBCMWLANIOReportingPerSlice::free(OSObject *this)
{
  meta = this[1].meta;
  if (meta)
  {
    uint64_t v3 = meta[44].__vftable;
    if (v3)
    {
      (*((void (**)(OSMetaClass_vtbl *))v3->getMetaClass + 2))(v3);
      meta[44].__vftable = 0;
    }
    uint64_t v4 = *(void *)&meta[44].refcount;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
      *(void *)&meta[44].refcount = 0;
    }
    long long v5 = meta[44].meta;
    if (v5)
    {
      ((void (*)(OSMetaClass *))v5->release)(v5);
      meta[44].meta = 0;
    }
    metaClassPrivate = meta[44].metaClassPrivate;
    if (metaClassPrivate)
    {
      (*(void (**)(OSMetaClassPrivate *))(*(void *)metaClassPrivate + 16))(metaClassPrivate);
      meta[44].metaClassPrivate = 0;
    }
    long long v7 = meta[45].__vftable;
    if (v7)
    {
      (*((void (**)(OSMetaClass_vtbl *))v7->getMetaClass + 2))(v7);
      meta[45].__vftable = 0;
    }
    uint64_t v8 = *(void *)&meta[45].refcount;
    if (v8)
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
      *(void *)&meta[45].refcount = 0;
    }
    uint64_t v9 = meta[45].meta;
    if (v9)
    {
      ((void (*)(OSMetaClass *))v9->release)(v9);
      meta[45].meta = 0;
    }
    uint64_t v10 = meta[45].metaClassPrivate;
    if (v10)
    {
      (*(void (**)(OSMetaClassPrivate *))(*(void *)v10 + 16))(v10);
      meta[45].metaClassPrivate = 0;
    }
    OSNumberPtr v11 = meta[46].__vftable;
    if (v11)
    {
      (*((void (**)(OSMetaClass_vtbl *))v11->getMetaClass + 2))(v11);
      meta[46].__vftable = 0;
    }
    uint64_t v12 = *(void *)&meta[46].refcount;
    if (v12)
    {
      (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
      *(void *)&meta[46].refcount = 0;
    }
    unsigned __int16 v13 = meta[46].meta;
    if (v13)
    {
      ((void (*)(OSMetaClass *))v13->release)(v13);
      meta[46].meta = 0;
    }
    uint64_t v14 = meta[46].metaClassPrivate;
    if (v14)
    {
      (*(void (**)(OSMetaClassPrivate *))(*(void *)v14 + 16))(v14);
      meta[46].metaClassPrivate = 0;
    }
    memset_s(this[1].meta, 0x5E8uLL, 0, 0x5E8uLL);
    uint64_t v15 = this[1].meta;
    if (v15)
    {
      IOFree(v15, 0x5E8uLL);
      this[1].meta = 0;
    }
  }
  AppleBCMWLANIOReporting::free(this);
}

void non-virtual thunk to'AppleBCMWLANIOReportingPerSlice::free(AppleBCMWLANIOReportingPerSlice *this)
{
}

uint64_t AppleBCMWLANIOReportingPerSlice::stop(AppleBCMWLANIOReportingPerSlice *this)
{
  uint64_t result = AppleBCMWLANIOReporting::getCCFaultReporter(this);
  if (result)
  {
    CCFaultReporter = (CCFaultReporter *)AppleBCMWLANIOReporting::getCCFaultReporter(this);
    return CCFaultReporter::unregisterCallbacks(CCFaultReporter, (OSObject *)this);
  }
  return result;
}

uint64_t AppleBCMWLANIOReportingPerSlice::setCallbackForStaleConfig(AppleBCMWLANIOReportingPerSlice *this, OSObject *a2, int (*a3)(OSObject *))
{
  *(void *)(*((void *)this + 7) + 8) = a2;
  **((void **)this + 7) = a3;
  return 0;
}

void _GLOBAL__sub_I_AppleBCMWLANIOReportingPerSlice_cpp()
{
  kNullRange = 0;
}

uint64_t AppleBCMWLANIOReporting::init(uint64_t a1, uint64_t a2)
{
  uint64_t result = OSObject::init((OSObject *)a1);
  if (result)
  {
    uint64_t result = IOMallocZeroTyped();
    *(void *)(a1 + 48) = result;
    if (result)
    {
      *(void *)(result + 8) = *(void *)(a2 + 16);
      uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        **(void **)(a1 + 48) = *(void *)(a2 + 8);
        OSStringPtr v6 = *(void **)(a1 + 48);
        if (*v6)
        {
          v6[5] = *(void *)a2;
          long long v7 = *(void **)(a1 + 48);
          if (v7[5])
          {
            v7[6] = *(void *)(a2 + 48);
            uint64_t v8 = *(void **)(a1 + 48);
            if (v8[6])
            {
              v8[7] = *(void *)(a2 + 40);
              uint64_t v9 = *(void *)(a1 + 48);
              uint64_t v10 = *(void *)(v9 + 8);
              if (*(void *)(v9 + 56))
              {
                if (v10)
                {
                  int shouldLog = CCLogStream::shouldLog();
                  uint64_t v9 = *(void *)(a1 + 48);
                  if (shouldLog)
                  {
                    unsigned __int16 v26 = *(OSObject **)v9;
                    uint64_t v25 = *(CCLogStream **)(v9 + 8);
                    ClassNameHelper = (const char *)getClassNameHelper(*(OSObject **)v9);
                    CCLogStream::logNotice(v25, "[dk] %s@%d:Provider %p, name %s\n", "init", 97, v26, ClassNameHelper);
                    uint64_t v9 = *(void *)(a1 + 48);
                  }
                }
                *(void *)(v9 + 32) = *(void *)(a2 + 32);
                uint64_t v12 = *(void *)(a1 + 48);
                uint64_t v13 = *(void *)(v12 + 32);
                if (v13)
                {
                  (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
                  *(void *)(*(void *)(a1 + 48) + 24) = *(void *)(a2 + 24);
                  uint64_t v14 = *(void *)(a1 + 48);
                  uint64_t v15 = *(void *)(v14 + 24);
                  if (v15)
                  {
                    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
                    *(void *)(*(void *)(a1 + 48) + 64) = *(void *)(a2 + 56);
                    uint64_t v16 = *(void *)(a1 + 48);
                    uint64_t v17 = *(void *)(v16 + 64);
                    if (v17)
                    {
                      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
                      *(void *)(*(void *)(a1 + 48) + 16) = OSSet::withCapacity((OSSet *)0xA, v18);
                      uint64_t v19 = *(void *)(a1 + 48);
                      if (*(void *)(v19 + 16))
                      {
                        *(_DWORD *)(v19 + 72) = *(_DWORD *)(a2 + 64);
                        uint64_t v20 = *(void *)(a1 + 48);
                        if (*(_DWORD *)(v20 + 72)) {
                          return 1;
                        }
                        if (*(void *)(v20 + 8) && CCLogStream::shouldLog()) {
                          CCLogStream::logEmergency(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d:Failed to fMaxSupportedEventLogSet\n");
                        }
                      }
                      else if (*(void *)(v19 + 8) && CCLogStream::shouldLog())
                      {
                        CCLogStream::logEmergency(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d:Failed to create fReporters\n");
                      }
                    }
                    else if (*(void *)(v16 + 8) && CCLogStream::shouldLog())
                    {
                      CCLogStream::logEmergency(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d:Bad fChanSpecHandler\n");
                    }
                  }
                  else if (*(void *)(v14 + 8) && CCLogStream::shouldLog())
                  {
                    CCLogStream::logEmergency(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d:Bad fCommandGate\n");
                  }
                }
                else if (*(void *)(v12 + 8) && CCLogStream::shouldLog())
                {
                  CCLogStream::logEmergency(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d:Bad fFaultReporter");
                }
              }
              else if (v10 && CCLogStream::shouldLog())
              {
                CCLogStream::logEmergency(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d:Bad fAddCallback\n");
              }
            }
            else if (v8[1] && CCLogStream::shouldLog())
            {
              CCLogStream::logEmergency(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d:Bad fRemoveCallback\n");
            }
          }
          else if (v7[1] && CCLogStream::shouldLog())
          {
            CCLogStream::logEmergency(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d:Bad fTarget\n");
          }
        }
        else if (v6[1] && CCLogStream::shouldLog())
        {
          CCLogStream::logEmergency(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d:Bad fProvider\n");
        }
      }
      else
      {
        unsigned __int16 v21 = (const char *)getClassNameHelper((OSObject *)a1);
        IOLog("%s::%s(): Unable to get debug logger\n", v21, "init");
      }
      uint64_t result = *(void *)(*(void *)(a1 + 48) + 8);
      if (result)
      {
        int v22 = CCLogStream::shouldLog();
        uint64_t result = 0;
        if (v22)
        {
          unint64_t v23 = *(CCLogStream **)(*(void *)(a1 + 48) + 8);
          unsigned __int16 v24 = (const char *)getClassNameHelper((OSObject *)a1);
          CCLogStream::logEmergency(v23, "[dk] %s@%d:Failed %s init\n", "init", 121, v24);
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANIOReporting::getLogger(AppleBCMWLANIOReporting *this)
{
  return *(void *)(*((void *)this + 6) + 8);
}

uint64_t AppleBCMWLANIOReporting::configureReport(OSObject *this, OSCollection *a2, OSData *a3, unsigned int *a4, unsigned int *a5)
{
  unsigned int v6 = a3;
  unsigned int v15 = 0;
  int v16 = IOReporter::configureAllReports(*(IOReporter **)(*(void *)&this[1].refcount + 16), a2, a3, &v15, a5);
  uint64_t v8 = *(void *)&this[1].refcount;
  uint64_t v9 = *(CCLogStream **)(v8 + 8);
  uint64_t v10 = *(CCFaultReporter **)(v8 + 32);
  ClassNameHelper = (const char *)getClassNameHelper(this);
  int v16 = testPostConfigureAllAndAdjustV3(v9, v10, ClassNameHelper, v6, (unsigned int *)&v16, a4, v15, -2);
  if (v16 && *(void *)(*(void *)&this[1].refcount + 8) && CCLogStream::shouldLog())
  {
    uint64_t v13 = *(CCLogStream **)(*(void *)&this[1].refcount + 8);
    uint64_t v14 = (const char *)getClassNameHelper(this);
    CCLogStream::logEmergency(v13, "[dk] %s@%d:DKReporter::%s::%s(%d) testPostConfigureAllAndAdjustV3 failed\n", "configureReport", 138, v14, "configureReport", 138);
  }
  return v16;
}

uint64_t testPostConfigureAllAndAdjustV3(CCLogStream *a1, CCFaultReporter *a2, const char *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, int a7, int a8)
{
  int v20 = 0;
  int v15 = gDKIORAllowFailure;
  if (gDKIORAllowFailure == -1)
  {
    if (IOParseBootArgNumber("wifi.iorpropfail", &v20, 4))
    {
      int v15 = v20;
      gDKIORAllowFailure = v20;
    }
    else
    {
      int v15 = gDKIORAllowFailure;
    }
    if (v15 == -1)
    {
      int v15 = 0;
      gDKIORAllowFailure = 0;
    }
  }
  if (a8 == -2) {
    int v16 = v15;
  }
  else {
    int v16 = a8;
  }
  unsigned int v17 = *a5;
  if (v16 == 1)
  {
    if (v17)
    {
      logDebug((uint64_t)a1);
      return *a5;
    }
    goto LABEL_16;
  }
  if (!v17)
  {
LABEL_16:
    if (__CFADD__(*a6, a7))
    {
      logDebug((uint64_t)a1);
      logDebug((uint64_t)a1);
      uint64_t v18 = 3758097128;
      logDebug((uint64_t)a1);
      if (!testPostConfigureAllAndAdjustV3(CCLogStream *,CCFaultReporter *,char const*,unsigned int,int *,unsigned int *,unsigned int,int)::sFireCCMaxOnce)
      {
        CCFaultReporter::reportFault(a2, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANIOReportingHelpers.hpp", 0xFBu, "testPostConfigureAllAndAdjustV3", 0, -528340981, "%s incrementFail", a3);
        testPostConfigureAllAndAdjustV3(CCLogStream *,CCFaultReporter *,char const*,unsigned int,int *,unsigned int *,unsigned int,int)::sFireCCMaxOnce = 1;
      }
      if (!v16)
      {
        logDebug((uint64_t)a1);
        return 0;
      }
    }
    else
    {
      uint64_t v18 = 0;
      *a6 += a7;
    }
    goto LABEL_18;
  }
  logDebug((uint64_t)a1);
  uint64_t v18 = 0;
  if (!testPostConfigureAllAndAdjustV3(CCLogStream *,CCFaultReporter *,char const*,unsigned int,int *,unsigned int *,unsigned int,int)::sFireCCMaxOnce)
  {
    CCFaultReporter::reportFault(a2, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANIOReportingHelpers.hpp", 0xF2u, "testPostConfigureAllAndAdjustV3", 0, -528340981, "%s c %d ret %x", a3, a7, *a5);
    uint64_t v18 = 0;
    testPostConfigureAllAndAdjustV3(CCLogStream *,CCFaultReporter *,char const*,unsigned int,int *,unsigned int *,unsigned int,int)::sFireCCMaxOnce = 1;
  }
LABEL_18:
  if (!a7 && v16 >= 2)
  {
    uint64_t v18 = 3758097114;
    logDebug((uint64_t)a1);
    if (!testPostConfigureAllAndAdjustV3(CCLogStream *,CCFaultReporter *,char const*,unsigned int,int *,unsigned int *,unsigned int,int)::sFireCCMaxOnce)
    {
      CCFaultReporter::reportFault(a2, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANIOReportingHelpers.hpp", 0x115u, "testPostConfigureAllAndAdjustV3", 0, -528340981, "%s PropagateFailureIncZeroCount", a3);
      testPostConfigureAllAndAdjustV3(CCLogStream *,CCFaultReporter *,char const*,unsigned int,int *,unsigned int *,unsigned int,int)::sFireCCMaxOnce = 1;
    }
  }
  return v18;
}

uint64_t AppleBCMWLANIOReporting::updateReport(OSObject *this, OSCollection *a2, OSData *a3, unsigned int *a4, unint64_t *a5, unint64_t *a6, IOMemoryDescriptor *a7)
{
  unsigned int v24 = 0;
  uint64_t v14 = *(CCLogStream **)(*(void *)&this[1].refcount + 8);
  ClassNameHelper = (const char *)getClassNameHelper(this);
  testPreUpdateAllReportersV3(v14, ClassNameHelper, *(OSSet **)(*(void *)&this[1].refcount + 16), *a5, *a6, a7);
  int updated = IOReporter::updateAllReports(*(IOReporter **)(*(void *)&this[1].refcount + 16), a2, a3, &v24, (unsigned int *)*a5, *a6, (unint64_t)a7, v16);
  uint64_t v17 = *(void *)&this[1].refcount;
  uint64_t v18 = *(CCLogStream **)(v17 + 8);
  uint64_t v19 = *(CCFaultReporter **)(v17 + 32);
  int v20 = (const char *)getClassNameHelper(this);
  int updated = testPostUpdateAllAndAdjustV3(v18, v19, v20, (unsigned int *)&updated, v24, a4, a5, a6, -2);
  if (updated && *(void *)(*(void *)&this[1].refcount + 8) && CCLogStream::shouldLog())
  {
    int v22 = *(CCLogStream **)(*(void *)&this[1].refcount + 8);
    unint64_t v23 = (const char *)getClassNameHelper(this);
    CCLogStream::logEmergency(v22, "[dk] %s@%d:DKReporter::%s::%s(%d) testAndAdjustOffsetAndCapacity failed count %u outElementCount %u offset %llu capacity %llu", "updateReport", 157, v23, "updateReport", 157, v24, *a4, *a5, *a6);
  }
  return updated;
}

uint64_t testPreUpdateAllReportersV3(CCLogStream *a1, const char *a2, OSSet *a3, uint64_t a4, uint64_t a5, IOMemoryDescriptor *this)
{
  uint64_t returnLength;

  returnsize_t Length = 0;
  IOMemoryDescriptor::GetLength(this, &returnLength);
  if ((*(unsigned int (**)(OSSet *))(*(void *)a3 + 72))(a3))
  {
    uint64_t result = 0;
    if (a5) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  (*(void (**)(OSSet *))(*(void *)a3 + 72))(a3);
  logDebug((uint64_t)a1);
  uint64_t result = 3758097084;
  if (!a5)
  {
LABEL_3:
    (*(void (**)(OSSet *))(*(void *)a3 + 72))(a3);
    logDebug((uint64_t)a1);
    uint64_t result = 3758097084;
  }
LABEL_4:
  if (returnLength == a4)
  {
    (*(void (**)(OSSet *))(*(void *)a3 + 72))(a3);
    logDebug((uint64_t)a1);
    return 3758097084;
  }
  return result;
}

uint64_t testPostUpdateAllAndAdjustV3(CCLogStream *a1, CCFaultReporter *a2, const char *a3, unsigned int *a4, unsigned int a5, unsigned int *a6, unint64_t *a7, unint64_t *a8, int a9)
{
  if (a9 == -2) {
    int v14 = gDKIORAllowFailure;
  }
  else {
    int v14 = a9;
  }
  if (v14 == 1 && *a4)
  {
    logDebug((uint64_t)a1);
    return *a4;
  }
  unsigned int v16 = *a4;
  if (!a5)
  {
    if (!v16)
    {
LABEL_20:
      uint64_t v15 = 0;
      if (!a5 && v14 >= 2)
      {
        uint64_t v15 = 3758097114;
        logDebug((uint64_t)a1);
        if (!testPostUpdateAllAndAdjustV3(CCLogStream *,CCFaultReporter *,char const*,int *,unsigned int,unsigned int *,unsigned long long *,unsigned long long *,int)::sFireCCMaxOnce)
        {
          CCFaultReporter::reportFault(a2, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANIOReportingHelpers.hpp", 0x19Eu, "testPostUpdateAllAndAdjustV3", 0, -528340980, "%s PropagateFailureIncZeroCount", a3);
          testPostUpdateAllAndAdjustV3(CCLogStream *,CCFaultReporter *,char const*,int *,unsigned int,unsigned int *,unsigned long long *,unsigned long long *,int)::sFireCCMaxOnce = 1;
        }
      }
      return v15;
    }
LABEL_18:
    logDebug((uint64_t)a1);
    if (!testPostUpdateAllAndAdjustV3(CCLogStream *,CCFaultReporter *,char const*,int *,unsigned int,unsigned int *,unsigned long long *,unsigned long long *,int)::sFireCCMaxOnce)
    {
      CCFaultReporter::reportFault(a2, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANIOReportingHelpers.hpp", 0x17Du, "testPostUpdateAllAndAdjustV3", 0, -528340980, "%s c %d ret %x", a3, a5, *a4);
      testPostUpdateAllAndAdjustV3(CCLogStream *,CCFaultReporter *,char const*,int *,unsigned int,unsigned int *,unsigned long long *,unsigned long long *,int)::sFireCCMaxOnce = 1;
    }
    goto LABEL_20;
  }
  if (v16) {
    goto LABEL_18;
  }
  if (!__CFADD__(*a6, a5) && !(a5 >> 26))
  {
    unint64_t v17 = (unint64_t)a5 << 6;
    if (!__CFADD__(*a7, v17) && *a8 >= v17)
    {
      *a6 += a5;
      BOOL v18 = __CFADD__(*a7, v17);
      *a7 += v17;
      if (!v18)
      {
        BOOL v18 = *a8 >= v17;
        *a8 -= v17;
        if (v18) {
          return 0;
        }
      }
    }
  }
  logDebug((uint64_t)a1);
  logDebug((uint64_t)a1);
  uint64_t v15 = 3758097128;
  logDebug((uint64_t)a1);
  if (!testPostUpdateAllAndAdjustV3(CCLogStream *,CCFaultReporter *,char const*,int *,unsigned int,unsigned int *,unsigned long long *,unsigned long long *,int)::sFireCCMaxOnce)
  {
    CCFaultReporter::reportFault(a2, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANIOReportingHelpers.hpp", 0x186u, "testPostUpdateAllAndAdjustV3", 0, -528340980, "%s incrementFail", a3);
    testPostUpdateAllAndAdjustV3(CCLogStream *,CCFaultReporter *,char const*,int *,unsigned int,unsigned int *,unsigned long long *,unsigned long long *,int)::sFireCCMaxOnce = 1;
  }
  if (!v14)
  {
    logDebug((uint64_t)a1);
    return 0;
  }
  return v15;
}

void AppleBCMWLANIOReporting::free(OSObject *this)
{
  uint64_t v2 = *(void **)&this[1].refcount;
  if (v2)
  {
    uint64_t v3 = v2[2];
    if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
      *(void *)(*(void *)&this[1].refcount + 16) = 0;
      uint64_t v2 = *(void **)&this[1].refcount;
    }
    uint64_t v4 = v2[3];
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
      *(void *)(*(void *)&this[1].refcount + 24) = 0;
      uint64_t v2 = *(void **)&this[1].refcount;
    }
    uint64_t v5 = v2[1];
    if (v5)
    {
      (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
      *(void *)(*(void *)&this[1].refcount + 8) = 0;
      uint64_t v2 = *(void **)&this[1].refcount;
    }
    uint64_t v6 = v2[4];
    if (v6)
    {
      (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
      *(void *)(*(void *)&this[1].refcount + 32) = 0;
      uint64_t v2 = *(void **)&this[1].refcount;
    }
    v2[7] = 0;
    *(void *)(*(void *)&this[1].refcount + 48) = 0;
    long long v7 = *(void **)&this[1].refcount;
    uint64_t v8 = v7[8];
    if (v8)
    {
      (*(void (**)(void))(*(void *)v8 + 16))(v7[8]);
      *(void *)(*(void *)&this[1].refcount + 64) = 0;
      long long v7 = *(void **)&this[1].refcount;
    }
    memset_s(v7, 0x50uLL, 0, 0x50uLL);
    uint64_t v9 = *(void **)&this[1].refcount;
    if (v9)
    {
      IOFree(v9, 0x50uLL);
      *(void *)&this[1].refcount = 0;
    }
  }
  OSObject::free(this);
}

uint64_t AppleBCMWLANIOReporting::getCCFaultReporter(AppleBCMWLANIOReporting *this)
{
  return *(void *)(*((void *)this + 6) + 32);
}

uint64_t AppleBCMWLANIOReporting::getRemoveReporterCallback(AppleBCMWLANIOReporting *this)
{
  return *(void *)(*((void *)this + 6) + 48);
}

uint64_t AppleBCMWLANIOReporting::getAddReporterCallback(AppleBCMWLANIOReporting *this)
{
  return *(void *)(*((void *)this + 6) + 56);
}

uint64_t AppleBCMWLANIOReporting::getAppleBCMWLANChanSpecHandle(AppleBCMWLANIOReporting *this)
{
  return *(void *)(*((void *)this + 6) + 64);
}

uint64_t AppleBCMWLANIOReporting::getReporter(AppleBCMWLANIOReporting *this)
{
  return *(void *)(*((void *)this + 6) + 16);
}

uint64_t AppleBCMWLANIOReporting::getTarget(AppleBCMWLANIOReporting *this)
{
  return *(void *)(*((void *)this + 6) + 40);
}

uint64_t logDebug(uint64_t a1)
{
  if (a1) {
    return CCLogStream::logv();
  }
  IOLog("strm is NULL");
  return IOLog("logController failed");
}

OSObject *AppleBCMWLANChipManagerPCIe4388::withChip(AppleBCMWLANChipManagerPCIe4388 *this, uint64_t a2)
{
  uint64_t v6 = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANChipManagerPCIe4388MetaClass, &v6)) {
    return 0;
  }
  uint64_t v4 = v6;
  if (v6
    && (((uint64_t (*)(OSObject *, AppleBCMWLANChipManagerPCIe4388 *, uint64_t))v6->OSMetaClassBase::__vftable[4].isEqualTo)(v6, this, a2) & 1) == 0)
  {
    ((void (*)(OSObject *))v4->release)(v4);
    return 0;
  }
  return v4;
}

BOOL AppleBCMWLANChipManagerPCIe4388::initWithChip(OSObject *this, int a2)
{
  BOOL result = AppleBCMWLANChipManagerPCIe::init(this);
  if (result)
  {
    AppleBCMWLANChipManagerPCIe::setOTPCoreID((uint64_t)this, 0);
    AppleBCMWLANChipManagerPCIe::setAWDLSupported((AppleBCMWLANChipManagerPCIe *)this, 1);
    AppleBCMWLANChipManagerPCIe::setChipNumber((uint64_t)this, a2);
    AppleBCMWLANChipManagerPCIe::setCoreCount((uint64_t)this, 9);
    AppleBCMWLANChipManagerPCIe::setCoreRegionList((uint64_t)this, (uint64_t)&kBCOM4388ChipCores);
    AppleBCMWLANChipManagerPCIe::setWrapperCount((uint64_t)this, 19);
    AppleBCMWLANChipManagerPCIe::setWrapperRegionList((uint64_t)this, (uint64_t)&kBCOM4388ChipWrappers);
    AppleBCMWLANChipManagerPCIe::setMemoryCount((uint64_t)this, 7);
    AppleBCMWLANChipManagerPCIe::setMemoryRegionList((uint64_t)this, (uint64_t)&kBCOM4388ChipMemories);
    AppleBCMWLANChipManagerPCIe::setBackplaneWindowCount((uint64_t)this, 8);
    AppleBCMWLANChipManagerPCIe::setBackplaneWindows((uint64_t)this, (uint64_t)&kBCOM4388ChipBackplaneWindows);
    AppleBCMWLANChipManagerPCIe::setOTPCoreID((uint64_t)this, 8);
    AppleBCMWLANChipManagerPCIe::setUserOTPRange((uint64_t)this, (uint64_t)&kBCOM4388ChipUserOTP);
    AppleBCMWLANChipManagerPCIe::setChipOTPRange((uint64_t)this, (uint64_t)&kBCOM4388ChipOTP);
    AppleBCMWLANChipManagerPCIe::setCoreIDTable((uint64_t)this, kBCOM4388CoreIDTable);
    AppleBCMWLANChipManagerPCIe::setUCodeRegionInfo((uint64_t)this, (uint64_t)&kBCOM4388UCodeSCRRegionInfo, 0);
    AppleBCMWLANChipManagerPCIe::setUCodeRegionInfo((uint64_t)this, (uint64_t)&kBCOM4388UCodeSHMRegionInfo, 1);
    AppleBCMWLANChipManagerPCIe::setConfigSpaceSaveRange((uint64_t)this, (uint64_t)&kBCOM4388ChipConfigSpaceStateTable);
    AppleBCMWLANChipManagerPCIe::setConfigSpaceSaveCount((uint64_t)this, 3);
    AppleBCMWLANChipManagerPCIe::setMemoryRAMAddress((uint64_t)this, 0x200000);
    AppleBCMWLANChipManagerPCIe::setPCIeHeaderLength((uint64_t)this, 256);
    AppleBCMWLANChipManagerPCIe::setSROMVersion((uint64_t)this, 16);
    AppleBCMWLANChipManagerPCIe::setSROMWordCount((uint64_t)this, 1024);
    AppleBCMWLANChipManagerPCIe::setSROMSignature((uint64_t)this, 4388);
    AppleBCMWLANChipManagerPCIe::setMultiFunctionChip((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setSafeToCaptureSoCRAM((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setHMAPSupported((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setHMAPBaseAddress((uint64_t)this, 1408);
    AppleBCMWLANChipManagerPCIe::sethostWakeToggleNotConfigured((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setM2MResetOnSSResetDisabled((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setPowerControlRequired((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setPTMSupport((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setsysmemEnabled((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setCacheCoherency((uint64_t)this, 1);
    int v10 = 0;
    while (1)
    {
      uint64_t BackplaneWindows = AppleBCMWLANChipManagerPCIe::getBackplaneWindows((AppleBCMWLANChipManagerPCIe *)this);
      unsigned int PacketCount = AppleBCMWLANPCIeFlowQueue::getPacketCount((AppleBCMWLANPCIeFlowQueue *)this);
      if (!AppleBCMWLANChipManagerPCIe::findRemappableWindow(BackplaneWindows, PacketCount, 0, &v10)) {
        break;
      }
      AppleBCMWLANChipManagerPCIe::incrementCoreRemapperCount((uint64_t)this);
    }
    int v10 = 0;
    while (1)
    {
      uint64_t v7 = AppleBCMWLANChipManagerPCIe::getBackplaneWindows((AppleBCMWLANChipManagerPCIe *)this);
      unsigned int v8 = AppleBCMWLANPCIeFlowQueue::getPacketCount((AppleBCMWLANPCIeFlowQueue *)this);
      if (!AppleBCMWLANChipManagerPCIe::findRemappableWindow(v7, v8, 1, &v10)) {
        break;
      }
      AppleBCMWLANChipManagerPCIe::incrementWrapperRemapperCount((uint64_t)this);
    }
    uint64_t v9 = OSDictionary::withCapacity(0x20u);
    return AppleBCMWLANChipManagerPCIe::setChipProvisioningData((AppleBCMWLANChipManagerPCIe *)this, v9);
  }
  return result;
}

BOOL non-virtual thunk to'AppleBCMWLANChipManagerPCIe4388::initWithChip(AppleBCMWLANChipManagerPCIe4388 *this, int a2)
{
  return AppleBCMWLANChipManagerPCIe4388::initWithChip((OSObject *)((char *)this - 56), a2);
}

uint64_t AppleBCMWLANChipManagerPCIe4388::prepareHardware(AppleBCMWLANChipManagerPCIe4388 *this, AppleBCMWLANChipConfigSpace *a2, AppleBCMWLANChipBackplane *a3)
{
  uint64_t v3 = 3758097090;
  unsigned int v6 = 0;
  if (a2 && a3)
  {
    if (AppleBCMWLANChipBackplane::readGCICoreReg32(a3, 0xE64u, &v6))
    {
      return 3758097098;
    }
    else
    {
      unsigned int v6 = v6 & 0xFFFFFFFC | 1;
      AppleBCMWLANChipBackplane::writeGCICoreReg32(a3, 0xE64u, v6);
      return 0;
    }
  }
  return v3;
}

uint64_t AppleBCMWLANChipManagerPCIe4388::checkHardware(AppleBCMWLANChipManagerPCIe4388 *this, AppleBCMWLANChipConfigSpace *a2, AppleBCMWLANChipBackplane *a3)
{
  unsigned int v6 = 0;
  uint64_t result = 3758097090;
  if (a2 && a3)
  {
    AppleBCMWLANChipBackplane::writeGCICoreReg32(a3, 0x40u, 4u);
    if (AppleBCMWLANChipBackplane::readGCICoreReg32(a3, 0x204u, &v6) || (v6 & 0x4000) != 0)
    {
      return 3758097098;
    }
    else
    {
      int v5 = AppleBCMWLANChipBackplane::readGCICoreReg32(a3, 0x40u, &v6);
      uint64_t result = 3758097098;
      if (!v5)
      {
        if (v6 == 4) {
          return 0;
        }
        else {
          return 3758097098;
        }
      }
    }
  }
  return result;
}

void *AppleBCMWLANChipManagerPCIe4388::getARMCoreRegionTable(AppleBCMWLANChipManagerPCIe4388 *this)
{
  return &kBCOM4388ARMCoreRanges;
}

void *non-virtual thunk to'AppleBCMWLANChipManagerPCIe4388::getARMCoreRegionTable(AppleBCMWLANChipManagerPCIe4388 *this)
{
  return &kBCOM4388ARMCoreRanges;
}

uint64_t AppleBCMWLANChipManagerPCIe4388::getARMCoreRegionTableSize(AppleBCMWLANChipManagerPCIe4388 *this)
{
  return 2;
}

uint64_t non-virtual thunk to'AppleBCMWLANChipManagerPCIe4388::getARMCoreRegionTableSize(AppleBCMWLANChipManagerPCIe4388 *this)
{
  return 2;
}

void *AppleBCMWLANChipManagerPCIe4388::getFWDebugARMCoreRegionTable(AppleBCMWLANChipManagerPCIe4388 *this)
{
  return &kBCOM4388FWDebugARMCoreRanges;
}

void *non-virtual thunk to'AppleBCMWLANChipManagerPCIe4388::getFWDebugARMCoreRegionTable(AppleBCMWLANChipManagerPCIe4388 *this)
{
  return &kBCOM4388FWDebugARMCoreRanges;
}

uint64_t AppleBCMWLANChipManagerPCIe4388::getFWDebugARMCoreRegionTableSize(AppleBCMWLANChipManagerPCIe4388 *this)
{
  return 4;
}

uint64_t non-virtual thunk to'AppleBCMWLANChipManagerPCIe4388::getFWDebugARMCoreRegionTableSize(AppleBCMWLANChipManagerPCIe4388 *this)
{
  return 4;
}

void *AppleBCMWLANChipManagerPCIe4388::getFWDebugCommonCoreRegionTable(AppleBCMWLANChipManagerPCIe4388 *this)
{
  return &kBCOM4388FWDebugCommonCoreRanges;
}

void *non-virtual thunk to'AppleBCMWLANChipManagerPCIe4388::getFWDebugCommonCoreRegionTable(AppleBCMWLANChipManagerPCIe4388 *this)
{
  return &kBCOM4388FWDebugCommonCoreRanges;
}

uint64_t AppleBCMWLANChipManagerPCIe4388::getFWDebugCommonCoreRegionTableSize(AppleBCMWLANChipManagerPCIe4388 *this)
{
  return 3;
}

uint64_t non-virtual thunk to'AppleBCMWLANChipManagerPCIe4388::getFWDebugCommonCoreRegionTableSize(AppleBCMWLANChipManagerPCIe4388 *this)
{
  return 3;
}

void *AppleBCMWLANChipManagerPCIe4388::getFWDebugPMUCoreRegionTable(AppleBCMWLANChipManagerPCIe4388 *this)
{
  return &kBCOM4388FWDebugPMUCoreRanges;
}

void *non-virtual thunk to'AppleBCMWLANChipManagerPCIe4388::getFWDebugPMUCoreRegionTable(AppleBCMWLANChipManagerPCIe4388 *this)
{
  return &kBCOM4388FWDebugPMUCoreRanges;
}

uint64_t AppleBCMWLANChipManagerPCIe4388::getFWDebugPMUCoreRegionTableSize(AppleBCMWLANChipManagerPCIe4388 *this)
{
  return 2;
}

uint64_t non-virtual thunk to'AppleBCMWLANChipManagerPCIe4388::getFWDebugPMUCoreRegionTableSize(AppleBCMWLANChipManagerPCIe4388 *this)
{
  return 2;
}

void *AppleBCMWLANChipManagerPCIe4388::getFWDebugPCIEFunc0CoreRegionTable(AppleBCMWLANChipManagerPCIe4388 *this)
{
  return &kBCOM4388FWDebugPCIEFunc0CoreRanges;
}

void *non-virtual thunk to'AppleBCMWLANChipManagerPCIe4388::getFWDebugPCIEFunc0CoreRegionTable(AppleBCMWLANChipManagerPCIe4388 *this)
{
  return &kBCOM4388FWDebugPCIEFunc0CoreRanges;
}

uint64_t AppleBCMWLANChipManagerPCIe4388::getFWDebugPCIEFunc0CoreRegionTableSize(AppleBCMWLANChipManagerPCIe4388 *this)
{
  return 1;
}

uint64_t non-virtual thunk to'AppleBCMWLANChipManagerPCIe4388::getFWDebugPCIEFunc0CoreRegionTableSize(AppleBCMWLANChipManagerPCIe4388 *this)
{
  return 1;
}

uint64_t AppleBCMWLANChipManagerPCIe4388::getDARSecurityStatusReg(AppleBCMWLANChipManagerPCIe4388 *this, AppleBCMWLANChipBackplane *a2)
{
  unsigned int v7 = 0;
  int v3 = AppleBCMWLANChipBackplane::readPCIeCoreReg32(a2, 2676, &v7);
  if (v3)
  {
    int v4 = v3;
    unsigned int v7 = 0;
    if ((*(uint64_t (**)(AppleBCMWLANChipManagerPCIe4388 *))(*(void *)this + 72))(this))
    {
      (*(void (**)(AppleBCMWLANChipManagerPCIe4388 *))(*(void *)this + 72))(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANChipManagerPCIe4388 *))(*(void *)this + 72))(this);
        CCLogStream::logAlert(v6, "[dk] %s@%d:DAR Security Status Register Read failed - 0x%x\n", "getDARSecurityStatusReg", 299, v4);
      }
    }
  }
  return v7;
}

uint64_t non-virtual thunk to'AppleBCMWLANChipManagerPCIe4388::getDARSecurityStatusReg(AppleBCMWLANChipManagerPCIe4388 *this, AppleBCMWLANChipBackplane *a2)
{
  return AppleBCMWLANChipManagerPCIe4388::getDARSecurityStatusReg((AppleBCMWLANChipManagerPCIe4388 *)((char *)this - 56), a2);
}

uint64_t AppleBCMWLANChipManagerPCIe4388::isSecureBootSupported(AppleBCMWLANChipManagerPCIe4388 *this)
{
  return 1;
}

uint64_t non-virtual thunk to'AppleBCMWLANChipManagerPCIe4388::isSecureBootSupported(AppleBCMWLANChipManagerPCIe4388 *this)
{
  return 1;
}

void _GLOBAL__sub_I_AppleBCMWLANChipManagerPCIe4388_cpp()
{
  kNullRange = 0;
}

OSObject *AppleBCMWLANChipManagerPCIe4350::withChip(AppleBCMWLANChipManagerPCIe4350 *this, uint64_t a2)
{
  unsigned int v6 = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANChipManagerPCIe4350MetaClass, &v6)) {
    return 0;
  }
  int v4 = v6;
  if (v6
    && (((uint64_t (*)(OSObject *, AppleBCMWLANChipManagerPCIe4350 *, uint64_t))v6->OSMetaClassBase::__vftable[4].isEqualTo)(v6, this, a2) & 1) == 0)
  {
    ((void (*)(OSObject *))v4->release)(v4);
    return 0;
  }
  return v4;
}

BOOL AppleBCMWLANChipManagerPCIe4350::initWithChip(OSObject *this, int a2)
{
  BOOL result = AppleBCMWLANChipManagerPCIe::init(this);
  if (result)
  {
    AppleBCMWLANChipManagerPCIe::setOTPCoreID((uint64_t)this, 0);
    AppleBCMWLANChipManagerPCIe::setAWDLSupported((AppleBCMWLANChipManagerPCIe *)this, 1);
    AppleBCMWLANChipManagerPCIe::setChipNumber((uint64_t)this, a2);
    AppleBCMWLANChipManagerPCIe::setCoreCount((uint64_t)this, 6);
    AppleBCMWLANChipManagerPCIe::setCoreRegionList((uint64_t)this, (uint64_t)&kBCOM4350ChipCores);
    AppleBCMWLANChipManagerPCIe::setWrapperCount((uint64_t)this, 11);
    AppleBCMWLANChipManagerPCIe::setWrapperRegionList((uint64_t)this, (uint64_t)&kBCOM4350ChipWrappers);
    AppleBCMWLANChipManagerPCIe::setMemoryCount((uint64_t)this, 7);
    AppleBCMWLANChipManagerPCIe::setMemoryRegionList((uint64_t)this, (uint64_t)&kBCOM4350ChipMemories);
    AppleBCMWLANChipManagerPCIe::setBackplaneWindowCount((uint64_t)this, 8);
    AppleBCMWLANChipManagerPCIe::setBackplaneWindows((uint64_t)this, (uint64_t)&kBCOM4350ChipBackplaneWindows);
    AppleBCMWLANChipManagerPCIe::setUserOTPRange((uint64_t)this, (uint64_t)&kBCOM4350ChipUserOTP);
    AppleBCMWLANChipManagerPCIe::setChipOTPRange((uint64_t)this, (uint64_t)&kBCOM4350ChipOTP);
    AppleBCMWLANChipManagerPCIe::setCoreIDTable((uint64_t)this, kBCOM4350CoreIDTable);
    AppleBCMWLANChipManagerPCIe::setUCodeRegionInfo((uint64_t)this, (uint64_t)&kBCOM4350UCodeSCRRegionInfo, 0);
    AppleBCMWLANChipManagerPCIe::setUCodeRegionInfo((uint64_t)this, (uint64_t)&kBCOM4350UCodeSHMRegionInfo, 1);
    AppleBCMWLANChipManagerPCIe::setConfigSpaceSaveRange((uint64_t)this, (uint64_t)&kBCOM4350ChipConfigSpaceStateTable);
    AppleBCMWLANChipManagerPCIe::setConfigSpaceSaveCount((uint64_t)this, 3);
    AppleBCMWLANChipManagerPCIe::setMemoryRAMAddress((uint64_t)this, 1572864);
    AppleBCMWLANChipManagerPCIe::setMultiFunctionChip((uint64_t)this, 0);
    AppleBCMWLANChipManagerPCIe::setSafeToCaptureSoCRAM((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setTrapBeforeFLRUnSupported((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setBMEDisableUnSupported((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setNotSplitArchitecture((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setBootMSIUnsupported((uint64_t)this, 1);
    int v10 = 0;
    while (1)
    {
      uint64_t BackplaneWindows = AppleBCMWLANChipManagerPCIe::getBackplaneWindows((AppleBCMWLANChipManagerPCIe *)this);
      unsigned int PacketCount = AppleBCMWLANPCIeFlowQueue::getPacketCount((AppleBCMWLANPCIeFlowQueue *)this);
      if (!AppleBCMWLANChipManagerPCIe::findRemappableWindow(BackplaneWindows, PacketCount, 0, &v10)) {
        break;
      }
      AppleBCMWLANChipManagerPCIe::incrementCoreRemapperCount((uint64_t)this);
    }
    int v10 = 0;
    while (1)
    {
      uint64_t v7 = AppleBCMWLANChipManagerPCIe::getBackplaneWindows((AppleBCMWLANChipManagerPCIe *)this);
      unsigned int v8 = AppleBCMWLANPCIeFlowQueue::getPacketCount((AppleBCMWLANPCIeFlowQueue *)this);
      if (!AppleBCMWLANChipManagerPCIe::findRemappableWindow(v7, v8, 1, &v10)) {
        break;
      }
      AppleBCMWLANChipManagerPCIe::incrementWrapperRemapperCount((uint64_t)this);
    }
    uint64_t v9 = OSDictionary::withCapacity(0x20u);
    return AppleBCMWLANChipManagerPCIe::setChipProvisioningData((AppleBCMWLANChipManagerPCIe *)this, v9);
  }
  return result;
}

BOOL non-virtual thunk to'AppleBCMWLANChipManagerPCIe4350::initWithChip(AppleBCMWLANChipManagerPCIe4350 *this, int a2)
{
  return AppleBCMWLANChipManagerPCIe4350::initWithChip((OSObject *)((char *)this - 56), a2);
}

void _GLOBAL__sub_I_AppleBCMWLANChipManagerPCIe4350_cpp()
{
  kNullRange = 0;
}

OSObject *AppleBCMWLANChipManagerPCIe4364::withChip(AppleBCMWLANChipManagerPCIe4364 *this, uint64_t a2)
{
  unsigned int v6 = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANChipManagerPCIe4364MetaClass, &v6)) {
    return 0;
  }
  int v4 = v6;
  if (v6
    && (((uint64_t (*)(OSObject *, AppleBCMWLANChipManagerPCIe4364 *, uint64_t))v6->OSMetaClassBase::__vftable[4].isEqualTo)(v6, this, a2) & 1) == 0)
  {
    ((void (*)(OSObject *))v4->release)(v4);
    return 0;
  }
  return v4;
}

BOOL AppleBCMWLANChipManagerPCIe4364::initWithChip(OSObject *this, int a2)
{
  BOOL result = AppleBCMWLANChipManagerPCIe::init(this);
  if (result)
  {
    AppleBCMWLANChipManagerPCIe::setOTPCoreID((uint64_t)this, 0);
    AppleBCMWLANChipManagerPCIe::setAWDLSupported((AppleBCMWLANChipManagerPCIe *)this, 1);
    AppleBCMWLANChipManagerPCIe::setChipNumber((uint64_t)this, a2);
    AppleBCMWLANChipManagerPCIe::setCoreCount((uint64_t)this, 6);
    AppleBCMWLANChipManagerPCIe::setCoreRegionList((uint64_t)this, (uint64_t)&kBCOM4364ChipCores);
    AppleBCMWLANChipManagerPCIe::setWrapperCount((uint64_t)this, 11);
    AppleBCMWLANChipManagerPCIe::setWrapperRegionList((uint64_t)this, (uint64_t)&kBCOM4364ChipWrappers);
    AppleBCMWLANChipManagerPCIe::setMemoryCount((uint64_t)this, 7);
    AppleBCMWLANChipManagerPCIe::setMemoryRegionList((uint64_t)this, (uint64_t)&kBCOM4364ChipMemories);
    AppleBCMWLANChipManagerPCIe::setBackplaneWindowCount((uint64_t)this, 8);
    AppleBCMWLANChipManagerPCIe::setBackplaneWindows((uint64_t)this, (uint64_t)&kBCOM4364ChipBackplaneWindows);
    AppleBCMWLANChipManagerPCIe::setUserOTPRange((uint64_t)this, (uint64_t)&kBCOM4364ChipUserOTP);
    AppleBCMWLANChipManagerPCIe::setChipOTPRange((uint64_t)this, (uint64_t)&kBCOM4364ChipOTP);
    AppleBCMWLANChipManagerPCIe::setCoreIDTable((uint64_t)this, kBCOM4364CoreIDTable);
    AppleBCMWLANChipManagerPCIe::setUCodeRegionInfo((uint64_t)this, (uint64_t)&kBCOM4364UCodeSCRRegionInfo, 0);
    AppleBCMWLANChipManagerPCIe::setUCodeRegionInfo((uint64_t)this, (uint64_t)&kBCOM4364UCodeSHMRegionInfo, 1);
    AppleBCMWLANChipManagerPCIe::setConfigSpaceSaveRange((uint64_t)this, (uint64_t)&kBCOM4364ChipConfigSpaceStateTable);
    AppleBCMWLANChipManagerPCIe::setConfigSpaceSaveCount((uint64_t)this, 3);
    AppleBCMWLANChipManagerPCIe::setMemoryRAMAddress((uint64_t)this, 1441792);
    AppleBCMWLANChipManagerPCIe::setPCIeHeaderLength((uint64_t)this, 128);
    AppleBCMWLANChipManagerPCIe::setSROMVersion((uint64_t)this, 15);
    AppleBCMWLANChipManagerPCIe::setSROMWordCount((uint64_t)this, 1024);
    AppleBCMWLANChipManagerPCIe::setSROMSignature((uint64_t)this, 4364);
    int SROMWordCount = AppleBCMWLANChipManagerPCIe::getSROMWordCount((AppleBCMWLANChipManagerPCIe *)this);
    AppleBCMWLANChipManagerPCIe::setSROMoffsetVersion((uint64_t)this, 2 * SROMWordCount - 2);
    AppleBCMWLANChipManagerPCIe::setSROMoffsetSignature((uint64_t)this, 128);
    int SROMoffsetSignature = AppleBCMWLANChipManagerPCIe::getSROMoffsetSignature((AppleBCMWLANChipManagerPCIe *)this);
    AppleBCMWLANChipManagerPCIe::setSROMoffsetMacAddress((uint64_t)this, SROMoffsetSignature + 2);
    AppleBCMWLANChipManagerPCIe::setSROMoffsetSKU((uint64_t)this, 140);
    AppleBCMWLANChipManagerPCIe::setNotSplitArchitecture((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setBootMSIUnsupported((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setMultiFunctionChip((uint64_t)this, 0);
    AppleBCMWLANChipManagerPCIe::setSafeToCaptureSoCRAM((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setTrapBeforeFLRUnSupported((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setBMEDisableUnSupported((uint64_t)this, 1);
    int v12 = 0;
    while (1)
    {
      uint64_t BackplaneWindows = AppleBCMWLANChipManagerPCIe::getBackplaneWindows((AppleBCMWLANChipManagerPCIe *)this);
      unsigned int PacketCount = AppleBCMWLANPCIeFlowQueue::getPacketCount((AppleBCMWLANPCIeFlowQueue *)this);
      if (!AppleBCMWLANChipManagerPCIe::findRemappableWindow(BackplaneWindows, PacketCount, 0, &v12)) {
        break;
      }
      AppleBCMWLANChipManagerPCIe::incrementCoreRemapperCount((uint64_t)this);
    }
    int v12 = 0;
    while (1)
    {
      uint64_t v9 = AppleBCMWLANChipManagerPCIe::getBackplaneWindows((AppleBCMWLANChipManagerPCIe *)this);
      unsigned int v10 = AppleBCMWLANPCIeFlowQueue::getPacketCount((AppleBCMWLANPCIeFlowQueue *)this);
      if (!AppleBCMWLANChipManagerPCIe::findRemappableWindow(v9, v10, 1, &v12)) {
        break;
      }
      AppleBCMWLANChipManagerPCIe::incrementWrapperRemapperCount((uint64_t)this);
    }
    OSNumberPtr v11 = OSDictionary::withCapacity(0x20u);
    return AppleBCMWLANChipManagerPCIe::setChipProvisioningData((AppleBCMWLANChipManagerPCIe *)this, v11);
  }
  return result;
}

BOOL non-virtual thunk to'AppleBCMWLANChipManagerPCIe4364::initWithChip(AppleBCMWLANChipManagerPCIe4364 *this, int a2)
{
  return AppleBCMWLANChipManagerPCIe4364::initWithChip((OSObject *)((char *)this - 56), a2);
}

void _GLOBAL__sub_I_AppleBCMWLANChipManagerPCIe4364_cpp()
{
  kNullRange = 0;
}

OSObject *AppleBCMWLANChipManagerPCIe43452::withChip(AppleBCMWLANChipManagerPCIe43452 *this, uint64_t a2)
{
  unsigned int v6 = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANChipManagerPCIe43452MetaClass, &v6)) {
    return 0;
  }
  int v4 = v6;
  if (v6
    && (((uint64_t (*)(OSObject *, AppleBCMWLANChipManagerPCIe43452 *, uint64_t))v6->OSMetaClassBase::__vftable[4].isEqualTo)(v6, this, a2) & 1) == 0)
  {
    ((void (*)(OSObject *))v4->release)(v4);
    return 0;
  }
  return v4;
}

BOOL AppleBCMWLANChipManagerPCIe43452::initWithChip(OSObject *this, int a2)
{
  BOOL result = AppleBCMWLANChipManagerPCIe::init(this);
  if (result)
  {
    AppleBCMWLANChipManagerPCIe::setOTPCoreID((uint64_t)this, 0);
    AppleBCMWLANChipManagerPCIe::setAWDLSupported((AppleBCMWLANChipManagerPCIe *)this, 1);
    AppleBCMWLANChipManagerPCIe::setChipNumber((uint64_t)this, a2);
    AppleBCMWLANChipManagerPCIe::setCoreCount((uint64_t)this, 6);
    AppleBCMWLANChipManagerPCIe::setCoreRegionList((uint64_t)this, (uint64_t)&kBCOM43452ChipCores);
    AppleBCMWLANChipManagerPCIe::setWrapperCount((uint64_t)this, 11);
    AppleBCMWLANChipManagerPCIe::setWrapperRegionList((uint64_t)this, (uint64_t)&kBCOM43452ChipWrappers);
    AppleBCMWLANChipManagerPCIe::setMemoryCount((uint64_t)this, 7);
    AppleBCMWLANChipManagerPCIe::setMemoryRegionList((uint64_t)this, (uint64_t)&kBCOM43452ChipMemories);
    AppleBCMWLANChipManagerPCIe::setBackplaneWindows((uint64_t)this, (uint64_t)&kBCOM43452ChipBackplaneWindows);
    AppleBCMWLANChipManagerPCIe::setBackplaneWindowCount((uint64_t)this, 8);
    AppleBCMWLANChipManagerPCIe::setUserOTPRange((uint64_t)this, (uint64_t)&kBCOM43452ChipUserOTP);
    AppleBCMWLANChipManagerPCIe::setChipOTPRange((uint64_t)this, (uint64_t)&kBCOM43452ChipOTP);
    AppleBCMWLANChipManagerPCIe::setCoreIDTable((uint64_t)this, kBCOM43452CoreIDTable);
    AppleBCMWLANChipManagerPCIe::setUCodeRegionInfo((uint64_t)this, (uint64_t)&kBCOM43452UCodeSCRRegionInfo, 0);
    AppleBCMWLANChipManagerPCIe::setUCodeRegionInfo((uint64_t)this, (uint64_t)&kBCOM43452UCodeSHMRegionInfo, 1);
    AppleBCMWLANChipManagerPCIe::setConfigSpaceSaveRange((uint64_t)this, (uint64_t)&kBCOM43452ChipConfigSpaceStateTable);
    AppleBCMWLANChipManagerPCIe::setConfigSpaceSaveCount((uint64_t)this, 3);
    AppleBCMWLANChipManagerPCIe::setNotSplitArchitecture((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setBootMSIUnsupported((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setMultiFunctionChip((uint64_t)this, 0);
    AppleBCMWLANChipManagerPCIe::setSafeToCaptureSoCRAM((uint64_t)this, 0);
    AppleBCMWLANChipManagerPCIe::setTrapBeforeFLRUnSupported((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setBMEDisableUnSupported((uint64_t)this, 1);
    int v10 = 0;
    while (1)
    {
      uint64_t BackplaneWindows = AppleBCMWLANChipManagerPCIe::getBackplaneWindows((AppleBCMWLANChipManagerPCIe *)this);
      unsigned int PacketCount = AppleBCMWLANPCIeFlowQueue::getPacketCount((AppleBCMWLANPCIeFlowQueue *)this);
      if (!AppleBCMWLANChipManagerPCIe::findRemappableWindow(BackplaneWindows, PacketCount, 0, &v10)) {
        break;
      }
      AppleBCMWLANChipManagerPCIe::incrementCoreRemapperCount((uint64_t)this);
    }
    int v10 = 0;
    while (1)
    {
      uint64_t v7 = AppleBCMWLANChipManagerPCIe::getBackplaneWindows((AppleBCMWLANChipManagerPCIe *)this);
      unsigned int v8 = AppleBCMWLANPCIeFlowQueue::getPacketCount((AppleBCMWLANPCIeFlowQueue *)this);
      if (!AppleBCMWLANChipManagerPCIe::findRemappableWindow(v7, v8, 1, &v10)) {
        break;
      }
      AppleBCMWLANChipManagerPCIe::incrementWrapperRemapperCount((uint64_t)this);
    }
    uint64_t v9 = OSDictionary::withCapacity(0x20u);
    return AppleBCMWLANChipManagerPCIe::setChipProvisioningData((AppleBCMWLANChipManagerPCIe *)this, v9);
  }
  return result;
}

BOOL non-virtual thunk to'AppleBCMWLANChipManagerPCIe43452::initWithChip(AppleBCMWLANChipManagerPCIe43452 *this, int a2)
{
  return AppleBCMWLANChipManagerPCIe43452::initWithChip((OSObject *)((char *)this - 56), a2);
}

void _GLOBAL__sub_I_AppleBCMWLANChipManagerPCIe43452_cpp()
{
  kNullRange = 0;
}

OSObject *AppleBCMWLANChipManagerPCIe4355::withChip(AppleBCMWLANChipManagerPCIe4355 *this, uint64_t a2)
{
  unsigned int v6 = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANChipManagerPCIe4355MetaClass, &v6)) {
    return 0;
  }
  int v4 = v6;
  if (v6
    && (((uint64_t (*)(OSObject *, AppleBCMWLANChipManagerPCIe4355 *, uint64_t))v6->OSMetaClassBase::__vftable[4].isEqualTo)(v6, this, a2) & 1) == 0)
  {
    ((void (*)(OSObject *))v4->release)(v4);
    return 0;
  }
  return v4;
}

BOOL AppleBCMWLANChipManagerPCIe4355::initWithChip(OSObject *this, int a2, int a3)
{
  BOOL result = AppleBCMWLANChipManagerPCIe::init(this);
  if (result)
  {
    AppleBCMWLANChipManagerPCIe::setOTPCoreID((uint64_t)this, 0);
    AppleBCMWLANChipManagerPCIe::setAWDLSupported((AppleBCMWLANChipManagerPCIe *)this, 1);
    AppleBCMWLANChipManagerPCIe::setChipNumber((uint64_t)this, a2);
    AppleBCMWLANChipManagerPCIe::setCoreCount((uint64_t)this, 6);
    AppleBCMWLANChipManagerPCIe::setCoreRegionList((uint64_t)this, (uint64_t)&kBCOM4355ChipCores);
    AppleBCMWLANChipManagerPCIe::setWrapperCount((uint64_t)this, 11);
    AppleBCMWLANChipManagerPCIe::setWrapperRegionList((uint64_t)this, (uint64_t)&kBCOM4355ChipWrappers);
    int v7 = 1441792;
    unsigned int v8 = &kBCOM4355C0ChipMemories;
    if (a3 != 12 && a3 != 10)
    {
      if (a3 != 8) {
        AppleBCMWLANChipManagerPCIe4355::initWithChip(this);
      }
      int v7 = 1572864;
      unsigned int v8 = &kBCOM4355ChipMemories;
    }
    AppleBCMWLANChipManagerPCIe::setMemoryCount((uint64_t)this, 7);
    AppleBCMWLANChipManagerPCIe::setMemoryRegionList((uint64_t)this, (uint64_t)v8);
    AppleBCMWLANChipManagerPCIe::setMemoryRAMAddress((uint64_t)this, v7);
    AppleBCMWLANChipManagerPCIe::setBackplaneWindowCount((uint64_t)this, 8);
    AppleBCMWLANChipManagerPCIe::setBackplaneWindows((uint64_t)this, (uint64_t)&kBCOM4355ChipBackplaneWindows);
    AppleBCMWLANChipManagerPCIe::setUserOTPRange((uint64_t)this, (uint64_t)&kBCOM4355ChipUserOTP);
    AppleBCMWLANChipManagerPCIe::setChipOTPRange((uint64_t)this, (uint64_t)&kBCOM4355ChipOTP);
    AppleBCMWLANChipManagerPCIe::setCoreIDTable((uint64_t)this, kBCOM4355CoreIDTable);
    AppleBCMWLANChipManagerPCIe::setUCodeRegionInfo((uint64_t)this, (uint64_t)&kBCOM4355UCodeSCRRegionInfo, 0);
    AppleBCMWLANChipManagerPCIe::setUCodeRegionInfo((uint64_t)this, (uint64_t)&kBCOM4355UCodeSHMRegionInfo, 1);
    AppleBCMWLANChipManagerPCIe::setConfigSpaceSaveRange((uint64_t)this, (uint64_t)&kBCOM4355ChipConfigSpaceStateTable);
    AppleBCMWLANChipManagerPCIe::setConfigSpaceSaveCount((uint64_t)this, 3);
    AppleBCMWLANChipManagerPCIe::setPCIeHeaderLength((uint64_t)this, 128);
    AppleBCMWLANChipManagerPCIe::setSROMVersion((uint64_t)this, 17);
    AppleBCMWLANChipManagerPCIe::setSROMWordCount((uint64_t)this, 256);
    AppleBCMWLANChipManagerPCIe::setSROMSignature((uint64_t)this, 4355);
    int SROMWordCount = AppleBCMWLANChipManagerPCIe::getSROMWordCount((AppleBCMWLANChipManagerPCIe *)this);
    AppleBCMWLANChipManagerPCIe::setSROMoffsetVersion((uint64_t)this, 2 * SROMWordCount - 2);
    AppleBCMWLANChipManagerPCIe::setSROMoffsetSignature((uint64_t)this, 128);
    int SROMoffsetSignature = AppleBCMWLANChipManagerPCIe::getSROMoffsetSignature((AppleBCMWLANChipManagerPCIe *)this);
    AppleBCMWLANChipManagerPCIe::setSROMoffsetMacAddress((uint64_t)this, SROMoffsetSignature + 4);
    int SROMoffsetMacAddress = AppleBCMWLANChipManagerPCIe::getSROMoffsetMacAddress((AppleBCMWLANChipManagerPCIe *)this);
    AppleBCMWLANChipManagerPCIe::setSROMoffsetSKU((uint64_t)this, SROMoffsetMacAddress + 6);
    AppleBCMWLANChipManagerPCIe::setTrapBeforeFLRUnSupported((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setBMEDisableUnSupported((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setNotSplitArchitecture((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setBootMSIUnsupported((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setMultiFunctionChip((uint64_t)this, 0);
    AppleBCMWLANChipManagerPCIe::setSafeToCaptureSoCRAM((uint64_t)this, 1);
    int v17 = 0;
    while (1)
    {
      uint64_t BackplaneWindows = AppleBCMWLANChipManagerPCIe::getBackplaneWindows((AppleBCMWLANChipManagerPCIe *)this);
      unsigned int PacketCount = AppleBCMWLANPCIeFlowQueue::getPacketCount((AppleBCMWLANPCIeFlowQueue *)this);
      if (!AppleBCMWLANChipManagerPCIe::findRemappableWindow(BackplaneWindows, PacketCount, 0, &v17)) {
        break;
      }
      AppleBCMWLANChipManagerPCIe::incrementCoreRemapperCount((uint64_t)this);
    }
    int v17 = 0;
    while (1)
    {
      uint64_t v14 = AppleBCMWLANChipManagerPCIe::getBackplaneWindows((AppleBCMWLANChipManagerPCIe *)this);
      unsigned int v15 = AppleBCMWLANPCIeFlowQueue::getPacketCount((AppleBCMWLANPCIeFlowQueue *)this);
      if (!AppleBCMWLANChipManagerPCIe::findRemappableWindow(v14, v15, 1, &v17)) {
        break;
      }
      AppleBCMWLANChipManagerPCIe::incrementWrapperRemapperCount((uint64_t)this);
    }
    unsigned int v16 = OSDictionary::withCapacity(0x20u);
    return AppleBCMWLANChipManagerPCIe::setChipProvisioningData((AppleBCMWLANChipManagerPCIe *)this, v16);
  }
  return result;
}

BOOL non-virtual thunk to'AppleBCMWLANChipManagerPCIe4355::initWithChip(AppleBCMWLANChipManagerPCIe4355 *this, int a2, int a3)
{
  return AppleBCMWLANChipManagerPCIe4355::initWithChip((OSObject *)((char *)this - 56), a2, a3);
}

void _GLOBAL__sub_I_AppleBCMWLANChipManagerPCIe4355_cpp()
{
  kNullRange = 0;
}

OSObject *AppleBCMWLANChipManagerPCIe4399::withChip(AppleBCMWLANChipManagerPCIe4399 *this, uint64_t a2)
{
  unsigned int v6 = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANChipManagerPCIe4399MetaClass, &v6)) {
    return 0;
  }
  int v4 = v6;
  if (v6
    && (((uint64_t (*)(OSObject *, AppleBCMWLANChipManagerPCIe4399 *, uint64_t))v6->OSMetaClassBase::__vftable[4].isEqualTo)(v6, this, a2) & 1) == 0)
  {
    ((void (*)(OSObject *))v4->release)(v4);
    return 0;
  }
  return v4;
}

BOOL AppleBCMWLANChipManagerPCIe4399::initWithChip(OSObject *this, int a2)
{
  BOOL result = AppleBCMWLANChipManagerPCIe::init(this);
  if (result)
  {
    AppleBCMWLANChipManagerPCIe::setOTPCoreID((uint64_t)this, 0);
    AppleBCMWLANChipManagerPCIe::setAWDLSupported((AppleBCMWLANChipManagerPCIe *)this, 1);
    AppleBCMWLANChipManagerPCIe::setChipNumber((uint64_t)this, a2);
    AppleBCMWLANChipManagerPCIe::setCoreCount((uint64_t)this, 8);
    AppleBCMWLANChipManagerPCIe::setCoreRegionList((uint64_t)this, (uint64_t)&kBCOM4399ChipCores);
    AppleBCMWLANChipManagerPCIe::setWrapperCount((uint64_t)this, 21);
    AppleBCMWLANChipManagerPCIe::setWrapperRegionList((uint64_t)this, (uint64_t)&kBCOM4399ChipWrappers);
    AppleBCMWLANChipManagerPCIe::setMemoryCount((uint64_t)this, 7);
    AppleBCMWLANChipManagerPCIe::setMemoryRegionList((uint64_t)this, (uint64_t)&kBCOM4399ChipMemories);
    AppleBCMWLANChipManagerPCIe::setBackplaneWindowCount((uint64_t)this, 8);
    AppleBCMWLANChipManagerPCIe::setBackplaneWindows((uint64_t)this, (uint64_t)&kBCOM4399ChipBackplaneWindows);
    AppleBCMWLANChipManagerPCIe::setOTPCoreID((uint64_t)this, 8);
    AppleBCMWLANChipManagerPCIe::setUserOTPRange((uint64_t)this, (uint64_t)&kBCOM4399ChipUserOTP);
    AppleBCMWLANChipManagerPCIe::setChipOTPRange((uint64_t)this, (uint64_t)&kBCOM4399ChipOTP);
    AppleBCMWLANChipManagerPCIe::setCoreIDTable((uint64_t)this, kBCOM4399CoreIDTable);
    AppleBCMWLANChipManagerPCIe::setUCodeRegionInfo((uint64_t)this, (uint64_t)&kBCOM4399UCodeSCRRegionInfo, 0);
    AppleBCMWLANChipManagerPCIe::setUCodeRegionInfo((uint64_t)this, (uint64_t)&kBCOM4399UCodeSHMRegionInfo, 1);
    AppleBCMWLANChipManagerPCIe::setConfigSpaceSaveRange((uint64_t)this, (uint64_t)&kBCOM4399ChipConfigSpaceStateTable);
    AppleBCMWLANChipManagerPCIe::setConfigSpaceSaveCount((uint64_t)this, 3);
    AppleBCMWLANChipManagerPCIe::setMemoryRAMAddress((uint64_t)this, 2752512);
    AppleBCMWLANChipManagerPCIe::setPCIeHeaderLength((uint64_t)this, 256);
    AppleBCMWLANChipManagerPCIe::setSROMVersion((uint64_t)this, 16);
    AppleBCMWLANChipManagerPCIe::setSROMWordCount((uint64_t)this, 1024);
    AppleBCMWLANChipManagerPCIe::setSROMSignature((uint64_t)this, 4399);
    AppleBCMWLANChipManagerPCIe::setMultiFunctionChip((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setSafeToCaptureSoCRAM((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setHMAPSupported((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setHMAPBaseAddress((uint64_t)this, 1408);
    AppleBCMWLANChipManagerPCIe::sethostWakeToggleNotConfigured((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setM2MResetOnSSResetDisabled((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setPowerControlRequired((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setPTMSupport((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setFatalErrorIndicationSupported((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setCoexCPUTrapSupported((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setsysmemEnabled((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setCacheCoherency((uint64_t)this, 1);
    int v10 = 0;
    while (1)
    {
      uint64_t BackplaneWindows = AppleBCMWLANChipManagerPCIe::getBackplaneWindows((AppleBCMWLANChipManagerPCIe *)this);
      unsigned int PacketCount = AppleBCMWLANPCIeFlowQueue::getPacketCount((AppleBCMWLANPCIeFlowQueue *)this);
      if (!AppleBCMWLANChipManagerPCIe::findRemappableWindow(BackplaneWindows, PacketCount, 0, &v10)) {
        break;
      }
      AppleBCMWLANChipManagerPCIe::incrementCoreRemapperCount((uint64_t)this);
    }
    int v10 = 0;
    while (1)
    {
      uint64_t v7 = AppleBCMWLANChipManagerPCIe::getBackplaneWindows((AppleBCMWLANChipManagerPCIe *)this);
      unsigned int v8 = AppleBCMWLANPCIeFlowQueue::getPacketCount((AppleBCMWLANPCIeFlowQueue *)this);
      if (!AppleBCMWLANChipManagerPCIe::findRemappableWindow(v7, v8, 1, &v10)) {
        break;
      }
      AppleBCMWLANChipManagerPCIe::incrementWrapperRemapperCount((uint64_t)this);
    }
    uint64_t v9 = OSDictionary::withCapacity(0x20u);
    return AppleBCMWLANChipManagerPCIe::setChipProvisioningData((AppleBCMWLANChipManagerPCIe *)this, v9);
  }
  return result;
}

BOOL non-virtual thunk to'AppleBCMWLANChipManagerPCIe4399::initWithChip(AppleBCMWLANChipManagerPCIe4399 *this, int a2)
{
  return AppleBCMWLANChipManagerPCIe4399::initWithChip((OSObject *)((char *)this - 56), a2);
}

uint64_t AppleBCMWLANChipManagerPCIe4399::prepareHardware(AppleBCMWLANChipManagerPCIe4399 *this, AppleBCMWLANChipConfigSpace *a2, AppleBCMWLANChipBackplane *a3)
{
  uint64_t v3 = 3758097090;
  unsigned int v6 = 0;
  if (a2 && a3)
  {
    if (AppleBCMWLANChipBackplane::readGCICoreReg32(a3, 0xE64u, &v6))
    {
      return 3758097098;
    }
    else
    {
      unsigned int v6 = v6 & 0xFFFFFFFC | 1;
      AppleBCMWLANChipBackplane::writeGCICoreReg32(a3, 0xE64u, v6);
      return 0;
    }
  }
  return v3;
}

uint64_t AppleBCMWLANChipManagerPCIe4399::checkHardware(AppleBCMWLANChipManagerPCIe4399 *this, AppleBCMWLANChipConfigSpace *a2, AppleBCMWLANChipBackplane *a3)
{
  unsigned int v6 = 0;
  uint64_t result = 3758097090;
  if (a2 && a3)
  {
    AppleBCMWLANChipBackplane::writeGCICoreReg32(a3, 0x40u, 4u);
    if (AppleBCMWLANChipBackplane::readGCICoreReg32(a3, 0x204u, &v6) || (v6 & 0x4000) != 0)
    {
      return 3758097098;
    }
    else
    {
      int v5 = AppleBCMWLANChipBackplane::readGCICoreReg32(a3, 0x40u, &v6);
      uint64_t result = 3758097098;
      if (!v5)
      {
        if (v6 == 4) {
          return 0;
        }
        else {
          return 3758097098;
        }
      }
    }
  }
  return result;
}

void *AppleBCMWLANChipManagerPCIe4399::getFWDebugARMCoreRegionTable(AppleBCMWLANChipManagerPCIe4399 *this)
{
  return &kBCOM4399FWDebugARMCoreRanges;
}

void *non-virtual thunk to'AppleBCMWLANChipManagerPCIe4399::getFWDebugARMCoreRegionTable(AppleBCMWLANChipManagerPCIe4399 *this)
{
  return &kBCOM4399FWDebugARMCoreRanges;
}

uint64_t AppleBCMWLANChipManagerPCIe4399::getFWDebugARMCoreRegionTableSize(AppleBCMWLANChipManagerPCIe4399 *this)
{
  return 4;
}

uint64_t non-virtual thunk to'AppleBCMWLANChipManagerPCIe4399::getFWDebugARMCoreRegionTableSize(AppleBCMWLANChipManagerPCIe4399 *this)
{
  return 4;
}

void *AppleBCMWLANChipManagerPCIe4399::getFWDebugCommonCoreRegionTable(AppleBCMWLANChipManagerPCIe4399 *this)
{
  return &kBCOM4399FWDebugCommonCoreRanges;
}

void *non-virtual thunk to'AppleBCMWLANChipManagerPCIe4399::getFWDebugCommonCoreRegionTable(AppleBCMWLANChipManagerPCIe4399 *this)
{
  return &kBCOM4399FWDebugCommonCoreRanges;
}

uint64_t AppleBCMWLANChipManagerPCIe4399::getFWDebugCommonCoreRegionTableSize(AppleBCMWLANChipManagerPCIe4399 *this)
{
  return 3;
}

uint64_t non-virtual thunk to'AppleBCMWLANChipManagerPCIe4399::getFWDebugCommonCoreRegionTableSize(AppleBCMWLANChipManagerPCIe4399 *this)
{
  return 3;
}

void *AppleBCMWLANChipManagerPCIe4399::getFWDebugPMUCoreRegionTable(AppleBCMWLANChipManagerPCIe4399 *this)
{
  return &kBCOM4399FWDebugPMUCoreRanges;
}

void *non-virtual thunk to'AppleBCMWLANChipManagerPCIe4399::getFWDebugPMUCoreRegionTable(AppleBCMWLANChipManagerPCIe4399 *this)
{
  return &kBCOM4399FWDebugPMUCoreRanges;
}

uint64_t AppleBCMWLANChipManagerPCIe4399::getFWDebugPMUCoreRegionTableSize(AppleBCMWLANChipManagerPCIe4399 *this)
{
  return 2;
}

uint64_t non-virtual thunk to'AppleBCMWLANChipManagerPCIe4399::getFWDebugPMUCoreRegionTableSize(AppleBCMWLANChipManagerPCIe4399 *this)
{
  return 2;
}

void *AppleBCMWLANChipManagerPCIe4399::getFWDebugPCIEFunc0CoreRegionTable(AppleBCMWLANChipManagerPCIe4399 *this)
{
  return &kBCOM4399FWDebugPCIEFunc0CoreRanges;
}

void *non-virtual thunk to'AppleBCMWLANChipManagerPCIe4399::getFWDebugPCIEFunc0CoreRegionTable(AppleBCMWLANChipManagerPCIe4399 *this)
{
  return &kBCOM4399FWDebugPCIEFunc0CoreRanges;
}

uint64_t AppleBCMWLANChipManagerPCIe4399::getFWDebugPCIEFunc0CoreRegionTableSize(AppleBCMWLANChipManagerPCIe4399 *this)
{
  return 1;
}

uint64_t non-virtual thunk to'AppleBCMWLANChipManagerPCIe4399::getFWDebugPCIEFunc0CoreRegionTableSize(AppleBCMWLANChipManagerPCIe4399 *this)
{
  return 1;
}

uint64_t AppleBCMWLANChipManagerPCIe4399::getDARSecurityStatusReg(AppleBCMWLANChipManagerPCIe4399 *this, AppleBCMWLANChipBackplane *a2)
{
  unsigned int v7 = 0;
  int v3 = AppleBCMWLANChipBackplane::readPCIeCoreReg32(a2, 2676, &v7);
  if (v3)
  {
    int v4 = v3;
    unsigned int v7 = 0;
    if ((*(uint64_t (**)(AppleBCMWLANChipManagerPCIe4399 *))(*(void *)this + 72))(this))
    {
      (*(void (**)(AppleBCMWLANChipManagerPCIe4399 *))(*(void *)this + 72))(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANChipManagerPCIe4399 *))(*(void *)this + 72))(this);
        CCLogStream::logAlert(v6, "[dk] %s@%d:DAR Security Status Register Read failed - 0x%x\n", "getDARSecurityStatusReg", 290, v4);
      }
    }
  }
  return v7;
}

uint64_t non-virtual thunk to'AppleBCMWLANChipManagerPCIe4399::getDARSecurityStatusReg(AppleBCMWLANChipManagerPCIe4399 *this, AppleBCMWLANChipBackplane *a2)
{
  return AppleBCMWLANChipManagerPCIe4399::getDARSecurityStatusReg((AppleBCMWLANChipManagerPCIe4399 *)((char *)this - 56), a2);
}

uint64_t AppleBCMWLANChipManagerPCIe4399::isSecureBootSupported(AppleBCMWLANChipManagerPCIe4399 *this)
{
  return 1;
}

uint64_t non-virtual thunk to'AppleBCMWLANChipManagerPCIe4399::isSecureBootSupported(AppleBCMWLANChipManagerPCIe4399 *this)
{
  return 1;
}

uint64_t AppleBCMWLANChipManagerPCIe4399::hasMNIInterface(AppleBCMWLANChipManagerPCIe4399 *this)
{
  return 1;
}

uint64_t non-virtual thunk to'AppleBCMWLANChipManagerPCIe4399::hasMNIInterface(AppleBCMWLANChipManagerPCIe4399 *this)
{
  return 1;
}

void _GLOBAL__sub_I_AppleBCMWLANChipManagerPCIe4399_cpp()
{
  kNullRange = 0;
}

OSObject *AppleBCMWLANJoinAdapter::withDriver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v8 = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANJoinAdapterMetaClass, &v8)) {
    return 0;
  }
  unsigned int v6 = v8;
  if (v8
    && (((uint64_t (*)(OSObject *, uint64_t, uint64_t, uint64_t))v8->OSMetaClassBase::__vftable[1].getMetaClass)(v8, a1, a2, a3) & 1) == 0)
  {
    ((void (*)(OSObject *))v6->release)(v6);
    return 0;
  }
  return v6;
}

void AppleBCMWLANJoinAdapter::free(void **this)
{
  if (this[6])
  {
    AppleBCMWLANJoinAdapter::freeResources((AppleBCMWLANJoinAdapter *)this);
    memset_s(this[6], 0x738uLL, 0, 0x738uLL);
    uint64_t v2 = this[6];
    if (v2)
    {
      IOFree(v2, 0x738uLL);
      this[6] = 0;
    }
  }
  OSObject::free((OSObject *)this);
}

uint64_t AppleBCMWLANJoinAdapter::freeResources(AppleBCMWLANJoinAdapter *this)
{
  uint64_t v2 = (void *)*((void *)this + 6);
  uint64_t v3 = v2[8];
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    *(void *)(*((void *)this + 6) + 64) = 0;
    uint64_t v2 = (void *)*((void *)this + 6);
  }
  uint64_t v4 = v2[9];
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
    *(void *)(*((void *)this + 6) + 72) = 0;
    uint64_t v2 = (void *)*((void *)this + 6);
  }
  uint64_t v5 = v2[11];
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    *(void *)(*((void *)this + 6) + 88) = 0;
    uint64_t v2 = (void *)*((void *)this + 6);
  }
  uint64_t v6 = v2[6];
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    *(void *)(*((void *)this + 6) + 48) = 0;
    uint64_t v2 = (void *)*((void *)this + 6);
  }
  uint64_t result = v2[10];
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    *(void *)(*((void *)this + 6) + 80) = 0;
  }
  return result;
}

void non-virtual thunk to'AppleBCMWLANJoinAdapter::free(void **this)
{
}

uint64_t AppleBCMWLANJoinAdapter::isJoining(AppleBCMWLANJoinAdapter *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 1);
}

uint64_t AppleBCMWLANJoinAdapter::performJoin(AppleBCMWLANJoinAdapter *a1, uint64_t a2)
{
  uint64_t v2 = (void *)((char *)a1 + 48);
  *(unsigned char *)(*((void *)a1 + 6) + AppleBCMWLANJoinAdapter::free(this - 3) = 0;
  *(unsigned char *)(*((void *)a1 + 6) + 4) = 0;
  *(_DWORD *)(*((void *)a1 + 6) + 1840) = 0;
  uint64_t v3 = *((void *)a1 + 6);
  *(unsigned char *)(v3 + 625) = 0;
  *(_OWORD *)(v3 + 59AppleBCMWLANJoinAdapter::free(this - 3) = 0u;
  *(_OWORD *)(v3 + 609) = 0u;
  *(_OWORD *)(v3 + 561) = 0u;
  *(_OWORD *)(v3 + 577) = 0u;
  *(_OWORD *)(v3 + 529) = 0u;
  *(_OWORD *)(v3 + 545) = 0u;
  *(_OWORD *)(v3 + 497) = 0u;
  *(_OWORD *)(v3 + 51AppleBCMWLANJoinAdapter::free(this - 3) = 0u;
  *(_OWORD *)(v3 + 465) = 0u;
  *(_OWORD *)(v3 + 481) = 0u;
  *(_OWORD *)(v3 + 43AppleBCMWLANJoinAdapter::free(this - 3) = 0u;
  *(_OWORD *)(v3 + 449) = 0u;
  *(_OWORD *)(v3 + 401) = 0u;
  *(_OWORD *)(v3 + 417) = 0u;
  *(_OWORD *)(v3 + 369) = 0u;
  *(_OWORD *)(v3 + 385) = 0u;
  uint64_t v4 = *((void *)a1 + 6);
  if (*(unsigned char *)v4) {
    return 3766625285;
  }
  if (AppleBCMWLANCore::isConcurrencyEnabled(*(AppleBCMWLANCore **)(v4 + 56))
    && AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(*v2 + 56), 4))
  {
    AppleBCMWLANCore::setSoftAPPowerState(*(void *)(*v2 + 56), 1u, 5u);
  }
  if (AppleBCMWLANCore::checkFor4WayHSProtectionSupport(*(AppleBCMWLANCore **)(*v2 + 56))) {
    AppleBCMWLANJoinAdapter::set4WayHandshakeProtection(a1, 1, (*(unsigned __int16 *)(a2 + 480) >> 5) & 1);
  }
  unsigned int v9 = *(unsigned __int16 *)(a2 + 480);
  if ((v9 & 6) != 0)
  {
    int v10 = v9 & 2 | (v9 >> 2) & 1;
    AppleBCMWLANJoinAdapter::addInstantHSAppleDeviceIE(a1, 1, v9 & 2 | ((v9 & 4) != 0));
    OSNumberPtr v11 = *(IO80211BssManager **)(*((void *)a1 + 6) + 48);
    BOOL v12 = v10 != 0;
  }
  else
  {
    AppleBCMWLANJoinAdapter::addInstantHSAppleDeviceIE(a1, 0, 0);
    OSNumberPtr v11 = *(IO80211BssManager **)(*((void *)a1 + 6) + 48);
    BOOL v12 = 0;
  }
  IO80211BssManager::setAssociateToHotspotInWoWMode(v11, v12);
  int v13 = isMemZero((const char *)(a2 + 214), *(unsigned __int16 *)(a2 + 212));
  if (*(void *)(*v2 + 72) && CCLogStream::shouldLog())
  {
    OSNumberPtr v38 = "nonzero";
    if (v13) {
      OSNumberPtr v38 = "all zeros";
    }
    CCLogStream::logAlertIf(*(CCLogStream **)(*v2 + 72), 0x800uLL, "[dk] %s@%d:RSN IE has len %d, is %s\n", "performJoin", 203, *(unsigned __int16 *)(a2 + 212), v38);
  }
  uint64_t v14 = AppleBCMWLANJoinAdapter::customUnAssocDwell(a1, *(_DWORD *)(a2 + 4));
  if (v14)
  {
    uint64_t v5 = v14;
    if (*(void *)(*v2 + 72) && CCLogStream::shouldLog())
    {
      unsigned int v15 = *(CCLogStream **)(*v2 + 72);
      (*(void (**)(void, uint64_t))(**(void **)(*v2 + 56) + 112))(*(void *)(*v2 + 56), v5);
      CCLogStream::logAlert(v15, "[dk] %s@%d: Failure to configureDwellForAssociation: %s\n");
    }
    return v5;
  }
  unsigned int v139 = 0;
  uint64_t v5 = AppleBCMWLANJoinAdapter::clearWepKeysSync(a1);
  if (v5) {
    return v5;
  }
  uint64_t v16 = mapAppleAPModeToBcomBssType(&v139, *(unsigned __int16 *)(a2 + 12));
  if (v16)
  {
    uint64_t v5 = v16;
    if (!*(void *)(*v2 + 72) || !CCLogStream::shouldLog()) {
      return v5;
    }
    int v17 = *(CCLogStream **)(*v2 + 72);
    uint64_t v125 = *(unsigned __int16 *)(a2 + 12);
    uint64_t v126 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*v2 + 56) + 112))(*(void *)(*v2 + 56), v5);
    uint64_t v124 = 226;
    BOOL v18 = "[dk] %s@%d: mapAppleAPModeToBcomBssType(%d) failed, error %s\n";
LABEL_23:
    uint64_t v19 = v17;
LABEL_29:
    CCLogStream::logCrit(v19, v18, "performJoin", v124, v125, v126, v127);
    return v5;
  }
  *(unsigned char *)(*v2 + 5) = *(unsigned __int16 *)(a2 + 12) == 1;
  int v20 = *(AppleBCMWLANCommander **)(*v2 + 64);
  unint64_t v137 = &v139;
  uint64_t v138 = 4;
  uint64_t v21 = AppleBCMWLANCommander::runIOCtlSet(v20, 20, (uint64_t)&v137, 0, 0);
  uint64_t v22 = *v2;
  if (v21)
  {
    uint64_t v5 = v21;
    if (!*(void *)(v22 + 72) || !CCLogStream::shouldLog()) {
      return v5;
    }
    unint64_t v23 = *(CCLogStream **)(*v2 + 72);
    uint64_t v125 = v139;
    uint64_t v126 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*v2 + 56) + 112))(*(void *)(*v2 + 56), v5);
    uint64_t v124 = 235;
    BOOL v18 = "[dk] %s@%d: WLC_SET_INFRA(%lu) failed, error %s\n";
LABEL_28:
    uint64_t v19 = v23;
    goto LABEL_29;
  }
  if (!*(unsigned char *)(v22 + 5))
  {
    v136[1] = 1;
    unsigned __int16 v26 = *(AppleBCMWLANCommander **)(v22 + 64);
    unint64_t v137 = &v136[1];
    uint64_t v138 = 4;
    uint64_t v27 = AppleBCMWLANCommander::runIOVarSet(v26, (uint64_t)"sup_wpa", (uint64_t)&v137, 0, 0);
    if (v27)
    {
      uint64_t v5 = v27;
      if (*(void *)(*v2 + 72) && CCLogStream::shouldLog())
      {
        unint64_t v28 = *(CCLogStream **)(*v2 + 72);
        (*(void (**)(void, uint64_t))(**(void **)(*v2 + 56) + 112))(*(void *)(*v2 + 56), v5);
        CCLogStream::logAlert(v28, "[dk] %s@%d:Failed to set iovar sup_wpa, %d[%s]\n");
      }
      return v5;
    }
  }
  uint64_t v24 = mapAppleLowerAuthToBcomAuth(&v139, *(_DWORD *)(a2 + 16));
  uint64_t v25 = *v2;
  if (v24)
  {
    uint64_t v5 = v24;
    if (!*(void *)(v25 + 72) || !CCLogStream::shouldLog()) {
      return v5;
    }
    int v17 = *(CCLogStream **)(*v2 + 72);
    uint64_t v125 = *(unsigned int *)(a2 + 16);
    uint64_t v126 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*v2 + 56) + 112))(*(void *)(*v2 + 56), v5);
    uint64_t v124 = 251;
    BOOL v18 = "[dk] %s@%d: mapAppleLowerAuthToBcomAuth(%d) failed, error %s\n";
    goto LABEL_23;
  }
  uint64_t v29 = *(AppleBCMWLANCommander **)(v25 + 64);
  unint64_t v137 = &v139;
  uint64_t v138 = 4;
  uint64_t v30 = AppleBCMWLANCommander::runIOCtlSet(v29, 22, (uint64_t)&v137, 0, 0);
  if (v30)
  {
    uint64_t v5 = v30;
    if (!*(void *)(*v2 + 72) || !CCLogStream::shouldLog()) {
      return v5;
    }
    unint64_t v23 = *(CCLogStream **)(*v2 + 72);
    uint64_t v125 = v139;
    uint64_t v126 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*v2 + 56) + 112))(*(void *)(*v2 + 56), v5);
    uint64_t v124 = 259;
    BOOL v18 = "[dk] %s@%d: WLC_SET_AUTH(%lu) failed, error %s\n";
    goto LABEL_28;
  }
  int v31 = *(_DWORD *)(a2 + 20);
  int v32 = AppleBCMWLANCore::checkForWPA3SAESupport(*(AppleBCMWLANCore **)(*v2 + 56));
  unsigned __int8 v33 = AppleBCMWLANCore::checkForOWESupport(*(AppleBCMWLANCore **)(*v2 + 56));
  uint64_t v34 = mapAppleUpperAuthToBcomWpaAuth(&v139, v31, v32, v33, *(_DWORD *)(a2 + 24));
  uint64_t v35 = *v2;
  if (v34)
  {
    uint64_t v5 = v34;
    if (!*(void *)(v35 + 72) || !CCLogStream::shouldLog()) {
      return v5;
    }
    int v17 = *(CCLogStream **)(*v2 + 72);
    uint64_t v125 = *(unsigned int *)(a2 + 20);
    uint64_t v126 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*v2 + 56) + 112))(*(void *)(*v2 + 56), v5);
    uint64_t v124 = 267;
    BOOL v18 = "[dk] %s@%d: mapAppleUpperAuthToBcomWpaAuth(%d) failed, error %s\n";
    goto LABEL_23;
  }
  if (AppleBCMWLANCore::checkForWPA3SAESupport(*(AppleBCMWLANCore **)(v35 + 56))
    && (v139 & 0x8080) != 0
    && (*(unsigned char *)(a2 + 531) & 0x40) != 0)
  {
    unsigned int v139 = v139 & 0xFFFB7F7F | 0x40000;
  }
  if (*(_DWORD *)(a2 + 24) == 1
    && AppleBCMWLANCore::checkForOWESupport(*(AppleBCMWLANCore **)(*v2 + 56)))
  {
    unsigned int v139 = 0;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(*(AppleBCMWLANCore **)(*v2 + 56), 116)
    && (v139 & 0x40000) != 0)
  {
    v139 |= 0x2000000u;
  }
  unsigned __int16 v36 = *(AppleBCMWLANCommander **)(*v2 + 64);
  unint64_t v137 = &v139;
  uint64_t v138 = 4;
  uint64_t v37 = AppleBCMWLANCommander::runIOCtlSet(v36, 165, (uint64_t)&v137, 0, 0);
  if (v37)
  {
    uint64_t v5 = v37;
    if (!*(void *)(*v2 + 72) || !CCLogStream::shouldLog()) {
      return v5;
    }
    unint64_t v23 = *(CCLogStream **)(*v2 + 72);
    uint64_t v125 = v139;
    uint64_t v126 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*v2 + 56) + 112))(*(void *)(*v2 + 56), v5);
    uint64_t v124 = 293;
    BOOL v18 = "[dk] %s@%d: WLC_SET_WPA_AUTH(%lu) failed, error %s\n";
    goto LABEL_28;
  }
  unsigned int v139 = *(_DWORD *)(a2 + 20) == 64;
  uint64_t v39 = mapAppleCipherToBcomWsecFlags(&v139, *(_DWORD *)(a2 + 72));
  if (v39)
  {
    uint64_t v5 = v39;
    if (!*(void *)(*v2 + 72) || !CCLogStream::shouldLog()) {
      return v5;
    }
    int v17 = *(CCLogStream **)(*v2 + 72);
    uint64_t v125 = *(unsigned int *)(a2 + 72);
    uint64_t v126 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*v2 + 56) + 112))(*(void *)(*v2 + 56), v5);
    uint64_t v124 = 306;
    BOOL v18 = "[dk] %s@%d: mapAppleCipherToBcomWsecFlags(%d) failed, error %s\n";
    goto LABEL_23;
  }
  uint64_t v40 = AppleBCMWLANConfigManager::setupFirmwareWithDTDefaults((AppleBCMWLANConfigManager *)&v139);
  if (v40)
  {
    uint64_t v5 = v40;
    if (!*(void *)(*v2 + 72) || !CCLogStream::shouldLog()) {
      return v5;
    }
    int v17 = *(CCLogStream **)(*v2 + 72);
    uint64_t v125 = *(unsigned int *)(a2 + 20);
    uint64_t v126 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*v2 + 56) + 112))(*(void *)(*v2 + 56), v5);
    uint64_t v124 = 312;
    BOOL v18 = "[dk] %s@%d: mapAppleUpperAuthToBcomWsecFlags(%d) failed, error %s\n";
    goto LABEL_23;
  }
  char v41 = v139;
  *(void *)uint64_t v136 = 0;
  unsigned int v134 = 1;
  unsigned int v135 = 0;
  uint64_t BcomPropertiesFromWPARSN = getBcomPropertiesFromWPARSN(&v136[1], v136, &v135, &v134, *(unsigned __int16 *)(a2 + 212), (unsigned __int8 *)(a2 + 214));
  if (BcomPropertiesFromWPARSN)
  {
    uint64_t v5 = BcomPropertiesFromWPARSN;
    if (!*(void *)(*v2 + 72) || !CCLogStream::shouldLog()) {
      return v5;
    }
    int v17 = *(CCLogStream **)(*v2 + 72);
    uint64_t v125 = *(unsigned __int16 *)(a2 + 212);
    uint64_t v126 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*v2 + 56) + 112))(*(void *)(*v2 + 56), v5);
    uint64_t v124 = 321;
    BOOL v18 = "[dk] %s@%d: getBcomPropertiesFromWPARSN(%u) failed, error %s\n";
    goto LABEL_23;
  }
  if (*(_DWORD *)(a2 + 24) == 1
    && AppleBCMWLANCore::checkForOWESupport(*(AppleBCMWLANCore **)(*v2 + 56)))
  {
    unsigned int v134 = 0;
    unsigned int v139 = 0;
  }
  uint64_t v43 = mapBcomAlgoToBcomWsecFlags(&v139, v136[1], v136[0]);
  uint64_t v44 = *v2;
  if (v43)
  {
    uint64_t v5 = v43;
    if (!*(void *)(v44 + 72) || !CCLogStream::shouldLog()) {
      return v5;
    }
    unint64_t v23 = *(CCLogStream **)(*v2 + 72);
    uint64_t v45 = v136[1];
    uint64_t v126 = v136[0];
    uint64_t v127 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*v2 + 56) + 112))(*(void *)(*v2 + 56), v5);
    uint64_t v124 = 333;
    uint64_t v125 = v45;
    BOOL v18 = "[dk] %s@%d: mapBcomAlgoToBcomWsecFlags(group %u, pairwise %d) failed, error %s\n";
    goto LABEL_28;
  }
  unsigned int v46 = *(AppleBCMWLANCommander **)(v44 + 64);
  unint64_t v137 = &v139;
  uint64_t v138 = 4;
  uint64_t v47 = AppleBCMWLANCommander::runIOCtlSet(v46, 134, (uint64_t)&v137, 0, 0);
  uint64_t v48 = *v2;
  if (v47)
  {
    uint64_t v5 = v47;
    if (!*(void *)(v48 + 72) || !CCLogStream::shouldLog()) {
      return v5;
    }
    unint64_t v23 = *(CCLogStream **)(*v2 + 72);
    uint64_t v125 = v139;
    uint64_t v126 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*v2 + 56) + 112))(*(void *)(*v2 + 56), v5);
    uint64_t v124 = 342;
    BOOL v18 = "[dk] %s@%d: WLC_SET_WSEC(%lu) failed, error %s\n";
    goto LABEL_28;
  }
  if ((AppleBCMWLANCore::useAppleRSNSupplicant(*(AppleBCMWLANCore **)(v48 + 56)) & 1) == 0 && *(_DWORD *)(a2 + 16) == 1)
  {
    int v49 = *(_DWORD *)(a2 + 20);
    if (v49 > 4095)
    {
      if (v49 >= 0x10000)
      {
        if (v49 != 0x20000 && v49 != 0x10000) {
          goto LABEL_101;
        }
      }
      else if (v49 != 4096 && v49 != 0x2000)
      {
        goto LABEL_101;
      }
    }
    else if ((v49 > 0x10 || ((1 << v49) & 0x10104) == 0) && v49 != 1024)
    {
      goto LABEL_101;
    }
    *(unsigned char *)(*v2 + AppleBCMWLANJoinAdapter::free(this - 3) = 1;
  }
LABEL_101:
  int v50 = *(_DWORD *)(a2 + 72);
  if ((v50 - 6) < 3)
  {
    if ((AppleBCMWLANCore::useAppleRSNSupplicant(*(AppleBCMWLANCore **)(*v2 + 56)) & 1) == 0)
    {
      uint64_t v52 = AppleBCMWLANJoinAdapter::setKey(a1, (_DWORD *)(a2 + 64), 0, 0, 0);
      if (v52)
      {
        uint64_t v5 = v52;
        if (!*(void *)(*v2 + 72) || !CCLogStream::shouldLog()) {
          return v5;
        }
        unint64_t v23 = *(CCLogStream **)(*v2 + 72);
        uint64_t v124 = 384;
        uint64_t v125 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*v2 + 56) + 112))(*(void *)(*v2 + 56), v5);
        BOOL v18 = "[dk] %s@%d: Failed to program the PMK, error %s\n";
        goto LABEL_28;
      }
    }
  }
  else if ((v50 - 1) >= 2)
  {
    if (v50 == 10 && (AppleBCMWLANCore::useAppleRSNSupplicant(*(AppleBCMWLANCore **)(*v2 + 56)) & 1) == 0)
    {
      unint64_t v53 = *(_DWORD *)(a2 + 492) ? a2 + 496 : 0;
      uint64_t v54 = AppleBCMWLANJoinAdapter::setKey(a1, (_DWORD *)(a2 + 64), 0, v53, (unsigned __int16)*(_DWORD *)(a2 + 492));
      if (v54)
      {
        uint64_t v5 = v54;
        if (!*(void *)(*v2 + 72) || !CCLogStream::shouldLog()) {
          return v5;
        }
        unint64_t v23 = *(CCLogStream **)(*v2 + 72);
        uint64_t v124 = 394;
        uint64_t v125 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*v2 + 56) + 112))(*(void *)(*v2 + 56), v5);
        BOOL v18 = "[dk] %s@%d: Failed to program the password, error %s\n";
        goto LABEL_28;
      }
    }
  }
  else
  {
    uint64_t v51 = AppleBCMWLANJoinAdapter::setKey(a1, (_DWORD *)(a2 + 64), 0, 0, 0);
    if (v51)
    {
      uint64_t v5 = v51;
      if (!*(void *)(*v2 + 72) || !CCLogStream::shouldLog()) {
        return v5;
      }
      unint64_t v23 = *(CCLogStream **)(*v2 + 72);
      uint64_t v124 = 374;
      uint64_t v125 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*v2 + 56) + 112))(*(void *)(*v2 + 56), v5);
      BOOL v18 = "[dk] %s@%d: Failed to program the WEP Key, error %s\n";
      goto LABEL_28;
    }
  }
  if ((v41 & 1) != 0 && *(_DWORD *)(a2 + 20) != 64 && *(_DWORD *)(a2 + 16) == 1) {
    AppleBCMWLANJoinAdapter::enableICVErrorEvents(a1);
  }
  if ((AppleBCMWLANCore::useAppleRSNSupplicant(*(AppleBCMWLANCore **)(*v2 + 56)) & 1) == 0)
  {
    if (*(_DWORD *)(a2 + 16) != 1) {
      goto LABEL_188;
    }
    int v57 = *(_DWORD *)(a2 + 20);
    if (v57 > 1023)
    {
      if (v57 >= 0x4000)
      {
        if (v57 < 0x10000)
        {
          if (v57 != 0x4000 && v57 != 0x8000) {
            goto LABEL_188;
          }
          goto LABEL_175;
        }
        if (v57 != 0x10000 && v57 != 0x20000) {
          goto LABEL_188;
        }
      }
      else if (v57 > 4095)
      {
        if (v57 != 4096 && v57 != 0x2000) {
          goto LABEL_188;
        }
      }
      else if (v57 != 1024)
      {
        if (v57 != 2048) {
          goto LABEL_188;
        }
        goto LABEL_175;
      }
    }
    else
    {
      if (v57 <= 15)
      {
        switch(v57)
        {
          case 0:
            if (*(_DWORD *)(a2 + 24) != 1) {
              goto LABEL_188;
            }
            goto LABEL_184;
          case 1:
          case 4:
            goto LABEL_175;
          case 2:
          case 8:
            goto LABEL_184;
          default:
            goto LABEL_188;
        }
      }
      if (v57 != 16)
      {
        if (v57 != 128)
        {
          if (v57 == 512)
          {
            int v133 = 0;
            uint64_t v59 = *(AppleBCMWLANCommander **)(*v2 + 64);
            unint64_t v137 = (unsigned int *)&v133;
            uint64_t v138 = 4;
            uint64_t v60 = AppleBCMWLANCommander::runIOVarSet(v59, (uint64_t)"sup_wpa_tmo", (uint64_t)&v137, 0, 0);
            if (v60)
            {
              uint64_t v5 = v60;
              if (*(void *)(*v2 + 72) && CCLogStream::shouldLog())
              {
                uint64_t v61 = *(CCLogStream **)(*v2 + 72);
                (*(void (**)(void, uint64_t))(**(void **)(*v2 + 56) + 112))(*(void *)(*v2 + 56), v5);
                CCLogStream::logAlert(v61, "[dk] %s@%d: Failure to disable supplicant timeout, %s\n");
              }
              return v5;
            }
          }
          goto LABEL_188;
        }
LABEL_175:
        *(unsigned char *)(*v2 + AppleBCMWLANJoinAdapter::free(this - 3) = 1;
        int v133 = 0;
        uint64_t v62 = *(AppleBCMWLANCommander **)(*v2 + 64);
        unint64_t v137 = (unsigned int *)&v133;
        uint64_t v138 = 4;
        uint64_t v63 = AppleBCMWLANCommander::runIOVarSet(v62, (uint64_t)"sup_wpa_tmo", (uint64_t)&v137, 0, 0);
        if (v63)
        {
          uint64_t v5 = v63;
          if (*(void *)(*v2 + 72) && CCLogStream::shouldLog())
          {
            uint64_t v64 = *(CCLogStream **)(*v2 + 72);
            (*(void (**)(void, uint64_t))(**(void **)(*v2 + 56) + 112))(*(void *)(*v2 + 56), v5);
            CCLogStream::logAlert(v64, "[dk] %s@%d: Failure to set iovar sup_wpa_tmo, %s\n");
          }
          return v5;
        }
        goto LABEL_188;
      }
    }
LABEL_184:
    *(unsigned char *)(*((void *)a1 + 6) + AppleBCMWLANJoinAdapter::free(this - 3) = 1;
    AppleBCMWLANJoinAdapter::enableSupplicantEvents(a1);
    int v133 = 6000;
    uint64_t v65 = *(AppleBCMWLANCommander **)(*((void *)a1 + 6) + 64);
    unint64_t v137 = (unsigned int *)&v133;
    uint64_t v138 = 4;
    uint64_t v66 = AppleBCMWLANCommander::runIOVarSet(v65, (uint64_t)"sup_wpa_tmo", (uint64_t)&v137, 0, 0);
    if (v66)
    {
      uint64_t v5 = v66;
      if (*(void *)(*v2 + 72) && CCLogStream::shouldLog())
      {
        unsigned __int16 v67 = *(CCLogStream **)(*v2 + 72);
        (*(void (**)(void, uint64_t))(**(void **)(*v2 + 56) + 112))(*(void *)(*v2 + 56), v5);
        CCLogStream::logAlert(v67, "[dk] %s@%d: Failure to set iovar sup_wpa_tmo, %d[%s]\n");
      }
      return v5;
    }
    goto LABEL_188;
  }
  unsigned int v55 = *(unsigned __int16 *)(a2 + 212);
  if (v55 >= 0x101) {
    unsigned int v55 = 257;
  }
  int v56 = *(_DWORD *)(a2 + 20);
  if (v56 <= 1023)
  {
    if ((v56 > 0x10 || ((1 << v56) & 0x10116) == 0) && v56 != 128 && v56 != 512) {
      goto LABEL_157;
    }
  }
  else if (v56 >= 0x4000)
  {
    if (v56 >= 0x10000)
    {
      if (v56 != 0x10000 && v56 != 0x20000) {
        goto LABEL_157;
      }
    }
    else if (v56 != 0x4000 && v56 != 0x8000)
    {
      goto LABEL_157;
    }
  }
  else if (v56 > 4095)
  {
    if (v56 != 4096 && v56 != 0x2000) {
      goto LABEL_157;
    }
  }
  else if (v56 != 1024 && v56 != 2048)
  {
LABEL_157:
    unsigned int v55 = 0;
  }
  uint64_t v58 = AppleBCMWLANJoinAdapter::setAssocRSNIE(a1, (const unsigned __int8 *)(a2 + 214), v55);
  if (v58)
  {
    uint64_t v5 = v58;
    if (!*(void *)(*v2 + 72) || !CCLogStream::shouldLog()) {
      return v5;
    }
    unint64_t v23 = *(CCLogStream **)(*v2 + 72);
    uint64_t v124 = 496;
    uint64_t v125 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*v2 + 56) + 112))(*(void *)(*v2 + 56), v5);
    BOOL v18 = "[dk] %s@%d: Failed to update Chip's RSN IE, %s\n";
    goto LABEL_28;
  }
LABEL_188:
  AppleBCMWLANPowerManager::configureMIMOPowerSaveForJoin(*(AppleBCMWLANPowerManager **)(*v2 + 88), HIBYTE(*(unsigned __int16 *)(a2 + 480)) & 1);
  unsigned int FirmwareInterfaceVersion = AppleBCMWLANCore::getFirmwareInterfaceVersion(*(AppleBCMWLANCore **)(*v2 + 56));
  if (FirmwareInterfaceVersion <= 0x14)
  {
    unsigned int v70 = AppleBCMWLANCore::getFirmwareInterfaceVersion(*(AppleBCMWLANCore **)(*v2 + 56));
    BOOL v131 = v70 > 0x10;
    uint64_t v69 = 72;
    if (v70 > 0x10) {
      uint64_t v69 = 76;
    }
  }
  else
  {
    BOOL v131 = 0;
    uint64_t v69 = 84;
  }
  size_t v130 = v69;
  BOOL v132 = (_DWORD *)IOMallocZeroData();
  if (!v132)
  {
    if (*(void *)(*v2 + 72) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*v2 + 72), "[dk] %s@%d:failed to allocate memory for join iovar, abort joining\n", "performJoin", 528);
    }
    return 3766625287;
  }
  bzero(v132, v130);
  if (FirmwareInterfaceVersion >= 0x15) {
    *((_WORD *)v132 + 18) = 3;
  }
  unsigned int v71 = *(_DWORD *)(a2 + 28);
  if (v71 >= 0x20) {
    size_t v72 = 32;
  }
  else {
    size_t v72 = v71;
  }
  *BOOL v132 = v72;
  memcpy(v132 + 1, (const void *)(a2 + 32), v72);
  bzero((void *)(*v2 + 644), 0x2A8uLL);
  if (*(_DWORD *)(a2 + 532))
  {
    unint64_t v73 = 0;
    uint64_t v74 = (_WORD *)(a2 + 552);
    uint64_t v75 = 664;
    do
    {
      uint64_t v76 = *v2 + v75;
      int v77 = *((_DWORD *)v74 - 3);
      *(_WORD *)(v76 - 8) = *(v74 - 4);
      *(_DWORD *)(v76 - 12) = v77;
      uint64_t v78 = *v2 + v75;
      int v79 = *(_DWORD *)(v74 - 3);
      *(_WORD *)(v78 - 2) = *(v74 - 1);
      *(_DWORD *)(v78 - 6) = v79;
      *(_WORD *)(*v2 + v75) = *v74;
      *(_WORD *)(*v2 + v75 - 18) = *(v74 - 7);
      ++v73;
      unint64_t v80 = *(unsigned int *)(a2 + 532);
      v75 += 68;
      v74 += 9;
    }
    while (v73 < v80);
  }
  else
  {
    LODWORD(v80) = 0;
  }
  int v81 = 2 * v80;
  if (FirmwareInterfaceVersion <= 0x14)
  {
    if (v131)
    {
      uint64_t v83 = (v81 + 52);
      BOOL v82 = (char *)v132 + v83;
      *((_WORD *)v132 + 2AppleBCMWLANJoinAdapter::free(this - 3) = v80;
    }
    else
    {
      uint64_t v83 = (v81 + 48);
      BOOL v82 = (char *)v132 + v83;
      *((_WORD *)v132 + 21) = v80;
    }
    __int16 v128 = v83;
  }
  else
  {
    __int16 v128 = v81 + 60;
    BOOL v82 = (char *)v132 + (v81 + 60);
    *((_WORD *)v132 + 2AppleBCMWLANJoinAdapter::free(this - 3) = v80;
  }
  unsigned int v84 = *(unsigned __int8 *)(a2 + 484);
  if ((v84 & 8) != 0) {
    int v85 = 2;
  }
  else {
    int v85 = (v84 >> 2) & 1;
  }
  unsigned int v129 = v85;
  int v86 = v80;
  if ((*(_WORD *)(a2 + 480) & 0x40) != 0)
  {
    int v87 = *(_DWORD *)(a2 + 471);
    *((_WORD *)v132 + 26) = *(_WORD *)(a2 + 475);
    v132[12] = v87;
    int v86 = *(_DWORD *)(a2 + 532);
  }
  if (!v86)
  {
LABEL_241:
    uint64_t v97 = AppleBCMWLANCore::checkForWPA3SAESupport(*(AppleBCMWLANCore **)(*v2 + 56));
    if (v97) {
      AppleBCMWLANJoinAdapter::adjustMfp(v97, a2, (int *)&v134);
    }
    uint64_t v98 = AppleBCMWLANCore::configureManagementFrameProtection(*(AppleBCMWLANCore **)(*v2 + 56), v134);
    if (v98)
    {
      uint64_t v5 = v98;
      if (*(void *)(*v2 + 72) && CCLogStream::shouldLog())
      {
        uint64_t v99 = *(CCLogStream **)(*v2 + 72);
        (*(void (**)(void, uint64_t))(**(void **)(*v2 + 56) + 112))(*(void *)(*v2 + 56), v5);
        CCLogStream::logCrit(v99, "[dk] %s@%d:%s: set pmf(%d) failed, error %s\n");
      }
      goto LABEL_314;
    }
    if (v136[0] == 14 || v136[0] == 16 || (int v100 = *(_DWORD *)(a2 + 20), v100 == 0x8000) || v100 == 0x4000)
    {
      uint64_t v101 = AppleBCMWLANJoinAdapter::setAssocWsecInfo(a1, 262, v136[0], 0, 0, 0);
      if (v101)
      {
        uint64_t v5 = v101;
        if (*(void *)(*v2 + 72) && CCLogStream::shouldLog())
        {
          long long v102 = *(CCLogStream **)(*v2 + 72);
          (*(void (**)(void, uint64_t))(**(void **)(*v2 + 56) + 112))(*(void *)(*v2 + 56), v5);
          CCLogStream::logCrit(v102, "[dk] %s@%d:%s: set wsec_info(%d) for 192-bit mode failed, error %s\n");
        }
        goto LABEL_314;
      }
      uint64_t v104 = AppleBCMWLANJoinAdapter::setAssocBip(a1, v135);
      if (v104)
      {
        uint64_t v5 = v104;
        if (*(void *)(*v2 + 72) && CCLogStream::shouldLog())
        {
          __int16 v105 = *(CCLogStream **)(*v2 + 72);
          (*(void (**)(void, uint64_t))(**(void **)(*v2 + 56) + 112))(*(void *)(*v2 + 56), v5);
          CCLogStream::logCrit(v105, "[dk] %s@%d: set bip(%d) failed, error %s\n");
        }
        goto LABEL_314;
      }
    }
    else
    {
      if (*(_DWORD *)(a2 + 24) != 1) {
        goto LABEL_272;
      }
      if (AppleBCMWLANCore::checkForOWESupport(*(AppleBCMWLANCore **)(*v2 + 56)))
      {
        uint64_t v107 = AppleBCMWLANJoinAdapter::setAssocWsecInfo(a1, 263, *(_DWORD *)(a2 + 528), (*(unsigned __int16 *)(a2 + 480) >> 3) & 1, v129, (*(unsigned __int8 *)(a2 + 488) >> 4) & 1);
        if (v107)
        {
          uint64_t v5 = v107;
          if (*(void *)(*v2 + 72) && CCLogStream::shouldLog())
          {
            long long v108 = *(CCLogStream **)(*v2 + 72);
            (*(void (**)(void, uint64_t))(**(void **)(*v2 + 56) + 112))(*(void *)(*v2 + 56), v5);
            CCLogStream::logCrit(v108, "[dk] %s@%d:%s: set wsec_info(%d) for OWE mode failed, error %s\n");
          }
          goto LABEL_314;
        }
      }
    }
    int v100 = *(_DWORD *)(a2 + 20);
LABEL_272:
    int v109 = 0;
    if (v100 <= 4095)
    {
      if (v100 != 8 && v100 != 16 && v100 != 1024) {
        goto LABEL_289;
      }
    }
    else if (v100 >= 0x10000)
    {
      if (v100 != 0x20000 && v100 != 0x10000) {
        goto LABEL_289;
      }
    }
    else if (v100 != 4096 && v100 != 0x2000)
    {
      goto LABEL_289;
    }
    if (AppleBCMWLANCore::checkForWPA3SAESupport(*(AppleBCMWLANCore **)(*v2 + 56)))
    {
      uint64_t v110 = AppleBCMWLANJoinAdapter::setAssocWsecInfo(a1, 263, *(_DWORD *)(a2 + 528), (*(unsigned __int16 *)(a2 + 480) >> 3) & 1, v129, (*(unsigned __int8 *)(a2 + 488) >> 4) & 1);
      if (v110)
      {
        uint64_t v5 = v110;
        if (*(void *)(*v2 + 72) && CCLogStream::shouldLog())
        {
          uint64_t v111 = *(CCLogStream **)(*v2 + 72);
          (*(void (**)(void, uint64_t))(**(void **)(*v2 + 56) + 112))(*(void *)(*v2 + 56), v5);
          CCLogStream::logCrit(v111, "[dk] %s@%d:%s: set wsec_info(%d) for roaming failed, error %s\n");
        }
        goto LABEL_314;
      }
    }
    int v109 = *(unsigned char *)(a2 + 488) & 1;
LABEL_289:
    AppleBCMWLANJoinAdapter::setAssocWsecInfo(a1, 268, v109, 0, 0, 0);
    if (FirmwareInterfaceVersion < 0x15)
    {
      uint64_t v115 = *v2;
      if (!v131)
      {
        *(_DWORD *)(v115 + 628) = *((unsigned __int16 *)v132 + 21);
        uint64_t v117 = *v2;
        int v118 = v132[12];
        *(_WORD *)(v117 + 636) = *((_WORD *)v132 + 26);
        *(_DWORD *)(v117 + 632) = v118;
        uint64_t v119 = *(AppleBCMWLANCommander **)(*v2 + 64);
        uint64_t v120 = (unsigned __int16)(v128 + 6 * v80);
        if (v128 + 6 * (_WORD)v80) {
          size_t v121 = v132;
        }
        else {
          size_t v121 = 0;
        }
LABEL_309:
        unint64_t v137 = v121;
        uint64_t v138 = v120;
        uint64_t v5 = AppleBCMWLANCommander::runIOCtlSet(v119, 26, (uint64_t)&v137, 0, 0);
        uint64_t v122 = *v2;
        if (v5)
        {
          if (*(void *)(v122 + 72) && CCLogStream::shouldLog())
          {
            unint64_t v123 = *(CCLogStream **)(*v2 + 72);
            (*(void (**)(void, uint64_t))(**(void **)(*v2 + 56) + 112))(*(void *)(*v2 + 56), v5);
            CCLogStream::logCrit(v123, "[dk] %s@%d: WLC_SET_SSID() failed, error %s\n");
          }
        }
        else
        {
          *(unsigned char *)(v122 + 1) = 1;
        }
        goto LABEL_314;
      }
      *(_DWORD *)(v115 + 628) = *((unsigned __int16 *)v132 + 23);
      uint64_t v112 = *v2;
      int v113 = v132[13];
      __int16 v114 = *((_WORD *)v132 + 28);
    }
    else
    {
      *(_DWORD *)(*v2 + 628) = *((unsigned __int16 *)v132 + 23);
      uint64_t v112 = *v2;
      int v113 = v132[15];
      __int16 v114 = *((_WORD *)v132 + 32);
    }
    *(_WORD *)(v112 + 636) = v114;
    *(_DWORD *)(v112 + 632) = v113;
    int v116 = *(_DWORD *)(a2 + 20);
    if (v116 <= 127)
    {
      if (v116 <= 0x20 && ((1 << v116) & 0x100000012) != 0) {
        goto LABEL_306;
      }
    }
    else
    {
      if (v116 < 0x4000)
      {
        if (v116 != 128 && v116 != 2048) {
          goto LABEL_307;
        }
LABEL_306:
        *((_WORD *)v132 + 19) |= 2u;
        goto LABEL_307;
      }
      if (v116 == 0x8000 || v116 == 0x4000) {
        goto LABEL_306;
      }
    }
LABEL_307:
    uint64_t v119 = *(AppleBCMWLANCommander **)(*v2 + 64);
    uint64_t v120 = (unsigned __int16)(v128 + 6 * v80);
    size_t v121 = v132;
    if (!(v128 + 6 * (_WORD)v80)) {
      size_t v121 = 0;
    }
    goto LABEL_309;
  }
  unint64_t v88 = 0;
  BOOL v89 = (unsigned __int16 *)(a2 + 552);
  BOOL v90 = v132 + 15;
  while (1)
  {
    uint64_t ChanSpecHandler = AppleBCMWLANCore::getChanSpecHandler(*(AppleBCMWLANCore **)(*v2 + 56));
    __int16 BCMChannelSpec = AppleBCMWLANChanSpec::getBCMChannelSpec(ChanSpecHandler, *v89);
    if (FirmwareInterfaceVersion >= 0x15)
    {
      *BOOL v90 = BCMChannelSpec;
LABEL_224:
      *((_WORD *)v132 + 19) |= 4u;
      goto LABEL_226;
    }
    if (v131)
    {
      *(v90 - 4) = BCMChannelSpec;
      goto LABEL_224;
    }
    *(v90 - 6) = BCMChannelSpec;
LABEL_226:
    int v93 = *((_DWORD *)v89 - 3);
    *((_WORD *)v82 + 2) = *(v89 - 4);
    *(_DWORD *)BOOL v82 = v93;
    int v94 = *(_DWORD *)(a2 + 20);
    if (v94 >= 0x10000)
    {
      if (v94 == 0x10000 || v94 == 0x20000) {
        goto LABEL_233;
      }
    }
    else if (v94 == 4096 || v94 == 0x2000)
    {
      goto LABEL_233;
    }
    if (!*((unsigned char *)v89 - 16)) {
      goto LABEL_237;
    }
LABEL_233:
    if (AppleBCMWLANCore::checkForSaePKSupport(*(AppleBCMWLANCore **)(*v2 + 56)))
    {
      if (AppleBCMWLANCore::checkForWPA3SAESupport(*(AppleBCMWLANCore **)(*v2 + 56)))
      {
        if (*(unsigned char *)(a2 + 484))
        {
          uint64_t v95 = AppleBCMWLANJoinAdapter::setAssocWsecInfo(a1, 266, 1, (*(unsigned __int16 *)(a2 + 480) >> 3) & 1, v129, 0);
          if (v95) {
            break;
          }
        }
      }
    }
LABEL_237:
    if (AppleBCMWLANCore::checkForOprChValidationSupport(*(AppleBCMWLANCore **)(*v2 + 56)))
    {
      if ((*(unsigned char *)(a2 + 484) & 0x20) != 0)
      {
        uint64_t v96 = AppleBCMWLANJoinAdapter::setAssocWsecInfo(a1, 270, 1, 0, 0, 0);
        if (v96)
        {
          uint64_t v5 = v96;
          if (*(void *)(*v2 + 72) && CCLogStream::shouldLog())
          {
            __int16 v103 = *(CCLogStream **)(*v2 + 72);
            (*(void (**)(void, uint64_t))(**(void **)(*v2 + 56) + 112))(*(void *)(*v2 + 56), v5);
            CCLogStream::logAlert(v103, "[dk] %s@%d:OCV config failed: %s\n");
          }
          goto LABEL_314;
        }
      }
    }
    v82 += 6;
    ++v88;
    v89 += 9;
    ++v90;
    if (v88 >= *(unsigned int *)(a2 + 532)) {
      goto LABEL_241;
    }
  }
  uint64_t v5 = v95;
  if (*(void *)(*v2 + 72) && CCLogStream::shouldLog())
  {
    uint64_t v106 = *(CCLogStream **)(*v2 + 72);
    (*(void (**)(void, uint64_t))(**(void **)(*v2 + 56) + 112))(*(void *)(*v2 + 56), v5);
    CCLogStream::logAlert(v106, "[dk] %s@%d:SAE-PK config failed: %s\n");
  }
LABEL_314:
  IOFreeData();
  return v5;
}

uint64_t AppleBCMWLANJoinAdapter::set4WayHandshakeProtection(AppleBCMWLANJoinAdapter *this, int a2, int a3)
{
  int v31 = -1431655766;
  v30[0] = &v31;
  v30[1] = 0x400040004;
  uint64_t v6 = *(AppleBCMWLANCommander **)(*((void *)this + 6) + 64);
  unint64_t v28 = &v31;
  uint64_t v29 = 4;
  uint64_t result = AppleBCMWLANCommander::runIOVarGet(v6, (uint64_t)"btc_wifi_prot", (uint64_t)&v28, (uint64_t)v30, 0);
  if ((unsigned __int16)v31 == 2)
  {
    if (*(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog()) {
      CCLogStream::logInfo(*(CCLogStream **)(*((void *)this + 6) + 72), "[dk] %s@%d:WL_BTC_WIFI_PROT_VER_2 detected", "set4WayHandshakeProtection", 1310);
    }
    uint64_t v16 = IOMallocZeroData();
    if (v16)
    {
      int v17 = (int *)v16;
      *(void *)uint64_t v16 = 0xC000100140002;
      if (a3) {
        __int16 v18 = 31;
      }
      else {
        __int16 v18 = 1;
      }
      *(_WORD *)(v16 + 10) = v18;
      *(_DWORD *)(v16 + 12) = 6553600;
      *(_WORD *)(v16 + 16) = 0;
      uint64_t v19 = *(AppleBCMWLANCommander **)(*((void *)this + 6) + 64);
      unint64_t v28 = v17;
      uint64_t v29 = 20;
      uint64_t v20 = AppleBCMWLANCommander::runIOVarSet(v19, (uint64_t)"btc_wifi_prot", (uint64_t)&v28, 0, 0);
      if (v20)
      {
        uint64_t v21 = v20;
        if (*(void *)(*((void *)this + 6) + 72))
        {
          if (CCLogStream::shouldLog())
          {
            uint64_t v24 = *((void *)this + 6);
            uint64_t v25 = *(CCLogStream **)(v24 + 72);
            unsigned __int16 v26 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v24 + 56) + 112))(*(void *)(v24 + 56), v21);
            CCLogStream::logAlert(v25, "[dk] %s@%d: Failure to set iovar btc_wifi_prot, %s\n", "set4WayHandshakeProtection", 1356, v26);
          }
        }
      }
      return IOFreeData();
    }
    uint64_t result = *(void *)(*((void *)this + 6) + 72);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v22 = *(CCLogStream **)(*((void *)this + 6) + 72);
        int v23 = 1315;
        return CCLogStream::logAlert(v22, "[dk] %s@%d:Unable to allocate memory for txBuf\n", "set4WayHandshakeProtection", v23);
      }
    }
  }
  else
  {
    if ((unsigned __int16)v31 != 1) {
      return result;
    }
    if (*(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog()) {
      CCLogStream::logInfo(*(CCLogStream **)(*((void *)this + 6) + 72), "[dk] %s@%d:WL_BTC_WIFI_PROT_VER_1 detected", "set4WayHandshakeProtection", 1273);
    }
    uint64_t v8 = IOMallocZeroData();
    if (v8)
    {
      unsigned int v9 = (int *)v8;
      *(void *)uint64_t v8 = 0x8000100100001;
      *(_DWORD *)(v8 + 8) = a2;
      *(_DWORD *)(v8 + 12) = 0;
      int v10 = *(AppleBCMWLANCommander **)(*((void *)this + 6) + 64);
      unint64_t v28 = v9;
      uint64_t v29 = 16;
      uint64_t v11 = AppleBCMWLANCommander::runIOVarSet(v10, (uint64_t)"btc_wifi_prot", (uint64_t)&v28, 0, 0);
      uint64_t v12 = *(void *)(*((void *)this + 6) + 72);
      if (v11)
      {
        if (v12)
        {
          if (CCLogStream::shouldLog())
          {
            uint64_t v13 = *((void *)this + 6);
            uint64_t v14 = *(CCLogStream **)(v13 + 72);
            unsigned int v15 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v13 + 56) + 112))(*(void *)(v13 + 56), v11);
            CCLogStream::logAlert(v14, "[dk] %s@%d: Failure to set iovar btc_wifi_prot, %s\n", "set4WayHandshakeProtection", 1304, v15);
          }
        }
      }
      else if (v12 && CCLogStream::shouldLog())
      {
        if (a2) {
          uint64_t v27 = "ENABLED";
        }
        else {
          uint64_t v27 = "DISABLED";
        }
        CCLogStream::logInfo(*(CCLogStream **)(*((void *)this + 6) + 72), "[dk] %s@%d:Set btc_wifi_prot to %s\n", "set4WayHandshakeProtection", 1307, v27);
      }
      return IOFreeData();
    }
    uint64_t result = *(void *)(*((void *)this + 6) + 72);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v22 = *(CCLogStream **)(*((void *)this + 6) + 72);
        int v23 = 1279;
        return CCLogStream::logAlert(v22, "[dk] %s@%d:Unable to allocate memory for txBuf\n", "set4WayHandshakeProtection", v23);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANJoinAdapter::addInstantHSAppleDeviceIE(AppleBCMWLANJoinAdapter *this, int a2, char a3)
{
  uint64_t v6 = IOMallocZeroData();
  if (!v6) {
    return 12;
  }
  uint64_t v7 = v6;
  *(unsigned char *)uint64_t v6 = -35;
  *(_WORD *)(v6 + 1) = 5888;
  *(unsigned char *)(v6 + AppleBCMWLANJoinAdapter::free(this - 3) = -14;
  *(unsigned char *)(v6 + 8) = a3;
  *(_WORD *)(v6 + 9) = 0;
  *(unsigned char *)(v6 + 11) = 0;
  *(_DWORD *)(v6 + 4) = 67174411;
  bzero(v10, 0x814uLL);
  int v11 = 4;
  int v12 = a2;
  uint64_t v13 = 0xC00000008;
  uint64_t v8 = *(void *)v7;
  int v15 = *(_DWORD *)(v7 + 8);
  uint64_t v14 = v8;
  AppleBCMWLANCore::setVendorIE(*(void **)(*((void *)this + 6) + 56), 0, (uint64_t)v10);
  IOFreeData();
  return 0;
}

uint64_t AppleBCMWLANJoinAdapter::clearWepKeysSync(AppleBCMWLANJoinAdapter *this)
{
  int v2 = 0;
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  long long v14 = 0u;
  long long v13 = 0u;
  long long v12 = 0u;
  long long v11 = 0u;
  long long v10 = 0u;
  long long v9 = 0u;
  while (1)
  {
    int v8 = v2;
    uint64_t v3 = AppleBCMWLANJoinAdapter::programKeySync((uint64_t)this, (uint64_t)&v8);
    if (v3) {
      break;
    }
    if (++v2 == 4) {
      return v3;
    }
  }
  if (*(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog())
  {
    uint64_t v5 = *((void *)this + 6);
    uint64_t v6 = *(CCLogStream **)(v5 + 72);
    uint64_t v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 56) + 112))(*(void *)(v5 + 56), v3);
    CCLogStream::logCrit(v6, "[dk] %s@%d: WEP clear failed on index %u, error %s\n", "clearWepKeysSync", 2170, v2, v7);
  }
  return v3;
}

uint64_t AppleBCMWLANJoinAdapter::setKey(AppleBCMWLANJoinAdapter *a1, _DWORD *a2, int a3, unint64_t a4, unsigned int a5)
{
  if ((*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 6) + 56) + 128))(*(void *)(*((void *)a1 + 6) + 56)))
  {
    uint64_t v10 = a2[2];
    switch((int)v10)
    {
      case 0:
        return v10;
      case 6:
      case 9:
        if (AppleBCMWLANCore::useAppleRSNSupplicant(*(AppleBCMWLANCore **)(*((void *)a1 + 6) + 56))) {
          goto LABEL_21;
        }
        *(_WORD *)uint64_t v22 = a2[1];
        memset(&v22[2], 0, 262);
        memcpy(&v22[4], a2 + 4, *(unsigned __int16 *)v22);
        if (a3 && *(_WORD *)v22)
        {
          AppleBCMWLANJoinAdapter::enableSupplicantEvents(a1);
          AppleBCMWLANJoinAdapter::configureSupplicantTimeOut(a1, 6000);
        }
        uint64_t v11 = AppleBCMWLANJoinAdapter::programPMK((uint64_t)a1, (unsigned __int16 *)v22);
        goto LABEL_8;
      case 7:
        if ((AppleBCMWLANCore::useAppleRSNSupplicant(*(AppleBCMWLANCore **)(*((void *)a1 + 6) + 56)) & 1) == 0
          && *(void *)(*((void *)a1 + 6) + 72)
          && CCLogStream::shouldLog())
        {
          CCLogStream::logWarnIf(*(CCLogStream **)(*((void *)a1 + 6) + 72), 0x100uLL, "[dk] %s@%d: Ignoring PMKSA request\n", "setKey", 1983);
        }
        goto LABEL_21;
      case 10:
        if (AppleBCMWLANCore::useAppleRSNSupplicant(*(AppleBCMWLANCore **)(*((void *)a1 + 6) + 56)))
        {
LABEL_21:
          uint64_t v10 = 0;
        }
        else
        {
          unsigned int v18 = a2[1];
          memset(&v22[4], 0, 260);
          if (v18 >= 0x40) {
            size_t v19 = 64;
          }
          else {
            size_t v19 = v18;
          }
          uint64_t v20 = a2 + 4;
          *(_WORD *)uint64_t v22 = v19;
          memcpy(&v22[4], v20, v19);
          if (v19 && a3)
          {
            AppleBCMWLANJoinAdapter::enableSupplicantEvents(a1);
            AppleBCMWLANJoinAdapter::configureSupplicantTimeOut(a1, 6000);
          }
          *(_WORD *)&void v22[2] = 1;
          uint64_t v10 = AppleBCMWLANJoinAdapter::programPMK((uint64_t)a1, (unsigned __int16 *)v22);
          if (a4 && a5) {
            AppleBCMWLANJoinAdapter::setAssocWsecInfoPMKPassword(a1, a4, a5, (unint64_t)v20, *(unsigned __int16 *)v22);
          }
        }
        break;
      default:
        memset(v22, 0, 164);
        uint64_t v12 = mapAppleKeyToBcomKey((uint64_t)v22, (uint64_t)a2);
        uint64_t v13 = *((void *)a1 + 6);
        if (v12)
        {
          uint64_t v10 = v12;
          if (*(void *)(v13 + 72) && CCLogStream::shouldLog())
          {
            uint64_t v14 = *((void *)a1 + 6);
            long long v15 = *(CCLogStream **)(v14 + 72);
            long long v16 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v14 + 56) + 112))(*(void *)(v14 + 56), v10);
            CCLogStream::logCrit(v15, "[dk] %s@%d: mapAppleKeyToBcomKey() failed, error %s\n", "setKey", 2061, v16);
          }
        }
        else
        {
          uint64_t v21 = (*(uint64_t (**)(void))(**(void **)(v13 + 56) + 88))(*(void *)(v13 + 56));
          if ((*(unsigned int (**)(uint64_t))(*(void *)v21 + 136))(v21)) {
            uint64_t v11 = AppleBCMWLANJoinAdapter::programKeyAsync((uint64_t)a1, (uint64_t)v22);
          }
          else {
            uint64_t v11 = AppleBCMWLANJoinAdapter::programKeySync((uint64_t)a1, (uint64_t)v22);
          }
LABEL_8:
          uint64_t v10 = v11;
        }
        break;
    }
  }
  else
  {
    uint64_t v10 = 3758097084;
    if (*(void *)(*((void *)a1 + 6) + 72) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)a1 + 6) + 72), "[dk] %s@%d:invalid interface\n", "setKey", 1974);
    }
  }
  return v10;
}

uint64_t AppleBCMWLANJoinAdapter::enableICVErrorEvents(AppleBCMWLANJoinAdapter *this)
{
  uint64_t v2 = *((void *)this + 6);
  if (*(void *)(v2 + 72))
  {
    int shouldLog = CCLogStream::shouldLog();
    uint64_t v2 = *((void *)this + 6);
    if (shouldLog)
    {
      CCLogStream::logNotice(*(CCLogStream **)(v2 + 72), "[dk] %s@%d: enabling WLC_E_ICV_ERROR events \n", "enableICVErrorEvents", 2458);
      uint64_t v2 = *((void *)this + 6);
    }
  }
  uint64_t result = AppleBCMWLANCore::setEventBit(*(AppleBCMWLANCore **)(v2 + 56), 0x31u);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t result = *(void *)(*((void *)this + 6) + 72);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v6 = *((void *)this + 6);
        uint64_t v7 = *(CCLogStream **)(v6 + 72);
        int v8 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v6 + 56) + 112))(*(void *)(v6 + 56), v5);
        return CCLogStream::logAlert(v7, "[dk] %s@%d: Failure to setup event handling for WLC_E_ICV_ERROR, %s\n", "enableICVErrorEvents", 2464, v8);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANJoinAdapter::enableSupplicantEvents(AppleBCMWLANJoinAdapter *this)
{
  uint64_t v2 = *((void *)this + 6);
  if (*(void *)(v2 + 72))
  {
    int shouldLog = CCLogStream::shouldLog();
    uint64_t v2 = *((void *)this + 6);
    if (shouldLog)
    {
      CCLogStream::logNoticeIf(*(CCLogStream **)(v2 + 72), 0x100uLL, "[dk] %s@%d:enabling supplicant events\n", "enableSupplicantEvents", 2479);
      uint64_t v2 = *((void *)this + 6);
    }
  }
  uint64_t v4 = AppleBCMWLANCore::setEventBit(*(AppleBCMWLANCore **)(v2 + 56), 0x2Eu);
  if (v4 && *(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog())
  {
    uint64_t v6 = *((void *)this + 6);
    uint64_t v7 = *(CCLogStream **)(v6 + 72);
    int v8 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v6 + 56) + 112))(*(void *)(v6 + 56), v4);
    CCLogStream::logAlert(v7, "[dk] %s@%d: Failure to setup event handling for WLC_E_PSK_SUP, %s\n", "enableSupplicantEvents", 2485, v8);
  }
  return v4;
}

uint64_t AppleBCMWLANJoinAdapter::setAssocRSNIE(AppleBCMWLANJoinAdapter *this, const unsigned __int8 *a2, uint64_t a3)
{
  if (a3)
  {
    BOOL v4 = a2 != 0;
    BOOL v5 = (unsigned __int16)a3 != 0;
    BOOL v6 = !v4 || !v5;
    if (v4 && v5) {
      uint64_t v7 = (unsigned __int16)a3;
    }
    else {
      uint64_t v7 = 0;
    }
    if (v6) {
      int v8 = 0;
    }
    else {
      int v8 = a2;
    }
    *(void *)&long long v16 = v8;
    *((void *)&v16 + 1) = v7;
  }
  else
  {
    long long v16 = kNoTxPayload;
  }
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 6) + 56) + 88))(*(void *)(*((void *)this + 6) + 56));
  if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 136))(v9)) {
    uint64_t v10 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 6) + 64), (uint64_t)"wpaie");
  }
  else {
    uint64_t v10 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 6) + 64), (uint64_t)"wpaie", (uint64_t)&v16, 0, 0);
  }
  uint64_t v11 = v10;
  if (v10 && *(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog())
  {
    uint64_t v13 = *((void *)this + 6);
    uint64_t v14 = *(CCLogStream **)(v13 + 72);
    long long v15 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v13 + 56) + 112))(*(void *)(v13 + 56), v11);
    CCLogStream::logCrit(v14, "[dk] %s@%d: wpaie failed, error %s\n", "setAssocRSNIE", 1777, v15);
  }
  return v11;
}

uint64_t AppleBCMWLANJoinAdapter::setAssocWsecInfo(AppleBCMWLANJoinAdapter *this, int a2, int a3, int a4, int a5, int a6)
{
  int v45 = a5;
  unint64_t v44 = 0xAAAAAAAAAAAAAAAALL;
  int v43 = 0;
  int v41 = -1431655766;
  int v42 = 0;
  switch(a2)
  {
    case 262:
      LODWORD(v44) = 1 << a3;
      HIDWORD(v44) = 1 << a3;
      unsigned int v9 = 8;
      uint64_t v10 = &v44;
      uint64_t v11 = 16;
      goto LABEL_66;
    case 263:
      int v14 = 0;
      int v41 = 0;
      if ((a3 & 0x40000000) != 0)
      {
        int v14 = 2;
        int v41 = 2;
        if (AppleBCMWLANCore::checkFor6GSupportCardCapability(*(AppleBCMWLANCore **)(*((void *)this + 6)
                                                                                                  + 56)))
        {
          if ((a4 & 1) == 0)
          {
            int v14 = 34;
            int v41 = 34;
          }
        }
      }
      if ((a3 & 4) == 0) {
        goto LABEL_17;
      }
      int v15 = v14 | 1;
      int v41 = v14 | 1;
      if (a6
        && AppleBCMWLANCore::featureFlagIsBitSet(*(AppleBCMWLANCore **)(*((void *)this + 6) + 56), 114))
      {
        if (*(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 72), "[dk] %s@%d:%s: Disable roaming to TKIP when joining an RSN_AKM_PSK network\n", "setAssocWsecInfo", 2320, "setAssocWsecInfo");
        }
        int v15 = v14 | 9;
        int v41 = v14 | 9;
      }
      if (!AppleBCMWLANCore::checkFor6GSupportCardCapability(*(AppleBCMWLANCore **)(*((void *)this + 6)
                                                                                                 + 56))
        || (a4 & 1) != 0)
      {
        int v14 = v15;
        if ((a3 & 0x100) == 0) {
          goto LABEL_49;
        }
        goto LABEL_18;
      }
      int v14 = v15 | 0x20;
      int v41 = v15 | 0x20;
LABEL_17:
      if ((a3 & 0x100) != 0)
      {
LABEL_18:
        if (AppleBCMWLANCore::checkFor6GSupportCardCapability(*(AppleBCMWLANCore **)(*((void *)this + 6)
                                                                                                  + 56)))
        {
          int v16 = v14 | 0x20;
          if (a4) {
            int v16 = v14;
          }
          int v14 = v16 | 0x10;
        }
        else
        {
          v14 |= 4u;
        }
        int v41 = v14;
      }
LABEL_49:
      if (!AppleBCMWLANCore::checkForOWESupport(*(AppleBCMWLANCore **)(*((void *)this + 6) + 56))) {
        goto LABEL_61;
      }
      if ((a3 & 0x20000001) != 0)
      {
        int v22 = v14 | 0x30000;
        int v41 = v14 | 0x30000;
        if (AppleBCMWLANCore::checkFor6GSupportCardCapability(*(AppleBCMWLANCore **)(*((void *)this + 6)
                                                                                                  + 56))
          && (a4 & 1) == 0)
        {
          int v22 = v14 | 0xB0000;
          int v41 = v14 | 0xB0000;
        }
        if ((a3 & 0x40000) == 0) {
          goto LABEL_55;
        }
      }
      else
      {
        int v22 = v14;
        if ((a3 & 0x40000) == 0)
        {
LABEL_55:
          int v14 = v22;
          goto LABEL_61;
        }
      }
      if (AppleBCMWLANCore::checkFor6GSupportCardCapability(*(AppleBCMWLANCore **)(*((void *)this + 6)
                                                                                                + 56)) ^ 1 | a4)
        int v23 = v22;
      else {
        int v23 = v22 | 0x80000;
      }
      int v14 = v23 | 0x40000;
      int v41 = v23 | 0x40000;
LABEL_61:
      if (*(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 72), "[dk] %s@%d:allow_auths 0x%X  ap_restrict = 0x%X\n", "setAssocWsecInfo", 2375, a3, v14);
      }
      unsigned int v9 = 4;
      uint64_t v10 = (unint64_t *)&v41;
LABEL_65:
      uint64_t v11 = 12;
LABEL_66:
      uint64_t v24 = IOMallocZeroData();
      if (v24)
      {
        uint64_t v25 = (AppleBCMWLANJoinAdapter *)v24;
        *(unsigned char *)uint64_t v24 = 1;
        *(unsigned char *)(v24 + AppleBCMWLANJoinAdapter::free(this - 3) = 1;
        *(_WORD *)(v24 + 4) = a2;
        *(_WORD *)(v24 + 6) = v9;
        memcpy((void *)(v24 + 8), v10, v9);
        uint64_t v26 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 6) + 56) + 88))(*(void *)(*((void *)this + 6) + 56));
        if ((*(unsigned int (**)(uint64_t))(*(void *)v26 + 136))(v26))
        {
          OSNumberPtr v38 = this;
          uint64_t v39 = AppleBCMWLANJoinAdapter::setWsecInfoCallback;
          uint64_t v40 = 0;
          uint64_t v27 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 6) + 64), (uint64_t)"wsec_info");
        }
        else
        {
          unint64_t v28 = *(AppleBCMWLANCommander **)(*((void *)this + 6) + 64);
          OSNumberPtr v38 = v25;
          uint64_t v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v11;
          uint64_t v27 = AppleBCMWLANCommander::runIOVarSet(v28, (uint64_t)"wsec_info", (uint64_t)&v38, 0, 0);
        }
        uint64_t v21 = v27;
        if (v27 && *(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog())
        {
          uint64_t v30 = *((void *)this + 6);
          int v31 = *(CCLogStream **)(v30 + 72);
          int v32 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v30 + 56) + 112))(*(void *)(v30 + 56), v21);
          CCLogStream::logAlert(v31, "[dk] %s@%d:%s: Failure to set iovar wsec_info (type 0x%X, param 0x%X), %s\n", "setAssocWsecInfo", 2437, "setAssocWsecInfo", a2, a3, v32);
        }
        IOFreeData();
      }
      else
      {
        uint64_t v21 = 3758097085;
        if (*(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 72), "[dk] %s@%d:%s: Unable to allocate memory for txBuf\n", "setAssocWsecInfo", 2415, "setAssocWsecInfo");
        }
      }
      return v21;
    case 266:
      uint64_t v17 = *((void *)this + 6);
      uint64_t v18 = *(void *)(v17 + 72);
      if (a3)
      {
        if (v18)
        {
          int shouldLog = CCLogStream::shouldLog();
          uint64_t v17 = *((void *)this + 6);
          if (shouldLog)
          {
            unsigned __int8 v33 = *(CCLogStream **)(v17 + 72);
            uint64_t CurrentBSS = AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(v17 + 48));
            int v35 = (*(uint64_t (**)(uint64_t))(*(void *)CurrentBSS + 688))(CurrentBSS);
            uint64_t v36 = *(void *)AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(*((void *)this + 6)
                                                                                              + 48));
            int v37 = (*(uint64_t (**)(void))(v36 + 696))();
            CCLogStream::logAlert(v33, "[dk] %s@%d:%s: wsec_info type %d option for SAE PK BSS cap  (%d)& saepk pwd (%d): \n", "setAssocWsecInfo", 2391, "setAssocWsecInfo", 266, v35, v37);
            uint64_t v17 = *((void *)this + 6);
          }
        }
        if (*(void *)(v17 + 72) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 72), "[dk] %s@%d:SAEPK state %x\n", "setAssocWsecInfo", 2398, a5);
        }
        unsigned int v9 = 4;
        uint64_t v10 = (unint64_t *)&v45;
        goto LABEL_65;
      }
      if (v18 && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 72), "[dk] %s@%d:%s: Invalid attempt with wsec_info type %d option for SAE PK\n");
      }
      return 0;
    case 268:
      int v43 = a3;
      if (*(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 72), "[dk] %s@%d:TD policy %x\n", "setAssocWsecInfo", 2385, a3);
      }
      unsigned int v9 = 4;
      uint64_t v10 = (unint64_t *)&v43;
      goto LABEL_65;
    case 270:
      int v42 = a3;
      if (*(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 72), "[dk] %s@%d:OCV capability %x\n", "setAssocWsecInfo", 2405, a3);
      }
      unsigned int v9 = 4;
      uint64_t v10 = (unint64_t *)&v42;
      goto LABEL_65;
    default:
      if (*(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 72), "[dk] %s@%d:%s: Unknown wsec_info type %d\n");
      }
      return 0;
  }
}

void AppleBCMWLANJoinAdapter::adjustMfp(uint64_t a1, uint64_t a2, int *a3)
{
  if (!*a3) {
    return;
  }
  int v3 = *(_DWORD *)(a2 + 20);
  if (v3 >= 0x2000)
  {
    int v4 = 2;
    if (v3 >= 0x8000)
    {
      if (v3 != 0x8000)
      {
        if (v3 != 0x10000 && v3 != 0x20000) {
          return;
        }
        goto LABEL_19;
      }
LABEL_24:
      *a3 = v4;
      return;
    }
    if (v3 != 0x2000)
    {
      if (v3 != 0x4000) {
        return;
      }
      goto LABEL_24;
    }
LABEL_19:
    if ((*(unsigned char *)(a2 + 531) & 0x40) != 0) {
      int v4 = 1;
    }
    else {
      int v4 = 2;
    }
    goto LABEL_24;
  }
  if (v3 > 1023)
  {
    if (v3 != 1024)
    {
      if (v3 != 4096) {
        return;
      }
      goto LABEL_19;
    }
LABEL_22:
    if ((*(unsigned char *)(a2 + 531) & 0x40) == 0) {
      return;
    }
    int v4 = 1;
    goto LABEL_24;
  }
  if (v3 == 8 || v3 == 16) {
    goto LABEL_22;
  }
}

uint64_t AppleBCMWLANJoinAdapter::setAssocBip(AppleBCMWLANJoinAdapter *this, uint64_t a2)
{
  uint64_t v2 = a2;
  switch((int)a2)
  {
    case 13:
      int v4 = 111939328;
      goto LABEL_11;
    case 14:
    case 15:
    case 16:
      goto LABEL_4;
    case 17:
      int v4 = 229379840;
      goto LABEL_11;
    case 18:
      int v4 = 195825408;
      goto LABEL_11;
    case 19:
      int v4 = 212602624;
LABEL_11:
      int v11 = v4;
      BOOL v5 = *(AppleBCMWLANCommander **)(*((void *)this + 6) + 64);
      v10[0] = &v11;
      v10[1] = 4;
      uint64_t v2 = AppleBCMWLANCommander::runIOVarSet(v5, (uint64_t)"bip", (uint64_t)v10, 0, 0);
      if (v2 && *(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog())
      {
        uint64_t v7 = *((void *)this + 6);
        int v8 = *(CCLogStream **)(v7 + 72);
        unsigned int v9 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v7 + 56) + 112))(*(void *)(v7 + 56), v2);
        CCLogStream::logAlert(v8, "[dk] %s@%d:%s: Failure to set iovar bip, %s\n", "setAssocBip", 2205, "setAssocBip", v9);
      }
      break;
    default:
      if (a2)
      {
LABEL_4:
        if (*(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 72), "[dk] %s@%d: %s: unknown BIP type %d\n", "setAssocBip", 2198, "setAssocBip", v2);
        }
        uint64_t v2 = 0;
      }
      break;
  }
  return v2;
}

uint64_t AppleBCMWLANJoinAdapter::getJoinTimeoutSequenceNum(AppleBCMWLANJoinAdapter *this)
{
  return *(unsigned int *)(*((void *)this + 6) + 8);
}

uint64_t AppleBCMWLANJoinAdapter::configureDefaultUnAssocDwell(AppleBCMWLANJoinAdapter *this)
{
  return AppleBCMWLANJoinAdapter::customUnAssocDwell(this, 0x28u);
}

uint64_t AppleBCMWLANJoinAdapter::customUnAssocDwell(AppleBCMWLANJoinAdapter *this, unsigned int a2)
{
  unsigned int v18 = a2;
  if (a2 > 0x12B) {
    return 3758097084;
  }
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 6) + 56) + 88))(*(void *)(*((void *)this + 6) + 56));
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 136))(v4))
  {
    int v15 = this;
    uint64_t v16 = (uint64_t)AppleBCMWLANJoinAdapter::handleCustomUnAssocDwellAsyncCallBack;
    uint64_t v17 = 0;
    uint64_t v2 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 6) + 64), (uint64_t)"scan_unassoc_time");
    if (v2 && *(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog())
    {
      uint64_t v5 = *((void *)this + 6);
      BOOL v6 = *(CCLogStream **)(v5 + 72);
      uint64_t v13 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 56) + 112))(*(void *)(v5 + 56), v2);
      CCLogStream::logAlert(v6, "[dk] %s@%d: Failure to configure Dwell for Assoc: %s\n", "customUnAssocDwell", 1640, v13);
    }
  }
  else
  {
    uint64_t v7 = *(AppleBCMWLANCommander **)(*((void *)this + 6) + 64);
    int v15 = (AppleBCMWLANJoinAdapter *)&v18;
    uint64_t v16 = 4;
    uint64_t v8 = AppleBCMWLANCommander::runIOVarSet(v7, (uint64_t)"scan_unassoc_time", (uint64_t)&v15, 0, 0);
    uint64_t v2 = v8;
    BOOL v9 = v8 == -469794537 || v8 == 0;
    if (!v9 && *(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog())
    {
      uint64_t v11 = *((void *)this + 6);
      uint64_t v12 = *(CCLogStream **)(v11 + 72);
      int v14 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v11 + 56) + 112))(*(void *)(v11 + 56), v2);
      CCLogStream::logAlert(v12, "[dk] %s@%d: Failure to configure Dwell for Assoc: %s\n", "customUnAssocDwell", 1646, v14);
    }
  }
  return v2;
}

uint64_t AppleBCMWLANJoinAdapter::createAdhocNetwork(AppleBCMWLANJoinAdapter *a1, uint64_t a2)
{
  unsigned int v58 = 0;
  if (!a2) {
    return 3758097090;
  }
  uint64_t v4 = (const void *)(a2 + 32);
  if (IO80211BssManager::setAssocSSID(*(IO80211BssManager **)(*((void *)a1 + 6) + 48), (const unsigned __int8 *)(a2 + 32), *(unsigned int *)(a2 + 28))&& *(void *)(*((void *)a1 + 6) + 72)&& CCLogStream::shouldLog())
  {
    CCLogStream::logCrit(*(CCLogStream **)(*((void *)a1 + 6) + 72), "[dk] %s@%d: Failed to set last joined SSID\n", "createAdhocNetwork", 765);
  }
  uint64_t v5 = AppleBCMWLANJoinAdapter::clearWepKeysSync(a1);
  if (!v5)
  {
    if (*(void *)(*((void *)a1 + 6) + 72) && CCLogStream::shouldLog())
    {
      int v41 = *(CCLogStream **)(*((void *)a1 + 6) + 72);
      int v42 = (const char *)authtypelower2str(*(_DWORD *)(a2 + 8));
      int v43 = (const char *)authtypeupper2str(*(_DWORD *)(a2 + 12), 0xFFFFu);
      unint64_t v44 = (const char *)ciphertype2str(*(_DWORD *)(a2 + 72));
      CCLogStream::logNotice(v41, "[dk] %s@%d: lowerAuth = %s, upperAuth = %s, key = %s\n", "createAdhocNetwork", 774, v42, v43, v44);
    }
    uint64_t v6 = mapAppleAPModeToBcomBssType(&v58, *(unsigned __int16 *)(a2 + 4));
    uint64_t v7 = *((void *)a1 + 6);
    if (v6)
    {
      uint64_t v5 = v6;
      if (*(void *)(v7 + 72) && CCLogStream::shouldLog())
      {
        uint64_t v8 = *((void *)a1 + 6);
        BOOL v9 = *(CCLogStream **)(v8 + 72);
        (*(void (**)(void, uint64_t))(**(void **)(v8 + 56) + 112))(*(void *)(v8 + 56), v5);
        CCLogStream::logCrit(v9, "[dk] %s@%d: mapAppleAPModeToBcomBssType(%d) failed, error %s\n");
      }
    }
    else
    {
      uint64_t v11 = *(AppleBCMWLANCommander **)(v7 + 64);
      *(void *)uint64_t v59 = &v58;
      *(void *)&v59[8] = 4;
      uint64_t v12 = AppleBCMWLANCommander::runIOCtlSet(v11, 20, (uint64_t)v59, 0, 0);
      if (v12)
      {
        uint64_t v5 = v12;
        if (*(void *)(*((void *)a1 + 6) + 72) && CCLogStream::shouldLog())
        {
          uint64_t v13 = *((void *)a1 + 6);
          int v14 = *(CCLogStream **)(v13 + 72);
          (*(void (**)(void, uint64_t))(**(void **)(v13 + 56) + 112))(*(void *)(v13 + 56), v5);
          CCLogStream::logCrit(v14, "[dk] %s@%d: WLC_SET_INFRA(%lu) failed, error %s\n");
        }
      }
      else
      {
        uint64_t v15 = mapAppleLowerAuthToBcomAuth(&v58, *(_DWORD *)(a2 + 8));
        uint64_t v16 = *((void *)a1 + 6);
        if (v15)
        {
          uint64_t v5 = v15;
          if (*(void *)(v16 + 72) && CCLogStream::shouldLog())
          {
            uint64_t v17 = *((void *)a1 + 6);
            unsigned int v18 = *(CCLogStream **)(v17 + 72);
            (*(void (**)(void, uint64_t))(**(void **)(v17 + 56) + 112))(*(void *)(v17 + 56), v5);
            CCLogStream::logCrit(v18, "[dk] %s@%d: mapAppleLowerAuthToBcomAuth(%d) failed, error %s\n");
          }
        }
        else
        {
          size_t v19 = *(AppleBCMWLANCommander **)(v16 + 64);
          *(void *)uint64_t v59 = &v58;
          *(void *)&v59[8] = 4;
          uint64_t v20 = AppleBCMWLANCommander::runIOCtlSet(v19, 22, (uint64_t)v59, 0, 0);
          if (v20)
          {
            uint64_t v5 = v20;
            if (*(void *)(*((void *)a1 + 6) + 72) && CCLogStream::shouldLog())
            {
              uint64_t v21 = *((void *)a1 + 6);
              int v22 = *(CCLogStream **)(v21 + 72);
              (*(void (**)(void, uint64_t))(**(void **)(v21 + 56) + 112))(*(void *)(v21 + 56), v5);
              CCLogStream::logCrit(v22, "[dk] %s@%d: WLC_SET_AUTH(%lu) failed, error %s\n");
            }
          }
          else
          {
            uint64_t v23 = mapAppleUpperAuthToBcomWpaAuth(&v58, *(_DWORD *)(a2 + 12), 0, 0, 0xFFFF);
            uint64_t v24 = *((void *)a1 + 6);
            if (v23)
            {
              uint64_t v5 = v23;
              if (*(void *)(v24 + 72) && CCLogStream::shouldLog())
              {
                uint64_t v25 = *((void *)a1 + 6);
                uint64_t v26 = *(CCLogStream **)(v25 + 72);
                (*(void (**)(void, uint64_t))(**(void **)(v25 + 56) + 112))(*(void *)(v25 + 56), v5);
                CCLogStream::logCrit(v26, "[dk] %s@%d: mapAppleUpperAuthToBcomWpaAuth(%d) failed, error %s\n");
              }
            }
            else
            {
              uint64_t v27 = *(AppleBCMWLANCommander **)(v24 + 64);
              *(void *)uint64_t v59 = &v58;
              *(void *)&v59[8] = 4;
              uint64_t v28 = AppleBCMWLANCommander::runIOCtlSet(v27, 165, (uint64_t)v59, 0, 0);
              if (v28)
              {
                uint64_t v5 = v28;
                if (*(void *)(*((void *)a1 + 6) + 72) && CCLogStream::shouldLog())
                {
                  uint64_t v29 = *((void *)a1 + 6);
                  uint64_t v30 = *(CCLogStream **)(v29 + 72);
                  (*(void (**)(void, uint64_t))(**(void **)(v29 + 56) + 112))(*(void *)(v29 + 56), v5);
                  CCLogStream::logCrit(v30, "[dk] %s@%d: WLC_SET_WPA_AUTH(%lu) failed, error %s\n");
                }
              }
              else
              {
                unsigned int v58 = 0;
                uint64_t v31 = mapAppleCipherToBcomWsecFlags(&v58, *(_DWORD *)(a2 + 72));
                if (v31)
                {
                  uint64_t v5 = v31;
                  if (*(void *)(*((void *)a1 + 6) + 72) && CCLogStream::shouldLog())
                  {
                    uint64_t v32 = *((void *)a1 + 6);
                    unsigned __int8 v33 = *(CCLogStream **)(v32 + 72);
                    (*(void (**)(void, uint64_t))(**(void **)(v32 + 56) + 112))(*(void *)(v32 + 56), v5);
                    CCLogStream::logCrit(v33, "[dk] %s@%d: mapAppleCipherToBcomWsecFlags(%d) failed, error %s\n");
                  }
                }
                else if ((*(_DWORD *)(a2 + 72) - 1) <= 1 {
                       && (uint64_t v34 = AppleBCMWLANJoinAdapter::setKey(a1, (_DWORD *)(a2 + 64), 0, 0, 0), v34))
                }
                {
                  uint64_t v5 = v34;
                  if (*(void *)(*((void *)a1 + 6) + 72) && CCLogStream::shouldLog())
                  {
                    uint64_t v35 = *((void *)a1 + 6);
                    uint64_t v36 = *(CCLogStream **)(v35 + 72);
                    (*(void (**)(void, uint64_t))(**(void **)(v35 + 56) + 112))(*(void *)(v35 + 56), v5);
                    CCLogStream::logCrit(v36, "[dk] %s@%d: Failed to program the WEP Key, error %s\n");
                  }
                }
                else
                {
                  int v37 = *(AppleBCMWLANCommander **)(*((void *)a1 + 6) + 64);
                  *(void *)uint64_t v59 = &v58;
                  *(void *)&v59[8] = 4;
                  uint64_t v38 = AppleBCMWLANCommander::runIOCtlSet(v37, 134, (uint64_t)v59, 0, 0);
                  if (v38)
                  {
                    uint64_t v5 = v38;
                    if (*(void *)(*((void *)a1 + 6) + 72) && CCLogStream::shouldLog())
                    {
                      uint64_t v39 = *((void *)a1 + 6);
                      uint64_t v40 = *(CCLogStream **)(v39 + 72);
                      (*(void (**)(void, uint64_t))(**(void **)(v39 + 56) + 112))(*(void *)(v39 + 56), v5);
                      CCLogStream::logCrit(v40, "[dk] %s@%d: WLC_SET_WSEC(%lu) failed, error %s\n");
                    }
                  }
                  else
                  {
                    int v57 = *(_DWORD *)(a2 + 20);
                    int v45 = *(AppleBCMWLANCommander **)(*((void *)a1 + 6) + 64);
                    *(void *)uint64_t v59 = &v57;
                    *(void *)&v59[8] = 4;
                    uint64_t v46 = AppleBCMWLANCommander::runIOCtlSet(v45, 30, (uint64_t)v59, 0, 0);
                    if (v46)
                    {
                      uint64_t v5 = v46;
                      if (*(void *)(*((void *)a1 + 6) + 72) && CCLogStream::shouldLog())
                      {
                        uint64_t v47 = *((void *)a1 + 6);
                        uint64_t v48 = *(CCLogStream **)(v47 + 72);
                        (*(void (**)(void, uint64_t))(**(void **)(v47 + 56) + 112))(*(void *)(v47 + 56), v5);
                        CCLogStream::logCrit(v48, "[dk] %s@%d: WLC_SET_CHANNEL(%lu) failed, error %s\n");
                      }
                    }
                    else
                    {
                      long long v60 = 0u;
                      *(_OWORD *)&v59[4] = 0u;
                      unsigned int v49 = *(_DWORD *)(a2 + 28);
                      if (v49 >= 0x20) {
                        size_t v50 = 32;
                      }
                      else {
                        size_t v50 = v49;
                      }
                      *(_DWORD *)uint64_t v59 = v50;
                      memcpy(&v59[4], v4, v50);
                      uint64_t v51 = *((void *)a1 + 6);
                      uint64_t v52 = *(CCLogStream **)(v51 + 72);
                      if (v52)
                      {
                        CCLogStream::shouldLog(v52, 0x100uLL);
                        uint64_t v51 = *((void *)a1 + 6);
                      }
                      unint64_t v53 = *(AppleBCMWLANCommander **)(v51 + 64);
                      v56[0] = v59;
                      v56[1] = 36;
                      uint64_t v5 = AppleBCMWLANCommander::runIOCtlSet(v53, 26, (uint64_t)v56, 0, 0);
                      if (v5
                        && *(void *)(*((void *)a1 + 6) + 72)
                        && CCLogStream::shouldLog())
                      {
                        uint64_t v54 = *((void *)a1 + 6);
                        unsigned int v55 = *(CCLogStream **)(v54 + 72);
                        (*(void (**)(void, uint64_t))(**(void **)(v54 + 56) + 112))(*(void *)(v54 + 56), v5);
                        CCLogStream::logCrit(v55, "[dk] %s@%d: WLC_SET_SSID() failed, error %s\n");
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v5;
}

uint64_t AppleBCMWLANJoinAdapter::abortFirmwareJoinSync(AppleBCMWLANJoinAdapter *this)
{
  uint64_t v15 = 0;
  int v14 = 3;
  uint64_t v2 = *((void *)this + 6);
  if (*(void *)(v2 + 72))
  {
    int shouldLog = CCLogStream::shouldLog();
    uint64_t v2 = *((void *)this + 6);
    if (shouldLog)
    {
      CCLogStream::logAlert(*(CCLogStream **)(v2 + 72), "[dk] %s@%d: Host sending firmware ('WLC_DISASSOC')/%u, val[%u] reason[%u]\n", "abortFirmwareJoinSync", 892, 52, 3, 3);
      uint64_t v2 = *((void *)this + 6);
    }
  }
  uint64_t v4 = *(AppleBCMWLANCommander **)(v2 + 64);
  v13[0] = &v14;
  v13[1] = 12;
  uint64_t v5 = AppleBCMWLANCommander::runIOCtlSet(v4, 52, (uint64_t)v13, 0, 0);
  uint64_t v6 = v5;
  if (v5 != -469793788 && v5 != 0)
  {
    uint64_t v8 = *((void *)this + 6);
    if (*(void *)(v8 + 72))
    {
      int v9 = CCLogStream::shouldLog();
      uint64_t v8 = *((void *)this + 6);
      if (v9)
      {
        uint64_t v11 = *(CCLogStream **)(v8 + 72);
        uint64_t v12 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v8 + 56) + 112))(*(void *)(v8 + 56), v6);
        CCLogStream::logCrit(v11, "[dk] %s@%d: Failed to abort join attempt in firmware (WLC_DISASSOC), %s\n", "abortFirmwareJoinSync", 896, v12);
        uint64_t v8 = *((void *)this + 6);
      }
    }
    AppleBCMWLANCore::recoverFromDisassocFailure(*(void *)(v8 + 56), v6);
  }
  AppleBCMWLANCore::postMessageInfra(*(AppleBCMWLANCore **)(*((void *)this + 6) + 56), 0xD6u, 0, 0);
  *(unsigned char *)(*((void *)this + 6) + 1) = 0;
  return v6;
}

uint64_t AppleBCMWLANJoinAdapter::configureSupplicantTimeOutForEAPAssociation(AppleBCMWLANJoinAdapter *this)
{
  return AppleBCMWLANJoinAdapter::configureSupplicantTimeOut(this, 6000);
}

uint64_t AppleBCMWLANJoinAdapter::configureSupplicantTimeOut(AppleBCMWLANJoinAdapter *this, int a2)
{
  int v16 = a2;
  int isAdhocCreated = IO80211BssManager::isAdhocCreated(*(IO80211BssManager **)(*((void *)this + 6) + 48));
  uint64_t v4 = *((void *)this + 6);
  if (isAdhocCreated)
  {
    if (*(void *)(v4 + 72) && CCLogStream::shouldLog()) {
      CCLogStream::logNotice(*(CCLogStream **)(*((void *)this + 6) + 72), "[dk] %s@%d:ADhoc is created, supplicant is disabled in firmware, ignore supplicant timeout config", "configureSupplicantTimeOut", 954);
    }
    return 0;
  }
  else
  {
    uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(v4 + 56) + 88))(*(void *)(v4 + 56));
    if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 136))(v7))
    {
      uint64_t v13 = this;
      uint64_t v14 = (uint64_t)AppleBCMWLANJoinAdapter::handleSupplicantTimeoutConfigAsyncCallBack;
      uint64_t v15 = 0;
      uint64_t v5 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 6) + 64), (uint64_t)"sup_wpa_tmo");
      if (v5 && *(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog())
      {
        uint64_t v8 = *((void *)this + 6);
        int v9 = *(CCLogStream **)(v8 + 72);
        (*(void (**)(void, uint64_t))(**(void **)(v8 + 56) + 112))(*(void *)(v8 + 56), v5);
        CCLogStream::logAlert(v9, "[dk] %s@%d: Failure to Configure Supplicant Timeout: %s\n");
      }
    }
    else
    {
      uint64_t v10 = *(AppleBCMWLANCommander **)(*((void *)this + 6) + 64);
      uint64_t v13 = (AppleBCMWLANJoinAdapter *)&v16;
      uint64_t v14 = 4;
      uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v10, (uint64_t)"sup_wpa_tmo", (uint64_t)&v13, 0, 0);
      if (v5 && *(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog())
      {
        uint64_t v11 = *((void *)this + 6);
        uint64_t v12 = *(CCLogStream **)(v11 + 72);
        (*(void (**)(void, uint64_t))(**(void **)(v11 + 56) + 112))(*(void *)(v11 + 56), v5);
        CCLogStream::logAlert(v12, "[dk] %s@%d: Failure to set iovar sup_wpa_tmo, %s\n");
      }
    }
  }
  return v5;
}

uint64_t AppleBCMWLANJoinAdapter::handleSupplicantTimeoutConfigAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(*(void *)(result + 48) + 72);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = *(void *)(v3 + 48);
        uint64_t v6 = *(CCLogStream **)(v5 + 72);
        uint64_t v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 56) + 112))(*(void *)(v5 + 56), a3);
        return CCLogStream::logCrit(v6, "[dk] %s@%d: Failure to Configure Supplicant Timeout, %s\n", "handleSupplicantTimeoutConfigAsyncCallBack", 980, v7);
      }
    }
  }
  return result;
}

double AppleBCMWLANJoinAdapter::reset(AppleBCMWLANJoinAdapter *this)
{
  *(void *)(*((void *)this + 6) + 104) = 0;
  uint64_t v1 = *((void *)this + 6);
  *(unsigned char *)(v1 + 368) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 336) = 0u;
  *(_OWORD *)(v1 + 352) = 0u;
  *(_OWORD *)(v1 + 304) = 0u;
  *(_OWORD *)(v1 + 320) = 0u;
  *(_OWORD *)(v1 + 272) = 0u;
  *(_OWORD *)(v1 + 288) = 0u;
  *(_OWORD *)(v1 + 240) = 0u;
  *(_OWORD *)(v1 + 256) = 0u;
  *(_OWORD *)(v1 + 208) = 0u;
  *(_OWORD *)(v1 + 224) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(unsigned char *)(*((void *)this + 6) + 1) = 0;
  return result;
}

AppleBCMWLANJoinAdapter *AppleBCMWLANJoinAdapter::updateTransDisabledModeAsync(AppleBCMWLANJoinAdapter *this, int a2)
{
  *(_DWORD *)(*((void *)this + 6) + 1840) = a2;
  if (*(_DWORD *)(*((void *)this + 6) + 1840)) {
    return (AppleBCMWLANJoinAdapter *)AppleBCMWLANJoinAdapter::getBSSInfoAsync(this);
  }
  return this;
}

uint64_t AppleBCMWLANJoinAdapter::getBSSInfoAsync(AppleBCMWLANJoinAdapter *this)
{
  int v11 = 1932;
  v10[0] = this;
  v10[1] = AppleBCMWLANJoinAdapter::getBSSInfoAsyncCallback;
  void v10[2] = 0;
  uint64_t v2 = *(AppleBCMWLANCommander **)(*((void *)this + 6) + 64);
  v9[0] = &v11;
  v9[1] = 4;
  int v8 = 126615688;
  uint64_t result = AppleBCMWLANCommander::sendIOCtlGet(v2, 136, (uint64_t)v9, (unsigned __int16 *)&v8, (uint64_t)v10, 0);
  if (result)
  {
    uint64_t v4 = result;
    if (*(void *)(*((void *)this + 6) + 72))
    {
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = *((void *)this + 6);
        uint64_t v6 = *(CCLogStream **)(v5 + 72);
        uint64_t v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 56) + 112))(*(void *)(v5 + 56), v4);
        CCLogStream::logCrit(v6, "[dk] %s@%d: WLC_GET_BSS_INFO() failed, error %s\n", "getBSSInfoAsync", 2844, v7);
      }
    }
    return AppleBCMWLANJoinAdapter::sendConnectComplete((uint64_t)this);
  }
  return result;
}

uint64_t AppleBCMWLANJoinAdapter::updateTransDisabledMode(AppleBCMWLANJoinAdapter *this, int a2, char a3)
{
  int v6 = AppleBCMWLANCore::checkForWPA3SAESupport(*(AppleBCMWLANCore **)(*((void *)this + 6) + 56));
  uint64_t result = 0;
  if (a2 && v6)
  {
    if (!(a2 & 0x30000 | ((a2 & 0x3000) != 0))) {
      return 0;
    }
    uint64_t v8 = AppleBCMWLANJoinAdapter::setAssocWsecInfo(this, 268, a3 & 1, 0, 0, 0);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t result = *(void *)(*((void *)this + 6) + 72);
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          uint64_t v10 = *((void *)this + 6);
          int v11 = *(CCLogStream **)(v10 + 72);
          uint64_t v12 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v10 + 56) + 112))(*(void *)(v10 + 56), v9);
          CCLogStream::logCrit(v11, "[dk] %s@%d:%s: set wsec_info(%d) for transition terminated mode failed, error %s\n", "updateTransDisabledMode", 1077, "updateTransDisabledMode", 268, v12);
          return 0;
        }
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t AppleBCMWLANJoinAdapter::hasJoinTimeoutBlob(AppleBCMWLANJoinAdapter *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 2);
}

uint64_t AppleBCMWLANJoinAdapter::clearJoinTimeoutBlobAvialable(uint64_t this)
{
  *(unsigned char *)(*(void *)(this + 48) + 2) = 0;
  return this;
}

uint64_t AppleBCMWLANJoinAdapter::initWithDriver(uint64_t a1, AppleBCMWLANCore *a2)
{
  BOOL v4 = OSObject::init((OSObject *)a1);
  uint64_t result = 0;
  if (a2)
  {
    if (v4)
    {
      uint64_t result = IOMallocZeroTyped();
      *(void *)(a1 + 48) = result;
      if (result)
      {
        *(void *)(result + 56) = a2;
        *(void *)(*(void *)(a1 + 48) + 72) = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
        uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 72);
        if (v6)
        {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
          *(void *)(*(void *)(a1 + 48) + 64) = AppleBCMWLANCore::getCommander(a2);
          uint64_t v7 = *(void *)(a1 + 48);
          uint64_t v8 = *(void *)(v7 + 64);
          if (v8)
          {
            (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
            *(void *)(*(void *)(a1 + 48) + 48) = AppleBCMWLANCore::getBssManager(a2);
            uint64_t v9 = *(void *)(a1 + 48);
            uint64_t v10 = *(void *)(v9 + 48);
            if (v10)
            {
              (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
              *(void *)(*(void *)(a1 + 48) + 88) = AppleBCMWLANCore::getPowerManager(a2);
              uint64_t v11 = *(void *)(a1 + 48);
              uint64_t v12 = *(void *)(v11 + 88);
              if (v12)
              {
                (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
                *(void *)(*(void *)(a1 + 48) + 80) = AppleBCMWLANCore::getFaultReporter(*(AppleBCMWLANCore **)(*(void *)(a1 + 48) + 56));
                (*(void (**)(void))(**(void **)(*(void *)(a1 + 48) + 80) + 8))(*(void *)(*(void *)(a1 + 48) + 80));
                getClassNameHelper((OSObject *)a1);
                CCFaultReporter::registerCallbacks();
                *(_WORD *)(*(void *)(a1 + 48) + 640) = -1;
                *(_WORD *)(*(void *)(a1 + 48) + 642) = -1;
                *(unsigned char *)(*(void *)(a1 + 48) + 1) = 0;
                return 1;
              }
              if (*(void *)(v11 + 72))
              {
                if (CCLogStream::shouldLog()) {
                  CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 72), "[dk] %s@%d: Unable to get Power Manager\n");
                }
              }
            }
            else if (*(void *)(v9 + 72) && CCLogStream::shouldLog())
            {
              CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 72), "[dk] %s@%d: Failed to get Bss Manager\n");
            }
          }
          else if (*(void *)(v7 + 72) && CCLogStream::shouldLog())
          {
            CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 72), "[dk] %s@%d: Unable to get Command Manager\n");
          }
        }
        else
        {
          ClassNameHelper = (const char *)getClassNameHelper((OSObject *)a1);
          IOLog("%s::%s(): Unable to get debug logger\n", ClassNameHelper, "initWithDriver");
        }
        AppleBCMWLANJoinAdapter::freeResources((AppleBCMWLANJoinAdapter *)a1);
        return 0;
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANJoinAdapter::prepareFRCallback(uint64_t a1)
{
  **(unsigned char **)(a1 + 48) = 1;
  return 0;
}

uint64_t AppleBCMWLANJoinAdapter::collectImmediateFaultDataCallback(AppleBCMWLANJoinAdapter *this, CCFaultReport *a2)
{
  BOOL v4 = (char *)IOMallocZeroData();
  if (v4)
  {
    uint64_t v5 = v4;
    AppleBCMWLANJoinAdapter::logState(this, v4);
    OSStringPtr v6 = OSString::withCString("JoinManagerState.txt");
    OSStringPtr v7 = OSString::withCString(v5);
    (*(void (**)(CCFaultReport *, OSStringPtr, OSStringPtr))(*(void *)a2 + 192))(a2, v6, v7);
    IOFreeData();
  }
  return 0;
}

uint64_t AppleBCMWLANJoinAdapter::completeFaultReportCallback(uint64_t a1)
{
  **(unsigned char **)(a1 + 48) = 0;
  return 0;
}

uint64_t AppleBCMWLANJoinAdapter::induceFaultCallback(AppleBCMWLANJoinAdapter *this, int a2, const char *a3)
{
  if (a2 == -469792511 && *(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 72), "[dk] %s@%d:Change of joint timeout via induce fault callback not supported\n", "induceFaultCallback", 2964);
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANJoinAdapter::initWithDriver(uint64_t a1, AppleBCMWLANCore *a2)
{
  return AppleBCMWLANJoinAdapter::initWithDriver(a1 - 40, a2);
}

CCFaultReporter *AppleBCMWLANJoinAdapter::stop(OSObject *this)
{
  uint64_t result = *(CCFaultReporter **)(*(void *)&this[1].refcount + 80);
  if (result) {
    return (CCFaultReporter *)CCFaultReporter::unregisterCallbacks(result, this);
  }
  return result;
}

uint64_t AppleBCMWLANJoinAdapter::configure6GDefaultUnAssocDwell(AppleBCMWLANJoinAdapter *this)
{
  if (!AppleBCMWLANCore::checkFor6GSupportCardCapability(*(AppleBCMWLANCore **)(*((void *)this + 6)
                                                                                             + 56)))
    return 3758097084;
  return AppleBCMWLANJoinAdapter::custom6GUnAssocDwell(this, 0x6Eu);
}

uint64_t AppleBCMWLANJoinAdapter::custom6GUnAssocDwell(AppleBCMWLANJoinAdapter *this, unsigned int a2)
{
  unsigned int v19 = a2;
  uint64_t v4 = 3758097084;
  if (AppleBCMWLANCore::checkFor6GSupportCardCapability(*(AppleBCMWLANCore **)(*((void *)this + 6)
                                                                                            + 56))
    && a2 <= 0x12B)
  {
    uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 6) + 56) + 88))(*(void *)(*((void *)this + 6) + 56));
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 136))(v5))
    {
      int v16 = this;
      uint64_t v17 = (uint64_t)AppleBCMWLANJoinAdapter::handleCustom6GUnAssocDwellAsyncCallBack;
      uint64_t v18 = 0;
      uint64_t v4 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 6) + 64), (uint64_t)"scan_6g_unassoc_time");
      if (v4 && *(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog())
      {
        uint64_t v6 = *((void *)this + 6);
        OSStringPtr v7 = *(CCLogStream **)(v6 + 72);
        uint64_t v14 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v6 + 56) + 112))(*(void *)(v6 + 56), v4);
        CCLogStream::logAlert(v7, "[dk] %s@%d: Failure to configure 6G Dwell for Unassoc: %s\n", "custom6GUnAssocDwell", 1416, v14);
      }
    }
    else
    {
      uint64_t v8 = *(AppleBCMWLANCommander **)(*((void *)this + 6) + 64);
      int v16 = (AppleBCMWLANJoinAdapter *)&v19;
      uint64_t v17 = 4;
      uint64_t v9 = AppleBCMWLANCommander::runIOVarSet(v8, (uint64_t)"scan_6g_unassoc_time", (uint64_t)&v16, 0, 0);
      uint64_t v4 = v9;
      BOOL v10 = v9 == -469794537 || v9 == 0;
      if (!v10 && *(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog())
      {
        uint64_t v12 = *((void *)this + 6);
        uint64_t v13 = *(CCLogStream **)(v12 + 72);
        uint64_t v15 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v12 + 56) + 112))(*(void *)(v12 + 56), v4);
        CCLogStream::logAlert(v13, "[dk] %s@%d: Failure to configure 6G Dwell for Unassoc: %s\n", "custom6GUnAssocDwell", 1422, v15);
      }
    }
  }
  return v4;
}

uint64_t AppleBCMWLANJoinAdapter::handleCustom6GUnAssocDwellAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(*(void *)(result + 48) + 72);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = *(void *)(v3 + 48);
        uint64_t v6 = *(CCLogStream **)(v5 + 72);
        OSStringPtr v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 56) + 112))(*(void *)(v5 + 56), a3);
        return CCLogStream::logCrit(v6, "[dk] %s@%d: Failure to configure 6G Dwell for Unassoc, %s\n", "handleCustom6GUnAssocDwellAsyncCallBack", 1432, v7);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANJoinAdapter::handleBeaconProtectionAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(*(void *)(result + 48) + 72);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = *(void *)(v3 + 48);
        uint64_t v6 = *(CCLogStream **)(v5 + 72);
        OSStringPtr v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 56) + 112))(*(void *)(v5 + 56), a3);
        return CCLogStream::logAlert(v6, "[dk] %s@%d: Error: cannot set becon protection params %s\n", "handleBeaconProtectionAsyncCallBack", 1620, v7);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANJoinAdapter::setBeaconProtectionParams(AppleBCMWLANJoinAdapter *this, const char *a2, __int16 a3, void *a4, unsigned int a5, int a6)
{
  char v12 = AppleBCMWLANCore::checkForBeaconProtectionSupport(*(AppleBCMWLANCore **)(*((void *)this + 6) + 56));
  if (a6 || (v12 & 1) != 0)
  {
    uint64_t v14 = (_WORD *)IOMallocZeroData();
    if (v14)
    {
      uint64_t v15 = v14;
      *uint64_t v14 = 1;
      v14[1] = a5;
      v14[2] = a3;
      memcpy(v14 + 3, a4, a5);
      if ((_WORD)a5 == 0xFFFA) {
        int v16 = 0;
      }
      else {
        int v16 = v15;
      }
      v22[0] = v16;
      v22[1] = (unsigned __int16)(a5 + 6);
      uint64_t v17 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 6) + 56) + 88))(*(void *)(*((void *)this + 6) + 56));
      if ((*(unsigned int (**)(uint64_t))(*(void *)v17 + 136))(v17))
      {
        uint64_t v13 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 6) + 64), (uint64_t)"bcnprot");
        if (v13 && *(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 72), "[dk] %s@%d: Failed SET IOCTL bcnprot, cret[0x%08x]\n", "setBeaconProtectionParams", 1600, v13);
        }
      }
      else
      {
        uint64_t v13 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 6) + 64), (uint64_t)"bcnprot", (uint64_t)v22, 0, 0);
        if (v13 && *(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog())
        {
          uint64_t v19 = *((void *)this + 6);
          uint64_t v20 = *(CCLogStream **)(v19 + 72);
          uint64_t v21 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v19 + 56) + 112))(*(void *)(v19 + 56), v13);
          CCLogStream::logAlertIf(v20, 0x20uLL, "[dk] %s@%d:BCN PROT: Failed to run BCN PROT set var (%s), %s\n", "setBeaconProtectionParams", 1606, a2, v21);
        }
      }
      IOFreeData();
    }
    else
    {
      uint64_t v13 = 3758097085;
      if (*(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 72), "[dk] %s@%d:bcmprot cmd alloc fail\n", "setBeaconProtectionParams", 1577);
      }
    }
  }
  else
  {
    uint64_t v13 = 3758097095;
    if (*(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog())
    {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 72), "[dk] %s@%d:Failed to set bcn protection params, feature not supported\n", "setBeaconProtectionParams", 1564);
      return 3758097095;
    }
  }
  return v13;
}

uint64_t AppleBCMWLANJoinAdapter::handleCustomUnAssocDwellAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(*(void *)(result + 48) + 72);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = *(void *)(v3 + 48);
        uint64_t v6 = *(CCLogStream **)(v5 + 72);
        OSStringPtr v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 56) + 112))(*(void *)(v5 + 56), a3);
        return CCLogStream::logCrit(v6, "[dk] %s@%d: Failed to configure Custom Dwell Time, %s\n", "handleCustomUnAssocDwellAsyncCallBack", 1656, v7);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANJoinAdapter::collectJoinTimeoutAwdMetrics(AppleBCMWLANJoinAdapter *this)
{
  if (!AppleBCMWLANCore::checkForAWDDataInfoSupport(*(AppleBCMWLANCore **)(*((void *)this + 6) + 56))) {
    return 3758097095;
  }
  uint64_t v2 = (void *)(*((void *)this + 6) + 1324);
  int v9 = 0;
  v10[0] = &v9;
  v10[1] = 4;
  bzero(v2, 0x204uLL);
  v8[0] = v2;
  v8[1] = 0x20400010204;
  uint64_t v3 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*((void *)this + 6) + 64), (uint64_t)"awd_data_info", (uint64_t)v10, (uint64_t)v8, 0);
  if (v3 && *(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog())
  {
    uint64_t v4 = *((void *)this + 6);
    uint64_t v5 = *(CCLogStream **)(v4 + 72);
    uint64_t v6 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v4 + 56) + 112))(*(void *)(v4 + 56), v3);
    CCLogStream::logAlert(v5, "[dk] %s@%d:%s fails returning %s\n", "collectJoinTimeoutAwdMetrics", 1701, "awd_data_info", v6);
  }
  return v3;
}

uint64_t AppleBCMWLANJoinAdapter::collectCCAForJoinTimeout(AppleBCMWLANJoinAdapter *this, unsigned int *a2)
{
  uint64_t v4 = *((void *)this + 6);
  unsigned int v5 = *(_DWORD *)(v4 + 628);
  if (v5 >= 3) {
    uint64_t v6 = 3;
  }
  else {
    uint64_t v6 = v5;
  }
  if (*(void *)(v4 + 72) && CCLogStream::shouldLog()) {
    CCLogStream::logInfo(*(CCLogStream **)(*((void *)this + 6) + 72), "[dk] %s@%d:bss count %d\n", "collectCCAForJoinTimeout", 1713, v6);
  }
  *a2 = 0;
  if (v6)
  {
    uint64_t v7 = 0;
    while (1)
    {
      v25[0] = 0;
      v25[1] = 0;
      uint64_t v26 = 0;
      uint64_t v8 = *((void *)this + 6);
      LOWORD(v25[0]) = *(_WORD *)(v8 + 2 * v7 + 632);
      if (*(void *)(v8 + 72))
      {
        int shouldLog = CCLogStream::shouldLog();
        uint64_t v8 = *((void *)this + 6);
        if (shouldLog)
        {
          CCLogStream::logInfo(*(CCLogStream **)(v8 + 72), "[dk] %s@%d:chanspec %x\n", "collectCCAForJoinTimeout", 1720, LOWORD(v25[0]));
          uint64_t v8 = *((void *)this + 6);
        }
      }
      v24[0] = v25;
      v24[1] = 0x1800000018;
      BOOL v10 = *(AppleBCMWLANCommander **)(v8 + 64);
      v23[0] = v25;
      v23[1] = 24;
      uint64_t v11 = AppleBCMWLANCommander::runIOVarGet(v10, (uint64_t)"cca_get_stats", (uint64_t)v23, (uint64_t)v24, 0);
      if (v11) {
        break;
      }
      if (!WORD1(v25[0])) {
        goto LABEL_41;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      int v14 = 0;
      int v15 = 0;
      unsigned int v16 = 0;
      do
      {
        uint64_t v17 = (_DWORD *)((char *)v25 + v12);
        int v18 = *(_DWORD *)((char *)v25 + v12 + 4);
        if (v18)
        {
          v16 += v18;
          v15 += v17[2];
          v14 += v17[3];
          v13 += v17[4];
        }
        v12 += 20;
      }
      while (20 * WORD1(v25[0]) != v12);
      if (!v16)
      {
LABEL_41:
        if (*(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 72), "[dk] %s@%d:Invalid duration\n", "collectCCAForJoinTimeout", 1740);
        }
        uint64_t v19 = 0;
        *a2 = 0;
        return v19;
      }
      *a2 += 100 * (v14 + v15 + v13) / v16;
      if (*(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog()) {
        CCLogStream::logInfo(*(CCLogStream **)(*((void *)this + 6) + 72), "[dk] %s@%d:CCA during join : chanspec:%x duration:%d congest_ibss:%d congest_obss:%d interference:%d timestamp:%d num_secs:%d\n", "collectCCAForJoinTimeout", 1743, LOWORD(v25[0]), v16, v15, v14, v13, HIDWORD(v26), WORD1(v25[0]));
      }
      if (++v7 == v6)
      {
        *a2 /= v6;
        if (*(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog()) {
          CCLogStream::logInfo(*(CCLogStream **)(*((void *)this + 6) + 72), "[dk] %s@%d:CCA %d\n", "collectCCAForJoinTimeout", 1747, *a2);
        }
        return 0;
      }
    }
    uint64_t v19 = v11;
    if (*(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog())
    {
      uint64_t v21 = *((void *)this + 6);
      int v22 = *(CCLogStream **)(v21 + 72);
      (*(void (**)(void, uint64_t))(**(void **)(v21 + 56) + 112))(*(void *)(v21 + 56), v19);
      CCLogStream::logAlert(v22, "[dk] %s@%d: Unable to get cca %s\n");
    }
  }
  else
  {
    uint64_t v19 = 3758097084;
    if (*(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 72), "[dk] %s@%d:bss count is 0\n");
    }
  }
  return v19;
}

uint64_t AppleBCMWLANJoinAdapter::setAssocRSNIEAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(*(void *)(result + 48) + 72);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = *(void *)(v3 + 48);
        uint64_t v6 = *(CCLogStream **)(v5 + 72);
        uint64_t v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 56) + 112))(*(void *)(v5 + 56), a3);
        return CCLogStream::logCrit(v6, "[dk] %s@%d: Failed to update RSN IE, %s\n", "setAssocRSNIEAsyncCallback", 1786, v7);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANJoinAdapter::setCustomAssocIE(AppleBCMWLANJoinAdapter *this, char *a2, uint64_t a3)
{
  int v3 = a3;
  if (a3)
  {
    int v6 = isMemZero(a2, a3);
    if (*(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog())
    {
      uint64_t v7 = "nonzero";
      if (v6) {
        uint64_t v7 = "all zeros";
      }
      CCLogStream::logAlertIf(*(CCLogStream **)(*((void *)this + 6) + 72), 0x800uLL, "[dk] %s@%d: Setting WAPI IE has len %d, is %s\n", "setCustomAssocIE", 1797, v3, v7);
    }
  }
  else if (*(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog())
  {
    CCLogStream::logNoticeIf(*(CCLogStream **)(*((void *)this + 6) + 72), 0x800uLL, "[dk] %s@%d: Clearing WAPI IE\n", "setCustomAssocIE", 1799);
  }
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 6) + 56) + 88))(*(void *)(*((void *)this + 6) + 56));
  if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 136))(v8))
  {
    uint64_t v21 = this;
    int v22 = AppleBCMWLANJoinAdapter::setCustomAssocIEAsyncCallback;
    uint64_t v23 = 0;
    uint64_t v9 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 6) + 64), (uint64_t)"wapiie");
  }
  else
  {
    BOOL v10 = *(AppleBCMWLANCommander **)(*((void *)this + 6) + 64);
    BOOL v11 = a2 != 0;
    BOOL v12 = (unsigned __int16)v3 != 0;
    BOOL v13 = !v11 || !v12;
    if (v11 && v12) {
      int v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(unsigned __int16)v3;
    }
    else {
      int v14 = 0;
    }
    if (v13) {
      int v15 = 0;
    }
    else {
      int v15 = a2;
    }
    uint64_t v21 = (AppleBCMWLANJoinAdapter *)v15;
    int v22 = v14;
    uint64_t v9 = AppleBCMWLANCommander::runIOVarSet(v10, (uint64_t)"wapiie", (uint64_t)&v21, 0, 0);
  }
  uint64_t v16 = v9;
  if (v9 && *(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog())
  {
    uint64_t v18 = *((void *)this + 6);
    uint64_t v19 = *(CCLogStream **)(v18 + 72);
    uint64_t v20 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v18 + 56) + 112))(*(void *)(v18 + 56), v16);
    CCLogStream::logCrit(v19, "[dk] %s@%d: wapiie failed, error %s\n", "setCustomAssocIE", 1815, v20);
  }
  return v16;
}

uint64_t AppleBCMWLANJoinAdapter::setCustomAssocIEAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(*(void *)(result + 48) + 72);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = *(void *)(v3 + 48);
        int v6 = *(CCLogStream **)(v5 + 72);
        uint64_t v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 56) + 112))(*(void *)(v5 + 56), a3);
        return CCLogStream::logCrit(v6, "[dk] %s@%d: Failed to update Custom IE, %s\n", "setCustomAssocIEAsyncCallback", 1824, v7);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANJoinAdapter::getAssocRSNXE(AppleBCMWLANJoinAdapter *this, unsigned __int8 *a2, unint64_t *a3)
{
  uint64_t v6 = 3758097090;
  if (AppleBCMWLANCore::checkForSaePKSupport(*(AppleBCMWLANCore **)(*((void *)this + 6) + 56))
    && AppleBCMWLANCore::checkForWPA3SAESupport(*(AppleBCMWLANCore **)(*((void *)this + 6) + 56)))
  {
    uint64_t v7 = *((void *)this + 6);
    size_t v8 = *(void *)(v7 + 104);
    if (*a3 >= v8)
    {
      memcpy(a2, (const void *)(v7 + 112), v8);
      uint64_t v6 = 0;
      *a3 = *(void *)(*((void *)this + 6) + 104);
    }
    else
    {
      return 3758097115;
    }
  }
  return v6;
}

void *AppleBCMWLANJoinAdapter::getAssociatedRSNXEAsyncCallback(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  uint64_t v4 = *(void *)(a1 + 48);
  if (a3)
  {
    uint64_t result = *(void **)(v4 + 72);
    if (result)
    {
      uint64_t result = (void *)CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v9 = *(void *)(a1 + 48);
        BOOL v10 = *(CCLogStream **)(v9 + 72);
        BOOL v11 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v9 + 56) + 112))(*(void *)(v9 + 56), a3);
        return (void *)CCLogStream::logCrit(v10, "[dk] %s@%d: Failed to get RSN XE, %s\n", "getAssociatedRSNXEAsyncCallback", 1878, v11);
      }
    }
  }
  else
  {
    size_t v8 = *a4;
    return memcpy((void *)(v4 + 369), v8, 0x101uLL);
  }
  return result;
}

uint64_t AppleBCMWLANJoinAdapter::getAssociatedRSNXE(AppleBCMWLANJoinAdapter *this)
{
  uint64_t v2 = 3758097090;
  if (!AppleBCMWLANCore::checkForSaePKSupport(*(AppleBCMWLANCore **)(*((void *)this + 6) + 56))
    || !AppleBCMWLANCore::checkForWPA3SAESupport(*(AppleBCMWLANCore **)(*((void *)this + 6) + 56)))
  {
    return v2;
  }
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 6) + 56) + 88))(*(void *)(*((void *)this + 6) + 56));
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v3 + 136))(v3))
  {
    uint64_t v8 = *((void *)this + 6);
    BOOL v11 = (AppleBCMWLANJoinAdapter *)(v8 + 369);
    uint64_t v12 = 0x10101010101;
    if (AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(v8 + 64), (uint64_t)"rsnxe", (uint64_t)&kNoTxPayload, (uint64_t)&v11, 0))goto LABEL_5; {
    return 0;
    }
  }
  BOOL v11 = this;
  uint64_t v12 = (uint64_t)AppleBCMWLANJoinAdapter::getAssociatedRSNXEAsyncCallback;
  uint64_t v13 = 0;
  uint64_t v4 = *(AppleBCMWLANCommander **)(*((void *)this + 6) + 64);
  int v10 = 16843009;
  if (!AppleBCMWLANCommander::sendIOVarGet(v4, (uint64_t)"rsnxe", (uint64_t)&kNoTxPayload, (unsigned __int16 *)&v10, (uint64_t)&v11, 0))return 0; {
LABEL_5:
  }
  if (*(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog())
  {
    uint64_t v5 = *((void *)this + 6);
    uint64_t v6 = *(CCLogStream **)(v5 + 72);
    uint64_t v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 56) + 112))(*(void *)(v5 + 56), 3758097090);
    CCLogStream::logCrit(v6, "[dk] %s@%d: rsnxe failed, error %s\n", "getAssociatedRSNXE", 1905, v7);
  }
  return v2;
}

uint64_t AppleBCMWLANJoinAdapter::setAssocRSNXE(AppleBCMWLANJoinAdapter *this, const unsigned __int8 *a2, size_t a3)
{
  uint64_t v6 = 3758097090;
  if (AppleBCMWLANCore::checkForSaePKSupport(*(AppleBCMWLANCore **)(*((void *)this + 6) + 56))
    && AppleBCMWLANCore::checkForWPA3SAESupport(*(AppleBCMWLANCore **)(*((void *)this + 6) + 56)))
  {
    if (a3 <= 0x101)
    {
      uint64_t v7 = *((void *)this + 6);
      uint64_t v8 = (_OWORD *)(v7 + 112);
      if (a3)
      {
        memcpy(v8, a2, a3);
      }
      else
      {
        *(unsigned char *)(v7 + 368) = 0;
        *(_OWORD *)(v7 + 336) = 0u;
        *(_OWORD *)(v7 + 352) = 0u;
        *(_OWORD *)(v7 + 304) = 0u;
        *(_OWORD *)(v7 + 320) = 0u;
        *(_OWORD *)(v7 + 272) = 0u;
        *(_OWORD *)(v7 + 288) = 0u;
        *(_OWORD *)(v7 + 240) = 0u;
        *(_OWORD *)(v7 + 256) = 0u;
        *(_OWORD *)(v7 + 208) = 0u;
        *(_OWORD *)(v7 + 224) = 0u;
        *(_OWORD *)(v7 + 176) = 0u;
        *(_OWORD *)(v7 + 192) = 0u;
        *(_OWORD *)(v7 + 144) = 0u;
        *(_OWORD *)(v7 + 160) = 0u;
        _OWORD *v8 = 0u;
        *(_OWORD *)(v7 + 128) = 0u;
      }
      uint64_t v6 = 0;
      *(void *)(*((void *)this + 6) + 104) = a3;
    }
    else
    {
      return 3758097115;
    }
  }
  return v6;
}

uint64_t AppleBCMWLANJoinAdapter::programPMK(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v4 = *(AppleBCMWLANCommander **)(*(void *)(a1 + 48) + 64);
  v10[0] = a2;
  v10[1] = 264;
  uint64_t v5 = AppleBCMWLANCommander::runIOCtlSet(v4, 268, (uint64_t)v10, 0, 0);
  if (v5)
  {
    if (*(void *)(*(void *)(a1 + 48) + 72) && CCLogStream::shouldLog())
    {
      uint64_t v7 = *(void *)(a1 + 48);
      uint64_t v8 = *(CCLogStream **)(v7 + 72);
      uint64_t v9 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v7 + 56) + 112))(*(void *)(v7 + 56), v5);
      CCLogStream::logAlert(v8, "[dk] %s@%d: WLC_SET_WSEC_PMK() failed, error %s\n", "programPMK", 2148, v9);
    }
    if (v5 == -469794530 && *a2) {
      CCFaultReporter::reportFault(*(CCFaultReporter **)(*(void *)(a1 + 48) + 80), 5u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANJoinAdapter.cpp", 0x869u, "programPMK", 0, -469792504, "WLC_SET_WSEC_PMK key len %x", *a2);
    }
  }
  return v5;
}

uint64_t AppleBCMWLANJoinAdapter::setAssocWsecInfoPMKPassword(AppleBCMWLANJoinAdapter *this, unint64_t a2, unsigned int a3, unint64_t a4, unsigned int a5)
{
  if (a5 | a3 && a2 | a4)
  {
    if (!a2 || (a3 & 0xFFEF) == 0x20)
    {
      __int16 v12 = (a3 & 0xFFFC) + 4;
      if ((a3 & 3) == 0) {
        __int16 v12 = a3;
      }
      __int16 v13 = (a5 & 0xFFFC) + 4;
      size_t __n = a5;
      if ((a5 & 3) == 0) {
        __int16 v13 = a5;
      }
      unsigned __int16 v14 = v12 + 36;
      unsigned __int16 v15 = v12 + 36 + v13;
      uint64_t v16 = IOMallocZeroData();
      if (v16)
      {
        uint64_t v17 = (_WORD *)v16;
        size_t v25 = v15 + 8;
        *(unsigned char *)uint64_t v16 = 1;
        *(unsigned char *)(v16 + AppleBCMWLANJoinAdapter::free(this - 3) = 1;
        *(_WORD *)(v16 + 4) = 264;
        *(_WORD *)(v16 + 6) = v15;
        *(_WORD *)(v16 + 8) = 256;
        uint64_t v18 = v16 + 8;
        unsigned __int16 v19 = 36;
        *(_WORD *)(v16 + 10) = v15;
        if (a3)
        {
          *(_WORD *)(v16 + 36) = a3;
          *(_WORD *)(v16 + 38) = 36;
          memcpy((void *)(v16 + 44), (const void *)a2, a3);
          unsigned __int16 v19 = v14;
        }
        if (a5)
        {
          v17[20] = a5;
          v17[21] = v19;
          memcpy((void *)(v18 + v19), (const void *)a4, __n);
        }
        uint64_t v20 = *(AppleBCMWLANCommander **)(*((void *)this + 6) + 64);
        if (v15 == 0xFFF8) {
          uint64_t v21 = 0;
        }
        else {
          uint64_t v21 = v17;
        }
        v27[0] = v21;
        v27[1] = (unsigned __int16)(v15 + 8);
        uint64_t v10 = AppleBCMWLANCommander::runIOVarSet(v20, (uint64_t)"wsec_info", (uint64_t)v27, 0, 0);
        if (v10 && *(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog())
        {
          uint64_t v22 = *((void *)this + 6);
          uint64_t v23 = *(CCLogStream **)(v22 + 72);
          uint64_t v24 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v22 + 56) + 112))(*(void *)(v22 + 56), v10);
          CCLogStream::logAlert(v23, "[dk] %s@%d:%s: Failure setting wsec_info for PMK, %s\n", "setAssocWsecInfoPMKPassword", 2266, "setAssocWsecInfoPMKPassword", v24);
        }
        bzero(v17, v25);
        IOFreeData();
      }
      else
      {
        uint64_t v10 = 3758097085;
        if (*(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 72), "[dk] %s@%d:%s: Unable to allocate memory for txBuf\n");
        }
      }
    }
    else
    {
      uint64_t v10 = 3758097090;
      if (*(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 72), "[dk] %s@%d:Invalid PMK length (pmkLen %u)\n");
      }
    }
  }
  else
  {
    uint64_t v10 = 3758097090;
    if (*(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 72), "[dk] %s@%d:Invalid parameters (pmk: %p pmkLen %u pwd %p pwdLen %u\n");
    }
  }
  return v10;
}

uint64_t AppleBCMWLANJoinAdapter::programKeyAsync(uint64_t a1, uint64_t a2)
{
  v10[0] = a1;
  v10[1] = AppleBCMWLANJoinAdapter::programKeyAsyncCallback;
  void v10[2] = 0;
  uint64_t v3 = *(AppleBCMWLANCommander **)(*(void *)(a1 + 48) + 64);
  v9[0] = a2;
  v9[1] = 164;
  uint64_t v4 = AppleBCMWLANCommander::sendIOCtlSet(v3, 45, (uint64_t)v9, kNoRxExpected, (uint64_t)v10, 0);
  if (v4 && *(void *)(*(void *)(a1 + 48) + 72) && CCLogStream::shouldLog())
  {
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = *(CCLogStream **)(v6 + 72);
    uint64_t v8 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v6 + 56) + 112))(*(void *)(v6 + 56), v4);
    CCLogStream::logCrit(v7, "[dk] %s@%d: WLC_SET_KEY() failed, error %s\n", "programKeyAsync", 2119, v8);
  }
  return v4;
}

uint64_t AppleBCMWLANJoinAdapter::programKeySync(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(AppleBCMWLANCommander **)(*(void *)(a1 + 48) + 64);
  v9[0] = a2;
  v9[1] = 164;
  uint64_t v4 = AppleBCMWLANCommander::runIOCtlSet(v3, 45, (uint64_t)v9, 0, 0);
  if (v4 && *(void *)(*(void *)(a1 + 48) + 72) && CCLogStream::shouldLog())
  {
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = *(CCLogStream **)(v6 + 72);
    uint64_t v8 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v6 + 56) + 112))(*(void *)(v6 + 56), v4);
    CCLogStream::logCrit(v7, "[dk] %s@%d: WLC_SET_KEY() failed, error %s\n", "programKeySync", 2093, v8);
  }
  return v4;
}

uint64_t AppleBCMWLANJoinAdapter::programKeyAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(*(void *)(result + 48) + 72);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = *(void *)(v3 + 48);
        uint64_t v6 = *(CCLogStream **)(v5 + 72);
        uint64_t v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 56) + 112))(*(void *)(v5 + 56), a3);
        return CCLogStream::logCrit(v6, "[dk] %s@%d: WLC_SET_KEY() failed, error %s\n", "programKeyAsyncCallback", 2132, v7);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANJoinAdapter::setWsecInfoCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(*(void *)(result + 48) + 72);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = *(void *)(v3 + 48);
        uint64_t v6 = *(CCLogStream **)(v5 + 72);
        uint64_t v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 56) + 112))(*(void *)(v5 + 56), a3);
        return CCLogStream::logCrit(v6, "[dk] %s@%d: Failed to set wsec info, %s\n", "setWsecInfoCallback", 2447, v7);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANJoinAdapter::disableICVErrorEventsAsync(AppleBCMWLANJoinAdapter *this)
{
  return AppleBCMWLANCore::clearEventBit(*(AppleBCMWLANCore **)(*((void *)this + 6) + 56), 0x31u);
}

uint64_t AppleBCMWLANJoinAdapter::handleAuth(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 8);
  if (v2 == 6) {
    return 3758097084;
  }
  memset(v38, 0, sizeof(v38));
  int v39 = 0;
  if (v2 || *(_DWORD *)(a2 + 12))
  {
    if ((!*(void *)(*(void *)(a1 + 48) + 72) || (CCLogStream::shouldLogConsole() & 1) == 0)
      && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(unsigned int *)(a2 + 8);
      uint64_t v7 = stringFromStatusInEvent(*(_DWORD *)(a2 + 8), 0);
      int v34 = *(unsigned __int16 *)(a2 + 2);
      uint64_t v32 = *(unsigned int *)(a2 + 12);
      uint64_t v36 = *(unsigned int *)(a2 + 16);
      int v8 = 0;
      if (IO80211_io80211isDebuggable()) {
        int v8 = *(unsigned __int8 *)(a2 + 24);
      }
      if (IO80211_io80211isDebuggable()) {
        int v9 = *(unsigned __int8 *)(a2 + 25);
      }
      else {
        int v9 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v10 = *(unsigned __int8 *)(a2 + 26);
      }
      else {
        int v10 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v11 = *(unsigned __int8 *)(a2 + 27);
      }
      else {
        int v11 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v12 = *(unsigned __int8 *)(a2 + 28);
      }
      else {
        int v12 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v13 = *(unsigned __int8 *)(a2 + 29);
      }
      else {
        int v13 = 0;
      }
      *(_DWORD *)buf = 67112962;
      int v41 = 65;
      __int16 v42 = 2080;
      int v43 = "handleAuth";
      __int16 v44 = 1024;
      int v45 = 2505;
      __int16 v46 = 2080;
      uint64_t v47 = "handleAuth";
      __int16 v48 = 1024;
      int v49 = 2505;
      __int16 v50 = 2048;
      uint64_t v51 = v6;
      __int16 v52 = 2080;
      unint64_t v53 = v7;
      __int16 v54 = 2048;
      uint64_t v55 = v32;
      __int16 v56 = 1024;
      int v57 = v34;
      __int16 v58 = 2048;
      uint64_t v59 = v36;
      __int16 v60 = 1024;
      int v61 = v8;
      __int16 v62 = 1024;
      int v63 = v9;
      __int16 v64 = 1024;
      int v65 = v10;
      __int16 v66 = 1024;
      int v67 = v11;
      __int16 v68 = 1024;
      int v69 = v12;
      __int16 v70 = 1024;
      int v71 = v13;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: %s:%d: status = %lu %s, reasouint64_t n = %lu, flags = 0x%x, authtype = %lu, addr = %02x:%02x:%02x:%02x:%02x:%02x\n", buf, 0x7Au);
    }
    if (*(void *)(*(void *)(a1 + 48) + 72) && CCLogStream::shouldLog())
    {
      int v37 = *(CCLogStream **)(*(void *)(a1 + 48) + 72);
      uint64_t v23 = *(unsigned int *)(a2 + 8);
      uint64_t v24 = stringFromStatusInEvent(*(_DWORD *)(a2 + 8), 0);
      int v35 = *(unsigned __int16 *)(a2 + 2);
      uint64_t v25 = *(unsigned int *)(a2 + 12);
      uint64_t v33 = *(unsigned int *)(a2 + 16);
      int v26 = 0;
      if (IO80211_io80211isDebuggable()) {
        int v26 = *(unsigned __int8 *)(a2 + 24);
      }
      if (IO80211_io80211isDebuggable()) {
        int v27 = *(unsigned __int8 *)(a2 + 25);
      }
      else {
        int v27 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v28 = *(unsigned __int8 *)(a2 + 26);
      }
      else {
        int v28 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v29 = *(unsigned __int8 *)(a2 + 27);
      }
      else {
        int v29 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v30 = *(unsigned __int8 *)(a2 + 28);
      }
      else {
        int v30 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v31 = *(unsigned __int8 *)(a2 + 29);
      }
      else {
        int v31 = 0;
      }
      CCLogStream::logAlert(v37, "[dk] %s@%d:%s:%d: status = %lu %s, reasouint64_t n = %lu, flags = 0x%x, authtype = %lu, addr = %02x:%02x:%02x:%02x:%02x:%02x\n", "handleAuth", 2505, "handleAuth", 2505, v23, v24, v25, v35, v33, v26, v27, v28, v29, v30, v31);
    }
  }
  uint64_t v14 = *(void *)(a1 + 48);
  unsigned __int16 v15 = (_DWORD *)(a2 + 24);
  uint64_t v16 = -680;
  while (1)
  {
    uint64_t v17 = v14 + v16;
    if (*(_DWORD *)(v14 + v16 + 1332) == *v15
      && *(unsigned __int16 *)(v14 + v16 + 1336) == *(unsigned __int16 *)(a2 + 28))
    {
      break;
    }
    if (*(_DWORD *)(v17 + 1338) == *v15 && *(unsigned __int16 *)(v17 + 1342) == *(unsigned __int16 *)(a2 + 28)) {
      break;
    }
    v16 += 68;
    if (!v16) {
      goto LABEL_40;
    }
  }
  *(unsigned char *)(v17 + 1346) = 1;
  *(_DWORD *)(*(void *)(a1 + 48) + v16 + 1348) = mapBcmStatusToApple80211IOReturnScan(*(_DWORD *)(a2 + 8));
  *(_DWORD *)(*(void *)(a1 + 48) + v16 + 1352) = mapBcmStatusToApple80211IOReturnIEEEStatus(*(_DWORD *)(a2 + 12));
  *(_WORD *)((char *)&v38[1] + 1) = *(_WORD *)(a2 + 28);
  *(_DWORD *)((char *)v38 + 5) = *v15;
  uint64_t v14 = *(void *)(a1 + 48);
  BYTE4(v38[0]) = *(unsigned char *)(v14 + v16 + 1346);
  *(void *)((char *)&v38[1] + 4) = *(void *)(v14 + v16 + 1348);
LABEL_40:
  mapBcomStatusEventToIEEEStatus((__int16 *)(v14 + 640), *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 12));
  unsigned int v20 = *(_DWORD *)(a2 + 8);
  if (v20 == 2) {
    __int16 v21 = 1002;
  }
  else {
    __int16 v21 = -1;
  }
  if (v20 == 5) {
    __int16 v21 = 1001;
  }
  *(_WORD *)(*(void *)(a1 + 48) + 642) = v21;
  mapBcmStatusToApple80211IOReturnScan(v20);
  mapBcmStatusToApple80211IOReturnIEEEStatus(*(_DWORD *)(a2 + 12));
  uint64_t v22 = *(void *)(a1 + 48);
  if (*(_WORD *)(v22 + 640))
  {
    LODWORD(v38[0]) = *(_DWORD *)(v22 + 640);
    AppleBCMWLANCore::postMessageInfra(*(AppleBCMWLANCore **)(v22 + 56), 0xD3u, v38, 0x1CuLL);
  }
  return 0;
}

uint64_t AppleBCMWLANJoinAdapter::handleAssoc(AppleBCMWLANJoinAdapter *a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 8);
  if (v2 == 6) {
    return 3758097084;
  }
  memset(v39, 0, sizeof(v39));
  int v40 = 0;
  if (v2 || *(_DWORD *)(a2 + 12))
  {
    if ((!*(void *)(*((void *)a1 + 6) + 72) || (CCLogStream::shouldLogConsole() & 1) == 0)
      && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(unsigned int *)(a2 + 8);
      uint64_t v7 = stringFromStatusInEvent(*(_DWORD *)(a2 + 8), 0);
      int v35 = *(unsigned __int16 *)(a2 + 2);
      uint64_t v33 = *(unsigned int *)(a2 + 12);
      uint64_t v37 = *(unsigned int *)(a2 + 16);
      int v8 = 0;
      if (IO80211_io80211isDebuggable()) {
        int v8 = *(unsigned __int8 *)(a2 + 24);
      }
      if (IO80211_io80211isDebuggable()) {
        int v9 = *(unsigned __int8 *)(a2 + 25);
      }
      else {
        int v9 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v10 = *(unsigned __int8 *)(a2 + 26);
      }
      else {
        int v10 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v11 = *(unsigned __int8 *)(a2 + 27);
      }
      else {
        int v11 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v12 = *(unsigned __int8 *)(a2 + 28);
      }
      else {
        int v12 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v13 = *(unsigned __int8 *)(a2 + 29);
      }
      else {
        int v13 = 0;
      }
      *(_DWORD *)buf = 67112962;
      int v42 = 65;
      __int16 v43 = 2080;
      __int16 v44 = "handleAssoc";
      __int16 v45 = 1024;
      int v46 = 2572;
      __int16 v47 = 2080;
      __int16 v48 = "handleAssoc";
      __int16 v49 = 1024;
      int v50 = 2572;
      __int16 v51 = 2048;
      uint64_t v52 = v6;
      __int16 v53 = 2080;
      __int16 v54 = v7;
      __int16 v55 = 2048;
      uint64_t v56 = v33;
      __int16 v57 = 1024;
      int v58 = v35;
      __int16 v59 = 2048;
      uint64_t v60 = v37;
      __int16 v61 = 1024;
      int v62 = v8;
      __int16 v63 = 1024;
      int v64 = v9;
      __int16 v65 = 1024;
      int v66 = v10;
      __int16 v67 = 1024;
      int v68 = v11;
      __int16 v69 = 1024;
      int v70 = v12;
      __int16 v71 = 1024;
      int v72 = v13;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: %s:%d: status = %lu %s, reasouint64_t n = %lu, flags = 0x%x, authtype = %lu, addr = %02x:%02x:%02x:%02x:%02x:%02x\n", buf, 0x7Au);
    }
    if (*(void *)(*((void *)a1 + 6) + 72) && CCLogStream::shouldLog())
    {
      uint64_t v38 = *(CCLogStream **)(*((void *)a1 + 6) + 72);
      uint64_t v24 = *(unsigned int *)(a2 + 8);
      uint64_t v25 = stringFromStatusInEvent(*(_DWORD *)(a2 + 8), 0);
      int v36 = *(unsigned __int16 *)(a2 + 2);
      uint64_t v26 = *(unsigned int *)(a2 + 12);
      uint64_t v34 = *(unsigned int *)(a2 + 16);
      int v27 = 0;
      if (IO80211_io80211isDebuggable()) {
        int v27 = *(unsigned __int8 *)(a2 + 24);
      }
      if (IO80211_io80211isDebuggable()) {
        int v28 = *(unsigned __int8 *)(a2 + 25);
      }
      else {
        int v28 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v29 = *(unsigned __int8 *)(a2 + 26);
      }
      else {
        int v29 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v30 = *(unsigned __int8 *)(a2 + 27);
      }
      else {
        int v30 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v31 = *(unsigned __int8 *)(a2 + 28);
      }
      else {
        int v31 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v32 = *(unsigned __int8 *)(a2 + 29);
      }
      else {
        int v32 = 0;
      }
      CCLogStream::logAlert(v38, "[dk] %s@%d:%s:%d: status = %lu %s, reasouint64_t n = %lu, flags = 0x%x, authtype = %lu, addr = %02x:%02x:%02x:%02x:%02x:%02x\n", "handleAssoc", 2572, "handleAssoc", 2572, v24, v25, v26, v36, v34, v27, v28, v29, v30, v31, v32);
    }
  }
  uint64_t v14 = *((void *)a1 + 6);
  unsigned __int16 v15 = (_DWORD *)(a2 + 24);
  uint64_t v16 = 684;
  while (1)
  {
    uint64_t v17 = v14 + v16;
    if (*(_DWORD *)(v14 + v16 - 32) == *v15 && *(unsigned __int16 *)(v14 + v16 - 28) == *(unsigned __int16 *)(a2 + 28)) {
      break;
    }
    if (*(_DWORD *)(v17 - 26) == *v15 && *(unsigned __int16 *)(v17 - 22) == *(unsigned __int16 *)(a2 + 28)) {
      break;
    }
    v16 += 68;
    if (v16 == 1364) {
      goto LABEL_42;
    }
  }
  *(unsigned char *)(v17 - 8) = 1;
  *(_DWORD *)(*((void *)a1 + 6) + v16 - 4) = mapBcmStatusToApple80211IOReturnScan(*(_DWORD *)(a2 + 8));
  *(_DWORD *)(*((void *)a1 + 6) + v16) = mapBcmStatusToApple80211IOReturnIEEEStatus(*(_DWORD *)(a2 + 12));
  *(_DWORD *)((char *)v39 + 5) = *v15;
  *(_WORD *)((char *)&v39[1] + 1) = *(_WORD *)(a2 + 28);
  uint64_t v20 = *((void *)a1 + 6) + v16;
  BYTE4(v39[0]) = *(unsigned char *)(v20 - 18);
  if (BYTE4(v39[0])) {
    *(void *)((char *)&v39[1] + 4) = *(void *)(v20 - 16);
  }
  HIDWORD(v39[2]) = mapBcmStatusToApple80211IOReturnScan(*(_DWORD *)(a2 + 8));
  int v40 = mapBcmStatusToApple80211IOReturnIEEEStatus(*(_DWORD *)(a2 + 12));
  uint64_t v14 = *((void *)a1 + 6);
LABEL_42:
  mapBcomStatusEventToIEEEStatus((__int16 *)(v14 + 640), *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 12));
  int v21 = *(_DWORD *)(a2 + 8);
  if (v21 == 5)
  {
    __int16 v22 = 1003;
    goto LABEL_46;
  }
  if (v21 == 2)
  {
    __int16 v22 = 1004;
LABEL_46:
    *(_WORD *)(*((void *)a1 + 6) + 642) = v22;
  }
  uint64_t v23 = *((void *)a1 + 6);
  LODWORD(v39[0]) = *(_DWORD *)(v23 + 640);
  AppleBCMWLANCore::postMessageInfra(*(AppleBCMWLANCore **)(v23 + 56), 0xD3u, v39, 0x1CuLL);
  if (!*(_WORD *)(*((void *)a1 + 6) + 640)) {
    AppleBCMWLANJoinAdapter::getBSSInfoAsync(a1);
  }
  return 0;
}

uint64_t AppleBCMWLANJoinAdapter::handleSetSSID(AppleBCMWLANJoinAdapter *a1, uint64_t a2)
{
  uint64_t v3 = *((void *)a1 + 6);
  if (a2)
  {
    uint64_t v5 = (unsigned __int8 *)(a2 + 24);
    uint64_t v6 = 696;
    while (*(_DWORD *)(v3 + v6 - 44) != *(_DWORD *)v5
         || *(unsigned __int16 *)(v3 + v6 - 40) != *(unsigned __int16 *)(a2 + 28))
    {
      v6 += 68;
      if (v6 == 1376) {
        goto LABEL_17;
      }
    }
    *(unsigned char *)(v3 + v6 - 8) = 1;
    *(_DWORD *)(*((void *)a1 + 6) + v6 - 4) = mapBcmStatusToApple80211IOReturnScan(*(_DWORD *)(a2 + 8));
    *(_DWORD *)(*((void *)a1 + 6) + v6) = mapBcmStatusToApple80211IOReturnIEEEStatus(*(_DWORD *)(a2 + 12));
LABEL_17:
    if (*(_DWORD *)(a2 + 8) || *(_DWORD *)(a2 + 12))
    {
      if ((!*(void *)(*((void *)a1 + 6) + 72) || (CCLogStream::shouldLogConsole() & 1) == 0)
        && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v45 = *(unsigned int *)(*((void *)a1 + 6) + 96);
        uint64_t v9 = *(unsigned int *)(a2 + 8);
        int v10 = stringFromStatusInEvent(*(_DWORD *)(a2 + 8), 0);
        int v37 = *(unsigned __int16 *)(a2 + 2);
        uint64_t v35 = *(unsigned int *)(a2 + 12);
        uint64_t v41 = *(unsigned int *)(a2 + 16);
        uint64_t v11 = *((void *)a1 + 6);
        uint64_t v39 = *(unsigned __int16 *)(v11 + 640);
        uint64_t v43 = *(unsigned __int16 *)(v11 + 642);
        int v12 = 0;
        if (IO80211_io80211isDebuggable()) {
          int v12 = *v5;
        }
        if (IO80211_io80211isDebuggable()) {
          int v13 = *(unsigned __int8 *)(a2 + 25);
        }
        else {
          int v13 = 0;
        }
        if (IO80211_io80211isDebuggable()) {
          int v14 = *(unsigned __int8 *)(a2 + 26);
        }
        else {
          int v14 = 0;
        }
        if (IO80211_io80211isDebuggable()) {
          int v15 = *(unsigned __int8 *)(a2 + 27);
        }
        else {
          int v15 = 0;
        }
        if (IO80211_io80211isDebuggable()) {
          int v16 = *(unsigned __int8 *)(a2 + 28);
        }
        else {
          int v16 = 0;
        }
        if (IO80211_io80211isDebuggable()) {
          int v17 = *(unsigned __int8 *)(a2 + 29);
        }
        else {
          int v17 = 0;
        }
        *(_DWORD *)buf = 67113218;
        int v48 = 78;
        *(_WORD *)__int16 v49 = 2080;
        *(void *)&v49[2] = "handleSetSSID";
        *(_WORD *)&v49[10] = 1024;
        int v50 = 2645;
        __int16 v51 = 2048;
        uint64_t v52 = v45;
        __int16 v53 = 2048;
        uint64_t v54 = v9;
        __int16 v55 = 2080;
        uint64_t v56 = v10;
        __int16 v57 = 2048;
        uint64_t v58 = v35;
        __int16 v59 = 1024;
        int v60 = v37;
        __int16 v61 = 2048;
        uint64_t v62 = v41;
        __int16 v63 = 2048;
        uint64_t v64 = v39;
        __int16 v65 = 2048;
        uint64_t v66 = v43;
        __int16 v67 = 1024;
        int v68 = v12;
        __int16 v69 = 1024;
        int v70 = v13;
        __int16 v71 = 1024;
        int v72 = v14;
        __int16 v73 = 1024;
        int v74 = v15;
        __int16 v75 = 1024;
        int v76 = v16;
        __int16 v77 = 1024;
        int v78 = v17;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d:  interface %lu event_status = %lu %s, reasouint64_t n = %lu, flags = 0x%x, authtype = %lu, join_status = %lu join_ext_status = %lu addr = %02x:%02x:%02x:%02x:%02x:%02x\n", buf, 0x88u);
      }
      if (*(void *)(*((void *)a1 + 6) + 72) && CCLogStream::shouldLog())
      {
        uint64_t v23 = *((void *)a1 + 6);
        int v46 = *(CCLogStream **)(v23 + 72);
        uint64_t v24 = *(unsigned int *)(v23 + 96);
        uint64_t v25 = *(unsigned int *)(a2 + 8);
        uint64_t v26 = stringFromStatusInEvent(*(_DWORD *)(a2 + 8), 0);
        int v40 = *(unsigned __int16 *)(a2 + 2);
        uint64_t v42 = *(unsigned int *)(a2 + 12);
        __int16 v44 = v26;
        uint64_t v38 = *(unsigned int *)(a2 + 16);
        uint64_t v27 = *((void *)a1 + 6);
        uint64_t v34 = *(unsigned __int16 *)(v27 + 642);
        uint64_t v36 = *(unsigned __int16 *)(v27 + 640);
        int v28 = 0;
        if (IO80211_io80211isDebuggable()) {
          int v28 = *v5;
        }
        if (IO80211_io80211isDebuggable()) {
          int v29 = *(unsigned __int8 *)(a2 + 25);
        }
        else {
          int v29 = 0;
        }
        if (IO80211_io80211isDebuggable()) {
          int v30 = *(unsigned __int8 *)(a2 + 26);
        }
        else {
          int v30 = 0;
        }
        if (IO80211_io80211isDebuggable()) {
          int v31 = *(unsigned __int8 *)(a2 + 27);
        }
        else {
          int v31 = 0;
        }
        if (IO80211_io80211isDebuggable()) {
          int v32 = *(unsigned __int8 *)(a2 + 28);
        }
        else {
          int v32 = 0;
        }
        if (IO80211_io80211isDebuggable()) {
          int v33 = *(unsigned __int8 *)(a2 + 29);
        }
        else {
          int v33 = 0;
        }
        CCLogStream::logNotice(v46, "[dk] %s@%d: interface %lu event_status = %lu %s, reasouint64_t n = %lu, flags = 0x%x, authtype = %lu, join_status = %lu join_ext_status = %lu addr = %02x:%02x:%02x:%02x:%02x:%02x\n", "handleSetSSID", 2645, v24, v25, v44, v42, v40, v38, v36, v34, v28, v29, v30, v31, v32, v33);
      }
      unsigned int v18 = *(_DWORD *)(a2 + 8);
      if (v18 == 2)
      {
        if ((!*(void *)(*((void *)a1 + 6) + 72) || (CCLogStream::shouldLogConsole() & 1) == 0)
          && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109634;
          int v48 = 78;
          *(_WORD *)__int16 v49 = 2080;
          *(void *)&v49[2] = "handleSetSSID";
          *(_WORD *)&v49[10] = 1024;
          int v50 = 2652;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: Timed out waiting for first beacon of the network", buf, 0x18u);
        }
        if (*(void *)(*((void *)a1 + 6) + 72) && CCLogStream::shouldLog()) {
          CCLogStream::logNotice(*(CCLogStream **)(*((void *)a1 + 6) + 72), "[dk] %s@%d:Timed out waiting for first beacon of the network", "handleSetSSID", 2652);
        }
        unsigned int v18 = *(_DWORD *)(a2 + 8);
      }
      if (v18 == 3) {
        *(_WORD *)(*((void *)a1 + 6) + 642) = 1000;
      }
    }
    else
    {
      unsigned int v18 = 0;
    }
    mapBcomSsidEventToAppleStatus(*((void *)a1 + 6) + 640, v18, *(_DWORD *)(a2 + 12));
    *(_DWORD *)__int16 v49 = 0;
    int v19 = *(_DWORD *)v5;
    *(_WORD *)__int16 v49 = *((_WORD *)v5 + 2);
    *(_DWORD *)buf = *(_DWORD *)(*((void *)a1 + 6) + 640);
    int v48 = v19;
    *(_DWORD *)&v49[4] = mapBcmStatusToApple80211IOReturnScan(*(_DWORD *)(a2 + 8));
    *(_DWORD *)&v49[8] = mapBcmStatusToApple80211IOReturnIEEEStatus(*(_DWORD *)(a2 + 12));
    uint64_t v20 = *((void *)a1 + 6);
    int v21 = *(unsigned __int16 *)(v20 + 640);
    AppleBCMWLANCore::postMessageInfra(*(AppleBCMWLANCore **)(v20 + 56), 0xD4u, buf, 0x14uLL);
    if (v21)
    {
      AppleBCMWLANJoinAdapter::sendConnectComplete((uint64_t)a1);
    }
    else if (*(unsigned char *)(*((void *)a1 + 6) + 5))
    {
      AppleBCMWLANJoinAdapter::getBSSInfoAsync(a1);
    }
    return 0;
  }
  else
  {
    if ((!*(void *)(v3 + 72) || (CCLogStream::shouldLogConsole() & 1) == 0)
      && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109634;
      int v48 = 67;
      *(_WORD *)__int16 v49 = 2080;
      *(void *)&v49[2] = "handleSetSSID";
      *(_WORD *)&v49[10] = 1024;
      int v50 = 2624;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d:  no event specified\n", buf, 0x18u);
    }
    uint64_t v8 = 3758097090;
    if (*(void *)(*((void *)a1 + 6) + 72) && CCLogStream::shouldLog()) {
      CCLogStream::logCrit(*(CCLogStream **)(*((void *)a1 + 6) + 72), "[dk] %s@%d: no event specified\n", "handleSetSSID", 2624);
    }
  }
  return v8;
}

uint64_t AppleBCMWLANJoinAdapter::sendConnectComplete(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 48);
  if (*(unsigned char *)(v1 + 1))
  {
    if (!*(unsigned char *)(v1 + 4))
    {
      int v2 = *(unsigned __int16 *)(v1 + 640);
      if (v2 != 0xFFFF)
      {
        uint64_t v3 = this;
        uint64_t v4 = 0;
        long long v18 = 0u;
        long long v17 = 0u;
        long long v16 = 0u;
        long long v15 = 0u;
        long long v14 = 0u;
        long long v13 = 0u;
        long long v12 = 0u;
        long long v11 = 0u;
        long long v10 = 0u;
        v8[0] = v2;
        v8[1] = *(_WORD *)(v1 + 642);
        uint64_t v5 = (int *)(v1 + 652);
        long long v9 = 0u;
        do
        {
          uint64_t v6 = &v8[v4];
          *(void *)(v6 + 6) = *(void *)(v5 + 7);
          int v7 = *v5;
          _OWORD v6[4] = *((_WORD *)v5 + 2);
          *((_DWORD *)v6 + 1) = v7;
          v5 += 17;
          v4 += 8;
        }
        while (v4 != 80);
        this = AppleBCMWLANCore::postMessageInfra(*(AppleBCMWLANCore **)(v1 + 56), 0xD5u, v8, 0xA4uLL);
        *(unsigned char *)(*(void *)(v3 + 48) + 4) = 1;
        *(unsigned char *)(*(void *)(v3 + 48) + 1) = 0;
      }
    }
  }
  return this;
}

uint64_t AppleBCMWLANJoinAdapter::handleICVErrorEvent(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if ((*(_DWORD *)(a2 + 8) || *(_DWORD *)(a2 + 12))
      && *(void *)(*(void *)(a1 + 48) + 72)
      && CCLogStream::shouldLog())
    {
      long long v17 = *(CCLogStream **)(*(void *)(a1 + 48) + 72);
      uint64_t v6 = *(unsigned int *)(a2 + 8);
      long long v16 = stringFromStatusInEvent(*(_DWORD *)(a2 + 8), 0);
      int v7 = *(unsigned __int16 *)(a2 + 2);
      uint64_t v8 = *(unsigned int *)(a2 + 16);
      uint64_t v15 = *(unsigned int *)(a2 + 12);
      int v9 = 0;
      if (IO80211_io80211isDebuggable()) {
        int v9 = *(unsigned __int8 *)(a2 + 24);
      }
      if (IO80211_io80211isDebuggable()) {
        int v10 = *(unsigned __int8 *)(a2 + 25);
      }
      else {
        int v10 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v11 = *(unsigned __int8 *)(a2 + 26);
      }
      else {
        int v11 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v12 = *(unsigned __int8 *)(a2 + 27);
      }
      else {
        int v12 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v13 = *(unsigned __int8 *)(a2 + 28);
      }
      else {
        int v13 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v14 = *(unsigned __int8 *)(a2 + 29);
      }
      else {
        int v14 = 0;
      }
      CCLogStream::logNoticeIf(v17, 0x100uLL, "[dk] %s@%d: status = %lu %s, reasouint64_t n = %lu, flags = 0x%x, authtype = %lu, addr = %02x:%02x:%02x:%02x:%02x:%02x\n", "handleICVErrorEvent", 2696, v6, v16, v15, v7, v8, v9, v10, v11, v12, v13, v14);
    }
    mapBcomStatusEventToIEEEStatus((__int16 *)(*(void *)(a1 + 48) + 640), 1u, *(_DWORD *)(a2 + 12));
    *(_WORD *)(*(void *)(a1 + 48) + 642) = 1008;
    AppleBCMWLANCore::clearEventBit(*(AppleBCMWLANCore **)(*(void *)(a1 + 48) + 56), 0x31u);
    AppleBCMWLANJoinAdapter::sendConnectComplete(a1);
    return 0;
  }
  else
  {
    uint64_t v4 = 3758097090;
    if (*(void *)(*(void *)(a1 + 48) + 72) && CCLogStream::shouldLog()) {
      CCLogStream::logCrit(*(CCLogStream **)(*(void *)(a1 + 48) + 72), "[dk] %s@%d: no event specified\n", "handleICVErrorEvent", 2687);
    }
  }
  return v4;
}

uint64_t AppleBCMWLANJoinAdapter::handleSupplicantEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  if (a2)
  {
    uint64_t v5 = 708;
    while (*(_DWORD *)(v3 + v5 - 56) != *(_DWORD *)(a2 + 24)
         || *(unsigned __int16 *)(v3 + v5 - 52) != *(unsigned __int16 *)(a2 + 28))
    {
      v5 += 68;
      if (v5 == 1388) {
        goto LABEL_17;
      }
    }
    *(unsigned char *)(v3 + v5 - 8) = 1;
    *(_DWORD *)(*(void *)(a1 + 48) + v5 - 4) = mapBcmStatusToApple80211IOReturnSupplicantStatus(*(_DWORD *)(a2 + 8));
    *(_DWORD *)(*(void *)(a1 + 48) + v5) = mapBcmReasonToApple80211IOReturnSupplicant(*(_DWORD *)(a2 + 12));
LABEL_17:
    LODWORD(v8) = *(_DWORD *)(a2 + 8);
    if (v8 || *(_DWORD *)(a2 + 12))
    {
      if (*(void *)(*(void *)(a1 + 48) + 72))
      {
        int shouldLog = CCLogStream::shouldLog();
        uint64_t v8 = *(unsigned int *)(a2 + 8);
        if (shouldLog)
        {
          uint64_t v25 = *(CCLogStream **)(*(void *)(a1 + 48) + 72);
          int v10 = stringFromStatusInEvent(v8, *(_DWORD *)(a2 + 4));
          uint64_t v11 = *(unsigned int *)(a2 + 12);
          int v12 = (const char *)stringFromReason(*(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 12));
          int v24 = *(unsigned __int16 *)(a2 + 2);
          uint64_t v23 = *(unsigned int *)(a2 + 16);
          if (IO80211_io80211isDebuggable()) {
            int v22 = *(unsigned __int8 *)(a2 + 24);
          }
          else {
            int v22 = 0;
          }
          if (IO80211_io80211isDebuggable()) {
            int v17 = *(unsigned __int8 *)(a2 + 25);
          }
          else {
            int v17 = 0;
          }
          if (IO80211_io80211isDebuggable()) {
            int v18 = *(unsigned __int8 *)(a2 + 26);
          }
          else {
            int v18 = 0;
          }
          if (IO80211_io80211isDebuggable()) {
            int v19 = *(unsigned __int8 *)(a2 + 27);
          }
          else {
            int v19 = 0;
          }
          if (IO80211_io80211isDebuggable()) {
            int v20 = *(unsigned __int8 *)(a2 + 28);
          }
          else {
            int v20 = 0;
          }
          if (IO80211_io80211isDebuggable()) {
            int v21 = *(unsigned __int8 *)(a2 + 29);
          }
          else {
            int v21 = 0;
          }
          CCLogStream::logAlert(v25, "[dk] %s@%d:status = %lu %s, reasouint64_t n = %lu %s, flags = 0x%x, authtype = %lu, addr = %02x:%02x:%02x:%02x:%02x:%02x\n", "handleSupplicantEvent", 2735, v8, v10, v11, v12, v24, v23, v22, v17, v18, v19, v20, v21);
          LODWORD(v8) = *(_DWORD *)(a2 + 8);
        }
      }
    }
    else
    {
      LODWORD(v8) = 0;
    }
    *(_WORD *)(*(void *)(a1 + 48) + 640) = mapBcmSupplicantEventToAppleStatus(v8, *(_DWORD *)(a2 + 12));
    if ((*(_DWORD *)(a2 + 12) - 15) >= 5) {
      __int16 v13 = -1;
    }
    else {
      __int16 v13 = 1005;
    }
    *(_WORD *)(*(void *)(a1 + 48) + 642) = v13;
    uint64_t v14 = *(void *)(a1 + 48);
    int v15 = *(unsigned __int16 *)(v14 + 640);
    if (!*(_WORD *)(v14 + 640))
    {
      if (!*(unsigned char *)(v14 + 3)) {
        goto LABEL_31;
      }
      *(unsigned char *)(v14 + AppleBCMWLANJoinAdapter::free(this - 3) = 0;
      int v15 = *(unsigned __int16 *)(*(void *)(a1 + 48) + 640);
    }
    if (v15 == 0xFFFF) {
      return 0;
    }
LABEL_31:
    AppleBCMWLANJoinAdapter::sendConnectComplete(a1);
    return 0;
  }
  if ((!*(void *)(v3 + 72) || (CCLogStream::shouldLogConsole() & 1) == 0)
    && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109634;
    int v27 = 67;
    __int16 v28 = 2080;
    int v29 = "handleSupplicantEvent";
    __int16 v30 = 1024;
    int v31 = 2719;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d:  no event specified\n", buf, 0x18u);
  }
  uint64_t v7 = 3758097090;
  if (*(void *)(*(void *)(a1 + 48) + 72) && CCLogStream::shouldLog()) {
    CCLogStream::logCrit(*(CCLogStream **)(*(void *)(a1 + 48) + 72), "[dk] %s@%d: no event specified\n", "handleSupplicantEvent", 2719);
  }
  return v7;
}

uint64_t AppleBCMWLANJoinAdapter::getBSSInfoAsyncCallback(AppleBCMWLANJoinAdapter *this, uint64_t a2, uint64_t a3, void *a4)
{
  if (a3)
  {
    uint64_t v5 = *((void *)this + 6);
    if (!*(void *)(v5 + 72)) {
      goto LABEL_4;
    }
    int shouldLog = CCLogStream::shouldLog();
    uint64_t v5 = *((void *)this + 6);
    if (!shouldLog) {
      goto LABEL_4;
    }
    int v21 = *(CCLogStream **)(v5 + 72);
    int v22 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 56) + 112))(*(void *)(v5 + 56), a3);
    CCLogStream::logCrit(v21, "[dk] %s@%d: WLC_GET_BSS_INFO() failed, error %s\n", "getBSSInfoAsyncCallback", 2881, v22);
    goto LABEL_21;
  }
  uint64_t v9 = *a4;
  int v10 = (const void *)(*a4 + 4);
  uint64_t ChanSpecHandler = (int **)AppleBCMWLANCore::getChanSpecHandler(*(AppleBCMWLANCore **)(*((void *)this + 6) + 56));
  __int16 AppleChannelSpec = AppleBCMWLANChanSpec::getAppleChannelSpec(ChanSpecHandler, *(unsigned __int16 *)(v9 + 76));
  size_t v13 = *(unsigned int *)(v9 + 8);
  uint64_t v14 = *((void *)this + 6);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = (*(uint64_t (**)(void))(**(void **)(v14 + 56) + 1840))();
  int v17 = AppleBCMWLANBSSBeacon::fromWLBSSInfo(v10, AppleChannelSpec, v13, v15, v16);
  if (!v17)
  {
    uint64_t v5 = *((void *)this + 6);
    if (!*(void *)(v5 + 72) || (v23 = CCLogStream::shouldLog(), uint64_t v5 = *((void *)this + 6), !v23))
    {
LABEL_4:
      *(_WORD *)(v5 + 640) = -1;
      return AppleBCMWLANJoinAdapter::sendConnectComplete((uint64_t)this);
    }
    CCLogStream::logAlert(*(CCLogStream **)(v5 + 72), "[dk] %s@%d:Unable to get create bss from FW bss data, send connect complete with join failure\n", "getBSSInfoAsyncCallback", 2860);
LABEL_21:
    uint64_t v5 = *((void *)this + 6);
    goto LABEL_4;
  }
  int v18 = v17;
  if ((*(unsigned int (**)(IO80211BSSBeacon *))(*(void *)v17 + 464))(v17) == 1
    || (*(unsigned int (**)(IO80211BSSBeacon *))(*(void *)v18 + 464))(v18) == 2
    || (*(unsigned int (**)(IO80211BSSBeacon *))(*(void *)v18 + 464))(v18) == 16)
  {
    if (*(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 72), "[dk] %s@%d:Mark join complete due to joined to network that doesn't require supplicant event", "getBSSInfoAsyncCallback", 2869);
    }
    AppleBCMWLANJoinAdapter::sendConnectComplete((uint64_t)this);
  }
  if (*(_DWORD *)(*((void *)this + 6) + 1840))
  {
    int CurrentBSSAKMs = IO80211BSSBeacon::getCurrentBSSAKMs(v18);
    AppleBCMWLANJoinAdapter::updateTransDisabledMode(this, CurrentBSSAKMs, *(_DWORD *)(*((void *)this + 6) + 1840));
    *(_DWORD *)(*((void *)this + 6) + 1840) = 0;
  }
  int v20 = *(uint64_t (**)(IO80211BSSBeacon *))(*(void *)v18 + 16);
  return v20(v18);
}

uint64_t AppleBCMWLANJoinAdapter::handleDeauthDisassocEvent(uint64_t this, int a2)
{
  if (a2) {
    __int16 v2 = a2;
  }
  else {
    __int16 v2 = 12;
  }
  *(_WORD *)(*(void *)(this + 48) + 640) = v2;
  return AppleBCMWLANJoinAdapter::sendConnectComplete(this);
}

uint64_t AppleBCMWLANJoinAdapter::triggerCC(AppleBCMWLANJoinAdapter *a1, uint64_t a2)
{
  unsigned int v11 = 0;
  uint64_t v4 = *((void *)a1 + 6);
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 32) = v5;
  AppleBCMWLANCore::dumpEventBitField(*(AppleBCMWLANCore **)(*((void *)a1 + 6) + 56), 0);
  if (!AppleBCMWLANJoinAdapter::collectJoinTimeoutAwdMetrics(a1)) {
    *(unsigned char *)(*((void *)a1 + 6) + 2) = 1;
  }
  uint64_t v6 = *((void *)a1 + 6);
  if (*(_DWORD *)(v6 + 20) == -528342010) {
    ++*(_DWORD *)(v6 + 8);
  }
  AppleBCMWLANJoinAdapter::collectCCAForJoinTimeout(a1, &v11);
  if ((!*(void *)(*((void *)a1 + 6) + 72) || (CCLogStream::shouldLogConsole() & 1) == 0)
    && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109890;
    int v13 = 73;
    __int16 v14 = 2080;
    uint64_t v15 = "triggerCC";
    __int16 v16 = 1024;
    int v17 = 2914;
    __int16 v18 = 1024;
    unsigned int v19 = v11;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: Average CCA %d\n", buf, 0x1Eu);
  }
  uint64_t v7 = *((void *)a1 + 6);
  if (*(void *)(v7 + 72))
  {
    int shouldLog = CCLogStream::shouldLog();
    uint64_t v7 = *((void *)a1 + 6);
    unsigned int v9 = v11;
    if (shouldLog)
    {
      CCLogStream::logInfo(*(CCLogStream **)(v7 + 72), "[dk] %s@%d:Average CCA %d\n", "triggerCC", 2914, v11);
      uint64_t v7 = *((void *)a1 + 6);
    }
  }
  else
  {
    unsigned int v9 = v11;
  }
  CCFaultReporter::reportFault(*(CCFaultReporter **)(v7 + 80), *(_DWORD *)(a2 + 16), "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANJoinAdapter.cpp", 0xB64u, "triggerCC", 0, *(_DWORD *)(a2 + 4), "CCA %u, fStateFlags = 0x%x", v9, *(_DWORD *)(a2 + 12));
  return 0;
}

uint64_t AppleBCMWLANJoinAdapter::copyJoinTimeoutBlob(AppleBCMWLANJoinAdapter *this, unsigned __int8 *a2, size_t a3)
{
  uint64_t v6 = 3758097084;
  if (!AppleBCMWLANCore::checkForAWDDataInfoSupport(*(AppleBCMWLANCore **)(*((void *)this + 6) + 56))) {
    return 3758097095;
  }
  if (a3 <= 0x204)
  {
    memcpy(a2, (const void *)(*((void *)this + 6) + 1324), a3);
    return 0;
  }
  return v6;
}

uint64_t AppleBCMWLANJoinAdapter::logState(AppleBCMWLANJoinAdapter *this, char *a2)
{
  *(_OWORD *)uint64_t v8 = 0u;
  long long v9 = 0u;
  unint64_t v5 = 32;
  *(_OWORD *)uint64_t v6 = 0u;
  memset(v7, 0, sizeof(v7));
  unint64_t v4 = 37;
  IO80211BssManager::getAssocSSID(*(IO80211BssManager **)(*((void *)this + 6) + 48), v8, &v5);
  IO80211BssManager::getAssocColocatedNetworkScopeId(*(IO80211BssManager **)(*((void *)this + 6) + 48), v6, &v4);
  return IO80211Print();
}

uint64_t AppleBCMWLANJoinAdapter::set6GMode(AppleBCMWLANJoinAdapter *this)
{
  return 0;
}

void _GLOBAL__sub_I_AppleBCMWLANJoinAdapter_cpp()
{
  kNullRange = 0;
}

AppleBCMWLANPowerStateAdapter *AppleBCMWLANPowerStateAdapter::withDriver(AppleBCMWLANPowerStateAdapter *this, AppleBCMWLANCore *a2)
{
  unint64_t v5 = (AppleBCMWLANPowerStateAdapter *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANPowerStateAdapterMetaClass, (OSObject **)&v5)) {
    return 0;
  }
  uint64_t v3 = v5;
  if (v5 && (AppleBCMWLANPowerStateAdapter::initWithDriver(v5, this) & 1) == 0)
  {
    (*(void (**)(AppleBCMWLANPowerStateAdapter *))(*(void *)v3 + 16))(v3);
    return 0;
  }
  return v3;
}

uint64_t AppleBCMWLANPowerStateAdapter::initWithDriver(AppleBCMWLANPowerStateAdapter *this, AppleBCMWLANCore *a2)
{
  unint64_t v4 = (void *)IOMallocZeroTyped();
  *((void *)this + 5) = v4;
  if (v4)
  {
    void *v4 = a2;
    unint64_t v5 = (AppleBCMWLANCore *)**((void **)this + 5);
    if (v5)
    {
      *(void *)(*((void *)this + 5) + 8) = AppleBCMWLANCore::getCommander(v5);
      if (*(void *)(*((void *)this + 5) + 8))
      {
        *(void *)(*((void *)this + 5) + 16) = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a2
                                                                                                  + 1848))(a2);
        uint64_t v6 = *(void *)(*((void *)this + 5) + 16);
        if (v6)
        {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
          if (OSObject::init((OSObject *)this))
          {
            *(void *)(*((void *)this + 5) + 24) = AppleBCMWLANCore::getPrimaryInterface(**((AppleBCMWLANCore ***)this
                                                                                               + 5));
            *(unsigned char *)(*((void *)this + 5) + 132) = 0;
            return 1;
          }
          IOLog("AppleBCMWLANPowerStateAdapter super init failied\n");
        }
        else
        {
          IOLog("AppleBCMWLANPowerStateAdapter Failed to init fLogger\n");
        }
      }
      else
      {
        IOLog("AppleBCMWLANPowerStateAdapter commander is null\n");
      }
    }
    else
    {
      IOLog("AppleBCMWLANPowerStateAdapter driver is null\n");
    }
  }
  else
  {
    IOLog("Failed to allocate AppleBCMWLANPowerStateAdapter_IVars\n");
  }
  return 0;
}

void AppleBCMWLANPowerStateAdapter::free(OSObject *this)
{
  __int16 v2 = this[1].OSMetaClassBase::__vftable;
  if (v2)
  {
    release = v2->release;
    if (!release
      || ((*(void (**)(void (__cdecl *)(const OSObject *__hidden)))(*(void *)release + 16))(v2->release),
          this[1].release = 0,
          (__int16 v2 = this[1].OSMetaClassBase::__vftable) != 0))
    {
      IOFree(v2, 0x88uLL);
      this[1].OSMetaClassBase::__vftable = 0;
    }
  }
  OSObject::free(this);
}

void non-virtual thunk to'AppleBCMWLANPowerStateAdapter::free(AppleBCMWLANPowerStateAdapter *this)
{
}

uint64_t AppleBCMWLANPowerStateAdapter::configureBeaconSOI(AppleBCMWLANPowerStateAdapter *a1, int *a2)
{
  unsigned int v5 = a2[1];
  unsigned int v4 = a2[2];
  int v6 = *a2;
  if (*(void *)(*((void *)a1 + 5) + 16) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*((void *)a1 + 5) + 16), "[dk] %s@%d:dtim (%d), beacon interval (%d) ms, Wakeup interval (%d) ms", "configureBeaconSOI", 127, v6, v5, v4);
  }
  if (v4 <= v5) {
    AppleBCMWLANPowerStateAdapter::configureDefaultListenInterval(a1);
  }
  else {
    AppleBCMWLANPowerStateAdapter::configureExtendedListenInterval(a1, v6, v5, v4);
  }
  AppleBCMWLANPowerStateAdapter::configureBeaconFRTS(a1, a2[4]);
  AppleBCMWLANPowerStateAdapter::configureMulticastBroadcastWaitPeriod(a1, 1000 * a2[5], 1000 * a2[6]);
  return 0;
}

uint64_t AppleBCMWLANPowerStateAdapter::configureExtendedListenInterval(AppleBCMWLANPowerStateAdapter *this, int a2, int a3, unsigned int a4)
{
  int v26 = 0;
  uint64_t v8 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
  int v24 = &v26;
  uint64_t v25 = 4;
  uint64_t v9 = AppleBCMWLANCommander::runIOVarSet(v8, (uint64_t)"bcn_li_bcn", (uint64_t)&v24, 0, 0);
  if (v9)
  {
    uint64_t v10 = v9;
    if (*(void *)(*((void *)this + 5) + 16))
    {
      if (CCLogStream::shouldLog())
      {
        __int16 v18 = (void *)*((void *)this + 5);
        unsigned int v19 = (CCLogStream *)v18[2];
        int v20 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v18 + 112))(*v18, v10);
        CCLogStream::logAlert(v19, "[dk] %s@%d:Unable to set beacon wakeup period: %s\n", "configureExtendedListenInterval", 151, v20);
      }
    }
  }
  int v11 = 0;
  unsigned int v12 = a3 * a2;
  do
  {
    ++v11;
    v12 += a3 * a2;
  }
  while (v12 < a4);
  uint64_t v13 = *((void *)this + 5);
  if (*(void *)(v13 + 16))
  {
    int shouldLog = CCLogStream::shouldLog();
    uint64_t v13 = *((void *)this + 5);
    if (shouldLog)
    {
      CCLogStream::logAlert(*(CCLogStream **)(v13 + 16), "[dk] %s@%d:extendedDTIM (%d)\n", "configureExtendedListenInterval", 160, v11);
      uint64_t v13 = *((void *)this + 5);
    }
  }
  int v26 = v11;
  uint64_t v15 = *(AppleBCMWLANCommander **)(v13 + 8);
  int v24 = &v26;
  uint64_t v25 = 4;
  uint64_t v16 = AppleBCMWLANCommander::runIOVarSet(v15, (uint64_t)"bcn_li_dtim", (uint64_t)&v24, 0, 0);
  if (v16 && *(void *)(*((void *)this + 5) + 16) && CCLogStream::shouldLog())
  {
    int v21 = (void *)*((void *)this + 5);
    int v22 = (CCLogStream *)v21[2];
    int v23 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v21 + 112))(*v21, v16);
    CCLogStream::logAlert(v22, "[dk] %s@%d:Unable to set extended dtim wakeup period: %s\n", "configureExtendedListenInterval", 165, v23);
  }
  return v16;
}

uint64_t AppleBCMWLANPowerStateAdapter::configureDefaultListenInterval(AppleBCMWLANPowerStateAdapter *this)
{
  int v17 = 1;
  __int16 v2 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
  uint64_t v15 = &v17;
  uint64_t v16 = 4;
  uint64_t v3 = AppleBCMWLANCommander::runIOVarSet(v2, (uint64_t)"bcn_li_bcn", (uint64_t)&v15, 0, 0);
  unsigned int v4 = (void *)*((void *)this + 5);
  if (v3)
  {
    uint64_t v5 = v3;
    if (v4[2])
    {
      int shouldLog = CCLogStream::shouldLog();
      unsigned int v4 = (void *)*((void *)this + 5);
      if (shouldLog)
      {
        uint64_t v10 = (CCLogStream *)v4[2];
        int v11 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v4 + 112))(*v4, v5);
        CCLogStream::logAlert(v10, "[dk] %s@%d:Unable to set beacon wakeup period: %s\n", "configureDefaultListenInterval", 179, v11);
        unsigned int v4 = (void *)*((void *)this + 5);
      }
    }
  }
  int v17 = 0;
  uint64_t v7 = (AppleBCMWLANCommander *)v4[1];
  uint64_t v15 = &v17;
  uint64_t v16 = 4;
  uint64_t v8 = AppleBCMWLANCommander::runIOVarSet(v7, (uint64_t)"bcn_li_dtim", (uint64_t)&v15, 0, 0);
  if (v8 && *(void *)(*((void *)this + 5) + 16) && CCLogStream::shouldLog())
  {
    unsigned int v12 = (void *)*((void *)this + 5);
    uint64_t v13 = (CCLogStream *)v12[2];
    __int16 v14 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v12 + 112))(*v12, v8);
    CCLogStream::logAlert(v13, "[dk] %s@%d:Unable to set extended dtim wakeup period: %s\n", "configureDefaultListenInterval", 185, v14);
  }
  return v8;
}

uint64_t AppleBCMWLANPowerStateAdapter::configureBeaconFRTS(AppleBCMWLANPowerStateAdapter *this, int a2)
{
  int v14 = a2;
  uint64_t v3 = *((void *)this + 5);
  if (*(void *)(v3 + 16))
  {
    int shouldLog = CCLogStream::shouldLog();
    uint64_t v3 = *((void *)this + 5);
    if (shouldLog)
    {
      CCLogStream::logAlert(*(CCLogStream **)(v3 + 16), "[dk] %s@%d:Unicast wait period - %d ms", "configureBeaconFRTS", 196, a2);
      uint64_t v3 = *((void *)this + 5);
    }
  }
  int v6 = *(AppleBCMWLANCommander **)(v3 + 8);
  v13[0] = &v14;
  v13[1] = 4;
  uint64_t v7 = AppleBCMWLANCommander::runIOVarSet(v6, (uint64_t)"pm2_bcn_sleep_ret", (uint64_t)v13, 0, 0);
  if (v7 && *(void *)(*((void *)this + 5) + 16) && CCLogStream::shouldLog())
  {
    uint64_t v9 = (void *)*((void *)this + 5);
    uint64_t v10 = (CCLogStream *)v9[2];
    int v11 = v14;
    unsigned int v12 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v9 + 112))(*v9, v7);
    CCLogStream::logAlert(v10, "[dk] %s@%d:Failed to set pm2_bcn_sleep_ret to %d : ret %x: %s\n", "configureBeaconFRTS", 200, v11, v7, v12);
  }
  return v7;
}

uint64_t AppleBCMWLANPowerStateAdapter::configureMulticastBroadcastWaitPeriod(AppleBCMWLANPowerStateAdapter *this, int a2, int a3)
{
  int v29 = a3;
  int v30 = a2;
  unsigned int v4 = (CCLogStream **)*((void *)this + 5);
  if (v4[2])
  {
    int shouldLog = CCLogStream::shouldLog();
    unsigned int v4 = (CCLogStream **)*((void *)this + 5);
    if (shouldLog)
    {
      CCLogStream::logAlert(v4[2], "[dk] %s@%d:wait_period %u moredata_wait_period %u\n", "configureMulticastBroadcastWaitPeriod", 223, a2, a3);
      unsigned int v4 = (CCLogStream **)*((void *)this + 5);
    }
  }
  uint64_t v8 = (*(uint64_t (**)(void))(*(void *)*v4 + 88))();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 136))(v8))
  {
    int v26 = this;
    uint64_t v27 = (uint64_t)AppleBCMWLANPowerStateAdapter::handleMulticastBroadcastWaitPeriodConfigAsyncCallBack;
    uint64_t v28 = 0;
    uint64_t v9 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 5) + 8), (uint64_t)"pm_bcmc_moredata_wait");
    if (v9 != -469794537 && v9 != 0)
    {
      uint64_t v11 = v9;
      if (*(void *)(*((void *)this + 5) + 16))
      {
        if (CCLogStream::shouldLog())
        {
          int v20 = (void *)*((void *)this + 5);
          int v21 = (CCLogStream *)v20[2];
          int v22 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v20 + 112))(*v20, v11);
          CCLogStream::logAlert(v21, "[dk] %s@%d:Failed configuring pm_bcmc_moredata_wait: %s\n", "configureMulticastBroadcastWaitPeriod", 233, v22);
        }
      }
    }
    uint64_t v12 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 5) + 8), (uint64_t)"pm_bcmc_wait");
  }
  else
  {
    uint64_t v13 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
    int v26 = (AppleBCMWLANPowerStateAdapter *)&v29;
    uint64_t v27 = 4;
    uint64_t v14 = AppleBCMWLANCommander::runIOVarSet(v13, (uint64_t)"pm_bcmc_moredata_wait", (uint64_t)&v26, 0, 0);
    if (v14 != -469794537 && v14 != 0)
    {
      uint64_t v16 = v14;
      if (*(void *)(*((void *)this + 5) + 16))
      {
        if (CCLogStream::shouldLog())
        {
          int v23 = (void *)*((void *)this + 5);
          int v24 = (CCLogStream *)v23[2];
          uint64_t v25 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v23 + 112))(*v23, v16);
          CCLogStream::logAlert(v24, "[dk] %s@%d:Failed configuring pm_bcmc_moredata_wait: %s\n", "configureMulticastBroadcastWaitPeriod", 241, v25);
        }
      }
    }
    int v17 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
    int v26 = (AppleBCMWLANPowerStateAdapter *)&v30;
    uint64_t v27 = 4;
    uint64_t v12 = AppleBCMWLANCommander::runIOVarSet(v17, (uint64_t)"pm_bcmc_wait", (uint64_t)&v26, 0, 0);
  }
  uint64_t v18 = v12;
  if (v12 && *(void *)(*((void *)this + 5) + 16) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 16), "[dk] %s@%d:LPAS: Ignore Multicast/Broadcast failed \n", "configureMulticastBroadcastWaitPeriod", 248);
  }
  return v18;
}

uint64_t AppleBCMWLANPowerStateAdapter::handleMulticastBroadcastWaitPeriodConfigAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 != -469794537 && a3 != 0)
  {
    uint64_t v4 = result;
    uint64_t result = *(void *)(*(void *)(result + 40) + 16);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v6 = *(void **)(v4 + 40);
        uint64_t v7 = (CCLogStream *)v6[2];
        uint64_t v8 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v6 + 112))(*v6, a3);
        return CCLogStream::logAlert(v7, "[dk] %s@%d:Failed to configure multicast wait period: %s\n", "handleMulticastBroadcastWaitPeriodConfigAsyncCallBack", 211, v8);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANPowerStateAdapter::configureDataSOI(AppleBCMWLANPowerStateAdapter *a1, _DWORD *a2)
{
  if (*(void *)(*((void *)a1 + 5) + 16) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*((void *)a1 + 5) + 16), "[dk] %s@%d:Default wakeup period - %d ms, extended - %d ms, packet threshold %d", "configureDataSOI", 259, a2[1], a2[2], a2[3]);
  }
  if (a2[3] == 1)
  {
    unsigned int v4 = a2[1];
    return AppleBCMWLANPowerStateAdapter::disableDFRTSAndSetFRTS(a1, v4);
  }
  else
  {
    return AppleBCMWLANPowerStateAdapter::configureDFRTSLogicAnd((uint64_t)a1);
  }
}

uint64_t AppleBCMWLANPowerStateAdapter::disableDFRTSAndSetFRTS(AppleBCMWLANPowerStateAdapter *this, unsigned int a2)
{
  unsigned int v11 = a2;
  AppleBCMWLANPowerStateAdapter::disableDFRTS(this);
  uint64_t v3 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
  v10[0] = &v11;
  v10[1] = 4;
  uint64_t v4 = AppleBCMWLANCommander::runIOVarSet(v3, (uint64_t)"pm2_sleep_ret", (uint64_t)v10, 0, 0);
  if (v4 && *(void *)(*((void *)this + 5) + 16) && CCLogStream::shouldLog())
  {
    int v6 = (void *)*((void *)this + 5);
    uint64_t v7 = (CCLogStream *)v6[2];
    uint64_t v8 = v11;
    uint64_t v9 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v6 + 112))(*v6, v4);
    CCLogStream::logAlert(v7, "[dk] %s@%d:Failed to set FRTS: ret %lu: %s\n", "disableDFRTSAndSetFRTS", 321, v8, v9);
  }
  return v4;
}

uint64_t AppleBCMWLANPowerStateAdapter::configureDFRTSLogicAnd(uint64_t a1)
{
  uint64_t v2 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 8), (uint64_t)"pm2_sleep_ret_ext");
  if (v2 && *(void *)(*(void *)(a1 + 40) + 16) && CCLogStream::shouldLog())
  {
    uint64_t v4 = *(void **)(a1 + 40);
    uint64_t v5 = (CCLogStream *)v4[2];
    int v6 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v4 + 112))(*v4, v2);
    CCLogStream::logAlert(v5, "[dk] %s@%d:Failed to Configure DFRTS (%s)\n", "configureDFRTSLogicAnd", 306, v6);
  }
  return v2;
}

uint64_t AppleBCMWLANPowerStateAdapter::handleDFRTSConfigAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(*(void *)(result + 40) + 16);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = *(void **)(v3 + 40);
        int v6 = (CCLogStream *)v5[2];
        uint64_t v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 112))(*v5, a3);
        return CCLogStream::logAlert(v6, "[dk] %s@%d:Failed to set DFRTS (%s)\n", "handleDFRTSConfigAsyncCallBack", 276, v7);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANPowerStateAdapter::disableDFRTS(AppleBCMWLANPowerStateAdapter *this)
{
  uint64_t v2 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 5) + 8), (uint64_t)"pm2_sleep_ret_ext");
  if (v2 && *(void *)(*((void *)this + 5) + 16) && CCLogStream::shouldLog())
  {
    uint64_t v4 = (void *)*((void *)this + 5);
    uint64_t v5 = (CCLogStream *)v4[2];
    int v6 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v4 + 112))(*v4, v2);
    CCLogStream::logAlert(v5, "[dk] %s@%d:Failed to Configure DFRTS (%s)\n", "disableDFRTS", 351, v6);
  }
  return v2;
}

uint64_t AppleBCMWLANPowerStateAdapter::configureExcessPMAlert(AppleBCMWLANPowerStateAdapter *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 4);
  unsigned int v5 = *(_DWORD *)(a2 + 8) / 0x3E8u;
  if (*(void *)(*((void *)a1 + 5) + 16) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*((void *)a1 + 5) + 16), "[dk] %s@%d:PM alert monitoring period - %d sec, percent - %d %%", "configureExcessPMAlert", 363, v5, v4);
  }
  if (*(unsigned char *)a2)
  {
    int v6 = v5;
    int v7 = v4;
  }
  else
  {
    int v6 = 0;
    int v7 = 0;
  }
  return AppleBCMWLANPowerStateAdapter::setExcessPMAlertParams(a1, v6, v7);
}

uint64_t AppleBCMWLANPowerStateAdapter::setExcessPMAlertParams(AppleBCMWLANPowerStateAdapter *this, int a2, int a3)
{
  int v22 = a2;
  unsigned int v5 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
  int v20 = &v22;
  uint64_t v21 = 4;
  uint64_t v6 = AppleBCMWLANCommander::runIOVarSet(v5, (uint64_t)"excess_pm_period", (uint64_t)&v20, 0, 0);
  int v7 = (void *)*((void *)this + 5);
  if (v6)
  {
    uint64_t v8 = v6;
    if (v7[2])
    {
      int shouldLog = CCLogStream::shouldLog();
      int v7 = (void *)*((void *)this + 5);
      if (shouldLog)
      {
        uint64_t v13 = (CCLogStream *)v7[2];
        int v14 = v22;
        uint64_t v15 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v7 + 112))(*v7, v8);
        CCLogStream::logAlert(v13, "[dk] %s@%d:Failed to set excess_pm_period to %d : ret %x: %s\n", "setExcessPMAlertParams", 384, v14, v8, v15);
        int v7 = (void *)*((void *)this + 5);
      }
    }
  }
  int v22 = a3;
  uint64_t v10 = (AppleBCMWLANCommander *)v7[1];
  int v20 = &v22;
  uint64_t v21 = 4;
  uint64_t v11 = AppleBCMWLANCommander::runIOVarSet(v10, (uint64_t)"excess_pm_percent", (uint64_t)&v20, 0, 0);
  if (v11 && *(void *)(*((void *)this + 5) + 16) && CCLogStream::shouldLog())
  {
    uint64_t v16 = (void *)*((void *)this + 5);
    int v17 = (CCLogStream *)v16[2];
    int v18 = v22;
    unsigned int v19 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v16 + 112))(*v16, v11);
    CCLogStream::logAlert(v17, "[dk] %s@%d:Failed to set excess_pm_percent to %d : ret %x: %s\n", "setExcessPMAlertParams", 391, v18, v11, v19);
  }
  return v11;
}

uint64_t AppleBCMWLANPowerStateAdapter::configureRoamScanForAssociatedSleep(AppleBCMWLANPowerStateAdapter *a1, uint64_t a2, int a3)
{
  if (*(unsigned char *)a2) {
    unsigned int v5 = *(_DWORD *)(a2 + 4);
  }
  else {
    unsigned int v5 = -1;
  }
  if (*(void *)(*((void *)a1 + 5) + 16) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*((void *)a1 + 5) + 16), "[dk] %s@%d:Roam scan quota - %d ms", "configureRoamScanForAssociatedSleep", 408, v5);
  }
  if (a3)
  {
    return AppleBCMWLANPowerStateAdapter::configureRoamScanQuota(a1, v5);
  }
  else
  {
    return AppleBCMWLANPowerStateAdapter::unconfigureRoamScanQuota(a1);
  }
}

uint64_t AppleBCMWLANPowerStateAdapter::configureRoamScanQuota(AppleBCMWLANPowerStateAdapter *this, unsigned int a2)
{
  if (a2 <= 1) {
    int v4 = 1;
  }
  else {
    int v4 = a2;
  }
  v12[0] = -1;
  v12[1] = v4;
  unsigned int v5 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
  v11[0] = v12;
  v11[1] = 8;
  uint64_t v6 = AppleBCMWLANCommander::runIOVarSet(v5, (uint64_t)"pfn_roam_alert_thresh", (uint64_t)v11, 0, 0);
  if (v6 && *(void *)(*((void *)this + 5) + 16) && CCLogStream::shouldLog())
  {
    uint64_t v8 = (void *)*((void *)this + 5);
    uint64_t v9 = (CCLogStream *)v8[2];
    uint64_t v10 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v8 + 112))(*v8, v6);
    CCLogStream::logAlert(v9, "[dk] %s@%d:Failed to configure pfn_roam_alert_thresh to %d: ret %x: %s\n", "configureRoamScanQuota", 433, a2, v6, v10);
  }
  return v6;
}

uint64_t AppleBCMWLANPowerStateAdapter::unconfigureRoamScanQuota(AppleBCMWLANPowerStateAdapter *this)
{
  uint64_t v2 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
  v5[0] = &v6;
  v5[1] = 8;
  uint64_t v6 = 0;
  uint64_t v3 = AppleBCMWLANCommander::runIOVarSet(v2, (uint64_t)"pfn_roam_alert_thresh", (uint64_t)v5, 0, 0);
  if (v3 && *(void *)(*((void *)this + 5) + 16) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 16), "[dk] %s@%d:Failed to unconfigure pfn_roam_alert_thresh", "unconfigureRoamScanQuota", 452);
  }
  return v3;
}

void _GLOBAL__sub_I_AppleBCMWLANPowerStateAdapter_cpp()
{
  kNullRange = 0;
}

uint64_t AppleBCMWLANLowLatencyInterface::init(AppleBCMWLANLowLatencyInterface *this)
{
  if (!AppleBCMWLANSkywalkInterface::init(this)) {
    return 0;
  }
  if (!*((void *)this + 20))
  {
    uint64_t v2 = IOMallocZeroTyped();
    *((void *)this + 20) = v2;
    if (!v2) {
      return 0;
    }
  }
  uint64_t v3 = 1;
  IO80211SkywalkInterface::setLowLatencyEnabled(this, 1);
  return v3;
}

uint64_t non-virtual thunk to'AppleBCMWLANLowLatencyInterface::init(AppleBCMWLANLowLatencyInterface *this)
{
  return AppleBCMWLANLowLatencyInterface::init((AppleBCMWLANLowLatencyInterface *)((char *)this - 24));
}

uint64_t AppleBCMWLANLowLatencyInterface::free(AppleBCMWLANLowLatencyInterface *this)
{
  uint64_t v2 = (void *)*((void *)this + 20);
  if (v2)
  {
    IOFree(v2, 8uLL);
    *((void *)this + 20) = 0;
  }
  return AppleBCMWLANSkywalkInterface::free(this);
}

uint64_t non-virtual thunk to'AppleBCMWLANLowLatencyInterface::free(AppleBCMWLANLowLatencyInterface *this)
{
  return AppleBCMWLANLowLatencyInterface::free((AppleBCMWLANLowLatencyInterface *)((char *)this - 24));
}

uint64_t AppleBCMWLANLowLatencyInterface::start(AppleBCMWLANLowLatencyInterface *this, IOService *anObject)
{
  uint64_t v3 = OSMetaClassBase::safeMetaCast(anObject, (const OSMetaClass *)gAppleBCMWLANCoreMetaClass);
  int v4 = *(uint64_t (**)(AppleBCMWLANLowLatencyInterface *, OSMetaClassBase *, void))(*(void *)this + 2896);
  return v4(this, v3, 0);
}

uint64_t non-virtual thunk to'AppleBCMWLANLowLatencyInterface::start(AppleBCMWLANLowLatencyInterface *this, IOService *anObject)
{
  uint64_t v3 = OSMetaClassBase::safeMetaCast(anObject, (const OSMetaClass *)gAppleBCMWLANCoreMetaClass);
  int v4 = *(uint64_t (**)(char *, OSMetaClassBase *, void))(*((void *)this - 6) + 2896);
  return v4((char *)this - 48, v3, 0);
}

BOOL AppleBCMWLANLowLatencyInterface::start(IO80211SkywalkInterface *a1, IOService *anObject)
{
  if (anObject)
  {
    int v4 = (OSMetaClassBase_vtbl *)anObject[1].OSObject::OSObjectInterface::__vftable;
    if (LOBYTE(v4[885].Dispatch))
    {
      if (LODWORD(v4[886].getMetaClass) == 2) {
        IO80211SkywalkInterface::setInitMacAddress(a1, (ether_addr *)&v4[886].release);
      }
    }
  }
  return AppleBCMWLANSkywalkInterface::start(a1, anObject);
}

BOOL non-virtual thunk to'AppleBCMWLANLowLatencyInterface::start(uint64_t a1, IOService *a2)
{
  return AppleBCMWLANLowLatencyInterface::start((IO80211SkywalkInterface *)(a1 - 144), a2);
}

const char *AppleBCMWLANLowLatencyInterface::getBSDNamePrefix(AppleBCMWLANLowLatencyInterface *this)
{
  return "llw";
}

const char *non-virtual thunk to'AppleBCMWLANLowLatencyInterface::getBSDNamePrefix(AppleBCMWLANLowLatencyInterface *this)
{
  return "llw";
}

uint64_t AppleBCMWLANLowLatencyInterface::setInterfaceEnable(AppleBCMWLANLowLatencyInterface *this, int a2)
{
  IO80211SkywalkInterface::validateDispatchQueue(this);
  if ((*(uint64_t (**)(AppleBCMWLANLowLatencyInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANLowLatencyInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANLowLatencyInterface *))(*(void *)this + 1024))(this);
      int v7 = (const char *)(*(uint64_t (**)(AppleBCMWLANLowLatencyInterface *))(*(void *)this + 160))(this);
      CCLogStream::logAlert(v6, "[dk] %s@%d:%s: on %s isEnable %d\n", "setInterfaceEnable", 130, "virtual IOReturn AppleBCMWLANLowLatencyInterface::setInterfaceEnable(BOOL)", v7, a2);
    }
  }
  uint64_t result = AppleBCMWLANSkywalkInterface::setInterfaceEnable(this, a2);
  if (a2)
  {
    uint64_t v5 = (*(uint64_t (**)(AppleBCMWLANLowLatencyInterface *, uint64_t, uint64_t))(*(void *)this + 128))(this, 3, 128);
    (*(void (**)(AppleBCMWLANLowLatencyInterface *, uint64_t, uint64_t, void, void))(*(void *)this + 624))(this, 2, 1, 0, 0);
    return v5;
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANLowLatencyInterface::setInterfaceEnable(AppleBCMWLANLowLatencyInterface *this, int a2)
{
  return AppleBCMWLANLowLatencyInterface::setInterfaceEnable((AppleBCMWLANLowLatencyInterface *)((char *)this - 48), a2);
}

uint64_t AppleBCMWLANLowLatencyInterface::setMacAddress(AppleBCMWLANLowLatencyInterface *this, ether_addr *a2)
{
  IO80211SkywalkInterface::validateDispatchQueue(this);
  Controller = (AppleBCMWLANCore *)AppleBCMWLANSkywalkInterface::getController(this);
  uint64_t v4 = *(void *)AppleBCMWLANCore::getBus(Controller);
  uint64_t v5 = (const OSMetaClassBase *)(*(uint64_t (**)(void))(v4 + 752))();
  uint64_t v6 = OSMetaClassBase::safeMetaCast(v5, (const OSMetaClass *)gAppleBCMWLANBusSkywalkMetaClass);
  ((void (*)(OSMetaClassBase *, AppleBCMWLANLowLatencyInterface *))v6->__vftable[1].Dispatch)(v6, this);
  ((void (*)(OSMetaClassBase *, AppleBCMWLANLowLatencyInterface *))v6->__vftable[1].isEqualTo)(v6, this);
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANLowLatencyInterface::setMacAddress(AppleBCMWLANLowLatencyInterface *this, ether_addr *a2)
{
  return 0;
}

uint64_t AppleBCMWLANLowLatencyInterface::logTxPacket(uint64_t a1, IO80211NetworkPacket *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (*(uint64_t (**)(IO80211NetworkPacket *))(*(void *)a2 + 480))(a2);
  uint64_t v11 = v10 + IO80211NetworkPacket::getHeadroom(a2);
  *(unsigned char *)(a3 + 40) = (*(unsigned char *)(v11 + 63) >> 4) & 8;
  *(_DWORD *)(a3 + 28) = bswap32(*(unsigned __int16 *)(v11 + 64)) >> 16;
  return IO80211InfraInterface::logTxPacket(a1, a2, a3, a4, a5);
}

uint64_t non-virtual thunk to'AppleBCMWLANLowLatencyInterface::logTxPacket(uint64_t a1, IO80211NetworkPacket *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return AppleBCMWLANLowLatencyInterface::logTxPacket(a1 - 80, a2, a3, a4, a5);
}

uint64_t AppleBCMWLANLowLatencyInterface::inputPacket(uint64_t a1, IO80211NetworkPacket *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (*(uint64_t (**)(IO80211NetworkPacket *))(*(void *)a2 + 480))(a2);
  *(_WORD *)(a3 + 34) = bswap32(*(unsigned __int16 *)(v8 + IO80211NetworkPacket::getHeadroom(a2) + 64)) >> 16;
  return IO80211InfraInterface::inputPacket(a1, a2, a3, a4, 0, 0);
}

uint64_t non-virtual thunk to'AppleBCMWLANLowLatencyInterface::inputPacket(uint64_t a1, IO80211NetworkPacket *a2, uint64_t a3, uint64_t a4)
{
  return AppleBCMWLANLowLatencyInterface::inputPacket(a1 - 80, a2, a3, a4);
}

void _GLOBAL__sub_I_AppleBCMWLANLowLatencyInterface_cpp()
{
  kNullRange = 0;
}

AppleBCMWLAN11beAdapter *AppleBCMWLAN11beAdapter::withDriver(AppleBCMWLAN11beAdapter *this, AppleBCMWLANCore *a2)
{
  uint64_t v5 = (AppleBCMWLAN11beAdapter *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLAN11beAdapterMetaClass, (OSObject **)&v5)) {
    return 0;
  }
  uint64_t v3 = v5;
  if (v5 && (AppleBCMWLAN11beAdapter::initWithDriver((OSObject *)v5, this) & 1) == 0)
  {
    (*(void (**)(AppleBCMWLAN11beAdapter *))(*(void *)v3 + 16))(v3);
    return 0;
  }
  return v3;
}

uint64_t AppleBCMWLAN11beAdapter::initWithDriver(OSObject *this, AppleBCMWLANCore *a2)
{
  uint64_t v4 = (OSObject_vtbl *)IOMallocZeroTyped();
  this[1].OSMetaClassBase::__vftable = v4;
  if (v4)
  {
    v4->getMetaClass = (const OSMetaClass *(__cdecl *)(const OSMetaClassBase *__hidden))a2;
    getMetaClass = (AppleBCMWLANCore *)this[1].getMetaClass;
    if (getMetaClass)
    {
      this[1].retaiuint64_t n = (void (__cdecl *)(const OSObject *__hidden))AppleBCMWLANCore::getCommander(getMetaClass);
      if (this[1].retain)
      {
        this[1].release = (void (__cdecl *)(const OSObject *__hidden))(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
        release = this[1].release;
        if (release)
        {
          (*(void (**)(void (__cdecl *)(const OSObject *__hidden)))(*(void *)release + 8))(release);
          if (OSObject::init(this)) {
            return 1;
          }
          IOLog("AppleBCMWLAN11beAdapter super init failied\n");
        }
        else
        {
          IOLog("AppleBCMWLAN11beAdapter Failed to init fLogger\n");
        }
      }
      else
      {
        IOLog("AppleBCMWLAN11beAdapter commander is null\n");
      }
    }
    else
    {
      IOLog("AppleBCMWLAN11beAdapter driver is null\n");
    }
  }
  else
  {
    IOLog("Failed to allocate AppleBCMWLAN11beAdapter_IVars\n");
  }
  return 0;
}

void AppleBCMWLAN11beAdapter::free(OSObject *this)
{
  uint64_t v2 = this[1].OSMetaClassBase::__vftable;
  if (v2)
  {
    release = v2->release;
    if (!release
      || ((*(void (**)(void (__cdecl *)(const OSObject *__hidden)))(*(void *)release + 16))(v2->release),
          this[1].release = 0,
          (uint64_t v2 = this[1].OSMetaClassBase::__vftable) != 0))
    {
      IOFree(v2, 0x20uLL);
      this[1].OSMetaClassBase::__vftable = 0;
    }
  }
  OSObject::free(this);
}

void non-virtual thunk to'AppleBCMWLAN11beAdapter::free(AppleBCMWLAN11beAdapter *this)
{
}

uint64_t AppleBCMWLAN11beAdapter::setupInitConfig(AppleBCMWLAN11beAdapter *this)
{
  AppleBCMWLAN11beAdapter::configureMloPref(this);
  AppleBCMWLAN11beAdapter::setMultilinkActiveMode(this, 3);
  return AppleBCMWLAN11beAdapter::configureMloFeaturesInit(this);
}

uint64_t AppleBCMWLAN11beAdapter::configureMloPref(AppleBCMWLAN11beAdapter *this)
{
  long long v9 = xmmword_100304938;
  uint64_t v10 = 0;
  uint64_t v2 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
  v8[0] = &v9;
  v8[1] = 24;
  uint64_t v3 = AppleBCMWLANCommander::runIOVarSet(v2, (uint64_t)"mlo", (uint64_t)v8, 0, 0);
  if (*(void *)(*((void *)this + 5) + 16) && CCLogStream::shouldLog())
  {
    uint64_t v5 = (void *)*((void *)this + 5);
    uint64_t v6 = (CCLogStream *)v5[2];
    int v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 112))(*v5, v3);
    CCLogStream::logAlert(v6, "[dk] %s@%d: mloConfigPref_t %d[%s]\n", "configureMloPref", 280, v3, v7);
  }
  return v3;
}

uint64_t AppleBCMWLAN11beAdapter::setMultilinkActiveMode(AppleBCMWLAN11beAdapter *this, int a2)
{
  v11[0] = 65543;
  v11[1] = a2;
  uint64_t v4 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
  v10[0] = v11;
  v10[1] = 8;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"mlo", (uint64_t)v10, 0, 0);
  if (*(void *)(*((void *)this + 5) + 16) && CCLogStream::shouldLog())
  {
    int v7 = (void *)*((void *)this + 5);
    uint64_t v8 = (CCLogStream *)v7[2];
    long long v9 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v7 + 112))(*v7, v5);
    CCLogStream::logAlert(v8, "[dk] %s@%d: multilink_active mode %d[%s] set<%d> \n", "setMultilinkActiveMode", 426, v5, v9, a2);
  }
  return v5;
}

uint64_t AppleBCMWLAN11beAdapter::configureMloFeaturesInit(AppleBCMWLAN11beAdapter *this)
{
  uint64_t v11 = 0xC0001000C000DLL;
  uint64_t v12 = 0x80000003FLL;
  uint64_t v2 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
  v10[0] = &v11;
  v10[1] = 16;
  uint64_t v3 = AppleBCMWLANCommander::runIOVarSet(v2, (uint64_t)"mlo", (uint64_t)v10, 0, 0);
  if (*(void *)(*((void *)this + 5) + 16) && CCLogStream::shouldLog())
  {
    uint64_t v5 = (void *)*((void *)this + 5);
    uint64_t v6 = (CCLogStream *)v5[2];
    int v7 = v12;
    int v8 = HIDWORD(v12);
    long long v9 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 112))(*v5, v3);
    CCLogStream::logAlert(v6, "[dk] %s@%d: mloFeaturesConfig_t mask:0x%x enab:0x%x  --> %d[%s] \n", "configureMloFeaturesInit", 449, v7, v8, v3, v9);
  }
  return v3;
}

uint64_t AppleBCMWLAN11beAdapter::setupJoinConfig(AppleBCMWLAN11beAdapter *this, int a2, ether_addr *a3, int a4)
{
  if (a2) {
    int v7 = 3;
  }
  else {
    int v7 = 0;
  }
  uint64_t result = *(void *)(*((void *)this + 5) + 16);
  if (result && (uint64_t result = CCLogStream::shouldLog(), result))
  {
    uint64_t result = CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 16), "[dk] %s@%d:MLO Enabled=<%d> numberOfLinks<%d>-><%d> force=%d\n", "setupJoinConfig", 211, a2, *(unsigned __int16 *)(*((void *)this + 5) + 24), v7, a4);
    if ((a4 & 1) == 0)
    {
LABEL_7:
      if (v7 == *(unsigned __int16 *)(*((void *)this + 5) + 24)) {
        return result;
      }
    }
  }
  else if ((a4 & 1) == 0)
  {
    goto LABEL_7;
  }
  uint64_t v10 = 0;
  v20[1] = 0;
  v20[0] = 0;
  __int16 v21 = 0;
  int v18 = *(_DWORD *)a3->octet;
  __int16 v19 = *(_WORD *)&a3->octet[4];
  for (unint64_t i = 1; i != 4; ++i)
  {
    int v12 = 0;
    while (1)
    {
      read_random();
      if (v18 != 2 || v19 != 0) {
        break;
      }
LABEL_22:
      if (++v12 == 100) {
        AppleBCMWLAN11beAdapter::setupJoinConfig();
      }
    }
    unint64_t v14 = 0;
    uint64_t v15 = v20;
    while (v10 != v14)
    {
      BOOL v16 = *(_DWORD *)v15 == 2 && *((_WORD *)v15 + 2) == 0;
      uint64_t v15 = (void *)((char *)v15 + 6);
      ++v14;
      if (v16)
      {
        if (v14 >= i) {
          break;
        }
        goto LABEL_22;
      }
    }
    int v17 = (char *)&v18 + 6 * i;
    *((_WORD *)v17 + 2) = 0;
    *(_DWORD *)int v17 = 2;
    ++v10;
  }
  uint64_t result = AppleBCMWLAN11beAdapter::configureMlo((uint64_t)this, v7, (uint64_t)&v18);
  *(_WORD *)(*((void *)this + 5) + 24) = v7;
  return result;
}

uint64_t AppleBCMWLAN11beAdapter::configureMlo(uint64_t a1, int a2, uint64_t a3)
{
  __int16 v6 = 8 * a2;
  uint64_t v7 = (unsigned __int16)(8 * a2 + 20) & 0xFFFC;
  uint64_t v8 = IOMallocZeroData();
  if (!v8) {
    AppleBCMWLAN11beAdapter::configureMlo();
  }
  long long v9 = (unsigned __int8 *)v8;
  *(_WORD *)uint64_t v8 = 1;
  *(_WORD *)(v8 + 2) = v6 + 16;
  *(_WORD *)(v8 + 4) = 1;
  *(_WORD *)(v8 + 6) = v6 + 16;
  *(_DWORD *)(v8 + 8) = 0;
  *(unsigned char *)(v8 + 12) = a2;
  *(unsigned char *)(v8 + 1AppleBCMWLANJoinAdapter::free(this - 3) = 2;
  __int16 v10 = *(_WORD *)(a3 + 4);
  *(_DWORD *)(v8 + 14) = *(_DWORD *)a3;
  uint64_t v11 = (unsigned __int8 *)(v8 + 14);
  *(_WORD *)(v8 + 18) = v10;
  if (a2)
  {
    uint64_t v12 = 0;
    uint64_t v13 = (unsigned __int8 *)(v8 + 20);
    unint64_t v14 = (int *)(a3 + 6);
    do
    {
      int v15 = *v14;
      *((_WORD *)v13 + 2) = *((_WORD *)v14 + 2);
      *(_DWORD *)uint64_t v13 = v15;
      if (*(void *)(*(void *)(a1 + 40) + 16) && CCLogStream::shouldLog())
      {
        int v33 = *(CCLogStream **)(*(void *)(a1 + 40) + 16);
        if (IO80211_io80211isDebuggable()) {
          int v32 = *v13;
        }
        else {
          int v32 = 0;
        }
        if (IO80211_io80211isDebuggable()) {
          int v31 = v13[1];
        }
        else {
          int v31 = 0;
        }
        if (IO80211_io80211isDebuggable()) {
          int v30 = v13[2];
        }
        else {
          int v30 = 0;
        }
        if (IO80211_io80211isDebuggable()) {
          int v29 = v13[3];
        }
        else {
          int v29 = 0;
        }
        if (IO80211_io80211isDebuggable()) {
          int v28 = v13[4];
        }
        else {
          int v28 = 0;
        }
        if (IO80211_io80211isDebuggable()) {
          int v16 = v13[5];
        }
        else {
          int v16 = 0;
        }
        CCLogStream::logAlert(v33, "[dk] %s@%d:link id =<%d> %02x:%02x:%02x:%02x:%02x:%02x\n", "configureMlo", 248, v12, v32, v31, v30, v29, v28, v16);
      }
      ++v12;
      v13 += 8;
      unint64_t v14 = (int *)((char *)v14 + 6);
    }
    while (a2 != v12);
  }
  int v17 = *(AppleBCMWLANCommander **)(*(void *)(a1 + 40) + 8);
  v35[0] = v9;
  v35[1] = v7;
  uint64_t v18 = AppleBCMWLANCommander::runIOVarSet(v17, (uint64_t)"mlo", (uint64_t)v35, 0, 0);
  if (*(void *)(*(void *)(a1 + 40) + 16) && CCLogStream::shouldLog())
  {
    int v20 = *(void **)(a1 + 40);
    uint64_t v34 = (CCLogStream *)v20[2];
    __int16 v21 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v20 + 112))(*v20, v18);
    if (IO80211_io80211isDebuggable()) {
      int v22 = *v11;
    }
    else {
      int v22 = 0;
    }
    if (IO80211_io80211isDebuggable()) {
      int v23 = v9[15];
    }
    else {
      int v23 = 0;
    }
    if (IO80211_io80211isDebuggable()) {
      int v24 = v9[16];
    }
    else {
      int v24 = 0;
    }
    if (IO80211_io80211isDebuggable()) {
      int v25 = v9[17];
    }
    else {
      int v25 = 0;
    }
    if (IO80211_io80211isDebuggable()) {
      int v26 = v9[18];
    }
    else {
      int v26 = 0;
    }
    if (IO80211_io80211isDebuggable()) {
      int v27 = v9[19];
    }
    else {
      int v27 = 0;
    }
    CCLogStream::logAlert(v34, "[dk] %s@%d:configureMlo %d[%s] numberOfLinks=<%d> %02x:%02x:%02x:%02x:%02x:%02x\n", "configureMlo", 257, v18, v21, a2, v22, v23, v24, v25, v26, v27);
  }
  IOFreeData();
  return v18;
}

uint64_t AppleBCMWLAN11beAdapter::dumpMloStatus(AppleBCMWLAN11beAdapter *this, char *a2)
{
  uint64_t v2 = this;
  int v26 = 2;
  uint64_t v3 = AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(*((void *)this + 5) + 8)) - 4;
  uint64_t v4 = IOMallocZeroData();
  if (!v4) {
    AppleBCMWLAN11beAdapter::dumpMloStatus();
  }
  uint64_t v5 = v4;
  unint64_t v6 = (unsigned __int16)v3 | ((unint64_t)(unsigned __int16)v3 << 32) | 0x10000;
  if ((_WORD)v3)
  {
    uint64_t v7 = v4;
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  v25[0] = v7;
  v25[1] = v6;
  uint64_t v8 = *(AppleBCMWLANCommander **)(*((void *)v2 + 5) + 8);
  v24[0] = &v26;
  v24[1] = 4;
  uint64_t v19 = AppleBCMWLANCommander::runIOVarGet(v8, (uint64_t)"mlo", (uint64_t)v24, (uint64_t)v25, 0);
  if (v19)
  {
    if (*(void *)(*((void *)v2 + 5) + 16) && CCLogStream::shouldLog())
    {
      int v16 = (void *)*((void *)v2 + 5);
      int v17 = (CCLogStream *)v16[2];
      uint64_t v18 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v16 + 112))(*v16, v19);
      CCLogStream::logAlert(v17, "[dk] %s@%d: getMloStatus %d[%s] \n", "dumpMloStatus", 317, v19, v18);
    }
  }
  else
  {
    if (*(unsigned char *)(v5 + 11))
    {
      int v9 = 0;
    }
    else
    {
      int v10 = IO80211Print();
      if (!*(unsigned char *)(v5 + 11)) {
        goto LABEL_14;
      }
      int v9 = v10;
    }
    int v11 = 0;
    uint64_t v20 = v5;
    unsigned int v12 = 12;
    __int16 v21 = v2;
    do
    {
      uint64_t v13 = *(unsigned __int16 *)(v5 + v12 + 8);
      unsigned int v23 = v12 + 24;
      uint64_t ChanSpecHandler = (int **)AppleBCMWLANCore::getChanSpecHandler(**((AppleBCMWLANCore ***)v2 + 5));
      int v22 = v11;
      AppleBCMWLANChanSpec::getAppleChannelSpec(ChanSpecHandler, v13);
      if (!v11)
      {
        IO80211_io80211isDebuggable();
        IO80211_io80211isDebuggable();
        IO80211_io80211isDebuggable();
        IO80211_io80211isDebuggable();
        IO80211_io80211isDebuggable();
        IO80211_io80211isDebuggable();
        IO80211_io80211isDebuggable();
        IO80211_io80211isDebuggable();
        IO80211_io80211isDebuggable();
        IO80211_io80211isDebuggable();
        IO80211_io80211isDebuggable();
        IO80211_io80211isDebuggable();
        v9 += IO80211Print();
      }
      IO80211_io80211isDebuggable();
      IO80211_io80211isDebuggable();
      IO80211_io80211isDebuggable();
      IO80211_io80211isDebuggable();
      IO80211_io80211isDebuggable();
      IO80211_io80211isDebuggable();
      IO80211_io80211isDebuggable();
      IO80211_io80211isDebuggable();
      IO80211_io80211isDebuggable();
      IO80211_io80211isDebuggable();
      IO80211_io80211isDebuggable();
      IO80211_io80211isDebuggable();
      uint64_t v2 = v21;
      v9 += IO80211Print();
      ++v11;
      uint64_t v5 = v20;
      unsigned int v12 = v23;
    }
    while (v22 + 1 < *(unsigned __int8 *)(v20 + 11));
  }
LABEL_14:
  IOFreeData();
  return v19;
}

BOOL AppleBCMWLAN11beAdapter::isMloConnection(AppleBCMWLAN11beAdapter *this)
{
  int v17 = 2;
  unsigned __int16 v2 = AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(*((void *)this + 5) + 8)) - 4;
  uint64_t v3 = IOMallocZeroData();
  if (!v3) {
    AppleBCMWLAN11beAdapter::isMloConnection();
  }
  uint64_t v4 = v3;
  unint64_t v5 = v2 | ((unint64_t)v2 << 32) | 0x10000;
  if (v2)
  {
    uint64_t v6 = v3;
  }
  else
  {
    unint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  v16[0] = v6;
  v16[1] = v5;
  uint64_t v7 = *(AppleBCMWLANCommander **)(*((void *)this + 5) + 8);
  v15[0] = &v17;
  v15[1] = 4;
  uint64_t v8 = AppleBCMWLANCommander::runIOVarGet(v7, (uint64_t)"mlo", (uint64_t)v15, (uint64_t)v16, 0);
  if (v8)
  {
    uint64_t v11 = v8;
    if (*(void *)(*((void *)this + 5) + 16) && CCLogStream::shouldLog())
    {
      unsigned int v12 = (void *)*((void *)this + 5);
      uint64_t v13 = (CCLogStream *)v12[2];
      unint64_t v14 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v12 + 112))(*v12, v11);
      CCLogStream::logAlert(v13, "[dk] %s@%d: getMloStatus %d[%s] \n", "isMloConnection", 357, v11, v14);
    }
    BOOL v9 = 0;
  }
  else
  {
    BOOL v9 = *(unsigned char *)(v4 + 11) != 0;
  }
  IOFreeData();
  return v9;
}

uint64_t AppleBCMWLAN11beAdapter::getMloStatus(AppleBCMWLANCore ***this)
{
  int v73 = 2;
  int v75 = 0;
  uint64_t v74 = 0;
  uint64_t LQM = AppleBCMWLANCore::getLQM(*this[5]);
  uint64_t v2 = AppleBCMWLANCommander::getMaxCmdRxPayload(this[5][1]) - 4;
  uint64_t v3 = IOMallocZeroData();
  if (!v3) {
    AppleBCMWLAN11beAdapter::getMloStatus();
  }
  unint64_t v4 = (unsigned __int16)v2 | ((unint64_t)(unsigned __int16)v2 << 32) | 0x10000;
  if (!(_WORD)v2) {
    unint64_t v4 = 0;
  }
  uint64_t v69 = v3;
  if ((_WORD)v2) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = 0;
  }
  v72[0] = v5;
  v72[1] = v4;
  uint64_t v6 = this[5][1];
  v71[0] = &v73;
  v71[1] = 4;
  uint64_t v7 = AppleBCMWLANCommander::runIOVarGet(v6, (uint64_t)"mlo", (uint64_t)v71, (uint64_t)v72, 0);
  if (v7)
  {
    uint64_t v40 = v7;
    if (this[5][2] && CCLogStream::shouldLog())
    {
      uint64_t v42 = this[5];
      uint64_t v43 = v42[2];
      __int16 v44 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)*v42 + 112))(*v42, v40);
      CCLogStream::logAlert(v43, "[dk] %s@%d: getMloStatus %d [%s] \n", "getMloStatus", 382, v40, v44);
    }
  }
  else if (LQM)
  {
    if (this[5][2] && CCLogStream::shouldLog())
    {
      int v68 = this[5][2];
      int v45 = *(unsigned __int16 *)(v69 + 2);
      int v46 = *(unsigned __int8 *)(v69 + 10);
      int v47 = *(unsigned __int8 *)(v69 + 11);
      if (IO80211_io80211isDebuggable()) {
        int v48 = *(unsigned __int8 *)(v69 + 4);
      }
      else {
        int v48 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v49 = *(unsigned __int8 *)(v69 + 5);
      }
      else {
        int v49 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v50 = *(unsigned __int8 *)(v69 + 6);
      }
      else {
        int v50 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v51 = *(unsigned __int8 *)(v69 + 7);
      }
      else {
        int v51 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v52 = *(unsigned __int8 *)(v69 + 8);
      }
      else {
        int v52 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v53 = *(unsigned __int8 *)(v69 + 9);
      }
      else {
        int v53 = 0;
      }
      CCLogStream::logAlert(v68, "[dk] %s@%d:len=<%d> mode<%d>  num_links=<%d>   local mld_addr =%02x:%02x:%02x:%02x:%02x:%02x\n", "getMloStatus", 391, v45, v46, v47, v48, v49, v50, v51, v52, v53);
    }
    AppleBCMWLANLQM::updateNumOfMloLinks(LQM, *(unsigned char *)(v69 + 11));
    uint64_t v8 = v69;
    if (*(unsigned char *)(v69 + 11))
    {
      __int16 v67 = this;
      unsigned int v9 = 0;
      unsigned int v10 = 12;
      do
      {
        uint64_t v11 = (unsigned __int8 *)(v8 + v10);
        int v66 = *v11;
        unsigned int v12 = v11[1];
        int v13 = v11[2];
        int v14 = v11[3];
        int v15 = v11[4];
        int v16 = v11[5];
        int v17 = v11[6];
        int v18 = v11[7];
        uint64_t v19 = *((unsigned __int16 *)v11 + 4);
        uint64_t v20 = v10 + 12;
        uint64_t v21 = *(void *)(v8 + v20);
        int v75 = *(_DWORD *)(v8 + v20 + 8);
        uint64_t v74 = v21;
        v10 += 24;
        if (v67[5][2] && CCLogStream::shouldLog())
        {
          __int16 v65 = v67[5][2];
          if (IO80211_io80211isDebuggable()) {
            int v22 = v13;
          }
          else {
            int v22 = 0;
          }
          int v64 = v22;
          if (IO80211_io80211isDebuggable()) {
            int v23 = v14;
          }
          else {
            int v23 = 0;
          }
          int v63 = v23;
          if (IO80211_io80211isDebuggable()) {
            int v24 = v15;
          }
          else {
            int v24 = 0;
          }
          int v62 = v24;
          if (IO80211_io80211isDebuggable()) {
            int v25 = v16;
          }
          else {
            int v25 = 0;
          }
          int v61 = v25;
          if (IO80211_io80211isDebuggable()) {
            int v26 = v17;
          }
          else {
            int v26 = 0;
          }
          int v60 = v26;
          if (IO80211_io80211isDebuggable()) {
            int v27 = v18;
          }
          else {
            int v27 = 0;
          }
          int v59 = v27;
          if (IO80211_io80211isDebuggable()) {
            int v28 = v74;
          }
          else {
            int v28 = 0;
          }
          int v58 = v28;
          if (IO80211_io80211isDebuggable()) {
            int v29 = BYTE1(v74);
          }
          else {
            int v29 = 0;
          }
          int v57 = v29;
          if (IO80211_io80211isDebuggable()) {
            int v30 = BYTE2(v74);
          }
          else {
            int v30 = 0;
          }
          int v56 = v30;
          if (IO80211_io80211isDebuggable()) {
            int v31 = BYTE3(v74);
          }
          else {
            int v31 = 0;
          }
          int v55 = v31;
          if (IO80211_io80211isDebuggable()) {
            int v32 = BYTE4(v74);
          }
          else {
            int v32 = 0;
          }
          int v54 = v32;
          if (IO80211_io80211isDebuggable()) {
            int v33 = BYTE5(v74);
          }
          else {
            int v33 = 0;
          }
          if (IO80211_io80211isDebuggable()) {
            int v34 = BYTE6(v74);
          }
          else {
            int v34 = 0;
          }
          if (IO80211_io80211isDebuggable()) {
            int v35 = HIBYTE(v74);
          }
          else {
            int v35 = 0;
          }
          if (IO80211_io80211isDebuggable()) {
            int v36 = v75;
          }
          else {
            int v36 = 0;
          }
          if (IO80211_io80211isDebuggable()) {
            int v37 = BYTE1(v75);
          }
          else {
            int v37 = 0;
          }
          if (IO80211_io80211isDebuggable()) {
            int v38 = BYTE2(v75);
          }
          else {
            int v38 = 0;
          }
          if (IO80211_io80211isDebuggable()) {
            int v39 = HIBYTE(v75);
          }
          else {
            int v39 = 0;
          }
          CCLogStream::logAlert(v65, "[dk] %s@%d:[%d:%d]=link_id=<%d> link_idx<%d>  local link adrr =%02x:%02x:%02x:%02x:%02x:%02x, peer link adrr =%02x:%02x:%02x:%02x:%02x:%02x, peer mld adrr =%02x:%02x:%02x:%02x:%02x:%02x\n", "getMloStatus", 407, v9, v10, v66, v12, v64, v63, v62, v61, v60, v59, v58, v57, v56, v55,
            v54,
            v33,
            v34,
            v35,
            v36,
            v37,
            v38,
            v39);
        }
        AppleBCMWLANLQM::storeMloLinkInfo(LQM, v12, v19, (const ether_addr *)&v74);
        ++v9;
        uint64_t v8 = v69;
      }
      while (v9 < *(unsigned __int8 *)(v69 + 11));
      uint64_t v40 = 0;
    }
    else
    {
      uint64_t v40 = 0;
    }
  }
  else
  {
    uint64_t v40 = 3758097084;
  }
  IOFreeData();
  return v40;
}

uint64_t AppleBCMWLAN11beAdapter::configureMloFeatures(AppleBCMWLANCore ***this, int a2)
{
  uint64_t LQM = AppleBCMWLANCore::getLQM(*this[5]);
  if (a2) {
    int v5 = 18;
  }
  else {
    int v5 = 0;
  }
  uint64_t v16 = 0xC0001000C000DLL;
  int v17 = 54;
  int v18 = v5;
  uint64_t v6 = this[5][1];
  v15[0] = &v16;
  v15[1] = 16;
  uint64_t v7 = AppleBCMWLANCommander::runIOVarSet(v6, (uint64_t)"mlo", (uint64_t)v15, 0, 0);
  if (this[5][2] && CCLogStream::shouldLog())
  {
    unsigned int v9 = this[5];
    unsigned int v10 = v9[2];
    int v11 = v17;
    int v12 = v18;
    int v13 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)*v9 + 112))(*v9, v7);
    int v14 = "FALSE";
    if (a2) {
      int v14 = "TRUE";
    }
    CCLogStream::logAlert(v10, "[dk] %s@%d: mloFeaturesConfig_t mask:0x%x enab:0x%x  --> %d[%s], low-latency = %s \n", "configureMloFeatures", 482, v11, v12, v7, v13, v14);
    if (!v7) {
      goto LABEL_7;
    }
  }
  else if (!v7)
  {
LABEL_7:
    AppleBCMWLANLQM::updateMloTrafficSwitchState(LQM, a2);
  }
  return v7;
}

uint64_t AppleBCMWLAN11beAdapter::handleMloLinkEvent(uint64_t a1, uint64_t a2)
{
  uint64_t result = AppleBCMWLANCore::getLQM(**(AppleBCMWLANCore ***)(a1 + 40));
  if (result)
  {
    return AppleBCMWLANLQM::updateMloLinkChangeInfo(result, (unsigned __int16 *)(a2 + 48));
  }
  return result;
}

void _GLOBAL__sub_I_AppleBCMWLAN11beAdapter_cpp()
{
  kNullRange = 0;
}

const char *AppleBCMWLANNANDataInterface::getBSDNamePrefix(AppleBCMWLANNANDataInterface *this)
{
  return "ir";
}

const char *non-virtual thunk to'AppleBCMWLANNANDataInterface::getBSDNamePrefix(AppleBCMWLANNANDataInterface *this)
{
  return "ir";
}

uint64_t AppleBCMWLANNANDataInterface::init(AppleBCMWLANNANDataInterface *this)
{
  uint64_t result = IO80211SkywalkInterface::init(this);
  if (result)
  {
    uint64_t v3 = IOMallocZeroTyped();
    *((void *)this + 17) = v3;
    if (v3)
    {
      return 1;
    }
    else
    {
      IOLog("ERROR: nan data interface ivars alloc fail\n");
      return 0;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANDataInterface::init(AppleBCMWLANNANDataInterface *this)
{
  return AppleBCMWLANNANDataInterface::init((AppleBCMWLANNANDataInterface *)((char *)this - 24));
}

uint64_t AppleBCMWLANNANDataInterface::init(AppleBCMWLANNANDataInterface *this, AppleBCMWLANCore *a2, ether_addr *a3, unsigned int a4, char *a5)
{
  uint64_t v8 = IO80211VirtualInterface::init(this, a2, a3, a4, a5);
  if (v8)
  {
    if (AppleBCMWLANCore::isHostAssignedInterfaceIndex(a2))
    {
      IO80211SkywalkInterface::setInterfaceId(this, 4u);
      AppleBCMWLANCore::setNanMgtSkywalkInterface((uint64_t)a2, 3u);
    }
    else
    {
      IO80211SkywalkInterface::setInterfaceId(this, 0xFFFFFFFF);
    }
    IO80211SkywalkInterface::setInterfaceRole(this, a4);
    *(void *)(*((void *)this + 17) + 8) = a2;
    *(void *)(*((void *)this + 17) + 24) = AppleBCMWLANCore::getCommander(a2);
    *(void *)(*((void *)this + 17) + 32) = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
    uint64_t v9 = *((void *)this + 17);
    unsigned int v10 = *(AppleBCMWLANCore **)(v9 + 8);
    if (v10)
    {
      *(void *)(*((void *)this + 17) + 16) = AppleBCMWLANCore::getP2PNANMgmtDataInterface(v10);
      uint64_t v9 = *((void *)this + 17);
    }
    *(unsigned char *)(v9 + 72) = 4;
    *(_DWORD *)(*((void *)this + 17) + 160) = 0;
    *(_DWORD *)(*((void *)this + 17) + 164) = 1;
    *(_DWORD *)(*((void *)this + 17) + 168) = 2;
    *(_DWORD *)(*((void *)this + 17) + 172) = 3;
  }
  return v8;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANDataInterface::init(AppleBCMWLANNANDataInterface *this, AppleBCMWLANCore *a2, ether_addr *a3, unsigned int a4, char *a5)
{
  return AppleBCMWLANNANDataInterface::init((AppleBCMWLANNANDataInterface *)((char *)this - 128), a2, a3, a4, a5);
}

uint64_t AppleBCMWLANNANDataInterface::start(AppleBCMWLANNANDataInterface *this, IOService *anObject)
{
  uint64_t v3 = (IOService *)OSMetaClassBase::safeMetaCast(anObject, (const OSMetaClass *)gAppleBCMWLANCoreMetaClass);
  return AppleBCMWLANNANDataInterface::start(this, v3);
}

uint64_t AppleBCMWLANNANDataInterface::start(IO80211SkywalkInterface *a1, IOService *a2)
{
  __int16 v27 = 0;
  int v26 = 0;
  if (a2 && (unint64_t v4 = a2[1].OSObject::OSObjectInterface::__vftable, LOBYTE(v4[2214].free)) && LODWORD(v4[2215].init) == 10)
  {
    p_free = &v4[2214].free;
    int v26 = *((_DWORD *)p_free + 6);
    __int16 v27 = *((_WORD *)p_free + 14);
  }
  else if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
  {
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      int v18 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v18, "[dk] %s@%d:%s: ERROR: NAN data interface parameters invalid\n", "start", 159, "BOOL AppleBCMWLANNANDataInterface::start(AppleBCMWLANCore *, RegistrationInfo *)");
    }
  }
  if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
  {
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      int v17 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v17, "[dk] %s@%d:%s: Initializing NAN data interface parameters %02x:%02x:%02x:%02x:%02x:%02x\n", "start", 162, "BOOL AppleBCMWLANNANDataInterface::start(AppleBCMWLANCore *, RegistrationInfo *)", v26, BYTE1(v26), BYTE2(v26), HIBYTE(v26), v27, HIBYTE(v27));
    }
  }
  uint64_t v6 = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 312))(a1);
  uint64_t result = (*(uint64_t (**)(IO80211SkywalkInterface *, IOService *, int *, uint64_t, uint64_t))(*(void *)a1 + 1512))(a1, a2, &v26, 10, v6);
  if (result)
  {
    uint64_t v8 = &a2[1].OSObject::OSObjectInterface::__vftable[2214].free;
    *(_OWORD *)uint64_t v8 = 0u;
    *((_OWORD *)v8 + 1) = 0u;
    if (IO80211VirtualInterface::start(a1, a2))
    {
      uint64_t v9 = *(AppleBCMWLANCore **)(*((void *)a1 + 17) + 8);
      if (IO80211SkywalkInterface::getLogger(a1)) {
        *(void *)(*((void *)a1 + 17) + 32) = IO80211SkywalkInterface::getLogger(a1);
      }
      *(void *)(*((void *)a1 + 17) + 120) = 0;
      *(void *)(*((void *)a1 + 17) + 128) = 0;
      *(void *)(*((void *)a1 + 17) + 136) = 0;
      *(void *)(*((void *)a1 + 17) + 144) = 0;
      *(void *)(*((void *)a1 + 17) + 152) = 0;
      (*(void (**)(AppleBCMWLANCore *))(*(void *)v9 + 88))(v9);
      *(void *)(*((void *)a1 + 17) + 56) = AppleBCMWLANCore::getBus(v9);
      unsigned int v10 = (const OSMetaClassBase *)(*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 17) + 56) + 752))();
      *(void *)(*((void *)a1 + 17) + 64) = OSMetaClassBase::safeMetaCast(v10, (const OSMetaClass *)gAppleBCMWLANBusSkywalkMetaClass);
      *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v24 = v11;
      long long v20 = v11;
      long long v22 = v11;
      long long v21 = v11;
      long long v23 = v11;
      uint64_t v19 = a1;
      uint64_t v12 = *((void *)a1 + 17);
      LOBYTE(v20) = *(unsigned char *)(v12 + 72);
      *(void *)&long long v22 = v12 + 120;
      *((void *)&v22 + 1) = v12 + 128;
      *(void *)&long long v23 = v12 + 136;
      *((void *)&v23 + 1) = v12 + 144;
      *(void *)&long long v24 = v12 + 152;
      *((void *)&v21 + 1) = v12 + 112;
      *((void *)&v20 + 1) = v12 + 160;
      *(void *)&long long v21 = v12 + 80;
      WORD4(v24) = 64;
      uint64_t v25 = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      int v13 = (*(uint64_t (**)(void, IO80211SkywalkInterface **))(**(void **)(*((void *)a1 + 17) + 64)
                                                                          + 56))(*(void *)(*((void *)a1 + 17) + 64), &v19);
      uint64_t v14 = *(void *)a1;
      if (v13)
      {
        uint64_t result = (*(uint64_t (**)(IO80211SkywalkInterface *))(v14 + 1024))(a1);
        if (result)
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            int v15 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            CCLogStream::logAlert(v15, "[dk] %s@%d:%s: ERROR: Failed to register NAN data interface with bus interface\n");
            return 0;
          }
        }
      }
      else
      {
        return (*(uint64_t (**)(IO80211SkywalkInterface *))(v14 + 488))(a1);
      }
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (result)
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          uint64_t v16 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logAlert(v16, "[dk] %s@%d:%s: ERROR: nan skywalk start fail\n");
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANDataInterface::start(AppleBCMWLANNANDataInterface *this, IOService *anObject)
{
  uint64_t v2 = (AppleBCMWLANNANDataInterface *)((char *)this - 48);
  uint64_t v3 = (IOService *)OSMetaClassBase::safeMetaCast(anObject, (const OSMetaClass *)gAppleBCMWLANCoreMetaClass);
  return AppleBCMWLANNANDataInterface::start(v2, v3);
}

uint64_t AppleBCMWLANNANDataInterface::registerInterface(IOUserNetworkEthernet *this)
{
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v18[1] = v2;
  void v18[2] = v2;
  v18[0] = v2;
  if (((unsigned int (*)(IOUserNetworkEthernet *, void *, uint64_t))this->hwConfigNicProxyData)(this, &mediaTable, 2))
  {
    uint64_t result = ((uint64_t (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
    if (result)
    {
      ((void (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        unint64_t v4 = (CCLogStream *)((uint64_t (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
        CCLogStream::logAlert(v4, "[dk] %s@%d:NANDataInterface: media type report fail, ret[0x%08x]\n");
        return 0;
      }
    }
    return result;
  }
  if (!IOUserNetworkEthernet::SetTxPacketHeadroom(this, 0x40u))
  {
    uint64_t v6 = *(void *)&this[2].refcount;
    if (!*(unsigned char *)(v6 + 72)) {
      goto LABEL_19;
    }
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(const void **)(v6 + 8 * v7 + 80);
      *((void *)v18 + v7) = v8;
      if (((uint64_t (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this))
      {
        ((void (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v9 = (CCLogStream *)((uint64_t (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
          CCLogStream::logAlert(v9, "[dk] %s@%d:NANDataInterface: network queue[%u] %p, driver queue %p\n", "registerInterface", 288, v7, v8, *(const void **)(*(void *)&this[2].refcount + 8 * v7 + 80));
        }
      }
      ++v7;
      uint64_t v6 = *(void *)&this[2].refcount;
    }
    while (v7 < *(unsigned __int8 *)(v6 + 72));
    if (*(unsigned char *)(v6 + 72))
    {
      unint64_t v10 = 0;
      do
      {
        (*(void (**)(void))(**(void **)(v6 + 8 * v10 + 80) + 272))(*(void *)(v6 + 8 * v10 + 80));
        *(_DWORD *)(*(void *)&this[2].refcount
                  + 4 * *(unsigned int *)(*(void *)&this[2].refcount + 4 * v10 + 160)
                  + 176) = AppleBCMWLANSkywalkTxSubmissionQueue::getQueueId(*(AppleBCMWLANSkywalkTxSubmissionQueue **)(*(void *)&this[2].refcount + 8 * v10 + 80));
        ++v10;
        uint64_t v6 = *(void *)&this[2].refcount;
      }
      while (v10 < *(unsigned __int8 *)(v6 + 72));
    }
    else
    {
LABEL_19:
      LOBYTE(v10) = 0;
    }
    *((void *)v18 + v10) = *(void *)(v6 + 120);
    *((void *)v18 + (v10 + 1)) = *(void *)(v6 + 128);
    unsigned __int8 v11 = v10 + 2;
    (*(void (**)(void))(**(void **)(v6 + 120) + 200))(*(void *)(v6 + 120));
    (*(void (**)(void))(**(void **)(*(void *)&this[2].refcount + 128) + 208))(*(void *)(*(void *)&this[2].refcount + 128));
    uint64_t v12 = *(void *)(*(void *)&this[2].refcount + 136);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 72))(v12);
    }
    uint64_t v13 = ((uint64_t (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].free)(this);
    int v14 = v11;
    int v15 = ((uint64_t (*)(IOUserNetworkEthernet *, uint64_t, void, _OWORD *, void))this->IOService::OSObject::OSMetaClassBase::__vftable[3].Dispatch)(this, v13 & 0xFFFFFFFFFFFFLL, *(void *)(*(void *)&this[2].refcount + 144), v18, v11);
    if (((uint64_t (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this)
      && (((void (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this),
          CCLogStream::shouldLog()))
    {
      int v17 = (CCLogStream *)((uint64_t (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
      CCLogStream::logAlert(v17, "[dk] %s@%d:NANDataInterface: ret[0x%08x] MAC[%02x:%02x:%02x:%02x:%02x:%02x], pool[%p] queues[%p] numQueue[%2u]", "registerInterface", 310, v15, v13, BYTE1(v13), BYTE2(v13), BYTE3(v13), BYTE4(v13), BYTE5(v13), *(const void **)(*(void *)&this[2].refcount + 144), v18, v14);
      if (v15) {
        goto LABEL_25;
      }
    }
    else if (v15)
    {
LABEL_25:
      uint64_t result = ((uint64_t (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
      if (result)
      {
        ((void (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          uint64_t v16 = (CCLogStream *)((uint64_t (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
          CCLogStream::logAlert(v16, "[dk] %s@%d:%s: FAILED: skywalk NAN data interface registration fail, ret[0x%08x]\n");
          return 0;
        }
      }
      return result;
    }
    IOService::RegisterService(this, 0);
    return 1;
  }
  uint64_t result = ((uint64_t (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
  if (result)
  {
    ((void (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      int v5 = (CCLogStream *)((uint64_t (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
      CCLogStream::logAlert(v5, "[dk] %s@%d:NANDataInterface: set headroom fail fail, ret[0x%08x]\n");
      return 0;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANDataInterface::registerInterface(AppleBCMWLANNANDataInterface *this)
{
  return AppleBCMWLANNANDataInterface::registerInterface((IOUserNetworkEthernet *)((char *)this - 80));
}

uint64_t AppleBCMWLANNANDataInterface::setPromiscuousModeEnable(AppleBCMWLANNANDataInterface *this)
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANDataInterface::setPromiscuousModeEnable(AppleBCMWLANNANDataInterface *this)
{
  return 0;
}

uint64_t AppleBCMWLANNANDataInterface::free(AppleBCMWLANNANDataInterface *this)
{
  uint64_t v2 = *((void *)this + 17);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 48);
    if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
      *(void *)(*((void *)this + 17) + 48) = 0;
      uint64_t v2 = *((void *)this + 17);
    }
    *(void *)(v2 + 192) = 0;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)uint64_t v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    unint64_t v4 = (void *)*((void *)this + 17);
    if (v4)
    {
      IOFree(v4, 0xC8uLL);
      *((void *)this + 17) = 0;
    }
  }
  return IO80211VirtualInterface::free(this);
}

uint64_t non-virtual thunk to'AppleBCMWLANNANDataInterface::free(AppleBCMWLANNANDataInterface *this)
{
  return AppleBCMWLANNANDataInterface::free((AppleBCMWLANNANDataInterface *)((char *)this - 24));
}

uint64_t AppleBCMWLANNANDataInterface::stop(AppleBCMWLANNANDataInterface *this, IOService *a2)
{
  uint64_t WorkQueue = IO80211SkywalkInterface::getWorkQueue(this);
  IOLog("AppleBCMWLANNANDataInterface::stop[%u] stop( %p)\n", 349, a2);
  IO80211SkywalkInterface::validateDispatchQueue(this);
  if ((*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logAlert(v16, "[dk] %s@%d:AppleBCMWLANNANDataInterface Interface Stop\n", "stop", 356);
    }
  }
  uint64_t v5 = *((void *)this + 17);
  if (*(unsigned char *)(v5 + 72))
  {
    uint64_t v6 = 10;
    do
    {
      uint64_t v7 = *(void *)(v5 + 8 * v6);
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v7 + 272))(v7);
        uint64_t v5 = *((void *)this + 17);
        uint64_t v8 = *(void *)(v5 + 8 * v6);
        if (v8)
        {
          (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
          *(void *)(*((void *)this + 17) + 8 * v6) = 0;
          uint64_t v5 = *((void *)this + 17);
        }
      }
      unint64_t v9 = v6 - 9;
      ++v6;
    }
    while (v9 < *(unsigned __int8 *)(v5 + 72));
  }
  uint64_t v10 = *(void *)(v5 + 120);
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 200))(v10);
    uint64_t v5 = *((void *)this + 17);
    uint64_t v11 = *(void *)(v5 + 120);
    if (v11)
    {
      (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
      *(void *)(*((void *)this + 17) + 120) = 0;
      uint64_t v5 = *((void *)this + 17);
    }
  }
  uint64_t v12 = *(void *)(v5 + 128);
  if (v12)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 208))(v12);
    uint64_t v5 = *((void *)this + 17);
    uint64_t v13 = *(void *)(v5 + 128);
    if (v13)
    {
      (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
      *(void *)(*((void *)this + 17) + 128) = 0;
      uint64_t v5 = *((void *)this + 17);
    }
  }
  uint64_t v14 = *(void *)(v5 + 136);
  if (v14)
  {
    (*(void (**)(uint64_t))(*(void *)v14 + 72))(v14);
    (*(void (**)(uint64_t, void))(*(void *)WorkQueue + 72))(WorkQueue, *(void *)(*((void *)this + 17) + 136));
    uint64_t v15 = *(void *)(*((void *)this + 17) + 136);
    if (v15)
    {
      (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
      *(void *)(*((void *)this + 17) + 136) = 0;
    }
  }
  IOLog("AppleBCMWLANNANDataInterface::stop[%u] super::stop( %p) >>\n", 393, a2);
  return IO80211SkywalkInterface::stop(this, a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANNANDataInterface::stop(AppleBCMWLANNANDataInterface *this, IOService *a2)
{
  return AppleBCMWLANNANDataInterface::stop((AppleBCMWLANNANDataInterface *)((char *)this - 48), a2);
}

uint64_t AppleBCMWLANNANDataInterface::resetInterface(AppleBCMWLANNANDataInterface *this)
{
  if (*(unsigned char *)(*((void *)this + 17) + 42))
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
        uint64_t v5 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 160))(this);
        isPoweredOuint64_t n = AppleBCMWLANCore::isPoweredOn(*(AppleBCMWLANCore **)(*((void *)this + 17) + 8));
        CCLogStream::logAlert(v4, "[dk] %s@%d:%s Wifi Driver poweredOn %u \n", "resetInterface", 403, v5, isPoweredOn);
      }
    }
    if (AppleBCMWLANCore::isPoweredOn(*(AppleBCMWLANCore **)(*((void *)this + 17) + 8))) {
      uint64_t v2 = 2;
    }
    else {
      uint64_t v2 = 1;
    }
    (*(void (**)(AppleBCMWLANNANDataInterface *, uint64_t, uint64_t))(*(void *)this + 1352))(this, v2, 1);
  }
  return 0;
}

uint64_t AppleBCMWLANNANDataInterface::reset(AppleBCMWLANNANDataInterface *this)
{
  *(unsigned char *)(*((void *)this + 17) + 42) = 0;
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANDataInterface::reset(AppleBCMWLANNANDataInterface *this)
{
  uint64_t v1 = (AppleBCMWLANNANDataInterface *)((char *)this - 96);
  (*(void (**)(char *))(*((void *)this - 12) + 1176))((char *)this - 96);
  IO80211SkywalkInterface::setInterfaceId(v1, 0xFFFFFFFF);
  *(unsigned char *)(*((void *)v1 + 17) + 42) = 0;
  return 0;
}

uint64_t AppleBCMWLANNANDataInterface::createNANChipInterface(AppleBCMWLANNANDataInterface *this, ether_addr *a2, char a3)
{
  *(unsigned char *)(*((void *)this + 17) + 192) = 1;
  if (AppleBCMWLANCore::isHostAssignedInterfaceIndex(*(AppleBCMWLANCore **)(*((void *)this + 17) + 8)))
  {
    IO80211SkywalkInterface::setInterfaceId(this, 4u);
    AppleBCMWLANCore::setNanDataSkywalkInterface(*(void *)(*((void *)this + 17) + 8), 4u);
    uint64_t v21 = 196636;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    v25[0] = 0;
    v25[1] = 0;
    uint64_t v24 = 0;
    int v26 = 0;
    int v20 = 1835011;
    BYTE4(v2AppleBCMWLANJoinAdapter::free(this - 3) = a3;
    int v6 = *(_DWORD *)a2->octet;
    WORD2(v22) = *(_WORD *)&a2->octet[4];
    HIDWORD(v21) = 10;
    LODWORD(v22) = v6;
    v19[0] = &v24;
    v19[1] = 0x1C001C001CLL;
    uint64_t v7 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 24);
    v18[0] = &v20;
    v18[1] = 28;
    uint64_t v8 = AppleBCMWLANCommander::runIOVarGet(v7, (uint64_t)"interface_create", (uint64_t)v18, (uint64_t)v19, 0);
    uint64_t v9 = (*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
    if (v8)
    {
      if (v9)
      {
        (*(void (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
          uint64_t v11 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *, uint64_t))(*(void *)this
                                                                                                 + 856))(this, v8);
          CCLogStream::logCrit(v10, "[dk] %s@%d:ERROR: Cannot create interface for NAN Data, error %s\n", "createNANChipInterface", 515, v11);
        }
      }
    }
    else
    {
      if (v9)
      {
        (*(void (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
          int v17 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 160))(this);
          CCLogStream::logAlert(v16, "[dk] %s@%d:NAN Data Chip Interface %s Create, Return bssCfgIdx %d, ifIdx %d, ifName %s\n", "createNANChipInterface", 519, v17, BYTE2(v25[0]), BYTE3(v25[0]), (const char *)v25 + 4);
        }
      }
      (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 17) + 64) + 104))(*(void *)(*((void *)this + 17) + 64), 4);
      uint64_t v8 = 0;
      *(unsigned char *)(*((void *)this + 17) + 192) = 0;
    }
  }
  else
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
        int FirmwareInterfaceVersion = AppleBCMWLANCore::getFirmwareInterfaceVersion(*(AppleBCMWLANCore **)(*((void *)this + 17) + 8));
        uint64_t v15 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 160))(this);
        CCLogStream::logAlert(v13, "[dk] %s@%d:ALERT: NAN not supported on this FW version %u, cannot create NAN data interface %s\n", "createNANChipInterface", 523, FirmwareInterfaceVersion, v15);
      }
    }
    *(unsigned char *)(*((void *)this + 17) + 192) = 0;
    return 1;
  }
  return v8;
}

uint64_t AppleBCMWLANNANDataInterface::isChipInterfaceReady(AppleBCMWLANNANDataInterface *this)
{
  return *(unsigned __int8 *)(*((void *)this + 17) + 42);
}

uint64_t non-virtual thunk to'AppleBCMWLANNANDataInterface::isChipInterfaceReady(AppleBCMWLANNANDataInterface *this)
{
  return *(unsigned __int8 *)(*((void *)this + 7) + 42);
}

uint64_t AppleBCMWLANNANDataInterface::setInterfaceEnable(AppleBCMWLANNANDataInterface *this, int a2)
{
  IO80211SkywalkInterface::validateDispatchQueue(this);
  if (IO80211VirtualInterface::setInterfaceEnable(this, a2))
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
        uint64_t v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 160))(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:%s:%d ERROR: NAN data interface %s, enable failed!\n", "setInterfaceEnable", 448, "setInterfaceEnable", 448, v8);
      }
    }
  }
  int v4 = *(unsigned __int8 *)(*((void *)this + 17) + 42);
  uint64_t v5 = (*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
  if (v4)
  {
    if (v5
      && ((*(void (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this),
          CCLogStream::shouldLog()))
    {
      uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
      uint64_t v10 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 160))(this);
      uint64_t v11 = "disable";
      if (a2) {
        uint64_t v11 = "enable";
      }
      CCLogStream::logAlert(v9, "[dk] %s@%d:%s:%d NAN Data interface %s %s\n", "setInterfaceEnable", 456, "setInterfaceEnable", 456, v10, v11);
      if (a2) {
        goto LABEL_9;
      }
    }
    else if (a2)
    {
LABEL_9:
      if (AppleBCMWLANCore::isConcurrencyEnabled(*(AppleBCMWLANCore **)(*((void *)this + 17) + 8))
        && AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(*((void *)this + 17) + 8), 4))
      {
        AppleBCMWLANCore::setSoftAPPowerState(*(void *)(*((void *)this + 17) + 8), 1u, 0xEu);
      }
      uint64_t v6 = (*(uint64_t (**)(AppleBCMWLANNANDataInterface *, uint64_t, uint64_t))(*(void *)this + 128))(this, 3, 128);
      (*(void (**)(AppleBCMWLANNANDataInterface *, void))(*(void *)this + 1248))(this, 0);
      goto LABEL_21;
    }
    uint64_t v6 = (*(uint64_t (**)(AppleBCMWLANNANDataInterface *, uint64_t, uint64_t))(*(void *)this + 128))(this, 1, 130);
    (*(void (**)(AppleBCMWLANNANDataInterface *, void))(*(void *)this + 1256))(this, 0);
LABEL_21:
    AppleBCMWLANCore::setConcurrencyState(*(void **)(*((void *)this + 17) + 8), 16, a2);
    if ((*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
        if (a2) {
          uint64_t v14 = "Enable";
        }
        else {
          uint64_t v14 = "Disable";
        }
        uint64_t v15 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 160))(this);
        CCLogStream::logAlert(v13, "[dk] %s@%d:%s: %s on interface %s, ret=0x%08x\n", "setInterfaceEnable", 482, "virtual IOReturn AppleBCMWLANNANDataInterface::setInterfaceEnable(BOOL)", v14, v15, v6);
      }
    }
    return v6;
  }
  if (v5)
  {
    (*(void (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
      int v17 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 160))(this);
      CCLogStream::logAlert(v16, "[dk] %s@%d:%s: NAN data interface %s not up yet, not enabling queues\n", "setInterfaceEnable", 452, "setInterfaceEnable", v17);
    }
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANDataInterface::setInterfaceEnable(AppleBCMWLANNANDataInterface *this, int a2)
{
  return AppleBCMWLANNANDataInterface::setInterfaceEnable((AppleBCMWLANNANDataInterface *)((char *)this - 48), a2);
}

uint64_t AppleBCMWLANNANDataInterface::bringupLink(AppleBCMWLANNANDataInterface *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v3 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
      int v4 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 160))(this);
      isPoweredOuint64_t n = AppleBCMWLANCore::isPoweredOn(*(AppleBCMWLANCore **)(*((void *)this + 17) + 8));
      CCLogStream::logAlert(v3, "[dk] %s@%d:Bringing up %s NAN data link, powerON %u\n", "bringupLink", 570, v4, isPoweredOn);
    }
  }
  if (AppleBCMWLANCore::isPoweredOn(*(AppleBCMWLANCore **)(*((void *)this + 17) + 8))) {
    (*(void (**)(AppleBCMWLANNANDataInterface *, uint64_t, uint64_t))(*(void *)this + 1352))(this, 2, 1);
  }
  return 0;
}

uint64_t AppleBCMWLANNANDataInterface::bringdownLink(AppleBCMWLANNANDataInterface *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v3 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
      int v4 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 160))(this);
      CCLogStream::logAlert(v3, "[dk] %s@%d:Bringing down %s NAN Data link\n", "bringdownLink", 582, v4);
    }
  }
  unint64_t v5 = 0xAAAAAAAAAAAAAA00;
  IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)this + 17) + 8), this, 0x80u, &v5, 8uLL, 1);
  (*(void (**)(AppleBCMWLANNANDataInterface *, uint64_t, uint64_t))(*(void *)this + 1352))(this, 1, 1);
  return 0;
}

uint64_t AppleBCMWLANNANDataInterface::setNAN_INIT(AppleBCMWLANNANDataInterface *a1)
{
  uint64_t v2 = (*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)a1 + 1008))(a1);
  *(_DWORD *)v8.octet = v2;
  *(_WORD *)&v8.octet[4] = WORD2(v2);
  uint64_t v3 = AppleBCMWLANNANDataInterface::createNANChipInterface(a1, &v8, 4);
  uint64_t v4 = *(void *)a1;
  if (v3)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(v4 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANDataInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        unint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v6 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)a1 + 160))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Creating NAN interface %s failed, ret %d\n", "setNAN_INIT", 599, v6, v3);
      }
    }
  }
  else
  {
    (*(void (**)(AppleBCMWLANNANDataInterface *, uint64_t))(v4 + 1544))(a1, 1);
    *(unsigned char *)(*((void *)a1 + 17) + 42) = 1;
  }
  return v3;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANDataInterface::setNAN_INIT(uint64_t a1)
{
  return AppleBCMWLANNANDataInterface::setNAN_INIT((AppleBCMWLANNANDataInterface *)(a1 - 112));
}

{
  return AppleBCMWLANNANDataInterface::setNAN_INIT((AppleBCMWLANNANDataInterface *)(a1 - 128));
}

uint64_t AppleBCMWLANNANDataInterface::setCOMPANION_SKYWALK_IF_CREATE(IO80211SkywalkInterface *a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 4);
  if (v3)
  {
    if (v3 == 1)
    {
      if (*(void *)(*((void *)a1 + 17) + 48))
      {
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            int v20 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            uint64_t v21 = (const char *)(*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 17) + 48) + 160))(*(void *)(*((void *)a1 + 17) + 48));
            uint64_t v22 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 160))(a1);
            CCLogStream::logAlert(v20, "[dk] %s@%d:ALERT: NAN companion skywalk interface %s already exists for %s\n", "setCOMPANION_SKYWALK_IF_CREATE", 614, v21, v22);
          }
        }
        unint64_t v5 = (const char *)(*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 17) + 48) + 160))(*(void *)(*((void *)a1 + 17) + 48));
        snprintf((char *)(a2 + 8), 0x10uLL, "%s", v5);
      }
      else
      {
        uint64_t v26 = 0;
        long long v27 = 0uLL;
        unint64_t v11 = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1008))(a1);
        LOBYTE(v26) = v11;
        v12.i64[0] = 0xFFFFFFFFFFFFLL;
        v12.i64[1] = 0xFFFFFFFFFFFFLL;
        uint64x2_t v13 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v11), v12);
        int16x8_t v14 = (int16x8_t)vshlq_u64(v13, (uint64x2_t)xmmword_100304950);
        *(int32x2_t *)v13.i8 = vmovn_s64((int64x2_t)vshlq_u64(v13, (uint64x2_t)xmmword_100304960));
        *(int32x2_t *)v14.i8 = vmovn_s64((int64x2_t)v14);
        v14.i16[1] = v14.i16[2];
        v14.i16[2] = v13.i16[0];
        v14.i16[3] = v13.i16[2];
        *(_DWORD *)((char *)&v26 + 1) = vmovn_s16(v14).u32[0];
        BYTE5(v26) = BYTE5(v11);
        uint64_t v25 = "llw";
        *(void *)&long long v27 = IO80211SkywalkInterface::getInterfaceId(a1);
        *(void *)((char *)&v27 + 4) = 0x200000002;
        uint64_t SkywalkInterface = AppleBCMWLANCore::createSkywalkInterface(*(IOService **)(*((void *)a1 + 17) + 8), (IOService **)(*((void *)a1 + 17) + 48), (uint64_t)&v25, a1);
        if (SkywalkInterface) {
          return SkywalkInterface;
        }
        AppleBCMWLANSkywalkInterface::setInterfaceUnitNumber(*(AppleBCMWLANSkywalkInterface **)(*((void *)a1 + 17) + 48), SDWORD1(v27));
        *(_DWORD *)(a2 + 8) = 7826540;
        uint64_t v17 = a2 + 8;
        snprintf((char *)(v17 + 3), 0xDuLL, "%d", DWORD1(v27));
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            int v18 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            uint64_t v19 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 160))(a1);
            CCLogStream::logAlert(v18, "[dk] %s@%d:Created NAN %s companion low latency skywalk interface %s\n", "setCOMPANION_SKYWALK_IF_CREATE", 639, v19, (const char *)v17);
          }
        }
      }
    }
    return 0;
  }
  else
  {
    uint64_t v7 = *((void *)a1 + 17);
    ether_addr v8 = *(IO80211SkywalkInterface **)(v7 + 48);
    if (v8)
    {
      uint64_t v9 = *(AppleBCMWLANCore **)(v7 + 8);
      unsigned int InterfaceId = IO80211SkywalkInterface::getInterfaceId(v8);
      AppleBCMWLANCore::destroySkywalkInterface(v9, InterfaceId);
      uint64_t v6 = 0;
      *(void *)(*((void *)a1 + 17) + 48) = 0;
    }
    else
    {
      uint64_t v6 = 3758097088;
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v23 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          uint64_t v24 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 160))(a1);
          CCLogStream::logAlert(v23, "[dk] %s@%d:ERROR: Deletion failed, NAN companion skywalk interface does not exists for %s\n", "setCOMPANION_SKYWALK_IF_CREATE", 642, v24);
        }
      }
    }
  }
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANDataInterface::setCOMPANION_SKYWALK_IF_CREATE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANNANDataInterface::setCOMPANION_SKYWALK_IF_CREATE((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANDataInterface::setCOMPANION_SKYWALK_IF_CREATE((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANDataInterface::handleEvent(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4) == 54)
  {
    int v3 = (IO80211SkywalkInterface *)result;
    uint64_t result = AppleBCMWLANCore::isHostAssignedInterfaceIndex(*(AppleBCMWLANCore **)(*(void *)(result + 136) + 8));
    if (result)
    {
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
        if (CCLogStream::shouldLog())
        {
          unint64_t v5 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
          uint64_t v6 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 160))(v3);
          CCLogStream::logAlert(v5, "[dk] %s@%d:NAN Data %s interface index is now: %u (bsscfg=%u), role %d, opcode %d\n", "handleEvent", 663, v6, *(unsigned __int8 *)(a2 + 48), *(unsigned __int8 *)(a2 + 51), *(unsigned __int8 *)(a2 + 52), *(unsigned __int8 *)(a2 + 49));
        }
      }
      int v4 = *(unsigned __int8 *)(a2 + 48);
      uint64_t result = IO80211SkywalkInterface::getInterfaceId(v3);
      if (result == v4) {
        **((_DWORD **)v3 + 17) = *(unsigned __int8 *)(a2 + 51);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANNANDataInterface::setMacAddress(AppleBCMWLANNANDataInterface *this, ether_addr *a2)
{
  uint64_t v4 = 3758097122;
  IO80211SkywalkInterface::validateDispatchQueue(this);
  uint64_t v5 = *((void *)this + 17);
  uint64_t v6 = *(AppleBCMWLANNANInterface **)(v5 + 16);
  if (v6)
  {
    if (AppleBCMWLANNANInterface::nanIsEnabled(v6)) {
      return 3758097109;
    }
    uint64_t v5 = *((void *)this + 17);
  }
  if (*(unsigned char *)(v5 + 192)) {
    return 3758097109;
  }
  BOOL isNANInitialized = AppleBCMWLANNANInterface::isNANInitialized(*(AppleBCMWLANNANInterface **)(v5 + 16));
  uint64_t v9 = *(void *)this;
  if (isNANInitialized)
  {
    if ((*(unsigned int (**)(AppleBCMWLANNANDataInterface *))(v9 + 608))(this)
      && (uint64_t v10 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 24),
          unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this),
          v15[0] = a2,
          v15[1] = 6,
          uint64_t v12 = AppleBCMWLANCommander::runVirtualIOVarSet(v10, InterfaceId, "cur_etheraddr", (uint64_t)v15, 0, 0),
          v12))
    {
      uint64_t v4 = v12;
      if ((*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          uint64x2_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
          (*(void (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 160))(this);
          (*(void (**)(AppleBCMWLANNANDataInterface *, uint64_t))(*(void *)this + 856))(this, v4);
          CCLogStream::logAlert(v13, "[dk] %s@%d:ERROR: cur_etheraddr failed for %s, error %s\n");
        }
      }
    }
    else
    {
      (*(void (**)(AppleBCMWLANNANDataInterface *, uint64_t, uint64_t))(*(void *)this + 128))(this, 2147483651, 128);
      return 0;
    }
  }
  else if ((*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(v9 + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      int16x8_t v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
      (*(void (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 160))(this);
      CCLogStream::logAlert(v14, "[dk] %s@%d:ERROR: Cannot set MAC address on %s NDI when NMI is not initialized\n");
    }
  }
  return v4;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANDataInterface::setMacAddress(AppleBCMWLANNANDataInterface *this, ether_addr *a2)
{
  return AppleBCMWLANNANDataInterface::setMacAddress((AppleBCMWLANNANDataInterface *)((char *)this - 80), a2);
}

uint64_t AppleBCMWLANNANDataInterface::getLogger(AppleBCMWLANNANDataInterface *this)
{
  return *(void *)(*((void *)this + 17) + 32);
}

uint64_t non-virtual thunk to'AppleBCMWLANNANDataInterface::getLogger(AppleBCMWLANNANDataInterface *this)
{
  return *(void *)(*((void *)this + 7) + 32);
}

uint64_t AppleBCMWLANNANDataInterface::setRunningState(AppleBCMWLANNANDataInterface *this)
{
  return 3758097084;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANDataInterface::setRunningState(AppleBCMWLANNANDataInterface *this)
{
  return 3758097084;
}

uint64_t AppleBCMWLANNANDataInterface::enableDatapath(AppleBCMWLANNANDataInterface *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 17) + 120);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 192))(v2);
    uint64_t v3 = *(void *)(*((void *)this + 17) + 128);
    if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 200))(v3);
      uint64_t v4 = *((void *)this + 17);
      if (!*(unsigned char *)(v4 + 72))
      {
LABEL_7:
        uint64_t v7 = (*(uint64_t (**)(void, void, void))(**(void **)(v4 + 128) + 120))(*(void *)(v4 + 128), 0, 0);
        if (v7)
        {
          if ((*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this))
          {
            (*(void (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
              CCLogStream::logInfo(v12, "[dk] %s@%d:skywalk rx completion queue enqueue fail with return %d\n", "enableDatapath", 800, v7);
            }
          }
          return 0;
        }
        return v7;
      }
      unint64_t v5 = 0;
      while (1)
      {
        uint64_t v6 = *(void *)(v4 + 8 * v5 + 80);
        if (!v6) {
          break;
        }
        (*(void (**)(uint64_t))(*(void *)v6 + 256))(v6);
        ++v5;
        uint64_t v4 = *((void *)this + 17);
        if (v5 >= *(unsigned __int8 *)(v4 + 72)) {
          goto LABEL_7;
        }
      }
      if ((*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          uint64x2_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
          CCLogStream::logCrit(v13, "[dk] %s@%d:tx submission queue ac %d not valid\n");
        }
      }
    }
    else if ((*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logCrit(v11, "[dk] %s@%d:rx completion queue not valid\n");
      }
    }
  }
  else if ((*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logCrit(v10, "[dk] %s@%d:tx completion queue not valid\n");
    }
  }
  uint64_t v7 = 3758097084;
  if ((*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logCrit(v9, "[dk] %s@%d:skywalk data path enable fail\n", "enableDatapath", 806);
    }
  }
  return v7;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANDataInterface::enableDatapath(AppleBCMWLANNANDataInterface *this)
{
  return AppleBCMWLANNANDataInterface::enableDatapath((AppleBCMWLANNANDataInterface *)((char *)this - 80));
}

uint64_t AppleBCMWLANNANDataInterface::enable(AppleBCMWLANNANDataInterface *this, unsigned int a2)
{
  if ((*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
      uint64_t v10 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 160))(this);
      isPoweredOuint64_t n = AppleBCMWLANCore::isPoweredOn(*(AppleBCMWLANCore **)(*((void *)this + 17) + 8));
      CCLogStream::logAlert(v9, "[dk] %s@%d:%s: enabling NAN data interface %s, pwr %d\n", "enable", 816, "virtual IOReturn AppleBCMWLANNANDataInterface::enable(IOOptionBits)", v10, isPoweredOn);
    }
  }
  IO80211SkywalkInterface::enable(this, a2);
  if (AppleBCMWLANCore::isPoweredOn(*(AppleBCMWLANCore **)(*((void *)this + 17) + 8))
    && (AppleBCMWLANCore::isWatchdogRunning(*(AppleBCMWLANCore **)(*((void *)this + 17) + 8)) & 1) == 0)
  {
    (*(void (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1168))(this);
  }
  else if ((*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
      unint64_t v5 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 160))(this);
      BOOL v6 = AppleBCMWLANCore::isPoweredOn(*(AppleBCMWLANCore **)(*((void *)this + 17) + 8));
      int isWatchdogRunning = AppleBCMWLANCore::isWatchdogRunning(*(AppleBCMWLANCore **)(*((void *)this + 17) + 8));
      CCLogStream::logAlert(v4, "[dk] %s@%d:%s data path cannot enable, power state %d, watchdog status %d\n", "enable", 833, v5, v6, isWatchdogRunning);
    }
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANDataInterface::enable(AppleBCMWLANNANDataInterface *this, unsigned int a2)
{
  return 0;
}

uint64_t AppleBCMWLANNANDataInterface::disableDatapath(AppleBCMWLANNANDataInterface *this)
{
  uint64_t v2 = *((void *)this + 17);
  if (*(unsigned char *)(v2 + 72))
  {
    unint64_t v3 = 0;
    while (1)
    {
      uint64_t v4 = *(void *)(v2 + 8 * v3 + 80);
      if (!v4) {
        break;
      }
      (*(void (**)(uint64_t))(*(void *)v4 + 272))(v4);
      ++v3;
      uint64_t v2 = *((void *)this + 17);
      if (v3 >= *(unsigned __int8 *)(v2 + 72)) {
        goto LABEL_5;
      }
    }
    if ((*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        int16x8_t v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logCrit(v14, "[dk] %s@%d:tx submission queue ac %d not valid\n");
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t v5 = *(void *)(v2 + 136);
    if (v5)
    {
      (*(void (**)(uint64_t))(*(void *)v5 + 72))(v5);
      uint64_t v2 = *((void *)this + 17);
    }
    uint64_t v6 = *(void *)(v2 + 128);
    if (v6)
    {
      (*(void (**)(uint64_t))(*(void *)v6 + 208))(v6);
      uint64_t v7 = *(void *)(*((void *)this + 17) + 120);
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v7 + 200))(v7);
        return 0;
      }
      if ((*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          uint64x2_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
          CCLogStream::logCrit(v13, "[dk] %s@%d:tx completion queue not valid\n");
        }
      }
    }
    else if ((*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logCrit(v12, "[dk] %s@%d:rx completion queue not valid\n");
      }
    }
  }
  uint64_t v8 = 3758097084;
  if ((*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
      unint64_t v11 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 160))(this);
      CCLogStream::logCrit(v10, "[dk] %s@%d:%s: skywalk data path disable fail\n", "disableDatapath", 865, v11);
    }
  }
  return v8;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANDataInterface::disableDatapath(AppleBCMWLANNANDataInterface *this)
{
  return AppleBCMWLANNANDataInterface::disableDatapath((AppleBCMWLANNANDataInterface *)((char *)this - 80));
}

uint64_t AppleBCMWLANNANDataInterface::disable(AppleBCMWLANNANDataInterface *this, unsigned int a2)
{
  if ((*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1024))(this);
      uint64_t v6 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 160))(this);
      CCLogStream::logAlert(v5, "[dk] %s@%d:%s: Interface %s disable\n", "disable", 872, "virtual void AppleBCMWLANNANDataInterface::disable(IOOptionBits)", v6);
    }
  }
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1000))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANNANDataInterface *))(*(void *)this + 1176))(this);
    return IO80211SkywalkInterface::disable(this, a2);
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANDataInterface::disable(AppleBCMWLANNANDataInterface *this, unsigned int a2)
{
  return AppleBCMWLANNANDataInterface::disable((AppleBCMWLANNANDataInterface *)((char *)this - 80), a2);
}

uint64_t AppleBCMWLANNANDataInterface::getTxSubQueue(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 136);
  uint64_t v3 = *(unsigned int *)(v2 + 4 * a2 + 176);
  if (v3 >= *(unsigned __int8 *)(v2 + 72)) {
    return 0;
  }
  else {
    return *(void *)(v2 + 8 * v3 + 80);
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANNANDataInterface::getTxSubQueue(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(unsigned int *)(v2 + 4 * a2 + 176);
  if (v3 >= *(unsigned __int8 *)(v2 + 72)) {
    return 0;
  }
  else {
    return *(void *)(v2 + 8 * v3 + 80);
  }
}

uint64_t AppleBCMWLANNANDataInterface::getTxPacketPool(AppleBCMWLANNANDataInterface *this)
{
  return *(void *)(*((void *)this + 17) + 144);
}

uint64_t non-virtual thunk to'AppleBCMWLANNANDataInterface::getTxPacketPool(AppleBCMWLANNANDataInterface *this)
{
  return *(void *)(*((void *)this + 7) + 144);
}

uint64_t AppleBCMWLANNANDataInterface::getTxCompQueue(AppleBCMWLANNANDataInterface *this)
{
  return *(void *)(*((void *)this + 17) + 120);
}

uint64_t non-virtual thunk to'AppleBCMWLANNANDataInterface::getTxCompQueue(AppleBCMWLANNANDataInterface *this)
{
  return *(void *)(*((void *)this + 7) + 120);
}

uint64_t AppleBCMWLANNANDataInterface::getRxCompQueue(AppleBCMWLANNANDataInterface *this)
{
  return *(void *)(*((void *)this + 17) + 128);
}

uint64_t non-virtual thunk to'AppleBCMWLANNANDataInterface::getRxCompQueue(AppleBCMWLANNANDataInterface *this)
{
  return *(void *)(*((void *)this + 7) + 128);
}

uint64_t AppleBCMWLANNANDataInterface::dupAndTransmitMcastPacket(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 136) + 80) + 192))();
}

uint64_t non-virtual thunk to'AppleBCMWLANNANDataInterface::dupAndTransmitMcastPacket(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 40) + 80) + 192))();
}

uint64_t AppleBCMWLANNANDataInterface::freeMulticastPacket(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 136) + 80) + 200))();
}

uint64_t non-virtual thunk to'AppleBCMWLANNANDataInterface::freeMulticastPacket(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 40) + 80) + 200))();
}

uint64_t AppleBCMWLANNANDataInterface::updateRxCounter(AppleBCMWLANNANDataInterface *this, uint64_t a2)
{
  return AppleBCMWLANCore::updateWmeRxCountersNDIRxCounter(*(void *)(*((void *)this + 17) + 8), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANNANDataInterface::updateRxCounter(AppleBCMWLANNANDataInterface *this, uint64_t a2)
{
  return AppleBCMWLANCore::updateWmeRxCountersNDIRxCounter(*(void *)(*((void *)this + 7) + 8), a2);
}

void _GLOBAL__sub_I_AppleBCMWLANNANDataInterface_cpp()
{
  kNullRange = 0;
}

const char *AppleBCMWLANNANInterface::getBSDNamePrefix(AppleBCMWLANNANInterface *this)
{
  return "nan";
}

const char *non-virtual thunk to'AppleBCMWLANNANInterface::getBSDNamePrefix(AppleBCMWLANNANInterface *this)
{
  return "nan";
}

uint64_t AppleBCMWLANNANInterface::init(AppleBCMWLANNANInterface *this)
{
  uint64_t result = IO80211SkywalkInterface::init(this);
  if (result)
  {
    uint64_t v3 = IOMallocZeroTyped();
    *((void *)this + 17) = v3;
    if (v3)
    {
      return 1;
    }
    else
    {
      IOLog("ERROR: nan interface ivars alloc fail\n");
      return 0;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::init(AppleBCMWLANNANInterface *this)
{
  return AppleBCMWLANNANInterface::init((AppleBCMWLANNANInterface *)((char *)this - 24));
}

uint64_t AppleBCMWLANNANInterface::init(AppleBCMWLANNANInterface *this, AppleBCMWLANCore *a2, ether_addr *a3, unsigned int a4, char *a5)
{
  uint64_t v10 = IO80211VirtualInterface::init(this, a2, a3, a4, a5);
  if (v10)
  {
    if (AppleBCMWLANCore::isHostAssignedInterfaceIndex(a2))
    {
      IO80211SkywalkInterface::setInterfaceId(this, 3u);
      AppleBCMWLANCore::setNanMgtSkywalkInterface((uint64_t)a2, 3u);
    }
    else
    {
      IO80211SkywalkInterface::setInterfaceId(this, 0xFFFFFFFF);
    }
    IO80211SkywalkInterface::setInterfaceRole(this, a4);
    *(void *)(*((void *)this + 17) + 64) = a2;
    *(void *)(*((void *)this + 17) + 72) = AppleBCMWLANCore::getCommander(a2);
    *(void *)(*((void *)this + 17) + 80) = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        int InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
        int InterfaceRole = IO80211SkywalkInterface::getInterfaceRole(this);
        CCLogStream::logAlert(v12, "[dk] %s@%d:%s: Initializing NAN interface %s, ifId %d, role %d, addr %02x:%02x:%02x:%02x:%02x:%02x\n", "init", 201, "virtual BOOL AppleBCMWLANNANInterface::init(AppleBCMWLANCore *, struct ether_addr *, uint32_t, char *)", a5, InterfaceId, InterfaceRole, a3->octet[0], a3->octet[1], a3->octet[2], a3->octet[3], a3->octet[4], a3->octet[5]);
      }
    }
    *(unsigned char *)(*((void *)this + 17) + 42) = 80;
    *(unsigned char *)(*((void *)this + 17) + 4AppleBCMWLANJoinAdapter::free(this - 3) = 111;
    *(unsigned char *)(*((void *)this + 17) + 44) = -102;
    *(unsigned char *)(*((void *)this + 17) + 45) = 1;
    *(unsigned char *)(*((void *)this + 17) + 46) = 0;
    *(unsigned char *)(*((void *)this + 17) + 47) = 0;
    *(unsigned char *)(*((void *)this + 17) + 5) = 6;
    *(unsigned char *)(*((void *)this + 17) + 6) = 0;
    *(unsigned char *)(*((void *)this + 17) + 128) = 4;
    *(_DWORD *)(*((void *)this + 17) + 216) = 0;
    *(_DWORD *)(*((void *)this + 17) + 220) = 1;
    *(_DWORD *)(*((void *)this + 17) + 224) = 2;
    *(_DWORD *)(*((void *)this + 17) + 228) = 3;
  }
  return v10;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::init(AppleBCMWLANNANInterface *this, AppleBCMWLANCore *a2, ether_addr *a3, unsigned int a4, char *a5)
{
  return AppleBCMWLANNANInterface::init((AppleBCMWLANNANInterface *)((char *)this - 128), a2, a3, a4, a5);
}

uint64_t AppleBCMWLANNANInterface::start(AppleBCMWLANNANInterface *this, IOService *anObject)
{
  uint64_t v3 = (IOService *)OSMetaClassBase::safeMetaCast(anObject, (const OSMetaClass *)gAppleBCMWLANCoreMetaClass);
  return AppleBCMWLANNANInterface::start(this, v3);
}

uint64_t AppleBCMWLANNANInterface::start(IO80211SkywalkInterface *a1, IOService *a2)
{
  __int16 v32 = 0;
  int v31 = 0;
  if (a2 && (uint64_t v4 = a2[1].OSObject::OSObjectInterface::__vftable, LOBYTE(v4[2214].free)) && LODWORD(v4[2215].init) == 9)
  {
    p_free = &v4[2214].free;
    int v31 = *((_DWORD *)p_free + 6);
    __int16 v32 = *((_WORD *)p_free + 14);
    int v6 = v31;
    int v7 = BYTE1(v31);
    int v8 = BYTE2(v31);
    int v9 = HIBYTE(v31);
    int v10 = v32;
    int v11 = HIBYTE(v32);
  }
  else
  {
    IOLog("%s: ERROR: NAN interface parameters invalid\n", "BOOL AppleBCMWLANNANInterface::start(AppleBCMWLANCore *, RegistrationInfo *)");
    int v11 = 0;
    int v10 = 0;
    int v9 = 0;
    int v8 = 0;
    int v7 = 0;
    int v6 = 0;
  }
  IOLog("%s: Initializing NAN interface parameters %02x:%02x:%02x:%02x:%02x:%02x\n", "BOOL AppleBCMWLANNANInterface::start(AppleBCMWLANCore *, RegistrationInfo *)", v6, v7, v8, v9, v10, v11);
  uint64_t v12 = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 312))(a1);
  uint64_t result = (*(uint64_t (**)(IO80211SkywalkInterface *, IOService *, int *, uint64_t, uint64_t))(*(void *)a1 + 1512))(a1, a2, &v31, 9, v12);
  if (result)
  {
    int16x8_t v14 = &a2[1].OSObject::OSObjectInterface::__vftable[2214].free;
    *(_OWORD *)int16x8_t v14 = 0u;
    *((_OWORD *)v14 + 1) = 0u;
    if (IO80211VirtualInterface::start(a1, a2))
    {
      if (IO80211SkywalkInterface::getLogger(a1)) {
        *(void *)(*((void *)a1 + 17) + 80) = IO80211SkywalkInterface::getLogger(a1);
      }
      uint64_t v15 = *((void *)a1 + 17);
      uint64_t v16 = *(AppleBCMWLANCore **)(v15 + 64);
      *(void *)(v15 + 176) = 0;
      *(void *)(*((void *)a1 + 17) + 184) = 0;
      *(void *)(*((void *)a1 + 17) + 192) = 0;
      *(void *)(*((void *)a1 + 17) + 200) = 0;
      *(void *)(*((void *)a1 + 17) + 208) = 0;
      (*(void (**)(AppleBCMWLANCore *))(*(void *)v16 + 88))(v16);
      *(void *)(*((void *)a1 + 17) + 112) = AppleBCMWLANCore::getBus(v16);
      uint64_t v17 = (const OSMetaClassBase *)(*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 17) + 112) + 752))();
      *(void *)(*((void *)a1 + 17) + 120) = OSMetaClassBase::safeMetaCast(v17, (const OSMetaClass *)gAppleBCMWLANBusSkywalkMetaClass);
      *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v25 = v18;
      long long v27 = v18;
      long long v26 = v18;
      long long v28 = v18;
      long long v29 = v18;
      uint64_t v24 = a1;
      uint64_t v19 = *((void *)a1 + 17);
      LOBYTE(v25) = *(unsigned char *)(v19 + 128);
      *(void *)&long long v27 = v19 + 176;
      *((void *)&v27 + 1) = v19 + 184;
      *(void *)&long long v28 = v19 + 192;
      *((void *)&v28 + 1) = v19 + 200;
      *(void *)&long long v29 = v19 + 208;
      *((void *)&v26 + 1) = v19 + 168;
      *((void *)&v25 + 1) = v19 + 216;
      *(void *)&long long v26 = v19 + 136;
      WORD4(v29) = 64;
      uint64_t v30 = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      int v20 = (*(uint64_t (**)(void, IO80211SkywalkInterface **))(**(void **)(*((void *)a1 + 17) + 120)
                                                                          + 56))(*(void *)(*((void *)a1 + 17) + 120), &v24);
      uint64_t v21 = *(void *)a1;
      if (v20)
      {
        uint64_t result = (*(uint64_t (**)(IO80211SkywalkInterface *))(v21 + 1024))(a1);
        if (result)
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            uint64_t v22 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            CCLogStream::logAlert(v22, "[dk] %s@%d:%s: ERROR: Failed to register NAN interface with bus interface\n");
            return 0;
          }
        }
      }
      else
      {
        return (*(uint64_t (**)(IO80211SkywalkInterface *))(v21 + 488))(a1);
      }
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (result)
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          uint64_t v23 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logAlert(v23, "[dk] %s@%d:%s: ERROR: nan skywalk start fail\n");
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::start(AppleBCMWLANNANInterface *this, IOService *anObject)
{
  uint64_t v2 = (AppleBCMWLANNANInterface *)((char *)this - 48);
  uint64_t v3 = (IOService *)OSMetaClassBase::safeMetaCast(anObject, (const OSMetaClass *)gAppleBCMWLANCoreMetaClass);
  return AppleBCMWLANNANInterface::start(v2, v3);
}

uint64_t AppleBCMWLANNANInterface::registerInterface(IOUserNetworkEthernet *this)
{
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v18[1] = v2;
  void v18[2] = v2;
  v18[0] = v2;
  if (((unsigned int (*)(IOUserNetworkEthernet *, void *, uint64_t))this->hwConfigNicProxyData)(this, &mediaTable, 2))
  {
    uint64_t result = ((uint64_t (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
    if (result)
    {
      ((void (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v4 = (CCLogStream *)((uint64_t (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
        CCLogStream::logAlert(v4, "[dk] %s@%d:%s: NANInterface: media type report fail, ret[0x%08x]\n");
        return 0;
      }
    }
    return result;
  }
  if (!IOUserNetworkEthernet::SetTxPacketHeadroom(this, 0x40u))
  {
    uint64_t v6 = *(void *)&this[2].refcount;
    if (!*(unsigned char *)(v6 + 128)) {
      goto LABEL_19;
    }
    unint64_t v7 = 0;
    do
    {
      int v8 = *(const void **)(v6 + 8 * v7 + 136);
      *((void *)v18 + v7) = v8;
      if (((uint64_t (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this))
      {
        ((void (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
        if (CCLogStream::shouldLog())
        {
          int v9 = (CCLogStream *)((uint64_t (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
          CCLogStream::logAlert(v9, "[dk] %s@%d:NANInterface: network queue[%u] %p, driver queue %p\n", "registerInterface", 370, v7, v8, *(const void **)(*(void *)&this[2].refcount + 8 * v7 + 136));
        }
      }
      ++v7;
      uint64_t v6 = *(void *)&this[2].refcount;
    }
    while (v7 < *(unsigned __int8 *)(v6 + 128));
    if (*(unsigned char *)(v6 + 128))
    {
      unint64_t v10 = 0;
      do
      {
        (*(void (**)(void))(**(void **)(v6 + 8 * v10 + 136) + 272))(*(void *)(v6 + 8 * v10 + 136));
        *(_DWORD *)(*(void *)&this[2].refcount
                  + 4 * *(unsigned int *)(*(void *)&this[2].refcount + 4 * v10 + 216)
                  + 232) = AppleBCMWLANSkywalkTxSubmissionQueue::getQueueId(*(AppleBCMWLANSkywalkTxSubmissionQueue **)(*(void *)&this[2].refcount + 8 * v10 + 136));
        ++v10;
        uint64_t v6 = *(void *)&this[2].refcount;
      }
      while (v10 < *(unsigned __int8 *)(v6 + 128));
    }
    else
    {
LABEL_19:
      LOBYTE(v10) = 0;
    }
    *((void *)v18 + v10) = *(void *)(v6 + 176);
    *((void *)v18 + (v10 + 1)) = *(void *)(v6 + 184);
    unsigned __int8 v11 = v10 + 2;
    (*(void (**)(void))(**(void **)(v6 + 176) + 200))(*(void *)(v6 + 176));
    (*(void (**)(void))(**(void **)(*(void *)&this[2].refcount + 184) + 208))(*(void *)(*(void *)&this[2].refcount + 184));
    uint64_t v12 = *(void *)(*(void *)&this[2].refcount + 192);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 72))(v12);
    }
    uint64_t v13 = ((uint64_t (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].free)(this);
    int v14 = v11;
    int v15 = ((uint64_t (*)(IOUserNetworkEthernet *, uint64_t, void, _OWORD *, void))this->IOService::OSObject::OSMetaClassBase::__vftable[3].Dispatch)(this, v13 & 0xFFFFFFFFFFFFLL, *(void *)(*(void *)&this[2].refcount + 200), v18, v11);
    if (((uint64_t (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this)
      && (((void (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this),
          CCLogStream::shouldLog()))
    {
      uint64_t v17 = (CCLogStream *)((uint64_t (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
      CCLogStream::logAlert(v17, "[dk] %s@%d:NANInterface: ret[0x%08x] MAC[%02x:%02x:%02x:%02x:%02x:%02x], pool[%p] queues[%p] numQueue[%2u]", "registerInterface", 392, v15, v13, BYTE1(v13), BYTE2(v13), BYTE3(v13), BYTE4(v13), BYTE5(v13), *(const void **)(*(void *)&this[2].refcount + 200), v18, v14);
      if (v15) {
        goto LABEL_25;
      }
    }
    else if (v15)
    {
LABEL_25:
      uint64_t result = ((uint64_t (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
      if (result)
      {
        ((void (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          uint64_t v16 = (CCLogStream *)((uint64_t (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
          CCLogStream::logAlert(v16, "[dk] %s@%d:%s: FAILED: skywalk NAN interface registration fail, ret[0x%08x]\n");
          return 0;
        }
      }
      return result;
    }
    IOService::RegisterService(this, 0);
    return 1;
  }
  uint64_t result = ((uint64_t (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
  if (result)
  {
    ((void (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v5 = (CCLogStream *)((uint64_t (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
      CCLogStream::logAlert(v5, "[dk] %s@%d:%s: NANInterface: set headroom fail, ret[0x%08x]\n");
      return 0;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::registerInterface(AppleBCMWLANNANInterface *this)
{
  return AppleBCMWLANNANInterface::registerInterface((IOUserNetworkEthernet *)((char *)this - 80));
}

uint64_t AppleBCMWLANNANInterface::free(AppleBCMWLANNANInterface *this)
{
  uint64_t v2 = *((void *)this + 17);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 96);
    if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
      *(void *)(*((void *)this + 17) + 96) = 0;
      uint64_t v2 = *((void *)this + 17);
    }
    *(void *)(v2 + 240) = 0;
    *(_OWORD *)(v2 + 208) = 0u;
    *(_OWORD *)(v2 + 224) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)uint64_t v2 = 0u;
    uint64_t v4 = (void *)*((void *)this + 17);
    if (v4)
    {
      IOFree(v4, 0xF8uLL);
      *((void *)this + 17) = 0;
    }
  }
  return IO80211VirtualInterface::free(this);
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::free(AppleBCMWLANNANInterface *this)
{
  return AppleBCMWLANNANInterface::free((AppleBCMWLANNANInterface *)((char *)this - 24));
}

uint64_t AppleBCMWLANNANInterface::stop(AppleBCMWLANNANInterface *this, IOService *a2)
{
  uint64_t WorkQueue = IO80211SkywalkInterface::getWorkQueue(this);
  IOLog("AppleBCMWLANNANInterface::stop[%u] stop( %p)\n", 429, a2);
  IO80211SkywalkInterface::validateDispatchQueue(this);
  if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logAlert(v16, "[dk] %s@%d:AppleBCMWLANNANInterface Interface Stop\n", "stop", 436);
    }
  }
  uint64_t v5 = *((void *)this + 17);
  if (*(unsigned char *)(v5 + 128))
  {
    uint64_t v6 = 17;
    do
    {
      uint64_t v7 = *(void *)(v5 + 8 * v6);
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v7 + 272))(v7);
        uint64_t v5 = *((void *)this + 17);
        uint64_t v8 = *(void *)(v5 + 8 * v6);
        if (v8)
        {
          (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
          *(void *)(*((void *)this + 17) + 8 * v6) = 0;
          uint64_t v5 = *((void *)this + 17);
        }
      }
      unint64_t v9 = v6 - 16;
      ++v6;
    }
    while (v9 < *(unsigned __int8 *)(v5 + 128));
  }
  uint64_t v10 = *(void *)(v5 + 176);
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 200))(v10);
    uint64_t v5 = *((void *)this + 17);
    uint64_t v11 = *(void *)(v5 + 176);
    if (v11)
    {
      (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
      *(void *)(*((void *)this + 17) + 176) = 0;
      uint64_t v5 = *((void *)this + 17);
    }
  }
  uint64_t v12 = *(void *)(v5 + 184);
  if (v12)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 208))(v12);
    uint64_t v5 = *((void *)this + 17);
    uint64_t v13 = *(void *)(v5 + 184);
    if (v13)
    {
      (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
      *(void *)(*((void *)this + 17) + 184) = 0;
      uint64_t v5 = *((void *)this + 17);
    }
  }
  uint64_t v14 = *(void *)(v5 + 192);
  if (v14)
  {
    (*(void (**)(uint64_t))(*(void *)v14 + 72))(v14);
    (*(void (**)(uint64_t, void))(*(void *)WorkQueue + 72))(WorkQueue, *(void *)(*((void *)this + 17) + 192));
    uint64_t v15 = *(void *)(*((void *)this + 17) + 192);
    if (v15)
    {
      (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
      *(void *)(*((void *)this + 17) + 192) = 0;
    }
  }
  IOLog("AppleBCMWLANNANInterface::stop[%u] super::stop( %p) >>\n", 473, a2);
  return IO80211SkywalkInterface::stop(this, a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::stop(AppleBCMWLANNANInterface *this, IOService *a2)
{
  return AppleBCMWLANNANInterface::stop((AppleBCMWLANNANInterface *)((char *)this - 48), a2);
}

uint64_t AppleBCMWLANNANInterface::reset(AppleBCMWLANNANInterface *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v2 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      uint64_t v3 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 160))(this);
      CCLogStream::logAlert(v2, "[dk] %s@%d:Resetting NAN %s Interface\n", "reset", 480, v3);
    }
  }
  *(_DWORD *)(*((void *)this + 17) + 88) = 0;
  *(unsigned char *)(*((void *)this + 17) + 92) = 0;
  *(_WORD *)(*((void *)this + 17) + 9AppleBCMWLANJoinAdapter::free(this - 3) = 0;
  (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1176))(this);
  IO80211SkywalkInterface::setInterfaceId(this, 0xFFFFFFFF);
  return IO80211VirtualInterface::reset(this);
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::reset(AppleBCMWLANNANInterface *this)
{
  return AppleBCMWLANNANInterface::reset((AppleBCMWLANNANInterface *)((char *)this - 96));
}

uint64_t AppleBCMWLANNANInterface::resetInterface(AppleBCMWLANNANInterface *this)
{
  if (*(_DWORD *)(*((void *)this + 17) + 88))
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        uint64_t v5 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 160))(this);
        isPoweredOuint64_t n = AppleBCMWLANCore::isPoweredOn(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64));
        CCLogStream::logAlert(v4, "[dk] %s@%d:%s Wifi Driver poweredOn %u \n", "resetInterface", 497, v5, isPoweredOn);
      }
    }
    if (AppleBCMWLANCore::isPoweredOn(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64))) {
      uint64_t v2 = 2;
    }
    else {
      uint64_t v2 = 1;
    }
    (*(void (**)(AppleBCMWLANNANInterface *, uint64_t, uint64_t))(*(void *)this + 1352))(this, v2, 1);
  }
  return 0;
}

uint64_t AppleBCMWLANNANInterface::createNANChipInterface(AppleBCMWLANNANInterface *this, ether_addr *a2, char a3)
{
  if (!AppleBCMWLANCore::isHostAssignedInterfaceIndex(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64)))
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      uint64_t v8 = 1;
      if (!CCLogStream::shouldLog()) {
        return v8;
      }
      uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      int FirmwareInterfaceVersion = AppleBCMWLANCore::getFirmwareInterfaceVersion(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64));
      CCLogStream::logAlert(v12, "[dk] %s@%d:ALERT: NAN not supported on this FW version %u\n", "createNANChipInterface", 607, FirmwareInterfaceVersion);
    }
    return 1;
  }
  IO80211SkywalkInterface::setInterfaceId(this, 3u);
  AppleBCMWLANCore::setNanMgtSkywalkInterface(*(void *)(*((void *)this + 17) + 64), 3u);
  uint64_t v20 = 196636;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  v24[0] = 0;
  v24[1] = 0;
  uint64_t v23 = 0;
  int v25 = 0;
  int v19 = 1835011;
  BYTE4(v22) = a3;
  int v6 = *(_DWORD *)a2->octet;
  WORD2(v21) = *(_WORD *)&a2->octet[4];
  HIDWORD(v20) = 10;
  LODWORD(v21) = v6;
  v18[0] = &v23;
  v18[1] = 0x1C001C001CLL;
  uint64_t v7 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 72);
  v17[0] = &v19;
  v17[1] = 28;
  uint64_t v8 = AppleBCMWLANCommander::runIOVarGet(v7, (uint64_t)"interface_create", (uint64_t)v17, (uint64_t)v18, 0);
  uint64_t v9 = (*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
  if (v8)
  {
    if (v9)
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        uint64_t v11 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANInterface *, uint64_t))(*(void *)this + 856))(this, v8);
        CCLogStream::logAlert(v10, "[dk] %s@%d:ERROR: Cannot create interface for NAN, error %s\n", "createNANChipInterface", 600, v11);
      }
    }
  }
  else
  {
    if (v9)
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        uint64_t v16 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 160))(this);
        CCLogStream::logAlert(v15, "[dk] %s@%d:NAN Chip Interface %s Create, Return bssCfgIdx %d, ifIdx %d, ifName %s\n", "createNANChipInterface", 604, v16, BYTE2(v24[0]), BYTE3(v24[0]), (const char *)v24 + 4);
      }
    }
    (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 17) + 120) + 104))(*(void *)(*((void *)this + 17) + 120), 3);
  }
  return v8;
}

BOOL AppleBCMWLANNANInterface::isChipInterfaceReady(AppleBCMWLANNANInterface *this)
{
  return *(_DWORD *)(*((void *)this + 17) + 88) != 0;
}

BOOL AppleBCMWLANNANInterface::isNANInitialized(AppleBCMWLANNANInterface *this)
{
  return *(_DWORD *)(*((void *)this + 17) + 88) != 0;
}

BOOL non-virtual thunk to'AppleBCMWLANNANInterface::isChipInterfaceReady(AppleBCMWLANNANInterface *this)
{
  return *(_DWORD *)(*((void *)this + 7) + 88) != 0;
}

uint64_t AppleBCMWLANNANInterface::setInterfaceEnable(AppleBCMWLANNANInterface *this, int a2)
{
  IO80211SkywalkInterface::validateDispatchQueue(this);
  if (IO80211VirtualInterface::setInterfaceEnable(this, a2))
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        uint64_t v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 160))(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:%s:%d ERROR: NAN interface %s, enable failed!\n", "setInterfaceEnable", 534, "setInterfaceEnable", 534, v8);
      }
    }
  }
  int v4 = *(_DWORD *)(*((void *)this + 17) + 88);
  uint64_t v5 = (*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
  if (v4)
  {
    if (v5
      && ((*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this),
          CCLogStream::shouldLog()))
    {
      uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      uint64_t v10 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 160))(this);
      uint64_t v11 = "disable";
      if (a2) {
        uint64_t v11 = "enable";
      }
      CCLogStream::logAlert(v9, "[dk] %s@%d:%s:%d NAN interface %s %s\n", "setInterfaceEnable", 542, "setInterfaceEnable", 542, v10, v11);
      if (a2) {
        goto LABEL_9;
      }
    }
    else if (a2)
    {
LABEL_9:
      if (AppleBCMWLANCore::isConcurrencyEnabled(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64))
        && AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(*((void *)this + 17) + 64), 4))
      {
        AppleBCMWLANCore::setSoftAPPowerState(*(void *)(*((void *)this + 17) + 64), 1u, 0xDu);
      }
      uint64_t v6 = (*(uint64_t (**)(AppleBCMWLANNANInterface *, uint64_t, uint64_t))(*(void *)this + 128))(this, 3, 128);
      (*(void (**)(AppleBCMWLANNANInterface *, void))(*(void *)this + 1248))(this, 0);
      goto LABEL_21;
    }
    uint64_t v6 = (*(uint64_t (**)(AppleBCMWLANNANInterface *, uint64_t, uint64_t))(*(void *)this + 128))(this, 1, 130);
    (*(void (**)(AppleBCMWLANNANInterface *, void))(*(void *)this + 1256))(this, 0);
LABEL_21:
    AppleBCMWLANCore::setConcurrencyState(*(void **)(*((void *)this + 17) + 64), 8, a2);
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        if (a2) {
          uint64_t v14 = "Enable";
        }
        else {
          uint64_t v14 = "Disable";
        }
        uint64_t v15 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 160))(this);
        CCLogStream::logAlert(v13, "[dk] %s@%d:%s: %s on interface %s, ret=0x%08x\n", "setInterfaceEnable", 568, "virtual IOReturn AppleBCMWLANNANInterface::setInterfaceEnable(BOOL)", v14, v15, v6);
      }
    }
    return v6;
  }
  if (v5)
  {
    (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      uint64_t v17 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 160))(this);
      CCLogStream::logAlert(v16, "[dk] %s@%d:%s: NAN mgmt interface %s not up yet, not enabling queues\n", "setInterfaceEnable", 538, "setInterfaceEnable", v17);
    }
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setInterfaceEnable(AppleBCMWLANNANInterface *this, int a2)
{
  return AppleBCMWLANNANInterface::setInterfaceEnable((AppleBCMWLANNANInterface *)((char *)this - 48), a2);
}

uint64_t AppleBCMWLANNANInterface::setMacAddress(AppleBCMWLANNANInterface *this, ether_addr *a2)
{
  if (*(unsigned char *)(*((void *)this + 17) + 92)) {
    return 3758097109;
  }
  if (IO80211SkywalkInterface::getInterfaceId(this) != 3) {
    return 0;
  }
  uint64_t v2 = AppleBCMWLANNANInterface::setNAN_InterfaceAddr(this, a2);
  if (!v2)
  {
    uint64_t v5 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 72);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
    v11[0] = a2;
    v11[1] = 6;
    uint64_t v2 = AppleBCMWLANCommander::runVirtualIOVarSet(v5, InterfaceId, "cur_etheraddr", (uint64_t)v11, 0, 0);
    if (v2)
    {
      if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
          uint64_t v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 160))(this);
          uint64_t v9 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANInterface *, uint64_t))(*(void *)this + 856))(this, v2);
          CCLogStream::logAlert(v7, "[dk] %s@%d:ERROR: cur_etheraddr failed for %s, error %s\n", "setMacAddress", 654, v8, v9);
        }
      }
    }
  }
  return v2;
}

uint64_t AppleBCMWLANNANInterface::setNAN_InterfaceAddr(AppleBCMWLANNANInterface *this, ether_addr *a2)
{
  uint64_t v3 = AppleBCMWLANNANInterface::issueSyncSetIOVAR(this, 269, a2, 6u);
  if (v3)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Unable to set NAN interface address\n", "setNAN_InterfaceAddr", 4129);
      }
    }
  }
  return v3;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setMacAddress(AppleBCMWLANNANInterface *this, ether_addr *a2)
{
  return AppleBCMWLANNANInterface::setMacAddress((AppleBCMWLANNANInterface *)((char *)this - 80), a2);
}

uint64_t AppleBCMWLANNANInterface::bringupLink(AppleBCMWLANNANInterface *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v3 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      int v4 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 160))(this);
      isPoweredOuint64_t n = AppleBCMWLANCore::isPoweredOn(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64));
      CCLogStream::logAlert(v3, "[dk] %s@%d:Bringing up %s NAN link, powerON %u\n", "bringupLink", 665, v4, isPoweredOn);
    }
  }
  if (AppleBCMWLANCore::isPoweredOn(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64))) {
    (*(void (**)(AppleBCMWLANNANInterface *, uint64_t, uint64_t))(*(void *)this + 1352))(this, 2, 1);
  }
  return 0;
}

uint64_t AppleBCMWLANNANInterface::bringdownLink(AppleBCMWLANNANInterface *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v3 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      int v4 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 160))(this);
      CCLogStream::logAlert(v3, "[dk] %s@%d:Bringing down %s NAN link\n", "bringdownLink", 677, v4);
    }
  }
  unint64_t v5 = 0xAAAAAAAAAAAAAA00;
  IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)this + 17) + 64), this, 0x80u, &v5, 8uLL, 1);
  if (*(_DWORD *)(*((void *)this + 17) + 88)) {
    AppleBCMWLANNANInterface::disableNAN(this);
  }
  (*(void (**)(AppleBCMWLANNANInterface *, uint64_t, uint64_t))(*(void *)this + 1352))(this, 1, 1);
  return 0;
}

uint64_t AppleBCMWLANNANInterface::disableNAN(AppleBCMWLANNANInterface *this)
{
  char v5 = 0;
  uint64_t v2 = AppleBCMWLANNANInterface::issueSyncSetIOVAR(this, 278, &v5, 1u);
  if (v2)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        int v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v4, "[dk] %s@%d:ERROR: Unable to set NAN enable to 0\n", "disableNAN", 3990);
      }
    }
  }
  return v2;
}

uint64_t AppleBCMWLANNANInterface::handleEvent(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (IO80211SkywalkInterface *)result;
  uint64_t v4 = *(unsigned int *)(a2 + 20) + 47;
  BOOL v5 = __CFADD__(v4, a2);
  uint64_t v6 = v4 + a2;
  char v7 = v5;
  int v8 = *(_DWORD *)(a2 + 4);
  if (v8 > 99)
  {
    if ((v8 - 100) <= 0x3B && ((1 << (v8 - 100)) & 0xC00000000000001) != 0)
    {
      switch(*(_DWORD *)(a2 + 12))
      {
        case 3:
          uint64_t result = AppleBCMWLANNANInterface::handleEventNANStateChanged((IO80211SkywalkInterface *)result, a2);
          break;
        case 5:
          uint64_t result = AppleBCMWLANNANInterface::handleEventNANDiscoveryResultReceived((IO80211SkywalkInterface *)result, a2);
          break;
        case 6:
          uint64_t result = AppleBCMWLANNANInterface::handleEventNANPublishReplied((IO80211SkywalkInterface *)result, a2);
          break;
        case 7:
          AppleBCMWLANNANInterface::handleEventNANPublishTerminated((IO80211SkywalkInterface *)result, a2);
          uint64_t result = AppleBCMWLANNANInterface::handleEventNANSubscribeTerminated(v3, a2);
          break;
        case 8:
          uint64_t result = AppleBCMWLANNANInterface::handleEventNANFollowupReceived((IO80211SkywalkInterface *)result, a2);
          break;
        case 0xA:
          uint64_t result = AppleBCMWLANNANInterface::handleEventNANClusterIDChanged((IO80211SkywalkInterface *)result, a2);
          break;
        case 0x14:
          uint64_t result = AppleBCMWLANNANInterface::handleNANEventPeerDataPathIndication((IO80211SkywalkInterface *)result, a2);
          break;
        case 0x15:
          uint64_t result = AppleBCMWLANNANInterface::handleNANEventDataPathEstablished((IO80211SkywalkInterface *)result, a2);
          break;
        case 0x17:
          uint64_t result = AppleBCMWLANNANInterface::handleNANEventDataPathEnd((IO80211SkywalkInterface *)result, a2);
          break;
        case 0x18:
          uint64_t result = AppleBCMWLANNANInterface::handleNANEventBeaconReceived((IO80211SkywalkInterface *)result, a2);
          break;
        case 0x19:
          uint64_t result = AppleBCMWLANNANInterface::handleNANEventPeerDataPathResponse((IO80211SkywalkInterface *)result, a2);
          break;
        case 0x1A:
          uint64_t result = AppleBCMWLANNANInterface::handleNANEventPeerDataPathConfirm((IO80211SkywalkInterface *)result, a2);
          break;
        case 0x1B:
          uint64_t result = AppleBCMWLANNANInterface::handleNANEventRangeRequestIndication((IO80211SkywalkInterface *)result, a2);
          break;
        case 0x1C:
          uint64_t result = AppleBCMWLANNANInterface::handleNANEventRangeReportIndication((IO80211SkywalkInterface *)result, a2);
          break;
        case 0x1D:
          uint64_t result = AppleBCMWLANNANInterface::handleNANEventRangeTerminateIndication((IO80211SkywalkInterface *)result, a2);
          break;
        case 0x1F:
          uint64_t result = AppleBCMWLANNANInterface::handleNANEventNAFTxComplete((IO80211SkywalkInterface *)result, a2);
          break;
        case 0x20:
          uint64_t result = AppleBCMWLANNANInterface::handleNANEventDWStart((IO80211SkywalkInterface *)result, a2);
          break;
        case 0x21:
          uint64_t result = AppleBCMWLANNANInterface::handleNANEventDWEnd((IO80211SkywalkInterface *)result, a2);
          break;
        case 0x22:
          uint64_t result = AppleBCMWLANNANInterface::handleNANEventChanBoundary((IO80211SkywalkInterface *)result, a2);
          break;
        case 0x23:
          uint64_t result = AppleBCMWLANNANInterface::handleEventNANMasterChanged((IO80211SkywalkInterface *)result, a2);
          break;
        case 0x24:
          uint64_t result = AppleBCMWLANNANInterface::handleNANEventRangeResponseIndication((IO80211SkywalkInterface *)result, a2);
          break;
        case 0x25:
          uint64_t result = AppleBCMWLANNANInterface::handleEventNANPeerScheduleUpdate((IO80211SkywalkInterface *)result, a2);
          break;
        case 0x29:
          uint64_t result = AppleBCMWLANNANInterface::handleEventNANFWDataPathTerminated((IO80211SkywalkInterface *)result, a2);
          break;
        case 0x2C:
          uint64_t result = AppleBCMWLANNANInterface::handleEventNANHostAssistRequest((AppleBCMWLANNANInterface *)result, a2);
          break;
        case 0x2F:
          uint64_t result = AppleBCMWLANNANInterface::handleNANEventOobActionFrameTxStatus((IO80211SkywalkInterface *)result, a2);
          break;
        case 0x30:
          uint64_t result = AppleBCMWLANNANInterface::handleNANEventOobActionFrameRx((IO80211SkywalkInterface *)result, a2);
          break;
        default:
          return result;
      }
    }
  }
  else
  {
    switch(v8)
    {
      case 13:
        return AppleBCMWLANNANInterface::handleNANEventQuiteIE((IO80211SkywalkInterface *)result);
      case 38:
        return AppleBCMWLANNANInterface::handelNANEventInfraAssociatioStart((IO80211SkywalkInterface *)result, a2);
      case 54:
        if ((v7 & 1) != 0
          || (uint64_t v11 = (unsigned __int8 *)(a2 + 48), a2 + 52 < a2)
          || (unint64_t)(a2 + 48) >= 0xFFFFFFFFFFFFFFFCLL
          || a2 + 52 > v6
          || (uint64_t)v11 < a2
          || v6 < (uint64_t)v11)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1024))(result);
          if (result)
          {
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
            uint64_t result = CCLogStream::shouldLog();
            if (result)
            {
              uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
              return CCLogStream::logAlert(v9, "[dk] %s@%d: ERROR: Boundary condition detected\n", "handleEvent", 871);
            }
          }
        }
        else
        {
          uint64_t result = AppleBCMWLANCore::isHostAssignedInterfaceIndex(*(AppleBCMWLANCore **)(*(void *)(result + 136) + 64));
          if (result)
          {
            if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3))
            {
              (*(void (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
              if (CCLogStream::shouldLog())
              {
                uint64_t v16 = v11;
                uint64_t v13 = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
                uint64_t v15 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 160))(v3);
                uint64_t v14 = (CCLogStream *)v13;
                uint64_t v11 = v16;
                CCLogStream::logAlert(v14, "[dk] %s@%d: NAN %s interface index is now: %u (bsscfg=%u), role %d, opcode %d\n", "handleEvent", 874, v15, *(unsigned __int8 *)(a2 + 48), *(unsigned __int8 *)(a2 + 51), *(unsigned __int8 *)(a2 + 52), *(unsigned __int8 *)(a2 + 49));
              }
            }
            int v12 = *v11;
            uint64_t result = IO80211SkywalkInterface::getInterfaceId(v3);
            if (result == v12) {
              *(_DWORD *)(*((void *)v3 + 17) + 104) = *(unsigned __int8 *)(a2 + 51);
            }
          }
        }
        break;
    }
  }
  return result;
}

uint64_t AppleBCMWLANNANInterface::handleEventNANStateChanged(IO80211SkywalkInterface *a1, uint64_t a2)
{
  unint64_t v4 = *(unsigned int *)(a2 + 20);
  if (v4 <= 3)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: Invalid event data length %d \n");
      }
      return v5;
    }
    return 1;
  }
  uint64_t v7 = a2 + 48;
  uint64_t v8 = v4 - 1 + a2 + 48;
  BOOL v9 = __CFADD__(v4 - 1, a2 + 48);
  if (*(_WORD *)(a2 + 48) == 261)
  {
    unint64_t v10 = *(unsigned __int16 *)(a2 + 50);
    if (v10 < 0x3C || v10 + 4 > v4)
    {
      if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
        return 1;
      }
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        int v12 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v12, "[dk] %s@%d:ERROR: Invalid xtlv length %d \n");
      }
    }
    else if (v9 {
           || (uint64_t v16 = a2 + 52, a2 + 111 < v7)
    }
           || (unint64_t)(a2 + 52) >= 0xFFFFFFFFFFFFFFC5
           || a2 + 111 > v8
           || v7 > v16
           || v8 < v16)
    {
      if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
        return 1;
      }
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v14, "[dk] %s@%d: ERROR: Boundary condition detected\n");
      }
    }
    else
    {
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v21 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logInfo(v21, "[dk] %s@%d:Event: NAN State changed \n", "handleEventNANStateChanged", 918);
        }
      }
      uint64_t v22 = 0;
      int v23 = 0;
      unint64_t v17 = *(unsigned __int8 *)(a2 + 59);
      unint64_t v18 = 0x10200uLL >> (8 * v17);
      BOOL v19 = v17 >= 5;
      if (v17 >= 5) {
        char v20 = 0;
      }
      else {
        char v20 = 0x102030300uLL >> (8 * v17);
      }
      if (v19) {
        LOBYTE(v18) = 0;
      }
      LOBYTE(v22) = v20;
      BYTE4(v22) = v18;
      LOBYTE(v2AppleBCMWLANJoinAdapter::free(this - 3) = *(unsigned char *)(a2 + 97);
      IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)a1 + 17) + 64), a1, 0x5Fu, &v22, 0xCuLL, 1);
      return 0;
    }
  }
  else
  {
    if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
      return 1;
    }
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    uint64_t v5 = 1;
    if (CCLogStream::shouldLog())
    {
      uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v13, "[dk] %s@%d:ERROR: xtlv type 0x%x mismatch with event\n");
    }
  }
  return v5;
}

uint64_t AppleBCMWLANNANInterface::handleEventNANClusterIDChanged(IO80211SkywalkInterface *a1, uint64_t a2)
{
  unint64_t v4 = *(unsigned int *)(a2 + 20);
  if (v4 <= 3)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: Invalid event data length %d \n");
      }
      return v5;
    }
    return 1;
  }
  uint64_t v7 = a2 + 48;
  uint64_t v8 = v4 - 1 + a2 + 48;
  BOOL v9 = __CFADD__(v4 - 1, a2 + 48);
  if (*(_WORD *)(a2 + 48) == 261)
  {
    unint64_t v10 = *(unsigned __int16 *)(a2 + 50);
    if (v10 < 0x3C || v10 + 4 > v4)
    {
      if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
        return 1;
      }
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        int v12 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v12, "[dk] %s@%d:ERROR: Invalid xtlv length %d \n");
      }
    }
    else if (v9 {
           || (uint64_t v16 = a2 + 52, a2 + 111 < v7)
    }
           || (unint64_t)(a2 + 52) >= 0xFFFFFFFFFFFFFFC5
           || a2 + 111 > v8
           || v7 > v16
           || v8 < v16)
    {
      if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
        return 1;
      }
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v14, "[dk] %s@%d: ERROR: Boundary condition detected\n");
      }
    }
    else
    {
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          unint64_t v17 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logInfo(v17, "[dk] %s@%d:Event: NAN Cluster changed \n", "handleEventNANClusterIDChanged", 1026);
        }
      }
      int v18 = *(_DWORD *)(a2 + 60);
      __int16 v19 = *(_WORD *)(a2 + 64);
      IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)a1 + 17) + 64), a1, 0x61u, &v18, 6uLL, 1);
      return 0;
    }
  }
  else
  {
    if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
      return 1;
    }
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    uint64_t v5 = 1;
    if (CCLogStream::shouldLog())
    {
      uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v13, "[dk] %s@%d:ERROR: xtlv type 0x%x mismatch with event\n");
    }
  }
  return v5;
}

uint64_t AppleBCMWLANNANInterface::handleEventNANPublishReplied(IO80211SkywalkInterface *a1, uint64_t a2)
{
  int v42 = 0;
  uint64_t v41 = 0;
  unint64_t v4 = *(unsigned int *)(a2 + 20);
  if (v4 > 3)
  {
    uint64_t v8 = a2 + 48;
    int v7 = *(unsigned __int16 *)(a2 + 48);
    unint64_t v39 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v40 = v4;
    uint64_t v9 = v4 - 1 + a2 + 48;
    BOOL v10 = __CFADD__(v4 - 1, a2 + 48);
    BOOL v11 = !__CFADD__(v4 - 1, a2 + 48);
    v38[0] = a2 + 48;
    v38[1] = v4 - 1 + a2 + 48;
    LOBYTE(v39) = v11;
    uint64_t v12 = a2 + 48;
    if (v7 == 776) {
      goto LABEL_20;
    }
    uint64_t v13 = 50;
    if (v7 == 512)
    {
      uint64_t v13 = 52;
      uint64_t v14 = 24;
    }
    else
    {
      uint64_t v14 = 16;
    }
    unsigned int v15 = *(unsigned __int16 *)(a2 + v13);
    uint64_t ChanSpecHandler = (int **)AppleBCMWLANCore::getChanSpecHandler(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64));
    AppleBCMWLANChanSpec::getAppleChannelSpec(ChanSpecHandler, bswap32(v15) >> 16);
    ChanSpecConvToApple80211Channel();
    unint64_t v4 = *(unsigned int *)(a2 + 20);
    if (v4 < v14)
    {
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v5 = 1;
        if (!CCLogStream::shouldLog()) {
          return v5;
        }
        goto LABEL_4;
      }
      return 1;
    }
    uint64_t v12 = v8 + v14;
    if (*(_WORD *)v12 == 776)
    {
LABEL_20:
      unint64_t v17 = *(unsigned __int16 *)(v12 + 2);
      if (v17 < 0xC || v17 + 4 > v4)
      {
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          uint64_t v5 = 1;
          if (CCLogStream::shouldLog())
          {
            __int16 v19 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            CCLogStream::logAlert(v19, "[dk] %s@%d:ERROR: Invalid xtlv length %d \n");
          }
          return v5;
        }
      }
      else
      {
        if (!v10)
        {
          uint64_t v21 = (int *)(v12 + 4);
          if (v12 + 15 >= v8
            && (unint64_t)(v12 + 4) < 0xFFFFFFFFFFFFFFF5
            && v12 + 15 <= v9
            && v8 <= (uint64_t)v21
            && v9 >= (uint64_t)v21)
          {
            uint64_t v22 = *(unsigned __int16 *)(v12 + 14);
            uint64_t v23 = IOMallocZeroData();
            if (!v23) {
              return 12;
            }
            uint64_t v24 = (unsigned __int16 *)v23;
            if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
            {
              (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              if (CCLogStream::shouldLog())
              {
                int v34 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                CCLogStream::logInfo(v34, "[dk] %s@%d:Event: NAN Publish (%d) Replied to subscriber %02x:%02x:%02x:%02x:%02x:%02x \n", "handleEventNANPublishReplied", 1101, *(unsigned __int8 *)(v12 + 10), *(unsigned __int8 *)(v12 + 4), *(unsigned __int8 *)(v12 + 5), *(unsigned __int8 *)(v12 + 6), *(unsigned __int8 *)(v12 + 7), *(unsigned __int8 *)(v12 + 8), *(unsigned __int8 *)(v12 + 9));
              }
            }
            unint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
            uint64_t v37 = v22 + 26;
            int v25 = (unsigned __int16 *)((char *)v24 + v22 + 25);
            BOOL v26 = __CFADD__(v22 + 25, v24);
            BOOL v27 = !__CFADD__(v22 + 25, v24);
            v35[0] = v24;
            v35[1] = (char *)v24 + v22 + 25;
            LOBYTE(v36) = v27;
            *(unsigned char *)uint64_t v24 = *(unsigned char *)(v12 + 10);
            *((unsigned char *)v24 + 7) = *(unsigned char *)(v12 + 11);
            *((unsigned char *)v24 + 8) = *(unsigned char *)(v12 + 12);
            *(void *)(v24 + 6) = v41;
            *((_DWORD *)v24 + 5) = v42;
            if (v12 + 9 < v8 || v12 + 9 > v9)
            {
              if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
                goto LABEL_77;
              }
              (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              uint64_t v5 = 1;
              if (CCLogStream::shouldLog())
              {
                long long v28 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                int v29 = 1110;
                goto LABEL_62;
              }
            }
            else
            {
              if (!v26)
              {
                __int16 v32 = (unsigned __int16 *)((char *)v24 + 1);
                if ((uint64_t)(v24 + 3) >= (uint64_t)v24
                  && (unint64_t)v24 + 1 < 0xFFFFFFFFFFFFFFFBLL
                  && (uint64_t)(v24 + 3) <= (uint64_t)v25
                  && (uint64_t)v24 <= (uint64_t)v32
                  && (uint64_t)v25 >= (uint64_t)v32)
                {
                  int v33 = *v21;
                  *(unsigned __int16 *)((char *)v24 + 5) = *(_WORD *)(v12 + 8);
                  *(_DWORD *)__int16 v32 = v33;
                  v24[12] = *(_WORD *)(v12 + 14);
                  if (AppleBCMWLANUtil::rangeChecker::withinRangeLocation((AppleBCMWLANUtil::rangeChecker *)v38, v12 + 16, *(unsigned __int16 *)(v12 + 14), 0))
                  {
                    if (AppleBCMWLANUtil::rangeChecker::withinRangeLocation((AppleBCMWLANUtil::rangeChecker *)v35, (uint64_t)(v24 + 13), v24[12], 0))
                    {
                      memcpy(v24 + 13, (const void *)(v12 + 16), v24[12]);
                      IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)a1 + 17) + 64), a1, 0x66u, v24, v22 + 26, 1);
                      uint64_t v5 = 0;
                      goto LABEL_78;
                    }
                    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
                    {
                      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                      uint64_t v5 = 1;
                      if (!CCLogStream::shouldLog()) {
                        goto LABEL_78;
                      }
                      long long v28 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                      int v29 = 1116;
                      goto LABEL_62;
                    }
                  }
                  else if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
                  {
                    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                    uint64_t v5 = 1;
                    if (!CCLogStream::shouldLog()) {
                      goto LABEL_78;
                    }
                    long long v28 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                    int v29 = 1115;
                    goto LABEL_62;
                  }
LABEL_77:
                  uint64_t v5 = 1;
                  goto LABEL_78;
                }
              }
              if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
                goto LABEL_77;
              }
              (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              uint64_t v5 = 1;
              if (CCLogStream::shouldLog())
              {
                long long v28 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                int v29 = 1111;
LABEL_62:
                CCLogStream::logAlert(v28, "[dk] %s@%d: ERROR: Boundary condition detected\n", "handleEventNANPublishReplied", v29);
              }
            }
LABEL_78:
            IOFreeData();
            return v5;
          }
        }
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          uint64_t v5 = 1;
          if (CCLogStream::shouldLog())
          {
            char v20 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            CCLogStream::logAlert(v20, "[dk] %s@%d: ERROR: Boundary condition detected\n");
          }
          return v5;
        }
      }
    }
    else if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        uint64_t v30 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v30, "[dk] %s@%d:ERROR: xtlv type 0x%x mismatch with event\n");
      }
      return v5;
    }
    return 1;
  }
  if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
    return 1;
  }
  (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
  uint64_t v5 = 1;
  if (CCLogStream::shouldLog())
  {
LABEL_4:
    uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    CCLogStream::logAlert(v6, "[dk] %s@%d:%d: ERROR: Invalid event data length %d \n");
  }
  return v5;
}

uint64_t AppleBCMWLANNANInterface::handleEventNANPublishTerminated(IO80211SkywalkInterface *a1, uint64_t a2)
{
  unint64_t v4 = *(unsigned int *)(a2 + 20);
  if (v4 <= 3)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: Invalid event data length %d \n");
      }
      return v5;
    }
    return 1;
  }
  uint64_t v7 = a2 + 48;
  uint64_t v8 = v4 - 1 + a2 + 48;
  BOOL v9 = __CFADD__(v4 - 1, a2 + 48);
  if (*(_WORD *)(a2 + 48) == 775)
  {
    unint64_t v10 = *(unsigned __int16 *)(a2 + 50);
    if (v10 < 8 || v10 + 4 > v4)
    {
      if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
        return 1;
      }
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v12, "[dk] %s@%d:ERROR: Invalid xtlv length %d \n");
      }
    }
    else if (v9 {
           || (uint64_t v16 = a2 + 52, a2 + 59 < v7)
    }
           || (unint64_t)(a2 + 52) >= 0xFFFFFFFFFFFFFFF9
           || a2 + 59 > v8
           || v7 > v16
           || v8 < v16)
    {
      if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
        return 1;
      }
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v14, "[dk] %s@%d: ERROR: Boundary condition detected\n");
      }
    }
    else
    {
      if (!*(unsigned char *)(a2 + 54))
      {
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            unint64_t v17 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            CCLogStream::logAlert(v17, "[dk] %s@%d:Event: NAN Publish %d Terminated, reason %d\n", "handleEventNANPublishTerminated", 1156, *(unsigned __int8 *)(a2 + 52), *(unsigned __int8 *)(a2 + 53));
          }
        }
        __int16 v18 = *(_WORD *)(a2 + 52);
        IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)a1 + 17) + 64), a1, 0x68u, &v18, 2uLL, 1);
      }
      return 0;
    }
  }
  else
  {
    if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
      return 1;
    }
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    uint64_t v5 = 1;
    if (CCLogStream::shouldLog())
    {
      uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v13, "[dk] %s@%d:ERROR: xtlv type 0x%x mismatch with event\n");
    }
  }
  return v5;
}

uint64_t AppleBCMWLANNANInterface::handleEventNANSubscribeTerminated(IO80211SkywalkInterface *a1, uint64_t a2)
{
  unint64_t v4 = *(unsigned int *)(a2 + 20);
  if (v4 <= 3)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: Invalid event data length %d \n");
      }
      return v5;
    }
    return 1;
  }
  uint64_t v7 = a2 + 48;
  uint64_t v8 = v4 - 1 + a2 + 48;
  BOOL v9 = __CFADD__(v4 - 1, a2 + 48);
  if (*(_WORD *)(a2 + 48) == 775)
  {
    unint64_t v10 = *(unsigned __int16 *)(a2 + 50);
    if (v10 < 8 || v10 + 4 > v4)
    {
      if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
        return 1;
      }
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v12, "[dk] %s@%d:ERROR: Invalid xtlv length %d \n");
      }
    }
    else if (v9 {
           || (uint64_t v16 = a2 + 52, a2 + 59 < v7)
    }
           || (unint64_t)(a2 + 52) >= 0xFFFFFFFFFFFFFFF9
           || a2 + 59 > v8
           || v7 > v16
           || v8 < v16)
    {
      if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
        return 1;
      }
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v14, "[dk] %s@%d: ERROR: Boundary condition detected\n");
      }
    }
    else
    {
      if (*(unsigned char *)(a2 + 54) == 1)
      {
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            unint64_t v17 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            CCLogStream::logAlert(v17, "[dk] %s@%d:Event: NAN Subscribe %d Terminated, reason %d\n", "handleEventNANSubscribeTerminated", 1285, *(unsigned __int8 *)(a2 + 52), *(unsigned __int8 *)(a2 + 53));
          }
        }
        __int16 v18 = *(_WORD *)(a2 + 52);
        IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)a1 + 17) + 64), a1, 0x69u, &v18, 2uLL, 1);
      }
      return 0;
    }
  }
  else
  {
    if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
      return 1;
    }
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    uint64_t v5 = 1;
    if (CCLogStream::shouldLog())
    {
      uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v13, "[dk] %s@%d:ERROR: xtlv type 0x%x mismatch with event\n");
    }
  }
  return v5;
}

uint64_t AppleBCMWLANNANInterface::handleEventNANDiscoveryResultReceived(IO80211SkywalkInterface *a1, uint64_t a2)
{
  int v43 = 0;
  uint64_t v42 = 0;
  unint64_t v4 = *(unsigned int *)(a2 + 20);
  if (v4 > 3)
  {
    uint64_t v8 = a2 + 48;
    int v7 = *(unsigned __int16 *)(a2 + 48);
    unint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v41 = v4;
    uint64_t v9 = v4 - 1 + a2 + 48;
    BOOL v10 = __CFADD__(v4 - 1, a2 + 48);
    BOOL v11 = !__CFADD__(v4 - 1, a2 + 48);
    v39[0] = a2 + 48;
    v39[1] = v4 - 1 + a2 + 48;
    LOBYTE(v40) = v11;
    uint64_t v12 = a2 + 48;
    if (v7 == 778) {
      goto LABEL_20;
    }
    uint64_t v13 = 50;
    if (v7 == 512)
    {
      uint64_t v13 = 52;
      uint64_t v14 = 24;
    }
    else
    {
      uint64_t v14 = 16;
    }
    unsigned int v15 = *(unsigned __int16 *)(a2 + v13);
    uint64_t ChanSpecHandler = (int **)AppleBCMWLANCore::getChanSpecHandler(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64));
    AppleBCMWLANChanSpec::getAppleChannelSpec(ChanSpecHandler, bswap32(v15) >> 16);
    ChanSpecConvToApple80211Channel();
    unint64_t v4 = *(unsigned int *)(a2 + 20);
    if (v4 < v14)
    {
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v5 = 1;
        if (!CCLogStream::shouldLog()) {
          return v5;
        }
        goto LABEL_4;
      }
      return 1;
    }
    uint64_t v12 = v8 + v14;
    if (*(_WORD *)v12 == 778)
    {
LABEL_20:
      unint64_t v17 = *(unsigned __int16 *)(v12 + 2);
      if (v17 < 0xC || v17 + 4 > v4)
      {
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          uint64_t v5 = 1;
          if (CCLogStream::shouldLog())
          {
            __int16 v19 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            CCLogStream::logAlert(v19, "[dk] %s@%d:ERROR: Invalid xtlv length %d \n");
          }
          return v5;
        }
      }
      else
      {
        if (!v10)
        {
          uint64_t v21 = v12 + 4;
          if (v12 + 15 >= v8
            && (unint64_t)(v12 + 4) < 0xFFFFFFFFFFFFFFF5
            && v12 + 15 <= v9
            && v8 <= v21
            && v9 >= v21)
          {
            uint64_t v22 = *(unsigned __int16 *)(v12 + 14);
            uint64_t v23 = IOMallocZeroData();
            if (!v23) {
              return 12;
            }
            uint64_t v24 = (char *)v23;
            if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
            {
              (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              if (CCLogStream::shouldLog())
              {
                int v35 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                CCLogStream::logInfo(v35, "[dk] %s@%d:Event: NAN discovery result for subscribe id = %d, publisher %02x:%02x:%02x:%02x:%02x:%02x\n", "handleEventNANDiscoveryResultReceived", 1230, *(unsigned __int8 *)(v12 + 5), *(unsigned __int8 *)(v12 + 6), *(unsigned __int8 *)(v12 + 7), *(unsigned __int8 *)(v12 + 8), *(unsigned __int8 *)(v12 + 9), *(unsigned __int8 *)(v12 + 10), *(unsigned __int8 *)(v12 + 11));
              }
            }
            unint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
            uint64_t v38 = v22 + 26;
            int v25 = &v24[v22 + 25];
            BOOL v26 = __CFADD__(v22 + 25, v24);
            BOOL v27 = !__CFADD__(v22 + 25, v24);
            v36[0] = v24;
            v36[1] = &v24[v22 + 25];
            LOBYTE(v37) = v27;
            v24[1] = *(unsigned char *)(v12 + 4);
            *uint64_t v24 = *(unsigned char *)(v12 + 5);
            v24[8] = *(unsigned char *)(v12 + 12);
            *(void *)(v24 + 12) = v42;
            *((_DWORD *)v24 + 5) = v43;
            long long v28 = (int *)(v12 + 6);
            if (v12 + 11 < v8
              || (unint64_t)(v12 + 6) >= 0xFFFFFFFFFFFFFFFBLL
              || v12 + 11 > v9
              || v8 > (uint64_t)v28
              || v9 < (uint64_t)v28)
            {
              if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
                goto LABEL_80;
              }
              (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              uint64_t v5 = 1;
              if (CCLogStream::shouldLog())
              {
                int v29 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                int v30 = 1240;
                goto LABEL_65;
              }
            }
            else
            {
              if (!v26)
              {
                int v33 = v24 + 2;
                if ((uint64_t)(v24 + 7) >= (uint64_t)v24
                  && (unint64_t)(v24 + 2) < 0xFFFFFFFFFFFFFFFBLL
                  && (uint64_t)(v24 + 7) <= (uint64_t)v25
                  && (uint64_t)v24 <= (uint64_t)v33
                  && (uint64_t)v25 >= (uint64_t)v33)
                {
                  int v34 = *v28;
                  *((_WORD *)v24 + AppleBCMWLANJoinAdapter::free(this - 3) = *(_WORD *)(v12 + 10);
                  *(_DWORD *)int v33 = v34;
                  *((_WORD *)v24 + 12) = *(_WORD *)(v12 + 14);
                  if (AppleBCMWLANUtil::rangeChecker::withinRangeLocation((AppleBCMWLANUtil::rangeChecker *)v39, v12 + 16, *(unsigned __int16 *)(v12 + 14), 0))
                  {
                    if (AppleBCMWLANUtil::rangeChecker::withinRangeLocation((AppleBCMWLANUtil::rangeChecker *)v36, (uint64_t)(v24 + 26), *(unsigned __int16 *)(v12 + 14), 0))
                    {
                      memcpy(v24 + 26, (const void *)(v12 + 16), *(unsigned __int16 *)(v12 + 14));
                      IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)a1 + 17) + 64), a1, 0x64u, v24, v22 + 26, 1);
                      uint64_t v5 = 0;
                      goto LABEL_81;
                    }
                    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
                    {
                      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                      uint64_t v5 = 1;
                      if (!CCLogStream::shouldLog()) {
                        goto LABEL_81;
                      }
                      int v29 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                      int v30 = 1246;
                      goto LABEL_65;
                    }
                  }
                  else if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
                  {
                    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                    uint64_t v5 = 1;
                    if (!CCLogStream::shouldLog()) {
                      goto LABEL_81;
                    }
                    int v29 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                    int v30 = 1245;
                    goto LABEL_65;
                  }
LABEL_80:
                  uint64_t v5 = 1;
                  goto LABEL_81;
                }
              }
              if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
                goto LABEL_80;
              }
              (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              uint64_t v5 = 1;
              if (CCLogStream::shouldLog())
              {
                int v29 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                int v30 = 1241;
LABEL_65:
                CCLogStream::logAlert(v29, "[dk] %s@%d: ERROR: Boundary condition detected\n", "handleEventNANDiscoveryResultReceived", v30);
              }
            }
LABEL_81:
            IOFreeData();
            return v5;
          }
        }
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          uint64_t v5 = 1;
          if (CCLogStream::shouldLog())
          {
            char v20 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            CCLogStream::logAlert(v20, "[dk] %s@%d: ERROR: Boundary condition detected\n");
          }
          return v5;
        }
      }
    }
    else if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        int v31 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v31, "[dk] %s@%d:ERROR: xtlv type 0x%x mismatch with event\n");
      }
      return v5;
    }
    return 1;
  }
  if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
    return 1;
  }
  (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
  uint64_t v5 = 1;
  if (CCLogStream::shouldLog())
  {
LABEL_4:
    uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    CCLogStream::logAlert(v6, "[dk] %s@%d:%d: ERROR: Invalid event data length %d \n");
  }
  return v5;
}

uint64_t AppleBCMWLANNANInterface::handleEventNANFollowupReceived(IO80211SkywalkInterface *a1, uint64_t a2)
{
  int v42 = 0;
  uint64_t v41 = 0;
  unint64_t v4 = *(unsigned int *)(a2 + 20);
  if (v4 > 3)
  {
    uint64_t v8 = a2 + 48;
    int v7 = *(unsigned __int16 *)(a2 + 48);
    unint64_t v39 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v40 = v4;
    uint64_t v9 = v4 - 1 + a2 + 48;
    BOOL v10 = __CFADD__(v4 - 1, a2 + 48);
    BOOL v11 = !__CFADD__(v4 - 1, a2 + 48);
    v38[0] = a2 + 48;
    v38[1] = v4 - 1 + a2 + 48;
    LOBYTE(v39) = v11;
    uint64_t v12 = a2 + 48;
    if (v7 == 777) {
      goto LABEL_20;
    }
    uint64_t v13 = 50;
    if (v7 == 512)
    {
      uint64_t v13 = 52;
      uint64_t v14 = 24;
    }
    else
    {
      uint64_t v14 = 16;
    }
    unsigned int v15 = *(unsigned __int16 *)(a2 + v13);
    uint64_t ChanSpecHandler = (int **)AppleBCMWLANCore::getChanSpecHandler(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64));
    AppleBCMWLANChanSpec::getAppleChannelSpec(ChanSpecHandler, bswap32(v15) >> 16);
    ChanSpecConvToApple80211Channel();
    unint64_t v4 = *(unsigned int *)(a2 + 20);
    if (v4 < v14)
    {
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v5 = 1;
        if (!CCLogStream::shouldLog()) {
          return v5;
        }
        goto LABEL_4;
      }
      return 1;
    }
    uint64_t v12 = v8 + v14;
    if (*(_WORD *)v12 == 777)
    {
LABEL_20:
      unint64_t v17 = *(unsigned __int16 *)(v12 + 2);
      if (v17 < 0xC || v17 + 4 > v4)
      {
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          uint64_t v5 = 1;
          if (CCLogStream::shouldLog())
          {
            __int16 v19 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            CCLogStream::logAlert(v19, "[dk] %s@%d:ERROR: Invalid xtlv length %d \n");
          }
          return v5;
        }
      }
      else
      {
        if (!v10)
        {
          uint64_t v21 = (int *)(v12 + 4);
          if (v12 + 15 >= v8
            && (unint64_t)(v12 + 4) < 0xFFFFFFFFFFFFFFF5
            && v12 + 15 <= v9
            && v8 <= (uint64_t)v21
            && v9 >= (uint64_t)v21)
          {
            uint64_t v22 = *(unsigned __int16 *)(v12 + 14);
            uint64_t v23 = IOMallocZeroData();
            if (!v23) {
              return 12;
            }
            uint64_t v24 = (char *)v23;
            if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
            {
              (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              if (CCLogStream::shouldLog())
              {
                int v34 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                CCLogStream::logAlert(v34, "[dk] %s@%d:Followup for instance %d received from %02x:%02x:%02x:%02x:%02x:%02x, instance %d\n", "handleEventNANFollowupReceived", 1362, *(unsigned __int8 *)(v12 + 10), *(unsigned __int8 *)(v12 + 4), *(unsigned __int8 *)(v12 + 5), *(unsigned __int8 *)(v12 + 6), *(unsigned __int8 *)(v12 + 7), *(unsigned __int8 *)(v12 + 8), *(unsigned __int8 *)(v12 + 9), *(unsigned __int8 *)(v12 + 11));
              }
            }
            unint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
            uint64_t v37 = v22 + 26;
            int v25 = &v24[v22 + 25];
            BOOL v26 = __CFADD__(v22 + 25, v24);
            BOOL v27 = !__CFADD__(v22 + 25, v24);
            v35[0] = v24;
            v35[1] = &v24[v22 + 25];
            LOBYTE(v36) = v27;
            *uint64_t v24 = *(unsigned char *)(v12 + 10);
            v24[1] = *(unsigned char *)(v12 + 11);
            v24[8] = *(unsigned char *)(v12 + 12);
            *(void *)(v24 + 12) = v41;
            *((_DWORD *)v24 + 5) = v42;
            if (v12 + 9 < v8 || v12 + 9 > v9)
            {
              if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
                goto LABEL_77;
              }
              (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              uint64_t v5 = 1;
              if (CCLogStream::shouldLog())
              {
                long long v28 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                int v29 = 1372;
                goto LABEL_62;
              }
            }
            else
            {
              if (!v26)
              {
                __int16 v32 = v24 + 2;
                if ((uint64_t)(v24 + 7) >= (uint64_t)v24
                  && (unint64_t)(v24 + 2) < 0xFFFFFFFFFFFFFFFBLL
                  && (uint64_t)(v24 + 7) <= (uint64_t)v25
                  && (uint64_t)v24 <= (uint64_t)v32
                  && (uint64_t)v25 >= (uint64_t)v32)
                {
                  int v33 = *v21;
                  *((_WORD *)v24 + AppleBCMWLANJoinAdapter::free(this - 3) = *(_WORD *)(v12 + 8);
                  *(_DWORD *)__int16 v32 = v33;
                  *((_WORD *)v24 + 12) = *(_WORD *)(v12 + 14);
                  if (AppleBCMWLANUtil::rangeChecker::withinRangeLocation((AppleBCMWLANUtil::rangeChecker *)v38, v12 + 16, *(unsigned __int16 *)(v12 + 14), 0))
                  {
                    if (AppleBCMWLANUtil::rangeChecker::withinRangeLocation((AppleBCMWLANUtil::rangeChecker *)v35, (uint64_t)(v24 + 26), *(unsigned __int16 *)(v12 + 14), 0))
                    {
                      memcpy(v24 + 26, (const void *)(v12 + 16), *(unsigned __int16 *)(v12 + 14));
                      IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)a1 + 17) + 64), a1, 0x6Au, v24, v22 + 26, 1);
                      uint64_t v5 = 0;
                      goto LABEL_78;
                    }
                    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
                    {
                      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                      uint64_t v5 = 1;
                      if (!CCLogStream::shouldLog()) {
                        goto LABEL_78;
                      }
                      long long v28 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                      int v29 = 1378;
                      goto LABEL_62;
                    }
                  }
                  else if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
                  {
                    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                    uint64_t v5 = 1;
                    if (!CCLogStream::shouldLog()) {
                      goto LABEL_78;
                    }
                    long long v28 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                    int v29 = 1377;
                    goto LABEL_62;
                  }
LABEL_77:
                  uint64_t v5 = 1;
                  goto LABEL_78;
                }
              }
              if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
                goto LABEL_77;
              }
              (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              uint64_t v5 = 1;
              if (CCLogStream::shouldLog())
              {
                long long v28 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                int v29 = 1373;
LABEL_62:
                CCLogStream::logAlert(v28, "[dk] %s@%d: ERROR: Boundary condition detected\n", "handleEventNANFollowupReceived", v29);
              }
            }
LABEL_78:
            IOFreeData();
            return v5;
          }
        }
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          uint64_t v5 = 1;
          if (CCLogStream::shouldLog())
          {
            char v20 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            CCLogStream::logAlert(v20, "[dk] %s@%d: ERROR: Boundary condition detected\n");
          }
          return v5;
        }
      }
    }
    else if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        int v30 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v30, "[dk] %s@%d:ERROR: xtlv type 0x%x mismatch with event\n");
      }
      return v5;
    }
    return 1;
  }
  if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
    return 1;
  }
  (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
  uint64_t v5 = 1;
  if (CCLogStream::shouldLog())
  {
LABEL_4:
    uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    CCLogStream::logAlert(v6, "[dk] %s@%d:%d: ERROR: Invalid event data length %d \n");
  }
  return v5;
}

uint64_t AppleBCMWLANNANInterface::handleNANEventNAFTxComplete(IO80211SkywalkInterface *a1, uint64_t a2)
{
  unint64_t v4 = *(unsigned int *)(a2 + 20);
  if (v4 <= 3)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: Invalid event data length %d \n");
      }
      return v5;
    }
    return 1;
  }
  uint64_t v7 = a2 + 48;
  uint64_t v8 = v4 - 1 + a2 + 48;
  BOOL v9 = __CFADD__(v4 - 1, a2 + 48);
  if (*(_WORD *)(a2 + 48) != 308)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v13, "[dk] %s@%d:ERROR: xtlv type 0x%x mismatch with event\n");
      }
      return v5;
    }
    return 1;
  }
  unint64_t v10 = *(unsigned __int16 *)(a2 + 50);
  if (v10 < 8 || v10 + 4 > v4)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v12, "[dk] %s@%d:ERROR: Invalid xtlv length %d \n");
      }
      return v5;
    }
    return 1;
  }
  if (v9
    || (uint64_t v14 = (unsigned char *)(a2 + 52), a2 + 59 < v7)
    || (unint64_t)(a2 + 52) >= 0xFFFFFFFFFFFFFFF9
    || a2 + 59 > v8
    || v7 > (uint64_t)v14
    || v8 < (uint64_t)v14)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog()) {
        goto LABEL_33;
      }
      return v5;
    }
    return 1;
  }
  int shouldLog = (AppleBCMWLANNANInterface *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
  if (shouldLog)
  {
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    int shouldLog = (AppleBCMWLANNANInterface *)CCLogStream::shouldLog();
    if (shouldLog)
    {
      int v33 = (AppleBCMWLANNANInterface *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v43 = v8;
      int v34 = v33;
      int v35 = *(unsigned __int16 *)(a2 + 54);
      uint64_t v36 = *(unsigned __int8 *)(a2 + 52);
      if (v36 == 1) {
        uint64_t v37 = "SUCCESS";
      }
      else {
        uint64_t v37 = "FAILURE";
      }
      int v38 = *(unsigned __int8 *)(a2 + 53);
      int v39 = *(unsigned __int8 *)(a2 + 56);
      uint64_t v41 = AppleBCMWLANNANInterface::stringForFrameType(v33, v39);
      int v42 = v39;
      uint64_t v7 = a2 + 48;
      unint64_t v40 = v34;
      uint64_t v8 = v43;
      int shouldLog = (AppleBCMWLANNANInterface *)CCLogStream::logAlert(v40, "[dk] %s@%d:NAN Action Frame completed for token %d status %s (%x), reason %x, frame type %s (%x)\n", "handleNANEventNAFTxComplete", 1459, v35, v37, v36, v38, v41, v42);
    }
  }
  if (*v14 || *(unsigned __int8 *)(a2 + 53) - 2 > 2) {
    int v16 = 0;
  }
  else {
    int v16 = (*(unsigned char *)(a2 + 53) - 2) + 1;
  }
  if (!*(_WORD *)(a2 + 58)) {
    return 0;
  }
  __int16 v18 = 0;
  __int16 v19 = 0;
  char v20 = 0;
  int v21 = 0;
  uint64_t v22 = (unsigned __int16 *)(a2 + 60);
  while (1)
  {
    if ((uint64_t)v22 + 5 < v7
      || (unint64_t)v22 >= 0xFFFFFFFFFFFFFFFBLL
      || (uint64_t)v22 + 5 > v8
      || v7 > (uint64_t)v22
      || v8 < (uint64_t)v22)
    {
      if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
        return 1;
      }
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (!CCLogStream::shouldLog()) {
        return v5;
      }
      goto LABEL_33;
    }
    unsigned int v27 = *v22;
    if (v27 > 0x503) {
      break;
    }
    if (v27 == 779)
    {
      char v20 = v22 + 2;
      if ((uint64_t)v22 + 5 < v7
        || v22 == (unsigned __int16 *)-5
        || (uint64_t)v22 + 5 > v8
        || v7 > (uint64_t)v20
        || v8 < (uint64_t)v20)
      {
        if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
          return 1;
        }
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v5 = 1;
        if (!CCLogStream::shouldLog()) {
          return v5;
        }
        goto LABEL_33;
      }
    }
    else if (v27 == 787)
    {
      __int16 v18 = v22 + 2;
      if ((uint64_t)v22 + 9 < v7
        || (unint64_t)(v22 + 2) >= 0xFFFFFFFFFFFFFFFBLL
        || (uint64_t)v22 + 9 > v8
        || v7 > (uint64_t)v18
        || v8 < (uint64_t)v18)
      {
        if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
          return 1;
        }
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v5 = 1;
        if (!CCLogStream::shouldLog()) {
          return v5;
        }
        goto LABEL_33;
      }
    }
LABEL_78:
    uint64_t v29 = ((v22[1] + 3) & 0x1FFFC) + 4;
    v21 += v29;
    uint64_t v22 = (unsigned __int16 *)((char *)v22 + v29);
    if (*(unsigned __int16 *)(a2 + 58) <= (unsigned __int16)v21)
    {
      if (v19)
      {
        unsigned __int8 v44 = 0;
        *(void *)((char *)&v45 + 4) = 0;
        LODWORD(v45) = v16;
        BYTE4(v45) = *(unsigned char *)v19;
        AppleBCMWLANNANInterface::convertNANFWFrameType(shouldLog, *(unsigned char *)(a2 + 56), &v44, (unsigned __int8 *)&v45 + 11);
        int v30 = *(_DWORD *)(v19 + 1);
        *(_WORD *)((char *)&v45 + 9) = v19[3];
        *(_DWORD *)((char *)&v45 + 5) = v30;
        IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)a1 + 17) + 64), a1, 0x74u, &v45, 0xCuLL, 1);
      }
      if (v20)
      {
        long long v45 = 0uLL;
        int v46 = 0;
        DWORD1(v45) = *(unsigned __int16 *)(a2 + 54);
        DWORD2(v45) = v16;
        LOWORD(v45) = *v20;
        if (v18)
        {
          int v31 = *(_DWORD *)v18;
          LOWORD(v46) = v18[2];
          HIDWORD(v45) = v31;
        }
        IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)a1 + 17) + 64), a1, 0x63u, &v45, 0x14uLL, 1);
      }
      return 0;
    }
  }
  if (v27 != 1284)
  {
    if (v27 == 1794)
    {
      long long v28 = v22 + 2;
      if ((uint64_t)v22 + 7 < v7
        || (unint64_t)(v22 + 2) >= 0xFFFFFFFFFFFFFFFDLL
        || (uint64_t)v22 + 7 > v8
        || v7 > (uint64_t)v28
        || v8 < (uint64_t)v28)
      {
        if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
          return 1;
        }
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v5 = 1;
        if (!CCLogStream::shouldLog()) {
          return v5;
        }
        goto LABEL_33;
      }
    }
    goto LABEL_78;
  }
  __int16 v19 = v22 + 2;
  if ((uint64_t)v22 + 11 >= v7
    && (unint64_t)(v22 + 2) < 0xFFFFFFFFFFFFFFF9
    && (uint64_t)v22 + 11 <= v8
    && v7 <= (uint64_t)v19
    && v8 >= (uint64_t)v19)
  {
    goto LABEL_78;
  }
  if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
    return 1;
  }
  (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
  uint64_t v5 = 1;
  if (!CCLogStream::shouldLog()) {
    return v5;
  }
LABEL_33:
  unint64_t v17 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
  CCLogStream::logAlert(v17, "[dk] %s@%d: ERROR: Boundary condition detected\n");
  return v5;
}

uint64_t AppleBCMWLANNANInterface::handleNANEventBeaconReceived(IO80211SkywalkInterface *a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a2 + 20);
  if (v4 > 0x10)
  {
    int64_t v6 = a2 + 48;
    unint64_t v46 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v47 = v4;
    uint64_t v7 = v4 - 1 + a2 + 48;
    BOOL v8 = !__CFADD__(v4 - 1, a2 + 48);
    v45[0] = a2 + 48;
    v45[1] = v4 - 1 + a2 + 48;
    LOBYTE(v46) = v8;
    if (__CFADD__(v4 - 1, a2 + 48)
      || a2 + 63 < v6
      || (unint64_t)v6 >= 0xFFFFFFFFFFFFFFF1
      || (a2 + 63 <= v7 ? (BOOL v9 = v7 < v6) : (BOOL v9 = 1), v9))
    {
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v5 = 1;
        if (!CCLogStream::shouldLog()) {
          return v5;
        }
        BOOL v11 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        int v12 = 1568;
LABEL_24:
        CCLogStream::logAlert(v11, "[dk] %s@%d: ERROR: Boundary condition detected\n", "handleNANEventBeaconReceived", v12);
        return v5;
      }
    }
    else
    {
      __int16 v53 = 0;
      long long v52 = 0u;
      long long v51 = 0u;
      memset(v50, 0, sizeof(v50));
      int v48 = *(_DWORD *)(a2 + 24);
      __int16 v49 = *(_WORD *)(a2 + 28);
      if (*(_WORD *)(a2 + 48) != 512)
      {
        unsigned int v13 = bswap32(*(_DWORD *)(a2 + 60));
        *(_DWORD *)((char *)&v51 + 2) = v13;
        int8x8_t v14 = vrev32_s8(*(int8x8_t *)(a2 + 52));
        __int32 v41 = v14.i32[0];
        *(int8x8_t *)((char *)&v51 + 6) = v14;
        int64_t v15 = a2 + 64;
        uint64_t ChanSpecHandler = (int **)AppleBCMWLANCore::getChanSpecHandler(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64));
        unint64_t v17 = (unsigned __int16 *)(a2 + 50);
LABEL_26:
        AppleBCMWLANChanSpec::getAppleChannelSpec(ChanSpecHandler, bswap32(*v17) >> 16);
        int64_t v18 = v15 + 5;
        if ((unint64_t)v15 >= 0xFFFFFFFFFFFFFFFBLL || v18 < v6 || v18 > v7 || v6 > v15 || v7 < v15)
        {
          if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
          {
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            if (CCLogStream::shouldLog())
            {
              __int16 v32 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              CCLogStream::logAlert(v32, "[dk] %s@%d: ERROR: Boundary condition detected\n");
            }
          }
          return 22;
        }
        if (*(_WORD *)v15 != 1025)
        {
          if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
          {
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            if (CCLogStream::shouldLog())
            {
              int v34 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              CCLogStream::logAlert(v34, "[dk] %s@%d:ERROR: xtlv type 0x%x mismatch with event\n");
            }
          }
          return 22;
        }
        uint64_t v19 = *(unsigned __int16 *)(v15 + 2);
        uint64_t v20 = IOMallocZeroData();
        if (!v20) {
          return 12;
        }
        uint64_t v21 = v20;
        unint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
        uint64_t v44 = v19 + 30;
        BOOL v22 = !__CFADD__(v19 + 29, v20);
        v42[0] = v20;
        v42[1] = v19 + 29 + v20;
        LOBYTE(v4AppleBCMWLANJoinAdapter::free(this - 3) = v22;
        *(_DWORD *)uint64_t v20 = v41;
        *(unsigned char *)(v20 + 16) = v13;
        uint64_t v23 = v20 + 4;
        ChanSpecConvToApple80211Channel();
        int64_t v24 = v15 + 4;
        int64_t v25 = v15 + 15;
        if ((unint64_t)(v15 + 4) >= 0xFFFFFFFFFFFFFFF5 || v25 < v6 || v25 > v7 || v6 > v24 || v7 < v24)
        {
          if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
            goto LABEL_79;
          }
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          if (!CCLogStream::shouldLog()) {
            goto LABEL_79;
          }
          uint64_t v36 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          int v37 = 1636;
        }
        else
        {
          *(int32x2_t *)(v21 + 20) = vrev64_s32(*(int32x2_t *)(v15 + 4));
          uint64_t v26 = *(unsigned __int16 *)(v15 + 12);
          *(_WORD *)(v21 + 28) = v26;
          if (AppleBCMWLANUtil::rangeChecker::withinRangeLocation((AppleBCMWLANUtil::rangeChecker *)v45, v15 + 16, v26, 0))
          {
            if (AppleBCMWLANUtil::rangeChecker::withinRangeLocation((AppleBCMWLANUtil::rangeChecker *)v42, v21 + 30, *(unsigned __int16 *)(v21 + 28), 0))
            {
              memcpy((void *)(v21 + 30), (const void *)(v15 + 16), *(unsigned __int16 *)(v21 + 28));
              IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)a1 + 17) + 64), a1, 0x62u, (void *)v21, v19 + 18, 1);
              uint64_t v27 = *(void *)v23;
              *(_DWORD *)((char *)v50 + 14) = *(_DWORD *)(v23 + 8);
              *(void *)((char *)v50 + 6) = v27;
              unint64_t v28 = *(unsigned __int16 *)(v21 + 28);
              uint64_t MgmtFramePool = IO80211VirtualInterface::getMgmtFramePool(a1);
              int v30 = (IO80211Buffer *)(*(uint64_t (**)(uint64_t))(*(void *)MgmtFramePool + 56))(MgmtFramePool);
              if (v30)
              {
                int v31 = v30;
                if (IO80211Buffer::writeBytes(v30, 0, (const void *)(v15 + 16), v28))
                {
                  IO80211Buffer::setLength(v31, v28);
                  IO80211VirtualInterface::bpfTapInput(a1, v31, 0xCu, &v48, 0x48uLL);
                  uint64_t v5 = 0;
LABEL_80:
                  IOFreeData();
                  return v5;
                }
                if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
                {
                  (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                  if (CCLogStream::shouldLog())
                  {
                    unint64_t v40 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                    CCLogStream::logAlert(v40, "[dk] %s@%d:copy nan beacon frame fail\n", "handleNANEventBeaconReceived", 1664);
                  }
                }
                IO80211Buffer::returnBuffer(v31);
              }
              else if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
              {
                (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                if (CCLogStream::shouldLog())
                {
                  int v38 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                  CCLogStream::logCrit(v38, "[dk] %s@%d:action packet not avaialbe from pool\n", "handleNANEventBeaconReceived", 1658);
                }
              }
LABEL_79:
              uint64_t v5 = 22;
              goto LABEL_80;
            }
            if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
              goto LABEL_79;
            }
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            if (!CCLogStream::shouldLog()) {
              goto LABEL_79;
            }
            uint64_t v36 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            int v37 = 1643;
          }
          else
          {
            if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
              goto LABEL_79;
            }
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            if (!CCLogStream::shouldLog()) {
              goto LABEL_79;
            }
            uint64_t v36 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            int v37 = 1642;
          }
        }
        CCLogStream::logAlert(v36, "[dk] %s@%d: ERROR: Boundary condition detected\n", "handleNANEventBeaconReceived", v37);
        goto LABEL_79;
      }
      if (v4 <= 0x18)
      {
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            unint64_t v10 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            CCLogStream::logAlert(v10, "[dk] %s@%d:handleActionFrame_v1_rx: invalid event msg len=%u, expect at least %lu\n");
          }
        }
        return 22;
      }
      if (a2 + 71 >= v6 && (unint64_t)v6 < 0xFFFFFFFFFFFFFFE9 && a2 + 71 <= v7)
      {
        unsigned int v13 = bswap32(*(_DWORD *)(a2 + 64));
        *(_DWORD *)((char *)&v51 + 2) = v13;
        int8x8_t v33 = vrev32_s8(*(int8x8_t *)(a2 + 56));
        __int32 v41 = v33.i32[0];
        *(int8x8_t *)((char *)&v51 + 6) = v33;
        int64_t v15 = a2 + 72;
        uint64_t ChanSpecHandler = (int **)AppleBCMWLANCore::getChanSpecHandler(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64));
        unint64_t v17 = (unsigned __int16 *)(a2 + 52);
        goto LABEL_26;
      }
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v5 = 1;
        if (!CCLogStream::shouldLog()) {
          return v5;
        }
        BOOL v11 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        int v12 = 1585;
        goto LABEL_24;
      }
    }
    return 1;
  }
  if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
  {
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      int v39 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v39, "[dk] %s@%d:Invalid event msg len=%u, expect at least %lu\n");
    }
  }
  return 22;
}

uint64_t AppleBCMWLANNANInterface::handleNANEventPeerDataPathIndication(IO80211SkywalkInterface *a1, uint64_t a2)
{
  unint64_t v4 = *(unsigned int *)(a2 + 20);
  if (v4 <= 3)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        int64_t v6 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: Invalid event data length %d \n");
      }
      return v5;
    }
    return 1;
  }
  uint64_t v8 = a2 + 48;
  int v7 = *(unsigned __int16 *)(a2 + 48);
  unint64_t v44 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v45 = v4;
  uint64_t v9 = v4 - 1 + a2 + 48;
  BOOL v10 = __CFADD__(v4 - 1, a2 + 48);
  BOOL v11 = !__CFADD__(v4 - 1, a2 + 48);
  v43[0] = a2 + 48;
  v43[1] = v4 - 1 + a2 + 48;
  LOBYTE(v44) = v11;
  if (v7 != 1282)
  {
    if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
      return 1;
    }
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    uint64_t v5 = 1;
    if (CCLogStream::shouldLog())
    {
      int64_t v15 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v15, "[dk] %s@%d:ERROR: xtlv type 0x%x mismatch with event\n");
    }
    return v5;
  }
  unint64_t v12 = *(unsigned __int16 *)(a2 + 50);
  if (v12 < 0x24 || v12 + 4 > v4)
  {
    if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
      return 1;
    }
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    uint64_t v5 = 1;
    if (CCLogStream::shouldLog())
    {
      int8x8_t v14 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v14, "[dk] %s@%d:ERROR: Invalid xtlv length %d \n");
    }
    return v5;
  }
  if (v10
    || (uint64_t v17 = a2 + 52, a2 + 87 < v8)
    || (unint64_t)(a2 + 52) >= 0xFFFFFFFFFFFFFFDDLL
    || a2 + 87 > v9
    || v8 > v17
    || v9 < v17)
  {
    if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
      return 1;
    }
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    uint64_t v5 = 1;
    if (!CCLogStream::shouldLog()) {
      return v5;
    }
LABEL_26:
    int v16 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    CCLogStream::logAlert(v16, "[dk] %s@%d: ERROR: Boundary condition detected\n");
    return v5;
  }
  if (!*(_WORD *)(a2 + 86))
  {
    int v27 = 0;
    uint64_t v19 = 0;
    unint64_t v20 = 18;
LABEL_60:
    uint64_t v29 = IOMallocZeroData();
    if (!v29) {
      return 12;
    }
    int v30 = (unsigned __int16 *)v29;
    uint64_t v31 = v20 - 1 + v29;
    if (__CFADD__(v20 - 1, v29)
      || v29 + 17 < v29
      || (unint64_t)v29 >= 0xFFFFFFFFFFFFFFEFLL
      || v29 + 17 > v31
      || v31 < v29)
    {
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v5 = 1;
        if (!CCLogStream::shouldLog()) {
          goto LABEL_106;
        }
        __int32 v41 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        int v42 = 1823;
LABEL_91:
        CCLogStream::logAlert(v41, "[dk] %s@%d: ERROR: Boundary condition detected\n", "handleNANEventPeerDataPathIndication", v42);
        goto LABEL_106;
      }
    }
    else
    {
      *(unsigned char *)uint64_t v29 = *(unsigned char *)(a2 + 53);
      *(unsigned char *)(v29 + 1) = *(unsigned char *)(a2 + 54);
      *(unsigned char *)(v29 + 2) = *(unsigned char *)(a2 + 55);
      __int16 v32 = (int *)(a2 + 68);
      if (a2 + 73 < v8
        || (unint64_t)(a2 + 68) >= 0xFFFFFFFFFFFFFFFBLL
        || a2 + 73 > v9
        || v8 > (uint64_t)v32
        || v9 < (uint64_t)v32)
      {
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          uint64_t v5 = 1;
          if (!CCLogStream::shouldLog()) {
            goto LABEL_106;
          }
          __int32 v41 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          int v42 = 1829;
          goto LABEL_91;
        }
      }
      else
      {
        int v33 = *v32;
        *(_WORD *)(v29 + 7) = *(_WORD *)(a2 + 72);
        *(_DWORD *)(v29 + AppleBCMWLANJoinAdapter::free(this - 3) = v33;
        int v34 = (int *)(a2 + 56);
        if (a2 + 61 < v8
          || (unint64_t)(a2 + 56) >= 0xFFFFFFFFFFFFFFFBLL
          || a2 + 61 > v9
          || v8 > (uint64_t)v34
          || v9 < (uint64_t)v34)
        {
          if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
          {
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            uint64_t v5 = 1;
            if (!CCLogStream::shouldLog()) {
              goto LABEL_106;
            }
            __int32 v41 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            int v42 = 1832;
            goto LABEL_91;
          }
        }
        else
        {
          int v35 = *v34;
          *(_WORD *)(v29 + 1AppleBCMWLANJoinAdapter::free(this - 3) = *(_WORD *)(a2 + 60);
          *(_DWORD *)(v29 + 9) = v35;
          if (!v27)
          {
LABEL_87:
            IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)a1 + 17) + 64), a1, 0x70u, v30, v20, 1);
            uint64_t v5 = 0;
LABEL_106:
            IOFreeData();
            return v5;
          }
          uint64_t v36 = v19 + 2;
          if ((uint64_t)(v19 + 5) < v8
            || (unint64_t)(v19 + 2) >= 0xFFFFFFFFFFFFFFFALL
            || (uint64_t)(v19 + 5) > v9
            || v8 > (uint64_t)v36
            || v9 < (uint64_t)v36)
          {
            if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
            {
              (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              uint64_t v5 = 1;
              if (!CCLogStream::shouldLog()) {
                goto LABEL_106;
              }
              __int32 v41 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              int v42 = 1838;
              goto LABEL_91;
            }
          }
          else
          {
            unsigned int v37 = (unsigned __int16)v19[1];
            BOOL v38 = v37 >= 7;
            unsigned int v39 = v37 - 7;
            if (v38) {
              uint64_t v40 = v39;
            }
            else {
              uint64_t v40 = 0;
            }
            *(_WORD *)(v29 + 16) = v40;
            if (AppleBCMWLANUtil::rangeChecker::withinRangeLocation((AppleBCMWLANUtil::rangeChecker *)v43, (uint64_t)v19 + 11, v40, 0))
            {
              memcpy(v30 + 9, (char *)v19 + 11, v30[8]);
              goto LABEL_87;
            }
            if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
            {
              (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              uint64_t v5 = 1;
              if (!CCLogStream::shouldLog()) {
                goto LABEL_106;
              }
              __int32 v41 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              int v42 = 1843;
              goto LABEL_91;
            }
          }
        }
      }
    }
    uint64_t v5 = 1;
    goto LABEL_106;
  }
  int v18 = 0;
  uint64_t v19 = (_WORD *)(a2 + 88);
  unint64_t v20 = 18;
  while (1)
  {
    BOOL v21 = (uint64_t)v19 + 5 >= v8 && (unint64_t)v19 < 0xFFFFFFFFFFFFFFFBLL;
    BOOL v22 = v21 && (uint64_t)v19 + 5 <= v9;
    BOOL v23 = v22 && v8 <= (uint64_t)v19;
    if (!v23 || v9 < (uint64_t)v19) {
      break;
    }
    uint64_t v25 = (unsigned __int16)v19[1];
    if (*v19 == 774)
    {
      if (v25 <= 7) {
        unint64_t v20 = 18;
      }
      else {
        unint64_t v20 = v25 + 11;
      }
      int v27 = 1;
      goto LABEL_60;
    }
    uint64_t v26 = ((v25 + 3) & 0x1FFFC) + 4;
    v18 += v26;
    uint64_t v19 = (_WORD *)((char *)v19 + v26);
    if (*(unsigned __int16 *)(a2 + 86) <= (unsigned __int16)v18)
    {
      int v27 = 0;
      uint64_t v19 = 0;
      goto LABEL_60;
    }
  }
  if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
    return 1;
  }
  (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
  uint64_t v5 = 1;
  if (CCLogStream::shouldLog()) {
    goto LABEL_26;
  }
  return v5;
}

uint64_t AppleBCMWLANNANInterface::handleNANEventPeerDataPathResponse(IO80211SkywalkInterface *a1, uint64_t a2)
{
  unint64_t v4 = *(unsigned int *)(a2 + 20);
  if (v4 <= 3)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        int64_t v6 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: Invalid event data length %d \n");
      }
      return v5;
    }
    return 1;
  }
  uint64_t v8 = a2 + 48;
  int v7 = *(unsigned __int16 *)(a2 + 48);
  unint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v44 = v4;
  uint64_t v9 = v4 - 1 + a2 + 48;
  BOOL v10 = __CFADD__(v4 - 1, a2 + 48);
  BOOL v11 = !__CFADD__(v4 - 1, a2 + 48);
  v42[0] = a2 + 48;
  v42[1] = v4 - 1 + a2 + 48;
  LOBYTE(v4AppleBCMWLANJoinAdapter::free(this - 3) = v11;
  if (v7 != 1282)
  {
    if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
      return 1;
    }
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    uint64_t v5 = 1;
    if (CCLogStream::shouldLog())
    {
      int64_t v15 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v15, "[dk] %s@%d:ERROR: xtlv type 0x%x mismatch with event\n");
    }
    return v5;
  }
  unint64_t v12 = *(unsigned __int16 *)(a2 + 50);
  if (v12 < 0x24 || v12 + 4 > v4)
  {
    if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
      return 1;
    }
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    uint64_t v5 = 1;
    if (CCLogStream::shouldLog())
    {
      int8x8_t v14 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v14, "[dk] %s@%d:ERROR: Invalid xtlv length %d \n");
    }
    return v5;
  }
  if (v10
    || (uint64_t v17 = a2 + 52, a2 + 87 < v8)
    || (unint64_t)(a2 + 52) >= 0xFFFFFFFFFFFFFFDDLL
    || a2 + 87 > v9
    || v8 > v17
    || v9 < v17)
  {
    if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
      return 1;
    }
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    uint64_t v5 = 1;
    if (!CCLogStream::shouldLog()) {
      return v5;
    }
LABEL_26:
    int v16 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    CCLogStream::logAlert(v16, "[dk] %s@%d: ERROR: Boundary condition detected\n");
    return v5;
  }
  if (!*(_WORD *)(a2 + 86))
  {
    int v27 = 0;
    uint64_t v19 = 0;
    unint64_t v20 = 22;
LABEL_60:
    uint64_t v29 = IOMallocZeroData();
    if (!v29) {
      return 12;
    }
    int v30 = (unsigned __int16 *)v29;
    uint64_t v31 = v20 - 1 + v29;
    if (__CFADD__(v20 - 1, v29)
      || v29 + 21 < v29
      || (unint64_t)v29 >= 0xFFFFFFFFFFFFFFEBLL
      || v29 + 21 > v31
      || v31 < v29)
    {
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v5 = 1;
        if (!CCLogStream::shouldLog()) {
          goto LABEL_90;
        }
        uint64_t v40 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        int v41 = 1914;
LABEL_81:
        CCLogStream::logAlert(v40, "[dk] %s@%d: ERROR: Boundary condition detected\n", "handleNANEventPeerDataPathResponse", v41);
        goto LABEL_90;
      }
    }
    else
    {
      *(unsigned char *)uint64_t v29 = *(unsigned char *)(a2 + 53);
      *(unsigned char *)(v29 + 1) = *(unsigned char *)(a2 + 54);
      int v32 = *(_DWORD *)(a2 + 56);
      *(_WORD *)(v29 + 6) = *(_WORD *)(a2 + 60);
      *(_DWORD *)(v29 + 2) = v32;
      int v33 = *(_DWORD *)(a2 + 68);
      *(_WORD *)(v29 + 12) = *(_WORD *)(a2 + 72);
      *(_DWORD *)(v29 + 8) = v33;
      int v34 = *(_DWORD *)(a2 + 62);
      *(_WORD *)(v29 + 18) = *(_WORD *)(a2 + 66);
      *(_DWORD *)(v29 + 14) = v34;
      if (!v27)
      {
LABEL_77:
        IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)a1 + 17) + 64), a1, 0x71u, v30, v20, 1);
        uint64_t v5 = 0;
LABEL_90:
        IOFreeData();
        return v5;
      }
      int v35 = v19 + 2;
      if ((uint64_t)(v19 + 5) < v8
        || (unint64_t)(v19 + 2) >= 0xFFFFFFFFFFFFFFFALL
        || (uint64_t)(v19 + 5) > v9
        || v8 > (uint64_t)v35
        || v9 < (uint64_t)v35)
      {
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          uint64_t v5 = 1;
          if (!CCLogStream::shouldLog()) {
            goto LABEL_90;
          }
          uint64_t v40 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          int v41 = 1924;
          goto LABEL_81;
        }
      }
      else
      {
        unsigned int v36 = (unsigned __int16)v19[1];
        BOOL v37 = v36 >= 7;
        unsigned int v38 = v36 - 7;
        if (v37) {
          uint64_t v39 = v38;
        }
        else {
          uint64_t v39 = 0;
        }
        *(_WORD *)(v29 + 20) = v39;
        if (AppleBCMWLANUtil::rangeChecker::withinRangeLocation((AppleBCMWLANUtil::rangeChecker *)v42, (uint64_t)v19 + 11, v39, 0))
        {
          memcpy(v30 + 11, (char *)v19 + 11, v30[10]);
          goto LABEL_77;
        }
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          uint64_t v5 = 1;
          if (!CCLogStream::shouldLog()) {
            goto LABEL_90;
          }
          uint64_t v40 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          int v41 = 1929;
          goto LABEL_81;
        }
      }
    }
    uint64_t v5 = 1;
    goto LABEL_90;
  }
  int v18 = 0;
  uint64_t v19 = (_WORD *)(a2 + 88);
  unint64_t v20 = 22;
  while (1)
  {
    BOOL v21 = (uint64_t)v19 + 5 >= v8 && (unint64_t)v19 < 0xFFFFFFFFFFFFFFFBLL;
    BOOL v22 = v21 && (uint64_t)v19 + 5 <= v9;
    BOOL v23 = v22 && v8 <= (uint64_t)v19;
    if (!v23 || v9 < (uint64_t)v19) {
      break;
    }
    uint64_t v25 = (unsigned __int16)v19[1];
    if (*v19 == 774)
    {
      if (v25 <= 7) {
        unint64_t v20 = 22;
      }
      else {
        unint64_t v20 = v25 + 15;
      }
      int v27 = 1;
      goto LABEL_60;
    }
    uint64_t v26 = ((v25 + 3) & 0x1FFFC) + 4;
    v18 += v26;
    uint64_t v19 = (_WORD *)((char *)v19 + v26);
    if (*(unsigned __int16 *)(a2 + 86) <= (unsigned __int16)v18)
    {
      int v27 = 0;
      uint64_t v19 = 0;
      goto LABEL_60;
    }
  }
  if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
    return 1;
  }
  (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
  uint64_t v5 = 1;
  if (CCLogStream::shouldLog()) {
    goto LABEL_26;
  }
  return v5;
}

uint64_t AppleBCMWLANNANInterface::handleNANEventPeerDataPathConfirm(IO80211SkywalkInterface *a1, uint64_t a2)
{
  unint64_t v4 = *(unsigned int *)(a2 + 20);
  if (v4 <= 3)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        int64_t v6 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: Invalid event data length %d \n");
      }
      return v5;
    }
    return 1;
  }
  uint64_t v8 = a2 + 48;
  int v7 = *(unsigned __int16 *)(a2 + 48);
  unint64_t v41 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v42 = v4;
  uint64_t v9 = v4 - 1 + a2 + 48;
  BOOL v10 = __CFADD__(v4 - 1, a2 + 48);
  BOOL v11 = !__CFADD__(v4 - 1, a2 + 48);
  v40[0] = a2 + 48;
  v40[1] = v4 - 1 + a2 + 48;
  LOBYTE(v41) = v11;
  if (v7 != 1282)
  {
    if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
      return 1;
    }
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    uint64_t v5 = 1;
    if (CCLogStream::shouldLog())
    {
      int64_t v15 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v15, "[dk] %s@%d:ERROR: xtlv type 0x%x mismatch with event\n");
    }
    return v5;
  }
  unint64_t v12 = *(unsigned __int16 *)(a2 + 50);
  if (v12 < 0x24 || v12 + 4 > v4)
  {
    if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
      return 1;
    }
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    uint64_t v5 = 1;
    if (CCLogStream::shouldLog())
    {
      int8x8_t v14 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v14, "[dk] %s@%d:ERROR: Invalid xtlv length %d \n");
    }
    return v5;
  }
  if (v10
    || (uint64_t v17 = a2 + 52, a2 + 87 < v8)
    || (unint64_t)(a2 + 52) >= 0xFFFFFFFFFFFFFFDDLL
    || a2 + 87 > v9
    || v8 > v17
    || v9 < v17)
  {
    if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
      return 1;
    }
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    uint64_t v5 = 1;
    if (!CCLogStream::shouldLog()) {
      return v5;
    }
LABEL_26:
    int v16 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    CCLogStream::logAlert(v16, "[dk] %s@%d: ERROR: Boundary condition detected\n");
    return v5;
  }
  int v18 = (_WORD *)(a2 + 88);
  if (a2 + 93 < v8
    || (unint64_t)(a2 + 88) >= 0xFFFFFFFFFFFFFFFBLL
    || a2 + 93 > v9
    || v8 > (uint64_t)v18
    || v9 < (uint64_t)v18)
  {
    if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
      return 1;
    }
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    uint64_t v5 = 1;
    if (!CCLogStream::shouldLog()) {
      return v5;
    }
    goto LABEL_26;
  }
  if (*v18 == 774)
  {
    uint64_t v19 = *(unsigned __int16 *)(a2 + 90);
    uint64_t v20 = IOMallocZeroData();
    if (!v20) {
      return 12;
    }
    BOOL v21 = (unsigned __int16 *)v20;
    unint64_t v38 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v39 = v19 + 9;
    uint64_t v22 = v19 + 8 + v20;
    BOOL v23 = !__CFADD__(v19 + 8, v20);
    v37[0] = v20;
    v37[1] = v19 + 8 + v20;
    LOBYTE(v38) = v23;
    if (__CFADD__(v19 + 8, v20)
      || v20 + 15 < v20
      || (unint64_t)v20 >= 0xFFFFFFFFFFFFFFF1
      || v20 + 15 > v22
      || v22 < v20)
    {
      if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
        goto LABEL_105;
      }
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (!CCLogStream::shouldLog())
      {
LABEL_106:
        IOFreeData();
        return v5;
      }
    }
    else
    {
      *(unsigned char *)uint64_t v20 = *(unsigned char *)(a2 + 53);
      *(unsigned char *)(v20 + 1) = *(unsigned char *)(a2 + 74);
      int64_t v24 = (int *)(a2 + 68);
      if (a2 + 73 < v8
        || (unint64_t)(a2 + 68) >= 0xFFFFFFFFFFFFFFFBLL
        || a2 + 73 > v9
        || v8 > (uint64_t)v24
        || v9 < (uint64_t)v24)
      {
        if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
          goto LABEL_105;
        }
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v5 = 1;
        if (!CCLogStream::shouldLog()) {
          goto LABEL_106;
        }
      }
      else
      {
        uint64_t v25 = (_DWORD *)(v20 + 2);
        if (v20 + 7 < v20
          || (unint64_t)(v20 + 2) >= 0xFFFFFFFFFFFFFFFBLL
          || v20 + 7 > v22
          || v20 > (uint64_t)v25
          || v22 < (uint64_t)v25)
        {
          if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
            goto LABEL_105;
          }
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          uint64_t v5 = 1;
          if (!CCLogStream::shouldLog()) {
            goto LABEL_106;
          }
        }
        else
        {
          int v26 = *v24;
          *(_WORD *)(v20 + 6) = *(_WORD *)(a2 + 72);
          *uint64_t v25 = v26;
          int v27 = (int *)(a2 + 56);
          if (a2 + 61 < v8
            || (unint64_t)(a2 + 56) >= 0xFFFFFFFFFFFFFFFBLL
            || a2 + 61 > v9
            || v8 > (uint64_t)v27
            || v9 < (uint64_t)v27)
          {
            if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
              goto LABEL_105;
            }
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            uint64_t v5 = 1;
            if (!CCLogStream::shouldLog()) {
              goto LABEL_106;
            }
          }
          else
          {
            unint64_t v28 = (_DWORD *)(v20 + 8);
            if (v20 + 13 >= v20
              && (unint64_t)(v20 + 8) < 0xFFFFFFFFFFFFFFFBLL
              && v20 + 13 <= v22
              && v20 <= (uint64_t)v28
              && v22 >= (uint64_t)v28)
            {
              int v29 = *v27;
              *(_WORD *)(v20 + 12) = *(_WORD *)(a2 + 60);
              *unint64_t v28 = v29;
              unsigned int v30 = *(unsigned __int16 *)(a2 + 90);
              if (v30 <= 6)
              {
                if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
                {
                  (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                  uint64_t v5 = 1;
                  if (CCLogStream::shouldLog())
                  {
                    uint64_t v31 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                    CCLogStream::logAlert(v31, "[dk] %s@%d:ERROR: Invalid TLV len\n");
                  }
                  goto LABEL_106;
                }
                goto LABEL_105;
              }
              unsigned __int16 v35 = v30 - 7;
              *(_WORD *)(v20 + 14) = v35;
              unsigned int v36 = (const void *)(a2 + 99);
              if (AppleBCMWLANUtil::rangeChecker::withinRangeLocation((AppleBCMWLANUtil::rangeChecker *)v40, (uint64_t)v36, v35, 0))
              {
                if (AppleBCMWLANUtil::rangeChecker::withinRangeLocation((AppleBCMWLANUtil::rangeChecker *)v37, (uint64_t)(v21 + 8), v21[7], 0))
                {
                  memcpy(v21 + 8, v36, v21[7]);
                  IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)a1 + 17) + 64), a1, 0x72u, v21, v19 + 9, 1);
                  uint64_t v5 = 0;
                  goto LABEL_106;
                }
                if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
                {
                  (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                  uint64_t v5 = 1;
                  if (!CCLogStream::shouldLog()) {
                    goto LABEL_106;
                  }
                  int v34 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                  goto LABEL_82;
                }
              }
              else if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
              {
                (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                uint64_t v5 = 1;
                if (!CCLogStream::shouldLog()) {
                  goto LABEL_106;
                }
                int v34 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                goto LABEL_82;
              }
LABEL_105:
              uint64_t v5 = 1;
              goto LABEL_106;
            }
            if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
              goto LABEL_105;
            }
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            uint64_t v5 = 1;
            if (!CCLogStream::shouldLog()) {
              goto LABEL_106;
            }
          }
        }
      }
    }
    int v34 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
LABEL_82:
    CCLogStream::logAlert(v34, "[dk] %s@%d: ERROR: Boundary condition detected\n");
    goto LABEL_106;
  }
  if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
    return 1;
  }
  (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
  uint64_t v5 = 1;
  if (CCLogStream::shouldLog())
  {
    int v32 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    CCLogStream::logAlert(v32, "[dk] %s@%d:ERROR: optional xtlv type 0x%x mismatch with event\n");
  }
  return v5;
}

uint64_t AppleBCMWLANNANInterface::handleNANEventDataPathEstablished(IO80211SkywalkInterface *a1, uint64_t a2)
{
  unint64_t v4 = *(unsigned int *)(a2 + 20);
  if (v4 <= 3)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        int64_t v6 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: Invalid event data length %d \n");
      }
      return v5;
    }
    return 1;
  }
  uint64_t v7 = a2 + 48;
  uint64_t v8 = v4 - 1 + a2 + 48;
  BOOL v9 = __CFADD__(v4 - 1, a2 + 48);
  if (*(_WORD *)(a2 + 48) == 1282)
  {
    unint64_t v10 = *(unsigned __int16 *)(a2 + 50);
    if (v10 < 0x24 || v10 + 4 > v4)
    {
      if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
        return 1;
      }
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        unint64_t v12 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v12, "[dk] %s@%d:ERROR: Invalid xtlv length %d \n");
      }
    }
    else if (v9 {
           || (uint64_t v14 = a2 + 52, a2 + 87 < v7)
    }
           || (unint64_t)(a2 + 52) >= 0xFFFFFFFFFFFFFFDDLL
           || a2 + 87 > v8
           || v7 > v14
           || v8 < v14)
    {
      if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
        return 1;
      }
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        uint64_t v19 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v19, "[dk] %s@%d: ERROR: Boundary condition detected\n");
      }
    }
    else
    {
      uint64_t Bus = AppleBCMWLANCore::getBus(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64));
      int v16 = (*(uint64_t (**)(uint64_t))(*(void *)Bus + 368))(Bus);
      if ((*(unsigned char *)(a2 + 74) & 0x10) == 0
        && ((v17 = v16, (v16 - 4357) <= 0x15) ? (BOOL v18 = ((1 << (v16 - 5)) & 0x300001) == 0) : (BOOL v18 = 1), v18))
      {
        if ((*(unsigned char *)(a2 + 74) & 0x20) != 0)
        {
          AppleBCMWLANNANInterface::postEventNANDataPathEnd(a1, a2 + 52, 19);
        }
        else if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            BOOL v21 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            CCLogStream::logAlert(v21, "[dk] %s@%d:Datapath Established event received on chip:%u with unknown status: %u, not notifying IO80211\n", "handleNANEventDataPathEstablished", 1725, v17, *(unsigned __int8 *)(a2 + 74));
          }
        }
      }
      else
      {
        bzero((char *)&v30 + 1, 0x80CuLL);
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v22 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            CCLogStream::logAlert(v22, "[dk] %s@%d:Data Path Established with %02x:%02x:%02x:%02x:%02x:%02x, initiator %02x:%02x:%02x:%02x:%02x:%02x, responder %02x:%02x:%02x:%02x:%02x:%02x\n", "handleNANEventDataPathEstablished", 1709, *(unsigned __int8 *)(a2 + 68), *(unsigned __int8 *)(a2 + 69), *(unsigned __int8 *)(a2 + 70), *(unsigned __int8 *)(a2 + 71), *(unsigned __int8 *)(a2 + 72), *(unsigned __int8 *)(a2 + 73), *(unsigned __int8 *)(a2 + 56), *(unsigned __int8 *)(a2 + 57), *(unsigned __int8 *)(a2 + 58), *(unsigned __int8 *)(a2 + 59), *(unsigned __int8 *)(a2 + 60), *(unsigned __int8 *)(a2 + 61), *(unsigned __int8 *)(a2 + 62), *(unsigned __int8 *)(a2 + 63),
              *(unsigned __int8 *)(a2 + 64),
              *(unsigned __int8 *)(a2 + 65),
              *(unsigned __int8 *)(a2 + 66),
              *(unsigned __int8 *)(a2 + 67));
          }
        }
        __int16 v23 = *(_WORD *)(a2 + 52);
        char v24 = *(unsigned char *)(a2 + 54);
        int v25 = *(_DWORD *)(a2 + 56);
        __int16 v26 = *(_WORD *)(a2 + 60);
        int v27 = *(_DWORD *)(a2 + 62);
        __int16 v28 = *(_WORD *)(a2 + 66);
        __int16 v30 = *(_WORD *)(a2 + 72);
        int v29 = *(_DWORD *)(a2 + 68);
        IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)a1 + 17) + 64), a1, 0x75u, &v23, 0x820uLL, 1);
      }
      return 0;
    }
  }
  else
  {
    if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
      return 1;
    }
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    uint64_t v5 = 1;
    if (CCLogStream::shouldLog())
    {
      unsigned int v13 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v13, "[dk] %s@%d:ERROR: xtlv type 0x%x mismatch with event\n");
    }
  }
  return v5;
}

uint64_t AppleBCMWLANNANInterface::handleNANEventDataPathEnd(IO80211SkywalkInterface *a1, uint64_t a2)
{
  unint64_t v4 = *(unsigned int *)(a2 + 20);
  if (v4 <= 3)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        int64_t v6 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: Invalid event data length %d \n");
      }
      return v5;
    }
    return 1;
  }
  uint64_t v7 = a2 + 48;
  uint64_t v8 = v4 - 1 + a2 + 48;
  BOOL v9 = __CFADD__(v4 - 1, a2 + 48);
  if (*(_WORD *)(a2 + 48) == 1282)
  {
    unint64_t v10 = *(unsigned __int16 *)(a2 + 50);
    if (v10 < 0x24 || v10 + 4 > v4)
    {
      if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
        return 1;
      }
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        unint64_t v12 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v12, "[dk] %s@%d:ERROR: Invalid xtlv length %d \n");
      }
    }
    else
    {
      if (!v9)
      {
        uint64_t v16 = a2 + 52;
        if (a2 + 87 >= v7
          && (unint64_t)(a2 + 52) < 0xFFFFFFFFFFFFFFDDLL
          && a2 + 87 <= v8
          && v7 <= v16
          && v8 >= v16)
        {
          AppleBCMWLANNANInterface::postEventNANDataPathEnd(a1, v16, *(unsigned __int8 *)(a2 + 74));
          return 0;
        }
      }
      if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
        return 1;
      }
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v14, "[dk] %s@%d: ERROR: Boundary condition detected\n");
      }
    }
  }
  else
  {
    if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
      return 1;
    }
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    uint64_t v5 = 1;
    if (CCLogStream::shouldLog())
    {
      unsigned int v13 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v13, "[dk] %s@%d:ERROR: xtlv type 0x%x mismatch with event\n");
    }
  }
  return v5;
}

uint64_t AppleBCMWLANNANInterface::handleNANEventRangeRequestIndication(IO80211SkywalkInterface *a1, uint64_t a2)
{
  unint64_t v3 = *(unsigned int *)(a2 + 20);
  if (v3 <= 3)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v4 = 1;
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Invalid event data length %d \n");
      }
      return v4;
    }
    return 1;
  }
  uint64_t v6 = a2 + 48;
  uint64_t v7 = v3 - 1 + a2 + 48;
  BOOL v8 = __CFADD__(v3 - 1, a2 + 48);
  if (*(_WORD *)(a2 + 48) == 1793)
  {
    unint64_t v9 = *(unsigned __int16 *)(a2 + 50);
    if (v9 < 0x10 || v9 + 4 > v3)
    {
      if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
        return 1;
      }
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v4 = 1;
      if (CCLogStream::shouldLog())
      {
        BOOL v11 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v11, "[dk] %s@%d:ERROR: Invalid xtlv length %d \n");
      }
    }
    else
    {
      if (!v8)
      {
        int64_t v15 = (int *)(a2 + 52);
        if (a2 + 67 >= v6
          && (unint64_t)(a2 + 52) < 0xFFFFFFFFFFFFFFF1
          && a2 + 67 <= v7
          && v6 <= (uint64_t)v15
          && v7 >= (uint64_t)v15)
        {
          char v16 = *(unsigned char *)(a2 + 58);
          int v17 = *v15;
          __int16 v18 = *(_WORD *)(a2 + 56);
          IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)a1 + 17) + 64), a1, 0x6Cu, &v16, 7uLL, 1);
          return 0;
        }
      }
      if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
        return 1;
      }
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v4 = 1;
      if (CCLogStream::shouldLog())
      {
        unsigned int v13 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v13, "[dk] %s@%d: ERROR: Boundary condition detected\n");
      }
    }
  }
  else
  {
    if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
      return 1;
    }
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    uint64_t v4 = 1;
    if (CCLogStream::shouldLog())
    {
      unint64_t v12 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v12, "[dk] %s@%d:ERROR: xtlv type 0x%x mismatch with event\n");
    }
  }
  return v4;
}

uint64_t AppleBCMWLANNANInterface::handleNANEventRangeResponseIndication(IO80211SkywalkInterface *a1, uint64_t a2)
{
  unint64_t v3 = *(unsigned int *)(a2 + 20);
  if (v3 <= 3)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v4 = 1;
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Invalid event data length %d \n");
      }
      return v4;
    }
    return 1;
  }
  uint64_t v6 = a2 + 48;
  uint64_t v7 = v3 - 1 + a2 + 48;
  BOOL v8 = __CFADD__(v3 - 1, a2 + 48);
  if (*(_WORD *)(a2 + 48) == 1793)
  {
    unint64_t v9 = *(unsigned __int16 *)(a2 + 50);
    if (v9 < 8 || v9 + 4 > v3)
    {
      if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
        return 1;
      }
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v4 = 1;
      if (CCLogStream::shouldLog())
      {
        BOOL v11 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v11, "[dk] %s@%d:ERROR: Invalid xtlv length %d \n");
      }
    }
    else
    {
      if (!v8)
      {
        int64_t v15 = (int *)(a2 + 52);
        if (a2 + 59 >= v6
          && (unint64_t)(a2 + 52) < 0xFFFFFFFFFFFFFFF9
          && a2 + 59 <= v7
          && v6 <= (uint64_t)v15
          && v7 >= (uint64_t)v15)
        {
          v16[0] = *(unsigned char *)(a2 + 59);
          v16[1] = *(unsigned char *)(a2 + 58);
          int v17 = *v15;
          __int16 v18 = *(_WORD *)(a2 + 56);
          IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)a1 + 17) + 64), a1, 0x6Du, v16, 8uLL, 1);
          return 0;
        }
      }
      if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
        return 1;
      }
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v4 = 1;
      if (CCLogStream::shouldLog())
      {
        unsigned int v13 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v13, "[dk] %s@%d: ERROR: Boundary condition detected\n");
      }
    }
  }
  else
  {
    if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
      return 1;
    }
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    uint64_t v4 = 1;
    if (CCLogStream::shouldLog())
    {
      unint64_t v12 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v12, "[dk] %s@%d:ERROR: xtlv type 0x%x mismatch with event\n");
    }
  }
  return v4;
}

uint64_t AppleBCMWLANNANInterface::handleNANEventRangeReportIndication(IO80211SkywalkInterface *a1, uint64_t a2)
{
  unint64_t v3 = *(unsigned int *)(a2 + 20);
  if (v3 <= 3)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v4 = 1;
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Invalid event data length %d \n");
      }
      return v4;
    }
    return 1;
  }
  uint64_t v6 = a2 + 48;
  uint64_t v7 = v3 - 1 + a2 + 48;
  BOOL v8 = __CFADD__(v3 - 1, a2 + 48);
  if (*(_WORD *)(a2 + 48) == 1793)
  {
    unint64_t v9 = *(unsigned __int16 *)(a2 + 50);
    if (v9 < 0xC || v9 + 4 > v3)
    {
      if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
        return 1;
      }
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v4 = 1;
      if (CCLogStream::shouldLog())
      {
        BOOL v11 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v11, "[dk] %s@%d:ERROR: Invalid xtlv length %d \n");
      }
    }
    else
    {
      if (!v8)
      {
        uint64_t v15 = a2 + 52;
        if (a2 + 63 >= v6
          && (unint64_t)(a2 + 52) < 0xFFFFFFFFFFFFFFF5
          && a2 + 63 <= v7
          && v6 <= v15
          && v7 >= v15)
        {
          *(void *)&_OWORD v18[3] = 0;
          int v16 = *(_DWORD *)(a2 + 52);
          *(_DWORD *)__int16 v18 = *(_DWORD *)(a2 + 56);
          *(_WORD *)&v18[4] = *(_WORD *)(a2 + 60);
          char v17 = *(unsigned char *)(a2 + 63);
          *(_DWORD *)&v18[7] = v16;
          int v19 = 0;
          LOWORD(v19) = *(unsigned __int8 *)(a2 + 62);
          IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)a1 + 17) + 64), a1, 0x6Eu, &v17, 0x10uLL, 1);
          return 0;
        }
      }
      if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
        return 1;
      }
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v4 = 1;
      if (CCLogStream::shouldLog())
      {
        unsigned int v13 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v13, "[dk] %s@%d: ERROR: Boundary condition detected\n");
      }
    }
  }
  else
  {
    if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
      return 1;
    }
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    uint64_t v4 = 1;
    if (CCLogStream::shouldLog())
    {
      unint64_t v12 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v12, "[dk] %s@%d:ERROR: xtlv type 0x%x mismatch with event\n");
    }
  }
  return v4;
}

uint64_t AppleBCMWLANNANInterface::handleNANEventRangeTerminateIndication(IO80211SkywalkInterface *a1, uint64_t a2)
{
  unint64_t v3 = *(unsigned int *)(a2 + 20);
  if (v3 <= 3)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v4 = 1;
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Invalid event data length %d \n");
      }
      return v4;
    }
    return 1;
  }
  uint64_t v6 = a2 + 48;
  uint64_t v7 = v3 - 1 + a2 + 48;
  BOOL v8 = __CFADD__(v3 - 1, a2 + 48);
  if (*(_WORD *)(a2 + 48) == 1793)
  {
    unint64_t v9 = *(unsigned __int16 *)(a2 + 50);
    if (v9 < 8 || v9 + 4 > v3)
    {
      if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
        return 1;
      }
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v4 = 1;
      if (CCLogStream::shouldLog())
      {
        BOOL v11 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v11, "[dk] %s@%d:ERROR: Invalid xtlv length %d \n");
      }
    }
    else
    {
      if (!v8)
      {
        uint64_t v15 = (int *)(a2 + 52);
        if (a2 + 59 >= v6
          && (unint64_t)(a2 + 52) < 0xFFFFFFFFFFFFFFF9
          && a2 + 59 <= v7
          && v6 <= (uint64_t)v15
          && v7 >= (uint64_t)v15)
        {
          *(_WORD *)&v18[1] = 0;
          int v17 = *v15;
          *(_WORD *)__int16 v18 = *(_WORD *)(a2 + 56);
          char v16 = *(unsigned char *)(a2 + 59);
          __int16 v19 = *(unsigned __int8 *)(a2 + 58);
          IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)a1 + 17) + 64), a1, 0x6Fu, &v16, 0xAuLL, 1);
          return 0;
        }
      }
      if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
        return 1;
      }
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v4 = 1;
      if (CCLogStream::shouldLog())
      {
        unsigned int v13 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v13, "[dk] %s@%d: ERROR: Boundary condition detected\n");
      }
    }
  }
  else
  {
    if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
      return 1;
    }
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    uint64_t v4 = 1;
    if (CCLogStream::shouldLog())
    {
      unint64_t v12 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v12, "[dk] %s@%d:ERROR: xtlv type 0x%x mismatch with event\n");
    }
  }
  return v4;
}

uint64_t AppleBCMWLANNANInterface::handleNANEventDWStart(IO80211SkywalkInterface *a1, uint64_t a2)
{
  unint64_t v3 = *(unsigned int *)(a2 + 20);
  if (v3 <= 3)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v4 = 1;
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Invalid event data length %d \n");
      }
      return v4;
    }
    return 1;
  }
  uint64_t v6 = a2 + 48;
  uint64_t v7 = v3 - 1 + a2 + 48;
  BOOL v8 = __CFADD__(v3 - 1, a2 + 48);
  if (*(_WORD *)(a2 + 48) == 261)
  {
    unint64_t v9 = *(unsigned __int16 *)(a2 + 50);
    if (v9 < 0x3C || v9 + 4 > v3)
    {
      if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
        return 1;
      }
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v4 = 1;
      if (CCLogStream::shouldLog())
      {
        BOOL v11 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v11, "[dk] %s@%d:ERROR: Invalid xtlv length %d \n");
      }
    }
    else
    {
      if (v8
        || (uint64_t v14 = a2 + 52, a2 + 111 < v6)
        || (unint64_t)(a2 + 52) >= 0xFFFFFFFFFFFFFFC5
        || a2 + 111 > v7
        || v6 > v14
        || v7 < v14)
      {
        if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
          return 1;
        }
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v4 = 1;
        if (!CCLogStream::shouldLog()) {
          return v4;
        }
LABEL_23:
        unsigned int v13 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v13, "[dk] %s@%d: ERROR: Boundary condition detected\n");
        return v4;
      }
      if (*(_WORD *)(a2 + 110))
      {
        int v15 = 0;
        char v16 = (_WORD *)(a2 + 112);
        while (1)
        {
          if ((uint64_t)v16 + 5 < v6
            || (unint64_t)v16 >= 0xFFFFFFFFFFFFFFFBLL
            || (uint64_t)v16 + 5 > v7
            || v6 > (uint64_t)v16
            || v7 < (uint64_t)v16)
          {
            if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
              return 1;
            }
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            uint64_t v4 = 1;
            if (!CCLogStream::shouldLog()) {
              return v4;
            }
            goto LABEL_23;
          }
          if (*v16 == 3841) {
            break;
          }
          uint64_t v21 = (((unsigned __int16)v16[1] + 3) & 0x1FFFC) + 4;
          v15 += v21;
          char v16 = (_WORD *)((char *)v16 + v21);
          if (*(unsigned __int16 *)(a2 + 110) <= (unsigned __int16)v15) {
            goto LABEL_46;
          }
        }
        uint64_t v22 = v16 + 2;
        __int16 v23 = (char *)v16 + 27;
        BOOL v24 = (unint64_t)(v16 + 2) >= 0xFFFFFFFFFFFFFFE9;
        if ((uint64_t)v23 >= v6 && !v24 && (uint64_t)v23 <= v7 && v6 <= (uint64_t)v22 && v7 >= (uint64_t)v22) {
          goto LABEL_47;
        }
        if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
          return 1;
        }
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v4 = 1;
        if (!CCLogStream::shouldLog()) {
          return v4;
        }
        goto LABEL_23;
      }
LABEL_46:
      uint64_t v22 = 0;
LABEL_47:
      uint64_t v28 = 0;
      long long v27 = 0u;
      memset(v26, 0, sizeof(v26));
      AppleBCMWLANNANInterface::copyDeviceInfo((uint64_t)a1, (uint64_t)v26, v14);
      if (v22)
      {
        WORD1(v28) = *((unsigned __int8 *)v22 + 22);
        LOWORD(v28) = v22[10];
        long long v27 = *(_OWORD *)v22;
        WORD2(v28) = *((unsigned __int8 *)v22 + 23);
      }
      IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)a1 + 17) + 64), a1, 0x7Au, v26, 0x48uLL, 1);
      return 0;
    }
  }
  else
  {
    if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
      return 1;
    }
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    uint64_t v4 = 1;
    if (CCLogStream::shouldLog())
    {
      unint64_t v12 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v12, "[dk] %s@%d:ERROR: xtlv type 0x%x mismatch with event\n");
    }
  }
  return v4;
}

uint64_t AppleBCMWLANNANInterface::handleNANEventDWEnd(IO80211SkywalkInterface *a1, uint64_t a2)
{
  unint64_t v3 = *(unsigned int *)(a2 + 20);
  if (v3 <= 3)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v4 = 1;
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Invalid event data length %d \n");
      }
      return v4;
    }
    return 1;
  }
  uint64_t v6 = a2 + 48;
  uint64_t v7 = v3 - 1 + a2 + 48;
  BOOL v8 = __CFADD__(v3 - 1, a2 + 48);
  if (*(_WORD *)(a2 + 48) == 261)
  {
    unint64_t v9 = *(unsigned __int16 *)(a2 + 50);
    if (v9 < 0x3C || v9 + 4 > v3)
    {
      if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
        return 1;
      }
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v4 = 1;
      if (CCLogStream::shouldLog())
      {
        BOOL v11 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v11, "[dk] %s@%d:ERROR: Invalid xtlv length %d \n");
      }
    }
    else
    {
      if (v8
        || (uint64_t v14 = a2 + 52, a2 + 111 < v6)
        || (unint64_t)(a2 + 52) >= 0xFFFFFFFFFFFFFFC5
        || a2 + 111 > v7
        || v6 > v14
        || v7 < v14)
      {
        if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
          return 1;
        }
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v4 = 1;
        if (!CCLogStream::shouldLog()) {
          return v4;
        }
LABEL_23:
        unsigned int v13 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v13, "[dk] %s@%d: ERROR: Boundary condition detected\n");
        return v4;
      }
      if (*(_WORD *)(a2 + 110))
      {
        int v15 = 0;
        char v16 = (_WORD *)(a2 + 112);
        while (1)
        {
          if ((uint64_t)v16 + 5 < v6
            || (unint64_t)v16 >= 0xFFFFFFFFFFFFFFFBLL
            || (uint64_t)v16 + 5 > v7
            || v6 > (uint64_t)v16
            || v7 < (uint64_t)v16)
          {
            if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
              return 1;
            }
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            uint64_t v4 = 1;
            if (!CCLogStream::shouldLog()) {
              return v4;
            }
            goto LABEL_23;
          }
          if (*v16 == 3841) {
            break;
          }
          uint64_t v21 = (((unsigned __int16)v16[1] + 3) & 0x1FFFC) + 4;
          v15 += v21;
          char v16 = (_WORD *)((char *)v16 + v21);
          if (*(unsigned __int16 *)(a2 + 110) <= (unsigned __int16)v15) {
            goto LABEL_46;
          }
        }
        uint64_t v22 = v16 + 2;
        __int16 v23 = (char *)v16 + 27;
        BOOL v24 = (unint64_t)(v16 + 2) >= 0xFFFFFFFFFFFFFFE9;
        if ((uint64_t)v23 >= v6 && !v24 && (uint64_t)v23 <= v7 && v6 <= (uint64_t)v22 && v7 >= (uint64_t)v22) {
          goto LABEL_47;
        }
        if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
          return 1;
        }
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v4 = 1;
        if (!CCLogStream::shouldLog()) {
          return v4;
        }
        goto LABEL_23;
      }
LABEL_46:
      uint64_t v22 = 0;
LABEL_47:
      uint64_t v28 = 0;
      long long v27 = 0u;
      memset(v26, 0, sizeof(v26));
      AppleBCMWLANNANInterface::copyDeviceInfo((uint64_t)a1, (uint64_t)v26, v14);
      if (v22)
      {
        WORD1(v28) = *((unsigned __int8 *)v22 + 22);
        LOWORD(v28) = v22[10];
        long long v27 = *(_OWORD *)v22;
        WORD2(v28) = *((unsigned __int8 *)v22 + 23);
      }
      IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)a1 + 17) + 64), a1, 0x7Bu, v26, 0x48uLL, 1);
      return 0;
    }
  }
  else
  {
    if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
      return 1;
    }
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    uint64_t v4 = 1;
    if (CCLogStream::shouldLog())
    {
      unint64_t v12 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v12, "[dk] %s@%d:ERROR: xtlv type 0x%x mismatch with event\n");
    }
  }
  return v4;
}

uint64_t AppleBCMWLANNANInterface::handleNANEventChanBoundary(IO80211SkywalkInterface *a1, uint64_t a2)
{
  unint64_t v4 = *(unsigned int *)(a2 + 20);
  if (v4 <= 3)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: Invalid event data length %d \n");
      }
      return v5;
    }
    return 1;
  }
  uint64_t v7 = a2 + 48;
  uint64_t v8 = v4 - 1 + a2 + 48;
  BOOL v9 = __CFADD__(v4 - 1, a2 + 48);
  if (*(_WORD *)(a2 + 48) != 3845)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        unsigned int v13 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v13, "[dk] %s@%d:ERROR: xtlv type 0x%x mismatch with event\n");
      }
      return v5;
    }
    return 1;
  }
  unint64_t v10 = *(unsigned __int16 *)(a2 + 50);
  if (v10 < 0xC || v10 + 4 > v4)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        unint64_t v12 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v12, "[dk] %s@%d:ERROR: Invalid xtlv length %d \n");
      }
      return v5;
    }
    return 1;
  }
  if (v9
    || (uint64_t v14 = a2 + 52, a2 + 63 < v7)
    || (unint64_t)(a2 + 52) >= 0xFFFFFFFFFFFFFFF5
    || a2 + 63 > v8
    || v7 > v14
    || v8 < v14)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog()) {
        goto LABEL_58;
      }
      return v5;
    }
    return 1;
  }
  if (!*(_WORD *)(a2 + 62))
  {
    int v17 = 0;
    char v16 = 0;
LABEL_60:
    long long v33 = 0u;
    memset(v34, 0, 28);
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    uint64_t ChanSpecHandler = (int **)AppleBCMWLANCore::getChanSpecHandler(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64));
    AppleBCMWLANChanSpec::getAppleChannelSpec(ChanSpecHandler, *(unsigned __int16 *)(a2 + 60));
    ChanSpecConvToApple80211Channel();
    *((void *)&v30 + 1) = *(void *)(a2 + 52);
    if (v17)
    {
      long long v27 = (int **)AppleBCMWLANCore::getChanSpecHandler(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64));
      AppleBCMWLANChanSpec::getAppleChannelSpec(v27, *v17);
      ChanSpecConvToApple80211Channel();
      long long v31 = *(_OWORD *)(v17 + 2);
    }
    if (v16)
    {
      long long v32 = *(_OWORD *)(v16 + 4);
      long long v33 = *(_OWORD *)(v16 + 12);
      v34[0] = *(_OWORD *)(v16 + 20);
      *(void *)&v34[1] = *((void *)v16 + 7);
      DWORD2(v34[1]) = *((_DWORD *)v16 + 16);
    }
    IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)a1 + 17) + 64), a1, 0x7Cu, &v29, 0x6CuLL, 1);
    return 0;
  }
  int v15 = 0;
  char v16 = 0;
  int v17 = 0;
  __int16 v18 = (unsigned __int16 *)(a2 + 64);
  while (1)
  {
    if ((uint64_t)v18 + 5 < v7
      || (unint64_t)v18 >= 0xFFFFFFFFFFFFFFFBLL
      || (uint64_t)v18 + 5 > v8
      || v7 > (uint64_t)v18
      || v8 < (uint64_t)v18)
    {
      if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
        return 1;
      }
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (!CCLogStream::shouldLog()) {
        return v5;
      }
      goto LABEL_58;
    }
    int v23 = *v18;
    if (v23 == 3844) {
      break;
    }
    if (v23 == 3843)
    {
      int v17 = v18 + 2;
      if ((uint64_t)v18 + 23 < v7
        || (unint64_t)(v18 + 2) >= 0xFFFFFFFFFFFFFFEDLL
        || (uint64_t)v18 + 23 > v8
        || v7 > (uint64_t)v17
        || v8 < (uint64_t)v17)
      {
        if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
          return 1;
        }
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v5 = 1;
        if (!CCLogStream::shouldLog()) {
          return v5;
        }
        goto LABEL_58;
      }
    }
LABEL_54:
    uint64_t v24 = ((v18[1] + 3) & 0x1FFFC) + 4;
    v15 += v24;
    __int16 v18 = (unsigned __int16 *)((char *)v18 + v24);
    if (*(unsigned __int16 *)(a2 + 62) <= (unsigned __int16)v15) {
      goto LABEL_60;
    }
  }
  char v16 = v18 + 2;
  if ((uint64_t)v18 + 71 >= v7
    && (unint64_t)(v18 + 2) < 0xFFFFFFFFFFFFFFBDLL
    && (uint64_t)v18 + 71 <= v8
    && v7 <= (uint64_t)v16
    && v8 >= (uint64_t)v16)
  {
    goto LABEL_54;
  }
  if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
    return 1;
  }
  (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
  uint64_t v5 = 1;
  if (!CCLogStream::shouldLog()) {
    return v5;
  }
LABEL_58:
  int v25 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
  CCLogStream::logAlert(v25, "[dk] %s@%d: ERROR: Boundary condition detected\n");
  return v5;
}

uint64_t AppleBCMWLANNANInterface::handleEventNANMasterChanged(IO80211SkywalkInterface *a1, uint64_t a2)
{
  unint64_t v4 = *(unsigned int *)(a2 + 20);
  if (v4 <= 3)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: Invalid event data length %d \n");
      }
      return v5;
    }
    return 1;
  }
  uint64_t v7 = a2 + 48;
  uint64_t v8 = v4 - 1 + a2 + 48;
  BOOL v9 = __CFADD__(v4 - 1, a2 + 48);
  if (*(_WORD *)(a2 + 48) == 261)
  {
    unint64_t v10 = *(unsigned __int16 *)(a2 + 50);
    if (v10 < 0x3C || v10 + 4 > v4)
    {
      if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
        return 1;
      }
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        unint64_t v12 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v12, "[dk] %s@%d:ERROR: Invalid xtlv length %d \n");
      }
    }
    else if (v9 {
           || (uint64_t v15 = a2 + 52, a2 + 111 < v7)
    }
           || (unint64_t)(a2 + 52) >= 0xFFFFFFFFFFFFFFC5
           || a2 + 111 > v8
           || v7 > v15
           || v8 < v15)
    {
      if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
        return 1;
      }
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
LABEL_24:
        CCLogStream::logAlert(v14, "[dk] %s@%d: ERROR: Boundary condition detected\n");
      }
    }
    else
    {
      int v27 = 0;
      memset(v26, 0, sizeof(v26));
      AppleBCMWLANNANInterface::copyDeviceInfo((uint64_t)a1, (uint64_t)v26, v15);
      if (*(_WORD *)(a2 + 110))
      {
        char v16 = 0;
        int v17 = 0;
        __int16 v18 = (_WORD *)(a2 + 112);
        while (1)
        {
          BOOL v19 = (uint64_t)v18 + 5 >= v7 && (unint64_t)v18 < 0xFFFFFFFFFFFFFFFBLL;
          BOOL v20 = v19 && (uint64_t)v18 + 5 <= v8;
          BOOL v21 = v20 && v7 <= (uint64_t)v18;
          if (!v21 || v8 < (uint64_t)v18) {
            break;
          }
          if (*v18 == 1026) {
            char v16 = (char *)(v18 + 2);
          }
          uint64_t v23 = (((unsigned __int16)v18[1] + 3) & 0x1FFFC) + 4;
          v17 += v23;
          __int16 v18 = (_WORD *)((char *)v18 + v23);
          if (*(unsigned __int16 *)(a2 + 110) <= (unsigned __int16)v17)
          {
            if (v16)
            {
              char v24 = *v16;
              if (v24) {
                v27 |= 1u;
              }
              if ((v24 & 2) != 0) {
                v27 |= 2u;
              }
            }
            goto LABEL_54;
          }
        }
        if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
          return 1;
        }
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v5 = 1;
        if (CCLogStream::shouldLog())
        {
          uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          goto LABEL_24;
        }
      }
      else
      {
LABEL_54:
        IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)a1 + 17) + 64), a1, 0x60u, v26, 0x34uLL, 1);
        return 0;
      }
    }
  }
  else
  {
    if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
      return 1;
    }
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    uint64_t v5 = 1;
    if (CCLogStream::shouldLog())
    {
      unsigned int v13 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v13, "[dk] %s@%d:ERROR: xtlv type 0x%x mismatch with event\n");
    }
  }
  return v5;
}

uint64_t AppleBCMWLANNANInterface::handleEventNANHostAssistRequest(AppleBCMWLANNANInterface *a1, uint64_t a2)
{
  unint64_t v4 = *(unsigned int *)(a2 + 20);
  if (v4 <= 3)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: Invalid event data length %d \n");
      }
      return v5;
    }
    return 1;
  }
  uint64_t v7 = a2 + 48;
  uint64_t v8 = v4 - 1 + a2 + 48;
  BOOL v9 = __CFADD__(v4 - 1, a2 + 48);
  if (*(_WORD *)(a2 + 48) == 1538)
  {
    unint64_t v10 = *(unsigned __int16 *)(a2 + 50);
    if (v10 < 0x12 || v10 + 4 > v4)
    {
      if (!(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1)) {
        return 1;
      }
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        unint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v12, "[dk] %s@%d:ERROR: Invalid xtlv length %d \n");
      }
    }
    else
    {
      if (!v9)
      {
        char v16 = (int *)(a2 + 52);
        if (a2 + 69 >= v7
          && (unint64_t)(a2 + 52) < 0xFFFFFFFFFFFFFFEFLL
          && a2 + 69 <= v8
          && v7 <= (uint64_t)v16
          && v8 >= (uint64_t)v16)
        {
          uint64_t v21 = 0;
          v17[0] = *(unsigned char *)(a2 + 64);
          v17[1] = *(unsigned char *)(a2 + 67);
          int v18 = *(_DWORD *)(a2 + 58);
          __int16 v19 = *(_WORD *)(a2 + 62);
          int v20 = *v16;
          LOWORD(v21) = *(_WORD *)(a2 + 56);
          AppleBCMWLANNANInterface::convertNANFWFrameType(a1, *(unsigned char *)(a2 + 65), (unsigned __int8 *)&v21 + 2, (unsigned __int8 *)&v21 + 3);
          AppleBCMWLANNANInterface::convertNANFWHostAssistReason((uint64_t)a1, *(unsigned __int8 *)(a2 + 66), (int *)&v21 + 1);
          IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)a1 + 17) + 64), a1, 0x81u, v17, 0x14uLL, 1);
          return 0;
        }
      }
      if (!(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1)) {
        return 1;
      }
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v14, "[dk] %s@%d: ERROR: Boundary condition detected\n");
      }
    }
  }
  else
  {
    if (!(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1)) {
      return 1;
    }
    (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
    uint64_t v5 = 1;
    if (CCLogStream::shouldLog())
    {
      unsigned int v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v13, "[dk] %s@%d:ERROR: xtlv type 0x%x mismatch with event\n");
    }
  }
  return v5;
}

uint64_t AppleBCMWLANNANInterface::handleEventNANPeerScheduleUpdate(IO80211SkywalkInterface *a1, uint64_t a2)
{
  unint64_t v3 = *(unsigned int *)(a2 + 20);
  if (v3 <= 3)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v4 = 1;
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Invalid event data length %d \n");
      }
      return v4;
    }
    return 1;
  }
  uint64_t v7 = a2 + 48;
  int v6 = *(unsigned __int16 *)(a2 + 48);
  unint64_t v44 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v45 = v3;
  uint64_t v8 = v3 - 1 + a2 + 48;
  BOOL v9 = __CFADD__(v3 - 1, a2 + 48);
  BOOL v10 = !__CFADD__(v3 - 1, a2 + 48);
  v43[0] = a2 + 48;
  v43[1] = v3 - 1 + a2 + 48;
  LOBYTE(v44) = v10;
  if (v6 != 2305)
  {
    if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
      return 1;
    }
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    uint64_t v4 = 1;
    if (CCLogStream::shouldLog())
    {
      uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v14, "[dk] %s@%d:ERROR: tlv type 0x%x mismatch with event\n");
    }
    return v4;
  }
  unint64_t v11 = *(unsigned __int16 *)(a2 + 50);
  if (v11 < 0xA || v11 + 4 > v3)
  {
    if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
      return 1;
    }
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    uint64_t v4 = 1;
    if (CCLogStream::shouldLog())
    {
      unsigned int v13 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v13, "[dk] %s@%d:ERROR: Invalid xtlv length %d \n");
    }
    return v4;
  }
  if (v9
    || (uint64_t v15 = a2 + 52, a2 + 61 < v7)
    || (unint64_t)(a2 + 52) >= 0xFFFFFFFFFFFFFFF7
    || a2 + 61 > v8
    || v7 > v15
    || v8 < v15)
  {
    if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
      return 1;
    }
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    uint64_t v4 = 1;
    if (!CCLogStream::shouldLog()) {
      return v4;
    }
LABEL_53:
    int v27 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    CCLogStream::logAlert(v27, "[dk] %s@%d: ERROR: Boundary condition detected\n");
    return v4;
  }
  if (!*(_WORD *)(a2 + 60))
  {
    char v16 = 0;
LABEL_55:
    char v24 = 1;
    unint64_t v26 = 8;
LABEL_56:
    uint64_t v28 = IOMallocZeroData();
    if (!v28) {
      return 12;
    }
    long long v29 = (unsigned __int16 *)v28;
    unint64_t v41 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v42 = v26;
    BOOL v30 = !__CFADD__(v26 - 1, v28);
    v40[0] = v28;
    v40[1] = v26 - 1 + v28;
    LOBYTE(v41) = v30;
    int v31 = *(_DWORD *)v15;
    *(_WORD *)(v28 + 4) = *(_WORD *)(v15 + 4);
    *(_DWORD *)uint64_t v28 = v31;
    if (v24) {
      goto LABEL_61;
    }
    uint64_t v33 = (uint64_t)(v16 + 2);
    if ((uint64_t)(v16 + 5) < v7
      || (unint64_t)(v16 + 2) >= 0xFFFFFFFFFFFFFFFALL
      || (uint64_t)(v16 + 5) > v8
      || v7 > v33
      || v8 < v33)
    {
      if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
        goto LABEL_89;
      }
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v4 = 1;
      if (!CCLogStream::shouldLog()) {
        goto LABEL_90;
      }
      unint64_t v38 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      int v39 = 2751;
    }
    else
    {
      unsigned int v34 = (unsigned __int16)v16[1];
      BOOL v35 = v34 >= 7;
      unsigned int v36 = v34 - 7;
      if (v35) {
        uint64_t v37 = v36;
      }
      else {
        uint64_t v37 = 0;
      }
      *(_WORD *)(v28 + 6) = v37;
      if (AppleBCMWLANUtil::rangeChecker::withinRangeLocation((AppleBCMWLANUtil::rangeChecker *)v40, v28 + 8, v37, 0))
      {
        if (AppleBCMWLANUtil::rangeChecker::withinRangeLocation((AppleBCMWLANUtil::rangeChecker *)v43, (uint64_t)v16 + 11, v29[3], 0))
        {
          memcpy(v29 + 4, (char *)v16 + 11, v29[3]);
LABEL_61:
          IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)a1 + 17) + 64), a1, 0x82u, v29, v26, 1);
          uint64_t v4 = 0;
LABEL_90:
          IOFreeData();
          return v4;
        }
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          uint64_t v4 = 1;
          if (!CCLogStream::shouldLog()) {
            goto LABEL_90;
          }
          unint64_t v38 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          int v39 = 2757;
          goto LABEL_88;
        }
LABEL_89:
        uint64_t v4 = 1;
        goto LABEL_90;
      }
      if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
        goto LABEL_89;
      }
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v4 = 1;
      if (!CCLogStream::shouldLog()) {
        goto LABEL_90;
      }
      unint64_t v38 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      int v39 = 2756;
    }
LABEL_88:
    CCLogStream::logAlert(v38, "[dk] %s@%d: ERROR: Boundary condition detected\n", "handleEventNANPeerScheduleUpdate", v39);
    goto LABEL_90;
  }
  char v16 = 0;
  int v17 = 0;
  int v18 = (_WORD *)(a2 + 62);
  while (1)
  {
    BOOL v19 = (uint64_t)v18 + 5 >= v7 && (unint64_t)v18 < 0xFFFFFFFFFFFFFFFBLL;
    BOOL v20 = v19 && (uint64_t)v18 + 5 <= v8;
    BOOL v21 = v20 && v7 <= (uint64_t)v18;
    if (!v21 || v8 < (uint64_t)v18) {
      break;
    }
    if (*v18 == 774) {
      char v16 = v18;
    }
    uint64_t v23 = (((unsigned __int16)v18[1] + 3) & 0x1FFFC) + 4;
    v17 += v23;
    int v18 = (_WORD *)((char *)v18 + v23);
    if (*(unsigned __int16 *)(a2 + 60) <= (unsigned __int16)v17)
    {
      if (!v16) {
        goto LABEL_55;
      }
      char v24 = 0;
      uint64_t v25 = (unsigned __int16)v16[1];
      if (v25 > 7) {
        unint64_t v26 = v25 + 1;
      }
      else {
        unint64_t v26 = 8;
      }
      goto LABEL_56;
    }
  }
  if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
    return 1;
  }
  (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
  uint64_t v4 = 1;
  if (CCLogStream::shouldLog()) {
    goto LABEL_53;
  }
  return v4;
}

uint64_t AppleBCMWLANNANInterface::handleEventNANFWDataPathTerminated(IO80211SkywalkInterface *a1, uint64_t a2)
{
  unint64_t v4 = *(unsigned int *)(a2 + 20);
  if (v4 > 3)
  {
    uint64_t v7 = a2 + 48;
    uint64_t v8 = v4 - 1 + a2 + 48;
    BOOL v9 = __CFADD__(v4 - 1, a2 + 48);
    if (*(_WORD *)(a2 + 48) == 1282)
    {
      unint64_t v10 = *(unsigned __int16 *)(a2 + 50);
      if (v10 < 0x24 || v10 + 4 > v4)
      {
        if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
          return 1;
        }
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v5 = 1;
        if (CCLogStream::shouldLog())
        {
          unint64_t v12 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logAlert(v12, "[dk] %s@%d:ERROR: Invalid xtlv length %d \n");
          return 1;
        }
      }
      else if (v9 {
             || (uint64_t v16 = a2 + 52, a2 + 87 < v7)
      }
             || (unint64_t)(a2 + 52) >= 0xFFFFFFFFFFFFFFDDLL
             || a2 + 87 > v8
             || v7 > v16
             || v8 < v16)
      {
        if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
          return 1;
        }
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v5 = 1;
        if (CCLogStream::shouldLog())
        {
          uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logAlert(v14, "[dk] %s@%d: ERROR: Boundary condition detected\n");
          return 1;
        }
      }
      else
      {
        uint64_t v5 = *(unsigned __int8 *)(a2 + 74);
        switch(*(unsigned char *)(a2 + 74))
        {
          case 0:
            return v5;
          case 1:
            int v17 = "Error";
            goto LABEL_51;
          case 2:
            int v17 = "Host";
            goto LABEL_51;
          case 3:
            int v17 = "Host-Rejected";
            goto LABEL_51;
          case 4:
            int v17 = "Resource Limitation";
            goto LABEL_51;
          case 5:
            int v17 = "No Ack";
            goto LABEL_51;
          case 6:
            AppleBCMWLANNANInterface::postEventNANDataPathEnd(a1, v16, 18);
            int v17 = "Timeout";
            goto LABEL_51;
          case 7:
            int v17 = "No Elt";
            goto LABEL_51;
          case 8:
            int v17 = "No NDP Attr";
            goto LABEL_51;
          case 9:
            int v17 = "No Avail attr";
            goto LABEL_51;
          case 0xA:
            int v17 = "No Ndc Attr";
            goto LABEL_51;
          case 0xB:
            int v17 = "No Range Bmap";
            goto LABEL_51;
          case 0xC:
            int v17 = "Invalid NDP Attr";
            goto LABEL_51;
          case 0xD:
            int v17 = "Invalid NDC Attr";
            goto LABEL_51;
          case 0xE:
            int v17 = "Invalid Immut";
            goto LABEL_51;
          case 0xF:
            int v17 = "Invalid NDL QoS";
            goto LABEL_51;
          case 0x10:
            int v17 = "Invalid Security";
            goto LABEL_51;
          case 0x11:
            int v17 = "Avail reject";
            goto LABEL_51;
          case 0x12:
            int v17 = "NDL reject";
            goto LABEL_51;
          default:
            int v17 = (const char *)&unk_10029A2CA;
LABEL_51:
            if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
            {
              (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              if (CCLogStream::shouldLog())
              {
                int v18 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                CCLogStream::logAlert(v18, "[dk] %s@%d:DataPath terminated due to %s \n", "handleEventNANFWDataPathTerminated", 2860, v17);
              }
            }
            uint64_t v5 = 0;
            break;
        }
      }
    }
    else
    {
      if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
        return 1;
      }
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        unsigned int v13 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v13, "[dk] %s@%d:ERROR: xtlv type 0x%x mismatch with event\n");
        return 1;
      }
    }
  }
  else
  {
    if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
      return 1;
    }
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    uint64_t v5 = 1;
    if (CCLogStream::shouldLog())
    {
      int v6 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: Invalid event data length %d \n");
      return 1;
    }
  }
  return v5;
}

uint64_t AppleBCMWLANNANInterface::handleNANEventOobActionFrameTxStatus(IO80211SkywalkInterface *a1, uint64_t a2)
{
  unint64_t v3 = *(unsigned int *)(a2 + 20);
  if (v3 <= 3)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        unint64_t v4 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v4, "[dk] %s@%d:ERROR: Invalid event data length %d \n");
      }
    }
    return 22;
  }
  uint64_t v5 = a2 + 48;
  uint64_t v6 = v3 - 1 + a2 + 48;
  BOOL v7 = __CFADD__(v3 - 1, a2 + 48);
  if (*(_WORD *)(a2 + 48) != 2051)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v17 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v17, "[dk] %s@%d:ERROR: xtlv type 0x%x mismatch with event\n");
      }
    }
    return 22;
  }
  unint64_t v8 = *(unsigned __int16 *)(a2 + 50);
  if (v8 < 4 || v8 + 4 > v3)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        unint64_t v10 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v10, "[dk] %s@%d:ERROR: Invalid xtlv length %d \n");
      }
    }
    return 22;
  }
  if (v7
    || (uint64_t v14 = a2 + 52, a2 + 55 < v5)
    || (unint64_t)(a2 + 52) >= 0xFFFFFFFFFFFFFFFDLL
    || a2 + 55 > v6
    || v5 > v14
    || v6 < v14)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v11 = 1;
      if (CCLogStream::shouldLog())
      {
        unsigned int v13 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v13, "[dk] %s@%d: ERROR: Boundary condition detected\n", "handleNANEventOobActionFrameTxStatus", 2894);
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    int v15 = *(unsigned __int8 *)(a2 + 52);
    __int16 v18 = *(_WORD *)(a2 + 54);
    if (*(unsigned __int8 *)(a2 + 53) - 1 < 3) {
      int v16 = (*(unsigned char *)(a2 + 53) - 1) + 1;
    }
    else {
      int v16 = 4;
    }
    int v19 = v15;
    int v20 = v16;
    IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)a1 + 17) + 64), a1, 0x9Eu, &v18, 0xAuLL, 1);
    return 0;
  }
  return v11;
}

uint64_t AppleBCMWLANNANInterface::handleNANEventOobActionFrameRx(IO80211SkywalkInterface *a1, uint64_t a2)
{
  int v51 = 0;
  uint64_t v50 = 0;
  unint64_t v4 = *(unsigned int *)(a2 + 20);
  if (v4 <= 3)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Invalid event data length %d \n");
      }
    }
    return 22;
  }
  uint64_t v7 = a2 + 48;
  int v6 = *(unsigned __int16 *)(a2 + 48);
  unint64_t v48 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v49 = v4;
  uint64_t v8 = v4 - 1 + a2 + 48;
  BOOL v9 = __CFADD__(v4 - 1, a2 + 48);
  BOOL v10 = !__CFADD__(v4 - 1, a2 + 48);
  v47[0] = a2 + 48;
  v47[1] = v4 - 1 + a2 + 48;
  LOBYTE(v48) = v10;
  if (v6 == 512)
  {
    uint64_t v13 = 24;
    uint64_t v14 = 52;
    uint64_t v15 = 56;
  }
  else
  {
    if (v6 == 2051)
    {
      char v11 = 0;
      unint64_t v12 = (_WORD *)(a2 + 48);
      goto LABEL_18;
    }
    uint64_t v13 = 16;
    uint64_t v14 = 50;
    uint64_t v15 = 52;
  }
  unsigned int v16 = *(_DWORD *)(a2 + v15);
  unsigned int v17 = *(unsigned __int16 *)(a2 + v14);
  uint64_t ChanSpecHandler = (int **)AppleBCMWLANCore::getChanSpecHandler(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64));
  AppleBCMWLANChanSpec::getAppleChannelSpec(ChanSpecHandler, bswap32(v17) >> 16);
  ChanSpecConvToApple80211Channel();
  unint64_t v12 = (_WORD *)(v7 + v13);
  if (*v12 != 2051)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v22 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v22, "[dk] %s@%d:ERROR: xtlv type 0x%x mismatch with event\n");
      }
    }
    return 22;
  }
  char v11 = bswap32(v16);
  unint64_t v4 = *(unsigned int *)(a2 + 20);
LABEL_18:
  unint64_t v19 = (unsigned __int16)v12[1];
  if (v19 < 0x14 || v19 + 4 > v4)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        unint64_t v42 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v42, "[dk] %s@%d:ERROR: Invalid xtlv length %d \n");
      }
    }
    return 22;
  }
  if (v9
    || (char v24 = (int *)(v12 + 2), (uint64_t)v12 + 23 < v7)
    || (unint64_t)(v12 + 2) >= 0xFFFFFFFFFFFFFFEDLL
    || (uint64_t)v12 + 23 > v8
    || v7 > (uint64_t)v24
    || v8 < (uint64_t)v24)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v20 = 1;
      if (CCLogStream::shouldLog())
      {
        BOOL v21 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v21, "[dk] %s@%d: ERROR: Boundary condition detected\n", "handleNANEventOobActionFrameRx", 2970);
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    uint64_t v25 = (unsigned __int16)v12[11];
    uint64_t v26 = IOMallocZeroData();
    if (v26)
    {
      uint64_t v27 = v26;
      unint64_t v45 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v46 = v25 + 33;
      uint64_t v28 = v25 + 32 + v26;
      BOOL v29 = __CFADD__(v25 + 32, v26);
      BOOL v30 = !__CFADD__(v25 + 32, v26);
      v44[0] = v26;
      v44[1] = v25 + 32 + v26;
      LOBYTE(v45) = v30;
      uint64_t v31 = (unsigned __int16)v12[11];
      *(unsigned char *)(v26 + 30) = v11;
      *(void *)(v26 + 18) = v50;
      *(_DWORD *)(v26 + 26) = v51;
      *(_WORD *)(v26 + 31) = v31;
      if ((uint64_t)v12 + 9 < v7 || (uint64_t)v12 + 9 > v8)
      {
        if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
          goto LABEL_103;
        }
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v20 = 1;
        if (!CCLogStream::shouldLog()) {
          goto LABEL_104;
        }
        uint64_t v40 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        int v41 = 2997;
      }
      else
      {
        if (!v29)
        {
          long long v32 = (_DWORD *)(v26 + 6);
          if (v26 + 11 >= v26
            && (unint64_t)(v26 + 6) < 0xFFFFFFFFFFFFFFFBLL
            && v26 + 11 <= v28
            && v26 <= (uint64_t)v32
            && v28 >= (uint64_t)v32)
          {
            int v33 = *v24;
            *(_WORD *)(v26 + 10) = v12[4];
            *long long v32 = v33;
            unsigned int v34 = (int *)(v12 + 5);
            if ((uint64_t)v12 + 15 < v7
              || (unint64_t)(v12 + 5) >= 0xFFFFFFFFFFFFFFFBLL
              || (uint64_t)v12 + 15 > v8
              || v7 > (uint64_t)v34
              || v8 < (uint64_t)v34)
            {
              if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
              {
                (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                uint64_t v20 = 1;
                if (!CCLogStream::shouldLog()) {
                  goto LABEL_104;
                }
                uint64_t v40 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                int v41 = 3001;
                goto LABEL_84;
              }
            }
            else if (v26 + 5 < v26 || (unint64_t)v26 >= 0xFFFFFFFFFFFFFFFBLL || v26 + 5 > v28)
            {
              if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
              {
                (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                uint64_t v20 = 1;
                if (!CCLogStream::shouldLog()) {
                  goto LABEL_104;
                }
                uint64_t v40 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                int v41 = 3002;
                goto LABEL_84;
              }
            }
            else
            {
              int v35 = *v34;
              *(_WORD *)(v26 + 4) = v12[7];
              *(_DWORD *)uint64_t v26 = v35;
              unsigned int v36 = v12 + 8;
              if ((uint64_t)v12 + 21 < v7
                || (unint64_t)(v12 + 8) >= 0xFFFFFFFFFFFFFFFBLL
                || (uint64_t)v12 + 21 > v8
                || v7 > (uint64_t)v36
                || v8 < (uint64_t)v36)
              {
                if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
                {
                  (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                  uint64_t v20 = 1;
                  if (!CCLogStream::shouldLog()) {
                    goto LABEL_104;
                  }
                  uint64_t v40 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                  int v41 = 3005;
                  goto LABEL_84;
                }
              }
              else
              {
                uint64_t v37 = (_DWORD *)(v26 + 12);
                if (v26 + 17 < v26
                  || (unint64_t)(v26 + 12) >= 0xFFFFFFFFFFFFFFFBLL
                  || v26 + 17 > v28
                  || v26 > (uint64_t)v37
                  || v28 < (uint64_t)v37)
                {
                  if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
                  {
                    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                    uint64_t v20 = 1;
                    if (!CCLogStream::shouldLog()) {
                      goto LABEL_104;
                    }
                    uint64_t v40 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                    int v41 = 3006;
                    goto LABEL_84;
                  }
                }
                else
                {
                  unint64_t v38 = v12 + 12;
                  int v39 = *(_DWORD *)v36;
                  *(_WORD *)(v26 + 16) = v36[2];
                  *uint64_t v37 = v39;
                  if (AppleBCMWLANUtil::rangeChecker::withinRangeLocation((AppleBCMWLANUtil::rangeChecker *)v47, (uint64_t)v38, v31, 0))
                  {
                    if (AppleBCMWLANUtil::rangeChecker::withinRangeLocation((AppleBCMWLANUtil::rangeChecker *)v44, v27 + 33, *(unsigned __int16 *)(v27 + 31), 0))
                    {
                      memcpy((void *)(v27 + 33), v38, *(unsigned __int16 *)(v27 + 31));
                      IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)a1 + 17) + 64), a1, 0x9Fu, (void *)v27, v25 + 33, 1);
                      uint64_t v20 = 0;
LABEL_104:
                      IOFreeData();
                      return v20;
                    }
                    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
                    {
                      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                      uint64_t v20 = 1;
                      if (!CCLogStream::shouldLog()) {
                        goto LABEL_104;
                      }
                      uint64_t v40 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                      int v41 = 3010;
                      goto LABEL_84;
                    }
                  }
                  else if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
                  {
                    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                    uint64_t v20 = 1;
                    if (!CCLogStream::shouldLog()) {
                      goto LABEL_104;
                    }
                    uint64_t v40 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                    int v41 = 3009;
                    goto LABEL_84;
                  }
                }
              }
            }
LABEL_103:
            uint64_t v20 = 1;
            goto LABEL_104;
          }
        }
        if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
          goto LABEL_103;
        }
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v20 = 1;
        if (!CCLogStream::shouldLog()) {
          goto LABEL_104;
        }
        uint64_t v40 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        int v41 = 2998;
      }
LABEL_84:
      CCLogStream::logAlert(v40, "[dk] %s@%d: ERROR: Boundary condition detected\n", "handleNANEventOobActionFrameRx", v41);
      goto LABEL_104;
    }
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        unint64_t v43 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v43, "[dk] %s@%d:ERROR: AutoreleasedBuffer alloc failure\n", "handleNANEventOobActionFrameRx", 2979);
      }
    }
    return 12;
  }
  return v20;
}

uint64_t AppleBCMWLANNANInterface::handelNANEventInfraAssociatioStart(IO80211SkywalkInterface *a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a2 + 20);
  if (v4 <= 0xB)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        int v6 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: Invalid event data length %d \n");
      }
      return v5;
    }
    return 1;
  }
  int64_t v7 = a2 + 48;
  uint64_t v8 = v4 - 1;
  BOOL v9 = __CFADD__(v8, a2 + 48);
  int64_t v10 = v8 + a2 + 48;
  if (v9
    || a2 + 59 < v7
    || (unint64_t)v7 >= 0xFFFFFFFFFFFFFFF5
    || (a2 + 59 <= v10 ? (BOOL v11 = v10 < v7) : (BOOL v11 = 1), v11))
  {
    if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
      return 1;
    }
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    uint64_t v5 = 1;
    if (CCLogStream::shouldLog())
    {
      uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v13, "[dk] %s@%d: ERROR: Boundary condition detected\n");
    }
  }
  else
  {
    int v17 = 0;
    uint64_t v16 = 0;
    uint64_t ChanSpecHandler = (int **)AppleBCMWLANCore::getChanSpecHandler(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64));
    AppleBCMWLANChanSpec::getAppleChannelSpec(ChanSpecHandler, *(unsigned __int16 *)(a2 + 56));
    ChanSpecConvToApple80211Channel();
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v15 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v15, "[dk] %s@%d:Association start on channel %d bw 0x%x\n", "handelNANEventInfraAssociatioStart", 2435, HIDWORD(v16), v17);
      }
    }
    IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)a1 + 17) + 64), a1, 0x7Fu, &v16, 0xCuLL, 1);
    return 0;
  }
  return v5;
}

uint64_t AppleBCMWLANNANInterface::handleNANEventQuiteIE(IO80211SkywalkInterface *a1)
{
  char v4 = 0;
  if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
  {
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      unint64_t v3 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v3, "[dk] %s@%d:%s:%u Quite IE received\n", "handleNANEventQuiteIE", 2410, "handleNANEventQuiteIE", 2410);
    }
  }
  IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)a1 + 17) + 64), a1, 0xBCu, &v4, 1uLL, 1);
  return 0;
}

void AppleBCMWLANNANInterface::copyDeviceInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a2 = *(unsigned char *)(a3 + 6);
  *(unsigned char *)(a2 + 7) = *(unsigned char *)(a3 + 44) == 2;
  int v3 = *(_DWORD *)(a3 + 8);
  *(_WORD *)(a2 + 17) = *(_WORD *)(a3 + 12);
  *(_DWORD *)(a2 + 1AppleBCMWLANJoinAdapter::free(this - 3) = v3;
  int v4 = *(_DWORD *)(a3 + 46);
  *(_WORD *)(a2 + 31) = *(_WORD *)(a3 + 50);
  *(_DWORD *)(a2 + 27) = v4;
  *(unsigned char *)(a2 + 3AppleBCMWLANJoinAdapter::free(this - 3) = *(unsigned char *)(a3 + 53);
  *(unsigned char *)(a2 + 34) = *(unsigned char *)(a3 + 52);
  int v5 = *(_DWORD *)(a3 + 24);
  *(_WORD *)(a2 + 2AppleBCMWLANJoinAdapter::free(this - 3) = *(_WORD *)(a3 + 28);
  *(_DWORD *)(a2 + 19) = v5;
  *(unsigned char *)(a2 + 25) = *(unsigned char *)(a3 + 31);
  *(unsigned char *)(a2 + 26) = *(unsigned char *)(a3 + 30);
  unint64_t v6 = *(unsigned __int8 *)(a3 + 7);
  unint64_t v7 = 0x10200uLL >> (8 * v6);
  BOOL v8 = v6 >= 5;
  if (v6 >= 5) {
    char v9 = 0;
  }
  else {
    char v9 = 0x102030300uLL >> (8 * v6);
  }
  if (v8) {
    LOBYTE(v7) = 0;
  }
  *(unsigned char *)(a2 + 8) = v9;
  *(unsigned char *)(a2 + 9) = v7;
  *(unsigned char *)(a2 + 10) = *(unsigned char *)(a3 + 23);
  *(unsigned char *)(a2 + 11) = *(unsigned char *)(a3 + 22);
  *(unsigned char *)(a2 + 12) = *(unsigned char *)(a3 + 45);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a3 + 36);
  *(_DWORD *)(a2 + 44) = *(_DWORD *)(a3 + 40);
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a3 + 32);
}

const char *AppleBCMWLANNANInterface::stringForFrameType(AppleBCMWLANNANInterface *this, int a2)
{
  if ((a2 - 1) > 0x10) {
    return "Invalid";
  }
  else {
    return off_100384738[(char)(a2 - 1)];
  }
}

void AppleBCMWLANNANInterface::convertNANFWFrameType(AppleBCMWLANNANInterface *this, char a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  char v4 = a2 - 1;
  if ((a2 - 1) > 0xFu)
  {
    unsigned __int8 v6 = 0;
    unsigned __int8 v5 = 24;
  }
  else
  {
    unsigned __int8 v5 = byte_1003049A0[v4];
    unsigned __int8 v6 = byte_1003049B0[v4];
  }
  *a3 = v5;
  *a4 = v6;
}

uint64_t AppleBCMWLANNANInterface::postEventNANDataPathEnd(IO80211SkywalkInterface *a1, uint64_t a2, int a3)
{
  uint64_t v10 = 0;
  long long v11 = 0uLL;
  int v12 = 0;
  int v4 = *(_DWORD *)(a2 + 4);
  int v5 = *(unsigned __int8 *)(a2 + 1);
  LOBYTE(v10) = *(unsigned char *)(a2 + 1);
  HIDWORD(v10) = a3;
  LODWORD(v11) = v4;
  WORD2(v11) = *(_WORD *)(a2 + 8);
  int v6 = *(unsigned __int8 *)(a2 + 23);
  if (v6 == 2)
  {
    *(_DWORD *)((char *)&v11 + 6) = *(_DWORD *)(a2 + 4);
    __int16 v7 = *(_WORD *)(a2 + 8);
    goto LABEL_5;
  }
  if (v6 == 1)
  {
    *(_DWORD *)((char *)&v11 + 6) = *(_DWORD *)(a2 + 10);
    __int16 v7 = *(_WORD *)(a2 + 14);
LABEL_5:
    WORD5(v11) = v7;
  }
  HIDWORD(v11) = *(_DWORD *)(a2 + 16);
  LOWORD(v12) = *(_WORD *)(a2 + 20);
  if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
  {
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      char v9 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v9, "[dk] %s@%d:DataPath End with peer, DpId %d, NMI %02x:%02x:%02x:%02x:%02x:%02x, NDI %02x:%02x:%02x:%02x:%02x:%02x\n", "postEventNANDataPathEnd", 2631, v5, BYTE12(v11), BYTE13(v11), BYTE14(v11), HIBYTE(v11), v12, BYTE1(v12), BYTE6(v11), BYTE7(v11), BYTE8(v11), BYTE9(v11), BYTE10(v11), BYTE11(v11));
    }
  }
  return IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)a1 + 17) + 64), a1, 0x76u, &v10, 0x1CuLL, 1);
}

uint64_t AppleBCMWLANNANInterface::convertNANFWHostAssistReason(uint64_t result, unsigned int a2, int *a3)
{
  int v4 = a2;
  if (a2 >= 0xA)
  {
    uint64_t v5 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1024))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v5 + 1024))(v5);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v6 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 1024))(v5);
        uint64_t result = CCLogStream::logAlert(v6, "[dk] %s@%d:ALERT: Received unknown reason code (%d) for host assist\n", "convertNANFWHostAssistReason", 2477, v4);
      }
    }
    int v4 = 10;
  }
  *a3 = v4;
  return result;
}

const char *AppleBCMWLANNANInterface::getIOVARString(AppleBCMWLANNANInterface *this, int a2)
{
  if (a2 > 1024)
  {
    if (a2 <= 1792)
    {
      if (a2 <= 1280)
      {
        switch(a2)
        {
          case 1025:
            return "WL_NAN_CMD_SYNC_SOCIAL_CHAN";
          case 1026:
            return "WL_NAN_CMD_SYNC_AWAKE_DWS";
          case 1027:
            return "WL_NAN_CMD_SYNC_BCN_RSSI_NOTIF_THRESHOLD";
          default:
            return "Unknown";
        }
      }
      else
      {
        switch(a2)
        {
          case 1281:
            uint64_t result = "WL_NAN_CMD_DATA_CONFIG";
            break;
          case 1282:
            uint64_t result = "WL_NAN_CMD_DATA_RSVD02";
            break;
          case 1283:
            uint64_t result = "WL_NAN_CMD_DATA_RSVD03";
            break;
          case 1284:
            uint64_t result = "WL_NAN_CMD_DATA_DATAREQ";
            break;
          case 1285:
            uint64_t result = "WL_NAN_CMD_DATA_DATARESP";
            break;
          case 1286:
            uint64_t result = "WL_NAN_CMD_DATA_DATAEND";
            break;
          case 1287:
            uint64_t result = "WL_NAN_CMD_DATA_SCHEDUPD";
            break;
          case 1288:
            uint64_t result = "WL_NAN_CMD_DATA_RSVD08";
            break;
          case 1289:
            uint64_t result = "WL_NAN_CMD_DATA_CAP";
            break;
          case 1290:
            uint64_t result = "WL_NAN_CMD_DATA_STATUS";
            break;
          case 1291:
            uint64_t result = "WL_NAN_CMD_DATA_STATS";
            break;
          case 1292:
            uint64_t result = "WL_NAN_CMD_DATA_RSVD0C";
            break;
          case 1293:
            uint64_t result = "WL_NAN_CMD_DATA_NDP_SHOW";
            break;
          case 1294:
            uint64_t result = "WL_NAN_CMD_DATA_DATACONF";
            break;
          case 1295:
            uint64_t result = "WL_NAN_CMD_DATA_MIN_TX_RATE";
            break;
          case 1296:
            uint64_t result = "WL_NAN_CMD_DATA_MAX_PEERS";
            break;
          case 1297:
            uint64_t result = "WL_NAN_CMD_DATA_DP_IDLE_PERIOD";
            break;
          case 1298:
            uint64_t result = "WL_NAN_CMD_DATA_DP_OPAQUE_INFO";
            break;
          default:
            if (a2 != 1537) {
              return "Unknown";
            }
            uint64_t result = "WL_NAN_CMD_DAM_CFG";
            break;
        }
      }
    }
    else if (a2 <= 2050)
    {
      switch(a2)
      {
        case 1793:
          uint64_t result = "WL_NAN_CMD_RANGE_REQUEST";
          break;
        case 1794:
          uint64_t result = "WL_NAN_CMD_RANGE_AUTO";
          break;
        case 1795:
          uint64_t result = "WL_NAN_CMD_RANGE_RESPONSE";
          break;
        case 1796:
          uint64_t result = "WL_NAN_CMD_RANGE_CANCEL";
          break;
        default:
          if (a2 == 2049)
          {
            uint64_t result = "WL_NAN_CMD_GEN_STATS";
          }
          else
          {
            if (a2 != 2050) {
              return "Unknown";
            }
            uint64_t result = "WL_NAN_CMD_GEN_FW_CAP";
          }
          break;
      }
    }
    else
    {
      switch(a2)
      {
        case 3841:
          uint64_t result = "WL_NAN_CMD_DBG_SCAN_PARAMS";
          break;
        case 3842:
          uint64_t result = "WL_NAN_CMD_DBG_SCAN";
          break;
        case 3843:
          uint64_t result = "WL_NAN_CMD_DBG_SCAN_RESULTS";
          break;
        case 3844:
          uint64_t result = "WL_NAN_CMD_DBG_EVENT_MASK";
          break;
        case 3845:
          uint64_t result = "WL_NAN_CMD_DBG_EVENT_CHECK";
          break;
        case 3846:
          uint64_t result = "WL_NAN_CMD_DBG_DUMP";
          break;
        case 3847:
          uint64_t result = "WL_NAN_CMD_DBG_CLEAR";
          break;
        case 3848:
          uint64_t result = "WL_NAN_CMD_DBG_RSSI";
          break;
        case 3849:
          uint64_t result = "WL_NAN_CMD_DBG_DEBUG";
          break;
        case 3850:
          uint64_t result = "WL_NAN_CMD_DBG_TEST1";
          break;
        case 3851:
          uint64_t result = "WL_NAN_CMD_DBG_TEST2";
          break;
        case 3852:
          uint64_t result = "WL_NAN_CMD_DBG_TEST3";
          break;
        case 3853:
          uint64_t result = "WL_NAN_CMD_DBG_DISC_RESULTS";
          break;
        case 3854:
          uint64_t result = "WL_NAN_CMD_DBG_STATS";
          break;
        case 3855:
          uint64_t result = "WL_NAN_CMD_DBG_LEVEL";
          break;
        default:
          if (a2 == 2051)
          {
            uint64_t result = "WL_NAN_CMD_CFG_OOB_AF";
          }
          else
          {
            if (a2 != 2592) {
              return "Unknown";
            }
            uint64_t result = "WL_NAN_CMD_NSR2";
          }
          break;
      }
    }
  }
  else if (a2 > 512)
  {
    switch(a2)
    {
      case 769:
        uint64_t result = "WL_NAN_CMD_SD_PARAMS";
        break;
      case 770:
        uint64_t result = "WL_NAN_CMD_SD_PUBLISH";
        break;
      case 771:
        uint64_t result = "WL_NAN_CMD_SD_PUBLISH_LIST";
        break;
      case 772:
        uint64_t result = "WL_NAN_CMD_SD_CANCEL_PUBLISH";
        break;
      case 773:
        uint64_t result = "WL_NAN_CMD_SD_SUBSCRIBE";
        break;
      case 774:
        uint64_t result = "WL_NAN_CMD_SD_SUBSCRIBE_LIST";
        break;
      case 775:
        uint64_t result = "WL_NAN_CMD_SD_CANCEL_SUBSCRIBE";
        break;
      case 776:
        uint64_t result = "WL_NAN_CMD_SD_VND_INFO";
        break;
      case 777:
        uint64_t result = "WL_NAN_CMD_SD_STATS";
        break;
      case 778:
        uint64_t result = "WL_NAN_CMD_SD_TRANSMIT";
        break;
      case 779:
        uint64_t result = "WL_NAN_CMD_SD_FUP_TRANSMIT";
        break;
      case 780:
        uint64_t result = "WL_NAN_CMD_SD_CONNECTION";
        break;
      case 781:
        uint64_t result = "WL_NAN_CMD_SD_SHOW";
        break;
      default:
        switch(a2)
        {
          case 513:
            uint64_t result = "WL_NAN_CMD_ELECTION_HOST_ENABLE";
            break;
          case 514:
            uint64_t result = "WL_NAN_CMD_ELECTION_METRICS_CONFIG";
            break;
          case 515:
            uint64_t result = "WL_NAN_CMD_ELECTION_METRICS_STATE";
            break;
          case 516:
            uint64_t result = "WL_NAN_CMD_ELECTION_MERGE";
            break;
          case 517:
            uint64_t result = "WL_NAN_CMD_ELECTION_ADVERTISERS";
            break;
          case 518:
            uint64_t result = "WL_NAN_CMD_ELECTION_RSSI_THRESHOLD";
            break;
          default:
            return "Unknown";
        }
        break;
    }
  }
  else
  {
    switch(a2)
    {
      case 257:
        uint64_t result = "WL_NAN_CMD_CFG_NAN_INIT";
        break;
      case 258:
        uint64_t result = "WL_NAN_CMD_CFG_ROLE";
        break;
      case 259:
        uint64_t result = "WL_NAN_CMD_CFG_HOP_CNT";
        break;
      case 260:
        uint64_t result = "WL_NAN_CMD_CFG_HOP_LIMIT";
        break;
      case 261:
        uint64_t result = "WL_NAN_CMD_CFG_WARMUP_TIME";
        break;
      case 262:
        uint64_t result = "WL_NAN_CMD_CFG_STATUS";
        break;
      case 263:
        uint64_t result = "WL_NAN_CMD_CFG_OUI";
        break;
      case 264:
        uint64_t result = "WL_NAN_CMD_CFG_COUNT";
        break;
      case 265:
        uint64_t result = "WL_NAN_CMD_CFG_CLEARCOUNT";
        break;
      case 266:
        uint64_t result = "WL_NAN_CMD_CFG_CHANNEL";
        break;
      case 267:
        uint64_t result = "WL_NAN_CMD_CFG_BAND";
        break;
      case 268:
        uint64_t result = "WL_NAN_CMD_CFG_CID";
        break;
      case 269:
        uint64_t result = "WL_NAN_CMD_CFG_IF_ADDR";
        break;
      case 270:
        uint64_t result = "WL_NAN_CMD_CFG_BCN_INTERVAL";
        break;
      case 271:
        uint64_t result = "WL_NAN_CMD_CFG_SDF_TXTIME";
        break;
      case 272:
        uint64_t result = "WL_NAN_CMD_CFG_SID_BEACON";
        break;
      case 273:
        uint64_t result = "WL_NAN_CMD_CFG_DW_LEN";
        break;
      case 274:
        uint64_t result = "WL_NAN_CMD_CFG_AVAIL";
        break;
      case 275:
        uint64_t result = "WL_NAN_CMD_CFG_WFA_TM";
        break;
      case 276:
        uint64_t result = "WL_NAN_CMD_CFG_EVENT_MASK";
        break;
      case 277:
        uint64_t result = "WL_NAN_CMD_CFG_NAN_CONFIG";
        break;
      case 278:
        uint64_t result = "WL_NAN_CMD_CFG_NAN_ENAB";
        break;
      case 279:
        uint64_t result = "WL_NAN_CMD_CFG_ULW";
        break;
      case 280:
        uint64_t result = "WL_NAN_CMD_CFG_NAN_CONFIG2";
        break;
      case 281:
        uint64_t result = "WL_NAN_CMD_CFG_DEV_CAP";
        break;
      case 282:
        uint64_t result = "WL_NAN_CMD_CFG_SCAN_PARAMS";
        break;
      case 283:
        uint64_t result = "WL_NAN_CMD_CFG_VNDR_PAYLOAD";
        break;
      case 284:
        uint64_t result = "WL_NAN_CMD_CFG_FASTDISC";
        break;
      case 285:
        uint64_t result = "WL_NAN_CMD_CFG_MIN_TX_RATE";
        break;
      default:
        if (a2) {
          return "Unknown";
        }
        uint64_t result = "WL_NAN_CMD_GLB_NAN_VER";
        break;
    }
  }
  return result;
}

void AppleBCMWLANNANInterface::handleNANIovarAsyncCallBack(IO80211SkywalkInterface *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned __int16 *a5)
{
  if (a3)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        long long v11 = (AppleBCMWLANNANInterface *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        int v12 = *a5;
        IOVARString = AppleBCMWLANNANInterface::getIOVARString(v11, v12);
        uint64_t v14 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, a3);
        CCLogStream::logAlert(v11, "[dk] %s@%d:ERROR: Async callback for NAN iovar failed, command %s (0x%x), retVal %s:(0x%x)\n", "handleNANIovarAsyncCallBack", 3352, IOVARString, v12, v14, a3);
      }
    }
LABEL_5:
    IO80211Hexdump();
    goto LABEL_6;
  }
  uint64_t v8 = *a4;
  if (*a4)
  {
    if (*(unsigned __int16 *)(v8 + 8) == *a5)
    {
      if (*(_DWORD *)(v8 + 12))
      {
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            BOOL v21 = (AppleBCMWLANNANInterface *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            int v22 = *(unsigned __int16 *)(v8 + 8);
            uint64_t v23 = AppleBCMWLANNANInterface::getIOVARString(v21, v22);
            CCLogStream::logAlert(v21, "[dk] %s@%d:ERROR: Async callback for NAN command %s (0x%x) failed, return status %d (0x%x)\n", "handleNANIovarAsyncCallBack", 3376, v23, v22, *(_DWORD *)(v8 + 12), *(_DWORD *)(v8 + 12));
          }
        }
        IO80211Hexdump();
        FaultReporter = (AppleBCMWLANNANInterface *)AppleBCMWLANCore::getFaultReporter(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64));
        uint64_t v10 = AppleBCMWLANNANInterface::getIOVARString(FaultReporter, *(unsigned __int16 *)(v8 + 8));
        CCFaultReporter::reportFault(FaultReporter, 5u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANNANInterface.cpp", 0xD35u, "handleNANIovarAsyncCallBack", 0, -469793490, " %s, cmd status %x", v10, *(_DWORD *)(v8 + 12));
      }
      goto LABEL_6;
    }
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        __int16 v18 = (AppleBCMWLANNANInterface *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        int v19 = *a5;
        uint64_t v20 = AppleBCMWLANNANInterface::getIOVARString(v18, v19);
        CCLogStream::logAlert(v18, "[dk] %s@%d:ERROR: Async callback for NAN iovar command %s (%d), invalid rxPayload.cmd\n", "handleNANIovarAsyncCallBack", 3368, v20, v19);
      }
    }
    IO80211Hexdump();
    goto LABEL_5;
  }
  if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)
    && ((*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1),
        CCLogStream::shouldLog()))
  {
    uint64_t v15 = (AppleBCMWLANNANInterface *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    int v16 = *a5;
    int v17 = AppleBCMWLANNANInterface::getIOVARString(v15, v16);
    CCLogStream::logAlert(v15, "[dk] %s@%d:ERROR: Async callback for NAN iovar command %s (%d), invalid rxPayload.buffer. Bailing out...\n", "handleNANIovarAsyncCallBack", 3358, v17, v16);
  }
  else if (!a5)
  {
    return;
  }
LABEL_6:
  if (*a5 == 2592)
  {
    BOOL v24 = a3 != 0;
    IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)a1 + 17) + 64), a1, 0x88u, &v24, 4uLL, 1);
  }
  if (*((void *)a5 + 1))
  {
    IOFreeData();
    *((void *)a5 + 1) = 0;
  }
  IOFree(a5, 0x10uLL);
}

uint64_t AppleBCMWLANNANInterface::handleProxIovarAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 != -469794537 && a3 != 0)
  {
    uint64_t v6 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1024))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v6 + 1024))(v6);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        __int16 v7 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 1024))(v6);
        uint64_t v8 = *(const char **)(a2 + 8);
        char v9 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 856))(v6, a3);
        return CCLogStream::logAlert(v7, "[dk] %s@%d:ERROR: Cannot send prox iovar %s, return %s [0x%x]\n", "handleProxIovarAsyncCallBack", 3408, v8, v9, a3);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANNANInterface::handleSlotBssIovarAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 != -469794537 && a3 != 0)
  {
    uint64_t v6 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1024))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v6 + 1024))(v6);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        __int16 v7 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 1024))(v6);
        uint64_t v8 = *(const char **)(a2 + 8);
        char v9 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 856))(v6, a3);
        return CCLogStream::logAlert(v7, "[dk] %s@%d:ERROR: Cannot send P2p Coex Protection iovar %s, return %s [0x%x]\n", "handleSlotBssIovarAsyncCallBack", 3419, v8, v9, a3);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANNANInterface::issueSyncSetIOVAR(AppleBCMWLANNANInterface *this, int a2, void *a3, unsigned int a4)
{
  unsigned int v8 = a4 + 8;
  uint64_t v9 = IOMallocZeroData();
  if (v9)
  {
    uint64_t v10 = (_WORD *)v9;
    long long v11 = (_DWORD *)IOMallocZeroData();
    *uint64_t v10 = a2;
    if (a4 < 0xFFFC)
    {
      v10[1] = a4 + 4;
      *((_DWORD *)v10 + 1) = 1;
      memcpy(v10 + 4, a3, a4);
      if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          int v16 = (AppleBCMWLANNANInterface *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this
                                                                                                  + 1024))(this);
          IOVARString = AppleBCMWLANNANInterface::getIOVARString(v16, a2);
          CCLogStream::logAlertIf(v16, 0x4000000000uLL, "[dk] %s@%d:NAN cmd set sync %s (%x), leuint64_t n = %x, bufleuint64_t n = %x\n", "issueSyncSetIOVAR", 3465, IOVARString, a2, a4, v8);
        }
      }
      IO80211HexdumpIf();
      uint64_t v12 = AppleBCMWLANNANInterface::runNANSetIOVAR(this, v10, v8, v11, v8, 1);
      if (!v12)
      {
        if (v11[1])
        {
          if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
          {
            (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
            if (CCLogStream::shouldLog())
            {
              __int16 v18 = (AppleBCMWLANNANInterface *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
              int v19 = AppleBCMWLANNANInterface::getIOVARString(v18, a2);
              CCLogStream::logAlert(v18, "[dk] %s@%d:ERROR: Set Sync NAN IOVAR %s (0x%x), return status %d (0x%x)\n", "issueSyncSetIOVAR", 3476, v19, a2, v11[1], v11[1]);
            }
          }
          IO80211Hexdump();
          uint64_t v12 = 22;
        }
        else
        {
          uint64_t v12 = 0;
        }
        goto LABEL_13;
      }
    }
    else
    {
      if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v14 = (AppleBCMWLANNANInterface *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this
                                                                                                  + 1024))(this);
          uint64_t v15 = AppleBCMWLANNANInterface::getIOVARString(v14, a2);
          CCLogStream::logAlertIf(v14, 0x4000000000uLL, "[dk] %s@%d:Failed to issue NAN set Sync IOVAR %s (%x) due to invalid length %x\n", "issueSyncSetIOVAR", 3457, v15, a2, a4);
        }
      }
      uint64_t v12 = 22;
    }
    if (!v11)
    {
LABEL_14:
      IOFreeData();
      return v12;
    }
LABEL_13:
    IOFreeData();
    goto LABEL_14;
  }
  return 12;
}

uint64_t AppleBCMWLANNANInterface::runNANSetIOVAR(AppleBCMWLANNANInterface *this, void *a2, unsigned int a3, void *a4, unsigned int a5, char a6)
{
  if (IO80211SkywalkInterface::getInterfaceId(this) == -1)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v23 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v23, "[dk] %s@%d:ERROR: NAN Chip interface not initialized, bailing out\n");
      }
    }
    return 22;
  }
  if (a3 >= 0x10000)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v12, "[dk] %s@%d:Failed to run NAN set IOVAR due to invalid length %x\n");
      }
    }
    return 22;
  }
  unsigned int v14 = (a3 + 3) & 0x1FFFC;
  uint64_t v15 = IOMallocZeroData();
  if (!v15) {
    return 12;
  }
  uint64_t v16 = v15;
  if (v14 < 0xFFF8)
  {
    uint64_t v17 = IOMallocZeroData();
    if (v17)
    {
      uint64_t v18 = v17;
      *(_WORD *)uint64_t v16 = 0x8000;
      *(unsigned char *)(v16 + 2) = a6;
      memcpy((void *)(v16 + 4), a2, a3);
      v26[0] = v18;
      v26[1] = 0x100010001 * ((unsigned __int16)(a3 + 11) & 0xFFFC);
      int v19 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 72);
      v25[0] = v16;
      v25[1] = (unsigned __int16)(v14 + 4) & 0xFFFC;
      uint64_t v13 = AppleBCMWLANCommander::runIOVarSet(v19, (uint64_t)"nan", (uint64_t)v25, (uint64_t)v26, 0);
      if (v13)
      {
        if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
        {
          (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v20 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
            BOOL v21 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANInterface *, uint64_t))(*(void *)this + 856))(this, v13);
            CCLogStream::logAlert(v20, "[dk] %s@%d:ERROR: Unable to set NAN iovar %s (0x%x)\n", "runNANSetIOVAR", 3713, v21, v13);
          }
        }
      }
      else
      {
        memcpy(a4, (const void *)(v18 + 8), a5);
      }
      IOFreeData();
    }
    else
    {
      uint64_t v13 = 12;
    }
  }
  else
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        BOOL v24 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v24, "[dk] %s@%d:Failed to run NAN set IOVAR due to invalid length %x\n", "runNANSetIOVAR", 3690, v14 + 4);
      }
    }
    uint64_t v13 = 22;
  }
  IOFreeData();
  return v13;
}

uint64_t AppleBCMWLANNANInterface::issueSetIOVAR(AppleBCMWLANNANInterface *this, int a2, void *a3, unsigned int a4)
{
  unsigned int v8 = a4 + 8;
  uint64_t v9 = IOMallocZeroData();
  if (!v9) {
    return 12;
  }
  uint64_t v10 = (_WORD *)v9;
  *(_WORD *)uint64_t v9 = a2;
  if (a4 < 0xFFFC)
  {
    *(_WORD *)(v9 + 2) = a4 + 4;
    *(_DWORD *)(v9 + 4) = 1;
    memcpy((void *)(v9 + 8), a3, a4);
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v15 = (AppleBCMWLANNANInterface *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this
                                                                                                + 1024))(this);
        IOVARString = AppleBCMWLANNANInterface::getIOVARString(v15, a2);
        CCLogStream::logAlertIf(v15, 0x4000000000uLL, "[dk] %s@%d:NAN cmd set async %s 0x(%x), leuint64_t n = 0x%x, bufleuint64_t n = 0x%x\n", "issueSetIOVAR", 3513, IOVARString, a2, a4, v8);
      }
    }
    IO80211HexdumpIf();
    uint64_t v11 = AppleBCMWLANNANInterface::sendNANSetIOVAR(this, v10, v8, 1);
  }
  else
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v13 = (AppleBCMWLANNANInterface *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this
                                                                                                + 1024))(this);
        unsigned int v14 = AppleBCMWLANNANInterface::getIOVARString(v13, a2);
        CCLogStream::logAlert(v13, "[dk] %s@%d:Failed to issue set IOVAR %s (%x) due to invalid length %x\n", "issueSetIOVAR", 3505, v14, a2, a4);
      }
    }
    uint64_t v11 = 22;
  }
  IOFreeData();
  return v11;
}

uint64_t AppleBCMWLANNANInterface::sendNANSetIOVAR(AppleBCMWLANNANInterface *this, _WORD *a2, unsigned int a3, char a4)
{
  if (IO80211SkywalkInterface::getInterfaceId(this) == -1)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v8, "[dk] %s@%d:ERROR: NAN Chip interface not initialized, bailing out\n");
      }
    }
    return 22;
  }
  if (a3 >= 0x10000)
  {
    if (!(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this)) {
      return 22;
    }
    (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
    if (!CCLogStream::shouldLog()) {
      return 22;
    }
    goto LABEL_32;
  }
  unsigned int v9 = (a3 + 3) & 0x1FFFC;
  unsigned __int16 v10 = v9 + 4;
  if (v9 < 0xFFFC)
  {
    uint64_t v13 = IOMallocZeroData();
    if (!v13) {
      return 12;
    }
    uint64_t v14 = v13;
    uint64_t v15 = IOMallocZeroTyped();
    if (v15)
    {
      uint64_t v16 = (void *)v15;
      uint64_t v17 = (void *)IOMallocZeroData();
      v16[1] = v17;
      if (v17)
      {
        *(_WORD *)uint64_t v16 = *a2;
        *((_WORD *)v16 + 1) = a3;
        memcpy(v17, a2, a3);
        *(_WORD *)uint64_t v14 = 0x8000;
        *(unsigned char *)(v14 + 2) = a4;
        memcpy((void *)(v14 + 4), a2, a3);
        v26[0] = this;
        v26[1] = AppleBCMWLANNANInterface::handleNANIovarAsyncCallBack;
        void v26[2] = v16;
        uint64_t v18 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 72);
        unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
        v25[0] = v14;
        v25[1] = v10 & 0xFFFC;
        uint64_t v11 = AppleBCMWLANCommander::sendVirtualIOVarSet(v18, InterfaceId, "nan", (uint64_t)v25, kNoRxExpected, (uint64_t)v26, 0);
        if (v11)
        {
          if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
          {
            (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
            if (CCLogStream::shouldLog())
            {
              int v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
              uint64_t v23 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANInterface *, uint64_t))(*(void *)this
                                                                                                 + 856))(this, v11);
              CCLogStream::logAlert(v22, "[dk] %s@%d:ERROR: Unable to set async nan iovar %s (0x%x)\n", "sendNANSetIOVAR", 3651, v23, v11);
            }
          }
          IOFreeData();
          v16[1] = 0;
          IOFree(v16, 0x10uLL);
        }
        goto LABEL_31;
      }
      if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          BOOL v24 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
          CCLogStream::logAlert(v24, "[dk] %s@%d:ERROR: IOVAR txPayload memory allocation failed\n", "sendNANSetIOVAR", 3629);
        }
      }
      IOFree(v16, 0x10uLL);
    }
    else if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v20 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v20, "[dk] %s@%d:ERROR: IOVAR context memory allocation failed\n", "sendNANSetIOVAR", 3624);
      }
    }
    uint64_t v11 = 12;
LABEL_31:
    IOFreeData();
    return v11;
  }
  if (!(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this)) {
    return 22;
  }
  (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
  if (!CCLogStream::shouldLog()) {
    return 22;
  }
LABEL_32:
  BOOL v21 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
  CCLogStream::logAlert(v21, "[dk] %s@%d:Failed to send NAN set IOVAR due to invalid length %x\n");
  return 22;
}

uint64_t AppleBCMWLANNANInterface::issueGetIOVAR(AppleBCMWLANNANInterface *this, int a2, void *a3, unsigned int a4)
{
  unsigned int v8 = a4 + 8;
  if (a2 == 2050) {
    unsigned int v9 = a4 + 12;
  }
  else {
    unsigned int v9 = a4 + 8;
  }
  uint64_t v10 = IOMallocZeroData();
  if (v10)
  {
    uint64_t v11 = (_DWORD *)v10;
    *(_WORD *)uint64_t v10 = a2;
    if (a4 < 0xFFFC)
    {
      *(_WORD *)(v10 + 2) = a4 + 4;
      *(_DWORD *)(v10 + 4) = 1;
      memcpy((void *)(v10 + 8), a3, a4);
      if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v18 = (AppleBCMWLANNANInterface *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this
                                                                                                  + 1024))(this);
          IOVARString = AppleBCMWLANNANInterface::getIOVARString(v18, a2);
          CCLogStream::logAlertIf(v18, 0x4000000000uLL, "[dk] %s@%d:NAN cmd get sync %s (0x%x), len %d, buflen %d rxBufLen:%d\n", "issueGetIOVAR", 3574, IOVARString, a2, a4, v8, v9);
        }
      }
      IO80211HexdumpIf();
      uint64_t v14 = AppleBCMWLANNANInterface::sendNANGetIOVAR(this, v11, v8, v9);
      int v15 = v11[1];
      uint64_t v16 = (*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (!v15)
      {
        if (v16)
        {
          (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
          if (CCLogStream::shouldLog())
          {
            int v22 = (AppleBCMWLANNANInterface *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
            uint64_t v23 = AppleBCMWLANNANInterface::getIOVARString(v22, a2);
            CCLogStream::logAlertIf(v22, 0x4000000000uLL, "[dk] %s@%d:Return: NAN cmd get async %s (%x), len %d, buflen %d rxBufLen:%d\n", "issueGetIOVAR", 3584, v23, a2, a4, (unsigned __int16)v8, v9);
          }
        }
        IO80211HexdumpIf();
        memcpy(a3, v11 + 2, v9 - 8);
        goto LABEL_19;
      }
      if (v16)
      {
        (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v20 = (AppleBCMWLANNANInterface *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this
                                                                                                  + 1024))(this);
          BOOL v21 = AppleBCMWLANNANInterface::getIOVARString(v20, a2);
          CCLogStream::logAlert(v20, "[dk] %s@%d:ERROR: Get NAN IOVAR %s (0x%x), return status %d (0x%x)\n", "issueGetIOVAR", 3579, v21, a2, v11[1], v11[1]);
        }
      }
      IO80211Hexdump();
    }
    else if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v12 = (AppleBCMWLANNANInterface *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this
                                                                                                + 1024))(this);
        uint64_t v13 = AppleBCMWLANNANInterface::getIOVARString(v12, a2);
        CCLogStream::logAlert(v12, "[dk] %s@%d:Failed to issue get IOVAR %s (%x) due to invalid length %x\n", "issueGetIOVAR", 3566, v13, a2, a4);
      }
    }
    uint64_t v14 = 22;
LABEL_19:
    IOFreeData();
    return v14;
  }
  return 12;
}

uint64_t AppleBCMWLANNANInterface::sendNANGetIOVAR(AppleBCMWLANNANInterface *this, void *a2, unsigned int a3, unsigned int a4)
{
  if (IO80211SkywalkInterface::getInterfaceId(this) == -1)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v9, "[dk] %s@%d:ERROR: NAN Chip interface not initialized, bailing out\n");
      }
    }
    return 22;
  }
  if (a3 >= 0x10000)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v8, "[dk] %s@%d:Failed to send NAN get IOVAR due to invalid tx length %x\n");
      }
    }
    return 22;
  }
  if (a4 >= 0x10000)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v10, "[dk] %s@%d:Failed to send NAN get IOVAR due to invalid rx length %x\n");
      }
    }
    return 22;
  }
  unsigned int v11 = (a3 + 3) & 0x1FFFC;
  unsigned __int16 v12 = v11 + 4;
  if (v11 >= 0xFFFC)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v13, "[dk] %s@%d:Failed to send NAN get IOVAR due to invalid buf length %x\n");
      }
    }
    return 22;
  }
  unsigned int v14 = (a4 + 3) & 0x1FFFC;
  unsigned int v15 = v14 + 4;
  if (v14 >= 0xFFFC)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v26 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v26, "[dk] %s@%d:Failed to send NAN get IOVAR due to invalid rxPayload length %x\n");
      }
    }
    return 22;
  }
  uint64_t v18 = IOMallocZeroData();
  if (!v18) {
    return 12;
  }
  uint64_t v19 = v18;
  *(_WORD *)uint64_t v18 = 0x8000;
  *(unsigned char *)(v18 + 2) = 1;
  uint64_t v20 = (const void *)(v18 + 4);
  memcpy((void *)(v18 + 4), a2, a3);
  uint64_t v21 = v12 & 0xFFFC;
  v28[0] = v19;
  v28[1] = (unsigned __int16)v15 & 0xFFFC | ((((unint64_t)(v21 | (v15 << 16)) >> 2) & 0x3FFFFFFF) << 18);
  int v22 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 72);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
  v27[0] = v19;
  v27[1] = v21;
  uint64_t v16 = AppleBCMWLANCommander::runVirtualIOVarGet(v22, InterfaceId, "nan", (uint64_t)v27, (uint64_t)v28, 0);
  if (v16)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        BOOL v24 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        uint64_t v25 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANInterface *, uint64_t))(*(void *)this + 856))(this, v16);
        CCLogStream::logAlert(v24, "[dk] %s@%d: ERROR: Unable to get nan iovar %s (0x%x)\n", "sendNANGetIOVAR", 3775, v25, v16);
      }
    }
  }
  else
  {
    memcpy(a2, v20, a4);
  }
  IOFreeData();
  return v16;
}

uint64_t AppleBCMWLANNANInterface::getNAN_ControlBits(AppleBCMWLANNANInterface *this, unsigned int *a2)
{
  uint64_t IOVAR = AppleBCMWLANNANInterface::issueGetIOVAR(this, 277, a2, 4u);
  if (IOVAR)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Unable to set NAN control bits\n", "getNAN_ControlBits", 3823);
      }
    }
  }
  return IOVAR;
}

uint64_t AppleBCMWLANNANInterface::setNAN_ControlBits(AppleBCMWLANNANInterface *this, unsigned int *a2)
{
  uint64_t v3 = AppleBCMWLANNANInterface::issueSetIOVAR(this, 277, a2, 4u);
  if (v3)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Unable to set NAN control bits\n", "setNAN_ControlBits", 3837);
      }
    }
  }
  return v3;
}

uint64_t AppleBCMWLANNANInterface::getNAN_ControlExtBits(AppleBCMWLANNANInterface *this, unsigned int *a2, unsigned int *a3)
{
  uint64_t IOVAR = 22;
  if (a2 && a3)
  {
    uint64_t v10 = 0;
    uint64_t IOVAR = AppleBCMWLANNANInterface::issueGetIOVAR(this, 280, &v10, 8u);
    if (IOVAR)
    {
      if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          __int16 v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
          CCLogStream::logAlert(v7, "[dk] %s@%d:ERROR: Unable to set NAN control-ext bits\n", "getNAN_ControlExtBits", 3857);
        }
      }
    }
    else
    {
      unsigned int v8 = HIDWORD(v10);
      *a2 = v10;
      *a3 = v8;
    }
  }
  return IOVAR;
}

uint64_t AppleBCMWLANNANInterface::setNAN_ControlExtBits(AppleBCMWLANNANInterface *this, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3 = 22;
  if (a2)
  {
    if (a3)
    {
      int v5 = *a3;
      v8[0] = *a2;
      v8[1] = v5;
      uint64_t v3 = AppleBCMWLANNANInterface::issueSetIOVAR(this, 280, v8, 8u);
      if (v3)
      {
        if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
        {
          (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
          if (CCLogStream::shouldLog())
          {
            __int16 v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
            CCLogStream::logAlert(v7, "[dk] %s@%d:ERROR: Unable to set NAN control-ext bits\n", "setNAN_ControlExtBits", 3882);
          }
        }
      }
    }
  }
  return v3;
}

uint64_t AppleBCMWLANNANInterface::setNAN_EventMask(AppleBCMWLANNANInterface *this, unsigned __int8 *a2)
{
  int v4 = (char *)IOMallocZeroData();
  if (!v4) {
    return 12;
  }
  char *v4 = 1;
  *((_WORD *)v4 + 1) = 16;
  *(_OWORD *)(v4 + 4) = *(_OWORD *)a2;
  uint64_t v5 = AppleBCMWLANNANInterface::issueSetIOVAR(this, 276, v4, 0x14u);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        __int16 v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:ERROR: Unable to set NAN event mask\n", "setNAN_EventMask", 3939);
      }
    }
  }
  IOFreeData();
  return v5;
}

uint64_t AppleBCMWLANNANInterface::getNAN_ENABLED(AppleBCMWLANNANInterface *this, unsigned char *a2)
{
  char v8 = 0;
  if (*(_DWORD *)(*((void *)this + 17) + 88))
  {
    uint64_t IOVAR = AppleBCMWLANNANInterface::issueGetIOVAR(this, 278, &v8, 1u);
    if (IOVAR)
    {
      if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
          CCLogStream::logAlert(v5, "[dk] %s@%d: ERROR: Unable to get NAN enable\n", "getNAN_ENABLED", 3959);
        }
      }
    }
    else
    {
      *a2 = v8;
    }
  }
  else
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        __int16 v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:%s: ALERT: NAN FW interface not configured yet, bailing...\n", "getNAN_ENABLED", 3953, "getNAN_ENABLED");
      }
    }
    return 6;
  }
  return IOVAR;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getNAN_ENABLED(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANNANInterface::getNAN_ENABLED((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::getNAN_ENABLED((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::enableNAN(AppleBCMWLANNANInterface *this)
{
  char v5 = 1;
  uint64_t v2 = AppleBCMWLANNANInterface::issueSyncSetIOVAR(this, 278, &v5, 1u);
  if (v2)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        int v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v4, "[dk] %s@%d:ERROR: Unable to set NAN enable to 1\n", "enableNAN", 3975);
      }
    }
  }
  return v2;
}

uint64_t AppleBCMWLANNANInterface::nanIsEnabled(AppleBCMWLANNANInterface *this)
{
  return *(unsigned __int8 *)(*((void *)this + 17) + 92);
}

uint64_t AppleBCMWLANNANInterface::setNANFwEvents(AppleBCMWLANNANInterface *this)
{
  AppleBCMWLANCore::addEventBit(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64), 0x64u);
  AppleBCMWLANCore::addEventBit(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64), 0x9Eu);
  AppleBCMWLANCore::addEventBit(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64), 0x9Fu);
  AppleBCMWLANCore::addEventBit(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64), 0x26u);
  AppleBCMWLANCore::addEventBit(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64), 0xDu);
  uint64_t v2 = AppleBCMWLANCore::writeEventBitField(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64));
  if (v2)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        int v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        char v5 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANInterface *, uint64_t))(*(void *)this + 856))(this, v2);
        CCLogStream::logAlert(v4, "[dk] %s@%d:ERROR: Failure to enable NAN events, %s\n", "setNANFwEvents", 4019, v5);
      }
    }
  }
  return v2;
}

uint64_t AppleBCMWLANNANInterface::clearNANFwEvents(AppleBCMWLANNANInterface *this)
{
  AppleBCMWLANCore::removeEventBit(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64), 0x64u);
  AppleBCMWLANCore::removeEventBit(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64), 0x9Eu);
  AppleBCMWLANCore::removeEventBit(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64), 0x9Fu);
  AppleBCMWLANCore::removeEventBit(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64), 0x26u);
  AppleBCMWLANCore::removeEventBit(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64), 0xDu);
  uint64_t v2 = AppleBCMWLANCore::writeEventBitField(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64));
  if (v2)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        int v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        char v5 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANInterface *, uint64_t))(*(void *)this + 856))(this, v2);
        CCLogStream::logAlert(v4, "[dk] %s@%d:ERROR: Failure to enable NAN events, %s\n", "clearNANFwEvents", 4038, v5);
      }
    }
  }
  return v2;
}

uint64_t AppleBCMWLANNANInterface::setNAN_ENABLED(AppleBCMWLANNANInterface *this, unsigned char *a2)
{
  if (*a2)
  {
    uint64_t result = AppleBCMWLANNANInterface::enableNAN(this);
    if (!result)
    {
      uint64_t result = AppleBCMWLANNANInterface::setNANFwEvents(this);
      if (!result)
      {
        *(unsigned char *)(*((void *)this + 17) + 92) = 1;
        uint64_t result = (*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        if (result)
        {
          (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            int v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
            CCLogStream::logAlert(v4, "[dk] %s@%d:NAN is enabled\n");
            return 0;
          }
        }
      }
    }
  }
  else
  {
    uint64_t result = AppleBCMWLANNANInterface::clearNANFwEvents(this);
    if (!result)
    {
      uint64_t result = AppleBCMWLANNANInterface::disableNAN(this);
      if (!result)
      {
        *(unsigned char *)(*((void *)this + 17) + 92) = 0;
        uint64_t result = (*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        if (result)
        {
          (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            char v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
            CCLogStream::logAlert(v5, "[dk] %s@%d:NAN is disabled\n");
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_ENABLED(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANNANInterface::setNAN_ENABLED((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_ENABLED((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::getNAN_HOP_COUNT_TO_ANCHOR_MASTER(uint64_t a1, uint64_t a2)
{
  memset(v4, 0, sizeof(v4));
  (*(void (**)(uint64_t, _OWORD *))(*(void *)a1 + 1624))(a1, v4);
  *(unsigned char *)(a2 + 1) = BYTE12(v4[0]);
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getNAN_HOP_COUNT_TO_ANCHOR_MASTER(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  memset(v8, 0, sizeof(v8));
  (*(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 112) + 1624))(a1 - 112, v8, a3, a4, a5, a6);
  *(unsigned char *)(a2 + 1) = BYTE12(v8[0]);
  return 0;
}

{
  _OWORD v8[3];

  memset(v8, 0, sizeof(v8));
  (*(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 128) + 1624))(a1 - 128, v8, a3, a4, a5, a6);
  *(unsigned char *)(a2 + 1) = BYTE12(v8[0]);
  return 0;
}

uint64_t AppleBCMWLANNANInterface::setNAN_HOP_COUNT_TO_ANCHOR_MASTER(AppleBCMWLANNANInterface *a1, void *a2)
{
  uint64_t v3 = AppleBCMWLANNANInterface::issueSetIOVAR(a1, 259, a2, 2u);
  if (v3)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        char v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Unable to set NAN Hop Count\n", "setNAN_HOP_COUNT_TO_ANCHOR_MASTER", 4184);
      }
    }
  }
  return v3;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_HOP_COUNT_TO_ANCHOR_MASTER(uint64_t a1, void *a2)
{
  return AppleBCMWLANNANInterface::setNAN_HOP_COUNT_TO_ANCHOR_MASTER((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_HOP_COUNT_TO_ANCHOR_MASTER((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::getNAN_HOP_COUNT_LIMIT(AppleBCMWLANNANInterface *a1, unsigned char *a2)
{
  char v7 = 0;
  uint64_t IOVAR = AppleBCMWLANNANInterface::issueGetIOVAR(a1, 260, &v7, 1u);
  if (IOVAR)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        char v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Unable to get NAN Hop Count Limit\n", "getNAN_HOP_COUNT_LIMIT", 4198);
      }
    }
  }
  else
  {
    *a2 = v7;
  }
  return IOVAR;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getNAN_HOP_COUNT_LIMIT(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANNANInterface::getNAN_HOP_COUNT_LIMIT((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::getNAN_HOP_COUNT_LIMIT((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_HOP_COUNT_LIMIT(AppleBCMWLANNANInterface *a1, char *a2)
{
  char v6 = *a2;
  uint64_t v3 = AppleBCMWLANNANInterface::issueSetIOVAR(a1, 260, &v6, 1u);
  if (v3)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        char v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Unable to set NAN Hop Count Limit\n", "setNAN_HOP_COUNT_LIMIT", 4214);
      }
    }
  }
  return v3;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_HOP_COUNT_LIMIT(uint64_t a1, char *a2)
{
  return AppleBCMWLANNANInterface::setNAN_HOP_COUNT_LIMIT((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_HOP_COUNT_LIMIT((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::getNAN_WARMUP_TIME(AppleBCMWLANNANInterface *a1, _WORD *a2)
{
  int v7 = 0;
  uint64_t IOVAR = AppleBCMWLANNANInterface::issueGetIOVAR(a1, 261, &v7, 4u);
  if (IOVAR)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        char v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Unable to get NAN warmup time\n", "getNAN_WARMUP_TIME", 4227);
      }
    }
  }
  else
  {
    *a2 = v7;
  }
  return IOVAR;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getNAN_WARMUP_TIME(uint64_t a1, _WORD *a2)
{
  return AppleBCMWLANNANInterface::getNAN_WARMUP_TIME((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::getNAN_WARMUP_TIME((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_WARMUP_TIME(AppleBCMWLANNANInterface *a1, unsigned __int16 *a2)
{
  int v6 = *a2;
  uint64_t v3 = AppleBCMWLANNANInterface::issueSetIOVAR(a1, 261, &v6, 4u);
  if (v3)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        char v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Unable to set NAN warmup time\n", "setNAN_WARMUP_TIME", 4242);
      }
    }
  }
  return v3;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_WARMUP_TIME(uint64_t a1, unsigned __int16 *a2)
{
  return AppleBCMWLANNANInterface::setNAN_WARMUP_TIME((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_WARMUP_TIME((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::getNAN_RSSI_CLOSE(AppleBCMWLANNANInterface *a1, unsigned char *a2)
{
  int v7 = 0;
  uint64_t IOVAR = AppleBCMWLANNANInterface::issueGetIOVAR(a1, 518, &v7, 4u);
  if (IOVAR)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        char v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Unable to get NAN Rssi Close\n", "getNAN_RSSI_CLOSE", 4294);
      }
    }
  }
  else
  {
    *a2 = v7;
  }
  return IOVAR;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getNAN_RSSI_CLOSE(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANNANInterface::getNAN_RSSI_CLOSE((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::getNAN_RSSI_CLOSE((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_RSSI_CLOSE(AppleBCMWLANNANInterface *a1, unsigned char *a2)
{
  v8[0] = *a2;
  uint64_t v4 = *((void *)a1 + 17);
  v8[1] = *(unsigned char *)(v4 + 2);
  __int16 v9 = *(_WORD *)(v4 + 3);
  uint64_t v5 = AppleBCMWLANNANInterface::issueSetIOVAR(a1, 518, v8, 4u);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: Unable to set NAN Rssi Close\n", "setNAN_RSSI_CLOSE", 4318);
      }
    }
  }
  else
  {
    *(unsigned char *)(*((void *)a1 + 17) + 1) = *a2;
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_RSSI_CLOSE(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANNANInterface::setNAN_RSSI_CLOSE((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_RSSI_CLOSE((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::getNAN_RSSI_MIDDLE(AppleBCMWLANNANInterface *a1, unsigned char *a2)
{
  int v7 = 0;
  uint64_t IOVAR = AppleBCMWLANNANInterface::issueGetIOVAR(a1, 518, &v7, 4u);
  if (IOVAR)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Unable to get NAN Rssi Mid\n", "getNAN_RSSI_MIDDLE", 4337);
      }
    }
  }
  else
  {
    *a2 = BYTE1(v7);
  }
  return IOVAR;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getNAN_RSSI_MIDDLE(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANNANInterface::getNAN_RSSI_MIDDLE((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::getNAN_RSSI_MIDDLE((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_RSSI_MIDDLE(AppleBCMWLANNANInterface *a1, unsigned char *a2)
{
  uint64_t v4 = *((void *)a1 + 17);
  v8[0] = *(unsigned char *)(v4 + 1);
  v8[1] = *a2;
  __int16 v9 = *(_WORD *)(v4 + 3);
  uint64_t v5 = AppleBCMWLANNANInterface::issueSetIOVAR(a1, 518, v8, 4u);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: Unable to set NAN Rssi Mid\n", "setNAN_RSSI_MIDDLE", 4361);
      }
    }
  }
  else
  {
    *(unsigned char *)(*((void *)a1 + 17) + 2) = *a2;
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_RSSI_MIDDLE(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANNANInterface::setNAN_RSSI_MIDDLE((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_RSSI_MIDDLE((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::getNAN_RSSI_5G_CLOSE(AppleBCMWLANNANInterface *a1, unsigned char *a2)
{
  int v7 = 0;
  uint64_t IOVAR = AppleBCMWLANNANInterface::issueGetIOVAR(a1, 518, &v7, 4u);
  if (IOVAR)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Unable to get NAN Rssi 5G Close\n", "getNAN_RSSI_5G_CLOSE", 4380);
      }
    }
  }
  else
  {
    *a2 = BYTE2(v7);
  }
  return IOVAR;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getNAN_RSSI_5G_CLOSE(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANNANInterface::getNAN_RSSI_5G_CLOSE((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::getNAN_RSSI_5G_CLOSE((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_RSSI_5G_CLOSE(AppleBCMWLANNANInterface *a1, char *a2)
{
  uint64_t v4 = *((void *)a1 + 17);
  __int16 v8 = *(_WORD *)(v4 + 1);
  char v9 = *a2;
  char v10 = *(unsigned char *)(v4 + 4);
  uint64_t v5 = AppleBCMWLANNANInterface::issueSetIOVAR(a1, 518, &v8, 4u);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: Unable to set NAN Rssi 5G Close\n", "setNAN_RSSI_5G_CLOSE", 4404);
      }
    }
  }
  else
  {
    *(unsigned char *)(*((void *)a1 + 17) + AppleBCMWLANJoinAdapter::free(this - 3) = *a2;
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_RSSI_5G_CLOSE(uint64_t a1, char *a2)
{
  return AppleBCMWLANNANInterface::setNAN_RSSI_5G_CLOSE((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_RSSI_5G_CLOSE((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::getNAN_RSSI_5G_MIDDLE(AppleBCMWLANNANInterface *a1, unsigned char *a2)
{
  int v7 = 0;
  uint64_t IOVAR = AppleBCMWLANNANInterface::issueGetIOVAR(a1, 518, &v7, 4u);
  if (IOVAR)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Unable to get NAN Rssi 5G Mid\n", "getNAN_RSSI_5G_MIDDLE", 4423);
      }
    }
  }
  else
  {
    *a2 = HIBYTE(v7);
  }
  return IOVAR;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getNAN_RSSI_5G_MIDDLE(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANNANInterface::getNAN_RSSI_5G_MIDDLE((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::getNAN_RSSI_5G_MIDDLE((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_RSSI_5G_MIDDLE(AppleBCMWLANNANInterface *a1, char *a2)
{
  uint64_t v4 = *((void *)a1 + 17);
  char v8 = *(unsigned char *)(v4 + 1);
  __int16 v9 = *(_WORD *)(v4 + 2);
  char v10 = *a2;
  uint64_t v5 = AppleBCMWLANNANInterface::issueSetIOVAR(a1, 518, &v8, 4u);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: Unable to set NAN Rssi 5G Mid\n", "setNAN_RSSI_5G_MIDDLE", 4447);
      }
    }
  }
  else
  {
    *(unsigned char *)(*((void *)a1 + 17) + 4) = *a2;
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_RSSI_5G_MIDDLE(uint64_t a1, char *a2)
{
  return AppleBCMWLANNANInterface::setNAN_RSSI_5G_MIDDLE((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_RSSI_5G_MIDDLE((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::getNAN_MAX_PEERS(AppleBCMWLANNANInterface *a1, unsigned char *a2)
{
  char v7 = 0;
  uint64_t IOVAR = AppleBCMWLANNANInterface::issueGetIOVAR(a1, 1296, &v7, 1u);
  if (IOVAR)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Unable to get NAN max num of peers\n", "getNAN_MAX_PEERS", 4512);
      }
    }
  }
  else
  {
    *a2 = v7;
  }
  return IOVAR;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getNAN_MAX_PEERS(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANNANInterface::getNAN_MAX_PEERS((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::getNAN_MAX_PEERS((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_MAX_PEERS(AppleBCMWLANNANInterface *a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  int v7 = v3;
  uint64_t v4 = AppleBCMWLANNANInterface::issueSetIOVAR(a1, 1296, &v7, 4u);
  if (v4)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: Unable to set NAN max num of peers to %d\n", "setNAN_MAX_PEERS", 4529, v3);
      }
    }
  }
  return v4;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_MAX_PEERS(uint64_t a1, unsigned __int8 *a2)
{
  return AppleBCMWLANNANInterface::setNAN_MAX_PEERS((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_MAX_PEERS((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::getNAN_CLUSTER_ID(AppleBCMWLANNANInterface *a1, uint64_t a2)
{
  __int16 v10 = 0;
  int v9 = 0;
  uint64_t IOVAR = AppleBCMWLANNANInterface::issueGetIOVAR(a1, 268, &v9, 6u);
  if (IOVAR)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Unable to get NAN clusterId\n", "getNAN_CLUSTER_ID", 4545);
      }
    }
  }
  else
  {
    *(_DWORD *)(a2 + 6) = v9;
    *(_WORD *)(a2 + 10) = v10;
    uint64_t v6 = *((void *)a1 + 17);
    __int16 v7 = *(_WORD *)(v6 + 46);
    *(_DWORD *)a2 = *(_DWORD *)(v6 + 42);
    *(_WORD *)(a2 + 4) = v7;
  }
  return IOVAR;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getNAN_CLUSTER_ID(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANNANInterface::getNAN_CLUSTER_ID((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::getNAN_CLUSTER_ID((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_CLUSTER_ID(AppleBCMWLANNANInterface *a1, int *a2)
{
  int v9 = *a2;
  __int16 v10 = *((_WORD *)a2 + 2);
  uint64_t v4 = AppleBCMWLANNANInterface::issueSetIOVAR(a1, 268, &v9, 6u);
  if (v4)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Unable to set NAN clusterId\n", "setNAN_CLUSTER_ID", 4567);
      }
    }
  }
  else
  {
    uint64_t v6 = *((void *)a1 + 17);
    int v7 = *a2;
    *(_WORD *)(v6 + 46) = *((_WORD *)a2 + 2);
    *(_DWORD *)(v6 + 42) = v7;
  }
  return v4;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_CLUSTER_ID(uint64_t a1, int *a2)
{
  return AppleBCMWLANNANInterface::setNAN_CLUSTER_ID((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_CLUSTER_ID((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::getNAN_TX_RATE()
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getNAN_TX_RATE()
{
  return 0;
}

{
  return 0;
}

uint64_t AppleBCMWLANNANInterface::setNAN_TX_RATE()
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_TX_RATE()
{
  return 0;
}

{
  return 0;
}

uint64_t AppleBCMWLANNANInterface::getNAN_ElectionMetric(AppleBCMWLANNANInterface *a1, uint64_t a2)
{
  int v7 = 0;
  uint64_t IOVAR = AppleBCMWLANNANInterface::issueGetIOVAR(a1, 515, &v7, 4u);
  if (IOVAR)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Unable to get NAN election metric, ret %d\n", "getNAN_ElectionMetric", 4603, IOVAR);
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = *(unsigned char *)(*((void *)a1 + 17) + 8);
    *(unsigned char *)(a2 + 1) = *(unsigned char *)(*((void *)a1 + 17) + 7);
    *(_WORD *)(a2 + 2) = v7;
  }
  return IOVAR;
}

uint64_t AppleBCMWLANNANInterface::setNAN_ElectionMetric(AppleBCMWLANNANInterface *a1, uint64_t a2)
{
  int v7 = 0;
  LOWORD(v7) = *(_WORD *)a2;
  uint64_t v4 = AppleBCMWLANNANInterface::issueSetIOVAR(a1, 514, &v7, 4u);
  if (v4)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Unable to set NAN election metric, ret %d\n", "setNAN_ElectionMetric", 4628, v4);
      }
    }
  }
  else
  {
    *(unsigned char *)(*((void *)a1 + 17) + 8) = *(unsigned char *)a2;
    *(unsigned char *)(*((void *)a1 + 17) + 7) = *(unsigned char *)(a2 + 1);
  }
  return v4;
}

uint64_t AppleBCMWLANNANInterface::getNAN_MASTER_PREFERENCE(AppleBCMWLANNANInterface *a1, unsigned char *a2)
{
  char v9 = 0;
  int v8 = 0;
  uint64_t NAN_ElectionMetric = AppleBCMWLANNANInterface::getNAN_ElectionMetric(a1, (uint64_t)&v8);
  if (NAN_ElectionMetric)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Unable to get NAN master pref, ret = %d\n", "getNAN_MASTER_PREFERENCE", 4647, NAN_ElectionMetric);
      }
    }
  }
  else
  {
    char v6 = BYTE1(v8);
    *(unsigned char *)(*((void *)a1 + 17) + 7) = BYTE1(v8);
    *a2 = v6;
    *(unsigned char *)(*((void *)a1 + 17) + 8) = v8;
    a2[1] = HIBYTE(v8);
  }
  return NAN_ElectionMetric;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getNAN_MASTER_PREFERENCE(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANNANInterface::getNAN_MASTER_PREFERENCE((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::getNAN_MASTER_PREFERENCE((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_MASTER_PREFERENCE(AppleBCMWLANNANInterface *a1, unsigned char *a2)
{
  __int16 v9 = 0;
  v8[1] = *a2;
  uint64_t v4 = *((void *)a1 + 17);
  v8[0] = *(unsigned char *)(v4 + 8);
  char v10 = *(unsigned char *)(v4 + 9);
  uint64_t v5 = AppleBCMWLANNANInterface::setNAN_ElectionMetric(a1, (uint64_t)v8);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        char v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: Unable to set NAN master pref, ret = %d\n", "setNAN_MASTER_PREFERENCE", 4671, v5);
      }
    }
  }
  else
  {
    *(unsigned char *)(*((void *)a1 + 17) + 7) = *a2;
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_MASTER_PREFERENCE(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANNANInterface::setNAN_MASTER_PREFERENCE((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_MASTER_PREFERENCE((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::getNAN_RANDOM_FACTOR(AppleBCMWLANNANInterface *a1, unsigned char *a2)
{
  char v9 = 0;
  int v8 = 0;
  uint64_t NAN_ElectionMetric = AppleBCMWLANNANInterface::getNAN_ElectionMetric(a1, (uint64_t)&v8);
  if (NAN_ElectionMetric)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Unable to get NAN random factor, ret = %d\n", "getNAN_RANDOM_FACTOR", 4689, NAN_ElectionMetric);
      }
    }
  }
  else
  {
    *(unsigned char *)(*((void *)a1 + 17) + 7) = BYTE1(v8);
    char v6 = v8;
    *(unsigned char *)(*((void *)a1 + 17) + 8) = v8;
    *a2 = v6;
    a2[1] = BYTE2(v8);
  }
  return NAN_ElectionMetric;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getNAN_RANDOM_FACTOR(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANNANInterface::getNAN_RANDOM_FACTOR((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::getNAN_RANDOM_FACTOR((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_RANDOM_FACTOR(AppleBCMWLANNANInterface *a1, unsigned char *a2)
{
  __int16 v9 = 0;
  uint64_t v4 = *((void *)a1 + 17);
  v8[1] = *(unsigned char *)(v4 + 7);
  v8[0] = *a2;
  char v10 = *(unsigned char *)(v4 + 9);
  uint64_t v5 = AppleBCMWLANNANInterface::setNAN_ElectionMetric(a1, (uint64_t)v8);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        char v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: Unable to set NAN random factor, ret = %d\n", "setNAN_RANDOM_FACTOR", 4713, v5);
      }
    }
  }
  else
  {
    *(unsigned char *)(*((void *)a1 + 17) + 8) = *a2;
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_RANDOM_FACTOR(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANNANInterface::setNAN_RANDOM_FACTOR((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_RANDOM_FACTOR((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::getNAN_RANDOM_FACTOR_ROTATION(AppleBCMWLANNANInterface *a1, unsigned char *a2)
{
  char v9 = 0;
  int v8 = 0;
  uint64_t NAN_ElectionMetric = AppleBCMWLANNANInterface::getNAN_ElectionMetric(a1, (uint64_t)&v8);
  if (NAN_ElectionMetric)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Unable to get NAN random factor rotation, ret = %d\n", "getNAN_RANDOM_FACTOR_ROTATION", 4731, NAN_ElectionMetric);
      }
    }
  }
  else
  {
    *(unsigned char *)(*((void *)a1 + 17) + 7) = BYTE1(v8);
    *(unsigned char *)(*((void *)a1 + 17) + 8) = v8;
    char v6 = v9;
    *(unsigned char *)(*((void *)a1 + 17) + 9) = v9;
    *a2 = v6;
  }
  return NAN_ElectionMetric;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getNAN_RANDOM_FACTOR_ROTATION(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANNANInterface::getNAN_RANDOM_FACTOR_ROTATION((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::getNAN_RANDOM_FACTOR_ROTATION((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_RANDOM_FACTOR_ROTATION(AppleBCMWLANNANInterface *a1, char *a2)
{
  __int16 v9 = 0;
  uint64_t v4 = *((void *)a1 + 17);
  v8[1] = *(unsigned char *)(v4 + 7);
  v8[0] = *(unsigned char *)(v4 + 8);
  char v10 = *a2;
  uint64_t v5 = AppleBCMWLANNANInterface::setNAN_ElectionMetric(a1, (uint64_t)v8);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        char v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: Unable to set NAN random factor rotation, ret = %d\n", "setNAN_RANDOM_FACTOR_ROTATION", 4755, v5);
      }
    }
  }
  else
  {
    *(unsigned char *)(*((void *)a1 + 17) + 9) = *a2;
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_RANDOM_FACTOR_ROTATION(uint64_t a1, char *a2)
{
  return AppleBCMWLANNANInterface::setNAN_RANDOM_FACTOR_ROTATION((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_RANDOM_FACTOR_ROTATION((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::getNAN_HOST_ELECTION(AppleBCMWLANNANInterface *a1, unsigned char *a2)
{
  char v7 = 0;
  uint64_t IOVAR = AppleBCMWLANNANInterface::issueGetIOVAR(a1, 513, &v7, 1u);
  if (IOVAR)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Unable to get NAN host election, ret = %d\n", "getNAN_HOST_ELECTION", 4773, IOVAR);
      }
    }
  }
  else
  {
    *a2 = v7;
  }
  return IOVAR;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getNAN_HOST_ELECTION(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANNANInterface::getNAN_HOST_ELECTION((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::getNAN_HOST_ELECTION((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_HOST_ELECTION(AppleBCMWLANNANInterface *a1, char *a2)
{
  char v6 = *a2;
  uint64_t v3 = AppleBCMWLANNANInterface::issueSetIOVAR(a1, 513, &v6, 1u);
  if (v3)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Unable to set NAN host election, ret = %d\n", "setNAN_HOST_ELECTION", 4790, v3);
      }
    }
  }
  return v3;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_HOST_ELECTION(uint64_t a1, char *a2)
{
  return AppleBCMWLANNANInterface::setNAN_HOST_ELECTION((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_HOST_ELECTION((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::getNAN_LAST_ANCHOR_MASTER_RECORD()
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getNAN_LAST_ANCHOR_MASTER_RECORD()
{
  return 0;
}

{
  return 0;
}

uint64_t AppleBCMWLANNANInterface::getNAN_CURRENT_ANCHOR_MASTER_RECORD()
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getNAN_CURRENT_ANCHOR_MASTER_RECORD()
{
  return 0;
}

{
  return 0;
}

uint64_t AppleBCMWLANNANInterface::getNAN_DEVICE_INFO(AppleBCMWLANNANInterface *this, uint64_t a2)
{
  if (*(_DWORD *)(*((void *)this + 17) + 88))
  {
    memset(v9, 0, 60);
    uint64_t IOVAR = AppleBCMWLANNANInterface::issueGetIOVAR(this, 262, v9, 0x3Cu);
    uint64_t v5 = IOVAR;
    if (IOVAR)
    {
      if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          char v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
          CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: Unable to get NAN device state, ret = %d\n", "getNAN_DEVICE_INFO", 4906, v5);
        }
      }
    }
    else
    {
      AppleBCMWLANNANInterface::copyDeviceInfo(IOVAR, a2, (uint64_t)v9);
    }
  }
  else
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        int v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v8, "[dk] %s@%d:ALERT: NAN FW interface not configured yet, bailing...\n", "getNAN_DEVICE_INFO", 4897);
      }
    }
    return 6;
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getNAN_DEVICE_INFO(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANNANInterface::getNAN_DEVICE_INFO((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::getNAN_DEVICE_INFO((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::getNAN_DISC_BCN_PERIOD(AppleBCMWLANNANInterface *a1, _WORD *a2)
{
  __int16 v7 = 0;
  uint64_t IOVAR = AppleBCMWLANNANInterface::issueGetIOVAR(a1, 270, &v7, 2u);
  if (IOVAR)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Unable to get NAN discovery beacon period, ret = %d\n", "getNAN_DISC_BCN_PERIOD", 4923, IOVAR);
      }
    }
  }
  else
  {
    *a2 = v7;
  }
  return IOVAR;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getNAN_DISC_BCN_PERIOD(uint64_t a1, _WORD *a2)
{
  return AppleBCMWLANNANInterface::getNAN_DISC_BCN_PERIOD((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::getNAN_DISC_BCN_PERIOD((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_DISC_BCN_PERIOD(AppleBCMWLANNANInterface *a1, unsigned __int16 *a2)
{
  int v3 = *a2;
  __int16 v7 = *a2;
  uint64_t v4 = AppleBCMWLANNANInterface::issueSetIOVAR(a1, 270, &v7, 2u);
  if (v4)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        char v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: Unable to set NAN discovery beacon period to %d, ret = %d\n", "setNAN_DISC_BCN_PERIOD", 4940, v3, v4);
      }
    }
  }
  return v4;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_DISC_BCN_PERIOD(uint64_t a1, unsigned __int16 *a2)
{
  return AppleBCMWLANNANInterface::setNAN_DISC_BCN_PERIOD((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_DISC_BCN_PERIOD((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::getNAN_SYNC_BCN_PERIOD()
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getNAN_SYNC_BCN_PERIOD()
{
  return 0;
}

{
  return 0;
}

uint64_t AppleBCMWLANNANInterface::setNAN_SYNC_BCN_PERIOD()
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_SYNC_BCN_PERIOD()
{
  return 0;
}

{
  return 0;
}

uint64_t AppleBCMWLANNANInterface::getNAN_BCN_TX_CONTROL()
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getNAN_BCN_TX_CONTROL()
{
  return 0;
}

{
  return 0;
}

uint64_t AppleBCMWLANNANInterface::setNAN_BCN_TX_CONTROL()
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_BCN_TX_CONTROL()
{
  return 0;
}

{
  return 0;
}

uint64_t AppleBCMWLANNANInterface::getNAN_DW_AWAKE_PERIOD(AppleBCMWLANNANInterface *a1, _WORD *a2)
{
  int v7 = 0;
  uint64_t IOVAR = AppleBCMWLANNANInterface::issueGetIOVAR(a1, 1026, &v7, 4u);
  if (IOVAR)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Unable to get NAN dw awake period for 2.4/5GHz, ret = %d\n", "getNAN_DW_AWAKE_PERIOD", 4985, IOVAR);
      }
    }
  }
  else
  {
    *a2 = v7;
  }
  return IOVAR;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getNAN_DW_AWAKE_PERIOD(uint64_t a1, _WORD *a2)
{
  return AppleBCMWLANNANInterface::getNAN_DW_AWAKE_PERIOD((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::getNAN_DW_AWAKE_PERIOD((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_DW_AWAKE_PERIOD(AppleBCMWLANNANInterface *a1, _WORD *a2)
{
  int v6 = 0;
  LOWORD(v6) = *a2;
  uint64_t v3 = AppleBCMWLANNANInterface::issueSetIOVAR(a1, 1026, &v6, 4u);
  if (v3)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Unable to set NAN dw awake period for 2.4/5GHz, ret = %d\n", "setNAN_DW_AWAKE_PERIOD", 5006, v3);
      }
    }
  }
  return v3;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_DW_AWAKE_PERIOD(uint64_t a1, _WORD *a2)
{
  return AppleBCMWLANNANInterface::setNAN_DW_AWAKE_PERIOD((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_DW_AWAKE_PERIOD((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::getNAN_MASTER_CHANNEL(AppleBCMWLANNANInterface *a1, unsigned char *a2)
{
  int v7 = 0;
  uint64_t IOVAR = AppleBCMWLANNANInterface::issueGetIOVAR(a1, 1025, &v7, 4u);
  if (IOVAR)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Unable to get NAN primary master channel, ret = %d\n", "getNAN_MASTER_CHANNEL", 5022, IOVAR);
      }
    }
  }
  else
  {
    *a2 = v7;
  }
  return IOVAR;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getNAN_MASTER_CHANNEL(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANNANInterface::getNAN_MASTER_CHANNEL((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::getNAN_MASTER_CHANNEL((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::getNAN_FwCapability(AppleBCMWLANNANInterface *this)
{
  uint64_t v2 = (unsigned __int16 *)IOMallocZeroData();
  if (!v2) {
    return 12;
  }
  uint64_t v3 = v2;
  uint64_t IOVAR = AppleBCMWLANNANInterface::issueGetIOVAR(this, 2050, v2, 0x28u);
  uint64_t v5 = (*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
  if (IOVAR)
  {
    if (v5)
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        int v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: Unable to get NAN Fw Capability, ret = %d\n", "getNAN_FwCapability", 5051, IOVAR);
      }
    }
  }
  else
  {
    if (v5)
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        int v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v8, "[dk] %s@%d:Nan-FwCapability XTLV Id=0x%0x XTLV Len:%0x\n ", "getNAN_FwCapability", 5056, *v3, v3[1]);
      }
    }
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        __int16 v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v9, "[dk] %s@%d:Nan-FwCapability Flag1=0x%0x max_svc_publishes:%0x max_svc_subscribes:%0x max_lcl_sched_maps:%0x\n               max_lcl_ndc_entries:%0x max_lcl_ndi_interfaces:%0x max_peer_entries:%0x max_ndp_sessions:%0x\n ", "getNAN_FwCapability", 5063, *((_DWORD *)v3 + 1), *((unsigned __int8 *)v3 + 12), *((unsigned __int8 *)v3 + 13), *((unsigned __int8 *)v3 + 14), *((unsigned __int8 *)v3 + 15), *((unsigned __int8 *)v3 + 16), *((unsigned __int8 *)v3 + 17), *((unsigned __int8 *)v3 + 18));
      }
    }
    **((unsigned char **)this + 17) = v3[3] & 1;
    *(unsigned char *)(*((void *)this + 17) + 56) = *((unsigned char *)v3 + 13);
    *(unsigned char *)(*((void *)this + 17) + 57) = *((unsigned char *)v3 + 12);
    *(unsigned char *)(*((void *)this + 17) + 59) = *((unsigned char *)v3 + 18);
    *(unsigned char *)(*((void *)this + 17) + 60) = *((unsigned char *)v3 + 14);
    *(unsigned char *)(*((void *)this + 17) + 58) = *((unsigned char *)v3 + 17);
    *(unsigned char *)(*((void *)this + 17) + 61) = *((unsigned char *)v3 + 16);
  }
  IOFreeData();
  return IOVAR;
}

uint64_t AppleBCMWLANNANInterface::setNAN_MASTER_CHANNEL(AppleBCMWLANNANInterface *a1, unsigned __int8 *a2)
{
  int v8 = 0;
  unsigned __int8 v4 = *a2;
  *(unsigned char *)(*((void *)a1 + 17) + 5) = *a2;
  LOBYTE(v8) = v4;
  uint64_t v5 = AppleBCMWLANNANInterface::issueSetIOVAR(a1, 1025, &v8, 4u);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v7, "[dk] %s@%d:ERROR: Unable to set NAN primary master channel to %d, ret = %d\n", "setNAN_MASTER_CHANNEL", 5092, *a2, v5);
      }
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_MASTER_CHANNEL(uint64_t a1, unsigned __int8 *a2)
{
  return AppleBCMWLANNANInterface::setNAN_MASTER_CHANNEL((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_MASTER_CHANNEL((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::getNAN_SECONDARY_MASTER_CHANNEL(AppleBCMWLANNANInterface *a1, unsigned char *a2)
{
  int v7 = 0;
  uint64_t IOVAR = AppleBCMWLANNANInterface::issueGetIOVAR(a1, 1025, &v7, 4u);
  if (IOVAR)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Unable to get NAN secondary master channel, ret = %d\n", "getNAN_SECONDARY_MASTER_CHANNEL", 5108, IOVAR);
      }
    }
  }
  else
  {
    *a2 = BYTE1(v7);
  }
  return IOVAR;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getNAN_SECONDARY_MASTER_CHANNEL(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANNANInterface::getNAN_SECONDARY_MASTER_CHANNEL((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::getNAN_SECONDARY_MASTER_CHANNEL((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_SECONDARY_MASTER_CHANNEL(AppleBCMWLANNANInterface *a1, unsigned __int8 *a2)
{
  int v8 = 0;
  unsigned __int8 v4 = *a2;
  *(unsigned char *)(*((void *)a1 + 17) + 6) = *a2;
  LOBYTE(v8) = *(unsigned char *)(*((void *)a1 + 17) + 5);
  BYTE1(v8) = v4;
  uint64_t v5 = AppleBCMWLANNANInterface::issueSetIOVAR(a1, 1025, &v8, 4u);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v7, "[dk] %s@%d:ERROR: Unable to set NAN secondary master channel to %d, ret = %d\n", "setNAN_SECONDARY_MASTER_CHANNEL", 5130, *a2, v5);
      }
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_SECONDARY_MASTER_CHANNEL(uint64_t a1, unsigned __int8 *a2)
{
  return AppleBCMWLANNANInterface::setNAN_SECONDARY_MASTER_CHANNEL((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_SECONDARY_MASTER_CHANNEL((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::getNAN_SYNC_STATS()
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getNAN_SYNC_STATS()
{
  return 0;
}

{
  return 0;
}

uint64_t AppleBCMWLANNANInterface::getNAN_CHANNEL_SEQUENCE()
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getNAN_CHANNEL_SEQUENCE()
{
  return 0;
}

{
  return 0;
}

uint64_t AppleBCMWLANNANInterface::setNAN_CHANNEL_SEQUENCE()
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_CHANNEL_SEQUENCE()
{
  return 0;
}

{
  return 0;
}

uint64_t AppleBCMWLANNANInterface::setNAN_PUBLISH(AppleBCMWLANNANInterface *a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 *)(a2 + 3402);
  if (*(unsigned char *)(a2 + 3402))
  {
    if (v4 <= 0x10)
    {
      LOWORD(v5) = 0;
      int v6 = (unsigned __int16 *)(a2 + 296);
      while (1)
      {
        int v7 = *v6;
        v6 += 17;
        unsigned int v5 = v7 + (unsigned __int16)v5 + 1;
        if (HIWORD(v5)) {
          break;
        }
        if (!--v4)
        {
          int v8 = ((v5 + 3) & 0x1FFFC) + 24;
          goto LABEL_8;
        }
      }
    }
    return 22;
  }
  int v8 = 20;
LABEL_8:
  uint64_t v9 = *(unsigned __int8 *)(a2 + 3403);
  if (*(unsigned char *)(a2 + 3403))
  {
    if (v9 <= 0x10)
    {
      LOWORD(v10) = 0;
      int v11 = v8 + 4;
      unsigned __int16 v12 = (unsigned __int16 *)(a2 + 840);
      while (1)
      {
        int v13 = *v12;
        v12 += 17;
        unsigned int v10 = v13 + (unsigned __int16)v10 + 1;
        if (HIWORD(v10)) {
          break;
        }
        if (!--v9)
        {
          int v8 = v11 + ((v10 + 3) & 0x1FFFC);
          goto LABEL_14;
        }
      }
    }
    return 22;
  }
LABEL_14:
  if (*(_WORD *)(a2 + 3400)) {
    int v14 = v8 + ((*(unsigned __int16 *)(a2 + 3400) + 3) & 0x1FFFC) + 4;
  }
  else {
    int v14 = v8;
  }
  __int16 v15 = *(_WORD *)(a2 + 3432);
  if (v15) {
    v14 += 8;
  }
  if (*(_WORD *)(a2 + 3436) || *(_WORD *)(a2 + 3434)) {
    v14 += 8;
  }
  if ((v15 & 0x40) != 0)
  {
    if (*(unsigned char *)(a2 + 3438) == 3) {
      int v16 = 64;
    }
    else {
      int v16 = 44;
    }
    v14 += v16;
  }
  if (*(unsigned char *)(a2 + 3492)) {
    v14 += 8;
  }
  int v17 = *(_DWORD *)(a2 + 5552) | *(unsigned __int16 *)(a2 + 5556);
  BOOL v18 = v17 != 0;
  if (v17) {
    v14 += 12;
  }
  uint64_t v19 = *(void *)(a2 + 3493);
  BOOL v20 = v19 != 0;
  if (v19) {
    unsigned int v21 = v14 + 12;
  }
  else {
    unsigned int v21 = v14;
  }
  unsigned int v22 = *(unsigned __int16 *)(a2 + 5550);
  if (*(_WORD *)(a2 + 5550))
  {
    if (v22 > 0xFFFC) {
      return 22;
    }
    v21 += ((v22 + 6) & 0x1FFFC) + 4;
    BOOL v20 = 1;
  }
  if (v21 > 0xC00) {
    return 22;
  }
  __int16 v53 = (void *)(a2 + 3493);
  uint64_t v25 = IOMallocZeroData();
  if (!v25) {
    return 12;
  }
  uint64_t v26 = (_WORD *)v25;
  *(_WORD *)uint64_t v25 = v21 - 2;
  *(unsigned char *)(v25 + 10) = *(unsigned char *)(a2 + 3407);
  *(unsigned char *)(v25 + 2) = *(_DWORD *)(a2 + 3416);
  *(_DWORD *)(v25 + 16) = *(_DWORD *)(a2 + 3420);
  __int16 v27 = *(_WORD *)(a2 + 4);
  *(_DWORD *)(v25 + 4) = *(_DWORD *)a2;
  *(_WORD *)(v25 + 8) = v27;
  *(unsigned char *)(v25 + 11) = *(_DWORD *)(a2 + 3412);
  char v28 = *(unsigned char *)(a2 + 3405);
  if (v28) {
    *(_DWORD *)(v25 + 12) |= 0x1000u;
  }
  if ((v28 & 2) != 0) {
    *(_DWORD *)(v25 + 12) |= 0x2000u;
  }
  if (*(unsigned char *)(a2 + 3406) == 1) {
    *(_DWORD *)(v25 + 12) |= 0x4000u;
  }
  if (*(unsigned char *)(a2 + 3424)) {
    *(_DWORD *)(v25 + 12) |= 0x8000u;
  }
  int v29 = *(_DWORD *)(a2 + 3428);
  if (v29) {
    *(_DWORD *)(v25 + 12) |= 0x40u;
  }
  if ((v29 & 0x10) != 0)
  {
    int v30 = *(_DWORD *)(v25 + 12);
    *(_DWORD *)(v25 + 12) = v30 | 0x400000;
    if ((~v29 & 0x30) == 0) {
      *(_DWORD *)(v25 + 12) = v30 | 0xC00000;
    }
  }
  BOOL v54 = v20;
  uint64_t v31 = v25 + 20;
  BOOL v55 = v18;
  if (*(unsigned char *)(a2 + 3402))
  {
    unint64_t v32 = 0;
    *(_WORD *)(v25 + 20) = 258;
    int v33 = (char *)(v25 + 24);
    unsigned int v34 = (unsigned __int16 *)(a2 + 296);
    do
    {
      int v35 = v34 - 16;
      unsigned int v36 = *v34;
      v34 += 17;
      *int v33 = v36;
      uint64_t v37 = v33 + 1;
      memcpy(v37, v35, v36);
      int v33 = &v37[v36];
      unsigned __int16 v38 = v36 + v26[11] + 1;
      v26[11] = v38;
      ++v32;
    }
    while (v32 < *(unsigned __int8 *)(a2 + 3402));
    v31 += ((v38 + 3) & 0x1FFFC) + 4;
    BOOL v18 = v55;
  }
  if (*(unsigned char *)(a2 + 3403))
  {
    unint64_t v39 = 0;
    *(_WORD *)uint64_t v31 = 257;
    uint64_t v40 = (char *)(v31 + 4);
    int v41 = (unsigned __int16 *)(a2 + 840);
    do
    {
      unint64_t v42 = v41 - 16;
      unsigned int v43 = *v41;
      v41 += 17;
      *uint64_t v40 = v43;
      unint64_t v44 = v40 + 1;
      memcpy(v44, v42, v43);
      uint64_t v40 = &v44[v43];
      unsigned __int16 v45 = v43 + *(_WORD *)(v31 + 2) + 1;
      *(_WORD *)(v31 + 2) = v45;
      ++v39;
    }
    while (v39 < *(unsigned __int8 *)(a2 + 3403));
    v31 += ((v45 + 3) & 0x1FFFC) + 4;
    BOOL v18 = v55;
  }
  size_t v46 = *(unsigned __int16 *)(a2 + 3400);
  if (*(_WORD *)(a2 + 3400))
  {
    *(_WORD *)uint64_t v31 = 780;
    *(_WORD *)(v31 + 2) = v46;
    memcpy((void *)(v31 + 4), (const void *)(a2 + 1352), v46);
    v31 += 4 + ((v46 + 3) & 0x1FFFC);
  }
  if (*(_WORD *)(a2 + 3432))
  {
    *(_DWORD *)uint64_t v31 = 131844;
    *(_WORD *)(v31 + 4) = *(_WORD *)(a2 + 3432);
    v31 += 8;
  }
  if (*(_WORD *)(a2 + 3436) || *(_WORD *)(a2 + 3434))
  {
    *(_DWORD *)uint64_t v31 = 262917;
    *(_WORD *)(v31 + 4) = *(_WORD *)(a2 + 3434);
    *(_WORD *)(v31 + 6) = *(_WORD *)(a2 + 3436);
    v31 += 8;
  }
  if (*(unsigned char *)(a2 + 3438))
  {
    *(_DWORD *)uint64_t v31 = 65800;
    *(unsigned char *)(v31 + 4) = *(unsigned char *)(a2 + 3438);
    *(_DWORD *)(v31 + 8) = 2097417;
    long long v47 = *(_OWORD *)(a2 + 3439);
    *(_OWORD *)(v31 + 28) = *(_OWORD *)(a2 + 3455);
    *(_OWORD *)(v31 + 12) = v47;
    if (*(unsigned char *)(a2 + 3438) == 3)
    {
      *(_DWORD *)(v31 + 44) = 1048842;
      *(_OWORD *)(v31 + 48) = *(_OWORD *)(a2 + 5558);
      v31 += 64;
    }
    else
    {
      v31 += 44;
    }
  }
  if (*(unsigned char *)(a2 + 3492))
  {
    *(_DWORD *)uint64_t v31 = 66317;
    *(unsigned char *)(v31 + 4) = *(unsigned char *)(a2 + 3492);
    v31 += 8;
  }
  if (v18)
  {
    *(_DWORD *)uint64_t v31 = 393998;
    int v48 = *(_DWORD *)(a2 + 5552);
    *(_WORD *)(v31 + 8) = *(_WORD *)(a2 + 5556);
    *(_DWORD *)(v31 + 4) = v48;
    v31 += 12;
  }
  if (v54)
  {
    *(_WORD *)uint64_t v31 = 784;
    uint64_t v49 = v31 + 4;
    if (v19)
    {
      *(unsigned char *)(v31 + 4) = 0;
      *(_WORD *)(v31 + 5) = 8;
      *(void *)(v31 + 7) = *v53;
      uint64_t v49 = v31 + 15;
      __int16 v50 = 11;
    }
    else
    {
      __int16 v50 = 0;
    }
    size_t v51 = *(unsigned __int16 *)(a2 + 5550);
    if (*(_WORD *)(a2 + 5550))
    {
      *(unsigned char *)uint64_t v49 = 1;
      *(_WORD *)(v49 + 1) = v51;
      memcpy((void *)(v49 + 3), (const void *)(a2 + 3502), v51);
      v50 += v51 + 3;
    }
    *(_WORD *)(v31 + 2) = v50;
  }
  uint64_t v23 = AppleBCMWLANNANInterface::issueSetIOVAR(a1, 770, v26, v21);
  if (v23)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        long long v52 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v52, "[dk] %s@%d:ERROR: Unable to set NAN publish, ret = %d\n", "setNAN_PUBLISH", 5498, v23);
      }
    }
  }
  IOFreeData();
  return v23;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_PUBLISH(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANNANInterface::setNAN_PUBLISH((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_PUBLISH((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_CANCEL_PUBLISH(AppleBCMWLANNANInterface *a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  int v7 = v3;
  uint64_t v4 = AppleBCMWLANNANInterface::issueSetIOVAR(a1, 772, &v7, 4u);
  if (v4)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: Unable to cancel publish id %d, ret = %d\n", "setNAN_CANCEL_PUBLISH", 5513, v3, v4);
      }
    }
  }
  return v4;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_CANCEL_PUBLISH(uint64_t a1, unsigned __int8 *a2)
{
  return AppleBCMWLANNANInterface::setNAN_CANCEL_PUBLISH((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_CANCEL_PUBLISH((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::getNAN_PUBLISHED_SERVICE_LIST(AppleBCMWLANNANInterface *a1, uint64_t a2)
{
  uint64_t v4 = (_WORD *)IOMallocZeroData();
  if (!v4) {
    return 12;
  }
  unsigned int v5 = v4;
  uint64_t IOVAR = AppleBCMWLANNANInterface::issueGetIOVAR(a1, 771, v4, 0x100u);
  if (IOVAR)
  {
    uint64_t v7 = IOVAR;
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v8, "[dk] %s@%d:ERROR: Unable to get NAN publish list, ret = %d\n", "getNAN_PUBLISHED_SERVICE_LIST", 5538, v7);
      }
    }
  }
  else
  {
    if (*v5)
    {
      unint64_t v9 = 0;
      uint64_t v10 = 2;
      do
      {
        *(unsigned char *)(a2 + v9++) = *((unsigned char *)v5 + v10);
        unint64_t v11 = (unsigned __int16)*v5;
        v10 += 7;
      }
      while (v9 < v11);
    }
    else
    {
      LOWORD(v11) = 0;
    }
    uint64_t v7 = 0;
    *(_WORD *)(a2 + 256) = v11;
  }
  IOFreeData();
  return v7;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getNAN_PUBLISHED_SERVICE_LIST(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANNANInterface::getNAN_PUBLISHED_SERVICE_LIST((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::getNAN_PUBLISHED_SERVICE_LIST((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_SUBSCRIBE(AppleBCMWLANNANInterface *a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 *)(a2 + 3499);
  if (*(unsigned char *)(a2 + 3499))
  {
    if (v4 <= 0x10)
    {
      LOWORD(v5) = 0;
      int v6 = (unsigned __int16 *)(a2 + 296);
      while (1)
      {
        int v7 = *v6;
        v6 += 17;
        unsigned int v5 = v7 + (unsigned __int16)v5 + 1;
        if (HIWORD(v5)) {
          break;
        }
        if (!--v4)
        {
          int v8 = ((v5 + 3) & 0x1FFFC) + 24;
          goto LABEL_8;
        }
      }
    }
    return 22;
  }
  int v8 = 20;
LABEL_8:
  uint64_t v9 = *(unsigned __int8 *)(a2 + 3500);
  if (*(unsigned char *)(a2 + 3500))
  {
    if (v9 <= 0x10)
    {
      LOWORD(v10) = 0;
      int v11 = v8 + 4;
      unsigned __int16 v12 = (unsigned __int16 *)(a2 + 840);
      while (1)
      {
        int v13 = *v12;
        v12 += 17;
        unsigned int v10 = v13 + (unsigned __int16)v10 + 1;
        if (HIWORD(v10)) {
          break;
        }
        if (!--v9)
        {
          int v8 = ((v10 + 3) & 0x1FFFC) + v11;
          goto LABEL_14;
        }
      }
    }
    return 22;
  }
LABEL_14:
  if (*(_WORD *)(a2 + 3400)) {
    int v14 = v8 + ((*(unsigned __int16 *)(a2 + 3400) + 3) & 0x1FFFC) + 4;
  }
  else {
    int v14 = v8;
  }
  unsigned int v15 = *(unsigned __int8 *)(a2 + 3498);
  if (*(unsigned char *)(a2 + 3498))
  {
    if (v15 >= 0x11)
    {
      if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          int v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logAlert(v16, "[dk] %s@%d:ERROR: SRF filter count %d greater than max %d\n", "setNAN_SUBSCRIBE", 5605, *(unsigned __int8 *)(a2 + 3498), 16);
        }
      }
      return 22;
    }
    int v18 = (6 * (_WORD)v15 + 4) & 0xFFC;
  }
  else
  {
    unsigned int v17 = *(_DWORD *)(a2 + 3508);
    if (!v17) {
      goto LABEL_27;
    }
    if (v17 > 0x40) {
      return 22;
    }
    int v18 = (v17 + 4) & 0x1FFFC;
  }
  v14 += v18 + 4;
LABEL_27:
  if (*(_WORD *)(a2 + 3596)) {
    unsigned int v19 = v14 + 8;
  }
  else {
    unsigned int v19 = v14;
  }
  if (*(_WORD *)(a2 + 3600) || *(_WORD *)(a2 + 3598)) {
    v19 += 8;
  }
  if (v19 > 0xC00) {
    return 22;
  }
  uint64_t v22 = IOMallocZeroData();
  if (!v22) {
    return 12;
  }
  uint64_t v23 = (_WORD *)v22;
  *(_WORD *)uint64_t v22 = v19 - 2;
  *(unsigned char *)(v22 + 10) = *(unsigned char *)(a2 + 3503);
  *(unsigned char *)(v22 + 2) = *(_DWORD *)(a2 + 3584);
  *(_DWORD *)(v22 + 16) = *(_DWORD *)(a2 + 3588);
  __int16 v24 = *(_WORD *)(a2 + 4);
  *(_DWORD *)(v22 + 4) = *(_DWORD *)a2;
  *(_WORD *)(v22 + 8) = v24;
  *(unsigned char *)(v22 + 11) = *(_DWORD *)(a2 + 3580);
  if ((*(unsigned char *)(a2 + 3502) & 2) != 0) {
    *(_DWORD *)(v22 + 12) |= 0x1000u;
  }
  int v25 = *(_DWORD *)(a2 + 3592);
  if (v25) {
    *(_DWORD *)(v22 + 12) |= 0x40u;
  }
  if ((v25 & 0x40) != 0)
  {
    int v26 = *(_DWORD *)(v22 + 12);
    *(_DWORD *)(v22 + 12) = v26 | 0x400000;
    if ((~v25 & 0xC0) == 0) {
      *(_DWORD *)(v22 + 12) = v26 | 0xC00000;
    }
  }
  __int16 v27 = (unsigned char *)(v22 + 20);
  if (*(unsigned char *)(a2 + 3499))
  {
    unint64_t v28 = 0;
    *(_WORD *)(v22 + 20) = 258;
    int v29 = (char *)(v22 + 24);
    int v30 = (unsigned __int16 *)(a2 + 296);
    do
    {
      uint64_t v31 = v30 - 16;
      unsigned int v32 = *v30;
      v30 += 17;
      *int v29 = v32;
      int v33 = v29 + 1;
      memcpy(v33, v31, v32);
      int v29 = &v33[v32];
      unsigned __int16 v34 = v32 + 1;
      v23[11] = v32 + 1;
      ++v28;
    }
    while (v28 < *(unsigned __int8 *)(a2 + 3499));
    v27 += ((v34 + 3) & 0x1FFFC) + 4;
  }
  if (*(unsigned char *)(a2 + 3500))
  {
    unint64_t v35 = 0;
    *(_WORD *)__int16 v27 = 257;
    unsigned int v36 = v27 + 4;
    uint64_t v37 = (unsigned __int16 *)(a2 + 840);
    do
    {
      unsigned __int16 v38 = v37 - 16;
      unsigned int v39 = *v37;
      v37 += 17;
      *unsigned int v36 = v39;
      uint64_t v40 = v36 + 1;
      memcpy(v40, v38, v39);
      unsigned int v36 = &v40[v39];
      unsigned __int16 v41 = v39 + *((_WORD *)v27 + 1) + 1;
      *((_WORD *)v27 + 1) = v41;
      ++v35;
    }
    while (v35 < *(unsigned __int8 *)(a2 + 3500));
    v27 += ((v41 + 3) & 0x1FFFC) + 4;
  }
  if (*(unsigned char *)(a2 + 3498))
  {
    *(_WORD *)__int16 v27 = 259;
    v27[4] = ((*(unsigned char *)(a2 + 3592) >> 1) & 2 | v27[4] & 0xFD) ^ 2;
    __int16 v42 = 6 * *(unsigned __int8 *)(a2 + 3498);
    if (*(unsigned char *)(a2 + 3498))
    {
      unint64_t v43 = 0;
      unint64_t v44 = v27 + 5;
      unsigned __int16 v45 = (int *)(a2 + 3402);
      do
      {
        int v46 = *v45;
        *((_WORD *)v44 + 2) = *((_WORD *)v45 + 2);
        *(_DWORD *)unint64_t v44 = v46;
        v44 += 6;
        ++v43;
        unsigned __int16 v45 = (int *)((char *)v45 + 6);
      }
      while (v43 < *(unsigned __int8 *)(a2 + 3498));
    }
    *((_WORD *)v27 + 1) = v42 | 1;
    v27 += ((v42 + 4) & 0xFFC) + 4;
  }
  else if (*(_DWORD *)(a2 + 3508))
  {
    *(_WORD *)__int16 v27 = 259;
    int v48 = v27 + 4;
    char v47 = v27[4];
    char v49 = v47 | 1;
    v27[4] = v47 | 1;
    char v50 = v47 | 3;
    char v51 = v49 & 0xFD;
    if ((*(_DWORD *)(a2 + 3592) & 4) != 0) {
      char v50 = v51;
    }
    *int v48 = v50;
    *int v48 = (4 * (*(unsigned char *)(a2 + 3512) & 3)) | v50;
    memcpy(v27 + 5, (const void *)(a2 + 3513), *(unsigned int *)(a2 + 3508));
    unsigned __int16 v52 = *(_WORD *)(a2 + 3508) + 1;
    *((_WORD *)v27 + 1) = v52;
    __int16 v27 = &v48[(v52 + 3) & 0x1FFFC];
  }
  size_t v53 = *(unsigned __int16 *)(a2 + 3400);
  if (*(_WORD *)(a2 + 3400))
  {
    *(_WORD *)__int16 v27 = 780;
    *((_WORD *)v27 + 1) = v53;
    memcpy(v27 + 4, (const void *)(a2 + 1352), v53);
    v27 += (((int)v53 + 3) & 0x1FFFC) + 4;
  }
  if (*(_WORD *)(a2 + 3596))
  {
    *(_DWORD *)__int16 v27 = 131844;
    *((_WORD *)v27 + 2) = *(_WORD *)(a2 + 3596);
    v27 += 8;
  }
  if (*(_WORD *)(a2 + 3600) || *(_WORD *)(a2 + 3598))
  {
    *(_DWORD *)__int16 v27 = 262917;
    *((_WORD *)v27 + 2) = *(_WORD *)(a2 + 3598);
    *((_WORD *)v27 + AppleBCMWLANJoinAdapter::free(this - 3) = *(_WORD *)(a2 + 3600);
  }
  uint64_t v20 = AppleBCMWLANNANInterface::issueSetIOVAR(a1, 773, v23, v19);
  if (v20)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        BOOL v54 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v54, "[dk] %s@%d:ERROR: Unable to set NAN subscribe, ret = %d\n", "setNAN_SUBSCRIBE", 5802, v20);
      }
    }
  }
  IOFreeData();
  return v20;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_SUBSCRIBE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANNANInterface::setNAN_SUBSCRIBE((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_SUBSCRIBE((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_CANCEL_SUBSCRIBE(AppleBCMWLANNANInterface *a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  int v7 = v3;
  uint64_t v4 = AppleBCMWLANNANInterface::issueSetIOVAR(a1, 775, &v7, 4u);
  if (v4)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: Unable to cancel subscribe id %d, ret = %d\n", "setNAN_CANCEL_SUBSCRIBE", 5817, v3, v4);
      }
    }
  }
  return v4;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_CANCEL_SUBSCRIBE(uint64_t a1, unsigned __int8 *a2)
{
  return AppleBCMWLANNANInterface::setNAN_CANCEL_SUBSCRIBE((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_CANCEL_SUBSCRIBE((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::getNAN_SUBSCRIBED_SERVICE_LIST(AppleBCMWLANNANInterface *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned __int16 *)IOMallocZeroData();
  if (!v4) {
    return 12;
  }
  unsigned int v5 = v4;
  uint64_t IOVAR = AppleBCMWLANNANInterface::issueGetIOVAR(a1, 774, v4, 0x100u);
  if (IOVAR)
  {
    uint64_t v7 = IOVAR;
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v8, "[dk] %s@%d:ERROR: Unable to get NAN subscribe list, ret = %d\n", "getNAN_SUBSCRIBED_SERVICE_LIST", 5841, v7);
      }
    }
  }
  else if (*v5 <= 0xFEu)
  {
    if (*v5)
    {
      unint64_t v9 = 0;
      uint64_t v10 = 2;
      do
      {
        *(unsigned char *)(a2 + v9++) = *((unsigned char *)v5 + v10);
        unint64_t v11 = *v5;
        v10 += 7;
      }
      while (v9 < v11);
    }
    else
    {
      LOWORD(v11) = 0;
    }
    uint64_t v7 = 0;
    *(_WORD *)(a2 + 256) = v11;
  }
  else
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v13, "[dk] %s@%d:ERROR: Invalid servicelist length:%u, max length: %u\n", "getNAN_SUBSCRIBED_SERVICE_LIST", 5849, *v5, 254);
      }
    }
    uint64_t v7 = 14;
  }
  IOFreeData();
  return v7;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getNAN_SUBSCRIBED_SERVICE_LIST(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANNANInterface::getNAN_SUBSCRIBED_SERVICE_LIST((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::getNAN_SUBSCRIBED_SERVICE_LIST((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_FOLLOW_UP_TRANSMIT(AppleBCMWLANNANInterface *a1, uint64_t a2)
{
  if (*(_WORD *)(a2 + 2058)) {
    unsigned int v4 = *(unsigned __int16 *)(a2 + 2058) + ((*(unsigned __int16 *)(a2 + 2058) + 3) & 0x1FFFC) + 18;
  }
  else {
    unsigned int v4 = 14;
  }
  uint64_t v5 = IOMallocZeroData();
  if (!v5) {
    return 12;
  }
  int v6 = (_WORD *)v5;
  *(unsigned char *)uint64_t v5 = *(unsigned char *)a2;
  *(unsigned char *)(v5 + 1) = *(unsigned char *)(a2 + 1);
  *(_WORD *)(v5 + 8) = *(_WORD *)(a2 + 2);
  int v7 = *(_DWORD *)(a2 + 4);
  *(_WORD *)(v5 + 6) = *(_WORD *)(a2 + 8);
  *(_DWORD *)(v5 + 2) = v7;
  size_t v8 = *(unsigned __int16 *)(a2 + 2058);
  if (*(_WORD *)(a2 + 2058))
  {
    *(_WORD *)(v5 + 14) = 780;
    *(_WORD *)(v5 + 16) = v8;
    memcpy((void *)(v5 + 18), (const void *)(a2 + 10), v8);
    v6[6] += ((v8 + 3) & 0xFFFC) + 4;
  }
  uint64_t v9 = AppleBCMWLANNANInterface::issueSetIOVAR(a1, 779, v6, v4);
  if (v9)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        unint64_t v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v11, "[dk] %s@%d:ERROR: Unable to set NAN followup transmit, ret = %d\n", "setNAN_FOLLOW_UP_TRANSMIT", 5903, v9);
      }
    }
  }
  IOFreeData();
  return v9;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_FOLLOW_UP_TRANSMIT(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANNANInterface::setNAN_FOLLOW_UP_TRANSMIT((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_FOLLOW_UP_TRANSMIT((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::getNAN_SERVICE_DISCOVERY_STATS(AppleBCMWLANNANInterface *a1, uint64_t a2)
{
  memset(v8, 0, 44);
  uint64_t IOVAR = AppleBCMWLANNANInterface::issueGetIOVAR(a1, 777, v8, 0x2Cu);
  if (IOVAR)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Unable to get NAN service discovery statistics, ret = %d\n", "getNAN_SERVICE_DISCOVERY_STATS", 5919, IOVAR);
      }
    }
  }
  else
  {
    long long v6 = v8[1];
    *(_OWORD *)a2 = v8[0];
    *(_OWORD *)(a2 + 16) = v6;
    *(void *)(a2 + 32) = *(void *)&v8[2];
    *(_DWORD *)(a2 + 40) = DWORD2(v8[2]);
  }
  return IOVAR;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getNAN_SERVICE_DISCOVERY_STATS(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANNANInterface::getNAN_SERVICE_DISCOVERY_STATS((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::getNAN_SERVICE_DISCOVERY_STATS((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_AF_TX()
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_AF_TX()
{
  return 0;
}

{
  return 0;
}

uint64_t AppleBCMWLANNANInterface::setNAN_SERVICE_DESCRIPTOR_EXTENSION()
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_SERVICE_DESCRIPTOR_EXTENSION()
{
  return 0;
}

{
  return 0;
}

uint64_t AppleBCMWLANNANInterface::getNAN_ADVERTISERS(AppleBCMWLANNANInterface *a1, _WORD *a2)
{
  unsigned int v4 = (unsigned char *)IOMallocZeroData();
  if (!v4) {
    return 12;
  }
  uint64_t v5 = v4;
  uint64_t IOVAR = AppleBCMWLANNANInterface::issueGetIOVAR(a1, 517, v4, 0x5DCu);
  if (IOVAR)
  {
    uint64_t v7 = IOVAR;
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        size_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v8, "[dk] %s@%d:ERROR: Unable to get NAN sync advertisers, ret = %d\n", "getNAN_ADVERTISERS", 5974, v7);
      }
    }
  }
  else
  {
    *a2 = *v5;
    if (*v5)
    {
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      unint64_t v11 = a2 + 22;
      do
      {
        int v12 = *(_DWORD *)&v5[v9 + 6];
        *(v11 - 16) = *(_WORD *)&v5[v9 + 10];
        *((_DWORD *)v11 - 9) = v12;
        int v13 = *(_DWORD *)&v5[v9 + 12];
        *(v11 - 1AppleBCMWLANJoinAdapter::free(this - 3) = *(_WORD *)&v5[v9 + 16];
        *(_DWORD *)(v11 - 15) = v13;
        int v14 = *(_DWORD *)&v5[v9 + 36];
        *(v11 - 10) = *(_WORD *)&v5[v9 + 40];
        *((_DWORD *)v11 - 6) = v14;
        *(unsigned char *)unint64_t v11 = v5[v9 + 5];
        *((unsigned char *)v11 + 1) = v5[v9 + 43];
        *((unsigned char *)v11 + 2) = v5[v9 + 42];
        *((unsigned char *)v11 + 16) = v5[v9 + 48];
        *((unsigned char *)v11 + 17) = v5[v9 + 49];
        *((unsigned char *)v11 + 18) = v5[v9 + 50];
        *((unsigned char *)v11 + 19) = v5[v9 + 51];
        *((_DWORD *)v11 + 1) = *(_DWORD *)&v5[v9 + 44];
        *((void *)v11 + 1) = *(void *)&v5[v9 + 28];
        ++v10;
        v11 += 32;
        v9 += 48;
      }
      while (v10 < *v5);
    }
    uint64_t v7 = 0;
  }
  IOFreeData();
  return v7;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getNAN_ADVERTISERS(uint64_t a1, _WORD *a2)
{
  return AppleBCMWLANNANInterface::getNAN_ADVERTISERS((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::getNAN_ADVERTISERS((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_INIT(AppleBCMWLANNANInterface *a1)
{
  char v18 = 1;
  *(_WORD *)(*((void *)a1 + 17) + 9AppleBCMWLANJoinAdapter::free(this - 3) = 0;
  if (AppleBCMWLANCore::checkForRngReSeedSupport(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64)))
  {
    if (AppleBCMWLANCore::setEntropyForRNG(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64)))
    {
      if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          int v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logAlert(v16, "[dk] %s@%d:Failed to set RNG seed value\n", "setNAN_INIT", 6043);
        }
      }
    }
  }
  uint64_t v2 = (*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1008))(a1);
  *(_DWORD *)v19.octet = v2;
  *(_WORD *)&v19.octet[4] = WORD2(v2);
  uint64_t v3 = AppleBCMWLANNANInterface::createNANChipInterface(a1, &v19, 3);
  if (v3)
  {
    uint64_t v4 = v3;
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Creating NAN interface failed, ret %d\n");
      }
    }
    return v4;
  }
  uint64_t v6 = AppleBCMWLANNANInterface::issueSyncSetIOVAR(a1, 257, &v18, 1u);
  if (v6)
  {
    uint64_t v4 = v6;
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v7, "[dk] %s@%d:ERROR: Init NAN failed, ret %d\n");
      }
    }
    return v4;
  }
  uint64_t NAN_ControlBits = AppleBCMWLANNANInterface::getNAN_ControlBits(a1, (unsigned int *)(*((void *)a1 + 17) + 12));
  if (NAN_ControlBits)
  {
    uint64_t v4 = NAN_ControlBits;
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v9, "[dk] %s@%d:ERROR: Getting NAN conig-control failed, ret %d\n");
      }
    }
    return v4;
  }
  *(_DWORD *)(*((void *)a1 + 17) + 12) |= 0xE5006Fu;
  uint64_t v10 = AppleBCMWLANNANInterface::setNAN_ControlBits(a1, (unsigned int *)(*((void *)a1 + 17) + 12));
  if (v10)
  {
    uint64_t v4 = v10;
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        unint64_t v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v11, "[dk] %s@%d:ERROR: Setting NAN conig-control failed, ret %d\n");
      }
    }
    return v4;
  }
  uint64_t NAN_ControlExtBits = AppleBCMWLANNANInterface::getNAN_ControlExtBits(a1, (unsigned int *)(*((void *)a1 + 17) + 16), (unsigned int *)(*((void *)a1 + 17) + 20));
  if (NAN_ControlExtBits)
  {
    uint64_t v4 = NAN_ControlExtBits;
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v13, "[dk] %s@%d:ERROR: Getting NAN conig-control-ext failed, ret %d\n");
      }
    }
    return v4;
  }
  *(_DWORD *)(*((void *)a1 + 17) + 16) |= 1u;
  *(_DWORD *)(*((void *)a1 + 17) + 16) |= 0x40u;
  *(_DWORD *)(*((void *)a1 + 17) + 16) |= 0x400u;
  uint64_t v14 = AppleBCMWLANNANInterface::setNAN_ControlExtBits(a1, (unsigned int *)(*((void *)a1 + 17) + 16), (unsigned int *)(*((void *)a1 + 17) + 20));
  if (v14)
  {
    uint64_t v4 = v14;
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        unsigned int v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v17, "[dk] %s@%d:ERROR: Setting NAN conig-control-ext failed, ret %d\n");
      }
    }
    return v4;
  }
  *(unsigned char *)(*((void *)a1 + 17) + 24) |= 4u;
  *(unsigned char *)(*((void *)a1 + 17) + 24) |= 0x10u;
  *(unsigned char *)(*((void *)a1 + 17) + 24) |= 0x20u;
  *(unsigned char *)(*((void *)a1 + 17) + 24) |= 0x40u;
  *(unsigned char *)(*((void *)a1 + 17) + 24) |= 0x80u;
  *(unsigned char *)(*((void *)a1 + 17) + 25) |= 1u;
  *(unsigned char *)(*((void *)a1 + 17) + 25) |= 2u;
  *(unsigned char *)(*((void *)a1 + 17) + 26) |= 8u;
  *(unsigned char *)(*((void *)a1 + 17) + 26) |= 0x10u;
  *(unsigned char *)(*((void *)a1 + 17) + 26) |= 0x40u;
  *(unsigned char *)(*((void *)a1 + 17) + 27) |= 1u;
  *(unsigned char *)(*((void *)a1 + 17) + 27) |= 2u;
  *(unsigned char *)(*((void *)a1 + 17) + 27) |= 0x20u;
  *(unsigned char *)(*((void *)a1 + 17) + 27) |= 0x40u;
  *(unsigned char *)(*((void *)a1 + 17) + 27) |= 0x80u;
  *(unsigned char *)(*((void *)a1 + 17) + 28) |= 1u;
  *(unsigned char *)(*((void *)a1 + 17) + 26) |= 0x80u;
  *(unsigned char *)(*((void *)a1 + 17) + 27) |= 4u;
  *(unsigned char *)(*((void *)a1 + 17) + 28) |= 8u;
  *(unsigned char *)(*((void *)a1 + 17) + 27) |= 8u;
  *(unsigned char *)(*((void *)a1 + 17) + 27) |= 0x10u;
  *(unsigned char *)(*((void *)a1 + 17) + 28) |= 2u;
  *(unsigned char *)(*((void *)a1 + 17) + 28) |= 4u;
  *(unsigned char *)(*((void *)a1 + 17) + 29) |= 8u;
  *(unsigned char *)(*((void *)a1 + 17) + 28) |= 0x10u;
  *(unsigned char *)(*((void *)a1 + 17) + 29) |= 0x40u;
  *(unsigned char *)(*((void *)a1 + 17) + 29) |= 0x80u;
  uint64_t result = AppleBCMWLANNANInterface::setNAN_EventMask(a1, (unsigned __int8 *)(*((void *)a1 + 17) + 24));
  *(_DWORD *)(*((void *)a1 + 17) + 88) = 1;
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_INIT(uint64_t a1)
{
  return AppleBCMWLANNANInterface::setNAN_INIT((AppleBCMWLANNANInterface *)(a1 - 112));
}

{
  return AppleBCMWLANNANInterface::setNAN_INIT((AppleBCMWLANNANInterface *)(a1 - 128));
}

uint64_t AppleBCMWLANNANInterface::getNAN_COMMITTED_AVAILABILITY()
{
  return 3758097095;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getNAN_COMMITTED_AVAILABILITY()
{
  return 3758097095;
}

{
  return 3758097095;
}

uint64_t AppleBCMWLANNANInterface::setNAN_COMMITTED_AVAILABILITY(AppleBCMWLANNANInterface *a1, int *a2)
{
  uint64_t v4 = IOMallocZeroData();
  if (!v4) {
    return 12;
  }
  uint64_t v5 = (_WORD *)v4;
  if (*((unsigned __int8 *)a2 + 6) >= 3u)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logCrit(v6, "[dk] %s@%d: MapId %d larger than max of %d \n");
      }
    }
    goto LABEL_30;
  }
  if (!*((unsigned char *)a2 + 6))
  {
LABEL_26:
    uint64_t v7 = 0;
    goto LABEL_31;
  }
  unint64_t v8 = 0;
  uint64_t v33 = v4 + 8;
  uint64_t v34 = v4 + 16;
  uint64_t v9 = (unsigned __int16 *)(a2 + 22);
  unint64_t v35 = a1;
  while (1)
  {
    bzero(v5, 0x400uLL);
    uint64_t v10 = &a2[321 * v8];
    unsigned int v13 = *((unsigned __int8 *)v10 + 9);
    int v12 = (unsigned __int8 *)v10 + 9;
    unsigned int v11 = v13;
    if (!v13)
    {
      unint64_t v18 = *((void *)a1 + 17) + v8;
      int v20 = *(unsigned __int8 *)(v18 + 93);
      ether_addr v19 = (unsigned char *)(v18 + 93);
      if (v20 == 1)
      {
        *ether_addr v19 = 0;
        AppleBCMWLANNANInterface::setNAN_RemoveCommittedAvailability(a1, v8);
      }
      goto LABEL_25;
    }
    if (v11 >= 0x11)
    {
      if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          int v30 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logCrit(v30, "[dk] %s@%d:ERROR: Num Channel Entries (%d) is larger than expected (16). Returning Error. \n");
        }
      }
      goto LABEL_30;
    }
    if (!*a2 && *((_WORD *)a2 + 2) == 0) {
      break;
    }
    v5[1] = 2;
    int v15 = *a2;
    *(_WORD *)(v33 + 4) = *((_WORD *)a2 + 2);
    *(_DWORD *)uint64_t v33 = v15;
    int v16 = *v12;
    *((unsigned char *)v5 + 14) = v16;
    *((unsigned char *)v5 + 4) = BYTE2(a2[321 * v8 + 2]);
    if (v16) {
      goto LABEL_20;
    }
    unsigned __int16 v17 = 16;
LABEL_23:
    *uint64_t v5 = v17;
    a1 = v35;
    uint64_t v28 = AppleBCMWLANNANInterface::issueSetIOVAR(v35, 274, v5, v17);
    if (v28)
    {
      uint64_t v7 = v28;
      if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)v35 + 1024))(v35))
      {
        (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)v35 + 1024))(v35);
        if (CCLogStream::shouldLog())
        {
          uint64_t v31 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)v35 + 1024))(v35);
          CCLogStream::logAlert(v31, "[dk] %s@%d:ERROR: Unable to set the NAN committed availability, ret = %d\n", "setNAN_COMMITTED_AVAILABILITY", 6224, v7);
        }
      }
      goto LABEL_31;
    }
    *(unsigned char *)(*((void *)v35 + 17) + v8 + 9AppleBCMWLANJoinAdapter::free(this - 3) = 1;
LABEL_25:
    ++v8;
    v9 += 642;
    if (v8 >= *((unsigned __int8 *)a2 + 6)) {
      goto LABEL_26;
    }
  }
  v5[1] = 9;
  *((unsigned char *)v5 + 14) = v11;
  *((unsigned char *)v5 + 4) = BYTE2(a2[321 * v8 + 2]);
LABEL_20:
  unint64_t v21 = 0;
  unsigned __int16 v17 = 16;
  uint64_t v22 = v9;
  uint64_t v23 = v34;
  while (1)
  {
    *(_WORD *)(v23 + 16) = 1025;
    *(_WORD *)(v23 + 2) = *(v22 - 36);
    int v24 = *((unsigned __int8 *)v22 - 2);
    *(_DWORD *)(v23 + 4) = v24;
    int v25 = v24 | (*v22 << 8);
    *(_DWORD *)(v23 + 4) = v25;
    *(_DWORD *)(v23 + 4) = v25 | (*((unsigned __int8 *)v22 - 1) << 24);
    *(unsigned char *)(v23 + 14) = *((unsigned char *)v22 - 70);
    uint64_t v26 = *((unsigned __int8 *)v22 - 68);
    *(unsigned char *)(v23 + 15) = v26;
    *(_WORD *)(v23 + 16) = (*((unsigned __int8 *)v22 - 69) << 6) | (16 * *((unsigned __int8 *)v22 - 76)) | 0x401;
    uint64_t v27 = v26 + 18;
    if (v26 + 18 + (unint64_t)v17 >= 0x401) {
      break;
    }
    *(_WORD *)uint64_t v23 = v27;
    memcpy((void *)(v23 + 18), (char *)v22 - 67, *((unsigned __int8 *)v22 - 68));
    v23 += v27;
    v17 += v27;
    ++v21;
    v22 += 40;
    if (v21 >= *((unsigned __int8 *)v5 + 14)) {
      goto LABEL_23;
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)v35 + 1024))(v35))
  {
    (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)v35 + 1024))(v35);
    if (CCLogStream::shouldLog())
    {
      unsigned int v32 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)v35 + 1024))(v35);
      CCLogStream::logAlert(v32, "[dk] %s@%d:%s:%u ERROR: Invalid length\n", "setNAN_COMMITTED_AVAILABILITY", 6207, "setNAN_COMMITTED_AVAILABILITY", 6207);
    }
  }
LABEL_30:
  uint64_t v7 = 6;
LABEL_31:
  IOFreeData();
  return v7;
}

uint64_t AppleBCMWLANNANInterface::setNAN_RemoveCommittedAvailability(AppleBCMWLANNANInterface *this, int a2)
{
  int v10 = 0;
  uint64_t v9 = a2;
  int v8 = 536936464;
  if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logAlert(v6, "[dk] %s@%d:Removing map %d from NAN availability\n", "setNAN_RemoveCommittedAvailability", 6324, a2);
    }
  }
  uint64_t v4 = AppleBCMWLANNANInterface::issueSetIOVAR(this, 274, &v8, 0x10u);
  if (v4)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:ERROR: Unable to remove map %d from NAN availability, ret = %d\n", "setNAN_RemoveCommittedAvailability", 6328, a2, v4);
      }
    }
  }
  return v4;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_COMMITTED_AVAILABILITY(uint64_t a1, int *a2)
{
  return AppleBCMWLANNANInterface::setNAN_COMMITTED_AVAILABILITY((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_COMMITTED_AVAILABILITY((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::buildNAN_CommittedAvailability(AppleBCMWLANNANInterface *this, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 < 2)
  {
    uint64_t v7 = a2 + 1284 * a4;
    unsigned int v10 = *(unsigned __int8 *)(v7 + 9);
    uint64_t v9 = (unsigned char *)(v7 + 9);
    unsigned int v8 = v10;
    if (v10 < 0x11)
    {
      uint64_t v12 = a4;
      if (!v8)
      {
        uint64_t v14 = *((void *)this + 17) + a4;
        int v16 = *(unsigned __int8 *)(v14 + 93);
        int v15 = (unsigned char *)(v14 + 93);
        if (v16 == 1)
        {
          *int v15 = 0;
          AppleBCMWLANNANInterface::setNAN_RemoveCommittedAvailability(this, a4);
        }
        return 0;
      }
      if (*(_DWORD *)a2 | *(unsigned __int16 *)(a2 + 4))
      {
        *(_WORD *)(a3 + 2) = 2;
        unsigned int v8 = *(_DWORD *)a2;
        *(_WORD *)(a3 + 12) = *(_WORD *)(a2 + 4);
        *(_DWORD *)(a3 + 8) = v8;
        LOBYTE(v8) = *v9;
      }
      else
      {
        *(_WORD *)(a3 + 2) = 9;
      }
      *(unsigned char *)(a3 + 14) = v8;
      *(unsigned char *)(a3 + 4) = *(unsigned char *)(a2 + 1284 * a4 + 10);
      if (*v9)
      {
        unint64_t v17 = 0;
        uint64_t v18 = a3 + 16;
        ether_addr v19 = (unsigned __int16 *)(a2 + 1284 * a4 + 88);
        unsigned __int16 v20 = 16;
        while (1)
        {
          *(_WORD *)(v18 + 16) = 1025;
          *(_WORD *)(v18 + 2) = *(v19 - 36);
          int v21 = *((unsigned __int8 *)v19 - 2);
          *(_DWORD *)(v18 + 4) = v21;
          int v22 = v21 | (*v19 << 8);
          *(_DWORD *)(v18 + 4) = v22;
          *(_DWORD *)(v18 + 4) = v22 | (*((unsigned __int8 *)v19 - 1) << 24);
          *(unsigned char *)(v18 + 12) = 0;
          *(unsigned char *)(v18 + 14) = *((unsigned char *)v19 - 70);
          uint64_t v23 = *((unsigned __int8 *)v19 - 68);
          *(unsigned char *)(v18 + 15) = v23;
          *(_WORD *)(v18 + 16) = (*((unsigned __int8 *)v19 - 69) << 6) | (16 * *((unsigned __int8 *)v19 - 76)) | 0x401;
          uint64_t v24 = v23 + 18;
          if (v23 + 18 + (unint64_t)v20 >= 0x401) {
            break;
          }
          *(_WORD *)uint64_t v18 = v24;
          memcpy((void *)(v18 + 18), (char *)v19 - 67, *((unsigned __int8 *)v19 - 68));
          v18 += v24;
          v20 += v24;
          ++v17;
          v19 += 40;
          if (v17 >= *v9) {
            goto LABEL_22;
          }
        }
        if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
        {
          (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
          if (CCLogStream::shouldLog())
          {
            int v25 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
            CCLogStream::logAlert(v25, "[dk] %s@%d:%s:%u ERROR: Invalid length\n", "buildNAN_CommittedAvailability", 6294, "buildNAN_CommittedAvailability", 6294);
          }
        }
        return 6;
      }
      else
      {
        unsigned __int16 v20 = 16;
LABEL_22:
        *(_WORD *)a3 = v20;
        *(unsigned char *)(*((void *)this + 17) + v12 + 9AppleBCMWLANJoinAdapter::free(this - 3) = 1;
        return v20;
      }
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (result)
      {
        (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          unsigned int v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
          CCLogStream::logCrit(v11, "[dk] %s@%d:ERROR: Num Entries %d larger than max of %d \n");
          return 0;
        }
      }
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logCrit(v6, "[dk] %s@%d:ERROR: MapId %d larger than max of %d \n");
        return 0;
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::buildNAN_CommittedAvailability(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return AppleBCMWLANNANInterface::buildNAN_CommittedAvailability((AppleBCMWLANNANInterface *)(a1 - 128), a2, a3, a4);
}

uint64_t AppleBCMWLANNANInterface::setNAN_POTENTIAL_AVAILABILITYInternal(AppleBCMWLANNANInterface *a1, unsigned __int8 *a2)
{
  uint64_t v4 = IOMallocZeroData();
  if (!v4) {
    return 12;
  }
  uint64_t v5 = (_WORD *)v4;
  if (*a2 <= 2u)
  {
    if (*a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = v4 + 16;
      uint64_t v9 = (unsigned __int16 *)(a2 + 88);
      unsigned int v10 = a2 + 4;
      unsigned int v11 = a2;
      uint64_t v34 = v4 + 16;
      uint64_t v37 = a1;
      unsigned __int16 v38 = a2;
      __src = (char *)(a2 + 21);
      while (1)
      {
        uint64_t v12 = &v11[1290 * v7];
        bzero(v5, 0x400uLL);
        LODWORD(v1AppleBCMWLANJoinAdapter::free(this - 3) = v12[10];
        if (v12[10]) {
          __int16 v14 = 8;
        }
        else {
          __int16 v14 = 8200;
        }
        v5[1] = v14;
        *((unsigned char *)v5 + 14) = v13;
        *((unsigned char *)v5 + 4) = v12[2];
        unsigned int v36 = v9;
        if (v13)
        {
          uint64_t v15 = v7;
          unint64_t v16 = 0;
          unsigned __int16 v17 = 16;
          uint64_t v18 = v38;
          while (1)
          {
            *(_WORD *)(v8 + 16) = 1026;
            *(_WORD *)(v8 + 2) = *(v9 - 36);
            int v19 = *((unsigned __int8 *)v9 - 2);
            *(_DWORD *)(v8 + 4) = v19;
            int v20 = v19 | (*v9 << 8);
            *(_DWORD *)(v8 + 4) = v20;
            *(_DWORD *)(v8 + 4) = v20 | (*((unsigned __int8 *)v9 - 1) << 24);
            *(unsigned char *)(v8 + 14) = *((unsigned char *)v9 - 70);
            uint64_t v21 = *((unsigned __int8 *)v9 - 68);
            *(unsigned char *)(v8 + 15) = v21;
            *(_WORD *)(v8 + 16) = (*((unsigned __int8 *)v9 - 69) << 6) | (16 * *((unsigned __int8 *)v9 - 76)) | 0x402;
            uint64_t v22 = v21 + 18;
            if (v21 + 18 + (unint64_t)v17 >= 0x401) {
              break;
            }
            *(_WORD *)uint64_t v8 = v22;
            memcpy((void *)(v8 + 18), (char *)v9 - 67, *((unsigned __int8 *)v9 - 68));
            v8 += v22;
            v17 += v22;
            ++v16;
            unint64_t v13 = *((unsigned __int8 *)v5 + 14);
            v9 += 40;
            if (v16 >= v13)
            {
              uint64_t v7 = v15;
              goto LABEL_19;
            }
          }
          if (!(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)v37 + 1024))(v37)) {
            goto LABEL_32;
          }
          (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)v37 + 1024))(v37);
          if (!CCLogStream::shouldLog()) {
            goto LABEL_32;
          }
          int v29 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)v37 + 1024))(v37);
          int v30 = 6392;
          goto LABEL_39;
        }
        unsigned __int16 v17 = 16;
        uint64_t v18 = v38;
LABEL_19:
        uint64_t v35 = v7;
        uint64_t v23 = &v18[1290 * v7];
        unsigned __int8 v25 = v23[3];
        uint64_t v24 = v23 + 3;
        *((unsigned char *)v5 + 14) = v25 + v13;
        if (*v24)
        {
          unint64_t v26 = 0;
          uint64_t v27 = __src;
          while (1)
          {
            *(_DWORD *)(v8 + 4) = v10[v26];
            *(_WORD *)(v8 + 16) |= 0x112u;
            uint64_t v28 = *(unsigned __int8 *)(v8 + 15) + 18;
            if (v28 + (unint64_t)v17 >= 0x401) {
              break;
            }
            *(_WORD *)uint64_t v8 = v28;
            memcpy((void *)(v8 + 18), v27, *(v27 - 1));
            v8 += v28;
            v17 += v28;
            ++v26;
            v27 += 80;
            if (v26 >= *v24) {
              goto LABEL_23;
            }
          }
          if (!(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)v37 + 1024))(v37)) {
            goto LABEL_32;
          }
          (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)v37 + 1024))(v37);
          if (!CCLogStream::shouldLog()) {
            goto LABEL_32;
          }
          int v29 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)v37 + 1024))(v37);
          int v30 = 6413;
LABEL_39:
          CCLogStream::logAlert(v29, "[dk] %s@%d:%s:%u ERROR: Invalid length\n", "setNAN_POTENTIAL_AVAILABILITYInternal", v30, "setNAN_POTENTIAL_AVAILABILITYInternal", v30);
LABEL_32:
          uint64_t v6 = 6;
          goto LABEL_33;
        }
LABEL_23:
        *uint64_t v5 = v17;
        uint64_t v6 = AppleBCMWLANNANInterface::issueSetIOVAR(v37, 274, v5, v17);
        if (v6) {
          break;
        }
        uint64_t v7 = v35 + 1;
        uint64_t v9 = v36 + 645;
        v10 += 1290;
        __src += 1290;
        uint64_t v8 = v34;
        unsigned int v11 = v18;
        if (v35 + 1 >= (unint64_t)*v18) {
          goto LABEL_33;
        }
      }
      if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)v37 + 1024))(v37))
      {
        (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)v37 + 1024))(v37);
        if (CCLogStream::shouldLog())
        {
          unsigned int v32 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)v37 + 1024))(v37);
          CCLogStream::logAlert(v32, "[dk] %s@%d:ERROR: Unable to set the NAN potential availability, ret = %d\n", "setNAN_POTENTIAL_AVAILABILITYInternal", 6430, v6);
        }
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  else
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v33 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v33, "[dk] %s@%d:ERROR: Invalid number of maps %d \n", "setNAN_POTENTIAL_AVAILABILITYInternal", 6355, *a2);
      }
    }
    uint64_t v6 = 22;
  }
LABEL_33:
  IOFreeData();
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_POTENTIAL_AVAILABILITY(uint64_t a1, unsigned __int8 *a2)
{
  return AppleBCMWLANNANInterface::setNAN_POTENTIAL_AVAILABILITYInternal((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_POTENTIAL_AVAILABILITYInternal((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_NDC_AVAILABILITY(AppleBCMWLANNANInterface *a1, unsigned __int8 *a2)
{
  uint64_t v4 = IOMallocZeroData();
  if (!v4) {
    return 12;
  }
  uint64_t v5 = (_WORD *)v4;
  if (*a2 <= 2u)
  {
    if (*a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (char *)(a2 + 15);
      while (1)
      {
        bzero(v5, 0x400uLL);
        __int16 v9 = *(v8 - 6) ? 16387 : 3;
        v5[1] = v9;
        *((unsigned char *)v5 + 14) = 1;
        *((unsigned char *)v5 + 4) = v7;
        *((unsigned char *)v5 + 5) = v7;
        int v10 = *(_DWORD *)(v8 - 13);
        v5[6] = *(_WORD *)(v8 - 9);
        *((_DWORD *)v5 + 2) = v10;
        v5[16] = 1;
        v5[9] = *(_WORD *)(v8 - 5);
        *((unsigned char *)v5 + 30) = *(v8 - 3);
        int v11 = *(v8 - 1);
        *((unsigned char *)v5 + 31) = v11;
        v5[16] = (*(v8 - 2) << 6) | 1;
        v5[8] = v11 + 18;
        memcpy(v5 + 17, v8, *(v8 - 1));
        *uint64_t v5 = v11 + 34;
        uint64_t v12 = AppleBCMWLANNANInterface::issueSetIOVAR(a1, 274, v5, v11 + 34);
        if (v12) {
          break;
        }
        v8 += 78;
        if (++v7 >= (unint64_t)*a2) {
          goto LABEL_15;
        }
      }
      uint64_t v6 = v12;
      if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logAlert(v15, "[dk] %s@%d:ERROR: Unable to set the NAN Data cluster availability, ret = %d\n", "setNAN_NDC_AVAILABILITY", 6499, v6);
        }
      }
    }
    else
    {
LABEL_15:
      uint64_t v6 = 0;
    }
  }
  else
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        __int16 v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v14, "[dk] %s@%d:ERROR: Invalid number of maps %d \n", "setNAN_NDC_AVAILABILITY", 6453, *a2);
      }
    }
    uint64_t v6 = 22;
  }
  IOFreeData();
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_NDC_AVAILABILITY(uint64_t a1, unsigned __int8 *a2)
{
  return AppleBCMWLANNANInterface::setNAN_NDC_AVAILABILITY((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_NDC_AVAILABILITY((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_IMMUTABLE_AVAILABILITY(AppleBCMWLANNANInterface *a1, unsigned __int8 *a2)
{
  uint64_t v4 = IOMallocZeroData();
  if (!v4) {
    return 12;
  }
  uint64_t v5 = (_WORD *)v4;
  if (*a2 <= 2u)
  {
    if (*a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (char *)(a2 + 9);
      while (1)
      {
        bzero(v5, 0x400uLL);
        v5[1] = 4;
        *((unsigned char *)v5 + 14) = 1;
        *((unsigned char *)v5 + 4) = v7;
        v5[16] = 1;
        v5[9] = *(_WORD *)(v8 - 5);
        *((unsigned char *)v5 + 30) = *(v8 - 3);
        int v9 = *(v8 - 1);
        *((unsigned char *)v5 + 31) = v9;
        v5[16] = (*(v8 - 2) << 6) | 1;
        v5[8] = v9 + 18;
        memcpy(v5 + 17, v8, *(v8 - 1));
        *uint64_t v5 = v9 + 34;
        uint64_t v10 = AppleBCMWLANNANInterface::issueSetIOVAR(a1, 274, v5, v9 + 34);
        if (v10) {
          break;
        }
        v8 += 72;
        if (++v7 >= (unint64_t)*a2) {
          goto LABEL_12;
        }
      }
      uint64_t v6 = v10;
      if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          unint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logAlert(v13, "[dk] %s@%d:ERROR: Unable to set the NAN immutable availability, ret = %d\n", "setNAN_IMMUTABLE_AVAILABILITY", 6561, v6);
        }
      }
    }
    else
    {
LABEL_12:
      uint64_t v6 = 0;
    }
  }
  else
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v12, "[dk] %s@%d:ERROR: Invalid number of maps %d \n", "setNAN_IMMUTABLE_AVAILABILITY", 6521, *a2);
      }
    }
    uint64_t v6 = 22;
  }
  IOFreeData();
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_IMMUTABLE_AVAILABILITY(uint64_t a1, unsigned __int8 *a2)
{
  return AppleBCMWLANNANInterface::setNAN_IMMUTABLE_AVAILABILITY((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_IMMUTABLE_AVAILABILITY((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_RANGING_AVAILABILITY(AppleBCMWLANNANInterface *a1, unsigned __int8 *a2)
{
  uint64_t v4 = IOMallocZeroData();
  if (!v4) {
    return 12;
  }
  uint64_t v5 = (_WORD *)v4;
  if (*a2 <= 2u)
  {
    if (*a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (char *)(a2 + 9);
      while (1)
      {
        bzero(v5, 0x400uLL);
        v5[1] = 7;
        *((unsigned char *)v5 + 14) = 1;
        *((unsigned char *)v5 + 4) = v7;
        v5[16] = 1;
        v5[9] = *(_WORD *)(v8 - 5);
        *((unsigned char *)v5 + 30) = *(v8 - 3);
        int v9 = *(v8 - 1);
        *((unsigned char *)v5 + 31) = v9;
        v5[16] = (*(v8 - 2) << 6) | 1;
        v5[8] = v9 + 18;
        memcpy(v5 + 17, v8, *(v8 - 1));
        *uint64_t v5 = v9 + 34;
        uint64_t v10 = AppleBCMWLANNANInterface::issueSetIOVAR(a1, 274, v5, v9 + 34);
        if (v10) {
          break;
        }
        v8 += 72;
        if (++v7 >= (unint64_t)*a2) {
          goto LABEL_12;
        }
      }
      uint64_t v6 = v10;
      if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          unint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logAlert(v13, "[dk] %s@%d:ERROR: Unable to set the NAN ranging availability, ret = %d\n", "setNAN_RANGING_AVAILABILITY", 6623, v6);
        }
      }
    }
    else
    {
LABEL_12:
      uint64_t v6 = 0;
    }
  }
  else
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v12, "[dk] %s@%d:ERROR: Invalid number of maps %d \n", "setNAN_RANGING_AVAILABILITY", 6583, *a2);
      }
    }
    uint64_t v6 = 22;
  }
  IOFreeData();
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_RANGING_AVAILABILITY(uint64_t a1, unsigned __int8 *a2)
{
  return AppleBCMWLANNANInterface::setNAN_RANGING_AVAILABILITY((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_RANGING_AVAILABILITY((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::getNAN_DEVICE_CAPABILITY(AppleBCMWLANNANInterface *a1, unsigned char *a2)
{
  int v15 = 0;
  int v14 = 0;
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 17) + 64) + 88))(*(void *)(*((void *)a1 + 17) + 64));
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 136))(v4))
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v5 = 1;
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: OnThread cannot issue sync iovars\n");
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v13[0] = &v15;
    v13[1] = 0x400040004;
    uint64_t v7 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 72), (uint64_t)"txchain", (uint64_t)&kNoTxPayload, (uint64_t)v13, 0);
    if (v7)
    {
      uint64_t v5 = v7;
      if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logAlert(v8, "[dk] %s@%d:ERROR: Unable to get the txchain iovar\n");
        }
      }
    }
    else
    {
      v12[0] = &v14;
      v12[1] = 0x400040004;
      uint64_t v5 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 72), (uint64_t)"rxchain", (uint64_t)&kNoTxPayload, (uint64_t)v12, 0);
      if (v5)
      {
        if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            int v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
            CCLogStream::logAlert(v9, "[dk] %s@%d:ERROR: Unable to get the rxchain iovar\n");
          }
        }
      }
      else
      {
        a2[1] = v14;
        *a2 = v15;
        a2[2] = !AppleBCMWLANCore::isSupportedPhyMode11nOnly(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64));
        if (AppleBCMWLANCore::isDualBand(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64))) {
          char v10 = 20;
        }
        else {
          char v10 = 4;
        }
        a2[3] = v10;
        if (!AppleBCMWLANNANInterface::getNAN_FwCapability(a1)) {
          a2[6] = **((unsigned char **)a1 + 17);
        }
        a2[8] = *(unsigned char *)(*((void *)a1 + 17) + 56);
        a2[7] = *(unsigned char *)(*((void *)a1 + 17) + 57);
        a2[9] = *(unsigned char *)(*((void *)a1 + 17) + 58);
        a2[10] = *(unsigned char *)(*((void *)a1 + 17) + 59);
        a2[11] = *(unsigned char *)(*((void *)a1 + 17) + 60);
        a2[12] = *(unsigned char *)(*((void *)a1 + 17) + 61);
      }
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getNAN_DEVICE_CAPABILITY(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANNANInterface::getNAN_DEVICE_CAPABILITY((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::getNAN_DEVICE_CAPABILITY((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_DP_REQ(AppleBCMWLANNANInterface *a1, uint64_t a2)
{
  if (*(unsigned char *)a2) {
    int v4 = 42;
  }
  else {
    int v4 = 34;
  }
  unsigned int v5 = *(unsigned __int16 *)(a2 + 2072);
  if (*(_WORD *)(a2 + 2072))
  {
    if (v5 > 0xFFFC) {
      return 22;
    }
    int v4 = (v4 | 4) + ((v5 + 3) & 0x1FFFC) + ((v5 + 6) & 0x1FFFC);
  }
  BOOL v6 = v5 != 0;
  if (*(unsigned char *)(a2 + 2074) == 3) {
    int v7 = 76;
  }
  else {
    int v7 = 56;
  }
  if (*(unsigned char *)(a2 + 2074)) {
    int v8 = v7;
  }
  else {
    int v8 = 0;
  }
  unsigned int v9 = v8 + v4;
  uint64_t v10 = *(void *)(a2 + 2128);
  if (v10)
  {
    v9 += 8;
    int v11 = 1;
  }
  else
  {
    int v11 = v6;
  }
  if (v11) {
    unsigned int v12 = v9 + 4;
  }
  else {
    unsigned int v12 = v9;
  }
  if (v12 > 0xC00) {
    return 22;
  }
  uint64_t v14 = IOMallocZeroData();
  if (!v14) {
    return 12;
  }
  int v15 = (_WORD *)v14;
  unint64_t v16 = (const void *)(a2 + 24);
  *(unsigned char *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 1) = *(unsigned char *)(a2 + 2);
  __int16 v17 = *(_WORD *)(v14 + 2) | (2 * (*(unsigned char *)(a2 + 10) != 0));
  *(_WORD *)(v14 + 2) = v17;
  int v18 = *(_DWORD *)(a2 + 11);
  *(_WORD *)(v14 + 20) = *(_WORD *)(a2 + 15);
  *(_DWORD *)(v14 + 16) = v18;
  int v19 = *(_DWORD *)(a2 + 17);
  *(_WORD *)(v14 + 8) = *(_WORD *)(a2 + 21);
  *(_DWORD *)(v14 + 4) = v19;
  *(unsigned char *)(v14 + 30) = 0;
  *(_WORD *)(v14 + 32) = -1;
  if (*(unsigned char *)a2)
  {
    *(_DWORD *)(v14 + 34) = 65805;
    *(unsigned char *)(v14 + 38) = *(unsigned char *)a2;
    int v20 = (char *)(v14 + 42);
  }
  else
  {
    int v20 = (char *)(v14 + 34);
  }
  if (*(_WORD *)(a2 + 2072))
  {
    *(_WORD *)(v14 + 2) = v17 | 1;
    *(_WORD *)int v20 = 769;
    size_t v21 = *(unsigned __int16 *)(a2 + 2072);
    *((_WORD *)v20 + 1) = v21;
    uint64_t v22 = v20 + 4;
    memcpy(v22, (const void *)(a2 + 24), v21);
    int v20 = &v22[(v21 + 3) & 0x1FFFC];
  }
  if (*(unsigned char *)(a2 + 2074))
  {
    v15[1] |= 8u;
    *(_DWORD *)int v20 = 65800;
    v20[4] = *(unsigned char *)(a2 + 2074);
    *((_DWORD *)v20 + 2) = 393479;
    int v23 = *(_DWORD *)(a2 + 4);
    *((_WORD *)v20 + 8) = *(_WORD *)(a2 + 8);
    *((_DWORD *)v20 + AppleBCMWLANJoinAdapter::free(this - 3) = v23;
    *((_DWORD *)v20 + 5) = 2097417;
    long long v24 = *(_OWORD *)(a2 + 2075);
    *(_OWORD *)(v20 + 40) = *(_OWORD *)(a2 + 2091);
    *(_OWORD *)(v20 + 24) = v24;
    if (*(unsigned char *)(a2 + 2074) != 3)
    {
      v20 += 56;
      if (!v11) {
        goto LABEL_40;
      }
LABEL_34:
      *(_WORD *)int v20 = 784;
      unsigned __int8 v25 = v20 + 4;
      if (v10)
      {
        v20[4] = 0;
        *(_WORD *)(v20 + 5) = 8;
        *(void *)(v20 + 7) = *(void *)(a2 + 2128);
        unsigned __int8 v25 = v20 + 15;
        __int16 v26 = 11;
      }
      else
      {
        __int16 v26 = 0;
      }
      size_t v27 = *(unsigned __int16 *)(a2 + 2072);
      if (v27)
      {
        *unsigned __int8 v25 = 1;
        *(_WORD *)(v25 + 1) = v27;
        memcpy(v25 + 3, v16, v27);
        v26 += v27 + 3;
      }
      *((_WORD *)v20 + 1) = v26;
      goto LABEL_40;
    }
    *((_DWORD *)v20 + 14) = 1048842;
    *(_OWORD *)(v20 + 60) = *(_OWORD *)(a2 + 2136);
    v20 += 76;
  }
  if (v11) {
    goto LABEL_34;
  }
LABEL_40:
  uint64_t IOVAR = AppleBCMWLANNANInterface::issueGetIOVAR(a1, 1284, v15, v12);
  if (IOVAR)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v29 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        int v30 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANInterface *, uint64_t))(*(void *)a1 + 856))(a1, IOVAR);
        CCLogStream::logAlert(v29, "[dk] %s@%d:ERROR: Unable to set NAN DP request %s (%d)\n", "setNAN_DP_REQ", 6845, v30, IOVAR);
      }
    }
  }
  IOFreeData();
  return IOVAR;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_DP_REQ(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANNANInterface::setNAN_DP_REQ((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_DP_REQ((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_DP_RESP(AppleBCMWLANNANInterface *a1, uint64_t a2)
{
  if (*(_WORD *)(a2 + 2082)) {
    int v2 = ((*(unsigned __int16 *)(a2 + 2082) + 3) & 0x1FFFC) + 46;
  }
  else {
    int v2 = 42;
  }
  if (*(unsigned char *)(a2 + 2124) == 3) {
    int v3 = 76;
  }
  else {
    int v3 = 56;
  }
  if (*(unsigned char *)(a2 + 2124)) {
    int v4 = v3;
  }
  else {
    int v4 = 0;
  }
  unsigned int v5 = v2 + v4;
  if ((v2 + v4) > 0xC00) {
    return 22;
  }
  uint64_t v9 = IOMallocZeroData();
  if (!v9) {
    return 12;
  }
  uint64_t v10 = (_WORD *)v9;
  *(unsigned char *)uint64_t v9 = 0;
  int v11 = *(unsigned __int8 *)(a2 + 1);
  if (*(unsigned char *)(a2 + 1))
  {
    if (v11 == 2)
    {
      *(unsigned char *)(v9 + 1) = 0;
    }
    else if (v11 == 1)
    {
      *(unsigned char *)(v9 + 1) = 1;
    }
  }
  else
  {
    *(unsigned char *)(v9 + 1) = 1;
    *(_WORD *)(v9 + 24) |= 0x10u;
  }
  *(unsigned char *)(v9 + 2) = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(v9 + AppleBCMWLANJoinAdapter::free(this - 3) = *(unsigned char *)a2;
  int v12 = *(_DWORD *)(a2 + 10);
  *(_WORD *)(v9 + 16) = *(_WORD *)(a2 + 14);
  *(_DWORD *)(v9 + 12) = v12;
  int v13 = *(_DWORD *)(a2 + 22);
  *(_WORD *)(v9 + 22) = *(_WORD *)(a2 + 26);
  *(_DWORD *)(v9 + 18) = v13;
  *(unsigned char *)(v9 + 26) = 0;
  *(_DWORD *)(v9 + 28) = 17760255;
  *(_WORD *)(v9 + 32) = 6;
  int v14 = *(_DWORD *)(a2 + 10);
  *(_WORD *)(v9 + 38) = *(_WORD *)(a2 + 14);
  *(_DWORD *)(v9 + 34) = v14;
  uint64_t v15 = v9 + 42;
  if (*(_WORD *)(a2 + 2082))
  {
    *(_WORD *)(v9 + 24) |= 1u;
    *(_WORD *)(v9 + 42) = 769;
    size_t v16 = *(unsigned __int16 *)(a2 + 2082);
    *(_WORD *)(v9 + 44) = v16;
    memcpy((void *)(v9 + 46), (const void *)(a2 + 34), v16);
    v15 += ((v16 + 3) & 0x1FFFC) + 4;
  }
  if (*(unsigned char *)(a2 + 2124))
  {
    v10[12] |= 8u;
    *(_WORD *)uint64_t v15 = 264;
    *(_WORD *)(v15 + 2) = 1;
    *(unsigned char *)(v15 + 4) = *(unsigned char *)(a2 + 2124);
    *(_DWORD *)(v15 + 8) = 393479;
    int v17 = *(_DWORD *)(a2 + 4);
    *(_WORD *)(v15 + 16) = *(_WORD *)(a2 + 8);
    *(_DWORD *)(v15 + 12) = v17;
    *(_DWORD *)(v15 + 20) = 2097417;
    long long v18 = *(_OWORD *)(a2 + 2125);
    *(_OWORD *)(v15 + 40) = *(_OWORD *)(a2 + 2141);
    *(_OWORD *)(v15 + 24) = v18;
    if (*(unsigned char *)(a2 + 2124) == 3)
    {
      *(_DWORD *)(v15 + 56) = 1048842;
      *(_OWORD *)(v15 + 60) = *(_OWORD *)(a2 + 2157);
    }
  }
  uint64_t IOVAR = AppleBCMWLANNANInterface::issueGetIOVAR(a1, 1285, v10, v5);
  if (IOVAR)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v20 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        size_t v21 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANInterface *, uint64_t))(*(void *)a1 + 856))(a1, IOVAR);
        CCLogStream::logAlert(v20, "[dk] %s@%d:ERROR: Unable to set NAN DP response %s (%d)\n", "setNAN_DP_RESP", 6972, v21, IOVAR);
      }
    }
  }
  IOFreeData();
  return IOVAR;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_DP_RESP(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANNANInterface::setNAN_DP_RESP((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_DP_RESP((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_DP_END(AppleBCMWLANNANInterface *a1, uint64_t a2)
{
  v8[0] = *(unsigned char *)a2;
  int v3 = *(_DWORD *)(a2 + 8);
  v8[1] = *(_DWORD *)(a2 + 4);
  int v9 = v3;
  __int16 v10 = *(_WORD *)(a2 + 12);
  uint64_t v4 = AppleBCMWLANNANInterface::issueSetIOVAR(a1, 1286, v8, 8u);
  if (v4)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        BOOL v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        int v7 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANInterface *, uint64_t))(*(void *)a1 + 856))(a1, v4);
        CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: Unable to set NAN DP terminate %s (%d)\n", "setNAN_DP_END", 6991, v7, v4);
      }
    }
  }
  return v4;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_DP_END(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANNANInterface::setNAN_DP_END((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_DP_END((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_DP_CONF(AppleBCMWLANNANInterface *this, unsigned char *a2)
{
  int v8 = 0;
  LOBYTE(v8) = *a2;
  int v3 = a2[1];
  if (v3 == 1) {
    goto LABEL_4;
  }
  if (v3 == 2)
  {
    LOBYTE(vAppleBCMWLANJoinAdapter::free(this - 3) = 0;
LABEL_4:
    BYTE1(v8) = v3;
  }
  uint64_t v4 = AppleBCMWLANNANInterface::issueSetIOVAR(this, 1294, &v8, 4u);
  if (v4)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        BOOL v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        int v7 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANInterface *, uint64_t))(*(void *)this + 856))(this, v4);
        CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: Unable to set NAN DP confirm %s (%d)\n", "setNAN_DP_CONF", 7012, v7, v4);
      }
    }
  }
  return v4;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_DP_CONF(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANNANInterface::setNAN_DP_CONF((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_DP_CONF((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_RANGING_REQUEST(AppleBCMWLANNANInterface *a1, int *a2)
{
  uint64_t v4 = (char *)IOMallocZeroData();
  if (!v4) {
    return 12;
  }
  unsigned int v5 = v4;
  int v6 = *a2;
  *((_WORD *)v4 + 2) = *((_WORD *)a2 + 2);
  *(_DWORD *)uint64_t v4 = v6;
  v4[6] = *((unsigned char *)a2 + 6);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a2 + 3);
  v4[7] = a2[2];
  uint64_t IOVAR = AppleBCMWLANNANInterface::issueGetIOVAR(a1, 1793, v4, 0x1Cu);
  if (IOVAR)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        int v9 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANInterface *, uint64_t))(*(void *)a1 + 856))(a1, IOVAR);
        CCLogStream::logAlert(v8, "[dk] %s@%d:ERROR: Unable to set NAN Range request %s (%d)\n", "setNAN_RANGING_REQUEST", 7045, v9, IOVAR);
      }
    }
  }
  else
  {
    *((unsigned char *)a2 + 28) = *v5;
  }
  IOFreeData();
  return IOVAR;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_RANGING_REQUEST(uint64_t a1, int *a2)
{
  return AppleBCMWLANNANInterface::setNAN_RANGING_REQUEST((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_RANGING_REQUEST((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_RANGING_RESPONSE(AppleBCMWLANNANInterface *a1, char *a2)
{
  char v7 = *a2;
  uint64_t v3 = AppleBCMWLANNANInterface::issueSetIOVAR(a1, 1794, &v7, 1u);
  if (v3)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        unsigned int v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        int v6 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANInterface *, uint64_t))(*(void *)a1 + 856))(a1, v3);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Unable to set NAN Range auto response %s (%d)\n", "setNAN_RANGING_RESPONSE", 7062, v6, v3);
      }
    }
  }
  return v3;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_RANGING_RESPONSE(uint64_t a1, char *a2)
{
  return AppleBCMWLANNANInterface::setNAN_RANGING_RESPONSE((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_RANGING_RESPONSE((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_RANGING_CANCEL(AppleBCMWLANNANInterface *a1, char *a2)
{
  int v3 = *a2;
  char v8 = *a2;
  uint64_t v4 = AppleBCMWLANNANInterface::issueSetIOVAR(a1, 1796, &v8, 1u);
  if (v4)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        char v7 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANInterface *, uint64_t))(*(void *)a1 + 856))(a1, v4);
        CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: Unable to set NAN Cancel Range Id =%d, %s (%d)\n", "setNAN_RANGING_CANCEL", 7076, v3, v7, v4);
      }
    }
  }
  return v4;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_RANGING_CANCEL(uint64_t a1, char *a2)
{
  return AppleBCMWLANNANInterface::setNAN_RANGING_CANCEL((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_RANGING_CANCEL((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_VENDOR_PAYLOAD(AppleBCMWLANNANInterface *a1, uint64_t a2)
{
  if (a2 && *(_WORD *)(a2 + 260))
  {
    unsigned int v4 = *(unsigned __int16 *)(a2 + 260) + 8;
    uint64_t v5 = IOMallocZeroData();
    if (v5)
    {
      int v6 = (void *)v5;
      *(_DWORD *)uint64_t v5 = *(_DWORD *)a2;
      *(_WORD *)(v5 + 4) = *(_WORD *)(a2 + 260);
      memcpy((void *)(v5 + 8), (const void *)(a2 + 4), *(unsigned __int16 *)(a2 + 260));
      uint64_t v7 = AppleBCMWLANNANInterface::issueSetIOVAR(a1, 283, v6, v4);
      if (v7)
      {
        if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            __int16 v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
            CCLogStream::logAlert(v10, "[dk] %s@%d:ERROR: Could not set vendor specific attribute, issueSetIOVAR failed with retVal [ %d ]\n", "setNAN_VENDOR_PAYLOAD", 7126, v7);
          }
        }
      }
      IOFreeData();
    }
    else
    {
      return 12;
    }
  }
  else
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v9, "[dk] %s@%d:ERROR: Could not issue setIOVAR for vendor specific attribute; Invalid parameters",
          "setNAN_VENDOR_PAYLOAD",
          7101);
      }
    }
    return 22;
  }
  return v7;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_VENDOR_PAYLOAD(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANNANInterface::setNAN_VENDOR_PAYLOAD((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_VENDOR_PAYLOAD((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_SCHEDULE_UPDATE(AppleBCMWLANNANInterface *this, unsigned char *a2)
{
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  if (*a2 && (BYTE1(v12) = 1, uint64_t v4 = AppleBCMWLANNANInterface::issueSetIOVAR(this, 1287, &v12, 0x18u), v4))
  {
    uint64_t v5 = v4;
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        int v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: Unable to set NAN schedule update, ret = %d\n", "setNAN_SCHEDULE_UPDATE", 7143, v5);
      }
    }
  }
  else if (a2[1])
  {
    uint64_t v7 = 0;
    for (unint64_t i = a2 + 2; ; i += 6)
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      *(_DWORD *)((char *)&v12 + 2) = *(_DWORD *)i;
      HIWORD(v12) = *((_WORD *)i + 2);
      uint64_t v9 = AppleBCMWLANNANInterface::issueSetIOVAR(this, 1287, &v12, 0x18u);
      if (v9) {
        break;
      }
      if (++v7 >= (unint64_t)a2[1]) {
        return 0;
      }
    }
    uint64_t v5 = v9;
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        int v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v11, "[dk] %s@%d:ERROR: Unable to set NAN schedule update, ret = %d\n", "setNAN_SCHEDULE_UPDATE", 7154, v5);
      }
    }
  }
  else
  {
    return 0;
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_SCHEDULE_UPDATE(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANNANInterface::setNAN_SCHEDULE_UPDATE((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_SCHEDULE_UPDATE((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_ELECTION_ROLE(AppleBCMWLANNANInterface *a1, uint64_t a2)
{
  int v7 = -1431655766;
  long long v8 = *(_OWORD *)(a2 + 4);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)(a2 + 20);
  *(_OWORD *)&v9[12] = *(_OWORD *)(a2 + 32);
  LOBYTE(v7) = *(unsigned char *)a2;
  uint64_t v3 = AppleBCMWLANNANInterface::issueSetIOVAR(a1, 258, &v7, 0x30u);
  if (v3)
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        int v6 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANInterface *, uint64_t))(*(void *)a1 + 856))(a1, v3);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Unable to set NAN Election Params %s (%d)\n", "setNAN_ELECTION_ROLE", 7171, v6, v3);
      }
    }
  }
  return v3;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_ELECTION_ROLE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANNANInterface::setNAN_ELECTION_ROLE((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_ELECTION_ROLE((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_FAST_DISCOVERY(AppleBCMWLANNANInterface *a1, uint64_t a2)
{
  uint64_t v4 = IOMallocZeroData();
  if (!v4) {
    return 12;
  }
  uint64_t v5 = (_WORD *)v4;
  *(_DWORD *)(*((void *)a1 + 17) + 12) = *(_DWORD *)(*((void *)a1 + 17) + 12) & 0xFFEFFFFF | ((*(unsigned char *)a2 != 0) << 20);
  uint64_t v6 = AppleBCMWLANNANInterface::setNAN_ControlBits(a1, (unsigned int *)(*((void *)a1 + 17) + 12));
  if (v6)
  {
    uint64_t v7 = v6;
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        long long v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v8, "[dk] %s@%d:ERROR: Setting NAN conig-control failed, ret %d\n");
      }
    }
  }
  else
  {
    __int16 v22 = *(_DWORD *)(a2 + 4);
    (*(void (**)(AppleBCMWLANNANInterface *, __int16 *))(*(void *)a1 + 1856))(a1, &v22);
    if (*(unsigned char *)(a2 + 8))
    {
      uint64_t v9 = 0;
      unsigned int v10 = 0;
      int v11 = (unsigned __int8 *)(a2 + 16);
      uint64_t v12 = v5;
      while (1)
      {
        int v13 = *v11;
        __int16 v14 = v13 + 7;
        int v15 = v13 + (((_WORD)v13 + 7) & 0x1FC) + 8;
        if (v15 + v10 >= 0x400) {
          break;
        }
        _WORD *v12 = 271;
        v12[1] = v13 + 4;
        *((unsigned char *)v12 + 4) = v9;
        size_t v16 = v11 + 1;
        unsigned int v17 = *v11;
        v11 += 72;
        *((unsigned char *)v12 + 5) = v17;
        memcpy(v12 + 4, v16, v17);
        uint64_t v18 = (v14 & 0x1FC) + 4;
        uint64_t v12 = (_WORD *)((char *)v12 + v18);
        v10 += v18;
        if (++v9 >= (unint64_t)*(unsigned __int8 *)(a2 + 8))
        {
          uint64_t v7 = AppleBCMWLANNANInterface::issueSetIOVAR(a1, 284, v5, v10);
          if (v7)
          {
            if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
            {
              (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
              if (CCLogStream::shouldLog())
              {
                int v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
                CCLogStream::logAlert(v19, "[dk] %s@%d:ERROR: Unable to set the NAN immutable availability, ret = %d\n");
              }
            }
          }
          goto LABEL_20;
        }
      }
      if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          size_t v21 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logAlert(v21, "[dk] %s@%d:ERROR: No space available in buffer, required %d, used %d, max %d", "setNAN_FAST_DISCOVERY", 7224, v15, v10, 1024);
        }
      }
      uint64_t v7 = 28;
    }
    else
    {
      uint64_t v7 = 0;
    }
  }
LABEL_20:
  IOFreeData();
  return v7;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_FAST_DISCOVERY(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANNANInterface::setNAN_FAST_DISCOVERY((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_FAST_DISCOVERY((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNAN_DATA_PATH_RESTORE(AppleBCMWLANNANInterface *a1, _DWORD *a2)
{
  if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
  {
    (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      long long v24 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v24, "[dk] %s@%d:%s:%u In here\n", "setNAN_DATA_PATH_RESTORE", 7253, "setNAN_DATA_PATH_RESTORE", 7253);
    }
  }
  uint64_t v4 = (*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
  if (a2)
  {
    if (v4)
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        unsigned __int8 v25 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v25, "[dk] %s@%d:%s:%u peerInfoCount:%u, ndpInfoLen:%u \n", "setNAN_DATA_PATH_RESTORE", 7264, "setNAN_DATA_PATH_RESTORE", 7264, *a2, a2[1]);
      }
    }
    int v5 = a2 + 8;
    IO80211HexdumpIf();
    unsigned int v6 = a2[1];
    if (v6)
    {
      int v7 = 0;
      long long v8 = (unsigned __int16 *)(a2 + 2);
      while (1)
      {
        int v9 = *v8;
        if ((v9 & 0xFFFE) != 2) {
          break;
        }
        uint64_t v10 = v8[1];
        v7 += ((v10 + 3) & 0x1FFFC) + 4;
        long long v8 = (unsigned __int16 *)((char *)v8 + v10 + 4);
        if (v6 <= (int)v8 - v5) {
          goto LABEL_18;
        }
      }
      if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          int v29 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logAlert(v29, "[dk] %s@%d:%s:%d Unexpected tagId in cmd:%u\n", "setNAN_DATA_PATH_RESTORE", 7294, "setNAN_DATA_PATH_RESTORE", 7294, v9);
        }
      }
      return 22;
    }
    else
    {
      int v7 = 0;
LABEL_18:
      if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          __int16 v26 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logInfo(v26, "[dk] %s@%d:%s:%u writeBufferLen:%u \n", "setNAN_DATA_PATH_RESTORE", 7303, "setNAN_DATA_PATH_RESTORE", 7303, v7);
        }
      }
      uint64_t v12 = IOMallocZeroData();
      if (v12)
      {
        int v13 = (void *)v12;
        if (a2[1])
        {
          unsigned int v14 = 0;
          int v15 = (_WORD *)v12;
          size_t v16 = (unsigned __int16 *)(a2 + 2);
          while (1)
          {
            int v17 = *v16;
            if (v17 == 2)
            {
              __int16 v18 = 2593;
            }
            else
            {
              if (v17 != 3)
              {
                if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
                {
                  (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
                  if (CCLogStream::shouldLog())
                  {
                    int v30 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
                    CCLogStream::logAlert(v30, "[dk] %s@%d:%s:%d ERROR: Unexpected tagId in cmd:%u\n", "setNAN_DATA_PATH_RESTORE", 7344, "setNAN_DATA_PATH_RESTORE", 7344, v17);
                  }
                }
                uint64_t v11 = 22;
                goto LABEL_47;
              }
              __int16 v18 = 2594;
            }
            *int v15 = v18;
            size_t v19 = v16[1];
            v15[1] = v19;
            memcpy(v15 + 2, v16 + 2, v19);
            size_t v16 = (unsigned __int16 *)((char *)v16 + v16[1] + 4);
            uint64_t v20 = (v19 + 7) & 0x1FFFC;
            int v15 = (_WORD *)((char *)v15 + v20);
            v14 += v20;
            if (a2[1] <= (v16 - v5)) {
              goto LABEL_36;
            }
          }
        }
        unsigned int v14 = 0;
LABEL_36:
        if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v28 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
            CCLogStream::logInfo(v28, "[dk] %s@%d:%s:%u cmdBufLen:%u \n", "setNAN_DATA_PATH_RESTORE", 7358, "setNAN_DATA_PATH_RESTORE", 7358, v14);
          }
        }
        uint64_t v11 = AppleBCMWLANNANInterface::issueSetIOVAR(a1, 2592, v13, v14);
        if (v11)
        {
          if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
          {
            (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
            if (CCLogStream::shouldLog())
            {
              size_t v21 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
              __int16 v22 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANInterface *, uint64_t))(*(void *)a1 + 856))(a1, v11);
              CCLogStream::logAlert(v21, "[dk] %s@%d:ERROR: Unable to set NAN NSR Params %s (%d)\n", "setNAN_DATA_PATH_RESTORE", 7363, v22, v11);
            }
          }
        }
LABEL_47:
        IOFreeData();
      }
      else
      {
        return 12;
      }
    }
  }
  else
  {
    if (v4)
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        size_t v27 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v27, "[dk] %s@%d:%s:%u nanDpRestoreCmdData is NULL! \n", "setNAN_DATA_PATH_RESTORE", 7368, "setNAN_DATA_PATH_RESTORE", 7368);
      }
    }
    return 0;
  }
  return v11;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_DATA_PATH_RESTORE(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANNANInterface::setNAN_DATA_PATH_RESTORE((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_DATA_PATH_RESTORE((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setCOMPANION_SKYWALK_IF_CREATE(IO80211VirtualInterface *a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 4);
  if (v3)
  {
    if (v3 == 1)
    {
      if (*(void *)(*((void *)a1 + 17) + 96))
      {
        if ((*(uint64_t (**)(IO80211VirtualInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211VirtualInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            __int16 v22 = (CCLogStream *)(*(uint64_t (**)(IO80211VirtualInterface *))(*(void *)a1 + 1024))(a1);
            int v23 = (const char *)(*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 17) + 96) + 160))(*(void *)(*((void *)a1 + 17) + 96));
            long long v24 = (const char *)(*(uint64_t (**)(IO80211VirtualInterface *))(*(void *)a1 + 160))(a1);
            CCLogStream::logAlert(v22, "[dk] %s@%d:ALERT: NAN companion skywalk interface %s already exists for %s\n", "setCOMPANION_SKYWALK_IF_CREATE", 7379, v23, v24);
          }
        }
        int v5 = (const char *)(*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 17) + 96) + 160))(*(void *)(*((void *)a1 + 17) + 96));
        snprintf((char *)(a2 + 8), 0x10uLL, "%s", v5);
      }
      else
      {
        uint64_t v28 = 0;
        *(void *)int v29 = 0;
        uint64_t v30 = 0;
        unint64_t v11 = (*(uint64_t (**)(IO80211VirtualInterface *))(*(void *)a1 + 1008))(a1);
        LOBYTE(v28) = v11;
        v12.i64[0] = 0xFFFFFFFFFFFFLL;
        v12.i64[1] = 0xFFFFFFFFFFFFLL;
        uint64x2_t v13 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v11), v12);
        int16x8_t v14 = (int16x8_t)vshlq_u64(v13, (uint64x2_t)xmmword_100304950);
        *(int32x2_t *)v13.i8 = vmovn_s64((int64x2_t)vshlq_u64(v13, (uint64x2_t)xmmword_100304960));
        *(int32x2_t *)v14.i8 = vmovn_s64((int64x2_t)v14);
        v14.i16[1] = v14.i16[2];
        v14.i16[2] = v13.i16[0];
        v14.i16[3] = v13.i16[2];
        *(_DWORD *)((char *)&v28 + 1) = vmovn_s16(v14).u32[0];
        BYTE5(v28) = BYTE5(v11);
        size_t v27 = "llw";
        LODWORD(v30) = 2;
        *(void *)int v29 = 0x10000000ALL;
        uint64_t SkywalkInterface = AppleBCMWLANCore::createSkywalkInterface(*(IOService **)(*((void *)a1 + 17) + 64), (IOService **)(*((void *)a1 + 17) + 96), (uint64_t)&v27, a1);
        if (SkywalkInterface) {
          return SkywalkInterface;
        }
        AppleBCMWLANSkywalkInterface::setInterfaceUnitNumber(*(AppleBCMWLANSkywalkInterface **)(*((void *)a1 + 17) + 96), v29[1]);
        int v17 = *(IO80211SkywalkInterface **)(*((void *)a1 + 17) + 96);
        unsigned int InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
        IO80211SkywalkInterface::setCompanionInterfaceId(v17, InterfaceId);
        *(_DWORD *)(a2 + 8) = 7826540;
        uint64_t v19 = a2 + 8;
        snprintf((char *)(v19 + 3), 0xDuLL, "%d", v29[1]);
        if ((*(uint64_t (**)(IO80211VirtualInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211VirtualInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v20 = (CCLogStream *)(*(uint64_t (**)(IO80211VirtualInterface *))(*(void *)a1 + 1024))(a1);
            size_t v21 = (const char *)(*(uint64_t (**)(IO80211VirtualInterface *))(*(void *)a1 + 160))(a1);
            CCLogStream::logAlert(v20, "[dk] %s@%d:Created NAN %s companion low latency skywalk interface %s\n", "setCOMPANION_SKYWALK_IF_CREATE", 7405, v21, (const char *)v19);
          }
        }
      }
    }
    return 0;
  }
  else
  {
    uint64_t v7 = *((void *)a1 + 17);
    long long v8 = *(IO80211SkywalkInterface **)(v7 + 96);
    if (v8)
    {
      int v9 = *(AppleBCMWLANCore **)(v7 + 64);
      unsigned int v10 = IO80211SkywalkInterface::getInterfaceId(v8);
      AppleBCMWLANCore::destroySkywalkInterface(v9, v10);
      uint64_t v6 = 0;
      *(void *)(*((void *)a1 + 17) + 96) = 0;
    }
    else
    {
      uint64_t v6 = 3758097088;
      if ((*(uint64_t (**)(IO80211VirtualInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211VirtualInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          unsigned __int8 v25 = (CCLogStream *)(*(uint64_t (**)(IO80211VirtualInterface *))(*(void *)a1 + 1024))(a1);
          __int16 v26 = (const char *)(*(uint64_t (**)(IO80211VirtualInterface *))(*(void *)a1 + 160))(a1);
          CCLogStream::logAlert(v25, "[dk] %s@%d:ERROR: Deletion failed, NAN companion skywalk interface does not exists for %s\n", "setCOMPANION_SKYWALK_IF_CREATE", 7408, v26);
        }
      }
    }
  }
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setCOMPANION_SKYWALK_IF_CREATE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANNANInterface::setCOMPANION_SKYWALK_IF_CREATE((IO80211VirtualInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setCOMPANION_SKYWALK_IF_CREATE((IO80211VirtualInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setNANLLW_PARAMSCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = (void *)result;
    if (*(void *)(a2 + 8)) {
      int v5 = *(const char **)(a2 + 8);
    }
    else {
      int v5 = "(null)";
    }
    if ((*(uint64_t (**)(uint64_t))(*(void *)result + 1024))(result))
    {
      (*(void (**)(void *))(*v4 + 1024))(v4);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(void *))(*v4 + 1024))(v4);
        long long v8 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*v4 + 856))(v4, a3);
        CCLogStream::logAlert(v7, "[dk] %s@%d: ERROR: Cannot set llwParams (%s): %s\n", "setNANLLW_PARAMSCallback", 7423, v5, v8);
      }
    }
    FaultReporter = (CCFaultReporter *)AppleBCMWLANCore::getFaultReporter(*(AppleBCMWLANCore **)(v4[17] + 64));
    return CCFaultReporter::reportFault(FaultReporter, 5u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANNANInterface.cpp", 0x1D02u, "setNANLLW_PARAMSCallback", 0, -469793490, " %s iovar retval %x", v5, a3);
  }
  return result;
}

uint64_t AppleBCMWLANNANInterface::setNAN_LLW_PARAMS(IO80211SkywalkInterface *a1, uint64_t a2)
{
  int v38 = 0;
  memset(v37, 170, sizeof(v37));
  uint64_t v4 = IOMallocZeroData();
  uint64_t v5 = *(void *)AppleBCMWLANCore::getBus(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64));
  if (((*(uint64_t (**)(void))(v5 + 800))() & 1) == 0)
  {
    uint64_t v30 = 3758097095;
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        unsigned int v32 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v32, "[dk] %s@%d:FW does not support llw", "setNAN_LLW_PARAMS", 7461);
        uint64_t v30 = 3758097095;
        if (!v4) {
          return v30;
        }
        goto LABEL_26;
      }
    }
    goto LABEL_34;
  }
  if (!a2)
  {
    uint64_t v30 = 3758097090;
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v35 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v35, "[dk] %s@%d:bad argument\n", "setNAN_LLW_PARAMS", 7462);
        uint64_t v30 = 3758097090;
        if (!v4) {
          return v30;
        }
        goto LABEL_26;
      }
    }
LABEL_34:
    if (!v4) {
      return v30;
    }
    goto LABEL_26;
  }
  if (v4)
  {
    *(unsigned char *)(v4 + 2) = 1;
    if (*(unsigned char *)(a2 + 11))
    {
      uint64_t v6 = *(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64);
      if (v6 && AppleBCMWLANCore::isRllwEnabled(v6))
      {
        char v7 = *(unsigned char *)(a2 + 12);
        *(unsigned char *)(v4 + 2) = 4;
        long long v8 = (int *)&unk_100304980;
        int v9 = (int *)&unk_100304990;
      }
      else
      {
        char v7 = *(unsigned char *)(a2 + 12);
        *(unsigned char *)(v4 + 2) = 2;
        long long v8 = (int *)&unk_1003049C8;
        int v9 = (int *)&unk_1003049D0;
      }
      if (v7) {
        unsigned int v10 = v8;
      }
      else {
        unsigned int v10 = v9;
      }
    }
    else
    {
      unsigned int v10 = &v38;
    }
    unint64_t v11 = 0;
    *(_WORD *)uint64_t v4 = 0x8000;
    *(unsigned char *)(v4 + AppleBCMWLANJoinAdapter::free(this - 3) = 1;
    int8x16_t v12 = (int *)(a2 + 4);
    LODWORD(v1AppleBCMWLANJoinAdapter::free(this - 3) = 4;
    do
    {
      int v14 = v13;
      uint64_t v15 = v4 + v13;
      __int16 v16 = v10[v11];
      *(_WORD *)uint64_t v15 = v16;
      *(_DWORD *)(v15 + 4) = 1;
      __int16 v17 = v13 + 8;
      *(_WORD *)(v4 + (v13 + 8)) = 1;
      uint64_t v13 = (v13 + 12);
      uint64_t v18 = v4 + v13;
      *(_WORD *)(v4 + v1AppleBCMWLANJoinAdapter::free(this - 3) = v16;
      switch(v16)
      {
        case 0:
          *(_WORD *)(v18 + 2) = 4;
          unsigned int v19 = v14 + 16;
          int v20 = *(unsigned __int8 *)(a2 + 11);
          goto LABEL_19;
        case 1:
          *(_WORD *)(v18 + 2) = 20;
          uint64_t v21 = v4 + (v14 + 16);
          int v22 = *v12;
          *(_WORD *)(v21 + 4) = *(_WORD *)(a2 + 8);
          *(_DWORD *)uint64_t v21 = v22;
          *(unsigned char *)(v21 + 15) = *(unsigned char *)(a2 + 10);
          *(_WORD *)(v21 + 16) = *(_WORD *)(a2 + 21);
          *(_DWORD *)(v21 + 6) = *(_DWORD *)(a2 + 14);
          *(unsigned char *)(v21 + 18) = 14;
          *(unsigned char *)(v21 + 14) = 5;
          LOWORD(v22) = (2 * (*(_WORD *)(a2 + 18) & 1)) | *(_WORD *)(v21 + 10);
          *(_WORD *)(v21 + 10) = v22;
          LOWORD(v22) = (*(_WORD *)(a2 + 18) >> 1) & 1 | v22;
          *(_WORD *)(v21 + 10) = v22;
          LOWORD(v22) = *(_WORD *)(a2 + 18) & 4 | v22;
          *(_WORD *)(v21 + 10) = v22;
          LOWORD(v22) = (*(_WORD *)(a2 + 18) >> 6) & 8 | v22;
          *(_WORD *)(v21 + 10) = v22;
          *(_WORD *)(v21 + 10) = (*(_WORD *)(a2 + 18) >> 4) & 0x10 | v22;
          LOBYTE(v22) = (*(unsigned char *)(a2 + 18) >> 3) & 0x10 | *(unsigned char *)(v21 + 12);
          *(unsigned char *)(v21 + 12) = v22;
          *(unsigned char *)(v21 + 12) = (*(unsigned char *)(a2 + 18) >> 3) & 0xF | v22;
          LOWORD(v22) = *(unsigned __int8 *)(a2 + 20) >> 4;
          *(unsigned char *)(v21 + 1AppleBCMWLANJoinAdapter::free(this - 3) = *(unsigned char *)(a2 + 20) >> 4;
          *(unsigned char *)(v21 + 1AppleBCMWLANJoinAdapter::free(this - 3) = *(unsigned char *)(a2 + 20) & 0xF | (16 * (v22 & 0xF));
          LODWORD(v1AppleBCMWLANJoinAdapter::free(this - 3) = v14 + 36;
          break;
        case 2:
          *(_WORD *)(v18 + 2) = 12;
          uint64_t v23 = v4 + (v14 + 16);
          int v24 = *v12;
          *(_WORD *)(v23 + 4) = *(_WORD *)(a2 + 8);
          *(_DWORD *)uint64_t v23 = v24;
          *(unsigned char *)(v23 + 8) = *(unsigned char *)(a2 + 10);
          *(_WORD *)(v23 + 10) = *(_WORD *)(a2 + 34);
          LOWORD(v24) = *(_WORD *)(v23 + 6) | *(unsigned char *)(a2 + 24) & 1;
          *(_WORD *)(v23 + 6) = v24;
          LOWORD(v24) = v24 | *(unsigned char *)(a2 + 24) & 2;
          *(_WORD *)(v23 + 6) = v24;
          LOWORD(v24) = v24 | *(unsigned char *)(a2 + 24) & 4;
          *(_WORD *)(v23 + 6) = v24;
          *(_WORD *)(v23 + 6) = v24 | *(unsigned char *)(a2 + 24) & 8;
          LODWORD(v1AppleBCMWLANJoinAdapter::free(this - 3) = v14 + 28;
          break;
        case 8:
          *(_WORD *)(v18 + 2) = 4;
          unsigned int v19 = v14 + 16;
          int v20 = *(_DWORD *)(a2 + 28);
LABEL_19:
          *(_DWORD *)(v4 + v19) = v20;
          LODWORD(v1AppleBCMWLANJoinAdapter::free(this - 3) = v14 + 20;
          break;
        case 9:
          *(_WORD *)(v18 + 2) = 16;
          uint64_t v25 = v4 + (v14 + 16);
          *(unsigned char *)uint64_t v25 = *(unsigned char *)(a2 + 32);
          *(_WORD *)(v25 + 8) = *(_WORD *)(a2 + 36);
          *(_DWORD *)(v25 + 10) = *(_DWORD *)(a2 + 38);
          *(unsigned char *)(v25 + 14) = *(unsigned char *)(a2 + 42);
          LODWORD(v1AppleBCMWLANJoinAdapter::free(this - 3) = v14 + 32;
          break;
        default:
          break;
      }
      *(_WORD *)(v15 + 2) = v13 - v17 + 4;
      ++v11;
    }
    while (v11 < *(unsigned __int8 *)(v4 + 2));
    v37[0] = a1;
    v37[1] = AppleBCMWLANNANInterface::setNANLLW_PARAMSCallback;
    if ((_WORD)v13) {
      uint64_t v26 = v4;
    }
    else {
      uint64_t v26 = 0;
    }
    void v37[2] = 0;
    v37[3] = v26;
    v37[4] = (unsigned __int16)v13;
    size_t v27 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 72);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
    uint64_t v29 = AppleBCMWLANCommander::sendVirtualIOVarSet(v27, InterfaceId, "hp2p", (uint64_t)&v37[3], kNoRxExpected, (uint64_t)v37, 0);
    uint64_t v30 = 0;
    if (v29)
    {
      uint64_t v34 = v29;
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          unsigned int v36 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logAlert(v36, "[dk] %s@%d:hp2p set iovar failed\n", "setNAN_LLW_PARAMS", 7570);
        }
      }
      uint64_t v30 = v34;
    }
LABEL_26:
    IOFreeData();
    return v30;
  }
  uint64_t v30 = 3758097085;
  if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
  {
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v33 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v33, "[dk] %s@%d:hp2p cmd alloc fail\n", "setNAN_LLW_PARAMS", 7463);
    }
  }
  return v30;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_LLW_PARAMS(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANNANInterface::setNAN_LLW_PARAMS((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_LLW_PARAMS((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::getNAN_LLW_PARAMS(AppleBCMWLANNANInterface *a1, char *a2)
{
  return AppleBCMWLANNANInterface::getHP2P_PARAMS(a1, a2, 355, 0);
}

uint64_t AppleBCMWLANNANInterface::getHP2P_PARAMS(AppleBCMWLANNANInterface *this, char *a2, int a3, int a4)
{
  uint64_t v6 = a2;
  uint64_t v58 = 0;
  uint64_t v8 = 3758097085;
  long long v56 = 0u;
  long long v57 = 0u;
  memset(v55, 170, sizeof(v55));
  if (a3 == 357)
  {
    unint64_t v11 = 0;
    int v9 = 0;
    LODWORD(v56) = 6;
    char v10 = 1;
  }
  else
  {
    if (a3 == 356)
    {
      unint64_t v11 = 0;
      LODWORD(v56) = 7;
      char v10 = 1;
      int v9 = a2;
    }
    else
    {
      if (a3 != 355) {
        return 3758097090;
      }
      int v9 = 0;
      LODWORD(v57) = 8;
      long long v56 = xmmword_1003049E0;
      char v10 = 5;
      unint64_t v11 = (unsigned __int16 *)a2;
    }
    uint64_t v6 = 0;
  }
  uint64_t v12 = IOMallocZeroData();
  uint64_t v13 = IOMallocZeroData();
  uint64_t v14 = *(void *)AppleBCMWLANCore::getBus(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64));
  if (((*(uint64_t (**)(void))(v14 + 800))() & 1) == 0)
  {
    uint64_t v47 = 3758097095;
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        char v50 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v50, "[dk] %s@%d:FW does not support llw", "getHP2P_PARAMS", 7635);
        uint64_t v47 = 3758097095;
        if (v13) {
          goto LABEL_41;
        }
        goto LABEL_42;
      }
    }
    goto LABEL_67;
  }
  if (v12)
  {
    if (!v13)
    {
      if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          char v51 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
          CCLogStream::logAlert(v51, "[dk] %s@%d:hp2p cmd resp alloc fail\n", "getHP2P_PARAMS", 7637);
        }
      }
      goto LABEL_43;
    }
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    *(_WORD *)uint64_t v12 = 0x8000;
    *(unsigned char *)(v12 + 2) = v10;
    *(unsigned char *)(v12 + AppleBCMWLANJoinAdapter::free(this - 3) = 0;
    do
    {
      uint64_t v17 = v12 + v15;
      *(_WORD *)(v17 + 4) = *((_DWORD *)&v56 + v16);
      *(_WORD *)(v17 + 6) = 4;
      *(_DWORD *)(v17 + 8) = 1;
      ++v16;
      v15 += 8;
    }
    while (v16 < *(unsigned __int8 *)(v12 + 2));
    if (a3 == 357)
    {
      uint64_t v18 = v12 + v15;
      *(_WORD *)(v18 + 4) = 1;
      *(_WORD *)(v18 + 6) = a4;
      unsigned __int16 v19 = v15 + 8;
      *(_WORD *)(v18 - 2) = 8;
    }
    else
    {
      unsigned __int16 v19 = v15 + 4;
    }
    if (v19) {
      uint64_t v20 = v12;
    }
    else {
      uint64_t v20 = 0;
    }
    v55[2] = v20;
    v55[3] = v19;
    v55[0] = v13;
    v55[1] = 0x40000000400;
    uint64_t v21 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 72);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
    uint64_t v23 = AppleBCMWLANCommander::runVirtualIOVarGet(v21, InterfaceId, "hp2p", (uint64_t)&v55[2], (uint64_t)v55, 0);
    if (!v23)
    {
      if (!*(unsigned char *)(v13 + 2))
      {
LABEL_40:
        uint64_t v47 = 0;
        goto LABEL_41;
      }
      int v24 = 0;
      uint64_t v25 = &v6[14 * a4];
      uint64_t v26 = v25 + 4;
      size_t v27 = v25 + 6;
      uint64_t v28 = v25 + 14;
      uint64_t v29 = v25 + 16;
      unsigned int v30 = 4;
      while (1)
      {
        uint64_t v31 = v13 + v30;
        switch(*(_WORD *)v31)
        {
          case 0:
            if (v11) {
              *((unsigned char *)v11 + 11) = *(_DWORD *)(v31 + 8) != 0;
            }
            goto LABEL_34;
          case 1:
            if (v11)
            {
              int v32 = v11[9];
              *((unsigned char *)v11 + 10) = *(unsigned char *)(v31 + 23);
              *(_DWORD *)(v11 + 7) = *(_DWORD *)(v31 + 14);
              *(unsigned __int16 *)((char *)v11 + 21) = *(_WORD *)(v31 + 24);
              unsigned int v33 = v32 & 0xFFFFFFFE | (*((unsigned __int8 *)v11 + 20) << 16) | *(_WORD *)(v31 + 18) & 1;
              v11[9] = v33;
              unsigned int v34 = v33 & 0xFFFFFFFD | (2 * ((*(unsigned __int16 *)(v31 + 18) >> 1) & 1));
              v11[9] = v34;
              unsigned int v35 = v34 & 0xFFFFFFFB | (4 * ((*(unsigned __int16 *)(v31 + 18) >> 2) & 1));
              v11[9] = v35;
              unsigned int v36 = v35 & 0xFFF0FFFF | ((*(unsigned char *)(v31 + 21) & 0xF) << 16);
              v11[9] = v35;
              *((unsigned char *)v11 + 20) = BYTE2(v36);
              unsigned int v37 = (*(unsigned __int8 *)(v31 + 21) << 16) & 0xF00000 | v36 & 0xFFFFF;
              v11[9] = v35;
              *((unsigned char *)v11 + 20) = BYTE2(v37);
              v37 &= 0xFFFFFF87;
              LOWORD(v35) = v37 | (8 * (*(unsigned char *)(v31 + 20) & 0xF));
              v37 >>= 16;
              *((unsigned char *)v11 + 20) = v37;
              v11[9] = v35;
              LOWORD(v36) = (8 * *(unsigned __int8 *)(v31 + 20)) & 0x80;
              *((unsigned char *)v11 + 20) = v37;
              v11[9] = v35 & 0xFF7F | v36;
            }
            goto LABEL_29;
          case 2:
            int v38 = *(_DWORD *)(v31 + 8);
            _OWORD v11[4] = *(_WORD *)(v31 + 12);
            *((_DWORD *)v11 + 1) = v38;
            *((unsigned char *)v11 + 10) = *(unsigned char *)(v31 + 16);
            v11[17] = *(_WORD *)(v31 + 18);
            int v39 = v11[12] & 0xFE | *(unsigned char *)(v31 + 14) & 1;
            *((unsigned char *)v11 + 24) = v39;
            unsigned int v40 = v39 & 0xFFFFFFFD | (2 * ((*(unsigned __int8 *)(v31 + 14) >> 1) & 1));
            *((unsigned char *)v11 + 24) = v40;
            unsigned int v41 = v40 & 0xFFFFFFFB | (4 * ((*(unsigned __int8 *)(v31 + 14) >> 2) & 1));
            *((unsigned char *)v11 + 24) = v41;
            *((unsigned char *)v11 + 24) = v41 & 0xF7 | *(unsigned char *)(v31 + 14) & 8;
            unint64_t v42 = 16;
            goto LABEL_38;
          case 6:
            __int16 v43 = *(_WORD *)(v31 + 26);
            __int16 v44 = *(_WORD *)(v31 + 24);
            uint64_t v45 = *(void *)(v31 + 16);
            *uint64_t v26 = a4;
            *size_t v27 = v45;
            *uint64_t v28 = v44;
            *uint64_t v29 = v43;
LABEL_29:
            unint64_t v42 = 24;
            goto LABEL_38;
          case 7:
            if (v9) {
              *((_DWORD *)v9 + 1) = *(_DWORD *)(v31 + 8);
            }
            goto LABEL_34;
          case 8:
            if (v11) {
              *((_DWORD *)v11 + 7) = *(_DWORD *)(v31 + 8);
            }
LABEL_34:
            unint64_t v42 = 8;
            goto LABEL_38;
          case 9:
            if (v11)
            {
              *((unsigned char *)v11 + 32) = *(unsigned char *)(v31 + 8);
              v11[18] = *(_WORD *)(v31 + 16);
              *(_DWORD *)(v11 + 19) = *(_DWORD *)(v31 + 18);
              *((unsigned char *)v11 + 42) = *(unsigned char *)(v31 + 22);
            }
            unint64_t v42 = 20;
LABEL_38:
            unint64_t v46 = *(unsigned __int16 *)(v31 + 2);
            if (v42 > v46)
            {
              if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
              {
                (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
                if (CCLogStream::shouldLog())
                {
                  char v49 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
                  CCLogStream::logAlert(v49, "[dk] %s@%d:Unexpected hp2p subcmd resp length\n");
                }
              }
LABEL_49:
              uint64_t v47 = 3758096385;
              goto LABEL_41;
            }
            v30 += v46 + 4;
            if (++v24 >= *(unsigned __int8 *)(v13 + 2)) {
              goto LABEL_40;
            }
            break;
          default:
            if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
            {
              (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
              if (CCLogStream::shouldLog())
              {
                unsigned __int16 v52 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
                CCLogStream::logAlert(v52, "[dk] %s@%d:Unexpected hp2p subcmd resp id\n");
              }
            }
            goto LABEL_49;
        }
      }
    }
    uint64_t v47 = v23;
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        BOOL v54 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v54, "[dk] %s@%d:hp2p get iovar failed\n", "getHP2P_PARAMS", 7669);
        goto LABEL_41;
      }
    }
LABEL_67:
    if (v13) {
      goto LABEL_41;
    }
    goto LABEL_42;
  }
  if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      size_t v53 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logAlert(v53, "[dk] %s@%d:hp2p cmd alloc fail\n", "getHP2P_PARAMS", 7636);
    }
  }
  uint64_t v47 = 3758097085;
  if (v13) {
LABEL_41:
  }
    IOFreeData();
LABEL_42:
  uint64_t v8 = v47;
  if (v12) {
LABEL_43:
  }
    IOFreeData();
  return v8;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getNAN_LLW_PARAMS(uint64_t a1, char *a2)
{
  return AppleBCMWLANNANInterface::getHP2P_PARAMS((AppleBCMWLANNANInterface *)(a1 - 112), a2, 355, 0);
}

{
  return AppleBCMWLANNANInterface::getHP2P_PARAMS((AppleBCMWLANNANInterface *)(a1 - 128), a2, 355, 0);
}

uint64_t AppleBCMWLANNANInterface::getHP2P_CAPS(AppleBCMWLANNANInterface *a1, char *a2)
{
  return AppleBCMWLANNANInterface::getHP2P_PARAMS(a1, a2, 356, 0);
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getHP2P_CAPS(uint64_t a1, char *a2)
{
  return AppleBCMWLANNANInterface::getHP2P_PARAMS((AppleBCMWLANNANInterface *)(a1 - 112), a2, 356, 0);
}

{
  return AppleBCMWLANNANInterface::getHP2P_PARAMS((AppleBCMWLANNANInterface *)(a1 - 128), a2, 356, 0);
}

uint64_t AppleBCMWLANNANInterface::getRLLW_STATS(AppleBCMWLANNANInterface *a1, char *a2)
{
  AppleBCMWLANNANInterface::getHP2P_PARAMS(a1, a2, 357, 0);
  return AppleBCMWLANNANInterface::getHP2P_PARAMS(a1, a2, 357, 1);
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getRLLW_STATS(uint64_t a1, char *a2)
{
  int v3 = (AppleBCMWLANNANInterface *)(a1 - 112);
  AppleBCMWLANNANInterface::getHP2P_PARAMS((AppleBCMWLANNANInterface *)(a1 - 112), a2, 357, 0);
  return AppleBCMWLANNANInterface::getHP2P_PARAMS(v3, a2, 357, 1);
}

{
  AppleBCMWLANNANInterface *v3;
  uint64_t vars8;

  int v3 = (AppleBCMWLANNANInterface *)(a1 - 128);
  AppleBCMWLANNANInterface::getHP2P_PARAMS((AppleBCMWLANNANInterface *)(a1 - 128), a2, 357, 0);
  return AppleBCMWLANNANInterface::getHP2P_PARAMS(v3, a2, 357, 1);
}

uint64_t AppleBCMWLANNANInterface::setNAN_OOB_AF_TX(AppleBCMWLANNANInterface *a1, uint64_t a2)
{
  if (a2 && *(_WORD *)(a2 + 35))
  {
    unsigned int v4 = *(unsigned __int16 *)(a2 + 35) + 40;
    uint64_t v5 = IOMallocZeroData();
    if (v5)
    {
      uint64_t v6 = (void *)v5;
      int v7 = *(_DWORD *)(a2 + 20);
      *(_WORD *)(v5 + 24) = *(_WORD *)(a2 + 24);
      *(_DWORD *)(v5 + 20) = v7;
      int v8 = *(_DWORD *)(a2 + 8);
      *(_WORD *)(v5 + 18) = *(_WORD *)(a2 + 12);
      *(_DWORD *)(v5 + 14) = v8;
      int v9 = *(_DWORD *)(a2 + 14);
      *(_WORD *)(v5 + 12) = *(_WORD *)(a2 + 18);
      *(_DWORD *)(v5 + 8) = v9;
      *(unsigned char *)(v5 + 26) = *(_DWORD *)(a2 + 29) != 0;
      *(void *)uint64_t v5 = *(void *)a2;
      *(_WORD *)(v5 + 36) = *(_WORD *)(a2 + 33);
      *(unsigned char *)(v5 + 27) = *(unsigned char *)(a2 + 26);
      *(_WORD *)(v5 + 28) = *(_WORD *)(a2 + 27);
      *(_WORD *)(v5 + 38) = *(_WORD *)(a2 + 35);
      memcpy((void *)(v5 + 40), (const void *)(a2 + 37), *(unsigned __int16 *)(a2 + 35));
      uint64_t v10 = AppleBCMWLANNANInterface::issueSetIOVAR(a1, 2051, v6, v4);
      if (v10)
      {
        if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
            CCLogStream::logAlert(v13, "[dk] %s@%d:ERROR: Could not set OOB action frame, issueSetIOVAR failed with retVal:%d\n", "setNAN_OOB_AF_TX", 7803, v10);
          }
        }
      }
      IOFreeData();
    }
    else
    {
      if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logAlert(v14, "[dk] %s@%d:ERROR: Could not allocate memory for wl_nan_oob_af_t\n", "setNAN_OOB_AF_TX", 7775);
        }
      }
      return 12;
    }
  }
  else
  {
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v12, "[dk] %s@%d:ERROR: Could not issue setIOVAR for vendor specific attribute; Invalid parameters",
          "setNAN_OOB_AF_TX",
          7766);
      }
    }
    return 22;
  }
  return v10;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_OOB_AF_TX(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANNANInterface::setNAN_OOB_AF_TX((AppleBCMWLANNANInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setNAN_OOB_AF_TX((AppleBCMWLANNANInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setAWDL_DFSP_CONFIG(IO80211SkywalkInterface *a1, uint64_t a2)
{
  if (IO80211SkywalkInterface::getInterfaceId(a1) == -1)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v12, "[dk] %s@%d:ERROR: NAN Chip interface not initialized, bailing out\n", "setAWDL_DFSP_CONFIG", 7813);
      }
    }
    return 16;
  }
  else
  {
    __int16 v4 = *(_WORD *)(a2 + 12) | 0xD000;
    int v16 = 1310721;
    __int16 v17 = *(_WORD *)(a2 + 4);
    int v18 = *(_DWORD *)(a2 + 6);
    __int16 v19 = v4;
    int v5 = *(_DWORD *)(a2 + 18);
    int v20 = *(_DWORD *)(a2 + 14);
    int v21 = v5;
    v15[0] = a1;
    v15[1] = AppleBCMWLANNANInterface::handleProxIovarAsyncCallBack;
    void v15[2] = 0;
    *(_WORD *)(a2 + 12) = v4;
    uint64_t v6 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 72);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
    v14[0] = &v16;
    v14[1] = 20;
    uint64_t v8 = AppleBCMWLANCommander::sendVirtualIOVarSet(v6, InterfaceId, "awdl_dfsp_cfg", (uint64_t)v14, kNoRxExpected, (uint64_t)v15, 0);
    uint64_t v9 = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    if (v8)
    {
      if (v9)
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          (*(void (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v8);
          CCLogStream::logAlert(v10, "[dk] %s@%d:%s: Could not Enable DFS Proxy mode. Error code  %s\n");
        }
      }
    }
    else if (v9)
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v13, "[dk] %s@%d:%s: DFSP DFS Proxy Mode %s\n");
      }
    }
  }
  return v8;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setAWDL_DFSP_CONFIG(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANNANInterface::setAWDL_DFSP_CONFIG((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setAWDL_DFSP_CONFIG((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::setP2P_COEX_PROTECTION_2G_Only(IO80211SkywalkInterface *a1, uint64_t a2)
{
  uint64_t v4 = IOMallocZeroData();
  if (!v4) {
    return 12;
  }
  uint64_t v5 = v4;
  *(_DWORD *)uint64_t v4 = 16875520;
  *(_WORD *)(v4 + 4) = 2;
  *(_DWORD *)(v4 + 8) = 1;
  size_t v6 = *(unsigned __int8 *)(a2 + 74);
  *(unsigned char *)(v4 + 12) = v6;
  memcpy((void *)(v4 + 16), (const void *)(a2 + 75), v6);
  *(_WORD *)(v5 + 6) = v6 + 8;
  v16[0] = a1;
  v16[1] = AppleBCMWLANNANInterface::handleSlotBssIovarAsyncCallBack;
  unsigned char v16[2] = 0;
  int v7 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 72);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  v15[0] = v5;
  v15[1] = v6 + (((_WORD)v6 + 19) & 0x1FC) + 16;
  uint64_t v9 = AppleBCMWLANCommander::sendVirtualIOVarSet(v7, InterfaceId, "slot_bss", (uint64_t)v15, kNoRxExpected, (uint64_t)v16, 0);
  if (v9)
  {
    uint64_t v10 = v9;
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v14 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v10);
        CCLogStream::logAlert(v13, "[dk] %s@%d:ERROR: Unable to set async nan iovar %s (0x%x)\n", "setP2P_COEX_PROTECTION_2G_Only", 7892, v14, v10);
      }
    }
    uint64_t v11 = (*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 1264))(a1, v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  IOFreeData();
  return v11;
}

uint64_t AppleBCMWLANNANInterface::setP2P_STEERING_POLICY(void *a1, uint64_t a2)
{
  if ((*(uint64_t (**)(void *))(*a1 + 1024))(a1))
  {
    (*(void (**)(void *))(*a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      int v7 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1024))(a1);
      CCLogStream::logAlert(v7, "[dk] %s@%d:%s:%d [Steer]: policy:%d\n", "setP2P_STEERING_POLICY", 7901, "virtual int32_t AppleBCMWLANNANInterface::setP2P_STEERING_POLICY(apple80211_6g_steering_config *)", 7901, *(_DWORD *)(a2 + 4));
    }
  }
  uint64_t v4 = *(AppleBCMWLANCore **)(a1[17] + 64);
  if (*(_DWORD *)(a2 + 4))
  {
    int v5 = 1;
    AppleBCMWLANCore::set6GNegativeBoost(v4, 1);
  }
  else
  {
    AppleBCMWLANCore::restore6GNegativeBoost(v4, 1);
    int v5 = 0;
  }
  AppleBCMWLANCore::setBTMRejection(*(AppleBCMWLANCore **)(a1[17] + 64), v5);
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setP2P_STEERING_POLICY(uint64_t a1, uint64_t a2)
{
  return 0;
}

{
  AppleBCMWLANNANInterface::setP2P_STEERING_POLICY((void *)(a1 - 128), a2);
  return 0;
}

uint64_t AppleBCMWLANNANInterface::setP2P_COEX_PROTECTION(IO80211SkywalkInterface *a1, unsigned __int8 *a2)
{
  if (IO80211SkywalkInterface::getInterfaceId(a1) == -1)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v16 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v16, "[dk] %s@%d:ERROR: NAN Chip interface not initialized, bailing out\n", "setP2P_COEX_PROTECTION", 7921);
      }
    }
    return 16;
  }
  if (AppleBCMWLANCore::isPlatformConfigFirmwareRequired(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64)))
  {
    uint64_t v4 = IOMallocZeroData();
    if (!v4) {
      return 12;
    }
    uint64_t v5 = v4;
    *(_DWORD *)uint64_t v4 = 16875520;
    *(_WORD *)(v4 + 4) = 3;
    *(_DWORD *)(v4 + 8) = 1;
    *(unsigned char *)(v4 + 12) = 2;
    size_t v6 = a2[4];
    *(_WORD *)(v4 + 16) = 0;
    uint64_t v7 = v4 + 16;
    *(_WORD *)(v4 + 18) = v6;
    memcpy((void *)(v4 + 20), a2 + 5, v6);
    size_t v8 = a2[74];
    size_t v9 = v6 + v7;
    *(_WORD *)(v9 + 4) = 1;
    *(_WORD *)(v9 + 6) = v8;
    v6 += 8;
    memcpy((void *)(v7 + v6), a2 + 75, v8);
    *(_WORD *)(v5 + 6) = v6 + v8 + 8;
    v20[0] = a1;
    v20[1] = AppleBCMWLANNANInterface::handleSlotBssIovarAsyncCallBack;
    void v20[2] = 0;
    uint64_t v10 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 72);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
    v19[0] = v5;
    v19[1] = (unsigned __int16)(v6 + v8 + ((v6 + v8 + 19) & 0x7FC) + 16);
    uint64_t v12 = AppleBCMWLANCommander::sendVirtualIOVarSet(v10, InterfaceId, "slot_bss", (uint64_t)v19, kNoRxExpected, (uint64_t)v20, 0);
    if (v12)
    {
      uint64_t v13 = v12;
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          __int16 v17 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          int v18 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v13);
          CCLogStream::logAlert(v17, "[dk] %s@%d:ERROR: Unable to set P2p Coex Protection %s (0x%x)\n", "setP2P_COEX_PROTECTION", 7994, v18, v13);
        }
      }
      uint64_t v14 = (*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 1264))(a1, v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    IOFreeData();
    return v14;
  }
  return AppleBCMWLANNANInterface::setP2P_COEX_PROTECTION_2G_Only(a1, (uint64_t)a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setP2P_COEX_PROTECTION(uint64_t a1, unsigned __int8 *a2)
{
  return AppleBCMWLANNANInterface::setP2P_COEX_PROTECTION((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANNANInterface::setP2P_COEX_PROTECTION((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANNANInterface::getLogger(AppleBCMWLANNANInterface *this)
{
  return *(void *)(*((void *)this + 17) + 80);
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getLogger(AppleBCMWLANNANInterface *this)
{
  return *(void *)(*((void *)this + 7) + 80);
}

uint64_t AppleBCMWLANNANInterface::getBssCfgId(AppleBCMWLANNANInterface *this)
{
  return *(unsigned int *)(*((void *)this + 17) + 104);
}

uint64_t AppleBCMWLANNANInterface::enableDatapath(AppleBCMWLANNANInterface *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1000))(this))
  {
    uint64_t v2 = *(void *)(*((void *)this + 17) + 176);
    if (v2)
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 192))(v2);
      uint64_t v3 = *(void *)(*((void *)this + 17) + 184);
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v3 + 200))(v3);
        uint64_t v4 = *((void *)this + 17);
        if (!*(unsigned char *)(v4 + 128))
        {
LABEL_8:
          uint64_t v7 = (*(uint64_t (**)(void, void, void))(**(void **)(v4 + 184) + 120))(*(void *)(v4 + 184), 0, 0);
          if (v7)
          {
            if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
            {
              (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
              if (CCLogStream::shouldLog())
              {
                uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
                CCLogStream::logInfo(v14, "[dk] %s@%d:skywalk rx completion queue enqueue fail with return %d\n", "enableDatapath", 8084, v7);
              }
            }
            return 0;
          }
          return v7;
        }
        unint64_t v5 = 0;
        while (1)
        {
          uint64_t v6 = *(void *)(v4 + 8 * v5 + 136);
          if (!v6) {
            break;
          }
          (*(void (**)(uint64_t))(*(void *)v6 + 256))(v6);
          ++v5;
          uint64_t v4 = *((void *)this + 17);
          if (v5 >= *(unsigned __int8 *)(v4 + 128)) {
            goto LABEL_8;
          }
        }
        if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
        {
          (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
            CCLogStream::logAlert(v15, "[dk] %s@%d:tx submission queue ac %d not valid\n");
          }
        }
      }
      else if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
          CCLogStream::logAlert(v13, "[dk] %s@%d:rx completion queue not valid\n");
        }
      }
    }
    else if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v12, "[dk] %s@%d:tx completion queue not valid\n");
      }
    }
  }
  else if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 160))(this);
      CCLogStream::logAlert(v11, "[dk] %s@%d:%s %s failed because interface has not been enabled yet\n");
    }
  }
  uint64_t v7 = 3758097084;
  if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      size_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      uint64_t v10 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 160))(this);
      CCLogStream::logAlert(v9, "[dk] %s@%d:%s:%d ERROR: Enabling data path on %s\n", "enableDatapath", 8090, "virtual IOReturn AppleBCMWLANNANInterface::enableDatapath()", 8090, v10);
    }
  }
  return v7;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::enableDatapath(AppleBCMWLANNANInterface *this)
{
  return AppleBCMWLANNANInterface::enableDatapath((AppleBCMWLANNANInterface *)((char *)this - 80));
}

uint64_t AppleBCMWLANNANInterface::enable(AppleBCMWLANNANInterface *this, unsigned int a2)
{
  if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      size_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      uint64_t v10 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 160))(this);
      isPoweredOuint64_t n = AppleBCMWLANCore::isPoweredOn(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64));
      CCLogStream::logAlert(v9, "[dk] %s@%d:%s: enabling NAN interface %s, pwr %d\n", "enable", 8100, "virtual IOReturn AppleBCMWLANNANInterface::enable(IOOptionBits)", v10, isPoweredOn);
    }
  }
  IO80211SkywalkInterface::enable(this, a2);
  if (AppleBCMWLANCore::isPoweredOn(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64))
    && (AppleBCMWLANCore::isWatchdogRunning(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64)) & 1) == 0)
  {
    (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1168))(this);
  }
  else if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      unint64_t v5 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 160))(this);
      BOOL v6 = AppleBCMWLANCore::isPoweredOn(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64));
      int isWatchdogRunning = AppleBCMWLANCore::isWatchdogRunning(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64));
      CCLogStream::logAlert(v4, "[dk] %s@%d:%s data path cannot enable, power state %d, watchdog status %d\n", "enable", 8117, v5, v6, isWatchdogRunning);
    }
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::enable(AppleBCMWLANNANInterface *this, unsigned int a2)
{
  return 0;
}

uint64_t AppleBCMWLANNANInterface::getTxSubQueue(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 136);
  uint64_t v3 = *(unsigned int *)(v2 + 4 * a2 + 232);
  if (v3 >= *(unsigned __int8 *)(v2 + 128)) {
    return 0;
  }
  else {
    return *(void *)(v2 + 8 * v3 + 136);
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getTxSubQueue(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(unsigned int *)(v2 + 4 * a2 + 232);
  if (v3 >= *(unsigned __int8 *)(v2 + 128)) {
    return 0;
  }
  else {
    return *(void *)(v2 + 8 * v3 + 136);
  }
}

uint64_t AppleBCMWLANNANInterface::getTxPacketPool(AppleBCMWLANNANInterface *this)
{
  return *(void *)(*((void *)this + 17) + 200);
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getTxPacketPool(AppleBCMWLANNANInterface *this)
{
  return *(void *)(*((void *)this + 7) + 200);
}

uint64_t AppleBCMWLANNANInterface::getTxCompQueue(AppleBCMWLANNANInterface *this)
{
  return *(void *)(*((void *)this + 17) + 176);
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getTxCompQueue(AppleBCMWLANNANInterface *this)
{
  return *(void *)(*((void *)this + 7) + 176);
}

uint64_t AppleBCMWLANNANInterface::getRxCompQueue(AppleBCMWLANNANInterface *this)
{
  return *(void *)(*((void *)this + 17) + 184);
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getRxCompQueue(AppleBCMWLANNANInterface *this)
{
  return *(void *)(*((void *)this + 7) + 184);
}

uint64_t AppleBCMWLANNANInterface::disableDatapath(AppleBCMWLANNANInterface *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      uint64_t v15 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 160))(this);
      CCLogStream::logAlert(v14, "[dk] %s@%d:disable data path on %s\n", "disableDatapath", 8164, v15);
    }
  }
  uint64_t v2 = *((void *)this + 17);
  if (*(unsigned char *)(v2 + 128))
  {
    unint64_t v3 = 0;
    while (1)
    {
      uint64_t v4 = *(void *)(v2 + 8 * v3 + 136);
      if (!v4) {
        break;
      }
      (*(void (**)(uint64_t))(*(void *)v4 + 272))(v4);
      ++v3;
      uint64_t v2 = *((void *)this + 17);
      if (v3 >= *(unsigned __int8 *)(v2 + 128)) {
        goto LABEL_8;
      }
    }
    if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        int v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logCrit(v16, "[dk] %s@%d:tx submission queue ac %d not valid\n");
      }
    }
  }
  else
  {
LABEL_8:
    uint64_t v5 = *(void *)(v2 + 192);
    if (v5)
    {
      (*(void (**)(uint64_t))(*(void *)v5 + 72))(v5);
      uint64_t v2 = *((void *)this + 17);
    }
    uint64_t v6 = *(void *)(v2 + 184);
    if (v6)
    {
      (*(void (**)(uint64_t))(*(void *)v6 + 208))(v6);
      uint64_t v7 = *(void *)(*((void *)this + 17) + 176);
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v7 + 200))(v7);
        return 0;
      }
      if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
          CCLogStream::logCrit(v13, "[dk] %s@%d:tx completion queue not valid\n");
        }
      }
    }
    else if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logCrit(v12, "[dk] %s@%d:rx completion queue not valid\n");
      }
    }
  }
  uint64_t v8 = 3758097084;
  if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      uint64_t v11 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 160))(this);
      CCLogStream::logCrit(v10, "[dk] %s@%d:%s: skywalk data path disable fail\n", "disableDatapath", 8184, v11);
    }
  }
  return v8;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::disableDatapath(AppleBCMWLANNANInterface *this)
{
  return AppleBCMWLANNANInterface::disableDatapath((AppleBCMWLANNANInterface *)((char *)this - 80));
}

uint64_t AppleBCMWLANNANInterface::disable(AppleBCMWLANNANInterface *this, unsigned int a2)
{
  if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      uint64_t v6 = (const char *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 160))(this);
      CCLogStream::logAlert(v5, "[dk] %s@%d:Interface %s disable\n", "disable", 0x1FFF, v6);
    }
  }
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1000))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1176))(this);
    return IO80211SkywalkInterface::disable(this, a2);
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::disable(AppleBCMWLANNANInterface *this, unsigned int a2)
{
  return AppleBCMWLANNANInterface::disable((AppleBCMWLANNANInterface *)((char *)this - 80), a2);
}

uint64_t AppleBCMWLANNANInterface::setPromiscuousModeEnable(AppleBCMWLANNANInterface *this, int a2)
{
  if ((*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANNANInterface *))(*(void *)this + 1024))(this);
      uint64_t v6 = "Disable";
      if (a2) {
        uint64_t v6 = "Enable";
      }
      CCLogStream::logAlert(v5, "[dk] %s@%d:%s::(%s) ret=0x%08x\n", "setPromiscuousModeEnable", 8209, "virtual IOReturn AppleBCMWLANNANInterface::setPromiscuousModeEnable(BOOL)", v6, 0);
    }
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setPromiscuousModeEnable(AppleBCMWLANNANInterface *this, int a2)
{
  return 0;
}

uint64_t AppleBCMWLANNANInterface::setRADIO_CHANSEQ_CONTROL(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANCore::setRADIO_CHANSEQ_CONTROL(*(void **)(*(void *)(a1 + 136) + 64), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setRADIO_CHANSEQ_CONTROL(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANCore::setRADIO_CHANSEQ_CONTROL(*(void **)(*(void *)(a1 + 24) + 64), a2);
}

{
  return AppleBCMWLANCore::setRADIO_CHANSEQ_CONTROL(*(void **)(*(void *)(a1 + 8) + 64), a2);
}

uint64_t AppleBCMWLANNANInterface::getAWDL_DFSP_CONFIG()
{
  return 3825172759;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getAWDL_DFSP_CONFIG()
{
  return 3825172759;
}

{
  return 3825172759;
}

uint64_t AppleBCMWLANNANInterface::setNAN_CREATE_GCR_SESSION()
{
  return 3758097095;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_CREATE_GCR_SESSION()
{
  return 3758097095;
}

{
  return 3758097095;
}

uint64_t AppleBCMWLANNANInterface::setNAN_JOIN_GCR_SESSION()
{
  return 3758097095;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_JOIN_GCR_SESSION()
{
  return 3758097095;
}

{
  return 3758097095;
}

uint64_t AppleBCMWLANNANInterface::setNAN_GCR_RATE()
{
  return 3758097095;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::setNAN_GCR_RATE()
{
  return 3758097095;
}

{
  return 3758097095;
}

uint64_t AppleBCMWLANNANInterface::getNAN_GCR_LINK_CONDITION()
{
  return 3758097095;
}

uint64_t non-virtual thunk to'AppleBCMWLANNANInterface::getNAN_GCR_LINK_CONDITION()
{
  return 3758097095;
}

{
  return 3758097095;
}

uint64_t AppleBCMWLANUtil::rangeChecker::withinRangeLocation(AppleBCMWLANUtil::rangeChecker *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = a3 - 1;
  if (a3 >= 1 && *((unsigned char *)this + 16))
  {
    uint64_t v6 = a4 >> 63;
    uint64_t v7 = a2 + a4;
    if (__CFADD__(a2, a4)) {
      ++v6;
    }
    BOOL v9 = v6 << 63 >> 63 != v6 || v6 << 63 >> 63 == -1;
    BOOL v10 = __CFADD__(v5, v7);
    uint64_t v11 = v5 + v7;
    if (v10) {
      BOOL v9 = 1;
    }
    BOOL v12 = v11 >= *(void *)this && v11 <= *((void *)this + 1);
    if (*(void *)this <= v7)
    {
      BOOL v13 = *((void *)this + 1) >= v7;
      if (!v9) {
        return v12 & v13;
      }
    }
    else
    {
      BOOL v13 = 0;
      if (!v9) {
        return v12 & v13;
      }
    }
    return 0;
  }
  return v4;
}

void _GLOBAL__sub_I_AppleBCMWLANNANInterface_cpp()
{
  kNullRange = 0;
}

uint64_t AppleBCMWLANProximityInterface::setChannel(AppleBCMWLANProximityInterface *this, int a2)
{
  int v10 = a2;
  *(_DWORD *)(*((void *)this + 17) + 680) = a2;
  unint64_t v3 = (void *)*((void *)this + 17);
  uint64_t v4 = (AppleBCMWLANCore *)v3[8];
  if (v4)
  {
    if (AppleBCMWLANCore::isAssociated(v4)) {
      return 0;
    }
    unint64_t v3 = (void *)*((void *)this + 17);
  }
  uint64_t v6 = v3[3];
  v9[0] = this;
  v9[1] = v6;
  void v9[2] = 0;
  uint64_t v7 = (AppleBCMWLANCommander *)v3[120];
  v8[0] = &v10;
  v8[1] = 4;
  return AppleBCMWLANCommander::sendIOCtlSet(v7, 30, (uint64_t)v8, kNoRxExpected, (uint64_t)v9, 0);
}

uint64_t AppleBCMWLANProximityInterface::setSSID()
{
  return 102;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setSSID()
{
  return 102;
}

{
  return 102;
}

const char *AppleBCMWLANProximityInterface::getBSDNamePrefix(AppleBCMWLANProximityInterface *this)
{
  return "awdl";
}

const char *non-virtual thunk to'AppleBCMWLANProximityInterface::getBSDNamePrefix(AppleBCMWLANProximityInterface *this)
{
  return "awdl";
}

uint64_t AppleBCMWLANProximityInterface::resetInterface(AppleBCMWLANProximityInterface *this)
{
  if (!*(_DWORD *)(*((void *)this + 17) + 924)) {
    return 0;
  }
  if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      BOOL v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      isPoweredOuint64_t n = AppleBCMWLANCore::isPoweredOn(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64));
      CCLogStream::logAlertIf(v9, 0x400uLL, "[dk] %s@%d: poweredOn %u sync %lu\n", "resetInterface", 316, isPoweredOn, *(unsigned int *)(*((void *)this + 17) + 664));
    }
  }
  BOOL v2 = AppleBCMWLANCore::isPoweredOn(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64));
  uint64_t v3 = *(void *)this;
  if (v2)
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(v3 + 1168))(this);
    uint64_t v3 = *(void *)this;
    uint64_t v4 = 2;
  }
  else
  {
    uint64_t v4 = 1;
  }
  (*(void (**)(AppleBCMWLANProximityInterface *, uint64_t, uint64_t))(v3 + 1352))(this, v4, 1);
  AppleBCMWLANCore::addEventBit(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64), 0x2Fu);
  uint64_t v5 = AppleBCMWLANCore::writeEventBitField(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64));
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        uint64_t v7 = (const char *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *, uint64_t))(*(void *)this + 856))(this, v5);
        CCLogStream::logAlert(v6, "[dk] %s@%d: Failure to enable Country Code Changed event, %s\n", "resetInterface", 328, v7);
      }
    }
  }
  else
  {
    AppleBCMWLANCore::updateCurrentFWCountryCode(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64));
    *(unsigned char *)(*((void *)this + 17) + 72) = 0;
  }
  return v5;
}

uint64_t AppleBCMWLANProximityInterface::waitForDriverEvent(void *a1, unsigned int a2)
{
  clock_interval_to_deadline();
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1[17] + 64) + 104))(*(void *)(a1[17] + 64));
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v4 + 80))(v4, a1[17] + 4 * a2 + 84, 0xAAAAAAAAAAAAAAAALL);
  if (v5)
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1024))(a1))
    {
      (*(void (**)(void *))(*a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1024))(a1);
        CCLogStream::logAlert(v7, "[dk] %s@%d:Sleep failed 0x%08x", "waitForDriverEvent", 350, v5);
      }
    }
  }
  return v5;
}

uint64_t AppleBCMWLANProximityInterface::signalDriverEvent(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 136) + 64)
                                                                          + 104))(*(void *)(*(void *)(a1 + 136)
                                                                                              + 64))
                           + 88);
  return v1();
}

uint64_t AppleBCMWLANProximityInterface::handleEvent(uint64_t this, const IO80211BufferCursor *a2)
{
  unsigned int v106 = -1431655766;
  unint64_t v104 = 0;
  unint64_t v105 = 0;
  unint64_t v3 = *(void *)a2;
  unint64_t v2 = *((void *)a2 + 1);
  if (*(void *)a2) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || v2 < 0x30) {
    return this;
  }
  uint64_t v5 = (_WORD *)(v3 + 48);
  if (v3 + 48 < v3) {
    goto LABEL_244;
  }
  unint64_t v6 = *(void *)a2;
  if (!v3) {
    return this;
  }
  uint64_t v7 = (IO80211SkywalkInterface *)this;
  unint64_t v8 = *(unsigned int *)(v6 + 20);
  if (v8)
  {
    if (v8 + 48 > v2) {
      return this;
    }
    unint64_t v104 = v3 + 48;
    unint64_t v105 = v8;
    unint64_t v9 = v8;
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v5 = 0;
  }
  int v10 = *(_DWORD *)(v6 + 4);
  if (v10 <= 74)
  {
    if (v10 <= 53)
    {
      if (v10)
      {
        if (v10 == 16)
        {
          uint64_t v45 = *(void *)(this + 136);
          if (*(_WORD *)(v6 + 2))
          {
            ++*(_DWORD *)(v45 + 892);
            *(_DWORD *)(*(void *)(this + 136) + 708) = 1;
          }
          else
          {
            ++*(_DWORD *)(v45 + 896);
            *(_DWORD *)(*(void *)(this + 136) + 708) = 0;
          }
          return this;
        }
        if (v10 == 26) {
          return this;
        }
        goto LABEL_140;
      }
      uint64_t v41 = *(void *)(this + 136);
      unsigned int v106 = *(_DWORD *)(v41 + 656);
      *(_DWORD *)(v41 + 836) = 0;
      *(void *)&long long v107 = this;
      *((void *)&v107 + 1) = AppleBCMWLANProximityInterface::handleProxIovarAsyncCallBack;
      *(void *)&long long v108 = 0;
      unint64_t v42 = *(AppleBCMWLANCommander **)(*(void *)(this + 136) + 960);
      unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId((IO80211SkywalkInterface *)this);
      v103[0] = &v106;
      v103[1] = 4;
      if (AppleBCMWLANCommander::sendVirtualIOVarSet(v42, InterfaceId, "awdl_presencemode", (uint64_t)v103, kNoRxExpected, (uint64_t)&v107, 0))
      {
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
          if (CCLogStream::shouldLog())
          {
            __int16 v44 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
            CCLogStream::logAlertIf(v44, 0x400uLL, "[dk] %s@%d: Unable to send awdl_presencemode\n", "handleEvent", 870);
          }
        }
      }
      this = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
      if (this)
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
        this = CCLogStream::shouldLog();
        if (this)
        {
          __int16 v65 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
          return CCLogStream::logAlertIf(v65, 0x400uLL, "[dk] %s@%d: WLC_E_SET_SSID: mode %lu\n", "handleEvent", 872, v106);
        }
      }
    }
    else if (v10 > 59)
    {
      if (v10 == 60)
      {
        return AppleBCMWLANProximityInterface::handleActionFrame_complete((AppleBCMWLANProximityInterface *)this, a2);
      }
      else
      {
        if (v10 != 69) {
          goto LABEL_140;
        }
        ++*(_DWORD *)(*(void *)(this + 136) + 76);
        uint64_t v20 = *(void *)(this + 136);
        if (*(unsigned char *)(v20 + 80))
        {
          ScanAdapter = (AppleBCMWLANScanAdapter *)AppleBCMWLANCore::getScanAdapter(*(AppleBCMWLANCore **)(v20 + 64));
          return AppleBCMWLANScanAdapter::eventScanComplete(ScanAdapter, v3);
        }
      }
    }
    else if (v10 == 54)
    {
      if (!v8) {
        return this;
      }
      if (v8 <= 4)
      {
        this = (*(uint64_t (**)(uint64_t))(*(void *)this + 1024))(this);
        if (!this) {
          return this;
        }
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
        this = CCLogStream::shouldLog();
        if (!this) {
          return this;
        }
        goto LABEL_254;
      }
      if (!v5 || !v9) {
        return this;
      }
      this = IO80211BufferCursor::asType<wl_event_data_if>((uint64_t *)&v104, 0, (const char *)5);
      uint64_t v23 = (unsigned __int8 *)(this + (v22 >> 32));
      if (__CFADD__(this, v22 >> 32)) {
        uint64_t v24 = (v22 >> 63) + 1;
      }
      else {
        uint64_t v24 = v22 >> 63;
      }
      uint64_t v25 = v24 << 63 >> 63;
      if (v25 != v24 || v25 < 0) {
        goto LABEL_245;
      }
      if (!v23) {
        return this;
      }
      uint64_t v26 = v22;
      unint64_t v27 = HIDWORD(v22);
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
        if (CCLogStream::shouldLog())
        {
          uint64_t v83 = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
          if (v26 < 0 || (int)v27 + 5 > v26) {
            goto LABEL_264;
          }
          unsigned int v84 = (CCLogStream *)v83;
          int v85 = *v23;
          int v86 = v23[3];
          int FirmwareInterfaceVersion = AppleBCMWLANCore::getFirmwareInterfaceVersion(*(AppleBCMWLANCore **)(*((void *)v7 + 17) + 64));
          CCLogStream::logAlert(v84, "[dk] %s@%d: AWDL interface index is: %u (bsscfg=%u), fwVer %d opcode %d\n", "handleEvent", 445, v85, v86, FirmwareInterfaceVersion, v23[1]);
        }
      }
      this = AppleBCMWLANCore::isHostAssignedInterfaceIndex(*(AppleBCMWLANCore **)(*((void *)v7 + 17) + 64));
      BOOL v29 = v26 >= 0 && (int)v27 + 5 <= v26;
      if (!this)
      {
        if (v29)
        {
          uint64_t v60 = *((void *)v7 + 17);
          if (*(_DWORD *)(v60 + 920) != v23[3]) {
            return this;
          }
          if (!AppleBCMWLANCore::isHostAssignedInterfaceIndex(*(AppleBCMWLANCore **)(v60 + 64)))
          {
            IO80211SkywalkInterface::setInterfaceId(v7, *v23);
            uint64_t v61 = *(void *)(*((void *)v7 + 17) + 64);
            unsigned int v62 = IO80211SkywalkInterface::getInterfaceId(v7);
            AppleBCMWLANCore::setProxSkywalkInterface(v61, v62);
          }
          this = (*(uint64_t (**)(void, void))(**(void **)(*((void *)v7 + 17) + 984) + 104))(*(void *)(*((void *)v7 + 17) + 984), *v23);
          int v63 = v23[1];
          if (v63 == 2)
          {
            *(unsigned char *)(*((void *)v7 + 17) + 936) = 0;
            uint64_t v64 = (uint64_t)v7;
          }
          else
          {
            if (v63 != 1) {
              return this;
            }
            *(unsigned char *)(*((void *)v7 + 17) + 936) = 1;
            uint64_t v64 = (uint64_t)v7;
          }
          return AppleBCMWLANProximityInterface::signalDriverEvent(v64);
        }
        goto LABEL_264;
      }
      if (!v29) {
        goto LABEL_264;
      }
      int v30 = *v23;
      this = IO80211SkywalkInterface::getInterfaceId(v7);
      if (this == v30) {
        *(_DWORD *)(*((void *)v7 + 17) + 920) = v23[3];
      }
      *(unsigned char *)(*((void *)v7 + 17) + 936) = 1;
    }
    else
    {
      if (v10 != 59) {
        goto LABEL_140;
      }
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 1024))(this);
      if (this)
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
        this = CCLogStream::shouldLog();
        if (this)
        {
          int v16 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
          return CCLogStream::logAlert(v16, "[dk] %s@%d: WLC_E_ACTION_FRAME on prox interface = not supported\n");
        }
      }
    }
  }
  else
  {
    if (v10 <= 97)
    {
      if (v10 <= 95)
      {
        if (v10 == 75)
        {
LABEL_97:
          return AppleBCMWLANProximityInterface::handleActionFrame_rx((AppleBCMWLANProximityInterface *)this, a2);
        }
        if (v10 == 80)
        {
          uint64_t v11 = *(IO80211Controller **)(*(void *)(this + 136) + 64);
          BOOL v12 = v7;
          unsigned int v13 = 94;
LABEL_18:
          uint64_t v14 = 0;
          unint64_t v15 = 0;
LABEL_19:
          return IO80211Controller::postMessage(v11, v12, v13, v14, v15, 1);
        }
LABEL_140:
        this = (*(uint64_t (**)(uint64_t))(*(void *)this + 1024))(this);
        if (this)
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
          this = CCLogStream::shouldLog();
          if (this)
          {
            int v59 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
            return CCLogStream::logAlert(v59, "[dk] %s@%d: Prox interface Unhandled event %lu: status = %lu, reasouint64_t n = %lu, flags = 0x%x, authtype = %lu, addr = %02x:%02x:%02x:%02x:%02x:%02x\n", "handleEvent", 884, *(unsigned int *)(v6 + 4), *(unsigned int *)(v6 + 8));
          }
        }
        return this;
      }
      if (v10 != 96)
      {
        uint64_t v18 = *(void *)(this + 136);
        if (*(_DWORD *)(v18 + 664))
        {
          *(_DWORD *)(v18 + 668) = *(_DWORD *)(v6 + 8);
          int v19 = *(_DWORD *)(*(void *)(this + 136) + 668);
          if (v19)
          {
            if (v19 == 1)
            {
              return AppleBCMWLANProximityInterface::handleNonElectionMasterEvent((AppleBCMWLANProximityInterface *)this);
            }
            else if (v19 == 2)
            {
              return AppleBCMWLANProximityInterface::handleMasterEvent((AppleBCMWLANProximityInterface *)this);
            }
          }
          else
          {
            return AppleBCMWLANProximityInterface::handleSlaveEvent((AppleBCMWLANProximityInterface *)this);
          }
        }
        return this;
      }
      unint64_t v46 = *(_DWORD **)(this + 136);
      if (!v46[166] || !v8) {
        return this;
      }
      if (v8 > 0x1B)
      {
        if (!v5 || !v9) {
          return this;
        }
        if (v9 < 0x1C)
        {
          unint64_t v47 = 0;
          int v48 = 0;
LABEL_114:
          char v49 = (unsigned int *)((char *)v48 + HIDWORD(v47));
          if (!v49) {
            return this;
          }
          if (HIDWORD(v47) + 28 > v47) {
            goto LABEL_264;
          }
          int v50 = *((unsigned __int8 *)v49 + 12);
          if (!*((unsigned char *)v49 + 12) && (*((unsigned char *)v49 + 14) & 1) == 0)
          {
            v46[187] = 0;
            unint64_t v46 = *(_DWORD **)(this + 136);
          }
          if (!v46[178]) {
            goto LABEL_202;
          }
          this = IO80211BufferCursor::asType<ether_addr>((uint64_t *)&v104, 4, (const char *)6);
          if (v9 < 0x1C) {
            return this;
          }
          uint64_t v51 = v22;
          unsigned __int16 v52 = (unsigned __int8 *)(this + (v22 >> 32));
          if (__CFADD__(this, v22 >> 32)) {
            uint64_t v53 = (v22 >> 63) + 1;
          }
          else {
            uint64_t v53 = v22 >> 63;
          }
          uint64_t v54 = v53 << 63 >> 63;
          if (v54 == v53 && (v54 & 0x8000000000000000) == 0)
          {
            if (!v52) {
              return this;
            }
            if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7)
              || ((*(void (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7),
                  !CCLogStream::shouldLog()))
            {
LABEL_129:
              (*(void (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
              IO80211Hexdump();
              if (*((unsigned char *)v49 + 12)
                || (*((unsigned char *)v49 + 13) != 2 ? (BOOL v55 = "s") : (BOOL v55 = "S"), (*((unsigned char *)v49 + 14) & 1) != 0))
              {
                if (*((unsigned char *)v49 + 14))
                {
                  long long v56 = "e";
                  long long v57 = "E";
                }
                else
                {
                  long long v56 = "x";
                  long long v57 = "X";
                }
                if (*((unsigned char *)v49 + 13) == 2) {
                  BOOL v55 = v57;
                }
                else {
                  BOOL v55 = v56;
                }
              }
              *(void *)&long long v107 = 0xAAAAAAAAAAAAAAAALL;
              mach_continuous_time();
              absolutetime_to_nanoseconds();
              uint64_t v68 = *((void *)v7 + 17);
              unint64_t v69 = v107 - *(void *)(v68 + 840);
              if (*(_DWORD *)(v68 + 712) >= 3u)
              {
                unsigned int v70 = *v49;
                if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7))
                {
                  (*(void (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
                  if (CCLogStream::shouldLog())
                  {
                    __int16 v71 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
                    CCLogStream::logNotice(v71, "[dk] %s@%d:%s %3u/%3u (%5lu [%5lu]) %llu.%03llu [%llu.%03llu] act %lu\n", "handleEvent", 767, v55, *((unsigned __int8 *)v49 + 12), *((unsigned __int16 *)v49 + 5), (float)((float)v70 / 32.7));
                  }
                }
                goto LABEL_199;
              }
              if (*((unsigned char *)v49 + 14))
              {
                if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7))
                {
                  (*(void (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
                  if (CCLogStream::shouldLog())
                  {
                    int v72 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
                    unint64_t v73 = (unint64_t)v107 % 0x3B9ACA00 / 0xF4240;
                    unint64_t v74 = v69 / 0x3B9ACA00;
                    unint64_t v99 = (1125899907 * (v69 % 0x3B9ACA00)) >> 50;
                    uint64_t v100 = *(unsigned int *)(*((void *)v7 + 17) + 748);
                    uint64_t v97 = *((unsigned __int16 *)v49 + 5);
                    unint64_t v98 = (unint64_t)v107 / 0x3B9ACA00;
                    uint64_t v95 = v55;
                    uint64_t v96 = *((unsigned __int8 *)v49 + 12);
                    uint64_t v94 = 772;
                    int v75 = "[dk] %s@%d:%s %3u/%3u %llu.%03llu [%llu.%03llu] act %lu\n";
                    goto LABEL_260;
                  }
                }
              }
              else if (!*((unsigned char *)v49 + 12))
              {
                if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7))
                {
                  (*(void (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
                  if (CCLogStream::shouldLog())
                  {
                    int v72 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
                    unint64_t v73 = (unint64_t)v107 % 0x3B9ACA00 / 0xF4240;
                    unint64_t v74 = v69 / 0x3B9ACA00;
                    uint64_t v95 = v55;
                    uint64_t v96 = *((unsigned __int8 *)v49 + 12);
                    uint64_t v94 = 776;
                    unint64_t v99 = v69 % 0x3B9ACA00 / 0xF4240;
                    uint64_t v97 = *((unsigned __int16 *)v49 + 5);
                    unint64_t v98 = (unint64_t)v107 / 0x3B9ACA00;
                    int v75 = "[dk] %s@%d:%s %3u/%3u %llu.%03llu [%llu.%03llu]\n";
LABEL_260:
                    CCLogStream::logNotice(v72, v75, "handleEvent", v94, v95, v96, v97, v98, v73, v74, v99, v100, v101, v102);
                  }
                }
              }
LABEL_199:
              uint64_t v78 = v107;
              *(void *)(*((void *)v7 + 17) + 880) = v107;
              unsigned int v79 = *v49;
              *(_DWORD *)(*((void *)v7 + 17) + 888) = *v49;
              int v50 = *((unsigned __int8 *)v49 + 12);
              if (!*((unsigned char *)v49 + 12) && (*((unsigned char *)v49 + 14) & 1) == 0)
              {
                *(_DWORD *)(*((void *)v7 + 17) + 860) = v79;
                *(void *)(*((void *)v7 + 17) + 840) = v78;
              }
LABEL_202:
              *(_DWORD *)(*((void *)v7 + 17) + 916) = *(unsigned int *)((char *)v49 + 18);
              if (*((unsigned char *)v49 + 14)) {
                return (uint64_t)AppleBCMWLANProximityInterface::handleAvailabilityWindowEnd(v7, (uint64_t)&v104);
              }
              if (v50) {
                return (uint64_t)AppleBCMWLANProximityInterface::handleAvailabilityWindowExtension(v7, (const IO80211BufferCursor *)&v104);
              }
              return (uint64_t)AppleBCMWLANProximityInterface::handleAvailabilityWindowStart(v7, (const IO80211BufferCursor *)&v104);
            }
            BOOL v89 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
            if ((v51 & 0x8000000000000000) == 0 && HIDWORD(v51) + 6 <= v51)
            {
              CCLogStream::logNotice(v89, "[dk] %s@%d:AW Event: master(%02x:%02x:%02x:%02x:%02x:%02x), fw_time(%lu), aw_counter(%d), ext_count(%d), role(%d), flags(%02x) rssi %d rxBcnCount %u\n", "handleEvent", 731, *v52, v52[1], v52[2], v52[3], v52[4], v52[5], *v49, *((unsigned __int16 *)v49 + 5), *((unsigned __int8 *)v49 + 12), *((unsigned __int8 *)v49 + 13), *((unsigned __int8 *)v49 + 14), *((unsigned __int8 *)v49 + 17), *(unsigned int *)((char *)v49 + 18) - *(_DWORD *)(*((void *)v7 + 17) + 916));
              goto LABEL_129;
            }
LABEL_264:
            os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"bounded_ptr<T>::operator->: Accessing a member through this pointer would access memory outside of the bounds set originally", (const char *)a2);
          }
LABEL_245:
          os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", (const char *)v22);
        }
        unint64_t v47 = 28;
        if (v5 + 14 >= v5)
        {
          int v48 = v5;
          goto LABEL_114;
        }
LABEL_244:
        os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"The range of valid memory is too large to be represented by this type, or [begin, end) is not a well-formed range", (const char *)a2);
      }
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 1024))(this);
      if (!this) {
        return this;
      }
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
      this = CCLogStream::shouldLog();
      if (!this) {
        return this;
      }
LABEL_254:
      unint64_t v88 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
      return CCLogStream::logAlert(v88, "[dk] %s@%d: Insufficient space[%u] < %lu\n");
    }
    if (v10 > 149)
    {
      if (v10 == 150)
      {
        LODWORD(v108) = 0;
        *((void *)&v107 + 1) = 0;
        int v58 = *(_DWORD *)(v6 + 8);
        LODWORD(v107) = 1;
        DWORD1(v107) = v58;
        return AppleBCMWLANCore::postMessageInfra(*(AppleBCMWLANCore **)(*(void *)(this + 136) + 64), 0x54u, &v107, 0x14uLL);
      }
      if (v10 != 152) {
        goto LABEL_140;
      }
      switch(*(_DWORD *)(v6 + 8))
      {
        case 1:
          LODWORD(v107) = 0;
          break;
        case 2:
          int v67 = 1;
          goto LABEL_160;
        case 3:
          int v67 = 2;
          goto LABEL_160;
        case 4:
          int v67 = 3;
LABEL_160:
          LODWORD(v107) = v67;
          break;
        default:
          LODWORD(v107) = 4;
          if ((*(uint64_t (**)(uint64_t))(*(void *)this + 1024))(this))
          {
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
            if (CCLogStream::shouldLog())
            {
              int v66 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
              CCLogStream::logAlert(v66, "[dk] %s@%d:%s[%d] : Unknown SDB Status Code (%d) received \n", "handleEvent", 667, "handleEvent", 667, *(_DWORD *)(v6 + 8));
            }
          }
          break;
      }
      switch(*(_DWORD *)(v6 + 12))
      {
        case 0:
          DWORD1(v107) = 0;
          break;
        case 1:
          int v77 = 1;
          goto LABEL_191;
        case 2:
          int v77 = 2;
          goto LABEL_191;
        case 3:
          int v77 = 3;
          goto LABEL_191;
        case 4:
          int v77 = 4;
          goto LABEL_191;
        case 5:
          int v77 = 5;
          goto LABEL_191;
        case 6:
          int v77 = 6;
LABEL_191:
          DWORD1(v107) = v77;
          break;
        default:
          DWORD1(v107) = 7;
          if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7))
          {
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
            if (CCLogStream::shouldLog())
            {
              int v76 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
              CCLogStream::logAlert(v76, "[dk] %s@%d:%s[%d] : Unknown SDB Reason Code (%d) received \n", "handleEvent", 694, "handleEvent", 694, *(_DWORD *)(v6 + 12));
            }
          }
          break;
      }
      unsigned int v37 = *(IO80211Controller **)(*((void *)v7 + 17) + 64);
      int v38 = v7;
      unsigned int v39 = 135;
      unint64_t v40 = 8;
      return IO80211Controller::postMessage(v37, v38, v39, &v107, v40, 1);
    }
    if (v10 != 98)
    {
      if (v10 == 109)
      {
        __int16 v17 = *(IO80211Controller **)(*(void *)(this + 136) + 64);
        return AppleBCMWLANCore::handleRangingEvent(v17, v3);
      }
      goto LABEL_140;
    }
    uint64_t v31 = *(void *)(this + 136);
    if (!*(_DWORD *)(v31 + 664)) {
      return this;
    }
    switch(*(_DWORD *)(v6 + 8))
    {
      case 0:
        if (*(_DWORD *)(v6 + 12) == 1)
        {
          if (v8 < 4) {
            return this;
          }
          this = IO80211BufferCursor::asType<bcmv3_awdl_scan_event_data_min>((uint64_t *)&v104, 0, (const char *)4);
          int v32 = (unsigned __int8 *)(this + (v22 >> 32));
          if (__CFADD__(this, v22 >> 32)) {
            uint64_t v33 = (v22 >> 63) + 1;
          }
          else {
            uint64_t v33 = v22 >> 63;
          }
          uint64_t v34 = v33 << 63 >> 63;
          if (v34 != v33 || v34 < 0) {
            goto LABEL_245;
          }
          if (!v32) {
            return this;
          }
          uint64_t v35 = v22;
          unint64_t v36 = HIDWORD(v22);
          this = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
          if (this
            && ((*(void (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7),
                this = CCLogStream::shouldLog(),
                this))
          {
            int v93 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
            if (v35 < 0 || (int)v36 + 4 > v35) {
              goto LABEL_264;
            }
            this = CCLogStream::logNoticeIf(v93, 0x440uLL, "[dk] %s@%d:WLC_E_AWDL_SCAN_START: usage: %d\n", "handleEvent", 489, *v32);
          }
          else if (v35 < 0 || (int)v36 + 4 > v35)
          {
            goto LABEL_264;
          }
          if (!*v32)
          {
            __int16 v132 = 0;
            long long v130 = 0u;
            long long v131 = 0u;
            long long v128 = 0u;
            long long v129 = 0u;
            long long v126 = 0u;
            long long v127 = 0u;
            long long v124 = 0u;
            long long v125 = 0u;
            long long v122 = 0u;
            long long v123 = 0u;
            long long v120 = 0u;
            long long v121 = 0u;
            long long v118 = 0u;
            long long v119 = 0u;
            long long v116 = 0u;
            long long v117 = 0u;
            long long v114 = 0u;
            long long v115 = 0u;
            long long v113 = 0u;
            long long v111 = 0u;
            long long v112 = 0u;
            long long v109 = 0u;
            long long v110 = 0u;
            long long v107 = 0u;
            long long v108 = 0u;
            char v133 = 1;
            this = IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)v7 + 17) + 64), v7, 0x7Du, &v107, 0x193uLL, 1);
            *(unsigned char *)(*((void *)v7 + 17) + 81) = 1;
            return this;
          }
          if (*v32 == 2)
          {
            __int16 v132 = 0;
            long long v130 = 0u;
            long long v131 = 0u;
            long long v128 = 0u;
            long long v129 = 0u;
            long long v126 = 0u;
            long long v127 = 0u;
            long long v124 = 0u;
            long long v125 = 0u;
            long long v122 = 0u;
            long long v123 = 0u;
            long long v120 = 0u;
            long long v121 = 0u;
            long long v118 = 0u;
            long long v119 = 0u;
            long long v116 = 0u;
            long long v117 = 0u;
            long long v114 = 0u;
            long long v115 = 0u;
            long long v113 = 0u;
            long long v111 = 0u;
            long long v112 = 0u;
            long long v109 = 0u;
            long long v110 = 0u;
            long long v107 = 0u;
            long long v108 = 0u;
            char v133 = 1;
            unsigned int v37 = *(IO80211Controller **)(*((void *)v7 + 17) + 64);
            int v38 = v7;
            unsigned int v39 = 125;
            unint64_t v40 = 403;
            return IO80211Controller::postMessage(v37, v38, v39, &v107, v40, 1);
          }
        }
        else
        {
          this = (*(uint64_t (**)(uint64_t))(*(void *)this + 1024))(this);
          if (this)
          {
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
            this = CCLogStream::shouldLog();
            if (this)
            {
              uint64_t v92 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
              this = CCLogStream::logNoticeIf(v92, 0x440uLL, "[dk] %s@%d:WLC_E_AWDL_SCAN_DONE, ivars->fRoamScanInProgress(%d), ivars->fOOBScanInProgress(%d)\n", "handleEvent", 527, *(unsigned __int8 *)(*((void *)v7 + 17) + 81), *(unsigned __int8 *)(*((void *)v7 + 17) + 82));
            }
          }
          uint64_t v81 = *((void *)v7 + 17);
          if (*(unsigned char *)(v81 + 81))
          {
            LOWORD(v107) = 256;
            this = IO80211Controller::postMessage(*(IO80211Controller **)(v81 + 64), v7, 0x7Eu, &v107, 2uLL, 1);
            *(unsigned char *)(*((void *)v7 + 17) + 81) = 0;
            return this;
          }
          if (*(unsigned char *)(v81 + 82))
          {
            *(unsigned char *)(v81 + 82) = 0;
            LOWORD(v107) = 256;
            unsigned int v37 = *(IO80211Controller **)(*((void *)v7 + 17) + 64);
            int v38 = v7;
            unsigned int v39 = 126;
LABEL_242:
            unint64_t v40 = 2;
            return IO80211Controller::postMessage(v37, v38, v39, &v107, v40, 1);
          }
        }
        break;
      case 1:
        goto LABEL_97;
      case 2:
        return (uint64_t)AppleBCMWLANProximityInterface::handleProbeResponse_rx((IO80211VirtualInterface *)this, v3);
      case 3:
        if (!*(_DWORD *)(v6 + 12))
        {
          uint64_t v11 = *(IO80211Controller **)(v31 + 64);
          BOOL v12 = v7;
          unsigned int v13 = 64;
          goto LABEL_18;
        }
        if (v8 == 2)
        {
          if (v5 && v9 >= 2)
          {
            LOWORD(v107) = *v5;
            unsigned int v37 = *(IO80211Controller **)(v31 + 64);
            int v38 = v7;
            unsigned int v39 = 64;
            goto LABEL_242;
          }
        }
        else
        {
          this = (*(uint64_t (**)(uint64_t))(*(void *)this + 1024))(this);
          if (this)
          {
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
            this = CCLogStream::shouldLog();
            if (this)
            {
              BOOL v82 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
              return CCLogStream::logAlert(v82, "[dk] %s@%d:Incorrect data length received for WLC_E_AWDL_PHYCAL_STATUS event, expecting 2, got %d\n");
            }
          }
        }
        return this;
      case 9:
        LODWORD(v107) = *(_DWORD *)(v6 + 24);
        WORD2(v107) = *(_WORD *)(v6 + 28);
        BYTE6(v107) = *(_DWORD *)(v6 + 12);
        unsigned int v37 = *(IO80211Controller **)(v31 + 64);
        int v38 = v7;
        unsigned int v39 = 69;
        unint64_t v40 = 7;
        return IO80211Controller::postMessage(v37, v38, v39, &v107, v40, 1);
      case 0x12:
        if (!v5 || v9 < 4) {
          return this;
        }
        uint64_t v11 = *(IO80211Controller **)(v31 + 64);
        BOOL v12 = v7;
        unsigned int v13 = 88;
        uint64_t v14 = v5;
        unint64_t v15 = 21;
        goto LABEL_19;
      case 0x13:
        LODWORD(v107) = 0x10000;
        if ((*(uint64_t (**)(uint64_t))(*(void *)this + 1024))(this))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
          if (CCLogStream::shouldLog())
          {
            unint64_t v80 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
            CCLogStream::logAlert(v80, "[dk] %s@%d:%s[%d] : ALERT: DRIVER got DFS Proxy Suspect Event \n");
          }
        }
        goto LABEL_225;
      case 0x14:
        LODWORD(v107) = 0x1000000;
        if ((*(uint64_t (**)(uint64_t))(*(void *)this + 1024))(this))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
          if (CCLogStream::shouldLog())
          {
            BOOL v90 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
            CCLogStream::logAlert(v90, "[dk] %s@%d:%s[%d] : ALERT: DRIVER got DFS Proxy Resume Event \n");
          }
        }
LABEL_225:
        unsigned int v37 = *(IO80211Controller **)(*((void *)v7 + 17) + 64);
        int v38 = v7;
        unsigned int v39 = 183;
        goto LABEL_230;
      case 0x15:
        LODWORD(v107) = 0x10000;
        if ((*(uint64_t (**)(uint64_t))(*(void *)this + 1024))(this))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
          if (CCLogStream::shouldLog())
          {
            size_t v91 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
            CCLogStream::logAlert(v91, "[dk] %s@%d:%s[%d] : ALERT: DRIVER got DWELL START Event \n", "handleEvent", 635, "handleEvent", 635);
          }
        }
        unsigned int v37 = *(IO80211Controller **)(*((void *)v7 + 17) + 64);
        int v38 = v7;
        unsigned int v39 = 204;
LABEL_230:
        unint64_t v40 = 4;
        return IO80211Controller::postMessage(v37, v38, v39, &v107, v40, 1);
      default:
        return this;
    }
  }
  return this;
}

uint64_t IO80211BufferCursor::asType<wl_event_data_if>(uint64_t *a1, uint64_t a2, const char *a3)
{
  uint64_t result = IO80211BufferCursor::_asType<wl_event_data_if>(a1, a2, a3);
  if (__CFADD__(result, (uint64_t)v4 >> 32)) {
    uint64_t v5 = ((uint64_t)v4 >> 63) + 1;
  }
  else {
    uint64_t v5 = (uint64_t)v4 >> 63;
  }
  uint64_t v6 = v5 << 63 >> 63;
  if (v6 != v5 || v6 < 0) {
    os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", v4);
  }
  return result;
}

uint64_t AppleBCMWLANProximityInterface::getBssCfgId(AppleBCMWLANProximityInterface *this)
{
  return *(unsigned int *)(*((void *)this + 17) + 920);
}

uint64_t IO80211BufferCursor::asType<bcmv3_awdl_scan_event_data_min>(uint64_t *a1, uint64_t a2, const char *a3)
{
  uint64_t result = IO80211BufferCursor::_asType<bcmv3_awdl_scan_event_data_min>(a1, a2, a3);
  if (__CFADD__(result, (uint64_t)v4 >> 32)) {
    uint64_t v5 = ((uint64_t)v4 >> 63) + 1;
  }
  else {
    uint64_t v5 = (uint64_t)v4 >> 63;
  }
  uint64_t v6 = v5 << 63 >> 63;
  if (v6 != v5 || v6 < 0) {
    os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", v4);
  }
  return result;
}

uint64_t AppleBCMWLANProximityInterface::handleActionFrame_rx(AppleBCMWLANProximityInterface *this, const IO80211BufferCursor *a2)
{
  if (*((void *)a2 + 1) < 0x30uLL)
  {
    unint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = *(void *)a2;
    unint64_t v4 = 48;
    if ((unint64_t)(*(void *)a2 + 48) < *(void *)a2) {
      goto LABEL_72;
    }
  }
  uint64_t v5 = v3 + HIDWORD(v4);
  if (!v5)
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        unint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        return CCLogStream::logAlert(v8, "[dk] %s@%d:%s: Invalid event bounded pointer.\n");
      }
    }
    return result;
  }
  if (HIDWORD(v4) + 48 > v4) {
    goto LABEL_74;
  }
  if (*(_DWORD *)(v5 + 20) <= 1u)
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        return CCLogStream::logAlert(v7, "[dk] %s@%d:%s: Invalid action frame rx event msg length=%u\n");
      }
    }
    return result;
  }
  unint64_t v39 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
  IO80211BufferCursor::_crop((uint64_t *)a2, 0x30uLL, 0xFFFFFFFFFFFFFFFFLL, &v39);
  unint64_t v9 = v39;
  if (!v39 || !v40)
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        return CCLogStream::logAlert(v16, "[dk] %s@%d:%s: Invalid event payload bounded pointer.\n");
      }
    }
    return result;
  }
  if (v40 < 0x10)
  {
    unint64_t v10 = 0;
    unint64_t v11 = 0;
  }
  else
  {
    unint64_t v10 = 16;
    if (v39 + 16 < v39) {
      goto LABEL_72;
    }
    unint64_t v11 = v39;
  }
  BOOL v12 = (_WORD *)(v11 + HIDWORD(v10));
  if (!v12)
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        __int16 v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        return CCLogStream::logAlert(v17, "[dk] %s@%d:%s: wl_event_rx_frame_data bounded pointer.\n");
      }
    }
    return result;
  }
  *(void *)uint64_t v41 = 0xAAAAAAAAAAAAAAAALL;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  __int16 v45 = 0;
  *(_OWORD *)&v41[6] = 0u;
  *(_DWORD *)uint64_t v41 = *(_DWORD *)(v5 + 24);
  *(_WORD *)&v41[4] = *(_WORD *)(v5 + 28);
  if (HIDWORD(v10) + 16 > v10) {
    goto LABEL_74;
  }
  if (*v12 != 512)
  {
    if (v40 < 0x10)
    {
      unint64_t v18 = 0;
      unint64_t v9 = 0;
    }
    else
    {
      unint64_t v18 = 16;
      if (v39 + 16 < v39) {
        goto LABEL_72;
      }
    }
    unint64_t v19 = v9 + HIDWORD(v18);
    if (!v19 || *(_DWORD *)(v5 + 20) <= 0xFu)
    {
      uint64_t result = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      if (result)
      {
        (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          uint64_t v20 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
          return CCLogStream::logAlert(v20, "[dk] %s@%d:%s[%d] v1_rx: invalid event msg len=%u, expect at least %lu\n");
        }
      }
      return result;
    }
    if (HIDWORD(v18) + 16 <= v18)
    {
      *(_DWORD *)((char *)&v43 + 2) = bswap32(*(_DWORD *)(v19 + 12));
      *(int8x8_t *)((char *)&v43 + 6) = vrev32_s8(*(int8x8_t *)(v19 + 4));
      uint64_t ChanSpecHandler = (int **)AppleBCMWLANCore::getChanSpecHandler(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64));
      uint64_t v23 = (unsigned __int16 *)(v19 + 2);
      uint64_t v24 = -16;
      unint64_t v25 = 16;
      goto LABEL_46;
    }
LABEL_74:
    os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"bounded_ptr<T>::operator->: Accessing a member through this pointer would access memory outside of the bounds set originally", (const char *)a2);
  }
  if (v40 < 0x18)
  {
    unint64_t v13 = 0;
    unint64_t v9 = 0;
    goto LABEL_22;
  }
  unint64_t v13 = 24;
  if (v39 + 24 < v39) {
LABEL_72:
  }
    os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"The range of valid memory is too large to be represented by this type, or [begin, end) is not a well-formed range", (const char *)a2);
LABEL_22:
  uint64_t v14 = (int8x8_t *)(v9 + HIDWORD(v13));
  if (!v14 || *(_DWORD *)(v5 + 20) <= 0x17u)
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        unint64_t v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        return CCLogStream::logAlert(v15, "[dk] %s@%d:%s[%d] v2_rx: invalid event msg len=%u, expect at least %lu\n");
      }
    }
    return result;
  }
  if (HIDWORD(v13) + 24 > v13) {
    goto LABEL_74;
  }
  uint64_t v21 = 0;
  *(_DWORD *)((char *)&v43 + 2) = bswap32(v14[2].u32[0]);
  *(int8x8_t *)((char *)&v43 + 6) = vrev32_s8(v14[1]);
  *(_DWORD *)((char *)&v44 + 10) = 1;
  do
  {
    *((unsigned char *)&v44 + v21 + 14) = v14[2].i8[v21 + 4];
    ++v21;
  }
  while (v21 != 4);
  uint64_t ChanSpecHandler = (int **)AppleBCMWLANCore::getChanSpecHandler(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64));
  uint64_t v23 = (unsigned __int16 *)v14 + 2;
  uint64_t v24 = -24;
  unint64_t v25 = 24;
LABEL_46:
  AppleBCMWLANChanSpec::getAppleChannelSpec(ChanSpecHandler, bswap32(*v23) >> 16);
  ChanSpecConvToApple80211Channel();
  uint64_t v26 = *(unsigned int *)(v5 + 20);
  if (IO80211VirtualInterface::getMgmtFramePool(this))
  {
    uint64_t MgmtFramePool = IO80211VirtualInterface::getMgmtFramePool(this);
    uint64_t v28 = (IO80211Buffer *)(*(uint64_t (**)(uint64_t))(*(void *)MgmtFramePool + 56))(MgmtFramePool);
    if (v28)
    {
      BOOL v29 = v28;
      uint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
      unint64_t v38 = 0xAAAAAAAAAAAAAAAALL;
      IO80211Buffer::getCursor(&v37, v28);
      if (v37 && v38)
      {
        unint64_t v35 = 0xAAAAAAAAAAAAAAAALL;
        unint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
        IO80211BufferCursor::_crop((uint64_t *)&v39, v25, 0xFFFFFFFFFFFFFFFFLL, &v35);
        if (v35 && v36)
        {
          if (IO80211BufferCursor::copyFrom((uint64_t)&v37, (uint64_t)&v35, v24 + v26))
          {
            uint64_t result = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
            if (result)
            {
              (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
              uint64_t result = CCLogStream::shouldLog();
              if (result)
              {
                int v30 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this
                                                                                                 + 1024))(this);
                return CCLogStream::logCrit(v30, "[dk] %s@%d:%s: Failed to copy to frame\n");
              }
            }
          }
          else
          {
            IO80211Buffer::setLength(v29, v24 + v26);
            ++*(_DWORD *)(*((void *)this + 17) + 748);
            return IO80211VirtualInterface::bpfTapInput(this, v29, 0xCu, v41, 0x48uLL);
          }
          return result;
        }
        if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
        {
          (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v34 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
            CCLogStream::logCrit(v34, "[dk] %s@%d:%s: Invalid source Bounded copy cursor\n");
          }
        }
      }
      else if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v33 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
          CCLogStream::logCrit(v33, "[dk] %s@%d:%s: Invalid destination Bounded copy cursor\n");
        }
      }
      return IO80211Buffer::returnBuffer(v29);
    }
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v32 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        return CCLogStream::logCrit(v32, "[dk] %s@%d:action packet not avaialbe from pool\n");
      }
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v31 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        return CCLogStream::logAlert(v31, "[dk] %s@%d:Buffer Pool is not ready yet\n");
      }
    }
  }
  return result;
}

IO80211VirtualInterface *AppleBCMWLANProximityInterface::handleProbeResponse_rx(IO80211VirtualInterface *result, uint64_t a2)
{
  uint64_t v3 = result;
  unsigned int v4 = *(_DWORD *)(a2 + 20);
  if (v4 > 0x10)
  {
    __int16 v22 = 0;
    long long v21 = 0u;
    long long v20 = 0u;
    long long v19 = 0u;
    long long v18 = 0u;
    int v16 = *(_DWORD *)(a2 + 24);
    __int16 v17 = *(_WORD *)(a2 + 28);
    if (*(_WORD *)(a2 + 48) == 512)
    {
      if (v4 < 0x41) {
        return result;
      }
      *(_DWORD *)((char *)&v20 + 2) = bswap32(*(_DWORD *)(a2 + 64));
      *(int8x8_t *)((char *)&v20 + 6) = vrev32_s8(*(int8x8_t *)(a2 + 56));
      uint64_t ChanSpecHandler = (int **)AppleBCMWLANCore::getChanSpecHandler(*(AppleBCMWLANCore **)(*((void *)result + 17)
                                                                                          + 64));
      AppleBCMWLANChanSpec::getAppleChannelSpec(ChanSpecHandler, bswap32(*(unsigned __int16 *)(a2 + 52)) >> 16);
      ChanSpecConvToApple80211Channel();
      uint64_t v7 = *(unsigned int *)(a2 + 20) - 24;
      uint64_t v8 = a2 + 72;
    }
    else
    {
      if (v4 < 0x39) {
        return result;
      }
      *(_DWORD *)((char *)&v20 + 2) = bswap32(*(_DWORD *)(a2 + 60));
      *(int8x8_t *)((char *)&v20 + 6) = vrev32_s8(*(int8x8_t *)(a2 + 52));
      unint64_t v9 = (int **)AppleBCMWLANCore::getChanSpecHandler(*(AppleBCMWLANCore **)(*((void *)result + 17) + 64));
      AppleBCMWLANChanSpec::getAppleChannelSpec(v9, bswap32(*(unsigned __int16 *)(a2 + 50)) >> 16);
      ChanSpecConvToApple80211Channel();
      uint64_t v7 = *(unsigned int *)(a2 + 20) - 16;
      uint64_t v8 = a2 + 64;
    }
    if (IO80211VirtualInterface::getMgmtFramePool(v3))
    {
      uint64_t MgmtFramePool = IO80211VirtualInterface::getMgmtFramePool(v3);
      unint64_t v11 = (IO80211Buffer *)(*(uint64_t (**)(uint64_t))(*(void *)MgmtFramePool + 56))(MgmtFramePool);
      if (v11)
      {
        BOOL v12 = v11;
        uint64_t BytesNoCopy = IO80211Buffer::getBytesNoCopy(v11);
        *(_DWORD *)uint64_t BytesNoCopy = -233373569;
        *(unsigned char *)(BytesNoCopy + 4) = 8;
        *(void *)(BytesNoCopy + 5) = 0;
        *(_DWORD *)(BytesNoCopy + 12) = 0;
        memcpy((void *)(BytesNoCopy + 16), (const void *)(v8 + 40), v7 - 40);
        IO80211Buffer::setLength(v12, v7 - 24);
        ++*(_DWORD *)(*((void *)v3 + 17) + 748);
        return (IO80211VirtualInterface *)IO80211VirtualInterface::bpfTapInput(v3, v12, 0xCu, &v16, 0x48uLL);
      }
      else
      {
        uint64_t result = (IO80211VirtualInterface *)(*(uint64_t (**)(IO80211VirtualInterface *))(*(void *)v3 + 1024))(v3);
        if (result)
        {
          (*(void (**)(IO80211VirtualInterface *))(*(void *)v3 + 1024))(v3);
          uint64_t result = (IO80211VirtualInterface *)CCLogStream::shouldLog();
          if (result)
          {
            unint64_t v15 = (CCLogStream *)(*(uint64_t (**)(IO80211VirtualInterface *))(*(void *)v3 + 1024))(v3);
            return (IO80211VirtualInterface *)CCLogStream::logCrit(v15, "[dk] %s@%d:action packet not avaialbe from pool\n", "handleProbeResponse_rx", 1559);
          }
        }
      }
    }
    else
    {
      uint64_t result = (IO80211VirtualInterface *)(*(uint64_t (**)(IO80211VirtualInterface *))(*(void *)v3 + 1024))(v3);
      if (result)
      {
        (*(void (**)(IO80211VirtualInterface *))(*(void *)v3 + 1024))(v3);
        uint64_t result = (IO80211VirtualInterface *)CCLogStream::shouldLog();
        if (result)
        {
          uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(IO80211VirtualInterface *))(*(void *)v3 + 1024))(v3);
          return (IO80211VirtualInterface *)CCLogStream::logAlert(v14, "[dk] %s@%d:Buffer Pool is not ready yet\n");
        }
      }
    }
  }
  else
  {
    uint64_t result = (IO80211VirtualInterface *)(*(uint64_t (**)(IO80211VirtualInterface *))(*(void *)result + 1024))(result);
    if (result)
    {
      (*(void (**)(IO80211VirtualInterface *))(*(void *)v3 + 1024))(v3);
      uint64_t result = (IO80211VirtualInterface *)CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(IO80211VirtualInterface *))(*(void *)v3 + 1024))(v3);
        return (IO80211VirtualInterface *)CCLogStream::logAlert(v5, "[dk] %s@%d:Invalid event msg len=%u, expect at least %lu\n");
      }
    }
  }
  return result;
}

uint64_t IO80211BufferCursor::asType<ether_addr>(uint64_t *a1, uint64_t a2, const char *a3)
{
  uint64_t result = IO80211BufferCursor::_asType<ether_addr>(a1, a2, a3);
  if (__CFADD__(result, (uint64_t)v4 >> 32)) {
    uint64_t v5 = ((uint64_t)v4 >> 63) + 1;
  }
  else {
    uint64_t v5 = (uint64_t)v4 >> 63;
  }
  uint64_t v6 = v5 << 63 >> 63;
  if (v6 != v5 || v6 < 0) {
    os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", v4);
  }
  return result;
}

IO80211SkywalkInterface *AppleBCMWLANProximityInterface::handleAvailabilityWindowEnd(IO80211SkywalkInterface *this, uint64_t a2)
{
  uint64_t v3 = this;
  long long v21 = 0u;
  long long v20 = 0u;
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0x1C)
  {
    unint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = *(void *)a2;
    unint64_t v6 = 28;
    if ((unint64_t)(*(void *)a2 + 28) < *(void *)a2) {
      os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"The range of valid memory is too large to be represented by this type, or [begin, end) is not a well-formed range", (const char *)a2);
    }
  }
  uint64_t v7 = v5 + HIDWORD(v6);
  if (v7)
  {
    if (HIDWORD(v6) + 28 > v6) {
      goto LABEL_31;
    }
    v19[0] = *(unsigned __int8 *)(v7 + 12);
    v19[1] = *(_DWORD *)v7;
    LOBYTE(v20) = *(unsigned char *)(v7 + 17);
    DWORD1(v20) = *(_DWORD *)(v7 + 18);
    if (v4 < 0x1E || !*(unsigned char *)(*((void *)this + 17) + 105)) {
      return (IO80211SkywalkInterface *)IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)v3 + 17) + 64), v3, 0x2Bu, v19, 0x28uLL, 1);
    }
    uint64_t v8 = IO80211BufferCursor::asType<ether_addr>((uint64_t *)a2, 28, (const char *)6);
    unint64_t v9 = (_WORD *)(v8 + (a2 >> 32));
    if (__CFADD__(v8, a2 >> 32)) {
      uint64_t v10 = (a2 >> 63) + 1;
    }
    else {
      uint64_t v10 = a2 >> 63;
    }
    uint64_t v11 = v10 << 63 >> 63;
    if (v11 == v10 && (v11 & 0x8000000000000000) == 0)
    {
      uint64_t v12 = a2;
      if (!v9)
      {
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
          if (CCLogStream::shouldLog())
          {
            __int16 v17 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
            CCLogStream::logAlert(v17, "[dk] %s@%d:%s: Invalid pxtlv bounded pointer\n", "handleAvailabilityWindowEnd", 3285, "handleAvailabilityWindowEnd");
          }
        }
      }
      if (v12 < 0 || HIDWORD(v12) + 6 > v12) {
        goto LABEL_31;
      }
      if (!*v9) {
        return (IO80211SkywalkInterface *)IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)v3 + 17) + 64), v3, 0x2Bu, v19, 0x28uLL, 1);
      }
      if (*v9 != 1)
      {
        getClassNameHelper((OSObject *)v3);
        IO80211VirtualInterface::logDebug(v3, "%s::%s ERROR: pxtlv->id is set to random value (pxtlv->id: %u) \n");
        return (IO80211SkywalkInterface *)IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)v3 + 17) + 64), v3, 0x2Bu, v19, 0x28uLL, 1);
      }
      if (v4 <= 0x33)
      {
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
          if (CCLogStream::shouldLog())
          {
            long long v18 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
            CCLogStream::logAlert(v18, "[dk] %s@%d: ERROR: AWDL cca_stats, insufficient space[%lu] < %lu\n", "handleAvailabilityWindowEnd", 3292, v4, 52);
          }
        }
        return (IO80211SkywalkInterface *)IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)v3 + 17) + 64), v3, 0x2Bu, v19, 0x28uLL, 1);
      }
      uint64_t v13 = IO80211BufferCursor::asType<apple8021_awdl_cca_stats>((uint64_t *)a2, 4, (const char *)0x14);
      uint64_t v14 = v13 + (a2 >> 32);
      if (__CFADD__(v13, a2 >> 32)) {
        uint64_t v15 = (a2 >> 63) + 1;
      }
      else {
        uint64_t v15 = a2 >> 63;
      }
      uint64_t v16 = v15 << 63 >> 63;
      if (v16 == v15 && (v16 & 0x8000000000000000) == 0)
      {
        if (!v14)
        {
          getClassNameHelper((OSObject *)v3);
          IO80211VirtualInterface::logDebug(v3, "%s::%s ERROR: AWDL cca_stats payload is null \n");
          return (IO80211SkywalkInterface *)IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)v3 + 17) + 64), v3, 0x2Bu, v19, 0x28uLL, 1);
        }
        DWORD2(v20) = *(_DWORD *)v9;
        if ((a2 & 0x8000000000000000) == 0 && HIDWORD(a2) + 20 <= a2)
        {
          HIDWORD(v20) = *(_DWORD *)v14;
          long long v21 = *(_OWORD *)(v14 + 4);
          return (IO80211SkywalkInterface *)IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)v3 + 17) + 64), v3, 0x2Bu, v19, 0x28uLL, 1);
        }
LABEL_31:
        os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"bounded_ptr<T>::operator->: Accessing a member through this pointer would access memory outside of the bounds set originally", (const char *)a2);
      }
    }
    os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", (const char *)a2);
  }
  return this;
}

IO80211SkywalkInterface *AppleBCMWLANProximityInterface::handleAvailabilityWindowStart(IO80211SkywalkInterface *this, const IO80211BufferCursor *a2)
{
  unint64_t v2 = this;
  long long v15 = 0u;
  long long v14 = 0u;
  unint64_t v3 = *((void *)a2 + 1);
  if (v3 < 0x1C)
  {
    unint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = *(void *)a2;
    unint64_t v5 = 28;
    if ((unint64_t)(*(void *)a2 + 28) < *(void *)a2) {
      os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"The range of valid memory is too large to be represented by this type, or [begin, end) is not a well-formed range", (const char *)a2);
    }
  }
  uint64_t v6 = v4 + HIDWORD(v5);
  if (v6)
  {
    if (HIDWORD(v5) + 28 > v5) {
      os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"bounded_ptr<T>::operator->: Accessing a member through this pointer would access memory outside of the bounds set originally", (const char *)a2);
    }
    int v7 = *(unsigned __int8 *)(v6 + 13);
    if (v7 == 2)
    {
      int v8 = 1;
      goto LABEL_11;
    }
    if (v7 == 1)
    {
      int v8 = 3;
      goto LABEL_11;
    }
    if (!*(unsigned char *)(v6 + 13))
    {
      int v8 = 2;
LABEL_11:
      LODWORD(v14) = v8;
LABEL_18:
      LODWORD(v15) = *(_DWORD *)v6;
      int v9 = *(unsigned __int16 *)(v6 + 10);
      int v10 = *(_DWORD *)(v6 + 4);
      WORD4(v14) = *(_WORD *)(v6 + 8);
      int v13 = v9;
      DWORD1(v14) = v10;
      HIWORD(v14) = *(_WORD *)(v6 + 26);
      *(_DWORD *)((char *)&v14 + 10) = *(_DWORD *)(v6 + 22);
      uint64_t ChanSpecHandler = (int **)AppleBCMWLANCore::getChanSpecHandler(*(AppleBCMWLANCore **)(*((void *)v2 + 17) + 64));
      AppleBCMWLANChanSpec::getAppleChannelSpec(ChanSpecHandler, *(unsigned __int16 *)(v6 + 15));
      ChanSpecConvToApple80211Channel();
      return (IO80211SkywalkInterface *)IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)v2 + 17) + 64), v2, 0x29u, &v13, 0x24uLL, 1);
    }
    if (v3 >= 0x1C && *(void *)a2)
    {
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)v2 + 1024))(v2);
        if (CCLogStream::shouldLog())
        {
          uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v2 + 1024))(v2);
          CCLogStream::logAlert(v12, "[dk] %s@%d: unknown role %u\n", "handleAvailabilityWindowStart", 1722, *(unsigned __int8 *)(v6 + 13));
        }
      }
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)v2 + 1024))(v2);
      IO80211Hexdump();
      goto LABEL_18;
    }
  }
  return this;
}

IO80211SkywalkInterface *AppleBCMWLANProximityInterface::handleAvailabilityWindowExtension(IO80211SkywalkInterface *this, const IO80211BufferCursor *a2)
{
  if (*((void *)a2 + 1) < 0x1CuLL)
  {
    unint64_t v3 = 0;
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = *(void *)a2;
    unint64_t v3 = 28;
    if ((unint64_t)(*(void *)a2 + 28) < *(void *)a2) {
      os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"The range of valid memory is too large to be represented by this type, or [begin, end) is not a well-formed range", (const char *)a2);
    }
  }
  uint64_t v4 = v2 + HIDWORD(v3);
  if (v4)
  {
    if (HIDWORD(v3) + 28 > v3) {
      os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"bounded_ptr<T>::operator->: Accessing a member through this pointer would access memory outside of the bounds set originally", (const char *)a2);
    }
    v5[0] = *(unsigned __int8 *)(v4 + 12);
    v5[1] = *(_DWORD *)v4;
    return (IO80211SkywalkInterface *)IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)this + 17) + 64), this, 0x2Au, v5, 8uLL, 1);
  }
  return this;
}

uint64_t AppleBCMWLANProximityInterface::handleMasterEvent(AppleBCMWLANProximityInterface *this)
{
  if (*(_DWORD *)(*((void *)this + 17) + 712))
  {
    if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v3 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v3, "[dk] %s@%d:MST \n", "handleMasterEvent", 1677);
      }
    }
  }
  *(_DWORD *)(*((void *)this + 17) + 668) = 2;
  int v6 = 0;
  uint64_t v5 = 0;
  int v4 = 1;
  IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)this + 17) + 64), this, 0x2Eu, &v4, 0x10uLL, 1);
  return AppleBCMWLANProximityInterface::setAfTxMode(this);
}

uint64_t AppleBCMWLANProximityInterface::handleSlaveEvent(AppleBCMWLANProximityInterface *this)
{
  if (*(_DWORD *)(*((void *)this + 17) + 712))
  {
    if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v3 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v3, "[dk] %s@%d:slv\n", "handleSlaveEvent", 1692);
      }
    }
  }
  unint64_t v5 = 0xAAAAAAAAAAAAAAAALL;
  int v6 = -1431655766;
  int v4 = 2;
  IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)this + 17) + 64), this, 0x2Eu, &v4, 0x10uLL, 1);
  *(_DWORD *)(*((void *)this + 17) + 668) = 0;
  return AppleBCMWLANProximityInterface::setAfTxMode(this);
}

uint64_t AppleBCMWLANProximityInterface::handleNonElectionMasterEvent(AppleBCMWLANProximityInterface *this)
{
  if (*(_DWORD *)(*((void *)this + 17) + 712))
  {
    if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v3 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v3, "[dk] %s@%d:NE_MST \n", "handleNonElectionMasterEvent", 1663);
      }
    }
  }
  *(_DWORD *)(*((void *)this + 17) + 668) = 1;
  int v6 = 0;
  uint64_t v5 = 0;
  int v4 = 3;
  IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)this + 17) + 64), this, 0x2Eu, &v4, 0x10uLL, 1);
  return AppleBCMWLANProximityInterface::setAfTxMode(this);
}

uint64_t AppleBCMWLANProximityInterface::handleActionFrame_complete(AppleBCMWLANProximityInterface *this, const IO80211BufferCursor *a2)
{
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  if (*((void *)a2 + 1) < 0x30uLL)
  {
    unint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = *(void *)a2;
    unint64_t v6 = 48;
    if ((unint64_t)(*(void *)a2 + 48) < *(void *)a2) {
      os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"The range of valid memory is too large to be represented by this type, or [begin, end) is not a well-formed range", v4);
    }
  }
  uint64_t v7 = v5 + HIDWORD(v6);
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
  if (v7)
  {
    if (result)
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        if (HIDWORD(v6) + 48 <= v6) {
          return CCLogStream::logAlertIf(v9, 0x400uLL, "[dk] %s@%d:AFC %llu.%03llu len %lu status %lu\n", "handleActionFrame_complete");
        }
LABEL_16:
        os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"bounded_ptr<T>::operator->: Accessing a member through this pointer would access memory outside of the bounds set originally", v10);
      }
    }
  }
  else if (result)
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      if (HIDWORD(v6) + 48 > v6) {
        goto LABEL_16;
      }
      return CCLogStream::logAlertIf(v11, 0x400uLL, "[dk] %s@%d:AFC %llu.%03llu len %lu invalid status.\n");
    }
  }
  return result;
}

uint64_t AppleBCMWLANProximityInterface::handleProxIovarAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 != -469794537 && a3 != 0)
  {
    uint64_t v6 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1024))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v6 + 1024))(v6);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 1024))(v6);
        int v8 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 856))(v6, a3);
        int v9 = *(const char **)(a2 + 8);
        if (!v9) {
          int v9 = "unknown";
        }
        return CCLogStream::logAlert(v7, "[dk] %s@%d: Error: cannot send prox iovar %s [%s]\n", "handleProxIovarAsyncCallBack", 3389, v8, v9);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANProximityInterface::init(AppleBCMWLANProximityInterface *this)
{
  uint64_t result = IO80211SkywalkInterface::init(this);
  if (result)
  {
    uint64_t v3 = IOMallocZeroTyped();
    *((void *)this + 17) = v3;
    return v3 != 0;
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::init(AppleBCMWLANProximityInterface *this)
{
  return AppleBCMWLANProximityInterface::init((AppleBCMWLANProximityInterface *)((char *)this - 24));
}

BOOL AppleBCMWLANProximityInterface::init(AppleBCMWLANProximityInterface *this, AppleBCMWLANCore *a2, ether_addr *a3, unsigned int a4, char *a5)
{
  if (!IO80211VirtualInterface::init(this, a2, a3, a4, a5)) {
    return 0;
  }
  if (AppleBCMWLANCore::isHostAssignedInterfaceIndex(a2))
  {
    IO80211SkywalkInterface::setInterfaceId(this, 2u);
    AppleBCMWLANCore::setProxSkywalkInterface((uint64_t)a2, 2u);
  }
  else
  {
    IO80211SkywalkInterface::setInterfaceId(this, 0xFFFFFFFF);
  }
  *(unsigned char *)(*((void *)this + 17) + 936) = 0;
  *(unsigned char *)(*((void *)this + 17) + 120) = 0;
  *(_DWORD *)(*((void *)this + 17) + 920) = 3;
  *(void *)(*((void *)this + 17) + 24) = AppleBCMWLANProximityInterface::setChannelAsyncCallback;
  *(void *)(*((void *)this + 17) + 64) = a2;
  *(unsigned char *)(*((void *)this + 17) + 72) = 1;
  *(_DWORD *)(*((void *)this + 17) + 680) = 6;
  *(_DWORD *)(*((void *)this + 17) + 924) = 0;
  *(_DWORD *)(*((void *)this + 17) + 868) = 1;
  *(_DWORD *)(*((void *)this + 17) + 668) = 4;
  *(_DWORD *)(*((void *)this + 17) + 732) = 100;
  *(_DWORD *)(*((void *)this + 17) + 736) = 0;
  *(_DWORD *)(*((void *)this + 17) + 788) = 3;
  *(_DWORD *)(*((void *)this + 17) + 784) = 60;
  *(_DWORD *)(*((void *)this + 17) + 780) = 40;
  *(_DWORD *)(*((void *)this + 17) + 764) = 1;
  AppleBCMWLANProximityInterface::setLifeTime(this, 6u);
  *(_DWORD *)(*((void *)this + 17) + 720) = 200;
  AppleBCMWLANProximityInterface::setGuardTime(this, 0x14u);
  AppleBCMWLANProximityInterface::setMaxNoMasterPeriod(this, 4u);
  *(_DWORD *)(*((void *)this + 17) + 656) = 1;
  *(_DWORD *)(*((void *)this + 17) + 712) = 0;
  *(_DWORD *)(*((void *)this + 17) + 696) = 12;
  *(void *)(*((void *)this + 17) + 648) = 0;
  *(unsigned char *)(*((void *)this + 17) + 559) = -45;
  *(unsigned char *)(*((void *)this + 17) + 561) = -55;
  *(unsigned char *)(*((void *)this + 17) + 562) = -50;
  *(unsigned char *)(*((void *)this + 17) + 56AppleBCMWLANJoinAdapter::free(this - 3) = -70;
  *(unsigned char *)(*((void *)this + 17) + 560) = 5;
  *(unsigned char *)(*((void *)this + 17) + 564) = 1;
  *(unsigned char *)(*((void *)this + 17) + 565) = 3;
  *(unsigned char *)(*((void *)this + 17) + 566) = 4;
  *(unsigned char *)(*((void *)this + 17) + 524) = 0;
  *(unsigned char *)(*((void *)this + 17) + 525) = 23;
  *(unsigned char *)(*((void *)this + 17) + 526) = -14;
  *(unsigned char *)(*((void *)this + 17) + 527) = 8;
  *(_DWORD *)(*((void *)this + 17) + 16) = 1;
  *(_DWORD *)(*((void *)this + 17) + 708) = 0;
  *(_DWORD *)(*((void *)this + 17) + 660) = 90;
  if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logAlertIf(v12, 0x400uLL, "[dk] %s@%d: created PROXIMITY interface\n", "init", 996);
    }
  }
  unsigned int v14 = 0;
  if (IOParseBootArgNumber("awdl_log_flags_config", &v14, 4))
  {
    if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
    {
      uint64_t v8 = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 128))(v8, 1024);
      uint64_t v9 = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 168))(v9, 1024);
    }
    if (v14 >= 2) {
      *(_DWORD *)(*((void *)this + 17) + 712) = v14 - 1;
    }
  }
  *(_DWORD *)(*((void *)this + 17) + 900) = -1;
  IOParseBootArgNumber("awdl_max_peers", (void *)(*((void *)this + 17) + 900), 4);
  *(_DWORD *)(*((void *)this + 17) + 904) = 1;
  IOParseBootArgNumber("awdl_low_latency_default_mapping", (void *)(*((void *)this + 17) + 904), 4);
  *(_DWORD *)(*((void *)this + 17) + 908) = 0;
  IOParseBootArgNumber("awdl_low_latency_tx_requeue", (void *)(*((void *)this + 17) + 908), 4);
  *(unsigned char *)(*((void *)this + 17) + 544) = 0;
  *(unsigned char *)(*((void *)this + 17) + 92) = 0;
  *(void *)(*((void *)this + 17) + 992) = AppleBCMWLANCore::getTxPowerManager(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64));
  uint64_t v10 = *(void *)(*((void *)this + 17) + 992);
  BOOL v7 = v10 != 0;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    *(void *)(*((void *)this + 17) + 960) = AppleBCMWLANCore::getCommander(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64));
    *(unsigned char *)(*((void *)this + 17) + 937) = 4;
    *(_DWORD *)(*((void *)this + 17) + 940) = 0;
    *(_DWORD *)(*((void *)this + 17) + 944) = 1;
    *(_DWORD *)(*((void *)this + 17) + 948) = 2;
    *(_DWORD *)(*((void *)this + 17) + 952) = 3;
  }
  else
  {
    if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        int v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v13, "[dk] %s@%d:Unable to get Tx Power Manager\n", "init", 1022);
      }
    }
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 2048))(this);
  }
  return v7;
}

uint64_t AppleBCMWLANProximityInterface::setChannelAsyncCallback(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 1024))(a1);
  if (result)
  {
    (*(void (**)(void *))(*a1 + 1024))(a1);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1024))(a1);
      BOOL v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1[17] + 64) + 112))(*(void *)(a1[17] + 64), a3);
      return CCLogStream::logAlert(v6, "[dk] %s@%d: WLC_SET_CHANNEL(), %s\n", "setChannelAsyncCallback", 1266, v7);
    }
  }
  return result;
}

uint64_t AppleBCMWLANProximityInterface::setLifeTime(AppleBCMWLANProximityInterface *this, unsigned int a2)
{
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      uint64_t result = CCLogStream::logAlertIf(v5, 0x400uLL, "[dk] %s@%d: lifetime %lu\n", "setLifeTime", 1203, a2);
    }
  }
  *(_DWORD *)(*((void *)this + 17) + 792) = a2;
  return result;
}

uint64_t AppleBCMWLANProximityInterface::setGuardTime(AppleBCMWLANProximityInterface *this, unsigned int a2)
{
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      uint64_t result = CCLogStream::logAlertIf(v5, 0x400uLL, "[dk] %s@%d: ivars->fGuardTime %lu\n", "setGuardTime", 1334, a2);
    }
  }
  *(_DWORD *)(*((void *)this + 17) + 692) = a2;
  return result;
}

uint64_t AppleBCMWLANProximityInterface::setMaxNoMasterPeriod(AppleBCMWLANProximityInterface *this, unsigned int a2)
{
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      uint64_t result = CCLogStream::logAlertIf(v5, 0x400uLL, "[dk] %s@%d: ivars->fMaxNoMasterPeriod %lu\n", "setMaxNoMasterPeriod", 1341, a2);
    }
  }
  *(_DWORD *)(*((void *)this + 17) + 688) = a2;
  return result;
}

BOOL non-virtual thunk to'AppleBCMWLANProximityInterface::init(AppleBCMWLANProximityInterface *this, AppleBCMWLANCore *a2, ether_addr *a3, unsigned int a4, char *a5)
{
  return AppleBCMWLANProximityInterface::init((AppleBCMWLANProximityInterface *)((char *)this - 128), a2, a3, a4, a5);
}

uint64_t AppleBCMWLANProximityInterface::freeResources(AppleBCMWLANProximityInterface *this)
{
  uint64_t v2 = (void *)*((void *)this + 17);
  if (*v2)
  {
    (*(void (**)(void))(*(void *)*v2 + 72))(*v2);
    (*(void (**)(void))(***((void ***)this + 17) + 16))(**((void **)this + 17));
    **((void **)this + 17) = 0;
    uint64_t v2 = (void *)*((void *)this + 17);
  }
  uint64_t v3 = v2[1];
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 72))(v3);
    (*(void (**)(void))(**(void **)(*((void *)this + 17) + 8) + 16))(*(void *)(*((void *)this + 17) + 8));
    *(void *)(*((void *)this + 17) + 8) = 0;
    uint64_t v2 = (void *)*((void *)this + 17);
  }
  uint64_t v4 = v2[124];
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
    *(void *)(*((void *)this + 17) + 992) = 0;
    uint64_t v2 = (void *)*((void *)this + 17);
  }
  uint64_t result = v2[14];
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    *(void *)(*((void *)this + 17) + 112) = 0;
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::freeResources(AppleBCMWLANProximityInterface *this)
{
  return AppleBCMWLANProximityInterface::freeResources((AppleBCMWLANProximityInterface *)((char *)this - 128));
}

uint64_t AppleBCMWLANProximityInterface::free(void **this)
{
  if (this[17])
  {
    (*((void (**)(void **))*this + 256))(this);
    bzero(this[17], 0x458uLL);
    uint64_t v2 = this[17];
    if (v2)
    {
      IOFree(v2, 0x458uLL);
      this[17] = 0;
    }
  }
  return IO80211VirtualInterface::free((IO80211VirtualInterface *)this);
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::free(void **this)
{
  return AppleBCMWLANProximityInterface::free(this - 3);
}

uint64_t AppleBCMWLANProximityInterface::stop(AppleBCMWLANProximityInterface *this, IOService *a2)
{
  uint64_t WorkQueue = IO80211SkywalkInterface::getWorkQueue(this);
  IOLog("AppleBCMWLANProximityInterface::stop[%u] stop( %p)\n", 1087, a2);
  IO80211SkywalkInterface::validateDispatchQueue(this);
  if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logAlert(v16, "[dk] %s@%d:AppleBCMWLANProximityInterface Interface Stop\n", "stop", 1094);
    }
  }
  uint64_t v5 = *((void *)this + 17);
  if (*(unsigned char *)(v5 + 937))
  {
    uint64_t v6 = 128;
    do
    {
      uint64_t v7 = *(void *)(v5 + 8 * v6);
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v7 + 272))(v7);
        uint64_t v5 = *((void *)this + 17);
        uint64_t v8 = *(void *)(v5 + 8 * v6);
        if (v8)
        {
          (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
          *(void *)(*((void *)this + 17) + 8 * v6) = 0;
          uint64_t v5 = *((void *)this + 17);
        }
      }
      unint64_t v9 = v6 - 127;
      ++v6;
    }
    while (v9 < *(unsigned __int8 *)(v5 + 937));
  }
  uint64_t v10 = *(void *)(v5 + 1000);
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 200))(v10);
    uint64_t v5 = *((void *)this + 17);
    uint64_t v11 = *(void *)(v5 + 1000);
    if (v11)
    {
      (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
      *(void *)(*((void *)this + 17) + 1000) = 0;
      uint64_t v5 = *((void *)this + 17);
    }
  }
  uint64_t v12 = *(void *)(v5 + 1008);
  if (v12)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 208))(v12);
    uint64_t v5 = *((void *)this + 17);
    uint64_t v13 = *(void *)(v5 + 1008);
    if (v13)
    {
      (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
      *(void *)(*((void *)this + 17) + 1008) = 0;
      uint64_t v5 = *((void *)this + 17);
    }
  }
  uint64_t v14 = *(void *)(v5 + 1056);
  if (v14)
  {
    (*(void (**)(uint64_t))(*(void *)v14 + 72))(v14);
    (*(void (**)(uint64_t, void))(*(void *)WorkQueue + 72))(WorkQueue, *(void *)(*((void *)this + 17) + 1056));
    uint64_t v15 = *(void *)(*((void *)this + 17) + 1056);
    if (v15)
    {
      (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
      *(void *)(*((void *)this + 17) + 1056) = 0;
    }
  }
  IOLog("AppleBCMWLANProximityInterface::stop[%u] super::stop( %p) >>\n", 1130, a2);
  return IO80211SkywalkInterface::stop(this, a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::stop(AppleBCMWLANProximityInterface *this, IOService *a2)
{
  return AppleBCMWLANProximityInterface::stop((AppleBCMWLANProximityInterface *)((char *)this - 48), a2);
}

uint64_t AppleBCMWLANProximityInterface::getSTATE(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 4) = 4;
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1024))(a1))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlertIf(v5, 0x400uLL, "[dk] %s@%d: %u\n", "getSTATE", 1150, *(_DWORD *)(a2 + 4));
    }
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::getSTATE(uint64_t a1, uint64_t a2)
{
  return 0;
}

{
  AppleBCMWLANProximityInterface::getSTATE(a1 - 128, a2);
  return 0;
}

uint64_t AppleBCMWLANProximityInterface::setAWDL_AF_TX_MODE(IO80211SkywalkInterface *a1, uint64_t a2)
{
  int v15 = *(_DWORD *)(a2 + 4);
  v14[0] = a1;
  v14[1] = AppleBCMWLANProximityInterface::handleProxIovarAsyncCallBack;
  void v14[2] = 0;
  uint64_t v4 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  v13[0] = &v15;
  v13[1] = 4;
  uint64_t v6 = AppleBCMWLANCommander::sendVirtualIOVarSet(v4, InterfaceId, "awdl_aftxmode", (uint64_t)v13, kNoRxExpected, (uint64_t)v14, 0);
  uint64_t v7 = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
  if (v6)
  {
    if (v7)
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        unint64_t v9 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v6);
        CCLogStream::logAlert(v8, "[dk] %s@%d: Unable to set awdl_aftxmode %s\n", "setAWDL_AF_TX_MODE", 1173, v9);
      }
    }
  }
  else if (v7)
  {
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v12 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, void))(*(void *)a1 + 856))(a1, 0);
      CCLogStream::logAlertIf(v11, 0x400uLL, "[dk] %s@%d: <%s> awdl_aftxmode %u\n", "setAWDL_AF_TX_MODE", 1176, v12, *(_DWORD *)(a2 + 4));
    }
  }
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setAWDL_AF_TX_MODE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::setAWDL_AF_TX_MODE((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::setAWDL_AF_TX_MODE((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::getAWDL_AF_TX_MODE(IO80211SkywalkInterface *a1, uint64_t a2)
{
  int v13 = 0;
  v12[0] = &v13;
  v12[1] = 0x400040004;
  uint64_t v4 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  v11[0] = &v13;
  v11[1] = 4;
  uint64_t v6 = AppleBCMWLANCommander::runVirtualIOVarGet(v4, InterfaceId, "awdl_aftxmode", (uint64_t)v11, (uint64_t)v12, 0);
  if (v6)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v8 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v6);
        CCLogStream::logAlert(v7, "[dk] %s@%d: Unable to get awdl awdl_aftxmode %s\n", "getAWDL_AF_TX_MODE", 1191, v8);
      }
    }
  }
  else
  {
    *(_DWORD *)(a2 + 4) = v13;
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logNoticeIf(v10, 0x400uLL, "[dk] %s@%d: %u\n", "getAWDL_AF_TX_MODE", 1195, *(_DWORD *)(a2 + 4));
      }
    }
  }
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::getAWDL_AF_TX_MODE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::getAWDL_AF_TX_MODE((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::getAWDL_AF_TX_MODE((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::bringdownLink(AppleBCMWLANProximityInterface *this)
{
  *(_DWORD *)(*((void *)this + 17) + 32) = 0;
  uint64_t v2 = *((void *)this + 17);
  if (*(_DWORD *)(v2 + 664))
  {
    uint64_t v3 = AppleBCMWLANProximityInterface::doSetSyncState(this, 0);
    v6[0] = 0;
    v6[1] = 0;
    IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)this + 17) + 64), this, 0x2Eu, v6, 0x10uLL, 1);
    uint64_t v2 = *((void *)this + 17);
  }
  else
  {
    uint64_t v3 = 0;
  }
  *(_DWORD *)(v2 + 708) = 0;
  *(_DWORD *)(*((void *)this + 17) + 872) = 0;
  if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logAlertIf(v5, 0x400uLL, "[dk] %s@%d: ivars->fSyncRole %lu ivars->fSyncEnabled %lu\n", "bringdownLink", 1240, *(unsigned int *)(*((void *)this + 17) + 668), *(unsigned int *)(*((void *)this + 17) + 664));
    }
  }
  (*(void (**)(AppleBCMWLANProximityInterface *, uint64_t, uint64_t))(*(void *)this + 1352))(this, 1, 1);
  return v3;
}

uint64_t AppleBCMWLANProximityInterface::doSetSyncState(AppleBCMWLANProximityInterface *this, int a2)
{
  int v35 = a2;
  uint64_t v4 = *(AppleBCMWLANCore **)(*((void *)this + 17) + 64);
  if (v4) {
    AppleBCMWLANCore::reportSystemPowerState(v4, (unint64_t *)2, a2, 1);
  }
  if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v23 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logAlertIf(v23, 0x400uLL, "[dk] %s@%d: %u was %lu\n", "doSetSyncState", 4857, a2, *(unsigned int *)(*((void *)this + 17) + 664));
    }
  }
  uint64_t v5 = *((void *)this + 17);
  uint64_t v6 = *(AppleBCMWLANCore **)(v5 + 64);
  if (a2)
  {
    if (!v6) {
      return 0;
    }
    goto LABEL_13;
  }
  if (v6)
  {
    AppleBCMWLANCore::writeEventBitField(v6);
    (*(void (**)(AppleBCMWLANProximityInterface *, uint64_t, void, void, void))(*(void *)this + 640))(this, 6, 0, 0, 0);
    uint64_t v5 = *((void *)this + 17);
  }
  uint64_t v6 = *(AppleBCMWLANCore **)(v5 + 64);
  if (!v6) {
    return 0;
  }
  if (a2)
  {
LABEL_13:
    AppleBCMWLANCore::addEventBit(v6, 0x60u);
    AppleBCMWLANCore::addEventBit(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64), 0x61u);
    AppleBCMWLANCore::addEventBit(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64), 0x62u);
    AppleBCMWLANCore::removeEventBit(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64), 0x4Bu);
    goto LABEL_25;
  }
  AppleBCMWLANCore::removeEventBit(v6, 0x60u);
  AppleBCMWLANCore::removeEventBit(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64), 0x61u);
  AppleBCMWLANCore::removeEventBit(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64), 0x62u);
  AppleBCMWLANCore::addEventBit(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64), 0x4Bu);
  uint64_t v7 = *((void *)this + 17);
  if (*(unsigned char *)(v7 + 81))
  {
    if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v24 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logNotice(v24, "[dk] %s@%d:AWDL turned off while in a roam scan\n", "doSetSyncState", 4901);
      }
    }
    (*(void (**)(AppleBCMWLANProximityInterface *, uint64_t, void, void, void))(*(void *)this + 640))(this, 6, 0, 0, 0);
    *(unsigned char *)(*((void *)this + 17) + 81) = 0;
  }
  else if (*(unsigned char *)(v7 + 82))
  {
    if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v26 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logNotice(v26, "[dk] %s@%d:AWDL turned off while in an OOB scan\n", "doSetSyncState", 4907);
      }
    }
    *(unsigned char *)(*((void *)this + 17) + 82) = 0;
  }
  uint64_t v34 = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v29 = 0u;
  (*(void (**)(AppleBCMWLANProximityInterface *, long long *))(*(void *)this + 1696))(this, &v29);
LABEL_25:
  uint64_t v8 = AppleBCMWLANCore::writeEventBitField(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64));
  if (v8)
  {
    uint64_t v9 = v8;
    if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        uint64_t v11 = (const char *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *, uint64_t))(*(void *)this
                                                                                                 + 856))(this, v9);
        CCLogStream::logAlert(v10, "[dk] %s@%d: Failure to enable AWDL events, %s\n", "doSetSyncState", 4921, v11);
      }
    }
  }
  else
  {
    *(void *)&long long v29 = this;
    *((void *)&v29 + 1) = AppleBCMWLANProximityInterface::handleProxIovarAsyncCallBack;
    *(void *)&long long v30 = 0;
    if (IO80211SkywalkInterface::getInterfaceId(this) == -1)
    {
      if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          unint64_t v25 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
          CCLogStream::logAlert(v25, "[dk] %s@%d:ERROR: %s:%u AWDL Chip interface not initialized, bailing out\n", "doSetSyncState", 4931, "doSetSyncState", 4931);
        }
      }
      return 22;
    }
    else
    {
      uint64_t v12 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 960);
      unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
      v28[0] = &v35;
      v28[1] = 4;
      uint64_t v14 = AppleBCMWLANCommander::sendVirtualIOVarSet(v12, InterfaceId, "awdl", (uint64_t)v28, kNoRxExpected, (uint64_t)&v29, 0);
      if (!v14)
      {
        *(_DWORD *)(*((void *)this + 17) + 664) = a2;
        AppleBCMWLANProximityInterface::setAfTxMode(this);
        uint64_t v18 = *((void *)this + 17);
        if (*(_DWORD *)(v18 + 664))
        {
          AppleBCMWLANCore::writeEventBitField(*(AppleBCMWLANCore **)(v18 + 64));
          uint64_t v18 = *((void *)this + 17);
        }
        *(void *)(*((void *)this + 17) + 968) = AppleBCMWLANCore::getPowerManager(*(AppleBCMWLANCore **)(v18 + 64));
        uint64_t v19 = *((void *)this + 17);
        long long v20 = *(AppleBCMWLANPowerManager **)(v19 + 968);
        if (v20)
        {
          AppleBCMWLANPowerManager::configurePowerSaveForAWDL(v20, *(_DWORD *)(v19 + 664) == 0);
        }
        else if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
        {
          (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
          if (CCLogStream::shouldLog())
          {
            unint64_t v27 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
            CCLogStream::logAlert(v27, "[dk] %s@%d:fPowerManager is NULL\n", "doSetSyncState", 4971);
          }
        }
        long long v21 = *(AppleBCMWLANCore **)(*((void *)this + 17) + 64);
        if (v21) {
          AppleBCMWLANCore::reportSystemPowerState(v21, (unint64_t *)2, a2, 0);
        }
        return 0;
      }
      uint64_t v9 = v14;
      if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          int v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
          uint64_t v16 = *(unsigned int *)(*((void *)this + 17) + 664);
          __int16 v17 = (const char *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *, uint64_t))(*(void *)this + 856))(this, v9);
          CCLogStream::logCrit(v15, "[dk] %s@%d:Critical Error: cannot send %s iovar ivars->fSyncEnabled %lu: %s\n", "doSetSyncState", 4938, "awdl", v16, v17);
        }
      }
    }
  }
  return v9;
}

uint64_t AppleBCMWLANProximityInterface::setBssRates(AppleBCMWLANProximityInterface *this)
{
  uint64_t v2 = *((void *)this + 17);
  int v27 = 2 * *(_DWORD *)(v2 + 696);
  BOOL isFWAPIVer11nOnly = AppleBCMWLANCore::isFWAPIVer11nOnly(*(AppleBCMWLANCore **)(v2 + 64));
  if (isFWAPIVer11nOnly) {
    uint64_t v4 = "bg_mrate";
  }
  else {
    uint64_t v4 = "2g_mrate";
  }
  if (isFWAPIVer11nOnly) {
    uint64_t v5 = "a_mrate";
  }
  else {
    uint64_t v5 = "5g_mrate";
  }
  if (IO80211SkywalkInterface::getInterfaceId(this) == -1
    || IO80211SkywalkInterface::getInterfaceId(this) == 255
    || IO80211SkywalkInterface::getInterfaceId(this) >= 0xC)
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    if (!result) {
      return result;
    }
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (!result) {
      return result;
    }
    uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    return CCLogStream::logAlert(v14, "[dk] %s@%d:ERROR: %s:%u AWDL Chip interface not initialized, bailing out\n");
  }
  uint64_t v7 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 960);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
  unint64_t v25 = &v27;
  uint64_t v26 = 4;
  uint64_t v9 = AppleBCMWLANCommander::runVirtualIOVarSet(v7, InterfaceId, v4, (uint64_t)&v25, 0, 0);
  uint64_t v10 = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
  if (v9)
  {
    if (v10)
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        int v12 = v27 / 2;
        int v13 = (const char *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *, uint64_t))(*(void *)this
                                                                                                 + 856))(this, v9);
        CCLogStream::logAlert(v11, "[dk] %s@%d: Unable to send %s iovar with mrate %d Mbps,: %s \n", "setBssRates", 1309, v4, v12, v13);
      }
    }
  }
  else if (v10)
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      __int16 v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      int v23 = v27 / 2;
      uint64_t v24 = (const char *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *, void))(*(void *)this + 856))(this, 0);
      CCLogStream::logNoticeIf(v22, 0x400uLL, "[dk] %s@%d: sent %s iovar with mrate %d Mbps, status: %s \n", "setBssRates", 1311, v4, v23, v24);
    }
  }
  if (IO80211SkywalkInterface::getInterfaceId(this) == -1
    || IO80211SkywalkInterface::getInterfaceId(this) == 255
    || IO80211SkywalkInterface::getInterfaceId(this) >= 0xC)
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        return CCLogStream::logAlert(v14, "[dk] %s@%d:ERROR: %s:%u AWDL Chip interface not initialized, bailing out\n");
      }
    }
  }
  else
  {
    uint64_t result = AppleBCMWLANCore::isDualBand(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64));
    if (result)
    {
      int v15 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 960);
      unsigned __int8 v16 = IO80211SkywalkInterface::getInterfaceId(this);
      unint64_t v25 = &v27;
      uint64_t v26 = 4;
      uint64_t v17 = AppleBCMWLANCommander::runVirtualIOVarSet(v15, v16, v5, (uint64_t)&v25, 0, 0);
      uint64_t result = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      if (v17)
      {
        if (result)
        {
          (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            uint64_t v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
            (*(void (**)(AppleBCMWLANProximityInterface *, uint64_t))(*(void *)this + 856))(this, v17);
            return CCLogStream::logAlert(v18, "[dk] %s@%d: Unable to send %s iovar with mrate %d Mbps,: %s \n");
          }
        }
      }
      else if (result)
      {
        (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          uint64_t v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
          int v20 = v27 / 2;
          long long v21 = (const char *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *, void))(*(void *)this
                                                                                                  + 856))(this, 0);
          return CCLogStream::logNoticeIf(v19, 0x400uLL, "[dk] %s@%d: sent %s iovar with mrate %d Mbps, status: %s \n", "setBssRates", 1327, v5, v20, v21);
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANProximityInterface::bringupLink(AppleBCMWLANProximityInterface *this)
{
  if (*(unsigned char *)(*((void *)this + 17) + 72)) {
    AppleBCMWLANProximityInterface::resetInterface(this);
  }
  if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v3 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      uint64_t v4 = *((void *)this + 17);
      uint64_t v5 = *(unsigned int *)(v4 + 668);
      uint64_t v6 = *(unsigned int *)(v4 + 664);
      isPoweredOuint64_t n = AppleBCMWLANCore::isPoweredOn(*(AppleBCMWLANCore **)(v4 + 64));
      CCLogStream::logWarnIf(v3, 0x400uLL, "[dk] %s@%d: ivars->fSyncRole %lu ivars->fSyncEnabled %lu %u \n", "bringupLink", 1277, v5, v6, isPoweredOn);
    }
  }
  if (AppleBCMWLANCore::isPoweredOn(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64))) {
    (*(void (**)(AppleBCMWLANProximityInterface *, uint64_t, uint64_t))(*(void *)this + 1352))(this, 2, 1);
  }
  return 0;
}

uint64_t IO80211BufferCursor::copyFrom(uint64_t a1, uint64_t a2, rsize_t __n)
{
  uint64_t v3 = 3758097128;
  if (__n - 1 >= *(void *)(a2 + 8)) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *(const void **)a2;
  }
  if (__n - 1 < *(void *)(a1 + 8))
  {
    uint64_t v5 = *(void **)a1;
    if (v4) {
      BOOL v6 = v5 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6)
    {
      if (v5) {
        memset_s(v5, __n, 0, __n);
      }
    }
    else
    {
      memcpy(v5, v4, __n);
      return 0;
    }
  }
  return v3;
}

uint64_t AppleBCMWLANProximityInterface::getBSSID()
{
  return 3758096385;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::getBSSID()
{
  return 3758096385;
}

{
  return 3758096385;
}

uint64_t AppleBCMWLANProximityInterface::getSSID(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 4) = 0x6C64776100000004;
  *(unsigned char *)(a2 + 12) = 0;
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::getSSID(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 4) = 0x6C64776100000004;
  *(unsigned char *)(a2 + 12) = 0;
  return 0;
}

{
  *(void *)(a2 + 4) = 0x6C64776100000004;
  *(unsigned char *)(a2 + 12) = 0;
  return 0;
}

uint64_t AppleBCMWLANProximityInterface::getCHANNEL()
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::getCHANNEL()
{
  return 0;
}

{
  return 0;
}

uint64_t AppleBCMWLANProximityInterface::setAfTxMode(AppleBCMWLANProximityInterface *this)
{
  unsigned int v18 = 0;
  if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      int v12 = (unsigned int *)*((void *)this + 17);
      uint64_t v13 = v12[167];
      if (v13 > 4) {
        uint64_t v14 = "UNKNOWN";
      }
      else {
        uint64_t v14 = off_1003847C0[(int)v13];
      }
      CCLogStream::logAlertIf(v11, 0x400uLL, "[dk] %s@%d: was %lu metric %lu role %lu %s en %lu -> %lu\n", "setAfTxMode", 1641, v12[134], *(unsigned int *)((char *)v12 + 555), v13, v14, v12[166], 0);
    }
  }
  uint64_t v2 = *((void *)this + 17);
  if (*(_DWORD *)(v2 + 536))
  {
    v17[0] = this;
    v17[1] = AppleBCMWLANProximityInterface::handleProxIovarAsyncCallBack;
    unsigned char v17[2] = 0;
    uint64_t v3 = *(AppleBCMWLANCommander **)(v2 + 960);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
    v16[0] = &v18;
    v16[1] = 4;
    uint64_t v5 = AppleBCMWLANCommander::sendVirtualIOVarSet(v3, InterfaceId, "awdl_aftxmode", (uint64_t)v16, kNoRxExpected, (uint64_t)v17, 0);
    if (v5)
    {
      if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          BOOL v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
          uint64_t v7 = *(unsigned int *)(*((void *)this + 17) + 536);
          uint64_t v8 = v18;
          uint64_t v9 = (const char *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *, uint64_t))(*(void *)this
                                                                                                  + 856))(this, v5);
          CCLogStream::logCrit(v6, "[dk] %s@%d:Critical Error: cannot send %s iovar ivars->fAfTxMode %lu mode %lu: %s\n", "setAfTxMode", 1650, "awdl_aftxmode", v7, v8, v9);
        }
      }
    }
    else
    {
      *(_DWORD *)(*((void *)this + 17) + 536) = v18;
    }
    uint64_t v2 = *((void *)this + 17);
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (*(_DWORD *)(v2 + 712))
  {
    if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        int v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlertIf(v15, 0x400uLL, "[dk] %s@%d:AF TX Mode -> %lu\n", "setAfTxMode", 1656, *(unsigned int *)(*((void *)this + 17) + 536));
      }
    }
  }
  return v5;
}

uint64_t AppleBCMWLANProximityInterface::dump(OSObject *this, char *a2)
{
  ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[18].release)(this);
  int v4 = IO80211Print();
  ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[18].release)(this);
  int v5 = IO80211Print() + v4;
  ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[18].release)(this);
  uint64_t v6 = IO80211Print() + v5;
  AppleBCMWLANProximityInterface::dumpSyncParams(this, a2);
  return v6;
}

uint64_t AppleBCMWLANProximityInterface::dumpSyncParams(OSObject *this, char *a2)
{
  if (!LODWORD(this[3].meta[20].metaClassPrivate)) {
    return 0;
  }
  uint64_t WorkQueue = IO80211SkywalkInterface::getWorkQueue((IO80211SkywalkInterface *)this);
  if ((*(unsigned int (**)(uint64_t))(*(void *)WorkQueue + 136))(WorkQueue))
  {
    ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[18].release)(this);
    getClassNameHelper(this);
    IO80211Print();
    return 0;
  }
  int v15 = 0;
  memset(v14, 0, sizeof(v14));
  v13[0] = v14;
  v13[1] = 0x2400240024;
  int v5 = (AppleBCMWLANCommander *)this[3].meta[30].__vftable;
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId((IO80211SkywalkInterface *)this);
  v12[0] = v14;
  v12[1] = 36;
  int v7 = AppleBCMWLANCommander::runVirtualIOVarGet(v5, InterfaceId, "awdl_sync_params", (uint64_t)v12, (uint64_t)v13, 0);
  uint64_t v8 = ((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[18].release)(this);
  if (!v7)
  {
    getClassNameHelper(this);
    uint64_t v10 = IO80211Print();
    ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[18].release)(this);
    uint64_t v11 = IO80211Print() + v10;
    ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[18].release)(this);
    LODWORD(v11) = IO80211Print() + v11;
    ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[18].release)(this);
    return IO80211HexdumpIfKernel() + v11;
  }
  if (!v8) {
    return 0;
  }
  ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[18].release)(this);
  uint64_t result = CCLogStream::shouldLog();
  if (result)
  {
    uint64_t v9 = (CCLogStream *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[18].release)(this);
    CCLogStream::logAlertIf(v9, 0x400uLL, "[dk] %s@%d: Unable to awdl_sync_params\n", "dumpSyncParams", 3662);
    return 0;
  }
  return result;
}

uint64_t AppleBCMWLANProximityInterface::getAWDL_SYNC_ENABLED(IO80211SkywalkInterface *a1, uint64_t a2)
{
  int v12 = 0;
  v11[0] = &v12;
  v11[1] = 0x400040004;
  if (IO80211SkywalkInterface::getInterfaceId(a1) == -1
    || (int v4 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960),
        unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1),
        v10[0] = &v12,
        v10[1] = 4,
        uint64_t v6 = AppleBCMWLANCommander::runVirtualIOVarGet(v4, InterfaceId, "awdl", (uint64_t)v10, (uint64_t)v11, 0),
        !v6))
  {
    uint64_t v7 = 0;
    *(_DWORD *)(a2 + 8) = v12;
  }
  else
  {
    uint64_t v7 = v6;
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlertIf(v8, 0x400uLL, "[dk] %s@%d: Unable to awdl\n", "getAWDL_SYNC_ENABLED", 1763);
      }
    }
  }
  return v7;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::getAWDL_SYNC_ENABLED(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::getAWDL_SYNC_ENABLED((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::getAWDL_SYNC_ENABLED((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::getAWDL_SYNC_PARAMS(IO80211SkywalkInterface *a1, _DWORD *a2)
{
  unsigned int InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  if (InterfaceId < 0xC)
  {
    memset(v20, 0, sizeof(v20));
    uint64_t v5 = (*(uint64_t (**)(IO80211SkywalkInterface *, void *))(*(void *)a1 + 1616))(a1, v20);
    if (!v5)
    {
      int v23 = 0;
      long long v21 = 0u;
      long long v22 = 0u;
      v19[0] = &v21;
      v19[1] = 0x2400240024;
      uint64_t v7 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
      unsigned __int8 v8 = IO80211SkywalkInterface::getInterfaceId(a1);
      v18[0] = &v21;
      v18[1] = 36;
      if (!AppleBCMWLANCommander::runVirtualIOVarGet(v7, v8, "awdl_sync_params", (uint64_t)v18, (uint64_t)v19, 0))
      {
        int v9 = (unsigned __int16)v22;
        if ((_WORD)v22)
        {
          int v10 = WORD5(v21);
          if (WORD5(v21))
          {
            int v11 = HIWORD(v21);
            if (HIWORD(v21))
            {
              uint64_t v5 = 0;
              int v12 = WORD4(v21);
              *(_DWORD *)(*((void *)a1 + 17) + 720) = WORD4(v21);
              a2[2] = v12;
              *(_DWORD *)(*((void *)a1 + 17) + 732) = v10;
              a2[4] = v10;
              *(_DWORD *)(*((void *)a1 + 17) + 724) = v11;
              a2[3] = v11;
              *(_DWORD *)(*((void *)a1 + 17) + 716) = v9;
              a2[1] = v9;
              a2[5] = *(_DWORD *)(*((void *)a1 + 17) + 660);
              return v5;
            }
            if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
            {
              (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              if (CCLogStream::shouldLog())
              {
                uint64_t v17 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                CCLogStream::logAlert(v17, "[dk] %s@%d: Zero AWExt Invalid aw_ext_length\n");
              }
            }
          }
          else if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
          {
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              CCLogStream::logAlert(v14, "[dk] %s@%d: Zero AWExt Invalid action_frame_period\n");
            }
          }
        }
        else if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            CCLogStream::logAlert(v13, "[dk] %s@%d: Zero AWExt Invalid aw_cmn_length\n");
          }
        }
        return 22;
      }
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          unsigned __int8 v16 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logAlertIf(v16, 0x400uLL, "[dk] %s@%d: Unable to awdl_sync_params\n", "getAWDL_SYNC_PARAMS", 1797);
        }
      }
      return 97;
    }
  }
  else if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
  {
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    uint64_t v5 = 1;
    if (CCLogStream::shouldLog())
    {
      uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: %s:%u AWDL Chip interface not initialized, bailing out, interfaceId : %x\n", "getAWDL_SYNC_PARAMS", 1780, "getAWDL_SYNC_PARAMS", 1780, InterfaceId);
    }
  }
  else
  {
    return 1;
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::getAWDL_SYNC_PARAMS(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANProximityInterface::getAWDL_SYNC_PARAMS((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::getAWDL_SYNC_PARAMS((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::getAWDL_SYNC_STATE(IO80211SkywalkInterface *a1, uint64_t a2)
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  int v18 = 0;
  uint64_t v17 = 0;
  v14[0] = &v15;
  v14[1] = 0x1C001C001CLL;
  int v4 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  v13[0] = &v15;
  v13[1] = 28;
  uint64_t v6 = AppleBCMWLANCommander::runVirtualIOVarGet(v4, InterfaceId, "awdl_opmode", (uint64_t)v13, (uint64_t)v14, 0);
  if (v6)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        unsigned __int8 v8 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v6);
        CCLogStream::logAlert(v7, "[dk] %s@%d: Unable to get awdl opmode %s\n", "getAWDL_SYNC_STATE", 1831, v8);
      }
    }
  }
  else
  {
    *(_DWORD *)(*((void *)a1 + 17) + 660) = WORD1(v15);
    uint64_t v9 = *(int *)(*((void *)a1 + 17) + 668);
    if (v9 > 2) {
      int v10 = 0;
    }
    else {
      int v10 = dword_1003050F8[v9];
    }
    int v11 = HIDWORD(v15);
    *(_DWORD *)(a2 + 4) = v10;
    *(_DWORD *)(a2 + 8) = v11;
    *(_WORD *)(a2 + 12) = v16;
  }
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::getAWDL_SYNC_STATE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::getAWDL_SYNC_STATE((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::getAWDL_SYNC_STATE((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::getAWDL_DEV_STATS(IO80211SkywalkInterface *a1, uint64_t a2)
{
  if (IO80211SkywalkInterface::getInterfaceId(a1) == -1) {
    return 1;
  }
  if (AppleBCMWLANCore::getFirmwareInterfaceVersion(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64)) >= 4)
  {
    if (AppleBCMWLANCore::getFirmwareInterfaceVersion(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64)) >= 6) {
      uint64_t v4 = 324;
    }
    else {
      uint64_t v4 = 172;
    }
  }
  else
  {
    uint64_t v4 = 184;
  }
  uint64_t v6 = IOMallocZeroData();
  if (v6)
  {
    uint64_t v7 = v6;
    v15[0] = v6;
    v15[1] = v4 | (v4 << 32);
    unsigned __int8 v8 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
    v14[0] = v7;
    v14[1] = v4;
    uint64_t v5 = AppleBCMWLANCommander::runVirtualIOVarGet(v8, InterfaceId, "awdl_stats", (uint64_t)v14, (uint64_t)v15, 0);
    if (v5)
    {
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          int v10 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          int v11 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v5);
          CCLogStream::logAlert(v10, "[dk] %s@%d: Unable to get awdl stats %s\n", "getAWDL_DEV_STATS", 1883, v11);
        }
      }
      goto LABEL_20;
    }
    if (AppleBCMWLANCore::getFirmwareInterfaceVersion(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64)) > 3)
    {
      if (AppleBCMWLANCore::getFirmwareInterfaceVersion(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64)) > 5)
      {
        *(void *)(a2 + 4) = *(void *)(v7 + 4);
        *(_OWORD *)(a2 + 32) = *(_OWORD *)(v7 + 12);
        *(_DWORD *)(a2 + 48) = *(_DWORD *)(v7 + 28);
        *(void *)(a2 + 56) = *(void *)(v7 + 32);
        *(_DWORD *)(a2 + 64) = *(_DWORD *)(v7 + 40);
        *(_DWORD *)(a2 + 72) = *(_DWORD *)(v7 + 44);
        *(_DWORD *)(a2 + 76) = *(_DWORD *)(v7 + 48);
        *(int32x4_t *)(a2 + 12) = vaddq_s32(*(int32x4_t *)(v7 + 248), *(int32x4_t *)(v7 + 168));
        *(_DWORD *)(a2 + 28) = *(_DWORD *)(v7 + 264) + *(_DWORD *)(v7 + 184);
        *(_DWORD *)(a2 + 52) = *(_DWORD *)(v7 + 268) + *(_DWORD *)(v7 + 188);
        *(_DWORD *)(a2 + 68) = *(_DWORD *)(v7 + 272) + *(_DWORD *)(v7 + 192);
        goto LABEL_20;
      }
      *(_OWORD *)(a2 + 4) = *(_OWORD *)v7;
      *(_OWORD *)(a2 + 20) = *(_OWORD *)(v7 + 16);
      *(_OWORD *)(a2 + 36) = *(_OWORD *)(v7 + 32);
      *(_OWORD *)(a2 + 52) = *(_OWORD *)(v7 + 48);
      *(void *)(a2 + 68) = *(void *)(v7 + 64);
      *(_DWORD *)(a2 + 76) = *(_DWORD *)(v7 + 72);
      uint64_t v12 = *(void *)(v7 + 104);
    }
    else
    {
      *(_OWORD *)(a2 + 4) = *(_OWORD *)v7;
      *(_OWORD *)(a2 + 20) = *(_OWORD *)(v7 + 16);
      *(_OWORD *)(a2 + 36) = *(_OWORD *)(v7 + 32);
      *(_OWORD *)(a2 + 52) = *(_OWORD *)(v7 + 48);
      *(void *)(a2 + 68) = *(void *)(v7 + 64);
      *(_DWORD *)(a2 + 76) = *(_DWORD *)(v7 + 72);
      uint64_t v12 = *(void *)(v7 + 128);
    }
    *(void *)(a2 + 80) = v12;
LABEL_20:
    IOFreeData();
    return v5;
  }
  return 12;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::getAWDL_DEV_STATS(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::getAWDL_DEV_STATS((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::getAWDL_DEV_STATS((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::getAWDL_CCA(IO80211SkywalkInterface *a1, uint64_t a2)
{
  if (*(unsigned __int16 *)(a2 + 4) > 0x10u) {
    return 22;
  }
  if (IO80211SkywalkInterface::getInterfaceId(a1) == -1) {
    return 1;
  }
  uint64_t v5 = IOMallocZeroData();
  if (!v5) {
    return 12;
  }
  uint64_t v6 = v5;
  if (!*(_WORD *)(a2 + 4))
  {
LABEL_18:
    uint64_t v2 = 0;
    goto LABEL_19;
  }
  unint64_t v7 = 0;
  unsigned __int8 v8 = (void *)(v5 + 4);
  uint64_t v9 = (unsigned __int8 *)(a2 + 30);
  while (1)
  {
    unsigned int v10 = *v9;
    if (v10 - 1 >= 0xE && v10 - 36 > 0x81)
    {
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          int v11 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logAlert(v11, "[dk] %s@%d:Invalid channel : %d for getAWDL_CCA\n", "getAWDL_CCA", 2055, *v9);
        }
      }
      goto LABEL_17;
    }
    __int16 v12 = *((_WORD *)v9 - 1);
    __int16 v13 = v10 >= 0xF ? -16384 : 0;
    *(_WORD *)uint64_t v6 = v13 | v10 | 0x1000;
    *(_WORD *)(v6 + 2) = v12;
    void *v8 = 0;
    *(void *)(v6 + 12) = 0;
    *(_DWORD *)(v6 + 20) = 0;
    v21[0] = v6;
    v21[1] = 0x1800000018;
    uint64_t v14 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
    v20[0] = v6;
    v20[1] = 24;
    uint64_t v16 = AppleBCMWLANCommander::runVirtualIOVarGet(v14, InterfaceId, "cca_get_stats", (uint64_t)v20, (uint64_t)v21, 0);
    if (v16) {
      break;
    }
    *(_DWORD *)(v9 - 22) = *(_DWORD *)(v6 + 4);
    *(_DWORD *)(v9 - 18) = *(_DWORD *)(v6 + 8);
    *(void *)(v9 - 14) = *(void *)(v6 + 12);
    *(_DWORD *)(v9 - 6) = *(_DWORD *)(v6 + 20);
LABEL_17:
    ++v7;
    v9 += 24;
    if (v7 >= *(unsigned __int16 *)(a2 + 4)) {
      goto LABEL_18;
    }
  }
  uint64_t v2 = v16;
  if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
  {
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      int v18 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v19 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v2);
      CCLogStream::logAlert(v18, "[dk] %s@%d: Unable to get awdl cca %s\n", "getAWDL_CCA", 2040, v19);
    }
  }
LABEL_19:
  IOFreeData();
  return v2;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::getAWDL_CCA(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::getAWDL_CCA((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::getAWDL_CCA((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::getAWDL_PRESENCE_MODE(IO80211SkywalkInterface *a1, uint64_t a2)
{
  int v12 = 0;
  v11[0] = &v12;
  v11[1] = 0x400040004;
  uint64_t v4 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  v10[0] = &v12;
  v10[1] = 4;
  uint64_t result = AppleBCMWLANCommander::runVirtualIOVarGet(v4, InterfaceId, "awdl_presencemode", (uint64_t)v10, (uint64_t)v11, 0);
  if (result)
  {
    uint64_t v7 = result;
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        unsigned __int8 v8 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v9 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v7);
        CCLogStream::logAlert(v8, "[dk] %s@%d: Unable to get awdl_presencemode %s\n", "getAWDL_PRESENCE_MODE", 2070, v9);
      }
    }
    return 97;
  }
  else
  {
    *(_DWORD *)(a2 + 4) = v12;
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::getAWDL_PRESENCE_MODE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::getAWDL_PRESENCE_MODE((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::getAWDL_PRESENCE_MODE((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::getAWDL_DEVICE_CAPABILITIES(uint64_t a1, _DWORD *a2)
{
  ConfigManager = (AppleBCMWLANConfigManager *)AppleBCMWLANCore::getConfigManager(*(AppleBCMWLANCore **)(*(void *)(a1 + 136) + 64));
  a2[3] = AppleBCMWLANConfigManager::getAWDLElectionMetric(ConfigManager);
  uint64_t v5 = (AppleBCMWLANConfigManager *)AppleBCMWLANCore::getConfigManager(*(AppleBCMWLANCore **)(*(void *)(a1 + 136)
                                                                                            + 64));
  a2[4] = AppleBCMWLANConfigManager::getAWDLFlags(v5);
  a2[2] = 10;
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::getAWDL_DEVICE_CAPABILITIES(uint64_t a1, _DWORD *a2)
{
  return 0;
}

{
  AppleBCMWLANProximityInterface::getAWDL_DEVICE_CAPABILITIES(a1 - 128, a2);
  return 0;
}

uint64_t AppleBCMWLANProximityInterface::getAWDL_EXTENSION_STATE_MACHINE_PARAMETERS(IO80211SkywalkInterface *a1, _DWORD *a2)
{
  int v16 = 0;
  v15[0] = &v16;
  v15[1] = 0x400040004;
  uint64_t v4 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  v14[0] = &v16;
  v14[1] = 4;
  uint64_t result = AppleBCMWLANCommander::runVirtualIOVarGet(v4, InterfaceId, "awdl_extcounts", (uint64_t)v14, (uint64_t)v15, 0);
  if (result)
  {
    uint64_t v7 = result;
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v12 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        __int16 v13 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v7);
        CCLogStream::logAlert(v12, "[dk] %s@%d: Unable to get awdl_extcounts %s\n", "getAWDL_EXTENSION_STATE_MACHINE_PARAMETERS", 2096, v13);
      }
    }
    return 97;
  }
  else
  {
    int v8 = v16;
    *(_DWORD *)(*((void *)a1 + 17) + 808) = v16;
    a2[4] = v8;
    int v9 = BYTE2(v16);
    *(_DWORD *)(*((void *)a1 + 17) + 812) = BYTE2(v16);
    a2[2] = v9;
    int v10 = BYTE1(v16);
    *(_DWORD *)(*((void *)a1 + 17) + 816) = BYTE1(v16);
    a2[1] = v10;
    int v11 = HIBYTE(v16);
    *(_DWORD *)(*((void *)a1 + 17) + 820) = HIBYTE(v16);
    a2[3] = v11;
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::getAWDL_EXTENSION_STATE_MACHINE_PARAMETERS(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANProximityInterface::getAWDL_EXTENSION_STATE_MACHINE_PARAMETERS((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::getAWDL_EXTENSION_STATE_MACHINE_PARAMETERS((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::setAWDL_EXTENSION_STATE_MACHINE_PARAMETERS(IO80211SkywalkInterface *a1, uint64_t a2)
{
  int16x8_t v4 = *(int16x8_t *)(a2 + 4);
  *(int16x4_t *)v4.i8 = vmovn_s32((int32x4_t)v4);
  *(int8x8_t *)v4.i8 = vext_s8(*(int8x8_t *)v4.i8, *(int8x8_t *)v4.i8, 6uLL);
  unsigned __int32 v16 = vmovn_s16(v4).u32[0];
  v15[0] = a1;
  v15[1] = AppleBCMWLANProximityInterface::handleProxIovarAsyncCallBack;
  void v15[2] = 0;
  uint64_t v5 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  v14[0] = &v16;
  v14[1] = 4;
  uint64_t v7 = AppleBCMWLANCommander::sendVirtualIOVarSet(v5, InterfaceId, "awdl_extcounts", (uint64_t)v14, kNoRxExpected, (uint64_t)v15, 0);
  uint64_t v8 = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
  if (v7)
  {
    if (v8)
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v9 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        int v10 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v7);
        CCLogStream::logAlert(v9, "[dk] %s@%d: Unable to set awdl_extcounts %s\n", "setAWDL_EXTENSION_STATE_MACHINE_PARAMETERS", 2132, v10);
      }
    }
  }
  else
  {
    if (v8)
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v12 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        __int16 v13 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, void))(*(void *)a1 + 856))(a1, 0);
        CCLogStream::logAlertIf(v12, 0x400uLL, "[dk] %s@%d: <%s> min %u maxuni %u maxmulti %u maxaction %u \n", "setAWDL_EXTENSION_STATE_MACHINE_PARAMETERS", 2136, v13, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 12));
      }
    }
    *(_DWORD *)(*((void *)a1 + 17) + 808) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(*((void *)a1 + 17) + 812) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(*((void *)a1 + 17) + 816) = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(*((void *)a1 + 17) + 820) = *(_DWORD *)(a2 + 12);
  }
  return v7;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setAWDL_EXTENSION_STATE_MACHINE_PARAMETERS(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::setAWDL_EXTENSION_STATE_MACHINE_PARAMETERS((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::setAWDL_EXTENSION_STATE_MACHINE_PARAMETERS((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::logElectionTree(AppleBCMWLANProximityInterface *this, const char *a2)
{
  uint64_t v3 = *((void *)this + 17);
  int v15 = *(unsigned __int8 *)(v3 + 552);
  int v4 = *(unsigned __int16 *)(v3 + 553);
  int v5 = *(_DWORD *)(v3 + 555);
  int v6 = *(char *)(v3 + 559);
  int v7 = *(char *)(v3 + 561);
  int v8 = *(char *)(v3 + 562);
  int v9 = *(char *)(v3 + 563);
  int v10 = *(unsigned __int8 *)(v3 + 564);
  int v11 = *(unsigned __int8 *)(v3 + 565);
  int v12 = *(unsigned __int8 *)(v3 + 566);
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      return CCLogStream::logAlertIf(v14, 0x400uLL, "[dk] %s@%d:[%s] flags 0x%x eid=%u self_metric=%u max_masters: close=%u mid=%u max_depth=%u sync: close=%d edge=%d range: close=%d mid=%d\n", "logElectionTree", 2153, a2, v15, v4, v5, v10, v11, v12, v6, v7, v8, v9);
    }
  }
  return result;
}

uint64_t AppleBCMWLANProximityInterface::getElectionParams(IO80211SkywalkInterface *a1, _OWORD *a2)
{
  *(_OWORD *)((char *)a2 + 26) = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  uint64_t v4 = 0x2A002A002ALL;
  if (!a2) {
    uint64_t v4 = 0;
  }
  v15[0] = a2;
  v15[1] = v4;
  int v5 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
  if (a2) {
    uint64_t v6 = 42;
  }
  else {
    uint64_t v6 = 0;
  }
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  v14[0] = a2;
  v14[1] = v6;
  uint64_t v8 = AppleBCMWLANCommander::runVirtualIOVarGet(v5, InterfaceId, "awdl_election_tree", (uint64_t)v14, (uint64_t)v15, 0);
  uint64_t v9 = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
  if (v8)
  {
    if (v9)
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v10 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        int v11 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v8);
        CCLogStream::logAlert(v10, "[dk] %s@%d: Unable to get awdl election info %s\n", "getElectionParams", 2165, v11);
      }
    }
  }
  else if (v9)
  {
    int v12 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog(v12, 0x400uLL)) {
      AppleBCMWLANProximityInterface::logElectionTree(a1, "getElectionParams");
    }
  }
  return v8;
}

uint64_t AppleBCMWLANProximityInterface::getAWDL_ELECTION_ID(IO80211SkywalkInterface *a1, uint64_t a2)
{
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v6[10] = v3;
  long long v5 = v3;
  *(_OWORD *)uint64_t v6 = v3;
  AppleBCMWLANProximityInterface::getElectionParams(a1, &v5);
  *(_DWORD *)(a2 + 4) = *(unsigned __int16 *)((char *)&v5 + 1);
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::getAWDL_ELECTION_ID(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v6[10] = v3;
  long long v5 = v3;
  *(_OWORD *)uint64_t v6 = v3;
  AppleBCMWLANProximityInterface::getElectionParams((IO80211SkywalkInterface *)(a1 - 112), &v5);
  *(_DWORD *)(a2 + 4) = *(unsigned __int16 *)((char *)&v5 + 1);
  return 0;
}

{
  long long v3;
  long long v5;
  unsigned char v6[26];

  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v6[10] = v3;
  long long v5 = v3;
  *(_OWORD *)uint64_t v6 = v3;
  AppleBCMWLANProximityInterface::getElectionParams((IO80211SkywalkInterface *)(a1 - 128), &v5);
  *(_DWORD *)(a2 + 4) = *(unsigned __int16 *)((char *)&v5 + 1);
  return 0;
}

uint64_t AppleBCMWLANProximityInterface::setAWDL_ELECTION_PARAMS(IO80211SkywalkInterface *a1, uint64_t a2)
{
  *(unsigned char *)(*((void *)a1 + 17) + 552) = *(unsigned char *)(a2 + 16);
  *(_WORD *)(*((void *)a1 + 17) + 55AppleBCMWLANJoinAdapter::free(this - 3) = *(_WORD *)(a2 + 18);
  *(unsigned char *)(*((void *)a1 + 17) + 577) = *(unsigned char *)(a2 + 20);
  uint64_t v3 = *((void *)a1 + 17) + 552;
  int v4 = *(_DWORD *)(a2 + 22);
  *(_WORD *)(v3 + 19) = *(_WORD *)(a2 + 26);
  *(_DWORD *)(v3 + 15) = v4;
  *(_DWORD *)(*((void *)a1 + 17) + 57AppleBCMWLANJoinAdapter::free(this - 3) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(*((void *)a1 + 17) + 555) = *(_DWORD *)(a2 + 32);
  v15[0] = a1;
  v15[1] = AppleBCMWLANProximityInterface::handleElectionTreeIovarAsyncCallBack;
  void v15[2] = 0;
  long long v5 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  v14[0] = *((void *)a1 + 17) + 552;
  v14[1] = 42;
  uint64_t v7 = AppleBCMWLANCommander::sendVirtualIOVarSet(v5, InterfaceId, "awdl_election_tree", (uint64_t)v14, kNoRxExpected, (uint64_t)v15, 0);
  uint64_t v8 = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
  if (v7)
  {
    if (v8)
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        int v10 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v7);
        CCLogStream::logAlertIf(v9, 0x400uLL, "[dk] %s@%d: Unable to send election params %s\n", "setAWDL_ELECTION_PARAMS", 2204, v10);
      }
    }
  }
  else
  {
    if (v8)
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        __int16 v13 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logInfoIf(v13, 0x400uLL, "[dk] %s@%d: election params  set \n", "setAWDL_ELECTION_PARAMS", 2209);
      }
    }
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      int v11 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog(v11, 0x400uLL)) {
        AppleBCMWLANProximityInterface::logElectionTree(a1, "setAWDL_ELECTION_PARAMS");
      }
    }
  }
  return v7;
}

uint64_t AppleBCMWLANProximityInterface::handleElectionTreeIovarAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    int v4 = (IO80211SkywalkInterface *)result;
    if (a3 == -469794557)
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)result + 1024))(result))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)v4 + 1024))(v4);
        if (CCLogStream::shouldLog())
        {
          uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v4 + 1024))(v4);
          CCLogStream::logAlert(v9, "[dk] %s@%d:Unable to set awdl_election_tree; trying again without private election\n",
            "handleElectionTreeIovarAsyncCallBack",
            3439);
        }
      }
      *(_DWORD *)(*((void *)v4 + 17) + 589) = 0;
      *(unsigned char *)(*((void *)v4 + 17) + 552) = 0;
      v12[0] = v4;
      v12[1] = AppleBCMWLANProximityInterface::handleProxIovarAsyncCallBack;
      void v12[2] = 0;
      long long v5 = *(AppleBCMWLANCommander **)(*((void *)v4 + 17) + 960);
      unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(v4);
      v11[0] = *((void *)v4 + 17) + 552;
      v11[1] = 42;
      uint64_t result = AppleBCMWLANCommander::sendVirtualIOVarSet(v5, InterfaceId, "awdl_election_tree", (uint64_t)v11, kNoRxExpected, (uint64_t)v12, 0);
      if (result)
      {
        uint64_t v7 = result;
        uint64_t result = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v4 + 1024))(v4);
        if (result)
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)v4 + 1024))(v4);
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v4 + 1024))(v4);
            (*(void (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)v4 + 856))(v4, v7);
            return CCLogStream::logAlert(v8, "[dk] %s@%d: Unable to set awdl election tree iovar %s\n");
          }
        }
      }
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1024))(result);
      if (result)
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)v4 + 1024))(v4);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          int v10 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v4 + 1024))(v4);
          (*(void (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)v4 + 856))(v4, a3);
          return CCLogStream::logAlert(v10, "[dk] %s@%d: Error: cannot send prox iovar %s [%s]\n");
        }
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setAWDL_ELECTION_PARAMS(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::setAWDL_ELECTION_PARAMS((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::setAWDL_ELECTION_PARAMS((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::setAWDL_AWDL_ADVERTISERS(IO80211SkywalkInterface *a1, long long *a2)
{
  if (!*(_DWORD *)(*((void *)a1 + 17) + 664)) {
    return 3758097084;
  }
  uint64_t v4 = IOMallocZeroData();
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  *(_WORD *)uint64_t v4 = 0;
  long long v6 = *a2;
  long long v7 = a2[1];
  *(_OWORD *)(v4 + 32) = *(long long *)((char *)a2 + 28);
  *(_OWORD *)(v4 + 20) = v7;
  *(_OWORD *)(v4 + 4) = v6;
  *(_WORD *)(v4 + 2) = 44;
  v15[0] = a1;
  v15[1] = AppleBCMWLANProximityInterface::handleProxIovarAsyncCallBack;
  void v15[2] = 0;
  uint64_t v8 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  v14[0] = v5;
  v14[1] = 50;
  uint64_t v10 = AppleBCMWLANCommander::sendVirtualIOVarSet(v8, InterfaceId, "awdl_advertisers", (uint64_t)v14, kNoRxExpected, (uint64_t)v15, 0);
  if (v10)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v12 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        __int16 v13 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v10);
        CCLogStream::logAlert(v12, "[dk] %s@%d: Unable to set awdl_advertisers %s\n", "setAWDL_AWDL_ADVERTISERS", 2246, v13);
      }
    }
  }
  IOFreeData();
  return v10;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setAWDL_AWDL_ADVERTISERS(uint64_t a1, long long *a2)
{
  return AppleBCMWLANProximityInterface::setAWDL_AWDL_ADVERTISERS((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::setAWDL_AWDL_ADVERTISERS((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::setAWDL_ELECTION_ID(IO80211SkywalkInterface *this, uint64_t a2)
{
  *(_WORD *)(*((void *)this + 17) + 55AppleBCMWLANJoinAdapter::free(this - 3) = *(_DWORD *)(a2 + 4);
  v15[0] = this;
  v15[1] = AppleBCMWLANProximityInterface::handleElectionTreeIovarAsyncCallBack;
  void v15[2] = 0;
  if (!*(unsigned char *)(*((void *)this + 17) + 120)
    || IO80211SkywalkInterface::getInterfaceId(this) == -1
    || IO80211SkywalkInterface::getInterfaceId(this) == 255
    || IO80211SkywalkInterface::getInterfaceId(this) >= 0xC)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        int v12 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v12, "[dk] %s@%d:ERROR: %s:%u AWDL Chip interface not initialized, bailing out\n", "setAWDL_ELECTION_ID", 2269, "setAWDL_ELECTION_ID", 2269);
      }
    }
    return 0;
  }
  long long v6 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 960);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
  v14[0] = *((void *)this + 17) + 552;
  v14[1] = 42;
  uint64_t v4 = AppleBCMWLANCommander::sendVirtualIOVarSet(v6, InterfaceId, "awdl_election_tree", (uint64_t)v14, kNoRxExpected, (uint64_t)v15, 0);
  uint64_t v8 = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
  if (!v4)
  {
    if (v8)
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        __int16 v13 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlertIf(v13, 0x400uLL, "[dk] %s@%d: election_id set to %u\n", "setAWDL_ELECTION_ID", 2279, *(_DWORD *)(a2 + 4));
      }
    }
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this))
    {
      int v11 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog(v11, 0x400uLL)) {
        AppleBCMWLANProximityInterface::logElectionTree(this, "setAWDL_ELECTION_ID");
      }
    }
    return 0;
  }
  if (v8)
  {
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
      uint64_t v10 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)this + 856))(this, v4);
      CCLogStream::logAlertIf(v9, 0x400uLL, "[dk] %s@%d: Unable to set awdl election id %s\n", "setAWDL_ELECTION_ID", 2276, v10);
    }
  }
  return v4;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setAWDL_ELECTION_ID(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::setAWDL_ELECTION_ID((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::setAWDL_ELECTION_ID((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::getAWDL_ELECTION_METRIC(IO80211SkywalkInterface *a1, uint64_t a2)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v10[10] = v4;
  long long v9 = v4;
  *(_OWORD *)uint64_t v10 = v4;
  uint64_t ElectionParams = AppleBCMWLANProximityInterface::getElectionParams(a1, &v9);
  if (ElectionParams)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        long long v6 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        long long v7 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, ElectionParams);
        CCLogStream::logAlert(v6, "[dk] %s@%d: Unable to get awdl election info %s\n", "getAWDL_ELECTION_METRIC", 2298, v7);
      }
    }
  }
  else
  {
    *(_DWORD *)(a2 + 4) = *(_DWORD *)((char *)&v9 + 3);
  }
  return ElectionParams;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::getAWDL_ELECTION_METRIC(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::getAWDL_ELECTION_METRIC((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::getAWDL_ELECTION_METRIC((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::getAWDL_ELECTION_PARAMS(IO80211SkywalkInterface *a1, uint64_t a2)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v11[26] = v4;
  *(_OWORD *)int v11 = v4;
  *(_OWORD *)&v11[16] = v4;
  uint64_t ElectionParams = AppleBCMWLANProximityInterface::getElectionParams(a1, v11);
  if (ElectionParams)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        long long v6 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        long long v7 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, ElectionParams);
        CCLogStream::logAlert(v6, "[dk] %s@%d: Unable to get awdl election info %s\n", "getAWDL_ELECTION_PARAMS", 2316, v7);
      }
    }
  }
  else
  {
    int v8 = *(_DWORD *)&v11[21];
    *(unsigned char *)(a2 + 20) = v11[25];
    *(unsigned char *)(a2 + 16) = v11[0];
    *(_WORD *)(a2 + 18) = *(_WORD *)&v11[1];
    int v9 = *(_DWORD *)&v11[3];
    *(_DWORD *)(a2 + 28) = v8;
    *(_DWORD *)(a2 + 32) = v9;
    *(_DWORD *)(a2 + 22) = *(_DWORD *)&v11[15];
    *(_WORD *)(a2 + 26) = *(_WORD *)&v11[19];
  }
  return ElectionParams;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::getAWDL_ELECTION_PARAMS(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::getAWDL_ELECTION_PARAMS((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::getAWDL_ELECTION_PARAMS((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::setAWDL_ELECTION_METRIC(IO80211SkywalkInterface *a1, uint64_t a2)
{
  if (IO80211SkywalkInterface::getInterfaceId(a1) == -1
    || IO80211SkywalkInterface::getInterfaceId(a1) >= 0xC)
  {
    uint64_t v4 = 3758097090;
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        IO80211SkywalkInterface::getInterfaceId(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d: setAWDL_ELECTION_METRIC invalid interface id %d\n");
      }
    }
  }
  else
  {
    v13[0] = a1;
    v13[1] = AppleBCMWLANProximityInterface::handleProxIovarAsyncCallBack;
    void v13[2] = 0;
    *(_DWORD *)(*((void *)a1 + 17) + 555) = *(_DWORD *)(a2 + 4);
    long long v6 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
    v12[0] = *((void *)a1 + 17) + 552;
    v12[1] = 42;
    uint64_t v4 = AppleBCMWLANCommander::sendVirtualIOVarSet(v6, InterfaceId, "awdl_election_tree", (uint64_t)v12, kNoRxExpected, (uint64_t)v13, 0);
    uint64_t v8 = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    if (v4)
    {
      if (v8)
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          int v9 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          (*(void (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v4);
          CCLogStream::logAlert(v9, "[dk] %s@%d: Unable to set awdl election metric %s\n");
        }
      }
    }
    else if (v8)
    {
      uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog(v10, 0x400uLL)) {
        AppleBCMWLANProximityInterface::logElectionTree(a1, "setAWDL_ELECTION_METRIC");
      }
    }
  }
  return v4;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setAWDL_ELECTION_METRIC(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::setAWDL_ELECTION_METRIC((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::setAWDL_ELECTION_METRIC((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::setAWDL_ELECTION_RSSI_THRESHOLDS(IO80211SkywalkInterface *a1, _DWORD *a2)
{
  *(unsigned char *)(*((void *)a1 + 17) + 56AppleBCMWLANJoinAdapter::free(this - 3) = a2[1];
  *(unsigned char *)(*((void *)a1 + 17) + 562) = a2[2];
  *(unsigned char *)(*((void *)a1 + 17) + 559) = a2[3];
  *(unsigned char *)(*((void *)a1 + 17) + 561) = a2[4];
  v12[0] = a1;
  v12[1] = AppleBCMWLANProximityInterface::handleProxIovarAsyncCallBack;
  void v12[2] = 0;
  uint64_t v3 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  v11[0] = *((void *)a1 + 17) + 552;
  v11[1] = 42;
  uint64_t v5 = AppleBCMWLANCommander::sendVirtualIOVarSet(v3, InterfaceId, "awdl_election_tree", (uint64_t)v11, kNoRxExpected, (uint64_t)v12, 0);
  uint64_t v6 = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
  if (v5)
  {
    if (v6)
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        long long v7 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v8 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v5);
        CCLogStream::logAlert(v7, "[dk] %s@%d: Unable to set awdl election %s\n", "setAWDL_ELECTION_RSSI_THRESHOLDS", 2375, v8);
      }
    }
  }
  else if (v6)
  {
    int v9 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog(v9, 0x400uLL)) {
      AppleBCMWLANProximityInterface::logElectionTree(a1, "setAWDL_ELECTION_RSSI_THRESHOLDS");
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setAWDL_ELECTION_RSSI_THRESHOLDS(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANProximityInterface::setAWDL_ELECTION_RSSI_THRESHOLDS((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::setAWDL_ELECTION_RSSI_THRESHOLDS((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::getAWDL_ELECTION_RSSI_THRESHOLDS(IO80211SkywalkInterface *a1, _DWORD *a2)
{
  memset(v14, 0, 42);
  v13[0] = v14;
  v13[1] = 0x2A002A002ALL;
  uint64_t v4 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  v12[0] = v14;
  v12[1] = 42;
  uint64_t v6 = AppleBCMWLANCommander::runVirtualIOVarGet(v4, InterfaceId, "awdl_election_tree", (uint64_t)v12, (uint64_t)v13, 0);
  if (v6)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        long long v7 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v8 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v6);
        CCLogStream::logAlert(v7, "[dk] %s@%d: Unable to get awdl election tree info %s\n", "getAWDL_ELECTION_RSSI_THRESHOLDS", 2394, v8);
      }
    }
  }
  else
  {
    int v9 = SBYTE10(v14[0]);
    a2[1] = SBYTE11(v14[0]);
    a2[2] = v9;
    int v10 = SBYTE9(v14[0]);
    a2[3] = SBYTE7(v14[0]);
    a2[4] = v10;
  }
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::getAWDL_ELECTION_RSSI_THRESHOLDS(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANProximityInterface::getAWDL_ELECTION_RSSI_THRESHOLDS((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::getAWDL_ELECTION_RSSI_THRESHOLDS((IO80211SkywalkInterface *)(a1 - 128), a2);
}

void AppleBCMWLANProximityInterface::handleOobAfIovarAsyncCallBack(IO80211SkywalkInterface *a1, int a2, uint64_t a3, int a4, _WORD *address)
{
  --*(unsigned char *)(*((void *)a1 + 17) + 48);
  if (a3 == -469794537 || a3 == 0)
  {
    if (!address) {
      return;
    }
    goto LABEL_12;
  }
  if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)
    || ((*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1),
        !CCLogStream::shouldLog()))
  {
    if (!address) {
      return;
    }
    goto LABEL_11;
  }
  int v9 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
  int v10 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, a3);
  int v11 = "notNull";
  if (!address) {
    int v11 = "null";
  }
  CCLogStream::logAlert(v9, "[dk] %s@%d: Error: cannot send prox iovar %s [awdl_oob_af], # pending async flow control cmds (%d) Context %s \n", "handleOobAfIovarAsyncCallBack", 2415, v10, *(unsigned __int8 *)(*((void *)a1 + 17) + 48), v11);
  if (address)
  {
LABEL_11:
    int v12 = *(_DWORD *)address;
    __int16 v13 = address[2];
    char v14 = -38;
    IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)a1 + 17) + 64), a1, 0x45u, &v12, 7uLL, 1);
LABEL_12:
    IOFree(address, 6uLL);
  }
}

uint64_t AppleBCMWLANProximityInterface::handleSlotBssIovarAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 != -469794537 && a3 != 0)
  {
    uint64_t v6 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1024))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v6 + 1024))(v6);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        long long v7 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 1024))(v6);
        uint64_t v8 = *(const char **)(a2 + 8);
        int v9 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 856))(v6, a3);
        return CCLogStream::logAlert(v7, "[dk] %s@%d:ERROR: Cannot send P2p Coex Protection iovar %s, return %s [0x%x]\n", "handleSlotBssIovarAsyncCallBack", 2434, v8, v9, a3);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANProximityInterface::sendUnicastAFIOVar(AppleBCMWLANProximityInterface *this, iovec *a2, unsigned int a3)
{
  uint64_t v34 = 0;
  int v35 = 0;
  unint64_t v36 = 0;
  if (a3)
  {
    unint64_t v5 = 0;
    uint64_t v6 = a3;
    p_iov_leuint64_t n = &a2->iov_len;
    uint64_t v8 = a3;
    do
    {
      size_t v9 = *p_iov_len;
      p_iov_len += 2;
      v5 += v9;
      --v8;
    }
    while (v8);
    if (v5 >= 0x26)
    {
      if (v5 + 11 >= AppleBCMWLANCommander::getMaxCmdTxPayload(*(AppleBCMWLANCommander **)(*((void *)this + 17)
                                                                                          + 960)))
      {
        uint64_t v20 = 3758097128;
        if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
        {
          (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
          if (CCLogStream::shouldLog())
          {
            long long v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
            uint64_t MaxCmdTxPayload = AppleBCMWLANCommander::getMaxCmdTxPayload(*(AppleBCMWLANCommander **)(*((void *)this + 17)
                                                                                                  + 960));
            CCLogStream::logAlert(v22, "[dk] %s@%d: excessive payload length iovar_len 11 data_len %lu max %lu\n", "sendUnicastAFIOVar", 2466, v5, MaxCmdTxPayload);
            return 3758097128;
          }
        }
      }
      else
      {
        uint64_t v10 = IOMallocZeroData();
        if (v10)
        {
          uint64_t v11 = v10;
          uint64_t v12 = IOMallocZeroTyped();
          if (v12)
          {
            __int16 v13 = (_WORD *)v12;
            unsigned int v14 = 0;
            int v15 = &a2->iov_len;
            do
            {
              memcpy((void *)(v11 + v14), (const void *)*(v15 - 1), *v15);
              size_t v16 = *v15;
              v15 += 2;
              v14 += v16;
              --v6;
            }
            while (v6);
            int v17 = *(_DWORD *)(v11 + 6);
            void v13[2] = *(_WORD *)(v11 + 10);
            *(_DWORD *)__int16 v13 = v17;
            uint64_t v34 = this;
            int v35 = AppleBCMWLANProximityInterface::handleOobAfIovarAsyncCallBack;
            unint64_t v36 = v13;
            uint64_t v18 = *((void *)this + 17);
            unsigned int v19 = *(unsigned __int8 *)(v18 + 48);
            if (v19 <= 0x10)
            {
              *(unsigned char *)(v18 + 48) = v19 + 1;
              unint64_t v25 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 960);
              unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
              if ((_WORD)v5) {
                uint64_t v27 = v11;
              }
              else {
                uint64_t v27 = 0;
              }
              v33[0] = v27;
              v33[1] = (unsigned __int16)v5;
              uint64_t v20 = AppleBCMWLANCommander::sendVirtualIOVarSet(v25, InterfaceId, "awdl_oob_af", (uint64_t)v33, kNoRxExpected, (uint64_t)&v34, 0);
              if (v20)
              {
                if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
                {
                  (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
                  if (CCLogStream::shouldLog())
                  {
                    long long v31 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
                    long long v32 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)this + 17)
                                                                                                 + 64)
                                                                                   + 112))(*(void *)(*((void *)this + 17) + 64), v20);
                    CCLogStream::logAlertIf(v31, 0x400uLL, "[dk] %s@%d: Error: cannot send awdl_oob_af %s\n", "sendUnicastAFIOVar", 2500, v32);
                  }
                }
              }
            }
            else
            {
              if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
              {
                (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
                if (CCLogStream::shouldLog())
                {
                  long long v30 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
                  CCLogStream::logAlert(v30, "[dk] %s@%d:Too many async iovars in flight (%d) , rejecting awdl_oob_af\n", "sendUnicastAFIOVar", 2490, *(unsigned __int8 *)(*((void *)this + 17) + 48));
                }
              }
              uint64_t v20 = 3758097086;
              IOFree(v13, 6uLL);
            }
          }
          else if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
          {
            (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
            uint64_t v20 = 1;
            if (CCLogStream::shouldLog())
            {
              long long v29 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
              CCLogStream::logAlert(v29, "[dk] %s@%d:Error: cannot send OOBAF IOVar. MemAlloc Failed \n", "sendUnicastAFIOVar", 2476);
            }
          }
          else
          {
            uint64_t v20 = 1;
          }
          IOFreeData();
        }
        else
        {
          uint64_t v20 = 3758097086;
          if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
          {
            (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v24 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
              CCLogStream::logAlert(v24, "[dk] %s@%d: Error, unable to allocate %lu bytes of buffer memory for command\n", "sendUnicastAFIOVar", 2472, v5);
            }
          }
        }
      }
      return v20;
    }
  }
  else
  {
    unint64_t v5 = 0;
  }
  uint64_t v20 = 3758097127;
  if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *, iovec *))(*(void *)this + 1024))(this, a2))
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v28 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logAlert(v28, "[dk] %s@%d: Error, Invalid size[%lu] for OOB AF, expected >= %lu\n", "sendUnicastAFIOVar", 2461, v5, 38);
      return 3758097127;
    }
  }
  return v20;
}

uint64_t AppleBCMWLANProximityInterface::sendIOVarSetCommand(AppleBCMWLANProximityInterface *this, iovec *a2, unsigned int a3, const char *__s)
{
  LODWORD(v5) = a3;
  v33[0] = this;
  v33[1] = AppleBCMWLANProximityInterface::handleFlowControlledProxIovarAsyncCallBack;
  void v33[2] = 0;
  uint64_t v8 = 0;
  if (a3)
  {
    uint64_t v9 = a3;
    p_iov_leuint64_t n = &a2->iov_len;
    do
    {
      size_t v11 = *p_iov_len;
      p_iov_len += 2;
      v8 += v11;
      --v9;
    }
    while (v9);
  }
  unint64_t v12 = strlen(__s) + v8;
  if (v12 >= AppleBCMWLANCommander::getMaxCmdTxPayload(*(AppleBCMWLANCommander **)(*((void *)this + 17) + 960)))
  {
    uint64_t v20 = 3758097128;
    if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        long long v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        size_t v23 = strlen(__s);
        uint64_t MaxCmdTxPayload = AppleBCMWLANCommander::getMaxCmdTxPayload(*(AppleBCMWLANCommander **)(*((void *)this + 17)
                                                                                              + 960));
        CCLogStream::logAlert(v22, "[dk] %s@%d: excessive payload length iovar_len %lu data_len %lu max %lu\n", "sendIOVarSetCommand", 2519, v23, v8, MaxCmdTxPayload);
        return 3758097128;
      }
    }
  }
  else
  {
    uint64_t v13 = IOMallocZeroData();
    if (v13)
    {
      uint64_t v14 = v13;
      if (v5)
      {
        unsigned int v15 = 0;
        uint64_t v5 = v5;
        size_t v16 = &a2->iov_len;
        do
        {
          memcpy((void *)(v14 + v15), (const void *)*(v16 - 1), *v16);
          size_t v17 = *v16;
          v16 += 2;
          v15 += v17;
          --v5;
        }
        while (v5);
      }
      uint64_t v18 = *((void *)this + 17);
      unsigned int v19 = *(unsigned __int8 *)(v18 + 48);
      if (v19 <= 0x10)
      {
        *(unsigned char *)(v18 + 48) = v19 + 1;
        uint64_t v26 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 960);
        unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
        if ((_WORD)v8) {
          uint64_t v28 = v14;
        }
        else {
          uint64_t v28 = 0;
        }
        v32[0] = v28;
        v32[1] = (unsigned __int16)v8;
        uint64_t v20 = AppleBCMWLANCommander::sendVirtualIOVarSet(v26, InterfaceId, __s, (uint64_t)v32, kNoRxExpected, (uint64_t)v33, 0);
        if (v20)
        {
          if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
          {
            (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
            if (CCLogStream::shouldLog())
            {
              long long v30 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
              long long v31 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)this + 17)
                                                                                           + 64)
                                                                             + 112))(*(void *)(*((void *)this + 17) + 64), v20);
              CCLogStream::logAlertIf(v30, 0x400uLL, "[dk] %s@%d: Error: cannot send %s %s\n", "sendIOVarSetCommand", 2545, __s, v31);
            }
          }
        }
      }
      else
      {
        uint64_t v20 = 3758097086;
        if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
        {
          (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
          if (CCLogStream::shouldLog())
          {
            long long v21 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
            CCLogStream::logAlert(v21, "[dk] %s@%d:Too many async iovars in flight (%d) , rejecting %s\n", "sendIOVarSetCommand", 2536, *(unsigned __int8 *)(*((void *)this + 17) + 48), __s);
          }
        }
      }
      IOFreeData();
    }
    else
    {
      uint64_t v20 = 3758097086;
      if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          unint64_t v25 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
          CCLogStream::logAlert(v25, "[dk] %s@%d: Error, unable to allocate %lu bytes of buffer memory for command\n", "sendIOVarSetCommand", 2525, v8);
        }
      }
    }
  }
  return v20;
}

void *AppleBCMWLANProximityInterface::handleFlowControlledProxIovarAsyncCallBack(void *result, uint64_t a2, uint64_t a3)
{
  --*(unsigned char *)(result[17] + 48);
  if (a3 != -469794537 && a3 != 0)
  {
    uint64_t v6 = result;
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 1024))(result);
    if (result)
    {
      (*(void (**)(void *))(*v6 + 1024))(v6);
      uint64_t result = (void *)CCLogStream::shouldLog();
      if (result)
      {
        long long v7 = (CCLogStream *)(*(uint64_t (**)(void *))(*v6 + 1024))(v6);
        uint64_t v8 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*v6 + 856))(v6, a3);
        uint64_t v9 = *(const char **)(a2 + 8);
        if (!v9) {
          uint64_t v9 = "unknown";
        }
        return (void *)CCLogStream::logAlert(v7, "[dk] %s@%d: Error: cannot send prox iovar %s [%s], # pending async flow control cmds (%d) \n", "handleFlowControlledProxIovarAsyncCallBack", 3469, v8, v9, *(unsigned __int8 *)(v6[17] + 48));
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANProximityInterface::setAWDL_SYNC_FRAME_TEMPLATE(AppleBCMWLANProximityInterface *a1, uint64_t a2)
{
  if (!a2) {
    return 22;
  }
  uint64_t v2 = *(unsigned int *)(a2 + 4);
  if (!v2) {
    return 22;
  }
  uint64_t v3 = *(void *)(a2 + 8);
  if (!v3) {
    return 22;
  }
  v8[1] = -21846;
  v8[0] = v2;
  v9.iov_base = v8;
  v9.iov_leuint64_t n = 2;
  uint64_t v10 = v3;
  uint64_t v11 = v2;
  if (IO80211SkywalkInterface::getInterfaceId(a1) != -1
    && IO80211SkywalkInterface::getInterfaceId(a1) != 255
    && IO80211SkywalkInterface::getInterfaceId(a1) < 0xC)
  {
    return AppleBCMWLANProximityInterface::sendIOVarSetCommand(a1, &v9, 2u, "awdl_payload");
  }
  if (!(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1)) {
    return 1;
  }
  (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
  uint64_t v5 = 1;
  if (CCLogStream::shouldLog())
  {
    uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
    CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: %s:%u AWDL Chip interface not initialized, bailing out\n", "setAWDL_SYNC_FRAME_TEMPLATE", 2581, "setAWDL_SYNC_FRAME_TEMPLATE", 2581);
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setAWDL_SYNC_FRAME_TEMPLATE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::setAWDL_SYNC_FRAME_TEMPLATE((AppleBCMWLANProximityInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::setAWDL_SYNC_FRAME_TEMPLATE((AppleBCMWLANProximityInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::updateSyncParams(AppleBCMWLANProximityInterface *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      uint64_t v5 = (unsigned int *)*((void *)this + 17);
      CCLogStream::logAlertIf(v4, 0x400uLL, "[dk] %s@%d:%s ivars->fSyncEnabled %lu (masterChannel=%lu secMasterChannel=%lu awLen=%lu awPeriod=%lu)\n", "updateSyncParams", 2596, "int32_t AppleBCMWLANProximityInterface::updateSyncParams()", v5[166], v5[170], v5[171], v5[179], v5[180]);
    }
  }
  uint64_t v2 = (_DWORD *)*((void *)this + 17);
  if (!v2[170] || !v2[179] || !v2[180] || !v2[181]) {
    return 22;
  }
  return AppleBCMWLANProximityInterface::setSyncParams(this);
}

uint64_t AppleBCMWLANProximityInterface::setSyncParams(AppleBCMWLANProximityInterface *this)
{
  v11[0] = this;
  v11[1] = AppleBCMWLANProximityInterface::handleProxIovarAsyncCallBack;
  void v11[2] = 0;
  if (!*(unsigned char *)(*((void *)this + 17) + 120)
    || IO80211SkywalkInterface::getInterfaceId(this) == -1
    || IO80211SkywalkInterface::getInterfaceId(this) == 255
    || IO80211SkywalkInterface::getInterfaceId(this) >= 0xC)
  {
    if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        iovec v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v9, "[dk] %s@%d:ERROR: %s:%u AWDL Chip interface not initialized, bailing out\n", "setSyncParams", 2627, "setSyncParams", 2627);
      }
    }
    return 0;
  }
  else
  {
    long long v12 = 0u;
    long long v13 = 0u;
    int v14 = 0;
    *(_WORD *)((char *)&v12 + 1) = 36;
    uint64_t v4 = *((void *)this + 17);
    WORD4(v12) = *(_DWORD *)(v4 + 720);
    WORD5(v12) = *(_DWORD *)(v4 + 732);
    HIWORD(v12) = *(_DWORD *)(v4 + 724);
    LOWORD(v1AppleBCMWLANJoinAdapter::free(this - 3) = *(_DWORD *)(v4 + 716);
    BYTE6(v12) = *(_DWORD *)(v4 + 680);
    uint64_t v5 = *(AppleBCMWLANCommander **)(v4 + 960);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
    v10[0] = &v12;
    v10[1] = 36;
    uint64_t v2 = AppleBCMWLANCommander::sendVirtualIOVarSet(v5, InterfaceId, "awdl_sync_params", (uint64_t)v10, kNoRxExpected, (uint64_t)v11, 0);
    if (v2)
    {
      if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          long long v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
          uint64_t v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *, uint64_t))(*(void *)this
                                                                                                  + 856))(this, v2);
          CCLogStream::logAlert(v7, "[dk] %s@%d: Unable to set awdl_sync_params %s\n", "setSyncParams", 2645, v8);
        }
      }
    }
  }
  return v2;
}

uint64_t AppleBCMWLANProximityInterface::setAWDL_SYNC_PARAMS(AppleBCMWLANProximityInterface *a1, _DWORD *a2)
{
  memset(v7, 0, sizeof(v7));
  if (!a2) {
    return 8;
  }
  *(_DWORD *)(*((void *)a1 + 17) + 720) = a2[2];
  *(_DWORD *)(*((void *)a1 + 17) + 732) = a2[4];
  *(_DWORD *)(*((void *)a1 + 17) + 724) = a2[3];
  *(_DWORD *)(*((void *)a1 + 17) + 716) = a2[1];
  *(_DWORD *)(*((void *)a1 + 17) + 660) = a2[5];
  if ((*(uint64_t (**)(void))(*(void *)a1 + 1024))())
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v6 = (unsigned int *)*((void *)a1 + 17);
      CCLogStream::logAlert(v5, "[dk] %s@%d: +++ [%s] aw_period %lu aw_len %lu aw_ext_len %lu adv_period %lu as non election master %lu\n", "setAWDL_SYNC_PARAMS", 2667, (const char *)v7, v6[180], v6[179], v6[181], v6[183], v6[165]);
    }
  }
  *(_DWORD *)(*((void *)a1 + 17) + 856) = 0;
  *(_DWORD *)(*((void *)a1 + 17) + 860) = 0;
  *(_DWORD *)(*((void *)a1 + 17) + 864) = 0;
  *(_DWORD *)(*((void *)a1 + 17) + 668) = 2;
  uint64_t v3 = (_DWORD *)*((void *)a1 + 17);
  if (v3[170] && v3[179] && v3[180] && v3[181]) {
    return AppleBCMWLANProximityInterface::setSyncParams(a1);
  }
  else {
    return 22;
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setAWDL_SYNC_PARAMS(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANProximityInterface::setAWDL_SYNC_PARAMS((AppleBCMWLANProximityInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::setAWDL_SYNC_PARAMS((AppleBCMWLANProximityInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::setPSF_DWELL(IO80211SkywalkInterface *this, uint64_t a2)
{
  v11[0] = this;
  v11[1] = AppleBCMWLANProximityInterface::handleProxIovarAsyncCallBack;
  void v11[2] = 0;
  if (a2)
  {
    uint64_t v12 = 0;
    int v3 = *(_DWORD *)(a2 + 8);
    WORD2(v12) = *(_DWORD *)(a2 + 4);
    HIWORD(v12) = v3;
    uint64_t v4 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 960);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
    v10[0] = &v12;
    v10[1] = 8;
    uint64_t v6 = AppleBCMWLANCommander::sendVirtualIOVarSet(v4, InterfaceId, "awdl_psf_dwell", (uint64_t)v10, kNoRxExpected, (uint64_t)v11, 0);
    if (v6)
    {
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          long long v7 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
          (*(void (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)this + 856))(this, v6);
          CCLogStream::logAlert(v7, "[dk] %s@%d: Unable to set awdl_psf_dwell %s\n");
        }
      }
    }
  }
  else
  {
    uint64_t v6 = 3758097090;
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        iovec v9 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v9, "[dk] %s@%d:setPSF_DWELL data is NULL\n");
      }
    }
  }
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setPSF_DWELL(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::setPSF_DWELL((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::setPSF_DWELL((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::setAWDL_SYNC_STATE(IO80211SkywalkInterface *a1, uint64_t a2)
{
  long long v19 = 0uLL;
  memset(v20, 0, sizeof(v20));
  *(_WORD *)((char *)&v19 + 1) = *(_DWORD *)(*((void *)a1 + 17) + 660);
  int v4 = *(_DWORD *)(a2 + 4);
  if (v4 == 1)
  {
    int v5 = 2;
    goto LABEL_6;
  }
  if (v4 != 2)
  {
    if (v4 == 3)
    {
      int v5 = 1;
LABEL_6:
      LOBYTE(v19) = v5;
      goto LABEL_11;
    }
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        unsigned int v15 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v15, "[dk] %s@%d: unsupported mode %u\n", "setAWDL_SYNC_STATE", 2734, *(_DWORD *)(a2 + 4));
      }
    }
  }
  int v5 = 0;
LABEL_11:
  if (*(unsigned char *)(a2 + 20))
  {
    v5 |= *(unsigned __int8 *)(a2 + 20);
    LOBYTE(v19) = v5;
  }
  int v6 = *(_DWORD *)(a2 + 16);
  char v18 = v6;
  if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
  {
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v12 = "SLAVE";
      if (v5 == 1) {
        uint64_t v12 = "NE_MASTER";
      }
      if (v5 == 2) {
        uint64_t v12 = "MASTER";
      }
      CCLogStream::logAlertIf(v11, 0x400uLL, "[dk] %s@%d: set awdl opmode %u %s ne_bcast_period %lu\n", "setAWDL_SYNC_STATE", 2743, v6, v12, *(unsigned int *)(*((void *)a1 + 17) + 660));
    }
  }
  *(_DWORD *)((char *)&v19 + AppleBCMWLANJoinAdapter::free(this - 3) = *(_DWORD *)(a2 + 8);
  *(_WORD *)((char *)&v19 + 7) = *(_WORD *)(a2 + 12);
  v17[0] = a1;
  v17[1] = AppleBCMWLANProximityInterface::handleProxIovarAsyncCallBack;
  unsigned char v17[2] = 0;
  long long v7 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  v16[0] = &v18;
  v16[1] = 28;
  uint64_t v9 = AppleBCMWLANCommander::sendVirtualIOVarSet(v7, InterfaceId, "awdl_opmode", (uint64_t)v16, kNoRxExpected, (uint64_t)v17, 0);
  if (v9)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        long long v13 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        int v14 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v9);
        CCLogStream::logAlert(v13, "[dk] %s@%d: Unable to set awdl opmode %s\n", "setAWDL_SYNC_STATE", 2755, v14);
      }
    }
  }
  return v9;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setAWDL_SYNC_STATE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::setAWDL_SYNC_STATE((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::setAWDL_SYNC_STATE((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::setAWDL_SYNC_ENABLED(AppleBCMWLANProximityInterface *a1, uint64_t a2)
{
  if (AppleBCMWLANCore::isOpModeAllowed(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64), 2u))
  {
    return AppleBCMWLANProximityInterface::setSYNC_ENABLED_internal(a1, a2);
  }
  else
  {
    if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:SoftAP interface is UP, hence cannot set APPLE80211_IOC_AWDL_SYNC_ENABLED\n", "setAWDL_SYNC_ENABLED", 2765);
      }
    }
    return 16;
  }
}

uint64_t AppleBCMWLANProximityInterface::setSYNC_ENABLED_internal(AppleBCMWLANProximityInterface *a1, uint64_t a2)
{
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  *(_OWORD *)__str = 0u;
  long long v20 = 0u;
  if (!a2) {
    return 3758097090;
  }
  if (*(_DWORD *)(a2 + 8))
  {
    int v4 = snprintf(__str, 0x7FuLL, "set AWDL->ON pm %u minExt %u MasterChan %u/%u step %u [", *(_DWORD *)(*((void *)a1 + 17) + 656), *(_DWORD *)(*((void *)a1 + 17) + 808), *(_DWORD *)(*((void *)a1 + 17) + 680), *(_DWORD *)(*((void *)a1 + 17) + 684), *(unsigned __int8 *)(*((void *)a1 + 17) + 131));
    uint64_t v5 = *((void *)a1 + 17);
    LODWORD(v6) = *(unsigned __int8 *)(v5 + 129);
    if (*(unsigned char *)(v5 + 129))
    {
      unint64_t v7 = 0;
      uint64_t v8 = 140;
      do
      {
        int v9 = 127 - v4;
        if (v4 >= 127) {
          int v9 = 0;
        }
        if (v7 == v6 - 1) {
          uint64_t v10 = (const char *)&unk_10029A2CA;
        }
        else {
          uint64_t v10 = " ";
        }
        v4 += snprintf(&__str[v4], v9, "%u%s", *(_DWORD *)(v5 + v8), v10);
        ++v7;
        uint64_t v5 = *((void *)a1 + 17);
        unint64_t v6 = *(unsigned __int8 *)(v5 + 129);
        v8 += 12;
      }
      while (v7 < v6);
    }
    int v11 = 127 - v4;
    if (v4 >= 127) {
      int v11 = 0;
    }
    snprintf(&__str[v4], v11, "]\n");
    if ((AppleBCMWLANCore::isConcurrencyEnabled(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64)) & 1) != 0
      && AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(*((void *)a1 + 17) + 64), 4))
    {
      AppleBCMWLANCore::setSoftAPPowerState(*(void *)(*((void *)a1 + 17) + 64), 1u, 6u);
    }
    if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        size_t v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logInfo(v17, "[dk] %s@%d:%s", "setSYNC_ENABLED_internal", 2799, __str);
      }
    }
    if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logWarn(v12, " AWDL MODE: ON \n");
      }
    }
  }
  else if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1))
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      char v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logWarn(v18, " AWDL MODE: OFF \n");
    }
  }
  uint64_t v13 = AppleBCMWLANProximityInterface::doSetSyncState(a1, *(_DWORD *)(a2 + 8) != 0);
  if (!v13) {
    AppleBCMWLANCore::setConcurrencyState(*(void **)(*((void *)a1 + 17) + 64), 2, *(_DWORD *)(a2 + 8) != 0);
  }
  uint64_t v14 = *((void *)a1 + 17);
  if (*(_DWORD *)(a2 + 8))
  {
    char v15 = 1;
    AppleBCMWLANCore::setTXQueueEnabled(*(void *)(v14 + 64), 1);
  }
  else
  {
    char v15 = 0;
    *(_DWORD *)(v14 + 668) = 4;
  }
  *(unsigned char *)(*((void *)a1 + 17) + 121) = v15;
  return v13;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setAWDL_SYNC_ENABLED(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::setAWDL_SYNC_ENABLED((AppleBCMWLANProximityInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::setAWDL_SYNC_ENABLED((AppleBCMWLANProximityInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::setCHANNEL(AppleBCMWLANProximityInterface *a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 8);
  AppleBCMWLANProximityInterface::setChannel(a1, v3);
  if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1))
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlertIf(v5, 0x400uLL, "[dk] %s@%d: -> %u\n", "setCHANNEL", 2837, v3);
    }
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setCHANNEL(uint64_t a1, uint64_t a2)
{
  return 0;
}

{
  AppleBCMWLANProximityInterface::setCHANNEL((AppleBCMWLANProximityInterface *)(a1 - 128), a2);
  return 0;
}

uint64_t AppleBCMWLANProximityInterface::setAWDL_MASTER_CHANNEL(AppleBCMWLANProximityInterface *a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 4);
  if (v3)
  {
    *(_DWORD *)(*((void *)a1 + 17) + 680) = v3;
  }
  else if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1))
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      unint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v6, "[dk] %s@%d: Trying to set channel 0 as master channel \n", "setAWDL_MASTER_CHANNEL", 2849);
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1))
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlertIf(v5, 0x400uLL, "[dk] %s@%d: channel %lu secondary %lu\n", "setAWDL_MASTER_CHANNEL", 2851, *(unsigned int *)(*((void *)a1 + 17) + 680), *(unsigned int *)(*((void *)a1 + 17) + 684));
    }
  }
  AppleBCMWLANProximityInterface::updateSyncParams(a1);
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setAWDL_MASTER_CHANNEL(uint64_t a1, uint64_t a2)
{
  return 0;
}

{
  AppleBCMWLANProximityInterface::setAWDL_MASTER_CHANNEL((AppleBCMWLANProximityInterface *)(a1 - 128), a2);
  return 0;
}

uint64_t AppleBCMWLANProximityInterface::getAWDL_SECONDARY_MASTER_CHANNEL(IO80211SkywalkInterface *a1, uint64_t a2)
{
  int v11 = 0;
  v10[0] = &v11;
  v10[1] = 0x400040004;
  int v4 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  v9[0] = &v11;
  v9[1] = 4;
  uint64_t result = AppleBCMWLANCommander::runVirtualIOVarGet(v4, InterfaceId, "awdl_osoc_chan", (uint64_t)v9, (uint64_t)v10, 0);
  if (result)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlertIf(v8, 0x400uLL, "[dk] %s@%d: Unable to get awdl_osoc_chan\n", "getAWDL_SECONDARY_MASTER_CHANNEL", 2866);
      }
    }
    return 97;
  }
  else
  {
    int v7 = v11;
    *(_DWORD *)(*((void *)a1 + 17) + 684) = v11;
    *(_DWORD *)(a2 + 4) = v7;
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::getAWDL_SECONDARY_MASTER_CHANNEL(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::getAWDL_SECONDARY_MASTER_CHANNEL((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::getAWDL_SECONDARY_MASTER_CHANNEL((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::getAWDL_AF_SECONDARY_PAYLOAD_CAPABILITIES(IO80211SkywalkInterface *a1, uint64_t a2)
{
  uint64_t v4 = IOMallocZeroTyped();
  if (!v4) {
    return 12;
  }
  uint64_t v5 = (unsigned __int8 *)v4;
  v19[0] = v4;
  v19[1] = 0x800080008;
  unint64_t v6 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  v18[0] = v5;
  v18[1] = 8;
  uint64_t v8 = AppleBCMWLANCommander::runVirtualIOVarGet(v6, InterfaceId, "awdl_cap", (uint64_t)v18, (uint64_t)v19, 0);
  uint64_t v9 = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
  if (v8)
  {
    if (v9)
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        int v11 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v8);
        int v12 = IO80211SkywalkInterface::getInterfaceId(a1);
        CCLogStream::logCrit(v10, "[dk] %s@%d: Failed (%s) to get awdl_cap for AWDL if %d\n", "getAWDL_AF_SECONDARY_PAYLOAD_CAPABILITIES", 2892, v11, v12);
      }
    }
  }
  else
  {
    if (v9)
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        char v15 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlertIf(v15, 0x400uLL, "[dk] %s@%d: awdl_cap 0x%X\n", "getAWDL_AF_SECONDARY_PAYLOAD_CAPABILITIES", 2894, v5[4]);
      }
    }
    *(_DWORD *)a2 = *(_DWORD *)v5;
    unsigned __int8 v13 = v5[4];
    *(unsigned char *)(a2 + 4) = v13;
    if (v13)
    {
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          size_t v16 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logWarnIf(v16, 0x400uLL, "[dk] %s@%d: awdl_cap 0x%X, Supports APPLE80211_AWDL_CAP_SEC_PAYLOAD\n", "getAWDL_AF_SECONDARY_PAYLOAD_CAPABILITIES", 2900, v5[4]);
        }
      }
      *(unsigned char *)(*((void *)a1 + 17) + 104) = 1;
      unsigned __int8 v13 = *(unsigned char *)(a2 + 4);
    }
    if ((v13 & 2) != 0)
    {
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          size_t v17 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logWarnIf(v17, 0x400uLL, "[dk] %s@%d: awdl_cap 0x%X, supports APPLE80211_AWDL_CAP_CCA_STATS\n", "getAWDL_AF_SECONDARY_PAYLOAD_CAPABILITIES", 2905, v5[4]);
        }
      }
      *(unsigned char *)(*((void *)a1 + 17) + 105) = 1;
    }
  }
  IOFree(v5, 8uLL);
  return v8;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::getAWDL_AF_SECONDARY_PAYLOAD_CAPABILITIES(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::getAWDL_AF_SECONDARY_PAYLOAD_CAPABILITIES((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::getAWDL_AF_SECONDARY_PAYLOAD_CAPABILITIES((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::setAWDL_SECONDARY_MASTER_CHANNEL(IO80211SkywalkInterface *a1, uint64_t a2)
{
  int v12 = *(_DWORD *)(a2 + 4);
  v11[0] = a1;
  v11[1] = AppleBCMWLANProximityInterface::handleProxIovarAsyncCallBack;
  void v11[2] = 0;
  int v3 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  v10[0] = &v12;
  v10[1] = 4;
  uint64_t v5 = AppleBCMWLANCommander::sendVirtualIOVarSet(v3, InterfaceId, "awdl_osoc_chan", (uint64_t)v10, kNoRxExpected, (uint64_t)v11, 0);
  if (v5)
  {
    *(_DWORD *)(*((void *)a1 + 17) + 684) = 0;
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        unint64_t v6 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        int v7 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v5);
        CCLogStream::logAlert(v6, "[dk] %s@%d: Unable to set awdl secondary channel id %s\n", "setAWDL_SECONDARY_MASTER_CHANNEL", 2930, v7);
      }
    }
  }
  else
  {
    *(_DWORD *)(*((void *)a1 + 17) + 684) = v12;
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlertIf(v9, 0x400uLL, "[dk] %s@%d: channel %lu secondary %lu\n", "setAWDL_SECONDARY_MASTER_CHANNEL", 2935, *(unsigned int *)(*((void *)a1 + 17) + 680), *(unsigned int *)(*((void *)a1 + 17) + 684));
      }
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setAWDL_SECONDARY_MASTER_CHANNEL(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::setAWDL_SECONDARY_MASTER_CHANNEL((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::setAWDL_SECONDARY_MASTER_CHANNEL((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::getAWDL_MASTER_CHANNEL(IO80211SkywalkInterface *a1, uint64_t a2)
{
  int v18 = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  v15[0] = &v16;
  v15[1] = 0x2400240024;
  uint64_t v4 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  v14[0] = &v16;
  v14[1] = 36;
  if (AppleBCMWLANCommander::runVirtualIOVarGet(v4, InterfaceId, "awdl_sync_params", (uint64_t)v14, (uint64_t)v15, 0))
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v12 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v12, "[dk] %s@%d: Unable to get awdl_sync_params\n", "getAWDL_MASTER_CHANNEL", 2970);
      }
    }
    return 97;
  }
  else
  {
    int v7 = (unsigned __int16)v17;
    if ((_WORD)v17)
    {
      int v8 = WORD5(v16);
      if (WORD5(v16))
      {
        int v9 = HIWORD(v16);
        if (HIWORD(v16))
        {
          uint64_t result = 0;
          *(_DWORD *)(*((void *)a1 + 17) + 720) = WORD4(v16);
          *(_DWORD *)(*((void *)a1 + 17) + 732) = v8;
          *(_DWORD *)(*((void *)a1 + 17) + 724) = v9;
          *(_DWORD *)(*((void *)a1 + 17) + 716) = v7;
          *(_DWORD *)(*((void *)a1 + 17) + 680) = BYTE6(v16);
          *(_DWORD *)(a2 + 4) = *(_DWORD *)(*((void *)a1 + 17) + 680);
          return result;
        }
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            unsigned __int8 v13 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            CCLogStream::logAlert(v13, "[dk] %s@%d: Zero AWExt Invalid aw_ext_length\n");
          }
        }
      }
      else if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          int v11 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logAlert(v11, "[dk] %s@%d: Zero AWExt Invalid action_frame_period\n");
        }
      }
    }
    else if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v10, "[dk] %s@%d: Zero AWExt Invalid aw_cmn_length\n");
      }
    }
    return 22;
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::getAWDL_MASTER_CHANNEL(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::getAWDL_MASTER_CHANNEL((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::getAWDL_MASTER_CHANNEL((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::setAWDL_ENCRYPTION_KEYS(IO80211SkywalkInterface *a1, uint64_t a2)
{
  int v13 = 0;
  memset(v12, 0, sizeof(v12));
  if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
  {
    uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    CCLogStream::shouldLog(v4, 0x800uLL);
  }
  uint64_t v5 = mapAppleKeyToBcomKey((uint64_t)v12, a2);
  if (v5)
  {
    uint64_t v6 = v5;
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v7 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        int v8 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)a1 + 17) + 64)
                                                                      + 112))(*(void *)(*((void *)a1 + 17) + 64), v6);
        CCLogStream::logCrit(v7, "[dk] %s@%d: mapAppleKeyToBcomKey() failed, error %s\n", "setAWDL_ENCRYPTION_KEYS", 3011, v8);
      }
    }
  }
  else
  {
    uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 17) + 64) + 88))(*(void *)(*((void *)a1 + 17) + 64));
    if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 136))(v9)) {
      return AppleBCMWLANProximityInterface::programKeyAsync(a1, (uint64_t)v12);
    }
    else {
      return AppleBCMWLANProximityInterface::programKeySync(a1, (uint64_t)v12);
    }
  }
  return v6;
}

uint64_t AppleBCMWLANProximityInterface::programKeyAsync(IO80211SkywalkInterface *a1, uint64_t a2)
{
  if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
  {
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v9, "[dk] %s@%d:Setting AWDL keys asynchronously\n", "programKeyAsync", 3050);
    }
  }
  if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
  {
    uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    CCLogStream::shouldLog(v4, 0x800uLL);
  }
  v13[0] = a1;
  v13[1] = AppleBCMWLANProximityInterface::handleProxIovarAsyncCallBack;
  void v13[2] = 0;
  uint64_t v5 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  v12[0] = a2;
  v12[1] = 164;
  uint64_t v7 = AppleBCMWLANCommander::sendVirtualIOVarSet(v5, InterfaceId, "wsec_key", (uint64_t)v12, kNoRxExpected, (uint64_t)v13, 0);
  if (v7)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        int v11 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)a1 + 17) + 64)
                                                                       + 112))(*(void *)(*((void *)a1 + 17) + 64), v7);
        CCLogStream::logCrit(v10, "[dk] %s@%d: WLC_SET_KEY() failed, error %s\n", "programKeyAsync", 3061, v11);
      }
    }
  }
  return v7;
}

uint64_t AppleBCMWLANProximityInterface::programKeySync(IO80211SkywalkInterface *a1, uint64_t a2)
{
  if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
  {
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v9, "[dk] %s@%d:Setting AWDL keys synchronously\n", "programKeySync", 3032);
    }
  }
  if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
  {
    uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    CCLogStream::shouldLog(v4, 0x800uLL);
  }
  uint64_t v5 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  v13[0] = a2;
  v13[1] = 164;
  uint64_t v7 = AppleBCMWLANCommander::runVirtualIOVarSet(v5, InterfaceId, "wsec_key", (uint64_t)v13, 0, 0);
  if (v7)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        int v11 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v7);
        int v12 = IO80211SkywalkInterface::getInterfaceId(a1);
        CCLogStream::logCrit(v10, "[dk] %s@%d: Failed (%s) setting keys for AWDL if %d\n", "programKeySync", 3041, v11, v12);
      }
    }
  }
  return v7;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setAWDL_ENCRYPTION_KEYS(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::setAWDL_ENCRYPTION_KEYS((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::setAWDL_ENCRYPTION_KEYS((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::getAWDL_ENCRYPTION_TYPE(IO80211SkywalkInterface *a1, uint64_t a2)
{
  unsigned int v13 = 0;
  unsigned int v14 = -1431655766;
  v12[0] = &v14;
  v12[1] = 0x400040004;
  uint64_t v4 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  v11[0] = &v14;
  v11[1] = 4;
  uint64_t v6 = AppleBCMWLANCommander::runVirtualIOVarGet(v4, InterfaceId, "wsec", (uint64_t)v11, (uint64_t)v12, 0);
  if (v6)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        int v8 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v6);
        int v9 = IO80211SkywalkInterface::getInterfaceId(a1);
        CCLogStream::logCrit(v7, "[dk] %s@%d: Failed (%s) getting encryption for AWDL if %d\n", "getAWDL_ENCRYPTION_TYPE", 3076, v8, v9);
      }
    }
  }
  else
  {
    mapBcomCryptoAlgToAppleCipher(&v13, v14);
    *(_DWORD *)(a2 + 4) = v13;
  }
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::getAWDL_ENCRYPTION_TYPE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::getAWDL_ENCRYPTION_TYPE((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::getAWDL_ENCRYPTION_TYPE((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::setAWDL_ENCRYPTION_TYPE(IO80211SkywalkInterface *a1, uint64_t a2)
{
  unsigned int v11 = 0;
  mapAppleCipherToBcomCryptoAlg(&v11, *(_DWORD *)(a2 + 4));
  int v3 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  v10[0] = &v11;
  v10[1] = 4;
  uint64_t v5 = AppleBCMWLANCommander::runVirtualIOVarSet(v3, InterfaceId, "wsec", (uint64_t)v10, 0, 0);
  if (v5)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        int v8 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v5);
        int v9 = IO80211SkywalkInterface::getInterfaceId(a1);
        CCLogStream::logCrit(v7, "[dk] %s@%d: Failed (%s) setting encryption for AWDL if %d\n", "setAWDL_ENCRYPTION_TYPE", 3096, v8, v9);
      }
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setAWDL_ENCRYPTION_TYPE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::setAWDL_ENCRYPTION_TYPE((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::setAWDL_ENCRYPTION_TYPE((IO80211SkywalkInterface *)(a1 - 128), a2);
}

BOOL AppleBCMWLANProximityInterface::isRTGPeer(AppleBCMWLANProximityInterface *this, char *__s1, size_t __n)
{
  size_t v4 = __n;
  return !strncmp(__s1, "ensemble", __n)
      || !strncmp(__s1, "MPRemoteCamera", v4)
      || !strncmp(__s1, "RemoteCamera", v4)
      || !strncmp(__s1, "TVRemoteCamera", v4)
      || strncmp(__s1, "RemoteScreen", v4) == 0;
}

uint64_t AppleBCMWLANProximityInterface::setAWDL_RTG_PEER_STATS_CONFIG(IO80211SkywalkInterface *a1, uint64_t a2)
{
  if (a2)
  {
    if (*(unsigned char *)a2 == 1)
    {
      AppleBCMWLANCore::reportPerPeerTxPerAndLatency(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64), (ether_addr *)(a2 + 4), *(unsigned char *)(a2 + 10), *(_DWORD *)(a2 + 12));
    }
    else if (!*(unsigned char *)a2)
    {
      BOOL v3 = *(_WORD *)(a2 + 2) != 0;
      size_t v4 = *(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64);
      int v5 = *(unsigned __int8 *)(a2 + 1);
      unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
      AppleBCMWLANCore::configPerPeerStats(v4, v3, v5, InterfaceId, (ether_addr *)(a2 + 4));
    }
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setAWDL_RTG_PEER_STATS_CONFIG(uint64_t a1, uint64_t a2)
{
  return 0;
}

{
  AppleBCMWLANProximityInterface::setAWDL_RTG_PEER_STATS_CONFIG((IO80211SkywalkInterface *)(a1 - 128), a2);
  return 0;
}

uint64_t AppleBCMWLANProximityInterface::setAWDL_PEER_TRAFFIC_REGISTRATION(IO80211SkywalkInterface *a1, uint64_t a2)
{
  int v36 = 0;
  size_t v4 = (char *)(a2 + 16);
  if (!strncmp((const char *)(a2 + 16), "CARPLAY_UUID", *(unsigned int *)(a2 + 12)))
  {
    uint64_t v7 = *((void *)a1 + 17);
    if (*(_DWORD *)(a2 + 168)) {
      *(unsigned char *)(v7 + 92) = 1;
    }
    else {
      *(unsigned char *)(v7 + 92) = 0;
    }
  }
  else
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        long long v29 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v29, "[dk] %s@%d:%s: set %s data->active %d\n", "setAWDL_PEER_TRAFFIC_REGISTRATION", 3146, "setAWDL_PEER_TRAFFIC_REGISTRATION", v4, *(_DWORD *)(a2 + 168));
      }
    }
    size_t v5 = *(unsigned int *)(a2 + 12);
    if (strncmp(v4, "wifid-assisted-discovery", v5))
    {
      if (!strncmp(v4, "sidecar", v5)
        || !strncmp(v4, "rtmode", v5)
        || (uint64_t v6 = (AppleBCMWLANProximityInterface *)strncmp(v4, "airplay", v5), !v6))
      {
        uint64_t v8 = *((void *)a1 + 17);
        if (!*(_DWORD *)(a2 + 168))
        {
          if (*(unsigned char *)(v8 + 544))
          {
            uint64_t v22 = *(void *)(v8 + 112);
            if (v22) {
              (*(void (**)(uint64_t, void))(*(void *)v22 + 1352))(v22, 0);
            }
          }
          AppleBCMWLANProximityInterface::setLowLatencyTrafficState((uint64_t)a1, 0);
          size_t v23 = *(unsigned int *)(a2 + 12);
          if (!strncmp(v4, "airplay", v23)) {
            *(unsigned char *)(*((void *)a1 + 17) + 9AppleBCMWLANJoinAdapter::free(this - 3) = 0;
          }
          if (!strncmp(v4, "sidecar", v23))
          {
            *(unsigned char *)(*((void *)a1 + 17) + 94) = 0;
            AppleBCMWLANTxPowerManager::dynTxSDBStopUpdate(*(AppleBCMWLANCore ****)(*((void *)a1 + 17) + 992), 0);
          }
          AppleBCMWLANCore::restore6GNegativeBoost(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64), 1);
          char v15 = *(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64);
          int v16 = 0;
          goto LABEL_47;
        }
        if (*(void *)(v8 + 112))
        {
          BOOL v9 = IOParseBootArgNumber("wlan.llw.awdlbssid", &v36, 4);
          uint64_t v10 = *((void *)a1 + 17);
          uint64_t v11 = *(void *)(v10 + 112);
          uint64_t v12 = v10 + 600;
          if (v9 && v36 != 0) {
            uint64_t v13 = v12;
          }
          else {
            uint64_t v13 = a2 + 4;
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 1352))(v11, v13);
        }
        AppleBCMWLANProximityInterface::setLowLatencyTrafficState((uint64_t)a1, 1);
        *(_DWORD *)(*((void *)a1 + 17) + 548) = *(unsigned __int16 *)(a2 + 176);
        size_t v14 = *(unsigned int *)(a2 + 12);
        if (!strncmp(v4, "airplay", v14)) {
          *(unsigned char *)(*((void *)a1 + 17) + 9AppleBCMWLANJoinAdapter::free(this - 3) = 1;
        }
        if (!strncmp(v4, "sidecar", v14))
        {
          *(unsigned char *)(*((void *)a1 + 17) + 94) = 1;
          AppleBCMWLANTxPowerManager::dynTxSDBStartUpdate(*(AppleBCMWLANCore ****)(*((void *)a1 + 17) + 992), 0);
        }
LABEL_24:
        AppleBCMWLANCore::set6GNegativeBoost(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64), 1);
        char v15 = *(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64);
        int v16 = 1;
LABEL_47:
        AppleBCMWLANCore::setBTMRejection(v15, v16);
        return 0;
      }
      if (AppleBCMWLANProximityInterface::isRTGPeer(v6, v4, v5))
      {
        if (*(_DWORD *)(a2 + 168))
        {
          AppleBCMWLANProximityInterface::setLowLatencyTrafficState((uint64_t)a1, 1);
          goto LABEL_24;
        }
        uint64_t v27 = *((void *)a1 + 17);
        if (*(unsigned char *)(v27 + 544))
        {
          uint64_t v28 = *(void *)(v27 + 112);
          if (v28) {
            (*(void (**)(uint64_t, void))(*(void *)v28 + 1352))(v28, 0);
          }
        }
        AppleBCMWLANProximityInterface::setLowLatencyTrafficState((uint64_t)a1, 0);
      }
      else
      {
        if (strncmp(v4, "airplay-connectivity-check", v5)) {
          return 0;
        }
        if (*(_DWORD *)(a2 + 168))
        {
          long long v25 = a1;
          int v26 = 1;
LABEL_57:
          AppleBCMWLANProximityInterface::configureFWForP2PRealtime(v25, v26);
          return 0;
        }
      }
      long long v25 = a1;
      int v26 = 0;
      goto LABEL_57;
    }
    v35[0] = a1;
    v35[1] = AppleBCMWLANProximityInterface::handleProxIovarAsyncCallBack;
    void v35[2] = 0;
    if (AppleBCMWLANCore::checkForRangingEnabled(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64))
      && AppleBCMWLANCore::getFirmwareInterfaceVersion(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64)) <= 4)
    {
      uint64_t v37 = 9;
      if (*(_DWORD *)(a2 + 168)) {
        HIDWORD(v37) = 1;
      }
      long long v17 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
      long long v33 = &v37;
      uint64_t v34 = 8;
      uint64_t v18 = AppleBCMWLANCommander::sendIOVarSet(v17, (uint64_t)"btc_flags");
      if (v18)
      {
        uint64_t v19 = v18;
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            long long v31 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            long long v32 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)a1 + 17) + 64)
                                                                           + 112))(*(void *)(*((void *)a1 + 17) + 64), v19);
            CCLogStream::logAlert(v31, "[dk] %s@%d: Error toggling btc_flags for ranging: %s\n", "setAWDL_PEER_TRAFFIC_REGISTRATION", 3160, v32);
          }
        }
      }
    }
    if (!*(_DWORD *)(a2 + 168))
    {
      LODWORD(v37) = 0;
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          long long v30 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logNotice(v30, "[dk] %s@%d: Assisted discovery teardown: clearing all keys\n", "setAWDL_PEER_TRAFFIC_REGISTRATION", 3167);
        }
      }
      long long v20 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
      unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
      long long v33 = &v37;
      uint64_t v34 = 4;
      AppleBCMWLANCommander::sendVirtualIOVarSet(v20, InterfaceId, "wsec", (uint64_t)&v33, kNoRxExpected, (uint64_t)v35, 0);
    }
  }
  return 0;
}

uint64_t AppleBCMWLANProximityInterface::setLowLatencyTrafficState(uint64_t this, int a2)
{
  char v2 = a2;
  uint64_t v3 = *(void *)(this + 136);
  if (*(unsigned __int8 *)(v3 + 544) != a2)
  {
    uint64_t v4 = this;
    char v5 = a2;
    this = AppleBCMWLANCore::postMessageInfra(*(AppleBCMWLANCore **)(v3 + 64), 0xD0u, &v5, 1uLL);
    uint64_t v3 = *(void *)(v4 + 136);
  }
  *(unsigned char *)(v3 + 544) = v2;
  return this;
}

uint64_t AppleBCMWLANProximityInterface::configureFWForP2PRealtime(AppleBCMWLANProximityInterface *this, int a2)
{
  uint64_t v3 = *(AppleBCMWLANCore **)(*((void *)this + 17) + 64);
  if (a2)
  {
    int v4 = 1;
    AppleBCMWLANCore::set6GNegativeBoost(v3, 1);
  }
  else
  {
    AppleBCMWLANCore::restore6GNegativeBoost(v3, 1);
    int v4 = 0;
  }
  char v5 = *(AppleBCMWLANCore **)(*((void *)this + 17) + 64);
  return AppleBCMWLANCore::setBTMRejection(v5, v4);
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setAWDL_PEER_TRAFFIC_REGISTRATION(uint64_t a1, uint64_t a2)
{
  return 0;
}

{
  AppleBCMWLANProximityInterface::setAWDL_PEER_TRAFFIC_REGISTRATION((IO80211SkywalkInterface *)(a1 - 128), a2);
  return 0;
}

uint64_t AppleBCMWLANProximityInterface::setMacAddress(AppleBCMWLANProximityInterface *this, ether_addr *a2)
{
  uint64_t v3 = *((void *)this + 17);
  if (*(_DWORD *)(v3 + 664) || *(unsigned char *)(v3 + 1104))
  {
    uint64_t v4 = 3758097109;
    if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *, ether_addr *))(*(void *)this + 1024))(this, a2))
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        size_t v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v14, "[dk] %s@%d:Cannot update MAC address because sync state: %s CreatingChipIF %s");
      }
    }
    return v4;
  }
  if (!*(unsigned char *)(v3 + 120))
  {
LABEL_13:
    uint64_t Bus = AppleBCMWLANCore::getBus(*(AppleBCMWLANCore **)(v3 + 64));
    uint64_t v12 = (const OSMetaClassBase *)(*(uint64_t (**)(uint64_t))(*(void *)Bus + 752))(Bus);
    uint64_t v13 = OSMetaClassBase::safeMetaCast(v12, (const OSMetaClass *)gAppleBCMWLANBusSkywalkMetaClass);
    ((void (*)(OSMetaClassBase *, AppleBCMWLANProximityInterface *))v13->__vftable[1].Dispatch)(v13, this);
    ((void (*)(OSMetaClassBase *, AppleBCMWLANProximityInterface *))v13->__vftable[1].isEqualTo)(v13, this);
    return 0;
  }
  uint64_t v7 = *(AppleBCMWLANCommander **)(v3 + 960);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
  v15[0] = a2;
  v15[1] = 6;
  uint64_t v9 = AppleBCMWLANCommander::runVirtualIOVarSet(v7, InterfaceId, "cur_etheraddr", (uint64_t)v15, 0, 0);
  if (!v9)
  {
    uint64_t v3 = *((void *)this + 17);
    goto LABEL_13;
  }
  uint64_t v4 = v9;
  if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      (*(void (**)(AppleBCMWLANProximityInterface *, uint64_t))(*(void *)this + 856))(this, v4);
      CCLogStream::logAlert(v10, "[dk] %s@%d: cur_etheraddr failed, error %s\n");
    }
  }
  return v4;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setMacAddress(AppleBCMWLANProximityInterface *this, ether_addr *a2)
{
  return AppleBCMWLANProximityInterface::setMacAddress((AppleBCMWLANProximityInterface *)((char *)this - 80), a2);
}

uint64_t IO80211BufferCursor::asType<apple8021_awdl_cca_stats>(uint64_t *a1, uint64_t a2, const char *a3)
{
  uint64_t result = IO80211BufferCursor::_asType<apple8021_awdl_cca_stats>(a1, a2, a3);
  if (__CFADD__(result, (uint64_t)v4 >> 32)) {
    uint64_t v5 = ((uint64_t)v4 >> 63) + 1;
  }
  else {
    uint64_t v5 = (uint64_t)v4 >> 63;
  }
  uint64_t v6 = v5 << 63 >> 63;
  if (v6 != v5 || v6 < 0) {
    os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", v4);
  }
  return result;
}

IO80211SkywalkInterface *AppleBCMWLANProximityInterface::handleCacheControlAsyncCallBack(IO80211SkywalkInterface *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    uint64_t v7 = result;
    if (a3)
    {
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)result + 1024))(result))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
        if (CCLogStream::shouldLog())
        {
          char v15 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
          int v16 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)v7 + 856))(v7, a3);
          long long v17 = *(const char **)(a2 + 8);
          if (!v17) {
            long long v17 = "unknown";
          }
          CCLogStream::logAlert(v15, "[dk] %s@%d: Error: cannot send prox iovar %s [%s]\n", "handleCacheControlAsyncCallBack", 3349, v16, v17);
        }
      }
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
        if (CCLogStream::shouldLog())
        {
          uint64_t v18 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
          int v19 = *(_DWORD *)(a5 + 4);
          if (v19)
          {
            if (v19 == 6)
            {
              long long v20 = "UPDATE";
            }
            else
            {
              long long v20 = "other";
              if (v19 == 2) {
                long long v20 = "DELETE";
              }
            }
          }
          else
          {
            long long v20 = "ADD";
          }
          CCLogStream::logAlert(v18, "[dk] %s@%d: Opcode %u %s [%02x:%02x:%02x:%02x:%02x:%02x] ampdu %u ht %u vht %u\n", "handleCacheControlAsyncCallBack", 3356, v19, v20, *(unsigned __int8 *)(a5 + 8), *(unsigned __int8 *)(a5 + 9), *(unsigned __int8 *)(a5 + 10), *(unsigned __int8 *)(a5 + 11), *(unsigned __int8 *)(a5 + 12), *(unsigned __int8 *)(a5 + 13), *(unsigned __int8 *)(a5 + 44), *(unsigned __int8 *)(a5 + 16), *(unsigned __int8 *)(a5 + 45));
        }
      }
      mach_continuous_time();
      absolutetime_to_nanoseconds();
      if (a3 != -469793790)
      {
        *(void *)(*((void *)v7 + 17) + 40) = mach_continuous_time();
        FaultReporter = (CCFaultReporter *)AppleBCMWLANCore::getFaultReporter(*(AppleBCMWLANCore **)(*((void *)v7 + 17) + 64));
        uint64_t v10 = *(const char **)(a2 + 8);
        if (!v10) {
          uint64_t v10 = "unknown";
        }
        uint64_t v11 = CCFaultReporter::reportFault(FaultReporter, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANProximityInterface.cpp", 0xD23u, "handleCacheControlAsyncCallBack", 0, -469793502, "%s", v10);
        if (v11)
        {
          uint64_t v12 = v11;
          if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7))
          {
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
            if (CCLogStream::shouldLog())
            {
              uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v7 + 1024))(v7);
              size_t v14 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)v7 + 17) + 64)
                                                                             + 112))(*(void *)(*((void *)v7 + 17) + 64), v12);
              CCLogStream::logAlert(v13, "[dk] %s@%d: Failed to trigger Full Capture, \"%s\"\n", "handleCacheControlAsyncCallBack", 3366, v14);
            }
          }
        }
      }
    }
    else
    {
      AppleBCMWLANCore::completePeerCacheControl(*(IO80211Controller **)(*((void *)result + 17) + 64), a5, result);
    }
    return (IO80211SkywalkInterface *)IOFreeData();
  }
  return result;
}

uint64_t AppleBCMWLANProximityInterface::handleProxSlotBSSCompletion(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (IO80211SkywalkInterface *)result;
  if (a3)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)result + 1024))(result))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)v4 + 1024))(v4);
      if (CCLogStream::shouldLog())
      {
        uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v4 + 1024))(v4);
        uint64_t v13 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)v4 + 856))(v4, a3);
        CCLogStream::logAlert(v12, "[dk] %s@%d:ERROR: SlotBSS iovar failed, retVal %s:(0x%x)\n", "handleProxSlotBSSCompletion", 3405, v13, a3);
      }
    }
    FaultReporter = (CCFaultReporter *)AppleBCMWLANCore::getFaultReporter(*(AppleBCMWLANCore **)(*((void *)v4 + 17)
                                                                                               + 64));
    return CCFaultReporter::reportFault(FaultReporter, 5u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANProximityInterface.cpp", 0xD50u, "handleProxSlotBSSCompletion", 0, -469793489, " slot_bss, iovar retval %x", a3);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(*(void *)a4 + 17);
    if (v7)
    {
      int v8 = *(unsigned __int16 *)(*(void *)a4 + 13);
      if ((*(uint64_t (**)(uint64_t))(*(void *)result + 1024))(result))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)v4 + 1024))(v4);
        if (CCLogStream::shouldLog())
        {
          size_t v14 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v4 + 1024))(v4);
          CCLogStream::logAlert(v14, "[dk] %s@%d:ERROR: Async callback for SlotBSS command (0x%x) failed, return status %d (0x%x)\n", "handleProxSlotBSSCompletion", 3419, v8, v7, v7);
        }
      }
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)v4 + 1024))(v4);
      IO80211Hexdump();
      if (v7 == -16 || v7 == -25)
      {
        uint64_t v10 = *(IO80211Controller **)(*((void *)v4 + 17) + 64);
        return IO80211Controller::postMessage(v10, v4, 0xAAu, 0, 0, 1);
      }
      else
      {
        uint64_t v11 = (CCFaultReporter *)AppleBCMWLANCore::getFaultReporter(*(AppleBCMWLANCore **)(*((void *)v4 + 17) + 64));
        return CCFaultReporter::reportFault(v11, 5u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANProximityInterface.cpp", 0xD65u, "handleProxSlotBSSCompletion", 0, -469793489, " Cmd status %x", v7);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANProximityInterface::getTX_RATE(IO80211SkywalkInterface *a1, uint64_t a2)
{
  uint64_t v12 = 0;
  HIDWORD(v12) = *(_DWORD *)(a2 + 4);
  int v13 = 0;
  LOWORD(v1AppleBCMWLANJoinAdapter::free(this - 3) = *(_WORD *)(a2 + 8);
  WORD1(v12) = 8;
  v11[0] = &v12;
  v11[1] = 0xC000C000CLL;
  uint64_t v4 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  v10[0] = &v12;
  v10[1] = 12;
  uint64_t v6 = AppleBCMWLANCommander::runVirtualIOVarGet(v4, InterfaceId, "txminrate", (uint64_t)v10, (uint64_t)v11, 0);
  if (v6)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        int v8 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v6);
        CCLogStream::logAlert(v7, "[dk] %s@%d: Unable to get tx min rate %s\n", "getTX_RATE", 3485, v8);
      }
    }
  }
  else
  {
    *(_DWORD *)(a2 + 12) = HIWORD(v13);
  }
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::getTX_RATE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::getTX_RATE((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::setTX_RATE(IO80211SkywalkInterface *a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 4);
  v14[0] = 0x80000;
  v14[1] = v3;
  __int16 v15 = *(_WORD *)(a2 + 8);
  __int16 v16 = *(_DWORD *)(a2 + 12);
  (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
  IO80211Hexdump();
  v13[0] = a1;
  v13[1] = AppleBCMWLANProximityInterface::handleProxIovarAsyncCallBack;
  void v13[2] = 0;
  uint64_t v4 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  v12[0] = v14;
  v12[1] = 12;
  uint64_t v6 = AppleBCMWLANCommander::sendVirtualIOVarSet(v4, InterfaceId, "txminrate", (uint64_t)v12, kNoRxExpected, (uint64_t)v13, 0);
  uint64_t v7 = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
  if (v6)
  {
    if (v7)
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v8 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v9 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v6);
        CCLogStream::logAlert(v8, "[dk] %s@%d: Could configure tx min rate . Error code : %s\n", "setTX_RATE", 3510, v9);
      }
    }
  }
  else if (v7)
  {
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlertIf(v11, 0x400uLL, "[dk] %s@%d: Configured tx min rate.\n", "setTX_RATE", 3513);
    }
  }
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setTX_RATE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::setTX_RATE((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::setTX_RATE((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::dumpAwdlStats(AppleBCMWLANProximityInterface *this, char *a2)
{
  uint64_t v5 = 0;
  memset(v4, 0, sizeof(v4));
  (*(void (**)(AppleBCMWLANProximityInterface *, _OWORD *))(*(void *)this + 1696))(this, v4);
  (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
  return IO80211Print();
}

uint64_t AppleBCMWLANProximityInterface::dumpPeerCache(AppleBCMWLANProximityInterface *this, char *a2)
{
  uint64_t v3 = IOMallocZeroData();
  if (!v3) {
    return 0;
  }
  uint64_t v4 = (unsigned __int16 *)v3;
  if (AppleBCMWLANProximityInterface::copyPeerCache(this, v3, 676))
  {
    uint64_t v5 = 0;
    goto LABEL_31;
  }
  unsigned int v6 = *v4;
  if (v6 <= 0x2A4)
  {
    int v7 = 0;
  }
  else
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    int v7 = IO80211Print();
    unsigned int v6 = 676;
  }
  (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
  uint64_t v5 = IO80211Print() + v7;
  if (v6 >= 0xD)
  {
    int v8 = v4 + 1;
    do
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      int v9 = IO80211Print();
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      *(_OWORD *)__dst = 0u;
      long long v16 = 0u;
      int v10 = *(_DWORD *)(v8 + 3);
      if ((v10 & 0x20) != 0)
      {
        strlcat(__dst, "awdl ", 0x100uLL);
        int v10 = *(_DWORD *)(v8 + 3);
        if ((v10 & 0x10) == 0)
        {
LABEL_12:
          if ((v10 & 8) == 0) {
            goto LABEL_13;
          }
          goto LABEL_23;
        }
      }
      else if ((v10 & 0x10) == 0)
      {
        goto LABEL_12;
      }
      strlcat(__dst, "qos ", 0x100uLL);
      int v10 = *(_DWORD *)(v8 + 3);
      if ((v10 & 8) == 0)
      {
LABEL_13:
        if ((v10 & 4) == 0) {
          goto LABEL_14;
        }
        goto LABEL_24;
      }
LABEL_23:
      strlcat(__dst, "aband ", 0x100uLL);
      int v10 = *(_DWORD *)(v8 + 3);
      if ((v10 & 4) == 0)
      {
LABEL_14:
        if ((v10 & 2) == 0) {
          goto LABEL_15;
        }
        goto LABEL_25;
      }
LABEL_24:
      strlcat(__dst, "pm ", 0x100uLL);
      int v10 = *(_DWORD *)(v8 + 3);
      if ((v10 & 2) == 0)
      {
LABEL_15:
        if (v10) {
          goto LABEL_26;
        }
        goto LABEL_16;
      }
LABEL_25:
      strlcat(__dst, "ampdu ", 0x100uLL);
      int v10 = *(_DWORD *)(v8 + 3);
      if (v10)
      {
LABEL_26:
        strlcat(__dst, "ht ", 0x100uLL);
        if ((*(_DWORD *)(v8 + 3) & 0x40) == 0) {
          goto LABEL_18;
        }
LABEL_17:
        strlcat(__dst, "vht ", 0x100uLL);
        goto LABEL_18;
      }
LABEL_16:
      if ((v10 & 0x40) != 0) {
        goto LABEL_17;
      }
LABEL_18:
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      int v11 = v5 + v9 + IO80211Print();
      uint64_t v12 = v8[5];
      if (v12 > 0x47 || (uint64_t v13 = v12 + 13, (int)v12 + 13 > (unsigned __int16)v6))
      {
        (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        uint64_t v5 = v11 + IO80211Print();
        break;
      }
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      LOWORD(v6) = v6 - v13;
      int v8 = (unsigned __int16 *)((char *)v8 + v13);
      uint64_t v5 = v11 + IO80211Print();
    }
    while ((unsigned __int16)v6 > 0xCu);
  }
LABEL_31:
  IOFreeData();
  return v5;
}

uint64_t AppleBCMWLANProximityInterface::copyPeerCache(IO80211SkywalkInterface *a1, uint64_t a2, int a3)
{
  if (!a2) {
    return 0;
  }
  unint64_t v4 = (unsigned __int16)a3 | ((unint64_t)((a3 << 16) | 4u) << 16);
  if ((_WORD)a3)
  {
    uint64_t v5 = a2;
  }
  else
  {
    unint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  v11[0] = v5;
  v11[1] = v4;
  unsigned int v6 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  uint64_t v8 = AppleBCMWLANCommander::runVirtualIOVarGet(v6, InterfaceId, "awdl_peer_op", (uint64_t)&kNoTxPayload, (uint64_t)v11, 0);
  if (v8)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v9 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v9, "[dk] %s@%d:Unable to get peer cache table", "copyPeerCache", 4346);
      }
    }
  }
  return v8;
}

uint64_t AppleBCMWLANProximityInterface::setAWDL_CONFIG(IO80211SkywalkInterface *a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 4);
  if (v3) {
    int v4 = v3 | 3;
  }
  else {
    int v4 = 115;
  }
  int v16 = v4;
  if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
  {
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v12, "[dk] %s@%d:%s: send awdl_config (0x%x)\n", "setAWDL_CONFIG", 3705, "setAWDL_CONFIG", v4);
    }
  }
  v15[0] = a1;
  v15[1] = AppleBCMWLANProximityInterface::handleProxIovarAsyncCallBack;
  void v15[2] = 0;
  if (IO80211SkywalkInterface::getInterfaceId(a1) == -1)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v13, "[dk] %s@%d:ERROR: %s:%u AWDL Chip interface not initialized, bailing out\n", "setAWDL_CONFIG", 3713, "setAWDL_CONFIG", 3713);
      }
    }
    return 22;
  }
  else
  {
    uint64_t v5 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
    v14[0] = &v16;
    v14[1] = 4;
    uint64_t v7 = AppleBCMWLANCommander::sendVirtualIOVarSet(v5, InterfaceId, "awdl_config", (uint64_t)v14, kNoRxExpected, (uint64_t)v15, 0);
    if (v7)
    {
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          uint64_t v9 = *(unsigned int *)(*((void *)a1 + 17) + 664);
          int v10 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v7);
          CCLogStream::logCrit(v8, "[dk] %s@%d:Critical Error: cannot send %s iovar ivars->fSyncEnabled %lu: %s\n", "setAWDL_CONFIG", 3720, "awdl_config", v9, v10);
        }
      }
    }
  }
  return v7;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setAWDL_CONFIG(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::setAWDL_CONFIG((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::setAWDL_CONFIG((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::setAWDL_BSSID(AppleBCMWLANProximityInterface *a1, uint64_t a2)
{
  unsigned __int16 v45 = 0;
  int v44 = 0;
  if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1))
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      long long v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlertIf(v22, 0x400uLL, "[dk] %s@%d: \n", "setAWDL_BSSID", 3737);
    }
  }
  if (*(_DWORD *)(a2 + 4) == v44 && *(unsigned __int16 *)(a2 + 8) == v45)
  {
    uint64_t ChipInterface = AppleBCMWLANProximityInterface::deleteChipInterface(a1);
    if (!ChipInterface)
    {
      if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          long long v32 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logAlert(v32, "[dk] %s@%d: destroy awdl if success!\n");
        }
      }
      return 0;
    }
  }
  else
  {
    uint64_t v5 = *((void *)a1 + 17);
    int v6 = *(_DWORD *)(a2 + 4);
    *(_WORD *)(v5 + 604) = *(_WORD *)(a2 + 8);
    *(_DWORD *)(v5 + 600) = v6;
    uint64_t ChipInterface = AppleBCMWLANProximityInterface::createChipInterface(a1);
    if (!ChipInterface)
    {
      ConfigManager = (AppleBCMWLANConfigManager *)AppleBCMWLANCore::getConfigManager(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64));
      *(_DWORD *)(*((void *)a1 + 17) + 555) = AppleBCMWLANConfigManager::getAWDLElectionMetric(ConfigManager);
      uint64_t v9 = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1008))(a1);
      if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          long long v28 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logAlert(v28, "[dk] %s@%d: bring up awdl if success! [%02X:%02X:%02X:%02X:%02X:%02X] election_metric=%ld\n", "setAWDL_BSSID", 3761, v9, BYTE1(v9), BYTE2(v9), BYTE3(v9), BYTE4(v9), BYTE5(v9), *(unsigned int *)(*((void *)a1 + 17) + 555));
        }
      }
      int v37 = -1431655766;
      int v38 = -1431655766;
      __int16 v40 = -1;
      int v39 = -1;
      char v41 = 127;
      uint64_t v10 = *((void *)a1 + 17) + 524;
      char v42 = *(unsigned char *)v10;
      __int16 v43 = *(_WORD *)(v10 + 1);
      if (IO80211SkywalkInterface::getInterfaceId(a1) == -1)
      {
        if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            long long v33 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
            CCLogStream::logAlert(v33, "[dk] %s@%d:ERROR: %s:%u AWDL Chip interface not initialized, bailing out\n", "setAWDL_BSSID", 3772, "setAWDL_BSSID", 3772);
          }
        }
        uint64_t ChipInterface = 22;
      }
      else
      {
        int v11 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
        unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
        int v35 = &v39;
        uint64_t v36 = 10;
        uint64_t ChipInterface = AppleBCMWLANCommander::runVirtualIOVarSet(v11, InterfaceId, "awdl_af_hdr", (uint64_t)&v35, 0, 0);
        uint64_t v13 = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
        if (ChipInterface)
        {
          if (v13)
          {
            (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
            if (CCLogStream::shouldLog())
            {
              long long v23 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
              CCLogStream::logAlert(v23, "[dk] %s@%d: Unable to send awdl_af_hdr (%d)\n");
            }
          }
        }
        else
        {
          if (v13)
          {
            (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
            if (CCLogStream::shouldLog())
            {
              long long v29 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
              CCLogStream::logAlertIf(v29, 0x400uLL, "[dk] %s@%d: Sent awdl_af_hdr length %lu\n", "setAWDL_BSSID", 3777, 10);
            }
          }
          int v38 = 115;
          size_t v14 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
          unsigned __int8 v15 = IO80211SkywalkInterface::getInterfaceId(a1);
          int v35 = &v38;
          uint64_t v36 = 4;
          uint64_t ChipInterface = AppleBCMWLANCommander::runVirtualIOVarSet(v14, v15, "awdl_config", (uint64_t)&v35, 0, 0);
          uint64_t v16 = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
          if (ChipInterface)
          {
            if (v16)
            {
              (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
              if (CCLogStream::shouldLog())
              {
                long long v24 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
                CCLogStream::logAlert(v24, "[dk] %s@%d: Unable to send awdl_config (%d)\n");
              }
            }
          }
          else
          {
            if (v16)
            {
              (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
              if (CCLogStream::shouldLog())
              {
                long long v30 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
                CCLogStream::logAlertIf(v30, 0x400uLL, "[dk] %s@%d: Sent awdl_config 0x%X\n", "setAWDL_BSSID", 3788, v38);
              }
            }
            int v37 = -60;
            long long v17 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
            unsigned __int8 v18 = IO80211SkywalkInterface::getInterfaceId(a1);
            int v35 = &v37;
            uint64_t v36 = 4;
            uint64_t ChipInterface = AppleBCMWLANCommander::runVirtualIOVarSet(v17, v18, "awdl_af_rssi", (uint64_t)&v35, 0, 0);
            uint64_t v19 = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
            if (!ChipInterface)
            {
              if (v19)
              {
                (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
                if (CCLogStream::shouldLog())
                {
                  long long v31 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
                  CCLogStream::logAlertIf(v31, 0x400uLL, "[dk] %s@%d: Sent awdl_af_rssi %d\n", "setAWDL_BSSID", 3794, v37);
                }
              }
              if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1))
              {
                (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
                if (CCLogStream::shouldLog())
                {
                  long long v20 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
                  CCLogStream::logAlert(v20, "[dk] %s@%d: success, set BSSID to: %02x:%02x:%02x:%02x:%02x:%02x\n", "setAWDL_BSSID");
                }
              }
              return 0;
            }
            if (v19)
            {
              (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
              if (CCLogStream::shouldLog())
              {
                uint64_t v34 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
                CCLogStream::logAlert(v34, "[dk] %s@%d: Unable to send awdl_af_rssi (%d)\n");
              }
            }
          }
        }
      }
      int v25 = AppleBCMWLANProximityInterface::deleteChipInterface(a1);
      if (v25)
      {
        int v26 = v25;
        if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            long long v27 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
            CCLogStream::logAlert(v27, "[dk] %s@%d: failed to delete awdl if (%d)\n", "setAWDL_BSSID", 3813, v26);
          }
        }
      }
    }
  }
  return ChipInterface;
}

uint64_t AppleBCMWLANProximityInterface::deleteChipInterface(AppleBCMWLANProximityInterface *this)
{
  uint64_t v2 = *((void *)this + 17);
  if (*(unsigned char *)(v2 + 121))
  {
    if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        unsigned __int8 v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logInfo(v18, "[dk] %s@%d:Need to disable sync before deleting chip interface...", "deleteChipInterface", 3971);
      }
    }
    int v23 = 0;
    uint64_t v22 = 0;
    AppleBCMWLANProximityInterface::setSYNC_ENABLED_internal(this, (uint64_t)&v22);
    uint64_t v2 = *((void *)this + 17);
  }
  if (!*(unsigned char *)(v2 + 120)
    || IO80211SkywalkInterface::getInterfaceId(this) == -1
    || IO80211SkywalkInterface::getInterfaceId(this) == 255
    || IO80211SkywalkInterface::getInterfaceId(this) >= 0xC)
  {
    if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        long long v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v17, "[dk] %s@%d:ERROR: %s:%u AWDL Chip interface not initialized, bailing out\n", "deleteChipInterface", 3982, "deleteChipInterface", 3982);
      }
    }
    return 0;
  }
  if (AppleBCMWLANCore::isHostAssignedInterfaceIndex(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64)))
  {
    uint64_t v5 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 960);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
    uint64_t v7 = AppleBCMWLANCommander::runVirtualIOVarSet(v5, InterfaceId, "interface_remove", (uint64_t)&kNoTxPayload, 0, 0);
    if (v7)
    {
      uint64_t v3 = v7;
      if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
          (*(void (**)(AppleBCMWLANProximityInterface *, uint64_t))(*(void *)this + 856))(this, v3);
          CCLogStream::logCrit(v8, "[dk] %s@%d:ERROR: Cannot remove interface for AWDL, error %s\n");
        }
      }
      return v3;
    }
LABEL_29:
    uint64_t v3 = 0;
    *(unsigned char *)(*((void *)this + 17) + 936) = 0;
    *(unsigned char *)(*((void *)this + 17) + 120) = 0;
    return v3;
  }
  uint64_t v24 = 0;
  uint64_t v9 = *((void *)this + 17);
  int v10 = *(_DWORD *)(v9 + 600);
  HIDWORD(v22) = 0;
  int v23 = v10;
  LOWORD(v24) = *(_WORD *)(v9 + 604);
  LODWORD(v22) = *(_DWORD *)(v9 + 920);
  (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
  IO80211Hexdump();
  int v11 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 960);
  unsigned __int8 v12 = IO80211SkywalkInterface::getInterfaceId(this);
  v21[0] = &v22;
  v21[1] = 20;
  uint64_t v13 = AppleBCMWLANCommander::runVirtualIOVarSet(v11, v12, "awdl_if", (uint64_t)v21, 0, 0);
  if (!v13)
  {
    uint64_t v15 = AppleBCMWLANProximityInterface::waitForDriverEvent(this, 1u);
    if (v15)
    {
      uint64_t v16 = v15;
      if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
          long long v20 = (const char *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *, uint64_t))(*(void *)this + 856))(this, v16);
          CCLogStream::logAlert(v19, "[dk] %s@%d:AWDL i/f deletion timedout Error = %s(%d)\n", "deleteChipInterface", 4009, v20, v16);
        }
      }
    }
    IO80211SkywalkInterface::setInterfaceId(this, 0xFFFFFFFF);
    goto LABEL_29;
  }
  uint64_t v3 = v13;
  if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      size_t v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      (*(void (**)(AppleBCMWLANProximityInterface *, uint64_t))(*(void *)this + 856))(this, v3);
      CCLogStream::logCrit(v14, "[dk] %s@%d:ERROR: Cannot bring down awdl if, error %s\n");
    }
  }
  return v3;
}

uint64_t AppleBCMWLANProximityInterface::createChipInterface(AppleBCMWLANProximityInterface *this)
{
  *(unsigned char *)(*((void *)this + 17) + 1104) = 1;
  if (*(unsigned char *)(*((void *)this + 17) + 120)) {
    AppleBCMWLANProximityInterface::deleteChipInterface(this);
  }
  if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      int v23 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      int FirmwareInterfaceVersion = AppleBCMWLANCore::getFirmwareInterfaceVersion(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64));
      CCLogStream::logAlert(v23, "[dk] %s@%d:%s[%d]: Creating AWDL chip interface %d, fw ver %d\n", "createChipInterface", 3871, "createChipInterface", 3871, 2, FirmwareInterfaceVersion);
    }
  }
  if (AppleBCMWLANCore::isHostAssignedInterfaceIndex(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64)))
  {
    IO80211SkywalkInterface::setInterfaceId(this, 2u);
    AppleBCMWLANCore::setProxSkywalkInterface(*(void *)(*((void *)this + 17) + 64), 2u);
    uint64_t v31 = 131100;
    *(void *)&long long v32 = 0;
    *((void *)&v32 + 1) = 0x200000000;
    v34[0] = 0;
    v34[1] = 0;
    long long v33 = 0;
    int v35 = 0;
    int v30 = 1835011;
    uint64_t v2 = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1008))(this);
    WORD2(v32) = WORD2(v2);
    uint64_t v3 = *((void *)this + 17);
    *(_DWORD *)((char *)&v32 + 6) = *(_DWORD *)(v3 + 600);
    WORD5(v32) = *(_WORD *)(v3 + 604);
    HIDWORD(v31) = 26;
    LODWORD(v32) = v2;
    v29[0] = &v33;
    v29[1] = 0x1C001C001CLL;
    int v4 = *(AppleBCMWLANCommander **)(v3 + 960);
    v28[0] = &v30;
    v28[1] = 28;
    uint64_t v5 = AppleBCMWLANCommander::runIOVarGet(v4, (uint64_t)"interface_create", (uint64_t)v28, (uint64_t)v29, 0);
    if (v5)
    {
      uint64_t v6 = v5;
      if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
          (*(void (**)(AppleBCMWLANProximityInterface *, uint64_t))(*(void *)this + 856))(this, v6);
          CCLogStream::logCrit(v7, "[dk] %s@%d:ERROR: Cannot create interface for AWDL, error %s\n");
        }
      }
      goto LABEL_21;
    }
    (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 17) + 984) + 104))(*(void *)(*((void *)this + 17) + 984), 2);
    if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        int v25 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v25, "[dk] %s@%d:%s: Return bssCfgIdx %d, ifIdx %d, ifName %s\n", "createChipInterface", 3901, "createChipInterface", BYTE2(v34[0]), BYTE3(v34[0]), (const char *)v34 + 4);
      }
    }
    *(unsigned char *)(*((void *)this + 17) + 120) = 1;
LABEL_20:
    AppleBCMWLANProximityInterface::setBssRates(this);
    *(_DWORD *)(*((void *)this + 17) + 924) = 1;
    AppleBCMWLANProximityInterface::resetInterface(this);
    uint64_t v6 = 0;
    goto LABEL_21;
  }
  if (IO80211SkywalkInterface::getInterfaceId(this) != -1) {
    goto LABEL_20;
  }
  uint64_t v8 = *((void *)this + 17);
  HIDWORD(v31) = *(_DWORD *)(v8 + 600);
  LOWORD(v32) = *(_WORD *)(v8 + 604);
  uint64_t v9 = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1008))(this);
  *(_DWORD *)((char *)&v32 + 2) = v9;
  WORD3(v32) = WORD2(v9);
  int v30 = *(_DWORD *)(*((void *)this + 17) + 920);
  LODWORD(v31) = 1;
  (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
  IO80211Hexdump();
  int v10 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 960);
  long long v33 = &v30;
  v34[0] = 20;
  uint64_t v11 = AppleBCMWLANCommander::runIOVarSet(v10, (uint64_t)"awdl_if", (uint64_t)&v33, 0, 0);
  if (v11)
  {
    uint64_t v6 = v11;
    if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        unsigned __int8 v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        (*(void (**)(AppleBCMWLANProximityInterface *, uint64_t))(*(void *)this + 856))(this, v6);
        CCLogStream::logCrit(v12, "[dk] %s@%d:ERROR: Cannot bring up awdl if, error %s\n");
      }
    }
    goto LABEL_21;
  }
  uint64_t v14 = *((void *)this + 17);
  if (!*(unsigned char *)(v14 + 936))
  {
    uint64_t v21 = AppleBCMWLANProximityInterface::waitForDriverEvent(this, 0);
    if (v21)
    {
      uint64_t v6 = v21;
      if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          int v26 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
          long long v27 = (const char *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *, uint64_t))(*(void *)this + 856))(this, v6);
          CCLogStream::logAlert(v26, "[dk] %s@%d:AWDL i/f creation timedout Error = %s(%d)\n", "createChipInterface", 3927, v27, v6);
        }
      }
      FaultReporter = (CCFaultReporter *)AppleBCMWLANCore::getFaultReporter(*(AppleBCMWLANCore **)(*((void *)this + 17)
                                                                                                 + 64));
      CCFaultReporter::reportFault(FaultReporter, 5u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANProximityInterface.cpp", 0xF59u, "createChipInterface", 0, -469793467, " AWDL if creation timedout error %x", v6);
      goto LABEL_21;
    }
    uint64_t v14 = *((void *)this + 17);
  }
  *(unsigned char *)(v14 + 120) = 1;
  WORD2(v29[0]) = 0;
  LODWORD(v29[0]) = 0;
  long long v33 = (int *)v29;
  v34[0] = 0x600060006;
  uint64_t v15 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 960);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
  uint64_t v6 = AppleBCMWLANCommander::runVirtualIOVarGet(v15, InterfaceId, "cur_etheraddr", (uint64_t)&kNoTxPayload, (uint64_t)&v33, 0);
  uint64_t v17 = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1008))(this);
  LODWORD(v28[0]) = v17;
  WORD2(v28[0]) = WORD2(v17);
  if (!v6 && LODWORD(v29[0]) == LODWORD(v28[0]) && WORD2(v29[0]) == WORD2(v28[0])) {
    goto LABEL_20;
  }
  if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      long long v20 = (const char *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *, uint64_t))(*(void *)this + 856))(this, v6);
      CCLogStream::logAlert(v19, "[dk] %s@%d:ERROR: cur_etheraddr failed on create chip interface, error %s\n", "createChipInterface", 3941, v20);
    }
  }
LABEL_21:
  *(unsigned char *)(*((void *)this + 17) + 1104) = 0;
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setAWDL_BSSID(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::setAWDL_BSSID((AppleBCMWLANProximityInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::setAWDL_BSSID((AppleBCMWLANProximityInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::setCOMPANION_SKYWALK_IF_CREATE(IO80211VirtualInterface *a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 4);
  if (!v3)
  {
    uint64_t v6 = *((void *)a1 + 17);
    uint64_t v7 = *(IO80211SkywalkInterface **)(v6 + 112);
    if (!v7)
    {
      uint64_t SkywalkInterface = 3758097088;
      if ((*(uint64_t (**)(IO80211VirtualInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211VirtualInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v17 = (CCLogStream *)(*(uint64_t (**)(IO80211VirtualInterface *))(*(void *)a1 + 1024))(a1);
          (*(void (**)(IO80211VirtualInterface *))(*(void *)a1 + 160))(a1);
          CCLogStream::logAlert(v17, "[dk] %s@%d:ERROR: Deletion failed, NAN companion skywalk interface does not exists for %s\n");
        }
      }
      return SkywalkInterface;
    }
    uint64_t v8 = *(AppleBCMWLANCore **)(v6 + 64);
    unsigned int InterfaceId = IO80211SkywalkInterface::getInterfaceId(v7);
    AppleBCMWLANCore::destroySkywalkInterface(v8, InterfaceId);
    return 0;
  }
  if (v3 != 1) {
    return 0;
  }
  if (*(void *)(*((void *)a1 + 17) + 112))
  {
    if ((*(uint64_t (**)(IO80211VirtualInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211VirtualInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v21 = (CCLogStream *)(*(uint64_t (**)(IO80211VirtualInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v22 = (const char *)(*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 17) + 112) + 160))(*(void *)(*((void *)a1 + 17) + 112));
        int v23 = (const char *)(*(uint64_t (**)(IO80211VirtualInterface *))(*(void *)a1 + 160))(a1);
        CCLogStream::logAlert(v21, "[dk] %s@%d:ALERT: AWDL companion skywalk interface %s already exists for %s\n", "setCOMPANION_SKYWALK_IF_CREATE", 3824, v22, v23);
      }
    }
    uint64_t v5 = (const char *)(*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 17) + 112) + 160))(*(void *)(*((void *)a1 + 17) + 112));
    strncpy((char *)(a2 + 8), v5, 0x10uLL);
    return 0;
  }
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  unint64_t v12 = (*(uint64_t (**)(IO80211VirtualInterface *))(*(void *)a1 + 1008))(a1);
  LODWORD(v27) = 2;
  LOBYTE(v25) = v12;
  v13.i64[0] = 0xFFFFFFFFFFFFLL;
  v13.i64[1] = 0xFFFFFFFFFFFFLL;
  uint64x2_t v14 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v12), v13);
  int16x8_t v15 = (int16x8_t)vshlq_u64(v14, (uint64x2_t)xmmword_100304950);
  *(int32x2_t *)v14.i8 = vmovn_s64((int64x2_t)vshlq_u64(v14, (uint64x2_t)xmmword_100304960));
  *(int32x2_t *)v15.i8 = vmovn_s64((int64x2_t)v15);
  v15.i16[1] = v15.i16[2];
  v15.i16[2] = v14.i16[0];
  v15.i16[3] = v14.i16[2];
  *(_DWORD *)((char *)&v25 + 1) = vmovn_s16(v15).u32[0];
  BYTE5(v25) = BYTE5(v12);
  uint64_t v26 = 9;
  uint64_t v24 = "llw";
  uint64_t SkywalkInterface = AppleBCMWLANCore::createSkywalkInterface(*(IOService **)(*((void *)a1 + 17) + 64), (IOService **)(*((void *)a1 + 17) + 112), (uint64_t)&v24, a1);
  if (SkywalkInterface)
  {
    if ((*(uint64_t (**)(IO80211VirtualInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211VirtualInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v16 = (CCLogStream *)(*(uint64_t (**)(IO80211VirtualInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v16, "[dk] %s@%d:Not Creating Skywalk interface for AWDL %d\n");
      }
    }
  }
  else
  {
    unsigned __int8 v18 = *(IO80211SkywalkInterface **)(*((void *)a1 + 17) + 112);
    unsigned int v19 = IO80211SkywalkInterface::getInterfaceId(a1);
    IO80211SkywalkInterface::setCompanionInterfaceId(v18, v19);
    long long v20 = (const char *)(*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 17) + 112) + 160))(*(void *)(*((void *)a1 + 17) + 112));
    strncpy((char *)(a2 + 8), v20, 0x10uLL);
  }
  return SkywalkInterface;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setCOMPANION_SKYWALK_IF_CREATE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::setCOMPANION_SKYWALK_IF_CREATE((IO80211VirtualInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::setCOMPANION_SKYWALK_IF_CREATE((IO80211VirtualInterface *)(a1 - 128), a2);
}

BOOL AppleBCMWLANProximityInterface::isChipInterfaceReady(AppleBCMWLANProximityInterface *this)
{
  return *(_DWORD *)(*((void *)this + 17) + 924) != 0;
}

BOOL non-virtual thunk to'AppleBCMWLANProximityInterface::isChipInterfaceReady(AppleBCMWLANProximityInterface *this)
{
  return *(_DWORD *)(*((void *)this + 7) + 924) != 0;
}

uint64_t AppleBCMWLANProximityInterface::setAWDL_PRESENCE_MODE(IO80211SkywalkInterface *this, uint64_t a2)
{
  if (!a2) {
    return 22;
  }
  unsigned int v2 = *(_DWORD *)(a2 + 4);
  unsigned int v13 = v2;
  if (v2 > 0x40) {
    return 34;
  }
  uint64_t v5 = *((void *)this + 17);
  if (*(_DWORD *)(v5 + 836))
  {
    uint64_t result = 0;
    *(_DWORD *)(v5 + 656) = v2;
  }
  else
  {
    if (*(_DWORD *)(v5 + 832)) {
      unsigned int v13 = 0;
    }
    v12[0] = this;
    v12[1] = AppleBCMWLANProximityInterface::handleProxIovarAsyncCallBack;
    void v12[2] = 0;
    uint64_t v6 = *(AppleBCMWLANCommander **)(v5 + 960);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
    v11[0] = &v13;
    v11[1] = 4;
    LODWORD(v6) = AppleBCMWLANCommander::sendVirtualIOVarSet(v6, InterfaceId, "awdl_presencemode", (uint64_t)v11, kNoRxExpected, (uint64_t)v12, 0);
    uint64_t v8 = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
    if (v6)
    {
      if (v8)
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
          CCLogStream::logAlertIf(v9, 0x400uLL, "[dk] %s@%d: Unable to send awdl_presencemode\n", "setAWDL_PRESENCE_MODE", 4071);
        }
      }
      return 6;
    }
    else
    {
      if (v8)
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          int v10 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
          CCLogStream::logAlertIf(v10, 0x400uLL, "[dk] %s@%d: mode %lu\n", "setAWDL_PRESENCE_MODE", 4074, v13);
        }
      }
      uint64_t result = 0;
      *(_DWORD *)(*((void *)this + 17) + 656) = v13;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setAWDL_PRESENCE_MODE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::setAWDL_PRESENCE_MODE((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::setAWDL_PRESENCE_MODE((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::getPEER_CACHE_MAXIMUM_SIZE(IO80211SkywalkInterface *a1, uint64_t a2)
{
  unsigned int v15 = 0;
  if (IO80211SkywalkInterface::getInterfaceId(a1) < 0xCu)
  {
    v14[0] = &v15;
    v14[1] = 0x400040004;
    uint64_t v6 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
    v13[0] = &v15;
    v13[1] = 4;
    uint64_t v4 = AppleBCMWLANCommander::runVirtualIOVarGet(v6, InterfaceId, "awdl_maxpeers", (uint64_t)v13, (uint64_t)v14, 0);
    uint64_t v8 = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    if (v4)
    {
      if (v8)
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          (*(void (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v4);
          CCLogStream::logAlert(v9, "[dk] %s@%d: Unable to get awdl max peer count %s\n");
        }
      }
    }
    else
    {
      if (v8)
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          unint64_t v12 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logNoticeIf(v12, 0x400uLL, "[dk] %s@%d: get awdl peer count returned %d\n", "getPEER_CACHE_MAXIMUM_SIZE", 4103, v15);
        }
      }
      unsigned int v10 = *(_DWORD *)(*((void *)a1 + 17) + 900);
      if (v10 >= v15) {
        unsigned int v10 = v15;
      }
      *(_DWORD *)(a2 + 4) = v10;
    }
  }
  else
  {
    uint64_t v4 = 3758097122;
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: %s:%u AWDL Chip interface not initialized, bailing out, interfaceId : %x\n");
      }
    }
  }
  return v4;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::getPEER_CACHE_MAXIMUM_SIZE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::getPEER_CACHE_MAXIMUM_SIZE((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::getPEER_CACHE_MAXIMUM_SIZE((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::setPEER_CACHE_CONTROL(OSObject *a1, uint64_t a2)
{
  uint64_t v4 = IOMallocZeroData();
  if (v4)
  {
    uint64_t v5 = v4;
    int v48 = 0;
    char v49 = 0;
    int v50 = 0;
    if (a2)
    {
      if (((uint64_t (*)(OSObject *))a1->OSMetaClassBase::__vftable[18].release)(a1))
      {
        ((void (*)(OSObject *))a1->OSMetaClassBase::__vftable[18].release)(a1);
        if (CCLogStream::shouldLog())
        {
          int v35 = (CCLogStream *)((uint64_t (*)(OSObject *))a1->OSMetaClassBase::__vftable[18].release)(a1);
          int v36 = *(_DWORD *)(a2 + 4);
          if (v36)
          {
            if (v36 == 6)
            {
              int v37 = "UPDATE";
            }
            else
            {
              int v37 = "other";
              if (v36 == 2) {
                int v37 = "DELETE";
              }
            }
          }
          else
          {
            int v37 = "ADD";
          }
          CCLogStream::logAlertIf(v35, 0x400uLL, "[dk] %s@%d: Opcode %u %s [%02x:%02x:%02x:%02x:%02x:%02x] ampdu %u ht %u vht %u he %u\n", "setPEER_CACHE_CONTROL", 4138, v36, v37, *(unsigned __int8 *)(a2 + 8), *(unsigned __int8 *)(a2 + 9), *(unsigned __int8 *)(a2 + 10), *(unsigned __int8 *)(a2 + 11), *(unsigned __int8 *)(a2 + 12), *(unsigned __int8 *)(a2 + 13), *(unsigned __int8 *)(a2 + 44), *(unsigned __int8 *)(a2 + 16), *(unsigned __int8 *)(a2 + 45), *(unsigned __int8 *)(a2 + 60));
        }
      }
      int v6 = *(_DWORD *)(a2 + 8);
      *(_WORD *)(v5 + 6) = *(_WORD *)(a2 + 12);
      *(_DWORD *)(v5 + 2) = v6;
      if (AppleBCMWLANCore::forceDisableAwdlAmpdu((AppleBCMWLANCore *)a1[3].meta[2].__vftable)) {
        BOOL v7 = 0;
      }
      else {
        BOOL v7 = *(unsigned char *)(a2 + 44) != 0;
      }
      *(unsigned char *)(v5 + 8) = v7;
      if (*(unsigned char *)(a2 + 60)) {
        *(unsigned char *)(v5 + 8) = v7 | 4;
      }
      int v9 = *(_DWORD *)(a2 + 4);
      switch(v9)
      {
        case 6:
          goto LABEL_16;
        case 2:
          *(unsigned char *)(v5 + 1) = 1;
          if (((uint64_t (*)(OSObject *))a1->OSMetaClassBase::__vftable[18].release)(a1))
          {
            ((void (*)(OSObject *))a1->OSMetaClassBase::__vftable[18].release)(a1);
            if (CCLogStream::shouldLog())
            {
              int v39 = (CCLogStream *)((uint64_t (*)(OSObject *))a1->OSMetaClassBase::__vftable[18].release)(a1);
              CCLogStream::logAlertIf(v39, 0x400uLL, "[dk] %s@%d: deleting peer op %u num %lu\n", "setPEER_CACHE_CONTROL", 4180, *(_DWORD *)(a2 + 4), LODWORD(a1[3].meta[16].meta));
            }
          }
          unsigned int v12 = 9;
          goto LABEL_36;
        case 0:
LABEL_16:
          *(unsigned char *)(v5 + 1) = 0;
          if (*(unsigned char *)(a2 + 16) == 45 && *(unsigned char *)(a2 + 17) == 26)
          {
            if (((uint64_t (*)(OSObject *))a1->OSMetaClassBase::__vftable[18].release)(a1))
            {
              ((void (*)(OSObject *))a1->OSMetaClassBase::__vftable[18].release)(a1);
              if (CCLogStream::shouldLog())
              {
                __int16 v43 = (CCLogStream *)((uint64_t (*)(OSObject *))a1->OSMetaClassBase::__vftable[18].release)(a1);
                ClassNameHelper = (const char *)getClassNameHelper(a1);
                CCLogStream::logAlertIf(v43, 0x400uLL, "[dk] %s@%d:%s::%s adding HT IE, ampdu %u\n", "setPEER_CACHE_CONTROL", 4160, ClassNameHelper, "setPEER_CACHE_CONTROL", *(unsigned __int8 *)(v5 + 8));
              }
            }
            long long v10 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)(v5 + 21) = *(_OWORD *)(a2 + 28);
            *(_OWORD *)(v5 + 9) = v10;
          }
          if (!AppleBCMWLANCore::isSupportedPhyMode11nOnly((AppleBCMWLANCore *)a1[3].meta[2].__vftable)
            && *(unsigned char *)(a2 + 45)
            && *(unsigned __int8 *)(a2 + 46) == 191
            && *(unsigned char *)(a2 + 47) == 12)
          {
            if (((uint64_t (*)(OSObject *))a1->OSMetaClassBase::__vftable[18].release)(a1))
            {
              ((void (*)(OSObject *))a1->OSMetaClassBase::__vftable[18].release)(a1);
              if (CCLogStream::shouldLog())
              {
                unsigned __int16 v45 = (CCLogStream *)((uint64_t (*)(OSObject *))a1->OSMetaClassBase::__vftable[18].release)(a1);
                unint64_t v46 = (const char *)getClassNameHelper(a1);
                CCLogStream::logAlertIf(v45, 0x400uLL, "[dk] %s@%d:%s::%s adding VHT IE \n", "setPEER_CACHE_CONTROL", 4169, v46, "setPEER_CACHE_CONTROL");
              }
            }
            uint64_t v11 = *(void *)(a2 + 46);
            *(void *)(v5 + 4AppleBCMWLANJoinAdapter::free(this - 3) = *(void *)(a2 + 52);
            *(void *)(v5 + 37) = v11;
            unsigned int v12 = 51;
          }
          else
          {
            unsigned int v12 = 37;
          }
          ((void (*)(OSObject *))a1->OSMetaClassBase::__vftable[18].release)(a1);
          IO80211HexdumpIf();
LABEL_36:
          if (!*(_DWORD *)(a2 + 4) && *(unsigned char *)(a2 + 70) == 3)
          {
            uint64_t v13 = v5 + v12;
            *(unsigned char *)uint64_t v13 = -35;
            *(_DWORD *)(v13 + 2) = 150083328;
            *(unsigned char *)(v13 + 6) = 18;
            int v14 = *(unsigned __int8 *)(a2 + 69);
            *(unsigned char *)(v13 + 7) = v14 - 1;
            *(unsigned char *)(v13 + 8) = *(unsigned char *)(a2 + 70) - 1;
            *(unsigned char *)(v13 + 9) = *(unsigned char *)(a2 + 72);
            *(unsigned char *)(v13 + 10) = *(unsigned char *)(a2 + 71);
            *(_WORD *)(v13 + 11) = -1;
            unsigned int v15 = (unsigned char *)(v13 + 13);
            int v47 = 2;
            int v16 = *(unsigned __int8 *)(a2 + 68);
            int v52 = 0;
            *(void *)__source = 0;
            *(_OWORD *)__dst = 0u;
            long long v54 = 0u;
            long long v55 = 0u;
            long long v56 = 0u;
            long long v57 = 0u;
            long long v58 = 0u;
            if (v14)
            {
              unint64_t v17 = 0;
              if ((v16 - 1) < 4) {
                int v18 = v16 + 1;
              }
              else {
                int v18 = 2;
              }
              unsigned int v19 = (_DWORD *)(a2 + 84);
              while (1)
              {
                int v47 = v18;
                if (*(v19 - 1))
                {
                  int v20 = *v19;
                  if ((*v19 & 0x10) != 0)
                  {
                    if (v18 >= 4) {
                      int v18 = 4;
                    }
                    int v22 = 3;
LABEL_56:
                    unsigned int v23 = __rev16(AppleBCMWLANCore::getChanSpec((uint64_t)a1[3].meta[2].__vftable, *(v19 - 1), v22, &v47));
                    *(_WORD *)&v15[2 * v17] = v23;
                    snprintf(__source, 0xCuLL, "%0x,", v23);
                    if (strlcat(__dst, __source, 0x60uLL) > 0x5F) {
                      break;
                    }
                    goto LABEL_57;
                  }
                  if ((v20 & 8) != 0)
                  {
                    int v22 = 0;
                    goto LABEL_56;
                  }
                  if ((v20 & 0x2000) != 0)
                  {
                    int v22 = 1;
                    goto LABEL_56;
                  }
                  if (((uint64_t (*)(OSObject *))a1->OSMetaClassBase::__vftable[18].release)(a1))
                  {
                    ((void (*)(OSObject *))a1->OSMetaClassBase::__vftable[18].release)(a1);
                    if (CCLogStream::shouldLog())
                    {
                      uint64_t v21 = (CCLogStream *)((uint64_t (*)(OSObject *))a1->OSMetaClassBase::__vftable[18].release)(a1);
                      CCLogStream::logAlert(v21, "[dk] %s@%d: channel %u[0x%X] has no band info\n", "setPEER_CACHE_CONTROL", 4260, *(v19 - 1), *v19);
                    }
                  }
                }
                else
                {
                  strcpy(__source, "0,");
                  strlcat(__dst, __source, 0x60uLL);
                }
LABEL_57:
                if (v17 <= 0x1E)
                {
                  ++v17;
                  v19 += 3;
                  if (v17 < *(unsigned __int8 *)(a2 + 69)) {
                    continue;
                  }
                }
                break;
              }
            }
            if (*v15)
            {
              LOBYTE(v24) = 2 * *(unsigned char *)(a2 + 69);
            }
            else
            {
              long long v57 = 0u;
              long long v58 = 0u;
              long long v55 = 0u;
              long long v56 = 0u;
              *(_OWORD *)__dst = 0u;
              long long v54 = 0u;
              *(unsigned char *)(v13 + 8) = 0;
              LOBYTE(v24) = *(unsigned char *)(a2 + 69);
              if ((_BYTE)v24)
              {
                unint64_t v31 = 0;
                long long v32 = (int *)(a2 + 80);
                do
                {
                  int v33 = *v32;
                  v32 += 3;
                  v15[v31] = v33;
                  snprintf(__source, 0xCuLL, "%u,", v33);
                  size_t v34 = strlcat(__dst, __source, 0x60uLL);
                  unint64_t v24 = *(unsigned __int8 *)(a2 + 69);
                  if (v34 > 0x5F) {
                    break;
                  }
                  if (v31 > 0x1E) {
                    break;
                  }
                  ++v31;
                }
                while (v31 < v24);
              }
            }
            *(unsigned char *)(v13 + 1) = v24 + 11;
            v12 += (v24 + 13);
            if (((uint64_t (*)(OSObject *))a1->OSMetaClassBase::__vftable[18].release)(a1))
            {
              ((void (*)(OSObject *))a1->OSMetaClassBase::__vftable[18].release)(a1);
              if (CCLogStream::shouldLog())
              {
                char v42 = (CCLogStream *)((uint64_t (*)(OSObject *))a1->OSMetaClassBase::__vftable[18].release)(a1);
                CCLogStream::logAlertIf(v42, 0x400uLL, "[dk] %s@%d:seqLen:%u end:%u dup:%u sc:%u fillChan:%u Channel Seq: %s \n", "setPEER_CACHE_CONTROL", 4300, *(unsigned __int8 *)(v13 + 7), *(unsigned __int8 *)(v13 + 8), *(unsigned __int8 *)(v13 + 9), *(unsigned __int8 *)(v13 + 10), *(unsigned __int16 *)(v13 + 11), __dst);
              }
            }
          }
          uint64_t v25 = (void *)IOMallocZeroData();
          if (v25)
          {
            uint64_t v26 = v25;
            memcpy(v25, (const void *)a2, 0x1D0uLL);
            int v48 = a1;
            char v49 = AppleBCMWLANProximityInterface::handleCacheControlAsyncCallBack;
            int v50 = v26;
            uint64_t v27 = (AppleBCMWLANCommander *)a1[3].meta[30].__vftable;
            unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId((IO80211SkywalkInterface *)a1);
            *(void *)__dst = v5;
            *(void *)&char __dst[8] = v12;
            LODWORD(v27) = AppleBCMWLANCommander::sendVirtualIOVarSet(v27, InterfaceId, "awdl_peer_op", (uint64_t)__dst, kNoRxExpected, (uint64_t)&v48, 0);
            uint64_t v29 = ((uint64_t (*)(OSObject *))a1->OSMetaClassBase::__vftable[18].release)(a1);
            if (v27)
            {
              if (v29)
              {
                ((void (*)(OSObject *))a1->OSMetaClassBase::__vftable[18].release)(a1);
                if (CCLogStream::shouldLog())
                {
                  int v38 = (CCLogStream *)((uint64_t (*)(OSObject *))a1->OSMetaClassBase::__vftable[18].release)(a1);
                  CCLogStream::logAlert(v38, "[dk] %s@%d: Unable to send awdl_peer_op\n", "setPEER_CACHE_CONTROL", 4317);
                }
              }
              IOFreeData();
              uint64_t v8 = 6;
            }
            else
            {
              if (v29)
              {
                ((void (*)(OSObject *))a1->OSMetaClassBase::__vftable[18].release)(a1);
                if (CCLogStream::shouldLog())
                {
                  char v41 = (CCLogStream *)((uint64_t (*)(OSObject *))a1->OSMetaClassBase::__vftable[18].release)(a1);
                  CCLogStream::logAlertIf(v41, 0x400uLL, "[dk] %s@%d: cache op SUCCESS op %u\n", "setPEER_CACHE_CONTROL", 4324, *(_DWORD *)(a2 + 4));
                }
              }
              uint64_t v8 = 0;
              ++LODWORD(a1[3].meta[16].meta);
            }
          }
          else
          {
            uint64_t v8 = 12;
          }
          goto LABEL_79;
      }
      if (((uint64_t (*)(OSObject *))a1->OSMetaClassBase::__vftable[18].release)(a1))
      {
        ((void (*)(OSObject *))a1->OSMetaClassBase::__vftable[18].release)(a1);
        if (CCLogStream::shouldLog())
        {
          __int16 v40 = (CCLogStream *)((uint64_t (*)(OSObject *))a1->OSMetaClassBase::__vftable[18].release)(a1);
          CCLogStream::logAlert(v40, "[dk] %s@%d: invalid opcode %u\n", "setPEER_CACHE_CONTROL", 4185, *(_DWORD *)(a2 + 4));
        }
      }
    }
    uint64_t v8 = 22;
LABEL_79:
    IOFreeData();
    return v8;
  }
  if (a2) {
    return 12;
  }
  else {
    return 22;
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setPEER_CACHE_CONTROL(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::setPEER_CACHE_CONTROL((OSObject *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::setPEER_CACHE_CONTROL((OSObject *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::getAWDL_SYNCHRONIZATION_CHANNEL_SEQUENCE(IO80211SkywalkInterface *a1, unsigned char *a2)
{
  if (!*(_DWORD *)(*((void *)a1 + 17) + 664)) {
    return 3758097084;
  }
  uint64_t v4 = IOMallocZeroData();
  if (v4)
  {
    uint64_t v5 = (unsigned __int8 *)v4;
    if (a2)
    {
      v22[0] = v4;
      v22[1] = 0x8000080080;
      int v6 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
      unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
      if (AppleBCMWLANCommander::runVirtualIOVarGet(v6, InterfaceId, "awdl_chan_seq", (uint64_t)&kNoTxPayload, (uint64_t)v22, 0))
      {
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v21 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            CCLogStream::logAlert(v21, "[dk] %s@%d:Unable to get channel sequence", "getAWDL_SYNCHRONIZATION_CHANNEL_SEQUENCE", 4377);
          }
        }
        uint64_t v8 = 6;
      }
      else
      {
        uint64_t v9 = *v5;
        a2[5] = v9 + 1;
        int v10 = v5[1];
        a2[6] = v5[1] != 0;
        a2[7] = v5[3];
        a2[8] = v5[2];
        a2[9] = v5[4];
        if (v10)
        {
          uint64_t v11 = a2 + 12;
          uint64_t v12 = 3;
          do
          {
            if (*(_WORD *)&v5[2 * v12])
            {
              uint64_t v13 = __rev16(*(unsigned __int16 *)&v5[2 * v12]);
              uint64_t ChanSpecHandler = (int **)AppleBCMWLANCore::getChanSpecHandler(*(AppleBCMWLANCore **)(*((void *)a1 + 17)
                                                                                                  + 64));
              AppleBCMWLANChanSpec::getAppleChannelSpec(ChanSpecHandler, v13);
              ChanSpecConvToApple80211Channel();
              LOBYTE(v9) = *v5;
            }
            unint64_t v15 = v12 - 3;
            ++v12;
            v11 += 12;
          }
          while (v15 < v9);
        }
        else
        {
          uint64_t v16 = v9 + 1;
          unint64_t v17 = v5 + 6;
          int v18 = a2 + 16;
          do
          {
            int v19 = *v17++;
            _DWORD *v18 = v19;
            v18 += 3;
            --v16;
          }
          while (v16);
        }
        uint64_t v8 = 0;
      }
    }
    else
    {
      uint64_t v8 = 22;
    }
    IOFreeData();
  }
  else if (a2)
  {
    return 12;
  }
  else
  {
    return 22;
  }
  return v8;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::getAWDL_SYNCHRONIZATION_CHANNEL_SEQUENCE(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANProximityInterface::getAWDL_SYNCHRONIZATION_CHANNEL_SEQUENCE((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::getAWDL_SYNCHRONIZATION_CHANNEL_SEQUENCE((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::setAWDL_SYNCHRONIZATION_CHANNEL_SEQUENCE(AppleBCMWLANProximityInterface *a1, unsigned char *a2)
{
  unsigned __int16 v29 = 0;
  if (a2[5] - 33 >= 0xFFFFFFE0 && a2[6] < 2u)
  {
    uint64_t v6 = IOMallocZeroData();
    if (!v6) {
      return 12;
    }
    uint64_t v7 = v6;
    if ((a2[4] & 0x30) != 0)
    {
      uint64_t v8 = AppleBCMWLANProximityInterface::buildChanSequenceCommand(a1, a2, 0);
      uint64_t v9 = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
      if (v8)
      {
        if (v9)
        {
          (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            int v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
            (*(void (**)(AppleBCMWLANProximityInterface *, uint64_t))(*(void *)a1 + 856))(a1, v8);
            CCLogStream::logAlert(v10, "[dk] %s@%d: SDBChanSeqRequest ON/OFF (%x) Failed with retVal  (%x) : %s \n");
          }
        }
        goto LABEL_28;
      }
      if (v9)
      {
        (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          unint64_t v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
          int v16 = a2[4];
          unint64_t v17 = (const char *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *, void))(*(void *)a1 + 856))(a1, 0);
          CCLogStream::logWarnIf(v15, 0x400uLL, "[dk] %s@%d: SDBChanSeqRequest ON/OFF (%x) Success with retVal  (%x) : %s \n", "setAWDL_SYNCHRONIZATION_CHANNEL_SEQUENCE", 4439, v16, 0, v17);
        }
      }
LABEL_29:
      memcpy((void *)(*((void *)a1 + 17) + 124), a2, 0x190uLL);
      uint64_t v4 = 0;
      goto LABEL_30;
    }
    uint64_t v11 = AppleBCMWLANProximityInterface::buildAWDLChanSequence(a1, a2, v6, &v29);
    uint64_t v12 = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
    if (v11)
    {
      if (!v12) {
        goto LABEL_28;
      }
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
      if (!CCLogStream::shouldLog()) {
        goto LABEL_28;
      }
      uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v25 = 4449;
      uint64_t v26 = (*(uint64_t (**)(AppleBCMWLANProximityInterface *, uint64_t))(*(void *)a1 + 856))(a1, v11);
      int v14 = "[dk] %s@%d: AWDLChanSeqRequest Failed with retVal : \n %s";
    }
    else
    {
      uint64_t v18 = v29;
      IO80211HexdumpIf();
      v28[0] = a1;
      v28[1] = AppleBCMWLANProximityInterface::handleProxIovarAsyncCallBack;
      void v28[2] = 0;
      int v19 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
      unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
      if (v18) {
        uint64_t v21 = v7;
      }
      else {
        uint64_t v21 = 0;
      }
      v27[0] = v21;
      v27[1] = v18;
      uint64_t v22 = AppleBCMWLANCommander::sendVirtualIOVarSet(v19, InterfaceId, "awdl_chan_seq", (uint64_t)v27, kNoRxExpected, (uint64_t)v28, 0);
      if (!v22) {
        goto LABEL_29;
      }
      uint64_t v23 = v22;
      if (!(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1)
        || ((*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1),
            !CCLogStream::shouldLog()))
      {
LABEL_28:
        uint64_t v4 = 6;
LABEL_30:
        IOFreeData();
        return v4;
      }
      uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v25 = 4458;
      uint64_t v26 = (*(uint64_t (**)(AppleBCMWLANProximityInterface *, uint64_t))(*(void *)a1 + 856))(a1, v23);
      int v14 = "[dk] %s@%d: Unable to send awdl_chan_seq\n %s";
    }
    CCLogStream::logAlert(v13, v14, "setAWDL_SYNCHRONIZATION_CHANNEL_SEQUENCE", v25, v26);
    goto LABEL_28;
  }
  if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1))
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      unint64_t v24 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v24, "[dk] %s@%d: AWDL chan seq params: Something is wrong!! length %u encoding %u\n", "setAWDL_SYNCHRONIZATION_CHANNEL_SEQUENCE", 4421, a2[5], a2[6]);
    }
  }
  return 22;
}

uint64_t AppleBCMWLANProximityInterface::buildChanSequenceCommand(AppleBCMWLANProximityInterface *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t P2PNANMgmtDataInterface = AppleBCMWLANCore::getP2PNANMgmtDataInterface(*(AppleBCMWLANCore **)(*((void *)a1 + 17)
                                                                                              + 64));
  char v50 = 0;
  int v49 = 0;
  unsigned __int16 v48 = 0;
  uint64_t v7 = IOMallocZeroData();
  if (v7)
  {
    uint64_t v8 = v7;
    *(_DWORD *)uint64_t v7 = 16875520;
    *(_WORD *)(v7 + 4) = 1;
    *(_DWORD *)(v7 + 8) = 1;
    int v47 = 8;
    uint64_t v9 = v7 + 16;
    if (((v7 + 16) & 3) != 0)
    {
      v9 += 4 - ((v7 + 16) & 3u);
      int v49 = 4 - ((v7 + 16) & 3);
    }
    if (a2)
    {
      char v50 = 1;
      *(_WORD *)uint64_t v9 = 1;
      *(_DWORD *)(v9 + 4) = 0;
      int v47 = 16;
      uint64_t v10 = v9 + 8;
      uint64_t v11 = AppleBCMWLANProximityInterface::buildAWDLChanSequence(a1, a2, v9 + 8, &v48);
      if (v11)
      {
        uint64_t v12 = v11;
        if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
            CCLogStream::logCrit(v13, "[dk] %s@%d:%s[%d]:FAILED to setup AWDL channel sequence\n", "buildChanSequenceCommand", 5643, "buildChanSequenceCommand", 5643);
          }
        }
        goto LABEL_65;
      }
      uint64_t v27 = v48;
      *(_WORD *)(v9 + 2) = v48 + 4;
      v9 += v27 + 8;
      if ((v9 & 3) != 0)
      {
        uint64_t v28 = 4 - (v9 & 3);
        v9 += v28;
        v49 += v28;
      }
      int v14 = v47 + v27;
      v47 += v27;
      if (!a3)
      {
LABEL_35:
        if (!v50)
        {
LABEL_57:
          uint64_t v12 = 0;
          goto LABEL_65;
        }
        if (!a2)
        {
          if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1))
          {
            (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
            if (CCLogStream::shouldLog())
            {
              __int16 v40 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
              CCLogStream::logCrit(v40, "[dk] %s@%d:%s[%d] : Neither channel sequences specified. Bogus command ?\n");
            }
          }
          goto LABEL_64;
        }
        AppleBCMWLANProximityInterface::fillSliceDataForStandAloneAWDL(a1, a2, v10, v9, &v50, &v47, &v49);
        if ((a2[4] & 0x10) != 0)
        {
          char v29 = 4;
          uint64_t v23 = a1;
        }
        else
        {
          uint64_t v23 = a1;
          if ((a2[4] & 0x20) == 0)
          {
LABEL_45:
            *(unsigned char *)(v8 + 1AppleBCMWLANJoinAdapter::free(this - 3) = v50;
            __int16 v30 = v49;
            unsigned __int16 v31 = v47 + v49;
            *(_WORD *)(v8 + 6) = v47 + v49;
            if (v31 >= 0x7F5u
              && (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v23 + 1024))(v23)
              && ((*(void (**)(IO80211SkywalkInterface *))(*(void *)v23 + 1024))(v23),
                  CCLogStream::shouldLog()))
            {
              char v42 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v23 + 1024))(v23);
              CCLogStream::logCrit(v42, "[dk] %s@%d:%s[%d] : COMMAND BUF SIZE Exceeded : Need %d. Available %d ----\n", "buildChanSequenceCommand", 5761, "buildChanSequenceCommand", 5761, *(unsigned __int16 *)(v8 + 6) + 12, 2048);
              if (!a2)
              {
LABEL_50:
                uint64_t v32 = (unsigned __int16)(v30 + *(_WORD *)(v8 + 6) + 12);
                if (v30 + *(_WORD *)(v8 + 6) == 0xFFF4) {
                  uint64_t v33 = 0;
                }
                else {
                  uint64_t v33 = v8;
                }
                v46[0] = v33;
                v46[1] = v32;
                v45[0] = v23;
                v45[1] = AppleBCMWLANProximityInterface::handleProxSlotBSSCompletion;
                void v45[2] = 0;
                size_t v34 = *(AppleBCMWLANCommander **)(*((void *)v23 + 17) + 960);
                unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(v23);
                uint64_t v36 = AppleBCMWLANCommander::sendVirtualIOVarSet(v34, InterfaceId, "slot_bss", (uint64_t)v46, kNoRxExpected, (uint64_t)v45, 0);
                if (v36)
                {
                  uint64_t v37 = v36;
                  if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v23 + 1024))(v23))
                  {
                    (*(void (**)(IO80211SkywalkInterface *))(*(void *)v23 + 1024))(v23);
                    if (CCLogStream::shouldLog())
                    {
                      int v38 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v23 + 1024))(v23);
                      int v39 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)v23 + 856))(v23, v37);
                      CCLogStream::logAlert(v38, "[dk] %s@%d: Unable to send awdl_chan_seq\n %s", "buildChanSequenceCommand", 5805, v39);
                    }
                  }
LABEL_64:
                  uint64_t v12 = 6;
                  goto LABEL_65;
                }
                goto LABEL_57;
              }
            }
            else if (!a2)
            {
              goto LABEL_50;
            }
            memcpy((void *)(*((void *)v23 + 17) + 124), a2, 0x190uLL);
            goto LABEL_50;
          }
          char v29 = 9;
        }
LABEL_44:
        *(unsigned char *)(v8 + 12) = v29;
        goto LABEL_45;
      }
    }
    else
    {
      uint64_t v10 = 0;
      int v14 = 8;
      if (!a3) {
        goto LABEL_35;
      }
    }
    int v44 = a2;
    char v15 = v50;
    int v16 = v49;
    if (*(unsigned char *)(a3 + 6))
    {
      uint64_t v17 = 0;
      do
      {
        *(_WORD *)uint64_t v9 = 3;
        *(_DWORD *)(v9 + 4) = 0;
        unsigned int v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)P2PNANMgmtDataInterface + 2280))(P2PNANMgmtDataInterface, a3, v9 + 8, v17);
        if (v18)
        {
          *(_WORD *)(v9 + 2) = v18 + 4;
          v9 += 8 + v18;
          ++v15;
          v14 += v18 + 8;
        }
        uint64_t v19 = 4 - (v9 & 3);
        if ((v9 & 3) != 0) {
          int v20 = 4 - (v9 & 3);
        }
        else {
          int v20 = 0;
        }
        v16 += v20;
        if ((v9 & 3) == 0) {
          uint64_t v19 = 0;
        }
        v9 += v19;
        uint64_t v17 = (v17 + 1);
      }
      while (v17 < *(unsigned __int8 *)(a3 + 6));
      if (v15)
      {
        if (*(unsigned char *)(a3 + 6))
        {
          unsigned int v21 = 0;
          uint64_t v22 = a3 + 1284 * *(unsigned __int8 *)(a3 + 6) - 1276;
          uint64_t v23 = a1;
          while (1)
          {
            *(_WORD *)uint64_t v9 = 2;
            *(_DWORD *)(v9 + 4) = 0;
            *(unsigned char *)(v9 + 8) = v21;
            if ((AppleBCMWLANProximityInterface::convertCommittedAvailabilityToChanSpecSequence(a1, v22, (_OWORD *)(v9 + 12), (unsigned char *)(v9 + 9)) & 1) == 0)break; {
            uint64_t v24 = 4 - ((v9 + 140) & 3u);
            }
            int v25 = *(unsigned __int8 *)(v9 + 9);
            v14 += 2 * v25 + 12;
            ++v15;
            *(_WORD *)(v9 + 2) = 2 * v25 + 8;
            if (((v9 + 140) & 3) != 0) {
              int v26 = 4 - ((v9 + 140) & 3);
            }
            else {
              int v26 = 0;
            }
            v16 += v26;
            if (((v9 + 140) & 3) == 0) {
              uint64_t v24 = 0;
            }
            v9 += 140 + v24;
            ++v21;
            v22 -= 1284;
            if (v21 >= *(unsigned __int8 *)(a3 + 6)) {
              goto LABEL_43;
            }
          }
          if (!(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1))
          {
            uint64_t v12 = 6;
            goto LABEL_65;
          }
          (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            __int16 v43 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
            CCLogStream::logCrit(v43, "[dk] %s@%d:%s[%d]:FAILED to setup Slice %d Channel sequence ----\n");
          }
          goto LABEL_64;
        }
        uint64_t v23 = a1;
        goto LABEL_43;
      }
    }
    else
    {
      uint64_t v23 = a1;
      if (v50)
      {
LABEL_43:
        int v47 = v14;
        char v50 = v15;
        char v29 = 4;
        int v49 = v16;
        a2 = v44;
        goto LABEL_44;
      }
    }
    uint64_t v12 = 0;
LABEL_65:
    IOFreeData();
    return v12;
  }
  return 12;
}

uint64_t AppleBCMWLANProximityInterface::buildAWDLChanSequence(void *a1, unsigned char *a2, uint64_t a3, _WORD *a4)
{
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  *(unsigned char *)a3 = a2[5] - 1;
  *(unsigned char *)(a3 + AppleBCMWLANJoinAdapter::free(this - 3) = a2[7];
  *(unsigned char *)(a3 + 2) = a2[8];
  *(_WORD *)(a3 + 4) = -1;
  BssManager = (AppleBCMWLANBssManager *)AppleBCMWLANCore::getBssManager(*(AppleBCMWLANCore **)(a1[17] + 64));
  uint64_t CurrentBSS = AppleBCMWLANBssManager::getCurrentBSS(BssManager);
  uint64_t v66 = 0;
  if (CurrentBSS)
  {
    uint64_t v10 = CurrentBSS;
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)CurrentBSS + 256))(CurrentBSS);
    int v63 = (*(unsigned __int16 (**)(uint64_t))(*(void *)v10 + 264))(v10) >> 14;
    BOOL isDFSChannel = AppleBCMWLANCore::isDFSChannel(*(void **)(a1[17] + 64), v11, v63);
    (*(void (**)(void))(**(void **)(a1[17] + 64) + 896))();
    BOOL v13 = WORD2(v66) == 23128;
  }
  else
  {
    int v11 = 0;
    BOOL isDFSChannel = 0;
    BOOL v13 = 0;
    int v63 = 0;
  }
  if (v6[6])
  {
    *(unsigned char *)(v5 + 1) = AppleBCMWLANCore::getFWAPIVer(*(AppleBCMWLANCore **)(a1[17] + 64));
    unsigned int SupportedMaxBW = AppleBCMWLANCore::getSupportedMaxBW(*(AppleBCMWLANCore **)(a1[17] + 64));
    int v15 = v6[4] & 0xF;
    if ((v15 - 1) < 3) {
      uint64_t v16 = (v15 + 1);
    }
    else {
      uint64_t v16 = SupportedMaxBW;
    }
    unsigned int v17 = v6[9];
    if (v17 == 255)
    {
      int v19 = 1;
    }
    else
    {
      int v65 = v16;
      unsigned int ChanSpec = AppleBCMWLANCore::getChanSpec(*(void *)(a1[17] + 64), v17, &v65);
      *(_WORD *)(v5 + 4) = __rev16(ChanSpec);
      if (!ChanSpec)
      {
        LOBYTE(v6) = v6[9];
LABEL_89:
        if ((*(uint64_t (**)(void *))(*a1 + 1024))(a1))
        {
          (*(void (**)(void *))(*a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v53 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1024))(a1);
            long long v54 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 856))(a1, 3758096385);
            CCLogStream::logAlert(v53, "[dk] %s@%d: awdl_chan_seq: Couldn't find chanspec for specified channel: %d, %s Returning.\n", "buildAWDLChanSequence", 5369, v6, v54);
          }
        }
        return 6;
      }
      if (v65 <= 1) {
        int v19 = 1;
      }
      else {
        int v19 = v65;
      }
    }
    LOWORD(v21) = v6[5];
    if (v6[5])
    {
      long long v57 = a4;
      uint64_t v58 = v5;
      unint64_t v25 = 0;
      uint64_t v64 = v5 + 6;
      if ((int)v16 >= 4) {
        int v26 = 4;
      }
      else {
        int v26 = v16;
      }
      int v61 = v26;
      BOOL v62 = !isDFSChannel && !v13;
      if (isDFSChannel) {
        uint64_t v27 = "DFS";
      }
      else {
        uint64_t v27 = "-";
      }
      uint64_t v28 = "XZ";
      if (!v13) {
        uint64_t v28 = "-";
      }
      long long v55 = v28;
      long long v56 = v27;
      char v29 = v6 + 16;
      uint64_t v60 = v16;
      while (1)
      {
        int v30 = *v29;
        if (*v29)
        {
          int v65 = v16;
          int v31 = v29[1];
          if ((v31 & 0x10) != 0)
          {
            int v65 = v61;
            int v33 = 3;
            if (v11) {
              goto LABEL_42;
            }
            goto LABEL_48;
          }
          if ((v31 & 8) != 0)
          {
            int v33 = 0;
            if (v11) {
              goto LABEL_42;
            }
            goto LABEL_48;
          }
          if ((v31 & 0x2000) != 0)
          {
            int v33 = 1;
            if (v11)
            {
LABEL_42:
              BOOL v34 = v30 == v11 && v63 == v33;
              char v35 = v62;
              if (!v34) {
                char v35 = 1;
              }
              if (v35) {
                goto LABEL_48;
              }
              uint64_t v37 = (AppleBCMWLANBssManager *)AppleBCMWLANCore::getBssManager(*(AppleBCMWLANCore **)(a1[17] + 64));
              uint64_t v38 = *(void *)AppleBCMWLANBssManager::getCurrentBSS(v37);
              unsigned int v39 = (*(uint64_t (**)(void))(v38 + 264))();
              int v40 = (unsigned __int16)v39 >> 14;
              unsigned int v41 = (v39 >> 11) & 7;
              if (v40 == 3 && v41 >= 5)
              {
                int v65 = 4;
                *(_WORD *)(v64 + 2 * v25) = __rev16(AppleBCMWLANCore::getChanSpec(*(void *)(a1[17] + 64), v11, 3, &v65));
                uint64_t v16 = v60;
                if ((*(uint64_t (**)(void *))(*a1 + 1024))(a1))
                {
                  (*(void (**)(void *))(*a1 + 1024))(a1);
                  if (CCLogStream::shouldLog())
                  {
                    int v44 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1024))(a1);
                    CCLogStream::logAlert(v44, "[dk] %s@%d: for %s||%s 5G Channel %u (infra: %d) try to use higher bandwidth (%d) than 80MHz result chanSpec 0x%X\n", "buildAWDLChanSequence");
                  }
                }
              }
              else
              {
                unsigned __int8 v59 = v39;
                int v65 = (v39 >> 11) & 7;
                unsigned int v43 = AppleBCMWLANCore::getChanSpec(*(void *)(a1[17] + 64), v11, v40, &v65);
                if (v65 != v41)
                {
                  if ((*(uint64_t (**)(void *))(*a1 + 1024))(a1))
                  {
                    (*(void (**)(void *))(*a1 + 1024))(a1);
                    if (CCLogStream::shouldLog())
                    {
                      unsigned __int16 v48 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1024))(a1);
                      CCLogStream::logAlert(v48, "[dk] %s@%d: requested bandwidth %d and actually bandwidth %d\n", "buildAWDLChanSequence", 5320, v41, v65);
                    }
                  }
                }
                *(_WORD *)(v64 + 2 * v25) = __rev16(v43);
                if ((*(uint64_t (**)(void *))(*a1 + 1024))(a1))
                {
                  (*(void (**)(void *))(*a1 + 1024))(a1);
                  if (CCLogStream::shouldLog())
                  {
                    int v47 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1024))(a1);
                    CCLogStream::logAlertIf(v47, 0x400uLL, "[dk] %s@%d: applying bcm channel spec for %s||%s channel (%d) infraChan=%d, chanSpec=%d, bcmSpec=0x%x\n", "buildAWDLChanSequence", 5323, v56, v55, v25, v11, v59, v43);
                  }
                }
                BOOL v34 = v40 == 3;
                uint64_t v16 = v60;
                if (v34)
                {
                  uint64_t ChanSpecHandler = (int **)AppleBCMWLANCore::getChanSpecHandler(*(AppleBCMWLANCore **)(a1[17] + 64));
                  if ((AppleBCMWLANChanSpec::isValid5GChanSpec(ChanSpecHandler, v43) & 1) == 0)
                  {
                    if ((*(uint64_t (**)(void *))(*a1 + 1024))(a1))
                    {
                      (*(void (**)(void *))(*a1 + 1024))(a1);
                      if (CCLogStream::shouldLog())
                      {
                        unint64_t v46 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1024))(a1);
                        CCLogStream::logAlert(v46, "[dk] %s@%d: invalid 5G bcm channel spec for %s||%s channel (%d) infraChan=%d, chanSpec=%d, bcmSpec=0x%x\n", "buildAWDLChanSequence");
                      }
                    }
                  }
                }
              }
LABEL_49:
              if (v65 > v19) {
                int v19 = v65;
              }
              goto LABEL_51;
            }
LABEL_48:
            unsigned int v36 = AppleBCMWLANCore::getChanSpec(*(void *)(a1[17] + 64), v30, v33, &v65);
            *(_WORD *)(v64 + 2 * v25) = __rev16(v36);
            if (!v36)
            {
              LODWORD(v6) = *v29;
              goto LABEL_89;
            }
            goto LABEL_49;
          }
          if ((*(uint64_t (**)(void *))(*a1 + 1024))(a1))
          {
            (*(void (**)(void *))(*a1 + 1024))(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v32 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1024))(a1);
              CCLogStream::logAlert(v32, "[dk] %s@%d: channel %u[0x%X] has no band info\n", "buildAWDLChanSequence", 5299, *v29, v29[1]);
            }
          }
        }
LABEL_51:
        ++v25;
        unint64_t v21 = v6[5];
        v29 += 3;
        if (v25 >= v21)
        {
          a4 = v57;
          uint64_t v5 = v58;
          break;
        }
      }
    }
    LOWORD(v21) = 2 * v21;
  }
  else
  {
    *(unsigned char *)(v5 + 1) = 0;
    int v20 = v6[9];
    if (v20 != 255) {
      *(_WORD *)(v5 + 4) = v20;
    }
    LOWORD(v21) = v6[5];
    if (v6[5])
    {
      unint64_t v22 = 0;
      uint64_t v23 = (int *)(v6 + 16);
      do
      {
        int v24 = *v23;
        v23 += 3;
        *(unsigned char *)(v5 + 6 + v22++) = v24;
        unint64_t v21 = v6[5];
      }
      while (v22 < v21);
    }
    uint64_t v16 = 2;
    int v19 = 2;
  }
  *a4 = v21 + 6;
  if ((*(uint64_t (**)(void *))(*a1 + 1024))(a1))
  {
    (*(void (**)(void *))(*a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      int v52 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1024))(a1);
      CCLogStream::logAlertIf(v52, 0x400uLL, "[dk] %s@%d: set channel sequence len %u step %u enc %u flags %u max_bw_req %s, bw_used %s\n", "buildAWDLChanSequence", 5364, v6[5], v6[7], v6[6], v6[4], BW_STRING[v16], BW_STRING[v19]);
    }
  }
  if (*(unsigned char *)(v5 + 6)) {
    return 0;
  }
  if (v6[6])
  {
    int v65 = 2;
    *(_WORD *)(v5 + 6) = __rev16(AppleBCMWLANCore::getChanSpec(*(void *)(a1[17] + 64), 6, 0, &v65));
    if ((*(uint64_t (**)(void *))(*a1 + 1024))(a1))
    {
      (*(void (**)(void *))(*a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        char v50 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1024))(a1);
        CCLogStream::logAlert(v50, "[dk] %s@%d:chan_sequence[0]==0, forcing to %d (%02X) \n");
      }
    }
    return 0;
  }
  *(unsigned char *)(v5 + 6) = 6;
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 1024))(a1);
  if (result)
  {
    (*(void (**)(void *))(*a1 + 1024))(a1);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v51 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1024))(a1);
      CCLogStream::logAlert(v51, "[dk] %s@%d:chan_sequence[0]==0, forcing to %d\n");
      return 0;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setAWDL_SYNCHRONIZATION_CHANNEL_SEQUENCE(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANProximityInterface::setAWDL_SYNCHRONIZATION_CHANNEL_SEQUENCE((AppleBCMWLANProximityInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::setAWDL_SYNCHRONIZATION_CHANNEL_SEQUENCE((AppleBCMWLANProximityInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::setAWDL_OOB_REQUEST(AppleBCMWLANProximityInterface *a1, uint64_t a2)
{
  if (!*(_DWORD *)(*((void *)a1 + 17) + 664)) {
    return 3758097084;
  }
  *(_DWORD *)&v13[7] = 0;
  uint64_t v12 = 0;
  uint64_t v11 = 0;
  *(void *)BOOL v13 = 0;
  int v9 = *(_DWORD *)(a2 + 4);
  __int16 v10 = *(_WORD *)(a2 + 8);
  int v7 = *(_DWORD *)(a2 + 22);
  __int16 v8 = *(_WORD *)(a2 + 26);
  *(_WORD *)&v13[8] = *(_WORD *)(a2 + 40);
  LODWORD(v12) = *(unsigned __int16 *)(a2 + 20);
  if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1))
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logInfoIf(v6, 0x400uLL, "[dk] %s@%d: OOB sent with payload len %u \n", "setAWDL_OOB_REQUEST", 4488, *(unsigned __int16 *)(a2 + 40));
    }
  }
  v14.iov_base = &v7;
  v14.iov_leuint64_t n = 38;
  uint64_t v4 = *(unsigned __int16 *)(a2 + 40);
  uint64_t v15 = *(void *)(a2 + 48);
  uint64_t v16 = v4;
  return AppleBCMWLANProximityInterface::sendUnicastAFIOVar(a1, &v14, 2u);
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setAWDL_OOB_REQUEST(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::setAWDL_OOB_REQUEST((AppleBCMWLANProximityInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::setAWDL_OOB_REQUEST((AppleBCMWLANProximityInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::setLLW_PARAMSCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = (void *)result;
    if (*(void *)(a2 + 8)) {
      uint64_t v5 = *(const char **)(a2 + 8);
    }
    else {
      uint64_t v5 = "(null)";
    }
    if ((*(uint64_t (**)(uint64_t))(*(void *)result + 1024))(result))
    {
      (*(void (**)(void *))(*v4 + 1024))(v4);
      if (CCLogStream::shouldLog())
      {
        int v7 = (CCLogStream *)(*(uint64_t (**)(void *))(*v4 + 1024))(v4);
        __int16 v8 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*v4 + 856))(v4, a3);
        CCLogStream::logAlert(v7, "[dk] %s@%d: ERROR: Cannot set llwParams (%s): %s\n", "setLLW_PARAMSCallback", 4503, v5, v8);
      }
    }
    FaultReporter = (CCFaultReporter *)AppleBCMWLANCore::getFaultReporter(*(AppleBCMWLANCore **)(v4[17] + 64));
    return CCFaultReporter::reportFault(FaultReporter, 5u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANProximityInterface.cpp", 0x119Au, "setLLW_PARAMSCallback", 0, -469793487, " %s iovar retval %x", v5, a3);
  }
  return result;
}

uint64_t AppleBCMWLANProximityInterface::setLLW_PARAMS(IO80211SkywalkInterface *a1, uint64_t a2)
{
  int v57 = 0;
  memset(v56, 170, sizeof(v56));
  unint64_t v4 = IOMallocZeroData();
  unint64_t v5 = v4;
  if (v4) {
    int64_t v6 = v4;
  }
  else {
    int64_t v6 = 0;
  }
  if (v4) {
    uint64_t v7 = 1024;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v4) {
    BOOL v8 = v4 < 0xFFFFFFFFFFFFFC01;
  }
  else {
    BOOL v8 = 0;
  }
  if (v4) {
    int64_t v9 = v4 + 1023;
  }
  else {
    int64_t v9 = 0;
  }
  uint64_t Bus = AppleBCMWLANCore::getBus(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64));
  if (((*(uint64_t (**)(uint64_t))(*(void *)Bus + 800))(Bus) & 1) == 0)
  {
    uint64_t v42 = 3758097095;
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v49 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v49, "[dk] %s@%d:FW does not support llw", "setLLW_PARAMS", 4540);
        uint64_t v42 = 3758097095;
      }
    }
    goto LABEL_75;
  }
  if (!a2)
  {
    uint64_t v42 = 3758097090;
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        char v50 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v50, "[dk] %s@%d:bad argument\n", "setLLW_PARAMS", 4541);
        uint64_t v42 = 3758097090;
      }
    }
LABEL_75:
    if (v5) {
      IOFreeData();
    }
    return v42;
  }
  if (v5)
  {
    unint64_t v11 = 0;
    uint64_t v12 = (int *)&unk_100304A18;
    BOOL v13 = *(unsigned char *)(a2 + 11) == 0;
    if (!*(unsigned char *)(a2 + 11)) {
      uint64_t v12 = &v57;
    }
    *(_WORD *)unint64_t v5 = 0x8000;
    if (v13) {
      char v14 = 1;
    }
    else {
      char v14 = 3;
    }
    *(unsigned char *)(v5 + 2) = v14;
    *(unsigned char *)(v5 + AppleBCMWLANJoinAdapter::free(this - 3) = 1;
    uint64_t v15 = (int *)(a2 + 4);
    unsigned int v16 = 4;
    while (1)
    {
      if (!v8)
      {
        LODWORD(v26) = 4;
        goto LABEL_80;
      }
      int64_t v17 = v5 + v16;
      BOOL v18 = v17 + 7 >= v6 && v17 + 7 <= v9;
      BOOL v19 = v18 && (unint64_t)v17 < 0xFFFFFFFFFFFFFFF9;
      BOOL v20 = v19 && v6 <= v17;
      if (!v20 || v9 < v17) {
        break;
      }
      int v22 = v12[v11];
      *(_WORD *)int64_t v17 = v22;
      *(_DWORD *)(v17 + 4) = 1;
      uint64_t v23 = v16 + 8;
      int v24 = (_WORD *)(v5 + v23);
      uint64_t v25 = v5 + v23 + 3;
      if (v25 < v6 || v25 > v9 || v5 + v23 >= 0xFFFFFFFFFFFFFFFDLL || v6 > (uint64_t)v24 || v9 < (uint64_t)v24)
      {
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v53 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            CCLogStream::logAlert(v53, "[dk] %s@%d: Range check failed, count[%u] length[%u] chkSize[%lu], getSize[%lu]\n", "setLLW_PARAMS", 4574, *(unsigned __int8 *)(v5 + 2), v23, 4, v7);
          }
        }
        LOWORD(v26) = v23;
        goto LABEL_71;
      }
      *int v24 = 1;
      uint64_t v26 = v16 + 12;
      uint64_t v27 = (_WORD *)(v5 + v26);
      uint64_t v28 = v5 + v26 + 1;
      if (v28 < v6 || v28 > v9 || v5 + v26 == -1 || v6 > (uint64_t)v27 || v9 < (uint64_t)v27)
      {
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            unsigned __int16 v45 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            CCLogStream::logAlert(v45, "[dk] %s@%d: Range check failed, count[%u] length[%u] chkSize[%lu], getSize[%lu]\n", "setLLW_PARAMS", 4586, *(unsigned __int8 *)(v5 + 2), v26, 2, v7);
          }
        }
        goto LABEL_71;
      }
      *uint64_t v27 = v22;
      if ((unsigned __int16)v22 == 2)
      {
        v27[1] = 12;
        uint64_t v26 = v16 + 16;
        int64_t v32 = v5 + v26;
        uint64_t v33 = v5 + v26 + 11;
        if (v33 < v6 || v33 > v9 || v5 + v26 >= 0xFFFFFFFFFFFFFFF5 || v6 > v32 || v9 < v32)
        {
          if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
          {
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            if (CCLogStream::shouldLog())
            {
              int v47 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              CCLogStream::logAlert(v47, "[dk] %s@%d: Range check failed, count[%u] length[%u] chkSize[%lu], getSize[%lu]\n", "setLLW_PARAMS", 4637, *(unsigned __int8 *)(v5 + 2), v26, 12, v7);
            }
          }
          goto LABEL_71;
        }
        int v34 = *v15;
        *(_WORD *)(v32 + 4) = *(_WORD *)(a2 + 8);
        *(_DWORD *)int64_t v32 = v34;
        *(unsigned char *)(v32 + 8) = *(unsigned char *)(a2 + 10);
        LOWORD(v34) = *(_WORD *)(v32 + 6) | *(unsigned char *)(a2 + 24) & 1;
        *(_WORD *)(v32 + 6) = v34;
        LOWORD(v34) = v34 | *(unsigned char *)(a2 + 24) & 2;
        *(_WORD *)(v32 + 6) = v34;
        LOWORD(v34) = v34 | *(unsigned char *)(a2 + 24) & 4;
        *(_WORD *)(v32 + 6) = v34;
        *(_WORD *)(v32 + 6) = v34 | *(unsigned char *)(a2 + 24) & 8;
        LODWORD(v26) = v16 + 28;
      }
      else if ((unsigned __int16)v22 == 1)
      {
        v27[1] = 20;
        uint64_t v26 = v16 + 16;
        int64_t v35 = v5 + v26;
        uint64_t v36 = v5 + v26 + 19;
        if (v36 < v6 || v36 > v9 || v5 + v26 >= 0xFFFFFFFFFFFFFFEDLL || v6 > v35 || v9 < v35)
        {
          if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
          {
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            if (CCLogStream::shouldLog())
            {
              long long v54 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              CCLogStream::logAlert(v54, "[dk] %s@%d: Range check failed, count[%u] length[%u] chkSize[%lu], getSize[%lu]\n", "setLLW_PARAMS", 4612, *(unsigned __int8 *)(v5 + 2), v26, 20, v7);
            }
          }
          goto LABEL_71;
        }
        int v37 = *v15;
        *(_WORD *)(v35 + 4) = *(_WORD *)(a2 + 8);
        *(_DWORD *)int64_t v35 = v37;
        *(unsigned char *)(v35 + 15) = *(unsigned char *)(a2 + 10);
        *(_WORD *)(v35 + 16) = *(_WORD *)(a2 + 21);
        *(_DWORD *)(v35 + 6) = *(_DWORD *)(a2 + 14);
        *(unsigned char *)(v35 + 18) = 14;
        *(unsigned char *)(v35 + 14) = 5;
        LOWORD(v37) = (2 * (*(_WORD *)(a2 + 18) & 1)) | *(_WORD *)(v35 + 10);
        *(_WORD *)(v35 + 10) = v37;
        LOWORD(v37) = (*(_WORD *)(a2 + 18) >> 1) & 1 | v37;
        *(_WORD *)(v35 + 10) = v37;
        *(_WORD *)(v35 + 10) = *(_WORD *)(a2 + 18) & 4 | v37;
        LOBYTE(v37) = (*(unsigned char *)(a2 + 18) >> 3) & 0x10 | *(unsigned char *)(v35 + 12);
        *(unsigned char *)(v35 + 12) = v37;
        *(unsigned char *)(v35 + 12) = (*(unsigned char *)(a2 + 18) >> 3) & 0xF | v37;
        LOWORD(v37) = *(unsigned __int8 *)(a2 + 20) >> 4;
        *(unsigned char *)(v35 + 1AppleBCMWLANJoinAdapter::free(this - 3) = *(unsigned char *)(a2 + 20) >> 4;
        *(unsigned char *)(v35 + 1AppleBCMWLANJoinAdapter::free(this - 3) = *(unsigned char *)(a2 + 20) & 0xF | (16 * (v37 & 0xF));
        LODWORD(v26) = v16 + 36;
      }
      else if (!(_WORD)v22)
      {
        if ((uint64_t)v27 + 3 < v6 || (uint64_t)v27 + 3 > v9 || (unint64_t)v27 >= 0xFFFFFFFFFFFFFFFDLL)
        {
          if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
          {
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            if (CCLogStream::shouldLog())
            {
              unint64_t v46 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              CCLogStream::logAlert(v46, "[dk] %s@%d: Range check failed, count[%u] length[%u] chkSize[%lu], getSize[%lu]\n", "setLLW_PARAMS", 4595, *(unsigned __int8 *)(v5 + 2), v26, 4, v7);
            }
          }
          goto LABEL_71;
        }
        v27[1] = 4;
        char v29 = v27 + 2;
        int v30 = (char *)v27 + 7;
        BOOL v31 = (unint64_t)(v27 + 2) >= 0xFFFFFFFFFFFFFFFDLL;
        if ((uint64_t)v30 < v6 || (uint64_t)v30 > v9 || v31 || v6 > (uint64_t)v29 || v9 < (uint64_t)v29)
        {
          if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
          {
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            if (CCLogStream::shouldLog())
            {
              unsigned __int16 v48 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              CCLogStream::logAlert(v48, "[dk] %s@%d: Range check failed, count[%u] length[%u] chkSize[%lu], getSize[%lu]\n", "setLLW_PARAMS", 4601, *(unsigned __int8 *)(v5 + 2), v26, 4, v7);
            }
          }
          goto LABEL_71;
        }
        *char v29 = *(unsigned __int8 *)(a2 + 11);
        LODWORD(v26) = v16 + 20;
      }
      *(_WORD *)(v17 + 2) = v26 - (v16 + 8) + 4;
      ++v11;
      unsigned int v16 = v26;
      if (v11 >= *(unsigned __int8 *)(v5 + 2)) {
        goto LABEL_71;
      }
    }
    LODWORD(v26) = v16;
LABEL_80:
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v44 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v44, "[dk] %s@%d: Range check failed, count[%u] length[%u] chkSize[%lu], getSize[%lu]\n", "setLLW_PARAMS", 4560, *(unsigned __int8 *)(v5 + 2), v26, 8, v7);
      }
    }
LABEL_71:
    v56[0] = a1;
    v56[1] = AppleBCMWLANProximityInterface::setLLW_PARAMSCallback;
    if ((_WORD)v26) {
      int64_t v38 = v6;
    }
    else {
      int64_t v38 = 0;
    }
    void v56[2] = 0;
    v56[3] = v38;
    v56[4] = (unsigned __int16)v26;
    unsigned int v39 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
    uint64_t v41 = AppleBCMWLANCommander::sendVirtualIOVarSet(v39, InterfaceId, "hp2p", (uint64_t)&v56[3], kNoRxExpected, (uint64_t)v56, 0);
    uint64_t v42 = 0;
    if (v41)
    {
      uint64_t v52 = v41;
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          long long v55 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logAlert(v55, "[dk] %s@%d:hp2p set iovar failed\n", "setLLW_PARAMS", 4655);
        }
      }
      uint64_t v42 = v52;
    }
    goto LABEL_75;
  }
  uint64_t v42 = 3758097085;
  if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
  {
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v51 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v51, "[dk] %s@%d:hp2p cmd alloc fail\n", "setLLW_PARAMS", 4542);
    }
  }
  return v42;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setLLW_PARAMS(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::setLLW_PARAMS((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::setLLW_PARAMS((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::getLLW_PARAMS(IO80211SkywalkInterface *a1, uint64_t a2)
{
  memset(v43, 170, sizeof(v43));
  if (IO80211SkywalkInterface::getInterfaceId(a1) == -1
    || IO80211SkywalkInterface::getInterfaceId(a1) == 255
    || IO80211SkywalkInterface::getInterfaceId(a1) >= 0xC)
  {
    uint64_t v4 = 3758097122;
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v36 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v36, "[dk] %s@%d:ERROR: %s:%u AWDL Chip interface not initialized, bailing out\n", "getLLW_PARAMS", 4674, "getLLW_PARAMS", 4674);
        return 3758097122;
      }
    }
    return v4;
  }
  uint64_t v6 = IOMallocZeroData();
  uint64_t v7 = IOMallocZeroData();
  uint64_t v8 = *(void *)AppleBCMWLANCore::getBus(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64));
  if (((*(uint64_t (**)(void))(v8 + 800))() & 1) == 0)
  {
    uint64_t v4 = 3758097095;
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v37 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v37, "[dk] %s@%d:FW does not support llw", "getLLW_PARAMS", 4679);
        uint64_t v4 = 3758097095;
        if (v7) {
          goto LABEL_29;
        }
        goto LABEL_30;
      }
    }
    goto LABEL_55;
  }
  if (!a2)
  {
    uint64_t v4 = 3758097090;
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int64_t v38 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v38, "[dk] %s@%d:bad argument\n", "getLLW_PARAMS", 4680);
        uint64_t v4 = 3758097090;
        if (v7) {
          goto LABEL_29;
        }
        goto LABEL_30;
      }
    }
    goto LABEL_55;
  }
  if (!v6)
  {
    uint64_t v4 = 3758097085;
    if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)
      || ((*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1),
          !CCLogStream::shouldLog()))
    {
LABEL_55:
      if (v7) {
        goto LABEL_29;
      }
      goto LABEL_30;
    }
    unsigned int v39 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    CCLogStream::logAlert(v39, "[dk] %s@%d:hp2p cmd alloc fail\n");
LABEL_58:
    if (v7) {
      goto LABEL_29;
    }
    goto LABEL_30;
  }
  if (!v7)
  {
    uint64_t v4 = 3758097085;
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v40 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v40, "[dk] %s@%d:hp2p cmd resp alloc fail\n", "getLLW_PARAMS", 4682);
      }
    }
    goto LABEL_31;
  }
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  *(_DWORD *)uint64_t v6 = 229376;
  do
  {
    uint64_t v11 = v6 + v9;
    *(_WORD *)(v11 + 4) = dword_100304A18[v10];
    *(_WORD *)(v11 + 6) = 4;
    *(_DWORD *)(v11 + 8) = 1;
    ++v10;
    v9 += 8;
  }
  while (v10 < *(unsigned __int8 *)(v6 + 2));
  uint64_t v12 = v9 + 4;
  if (v9 == -4) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v6;
  }
  void v43[2] = v13;
  v43[3] = v12;
  v43[0] = v7;
  v43[1] = 0x40000000400;
  char v14 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  uint64_t v16 = AppleBCMWLANCommander::runVirtualIOVarGet(v14, InterfaceId, "hp2p", (uint64_t)&v43[2], (uint64_t)v43, 0);
  if (v16)
  {
    uint64_t v4 = v16;
    if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
      goto LABEL_55;
    }
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    if (!CCLogStream::shouldLog()) {
      goto LABEL_55;
    }
    uint64_t v42 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    CCLogStream::logAlert(v42, "[dk] %s@%d:hp2p get iovar failed\n");
    goto LABEL_58;
  }
  if (!*(unsigned char *)(v7 + 2))
  {
LABEL_28:
    uint64_t v4 = 0;
    goto LABEL_29;
  }
  int v17 = 0;
  BOOL v18 = (_DWORD *)(a2 + 4);
  unsigned int v19 = 4;
  while (1)
  {
    BOOL v20 = (unsigned __int16 *)(v7 + v19);
    int v21 = *v20;
    if (v21 == 2)
    {
      int v23 = *((_DWORD *)v20 + 2);
      *(_WORD *)(a2 + 8) = v20[6];
      _DWORD *v18 = v23;
      *(unsigned char *)(a2 + 10) = *((unsigned char *)v20 + 16);
      int v24 = *(unsigned char *)(a2 + 24) & 0xFE | v20[7] & 1;
      *(unsigned char *)(a2 + 24) = v24;
      unsigned int v25 = v24 & 0xFFFFFFFD | (2 * ((*((unsigned __int8 *)v20 + 14) >> 1) & 1));
      *(unsigned char *)(a2 + 24) = v25;
      unsigned int v26 = v25 & 0xFFFFFFFB | (4 * ((*((unsigned __int8 *)v20 + 14) >> 2) & 1));
      *(unsigned char *)(a2 + 24) = v26;
      *(unsigned char *)(a2 + 24) = v26 & 0xF7 | v20[7] & 8;
      unint64_t v22 = 16;
      goto LABEL_26;
    }
    if (v21 != 1) {
      break;
    }
    int v27 = *((_DWORD *)v20 + 2);
    *(_WORD *)(a2 + 8) = v20[6];
    _DWORD *v18 = v27;
    int v28 = *(unsigned __int16 *)(a2 + 18);
    *(unsigned char *)(a2 + 10) = *((unsigned char *)v20 + 23);
    *(_DWORD *)(a2 + 14) = *(_DWORD *)(v20 + 7);
    *(_WORD *)(a2 + 21) = v20[12];
    unsigned int v29 = v28 & 0xFFFFFFFE | (*(unsigned __int8 *)(a2 + 20) << 16) | v20[9] & 1;
    *(_WORD *)(a2 + 18) = v29;
    unsigned int v30 = v29 & 0xFFFFFFFD | (2 * ((v20[9] >> 1) & 1));
    *(_WORD *)(a2 + 18) = v30;
    unsigned int v31 = v30 & 0xFFFFFFFB | (4 * ((v20[9] >> 2) & 1));
    *(_WORD *)(a2 + 18) = v31;
    unsigned int v32 = v31 & 0xFFF0FFFF | ((*((unsigned char *)v20 + 21) & 0xF) << 16);
    *(_WORD *)(a2 + 18) = v31;
    *(unsigned char *)(a2 + 20) = BYTE2(v32);
    unsigned int v33 = (*((unsigned __int8 *)v20 + 21) << 16) & 0xF00000 | v32 & 0xFFFFF;
    *(_WORD *)(a2 + 18) = v31;
    *(unsigned char *)(a2 + 20) = BYTE2(v33);
    v33 &= 0xFFFFFF87;
    LOWORD(v31) = v33 | (8 * (v20[10] & 0xF));
    v33 >>= 16;
    *(unsigned char *)(a2 + 20) = v33;
    *(_WORD *)(a2 + 18) = v31;
    LOWORD(v31) = v31 & 0xFF7F | (8 * *((unsigned __int8 *)v20 + 20)) & 0x80;
    *(unsigned char *)(a2 + 20) = v33;
    *(_WORD *)(a2 + 18) = v31;
    unint64_t v22 = 24;
LABEL_26:
    unint64_t v34 = v20[1];
    if (v22 > v34)
    {
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          int64_t v35 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logAlert(v35, "[dk] %s@%d:Unexpected hp2p subcmd resp length\n");
        }
      }
      goto LABEL_35;
    }
    v19 += v34 + 4;
    if (++v17 >= *(unsigned __int8 *)(v7 + 2)) {
      goto LABEL_28;
    }
  }
  if (!*v20)
  {
    *(unsigned char *)(a2 + 11) = *((_DWORD *)v20 + 2) != 0;
    unint64_t v22 = 8;
    goto LABEL_26;
  }
  if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
  {
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v41 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v41, "[dk] %s@%d:Unexpected hp2p subcmd resp id\n");
    }
  }
LABEL_35:
  uint64_t v4 = 3758096385;
LABEL_29:
  IOFreeData();
LABEL_30:
  if (v6) {
LABEL_31:
  }
    IOFreeData();
  return v4;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::getLLW_PARAMS(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::getLLW_PARAMS((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::getLLW_PARAMS((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::setAWDL_OOB_AUTO_REQUEST(AppleBCMWLANProximityInterface *a1, uint64_t a2)
{
  if (!*(_DWORD *)(*((void *)a1 + 17) + 664)) {
    return 3758097084;
  }
  *(_DWORD *)&v14[7] = 0;
  *(void *)char v14 = 0;
  uint64_t v13 = 0;
  uint64_t v12 = 0;
  int v10 = *(_DWORD *)(a2 + 4);
  __int16 v11 = *(_WORD *)(a2 + 8);
  int v8 = *(_DWORD *)(a2 + 22);
  __int16 v9 = *(_WORD *)(a2 + 26);
  int32x2_t v7 = vrev64_s32(*(int32x2_t *)(a2 + 12));
  *(_WORD *)&v14[8] = *(_WORD *)(a2 + 40);
  *(_DWORD *)char v14 = 12;
  LODWORD(v1AppleBCMWLANJoinAdapter::free(this - 3) = *(unsigned __int16 *)(a2 + 20);
  if ((*(uint64_t (**)(void))(*(void *)a1 + 1024))())
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logInfoIf(v6, 0x400uLL, "[dk] %s@%d: OOB AUTO sent with payload len %u \n", "setAWDL_OOB_AUTO_REQUEST", 4770, *(unsigned __int16 *)(a2 + 40));
    }
  }
  v15.iov_base = &v7;
  v15.iov_leuint64_t n = 46;
  uint64_t v4 = *(unsigned __int16 *)(a2 + 40);
  uint64_t v16 = *(void *)(a2 + 48);
  uint64_t v17 = v4;
  return AppleBCMWLANProximityInterface::sendIOVarSetCommand(a1, &v15, 2u, "awdl_oob_af_auto");
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setAWDL_OOB_AUTO_REQUEST(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::setAWDL_OOB_AUTO_REQUEST((AppleBCMWLANProximityInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::setAWDL_OOB_AUTO_REQUEST((AppleBCMWLANProximityInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::setAWDL_OOB_SEC_PAYLOAD_REQUEST(AppleBCMWLANProximityInterface *a1, uint64_t a2)
{
  if (!a2) {
    return 22;
  }
  if (!*(_DWORD *)(*((void *)a1 + 17) + 664)) {
    return 3758097084;
  }
  uint64_t v7 = 0;
  HIDWORD(v7) = *(_DWORD *)(a2 + 4);
  WORD1(v7) = *(_WORD *)(a2 + 2) + 8;
  if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1))
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logInfoIf(v6, 0x400uLL, "[dk] %s@%d:%s:%d OOB SEC PAYLOAD sent with len %hu afSecondary len %lu \n", "setAWDL_OOB_SEC_PAYLOAD_REQUEST", 4801, "setAWDL_OOB_SEC_PAYLOAD_REQUEST", 4801, *(unsigned __int16 *)(a2 + 2), 8);
    }
  }
  v8.iov_base = &v7;
  v8.iov_leuint64_t n = 8;
  uint64_t v4 = *(unsigned __int16 *)(a2 + 2);
  uint64_t v9 = *(void *)(a2 + 8);
  uint64_t v10 = v4;
  return AppleBCMWLANProximityInterface::sendIOVarSetCommand(a1, &v8, 2u, "awdl_afs_pload");
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setAWDL_OOB_SEC_PAYLOAD_REQUEST(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::setAWDL_OOB_SEC_PAYLOAD_REQUEST((AppleBCMWLANProximityInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::setAWDL_OOB_SEC_PAYLOAD_REQUEST((AppleBCMWLANProximityInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::enableRoamEvents(AppleBCMWLANProximityInterface *this)
{
  v15[0] = 0;
  v15[1] = 0;
  v14[0] = v15;
  v14[1] = 0x1000100010;
  uint64_t v2 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*((void *)this + 17) + 960), (uint64_t)"event_msgs", (uint64_t)&kNoTxPayload, (uint64_t)v14, 0);
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
  if (v2)
  {
    if (result)
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        unint64_t v5 = (const char *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *, uint64_t))(*(void *)this + 856))(this, v2);
        return CCLogStream::logAlert(v4, "[dk] %s@%d: Failure to get event mask, %s\n", "enableRoamEvents", 4826, v5);
      }
    }
  }
  else
  {
    if (result)
    {
      uint64_t v6 = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 128))(v6, 16640);
    }
    BYTE2(v15[0]) |= 8u;
    *(_WORD *)((char *)v15 + 3) |= 0x2104u;
    uint64_t v7 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 960);
    v13[0] = v15;
    v13[1] = 16;
    uint64_t v8 = AppleBCMWLANCommander::runIOVarSet(v7, (uint64_t)"event_msgs", (uint64_t)v13, 0, 0);
    if (v8)
    {
      uint64_t v9 = v8;
      if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          __int16 v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
          uint64_t v12 = (const char *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *, uint64_t))(*(void *)this + 856))(this, v9);
          CCLogStream::logAlert(v11, "[dk] %s@%d: Failure to enable AWDL events, %s\n", "enableRoamEvents", 4839, v12);
        }
      }
    }
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        return CCLogStream::logNotice(v10, "[dk] %s@%d: Enabling AWDL Events\n", "enableRoamEvents", 4842);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANProximityInterface::dumpAwdlPeers(AppleBCMWLANProximityInterface *this, char *a2)
{
  uint64_t v3 = IOMallocZeroData();
  if (v3)
  {
    uint64_t v4 = v3;
    *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v21[10] = v5;
    long long v20 = v5;
    *(_OWORD *)int v21 = v5;
    AppleBCMWLANProximityInterface::getElectionParams(this, &v20);
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1008))(this);
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    uint64_t v17 = this;
    uint64_t v6 = IO80211Print();
    v19[0] = v4;
    v19[1] = 0x3E8000003E8;
    uint64_t v7 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 960);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
    v18[0] = v4;
    v18[1] = 1000;
    uint64_t v9 = AppleBCMWLANCommander::runVirtualIOVarGet(v7, InterfaceId, "awdl_advertisers", (uint64_t)v18, (uint64_t)v19, 0);
    if (v9)
    {
      uint64_t v10 = v9;
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      (*(void (**)(AppleBCMWLANProximityInterface *, uint64_t))(*(void *)this + 856))(this, v10);
    }
    else
    {
      unsigned int v11 = *(unsigned __int16 *)(v4 + 2);
      if (v11 < 0x3C1)
      {
        if (*(_WORD *)(v4 + 2))
        {
          if (v11 >= 0x3C)
          {
            LODWORD(v1AppleBCMWLANJoinAdapter::free(this - 3) = *(unsigned __int16 *)(v4 + 2) / 0x3Cu;
            uint64_t v14 = v4 + 4;
            if (v13 <= 1) {
              uint64_t v13 = 1;
            }
            else {
              uint64_t v13 = v13;
            }
            uint64_t v15 = v4 + 22;
            do
            {
              uint64_t v16 = v13;
              (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
              IO80211Hexdump();
              (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
              this = v17;
              uint64_t v6 = v6 + IO80211Print();
              v15 += 60;
              ++v14;
              uint64_t v13 = v16 - 1;
            }
            while (v16 != 1);
          }
        }
        else
        {
          (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
          getClassNameHelper((OSObject *)this);
          uint64_t v6 = IO80211Print() + v6;
        }
        goto LABEL_8;
      }
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    }
    IO80211Print();
    uint64_t v6 = 0;
LABEL_8:
    IOFreeData();
    return v6;
  }
  return 0;
}

uint64_t AppleBCMWLANProximityInterface::reset(AppleBCMWLANProximityInterface *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      long long v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logInfo(v5, "[dk] %s@%d:%s\n", "reset", 5042, "reset");
    }
  }
  uint64_t v2 = *((void *)this + 17);
  uint64_t v3 = *(void *)(v2 + 112);
  if (v3 && AppleBCMWLANSkywalkInterface::isEnabled(*(AppleBCMWLANSkywalkInterface **)(v2 + 112)))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)v3 + 624))(v3, 1, 1, 0, 0);
    (*(void (**)(uint64_t))(*(void *)v3 + 1176))(v3);
    (*(void (**)(uint64_t, void))(*(void *)v3 + 1352))(v3, 0);
  }
  (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1176))(this);
  IO80211SkywalkInterface::setInterfaceId(this, 0xFFFFFFFF);
  *(unsigned char *)(*((void *)this + 17) + 936) = 0;
  *(unsigned char *)(*((void *)this + 17) + 120) = 0;
  *(_DWORD *)(*((void *)this + 17) + 664) = 0;
  *(unsigned char *)(*((void *)this + 17) + 80) = 0;
  *(unsigned char *)(*((void *)this + 17) + 81) = 0;
  *(unsigned char *)(*((void *)this + 17) + 82) = 0;
  *(unsigned char *)(*((void *)this + 17) + 92) = 0;
  *(unsigned char *)(*((void *)this + 17) + 72) = 1;
  if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logInfo(v6, "[dk] %s@%d:\n", "reset", 5060);
    }
  }
  AppleBCMWLANProximityInterface::setLowLatencyTrafficState((uint64_t)this, 0);
  *(_DWORD *)(*((void *)this + 17) + 548) = 0;
  *(_DWORD *)(*((void *)this + 17) + 924) = 0;
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::reset(AppleBCMWLANProximityInterface *this)
{
  return 0;
}

uint64_t AppleBCMWLANProximityInterface::getAWDL_MIN_RATE()
{
  return 3825172759;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::getAWDL_MIN_RATE()
{
  return 3825172759;
}

{
  return 3825172759;
}

uint64_t AppleBCMWLANProximityInterface::setAWDL_MIN_RATE(IO80211SkywalkInterface *a1, uint64_t a2)
{
  int v13 = 2 * *(unsigned __int8 *)(a2 + 4);
  v12[0] = a1;
  v12[1] = AppleBCMWLANProximityInterface::handleProxIovarAsyncCallBack;
  void v12[2] = 0;
  uint64_t v4 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  v11[0] = &v13;
  v11[1] = 4;
  uint64_t result = AppleBCMWLANCommander::sendVirtualIOVarSet(v4, InterfaceId, "awdl_min_rate", (uint64_t)v11, kNoRxExpected, (uint64_t)v12, 0);
  if (result)
  {
    uint64_t v7 = result;
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        int v9 = *(unsigned __int8 *)(a2 + 4);
        uint64_t v10 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v7);
        CCLogStream::logAlert(v8, "[dk] %s@%d: Unable to set awdl_min_rate to %d: %s\n", "setAWDL_MIN_RATE", 5086, v9, v10);
      }
    }
    return (*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 1264))(a1, v7);
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setAWDL_MIN_RATE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::setAWDL_MIN_RATE((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::setAWDL_MIN_RATE((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::setAWDL_TXCAL_PERIOD(IO80211SkywalkInterface *a1, uint64_t a2)
{
  int v11 = *(_DWORD *)(a2 + 4);
  v10[0] = a1;
  v10[1] = AppleBCMWLANProximityInterface::handleProxIovarAsyncCallBack;
  void v10[2] = 0;
  uint64_t v3 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  v9[0] = &v11;
  v9[1] = 4;
  uint64_t v5 = AppleBCMWLANCommander::sendVirtualIOVarSet(v3, InterfaceId, "awdl_phycal_period", (uint64_t)v9, kNoRxExpected, (uint64_t)v10, 0);
  if (v5)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v8 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v5);
        CCLogStream::logAlert(v7, "[dk] %s@%d: Unable to set awdl_phycal_period %s\n", "setAWDL_TXCAL_PERIOD", 5107, v8);
      }
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setAWDL_TXCAL_PERIOD(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::setAWDL_TXCAL_PERIOD((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::setAWDL_TXCAL_PERIOD((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::getAWDL_TXCAL_PERIOD(IO80211SkywalkInterface *a1, uint64_t a2)
{
  int v12 = 0;
  v11[0] = &v12;
  v11[1] = 0x400040004;
  uint64_t v4 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  v10[0] = &v12;
  v10[1] = 4;
  uint64_t v6 = AppleBCMWLANCommander::runVirtualIOVarGet(v4, InterfaceId, "awdl_phycal_period", (uint64_t)v10, (uint64_t)v11, 0);
  if (v6)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v8 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v6);
        CCLogStream::logAlert(v7, "[dk] %s@%d: Unable to get awdl phycal period %s\n", "getAWDL_TXCAL_PERIOD", 5120, v8);
      }
    }
  }
  else
  {
    *(_DWORD *)(a2 + 4) = v12;
  }
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::getAWDL_TXCAL_PERIOD(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::getAWDL_TXCAL_PERIOD((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::getAWDL_TXCAL_PERIOD((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::setAWDL_DFSP_CONFIG(IO80211SkywalkInterface *a1, uint64_t a2)
{
  if (!*(_DWORD *)(*((void *)a1 + 17) + 664)) {
    return 3758097084;
  }
  __int16 v3 = *(_WORD *)(a2 + 12) | 0xD000;
  int v15 = 1310721;
  __int16 v16 = *(_WORD *)(a2 + 4);
  int v17 = *(_DWORD *)(a2 + 6);
  __int16 v18 = v3;
  int v4 = *(_DWORD *)(a2 + 18);
  int v19 = *(_DWORD *)(a2 + 14);
  int v20 = v4;
  v14[0] = a1;
  v14[1] = AppleBCMWLANProximityInterface::handleProxIovarAsyncCallBack;
  void v14[2] = 0;
  *(_WORD *)(a2 + 12) = v3;
  uint64_t v5 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  v13[0] = &v15;
  v13[1] = 20;
  uint64_t v7 = AppleBCMWLANCommander::sendVirtualIOVarSet(v5, InterfaceId, "awdl_dfsp_cfg", (uint64_t)v13, kNoRxExpected, (uint64_t)v14, 0);
  uint64_t v8 = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
  if (v7)
  {
    if (v8)
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v9 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v10 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v7);
        CCLogStream::logAlert(v9, "[dk] %s@%d: Could not Enable DFS Proxy mode. Error code  %s\n", "setAWDL_DFSP_CONFIG", 5156, v10);
      }
    }
  }
  else if (v8)
  {
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      int v12 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlertIf(v12, 0x400uLL, "[dk] %s@%d: Enabled DFS Proxy Mode.\n", "setAWDL_DFSP_CONFIG", 5159);
    }
  }
  return v7;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setAWDL_DFSP_CONFIG(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::setAWDL_DFSP_CONFIG((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::setAWDL_DFSP_CONFIG((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::getAWDL_DFSP_CONFIG(IO80211SkywalkInterface *a1, uint64_t a2)
{
  v13[0] = &v14;
  v13[1] = 0x1400140014;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v16 = 0;
  int v4 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  v12[0] = &v14;
  v12[1] = 20;
  uint64_t v6 = AppleBCMWLANCommander::runVirtualIOVarGet(v4, InterfaceId, "awdl_dfsp_cfg", (uint64_t)v12, (uint64_t)v13, 0);
  uint64_t v7 = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
  if (v6)
  {
    if (v7)
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        int v9 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v6);
        CCLogStream::logAlert(v8, "[dk] %s@%d: Could not Enable DFS Proxy mode. Error code  %s\n", "getAWDL_DFSP_CONFIG", 5179, v9);
      }
    }
  }
  else
  {
    if (v7)
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v11 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlertIf(v11, 0x400uLL, "[dk] %s@%d: Enabled DFS Proxy Mode.\n", "getAWDL_DFSP_CONFIG", 5182);
      }
    }
    *(void *)a2 = v14;
    *(_WORD *)(a2 + 8) = v15;
    *(_WORD *)(a2 + 12) = WORD1(v15);
    *(_WORD *)(a2 + 20) = HIWORD(v16);
    *(_DWORD *)(a2 + 14) = HIDWORD(v15);
    *(_WORD *)(a2 + 18) = v16;
  }
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::getAWDL_DFSP_CONFIG(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::getAWDL_DFSP_CONFIG((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::getAWDL_DFSP_CONFIG((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANProximityInterface::setAWDL_DFSP_UCSA_CONFIG(IO80211SkywalkInterface *a1, uint64_t a2)
{
  v14[0] = 1;
  v14[1] = *(_WORD *)(a2 + 2);
  int v3 = *(_DWORD *)(a2 + 8);
  int v15 = *(_DWORD *)(a2 + 4);
  int v16 = v3;
  v13[0] = a1;
  v13[1] = AppleBCMWLANProximityInterface::handleProxIovarAsyncCallBack;
  void v13[2] = 0;
  int v4 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  v12[0] = v14;
  v12[1] = 12;
  uint64_t v6 = AppleBCMWLANCommander::sendVirtualIOVarSet(v4, InterfaceId, "awdl_dfsp_ucsa", (uint64_t)v12, kNoRxExpected, (uint64_t)v13, 0);
  uint64_t v7 = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
  if (v6)
  {
    if (v7)
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        int v9 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v6);
        CCLogStream::logAlert(v8, "[dk] %s@%d: Could not Enable DFS Proxy UCSA. Error code : %s\n", "setAWDL_DFSP_UCSA_CONFIG", 5214, v9);
      }
    }
  }
  else if (v7)
  {
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      int v11 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlertIf(v11, 0x400uLL, "[dk] %s@%d: Enabled DFS Proxy UCSA.\n", "setAWDL_DFSP_UCSA_CONFIG", 5217);
    }
  }
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setAWDL_DFSP_UCSA_CONFIG(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANProximityInterface::setAWDL_DFSP_UCSA_CONFIG((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::setAWDL_DFSP_UCSA_CONFIG((IO80211SkywalkInterface *)(a1 - 128), a2);
}

BOOL AppleBCMWLANProximityInterface::setup5GAnd24GSlices(AppleBCMWLANProximityInterface *this)
{
  BOOL v5 = 0;
  BOOL result = AppleBCMWLANCore::isSdbChip(*(AppleBCMWLANCore **)(*((void *)this + 17) + 64), &v5);
  *(unsigned char *)(*((void *)this + 17) + 95) = result;
  uint64_t v3 = *((void *)this + 17);
  if (*(unsigned char *)(v3 + 95))
  {
    BOOL v4 = v5;
    *(_DWORD *)(v3 + 96) = !v5;
    *(_DWORD *)(*((void *)this + 17) + 100) = v4;
  }
  return result;
}

void AppleBCMWLANProximityInterface::fillSliceDataForStandAloneAWDL(AppleBCMWLANProximityInterface *this, unsigned char *a2, uint64_t a3, uint64_t a4, unsigned char *a5, int *a6, _DWORD *a7)
{
  *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v41 = v11;
  long long v42 = v11;
  long long v39 = v11;
  long long v40 = v11;
  int v12 = (long long *)(a3 + 6);
  int v37 = (long long *)(a3 + 6);
  if (!a2[6])
  {
    int v38 = 2;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    if (a2[5])
    {
      unint64_t v13 = 0;
      do
      {
        if (*((unsigned char *)v12 + v13))
        {
          unsigned int ChanSpec = AppleBCMWLANCore::getChanSpec(*(void *)(*((void *)this + 17) + 64), *((unsigned __int8 *)v12 + v13), &v38);
          int v12 = v37;
          *((_WORD *)&v39 + v1AppleBCMWLANJoinAdapter::free(this - 3) = __rev16(ChanSpec);
          if (!ChanSpec)
          {
            int v15 = *((unsigned __int8 *)v37 + v13);
            if ((v15 - 1) <= 0xD) {
              *((_WORD *)&v39 + v1AppleBCMWLANJoinAdapter::free(this - 3) = __rev16(v15 | 0x1000);
            }
          }
        }
        else
        {
          *((_WORD *)&v39 + v1AppleBCMWLANJoinAdapter::free(this - 3) = 0;
        }
        ++v13;
      }
      while (v13 < a2[5]);
    }
    int v37 = &v39;
  }
  char v16 = a2[4];
  if ((v16 & 0x30) == 0)
  {
    if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v34 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logCrit(v34, "[dk] %s@%d:%s[%d] : Unexpected. SDB Ouint64_t n = false and SDB Off = false \n", "fillSliceDataForStandAloneAWDL", 5502, "fillSliceDataForStandAloneAWDL", 5502);
      }
    }
  }
  AppleBCMWLANProximityInterface::setup5GAnd24GSlices(this);
  int v17 = 0;
  uint64_t v18 = a2[5];
  int v19 = a7;
  int v20 = v37;
  do
  {
    *(_WORD *)a4 = 2;
    *a6 += 4;
    *(_DWORD *)(a4 + 4) = 0;
    int v21 = *a6;
    *(unsigned char *)(a4 + 8) = v17;
    int v22 = v21 + 8;
    *a6 = v21 + 8;
    *(unsigned char *)(a4 + 9) = v18;
    *(unsigned char *)(a4 + 10) = 2;
    if ((v16 & 0x10) != 0)
    {
      if (!v18) {
        goto LABEL_35;
      }
      int v23 = (_WORD *)(a4 + 12);
      uint64_t v24 = v18;
      unsigned int v25 = a2 + 20;
      unsigned int v26 = v20;
      while ((v25[1] & 0x20) == 0)
      {
        unsigned int v27 = *((_DWORD *)v25 - 1);
        if (v27 >= 0xF) {
          break;
        }
        if (v27)
        {
          int v28 = *(_DWORD *)(*((void *)this + 17) + 96);
LABEL_25:
          if (v28 == v17) {
            LOWORD(v27) = *(_WORD *)v26;
          }
          else {
            LOWORD(v27) = 0;
          }
        }
        v25 += 12;
        *v23++ = v27;
        unsigned int v26 = (long long *)((char *)v26 + 2);
        if (!--v24) {
          goto LABEL_35;
        }
      }
      int v28 = *(_DWORD *)(*((void *)this + 17) + 100);
      goto LABEL_25;
    }
    if (v17)
    {
      if (v18)
      {
        bzero((void *)(a4 + 12), 2 * v18);
        int v20 = v37;
        int v19 = a7;
      }
    }
    else if (v18)
    {
      unsigned int v29 = (_WORD *)(a4 + 12);
      uint64_t v30 = v18;
      unsigned int v31 = (__int16 *)v20;
      do
      {
        __int16 v32 = *v31++;
        *v29++ = v32;
        --v30;
      }
      while (v30);
    }
LABEL_35:
    *a6 = 2 * v18 + v22;
    *(_WORD *)(a4 + 2) = 2 * v18 + 8;
    a4 += 44;
    if ((a4 & 3) != 0)
    {
      uint64_t v33 = 4 - (a4 & 3);
      a4 += v33;
      *v19 += v33;
    }
    ++v17;
  }
  while (v17 != 2);
  *a5 += 2;
}

uint64_t AppleBCMWLANProximityInterface::convertCommittedAvailabilityToChanSpecSequence(AppleBCMWLANProximityInterface *this, uint64_t a2, _OWORD *a3, unsigned char *a4)
{
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  if (!*(unsigned char *)(a2 + 1))
  {
LABEL_30:
    *a4 = 64;
    return 1;
  }
  uint64_t v7 = this;
  uint64_t v8 = 0;
  unsigned int v9 = 0;
  while (1)
  {
    *(_WORD *)long long v39 = 0;
    int v38 = -1431655766;
    uint64_t v10 = a2 + 80 * v8;
    int v13 = *(unsigned __int8 *)(v10 + 78);
    int v12 = (unsigned __int8 *)(v10 + 78);
    int v11 = v13;
    if ((v13 + 125) > 3u)
    {
      AppleBCMWLANProximityInterface::convertOpClassToChannel(this, v11, *(unsigned __int16 *)(a2 + 80 * v8 + 80), *(unsigned __int8 *)(a2 + 80 * v8 + 79), &v39[1], v39);
      int v38 = channelBWMap[v39[0]];
      this = (AppleBCMWLANProximityInterface *)AppleBCMWLANCore::getChanSpec(*(void *)(*((void *)v7 + 17) + 64), v39[1], &v38);
      unsigned int ChanSpec = this;
    }
    else
    {
      unsigned int v36 = v9;
      unsigned __int8 v37 = 0;
      uint64_t v14 = a2 + 80 * v8;
      unsigned int v16 = *(unsigned __int8 *)(v14 + 79);
      int v15 = (unsigned __int8 *)(v14 + 79);
      AppleBCMWLANProximityInterface::convertOpClassToNanChannel(v7, v11, *(unsigned __int16 *)(v15 + 1), v16, &v39[1], v39, &v37);
      int v17 = v39[0];
      int v38 = channelBWMap[v39[0]];
      int v18 = v39[1];
      unsigned int ChanSpec = AppleBCMWLANCore::getChanSpec(*(void *)(*((void *)v7 + 17) + 64), v39[1], v37, &v38);
      this = (AppleBCMWLANProximityInterface *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)v7 + 1024))(v7);
      if (this)
      {
        (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)v7 + 1024))(v7);
        this = (AppleBCMWLANProximityInterface *)CCLogStream::shouldLog();
        if (this)
        {
          __int16 v32 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)v7 + 1024))(v7);
          this = (AppleBCMWLANProximityInterface *)CCLogStream::logAlert(v32, "[dk] %s@%d:%s[%d]: bw %d channel %d tBw %x op_class %x op_class_bitmap %x prim_chan_bitmap %x chSpec %x\n", "convertCommittedAvailabilityToChanSpecSequence", 5995, "convertCommittedAvailabilityToChanSpecSequence", 5995, v17, v18, v38, *v12, *(unsigned __int16 *)(v15 + 1), *v15, ChanSpec);
        }
      }
      unsigned int v9 = v36;
    }
    uint64_t v20 = a2 + 80 * v8;
    unsigned __int16 v21 = *(_WORD *)(v20 + 8);
    int v22 = 64 << *(unsigned char *)(v20 + 10);
    unsigned int v23 = v22 & 0xFFC0;
    if (v23 <= v9) {
      goto LABEL_12;
    }
    if (v23 >= 0x401) {
      break;
    }
    unsigned int v9 = (unsigned __int16)v22;
LABEL_12:
    uint64_t v24 = *(unsigned __int8 *)(a2 + 80 * v8 + 12);
    if (*(unsigned char *)(a2 + 80 * v8 + 12))
    {
      uint64_t v25 = 0;
      int v26 = *(unsigned __int8 *)(a2 + 80 * v8 + 11);
      int v27 = 1 << v26;
      __int16 v28 = __rev16(ChanSpec);
      while (2)
      {
        for (int i = 0; i != 8; ++i)
        {
          if ((*(unsigned __int8 *)(a2 + 80 * v8 + v25 + 13) >> i))
          {
            if (v26 != 31)
            {
              int v30 = 0;
              while (1)
              {
                uint64_t v31 = v21;
                if (*((_WORD *)a3 + v21)) {
                  break;
                }
                *((_WORD *)a3 + v21++) = v28;
                if (v27 <= ++v30) {
                  goto LABEL_22;
                }
              }
              if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)v7 + 1024))(v7))
              {
                (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)v7 + 1024))(v7);
                if (CCLogStream::shouldLog())
                {
                  int64_t v35 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)v7 + 1024))(v7);
                  CCLogStream::logAlert(v35, "[dk] %s@%d:%s[%d]: ERROR : slot %d already has a channel allocated %x\n", "convertCommittedAvailabilityToChanSpecSequence", 6035, "convertCommittedAvailabilityToChanSpecSequence", 6035, v31, *((unsigned __int16 *)a3 + v31));
                }
              }
              return 0;
            }
          }
          else
          {
            v21 += v27;
          }
LABEL_22:
          ;
        }
        if (++v25 != v24) {
          continue;
        }
        break;
      }
    }
    if (++v8 >= (unint64_t)*(unsigned __int8 *)(a2 + 1)) {
      goto LABEL_30;
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)v7 + 1024))(v7))
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)v7 + 1024))(v7);
    if (CCLogStream::shouldLog())
    {
      unint64_t v34 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)v7 + 1024))(v7);
      CCLogStream::logCrit(v34, "[dk] %s@%d:%s[%d] ERROR : Max Period out of bounds : %d, Expected 1024\n", "convertCommittedAvailabilityToChanSpecSequence", 6012, "convertCommittedAvailabilityToChanSpecSequence", 6012, v23);
    }
  }
  return 0;
}

BOOL AppleBCMWLANProximityInterface::convertOpClassToChannel(AppleBCMWLANProximityInterface *this, int a2, unsigned int a3, unsigned int a4, unsigned __int8 *a5, unsigned __int8 *a6)
{
  unint64_t v6 = 0;
  BOOL v7 = 0;
  uint64_t v8 = (char *)&unk_100304AE7;
  while (*((unsigned __int8 *)&operClassTable + 67 * v6) != a2)
  {
LABEL_6:
    BOOL v7 = v6 > 0x11;
    v8 += 67;
    if (++v6 == 19) {
      return 1;
    }
  }
  uint64_t v9 = 0;
  while (((a3 >> v9) & 1) == 0)
  {
    if (++v9 == 64) {
      goto LABEL_6;
    }
  }
  *a5 = v8[v9];
  int v10 = *((unsigned __int8 *)&operClassTable + 67 * v6 + 1);
  *a6 = v10;
  if (v10 == 2)
  {
    uint64_t v11 = 0;
    int v12 = *a5;
    int v13 = (unsigned __int8 *)&unk_100304A25;
    do
    {
      if (v12 == *((unsigned __int8 *)&bw80MHz + 5 * v11))
      {
        for (uint64_t i = 0; i != 4; ++i)
        {
          if ((a4 >> i))
          {
            int v12 = v13[i];
            *a5 = v12;
          }
        }
      }
      ++v11;
      v13 += 5;
    }
    while (v11 != 6);
  }
  return v7;
}

uint64_t AppleBCMWLANProximityInterface::convertOpClassToNanChannel(AppleBCMWLANProximityInterface *this, int a2, unsigned int a3, unsigned int a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned __int8 *a7)
{
  if ((a2 + 125) > 3u)
  {
    if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v14, "[dk] %s@%d:ERROR:NOT 6G OPCLASS: Should not come here..\n", "convertOpClassToNanChannel", 5966);
      }
    }
  }
  else
  {
    for (uint64_t i = 0; i != 280; i += 70)
    {
      if (nan6GoperClassTable[i] == a2)
      {
        unsigned int v13 = nan6GoperClassTable[i + 1];
        *a6 = v13;
        *a7 = 1;
        goto LABEL_13;
      }
    }
    *a6 = 0;
    if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        int v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v19, "[dk] %s@%d:SHOULD NOT COME HERE temp_band %x\n", "convertOpClassToNanChannel", 5923, 0);
      }
    }
    unsigned int v13 = 0;
LABEL_13:
    if (a3 >> 8 != 1)
    {
      if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v20 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
          CCLogStream::logAlert(v20, "[dk] %s@%d:ERROR: opclass %x opclassbitmap %x primchanbitmap %x num_channels %d \n", "convertOpClassToNanChannel", 5931, a2, a3, a4, a3 >> 8);
        }
      }
    }
    if (v13 >= 2)
    {
      uint64_t v15 = 0;
      while (((a4 >> v15) & 1) == 0)
      {
        if (++v15 == 8)
        {
          uint64_t v15 = 0;
          break;
        }
      }
      if (v13 == 2)
      {
        uint64_t v16 = 0;
        int v17 = bw80MHz6g;
        while (bw80MHz6g[v16] != a3)
        {
          v16 += 5;
          if (v16 == 70) {
            return 1;
          }
        }
      }
      else
      {
        if (v13 != 3) {
          return 1;
        }
        uint64_t v16 = 0;
        int v17 = bw160MHz6g;
        while (bw160MHz6g[v16] != a3)
        {
          v16 += 9;
          if (v16 == 63) {
            return 1;
          }
        }
      }
      *a5 = v17[v15 + 1 + v16];
      return 1;
    }
    *a5 = a3;
  }
  return 1;
}

uint64_t AppleBCMWLANProximityInterface::start(AppleBCMWLANProximityInterface *this, IOService *anObject)
{
  uint64_t v3 = (IOService *)OSMetaClassBase::safeMetaCast(anObject, (const OSMetaClass *)gAppleBCMWLANCoreMetaClass);
  return AppleBCMWLANProximityInterface::start(this, v3);
}

uint64_t AppleBCMWLANProximityInterface::start(IO80211SkywalkInterface *a1, IOService *a2)
{
  __int16 v31 = 0;
  int v30 = 0;
  if (a2 && (BOOL v4 = a2[1].OSObject::OSObjectInterface::__vftable, LOBYTE(v4[2214].free)) && LODWORD(v4[2215].init) == 6)
  {
    p_free = &v4[2214].free;
    int v30 = *((_DWORD *)p_free + 6);
    __int16 v31 = *((_WORD *)p_free + 14);
    int v6 = v30;
    int v7 = BYTE1(v30);
    int v8 = BYTE2(v30);
    int v9 = HIBYTE(v30);
    int v10 = v31;
    int v11 = HIBYTE(v31);
  }
  else
  {
    IOLog("%s: FAIL: AWDL interface parameters invalid\n", "BOOL AppleBCMWLANProximityInterface::start(AppleBCMWLANCore *, RegistrationInfo *)");
    int v11 = 0;
    int v10 = 0;
    int v9 = 0;
    int v8 = 0;
    int v7 = 0;
    int v6 = 0;
  }
  IOLog("%s: Initializing AWDL interface parameters %02x:%02x:%02x:%02x:%02x:%02x\n", "BOOL AppleBCMWLANProximityInterface::start(AppleBCMWLANCore *, RegistrationInfo *)", v6, v7, v8, v9, v10, v11);
  uint64_t v12 = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 312))(a1);
  uint64_t result = (*(uint64_t (**)(IO80211SkywalkInterface *, IOService *, int *, uint64_t, uint64_t))(*(void *)a1 + 2040))(a1, a2, &v30, 6, v12);
  if (result)
  {
    uint64_t v14 = &a2[1].OSObject::OSObjectInterface::__vftable[2214].free;
    *(_OWORD *)uint64_t v14 = 0u;
    *((_OWORD *)v14 + 1) = 0u;
    if (IO80211VirtualInterface::start(a1, a2))
    {
      if (IO80211SkywalkInterface::getLogger(a1)) {
        *(void *)(*((void *)a1 + 17) + 56) = IO80211SkywalkInterface::getLogger(a1);
      }
      uint64_t v15 = *(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64);
      *(void *)(*((void *)a1 + 17) + 1096) = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v15 + 88))(v15);
      *(void *)(*((void *)a1 + 17) + 976) = AppleBCMWLANCore::getBus(v15);
      uint64_t v16 = (const OSMetaClassBase *)(*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 17) + 976) + 752))();
      *(void *)(*((void *)a1 + 17) + 984) = OSMetaClassBase::safeMetaCast(v16, (const OSMetaClass *)gAppleBCMWLANBusSkywalkMetaClass);
      *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v24 = v17;
      long long v26 = v17;
      long long v25 = v17;
      long long v27 = v17;
      long long v28 = v17;
      unsigned int v23 = a1;
      uint64_t v18 = *((void *)a1 + 17);
      LOBYTE(v24) = *(unsigned char *)(v18 + 937);
      *(void *)&long long v26 = v18 + 1000;
      *((void *)&v26 + 1) = v18 + 1008;
      *(void *)&long long v27 = v18 + 1056;
      *((void *)&v27 + 1) = v18 + 1064;
      *(void *)&long long v28 = v18 + 1072;
      *((void *)&v25 + 1) = v18 + 1016;
      *((void *)&v24 + 1) = v18 + 940;
      *(void *)&long long v25 = v18 + 1024;
      uint64_t v29 = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      WORD4(v28) = 64;
      int v19 = (*(uint64_t (**)(void, IO80211SkywalkInterface **))(**(void **)(*((void *)a1 + 17) + 984)
                                                                          + 56))(*(void *)(*((void *)a1 + 17) + 984), &v23);
      uint64_t v20 = *(void *)a1;
      if (v19)
      {
        uint64_t result = (*(uint64_t (**)(IO80211SkywalkInterface *))(v20 + 1024))(a1);
        if (result)
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            unsigned __int16 v21 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            CCLogStream::logAlert(v21, "[dk] %s@%d:Failed to register interface with bus interface");
            return 0;
          }
        }
      }
      else
      {
        return (*(uint64_t (**)(IO80211SkywalkInterface *))(v20 + 488))(a1);
      }
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (result)
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          int v22 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logAlert(v22, "[dk] %s@%d:%s: ERROR: awdl skywalk start fail\n");
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::start(AppleBCMWLANProximityInterface *this, IOService *anObject)
{
  uint64_t v2 = (AppleBCMWLANProximityInterface *)((char *)this - 48);
  uint64_t v3 = (IOService *)OSMetaClassBase::safeMetaCast(anObject, (const OSMetaClass *)gAppleBCMWLANCoreMetaClass);
  return AppleBCMWLANProximityInterface::start(v2, v3);
}

uint64_t AppleBCMWLANProximityInterface::registerInterface(IOUserNetworkEthernet *this)
{
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v18[1] = v2;
  void v18[2] = v2;
  v18[0] = v2;
  if (((unsigned int (*)(IOUserNetworkEthernet *, void *, uint64_t))this->hwConfigNicProxyData)(this, &mediaTable, 2))
  {
    uint64_t result = ((uint64_t (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
    if (result)
    {
      ((void (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        BOOL v4 = (CCLogStream *)((uint64_t (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
        CCLogStream::logAlert(v4, "[dk] %s@%d:ProximityInterface: media type report fail, ret[0x%08x]\n");
        return 0;
      }
    }
    return result;
  }
  if (!IOUserNetworkEthernet::SetTxPacketHeadroom(this, 0x40u))
  {
    uint64_t v6 = *(void *)&this[2].refcount;
    if (!*(unsigned char *)(v6 + 937)) {
      goto LABEL_19;
    }
    unint64_t v7 = 0;
    do
    {
      int v8 = *(const void **)(v6 + 8 * v7 + 1024);
      *((void *)v18 + v7) = v8;
      if (((uint64_t (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this))
      {
        ((void (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
        if (CCLogStream::shouldLog())
        {
          int v9 = (CCLogStream *)((uint64_t (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
          CCLogStream::logAlert(v9, "[dk] %s@%d:ProximityInterface: network queue[%u] %p, driver queue %p\n", "registerInterface", 6202, v7, v8, *(const void **)(*(void *)&this[2].refcount + 8 * v7 + 1024));
        }
      }
      ++v7;
      uint64_t v6 = *(void *)&this[2].refcount;
    }
    while (v7 < *(unsigned __int8 *)(v6 + 937));
    if (*(unsigned char *)(v6 + 937))
    {
      unint64_t v10 = 0;
      do
      {
        (*(void (**)(void))(**(void **)(v6 + 8 * v10 + 1024) + 272))(*(void *)(v6 + 8 * v10 + 1024));
        *(_DWORD *)(*(void *)&this[2].refcount
                  + 4 * *(unsigned int *)(*(void *)&this[2].refcount + 4 * v10 + 940)
                  + 1080) = AppleBCMWLANSkywalkTxSubmissionQueue::getQueueId(*(AppleBCMWLANSkywalkTxSubmissionQueue **)(*(void *)&this[2].refcount + 8 * v10 + 1024));
        ++v10;
        uint64_t v6 = *(void *)&this[2].refcount;
      }
      while (v10 < *(unsigned __int8 *)(v6 + 937));
    }
    else
    {
LABEL_19:
      LOBYTE(v10) = 0;
    }
    *((void *)v18 + v10) = *(void *)(v6 + 1000);
    *((void *)v18 + (v10 + 1)) = *(void *)(v6 + 1008);
    unsigned __int8 v11 = v10 + 2;
    (*(void (**)(void))(**(void **)(v6 + 1000) + 200))(*(void *)(v6 + 1000));
    (*(void (**)(void))(**(void **)(*(void *)&this[2].refcount + 1008) + 208))(*(void *)(*(void *)&this[2].refcount + 1008));
    uint64_t v12 = *(void *)(*(void *)&this[2].refcount + 1056);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 72))(v12);
    }
    uint64_t v13 = ((uint64_t (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].free)(this);
    int v14 = v11;
    int v15 = ((uint64_t (*)(IOUserNetworkEthernet *, uint64_t, void, _OWORD *, void))this->IOService::OSObject::OSMetaClassBase::__vftable[3].Dispatch)(this, v13 & 0xFFFFFFFFFFFFLL, *(void *)(*(void *)&this[2].refcount + 1064), v18, v11);
    if (((uint64_t (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this)
      && (((void (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this),
          CCLogStream::shouldLog()))
    {
      long long v17 = (CCLogStream *)((uint64_t (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
      CCLogStream::logAlert(v17, "[dk] %s@%d:ProximityInterface: ret[0x%08x] MAC[%02x:%02x:%02x:%02x:%02x:%02x], pool[%p] queues[%p] numQueue[%2u]", "registerInterface", 6221, v15, v13, BYTE1(v13), BYTE2(v13), BYTE3(v13), BYTE4(v13), BYTE5(v13), *(const void **)(*(void *)&this[2].refcount + 1064), v18, v14);
      if (v15) {
        goto LABEL_25;
      }
    }
    else if (v15)
    {
LABEL_25:
      uint64_t result = ((uint64_t (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
      if (result)
      {
        ((void (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          uint64_t v16 = (CCLogStream *)((uint64_t (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
          CCLogStream::logAlert(v16, "[dk] %s@%d:ProximityInterface: skywalk interface registration fail, ret[0x%08x]\n");
          return 0;
        }
      }
      return result;
    }
    IOService::RegisterService(this, 0);
    return 1;
  }
  uint64_t result = ((uint64_t (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
  if (result)
  {
    ((void (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      BOOL v5 = (CCLogStream *)((uint64_t (*)(IOUserNetworkEthernet *))this->IOService::OSObject::OSMetaClassBase::__vftable[12].ReportAvailableMediaTypes)(this);
      CCLogStream::logAlert(v5, "[dk] %s@%d:ProximityInterface: set headroom fail fail, ret[0x%08x]\n");
      return 0;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::registerInterface(AppleBCMWLANProximityInterface *this)
{
  return AppleBCMWLANProximityInterface::registerInterface((IOUserNetworkEthernet *)((char *)this - 80));
}

uint64_t AppleBCMWLANProximityInterface::setPromiscuousModeEnable(AppleBCMWLANProximityInterface *this)
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setPromiscuousModeEnable(AppleBCMWLANProximityInterface *this)
{
  return 0;
}

uint64_t AppleBCMWLANProximityInterface::setInterfaceEnable(AppleBCMWLANProximityInterface *this, BOOL a2)
{
  IO80211SkywalkInterface::validateDispatchQueue(this);
  if (IO80211VirtualInterface::setInterfaceEnable(this, a2))
  {
    if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        BOOL v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v4, "[dk] %s@%d:%s:%d ERROR: AWDL interface enable failed!\n", "setInterfaceEnable", 6258, "setInterfaceEnable", 6258);
      }
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      int v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      if (a2) {
        unint64_t v10 = "enable";
      }
      else {
        unint64_t v10 = "disable";
      }
      CCLogStream::logAlert(v9, "[dk] %s@%d:%s:%d AWDL prox interface %s\n", "setInterfaceEnable", 6260, "setInterfaceEnable", 6260, v10);
    }
  }
  uint64_t v5 = *(void *)this;
  if (*(_DWORD *)(*((void *)this + 17) + 924))
  {
    uint64_t v6 = *(uint64_t (**)(AppleBCMWLANProximityInterface *, uint64_t, uint64_t))(v5 + 128);
    if (a2)
    {
      uint64_t v7 = v6(this, 3, 128);
      (*(void (**)(AppleBCMWLANProximityInterface *, void))(*(void *)this + 1248))(this, 0);
    }
    else
    {
      uint64_t v7 = v6(this, 1, 130);
      (*(void (**)(AppleBCMWLANProximityInterface *, void))(*(void *)this + 1256))(this, 0);
    }
    if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        unsigned __int8 v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        uint64_t v12 = "Disable";
        if (a2) {
          uint64_t v12 = "Enable";
        }
        CCLogStream::logAlert(v11, "[dk] %s@%d:AppleBCMWLANProximityInterface::(%s) ret=0x%08x\n", "setInterfaceEnable", 6289, v12, v7);
      }
    }
  }
  else
  {
    if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(v5 + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v13, "[dk] %s@%d:%s: AWDL interface not up yet, not enabling queues\n", "setInterfaceEnable", 6263, "setInterfaceEnable");
      }
    }
    return 0;
  }
  return v7;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setInterfaceEnable(AppleBCMWLANProximityInterface *this, BOOL a2)
{
  return AppleBCMWLANProximityInterface::setInterfaceEnable((AppleBCMWLANProximityInterface *)((char *)this - 48), a2);
}

uint64_t AppleBCMWLANProximityInterface::enableDatapath(AppleBCMWLANProximityInterface *this)
{
  char v2 = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1000))(this);
  uint64_t v3 = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
  if (v2)
  {
    if (v3)
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v16, "[dk] %s@%d:awdl interface enable data path\n", "enableDatapath", 6307);
      }
    }
    (*(void (**)(void))(**(void **)(*((void *)this + 17) + 1000) + 192))(*(void *)(*((void *)this + 17) + 1000));
    uint64_t v4 = *(void *)(*((void *)this + 17) + 1008);
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 200))(v4);
      uint64_t v5 = *((void *)this + 17);
      if (*(unsigned char *)(v5 + 937))
      {
        unint64_t v6 = 0;
        while (1)
        {
          uint64_t v7 = *(void *)(v5 + 8 * v6 + 1024);
          if (!v7) {
            break;
          }
          (*(void (**)(uint64_t))(*(void *)v7 + 256))(v7);
          uint64_t v8 = *(void *)(*((void *)this + 17) + 8 * v6 + 1024);
          (*(void (**)(uint64_t, void, void))(*(void *)v8 + 128))(v8, 0, 0);
          ++v6;
          uint64_t v5 = *((void *)this + 17);
          if (v6 >= *(unsigned __int8 *)(v5 + 937)) {
            goto LABEL_10;
          }
        }
        uint64_t v11 = 3758097084;
        if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
        {
          (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
            CCLogStream::logCrit(v13, "[dk] %s@%d:tx submission queue ac %d not valid\n");
          }
        }
      }
      else
      {
LABEL_10:
        if (*(void *)(v5 + 1056))
        {
          uint64_t Controller = IO80211SkywalkInterface::getController(this);
          uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)Controller + 88))(Controller);
          (*(void (**)(uint64_t, void))(*(void *)v10 + 64))(v10, *(void *)(*((void *)this + 17) + 1056));
          (*(void (**)(void))(**(void **)(*((void *)this + 17) + 1056) + 64))(*(void *)(*((void *)this + 17) + 1056));
          (*(void (**)(void))(**(void **)(*((void *)this + 17) + 1056) + 120))(*(void *)(*((void *)this + 17) + 1056));
          uint64_t v5 = *((void *)this + 17);
        }
        uint64_t v11 = (*(uint64_t (**)(void, void, void))(**(void **)(v5 + 1008) + 120))(*(void *)(v5 + 1008), 0, 0);
        if (v11)
        {
          if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
          {
            (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
            if (CCLogStream::shouldLog())
            {
              long long v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
              CCLogStream::logInfo(v17, "[dk] %s@%d:skywalk rx completion queue enqueue fail with return %d\n", "enableDatapath", 6330, v11);
            }
          }
          return 0;
        }
      }
    }
    else
    {
      uint64_t v11 = 3758097084;
      if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          int v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
          CCLogStream::logCrit(v15, "[dk] %s@%d:rx completion queue not valid\n");
        }
      }
    }
  }
  else
  {
    uint64_t v11 = 3758097084;
    if (v3)
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        int v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 160))(this);
        CCLogStream::logCrit(v14, "[dk] %s@%d:%s %s failed because interface has not been enabled yet\n");
      }
    }
  }
  return v11;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::enableDatapath(AppleBCMWLANProximityInterface *this)
{
  return AppleBCMWLANProximityInterface::enableDatapath((AppleBCMWLANProximityInterface *)((char *)this - 80));
}

uint64_t AppleBCMWLANProximityInterface::disableDatapath(AppleBCMWLANProximityInterface *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logAlert(v16, "[dk] %s@%d:awdl interface disable data path\n", "disableDatapath", 6343);
    }
  }
  uint64_t v2 = *((void *)this + 17);
  if (*(unsigned char *)(v2 + 937))
  {
    unint64_t v3 = 0;
    while (1)
    {
      uint64_t v4 = *(void *)(v2 + 8 * v3 + 1024);
      if (!v4) {
        break;
      }
      (*(void (**)(uint64_t))(*(void *)v4 + 272))(v4);
      ++v3;
      uint64_t v2 = *((void *)this + 17);
      if (v3 >= *(unsigned __int8 *)(v2 + 937)) {
        goto LABEL_8;
      }
    }
    if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        long long v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logCrit(v17, "[dk] %s@%d:tx submission queue ac %d not valid\n");
      }
    }
  }
  else
  {
LABEL_8:
    uint64_t v5 = *(void *)(v2 + 1056);
    if (v5)
    {
      (*(void (**)(uint64_t))(*(void *)v5 + 72))(v5);
      uint64_t Controller = IO80211SkywalkInterface::getController(this);
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)Controller + 88))(Controller);
      (*(void (**)(uint64_t, void))(*(void *)v7 + 72))(v7, *(void *)(*((void *)this + 17) + 1056));
      uint64_t v2 = *((void *)this + 17);
    }
    uint64_t v8 = *(void *)(v2 + 1008);
    if (v8)
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 208))(v8);
      uint64_t v9 = *(void *)(*((void *)this + 17) + 1000);
      if (v9)
      {
        (*(void (**)(uint64_t))(*(void *)v9 + 200))(v9);
        return 0;
      }
      if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          int v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
          CCLogStream::logCrit(v15, "[dk] %s@%d:tx completion queue not valid\n");
        }
      }
    }
    else if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        int v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logCrit(v14, "[dk] %s@%d:rx completion queue not valid\n");
      }
    }
  }
  uint64_t v10 = 3758097084;
  if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      uint64_t v13 = (const char *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 160))(this);
      CCLogStream::logCrit(v12, "[dk] %s@%d:%s: skywalk data path disable fail\n", "disableDatapath", 6363, v13);
    }
  }
  return v10;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::disableDatapath(AppleBCMWLANProximityInterface *this)
{
  return AppleBCMWLANProximityInterface::disableDatapath((AppleBCMWLANProximityInterface *)((char *)this - 80));
}

uint64_t AppleBCMWLANProximityInterface::enable(AppleBCMWLANProximityInterface *this, unsigned int a2)
{
  if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      unint64_t v6 = (const char *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 160))(this);
      CCLogStream::logAlert(v5, "[dk] %s@%d:%s enabling AWDL interface\n", "enable", 6372, v6);
    }
  }
  IO80211SkywalkInterface::enable(this, a2);
  (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1168))(this);
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::enable(AppleBCMWLANProximityInterface *this, unsigned int a2)
{
  return 0;
}

uint64_t AppleBCMWLANProximityInterface::disable(AppleBCMWLANProximityInterface *this, unsigned int a2)
{
  if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      unint64_t v6 = (const char *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 160))(this);
      CCLogStream::logAlert(v5, "[dk] %s@%d:%s: disabling AWDL interface\n", "disable", 6391, v6);
    }
  }
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1000))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1176))(this);
    return IO80211SkywalkInterface::disable(this, a2);
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::disable(AppleBCMWLANProximityInterface *this, unsigned int a2)
{
  return AppleBCMWLANProximityInterface::disable((AppleBCMWLANProximityInterface *)((char *)this - 80), a2);
}

uint64_t AppleBCMWLANProximityInterface::isLowLatencyTrafficOngoing(AppleBCMWLANProximityInterface *this)
{
  return *(unsigned __int8 *)(*((void *)this + 17) + 544);
}

uint64_t AppleBCMWLANProximityInterface::getDesiredChannel(AppleBCMWLANProximityInterface *this)
{
  return *(unsigned int *)(*((void *)this + 17) + 548);
}

uint64_t AppleBCMWLANProximityInterface::isAirplayActive(AppleBCMWLANProximityInterface *this)
{
  return *(unsigned __int8 *)(*((void *)this + 17) + 93);
}

BOOL AppleBCMWLANProximityInterface::isAirplayLlwMapToLowPriority(AppleBCMWLANProximityInterface *this)
{
  return *(_DWORD *)(*((void *)this + 17) + 904) != 0;
}

BOOL AppleBCMWLANProximityInterface::isLlwRequeueEnabled(AppleBCMWLANProximityInterface *this)
{
  return *(_DWORD *)(*((void *)this + 17) + 908) != 0;
}

uint64_t AppleBCMWLANProximityInterface::setIPv4Addr(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 136) + 872) = a2;
  return this;
}

uint64_t AppleBCMWLANProximityInterface::getLogger(AppleBCMWLANProximityInterface *this)
{
  return *(void *)(*((void *)this + 17) + 56);
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::getLogger(AppleBCMWLANProximityInterface *this)
{
  return *(void *)(*((void *)this + 7) + 56);
}

uint64_t AppleBCMWLANProximityInterface::getTxSubQueue(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 136);
  uint64_t v3 = *(unsigned int *)(v2 + 4 * a2 + 1080);
  if (v3 >= *(unsigned __int8 *)(v2 + 937)) {
    return 0;
  }
  else {
    return *(void *)(v2 + 8 * v3 + 1024);
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::getTxSubQueue(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(unsigned int *)(v2 + 4 * a2 + 1080);
  if (v3 >= *(unsigned __int8 *)(v2 + 937)) {
    return 0;
  }
  else {
    return *(void *)(v2 + 8 * v3 + 1024);
  }
}

uint64_t AppleBCMWLANProximityInterface::getTxPacketPool(AppleBCMWLANProximityInterface *this)
{
  return *(void *)(*((void *)this + 17) + 1064);
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::getTxPacketPool(AppleBCMWLANProximityInterface *this)
{
  return *(void *)(*((void *)this + 7) + 1064);
}

uint64_t AppleBCMWLANProximityInterface::getTxCompQueue(AppleBCMWLANProximityInterface *this)
{
  return *(void *)(*((void *)this + 17) + 1000);
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::getTxCompQueue(AppleBCMWLANProximityInterface *this)
{
  return *(void *)(*((void *)this + 7) + 1000);
}

uint64_t AppleBCMWLANProximityInterface::getRxCompQueue(AppleBCMWLANProximityInterface *this)
{
  return *(void *)(*((void *)this + 17) + 1008);
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::getRxCompQueue(AppleBCMWLANProximityInterface *this)
{
  return *(void *)(*((void *)this + 7) + 1008);
}

uint64_t AppleBCMWLANProximityInterface::triggerAWDLMulticastTx(AppleBCMWLANProximityInterface *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 17) + 1024) + 208))();
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::triggerAWDLMulticastTx(AppleBCMWLANProximityInterface *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 5) + 1024) + 208))();
}

uint64_t AppleBCMWLANProximityInterface::printDataPath(IO80211SkywalkInterface *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(unsigned int *)(a2 + 28);
  uint64_t v6 = *(unsigned int *)(a2 + 32);
  uint64_t v7 = *(unsigned int *)(a2 + 24);
  if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
  {
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v18 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      InterfaceRoleStr = (const char *)IO80211SkywalkInterface::getInterfaceRoleStr(a1);
      uint64_t v20 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 160))(a1);
      CCLogStream::logInfo(v18, "[dk] %s@%d:Enter InterfaceRole:%s bsdname:%s\n", "printDataPath", 6539, InterfaceRoleStr, v20);
    }
  }
  (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
  IO80211SkywalkInterface::getInterfaceRoleStr(a1);
  (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 160))(a1);
  uint64_t v8 = IO80211Print() + v6;
  if (*(unsigned char *)(*((void *)a1 + 17) + 937))
  {
    unint64_t v9 = 0;
    do
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v10 = IO80211Print() + v8;
      uint64_t v11 = *(void *)(*((void *)a1 + 17) + 8 * v9 + 1024);
      uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 216))(v11, v4, v5, v7, v10);
      ++v9;
    }
    while (v9 < *(unsigned __int8 *)(*((void *)a1 + 17) + 937));
  }
  (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
  uint64_t v12 = IO80211Print();
  uint64_t v13 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(*((void *)a1 + 17)
                                                                                            + 1000)
                                                                              + 176))(*(void *)(*((void *)a1 + 17) + 1000), v4, v5, v7, v12 + v8);
  (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
  uint64_t v14 = IO80211Print();
  int v15 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(*((void *)a1 + 17)
                                                                                            + 1008)
                                                                              + 184))(*(void *)(*((void *)a1 + 17) + 1008), v4, v5, v7, v14 + v13);
  int v16 = *(_DWORD *)(a2 + 28) + v15;
  *(_DWORD *)(a2 + 24) -= v15;
  *(_DWORD *)(a2 + 28) = v16;
  IO80211VirtualInterface::printDataPath();
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::printDataPath(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t AppleBCMWLANProximityInterface::p2pMulticastTx(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 136) + 1024) + 296))();
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::p2pMulticastTx(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 40) + 1024) + 296))();
}

uint64_t AppleBCMWLANProximityInterface::freeMulticastPacket(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 136) + 1024) + 200))();
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::freeMulticastPacket(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 40) + 1024) + 200))();
}

uint64_t AppleBCMWLANProximityInterface::sendPendingPacketsToStack(AppleBCMWLANProximityInterface *this, IO80211NetworkPacket **a2, unsigned int a3)
{
  uint64_t v4 = *(void *)(*((void *)this + 17) + 1008);
  if (v4)
  {
    if (a3)
    {
      uint64_t v5 = a2;
      uint64_t v6 = a3;
      do
      {
        uint64_t v7 = (uint64_t)*v5++;
        (*(void (**)(void, uint64_t, void, void))(**(void **)(*((void *)this + 17) + 1008) + 232))(*(void *)(*((void *)this + 17) + 1008), v7, 0, 0);
        --v6;
      }
      while (v6);
      uint64_t v4 = *(void *)(*((void *)this + 17) + 1008);
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v4 + 120))(v4, 0, 0);
    if (result)
    {
      unint64_t v9 = *(uint64_t (**)(void))(**(void **)(*((void *)this + 17) + 1008) + 192);
      return v9();
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANProximityInterface *, IO80211NetworkPacket **))(*(void *)this
                                                                                                  + 1024))(this, a2);
    if (result)
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        return CCLogStream::logAlert(v10, "[dk] %s@%d: FAIL : Invalid Rx Completion Queue available \n", "sendPendingPacketsToStack", 6583);
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::sendPendingPacketsToStack(AppleBCMWLANProximityInterface *this, IO80211NetworkPacket **a2, unsigned int a3)
{
  return AppleBCMWLANProximityInterface::sendPendingPacketsToStack((AppleBCMWLANProximityInterface *)((char *)this - 96), a2, a3);
}

uint64_t AppleBCMWLANProximityInterface::freePendingPackets(AppleBCMWLANProximityInterface *this, IO80211NetworkPacket **a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 17) + 1008);
  if (v3)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)v3 + 240);
    return v4();
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANProximityInterface *, IO80211NetworkPacket **))(*(void *)this
                                                                                                  + 1024))(this, a2);
    if (result)
    {
      (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
        return CCLogStream::logAlert(v6, "[dk] %s@%d: FAIL : Invalid Rx Completion Queue available \n", "freePendingPackets", 6601);
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::freePendingPackets(AppleBCMWLANProximityInterface *this, IO80211NetworkPacket **a2)
{
  return AppleBCMWLANProximityInterface::freePendingPackets((AppleBCMWLANProximityInterface *)((char *)this - 96), a2);
}

uint64_t AppleBCMWLANProximityInterface::clearTrafficRegistrationState(AppleBCMWLANProximityInterface *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANProximityInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logAlert(v4, "[dk] %s@%d: CarPlay active %d, low latency %d, AirPlay %d, SideCar %d", "clearTrafficRegistrationState", 6613, *(unsigned __int8 *)(*((void *)this + 17) + 92), *(unsigned __int8 *)(*((void *)this + 17) + 544), *(unsigned __int8 *)(*((void *)this + 17) + 93), *(unsigned __int8 *)(*((void *)this + 17) + 94));
    }
  }
  *(unsigned char *)(*((void *)this + 17) + 92) = 0;
  AppleBCMWLANProximityInterface::setLowLatencyTrafficState((uint64_t)this, 0);
  *(unsigned char *)(*((void *)this + 17) + 9AppleBCMWLANJoinAdapter::free(this - 3) = 0;
  *(unsigned char *)(*((void *)this + 17) + 94) = 0;
  uint64_t v2 = *(AppleBCMWLANCore **)(*((void *)this + 17) + 64);
  return AppleBCMWLANCore::restore6GNegativeBoost(v2, 1);
}

uint64_t AppleBCMWLANProximityInterface::setP2P_STEERING_POLICY(void *a1, uint64_t a2)
{
  if ((*(uint64_t (**)(void *))(*a1 + 1024))(a1))
  {
    (*(void (**)(void *))(*a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1024))(a1);
      CCLogStream::logAlert(v7, "[dk] %s@%d:%s:%d [Steer]: policy:%d\n", "setP2P_STEERING_POLICY", 6641, "virtual int32_t AppleBCMWLANProximityInterface::setP2P_STEERING_POLICY(apple80211_6g_steering_config *)", 6641, *(_DWORD *)(a2 + 4));
    }
  }
  uint64_t v4 = *(AppleBCMWLANCore **)(a1[17] + 64);
  if (*(_DWORD *)(a2 + 4))
  {
    int v5 = 1;
    AppleBCMWLANCore::set6GNegativeBoost(v4, 1);
  }
  else
  {
    AppleBCMWLANCore::restore6GNegativeBoost(v4, 1);
    int v5 = 0;
  }
  AppleBCMWLANCore::setBTMRejection(*(AppleBCMWLANCore **)(a1[17] + 64), v5);
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setP2P_STEERING_POLICY(uint64_t a1, uint64_t a2)
{
  return 0;
}

{
  AppleBCMWLANProximityInterface::setP2P_STEERING_POLICY((void *)(a1 - 128), a2);
  return 0;
}

uint64_t AppleBCMWLANProximityInterface::setP2P_COEX_PROTECTION(IO80211SkywalkInterface *a1, unsigned __int8 *a2)
{
  if (IO80211SkywalkInterface::getInterfaceId(a1) == -1)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v16 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v16, "[dk] %s@%d:ERROR: AWDL Chip interface not initialized, bailing out\n", "setP2P_COEX_PROTECTION", 6660);
      }
    }
    return 16;
  }
  else if (AppleBCMWLANCore::isPlatformConfigFirmwareRequired(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 64)))
  {
    uint64_t v4 = IOMallocZeroData();
    if (v4)
    {
      uint64_t v5 = v4;
      *(_DWORD *)uint64_t v4 = 16875520;
      *(_WORD *)(v4 + 4) = 3;
      *(_DWORD *)(v4 + 8) = 1;
      *(unsigned char *)(v4 + 12) = 2;
      size_t v6 = a2[4];
      *(_WORD *)(v4 + 16) = 0;
      uint64_t v7 = v4 + 16;
      *(_WORD *)(v4 + 18) = v6;
      memcpy((void *)(v4 + 20), a2 + 5, v6);
      size_t v8 = a2[74];
      size_t v9 = v6 + v7;
      *(_WORD *)(v9 + 4) = 1;
      *(_WORD *)(v9 + 6) = v8;
      v6 += 8;
      memcpy((void *)(v7 + v6), a2 + 75, v8);
      *(_WORD *)(v5 + 6) = v6 + v8 + 8;
      v20[0] = a1;
      v20[1] = AppleBCMWLANProximityInterface::handleSlotBssIovarAsyncCallBack;
      void v20[2] = 0;
      uint64_t v10 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 960);
      unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
      v19[0] = v5;
      v19[1] = (unsigned __int16)(v6 + v8 + ((v6 + v8 + 19) & 0x7FC) + 16);
      uint64_t v12 = AppleBCMWLANCommander::sendVirtualIOVarSet(v10, InterfaceId, "slot_bss", (uint64_t)v19, kNoRxExpected, (uint64_t)v20, 0);
      if (v12)
      {
        uint64_t v13 = v12;
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            long long v17 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            uint64_t v18 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v13);
            CCLogStream::logAlert(v17, "[dk] %s@%d:ERROR: Unable to set P2p Coex Protection %s (0x%x)\n", "setP2P_COEX_PROTECTION", 6734, v18, v13);
          }
        }
        uint64_t v14 = (*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 1264))(a1, v13);
      }
      else
      {
        uint64_t v14 = 0;
      }
      IOFreeData();
    }
    else
    {
      return 12;
    }
  }
  else
  {
    return 0;
  }
  return v14;
}

uint64_t non-virtual thunk to'AppleBCMWLANProximityInterface::setP2P_COEX_PROTECTION(uint64_t a1, unsigned __int8 *a2)
{
  return AppleBCMWLANProximityInterface::setP2P_COEX_PROTECTION((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANProximityInterface::setP2P_COEX_PROTECTION((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t *IO80211BufferCursor::_crop@<X0>(uint64_t *this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  if (a2 == -1) {
    unint64_t v4 = 0;
  }
  else {
    unint64_t v4 = a2;
  }
  unint64_t v5 = this[1];
  if (v5) {
    BOOL v6 = v4 > v5;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    goto LABEL_27;
  }
  unint64_t v7 = v5 - v4;
  BOOL v8 = a3 == -1 && v5 < v4;
  if (a3 != -1) {
    unint64_t v7 = a3;
  }
  BOOL v9 = __CFADD__(v4, v7);
  if (__CFADD__(v4, v7)) {
    BOOL v8 = 1;
  }
  BOOL v10 = v4 + v7 <= v5 && !v8;
  if (!v10
    || v9
    || (uint64_t v11 = *this, *a4 = *this + v4, a4[1] = v7, v7 - 0x4000000000000000 < 0xC000000000000001)
    || !v11)
  {
LABEL_27:
    *a4 = 0;
    a4[1] = 0;
  }
  return this;
}

void os_detail::panic_trapping_policy::trap(os_detail::panic_trapping_policy *this, const char *a2)
{
}

uint64_t IO80211BufferCursor::_asType<wl_event_data_if>(uint64_t *a1, uint64_t a2, const char *a3)
{
  uint64_t v3 = &a3[a2];
  if (__CFADD__(a2, a3)) {
    return 0;
  }
  if ((unint64_t)a3 < 5) {
    return 0;
  }
  unint64_t v5 = a1[1];
  uint64_t result = 0;
  if ((unint64_t)v3 <= v5)
  {
    uint64_t v7 = *a1;
    uint64_t result = v7 + a2;
    if ((unint64_t)&v3[v7] < v7 + a2 || (unint64_t)a3 >> 32) {
      os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"The range of valid memory is too large to be represented by this type, or [begin, end) is not a well-formed range", a3);
    }
  }
  return result;
}

uint64_t IO80211BufferCursor::_asType<bcmv3_awdl_scan_event_data_min>(uint64_t *a1, uint64_t a2, const char *a3)
{
  uint64_t v3 = &a3[a2];
  if (__CFADD__(a2, a3)) {
    return 0;
  }
  if ((unint64_t)a3 < 4) {
    return 0;
  }
  unint64_t v5 = a1[1];
  uint64_t result = 0;
  if ((unint64_t)v3 <= v5)
  {
    uint64_t v7 = *a1;
    uint64_t result = v7 + a2;
    if ((unint64_t)&v3[v7] < v7 + a2 || (unint64_t)a3 >> 32) {
      os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"The range of valid memory is too large to be represented by this type, or [begin, end) is not a well-formed range", a3);
    }
  }
  return result;
}

uint64_t IO80211BufferCursor::_asType<ether_addr>(uint64_t *a1, uint64_t a2, const char *a3)
{
  uint64_t v3 = &a3[a2];
  if (__CFADD__(a2, a3)) {
    return 0;
  }
  if ((unint64_t)a3 < 6) {
    return 0;
  }
  unint64_t v5 = a1[1];
  uint64_t result = 0;
  if ((unint64_t)v3 <= v5)
  {
    uint64_t v7 = *a1;
    uint64_t result = v7 + a2;
    if ((unint64_t)&v3[v7] < v7 + a2 || (unint64_t)a3 >> 32) {
      os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"The range of valid memory is too large to be represented by this type, or [begin, end) is not a well-formed range", a3);
    }
  }
  return result;
}

uint64_t IO80211BufferCursor::_asType<apple8021_awdl_cca_stats>(uint64_t *a1, uint64_t a2, const char *a3)
{
  uint64_t v3 = &a3[a2];
  if (__CFADD__(a2, a3)) {
    return 0;
  }
  if ((unint64_t)a3 < 0x14) {
    return 0;
  }
  unint64_t v5 = a1[1];
  uint64_t result = 0;
  if ((unint64_t)v3 <= v5)
  {
    uint64_t v7 = *a1;
    uint64_t result = v7 + a2;
    if ((unint64_t)&v3[v7] < v7 + a2 || (unint64_t)a3 >> 32) {
      os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"The range of valid memory is too large to be represented by this type, or [begin, end) is not a well-formed range", a3);
    }
  }
  return result;
}

void _GLOBAL__sub_I_AppleBCMWLANProximityInterface_cpp()
{
  kNullRange = 0;
}

uint64_t AppleBCMWLANSkywalkPacketPool::initWithName(IOUserNetworkPacketBufferPool *a1, const char *a2, OSObject *a3, uint64_t a4)
{
  v5.dmaSpecification.options = 0;
  memset(v5.dmaSpecification._resv, 0, 192);
  v5.dmaSpecification.maxAddressBits = 64;
  *(_OWORD *)&v5.packetCount = *(_OWORD *)a4;
  *(void *)&v5.memorySegmentSize = *(void *)(a4 + 16);
  return IOUserNetworkPacketBufferPool::initWithName(a1, a2, a3, 1u, &v5);
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkPacketPool::initWithName(uint64_t a1, const char *a2, OSObject *a3, uint64_t a4)
{
  v5.dmaSpecification.options = 0;
  memset(v5.dmaSpecification._resv, 0, 192);
  v5.dmaSpecification.maxAddressBits = 64;
  *(_OWORD *)&v5.packetCount = *(_OWORD *)a4;
  *(void *)&v5.memorySegmentSize = *(void *)(a4 + 16);
  return IOUserNetworkPacketBufferPool::initWithName((IOUserNetworkPacketBufferPool *)(a1 - 56), a2, a3, 1u, &v5);
}

uint64_t AppleBCMWLANSkywalkPacketPool::newPacket(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  if (!v4) {
    return 3758097085;
  }
  uint64_t v5 = v4;
  uint64_t result = 0;
  *a3 = v5;
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkPacketPool::newPacket(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(a1 - 40) + 136))();
  if (!v4) {
    return 3758097085;
  }
  uint64_t v5 = v4;
  uint64_t result = 0;
  *a3 = v5;
  return result;
}

uint64_t AppleBCMWLANSkywalkPacketPool::newPacketWithDescriptor()
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkPacketPool::newPacketWithDescriptor()
{
  return 0;
}

OSObject *AppleBCMWLANChipManagerPCIe4357::withChip(AppleBCMWLANChipManagerPCIe4357 *this, uint64_t a2)
{
  BOOL v6 = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANChipManagerPCIe4357MetaClass, &v6)) {
    return 0;
  }
  uint64_t v4 = v6;
  if (v6
    && (((uint64_t (*)(OSObject *, AppleBCMWLANChipManagerPCIe4357 *, uint64_t))v6->OSMetaClassBase::__vftable[4].isEqualTo)(v6, this, a2) & 1) == 0)
  {
    ((void (*)(OSObject *))v4->release)(v4);
    return 0;
  }
  return v4;
}

BOOL AppleBCMWLANChipManagerPCIe4357::initWithChip(OSObject *this, int a2)
{
  BOOL result = AppleBCMWLANChipManagerPCIe::init(this);
  if (result)
  {
    AppleBCMWLANChipManagerPCIe::setOTPCoreID((uint64_t)this, 0);
    AppleBCMWLANChipManagerPCIe::setAWDLSupported((AppleBCMWLANChipManagerPCIe *)this, 1);
    AppleBCMWLANChipManagerPCIe::setChipNumber((uint64_t)this, a2);
    AppleBCMWLANChipManagerPCIe::setCoreCount((uint64_t)this, 9);
    AppleBCMWLANChipManagerPCIe::setCoreRegionList((uint64_t)this, (uint64_t)&kBCOM4357ChipCores);
    AppleBCMWLANChipManagerPCIe::setWrapperCount((uint64_t)this, 18);
    AppleBCMWLANChipManagerPCIe::setWrapperRegionList((uint64_t)this, (uint64_t)&kBCOM4357ChipWrappers);
    AppleBCMWLANChipManagerPCIe::setMemoryCount((uint64_t)this, 7);
    AppleBCMWLANChipManagerPCIe::setMemoryRegionList((uint64_t)this, (uint64_t)&kBCOM4357ChipMemories);
    AppleBCMWLANChipManagerPCIe::setBackplaneWindowCount((uint64_t)this, 8);
    AppleBCMWLANChipManagerPCIe::setBackplaneWindows((uint64_t)this, (uint64_t)&kBCOM4357ChipBackplaneWindows);
    AppleBCMWLANChipManagerPCIe::setOTPCoreID((uint64_t)this, 8);
    AppleBCMWLANChipManagerPCIe::setUserOTPRange((uint64_t)this, (uint64_t)&kBCOM4357ChipUserOTP);
    AppleBCMWLANChipManagerPCIe::setChipOTPRange((uint64_t)this, (uint64_t)&kBCOM4357ChipOTP);
    AppleBCMWLANChipManagerPCIe::setCoreIDTable((uint64_t)this, kBCOM4357CoreIDTable);
    AppleBCMWLANChipManagerPCIe::setUCodeRegionInfo((uint64_t)this, (uint64_t)&kBCOM4357UCodeSCRRegionInfo, 0);
    AppleBCMWLANChipManagerPCIe::setUCodeRegionInfo((uint64_t)this, (uint64_t)&kBCOM4357UCodeSHMRegionInfo, 1);
    AppleBCMWLANChipManagerPCIe::setConfigSpaceSaveRange((uint64_t)this, (uint64_t)&kBCOM4357ChipConfigSpaceStateTable);
    AppleBCMWLANChipManagerPCIe::setConfigSpaceSaveCount((uint64_t)this, 3);
    AppleBCMWLANChipManagerPCIe::setMemoryRAMAddress((uint64_t)this, 1507328);
    AppleBCMWLANChipManagerPCIe::setPCIeHeaderLength((uint64_t)this, 256);
    AppleBCMWLANChipManagerPCIe::setSROMVersion((uint64_t)this, 16);
    AppleBCMWLANChipManagerPCIe::setSROMWordCount((uint64_t)this, 1024);
    AppleBCMWLANChipManagerPCIe::setSROMSignature((uint64_t)this, 17239);
    AppleBCMWLANChipManagerPCIe::setMultiFunctionChip((uint64_t)this, 0);
    AppleBCMWLANChipManagerPCIe::setNotSplitArchitecture((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setBootMSIUnsupported((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setTrapBeforeFLRUnSupported((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::sethostWakeToggleNotConfigured((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setSafeToCaptureSoCRAM((uint64_t)this, 1);
    int v10 = 0;
    while (1)
    {
      uint64_t BackplaneWindows = AppleBCMWLANChipManagerPCIe::getBackplaneWindows((AppleBCMWLANChipManagerPCIe *)this);
      unsigned int PacketCount = AppleBCMWLANPCIeFlowQueue::getPacketCount((AppleBCMWLANPCIeFlowQueue *)this);
      if (!AppleBCMWLANChipManagerPCIe::findRemappableWindow(BackplaneWindows, PacketCount, 0, &v10)) {
        break;
      }
      AppleBCMWLANChipManagerPCIe::incrementCoreRemapperCount((uint64_t)this);
    }
    int v10 = 0;
    while (1)
    {
      uint64_t v7 = AppleBCMWLANChipManagerPCIe::getBackplaneWindows((AppleBCMWLANChipManagerPCIe *)this);
      unsigned int v8 = AppleBCMWLANPCIeFlowQueue::getPacketCount((AppleBCMWLANPCIeFlowQueue *)this);
      if (!AppleBCMWLANChipManagerPCIe::findRemappableWindow(v7, v8, 1, &v10)) {
        break;
      }
      AppleBCMWLANChipManagerPCIe::incrementWrapperRemapperCount((uint64_t)this);
    }
    BOOL v9 = OSDictionary::withCapacity(0x20u);
    return AppleBCMWLANChipManagerPCIe::setChipProvisioningData((AppleBCMWLANChipManagerPCIe *)this, v9);
  }
  return result;
}

BOOL non-virtual thunk to'AppleBCMWLANChipManagerPCIe4357::initWithChip(AppleBCMWLANChipManagerPCIe4357 *this, int a2)
{
  return AppleBCMWLANChipManagerPCIe4357::initWithChip((OSObject *)((char *)this - 56), a2);
}

uint64_t AppleBCMWLANChipManagerPCIe4357::isHighResourceChip(AppleBCMWLANChipManagerPCIe4357 *this)
{
  return 1;
}

uint64_t non-virtual thunk to'AppleBCMWLANChipManagerPCIe4357::isHighResourceChip(AppleBCMWLANChipManagerPCIe4357 *this)
{
  return 1;
}

uint64_t AppleBCMWLANChipManagerPCIe4357::prepareHardware(AppleBCMWLANChipManagerPCIe4357 *this, AppleBCMWLANChipConfigSpace *a2, AppleBCMWLANChipBackplane *a3)
{
  uint64_t v3 = 3758097090;
  unsigned int v6 = 0;
  if (a2 && a3)
  {
    if (AppleBCMWLANChipBackplane::readGCICoreReg32(a3, 0xE64u, &v6))
    {
      return 3758097098;
    }
    else
    {
      unsigned int v6 = v6 & 0xFFFFFFFC | 1;
      AppleBCMWLANChipBackplane::writeGCICoreReg32(a3, 0xE64u, v6);
      return 0;
    }
  }
  return v3;
}

uint64_t AppleBCMWLANChipManagerPCIe4357::checkHardware(AppleBCMWLANChipManagerPCIe4357 *this, AppleBCMWLANChipConfigSpace *a2, AppleBCMWLANChipBackplane *a3)
{
  unsigned int v6 = 0;
  uint64_t result = 3758097090;
  if (a2 && a3)
  {
    AppleBCMWLANChipBackplane::writeGCICoreReg32(a3, 0x40u, 4u);
    if (AppleBCMWLANChipBackplane::readGCICoreReg32(a3, 0x204u, &v6) || (v6 & 0x4000) != 0)
    {
      return 3758097098;
    }
    else
    {
      int v5 = AppleBCMWLANChipBackplane::readGCICoreReg32(a3, 0x40u, &v6);
      uint64_t result = 3758097098;
      if (!v5)
      {
        if (v6 == 4) {
          return 0;
        }
        else {
          return 3758097098;
        }
      }
    }
  }
  return result;
}

void _GLOBAL__sub_I_AppleBCMWLANChipManagerPCIe4357_cpp()
{
  kNullRange = 0;
}

OSObject *AppleBCMWLANChipManagerPCIe4387::withChip(AppleBCMWLANChipManagerPCIe4387 *this, uint64_t a2)
{
  unsigned int v6 = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANChipManagerPCIe4387MetaClass, &v6)) {
    return 0;
  }
  uint64_t v4 = v6;
  if (v6
    && (((uint64_t (*)(OSObject *, AppleBCMWLANChipManagerPCIe4387 *, uint64_t))v6->OSMetaClassBase::__vftable[4].isEqualTo)(v6, this, a2) & 1) == 0)
  {
    ((void (*)(OSObject *))v4->release)(v4);
    return 0;
  }
  return v4;
}

uint64_t AppleBCMWLANChipManagerPCIe4387::initWithChip(OSObject *this, int a2)
{
  uint64_t result = AppleBCMWLANChipManagerPCIe::init(this);
  if (result)
  {
    uint64_t result = IOMallocZeroTyped();
    this[1].ivars = (OSObject_IVars *)result;
    if (result)
    {
      AppleBCMWLANChipManagerPCIe::setOTPCoreID((uint64_t)this, 0);
      AppleBCMWLANChipManagerPCIe::setAWDLSupported((AppleBCMWLANChipManagerPCIe *)this, 1);
      AppleBCMWLANChipManagerPCIe::setChipNumber((uint64_t)this, a2);
      AppleBCMWLANChipManagerPCIe::setCoreCount((uint64_t)this, 10);
      AppleBCMWLANChipManagerPCIe::setCoreRegionList((uint64_t)this, (uint64_t)&kBCOM4387ChipCores);
      AppleBCMWLANChipManagerPCIe::setWrapperCount((uint64_t)this, 19);
      AppleBCMWLANChipManagerPCIe::setWrapperRegionList((uint64_t)this, (uint64_t)&kBCOM4387ChipWrappers);
      AppleBCMWLANChipManagerPCIe::setMemoryCount((uint64_t)this, 7);
      AppleBCMWLANChipManagerPCIe::setMemoryRegionList((uint64_t)this, (uint64_t)&kBCOM4387ChipMemories);
      AppleBCMWLANChipManagerPCIe::setBackplaneWindowCount((uint64_t)this, 9);
      AppleBCMWLANChipManagerPCIe::setBackplaneWindows((uint64_t)this, (uint64_t)&kBCOM4387ChipBackplaneWindows);
      AppleBCMWLANChipManagerPCIe::setOTPCoreID((uint64_t)this, 8);
      AppleBCMWLANChipManagerPCIe::setUserOTPRange((uint64_t)this, (uint64_t)&kBCOM4387ChipUserOTP);
      AppleBCMWLANChipManagerPCIe::setChipOTPRange((uint64_t)this, (uint64_t)&kBCOM4387ChipOTP);
      AppleBCMWLANChipManagerPCIe::setCoreIDTable((uint64_t)this, kBCOM4387CoreIDTable);
      AppleBCMWLANChipManagerPCIe::setUCodeRegionInfo((uint64_t)this, (uint64_t)&kBCOM4387UCodeSCRRegionInfo, 0);
      AppleBCMWLANChipManagerPCIe::setUCodeRegionInfo((uint64_t)this, (uint64_t)&kBCOM4387UCodeSHMRegionInfo, 1);
      AppleBCMWLANChipManagerPCIe::setConfigSpaceSaveRange((uint64_t)this, (uint64_t)&kBCOM4387ChipConfigSpaceStateTable);
      AppleBCMWLANChipManagerPCIe::setConfigSpaceSaveCount((uint64_t)this, 3);
      AppleBCMWLANChipManagerPCIe::setMemoryRAMAddress((uint64_t)this, 7602176);
      AppleBCMWLANChipManagerPCIe::setPCIeHeaderLength((uint64_t)this, 256);
      AppleBCMWLANChipManagerPCIe::setSROMVersion((uint64_t)this, 15);
      AppleBCMWLANChipManagerPCIe::setSROMWordCount((uint64_t)this, 2048);
      AppleBCMWLANChipManagerPCIe::setSROMSignature((uint64_t)this, 4368);
      AppleBCMWLANChipManagerPCIe::setSROMoffsetMacAddress((uint64_t)this, 4);
      AppleBCMWLANChipManagerPCIe::setSROMoffsetSKU((uint64_t)this, 14);
      AppleBCMWLANChipManagerPCIe::setSROMoffsetSignature((uint64_t)this, 2);
      AppleBCMWLANChipManagerPCIe::setMultiFunctionChip((uint64_t)this, 1);
      AppleBCMWLANChipManagerPCIe::setSafeToCaptureSoCRAM((uint64_t)this, 1);
      AppleBCMWLANChipManagerPCIe::setHMAPSupported((uint64_t)this, 1);
      AppleBCMWLANChipManagerPCIe::setHMAPBaseAddress((uint64_t)this, 1408);
      AppleBCMWLANChipManagerPCIe::sethostWakeToggleNotConfigured((uint64_t)this, 1);
      AppleBCMWLANChipManagerPCIe::setM2MResetOnSSResetDisabled((uint64_t)this, 1);
      AppleBCMWLANChipManagerPCIe::setPowerControlRequired((uint64_t)this, 1);
      AppleBCMWLANChipManagerPCIe::setPTMSupport((uint64_t)this, 1);
      int v10 = 0;
      while (1)
      {
        uint64_t BackplaneWindows = AppleBCMWLANChipManagerPCIe::getBackplaneWindows((AppleBCMWLANChipManagerPCIe *)this);
        unsigned int PacketCount = AppleBCMWLANPCIeFlowQueue::getPacketCount((AppleBCMWLANPCIeFlowQueue *)this);
        if (!AppleBCMWLANChipManagerPCIe::findRemappableWindow(BackplaneWindows, PacketCount, 0, &v10)) {
          break;
        }
        AppleBCMWLANChipManagerPCIe::incrementCoreRemapperCount((uint64_t)this);
      }
      int v10 = 0;
      while (1)
      {
        uint64_t v7 = AppleBCMWLANChipManagerPCIe::getBackplaneWindows((AppleBCMWLANChipManagerPCIe *)this);
        unsigned int v8 = AppleBCMWLANPCIeFlowQueue::getPacketCount((AppleBCMWLANPCIeFlowQueue *)this);
        if (!AppleBCMWLANChipManagerPCIe::findRemappableWindow(v7, v8, 1, &v10)) {
          break;
        }
        AppleBCMWLANChipManagerPCIe::incrementWrapperRemapperCount((uint64_t)this);
      }
      BOOL v9 = OSDictionary::withCapacity(0x20u);
      return AppleBCMWLANChipManagerPCIe::setChipProvisioningData((AppleBCMWLANChipManagerPCIe *)this, v9);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANChipManagerPCIe4387::initWithChip(AppleBCMWLANChipManagerPCIe4387 *this, int a2)
{
  return AppleBCMWLANChipManagerPCIe4387::initWithChip((OSObject *)((char *)this - 56), a2);
}

void AppleBCMWLANChipManagerPCIe4387::free(OSObject *this)
{
  ivars = this[1].ivars;
  if (ivars)
  {
    memset_s(ivars, 8uLL, 0, 8uLL);
    uint64_t v3 = this[1].ivars;
    if (v3)
    {
      IOFree(v3, 8uLL);
      this[1].ivars = 0;
    }
  }
  AppleBCMWLANChipManagerPCIe::free(this);
}

void non-virtual thunk to'AppleBCMWLANChipManagerPCIe4387::free(AppleBCMWLANChipManagerPCIe4387 *this)
{
}

uint64_t AppleBCMWLANChipManagerPCIe4387::prepareHardware(AppleBCMWLANChipManagerPCIe4387 *this, AppleBCMWLANChipConfigSpace *a2, AppleBCMWLANChipBackplane *a3)
{
  uint64_t v3 = 3758097090;
  unsigned int v6 = 0;
  if (a2 && a3)
  {
    if (AppleBCMWLANChipBackplane::readGCICoreReg32(a3, 0xE64u, &v6))
    {
      return 3758097098;
    }
    else
    {
      unsigned int v6 = v6 & 0xFFFFFFFC | 1;
      AppleBCMWLANChipBackplane::writeGCICoreReg32(a3, 0xE64u, v6);
      return 0;
    }
  }
  return v3;
}

uint64_t AppleBCMWLANChipManagerPCIe4387::checkHardware(AppleBCMWLANChipManagerPCIe4387 *this, AppleBCMWLANChipConfigSpace *a2, AppleBCMWLANChipBackplane *a3)
{
  unsigned int v6 = 0;
  uint64_t result = 3758097090;
  if (a2 && a3)
  {
    AppleBCMWLANChipBackplane::writeGCICoreReg32(a3, 0x40u, 4u);
    if (AppleBCMWLANChipBackplane::readGCICoreReg32(a3, 0x204u, &v6) || (v6 & 0x4000) != 0)
    {
      return 3758097098;
    }
    else
    {
      int v5 = AppleBCMWLANChipBackplane::readGCICoreReg32(a3, 0x40u, &v6);
      uint64_t result = 3758097098;
      if (!v5)
      {
        if (v6 == 4) {
          return 0;
        }
        else {
          return 3758097098;
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANChipManagerPCIe4387::readChipProvisioningData(AppleBCMWLANChipManagerPCIe4387 *this, AppleBCMWLANChipBackplane *a2, const OSData *a3)
{
  __int16 v50 = 0;
  if (**((void **)this + 9)) {
    return 0;
  }
  uint64_t v3 = 3758097085;
  if (!a2 || AppleBCMWLANChipManagerPCIe4387::readSFLASH(this, a2, a3)) {
    return 3758097086;
  }
  if (!**((void **)this + 9)) {
    return 3758097086;
  }
  int SROMByteCount = AppleBCMWLANChipManagerPCIe::getSROMByteCount(this);
  if (OSData::getLength(**((const OSData ***)this + 9)) != SROMByteCount) {
    return 3825175817;
  }
  uint64_t BytesNoCopy = (unsigned __int8 *)OSData::getBytesNoCopy(**((const OSData ***)this + 9));
  if (!BytesNoCopy) {
    return 3825175818;
  }
  uint64_t v7 = BytesNoCopy;
  unsigned int v8 = AppleBCMWLANChipManagerPCIe::getSROMByteCount(this);
  OSDataPtr v9 = OSData::withBytes(v7, v8);
  if (v9)
  {
    OSDataPtr v10 = v9;
    AppleBCMWLANChipManagerPCIe::setChipProvisioningData(this, "SROM", v9);
    ((void (*)(OSDataPtr))v10->release)(v10);
    uint64_t v11 = (char *)OSData::getBytesNoCopy(**((const OSData ***)this + 9));
    uint64_t v12 = &v11[AppleBCMWLANChipManagerPCIe::getSROMoffsetMacAddress(this)];
    bytes[0] = *v12;
    bytes[1] = v12[1];
    bytes[2] = v12[2];
    bytes[3] = v12[3];
    bytes[4] = v12[4];
    bytes[5] = v12[5];
    OSDataPtr v13 = OSData::withBytes(bytes, 6uLL);
    if (v13)
    {
      OSDataPtr v14 = v13;
      AppleBCMWLANChipManagerPCIe::setChipProvisioningData(this, "macaddress", v13);
      ((void (*)(OSDataPtr))v14->release)(v14);
      unsigned int v48 = (v7[1] << 9) | (2 * *v7);
      OSDataPtr v15 = OSData::withBytes(&v48, 2uLL);
      if (v15)
      {
        OSDataPtr v16 = v15;
        AppleBCMWLANChipManagerPCIe::setChipProvisioningData(this, "SROM:datalength", v15);
        ((void (*)(OSDataPtr))v16->release)(v16);
        unsigned int v17 = v48;
        unsigned int v18 = AppleBCMWLANChipManagerPCIe::getSROMByteCount(this);
        unsigned int v19 = v48;
        uint64_t v20 = OSData::withCapacity(1u);
        if (v20)
        {
          unsigned __int16 v21 = v20;
          uint64_t v22 = v19 - 2;
          if (v19 <= 2 || v17 >= v18) {
            uint64_t v22 = 0;
          }
          OSData::appendBytes(v20, &v7[v22], 1uLL);
          AppleBCMWLANChipManagerPCIe::setChipProvisioningData(this, "SROM:version", v21);
          ((void (*)(OSObject *))v21->release)(v21);
          OSDataPtr v24 = OSData::withCapacity(2u);
          if (v24)
          {
            long long v25 = v24;
            int SROMoffsetSignature = AppleBCMWLANChipManagerPCIe::getSROMoffsetSignature(this);
            OSData::appendBytes(v25, &v7[SROMoffsetSignature + 1], 1uLL);
            int v27 = AppleBCMWLANChipManagerPCIe::getSROMoffsetSignature(this);
            OSData::appendBytes(v25, &v7[v27], 1uLL);
            AppleBCMWLANChipManagerPCIe::setChipProvisioningData(this, "SROM:signature", v25);
            ((void (*)(OSData *))v25->release)(v25);
            LODWORD(v25) = v48;
            unsigned __int8 v28 = v25 >= AppleBCMWLANChipManagerPCIe::getSROMByteCount(this)
                ? 0
                : getcrc8(v7, v48, 0xFFu);
            unsigned __int8 v49 = v28;
            uint64_t v29 = OSData::withCapacity(1u);
            if (v29)
            {
              int v30 = v29;
              OSData::appendBytes(v29, &v49, 1uLL);
              AppleBCMWLANChipManagerPCIe::setChipProvisioningData(this, "checksum:value", v30);
              ((void (*)(OSObject *))v30->release)(v30);
              BOOL v47 = v49 == 159;
              __int16 v31 = OSData::withCapacity(1u);
              if (v31)
              {
                __int16 v32 = v31;
                OSData::appendBytes(v31, &v47, 1uLL);
                AppleBCMWLANChipManagerPCIe::setChipProvisioningData(this, "checksum:valid", v32);
                ((void (*)(OSObject *))v32->release)(v32);
                unsigned int v33 = v48;
                unsigned int v34 = AppleBCMWLANChipManagerPCIe::getSROMByteCount(this);
                unsigned int v35 = v48;
                unsigned int v36 = OSData::withCapacity(1u);
                if (v36)
                {
                  unsigned __int8 v37 = v36;
                  uint64_t v38 = v35 - 1;
                  if (v35 <= 2 || v33 >= v34) {
                    uint64_t v38 = 0;
                  }
                  OSData::appendBytes(v36, &v7[v38], 1uLL);
                  AppleBCMWLANChipManagerPCIe::setChipProvisioningData(this, "checksum:rawvalue", v37);
                  ((void (*)(OSObject *))v37->release)(v37);
                  long long v40 = (const OSData *)**((void **)this + 9);
                  unsigned int SROMoffsetSKU = AppleBCMWLANChipManagerPCIe::getSROMoffsetSKU(this);
                  LOBYTE(v50) = *(unsigned char *)OSData::getBytesNoCopy(v40, SROMoffsetSKU, 1uLL);
                  long long v42 = (const OSData *)**((void **)this + 9);
                  int v43 = AppleBCMWLANChipManagerPCIe::getSROMoffsetSKU(this);
                  HIBYTE(v50) = *(unsigned char *)OSData::getBytesNoCopy(v42, (v43 + 1), 1uLL);
                  int v44 = OSData::withCapacity(2u);
                  if (v44)
                  {
                    unsigned __int16 v45 = v44;
                    OSData::appendBytes(v44, &v50, 1uLL);
                    OSData::appendBytes(v45, (char *)&v50 + 1, 1uLL);
                    AppleBCMWLANChipManagerPCIe::setChipProvisioningData(this, "SKU", v45);
                    ((void (*)(OSData *))v45->release)(v45);
                    return 0;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v3;
}

uint64_t AppleBCMWLANChipManagerPCIe4387::readSFLASH(AppleBCMWLANChipManagerPCIe4387 *this, AppleBCMWLANChipBackplane *a2, const OSData *a3)
{
  unsigned int v17 = 0;
  char bytes = 58;
  if (**((void **)this + 9)) {
    return 0;
  }
  if (!a2) {
    return 3758097086;
  }
  if (a3 && OSData::getLength(a3))
  {
    OSDataPtr v6 = OSData::withData(a3);
  }
  else
  {
    uint32_t SROMByteCount = AppleBCMWLANChipManagerPCIe::getSROMByteCount(this);
    OSDataPtr v6 = OSData::withCapacity(SROMByteCount);
  }
  **((void **)this + 9) = v6;
  uint64_t v8 = **((void **)this + 9);
  if (v8) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = 3758097085;
  }
  if (!a3 && v8)
  {
    if (AppleBCMWLANChipManagerPCIe::getSROMByteCount(this))
    {
      unsigned int v10 = 0;
      do
      {
        OSData::appendBytes(**((OSData ***)this + 9), &bytes, 1uLL);
        ++v10;
      }
      while (v10 < AppleBCMWLANChipManagerPCIe::getSROMByteCount(this));
    }
    uint64_t BytesNoCopy = (AppleBCMWLANChipManagerPCIe4387 *)OSData::getBytesNoCopy(**((const OSData ***)this + 9));
    if (!BytesNoCopy) {
      return 3758097085;
    }
    uint64_t result = AppleBCMWLANChipManagerPCIe4387::sflashGPIOConfig(BytesNoCopy, a2);
    if (!result)
    {
      if (AppleBCMWLANChipManagerPCIe::getSROMByteCount(this) >= 4)
      {
        size_t v12 = 0;
        unint64_t v13 = 0;
        do
        {
          AppleBCMWLANChipBackplane::readCommonSFLASHWrapperReg32(a2, v12, &v17);
          __int16 v14 = v17;
          *(_WORD *)OSData::getBytesNoCopy(**((const OSData ***)this + 9), v12, 2uLL) = v14;
          __int16 v15 = HIWORD(v17);
          *(_WORD *)OSData::getBytesNoCopy(**((const OSData ***)this + 9), v12 + 2, 2uLL) = v15;
          ++v13;
          v12 += 4;
        }
        while (v13 < AppleBCMWLANChipManagerPCIe::getSROMByteCount(this) >> 2);
      }
      return 0;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANChipManagerPCIe4387::readChipProvisioningData(AppleBCMWLANChipManagerPCIe4387 *this, AppleBCMWLANChipBackplane *a2, const OSData *a3)
{
  return AppleBCMWLANChipManagerPCIe4387::readChipProvisioningData((AppleBCMWLANChipManagerPCIe4387 *)((char *)this - 56), a2, a3);
}

uint64_t AppleBCMWLANChipManagerPCIe4387::sflashGPIOConfig(AppleBCMWLANChipManagerPCIe4387 *this, AppleBCMWLANChipBackplane *a2)
{
  uint64_t v2 = 3758097098;
  unsigned int v5 = 0;
  if (!a2) {
    return 3758097086;
  }
  AppleBCMWLANChipBackplane::writeGCICoreReg32(a2, 0x40u, 1u);
  if (!AppleBCMWLANChipBackplane::readGCICoreReg32(a2, 0x200u, &v5))
  {
    AppleBCMWLANChipBackplane::writeGCICoreReg32(a2, 0x200u, v5 & 0xFF0FFFF | 0x80080000);
    AppleBCMWLANChipBackplane::writeGCICoreReg32(a2, 0x40u, 2u);
    if (!AppleBCMWLANChipBackplane::readGCICoreReg32(a2, 0x200u, &v5))
    {
      AppleBCMWLANChipBackplane::writeGCICoreReg32(a2, 0x200u, v5 & 0xFFFF00FF | 0x8800);
      return 0;
    }
  }
  return v2;
}

uint64_t AppleBCMWLANChipManagerPCIe4387::validateChipProvisioningData(AppleBCMWLANChipManagerPCIe4387 *this)
{
  unint64_t v9 = 0;
  if (!AppleBCMWLANChipManagerPCIe::getChipProvisioningData(this)) {
    return 3758097086;
  }
  *(_OWORD *)unsigned int v10 = 0u;
  long long v11 = 0u;
  if (AppleBCMWLANChipManagerPCIe::getChipProvisioningData(this, "checksum:valid", v10, 0x20uLL, &v9)
    || !v10[0])
  {
    if ((*(uint64_t (**)(AppleBCMWLANChipManagerPCIe4387 *))(*(void *)this + 72))(this))
    {
      (*(void (**)(AppleBCMWLANChipManagerPCIe4387 *))(*(void *)this + 72))(this);
      uint64_t v2 = 3825175815;
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANChipManagerPCIe4387 *))(*(void *)this + 72))(this);
        CCLogStream::logAlert(v8, "[dk] %s@%d: Invalid checksum\n");
      }
    }
    else
    {
      return 3825175815;
    }
  }
  else
  {
    *(_OWORD *)unsigned int v10 = 0u;
    long long v11 = 0u;
    if (AppleBCMWLANChipManagerPCIe::getChipProvisioningData(this, "SROM:version", v10, 0x20uLL, &v9)
      || (int v4 = v10[0], AppleBCMWLANChipManagerPCIe::getSROMVersion(this) != v4))
    {
      uint64_t v2 = 3825175811;
      if ((*(uint64_t (**)(AppleBCMWLANChipManagerPCIe4387 *))(*(void *)this + 72))(this))
      {
        (*(void (**)(AppleBCMWLANChipManagerPCIe4387 *))(*(void *)this + 72))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v3 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANChipManagerPCIe4387 *))(*(void *)this + 72))(this);
          CCLogStream::logAlert(v3, "[dk] %s@%d: Invalid version\n");
        }
      }
    }
    else
    {
      *(_OWORD *)unsigned int v10 = 0u;
      long long v11 = 0u;
      if (AppleBCMWLANChipManagerPCIe::getChipProvisioningData(this, "SROM:signature", v10, 0x20uLL, &v9)
        || (unsigned int v6 = bswap32(*(unsigned __int16 *)v10),
            AppleBCMWLANChipManagerPCIe::getSROMSignature(this) != HIWORD(v6)))
      {
        uint64_t v2 = 3825175812;
        if ((*(uint64_t (**)(AppleBCMWLANChipManagerPCIe4387 *))(*(void *)this + 72))(this))
        {
          (*(void (**)(AppleBCMWLANChipManagerPCIe4387 *))(*(void *)this + 72))(this);
          if (CCLogStream::shouldLog())
          {
            unsigned int v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANChipManagerPCIe4387 *))(*(void *)this + 72))(this);
            CCLogStream::logAlert(v5, "[dk] %s@%d: Invalid signature\n", "validateChipProvisioningData", 555);
            return 3825175812;
          }
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return v2;
}

uint64_t non-virtual thunk to'AppleBCMWLANChipManagerPCIe4387::validateChipProvisioningData(AppleBCMWLANChipManagerPCIe4387 *this)
{
  return AppleBCMWLANChipManagerPCIe4387::validateChipProvisioningData((AppleBCMWLANChipManagerPCIe4387 *)((char *)this - 56));
}

OSDataPtr AppleBCMWLANChipManagerPCIe4387::copySROM(AppleBCMWLANChipManagerPCIe4387 *this)
{
  uint64_t v2 = (const OSData *)**((void **)this + 9);
  if (!v2 || !OSData::getLength(v2)) {
    return 0;
  }
  uint64_t v3 = (const OSData *)**((void **)this + 9);
  return OSData::withData(v3);
}

OSDataPtr non-virtual thunk to'AppleBCMWLANChipManagerPCIe4387::copySROM(AppleBCMWLANChipManagerPCIe4387 *this)
{
  return AppleBCMWLANChipManagerPCIe4387::copySROM((AppleBCMWLANChipManagerPCIe4387 *)((char *)this - 56));
}

void _GLOBAL__sub_I_AppleBCMWLANChipManagerPCIe4387_cpp()
{
  kNullRange = 0;
}

OSObject *AppleBCMWLANAudioProtector::withDriver(AppleBCMWLANAudioProtector *this, AppleBCMWLANCore *a2, const OSString *a3)
{
  uint64_t v7 = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANAudioProtectorMetaClass, &v7)) {
    return 0;
  }
  unsigned int v5 = v7;
  if (v7
    && (((uint64_t (*)(OSObject *, AppleBCMWLANAudioProtector *, AppleBCMWLANCore *))v7->OSMetaClassBase::__vftable[2].getMetaClass)(v7, this, a2) & 1) == 0)
  {
    ((void (*)(OSObject *))v5->release)(v5);
    return 0;
  }
  return v5;
}

uint64_t AppleBCMWLANAudioProtector::initWithDriver(OSObject *this, AppleBCMWLANCore *a2, const OSString *a3)
{
  int v6 = IO80211WorkSource::init((IO80211WorkSource *)this, this, 0);
  uint64_t result = 0;
  if (a2 && v6)
  {
    uint64_t v8 = (OSObjectInterface_vtbl *)IOMallocZeroTyped();
    this[1].OSObjectInterface::__vftable = v8;
    if (v8)
    {
      v8[1].init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))a2;
      this[1].OSObjectInterface::__vftable[2].init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))OSMetaClassBase::safeMetaCast((const OSMetaClassBase *)this[1].OSObjectInterface::__vftable[1].init, gIOServiceMetaClass);
      this[1].free = (void (__cdecl *)(OSObjectInterface *__hidden))(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
      free = this[1].free;
      if (!free)
      {
        ClassNameHelper = (const char *)getClassNameHelper(this);
        IOLog("%s:%s(): Unable to get debug logger\n", ClassNameHelper, "initWithDriver");
        goto LABEL_30;
      }
      (*(void (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)free + 8))(free);
      this[1].OSObjectInterface::__vftable[6].free = (void (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANCore::getFaultReporter((AppleBCMWLANCore *)this[1].OSObjectInterface::__vftable[1].init);
      (*(void (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)this[1].OSObjectInterface::__vftable[6].free
                                                                            + 8))(this[1].OSObjectInterface::__vftable[6].free);
      this[1].init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANCore::getCommander(a2);
      unsigned int v10 = this[1].OSObjectInterface::__vftable;
      if (v10->init)
      {
        (*(void (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)v10->init + 8))(v10->init);
        if (a3) {
          long long v11 = (BOOL (__cdecl *)(OSObjectInterface *__hidden))OSString::withString(a3);
        }
        else {
          long long v11 = 0;
        }
        this[1].OSObjectInterface::__vftable[4].init = v11;
        (*(void (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)this[1].OSObjectInterface::__vftable[1].init
                                                                              + 88))(this[1].OSObjectInterface::__vftable[1].init);
        this[1].OSObjectInterface::__vftable[3].free = (void (__cdecl *)(OSObjectInterface *__hidden))IO80211TimerSource::allocWithParams();
        unint64_t v13 = this[1].OSObjectInterface::__vftable;
        if (v13[3].free)
        {
          if (AppleBCMWLANAudioProtector::createReportSet((AppleBCMWLANAudioProtector *)this, v12))
          {
            if (AppleBCMWLANAudioProtector::createReportersAndLegend((AppleBCMWLANAudioProtector *)this)) {
              return 1;
            }
            uint64_t result = (uint64_t)this[1].OSObjectInterface::__vftable;
            if (*(void *)(result + 8))
            {
              if (CCLogStream::shouldLog()) {
                CCLogStream::logAlert((CCLogStream *)this[1].free, "[dk] %s@%d:Failed to create Reporters and Legend\n");
              }
              goto LABEL_30;
            }
LABEL_31:
            memset_s((void *)result, 0x70uLL, 0, 0x70uLL);
            uint64_t result = (uint64_t)this[1].OSObjectInterface::__vftable;
            if (result)
            {
              IOFree((void *)result, 0x70uLL);
              uint64_t result = 0;
              this[1].OSObjectInterface::__vftable = 0;
            }
            return result;
          }
          uint64_t result = (uint64_t)this[1].OSObjectInterface::__vftable;
          if (!*(void *)(result + 8)) {
            goto LABEL_31;
          }
          if (CCLogStream::shouldLog()) {
            CCLogStream::logAlert((CCLogStream *)this[1].free, "[dk] %s@%d:Failed to create Report Set\n");
          }
        }
        else if (v13->free && CCLogStream::shouldLog())
        {
          CCLogStream::logAlert((CCLogStream *)this[1].free, "[dk] %s@%d: Unable to get timer to send FW command\n");
        }
      }
      else if (v10->free && CCLogStream::shouldLog())
      {
        CCLogStream::logAlert((CCLogStream *)this[1].free, "[dk] %s@%d:Failed to get Command Manager\n");
      }
    }
    else
    {
      uint64_t result = MEMORY[8];
      if (!MEMORY[8]) {
        return result;
      }
      if (CCLogStream::shouldLog()) {
        CCLogStream::logCrit((CCLogStream *)this[1].free, "[dk] %s@%d:Failed to allocate AppleBCMWLANAudioProtector_IVars\n", "initWithDriver", 114);
      }
    }
LABEL_30:
    uint64_t result = (uint64_t)this[1].OSObjectInterface::__vftable;
    if (!result) {
      return result;
    }
    goto LABEL_31;
  }
  return result;
}

uint64_t AppleBCMWLANAudioProtector::sendLDOCommmand(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  int v3 = *(unsigned __int8 *)(v2 + 44);
  int v23 = v3;
  int isSleeping = AppleBCMWLANCommander::isSleeping(*(AppleBCMWLANCommander **)v2);
  ++*(_DWORD *)(*(void *)(a1 + 64) + 72);
  if (AppleBCMWLANCore::isWatchdogFailed(*(AppleBCMWLANCore **)(*(void *)(a1 + 64) + 16)))
  {
    uint64_t v9 = 3766630404;
    goto LABEL_16;
  }
  uint64_t v5 = *(void *)(a1 + 64);
  if (*(unsigned __int8 *)(v5 + 45) == *(unsigned __int8 *)(v5 + 44))
  {
    uint64_t result = *(void *)(v5 + 8);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result) {
        return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 64) + 8), "[dk] %s@%d:LDO Request changed before sending command to FW. Skipping..\n", "sendLDOCommmand", 332);
      }
    }
    return result;
  }
  if (AppleBCMWLANCore::isSendingFWCommandPermitted(*(AppleBCMWLANCore **)(v5 + 16)))
  {
    if (isSleeping) {
      AppleBCMWLANCommander::wakeup(**(AppleBCMWLANCommander ***)(a1 + 64));
    }
    if (v3) {
      unint64_t v7 = 0x576C616E41504C6FLL;
    }
    else {
      unint64_t v7 = 0x576C616E41504C66;
    }
    IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*(void *)(a1 + 64) + 80), v7, 1);
    uint64_t v8 = **(AppleBCMWLANCommander ***)(a1 + 64);
    v22[0] = &v23;
    v22[1] = 4;
    uint64_t v9 = AppleBCMWLANCommander::runIOVarSet(v8, (uint64_t)"ldo_prot_ovrd", (uint64_t)v22, 0, 0);
    if (isSleeping && !AppleBCMWLANCore::isPowerChangeInProgress(*(AppleBCMWLANCore **)(*(void *)(a1 + 64) + 16))) {
      AppleBCMWLANCommander::quiesce(**(AppleBCMWLANCommander ***)(a1 + 64));
    }
    if (!v9)
    {
      *(unsigned char *)(*(void *)(a1 + 64) + 45) = *(unsigned char *)(*(void *)(a1 + 64) + 44);
      *(_DWORD *)(*(void *)(a1 + 64) + 48) = 0;
      uint64_t v15 = *(void *)(a1 + 64);
      if (*(unsigned char *)(v15 + 45)) {
        unint64_t v16 = 0x466F726365204F4ELL;
      }
      else {
        unint64_t v16 = 1635087471;
      }
      IOStateReporter::setChannelState(*(IOStateReporter **)(v15 + 88), 0x574946494C444F53uLL, v16);
      uint64_t v9 = 0;
LABEL_29:
      uint64_t result = *(void *)(*(void *)(a1 + 64) + 8);
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          uint64_t v17 = *(void *)(a1 + 64);
          int v18 = *(unsigned __int8 *)(v17 + 44);
          unsigned int v19 = *(CCLogStream **)(v17 + 8);
          int v20 = *(_DWORD *)(v17 + 72);
          unsigned __int16 v21 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v17 + 16) + 112))(*(void *)(v17 + 16), v9);
          return CCLogStream::logNotice(v19, "[dk] %s@%d:No %d ldo_prot_ovrd %d return %d %s: %u\n", "sendLDOCommmand", 399, v20, v18, v9, v21, *(_DWORD *)(*(void *)(a1 + 64) + 48));
        }
      }
      return result;
    }
LABEL_16:
    IOSimpleReporter::incrementValue(*(IOSimpleReporter **)(*(void *)(a1 + 64) + 80), 0x576C616E41504366uLL, 1);
    ++*(_DWORD *)(*(void *)(a1 + 64) + 48);
    uint64_t v10 = *(void *)(a1 + 64);
    char v11 = *(unsigned char *)(v10 + 44);
    if (*(_DWORD *)(v10 + 48) <= 9u) {
      v11 ^= 1u;
    }
    *(unsigned char *)(v10 + 45) = v11;
    goto LABEL_29;
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (*(void *)(v12 + 8))
  {
    int shouldLog = CCLogStream::shouldLog();
    uint64_t v12 = *(void *)(a1 + 64);
    if (shouldLog)
    {
      CCLogStream::logAlert(*(CCLogStream **)(v12 + 8), "[dk] %s@%d:Sending FW command isn't permitted. Rearm the timer\n", "sendLDOCommmand", 336);
      uint64_t v12 = *(void *)(a1 + 64);
    }
  }
  __int16 v14 = *(uint64_t (**)(void))(**(void **)(v12 + 56) + 120);
  return v14();
}

BOOL AppleBCMWLANAudioProtector::createReportSet(AppleBCMWLANAudioProtector *this, unsigned int a2)
{
  *(void *)(*((void *)this + 8) + 96) = OSSet::withCapacity((OSSet *)4, a2);
  uint64_t v3 = *((void *)this + 8);
  uint64_t v4 = *(void *)(v3 + 96);
  if (!v4 && *(void *)(v3 + 8) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 8) + 8), "[dk] %s@%d:Failed to create fAudioProtectReporter\n", "createReportSet", 410);
  }
  return v4 != 0;
}

BOOL AppleBCMWLANAudioProtector::createReportersAndLegend(AppleBCMWLANAudioProtector *this)
{
  ReporterProvider = (IOSimpleReporter *)IO80211Controller::getReporterProvider(*(IO80211Controller **)(*((void *)this + 8) + 16));
  *(void *)(*((void *)this + 8) + 80) = IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v3);
  uint64_t v4 = *((void *)this + 8);
  uint64_t v5 = *(const OSMetaClassBase **)(v4 + 80);
  if (!v5) {
    return 0;
  }
  OSSet::setObject(*(OSSet **)(v4 + 96), v5);
  (*(void (**)(void))(**(void **)(*((void *)this + 8) + 80) + 16))(*(void *)(*((void *)this + 8)
                                                                                                  + 80));
  for (uint64_t i = 0; i != 112; i += 16)
    IOReporter::addChannel(*(IOReporter **)(*((void *)this + 8) + 80), *(void *)((char *)&kAudioProtectEventReport + i), *(const char **)((char *)&kAudioProtectEventReport + i + 8));
  IO80211Controller::addReporterLegend(*(IO80211Controller **)(*((void *)this + 8) + 16), *(IOService **)(*((void *)this + 8) + 32), *(IOReporter **)(*((void *)this + 8) + 80), "Audio Protect", "Events");
  unint64_t v7 = (IOStateReporter *)IO80211Controller::getReporterProvider(*(IO80211Controller **)(*((void *)this + 8) + 16));
  *(void *)(*((void *)this + 8) + 88) = IOStateReporter::with(v7, (IOService *)0x12, 2u, 0, v8);
  uint64_t v9 = *((void *)this + 8);
  uint64_t v10 = *(const OSMetaClassBase **)(v9 + 88);
  if (!v10) {
    return 0;
  }
  OSSet::setObject(*(OSSet **)(v9 + 96), v10);
  (*(void (**)(void))(**(void **)(*((void *)this + 8) + 88) + 16))(*(void *)(*((void *)this + 8)
                                                                                                  + 88));
  IOReporter::addChannel(*(IOReporter **)(*((void *)this + 8) + 88), 0x574946494C444F53uLL, "LDO Control");
  IOStateReporter::setStateID(*(IOStateReporter **)(*((void *)this + 8) + 88), 0x574946494C444F53uLL, 0, 0x466F726365204F4EuLL);
  IOStateReporter::setStateID(*(IOStateReporter **)(*((void *)this + 8) + 88), 0x574946494C444F53uLL, 1, 0x6175746FuLL);
  IOStateReporter::setChannelState(*(IOStateReporter **)(*((void *)this + 8) + 88), 0x574946494C444F53uLL, 0x6175746FuLL);
  return IO80211Controller::addReporterLegend(*(IO80211Controller **)(*((void *)this + 8) + 16), *(IOService **)(*((void *)this + 8) + 32), *(IOReporter **)(*((void *)this + 8) + 88), "Audio Protect", "LDO Control") == 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANAudioProtector::initWithDriver(AppleBCMWLANAudioProtector *this, AppleBCMWLANCore *a2, const OSString *a3)
{
  return AppleBCMWLANAudioProtector::initWithDriver((OSObject *)((char *)this - 56), a2, a3);
}

uint64_t AppleBCMWLANAudioProtector::setLDOOnRequest(AppleBCMWLANAudioProtector *this, int a2)
{
  uint64_t v4 = *((void *)this + 8);
  if (*(void *)(v4 + 8))
  {
    int shouldLog = CCLogStream::shouldLog();
    uint64_t v4 = *((void *)this + 8);
    if (shouldLog)
    {
      CCLogStream::logCrit(*(CCLogStream **)(v4 + 8), "[dk] %s@%d:SetLDOOnRequest %u\n", "setLDOOnRequest", 256, a2);
      uint64_t v4 = *((void *)this + 8);
    }
  }
  *(unsigned char *)(v4 + 44) = a2;
  return IO80211WorkSource::signalWorkAvailable(this);
}

uint64_t AppleBCMWLANAudioProtector::freeResources(AppleBCMWLANAudioProtector *this)
{
  uint64_t v2 = (void *)*((void *)this + 8);
  uint64_t v3 = v2[12];
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    *(void *)(*((void *)this + 8) + 96) = 0;
    uint64_t v2 = (void *)*((void *)this + 8);
  }
  uint64_t v4 = v2[7];
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 72))(v4);
    (*(void (**)(void))(**(void **)(*((void *)this + 8) + 56) + 16))(*(void *)(*((void *)this + 8) + 56));
    *(void *)(*((void *)this + 8) + 56) = 0;
    uint64_t v2 = (void *)*((void *)this + 8);
  }
  uint64_t v5 = v2[8];
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    *(void *)(*((void *)this + 8) + 64) = 0;
    uint64_t v2 = (void *)*((void *)this + 8);
  }
  if (*v2)
  {
    (*(void (**)(void))(*(void *)*v2 + 16))(*v2);
    **((void **)this + 8) = 0;
    uint64_t v2 = (void *)*((void *)this + 8);
  }
  uint64_t v6 = v2[13];
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    *(void *)(*((void *)this + 8) + 104) = 0;
    uint64_t v2 = (void *)*((void *)this + 8);
  }
  uint64_t result = v2[1];
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    *(void *)(*((void *)this + 8) + 8) = 0;
  }
  return result;
}

uint64_t AppleBCMWLANAudioProtector::free(AppleBCMWLANAudioProtector *this)
{
  AppleBCMWLANAudioProtector::freeResources(this);
  uint64_t v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    memset_s(v2, 0x70uLL, 0, 0x70uLL);
    uint64_t v3 = (void *)*((void *)this + 8);
    if (v3)
    {
      IOFree(v3, 0x70uLL);
      *((void *)this + 8) = 0;
    }
  }
  return IO80211WorkSource::free(this);
}

uint64_t non-virtual thunk to'AppleBCMWLANAudioProtector::free(AppleBCMWLANAudioProtector *this)
{
  return AppleBCMWLANAudioProtector::free((AppleBCMWLANAudioProtector *)((char *)this - 24));
}

uint64_t AppleBCMWLANAudioProtector::checkForWork(AppleBCMWLANAudioProtector *this)
{
  uint64_t v1 = *((void *)this + 8);
  if (*(unsigned __int8 *)(v1 + 44) != *(unsigned __int8 *)(v1 + 45))
  {
    if (*(void *)(v1 + 8))
    {
      int shouldLog = CCLogStream::shouldLog();
      uint64_t v1 = *((void *)this + 8);
      if (shouldLog)
      {
        if (*(unsigned char *)(v1 + 44)) {
          uint64_t v5 = "on";
        }
        else {
          uint64_t v5 = "off";
        }
        CCLogStream::logNotice(*(CCLogStream **)(v1 + 8), "[dk] %s@%d:Will send a LDO %s command\n", "checkForWork", 314, v5);
        uint64_t v1 = *((void *)this + 8);
      }
    }
    (*(void (**)(void, uint64_t))(**(void **)(v1 + 56) + 128))(*(void *)(v1 + 56), 1);
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANAudioProtector::checkForWork(AppleBCMWLANAudioProtector *this)
{
  return 0;
}

uint64_t AppleBCMWLANAudioProtector::configureReport(OSObject *this, OSCollection *a2, OSData *a3, unsigned int *a4, unsigned int *a5)
{
  unsigned int v6 = a3;
  unsigned int v15 = 0;
  int v16 = IOReporter::configureAllReports((IOReporter *)this[1].OSObjectInterface::__vftable[6].init, a2, a3, &v15, a5);
  unint64_t v8 = this[1].OSObjectInterface::__vftable;
  free = (CCLogStream *)v8->free;
  uint64_t v10 = (CCFaultReporter *)v8[6].free;
  ClassNameHelper = (const char *)getClassNameHelper(this);
  int v16 = testPostConfigureAllAndAdjustV3(free, v10, ClassNameHelper, v6, (unsigned int *)&v16, a4, v15, -2);
  if (v16 && this[1].free && CCLogStream::shouldLog())
  {
    unint64_t v13 = (CCLogStream *)this[1].free;
    __int16 v14 = (const char *)getClassNameHelper(this);
    CCLogStream::logEmergency(v13, "[dk] %s@%d:DKReporter::%s::%s(%d) testPostConfigureAllAndAdjustV3 failed\n", "configureReport", 473, v14, "configureReport", 473);
  }
  return v16;
}

uint64_t AppleBCMWLANAudioProtector::updateReport(OSObject *this, OSCollection *a2, OSData *a3, unsigned int *a4, unint64_t *a5, unint64_t *a6, IOMemoryDescriptor *a7)
{
  unsigned int v24 = 0;
  free = (CCLogStream *)this[1].free;
  ClassNameHelper = (const char *)getClassNameHelper(this);
  testPreUpdateAllReportersV3(free, ClassNameHelper, (OSSet *)this[1].OSObjectInterface::__vftable[6].init, *a5, *a6, a7);
  int updated = IOReporter::updateAllReports((IOReporter *)this[1].OSObjectInterface::__vftable[6].init, a2, a3, &v24, (unsigned int *)*a5, *a6, (unint64_t)a7, v16);
  uint64_t v17 = this[1].OSObjectInterface::__vftable;
  int v18 = (CCLogStream *)v17->free;
  unsigned int v19 = (CCFaultReporter *)v17[6].free;
  int v20 = (const char *)getClassNameHelper(this);
  int updated = testPostUpdateAllAndAdjustV3(v18, v19, v20, (unsigned int *)&updated, v24, a4, a5, a6, -2);
  if (updated && this[1].free && CCLogStream::shouldLog())
  {
    uint64_t v22 = (CCLogStream *)this[1].free;
    int v23 = (const char *)getClassNameHelper(this);
    CCLogStream::logEmergency(v22, "[dk] %s@%d:DKReporter::%s::%s(%d) testAndAdjustOffsetAndCapacity failed count %u outElementCount %u offset %llu capacity %llu", "updateReport", 493, v23, "updateReport", 493, v24, *a4, *a5, *a6);
  }
  return updated;
}

uint64_t AppleBCMWLANAudioProtector::configureAudioMicProtect(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)(this + 64) + 24) = a2;
  return this;
}

void _GLOBAL__sub_I_AppleBCMWLANAudioProtector_cpp()
{
  kNullRange = 0;
}

uint64_t convertBcomTagToString(int a1)
{
  uint64_t v1 = 0;
  while (*(_DWORD *)((char *)&kEventMapping + v1 + 8) != a1)
  {
    v1 += 24;
    if (v1 == 2328) {
      return 0;
    }
  }
  return *(void *)((char *)&kEventMapping + v1 + 16);
}

uint64_t convertBcomSetToString(int a1)
{
  uint64_t v1 = 0;
  while (kEventLogSetMapping[v1] != a1)
  {
    v1 += 4;
    if (v1 == 176) {
      return 0;
    }
  }
  return *(void *)&kEventLogSetMapping[v1 + 2];
}

AppleBCMWLANCoreDbg *AppleBCMWLANCoreDbg::withCoreDriver(AppleBCMWLANCoreDbg *this, AppleBCMWLANCore *a2)
{
  uint64_t v5 = (AppleBCMWLANCoreDbg *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANCoreDbgMetaClass, (OSObject **)&v5)) {
    return 0;
  }
  uint64_t v3 = v5;
  if (v5 && (AppleBCMWLANCoreDbg::initWithCoreDriver(v5, this) & 1) == 0)
  {
    (*(void (**)(AppleBCMWLANCoreDbg *))(*(void *)v3 + 16))(v3);
    return 0;
  }
  return v3;
}

uint64_t AppleBCMWLANCoreDbg::initWithCoreDriver(AppleBCMWLANCoreDbg *this, AppleBCMWLANCore *a2)
{
  if (a2) {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  }
  uint64_t result = IO80211CoreDbg::initWithOptions();
  if (result)
  {
    uint64_t result = IOMallocZeroTyped();
    *((void *)this + 6) = result;
    if (result)
    {
      *(void *)uint64_t result = a2;
      uint64_t result = **((void **)this + 6);
      if (result)
      {
        *(void *)(*((void *)this + 6) + 8) = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
        return *(void *)(*((void *)this + 6) + 8) != 0;
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCoreDbg::free(AppleBCMWLANCoreDbg *this)
{
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    memset_s(v2, 0x10uLL, 0, 0x10uLL);
    uint64_t v3 = (void *)*((void *)this + 6);
    if (v3)
    {
      IOFree(v3, 0x10uLL);
      *((void *)this + 6) = 0;
    }
  }
  return IO80211CoreDbg::free(this);
}

uint64_t non-virtual thunk to'AppleBCMWLANCoreDbg::free(AppleBCMWLANCoreDbg *this)
{
  return AppleBCMWLANCoreDbg::free((AppleBCMWLANCoreDbg *)((char *)this - 24));
}

uint64_t AppleBCMWLANCoreDbg::dbgTriggerWatchdog(AppleBCMWLANCore ***this, char *a2)
{
  uint64_t result = IOMallocZeroData();
  if (result)
  {
    uint64_t v5 = result;
    strlcpy((char *)(result + 10), a2, 0x80uLL);
    uint64_t v6 = AppleBCMWLANCoreDbg::cmdTriggerWatchdog(v5, *this[6]);
    IOFreeData();
    return v6;
  }
  return result;
}

uint64_t AppleBCMWLANCoreDbg::cmdTriggerWatchdog(uint64_t a1, AppleBCMWLANCore *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  if (!strncmp("T", (const char *)(a1 + 10), 0x80uLL))
  {
    int v10 = IO80211Print();
    if (!a1) {
      return 0;
    }
    LODWORD(v12) = v10;
    uint64_t result = 0;
    uint64_t v12 = v12;
    goto LABEL_14;
  }
  if (!strncmp("tt", (const char *)(a1 + 10), 0x80uLL)) {
    AppleBCMWLANCore::featureFlagClearBit(a2, 23);
  }
  if (strnstr((const char *)(a1 + 10), "SoftErrorTriggeredChipReset", 0x80uLL))
  {
    if (v5 && CCLogStream::shouldLog()) {
      CCLogStream::logNotice(v5, "[dk] %s@%d:Processing: SoftErrorTriggeredChipReset\n", "cmdTriggerWatchdog", 1114);
    }
    unsigned int v6 = IO80211Print();
    uint64_t v8 = IOMallocZeroData();
    if (v8)
    {
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      *(_OWORD *)int v20 = 0u;
      long long v21 = 0u;
      if (IO80211ThreadProcessInfo::getProcessName((IO80211ThreadProcessInfo *)v20, (char *)0x80, v7)) {
        IO80211Controller::getProcessName(a2, v20, 0x80uLL);
      }
      FaultReporter = (CCFaultReporter *)AppleBCMWLANCore::getFaultReporter(a2);
      CCFaultReporter::reportFault(FaultReporter, 5u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCoreDbg.cpp", 0x468u, "cmdTriggerWatchdog", 0, -469793501, "client=%s,call=cmdTriggerWatchdog", v20);
      goto LABEL_23;
    }
LABEL_37:
    if (!a1)
    {
LABEL_25:
      if (v8) {
        IOFreeData();
      }
      return 0;
    }
LABEL_24:
    void *v4 = v6;
    goto LABEL_25;
  }
  if (strnstr((const char *)(a1 + 10), "TriggerCoreCapture", 0x80uLL))
  {
    if (v5 && CCLogStream::shouldLog()) {
      CCLogStream::logNotice(v5, "[dk] %s@%d:Processing: TriggerCoreCapture\n", "cmdTriggerWatchdog", 1137);
    }
    unsigned int v6 = IO80211Print();
    uint64_t v8 = IOMallocZeroData();
    if (!v8) {
      goto LABEL_37;
    }
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    *(_OWORD *)int v20 = 0u;
    long long v21 = 0u;
    if (IO80211ThreadProcessInfo::getProcessName((IO80211ThreadProcessInfo *)v20, (char *)0x80, v13)) {
      IO80211Controller::getProcessName(a2, v20, 0x80uLL);
    }
    __int16 v14 = (CCFaultReporter *)AppleBCMWLANCore::getFaultReporter(a2);
    CCFaultReporter::reportFault(v14, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCoreDbg.cpp", 0x47Fu, "cmdTriggerWatchdog", 0, -469793485, "client=%s,call=cmdTriggerCoreCapture", v20);
LABEL_23:
    if (!a1) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (strnstr((const char *)(a1 + 10), "w", 0x80uLL)
    || strnstr((const char *)(a1 + 10), "t", 0x80uLL)
    || strnstr((const char *)(a1 + 10), "tt", 0x80uLL))
  {
    unsigned int v6 = IO80211Print();
    uint64_t v8 = IOMallocZeroData();
    if (!v8) {
      goto LABEL_37;
    }
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    *(_OWORD *)int v20 = 0u;
    long long v21 = 0u;
    if (IO80211ThreadProcessInfo::getProcessName((IO80211ThreadProcessInfo *)v20, (char *)0x80, v15)) {
      IO80211Controller::getProcessName(a2, v20, 0x80uLL);
    }
    int v16 = (CCFaultReporter *)AppleBCMWLANCore::getFaultReporter(a2);
    CCFaultReporter::reportFault(v16, 5u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCoreDbg.cpp", 0x495u, "cmdTriggerWatchdog", 0, -469793532, "client=%s,call=cmdTriggerWatchdog", v20);
    if (strnstr((const char *)(a1 + 10), "-block", 0x80uLL))
    {
      clock_interval_to_deadline();
      uint64_t v17 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a2 + 104))(a2);
      uint64_t v18 = AppleBCMWLANCore::getFaultReporter(a2);
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v17 + 80))(v17, v18, 0xAAAAAAAAAAAAAAAALL);
    }
    goto LABEL_23;
  }
  if (!strncmp("W", (const char *)(a1 + 10), 0x80uLL))
  {
    unsigned int v19 = IO80211Print();
    uint64_t result = AppleBCMWLANCore::watchdog((IOService *)a2, 0);
    if (!a1) {
      return result;
    }
    uint64_t v12 = v19;
LABEL_14:
    void *v4 = v12;
    return result;
  }
  if (a1) {
    void *v4 = 0;
  }
  return 19;
}

uint64_t AppleBCMWLANCoreDbg::dbgTriggerCrash(uint64_t a1, int a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(***(void ***)(a1 + 48) + 1848))(**(void **)(a1 + 48));
  uint64_t v5 = (CCLogStream *)v4;
  if (a2 <= 8 && v4 && CCLogStream::shouldLog())
  {
    if (a2) {
      uint64_t v12 = (const char *)*((void *)&kCrashIDMapping + 2 * a2 - 1);
    }
    else {
      uint64_t v12 = "UNKOWN";
    }
    CCLogStream::logAlert(v5, "[dk] %s@%d:Crash command id = %s \n", "dbgTriggerCrash", 877, v12);
  }
  switch(a2)
  {
    case 1:
      Commander = (AppleBCMWLANCommander *)AppleBCMWLANCore::getCommander(**(AppleBCMWLANCore ***)(a1 + 48));
      AppleBCMWLANCommander::crashCommander(Commander);
    case 2:
      unint64_t v7 = (AppleBCMWLANCommander *)AppleBCMWLANCore::getCommander(**(AppleBCMWLANCore ***)(a1 + 48));
      AppleBCMWLANCommander::crashIOVar(v7);
      goto LABEL_10;
    case 3:
      return 0;
    case 4:
LABEL_10:
      uint64_t Bus = AppleBCMWLANCore::getBus(**(AppleBCMWLANCore ***)(a1 + 48));
      (*(void (**)(uint64_t))(*(void *)Bus + 432))(Bus);
      return 0;
    case 5:
      uint64_t v9 = AppleBCMWLANCore::getBus(**(AppleBCMWLANCore ***)(a1 + 48));
      (*(void (**)(uint64_t))(*(void *)v9 + 440))(v9);
      return 0;
    case 6:
      AppleBCMWLANCoreDbg::dbgTriggerCrash();
    case 7:
      IOLog("User induced Dext Core Terminate\n");
      int v10 = **(IOService ***)(a1 + 48);
      goto LABEL_14;
    case 8:
      IOLog("User induced Dext Bus Terminate\n");
      int v10 = (IOService *)AppleBCMWLANCore::getBus(**(AppleBCMWLANCore ***)(a1 + 48));
LABEL_14:
      IOService::Terminate(v10, 0, 0);
      break;
    default:
      if (v5 && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(v5, "[dk] %s@%d:Invalid command id %d\n", "dbgTriggerCrash", 925, a2);
      }
      break;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdPrintStats(uint64_t a1, IOService *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  if (a1) {
    uint64_t v5 = *(char **)(a1 + 245208);
  }
  else {
    uint64_t v5 = 0;
  }
  ((void (*)(IOService *))a2->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a2);
  unsigned int v6 = AppleBCMWLANCore::captureDriverState(a2, 3825173763, v5);
  if (a1) {
    void *v4 = v6;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdDebugAction(uint64_t a1, AppleBCMWLANCore *a2)
{
  uint64_t v3 = IO80211CoreDbg::parseUInt32FromCMD();
  uint64_t Bus = AppleBCMWLANCore::getBus(a2);
  (*(void (**)(uint64_t, uint64_t, void, void, void))(*(void *)Bus + 248))(Bus, v3, 0, 0, 0);
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdForceBusPowerOn(int a1, AppleBCMWLANCore *this)
{
  uint64_t Bus = AppleBCMWLANCore::getBus(this);
  return (*(unsigned int (**)(void))(*(void *)(Bus + 48) + 192))() - 1;
}

uint64_t AppleBCMWLANCoreDbg::cmdForceReAssoc(int a1, AppleBCMWLANCore *this)
{
  FaultReporter = (CCFaultReporter *)AppleBCMWLANCore::getFaultReporter(this);
  return CCFaultReporter::reportFault(FaultReporter, 0x24u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCoreDbg.cpp", 0x3C7u, "cmdForceReAssoc", 0, -528348671, 0);
}

uint64_t AppleBCMWLANCoreDbg::cmdForceReCalibrate(int a1, AppleBCMWLANCore *this)
{
  FaultReporter = (CCFaultReporter *)AppleBCMWLANCore::getFaultReporter(this);
  return CCFaultReporter::reportFault(FaultReporter, 0x24u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCoreDbg.cpp", 0x3CFu, "cmdForceReCalibrate", 0, -528348670, 0);
}

uint64_t AppleBCMWLANCoreDbg::cmdForceMacPhyReset(int a1, AppleBCMWLANCore *this)
{
  FaultReporter = (CCFaultReporter *)AppleBCMWLANCore::getFaultReporter(this);
  return CCFaultReporter::reportFault(FaultReporter, 0x24u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCoreDbg.cpp", 0x3D7u, "cmdForceMacPhyReset", 0, -528348669, 0);
}

uint64_t AppleBCMWLANCoreDbg::cmdWorkQueueDelay(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  (*(void (**)(uint64_t))(*(void *)a2 + 1848))(a2);
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2000000000;
  int v14 = -1431655766;
  int v14 = IO80211CoreDbg::parseUInt32FromCMD();
  if (!*((_DWORD *)v12 + 6))
  {
    uint64_t v8 = 0;
    uint64_t v7 = 3758097090;
    if (!a1) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  unsigned int v5 = IO80211Print();
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  void v10[2] = ___ZN19AppleBCMWLANCoreDbg17cmdWorkQueueDelayEP24apple80211_debug_commandP16AppleBCMWLANCore_block_invoke;
  void v10[3] = &__block_descriptor_tmp_2;
  unsigned char v10[4] = &v11;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v6 + 112))(v6, v10);
  uint64_t v8 = v5;
  if (a1) {
LABEL_3:
  }
    void *v4 = v8;
LABEL_4:
  _Block_object_dispose(&v11, 8);
  return v7;
}

uint64_t ___ZN19AppleBCMWLANCoreDbg17cmdWorkQueueDelayEP24apple80211_debug_commandP16AppleBCMWLANCore_block_invoke(uint64_t a1)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) *= 1000;
  IODelay(*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::trafficNotificationCallback(const OSMetaClassBase *this, OSObject *a2, void *a3, int a4, int a5)
{
  int v7 = (int)a3;
  uint64_t v8 = OSMetaClassBase::safeMetaCast(this, (const OSMetaClass *)gAppleBCMWLANCoreMetaClass);
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  uint64_t result = ((uint64_t (*)(OSMetaClassBase *))v8->__vftable[46].retain)(v8);
  if (result)
  {
    ((void (*)(OSMetaClassBase *))v8->__vftable[46].retain)(v8);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      int v10 = (CCLogStream *)((uint64_t (*)(OSMetaClassBase *))v8->__vftable[46].retain)(v8);
      return CCLogStream::logAlert(v10, "[dk] %s@%d:Now:%llu elapsedMS:%u rtPacketCount:%u bgPacketCount:%u\n", "trafficNotificationCallback", 1016, 0, v7, a4, a5);
    }
  }
  return result;
}

uint64_t AppleBCMWLANCoreDbg::cmdTrafficNotification(uint64_t a1, AppleBCMWLANCore *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  uint64_t v5 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a2 + 88))(a2);
  if (AppleBCMWLANCore::getPrimaryInterface(a2))
  {
    uint64_t PrimaryInterface = (IO80211InfraInterface *)AppleBCMWLANCore::getPrimaryInterface(a2);
    uint64_t TrafficMonitor = IO80211InfraInterface::getTrafficMonitor(PrimaryInterface);
  }
  else
  {
    uint64_t TrafficMonitor = 0;
  }
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  if (!v5 || !TrafficMonitor)
  {
    unsigned int v9 = IO80211Print();
    uint64_t v8 = 0xFFFFFFFFLL;
    if (!a1) {
      return v8;
    }
    goto LABEL_26;
  }
  if (a1)
  {
    if (strncmp("traffic-notification report-interval", (const char *)(a1 + 10), 0x24uLL))
    {
      if (!strncmp("traffic-notification rt-packet-count", (const char *)(a1 + 10), 0x24uLL))
      {
        int v11 = IO80211CoreDbg::parseUInt32FromCMD();
        uint64_t v8 = 0;
        unsigned int v9 = 0;
        AppleBCMWLANCoreDbg::cmdTrafficNotification(apple80211_debug_command *,AppleBCMWLANCore *)::realtimePacketLimit = v11;
        goto LABEL_26;
      }
      if (!strncmp("traffic-notification bg-packet-count", (const char *)(a1 + 10), 0x24uLL))
      {
        int v12 = IO80211CoreDbg::parseUInt32FromCMD();
        uint64_t v8 = 0;
        unsigned int v9 = 0;
        AppleBCMWLANCoreDbg::cmdTrafficNotification(apple80211_debug_command *,AppleBCMWLANCore *)::backgroundPacketLimit = v12;
        goto LABEL_26;
      }
      if (!strncmp("traffic-notification enable", (const char *)(a1 + 10), 0x80uLL))
      {
        if (!AppleBCMWLANCoreDbg::cmdTrafficNotification(apple80211_debug_command *,AppleBCMWLANCore *)::trafficNotification)
        {
          TrafficNotificatiouint64_t n = IO80211TrafficMonitor::createTrafficNotification();
          AppleBCMWLANCoreDbg::cmdTrafficNotification(apple80211_debug_command *,AppleBCMWLANCore *)::trafficNotificatiouint64_t n = TrafficNotification;
          if (TrafficNotification)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 64))(v5, TrafficNotification);
            (*(void (**)(uint64_t))(*(void *)AppleBCMWLANCoreDbg::cmdTrafficNotification(apple80211_debug_command *,AppleBCMWLANCore *)::trafficNotification
                                            + 64))(AppleBCMWLANCoreDbg::cmdTrafficNotification(apple80211_debug_command *,AppleBCMWLANCore *)::trafficNotification);
          }
        }
      }
      else
      {
        if (strncmp("traffic-notification disable", (const char *)(a1 + 10), 0x80uLL))
        {
          uint64_t v8 = 0;
          unsigned int v9 = 0;
LABEL_26:
          void *v4 = v9;
          return v8;
        }
        if (AppleBCMWLANCoreDbg::cmdTrafficNotification(apple80211_debug_command *,AppleBCMWLANCore *)::trafficNotification)
        {
          (*(void (**)(uint64_t))(*(void *)AppleBCMWLANCoreDbg::cmdTrafficNotification(apple80211_debug_command *,AppleBCMWLANCore *)::trafficNotification
                                          + 72))(AppleBCMWLANCoreDbg::cmdTrafficNotification(apple80211_debug_command *,AppleBCMWLANCore *)::trafficNotification);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 72))(v5, AppleBCMWLANCoreDbg::cmdTrafficNotification(apple80211_debug_command *,AppleBCMWLANCore *)::trafficNotification);
          if (AppleBCMWLANCoreDbg::cmdTrafficNotification(apple80211_debug_command *,AppleBCMWLANCore *)::trafficNotification)
          {
            (*(void (**)(uint64_t))(*(void *)AppleBCMWLANCoreDbg::cmdTrafficNotification(apple80211_debug_command *,AppleBCMWLANCore *)::trafficNotification
                                            + 16))(AppleBCMWLANCoreDbg::cmdTrafficNotification(apple80211_debug_command *,AppleBCMWLANCore *)::trafficNotification);
            AppleBCMWLANCoreDbg::cmdTrafficNotification(apple80211_debug_command *,AppleBCMWLANCore *)::trafficNotificatiouint64_t n = 0;
          }
        }
      }
      unsigned int v9 = IO80211Print();
      uint64_t v8 = 0;
      goto LABEL_26;
    }
    int v10 = IO80211CoreDbg::parseUInt32FromCMD();
    uint64_t v8 = 0;
    unsigned int v9 = 0;
    AppleBCMWLANCoreDbg::cmdTrafficNotification(apple80211_debug_command *,AppleBCMWLANCore *)::reportIntervalMS = v10;
    goto LABEL_26;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdQueryBSSInfo(uint64_t a1, AppleBCMWLANCore *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  uint64_t v5 = (_DWORD *)IOMallocZeroData();
  if (v5)
  {
    uint64_t v6 = v5;
    *uint64_t v5 = 1936;
    v17[0] = v5;
    v17[1] = 0x79000880790;
    Commander = (AppleBCMWLANCommander *)AppleBCMWLANCore::getCommander(a2);
    *(void *)&__dst[0] = v6;
    *((void *)&__dst[0] + 1) = 4;
    uint64_t v8 = AppleBCMWLANCommander::runIOCtlGet(Commander, 136, (uint64_t)__dst, (uint64_t)v17, 0);
    if (v8)
    {
      (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)a2 + 112))(a2, v8);
      unsigned int v9 = IO80211Print();
      if (!a1) {
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v10 = IO80211HexdumpIfKernel();
      uint64_t v11 = IO80211Print() + v10;
      char v19 = 0;
      memset(__dst, 0, sizeof(__dst));
      if (*((unsigned __int8 *)v6 + 22) >= 0x20u) {
        size_t v12 = 32;
      }
      else {
        size_t v12 = *((unsigned __int8 *)v6 + 22);
      }
      memcpy(__dst, (char *)v6 + 23, v12);
      uint64_t v13 = IO80211Print() + v11;
      uint64_t v14 = IO80211Print() + v13;
      int v15 = IO80211Print();
      if (!a1) {
        goto LABEL_12;
      }
      unsigned int v9 = v15 + v14;
    }
    void *v4 = v9;
LABEL_12:
    IOFreeData();
    return v8;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdAWDLDisableAMPDU(uint64_t a1, AppleBCMWLANCore *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  int v5 = AppleBCMWLANCore::forceDisableAwdlAmpdu(a2);
  AppleBCMWLANCore::setForceDisableAwdlAmpdu((uint64_t)a2, v5 ^ 1);
  if (AppleBCMWLANCore::forceDisableAwdlAmpdu(a2)) {
    AppleBCMWLANCore::setForceAwdlAmpdu((uint64_t)a2, 0);
  }
  AppleBCMWLANCore::forceDisableAwdlAmpdu(a2);
  unsigned int v6 = IO80211Print();
  if (a1) {
    void *v4 = v6;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdAWDLForceAMPDU(uint64_t a1, AppleBCMWLANCore *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  int v5 = AppleBCMWLANCore::forceAwdlAmpdu(a2);
  AppleBCMWLANCore::setForceAwdlAmpdu((uint64_t)a2, v5 ^ 1);
  AppleBCMWLANCore::forceAwdlAmpdu(a2);
  unsigned int v6 = IO80211Print();
  if (a1) {
    void *v4 = v6;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdAWDLPeerCache(uint64_t a1, AppleBCMWLANCore *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  if (a1) {
    int v5 = *(char **)(a1 + 245208);
  }
  else {
    int v5 = 0;
  }
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  if (!AppleBCMWLANCore::getProximityInterface(a2))
  {
    uint64_t v7 = 0;
    if (!a1) {
      return 0;
    }
    goto LABEL_6;
  }
  ProximityInterface = (AppleBCMWLANProximityInterface *)AppleBCMWLANCore::getProximityInterface(a2);
  uint64_t v7 = AppleBCMWLANProximityInterface::dumpPeerCache(ProximityInterface, v5);
  if (a1) {
LABEL_6:
  }
    void *v4 = v7;
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdAWDLPeers(uint64_t a1, AppleBCMWLANCore *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  if (a1) {
    int v5 = *(char **)(a1 + 245208);
  }
  else {
    int v5 = 0;
  }
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  if (!AppleBCMWLANCore::getProximityInterface(a2))
  {
    uint64_t v7 = 0;
    if (!a1) {
      return 0;
    }
    goto LABEL_6;
  }
  ProximityInterface = (AppleBCMWLANProximityInterface *)AppleBCMWLANCore::getProximityInterface(a2);
  uint64_t v7 = AppleBCMWLANProximityInterface::dumpAwdlPeers(ProximityInterface, v5);
  if (a1) {
LABEL_6:
  }
    void *v4 = v7;
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdAWDLSNAP(uint64_t a1, AppleBCMWLANCore *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  int LooseSnapHeader = AppleBCMWLANCore::getLooseSnapHeader(a2);
  AppleBCMWLANCore::setLooseSnapHeader((uint64_t)a2, LooseSnapHeader ^ 1);
  AppleBCMWLANCore::getLooseSnapHeader(a2);
  unsigned int v6 = IO80211Print();
  if (a1) {
    void *v4 = v6;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdAWDLDump(uint64_t a1, AppleBCMWLANCore *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  if (a1) {
    int v5 = *(char **)(a1 + 245208);
  }
  else {
    int v5 = 0;
  }
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  if (!AppleBCMWLANCore::getProximityInterface(a2))
  {
    uint64_t v7 = 0;
    if (!a1) {
      return 0;
    }
    goto LABEL_6;
  }
  ProximityInterface = (OSObject *)AppleBCMWLANCore::getProximityInterface(a2);
  uint64_t v7 = AppleBCMWLANProximityInterface::dump(ProximityInterface, v5);
  if (a1) {
LABEL_6:
  }
    void *v4 = v7;
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdAWDLStats(uint64_t a1, AppleBCMWLANCore *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  if (a1) {
    int v5 = *(char **)(a1 + 245208);
  }
  else {
    int v5 = 0;
  }
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  if (!AppleBCMWLANCore::getProximityInterface(a2))
  {
    uint64_t v7 = 0;
    if (!a1) {
      return 0;
    }
    goto LABEL_6;
  }
  ProximityInterface = (AppleBCMWLANProximityInterface *)AppleBCMWLANCore::getProximityInterface(a2);
  uint64_t v7 = AppleBCMWLANProximityInterface::dumpAwdlStats(ProximityInterface, v5);
  if (a1) {
LABEL_6:
  }
    void *v4 = v7;
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdCommanderDump(uint64_t a1, AppleBCMWLANCore *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  if (a1)
  {
    int v5 = *(char **)(a1 + 245208);
    int v6 = *(_DWORD *)(a1 + 245200);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  if (!AppleBCMWLANCore::getCommander(a2))
  {
    uint64_t v8 = 0;
    if (!a1) {
      return 0;
    }
    goto LABEL_6;
  }
  Commander = (AppleBCMWLANCommander *)AppleBCMWLANCore::getCommander(a2);
  uint64_t v8 = AppleBCMWLANCommander::dumpState(Commander, v5, 0, v6);
  if (a1) {
LABEL_6:
  }
    void *v4 = v8;
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdDumpDatapathDebug(uint64_t a1, IO80211Controller *a2)
{
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdCaptureDebugInfo(uint64_t a1, IO80211Controller *a2)
{
  uint64_t v3 = (const char *)(a1 + 10);
  uint64_t v4 = strnstr((const char *)(a1 + 10), "-msg=", 0x80uLL);
  if (IOMallocZeroData())
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    *(_OWORD *)uint64_t v11 = 0u;
    long long v12 = 0u;
    if (IO80211ThreadProcessInfo::getProcessName((IO80211ThreadProcessInfo *)v11, (char *)0x80, v5)) {
      IO80211Controller::getProcessName(a2, v11, 0x80uLL);
    }
    FaultReporter = (CCFaultReporter *)AppleBCMWLANCore::getFaultReporter(a2);
    uint64_t v7 = (const char *)&unk_10029A2CA;
    if (v4) {
      uint64_t v7 = v4 + 5;
    }
    CCFaultReporter::reportFault(FaultReporter, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCoreDbg.cpp", 0x555u, "cmdCaptureDebugInfo", 0, -469793533, "client=%s,msg=%s,call=cmdCaptureDebugInfo", v11, v7);
    if (strnstr(v3, "-block", 0x80uLL))
    {
      clock_interval_to_deadline();
      uint64_t v8 = (*(uint64_t (**)(IO80211Controller *))(*(void *)a2 + 104))(a2);
      uint64_t v9 = AppleBCMWLANCore::getFaultReporter(a2);
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v8 + 80))(v8, v9, 0xAAAAAAAAAAAAAAAALL);
    }
    IOFreeData();
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdChannel(uint64_t a1, AppleBCMWLANCore *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  if (a1) {
    unint64_t v5 = *(char **)(a1 + 245208);
  }
  else {
    unint64_t v5 = 0;
  }
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  unsigned int CurrentSupportedChannels = AppleBCMWLANCore::getCurrentSupportedChannels(a2, v5);
  if (a1) {
    void *v4 = CurrentSupportedChannels;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdDumpEventBits(uint64_t a1, AppleBCMWLANCore *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  if (a1) {
    unint64_t v5 = *(char **)(a1 + 245208);
  }
  else {
    unint64_t v5 = 0;
  }
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  unsigned int v6 = AppleBCMWLANCore::dumpEventBitField(a2, v5);
  if (a1) {
    void *v4 = v6;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdSetExtendedDTIM(uint64_t a1, AppleBCMWLANCore *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  unsigned int v5 = IO80211CoreDbg::parseUInt32FromCMD();
  unsigned int v16 = v5;
  if (v5 >= 0x100)
  {
    unsigned int v6 = IO80211Print();
    uint64_t result = 0;
    if (!a1) {
      return result;
    }
LABEL_11:
    void *v4 = v6;
    return result;
  }
  uint64_t v15 = 0;
  Commander = (AppleBCMWLANCommander *)AppleBCMWLANCore::getCommander(a2);
  long long v13 = (unsigned int *)&v15;
  uint64_t v14 = 8;
  if (AppleBCMWLANCommander::runIOVarSet(Commander, (uint64_t)"bcn_li_bcn", (uint64_t)&v13, 0, 0)) {
    int v9 = IO80211Print();
  }
  else {
    int v9 = 0;
  }
  AppleBCMWLANCore::setExtendedDTIM((uint64_t)a2, v5);
  AppleBCMWLANCore::setDbgExtDtimInSleep((uint64_t)a2, v5);
  int DbgExtDtimInSleep = AppleBCMWLANCore::getDbgExtDtimInSleep(a2);
  AppleBCMWLANCore::setCurrentExtendedDTIM((uint64_t)a2, DbgExtDtimInSleep);
  uint64_t v11 = (AppleBCMWLANCommander *)AppleBCMWLANCore::getCommander(a2);
  long long v13 = &v16;
  uint64_t v14 = 4;
  if (AppleBCMWLANCommander::runIOVarSet(v11, (uint64_t)"bcn_li_dtim", (uint64_t)&v13, 0, 0))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 112))(a2);
    int v12 = IO80211Print();
    uint64_t result = 3758097084;
  }
  else
  {
    int v12 = IO80211Print();
    uint64_t result = 0;
  }
  unsigned int v6 = v9 + v12;
  if (a1) {
    goto LABEL_11;
  }
  return result;
}

uint64_t AppleBCMWLANCoreDbg::cmdFilterAdd(uint64_t a1, AppleBCMWLANCore *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  unsigned int v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  if (!strncmp((const char *)(a1 + 20), "MP,", 3uLL))
  {
    int v7 = IO80211CoreDbg::parseSInt32FromCMD();
    if ((int)AppleBCMWLANCore::getMPOffetsCount(a2) >= 6)
    {
      IO80211Print();
      return 3758097086;
    }
    if (AppleBCMWLANCore::getMPOffetsCount(a2)
      && AppleBCMWLANCore::getWOMPFilterConfigured(a2))
    {
      int v17 = v7;
      if (AppleBCMWLANCore::getMPOffetsCount(a2))
      {
        unint64_t v8 = 0;
        int v9 = 0;
        do
        {
          int v19 = v8 + 104;
          int v10 = IO80211Print();
          Commander = (AppleBCMWLANCommander *)AppleBCMWLANCore::getCommander(a2);
          v18[0] = &v19;
          v18[1] = 4;
          int v12 = AppleBCMWLANCommander::runIOVarSet(Commander, (uint64_t)"pkt_filter_delete", (uint64_t)v18, 0, 0);
          if (v12)
          {
            if (v5)
            {
              int v13 = v12;
              if (CCLogStream::shouldLog()) {
                CCLogStream::logAlert(v5, "[dk] %s@%d: Failed SET IOCTL, cret[0x%08x]\n", "cmdFilterAdd", 1486, v13);
              }
            }
          }
          v9 += v10;
          ++v8;
        }
        while (v8 < AppleBCMWLANCore::getMPOffetsCount(a2));
      }
      else
      {
        int v9 = 0;
      }
      AppleBCMWLANCore::setWOMPFilterConfigured((uint64_t)a2, 0);
      AppleBCMWLANCore::setMPOffetsCount((uint64_t)a2, 0);
      int v7 = v17;
    }
    else
    {
      int v9 = 0;
    }
    uint64_t v15 = *((void *)a2 + 9);
    uint64_t v16 = *(int *)(v15 + 19704);
    *(_DWORD *)(v15 + 19704) = v16 + 1;
    *(_DWORD *)(v15 + 4 * v16 + 10324) = v7;
    uint64_t v6 = IO80211Print() + v9;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t result = 0;
  if (a1) {
    void *v4 = v6;
  }
  return result;
}

uint64_t AppleBCMWLANCoreDbg::cmdDumpFilters(uint64_t a1, AppleBCMWLANCore *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  unsigned int v5 = IO80211Print();
  if (AppleBCMWLANCore::getMPOffetsCount(a2) && (int)AppleBCMWLANCore::getMPOffetsCount(a2) >= 1)
  {
    uint64_t v6 = 2581;
    do
    {
      v5 += IO80211Print();
      int MPOffetsCount = AppleBCMWLANCore::getMPOffetsCount(a2);
      uint64_t v8 = v6 - 2580;
      ++v6;
    }
    while (v8 < MPOffetsCount);
  }
  if (a1) {
    void *v4 = v5;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdFaultReporter(uint64_t a1, AppleBCMWLANCore *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  if (a1)
  {
    if (!strncmp("fr enable", (const char *)(a1 + 10), 0x80uLL))
    {
      FaultReporter = (CCFaultReporter *)AppleBCMWLANCore::getFaultReporter(a2);
      BOOL v9 = 1;
    }
    else
    {
      if (strncmp("fr disable", (const char *)(a1 + 10), 0x80uLL))
      {
        if (strncmp("fr dump", (const char *)(a1 + 10), 7uLL))
        {
          if (strncmp("fr trigger", (const char *)(a1 + 10), 0xAuLL)) {
            goto LABEL_6;
          }
          uint64_t v20 = IO80211CoreDbg::parseUInt32FromCMD();
          (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)a2 + 112))(a2, v20);
          unsigned int v5 = IO80211Print();
          uint64_t v11 = (CCFaultReporter *)AppleBCMWLANCore::getFaultReporter(a2);
          CCFaultReporter::induceErrorCode(v11, v20, "AppleBCMWLANCoreDbg");
LABEL_26:
          void *v4 = v5;
          return 0;
        }
        int v10 = (CCFaultReporter *)AppleBCMWLANCore::getFaultReporter(a2);
        CCFaultReporter::dumpClientListAndHistory(v10);
LABEL_12:
        unsigned int v5 = 0;
        goto LABEL_26;
      }
      FaultReporter = (CCFaultReporter *)AppleBCMWLANCore::getFaultReporter(a2);
      BOOL v9 = 0;
    }
    CCFaultReporter::setEnable(FaultReporter, v9);
    goto LABEL_12;
  }
LABEL_6:
  switch(IO80211CoreDbg::parseUInt32FromCMD())
  {
    case 1u:
      unsigned int v5 = IO80211Print();
      uint64_t v6 = (CCFaultReporter *)AppleBCMWLANCore::getFaultReporter(a2);
      BOOL v7 = 1;
      goto LABEL_16;
    case 2u:
      unsigned int v5 = IO80211Print();
      uint64_t v6 = (CCFaultReporter *)AppleBCMWLANCore::getFaultReporter(a2);
      BOOL v7 = 0;
LABEL_16:
      CCFaultReporter::enableCollectImmediateFaultData(v6, v7);
      break;
    case 3u:
      unsigned int v5 = IO80211Print();
      int v12 = (CCFaultReporter *)AppleBCMWLANCore::getFaultReporter(a2);
      BOOL v13 = 1;
      goto LABEL_19;
    case 4u:
      unsigned int v5 = IO80211Print();
      int v12 = (CCFaultReporter *)AppleBCMWLANCore::getFaultReporter(a2);
      BOOL v13 = 0;
LABEL_19:
      CCFaultReporter::enableCollectDeferredFaultData(v12, v13);
      break;
    case 5u:
      unsigned int v5 = IO80211Print();
      uint64_t v14 = (CCFaultReporter *)AppleBCMWLANCore::getFaultReporter(a2);
      BOOL v15 = 1;
      goto LABEL_22;
    case 6u:
      unsigned int v5 = IO80211Print();
      uint64_t v14 = (CCFaultReporter *)AppleBCMWLANCore::getFaultReporter(a2);
      BOOL v15 = 0;
LABEL_22:
      CCFaultReporter::enableCoreCapture(v14, v15);
      break;
    case 7u:
      unsigned int v16 = IO80211CoreDbg::parseUInt32FromCMD();
      unsigned int v5 = IO80211Print();
      int v17 = (CCFaultReporter *)AppleBCMWLANCore::getFaultReporter(a2);
      CCFaultReporter::setAction(v17, v16);
      break;
    case 8u:
      unsigned int v5 = IO80211Print();
      long long v18 = (CCFaultReporter *)AppleBCMWLANCore::getFaultReporter(a2);
      CCFaultReporter::clearAction(v18);
      break;
    default:
      unsigned int v5 = IO80211Print();
      break;
  }
  if (a1) {
    goto LABEL_26;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdPrintPowerMgmtParams(uint64_t a1, AppleBCMWLANCore *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  AppleBCMWLANCore::getExtendedDTIM(a2);
  AppleBCMWLANCore::getCurrentExtendedDTIM(a2);
  unsigned int v5 = IO80211Print();
  if (a1) {
    void *v4 = v5;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdHaltDriver(uint64_t a1, AppleBCMWLANCore *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  unsigned int v5 = IO80211Print();
  AppleBCMWLANCore::halt(a2);
  if (a1) {
    void *v4 = v5;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdSetInactiveDTIM(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  (*(void (**)(void *))(*a2 + 1848))(a2);
  unsigned int v5 = IO80211CoreDbg::parseUInt32FromCMD();
  if (v5 <= 0x2710) {
    *(_DWORD *)(a2[9] + 19700) = v5;
  }
  unsigned int v6 = IO80211Print();
  if (a1) {
    void *v4 = v6;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdKeepAliveDA(uint64_t a1, void *a2)
{
  BOOL v9 = (void *)(a1 + 245184);
  (*(void (**)(void *))(*a2 + 1848))(a2);
  memset(v10, 170, sizeof(v10));
  unsigned int v4 = IO80211Print();
  if (sscanf((const char *)(a1 + 22), " %x:%x:%x:%x:%x:%x", v10, (char *)v10 + 4, &v10[1], (char *)&v10[1] + 4, &v10[2], (char *)&v10[2] + 4) != 6)
  {
    uint64_t v6 = 3758097090;
    int v7 = IO80211Print();
    if (!a1) {
      return v6;
    }
    v4 += v7;
LABEL_8:
    void *v9 = v4;
    return v6;
  }
  for (uint64_t i = 0; i != 6; ++i)
    *(unsigned char *)(a2[9] + i + 10360) = *((_DWORD *)v10 + i);
  uint64_t v6 = 0;
  if (a1) {
    goto LABEL_8;
  }
  return v6;
}

uint64_t AppleBCMWLANCoreDbg::cmdKeepAliveIP(uint64_t a1, void *a2)
{
  int v12 = (void *)(a1 + 245184);
  (*(void (**)(void *))(*a2 + 1848))(a2);
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  *(_DWORD *)(a2[9] + 10368) = 0;
  unsigned int v4 = (const char *)(a1 + 28);
  uint64_t v13 = a1;
  int v5 = IO80211Print();
  if (sscanf(v4, " %d.%d.%d.%d", &v14, (char *)&v14 + 4, &v15, (char *)&v15 + 4) != 4)
  {
    uint64_t v10 = 3758097090;
    int v9 = IO80211Print();
    if (!v13) {
      return v10;
    }
LABEL_7:
    void *v12 = (v9 + v5);
    return v10;
  }
  uint64_t v6 = 0;
  int v7 = &v14;
  do
  {
    int v8 = *(_DWORD *)v7;
    int v7 = (unint64_t *)((char *)v7 + 4);
    *(_DWORD *)(a2[9] + 10368) += v8 << v6;
    v6 += 8;
  }
  while (v6 != 32);
  int v9 = IO80211Print();
  uint64_t v10 = 0;
  if (v13) {
    goto LABEL_7;
  }
  return v10;
}

uint64_t AppleBCMWLANCoreDbg::toggleLogFlags(AppleBCMWLANCoreDbg *this, AppleBCMWLANCore *a2)
{
  unsigned int v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCoreDbg *))(*(void *)this + 1848))(this);
  uint64_t shouldLog = CCLogStream::shouldLog(v4, (unint64_t)a2);
  uint64_t v6 = *(void *)(*(uint64_t (**)(AppleBCMWLANCoreDbg *))(*(void *)this + 1848))(this);
  if (shouldLog)
  {
    (*(void (**)(void))(v6 + 136))();
    uint64_t v7 = (*(uint64_t (**)(AppleBCMWLANCoreDbg *))(*(void *)this + 1848))(this);
    (*(void (**)(uint64_t, AppleBCMWLANCore *))(*(void *)v7 + 176))(v7, a2);
  }
  else
  {
    (*(void (**)(void))(v6 + 128))();
    uint64_t v8 = (*(uint64_t (**)(AppleBCMWLANCoreDbg *))(*(void *)this + 1848))(this);
    (*(void (**)(uint64_t, AppleBCMWLANCore *))(*(void *)v8 + 168))(v8, a2);
  }
  return shouldLog;
}

uint64_t AppleBCMWLANCoreDbg::setLogFlags(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 128))(v4, a2);
  int v5 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1) + 168);
  return v5();
}

uint64_t AppleBCMWLANCoreDbg::clearLogFlags(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 136))(v4, a2);
  int v5 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1) + 176);
  return v5();
}

uint64_t AppleBCMWLANCoreDbg::cmdLogging(uint64_t a1, IO80211Controller *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  uint64_t v5 = (*(uint64_t (**)(IO80211Controller *))(*(void *)a2 + 1848))(a2);
  if (v5)
  {
    uint64_t v6 = (CCLogStream *)v5;
    if (a1)
    {
      size_t v7 = strnlen((const char *)(a1 + 10), 0x100uLL);
      if (v7 == 15 && !strncasecmp((const char *)(a1 + 10), "log_bus_failure", 0xFuLL))
      {
        *(unsigned char *)(*((void *)a2 + 9) + 11345) ^= 1u;
      }
      else if (!strncasecmp((const char *)(a1 + 10), "log-rt=", 7uLL))
      {
        *(_DWORD *)(*((void *)a2 + 9) + 18180) = strtoul((const char *)(a1 + 17), 0, 10);
      }
      else
      {
        if (strncasecmp((const char *)(a1 + 10), "log-rt", 6uLL))
        {
          if (!strncasecmp((const char *)(a1 + 10), "log-driver=", 0xBuLL))
          {
            int v9 = strtoul((const char *)(a1 + 21), 0, 10);
            IO80211SetBPFLoggerTarget(a2);
            char v8 = v9 != 0;
            goto LABEL_18;
          }
          if (v7 == 12)
          {
            if (!strncasecmp((const char *)(a1 + 10), "log-datapath", 0xCuLL))
            {
              *(unsigned char *)(*((void *)a2 + 9) + 11344) ^= 1u;
              goto LABEL_90;
            }
            if (strncasecmp((const char *)(a1 + 10), "log-datapath=", 0xDuLL))
            {
LABEL_61:
              if (!strncasecmp((const char *)(a1 + 10), "wlan.log.flags=", 0xFuLL))
              {
                uint64_t v20 = IO80211CoreDbg::parseUInt64FromCMD();
                unsigned int v13 = IO80211Print();
                (*(void (**)(CCLogStream *, uint64_t))(*(void *)v6 + 152))(v6, v20);
              }
              else
              {
                if (!strncasecmp((const char *)(a1 + 10), "wlan.log.flags", 0xEuLL))
                {
                  (*(void (**)(CCLogStream *))(*(void *)v6 + 160))(v6);
                  goto LABEL_90;
                }
                if (strncasecmp((const char *)(a1 + 10), "wlan.log.level=", 0xFuLL))
                {
                  if (!strncasecmp((const char *)(a1 + 10), "wlan.log.level", 0xEuLL))
                  {
                    CCLogStream::getConsoleLevel(v6);
                    goto LABEL_90;
                  }
                  if (!strncasecmp((const char *)(a1 + 10), "wlan.log.ccflags=", 0x11uLL))
                  {
                    uint64_t v22 = IO80211CoreDbg::parseUInt64FromCMD();
                    unsigned int v13 = IO80211Print();
                    (*(void (**)(CCLogStream *, uint64_t))(*(void *)v6 + 112))(v6, v22);
                    goto LABEL_91;
                  }
                  if (strncasecmp((const char *)(a1 + 10), "wlan.log.ccflags", 0x10uLL))
                  {
                    if (!strncasecmp((const char *)(a1 + 10), "wlan.log.cclevel=", 0x11uLL))
                    {
                      uint64_t v23 = IO80211CoreDbg::parseUInt64FromCMD();
                      unsigned int v13 = IO80211Print();
                      (*(void (**)(CCLogStream *, uint64_t))(*(void *)v6 + 96))(v6, v23);
                      goto LABEL_91;
                    }
                    if (!strncasecmp((const char *)(a1 + 10), "wlan.log.cclevel", 0x10uLL)) {
                      (*(void (**)(CCLogStream *))(*(void *)v6 + 104))(v6);
                    }
                    goto LABEL_90;
                  }
                  goto LABEL_114;
                }
                uint64_t v21 = IO80211CoreDbg::parseUInt64FromCMD();
                unsigned int v13 = IO80211Print();
                (*(void (**)(CCLogStream *, uint64_t))(*(void *)v6 + 144))(v6, v21);
              }
LABEL_91:
              void *v4 = v13;
              return 0;
            }
          }
          else
          {
            if (v7 == 11)
            {
              if (!strncasecmp((const char *)(a1 + 10), "log-credits", 0xBuLL))
              {
                if (*(unsigned char *)(a1 + 21) == 61) {
                  *(_DWORD *)(*((void *)a2 + 9) + 14096) = strtoul((const char *)(a1 + 22), 0, 10) != 0;
                }
                else {
                  *(_DWORD *)(*((void *)a2 + 9) + 14096) ^= 1u;
                }
                goto LABEL_90;
              }
            }
            else if (v7 == 10 && !strncasecmp((const char *)(a1 + 10), "log-driver", 0xAuLL))
            {
              IO80211SetBPFLoggerTarget(a2);
              char v8 = IO80211GetBPFLoggerEnable() ^ 1;
LABEL_18:
              IO80211SetBPFLoggerEnable(v8);
              IO80211GetBPFLoggerEnable();
              goto LABEL_90;
            }
            if (strncasecmp((const char *)(a1 + 10), "log-datapath=", 0xDuLL))
            {
              switch(v7)
              {
                case 5uLL:
                  if (!strncasecmp((const char *)(a1 + 10), "log-n", 5uLL))
                  {
                    AppleBCMWLANCoreDbg::toggleLogFlags(a2, (AppleBCMWLANCore *)0x200);
                    (*(void (**)(CCLogStream *))(*(void *)v6 + 120))(v6);
                    goto LABEL_90;
                  }
                  if (!strncasecmp((const char *)(a1 + 10), "log-j", 5uLL))
                  {
                    AppleBCMWLANCoreDbg::toggleLogFlags(a2, (AppleBCMWLANCore *)0x100);
                    (*(void (**)(CCLogStream *))(*(void *)v6 + 120))(v6);
                    goto LABEL_90;
                  }
                  if (strncasecmp((const char *)(a1 + 10), "log-r", 5uLL)) {
                    goto LABEL_61;
                  }
                  if ((AppleBCMWLANCoreDbg::toggleLogFlags(a2, (AppleBCMWLANCore *)0x4000) & 1) != 0
                    || (AppleBCMWLANCore::addEventBit(a2, 9u),
                        AppleBCMWLANCore::addEventBit(a2, 0x13u),
                        uint64_t v10 = AppleBCMWLANCore::writeEventBitField(a2),
                        !v10))
                  {
                    int v11 = 0;
                  }
                  else
                  {
                    (*(void (**)(IO80211Controller *, uint64_t))(*(void *)a2 + 112))(a2, v10);
                    int v11 = IO80211Print();
                  }
                  (*(void (**)(CCLogStream *))(*(void *)v6 + 120))(v6);
                  unsigned int v13 = IO80211Print() + v11;
                  goto LABEL_91;
                case 6uLL:
                  if (!strncasecmp((const char *)(a1 + 10), "log-pr", 6uLL))
                  {
                    AppleBCMWLANCoreDbg::toggleLogFlags(a2, (AppleBCMWLANCore *)0x400);
                    (*(void (**)(CCLogStream *))(*(void *)v6 + 120))(v6);
                    goto LABEL_90;
                  }
                  if (!strncasecmp((const char *)(a1 + 10), "log-sc", 6uLL))
                  {
                    if (*(unsigned char *)(a1 + 16) == 61)
                    {
                      if (strtoul((const char *)(a1 + 17), 0, 10)) {
                        AppleBCMWLANCoreDbg::setLogFlags((uint64_t)a2, 64);
                      }
                      else {
                        AppleBCMWLANCoreDbg::clearLogFlags((uint64_t)a2, 64);
                      }
                    }
                    else
                    {
                      AppleBCMWLANCoreDbg::toggleLogFlags(a2, (AppleBCMWLANCore *)0x40);
                    }
                    break;
                  }
                  if (!strncasecmp((const char *)(a1 + 10), "log-in", 6uLL))
                  {
                    AppleBCMWLANCoreDbg::toggleLogFlags(a2, (AppleBCMWLANCore *)0x80);
                    (*(void (**)(CCLogStream *))(*(void *)v6 + 120))(v6);
                    goto LABEL_90;
                  }
                  if (!strncasecmp((const char *)(a1 + 10), "log-io", 6uLL))
                  {
                    AppleBCMWLANCoreDbg::toggleLogFlags(a2, (AppleBCMWLANCore *)0x200000);
                    (*(void (**)(CCLogStream *))(*(void *)v6 + 120))(v6);
                    goto LABEL_90;
                  }
                  if (!strncasecmp((const char *)(a1 + 10), "logl-e", 6uLL))
                  {
                    int v12 = (*(uint64_t (**)(CCLogStream *))(*(void *)v6 + 104))(v6);
                    (*(void (**)(CCLogStream *, void))(*(void *)v6 + 96))(v6, 0);
                    (*(void (**)(CCLogStream *, void))(*(void *)v6 + 144))(v6, 0);
                  }
                  else if (!strncasecmp((const char *)(a1 + 10), "logl-a", 6uLL))
                  {
                    int v12 = (*(uint64_t (**)(CCLogStream *))(*(void *)v6 + 104))(v6);
                    (*(void (**)(CCLogStream *, uint64_t))(*(void *)v6 + 96))(v6, 1);
                    (*(void (**)(CCLogStream *, uint64_t))(*(void *)v6 + 144))(v6, 1);
                  }
                  else if (!strncasecmp((const char *)(a1 + 10), "logl-c", 6uLL))
                  {
                    int v12 = (*(uint64_t (**)(CCLogStream *))(*(void *)v6 + 104))(v6);
                    (*(void (**)(CCLogStream *, uint64_t))(*(void *)v6 + 96))(v6, 2);
                    (*(void (**)(CCLogStream *, uint64_t))(*(void *)v6 + 144))(v6, 2);
                  }
                  else if (!strncasecmp((const char *)(a1 + 10), "logl-w", 6uLL))
                  {
                    int v12 = (*(uint64_t (**)(CCLogStream *))(*(void *)v6 + 104))(v6);
                    (*(void (**)(CCLogStream *, uint64_t))(*(void *)v6 + 96))(v6, 3);
                    (*(void (**)(CCLogStream *, uint64_t))(*(void *)v6 + 144))(v6, 3);
                  }
                  else if (!strncasecmp((const char *)(a1 + 10), "logl-n", 6uLL))
                  {
                    int v12 = (*(uint64_t (**)(CCLogStream *))(*(void *)v6 + 104))(v6);
                    (*(void (**)(CCLogStream *, uint64_t))(*(void *)v6 + 96))(v6, 4);
                    (*(void (**)(CCLogStream *, uint64_t))(*(void *)v6 + 144))(v6, 4);
                  }
                  else if (!strncasecmp((const char *)(a1 + 10), "logl-i", 6uLL))
                  {
                    int v12 = (*(uint64_t (**)(CCLogStream *))(*(void *)v6 + 104))(v6);
                    (*(void (**)(CCLogStream *, uint64_t))(*(void *)v6 + 96))(v6, 5);
                    (*(void (**)(CCLogStream *, uint64_t))(*(void *)v6 + 144))(v6, 5);
                  }
                  else if (!strncasecmp((const char *)(a1 + 10), "logl-d", 6uLL))
                  {
                    int v12 = (*(uint64_t (**)(CCLogStream *))(*(void *)v6 + 104))(v6);
                    (*(void (**)(CCLogStream *, uint64_t))(*(void *)v6 + 96))(v6, 6);
                    (*(void (**)(CCLogStream *, uint64_t))(*(void *)v6 + 144))(v6, 6);
                  }
                  else
                  {
                    if (strncasecmp((const char *)(a1 + 10), "logl-s", 6uLL)) {
                      goto LABEL_61;
                    }
                    int v12 = (*(uint64_t (**)(CCLogStream *))(*(void *)v6 + 104))(v6);
                    (*(void (**)(CCLogStream *, uint64_t))(*(void *)v6 + 96))(v6, 7);
                    (*(void (**)(CCLogStream *, uint64_t))(*(void *)v6 + 144))(v6, 7);
                  }
                  goto LABEL_79;
                case 7uLL:
                  if (!strncasecmp((const char *)(a1 + 10), "log-tag", 7uLL)) {
                    goto LABEL_90;
                  }
                  if (strncasecmp((const char *)(a1 + 10), "log-cmd", 7uLL))
                  {
                    if (!strncasecmp((const char *)(a1 + 10), "log-pkt", 7uLL))
                    {
                      long long v18 = a2;
                      uint64_t v19 = 8;
                    }
                    else
                    {
                      if (strncasecmp((const char *)(a1 + 10), "log-irq", 7uLL))
                      {
                        if (strncasecmp((const char *)(a1 + 10), "log-cmh", 7uLL)) {
                          goto LABEL_61;
                        }
                        if (*(unsigned char *)(a1 + 17) == 61)
                        {
                          if (strtoul((const char *)(a1 + 18), 0, 10))
                          {
                            AppleBCMWLANCoreDbg::setLogFlags((uint64_t)a2, 0x10000000);
                            AppleBCMWLANCoreDbg::setLogFlags((uint64_t)a2, 0x20000000);
                            AppleBCMWLANCoreDbg::setLogFlags((uint64_t)a2, 0x40000000);
                          }
                          else
                          {
                            AppleBCMWLANCoreDbg::clearLogFlags((uint64_t)a2, 0x10000000);
                            AppleBCMWLANCoreDbg::clearLogFlags((uint64_t)a2, 0x20000000);
                            AppleBCMWLANCoreDbg::clearLogFlags((uint64_t)a2, 0x40000000);
                          }
                        }
                        else
                        {
                          AppleBCMWLANCoreDbg::toggleLogFlags(a2, (AppleBCMWLANCore *)0x10000000);
                          AppleBCMWLANCoreDbg::toggleLogFlags(a2, (AppleBCMWLANCore *)0x20000000);
                          AppleBCMWLANCoreDbg::toggleLogFlags(a2, (AppleBCMWLANCore *)0x40000000);
                        }
                        break;
                      }
                      long long v18 = a2;
                      uint64_t v19 = 2;
                    }
LABEL_103:
                    AppleBCMWLANCoreDbg::toggleLogFlags(v18, (AppleBCMWLANCore *)v19);
                    break;
                  }
                  if (*(unsigned char *)(a1 + 17) != 61)
                  {
                    long long v18 = a2;
                    uint64_t v19 = 4;
                    goto LABEL_103;
                  }
                  if (strtoul((const char *)(a1 + 18), 0, 10)) {
                    AppleBCMWLANCoreDbg::setLogFlags((uint64_t)a2, 4);
                  }
                  else {
                    AppleBCMWLANCoreDbg::clearLogFlags((uint64_t)a2, 4);
                  }
                  break;
                case 8uLL:
                  if (!strncasecmp((const char *)(a1 + 10), "log-bc-v", 8uLL))
                  {
                    uint64_t v14 = *((void *)a2 + 9);
                    uint64_t v15 = 18168;
                  }
                  else
                  {
                    if (strncasecmp((const char *)(a1 + 10), "log-bc-i", 8uLL))
                    {
                      if (strncasecmp((const char *)(a1 + 10), "logl-all", 8uLL)) {
                        goto LABEL_61;
                      }
                      int v12 = (*(uint64_t (**)(CCLogStream *))(*(void *)v6 + 104))(v6);
                      (*(void (**)(CCLogStream *, uint64_t))(*(void *)v6 + 96))(v6, 127);
                      (*(void (**)(CCLogStream *, uint64_t))(*(void *)v6 + 144))(v6, 127);
LABEL_79:
                      int v16 = (*(uint64_t (**)(CCLogStream *))(*(void *)v6 + 104))(v6);
                      getLogLevelName(v16);
                      (*(void (**)(CCLogStream *))(*(void *)v6 + 104))(v6);
                      getLogLevelName(v12);
                      goto LABEL_90;
                    }
                    uint64_t v14 = *((void *)a2 + 9);
                    uint64_t v15 = 18164;
                  }
                  *(_DWORD *)(v14 + v15) ^= 1u;
                  goto LABEL_90;
                case 9uLL:
                  if (strncasecmp((const char *)(a1 + 10), "logl-none", 9uLL)) {
                    goto LABEL_61;
                  }
                  int v12 = (*(uint64_t (**)(CCLogStream *))(*(void *)v6 + 104))(v6);
                  (*(void (**)(CCLogStream *, uint64_t))(*(void *)v6 + 96))(v6, 0xFFFFFFFFLL);
                  (*(void (**)(CCLogStream *, uint64_t))(*(void *)v6 + 144))(v6, 0xFFFFFFFFLL);
                  goto LABEL_79;
                default:
                  goto LABEL_61;
              }
LABEL_114:
              (*(void (**)(CCLogStream *))(*(void *)v6 + 120))(v6);
              goto LABEL_90;
            }
          }
          *(unsigned char *)(*((void *)a2 + 9) + 11344) = strtoul((const char *)(a1 + 23), 0, 10);
          goto LABEL_90;
        }
        *(_DWORD *)(*((void *)a2 + 9) + 18180) ^= 1u;
      }
LABEL_90:
      unsigned int v13 = IO80211Print();
      goto LABEL_91;
    }
    IO80211Print();
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdLoopbackTest(uint64_t a1, AppleBCMWLANCore *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  uint64_t v6 = strnstr((const char *)(a1 + 10), "-f", 0x80uLL);
  size_t v7 = strnstr((const char *)(a1 + 10), "-i", 0x80uLL);
  char v8 = strnstr((const char *)(a1 + 10), "-l", 0x80uLL);
  int v9 = strnstr((const char *)(a1 + 10), "-r", 0x80uLL);
  uint64_t v23 = 0;
  unint64_t v24 = 0;
  unint64_t v25 = 0;
  if (v7) {
    LODWORD(v2AppleBCMWLANJoinAdapter::free(this - 3) = strtoul(v7 + 2, 0, 10);
  }
  if (v6)
  {
    LODWORD(v6) = strtoul(v6 + 2, 0, 16);
    HIDWORD(v2AppleBCMWLANJoinAdapter::free(this - 3) = v6;
  }
  if (v8) {
    unint64_t v24 = strtoul(v8 + 2, 0, 10);
  }
  if (v9) {
    unint64_t v25 = strtoul(v9 + 2, 0, 10);
  }
  LODWORD(v10) = IO80211Print();
  if ((v6 & 1) == 0)
  {
    LODWORD(v20) = 1;
    uint64_t v10 = IO80211Print() + v10;
    Commander = (AppleBCMWLANCommander *)AppleBCMWLANCore::getCommander(a2);
    uint64_t v21 = &v20;
    uint64_t v22 = 4;
    int v12 = AppleBCMWLANCommander::runIOVarSet(Commander, (uint64_t)"bus:loopback", (uint64_t)&v21, 0, 0);
    if (v12)
    {
      if (v5)
      {
        int v13 = v12;
        if (CCLogStream::shouldLog()) {
          CCLogStream::logAlert(v5, "[dk] %s@%d: Failed SET IOCTL, cret[0x%08x]\n", "cmdLoopbackTest", 1989, v13);
        }
      }
    }
  }
  uint64_t v20 = 24;
  uint64_t Bus = AppleBCMWLANCore::getBus(a2);
  (*(void (**)(uint64_t, uint64_t, void, uint64_t *, uint64_t *))(*(void *)Bus + 248))(Bus, 3, 0, &v23, &v20);
  if ((v23 & 0x100000000) == 0)
  {
    int v19 = 0;
    LODWORD(v10) = IO80211Print() + v10;
    uint64_t v15 = (AppleBCMWLANCommander *)AppleBCMWLANCore::getCommander(a2);
    uint64_t v21 = (uint64_t *)&v19;
    uint64_t v22 = 4;
    int v16 = AppleBCMWLANCommander::runIOVarSet(v15, (uint64_t)"bus:loopback", (uint64_t)&v21, 0, 0);
    if (v16)
    {
      if (v5)
      {
        int v17 = v16;
        if (CCLogStream::shouldLog())
        {
          CCLogStream::logAlert(v5, "[dk] %s@%d: Failed SET IOCTL, cret[0x%08x]\n", "cmdLoopbackTest", 2001, v17);
          if (!a1) {
            return 0;
          }
          goto LABEL_19;
        }
      }
    }
  }
  if (a1) {
LABEL_19:
  }
    void *v4 = v10;
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdLPASExtendedDTIM(uint64_t a1, AppleBCMWLANCore *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  unsigned int v5 = IO80211CoreDbg::parseUInt32FromCMD();
  unsigned int v11 = v5;
  if (v5 < 0x100)
  {
    *(_DWORD *)(*((void *)a2 + 9) + 6708) = v5;
    if (!v5)
    {
      Commander = (AppleBCMWLANCommander *)AppleBCMWLANCore::getCommander(a2);
      v10[0] = &v11;
      v10[1] = 4;
      uint64_t v7 = AppleBCMWLANCommander::runIOVarSet(Commander, (uint64_t)"bcn_li_dtim", (uint64_t)v10, 0, 0);
      if (v7) {
        (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)a2 + 112))(a2, v7);
      }
    }
  }
  unsigned int v8 = IO80211Print();
  if (a1) {
    void *v4 = v8;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdLPASPercent(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  (*(void (**)(void *))(*a2 + 1848))(a2);
  *(_DWORD *)(a2[9] + 6644) = IO80211CoreDbg::parseUInt32FromCMD();
  unsigned int v5 = IO80211Print();
  if (a1) {
    void *v4 = v5;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdLPASPeriod(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  (*(void (**)(void *))(*a2 + 1848))(a2);
  *(_DWORD *)(a2[9] + 6648) = IO80211CoreDbg::parseUInt32FromCMD();
  unsigned int v5 = IO80211Print();
  if (a1) {
    void *v4 = v5;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdLQMThreashold(uint64_t a1, AppleBCMWLANCore *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  int v5 = IO80211CoreDbg::parseUInt32FromCMD();
  if (!AppleBCMWLANCore::getLQM(a2))
  {
    uint64_t v8 = 0;
    if (!a1) {
      return 0;
    }
    goto LABEL_3;
  }
  unsigned int v6 = IO80211Print();
  uint64_t LQM = AppleBCMWLANCore::getLQM(a2);
  AppleBCMWLANLQM::setGoodLQMRssiThreshold(LQM, -v5);
  uint64_t v8 = v6;
  if (a1) {
LABEL_3:
  }
    void *v4 = v8;
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdLRL(uint64_t a1, AppleBCMWLANCore *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  unsigned int v5 = IO80211CoreDbg::parseUInt32FromCMD();
  if (v5 <= 0x14 && AppleBCMWLANCore::getNetAdapter(a2))
  {
    NetAdapter = (AppleBCMWLANNetAdapter *)AppleBCMWLANCore::getNetAdapter(a2);
    AppleBCMWLANNetAdapter::configureRetryLimit(NetAdapter, v5);
  }
  unsigned int v7 = IO80211Print();
  if (a1) {
    void *v4 = v7;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdSetMinCreditsToSpend(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 1848))(a2);
  int v4 = IO80211CoreDbg::parseUInt32FromCMD();
  AppleBCMWLANCore::setMinFreeCreditsToSpend(a2, v4);
  if (a1) {
    *(void *)(a1 + 245184) = 0;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdGetMinCreditsToSpend(uint64_t a1, AppleBCMWLANCore *a2)
{
  int v4 = (void *)(a1 + 245184);
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  AppleBCMWLANCore::getMinFreeCreditsToSpend(a2);
  unsigned int v5 = IO80211Print();
  if (a1) {
    void *v4 = v5;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdGetLastFWInitTime(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a1 + 245184);
  (*(void (**)(uint64_t))(*(void *)a2 + 1848))(a2);
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  absolutetime_to_nanoseconds();
  unsigned int v4 = IO80211Print();
  if (a1) {
    *uint64_t v3 = v4;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdDumpBusStatistics(uint64_t a1, AppleBCMWLANCore *a2)
{
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  uint64_t v4 = *(void *)AppleBCMWLANCore::getBus(a2);
  (*(void (**)(void))(v4 + 320))();
  if (a1) {
    *(void *)(a1 + 245184) = 0;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdLogLowLevelBusState(uint64_t a1, AppleBCMWLANCore *a2)
{
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  uint64_t v4 = *(void *)AppleBCMWLANCore::getBus(a2);
  (*(void (**)(void))(v4 + 336))();
  if (a1) {
    *(void *)(a1 + 245184) = 0;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdSetVoViECWMAX(uint64_t a1, AppleBCMWLANCore *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  int v5 = IO80211CoreDbg::parseUInt32FromCMD();
  uint64_t NetAdapter = AppleBCMWLANCore::getNetAdapter(a2);
  AppleBCMWLANNetAdapter::setRealTimeVoViEcwmax(NetAdapter, v5);
  unsigned int v7 = IO80211Print();
  if (a1) {
    void *v4 = v7;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdLPASMaxSleep(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  (*(void (**)(void *))(*a2 + 1848))(a2);
  *(_DWORD *)(a2[9] + 6728) = IO80211CoreDbg::parseUInt32FromCMD();
  unsigned int v5 = IO80211Print();
  if (a1) {
    void *v4 = v5;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdWoWMaxSleep(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  (*(void (**)(void *))(*a2 + 1848))(a2);
  *(_DWORD *)(a2[9] + 6724) = IO80211CoreDbg::parseUInt32FromCMD();
  unsigned int v5 = IO80211Print();
  if (a1) {
    void *v4 = v5;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdMCASTList(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  (*(void (**)(void *))(*a2 + 1848))(a2);
  unsigned int v5 = IO80211Print();
  if (*(_DWORD *)(a2[9] + 564))
  {
    unint64_t v6 = 0;
    uint64_t v7 = 568;
    do
    {
      v5 += IO80211Print();
      ++v6;
      v7 += 6;
    }
    while (v6 < *(unsigned int *)(a2[9] + 564));
  }
  if (a1) {
    void *v4 = v5;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdDumpNeighborDiscoveryStats(uint64_t a1, AppleBCMWLANCore *a2)
{
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdWhenIsNow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a1 + 245184);
  (*(void (**)(uint64_t))(*(void *)a2 + 1848))(a2);
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  IOLog("%llu.%09llu [%s] -+---\n", 0x2DD01FC06, 473034410, (const char *)(a1 + 10));
  unsigned int v4 = IO80211Print();
  if (a1) {
    *uint64_t v3 = v4;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdDumpPowerStats(uint64_t a1, AppleBCMWLANCore *a2)
{
  unsigned int v4 = (void *)(a1 + 245184);
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  uint64_t v5 = IOMallocZeroData();
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v15 = v4;
    AppleBCMWLANCore::featureFlagClearBit(a2, 24);
    unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v16[0] = v7;
    v16[1] = v7;
    BYTE4(v16[0]) = 0;
    LODWORD(v16[0]) = 13;
    AppleBCMWLANCore::getPowerStats(a2, (_DWORD *)v6, (int *)v16);
    uint64_t v8 = IO80211Print();
    uint64_t v9 = IO80211Print() + v8;
    uint64_t v10 = IO80211Print() + v9;
    uint64_t v11 = IO80211Print() + v10;
    int v12 = IO80211Print() + v11;
    *(_OWORD *)uint64_t v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_OWORD *)(v6 + 28) = 0u;
    AppleBCMWLANCore::getInactivityPowerStats(a2, (_DWORD *)v6);
    int v13 = IO80211Print();
    if (a1) {
      *uint64_t v15 = (v13 + v12);
    }
    IOFreeData();
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdPMPercent(uint64_t a1, void *a2)
{
  unsigned int v4 = (void *)(a1 + 245184);
  (*(void (**)(void *))(*a2 + 1848))(a2);
  *(_DWORD *)(a2[9] + 6608) = IO80211CoreDbg::parseUInt32FromCMD();
  unsigned int v5 = IO80211Print();
  if (a1) {
    void *v4 = v5;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdPMPeriod(uint64_t a1, void *a2)
{
  unsigned int v4 = (void *)(a1 + 245184);
  (*(void (**)(void *))(*a2 + 1848))(a2);
  *(_DWORD *)(a2[9] + 6612) = IO80211CoreDbg::parseUInt32FromCMD();
  unsigned int v5 = IO80211Print();
  if (a1) {
    void *v4 = v5;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdPrintRoam(uint64_t a1, AppleBCMWLANCore *a2)
{
  unsigned int v4 = (void *)(a1 + 245184);
  if (a1) {
    unsigned int v5 = *(char **)(a1 + 245208);
  }
  else {
    unsigned int v5 = 0;
  }
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  ConfigManager = (AppleBCMWLANConfigManager *)AppleBCMWLANCore::getConfigManager(a2);
  unsigned int v7 = AppleBCMWLANConfigManager::printRoamParams(ConfigManager, v5);
  if (a1) {
    void *v4 = v7;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdRet2Sleep(uint64_t a1, AppleBCMWLANCore *a2)
{
  unsigned int v4 = (void *)(a1 + 245184);
  unsigned int v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  unsigned int v6 = IO80211CoreDbg::parseUInt32FromCMD();
  unsigned int v7 = v6;
  if (v6 < 0x3E9)
  {
    uint64_t v17 = v6;
    Commander = (AppleBCMWLANCommander *)AppleBCMWLANCore::getCommander(a2);
    uint64_t v15 = &v17;
    uint64_t v16 = 8;
    int v9 = AppleBCMWLANCommander::runIOVarSet(Commander, (uint64_t)"pm2_sleep_ret", (uint64_t)&v15, 0, 0);
    if (v9)
    {
      if (v5)
      {
        int v10 = v9;
        if (CCLogStream::shouldLog()) {
          CCLogStream::logAlert(v5, "[dk] %s@%d: Failed SET IOCTL, cret[0x%08x]\n", "cmdRet2Sleep", 2380, v10);
        }
      }
    }
    LODWORD(v15) = -1431655766;
    HIDWORD(v15) = v7;
    uint64_t v16 = v7 | 0x500000000;
    uint64_t PowerStateAdapter = AppleBCMWLANCore::getPowerStateAdapter(a2);
    uint64_t v12 = AppleBCMWLANPowerStateAdapter::configureDFRTSLogicAnd(PowerStateAdapter);
    if (v12) {
      (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)a2 + 112))(a2, v12);
    }
  }
  unsigned int v13 = IO80211Print();
  if (a1) {
    void *v4 = v13;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdRoamBoost(uint64_t a1, AppleBCMWLANCore *a2)
{
  unsigned int v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  int v5 = strncmp((const char *)(a1 + 19), "2.4GHz,", 7uLL);
  unsigned __int8 v6 = IO80211CoreDbg::parseSInt32FromCMD();
  if (AppleBCMWLANCore::getFirmwareInterfaceVersion(a2) > 0x10)
  {
    if (v4 && CCLogStream::shouldLog())
    {
      CCLogStream::logAlert(v4, "[dk] %s@%d:%s WiFiRoam : Not yet supported for the current chipset\n", "cmdRoamBoost", 2425, "cmdRoamBoost");
      if (!a1) {
        return 0;
      }
    }
    else if (!a1)
    {
      return 0;
    }
LABEL_10:
    *(void *)(a1 + 245184) = 0;
    return 0;
  }
  if (v5) {
    int v7 = 1;
  }
  else {
    int v7 = 2;
  }
  AppleBCMWLANCore::applyRoamingCandidateBoost(a2, v7, v6);
  if (a1) {
    goto LABEL_10;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdRoamScan(uint64_t a1, AppleBCMWLANCore *a2)
{
  uint64_t v2 = a1;
  long long v40 = (void *)(a1 + 245184);
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  unsigned int v44 = 0;
  memset(v52, 0, sizeof(v52));
  int v50 = -1;
  __int16 v51 = -1;
  uint64_t v3 = (char *)(v2 + 12);
  LODWORD(v4) = 8;
  memset(v49, 0, 142);
  long long v48 = 0u;
  uint64_t v41 = v2;
  while (1)
  {
    while (1)
    {
      int v5 = *(unsigned __int8 *)(v2 + v4 + 10);
      if (v5 != 32) {
        break;
      }
LABEL_22:
      int v13 = 1;
LABEL_23:
      LODWORD(v4) = v4 + v13;
    }
    if (!*(unsigned char *)(v2 + v4 + 10)) {
      goto LABEL_32;
    }
    if (*(unsigned char *)(v2 + (v4 + 2) + 10) == 58) {
      break;
    }
    if ((v5 - 48) > 9) {
      goto LABEL_22;
    }
    uint64_t v14 = (char *)&v50 + 2 * v44;
    unsigned __int16 v17 = *((_WORD *)v14 + 6);
    uint64_t v16 = (unsigned __int16 *)(v14 + 12);
    unsigned __int16 v15 = v17;
    do
    {
      unsigned __int16 v15 = 10 * v15 + v5 - 48;
      uint64_t v4 = (v4 + 1);
      int v5 = *(unsigned __int8 *)(v2 + v4 + 10);
    }
    while ((v5 - 48) < 0xA);
    *uint64_t v16 = v15;
    if (v15 <= 0xFFu)
    {
      if (v15 >= 0xFu) {
        __int16 v18 = -16384;
      }
      else {
        __int16 v18 = 0;
      }
      __int16 v19 = v15 | v18 | 0x1000;
      __src = v3;
      long long v39 = v16;
      uint64_t ChanSpecHandler = AppleBCMWLANCore::getChanSpecHandler(a2);
      unsigned __int16 v21 = v19 & 0xD0FF;
      uint64_t v2 = v41;
      unsigned __int16 BCMChannelSpec = AppleBCMWLANChanSpec::getBCMChannelSpec(ChanSpecHandler, v21);
      uint64_t v3 = __src;
      *long long v39 = BCMChannelSpec;
    }
    ++v44;
  }
  unint64_t v6 = 0;
  int v7 = &v3[v4];
  while (1)
  {
    int v8 = *(v7 - 2);
    if (!*(v7 - 2)) {
      break;
    }
    int v9 = *(v7 - 1);
    if (!*(v7 - 1)) {
      break;
    }
    if (v8 <= 64) {
      char v10 = 64;
    }
    else {
      char v10 = 9;
    }
    char v11 = v10 + v8;
    if (v9 <= 64) {
      char v12 = -48;
    }
    else {
      char v12 = -55;
    }
    if (v9 > 96) {
      char v12 = -87;
    }
    *((unsigned char *)&v50 + v6) = v9 + 16 * v11 + v12;
    if (v6 <= 4 && *v7 != 58 && *v7) {
      break;
    }
    ++v6;
    v7 += 3;
    if (v6 == 6)
    {
      int v13 = 18;
      goto LABEL_23;
    }
  }
LABEL_32:
  unsigned int v23 = v44;
  *(_DWORD *)&v52[1] = v44;
  unint64_t v24 = a2;
  if (AppleBCMWLANCore::getProximityInterface(a2))
  {
    ProximityInterface = (AppleBCMWLANProximityInterface *)AppleBCMWLANCore::getProximityInterface(a2);
    AppleBCMWLANProximityInterface::enableRoamEvents(ProximityInterface);
  }
  v47[3] = 0xAAAAAAAAAAAAAAAALL;
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  LODWORD(v26) = IO80211Print();
  if (v44)
  {
    uint64_t v27 = 0;
    unsigned int v28 = IO80211Print() + v26;
    do
    {
      v28 += IO80211Print();
      ++v27;
    }
    while (v44 != v27);
    uint64_t v26 = IO80211Print() + v28;
    uint64_t v2 = v41;
    unint64_t v24 = a2;
    unsigned int v23 = v44;
  }
  unsigned int v29 = IO80211Print() + v26;
  if (AppleBCMWLANCore::getFirmwareInterfaceVersion(v24) < 0x11)
  {
    unsigned int v34 = &v50;
    uint64_t v36 = 68;
  }
  else
  {
    DWORD1(v48) = v50;
    WORD4(v48) = v51;
    int v30 = v52[0];
    if (v52[0] >= 7u) {
      int v30 = 7;
    }
    WORD5(v48) = v30;
    if (v23 >= 0x32) {
      int v31 = 50;
    }
    else {
      int v31 = v23;
    }
    HIDWORD(v48) = v31;
    uint64_t v32 = (2 * v31);
    uint64_t v33 = (6 * v30);
    unsigned int v34 = (int *)&v48;
    memcpy(v49, &v52[3], v32 + v33);
    uint64_t v35 = (v32 + 16);
    uint64_t v2 = v41;
    uint64_t v36 = v35 + v33;
  }
  IO80211Hexdump();
  v47[0] = v24;
  v47[1] = AppleBCMWLANCore::startRoamScanAsyncCallback;
  void v47[2] = 0;
  Commander = (AppleBCMWLANCommander *)AppleBCMWLANCore::getCommander(v24);
  v46[0] = v34;
  v46[1] = v36;
  int v45 = (v36 << 16) | 6;
  if (AppleBCMWLANCommander::sendIOCtlSet(Commander, 53, (uint64_t)v46, (unsigned __int16 *)&v45, (uint64_t)v47, 0))v29 += IO80211Print(); {
  if (v2)
  }
    *long long v40 = v29;
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdRTSThreashold(uint64_t a1, AppleBCMWLANCore *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  unsigned int v5 = IO80211CoreDbg::parseUInt32FromCMD();
  if (v5 <= 0x92B && AppleBCMWLANCore::getNetAdapter(a2))
  {
    uint64_t NetAdapter = (AppleBCMWLANNetAdapter *)AppleBCMWLANCore::getNetAdapter(a2);
    AppleBCMWLANNetAdapter::configureRTSThreshold(NetAdapter, v5);
  }
  unsigned int v7 = IO80211Print();
  if (a1) {
    void *v4 = v7;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdSetTXWatermark(int a1, AppleBCMWLANCore *this)
{
  uint64_t Bus = AppleBCMWLANCore::getBus(this);
  uint64_t v3 = IO80211CoreDbg::parseUInt32FromCMD();
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)Bus + 248))(Bus, 2, v3, 0, 0);
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdTXStall(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  (*(void (**)(void *))(*a2 + 1848))(a2);
  *(_DWORD *)(a2[9] + 19712) = IO80211CoreDbg::parseUInt32FromCMD();
  unsigned int v5 = IO80211Print();
  if (a1) {
    void *v4 = v5;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdEventTraceLogs(uint64_t a1, AppleBCMWLANCore *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  size_t v5 = strlen((const char *)(a1 + 10));
  if (!strncmp((const char *)(a1 + 10), "et", v5))
  {
    AppleBCMWLANCore::isEventBitSet(a2, 0x34u);
  }
  else
  {
    if (IO80211CoreDbg::parseUInt32FromCMD()) {
      uint64_t v6 = AppleBCMWLANCore::setEventBit(a2, 0x34u);
    }
    else {
      uint64_t v6 = AppleBCMWLANCore::clearEventBit(a2, 0x34u);
    }
    uint64_t v7 = v6;
    AppleBCMWLANCore::isEventBitSet(a2, 0x34u);
    (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)a2 + 112))(a2, v7);
  }
  unsigned int v8 = IO80211Print();
  if (a1) {
    void *v4 = v8;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdEventEnable(uint64_t a1, AppleBCMWLANCore *a2)
{
  __int16 v18 = (void *)(a1 + 245184);
  if (a1) {
    uint64_t v4 = *(char **)(a1 + 245208);
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  uint64_t v5 = a1;
  uint64_t v6 = (const char *)(a1 + 12);
  uint64_t v7 = IO80211Print();
  int v8 = convertStringToEvent(v6);
  if (v8 == -1)
  {
    uint64_t v17 = v5;
    uint64_t v12 = IO80211Print() + v7;
    if (*v6 == 104)
    {
      int v13 = 0;
      LODWORD(v12) = IO80211Print() + v12;
      do
      {
        convertEventToString(v13, 0, 0);
        uint64_t v12 = IO80211Print() + v12;
        ++v13;
      }
      while (v13 != 215);
    }
    unsigned int v14 = v12;
    if (!strncmp("all", v6, 3uLL))
    {
      for (unsigned int i = 0; i != 215; ++i)
      {
        convertEventToString(i, 0, 0);
        v14 += IO80211Print();
        AppleBCMWLANCore::addEventBit(a2, i);
      }
      AppleBCMWLANCore::writeEventBitField(a2);
      v14 += IO80211Print();
      AppleBCMWLANCore::dumpEventBitField(a2, v4);
    }
    if (v17)
    {
      uint64_t v11 = v14;
      goto LABEL_16;
    }
  }
  else
  {
    unsigned int v9 = v8;
    convertEventToString(v8, 0, 0);
    int v10 = IO80211Print();
    AppleBCMWLANCore::setEventBit(a2, v9);
    if (v5)
    {
      uint64_t v11 = (v10 + v7);
LABEL_16:
      void *v18 = v11;
    }
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdEventDisable(uint64_t a1, AppleBCMWLANCore *a2)
{
  __int16 v18 = (void *)(a1 + 245184);
  if (a1) {
    uint64_t v4 = *(char **)(a1 + 245208);
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  uint64_t v5 = a1;
  uint64_t v6 = (const char *)(a1 + 14);
  uint64_t v7 = IO80211Print();
  int v8 = convertStringToEvent(v6);
  if (v8 == -1)
  {
    uint64_t v17 = v5;
    uint64_t v12 = IO80211Print() + v7;
    if (*v6 == 104)
    {
      int v13 = 0;
      LODWORD(v12) = IO80211Print() + v12;
      do
      {
        convertEventToString(v13, 0, 0);
        uint64_t v12 = IO80211Print() + v12;
        ++v13;
      }
      while (v13 != 215);
    }
    unsigned int v14 = v12;
    if (!strncmp("all", v6, 3uLL))
    {
      for (unsigned int i = 0; i != 215; ++i)
      {
        convertEventToString(i, 0, 0);
        v14 += IO80211Print();
        AppleBCMWLANCore::removeEventBit(a2, i);
      }
      AppleBCMWLANCore::writeEventBitField(a2);
      v14 += IO80211Print();
      AppleBCMWLANCore::dumpEventBitField(a2, v4);
    }
    if (v17)
    {
      uint64_t v11 = v14;
      goto LABEL_16;
    }
  }
  else
  {
    unsigned int v9 = v8;
    convertEventToString(v8, 0, 0);
    int v10 = IO80211Print();
    AppleBCMWLANCore::clearEventBit(a2, v9);
    if (v5)
    {
      uint64_t v11 = (v10 + v7);
LABEL_16:
      void *v18 = v11;
    }
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdLpasRoamQuota(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  (*(void (**)(void *))(*a2 + 1848))(a2);
  *(_DWORD *)(a2[9] + 6668) = IO80211CoreDbg::parseUInt32FromCMD();
  unsigned int v5 = IO80211Print();
  if (a1) {
    void *v4 = v5;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdMotionState(uint64_t a1, AppleBCMWLANCore *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  BGScanAdapter = (AppleBCMWLANBGScanAdapter *)AppleBCMWLANCore::getBGScanAdapter(a2);
  AppleBCMWLANBGScanAdapter::getMotionProfileState(BGScanAdapter);
  unsigned int v6 = IO80211Print();
  if (a1) {
    void *v4 = v6;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdRoamMode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a1 + 245184);
  (*(void (**)(uint64_t))(*(void *)a2 + 1848))(a2);
  unsigned int v4 = IO80211Print();
  if (a1) {
    *uint64_t v3 = v4;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdRoamStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a1 + 245184);
  (*(void (**)(uint64_t))(*(void *)a2 + 1848))(a2);
  unsigned int v4 = IO80211Print();
  if (a1) {
    *uint64_t v3 = v4;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdBGScanPrivateMac(uint64_t a1, AppleBCMWLANCore *a2)
{
  unsigned int v4 = (void *)(a1 + 245184);
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  memset(v15, 170, sizeof(v15));
  __int16 v14 = 0;
  *(_DWORD *)int v13 = 0;
  memset(v12, 170, 6);
  int v5 = sscanf((const char *)(a1 + 29), "%x:%x:%x:%x:%x:%x", v15, (char *)v15 + 4, &v15[1], (char *)&v15[1] + 4, &v15[2], (char *)&v15[2] + 4);
  if (v5 == -1)
  {
    uint64_t BGScanAdapter = AppleBCMWLANCore::getBGScanAdapter(a2);
    AppleBCMWLANBGScanAdapter::getBGScanPrivateMac(BGScanAdapter, v12);
    IO80211Print();
    return 0;
  }
  if (v5 == 6)
  {
    for (uint64_t i = 0; i != 6; ++i)
      v13[i] = *((_DWORD *)v15 + i);
    v13[0] = v13[0] & 0xFC | 2;
    uint64_t v7 = AppleBCMWLANCore::getBGScanAdapter(a2);
    AppleBCMWLANBGScanAdapter::configureBGScanPrivateMac(v7, v13);
    unsigned int v8 = IO80211Print();
    if (a1)
    {
      uint64_t v9 = 0;
LABEL_10:
      void *v4 = v8;
      return v9;
    }
    return 0;
  }
  uint64_t v9 = 3758097090;
  unsigned int v8 = IO80211Print();
  if (a1) {
    goto LABEL_10;
  }
  return v9;
}

uint64_t AppleBCMWLANCoreDbg::cmdBGScanMacRandomMask(uint64_t a1, AppleBCMWLANCore *a2)
{
  unsigned int v4 = (void *)(a1 + 245184);
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  memset(v15, 170, sizeof(v15));
  __int16 v14 = 0;
  *(_DWORD *)int v13 = 0;
  memset(v12, 170, 6);
  int v5 = sscanf((const char *)(a1 + 30), "%x:%x:%x:%x:%x:%x", v15, (char *)v15 + 4, &v15[1], (char *)&v15[1] + 4, &v15[2], (char *)&v15[2] + 4);
  if (v5 == -1)
  {
    uint64_t BGScanAdapter = AppleBCMWLANCore::getBGScanAdapter(a2);
    AppleBCMWLANBGScanAdapter::getBGScanMacRandomMask(BGScanAdapter, v12);
    IO80211Print();
    return 0;
  }
  if (v5 == 6)
  {
    for (uint64_t i = 0; i != 6; ++i)
      v13[i] = *((_DWORD *)v15 + i);
    v13[0] &= 0xFCu;
    uint64_t v7 = AppleBCMWLANCore::getBGScanAdapter(a2);
    AppleBCMWLANBGScanAdapter::configureBGScanMacRandomMask(v7, v13);
    unsigned int v8 = IO80211Print();
    if (a1)
    {
      uint64_t v9 = 0;
LABEL_10:
      void *v4 = v8;
      return v9;
    }
    return 0;
  }
  uint64_t v9 = 3758097090;
  unsigned int v8 = IO80211Print();
  if (a1) {
    goto LABEL_10;
  }
  return v9;
}

uint64_t AppleBCMWLANCoreDbg::cmdBGScanPrivateMacTimeout(uint64_t a1, AppleBCMWLANCore *a2)
{
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  int v4 = IO80211CoreDbg::parseUInt32FromCMD();
  uint64_t BGScanAdapter = AppleBCMWLANCore::getBGScanAdapter(a2);
  AppleBCMWLANBGScanAdapter::configureBGScanPrivateMacTimeout(BGScanAdapter, v4);
  if (a1) {
    *(void *)(a1 + 245184) = 0;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdSd_devreg(uint64_t a1, AppleBCMWLANCore *a2)
{
  int v4 = (void *)(a1 + 245184);
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v13[12] = v5;
  long long v12 = v5;
  *(_OWORD *)int v13 = v5;
  long long v11 = v5;
  int v9 = -1431655766;
  int v10 = -1431655766;
  int v8 = -1431655766;
  sscanf((const char *)(a1 + 10), "%s %x %x %x", &v11, &v10, &v9, &v8);
  uint64_t v6 = *(void *)AppleBCMWLANCore::getBus(a2);
  (*(void (**)(void))(v6 + 288))();
  if (a1) {
    void *v4 = 0;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdSbreg(uint64_t a1, AppleBCMWLANCore *a2)
{
  int v4 = (void *)(a1 + 245184);
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v12[12] = v5;
  long long v11 = v5;
  *(_OWORD *)long long v12 = v5;
  long long v10 = v5;
  int v8 = -1431655766;
  int v9 = -1431655766;
  sscanf((const char *)(a1 + 10), "%s %x %x", &v10, &v9, &v8);
  uint64_t v6 = *(void *)AppleBCMWLANCore::getBus(a2);
  (*(void (**)(void))(v6 + 296))();
  if (a1) {
    void *v4 = 0;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdTxPowerCapConfig(uint64_t a1, AppleBCMWLANCore *a2)
{
  if (a1) {
    *(void *)(a1 + 245184) = 0;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdSetTxPowerCapHigh(uint64_t a1, void *a2)
{
  (*(void (**)(void *))(*a2 + 1848))(a2);
  BOOL v4 = IO80211CoreDbg::parseUInt32FromCMD() == 0;
  *(_DWORD *)(a2[9] + 19632) = v4;
  *(_DWORD *)(a2[9] + 19628) = v4;
  AppleBCMWLANCore::setTxPowerCapState((uint64_t)a2);
  if (a1) {
    *(void *)(a1 + 245184) = 0;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdDumpTxPwrCapState(uint64_t a1, AppleBCMWLANCore *a2)
{
  BOOL v4 = (void *)(a1 + 245184);
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  ConfigManager = (AppleBCMWLANConfigManager *)AppleBCMWLANCore::getConfigManager(a2);
  int v6 = *(_DWORD *)(AppleBCMWLANConfigManager::getTxPowerCapConfig(ConfigManager) + 12);
  switch(v6)
  {
    case 4:
      memset(v9, 170, 3);
      AppleBCMWLANCore::getTxPowerCapStateV4(a2, (uint64_t)v9);
      break;
    case 3:
      memset(v9, 170, 11);
      AppleBCMWLANCore::getTxPowerCapStateV3(a2, (uint64_t)v9);
      break;
    case 2:
      memset(v9, 170, 6);
      AppleBCMWLANCore::getTxPowerCapState(a2, (uint64_t)v9);
      break;
    default:
      unsigned int v7 = 0;
      if (!a1) {
        return 0;
      }
      goto LABEL_8;
  }
  unsigned int v7 = IO80211Print();
  if (a1) {
LABEL_8:
  }
    void *v4 = v7;
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdDumpTxPwrCapDebugV3(uint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  BOOL v4 = (void *)(a1 + 245184);
  (*(void (**)(void *))(*a2 + 1848))(a2);
  uint64_t v5 = IOMallocZeroTyped();
  if (v5)
  {
    int v6 = (unsigned __int8 *)v5;
    *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v51[14] = v7;
    v51[15] = v7;
    v51[12] = v7;
    v51[13] = v7;
    v51[10] = v7;
    v51[11] = v7;
    v51[8] = v7;
    v51[9] = v7;
    v51[6] = v7;
    v51[7] = v7;
    v51[4] = v7;
    v51[5] = v7;
    v51[2] = v7;
    v51[3] = v7;
    v51[0] = v7;
    v51[1] = v7;
    AppleBCMWLANCore::getTxPowerCapDebugInfoV3(a2, v5);
    uint64_t v8 = v6[22] * v6[21];
    int v9 = *v6;
    if (v9 == 3)
    {
      uint64_t v10 = IO80211Print();
      uint64_t v11 = IO80211Print() + v10;
      uint64_t v12 = IO80211Print() + v11;
      uint64_t v13 = IO80211Print() + v12;
      uint64_t v14 = IO80211Print() + v13;
      if ((v8 - 1) <= 0x3E)
      {
        uint64_t v47 = v3;
        unsigned __int8 v49 = v4;
        int v15 = 0;
        uint64_t v16 = v8;
        uint64_t v17 = (char *)(v6 + 34);
        uint64_t v18 = v8;
        while (1)
        {
          int v19 = *v17++;
          v15 += snprintf((char *)v51 + v15, 0x100uLL, "%03d ", v19);
          if (v15 >= 252) {
            break;
          }
          if (!--v18) {
            goto LABEL_10;
          }
        }
        strcpy((char *)v51, "Print buffer is too small");
LABEL_10:
        int v20 = 0;
        uint64_t v21 = IO80211Print() + v14;
        uint64_t v22 = (char *)(v6 + 114);
        uint64_t v23 = v8;
        while (1)
        {
          int v24 = *v22++;
          v20 += snprintf((char *)v51 + v20, 0x100uLL, "%03d ", v24);
          if (v20 >= 252) {
            break;
          }
          if (!--v23) {
            goto LABEL_15;
          }
        }
        strcpy((char *)v51, "Print buffer is too small");
LABEL_15:
        int v25 = 0;
        uint64_t v26 = IO80211Print() + v21;
        uint64_t v27 = (char *)(v6 + 194);
        uint64_t v28 = v8;
        while (1)
        {
          int v29 = *v27++;
          v25 += snprintf((char *)v51 + v25, 0x100uLL, "%03d ", v29);
          if (v25 >= 252) {
            break;
          }
          if (!--v28) {
            goto LABEL_20;
          }
        }
        strcpy((char *)v51, "Print buffer is too small");
LABEL_20:
        int v30 = 0;
        uint64_t v14 = IO80211Print() + v26;
        int v31 = (char *)(v6 + 274);
        while (1)
        {
          int v32 = *v31++;
          v30 += snprintf((char *)v51 + v30, 0x100uLL, "%03d ", v32);
          if (v30 >= 252) {
            break;
          }
          if (!--v16) {
            goto LABEL_25;
          }
        }
        strcpy((char *)v51, "Print buffer is too small");
LABEL_25:
        LODWORD(v14) = IO80211Print() + v14;
        uint64_t v3 = v47;
        BOOL v4 = v49;
      }
      int v9 = *v6;
    }
    else
    {
      LODWORD(v14) = 0;
    }
    if (v9 == 2)
    {
      int v33 = v14 + IO80211Print();
      int v34 = v33 + IO80211Print();
      int v35 = v34 + IO80211Print();
      int v36 = v35 + IO80211Print();
      int v37 = v36 + IO80211Print();
      LODWORD(v14) = v37;
      if ((v8 - 1) <= 0x3E)
      {
        uint64_t v48 = v3;
        int v50 = v4;
        int v38 = 0;
        long long v39 = (char *)(v6 + 33);
        uint64_t v40 = v8;
        while (1)
        {
          int v41 = *v39++;
          v38 += snprintf((char *)v51 + v38, 0x100uLL, "%03d ", v41);
          if (v38 >= 252) {
            break;
          }
          if (!--v40) {
            goto LABEL_34;
          }
        }
        strcpy((char *)v51, "Print buffer is too small");
LABEL_34:
        int v42 = 0;
        int v43 = v37 + IO80211Print();
        unsigned int v44 = (char *)(v6 + 113);
        uint64_t v3 = v48;
        while (1)
        {
          int v45 = *v44++;
          v42 += snprintf((char *)v51 + v42, 0x100uLL, "%03d ", v45);
          if (v42 >= 252) {
            break;
          }
          if (!--v8) {
            goto LABEL_39;
          }
        }
        strcpy((char *)v51, "Print buffer is too small");
LABEL_39:
        LODWORD(v14) = v43 + IO80211Print();
        BOOL v4 = v50;
      }
    }
    if (v3) {
      void *v4 = v14;
    }
    IOFree(v6, 0x164uLL);
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdDumpTxPwrCapDebugV5(uint64_t a1, AppleBCMWLANCore *a2)
{
  BOOL v4 = (void *)(a1 + 245184);
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  Commander = (AppleBCMWLANCommander *)AppleBCMWLANCore::getCommander(a2);
  unsigned __int16 MaxCmdRxPayload = AppleBCMWLANCommander::getMaxCmdRxPayload(Commander);
  long long v7 = (unsigned __int8 *)IOMallocZeroData();
  if (v7)
  {
    uint64_t v8 = v7;
    if (!AppleBCMWLANCore::getTxPowerCapDebugInfoV5(a2, v7, MaxCmdRxPayload) && *v8 == 5)
    {
      uint64_t v25 = a1;
      uint64_t v9 = IO80211Print();
      uint64_t v10 = IO80211Print() + v9;
      uint64_t v26 = v4;
      if (v8[8])
      {
        if (v8[1])
        {
          int v11 = 0;
          uint64_t v12 = v8 + 14;
          unsigned int v24 = 1922;
          do
          {
            int v23 = v11;
            uint64_t v13 = IO80211Print() + v10;
            LODWORD(v10) = IO80211Print() + v13;
            if (!v12[1]) {
              break;
            }
            if (v12[3] > 7u) {
              break;
            }
            unsigned int v14 = (80 * v12[1]) | 4;
            if (v24 < v14) {
              break;
            }
            uint64_t v15 = 0;
            while (word_100305658[v15] != *v12)
            {
              v15 += 5;
              if (v15 == 70) {
                goto LABEL_29;
              }
            }
            uint64_t v22 = (80 * v12[1]) | 4;
            v24 -= v14;
            uint64_t v16 = 0;
            uint64_t v17 = v12 + 4;
            int v27 = LOBYTE(word_100305658[v15 + 1]);
            do
            {
              uint64_t v28 = v17;
              uint64_t v29 = v16;
              if (v12[2])
              {
                unint64_t v18 = 0;
                int v19 = v17;
                do
                {
                  if (v8[9])
                  {
                    unint64_t v20 = 0;
                    do
                    {
                      LODWORD(v10) = v10 + IO80211Print();
                      ++v20;
                    }
                    while (v20 < v8[9]);
                  }
                  LODWORD(v10) = v10 + IO80211Print();
                  ++v18;
                  v19 += 8;
                }
                while (v18 < v12[2]);
              }
              if (v27 == 3 || v27 == 2 || v27 == 1) {
                LODWORD(v10) = v10 + IO80211Print();
              }
              LODWORD(v10) = v10 + IO80211Print();
              uint64_t v16 = v29 + 1;
              uint64_t v17 = v28 + 80;
            }
            while (v29 + 1 < (unint64_t)v12[1]);
            uint64_t v10 = IO80211Print() + v10;
            v12 += v22;
            int v11 = v23 + 1;
          }
          while (v23 + 1 < v8[1]);
        }
      }
      else
      {
        LODWORD(v10) = IO80211Print() + v10;
      }
LABEL_29:
      if (v25) {
        *uint64_t v26 = v10;
      }
    }
    IOFreeData();
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdDumpTxPwrCapDebugV7(uint64_t a1, AppleBCMWLANCore *a2)
{
  BOOL v4 = (void *)(a1 + 245184);
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  Commander = (AppleBCMWLANCommander *)AppleBCMWLANCore::getCommander(a2);
  unsigned __int16 MaxCmdRxPayload = AppleBCMWLANCommander::getMaxCmdRxPayload(Commander);
  long long v7 = (unsigned __int8 *)IOMallocZeroData();
  if (v7)
  {
    uint64_t v8 = v7;
    if (!AppleBCMWLANCore::getTxPowerCapDebugInfoV7(a2, v7, MaxCmdRxPayload) && *v8 == 7)
    {
      uint64_t v25 = a1;
      uint64_t v9 = IO80211Print();
      uint64_t v10 = IO80211Print() + v9;
      uint64_t v26 = v4;
      if (v8[8])
      {
        if (v8[1])
        {
          int v11 = 0;
          uint64_t v12 = v8 + 38;
          unsigned int v24 = 1898;
          do
          {
            int v23 = v11;
            uint64_t v13 = IO80211Print() + v10;
            LODWORD(v10) = IO80211Print() + v13;
            if (!v12[1]) {
              break;
            }
            if (v12[3] > 0xBu) {
              break;
            }
            unsigned int v14 = (80 * v12[1]) | 4;
            if (v24 < v14) {
              break;
            }
            uint64_t v15 = 0;
            while (word_100305658[v15] != *v12)
            {
              v15 += 5;
              if (v15 == 70) {
                goto LABEL_29;
              }
            }
            uint64_t v22 = (80 * v12[1]) | 4;
            v24 -= v14;
            uint64_t v16 = 0;
            uint64_t v17 = v12 + 4;
            int v27 = LOBYTE(word_100305658[v15 + 1]);
            do
            {
              uint64_t v28 = v17;
              uint64_t v29 = v16;
              if (v12[2])
              {
                unint64_t v18 = 0;
                int v19 = v17;
                do
                {
                  if (v8[9])
                  {
                    unint64_t v20 = 0;
                    do
                    {
                      LODWORD(v10) = v10 + IO80211Print();
                      ++v20;
                    }
                    while (v20 < v8[9]);
                  }
                  LODWORD(v10) = v10 + IO80211Print();
                  ++v18;
                  v19 += 8;
                }
                while (v18 < v12[2]);
              }
              if (v27 == 3 || v27 == 2 || v27 == 1) {
                LODWORD(v10) = v10 + IO80211Print();
              }
              LODWORD(v10) = v10 + IO80211Print();
              uint64_t v16 = v29 + 1;
              uint64_t v17 = v28 + 80;
            }
            while (v29 + 1 < (unint64_t)v12[1]);
            uint64_t v10 = IO80211Print() + v10;
            v12 += v22;
            int v11 = v23 + 1;
          }
          while (v23 + 1 < v8[1]);
        }
      }
      else
      {
        LODWORD(v10) = IO80211Print() + v10;
      }
LABEL_29:
      if (v25) {
        *uint64_t v26 = v10;
      }
    }
    IOFreeData();
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdDumpTxPwrCapDebug(uint64_t a1, AppleBCMWLANCore *this)
{
  ConfigManager = (AppleBCMWLANConfigManager *)AppleBCMWLANCore::getConfigManager(this);
  int v5 = *(_DWORD *)(AppleBCMWLANConfigManager::getTxPowerCapConfig(ConfigManager) + 12);
  switch(v5)
  {
    case 4:
      AppleBCMWLANCoreDbg::cmdDumpTxPwrCapDebugV7(a1, this);
      break;
    case 3:
      AppleBCMWLANCoreDbg::cmdDumpTxPwrCapDebugV5(a1, this);
      break;
    case 2:
      AppleBCMWLANCoreDbg::cmdDumpTxPwrCapDebugV3(a1, this);
      break;
    default:
      IOLog("Unsupported TxCap version \n");
      break;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdSetTxCapHighPowerTimeout(uint64_t a1, AppleBCMWLANCore *a2)
{
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  int v4 = IO80211CoreDbg::parseUInt32FromCMD();
  AppleBCMWLANCore::setTxHighCapTimeout(a2, v4);
  if (a1) {
    *(void *)(a1 + 245184) = 0;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdGetTxCapHighPowerTimeout(uint64_t a1, AppleBCMWLANCore *a2)
{
  int v4 = (void *)(a1 + 245184);
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  unsigned int v7 = -1431655766;
  AppleBCMWLANCore::getTxHighCapTimeout(a2, &v7);
  unsigned int v5 = IO80211Print();
  if (a1) {
    void *v4 = v5;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdDecodeError(uint64_t a1, uint64_t a2)
{
  int v4 = (void *)(a1 + 245184);
  (*(void (**)(uint64_t))(*(void *)a2 + 1848))(a2);
  unsigned int v7 = 0;
  sscanf((const char *)(a1 + 10), "%*s %i", &v7);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 112))(a2, v7);
  unsigned int v5 = IO80211Print();
  if (a1) {
    void *v4 = v5;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdDumpErrorCodes(uint64_t a1, uint64_t a2)
{
  if (a1) {
    *(void *)(a1 + 245184) = 0;
  }
  return 0;
}

uint64_t printRetCodeName(void *a1, int a2, const char *a3)
{
  return IOLog("0x%08x .... %-11d .... %s\n", a2, a2, a3);
}

uint64_t AppleBCMWLANCoreDbg::cmdBusState(uint64_t a1, AppleBCMWLANCore *a2)
{
  int v4 = (void *)(a1 + 245184);
  if (a1)
  {
    uint64_t v5 = *(void *)(a1 + 245208);
    uint64_t v6 = *(unsigned int *)(a1 + 245200);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  if (a1 && strnlen((const char *)(a1 + 10), 0x100uLL) == 3 && !strncasecmp((const char *)(a1 + 10), "bs2", 3uLL))
  {
    uint64_t Bus = AppleBCMWLANCore::getBus(a2);
    uint64_t v8 = (*(unsigned int (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)Bus + 256))(Bus, v5, 0, v6, 1);
    goto LABEL_9;
  }
  uint64_t v7 = AppleBCMWLANCore::getBus(a2);
  (*(void (**)(void))(*(void *)(v7 + 48) + 344))();
  if (a1)
  {
    uint64_t v8 = 0;
LABEL_9:
    void *v4 = v8;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdToggleDeviceWake(uint64_t a1, AppleBCMWLANCore *a2)
{
  int v4 = (void *)(a1 + 245184);
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  uint64_t v5 = *(void *)AppleBCMWLANCore::getBus(a2);
  (*(void (**)(void))(v5 + 280))();
  unsigned int v6 = IO80211Print();
  if (a1) {
    void *v4 = v6;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdLowerWlanRegOn(uint64_t a1, AppleBCMWLANCore *a2)
{
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  uint64_t v4 = *(void *)AppleBCMWLANCore::getBus(a2);
  (*(void (**)(void))(v4 + 304))();
  if (a1) {
    *(void *)(a1 + 245184) = 0;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdDSEnableDisable(uint64_t a1, AppleBCMWLANCore *a2)
{
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  uint64_t v4 = *(void *)AppleBCMWLANCore::getBus(a2);
  (*(void (**)(void))(v4 + 312))();
  if (a1) {
    *(void *)(a1 + 245184) = 0;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdDumpPCIeRegisters(uint64_t a1, uint64_t a2)
{
  if (a1) {
    *(void *)(a1 + 245184) = 0;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdDumpPCIeMMIOLog(uint64_t a1, uint64_t a2)
{
  if (a1) {
    *(void *)(a1 + 245184) = 0;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdBSSTransRateSet()
{
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdGetBSSTransRateSet()
{
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdBusTrap(int a1, AppleBCMWLANCore *this)
{
  uint64_t Bus = AppleBCMWLANCore::getBus(this);
  (*(void (**)(uint64_t, uint64_t))(*(void *)Bus + 216))(Bus, 2);
  uint64_t v4 = AppleBCMWLANCore::getBus(this);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 200))(v4, 3693);
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdTxUART(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a1 + 245184);
  (*(void (**)(uint64_t))(*(void *)a2 + 1848))(a2);
  unsigned int v4 = IO80211Print();
  if (a1) {
    *uint64_t v3 = v4;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdNATKeepAliveIP(uint64_t a1, void *a2)
{
  uint64_t v12 = (void *)(a1 + 245184);
  (*(void (**)(void *))(*a2 + 1848))(a2);
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  *(_DWORD *)(a2[9] + 10372) = 0;
  unsigned int v4 = (const char *)(a1 + 20);
  uint64_t v13 = a1;
  int v5 = IO80211Print();
  if (sscanf(v4, " %d.%d.%d.%d", &v14, (char *)&v14 + 4, &v15, (char *)&v15 + 4) != 4)
  {
    uint64_t v10 = 3758097090;
    int v9 = IO80211Print();
    if (!v13) {
      return v10;
    }
LABEL_7:
    void *v12 = (v9 + v5);
    return v10;
  }
  uint64_t v6 = 0;
  uint64_t v7 = &v14;
  do
  {
    int v8 = *(_DWORD *)v7;
    uint64_t v7 = (unint64_t *)((char *)v7 + 4);
    *(_DWORD *)(a2[9] + 10372) += v8 << v6;
    v6 += 8;
  }
  while (v6 != 32);
  int v9 = IO80211Print();
  uint64_t v10 = 0;
  if (v13) {
    goto LABEL_7;
  }
  return v10;
}

uint64_t AppleBCMWLANCoreDbg::cmdDumpPrivateMac(uint64_t a1, AppleBCMWLANCore *a2)
{
  *(_DWORD *)uint64_t v7 = 0;
  __int16 v8 = 0;
  *(_DWORD *)int v5 = 0;
  __int16 v6 = 0;
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  uint64_t BGScanAdapter = AppleBCMWLANCore::getBGScanAdapter(a2);
  AppleBCMWLANBGScanAdapter::getPrevAndCurrentBGScanPrivateMac(BGScanAdapter, v7, v5);
  if (AppleBCMWLANCore::isAssociated(a2))
  {
    __int16 v8 = 0;
    *(_DWORD *)uint64_t v7 = 0;
  }
  IO80211Print();
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdStaticSMPS(uint64_t a1, uint64_t a2)
{
  if (a1) {
    *(void *)(a1 + 245184) = 0;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdGetMIMOMode(uint64_t a1, AppleBCMWLANCore *a2)
{
  unsigned int v4 = (void *)(a1 + 245184);
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  uint64_t v5 = IOMallocZeroData();
  if (v5)
  {
    __int16 v6 = (_DWORD *)v5;
    uint64_t v7 = IOMallocZeroData();
    if (v7)
    {
      __int16 v8 = (_DWORD *)v7;
      AppleBCMWLANPowerManager::getCurrentRadioChainConfig(*(AppleBCMWLANCore ****)(*((void *)a2 + 9) + 5528), v6);
      AppleBCMWLANCore::featureFlagClearBit(a2, 24);
      unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v12[0] = v9;
      v12[1] = v9;
      BYTE4(v12[0]) = 0;
      LODWORD(v12[0]) = 13;
      AppleBCMWLANCore::getPowerStats(a2, v8, (int *)v12);
      unsigned int v10 = IO80211Print();
      if (a1) {
        void *v4 = v10;
      }
      IOFreeData();
    }
    IOFreeData();
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdConfigureMIMOPS(uint64_t a1, AppleBCMWLANCore *a2)
{
  unsigned int v4 = (void *)(a1 + 245184);
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  unsigned int v5 = IO80211CoreDbg::parseUInt32FromCMD();
  ConfigManager = (AppleBCMWLANConfigManager *)AppleBCMWLANCore::getConfigManager(a2);
  if (v5 <= 1)
  {
    AppleBCMWLANConfigManager::configureMIMOPSSupport((uint64_t)ConfigManager, v5 != 0);
    uint64_t v7 = 0;
    if (!a1) {
      return 0;
    }
    goto LABEL_5;
  }
  AppleBCMWLANConfigManager::isMIMOPSSupported(ConfigManager);
  uint64_t v7 = IO80211Print();
  if (a1) {
LABEL_5:
  }
    void *v4 = v7;
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdGetMIMOPSStatus(uint64_t a1, AppleBCMWLANCore *a2)
{
  unsigned int v4 = (void *)(a1 + 245184);
  unsigned int v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  v12[0] = 2;
  v12[1] = 0;
  v11[0] = v12;
  v11[1] = 0x1000100010;
  Commander = (AppleBCMWLANCommander *)AppleBCMWLANCore::getCommander(a2);
  v10[0] = v12;
  v10[1] = 16;
  uint64_t v7 = AppleBCMWLANCommander::runIOVarGet(Commander, (uint64_t)"mimo_ps_status", (uint64_t)v10, (uint64_t)v11, 0);
  if (v7)
  {
    if (v5 && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(v5, "[dk] %s@%d:Failed to collect MIMO PS Status values \n", "cmdGetMIMOPSStatus", 3877);
    }
  }
  else
  {
    unsigned int v8 = IO80211Print();
    if (a1) {
      void *v4 = v8;
    }
  }
  return v7;
}

uint64_t AppleBCMWLANCoreDbg::cmdConfigureOCL(uint64_t a1, AppleBCMWLANCore *a2)
{
  unsigned int v4 = (void *)(a1 + 245184);
  unsigned int v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  if (AppleBCMWLANCore::isOCLEnabled(a2))
  {
    size_t v6 = strlen((const char *)(a1 + 10));
    if (!strncmp((const char *)(a1 + 10), "ocl_enable", v6))
    {
      ConfigManager = (AppleBCMWLANConfigManager *)AppleBCMWLANCore::getConfigManager(a2);
      AppleBCMWLANConfigManager::isOCLSupportedInDriver(ConfigManager);
      int v20 = 0;
      v19[0] = &v20;
      v19[1] = 0x400040004;
      Commander = (AppleBCMWLANCommander *)AppleBCMWLANCore::getCommander(a2);
      v18[0] = &v20;
      v18[1] = 4;
      uint64_t v11 = AppleBCMWLANCommander::runIOVarGet(Commander, (uint64_t)"ocl_enable", (uint64_t)v18, (uint64_t)v19, 0);
      int v14 = IO80211Print();
      int v15 = IO80211Print();
      if (a1)
      {
        uint64_t v16 = (v15 + v14);
LABEL_18:
        void *v4 = v16;
      }
    }
    else
    {
      unsigned int v7 = IO80211CoreDbg::parseUInt32FromCMD();
      if (v7 > 1)
      {
        unsigned int v9 = IO80211Print();
        uint64_t v11 = 3758097090;
        if (!a1) {
          return v11;
        }
        goto LABEL_17;
      }
      unsigned int v8 = v7;
      unsigned int v9 = IO80211Print();
      unsigned int v10 = *(AppleBCMWLANPowerManager **)(*((void *)a2 + 9) + 5528);
      if (v8 == 1) {
        AppleBCMWLANPowerManager::configureOCLParams(v10);
      }
      else {
        AppleBCMWLANPowerManager::configureOCLSetting(v10, 0);
      }
      uint64_t v11 = 0;
      if (a1)
      {
LABEL_17:
        uint64_t v16 = v9;
        goto LABEL_18;
      }
    }
  }
  else
  {
    if (v5 && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(v5, "[dk] %s@%d:OCL Feature is not Enabled on this platform\n", "cmdConfigureOCL", 3899);
    }
    uint64_t v11 = 3758097095;
    if (a1) {
      void *v4 = 0;
    }
  }
  return v11;
}

uint64_t AppleBCMWLANCoreDbg::cmdOCLRssiThreshold(uint64_t a1, AppleBCMWLANCore *a2)
{
  unsigned int v4 = (void *)(a1 + 245184);
  unsigned int v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  if (AppleBCMWLANCore::isOCLEnabled(a2))
  {
    size_t v6 = strlen((const char *)(a1 + 10));
    if (strncmp((const char *)(a1 + 10), "ocl_rssi_threshold", v6))
    {
      unsigned int v7 = IO80211CoreDbg::parseSInt32FromCMD();
      if (v7 < 0xFFFFFF81)
      {
        unsigned int v8 = IO80211Print();
        uint64_t v9 = 3758097090;
        if (!a1) {
          return v9;
        }
      }
      else
      {
        AppleBCMWLANPowerManager::configureOCLRssiThreshold(*(AppleBCMWLANPowerManager **)(*((void *)a2 + 9) + 5528), v7);
        unsigned int v8 = IO80211Print();
        uint64_t v9 = 0;
        if (!a1) {
          return v9;
        }
      }
      goto LABEL_12;
    }
    int v14 = 0;
    v13[0] = &v14;
    v13[1] = 0x400040004;
    Commander = (AppleBCMWLANCommander *)AppleBCMWLANCore::getCommander(a2);
    v12[0] = &v14;
    v12[1] = 4;
    uint64_t v9 = AppleBCMWLANCommander::runIOVarGet(Commander, (uint64_t)"ocl_rssi_threshold", (uint64_t)v12, (uint64_t)v13, 0);
    unsigned int v8 = IO80211Print();
    if (a1) {
LABEL_12:
    }
      void *v4 = v8;
  }
  else
  {
    if (v5 && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(v5, "[dk] %s@%d:OCL Feature is not Enabled on this platform\n", "cmdOCLRssiThreshold", 3951);
    }
    uint64_t v9 = 3758097095;
    if (a1) {
      void *v4 = 0;
    }
  }
  return v9;
}

uint64_t AppleBCMWLANCoreDbg::cmdGetOCLStatus(uint64_t a1, AppleBCMWLANCore *a2)
{
  unsigned int v4 = (void *)(a1 + 245184);
  unsigned int v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  if (AppleBCMWLANCore::isOCLEnabled(a2))
  {
    if (AppleBCMWLANCore::getFirmwareInterfaceVersion(a2) >= 0xC)
    {
      if (AppleBCMWLANCore::getFirmwareInterfaceVersion(a2) >= 0xE) {
        unsigned int v6 = 56;
      }
      else {
        unsigned int v6 = 52;
      }
    }
    else
    {
      unsigned int v6 = 6;
    }
    uint64_t v8 = v6;
    uint64_t v9 = IOMallocZeroData();
    if (v9)
    {
      uint64_t v10 = v9;
      v21[0] = v9;
      v21[1] = v8 | ((unint64_t)(v8 | (v8 << 16)) << 16);
      Commander = (AppleBCMWLANCommander *)AppleBCMWLANCore::getCommander(a2);
      uint64_t v7 = AppleBCMWLANCommander::runIOVarGet(Commander, (uint64_t)"ocl_status", (uint64_t)&kNoTxPayload, (uint64_t)v21, 0);
      if (v7)
      {
        if (v5 && CCLogStream::shouldLog())
        {
          CCLogStream::logAlert(v5, "[dk] %s@%d:Failed to collect OCL Status values \n", "cmdGetOCLStatus", 4033);
          if (!a1) {
            goto LABEL_35;
          }
          goto LABEL_17;
        }
        if (a1)
        {
LABEL_17:
          uint64_t v12 = 0;
LABEL_34:
          void *v4 = v12;
        }
LABEL_35:
        IOFreeData();
        return v7;
      }
      if (AppleBCMWLANCore::getFirmwareInterfaceVersion(a2) > 0xB)
      {
        AppleBCMWLANCore::getFirmwareInterfaceVersion(a2);
        int v13 = *(_DWORD *)(v10 + 4);
        int v14 = (char *)(v10 + 2);
      }
      else
      {
        LOWORD(v1AppleBCMWLANJoinAdapter::free(this - 3) = *(_WORD *)(v10 + 2);
        int v14 = (char *)(v10 + 4);
      }
      char v20 = *v14;
      int v15 = IO80211Print();
      int v16 = IO80211Print() + v15;
      if ((v13 & 2) != 0)
      {
        v16 += IO80211Print();
        if ((v13 & 4) == 0)
        {
LABEL_24:
          if ((v13 & 8) == 0) {
            goto LABEL_25;
          }
          goto LABEL_39;
        }
      }
      else if ((v13 & 4) == 0)
      {
        goto LABEL_24;
      }
      v16 += IO80211Print();
      if ((v13 & 8) == 0)
      {
LABEL_25:
        if ((v13 & 0x10) == 0) {
          goto LABEL_26;
        }
        goto LABEL_40;
      }
LABEL_39:
      v16 += IO80211Print();
      if ((v13 & 0x10) == 0)
      {
LABEL_26:
        if ((v13 & 0x20) == 0) {
          goto LABEL_27;
        }
        goto LABEL_41;
      }
LABEL_40:
      v16 += IO80211Print();
      if ((v13 & 0x20) == 0)
      {
LABEL_27:
        if ((v13 & 0x40) == 0) {
          goto LABEL_29;
        }
        goto LABEL_28;
      }
LABEL_41:
      v16 += IO80211Print();
      if ((v13 & 0x40) == 0)
      {
LABEL_29:
        int v17 = v16 + IO80211Print();
        if (v20)
        {
          v17 += IO80211Print();
          if ((v20 & 2) == 0)
          {
LABEL_31:
            if ((v20 & 0x80) == 0) {
              goto LABEL_32;
            }
LABEL_45:
            v17 += IO80211Print();
LABEL_32:
            int v18 = IO80211Print();
            if (a1)
            {
              uint64_t v12 = (v17 + v18);
              goto LABEL_34;
            }
            goto LABEL_35;
          }
        }
        else if ((v20 & 2) == 0)
        {
          goto LABEL_31;
        }
        v17 += IO80211Print();
        if ((v20 & 0x80) == 0) {
          goto LABEL_32;
        }
        goto LABEL_45;
      }
LABEL_28:
      v16 += IO80211Print();
      goto LABEL_29;
    }
    return 12;
  }
  else
  {
    if (v5 && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(v5, "[dk] %s@%d:OCL Feature is not Enabled on this platform\n", "cmdGetOCLStatus", 4003);
    }
    uint64_t v7 = 3758097095;
    if (a1) {
      void *v4 = 0;
    }
  }
  return v7;
}

uint64_t AppleBCMWLANCoreDbg::cmdGetMWSOclCoexChannelMap(uint64_t a1, AppleBCMWLANCore *a2)
{
  unsigned int v4 = (void *)(a1 + 245184);
  unsigned int v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  if (AppleBCMWLANCore::isOCLEnabled(a2))
  {
    uint64_t v14 = 0;
    __int16 v13 = 1;
    v12[0] = &v13;
    v12[1] = 0xA000A000ALL;
    Commander = (AppleBCMWLANCommander *)AppleBCMWLANCore::getCommander(a2);
    v11[0] = &v13;
    v11[1] = 10;
    uint64_t v7 = AppleBCMWLANCommander::runIOVarGet(Commander, (uint64_t)"mws_ocl_override", (uint64_t)v11, (uint64_t)v12, 0);
    if (v7)
    {
      if (v5 && CCLogStream::shouldLog())
      {
        CCLogStream::logAlert(v5, "[dk] %s@%d:Failed to get MWS OCL Coex Channel Map \n", "cmdGetMWSOclCoexChannelMap", 4133);
        if (!a1) {
          return v7;
        }
        goto LABEL_6;
      }
      if (a1)
      {
LABEL_6:
        uint64_t v8 = 0;
LABEL_14:
        void *v4 = v8;
      }
    }
    else
    {
      unsigned int v9 = IO80211Print();
      if (a1)
      {
        uint64_t v8 = v9;
        goto LABEL_14;
      }
    }
  }
  else
  {
    if (v5 && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(v5, "[dk] %s@%d:OCL Feature is not Enabled on this platform\n", "cmdGetMWSOclCoexChannelMap", 4107);
    }
    uint64_t v7 = 3758097095;
    if (a1) {
      void *v4 = 0;
    }
  }
  return v7;
}

uint64_t AppleBCMWLANCoreDbg::cmdStopDataPath(uint64_t a1, AppleBCMWLANCore *a2)
{
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  uint64_t v4 = *(void *)AppleBCMWLANCore::getBus(a2);
  (*(void (**)(void))(v4 + 616))();
  if (a1) {
    *(void *)(a1 + 245184) = 0;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdEnablePacketTimestamping(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 1848))(a2);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 256))(a2);
  if (a1) {
    *(void *)(a1 + 245184) = 0;
  }
  return result;
}

uint64_t AppleBCMWLANCoreDbg::cmdDisablePacketTimestamping(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 1848))(a2);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 264))(a2);
  if (a1) {
    *(void *)(a1 + 245184) = 0;
  }
  return result;
}

uint64_t AppleBCMWLANCoreDbg::cmdTstTimeSync(uint64_t a1, AppleBCMWLANCore *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  if (a1)
  {
    if (!strncasecmp((const char *)(a1 + 10), "tst_timesync=", 0xDuLL))
    {
      IO80211CoreDbg::parseUInt32FromCMD();
      uint64_t v6 = *(void *)AppleBCMWLANCore::getBus(a2);
      (*(void (**)(void))(v6 + 504))();
      uint64_t v5 = IO80211Print();
    }
    else
    {
      uint64_t v5 = 0;
    }
    void *v4 = v5;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdTimeSyncInfo(uint64_t a1, AppleBCMWLANCore *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  uint64_t v5 = *(void *)AppleBCMWLANCore::getBus(a2);
  unsigned int v6 = (*(uint64_t (**)(void))(v5 + 512))();
  if (a1) {
    void *v4 = v6;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdIfCounters(uint64_t a1, OSDictionary *a2)
{
  ((void (*)(OSDictionary *))a2->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(a2);
  uint64_t result = AppleBCMWLANCore::issueIfCounterIOVar(a2, 0);
  if (a1) {
    *(void *)(a1 + 245184) = 0;
  }
  return result;
}

uint64_t AppleBCMWLANCoreDbg::cmdGetRingSize(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a1 + 245184);
  (*(void (**)(uint64_t))(*(void *)a2 + 1848))(a2);
  unsigned int v4 = IO80211Print();
  if (a1) {
    *uint64_t v3 = v4;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdSkywalkDump(uint64_t a1, uint64_t a2)
{
  unsigned int v9 = (void *)(a1 + 245184);
  (*(void (**)(uint64_t))(*(void *)a2 + 1848))(a2);
  unsigned int v3 = IO80211Print();
  uint64_t v4 = 0;
  do
  {
    uint64_t v11 = 0;
    uint64_t v5 = (IOService *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 1888))(a2, v4);
    if (v5)
    {
      unsigned int v6 = (IO80211SkywalkInterface *)v5;
      acquireProperty<OSString>(v5, "IO80211InterfaceRole", &v11, 0, "IOService");
      IO80211SkywalkInterface::getInterfaceId(v6);
      if (v11) {
        OSString::getCStringNoCopy(v11);
      }
      int v7 = v3 + IO80211Print();
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)v6 + 1072))(v6);
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)v6 + 1080))(v6);
      unsigned int v3 = v7 + IO80211Print();
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)v6 + 1048))(v6);
      if (v11) {
        ((void (*)(OSString *))v11->release)(v11);
      }
    }
    uint64_t v4 = (v4 + 1);
  }
  while (v4 != 12);
  if (a1) {
    void *v9 = v3;
  }
  return 0;
}

uint64_t acquireProperty<OSString>(IOService *a1, const char *a2, OSMetaClassBase **a3, unint64_t a4, const char *a5)
{
  OSDictionaryPtr anObject = 0;
  uint64_t result = acquirePropertyWithString(a1, a2, (OSContainer **)&anObject, a4, a5);
  if (result)
  {
    int v7 = OSMetaClassBase::safeMetaCast(anObject, gOSStringMetaClass);
    if (v7)
    {
      *a3 = v7;
      return 1;
    }
    else
    {
      uint64_t result = (uint64_t)anObject;
      if (anObject)
      {
        ((void (*)(OSMetaClassBase *))anObject->release)(anObject);
        return 0;
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCoreDbg::cmdDumpColocatedCache(uint64_t a1, uint64_t a2)
{
  if (a1) {
    *(void *)(a1 + 245184) = 0;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdScanSuppress(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  (*(void (**)(uint64_t))(*(void *)a2 + 1848))(a2);
  int v5 = IO80211CoreDbg::parseUInt32FromCMD();
  (*(uint64_t (**)(uint64_t, BOOL))(*(void *)a2 + 1680))(a2, v5 != 0);
  unsigned int v6 = IO80211Print();
  if (a1) {
    void *v4 = v6;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdMloStatus(uint64_t a1, AppleBCMWLANCore *a2)
{
  uint64_t v4 = (void *)(a1 + 245184);
  if (a1) {
    int v5 = *(char **)(a1 + 245208);
  }
  else {
    int v5 = 0;
  }
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  if (AppleBCMWLANCore::featureFlagIsBitSet(a2, 115))
  {
    unsigned int v6 = *(AppleBCMWLAN11beAdapter **)(*((void *)a2 + 9) + 5592);
    if (v6) {
      AppleBCMWLAN11beAdapter::dumpMloStatus(v6, v5);
    }
  }
  if (a1) {
    void *v4 = 0;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdForceLPSCForNDDForActive(uint64_t a1, AppleBCMWLANCore *a2)
{
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  char v4 = IO80211CoreDbg::parseUInt32FromCMD() != 0;
  uint64_t NDDAdapter = AppleBCMWLANCore::getNDDAdapter(a2);
  AppleBCMWLANNearbyDeviceDiscoveryAdapter::dbgForceLPSCForNDD(NDDAdapter, v4);
  if (a1) {
    *(void *)(a1 + 245184) = 0;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdSetNDDTimeoutForActive(uint64_t a1, AppleBCMWLANCore *a2)
{
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  int v4 = IO80211CoreDbg::parseSInt32FromCMD();
  uint64_t NDDAdapter = AppleBCMWLANCore::getNDDAdapter(a2);
  AppleBCMWLANNearbyDeviceDiscoveryAdapter::dbgSetNDDTimeoutMsForActive(NDDAdapter, v4);
  if (a1) {
    *(void *)(a1 + 245184) = 0;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdSetNDDNumReports(uint64_t a1, AppleBCMWLANCore *a2)
{
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  int v4 = IO80211CoreDbg::parseSInt32FromCMD();
  uint64_t NDDAdapter = AppleBCMWLANCore::getNDDAdapter(a2);
  AppleBCMWLANNearbyDeviceDiscoveryAdapter::dbgSetNDDNumReports(NDDAdapter, v4);
  if (a1) {
    *(void *)(a1 + 245184) = 0;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdSetBTCoexMode(uint64_t a1, void *a2)
{
  (*(void (**)(void *))(*a2 + 1848))(a2);
  int v6 = IO80211CoreDbg::parseUInt32FromCMD();
  v5[0] = &v6;
  v5[1] = 4;
  uint64_t result = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(a2[9] + 5416), (uint64_t)"btc_mode", (uint64_t)v5, 0, 0);
  if (a1)
  {
    if (!result) {
      *(void *)(a1 + 245184) = 0;
    }
  }
  return result;
}

uint64_t AppleBCMWLANCoreDbg::cmdGetBTCoexMode(uint64_t a1, void *a2)
{
  int v4 = (void *)(a1 + 245184);
  (*(void (**)(void *))(*a2 + 1848))(a2);
  int v15 = 0;
  v14[0] = &v15;
  v14[1] = 0x400040004;
  int v5 = *(AppleBCMWLANCommander **)(a2[9] + 5416);
  v13[0] = &v15;
  v13[1] = 4;
  uint64_t v6 = AppleBCMWLANCommander::runIOVarGet(v5, (uint64_t)"btc_mode", (uint64_t)v13, (uint64_t)v14, 0);
  if (v15 >= 7u || BYTE1(v15) >= 7u)
  {
    IO80211Print();
    return 0;
  }
  else
  {
    uint64_t v7 = v6;
    uint64_t v8 = IO80211Print();
    uint64_t v9 = IO80211Print() + v8;
    int v10 = v9 + IO80211Print();
    int v11 = IO80211Print();
    if (a1) {
      void *v4 = (v10 + v11);
    }
  }
  return v7;
}

uint64_t AppleBCMWLANCoreDbg::cmdGetMinBTRSSI(uint64_t a1, void *a2)
{
  int v4 = (void *)(a1 + 245184);
  (*(void (**)(void *))(*a2 + 1848))(a2);
  int v10 = 0;
  v11[0] = &v10;
  v11[1] = 0x400040004;
  int v5 = *(AppleBCMWLANCommander **)(a2[9] + 5416);
  v9[0] = &v10;
  v9[1] = 4;
  uint64_t v6 = AppleBCMWLANCommander::runIOVarGet(v5, (uint64_t)"btc_btrssi_avg", (uint64_t)v9, (uint64_t)v11, 0);
  unsigned int v7 = IO80211Print();
  if (a1) {
    void *v4 = v7;
  }
  return v6;
}

uint64_t AppleBCMWLANCoreDbg::cmdGetScanSuppress(uint64_t a1, void *a2)
{
  int v4 = (void *)(a1 + 245184);
  int v5 = (CCLogStream *)(*(uint64_t (**)(void *))(*a2 + 1848))(a2);
  int v12 = 0;
  v11[0] = &v12;
  v11[1] = 0x400040004;
  uint64_t v6 = *(AppleBCMWLANCommander **)(a2[9] + 5416);
  v10[0] = &v12;
  v10[1] = 4;
  uint64_t v7 = AppleBCMWLANCommander::runIOCtlGet(v6, 115, (uint64_t)v10, (uint64_t)v11, 0);
  if (v7)
  {
    if (v5 && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(v5, "[dk] %s@%d:Unable to get scansuppress state %d: %d\n", "cmdGetScanSuppress", 4573, v12, v7);
    }
  }
  else
  {
    unsigned int v8 = IO80211Print();
    if (a1) {
      void *v4 = v8;
    }
  }
  return v7;
}

uint64_t AppleBCMWLANCoreDbg::cmdGetLimAggPolicy(uint64_t a1, void *a2)
{
  int v4 = (void *)(a1 + 245184);
  (*(void (**)(void *))(*a2 + 1848))(a2);
  int v10 = 0;
  v11[0] = &v10;
  v11[1] = 0x400040004;
  int v5 = *(AppleBCMWLANCommander **)(a2[9] + 5416);
  v9[0] = &v10;
  v9[1] = 4;
  uint64_t v6 = AppleBCMWLANCommander::runIOVarGet(v5, (uint64_t)"btc_lim_agg_enab", (uint64_t)v9, (uint64_t)v11, 0);
  unsigned int v7 = IO80211Print();
  if (a1) {
    void *v4 = v7;
  }
  return v6;
}

uint64_t AppleBCMWLANCoreDbg::cmdSetLimAggPolicy(uint64_t a1, void *a2)
{
  int v4 = (void *)(a1 + 245184);
  (*(void (**)(void *))(*a2 + 1848))(a2);
  if (!AppleBCMWLANNetAdapter::isLimitedAggregationSupported(*(AppleBCMWLANCore ****)(a2[9] + 5600)))
  {
    LODWORD(v6) = IO80211Print();
    uint64_t result = 0;
    uint64_t v6 = v6;
    if (!a1) {
      return result;
    }
    goto LABEL_5;
  }
  int v8 = IO80211CoreDbg::parseUInt32FromCMD();
  v7[0] = &v8;
  v7[1] = 4;
  uint64_t result = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(a2[9] + 5416), (uint64_t)"btc_lim_agg_enab", (uint64_t)v7, 0, 0);
  uint64_t v6 = 0;
  if (a1) {
LABEL_5:
  }
    void *v4 = v6;
  return result;
}

uint64_t AppleBCMWLANCoreDbg::htSisoOnly(uint64_t a1, void *a2)
{
  int v4 = (void *)(a1 + 245184);
  (*(void (**)(void *))(*a2 + 1848))(a2);
  AppleBCMWLANPowerManager::getHtSisoOnly(*(AppleBCMWLANPowerManager **)(a2[9] + 5528));
  unsigned int v5 = IO80211Print();
  if (a1) {
    void *v4 = v5;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::injectBssTransEvent(uint64_t a1, AppleBCMWLANCore *a2)
{
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  uint64_t v4 = IOMallocZeroData();
  if (!v4) {
    return 12;
  }
  uint64_t v5 = v4;
  *(_DWORD *)(v4 + 8) = 7;
  *(_DWORD *)(v4 + 2forEachAppleBCMWLANReturnCodes((uint64_t (*)(uint64_t, void, void))printRetCodeName, 0) = 24;
  *(unsigned char *)(v4 + 51) |= 1u;
  *(unsigned char *)(v4 + 49) = 7;
  *(_WORD *)(v4 + 55) = 3636;
  *(unsigned char *)(v4 + 68) = IO80211CoreDbg::parseUInt32FromCMD();
  if (AppleBCMWLANCore::getNetAdapter(a2))
  {
    uint64_t NetAdapter = AppleBCMWLANCore::getNetAdapter(a2);
    AppleBCMWLANNetAdapter::handleBssTransEvent(NetAdapter, v5);
  }
  if (a1) {
    *(void *)(a1 + 245184) = 0;
  }
  IOFreeData();
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::injectBeaconMiti(uint64_t a1, AppleBCMWLANCore *a2)
{
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  uint64_t v12 = 0;
  __int16 v13 = &v12;
  uint64_t v14 = 0x5802000000;
  int v15 = __Block_byref_object_copy_;
  int v16 = __Block_byref_object_dispose_;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  DWORD1(v17) = 188;
  HIDWORD(v17) = IO80211CoreDbg::parseUInt32FromCMD();
  uint64_t NetAdapter = (AppleBCMWLANNetAdapter *)AppleBCMWLANCore::getNetAdapter(a2);
  AppleBCMWLANNetAdapter::getBeaconMuteMitigationVersion(NetAdapter);
  *((_DWORD *)v13 + 15) = 8;
  if (AppleBCMWLANCore::getBssManager(a2))
  {
    BssManager = (AppleBCMWLANBssManager *)AppleBCMWLANCore::getBssManager(a2);
    if (AppleBCMWLANBssManager::getCurrentBSS(BssManager))
    {
      uint64_t v6 = (AppleBCMWLANBssManager *)AppleBCMWLANCore::getBssManager(a2);
      uint64_t CurrentBSS = AppleBCMWLANBssManager::getCurrentBSS(v6);
      (*(void (**)(uint64_t, uint64_t *))(*(void *)CurrentBSS + 136))(CurrentBSS, v13 + 8);
    }
  }
  if (AppleBCMWLANCore::getNetAdapter(a2))
  {
    uint64_t v8 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a2 + 88))(a2);
    uint64_t v9 = (IODispatchQueue *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 168))(v8);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    void v11[2] = ___ZN19AppleBCMWLANCoreDbg16injectBeaconMitiEP24apple80211_debug_commandP16AppleBCMWLANCore_block_invoke;
    void v11[3] = &__block_descriptor_tmp_437;
    _OWORD v11[4] = &v12;
    v11[5] = a2;
    IODispatchQueue::DispatchAsync(v9, v11);
  }
  if (a1) {
    *(void *)(a1 + 245184) = 0;
  }
  _Block_object_dispose(&v12, 8);
  return 0;
}

__n128 __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  long long v3 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v3;
  *(__n128 *)(a1 + 4forEachAppleBCMWLANReturnCodes((uint64_t (*)(uint64_t, void, void))printRetCodeName, 0) = result;
  return result;
}

uint64_t ___ZN19AppleBCMWLANCoreDbg16injectBeaconMitiEP24apple80211_debug_commandP16AppleBCMWLANCore_block_invoke(uint64_t a1)
{
  uint64_t NetAdapter = AppleBCMWLANCore::getNetAdapter(*(AppleBCMWLANCore **)(a1 + 40));
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8) + 40;
  return AppleBCMWLANNetAdapter::handleBeacomMuteMitigation(NetAdapter, v3);
}

uint64_t AppleBCMWLANCoreDbg::injectDeauth(uint64_t a1, AppleBCMWLANCore *a2)
{
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x5802000000;
  uint64_t v14 = __Block_byref_object_copy_;
  int v15 = __Block_byref_object_dispose_;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  DWORD1(v16) = 6;
  if (AppleBCMWLANCore::getBssManager(a2))
  {
    BssManager = (AppleBCMWLANBssManager *)AppleBCMWLANCore::getBssManager(a2);
    if (AppleBCMWLANBssManager::getCurrentBSS(BssManager))
    {
      uint64_t v5 = (AppleBCMWLANBssManager *)AppleBCMWLANCore::getBssManager(a2);
      uint64_t CurrentBSS = AppleBCMWLANBssManager::getCurrentBSS(v5);
      (*(void (**)(uint64_t, uint64_t *))(*(void *)CurrentBSS + 136))(CurrentBSS, v12 + 8);
    }
  }
  uint64_t v7 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a2 + 88))(a2);
  uint64_t v8 = (IODispatchQueue *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 168))(v7);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  void v10[2] = ___ZN19AppleBCMWLANCoreDbg12injectDeauthEP24apple80211_debug_commandP16AppleBCMWLANCore_block_invoke;
  unsigned char v10[4] = &v11;
  void v10[5] = a2;
  void v10[3] = &__block_descriptor_tmp_440;
  IODispatchQueue::DispatchAsync(v8, v10);
  if (a1) {
    *(void *)(a1 + 245184) = 0;
  }
  _Block_object_dispose(&v11, 8);
  return 0;
}

uint64_t ___ZN19AppleBCMWLANCoreDbg12injectDeauthEP24apple80211_debug_commandP16AppleBCMWLANCore_block_invoke(uint64_t a1)
{
  return AppleBCMWLANCore::handleDeauthData(*(IO80211Controller **)(a1 + 40), *(void *)(*(void *)(a1 + 32) + 8) + 40);
}

uint64_t AppleBCMWLANCoreDbg::cmdMissingCCLogFiles(uint64_t a1, AppleBCMWLANCore *a2)
{
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  int v4 = IO80211CoreDbg::parseUInt32FromCMD();
  uint64_t Bus = AppleBCMWLANCore::getBus(a2);
  AppleBCMWLANBusInterface::setCCLogDebugFlags(Bus, v4);
  if (a1) {
    *(void *)(a1 + 245184) = 0;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdEnableDisableAdaptiveRoaming(uint64_t a1, uint64_t a2)
{
  if (a1) {
    *(void *)(a1 + 245184) = 0;
  }
  return 3758097095;
}

uint64_t AppleBCMWLANCoreDbg::cmdEnableDisableGarp(uint64_t a1, uint64_t a2)
{
  if (a1) {
    *(void *)(a1 + 245184) = 0;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdConfigureBcnlossCoreCapture(uint64_t a1, AppleBCMWLANCore *a2)
{
  int v4 = (void *)(a1 + 245184);
  (*(void (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  size_t v5 = strlen((const char *)(a1 + 10));
  if (!strncmp((const char *)(a1 + 10), "bcnlosscc", v5))
  {
    AppleBCMWLANCore::getBcnLossCCState(a2);
  }
  else
  {
    if (!strncmp((const char *)(a1 + 20), "enable,", 7uLL)) {
      unsigned int v6 = IO80211CoreDbg::parseUInt32FromCMD();
    }
    else {
      unsigned int v6 = 5;
    }
    AppleBCMWLANCore::dbgConfigureBcnlossCoreCapture(a2, v6);
  }
  unsigned int v7 = IO80211Print();
  if (a1) {
    void *v4 = v7;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdConfigureTrafficEngineering(uint64_t a1, uint64_t a2)
{
  if (a1) {
    *(void *)(a1 + 245184) = 0;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdGetRoamInfo(uint64_t a1, void *a2)
{
  int v4 = (void *)(a1 + 245184);
  (*(void (**)(void *))(*a2 + 1848))(a2);
  size_t v5 = strlen((const char *)(a1 + 10));
  if (!strncmp((const char *)(a1 + 10), "roamInfo", v5))
  {
    uint64_t v14 = v4;
    int v8 = 0;
    LODWORD(v6) = 0;
    uint64_t v9 = -1800;
    do
    {
      int v10 = IO80211Print();
      int v11 = v6 + v10 + IO80211Print();
      stringFromReason(19, *(_DWORD *)(a2[9] + v9 + 14492));
      int v12 = v11 + IO80211Print();
      int v13 = v12 + IO80211Print();
      uint64_t v6 = v13 + IO80211Print();
      ++v8;
      v9 += 600;
    }
    while (v9);
    int v4 = v14;
    if (a1) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = 0;
    if (a1) {
LABEL_3:
    }
      void *v4 = v6;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdEnableDisableCongestionControl(uint64_t a1, uint64_t a2)
{
  if (a1) {
    *(void *)(a1 + 245184) = 0;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdTrafficEngPacketRateConfig(uint64_t a1, uint64_t a2)
{
  if (a1) {
    *(void *)(a1 + 245184) = 0;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdConfigureDequeueRatio(uint64_t a1, uint64_t a2)
{
  if (a1) {
    *(void *)(a1 + 245184) = 0;
  }
  return 0;
}

uint64_t AppleBCMWLANCoreDbg::cmdGetPktLifetime(uint64_t a1, void *a2)
{
  int v4 = (CCLogStream *)(*(uint64_t (**)(void *))(*a2 + 1848))(a2);
  uint64_t v12 = 0;
  if (!strncmp((const char *)(a1 + 19), "be", 2uLL))
  {
    int v5 = 0;
  }
  else if (!strncmp((const char *)(a1 + 19), "bk", 2uLL))
  {
    int v5 = 1;
  }
  else
  {
    int v5 = 2;
    if (strncmp((const char *)(a1 + 19), "vi", 2uLL))
    {
      if (!strncmp((const char *)(a1 + 19), "vo", 2uLL)) {
        int v5 = 3;
      }
      else {
        int v5 = 0;
      }
    }
  }
  LODWORD(v12) = v5;
  v11[0] = &v12;
  v11[1] = 0x800080008;
  uint64_t v6 = *(AppleBCMWLANCommander **)(a2[9] + 5416);
  v10[0] = &v12;
  v10[1] = 8;
  uint64_t v7 = AppleBCMWLANCommander::runIOVarGet(v6, (uint64_t)"lifetime", (uint64_t)v10, (uint64_t)v11, 0);
  if (v7)
  {
    if (v4 && CCLogStream::shouldLog())
    {
      int v8 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a2 + 112))(a2, v7);
      CCLogStream::logAlert(v4, "[dk] %s@%d: Error: Unable to get packet lifetime. ret %s\n", "cmdGetPktLifetime", 5054, v8);
    }
  }
  else
  {
    v10[0] = v12;
    IO80211CoreDbg::pktLifetimePrint();
  }
  if (a1) {
    *(void *)(a1 + 245184) = 0;
  }
  return v7;
}

uint64_t AppleBCMWLANCoreDbg::cmdGetBTMRssiThreshold(uint64_t a1, void *a2)
{
  int v4 = (CCLogStream *)(*(uint64_t (**)(void *))(*a2 + 1848))(a2);
  int v11 = 0;
  v10[0] = &v11;
  v10[1] = 0x400040004;
  int v5 = *(AppleBCMWLANCommander **)(a2[9] + 5416);
  v9[0] = &v11;
  v9[1] = 4;
  uint64_t v6 = AppleBCMWLANCommander::runIOVarGet(v5, (uint64_t)"wnm_btm_rssi_thresh", (uint64_t)v9, (uint64_t)v10, 0);
  if (v6)
  {
    if (v4 && CCLogStream::shouldLog())
    {
      uint64_t v7 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a2 + 112))(a2, v6);
      CCLogStream::logAlert(v4, "[dk] %s@%d: Error: Failed to Get BTM Rssi Threshold :  Ret %s\n", "cmdGetBTMRssiThreshold", 5078, v7);
    }
  }
  else
  {
    IO80211CoreDbg::btmThresholdCmdPrint();
  }
  if (a1) {
    *(void *)(a1 + 245184) = 0;
  }
  return v6;
}

uint64_t AppleBCMWLANCoreDbg::cmdSOI(uint64_t a1, void *a2)
{
  int v4 = (CCLogStream *)(*(uint64_t (**)(void *))(*a2 + 1848))(a2);
  memset(v10, 0, sizeof(v10));
  v11[0] = v10;
  v11[1] = 0x1800180018;
  int v5 = *(AppleBCMWLANCommander **)(a2[9] + 5416);
  v9[0] = v10;
  v9[1] = 24;
  uint64_t v6 = AppleBCMWLANCommander::runIOVarGet(v5, (uint64_t)"pm2_sleep_ret_ext", (uint64_t)v9, (uint64_t)v11, 0);
  if (v6)
  {
    if (v4 && CCLogStream::shouldLog())
    {
      uint64_t v7 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a2 + 112))(a2, v6);
      CCLogStream::logAlert(v4, "[dk] %s@%d:Error: cannot get FRTS state : ret %x: %s\n", "cmdSOI", 5100, v6, v7);
    }
  }
  else
  {
    IO80211CoreDbg::soiCmdPrint();
  }
  if (a1) {
    *(void *)(a1 + 245184) = 0;
  }
  return v6;
}

uint64_t AppleBCMWLANCoreDbg::cmdPwrScanStats(uint64_t a1, AppleBCMWLANCore *a2)
{
  int v4 = (void *)(a1 + 245184);
  int v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  uint64_t v6 = IOMallocZeroData();
  if (v6)
  {
    uint64_t v7 = (_DWORD *)v6;
    AppleBCMWLANCore::featureFlagClearBit(a2, 24);
    unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v15[0] = v8;
    v15[1] = v8;
    BYTE4(v15[0]) = 0;
    LODWORD(v15[0]) = 13;
    if (AppleBCMWLANCore::isAssociated(a2))
    {
      uint64_t PowerStats = AppleBCMWLANCore::getPowerStats(a2, v7, (int *)v15);
      if (PowerStats)
      {
        uint64_t v10 = PowerStats;
        if (v5 && CCLogStream::shouldLog())
        {
          uint64_t v14 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)a2 + 112))(a2, v10);
          CCLogStream::logAlert(v5, "[dk] %s@%d: Error: Failed to Get Scan Power Stats:  Ret %s\n", "cmdPwrScanStats", 5129, v14);
          if (!a1) {
            goto LABEL_18;
          }
          goto LABEL_7;
        }
        if (a1)
        {
LABEL_7:
          uint64_t v11 = 0;
LABEL_17:
          void *v4 = v11;
        }
LABEL_18:
        IOFreeData();
        return v10;
      }
      if (!strncmp((const char *)(a1 + 20), "maincore", 8uLL)
        || !strncmp((const char *)(a1 + 20), "auxcore", 7uLL)
        || !strncmp((const char *)(a1 + 20), "scancore", 8uLL))
      {
        IO80211CoreDbg::scanStatsPrint();
        unsigned int v12 = 0;
LABEL_15:
        uint64_t v10 = 0;
        if (a1)
        {
          uint64_t v11 = v12;
          goto LABEL_17;
        }
        goto LABEL_18;
      }
      (*(void (**)(AppleBCMWLANCore *, void))(*(void *)a2 + 112))(a2, 0);
    }
    unsigned int v12 = IO80211Print();
    goto LABEL_15;
  }
  return 0;
}

void _GLOBAL__sub_I_AppleBCMWLANCoreDbg_cpp()
{
  kNullRange = 0;
}

uint64_t AppleBCMWLANBusSkywalk::init(AppleBCMWLANBusSkywalk *this)
{
  return 1;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusSkywalk::init(AppleBCMWLANBusSkywalk *this)
{
  return 1;
}

uint64_t AppleBCMWLANBusSkywalk::registerSkywalkInterface()
{
  return 3758097084;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusSkywalk::registerSkywalkInterface()
{
  return 3758097084;
}

uint64_t AppleBCMWLANBusSkywalk::collectAdapterStats(AppleBCMWLANBusSkywalk *this, char *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  return a5;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusSkywalk::collectAdapterStats(AppleBCMWLANBusSkywalk *this, char *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  return a5;
}

uint64_t AppleBCMWLANBusSkywalk::completeRegistration(AppleBCMWLANBusSkywalk *this)
{
  return IOLog("%s[%d] ERROR: Not Implemented\n", "completeRegistration", 57);
}

uint64_t non-virtual thunk to'AppleBCMWLANBusSkywalk::completeRegistration(AppleBCMWLANBusSkywalk *this)
{
  return IOLog("%s[%d] ERROR: Not Implemented\n", "completeRegistration", 57);
}

uint64_t AppleBCMWLANBusSkywalk::findFlowIdWithFlowHash()
{
  return 0xFFFFLL;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusSkywalk::findFlowIdWithFlowHash()
{
  return 0xFFFFLL;
}

uint64_t AppleBCMWLANBusSkywalk::setCommonLogger(AppleBCMWLANBusSkywalk *this, OSObject *a2)
{
  return IOLog("%s[%d] ERROR: Not Implemented\n", "setCommonLogger", 74);
}

uint64_t non-virtual thunk to'AppleBCMWLANBusSkywalk::setCommonLogger(AppleBCMWLANBusSkywalk *this, OSObject *a2)
{
  return IOLog("%s[%d] ERROR: Not Implemented\n", "setCommonLogger", 74);
}

OSObject *AppleBCMWLANPCIeSkywalk::withProviderAndCapacity(OSObject *this, AppleBCMWLANBusInterfacePCIe *a2, int a3, int a4, int a5, int a6, CCLogStream *a7, CCLogStream *a8, CCFaultReporter *a9)
{
  int v15 = (int)a2;
  pObject = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANPCIeSkywalkMetaClass, &pObject)) {
    return 0;
  }
  long long v17 = pObject;
  if (pObject
    && (AppleBCMWLANPCIeSkywalk::initWithProviderAndCapacity((AppleBCMWLANPCIeSkywalk *)pObject, this, v15, a3, a4, a5, a6, a7, a8) & 1) == 0)
  {
    ((void (*)(OSObject *))v17->release)(v17);
    return 0;
  }
  return v17;
}

uint64_t AppleBCMWLANPCIeSkywalk::initWithProviderAndCapacity(AppleBCMWLANPCIeSkywalk *this, OSObject *a2, int a3, int a4, int a5, int a6, int a7, CCLogStream *a8, CCFaultReporter *a9)
{
  int v20 = 0;
  uint64_t result = AppleBCMWLANBusSkywalk::init(this);
  if (result)
  {
    uint64_t result = IOMallocZeroTyped();
    *((void *)this + 7) = result;
    if (result)
    {
      *(void *)(*((void *)this + 7) + 16forEachAppleBCMWLANReturnCodes((uint64_t (*)(uint64_t, void, void))printRetCodeName, 0) = IOLockAlloc();
      uint64_t v18 = *((void *)this + 7);
      if (*(void *)(v18 + 160))
      {
        *(_DWORD *)(v18 + 24) = a3;
        *(_DWORD *)(*((void *)this + 7) + 28) = a4;
        *(_DWORD *)(*((void *)this + 7) + 32) = a5;
        *(_DWORD *)(*((void *)this + 7) + 36) = a6;
        *(_DWORD *)(*((void *)this + 7) + 4forEachAppleBCMWLANReturnCodes((uint64_t (*)(uint64_t, void, void))printRetCodeName, 0) = a7;
        *(void *)(*((void *)this + 7) + 48) = a2;
        **((void **)this + 7) = a8;
        long long v19 = (void *)*((void *)this + 7);
        if (*v19)
        {
          (*(void (**)(void))(*(void *)*v19 + 8))(*v19);
          long long v19 = (void *)*((void *)this + 7);
        }
        void v19[2] = a9;
        IOParseBootArgNumber("wlan.skywalk.ktrace", &fKernelTraceEnabled, 1);
        *(unsigned char *)(*((void *)this + 7) + 129) = 0;
        if (IOParseBootArgNumber("wlan.txcomp.debug", &v20, 4)) {
          *(unsigned char *)(*((void *)this + 7) + 129) = 1;
        }
        *(void *)(*((void *)this + 7) + 12forEachAppleBCMWLANReturnCodes((uint64_t (*)(uint64_t, void, void))printRetCodeName, 0) = 0;
        *(_DWORD *)(*((void *)this + 7) + 476) = 0;
        *(_DWORD *)(*((void *)this + 7) + 48forEachAppleBCMWLANReturnCodes((uint64_t (*)(uint64_t, void, void))printRetCodeName, 0) = 0;
        *(unsigned char *)(*((void *)this + 7) + 484) = 0;
        return AppleBCMWLANPCIeSkywalk::allocSkywalkCommonResources(this, a2) == 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANPCIeSkywalk::allocSkywalkCommonResources(AppleBCMWLANPCIeSkywalk *this, OSObject *a2)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v4 = *((void *)this + 7);
  uint64_t v5 = *(void *)(v4 + 36);
  int v16 = v5;
  uint64_t v17 = v5;
  int v18 = 1;
  HIDWORD(v19) = 805306368;
  if (*(void *)(v4 + 56))
  {
    if (*(void *)v4)
    {
      int shouldLog = CCLogStream::shouldLog();
      uint64_t v4 = *((void *)this + 7);
      if (shouldLog)
      {
        CCLogStream::logAlert(*(CCLogStream **)v4, "[dk] %s@%d:common resource packet pool already allocated, skip to allocate again\n", "allocSkywalkCommonResources", 327);
        uint64_t v4 = *((void *)this + 7);
      }
    }
  }
  else
  {
    *(void *)(*((void *)this + 7) + 56) = AppleBCMWLANPCIeSkywalkPacketPool::withName((uint64_t)"AppleBCMWLANSkywalkPool", *(void *)(v4 + 48), *(void *)v4, *(void *)(v4 + 16), (uint64_t)&v16);
    uint64_t v4 = *((void *)this + 7);
    if (!*(void *)(v4 + 56))
    {
      uint64_t v7 = 3758097086;
      if (*(void *)v4 && CCLogStream::shouldLog()) {
        CCLogStream::logEmergency(**((CCLogStream ***)this + 7), "[dk] %s@%d: Unable to allocate Skywalk Tx pool\n");
      }
      return v7;
    }
  }
  if (*(void *)(v4 + 64))
  {
    if (*(void *)v4 && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(**((CCLogStream ***)this + 7), "[dk] %s@%d:common resource rx comp already allocated, skip to allocate again\n", "allocSkywalkCommonResources", 338);
    }
    goto LABEL_10;
  }
  uint64_t v9 = OSMetaClassBase::safeMetaCast(*(const OSMetaClassBase **)(v4 + 48), (const OSMetaClass *)gAppleBCMWLANBusInterfacePCIeMetaClass);
  *(void *)(*((void *)this + 7) + 64) = AppleBCMWLANPCIeSkywalkRxSubmissionQueue::withProviderAndQueueInfoAndPool((AppleBCMWLANPCIeSkywalkRxSubmissionQueue *)v9, a2, 0, 0, *(_DWORD *)(*((void *)this + 7) + 32), *(IOUserNetworkPacketBufferPool **)(*((void *)this + 7) + 56), **((AppleBCMWLANPCIeSkywalkPacketPool ***)this + 7), *(CCLogStream **)(*((void *)this + 7) + 16), v15);
  uint64_t v10 = *((void *)this + 7);
  if (*(void *)(v10 + 64))
  {
    uint64_t ActionRxSubmissionQueueDataAvailable = AppleBCMWLANBusInterfacePCIe::CreateActionRxSubmissionQueueDataAvailable(*(OSObject **)(v10 + 48), 0, (OSAction **)(v10 + 176));
    uint64_t v12 = *((void *)this + 7);
    if (ActionRxSubmissionQueueDataAvailable)
    {
      uint64_t v7 = ActionRxSubmissionQueueDataAvailable;
      if (*(void *)v12 && CCLogStream::shouldLog()) {
        CCLogStream::logEmergency(**((CCLogStream ***)this + 7), "[dk] %s@%d:Failed to allocate osaction RXSubmissionQueueDataAvailable, ret:%d\n");
      }
    }
    else
    {
      (*(void (**)(void, uint64_t))(**(void **)(v12 + 64) + 72))(*(void *)(v12 + 64), v12 + 184);
      uint64_t v13 = *((void *)this + 7);
      uint64_t v14 = *(IODataQueueDispatchSource **)(v13 + 184);
      if (v14)
      {
        IODataQueueDispatchSource::SetDataAvailableHandler(v14, *(OSAction **)(v13 + 176), 0);
LABEL_10:
        (*(void (**)(void))(**(void **)(*((void *)this + 7) + 48) + 80))(*(void *)(*((void *)this + 7) + 48));
        uint64_t v7 = 0;
        *(void *)(*((void *)this + 7) + 104) = IO80211TimerSource::allocWithParams();
        return v7;
      }
      uint64_t v7 = 3758097086;
      if (*(void *)v13 && CCLogStream::shouldLog()) {
        CCLogStream::logEmergency(**((CCLogStream ***)this + 7), "[dk] %s@%d:Faild to copy dataQueue\n");
      }
    }
  }
  else
  {
    uint64_t v7 = 3758097086;
    if (*(void *)v10 && CCLogStream::shouldLog()) {
      CCLogStream::logEmergency(**((CCLogStream ***)this + 7), "[dk] %s@%d:rx submission queue alloc fail\n");
    }
  }
  return v7;
}

uint64_t AppleBCMWLANPCIeSkywalk::allocSkywalkMonitorResources(AppleBCMWLANPCIeSkywalk *this, OSObject *a2)
{
  uint64_t v9 = 0x3000000000000000;
  uint64_t v10 = 0;
  long long v8 = xmmword_1003056F0;
  IOLockLock(*(IOLock **)(*((void *)this + 7) + 160));
  uint64_t v3 = *((void *)this + 7);
  if (*(void *)(v3 + 136))
  {
    if (*(void *)v3)
    {
      int shouldLog = CCLogStream::shouldLog();
      uint64_t v3 = *((void *)this + 7);
      if (shouldLog)
      {
        CCLogStream::logAlert(*(CCLogStream **)v3, "[dk] %s@%d:Monitor resource packet pool already allocated, skip to allocate again\n", "allocSkywalkMonitorResources", 285);
        uint64_t v3 = *((void *)this + 7);
      }
    }
    goto LABEL_6;
  }
  *(void *)(*((void *)this + 7) + 136) = AppleBCMWLANPCIeSkywalkPacketPool::withName((uint64_t)"AppleBCMWLANSkywalkPoolMonitor", *(void *)(v3 + 48), *(void *)v3, *(void *)(v3 + 16), (uint64_t)&v8);
  uint64_t v3 = *((void *)this + 7);
  if (*(void *)(v3 + 136))
  {
LABEL_6:
    *(void *)(v3 + 144) = 0;
    (*(void (**)(void, uint64_t, void))(**(void **)(*((void *)this + 7) + 136) + 80))(*(void *)(*((void *)this + 7) + 136), *((void *)this + 7) + 144, 0);
    uint64_t v5 = 0;
    uint64_t v6 = (void *)*((void *)this + 7);
    if (!v6[18])
    {
      uint64_t v5 = 3758097086;
      if (*v6)
      {
        if (CCLogStream::shouldLog()) {
          CCLogStream::logEmergency(**((CCLogStream ***)this + 7), "[dk] %s@%d: Unable to allocate Skywalk monitor packet\n");
        }
      }
    }
    goto LABEL_12;
  }
  uint64_t v5 = 3758097086;
  if (*(void *)v3 && CCLogStream::shouldLog()) {
    CCLogStream::logEmergency(**((CCLogStream ***)this + 7), "[dk] %s@%d: Unable to allocate Skywalk monitor pool\n");
  }
LABEL_12:
  IOLockUnlock(*(IOLock **)(*((void *)this + 7) + 160));
  return v5;
}

uint64_t AppleBCMWLANPCIeSkywalk::lowLatencyRingCreateTimeout(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (*(void *)v2)
  {
    int shouldLog = CCLogStream::shouldLog();
    uint64_t v2 = *(void *)(a1 + 56);
    if (shouldLog)
    {
      CCLogStream::logAlert(*(CCLogStream **)v2, "[dk] %s@%d:Low latency ring create timeout occured %llu\n", "lowLatencyRingCreateTimeout", 705, *(void *)(v2 + 120));
      uint64_t v2 = *(void *)(a1 + 56);
    }
  }
  if (*(void *)(v2 + 120)
    || (int v4 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 48) + 600))(*(void *)(v2 + 48), v2 + 120), v2 = *(void *)(a1 + 56), !v4))
  {
    uint64_t result = CCFaultReporter::reportFault(*(CCFaultReporter **)(v2 + 16), 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANPCIeSkywalk.cpp", 0x2C9u, "lowLatencyRingCreateTimeout", 0, -469794010, 0);
    *(void *)(*(void *)(a1 + 56) + 12forEachAppleBCMWLANReturnCodes((uint64_t (*)(uint64_t, void, void))printRetCodeName, 0) = 0;
  }
  else
  {
    if (*(void *)v2)
    {
      int v5 = CCLogStream::shouldLog();
      uint64_t v2 = *(void *)(a1 + 56);
      if (v5)
      {
        CCLogStream::logCrit(*(CCLogStream **)v2, "[dk] %s@%d:Delaying Ring Creation Failure due to pending work ivars->fLLWRingCreationTimeoutEpoch %llu\n", "lowLatencyRingCreateTimeout", 708, *(void *)(v2 + 120));
        uint64_t v2 = *(void *)(a1 + 56);
      }
    }
    uint64_t v6 = *(uint64_t (**)(void))(**(void **)(v2 + 104) + 120);
    return v6();
  }
  return result;
}

void AppleBCMWLANPCIeSkywalk::freeSkywalkMonitorResources(AppleBCMWLANPCIeSkywalk *this)
{
  IOLockLock(*(IOLock **)(*((void *)this + 7) + 160));
  uint64_t v2 = (void *)*((void *)this + 7);
  if (!v2[17])
  {
    uint64_t v3 = (IOUserNetworkPacket *)v2[18];
    if (v3)
    {
      AppleBCMWLANPCIeSkywalkPacketPool::deallocatePacket(0, v3);
      *(void *)(*((void *)this + 7) + 144) = 0;
      uint64_t v2 = (void *)*((void *)this + 7);
      uint64_t v4 = v2[17];
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
        *(void *)(*((void *)this + 7) + 136) = 0;
        *(void *)(*((void *)this + 7) + 136) = 0;
        uint64_t v2 = (void *)*((void *)this + 7);
      }
    }
  }
  int v5 = (IOLock *)v2[20];
  IOLockUnlock(v5);
}

void AppleBCMWLANPCIeSkywalk::free(OSObject *this)
{
  meta = this[1].meta;
  if (meta)
  {
    if (meta->__vftable)
    {
      int shouldLog = CCLogStream::shouldLog();
      meta = this[1].meta;
      if (shouldLog)
      {
        CCLogStream::logAlert((CCLogStream *)meta->__vftable, "[dk] %s@%d:Enter ::free [%p]", "free", 415, this);
        meta = this[1].meta;
      }
    }
    uint64_t v4 = meta[2].__vftable;
    if (v4)
    {
      (*((void (**)(OSMetaClass_vtbl *))v4->getMetaClass + 25))(v4);
      (*((void (**)(OSMetaClass_vtbl *))this[1].meta[2].getMetaClass + 2))(this[1].meta[2].__vftable);
      this[1].meta[2].__vftable = 0;
      meta = this[1].meta;
    }
    metaClassPrivate = meta[1].metaClassPrivate;
    if (metaClassPrivate)
    {
      (*(void (**)(OSMetaClassPrivate *))(*(void *)metaClassPrivate + 16))(metaClassPrivate);
      this[1].meta[1].metaClassPrivate = 0;
      meta = this[1].meta;
    }
    uint64_t v6 = (IOLock *)meta[5].__vftable;
    if (v6)
    {
      IOLockFree(v6);
      meta = this[1].meta;
    }
    if (meta->__vftable)
    {
      (*((void (**)(OSMetaClass_vtbl *))meta->getMetaClass + 2))(meta->__vftable);
      this[1].meta->OSMetaClassBase::__vftable = 0;
      meta = this[1].meta;
    }
    meta[15].__vftable = 0;
    *(_OWORD *)&meta[14].__vftable = 0u;
    *(_OWORD *)&meta[14].meta = 0u;
    *(_OWORD *)&meta[13].__vftable = 0u;
    *(_OWORD *)&meta[13].meta = 0u;
    *(_OWORD *)&meta[12].__vftable = 0u;
    *(_OWORD *)&meta[12].meta = 0u;
    *(_OWORD *)&meta[11].__vftable = 0u;
    *(_OWORD *)&meta[11].meta = 0u;
    *(_OWORD *)&meta[10].__vftable = 0u;
    *(_OWORD *)&meta[10].meta = 0u;
    *(_OWORD *)&meta[9].__vftable = 0u;
    *(_OWORD *)&meta[9].meta = 0u;
    *(_OWORD *)&meta[8].__vftable = 0u;
    *(_OWORD *)&meta[8].meta = 0u;
    *(_OWORD *)&meta[7].__vftable = 0u;
    *(_OWORD *)&meta[7].meta = 0u;
    *(_OWORD *)&meta[6].__vftable = 0u;
    *(_OWORD *)&meta[6].meta = 0u;
    *(_OWORD *)&meta[5].__vftable = 0u;
    *(_OWORD *)&meta[5].meta = 0u;
    *(_OWORD *)&meta[4].__vftable = 0u;
    *(_OWORD *)&meta[4].meta = 0u;
    *(_OWORD *)&meta[3].__vftable = 0u;
    *(_OWORD *)&meta[3].meta = 0u;
    *(_OWORD *)&meta[2].__vftable = 0u;
    *(_OWORD *)&meta[2].meta = 0u;
    *(_OWORD *)&meta[1].__vftable = 0u;
    *(_OWORD *)&meta[1].meta = 0u;
    *(_OWORD *)&meta->__vftable = 0u;
    *(_OWORD *)&meta->meta = 0u;
    uint64_t v7 = this[1].meta;
    if (v7)
    {
      IOFree(v7, 0x1E8uLL);
      this[1].meta = 0;
    }
  }
  OSObject::free(this);
}

void non-virtual thunk to'AppleBCMWLANPCIeSkywalk::free(AppleBCMWLANPCIeSkywalk *this)
{
}

CCLogStream *AppleBCMWLANPCIeSkywalk::completeRegistration(AppleBCMWLANPCIeSkywalk *this, int a2)
{
  uint64_t v4 = *((void *)this + 7);
  uint64_t result = *(CCLogStream **)v4;
  if (*(void *)v4)
  {
    uint64_t result = (CCLogStream *)CCLogStream::shouldLog();
    uint64_t v4 = *((void *)this + 7);
    if (result)
    {
      uint64_t result = (CCLogStream *)CCLogStream::logInfo(*(CCLogStream **)v4, "[dk] %s@%d:Adding ifId: 0x%x\n", "completeRegistration", 445, a2);
      uint64_t v4 = *((void *)this + 7);
    }
  }
  *(_DWORD *)(v4 + 44) |= 1 << a2;
  return result;
}

CCLogStream *non-virtual thunk to'AppleBCMWLANPCIeSkywalk::completeRegistration(AppleBCMWLANPCIeSkywalk *this, int a2)
{
  return AppleBCMWLANPCIeSkywalk::completeRegistration((AppleBCMWLANPCIeSkywalk *)((char *)this - 40), a2);
}

uint64_t AppleBCMWLANPCIeSkywalk::registerSkywalkInterface(uint64_t a1, void *a2)
{
  uint64_t v4 = (OSMetaClass_vtbl *)a2[11];
  if (!v4) {
    uint64_t v4 = **(OSMetaClass_vtbl ***)(a1 + 56);
  }
  if (!*a2 || !a2[3] || !a2[5] || !a2[6])
  {
    unsigned int v28 = -536870911;
    goto LABEL_30;
  }
  unsigned int v28 = -536870212;
  int isLowLatencyEnabled = IO80211SkywalkInterface::isLowLatencyEnabled((IO80211SkywalkInterface *)*a2);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = 24;
  if (isLowLatencyEnabled) {
    uint64_t v7 = 28;
  }
  unsigned int v8 = *(_DWORD *)(v6 + v7);
  *(void *)a2[4] = *(void *)(v6 + 64);
  int InterfaceId = IO80211SkywalkInterface::getInterfaceId((IO80211SkywalkInterface *)*a2);
  if (a2[7])
  {
    uint64_t v10 = OSMetaClassBase::safeMetaCast(*(const OSMetaClassBase **)(*(void *)(a1 + 56) + 48), (const OSMetaClass *)gAppleBCMWLANBusInterfacePCIeMetaClass);
    *(void *)a2[7] = AppleBCMWLANPCIeSkywalkMulticastQueue::withProviderAndQueueInfo((AppleBCMWLANPCIeSkywalkMulticastQueue *)v10, (AppleBCMWLANBusInterfacePCIe *)*a2, **(IO80211SkywalkInterface ***)(a1 + 56), *(CCLogStream **)(*(void *)(a1 + 56) + 16), v11);
    if (*(void *)a2[7])
    {
      if (**(void **)(a1 + 56) && CCLogStream::shouldLog()) {
        CCLogStream::logInfo(**(CCLogStream ***)(a1 + 56), "[dk] %s@%d:mc queue %p\n", "registerSkywalkInterface", 478, *(const void **)a2[7]);
      }
      goto LABEL_14;
    }
LABEL_30:
    unsigned int v21 = *((unsigned __int8 *)a2 + 8);
    if (*((unsigned char *)a2 + 8))
    {
      unint64_t v22 = 0;
      do
      {
        uint64_t v23 = *(void *)(a2[3] + 8 * v22);
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
          *(void *)(a2[3] + 8 * v22) = 0;
          unsigned int v21 = *((unsigned __int8 *)a2 + 8);
        }
        ++v22;
      }
      while (v22 < v21);
    }
    uint64_t v24 = *(void *)a2[5];
    if (v24)
    {
      (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
      *(void *)a2[5] = 0;
    }
    uint64_t v25 = *(void *)a2[6];
    if (v25)
    {
      (*(void (**)(uint64_t))(*(void *)v25 + 16))(v25);
      *(void *)a2[6] = 0;
    }
    return v28;
  }
LABEL_14:
  if (*((unsigned char *)a2 + 8))
  {
    uint64_t v12 = 0;
    while (1)
    {
      uint64_t v13 = (BOOL (__cdecl *)(OSObjectInterface *__hidden))OSMetaClassBase::safeMetaCast(*(const OSMetaClassBase **)(*(void *)(a1 + 56) + 48), (const OSMetaClass *)gAppleBCMWLANBusInterfacePCIeMetaClass);
      *(void *)(a2[3] + 8 * v12) = AppleBCMWLANPCIeSkywalkTxSubmissionQueue::withProviderAndQueueInfoAndPool(v13, (OSObject *)*a2, (unsigned __int16)InterfaceId, v12, *(_DWORD *)(a2[2] + 4 * v12), v8, *(IOUserNetworkPacketBufferPool **)(*(void *)(a1 + 56) + 56), v4, *(void *)(*(void *)(a1 + 56) + 16));
      uint64_t v14 = *(void **)(a2[3] + 8 * v12);
      if (!v14) {
        goto LABEL_30;
      }
      AppleBCMWLANSkywalkTxSubmissionQueue::setInterface(v14, (IO80211SkywalkInterface *)*a2);
      if (++v12 >= (unint64_t)*((unsigned __int8 *)a2 + 8))
      {
        unsigned int v15 = v12 + 1;
        goto LABEL_20;
      }
    }
  }
  LODWORD(v12) = 0;
  unsigned int v15 = 1;
LABEL_20:
  int v16 = OSMetaClassBase::safeMetaCast(*(const OSMetaClassBase **)(*(void *)(a1 + 56) + 48), (const OSMetaClass *)gAppleBCMWLANBusInterfacePCIeMetaClass);
  *(void *)a2[5] = AppleBCMWLANPCIeSkywalkTxCompletionQueue::withProviderAndQueueInfoAndPool((AppleBCMWLANPCIeSkywalkTxCompletionQueue *)v16, (OSObject *)*a2, (OSObject *)(unsigned __int16)InterfaceId, v12, v8, *(IOUserNetworkPacketBufferPool **)(*(void *)(a1 + 56) + 56), (AppleBCMWLANPCIeSkywalkPacketPool *)v4, *(CCLogStream **)(*(void *)(a1 + 56) + 16), v26);
  uint64_t v17 = *(void *)a2[5];
  if (!v17) {
    goto LABEL_30;
  }
  AppleBCMWLANSkywalkTxCompletionQueue::setInterface(v17, *a2);
  int v18 = OSMetaClassBase::safeMetaCast(*(const OSMetaClassBase **)(*(void *)(a1 + 56) + 48), (const OSMetaClass *)gAppleBCMWLANBusInterfacePCIeMetaClass);
  *(void *)a2[6] = AppleBCMWLANPCIeSkywalkRxCompletionQueue::withProviderAndQueueInfoAndPool((AppleBCMWLANPCIeSkywalkRxCompletionQueue *)v18, (OSObject *)*a2, (OSObject *)(unsigned __int16)InterfaceId, v15, *(_DWORD *)(*(void *)(a1 + 56) + 32), *(IOUserNetworkPacketBufferPool **)(*(void *)(a1 + 56) + 56), (AppleBCMWLANPCIeSkywalkPacketPool *)v4, *(CCLogStream **)(*(void *)(a1 + 56) + 16), v27);
  uint64_t v19 = *(void *)a2[6];
  if (!v19) {
    goto LABEL_30;
  }
  (*(void (**)(uint64_t, void))(*(void *)v19 + 176))(v19, *a2);
  AppleBCMWLANPCIeSkywalkPacketPool::setTxPacketHeadroom(*(void *)(*(void *)(a1 + 56) + 56), *((_WORD *)a2 + 40));
  if (isLowLatencyEnabled)
  {
    uint64_t result = IO80211SkywalkInterface::getWorkQueue((IO80211SkywalkInterface *)*a2);
    if (!result) {
      return result;
    }
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 0x40000000;
    void v29[2] = ___ZN23AppleBCMWLANPCIeSkywalk24registerSkywalkInterfaceEP32skywalkInterfaceRegisterParams_t_block_invoke;
    v29[3] = &__block_descriptor_tmp_3;
    v29[4] = a1;
    v29[5] = result;
    int v30 = InterfaceId;
    (*(void (**)(uint64_t, void *))(*(void *)result + 112))(result, v29);
  }
  *(void *)a2[8] = *(void *)(*(void *)(a1 + 56) + 56);
  *(void *)a2[9] = *(void *)(*(void *)(a1 + 56) + 56);
  if (InterfaceId == -1) {
    return 0;
  }
  uint64_t result = 0;
  *(_DWORD *)(*(void *)(a1 + 56) + 44) |= 1 << InterfaceId;
  return result;
}

uint64_t ___ZN23AppleBCMWLANPCIeSkywalk24registerSkywalkInterfaceEP32skywalkInterfaceRegisterParams_t_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (uint64_t *)v2[7];
  uint64_t v4 = v3[11];
  if (v4)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 88))(v4);
    uint64_t v3 = (uint64_t *)v2[7];
    if (!v5)
    {
      AppleBCMWLANBusInterfacePCIe::enableCompletionRing(v3[6], v3[11], *(void *)(a1 + 40));
      uint64_t v3 = (uint64_t *)v2[7];
    }
  }
  uint64_t v6 = v3[12];
  if (v6 && !(*(uint64_t (**)(uint64_t))(*(void *)v6 + 88))(v6)) {
    AppleBCMWLANBusInterfacePCIe::enableCompletionRing(*(void *)(v2[7] + 48), *(void *)(v2[7] + 96), *(void *)(a1 + 40));
  }
  if (*(_DWORD *)(a1 + 48) != -1) {
    (*(void (**)(void *))(*v2 + 104))(v2);
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalk::registerSkywalkInterface(uint64_t a1, void *a2)
{
  return AppleBCMWLANPCIeSkywalk::registerSkywalkInterface(a1 - 40, a2);
}

AppleBCMWLANPCIeSubmissionRing *AppleBCMWLANPCIeSkywalk::attachRxSubmRing(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0;
  if (!a2) {
    return 0;
  }
  if (*(void *)(*(void *)(a1 + 56) + 8) && CCLogStream::shouldLog()) {
    CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 56) + 8), "[dk] %s@%d:Enter", "attachRxSubmRing", 543);
  }
  *(void *)(a2 + 16) = AppleBCMWLANPCIeSkywalkRxSubmissionQueue::fwRingPending;
  *(void *)(a2 + 24) = *(void *)(*(void *)(a1 + 56) + 64);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(v4 + 48);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 80))(v5);
  int v8 = (*(uint64_t (**)(uint64_t, AppleBCMWLANPCIeSubmissionRing **, uint64_t, uint64_t, uint64_t, unint64_t (*)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *, AppleBCMWLANByteRing *, char *, unint64_t), uint64_t (*)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *__hidden, AppleBCMWLANByteRing *, int, void *)))(*(void *)v5 + 1080))(v5, &v11, a2, v6, v7, AppleBCMWLANPCIeSkywalkRxSubmissionQueue::fwRingFill, AppleBCMWLANPCIeSkywalkRxSubmissionQueue::fwRingError);
  uint64_t v9 = *(void *)(a1 + 56);
  if (v8)
  {
    uint64_t result = *(AppleBCMWLANPCIeSubmissionRing **)(v9 + 8);
    if (!result) {
      return result;
    }
    if (CCLogStream::shouldLog()) {
      CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 56) + 8), "[dk] %s@%d:Skywalk Create RX submission ring Fail\n", "attachRxSubmRing", 553);
    }
    return 0;
  }
  AppleBCMWLANPCIeSkywalkRxSubmissionQueue::setFWRing(*(AppleBCMWLANPCIeSkywalkRxSubmissionQueue **)(v9 + 64), v11);
  AppleBCMWLANPCIeSkywalkRxSubmissionQueue::setRxRingSize(*(void *)(*(void *)(a1 + 56) + 64), *(unsigned int *)(a2 + 8));
  return v11;
}

uint64_t AppleBCMWLANPCIeSkywalk::validateRxDMAStall(AppleBCMWLANPCIeSkywalk *this)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 7);
  uint64_t v3 = (AppleBCMWLANPCIeSkywalkRxSubmissionQueue *)v2[8];
  if (v3)
  {
    uint64_t TotalFilledCountinFWRing = AppleBCMWLANPCIeSkywalkRxSubmissionQueue::getTotalFilledCountinFWRing(v3);
    uint64_t v5 = *((void *)this + 7);
    if (TotalFilledCountinFWRing == *(void *)(v5 + 464))
    {
      ++*(_DWORD *)(v5 + 472);
    }
    else
    {
      *(_DWORD *)(v5 + 472) = 1;
      *(void *)(*((void *)this + 7) + 464) = TotalFilledCountinFWRing;
    }
    uint64_t result = **((void **)this + 7);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result) {
        return CCLogStream::logAlert(**((CCLogStream ***)this + 7), "[dk] %s@%d:validateRxDMAStall: RxSubmissionQ did not provide buffers to FW. fRxDMAStallCount:%u FWFillCount:%zu");
      }
    }
  }
  else
  {
    uint64_t result = *v2;
    if (*v2)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result) {
        return CCLogStream::logAlert(**((CCLogStream ***)this + 7), "[dk] %s@%d:validateRxDMAStall: skywalk rx submssion queue is not ready\n");
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalk::validateRxDMAStall(AppleBCMWLANPCIeSkywalk *this)
{
  return AppleBCMWLANPCIeSkywalk::validateRxDMAStall((AppleBCMWLANPCIeSkywalk *)((char *)this - 40));
}

uint64_t AppleBCMWLANPCIeSkywalk::attachDefaultRxCompRing(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 56) + 48) + 1104))(*(void *)(*(void *)(a1 + 56) + 48));
  if (!v4) {
    return *(void *)(*(void *)(a1 + 56) + 80);
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a1 + 56);
  unsigned int v7 = *(_DWORD *)(v6 + 44);
  uint64_t v8 = v6 + 80;
  if (*(void *)(v6 + 80)
    || (uint64_t v17 = *(void *)(v6 + 48),
        uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 80))(v17),
        !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(AppleBCMWLANPCIeSkywalk *, OSMetaClassBase *, unsigned __int8 *, int), uint64_t (*)(AppleBCMWLANPCIeSkywalk *__hidden, AppleBCMWLANByteRing *, int, void *)))(*(void *)v17 + 1088))(v17, v8, a2, a1, v18, AppleBCMWLANPCIeSkywalk::rxCompRingDrain, AppleBCMWLANPCIeSkywalk::rxCompRingError)))
  {
    if (v7)
    {
      uint64_t v9 = __clz(__rbit32(v7));
      do
      {
        uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 1888))(v5, v9);
        if (v10)
        {
          uint64_t v11 = v10;
          if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 1000))(v10))
          {
            uint64_t v12 = (const OSMetaClassBase *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 1128))(v11);
            uint64_t v13 = OSMetaClassBase::safeMetaCast(v12, (const OSMetaClass *)gAppleBCMWLANPCIeSkywalkRxCompletionQueueMetaClass);
            if (v13)
            {
              uint64_t v14 = (uint64_t)v13;
              if (((uint64_t (*)(OSMetaClassBase *))v13->__vftable[5].isEqualTo)(v13)
                && (*(uint64_t (**)(uint64_t))(*(void *)v14 + 224))(v14))
              {
                (*(void (**)(uint64_t))(*(void *)v14 + 224))(v14);
                if (CCLogStream::shouldLog())
                {
                  unsigned int v15 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 224))(v14);
                  CCLogStream::logInfo(v15, "[dk] %s@%d:Enable rxCompQueue\n", "attachDefaultRxCompRing", 611);
                }
              }
              AppleBCMWLANPCIeSkywalkRxCompletionQueue::setFirmwareRing(v14, *(void *)(*(void *)(a1 + 56) + 80));
              (*(void (**)(uint64_t))(*(void *)v14 + 200))(v14);
            }
          }
        }
        v7 &= ~(1 << v9);
        uint64_t v9 = __clz(__rbit32(v7));
      }
      while (v7);
    }
    return *(void *)(*(void *)(a1 + 56) + 80);
  }
  uint64_t result = *(void *)(*(void *)(a1 + 56) + 8);
  if (result)
  {
    if (CCLogStream::shouldLog()) {
      CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 56) + 8), "[dk] %s@%d:Skywalk Create RX completion ring Fail\n", "attachDefaultRxCompRing", 600);
    }
    return 0;
  }
  return result;
}

uint64_t AppleBCMWLANPCIeSkywalk::rxCompRingDrain(AppleBCMWLANPCIeSkywalk *this, OSMetaClassBase *anObject, unsigned __int8 *a3, int a4)
{
  LODWORD(v4) = a4;
  *(_DWORD *)uint64_t v94 = 0;
  unsigned int v7 = OSMetaClassBase::safeMetaCast(anObject, (const OSMetaClass *)gAppleBCMWLANPCIeCompletionRingMetaClass);
  uint64_t v8 = (AppleBCMWLANCore *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 7) + 48) + 1104))();
  int v89 = ((uint64_t (*)(OSMetaClassBase *))v7->__vftable[5].retain)(v7);
  if (fKernelTraceEnabled)
  {
    ((void (*)(OSMetaClassBase *))v7->__vftable[5].retain)(v7);
    unsigned int v9 = v4;
    uint64_t v4 = v4;
    (*(void (**)(void))(**(void **)(*((void *)this + 7) + 48) + 792))();
    kdebug_trace();
  }
  else
  {
    unsigned int v9 = v4;
    uint64_t v4 = v4;
  }
  RxPacketTracker = (AppleBCMWLANHashtable *)AppleBCMWLANPCIeSkywalkPacketPool::getRxPacketTracker(*(AppleBCMWLANPCIeSkywalkPacketPool **)(*((void *)this + 7) + 56));
  *(void *)(*((void *)this + 7) + 336) += v4;
  uint64_t v87 = mach_continuous_time();
  *(void *)(*((void *)this + 7) + 192) = v87;
  unsigned int v88 = v9;
  if (v9)
  {
    int v86 = 0;
    unsigned int v10 = v9;
    uint64_t v92 = (AppleBCMWLANItemRing *)v7;
    do
    {
      unsigned __int16 v11 = *((_WORD *)a3 + 2);
      uint64_t v12 = (const OSMetaClassBase *)AppleBCMWLANHashtable::remove(RxPacketTracker, (__int16)v11);
      uint64_t v13 = OSMetaClassBase::safeMetaCast(v12, (const OSMetaClass *)gAppleBCMWLANPCIeSkywalkPacketMetaClass);
      uint64_t v14 = (IOUserNetworkPacket *)v13;
      uint64_t v15 = a3[1];
      if (v15 <= 0xB) {
        ++*(void *)(*((void *)this + 7) + 8 * v15 + 368);
      }
      if (!v13)
      {
        uint64_t v64 = *((void *)this + 7);
        if (*(void *)v64)
        {
          int shouldLog = CCLogStream::shouldLog();
          uint64_t v64 = *((void *)this + 7);
          if (shouldLog)
          {
            CCLogStream::logAlert(*(CCLogStream **)v64, "[dk] %s@%d:invalid rx comp packet, resource id %d\n", "rxCompRingDrain", 1354, v11);
            goto LABEL_108;
          }
        }
LABEL_109:
        ++*(void *)(v64 + 352);
        goto LABEL_104;
      }
      int v16 = ((uint64_t (*)(OSMetaClassBase *))v7->__vftable[6].retain)(v7);
      unsigned int v17 = a3[2];
      if (v16 != v17 >> 7 || *a3 != 18)
      {
        long long v55 = (CCLogStream **)*((void *)this + 7);
        if (*v55)
        {
          int v56 = CCLogStream::shouldLog();
          long long v55 = (CCLogStream **)*((void *)this + 7);
          if (v56)
          {
            int v57 = *v55;
            ((void (*)(OSMetaClassBase *))v7->__vftable[6].retain)(v7);
            CCLogStream::logAlert(v57, "[dk] %s@%d:Ring Phase=%d msg Phase=%d msg type=%d ifId=%d packet=%p", "rxCompRingDrain");
            goto LABEL_97;
          }
        }
LABEL_107:
        AppleBCMWLANPCIeSkywalkPacketPool::deallocatePacket(v55[7], v14);
LABEL_108:
        uint64_t v64 = *((void *)this + 7);
        goto LABEL_109;
      }
      unsigned int v91 = v10;
      if ((v17 & 8) != 0 && **((void **)this + 7) && (int v18 = CCLogStream::shouldLog(), v17 = a3[2], v18))
      {
        int v83 = a3[1];
        int v85 = (CCLogStream *)**((void **)this + 7);
        int v82 = *((unsigned __int16 *)a3 + 5);
        int v67 = *((unsigned __int16 *)a3 + 9);
        int v68 = *((unsigned __int16 *)a3 + 8);
        int v69 = *((unsigned __int16 *)a3 + 7);
        int v70 = (*(uint64_t (**)(AppleBCMWLANItemRing *))(*(void *)v92 + 224))(v92);
        int v71 = (*(uint64_t (**)(AppleBCMWLANItemRing *))(*(void *)v92 + 232))(v92);
        CCLogStream::logAlert(v85, "[dk] %s@%d:Rx packet, wake packet bit, header flags %d ifId %d flowid %d flags %d, data offset %d length %d @ {%d %d}, type:0x%08x\n", "rxCompRingDrain", 1375, v17, v83, v82, v67, v68, v69, v70, v71, 32);
        if ((a3[2] & 8) == 0) {
          goto LABEL_14;
        }
      }
      else if ((v17 & 8) == 0)
      {
        goto LABEL_14;
      }
      uint64_t v72 = *(void *)(*((void *)this + 7) + 48);
      if (v72 && (*(uint64_t (**)(uint64_t))(*(void *)v72 + 1104))(v72))
      {
        unint64_t v73 = (AppleBCMWLANCore *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 7) + 48)
                                                                    + 1104))(*(void *)(*((void *)this + 7) + 48));
        AppleBCMWLANCore::setWiFiWakeType(v73, 32);
      }
LABEL_14:
      unsigned int v19 = *((unsigned __int16 *)a3 + 7);
      v94[1] = *((_WORD *)a3 + 7);
      uint64_t v20 = *((unsigned __int16 *)a3 + 8);
      v94[0] = *((_WORD *)a3 + 8);
      unsigned int v21 = (IO80211SkywalkInterface *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)v8 + 1888))(v8, v15);
      unint64_t v22 = v21;
      if (!v21 || *(unsigned char *)(*((void *)this + 7) + 128))
      {
        unsigned int v7 = (OSMetaClassBase *)v92;
LABEL_84:
        char v58 = AppleBCMWLANItemRing::getItemSize((AppleBCMWLANItemRing *)v7) == 40;
        AppleBCMWLANPCIeSkywalk::completeRxPacketMonitor((CCLogStream ***)this, (uint64_t)a3, v22, (AppleBCMWLANPCIeSkywalkPacket *)v14, v58);
        AppleBCMWLANPCIeSkywalkPacketPool::deallocatePacket(*(AppleBCMWLANPCIeSkywalkPacketPool **)(*((void *)this + 7) + 56), v14);
        ++*(void *)(*((void *)this + 7) + 352);
        ++v86;
        goto LABEL_103;
      }
      int InterfaceRole = IO80211SkywalkInterface::getInterfaceRole(v21);
      uint64_t Scratch = AppleBCMWLANPCIeSkywalkPacket::getScratch((AppleBCMWLANPCIeSkywalkPacket *)v14);
      BOOL v25 = AppleBCMWLANItemRing::getItemSize(v92) == 40;
      AppleBCMWLANPCIeSkywalk::getRxTimeStamp((uint64_t)this, Scratch, (uint64_t)a3, v25);
      *(unsigned char *)(Scratch + 24) = a3[18] >> 5;
      *(_DWORD *)(Scratch + 12) = ratespec2rate(**((void **)this + 7), *((_DWORD *)a3 + 5));
      *(_WORD *)uint64_t Scratch = (char)a3[28];
      if ((*((_DWORD *)a3 + 7) & 0x1000000) != 0) {
        char v26 = 2;
      }
      else {
        char v26 = 1;
      }
      *(unsigned char *)(Scratch + 4forEachAppleBCMWLANReturnCodes((uint64_t (*)(uint64_t, void, void))printRetCodeName, 0) = v26;
      if (v89 == 5 && v15 == 3 || IO80211SkywalkInterface::isLowLatencyEnabled(v22))
      {
        if (AppleBCMWLANCore::getProximityInterfaceId(v8) == v15)
        {
          int v27 = (unsigned __int8 *)(((uint64_t (*)(IOUserNetworkPacket *))v14->OSObject::OSMetaClassBase::__vftable[1].getDataLength)(v14)
                                  + v20);
          if ((*((_WORD *)a3 + 9) & 2) != 0)
          {
            uint64_t v28 = 24;
            if (*v27 == 136) {
              uint64_t v28 = 26;
            }
          }
          else
          {
            uint64_t v28 = 14;
          }
          long long v39 = &v27[v28];
          unsigned int v7 = (OSMetaClassBase *)v92;
          if (*(_DWORD *)v39 == 240298 && *((__int16 *)v39 + 2) == -3561) {
            goto LABEL_84;
          }
        }
        else
        {
          unsigned int v7 = (OSMetaClassBase *)v92;
          int v29 = (*(uint64_t (**)(AppleBCMWLANItemRing *))(*(void *)v92 + 208))(v92);
          LODWORD(v15) = 10;
          unint64_t v22 = (IO80211SkywalkInterface *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)v8
                                                                                                  + 1888))(v8, 10);
          if (v29 != 5) {
            goto LABEL_84;
          }
        }
      }
      else
      {
        if (InterfaceRole == 10)
        {
          v94[0] = (IO80211NetworkPacket::getHeadroom((IO80211NetworkPacket *)v14) + v20);
          IO80211NetworkPacket::setHeadroom((IO80211NetworkPacket *)v14, v94[0]);
          unint64_t v22 = (IO80211SkywalkInterface *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)v8
                                                                                                  + 1888))(v8, 4);
          if (!AppleBCMWLANPCIeSkywalk::handleRxNanDataInterfacePacket(this, (AppleBCMWLANPCIeSkywalkPacket *)v14, v94, &v94[1])|| (uint64_t v40 = ((uint64_t (*)(IOUserNetworkPacket *))v14->OSObject::OSMetaClassBase::__vftable[1].getDataLength)(v14), v41 = v40 + ((unsigned int (*)(IOUserNetworkPacket *))v14->getDataOffset)(v14), !(*(unsigned int (**)(IO80211SkywalkInterface *, IOUserNetworkPacket *, uint64_t, uint64_t, void, void))(*(void *)v22 + 568))(v22, v14, Scratch, v41, 0, 0)))
          {
            AppleBCMWLANPCIeSkywalkPacketPool::deallocatePacket(*(AppleBCMWLANPCIeSkywalkPacketPool **)(*((void *)this + 7) + 56), v14);
            ++*(void *)(*((void *)this + 7) + 352);
            goto LABEL_102;
          }
          IO80211NetworkPacket::setHeadroom((IO80211NetworkPacket *)v14, v94[0]);
        }
        else if (InterfaceRole == 6)
        {
          char v93 = -86;
          Headroouint64_t m = IO80211NetworkPacket::getHeadroom((IO80211NetworkPacket *)v14);
          if (v19 < 0x1C)
          {
            if (**((void **)this + 7) && CCLogStream::shouldLog()) {
              CCLogStream::logAlert(**((CCLogStream ***)this + 7), "[dk] %s@%d:ERROR ! Discarding packet - Too small (len %d)\n");
            }
LABEL_101:
            ++*(void *)(*((void *)this + 7) + 352);
            AppleBCMWLANPCIeSkywalkPacketPool::deallocatePacket(*(AppleBCMWLANPCIeSkywalkPacketPool **)(*((void *)this + 7) + 56), v14);
LABEL_102:
            unsigned int v7 = (OSMetaClassBase *)v92;
            goto LABEL_103;
          }
          __int16 v31 = *((_WORD *)a3 + 9);
          LOBYTE(v2forEachAppleBCMWLANReturnCodes((uint64_t (*)(uint64_t, void, void))printRetCodeName, 0) = Headroom + v20;
          v94[0] = 0;
          uint64_t v32 = ((uint64_t (*)(IOUserNetworkPacket *))v14->OSObject::OSMetaClassBase::__vftable[1].getDataLength)(v14);
          if ((v31 & 2) != 0)
          {
            uint64_t v47 = (char *)(v32 + v20);
            if ((v47[1] & 3) != 0 || (*v47 & 0xC) != 8) {
              goto LABEL_101;
            }
            unsigned int v48 = *v47 < 0 ? 26 : 24;
            if ((v48 | 4) > v19) {
              goto LABEL_101;
            }
            unsigned __int8 v49 = &v47[v48];
            *((_DWORD *)v49 - 2) = *(_DWORD *)(v47 + 10);
            *((_WORD *)v49 - 2) = *((_WORD *)v47 + 7);
            *(_DWORD *)(v49 - 14) = *((_DWORD *)v47 + 1);
            *((_WORD *)v49 - 5) = *((_WORD *)v47 + 4);
            __int16 v50 = v48 - 14;
            unsigned __int8 v33 = v20 + v48 - 14;
            LOWORD(v19) = v19 - v50 - 4;
            uint64_t v20 = v33;
          }
          else
          {
            unsigned __int8 v33 = v20;
            uint64_t v20 = v20;
          }
          unsigned __int8 v84 = v33;
          uint64_t v34 = v33;
          IO80211NetworkPacket::setHeadroom((IO80211NetworkPacket *)v14, v33);
          uint64_t v35 = ((uint64_t (*)(IOUserNetworkPacket *))v14->OSObject::OSMetaClassBase::__vftable[1].getDataLength)(v14)
              + v20;
          if (*(unsigned __int8 *)(v35 + 14) == 170
            && *(unsigned __int8 *)(v35 + 15) == 170
            && *(unsigned char *)(v35 + 16) == 3)
          {
            int v36 = *(_DWORD *)(v35 + 17);
            if (v36 == 150083328)
            {
              *(void *)(v35 + 16) = *(void *)v35;
              *(_DWORD *)(v35 + 24) = *(_DWORD *)(v35 + 8);
              __int16 v37 = -16;
              char v38 = 16;
            }
            else
            {
              int v52 = v36 & 0xFF0000;
              if (*(_DWORD *)(v35 + 17)) {
                BOOL v53 = 0;
              }
              else {
                BOOL v53 = (*(_DWORD *)(v35 + 17) & 0xFF00) == 0;
              }
              if (!v53 || v52 != 0)
              {
                if (**((void **)this + 7) && CCLogStream::shouldLog()) {
                  CCLogStream::logAlert(**((CCLogStream ***)this + 7), "[dk] %s@%d:ERROR ! Discard packet : BAD OUI %02x %02x %02x Ethertype = 0x%04x \n");
                }
                goto LABEL_101;
              }
              uint64_t v59 = (*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)v8 + 1888))(v8, 9);
              if (!v59)
              {
                if (**((void **)this + 7) && CCLogStream::shouldLog()) {
                  CCLogStream::logAlert(**((CCLogStream ***)this + 7), "[dk] %s@%d:ERROR ! LLW interface is null\n");
                }
                goto LABEL_101;
              }
              unint64_t v22 = (IO80211SkywalkInterface *)v59;
              int v60 = *(_DWORD *)(v35 + 8);
              *(void *)(v35 + 8) = *(void *)v35;
              *(_DWORD *)(v35 + 16) = v60;
              __int16 v37 = -8;
              char v38 = 8;
            }
            unsigned __int8 v61 = v84 + v38;
            LOWORD(v19) = v19 + v37;
            uint64_t v34 = v61;
            IO80211NetworkPacket::setHeadroom((IO80211NetworkPacket *)v14, v61);
            v94[1] = v19;
            v94[0] = v34;
          }
          else
          {
            v94[0] = v34;
            v94[1] = v19;
            if (*(unsigned __int16 *)(v35 + 12) < 0x600u) {
              goto LABEL_101;
            }
            __int16 v51 = (IO80211SkywalkInterface *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)v8 + 1888))(v8, 9);
            if (!v51)
            {
              IOLog("%s[%d] ERROR : LLW interface does not exist, Discard packet\n", "rxCompRingDrain", 1568);
              goto LABEL_101;
            }
            unint64_t v22 = v51;
            LODWORD(v15) = IO80211SkywalkInterface::getInterfaceId(v51);
          }
          char v93 = 0;
          ((void (*)(IOUserNetworkPacket *, uint64_t))v14->setDataOffset)(v14, v34);
          ((void (*)(IOUserNetworkPacket *, void))v14->setDataLength)(v14, (unsigned __int16)v19);
          IO80211NetworkPacket::setLinkHeaderOffset((IO80211NetworkPacket *)v14, v34);
          uint64_t v62 = ((uint64_t (*)(IOUserNetworkPacket *))v14->OSObject::OSMetaClassBase::__vftable[1].getDataLength)(v14);
          uint64_t v63 = v62 + ((unsigned int (*)(IOUserNetworkPacket *))v14->getDataOffset)(v14);
          if (!(*(unsigned int (**)(IO80211SkywalkInterface *, IOUserNetworkPacket *, uint64_t, uint64_t, char *, void))(*(void *)v22 + 568))(v22, v14, Scratch, v63, &v93, 0))goto LABEL_101; {
          if (v93)
          }
            goto LABEL_102;
        }
        unsigned int v7 = (OSMetaClassBase *)v92;
      }
      int v42 = (const OSMetaClassBase *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v22 + 1128))(v22);
      int v43 = OSMetaClassBase::safeMetaCast(v42, (const OSMetaClass *)gAppleBCMWLANPCIeSkywalkRxCompletionQueueMetaClass);
      if (!v43)
      {
        long long v55 = (CCLogStream **)*((void *)this + 7);
        if (*v55)
        {
          int v66 = CCLogStream::shouldLog();
          long long v55 = (CCLogStream **)*((void *)this + 7);
          unsigned int v10 = v91;
          if (v66)
          {
            CCLogStream::logAlert(*v55, "[dk] %s@%d:Invalid getRxCompQueue(), go next\n");
LABEL_97:
            long long v55 = (CCLogStream **)*((void *)this + 7);
          }
        }
        else
        {
          unsigned int v10 = v91;
        }
        goto LABEL_107;
      }
      unsigned int v44 = v43;
      if ((a3[2] & 8) != 0) {
        ((void (*)(IOUserNetworkPacket *))v14->OSObject::OSMetaClassBase::__vftable[1].release)(v14);
      }
      if (((unsigned int (*)(IOUserNetworkPacket *))v14->OSObject::OSMetaClassBase::__vftable[1].SetDataOffset)(v14)) {
        ((void (*)(IOUserNetworkPacket *, uint64_t))v14->OSObject::OSMetaClassBase::__vftable[1].GetDataOffset)(v14, 135528453);
      }
      unsigned int v45 = v94[0];
      ((void (*)(IOUserNetworkPacket *, void))v14->setDataOffset)(v14, v94[0]);
      ((void (*)(IOUserNetworkPacket *, void))v14->setDataLength)(v14, v94[1]);
      IO80211NetworkPacket::setLinkHeaderOffset((IO80211NetworkPacket *)v14, v45);
      char v46 = AppleBCMWLANItemRing::getItemSize((AppleBCMWLANItemRing *)v7) == 40;
      AppleBCMWLANPCIeSkywalk::setRXTimestamp(this, a3, (AppleBCMWLANPCIeSkywalkPacket *)v14, v22, v46);
      if ((((uint64_t (*)(OSMetaClassBase *))v44->__vftable[5].release)(v44) & 1) != 0 || !v15)
      {
        ((void (*)(OSMetaClassBase *, IOUserNetworkPacket *, void, void))v44->__vftable[5].Dispatch)(v44, v14, 0, 0);
        ++*(void *)(*((void *)this + 7) + 360);
      }
      else
      {
        ++*(void *)(*((void *)this + 7) + 352);
        AppleBCMWLANPCIeSkywalkPacketPool::deallocatePacket(*(AppleBCMWLANPCIeSkywalkPacketPool **)(*((void *)this + 7) + 56), v14);
      }
LABEL_103:
      unsigned int v10 = v91;
LABEL_104:
      a3 += AppleBCMWLANItemRing::getItemSize((AppleBCMWLANItemRing *)v7);
      ++*(void *)(*((void *)this + 7) + 344);
      --v10;
    }
    while (v10);
  }
  AppleBCMWLANPCIeSkywalkRxSubmissionQueue::requestRingFill(*(AppleBCMWLANPCIeSkywalkRxSubmissionQueue **)(*((void *)this + 7) + 64));
  uint64_t v74 = 0;
  do
  {
    uint64_t v75 = (*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)v8 + 1888))(v8, v74);
    if (v75)
    {
      int v76 = (IO80211SkywalkInterface *)v75;
      uint64_t v77 = (*(uint64_t (**)(uint64_t))(*(void *)v75 + 1128))(v75);
      if (v77)
      {
        uint64_t v78 = v77;
        if ((*(unsigned int (**)(uint64_t, void, void))(*(void *)v77 + 120))(v77, 0, 0))
        {
          if (IO80211SkywalkInterface::getInterfaceRole(v76) != 1) {
            (*(void (**)(uint64_t))(*(void *)v78 + 192))(v78);
          }
        }
      }
    }
    uint64_t v74 = (v74 + 1);
  }
  while (v74 != 12);
  AppleBCMWLANBusInterfacePCIe::updateActiveRxBufferCount(*(void *)(*((void *)this + 7) + 48), -v88);
  (*(void (**)(void, void, void))(**(void **)(*((void *)this + 7) + 64) + 128))(*(void *)(*((void *)this + 7) + 64), 0, 0);
  unsigned int v79 = (AppleBCMWLANCore *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 7) + 48) + 1104))();
  if (v79)
  {
    unint64_t v80 = (OSDictionary *)v79;
    AppleBCMWLANCore::updateDataPathActivityTimestamp(v79, v87);
    AppleBCMWLANCore::handleDataPathActivity(v80);
  }
  if (fKernelTraceEnabled)
  {
    ((void (*)(OSMetaClassBase *))v7->__vftable[5].retain)(v7);
    (*(void (**)(void))(**(void **)(*((void *)this + 7) + 48) + 792))();
    kdebug_trace();
  }
  return v88;
}

uint64_t AppleBCMWLANPCIeSkywalk::createLowLatencyCompRing(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 > 1) {
    return 3758097084;
  }
  v10[0] = a1;
  v10[1] = AppleBCMWLANPCIeSkywalk::createLowLatencyCompRingComplete;
  uint64_t v4 = *(void *)(a1 + 56);
  if (a3) {
    uint64_t v5 = AppleBCMWLANPCIeSkywalk::rxCompRingError;
  }
  else {
    uint64_t v5 = AppleBCMWLANPCIeSkywalk::txCompRingError;
  }
  if (a3) {
    uint64_t v6 = AppleBCMWLANPCIeSkywalk::rxCompRingDrain;
  }
  else {
    uint64_t v6 = AppleBCMWLANPCIeSkywalk::txCompRingDrain;
  }
  if (a3) {
    uint64_t v7 = v4 + 96;
  }
  else {
    uint64_t v7 = v4 + 88;
  }
  void v10[2] = v7;
  uint64_t DynamicCompletionRing = AppleBCMWLANBusInterfacePCIe::createDynamicCompletionRing(*(void *)(v4 + 48), a2, (uint64_t)v10, (uint64_t)v6, (uint64_t)v5);
  if (**(void **)(a1 + 56) && CCLogStream::shouldLog())
  {
    CCLogStream::logAlert(**(CCLogStream ***)(a1 + 56), "[dk] %s@%d:dynamic completion ring create returned 0x%x\n", "createLowLatencyCompRing", 648, DynamicCompletionRing);
    if (DynamicCompletionRing) {
      return DynamicCompletionRing;
    }
    goto LABEL_14;
  }
  if (!DynamicCompletionRing)
  {
LABEL_14:
    ++*(unsigned char *)(*(void *)(a1 + 56) + 112);
    (*(void (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 56) + 104) + 120))(*(void *)(*(void *)(a1 + 56) + 104), 5000);
  }
  return DynamicCompletionRing;
}

void *AppleBCMWLANPCIeSkywalk::createLowLatencyCompRingComplete(void *this, AppleBCMWLANPCIeCompletionRing *a2, int a3, CCLogStream **a4)
{
  uint64_t v7 = this;
  uint64_t v8 = this[7];
  if (!*(unsigned char *)(v8 + 112) || (--*(unsigned char *)(v8 + 112), uint64_t v8 = this[7], !*(unsigned char *)(v8 + 112)))
  {
    this = (void *)(*(uint64_t (**)(void))(**(void **)(v8 + 104) + 136))(*(void *)(v8 + 104));
    uint64_t v8 = v7[7];
  }
  BOOL v10 = (CCLogStream **)(v8 + 88) != a4 && v8 + 96 != (void)a4;
  if (a2 && !v10)
  {
    if (*(void *)v8 && CCLogStream::shouldLog())
    {
      int v18 = (CCLogStream **)v7[7];
      if (v18 + 11 == a4) {
        unsigned int v19 = "tx";
      }
      else {
        unsigned int v19 = "rx";
      }
      CCLogStream::logAlert(*v18, "[dk] %s@%d:Skywalk low latency %s comp ring create complete ", "createLowLatencyCompRingComplete", 673, v19);
    }
    unsigned __int16 v11 = (CCLogStream **)v7[7];
    uint64_t v12 = *v11;
    if (a3)
    {
      if (v12)
      {
        int shouldLog = CCLogStream::shouldLog();
        unsigned __int16 v11 = (CCLogStream **)v7[7];
        if (shouldLog)
        {
          CCLogStream::logAlert(*v11, "[dk] %s@%d:failed\n", "createLowLatencyCompRingComplete", 685);
          unsigned __int16 v11 = (CCLogStream **)v7[7];
        }
      }
      uint64_t v14 = v11[2];
      return (void *)CCFaultReporter::reportFault(v14, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANPCIeSkywalk.cpp", 0x2AEu, "createLowLatencyCompRingComplete", 0, -469794010, 0);
    }
    else
    {
      if (v12)
      {
        int v15 = CCLogStream::shouldLog();
        unsigned __int16 v11 = (CCLogStream **)v7[7];
        if (v15)
        {
          CCLogStream::logAlert(*v11, "[dk] %s@%d:succeeded %p\n", "createLowLatencyCompRingComplete", 675, a2);
          unsigned __int16 v11 = (CCLogStream **)v7[7];
        }
      }
      int v16 = v11 + 11;
      unsigned int v17 = v11 + 12;
      if (v16 == a4) {
        unsigned int v17 = a4;
      }
      OSObject *v17 = a2;
      this = (void *)(*(uint64_t (**)(void))(**(void **)(v7[7] + 48) + 80))(*(void *)(v7[7] + 48));
      if (this)
      {
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 0x40000000;
        void v20[2] = ___ZN23AppleBCMWLANPCIeSkywalk32createLowLatencyCompRingCompleteEP30AppleBCMWLANPCIeCompletionRingiPv_block_invoke;
        void v20[3] = &__block_descriptor_tmp_28;
        v20[4] = v7;
        v20[5] = a2;
        v20[6] = this;
        return (void *)(*(uint64_t (**)(void *, void *))(*this + 112))(this, v20);
      }
    }
  }
  return this;
}

uint64_t AppleBCMWLANPCIeSkywalk::txCompRingDrain(AppleBCMWLANPCIeSkywalk *this, OSMetaClassBase *anObject, unsigned __int8 *a3, unsigned int a4)
{
  uint64_t v8 = OSMetaClassBase::safeMetaCast(anObject, (const OSMetaClass *)gAppleBCMWLANPCIeCompletionRingMetaClass);
  unsigned int v9 = (AppleBCMWLANCore *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 7) + 48) + 1104))();
  TxPacketTracker = (AppleBCMWLANHashtable *)AppleBCMWLANPCIeSkywalkPacketPool::getTxPacketTracker(*(AppleBCMWLANPCIeSkywalkPacketPool **)(*((void *)this + 7) + 56));
  unsigned int TxChipDelayToUsecMultiplier = AppleBCMWLANBusInterfacePCIe::getTxChipDelayToUsecMultiplier(*(AppleBCMWLANBusInterfacePCIe **)(*((void *)this + 7) + 48));
  unint64_t v107 = 0;
  int PTMMode = AppleBCMWLANCore::getPTMMode(v9);
  BOOL v10 = &kSliceChannelSwitchDwellHistConfig;
  if (fKernelTraceEnabled)
  {
    ((void (*)(OSMetaClassBase *))v8->__vftable[5].retain)(v8);
    (*(void (**)(void))(**(void **)(*((void *)this + 7) + 48) + 784))();
    kdebug_trace();
  }
  uint64_t v11 = mach_continuous_time();
  unint64_t v12 = v11;
  *(void *)(*((void *)this + 7) + 20forEachAppleBCMWLANReturnCodes((uint64_t (*)(uint64_t, void, void))printRetCodeName, 0) = v11;
  *(void *)(*((void *)this + 7) + 208) += a4;
  if (!a4)
  {
    unsigned int v89 = 0;
    goto LABEL_188;
  }
  uint64_t v95 = anObject;
  int v100 = 0;
  uint64_t v96 = 0;
  int v97 = 0;
  unsigned int v13 = 0;
  uint64_t v14 = 0;
  uint64_t v98 = v11;
  int v94 = a4;
  int v99 = a4;
  unsigned int v15 = a4;
  __int16 v103 = v8;
  do
  {
    unint64_t v16 = a3[1];
    if (v16 <= 0xB) {
      ++*(void *)(*((void *)this + 7) + 8 * v16 + 240);
    }
    if ((AppleBCMWLANPCIeTransmitFlowRing::isSkywalkResource((AppleBCMWLANPCIeTransmitFlowRing *)*((unsigned __int16 *)a3
                                                                                                  + 3)) & 1) == 0)
    {
      uint64_t v55 = *((void *)this + 7);
      if (*(unsigned char *)(v55 + 129))
      {
        if ((!*(void *)v55 || (CCLogStream::shouldLogConsole() & 1) == 0)
          && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          int v71 = *((unsigned __int16 *)a3 + 2);
          int v72 = a3[1];
          int v73 = *((unsigned __int16 *)a3 + 5);
          *(_DWORD *)buf = 67110402;
          int v109 = 73;
          __int16 v110 = 2080;
          long long v111 = "txCompRingDrain";
          __int16 v112 = 1024;
          int v113 = 1920;
          __int16 v114 = 1024;
          int v115 = v71;
          __int16 v116 = 1024;
          int v117 = v72;
          __int16 v118 = 1024;
          *(_DWORD *)long long v119 = v73;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: TxCompletionDebug: Skipping packet in isSkywalkResource resource id <%d> ifId <%d> flowid <%d>\n", buf, 0x2Au);
        }
        if (!**((void **)this + 7)) {
          goto LABEL_159;
        }
        int shouldLog = CCLogStream::shouldLog();
        uint64_t v55 = *((void *)this + 7);
        if (shouldLog)
        {
          CCLogStream::logInfo(*(CCLogStream **)v55, "[dk] %s@%d:TxCompletionDebug: Skipping packet in isSkywalkResource resource id <%d> ifId <%d> flowid <%d>\n", "txCompRingDrain", 1920, *((unsigned __int16 *)a3 + 2), a3[1], *((unsigned __int16 *)a3 + 5));
          uint64_t v55 = *((void *)this + 7);
        }
        uint64_t v8 = v103;
      }
      if (*(void *)v55 && CCLogStream::shouldLog()) {
        CCLogStream::logEmergency(**((CCLogStream ***)this + 7), "[dk] %s@%d:Skipping, completion is not a skywalkResource:0x%hx\n", "txCompRingDrain", 1922, *((unsigned __int16 *)a3 + 3));
      }
      goto LABEL_44;
    }
    unsigned __int16 v17 = *((_WORD *)a3 + 2);
    int v18 = (const OSMetaClassBase *)AppleBCMWLANHashtable::remove(TxPacketTracker, (__int16)v17);
    unsigned int v19 = (IOUserNetworkPacket *)OSMetaClassBase::safeMetaCast(v18, (const OSMetaClass *)gAppleBCMWLANPCIeSkywalkPacketMetaClass);
    uint64_t v20 = *(OSMetaClassBase **)(*((void *)this + 7) + 88);
    uint64_t v21 = a3[1];
    if (v20) {
      BOOL v22 = v8 == v20;
    }
    else {
      BOOL v22 = 0;
    }
    if (v22)
    {
      if (AppleBCMWLANCore::getProximityInterfaceId(v9) == v21)
      {
        uint64_t v21 = 9;
      }
      else
      {
        if (a3[1] != 3) {
          goto LABEL_18;
        }
        uint64_t v21 = 10;
      }
    }
    uint64_t v14 = (IO80211SkywalkInterface *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)v9 + 1888))(v9, v21);
LABEL_18:
    if (!v14)
    {
      if (**((void **)this + 7) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(**((CCLogStream ***)this + 7), "[dk] %s@%d:%s[%u] Invalid skywalkInterface\n", "txCompRingDrain", 1939, "txCompRingDrain", 1939);
      }
      uint64_t v14 = 0;
      goto LABEL_44;
    }
    int v23 = v17;
    int InterfaceRole = IO80211SkywalkInterface::getInterfaceRole(v14);
    if (!v19)
    {
      uint64_t v56 = *((void *)this + 7);
      if (*(void *)v56)
      {
        int v57 = CCLogStream::shouldLog();
        uint64_t v56 = *((void *)this + 7);
        if (v57)
        {
          CCLogStream::logAlert(*(CCLogStream **)v56, "[dk] %s@%d:itemCount %d resource id %d tx comp invalid packet, item ring %p, go next\n", "txCompRingDrain", 1943, v94, v17, v95);
          uint64_t v56 = *((void *)this + 7);
        }
      }
      if (*(unsigned char *)(v56 + 129))
      {
        if ((!*(void *)v56 || (CCLogStream::shouldLogConsole() & 1) == 0)
          && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67110402;
          int v109 = 73;
          __int16 v110 = 2080;
          long long v111 = "txCompRingDrain";
          __int16 v112 = 1024;
          int v113 = 1945;
          __int16 v114 = 1024;
          int v115 = v99;
          __int16 v116 = 1024;
          int v117 = v17;
          __int16 v118 = 2048;
          *(void *)long long v119 = v95;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: TxCompletionDebug: itemCount %d resource id %d tx comp invalid packet, item ring %p, go next\n", buf, 0x2Eu);
        }
        if (**((void **)this + 7) && CCLogStream::shouldLog()) {
          CCLogStream::logInfo(**((CCLogStream ***)this + 7), "[dk] %s@%d:TxCompletionDebug: itemCount %d resource id %d tx comp invalid packet, item ring %p, go next\n");
        }
        goto LABEL_159;
      }
      goto LABEL_44;
    }
    int v25 = InterfaceRole;
    if (AppleBCMWLANPCIeSkywalkPacket::getPktDup((AppleBCMWLANPCIeSkywalkPacket *)v19))
    {
      uint64_t v26 = *((void *)this + 7);
      if (*(unsigned char *)(v26 + 129))
      {
        if ((!*(void *)v26 || (CCLogStream::shouldLogConsole() & 1) == 0)
          && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          int v60 = a3[1];
          int v61 = *((unsigned __int16 *)a3 + 5);
          *(_DWORD *)buf = 67110658;
          int v109 = 73;
          __int16 v110 = 2080;
          long long v111 = "txCompRingDrain";
          __int16 v112 = 1024;
          int v113 = 1953;
          __int16 v114 = 1024;
          int v115 = v23;
          __int16 v116 = 1024;
          int v117 = v60;
          __int16 v118 = 1024;
          *(_DWORD *)long long v119 = v61;
          *(_WORD *)&v119[4] = 1024;
          *(_DWORD *)&v119[6] = v25;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: TxCompletionDebug: Skipping duplicate packet resource id <%d> ifId <%d> flowid <%d> ifRole:%d\n", buf, 0x30u);
        }
        uint64_t v26 = *((void *)this + 7);
        if (*(void *)v26)
        {
          int v62 = CCLogStream::shouldLog();
          uint64_t v26 = *((void *)this + 7);
          if (v62)
          {
            CCLogStream::logInfo(*(CCLogStream **)v26, "[dk] %s@%d:TxCompletionDebug: Skipping duplicate packet resource id <%d> ifId <%d> flowid <%d> ifRole:%d\n", "txCompRingDrain", 1953, v23, a3[1], *((unsigned __int16 *)a3 + 5), v25);
            uint64_t v26 = *((void *)this + 7);
          }
        }
      }
      ++*(void *)(v26 + 224);
      AppleBCMWLANPCIeSkywalkPacketPool::deallocatePacket(*(AppleBCMWLANPCIeSkywalkPacketPool **)(*((void *)this + 7) + 56), v19);
      goto LABEL_44;
    }
    if (((unsigned int (*)(OSMetaClassBase *))v8->__vftable[6].retain)(v8) != a3[2] >> 7 || *a3 != 16)
    {
      uint64_t v58 = *((void *)this + 7);
      if (*(void *)v58)
      {
        int v59 = CCLogStream::shouldLog();
        uint64_t v58 = *((void *)this + 7);
        if (v59)
        {
          unsigned int v79 = *(CCLogStream **)v58;
          int v80 = ((uint64_t (*)(OSMetaClassBase *))v8->__vftable[6].retain)(v8);
          CCLogStream::logAlert(v79, "[dk] %s@%d:Ring Phase=%d msg Phase=%d msg type=%d flowIdValid=%d packet=%p skywalkInterface=%p", "txCompRingDrain", 1965, v80, a3[2] >> 7, *a3, 1, v19, v14);
          uint64_t v58 = *((void *)this + 7);
        }
      }
      if (*(unsigned char *)(v58 + 129))
      {
        if ((!*(void *)v58 || (CCLogStream::shouldLogConsole() & 1) == 0)
          && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          int v75 = ((uint64_t (*)(OSMetaClassBase *))v103->__vftable[6].retain)(v103);
          int v76 = a3[2] >> 7;
          int v77 = *a3;
          *(_DWORD *)buf = 67111170;
          int v109 = 73;
          __int16 v110 = 2080;
          long long v111 = "txCompRingDrain";
          __int16 v112 = 1024;
          int v113 = 1970;
          __int16 v114 = 1024;
          int v115 = v75;
          __int16 v116 = 1024;
          int v117 = v76;
          __int16 v118 = 1024;
          *(_DWORD *)long long v119 = v77;
          *(_WORD *)&v119[4] = 1024;
          *(_DWORD *)&v119[6] = 1;
          __int16 v120 = 2048;
          long long v121 = v19;
          __int16 v122 = 2048;
          long long v123 = v14;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: TxCompletionDebug: Ring Phase=%d msg Phase=%d msg type=%d flowIdValid=%d packet=%p skywalkInterface=%p", buf, 0x44u);
        }
        uint64_t v58 = *((void *)this + 7);
        if (*(void *)v58 && (int v78 = CCLogStream::shouldLog(), v58 = *((void *)this + 7), v78))
        {
          uint64_t v81 = *(CCLogStream **)v58;
          uint64_t v8 = v103;
          int v82 = ((uint64_t (*)(OSMetaClassBase *))v103->__vftable[6].retain)(v103);
          CCLogStream::logInfo(v81, "[dk] %s@%d:TxCompletionDebug: Ring Phase=%d msg Phase=%d msg type=%d flowIdValid=%d packet=%p skywalkInterface=%p", "txCompRingDrain", 1970, v82, a3[2] >> 7, *a3, 1, v19, v14);
          uint64_t v58 = *((void *)this + 7);
        }
        else
        {
          uint64_t v8 = v103;
        }
      }
      AppleBCMWLANPCIeSkywalkPacketPool::deallocatePacket(*(AppleBCMWLANPCIeSkywalkPacketPool **)(v58 + 56), v19);
      ++*(void *)(*((void *)this + 7) + 224);
      goto LABEL_44;
    }
    int v104 = v23;
    __int16 v27 = *((_WORD *)a3 + 7);
    uint64_t Scratch = AppleBCMWLANPCIeSkywalkPacket::getScratch((AppleBCMWLANPCIeSkywalkPacket *)v19);
    if ((*(unsigned char *)(Scratch + 40) & 0x20) != 0)
    {
      *(unsigned char *)(Scratch + 40) &= ~0x20u;
      int v25 = 2;
    }
    int v29 = v27;
    int v106 = kWlToHostTxStatusMap[v27];
    if (v27 > 0xAu) {
      uint64_t v30 = 7;
    }
    else {
      uint64_t v30 = kWlToIO80211NetworkTxStatusMap[v27];
    }
    ((void (*)(IOUserNetworkPacket *, uint64_t))v19->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(v19, v30);
    if (v25 != 2)
    {
      if (v25 == 6)
      {
        if ((_BYTE)v27) {
          int v31 = v106;
        }
        else {
          int v31 = 0;
        }
        AppleBCMWLANPCIeSkywalkPacket::setStatus((AppleBCMWLANPCIeSkywalkPacket *)v19, v31);
        v13 |= 1 << IO80211SkywalkInterface::getInterfaceId(v14);
      }
      goto LABEL_36;
    }
    if (IO80211SkywalkInterface::getInterfaceId(v14) == 3)
    {
      uint64_t v37 = 10;
    }
    else
    {
      int v38 = a3[1];
      if (AppleBCMWLANCore::getProximityInterfaceId(v9) != v38) {
        goto LABEL_51;
      }
      uint64_t v37 = 9;
    }
    uint64_t v14 = (IO80211SkywalkInterface *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)v9 + 1888))(v9, v37);
LABEL_51:
    if (v27 > 0xAu || ((1 << v27) & 0x441) == 0)
    {
      int InterfaceId = IO80211SkywalkInterface::getInterfaceId(v14);
      if (InterfaceId == AppleBCMWLANCore::getProximityInterfaceId(v9)
        && AppleBCMWLANCore::isP2pAirplayActive(v9)
        && AppleBCMWLANCore::isLlwRequeueEnabled(v9))
      {
        mach_absolute_time();
        absolutetime_to_nanoseconds();
        v107 /= 0x3E8uLL;
        uint64_t Ac = AppleBCMWLANPCIeSkywalkPacket::getAc((AppleBCMWLANPCIeSkywalkPacket *)v19);
        __int16 v51 = (const OSMetaClassBase *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)v14 + 1144))(v14, Ac);
        uint64_t v96 = (AppleBCMWLANPCIeSkywalkTxSubmissionQueue *)OSMetaClassBase::safeMetaCast(v51, (const OSMetaClass *)gAppleBCMWLANPCIeSkywalkTxSubmissionQueueMetaClass);
        if (v96 && AppleBCMWLANPCIeSkywalkTxSubmissionQueue::isRequeueSupported(v96))
        {
          if (v107 <= ((uint64_t (*)(IOUserNetworkPacket *))v19->OSObject::OSMetaClassBase::__vftable[1].setDataOffsetAndLength)(v19)) {
            unint64_t v67 = 20000;
          }
          else {
            unint64_t v67 = v107
          }
                - ((uint64_t (*)(IOUserNetworkPacket *))v19->OSObject::OSMetaClassBase::__vftable[1].setDataOffsetAndLength)(v19);
          unint64_t PktRemainingLifeTime = AppleBCMWLANPCIeSkywalkPacket::getPktRemainingLifeTime((AppleBCMWLANPCIeSkywalkPacket *)v19);
          if (PktRemainingLifeTime >= v67) {
            unint64_t v69 = PktRemainingLifeTime - v67;
          }
          else {
            unint64_t v69 = 0;
          }
          AppleBCMWLANPCIeSkywalkPacket::setPktRemainingLifeTime((uint64_t)v19, v69);
          unsigned int FlowQueueIdx = AppleBCMWLANPCIeSkywalkPacket::getFlowQueueIdx((AppleBCMWLANPCIeSkywalkPacket *)v19);
          if (v69 > AppleBCMWLANPCIeSkywalkTxSubmissionQueue::getAvgTxCompLatency(v96, FlowQueueIdx, v67)
            && AppleBCMWLANPCIeSkywalkPacket::getPktRequeueCount((AppleBCMWLANPCIeSkywalkPacket *)v19) < 3)
          {
            AppleBCMWLANPCIeSkywalkTxSubmissionQueue::addPacketToRequeueList((uint64_t)v96, (uint64_t)v19);
            AppleBCMWLANPCIeSkywalkPacket::setPktRequeued((uint64_t)v19, 1);
            AppleBCMWLANPCIeSkywalkPacket::incrPktRequeueCount((uint64_t)v19);
            ++v100;
LABEL_159:
            uint64_t v8 = v103;
            goto LABEL_44;
          }
        }
        else if (**((void **)this + 7) && CCLogStream::shouldLog())
        {
          CCLogStream::logAlert(**((CCLogStream ***)this + 7), "[dk] %s@%d:%s: Failed to requeue packet. Null txSubQ \n", "txCompRingDrain", 2124, "txCompRingDrain");
        }
      }
    }
    if (AppleBCMWLANPCIeSkywalkPacket::getScratch((AppleBCMWLANPCIeSkywalkPacket *)v19))
    {
      long long v39 = (unsigned char *)AppleBCMWLANPCIeSkywalkPacket::getScratch((AppleBCMWLANPCIeSkywalkPacket *)v19);
      v39[45] = AppleBCMWLANPCIeSkywalkPacket::isPktRequeued((AppleBCMWLANPCIeSkywalkPacket *)v19);
      v39[46] = AppleBCMWLANPCIeSkywalkPacket::getPktRequeueCount((AppleBCMWLANPCIeSkywalkPacket *)v19);
      if (v29) {
        ++v39[47];
      }
    }
    else if (**((void **)this + 7) && CCLogStream::shouldLog())
    {
      CCLogStream::logAlert(**((CCLogStream ***)this + 7), "[dk] %s@%d:%s: Scratch header is Null! \n", "txCompRingDrain", 2138, "txCompRingDrain");
    }
    uint64_t v40 = AppleBCMWLANPCIeSkywalkPacket::getScratch((AppleBCMWLANPCIeSkywalkPacket *)v19);
    if (!AppleBCMWLANBusInterfacePCIe::isFWPacketTimestampEnabled(*(AppleBCMWLANBusInterfacePCIe **)(*((void *)this + 7) + 48))
      || (unsigned int v41 = *((_DWORD *)a3 + 5), (v41 & 0x40000000) != 0))
    {
      if (!v40) {
        goto LABEL_69;
      }
    }
    else
    {
      if (((v41 >> 10) & 0x3FF) > ((v41 >> 20) & 0x3FF))
      {
        unsigned int v41 = v41 & 0xC00FFFFF | (((v41 >> 10) & 0x3FF) << 20);
        *((_DWORD *)a3 + 5) = v41;
      }
      if (!v40)
      {
LABEL_69:
        char v46 = 1;
        goto LABEL_70;
      }
      uint64_t v42 = *(void *)(v40 + 20);
      *(void *)(v40 + 4) = v42 + 1000 * (v41 & 0x3FF) * TxChipDelayToUsecMultiplier;
      unsigned int v43 = *((_DWORD *)a3 + 5);
      LOWORD(v44) = v43 & 0x3FF;
      unsigned int v45 = (v43 >> 10) & 0x3FF;
      if ((v43 & 0x3FF) > v45)
      {
        *((_DWORD *)a3 + 5) = v45 | v43 & 0xFFFFFC00;
        uint64_t v42 = *(void *)(v40 + 20);
        int v44 = (v43 >> 10) & 0x3FF;
      }
      *(_DWORD *)uint64_t v40 = (unsigned __int16)(v45 - v44) * TxChipDelayToUsecMultiplier;
      *(void *)(v40 + 12) = v42
                            + 1000
                            * TxChipDelayToUsecMultiplier
                            * (((unint64_t)*((unsigned int *)a3 + 5) >> 20) & 0x3FF);
    }
    *(unsigned char *)(v40 + 42) = a3[12];
    *(_WORD *)(v40 + 34) = ratespec2rate(**((void **)this + 7), *((_DWORD *)a3 + 4));
    *(_WORD *)(v40 + 32) = a3[13];
    char v46 = 0;
    *(_WORD *)(v40 + 36) = AppleBCMWLANPCIeSkywalkPacket::getPktLifetime((AppleBCMWLANPCIeSkywalkPacket *)v19);
LABEL_70:
    AppleBCMWLANPCIeSkywalkPacket::setPktRequeued((uint64_t)v19, 0);
    AppleBCMWLANPCIeSkywalkPacket::resetPktRequeueCount((uint64_t)v19);
    uint64_t v47 = *(OSMetaClassBase **)(*((void *)this + 7) + 88);
    if (!v47 || v103 != v47 || !AppleBCMWLANCore::isSplitTxStatusEnabled(v9) || (v46 & 1) != 0) {
      goto LABEL_36;
    }
    unsigned int v48 = *((unsigned __int16 *)a3 + 7);
    *(unsigned char *)(v40 + 4AppleBCMWLANJoinAdapter::free(this - 3) = 0;
    if (a3[14] == 10)
    {
      *(unsigned char *)(v40 + 4AppleBCMWLANJoinAdapter::free(this - 3) = 4;
LABEL_36:
      uint64_t v8 = v103;
      goto LABEL_37;
    }
    int v52 = (__int16)v48;
    unsigned int v53 = v48 >> 8;
    if (v52 >= 0) {
      char v54 = 2;
    }
    else {
      char v54 = 3;
    }
    if ((v53 & 0x40) == 0) {
      char v54 = 1;
    }
    *(unsigned char *)(v40 + 4AppleBCMWLANJoinAdapter::free(this - 3) = v54;
    *(unsigned char *)(v40 + 44) = 0;
    uint64_t v8 = v103;
    if ((v53 & 0x10) != 0)
    {
      *(unsigned char *)(v40 + 44) = 1;
    }
    else if ((v53 & 8) != 0)
    {
      *(unsigned char *)(v40 + 44) = 2;
    }
LABEL_37:
    AppleBCMWLANPCIeSkywalkPacket::setStatus((AppleBCMWLANPCIeSkywalkPacket *)v19, v106);
    if (v29) {
      ++v97;
    }
    uint64_t v32 = *((void *)this + 7);
    if (*(unsigned char *)(v32 + 129))
    {
      if ((!*(void *)v32 || (CCLogStream::shouldLogConsole() & 1) == 0)
        && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        int v63 = a3[1];
        int v64 = *((unsigned __int16 *)a3 + 5);
        *(_DWORD *)buf = 67110658;
        int v109 = 73;
        __int16 v110 = 2080;
        long long v111 = "txCompRingDrain";
        __int16 v112 = 1024;
        int v113 = 2207;
        __int16 v114 = 1024;
        int v115 = v104;
        __int16 v116 = 1024;
        int v117 = v106;
        __int16 v118 = 1024;
        *(_DWORD *)long long v119 = v63;
        *(_WORD *)&v119[4] = 1024;
        *(_DWORD *)&v119[6] = v64;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: TxCompletionDebug: tx comp status resource id <%d> status <0x%x> ifId <%d> flowid <%d>\n", buf, 0x30u);
      }
      if (**((void **)this + 7) && CCLogStream::shouldLog()) {
        CCLogStream::logInfo(**((CCLogStream ***)this + 7), "[dk] %s@%d:TxCompletionDebug: tx comp status resource id <%d> status <0x%x> ifId <%d> flowid <%d>\n", "txCompRingDrain", 2207, v104, v106, a3[1], *((unsigned __int16 *)a3 + 5));
      }
    }
    BOOL v33 = AppleBCMWLANItemRing::getItemSize((AppleBCMWLANItemRing *)v8) == 24;
    AppleBCMWLANPCIeSkywalk::setTXTimestamp(this, a3, PTMMode, (AppleBCMWLANPCIeSkywalkPacket *)v19, v14, v33);
    uint64_t v34 = (const OSMetaClassBase *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v14 + 1136))(v14);
    uint64_t v35 = OSMetaClassBase::safeMetaCast(v34, (const OSMetaClass *)gAppleBCMWLANPCIeSkywalkTxCompletionQueueMetaClass);
    if (v35)
    {
      int v36 = (AppleBCMWLANPCIeSkywalkTxCompletionQueue *)v35;
      if (((unsigned int (*)(IOUserNetworkPacket *))v19->OSObject::OSMetaClassBase::__vftable[1].SetDataOffset)(v19)) {
        ((void (*)(IOUserNetworkPacket *, uint64_t))v19->OSObject::OSMetaClassBase::__vftable[1].GetDataOffset)(v19, 135528522);
      }
      ++*(void *)(*((void *)this + 7) + 232);
      AppleBCMWLANPCIeSkywalkTxCompletionQueue::stagePacket(v36, (AppleBCMWLANPCIeSkywalkPacket *)v19);
      v13 |= 1 << IO80211SkywalkInterface::getInterfaceId(v14);
    }
    else
    {
      uint64_t v65 = *((void *)this + 7);
      if (*(void *)v65)
      {
        int v66 = CCLogStream::shouldLog();
        uint64_t v65 = *((void *)this + 7);
        if (v66)
        {
          CCLogStream::logCrit(*(CCLogStream **)v65, "[dk] %s@%d:Invalid getTxCompQueue(), go next\n", "txCompRingDrain", 2212);
          uint64_t v65 = *((void *)this + 7);
        }
      }
      if (*(unsigned char *)(v65 + 129))
      {
        if ((!*(void *)v65 || (CCLogStream::shouldLogConsole() & 1) == 0)
          && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109634;
          int v109 = 73;
          __int16 v110 = 2080;
          long long v111 = "txCompRingDrain";
          __int16 v112 = 1024;
          int v113 = 2214;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: TxCompletionDebug: Invalid getTxCompQueue(), go next\n", buf, 0x18u);
        }
        if (**((void **)this + 7) && CCLogStream::shouldLog()) {
          CCLogStream::logInfo(**((CCLogStream ***)this + 7), "[dk] %s@%d:TxCompletionDebug: Invalid getTxCompQueue(), go next\n");
        }
        goto LABEL_159;
      }
    }
LABEL_44:
    a3 += AppleBCMWLANItemRing::getItemSize((AppleBCMWLANItemRing *)v8);
    --v15;
  }
  while (v15);
  if (v100 && AppleBCMWLANCore::isLlwRequeueEnabled(v9)) {
    AppleBCMWLANPCIeSkywalkTxSubmissionQueue::batchedReenqueuePackets(v96);
  }
  if (v13)
  {
    uint64_t v83 = __clz(__rbit32(v13));
    do
    {
      uint64_t v84 = (*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)v9 + 1888))(v9, v83);
      if (v84)
      {
        int v85 = (AppleBCMWLANPCIeSkywalkTxCompletionQueue *)(*(uint64_t (**)(uint64_t))(*(void *)v84 + 1136))(v84);
        int v86 = (*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxCompletionQueue *, void, void))(*(void *)v85 + 120))(v85, 0, 0);
        if (v86)
        {
          uint64_t v87 = *((void *)this + 7);
          if (*(unsigned char *)(v87 + 129))
          {
            int v88 = v86;
            if ((!*(void *)v87 || (CCLogStream::shouldLogConsole() & 1) == 0)
              && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109890;
              int v109 = 73;
              __int16 v110 = 2080;
              long long v111 = "txCompRingDrain";
              __int16 v112 = 1024;
              int v113 = 2281;
              __int16 v114 = 1024;
              int v115 = v88;
              _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: TxCompletionDebug: tx comp enqueue req fail 0x%x\n", buf, 0x1Eu);
            }
            if (**((void **)this + 7) && CCLogStream::shouldLog()) {
              CCLogStream::logInfo(**((CCLogStream ***)this + 7), "[dk] %s@%d:TxCompletionDebug: tx comp enqueue req fail 0x%x\n", "txCompRingDrain", 2281, v88);
            }
          }
          AppleBCMWLANPCIeSkywalkTxCompletionQueue::flushPackets(v85);
        }
      }
      v13 &= ~(1 << v83);
      uint64_t v83 = __clz(__rbit32(v13));
    }
    while (v13);
  }
  unint64_t v12 = v98;
  unsigned int v89 = v99;
  BOOL v10 = (unsigned char *)&kSliceChannelSwitchDwellHistConfig;
LABEL_188:
  uint64_t v90 = v89;
  *(void *)(*((void *)this + 7) + 216) += v89;
  AppleBCMWLANBusInterfacePCIe::updateActiveTxPacketCount(*(void *)(*((void *)this + 7) + 48), -v89);
  unsigned int v91 = (AppleBCMWLANCore *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 7) + 48) + 1104))();
  if (v91)
  {
    uint64_t v92 = (OSDictionary *)v91;
    AppleBCMWLANCore::updateDataPathActivityTimestamp(v91, v12);
    AppleBCMWLANCore::handleDataPathActivity(v92);
  }
  if (v10[1688])
  {
    ((void (*)(OSMetaClassBase *))v8->__vftable[5].retain)(v8);
    (*(void (**)(void))(**(void **)(*((void *)this + 7) + 48) + 784))();
    kdebug_trace();
  }
  return v90;
}

uint64_t ___ZN23AppleBCMWLANPCIeSkywalk32createLowLatencyCompRingCompleteEP30AppleBCMWLANPCIeCompletionRingiPv_block_invoke(void *a1)
{
  return 0;
}

uint64_t AppleBCMWLANPCIeSkywalk::cancelRingMgmtTimers(AppleBCMWLANPCIeSkywalk *this)
{
  uint64_t v2 = *((void *)this + 7);
  if (*(void *)v2)
  {
    int shouldLog = CCLogStream::shouldLog();
    uint64_t v2 = *((void *)this + 7);
    if (shouldLog)
    {
      CCLogStream::logCrit(*(CCLogStream **)v2, "[dk] %s@%d:Cancel skywalk ring mgmt timers\n", "cancelRingMgmtTimers", 695);
      uint64_t v2 = *((void *)this + 7);
    }
  }
  uint64_t result = *(void *)(v2 + 104);
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 136);
    return v5();
  }
  return result;
}

void *AppleBCMWLANPCIeSkywalk::destroyLowLatencyCompRing(void *result, unsigned int a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result[7];
  if (*(unsigned char *)(v4 + 112))
  {
    *(unsigned char *)(v4 + 112) = 0;
    uint64_t result = (void *)(*(uint64_t (**)(void))(**(void **)(result[7] + 104) + 136))(*(void *)(result[7] + 104));
    *(void *)(v3[7] + 12forEachAppleBCMWLANReturnCodes((uint64_t (*)(uint64_t, void, void))printRetCodeName, 0) = 0;
  }
  if (a2 <= 1)
  {
    uint64_t v5 = v3[7];
    BOOL v6 = a2 == 0;
    if (a2) {
      uint64_t v7 = 96;
    }
    else {
      uint64_t v7 = 88;
    }
    if (v6) {
      uint64_t v8 = v5 + 88;
    }
    else {
      uint64_t v8 = v5 + 96;
    }
    if (*(void *)(v5 + v7))
    {
      uint64_t result = (void *)(*(uint64_t (**)(void))(**(void **)(v5 + 48) + 80))(*(void *)(v5 + 48));
      if (result)
      {
        v9[0] = _NSConcreteStackBlock;
        v9[1] = 0x40000000;
        void v9[2] = ___ZN23AppleBCMWLANPCIeSkywalk25destroyLowLatencyCompRingE22LowLatencyCompRingType_block_invoke;
        void v9[3] = &__block_descriptor_tmp_34;
        _OWORD v9[4] = v3;
        v9[5] = v8;
        v9[6] = result;
        (*(void (**)(void *, void *))(*result + 112))(result, v9);
        v10[0] = v3;
        v10[1] = AppleBCMWLANPCIeSkywalk::destroyLowLatencyCompRingComplete;
        void v10[2] = v8;
        uint64_t result = (void *)AppleBCMWLANBusInterfacePCIe::destroyDynamicCompletionRing(*(void *)(v3[7] + 48), *(void *)(v5 + v7), (uint64_t)v10);
        if (result)
        {
          uint64_t result = *(void **)(v5 + v7);
          if (result)
          {
            uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
            *(void *)(v5 + v7) = 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t ___ZN23AppleBCMWLANPCIeSkywalk25destroyLowLatencyCompRingE22LowLatencyCompRingType_block_invoke(uint64_t a1)
{
  return 0;
}

uint64_t AppleBCMWLANPCIeSkywalk::destroyLowLatencyCompRingComplete(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = *a4;
  if (*a4)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    *a4 = 0;
  }
  return result;
}

uint64_t AppleBCMWLANPCIeSkywalk::clearFlowIdInFlowQ(AppleBCMWLANPCIeSkywalk *this, int a2, uint64_t a3, int a4)
{
  uint64_t v4 = 3758097084;
  uint64_t v5 = *((void *)this + 7);
  if (((*(_DWORD *)(v5 + 44) >> a2) & 1) == 0) {
    return 3758097098;
  }
  uint64_t v9 = *(void *)(*(uint64_t (**)(void))(**(void **)(v5 + 48) + 1104))(*(void *)(v5 + 48));
  uint64_t v10 = (*(uint64_t (**)(void))(v9 + 1888))();
  if (v10)
  {
    uint64_t v11 = v10;
    if ((*(uint64_t (**)(uint64_t))(*(void *)v10 + 1024))(v10))
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)v11 + 1024))(v11))
      {
        (*(void (**)(uint64_t))(*(void *)v11 + 1024))(v11);
        if (CCLogStream::shouldLog())
        {
          unsigned __int16 v17 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 1024))(v11);
          CCLogStream::logInfo(v17, "[dk] %s@%d:Enter ifId %d ac %d\n", "clearFlowIdInFlowQ", 779, a2, a3);
        }
      }
    }
    unint64_t v12 = (const OSMetaClassBase *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 1096))(v11);
    unsigned int v13 = OSMetaClassBase::safeMetaCast(v12, (const OSMetaClass *)gAppleBCMWLANPCIeSkywalkMulticastQueueMetaClass);
    if (v13) {
      AppleBCMWLANPCIeSkywalkMulticastQueue::clearFlowIdInFlowQ((AppleBCMWLANPCIeSkywalkMulticastQueue *)v13, a4);
    }
    uint64_t v14 = (const OSMetaClassBase *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v11 + 1144))(v11, a3);
    unsigned int v15 = OSMetaClassBase::safeMetaCast(v14, (const OSMetaClass *)gAppleBCMWLANPCIeSkywalkTxSubmissionQueueMetaClass);
    if (v15) {
      AppleBCMWLANPCIeSkywalkTxSubmissionQueue::clearFlowIdInFlowQ((AppleBCMWLANPCIeSkywalkTxSubmissionQueue *)v15, a4);
    }
    return 0;
  }
  return v4;
}

uint64_t AppleBCMWLANPCIeSkywalk::attachTxSubmRing(AppleBCMWLANPCIeSkywalk *this, AppleBCMWLANPCIeTransmitFlowRing *a2, int a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = 3758097084;
  uint64_t v6 = *((void *)this + 7);
  if (((*(_DWORD *)(v6 + 44) >> a3) & 1) == 0) {
    return 3758097098;
  }
  uint64_t v12 = *(void *)(*(uint64_t (**)(void))(**(void **)(v6 + 48) + 1104))(*(void *)(v6 + 48));
  uint64_t v13 = (*(uint64_t (**)(void))(v12 + 1888))();
  if (v13)
  {
    uint64_t v14 = v13;
    if ((*(uint64_t (**)(uint64_t))(*(void *)v13 + 1024))(v13))
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)v14 + 1024))(v14))
      {
        (*(void (**)(uint64_t))(*(void *)v14 + 1024))(v14);
        if (CCLogStream::shouldLog())
        {
          uint64_t v24 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 1024))(v14);
          CCLogStream::logInfo(v24, "[dk] %s@%d:Enter ifId %d ac %d flowId:%u\n", "attachTxSubmRing", 810, a3, a4, a5);
        }
      }
    }
    unsigned int v15 = (const OSMetaClassBase *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 1096))(v14);
    unint64_t v16 = OSMetaClassBase::safeMetaCast(v15, (const OSMetaClass *)gAppleBCMWLANPCIeSkywalkMulticastQueueMetaClass);
    if (v16)
    {
      unsigned __int16 v17 = (AppleBCMWLANPCIeSkywalkMulticastQueue *)v16;
      if (AppleBCMWLANPCIeSkywalkMulticastQueue::getFlowId((AppleBCMWLANPCIeSkywalkMulticastQueue *)v16) == a5)
      {
        AppleBCMWLANPCIeSkywalkMulticastQueue::setFWRing(v17, a2);
        (*(void (**)(AppleBCMWLANPCIeSkywalkMulticastQueue *))(*(void *)v17 + 64))(v17);
        return 0;
      }
    }
    int v18 = (AppleBCMWLANCore *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 7) + 48) + 1104))(*(void *)(*((void *)this + 7) + 48));
    if (AppleBCMWLANCore::getProximityInterfaceId(v18) == a3)
    {
      if (!AppleBCMWLANPCIeTransmitFlowRing::isLowLatencyRing(a2))
      {
LABEL_17:
        uint64_t v20 = (const OSMetaClassBase *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v14 + 1144))(v14, a4);
        uint64_t v21 = OSMetaClassBase::safeMetaCast(v20, (const OSMetaClass *)gAppleBCMWLANPCIeSkywalkTxSubmissionQueueMetaClass);
        int isLowLatencyRing = AppleBCMWLANPCIeTransmitFlowRing::isLowLatencyRing(a2);
        AppleBCMWLANPCIeSkywalkTxSubmissionQueue::setFWRing((AppleBCMWLANPCIeSkywalkTxSubmissionQueue *)v21, a2, a5, isLowLatencyRing);
        ((void (*)(OSMetaClassBase *))v21->__vftable[6].release)(v21);
        return 0;
      }
    }
    else if (a3 != 3 || !AppleBCMWLANPCIeTransmitFlowRing::isLowLatencyRing(a2))
    {
      goto LABEL_17;
    }
    unsigned int v19 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 7) + 48)
                                                                             + 1104))(*(void *)(*((void *)this + 7)
                                                                                                  + 48))
                              + 1888);
    uint64_t v14 = v19();
    goto LABEL_17;
  }
  return v5;
}

uint64_t AppleBCMWLANPCIeSkywalk::attachDefaultTxCompRing(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 56) + 48) + 1104))(*(void *)(*(void *)(a1 + 56) + 48));
  if (!v4) {
    return *(void *)(*(void *)(a1 + 56) + 72);
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a1 + 56);
  unsigned int v7 = *(_DWORD *)(v6 + 44);
  uint64_t v8 = v6 + 72;
  if (*(void *)(v6 + 72)
    || (uint64_t v17 = *(void *)(v6 + 48),
        uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 80))(v17),
        !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(AppleBCMWLANPCIeSkywalk *, OSMetaClassBase *, unsigned __int8 *, unsigned int), uint64_t (*)(AppleBCMWLANPCIeSkywalk *__hidden, AppleBCMWLANByteRing *, int, void *)))(*(void *)v17 + 1088))(v17, v8, a2, a1, v18, AppleBCMWLANPCIeSkywalk::txCompRingDrain, AppleBCMWLANPCIeSkywalk::txCompRingError)))
  {
    if (v7)
    {
      uint64_t v9 = __clz(__rbit32(v7));
      do
      {
        uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 1888))(v5, v9);
        if (v10)
        {
          uint64_t v11 = v10;
          if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 1000))(v10))
          {
            uint64_t v12 = (const OSMetaClassBase *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 1136))(v11);
            uint64_t v13 = OSMetaClassBase::safeMetaCast(v12, (const OSMetaClass *)gAppleBCMWLANPCIeSkywalkTxCompletionQueueMetaClass);
            if (v13)
            {
              uint64_t v14 = (uint64_t)v13;
              if ((*(uint64_t (**)(uint64_t))(*(void *)v11 + 1024))(v11)
                && (*(uint64_t (**)(uint64_t))(*(void *)v11 + 1024))(v11))
              {
                (*(void (**)(uint64_t))(*(void *)v11 + 1024))(v11);
                if (CCLogStream::shouldLog())
                {
                  unsigned int v15 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 1024))(v11);
                  CCLogStream::logInfo(v15, "[dk] %s@%d:attach txCompletion ring\n", "attachDefaultTxCompRing", 862);
                }
              }
              AppleBCMWLANPCIeSkywalkTxCompletionQueue::setFirmwareRing(v14, *(void *)(*(void *)(a1 + 56) + 72));
              (*(void (**)(uint64_t))(*(void *)v14 + 192))(v14);
            }
          }
        }
        v7 &= ~(1 << v9);
        uint64_t v9 = __clz(__rbit32(v7));
      }
      while (v7);
    }
    return *(void *)(*(void *)(a1 + 56) + 72);
  }
  return 0;
}

uint64_t AppleBCMWLANPCIeSkywalk::detachRxSubmFwQueue(AppleBCMWLANPCIeSkywalk *this)
{
  uint64_t v1 = *((void *)this + 7);
  if (!v1) {
    return IOLog("AppleBCMWLANPCIeSkywalk::detachRxSubmFwQueue, no ivars\n");
  }
  uint64_t v2 = *(AppleBCMWLANPCIeSkywalkRxSubmissionQueue **)(v1 + 64);
  if (v2) {
    return AppleBCMWLANPCIeSkywalkRxSubmissionQueue::setFWRing(v2, 0);
  }
  else {
    return IOLog("AppleBCMWLANPCIeSkywalk::detachRxSubmFwQueue, no queue\n");
  }
}

uint64_t AppleBCMWLANPCIeSkywalk::detachRxCompFwQueue(AppleBCMWLANPCIeSkywalk *this)
{
  uint64_t v1 = *((void *)this + 7);
  if (v1)
  {
    uint64_t v3 = *(void *)(v1 + 48);
    if (v3)
    {
      unsigned int v4 = *(_DWORD *)(v1 + 44);
      if ((*(uint64_t (**)(uint64_t))(*(void *)v3 + 1104))(v3))
      {
        if (v4)
        {
          char v5 = __clz(__rbit32(v4));
          do
          {
            uint64_t v6 = *(void *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 7) + 48) + 1104))(*(void *)(*((void *)this + 7) + 48));
            uint64_t v7 = (*(uint64_t (**)(void))(v6 + 1888))();
            if (v7)
            {
              uint64_t v8 = v7;
              if ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 1024))(v7))
              {
                if ((*(uint64_t (**)(uint64_t))(*(void *)v8 + 1024))(v8))
                {
                  (*(void (**)(uint64_t))(*(void *)v8 + 1024))(v8);
                  if (CCLogStream::shouldLog())
                  {
                    uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 1024))(v8);
                    CCLogStream::logInfo(v12, "[dk] %s@%d:detachRxCompRing\n", "detachRxCompFwQueue", 901);
                  }
                }
              }
              uint64_t v9 = (const OSMetaClassBase *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 1128))(v8);
              uint64_t v10 = OSMetaClassBase::safeMetaCast(v9, (const OSMetaClass *)gAppleBCMWLANPCIeSkywalkRxCompletionQueueMetaClass);
              if (v10)
              {
                uint64_t v11 = (uint64_t)v10;
                ((void (*)(OSMetaClassBase *))v10->__vftable[4].Dispatch)(v10);
                (*(void (**)(uint64_t))(*(void *)v11 + 208))(v11);
                AppleBCMWLANPCIeSkywalkRxCompletionQueue::setFirmwareRing(v11, 0);
              }
            }
            v4 &= ~(1 << v5);
            char v5 = __clz(__rbit32(v4));
          }
          while (v4);
        }
        *(void *)(*((void *)this + 7) + 8forEachAppleBCMWLANReturnCodes((uint64_t (*)(uint64_t, void, void))printRetCodeName, 0) = 0;
        AppleBCMWLANPCIeSkywalkPacketPool::rxTrackerFlush(*(OSObject **)(*((void *)this + 7) + 56));
        uint64_t result = *(void *)(*((void *)this + 7) + 8);
        if (result)
        {
          uint64_t result = CCLogStream::shouldLog();
          if (result) {
            return CCLogStream::logInfo(*(CCLogStream **)(*((void *)this + 7) + 8), "[dk] %s@%d:Skywalk RX completion fw queue detach done\n", "detachRxCompFwQueue", 913);
          }
        }
        return result;
      }
    }
    uint64_t v14 = "AppleBCMWLANPCIeSkywalk::detachRxCompFwQueue, no bus/driver\n";
  }
  else
  {
    uint64_t v14 = "AppleBCMWLANPCIeSkywalk::detachRxCompFwQueue, no ivars\n";
  }
  return IOLog(v14);
}

void *AppleBCMWLANPCIeSkywalk::detachTxCompFwQueue(AppleBCMWLANPCIeSkywalk *this)
{
  uint64_t v1 = *((void *)this + 7);
  if (v1)
  {
    uint64_t v3 = *(void *)(v1 + 48);
    if (v3)
    {
      unsigned int v4 = *(_DWORD *)(v1 + 44);
      if ((*(uint64_t (**)(uint64_t))(*(void *)v3 + 1104))(v3))
      {
        if (v4)
        {
          char v5 = __clz(__rbit32(v4));
          do
          {
            uint64_t v6 = *(void *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 7) + 48) + 1104))(*(void *)(*((void *)this + 7) + 48));
            uint64_t v7 = (*(uint64_t (**)(void))(v6 + 1888))();
            if (v7)
            {
              uint64_t v8 = v7;
              uint64_t v9 = (const OSMetaClassBase *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 1136))(v7);
              uint64_t v10 = OSMetaClassBase::safeMetaCast(v9, (const OSMetaClass *)gAppleBCMWLANPCIeSkywalkTxCompletionQueueMetaClass);
              if (v10)
              {
                uint64_t v11 = (AppleBCMWLANPCIeSkywalkTxCompletionQueue *)v10;
                if ((*(uint64_t (**)(uint64_t))(*(void *)v8 + 1024))(v8))
                {
                  if ((*(uint64_t (**)(uint64_t))(*(void *)v8 + 1024))(v8))
                  {
                    (*(void (**)(uint64_t))(*(void *)v8 + 1024))(v8);
                    if (CCLogStream::shouldLog())
                    {
                      uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 1024))(v8);
                      CCLogStream::logInfo(v12, "[dk] %s@%d:detachTxCompRing\n", "detachTxCompFwQueue", 933);
                    }
                  }
                }
                AppleBCMWLANPCIeSkywalkTxCompletionQueue::flushPackets(v11);
                (*(void (**)(AppleBCMWLANPCIeSkywalkTxCompletionQueue *))(*(void *)v11 + 200))(v11);
                AppleBCMWLANPCIeSkywalkTxCompletionQueue::setFirmwareRing((uint64_t)v11, 0);
              }
            }
            v4 &= ~(1 << v5);
            char v5 = __clz(__rbit32(v4));
          }
          while (v4);
        }
        *(void *)(*((void *)this + 7) + 72) = 0;
        uint64_t v13 = *(OSObject **)(*((void *)this + 7) + 56);
        return AppleBCMWLANPCIeSkywalkPacketPool::txTrackerFlush(v13);
      }
    }
    unsigned int v15 = "AppleBCMWLANPCIeSkywalk::detachTxCompFwQueue, no bus/driver\n";
  }
  else
  {
    unsigned int v15 = "AppleBCMWLANPCIeSkywalk::detachTxCompFwQueue, no ivars\n";
  }
  return (void *)IOLog(v15);
}

uint64_t AppleBCMWLANPCIeSkywalk::detachTxSubmFwQueue(AppleBCMWLANPCIeSkywalk *this, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v5 = *((void *)this + 7);
  if (!v5)
  {
    IOLog("AppleBCMWLANPCIeSkywalk::detachTxSubmFwQueue, no ivars\n");
    return 3758096385;
  }
  uint64_t v7 = *(void *)(v5 + 48);
  if (!v7 || !(*(uint64_t (**)(uint64_t))(*(void *)v7 + 1104))(v7))
  {
    IOLog("AppleBCMWLANPCIeSkywalk::detachTxSubmFwQueue, no bus/driver\n");
    return 3758096385;
  }
  uint64_t v12 = *((void *)this + 7);
  if (((*(_DWORD *)(v12 + 44) >> a2) & 1) == 0) {
    return 3758096385;
  }
  uint64_t v13 = (*(uint64_t (**)(void))(**(void **)(v12 + 48) + 1104))(*(void *)(v12 + 48));
  if (!v13) {
    return 3758096385;
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 1888))(v13, a2);
  if (!v14) {
    return 3758096385;
  }
  uint64_t v15 = v14;
  if ((*(uint64_t (**)(uint64_t))(*(void *)v14 + 1024))(v14))
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v15 + 1024))(v15))
    {
      (*(void (**)(uint64_t))(*(void *)v15 + 1024))(v15);
      if (CCLogStream::shouldLog())
      {
        uint64_t v24 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 1024))(v15);
        CCLogStream::logInfo(v24, "[dk] %s@%d:ifid %u ac %u flowid %u\n", "detachTxSubmFwQueue", 968, a2, a3, a4);
      }
    }
  }
  unint64_t v16 = (const OSMetaClassBase *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 1096))(v15);
  uint64_t v17 = OSMetaClassBase::safeMetaCast(v16, (const OSMetaClass *)gAppleBCMWLANPCIeSkywalkMulticastQueueMetaClass);
  if (v17)
  {
    uint64_t v18 = (AppleBCMWLANPCIeSkywalkMulticastQueue *)v17;
    if (AppleBCMWLANPCIeSkywalkMulticastQueue::getFlowId((AppleBCMWLANPCIeSkywalkMulticastQueue *)v17) == a4)
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)v15 + 1024))(v15)
        && (*(uint64_t (**)(uint64_t))(*(void *)v15 + 1024))(v15))
      {
        (*(void (**)(uint64_t))(*(void *)v15 + 1024))(v15);
        if (CCLogStream::shouldLog())
        {
          uint64_t v26 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 1024))(v15);
          CCLogStream::logInfo(v26, "[dk] %s@%d:detach tx mc common fw queue, flow id %d\n", "detachTxSubmFwQueue", 973, a4);
        }
      }
      (*(void (**)(AppleBCMWLANPCIeSkywalkMulticastQueue *))(*(void *)v18 + 72))(v18);
      AppleBCMWLANPCIeSkywalkMulticastQueue::setFWRing(v18, 0);
      return 0;
    }
  }
  unsigned int v19 = (AppleBCMWLANCore *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 7) + 48) + 1104))(*(void *)(*((void *)this + 7) + 48));
  if (AppleBCMWLANCore::getProximityInterfaceId(v19) == a2)
  {
    if (a5)
    {
LABEL_23:
      uint64_t v20 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 7)
                                                                                             + 48)
                                                                               + 1104))(*(void *)(*((void *)this + 7) + 48))
                                + 1888);
      uint64_t v15 = v20();
    }
  }
  else if (a2 == 3 && a5)
  {
    goto LABEL_23;
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)v15 + 1024))(v15))
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v15 + 1024))(v15))
    {
      (*(void (**)(uint64_t))(*(void *)v15 + 1024))(v15);
      if (CCLogStream::shouldLog())
      {
        int v25 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 1024))(v15);
        CCLogStream::logInfo(v25, "[dk] %s@%d:detach tx uc queue ifId %d, ac %d, flowId %d\n", "detachTxSubmFwQueue", 987, a2, a3, a4);
      }
    }
  }
  uint64_t v21 = (const OSMetaClassBase *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 1144))(v15, a3);
  BOOL v22 = OSMetaClassBase::safeMetaCast(v21, (const OSMetaClass *)gAppleBCMWLANPCIeSkywalkTxSubmissionQueueMetaClass);
  if (v22)
  {
    AppleBCMWLANPCIeSkywalkTxSubmissionQueue::setFWRing((AppleBCMWLANPCIeSkywalkTxSubmissionQueue *)v22, 0, a4, a5);
    return 0;
  }
  return 3758096385;
}

uint64_t AppleBCMWLANPCIeSkywalk::disableAllSubmissionQueue(AppleBCMWLANPCIeSkywalk *this)
{
  uint64_t v1 = *((void *)this + 7);
  unsigned int v2 = *(_DWORD *)(v1 + 44);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 48) + 1104))(*(void *)(v1 + 48));
  if (result) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v5 = result;
    uint64_t v6 = __clz(__rbit32(v2));
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 1888))(v5, v6);
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1176))(result);
      }
      v2 &= ~(1 << v6);
      uint64_t v6 = __clz(__rbit32(v2));
    }
    while (v2);
  }
  return result;
}

uint64_t AppleBCMWLANPCIeSkywalk::enableAllSubmissionQueue(AppleBCMWLANPCIeSkywalk *this)
{
  uint64_t v1 = *((void *)this + 7);
  unsigned int v2 = *(_DWORD *)(v1 + 44);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 48) + 1104))(*(void *)(v1 + 48));
  if (result) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v5 = result;
    uint64_t v6 = __clz(__rbit32(v2));
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 1888))(v5, v6);
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1168))(result);
      }
      v2 &= ~(1 << v6);
      uint64_t v6 = __clz(__rbit32(v2));
    }
    while (v2);
  }
  return result;
}

uint64_t AppleBCMWLANPCIeSkywalk::attachTxSubmissionQueues(AppleBCMWLANPCIeSkywalk *this, OSMetaClassBase *anObject)
{
  BOOL v4 = OSMetaClassBase::safeMetaCast(anObject, (const OSMetaClass *)gAppleBCMWLANSkywalkInterfaceMetaClass);
  if (((uint64_t (*)(OSMetaClassBase *))anObject->__vftable[25].isEqualTo)(anObject)
    && ((uint64_t (*)(OSMetaClassBase *))anObject->__vftable[25].isEqualTo)(anObject)
    && (((void (*)(OSMetaClassBase *))anObject->__vftable[25].isEqualTo)(anObject),
        CCLogStream::shouldLog()))
  {
    uint64_t v13 = (CCLogStream *)((uint64_t (*)(OSMetaClassBase *))anObject->__vftable[25].isEqualTo)(anObject);
    CCLogStream::logInfo(v13, "[dk] %s@%d:Enter\n", "attachTxSubmissionQueues", 1060);
    if (!v4) {
      goto LABEL_7;
    }
  }
  else if (!v4)
  {
    goto LABEL_7;
  }
  if (IO80211SkywalkInterface::getInterfaceRole((IO80211SkywalkInterface *)v4) != 1
    || (AppleBCMWLANSkywalkInterface::isDataPathConnected((AppleBCMWLANSkywalkInterface *)v4) & 1) != 0)
  {
LABEL_7:
    if (IO80211SkywalkInterface::getInterfaceRole((IO80211SkywalkInterface *)anObject) == 2
      && (((uint64_t (*)(OSMetaClassBase *))anObject->__vftable[25].getMetaClass)(anObject) & 1) == 0)
    {
      uint64_t result = **((void **)this + 7);
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result) {
          return CCLogStream::logAlert(**((CCLogStream ***)this + 7), "[dk] %s@%d:Request to attach LLW, before interface is enabled\n");
        }
      }
    }
    else
    {
      uint64_t v5 = (const OSMetaClassBase *)((uint64_t (*)(OSMetaClassBase *))anObject->__vftable[27].release)(anObject);
      uint64_t v6 = OSMetaClassBase::safeMetaCast(v5, (const OSMetaClass *)gAppleBCMWLANPCIeSkywalkMulticastQueueMetaClass);
      if (v6)
      {
        uint64_t v7 = v6;
        ((void (*)(OSMetaClassBase *))v6->__vftable[1].isEqualTo)(v6);
        ((void (*)(OSMetaClassBase *))v7->__vftable[3].getMetaClass)(v7);
      }
      uint64_t v8 = 3;
      do
      {
        uint64_t v9 = (const OSMetaClassBase *)((uint64_t (*)(OSMetaClassBase *, uint64_t))anObject->__vftable[28].isEqualTo)(anObject, v8);
        uint64_t v10 = OSMetaClassBase::safeMetaCast(v9, (const OSMetaClass *)gAppleBCMWLANPCIeSkywalkTxSubmissionQueueMetaClass);
        if (v10)
        {
          uint64_t v11 = v10;
          *(_DWORD *)(*((void *)this + 7) + 476) += ((uint64_t (*)(OSMetaClassBase *))v10->__vftable[5].Dispatch)(v10);
          ((void (*)(OSMetaClassBase *))v11->__vftable[6].release)(v11);
          ((void (*)(OSMetaClassBase *, void, void))v11->__vftable[3].retain)(v11, 0, 0);
        }
        uint64_t v8 = (v8 - 1);
      }
      while (v8 != -1);
      uint64_t result = **((void **)this + 7);
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result) {
          return CCLogStream::logInfo(**((CCLogStream ***)this + 7), "[dk] %s@%d:Packets trashed on roam in (AQM: %d  TxSubQ: %d)\n", "attachTxSubmissionQueues", 1108, *(_DWORD *)(*((void *)this + 7) + 480), *(_DWORD *)(*((void *)this + 7) + 476));
        }
      }
    }
    return result;
  }
  uint64_t result = **((void **)this + 7);
  if (result)
  {
    uint64_t result = CCLogStream::shouldLog();
    if (result) {
      return CCLogStream::logAlert(**((CCLogStream ***)this + 7), "[dk] %s@%d:Request to attach, while not connected\n");
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalk::attachTxSubmissionQueues(AppleBCMWLANPCIeSkywalk *this, OSMetaClassBase *a2)
{
  return AppleBCMWLANPCIeSkywalk::attachTxSubmissionQueues((AppleBCMWLANPCIeSkywalk *)((char *)this - 40), a2);
}

uint64_t AppleBCMWLANPCIeSkywalk::retrievePendingPacketsOnRoam(uint64_t this, unsigned int *a2, unsigned int *a3)
{
  *a2 = *(_DWORD *)(*(void *)(this + 56) + 480);
  *a3 = *(_DWORD *)(*(void *)(this + 56) + 476);
  return this;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalk::retrievePendingPacketsOnRoam(uint64_t this, unsigned int *a2, unsigned int *a3)
{
  *a2 = *(_DWORD *)(*(void *)(this + 16) + 480);
  *a3 = *(_DWORD *)(*(void *)(this + 16) + 476);
  return this;
}

OSMetaClassBase *AppleBCMWLANPCIeSkywalk::detachTxSubmissionQueues(AppleBCMWLANPCIeSkywalk *this, IO80211SkywalkInterface *a2)
{
  if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a2 + 1024))(a2))
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a2 + 1024))(a2))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a2 + 1024))(a2);
      if (CCLogStream::shouldLog())
      {
        uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a2 + 1024))(a2);
        CCLogStream::logInfo(v11, "[dk] %s@%d:Enter\n", "detachTxSubmissionQueues", 1123);
      }
    }
  }
  uint64_t v4 = 0;
  do
  {
    uint64_t v5 = (const OSMetaClassBase *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a2 + 1144))(a2, v4);
    uint64_t v6 = OSMetaClassBase::safeMetaCast(v5, (const OSMetaClass *)gAppleBCMWLANPCIeSkywalkTxSubmissionQueueMetaClass);
    if (v6)
    {
      uint64_t v7 = v6;
      ((void (*)(OSMetaClassBase *))v6->__vftable[6].Dispatch)(v6);
      ((void (*)(OSMetaClassBase *))v7->__vftable[3].Dispatch)(v7);
      ((void (*)(OSMetaClassBase *))v7->__vftable[6].getMetaClass)(v7);
    }
    uint64_t v4 = (v4 + 1);
  }
  while (v4 != 4);
  uint64_t v8 = (const OSMetaClassBase *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a2 + 1096))(a2);
  uint64_t result = OSMetaClassBase::safeMetaCast(v8, (const OSMetaClass *)gAppleBCMWLANPCIeSkywalkMulticastQueueMetaClass);
  if (result)
  {
    uint64_t v10 = result;
    AppleBCMWLANPCIeSkywalkMulticastQueue::setFWRing((AppleBCMWLANPCIeSkywalkMulticastQueue *)result, 0);
    uint64_t result = (OSMetaClassBase *)((uint64_t (*)(OSMetaClassBase *))v10->__vftable[1].Dispatch)(v10);
  }
  *(_DWORD *)(*((void *)this + 7) + 476) = 0;
  *(_DWORD *)(*((void *)this + 7) + 48forEachAppleBCMWLANReturnCodes((uint64_t (*)(uint64_t, void, void))printRetCodeName, 0) = 0;
  return result;
}

OSMetaClassBase *non-virtual thunk to'AppleBCMWLANPCIeSkywalk::detachTxSubmissionQueues(AppleBCMWLANPCIeSkywalk *this, IO80211SkywalkInterface *a2)
{
  return AppleBCMWLANPCIeSkywalk::detachTxSubmissionQueues((AppleBCMWLANPCIeSkywalk *)((char *)this - 40), a2);
}

uint64_t AppleBCMWLANPCIeSkywalk::findFlowIdWithFlowHash(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = *(void *)(a1 + 56);
  unsigned int v5 = *(_DWORD *)(v4 + 44);
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(v4 + 48) + 1104))(*(void *)(v4 + 48));
  if (v6) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  uint64_t v8 = 0xFFFFLL;
  if (v7) {
    return v8;
  }
  uint64_t v9 = v6;
  uint64_t v10 = __clz(__rbit32(v5));
  while (1)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 1888))(v9, v10);
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = (const OSMetaClassBase *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 1096))(v11);
      uint64_t v14 = OSMetaClassBase::safeMetaCast(v13, (const OSMetaClass *)gAppleBCMWLANPCIeSkywalkMulticastQueueMetaClass);
      if (v14)
      {
        uint64_t v15 = (AppleBCMWLANPCIeSkywalkMulticastQueue *)v14;
        if (*(void *)AppleBCMWLANPCIeSkywalkMulticastQueue::getFlowHash((AppleBCMWLANPCIeSkywalkMulticastQueue *)v14) == *(void *)a2)
        {
          uint64_t FlowId = AppleBCMWLANPCIeSkywalkMulticastQueue::getFlowId(v15);
          if (FlowId != 0xFFFF) {
            return FlowId;
          }
          goto LABEL_15;
        }
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 1184))(v12)) {
        break;
      }
    }
LABEL_15:
    v5 &= ~(1 << v10);
    uint64_t v10 = __clz(__rbit32(v5));
    if (!v5) {
      return 0xFFFFLL;
    }
  }
  uint64_t v17 = 0;
  while (1)
  {
    uint64_t v18 = (const OSMetaClassBase *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 1144))(v12, v17);
    unsigned int v19 = OSMetaClassBase::safeMetaCast(v18, (const OSMetaClass *)gAppleBCMWLANPCIeSkywalkTxSubmissionQueueMetaClass);
    uint64_t FlowIDForHash = AppleBCMWLANPCIeSkywalkTxSubmissionQueue::getFlowIDForHash((uint64_t)v19, a2);
    if (FlowIDForHash != 0xFFFF) {
      break;
    }
    uint64_t v17 = (v17 + 1);
    if (v17 >= (*(unsigned int (**)(uint64_t))(*(void *)v12 + 1184))(v12)) {
      goto LABEL_15;
    }
  }
  uint64_t v8 = FlowIDForHash;
  if (**(void **)(a1 + 56) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(**(CCLogStream ***)(a1 + 56), "[dk] %s@%d:uc flow found ac %d interface %d flow id %d\n", "findFlowIdWithFlowHash", 1174, a2[1], *a2, v8);
  }
  return v8;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalk::findFlowIdWithFlowHash(uint64_t a1, unsigned __int8 *a2)
{
  return AppleBCMWLANPCIeSkywalk::findFlowIdWithFlowHash(a1 - 40, a2);
}

uint64_t AppleBCMWLANPCIeSkywalk::handleRxNanDataInterfacePacket(AppleBCMWLANPCIeSkywalk *this, AppleBCMWLANPCIeSkywalkPacket *a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  unsigned int v5 = *a4;
  if (v5 > 0x1B)
  {
    uint64_t v10 = (*(uint64_t (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)a2 + 480))(a2);
    uint64_t v11 = v10 + IO80211NetworkPacket::getHeadroom(a2);
    if (__PAIR64__(*(unsigned __int8 *)(v11 + 15), *(unsigned __int8 *)(v11 + 14)) == 0xAA000000AALL
      && *(unsigned char *)(v11 + 16) == 3
      && !*(unsigned char *)(v11 + 17)
      && *(unsigned char *)(v11 + 18) == 23
      && *(unsigned __int8 *)(v11 + 19) == 242)
    {
      int v12 = *(unsigned __int8 *)(v11 + 26) - 1;
      if ((*(unsigned char *)(v11 + 26) - 1) <= 1u)
      {
        if (v5 - 28 >= 2)
        {
          unsigned __int16 v17 = 0;
          uint64_t v18 = v11 + 28;
          while (1)
          {
            uint64_t v19 = *(unsigned __int8 *)(v18 + 1);
            uint64_t v20 = v19 + 2;
            v17 += v19 + 2;
            if (v17 > (unsigned __int16)(v5 - 28)) {
              break;
            }
            if (*(unsigned char *)(v18 + 1))
            {
              if (*(unsigned char *)v18 != 1 || v19 == 1) {
                return 0;
              }
              int v22 = *(_DWORD *)(v18 + 10);
              *(_WORD *)(v11 + 1forEachAppleBCMWLANReturnCodes((uint64_t (*)(uint64_t, void, void))printRetCodeName, 0) = *(_WORD *)(v18 + 14);
              *(_DWORD *)(v11 + 6) = v22;
              int v23 = *(_DWORD *)(v18 + 4);
              *(_WORD *)(v11 + 4) = *(_WORD *)(v18 + 8);
              *(_DWORD *)uint64_t v11 = v23;
              v18 += v20;
              if (--v12 < 2u) {
                continue;
              }
            }
            unsigned __int16 v13 = v17 + 16;
            goto LABEL_14;
          }
        }
        return 0;
      }
      unsigned __int16 v13 = 16;
LABEL_14:
      uint64_t v14 = v11 + v13;
      uint64_t v15 = *(void *)v11;
      *(_DWORD *)(v14 + 8) = *(_DWORD *)(v11 + 8);
      *(void *)uint64_t v14 = v15;
      *a3 += v13;
      unsigned __int16 v16 = *a4 - v13;
      *a4 = v16;
      (*(void (**)(AppleBCMWLANPCIeSkywalkPacket *, void))(*(void *)a2 + 216))(a2, v16);
      (*(void (**)(AppleBCMWLANPCIeSkywalkPacket *, void))(*(void *)a2 + 232))(a2, *a3);
      IO80211NetworkPacket::setLinkHeaderOffset(a2, *a3);
    }
    return 1;
  }
  else
  {
    uint64_t result = **((void **)this + 7);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        CCLogStream::logAlert(**((CCLogStream ***)this + 7), "[dk] %s@%d:%s[%d] : ERROR:Discarding due to insufficent length (remain=%d offset = %d)\n", "handleRxNanDataInterfacePacket", 1221, "handleRxNanDataInterfacePacket", 1221, v5, *a3);
        return 0;
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANPCIeSkywalk::getRxTimeStamp(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  *(void *)(a2 + 4) = 0;
  uint64_t result = AppleBCMWLANBusInterfacePCIe::getRxChipDelayToUsecMultiplier(*(AppleBCMWLANBusInterfacePCIe **)(*(void *)(a1 + 56) + 48));
  if (a4 && (unsigned int v9 = *(_DWORD *)(a3 + 36), v9 >> 28 == 14))
  {
    unint64_t v10 = (unint64_t)(((*(unsigned int *)(a3 + 32) | ((unint64_t)(v9 & 0xFFFFFFF) << 32))
                            * (unsigned __int128)0x20C49BA5E353F7DuLL) >> 64) >> 3;
    *(_DWORD *)(a2 + 2forEachAppleBCMWLANReturnCodes((uint64_t (*)(uint64_t, void, void))printRetCodeName, 0) = v10;
  }
  else
  {
    *(_DWORD *)(a2 + 2forEachAppleBCMWLANReturnCodes((uint64_t (*)(uint64_t, void, void))printRetCodeName, 0) = *(_DWORD *)(a3 + 24);
    LODWORD(v1forEachAppleBCMWLANReturnCodes((uint64_t (*)(uint64_t, void, void))printRetCodeName, 0) = *(_DWORD *)(a3 + 24);
  }
  *(_DWORD *)(a2 + 16) = v10 + *(unsigned __int16 *)(a3 + 29) * result;
  return result;
}

uint64_t AppleBCMWLANPCIeSkywalk::setRXTimestamp(AppleBCMWLANPCIeSkywalk *this, _DWORD *a2, AppleBCMWLANPCIeSkywalkPacket *a3, IO80211SkywalkInterface *a4, char a5)
{
  char v105 = 0;
  *(void *)int v104 = 0;
  memset(v103, 0, sizeof(v103));
  *(_WORD *)uint64_t v102 = 0;
  (*(void (**)(AppleBCMWLANPCIeSkywalkPacket *, void))(*(void *)a3 + 528))(a3, 0);
  if ((a5 & 1) == 0)
  {
    if (AppleBCMWLANBusInterfacePCIe::getTimestampingMode(*(AppleBCMWLANBusInterfacePCIe **)(*((void *)this + 7) + 48)) == 1)
    {
      (*(void (**)(AppleBCMWLANPCIeSkywalkPacket *, uint64_t))(*(void *)a3 + 304))(a3, -3);
      if (AppleBCMWLANUtil::isPTPPacket(a3, 0, &v105, v104, (unsigned __int8 **)&v103[1], (unsigned __int8 **)v103, v102, v15))
      {
        unsigned int v16 = AppleBCMWLANPCIeSkywalk::setRXTimestamp(void *,AppleBCMWLANPCIeSkywalkPacket *,IO80211SkywalkInterface *,BOOL)::consecErr++;
        if (v16 <= 0x14)
        {
          if (v105)
          {
            uint64_t v17 = 0;
            uint64_t v18 = "unknown";
            while (AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v17] != v103[0])
            {
              v17 += 4;
              if (v17 == 36) {
                goto LABEL_42;
              }
            }
            uint64_t v18 = *(const char **)&AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v17 + 2];
LABEL_42:
            uint64_t v85 = *(unsigned __int16 *)v102;
            char v93 = v18;
            if (*(void *)&v103[1])
            {
              uint64_t v77 = **(unsigned char **)&v103[1];
              uint64_t v70 = *(unsigned __int8 *)(*(void *)&v103[1] + 1);
              uint64_t v65 = *(unsigned __int8 *)(*(void *)&v103[1] + 2);
              uint64_t v59 = *(unsigned __int8 *)(*(void *)&v103[1] + 3);
            }
            else
            {
              uint64_t v59 = 0;
              uint64_t v65 = 0;
              uint64_t v70 = 0;
              uint64_t v77 = 0;
            }
            IO80211SkywalkInterface::getInterfaceRole(a4);
            IO80211SkywalkInterface::isLowLatencyEnabled(a4);
            IOLog("[WiFiTimeSync@] Rx UDPv6 message %s sequence %d from %02x%02x:%02x%02x_%02x%02x:%02x%02x @ %02x:%02x:%02x:%02x:%02x:%02x Error nonV7Hdr. set ts=-3 if:%d isLowLatencyEnabled: %d\n", v93, v85, v77, v70, v65, v59);
          }
          else
          {
            uint64_t v32 = 0;
            BOOL v33 = "unknown";
            while (AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v32] != v103[0])
            {
              v32 += 4;
              if (v32 == 36) {
                goto LABEL_47;
              }
            }
            BOOL v33 = *(const char **)&AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v32 + 2];
LABEL_47:
            uint64_t v86 = *(unsigned __int16 *)v102;
            int v94 = v33;
            if (*(void *)&v103[1])
            {
              uint64_t v78 = **(unsigned char **)&v103[1];
              uint64_t v71 = *(unsigned __int8 *)(*(void *)&v103[1] + 1);
            }
            else
            {
              uint64_t v71 = 0;
              uint64_t v78 = 0;
            }
            IO80211SkywalkInterface::getInterfaceRole(a4);
            IO80211SkywalkInterface::isLowLatencyEnabled(a4);
            IOLog("[WiFiTimeSync@] Rx UDPv4 message %s sequence %d from %u.%u.%u.%u @ %02x:%02x:%02x:%02x:%02x:%02x Error nonV7Hdr. set ts=-3 if:%d isLowLatencyEnabled: %d\n", v94, v86, v78, v71);
          }
        }
      }
      if (PE_i_can_has_debugger(0) && !*(unsigned char *)(*((void *)this + 7) + 484))
      {
        uint64_t v38 = mach_continuous_time();
        unint64_t v101 = 0xAAAAAAAAAAAAAAAALL;
        absolutetime_to_nanoseconds();
        IOLog("[WiFiTimeSync!] RX non V7 header with PTM timestamping mode. now_ns=%lld now=%lld. triggering WD\n", 0xAAAAAAAAAAAAAAAALL, v38);
        *(unsigned char *)(*((void *)this + 7) + 484) = 1;
        CCFaultReporter::reportFault(*(CCFaultReporter **)(*((void *)this + 7) + 16), 5u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANPCIeSkywalk.cpp", 0x9D4u, "setRXTimestamp", 0, -469791212, 0);
      }
    }
    a2 = 0;
    goto LABEL_69;
  }
  int v10 = a2[9] >> 28;
  if (v10 != 14)
  {
    if (AppleBCMWLANBusInterfacePCIe::getTimestampingMode(*(AppleBCMWLANBusInterfacePCIe **)(*((void *)this + 7) + 48)) == 1)
    {
      (*(void (**)(AppleBCMWLANPCIeSkywalkPacket *, uint64_t))(*(void *)a3 + 304))(a3, -2);
      if (AppleBCMWLANUtil::isPTPPacket(a3, 0, &v105, v104, (unsigned __int8 **)&v103[1], (unsigned __int8 **)v103, v102, v19))
      {
        unsigned int v20 = AppleBCMWLANPCIeSkywalk::setRXTimestamp(void *,AppleBCMWLANPCIeSkywalkPacket *,IO80211SkywalkInterface *,BOOL)::consecErr;
        unsigned int v21 = ++AppleBCMWLANPCIeSkywalk::setRXTimestamp(void *,AppleBCMWLANPCIeSkywalkPacket *,IO80211SkywalkInterface *,BOOL)::consecErr;
        if (v20 <= 0x14)
        {
          if (v105)
          {
            uint64_t v22 = 0;
            int v23 = "unknown";
            while (AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v22] != v103[0])
            {
              v22 += 4;
              if (v22 == 36) {
                goto LABEL_58;
              }
            }
            int v23 = *(const char **)&AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v22 + 2];
LABEL_58:
            uint64_t v87 = *(unsigned __int16 *)v102;
            uint64_t v95 = v23;
            if (*(void *)&v103[1])
            {
              uint64_t v79 = **(unsigned char **)&v103[1];
              uint64_t v72 = *(unsigned __int8 *)(*(void *)&v103[1] + 1);
              uint64_t v66 = *(unsigned __int8 *)(*(void *)&v103[1] + 2);
              uint64_t v60 = *(unsigned __int8 *)(*(void *)&v103[1] + 3);
            }
            else
            {
              uint64_t v60 = 0;
              uint64_t v66 = 0;
              uint64_t v72 = 0;
              uint64_t v79 = 0;
            }
            IO80211SkywalkInterface::getInterfaceRole(a4);
            IO80211SkywalkInterface::isLowLatencyEnabled(a4);
            IOLog("[WiFiTimeSync@] Rx UDPv6 message %s sequence %d from %02x%02x:%02x%02x_%02x%02x:%02x%02x @ %02x:%02x:%02x:%02x:%02x:%02x Error clockID 0x%x. set ts=-2 if:%d isLowLatencyEnabled: %d\n", v95, v87, v79, v72, v66, v60);
          }
          else
          {
            uint64_t v34 = 0;
            uint64_t v35 = "unknown";
            while (AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v34] != v103[0])
            {
              v34 += 4;
              if (v34 == 36) {
                goto LABEL_99;
              }
            }
            uint64_t v35 = *(const char **)&AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v34 + 2];
LABEL_99:
            uint64_t v89 = *(unsigned __int16 *)v102;
            int v97 = v35;
            if (*(void *)&v103[1])
            {
              uint64_t v81 = **(unsigned char **)&v103[1];
              uint64_t v74 = *(unsigned __int8 *)(*(void *)&v103[1] + 1);
            }
            else
            {
              uint64_t v74 = 0;
              uint64_t v81 = 0;
            }
            IO80211SkywalkInterface::getInterfaceRole(a4);
            IO80211SkywalkInterface::isLowLatencyEnabled(a4);
            IOLog("[WiFiTimeSync@] Rx UDPv4 message %s sequence %d from %u.%u.%u.%u @ %02x:%02x:%02x:%02x:%02x:%02x Error clockID 0x%x. set ts=-2 if:%d isLowLatencyEnabled: %d\n", v97, v89, v81, v74);
          }
          unsigned int v21 = AppleBCMWLANPCIeSkywalk::setRXTimestamp(void *,AppleBCMWLANPCIeSkywalkPacket *,IO80211SkywalkInterface *,BOOL)::consecErr;
        }
        if (v21 >= 3 && PE_i_can_has_debugger(0) && !*(unsigned char *)(*((void *)this + 7) + 484))
        {
          uint64_t v52 = mach_continuous_time();
          unint64_t v101 = 0xAAAAAAAAAAAAAAAALL;
          absolutetime_to_nanoseconds();
          IOLog("[WiFiTimeSync!] RX ClockID 0x%x with PTM timestamping mode. now_ns=%lld now=%lld. triggering WD\n", v10, 0xAAAAAAAAAAAAAAAALL, v52);
          *(unsigned char *)(*((void *)this + 7) + 484) = 1;
          CCFaultReporter::reportFault(*(CCFaultReporter **)(*((void *)this + 7) + 16), 5u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANPCIeSkywalk.cpp", 0xA36u, "setRXTimestamp", 0, -469791211, 0);
        }
      }
    }
LABEL_69:
    if ((IO80211SkywalkInterface::isLowLatencyEnabled(a4) & 1) == 0) {
      AppleBCMWLANBusInterfacePCIe::handleRxTimeSync(*(void *)(*((void *)this + 7) + 48), (uint64_t)a2, (uint64_t)a3);
    }
    goto LABEL_71;
  }
  AppleBCMWLANPCIeSkywalk::storePTMTimestamp((uint64_t)this, (uint64_t)(a2 + 8), (uint64_t)a3);
  int v11 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 7) + 48) + 544))();
  uint64_t v12 = *(void *)a3;
  if (v11)
  {
    unint64_t v13 = (*(uint64_t (**)(AppleBCMWLANPCIeSkywalkPacket *))(v12 + 552))(a3);
    uint64_t v14 = AppleBCMWLANBusInterfacePCIe::convertPTMToAbsolute(*(AppleBCMWLANBusInterfacePCIe **)(*((void *)this + 7) + 48), v13);
    (*(void (**)(AppleBCMWLANPCIeSkywalkPacket *, uint64_t))(*(void *)a3 + 304))(a3, v14);
    if (v14)
    {
      if (AppleBCMWLANPCIeSkywalk::setRXTimestamp(void *,AppleBCMWLANPCIeSkywalkPacket *,IO80211SkywalkInterface *,BOOL)::consecErr) {
        AppleBCMWLANPCIeSkywalk::setRXTimestamp(void *,AppleBCMWLANPCIeSkywalkPacket *,IO80211SkywalkInterface *,BOOL)::consecErr = 0;
      }
    }
    else
    {
      mach_continuous_time();
      unint64_t v101 = 0xAAAAAAAAAAAAAAAALL;
      absolutetime_to_nanoseconds();
      if (AppleBCMWLANUtil::isPTPPacket(a3, 0, &v105, v104, (unsigned __int8 **)&v103[1], (unsigned __int8 **)v103, v102, v28))
      {
        unsigned int v29 = AppleBCMWLANPCIeSkywalk::setRXTimestamp(void *,AppleBCMWLANPCIeSkywalkPacket *,IO80211SkywalkInterface *,BOOL)::consecErr++;
        if (v29 <= 0x14)
        {
          if (v105)
          {
            uint64_t v30 = 0;
            int v31 = "unknown";
            while (AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v30] != v103[0])
            {
              v30 += 4;
              if (v30 == 36) {
                goto LABEL_118;
              }
            }
            int v31 = *(const char **)&AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v30 + 2];
LABEL_118:
            uint64_t v91 = *(unsigned __int16 *)v102;
            int v99 = v31;
            if (*(void *)&v103[1])
            {
              uint64_t v83 = **(unsigned char **)&v103[1];
              uint64_t v75 = *(unsigned __int8 *)(*(void *)&v103[1] + 1);
              uint64_t v68 = *(unsigned __int8 *)(*(void *)&v103[1] + 2);
              uint64_t v61 = *(unsigned __int8 *)(*(void *)&v103[1] + 3);
              uint64_t v63 = *(unsigned __int8 *)(*(void *)&v103[1] + 12);
              uint64_t v55 = *(unsigned __int8 *)(*(void *)&v103[1] + 13);
              uint64_t v57 = *(unsigned __int8 *)(*(void *)&v103[1] + 14);
              uint64_t v54 = *(unsigned __int8 *)(*(void *)&v103[1] + 15);
            }
            else
            {
              uint64_t v57 = 0;
              uint64_t v61 = 0;
              uint64_t v63 = 0;
              uint64_t v68 = 0;
              uint64_t v75 = 0;
              uint64_t v83 = 0;
              uint64_t v54 = 0;
              uint64_t v55 = 0;
            }
            uint64_t v53 = **(unsigned char **)v104;
            AppleBCMWLANBusInterfacePCIe::getLastTimePowerOnTicks(*(AppleBCMWLANBusInterfacePCIe **)(*((void *)this + 7) + 48));
            (*(void (**)(void))(**(void **)(*((void *)this + 7) + 48) + 944))();
            IO80211SkywalkInterface::getInterfaceRole(a4);
            IOLog("[WiFiTimeSync@] Rx UDPv6 message %s sequence %d from %02x%02x:%02x%02x_%02x%02x:%02x%02x @ %02x:%02x:%02x:%02x:%02x:%02x Error conversion. set ts=0 fw_ns=%lld now_ns=%lld ts_ticks=%lld now_ticks=%lld lastPowerOnTicks=%lld isPowerOn()=%d if:%d\n", v99, v91, v83, v75, v68, v61, v63, v55, v57, v54, v53);
          }
          else
          {
            uint64_t v50 = 0;
            __int16 v51 = "unknown";
            while (AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v50] != v103[0])
            {
              v50 += 4;
              if (v50 == 36) {
                goto LABEL_123;
              }
            }
            __int16 v51 = *(const char **)&AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v50 + 2];
LABEL_123:
            uint64_t v92 = *(unsigned __int16 *)v102;
            int v100 = v51;
            if (*(void *)&v103[1])
            {
              uint64_t v84 = **(unsigned char **)&v103[1];
              uint64_t v76 = *(unsigned __int8 *)(*(void *)&v103[1] + 1);
              uint64_t v64 = *(unsigned __int8 *)(*(void *)&v103[1] + 3);
              uint64_t v69 = *(unsigned __int8 *)(*(void *)&v103[1] + 2);
            }
            else
            {
              uint64_t v69 = 0;
              uint64_t v76 = 0;
              uint64_t v84 = 0;
              uint64_t v64 = 0;
            }
            uint64_t v62 = **(unsigned char **)v104;
            uint64_t v58 = *(unsigned __int8 *)(*(void *)v104 + 1);
            uint64_t v56 = *(unsigned __int8 *)(*(void *)v104 + 2);
            AppleBCMWLANBusInterfacePCIe::getLastTimePowerOnTicks(*(AppleBCMWLANBusInterfacePCIe **)(*((void *)this + 7) + 48));
            (*(void (**)(void))(**(void **)(*((void *)this + 7) + 48) + 944))();
            IO80211SkywalkInterface::getInterfaceRole(a4);
            IOLog("[WiFiTimeSync@] Rx UDPv4 message %s sequence %d from %u.%u.%u.%u @ %02x:%02x:%02x:%02x:%02x:%02x Error conversion. set ts=0 fw_ns=%lld now_ns=%lld ts_ticks=%lld now_ticks=%lld lastPowerOnTicks=%lld isPowerOn()=%d if:%d\n", v100, v92, v84, v76, v69, v64, v62, v58, v56);
          }
        }
      }
    }
  }
  else
  {
    (*(void (**)(AppleBCMWLANPCIeSkywalkPacket *, uint64_t))(v12 + 304))(a3, -1);
    if (AppleBCMWLANUtil::isPTPPacket(a3, 0, &v105, v104, (unsigned __int8 **)&v103[1], (unsigned __int8 **)v103, v102, v24))
    {
      unsigned int v25 = AppleBCMWLANPCIeSkywalk::setRXTimestamp(void *,AppleBCMWLANPCIeSkywalkPacket *,IO80211SkywalkInterface *,BOOL)::consecErr++;
      if (v25 <= 0x14)
      {
        if (v105)
        {
          uint64_t v26 = 0;
          __int16 v27 = "unknown";
          while (AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v26] != v103[0])
          {
            v26 += 4;
            if (v26 == 36) {
              goto LABEL_61;
            }
          }
          __int16 v27 = *(const char **)&AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v26 + 2];
LABEL_61:
          uint64_t v88 = *(unsigned __int16 *)v102;
          uint64_t v96 = v27;
          if (*(void *)&v103[1])
          {
            uint64_t v80 = **(unsigned char **)&v103[1];
            uint64_t v73 = *(unsigned __int8 *)(*(void *)&v103[1] + 1);
            uint64_t v67 = *(unsigned __int8 *)(*(void *)&v103[1] + 2);
          }
          else
          {
            uint64_t v67 = 0;
            uint64_t v73 = 0;
            uint64_t v80 = 0;
          }
          IO80211SkywalkInterface::getInterfaceRole(a4);
          IOLog("[WiFiTimeSync@] Rx UDPv6 message %s sequence %d from %02x%02x:%02x%02x_%02x%02x:%02x%02x @ %02x:%02x:%02x:%02x:%02x:%02x Error TSDisabled. set ts=-1 if:%d\n", v96, v88, v80, v73, v67);
        }
        else
        {
          uint64_t v36 = 0;
          uint64_t v37 = "unknown";
          while (AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v36] != v103[0])
          {
            v36 += 4;
            if (v36 == 36) {
              goto LABEL_102;
            }
          }
          uint64_t v37 = *(const char **)&AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v36 + 2];
LABEL_102:
          uint64_t v90 = *(unsigned __int16 *)v102;
          uint64_t v98 = v37;
          if (*(void *)&v103[1]) {
            uint64_t v82 = **(unsigned char **)&v103[1];
          }
          else {
            uint64_t v82 = 0;
          }
          IO80211SkywalkInterface::getInterfaceRole(a4);
          IOLog("[WiFiTimeSync@] Rx UDPv4 message %s sequence %d from %u.%u.%u.%u @ %02x:%02x:%02x:%02x:%02x:%02x Error TSDisabled. set ts=-1 if:%d\n", v98, v90, v82);
        }
      }
    }
  }
LABEL_71:
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 7) + 48) + 544))(*(void *)(*((void *)this + 7) + 48));
  if (result)
  {
    uint64_t result = AppleBCMWLANBusInterfacePCIe::isTSLoggingEnabled(*(AppleBCMWLANBusInterfacePCIe **)(*((void *)this + 7)
                                                                                               + 48));
    if (result)
    {
      uint64_t result = AppleBCMWLANUtil::isPTPPacket(a3, 0, &v105, v104, (unsigned __int8 **)&v103[1], (unsigned __int8 **)v103, v102, v40);
      if (result)
      {
        unint64_t v101 = 0xAAAAAAAAAAAAAAAALL;
        (*(void (**)(AppleBCMWLANPCIeSkywalkPacket *, unint64_t *))(*(void *)a3 + 320))(a3, &v101);
        uint64_t v41 = 0;
        if (v105)
        {
          uint64_t v42 = "unknown";
          while (AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v41] != v103[0])
          {
            v41 += 4;
            if (v41 == 36) {
              goto LABEL_84;
            }
          }
          uint64_t v42 = *(const char **)&AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v41 + 2];
LABEL_84:
          if (*(void *)&v103[1])
          {
            uint64_t v44 = **(unsigned char **)&v103[1];
            uint64_t v45 = *(unsigned __int8 *)(*(void *)&v103[1] + 1);
            uint64_t v46 = *(unsigned __int8 *)(*(void *)&v103[1] + 2);
            uint64_t v47 = *(unsigned __int8 *)(*(void *)&v103[1] + 3);
          }
          else
          {
            uint64_t v46 = 0;
            uint64_t v44 = 0;
            uint64_t v45 = 0;
            uint64_t v47 = 0;
          }
          return IOLog("[WiFiTimeSync-] Rx UDPv6 message %s sequence %d from %02x%02x:%02x%02x_%02x%02x:%02x%02x @ %02x:%02x:%02x:%02x:%02x:%02x completed. ts %llu", v42, *(unsigned __int16 *)v102, v44, v45, v46, v47);
        }
        else
        {
          unsigned int v43 = "unknown";
          while (AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v41] != v103[0])
          {
            v41 += 4;
            if (v41 == 36) {
              goto LABEL_89;
            }
          }
          unsigned int v43 = *(const char **)&AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v41 + 2];
LABEL_89:
          if (*(void *)&v103[1])
          {
            uint64_t v48 = **(unsigned char **)&v103[1];
            uint64_t v49 = *(unsigned __int8 *)(*(void *)&v103[1] + 1);
          }
          else
          {
            uint64_t v48 = 0;
            uint64_t v49 = 0;
          }
          return IOLog("[WiFiTimeSync-] Rx UDPv4 message %s sequence %d from %u.%u.%u.%u @ %02x:%02x:%02x:%02x:%02x:%02x completed. ts %llu", v43, *(unsigned __int16 *)v102, v48, v49);
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANPCIeSkywalk::completeRxPacketMonitor(CCLogStream ***a1, uint64_t a2, IO80211SkywalkInterface *a3, AppleBCMWLANPCIeSkywalkPacket *a4, char a5)
{
  if (a2)
  {
    if (a4)
    {
      size_t v8 = *(unsigned __int16 *)(a2 + 14);
      if ((unsigned __int16)((unsigned __int16)(v8 - 2049) >> 11) > 0x1Eu)
      {
        uint64_t v9 = *(unsigned __int16 *)(a2 + 16);
        uint64_t v10 = 3758097084;
        if (v9 < 5) {
          return 3758097084;
        }
        unsigned int v13 = (*(uint64_t (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)a4 + 488))(a4);
        uint64_t v14 = 3758097128;
        if ((v9 + v8) > 0x7FC || (int)v9 + (int)v8 >= v13) {
          return v14;
        }
        uint64_t v15 = a1[7];
        if (*((unsigned char *)v15 + 128))
        {
          unsigned int v16 = *(unsigned __int16 *)(a2 + 18);
          if ((v16 & 2) != 0)
          {
            int v17 = (v16 >> 8) & 3;
            if (v17)
            {
              IOLockLock(v15[20]);
              uint64_t v18 = a1[7];
              uint64_t v19 = v18[18];
              if (v19)
              {
                uint64_t v20 = (*(uint64_t (**)(CCLogStream *))(*(void *)v19 + 480))(v19);
                uint64_t v21 = (*(uint64_t (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)a4 + 480))(a4);
                uint64_t v18 = a1[7];
                if (v21)
                {
                  if (v20)
                  {
                    uint64_t v22 = v21;
                    uint64_t v29 = v20;
                    unsigned int v23 = *((_DWORD *)v18 + 38) + v8;
                    if (v23 <= (*(unsigned int (**)(CCLogStream *))(*(void *)v18[18] + 488))(v18[18]))
                    {
                      if (v17 == 1)
                      {
                        unsigned int v25 = a1[7];
                        if (*((_DWORD *)v25 + 38))
                        {
                          if (*v25)
                          {
                            int shouldLog = CCLogStream::shouldLog();
                            unsigned int v25 = a1[7];
                            if (shouldLog)
                            {
                              CCLogStream::logCrit(*v25, "[dk] %s@%d:unfinished monitor packet chain dropped\n", "completeRxPacketMonitor", 1810);
                              unsigned int v25 = a1[7];
                            }
                          }
                        }
                        else
                        {
                          uint64_t v10 = 0;
                        }
                        *((_DWORD *)v25 + 38) = 0;
                        uint64_t v14 = v10;
                      }
                      else
                      {
                        uint64_t v14 = 0;
                      }
                      memcpy((void *)(v29 + *((unsigned int *)a1[7] + 38)), (const void *)(v22 + v9), v8);
                      *((_DWORD *)a1[7] + 38) += v8;
                      if (v17 == 3)
                      {
                        __int16 v27 = (AppleBCMWLANPCIeSkywalk *)AppleBCMWLANPCIeSkywalk::setRXTimestamp((AppleBCMWLANPCIeSkywalk *)a1, (_DWORD *)a2, a1[7][18], a3, a5);
                        AppleBCMWLANPCIeSkywalk::inputMonitorPacket(v27, a3, a1[7][18], 0, *((unsigned __int16 *)a1[7] + 76));
                        *((_DWORD *)a1[7] + 38) = 0;
                      }
                      IOLockUnlock(a1[7][20]);
                    }
                    else
                    {
                      IOLockUnlock(a1[7][20]);
                      return 3758097128;
                    }
                    return v14;
                  }
                }
              }
              IOLockUnlock(v18[20]);
              return 3758097084;
            }
            uint64_t v24 = (AppleBCMWLANPCIeSkywalk *)AppleBCMWLANPCIeSkywalk::setRXTimestamp((AppleBCMWLANPCIeSkywalk *)a1, (_DWORD *)a2, a4, a3, a5);
            AppleBCMWLANPCIeSkywalk::inputMonitorPacket(v24, a3, a4, v9, v8);
          }
        }
        return 0;
      }
      if (*a1[7] && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*a1[7], "[dk] %s@%d:RX SW, packet length invalid\n", "completeRxPacketMonitor", 1753);
      }
      return 3758096385;
    }
    else
    {
      uint64_t v14 = 3758097084;
      if (*a1[7] && CCLogStream::shouldLog()) {
        CCLogStream::logCrit(*a1[7], "[dk] %s@%d:invalid rx packet data buffer\n");
      }
    }
  }
  else
  {
    uint64_t v14 = 3758097084;
    if (*a1[7] && CCLogStream::shouldLog()) {
      CCLogStream::logCrit(*a1[7], "[dk] %s@%d:invalid rx packet message\n");
    }
  }
  return v14;
}

uint64_t AppleBCMWLANPCIeSkywalk::inputMonitorPacket(AppleBCMWLANPCIeSkywalk *this, IO80211SkywalkInterface *a2, AppleBCMWLANPCIeSkywalkPacket *a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v6 = a4;
  (*(void (**)(AppleBCMWLANPCIeSkywalkPacket *, uint64_t))(*(void *)a3 + 232))(a3, a4);
  IO80211NetworkPacket::setHeadroom(a3, v6);
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANPCIeSkywalkPacket *, uint64_t))(*(void *)a3 + 216))(a3, a5);
  if (a2)
  {
    uint64_t v10 = *(uint64_t (**)(IO80211SkywalkInterface *, uint64_t, AppleBCMWLANPCIeSkywalkPacket *, void, void))(*(void *)a2 + 256);
    return v10(a2, 127, a3, 0, 0);
  }
  return result;
}

uint64_t AppleBCMWLANPCIeSkywalk::setTXTimestamp(AppleBCMWLANPCIeSkywalk *this, unsigned __int8 *a2, int a3, AppleBCMWLANPCIeSkywalkPacket *a4, IO80211SkywalkInterface *a5, int a6)
{
  unint64_t v12 = a2[14];
  char v230 = 0;
  *(void *)v229 = 0;
  memset(v228, 0, sizeof(v228));
  *(_WORD *)v227 = 0;
  (*(void (**)(AppleBCMWLANPCIeSkywalkPacket *, void))(*(void *)a4 + 528))(a4, 0);
  if (a6) {
    unsigned int v13 = a2;
  }
  else {
    unsigned int v13 = 0;
  }
  uint64_t v14 = *(AppleBCMWLANBusInterfacePCIe **)(*((void *)this + 7) + 48);
  if (a3 == 1)
  {
    if (AppleBCMWLANBusInterfacePCIe::getTimestampingMode(v14) == 1)
    {
      (*(void (**)(AppleBCMWLANPCIeSkywalkPacket *, uint64_t))(*(void *)a4 + 304))(a4, -4);
      if (AppleBCMWLANUtil::isPTPPacket(a4, (AppleBCMWLANPCIeSkywalkPacket *)1, &v230, v229, (unsigned __int8 **)&v228[1], (unsigned __int8 **)v228, v227, v15))
      {
        unsigned int v16 = AppleBCMWLANPCIeSkywalk::setTXTimestamp(void *,int,AppleBCMWLANPCIeSkywalkPacket *,IO80211SkywalkInterface *,BOOL)::consecErr++;
        if (v16 <= 0x14)
        {
          if (v230)
          {
            uint64_t v17 = 0;
            uint64_t v18 = "unknown";
            while (AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v17] != v228[0])
            {
              v17 += 4;
              if (v17 == 36) {
                goto LABEL_54;
              }
            }
            uint64_t v18 = *(const char **)&AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v17 + 2];
LABEL_54:
            uint64_t v203 = *(unsigned __int16 *)v227;
            v215 = v18;
            if (*(void *)&v228[1])
            {
              uint64_t v191 = **(unsigned char **)&v228[1];
              uint64_t v181 = *(unsigned __int8 *)(*(void *)&v228[1] + 1);
              uint64_t v171 = *(unsigned __int8 *)(*(void *)&v228[1] + 2);
              uint64_t v159 = *(unsigned __int8 *)(*(void *)&v228[1] + 3);
              uint64_t v165 = *(unsigned __int8 *)(*(void *)&v228[1] + 12);
            }
            else
            {
              uint64_t v159 = 0;
              uint64_t v165 = 0;
              uint64_t v171 = 0;
              uint64_t v181 = 0;
              uint64_t v191 = 0;
            }
            IO80211SkywalkInterface::getInterfaceRole(a5);
            (*(void (**)(void))(**(void **)(*((void *)this + 7) + 48) + 544))();
            (*(void (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)a4 + 328))(a4);
            IOLog("[WiFiTimeSync@] Tx UDPv6 message %s sequence %d to %02x%02x:%02x%02x_%02x%02x:%02x%02x @ %02x:%02x:%02x:%02x:%02x:%02x Error ptmModeDisabled. set ts=-4 if:%d tsEnabled:%d tsRequested:%d tx_status:%d\n", v215, v203, v191, v181, v171, v159, v165);
          }
          else
          {
            uint64_t v35 = 0;
            uint64_t v36 = "unknown";
            while (AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v35] != v228[0])
            {
              v35 += 4;
              if (v35 == 36) {
                goto LABEL_59;
              }
            }
            uint64_t v36 = *(const char **)&AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v35 + 2];
LABEL_59:
            uint64_t v204 = *(unsigned __int16 *)v227;
            v216 = v36;
            if (*(void *)&v228[1])
            {
              uint64_t v192 = **(unsigned char **)&v228[1];
              uint64_t v182 = *(unsigned __int8 *)(*(void *)&v228[1] + 1);
              uint64_t v172 = *(unsigned __int8 *)(*(void *)&v228[1] + 2);
            }
            else
            {
              uint64_t v172 = 0;
              uint64_t v182 = 0;
              uint64_t v192 = 0;
            }
            IO80211SkywalkInterface::getInterfaceRole(a5);
            (*(void (**)(void))(**(void **)(*((void *)this + 7) + 48) + 544))();
            (*(void (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)a4 + 328))(a4);
            IOLog("[WiFiTimeSync@] Tx UDPv4 message %s sequence %d to %u.%u.%u.%u @ %02x:%02x:%02x:%02x:%02x:%02x Error ptmModeDisabled. set ts=-4 if:%d tsEnabled:%d tsRequested:%d tx_status:%d\n", v216, v204, v192, v182, v172);
          }
        }
      }
    }
    AppleBCMWLANBusInterfacePCIe::handleTxTimeSync(*(void *)(*((void *)this + 7) + 48), (uint64_t)v13, (uint64_t)a4, v12);
    goto LABEL_71;
  }
  if ((*(unsigned int (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)v14 + 544))(v14))
  {
    if ((*(unsigned int (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)a4 + 328))(a4)
      && v12 != 0)
    {
      (*(void (**)(AppleBCMWLANPCIeSkywalkPacket *, void))(*(void *)a4 + 304))(a4, 0);
      goto LABEL_71;
    }
  }
  if (!v13)
  {
    if (AppleBCMWLANBusInterfacePCIe::getTimestampingMode(*(AppleBCMWLANBusInterfacePCIe **)(*((void *)this + 7) + 48)) != 1) {
      goto LABEL_71;
    }
    (*(void (**)(AppleBCMWLANPCIeSkywalkPacket *, uint64_t))(*(void *)a4 + 304))(a4, -3);
    if (AppleBCMWLANUtil::isPTPPacket(a4, (AppleBCMWLANPCIeSkywalkPacket *)1, &v230, v229, (unsigned __int8 **)&v228[1], (unsigned __int8 **)v228, v227, v23))
    {
      unsigned int v24 = AppleBCMWLANPCIeSkywalk::setTXTimestamp(void *,int,AppleBCMWLANPCIeSkywalkPacket *,IO80211SkywalkInterface *,BOOL)::consecErr++;
      if (v24 <= 0x14)
      {
        if (v230)
        {
          uint64_t v25 = 0;
          uint64_t v26 = "unknown";
          while (AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v25] != v228[0])
          {
            v25 += 4;
            if (v25 == 36) {
              goto LABEL_134;
            }
          }
          uint64_t v26 = *(const char **)&AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v25 + 2];
LABEL_134:
          uint64_t v208 = *(unsigned __int16 *)v227;
          v219 = v26;
          if (*(void *)&v228[1])
          {
            uint64_t v196 = **(unsigned char **)&v228[1];
            uint64_t v184 = *(unsigned __int8 *)(*(void *)&v228[1] + 1);
            uint64_t v174 = *(unsigned __int8 *)(*(void *)&v228[1] + 2);
            uint64_t v161 = *(unsigned __int8 *)(*(void *)&v228[1] + 3);
            uint64_t v167 = *(unsigned __int8 *)(*(void *)&v228[1] + 12);
          }
          else
          {
            uint64_t v161 = 0;
            uint64_t v167 = 0;
            uint64_t v174 = 0;
            uint64_t v184 = 0;
            uint64_t v196 = 0;
          }
          IO80211SkywalkInterface::getInterfaceRole(a5);
          (*(void (**)(void))(**(void **)(*((void *)this + 7) + 48) + 544))();
          (*(void (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)a4 + 328))(a4);
          IOLog("[WiFiTimeSync@] Tx UDPv6 message %s sequence %d to %02x%02x:%02x%02x_%02x%02x:%02x%02x @ %02x:%02x:%02x:%02x:%02x:%02x Error nonV7Hdr. set ts=-3 if:%d tsEnabled:%d tsRequested:%d tx_status:%d\n", v219, v208, v196, v184, v174, v161, v167);
        }
        else
        {
          uint64_t v98 = 0;
          int v99 = "unknown";
          while (AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v98] != v228[0])
          {
            v98 += 4;
            if (v98 == 36) {
              goto LABEL_156;
            }
          }
          int v99 = *(const char **)&AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v98 + 2];
LABEL_156:
          uint64_t v211 = *(unsigned __int16 *)v227;
          v222 = v99;
          if (*(void *)&v228[1])
          {
            uint64_t v199 = **(unsigned char **)&v228[1];
            uint64_t v187 = *(unsigned __int8 *)(*(void *)&v228[1] + 1);
            uint64_t v177 = *(unsigned __int8 *)(*(void *)&v228[1] + 2);
          }
          else
          {
            uint64_t v177 = 0;
            uint64_t v187 = 0;
            uint64_t v199 = 0;
          }
          IO80211SkywalkInterface::getInterfaceRole(a5);
          (*(void (**)(void))(**(void **)(*((void *)this + 7) + 48) + 544))();
          (*(void (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)a4 + 328))(a4);
          IOLog("[WiFiTimeSync@] Tx UDPv4 message %s sequence %d to %u.%u.%u.%u @ %02x:%02x:%02x:%02x:%02x:%02x Error nonV7Hdr. set ts=-3 if:%d tsEnabled:%d tsRequested:%d tx_status:%d\n", v222, v211, v199, v187, v177);
        }
      }
    }
    if (!PE_i_can_has_debugger(0) || *(unsigned char *)(*((void *)this + 7) + 484)) {
      goto LABEL_71;
    }
    uint64_t v106 = mach_continuous_time();
    unint64_t v226 = 0xAAAAAAAAAAAAAAAALL;
    absolutetime_to_nanoseconds();
    IOLog("[WiFiTimeSync!] TX non V7 header with PTM timestamping mode. now_ns=%lld now=%lld. triggering WD\n", 0xAAAAAAAAAAAAAAAALL, v106);
    *(unsigned char *)(*((void *)this + 7) + 484) = 1;
    unint64_t v107 = *(CCFaultReporter **)(*((void *)this + 7) + 16);
    int v108 = -469791212;
    unsigned int v109 = 5;
    unsigned int v110 = 2732;
LABEL_177:
    CCFaultReporter::reportFault(v107, v109, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANPCIeSkywalk.cpp", v110, "setTXTimestamp", 0, v108, 0);
    goto LABEL_71;
  }
  int v20 = v13[5] >> 28;
  if (v20 != 14)
  {
    if (AppleBCMWLANBusInterfacePCIe::getTimestampingMode(*(AppleBCMWLANBusInterfacePCIe **)(*((void *)this + 7) + 48)) != 1) {
      goto LABEL_71;
    }
    (*(void (**)(AppleBCMWLANPCIeSkywalkPacket *, uint64_t))(*(void *)a4 + 304))(a4, -2);
    if (!AppleBCMWLANUtil::isPTPPacket(a4, (AppleBCMWLANPCIeSkywalkPacket *)1, &v230, v229, (unsigned __int8 **)&v228[1], (unsigned __int8 **)v228, v227, v27))goto LABEL_71; {
    unsigned int v28 = AppleBCMWLANPCIeSkywalk::setTXTimestamp(void *,int,AppleBCMWLANPCIeSkywalkPacket *,IO80211SkywalkInterface *,BOOL)::consecErr++;
    }
    if (v28 <= 0x14)
    {
      if (v230)
      {
        uint64_t v29 = 0;
        uint64_t v30 = "unknown";
        while (AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v29] != v228[0])
        {
          v29 += 4;
          if (v29 == 36) {
            goto LABEL_143;
          }
        }
        uint64_t v30 = *(const char **)&AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v29 + 2];
LABEL_143:
        uint64_t v209 = *(unsigned __int16 *)v227;
        v220 = v30;
        if (*(void *)&v228[1])
        {
          uint64_t v197 = **(unsigned char **)&v228[1];
          uint64_t v185 = *(unsigned __int8 *)(*(void *)&v228[1] + 1);
          uint64_t v175 = *(unsigned __int8 *)(*(void *)&v228[1] + 2);
          uint64_t v162 = *(unsigned __int8 *)(*(void *)&v228[1] + 3);
          uint64_t v168 = *(unsigned __int8 *)(*(void *)&v228[1] + 12);
        }
        else
        {
          uint64_t v162 = 0;
          uint64_t v168 = 0;
          uint64_t v175 = 0;
          uint64_t v185 = 0;
          uint64_t v197 = 0;
        }
        IO80211SkywalkInterface::getInterfaceRole(a5);
        (*(void (**)(void))(**(void **)(*((void *)this + 7) + 48) + 544))();
        (*(void (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)a4 + 328))(a4);
        IOLog("[WiFiTimeSync@] Tx UDPv6 message %s sequence %d to %02x%02x:%02x%02x_%02x%02x:%02x%02x @ %02x:%02x:%02x:%02x:%02x:%02x Error clockID 0x%x. set ts=-2 if:%d tsEnabled:%d tsRequested:%d tx_status:%d\n", v220, v209, v197, v185, v175, v162, v168);
      }
      else
      {
        uint64_t v100 = 0;
        unint64_t v101 = "unknown";
        while (AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v100] != v228[0])
        {
          v100 += 4;
          if (v100 == 36) {
            goto LABEL_165;
          }
        }
        unint64_t v101 = *(const char **)&AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v100 + 2];
LABEL_165:
        uint64_t v212 = *(unsigned __int16 *)v227;
        v223 = v101;
        if (*(void *)&v228[1])
        {
          uint64_t v200 = **(unsigned char **)&v228[1];
          uint64_t v188 = *(unsigned __int8 *)(*(void *)&v228[1] + 1);
          uint64_t v178 = *(unsigned __int8 *)(*(void *)&v228[1] + 2);
        }
        else
        {
          uint64_t v178 = 0;
          uint64_t v188 = 0;
          uint64_t v200 = 0;
        }
        IO80211SkywalkInterface::getInterfaceRole(a5);
        (*(void (**)(void))(**(void **)(*((void *)this + 7) + 48) + 544))();
        (*(void (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)a4 + 328))(a4);
        IOLog("[WiFiTimeSync@] Tx UDPv4 message %s sequence %d to %u.%u.%u.%u @ %02x:%02x:%02x:%02x:%02x:%02x Error clockID 0x%x. set ts=-2 if:%d tsEnabled:%d tsRequested:%d tx_status:%d\n", v223, v212, v200, v188, v178);
      }
    }
    if (!PE_i_can_has_debugger(0) || *(unsigned char *)(*((void *)this + 7) + 484)) {
      goto LABEL_71;
    }
    uint64_t v111 = mach_continuous_time();
    unint64_t v226 = 0xAAAAAAAAAAAAAAAALL;
    absolutetime_to_nanoseconds();
    IOLog("[WiFiTimeSync!] TX ClockID 0x%x with PTM timestamping mode. now_ns=%lld now=%lld. triggering WD\n", v20, 0xAAAAAAAAAAAAAAAALL, v111);
    *(unsigned char *)(*((void *)this + 7) + 484) = 1;
    unint64_t v107 = *(CCFaultReporter **)(*((void *)this + 7) + 16);
    int v108 = -469791211;
    unsigned int v109 = 5;
    unsigned int v110 = 2859;
    goto LABEL_177;
  }
  AppleBCMWLANPCIeSkywalk::storePTMTimestamp((uint64_t)this, (uint64_t)(v13 + 4), (uint64_t)a4);
  if ((*(unsigned int (**)(void))(**(void **)(*((void *)this + 7) + 48) + 544))()
    && (*(unsigned int (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)a4 + 328))(a4))
  {
    unint64_t v21 = (*(uint64_t (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)a4 + 552))(a4);
    uint64_t v22 = AppleBCMWLANBusInterfacePCIe::convertPTMToAbsolute(*(AppleBCMWLANBusInterfacePCIe **)(*((void *)this + 7) + 48), v21);
    (*(void (**)(AppleBCMWLANPCIeSkywalkPacket *, uint64_t))(*(void *)a4 + 304))(a4, v22);
    if (v22)
    {
      if (AppleBCMWLANPCIeSkywalk::setTXTimestamp(void *,int,AppleBCMWLANPCIeSkywalkPacket *,IO80211SkywalkInterface *,BOOL)::consecErr) {
        AppleBCMWLANPCIeSkywalk::setTXTimestamp(void *,int,AppleBCMWLANPCIeSkywalkPacket *,IO80211SkywalkInterface *,BOOL)::consecErr = 0;
      }
      goto LABEL_71;
    }
    uint64_t v37 = mach_continuous_time();
    unint64_t v226 = 0xAAAAAAAAAAAAAAAALL;
    absolutetime_to_nanoseconds();
    if (AppleBCMWLANUtil::isPTPPacket(a4, (AppleBCMWLANPCIeSkywalkPacket *)1, &v230, v229, (unsigned __int8 **)&v228[1], (unsigned __int8 **)v228, v227, v38))
    {
      unsigned int v39 = AppleBCMWLANPCIeSkywalk::setTXTimestamp(void *,int,AppleBCMWLANPCIeSkywalkPacket *,IO80211SkywalkInterface *,BOOL)::consecErr++;
      if (v39 <= 0x14)
      {
        if (v230)
        {
          uint64_t v40 = 0;
          uint64_t v41 = "unknown";
          while (AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v40] != v228[0])
          {
            v40 += 4;
            if (v40 == 36) {
              goto LABEL_183;
            }
          }
          uint64_t v41 = *(const char **)&AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v40 + 2];
LABEL_183:
          uint64_t v213 = *(unsigned __int16 *)v227;
          v224 = v41;
          if (*(void *)&v228[1])
          {
            uint64_t v201 = **(unsigned char **)&v228[1];
            uint64_t v189 = *(unsigned __int8 *)(*(void *)&v228[1] + 1);
            uint64_t v179 = *(unsigned __int8 *)(*(void *)&v228[1] + 2);
            uint64_t v163 = *(unsigned __int8 *)(*(void *)&v228[1] + 3);
            uint64_t v169 = *(unsigned __int8 *)(*(void *)&v228[1] + 12);
            uint64_t v155 = *(unsigned __int8 *)(*(void *)&v228[1] + 13);
            uint64_t v157 = *(unsigned __int8 *)(*(void *)&v228[1] + 14);
            uint64_t v153 = *(unsigned __int8 *)(*(void *)&v228[1] + 15);
          }
          else
          {
            uint64_t v157 = 0;
            uint64_t v163 = 0;
            uint64_t v169 = 0;
            uint64_t v179 = 0;
            uint64_t v189 = 0;
            uint64_t v201 = 0;
            uint64_t v153 = 0;
            uint64_t v155 = 0;
          }
          uint64_t v151 = **(unsigned char **)v229;
          uint64_t v150 = *(unsigned __int8 *)(*(void *)v229 + 1);
          uint64_t v149 = *(unsigned __int8 *)(*(void *)v229 + 2);
          AppleBCMWLANBusInterfacePCIe::getLastTimePowerOnTicks(*(AppleBCMWLANBusInterfacePCIe **)(*((void *)this + 7)
                                                                                                 + 48));
          (*(void (**)(void))(**(void **)(*((void *)this + 7) + 48) + 944))();
          IO80211SkywalkInterface::getInterfaceRole(a5);
          (*(void (**)(void))(**(void **)(*((void *)this + 7) + 48) + 544))();
          (*(void (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)a4 + 328))(a4);
          IOLog("[WiFiTimeSync@] Tx UDPv6 message %s sequence %d to %02x%02x:%02x%02x_%02x%02x:%02x%02x @ %02x:%02x:%02x:%02x:%02x:%02x Error conversion. set ts=0 fw_ns=%lld now_ns=%lld ts_ticks=%lld now_ticks=%lld lastPowerOnTicks=%lld isPowerOn()=%d if:%d tsEnabled:%d tsRequested:%d tx_status:%d\n", v224, v213, v201, v189, v179, v163, v169, v155, v157, v153, v151, v150, v149);
        }
        else
        {
          uint64_t v112 = 0;
          int v113 = "unknown";
          while (AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v112] != v228[0])
          {
            v112 += 4;
            if (v112 == 36) {
              goto LABEL_188;
            }
          }
          int v113 = *(const char **)&AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v112 + 2];
LABEL_188:
          uint64_t v214 = *(unsigned __int16 *)v227;
          v225 = v113;
          if (*(void *)&v228[1])
          {
            uint64_t v202 = **(unsigned char **)&v228[1];
            uint64_t v190 = *(unsigned __int8 *)(*(void *)&v228[1] + 1);
            uint64_t v170 = *(unsigned __int8 *)(*(void *)&v228[1] + 3);
            uint64_t v180 = *(unsigned __int8 *)(*(void *)&v228[1] + 2);
          }
          else
          {
            uint64_t v180 = 0;
            uint64_t v190 = 0;
            uint64_t v202 = 0;
            uint64_t v170 = 0;
          }
          uint64_t v164 = **(unsigned char **)v229;
          uint64_t v158 = *(unsigned __int8 *)(*(void *)v229 + 1);
          uint64_t v156 = *(unsigned __int8 *)(*(void *)v229 + 2);
          uint64_t v154 = *(unsigned __int8 *)(*(void *)v229 + 3);
          uint64_t v152 = *(unsigned __int8 *)(*(void *)v229 + 4);
          AppleBCMWLANBusInterfacePCIe::getLastTimePowerOnTicks(*(AppleBCMWLANBusInterfacePCIe **)(*((void *)this + 7)
                                                                                                 + 48));
          (*(void (**)(void))(**(void **)(*((void *)this + 7) + 48) + 944))();
          IO80211SkywalkInterface::getInterfaceRole(a5);
          (*(void (**)(void))(**(void **)(*((void *)this + 7) + 48) + 544))();
          (*(void (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)a4 + 328))(a4);
          IOLog("[WiFiTimeSync@] Tx UDPv4 message %s sequence %d to %u.%u.%u.%u @ %02x:%02x:%02x:%02x:%02x:%02x Error conversion. set ts=0 fw_ns=%lld now_ns=%lld ts_ticks=%lld now_ticks=%lld lastPowerOnTicks=%lld isPowerOn()=%d if:%d tsEnabled:%d tsRequested:%d tx_status:%d\n", v225, v214, v202, v190, v180, v170, v164, v158, v156, v154, v152);
        }
      }
    }
    if (!(*(unsigned int (**)(void))(**(void **)(*((void *)this + 7) + 48) + 944))(*(void *)(*((void *)this + 7) + 48))
      || AppleBCMWLANBusInterfacePCIe::getLastTimePowerOnTicks(*(AppleBCMWLANBusInterfacePCIe **)(*((void *)this + 7)
                                                                                                + 48)) > v37)
    {
      if (PE_i_can_has_debugger(0))
      {
        uint64_t v114 = *((void *)this + 7);
        if (!*(unsigned char *)(v114 + 484))
        {
          unint64_t v115 = v13[4] | ((unint64_t)(v13[5] & 0xFFFFFFF) << 32);
          uint64_t LastTimePowerOnTicks = AppleBCMWLANBusInterfacePCIe::getLastTimePowerOnTicks(*(AppleBCMWLANBusInterfacePCIe **)(v114 + 48));
          int v117 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 7) + 48) + 944))();
          IOLog("[WiFiTimeSync!] TX PTMTimestamp invalid: fw_ns=%lld now_ns=%lld ts_ticks=%lld now_ticks=%lld lastPowerOnTicks=%lld isPowerOn()=%d. triggering WD\n", v115, v226, v21, v37, LastTimePowerOnTicks, v117);
          *(unsigned char *)(*((void *)this + 7) + 484) = 1;
          unint64_t v107 = *(CCFaultReporter **)(*((void *)this + 7) + 16);
          unsigned int v109 = 6;
          unsigned int v110 = 2794;
          int v108 = -469794004;
          goto LABEL_177;
        }
      }
    }
  }
  else
  {
    (*(void (**)(AppleBCMWLANPCIeSkywalkPacket *, uint64_t))(*(void *)a4 + 304))(a4, -1);
    if (AppleBCMWLANUtil::isPTPPacket(a4, (AppleBCMWLANPCIeSkywalkPacket *)1, &v230, v229, (unsigned __int8 **)&v228[1], (unsigned __int8 **)v228, v227, v31))
    {
      unsigned int v32 = AppleBCMWLANPCIeSkywalk::setTXTimestamp(void *,int,AppleBCMWLANPCIeSkywalkPacket *,IO80211SkywalkInterface *,BOOL)::consecErr++;
      if (v32 <= 0x14)
      {
        if (v230)
        {
          uint64_t v33 = 0;
          uint64_t v34 = "unknown";
          while (AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v33] != v228[0])
          {
            v33 += 4;
            if (v33 == 36) {
              goto LABEL_127;
            }
          }
          uint64_t v34 = *(const char **)&AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v33 + 2];
LABEL_127:
          uint64_t v207 = *(unsigned __int16 *)v227;
          v218 = v34;
          if (*(void *)&v228[1])
          {
            uint64_t v195 = **(unsigned char **)&v228[1];
            uint64_t v183 = *(unsigned __int8 *)(*(void *)&v228[1] + 1);
            uint64_t v173 = *(unsigned __int8 *)(*(void *)&v228[1] + 2);
            uint64_t v160 = *(unsigned __int8 *)(*(void *)&v228[1] + 3);
            uint64_t v166 = *(unsigned __int8 *)(*(void *)&v228[1] + 12);
          }
          else
          {
            uint64_t v160 = 0;
            uint64_t v166 = 0;
            uint64_t v173 = 0;
            uint64_t v183 = 0;
            uint64_t v195 = 0;
          }
          IO80211SkywalkInterface::getInterfaceRole(a5);
          (*(void (**)(void))(**(void **)(*((void *)this + 7) + 48) + 544))();
          (*(void (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)a4 + 328))(a4);
          IOLog("[WiFiTimeSync@] Tx UDPv6 message %s sequence %d to %02x%02x:%02x%02x_%02x%02x:%02x%02x @ %02x:%02x:%02x:%02x:%02x:%02x Error set ts=-1 if:%d tsEnabled:%d tsRequested:%d tx_status:%d\n", v218, v207, v195, v183, v173, v160, v166);
        }
        else
        {
          uint64_t v96 = 0;
          int v97 = "unknown";
          while (AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v96] != v228[0])
          {
            v96 += 4;
            if (v96 == 36) {
              goto LABEL_149;
            }
          }
          int v97 = *(const char **)&AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v96 + 2];
LABEL_149:
          uint64_t v210 = *(unsigned __int16 *)v227;
          v221 = v97;
          if (*(void *)&v228[1])
          {
            uint64_t v198 = **(unsigned char **)&v228[1];
            uint64_t v186 = *(unsigned __int8 *)(*(void *)&v228[1] + 1);
            uint64_t v176 = *(unsigned __int8 *)(*(void *)&v228[1] + 2);
          }
          else
          {
            uint64_t v176 = 0;
            uint64_t v186 = 0;
            uint64_t v198 = 0;
          }
          IO80211SkywalkInterface::getInterfaceRole(a5);
          (*(void (**)(void))(**(void **)(*((void *)this + 7) + 48) + 544))();
          (*(void (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)a4 + 328))(a4);
          IOLog("[WiFiTimeSync@] Tx UDPv4 message %s sequence %d to %u.%u.%u.%u @ %02x:%02x:%02x:%02x:%02x:%02x Error set ts=-1 if:%d tsEnabled:%d tsRequested:%d tx_status:%d\n", v221, v210, v198, v186, v176);
        }
      }
    }
  }
LABEL_71:
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)a4 + 328))(a4);
  if (result)
  {
    uint64_t result = AppleBCMWLANBusInterfacePCIe::isTSLoggingEnabled(*(AppleBCMWLANBusInterfacePCIe **)(*((void *)this + 7)
                                                                                               + 48));
    if (result)
    {
      uint64_t result = AppleBCMWLANUtil::isPTPPacket(a4, (AppleBCMWLANPCIeSkywalkPacket *)1, &v230, v229, (unsigned __int8 **)&v228[1], (unsigned __int8 **)v228, v227, v43);
      if (result)
      {
        char v44 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 7) + 48) + 544))(*(void *)(*((void *)this + 7) + 48));
        unint64_t v226 = 0xAAAAAAAAAAAAAAAALL;
        uint64_t v45 = *(unsigned __int8 **)v229;
        uint64_t v46 = -16;
        if (!v230) {
          uint64_t v46 = -4;
        }
        uint64_t v47 = (unsigned __int8 *)(*(void *)&v228[1] + v46);
        (*(void (**)(AppleBCMWLANPCIeSkywalkPacket *, unint64_t *))(*(void *)a4 + 320))(a4, &v226);
        if (v44)
        {
          uint64_t v48 = 0;
          if (v12)
          {
            if (v230)
            {
              uint64_t v49 = "unknown";
              while (AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v48] != v228[0])
              {
                v48 += 4;
                if (v48 == 36) {
                  goto LABEL_107;
                }
              }
              uint64_t v49 = *(const char **)&AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v48 + 2];
LABEL_107:
              uint64_t v217 = *(unsigned __int16 *)v227;
              uint64_t v206 = *v47;
              uint64_t v194 = v47[1];
              uint64_t v75 = v47[2];
              uint64_t v76 = v47[3];
              uint64_t v77 = v47[12];
              uint64_t v78 = v47[13];
              uint64_t v79 = v47[14];
              uint64_t v80 = v47[15];
              uint64_t v81 = v45[6];
              uint64_t v82 = v45[7];
              uint64_t v83 = v45[8];
              uint64_t v84 = v45[9];
              uint64_t v85 = v45[10];
              uint64_t v86 = v45[11];
              uint64_t v87 = *(void *)&v228[1];
              if (*(void *)&v228[1])
              {
                uint64_t v88 = **(unsigned char **)&v228[1];
                uint64_t v89 = *(unsigned __int8 *)(*(void *)&v228[1] + 1);
                uint64_t v90 = *(unsigned __int8 *)(*(void *)&v228[1] + 2);
                uint64_t v91 = *(unsigned __int8 *)(*(void *)&v228[1] + 3);
                uint64_t v92 = *(unsigned __int8 *)(*(void *)&v228[1] + 12);
                uint64_t v93 = *(unsigned __int8 *)(*(void *)&v228[1] + 13);
                unint64_t v94 = *(unsigned __int8 *)(*(void *)&v228[1] + 14);
                uint64_t v87 = *(unsigned __int8 *)(*(void *)&v228[1] + 15);
              }
              else
              {
                unint64_t v94 = 0;
                uint64_t v92 = 0;
                uint64_t v90 = 0;
                uint64_t v88 = 0;
                uint64_t v89 = 0;
                uint64_t v91 = 0;
                uint64_t v93 = 0;
              }
              unint64_t v146 = v12;
              unint64_t v147 = v226;
              uint64_t v144 = *(unsigned __int8 *)(*(void *)v229 + 4);
              uint64_t v145 = *(unsigned __int8 *)(*(void *)v229 + 5);
              uint64_t v142 = *(unsigned __int8 *)(*(void *)v229 + 2);
              uint64_t v143 = *(unsigned __int8 *)(*(void *)v229 + 3);
              uint64_t v140 = **(unsigned char **)v229;
              uint64_t v141 = *(unsigned __int8 *)(*(void *)v229 + 1);
              unint64_t v138 = v94;
              uint64_t v139 = v87;
              uint64_t v136 = v92;
              uint64_t v137 = v93;
              uint64_t v134 = v90;
              uint64_t v135 = v91;
              uint64_t v132 = v88;
              uint64_t v133 = v89;
              uint64_t v130 = v85;
              uint64_t v131 = v86;
              uint64_t v128 = v83;
              uint64_t v129 = v84;
              uint64_t v126 = v81;
              uint64_t v127 = v82;
              uint64_t v124 = v79;
              uint64_t v125 = v80;
              uint64_t v122 = v77;
              uint64_t v123 = v78;
              uint64_t v120 = v75;
              uint64_t v121 = v76;
              uint64_t v119 = v194;
              uint64_t v118 = v206;
              uint64_t v74 = "[WiFiTimeSync!] Tx UDPv6 message %s sequence %d from %02x%02x:%02x%02x_%02x%02x:%02x%02x @ %02x:%02x"
                    ":%02x:%02x:%02x:%02x to %02x%02x:%02x%02x_%02x%02x:%02x%02x @ %02x:%02x:%02x:%02x:%02x:%02x complete"
                    "d with tx_status %d ts %llu";
LABEL_113:
              uint64_t v95 = v217;
              return IOLog(v74, v49, v95, v118, v119, v120, v121, v122, v123, v124, v125, v126, v127, v128, v129, v130, v131, v132, v133,
                       v134,
                       v135,
                       v136,
                       v137,
                       v138,
                       v139,
                       v140,
                       v141,
                       v142,
                       v143,
                       v144,
                       v145,
                       v146,
                       v147,
                       v148);
            }
            uint64_t v73 = "unknown";
            while (AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v48] != v228[0])
            {
              v48 += 4;
              if (v48 == 36) {
                return IOLog("[WiFiTimeSync!] Tx UDPv4 message %s sequence %d from %u.%u.%u.%u @ %02x:%02x:%02x:%02x:%02x:%02x to %u.%u.%u.%u @ %02x:%02x:%02x:%02x:%02x:%02x completed with tx_status %d ts %llu", v73, *(unsigned __int16 *)v227, *v47, v47[1], v47[2], v47[3], v45[6], v45[7], v45[8]);
              }
            }
            uint64_t v73 = *(const char **)&AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v48 + 2];
            return IOLog("[WiFiTimeSync!] Tx UDPv4 message %s sequence %d from %u.%u.%u.%u @ %02x:%02x:%02x:%02x:%02x:%02x to %u.%u.%u.%u @ %02x:%02x:%02x:%02x:%02x:%02x completed with tx_status %d ts %llu", v73, *(unsigned __int16 *)v227, *v47, v47[1], v47[2], v47[3], v45[6], v45[7], v45[8]);
          }
          else
          {
            if (!v230)
            {
              uint64_t v49 = "unknown";
              while (AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v48] != v228[0])
              {
                v48 += 4;
                if (v48 == 36) {
                  goto LABEL_146;
                }
              }
              uint64_t v49 = *(const char **)&AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v48 + 2];
LABEL_146:
              uint64_t v95 = *(unsigned __int16 *)v227;
              uint64_t v102 = *(void *)&v228[1];
              if (*(void *)&v228[1])
              {
                uint64_t v103 = **(unsigned char **)&v228[1];
                uint64_t v104 = *(unsigned __int8 *)(*(void *)&v228[1] + 1);
                uint64_t v105 = *(unsigned __int8 *)(*(void *)&v228[1] + 2);
                uint64_t v102 = *(unsigned __int8 *)(*(void *)&v228[1] + 3);
              }
              else
              {
                uint64_t v105 = 0;
                uint64_t v103 = 0;
                uint64_t v104 = 0;
              }
              uint64_t v137 = *(unsigned __int8 *)(*(void *)v229 + 5);
              unint64_t v138 = v226;
              uint64_t v135 = *(unsigned __int8 *)(*(void *)v229 + 3);
              uint64_t v136 = *(unsigned __int8 *)(*(void *)v229 + 4);
              uint64_t v133 = *(unsigned __int8 *)(*(void *)v229 + 1);
              uint64_t v134 = *(unsigned __int8 *)(*(void *)v229 + 2);
              uint64_t v131 = v102;
              uint64_t v132 = **(unsigned char **)v229;
              uint64_t v129 = v104;
              uint64_t v130 = v105;
              uint64_t v127 = v45[11];
              uint64_t v128 = v103;
              uint64_t v125 = v45[9];
              uint64_t v126 = v45[10];
              uint64_t v123 = v45[7];
              uint64_t v124 = v45[8];
              uint64_t v121 = v47[3];
              uint64_t v122 = v45[6];
              uint64_t v119 = v47[1];
              uint64_t v120 = v47[2];
              uint64_t v118 = *v47;
              uint64_t v74 = "[WiFiTimeSync-] Tx UDPv4 message %s sequence %d from %u.%u.%u.%u @ %02x:%02x:%02x:%02x:%02x:%02x to "
                    "%u.%u.%u.%u @ %02x:%02x:%02x:%02x:%02x:%02x completed. ts %llu";
              return IOLog(v74, v49, v95, v118, v119, v120, v121, v122, v123, v124, v125, v126, v127, v128, v129, v130, v131, v132, v133,
                       v134,
                       v135,
                       v136,
                       v137,
                       v138,
                       v139,
                       v140,
                       v141,
                       v142,
                       v143,
                       v144,
                       v145,
                       v146,
                       v147,
                       v148);
            }
            __int16 v51 = "unknown";
            while (AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v48] != v228[0])
            {
              v48 += 4;
              if (v48 == 36) {
                return IOLog("[WiFiTimeSync-] Tx UDPv6 message %s sequence %d from %02x%02x:%02x%02x_%02x%02x:%02x%02x @ %02x:%02x:%02x:%02x:%02x:%02x to %02x%02x:%02x%02x_%02x%02x:%02x%02x @ %02x:%02x:%02x:%02x:%02x:%02x completed. ts %llu", v51, *(unsigned __int16 *)v227, *v47, v47[1], v47[2], v47[3], v47[12], v47[13], v47[14], v47[15], v45[6], v45[7], v45[8]);
              }
            }
            __int16 v51 = *(const char **)&AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v48 + 2];
            return IOLog("[WiFiTimeSync-] Tx UDPv6 message %s sequence %d from %02x%02x:%02x%02x_%02x%02x:%02x%02x @ %02x:%02x:%02x:%02x:%02x:%02x to %02x%02x:%02x%02x_%02x%02x:%02x%02x @ %02x:%02x:%02x:%02x:%02x:%02x completed. ts %llu", v51, *(unsigned __int16 *)v227, *v47, v47[1], v47[2], v47[3], v47[12], v47[13], v47[14], v47[15], v45[6], v45[7], v45[8]);
          }
        }
        else
        {
          uint64_t v50 = 0;
          if (v230)
          {
            uint64_t v49 = "unknown";
            while (AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v50] != v228[0])
            {
              v50 += 4;
              if (v50 == 36) {
                goto LABEL_98;
              }
            }
            uint64_t v49 = *(const char **)&AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v50 + 2];
LABEL_98:
            uint64_t v217 = *(unsigned __int16 *)v227;
            uint64_t v205 = *v47;
            uint64_t v193 = v47[1];
            uint64_t v53 = v47[2];
            uint64_t v54 = v47[3];
            uint64_t v55 = v47[12];
            uint64_t v56 = v47[13];
            uint64_t v57 = v47[14];
            uint64_t v58 = v47[15];
            uint64_t v59 = v45[6];
            uint64_t v60 = v45[7];
            uint64_t v61 = v45[8];
            uint64_t v62 = v45[9];
            uint64_t v63 = v45[10];
            uint64_t v64 = v45[11];
            uint64_t v65 = *(void *)&v228[1];
            if (*(void *)&v228[1])
            {
              uint64_t v66 = **(unsigned char **)&v228[1];
              uint64_t v67 = *(unsigned __int8 *)(*(void *)&v228[1] + 1);
              uint64_t v68 = *(unsigned __int8 *)(*(void *)&v228[1] + 2);
              uint64_t v69 = *(unsigned __int8 *)(*(void *)&v228[1] + 3);
              uint64_t v70 = *(unsigned __int8 *)(*(void *)&v228[1] + 12);
              uint64_t v71 = *(unsigned __int8 *)(*(void *)&v228[1] + 13);
              unint64_t v72 = *(unsigned __int8 *)(*(void *)&v228[1] + 14);
              uint64_t v65 = *(unsigned __int8 *)(*(void *)&v228[1] + 15);
            }
            else
            {
              unint64_t v72 = 0;
              uint64_t v70 = 0;
              uint64_t v68 = 0;
              uint64_t v66 = 0;
              uint64_t v67 = 0;
              uint64_t v69 = 0;
              uint64_t v71 = 0;
            }
            unint64_t v147 = v12;
            unint64_t v148 = v226;
            uint64_t v145 = *(unsigned __int8 *)(*(void *)v229 + 5);
            unint64_t v146 = 0;
            uint64_t v143 = *(unsigned __int8 *)(*(void *)v229 + 3);
            uint64_t v144 = *(unsigned __int8 *)(*(void *)v229 + 4);
            uint64_t v141 = *(unsigned __int8 *)(*(void *)v229 + 1);
            uint64_t v142 = *(unsigned __int8 *)(*(void *)v229 + 2);
            uint64_t v139 = v65;
            uint64_t v140 = **(unsigned char **)v229;
            uint64_t v137 = v71;
            unint64_t v138 = v72;
            uint64_t v135 = v69;
            uint64_t v136 = v70;
            uint64_t v133 = v67;
            uint64_t v134 = v68;
            uint64_t v131 = v64;
            uint64_t v132 = v66;
            uint64_t v129 = v62;
            uint64_t v130 = v63;
            uint64_t v127 = v60;
            uint64_t v128 = v61;
            uint64_t v125 = v58;
            uint64_t v126 = v59;
            uint64_t v123 = v56;
            uint64_t v124 = v57;
            uint64_t v121 = v54;
            uint64_t v122 = v55;
            uint64_t v120 = v53;
            uint64_t v119 = v193;
            uint64_t v118 = v205;
            uint64_t v74 = "[WiFiTimeSync!] Tx UDPv6 message %s sequence %d from %02x%02x:%02x%02x_%02x%02x:%02x%02x @ %02x:%02x:%"
                  "02x:%02x:%02x:%02x to %02x%02x:%02x%02x_%02x%02x:%02x%02x @ %02x:%02x:%02x:%02x:%02x:%02x , but tsEnab"
                  "led %d tx_status %d ts %llu";
            goto LABEL_113;
          }
          uint64_t v52 = "unknown";
          while (AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v50] != v228[0])
          {
            v50 += 4;
            if (v50 == 36) {
              return IOLog("[WiFiTimeSync!] Tx UDPv4 message %s sequence %d from %u.%u.%u.%u @ %02x:%02x:%02x:%02x:%02x:%02x to %u.%u.%u.%u @ %02x:%02x:%02x:%02x:%02x:%02x , but tsEnabled %d tx_status %d ts %llu", v52, *(unsigned __int16 *)v227, *v47, v47[1], v47[2], v47[3], v45[6], v45[7], v45[8], v45[9]);
            }
          }
          uint64_t v52 = *(const char **)&AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v50 + 2];
          return IOLog("[WiFiTimeSync!] Tx UDPv4 message %s sequence %d from %u.%u.%u.%u @ %02x:%02x:%02x:%02x:%02x:%02x to %u.%u.%u.%u @ %02x:%02x:%02x:%02x:%02x:%02x , but tsEnabled %d tx_status %d ts %llu", v52, *(unsigned __int16 *)v227, *v47, v47[1], v47[2], v47[3], v45[6], v45[7], v45[8], v45[9]);
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANPCIeSkywalk::collectAdapterStats(AppleBCMWLANPCIeSkywalk *this, char *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if (*(void *)(*((void *)this + 7) + 64))
  {
    uint64_t v10 = IO80211Print();
    a5 = (*(uint64_t (**)(void, char *, unint64_t, unint64_t, uint64_t))(**(void **)(*((void *)this + 7) + 64)
                                                                                                + 184))(*(void *)(*((void *)this + 7) + 64), a2, a3, a4, v10 + a5);
  }
  uint64_t v11 = IO80211Print() + a5;
  uint64_t v12 = IO80211Print() + v11;
  uint64_t v13 = IO80211Print() + v12;
  uint64_t v14 = 0;
  uint64_t v15 = IO80211Print() + v13;
  do
  {
    if (*(void *)(*((void *)this + 7) + 8 * v14 + 240)) {
      v15 += IO80211Print();
    }
    ++v14;
  }
  while (v14 != 12);
  uint64_t v16 = IO80211Print() + v15;
  uint64_t v17 = IO80211Print() + v16;
  uint64_t v18 = 0;
  uint64_t v19 = IO80211Print() + v17;
  do
  {
    if (*(void *)(*((void *)this + 7) + 8 * v18 + 368)) {
      v19 += IO80211Print();
    }
    ++v18;
  }
  while (v18 != 12);
  uint64_t TxPacketTracker = AppleBCMWLANPCIeSkywalkPacketPool::getTxPacketTracker(*(AppleBCMWLANPCIeSkywalkPacketPool **)(*((void *)this + 7) + 56));
  (*(void (**)(uint64_t))(*(void *)TxPacketTracker + 72))(TxPacketTracker);
  uint64_t RxPacketTracker = AppleBCMWLANPCIeSkywalkPacketPool::getRxPacketTracker(*(AppleBCMWLANPCIeSkywalkPacketPool **)(*((void *)this + 7) + 56));
  (*(void (**)(uint64_t))(*(void *)RxPacketTracker + 72))(RxPacketTracker);
  uint64_t v22 = IO80211Print() + v19;
  absolutetime_to_nanoseconds();
  absolutetime_to_nanoseconds();
  uint64_t v23 = IO80211Print();
  return AppleBCMWLANPCIeSkywalkPacketPool::collectPacketPoolStats(*(AppleBCMWLANPCIeSkywalkPacketPool **)(*((void *)this + 7) + 56), a2, a3, a4, v23 + v22);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalk::collectAdapterStats(AppleBCMWLANPCIeSkywalk *this, char *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  return AppleBCMWLANPCIeSkywalk::collectAdapterStats((AppleBCMWLANPCIeSkywalk *)((char *)this - 40), a2, a3, a4, a5);
}

void AppleBCMWLANPCIeSkywalk::setMonitorMode(AppleBCMWLANPCIeSkywalk *this, OSObject *a2)
{
  char v2 = (char)a2;
  if (a2) {
    AppleBCMWLANPCIeSkywalk::allocSkywalkMonitorResources(this, a2);
  }
  else {
    AppleBCMWLANPCIeSkywalk::freeSkywalkMonitorResources(this);
  }
  *(unsigned char *)(*((void *)this + 7) + 128) = v2;
}

void non-virtual thunk to'AppleBCMWLANPCIeSkywalk::setMonitorMode(AppleBCMWLANPCIeSkywalk *this, OSObject *a2)
{
}

uint64_t AppleBCMWLANPCIeSkywalk::getLowLatencyTxCompRing(AppleBCMWLANPCIeSkywalk *this)
{
  return *(void *)(*((void *)this + 7) + 88);
}