uint64_t AppleBCMWLANPCIeSkywalk::getLowLatencyRxCompRing(AppleBCMWLANPCIeSkywalk *this)
{
  return *(void *)(*((void *)this + 7) + 96);
}

uint64_t AppleBCMWLANPCIeSkywalk::storePTMTimestamp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  nanoseconds_to_absolutetime();
  unint64_t ContinuousTimeOffset = AppleBCMWLANBusInterfacePCIe::getContinuousTimeOffset(*(AppleBCMWLANBusInterfacePCIe **)(*(void *)(a1 + 56) + 48));
  (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 528))(a3, 1);
  return (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a3 + 544))(a3, ContinuousTimeOffset);
}

uint64_t AppleBCMWLANPCIeSkywalk::getPacketPool(AppleBCMWLANPCIeSkywalk *this)
{
  return *(void *)(*((void *)this + 7) + 56);
}

uint64_t AppleBCMWLANPCIeSkywalk::setInterfaceBitmap(uint64_t this, char a2)
{
  *(_DWORD *)(*(void *)(this + 56) + 44) |= 1 << a2;
  return this;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalk::setInterfaceBitmap(uint64_t this, char a2)
{
  *(_DWORD *)(*(void *)(this + 16) + 44) |= 1 << a2;
  return this;
}

uint64_t AppleBCMWLANPCIeSkywalk::rxSubmissionQueueDataAvailable(AppleBCMWLANPCIeSkywalk *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 7) + 48) + 80))(*(void *)(*((void *)this + 7) + 48));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  v4[2] = ___ZN23AppleBCMWLANPCIeSkywalk30rxSubmissionQueueDataAvailableEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_129;
  v4[4] = this;
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v2 + 112))(v2, v4);
}

uint64_t ___ZN23AppleBCMWLANPCIeSkywalk30rxSubmissionQueueDataAvailableEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  ++*(void *)(*(void *)(v1 + 56) + 168);
  (*(void (**)(void, void, void))(**(void **)(*(void *)(v1 + 56) + 64) + 128))(*(void *)(*(void *)(v1 + 56) + 64), 0, 0);
  return 0;
}

uint64_t AppleBCMWLANPCIeSkywalk::setCommonLogger(AppleBCMWLANPCIeSkywalk *this, OSObject *anObject)
{
  *(void *)(*((void *)this + 7) + 8) = OSMetaClassBase::safeMetaCast(anObject, gCCLogStreamMetaClass);
  v3 = *(uint64_t (**)(void))(**(void **)(*((void *)this + 7) + 64) + 224);
  return v3();
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalk::setCommonLogger(AppleBCMWLANPCIeSkywalk *this, OSObject *anObject)
{
  *(void *)(*((void *)this + 2) + 8) = OSMetaClassBase::safeMetaCast(anObject, gCCLogStreamMetaClass);
  v3 = *(uint64_t (**)(void))(**(void **)(*((void *)this + 2) + 64) + 224);
  return v3();
}

void _GLOBAL__sub_I_AppleBCMWLANPCIeSkywalk_cpp()
{
  kNullRange = 0;
}

OSObject *AppleBCMWLANPCIeSkywalkFlowQueue::withProviderAndQueueInfo(AppleBCMWLANBusInterfacePCIe *a1, uint64_t a2, unsigned __int8 a3, IO80211SkywalkInterface *a4, BOOL (__cdecl *a5)(OSObject *__hidden this), void (__cdecl *a6)(OSObject *__hidden this))
{
  v14 = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANPCIeSkywalkFlowQueueMetaClass, &v14)) {
    return 0;
  }
  v12 = v14;
  if (v14
    && (AppleBCMWLANPCIeSkywalkFlowQueue::initWithProviderAndQueueInfo(v14, a1, a2 & 0xFFFFFFFFFFFFLL, a3, a4, a5, a6) & 1) == 0)
  {
    ((void (*)(OSObject *))v12->release)(v12);
    return 0;
  }
  return v12;
}

uint64_t AppleBCMWLANPCIeSkywalkFlowQueue::initWithProviderAndQueueInfo(OSObject *a1, AppleBCMWLANBusInterfacePCIe *a2, uint64_t a3, unsigned __int8 a4, IO80211SkywalkInterface *a5, BOOL (__cdecl *a6)(OSObject *__hidden this), void (__cdecl *a7)(OSObject *__hidden this))
{
  uint64_t result = OSObject::init(a1);
  if (result)
  {
    uint64_t result = IOMallocZeroTyped();
    a1[1].OSMetaClassBase::__vftable = (OSObject_vtbl *)result;
    if (result)
    {
      *(_DWORD *)uint64_t result = a3;
      *(_WORD *)(result + 4) = WORD2(a3);
      a1[1].init = a6;
      v15 = a1[1].OSMetaClassBase::__vftable;
      init = v15->init;
      if (init)
      {
        (*(void (**)(BOOL (__cdecl *)(OSObject *__hidden)))(*(void *)init + 8))(init);
        v15 = a1[1].OSMetaClassBase::__vftable;
      }
      v15->free = a7;
      a1[1].OSMetaClassBase::__vftable[1].retain = (void (__cdecl *)(const OSObject *__hidden))a5;
      LOWORD(a1[1].OSMetaClassBase::__vftable[1].init) = -1;
      a1[1].OSMetaClassBase::__vftable[1].getMetaClass = (const OSMetaClass *(__cdecl *)(const OSMetaClassBase *__hidden))a2;
      a1[1].Dispatch = 0;
      v17 = (const OSMetaClassBase *)(*(uint64_t (**)(void))(*(void *)a1[1].OSMetaClassBase::__vftable[1].getMetaClass
                                                          + 752))();
      v18 = OSMetaClassBase::safeMetaCast(v17, (const OSMetaClass *)gAppleBCMWLANPCIeSkywalkMetaClass);
      a1[1].OSMetaClassBase::__vftable[1].isEqualTo = (BOOL (__cdecl *)(const OSMetaClassBase *__hidden, const OSMetaClassBase *))AppleBCMWLANPCIeSkywalk::getPacketPool((AppleBCMWLANPCIeSkywalk *)v18);
      v19 = a1[1].OSMetaClassBase::__vftable;
      if (v19->init)
      {
        int shouldLog = CCLogStream::shouldLog();
        v19 = a1[1].OSMetaClassBase::__vftable;
        if (shouldLog)
        {
          v24 = (CCLogStream *)v19->init;
          unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a5);
          CCLogStream::logAlert(v24, "[dk] %s@%d:%s: flowQ %p IfID:%u ac:%u \n", "initWithProviderAndQueueInfo", 103, "initWithProviderAndQueueInfo", a1, InterfaceId, a4);
          v19 = a1[1].OSMetaClassBase::__vftable;
        }
      }
      v19->retain = (void (__cdecl *)(const OSObject *__hidden))&v19->retain;
      a1[1].release = (void (__cdecl *)(const OSObject *__hidden))&a1[1].retain;
      LODWORD(a1[1].isEqualTo) = 0;
      BYTE1(a1[1].OSMetaClassBase::__vftable[1].Dispatch) = a4;
      LOBYTE(a1[1].OSMetaClassBase::__vftable[1].Dispatch) = IO80211SkywalkInterface::getInterfaceId(a5);
      v21 = a1[1].OSMetaClassBase::__vftable;
      HIWORD(v21[1].Dispatch) = WORD2(v21->getMetaClass);
      *(_DWORD *)((char *)&v21[1].Dispatch + 2) = v21->getMetaClass;
      if (AppleBCMWLANBusInterfacePCIe::isTSICMPV6LoggingEnabled(a2)) {
        char TweakAllTxAsTS = 1;
      }
      else {
        char TweakAllTxAsTS = AppleBCMWLANBusInterfacePCIe::getTweakAllTxAsTS(a2);
      }
      BYTE2(a1[1].OSMetaClassBase::__vftable[1].init) = TweakAllTxAsTS;
      BYTE3(a1[1].OSMetaClassBase::__vftable[1].init) = AppleBCMWLANBusInterfacePCIe::isTSLoggingEnabled(a2);
      unsigned int IgnoreTSIfBitmap = AppleBCMWLANBusInterfacePCIe::getIgnoreTSIfBitmap(a2);
      BYTE4(a1[1].OSMetaClassBase::__vftable[1].init) = (IgnoreTSIfBitmap >> IO80211SkywalkInterface::getInterfaceId(a5)) & 1;
      BYTE5(a1[1].OSMetaClassBase::__vftable[1].init) = AppleBCMWLANBusInterfacePCIe::getTSTxExtendedFlags(a2);
      LODWORD(a1[1].OSMetaClassBase::__vftable[1].free) = AppleBCMWLANBusInterfacePCIe::getTimestampingMode(a2);
      return 1;
    }
  }
  return result;
}

void AppleBCMWLANPCIeSkywalkFlowQueue::free(AppleBCMWLANPCIeSkywalkFlowQueue *this)
{
  if (*((void *)this + 5))
  {
    AppleBCMWLANPCIeSkywalkFlowQueue::setFWRing(this, 0);
    uint64_t v2 = *((void *)this + 5);
    if (*(void *)(v2 + 40))
    {
      int shouldLog = CCLogStream::shouldLog();
      uint64_t v2 = *((void *)this + 5);
      if (shouldLog)
      {
        v6 = *(CCLogStream **)(v2 + 40);
        unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(v2 + 64));
        CCLogStream::logInfo(v6, "[dk] %s@%d:%s: flowQ %p IfID:%u", "free", 125, "free", this, InterfaceId);
        uint64_t v2 = *((void *)this + 5);
      }
    }
    uint64_t v4 = *(void *)(v2 + 40);
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
      *(void *)(*((void *)this + 5) + 40) = 0;
      uint64_t v2 = *((void *)this + 5);
    }
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)uint64_t v2 = 0u;
    v5 = (void *)*((void *)this + 5);
    if (v5)
    {
      IOFree(v5, 0x70uLL);
      *((void *)this + 5) = 0;
    }
  }
  OSObject::free((OSObject *)this);
}

uint64_t AppleBCMWLANPCIeSkywalkFlowQueue::setFWRing(AppleBCMWLANPCIeSkywalkFlowQueue *this, AppleBCMWLANPCIeTransmitFlowRing *a2)
{
  if (a2)
  {
    uint64_t v4 = *((void *)this + 5);
    if (*(void *)(v4 + 40))
    {
      int shouldLog = CCLogStream::shouldLog();
      uint64_t v4 = *((void *)this + 5);
      if (shouldLog)
      {
        CCLogStream::logInfo(*(CCLogStream **)(v4 + 40), "[dk] %s@%d:Set flowid:%u\n", "setFWRing", 257, *(unsigned __int16 *)(v4 + 96));
        uint64_t v4 = *((void *)this + 5);
      }
    }
    *(void *)(v4 + 72) = a2;
    v6 = *(uint64_t (**)(AppleBCMWLANPCIeTransmitFlowRing *))(*(void *)a2 + 8);
    return v6(a2);
  }
  else
  {
    AppleBCMWLANPCIeSkywalkFlowQueue::flushPackets(this);
    uint64_t v8 = *((void *)this + 5);
    if (*(__int16 *)(v8 + 96) != -1)
    {
      if (*(void *)(v8 + 40))
      {
        int v9 = CCLogStream::shouldLog();
        uint64_t v8 = *((void *)this + 5);
        if (v9)
        {
          CCLogStream::logInfo(*(CCLogStream **)(v8 + 40), "[dk] %s@%d:Free flowid:%u\n", "setFWRing", 266, *(unsigned __int16 *)(v8 + 96));
          uint64_t v8 = *((void *)this + 5);
        }
      }
      AppleBCMWLANBusInterfacePCIe::releaseFlowId(*(AppleBCMWLANBusInterfacePCIe **)(v8 + 56), *(unsigned __int16 *)(v8 + 96));
      *(_WORD *)(*((void *)this + 5) + 96) = -1;
      uint64_t v8 = *((void *)this + 5);
    }
    uint64_t result = *(void *)(v8 + 72);
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      *(void *)(*((void *)this + 5) + 72) = 0;
    }
  }
  return result;
}

void non-virtual thunk to'AppleBCMWLANPCIeSkywalkFlowQueue::free(AppleBCMWLANPCIeSkywalkFlowQueue *this)
{
}

void *AppleBCMWLANPCIeSkywalkFlowQueue::enqueuePacket(AppleBCMWLANPCIeSkywalkFlowQueue *this, AppleBCMWLANPCIeSkywalkPacket *a2, int a3)
{
  uint64_t v5 = *((void *)this + 5);
  if (*(__int16 *)(v5 + 96) != -1 || a3 == 0)
  {
LABEL_75:
    uint64_t result = (void *)AppleBCMWLANPCIeSkywalkPacket::getChain(a2);
    v30 = *(void **)(v5 + 16);
    if (*v30 == v5 + 8)
    {
      *uint64_t result = v5 + 8;
      result[1] = v30;
      void *v30 = result;
      *(void *)(v5 + 16) = result;
      uint64_t result = (void *)AppleBCMWLANPCIeSkywalkPacket::setAc((uint64_t)a2, *(unsigned char *)(*((void *)this + 5) + 89));
      ++*(_DWORD *)(*((void *)this + 5) + 24);
    }
    else
    {
      __break(1u);
    }
    return result;
  }
  int v40 = 0;
  int v7 = *(unsigned __int8 *)(v5 + 89);
  uint64_t v8 = *(void *)(v5 + 56);
  if (v8)
  {
    int v9 = (AppleBCMWLANCore *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 1104))(v8);
    v10 = v9;
    BOOL v11 = v9 != 0;
    if (v7 == 3 && v9 != 0)
    {
      if ((AppleBCMWLANCore::checkForHP2PSupport(v9) & 1) == 0)
      {
        if (AppleBCMWLANCore::isP2pAirplayActive(v10)
          && AppleBCMWLANCore::mapLowLatencyLowPriority(v10)
          && (int InterfaceId = IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(*((void *)this + 5)
                                                                                                + 64)),
              InterfaceId == AppleBCMWLANCore::getProximityInterfaceId(v10)))
        {
          int v13 = 5;
        }
        else if ((IO80211SkywalkInterface::isLowLatencyEnabled(*(IO80211SkywalkInterface **)(*((void *)this + 5) {
                                                                                            + 64)) & 1) != 0)
        }
        {
          int v13 = 7;
        }
        else
        {
          int v13 = 6;
        }
        goto LABEL_43;
      }
      BOOL v11 = 1;
    }
  }
  else
  {
    BOOL v11 = 0;
    v10 = 0;
  }
  if (IO80211SkywalkInterface::isLowLatencyEnabled(*(IO80211SkywalkInterface **)(*((void *)this + 5)
                                                                                              + 64)))
  {
    if (v7 == 1)
    {
      int v13 = 2;
      if (!v11) {
        goto LABEL_41;
      }
      goto LABEL_43;
    }
    if (v7 != 2)
    {
      if (v7 == 3)
      {
        int v13 = 7;
        if (v11) {
          goto LABEL_43;
        }
LABEL_41:
        char v15 = 1;
        goto LABEL_50;
      }
      int v13 = 3;
      if (!v11) {
        goto LABEL_41;
      }
      goto LABEL_43;
    }
    int v13 = 4;
LABEL_38:
    if (!v11) {
      goto LABEL_41;
    }
    goto LABEL_43;
  }
  if (v7 == 1)
  {
    int v13 = 1;
    char v15 = 1;
    if (!v11) {
      goto LABEL_50;
    }
    goto LABEL_43;
  }
  if (v7 == 2)
  {
    int v13 = 5;
    goto LABEL_38;
  }
  if (v7 != 3)
  {
    int v13 = 0;
    if (v11) {
      goto LABEL_43;
    }
    goto LABEL_41;
  }
  int v13 = 6;
  if (!v11) {
    goto LABEL_41;
  }
LABEL_43:
  uint64_t v16 = *((void *)this + 5);
  if (*(void *)(v16 + 40))
  {
    int shouldLog = CCLogStream::shouldLog();
    uint64_t v16 = *((void *)this + 5);
    if (shouldLog)
    {
      v31 = *(CCLogStream **)(v16 + 40);
      int v32 = IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(v16 + 64));
      int v33 = AppleBCMWLANCore::checkForHP2PSupport(v10);
      int isP2pAirplayActive = AppleBCMWLANCore::isP2pAirplayActive(v10);
      BOOL v35 = AppleBCMWLANCore::mapLowLatencyLowPriority(v10);
      CCLogStream::logInfo(v31, "[dk] %s@%d:%s: IfID:%u hP2pSupport:%u airplay:%u lowPrioMap:%u \n", "enqueuePacket", 167, "enqueuePacket", v32, v33, isP2pAirplayActive, v35);
      uint64_t v16 = *((void *)this + 5);
    }
  }
  if (*(void *)(v16 + 40) && CCLogStream::shouldLog())
  {
    uint64_t v36 = *((void *)this + 5);
    v37 = *(CCLogStream **)(v36 + 40);
    int v38 = IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(v36 + 64));
    Proximityint InterfaceId = AppleBCMWLANCore::getProximityInterfaceId(v10);
    CCLogStream::logInfo(v37, "[dk] %s@%d:%s: IfID:%u proxIntId:%u ac:%u userPriority:%u \n", "enqueuePacket", 171, "enqueuePacket", v38, ProximityInterfaceId, v7, v13);
  }
  char v15 = 0;
LABEL_50:
  int isLowLatencyEnabled = IO80211SkywalkInterface::isLowLatencyEnabled(*(IO80211SkywalkInterface **)(*((void *)this + 5)
                                                                                                 + 64));
  unsigned __int8 v19 = isLowLatencyEnabled;
  if ((v15 & 1) == 0 && isLowLatencyEnabled)
  {
    if (AppleBCMWLANCore::isSplitTxStatusEnabled(v10)) {
      unsigned __int8 v19 = 3;
    }
    else {
      unsigned __int8 v19 = 1;
    }
  }
  int v20 = IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(*((void *)this + 5) + 64));
  if (IO80211SkywalkInterface::isLowLatencyEnabled(*(IO80211SkywalkInterface **)(*((void *)this + 5)
                                                                                              + 64)))
  {
    ParentInterface = (IO80211SkywalkInterface *)IO80211SkywalkInterface::getParentInterface(*(IO80211SkywalkInterface **)(*((void *)this + 5) + 64));
    if (!ParentInterface)
    {
      uint64_t v22 = *((void *)this + 5);
      if (*(void *)(v22 + 40))
      {
        int v28 = CCLogStream::shouldLog();
        uint64_t v22 = *((void *)this + 5);
        if (v28)
        {
          CCLogStream::logAlert(*(CCLogStream **)(v22 + 40), "[dk] %s@%d:Invalid parentIf\n", "enqueuePacket", 193);
          uint64_t v22 = *((void *)this + 5);
        }
      }
      goto LABEL_68;
    }
    int v20 = IO80211SkywalkInterface::getInterfaceId(ParentInterface);
  }
  uint64_t v22 = *((void *)this + 5);
  if (v20 != -1)
  {
    v23 = *(AppleBCMWLANBusInterfacePCIe **)(v22 + 56);
    uint64_t v24 = (*(uint64_t (**)(void))(**(void **)(v22 + 64) + 1008))(*(void *)(v22 + 64));
    AppleBCMWLANBusInterfacePCIe::requestFlowId(v23, v24 & 0xFFFFFFFFFFFFLL, **((unsigned int **)this + 5) | ((unint64_t)*(unsigned __int16 *)(*((void *)this + 5) + 4) << 32), v20, v13, v7, (unsigned __int16 *)(*((void *)this + 5) + 96), &v40, 0, (uint64_t)this, (uint64_t)AppleBCMWLANPCIeSkywalkFlowQueue::fwRingPending, (uint64_t)AppleBCMWLANPCIeSkywalkFlowQueue::fwRingFill, (uint64_t)AppleBCMWLANPCIeSkywalkFlowQueue::fwRingError, v19);
    uint64_t v25 = *((void *)this + 5);
    unsigned int v26 = *(unsigned __int16 *)(v25 + 96);
    if (v26 == 0xFFFF)
    {
      if (*(void *)(v25 + 40) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 40), "[dk] %s@%d:%s[%d] : ERROR ! Invalid Flow ID in transmit path :%02x:%02x:%02x:%02x:%02x:%02x\n", "enqueuePacket", 223);
      }
    }
    else
    {
      uint64_t TransmitFlowRing = AppleBCMWLANBusInterfacePCIe::getTransmitFlowRing(*(AppleBCMWLANBusInterfacePCIe **)(v25 + 56), v26);
      if (TransmitFlowRing)
      {
        AppleBCMWLANPCIeTransmitFlowRing::setSkywalkFlow(TransmitFlowRing, 1);
      }
      else if (*(void *)(*((void *)this + 5) + 40) && CCLogStream::shouldLog())
      {
        CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 40), "[dk] %s@%d:ERROR: NULL flow ring!\n");
      }
    }
    uint64_t v5 = *((void *)this + 5);
    goto LABEL_75;
  }
LABEL_68:
  uint64_t result = *(void **)(v22 + 40);
  if (result)
  {
    uint64_t result = (void *)CCLogStream::shouldLog();
    if (result) {
      return (void *)CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 40), "[dk] %s@%d:Invalid InterfaceId\n", "enqueuePacket", 198);
    }
  }
  return result;
}

uint64_t AppleBCMWLANPCIeSkywalkFlowQueue::fwRingPending(AppleBCMWLANPCIeSkywalkFlowQueue *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    return *(unsigned int *)(v1 + 24);
  }
  else {
    return 0;
  }
}

uint64_t AppleBCMWLANPCIeSkywalkFlowQueue::fwRingFill(AppleBCMWLANPCIeSkywalkFlowQueue *this, AppleBCMWLANByteRing *a2, unsigned char *a3, unsigned int a4)
{
  TxPacketTracker = (AppleBCMWLANHashtable *)AppleBCMWLANPCIeSkywalkPacketPool::getTxPacketTracker(*(AppleBCMWLANPCIeSkywalkPacketPool **)(*((void *)this + 5) + 80));
  char InterfaceId = IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(*((void *)this + 5) + 64));
  unsigned int v8 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 5) + 64) + 1120))();
  int isLowLatencyEnabled = IO80211SkywalkInterface::isLowLatencyEnabled(*(IO80211SkywalkInterface **)(*((void *)this + 5)
                                                                                                 + 64));
  uint64_t v9 = *((void *)this + 5);
  BOOL v11 = *(_DWORD *)v9 != -1 || *(unsigned __int16 *)(v9 + 4) != 0xFFFF;
  v12 = *(AppleBCMWLANByteRing **)(v9 + 72);
  if (v12 && a2 && v12 == a2)
  {
    if (IO80211SkywalkInterface::isLowLatencyEnabled(*(IO80211SkywalkInterface **)(v9 + 64)))
    {
      ParentInterface = (IO80211SkywalkInterface *)IO80211SkywalkInterface::getParentInterface(*(IO80211SkywalkInterface **)(*((void *)this + 5) + 64));
      if (ParentInterface)
      {
        char InterfaceId = IO80211SkywalkInterface::getInterfaceId(ParentInterface);
      }
      else
      {
        if (*(void *)(*((void *)this + 5) + 40) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 40), "[dk] %s@%d:Invalid parentIf\n", "fwRingFill", 361);
        }
        char InterfaceId = -1;
      }
    }
    __int16 v80 = -21846;
    memset(&v79[1], 170, 24);
    BOOL v68 = v11;
    if (a4)
    {
      uint64_t v14 = 0;
      int v15 = isLowLatencyEnabled;
      if (v11) {
        int v15 = 0;
      }
      unsigned int v70 = v8;
      int v71 = v15;
      uint64_t v69 = -(uint64_t)v8;
      while (1)
      {
        uint64_t v16 = (IOUserNetworkPacket *)AppleBCMWLANPCIeSkywalkFlowQueue::dequeuePacket(this);
        if (!v16) {
          goto LABEL_91;
        }
        v17 = v16;
        unsigned int v18 = ((uint64_t (*)(IOUserNetworkPacket *))v16->getDataLength)(v16);
        if (v18 <= 0xE) {
          break;
        }
        uint64_t v22 = &a3[48 * v14];
        *((_OWORD *)v22 + 1) = 0u;
        *((_OWORD *)v22 + 2) = 0u;
        *(_OWORD *)uint64_t v22 = 0u;
        if (isLowLatencyEnabled
          && AppleBCMWLANBusInterfacePCIe::isFWPacketTimestampEnabled(*(AppleBCMWLANBusInterfacePCIe **)(*((void *)this + 5) + 56)))
        {
          mach_continuous_time();
          absolutetime_to_nanoseconds();
          unint64_t v23 = *(void *)&v79[17] / 0x3E8uLL;
          uint64_t v24 = &a3[48 * v14];
          v24[47] = -1;
          uint64_t v25 = (unsigned __int8 *)(v24 + 47);
          *(_DWORD *)(v25 - 23) = v23;
          if (((unsigned int (*)(IOUserNetworkPacket *, char *))v17->OSObject::OSMetaClassBase::__vftable[1]._PrepareWithQueue)(v17, &v79[9]))
          {
            AppleBCMWLANPCIeSkywalkPacket::setPktLifetime((uint64_t)v17, -1);
          }
          else
          {
            if (*(void *)&v79[9] <= mach_absolute_time())
            {
              uint64_t v20 = *((void *)this + 5);
              if (*(void *)(v20 + 40))
              {
                int shouldLog = CCLogStream::shouldLog();
                uint64_t v20 = *((void *)this + 5);
                if (shouldLog)
                {
                  CCLogStream::logAlertIf(*(CCLogStream **)(v20 + 40), 0x400uLL, "[dk] %s@%d:Got an expired packet. Deallocating\n", "fwRingFill", 393);
                  goto LABEL_89;
                }
              }
LABEL_29:
              AppleBCMWLANPCIeSkywalkPacketPool::deallocatePacket(*(AppleBCMWLANPCIeSkywalkPacketPool **)(v20 + 80), v17);
              goto LABEL_86;
            }
            absolutetime_to_nanoseconds();
            unint64_t v48 = *(void *)&v79[1];
            *(void *)&v79[1] /= 0x3E8uLL;
            unint64_t v49 = (unsigned __int16)(v48 / 0xF4240);
            if (v49 >= 0x7FFF) {
              __int16 v50 = 0x7FFF;
            }
            else {
              __int16 v50 = v49;
            }
            AppleBCMWLANPCIeSkywalkPacket::setPktLifetime((uint64_t)v17, v50);
            unsigned int v51 = *(_DWORD *)&v79[1];
            if (*(void *)&v79[1] >= 0xF4241uLL)
            {
              AppleBCMWLANPCIeSkywalkPacket::setPktLifetime((uint64_t)v17, -2);
              if (*(void *)(*((void *)this + 5) + 40) && CCLogStream::shouldLog()) {
                CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 40), "[dk] %s@%d:com.apple.p2p: Got an packet with lifetime more than a second: lifetime:%llu msg[fillCount].lifetime_250us: %d, scale=%d\n", "fwRingFill", 413, *(void *)&v79[1], *v25, a3[48 * v14 + 45] & 7);
              }
            }
            else
            {
              unint64_t v52 = *(unsigned int *)&v79[1] / 0xFAuLL;
              *(void *)&v79[1] = v52;
              v53 = &a3[48 * v14];
              char v55 = v53[45];
              v54 = v53 + 45;
              char v56 = v55 & 0xF8;
              if (v51 >> 9 >= 0x7D)
              {
                do
                {
                  unint64_t v57 = v52;
                  v52 >>= 1;
                  char v56 = v56 & 0xF8 | (v56 + 1) & 7;
                }
                while (v57 > 0x1FF);
                *(void *)&v79[1] = v52;
              }
              unsigned char *v54 = v56;
              *uint64_t v25 = v52;
            }
          }
        }
        *uint64_t v22 = 15;
        v22[1] = InterfaceId;
        if ((*(unsigned int (**)(void))(**(void **)(*((void *)this + 5) + 72) + 248))(*(void *)(*((void *)this + 5) + 72))) {
          char v26 = -127;
        }
        else {
          char v26 = 1;
        }
        v22[2] = v26;
        v27 = &a3[48 * v14];
        v27[22] = 0;
        v27[22] |= (32 * (*(uint64_t (**)(void))(**(void **)(*((void *)this + 5) + 72) + 344))()) | 1;
        v27[44] = 0;
        int v28 = v27 + 44;
        *(v28 - 21) = 1;
        __int16 v80 = -1;
        if (AppleBCMWLANHashtable::add(TxPacketTracker, v17, (unsigned __int16 *)&v80))
        {
          if (*(void *)(*((void *)this + 5) + 40) && CCLogStream::shouldLog()) {
            CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 40), "[dk] %s@%d:tx submit, out of tracker\n", "fwRingFill", 444);
          }
          AppleBCMWLANPCIeSkywalkFlowQueue::enqueuePacket(this, (AppleBCMWLANPCIeSkywalkPacket *)v17, 1);
          return v14;
        }
        AppleBCMWLANPCIeSkywalkPacket::setPacketId((uint64_t)v17, v80);
        unsigned int Headroom = IO80211NetworkPacket::getHeadroom((IO80211NetworkPacket *)v17);
        uint64_t v30 = ((uint64_t (*)(IOUserNetworkPacket *))v17->OSObject::OSMetaClassBase::__vftable[1].getDataLength)(v17)
            + Headroom;
        if (v71)
        {
          uint64_t v31 = v30 + v69;
          Headroom -= v70;
          uint64_t v32 = *(void *)v30;
          int v33 = *(_DWORD *)(v30 + 8);
          *(_WORD *)(v31 + 12) = *(_WORD *)(v30 + 12);
          *(_DWORD *)(v31 + 8) = v33;
          *(void *)uint64_t v31 = v32;
          *(void *)(v31 + 14) = 0x8F2170003AAAALL;
          *(void *)(v31 + 20) = 0xDEADBEEF04030008;
          *(_WORD *)(v31 + 12) = bswap32(((uint64_t (*)(IOUserNetworkPacket *))v17->getDataLength)(v17) + 14) >> 16;
          ((void (*)(IOUserNetworkPacket *))v17->setDataLength)(v17);
          uint64_t v30 = v31;
        }
        v34 = &a3[48 * v14];
        uint64_t v35 = *(void *)v30;
        int v36 = *(_DWORD *)(v30 + 8);
        *((_WORD *)v34 + 10) = *(_WORD *)(v30 + 12);
        *((_DWORD *)v34 + 4) = v36;
        *((void *)v34 + 1) = v35;
        uint64_t v37 = AppleBCMWLANPCIeSkywalkPacket::getBusAddress((AppleBCMWLANPCIeSkywalkPacket *)v17) + Headroom + 14;
        *((_WORD *)v34 + 21) = ((uint64_t (*)(IOUserNetworkPacket *))v17->getDataLength)(v17) - 14;
        *((void *)v34 + 4) = v37;
        *((_WORD *)v22 + 2) = v80;
        *((_WORD *)v22 + 3) = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 5) + 72) + 296))();
        if (((unsigned int (*)(IOUserNetworkPacket *))v17->OSObject::OSMetaClassBase::__vftable[1].Dispatch)(v17) == 4718992
          && AppleBCMWLANPCIeSkywalkPacket::getAc((AppleBCMWLANPCIeSkywalkPacket *)v17) == 3)
        {
          if (IO80211SkywalkInterface::getController(*(IO80211SkywalkInterface **)(*((void *)this + 5) + 64)))
          {
            Controller = (AppleBCMWLANCore *)IO80211SkywalkInterface::getController(*(IO80211SkywalkInterface **)(*((void *)this + 5) + 64));
            if (AppleBCMWLANCore::getReliableL3CtrlTxProfileActive(Controller)) {
              a3[48 * v14 + 46] = 0x80;
            }
          }
        }
        char v39 = ((uint64_t (*)(IOUserNetworkPacket *))v17->OSObject::OSMetaClassBase::__vftable[1]._SetPacketIndex)(v17);
        uint64_t v40 = *((void *)this + 5);
        if ((v39 & 1) != 0 || *(unsigned char *)(v40 + 98))
        {
          if (*(_DWORD *)(v40 + 104) == 3)
          {
            uint64_t HostSWTimestamp = AppleBCMWLANBusInterfacePCIe::readHostSWTimestamp(*(AppleBCMWLANBusInterfacePCIe **)(v40 + 56), "fwRingFill");
            ((void (*)(IOUserNetworkPacket *, uint64_t))v17->OSObject::OSMetaClassBase::__vftable[1].free)(v17, HostSWTimestamp);
            uint64_t v40 = *((void *)this + 5);
          }
          if (!*(unsigned char *)(v40 + 100))
          {
            *v28 |= *(unsigned char *)(v40 + 101);
            if ((*(unsigned char *)(*((void *)this + 5) + 101) & 4) != 0) {
              a3[48 * v14 + 46] = 0;
            }
          }
        }
        if (((unsigned int (*)(IOUserNetworkPacket *))v17->OSObject::OSMetaClassBase::__vftable[1]._SetPacketIndex)(v17))
        {
          if (*(unsigned char *)(*((void *)this + 5) + 99))
          {
            v79[0] = 0;
            *(void *)v78 = 0;
            memset(v77, 0, sizeof(v77));
            *(_WORD *)v76 = 0;
            if (AppleBCMWLANUtil::isPTPPacket((AppleBCMWLANUtil *)v17, (AppleBCMWLANPCIeSkywalkPacket *)1, v79, v78, (unsigned __int8 **)&v77[1], (unsigned __int8 **)v77, v76, v42))
            {
              v43 = *(unsigned __int8 **)v78;
              uint64_t v44 = -16;
              if (!v79[0]) {
                uint64_t v44 = -4;
              }
              v45 = (unsigned __int8 *)(*(void *)&v77[1] + v44);
              uint64_t v75 = 0;
              ((void (*)(IOUserNetworkPacket *, uint64_t *))v17->OSObject::OSMetaClassBase::__vftable[1]._GetPacketIndex)(v17, &v75);
              if (v79[0])
              {
                uint64_t v46 = 0;
                while (AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v46] != v77[0])
                {
                  v46 += 4;
                  if (v46 == 36)
                  {
                    v47 = "unknown";
                    goto LABEL_79;
                  }
                }
                v47 = *(const char **)&AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v46 + 2];
LABEL_79:
                IOLog("[WiFiTimeSync+] Tx UDPv6 message %s sequence %d from %02x%02x:%02x%02x_%02x%02x:%02x%02x @ %02x:%02x:%02x:%02x:%02x:%02x to %02x%02x:%02x%02x_%02x%02x:%02x%02x @ %02x:%02x:%02x:%02x:%02x:%02x submitted. fIgnore %d extendedFlags 0x%x ts %llu", v47, *(unsigned __int16 *)v76, *v45, v45[1], v45[2], v45[3], v45[12], v45[13], v45[14], v45[15], v43[6], v43[7], v43[8], v43[9]);
              }
              else
              {
                uint64_t v58 = 0;
                while (AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v58] != v77[0])
                {
                  v58 += 4;
                  if (v58 == 36)
                  {
                    v59 = "unknown";
                    goto LABEL_84;
                  }
                }
                v59 = *(const char **)&AppleBCMWLANUtil::kPTPMessageTypeStringMapping[v58 + 2];
LABEL_84:
                IOLog("[WiFiTimeSync+] Tx UDPv4 message %s sequence %d from %u.%u.%u.%u @ %02x:%02x:%02x:%02x:%02x:%02x to %u.%u.%u.%u @ %02x:%02x:%02x:%02x:%02x:%02x submitted. fIgnore %d extendedFlags 0x%x ts %llu", v59, *(unsigned __int16 *)v76, *v45, v45[1], v45[2], v45[3], v43[6], v43[7], v43[8], v43[9]);
              }
            }
          }
        }
        uint64_t v14 = (v14 + 1);
LABEL_86:
        if (v14 >= a4) {
          goto LABEL_91;
        }
      }
      unsigned int v19 = v18;
      uint64_t v20 = *((void *)this + 5);
      if (*(void *)(v20 + 40))
      {
        int v21 = CCLogStream::shouldLog();
        uint64_t v20 = *((void *)this + 5);
        if (v21)
        {
          v61 = *(CCLogStream **)(v20 + 40);
          v62 = (const char *)(*(uint64_t (**)(void))(**(void **)(v20 + 64) + 160))(*(void *)(v20 + 64));
          CCLogStream::logAlert(v61, "[dk] %s@%d:Got packet of invalid length %d on %s. Deallocating\n", "fwRingFill", 376, v19, v62);
LABEL_89:
          uint64_t v20 = *((void *)this + 5);
        }
      }
      goto LABEL_29;
    }
    uint64_t v14 = 0;
LABEL_91:
    AppleBCMWLANBusInterfacePCIe::updateActiveTxPacketCount(*(void *)(*((void *)this + 5) + 56), v14);
    unsigned int RingFreeSpace = AppleBCMWLANPCIeSkywalkFlowQueue::getRingFreeSpace(this);
    if (!v68)
    {
      unsigned int v64 = RingFreeSpace;
      uint64_t v65 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 5) + 64) + 1096))(*(void *)(*((void *)this + 5) + 64));
      if (v65) {
        BOOL v66 = v64 == 0;
      }
      else {
        BOOL v66 = 1;
      }
      if (!v66) {
        (*(void (**)(uint64_t))(*(void *)v65 + 120))(v65);
      }
    }
  }
  else
  {
    if (*(void *)(v9 + 40) && CCLogStream::shouldLog()) {
      CCLogStream::logInfo(*(CCLogStream **)(*((void *)this + 5) + 40), "[dk] %s@%d:Invalid fFWRing/ring ivars->fFWRing:%p ring:%p\n", "fwRingFill", 348, *(const void **)(*((void *)this + 5) + 72), a2);
    }
    return 0;
  }
  return v14;
}

uint64_t AppleBCMWLANPCIeSkywalkFlowQueue::fwRingError(AppleBCMWLANPCIeSkywalkFlowQueue *this, AppleBCMWLANByteRing *a2, int a3, void *a4)
{
  uint64_t result = *(void *)(*((void *)this + 5) + 40);
  if (result)
  {
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      int v7 = (CCLogStream **)*((void *)this + 5);
      return CCLogStream::logAlert(v7[5], "[dk] %s@%d:FW Ring error for peer [%02x:%02x:%02x:%02x:%02x:%02x]: %d", "fwRingError", 324, *(unsigned __int8 *)v7, *((unsigned __int8 *)v7 + 1), *((unsigned __int8 *)v7 + 2), *((unsigned __int8 *)v7 + 3), *((unsigned __int8 *)v7 + 4), *((unsigned __int8 *)v7 + 5), a3);
    }
  }
  return result;
}

void *AppleBCMWLANPCIeSkywalkFlowQueue::dequeuePacket(AppleBCMWLANPCIeSkywalkFlowQueue *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1 + 8 == *(void *)(v1 + 8))
  {
    *(_DWORD *)(v1 + 24) = 0;
    return 0;
  }
  else
  {
    --*(_DWORD *)(v1 + 24);
    uint64_t v2 = *((void *)this + 5);
    uint64_t v5 = *(void **)(v2 + 8);
    uint64_t v4 = (void *)(v2 + 8);
    uint64_t result = v5;
    if (v5 == v4)
    {
      return (void *)AppleBCMWLANPCIeSkywalkPacket::fromChain(0);
    }
    else if (*(void **)result[1] == result && (uint64_t v6 = *result, *(void **)(*result + 8) == result))
    {
      *(void *)(v6 + 8) = v4;
      *uint64_t v4 = v6;
      *uint64_t result = 0;
      result[1] = 0;
      return (void *)AppleBCMWLANPCIeSkywalkPacket::fromChain((uint64_t)result);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

IOUserNetworkPacket *AppleBCMWLANPCIeSkywalkFlowQueue::flushPackets(AppleBCMWLANPCIeSkywalkFlowQueue *this)
{
  uint64_t result = (IOUserNetworkPacket *)AppleBCMWLANPCIeSkywalkFlowQueue::dequeuePacket(this);
  if (result)
  {
    v3 = result;
    do
    {
      AppleBCMWLANPCIeSkywalkPacketPool::deallocatePacket(*(AppleBCMWLANPCIeSkywalkPacketPool **)(*((void *)this + 5) + 80), v3);
      uint64_t result = (IOUserNetworkPacket *)AppleBCMWLANPCIeSkywalkFlowQueue::dequeuePacket(this);
      v3 = result;
    }
    while (result);
  }
  return result;
}

uint64_t AppleBCMWLANPCIeSkywalkFlowQueue::requestPendingPackets(AppleBCMWLANPCIeSkywalkFlowQueue *this)
{
  uint64_t v1 = *((void *)this + 5);
  uint64_t result = *(void *)(v1 + 72);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)result + 192))(result, *(unsigned int *)(v1 + 24), 1);
  }
  return result;
}

AppleBCMWLANItemRing *AppleBCMWLANPCIeSkywalkFlowQueue::getRingFreeSpace(AppleBCMWLANPCIeSkywalkFlowQueue *this)
{
  uint64_t v2 = *((void *)this + 5);
  uint64_t result = *(AppleBCMWLANItemRing **)(v2 + 72);
  if (result)
  {
    unsigned int v4 = *(_DWORD *)(v2 + 24);
    if (v4 > AppleBCMWLANItemRing::getWritableItemCount(result)) {
      return 0;
    }
    else {
      return (AppleBCMWLANItemRing *)(AppleBCMWLANItemRing::getWritableItemCount(*(AppleBCMWLANItemRing **)(*((void *)this + 5) + 72))
    }
                                    - *(_DWORD *)(*((void *)this + 5) + 24));
  }
  return result;
}

IO80211WorkSource *AppleBCMWLANPCIeSkywalkFlowQueue::collectQueueStats(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(IO80211WorkSource **)(*(void *)(a1 + 40) + 72);
  if (result)
  {
    *(unsigned char *)(a2 + 28) = IO80211WorkSource::isEnabled(result);
    *(unsigned char *)(a2 + 27) = 1;
    *(_WORD *)(a2 + 24) = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 40) + 72) + 208))(*(void *)(*(void *)(a1 + 40) + 72));
    *(_DWORD *)(a2 + 32) = AppleBCMWLANItemRing::getReadableItemCount(*(AppleBCMWLANItemRing **)(*(void *)(a1 + 40)
                                                                                               + 72));
    uint64_t result = (IO80211WorkSource *)AppleBCMWLANItemRing::getWritableItemCount(*(AppleBCMWLANItemRing **)(*(void *)(a1 + 40) + 72));
    *(_DWORD *)(a2 + 36) = result;
  }
  else
  {
    *(_WORD *)(a2 + 27) = 0;
  }
  return result;
}

uint64_t AppleBCMWLANPCIeSkywalkFlowQueue::getPacketCount(AppleBCMWLANPCIeSkywalkFlowQueue *this)
{
  return *(unsigned int *)(*((void *)this + 5) + 24);
}

uint64_t AppleBCMWLANPCIeSkywalkFlowQueue::getFlowHash(AppleBCMWLANPCIeSkywalkFlowQueue *this)
{
  return *((void *)this + 5) + 88;
}

uint64_t AppleBCMWLANPCIeSkywalkFlowQueue::getFlowId(AppleBCMWLANPCIeSkywalkFlowQueue *this)
{
  return *(unsigned __int16 *)(*((void *)this + 5) + 96);
}

uint64_t AppleBCMWLANPCIeSkywalkFlowQueue::clearFlowId(uint64_t this)
{
  *(_WORD *)(*(void *)(this + 40) + 96) = -1;
  return this;
}

void _GLOBAL__sub_I_AppleBCMWLANPCIeSkywalkFlowQueue_cpp()
{
  kNullRange = 0;
}

AppleBCMWLANPCIeSkywalkMulticastQueue *AppleBCMWLANPCIeSkywalkMulticastQueue::withProviderAndQueueInfo(AppleBCMWLANPCIeSkywalkMulticastQueue *this, AppleBCMWLANBusInterfacePCIe *a2, IO80211SkywalkInterface *a3, CCLogStream *a4, CCFaultReporter *a5)
{
  BOOL v11 = (AppleBCMWLANPCIeSkywalkMulticastQueue *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANPCIeSkywalkMulticastQueueMetaClass, (OSObject **)&v11)) {
    return 0;
  }
  uint64_t v9 = v11;
  if (v11
    && (AppleBCMWLANPCIeSkywalkMulticastQueue::initWithProviderAndQueueInfo((OSObject *)v11, this, a2, a3, a4) & 1) == 0)
  {
    (*(void (**)(AppleBCMWLANPCIeSkywalkMulticastQueue *))(*(void *)v9 + 16))(v9);
    return 0;
  }
  return v9;
}

uint64_t AppleBCMWLANPCIeSkywalkMulticastQueue::initWithProviderAndQueueInfo(OSObject *this, AppleBCMWLANBusInterfacePCIe *a2, IO80211SkywalkInterface *a3, CCLogStream *a4, CCFaultReporter *a5)
{
  uint64_t result = AppleBCMWLANSkywalkMulticastQueue::initWithInterface(this, a3);
  if (result)
  {
    uint64_t result = IOMallocZeroTyped();
    this[1].ivars = (OSObject_IVars *)result;
    if (result)
    {
      *((void *)this[1].ivars + 1) = AppleBCMWLANPCIeSkywalkFlowQueue::withProviderAndQueueInfo(a2, 0xFFFFFFFFFFFFLL, 0, a3, (BOOL (__cdecl *)(OSObject *__hidden))a4, (void (__cdecl *)(OSObject *__hidden))a5);
      *(void *)this[1].ivars = a4;
      uint64_t v11 = *(void *)this[1].ivars;
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
      if (((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[2].isEqualTo)(this))
      {
        ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[2].isEqualTo)(this);
        if (CCLogStream::shouldLog())
        {
          v12 = (CCLogStream *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[2].isEqualTo)(this);
          CCLogStream::logInfo(v12, "[dk] %s@%d:%s\n", "initWithProviderAndQueueInfo", 71, "initWithProviderAndQueueInfo");
        }
      }
      return 1;
    }
  }
  return result;
}

uint64_t AppleBCMWLANPCIeSkywalkMulticastQueue::free(AppleBCMWLANPCIeSkywalkMulticastQueue *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANPCIeSkywalkMulticastQueue *))(*(void *)this + 136))(this))
  {
    (*(void (**)(AppleBCMWLANPCIeSkywalkMulticastQueue *))(*(void *)this + 136))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkMulticastQueue *))(*(void *)this + 136))(this);
      CCLogStream::logInfo(v6, "[dk] %s@%d:%s\n", "free", 80, "free");
    }
  }
  AppleBCMWLANPCIeSkywalkFlowQueue::setFWRing(*(AppleBCMWLANPCIeSkywalkFlowQueue **)(*((void *)this + 9) + 8), 0);
  uint64_t v2 = *((void *)this + 9);
  if (v2)
  {
    (*(void (**)(void))(**(void **)(v2 + 8) + 16))(*(void *)(v2 + 8));
    *(void *)(*((void *)this + 9) + 8) = 0;
    v3 = (void *)*((void *)this + 9);
    if (*v3)
    {
      (*(void (**)(void))(*(void *)*v3 + 16))(*v3);
      **((void **)this + 9) = 0;
      v3 = (void *)*((void *)this + 9);
    }
    void *v3 = 0;
    v3[1] = 0;
    unsigned int v4 = (void *)*((void *)this + 9);
    if (v4)
    {
      IOFree(v4, 0x10uLL);
      *((void *)this + 9) = 0;
    }
  }
  return AppleBCMWLANSkywalkMulticastQueue::free(this);
}

uint64_t AppleBCMWLANPCIeSkywalkMulticastQueue::setFWRing(AppleBCMWLANPCIeSkywalkMulticastQueue *this, AppleBCMWLANPCIeTransmitFlowRing *a2)
{
  return AppleBCMWLANPCIeSkywalkFlowQueue::setFWRing(*(AppleBCMWLANPCIeSkywalkFlowQueue **)(*((void *)this + 9) + 8), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkMulticastQueue::free(AppleBCMWLANPCIeSkywalkMulticastQueue *this)
{
  return AppleBCMWLANPCIeSkywalkMulticastQueue::free((AppleBCMWLANPCIeSkywalkMulticastQueue *)((char *)this - 24));
}

void *AppleBCMWLANPCIeSkywalkMulticastQueue::enqueuePacket(AppleBCMWLANPCIeSkywalkMulticastQueue *this, AppleBCMWLANPCIeSkywalkPacket *a2, int a3)
{
  return AppleBCMWLANPCIeSkywalkFlowQueue::enqueuePacket(*(AppleBCMWLANPCIeSkywalkFlowQueue **)(*((void *)this + 9) + 8), a2, a3);
}

uint64_t AppleBCMWLANPCIeSkywalkMulticastQueue::checkForWork(AppleBCMWLANPCIeSkywalkMulticastQueue *this)
{
  if (AppleBCMWLANPCIeSkywalkFlowQueue::getFlowId(*(AppleBCMWLANPCIeSkywalkFlowQueue **)(*((void *)this + 9) + 8)) != 0xFFFF)
  {
    if (AppleBCMWLANPCIeSkywalkFlowQueue::getPacketCount(*(AppleBCMWLANPCIeSkywalkFlowQueue **)(*((void *)this + 9) + 8)))
    {
      if (AppleBCMWLANPCIeSkywalkFlowQueue::getRingFreeSpace(*(AppleBCMWLANPCIeSkywalkFlowQueue **)(*((void *)this + 9) + 8)))
      {
        AppleBCMWLANPCIeSkywalkFlowQueue::requestPendingPackets(*(AppleBCMWLANPCIeSkywalkFlowQueue **)(*((void *)this + 9) + 8));
        if (AppleBCMWLANPCIeSkywalkFlowQueue::getPacketCount(*(AppleBCMWLANPCIeSkywalkFlowQueue **)(*((void *)this + 9) + 8)))
        {
          if (AppleBCMWLANPCIeSkywalkFlowQueue::getRingFreeSpace(*(AppleBCMWLANPCIeSkywalkFlowQueue **)(*((void *)this + 9) + 8))) {
            IO80211WorkSource::signalWorkAvailable(this);
          }
        }
      }
    }
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkMulticastQueue::checkForWork(AppleBCMWLANPCIeSkywalkMulticastQueue *this)
{
  return 0;
}

IO80211WorkSource *AppleBCMWLANPCIeSkywalkMulticastQueue::collectQueueStats(IO80211WorkSource *a1, uint64_t a2)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(unsigned char *)(a2 + 5) = IO80211WorkSource::isEnabled(a1);
  uint64_t v4 = *(void *)(*((void *)a1 + 9) + 8);
  return AppleBCMWLANPCIeSkywalkFlowQueue::collectQueueStats(v4, a2);
}

IO80211WorkSource *non-virtual thunk to'AppleBCMWLANPCIeSkywalkMulticastQueue::collectQueueStats(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(unsigned char *)(a2 + 5) = IO80211WorkSource::isEnabled((IO80211WorkSource *)(a1 - 56));
  uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 8);
  return AppleBCMWLANPCIeSkywalkFlowQueue::collectQueueStats(v4, a2);
}

uint64_t AppleBCMWLANPCIeSkywalkMulticastQueue::clearFlowIdInFlowQ(AppleBCMWLANPCIeSkywalkMulticastQueue *this, int a2)
{
  uint64_t result = AppleBCMWLANPCIeSkywalkFlowQueue::getFlowId(*(AppleBCMWLANPCIeSkywalkFlowQueue **)(*((void *)this + 9) + 8));
  if (result == a2)
  {
    uint64_t v5 = *(void *)(*((void *)this + 9) + 8);
    return AppleBCMWLANPCIeSkywalkFlowQueue::clearFlowId(v5);
  }
  return result;
}

uint64_t AppleBCMWLANPCIeSkywalkMulticastQueue::getLogger(AppleBCMWLANPCIeSkywalkMulticastQueue *this)
{
  return **((void **)this + 9);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkMulticastQueue::getLogger(AppleBCMWLANPCIeSkywalkMulticastQueue *this)
{
  return **((void **)this + 2);
}

uint64_t AppleBCMWLANPCIeSkywalkMulticastQueue::getFlowHash(AppleBCMWLANPCIeSkywalkMulticastQueue *this)
{
  return AppleBCMWLANPCIeSkywalkFlowQueue::getFlowHash(*(AppleBCMWLANPCIeSkywalkFlowQueue **)(*((void *)this + 9) + 8));
}

uint64_t AppleBCMWLANPCIeSkywalkMulticastQueue::getFlowId(AppleBCMWLANPCIeSkywalkMulticastQueue *this)
{
  return AppleBCMWLANPCIeSkywalkFlowQueue::getFlowId(*(AppleBCMWLANPCIeSkywalkFlowQueue **)(*((void *)this + 9) + 8));
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkMulticastQueue::requestDequeue(AppleBCMWLANPCIeSkywalkMulticastQueue *this)
{
  return IO80211WorkSource::signalWorkAvailable((AppleBCMWLANPCIeSkywalkMulticastQueue *)((char *)this - 56));
}

void _GLOBAL__sub_I_AppleBCMWLANPCIeSkywalkMulticastQueue_cpp()
{
  kNullRange = 0;
}

OSObject *AppleBCMWLANPCIeSkywalkRxCompletionQueue::withProviderAndQueueInfoAndPool(AppleBCMWLANPCIeSkywalkRxCompletionQueue *this, OSObject *a2, OSObject *a3, unsigned int a4, unsigned int a5, IOUserNetworkPacketBufferPool *a6, AppleBCMWLANPCIeSkywalkPacketPool *a7, CCLogStream *a8, CCFaultReporter *a9)
{
  int v14 = (int)a3;
  pObject = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANPCIeSkywalkRxCompletionQueueMetaClass, &pObject)) {
    return 0;
  }
  v17 = pObject;
  if (pObject
    && (AppleBCMWLANPCIeSkywalkRxCompletionQueue::initProviderAndPoolAndQueueInfo((IOUserNetworkRxCompletionQueue *)pObject, this, a2, a6, v14, a4, a5, a7, a8) & 1) == 0)
  {
    ((void (*)(OSObject *))v17->release)(v17);
    return 0;
  }
  return v17;
}

uint64_t AppleBCMWLANPCIeSkywalkRxCompletionQueue::initProviderAndPoolAndQueueInfo(IOUserNetworkRxCompletionQueue *this, AppleBCMWLANBusInterfacePCIe *a2, OSObject *a3, IOUserNetworkPacketBufferPool *a4, int a5, unsigned int a6, unsigned int a7, CCLogStream *a8, CCFaultReporter *a9)
{
  uint64_t v17 = IOMallocZeroTyped();
  this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable = (OSObjectInterface_vtbl *)v17;
  if (v17)
  {
    unsigned int v18 = (const OSMetaClassBase *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)a2 + 80))(a2);
    uint64_t result = AppleBCMWLANSkywalkRxCompletionQueue::initWithPoolAndQueueInfo(this, a3, a4, a5, a6, a7, v18);
    if (result)
    {
      this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable[4].free = (void (__cdecl *)(OSObjectInterface *__hidden))&this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable[4].free;
      this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable[5].init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))&this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable[4].free;
      this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable[1].free = (void (__cdecl *)(OSObjectInterface *__hidden))a4;
      uint64_t v20 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
      free = v20[1].free;
      if (free)
      {
        (*(void (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)free + 8))(free);
        uint64_t v20 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
      }
      v20[1].init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))a2;
      uint64_t v22 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
      init = v22[1].init;
      if (init)
      {
        (*(void (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)init + 8))(init);
        uint64_t v22 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
      }
      v22->init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))a8;
      uint64_t v24 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
      if (v24->init)
      {
        (*(void (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)v24->init + 8))(v24->init);
        uint64_t v24 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
      }
      v24->free = (void (__cdecl *)(OSObjectInterface *__hidden))a9;
      this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable[5].free = (void (__cdecl *)(OSObjectInterface *__hidden))(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)a2 + 80))(a2);
      return 1;
    }
  }
  else
  {
    IOLog("rx comp queue ivars alloc fail\n");
    return 0;
  }
  return result;
}

void AppleBCMWLANPCIeSkywalkRxCompletionQueue::free(IOUserNetworkRxCompletionQueue *this)
{
  if (this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable)
  {
    if (((uint64_t (*)(IOUserNetworkRxCompletionQueue *))this->IOUserNetworkPacketQueue::OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this))
    {
      ((void (*)(IOUserNetworkRxCompletionQueue *))this->IOUserNetworkPacketQueue::OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)((uint64_t (*)(IOUserNetworkRxCompletionQueue *))this->IOUserNetworkPacketQueue::OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this);
        CCLogStream::logAlert(v6, "[dk] %s@%d:Enter ::free [%p]", "free", 113, this);
      }
    }
    uint64_t v2 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
    init = v2[1].init;
    if (init)
    {
      (*(void (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)init + 16))(init);
      this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable[1].init = 0;
      uint64_t v2 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
    }
    if (v2->init)
    {
      (*(void (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)v2->init + 16))(v2->init);
      this[1].init = 0;
      uint64_t v2 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
    }
    free = v2[1].free;
    if (free)
    {
      (*(void (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)free + 16))(free);
      this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable[1].free = 0;
      uint64_t v2 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
    }
    v2[9].init = 0;
    v2[7] = 0u;
    v2[8] = 0u;
    v2[5] = 0u;
    v2[6] = 0u;
    v2[3] = 0u;
    v2[4] = 0u;
    v2[1] = 0u;
    v2[2] = 0u;
    *uint64_t v2 = 0u;
    uint64_t v5 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
    if (v5)
    {
      IOFree(v5, 0x98uLL);
      this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable = 0;
    }
  }
  AppleBCMWLANSkywalkRxCompletionQueue::free(this);
}

void non-virtual thunk to'AppleBCMWLANPCIeSkywalkRxCompletionQueue::free(AppleBCMWLANPCIeSkywalkRxCompletionQueue *this)
{
}

uint64_t *AppleBCMWLANPCIeSkywalkRxCompletionQueue::flushPackets(AppleBCMWLANPCIeSkywalkRxCompletionQueue *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANPCIeSkywalkRxCompletionQueue *))(*(void *)this + 224))(this))
  {
    (*(void (**)(AppleBCMWLANPCIeSkywalkRxCompletionQueue *))(*(void *)this + 224))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v2 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkRxCompletionQueue *))(*(void *)this + 224))(this);
      CCLogStream::logInfo(v2, "[dk] %s@%d:Enter, totalFlushed:%zu\n", "flushPackets", 134, *(void *)(*((void *)this + 11) + 128));
    }
  }
  while (1)
  {
    uint64_t v5 = *((void *)this + 11);
    unsigned int v8 = *(uint64_t **)(v5 + 72);
    int v7 = (uint64_t *)(v5 + 72);
    uint64_t result = v8;
    if (v7 == v8) {
      break;
    }
    if (*(uint64_t **)result[1] != result || (uint64_t v3 = *result, *(uint64_t **)(*result + 8) != result))
    {
      __break(1u);
      return result;
    }
    *(void *)(v3 + 8) = v7;
    *int v7 = v3;
    *uint64_t result = 0;
    result[1] = 0;
    ++*(void *)(*((void *)this + 11) + 128);
    uint64_t v4 = (IOUserNetworkPacket *)AppleBCMWLANPCIeSkywalkPacket::fromChain((uint64_t)result);
    AppleBCMWLANPCIeSkywalkPacketPool::deallocatePacket(*(AppleBCMWLANPCIeSkywalkPacketPool **)(*((void *)this + 11) + 24), v4);
  }
  uint64_t result = (uint64_t *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkRxCompletionQueue *))(*(void *)this + 224))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANPCIeSkywalkRxCompletionQueue *))(*(void *)this + 224))(this);
    uint64_t result = (uint64_t *)CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkRxCompletionQueue *))(*(void *)this + 224))(this);
      return (uint64_t *)CCLogStream::logInfo(v9, "[dk] %s@%d:Exit, totalFlushed:%zu\n", "flushPackets", 151, *(void *)(*((void *)this + 11) + 128));
    }
  }
  return result;
}

uint64_t *non-virtual thunk to'AppleBCMWLANPCIeSkywalkRxCompletionQueue::flushPackets(AppleBCMWLANPCIeSkywalkRxCompletionQueue *this)
{
  return AppleBCMWLANPCIeSkywalkRxCompletionQueue::flushPackets((AppleBCMWLANPCIeSkywalkRxCompletionQueue *)((char *)this - 72));
}

uint64_t AppleBCMWLANPCIeSkywalkRxCompletionQueue::freePendingPackets(uint64_t this, IOUserNetworkPacket **a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v4 = this;
    uint64_t v5 = a3;
    do
    {
      if (*a2) {
        this = AppleBCMWLANPCIeSkywalkPacketPool::deallocatePacket(*(AppleBCMWLANPCIeSkywalkPacketPool **)(*(void *)(v4 + 88) + 24), *a2);
      }
      ++a2;
      --v5;
    }
    while (v5);
  }
  return this;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkRxCompletionQueue::freePendingPackets(uint64_t this, IOUserNetworkPacket **a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v4 = this;
    uint64_t v5 = a3;
    do
    {
      if (*a2) {
        this = AppleBCMWLANPCIeSkywalkPacketPool::deallocatePacket(*(AppleBCMWLANPCIeSkywalkPacketPool **)(*(void *)(v4 + 16) + 24), *a2);
      }
      ++a2;
      --v5;
    }
    while (v5);
  }
  return this;
}

uint64_t *AppleBCMWLANPCIeSkywalkRxCompletionQueue::enqueuePackets(AppleBCMWLANPCIeSkywalkRxCompletionQueue *this, OSObject *a2, IO80211NetworkPacket **a3, uint64_t a4, void *a5)
{
  unsigned int v5 = a4;
  uint64_t v8 = (*(uint64_t (**)(void, OSObject *, IO80211NetworkPacket **, uint64_t, void *))(**(void **)(*((void *)this + 11) + 88)
                                                                                               + 144))(*(void *)(*((void *)this + 11) + 88), a2, a3, a4, a5);
  *(void *)(*((void *)this + 11) + 136) = mach_continuous_time();
  *(void *)(*((void *)this + 11) + 96) += v5;
  if (v8)
  {
    *(_DWORD *)(*((void *)this + 11) + 48) = 0;
    *(_DWORD *)(*((void *)this + 11) + 52) = 0;
    if (v5)
    {
      uint64_t v8 = 0;
      uint64_t v9 = v5;
      while (1)
      {
        uint64_t v10 = *((void *)this + 11);
        int v13 = *(uint64_t **)(v10 + 72);
        v12 = (uint64_t *)(v10 + 72);
        uint64_t result = v13;
        if (v12 == v13) {
          break;
        }
        if (*(uint64_t **)result[1] != result || (uint64_t v14 = *result, *(uint64_t **)(*result + 8) != result))
        {
          __break(1u);
          return result;
        }
        *(void *)(v14 + 8) = v12;
        uint64_t *v12 = v14;
        *uint64_t result = 0;
        result[1] = 0;
        uint64_t v15 = AppleBCMWLANPCIeSkywalkPacket::fromChain((uint64_t)result);
        if (!v15) {
          break;
        }
        uint64_t v16 = (AppleBCMWLANPCIeSkywalkPacket *)v15;
        uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 480))(v15);
        uint64_t v18 = v17 + (*(unsigned int (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)v16 + 240))(v16);
        Interface = (IO80211SkywalkInterface *)AppleBCMWLANSkywalkTxCompletionQueue::getInterface(this);
        int InterfaceRole = IO80211SkywalkInterface::getInterfaceRole(Interface);
        int v21 = (IO80211SkywalkInterface *)AppleBCMWLANSkywalkTxCompletionQueue::getInterface(this);
        if (InterfaceRole == 10)
        {
          (*(void (**)(IO80211SkywalkInterface *, AppleBCMWLANPCIeSkywalkPacket *, uint64_t))(*(void *)v21 + 576))(v21, v16, v18);
        }
        else if (IO80211SkywalkInterface::getInterfaceRole(v21) != 6)
        {
          uint64_t Scratch = AppleBCMWLANPCIeSkywalkPacket::getScratch(v16);
          uint64_t v23 = Scratch;
          unint64_t v24 = *(unsigned __int8 *)(Scratch + 24);
          if (v24 > 7) {
            LOBYTE(v25) = 4;
          }
          else {
            int v25 = kTid2Ac[v24];
          }
          *(unsigned char *)(Scratch + 41) = v25;
          uint64_t v26 = AppleBCMWLANSkywalkTxCompletionQueue::getInterface(this);
          (*(void (**)(uint64_t, AppleBCMWLANPCIeSkywalkPacket *, uint64_t, uint64_t, void, void))(*(void *)v26 + 568))(v26, v16, v23, v18, 0, 0);
        }
        a3[v8] = v16;
        ++*(_DWORD *)(*((void *)this + 11) + 48);
        *(_DWORD *)(*((void *)this + 11) + 52) += (*(uint64_t (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)v16 + 224))(v16);
        if (v9 == ++v8)
        {
          uint64_t v8 = v9;
          break;
        }
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    *(void *)(*((void *)this + 11) + 104) += v8;
    *(void *)(*((void *)this + 11) + 112) = v8;
    if (AppleBCMWLANSkywalkTxCompletionQueue::getInterface(this))
    {
      v27 = (IO80211SkywalkInterface *)AppleBCMWLANSkywalkTxCompletionQueue::getInterface(this);
      IO80211SkywalkInterface::recordInputPacket(v27, *(_DWORD *)(*((void *)this + 11) + 48), *(_DWORD *)(*((void *)this + 11) + 52));
      uint64_t v28 = *(void *)AppleBCMWLANSkywalkTxCompletionQueue::getInterface(this);
      (*(void (**)(void))(v28 + 1088))();
    }
  }
  return (uint64_t *)v8;
}

uint64_t *non-virtual thunk to'AppleBCMWLANPCIeSkywalkRxCompletionQueue::enqueuePackets(AppleBCMWLANPCIeSkywalkRxCompletionQueue *this, OSObject *a2, IO80211NetworkPacket **a3, uint64_t a4, void *a5)
{
  return AppleBCMWLANPCIeSkywalkRxCompletionQueue::enqueuePackets((AppleBCMWLANPCIeSkywalkRxCompletionQueue *)((char *)this - 72), a2, a3, a4, a5);
}

uint64_t AppleBCMWLANPCIeSkywalkRxCompletionQueue::collectQueueStats(AppleBCMWLANPCIeSkywalkRxCompletionQueue *this, char *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  (*(void (**)(AppleBCMWLANPCIeSkywalkRxCompletionQueue *))(*(void *)this + 224))(this);
  uint64_t v10 = IO80211Print() + a5;
  (*(void (**)(AppleBCMWLANPCIeSkywalkRxCompletionQueue *))(*(void *)this + 224))(this);
  uint64_t v11 = IO80211Print() + v10;
  absolutetime_to_nanoseconds();
  absolutetime_to_nanoseconds();
  (*(void (**)(AppleBCMWLANPCIeSkywalkRxCompletionQueue *))(*(void *)this + 224))(this);
  uint64_t v12 = IO80211Print() + v11;
  uint64_t v13 = *(void *)(*((void *)this + 11) + 32);
  (*(void (**)(AppleBCMWLANPCIeSkywalkRxCompletionQueue *))(*(void *)this + 224))(this);
  if (v13)
  {
    IO80211WorkSource::isEnabled(*(IO80211WorkSource **)(*((void *)this + 11) + 32));
    (*(void (**)(void))(**(void **)(*((void *)this + 11) + 32) + 208))(*(void *)(*((void *)this + 11) + 32));
    AppleBCMWLANItemRing::getReadableItemCount(*(AppleBCMWLANItemRing **)(*((void *)this + 11) + 32));
    AppleBCMWLANItemRing::getWritableItemCount(*(AppleBCMWLANItemRing **)(*((void *)this + 11) + 32));
  }
  uint64_t v14 = IO80211Print();
  return AppleBCMWLANSkywalkRxCompletionQueue::collectQueueStats(this, a2, a3, a4, v14 + v12);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkRxCompletionQueue::collectQueueStats(AppleBCMWLANPCIeSkywalkRxCompletionQueue *this, char *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  return AppleBCMWLANPCIeSkywalkRxCompletionQueue::collectQueueStats((AppleBCMWLANPCIeSkywalkRxCompletionQueue *)((char *)this - 72), a2, a3, a4, a5);
}

void *AppleBCMWLANPCIeSkywalkRxCompletionQueue::stagePacket(AppleBCMWLANPCIeSkywalkRxCompletionQueue *this, IO80211NetworkPacket *a2)
{
  ++*(void *)(*((void *)this + 11) + 120);
  uint64_t v2 = *((void *)this + 11);
  uint64_t result = (void *)AppleBCMWLANPCIeSkywalkPacket::getChain(a2);
  uint64_t v4 = *(void **)(v2 + 80);
  if (*v4 == v2 + 72)
  {
    *uint64_t result = v2 + 72;
    result[1] = v4;
    *uint64_t v4 = result;
    *(void *)(v2 + 80) = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *non-virtual thunk to'AppleBCMWLANPCIeSkywalkRxCompletionQueue::stagePacket(AppleBCMWLANPCIeSkywalkRxCompletionQueue *this, IO80211NetworkPacket *a2)
{
  return AppleBCMWLANPCIeSkywalkRxCompletionQueue::stagePacket((AppleBCMWLANPCIeSkywalkRxCompletionQueue *)((char *)this - 72), a2);
}

uint64_t AppleBCMWLANPCIeSkywalkRxCompletionQueue::setFirmwareRing(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 88) + 32) = a2;
  return result;
}

uint64_t AppleBCMWLANPCIeSkywalkRxCompletionQueue::getLogger(AppleBCMWLANPCIeSkywalkRxCompletionQueue *this)
{
  return **((void **)this + 11);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkRxCompletionQueue::getLogger(AppleBCMWLANPCIeSkywalkRxCompletionQueue *this)
{
  return **((void **)this + 2);
}

uint64_t AppleBCMWLANPCIeSkywalkRxCompletionQueue::requestEnqueue(IOUserNetworkPacketQueue *this, void *a2, unsigned int a3)
{
  *((void *)this[1].ivars + 18) = mach_continuous_time();
  if ((OSObject_IVars *)((char *)this[1].ivars + 72) == (OSObject_IVars *)*((void *)this[1].ivars + 9)) {
    return 0;
  }
  return IOUserNetworkPacketQueue::requestEnqueue(this, a2, a3);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkRxCompletionQueue::requestEnqueue(AppleBCMWLANPCIeSkywalkRxCompletionQueue *this, void *a2, unsigned int a3)
{
  return AppleBCMWLANPCIeSkywalkRxCompletionQueue::requestEnqueue((IOUserNetworkPacketQueue *)((char *)this - 40), a2, a3);
}

void _GLOBAL__sub_I_AppleBCMWLANPCIeSkywalkRxCompletionQueue_cpp()
{
  kNullRange = 0;
}

OSObject *AppleBCMWLANPCIeSkywalkRxSubmissionQueue::withProviderAndQueueInfoAndPool(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *this, OSObject *a2, OSObject *a3, unsigned int a4, unsigned int a5, IOUserNetworkPacketBufferPool *a6, AppleBCMWLANPCIeSkywalkPacketPool *a7, CCLogStream *a8, CCFaultReporter *a9)
{
  int v14 = (int)a3;
  pObject = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANPCIeSkywalkRxSubmissionQueueMetaClass, &pObject)) {
    return 0;
  }
  uint64_t v17 = pObject;
  if (pObject
    && (AppleBCMWLANPCIeSkywalkRxSubmissionQueue::initProviderAndPoolAndQueueInfo((IOUserNetworkRxSubmissionQueue *)pObject, this, a2, a6, v14, a4, a5, a7, a8) & 1) == 0)
  {
    ((void (*)(OSObject *))v17->release)(v17);
    return 0;
  }
  return v17;
}

uint64_t AppleBCMWLANPCIeSkywalkRxSubmissionQueue::initProviderAndPoolAndQueueInfo(IOUserNetworkRxSubmissionQueue *this, AppleBCMWLANBusInterfacePCIe *a2, OSObject *a3, IOUserNetworkPacketBufferPool *a4, int a5, unsigned int a6, unsigned int a7, CCLogStream *a8, CCFaultReporter *a9)
{
  uint64_t v17 = IOMallocZeroTyped();
  this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable = (OSObjectInterface_vtbl *)v17;
  if (!v17)
  {
    IOLog("rx subm queue ivars alloc fail\n");
    return 0;
  }
  uint64_t v18 = (const OSMetaClassBase *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)a2 + 80))(a2);
  if (!AppleBCMWLANSkywalkRxSubmissionQueue::initWithPoolAndQueueInfo(this, a3, a4, a5, a6, a7, v18)) {
    return 0;
  }
  this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable[3].init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))&this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable[3];
  this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable[3].free = (void (__cdecl *)(OSObjectInterface *__hidden))&this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable[3];
  this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable[2].init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))a2;
  unsigned int v19 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
  init = v19[2].init;
  if (init)
  {
    (*(void (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)init + 8))(init);
    unsigned int v19 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
  }
  v19[4].free = (void (__cdecl *)(OSObjectInterface *__hidden))a4;
  int v21 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
  free = v21[4].free;
  if (free)
  {
    (*(void (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)free + 8))(free);
    int v21 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
  }
  LODWORD(v21[4].init) = a7;
  this[1].free = (void (__cdecl *)(OSObjectInterface *__hidden))a8;
  uint64_t v23 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
  unint64_t v24 = v23->free;
  if (v24)
  {
    (*(void (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)v24 + 8))(v24);
    uint64_t v23 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
  }
  v23[1].init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))a9;
  this[1].init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)a2 + 80))(a2);
  uint64_t v25 = 1;
  IOParseBootArgNumber("wlan.skywalk.ktrace", &fKernelTraceEnabled, 1);
  return v25;
}

void AppleBCMWLANPCIeSkywalkRxSubmissionQueue::free(IOUserNetworkRxSubmissionQueue *this)
{
  if (this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable)
  {
    if (((uint64_t (*)(IOUserNetworkRxSubmissionQueue *))this->IOUserNetworkPacketQueue::OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(this))
    {
      ((void (*)(IOUserNetworkRxSubmissionQueue *))this->IOUserNetworkPacketQueue::OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(this);
      if (CCLogStream::shouldLog())
      {
        int v7 = (CCLogStream *)((uint64_t (*)(IOUserNetworkRxSubmissionQueue *))this->IOUserNetworkPacketQueue::OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:Enter ::free [%p]", "free", 122, this);
      }
    }
    uint64_t v2 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
    init = v2[2].init;
    if (init)
    {
      (*(void (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)init + 16))(init);
      this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable[2].init = 0;
      uint64_t v2 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
    }
    free = v2->free;
    if (free)
    {
      (*(void (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)free + 16))(free);
      this[1].free = 0;
      uint64_t v2 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
    }
    unsigned int v5 = v2[4].free;
    if (v5)
    {
      (*(void (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)v5 + 16))(v5);
      this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable[4].free = 0;
      uint64_t v2 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
    }
    v2[10].init = 0;
    v2[8] = 0u;
    v2[9] = 0u;
    v2[6] = 0u;
    v2[7] = 0u;
    v2[4] = 0u;
    v2[5] = 0u;
    v2[2] = 0u;
    v2[3] = 0u;
    *uint64_t v2 = 0u;
    v2[1] = 0u;
    uint64_t v6 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
    if (v6)
    {
      IOFree(v6, 0xA8uLL);
      this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable = 0;
    }
  }
  AppleBCMWLANSkywalkRxSubmissionQueue::free(this);
}

void non-virtual thunk to'AppleBCMWLANPCIeSkywalkRxSubmissionQueue::free(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *this)
{
}

void *AppleBCMWLANPCIeSkywalkRxSubmissionQueue::dequeuePackets(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *this, OSObject *a2, IO80211NetworkPacket **a3, uint64_t a4, void *a5)
{
  unsigned int v5 = a4;
  int v8 = (*(uint64_t (**)(void, OSObject *, IO80211NetworkPacket **, uint64_t, void *))(***((void ***)this + 11)
                                                                                               + 144))(**((void **)this + 11), a2, a3, a4, a5);
  *(void *)(*((void *)this + 11) + 104) = 0;
  *(void *)(*((void *)this + 11) + 88) += v5;
  *(unsigned char *)(*((void *)this + 11) + 68) = 0;
  uint64_t v9 = 0;
  *(void *)(*((void *)this + 11) + 144) = mach_continuous_time();
  if (!v8) {
    return (void *)v9;
  }
  uint64_t v10 = *(void *)(*((void *)this + 11) + 24);
  if (v10)
  {
    if (fKernelTraceEnabled)
    {
      (*(void (**)(uint64_t))(*(void *)v10 + 208))(v10);
      (*(void (**)(void))(**(void **)(*((void *)this + 11) + 32) + 792))();
      kdebug_trace();
      if (v5)
      {
LABEL_5:
        uint64_t v9 = 0;
        while (1)
        {
          uint64_t v11 = OSMetaClassBase::safeMetaCast((const OSMetaClassBase *)a3[v9], (const OSMetaClass *)gAppleBCMWLANPCIeSkywalkPacketMetaClass);
          if (!v11) {
            goto LABEL_13;
          }
          uint64_t v12 = *((void *)this + 11);
          uint64_t result = (void *)AppleBCMWLANPCIeSkywalkPacket::getChain((AppleBCMWLANPCIeSkywalkPacket *)v11);
          int v14 = *(void **)(v12 + 56);
          if (*v14 != v12 + 48)
          {
            __break(1u);
            return result;
          }
          *uint64_t result = v12 + 48;
          result[1] = v14;
          void *v14 = result;
          *(void *)(v12 + 56) = result;
          if (v5 == ++v9)
          {
            uint64_t v9 = v5;
            goto LABEL_13;
          }
        }
      }
    }
    else if (v5)
    {
      goto LABEL_5;
    }
    uint64_t v9 = 0;
LABEL_13:
    *(void *)(*((void *)this + 11) + 104) = v9;
    *(void *)(*((void *)this + 11) + 96) += v9;
    *(_DWORD *)(*((void *)this + 11) + 40) += v9;
    (*(void (**)(void, void, uint64_t))(**(void **)(*((void *)this + 11) + 24) + 192))(*(void *)(*((void *)this + 11) + 24), *(unsigned int *)(*((void *)this + 11) + 40), 1);
    if (fKernelTraceEnabled)
    {
      (*(void (**)(void))(**(void **)(*((void *)this + 11) + 32) + 792))(*(void *)(*((void *)this + 11) + 32));
      kdebug_trace();
    }
    return (void *)v9;
  }
  return 0;
}

uint64_t AppleBCMWLANPCIeSkywalkRxSubmissionQueue::requestRingFill(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *this)
{
  return (*(uint64_t (**)(void, void, uint64_t))(**(void **)(*((void *)this + 11) + 24) + 192))(*(void *)(*((void *)this + 11) + 24), *(unsigned int *)(*((void *)this + 11) + 40), 1);
}

void *non-virtual thunk to'AppleBCMWLANPCIeSkywalkRxSubmissionQueue::dequeuePackets(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *this, OSObject *a2, IO80211NetworkPacket **a3, uint64_t a4, void *a5)
{
  return AppleBCMWLANPCIeSkywalkRxSubmissionQueue::dequeuePackets((AppleBCMWLANPCIeSkywalkRxSubmissionQueue *)((char *)this - 72), a2, a3, a4, a5);
}

uint64_t *AppleBCMWLANPCIeSkywalkRxSubmissionQueue::flushPackets(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *))(*(void *)this + 216))(this))
  {
    (*(void (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *))(*(void *)this + 216))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *))(*(void *)this + 216))(this);
      uint64_t v10 = *((void *)this + 11);
      int v11 = *(_DWORD *)(v10 + 40);
      uint64_t v12 = *(const void **)(v10 + 72);
      if (v12) {
        int RetainCount = OSMetaClassBase::getRetainCount(*(OSMetaClassBase **)(v10 + 72));
      }
      else {
        int RetainCount = 0;
      }
      CCLogStream::logInfo(v9, "[dk] %s@%d:Enter with fPacketCount:%u, fPacketPool[%p] nRetained[%u]", "flushPackets", 200, v11, v12, RetainCount);
    }
  }
  uint64_t v2 = *((void *)this + 11);
  if (*(void *)(v2 + 72) && *(_DWORD *)(v2 + 40))
  {
    LODWORD(v3) = 0;
    while (1)
    {
      unsigned int v5 = (void *)(v2 + 48);
      uint64_t result = *(uint64_t **)(v2 + 48);
      if (result == (uint64_t *)(v2 + 48))
      {
        uint64_t result = 0;
      }
      else
      {
        if (*(uint64_t **)result[1] != result || (uint64_t v6 = *result, *(uint64_t **)(*result + 8) != result))
        {
          __break(1u);
          return result;
        }
        *(void *)(v6 + 8) = v5;
        void *v5 = v6;
        *uint64_t result = 0;
        result[1] = 0;
        uint64_t v2 = *((void *)this + 11);
      }
      ++*(void *)(v2 + 128);
      int v7 = (IOUserNetworkPacket *)AppleBCMWLANPCIeSkywalkPacket::fromChain((uint64_t)result);
      if (v7)
      {
        AppleBCMWLANPCIeSkywalkPacketPool::deallocatePacket(*(AppleBCMWLANPCIeSkywalkPacketPool **)(*((void *)this + 11) + 72), v7);
      }
      else if ((*(uint64_t (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *))(*(void *)this + 216))(this))
      {
        (*(void (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *))(*(void *)this + 216))(this);
        if (CCLogStream::shouldLog())
        {
          int v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *))(*(void *)this + 216))(this);
          CCLogStream::logAlert(v8, "[dk] %s@%d:invalid packet\n", "flushPackets", 209);
        }
      }
      uint64_t v3 = (v3 + 1);
      uint64_t v2 = *((void *)this + 11);
      if (v3 >= *(_DWORD *)(v2 + 40))
      {
        *(_DWORD *)(v2 + 40) = 0;
        return (uint64_t *)v3;
      }
    }
  }
  return 0;
}

uint64_t AppleBCMWLANPCIeSkywalkRxSubmissionQueue::setFWRing(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *this, AppleBCMWLANPCIeSubmissionRing *a2)
{
  if ((*(uint64_t (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *))(*(void *)this + 216))(this))
  {
    (*(void (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *))(*(void *)this + 216))(this);
    if (CCLogStream::shouldLog())
    {
      int v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *))(*(void *)this + 216))(this);
      if (a2) {
        int v8 = "Set";
      }
      else {
        int v8 = "Clear";
      }
      CCLogStream::logInfo(v7, "[dk] %s@%d:fwRing:%s\n", "setFWRing", 231, v8);
    }
  }
  if (!*((void *)this + 11)) {
    return IOLog("AppleBCMWLANPCIeSkywalkRxSubmissionQueue::setFWRing [%p], no ivars\n", a2);
  }
  if (a2)
  {
    (*(void (**)(AppleBCMWLANPCIeSubmissionRing *))(*(void *)a2 + 8))(a2);
    *(void *)(*((void *)this + 11) + 24) = a2;
    if ((*(uint64_t (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *))(*(void *)this + 216))(this))
    {
      (*(void (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *))(*(void *)this + 216))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *))(*(void *)this
                                                                                                  + 216))(this);
        CCLogStream::logInfo(v9, "[dk] %s@%d:assign fw ring into queue, queue enabled, request dequeue\n", "setFWRing", 242);
      }
    }
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *, void, void))(*(void *)this + 128))(this, 0, 0);
    if (result)
    {
      int v5 = result;
      uint64_t result = (*(uint64_t (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *))(*(void *)this + 216))(this);
      if (result)
      {
        (*(void (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *))(*(void *)this + 216))(this);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *))(*(void *)this + 216))(this);
          return CCLogStream::logInfo(v6, "[dk] %s@%d:rx sub dequeue fail 0x%x\n", "setFWRing", 245, v5);
        }
      }
    }
  }
  else
  {
    if ((*(uint64_t (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *))(*(void *)this + 216))(this))
    {
      (*(void (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *))(*(void *)this + 216))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *))(*(void *)this + 216))(this);
        CCLogStream::logInfo(v10, "[dk] %s@%d:rx submission ring flush\n", "setFWRing", 248);
      }
    }
    AppleBCMWLANPCIeSkywalkRxSubmissionQueue::flushPackets(this);
    uint64_t result = *(void *)(*((void *)this + 11) + 24);
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      *(void *)(*((void *)this + 11) + 24) = 0;
    }
  }
  return result;
}

uint64_t AppleBCMWLANPCIeSkywalkRxSubmissionQueue::fwRingPending(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *this)
{
  if (!*(unsigned char *)(*((void *)this + 11) + 68))
  {
    if ((*(unsigned int (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *))(*(void *)this + 208))(this))
    {
      uint64_t v2 = *((void *)this + 11);
      uint64_t v3 = *(AppleBCMWLANItemRing **)(v2 + 24);
      if (v3)
      {
        unsigned int v4 = *(_DWORD *)(v2 + 40);
        if (v4 < AppleBCMWLANItemRing::getWritableItemCount(v3))
        {
          int v5 = (*(uint64_t (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *, void, void))(*(void *)this + 128))(this, 0, 0);
          if (v5)
          {
            int v6 = v5;
            if ((*(uint64_t (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *))(*(void *)this + 216))(this))
            {
              (*(void (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *))(*(void *)this + 216))(this);
              if (CCLogStream::shouldLog())
              {
                int v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *))(*(void *)this + 216))(this);
                CCLogStream::logInfo(v8, "[dk] %s@%d:rx sub dequeue fail 0x%x\n", "fwRingPending", 264, v6);
              }
            }
            if (v6 == -536870210)
            {
              *(unsigned char *)(*((void *)this + 11) + 68) = 1;
              *(void *)(*((void *)this + 11) + 136) = mach_continuous_time();
            }
          }
        }
      }
    }
  }
  return *(unsigned int *)(*((void *)this + 11) + 40);
}

unint64_t AppleBCMWLANPCIeSkywalkRxSubmissionQueue::fwRingFill(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *this, AppleBCMWLANByteRing *a2, char *a3, unint64_t a4)
{
  LOWORD(v29) = -1;
  RxPacketTracker = (AppleBCMWLANHashtable *)AppleBCMWLANPCIeSkywalkPacketPool::getRxPacketTracker(*(AppleBCMWLANPCIeSkywalkPacketPool **)(*((void *)this + 11) + 72));
  *(void *)(*((void *)this + 11) + 152) = mach_continuous_time();
  uint64_t v8 = *(void *)(*((void *)this + 11) + 24);
  if (v8)
  {
    if (fKernelTraceEnabled)
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 208))(v8);
      (*(void (**)(void))(**(void **)(*((void *)this + 11) + 32) + 792))();
      kdebug_trace();
      if (a4)
      {
LABEL_4:
        uint64_t v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          if (v10 >= *(unsigned int *)(*((void *)this + 11) + 40))
          {
            a4 = v10;
            goto LABEL_27;
          }
          int v11 = &a3[v9];
          *(_OWORD *)int v11 = 0u;
          *((_OWORD *)v11 + 1) = 0u;
          *(_WORD *)int v11 = -239;
          char v12 = (*(unsigned int (**)(void))(**(void **)(*((void *)this + 11) + 24) + 248))(*(void *)(*((void *)this + 11) + 24))
              ? -127
              : 1;
          v11[2] = v12;
          uint64_t v13 = *((void *)this + 11);
          uint64_t v16 = *(uint64_t **)(v13 + 48);
          int v14 = (uint64_t *)(v13 + 48);
          uint64_t v15 = v16;
          if (v16 == v14)
          {
            uint64_t v15 = 0;
          }
          else
          {
            if (*(uint64_t **)v15[1] != v15) {
              goto LABEL_32;
            }
            uint64_t v17 = *v15;
            if (*(uint64_t **)(*v15 + 8) != v15) {
              goto LABEL_32;
            }
            *(void *)(v17 + 8) = v14;
            uint64_t *v14 = v17;
            uint64_t *v15 = 0;
            v15[1] = 0;
          }
          uint64_t v18 = (OSObject *)AppleBCMWLANPCIeSkywalkPacket::fromChain((uint64_t)v15);
          __int16 v19 = ((uint64_t (*)(OSObject *))v18->OSMetaClassBase::__vftable[8].init)(v18);
          if (AppleBCMWLANHashtable::add(RxPacketTracker, v18, (unsigned __int16 *)&v29)) {
            break;
          }
          AppleBCMWLANPCIeSkywalkPacket::setPacketId((uint64_t)v18, (__int16)v29);
          uint64_t BusAddress = AppleBCMWLANPCIeSkywalkPacket::getBusAddress((AppleBCMWLANPCIeSkywalkPacket *)v18);
          int v21 = &a3[v9];
          *((_WORD *)v21 + 5) = v19;
          *((void *)v21 + 3) = BusAddress;
          *((_WORD *)v21 + 2) = v29;
          *((_WORD *)v21 + 3) = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 11) + 24) + 296))();
          ++v10;
          v9 += 32;
          if (32 * a4 == v9) {
            goto LABEL_27;
          }
        }
        if ((*(uint64_t (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *))(*(void *)this + 216))(this))
        {
          (*(void (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *))(*(void *)this + 216))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v28 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *))(*(void *)this + 216))(this);
            CCLogStream::logAlert(v28, "[dk] %s@%d:rx submit, out of tracker\n", "fwRingFill", 324);
          }
        }
        uint64_t v22 = *((void *)this + 11);
        uint64_t v25 = *(void *)(v22 + 48);
        uint64_t v23 = (uint64_t **)(v22 + 48);
        unint64_t v24 = (void *)v25;
        if (*(uint64_t ***)(v25 + 8) != v23) {
LABEL_32:
        }
          __break(1u);
        uint64_t *v15 = (uint64_t)v24;
        v15[1] = (uint64_t)v23;
        v24[1] = v15;
        a4 = v10;
        OSObjectInterface_vtbl *v23 = v15;
      }
    }
    else if (a4)
    {
      goto LABEL_4;
    }
LABEL_27:
    *(void *)(*((void *)this + 11) + 120) = a4;
    *(void *)(*((void *)this + 11) + 112) += a4;
    *(_DWORD *)(*((void *)this + 11) + 40) -= a4;
    AppleBCMWLANBusInterfacePCIe::updateActiveRxBufferCount(*(void *)(*((void *)this + 11) + 32), a4);
    if (fKernelTraceEnabled)
    {
      (*(void (**)(void))(**(void **)(*((void *)this + 11) + 32) + 792))(*(void *)(*((void *)this + 11) + 32));
      kdebug_trace();
    }
    return a4;
  }
  if ((*(uint64_t (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *))(*(void *)this + 216))(this))
  {
    (*(void (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *))(*(void *)this + 216))(this);
    if (CCLogStream::shouldLog())
    {
      v27 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *))(*(void *)this
                                                                                                 + 216))(this);
      CCLogStream::logInfo(v27, "[dk] %s@%d:Invalid fFWRing/ring ivars->fFWRing:%p\n", "fwRingFill", 294, *(const void **)(*((void *)this + 11) + 24));
    }
  }
  return 0;
}

uint64_t AppleBCMWLANPCIeSkywalkRxSubmissionQueue::collectQueueStats(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *this, char *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  (*(void (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *))(*(void *)this + 216))(this);
  uint64_t v10 = IO80211Print() + a5;
  (*(void (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *))(*(void *)this + 216))(this);
  uint64_t v11 = IO80211Print() + v10;
  absolutetime_to_nanoseconds();
  (*(void (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *))(*(void *)this + 216))(this);
  uint64_t v12 = IO80211Print() + v11;
  memset(v17, 170, sizeof(v17));
  absolutetime_to_nanoseconds();
  absolutetime_to_nanoseconds();
  absolutetime_to_nanoseconds();
  (*(void (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *))(*(void *)this + 216))(this);
  uint64_t v13 = IO80211Print() + v12;
  uint64_t v14 = *(void *)(*((void *)this + 11) + 24);
  (*(void (**)(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *))(*(void *)this + 216))(this);
  if (v14)
  {
    IO80211WorkSource::isEnabled(*(IO80211WorkSource **)(*((void *)this + 11) + 24));
    (*(void (**)(void))(**(void **)(*((void *)this + 11) + 24) + 208))(*(void *)(*((void *)this + 11) + 24));
    AppleBCMWLANItemRing::getReadableItemCount(*(AppleBCMWLANItemRing **)(*((void *)this + 11) + 24));
    AppleBCMWLANItemRing::getWritableItemCount(*(AppleBCMWLANItemRing **)(*((void *)this + 11) + 24));
  }
  uint64_t v15 = IO80211Print();
  return AppleBCMWLANSkywalkRxSubmissionQueue::collectQueueStats(this, a2, a3, a4, v15 + v13);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkRxSubmissionQueue::collectQueueStats(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *this, char *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  return AppleBCMWLANPCIeSkywalkRxSubmissionQueue::collectQueueStats((AppleBCMWLANPCIeSkywalkRxSubmissionQueue *)((char *)this - 72), a2, a3, a4, a5);
}

uint64_t AppleBCMWLANPCIeSkywalkRxSubmissionQueue::getLogger(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *this)
{
  return *(void *)(*((void *)this + 11) + 8);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkRxSubmissionQueue::getLogger(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *this)
{
  return *(void *)(*((void *)this + 2) + 8);
}

uint64_t AppleBCMWLANPCIeSkywalkRxSubmissionQueue::setLogger(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *this, CCLogStream *a2)
{
  uint64_t v4 = *((void *)this + 11);
  uint64_t v5 = *(void *)(v4 + 8);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    *(void *)(*((void *)this + 11) + 8) = 0;
    uint64_t v4 = *((void *)this + 11);
  }
  *(void *)(v4 + 8) = a2;
  uint64_t v6 = *(void *)(*((void *)this + 11) + 8);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return AppleBCMWLANSkywalkRxSubmissionQueue::setLogger((uint64_t)this, (uint64_t)a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkRxSubmissionQueue::setLogger(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *this, CCLogStream *a2)
{
  return AppleBCMWLANPCIeSkywalkRxSubmissionQueue::setLogger((AppleBCMWLANPCIeSkywalkRxSubmissionQueue *)((char *)this - 72), a2);
}

uint64_t AppleBCMWLANPCIeSkywalkRxSubmissionQueue::requestDequeue(IOUserNetworkPacketQueue *this, void *a2, unsigned int a3)
{
  if (*((_DWORD *)this[1].ivars + 10) >= *((_DWORD *)this[1].ivars + 16) >> 2) {
    return 0;
  }
  *((void *)this[1].ivars + 20) = mach_continuous_time();
  return IOUserNetworkPacketQueue::requestDequeue(this, a2, a3);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkRxSubmissionQueue::requestDequeue(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *this, void *a2, unsigned int a3)
{
  return AppleBCMWLANPCIeSkywalkRxSubmissionQueue::requestDequeue((IOUserNetworkPacketQueue *)((char *)this - 40), a2, a3);
}

uint64_t AppleBCMWLANPCIeSkywalkRxSubmissionQueue::getTotalFilledCountinFWRing(AppleBCMWLANPCIeSkywalkRxSubmissionQueue *this)
{
  return *(void *)(*((void *)this + 11) + 112);
}

uint64_t AppleBCMWLANPCIeSkywalkRxSubmissionQueue::setRxRingSize(uint64_t this, uint64_t a2)
{
  *(void *)(*(void *)(this + 88) + 80) = a2;
  return this;
}

void _GLOBAL__sub_I_AppleBCMWLANPCIeSkywalkRxSubmissionQueue_cpp()
{
  kNullRange = 0;
}

OSObject *AppleBCMWLANPCIeSkywalkTxCompletionQueue::withProviderAndQueueInfoAndPool(AppleBCMWLANPCIeSkywalkTxCompletionQueue *this, OSObject *a2, OSObject *a3, unsigned int a4, unsigned int a5, IOUserNetworkPacketBufferPool *a6, AppleBCMWLANPCIeSkywalkPacketPool *a7, CCLogStream *a8, CCFaultReporter *a9)
{
  int v14 = (int)a3;
  pObject = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANPCIeSkywalkTxCompletionQueueMetaClass, &pObject)) {
    return 0;
  }
  uint64_t v17 = pObject;
  if (pObject
    && (AppleBCMWLANPCIeSkywalkTxCompletionQueue::initProviderAndPoolAndQueueInfo((IOUserNetworkTxCompletionQueue *)pObject, this, a2, a6, v14, a4, a5, a7, a8) & 1) == 0)
  {
    ((void (*)(OSObject *))v17->release)(v17);
    return 0;
  }
  return v17;
}

uint64_t AppleBCMWLANPCIeSkywalkTxCompletionQueue::initProviderAndPoolAndQueueInfo(IOUserNetworkTxCompletionQueue *this, AppleBCMWLANBusInterfacePCIe *a2, OSObject *a3, IOUserNetworkPacketBufferPool *a4, int a5, unsigned int a6, unsigned int a7, CCLogStream *a8, CCFaultReporter *a9)
{
  uint64_t v17 = IOMallocZeroTyped();
  this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable = (OSObjectInterface_vtbl *)v17;
  if (v17)
  {
    uint64_t v18 = (const OSMetaClassBase *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)a2 + 80))(a2);
    uint64_t result = AppleBCMWLANSkywalkTxCompletionQueue::initWithPoolAndQueueInfo(this, a3, a4, a5, a6, a7, v18);
    if (result)
    {
      this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable[2].init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))&this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable[2];
      this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable[2].free = (void (__cdecl *)(OSObjectInterface *__hidden))&this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable[2];
      this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable[3].init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))a4;
      uint64_t v20 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
      init = v20[3].init;
      if (init)
      {
        (*(void (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)init + 8))(init);
        uint64_t v20 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
      }
      v20[1].free = (void (__cdecl *)(OSObjectInterface *__hidden))a2;
      uint64_t v22 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
      free = v22[1].free;
      if (free)
      {
        (*(void (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)free + 8))(free);
        uint64_t v22 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
      }
      v22->init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))a8;
      unint64_t v24 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
      if (v24->init)
      {
        (*(void (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)v24->init + 8))(v24->init);
        unint64_t v24 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
      }
      v24->free = (void (__cdecl *)(OSObjectInterface *__hidden))a9;
      this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable[3].free = (void (__cdecl *)(OSObjectInterface *__hidden))(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)a2 + 80))(a2);
      return 1;
    }
  }
  else
  {
    IOLog("tx comp queue ivars alloc fail\n");
    return 0;
  }
  return result;
}

void AppleBCMWLANPCIeSkywalkTxCompletionQueue::free(IOUserNetworkTxCompletionQueue *this)
{
  if (this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable)
  {
    if (((uint64_t (*)(IOUserNetworkTxCompletionQueue *))this->IOUserNetworkPacketQueue::OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(this))
    {
      ((void (*)(IOUserNetworkTxCompletionQueue *))this->IOUserNetworkPacketQueue::OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)((uint64_t (*)(IOUserNetworkTxCompletionQueue *))this->IOUserNetworkPacketQueue::OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(this);
        CCLogStream::logAlert(v6, "[dk] %s@%d:Enter ::free [%p]", "free", 117, this);
      }
    }
    uint64_t v2 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
    free = v2[1].free;
    if (free)
    {
      (*(void (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)free + 16))(v2[1].free);
      this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable[1].free = 0;
      uint64_t v2 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
    }
    if (v2->init)
    {
      (*(void (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)v2->init + 16))(v2->init);
      this[1].init = 0;
      uint64_t v2 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
    }
    init = v2[3].init;
    if (init)
    {
      (*(void (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)init + 16))(v2[3].init);
      this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable[3].init = 0;
      uint64_t v2 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
    }
    bzero(v2, 0x398uLL);
    uint64_t v5 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
    if (v5)
    {
      IOFree(v5, 0x398uLL);
      this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable = 0;
    }
  }
  AppleBCMWLANSkywalkTxCompletionQueue::free(this);
}

void non-virtual thunk to'AppleBCMWLANPCIeSkywalkTxCompletionQueue::free(AppleBCMWLANPCIeSkywalkTxCompletionQueue *this)
{
}

uint64_t *AppleBCMWLANPCIeSkywalkTxCompletionQueue::flushPackets(AppleBCMWLANPCIeSkywalkTxCompletionQueue *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxCompletionQueue *))(*(void *)this + 216))(this))
  {
    (*(void (**)(AppleBCMWLANPCIeSkywalkTxCompletionQueue *))(*(void *)this + 216))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v2 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxCompletionQueue *))(*(void *)this + 216))(this);
      CCLogStream::logInfo(v2, "[dk] %s@%d:Enter, current FlushPackets:%zu\n", "flushPackets", 140, *(void *)(*((void *)this + 11) + 96));
    }
  }
  while (1)
  {
    uint64_t v5 = *((void *)this + 11);
    uint64_t v8 = *(uint64_t **)(v5 + 32);
    int v7 = (uint64_t *)(v5 + 32);
    uint64_t result = v8;
    if (v7 == v8) {
      break;
    }
    if (*(uint64_t **)result[1] != result || (uint64_t v3 = *result, *(uint64_t **)(*result + 8) != result))
    {
      __break(1u);
      return result;
    }
    *(void *)(v3 + 8) = v7;
    *int v7 = v3;
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v4 = (IOUserNetworkPacket *)AppleBCMWLANPCIeSkywalkPacket::fromChain((uint64_t)result);
    ++*(void *)(*((void *)this + 11) + 96);
    AppleBCMWLANPCIeSkywalkPacketPool::deallocatePacket(*(AppleBCMWLANPCIeSkywalkPacketPool **)(*((void *)this + 11) + 48), v4);
  }
  return result;
}

uint64_t *AppleBCMWLANPCIeSkywalkTxCompletionQueue::enqueuePackets(AppleBCMWLANPCIeSkywalkTxCompletionQueue *this, OSObject *a2, IO80211NetworkPacket **a3, uint64_t a4, void *a5)
{
  unsigned int v5 = a4;
  uint64_t v7 = (*(uint64_t (**)(void, OSObject *, IO80211NetworkPacket **, uint64_t, void *))(**(void **)(*((void *)this + 11) + 56)
                                                                                               + 144))(*(void *)(*((void *)this + 11) + 56), a2, a3, a4, a5);
  *(void *)(*((void *)this + 11) + 904) = mach_continuous_time();
  *(void *)(*((void *)this + 11) + 64) += v5;
  if (v7)
  {
    if (v5)
    {
      uint64_t v7 = 0;
      uint64_t v8 = v5;
      while (1)
      {
        uint64_t v9 = *((void *)this + 11);
        uint64_t v12 = *(uint64_t **)(v9 + 32);
        uint64_t v11 = (uint64_t *)(v9 + 32);
        uint64_t result = v12;
        if (v11 == v12) {
          break;
        }
        if (*(uint64_t **)result[1] != result || (uint64_t v13 = *result, *(uint64_t **)(*result + 8) != result))
        {
          __break(1u);
          return result;
        }
        *(void *)(v13 + 8) = v11;
        *uint64_t v11 = v13;
        *uint64_t result = 0;
        result[1] = 0;
        uint64_t v14 = AppleBCMWLANPCIeSkywalkPacket::fromChain((uint64_t)result);
        if (!v14) {
          break;
        }
        uint64_t v15 = (IO80211NetworkPacket *)v14;
        if (AppleBCMWLANSkywalkTxCompletionQueue::getInterface(this))
        {
          unsigned int Headroom = IO80211NetworkPacket::getHeadroom(v15);
          uint64_t v17 = (*(uint64_t (**)(IO80211NetworkPacket *))(*(void *)v15 + 480))(v15);
          uint64_t v18 = (*(uint64_t (**)(IO80211NetworkPacket *))(*(void *)v15 + 296))(v15);
          int Ac = AppleBCMWLANPCIeSkywalkPacket::getAc(v15);
          unsigned int v20 = (*(uint64_t (**)(IO80211NetworkPacket *))(*(void *)v15 + 520))(v15);
          uint64_t v21 = *((void *)this + 11);
          if ((AppleBCMWLANPCIeSkywalkPacket::isPktRequeued(v15) & 1) == 0)
          {
            uint64_t v22 = 104;
            if (v18) {
              uint64_t v22 = 504;
            }
            uint64_t v23 = v21 + v22;
            uint64_t v24 = v17 + Headroom;
            *(unsigned char *)(v23 + 8) = 1;
            ++*(void *)(v23 + 8 * Ac + 368);
            uint64_t v25 = v23 + 88 * Ac + 8 * v20;
            ++*(void *)(v25 + 16);
            uint64_t Interface = AppleBCMWLANSkywalkTxCompletionQueue::getInterface(this);
            uint64_t Scratch = AppleBCMWLANPCIeSkywalkPacket::getScratch(v15);
            uint64_t v28 = AppleBCMWLANPCIeSkywalkPacket::getAc(v15);
            uint64_t Status = AppleBCMWLANPCIeSkywalkPacket::getStatus(v15);
            uint64_t v30 = (*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxCompletionQueue *))(*(void *)this + 208))(this);
            LOBYTE(v33) = 0;
            (*(void (**)(uint64_t, IO80211NetworkPacket *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))(*(void *)Interface + 552))(Interface, v15, Scratch, v24, v28, Status, v30, v18, v33);
          }
        }
        if (AppleBCMWLANPCIeSkywalkPacket::isLocalPacket(v15)) {
          AppleBCMWLANPCIeSkywalkTxCompletionQueue::enqueuePackets();
        }
        a3[v7++] = v15;
        if (v8 == v7)
        {
          uint64_t v7 = v8;
          break;
        }
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    *(void *)(*((void *)this + 11) + 72) += v7;
    *(void *)(*((void *)this + 11) + 80) = v7;
    uint64_t v31 = (IO80211SkywalkInterface *)AppleBCMWLANSkywalkTxCompletionQueue::getInterface(this);
    if (IO80211SkywalkInterface::getInterfaceRole(v31) == 1)
    {
      uint64_t v32 = AppleBCMWLANSkywalkTxCompletionQueue::getInterface(this);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v32 + 560))(v32, *((void *)this + 11) + 504, *((void *)this + 11) + 104);
    }
  }
  return (uint64_t *)v7;
}

uint64_t *non-virtual thunk to'AppleBCMWLANPCIeSkywalkTxCompletionQueue::enqueuePackets(AppleBCMWLANPCIeSkywalkTxCompletionQueue *this, OSObject *a2, IO80211NetworkPacket **a3, uint64_t a4, void *a5)
{
  return AppleBCMWLANPCIeSkywalkTxCompletionQueue::enqueuePackets((AppleBCMWLANPCIeSkywalkTxCompletionQueue *)((char *)this - 72), a2, a3, a4, a5);
}

uint64_t AppleBCMWLANPCIeSkywalkTxCompletionQueue::collectQueueStats(AppleBCMWLANPCIeSkywalkTxCompletionQueue *this, char *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  (*(void (**)(AppleBCMWLANPCIeSkywalkTxCompletionQueue *))(*(void *)this + 216))(this);
  uint64_t v10 = IO80211Print() + a5;
  (*(void (**)(AppleBCMWLANPCIeSkywalkTxCompletionQueue *))(*(void *)this + 216))(this);
  uint64_t v11 = IO80211Print() + v10;
  absolutetime_to_nanoseconds();
  absolutetime_to_nanoseconds();
  (*(void (**)(AppleBCMWLANPCIeSkywalkTxCompletionQueue *))(*(void *)this + 216))(this);
  uint64_t v12 = IO80211Print() + v11;
  uint64_t v13 = *(void *)(*((void *)this + 11) + 16);
  (*(void (**)(AppleBCMWLANPCIeSkywalkTxCompletionQueue *))(*(void *)this + 216))(this);
  if (v13)
  {
    IO80211WorkSource::isEnabled(*(IO80211WorkSource **)(*((void *)this + 11) + 16));
    (*(void (**)(void))(**(void **)(*((void *)this + 11) + 16) + 208))(*(void *)(*((void *)this + 11) + 16));
    AppleBCMWLANItemRing::getReadableItemCount(*(AppleBCMWLANItemRing **)(*((void *)this + 11) + 16));
    AppleBCMWLANItemRing::getWritableItemCount(*(AppleBCMWLANItemRing **)(*((void *)this + 11) + 16));
  }
  uint64_t v14 = IO80211Print();
  return AppleBCMWLANSkywalkTxCompletionQueue::collectQueueStats(this, a2, a3, a4, v14 + v12);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkTxCompletionQueue::collectQueueStats(AppleBCMWLANPCIeSkywalkTxCompletionQueue *this, char *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  return AppleBCMWLANPCIeSkywalkTxCompletionQueue::collectQueueStats((AppleBCMWLANPCIeSkywalkTxCompletionQueue *)((char *)this - 72), a2, a3, a4, a5);
}

void *AppleBCMWLANPCIeSkywalkTxCompletionQueue::stagePacket(AppleBCMWLANPCIeSkywalkTxCompletionQueue *this, AppleBCMWLANPCIeSkywalkPacket *a2)
{
  uint64_t v2 = *((void *)this + 11);
  uint64_t result = (void *)AppleBCMWLANPCIeSkywalkPacket::getChain(a2);
  uint64_t v4 = *(void **)(v2 + 40);
  if (*v4 == v2 + 32)
  {
    *uint64_t result = v2 + 32;
    result[1] = v4;
    *uint64_t v4 = result;
    *(void *)(v2 + 40) = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t AppleBCMWLANPCIeSkywalkTxCompletionQueue::setFirmwareRing(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 88) + 16) = a2;
  return result;
}

uint64_t AppleBCMWLANPCIeSkywalkTxCompletionQueue::getLogger(AppleBCMWLANPCIeSkywalkTxCompletionQueue *this)
{
  return **((void **)this + 11);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkTxCompletionQueue::getLogger(AppleBCMWLANPCIeSkywalkTxCompletionQueue *this)
{
  return **((void **)this + 2);
}

uint64_t AppleBCMWLANPCIeSkywalkTxCompletionQueue::requestEnqueue(IOUserNetworkPacketQueue *this, void *a2, unsigned int a3)
{
  *((void *)this[1].ivars + 114) = mach_continuous_time();
  return AppleBCMWLANSkywalkTxCompletionQueue::requestEnqueue(this, a2, a3);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkTxCompletionQueue::requestEnqueue(AppleBCMWLANPCIeSkywalkTxCompletionQueue *this, void *a2, unsigned int a3)
{
  unsigned int v5 = (IOUserNetworkPacketQueue *)((char *)this - 40);
  *(void *)(*((void *)this + 6) + 912) = mach_continuous_time();
  return AppleBCMWLANSkywalkTxCompletionQueue::requestEnqueue(v5, a2, a3);
}

void _GLOBAL__sub_I_AppleBCMWLANPCIeSkywalkTxCompletionQueue_cpp()
{
  kNullRange = 0;
}

OSObject *AppleBCMWLANPCIeSkywalkTxSubmissionQueue::withProviderAndQueueInfoAndPool(BOOL (__cdecl *a1)(OSObjectInterface *__hidden this), OSObject *a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, IOUserNetworkPacketBufferPool *a7, OSMetaClass_vtbl *a8, uint64_t a9)
{
  pObject = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANPCIeSkywalkTxSubmissionQueueMetaClass, &pObject)) {
    return 0;
  }
  uint64_t v17 = pObject;
  if (pObject
    && (AppleBCMWLANPCIeSkywalkTxSubmissionQueue::initProviderAndPoolAndQueueInfo((IOUserNetworkTxSubmissionQueue *)pObject, a1, a2, a7, a3, a4, a5, a6, a8, a9) & 1) == 0)
  {
    ((void (*)(OSObject *))v17->release)(v17);
    return 0;
  }
  return v17;
}

uint64_t AppleBCMWLANPCIeSkywalkTxSubmissionQueue::initProviderAndPoolAndQueueInfo(IOUserNetworkTxSubmissionQueue *a1, BOOL (__cdecl *a2)(OSObjectInterface *__hidden this), OSObject *a3, IOUserNetworkPacketBufferPool *a4, int a5, unsigned int a6, unsigned int a7, unsigned int a8, OSMetaClass_vtbl *a9, uint64_t a10)
{
  uint64_t v18 = IOMallocZeroTyped();
  a1[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable = (OSObjectInterface_vtbl *)v18;
  if (!v18)
  {
    IOLog("pcie tx subm ivars allocation fail\n");
    return 0;
  }
  __int16 v19 = (OSMetaClass_vtbl *)(*(uint64_t (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)a2 + 80))(a2);
  if (!AppleBCMWLANSkywalkTxSubmissionQueue::initWithPoolAndQueueInfo(a1, a3, a4, a5, a6, a7, a8, a9, a10, v19))return 0; {
  a1[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable[1].init = a2;
  }
  unsigned int v20 = a1[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
  init = v20[1].init;
  if (init)
  {
    (*(void (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)init + 8))(init);
    unsigned int v20 = a1[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
  }
  v20[1].free = (void (__cdecl *)(OSObjectInterface *__hidden))a4;
  uint64_t v22 = a1[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
  free = v22[1].free;
  if (free)
  {
    (*(void (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)free + 8))(free);
    uint64_t v22 = a1[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
  }
  LODWORD(v22[11].free) = a7;
  a1[1].init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))a9;
  uint64_t v24 = a1[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
  if (v24->init)
  {
    (*(void (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)v24->init + 8))(v24->init);
    uint64_t v24 = a1[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
  }
  v24->free = (void (__cdecl *)(OSObjectInterface *__hidden))a10;
  LOWORD(a1[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable[10].free) = 0;
  uint64_t v25 = 1;
  IOParseBootArgNumber("wlan.skywalk.ktrace", &fKernelTraceEnabled, 1);
  a1[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable[12].init = 0;
  LODWORD(a1[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable[12].free) = 0;
  a1[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable[15].init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))(*(uint64_t (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)a2 + 80))(a2);
  if (((uint64_t (*)(IOUserNetworkTxSubmissionQueue *))a1->IOUserNetworkPacketQueue::OSObject::OSMetaClassBase::__vftable[2].SetPacketDirection)(a1))
  {
    ((void (*)(IOUserNetworkTxSubmissionQueue *))a1->IOUserNetworkPacketQueue::OSObject::OSMetaClassBase::__vftable[2].SetPacketDirection)(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v26 = (CCLogStream *)((uint64_t (*)(IOUserNetworkTxSubmissionQueue *))a1->IOUserNetworkPacketQueue::OSObject::OSMetaClassBase::__vftable[2].SetPacketDirection)(a1);
      CCLogStream::logInfo(v26, "[dk] %s@%d:%s: Done txSub %p for ifId %u queueId %u ac %u, ivars->fRequeuePacketRefList:%p\n", "initProviderAndPoolAndQueueInfo", 152, "initProviderAndPoolAndQueueInfo", a1, a5, a6, a7, a1[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable[12].init);
    }
  }
  return v25;
}

uint64_t AppleBCMWLANPCIeSkywalkTxSubmissionQueue::enable(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this))
  {
    (*(void (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this
                                                                                                 + 288))(this);
      CCLogStream::logInfo(v11, "[dk] %s@%d:Enter", "enable", 160);
    }
  }
  uint64_t Interface = (IO80211SkywalkInterface *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this);
  if (IO80211SkywalkInterface::getInterfaceId(Interface) != 9
    || (uint64_t v3 = (IO80211SkywalkInterface *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this),
        IO80211SkywalkInterface::getInterfaceRole(v3) != 2)
    || (uint64_t v4 = AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this),
        (*(unsigned int (**)(uint64_t))(*(void *)v4 + 1000))(v4)))
  {
    *(unsigned char *)(*((void *)this + 11) + 32) = 1;
    unsigned int v5 = (IO80211SkywalkInterface *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this);
    int InterfaceId = IO80211SkywalkInterface::getInterfaceId(v5);
    uint64_t v7 = (AppleBCMWLANCore *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 11) + 16) + 1104))();
    if (InterfaceId == AppleBCMWLANCore::getProximityInterfaceId(v7))
    {
      uint64_t v8 = *(void *)(*((void *)this + 11) + 16);
      if (v8)
      {
        uint64_t v9 = (AppleBCMWLANCore *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 1104))(v8);
        if (v9)
        {
          if (AppleBCMWLANCore::isLlwRequeueEnabled(v9)) {
            *(void *)(*((void *)this + 11) + 192) = IOMallocZeroTyped();
          }
        }
      }
    }
    AppleBCMWLANSkywalkTxSubmissionQueue::enable((IOUserNetworkPacketQueue *)this);
  }
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this
                                                                                                 + 288))(this);
      return CCLogStream::logInfo(v12, "[dk] %s@%d:Exit with fEnabled:%d\n", "enable", 179, *(unsigned __int8 *)(*((void *)this + 11) + 32));
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkTxSubmissionQueue::enable(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *this)
{
  return AppleBCMWLANPCIeSkywalkTxSubmissionQueue::enable((AppleBCMWLANPCIeSkywalkTxSubmissionQueue *)((char *)this - 72));
}

uint64_t AppleBCMWLANPCIeSkywalkTxSubmissionQueue::disable(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *this)
{
  *(unsigned char *)(*((void *)this + 11) + 32) = 0;
  uint64_t v2 = *(void **)(*((void *)this + 11) + 192);
  if (v2)
  {
    IOFree(v2, 0x400uLL);
    *(void *)(*((void *)this + 11) + 192) = 0;
  }
  if ((*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this))
  {
    (*(void (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
      CCLogStream::logInfo(v4, "[dk] %s@%d:Disabling Tx Submission Queue", "disable", 191);
    }
  }
  return AppleBCMWLANSkywalkTxSubmissionQueue::disable(this);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkTxSubmissionQueue::disable(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *this)
{
  return AppleBCMWLANPCIeSkywalkTxSubmissionQueue::disable((AppleBCMWLANPCIeSkywalkTxSubmissionQueue *)((char *)this - 72));
}

void *AppleBCMWLANPCIeSkywalkTxSubmissionQueue::clearFWRings(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this))
  {
    (*(void (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
    if (CCLogStream::shouldLog())
    {
      unsigned int v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
      uint64_t Interface = (IO80211SkywalkInterface *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this);
      int InterfaceId = IO80211SkywalkInterface::getInterfaceId(Interface);
      CCLogStream::logInfo(v5, "[dk] %s@%d:clearFWRings interface %d remaining queue count %d\n", "clearFWRings", 198, InterfaceId, *(unsigned __int16 *)(*((void *)this + 11) + 168));
    }
  }
  uint64_t v2 = (IO80211SkywalkInterface *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this);
  uint64_t result = (void *)IO80211SkywalkInterface::getInterfaceId(v2);
  if (result != -1)
  {
    for (uint64_t i = 40; i != 168; i += 8)
    {
      uint64_t result = *(void **)(*((void *)this + 11) + i);
      if (result)
      {
        AppleBCMWLANPCIeFlowQueue::setFWRing(result, 0);
        (*(void (**)(void))(**(void **)(*((void *)this + 11) + i) + 144))(*(void *)(*((void *)this + 11) + i));
        uint64_t result = *(void **)(*((void *)this + 11) + i);
        if (result)
        {
          uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
          *(void *)(*((void *)this + 11) + i) = 0;
        }
      }
    }
    *(_WORD *)(*((void *)this + 11) + 168) = 0;
  }
  return result;
}

void *non-virtual thunk to'AppleBCMWLANPCIeSkywalkTxSubmissionQueue::clearFWRings(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *this)
{
  return AppleBCMWLANPCIeSkywalkTxSubmissionQueue::clearFWRings((AppleBCMWLANPCIeSkywalkTxSubmissionQueue *)((char *)this - 72));
}

uint64_t AppleBCMWLANPCIeSkywalkTxSubmissionQueue::clearFWRing(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *this, unsigned __int8 *a2)
{
  if ((*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this))
  {
    (*(void (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this
                                                                                                 + 288))(this);
      CCLogStream::logInfo(v12, "[dk] %s@%d:clearFWRing STA : %02x:%02x:%02x:%02x:%02x:%02x fFlowQueueCount %d\n", "clearFWRing", 217, *a2, a2[1], a2[2], a2[3], a2[4], a2[5], *(unsigned __int16 *)(*((void *)this + 11) + 168));
    }
  }
  uint64_t v4 = 5;
  while (1)
  {
    unsigned int v5 = *(AppleBCMWLANPCIeFlowQueue **)(*((void *)this + 11) + 8 * v4);
    if (v5)
    {
      uint64_t Destination = AppleBCMWLANPCIeFlowQueue::getDestination(v5);
      if (*(_DWORD *)Destination == *(_DWORD *)a2
        && *(unsigned __int16 *)(Destination + 4) == *((unsigned __int16 *)a2 + 2))
      {
        break;
      }
    }
    if (++v4 == 21) {
      goto LABEL_18;
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this))
  {
    (*(void (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this
                                                                                                 + 288))(this);
      int v15 = *(unsigned __int8 *)AppleBCMWLANPCIeFlowQueue::getDestination(*(AppleBCMWLANPCIeFlowQueue **)(*((void *)this + 11) + 8 * v4));
      int v16 = *(unsigned __int8 *)(AppleBCMWLANPCIeFlowQueue::getDestination(*(AppleBCMWLANPCIeFlowQueue **)(*((void *)this + 11) + 8 * v4))
                               + 1);
      int v17 = *(unsigned __int8 *)(AppleBCMWLANPCIeFlowQueue::getDestination(*(AppleBCMWLANPCIeFlowQueue **)(*((void *)this + 11) + 8 * v4))
                               + 2);
      int v18 = *(unsigned __int8 *)(AppleBCMWLANPCIeFlowQueue::getDestination(*(AppleBCMWLANPCIeFlowQueue **)(*((void *)this + 11) + 8 * v4))
                               + 3);
      int v19 = *(unsigned __int8 *)(AppleBCMWLANPCIeFlowQueue::getDestination(*(AppleBCMWLANPCIeFlowQueue **)(*((void *)this + 11) + 8 * v4))
                               + 4);
      uint64_t v20 = AppleBCMWLANPCIeFlowQueue::getDestination(*(AppleBCMWLANPCIeFlowQueue **)(*((void *)this + 11) + 8 * v4));
      CCLogStream::logInfo(v14, "[dk] %s@%d:index %d addr :%02x:%02x:%02x:%02x:%02x:%02x\n", "clearFWRing", 220, v4 - 5, v15, v16, v17, v18, v19, *(unsigned __int8 *)(v20 + 5));
    }
  }
  AppleBCMWLANPCIeFlowQueue::setFWRing(*(void **)(*((void *)this + 11) + 8 * v4), 0);
  uint64_t v8 = *(void *)(*((void *)this + 11) + 8 * v4);
  (*(void (**)(uint64_t))(*(void *)v8 + 144))(v8);
  uint64_t v9 = *((void *)this + 11);
  uint64_t v10 = *(void *)(v9 + 8 * v4);
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
    *(void *)(*((void *)this + 11) + 8 * v4) = 0;
    uint64_t v9 = *((void *)this + 11);
  }
  --*(_WORD *)(v9 + 168);
LABEL_18:
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this
                                                                                                 + 288))(this);
      return CCLogStream::logAlert(v13, "[dk] %s@%d:clearFWRing FlowQueueCount %d \n", "clearFWRing", 228, *(unsigned __int16 *)(*((void *)this + 11) + 168));
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkTxSubmissionQueue::clearFWRing(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *this, unsigned __int8 *a2)
{
  return AppleBCMWLANPCIeSkywalkTxSubmissionQueue::clearFWRing((AppleBCMWLANPCIeSkywalkTxSubmissionQueue *)((char *)this - 72), a2);
}

void AppleBCMWLANPCIeSkywalkTxSubmissionQueue::free(IOUserNetworkTxSubmissionQueue *this)
{
  if (this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable)
  {
    if (((uint64_t (*)(IOUserNetworkTxSubmissionQueue *))this->IOUserNetworkPacketQueue::OSObject::OSMetaClassBase::__vftable[2].SetPacketDirection)(this))
    {
      ((void (*)(IOUserNetworkTxSubmissionQueue *))this->IOUserNetworkPacketQueue::OSObject::OSMetaClassBase::__vftable[2].SetPacketDirection)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)((uint64_t (*)(IOUserNetworkTxSubmissionQueue *))this->IOUserNetworkPacketQueue::OSObject::OSMetaClassBase::__vftable[2].SetPacketDirection)(this);
        CCLogStream::logAlert(v6, "[dk] %s@%d:Enter ::free [%p]", "free", 236, this);
      }
    }
    uint64_t v2 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
    init = v2[1].init;
    if (init)
    {
      (*(void (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)init + 16))(init);
      this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable[1].init = 0;
      uint64_t v2 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
    }
    if (v2->init)
    {
      (*(void (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)v2->init + 16))(v2->init);
      this[1].init = 0;
      uint64_t v2 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
    }
    free = v2[1].free;
    if (free)
    {
      (*(void (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)free + 16))(free);
      this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable[1].free = 0;
      uint64_t v2 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
    }
    v2[25] = 0u;
    v2[26] = 0u;
    v2[23] = 0u;
    v2[24] = 0u;
    v2[21] = 0u;
    v2[22] = 0u;
    v2[19] = 0u;
    v2[20] = 0u;
    v2[17] = 0u;
    v2[18] = 0u;
    v2[15] = 0u;
    v2[16] = 0u;
    v2[13] = 0u;
    v2[14] = 0u;
    v2[11] = 0u;
    v2[12] = 0u;
    v2[9] = 0u;
    v2[10] = 0u;
    v2[7] = 0u;
    v2[8] = 0u;
    v2[5] = 0u;
    v2[6] = 0u;
    v2[3] = 0u;
    v2[4] = 0u;
    v2[1] = 0u;
    v2[2] = 0u;
    *uint64_t v2 = 0u;
    unsigned int v5 = this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable;
    if (v5)
    {
      IOFree(v5, 0x1B0uLL);
      this[1].IOUserNetworkPacketQueue::OSObject::OSObjectInterface::__vftable = 0;
    }
  }
  AppleBCMWLANSkywalkTxSubmissionQueue::free(this);
}

void non-virtual thunk to'AppleBCMWLANPCIeSkywalkTxSubmissionQueue::free(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *this)
{
}

BOOL AppleBCMWLANPCIeSkywalkTxSubmissionQueue::dupAndTransmitMcastPacket(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *this, IO80211NetworkPacket *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  uint64_t v14 = 0;
  AppleBCMWLANPCIeSkywalkPacketPool::duplicatePacket(*(CCLogStream ****)(*((void *)this + 11) + 24), a2, &v14);
  uint64_t v7 = v14;
  if (v14)
  {
    int v15 = v14;
    uint64_t v8 = (*(uint64_t (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)v14 + 480))(v14);
    uint64_t v9 = v8 + IO80211NetworkPacket::getHeadroom(v14);
    int v10 = *(_DWORD *)a3;
    *(_WORD *)(v9 + 4) = *((_WORD *)a3 + 2);
    *(_DWORD *)uint64_t v9 = v10;
    LOWORD(v10) = *((_WORD *)a4 + 2);
    *(_DWORD *)(v9 + 6) = *(_DWORD *)a4;
    *(_WORD *)(v9 + 10) = v10;
    uint64_t Scratch = AppleBCMWLANPCIeSkywalkPacket::getScratch(v14);
    *(unsigned char *)(Scratch + 40) |= 0x40u;
    if ((*(unsigned int (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *, AppleBCMWLANPCIeSkywalkTxSubmissionQueue *, AppleBCMWLANPCIeSkywalkPacket **, uint64_t, void))(*(void *)this + 176))(this, this, &v15, 1, 0) != 1)
    {
      if ((*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this))
      {
        (*(void (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
          CCLogStream::logAlert(v12, "[dk] %s@%d:%s[%d] : did not dequeue all packets\n", "dupAndTransmitMcastPacket", 278, "dupAndTransmitMcastPacket", 278);
        }
      }
    }
  }
  else
  {
    IOLog("Failed to dup packet\n");
  }
  return v7 != 0;
}

BOOL non-virtual thunk to'AppleBCMWLANPCIeSkywalkTxSubmissionQueue::dupAndTransmitMcastPacket(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *this, IO80211NetworkPacket *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  return AppleBCMWLANPCIeSkywalkTxSubmissionQueue::dupAndTransmitMcastPacket((AppleBCMWLANPCIeSkywalkTxSubmissionQueue *)((char *)this - 72), a2, a3, a4);
}

uint64_t AppleBCMWLANPCIeSkywalkTxSubmissionQueue::freeMulticastPacket(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *this, IO80211NetworkPacket *a2)
{
  *(unsigned char *)(AppleBCMWLANPCIeSkywalkPacket::getScratch(a2) + 40) = 0;
  AppleBCMWLANPCIeSkywalkPacketPool::deallocatePacket(*(AppleBCMWLANPCIeSkywalkPacketPool **)(*((void *)this + 11) + 24), (IOUserNetworkPacket *)a2);
  return 1;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkTxSubmissionQueue::freeMulticastPacket(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *this, IO80211NetworkPacket *a2)
{
  *(unsigned char *)(AppleBCMWLANPCIeSkywalkPacket::getScratch(a2) + 40) = 0;
  AppleBCMWLANPCIeSkywalkPacketPool::deallocatePacket(*(AppleBCMWLANPCIeSkywalkPacketPool **)(*((void *)this + 2) + 24), (IOUserNetworkPacket *)a2);
  return 1;
}

uint64_t AppleBCMWLANPCIeSkywalkTxSubmissionQueue::forwardPacket(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *this, IO80211NetworkPacket *a2)
{
  unsigned int v5 = 0;
  AppleBCMWLANPCIeSkywalkPacketPool::duplicatePacket(*(CCLogStream ****)(*((void *)this + 11) + 24), a2, (AppleBCMWLANPCIeSkywalkPacket **)&v5);
  if (v5)
  {
    uint64_t v3 = ((uint64_t (*)(IOUserNetworkPacket *))v5->OSObject::OSMetaClassBase::__vftable[1].getDataLength)(v5);
    if (*(unsigned char *)(v3 + ((unsigned int (*)(IOUserNetworkPacket *))v5->getDataOffset)(v5))) {
      IOUserNetworkPacket::setIsLinkMulticast(v5, 1);
    }
    uint64_t v6 = v5;
    return (*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *, AppleBCMWLANPCIeSkywalkTxSubmissionQueue *, IOUserNetworkPacket **, uint64_t, void))(*(void *)this + 176))(this, this, &v6, 1, 0);
  }
  else
  {
    IOLog("Failed to dup packet\n");
    return 0;
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkTxSubmissionQueue::forwardPacket(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *this, IO80211NetworkPacket *a2)
{
  return AppleBCMWLANPCIeSkywalkTxSubmissionQueue::forwardPacket((AppleBCMWLANPCIeSkywalkTxSubmissionQueue *)((char *)this - 72), a2);
}

uint64_t AppleBCMWLANPCIeSkywalkTxSubmissionQueue::p2pMulticastTx(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 176))(a1, a1, a2, a3, 0);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkTxSubmissionQueue::p2pMulticastTx(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)(a1 - 72) + 176))(a1 - 72, a1 - 72, a2, a3, 0);
}

void *AppleBCMWLANPCIeSkywalkTxSubmissionQueue::signalTxPendingFlowQueue(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[11];
  if (*(_DWORD *)(v2 + 376))
  {
    uint64_t v3 = 31;
    do
    {
      uint64_t v4 = *(void *)(v2 + 8 * v3);
      if (v4)
      {
        AppleBCMWLANPCIeFlowQueue::requestPendingPackets(*(AppleBCMWLANPCIeFlowQueue **)(v2 + 8 * v3));
        this = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 144))(v4);
      }
      else
      {
        this = (void *)(*(uint64_t (**)(void *))(*v1 + 288))(v1);
        if (this)
        {
          (*(void (**)(void *))(*v1 + 288))(v1);
          this = (void *)CCLogStream::shouldLog();
          if (this)
          {
            uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(void *))(*v1 + 288))(v1);
            this = (void *)CCLogStream::logAlert(v6, "[dk] %s@%d:%s[%d] ERROR ! Flowqueue is NULL ! \n", "signalTxPendingFlowQueue", 352, "signalTxPendingFlowQueue", 352);
          }
        }
      }
      *(void *)(v1[11] + 8 * v3) = 0;
      uint64_t v2 = v1[11];
      unint64_t v5 = v3 - 30;
      ++v3;
    }
    while (v5 < *(unsigned int *)(v2 + 376));
  }
  *(_DWORD *)(v2 + 376) = 0;
  *(_DWORD *)(v1[11] + 380) = 0;
  return this;
}

uint64_t AppleBCMWLANPCIeSkywalkTxSubmissionQueue::dequeueInfraPacket(BOOL (__cdecl ***this)(OSObjectInterface *__hidden this), AppleBCMWLANPCIeSkywalkPacket *a2)
{
  uint64_t Interface = AppleBCMWLANSkywalkTxSubmissionQueue::getInterface((AppleBCMWLANSkywalkTxSubmissionQueue *)this);
  unint64_t v5 = (const OSMetaClassBase *)(*(uint64_t (**)(uint64_t))(*(void *)Interface + 1096))(Interface);
  uint64_t v6 = OSMetaClassBase::safeMetaCast(v5, (const OSMetaClass *)gAppleBCMWLANPCIeSkywalkMulticastQueueMetaClass);
  uint64_t v7 = (IO80211InfraInterface *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface((AppleBCMWLANSkywalkTxSubmissionQueue *)this);
  if (AppleBCMWLANSkywalkInterface::isDataPathConnected(v7))
  {
    BOOL v8 = (*(unsigned int (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)a2 + 288))(a2) == 4718992
      && *((_DWORD *)this[11] + 46) == 3;
    int v11 = (*(uint64_t (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)a2 + 296))(a2);
    uint64_t v12 = this[11];
    if (!v11 || v8)
    {
      if (!v12[5])
      {
        if (((uint64_t (*)(BOOL (__cdecl ***)(OSObjectInterface *__hidden)))(*this)[36])(this))
        {
          ((void (*)(BOOL (__cdecl ***)(OSObjectInterface *__hidden)))(*this)[36])(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v21 = (CCLogStream *)((uint64_t (*)(BOOL (__cdecl ***)(OSObjectInterface *__hidden)))(*this)[36])(this);
            CCLogStream::logInfo(v21, "[dk] %s@%d:%s Creating INFRA flowQueue for TxSub ivars->fAc %u.flowIndx %u\n", "dequeueInfraPacket", 393, "dequeueInfraPacket", *((_DWORD *)this[11] + 46), *((unsigned __int16 *)this[11] + 84));
          }
        }
        int v15 = (AppleBCMWLANBusInterfacePCIe *)this[11][2];
        uint64_t CurrentApAddress = IO80211InfraInterface::getCurrentApAddress(v7);
        this[11][5] = (BOOL (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANPCIeFlowQueue::withProviderAndQueueInfo(v15, CurrentApAddress & 0xFFFFFFFFFFFFLL, *((_DWORD *)this[11] + 46), v7, *this[11], (void (__cdecl *)(OSObjectInterface *__hidden))this[11][1]);
        int v17 = this[11];
        if (!v17[5]) {
          return 3758097086;
        }
        ++*((_WORD *)v17 + 84);
        (*(void (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)this[11][5] + 136))(this[11][5]);
        uint64_t v12 = this[11];
      }
      ++*((_DWORD *)v12 + 52);
      AppleBCMWLANPCIeFlowQueue::enqueuePacket((AppleBCMWLANPCIeFlowQueue *)this[11][5], a2, 1);
      uint64_t v18 = AppleBCMWLANSkywalkTxSubmissionQueue::getInterface((AppleBCMWLANSkywalkTxSubmissionQueue *)this);
      uint64_t Scratch = AppleBCMWLANPCIeSkywalkPacket::getScratch(a2);
      (*(void (**)(uint64_t, AppleBCMWLANPCIeSkywalkPacket *, uint64_t, void, uint64_t))(*(void *)v18 + 544))(v18, a2, Scratch, *((unsigned int *)this[11] + 46), 1);
    }
    else
    {
      ++*((_DWORD *)v12 + 51);
      uint64_t v13 = AppleBCMWLANSkywalkTxSubmissionQueue::getInterface((AppleBCMWLANSkywalkTxSubmissionQueue *)this);
      uint64_t v14 = AppleBCMWLANPCIeSkywalkPacket::getScratch(a2);
      (*(void (**)(uint64_t, AppleBCMWLANPCIeSkywalkPacket *, uint64_t, void, void))(*(void *)v13 + 544))(v13, a2, v14, 0, 0);
      AppleBCMWLANPCIeSkywalkMulticastQueue::enqueuePacket((AppleBCMWLANPCIeSkywalkMulticastQueue *)v6, a2, 1);
    }
    return 0;
  }
  else
  {
    uint64_t v9 = 3758097112;
    if (((uint64_t (*)(BOOL (__cdecl ***)(OSObjectInterface *__hidden)))(*this)[36])(this))
    {
      ((void (*)(BOOL (__cdecl ***)(OSObjectInterface *__hidden)))(*this)[36])(this);
      if (CCLogStream::shouldLog())
      {
        int v10 = (CCLogStream *)((uint64_t (*)(BOOL (__cdecl ***)(OSObjectInterface *__hidden)))(*this)[36])(this);
        CCLogStream::logAlert(v10, "[dk] %s@%d:Interface is not assoc yet\n", "dequeueInfraPacket", 371);
      }
    }
  }
  return v9;
}

uint64_t AppleBCMWLANPCIeSkywalkTxSubmissionQueue::dequeueSoftAPLLWPacket(BOOL (__cdecl ***this)(OSObjectInterface *__hidden this), AppleBCMWLANPCIeSkywalkPacket *a2)
{
  uint64_t Interface = AppleBCMWLANSkywalkTxSubmissionQueue::getInterface((AppleBCMWLANSkywalkTxSubmissionQueue *)this);
  if (((*(uint64_t (**)(uint64_t))(*(void *)Interface + 1000))(Interface) & 1) == 0)
  {
    uint64_t v18 = 3758097112;
    if (((uint64_t (*)(BOOL (__cdecl ***)(OSObjectInterface *__hidden)))(*this)[36])(this))
    {
      ((void (*)(BOOL (__cdecl ***)(OSObjectInterface *__hidden)))(*this)[36])(this);
      if (CCLogStream::shouldLog())
      {
        int v19 = (CCLogStream *)((uint64_t (*)(BOOL (__cdecl ***)(OSObjectInterface *__hidden)))(*this)[36])(this);
        uint64_t v20 = AppleBCMWLANSkywalkTxSubmissionQueue::getInterface((AppleBCMWLANSkywalkTxSubmissionQueue *)this);
        uint64_t v21 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 160))(v20);
        uint64_t v22 = (IO80211SkywalkInterface *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface((AppleBCMWLANSkywalkTxSubmissionQueue *)this);
        int InterfaceId = IO80211SkywalkInterface::getInterfaceId(v22);
        CCLogStream::logAlert(v19, "[dk] %s@%d:ERROR ! Interface (%s, ID : %d) is not enabled\n", "dequeueSoftAPLLWPacket", 419, v21, InterfaceId);
        return 3758097112;
      }
    }
    return v18;
  }
  unint64_t v5 = (IO80211SkywalkInterface *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface((AppleBCMWLANSkywalkTxSubmissionQueue *)this);
  if (IO80211SkywalkInterface::getInterfaceId(v5) == -1)
  {
    if (((uint64_t (*)(BOOL (__cdecl ***)(OSObjectInterface *__hidden)))(*this)[36])(this))
    {
      ((void (*)(BOOL (__cdecl ***)(OSObjectInterface *__hidden)))(*this)[36])(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v24 = (CCLogStream *)((uint64_t (*)(BOOL (__cdecl ***)(OSObjectInterface *__hidden)))(*this)[36])(this);
        uint64_t v25 = AppleBCMWLANSkywalkTxSubmissionQueue::getInterface((AppleBCMWLANSkywalkTxSubmissionQueue *)this);
        (*(void (**)(uint64_t))(*(void *)v25 + 160))(v25);
        uint64_t v26 = (IO80211SkywalkInterface *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface((AppleBCMWLANSkywalkTxSubmissionQueue *)this);
        IO80211SkywalkInterface::getInterfaceId(v26);
        CCLogStream::logAlert(v24, "[dk] %s@%d:ERROR ! Interface (%s, ID : %d) is Invalid \n");
      }
    }
    return 3758096385;
  }
  uint64_t v6 = (IO80211SkywalkInterface *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface((AppleBCMWLANSkywalkTxSubmissionQueue *)this);
  if (IO80211SkywalkInterface::getInterfaceId(v6) == 9
    || (uint64_t v7 = (IO80211SkywalkInterface *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface((AppleBCMWLANSkywalkTxSubmissionQueue *)this),
        IO80211SkywalkInterface::getInterfaceId(v7) == 10)
    || (BOOL v8 = (IO80211SkywalkInterface *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface((AppleBCMWLANSkywalkTxSubmissionQueue *)this),
        IO80211SkywalkInterface::getInterfaceId(v8) == 11))
  {
    uint64_t v9 = (IO80211SkywalkInterface *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface((AppleBCMWLANSkywalkTxSubmissionQueue *)this);
    Parentuint64_t Interface = (IO80211SkywalkInterface *)IO80211SkywalkInterface::getParentInterface(v9);
    if (ParentInterface)
    {
      int v11 = ParentInterface;
      if (IO80211SkywalkInterface::getInterfaceId(ParentInterface) == -1
        || ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v11 + 608))(v11) & 1) == 0)
      {
        if (((uint64_t (*)(BOOL (__cdecl ***)(OSObjectInterface *__hidden)))(*this)[36])(this))
        {
          ((void (*)(BOOL (__cdecl ***)(OSObjectInterface *__hidden)))(*this)[36])(this);
          if (CCLogStream::shouldLog())
          {
            v53 = (CCLogStream *)((uint64_t (*)(BOOL (__cdecl ***)(OSObjectInterface *__hidden)))(*this)[36])(this);
            uint64_t v54 = AppleBCMWLANSkywalkTxSubmissionQueue::getInterface((AppleBCMWLANSkywalkTxSubmissionQueue *)this);
            (*(void (**)(uint64_t))(*(void *)v54 + 160))(v54);
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)v11 + 608))(v11);
            CCLogStream::logAlert(v53, "[dk] %s@%d:ERROR ! Interface (%s) chip not ready %d\n");
          }
        }
        return 3758096385;
      }
    }
  }
  uint64_t v12 = (AppleBCMWLANCore *)(*(uint64_t (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)this[11][2] + 1104))(this[11][2]);
  if ((*(unsigned int (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)a2 + 296))(a2))
  {
    uint64_t v13 = AppleBCMWLANSkywalkTxSubmissionQueue::getInterface((AppleBCMWLANSkywalkTxSubmissionQueue *)this);
    uint64_t v14 = (const OSMetaClassBase *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 1096))(v13);
    int v15 = OSMetaClassBase::safeMetaCast(v14, (const OSMetaClass *)gAppleBCMWLANPCIeSkywalkMulticastQueueMetaClass);
    uint64_t v16 = AppleBCMWLANSkywalkTxSubmissionQueue::getInterface((AppleBCMWLANSkywalkTxSubmissionQueue *)this);
    uint64_t Scratch = AppleBCMWLANPCIeSkywalkPacket::getScratch(a2);
    (*(void (**)(uint64_t, AppleBCMWLANPCIeSkywalkPacket *, uint64_t, void, void))(*(void *)v16 + 544))(v16, a2, Scratch, 0, 0);
    if (v15)
    {
      AppleBCMWLANPCIeSkywalkMulticastQueue::enqueuePacket((AppleBCMWLANPCIeSkywalkMulticastQueue *)v15, a2, 1);
      uint64_t v18 = 0;
      ++*((_DWORD *)this[11] + 51);
    }
    else
    {
      return 3758097095;
    }
  }
  else
  {
    uint64_t v28 = (*(uint64_t (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)a2 + 480))(a2);
    uint64_t v29 = 0;
    uint64_t v30 = (unsigned __int8 *)(v28 + IO80211NetworkPacket::getHeadroom(a2));
    unsigned int v31 = -1;
    do
    {
      uint64_t v32 = (AppleBCMWLANPCIeFlowQueue *)this[11][v29 + 5];
      if (v32)
      {
        uint64_t Destination = AppleBCMWLANPCIeFlowQueue::getDestination(v32);
        if (*(_DWORD *)Destination == *(_DWORD *)v30
          && *(unsigned __int16 *)(Destination + 4) == *((unsigned __int16 *)v30 + 2))
        {
          LOWORD(v31) = v29;
LABEL_49:
          if (v12)
          {
            if ((AppleBCMWLANCore::isP2pAirplayActive(v12) & 1) != 0
              || (uint64_t v46 = (IO80211SkywalkInterface *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface((AppleBCMWLANSkywalkTxSubmissionQueue *)this),
                  IO80211SkywalkInterface::isLowLatencyEnabled(v46)))
            {
              uint64_t v76 = mach_absolute_time();
              absolutetime_to_nanoseconds();
              v76 /= 0x3E8uLL;
              if (AppleBCMWLANCore::isLlwRequeueEnabled(v12))
              {
                v47 = (IO80211SkywalkInterface *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface((AppleBCMWLANSkywalkTxSubmissionQueue *)this);
                int v48 = IO80211SkywalkInterface::getInterfaceId(v47);
                if (v48 == AppleBCMWLANCore::getProximityInterfaceId(v12))
                {
                  uint64_t v75 = 0;
                  if (!(*(unsigned int (**)(AppleBCMWLANPCIeSkywalkPacket *, uint64_t *))(*(void *)a2 + 352))(a2, &v75))
                  {
                    absolutetime_to_nanoseconds();
                    AppleBCMWLANPCIeSkywalkPacket::setPktRemainingLifeTime((uint64_t)a2, 0);
                  }
                  AppleBCMWLANPCIeSkywalkPacket::setFlowQueueIdx((uint64_t)a2, v31);
                }
              }
              (*(void (**)(AppleBCMWLANPCIeSkywalkPacket *, uint64_t))(*(void *)a2 + 496))(a2, v76);
            }
          }
          ++*((_DWORD *)this[11] + 53);
          *((unsigned char *)this[11] + (unsigned __int16)v31 + 220) = 1;
          AppleBCMWLANPCIeFlowQueue::enqueuePacket((AppleBCMWLANPCIeFlowQueue *)this[11][(unsigned __int16)v31 + 5], a2, 1);
          uint64_t v49 = AppleBCMWLANSkywalkTxSubmissionQueue::getInterface((AppleBCMWLANSkywalkTxSubmissionQueue *)this);
          uint64_t v50 = AppleBCMWLANPCIeSkywalkPacket::getScratch(a2);
          (*(void (**)(uint64_t, AppleBCMWLANPCIeSkywalkPacket *, uint64_t, void, uint64_t))(*(void *)v49 + 544))(v49, a2, v50, *((unsigned int *)this[11] + 46), 1);
          uint64_t v51 = AppleBCMWLANPCIeSkywalkPacket::getScratch(a2);
          uint64_t v18 = 0;
          *(unsigned char *)(v51 + 40) |= 0x20u;
          return v18;
        }
      }
      else if ((v31 & 0x80000000) != 0)
      {
        unsigned int v31 = v29;
      }
      ++v29;
    }
    while (v29 != 16);
    if (v31 > 0xF || *((unsigned __int16 *)this[11] + 84) > 0xFu)
    {
      uint64_t v18 = 3758097086;
      if (((uint64_t (*)(BOOL (__cdecl ***)(OSObjectInterface *__hidden)))(*this)[36])(this))
      {
        ((void (*)(BOOL (__cdecl ***)(OSObjectInterface *__hidden)))(*this)[36])(this);
        if (CCLogStream::shouldLog())
        {
          v45 = (CCLogStream *)((uint64_t (*)(BOOL (__cdecl ***)(OSObjectInterface *__hidden)))(*this)[36])(this);
          CCLogStream::logAlert(v45, "[dk] %s@%d:Did not have a flow with index %u for peer %02x:%02x:%02x:%02x:%02x:%02x flow queue count %u\n", "dequeueSoftAPLLWPacket", 537, 0xFFFF, *v30, v30[1], v30[2], v30[3], v30[4], v30[5], *((unsigned __int16 *)this[11] + 84));
        }
      }
    }
    else
    {
      uint64_t v35 = (IO80211SkywalkInterface *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface((AppleBCMWLANSkywalkTxSubmissionQueue *)this);
      if (IO80211SkywalkInterface::getInterfaceRole(v35) != 7
        || (*v30 & 1) != 0
        || (uint64_t v36 = AppleBCMWLANSkywalkTxSubmissionQueue::getInterface((AppleBCMWLANSkywalkTxSubmissionQueue *)this),
            (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(void *)v36 + 968))(v36, v30)))
      {
        if (((uint64_t (*)(BOOL (__cdecl ***)(OSObjectInterface *__hidden)))(*this)[36])(this))
        {
          ((void (*)(BOOL (__cdecl ***)(OSObjectInterface *__hidden)))(*this)[36])(this);
          if (CCLogStream::shouldLog())
          {
            v73 = (CCLogStream *)((uint64_t (*)(BOOL (__cdecl ***)(OSObjectInterface *__hidden)))(*this)[36])(this);
            uint64_t v55 = AppleBCMWLANSkywalkTxSubmissionQueue::getInterface((AppleBCMWLANSkywalkTxSubmissionQueue *)this);
            uint64_t v56 = (*(uint64_t (**)(uint64_t))(*(void *)v55 + 160))(v55);
            unsigned int v74 = v31;
            unint64_t v57 = this[11];
            int v71 = *((unsigned __int16 *)v57 + 84);
            v72 = (const char *)v56;
            int v70 = *v30;
            int v69 = v30[1];
            int v58 = v30[2];
            int v59 = v30[3];
            int v60 = v30[4];
            int v61 = v30[5];
            int v62 = *((_DWORD *)v57 + 46);
            v63 = (IO80211SkywalkInterface *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface((AppleBCMWLANSkywalkTxSubmissionQueue *)this);
            int v64 = IO80211SkywalkInterface::getInterfaceId(v63);
            uint64_t v65 = (IO80211SkywalkInterface *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface((AppleBCMWLANSkywalkTxSubmissionQueue *)this);
            int InterfaceRole = IO80211SkywalkInterface::getInterfaceRole(v65);
            int v68 = v59;
            unsigned int v31 = v74;
            CCLogStream::logAlert(v73, "[dk] %s@%d:%s Creating %s flowQueue for TxSub ivars->fAc %u, flowIndx %u, da:%02x:%02x:%02x:%02x:%02x:%02x, ifId %d, ifRole %d\n", "dequeueSoftAPLLWPacket", 484, "dequeueSoftAPLLWPacket", v72, v62, v71, v70, v69, v58, v68, v60, v61, v64, InterfaceRole);
          }
        }
        uint64_t v37 = *v30;
        uint64_t v38 = v30[1];
        unint64_t v39 = (unint64_t)*(unsigned int *)(v30 + 2) << 16;
        if (((uint64_t (*)(BOOL (__cdecl ***)(OSObjectInterface *__hidden)))(*this)[36])(this))
        {
          ((void (*)(BOOL (__cdecl ***)(OSObjectInterface *__hidden)))(*this)[36])(this);
          if (CCLogStream::shouldLog())
          {
            v67 = (CCLogStream *)((uint64_t (*)(BOOL (__cdecl ***)(OSObjectInterface *__hidden)))(*this)[36])(this);
            CCLogStream::logAlert(v67, "[dk] %s@%d:%s %u for peer %02x:%02x:%02x:%02x:%02x:%02x flow queue count %u\n", "dequeueSoftAPLLWPacket", 488, "IOReturn AppleBCMWLANPCIeSkywalkTxSubmissionQueue::dequeueSoftAPLLWPacket(AppleBCMWLANPCIeSkywalkPacket *)", v31, *v30, v30[1], v30[2], v30[3], v30[4], v30[5], *((unsigned __int16 *)this[11] + 84));
          }
        }
        uint64_t v40 = this[11];
        v41 = (AppleBCMWLANBusInterfacePCIe *)v40[2];
        int v42 = *((_DWORD *)v40 + 46);
        v43 = (IO80211SkywalkInterface *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface((AppleBCMWLANSkywalkTxSubmissionQueue *)this);
        this[11][v31 + 5] = (BOOL (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANPCIeFlowQueue::withProviderAndQueueInfo(v41, v37 | (v38 << 8) | v39, v42, v43, *this[11], (void (__cdecl *)(OSObjectInterface *__hidden))this[11][1]);
        uint64_t v44 = this[11][v31 + 5];
        (*(void (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)v44 + 136))(v44);
        ++*((_WORD *)this[11] + 84);
        goto LABEL_49;
      }
      uint64_t v18 = 3758097136;
      if (((uint64_t (*)(BOOL (__cdecl ***)(OSObjectInterface *__hidden)))(*this)[36])(this))
      {
        ((void (*)(BOOL (__cdecl ***)(OSObjectInterface *__hidden)))(*this)[36])(this);
        if (CCLogStream::shouldLog())
        {
          unint64_t v52 = (CCLogStream *)((uint64_t (*)(BOOL (__cdecl ***)(OSObjectInterface *__hidden)))(*this)[36])(this);
          CCLogStream::logAlert(v52, "[dk] %s@%d:%s[%d]:  Peer not found for %02x:%02x:%02x:%02x:%02x:%02x\n", "dequeueSoftAPLLWPacket", 477, "dequeueSoftAPLLWPacket", 477, *v30, v30[1], v30[2], v30[3], v30[4], v30[5]);
          return 3758097136;
        }
      }
    }
  }
  return v18;
}

IO80211FlowQueue *AppleBCMWLANPCIeSkywalkTxSubmissionQueue::findOrCreateFlowQueue(AppleBCMWLANSkywalkTxSubmissionQueue *this, void *a2)
{
  uint64_t v4 = *((void *)this + 11);
  if (*(_DWORD *)(v4 + 376))
  {
    unsigned int v5 = 0;
    int v6 = *(_DWORD *)(v4 + 380);
    do
    {
      uint64_t v7 = *(IO80211FlowQueue **)(v4 + 8 * v6 + 248);
      if (IO80211FlowQueue::getHash(v7) == *a2)
      {
        *(_DWORD *)(*((void *)this + 11) + 380) = v6;
        return v7;
      }
      uint64_t v4 = *((void *)this + 11);
      unsigned int v8 = *(_DWORD *)(v4 + 376);
      if (v6 >= 1) {
        int v9 = v6;
      }
      else {
        int v9 = *(_DWORD *)(v4 + 376);
      }
      int v6 = v9 - 1;
      ++v5;
    }
    while (v5 < v8);
    if (v8 >= 0x10) {
      AppleBCMWLANPCIeSkywalkTxSubmissionQueue::signalTxPendingFlowQueue(this);
    }
  }
  uint64_t Interface = AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, void))(*(void *)Interface + 864))(Interface, *a2);
  uint64_t v7 = (IO80211FlowQueue *)v11;
  if (v11)
  {
    *(_DWORD *)(*((void *)this + 11) + 380) = *(_DWORD *)(*((void *)this + 11) + 376);
    uint64_t v12 = *((void *)this + 11);
    uint64_t v13 = *(unsigned int *)(v12 + 376);
    *(_DWORD *)(v12 + 376) = v13 + 1;
    *(void *)(v12 + 8 * v13 + 248) = v11;
    (*(void (**)(uint64_t))(*(void *)v11 + 136))(v11);
  }
  return v7;
}

uint64_t AppleBCMWLANPCIeSkywalkTxSubmissionQueue::dequeueAWDLNANPacket(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *this, AppleBCMWLANPCIeSkywalkPacket *a2)
{
  uint64_t Interface = (IO80211SkywalkInterface *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this);
  int InterfaceRole = IO80211SkywalkInterface::getInterfaceRole(Interface);
  uint64_t v65 = 0;
  uint64_t v6 = *(void *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this);
  if (((*(uint64_t (**)(void))(v6 + 1000))() & 1) == 0)
  {
    if (!(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this)) {
      return 3758097112;
    }
    (*(void (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
    uint64_t v9 = 3758097112;
    if (CCLogStream::shouldLog())
    {
      int v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this
                                                                                                 + 288))(this);
      uint64_t v16 = AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this);
      (*(void (**)(uint64_t))(*(void *)v16 + 160))(v16);
      int v17 = (IO80211SkywalkInterface *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this);
      IO80211SkywalkInterface::getInterfaceId(v17);
      CCLogStream::logAlert(v15, "[dk] %s@%d:ERROR ! Interface (%s, ID : %d) is not enabled\n");
    }
    return v9;
  }
  uint64_t v7 = (IO80211SkywalkInterface *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this);
  if (IO80211SkywalkInterface::getInterfaceId(v7) == -1
    || (uint64_t v8 = AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this),
        ((*(uint64_t (**)(uint64_t))(*(void *)v8 + 608))(v8) & 1) == 0))
  {
    if ((*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this))
    {
      (*(void (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v55 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
        uint64_t v56 = AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this);
        unint64_t v57 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v56 + 160))(v56);
        int v58 = (IO80211SkywalkInterface *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this);
        int InterfaceId = IO80211SkywalkInterface::getInterfaceId(v58);
        uint64_t v60 = *(void *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this);
        int v61 = (*(uint64_t (**)(void))(v60 + 608))();
        CCLogStream::logAlert(v55, "[dk] %s@%d:ERROR ! Interface (%s, ID : %d), chip ready %d \n", "dequeueAWDLNANPacket", 602, v57, InterfaceId, v61);
      }
    }
    return 3758096385;
  }
  uint64_t v9 = 3758097088;
  if (InterfaceRole == 10)
  {
    int v19 = (const OSMetaClassBase *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this);
    uint64_t v20 = OSMetaClassBase::safeMetaCast(v19, gIO80211VirtualInterfaceMetaClass);
    if (v20)
    {
      uint64_t v21 = (IO80211VirtualInterface *)v20;
      unsigned int Headroom = IO80211NetworkPacket::getHeadroom(a2);
      unsigned int v23 = (*(uint64_t (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)a2 + 224))(a2);
      uint64_t v24 = Headroom;
      uint64_t v25 = (unsigned __int8 *)((*(uint64_t (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)a2 + 480))(a2)
                              + Headroom);
      if (*v25)
      {
        ++*(_DWORD *)(*((void *)this + 11) + 204);
        if (IO80211VirtualInterface::handleMulticastTransmit(v21, a2, v25, v23, v24)) {
          return 3758097095;
        }
        else {
          return 0;
        }
      }
      *(_DWORD *)&v64[1] = 0;
      v64[0] = 0;
      uint64_t Scratch = AppleBCMWLANPCIeSkywalkPacket::getScratch(a2);
      if ((*(unsigned char *)(Scratch + 40) & 0x40) != 0)
      {
        *(unsigned char *)(Scratch + 40) &= ~0x40u;
        goto LABEL_41;
      }
      if (IO80211VirtualInterface::modifyUnicastPacket(v21, v25, v23, v24, (unsigned int *)&v64[1], v64))
      {
        (*(void (**)(AppleBCMWLANPCIeSkywalkPacket *, void))(*(void *)a2 + 232))(a2, v64[0]);
        (*(void (**)(AppleBCMWLANPCIeSkywalkPacket *, void))(*(void *)a2 + 216))(a2, *(unsigned int *)&v64[1]);
        IO80211NetworkPacket::setLinkHeaderOffset(a2, v64[0]);
        uint64_t v24 = v64[0];
        ++*(_DWORD *)(*((void *)this + 11) + 212);
LABEL_41:
        uint64_t v28 = (*(uint64_t (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)a2 + 480))(a2) + v24;
        *(_DWORD *)((char *)&v65 + 2) = *(_DWORD *)v28;
        HIWORD(v65) = *(_WORD *)(v28 + 4);
        BYTE1(v65) = *(_DWORD *)(*((void *)this + 11) + 184);
        uint64_t v36 = (IO80211SkywalkInterface *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this);
        LOBYTE(v65) = IO80211SkywalkInterface::getInterfaceId(v36);
LABEL_42:
        uint64_t v37 = AppleBCMWLANPCIeSkywalkTxSubmissionQueue::findOrCreateFlowQueue(this, &v65);
        if (v37)
        {
          uint64_t v38 = v37;
          uint64_t v39 = AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this);
          uint64_t v40 = AppleBCMWLANPCIeSkywalkPacket::getScratch(a2);
          (*(void (**)(uint64_t, AppleBCMWLANPCIeSkywalkPacket *, uint64_t, uint64_t, void, uint64_t))(*(void *)v39 + 584))(v39, a2, v40, v28, *(unsigned int *)(*((void *)this + 11) + 184), 1);
          v41 = v38;
LABEL_47:
          AppleBCMWLANPCIeFlowQueue::enqueuePacket(v41, a2, 1);
          return 0;
        }
        return v9;
      }
      if ((*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this))
      {
        (*(void (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
        if (CCLogStream::shouldLog())
        {
          v53 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
          CCLogStream::logAlert(v53, "[dk] %s@%d:%s[%d] :: ERROR ! Could not insert Snap Header, discarding packet\n", "dequeueAWDLNANPacket", 793, "dequeueAWDLNANPacket", 793);
        }
      }
    }
    else
    {
      IOLog("%s[%d] :: ERROR ! Could not insert Snap Header, discarding packet\n", "dequeueAWDLNANPacket", 771);
    }
    return 3758097095;
  }
  if (InterfaceRole == 9)
  {
    unsigned int v27 = IO80211NetworkPacket::getHeadroom(a2);
    uint64_t v28 = (*(uint64_t (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)a2 + 480))(a2) + v27;
    *(_DWORD *)((char *)&v65 + 2) = *(_DWORD *)v28;
    HIWORD(v65) = *(_WORD *)(v28 + 4);
    BYTE1(v65) = *(_DWORD *)(*((void *)this + 11) + 184);
    uint64_t v29 = (IO80211SkywalkInterface *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this);
    LOBYTE(v65) = IO80211SkywalkInterface::getInterfaceId(v29);
    if ((*(uint64_t (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)a2 + 296))(a2)) {
      return 3758097086;
    }
    ++*(_DWORD *)(*((void *)this + 11) + 212);
    goto LABEL_42;
  }
  if (InterfaceRole != 6) {
    return 3758097098;
  }
  if (!AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this))
  {
    if ((*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this))
    {
      (*(void (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v30 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
        CCLogStream::logAlert(v30, "[dk] %s@%d:ERROR ! No Prox Interface\n");
      }
    }
    return v9;
  }
  unsigned int v10 = IO80211NetworkPacket::getHeadroom(a2);
  uint64_t v11 = (*(uint64_t (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)a2 + 480))(a2) + v10;
  uint64_t v12 = AppleBCMWLANPCIeSkywalkPacket::getScratch(a2);
  uint64_t v13 = v12;
  char v14 = *(unsigned char *)v11;
  if (*(unsigned char *)v11)
  {
    int v31 = *(char *)(v12 + 40);
    if ((v31 & 0x80000000) == 0)
    {
      uint64_t v32 = (const OSMetaClassBase *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this);
      int v33 = OSMetaClassBase::safeMetaCast(v32, gIO80211VirtualInterfaceMetaClass);
      ++*(_DWORD *)(*((void *)this + 11) + 204);
      if (v33)
      {
        v34 = (IO80211VirtualInterface *)v33;
        *(void *)&v64[1] = 0;
        *(unsigned char *)(v13 + 40) |= 0x80u;
        AppleBCMWLANPCIeSkywalkPacketPool::duplicatePacket(*(CCLogStream ****)(*((void *)this + 11) + 24), a2, (AppleBCMWLANPCIeSkywalkPacket **)&v64[1]);
        if (*(void *)&v64[1])
        {
          AppleBCMWLANPCIeSkywalkPacket::getScratch(*(AppleBCMWLANPCIeSkywalkPacket **)&v64[1]);
          uint64_t v35 = AppleBCMWLANPCIeSkywalkPacket::getScratch(*(AppleBCMWLANPCIeSkywalkPacket **)&v64[1]);
          *(unsigned char *)(v35 + 40) |= 0x80u;
        }
        else if ((*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this))
        {
          (*(void (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
          if (CCLogStream::shouldLog())
          {
            int v62 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
            CCLogStream::logInfo(v62, "[dk] %s@%d:%s[%d] Could not dup multicast packet for 2nd soc channel\n", "dequeueAWDLNANPacket", 658, "dequeueAWDLNANPacket", 658);
          }
        }
        IO80211VirtualInterface::stashMulticastPacketPair(v34, a2, *(IO80211NetworkPacket **)&v64[1]);
        return 0;
      }
      if ((*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this))
      {
        (*(void (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v54 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
          CCLogStream::logAlert(v54, "[dk] %s@%d:Invalid Virtual Interface for AWDL ! \n");
        }
      }
      return v9;
    }
    HIWORD(v65) = -1;
    *(_DWORD *)((char *)&v65 + 2) = -1;
    BYTE1(v65) = 0;
    *(unsigned char *)(v12 + 40) = v31 & 0x7F;
  }
  else
  {
    ++*(_DWORD *)(*((void *)this + 11) + 212);
    *(_DWORD *)((char *)&v65 + 2) = *(_DWORD *)v11;
    HIWORD(v65) = *(_WORD *)(v11 + 4);
    BYTE1(v65) = *(_DWORD *)(*((void *)this + 11) + 184);
  }
  int v42 = (IO80211SkywalkInterface *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this);
  LOBYTE(v65) = IO80211SkywalkInterface::getInterfaceId(v42);
  v43 = AppleBCMWLANPCIeSkywalkTxSubmissionQueue::findOrCreateFlowQueue(this, &v65);
  if (v43)
  {
    uint64_t v44 = v43;
    BOOL v63 = (v14 & 1) == 0;
    int v45 = (*(uint64_t (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)a2 + 224))(a2);
    uint64_t v46 = (v10 - 16);
    uint64_t v47 = (*(uint64_t (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)a2 + 480))(a2) + v46;
    __int16 v48 = *(_WORD *)(v11 + 12);
    uint64_t v49 = *(void *)v11;
    int v50 = *(_DWORD *)(v11 + 8);
    *(_WORD *)(v13 + 2) = 0;
    IO80211NetworkPacket::setHeadroom(a2, v46);
    *(void *)uint64_t v47 = v49;
    *(_DWORD *)(v47 + 8) = v50;
    *(_WORD *)(v47 + 12) = bswap32(v45 + 2) >> 16;
    *(_WORD *)(v47 + 22) = 1027;
    *(void *)(v47 + 14) = 0x8F2170003AAAALL;
    *(_WORD *)(v47 + 26) = 0;
    *(_WORD *)(v47 + 28) = v48;
    *(_WORD *)(v47 + 24) = AppleBCMWLANPCIeFlowQueue::getSequenceNumber(v44) & 0xFFF | (*(_WORD *)(*((void *)this + 11)
                                                                                                 + 184) << 12);
    (*(void (**)(AppleBCMWLANPCIeSkywalkPacket *, uint64_t))(*(void *)a2 + 232))(a2, v46);
    (*(void (**)(AppleBCMWLANPCIeSkywalkPacket *, void))(*(void *)a2 + 216))(a2, (v45 + 16));
    IO80211NetworkPacket::setLinkHeaderOffset(a2, v46);
    uint64_t v51 = AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this);
    uint64_t v52 = AppleBCMWLANPCIeSkywalkPacket::getScratch(a2);
    (*(void (**)(uint64_t, AppleBCMWLANPCIeSkywalkPacket *, uint64_t, uint64_t, void, BOOL))(*(void *)v51 + 584))(v51, a2, v52, v47, *(unsigned int *)(*((void *)this + 11) + 184), v63);
    v41 = v44;
    goto LABEL_47;
  }
  return v9;
}

uint64_t AppleBCMWLANPCIeSkywalkTxSubmissionQueue::dequeuePackets(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *this, OSObject *a2, IO80211NetworkPacket **a3, uint64_t a4, void *a5)
{
  uint64_t Interface = (IO80211SkywalkInterface *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this);
  unsigned int InterfaceRole = IO80211SkywalkInterface::getInterfaceRole(Interface);
  int v10 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 11) + 240) + 144))(*(void *)(*((void *)this + 11) + 240));
  memset(v36, 170, sizeof(v36));
  if (InterfaceRole == 1)
  {
    uint64_t v11 = AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 912))(v11, 0x200000000000);
  }
  *(void *)(*((void *)this + 11) + 416) = mach_continuous_time();
  *(void *)(*((void *)this + 11) + 384) += a4;
  *(void *)(*((void *)this + 11) + 408) = 0;
  if (!v10 || !AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this)) {
    return 0;
  }
  uint64_t v12 = a4;
  uint64_t v13 = *((void *)this + 11);
  *(_OWORD *)(v13 + 220) = 0u;
  *(_OWORD *)(v13 + 204) = 0u;
  if (fKernelTraceEnabled)
  {
    (*(void (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 224))(this);
    (*(void (**)(void))(**(void **)(*((void *)this + 11) + 16) + 784))();
    kdebug_trace();
    if (a4) {
      goto LABEL_7;
    }
  }
  else if (a4)
  {
LABEL_7:
    a4 = 0;
    int v14 = 0;
    while (1)
    {
      int v15 = OSMetaClassBase::safeMetaCast((const OSMetaClassBase *)a3[a4], (const OSMetaClass *)gAppleBCMWLANPCIeSkywalkPacketMetaClass);
      if (!v15) {
        break;
      }
      uint64_t v16 = (AppleBCMWLANPCIeSkywalkPacket *)v15;
      *(_DWORD *)(*((void *)this + 11) + 216) += ((uint64_t (*)(OSMetaClassBase *))v15->__vftable[5].isEqualTo)(v15);
      if (InterfaceRole <= 0xA)
      {
        if (((1 << InterfaceRole) & 0xBC) != 0)
        {
          int v17 = AppleBCMWLANPCIeSkywalkTxSubmissionQueue::dequeueSoftAPLLWPacket((BOOL (__cdecl ***)(OSObjectInterface *__hidden))this, v16);
LABEL_16:
          int v14 = v17;
          goto LABEL_17;
        }
        if (((1 << InterfaceRole) & 0x640) != 0)
        {
          int v17 = AppleBCMWLANPCIeSkywalkTxSubmissionQueue::dequeueAWDLNANPacket(this, v16);
          goto LABEL_16;
        }
        if (InterfaceRole == 1)
        {
          int v17 = AppleBCMWLANPCIeSkywalkTxSubmissionQueue::dequeueInfraPacket((BOOL (__cdecl ***)(OSObjectInterface *__hidden))this, v16);
          goto LABEL_16;
        }
      }
LABEL_17:
      uint64_t v18 = *((void *)this + 11);
      if (v14)
      {
        AppleBCMWLANPCIeSkywalkPacketPool::deallocatePacket(*(AppleBCMWLANPCIeSkywalkPacketPool **)(v18 + 24), (IOUserNetworkPacket *)v16);
        int v19 = (void *)(*((void *)this + 11) + 400);
      }
      else
      {
        int v19 = (void *)(v18 + 392);
      }
      ++*v19;
      if (v12 == ++a4)
      {
        a4 = v12;
        break;
      }
    }
  }
  if (!AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this)) {
    AppleBCMWLANPCIeSkywalkTxSubmissionQueue::dequeuePackets();
  }
  if (*(_DWORD *)(*((void *)this + 11) + 376))
  {
    AppleBCMWLANPCIeSkywalkTxSubmissionQueue::signalTxPendingFlowQueue(this);
  }
  else
  {
    uint64_t v20 = AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this);
    uint64_t v21 = (const OSMetaClassBase *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 1096))(v20);
    uint64_t v22 = OSMetaClassBase::safeMetaCast(v21, (const OSMetaClass *)gAppleBCMWLANPCIeSkywalkMulticastQueueMetaClass);
    uint64_t v23 = *((void *)this + 11);
    if (*(_DWORD *)(v23 + 204)) {
      BOOL v24 = v22 == 0;
    }
    else {
      BOOL v24 = 1;
    }
    if (!v24)
    {
      ((void (*)(OSMetaClassBase *))v22->__vftable[3].getMetaClass)(v22);
      uint64_t v23 = *((void *)this + 11);
    }
    if (*(_DWORD *)(v23 + 208))
    {
      AppleBCMWLANPCIeFlowQueue::requestPendingPackets(*(AppleBCMWLANPCIeFlowQueue **)(v23 + 40));
    }
    else
    {
      for (uint64_t i = 0; i != 16; ++i)
      {
        uint64_t v26 = *((void *)this + 11);
        if (*(unsigned char *)(v26 + i + 220))
        {
          unsigned int v27 = *(AppleBCMWLANPCIeFlowQueue **)(v26 + 8 * i + 40);
          if (v27) {
            AppleBCMWLANPCIeFlowQueue::requestPendingPackets(v27);
          }
        }
      }
    }
  }
  if (InterfaceRole == 1)
  {
    uint64_t v28 = (IO80211SkywalkInterface *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this);
    uint64_t Controller = IO80211SkywalkInterface::getController(v28);
    AppleBCMWLANCore::addCumulativePkts(Controller, *(unsigned __int8 *)(*((void *)this + 11) + 184), *(_DWORD *)(*((void *)this + 11) + 208));
    uint64_t v30 = *((void *)this + 11);
    LODWORD(v36[1]) = *(_DWORD *)(v30 + 184);
    uint64_t v31 = *(void *)(v30 + 416);
    v36[2] = *(unsigned int *)(v30 + 204);
    v36[3] = v31;
    v36[0] = v31;
    uint64_t v32 = *(void *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this);
    (*(void (**)(void))(v32 + 528))();
  }
  uint64_t v33 = AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this);
  v34 = (unsigned int *)*((void *)this + 11);
  (*(void (**)(uint64_t, void, void, void))(*(void *)v33 + 536))(v33, v34[46], v34[53] + v34[51] + v34[52], v34[54]);
  *(void *)(*((void *)this + 11) + 408) = a4;
  if (fKernelTraceEnabled)
  {
    (*(void (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 224))(this);
    (*(void (**)(void))(**(void **)(*((void *)this + 11) + 16) + 784))();
    kdebug_trace();
  }
  return a4;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkTxSubmissionQueue::dequeuePackets(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *this, OSObject *a2, IO80211NetworkPacket **a3, uint64_t a4, void *a5)
{
  return AppleBCMWLANPCIeSkywalkTxSubmissionQueue::dequeuePackets((AppleBCMWLANPCIeSkywalkTxSubmissionQueue *)((char *)this - 72), a2, a3, a4, a5);
}

uint64_t AppleBCMWLANPCIeSkywalkTxSubmissionQueue::batchedReenqueuePackets(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *this)
{
  mach_absolute_time();
  absolutetime_to_nanoseconds();
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v2 = *((void *)this + 11);
  uint64_t v3 = *(const OSMetaClassBase ***)(v2 + 192);
  uint64_t v4 = *(unsigned int *)(v2 + 200);
  if (v3) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this))
    {
      (*(void (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
      if (CCLogStream::shouldLog())
      {
        int v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
        CCLogStream::logAlert(v15, "[dk] %s@%d:null packet list\n", "batchedReenqueuePackets", 1006);
      }
    }
    return 0xFFFFFFFFLL;
  }
  if (!AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this)) {
    return 0xFFFFFFFFLL;
  }
  if (v4)
  {
    do
    {
      uint64_t v6 = OSMetaClassBase::safeMetaCast(*v3, (const OSMetaClass *)gAppleBCMWLANPCIeSkywalkPacketMetaClass);
      if (v6)
      {
        uint64_t v7 = (IO80211NetworkPacket *)v6;
        unsigned int FlowQueueIdx = AppleBCMWLANPCIeSkywalkPacket::getFlowQueueIdx((AppleBCMWLANPCIeSkywalkPacket *)v6);
        (*(void (**)(IO80211NetworkPacket *))(*(void *)v7 + 480))(v7);
        IO80211NetworkPacket::getHeadroom(v7);
        if (FlowQueueIdx <= 0xF && (uint64_t v9 = *((void *)this + 11), *(void *)(v9 + 8 * FlowQueueIdx + 40)))
        {
          ++*(_DWORD *)(v9 + 212);
          AppleBCMWLANPCIeSkywalkPacket::setFlowQueueIdx((uint64_t)v7, FlowQueueIdx);
          AppleBCMWLANPCIeFlowQueue::enqueuePacket(*(AppleBCMWLANPCIeFlowQueue **)(*((void *)this + 11) + 8 * FlowQueueIdx + 40), v7, 1);
          *((unsigned char *)v16 + FlowQueueIdx) = 1;
        }
        else if ((*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this))
        {
          (*(void (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
          if (CCLogStream::shouldLog())
          {
            int v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
            CCLogStream::logAlert(v10, "[dk] %s@%d:Did not have a flow with index %u for peer %02x:%02x:%02x:%02x:%02x:%02x flow queue count %u\n", "batchedReenqueuePackets", 1036);
          }
        }
      }
      else if ((*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this))
      {
        (*(void (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
          CCLogStream::logAlert(v11, "[dk] %s@%d:null packet\n");
        }
      }
      ++v3;
      --v4;
    }
    while (v4);
  }
  for (uint64_t i = 0; i != 16; ++i)
  {
    if (*((unsigned char *)v16 + i))
    {
      uint64_t v13 = *(AppleBCMWLANPCIeFlowQueue **)(*((void *)this + 11) + 8 * i + 40);
      if (v13) {
        AppleBCMWLANPCIeFlowQueue::requestPendingPackets(v13);
      }
    }
  }
  bzero(*(void **)(*((void *)this + 11) + 192), 0x400uLL);
  uint64_t result = 0;
  *(_DWORD *)(*((void *)this + 11) + 200) = 0;
  if (fKernelTraceEnabled)
  {
    kdebug_trace();
    return 0;
  }
  return result;
}

unint64_t AppleBCMWLANPCIeSkywalkTxSubmissionQueue::getAvgTxCompLatency(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *this, unsigned int a2, unint64_t a3)
{
  uint64_t v6 = a2;
  if (a2 <= 0xF && (uint64_t v7 = *(AppleBCMWLANPCIeFlowQueue **)(*((void *)this + 11) + 8 * a2 + 40)) != 0)
  {
    unint64_t v8 = a3;
    if (AppleBCMWLANPCIeFlowQueue::getTxCompLatency(v7)) {
      unint64_t v8 = (90 * a3
    }
          + 10
          * AppleBCMWLANPCIeFlowQueue::getTxCompLatency(*(AppleBCMWLANPCIeFlowQueue **)(*((void *)this + 11)
                                                                                      + 8 * v6
                                                                                      + 40)))
         / 0x64;
    AppleBCMWLANPCIeFlowQueue::setTxCompLatency(*(void *)(*((void *)this + 11) + 8 * v6 + 40), v8);
  }
  else
  {
    unint64_t v8 = a3;
    if ((*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this))
    {
      (*(void (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
      unint64_t v8 = a3;
      if (CCLogStream::shouldLog())
      {
        int v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
        CCLogStream::logAlert(v10, "[dk] %s@%d:Did not have a flow with index %u for peer, flow queue count %u\n", "getAvgTxCompLatency", 1070, a2, *(unsigned __int16 *)(*((void *)this + 11) + 168));
        unint64_t v8 = a3;
      }
    }
  }
  if (fKernelTraceEnabled) {
    kdebug_trace();
  }
  return v8;
}

uint64_t AppleBCMWLANPCIeSkywalkTxSubmissionQueue::getRingFreeSpace(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *this)
{
  if (!*(_WORD *)(*((void *)this + 11) + 168)) {
    return 0;
  }
  uint64_t RingFreeSpace = 0xFFFFFFFFLL;
  for (uint64_t i = 40; i != 168; i += 8)
  {
    uint64_t v4 = *(AppleBCMWLANPCIeFlowQueue **)(*((void *)this + 11) + i);
    if (v4 && AppleBCMWLANPCIeFlowQueue::getRingFreeSpace(v4) < RingFreeSpace) {
      uint64_t RingFreeSpace = (uint64_t)AppleBCMWLANPCIeFlowQueue::getRingFreeSpace(*(AppleBCMWLANPCIeFlowQueue **)(*((void *)this + 11) + i));
    }
  }
  return RingFreeSpace;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkTxSubmissionQueue::getRingFreeSpace(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *this)
{
  return AppleBCMWLANPCIeSkywalkTxSubmissionQueue::getRingFreeSpace((AppleBCMWLANPCIeSkywalkTxSubmissionQueue *)((char *)this - 72));
}

uint64_t AppleBCMWLANPCIeSkywalkTxSubmissionQueue::getPendingPacketCount(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *this)
{
  uint64_t v2 = 0;
  for (uint64_t i = 40; i != 168; i += 8)
  {
    uint64_t v4 = *(AppleBCMWLANPCIeFlowQueue **)(*((void *)this + 11) + i);
    if (v4) {
      uint64_t v2 = AppleBCMWLANPCIeFlowQueue::getPendingPacketCount(v4) + v2;
    }
  }
  return v2;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkTxSubmissionQueue::getPendingPacketCount(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *this)
{
  uint64_t v2 = 0;
  for (uint64_t i = 40; i != 168; i += 8)
  {
    uint64_t v4 = *(AppleBCMWLANPCIeFlowQueue **)(*((void *)this + 2) + i);
    if (v4) {
      uint64_t v2 = AppleBCMWLANPCIeFlowQueue::getPendingPacketCount(v4) + v2;
    }
  }
  return v2;
}

AppleBCMWLANPCIeFlowQueue *AppleBCMWLANPCIeSkywalkTxSubmissionQueue::setFWRing(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *this, AppleBCMWLANPCIeTransmitFlowRing *a2, unsigned int a3, int a4)
{
  uint64_t Interface = (IO80211SkywalkInterface *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this);
  unsigned int InterfaceRole = IO80211SkywalkInterface::getInterfaceRole(Interface);
  if (!*((void *)this + 11)) {
    return (AppleBCMWLANPCIeFlowQueue *)IOLog("AppleBCMWLANPCIeSkywalkTxSubmissionQueue::setFWRing [%p], no ivars\n", a2);
  }
  unsigned int v10 = InterfaceRole;
  if ((*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this))
  {
    (*(void (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v23 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this
                                                                                                 + 288))(this);
      CCLogStream::logInfo(v23, "[dk] %s@%d:fTid %d flow id %d\n", "setFWRing", 1184, *(_DWORD *)(*((void *)this + 11) + 184), a3);
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this))
  {
    (*(void (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
    if (CCLogStream::shouldLog())
    {
      BOOL v24 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this
                                                                                                 + 288))(this);
      CCLogStream::logInfo(v24, "[dk] %s@%d:%s ivars->fFlowQueueCount %u \n", "setFWRing", 1185, "setFWRing", *(unsigned __int16 *)(*((void *)this + 11) + 168));
    }
  }
  if (v10 <= 0xA && ((1 << v10) & 0x640) != 0 && !a4)
  {
    uint64_t v26 = 0;
    uint64_t TransmitFlowRing = a2;
    if (!a2)
    {
      if (!AppleBCMWLANBusInterfacePCIe::isValidFlowId(*(AppleBCMWLANBusInterfacePCIe **)(*((void *)this + 11) + 16), a3))
      {
        uint64_t result = (AppleBCMWLANPCIeFlowQueue *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
        if (result)
        {
          (*(void (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
          uint64_t result = (AppleBCMWLANPCIeFlowQueue *)CCLogStream::shouldLog();
          if (result)
          {
            uint64_t v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
            return (AppleBCMWLANPCIeFlowQueue *)CCLogStream::logAlert(v22, "[dk] %s@%d:ERROR ! Invalid FlowID/Ring \n");
          }
        }
        return result;
      }
      uint64_t TransmitFlowRing = (AppleBCMWLANPCIeTransmitFlowRing *)AppleBCMWLANBusInterfacePCIe::getTransmitFlowRing(*(AppleBCMWLANBusInterfacePCIe **)(*((void *)this + 11)+ 16), a3);
    }
    (*(void (**)(AppleBCMWLANPCIeTransmitFlowRing *, char *))(*(void *)TransmitFlowRing + 400))(TransmitFlowRing, (char *)&v26 + 2);
    int v14 = (IO80211SkywalkInterface *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this);
    IO80211SkywalkInterface::getInterfaceId(v14);
    uint64_t v15 = *(void *)AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(this);
    uint64_t v16 = (AppleBCMWLANPCIeFlowQueue *)(*(uint64_t (**)(void))(v15 + 880))();
    if (v16)
    {
      int v17 = v16;
      uint64_t result = (AppleBCMWLANPCIeFlowQueue *)AppleBCMWLANPCIeFlowQueue::setFWRing(v16, a2);
      if (a2)
      {
        uint64_t result = (AppleBCMWLANPCIeFlowQueue *)AppleBCMWLANPCIeFlowQueue::getPacketCount(v17);
        if (result)
        {
          AppleBCMWLANPCIeFlowQueue::requestPendingPackets(v17);
          return (AppleBCMWLANPCIeFlowQueue *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *, void, void))(*(void *)this + 128))(this, 0, 0);
        }
      }
    }
    else
    {
      uint64_t result = (AppleBCMWLANPCIeFlowQueue *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
      if (result)
      {
        (*(void (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
        uint64_t result = (AppleBCMWLANPCIeFlowQueue *)CCLogStream::shouldLog();
        if (result)
        {
          int v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
          return (AppleBCMWLANPCIeFlowQueue *)CCLogStream::logAlert(v19, "[dk] %s@%d:ERROR ! Could not Find flow Queue for FlowID ! \n");
        }
      }
    }
    return result;
  }
  uint64_t v11 = 5;
  while (1)
  {
    uint64_t result = *(AppleBCMWLANPCIeFlowQueue **)(*((void *)this + 11) + 8 * v11);
    if (result)
    {
      uint64_t result = (AppleBCMWLANPCIeFlowQueue *)AppleBCMWLANPCIeFlowQueue::getFlowId(result);
      if (result == a3) {
        break;
      }
    }
    if (++v11 == 21) {
      return result;
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this))
  {
    (*(void (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v25 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this
                                                                                                 + 288))(this);
      CCLogStream::logInfo(v25, "[dk] %s@%d:SetFWRing  FlowID:%u for peer:%u\n", "setFWRing", 1229, a3, v11 - 5);
    }
  }
  AppleBCMWLANPCIeFlowQueue::setFWRing(*(void **)(*((void *)this + 11) + 8 * v11), a2);
  if (a2)
  {
    uint64_t v18 = *(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *, void, void))(*(void *)this + 128);
    return (AppleBCMWLANPCIeFlowQueue *)v18(this, 0, 0);
  }
  else
  {
    uint64_t v20 = *(void *)(*((void *)this + 11) + 8 * v11);
    (*(void (**)(uint64_t))(*(void *)v20 + 144))(v20);
    uint64_t v21 = *((void *)this + 11);
    uint64_t result = *(AppleBCMWLANPCIeFlowQueue **)(v21 + 8 * v11);
    if (result)
    {
      uint64_t result = (AppleBCMWLANPCIeFlowQueue *)(*(uint64_t (**)(AppleBCMWLANPCIeFlowQueue *))(*(void *)result + 16))(result);
      *(void *)(*((void *)this + 11) + 8 * v11) = 0;
      uint64_t v21 = *((void *)this + 11);
    }
    --*(_WORD *)(v21 + 168);
  }
  return result;
}

AppleBCMWLANPCIeFlowQueue *AppleBCMWLANPCIeSkywalkTxSubmissionQueue::clearFlowIdInFlowQ(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *this, int a2)
{
  if ((*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this))
  {
    (*(void (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
      CCLogStream::logInfo(v7, "[dk] %s@%d:%s fFlowQueueCount %u \n", "clearFlowIdInFlowQ", 1250, "clearFlowIdInFlowQ", *(unsigned __int16 *)(*((void *)this + 11) + 168));
    }
  }
  uint64_t v4 = 40;
  while (1)
  {
    uint64_t result = *(AppleBCMWLANPCIeFlowQueue **)(*((void *)this + 11) + v4);
    if (result)
    {
      uint64_t result = (AppleBCMWLANPCIeFlowQueue *)AppleBCMWLANPCIeFlowQueue::getFlowId(result);
      if (result == a2) {
        break;
      }
    }
    v4 += 8;
    if (v4 == 168) {
      return result;
    }
  }
  uint64_t v6 = *(void *)(*((void *)this + 11) + v4);
  return (AppleBCMWLANPCIeFlowQueue *)AppleBCMWLANPCIeFlowQueue::clearFlowId(v6);
}

uint64_t AppleBCMWLANPCIeSkywalkTxSubmissionQueue::collectQueueStats(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *this, char *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  (*(void (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
  uint64_t v10 = 5;
  uint64_t v11 = IO80211Print() + a5;
  (*(void (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
  uint64_t v12 = IO80211Print() + v11;
  (*(void (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
  uint64_t v13 = IO80211Print() + v12;
  absolutetime_to_nanoseconds();
  absolutetime_to_nanoseconds();
  (*(void (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
  uint64_t v14 = IO80211Print() + v13;
  (*(void (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
  uint64_t v15 = IO80211Print() + v14;
  do
  {
    if (*(void *)(*((void *)this + 11) + 8 * v10))
    {
      (*(void (**)(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
      uint64_t v16 = IO80211Print();
      uint64_t v15 = AppleBCMWLANPCIeFlowQueue::collectQueueStats(*(AppleBCMWLANPCIeFlowQueue **)(*((void *)this + 11) + 8 * v10), a2, a3, a4, v16 + v15);
    }
    ++v10;
  }
  while (v10 != 21);
  return AppleBCMWLANSkywalkTxSubmissionQueue::collectQueueStats(this, a2, a3, a4, v15);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkTxSubmissionQueue::collectQueueStats(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *this, char *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  return AppleBCMWLANPCIeSkywalkTxSubmissionQueue::collectQueueStats((AppleBCMWLANPCIeSkywalkTxSubmissionQueue *)((char *)this - 72), a2, a3, a4, a5);
}

uint64_t AppleBCMWLANPCIeSkywalkTxSubmissionQueue::getFlowIDForHash(uint64_t a1, void *a2)
{
  uint64_t v4 = 40;
  while (1)
  {
    BOOL v5 = *(AppleBCMWLANPCIeFlowQueue **)(*(void *)(a1 + 88) + v4);
    if (v5)
    {
      if (*(void *)AppleBCMWLANPCIeFlowQueue::getFlowHash(v5) == *a2) {
        break;
      }
    }
    v4 += 8;
    if (v4 == 168) {
      return 0xFFFFLL;
    }
  }
  uint64_t v7 = *(AppleBCMWLANPCIeFlowQueue **)(*(void *)(a1 + 88) + v4);
  return AppleBCMWLANPCIeFlowQueue::getFlowId(v7);
}

uint64_t AppleBCMWLANPCIeSkywalkTxSubmissionQueue::addPacketToRequeueList(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v3 = *(void *)(v2 + 192);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = *(unsigned int *)(v2 + 200);
  if (v4 > 0x7F) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  *(void *)(v3 + 8 * v4) = a2;
  ++*(_DWORD *)(*(void *)(a1 + 88) + 200);
  return result;
}

BOOL AppleBCMWLANPCIeSkywalkTxSubmissionQueue::isRequeueSupported(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *this)
{
  return *(void *)(*((void *)this + 11) + 192) != 0;
}

uint64_t AppleBCMWLANPCIeSkywalkTxSubmissionQueue::getLogger(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *this)
{
  return **((void **)this + 11);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkTxSubmissionQueue::getLogger(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *this)
{
  return **((void **)this + 2);
}

uint64_t AppleBCMWLANPCIeSkywalkTxSubmissionQueue::requestDequeue(IOUserNetworkPacketQueue *this, void *a2, unsigned int a3)
{
  *((void *)this[1].ivars + 53) = mach_continuous_time();
  return AppleBCMWLANSkywalkTxSubmissionQueue::requestDequeue(this, a2, a3);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkTxSubmissionQueue::requestDequeue(AppleBCMWLANPCIeSkywalkTxSubmissionQueue *this, void *a2, unsigned int a3)
{
  BOOL v5 = (IOUserNetworkPacketQueue *)((char *)this - 40);
  *(void *)(*((void *)this + 6) + 424) = mach_continuous_time();
  return AppleBCMWLANSkywalkTxSubmissionQueue::requestDequeue(v5, a2, a3);
}

void _GLOBAL__sub_I_AppleBCMWLANPCIeSkywalkTxSubmissionQueue_cpp()
{
  kNullRange = 0;
}

OSObject *AppleBCMWLANConfigManager::withDriver(AppleBCMWLANConfigManager *this, AppleBCMWLANCore *a2, AppleBCMWLANChipImage *(*a3)(const OSObject *, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t), int (*a4)(const OSObject *, AppleBCMWLANChipImage *), int (*a5)(const OSObject *, AppleBCMWLANChipImage *), BOOL (*a6)(const OSObject *))
{
  uint64_t v13 = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANConfigManagerMetaClass, &v13)) {
    return 0;
  }
  uint64_t v11 = v13;
  if (v13
    && (((uint64_t (*)(OSObject *, AppleBCMWLANConfigManager *, AppleBCMWLANCore *, AppleBCMWLANChipImage *(*)(const OSObject *, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t), int (*)(const OSObject *, AppleBCMWLANChipImage *), int (*)(const OSObject *, AppleBCMWLANChipImage *)))v13->OSMetaClassBase::__vftable[1].getMetaClass)(v13, this, a2, a3, a4, a5) & 1) == 0)
  {
    ((void (*)(OSObject *))v11->release)(v11);
    return 0;
  }
  return v11;
}

uint64_t AppleBCMWLANConfigManager::init(AppleBCMWLANConfigManager *this, AppleBCMWLANCore *a2, AppleBCMWLANChipImage *(*a3)(const OSObject *, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t), int (*a4)(const OSObject *, AppleBCMWLANChipImage *), int (*a5)(const OSObject *, AppleBCMWLANChipImage *), BOOL (*a6)(const OSObject *))
{
  uint64_t result = IOMallocZeroTyped();
  *((void *)this + 6) = result;
  if (result)
  {
    uint64_t result = OSObject::init((OSObject *)this);
    if (result)
    {
      **((void **)this + 6) = a2;
      *(void *)(*((void *)this + 6) + 16) = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
      uint64_t v13 = *(void *)(*((void *)this + 6) + 16);
      if (!v13)
      {
        ClassNameHelper = (const char *)getClassNameHelper((OSObject *)this);
        IOLog("%s::%s(): Unable to get debug logger\n", ClassNameHelper, "init");
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      *(void *)(*((void *)this + 6) + 24) = AppleBCMWLANCore::getCommander(a2);
      uint64_t v14 = *((void *)this + 6);
      uint64_t v15 = *(void *)(v14 + 24);
      if (v15)
      {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
        AppleBCMWLANConfigManager::initSaneParameters(this);
        *(void *)(*((void *)this + 6) + 264) = AppleBCMWLANCore::getFaultReporter(**((AppleBCMWLANCore ***)this + 6));
        (*(void (**)(void))(**(void **)(*((void *)this + 6) + 264) + 8))(*(void *)(*((void *)this + 6) + 264));
        getClassNameHelper((OSObject *)this);
        CCFaultReporter::registerCallbacks();
        *(unsigned char *)(*((void *)this + 6) + 382) = 1;
        BOOL v16 = IOParseBootArgNumber("wlan.6GHzRoaming.enabled", (void *)(*((void *)this + 6) + 382), 1);
        uint64_t v17 = *((void *)this + 6);
        if (v16)
        {
          uint64_t v18 = *(void *)(v17 + 16);
          if (*(unsigned char *)(v17 + 382))
          {
            if (v18 && CCLogStream::shouldLog())
            {
              int v19 = *(CCLogStream **)(*((void *)this + 6) + 16);
LABEL_25:
              CCLogStream::logAlert(v19, "[dk] %s@%d:Roaming6G : 6GHz Roaming override boot-arg present. f6GHzRoamingEnabledByBootarg : [%d]\n");
LABEL_26:
              if (!a3) {
                return 0;
              }
LABEL_20:
              *(void *)(*((void *)this + 6) + 344) = a3;
              if (a4)
              {
                *(void *)(*((void *)this + 6) + 352) = a4;
                if (a5)
                {
                  *(void *)(*((void *)this + 6) + 360) = a5;
                  if (a6)
                  {
                    *(void *)(*((void *)this + 6) + 368) = a6;
                    return 1;
                  }
                }
              }
              return 0;
            }
          }
          else if (v18 && CCLogStream::shouldLog())
          {
            int v19 = *(CCLogStream **)(*((void *)this + 6) + 16);
            goto LABEL_25;
          }
        }
        else if (*(void *)(v17 + 16) && CCLogStream::shouldLog())
        {
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 16), "[dk] %s@%d:6GHz Roaming override boot-arg not present. f6GHzRoamingEnabledByBootarg : [%d]\n");
          goto LABEL_26;
        }
        if (a3) {
          goto LABEL_20;
        }
        return 0;
      }
      uint64_t result = *(void *)(v14 + 16);
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 16), "[dk] %s@%d: Unable to get Command Manager\n", "init", 502);
          return 0;
        }
      }
    }
  }
  return result;
}

__n128 AppleBCMWLANConfigManager::initSaneParameters(AppleBCMWLANConfigManager *this)
{
  *(_WORD *)(*((void *)this + 6) + 100) = 1;
  *(_WORD *)(*((void *)this + 6) + 102) = 90;
  *(_WORD *)(*((void *)this + 6) + 104) = 30;
  *(_WORD *)(*((void *)this + 6) + 106) = 7;
  *(_WORD *)(*((void *)this + 6) + 108) = 2;
  *(_WORD *)(*((void *)this + 6) + 110) = 0;
  *(_WORD *)(*((void *)this + 6) + 112) = -75;
  *(_WORD *)(*((void *)this + 6) + 114) = 20;
  *(_WORD *)(*((void *)this + 6) + 116) = -75;
  *(_WORD *)(*((void *)this + 6) + 118) = 20;
  uint64_t v1 = *((void *)this + 6);
  __n128 result = *(__n128 *)(v1 + 100);
  *(__n128 *)(v1 + 80) = result;
  *(_DWORD *)(v1 + 96) = *(_DWORD *)(v1 + 116);
  *(_WORD *)(*((void *)this + 6) + 48) = 3;
  *(_WORD *)(*((void *)this + 6) + 50) = 60;
  *(_WORD *)(*((void *)this + 6) + 52) = 0;
  *(_WORD *)(*((void *)this + 6) + 54) = 3;
  *(_DWORD *)(*((void *)this + 6) + 56) = 4000;
  uint64_t v3 = *((void *)this + 6);
  *(void *)(v3 + 36) = *(void *)(v3 + 48);
  *(_DWORD *)(v3 + 44) = *(_DWORD *)(v3 + 56);
  *(_WORD *)(*((void *)this + 6) + 38) = 200;
  *(_DWORD *)(*((void *)this + 6) + 220) = 0;
  *(unsigned char *)(*((void *)this + 6) + 224) = 0;
  *(unsigned char *)(*((void *)this + 6) + 380) = 0;
  *(unsigned char *)(*((void *)this + 6) + 228) = 0;
  *(unsigned char *)(*((void *)this + 6) + 229) = 0;
  *(_DWORD *)(*((void *)this + 6) + 240) &= ~2u;
  *(_DWORD *)(*((void *)this + 6) + 240) &= ~1u;
  *(_DWORD *)(*((void *)this + 6) + 240) &= ~4u;
  *(_DWORD *)(*((void *)this + 6) + 256) = 0;
  *(_DWORD *)(*((void *)this + 6) + 252) = 0;
  *(_DWORD *)(*((void *)this + 6) + 248) = 0;
  return result;
}

uint64_t AppleBCMWLANConfigManager::collectImmediateFaultDataCallback(AppleBCMWLANConfigManager *this, CCFaultReport *a2)
{
  uint64_t v4 = (char *)IOMallocZeroData();
  if (v4)
  {
    BOOL v5 = v4;
    unsigned int v6 = AppleBCMWLANConfigManager::dumpState(this, v4);
    if (v6 >= 0x4000) {
      panic("buffer overflow printed is bigger than buffer size %d >= bufferSize %d \n", v6, 0x4000);
    }
    OSStringPtr v7 = OSString::withCString("ConfigManagerState.txt");
    OSStringPtr v8 = OSString::withCString(v5);
    (*(void (**)(CCFaultReport *, OSStringPtr, OSStringPtr))(*(void *)a2 + 192))(a2, v7, v8);
    IOFreeData();
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANConfigManager::init(AppleBCMWLANConfigManager *this, AppleBCMWLANCore *a2, AppleBCMWLANChipImage *(*a3)(const OSObject *, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t), int (*a4)(const OSObject *, AppleBCMWLANChipImage *), int (*a5)(const OSObject *, AppleBCMWLANChipImage *), BOOL (*a6)(const OSObject *))
{
  return AppleBCMWLANConfigManager::init((AppleBCMWLANConfigManager *)((char *)this - 40), a2, a3, a4, a5, a6);
}

CCFaultReporter *AppleBCMWLANConfigManager::stop(OSObject *this)
{
  __n128 result = *(CCFaultReporter **)(*(void *)&this[1].refcount + 264);
  if (result) {
    return (CCFaultReporter *)CCFaultReporter::unregisterCallbacks(result, this);
  }
  return result;
}

uint64_t AppleBCMWLANConfigManager::freeResources(AppleBCMWLANConfigManager *this)
{
  uint64_t v2 = (void *)*((void *)this + 6);
  uint64_t v3 = v2[33];
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    *(void *)(*((void *)this + 6) + 264) = 0;
    uint64_t v2 = (void *)*((void *)this + 6);
  }
  uint64_t v4 = v2[3];
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
    *(void *)(*((void *)this + 6) + 24) = 0;
    uint64_t v2 = (void *)*((void *)this + 6);
  }
  uint64_t v5 = v2[1];
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    *(void *)(*((void *)this + 6) + 8) = 0;
    uint64_t v2 = (void *)*((void *)this + 6);
  }
  uint64_t v6 = v2[2];
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    *(void *)(*((void *)this + 6) + 16) = 0;
    uint64_t v2 = (void *)*((void *)this + 6);
  }
  uint64_t result = v2[24];
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    *(void *)(*((void *)this + 6) + 192) = 0;
  }
  return result;
}

void AppleBCMWLANConfigManager::free(AppleBCMWLANConfigManager *this)
{
  AppleBCMWLANConfigManager::freeResources(this);
  OSObject::free((OSObject *)this);
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    memset_s(v2, 0x188uLL, 0, 0x188uLL);
    uint64_t v3 = (void *)*((void *)this + 6);
    if (v3)
    {
      IOFree(v3, 0x188uLL);
      *((void *)this + 6) = 0;
    }
  }
}

void non-virtual thunk to'AppleBCMWLANConfigManager::free(AppleBCMWLANConfigManager *this)
{
}

uint64_t AppleBCMWLANConfigManager::dumpState(AppleBCMWLANConfigManager *this, char *a2)
{
  uint64_t v3 = IO80211Print();
  uint64_t v4 = IO80211Print() + v3;
  uint64_t v5 = IO80211Print() + v4;
  uint64_t v6 = IO80211Print() + v5;
  uint64_t v7 = IO80211Print() + v6;
  OSStringPtr v8 = *(const OSString **)(*((void *)this + 6) + 192);
  if (v8) {
    OSString::getCStringNoCopy(v8);
  }
  uint64_t v9 = IO80211Print() + v7;
  uint64_t v10 = IO80211Print() + v9;
  uint64_t v11 = IO80211Print() + v10;
  uint64_t v12 = IO80211Print() + v11;
  uint64_t v13 = IO80211Print() + v12;
  uint64_t v14 = IO80211Print() + v13;
  uint64_t v15 = IO80211Print() + v14;
  uint64_t v16 = IO80211Print() + v15;
  uint64_t v17 = IO80211Print() + v16;
  uint64_t v18 = IO80211Print() + v17;
  uint64_t v19 = IO80211Print() + v18;
  uint64_t v20 = IO80211Print() + v19;
  int v21 = IO80211Print() + v20;
  uint64_t v22 = *((void *)this + 6);
  if (*(unsigned char *)(v22 + 175))
  {
    int v23 = IO80211Print() + v21;
    int v21 = IO80211Print() + v23;
    uint64_t v22 = *((void *)this + 6);
  }
  if (*(unsigned char *)(v22 + 188)) {
    v21 += IO80211Print();
  }
  int v24 = v21 + IO80211Print();
  int v25 = v24 + IO80211Print();
  int v26 = v25 + IO80211Print();
  int v27 = IO80211Print();
  int v28 = v26 + v27 + IO80211Print();
  int v29 = v28 + IO80211Print();
  int v30 = v29 + IO80211Print();
  int v31 = v30 + IO80211Print();
  int v32 = v31 + IO80211Print();
  int v33 = v32 + IO80211Print();
  uint64_t v34 = v33 + IO80211Print();
  if (*(unsigned char *)(*((void *)this + 6) + 204))
  {
    int v35 = v34 + IO80211Print();
    uint64_t v34 = v35 + IO80211Print();
    if (*(unsigned char *)(*((void *)this + 6) + 215))
    {
      uint64_t v36 = 205;
      do
      {
        uint64_t v34 = v34 + IO80211Print();
        unint64_t v37 = v36 - 204;
        ++v36;
      }
      while (v37 < *(unsigned __int8 *)(*((void *)this + 6) + 215));
    }
  }
  return v34;
}

uint64_t AppleBCMWLANConfigManager::gatherParameterData(AppleBCMWLANConfigManager *this, IOService *a2)
{
  v89 = 0;
  v90 = 0;
  int v88 = 0;
  int v87 = 0;
  v85 = 0;
  v86 = 0;
  if (!a2) {
    return 3758097090;
  }
  uint64_t v4 = *((void *)this + 6);
  uint64_t v5 = *(IOService **)(v4 + 8);
  if (v5 != a2)
  {
    if (v5)
    {
      ((void (*)(IOService *))v5->release)(v5);
      uint64_t v4 = *((void *)this + 6);
    }
    *(void *)(v4 + 8) = a2;
    (*(void (**)(void))(**(void **)(*((void *)this + 6) + 8) + 8))(*(void *)(*((void *)this + 6)
                                                                                                  + 8));
    uint64_t v4 = *((void *)this + 6);
  }
  if (*(void *)(v4 + 16))
  {
    int shouldLog = CCLogStream::shouldLog();
    uint64_t v4 = *((void *)this + 6);
    if (shouldLog)
    {
      CCLogStream::logAlert(*(CCLogStream **)(v4 + 16), "[dk] %s@%d: root[%p] fProvisioningRoot[%p]\n", "gatherParameterData", 732, a2, *(const void **)(v4 + 8));
      uint64_t v4 = *((void *)this + 6);
    }
  }
  if (checkAcquireDataPropertyNotEmpty(*(IOService **)(v4 + 8), "region-info", &v90, 0, 1uLL, "IOService"))
  {
    BytesNoCopy = (void *)OSData::getBytesNoCopy(v90);
    if (BytesNoCopy)
    {
      OSStringPtr v8 = (const char *)OSData::getBytesNoCopy(v90);
      BytesNoCopy = OSString::withCString(v8);
    }
    *(void *)(*((void *)this + 6) + 192) = BytesNoCopy;
    if (*(void *)(*((void *)this + 6) + 16) && CCLogStream::shouldLog())
    {
      uint64_t v81 = *((void *)this + 6);
      v82 = *(CCLogStream **)(v81 + 16);
      CStringNoCopy = OSString::getCStringNoCopy(*(const OSString **)(v81 + 192));
      CCLogStream::logNoticeIf(v82, 0x80uLL, "[dk] %s@%d: region info: %s\n", "gatherParameterData", 737, CStringNoCopy);
    }
    if (v90)
    {
      ((void (*)(OSData *))v90->release)(v90);
      v90 = 0;
    }
  }
  if (checkAcquireDataPropertyNotEmpty(*(IOService **)(*((void *)this + 6) + 8), "bcom.ps.default", &v90, 0xCuLL, 1uLL, "IOService"))
  {
    uint64_t v9 = *((void *)this + 6);
    uint64_t v10 = OSData::getBytesNoCopy(v90, 0, 0xCuLL);
    int v11 = v10[2];
    *(void *)(v9 + 48) = *(void *)v10;
    *(_DWORD *)(v9 + 56) = v11;
    if (v90)
    {
      ((void (*)(OSData *))v90->release)(v90);
      v90 = 0;
    }
  }
  int v12 = checkAcquireDataPropertyNotEmpty(*(IOService **)(*((void *)this + 6) + 8), "bcom.ps.realtime", &v90, 0xCuLL, 1uLL, "IOService");
  uint64_t v13 = *((void *)this + 6);
  if (v12)
  {
    uint64_t v14 = OSData::getBytesNoCopy(v90, 0, 0xCuLL);
    int v15 = v14[2];
    *(void *)(v13 + 36) = *(void *)v14;
    *(_DWORD *)(v13 + 44) = v15;
    if (v90)
    {
      ((void (*)(OSData *))v90->release)(v90);
      v90 = 0;
    }
  }
  else
  {
    if (*(void *)(v13 + 16))
    {
      int v17 = CCLogStream::shouldLog();
      uint64_t v13 = *((void *)this + 6);
      if (v17)
      {
        CCLogStream::logAlert(*(CCLogStream **)(v13 + 16), "[dk] %s@%d: no real time PS parameters found using default\n", "gatherParameterData", 750);
        uint64_t v13 = *((void *)this + 6);
      }
    }
    *(void *)(v13 + 36) = *(void *)(v13 + 48);
    *(_DWORD *)(v13 + 44) = *(_DWORD *)(v13 + 56);
  }
  int v18 = checkAcquireDataPropertyNotEmpty(*(IOService **)(*((void *)this + 6) + 8), "bcom.wow.magic-packet", &v90, 0, 1uLL, "IOService");
  uint64_t v19 = *((void *)this + 6);
  uint64_t v20 = *(void *)(v19 + 16);
  if (v18)
  {
    if (v20)
    {
      int v21 = CCLogStream::shouldLog();
      uint64_t v19 = *((void *)this + 6);
      if (v21)
      {
        CCLogStream::logAlert(*(CCLogStream **)(v19 + 16), "[dk] %s@%d: WOMP - true\n", "gatherParameterData", 755);
        uint64_t v19 = *((void *)this + 6);
      }
    }
    *(unsigned char *)(v19 + 32) = 1;
    if (v90)
    {
      ((void (*)(OSData *))v90->release)(v90);
      v90 = 0;
    }
  }
  else
  {
    if (v20)
    {
      int v22 = CCLogStream::shouldLog();
      uint64_t v19 = *((void *)this + 6);
      if (v22)
      {
        CCLogStream::logAlert(*(CCLogStream **)(v19 + 16), "[dk] %s@%d: WOMP - false\n", "gatherParameterData", 759);
        uint64_t v19 = *((void *)this + 6);
      }
    }
    *(unsigned char *)(v19 + 32) = 0;
  }
  int v23 = checkAcquireDataPropertyNotEmpty(*(IOService **)(*((void *)this + 6) + 8), "bcom.roam.default", &v90, 0x14uLL, 1uLL, "IOService");
  uint64_t v24 = *((void *)this + 6);
  if (v23)
  {
    int v25 = OSData::getBytesNoCopy(v90, 0, 0x14uLL);
    int v26 = v25[4];
    *(_OWORD *)(v24 + 100) = *(_OWORD *)v25;
    *(_DWORD *)(v24 + 116) = v26;
    if (v90)
    {
      ((void (*)(OSData *))v90->release)(v90);
      v90 = 0;
    }
  }
  else if (*(void *)(v24 + 16) && CCLogStream::shouldLog())
  {
    CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 16), "[dk] %s@%d: no default roaming parameters found!\n", "gatherParameterData", 767);
  }
  int v27 = checkAcquireDataPropertyNotEmpty(*(IOService **)(*((void *)this + 6) + 8), "bcom.roam.enterprise", &v90, 0x14uLL, 1uLL, "IOService");
  uint64_t v28 = *((void *)this + 6);
  if (v27)
  {
    int v29 = OSData::getBytesNoCopy(v90, 0, 0x14uLL);
    int v30 = v29[4];
    *(_OWORD *)(v28 + 80) = *(_OWORD *)v29;
    *(_DWORD *)(v28 + 96) = v30;
    if (v90)
    {
      ((void (*)(OSData *))v90->release)(v90);
      v90 = 0;
    }
  }
  else
  {
    if (*(void *)(v28 + 16))
    {
      int v31 = CCLogStream::shouldLog();
      uint64_t v28 = *((void *)this + 6);
      if (v31)
      {
        CCLogStream::logAlert(*(CCLogStream **)(v28 + 16), "[dk] %s@%d: no enterprise roaming parameters found using default\n", "gatherParameterData", 774);
        uint64_t v28 = *((void *)this + 6);
      }
    }
    *(_OWORD *)(v28 + 80) = *(_OWORD *)(v28 + 100);
    *(_DWORD *)(v28 + 96) = *(_DWORD *)(v28 + 116);
  }
  int v32 = checkAcquireDataPropertyNotEmpty(*(IOService **)(*((void *)this + 6) + 8), "wlan.externallypowered", &v90, 0, 1uLL, "IOService");
  uint64_t v33 = *((void *)this + 6);
  if (v32)
  {
    *(unsigned char *)(v33 + 239) = 1;
    if (v90)
    {
      ((void (*)(OSData *))v90->release)(v90);
      v90 = 0;
    }
  }
  else
  {
    *(unsigned char *)(v33 + 239) = 0;
  }
  int v34 = checkAcquireDataPropertyNotEmpty(*(IOService **)(*((void *)this + 6) + 8), "wlan.chip.power.dutycycle", &v90, 0x30uLL, 1uLL, "IOService");
  uint64_t v35 = *((void *)this + 6);
  if (v34)
  {
    uint64_t v36 = OSData::getBytesNoCopy(v90, 0, 0x30uLL);
    long long v38 = v36[1];
    long long v37 = v36[2];
    *(_OWORD *)(v35 + 272) = *v36;
    *(_OWORD *)(v35 + 288) = v38;
    *(_OWORD *)(v35 + 304) = v37;
    *(unsigned char *)(*((void *)this + 6) + 320) = 1;
    if (v90)
    {
      ((void (*)(OSData *))v90->release)(v90);
      v90 = 0;
    }
  }
  else
  {
    if (*(void *)(v35 + 16))
    {
      int v39 = CCLogStream::shouldLog();
      uint64_t v35 = *((void *)this + 6);
      if (v39)
      {
        CCLogStream::logAlert(*(CCLogStream **)(v35 + 16), "[dk] %s@%d:Using default power to duty cycle table.\n", "gatherParameterData", 791);
        uint64_t v35 = *((void *)this + 6);
      }
    }
    long long v40 = unk_1003A416C;
    *(_OWORD *)(v35 + 272) = kWlanPwrDutyCyclePreset;
    *(_OWORD *)(v35 + 288) = v40;
    *(_OWORD *)(v35 + 304) = xmmword_1003A417C;
    *(unsigned char *)(*((void *)this + 6) + 320) = 0;
  }
  *(void *)(*((void *)this + 6) + 140) = 0;
  int v41 = checkAcquireDataPropertyNotEmpty(*(IOService **)(*((void *)this + 6) + 8), "wlan.awdl.params", &v90, 8uLL, 1uLL, "IOService");
  uint64_t v42 = *((void *)this + 6);
  if (v41)
  {
    *(void *)(v42 + 140) = *(void *)OSData::getBytesNoCopy(v90, 0, 8uLL);
    IO80211HexdumpIf();
    *(unsigned char *)(*((void *)this + 6) + 167) = (*(unsigned char *)(*((void *)this + 6) + 140) & 2) != 0;
    *(unsigned char *)(*((void *)this + 6) + 166) = 1;
    if (v90)
    {
      ((void (*)(OSData *))v90->release)(v90);
      v90 = 0;
    }
  }
  else if (*(void *)(v42 + 16) && CCLogStream::shouldLog())
  {
    CCLogStream::logNoticeIf(*(CCLogStream **)(*((void *)this + 6) + 16), 0x400uLL, "[dk] %s@%d: AWDL is not supported.\n", "gatherParameterData", 804);
  }
  int v87 = 0;
  if (checkAcquireDataPropertyNotEmpty(*(IOService **)(*((void *)this + 6) + 8), "wlan.awdlht20only", &v90, 4uLL, 1uLL, "IOService"))
  {
    int v87 = *(_DWORD *)OSData::getBytesNoCopy(v90, 0, 4uLL);
    IO80211HexdumpIf();
    if (v87) {
      *(_WORD *)(*((void *)this + 6) + 140) |= 0x10u;
    }
    if (v90)
    {
      ((void (*)(OSData *))v90->release)(v90);
      v90 = 0;
    }
  }
  else if (*(void *)(*((void *)this + 6) + 16) && CCLogStream::shouldLog())
  {
    CCLogStream::logNoticeIf(*(CCLogStream **)(*((void *)this + 6) + 16), 0x400uLL, "[dk] %s@%d: AWDL HT20 only is not specified.\n", "gatherParameterData", 817);
  }
  int v43 = checkAcquireDataPropertyNotEmpty(*(IOService **)(*((void *)this + 6) + 8), "wlan.dfsproxy.enabled", &v90, 0, 1uLL, "IOService");
  uint64_t v44 = *((void *)this + 6);
  if (v43)
  {
    *(unsigned char *)(v44 + 321) = 1;
    if (v90)
    {
      ((void (*)(OSData *))v90->release)(v90);
      v90 = 0;
    }
  }
  else
  {
    *(unsigned char *)(v44 + 321) = 0;
    if (*(void *)(*((void *)this + 6) + 16) && CCLogStream::shouldLog()) {
      CCLogStream::logNoticeIf(*(CCLogStream **)(*((void *)this + 6) + 16), 0x400uLL, "[dk] %s@%d: DFS Proxy is not supported.\n", "gatherParameterData", 825);
    }
  }
  int v45 = checkAcquireDataPropertyNotEmpty(*(IOService **)(*((void *)this + 6) + 8), "bcom.oscar.profilestates", &v90, 0xAuLL, 1uLL, "IOService");
  uint64_t v46 = *((void *)this + 6);
  if (v45)
  {
    uint64_t v47 = OSData::getBytesNoCopy(v90, 0, 0xAuLL);
    __int16 v48 = v47[4];
    *(void *)(v46 + 148) = *(void *)v47;
    *(_WORD *)(v46 + 156) = v48;
    *(unsigned char *)(*((void *)this + 6) + 175) = 1;
    if (v90)
    {
      ((void (*)(OSData *))v90->release)(v90);
      v90 = 0;
    }
  }
  else
  {
    *(unsigned char *)(v46 + 175) = 0;
  }
  int v49 = checkAcquireDataPropertyNotEmpty(*(IOService **)(*((void *)this + 6) + 8), "wlan.dfrts", &v90, 8uLL, 1uLL, "IOService");
  uint64_t v50 = *((void *)this + 6);
  if (v49)
  {
    *(void *)(v50 + 158) = *(void *)OSData::getBytesNoCopy(v90, 0, 8uLL);
    *(unsigned char *)(*((void *)this + 6) + 188) = 1;
    if (v90)
    {
      ((void (*)(OSData *))v90->release)(v90);
      v90 = 0;
    }
  }
  else
  {
    *(unsigned char *)(v50 + 188) = 0;
  }
  *(unsigned char *)(*((void *)this + 6) + 224) = checkPropertyExists(*(IOService **)(*((void *)this + 6) + 8), "wlan.mimo_ps.enabled", 1uLL, "IOService");
  *(unsigned char *)(*((void *)this + 6) + 228) = checkPropertyExists(*(IOService **)(*((void *)this + 6) + 8), "wlan.ocl.enabled", 1uLL, "IOService");
  int v51 = checkAcquireDataPropertyNotEmpty(*(IOService **)(*((void *)this + 6) + 8), "wlan.ocl_awdl.enabled", &v90, 0, 1uLL, "IOService");
  uint64_t v52 = *((void *)this + 6);
  if (v51)
  {
    *(unsigned char *)(v52 + 229) = 1;
    if (v90)
    {
      ((void (*)(OSData *))v90->release)(v90);
      v90 = 0;
    }
  }
  else
  {
    *(unsigned char *)(v52 + 229) = 0;
  }
  int v53 = checkAcquireDataPropertyNotEmpty(*(IOService **)(*((void *)this + 6) + 8), "wlan.ebt.enabled", &v90, 0, 1uLL, "IOService");
  uint64_t v54 = *((void *)this + 6);
  if (v53)
  {
    if (*(void *)v54 && (uint64_t v55 = AppleBCMWLANCore::getBus(*(AppleBCMWLANCore **)v54), v54 = *((void *)this + 6), v55))
    {
      uint64_t Bus = AppleBCMWLANCore::getBus(*(AppleBCMWLANCore **)v54);
      *(unsigned char *)(*((void *)this + 6) + 237) = (*(unsigned int (**)(uint64_t))(*(void *)Bus + 368))(Bus) != 4377;
    }
    else
    {
      *(unsigned char *)(v54 + 237) = 1;
    }
    if (v90)
    {
      ((void (*)(OSData *))v90->release)(v90);
      v90 = 0;
    }
  }
  else
  {
    *(unsigned char *)(v54 + 237) = 0;
  }
  int v57 = checkAcquireDataPropertyNotEmpty(*(IOService **)(*((void *)this + 6) + 8), "wlan.dignap.enabled", &v90, 0, 1uLL, "IOService");
  uint64_t v58 = *((void *)this + 6);
  if (v57)
  {
    *(unsigned char *)(v58 + 238) = 1;
    if (v90)
    {
      ((void (*)(OSData *))v90->release)(v90);
      v90 = 0;
    }
  }
  else
  {
    *(unsigned char *)(v58 + 238) = 0;
  }
  int v59 = checkAcquireDataPropertyNotEmpty(*(IOService **)(*((void *)this + 6) + 8), "wlan.ops.enabled", &v90, 0, 1uLL, "IOService");
  uint64_t v60 = *((void *)this + 6);
  if (v59)
  {
    *(unsigned char *)(v60 + 236) = 1;
    if (v90)
    {
      ((void (*)(OSData *))v90->release)(v90);
      v90 = 0;
    }
  }
  else
  {
    *(unsigned char *)(v60 + 236) = 0;
  }
  AppleBCMWLANConfigManager::gatherKvrParameterData(this, *(IOService **)(*((void *)this + 6) + 8), 1);
  AppleBCMWLANConfigManager::readEnhancedRoamingProperty(this, *(IOService **)(*((void *)this + 6) + 8));
  int v61 = checkAcquireDataPropertyNotEmpty(*(IOService **)(*((void *)this + 6) + 8), "wlan.txFailEvent.enabled", &v90, 0, 1uLL, "IOService");
  uint64_t v62 = *((void *)this + 6);
  if (v61)
  {
    *(unsigned char *)(v62 + 244) = 1;
    v84 = 0;
    if (checkAcquireDataPropertyNotEmpty(*(IOService **)(*((void *)this + 6) + 8), "wlan.txFailEvent.params", &v84, 0xCuLL, 1uLL, "IOService"))
    {
      uint64_t v63 = *((void *)this + 6);
      int v64 = OSData::getBytesNoCopy(v84, 0, 0xCuLL);
      int v65 = v64[2];
      *(void *)(v63 + 248) = *(void *)v64;
      *(_DWORD *)(v63 + 256) = v65;
      if (v84)
      {
        ((void (*)(OSData *))v84->release)(v84);
        v84 = 0;
      }
    }
    if (v90)
    {
      ((void (*)(OSData *))v90->release)(v90);
      v90 = 0;
    }
  }
  else
  {
    *(unsigned char *)(v62 + 244) = 0;
  }
  int v66 = checkAcquireDataPropertyNotEmpty(*(IOService **)(*((void *)this + 6) + 8), "wlan.ranging.params", &v90, 4uLL, 1uLL, "IOService");
  uint64_t v67 = *((void *)this + 6);
  if (v66)
  {
    *(_DWORD *)(v67 + 232) = *(_DWORD *)OSData::getBytesNoCopy(v90, 0, 4uLL);
    if (v90)
    {
      ((void (*)(OSData *))v90->release)(v90);
      v90 = 0;
    }
  }
  else
  {
    *(_WORD *)(v67 + 232) = 10;
    *(_WORD *)(*((void *)this + 6) + 234) |= 1u;
  }
  v86 = 0;
  if (acquireProperty<OSBoolean>(*(IOService **)(*((void *)this + 6) + 8), "wlan.vo.blockack", &v86, 1uLL, "IOService"))
  {
    int v68 = v86;
    BOOL v69 = v86 && v86 == kOSBooleanTrue;
    BOOL v70 = v69;
    *(unsigned char *)(*((void *)this + 6) + 189) = v70;
    if (v68)
    {
      ((void (*)(OSMetaClassBase *))v68->release)(v68);
      v86 = 0;
    }
  }
  AppleBCMWLANCore::fetchAndUpdateRingParameters(**((AppleBCMWLANCore ***)this + 6));
  v85 = 0;
  if (acquireProperty<OSBoolean>(*(IOService **)(*((void *)this + 6) + 8), "wlan.gpio-tx-envelope-ind", &v85, 1uLL, "IOService"))
  {
    int v71 = v85;
    BOOL v72 = v85 && v85 == kOSBooleanTrue;
    BOOL v73 = v72;
    *(unsigned char *)(*((void *)this + 6) + 323) = v73;
    if (v71)
    {
      ((void (*)(OSMetaClassBase *))v71->release)(v71);
      v85 = 0;
    }
  }
  *(unsigned char *)(*((void *)this + 6) + 324) = 1;
  int v88 = 0;
  if (IOParseBootArgNumber("wlan.lowlatency.enable", &v88, 4)) {
    *(unsigned char *)(*((void *)this + 6) + 324) = v88 != 0;
  }
  v89 = 0;
  *(unsigned char *)(*((void *)this + 6) + 325) = 0;
  if (acquireProperty<OSBoolean>(*(IOService **)(*((void *)this + 6) + 8), "wlan.adaptiveroaming.enabled", &v89, 1uLL, "IOService"))
  {
    unsigned int v74 = v89;
    if (v89 == kOSBooleanTrue) {
      *(unsigned char *)(*((void *)this + 6) + 325) = 1;
    }
    if (v74)
    {
      ((void (*)(OSMetaClassBase *))v74->release)(v74);
      v89 = 0;
    }
  }
  if (checkPropertyExists(*(IOService **)(*((void *)this + 6) + 8), "wlan.lpas-allowed", 1uLL, "IOService"))*(unsigned char *)(*((void *)this + 6) + 334) = 1; {
  BOOL v75 = IOParseBootArgNumber("wlan.lpas-allowed", (void *)(*((void *)this + 6) + 334), 1);
  }
  uint64_t v76 = *((void *)this + 6);
  if (v75)
  {
    if (*(void *)(v76 + 16))
    {
      int v77 = CCLogStream::shouldLog();
      uint64_t v76 = *((void *)this + 6);
      if (v77)
      {
        CCLogStream::logAlert(*(CCLogStream **)(v76 + 16), "[dk] %s@%d: Found '%s' boot-arg, forced[%u]\n", "gatherParameterData", 969, "wlan.lpas-allowed", *(unsigned __int8 *)(v76 + 334));
        uint64_t v76 = *((void *)this + 6);
      }
    }
  }
  if (checkPropertyExists(*(IOService **)(v76 + 8), "wlan.aoac-allowed", 1uLL, "IOService")) {
    *(unsigned char *)(*((void *)this + 6) + 335) = 1;
  }
  if (IOParseBootArgNumber("wlan.aoac-allowed", (void *)(*((void *)this + 6) + 335), 1)
    && *(void *)(*((void *)this + 6) + 16)
    && CCLogStream::shouldLog())
  {
    CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 16), "[dk] %s@%d: Found '%s' boot-arg, forced[%u]\n", "gatherParameterData", 976, "wlan.aoac-allowed", *(unsigned __int8 *)(*((void *)this + 6) + 335));
  }
  AppleBCMWLANConfigManager::populatePlatformProperties(this);
  uint64_t v78 = *((void *)this + 6);
  if (*(void *)(v78 + 16))
  {
    int v79 = CCLogStream::shouldLog();
    uint64_t v78 = *((void *)this + 6);
    if (v79)
    {
      CCLogStream::logAlert(*(CCLogStream **)(v78 + 16), "[dk] %s@%d: LPAS allowed[%u], AOAC allowed[%u]\n", "gatherParameterData", 984, *(unsigned __int8 *)(v78 + 334), *(unsigned __int8 *)(v78 + 335));
      uint64_t v78 = *((void *)this + 6);
    }
  }
  __int16 v80 = *(CCLogStream **)(v78 + 16);
  if (v80)
  {
    if (CCLogStream::shouldLog(v80, 0x80uLL)) {
      AppleBCMWLANConfigManager::dumpState(this, 0);
    }
  }
  IOParseBootArgNumber("wlan.debug.isNewDevice", (void *)(*((void *)this + 6) + 381), 1);
  return 0;
}

uint64_t AppleBCMWLANConfigManager::gatherKvrParameterData(AppleBCMWLANConfigManager *this, IOService *a2, int a3)
{
  if (!a2) {
    return 3758097090;
  }
  uint64_t v4 = a2;
  uint64_t v6 = *((void *)this + 6);
  uint64_t v7 = *(IOService **)(v6 + 8);
  if (v7 != a2)
  {
    if (v7)
    {
      ((void (*)(IOService *))v7->release)(v7);
      uint64_t v6 = *((void *)this + 6);
    }
    *(void *)(v6 + 8) = v4;
    (*(void (**)(void))(**(void **)(*((void *)this + 6) + 8) + 8))(*(void *)(*((void *)this + 6)
                                                                                                  + 8));
    uint64_t v4 = *(IOService **)(*((void *)this + 6) + 8);
  }
  int v23 = 0;
  int v8 = checkAcquireDataPropertyNotEmpty(v4, "wlan.enterprise.params", &v23, 4uLL, 1uLL, "IOService");
  uint64_t v9 = *((void *)this + 6);
  if (v8)
  {
    *(_DWORD *)(v9 + 240) = *(_DWORD *)OSData::getBytesNoCopy(v23, 0, 4uLL);
    if (*(void *)(*((void *)this + 6) + 16) && CCLogStream::shouldLog()) {
      CCLogStream::logNotice(*(CCLogStream **)(*((void *)this + 6) + 16), "[dk] %s@%d:EnterpriseEnhancementParams: Successfully read params : 0x%x\n", "gatherKvrParameterData", 1020, *(_DWORD *)(*((void *)this + 6) + 240));
    }
    if (v23)
    {
      ((void (*)(OSData *))v23->release)(v23);
      int v23 = 0;
    }
  }
  else
  {
    if (*(void *)(v9 + 16))
    {
      int shouldLog = CCLogStream::shouldLog();
      uint64_t v9 = *((void *)this + 6);
      if (shouldLog)
      {
        CCLogStream::logNotice(*(CCLogStream **)(v9 + 16), "[dk] %s@%d:EnterpriseEnhancementParams: Failed to read params. Defaulting to OFF \n", "gatherKvrParameterData", 1023);
        uint64_t v9 = *((void *)this + 6);
      }
    }
    *(_DWORD *)(v9 + 240) &= ~1u;
    *(_DWORD *)(*((void *)this + 6) + 240) &= ~2u;
    *(_DWORD *)(*((void *)this + 6) + 240) &= ~4u;
  }
  unsigned __int8 v22 = 0;
  if (IOParseBootArgNumber("wlan.debug.EEparams.enhancedDisAssociationInfo", &v22, 1)) {
    *(_DWORD *)(*((void *)this + 6) + 240) = *(_DWORD *)(*((void *)this + 6) + 240) & 0xFFFFFFFE | v22;
  }
  if (IOParseBootArgNumber("wlan.debug.EEparams.beaconReporting", &v22, 1)) {
    *(_DWORD *)(*((void *)this + 6) + 240) = *(_DWORD *)(*((void *)this + 6) + 240) & 0xFFFFFFFD | (2 * v22);
  }
  if (IOParseBootArgNumber("wlan.debug.EEparams.osVersionReporting", &v22, 1)) {
    *(_DWORD *)(*((void *)this + 6) + 240) = *(_DWORD *)(*((void *)this + 6) + 240) & 0xFFFFFFFB | (4 * v22);
  }
  uint64_t v12 = *((void *)this + 6);
  if (*(void *)(v12 + 16))
  {
    int v13 = CCLogStream::shouldLog();
    uint64_t v12 = *((void *)this + 6);
    if (v13)
    {
      CCLogStream::logAlert(*(CCLogStream **)(v12 + 16), "[dk] %s@%d:EnterpriseEnhancementParams: enhancedDisAssociationInfo:%u beaconReporting:%u osVersionReporting:%u!\n", "gatherKvrParameterData", 1055, *(_DWORD *)(v12 + 240) & 1, (*(_DWORD *)(v12 + 240) >> 1) & 1, (*(_DWORD *)(v12 + 240) >> 2) & 1);
      uint64_t v12 = *((void *)this + 6);
    }
  }
  if (checkAcquireDataPropertyNotEmpty(*(IOService **)(v12 + 8), "wlan.fast_enterprise_nw.enabled", &v23, 0, 1uLL, "IOService"))
  {
    if (a3)
    {
      uint64_t v14 = *((void *)this + 6);
      if (*(void *)(v14 + 16))
      {
        int v15 = CCLogStream::shouldLog();
        uint64_t v14 = *((void *)this + 6);
        if (v15)
        {
          CCLogStream::logNotice(*(CCLogStream **)(v14 + 16), "[dk] %s@%d:FastEnterpriseNwSupportEnabled is enabled \n", "gatherKvrParameterData", 1060);
          uint64_t v14 = *((void *)this + 6);
        }
      }
      *(unsigned char *)(v14 + 225) = 1;
    }
    if (v23)
    {
      ((void (*)(OSData *))v23->release)(v23);
      int v23 = 0;
    }
  }
  else
  {
    uint64_t v16 = *((void *)this + 6);
    if (*(void *)(v16 + 16))
    {
      int v17 = CCLogStream::shouldLog();
      uint64_t v16 = *((void *)this + 6);
      if (v17)
      {
        CCLogStream::logNotice(*(CCLogStream **)(v16 + 16), "[dk] %s@%d:FastEnterpriseNwSupportEnabled is disabled \n", "gatherKvrParameterData", 1065);
        uint64_t v16 = *((void *)this + 6);
      }
    }
    *(unsigned char *)(v16 + 225) = 0;
  }
  *(unsigned char *)(*((void *)this + 6) + 226) = AppleBCMWLANConfigManager::getPlatformPropertyBool(this, "wlan.voice_enterprise_nw.enabled", 1) & a3;
  uint64_t v18 = *((void *)this + 6);
  uint64_t v19 = *(void *)(v18 + 16);
  if (*(unsigned char *)(v18 + 226))
  {
    if (v19 && CCLogStream::shouldLog()) {
      CCLogStream::logNotice(*(CCLogStream **)(*((void *)this + 6) + 16), "[dk] %s@%d:VoiceEnterpriseNwSupportEnabled is True \n");
    }
  }
  else if (v19 && CCLogStream::shouldLog())
  {
    CCLogStream::logNotice(*(CCLogStream **)(*((void *)this + 6) + 16), "[dk] %s@%d:VoiceEnterpriseNwSupportEnabled is False \n");
  }
  *(unsigned char *)(*((void *)this + 6) + 227) = AppleBCMWLANConfigManager::getPlatformPropertyBool(this, "wlan.wnm.enabled", 1) & a3;
  uint64_t v20 = *((void *)this + 6);
  uint64_t v21 = *(void *)(v20 + 16);
  if (*(unsigned char *)(v20 + 227))
  {
    if (v21)
    {
      if (CCLogStream::shouldLog()) {
        CCLogStream::logNotice(*(CCLogStream **)(*((void *)this + 6) + 16), "[dk] %s@%d:fWnmSupportEnabled is True \n");
      }
    }
  }
  else if (v21 && CCLogStream::shouldLog())
  {
    CCLogStream::logNotice(*(CCLogStream **)(*((void *)this + 6) + 16), "[dk] %s@%d:fWnmSupportEnabled is False \n");
  }
  return 0;
}

uint64_t AppleBCMWLANConfigManager::readEnhancedRoamingProperty(AppleBCMWLANConfigManager *this, IOService *a2)
{
  if (!a2) {
    return 3758097090;
  }
  uint64_t v4 = *((void *)this + 6);
  uint64_t v5 = *(IOService **)(v4 + 8);
  if (v5 != a2)
  {
    if (v5)
    {
      ((void (*)(IOService *))v5->release)(v5);
      uint64_t v4 = *((void *)this + 6);
    }
    *(void *)(v4 + 8) = a2;
    (*(void (**)(void))(**(void **)(*((void *)this + 6) + 8) + 8))(*(void *)(*((void *)this + 6)
                                                                                                  + 8));
  }
  *(unsigned char *)(*((void *)this + 6) + 170) = AppleBCMWLANConfigManager::getPlatformPropertyBool(this, "bcom.roam.enabledenhanced", 1);
  uint64_t v6 = *((void *)this + 6);
  uint64_t result = *(void *)(v6 + 16);
  if (*(unsigned char *)(v6 + 170))
  {
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        CCLogStream::logNotice(*(CCLogStream **)(*((void *)this + 6) + 16), "[dk] %s@%d:Link loss suppression (fEnabledEnhancedRoaming) is True \n");
        return 0;
      }
    }
  }
  else if (result)
  {
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      CCLogStream::logNotice(*(CCLogStream **)(*((void *)this + 6) + 16), "[dk] %s@%d:Link loss suppression (fEnabledEnhancedRoaming) is False \n");
      return 0;
    }
  }
  return result;
}

uint64_t acquireProperty<OSBoolean>(IOService *a1, const char *a2, OSMetaClassBase **a3, unint64_t a4, const char *a5)
{
  anObject = 0;
  uint64_t result = acquirePropertyWithString(a1, a2, (OSContainer **)&anObject, a4, a5);
  if (result)
  {
    uint64_t v7 = OSMetaClassBase::safeMetaCast(anObject, gOSBooleanMetaClass);
    if (v7)
    {
      *a3 = v7;
      return 1;
    }
    else
    {
      uint64_t result = (uint64_t)anObject;
      if (anObject)
      {
        ((void (*)(OSMetaClassBase *))anObject->release)(anObject);
        return 0;
      }
    }
  }
  return result;
}

OSMetaClassBase *AppleBCMWLANConfigManager::populatePlatformProperties(AppleBCMWLANConfigManager *this)
{
  uint64_t v46 = 0;
  *(unsigned char *)(*((void *)this + 6) + 172) = AppleBCMWLANConfigManager::getPlatformPropertyBool(this, "wlan.autocountry.enabled", 1);
  *(unsigned char *)(*((void *)this + 6) + 173) = AppleBCMWLANConfigManager::getPlatformPropertyBool(this, "wlan.11d.power.constraint.ignored", 0);
  *(unsigned char *)(*((void *)this + 6) + 174) = AppleBCMWLANConfigManager::getPlatformPropertyBool(this, "wlan.enhancedlocale.enabled", 0);
  *(unsigned char *)(*((void *)this + 6) + 170) = AppleBCMWLANConfigManager::getPlatformPropertyBool(this, "bcom.roam.enabledenhanced", 1);
  *(unsigned char *)(*((void *)this + 6) + 171) = AppleBCMWLANConfigManager::getPlatformPropertyBool(this, "wlan.tethering.enabled", 0);
  int v2 = checkAcquireDataPropertyNotEmpty(*(IOService **)(*((void *)this + 6) + 8), "bcom.ap.maxstas", &v46, 4uLL, 1uLL, "IOService");
  uint64_t v3 = *((void *)this + 6);
  if (v2)
  {
    *(_DWORD *)(v3 + 180) = *(_DWORD *)OSData::getBytesNoCopy(v46, 0, 4uLL);
    if (v46)
    {
      ((void (*)(OSData *))v46->release)(v46);
      uint64_t v46 = 0;
    }
  }
  else
  {
    *(_DWORD *)(v3 + 180) = 5;
  }
  int v4 = checkAcquireDataPropertyNotEmpty(*(IOService **)(*((void *)this + 6) + 8), "wlan.listen.interval", &v46, 4uLL, 1uLL, "IOService");
  uint64_t v5 = *((void *)this + 6);
  if (v4)
  {
    *(_DWORD *)(v5 + 184) = *(_DWORD *)OSData::getBytesNoCopy(v46, 0, 4uLL);
    if (v46)
    {
      ((void (*)(OSData *))v46->release)(v46);
      uint64_t v46 = 0;
    }
  }
  else
  {
    *(_DWORD *)(v5 + 184) = 20;
  }
  *(unsigned char *)(*((void *)this + 6) + 176) = 0;
  BOOL v6 = IOParseBootArgNumber("wlan.autoCountry", (void *)(*((void *)this + 6) + 172), 1);
  uint64_t v7 = *((void *)this + 6);
  if (v6)
  {
    if (*(void *)(v7 + 16))
    {
      int shouldLog = CCLogStream::shouldLog();
      uint64_t v7 = *((void *)this + 6);
      if (shouldLog)
      {
        CCLogStream::logAlert(*(CCLogStream **)(v7 + 16), "[dk] %s@%d:%s() boot-args overrides ivars->fEnabledAutoCountry to %d\n", "populatePlatformProperties", 1207, "populatePlatformProperties", *(unsigned __int8 *)(v7 + 172));
        uint64_t v7 = *((void *)this + 6);
      }
    }
  }
  BOOL v9 = IOParseBootArgNumber("wlan.enhancedlocale", (void *)(v7 + 174), 1);
  uint64_t v10 = *((void *)this + 6);
  if (v9)
  {
    if (*(void *)(v10 + 16))
    {
      int v11 = CCLogStream::shouldLog();
      uint64_t v10 = *((void *)this + 6);
      if (v11)
      {
        CCLogStream::logAlert(*(CCLogStream **)(v10 + 16), "[dk] %s@%d:%s() boot-args overrides ivars->fEnabledEnhancedLocale to %d\n", "populatePlatformProperties", 1212, "populatePlatformProperties", *(unsigned __int8 *)(v10 + 174));
        uint64_t v10 = *((void *)this + 6);
      }
    }
  }
  *(unsigned char *)(v10 + 190) = 1;
  BOOL v12 = IOParseBootArgNumber("wlan.tcpka", (void *)(*((void *)this + 6) + 190), 1);
  uint64_t v13 = *((void *)this + 6);
  if (v12)
  {
    if (*(void *)(v13 + 16))
    {
      int v14 = CCLogStream::shouldLog();
      uint64_t v13 = *((void *)this + 6);
      if (v14)
      {
        CCLogStream::logAlert(*(CCLogStream **)(v13 + 16), "[dk] %s@%d:%s() boot-args overrides ivars->fEnabledTCPKeepAlive to %d\n", "populatePlatformProperties", 1219, "populatePlatformProperties", *(unsigned __int8 *)(v13 + 190));
        uint64_t v13 = *((void *)this + 6);
      }
    }
  }
  int v15 = checkAcquireDataPropertyNotEmpty(*(IOService **)(v13 + 8), "wlan.enhancedTrgDisc", &v46, 4uLL, 1uLL, "IOService");
  uint64_t v16 = *((void *)this + 6);
  if (v15)
  {
    *(_DWORD *)(v16 + 200) = *(_DWORD *)OSData::getBytesNoCopy(v46, 0, 4uLL);
    if (v46)
    {
      ((void (*)(OSData *))v46->release)(v46);
      uint64_t v46 = 0;
    }
  }
  else
  {
    *(_DWORD *)(v16 + 200) = 1;
  }
  *(unsigned char *)(*((void *)this + 6) + 230) = AppleBCMWLANConfigManager::getPlatformPropertyBool(this, "wlan.autojoin_ps.enabled", 0);
  uint64_t v17 = *((void *)this + 6);
  *(void *)(v17 + 204) = 0;
  *(void *)(v17 + 212) = 0;
  if (checkAcquireDataPropertyNotEmpty(*(IOService **)(*((void *)this + 6) + 8), "wlan.tx-power-cap-ctrl", &v46, 0, 1uLL, "IOService"))
  {
    if (OSData::getBytesNoCopy(v46, 0, 0xBuLL))
    {
      BytesNoCopy = OSData::getBytesNoCopy(v46, 0, 0xBuLL);
      *(unsigned char *)(*((void *)this + 6) + 204) = *BytesNoCopy;
      *(_DWORD *)(*((void *)this + 6) + 216) = 3;
      *(unsigned char *)(*((void *)this + 6) + 215) = 10;
      uint64_t v19 = *((void *)this + 6);
      if (*(unsigned char *)(v19 + 215))
      {
        unint64_t v20 = 0;
        do
        {
          *(unsigned char *)(v19 + v20 + 205) = BytesNoCopy[v20 + 1];
          ++v20;
          uint64_t v19 = *((void *)this + 6);
        }
        while (v20 < *(unsigned __int8 *)(v19 + 215));
      }
    }
    else if (OSData::getBytesNoCopy(v46, 0, 6uLL))
    {
      uint64_t v21 = OSData::getBytesNoCopy(v46, 0, 6uLL);
      *(unsigned char *)(*((void *)this + 6) + 204) = *v21;
      *(_DWORD *)(*((void *)this + 6) + 216) = 2;
      *(unsigned char *)(*((void *)this + 6) + 215) = 5;
      uint64_t v22 = *((void *)this + 6);
      if (*(unsigned char *)(v22 + 215))
      {
        unint64_t v23 = 0;
        do
        {
          *(unsigned char *)(v22 + v23 + 205) = v21[v23 + 1];
          ++v23;
          uint64_t v22 = *((void *)this + 6);
        }
        while (v23 < *(unsigned __int8 *)(v22 + 215));
      }
    }
    else if (OSData::getBytesNoCopy(v46, 0, 2uLL))
    {
      uint64_t v24 = OSData::getBytesNoCopy(v46, 0, 2uLL);
      *(unsigned char *)(*((void *)this + 6) + 204) = *v24;
      *(_DWORD *)(*((void *)this + 6) + 216) = 4;
      *(unsigned char *)(*((void *)this + 6) + 205) = v24[1];
      *(unsigned char *)(*((void *)this + 6) + 215) = 1;
    }
    else if (*(void *)(*((void *)this + 6) + 16) && CCLogStream::shouldLog())
    {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 16), "[dk] %s@%d:TxPowerCapCtrl invalid ver\n", "populatePlatformProperties", 1261);
    }
    if (v46)
    {
      ((void (*)(OSData *))v46->release)(v46);
      uint64_t v46 = 0;
    }
  }
  uint64_t v25 = *((void *)this + 6);
  if (!*(unsigned char *)(v25 + 204))
  {
    if (*(void *)(v25 + 16))
    {
      int v26 = CCLogStream::shouldLog();
      uint64_t v25 = *((void *)this + 6);
      if (v26)
      {
        CCLogStream::logNoticeIf(*(CCLogStream **)(v25 + 16), 0x80uLL, "[dk] %s@%d: No valid TX cap power control configuration.\n", "populatePlatformProperties", 1266);
        uint64_t v25 = *((void *)this + 6);
      }
    }
    *(void *)(v25 + 212) = 0;
    *(void *)(v25 + 204) = 0;
    uint64_t v25 = *((void *)this + 6);
  }
  int v45 = 0;
  if (acquireProperty<OSNumber>(*(IOService **)(v25 + 8), "wlan.psbw.enabled", &v45, 1uLL, "IOService"))
  {
    int v27 = v45;
    if (v45)
    {
      *(unsigned char *)(*((void *)this + 6) + 322) = 1;
      ((void (*)(OSMetaClassBase *))v27->release)(v27);
      int v45 = 0;
    }
  }
  else
  {
    *(unsigned char *)(*((void *)this + 6) + 322) = 0;
  }
  *(_DWORD *)(*((void *)this + 6) + 330) = 0;
  if (checkAcquireDataPropertyNotEmpty(*(IOService **)(*((void *)this + 6) + 8), "wlan.dsa.power.boost", &v46, 4uLL, 1uLL, "IOService"))
  {
    uint64_t v28 = (_DWORD *)(*((void *)this + 6) + 330);
    *uint64_t v28 = *(_DWORD *)OSData::getBytesNoCopy(v46, 0, 4uLL);
    if (v46)
    {
      ((void (*)(OSData *))v46->release)(v46);
      uint64_t v46 = 0;
    }
  }
  uint64_t v29 = *((void *)this + 6);
  if (!*(unsigned char *)(v29 + 330))
  {
    if (*(void *)(v29 + 16))
    {
      int v30 = CCLogStream::shouldLog();
      uint64_t v29 = *((void *)this + 6);
      if (v30)
      {
        CCLogStream::logNoticeIf(*(CCLogStream **)(v29 + 16), 0x80uLL, "[dk] %s@%d:DynSAR: Power boost control not enabled in plist\n", "populatePlatformProperties", 1288);
        uint64_t v29 = *((void *)this + 6);
      }
    }
    *(unsigned char *)(v29 + 330) = 0;
    *(unsigned char *)(*((void *)this + 6) + 331) = 0;
    *(unsigned char *)(*((void *)this + 6) + 332) = 3;
    *(unsigned char *)(*((void *)this + 6) + 333) = 3;
    uint64_t v29 = *((void *)this + 6);
  }
  *(unsigned char *)(v29 + 329) = 0;
  *(unsigned char *)(*((void *)this + 6) + 328) = 0;
  uint64_t v44 = 0;
  if (acquireProperty<OSNumber>(*(IOService **)(*((void *)this + 6) + 8), "wlan.txsdb.mode", (OSMetaClassBase **)&v44, 1uLL, "IOService")&& v44)
  {
    if (OSNumber::unsigned32BitValue(v44) == 1)
    {
      *(unsigned char *)(*((void *)this + 6) + 329) = 1;
    }
    else if (OSNumber::unsigned32BitValue(v44) == 2)
    {
      *(unsigned char *)(*((void *)this + 6) + 328) = 1;
    }
  }
  int v43 = 0;
  if (IOParseBootArgNumber("wlan.txsdb.mode", &v43, 4))
  {
    if (v43 == 2)
    {
      *(unsigned char *)(*((void *)this + 6) + 329) = 0;
      *(unsigned char *)(*((void *)this + 6) + 328) = 1;
    }
    else if (v43 == 1)
    {
      *(unsigned char *)(*((void *)this + 6) + 328) = 0;
      *(unsigned char *)(*((void *)this + 6) + 329) = 1;
    }
  }
  uint64_t v31 = *((void *)this + 6);
  if (*(void *)(v31 + 16))
  {
    int v32 = CCLogStream::shouldLog();
    uint64_t v31 = *((void *)this + 6);
    if (v32)
    {
      CCLogStream::logNoticeIf(*(CCLogStream **)(v31 + 16), 0x80uLL, "[dk] %s@%d:txSDB: dyn txsdb enabled %d, static txsdb enabled %d\n", "populatePlatformProperties", 1315, *(unsigned __int8 *)(v31 + 328), *(unsigned __int8 *)(v31 + 329));
      uint64_t v31 = *((void *)this + 6);
    }
  }
  uint64_t v42 = 0;
  *(unsigned char *)(v31 + 327) = 0;
  if (acquireProperty<OSBoolean>(*(IOService **)(*((void *)this + 6) + 8), "wlan.ant-inefficiency-mitigation.enabled", &v42, 1uLL, "IOService"))
  {
    uint64_t v33 = v42;
    if (v42 == kOSBooleanTrue) {
      *(unsigned char *)(*((void *)this + 6) + 327) = 1;
    }
    if (v33)
    {
      ((void (*)(OSMetaClassBase *))v33->release)(v33);
      uint64_t v42 = 0;
    }
  }
  int v41 = 0;
  *(unsigned char *)(*((void *)this + 6) + 326) = 0;
  if (acquireProperty<OSBoolean>(*(IOService **)(*((void *)this + 6) + 8), "wlan.continuous.cpms.power", &v41, 1uLL, "IOService"))
  {
    int v34 = v41;
    if (v41 == kOSBooleanTrue) {
      *(unsigned char *)(*((void *)this + 6) + 326) = 1;
    }
    if (v34)
    {
      ((void (*)(OSMetaClassBase *))v34->release)(v34);
      int v41 = 0;
    }
  }
  long long v40 = 0;
  *(_DWORD *)(*((void *)this + 6) + 376) = 0;
  if (acquireProperty<OSNumber>(*(IOService **)(*((void *)this + 6) + 8), "wlan.txchain.mode", &v40, 1uLL, "IOService"))
  {
    if (v40)
    {
      if (OSNumber::unsigned32BitValue(v40) > 2)
      {
        if (*(void *)(*((void *)this + 6) + 16) && CCLogStream::shouldLog())
        {
          uint64_t v36 = *(CCLogStream **)(*((void *)this + 6) + 16);
          uint32_t v37 = OSNumber::unsigned32BitValue(v40);
          CCLogStream::logAlert(v36, "[dk] %s@%d:Invalid Tx chain mode, %d", "populatePlatformProperties", 1350, v37);
        }
      }
      else if (OSNumber::unsigned32BitValue(v40))
      {
        if (OSNumber::unsigned32BitValue(v40) == 1) {
          int v35 = 1;
        }
        else {
          int v35 = 2;
        }
        *(_DWORD *)(*((void *)this + 6) + 376) = v35;
      }
      else
      {
        *(_DWORD *)(*((void *)this + 6) + 376) = 0;
      }
      if (v40)
      {
        ((void (*)(OSNumber *))v40->release)(v40);
        long long v40 = 0;
      }
    }
  }
  else
  {
    *(_DWORD *)(*((void *)this + 6) + 376) = 0;
  }
  int v39 = 0;
  *(unsigned char *)(*((void *)this + 6) + 383) = 0;
  if (acquireProperty<OSBoolean>(*(IOService **)(*((void *)this + 6) + 8), "wlan.6GHz.supported", &v39, 1uLL, "IOService"))
  {
    if (v39 == kOSBooleanTrue)
    {
      *(unsigned char *)(*((void *)this + 6) + 383) = 1;
      if (*(void *)(*((void *)this + 6) + 16) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 16), "[dk] %s@%d:WiFiRoam : 6GHz supported for this platform, %d\n");
      }
    }
    else if (v39 == kOSBooleanFalse)
    {
      *(unsigned char *)(*((void *)this + 6) + 383) = 0;
      if (*(void *)(*((void *)this + 6) + 16))
      {
        if (CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 16), "[dk] %s@%d:WiFiRoam : 6GHz support explicitly disabled via platform config, %d\n");
        }
      }
    }
    uint64_t result = v39;
    if (v39) {
      return (OSMetaClassBase *)((uint64_t (*)(OSMetaClassBase *))v39->release)(v39);
    }
  }
  else
  {
    uint64_t result = *(OSMetaClassBase **)(*((void *)this + 6) + 16);
    if (result)
    {
      uint64_t result = (OSMetaClassBase *)CCLogStream::shouldLog();
      if (result) {
        return (OSMetaClassBase *)CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 16), "[dk] %s@%d:WiFiRoam : 6GHz support defaults to disable for platform, %d\n", "populatePlatformProperties", 1371, *(unsigned __int8 *)(*((void *)this + 6) + 383));
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANConfigManager::getPlatformPropertyBool(AppleBCMWLANConfigManager *this, const char *a2, uint64_t a3)
{
  int v8 = 0;
  if (checkAcquireDataPropertyNotEmpty(*(IOService **)(*((void *)this + 6) + 8), a2, &v8, 0, 1uLL, "IOService"))
  {
    uint64_t v6 = *(unsigned int *)OSData::getBytesNoCopy(v8, 0, 4uLL);
    if (v6)
    {
      if (v6 == 1)
      {
        a3 = 1;
      }
      else if (*(void *)(*((void *)this + 6) + 16) && CCLogStream::shouldLog())
      {
        CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 16), "[dk] %s@%d: unexpected %s parameter value(%lu), using default\n", "getPlatformPropertyBool", 1398, a2, v6);
      }
    }
    else
    {
      a3 = 0;
    }
    if (v8) {
      ((void (*)(OSData *))v8->release)(v8);
    }
  }
  return a3;
}

uint64_t AppleBCMWLANConfigManager::getMotionProfiles(AppleBCMWLANConfigManager *this)
{
  return *(void *)(*((void *)this + 6) + 148);
}

uint64_t AppleBCMWLANConfigManager::getMotionProfileGPIOConfig(AppleBCMWLANConfigManager *this)
{
  return (unsigned __int16)((1 << *(unsigned char *)(*((void *)this + 6) + 157)) | (1 << *(unsigned char *)(*((void *)this + 6)
                                                                                              + 156)));
}

uint64_t AppleBCMWLANConfigManager::readPmThresholds(uint64_t a1, int a2, uint64_t a3)
{
  int v11 = 0;
  if (a2 == 1) {
    uint64_t v6 = "wlan.pm-thresholds.wow";
  }
  else {
    uint64_t v6 = "wlan.pm-thresholds.lpas";
  }
  if (checkAcquireDataPropertyNotEmpty(*(IOService **)(*(void *)(a1 + 48) + 8), v6, &v11, 0x18uLL, 1uLL, "IOService"))
  {
    BytesNoCopy = OSData::getBytesNoCopy(v11, 0, 0x18uLL);
    uint64_t v8 = BytesNoCopy[2];
    *(_OWORD *)a3 = *(_OWORD *)BytesNoCopy;
    *(void *)(a3 + 16) = v8;
    if (v11)
    {
      ((void (*)(OSData *))v11->release)(v11);
      int v11 = 0;
    }
  }
  uint64_t result = *(void *)(*(void *)(a1 + 48) + 16);
  if (result)
  {
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v10 = "LPAS";
      if (a2 == 1) {
        uint64_t v10 = "WoW";
      }
      return CCLogStream::logNotice(*(CCLogStream **)(*(void *)(a1 + 48) + 16), "[dk] %s@%d:DT overrides PM alert thresholds for %s to - %d pct over %d secs;BGScan Quota %d secs &  Roam "
               "Quota %d , with restrictoin %d, secs over %d secs\n",
               "readPmThresholds",
               1165,
               v10,
               *(_DWORD *)a3,
               *(_DWORD *)(a3 + 4),
               *(_DWORD *)(a3 + 16),
               *(_DWORD *)(a3 + 8),
               *(_DWORD *)(a3 + 12),
               *(_DWORD *)(a3 + 20));
    }
  }
  return result;
}

uint64_t acquireProperty<OSNumber>(IOService *a1, const char *a2, OSMetaClassBase **a3, unint64_t a4, const char *a5)
{
  anObject = 0;
  uint64_t result = acquirePropertyWithString(a1, a2, (OSContainer **)&anObject, a4, a5);
  if (result)
  {
    uint64_t v7 = OSMetaClassBase::safeMetaCast(anObject, gOSNumberMetaClass);
    if (v7)
    {
      *a3 = v7;
      return 1;
    }
    else
    {
      uint64_t result = (uint64_t)anObject;
      if (anObject)
      {
        ((void (*)(OSMetaClassBase *))anObject->release)(anObject);
        return 0;
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANConfigManager::wompEnabled(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 32);
}

uint64_t AppleBCMWLANConfigManager::getBSSPreference(uint64_t result, void *a2)
{
  *a2 = *(void *)(*(void *)(result + 48) + 72);
  return result;
}

uint64_t AppleBCMWLANConfigManager::printRoamParams(AppleBCMWLANConfigManager *this, char *a2)
{
  return IO80211Print();
}

uint64_t AppleBCMWLANConfigManager::configureEnterpriseRoamParams(AppleBCMWLANConfigManager *this)
{
  uint64_t v2 = *((void *)this + 6);
  int v7 = *(unsigned __int16 *)(v2 + 98) - (*(unsigned __int16 *)(v2 + 96) << 16);
  uint64_t v3 = *(AppleBCMWLANCommander **)(v2 + 24);
  v6[0] = &v7;
  v6[1] = 4;
  uint64_t v4 = AppleBCMWLANCommander::runIOVarSet(v3, (uint64_t)"roam_conf_aggressive", (uint64_t)v6, 0, 0);
  if (v4 && *(void *)(*((void *)this + 6) + 16) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 16), "[dk] %s@%d: Error: setting threshold for roaming failed\n", "configureEnterpriseRoamParams", 1538);
  }
  return v4;
}

uint64_t AppleBCMWLANConfigManager::setupFirmwareWithDTDefaults(AppleBCMWLANConfigManager *this)
{
  return 0;
}

uint64_t AppleBCMWLANConfigManager::getDTIMParameters(uint64_t result, void *a2)
{
  *a2 = *(void *)(*(void *)(result + 48) + 52);
  return result;
}

uint64_t AppleBCMWLANConfigManager::handleBeaconOffloadAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(*(void *)(result + 48) + 16);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = *(void **)(v3 + 48);
        uint64_t v6 = (CCLogStream *)v5[2];
        int v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 112))(*v5, a3);
        return CCLogStream::logAlert(v6, "[dk] %s@%d: Error: cannot offload beacon with error=%s\n", "handleBeaconOffloadAsyncCallBack", 1581, v7);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANConfigManager::handleBeaconDriftAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(*(void *)(result + 48) + 16);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = *(void **)(v3 + 48);
        uint64_t v6 = (CCLogStream *)v5[2];
        int v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 112))(*v5, a3);
        return CCLogStream::logAlert(v6, "[dk] %s@%d: Error: cannot set becon drift mitigation params %s\n", "handleBeaconDriftAsyncCallBack", 1625, v7);
      }
    }
  }
  return result;
}

BOOL AppleBCMWLANConfigManager::isBMWCarPlayNetworkWorkaroundNeeded(AppleBCMWLANCore ***this)
{
  uint64_t Bus = AppleBCMWLANCore::getBus(*this[6]);
  unsigned int v3 = (*(uint64_t (**)(uint64_t))(*(void *)Bus + 368))(Bus);
  if (this[6][2] && CCLogStream::shouldLog()) {
    CCLogStream::logInfo(this[6][2], "[dk] %s@%d:Chip %u\n", "isBMWCarPlayNetworkWorkaroundNeeded", 1764, v3);
  }
  if (v3 >> 1 < 0x88D) {
    return 0;
  }
  uint64_t v4 = this[6];
  if (v4[2])
  {
    int shouldLog = CCLogStream::shouldLog();
    uint64_t v4 = this[6];
    if (shouldLog)
    {
      CCLogStream::logAlert(v4[2], "[dk] %s@%d:In CarPlay session with %u\n", "isBMWCarPlayNetworkWorkaroundNeeded", 1768, v3);
      uint64_t v4 = this[6];
    }
  }
  BssManager = (AppleBCMWLANBssManager *)AppleBCMWLANCore::getBssManager(*v4);
  CurrentBSS = (IO80211BSSBeacon *)AppleBCMWLANBssManager::getCurrentBSS(BssManager);
  return CurrentBSS && (IO80211BSSBeacon::isLikelyAlpineBMWNetwork(CurrentBSS) & 1) != 0;
}

uint64_t AppleBCMWLANConfigManager::copyWlanPwrDutyCycleTable(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  long long v3 = *(_OWORD *)(v2 + 272);
  *(void *)(a2 + 20) = *(void *)(v2 + 288);
  *(_OWORD *)(a2 + 4) = v3;
  uint64_t v4 = *(void *)(a1 + 48);
  long long v5 = *(_OWORD *)(v4 + 296);
  *(void *)(a2 + 44) = *(void *)(v4 + 312);
  *(_OWORD *)(a2 + 28) = v5;
  return 0;
}

uint64_t AppleBCMWLANConfigManager::setPowerProfile(AppleBCMWLANConfigManager *this, int a2)
{
  *(_DWORD *)(*((void *)this + 6) + 220) = a2;
  if ((a2 - 1) <= 1
    && AppleBCMWLANConfigManager::isBMWCarPlayNetworkWorkaroundNeeded((AppleBCMWLANCore ***)this))
  {
    int v8 = 1;
    long long v3 = *(AppleBCMWLANCommander **)(*((void *)this + 6) + 24);
    v7[0] = &v8;
    v7[1] = 4;
    int v4 = AppleBCMWLANCommander::runIOVarSet(v3, (uint64_t)"erp_cts", (uint64_t)v7, 0, 0);
    uint64_t v5 = *(void *)(*((void *)this + 6) + 16);
    if (v4)
    {
      if (v5 && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 16), "[dk] %s@%d:cannot set erp_cts %u: ret %x\n", "setPowerProfile", 1996, v8, v4);
      }
    }
    else if (v5 && CCLogStream::shouldLog())
    {
      CCLogStream::logNoticeIf(*(CCLogStream **)(*((void *)this + 6) + 16), 0x80uLL, "[dk] %s@%d:ERP CTS is configured to %d\n", "setPowerProfile", 1998, v8);
    }
    if (*(void *)(*((void *)this + 6) + 16) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 16), "[dk] %s@%d:Configured ERP CTS for Alpine BMW\n", "setPowerProfile", 2000);
    }
  }
  return 0;
}

uint64_t AppleBCMWLANConfigManager::configureBeaconDriftOffsetConfig(AppleBCMWLANConfigManager *this, int a2)
{
  uint64_t v4 = IOMallocZeroData();
  if (v4)
  {
    *(void *)uint64_t v4 = 0xF000C0001;
    if (a2 == 1) {
      char v5 = 10;
    }
    else {
      char v5 = 15;
    }
    if (a2 == 2) {
      char v5 = 5;
    }
    *(unsigned char *)(v4 + 8) = v5;
    *(_WORD *)(v4 + 9) = 1541;
    *(unsigned char *)(v4 + 11) = 2;
    v17[0] = v4;
    v17[1] = 12;
    uint64_t v6 = (*(uint64_t (**)(void))(***((void ***)this + 6) + 88))(**((void **)this + 6));
    if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 136))(v6)) {
      uint64_t v7 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 6) + 24), (uint64_t)"bcn_tbtt_config");
    }
    else {
      uint64_t v7 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 6) + 24), (uint64_t)"bcn_tbtt_config", (uint64_t)v17, 0, 0);
    }
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(*((void *)this + 6) + 16);
    if (v8)
    {
      if (v9 && CCLogStream::shouldLog())
      {
        uint64_t v10 = (void *)*((void *)this + 6);
        int v11 = (CCLogStream *)v10[2];
        BOOL v12 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v10 + 112))(*v10, v8);
        CCLogStream::logAlert(v11, "[dk] %s@%d:bcn_tbtt_config setting failed, error %s\n", "configureBeaconDriftOffsetConfig", 2083, v12);
      }
    }
    else if (v9 && CCLogStream::shouldLog())
    {
      int v14 = (void *)*((void *)this + 6);
      int v15 = (CCLogStream *)v14[2];
      uint64_t v16 = (const char *)(*(uint64_t (**)(void, void))(*(void *)*v14 + 112))(*v14, 0);
      CCLogStream::logInfo(v15, "[dk] %s@%d:Configured BCM drift parametes to FW %s \n", "configureBeaconDriftOffsetConfig", 2079, v16);
    }
    IOFreeData();
  }
  else
  {
    uint64_t v8 = 3758097085;
    if (*(void *)(*((void *)this + 6) + 16) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 16), "[dk] %s@%d:bcn_drift cmd alloc fail\n", "configureBeaconDriftOffsetConfig", 2023);
    }
  }
  return v8;
}

AppleBCMWLANCore *AppleBCMWLANConfigManager::querySDBPolicies(AppleBCMWLANCore ***this)
{
  uint64_t result = (AppleBCMWLANCore *)AppleBCMWLANCore::checkForSDBSupport(*this[6]);
  if (result)
  {
    uint64_t v3 = IOMallocZeroData();
    if (v3)
    {
      uint64_t v4 = v3;
      v28[0] = v3;
      v28[1] = 0x40000000400;
      uint64_t v5 = IOMallocZeroData();
      if (!v5)
      {
        if (this[6][2] && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(this[6][2], "[dk] %s@%d:Unable to allocate memory for txBuf\n", "querySDBPolicies", 2124);
        }
        return (AppleBCMWLANCore *)IOFreeData();
      }
      uint64_t v6 = v5;
      v27[0] = v5;
      v27[1] = 1024;
      *(_WORD *)uint64_t v5 = 0x8000;
      *(unsigned char *)(v5 + 2) = 1;
      *(void *)(v5 + 4) = 0x100040000;
      uint64_t v7 = AppleBCMWLANCommander::runIOVarGet(this[6][3], (uint64_t)"rsdb", (uint64_t)v27, (uint64_t)v28, 0);
      if (v7)
      {
        uint64_t v8 = v7;
        if (!this[6][2] || !CCLogStream::shouldLog()) {
          goto LABEL_25;
        }
        uint64_t v9 = this[6];
        uint64_t v10 = v9[2];
        uint64_t v23 = 2144;
        uint64_t v24 = (*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)*v9 + 112))(*v9, v8);
        int v11 = "[dk] %s@%d:Unable to retrive SDB Version, Error: %s\n";
      }
      else
      {
        if (*(_WORD *)(v4 + 4) || *(_DWORD *)(v4 + 8) || *(unsigned __int16 *)(v4 + 6) < 6u || *(_WORD *)(v4 + 12) != 1)
        {
          if (!this[6][2] || !CCLogStream::shouldLog()) {
            goto LABEL_25;
          }
          BOOL v12 = this[6][2];
          uint64_t v25 = *(unsigned int *)(v4 + 8);
          uint64_t v26 = *(unsigned __int16 *)(v4 + 12);
          uint64_t v24 = *(unsigned __int16 *)(v4 + 4);
          uint64_t v23 = 2154;
          int v11 = "[dk] %s@%d:Rsdb version check failure, id:%d status:%d ver:%d\n";
          goto LABEL_49;
        }
        *(_WORD *)(v6 + 4) = 1;
        uint64_t v13 = AppleBCMWLANCommander::runIOVarGet(this[6][3], (uint64_t)"rsdb", (uint64_t)v27, (uint64_t)v28, 0);
        if (v13)
        {
          uint64_t v14 = v13;
          if (!this[6][2] || !CCLogStream::shouldLog()) {
            goto LABEL_25;
          }
          int v15 = this[6];
          uint64_t v10 = v15[2];
          uint64_t v23 = 2166;
          uint64_t v24 = (*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)*v15 + 112))(*v15, v14);
          int v11 = "[dk] %s@%d:Unable to retrive SDB Capabilities, Error: %s\n";
        }
        else
        {
          if (*(_WORD *)(v4 + 4) != 1 || *(_DWORD *)(v4 + 8) || *(unsigned __int16 *)(v4 + 6) <= 0xBu)
          {
            if (this[6][2] && CCLogStream::shouldLog()) {
              CCLogStream::logAlert(this[6][2], "[dk] %s@%d:Rsdb Caps check failure, id:%d status:%d len:%d\n");
            }
            goto LABEL_25;
          }
          uint64_t v16 = *(unsigned __int8 *)(v4 + 12);
          AppleBCMWLANCore::updateRSDBCaps((uint64_t)*this[6], v4 + 12);
          *(_WORD *)(v6 + 4) = 2;
          uint64_t v17 = AppleBCMWLANCommander::runIOVarGet(this[6][3], (uint64_t)"rsdb", (uint64_t)v27, (uint64_t)v28, 0);
          if (v17)
          {
            uint64_t v18 = v17;
            if (!this[6][2] || !CCLogStream::shouldLog()) {
              goto LABEL_25;
            }
            uint64_t v19 = this[6];
            uint64_t v10 = v19[2];
            uint64_t v23 = 2195;
            uint64_t v24 = (*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)*v19 + 112))(*v19, v18);
            int v11 = "[dk] %s@%d:Unable to retrive SDB Bands, Error: %s\n";
          }
          else
          {
            if (*(_WORD *)(v4 + 4) != 2 || *(_DWORD *)(v4 + 8) || *(unsigned __int16 *)(v4 + 6) <= 7u)
            {
              if (this[6][2] && CCLogStream::shouldLog()) {
                CCLogStream::logAlert(this[6][2], "[dk] %s@%d:Rsdb Bands check failure, id:%d status:%d len:%d\n");
              }
              goto LABEL_25;
            }
            *(_WORD *)(v6 + 4) = 3;
            uint64_t v20 = AppleBCMWLANCommander::runIOVarGet(this[6][3], (uint64_t)"rsdb", (uint64_t)v27, (uint64_t)v28, 0);
            if (!v20)
            {
              if (*(_WORD *)(v4 + 4) != 3 || *(_DWORD *)(v4 + 8) || *(unsigned __int16 *)(v4 + 6) <= 0x13u)
              {
                if (this[6][2] && CCLogStream::shouldLog()) {
                  CCLogStream::logAlert(this[6][2], "[dk] %s@%d:Rsdb Config check failure, id:%d status:%d len:%d\n");
                }
              }
              else if (this[6][2] && CCLogStream::shouldLog())
              {
                CCLogStream::logAlert(this[6][2], "[dk] %s@%d:SDB Capabilities: SDB:%d cores:%d curMode:%d Slice0 [%d %d %0X] Slice1 [%d %d %0X]\n", "querySDBPolicies", 2241, v16);
              }
              goto LABEL_25;
            }
            uint64_t v21 = v20;
            if (!this[6][2] || !CCLogStream::shouldLog())
            {
LABEL_25:
              IOFreeData();
              return (AppleBCMWLANCore *)IOFreeData();
            }
            uint64_t v22 = this[6];
            uint64_t v10 = v22[2];
            uint64_t v23 = 2220;
            uint64_t v24 = (*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)*v22 + 112))(*v22, v21);
            int v11 = "[dk] %s@%d:Unable to retrive SDB Config, Error: %s\n";
          }
        }
      }
      BOOL v12 = v10;
LABEL_49:
      CCLogStream::logAlert(v12, v11, "querySDBPolicies", v23, v24, v25, v26);
      goto LABEL_25;
    }
    uint64_t result = this[6][2];
    if (result)
    {
      uint64_t result = (AppleBCMWLANCore *)CCLogStream::shouldLog();
      if (result) {
        return (AppleBCMWLANCore *)CCLogStream::logAlert(this[6][2], "[dk] %s@%d:Unable to allocate memory for rxBuf\n", "querySDBPolicies", 2117);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANConfigManager::configureRangingParams(AppleBCMWLANConfigManager *this)
{
  long long v33 = 0u;
  memset(v34, 0, sizeof(v34));
  long long v32 = 0u;
  memset(v31, 0, sizeof(v31));
  LOWORD(v31[0]) = 2;
  v30[0] = v31;
  v30[1] = 0x9C009C009CLL;
  uint64_t v2 = *(AppleBCMWLANCommander **)(*((void *)this + 6) + 24);
  uint64_t v28 = v31;
  uint64_t v29 = 156;
  int v3 = AppleBCMWLANCommander::runIOVarGet(v2, (uint64_t)"proxd_tune", (uint64_t)&v28, (uint64_t)v30, 0);
  uint64_t v4 = *((void *)this + 6);
  if (v3)
  {
    int v5 = v3;
    uint64_t result = *(void *)(v4 + 16);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result) {
        return CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 16), "[dk] %s@%d:Failure getting proxd_tune config %d\n", "configureRangingParams", 2262, v5);
      }
    }
  }
  else
  {
    AppleBCMWLANCore::getFirmwareInterfaceVersion(*(AppleBCMWLANCore **)v4);
    uint64_t v7 = *((void *)this + 6);
    BYTE1(v33) = *(unsigned char *)(v7 + 234) & 1;
    *(_DWORD *)((char *)&v32 + 3) = 1048601;
    uint64_t v8 = *(AppleBCMWLANCommander **)(v7 + 24);
    uint64_t v28 = v31;
    uint64_t v29 = 156;
    uint64_t v9 = AppleBCMWLANCommander::runIOVarSet(v8, (uint64_t)"proxd_tune", (uint64_t)&v28, 0, 0);
    uint64_t v10 = (void *)*((void *)this + 6);
    if (v9)
    {
      uint64_t v11 = v9;
      if (v10[2])
      {
        int shouldLog = CCLogStream::shouldLog();
        uint64_t v10 = (void *)*((void *)this + 6);
        if (shouldLog)
        {
          uint64_t v23 = (CCLogStream *)v10[2];
          uint64_t v24 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v10 + 112))(*v10, v11);
          CCLogStream::logAlert(v23, "[dk] %s@%d:Failure setting iovar: %s\n", "configureRangingParams", 2285, v24);
          uint64_t v10 = (void *)*((void *)this + 6);
        }
      }
    }
    int v26 = 2;
    uint64_t v27 = 257;
    AppleBCMWLANCommander::getMaxCmdRxPayload((AppleBCMWLANCommander *)v10[3]);
    uint64_t v13 = IOMallocZeroData();
    unsigned __int16 MaxCmdRxPayload = AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(*((void *)this + 6) + 24));
    unsigned __int16 v15 = AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(*((void *)this + 6) + 24));
    BOOL v16 = v13 != 0;
    BOOL v17 = MaxCmdRxPayload != 0;
    BOOL v18 = !v16 || !v17;
    if (v16 && v17) {
      unint64_t v19 = ((unint64_t)v15 << 32) | MaxCmdRxPayload;
    }
    else {
      unint64_t v19 = 0;
    }
    if (v18) {
      uint64_t v20 = 0;
    }
    else {
      uint64_t v20 = (_OWORD *)v13;
    }
    uint64_t v28 = v20;
    uint64_t v29 = v19;
    uint64_t v21 = *(AppleBCMWLANCommander **)(*((void *)this + 6) + 24);
    v25[0] = &v26;
    v25[1] = 12;
    uint64_t result = AppleBCMWLANCommander::runIOVarGet(v21, (uint64_t)"proxd_collect", (uint64_t)v25, (uint64_t)&v28, 0);
    if (result
      && (v22 = result, (uint64_t result = *(void *)(*((void *)this + 6) + 16)) != 0)
      && (uint64_t result = CCLogStream::shouldLog(), result))
    {
      uint64_t result = CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 16), "[dk] %s@%d: Failed GET IOCTL, cret[0x%08x]\n", "configureRangingParams", 2302, v22);
      if (!v13) {
        return result;
      }
    }
    else if (!v13)
    {
      return result;
    }
    return IOFreeData();
  }
  return result;
}

uint64_t AppleBCMWLANConfigManager::determine6GConfiguration(AppleBCMWLANCore ***this)
{
  int v2 = AppleBCMWLANCore::checkFor6GSupportCardCapability(*this[6]);
  int v3 = this[6];
  if (v2 && *((unsigned char *)v3 + 382) && *((unsigned char *)v3 + 383))
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t result = (uint64_t)v3[2];
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      int v3 = this[6];
      if (result)
      {
        CCLogStream::logAlertIf(v3[2], 0x4000uLL, "[dk] %s@%d:%s WiFiRoam : 6GHz roaming is not allowed.  Chip capability : [%d] Roaming enabled via boot-arg ? : [%d] Platform Support : [%d] \n", "determine6GConfiguration", 2321, "determine6GConfiguration", v2, *((unsigned __int8 *)v3 + 382), *((unsigned __int8 *)v3 + 383));
        uint64_t result = 0;
        int v3 = this[6];
      }
    }
  }
  *((unsigned char *)v3 + 384) = result;
  return result;
}

uint64_t AppleBCMWLANConfigManager::is6GSupportedByPlatform(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 383);
}

uint64_t AppleBCMWLANConfigManager::setupBeaconOffload(AppleBCMWLANCore ***this, int a2, int a3, int a4, char a5)
{
  BssManager = (IO80211BssManager *)AppleBCMWLANCore::getBssManager(*this[6]);
  if (AppleBCMWLANCore::checkForLPSCDisable(*this[6]))
  {
    if (this[6][2] && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(this[6][2], "[dk] %s@%d:Disable beacon offload due to boot-arg \n", "setupBeaconOffload", 2353);
    }
    a3 = 0;
    a2 = 0;
  }
  if ((a5 & 1) == 0 && (IO80211BssManager::isAssociated(BssManager) & 1) == 0)
  {
    if (this[6][2] && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(this[6][2], "[dk] %s@%d:Trying to configure Beacon offload when not assoicated \n");
    }
    return 0;
  }
  if ((a2 & a4) == 1 && AppleBCMWLANCore::getBtScoForIphone(*this[6]))
  {
    if (this[6][2] && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(this[6][2], "[dk] %s@%d:BT eSCO active + Infra on 2G. Will not enable beacon offload\n");
    }
    return 0;
  }
  if ((IO80211BssManager::isAssociatedToAdhoc(BssManager) & 1) != 0
    || !AppleBCMWLANCore::checkForScanCoreSupport(*this[6]))
  {
    return 0;
  }
  int v31 = 0;
  __int16 v25 = 1;
  __int16 v27 = a2;
  if (a3) {
    char v11 = 3;
  }
  else {
    char v11 = 1;
  }
  char v28 = v11;
  char v29 = 3;
  BOOL v12 = this[6];
  if (v12[2])
  {
    int shouldLog = CCLogStream::shouldLog();
    BOOL v12 = this[6];
    if (shouldLog)
    {
      unint64_t v19 = v12[2];
      uint64_t v20 = "disabled";
      if (a2) {
        uint64_t v20 = "enabled";
      }
      uint64_t v21 = "relaxed";
      if (a3) {
        uint64_t v21 = "strict";
      }
      CCLogStream::logInfo(v19, "[dk] %s@%d:Setup beacon offload %s with %s params \n", "setupBeaconOffload", 2394, v20, v21);
      BOOL v12 = this[6];
    }
  }
  __int16 v30 = 1466;
  int v26 = 4128784;
  uint64_t v14 = (*(uint64_t (**)(void))(*(void *)*v12 + 88))();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v14 + 136))(v14))
  {
    int v22 = (__int16 *)this;
    uint64_t v23 = (uint64_t)AppleBCMWLANConfigManager::handleBeaconOffloadAsyncCallBack;
    uint64_t v24 = 0;
    uint64_t v15 = AppleBCMWLANCommander::sendIOVarSet(this[6][3], (uint64_t)"sta_pm_sc_offload");
  }
  else
  {
    BOOL v18 = this[6][3];
    int v22 = &v25;
    uint64_t v23 = 16;
    uint64_t v15 = AppleBCMWLANCommander::runIOVarSet(v18, (uint64_t)"sta_pm_sc_offload", (uint64_t)&v22, 0, 0);
  }
  uint64_t v16 = v15;
  if (v15 && this[6][2] && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(this[6][2], "[dk] %s@%d: Error: setting beacon offload failed\n", "setupBeaconOffload", 2410);
  }
  return v16;
}

uint64_t AppleBCMWLANConfigManager::hostWakePowerSaveEnabled(AppleBCMWLANConfigManager *this)
{
  return *(_WORD *)(*((void *)this + 6) + 48) & 1;
}

uint64_t AppleBCMWLANConfigManager::getEnterpriseRoamTrigger(AppleBCMWLANConfigManager *this)
{
  return *(__int16 *)(*((void *)this + 6) + 92);
}

uint64_t AppleBCMWLANConfigManager::getRegionInfo(AppleBCMWLANConfigManager *this)
{
  return *(void *)(*((void *)this + 6) + 192);
}

uint64_t AppleBCMWLANConfigManager::setAWDLSupported(AppleBCMWLANConfigManager *this, char a2)
{
  uint64_t v2 = *((void *)this + 6);
  uint64_t result = *(unsigned __int8 *)(v2 + 166);
  *(unsigned char *)(v2 + 166) = a2;
  return result;
}

uint64_t AppleBCMWLANConfigManager::isAWDLSupported(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 166);
}

uint64_t AppleBCMWLANConfigManager::getAWDLElectionMetric(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int16 *)(*((void *)this + 6) + 142);
}

uint64_t AppleBCMWLANConfigManager::getAWDLFlags(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int16 *)(*((void *)this + 6) + 140);
}

uint64_t AppleBCMWLANConfigManager::is80211NEnabledForAPMode(AppleBCMWLANConfigManager *this)
{
  return 1;
}

uint64_t AppleBCMWLANConfigManager::isEnabledEnhancedRoaming(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 170);
}

uint64_t AppleBCMWLANConfigManager::isMotionAssistanceSupported(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 175);
}

uint64_t AppleBCMWLANConfigManager::isAutoCountryEnabled(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 172);
}

uint64_t AppleBCMWLANConfigManager::isIgnore11dPwrCtrl(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 173);
}

uint64_t AppleBCMWLANConfigManager::isEnhancedLocaleEnabled(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 174);
}

uint64_t AppleBCMWLANConfigManager::getMaxSTAs(AppleBCMWLANConfigManager *this)
{
  return *(unsigned int *)(*((void *)this + 6) + 180);
}

uint64_t AppleBCMWLANConfigManager::getListenInterval(AppleBCMWLANConfigManager *this)
{
  return *(unsigned int *)(*((void *)this + 6) + 184);
}

uint64_t AppleBCMWLANConfigManager::isVOBlockAck(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 189);
}

BOOL AppleBCMWLANConfigManager::isEnhancedTrgDiscEnabled(AppleBCMWLANConfigManager *this)
{
  return *(_DWORD *)(*((void *)this + 6) + 200) != 0;
}

uint64_t AppleBCMWLANConfigManager::getEnhancedTrgDiscMode(AppleBCMWLANConfigManager *this)
{
  return *(unsigned int *)(*((void *)this + 6) + 200);
}

uint64_t AppleBCMWLANConfigManager::setTetheringSupport(AppleBCMWLANConfigManager *this, char a2)
{
  uint64_t v2 = *((void *)this + 6);
  uint64_t result = *(unsigned __int8 *)(v2 + 171);
  *(unsigned char *)(v2 + 171) = a2;
  return result;
}

uint64_t AppleBCMWLANConfigManager::isTetheringSupport(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 171);
}

BOOL AppleBCMWLANConfigManager::isDualPowerModeSupported(AppleBCMWLANConfigManager *this)
{
  return *(unsigned char *)(*((void *)this + 6) + 204) != 0;
}

uint64_t AppleBCMWLANConfigManager::getTxPowerCapConfig(AppleBCMWLANConfigManager *this)
{
  return *((void *)this + 6) + 204;
}

uint64_t AppleBCMWLANConfigManager::isMIMOPSSupported(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 224);
}

uint64_t AppleBCMWLANConfigManager::configureMIMOPSSupport(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)(this + 48) + 224) = a2;
  return this;
}

uint64_t AppleBCMWLANConfigManager::isFastEnterpriseNwSupported(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 225);
}

uint64_t AppleBCMWLANConfigManager::isTCPKAOffloadEnabled(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 190);
}

uint64_t AppleBCMWLANConfigManager::isVoiceEnterpriseNwSupportEnabled(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 226);
}

uint64_t AppleBCMWLANConfigManager::isWnmSupportEnabled(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 227);
}

uint64_t AppleBCMWLANConfigManager::isOCLSupportedInDriver(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 228);
}

uint64_t AppleBCMWLANConfigManager::isOCLAWDLSupportedInDriver(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 229);
}

uint64_t AppleBCMWLANConfigManager::isEBTSupportedInDriver(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 237);
}

uint64_t AppleBCMWLANConfigManager::isOPSSupportedInDriver(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 236);
}

uint64_t AppleBCMWLANConfigManager::isDigitalNapSupportedInDriver(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 238);
}

uint64_t AppleBCMWLANConfigManager::isExternallyPoweredPlatform(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 239);
}

uint64_t AppleBCMWLANConfigManager::isEnhancedDisassociationReasonEnabled(AppleBCMWLANConfigManager *this)
{
  return *(_DWORD *)(*((void *)this + 6) + 240) & 1;
}

uint64_t AppleBCMWLANConfigManager::isBeaconReportingEnabled(AppleBCMWLANConfigManager *this)
{
  return (*(unsigned __int8 *)(*((void *)this + 6) + 240) >> 1) & 1;
}

uint64_t AppleBCMWLANConfigManager::isOSVersionReportingSupported(AppleBCMWLANConfigManager *this)
{
  return (*(unsigned __int8 *)(*((void *)this + 6) + 240) >> 2) & 1;
}

uint64_t AppleBCMWLANConfigManager::isAutoJoinPowerOptimizationSupported(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 230);
}

uint64_t AppleBCMWLANConfigManager::isTxFailEventSupported(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 244);
}

uint64_t AppleBCMWLANConfigManager::getTxFailMediumThreshold(AppleBCMWLANConfigManager *this)
{
  return *(unsigned int *)(*((void *)this + 6) + 252);
}

uint64_t AppleBCMWLANConfigManager::getCachedTxFailEventConfigured(AppleBCMWLANConfigManager *this)
{
  return *(unsigned int *)(*((void *)this + 6) + 260);
}

uint64_t AppleBCMWLANConfigManager::cacheTxFailEventThrehold(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 48) + 260) = a2;
  return this;
}

uint64_t AppleBCMWLANConfigManager::isDFSProxyEnabled(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 321);
}

uint64_t AppleBCMWLANConfigManager::isBcnCWSwitchSupportedInDriver(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 322);
}

uint64_t AppleBCMWLANConfigManager::isGPIOTxEnvelopeIndEnabled(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 323);
}

uint64_t AppleBCMWLANConfigManager::isLowLatencyWiFiEnabled(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 324);
}

uint64_t AppleBCMWLANConfigManager::isAdaptiveRoamingSupported(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 325);
}

uint64_t AppleBCMWLANConfigManager::isDFRTSEnabled(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 188);
}

uint64_t AppleBCMWLANConfigManager::isDynTxSDBEnabled(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 328);
}

uint64_t AppleBCMWLANConfigManager::isStaticTxSDBEnabled(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 329);
}

uint64_t AppleBCMWLANConfigManager::isAntennaInEfficiencyMitigationSupported(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 327);
}

uint64_t AppleBCMWLANConfigManager::getDynSARPwrBoostCtl(AppleBCMWLANConfigManager *this)
{
  return *((void *)this + 6) + 330;
}

BOOL AppleBCMWLANConfigManager::isContCPMSPowerSupported(AppleBCMWLANConfigManager *this)
{
  uint64_t v1 = *((void *)this + 6);
  return v1 && *(unsigned char *)(v1 + 326) != 0;
}

uint64_t AppleBCMWLANConfigManager::prepareImageMapHelper(uint64_t a1, OSMappedFile **a2)
{
  uint64_t result = 3758097090;
  if (*a2 && a2[1] && a2[2] && a2[3])
  {
    unint64_t v5 = OSMappedFile::size(a2[1]);
    unint64_t v6 = OSMappedFile::size(*a2);
    unint64_t v7 = OSMappedFile::size(a2[2]);
    unint64_t v8 = OSMappedFile::size(a2[3]);
    if (a2[4] && (*(unsigned int (**)(void))(*(void *)(a1 + 48) + 368))(**(void **)(a1 + 48))) {
      unint64_t v9 = OSMappedFile::size(a2[4]);
    }
    else {
      unint64_t v9 = 0;
    }
    if (a2[5] && AppleBCMWLANCore::isPlatformConfigFirmwareRequired(**(AppleBCMWLANCore ***)(a1 + 48))) {
      unint64_t v10 = OSMappedFile::size(a2[5]);
    }
    else {
      unint64_t v10 = 0;
    }
    if (*(void *)(*(void *)(a1 + 48) + 16))
    {
      if (CCLogStream::shouldLog()) {
        CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 16), 0x80uLL, "[dk] %s@%d: FW size %zu NV size %zu Reg size %zu txcap %zu\n", "prepareImageMapHelper", 2883, v5, v6, v7, v8);
      }
    }
    uint64_t result = 3825174272;
    if (v5 > 0x307000) {
      return 3825174273;
    }
    if (v5 >= 0x19000)
    {
      if (v6 > 0x8000) {
        return 3825174275;
      }
      if (v6 < 0x64) {
        return 3825174284;
      }
      if (v7 > 0x19000) {
        return 3825174276;
      }
      if (v7 - 1 < 0x20) {
        return 3825174277;
      }
      if (v8 > 0x8000) {
        return 3825174280;
      }
      if (v8 - 1 < 0x20) {
        return 3825174281;
      }
      if (v9 > 0x400) {
        return 3825174302;
      }
      if (v9 - 1 < 0xF) {
        return 3825174303;
      }
      if (v10 > 0x10000) {
        return 3825174304;
      }
      if (v10 - 1 < 0x1F) {
        return 3825174305;
      }
      *(void *)(*(void *)(a1 + 48) + 336) = (*(uint64_t (**)(void, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t))(*(void *)(a1 + 48) + 344))(**(void **)(a1 + 48), v5, v6, v7, v8, v9, v10);
      uint64_t v11 = *(void *)(a1 + 48);
      uint64_t v12 = *(void *)(v11 + 336);
      if (v12)
      {
        long long v13 = *((_OWORD *)a2 + 1);
        v15[0] = *(_OWORD *)a2;
        v15[1] = v13;
        v15[2] = *((_OWORD *)a2 + 2);
        return (*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)v12 + 64))(v12, v15);
      }
      if (*(void *)(v11 + 16))
      {
        int shouldLog = CCLogStream::shouldLog();
        uint64_t result = 3758097085;
        if (!shouldLog) {
          return result;
        }
        CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 16), "[dk] %s@%d: fActiveChipImage alloc fail\n", "prepareImageMapHelper", 2937);
      }
      return 3758097085;
    }
  }
  return result;
}

uint64_t AppleBCMWLANConfigManager::prepareImageMap(uint64_t a1, const char **a2)
{
  size_t v4 = strlen(a2[1]);
  BOOL v73 = 0;
  unsigned int v74 = 0;
  size_t v5 = strlen(a2[3]);
  BOOL v72 = 0;
  strlen(a2[2]);
  int v71 = 0;
  size_t v6 = strlen(*a2);
  BOOL v70 = 0;
  size_t v7 = strlen(a2[4]);
  BOOL v69 = 0;
  uint64_t v67 = a2;
  unint64_t v8 = (OSBundle *)strlen(a2[5]);
  unint64_t v9 = (OSBundle *)OSBundle::mainBundle(v8);
  if (!v9)
  {
    uint64_t v21 = 0;
    uint64_t v25 = 0;
    uint64_t v64 = 0;
    uint64_t v47 = 0;
    OSStringPtr v53 = 0;
    uint64_t v16 = 0;
    uint64_t v11 = 0;
    goto LABEL_161;
  }
  uint64_t v10 = IOMallocZeroData();
  if (v10)
  {
    uint64_t v11 = v10;
    if (v4 <= 0xFFFFFFFFFFFFFFF5) {
      size_t v12 = v4 + 1;
    }
    else {
      size_t v12 = 0;
    }
    long long v13 = (void *)(v10 + 9);
    bzero((void *)(v10 + 9), v12);
    *(unsigned char *)(v11 + 8) = 47;
    *(void *)uint64_t v11 = *(void *)"Firmware/";
    size_t v14 = strlen(v67[1]);
    memcpy(v13, v67[1], v14);
    OSBundle::loadResource(v9, (const char *)v11, 0, 10 * IOVMPageSize, &v74);
    if (!v74)
    {
      io80211_os_log();
      uint64_t v25 = 0;
      uint64_t v64 = 0;
      uint64_t v47 = 0;
      OSStringPtr v53 = 0;
      uint64_t v16 = 0;
      uint64_t v21 = 0;
      goto LABEL_161;
    }
    unint64_t v55 = (unint64_t)v8;
    OSMappedFile::size(v74);
    io80211_os_log();
    uint64_t v15 = IOMallocZeroData();
    if (v15)
    {
      uint64_t v16 = v15;
      int v66 = (const char *)v11;
      if (v5 <= 0xFFFFFFFFFFFFFFF5) {
        size_t v17 = v5 + 1;
      }
      else {
        size_t v17 = 0;
      }
      BOOL v18 = (void *)(v15 + 9);
      bzero((void *)(v15 + 9), v17);
      *(unsigned char *)(v16 + 8) = 47;
      *(void *)uint64_t v16 = *(void *)"Firmware/";
      size_t v19 = strlen(v67[3]);
      memcpy(v18, v67[3], v19);
      OSBundle::loadResource(v9, (const char *)v16, 0, 10 * IOVMPageSize, &v73);
      if (v73)
      {
        OSMappedFile::size(v73);
        io80211_os_log();
        uint64_t v20 = IOMallocZeroData();
        if (!v20)
        {
          uint64_t v11 = (uint64_t)v66;
          if (*(void *)(*(void *)(a1 + 48) + 16))
          {
            uint64_t v52 = 3758097085;
            if (CCLogStream::shouldLog()) {
              CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 16), "[dk] %s@%d:Failed to malloc for regulatory filename", "prepareImageMap", 3037);
            }
            uint64_t v21 = 0;
            goto LABEL_117;
          }
          uint64_t v21 = 0;
LABEL_159:
          uint64_t v25 = 0;
LABEL_160:
          uint64_t v64 = 0;
          uint64_t v47 = 0;
          OSStringPtr v53 = 0;
          goto LABEL_161;
        }
        uint64_t v21 = v20;
        int v22 = (void *)(v20 + 9);
        bzero((void *)(v20 + 9), v17);
        *(unsigned char *)(v21 + 8) = 47;
        *(void *)uint64_t v21 = *(void *)"Firmware/";
        size_t v23 = strlen(v67[2]);
        memcpy(v22, v67[2], v23);
        OSBundle::loadResource(v9, (const char *)v21, 0, 10 * IOVMPageSize, &v72);
        if (v72)
        {
          OSMappedFile::size(v72);
          io80211_os_log();
          uint64_t v24 = IOMallocZeroData();
          if (v24)
          {
            uint64_t v25 = v24;
            if (v6 <= 0xFFFFFFFFFFFFFFF5) {
              size_t v26 = v6 + 1;
            }
            else {
              size_t v26 = 0;
            }
            __int16 v27 = (void *)(v24 + 9);
            bzero((void *)(v24 + 9), v26);
            *(unsigned char *)(v25 + 8) = 47;
            *(void *)uint64_t v25 = *(void *)"Firmware/";
            uint64_t v65 = v25;
            size_t v28 = strlen(*v67);
            memcpy(v27, *v67, v28);
            OSBundle::loadResource(v9, (const char *)v25, 0, 10 * IOVMPageSize, &v71);
            uint64_t v11 = (uint64_t)v66;
            if (v71)
            {
              OSMappedFile::size(v71);
              io80211_os_log();
              OSDictionaryPtr v29 = OSDictionary::withCapacity(4u);
              if (v29)
              {
                __int16 v30 = v29;
                OSStringPtr v31 = OSString::withCStringNoCopy(v66);
                if (!v31)
                {
                  if (*(void *)(*(void *)(a1 + 48) + 16))
                  {
                    uint64_t v52 = 3758097085;
                    if (CCLogStream::shouldLog()) {
                      CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 16), "[dk] %s@%d:Failed to create FW OSString\n", "prepareImageMap", 3076);
                    }
                    uint64_t v64 = 0;
                    uint64_t v47 = 0;
                    OSStringPtr v53 = 0;
                  }
                  else
                  {
                    uint64_t v64 = 0;
                    uint64_t v47 = 0;
                    OSStringPtr v53 = 0;
                    uint64_t v52 = 3758097085;
                  }
                  goto LABEL_67;
                }
                OSStringPtr v63 = v31;
                OSDictionary::setObject(v30, v31, (const OSMetaClassBase *)v74);
                OSStringPtr v32 = OSString::withCStringNoCopy((const char *)v16);
                if (!v32)
                {
                  if (*(void *)(*(void *)(a1 + 48) + 16))
                  {
                    uint64_t v52 = 3758097085;
                    if (CCLogStream::shouldLog()) {
                      CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 16), "[dk] %s@%d:Failed to create TX OSString\n", "prepareImageMap", 3083);
                    }
                    OSStringPtr v53 = 0;
                    uint64_t v47 = 0;
                    uint64_t v64 = 0;
                  }
                  else
                  {
                    OSStringPtr v53 = 0;
                    uint64_t v47 = 0;
                    uint64_t v64 = 0;
                    uint64_t v52 = 3758097085;
                  }
                  goto LABEL_66;
                }
                OSStringPtr v62 = v32;
                OSDictionary::setObject(v30, v32, (const OSMetaClassBase *)v73);
                OSStringPtr v33 = OSString::withCStringNoCopy((const char *)v21);
                if (!v33)
                {
                  if (*(void *)(*(void *)(a1 + 48) + 16))
                  {
                    uint64_t v52 = 3758097085;
                    if (CCLogStream::shouldLog()) {
                      CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 16), "[dk] %s@%d:Failed to create RF OSString\n", "prepareImageMap", 3090);
                    }
                    uint64_t v64 = 0;
                    uint64_t v47 = 0;
                    OSStringPtr v53 = 0;
                  }
                  else
                  {
                    uint64_t v64 = 0;
                    uint64_t v47 = 0;
                    OSStringPtr v53 = 0;
                    uint64_t v52 = 3758097085;
                  }
                  goto LABEL_65;
                }
                OSStringPtr v61 = v33;
                OSDictionary::setObject(v30, v33, (const OSMetaClassBase *)v72);
                OSStringPtr v34 = OSString::withCStringNoCopy((const char *)v25);
                if (!v34)
                {
                  if (*(void *)(*(void *)(a1 + 48) + 16))
                  {
                    uint64_t v52 = 3758097085;
                    if (CCLogStream::shouldLog()) {
                      CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 16), "[dk] %s@%d:Failed to create NVRAM OSString\n", "prepareImageMap", 3097);
                    }
                    OSStringPtr v53 = 0;
                    uint64_t v47 = 0;
                    uint64_t v64 = 0;
                  }
                  else
                  {
                    OSStringPtr v53 = 0;
                    uint64_t v47 = 0;
                    uint64_t v64 = 0;
                    uint64_t v52 = 3758097085;
                  }
                  goto LABEL_64;
                }
                OSStringPtr v60 = v34;
                OSDictionary::setObject(v30, v34, (const OSMetaClassBase *)v71);
                if ((*(unsigned int (**)(void))(*(void *)(a1 + 48) + 368))(**(void **)(a1 + 48)))
                {
                  uint64_t v35 = IOMallocZeroData();
                  if (!v35)
                  {
                    if (*(void *)(*(void *)(a1 + 48) + 16))
                    {
                      uint64_t v52 = 3758097085;
                      if (CCLogStream::shouldLog()) {
                        CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 16), "[dk] %s@%d:Failed to malloc for signature filename\n", "prepareImageMap", 3107);
                      }
                      uint64_t v64 = 0;
                      uint64_t v47 = 0;
                      OSStringPtr v53 = 0;
                    }
                    else
                    {
                      uint64_t v64 = 0;
                      uint64_t v47 = 0;
                      OSStringPtr v53 = 0;
                      uint64_t v52 = 3758097085;
                    }
                    goto LABEL_63;
                  }
                  uint64_t v36 = v16;
                  if (v7 <= 0xFFFFFFFFFFFFFFF5) {
                    size_t v37 = v7 + 1;
                  }
                  else {
                    size_t v37 = 0;
                  }
                  long long v38 = (void *)(v35 + 9);
                  uint64_t v39 = v35;
                  bzero((void *)(v35 + 9), v37);
                  *(unsigned char *)(v39 + 8) = 47;
                  *(void *)uint64_t v39 = *(void *)"Firmware/";
                  size_t v40 = strlen(v67[4]);
                  memcpy(v38, v67[4], v40);
                  OSBundle::loadResource(v9, (const char *)v39, 0, 10 * IOVMPageSize, &v70);
                  uint64_t v64 = v39;
                  if (v70)
                  {
                    OSMappedFile::size(v70);
                    io80211_os_log();
                    OSStringPtr v41 = OSString::withCStringNoCopy((const char *)v39);
                    if (v41)
                    {
                      OSStringPtr v59 = v41;
                      OSDictionary::setObject(v30, v41, (const OSMetaClassBase *)v70);
                      uint64_t v16 = v36;
                      uint64_t v25 = v65;
                      uint64_t v11 = (uint64_t)v66;
                      goto LABEL_33;
                    }
                    uint64_t v25 = v65;
                    uint64_t v16 = v36;
                    if (*(void *)(*(void *)(a1 + 48) + 16))
                    {
                      uint64_t v52 = 3758097085;
                      if (CCLogStream::shouldLog()) {
                        CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 16), "[dk] %s@%d:Failed to create signature OSString\n", "prepareImageMap", 3123);
                      }
                      uint64_t v47 = 0;
                      OSStringPtr v53 = 0;
                    }
                    else
                    {
                      uint64_t v47 = 0;
                      OSStringPtr v53 = 0;
                      uint64_t v52 = 3758097085;
                    }
                  }
                  else
                  {
                    io80211_os_log();
                    uint64_t v47 = 0;
                    OSStringPtr v53 = 0;
                    uint64_t v52 = 3758097085;
                    uint64_t v25 = v65;
                    uint64_t v16 = v36;
                  }
                  uint64_t v11 = (uint64_t)v66;
LABEL_63:
                  ((void (*)(OSStringPtr))v60->release)(v60);
LABEL_64:
                  ((void (*)(OSStringPtr))v61->release)(v61);
LABEL_65:
                  ((void (*)(OSStringPtr))v62->release)(v62);
LABEL_66:
                  ((void (*)(OSStringPtr))v63->release)(v63);
LABEL_67:
                  ((void (*)(OSDictionary *))v30->release)(v30);
                  goto LABEL_68;
                }
                uint64_t v64 = 0;
                OSStringPtr v59 = 0;
LABEL_33:
                uint64_t v58 = v21;
                if (AppleBCMWLANCore::isPlatformConfigFirmwareRequired(**(AppleBCMWLANCore ***)(a1 + 48)))
                {
                  uint64_t v42 = IOMallocZeroData();
                  if (!v42)
                  {
                    if (*(void *)(*(void *)(a1 + 48) + 16))
                    {
                      uint64_t v52 = 3758097085;
                      if (CCLogStream::shouldLog()) {
                        CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 16), "[dk] %s@%d:Failed to malloc for platcfg filename\n", "prepareImageMap", 3131);
                      }
                      uint64_t v47 = 0;
                      OSStringPtr v53 = 0;
                    }
                    else
                    {
                      uint64_t v47 = 0;
                      OSStringPtr v53 = 0;
                      uint64_t v52 = 3758097085;
                    }
                    goto LABEL_61;
                  }
                  uint64_t v43 = v42;
                  if (v55 <= 0xFFFFFFFFFFFFFFF5) {
                    size_t v44 = v55 + 1;
                  }
                  else {
                    size_t v44 = 0;
                  }
                  int v45 = (void *)(v42 + 9);
                  bzero((void *)(v42 + 9), v44);
                  *(unsigned char *)(v43 + 8) = 47;
                  *(void *)uint64_t v43 = *(void *)"Firmware/";
                  size_t v46 = strlen(v67[5]);
                  memcpy(v45, v67[5], v46);
                  OSBundle::loadResource(v9, (const char *)v43, 0, 10 * IOVMPageSize, &v69);
                  uint64_t v47 = v43;
                  uint64_t v57 = v43;
                  if (v69)
                  {
                    OSMappedFile::size(v69);
                    io80211_os_log();
                    OSStringPtr v48 = OSString::withCStringNoCopy((const char *)v43);
                    if (!v48)
                    {
                      if (*(void *)(*(void *)(a1 + 48) + 16) && CCLogStream::shouldLog()) {
                        CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 16), "[dk] %s@%d:Failed to create platcfg OSString\n", "prepareImageMap", 3143);
                      }
                      OSStringPtr v53 = 0;
                      uint64_t v52 = 3758097085;
                      uint64_t v25 = v65;
                      goto LABEL_61;
                    }
                    OSStringPtr v56 = v48;
                    OSDictionary::setObject(v30, v48, (const OSMetaClassBase *)v69);
LABEL_44:
                    uint64_t v49 = 0;
                    while (1)
                    {
                      int v50 = IOFileValidationRequestImageVerify();
                      io80211_os_log();
                      if (!v50) {
                        break;
                      }
                      if (++v49 == 8) {
                        goto LABEL_51;
                      }
                    }
                    if (*(void *)(*(void *)(a1 + 48) + 16) && CCLogStream::shouldLog()) {
                      CCLogStream::logEmergency(*(CCLogStream **)(*(void *)(a1 + 48) + 16), "[dk] %s@%d:Verified FW files as authentic. Proceed!\n", "prepareImageMap", 3157);
                    }
LABEL_51:
                    for (uint64_t i = 0; i != 8; ++i)
                      AppleBCMWLANConfigManager::debugHashstore(a1, (uint64_t)v30, (uint64_t)*(&AppleBCMWLANTrustedChipsetSHAs + i), AppleBCMWLANNumTrustedChipsetSHAs[i], "AppleBCMWLANTrustedChipsetSHAs", i);
                    if (*(void *)(*(void *)(a1 + 48) + 16) && CCLogStream::shouldLog()) {
                      CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 16), 0x80uLL, "[dk] %s@%d:Image verification, rv:%d, skipVerification:%d\n", "prepareImageMap", 3167, v50, *((unsigned __int8 *)v67 + 48));
                    }
                    uint64_t v21 = v58;
                    uint64_t v11 = (uint64_t)v66;
                    uint64_t v47 = v57;
                    if (!*((unsigned char *)v67 + 48) && v50)
                    {
                      if (*(void *)(*(void *)(a1 + 48) + 16) && CCLogStream::shouldLog())
                      {
                        uint64_t v52 = 3758097090;
                        CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 16), "[dk] %s@%d:File validation failed, Image verification, rv:%d, skipVerification:%d, ret[0x%08x]\n", "prepareImageMap", 3171, -536870206, *((unsigned __int8 *)v67 + 48), -536870206);
                      }
                      else
                      {
                        uint64_t v52 = 3758097090;
                      }
                    }
                    else
                    {
                      v68[0] = v71;
                      v68[1] = v74;
                      v68[2] = v72;
                      v68[3] = v73;
                      v68[4] = v70;
                      v68[5] = v69;
                      uint64_t v52 = AppleBCMWLANConfigManager::prepareImageMapHelper(a1, v68);
                      if (v52)
                      {
                        uint64_t v25 = v65;
                        if (*(void *)(*(void *)(a1 + 48) + 16) && CCLogStream::shouldLog()) {
                          CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 16), "[dk] %s@%d:Failed to prepare image map\n", "prepareImageMap", 3186);
                        }
                        goto LABEL_60;
                      }
                    }
                    uint64_t v25 = v65;
LABEL_60:
                    OSStringPtr v53 = v56;
LABEL_61:
                    if (v59) {
                      ((void (*)(OSStringPtr))v59->release)(v59);
                    }
                    goto LABEL_63;
                  }
                  io80211_os_log();
                }
                else
                {
                  uint64_t v57 = 0;
                }
                OSStringPtr v56 = 0;
                goto LABEL_44;
              }
              if (*(void *)(*(void *)(a1 + 48) + 16))
              {
                uint64_t v52 = 3758097085;
                if (CCLogStream::shouldLog()) {
                  CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 16), "[dk] %s@%d:Failed to create OSDictionary\n", "prepareImageMap", 3070);
                }
                goto LABEL_122;
              }
            }
            else
            {
              io80211_os_log();
            }
            goto LABEL_160;
          }
          uint64_t v11 = (uint64_t)v66;
          if (*(void *)(*(void *)(a1 + 48) + 16))
          {
            uint64_t v52 = 3758097085;
            if (CCLogStream::shouldLog()) {
              CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 16), "[dk] %s@%d:Failed to malloc for NVRAM filename\n", "prepareImageMap", 3053);
            }
LABEL_117:
            uint64_t v25 = 0;
LABEL_122:
            uint64_t v64 = 0;
            uint64_t v47 = 0;
            OSStringPtr v53 = 0;
            goto LABEL_68;
          }
          goto LABEL_159;
        }
        io80211_os_log();
      }
      else
      {
        io80211_os_log();
        uint64_t v21 = 0;
      }
      uint64_t v25 = 0;
      uint64_t v64 = 0;
      uint64_t v47 = 0;
      OSStringPtr v53 = 0;
      uint64_t v11 = (uint64_t)v66;
LABEL_161:
      uint64_t v52 = 3758097085;
      goto LABEL_68;
    }
    uint64_t v52 = 3758097085;
    if (*(void *)(*(void *)(a1 + 48) + 16) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 16), "[dk] %s@%d:Failed to malloc for TX cap filename\n", "prepareImageMap", 3021);
    }
    uint64_t v21 = 0;
    uint64_t v25 = 0;
    uint64_t v64 = 0;
    uint64_t v47 = 0;
    OSStringPtr v53 = 0;
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v52 = 3758097085;
    if (*(void *)(*(void *)(a1 + 48) + 16) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 16), "[dk] %s@%d:Failed to malloc for FW filename\n", "prepareImageMap", 3005);
    }
    uint64_t v21 = 0;
    uint64_t v25 = 0;
    uint64_t v64 = 0;
    uint64_t v47 = 0;
    OSStringPtr v53 = 0;
    uint64_t v16 = 0;
    uint64_t v11 = 0;
  }
LABEL_68:
  if (v70)
  {
    (*(void (**)(OSMappedFile *))(*(void *)v70 + 16))(v70);
    BOOL v70 = 0;
  }
  if (v64) {
    IOFreeData();
  }
  if (v53) {
    ((void (*)(OSStringPtr))v53->release)(v53);
  }
  if (v69)
  {
    (*(void (**)(OSMappedFile *))(*(void *)v69 + 16))(v69);
    BOOL v69 = 0;
  }
  if (v47) {
    IOFreeData();
  }
  if (v71)
  {
    (*(void (**)(OSMappedFile *))(*(void *)v71 + 16))(v71);
    int v71 = 0;
  }
  if (v25) {
    IOFreeData();
  }
  if (v72)
  {
    (*(void (**)(OSMappedFile *))(*(void *)v72 + 16))(v72);
    BOOL v72 = 0;
  }
  if (v21) {
    IOFreeData();
  }
  if (v73)
  {
    (*(void (**)(OSMappedFile *))(*(void *)v73 + 16))(v73);
    BOOL v73 = 0;
  }
  if (v16) {
    IOFreeData();
  }
  if (v74)
  {
    (*(void (**)(OSMappedFile *))(*(void *)v74 + 16))(v74);
    unsigned int v74 = 0;
  }
  if (v11) {
    IOFreeData();
  }
  if (v9) {
    (*(void (**)(OSBundle *))(*(void *)v9 + 16))(v9);
  }
  return v52;
}

uint64_t AppleBCMWLANConfigManager::debugHashstore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6)
{
  char v23 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  *(_OWORD *)__str = 0u;
  long long v25 = 0u;
  IOParseBootArgNumber("wlan.debug.hashstore", &v23, 1);
  if (!v23) {
    return 0;
  }
  uint64_t v12 = 3758097085;
  uint64_t result = 3758097090;
  if (a2)
  {
    if (a3)
    {
      if (a5)
      {
        size_t v14 = *(void **)(a1 + 48);
        uint64_t result = 3758097090;
        if (v14)
        {
          if (*v14)
          {
            if ((snprintf(__str, 0x40uLL, "%s : %zu", a5, a6) - 64) < 0xFFFFFFC1)
            {
              return 3758097086;
            }
            else
            {
              OSArrayPtr v15 = OSArray::withCapacity(a4);
              if (v15)
              {
                uint64_t v16 = v15;
                if (a4)
                {
                  while (1)
                  {
                    OSDictionaryPtr v17 = OSDictionary::withCapacity(2u);
                    if (!v17) {
                      break;
                    }
                    BOOL v18 = v17;
                    OSDataPtr v19 = OSData::withBytes((const void *)a3, 0x20uLL);
                    if (!v19
                      || (OSDataPtr v20 = v19,
                          OSDictionary::setObject(v18, "shaKey", v19),
                          ((void (*)(OSDataPtr))v20->release)(v20),
                          (OSDataPtr v21 = OSData::withBytes((const void *)(a3 + 32), 0x20uLL)) == 0))
                    {
                      ((void (*)(OSDictionary *))v18->release)(v18);
                      break;
                    }
                    OSDataPtr v22 = v21;
                    OSDictionary::setObject(v18, "shaContents", v21);
                    ((void (*)(OSDataPtr))v22->release)(v22);
                    OSArray::setObject(v16, v18);
                    ((void (*)(OSDictionary *))v18->release)(v18);
                    a3 += 64;
                    if (!--a4) {
                      goto LABEL_14;
                    }
                  }
                }
                else
                {
LABEL_14:
                  setPropertyHelper(**(IOService ***)(a1 + 48), __str, v16);
                  uint64_t v12 = 0;
                }
                ((void (*)(OSArray *))v16->release)(v16);
                return v12;
              }
              else
              {
                return 3758097085;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANConfigManager::completeImageMap(AppleBCMWLANConfigManager *this)
{
  (*(void (**)(void, void))(**(void **)(*((void *)this + 6) + 336) + 80))(*(void *)(*((void *)this + 6) + 336), 0);
  (*(void (**)(void, void))(**(void **)(*((void *)this + 6) + 336) + 88))(*(void *)(*((void *)this + 6) + 336), 0);
  (*(void (**)(void, void))(**(void **)(*((void *)this + 6) + 336) + 104))(*(void *)(*((void *)this + 6) + 336), 0);
  (*(void (**)(void, void))(**(void **)(*((void *)this + 6) + 336) + 120))(*(void *)(*((void *)this + 6) + 336), 0);
  uint64_t result = (*(uint64_t (**)(void, void))(*((void *)this + 6) + 352))(**((void **)this + 6), *(void *)(*((void *)this + 6) + 336));
  if (!result)
  {
    int v3 = (uint64_t *)*((void *)this + 6);
    size_t v4 = (uint64_t (*)(uint64_t, uint64_t))v3[45];
    uint64_t v5 = *v3;
    uint64_t v6 = v3[42];
    return v4(v5, v6);
  }
  return result;
}

uint64_t AppleBCMWLANConfigManager::getChipImage(AppleBCMWLANConfigManager *this)
{
  return *(void *)(*((void *)this + 6) + 336);
}

uint64_t AppleBCMWLANConfigManager::configureDynamicRssiWindow(AppleBCMWLANConfigManager *this, int a2)
{
  uint64_t v2 = *((void *)this + 6);
  if (!*(unsigned char *)(v2 + 380)) {
    return 3758097095;
  }
  int v20 = a2 | 0x200;
  uint64_t v5 = *(AppleBCMWLANCommander **)(v2 + 24);
  BOOL v18 = &v20;
  uint64_t v19 = 4;
  uint64_t v6 = AppleBCMWLANCommander::runIOVarSet(v5, (uint64_t)"rssi_win", (uint64_t)&v18, 0, 0);
  if (v6 == -469794537 || v6 == 0)
  {
    int v17 = a2;
    unint64_t v8 = *(AppleBCMWLANCommander **)(*((void *)this + 6) + 24);
    BOOL v18 = &v17;
    uint64_t v19 = 4;
    uint64_t v9 = AppleBCMWLANCommander::runIOVarSet(v8, (uint64_t)"snr_win", (uint64_t)&v18, 0, 0);
    uint64_t v10 = v9;
    BOOL v11 = v9 == -469794537 || v9 == 0;
    if (!v11 && *(void *)(*((void *)this + 6) + 16) && CCLogStream::shouldLog())
    {
      uint64_t v12 = (void *)*((void *)this + 6);
      long long v13 = (CCLogStream *)v12[2];
      (*(void (**)(void, uint64_t))(*(void *)*v12 + 112))(*v12, v10);
      CCLogStream::logAlert(v13, "[dk] %s@%d:Unable to set snr window to %d: %s\n");
    }
  }
  else
  {
    uint64_t v10 = v6;
    if (*(void *)(*((void *)this + 6) + 16) && CCLogStream::shouldLog())
    {
      OSArrayPtr v15 = (void *)*((void *)this + 6);
      uint64_t v16 = (CCLogStream *)v15[2];
      (*(void (**)(void, uint64_t))(*(void *)*v15 + 112))(*v15, v10);
      CCLogStream::logAlert(v16, "[dk] %s@%d:Unable to set rssi window to %d: %s\n");
    }
  }
  return v10;
}

uint64_t AppleBCMWLANConfigManager::isNewDevice(AppleBCMWLANConfigManager *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 381);
}

void _GLOBAL__sub_I_AppleBCMWLANConfigManager_cpp()
{
  kNullRange = 0;
}

OSMetaClassBase *IOImageLoaderImageDictionary::getAttributes(const OSDictionary *a1, const char *a2)
{
  if (!a1) {
    return 0;
  }
  int v4 = ((uint64_t (*)(const OSDictionary *))a1->getCount)(a1);
  if (!a2) {
    return 0;
  }
  if (!v4) {
    return 0;
  }
  Object = OSDictionary::getObject(a1, a2);
  if (!OSMetaClassBase::safeMetaCast(Object, gOSDictionaryMetaClass)) {
    return 0;
  }
  uint64_t v6 = gOSDictionaryMetaClass;
  return OSMetaClassBase::safeMetaCast(Object, v6);
}

BOOL IOImageLoaderImageDictionary::setAttributeWithString(OSDictionary *this, OSDictionary *a2, const char *cString, const char *a4)
{
  if (!this) {
    return 0;
  }
  if (!a2) {
    return 0;
  }
  if (!cString) {
    return 0;
  }
  OSStringPtr v6 = OSString::withCString(cString);
  if (!v6) {
    return 0;
  }
  OSStringPtr v7 = v6;
  BOOL v8 = OSDictionary::setObject(this, (const char *)a2, v6);
  ((void (*)(OSStringPtr))v7->release)(v7);
  return v8;
}

BOOL IOImageLoaderImageDictionary::setAttributeWithNumber(OSDictionary *this, OSDictionary *a2, uint64_t value)
{
  OSNumberPtr v5 = OSNumber::withNumber(value, 0x40uLL);
  OSNumberPtr v6 = v5;
  if (this && a2 && v5)
  {
    BOOL v7 = OSDictionary::setObject(this, (const char *)a2, v5);
LABEL_5:
    ((void (*)(OSNumberPtr))v6->release)(v6);
    return v7;
  }
  BOOL v7 = 0;
  BOOL result = 0;
  if (v6) {
    goto LABEL_5;
  }
  return result;
}

BOOL IOImageLoaderImageDictionary::setAttributeWithBoolean(OSDictionary *this, OSDictionary *a2, const char *a3)
{
  int v3 = (const OSMetaClassBase **)&kOSBooleanTrue;
  if (!a3) {
    int v3 = (const OSMetaClassBase **)&kOSBooleanFalse;
  }
  int v4 = *v3;
  if (this && a2 && v4)
  {
    BOOL v5 = OSDictionary::setObject(this, (const char *)a2, *v3);
LABEL_7:
    ((void (*)(const OSMetaClassBase *))v4->release)(v4);
    return v5;
  }
  BOOL v5 = 0;
  BOOL result = 0;
  if (v4) {
    goto LABEL_7;
  }
  return result;
}

OSObject *AppleBCMWLANChipMemory::withMap(AppleBCMWLANChipMemory *this, IOMemoryMap *a2, AppleBCMWLANChipManagerPCIe *a3, AppleBCMWLANPCIeMMIOHistory *a4)
{
  uint64_t v9 = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANChipMemoryMetaClass, &v9)) {
    return 0;
  }
  BOOL v7 = v9;
  if (v9
    && (((uint64_t (*)(OSObject *, AppleBCMWLANChipMemory *, IOMemoryMap *, AppleBCMWLANChipManagerPCIe *))v9->OSMetaClassBase::__vftable[1].getMetaClass)(v9, this, a2, a3) & 1) == 0)
  {
    ((void (*)(OSObject *))v7->release)(v7);
    return 0;
  }
  return v7;
}

uint64_t AppleBCMWLANChipMemory::initWithMap(OSObject *this, IOMemoryMap *a2, AppleBCMWLANChipManagerPCIe *a3, AppleBCMWLANPCIeMMIOHistory *a4)
{
  uint64_t result = OSObject::init(this);
  if (result)
  {
    uint64_t result = IOMallocZeroTyped();
    *(void *)&this[1].refcount = result;
    if (result)
    {
      if (a4)
      {
        *(void *)(result + 248) = a4;
        (*(void (**)(void))(**(void **)(*(void *)&this[1].refcount + 248) + 8))(*(void *)(*(void *)&this[1].refcount + 248));
        uint64_t result = *(void *)&this[1].refcount;
      }
      *(void *)(result + 16) = 0;
      if (AppleBCMWLANChipManagerPCIe::getMemoryCount(a3) > 7)
      {
        return 0;
      }
      else
      {
        uint64_t v8 = 0;
        uint64_t v9 = 24;
        do
        {
          AppleBCMWLANChipManagerPCIe::copyMemory((uint64_t)a3, *(void *)&this[1].refcount + v9, v8++);
          v9 += 32;
        }
        while (v8 != 7);
        *(_DWORD *)(*(void *)&this[1].refcount + 256) = 0;
        return 1;
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANChipMemory::initWithMap(OSObject *this, IOMemoryMap *a2, AppleBCMWLANChipManagerPCIe *a3, AppleBCMWLANPCIeMMIOHistory *a4)
{
  return AppleBCMWLANChipMemory::initWithMap(this - 1, a2, a3, a4);
}

void AppleBCMWLANChipMemory::free(OSObject *this)
{
  uint64_t v2 = *(void **)&this[1].refcount;
  if (v2)
  {
    uint64_t v3 = v2[31];
    if (v3)
    {
      (*(void (**)(void))(*(void *)v3 + 16))(v2[31]);
      *(void *)(*(void *)&this[1].refcount + 248) = 0;
      uint64_t v2 = *(void **)&this[1].refcount;
    }
    memset_s(v2, 0x108uLL, 0, 0x108uLL);
    int v4 = *(void **)&this[1].refcount;
    if (v4)
    {
      IOFree(v4, 0x108uLL);
      *(void *)&this[1].refcount = 0;
    }
  }
  OSObject::free(this);
}

void non-virtual thunk to'AppleBCMWLANChipMemory::free(AppleBCMWLANChipMemory *this)
{
}

void *AppleBCMWLANChipMemory::read(void *result, unsigned int a2, unsigned int a3, unsigned int a4, IO80211Buffer *this, unsigned int a6)
{
  unint64_t v26 = 0;
  if (a2 <= 6 && this)
  {
    uint64_t v9 = result;
    uint64_t v10 = a2;
    unsigned int v11 = *(_DWORD *)(result[6] + 32 * a2 + 32);
    if (v11 > a3 && a4 + a3 <= v11)
    {
      uint64_t result = (void *)IO80211Buffer::getLength(this);
      if ((unint64_t)result > a6)
      {
        uint64_t result = (void *)IO80211Buffer::getLength(this);
        if ((a6 & 7) == 0
          && ((a4 | a3) & 7) == 0
          && (unint64_t)result >= a6 + a4)
        {
          uint64_t result = (void *)IO80211Buffer::getBytesNoCopy(this);
          if ((((_BYTE)result + (_BYTE)a6) & 7) == 0 && a4 >= 8)
          {
            uint64_t v14 = 0;
            uint64_t v15 = a4 >> 3;
            uint64_t v16 = a3 >> 3;
            uint64_t v17 = a6 & 0xFFFFFFF8;
            uint64_t v18 = 8 * v16;
            uint64_t v19 = (void *)((char *)result + v17);
            do
            {
              uint64_t v20 = v9[6];
              OSDataPtr v21 = *(AppleBCMWLANPCIeMMIOHistory **)(v20 + 248);
              uint64_t v22 = v18;
              if (v21)
              {
                uint64_t v22 = 8 * (v14 + v16);
                OSDataPtr v21 = (AppleBCMWLANPCIeMMIOHistory *)AppleBCMWLANPCIeMMIOHistory::recordMMIOMemory(v21, v18 + *(void *)(v20 + 32 * v10 + 40), 0, 8, 1, 1);
              }
              Device = (IOPCIDevice *)AppleBCMWLANBusInterfacePCIe::getDevice(v21);
              IOPCIDevice::MemoryRead64(Device, *(unsigned char *)(v9[6] + 32 * v10 + 36), *(void *)(v9[6] + 32 * v10 + 40) + v22, &v26);
              unint64_t v24 = v26;
              unint64_t *v19 = v26;
              uint64_t v25 = v9[6];
              uint64_t result = *(void **)(v25 + 248);
              if (result) {
                uint64_t result = (void *)AppleBCMWLANPCIeMMIOHistory::recordMMIOMemory((AppleBCMWLANPCIeMMIOHistory *)result, *(void *)(v25 + 32 * v10 + 40) + v22, v24, 8, 1, 0);
              }
              ++v14;
              v18 += 8;
              ++v19;
              --v15;
            }
            while (v15);
          }
        }
      }
    }
  }
  return result;
}

void AppleBCMWLANChipMemory::write(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, IO80211Buffer *this, unsigned int a6)
{
  if (a2 <= 6 && this)
  {
    uint64_t v10 = a2;
    unsigned int v11 = *(_DWORD *)(*(void *)(a1 + 48) + 32 * a2 + 32);
    BOOL v12 = v11 <= a3 || a4 + a3 > v11;
    if (!v12 && IO80211Buffer::getLength(this) > (unint64_t)a6)
    {
      unint64_t Length = IO80211Buffer::getLength(this);
      if ((a6 & 7) == 0 && ((a4 | a3) & 7) == 0 && Length >= a6 + a4)
      {
        uint64_t BytesNoCopy = IO80211Buffer::getBytesNoCopy(this);
        if ((((_BYTE)BytesNoCopy + (_BYTE)a6) & 7) == 0 && a4 >= 8)
        {
          uint64_t v16 = 0;
          uint64_t v17 = a4 >> 3;
          uint64_t v18 = a3 >> 3;
          uint64_t v19 = a6 & 0xFFFFFFF8;
          uint64_t v20 = 8 * v18;
          uint64_t v21 = BytesNoCopy + v19;
          do
          {
            uint64_t v22 = *(void *)(a1 + 48);
            char v23 = *(AppleBCMWLANPCIeMMIOHistory **)(v22 + 248);
            uint64_t v24 = v20;
            if (v23)
            {
              uint64_t v24 = 8 * (v16 + v18);
              char v23 = (AppleBCMWLANPCIeMMIOHistory *)AppleBCMWLANPCIeMMIOHistory::recordMMIOMemory(v23, v20 + *(void *)(v22 + 32 * v10 + 40), 8, 0, 1, 0);
            }
            Device = (IOPCIDevice *)AppleBCMWLANBusInterfacePCIe::getDevice(v23);
            IOPCIDevice::MemoryWrite64(Device, *(unsigned char *)(*(void *)(a1 + 48) + 32 * v10 + 36), *(void *)(*(void *)(a1 + 48) + 32 * v10 + 40) + v24, *(void *)(v21 + 8 * v16));
            uint64_t v26 = *(void *)(a1 + 48);
            long long v27 = *(AppleBCMWLANPCIeMMIOHistory **)(v26 + 248);
            if (v27)
            {
              long long v27 = (AppleBCMWLANPCIeMMIOHistory *)AppleBCMWLANPCIeMMIOHistory::recordMMIOMemory(v27, *(void *)(v26 + 32 * v10 + 40) + v24, 8, 0, 0, 0);
              uint64_t v26 = *(void *)(a1 + 48);
            }
            if (v16)
            {
              int v28 = *(_DWORD *)(v26 + 256);
              BOOL v12 = v28 < 1;
              int v29 = (v28 + 0x7FFFFFFF) & v16;
              if (!v12 && v29 == 0)
              {
                uint64_t v32 = 0;
                OSStringPtr v31 = (IOPCIDevice *)AppleBCMWLANBusInterfacePCIe::getDevice(v27);
                IOPCIDevice::MemoryRead64(v31, *(unsigned char *)(*(void *)(a1 + 48) + 32 * v10 + 36), *(void *)(*(void *)(a1 + 48) + 32 * v10 + 40) + v24, &v32);
              }
            }
            ++v16;
            v20 += 8;
          }
          while (v17 != v16);
        }
      }
    }
  }
}

void AppleBCMWLANChipMemory::readBuf(AppleBCMWLANBusInterfacePCIe *a1, unsigned int a2, int a3, int a4, uint8_t *a5)
{
  LODWORD(v6) = a4;
  LODWORD(v7) = a3;
  uint8_t readData = 0;
  uint64_t Device = AppleBCMWLANBusInterfacePCIe::getDevice(a1);
  if (v6)
  {
    unsigned int v11 = (IOPCIDevice *)Device;
    uint64_t v7 = v7;
    uint64_t v6 = v6;
    do
    {
      uint64_t v12 = *((void *)a1 + 6) + 32 * a2;
      IOPCIDevice::MemoryRead8(v11, *(unsigned char *)(v12 + 36), v7 + *(void *)(v12 + 40), &readData);
      *a5++ = readData;
      ++v7;
      --v6;
    }
    while (v6);
  }
}

void AppleBCMWLANChipMemory::writeBuf(AppleBCMWLANBusInterfacePCIe *a1, unsigned int a2, int a3, int a4, uint8_t *a5)
{
  LODWORD(v6) = a4;
  LODWORD(v7) = a3;
  uint64_t Device = AppleBCMWLANBusInterfacePCIe::getDevice(a1);
  if (v6)
  {
    unsigned int v11 = (IOPCIDevice *)Device;
    uint64_t v7 = v7;
    uint64_t v6 = v6;
    do
    {
      uint64_t v12 = *((void *)a1 + 6) + 32 * a2;
      uint8_t v13 = *a5++;
      IOPCIDevice::MemoryWrite8(v11, *(unsigned char *)(v12 + 36), v7 + *(void *)(v12 + 40), v13);
      ++v7;
      --v6;
    }
    while (v6);
  }
}

void AppleBCMWLANChipMemory::clear(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  if (a2 <= 6 && ((a4 | a3) & 7) == 0)
  {
    uint64_t v5 = a2;
    unsigned int v6 = *(_DWORD *)(*(void *)(a1 + 48) + 32 * a2 + 32);
    BOOL v7 = v6 <= a3 || a4 + a3 > v6;
    if (!v7)
    {
      uint64_t v8 = a3 >> 3;
      int v9 = v6 >> 3;
      uint64_t v10 = a4 ? (a4 >> 3) + (a3 >> 3) : v9;
      if (v8 < v10)
      {
        uint64_t v11 = 8 * (a3 >> 3);
        do
        {
          uint64_t v12 = *(void *)(a1 + 48);
          uint64_t v13 = *(void *)(v12 + 32 * v5 + 40);
          uint64_t v14 = v11 + v13;
          uint64_t v15 = *(AppleBCMWLANPCIeMMIOHistory **)(v12 + 248);
          if (v15) {
            uint64_t v15 = (AppleBCMWLANPCIeMMIOHistory *)AppleBCMWLANPCIeMMIOHistory::recordMMIOMemory(v15, v11 + v13, 0, 8, 0, 1);
          }
          uint64_t Device = (IOPCIDevice *)AppleBCMWLANBusInterfacePCIe::getDevice(v15);
          IOPCIDevice::MemoryWrite64(Device, *(unsigned char *)(*(void *)(a1 + 48) + 32 * v5 + 36), v11 + *(void *)(*(void *)(a1 + 48) + 32 * v5 + 40), 0);
          uint64_t v17 = *(void *)(a1 + 48);
          uint64_t v18 = *(AppleBCMWLANPCIeMMIOHistory **)(v17 + 248);
          if (v18)
          {
            uint64_t v18 = (AppleBCMWLANPCIeMMIOHistory *)AppleBCMWLANPCIeMMIOHistory::recordMMIOMemory(v18, v14, 0, 8, 0, 0);
            uint64_t v17 = *(void *)(a1 + 48);
          }
          if (v8)
          {
            int v19 = *(_DWORD *)(v17 + 256);
            BOOL v7 = v19 < 1;
            int v20 = (v19 + 0x7FFFFFFF) & v8;
            if (!v7 && v20 == 0)
            {
              uint64_t v23 = 0;
              uint64_t v22 = (IOPCIDevice *)AppleBCMWLANBusInterfacePCIe::getDevice(v18);
              IOPCIDevice::MemoryRead64(v22, *(unsigned char *)(*(void *)(a1 + 48) + 32 * v5 + 36), v11 + *(void *)(*(void *)(a1 + 48) + 32 * v5 + 40), &v23);
            }
          }
          ++v8;
          v11 += 8;
        }
        while (v10 != v8);
      }
    }
  }
}

void *AppleBCMWLANChipMemory::write32(void *result, unsigned int a2, unsigned int a3, uint32_t a4)
{
  if (a2 <= 6)
  {
    int v4 = result;
    uint64_t v5 = a2;
    uint64_t v6 = result[6];
    uint64_t v7 = v6 + 32 * a2;
    unint64_t v8 = *(unsigned int *)(v7 + 32);
    uint64_t v9 = a3;
    BOOL v10 = v8 > a3 && (a3 & 3) == 0;
    if (v10 && (unint64_t)a3 + 4 <= v8)
    {
      uint64_t v13 = *(void *)(v7 + 40);
      uint64_t v14 = v13 + a3;
      uint64_t v15 = *(AppleBCMWLANPCIeMMIOHistory **)(v6 + 248);
      if (v15) {
        uint64_t v15 = (AppleBCMWLANPCIeMMIOHistory *)AppleBCMWLANPCIeMMIOHistory::recordMMIOMemory(v15, v13 + a3, a4, 4, 0, 1);
      }
      uint64_t Device = (IOPCIDevice *)AppleBCMWLANBusInterfacePCIe::getDevice(v15);
      IOPCIDevice::MemoryWrite32(Device, *(unsigned char *)(v4[6] + 32 * v5 + 36), *(void *)(v4[6] + 32 * v5 + 40) + v9, a4);
      uint64_t result = *(void **)(v4[6] + 248);
      if (result)
      {
        return (void *)AppleBCMWLANPCIeMMIOHistory::recordMMIOMemory((AppleBCMWLANPCIeMMIOHistory *)result, v14, a4, 4, 0, 0);
      }
    }
  }
  return result;
}

AppleBCMWLANPCIeMMIOHistory *AppleBCMWLANChipMemory::read32(AppleBCMWLANPCIeMMIOHistory *result, unsigned int a2, unsigned int a3, uint32_t *a4)
{
  if (a2 <= 6)
  {
    int v4 = result;
    uint64_t v5 = a2;
    uint64_t v6 = *((void *)result + 6);
    uint64_t v7 = v6 + 32 * a2;
    unint64_t v8 = *(unsigned int *)(v7 + 32);
    uint64_t v9 = a3;
    BOOL v10 = v8 > a3 && (a3 & 3) == 0;
    if (v10 && (unint64_t)a3 + 4 <= v8)
    {
      uint64_t v13 = *(void *)(v7 + 40);
      uint64_t v14 = v13 + a3;
      uint64_t v15 = *(AppleBCMWLANPCIeMMIOHistory **)(v6 + 248);
      if (v15) {
        uint64_t v15 = (AppleBCMWLANPCIeMMIOHistory *)AppleBCMWLANPCIeMMIOHistory::recordMMIOMemory(v15, v13 + a3, 0, 4, 1, 1);
      }
      uint64_t Device = (IOPCIDevice *)AppleBCMWLANBusInterfacePCIe::getDevice(v15);
      IOPCIDevice::MemoryRead32(Device, *(unsigned char *)(*((void *)v4 + 6) + 32 * v5 + 36), *(void *)(*((void *)v4 + 6) + 32 * v5 + 40) + v9, a4);
      uint64_t result = *(AppleBCMWLANPCIeMMIOHistory **)(*((void *)v4 + 6) + 248);
      if (result)
      {
        uint64_t v17 = *a4;
        return (AppleBCMWLANPCIeMMIOHistory *)AppleBCMWLANPCIeMMIOHistory::recordMMIOMemory(result, v14, v17, 4, 1, 0);
      }
    }
  }
  return result;
}

void *AppleBCMWLANChipMemory::write16(void *result, unsigned int a2, unsigned int a3, unsigned int a4)
{
  if (a2 <= 6)
  {
    int v4 = result;
    uint64_t v5 = a2;
    uint64_t v6 = result[6];
    unint64_t v7 = *(unsigned int *)(v6 + 32 * a2 + 32);
    if (v7 > a3)
    {
      uint64_t v8 = a3;
      if ((a3 & 1) == 0 && (unint64_t)a3 + 2 <= v7)
      {
        uint64_t v10 = *(void *)(v6 + 32 * a2 + 40);
        uint64_t v11 = v10 + a3;
        uint64_t v12 = *(AppleBCMWLANPCIeMMIOHistory **)(v6 + 248);
        if (v12) {
          uint64_t v12 = (AppleBCMWLANPCIeMMIOHistory *)AppleBCMWLANPCIeMMIOHistory::recordMMIOMemory(v12, v10 + a3, a4, 2, 0, 1);
        }
        uint64_t Device = (IOPCIDevice *)AppleBCMWLANBusInterfacePCIe::getDevice(v12);
        IOPCIDevice::MemoryWrite16(Device, *(unsigned char *)(v4[6] + 32 * v5 + 36), *(void *)(v4[6] + 32 * v5 + 40) + v8, a4);
        uint64_t result = *(void **)(v4[6] + 248);
        if (result)
        {
          return (void *)AppleBCMWLANPCIeMMIOHistory::recordMMIOMemory((AppleBCMWLANPCIeMMIOHistory *)result, v11, a4, 2, 0, 0);
        }
      }
    }
  }
  return result;
}

AppleBCMWLANPCIeMMIOHistory *AppleBCMWLANChipMemory::read16(AppleBCMWLANPCIeMMIOHistory *result, unsigned int a2, unsigned int a3, uint16_t *a4)
{
  if (a2 <= 6)
  {
    int v4 = result;
    uint64_t v5 = a2;
    uint64_t v6 = *((void *)result + 6);
    unint64_t v7 = *(unsigned int *)(v6 + 32 * a2 + 32);
    if (v7 > a3)
    {
      uint64_t v8 = a3;
      if ((a3 & 1) == 0 && (unint64_t)a3 + 2 <= v7)
      {
        uint64_t v10 = *(void *)(v6 + 32 * a2 + 40);
        uint64_t v11 = v10 + a3;
        uint64_t v12 = *(AppleBCMWLANPCIeMMIOHistory **)(v6 + 248);
        if (v12) {
          uint64_t v12 = (AppleBCMWLANPCIeMMIOHistory *)AppleBCMWLANPCIeMMIOHistory::recordMMIOMemory(v12, v10 + a3, 0, 2, 1, 1);
        }
        uint64_t Device = (IOPCIDevice *)AppleBCMWLANBusInterfacePCIe::getDevice(v12);
        IOPCIDevice::MemoryRead16(Device, *(unsigned char *)(*((void *)v4 + 6) + 32 * v5 + 36), *(void *)(*((void *)v4 + 6) + 32 * v5 + 40) + v8, a4);
        uint64_t result = *(AppleBCMWLANPCIeMMIOHistory **)(*((void *)v4 + 6) + 248);
        if (result)
        {
          uint64_t v14 = *a4;
          return (AppleBCMWLANPCIeMMIOHistory *)AppleBCMWLANPCIeMMIOHistory::recordMMIOMemory(result, v11, v14, 2, 1, 0);
        }
      }
    }
  }
  return result;
}

void *AppleBCMWLANChipMemory::write8(void *result, unsigned int a2, unsigned int a3, unsigned int a4)
{
  if (a2 <= 6)
  {
    int v4 = result;
    uint64_t v5 = a2;
    uint64_t v6 = result[6];
    uint64_t v7 = v6 + 32 * a2;
    if (*(_DWORD *)(v7 + 32) > a3)
    {
      uint64_t v9 = a3;
      uint64_t v10 = *(void *)(v7 + 40) + a3;
      uint64_t v11 = *(AppleBCMWLANPCIeMMIOHistory **)(v6 + 248);
      if (v11) {
        uint64_t v11 = (AppleBCMWLANPCIeMMIOHistory *)AppleBCMWLANPCIeMMIOHistory::recordMMIOMemory(v11, v10, a4, 1, 0, 1);
      }
      uint64_t Device = (IOPCIDevice *)AppleBCMWLANBusInterfacePCIe::getDevice(v11);
      IOPCIDevice::MemoryWrite8(Device, *(unsigned char *)(v4[6] + 32 * v5 + 36), *(void *)(v4[6] + 32 * v5 + 40) + v9, a4);
      uint64_t result = *(void **)(v4[6] + 248);
      if (result)
      {
        return (void *)AppleBCMWLANPCIeMMIOHistory::recordMMIOMemory((AppleBCMWLANPCIeMMIOHistory *)result, v10, a4, 1, 0, 0);
      }
    }
  }
  return result;
}

AppleBCMWLANPCIeMMIOHistory *AppleBCMWLANChipMemory::read8(AppleBCMWLANPCIeMMIOHistory *result, unsigned int a2, unsigned int a3, uint8_t *a4)
{
  if (a2 <= 6)
  {
    int v4 = result;
    uint64_t v5 = a2;
    uint64_t v6 = *((void *)result + 6);
    uint64_t v7 = v6 + 32 * a2;
    if (*(_DWORD *)(v7 + 32) > a3)
    {
      uint64_t v9 = a3;
      uint64_t v10 = *(void *)(v7 + 40);
      uint64_t v11 = v10 + a3;
      uint64_t v12 = *(AppleBCMWLANPCIeMMIOHistory **)(v6 + 248);
      if (v12) {
        uint64_t v12 = (AppleBCMWLANPCIeMMIOHistory *)AppleBCMWLANPCIeMMIOHistory::recordMMIOMemory(v12, v10 + a3, 0, 1, 1, 1);
      }
      uint64_t Device = (IOPCIDevice *)AppleBCMWLANBusInterfacePCIe::getDevice(v12);
      IOPCIDevice::MemoryRead8(Device, *(unsigned char *)(*((void *)v4 + 6) + 32 * v5 + 36), *(void *)(*((void *)v4 + 6) + 32 * v5 + 40) + v9, a4);
      uint64_t result = *(AppleBCMWLANPCIeMMIOHistory **)(*((void *)v4 + 6) + 248);
      if (result)
      {
        uint64_t v14 = *a4;
        return (AppleBCMWLANPCIeMMIOHistory *)AppleBCMWLANPCIeMMIOHistory::recordMMIOMemory(result, v11, v14, 1, 1, 0);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANChipMemory::getFLOPSize(AppleBCMWLANChipMemory *this)
{
  return *(unsigned int *)(*((void *)this + 6) + 96);
}

AppleBCMWLANPCIeMMIOHistory *AppleBCMWLANChipMemory::readFLOP32(AppleBCMWLANChipMemory *this, unsigned int a2, unsigned int *a3)
{
  return AppleBCMWLANChipMemory::read32(this, 2u, a2, a3);
}

AppleBCMWLANPCIeMMIOHistory *AppleBCMWLANChipMemory::readRAM8(AppleBCMWLANChipMemory *this, unsigned int a2, unsigned __int8 *a3)
{
  return AppleBCMWLANChipMemory::read8(this, 4u, a2, a3);
}

AppleBCMWLANPCIeMMIOHistory *AppleBCMWLANChipMemory::readRAM32(AppleBCMWLANChipMemory *this, unsigned int a2, unsigned int *a3)
{
  return AppleBCMWLANChipMemory::read32(this, 4u, a2, a3);
}

void *AppleBCMWLANChipMemory::readRAM(AppleBCMWLANChipMemory *this, unsigned int a2, unsigned int a3, IO80211Buffer *a4, unsigned int a5)
{
  return AppleBCMWLANChipMemory::read(this, 4u, a2, a3, a4, a5);
}

void *AppleBCMWLANChipMemory::readCoexRAM(AppleBCMWLANChipMemory *this, unsigned int a2, unsigned int a3, IO80211Buffer *a4, unsigned int a5)
{
  return AppleBCMWLANChipMemory::read(this, 0, a2, a3, a4, a5);
}

void *AppleBCMWLANChipMemory::writeFLOP32(AppleBCMWLANChipMemory *this, unsigned int a2, uint32_t a3)
{
  return AppleBCMWLANChipMemory::write32(this, 2u, a2, a3);
}

void *AppleBCMWLANChipMemory::writeRAM8(AppleBCMWLANChipMemory *this, unsigned int a2, unsigned int a3)
{
  return AppleBCMWLANChipMemory::write8(this, 4u, a2, a3);
}

void *AppleBCMWLANChipMemory::writeRAM32(AppleBCMWLANChipMemory *this, unsigned int a2, uint32_t a3)
{
  return AppleBCMWLANChipMemory::write32(this, 4u, a2, a3);
}

void AppleBCMWLANChipMemory::writeRAM(AppleBCMWLANChipMemory *this, unsigned int a2, unsigned int a3, const IO80211Buffer *a4, unsigned int a5)
{
}

void AppleBCMWLANChipMemory::clearRAM(AppleBCMWLANChipMemory *this, unsigned int a2, unsigned int a3)
{
}

uint64_t AppleBCMWLANChipMemory::unwrapRAMOffset(AppleBCMWLANChipMemory *this, uint64_t a2)
{
  if ((a2 & 0x80000000) != 0) {
    return (*(_DWORD *)(*((void *)this + 6) + 160) + a2);
  }
  return a2;
}

uint64_t AppleBCMWLANChipMemory::translateRAMBackplaneAddr(AppleBCMWLANChipMemory *this, unsigned int a2, unsigned int *a3)
{
  uint64_t result = 3825172999;
  uint64_t v5 = *((void *)this + 6);
  unsigned int v6 = *(_DWORD *)(v5 + 156);
  if (a2 >= v6 && *(_DWORD *)(v5 + 160) + v6 > a2)
  {
    uint64_t result = 0;
    *a3 = a2 - v6;
  }
  return result;
}

uint64_t AppleBCMWLANChipMemory::readChipRAMDK(AppleBCMWLANChipMemory *this, unsigned int a2, int a3, IO80211Buffer *a4, unsigned int a5)
{
  uint64_t result = 0;
  if (a4)
  {
    unsigned int v9 = *(_DWORD *)(*((void *)this + 6) + 160);
    if (v9 > a2 && a3 + a2 <= v9)
    {
      if (IO80211Buffer::getLength(a4) <= (unint64_t)a5
        || IO80211Buffer::getLength(a4) < (unint64_t)(a5 + a3))
      {
        return 0;
      }
      else
      {
        uint64_t result = IO80211Buffer::getBytesNoCopy(a4);
        if (result)
        {
          AppleBCMWLANChipMemory::readBuf(this, 4u, a2, a3, (uint8_t *)result);
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANChipMemory::setSharedMemoryOffset(uint64_t this, int a2)
{
  **(_DWORD **)(this + 48) = a2;
  return this;
}

uint64_t AppleBCMWLANChipMemory::readFlags(unsigned int **this)
{
  uint32_t v2 = -1;
  AppleBCMWLANChipMemory::read32((AppleBCMWLANPCIeMMIOHistory *)this, 4u, *this[6], &v2);
  return v2;
}

uint64_t AppleBCMWLANChipMemory::readTrapAddr(AppleBCMWLANChipMemory *this)
{
  uint32_t v2 = -1;
  AppleBCMWLANChipMemory::read32(this, 4u, **((_DWORD **)this + 6) + 4, &v2);
  return v2;
}

uint64_t AppleBCMWLANChipMemory::readRingInfoAddr(AppleBCMWLANChipMemory *this)
{
  uint32_t v2 = -1;
  AppleBCMWLANChipMemory::read32(this, 4u, **((_DWORD **)this + 6) + 48, &v2);
  return v2;
}

uint64_t AppleBCMWLANChipMemory::readScratchMemorySize(AppleBCMWLANChipMemory *this)
{
  uint32_t v2 = -1;
  AppleBCMWLANChipMemory::read32(this, 4u, **((_DWORD **)this + 6) + 52, &v2);
  return v2;
}

void *AppleBCMWLANChipMemory::writeScratchMemorySize(AppleBCMWLANChipMemory *this, uint32_t a2)
{
  return AppleBCMWLANChipMemory::write32(this, 4u, **((_DWORD **)this + 6) + 52, a2);
}

unint64_t AppleBCMWLANChipMemory::readScratchMemoryAddr(AppleBCMWLANChipMemory *this)
{
  uint64_t v3 = 0;
  AppleBCMWLANChipMemory::read32(this, 4u, **((_DWORD **)this + 6) + 56, (uint32_t *)&v3 + 1);
  AppleBCMWLANChipMemory::read32(this, 4u, **((_DWORD **)this + 6) + 60, (uint32_t *)&v3);
  return HIDWORD(v3) | ((unint64_t)v3 << 32);
}

void *AppleBCMWLANChipMemory::writeScratchMemoryAddr(uint64_t a1, uint64_t a2)
{
  uint32_t v5 = HIDWORD(a2);
  AppleBCMWLANChipMemory::write32((void *)a1, 4u, **(_DWORD **)(a1 + 48) + 56, a2);
  unsigned int v3 = **(_DWORD **)(a1 + 48) + 60;
  return AppleBCMWLANChipMemory::write32((void *)a1, 4u, v3, v5);
}

void *AppleBCMWLANChipMemory::writeDeviceHealthCheckBufLenWd(AppleBCMWLANChipMemory *this, unsigned int a2)
{
  return AppleBCMWLANChipMemory::write16(this, 4u, **((_DWORD **)this + 6) + 76, a2);
}

uint64_t AppleBCMWLANChipMemory::readFlags2(AppleBCMWLANChipMemory *this)
{
  uint32_t v2 = -1;
  AppleBCMWLANChipMemory::read32(this, 4u, **((_DWORD **)this + 6) + 80, &v2);
  return v2;
}

void *AppleBCMWLANChipMemory::writeHostCaps(AppleBCMWLANChipMemory *this, uint32_t a2)
{
  return AppleBCMWLANChipMemory::write32(this, 4u, **((_DWORD **)this + 6) + 84, a2);
}

void *AppleBCMWLANChipMemory::writeD2hHealthCheck(uint64_t a1, uint64_t a2)
{
  uint32_t v5 = HIDWORD(a2);
  AppleBCMWLANChipMemory::write32((void *)a1, 4u, **(_DWORD **)(a1 + 48) + 88, a2);
  unsigned int v3 = **(_DWORD **)(a1 + 48) + 92;
  return AppleBCMWLANChipMemory::write32((void *)a1, 4u, v3, v5);
}

void *AppleBCMWLANChipMemory::writeHostCaps2(uint64_t a1, uint32_t a2)
{
  return AppleBCMWLANChipMemory::write32((void *)a1, 4u, **(_DWORD **)(a1 + 48) + 112, a2);
}

uint64_t AppleBCMWLANChipMemory::setRingInfo(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 48) + 4) = a2;
  return this;
}

uint64_t AppleBCMWLANChipMemory::readCommonRingMemoryAddr(AppleBCMWLANChipMemory *this)
{
  uint32_t v2 = -1;
  AppleBCMWLANChipMemory::read32(this, 4u, *(_DWORD *)(*((void *)this + 6) + 4), &v2);
  return v2;
}

unint64_t AppleBCMWLANChipMemory::readSubmissionWriteIndexArrayHostAddr(AppleBCMWLANChipMemory *this)
{
  uint64_t v3 = 0;
  AppleBCMWLANChipMemory::read32(this, 4u, *(_DWORD *)(*((void *)this + 6) + 4) + 20, (uint32_t *)&v3 + 1);
  AppleBCMWLANChipMemory::read32(this, 4u, *(_DWORD *)(*((void *)this + 6) + 4) + 24, (uint32_t *)&v3);
  return HIDWORD(v3) | ((unint64_t)v3 << 32);
}

void *AppleBCMWLANChipMemory::writeSubmissionWriteIndexArrayHostAddr(void *a1, uint64_t a2)
{
  uint32_t v5 = HIDWORD(a2);
  AppleBCMWLANChipMemory::write32(a1, 4u, *(_DWORD *)(a1[6] + 4) + 20, a2);
  unsigned int v3 = *(_DWORD *)(a1[6] + 4) + 24;
  return AppleBCMWLANChipMemory::write32(a1, 4u, v3, v5);
}

unint64_t AppleBCMWLANChipMemory::readCompletionReadIndexArrayHostAddr(AppleBCMWLANChipMemory *this)
{
  uint64_t v3 = 0;
  AppleBCMWLANChipMemory::read32(this, 4u, *(_DWORD *)(*((void *)this + 6) + 4) + 44, (uint32_t *)&v3 + 1);
  AppleBCMWLANChipMemory::read32(this, 4u, *(_DWORD *)(*((void *)this + 6) + 4) + 48, (uint32_t *)&v3);
  return HIDWORD(v3) | ((unint64_t)v3 << 32);
}

void *AppleBCMWLANChipMemory::writeCompletionReadIndexArrayHostAddr(void *a1, uint64_t a2)
{
  uint32_t v5 = HIDWORD(a2);
  AppleBCMWLANChipMemory::write32(a1, 4u, *(_DWORD *)(a1[6] + 4) + 44, a2);
  unsigned int v3 = *(_DWORD *)(a1[6] + 4) + 48;
  return AppleBCMWLANChipMemory::write32(a1, 4u, v3, v5);
}

unint64_t AppleBCMWLANChipMemory::readSubmissionReadIndexArrayHostAddr(AppleBCMWLANChipMemory *this)
{
  uint64_t v3 = 0;
  AppleBCMWLANChipMemory::read32(this, 4u, *(_DWORD *)(*((void *)this + 6) + 4) + 28, (uint32_t *)&v3 + 1);
  AppleBCMWLANChipMemory::read32(this, 4u, *(_DWORD *)(*((void *)this + 6) + 4) + 32, (uint32_t *)&v3);
  return HIDWORD(v3) | ((unint64_t)v3 << 32);
}

void *AppleBCMWLANChipMemory::writeSubmissionReadIndexArrayHostAddr(void *a1, uint64_t a2)
{
  uint32_t v5 = HIDWORD(a2);
  AppleBCMWLANChipMemory::write32(a1, 4u, *(_DWORD *)(a1[6] + 4) + 28, a2);
  unsigned int v3 = *(_DWORD *)(a1[6] + 4) + 32;
  return AppleBCMWLANChipMemory::write32(a1, 4u, v3, v5);
}

unint64_t AppleBCMWLANChipMemory::readCompletionWriteIndexArrayHostAddr(AppleBCMWLANChipMemory *this)
{
  uint64_t v3 = 0;
  AppleBCMWLANChipMemory::read32(this, 4u, *(_DWORD *)(*((void *)this + 6) + 4) + 36, (uint32_t *)&v3 + 1);
  AppleBCMWLANChipMemory::read32(this, 4u, *(_DWORD *)(*((void *)this + 6) + 4) + 40, (uint32_t *)&v3);
  return HIDWORD(v3) | ((unint64_t)v3 << 32);
}

void *AppleBCMWLANChipMemory::writeCompletionWriteIndexArrayHostAddr(void *a1, uint64_t a2)
{
  uint32_t v5 = HIDWORD(a2);
  AppleBCMWLANChipMemory::write32(a1, 4u, *(_DWORD *)(a1[6] + 4) + 36, a2);
  unsigned int v3 = *(_DWORD *)(a1[6] + 4) + 40;
  return AppleBCMWLANChipMemory::write32(a1, 4u, v3, v5);
}

uint64_t AppleBCMWLANChipMemory::readMaxTxFlowRings(AppleBCMWLANChipMemory *this)
{
  uint16_t v2 = 0;
  AppleBCMWLANChipMemory::read16(this, 4u, *(_DWORD *)(*((void *)this + 6) + 4) + 52, &v2);
  return v2;
}

uint64_t AppleBCMWLANChipMemory::readMaxDynamicSubmissionRings(AppleBCMWLANChipMemory *this)
{
  uint16_t v2 = 0;
  AppleBCMWLANChipMemory::read16(this, 4u, *(_DWORD *)(*((void *)this + 6) + 4) + 54, &v2);
  return v2;
}

uint64_t AppleBCMWLANChipMemory::setCommonRingOffset(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 48) + 8) = a2;
  return this;
}

void AppleBCMWLANChipMemory::writeCommonRingMemory(AppleBCMWLANBusInterfacePCIe *a1, int a2, uint8_t *a3)
{
}

void AppleBCMWLANChipMemory::readCommonRingMemory(AppleBCMWLANBusInterfacePCIe *a1, int a2, uint8_t *a3)
{
}

uint64_t AppleBCMWLANChipMemory::setFlushPerWritesFactor(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(result + 48) + 256) = a2;
  return result;
}

void _GLOBAL__sub_I_AppleBCMWLANChipMemory_cpp()
{
  kNullRange = 0;
}

OSObject *AppleBCMWLANPCIeSkywalkPacketPool::withName(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANPCIeSkywalkPacketPoolMetaClass, &v12)) {
    return 0;
  }
  uint64_t v10 = v12;
  if (v12
    && (((uint64_t (*)(OSObject *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v12->OSMetaClassBase::__vftable[2].release)(v12, a1, a2, a5, a3, a4) & 1) == 0)
  {
    ((void (*)(OSObject *))v10->release)(v10);
    return 0;
  }
  return v10;
}

uint64_t AppleBCMWLANPCIeSkywalkPacketPool::initWithName(IOUserNetworkPacketBufferPool *a1, const char *a2, OSObject *a3, unsigned int *a4, OSMetaClass_vtbl *a5, uint64_t a6)
{
  uint64_t v12 = (OSMetaClass *)IOMallocZeroTyped();
  a1[1].meta = v12;
  if (v12)
  {
    v12->__vftable = a5;
    *(void *)&a1[1].meta->OSObject::OSObjectInterface::refcount = a6;
    a1[1].meta->OSObject::meta = (OSMetaClass *)*a4;
    a1[1].meta->metaClassPrivate = (OSMetaClassPrivate *)a4[2];
    a1[1].meta[1].meta = (OSMetaClass *)a3;
    uint64_t result = AppleBCMWLANSkywalkPacketPool::initWithName(a1, a2, a3, (uint64_t)a4);
    if (!result) {
      return result;
    }
    Pow2 = (AppleBCMWLANHashtable *)AppleBCMWLANHashtable::alignNextPow2((AppleBCMWLANHashtable *)*a4);
    a1[1].meta[1].__vftable = (OSMetaClass_vtbl *)AppleBCMWLANHashtable::withCapacity(Pow2);
    if (a1[1].meta[1].__vftable)
    {
      uint64_t v15 = (AppleBCMWLANHashtable *)AppleBCMWLANHashtable::alignNextPow2((AppleBCMWLANHashtable *)*a4);
      *(void *)&a1[1].meta[1].refcount = AppleBCMWLANHashtable::withCapacity(v15);
      if (*(void *)&a1[1].meta[1].refcount) {
        return 1;
      }
    }
  }
  else
  {
    IOLog("packet pool ivar alloc fail\n");
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkPacketPool::initWithName(uint64_t a1, const char *a2, OSObject *a3, unsigned int *a4, OSMetaClass_vtbl *a5, uint64_t a6)
{
  return AppleBCMWLANPCIeSkywalkPacketPool::initWithName((IOUserNetworkPacketBufferPool *)(a1 - 56), a2, a3, a4, a5, a6);
}

OSObject *AppleBCMWLANPCIeSkywalkPacketPool::newPacketWithDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t result = AppleBCMWLANPCIeSkywalkPacket::withPool(a1, a2, *(void *)(*(void *)(a1 + 72) + 24), **(void **)(a1 + 72), *(void *)(*(void *)(a1 + 72) + 8), 0);
  if (result) {
    HIDWORD(result[2].OSMetaClassBase::__vftable[1].init) = -559038737;
  }
  return result;
}

OSObject *AppleBCMWLANPCIeSkywalkPacket::withPool(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v14 = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANPCIeSkywalkPacketMetaClass, &v14)) {
    return 0;
  }
  uint64_t v12 = v14;
  if (v14
    && (((uint64_t (*)(OSObject *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v14->OSMetaClassBase::__vftable[10].isEqualTo)(v14, a1, a2, a3, a4, a5, a6) & 1) == 0)
  {
    ((void (*)(OSObject *))v12->release)(v12);
    return 0;
  }
  return v12;
}

OSObject *non-virtual thunk to'AppleBCMWLANPCIeSkywalkPacketPool::newPacketWithDescriptor(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANPCIeSkywalkPacketPool::newPacketWithDescriptor(a1 - 56, a2);
}

void AppleBCMWLANPCIeSkywalkPacketPool::free(IOUserNetworkPacketBufferPool *this)
{
  meta = this[1].meta;
  if (meta)
  {
    *(_OWORD *)&meta[1].meta = 0u;
    *(_OWORD *)&meta[2].__vftable = 0u;
    *(_OWORD *)&meta->meta = 0u;
    *(_OWORD *)&meta[1].__vftable = 0u;
    *(_OWORD *)&meta->__vftable = 0u;
    unsigned int v3 = this[1].meta;
    if (v3)
    {
      IOFree(v3, 0x50uLL);
      this[1].meta = 0;
    }
  }
  IOUserNetworkPacketBufferPool::free(this);
}

void non-virtual thunk to'AppleBCMWLANPCIeSkywalkPacketPool::free(AppleBCMWLANPCIeSkywalkPacketPool *this)
{
}

void *AppleBCMWLANPCIeSkywalkPacketPool::txTrackerFlush(OSObject *this)
{
  uint64_t result = (void *)*((void *)this[1].ivars + 4);
  if (result)
  {
    *((void *)this[1].ivars + 9) += (*(unsigned int (**)(void *))(*result + 72))(result);
    unsigned int v3 = (void *)*((void *)this[1].ivars + 4);
    return AppleBCMWLANHashtable::flush(v3, this, (void (*)(OSObject *, __int16, OSObject *, void *))AppleBCMWLANPCIeSkywalkPacketPool::flushPacketAction, this);
  }
  return result;
}

IOUserNetworkPacket *AppleBCMWLANPCIeSkywalkPacketPool::flushPacketAction(AppleBCMWLANPCIeSkywalkPacketPool *this, __int16 a2, OSObject *anObject, IOUserNetworkPacketBufferPool *a4)
{
  uint64_t result = (IOUserNetworkPacket *)OSMetaClassBase::safeMetaCast(anObject, (const OSMetaClass *)gAppleBCMWLANPCIeSkywalkPacketMetaClass);
  if (a4 && result)
  {
    LOBYTE(result[1].OSObject::OSObjectInterface::__vftable[8].init) &= ~0x80u;
    return (IOUserNetworkPacket *)IOUserNetworkPacketBufferPool::deallocatePacket(a4, result);
  }
  return result;
}

void *AppleBCMWLANPCIeSkywalkPacketPool::rxTrackerFlush(OSObject *this)
{
  uint64_t result = (void *)*((void *)this[1].ivars + 5);
  if (result)
  {
    *((void *)this[1].ivars + 8) += (*(unsigned int (**)(void *))(*result + 72))(result);
    unsigned int v3 = (void *)*((void *)this[1].ivars + 5);
    return AppleBCMWLANHashtable::flush(v3, this, (void (*)(OSObject *, __int16, OSObject *, void *))AppleBCMWLANPCIeSkywalkPacketPool::flushPacketAction, this);
  }
  return result;
}

uint64_t AppleBCMWLANPCIeSkywalkPacketPool::deallocatePacket(AppleBCMWLANPCIeSkywalkPacketPool *this, IOUserNetworkPacket *a2)
{
  if (a2)
  {
    LOBYTE(a2[1].OSObject::OSObjectInterface::__vftable[8].init) &= ~0x80u;
    return IOUserNetworkPacketBufferPool::deallocatePacket((IOUserNetworkPacketBufferPool *)this, a2);
  }
  else
  {
    uint64_t result = **((void **)this + 9);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result) {
        return CCLogStream::logAlert(**((CCLogStream ***)this + 9), "[dk] %s@%d:%s %d Trying to deallocate invalid packet\n", "deallocatePacket", 233, "void AppleBCMWLANPCIeSkywalkPacketPool::deallocatePacket(IO80211NetworkPacket *)", 233);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANPCIeSkywalkPacketPool::allocatePacket(AppleBCMWLANPCIeSkywalkPacketPool *this, IOUserNetworkPacket **a2, unsigned int a3)
{
  uint64_t Packet = IOUserNetworkPacketBufferPool::allocatePacket((IOUserNetworkPacketBufferPool *)this, a2, a3);
  if (Packet)
  {
    uint64_t v6 = Packet;
    if (**((void **)this + 9) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(**((CCLogStream ***)this + 9), "[dk] %s@%d:%s %d alloc fail status 0x%x\n");
    }
  }
  else
  {
    uint64_t v7 = OSMetaClassBase::safeMetaCast(*a2, (const OSMetaClass *)gAppleBCMWLANPCIeSkywalkPacketMetaClass);
    if (*(_DWORD *)(*(void *)&v7[3].refcount + 100) == -559038737)
    {
      uint64_t v8 = (IO80211NetworkPacket *)v7;
      ((void (*)(OSMetaClassBase *, void, uint64_t))v7->__vftable[7].getMetaClass)(v7, 0, 1);
      IO80211NetworkPacket::setHeadroom(v8, *(unsigned char *)(*((void *)this + 9) + 56));
      return 0;
    }
    else
    {
      uint64_t v6 = 3758097084;
      if (**((void **)this + 9) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(**((CCLogStream ***)this + 9), "[dk] %s@%d:new packet signature invalid\n");
      }
    }
  }
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkPacketPool::allocatePacket(AppleBCMWLANPCIeSkywalkPacketPool *this, IOUserNetworkPacket **a2, unsigned int a3)
{
  return AppleBCMWLANPCIeSkywalkPacketPool::allocatePacket((AppleBCMWLANPCIeSkywalkPacketPool *)((char *)this - 40), a2, a3);
}

uint64_t AppleBCMWLANPCIeSkywalkPacketPool::duplicatePacket(CCLogStream ***this, AppleBCMWLANPCIeSkywalkPacket *a2, AppleBCMWLANPCIeSkywalkPacket **a3)
{
  uint64_t v6 = ((uint64_t (*)(CCLogStream ***, AppleBCMWLANPCIeSkywalkPacket **, uint64_t))(*this)[10])(this, a3, 1);
  if (v6)
  {
    uint64_t v7 = v6;
    if (*this[9] && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*this[9], "[dk] %s@%d:%s %d alloc fail status 0x%x\n");
    }
  }
  else if (*a3)
  {
    if ((*(uint64_t (**)(void))(*(void *)*a3 + 480))(*a3))
    {
      uint64_t v8 = *a3;
      unsigned __int8 Headroom = IO80211NetworkPacket::getHeadroom(a2);
      IO80211NetworkPacket::setHeadroom(v8, Headroom);
      uint64_t v10 = (*(uint64_t (**)(void))(*(void *)*a3 + 480))();
      uint64_t v11 = (void *)(v10 + IO80211NetworkPacket::getHeadroom(a2));
      uint64_t v12 = (*(uint64_t (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)a2 + 480))(a2);
      uint64_t v13 = (const void *)(v12 + IO80211NetworkPacket::getHeadroom(a2));
      unsigned int v14 = (*(uint64_t (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)a2 + 224))(a2);
      memcpy(v11, v13, v14);
      uint64_t v15 = *a3;
      uint64_t v16 = (*(uint64_t (**)(AppleBCMWLANPCIeSkywalkPacket *))(*(void *)a2 + 224))(a2);
      (*(void (**)(IO80211NetworkPacket *, uint64_t))(*(void *)v15 + 216))(v15, v16);
      uint64_t v17 = *a3;
      uint64_t v18 = IO80211NetworkPacket::getHeadroom(a2);
      (*(void (**)(IO80211NetworkPacket *, uint64_t))(*(void *)v17 + 232))(v17, v18);
      uint64_t v7 = 0;
      *(unsigned char *)(*((void *)*a3 + 10) + 128) |= 0x80u;
    }
    else
    {
      uint64_t v7 = 3758097084;
      if (*this[9] && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*this[9], "[dk] %s@%d:invalid duplicated buffer\n");
      }
    }
  }
  else
  {
    uint64_t v7 = 3758097084;
    if (*this[9] && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*this[9], "[dk] %s@%d:invalid duplicated packet\n");
    }
  }
  return v7;
}

uint64_t AppleBCMWLANPCIeSkywalkPacketPool::getTxPacketTracker(AppleBCMWLANPCIeSkywalkPacketPool *this)
{
  return *(void *)(*((void *)this + 9) + 32);
}

uint64_t AppleBCMWLANPCIeSkywalkPacketPool::getRxPacketTracker(AppleBCMWLANPCIeSkywalkPacketPool *this)
{
  return *(void *)(*((void *)this + 9) + 40);
}

uint64_t AppleBCMWLANPCIeSkywalkPacketPool::setTxPacketHeadroom(uint64_t this, __int16 a2)
{
  *(_WORD *)(*(void *)(this + 72) + 56) = a2;
  return this;
}

uint64_t AppleBCMWLANPCIeSkywalkPacketPool::collectPacketPoolStats(AppleBCMWLANPCIeSkywalkPacketPool *this, char *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5 = IO80211Print() + a5;
  return IO80211Print() + v5;
}

uint64_t AppleBCMWLANPCIeSkywalkPacket::initWithPool(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = IOMallocZeroTyped();
  *(void *)(a1 + 80) = v6;
  if (v6)
  {
    if (IOUserNetworkPacket::initWithPool())
    {
      *(unsigned char *)(*(void *)(a1 + 80) + 128) &= ~0x10u;
      *(unsigned char *)(*(void *)(a1 + 80) + 126) = 0;
      *(void *)(*(void *)(a1 + 80) + 64) = a1;
      *(void *)(*(void *)(a1 + 80) + 104) = a4;
      *(unsigned char *)(*(void *)(a1 + 80) + 128) &= ~0x40u;
      *(_WORD *)(*(void *)(a1 + 80) + 124) = 0;
      *(unsigned char *)(*(void *)(a1 + 80) + 128) &= ~0x80u;
      *(_DWORD *)(*(void *)(a1 + 80) + 100) = 0;
      return 1;
    }
    IOLog("Skywalk Packet init fail\n");
  }
  else
  {
    IOLog("packet ivars alloc fail\n");
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkPacket::initWithPool(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AppleBCMWLANPCIeSkywalkPacket::initWithPool(a1 - 72, a2, a3, a4);
}

uint64_t AppleBCMWLANPCIeSkywalkPacket::prepareWithQueue(AppleBCMWLANPCIeSkywalkPacket *this, IOUserNetworkPacketQueue *a2, unsigned int a3)
{
  return IO80211NetworkPacket::prepareWithQueue(this, a2, a3);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkPacket::prepareWithQueue(AppleBCMWLANPCIeSkywalkPacket *this, IOUserNetworkPacketQueue *a2, unsigned int a3)
{
  return IO80211NetworkPacket::prepareWithQueue((AppleBCMWLANPCIeSkywalkPacket *)((char *)this - 40), a2, a3);
}

void AppleBCMWLANPCIeSkywalkPacket::free(IOUserNetworkPacket *this)
{
  uint16_t v2 = this[1].OSObject::OSObjectInterface::__vftable;
  if (v2)
  {
    v2[8].init = 0;
    v2[6] = 0u;
    v2[7] = 0u;
    v2[4] = 0u;
    v2[5] = 0u;
    v2[2] = 0u;
    v2[3] = 0u;
    *uint16_t v2 = 0u;
    v2[1] = 0u;
    unsigned int v3 = this[1].OSObject::OSObjectInterface::__vftable;
    if (v3)
    {
      IOFree(v3, 0x88uLL);
      this[1].OSObject::OSObjectInterface::__vftable = 0;
    }
  }
  IOUserNetworkPacket::free(this);
}

void non-virtual thunk to'AppleBCMWLANPCIeSkywalkPacket::free(AppleBCMWLANPCIeSkywalkPacket *this)
{
}

uint64_t AppleBCMWLANPCIeSkywalkPacket::getVirtualAddress(AppleBCMWLANPCIeSkywalkPacket *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 184))();
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkPacket::getVirtualAddress(AppleBCMWLANPCIeSkywalkPacket *this)
{
  return (*(uint64_t (**)(void))(*((void *)this - 7) + 184))();
}

uint64_t AppleBCMWLANPCIeSkywalkPacket::getBusAddress(AppleBCMWLANPCIeSkywalkPacket *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 192))();
}

uint64_t AppleBCMWLANPCIeSkywalkPacket::setAc(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(result + 80) + 128) = *(unsigned char *)(*(void *)(result + 80) + 128) & 0xF0 | a2 & 0xF;
  return result;
}

uint64_t AppleBCMWLANPCIeSkywalkPacket::getAc(AppleBCMWLANPCIeSkywalkPacket *this)
{
  return *(unsigned char *)(*((void *)this + 10) + 128) & 0xF;
}

uint64_t AppleBCMWLANPCIeSkywalkPacket::setStatus(AppleBCMWLANPCIeSkywalkPacket *this, int a2)
{
  *(_DWORD *)(*((void *)this + 10) + 112) = a2;
  return (*(uint64_t (**)(void))(*(void *)this + 344))();
}

uint64_t AppleBCMWLANPCIeSkywalkPacket::getStatus(AppleBCMWLANPCIeSkywalkPacket *this)
{
  return *(unsigned int *)(*((void *)this + 10) + 112);
}

uint64_t AppleBCMWLANPCIeSkywalkPacket::getScratch(AppleBCMWLANPCIeSkywalkPacket *this)
{
  return *((void *)this + 10);
}

uint64_t AppleBCMWLANPCIeSkywalkPacket::getFlowQueueIdx(AppleBCMWLANPCIeSkywalkPacket *this)
{
  return *(unsigned __int16 *)(*((void *)this + 10) + 122);
}

uint64_t AppleBCMWLANPCIeSkywalkPacket::setFlowQueueIdx(uint64_t this, __int16 a2)
{
  *(_WORD *)(*(void *)(this + 80) + 122) = a2;
  return this;
}

uint64_t AppleBCMWLANPCIeSkywalkPacket::setPktRemainingLifeTime(uint64_t this, uint64_t a2)
{
  *(void *)(*(void *)(this + 80) + 80) = a2;
  return this;
}

uint64_t AppleBCMWLANPCIeSkywalkPacket::getPktRemainingLifeTime(AppleBCMWLANPCIeSkywalkPacket *this)
{
  return *(void *)(*((void *)this + 10) + 80);
}

uint64_t AppleBCMWLANPCIeSkywalkPacket::setPktEnqueueTime(uint64_t this, uint64_t a2)
{
  *(void *)(*(void *)(this + 80) + 72) = a2;
  return this;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkPacket::setPktEnqueueTime(uint64_t this, uint64_t a2)
{
  *(void *)(*(void *)(this + 24) + 72) = a2;
  return this;
}

uint64_t AppleBCMWLANPCIeSkywalkPacket::getPktEnqueueTime(AppleBCMWLANPCIeSkywalkPacket *this)
{
  return *(void *)(*((void *)this + 10) + 72);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkPacket::getPktEnqueueTime(AppleBCMWLANPCIeSkywalkPacket *this)
{
  return *(void *)(*((void *)this + 3) + 72);
}

uint64_t AppleBCMWLANPCIeSkywalkPacket::isPktRequeued(AppleBCMWLANPCIeSkywalkPacket *this)
{
  return (*(unsigned __int8 *)(*((void *)this + 10) + 128) >> 4) & 1;
}

uint64_t AppleBCMWLANPCIeSkywalkPacket::setPktRequeued(uint64_t this, int a2)
{
  if (a2) {
    char v2 = 16;
  }
  else {
    char v2 = 0;
  }
  *(unsigned char *)(*(void *)(this + 80) + 128) = *(unsigned char *)(*(void *)(this + 80) + 128) & 0xEF | v2;
  return this;
}

uint64_t AppleBCMWLANPCIeSkywalkPacket::incrPktRequeueCount(uint64_t this)
{
  return this;
}

uint64_t AppleBCMWLANPCIeSkywalkPacket::resetPktRequeueCount(uint64_t this)
{
  *(unsigned char *)(*(void *)(this + 80) + ++*(unsigned char *)(*(void *)(this + 80) + 126) = 0;
  return this;
}

uint64_t AppleBCMWLANPCIeSkywalkPacket::getPktRequeueCount(AppleBCMWLANPCIeSkywalkPacket *this)
{
  return *(unsigned __int8 *)(*((void *)this + 10) + 126);
}

uint64_t AppleBCMWLANPCIeSkywalkPacket::getPktLifetime(AppleBCMWLANPCIeSkywalkPacket *this)
{
  return *(__int16 *)(*((void *)this + 10) + 120);
}

uint64_t AppleBCMWLANPCIeSkywalkPacket::setPktLifetime(uint64_t this, __int16 a2)
{
  *(_WORD *)(*(void *)(this + 80) + 120) = a2;
  return this;
}

uint64_t AppleBCMWLANPCIeSkywalkPacket::getBufferSize(AppleBCMWLANPCIeSkywalkPacket *this)
{
  return *(unsigned int *)(*((void *)this + 10) + 104);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkPacket::getBufferSize(AppleBCMWLANPCIeSkywalkPacket *this)
{
  return *(unsigned int *)(*((void *)this + 3) + 104);
}

uint64_t AppleBCMWLANPCIeSkywalkPacket::fromChain(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t AppleBCMWLANPCIeSkywalkPacket::getChain(AppleBCMWLANPCIeSkywalkPacket *this)
{
  return *((void *)this + 10) + 48;
}

uint64_t AppleBCMWLANPCIeSkywalkPacket::isLocalPacket(AppleBCMWLANPCIeSkywalkPacket *this)
{
  return (*(unsigned __int8 *)(*((void *)this + 10) + 128) >> 6) & 1;
}

uint64_t AppleBCMWLANPCIeSkywalkPacket::setPacketId(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 80) + 96) = a2;
  return this;
}

uint64_t AppleBCMWLANPCIeSkywalkPacket::setIngressEgressTimestamp(uint64_t this, uint64_t a2)
{
  *(void *)(*(void *)(this + 80) + 88) = a2;
  return this;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkPacket::setIngressEgressTimestamp(uint64_t this, uint64_t a2)
{
  *(void *)(*(void *)(this + 24) + 88) = a2;
  return this;
}

uint64_t AppleBCMWLANPCIeSkywalkPacket::getIngressEgressTimestamp(AppleBCMWLANPCIeSkywalkPacket *this)
{
  return *(void *)(*((void *)this + 10) + 88);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkPacket::getIngressEgressTimestamp(AppleBCMWLANPCIeSkywalkPacket *this)
{
  return *(void *)(*((void *)this + 3) + 88);
}

uint64_t AppleBCMWLANPCIeSkywalkPacket::isPTMMode(AppleBCMWLANPCIeSkywalkPacket *this)
{
  return (*(unsigned __int8 *)(*((void *)this + 10) + 128) >> 5) & 1;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkPacket::isPTMMode(AppleBCMWLANPCIeSkywalkPacket *this)
{
  return (*(unsigned __int8 *)(*((void *)this + 3) + 128) >> 5) & 1;
}

uint64_t AppleBCMWLANPCIeSkywalkPacket::setPTMMode(uint64_t this, int a2)
{
  if (a2) {
    char v2 = 32;
  }
  else {
    char v2 = 0;
  }
  *(unsigned char *)(*(void *)(this + 80) + 128) = *(unsigned char *)(*(void *)(this + 80) + 128) & 0xDF | v2;
  return this;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkPacket::setPTMMode(uint64_t this, int a2)
{
  if (a2) {
    char v2 = 32;
  }
  else {
    char v2 = 0;
  }
  *(unsigned char *)(*(void *)(this + 24) + 128) = *(unsigned char *)(*(void *)(this + 24) + 128) & 0xDF | v2;
  return this;
}

uint64_t AppleBCMWLANPCIeSkywalkPacket::getPktDup(AppleBCMWLANPCIeSkywalkPacket *this)
{
  return *(unsigned __int8 *)(*((void *)this + 10) + 128) >> 7;
}

uint64_t AppleBCMWLANPCIeSkywalkPacket::setFirmwareTxStatus(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(result + 80) + 116) = a2;
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkPacket::setFirmwareTxStatus(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(result + 24) + 116) = a2;
  return result;
}

uint64_t AppleBCMWLANPCIeSkywalkPacket::getFirmwareTxStatus(AppleBCMWLANPCIeSkywalkPacket *this)
{
  return *(unsigned int *)(*((void *)this + 10) + 116);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSkywalkPacket::getFirmwareTxStatus(AppleBCMWLANPCIeSkywalkPacket *this)
{
  return *(unsigned int *)(*((void *)this + 3) + 116);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::init(AppleBCMWLANIO80211APSTAInterface *this)
{
  uint64_t result = IO80211SkywalkInterface::init(this);
  if (result)
  {
    uint64_t v3 = IOMallocZeroTyped();
    *((void *)this + 17) = v3;
    return v3 != 0;
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::init(AppleBCMWLANIO80211APSTAInterface *this)
{
  return AppleBCMWLANIO80211APSTAInterface::init((AppleBCMWLANIO80211APSTAInterface *)((char *)this - 24));
}

uint64_t AppleBCMWLANIO80211APSTAInterface::init(AppleBCMWLANIO80211APSTAInterface *this, AppleBCMWLANCore *a2, ether_addr *a3, unsigned int a4, char *a5)
{
  if (IO80211VirtualInterface::init(this, a2, a3, a4, a5))
  {
    *(void *)(*((void *)this + 17) + 536) = a2;
    *(unsigned char *)(*((void *)this + 17) + 809) = 0;
    *(unsigned char *)(*((void *)this + 17) + 810) = 0;
    if ((AppleBCMWLANCore::getDebugFlags(*(AppleBCMWLANCore **)(*((void *)this + 17) + 536)) & 0x200) != 0) {
      unsigned int v8 = 1;
    }
    else {
      unsigned int v8 = -1;
    }
    IO80211SkywalkInterface::setInterfaceId(this, v8);
    *(_DWORD *)(*((void *)this + 17) + 616) = 2;
    (*(void (**)(void))(**(void **)(*((void *)this + 17) + 536) + 88))(*(void *)(*((void *)this + 17) + 536));
    *(void *)(*((void *)this + 17) + 112) = IO80211TimerSource::allocWithParams();
    uint64_t v9 = *((void *)this + 17);
    if (*(void *)(v9 + 112))
    {
      (*(void (**)(void))(**(void **)(v9 + 536) + 88))(*(void *)(v9 + 536));
      *(void *)(*((void *)this + 17) + 120) = IO80211TimerSource::allocWithParams();
      uint64_t v10 = *((void *)this + 17);
      if (*(void *)(v10 + 120))
      {
        *(void *)(*((void *)this + 17) + 576) = AppleBCMWLANCore::getBGScanAdapter(*(AppleBCMWLANCore **)(v10 + 536));
        uint64_t v11 = *(void *)(*((void *)this + 17) + 576);
        if (v11)
        {
          (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
          *(void *)(*((void *)this + 17) + 584) = AppleBCMWLANCore::getPowerManager(*(AppleBCMWLANCore **)(*((void *)this + 17) + 536));
          uint64_t v12 = *(void *)(*((void *)this + 17) + 584);
          if (v12)
          {
            (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
            *(void *)(*((void *)this + 17) + 552) = AppleBCMWLANCore::getCommander(*(AppleBCMWLANCore **)(*((void *)this + 17) + 536));
            *(void *)(*((void *)this + 17) + 528) = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 17)
                                                                                             + 536)
                                                                               + 1848))();
            IO80211SkywalkInterface::setInterfaceRole(this, a4);
            *(void *)(*((void *)this + 17) + 592) = AppleBCMWLANCore::getTxPowerManager(*(AppleBCMWLANCore **)(*((void *)this + 17) + 536));
            uint64_t v13 = *(void *)(*((void *)this + 17) + 592);
            if (v13)
            {
              (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
              *(void *)(*((void *)this + 17) + 608) = AppleBCMWLANCore::getConfigManager(*(AppleBCMWLANCore **)(*((void *)this + 17) + 536));
              uint64_t v14 = *(void *)(*((void *)this + 17) + 608);
              if (v14)
              {
                (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
                *(void *)(*((void *)this + 17) + 600) = AppleBCMWLANCore::getWnmAdaptor(*(AppleBCMWLANCore **)(*((void *)this + 17) + 536));
                uint64_t v15 = *(void *)(*((void *)this + 17) + 600);
                if (v15)
                {
                  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
                  *(_DWORD *)(*((void *)this + 17) + 524) = 0;
                  *(void *)(*((void *)this + 17) + 136) = 0;
                  *(_DWORD *)(*((void *)this + 17) + 176) = 0;
                  *(_DWORD *)(*((void *)this + 17) + 180) = 0;
                  *(_WORD *)(*((void *)this + 17) + 20) = 300;
                  *(unsigned char *)(*((void *)this + 17) + 676) = 4;
                  *(_DWORD *)(*((void *)this + 17) + 680) = 0;
                  uint64_t result = 1;
                  *(_DWORD *)(*((void *)this + 17) + 684) = 1;
                  *(_DWORD *)(*((void *)this + 17) + 688) = 2;
                  *(_DWORD *)(*((void *)this + 17) + 692) = 3;
                  return result;
                }
                if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
                {
                  (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
                  if (CCLogStream::shouldLog())
                  {
                    uint64_t v23 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
                    CCLogStream::logAlert(v23, "[dk] %s@%d:Unable to get Enterprise Manager\n");
                  }
                }
              }
              else if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
              {
                (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
                  CCLogStream::logAlert(v22, "[dk] %s@%d:Unable to get Config Manager\n");
                }
              }
            }
            else if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
            {
              (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
              if (CCLogStream::shouldLog())
              {
                uint64_t v21 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
                CCLogStream::logAlert(v21, "[dk] %s@%d:Unable to get Tx Power Manager\n");
              }
            }
          }
          else if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
          {
            (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
            if (CCLogStream::shouldLog())
            {
              int v20 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this
                                                                                                  + 1024))(this);
              CCLogStream::logAlert(v20, "[dk] %s@%d:Unable to get Power Manager\n");
            }
          }
        }
        else if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
        {
          (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
          if (CCLogStream::shouldLog())
          {
            int v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this
                                                                                                + 1024))(this);
            CCLogStream::logAlert(v19, "[dk] %s@%d:Unable to get BGScan Adapter\n");
          }
        }
      }
      else if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
          CCLogStream::logAlert(v18, "[dk] %s@%d:ERROR: Unable to instantiate AP monitor timer\n");
        }
      }
    }
    else if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v17, "[dk] %s@%d: Unable to instantiate AP stats timer\n");
      }
    }
    AppleBCMWLANIO80211APSTAInterface::freeResources(this);
  }
  else
  {
    IOLog("AppleBCMWLANIO80211APSTAInterface init failed");
  }
  return 0;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::handleAPStatsUpdates(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 136);
  if (*(void *)(v2 + 112) == a2)
  {
    if (*(_DWORD *)(v2 + 620))
    {
      uint64_t v3 = (AppleBCMWLANIO80211APSTAInterface *)result;
      uint64_t result = IOMallocZeroData();
      if (result)
      {
        uint64_t v4 = result;
        uint64_t v5 = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *, uint64_t))(*(void *)v3 + 1552))(v3, result);
        if (v5 != -536870184)
        {
          uint64_t v6 = v5;
          if (v5)
          {
            if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v3 + 1024))(v3))
            {
              (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v3 + 1024))(v3);
              if (CCLogStream::shouldLog())
              {
                uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v3 + 1024))(v3);
                uint64_t v12 = (const char *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *, uint64_t))(*(void *)v3 + 856))(v3, v6);
                CCLogStream::logCrit(v11, "[dk] %s@%d: ERROR: Unable to query list of associated STAs %s\n", "handleAPStatsUpdates", 3146, v12);
              }
            }
          }
          else
          {
            AppleBCMWLANIO80211APSTAInterface::checkForStationListMismatch(v3, v4);
            uint64_t v7 = *((void *)v3 + 17);
            uint64_t v8 = *(void *)(v7 + 160);
            BOOL v9 = !AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(v7 + 536), 16)
              || !AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(*((void *)v3 + 17) + 536), 8);
            if (AppleBCMWLANCore::isNanPhFeatureEnabled(*(AppleBCMWLANCore **)(*((void *)v3 + 17)
                                                                                            + 536))
              && !v9)
            {
              v8 += AppleBCMWLANCore::getNanRxPktCounter(*(AppleBCMWLANCore **)(*((void *)v3 + 17) + 536));
            }
            uint64_t v13 = *((void *)v3 + 17);
            if (v8 == *(void *)(v13 + 136))
            {
              *(_DWORD *)(v13 + 524) += 5000;
            }
            else
            {
              *(void *)(v13 + 136) = v8;
              *(_DWORD *)(*((void *)v3 + 17) + 524) = 0;
            }
            if (*(_DWORD *)(*((void *)v3 + 17) + 524) > 0x16E360u)
            {
              if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v3 + 1024))(v3))
              {
                (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v3 + 1024))(v3);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v3 + 1024))(v3);
                  CCLogStream::logAlert(v16, "[dk] %s@%d:ALERT: SoftAP has been inactive > %d msecs, posting message to wifiManager to kill softap\n", "handleAPStatsUpdates", 3164, 1500000);
                }
              }
              uint64_t v17 = 0;
              int v18 = -1;
              AppleBCMWLANIO80211APSTAInterface::postMessageForSTA(v3, 13, &v17, 0xCu);
              uint64_t v14 = *((void *)v3 + 17);
              if (*(_DWORD *)(v14 + 524) >= 0x170A71u) {
                *(_DWORD *)(v14 + 524) = 0;
              }
            }
            if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v3 + 1024))(v3))
            {
              (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v3 + 1024))(v3);
              if (CCLogStream::shouldLog())
              {
                uint64_t v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v3 + 1024))(v3);
                CCLogStream::logNoticeIf(v15, 0x80000uLL, "[dk] %s@%d: current associated STA count %ld\n", "handleAPStatsUpdates", 3174, **((unsigned int **)v3 + 17));
              }
            }
            (*(void (**)(void, uint64_t))(**(void **)(*((void *)v3 + 17) + 112) + 120))(*(void *)(*((void *)v3 + 17) + 112), 5000);
          }
        }
        return IOFreeData();
      }
    }
    else
    {
      uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 136);
      return v10(a2);
    }
  }
  return result;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::freeResources(AppleBCMWLANIO80211APSTAInterface *this)
{
  uint64_t v2 = (void *)*((void *)this + 17);
  uint64_t v3 = v2[14];
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 72))(v3);
    (*(void (**)(void))(**(void **)(*((void *)this + 17) + 112) + 16))(*(void *)(*((void *)this + 17) + 112));
    *(void *)(*((void *)this + 17) + 112) = 0;
    uint64_t v2 = (void *)*((void *)this + 17);
  }
  uint64_t v4 = v2[15];
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 72))(v4);
    (*(void (**)(void))(**(void **)(*((void *)this + 17) + 120) + 16))(*(void *)(*((void *)this + 17) + 120));
    *(void *)(*((void *)this + 17) + 120) = 0;
    uint64_t v2 = (void *)*((void *)this + 17);
  }
  uint64_t v5 = v2[72];
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    *(void *)(*((void *)this + 17) + 576) = 0;
    uint64_t v2 = (void *)*((void *)this + 17);
  }
  uint64_t v6 = v2[73];
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    *(void *)(*((void *)this + 17) + 584) = 0;
    uint64_t v2 = (void *)*((void *)this + 17);
  }
  uint64_t v7 = v2[74];
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    *(void *)(*((void *)this + 17) + 592) = 0;
    uint64_t v2 = (void *)*((void *)this + 17);
  }
  uint64_t v8 = v2[76];
  if (v8)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
    *(void *)(*((void *)this + 17) + 608) = 0;
    uint64_t v2 = (void *)*((void *)this + 17);
  }
  uint64_t result = v2[75];
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    *(void *)(*((void *)this + 17) + 600) = 0;
  }
  return result;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::monitorAPInterface(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 136);
  if (*(void *)(v2 + 120) == a2)
  {
    if (*(_DWORD *)(v2 + 620))
    {
      uint64_t v3 = (AppleBCMWLANIO80211APSTAInterface *)result;
      mach_continuous_time();
      absolutetime_to_nanoseconds();
      uint64_t v4 = *((void *)v3 + 17);
      uint64_t v5 = *(void *)(v4 + 424);
      if (v5) {
        AppleBCMWLANIO80211APSTAInterface::softApStatsAccumulatePowerStateDuration((uint64_t)v3, *(_DWORD *)(v4 + 16), -v5);
      }
      AppleBCMWLANIO80211APSTAInterface::monitorInfraConcurrencyState(v3);
      AppleBCMWLANIO80211APSTAInterface::runPowerSaveStateMachine(v3);
      return (*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)v3 + 17) + 120) + 120))(*(void *)(*((void *)v3 + 17) + 120), 1000);
    }
    else
    {
      uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 136);
      return v6(a2);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::init(AppleBCMWLANIO80211APSTAInterface *this, AppleBCMWLANCore *a2, ether_addr *a3, unsigned int a4, char *a5)
{
  return AppleBCMWLANIO80211APSTAInterface::init((AppleBCMWLANIO80211APSTAInterface *)((char *)this - 128), a2, a3, a4, a5);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::start(AppleBCMWLANIO80211APSTAInterface *this, IOService *anObject)
{
  uint64_t v3 = (IOService *)OSMetaClassBase::safeMetaCast(anObject, (const OSMetaClass *)gAppleBCMWLANCoreMetaClass);
  return AppleBCMWLANIO80211APSTAInterface::start(this, v3);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::start(IO80211VirtualInterface *a1, IOService *a2)
{
  IOLog("APSTA Skywalk Interface Start\n");
  uint64_t result = (*(uint64_t (**)(IO80211VirtualInterface *, IOService *, void, uint64_t, const char *))(*(void *)a1 + 1736))(a1, a2, 0, 7, "ap");
  if (result)
  {
    uint64_t result = IO80211VirtualInterface::start(a1, a2);
    if (result)
    {
      if (IO80211SkywalkInterface::getLogger(a1)) {
        *(void *)(*((void *)a1 + 17) + 528) = IO80211SkywalkInterface::getLogger(a1);
      }
      ((void (*)(IOService *))a2->OSObject::OSMetaClassBase::__vftable[1].Dispatch)(a2);
      *(void *)(*((void *)a1 + 17) + 816) = ((uint64_t (*)(IOService *))a2->OSObject::OSMetaClassBase::__vftable[1].Dispatch)(a2);
      *(void *)(*((void *)a1 + 17) + 712) = AppleBCMWLANCore::getBus((AppleBCMWLANCore *)a2);
      uint64_t v5 = (const OSMetaClassBase *)(*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 17) + 712) + 752))();
      *(void *)(*((void *)a1 + 17) + 720) = OSMetaClassBase::safeMetaCast(v5, (const OSMetaClass *)gAppleBCMWLANBusSkywalkMetaClass);
      *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v11 = v6;
      long long v12 = v6;
      long long v13 = v6;
      long long v14 = v6;
      long long v15 = v6;
      uint64_t v10 = a1;
      uint64_t v7 = *((void *)a1 + 17);
      LOBYTE(v11) = *(unsigned char *)(v7 + 676);
      *(void *)&long long v13 = v7 + 744;
      *((void *)&v13 + 1) = v7 + 752;
      *(void *)&long long v14 = v7 + 800;
      *((void *)&v14 + 1) = v7 + 728;
      *(void *)&long long v15 = v7 + 736;
      *((void *)&v12 + 1) = v7 + 760;
      *((void *)&v11 + 1) = v7 + 680;
      *(void *)&long long v12 = v7 + 768;
      uint64_t v16 = (*(uint64_t (**)(IO80211VirtualInterface *))(*(void *)a1 + 1024))(a1);
      if ((*(unsigned int (**)(void, IO80211VirtualInterface **))(**(void **)(*((void *)a1 + 17)
                                                                                            + 720)
                                                                              + 56))(*(void *)(*((void *)a1 + 17) + 720), &v10))
      {
        uint64_t result = (*(uint64_t (**)(IO80211VirtualInterface *))(*(void *)a1 + 1024))(a1);
        if (result)
        {
          (*(void (**)(IO80211VirtualInterface *))(*(void *)a1 + 1024))(a1);
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(IO80211VirtualInterface *))(*(void *)a1 + 1024))(a1);
            CCLogStream::logAlert(v8, "[dk] %s@%d:Failed to register interface with bus interface", "start", 391);
            return 0;
          }
        }
      }
      else
      {
        uint64_t v9 = *((void *)a1 + 17);
        if (*(void *)(v9 + 800)) {
          (*(void (**)(void))(**(void **)(v9 + 816) + 64))(*(void *)(v9 + 816));
        }
        return (*(uint64_t (**)(IO80211VirtualInterface *))(*(void *)a1 + 488))(a1);
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::start(AppleBCMWLANIO80211APSTAInterface *this, IOService *anObject)
{
  uint64_t v2 = (AppleBCMWLANIO80211APSTAInterface *)((char *)this - 48);
  uint64_t v3 = (IOService *)OSMetaClassBase::safeMetaCast(anObject, (const OSMetaClass *)gAppleBCMWLANCoreMetaClass);
  return AppleBCMWLANIO80211APSTAInterface::start(v2, v3);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::registerInterface(IOService *this)
{
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[1] = v2;
  v15[2] = v2;
  v15[0] = v2;
  if (((unsigned int (*)(IOService *, void *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[1].release)(this, &mediaTable, 2))
  {
    uint64_t result = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[18].release)(this);
    if (result)
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[18].release)(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v4 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[18].release)(this);
        CCLogStream::logAlert(v4, "[dk] %s@%d:APSTAInterface: media type report fail, ret[0x%08x]\n");
        return 0;
      }
    }
    return result;
  }
  ivars = this[2].ivars;
  if (!*((unsigned char *)ivars + 676)) {
    goto LABEL_15;
  }
  unint64_t v6 = 0;
  do
  {
    uint64_t v7 = (const void *)*((void *)ivars + v6 + 96);
    *((void *)v15 + v6) = v7;
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[18].release)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[18].release)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[18].release)(this);
        CCLogStream::logAlert(v8, "[dk] %s@%d:APSTAInterface: network queue[%u] %p, driver queue %p\n", "registerInterface", 477, v6, v7, *((const void **)this[2].ivars + v6 + 96));
      }
    }
    ++v6;
    ivars = this[2].ivars;
  }
  while (v6 < *((unsigned __int8 *)ivars + 676));
  if (*((unsigned char *)ivars + 676))
  {
    unint64_t v9 = 0;
    do
    {
      (*(void (**)(void))(**((void **)ivars + v9 + 96) + 272))(*((void *)ivars + v9 + 96));
      *((_DWORD *)this[2].ivars + *((unsigned int *)this[2].ivars + v9 + 170) + 174) = AppleBCMWLANSkywalkTxSubmissionQueue::getQueueId(*((AppleBCMWLANSkywalkTxSubmissionQueue **)this[2].ivars + v9 + 96));
      ++v9;
      ivars = this[2].ivars;
    }
    while (v9 < *((unsigned __int8 *)ivars + 676));
  }
  else
  {
LABEL_15:
    LOBYTE(v9) = 0;
  }
  *((void *)v15 + v9) = *((void *)ivars + 93);
  *((void *)v15 + (v9 + 1)) = *((void *)ivars + 94);
  (*(void (**)(void))(**((void **)ivars + 93) + 200))(*((void *)ivars + 93));
  (*(void (**)(void))(**((void **)this[2].ivars + 94) + 208))(*((void *)this[2].ivars + 94));
  uint64_t v10 = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[18].getMetaClass)(this);
  uint64_t v11 = (v9 + 2);
  int v12 = ((uint64_t (*)(IOService *, uint64_t, void, _OWORD *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[4].free)(this, v10 & 0xFFFFFFFFFFFFLL, *((void *)this[2].ivars + 91), v15, v11);
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[18].release)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[18].release)(this);
    if (CCLogStream::shouldLog())
    {
      long long v14 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[18].release)(this);
      CCLogStream::logAlert(v14, "[dk] %s@%d:APSTAInterface: ret[0x%08x] MAC[%02X:%02X:%02X:%02X:%02X:%02X], pool[%p] queues[%p] numQueue[%2u]", "registerInterface", 494, v12, v10, BYTE1(v10), BYTE2(v10), BYTE3(v10), BYTE4(v10), BYTE5(v10), *((const void **)this[2].ivars + 91), v15, v11);
      if (v12) {
        goto LABEL_19;
      }
LABEL_24:
      IOService::RegisterService(this, 0);
      return 1;
    }
  }
  if (!v12) {
    goto LABEL_24;
  }
LABEL_19:
  uint64_t result = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[18].release)(this);
  if (result)
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[18].release)(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      long long v13 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[18].release)(this);
      CCLogStream::logAlert(v13, "[dk] %s@%d:APSTAInterface: registration fail, ret[0x%08x]\n");
      return 0;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::registerInterface(AppleBCMWLANIO80211APSTAInterface *this)
{
  return AppleBCMWLANIO80211APSTAInterface::registerInterface((IOService *)((char *)this - 80));
}

uint64_t AppleBCMWLANIO80211APSTAInterface::setInterfaceEnable(AppleBCMWLANIO80211APSTAInterface *this, int a2)
{
  IO80211SkywalkInterface::validateDispatchQueue(this);
  uint64_t v4 = IO80211VirtualInterface::setInterfaceEnable(this, a2);
  uint64_t v5 = *(AppleBCMWLANCore **)(*((void *)this + 17) + 536);
  if (v5) {
    AppleBCMWLANCore::reportSystemPowerState(v5, (unint64_t *)3, a2, 1);
  }
  uint64_t v6 = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
  if (a2)
  {
    if (v6)
    {
      (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        long long v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v13, "[dk] %s@%d:APSTA: enable data path\n", "setInterfaceEnable", 523);
      }
    }
    if (*(_DWORD *)(*((void *)this + 17) + 620))
    {
      uint64_t v7 = 3;
      uint64_t v8 = 128;
    }
    else
    {
      uint64_t v7 = 1;
      uint64_t v8 = 130;
    }
    uint64_t v4 = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *, uint64_t, uint64_t))(*(void *)this + 128))(this, v7, v8);
    (*(void (**)(AppleBCMWLANIO80211APSTAInterface *, void))(*(void *)this + 1248))(this, 0);
  }
  else
  {
    if (v6)
    {
      (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        long long v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v14, "[dk] %s@%d:APSTA: disable data path\n", "setInterfaceEnable", 535);
      }
    }
    (*(void (**)(AppleBCMWLANIO80211APSTAInterface *, void))(*(void *)this + 1256))(this, 0);
  }
  if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      int v12 = "Disable";
      if (a2) {
        int v12 = "Enable";
      }
      CCLogStream::logAlert(v11, "[dk] %s@%d:AppleBCMWLANIO80211APSTAInterface::(%s) ret=0x%08x\n", "setInterfaceEnable", 542, v12, v4);
    }
  }
  unint64_t v9 = *(AppleBCMWLANCore **)(*((void *)this + 17) + 536);
  if (v9) {
    AppleBCMWLANCore::reportSystemPowerState(v9, (unint64_t *)3, a2, 0);
  }
  return v4;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::setInterfaceEnable(AppleBCMWLANIO80211APSTAInterface *this, int a2)
{
  return AppleBCMWLANIO80211APSTAInterface::setInterfaceEnable((AppleBCMWLANIO80211APSTAInterface *)((char *)this - 48), a2);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::setPromiscuousModeEnable(AppleBCMWLANIO80211APSTAInterface *this, int a2)
{
  if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      uint64_t v6 = "Disable";
      if (a2) {
        uint64_t v6 = "Enable";
      }
      CCLogStream::logAlert(v5, "[dk] %s@%d:AppleBCMWLANIO80211APSTAInterface::(%s) ret=0x%08x\n", "setPromiscuousModeEnable", 557, v6, 0);
    }
  }
  IO80211SkywalkInterface::validateDispatchQueue(this);
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::setPromiscuousModeEnable(AppleBCMWLANIO80211APSTAInterface *this, int a2)
{
  return 0;
}

const char *AppleBCMWLANIO80211APSTAInterface::getBSDNamePrefix(AppleBCMWLANIO80211APSTAInterface *this)
{
  if ((AppleBCMWLANCore::getDebugFlags(*(AppleBCMWLANCore **)(*((void *)this + 17) + 536)) & 0x200) != 0) {
    return "aux";
  }
  else {
    return "ap";
  }
}

const char *non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::getBSDNamePrefix(AppleBCMWLANIO80211APSTAInterface *this)
{
  if ((AppleBCMWLANCore::getDebugFlags(*(AppleBCMWLANCore **)(*((void *)this + 11) + 536)) & 0x200) != 0) {
    return "aux";
  }
  else {
    return "ap";
  }
}

uint64_t AppleBCMWLANIO80211APSTAInterface::getInterfaceSubFamily(AppleBCMWLANIO80211APSTAInterface *this)
{
  return 3;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::getInterfaceSubFamily(AppleBCMWLANIO80211APSTAInterface *this)
{
  return 3;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::getBSDUnitNumber(AppleBCMWLANIO80211APSTAInterface *this)
{
  return 1;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::getBSDUnitNumber(AppleBCMWLANIO80211APSTAInterface *this)
{
  return 1;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::stop(AppleBCMWLANIO80211APSTAInterface *this, IOService *a2)
{
  uint64_t WorkQueue = IO80211SkywalkInterface::getWorkQueue(this);
  IO80211SkywalkInterface::validateDispatchQueue(this);
  if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logAlert(v16, "[dk] %s@%d:APSTA Skywalk Interface Stop\n", "stop", 597);
    }
  }
  uint64_t v5 = *((void *)this + 17);
  if (*(unsigned char *)(v5 + 676))
  {
    uint64_t v6 = 96;
    do
    {
      uint64_t v7 = *(void *)(v5 + 8 * v6);
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v7 + 272))(v7);
        uint64_t v5 = *((void *)this + 17);
        uint64_t v8 = *(void *)(v5 + 8 * v6);
        if (v8)
        {
          (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
          *(void *)(*((void *)this + 17) + 8 * v6) = 0;
          uint64_t v5 = *((void *)this + 17);
        }
      }
      unint64_t v9 = v6 - 95;
      ++v6;
    }
    while (v9 < *(unsigned __int8 *)(v5 + 676));
  }
  uint64_t v10 = *(void *)(v5 + 744);
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 200))(v10);
    uint64_t v5 = *((void *)this + 17);
    uint64_t v11 = *(void *)(v5 + 744);
    if (v11)
    {
      (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
      *(void *)(*((void *)this + 17) + 744) = 0;
      uint64_t v5 = *((void *)this + 17);
    }
  }
  uint64_t v12 = *(void *)(v5 + 752);
  if (v12)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 208))(v12);
    uint64_t v5 = *((void *)this + 17);
    uint64_t v13 = *(void *)(v5 + 752);
    if (v13)
    {
      (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
      *(void *)(*((void *)this + 17) + 752) = 0;
      uint64_t v5 = *((void *)this + 17);
    }
  }
  uint64_t v14 = *(void *)(v5 + 800);
  if (v14)
  {
    (*(void (**)(uint64_t))(*(void *)v14 + 72))(v14);
    (*(void (**)(uint64_t, void))(*(void *)WorkQueue + 72))(WorkQueue, *(void *)(*((void *)this + 17) + 800));
    uint64_t v15 = *(void *)(*((void *)this + 17) + 800);
    if (v15)
    {
      (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
      *(void *)(*((void *)this + 17) + 800) = 0;
    }
  }
  return IO80211SkywalkInterface::stop(this, a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::stop(AppleBCMWLANIO80211APSTAInterface *this, IOService *a2)
{
  return AppleBCMWLANIO80211APSTAInterface::stop((AppleBCMWLANIO80211APSTAInterface *)((char *)this - 48), a2);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::createChipInterface(AppleBCMWLANIO80211APSTAInterface *this)
{
  uint64_t v2 = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1008))(this);
  if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      uint64_t v5 = *(unsigned int *)(*((void *)this + 17) + 616);
      unsigned int InterfaceRole = IO80211SkywalkInterface::getInterfaceRole(this);
      CCLogStream::logAlert(v4, "[dk] %s@%d: created interface %02X:%02X:%02X:%02X:%02X:%02X bsscfg %lu role %lu\n", "createChipInterface", 642, v2, BYTE1(v2), BYTE2(v2), BYTE3(v2), BYTE4(v2), BYTE5(v2), v5, InterfaceRole);
    }
  }
  return 0;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::reset(AppleBCMWLANIO80211APSTAInterface *this)
{
  *(_DWORD *)(*((void *)this + 17) + 620) = 0;
  if ((AppleBCMWLANCore::getDebugFlags(*(AppleBCMWLANCore **)(*((void *)this + 17) + 536)) & 0x200) == 0) {
    IO80211SkywalkInterface::setInterfaceId(this, 0xFFFFFFFF);
  }
  AppleBCMWLANCore::setConcurrencyState(*(void **)(*((void *)this + 17) + 536), 4, 0);
  uint64_t v2 = (_OWORD *)*((void *)this + 17);
  *(_OWORD *)((char *)v2 + 184) = 0u;
  uint64_t v2 = (_OWORD *)((char *)v2 + 184);
  v2[13] = 0u;
  v2[14] = 0u;
  v2[11] = 0u;
  v2[12] = 0u;
  v2[9] = 0u;
  v2[10] = 0u;
  v2[7] = 0u;
  v2[8] = 0u;
  v2[5] = 0u;
  v2[6] = 0u;
  v2[3] = 0u;
  v2[4] = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  **((_DWORD **)this + 17) = 0;
  *(_DWORD *)(*((void *)this + 17) + 176) = 0;
  *(_DWORD *)(*((void *)this + 17) + 180) = 0;
  AppleBCMWLANIO80211APSTAInterface::setPowerSaveState(this, 0, 0xAu);
  (*(void (**)(void))(**(void **)(*((void *)this + 17) + 112) + 136))(*(void *)(*((void *)this + 17) + 112));
  (*(void (**)(void))(**(void **)(*((void *)this + 17) + 120) + 136))(*(void *)(*((void *)this + 17) + 120));
  if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logNotice(v5, "[dk] %s@%d:\n", "reset", 672);
    }
  }
  uint64_t v3 = *((void *)this + 17);
  *(void *)(v3 + 512) = 0;
  *(_OWORD *)(v3 + 480) = 0u;
  *(_OWORD *)(v3 + 496) = 0u;
  *(_OWORD *)(v3 + 448) = 0u;
  *(_OWORD *)(v3 + 464) = 0u;
  *(_OWORD *)(v3 + 432) = 0u;
  *(void *)(*((void *)this + 17) + 160) = 0;
  *(void *)(*((void *)this + 17) + 152) = 0;
  *(void *)(*((void *)this + 17) + 144) = 0;
  return 0;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::setPowerSaveState(AppleBCMWLANIO80211APSTAInterface *a1, unsigned int a2, unsigned int a3)
{
  mach_continuous_time();
  *(void *)buf = 0;
  uint64_t result = absolutetime_to_nanoseconds();
  uint64_t v7 = *((void *)a1 + 17);
  if (*(unsigned char *)(v7 + 14))
  {
    if (a3 == 7)
    {
      uint64_t result = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)a1 + 1024))(a1);
      if (result)
      {
        (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)a1 + 1024))(a1);
          uint64_t v9 = *(int *)(*((void *)a1 + 17) + 16);
          if (v9 > 3) {
            uint64_t v10 = "Unknown";
          }
          else {
            uint64_t v10 = off_100388590[v9];
          }
          if (a2 > 3) {
            uint64_t v36 = "Unknown";
          }
          else {
            uint64_t v36 = off_100388590[a2];
          }
          return CCLogStream::logInfo(v8, "[dk] %s@%d:LPHS power state %s change request to %s by Infra SCAN, ignored\n", "setPowerSaveState", 4802, v10, v36);
        }
      }
    }
    else
    {
      unsigned int v11 = *(_DWORD *)(v7 + 16);
      if (v11 != a2)
      {
        unint64_t v23 = *(void *)buf / 0xF4240uLL;
        uint64_t v24 = *(void *)(v7 + 424);
        if (v24)
        {
          AppleBCMWLANIO80211APSTAInterface::softApStatsAccumulatePowerStateDuration((uint64_t)a1, v11, v23 - v24);
          uint64_t v7 = *((void *)a1 + 17);
        }
        ++*(_DWORD *)(v7 + 16 * a2 + 456);
        *(void *)(*((void *)a1 + 17) + 424) = v23;
        switch(a2)
        {
          case 0u:
            AppleBCMWLANIO80211APSTAInterface::configureSoftAPPowerSaveOff(a1, a3);
            break;
          case 1u:
            AppleBCMWLANIO80211APSTAInterface::configureSoftAPPowerSaveActive(a1);
            break;
          case 2u:
            AppleBCMWLANIO80211APSTAInterface::configureSoftAPPowerSaveDynamic(a1);
            break;
          case 3u:
            AppleBCMWLANIO80211APSTAInterface::configureSoftAPPowerSaveLow(a1);
            break;
          default:
            break;
        }
      }
      if (AppleBCMWLANIO80211APSTAInterface::isSoftAPConcurrencyEnabled(a1))
      {
        if (!(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)a1 + 1024))(a1)
          || ((*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)a1 + 1024))(a1),
              (CCLogStream::shouldLogConsole() & 1) == 0))
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
          {
            BOOL isConcurrencyOpModeSet = AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(*((void *)a1 + 17) + 536), 1);
            BOOL v13 = AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(*((void *)a1 + 17) + 536), 2);
            BOOL v14 = AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(*((void *)a1 + 17) + 536), 4);
            BOOL v15 = AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(*((void *)a1 + 17) + 536), 8);
            BOOL v16 = AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(*((void *)a1 + 17) + 536), 16);
            *(_DWORD *)buf = 67111170;
            *(_DWORD *)&buf[4] = 78;
            __int16 v42 = 2080;
            uint64_t v43 = "setPowerSaveState";
            __int16 v44 = 1024;
            int v45 = 4846;
            __int16 v46 = 2080;
            uint64_t v47 = "setPowerSaveState";
            __int16 v48 = 1024;
            *(_DWORD *)uint64_t v49 = isConcurrencyOpModeSet;
            *(_WORD *)&v49[4] = 1024;
            *(_DWORD *)&v49[6] = v13;
            LOWORD(v50) = 1024;
            *(_DWORD *)((char *)&v50 + 2) = v14;
            HIWORD(v50) = 1024;
            *(_DWORD *)int v51 = v15;
            *(_WORD *)&v51[4] = 1024;
            *(_DWORD *)&v51[6] = v16;
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: %s: SoftAPConcurrencyEnabled: infra=%d awdl=%d softAp=%d nan=%d ir=%d\n", buf, 0x40u);
          }
        }
        if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)a1 + 1024))(a1);
            BOOL v18 = AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(*((void *)a1 + 17) + 536), 1);
            BOOL v19 = AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(*((void *)a1 + 17) + 536), 2);
            BOOL v20 = AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(*((void *)a1 + 17) + 536), 4);
            BOOL v21 = AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(*((void *)a1 + 17) + 536), 8);
            BOOL v22 = AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(*((void *)a1 + 17) + 536), 16);
            CCLogStream::logNotice(v17, "[dk] %s@%d:%s: SoftAPConcurrencyEnabled: infra=%d awdl=%d softAp=%d nan=%d ir=%d\n", "setPowerSaveState", 4846, "setPowerSaveState", v18, v19, v20, v21, v22);
          }
        }
      }
      if (!(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)a1 + 1024))(a1)
        || ((*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)a1 + 1024))(a1),
            (CCLogStream::shouldLogConsole() & 1) == 0))
      {
        BOOL v25 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT);
        if (v25)
        {
          uint64_t v26 = *(int *)(*((void *)a1 + 17) + 16);
          if (v26 > 3) {
            long long v27 = "Unknown";
          }
          else {
            long long v27 = off_100388590[v26];
          }
          if (a2 > 3) {
            int v28 = "Unknown";
          }
          else {
            int v28 = off_100388590[a2];
          }
          int v29 = AppleBCMWLANIO80211APSTAInterface::powerStateChangeReasonToString(v25, a3);
          int isSoftAPConcurrencyEnabled = AppleBCMWLANIO80211APSTAInterface::isSoftAPConcurrencyEnabled(a1);
          *(_DWORD *)buf = 67110914;
          OSStringPtr v31 = (const char *)&unk_10029A2CA;
          *(_DWORD *)&buf[4] = 65;
          __int16 v44 = 1024;
          __int16 v42 = 2080;
          int v45 = 4851;
          uint64_t v43 = "setPowerSaveState";
          if (isSoftAPConcurrencyEnabled) {
            OSStringPtr v31 = ", in Concurrent Mode";
          }
          __int16 v46 = 2080;
          uint64_t v47 = "setPowerSaveState";
          __int16 v48 = 2080;
          *(void *)uint64_t v49 = v27;
          *(_WORD *)&v49[8] = 2080;
          int v50 = v28;
          *(_WORD *)int v51 = 2080;
          *(void *)&v51[2] = v29;
          __int16 v52 = 2080;
          OSStringPtr v53 = v31;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: %s: LPHS power state changed %s -> %s, reason %s %s\n", buf, 0x4Au);
        }
      }
      uint64_t result = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)a1 + 1024))(a1);
      if (result)
      {
        (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          uint64_t v32 = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)a1 + 1024))(a1);
          OSStringPtr v33 = (CCLogStream *)v32;
          uint64_t v34 = *(int *)(*((void *)a1 + 17) + 16);
          if (v34 > 3) {
            uint64_t v35 = "Unknown";
          }
          else {
            uint64_t v35 = off_100388590[v34];
          }
          if (a2 > 3) {
            size_t v37 = "Unknown";
          }
          else {
            size_t v37 = off_100388590[a2];
          }
          long long v38 = AppleBCMWLANIO80211APSTAInterface::powerStateChangeReasonToString(v32, a3);
          int v39 = AppleBCMWLANIO80211APSTAInterface::isSoftAPConcurrencyEnabled(a1);
          size_t v40 = (const char *)&unk_10029A2CA;
          if (v39) {
            size_t v40 = ", in Concurrent Mode";
          }
          uint64_t result = CCLogStream::logAlert(v33, "[dk] %s@%d:%s: LPHS power state changed %s -> %s, reason %s %s\n", "setPowerSaveState", 4851, "setPowerSaveState", v35, v37, v38, v40);
        }
      }
      *(_DWORD *)(*((void *)a1 + 17) + 16) = a2;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::reset(AppleBCMWLANIO80211APSTAInterface *this)
{
  return 0;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::free(void **this)
{
  if (this[17])
  {
    AppleBCMWLANIO80211APSTAInterface::freeResources((AppleBCMWLANIO80211APSTAInterface *)this);
    bzero(this[17], 0x338uLL);
    uint64_t v2 = this[17];
    if (v2)
    {
      IOFree(v2, 0x338uLL);
      this[17] = 0;
    }
  }
  return IO80211VirtualInterface::free((IO80211VirtualInterface *)this);
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::free(void **this)
{
  return AppleBCMWLANIO80211APSTAInterface::free(this - 3);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::initSoftAPParameters(AppleBCMWLANIO80211APSTAInterface *this)
{
  uint64_t v2 = *((void *)this + 17);
  *(void *)(v2 + 512) = 0;
  *(_OWORD *)(v2 + 480) = 0u;
  *(_OWORD *)(v2 + 496) = 0u;
  *(_OWORD *)(v2 + 448) = 0u;
  *(_OWORD *)(v2 + 464) = 0u;
  *(_OWORD *)(v2 + 432) = 0u;
  *(void *)(*((void *)this + 17) + 424) = 0;
  uint64_t v3 = (_OWORD *)*((void *)this + 17);
  *(_OWORD *)((char *)v3 + 184) = 0u;
  uint64_t v3 = (_OWORD *)((char *)v3 + 184);
  v3[13] = 0u;
  v3[14] = 0u;
  v3[11] = 0u;
  v3[12] = 0u;
  v3[9] = 0u;
  v3[10] = 0u;
  v3[7] = 0u;
  v3[8] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  v3[3] = 0u;
  v3[4] = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  **((_DWORD **)this + 17) = 0;
  *(_WORD *)(*((void *)this + 17) + 22) = 1;
  *(_DWORD *)(*((void *)this + 17) + 24) = 15;
  *(_DWORD *)(*((void *)this + 17) + 28) = 30;
  *(_DWORD *)(*((void *)this + 17) + 32) = 1800;
  *(_DWORD *)(*((void *)this + 17) + 36) = 10;
  *(_DWORD *)(*((void *)this + 17) + 40) = 3;
  AppleBCMWLANIO80211APSTAInterface::setBeaconInterval(this, *(unsigned __int16 *)(*((void *)this + 17) + 20));
  int v4 = *(unsigned __int16 *)(*((void *)this + 17) + 22);
  return AppleBCMWLANIO80211APSTAInterface::setBeaconDTIMPeriod(this, v4);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::setBeaconInterval(AppleBCMWLANIO80211APSTAInterface *this, int a2)
{
  int v17 = a2;
  if (*(unsigned __int16 *)(*((void *)this + 17) + 104) == a2) {
    return 0;
  }
  __int16 v3 = a2;
  uint64_t WorkQueue = IO80211SkywalkInterface::getWorkQueue(this);
  if ((*(unsigned int (**)(uint64_t))(*(void *)WorkQueue + 136))(WorkQueue))
  {
    BOOL v14 = this;
    uint64_t v15 = (uint64_t)AppleBCMWLANIO80211APSTAInterface::handleSetBcnIntervalAsyncCallBack;
    uint64_t v16 = 0;
    uint64_t v6 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
    v13[0] = &v17;
    v13[1] = 4;
    uint64_t v2 = AppleBCMWLANCommander::sendVirtualIOCtlSet(v6, InterfaceId, 76, (uint64_t)v13, kNoRxExpected, (uint64_t)&v14, 0);
LABEL_9:
    *(_WORD *)(*((void *)this + 17) + 104) = v3;
    return v2;
  }
  uint64_t v8 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
  unsigned __int8 v9 = IO80211SkywalkInterface::getInterfaceId(this);
  BOOL v14 = (AppleBCMWLANIO80211APSTAInterface *)&v17;
  uint64_t v15 = 4;
  uint64_t v2 = AppleBCMWLANCommander::runVirtualIOCtlSet(v8, v9, 76, (uint64_t)&v14, 0, 0);
  if (!v2) {
    goto LABEL_9;
  }
  if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      unsigned int v11 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)this + 17) + 536)
                                                                     + 112))(*(void *)(*((void *)this + 17) + 536), v2);
      CCLogStream::logAlert(v10, "[dk] %s@%d:ERROR: Setting SoftAP beacon interval fails, error %s\n", "setBeaconInterval", 4201, v11);
    }
  }
  return v2;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::setBeaconDTIMPeriod(AppleBCMWLANIO80211APSTAInterface *this, int a2)
{
  int v17 = a2;
  if (*(unsigned __int16 *)(*((void *)this + 17) + 106) == a2) {
    return 0;
  }
  __int16 v3 = a2;
  uint64_t WorkQueue = IO80211SkywalkInterface::getWorkQueue(this);
  if ((*(unsigned int (**)(uint64_t))(*(void *)WorkQueue + 136))(WorkQueue))
  {
    BOOL v14 = this;
    uint64_t v15 = (uint64_t)AppleBCMWLANIO80211APSTAInterface::handleSetBcnDTIMPeriodAsyncCallBack;
    uint64_t v16 = 0;
    uint64_t v6 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
    v13[0] = &v17;
    v13[1] = 4;
    uint64_t v2 = AppleBCMWLANCommander::sendVirtualIOCtlSet(v6, InterfaceId, 78, (uint64_t)v13, kNoRxExpected, (uint64_t)&v14, 0);
LABEL_9:
    *(_WORD *)(*((void *)this + 17) + 106) = v3;
    return v2;
  }
  uint64_t v8 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
  unsigned __int8 v9 = IO80211SkywalkInterface::getInterfaceId(this);
  BOOL v14 = (AppleBCMWLANIO80211APSTAInterface *)&v17;
  uint64_t v15 = 4;
  uint64_t v2 = AppleBCMWLANCommander::runVirtualIOCtlSet(v8, v9, 78, (uint64_t)&v14, 0, 0);
  if (!v2) {
    goto LABEL_9;
  }
  if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      unsigned int v11 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)this + 17) + 536)
                                                                     + 112))(*(void *)(*((void *)this + 17) + 536), v2);
      CCLogStream::logAlert(v10, "[dk] %s@%d:ERROR: Setting SoftAP beacon DTIM period fails, error %s\n", "setBeaconDTIMPeriod", 4239, v11);
    }
  }
  return v2;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::getSSID(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(*(void *)(a1 + 136) + 628);
  if (v2 > 0x20) {
    return 22;
  }
  *(_DWORD *)(a2 + 4) = v2;
  memcpy((void *)(a2 + 8), (const void *)(*(void *)(a1 + 136) + 632), *(unsigned int *)(*(void *)(a1 + 136) + 628));
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::getSSID(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(*(void *)(a1 + 24) + 628);
  if (v2 > 0x20) {
    return 22;
  }
  *(_DWORD *)(a2 + 4) = v2;
  memcpy((void *)(a2 + 8), (const void *)(*(void *)(a1 + 24) + 632), *(unsigned int *)(*(void *)(a1 + 24) + 628));
  return 0;
}

{
  unsigned int v2;

  unsigned int v2 = *(_DWORD *)(*(void *)(a1 + 8) + 628);
  if (v2 > 0x20) {
    return 22;
  }
  *(_DWORD *)(a2 + 4) = v2;
  memcpy((void *)(a2 + 8), (const void *)(*(void *)(a1 + 8) + 632), *(unsigned int *)(*(void *)(a1 + 8) + 628));
  return 0;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::getCHANNEL(IO80211SkywalkInterface *a1, uint64_t a2)
{
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  int v14 = -1431655766;
  v12[0] = &v13;
  v12[1] = 0xC000C000CLL;
  int v4 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  uint64_t v6 = AppleBCMWLANCommander::runVirtualIOCtlGet(v4, InterfaceId, 29, (uint64_t)&kNoTxPayload, (uint64_t)v12, 0);
  if (v6)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v8 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)a1 + 17) + 536)
                                                                      + 112))(*(void *)(*((void *)a1 + 17) + 536), v6);
        CCLogStream::logCrit(v7, "[dk] %s@%d: WLC_GET_CHANNEL failed, error %s  \n", "getCHANNEL", 771, v8);
      }
    }
  }
  else
  {
    if (SHIDWORD(v13) <= 14) {
      int v9 = 8;
    }
    else {
      int v9 = 16;
    }
    int v10 = *(_DWORD *)(a2 + 12) | v9;
    *(_DWORD *)(a2 + 8) = HIDWORD(v13);
    *(_DWORD *)(a2 + 12) = v10;
  }
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::getCHANNEL(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANIO80211APSTAInterface::getCHANNEL((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANIO80211APSTAInterface::getCHANNEL((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::getSTATE(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 4) = 4;
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::getSTATE(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 4) = 4;
  return 0;
}

{
  *(_DWORD *)(a2 + 4) = 4;
  return 0;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::getOP_MODE(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 22;
  }
  uint64_t result = 0;
  *a2 = 1;
  a2[1] = 8 * (*(_DWORD *)(*(void *)(a1 + 136) + 620) != 0);
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::getOP_MODE(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 22;
  }
  uint64_t result = 0;
  *a2 = 1;
  a2[1] = 8 * (*(_DWORD *)(*(void *)(a1 + 24) + 620) != 0);
  return result;
}

{
  uint64_t result;

  if (!a2) {
    return 22;
  }
  uint64_t result = 0;
  *a2 = 1;
  a2[1] = 8 * (*(_DWORD *)(*(void *)(a1 + 8) + 620) != 0);
  return result;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::getSTATION_LIST(IO80211SkywalkInterface *a1, _DWORD *a2)
{
  if (!a2) {
    return 22;
  }
  if (!*(_DWORD *)(*((void *)a1 + 17) + 620)) {
    return 57;
  }
  uint64_t v4 = 3758097085;
  uint64_t v5 = (unsigned int *)IOMallocZeroData();
  if (v5)
  {
    uint64_t v6 = v5;
    unsigned int *v5 = 42;
    uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 17) + 536) + 88))(*(void *)(*((void *)a1 + 17) + 536));
    if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 136))(v7))
    {
      BOOL v22 = (unsigned int *)a1;
      uint64_t v23 = (uint64_t)AppleBCMWLANIO80211APSTAInterface::getAssocListAsyncCallback;
      uint64_t v24 = 0;
      uint64_t v8 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552);
      unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
      BOOL v20 = v6;
      uint64_t v21 = 256;
      int v19 = 16777472;
      uint64_t v10 = AppleBCMWLANCommander::sendVirtualIOCtlGet(v8, InterfaceId, 159, (uint64_t)&v20, (unsigned __int16 *)&v19, (uint64_t)&v22, 0);
      if (v10)
      {
        uint64_t v11 = v10;
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            int v17 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            BOOL v18 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v11);
            CCLogStream::logCrit(v17, "[dk] %s@%d: unable to query list of associated STAs %s\n", "getSTATION_LIST", 829, v18);
          }
        }
      }
      IOFreeData();
      return 3758097112;
    }
    else
    {
      BOOL v22 = v6;
      uint64_t v23 = 0x10001000100;
      uint64_t v12 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552);
      unsigned __int8 v13 = IO80211SkywalkInterface::getInterfaceId(a1);
      BOOL v20 = v6;
      uint64_t v21 = 256;
      uint64_t v4 = AppleBCMWLANCommander::runVirtualIOCtlGet(v12, v13, 159, (uint64_t)&v20, (uint64_t)&v22, 0);
      if (v4)
      {
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            int v14 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            uint64_t v15 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v4);
            CCLogStream::logCrit(v14, "[dk] %s@%d: unable to query list of associated STAs %s\n", "getSTATION_LIST", 841, v15);
          }
        }
      }
      else
      {
        AppleBCMWLANIO80211APSTAInterface::convertBCMAssocListToAppleAssocList((uint64_t)a1, v6, a2);
      }
      IOFreeData();
    }
  }
  return v4;
}

AppleBCMWLANIO80211APSTAInterface *AppleBCMWLANIO80211APSTAInterface::getAssocListAsyncCallback(AppleBCMWLANIO80211APSTAInterface *result, uint64_t a2, uint64_t a3, unsigned int **a4)
{
  uint64_t v4 = result;
  if (a3)
  {
    uint64_t result = (AppleBCMWLANIO80211APSTAInterface *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)result + 1024))(result);
    if (result)
    {
      (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v4 + 1024))(v4);
      uint64_t result = (AppleBCMWLANIO80211APSTAInterface *)CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v4 + 1024))(v4);
        uint64_t v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)v4 + 17) + 536)
                                                                      + 112))(*(void *)(*((void *)v4 + 17) + 536), a3);
        return (AppleBCMWLANIO80211APSTAInterface *)CCLogStream::logCrit(v6, "[dk] %s@%d:  failed, error %s\n", "getAssocListAsyncCallback", 3055, v7);
      }
    }
  }
  else if (*a4)
  {
    uint64_t result = (AppleBCMWLANIO80211APSTAInterface *)IOMallocZeroData();
    if (result)
    {
      uint64_t v9 = (uint64_t)result;
      AppleBCMWLANIO80211APSTAInterface::convertBCMAssocListToAppleAssocList((uint64_t)v4, *a4, result);
      AppleBCMWLANIO80211APSTAInterface::checkForStationListMismatch(v4, v9);
      return (AppleBCMWLANIO80211APSTAInterface *)IOFreeData();
    }
  }
  return result;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::convertBCMAssocListToAppleAssocList(uint64_t result, unsigned int *a2, _DWORD *a3)
{
  unsigned int v5 = *a2;
  if (*a2 < 0x81)
  {
    *a3 = 1;
    a3[1] = v5;
    if (!v5) {
      return result;
    }
  }
  else
  {
    uint64_t v6 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1024))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v6 + 1024))(v6);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 1024))(v6);
        uint64_t result = CCLogStream::logCrit(v11, "[dk] %s@%d: Exceeded maximal number of STA (%ld)\n", "convertBCMAssocListToAppleAssocList", 867, *a2);
      }
    }
    *a2 = 128;
    *(void *)a3 = 0x8000000001;
  }
  unint64_t v7 = 0;
  uint64_t v8 = a3 + 3;
  uint64_t v9 = 4;
  do
  {
    *(v8 - 1) = 1;
    int v10 = *(unsigned int *)((char *)a2 + v9);
    *((_WORD *)v8 + 2) = *(_WORD *)((char *)a2 + v9 + 4);
    *uint64_t v8 = v10;
    v8[2] = 0;
    if (v7 > 0x28) {
      break;
    }
    ++v7;
    v8 += 4;
    v9 += 6;
  }
  while (v7 < *a2);
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::getSTATION_LIST(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANIO80211APSTAInterface::getSTATION_LIST((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANIO80211APSTAInterface::getSTATION_LIST((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::getPEER_CACHE_MAXIMUM_SIZE(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 4) = 8;
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::getPEER_CACHE_MAXIMUM_SIZE(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 4) = 8;
  return 0;
}

{
  *(_DWORD *)(a2 + 4) = 8;
  return 0;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::getHOST_AP_MODE_HIDDEN(IO80211SkywalkInterface *a1, uint64_t a2)
{
  unsigned int v15 = 0;
  if (!a2) {
    return 22;
  }
  *(void *)a2 = 1;
  v14[0] = &v15;
  v14[1] = 0x400040004;
  uint64_t v4 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  uint64_t v6 = AppleBCMWLANCommander::runVirtualIOVarGet(v4, InterfaceId, "closednet", (uint64_t)&kNoTxPayload, (uint64_t)v14, 0);
  uint64_t v7 = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
  if (v6)
  {
    if (v7)
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v9 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v6);
        CCLogStream::logAlert(v8, "[dk] %s@%d: Error: cannot get closednet : retval %x: %s\n", "getHOST_AP_MODE_HIDDEN", 916, v6, v9);
      }
    }
  }
  else
  {
    if (v7)
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        unsigned int v12 = v15;
        unsigned __int8 v13 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, void))(*(void *)a1 + 856))(a1, 0);
        CCLogStream::logInfo(v11, "[dk] %s@%d:get closednet : hidden %d, retval %x: %s\n", "getHOST_AP_MODE_HIDDEN", 909, v12, 0, v13);
      }
    }
    if (v15 <= 1) {
      *(_DWORD *)(a2 + 4) = v15;
    }
  }
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::getHOST_AP_MODE_HIDDEN(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANIO80211APSTAInterface::getHOST_AP_MODE_HIDDEN((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANIO80211APSTAInterface::getHOST_AP_MODE_HIDDEN((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::setPEER_CACHE_CONTROL(IO80211SkywalkInterface *a1, uint64_t a2)
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::setPEER_CACHE_CONTROL(uint64_t a1, uint64_t a2)
{
  return 0;
}

{
  AppleBCMWLANCore::completePeerCacheControl(*(IO80211Controller **)(*(void *)(a1 + 8) + 536), a2, (IO80211SkywalkInterface *)(a1 - 128));
  return 0;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::setHOST_AP_MODE(IO80211SkywalkInterface *a1, uint64_t a2)
{
  if (a2) {
    BOOL v4 = *(_DWORD *)(a2 + 28) != 0;
  }
  else {
    BOOL v4 = 0;
  }
  Proximityuint64_t Interface = (AppleBCMWLANProximityInterface *)AppleBCMWLANCore::getProximityInterface(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 536));
  P2PNANMgmtDatauint64_t Interface = (AppleBCMWLANNANInterface *)AppleBCMWLANCore::getP2PNANMgmtDataInterface(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 536));
  P2PNANDatauint64_t Interface = (AppleBCMWLANNANDataInterface *)AppleBCMWLANCore::getP2PNANDataInterface(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 536));
  if (!v4)
  {
    uint64_t v15 = AppleBCMWLANIO80211APSTAInterface::setHostApModeInternal(a1, a2);
    if ((AppleBCMWLANCore::isConcurrencyEnabled(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 536)) & 1) == 0)
    {
      if (!ProximityInterface) {
        goto LABEL_41;
      }
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          BOOL v18 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logNotice(v18, "[dk] %s@%d:softAP ended; bringing up AWDL again\n", "setHOST_AP_MODE", 972);
        }
      }
      if (AppleBCMWLANCore::isPoweredOnOrRestricted(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 536))
        && !AppleBCMWLANCore::isPoweringOff(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 536))
        && (uint64_t v15 = AppleBCMWLANProximityInterface::bringupLink(ProximityInterface), v15)
        && (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)
        && ((*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1),
            CCLogStream::shouldLog()))
      {
        int v28 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        int v29 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v15);
        CCLogStream::logAlert(v28, "[dk] %s@%d:Unable to bring UP AWDL: %s\n", "setHOST_AP_MODE", 976, v29);
        if (!P2PNANMgmtDataInterface) {
          return v15;
        }
      }
      else
      {
LABEL_41:
        if (!P2PNANMgmtDataInterface) {
          return v15;
        }
      }
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          int v19 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logNotice(v19, "[dk] %s@%d:softAP ended; bringing up NAN again\n", "setHOST_AP_MODE", 983);
        }
      }
      if (AppleBCMWLANCore::isPoweredOnOrRestricted(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 536))
        && !AppleBCMWLANCore::isPoweringOff(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 536))
        && (uint64_t v15 = AppleBCMWLANNANInterface::bringupLink(P2PNANMgmtDataInterface), v15)
        && (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)
        && ((*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1),
            CCLogStream::shouldLog()))
      {
        __int16 v30 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        OSStringPtr v31 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v15);
        CCLogStream::logAlert(v30, "[dk] %s@%d:Unable to bring UP NAN: %s\n", "setHOST_AP_MODE", 987, v31);
        if (P2PNANDataInterface)
        {
LABEL_51:
          if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
          {
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            if (CCLogStream::shouldLog())
            {
              BOOL v25 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              CCLogStream::logNotice(v25, "[dk] %s@%d:softAP ended; bringing up NDI again\n", "setHOST_AP_MODE", 991);
            }
          }
          if (AppleBCMWLANCore::isPoweredOnOrRestricted(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 536))
            && !AppleBCMWLANCore::isPoweringOff(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 536)))
          {
            uint64_t v15 = AppleBCMWLANNANDataInterface::bringupLink(P2PNANDataInterface);
            if (v15)
            {
              if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
              {
                (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v32 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                  OSStringPtr v33 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v15);
                  CCLogStream::logAlert(v32, "[dk] %s@%d:Unable to bring UP NDI: %s\n", "setHOST_AP_MODE", 995, v33);
                }
              }
            }
          }
        }
      }
      else if (P2PNANDataInterface)
      {
        goto LABEL_51;
      }
    }
    return v15;
  }
  if ((AppleBCMWLANCore::isConcurrencyEnabled(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 536)) & 1) == 0)
  {
    if (!ProximityInterface) {
      goto LABEL_13;
    }
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v16 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logNotice(v16, "[dk] %s@%d:Tearing down AWDL before bringing up softAP\n", "setHOST_AP_MODE", 944);
      }
    }
    uint64_t v8 = AppleBCMWLANProximityInterface::bringdownLink(ProximityInterface);
    if (v8
      && (uint64_t v9 = v8, (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      && ((*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1),
          CCLogStream::shouldLog()))
    {
      BOOL v20 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v21 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v9);
      CCLogStream::logAlert(v20, "[dk] %s@%d:Unable to quiesce AWDL: %s\n", "setHOST_AP_MODE", 947, v21);
      if (!P2PNANMgmtDataInterface) {
        goto LABEL_28;
      }
    }
    else
    {
LABEL_13:
      if (!P2PNANMgmtDataInterface) {
        goto LABEL_28;
      }
    }
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v17 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logNotice(v17, "[dk] %s@%d:Tearing down NAN before bringing up softAP\n", "setHOST_AP_MODE", 953);
      }
    }
    uint64_t v10 = AppleBCMWLANNANInterface::bringdownLink(P2PNANMgmtDataInterface);
    if (v10
      && (uint64_t v11 = v10, (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      && ((*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1),
          CCLogStream::shouldLog()))
    {
      BOOL v22 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v23 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v11);
      CCLogStream::logAlert(v22, "[dk] %s@%d:Unable to quiesce NAN: %s\n", "setHOST_AP_MODE", 956, v23);
      if (P2PNANDataInterface)
      {
LABEL_21:
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v24 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            CCLogStream::logNotice(v24, "[dk] %s@%d:Tearing down NAN Data Interface before bringing up softAP\n", "setHOST_AP_MODE", 960);
          }
        }
        uint64_t v12 = AppleBCMWLANNANDataInterface::bringdownLink(P2PNANDataInterface);
        if (v12)
        {
          uint64_t v13 = v12;
          if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
          {
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v26 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              long long v27 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v13);
              CCLogStream::logAlert(v26, "[dk] %s@%d:Unable to quiesce NDI: %s\n", "setHOST_AP_MODE", 963, v27);
            }
          }
        }
      }
    }
    else if (P2PNANDataInterface)
    {
      goto LABEL_21;
    }
  }
LABEL_28:
  return AppleBCMWLANIO80211APSTAInterface::setHostApModeInternal(a1, a2);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::setHostApModeInternal(IO80211SkywalkInterface *a1, uint64_t a2)
{
  if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)
    || ((*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1),
        !CCLogStream::shouldLog()))
  {
    if (a2) {
      goto LABEL_4;
    }
LABEL_146:
    (*(void (**)(IO80211SkywalkInterface *, uint64_t, uint64_t))(*(void *)a1 + 128))(a1, 1, 130);
    if (!*(_DWORD *)(*((void *)a1 + 17) + 620))
    {
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          v148 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logWarn(v148, "[dk] %s@%d: : stop ap requested while not up\n", "setHostApModeInternal", 1026);
        }
      }
      AppleBCMWLANCore::setConcurrencyState(*(void **)(*((void *)a1 + 17) + 536), 4, 0);
      if (!*(_DWORD *)(*((void *)a1 + 17) + 624)) {
        return 0;
      }
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          v154 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logAlert(v154, "[dk] %s@%d:Cleaning up SoftAP interface from FW\n", "setHostApModeInternal", 1034);
        }
      }
      if (AppleBCMWLANCore::isHostAssignedInterfaceIndex(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 536)))
      {
        v95 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552);
        unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
        AppleBCMWLANCommander::runVirtualIOVarSet(v95, InterfaceId, "interface_remove", (uint64_t)&kNoTxPayload, 0, 0);
      }
      goto LABEL_236;
    }
    uint64_t v227 = 0;
LABEL_148:
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        v140 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v140, "[dk] %s@%d:User request to stop SoftAP\n", "setHostApModeInternal", 1065);
      }
    }
    AppleBCMWLANIO80211APSTAInterface::resetSoftAPLowPowerMode(a1);
    uint64_t v83 = *((void *)a1 + 17);
    if (*(_DWORD *)(v83 + 620))
    {
      AppleBCMWLANIO80211APSTAInterface::setPowerSaveState(a1, 0, 0xCu);
      *(unsigned char *)(*((void *)a1 + 17) + 14) = 0;
      uint64_t v83 = *((void *)a1 + 17);
    }
    if (*(unsigned char *)(v83 + 808))
    {
      AppleBCMWLANIO80211APSTAInterface::configureSoftAPPeerStats(a1, 0);
      uint64_t v83 = *((void *)a1 + 17);
    }
    *(_DWORD *)(v83 + 620) = 0;
    atomic_fetch_or((atomic_uint *volatile)(*((void *)a1 + 17) + 664), 0x10000000u);
    (*(void (**)(IO80211SkywalkInterface *, uint64_t, void, void, void))(*(void *)a1 + 512))(a1, 8, 0, 0, 0);
    AppleBCMWLANCore::postMessageInfra(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 536), 8u, 0, 0);
    (*(void (**)(IO80211SkywalkInterface *, uint64_t, void, void, void))(*(void *)a1 + 512))(a1, 4, 0, 0, 0);
    uint64_t v84 = *((void *)a1 + 17);
    if (*(_DWORD *)v84)
    {
      LODWORD(v233[0]) = -1431633921;
      LODWORD(v229) = -1431655766;
      v228 = (int **)0xAAAAAAAAAAAAAAAALL;
      v232 = (int *)0xFFFFFFFF00000003;
      *(void *)v231 = &v228;
      *(void *)&v231[8] = 0xC000C000CLL;
      v85 = *(AppleBCMWLANCommander **)(v84 + 552);
      unsigned __int8 v86 = IO80211SkywalkInterface::getInterfaceId(a1);
      v230[0] = &v232;
      v230[1] = 12;
      uint64_t v87 = AppleBCMWLANCommander::runVirtualIOCtlSet(v85, v86, 201, (uint64_t)v230, (uint64_t)v231, 0);
      if (v87)
      {
        uint64_t v88 = v87;
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            v149 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            v150 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)a1 + 17) + 536)
                                                                            + 112))(*(void *)(*((void *)a1 + 17) + 536), v88);
            CCLogStream::logCrit(v149, "[dk] %s@%d:  WLC_SCB_DEAUTHENTICATE_FOR_REASON failed, error %s\n", "setHostApModeInternal", 1096, v150);
          }
        }
      }
      v230[0] = 0;
      LODWORD(v230[1]) = 0;
      AppleBCMWLANIO80211APSTAInterface::postMessageForSTA(a1, 13, v230, 0xCu);
      v89 = (_OWORD *)*((void *)a1 + 17);
      *(_OWORD *)((char *)v89 + 184) = 0u;
      v89 = (_OWORD *)((char *)v89 + 184);
      v89[13] = 0u;
      v89[14] = 0u;
      v89[11] = 0u;
      v89[12] = 0u;
      v89[9] = 0u;
      v89[10] = 0u;
      v89[7] = 0u;
      v89[8] = 0u;
      v89[5] = 0u;
      v89[6] = 0u;
      v89[3] = 0u;
      v89[4] = 0u;
      v89[1] = 0u;
      v89[2] = 0u;
      **((_DWORD **)a1 + 17) = 0;
      uint64_t v84 = *((void *)a1 + 17);
    }
    AppleBCMWLANCore::setTXQueueEnabled(*(void *)(v84 + 536), 0);
    (*(void (**)(void))(**(void **)(*((void *)a1 + 17) + 112) + 136))(*(void *)(*((void *)a1 + 17) + 112));
    (*(void (**)(void))(**(void **)(*((void *)a1 + 17) + 120) + 136))(*(void *)(*((void *)a1 + 17) + 120));
    (*(void (**)(IO80211SkywalkInterface *, uint64_t, uint64_t))(*(void *)a1 + 1352))(a1, 1, 1);
    AppleBCMWLANCore::setConcurrencyState(*(void **)(*((void *)a1 + 17) + 536), 4, 0);
    uint64_t v90 = *((void *)a1 + 17);
    *(void *)(v90 + 512) = 0;
    *(_OWORD *)(v90 + 480) = 0u;
    *(_OWORD *)(v90 + 496) = 0u;
    *(_OWORD *)(v90 + 448) = 0u;
    *(_OWORD *)(v90 + 464) = 0u;
    *(_OWORD *)(v90 + 432) = 0u;
    *(void *)(*((void *)a1 + 17) + 160) = 0;
    *(void *)(*((void *)a1 + 17) + 152) = 0;
    *(void *)(*((void *)a1 + 17) + 144) = 0;
    uint64_t v91 = *((void *)a1 + 17);
    uint64_t v227 = *(unsigned int *)(v91 + 616);
    v92 = *(AppleBCMWLANCommander **)(v91 + 552);
    unsigned __int8 v93 = IO80211SkywalkInterface::getInterfaceId(a1);
    *(void *)v231 = &v227;
    *(void *)&v231[8] = 8;
    uint64_t v94 = AppleBCMWLANCommander::runVirtualIOVarSet(v92, v93, "bss", (uint64_t)v231, 0, 0);
    if (v94)
    {
      uint64_t v6 = v94;
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          v144 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logAlert(v144, "[dk] %s@%d: Failed SET IOCTL, cret[0x%08x]\n", "setHostApModeInternal", 1130, v6);
        }
      }
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          v145 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          v146 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v6);
          CCLogStream::logCrit(v145, "[dk] %s@%d: can't bring down bss, error %s\n", "setHostApModeInternal", 1133, v146);
        }
      }
LABEL_168:
      atomic_fetch_and((atomic_uint *volatile)(*((void *)a1 + 17) + 664), 0xEFFFFFFF);
      return v6;
    }
    ConfigManager = (AppleBCMWLANConfigManager *)AppleBCMWLANCore::getConfigManager(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 536));
    if (AppleBCMWLANConfigManager::is80211NEnabledForAPMode(ConfigManager)
      && !AppleBCMWLANCore::isRestrictedCountry(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 536)))
    {
      *(_OWORD *)v231 = 0uLL;
      v98 = (AppleBCMWLANConfigManager *)AppleBCMWLANCore::getConfigManager(*(AppleBCMWLANCore **)(*((void *)a1 + 17)
                                                                                                 + 536));
      if (AppleBCMWLANConfigManager::isEnhancedLocaleEnabled(v98))
      {
        LODWORD(v230[0]) = 1;
        *(void *)v231 = v230;
        *(void *)&v231[8] = 4;
        uint64_t v99 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552), (uint64_t)"ccode_pr_2g", (uint64_t)v231, 0, 0);
        if (v99)
        {
          uint64_t v6 = v99;
          if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
          {
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            if (CCLogStream::shouldLog())
            {
              v100 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              (*(void (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v6);
              CCLogStream::logAlert(v100, "[dk] %s@%d: Error: Unable to set ccode_pr_2g \"%d\" : %s\n");
            }
          }
          goto LABEL_168;
        }
      }
      v101 = (AppleBCMWLANConfigManager *)AppleBCMWLANCore::getConfigManager(*(AppleBCMWLANCore **)(*((void *)a1 + 17)
                                                                                                  + 536));
      if (AppleBCMWLANConfigManager::isAutoCountryEnabled(v101))
      {
        LODWORD(v232) = 1;
        *(void *)v231 = &v232;
        *(void *)&v231[8] = 4;
        if (AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552), (uint64_t)"autocountry", (uint64_t)v231, 0, 0))
        {
          v102 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552);
          v230[0] = &v232;
          v230[1] = 4;
          uint64_t v103 = AppleBCMWLANCommander::runIOCtlSet(v102, 47, (uint64_t)v230, 0, 0);
          if (v103)
          {
            uint64_t v6 = v103;
            if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
            {
              (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              if (CCLogStream::shouldLog())
              {
                v104 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                (*(void (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v6);
                CCLogStream::logAlert(v104, "[dk] %s@%d: Error: Unable to set regulatory \"%d\" : %s\n");
              }
            }
            goto LABEL_168;
          }
        }
      }
    }
    JoinAdapter = (AppleBCMWLANJoinAdapter *)AppleBCMWLANCore::getJoinAdapter(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 536));
    char isJoining = AppleBCMWLANJoinAdapter::isJoining(JoinAdapter);
    if ((AppleBCMWLANCore::isAssociated(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 536)) & 1) == 0
      && (isJoining & 1) == 0)
    {
      AppleBCMWLANBGScanAdapter::enablePrivateMACForScans(*(AppleBCMWLANBGScanAdapter **)(*((void *)a1 + 17) + 576));
      AppleBCMWLANBGScanAdapter::generateAndApplyNewPrivateMACForScans(*(AppleBCMWLANCore ****)(*((void *)a1 + 17)
                                                                                              + 576));
      AppleBCMWLANPowerManager::configureSISOPowerSavePolicy(*(AppleBCMWLANPowerManager **)(*((void *)a1 + 17) + 584));
      AppleBCMWLANIO80211APSTAInterface::enableInfraFeaturesForSoftAP(a1);
      AppleBCMWLANCore::clearEventBit(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 536), 5u);
    }
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        v153 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logNotice(v153, "[dk] %s@%d: interface is down!\n", "setHostApModeInternal", 1201);
      }
    }
    atomic_fetch_and((atomic_uint *volatile)(*((void *)a1 + 17) + 664), 0xEFFFFFFF);
    uint64_t v107 = *((void *)a1 + 17);
    if (*(unsigned char *)(v107 + 810))
    {
      LODWORD(v230[0]) = 0;
      v108 = *(AppleBCMWLANCommander **)(v107 + 552);
      unsigned __int8 v109 = IO80211SkywalkInterface::getInterfaceId(a1);
      *(void *)v231 = v230;
      *(void *)&v231[8] = 4;
      uint64_t v110 = AppleBCMWLANCommander::runVirtualIOVarSet(v108, v109, "wsec", (uint64_t)v231, 0, 0);
      if (v110)
      {
        uint64_t v6 = v110;
        if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
          return v6;
        }
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (!CCLogStream::shouldLog()) {
          return v6;
        }
        uint64_t v78 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        (*(void (**)(void, uint64_t))(**(void **)(*((void *)a1 + 17) + 536) + 112))(*(void *)(*((void *)a1 + 17) + 536), v6);
LABEL_202:
        CCLogStream::logCrit(v78, "[dk] %s@%d:  wsec (0x%lx) failed, error %s\n");
        return v6;
      }
      LODWORD(v232) = 0;
      v111 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552);
      unsigned __int8 v112 = IO80211SkywalkInterface::getInterfaceId(a1);
      *(void *)v231 = &v232;
      *(void *)&v231[8] = 4;
      uint64_t v113 = AppleBCMWLANCommander::runVirtualIOCtlSet(v111, v112, 165, (uint64_t)v231, 0, 0);
      if (v113)
      {
        uint64_t v6 = v113;
        if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
          return v6;
        }
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (!CCLogStream::shouldLog()) {
          return v6;
        }
        v114 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        (*(void (**)(void, uint64_t))(**(void **)(*((void *)a1 + 17) + 536) + 112))(*(void *)(*((void *)a1 + 17) + 536), v6);
LABEL_207:
        CCLogStream::logCrit(v114, "[dk] %s@%d:  WLC_SET_WPA_AUTH failed, error %s\n");
        return v6;
      }
      v115 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552);
      unsigned __int8 v116 = IO80211SkywalkInterface::getInterfaceId(a1);
      uint64_t v117 = AppleBCMWLANCommander::runVirtualIOCtlSet(v115, v116, 3, (uint64_t)&kNoTxPayload, 0, 0);
      if (v117)
      {
        uint64_t v6 = v117;
        if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
          return v6;
        }
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (!CCLogStream::shouldLog()) {
          return v6;
        }
        int v50 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v219 = (*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v6);
        uint64_t v118 = 1223;
        goto LABEL_212;
      }
      uint64_t v119 = IOMallocZeroData();
      uint64_t v120 = v119;
      if (v119) {
        uint64_t v121 = 12;
      }
      else {
        uint64_t v121 = 0;
      }
      *(void *)uint64_t v119 = 0x1000100080001;
      *(unsigned char *)(v119 + 8) = 0;
      v122 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552);
      unsigned __int8 v123 = IO80211SkywalkInterface::getInterfaceId(a1);
      *(void *)v231 = v120;
      *(void *)&v231[8] = v121;
      uint64_t v124 = AppleBCMWLANCommander::runVirtualIOVarSet(v122, v123, "idauth", (uint64_t)v231, 0, 0);
      if (v124)
      {
        uint64_t v6 = v124;
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            v125 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            int v126 = IO80211SkywalkInterface::getInterfaceId(a1);
            v127 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)a1 + 17) + 536)
                                                                            + 112))(*(void *)(*((void *)a1 + 17) + 536), v6);
            CCLogStream::logCrit(v125, "[dk] %s@%d:  Auth Config failed : inf:%d %x %s\n", "setHostApModeInternal", 1248, v126, v6, v127);
          }
        }
        goto LABEL_225;
      }
      v128 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552);
      unsigned __int8 v129 = IO80211SkywalkInterface::getInterfaceId(a1);
      uint64_t v130 = AppleBCMWLANCommander::runVirtualIOCtlSet(v128, v129, 2, (uint64_t)&kNoTxPayload, 0, 0);
      if (v130)
      {
        uint64_t v6 = v130;
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            v206 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            v207 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v6);
            CCLogStream::logAlert(v206, "[dk] %s@%d: cant bring up ap, error %s\n", "setHostApModeInternal", 1254, v207);
          }
        }
        goto LABEL_225;
      }
      IOFreeData();
    }
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        v155 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v155, "[dk] %s@%d:Removing SoftAP interface from FW\n", "setHostApModeInternal", 1259);
      }
    }
    if (AppleBCMWLANCore::isHostAssignedInterfaceIndex(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 536)))
    {
      v131 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552);
      unsigned __int8 v132 = IO80211SkywalkInterface::getInterfaceId(a1);
      uint64_t v133 = AppleBCMWLANCommander::runVirtualIOVarSet(v131, v132, "interface_remove", (uint64_t)&kNoTxPayload, 0, 0);
      if (v133)
      {
        uint64_t v25 = v133;
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            v171 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            v220 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v25);
            CCLogStream::logAlert(v171, "[dk] %s@%d:ERROR: Cannot remove interface for SoftAP, error %s\n", "setHostApModeInternal", 1264, v220);
          }
        }
        return (*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 1264))(a1, v25);
      }
    }
LABEL_236:
    *(_DWORD *)(*((void *)a1 + 17) + 624) = 0;
    IO80211SkywalkInterface::setInterfaceId(a1, 0xFFFFFFFF);
    return 0;
  }
  v82 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
  CCLogStream::logAlert(v82, "[dk] %s@%d:%s: enter\n", "setHostApModeInternal", 1013, "int32_t AppleBCMWLANIO80211APSTAInterface::setHostApModeInternal(apple80211_network_data *)");
  if (!a2) {
    goto LABEL_146;
  }
LABEL_4:
  uint64_t v227 = 0;
  if (*(_DWORD *)(a2 + 732) >= 0x101u)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        BOOL v4 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logCrit(v4, "[dk] %s@%d: : Could not create AP: vendr ie len too big %u\n");
      }
    }
    return 22;
  }
  unsigned int v5 = *(_DWORD *)(a2 + 28);
  if (v5 >= 0x21)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        v147 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logCrit(v147, "[dk] %s@%d: : Could not create AP: no network data\n");
      }
    }
    return 22;
  }
  if (!v5) {
    goto LABEL_148;
  }
  uint64_t v7 = (AppleBCMWLANJoinAdapter *)AppleBCMWLANCore::getJoinAdapter(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 536));
  char v8 = AppleBCMWLANJoinAdapter::isJoining(v7);
  if ((AppleBCMWLANCore::isAssociated(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 536)) & 1) == 0 && (v8 & 1) == 0)
  {
    AppleBCMWLANBGScanAdapter::disablePrivateMACForScans(*(AppleBCMWLANBGScanAdapter **)(*((void *)a1 + 17) + 576));
    AppleBCMWLANPowerManager::configureMIMOPowerSavePolicy(*(AppleBCMWLANPowerManager **)(*((void *)a1 + 17) + 584));
  }
  AppleBCMWLANPowerManager::configurePowerSaveForSoftAP(*(AppleBCMWLANPowerManager **)(*((void *)a1 + 17) + 584), 0);
  uint64_t v9 = *((void *)a1 + 17);
  uint64_t v10 = *(AppleBCMWLANTxPowerManager **)(v9 + 592);
  if (v10)
  {
    int DynSARPwrBoostCur = AppleBCMWLANTxPowerManager::getDynSARPwrBoostCur(v10);
    uint64_t v9 = *((void *)a1 + 17);
    if (DynSARPwrBoostCur)
    {
      AppleBCMWLANTxPowerManager::resetDynSARLqmRssi(*(void *)(v9 + 592));
      AppleBCMWLANTxPowerManager::configureDynSARPwrBoost(*(AppleBCMWLANCore ****)(*((void *)a1 + 17) + 592), 0);
      uint64_t v9 = *((void *)a1 + 17);
    }
  }
  if (*(_DWORD *)(v9 + 620) && *(_DWORD *)(v9 + 624))
  {
    int v12 = *(_DWORD *)(v9 + 16);
    uint64_t v13 = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    if (v12)
    {
      if (v13)
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          int v14 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          uint64_t v15 = *(int *)(*((void *)a1 + 17) + 16);
          if (v15 > 3) {
            uint64_t v16 = "Unknown";
          }
          else {
            uint64_t v16 = off_100388590[v15];
          }
          CCLogStream::logAlert(v14, "[dk] %s@%d:SoftAP already up, power state %s, bailout\n", "setHostApModeInternal", 1330, v16);
        }
      }
      return 0;
    }
    if (v13)
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        v168 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v168, "[dk] %s@%d:SoftAP already up; restarting\n", "setHostApModeInternal", 1302);
      }
    }
    uint64_t v17 = *((void *)a1 + 17);
    uint64_t v227 = *(unsigned int *)(v17 + 616);
    BOOL v18 = *(AppleBCMWLANCommander **)(v17 + 552);
    unsigned __int8 v19 = IO80211SkywalkInterface::getInterfaceId(a1);
    *(void *)v231 = &v227;
    *(void *)&v231[8] = 8;
    uint64_t v6 = AppleBCMWLANCommander::runVirtualIOVarSet(v18, v19, "bss", (uint64_t)v231, 0, 0);
    uint64_t v20 = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    if (v6)
    {
      if (v20)
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v21 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          (*(void (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v6);
          CCLogStream::logCrit(v21, "[dk] %s@%d:ERROR: Can't bring down bss, error %s\n");
        }
      }
      return v6;
    }
    if (v20)
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        v181 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v181, "[dk] %s@%d:Removing SoftAP interface from FW\n", "setHostApModeInternal", 1313);
      }
    }
    if (AppleBCMWLANCore::isHostAssignedInterfaceIndex(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 536)))
    {
      BOOL v22 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552);
      unsigned __int8 v23 = IO80211SkywalkInterface::getInterfaceId(a1);
      uint64_t v24 = AppleBCMWLANCommander::runVirtualIOVarSet(v22, v23, "interface_remove", (uint64_t)&kNoTxPayload, 0, 0);
      if (v24)
      {
        uint64_t v25 = v24;
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v26 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            v218 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v25);
            CCLogStream::logAlert(v26, "[dk] %s@%d:ERROR: Cannot remove interface for SoftAP, error %s\n", "setHostApModeInternal", 1318, v218);
          }
        }
        return (*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 1264))(a1, v25);
      }
    }
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        v185 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logNotice(v185, "[dk] %s@%d:Softap interface is down!\n", "setHostApModeInternal", 1322);
      }
    }
    *(_DWORD *)(*((void *)a1 + 17) + 620) = 0;
    *(_DWORD *)(*((void *)a1 + 17) + 624) = 0;
    IO80211SkywalkInterface::setInterfaceId(a1, 0xFFFFFFFF);
    uint64_t v27 = *((void *)a1 + 17);
    *(void *)(v27 + 512) = 0;
    *(_OWORD *)(v27 + 480) = 0u;
    *(_OWORD *)(v27 + 496) = 0u;
    *(_OWORD *)(v27 + 448) = 0u;
    *(_OWORD *)(v27 + 464) = 0u;
    *(_OWORD *)(v27 + 432) = 0u;
    *(void *)(*((void *)a1 + 17) + 160) = 0;
    *(void *)(*((void *)a1 + 17) + 152) = 0;
    *(void *)(*((void *)a1 + 17) + 144) = 0;
    uint64_t v9 = *((void *)a1 + 17);
  }
  if (AppleBCMWLANCore::checkForRngReSeedSupport(*(AppleBCMWLANCore **)(v9 + 536)))
  {
    if (AppleBCMWLANCore::setEntropyForRNG(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 536)))
    {
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          v164 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logAlert(v164, "[dk] %s@%d:Failed to set RNG seed value\n", "setHostApModeInternal", 1338);
        }
      }
    }
  }
  AppleBCMWLANIO80211APSTAInterface::createChipInterface(a1);
  if (AppleBCMWLANCore::isHostAssignedInterfaceIndex(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 536)))
  {
    IO80211SkywalkInterface::setInterfaceId(a1, 1u);
    AppleBCMWLANCore::setApStaSkywalkInterface(*(void *)(*((void *)a1 + 17) + 536), 1u);
    (*(void (**)(void, uint64_t))(**(void **)(*((void *)a1 + 17) + 720) + 112))(*(void *)(*((void *)a1 + 17) + 720), 1);
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        v161 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        int FirmwareInterfaceVersion = AppleBCMWLANCore::getFirmwareInterfaceVersion(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 536));
        CCLogStream::logAlert(v161, "[dk] %s@%d:%s: Creating SofAP chip interface %d, fw ver %d\n", "setHostApModeInternal", 1354, "setHostApModeInternal", 1, FirmwareInterfaceVersion);
      }
    }
    *(_OWORD *)((char *)v230 + 4) = 0uLL;
    *(void *)((char *)&v230[2] + 4) = 0x100000000;
    v233[0] = 0;
    v233[1] = 0;
    v232 = 0;
    int v234 = 0;
    WORD2(v230[0]) = 28;
    LODWORD(v230[0]) = 1835011;
    BYTE6(v230[0]) = 1;
    uint64_t v28 = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1008))(a1);
    LOWORD(v230[2]) = WORD2(v28);
    LODWORD(v230[1]) = 10;
    HIDWORD(v230[1]) = v28;
    if (AppleBCMWLANCore::isApStaSDBMode(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 536)))
    {
      HIBYTE(v230[0]) = 1;
      LODWORD(v230[1]) |= 4u;
    }
    v228 = &v232;
    uint64_t v229 = 0x1C001C001CLL;
    int v29 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552);
    *(void *)v231 = v230;
    *(void *)&v231[8] = 28;
    uint64_t v30 = AppleBCMWLANCommander::runIOVarGet(v29, (uint64_t)"interface_create", (uint64_t)v231, (uint64_t)&v228, 0);
    if (v30)
    {
      uint64_t v25 = v30;
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          OSStringPtr v31 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          uint64_t v32 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v25);
          CCLogStream::logCrit(v31, "[dk] %s@%d:ERROR: Cannot create interface for SoftAP, error %s\n", "setHostApModeInternal", 1377, v32);
        }
      }
      return (*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 1264))(a1, v25);
    }
    *(_DWORD *)(*((void *)a1 + 17) + 624) = 1;
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        v169 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v169, "[dk] %s@%d:%s: Return bssCfgIdx %d, ifIdx %d, ifName %s\n", "setHostApModeInternal", 1382, "setHostApModeInternal", BYTE2(v233[0]), BYTE3(v233[0]), (const char *)v233 + 4);
      }
    }
    *(_DWORD *)(*((void *)a1 + 17) + 616) = -1;
    memset(v231, 0, 36);
    size_t v39 = *(unsigned int *)(a2 + 28);
    if (v39 <= 0x20)
    {
      *(_DWORD *)v231 = *(_DWORD *)(a2 + 28);
      memcpy(&v231[4], (const void *)(a2 + 32), v39);
      uint64_t v40 = *((void *)a1 + 17);
      *(_DWORD *)(v40 + 660) = 0;
      *(_OWORD *)(v40 + 628) = 0u;
      *(_OWORD *)(v40 + 644) = 0u;
      size_t v41 = *(unsigned int *)(a2 + 28);
      *(_DWORD *)(*((void *)a1 + 17) + 628) = v41;
      memcpy((void *)(*((void *)a1 + 17) + 632), (const void *)(a2 + 32), v41);
    }
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        v170 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logNotice(v170, "[dk] %s@%d:Setting \"ssid\" (%s) for SoftAP\n", "setHostApModeInternal", 1398, (const char *)(*((void *)a1 + 17) + 632));
      }
    }
    __int16 v42 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552);
    unsigned __int8 v43 = IO80211SkywalkInterface::getInterfaceId(a1);
    v226[0] = v231;
    v226[1] = 36;
    uint64_t v44 = AppleBCMWLANCommander::runVirtualIOVarSet(v42, v43, "ssid", (uint64_t)v226, 0, 0);
    if (v44)
    {
      uint64_t v6 = v44;
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          int v45 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          (*(void (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v6);
          CCLogStream::logCrit(v45, "[dk] %s@%d:Error: cant set ssid, error %s\n");
        }
      }
      return v6;
    }
    goto LABEL_95;
  }
  memset(&v231[4], 0, 36);
  uint64_t v33 = *((void *)a1 + 17);
  *(_DWORD *)v231 = *(_DWORD *)(v33 + 616);
  size_t v34 = *(unsigned int *)(a2 + 28);
  if (v34 <= 0x20)
  {
    *(_DWORD *)&v231[4] = *(_DWORD *)(a2 + 28);
    memcpy(&v231[8], (const void *)(a2 + 32), v34);
    *(_OWORD *)(v33 + 628) = 0u;
    *(_OWORD *)(v33 + 644) = 0u;
    *(_DWORD *)(v33 + 660) = 0;
    size_t v35 = *(unsigned int *)(a2 + 28);
    *(_DWORD *)(*((void *)a1 + 17) + 628) = v35;
    memcpy((void *)(*((void *)a1 + 17) + 632), (const void *)(a2 + 32), v35);
  }
  if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
  {
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      v163 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logNotice(v163, "[dk] %s@%d: SoftAP FW interface create: Requesting bsscfg = %d via \"bsscfg:ssid\" (%s)\n", "setHostApModeInternal", 1420, *(_DWORD *)v231, &v231[8]);
    }
  }
  uint64_t v36 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552);
  v230[0] = v231;
  v230[1] = 40;
  uint64_t v37 = AppleBCMWLANCommander::runIOVarSet(v36, (uint64_t)"bsscfg:ssid", (uint64_t)v230, 0, 0);
  if (v37)
  {
    uint64_t v6 = v37;
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        long long v38 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        (*(void (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v6);
        CCLogStream::logCrit(v38, "[dk] %s@%d: SoftAP FW interface create: cant set bsscf:ssid, error %s\n");
      }
    }
  }
  else
  {
    WORD2(v232) = -21846;
    LODWORD(v232) = -1431655766;
    uint64_t v46 = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1008))(a1);
    LODWORD(v232) = v46;
    WORD2(v232) = WORD2(v46);
    if (IO80211SkywalkInterface::getInterfaceId(a1) != -1) {
      goto LABEL_91;
    }
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        v184 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v184, "[dk] %s@%d: SoftAP FW interface create: pending to receive interface create complete event with valid index \n", "setHostApModeInternal", 1434);
      }
    }
    uint64_t v6 = AppleBCMWLANCore::waitForDriverEvent(*(void **)(*((void *)a1 + 17) + 536), 3u, 5u);
    if (v6)
    {
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          v186 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          v187 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v6);
          CCLogStream::logAlert(v186, "[dk] %s@%d: ERROR: SoftAP FW interface create: failed to receive interface complete event, error %s\n", "setHostApModeInternal", 1437, v187);
        }
      }
    }
    if (IO80211SkywalkInterface::getInterfaceId(a1) != -1)
    {
LABEL_91:
      uint64_t v47 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552);
      unsigned __int8 v48 = IO80211SkywalkInterface::getInterfaceId(a1);
      v230[0] = &v232;
      v230[1] = 6;
      uint64_t v49 = AppleBCMWLANCommander::runVirtualIOVarSet(v47, v48, "cur_etheraddr", (uint64_t)v230, 0, 0);
      if (v49)
      {
        uint64_t v6 = v49;
        if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
          return v6;
        }
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (!CCLogStream::shouldLog()) {
          return v6;
        }
        int v50 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v217 = 1449;
        uint64_t v219 = (*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v6);
        int v51 = "[dk] %s@%d: cur_etheraddr failed, error %s\n";
LABEL_213:
        CCLogStream::logAlert(v50, v51, "setHostApModeInternal", v217, v219, v221);
        return v6;
      }
LABEL_95:
      LODWORD(v228) = -1431655766;
      __int16 v52 = (AppleBCMWLANConfigManager *)AppleBCMWLANCore::getConfigManager(*(AppleBCMWLANCore **)(*((void *)a1 + 17)
                                                                                                 + 536));
      LODWORD(v228) = AppleBCMWLANConfigManager::is80211NEnabledForAPMode(v52);
      OSStringPtr v53 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552);
      unsigned __int8 v54 = IO80211SkywalkInterface::getInterfaceId(a1);
      *(void *)v231 = &v228;
      *(void *)&v231[8] = 4;
      uint64_t v55 = AppleBCMWLANCommander::runVirtualIOVarSet(v53, v54, "bssnmode", (uint64_t)v231, 0, 0);
      if (v55)
      {
        uint64_t v56 = v55;
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            v182 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            v183 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v56);
            CCLogStream::logAlert(v182, "[dk] %s@%d: bssnmode failed, error %s\n", "setHostApModeInternal", 1458, v183);
          }
        }
      }
      if (v228 && !AppleBCMWLANCore::isRestrictedCountry(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 536)))
      {
        *(_OWORD *)v231 = 0uLL;
        uint64_t v57 = (AppleBCMWLANConfigManager *)AppleBCMWLANCore::getConfigManager(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 536));
        if (AppleBCMWLANConfigManager::isAutoCountryEnabled(v57))
        {
          LODWORD(v232) = 0;
          *(void *)v231 = &v232;
          *(void *)&v231[8] = 4;
          if (AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552), (uint64_t)"autocountry", (uint64_t)v231, 0, 0))
          {
            uint64_t v58 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552);
            v230[0] = &v232;
            v230[1] = 4;
            uint64_t v59 = AppleBCMWLANCommander::runIOCtlSet(v58, 47, (uint64_t)v230, 0, 0);
            if (v59)
            {
              uint64_t v6 = v59;
              if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
                return v6;
              }
              (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              if (!CCLogStream::shouldLog()) {
                return v6;
              }
              int v50 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              uint64_t v219 = v232;
              uint64_t v221 = (*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v6);
              uint64_t v217 = 1474;
              int v51 = "[dk] %s@%d: Error: Unable to set regulatory \"%d\" : %s\n";
              goto LABEL_213;
            }
          }
        }
        OSStringPtr v60 = (AppleBCMWLANConfigManager *)AppleBCMWLANCore::getConfigManager(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 536));
        if (AppleBCMWLANConfigManager::isEnhancedLocaleEnabled(v60))
        {
          LODWORD(v230[0]) = 0;
          *(void *)v231 = v230;
          *(void *)&v231[8] = 4;
          uint64_t v61 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552), (uint64_t)"ccode_pr_2g", (uint64_t)v231, 0, 0);
          if (v61)
          {
            uint64_t v6 = v61;
            if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
              return v6;
            }
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            if (!CCLogStream::shouldLog()) {
              return v6;
            }
            int v50 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            uint64_t v219 = LODWORD(v230[0]);
            uint64_t v221 = (*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v6);
            uint64_t v217 = 1485;
            int v51 = "[dk] %s@%d: Error: Unable to set ccode_pr_2g \"%d\" : %s\n";
            goto LABEL_213;
          }
        }
      }
      LODWORD(v226[0]) = 1;
      OSStringPtr v62 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552);
      unsigned __int8 v63 = IO80211SkywalkInterface::getInterfaceId(a1);
      *(void *)v231 = v226;
      *(void *)&v231[8] = 4;
      uint64_t v64 = AppleBCMWLANCommander::runVirtualIOVarSet(v62, v63, "ap_isolate", (uint64_t)v231, 0, 0);
      if (v64)
      {
        uint64_t v6 = v64;
        if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
          return v6;
        }
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (!CCLogStream::shouldLog()) {
          return v6;
        }
        int v50 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        uint64_t v217 = 1494;
        uint64_t v219 = (*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v6);
        int v51 = "[dk] %s@%d: ap_isolate failed, error %s\n";
        goto LABEL_213;
      }
      unsigned int v65 = *(_DWORD *)(a2 + 20);
      unsigned int v225 = -1431655766;
      if (IOParseBootArgNumber("wlan.ap.channel", &v225, 4))
      {
        ClassNameHelper = (const char *)getClassNameHelper((OSObject *)a1);
        IOLog("%s::%s(): Got channel override 0x%lX\n", ClassNameHelper, "setHostApModeInternal", v225);
        unsigned int v65 = v225;
        *(_DWORD *)(a2 + 20) = v225;
      }
      if (v65) {
        int v67 = v65;
      }
      else {
        int v67 = 11;
      }
      v230[0] = 1;
      v230[1] = __PAIR64__(*(_DWORD *)(a2 + 24), v67);
      uint64_t v68 = (*(uint64_t (**)(IO80211SkywalkInterface *, void *))(*(void *)a1 + 1632))(a1, v230);
      if (v68)
      {
        uint64_t v6 = v68;
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            BOOL v69 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            (*(void (**)(void, uint64_t))(**(void **)(*((void *)a1 + 17) + 536) + 112))(*(void *)(*((void *)a1 + 17) + 536), v6);
            CCLogStream::logCrit(v69, "[dk] %s@%d: WLC_SET_CHANNEL(%lu) failed, error %s (channel=%ld) \n");
          }
        }
        return v6;
      }
      int v224 = (*(_DWORD *)(a2 + 24) >> 4) & 1;
      int v71 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552);
      unsigned __int8 v72 = IO80211SkywalkInterface::getInterfaceId(a1);
      *(void *)v231 = &v224;
      *(void *)&v231[8] = 4;
      uint64_t v6 = AppleBCMWLANCommander::runVirtualIOVarSet(v71, v72, "bss_rateset", (uint64_t)v231, 0, 0);
      if (v6)
      {
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            v208 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            v209 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v6);
            CCLogStream::logCrit(v208, "[dk] %s@%d: bss_rateset failed, error %s  \n", "setHostApModeInternal", 1532, v209);
          }
        }
      }
      uint64_t v73 = *((void *)a1 + 17);
      int v74 = *(_DWORD *)(a2 + 12);
      if (*(unsigned char *)(v73 + 810))
      {
        if (v74 == 8 || v74 == 4104 || v74 == 4096)
        {
          int v223 = 4;
          BOOL v75 = *(AppleBCMWLANCommander **)(v73 + 552);
          unsigned __int8 v76 = IO80211SkywalkInterface::getInterfaceId(a1);
          *(void *)v231 = &v223;
          *(void *)&v231[8] = 4;
          uint64_t v77 = AppleBCMWLANCommander::runVirtualIOVarSet(v75, v76, "wsec", (uint64_t)v231, 0, 0);
          if (v77)
          {
            uint64_t v6 = v77;
            if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
              return v6;
            }
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            if (!CCLogStream::shouldLog()) {
              return v6;
            }
            uint64_t v78 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            (*(void (**)(void, uint64_t))(**(void **)(*((void *)a1 + 17) + 536) + 112))(*(void *)(*((void *)a1 + 17) + 536), v6);
            goto LABEL_202;
          }
          *(void *)&v231[256] = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&long long v135 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v135 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&v231[224] = v135;
          *(_OWORD *)&v231[240] = v135;
          *(_OWORD *)&v231[192] = v135;
          *(_OWORD *)&v231[208] = v135;
          *(_OWORD *)&v231[160] = v135;
          *(_OWORD *)&v231[176] = v135;
          *(_OWORD *)&v231[128] = v135;
          *(_OWORD *)&v231[144] = v135;
          *(_OWORD *)&v231[96] = v135;
          *(_OWORD *)&v231[112] = v135;
          *(_OWORD *)&v231[64] = v135;
          *(_OWORD *)&v231[80] = v135;
          *(_OWORD *)&v231[48] = v135;
          *(_OWORD *)&v231[16] = v135;
          *(_OWORD *)&v231[32] = v135;
          size_t v136 = *(unsigned int *)(a2 + 68);
          *(_OWORD *)v231 = v135;
          if ((v136 - 65) <= 0xFFFFFFBF)
          {
            if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
              return 22;
            }
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            if (!CCLogStream::shouldLog()) {
              return 22;
            }
            uint64_t v81 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
LABEL_243:
            CCLogStream::logCrit(v81, "[dk] %s@%d: ERROR, no PMK specified or bad key length (%d)!\n");
            return 22;
          }
          memset(&v231[4], 0, 260);
          *(_WORD *)&v231[2] = 1;
          *(_WORD *)v231 = v136;
          memcpy(&v231[4], (const void *)(a2 + 80), v136);
          v141 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552);
          unsigned __int8 v142 = IO80211SkywalkInterface::getInterfaceId(a1);
          v232 = (int *)v231;
          v233[0] = 264;
          uint64_t v143 = AppleBCMWLANCommander::runVirtualIOCtlSet(v141, v142, 268, (uint64_t)&v232, 0, 0);
          if (v143)
          {
            uint64_t v6 = v143;
            if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
              return v6;
            }
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            if (!CCLogStream::shouldLog()) {
              return v6;
            }
            v139 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            (*(void (**)(void, uint64_t))(**(void **)(*((void *)a1 + 17) + 536) + 112))(*(void *)(*((void *)a1 + 17) + 536), v6);
            goto LABEL_252;
          }
          int v151 = *(_DWORD *)(a2 + 12);
          if (v151 == 4104)
          {
            int v222 = 262272;
            int v152 = 1;
          }
          else if (v151 == 4096)
          {
            int v222 = 0x40000;
            int v152 = 2;
          }
          else
          {
            int v152 = 0;
            int v222 = 128;
          }
          if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
          {
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            if (CCLogStream::shouldLog())
            {
              v211 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              CCLogStream::logAlert(v211, "[dk] %s@%d:  ------%s: WLC_SET_WPA_AUTH to 0x%X\n", "setHostApModeInternal", 1583, "setHostApModeInternal", v222);
            }
          }
          v156 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552);
          unsigned __int8 v157 = IO80211SkywalkInterface::getInterfaceId(a1);
          v232 = &v222;
          v233[0] = 4;
          uint64_t v158 = AppleBCMWLANCommander::runVirtualIOCtlSet(v156, v157, 165, (uint64_t)&v232, 0, 0);
          if (v158)
          {
            uint64_t v6 = v158;
            if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
              return v6;
            }
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            if (!CCLogStream::shouldLog()) {
              return v6;
            }
            v114 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            (*(void (**)(void, uint64_t))(**(void **)(*((void *)a1 + 17) + 536) + 112))(*(void *)(*((void *)a1 + 17) + 536), v6);
            goto LABEL_207;
          }
          uint64_t v159 = AppleBCMWLANIO80211APSTAInterface::configureManagementFrameProtectionForSoftAP(a1, v152);
          if (v159)
          {
            uint64_t v6 = v159;
            if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
            {
              (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              if (CCLogStream::shouldLog())
              {
                v160 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                (*(void (**)(void, uint64_t))(**(void **)(*((void *)a1 + 17) + 536) + 112))(*(void *)(*((void *)a1 + 17) + 536), v6);
                CCLogStream::logCrit(v160, "[dk] %s@%d:  set mfp failed, error %s\n");
              }
            }
            return v6;
          }
          v165 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552);
          unsigned __int8 v166 = IO80211SkywalkInterface::getInterfaceId(a1);
          uint64_t v167 = AppleBCMWLANCommander::runVirtualIOCtlSet(v165, v166, 3, (uint64_t)&kNoTxPayload, 0, 0);
          if (v167)
          {
            uint64_t v6 = v167;
            if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
              return v6;
            }
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            if (!CCLogStream::shouldLog()) {
              return v6;
            }
            int v50 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            uint64_t v219 = (*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v6);
            uint64_t v118 = 1597;
LABEL_212:
            uint64_t v217 = v118;
            int v51 = "[dk] %s@%d: cant bring down ap, error %s\n";
            goto LABEL_213;
          }
          uint64_t v172 = IOMallocZeroData();
          v173 = (int *)v172;
          if (v172) {
            uint64_t v174 = 52;
          }
          else {
            uint64_t v174 = 0;
          }
          *(void *)uint64_t v172 = 0x1000100300001;
          *(unsigned char *)(v172 + 8) = 1;
          *(void *)(v172 + 12) = 0x57E4000040002;
          *(_DWORD *)(v172 + 20) = 131075;
          *(_WORD *)(v172 + 24) = 3;
          *(void *)(v172 + 28) = 0x12C00040004;
          *(_DWORD *)(v172 + 36) = 131077;
          *(_WORD *)(v172 + 40) = 5;
          *(_DWORD *)(v172 + 44) = 262150;
          *(_WORD *)(v172 + 48) = 3000;
          v175 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552);
          unsigned __int8 v176 = IO80211SkywalkInterface::getInterfaceId(a1);
          v232 = v173;
          v233[0] = v174;
          uint64_t v177 = AppleBCMWLANCommander::runVirtualIOVarSet(v175, v176, "idauth", (uint64_t)&v232, 0, 0);
          if (v177)
          {
            uint64_t v6 = v177;
            if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
            {
              (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              if (CCLogStream::shouldLog())
              {
                v178 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                int v179 = IO80211SkywalkInterface::getInterfaceId(a1);
                v180 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)a1 + 17)
                                                                                              + 536)
                                                                                + 112))(*(void *)(*((void *)a1 + 17) + 536), v6);
                CCLogStream::logCrit(v178, "[dk] %s@%d:  Auth Config failed : inf:%d %x %s\n", "setHostApModeInternal", 1657, v179, v6, v180);
              }
            }
LABEL_225:
            IOFreeData();
            return v6;
          }
          v188 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552);
          unsigned __int8 v189 = IO80211SkywalkInterface::getInterfaceId(a1);
          uint64_t v6 = AppleBCMWLANCommander::runVirtualIOCtlSet(v188, v189, 2, (uint64_t)&kNoTxPayload, 0, 0);
          if (v6)
          {
            if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
            {
              (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              if (CCLogStream::shouldLog())
              {
                v215 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                v216 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v6);
                CCLogStream::logAlert(v215, "[dk] %s@%d: cant bring down ap, error %s\n", "setHostApModeInternal", 1663, v216);
              }
            }
            goto LABEL_225;
          }
          IOFreeData();
        }
      }
      else if ((v74 | 8) == 0x1008)
      {
        *(void *)&v231[256] = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v79 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v79 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v231[224] = v79;
        *(_OWORD *)&v231[240] = v79;
        *(_OWORD *)&v231[192] = v79;
        *(_OWORD *)&v231[208] = v79;
        *(_OWORD *)&v231[160] = v79;
        *(_OWORD *)&v231[176] = v79;
        *(_OWORD *)&v231[128] = v79;
        *(_OWORD *)&v231[144] = v79;
        *(_OWORD *)&v231[96] = v79;
        *(_OWORD *)&v231[112] = v79;
        *(_OWORD *)&v231[64] = v79;
        *(_OWORD *)&v231[80] = v79;
        *(_OWORD *)&v231[48] = v79;
        *(_OWORD *)&v231[16] = v79;
        *(_OWORD *)&v231[32] = v79;
        size_t v80 = *(unsigned int *)(a2 + 68);
        *(_OWORD *)v231 = v79;
        if ((v80 - 65) <= 0xFFFFFFBF)
        {
          if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
            return 22;
          }
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          if (!CCLogStream::shouldLog()) {
            return 22;
          }
          uint64_t v81 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          goto LABEL_243;
        }
        memset(&v231[4], 0, 260);
        *(_WORD *)&v231[2] = 1;
        *(_WORD *)v231 = v80;
        memcpy(&v231[4], (const void *)(a2 + 80), v80);
        v137 = *(AppleBCMWLANCommander **)(v73 + 552);
        unsigned __int8 v138 = IO80211SkywalkInterface::getInterfaceId(a1);
        v232 = (int *)v231;
        v233[0] = 264;
        uint64_t v6 = AppleBCMWLANCommander::runVirtualIOCtlSet(v137, v138, 268, (uint64_t)&v232, 0, 0);
        if (v6)
        {
          if (!(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1)) {
            return v6;
          }
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          if (!CCLogStream::shouldLog()) {
            return v6;
          }
          v139 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          (*(void (**)(void, uint64_t))(**(void **)(*((void *)a1 + 17) + 536) + 112))(*(void *)(*((void *)a1 + 17) + 536), v6);
LABEL_252:
          CCLogStream::logCrit(v139, "[dk] %s@%d:  set_pmk failed, error %s\n");
          return v6;
        }
      }
      if (*(_DWORD *)(a2 + 12))
      {
        uint64_t v190 = *((void *)a1 + 17);
      }
      else
      {
        uint64_t v190 = *((void *)a1 + 17);
        if (!*(_DWORD *)(a2 + 72)) {
          goto LABEL_293;
        }
      }
      if (!*(unsigned char *)(v190 + 810) && !*(unsigned char *)(v190 + 809))
      {
LABEL_301:
        v195 = (AppleBCMWLANConfigManager *)AppleBCMWLANCore::getConfigManager(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 536));
        *(_DWORD *)(*((void *)a1 + 17) + 8) = AppleBCMWLANConfigManager::getMaxSTAs(v195);
        AppleBCMWLANIO80211APSTAInterface::setMaxAssoc(a1, *(_DWORD *)(*((void *)a1 + 17) + 8));
        (*(void (**)(IO80211SkywalkInterface *, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 512))(a1, 87, *((void *)a1 + 17) + 8, 4, 0);
        unsigned int v196 = *(_DWORD *)(a2 + 732);
        if (v196) {
          AppleBCMWLANIO80211APSTAInterface::programVendorIEList(a1, (unsigned __int8 *)(a2 + 736), v196);
        }
        else {
          AppleBCMWLANIO80211APSTAInterface::programAppleVendorIE(a1);
        }
        *(_DWORD *)(*((void *)a1 + 17) + 620) = 1;
        *(_DWORD *)(*((void *)a1 + 17) + 524) = 0;
        *(void *)(*((void *)a1 + 17) + 136) = 0;
        AppleBCMWLANIO80211APSTAInterface::handleAPStatsUpdates((uint64_t)a1, *(void *)(*((void *)a1 + 17) + 112));
        (*(void (**)(void, uint64_t))(**(void **)(*((void *)a1 + 17) + 120) + 120))(*(void *)(*((void *)a1 + 17) + 120), 1000);
        __int16 v197 = *(_WORD *)(a2 + 4);
        if ((v197 & 0x100) != 0) {
          __int16 v198 = 100;
        }
        else {
          __int16 v198 = 300;
        }
        *(_WORD *)(*((void *)a1 + 17) + 20) = v198;
        if ((v197 & 0x200) != 0)
        {
          LODWORD(v232) = 1;
          v199 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552);
          unsigned __int8 v200 = IO80211SkywalkInterface::getInterfaceId(a1);
          *(void *)v231 = &v232;
          *(void *)&v231[8] = 4;
          uint64_t v6 = AppleBCMWLANCommander::runVirtualIOVarSet(v199, v200, "closednet", (uint64_t)v231, 0, 0);
          uint64_t v201 = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          if (v6)
          {
            if (v201)
            {
              (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              if (CCLogStream::shouldLog())
              {
                v202 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                v203 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v6);
                CCLogStream::logAlert(v202, "[dk] %s@%d:ERROR: cannot set closednet : retval %x: %s\n", "setHostApModeInternal", 1741, v6, v203);
              }
            }
          }
          else if (v201)
          {
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            if (CCLogStream::shouldLog())
            {
              v212 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              int v213 = (int)v232;
              v214 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, void))(*(void *)a1 + 856))(a1, 0);
              CCLogStream::logInfo(v212, "[dk] %s@%d:set closednet : hidden %d, retval %x: %s\n", "setHostApModeInternal", 1738, v213, 0, v214);
            }
          }
        }
        AppleBCMWLANIO80211APSTAInterface::initSoftAPParameters(a1);
        if (AppleBCMWLANCore::isSaeH2eEnabled(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 536))
          && (*(unsigned char *)(a2 + 13) & 0x10) != 0)
        {
          AppleBCMWLANIO80211APSTAInterface::setRSNXE(a1);
        }
        (*(void (**)(IO80211SkywalkInterface *, uint64_t, uint64_t))(*(void *)a1 + 128))(a1, 3, 128);
        AppleBCMWLANCore::setConcurrencyState(*(void **)(*((void *)a1 + 17) + 536), 4, 1);
        uint64_t v204 = *((void *)a1 + 17);
        if (*(unsigned char *)(v204 + 810) || *(unsigned char *)(v204 + 809) || !*(_DWORD *)(a2 + 12)) {
          AppleBCMWLANIO80211APSTAInterface::enableAPInterface(a1);
        }
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            v205 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            CCLogStream::logAlert(v205, "[dk] %s@%d: Success, posted link up\n");
          }
        }
        return v6;
      }
LABEL_293:
      LODWORD(v227) = *(_DWORD *)(v190 + 616);
      HIDWORD(v227) = 1;
      v191 = *(AppleBCMWLANCommander **)(v190 + 552);
      unsigned __int8 v192 = IO80211SkywalkInterface::getInterfaceId(a1);
      *(void *)v231 = &v227;
      *(void *)&v231[8] = 8;
      uint64_t v6 = AppleBCMWLANCommander::runVirtualIOVarSet(v191, v192, "bss", (uint64_t)v231, 0, 0);
      uint64_t v193 = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (v6)
      {
        if (v193)
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            v194 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            (*(void (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v6);
            CCLogStream::logCrit(v194, "[dk] %s@%d: cant bring up bss, error %s\n");
          }
        }
        return v6;
      }
      if (v193)
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          v210 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logNotice(v210, "[dk] %s@%d: interface is up!\n", "setHostApModeInternal", 1705);
        }
      }
      uint64_t v6 = 0;
      goto LABEL_301;
    }
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        BOOL v70 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v70, "[dk] %s@%d: ERROR: SoftAP FW interface create: invalid interface index \n");
      }
    }
  }
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::setHOST_AP_MODE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANIO80211APSTAInterface::setHOST_AP_MODE((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANIO80211APSTAInterface::setHOST_AP_MODE((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::resetSoftAPLowPowerMode(AppleBCMWLANIO80211APSTAInterface *this)
{
  AppleBCMWLANIO80211APSTAInterface::deleteIPv4PktFilters(this);
  AppleBCMWLANIO80211APSTAInterface::configureARPOffload(this, 0);
  *(_DWORD *)(*((void *)this + 17) + 172) = 0;
  *(_DWORD *)(*((void *)this + 17) + 180) = 0;
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      __int16 v3 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      return CCLogStream::logInfo(v3, "[dk] %s@%d:LPHS: Done Resetting SoftAP LowPower Mode Config\n", "resetSoftAPLowPowerMode", 4662);
    }
  }
  return result;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::enableInfraFeaturesForSoftAP(AppleBCMWLANIO80211APSTAInterface *this)
{
  AppleBCMWLANCore::configureManagementFrameProtection(*(AppleBCMWLANCore **)(*((void *)this + 17) + 536), 1);
  AppleBCMWLANIO80211APSTAInterface::configureMPDUSize(this, -1);
  AppleBCMWLANPowerManager::configurePowerSaveForSoftAP(*(AppleBCMWLANPowerManager **)(*((void *)this + 17) + 584), 1);
  AppleBCMWLANTxPowerManager::resetDynSARLqmRssi(*(void *)(*((void *)this + 17) + 592));
  uint64_t v2 = *((void *)this + 17);
  __int16 v3 = *(AppleBCMWLANCore ****)(v2 + 592);
  unsigned int v4 = *(unsigned __int8 *)(AppleBCMWLANConfigManager::getDynSARPwrBoostCtl(*(AppleBCMWLANConfigManager **)(v2 + 608))
                          + 3);
  return AppleBCMWLANTxPowerManager::configureDynSARPwrBoost(v3, v4);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::configureManagementFrameProtectionForSoftAP(AppleBCMWLANIO80211APSTAInterface *this, int a2)
{
  int v14 = a2;
  if (!AppleBCMWLANCore::checkForPMFSupport(*(AppleBCMWLANCore **)(*((void *)this + 17) + 536))) {
    return 0;
  }
  __int16 v3 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
  v13[0] = &v14;
  v13[1] = 4;
  uint64_t v5 = AppleBCMWLANCommander::runVirtualIOVarSet(v3, InterfaceId, "mfp", (uint64_t)v13, 0, 0);
  uint64_t v6 = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
  if (!v5)
  {
    if (v6)
    {
      (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        if (v14) {
          int v12 = "Enabled";
        }
        else {
          int v12 = "Disabled";
        }
        CCLogStream::logNoticeIf(v11, 0x80uLL, "[dk] %s@%d:MFP is %s\n", "configureManagementFrameProtectionForSoftAP", 3361, v12);
      }
    }
    return 0;
  }
  if (v6)
  {
    (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      int v8 = v14;
      uint64_t v9 = (const char *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *, uint64_t))(*(void *)this
                                                                                                 + 856))(this, v5);
      CCLogStream::logAlert(v7, "[dk] %s@%d:cannot set MFP Support to %d : ret %x: %s  -> continue with initialization\n", "configureManagementFrameProtectionForSoftAP", 3359, v8, v5, v9);
    }
  }
  return v5;
}

void *AppleBCMWLANIO80211APSTAInterface::setMaxAssoc(void *this, int a2)
{
  uint64_t v2 = (_DWORD *)this[17];
  if (v2[1] != a2)
  {
    unsigned int v10 = *v2 + a2;
    if (v10 <= v2[2])
    {
      __int16 v3 = this;
      v2[1] = a2;
      unsigned int v4 = *(AppleBCMWLANCommander **)(this[17] + 552);
      unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId((IO80211SkywalkInterface *)this);
      v9[0] = &v10;
      v9[1] = 4;
      this = (void *)AppleBCMWLANCommander::runVirtualIOVarSet(v4, InterfaceId, "maxassoc", (uint64_t)v9, 0, 0);
      if (this)
      {
        uint64_t v6 = this;
        this = (void *)(*(uint64_t (**)(void *))(*v3 + 1024))(v3);
        if (this)
        {
          (*(void (**)(void *))(*v3 + 1024))(v3);
          this = (void *)CCLogStream::shouldLog();
          if (this)
          {
            uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1024))(v3);
            int v8 = (const char *)(*(uint64_t (**)(void, void *))(**(void **)(v3[17] + 536) + 112))(*(void *)(v3[17] + 536), v6);
            return (void *)CCLogStream::logCrit(v7, "[dk] %s@%d: maxassoc failed, error %s\n", "setMaxAssoc", 2704, v8);
          }
        }
      }
    }
  }
  return this;
}

IO80211SkywalkInterface *AppleBCMWLANIO80211APSTAInterface::programVendorIEList(IO80211SkywalkInterface *this, unsigned __int8 *a2, unsigned int a3)
{
  if (a3 >= 6)
  {
    unsigned int v3 = a3;
    uint64_t v5 = this;
    while (1)
    {
      size_t v6 = a2[1];
      if (v3 - 2 < v6) {
        break;
      }
      uint64_t v7 = IOMallocZeroData();
      if (!v7)
      {
        this = (IO80211SkywalkInterface *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v5 + 1024))(v5);
        if (this)
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)v5 + 1024))(v5);
          this = (IO80211SkywalkInterface *)CCLogStream::shouldLog();
          if (this)
          {
            uint64_t v16 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v5 + 1024))(v5);
            return (IO80211SkywalkInterface *)CCLogStream::logCrit(v16, "[dk] %s@%d:FAILED to configure host AP IE list, no memory\n");
          }
        }
        return this;
      }
      uint64_t v8 = v7;
      *(_OWORD *)uint64_t v7 = xmmword_10036E1E0;
      *(unsigned char *)(v7 + 20) = *a2;
      memcpy((void *)(v7 + 21), a2 + 2, v6);
      *(_DWORD *)(v8 + 16) = v6 + 1;
      uint64_t v9 = *(void **)(*((void *)v5 + 17) + 536);
      uint64_t InterfaceId = IO80211SkywalkInterface::getInterfaceId(v5);
      uint64_t v11 = AppleBCMWLANCore::setVendorIE(v9, InterfaceId, v8);
      if (v11)
      {
        uint64_t v12 = v11;
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v5 + 1024))(v5))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)v5 + 1024))(v5);
          if (CCLogStream::shouldLog())
          {
            uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v5 + 1024))(v5);
            int v14 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)v5 + 856))(v5, v12);
            CCLogStream::logCrit(v13, "[dk] %s@%d:FAILED to configure host AP IE list, setVendorIE() returned error %s\n", "programVendorIEList", 2118, v14);
          }
        }
      }
      v3 -= v6 + 2;
      a2 += v6 + 2;
      this = (IO80211SkywalkInterface *)IOFreeData();
      if (v3 <= 5) {
        return this;
      }
    }
    this = (IO80211SkywalkInterface *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v5 + 1024))(v5);
    if (this)
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)v5 + 1024))(v5);
      this = (IO80211SkywalkInterface *)CCLogStream::shouldLog();
      if (this)
      {
        uint64_t v15 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v5 + 1024))(v5);
        return (IO80211SkywalkInterface *)CCLogStream::logCrit(v15, "[dk] %s@%d:FAILED to configure host AP IE list, invalid IE length\n");
      }
    }
  }
  return this;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::programAppleVendorIE(AppleBCMWLANIO80211APSTAInterface *this)
{
  unint64_t MaxCmdTxPayload = AppleBCMWLANCommander::getMaxCmdTxPayload(*(AppleBCMWLANCommander **)(*((void *)this + 17) + 552));
  unint64_t MaxCmdRxPayload = AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(*((void *)this + 17) + 552));
  unsigned int v4 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
  if (MaxCmdTxPayload >= MaxCmdRxPayload) {
    uint64_t v5 = AppleBCMWLANCommander::getMaxCmdRxPayload(v4);
  }
  else {
    uint64_t v5 = AppleBCMWLANCommander::getMaxCmdTxPayload(v4);
  }
  uint64_t v6 = v5;
  uint64_t v7 = v5 - 8;
  memset(__src, 0, 73);
  uint64_t v8 = IOMallocZeroData();
  uint64_t v9 = IOMallocZeroData();
  unsigned int v10 = (int *)v9;
  if (!v8)
  {
    BOOL v21 = v9 == 0;
LABEL_26:
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    if (result
      && ((*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this),
          uint64_t result = CCLogStream::shouldLog(),
          result))
    {
      uint64_t v59 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      uint64_t result = CCLogStream::logCrit(v59, "[dk] %s@%d:  Allocation buffer failure\n", "programAppleVendorIE", 2147);
      if (!v21) {
        goto LABEL_90;
      }
    }
    else if (!v21)
    {
      goto LABEL_90;
    }
    if (!v8) {
      return result;
    }
    return IOFreeData();
  }
  if (!v9)
  {
    BOOL v21 = 1;
    goto LABEL_26;
  }
  BOOL v11 = __CFADD__(v6 - 9, v9) || v7 < 1;
  if (v7 >= 1) {
    uint64_t v12 = v6 - 9 + v9;
  }
  else {
    uint64_t v12 = 0;
  }
  unint64_t v13 = (unsigned __int16)v7 | ((unint64_t)(unsigned __int16)v7 << 32) | 0x40000;
  if ((_WORD)v7)
  {
    uint64_t v14 = v9;
  }
  else
  {
    unint64_t v13 = 0;
    uint64_t v14 = 0;
  }
  v68[0] = v14;
  v68[1] = v13;
  uint64_t v15 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
  uint64_t v17 = AppleBCMWLANCommander::runVirtualIOVarGet(v15, InterfaceId, "vndr_ie", (uint64_t)&kNoTxPayload, (uint64_t)v68, 0);
  if (v17)
  {
    uint64_t v18 = v17;
    if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        OSStringPtr v60 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        uint64_t v61 = (const char *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *, uint64_t))(*(void *)this + 856))(this, v18);
        CCLogStream::logCrit(v60, "[dk] %s@%d: vndr_ie  error %s - failed to get all vendor IEs\n", "programAppleVendorIE", 2161, v61);
      }
    }
  }
  int v19 = *v10;
  if (*v10 < 1)
  {
LABEL_58:
    *(void *)uint64_t v8 = 0x100646461;
    *(_DWORD *)(v8 + 8) = 7;
    BOOL v65 = 0;
    if (AppleBCMWLANCore::isSdbChip(*(AppleBCMWLANCore **)(*((void *)this + 17) + 536), &v65))
    {
      if (AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(*((void *)this + 17) + 536), 1)) {
        char v38 = 1;
      }
      else {
        char v38 = 3;
      }
    }
    else
    {
      char v38 = 1;
    }
    LODWORD(__src[0]) = 385878749;
    BYTE4(__src[0]) = -14;
    *(_DWORD *)((char *)__src + 5) = 50397446;
    BYTE9(__src[0]) = v38;
    memset((char *)__src + 10, 0, 63);
    *(void *)(v8 + 12) = *(void *)&__src[0];
    *(_DWORD *)(v8 + 20) = DWORD2(__src[0]);
    IO80211Hexdump();
    size_t v39 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
    unsigned __int8 v40 = IO80211SkywalkInterface::getInterfaceId(this);
    uint64_t v66 = v8;
    uint64_t v67 = 24;
    uint64_t v41 = AppleBCMWLANCommander::runVirtualIOVarSet(v39, v40, "vndr_ie", (uint64_t)&v66, 0, 0);
    if (v41)
    {
      uint64_t v42 = v41;
      if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          OSStringPtr v62 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
          unsigned __int8 v63 = (const char *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *, uint64_t))(*(void *)this + 856))(this, v42);
          CCLogStream::logCrit(v62, "[dk] %s@%d: vndr_ie  error %s - failed to add IE\n", "programAppleVendorIE", 2264, v63);
        }
      }
    }
    int isConcurrencyEnabled = AppleBCMWLANCore::isConcurrencyEnabled(*(AppleBCMWLANCore **)(*((void *)this + 17) + 536));
    uint64_t v44 = *((void *)this + 17);
    if (isConcurrencyEnabled
      && (size_t v45 = *(unsigned __int8 *)(v44 + 47), *(unsigned __int8 *)(v44 + 46) | v45))
    {
      BYTE11(__src[0]) = *(unsigned char *)(v44 + 46);
      *(_WORD *)((char *)__src + 9) = *(_WORD *)(v44 + 44);
      memcpy((void *)((unint64_t)__src | 0xC), (const void *)(v44 + 48), v45);
      WORD3(__src[0]) = 259;
      BYTE8(__src[0]) = v45 + 3;
      unsigned __int8 v47 = v45 + 6;
      char v46 = *(unsigned char *)(v44 + 80);
      if (!v46) {
        goto LABEL_73;
      }
    }
    else
    {
      char v46 = *(unsigned char *)(v44 + 80);
      if (!v46) {
        goto LABEL_90;
      }
      unsigned __int8 v47 = 0;
    }
    unsigned __int8 v48 = (char *)__src + v47;
    v48[9] = v46;
    *(_OWORD *)(v48 + 10) = *(_OWORD *)(v44 + 81);
    *((_WORD *)v48 + 3) = 260;
    v48[8] = 18;
    v47 += 21;
LABEL_73:
    BYTE1(__src[0]) = v47 + 4;
    memcpy((void *)(v8 + 12), __src, (v47 + 6));
    unsigned __int8 v49 = v47 + 18;
    if (v49 < 0x53u)
    {
      int v51 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
      unsigned __int8 v52 = IO80211SkywalkInterface::getInterfaceId(this);
      if (v49) {
        uint64_t v53 = v8;
      }
      else {
        uint64_t v53 = 0;
      }
      uint64_t v66 = v53;
      uint64_t v67 = v49;
      uint64_t v54 = AppleBCMWLANCommander::runVirtualIOVarSet(v51, v52, "vndr_ie", (uint64_t)&v66, 0, 0);
      if (v54)
      {
        uint64_t v55 = v54;
        if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
        {
          (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v56 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this
                                                                                                + 1024))(this);
            uint64_t v57 = (const char *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *, uint64_t))(*(void *)this + 856))(this, v55);
            CCLogStream::logCrit(v56, "[dk] %s@%d: vndr_ie  error %s - failed to add IE\n", "programAppleVendorIE", 2342, v57);
          }
        }
      }
    }
    else if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        int v50 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v50, "[dk] %s@%d: Apple Vendor IE length limit exceeded (%d, %lu) \n");
      }
    }
    goto LABEL_90;
  }
  if (!v11)
  {
    int v23 = 0;
    uint64_t v24 = v10 + 1;
    while (1)
    {
      uint64_t v25 = v24 + 1;
      if ((uint64_t)(v24 + 1) < (uint64_t)v10 || v12 < (uint64_t)v25) {
        break;
      }
      uint64_t v27 = *((unsigned __int8 *)v24 + 5);
      uint64_t v28 = (uint64_t)v25 + v27 + 2;
      uint64_t v29 = (uint64_t)v25 + v27 + 4;
      if (v29 < (uint64_t)v10
        || (unint64_t)v28 >= 0xFFFFFFFFFFFFFFFELL
        || v29 > v12
        || (uint64_t)v10 > v28
        || v12 < v28)
      {
        if (!(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this)) {
          goto LABEL_90;
        }
        (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        if (!CCLogStream::shouldLog()) {
          goto LABEL_90;
        }
        goto LABEL_23;
      }
      if (*((_WORD *)v24 + 3) == 5888 && *((unsigned __int8 *)v24 + 8) == 242)
      {
        *(void *)uint64_t v8 = 0x1006C6564;
        memmove((void *)(v8 + 8), v24, *((unsigned __int8 *)v24 + 5) + 6);
        size_t v35 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
        unsigned __int8 v36 = IO80211SkywalkInterface::getInterfaceId(this);
        uint64_t v66 = v8;
        uint64_t v67 = 82;
        uint64_t v37 = AppleBCMWLANCommander::runVirtualIOVarSet(v35, v36, "vndr_ie", (uint64_t)&v66, 0, 0);
        if (v37)
        {
          uint64_t v58 = v37;
          if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
          {
            (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v64 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this
                                                                                                  + 1024))(this);
              (*(void (**)(AppleBCMWLANIO80211APSTAInterface *, uint64_t))(*(void *)this + 856))(this, v58);
              CCLogStream::logAlert(v64, "[dk] %s@%d:ERROR: vndr_ie error %s - failed to delete existing IE\n");
            }
          }
          goto LABEL_90;
        }
        int v19 = *v10;
      }
      ++v23;
      uint64_t v24 = (_DWORD *)v28;
      if (v23 >= v19) {
        goto LABEL_58;
      }
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
LABEL_23:
      uint64_t v20 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logAlert(v20, "[dk] %s@%d: IE - Out of range check, (%d, %lu) \n");
    }
  }
LABEL_90:
  uint64_t result = IOFreeData();
  if (v8) {
    return IOFreeData();
  }
  return result;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::setRSNXE(AppleBCMWLANIO80211APSTAInterface *this)
{
  char v17 = 0;
  __int16 v16 = 500;
  if (AppleBCMWLANCore::isSaeH2eEnabled(*(AppleBCMWLANCore **)(*((void *)this + 17) + 536))) {
    char v17 = 32;
  }
  uint64_t WorkQueue = IO80211SkywalkInterface::getWorkQueue(this);
  if ((*(unsigned int (**)(uint64_t))(*(void *)WorkQueue + 136))(WorkQueue))
  {
    unint64_t v13 = (__int16 *)this;
    uint64_t v14 = (uint64_t)AppleBCMWLANIO80211APSTAInterface::handleSetRSNXEAsyncCallBack;
    uint64_t v15 = 0;
    unsigned int v3 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
    v12[0] = &v16;
    v12[1] = 3;
    uint64_t v5 = AppleBCMWLANCommander::sendVirtualIOVarSet(v3, InterfaceId, "rsnxe", (uint64_t)v12, kNoRxExpected, (uint64_t)&v13, 0);
  }
  else
  {
    uint64_t v6 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
    unsigned __int8 v7 = IO80211SkywalkInterface::getInterfaceId(this);
    unint64_t v13 = &v16;
    uint64_t v14 = 3;
    uint64_t v5 = AppleBCMWLANCommander::runVirtualIOVarSet(v6, v7, "rsnxe", (uint64_t)&v13, 0, 0);
  }
  uint64_t v8 = v5;
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        BOOL v11 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)this + 17) + 536)
                                                                       + 112))(*(void *)(*((void *)this + 17) + 536), v8);
        CCLogStream::logAlert(v10, "[dk] %s@%d:ERROR: Setting RSNXE fails, error %s\n", "setRSNXE", 4179, v11);
      }
    }
  }
  return v8;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::enableAPInterface(AppleBCMWLANIO80211APSTAInterface *this)
{
  AppleBCMWLANIO80211APSTAInterface::disableInfraFeaturesForSoftAP(this);
  AppleBCMWLANCore::setTXQueueEnabled(*(void *)(*((void *)this + 17) + 536), 1);
  (*(void (**)(AppleBCMWLANIO80211APSTAInterface *, uint64_t, uint64_t))(*(void *)this + 1352))(this, 2, 1);
  uint64_t v2 = (const char *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 160))(this);
  unsigned int v3 = (char *)v2;
  if (v2)
  {
    size_t v4 = strlen(v2);
    if (v4 <= 0x10)
    {
      unint64_t v5 = v4;
    }
    else
    {
      unsigned int v3 = 0;
      unint64_t v5 = 0;
    }
  }
  else
  {
    unint64_t v5 = 0;
  }
  AppleBCMWLANIO80211APSTAInterface::configureKeepAliveProbing(this);
  AppleBCMWLANCore::postMessageInfra(*(AppleBCMWLANCore **)(*((void *)this + 17) + 536), 0x1Eu, v3, v5);
  (*(void (**)(AppleBCMWLANIO80211APSTAInterface *, uint64_t, void, void, void))(*(void *)this + 512))(this, 4, 0, 0, 0);
  uint64_t v6 = *(AppleBCMWLANCore **)(*((void *)this + 17) + 536);
  return AppleBCMWLANCore::setEventBit(v6, 5u);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::setHOST_AP_MODE_HIDDEN(IO80211SkywalkInterface *this, uint64_t a2)
{
  uint64_t v4 = *((void *)this + 17);
  if (*(_DWORD *)(v4 + 620))
  {
    if (a2 && (unsigned int v18 = *(_DWORD *)(a2 + 4), v18 <= 1))
    {
      unsigned __int8 v7 = *(AppleBCMWLANCommander **)(v4 + 552);
      unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
      v17[0] = &v18;
      v17[1] = 4;
      uint64_t v5 = AppleBCMWLANCommander::runVirtualIOVarSet(v7, InterfaceId, "closednet", (uint64_t)v17, 0, 0);
      uint64_t v9 = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
      if (v5)
      {
        if (v9)
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
          if (CCLogStream::shouldLog())
          {
            unsigned int v10 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
            BOOL v11 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)this + 856))(this, v5);
            CCLogStream::logAlert(v10, "[dk] %s@%d:ERROR: cannot set closednet : retval %x: %s\n", "setHOST_AP_MODE_HIDDEN", 1817, v5, v11);
          }
        }
      }
      else
      {
        if (v9)
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
            unsigned int v15 = v18;
            __int16 v16 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, void))(*(void *)this + 856))(this, 0);
            CCLogStream::logInfo(v14, "[dk] %s@%d:set closednet : hidden %d, retval %x: %s\n", "setHOST_AP_MODE_HIDDEN", 1814, v15, 0, v16);
          }
        }
        *(unsigned char *)(*((void *)this + 17) + 13) = v18 != 0;
        uint64_t v12 = *((void *)this + 17);
        if (*(unsigned char *)(v12 + 13))
        {
          AppleBCMWLANIO80211APSTAInterface::enableSoftAPPowerSave(this, 8u);
        }
        else
        {
          if (*(_DWORD *)(v12 + 620))
          {
            AppleBCMWLANIO80211APSTAInterface::setPowerSaveState(this, 0, 9u);
            *(unsigned char *)(*((void *)this + 17) + 14) = 0;
          }
          AppleBCMWLANIO80211APSTAInterface::holdSoftAPPowerAssertion(this);
        }
        return 0;
      }
    }
    else
    {
      return 22;
    }
  }
  else
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v13 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v13, "[dk] %s@%d:ERROR: Interface not up yet, cannot set softAP hidden mode to %d\n", "setHOST_AP_MODE_HIDDEN", 1797, *(_DWORD *)(a2 + 4));
      }
    }
    return 6;
  }
  return v5;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::holdSoftAPPowerAssertion(AppleBCMWLANIO80211APSTAInterface *this)
{
  int v4 = 1;
  *(unsigned char *)(*((void *)this + 17) + 12) = 1;
  AppleBCMWLANCore::postMessageInfra(*(AppleBCMWLANCore **)(*((void *)this + 17) + 536), 0x8Du, &v4, 4uLL);
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      unsigned int v3 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      return CCLogStream::logAlert(v3, "[dk] %s@%d:LPHS: Hold AP power assertion\n", "holdSoftAPPowerAssertion", 4573);
    }
  }
  return result;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::enableSoftAPPowerSave(AppleBCMWLANIO80211APSTAInterface *a1, unsigned int a2)
{
  BOOL v6 = 0;
  uint64_t result = AppleBCMWLANCore::isSdbChip(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 536), &v6);
  if (result)
  {
    *(unsigned char *)(*((void *)a1 + 17) + 14) = 1;
    if (*(_DWORD *)(*((void *)a1 + 17) + 620)) {
      return AppleBCMWLANIO80211APSTAInterface::setPowerSaveState(a1, 1u, a2);
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)a1 + 1024))(a1);
    if (result)
    {
      (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)a1 + 1024))(a1);
        return CCLogStream::logAlert(v5, "[dk] %s@%d:ALERT: Enabling SoftAP power saving NOT allowed on non-SDB platforms\n", "enableSoftAPPowerSave", 4962);
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::setHOST_AP_MODE_HIDDEN(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANIO80211APSTAInterface::setHOST_AP_MODE_HIDDEN((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANIO80211APSTAInterface::setHOST_AP_MODE_HIDDEN((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::setSSID(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1024))(a1))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      unsigned int v3 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v3, "[dk] %s@%d:\n", "setSSID", 1845);
    }
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::setSSID(uint64_t a1)
{
  return 0;
}

{
  AppleBCMWLANIO80211APSTAInterface::setSSID(a1 - 128);
  return 0;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::setCHANNEL(void *a1, uint64_t a2)
{
  if (!a2)
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1024))(a1))
    {
      (*(void (**)(void *))(*a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        unsigned int v15 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1024))(a1);
        CCLogStream::logCrit(v15, "[dk] %s@%d: Setting SoftAP Failed, invalid input parameter \n");
      }
    }
    return 22;
  }
  int SupportedMaxBW = AppleBCMWLANCore::getSupportedMaxBW(*(AppleBCMWLANCore **)(a1[17] + 536));
  unsigned int v4 = *(_DWORD *)(a2 + 8);
  if (v4 >= 0x100)
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1024))(a1))
    {
      (*(void (**)(void *))(*a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1024))(a1);
        CCLogStream::logCrit(v5, "[dk] %s@%d: Setting SoftAP Failed to set chanspecs, channel %d is out range \n");
      }
    }
    return 22;
  }
  int v8 = *(_DWORD *)(a2 + 12);
  if ((v8 & 0x400) != 0)
  {
    int v10 = 4;
  }
  else if ((v8 & 4) != 0)
  {
    int v10 = 3;
  }
  else
  {
    if ((v8 & 2) == 0)
    {
      if ((*(uint64_t (**)(void *))(*a1 + 1024))(a1))
      {
        (*(void (**)(void *))(*a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1024))(a1);
          CCLogStream::logCrit(v9, "[dk] %s@%d: Setting SoftAP to set chanspecs has invalid BW, flags 0x%x, channel %d, bw is out of range \n", "setCHANNEL", 1888, v8, v4);
        }
      }
      goto LABEL_21;
    }
    int v10 = 2;
  }
  int SupportedMaxBW = v10;
LABEL_21:
  int ChanSpec = AppleBCMWLANCore::getChanSpec(*(void *)(a1[17] + 536), v4, &SupportedMaxBW);
  if (ChanSpec)
  {
    BOOL v11 = *(AppleBCMWLANCommander **)(a1[17] + 552);
    v17[0] = &ChanSpec;
    v17[1] = 4;
    uint64_t v6 = AppleBCMWLANCommander::runIOVarSet(v11, (uint64_t)"chanspec", (uint64_t)v17, 0, 0);
    uint64_t v12 = (*(uint64_t (**)(void *))(*a1 + 1024))(a1);
    if (v6)
    {
      if (v12)
      {
        (*(void (**)(void *))(*a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          unint64_t v13 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1024))(a1);
          (*(void (**)(void *, uint64_t))(*a1 + 856))(a1, v6);
          CCLogStream::logCrit(v13, "[dk] %s@%d: Setting SoftAP Failed to set channel %d  chanspecs 0x%x iovar,  error %s\n");
        }
      }
    }
    else
    {
      if (v12)
      {
        (*(void (**)(void *))(*a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          __int16 v16 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1024))(a1);
          CCLogStream::logNotice(v16, "[dk] %s@%d: Setting SoftAP channel %d chanspecs 0x%x \n", "setCHANNEL", 1906, v4, ChanSpec);
        }
      }
      return 0;
    }
  }
  else
  {
    uint64_t v6 = 3758097090;
    if ((*(uint64_t (**)(void *))(*a1 + 1024))(a1))
    {
      (*(void (**)(void *))(*a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1024))(a1);
        CCLogStream::logCrit(v14, "[dk] %s@%d: Setting SoftAP Failed  to set channel %d, bw 0x%x, invalid setting flags 0x%x failed to convert to chanspec 0x%x \n");
      }
    }
  }
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::setCHANNEL(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANIO80211APSTAInterface::setCHANNEL((void *)(a1 - 112), a2);
}

{
  return AppleBCMWLANIO80211APSTAInterface::setCHANNEL((void *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::setSOFTAP_TRIGGER_CSA(IO80211SkywalkInterface *a1, uint64_t a2)
{
  uint64_t v3 = *((void *)a1 + 17);
  if (*(_DWORD *)(v3 + 620))
  {
    if (!a2)
    {
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          int v10 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 160))(a1);
          CCLogStream::logAlert(v10, "[dk] %s@%d:<%s> WARNING: failed to set channel, invalid input parameter \n");
        }
      }
      return 22;
    }
    unsigned int v23 = 0;
    if (*(unsigned char *)(a2 + 20))
    {
      int isConcurrencyEnabled = AppleBCMWLANCore::isConcurrencyEnabled(*(AppleBCMWLANCore **)(v3 + 536));
      uint64_t v3 = *((void *)a1 + 17);
      if (isConcurrencyEnabled)
      {
        BOOL isConcurrencyOpModeSet = AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(v3 + 536), 1);
        uint64_t v3 = *((void *)a1 + 17);
        if (isConcurrencyOpModeSet)
        {
          (*(void (**)(void, void))(**(void **)(v3 + 536) + 1104))(*(void *)(v3 + 536), 0);
          uint64_t v3 = *((void *)a1 + 17);
        }
      }
    }
    uint64_t ChanSpec = AppleBCMWLANCore::getChanSpec(*(void **)(v3 + 536), a2 + 4, (unsigned __int16 *)&v23);
    if (ChanSpec)
    {
      uint64_t v8 = ChanSpec;
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 160))(a1);
          (*(void (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v8);
          CCLogStream::logAlert(v9, "[dk] %s@%d:<%s> Failed to get channel spec for channel %d flags 0x%X error %s\n");
        }
      }
      return v8;
    }
    if (v23 >= 0x10000)
    {
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          int v19 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 160))(a1);
          CCLogStream::logAlert(v19, "[dk] %s@%d:<%s> Invalid channel spec for channel %d flags 0x%X\n");
        }
      }
      return 22;
    }
    int v21 = 0;
    __int16 v22 = 0;
    BYTE1(v21) = *(_DWORD *)(a2 + 16);
    HIWORD(v21) = v23;
    uint64_t v12 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
    v20[0] = &v21;
    v20[1] = 6;
    uint64_t v8 = AppleBCMWLANCommander::runVirtualIOVarSet(v12, InterfaceId, "csa", (uint64_t)v20, 0, 0);
    uint64_t v14 = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    if (v8)
    {
      if (v14)
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          unsigned int v15 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 160))(a1);
          (*(void (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)a1 + 856))(a1, v8);
          CCLogStream::logAlert(v15, "[dk] %s@%d:<%s> ERROR: failed to set channel, channel %d flags 0x%X chanspec 0x%X error string %s  \n", "setSOFTAP_TRIGGER_CSA");
        }
      }
    }
    else if (v14)
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        __int16 v16 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        char v17 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 160))(a1);
        CCLogStream::logNotice(v16, "[dk] %s@%d:<%s> setting channel %d chanspecs 0x%x \n", "setSOFTAP_TRIGGER_CSA", 1961, v17, *(_DWORD *)(a2 + 8), v23);
      }
    }
  }
  else
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        unsigned int v18 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v18, "[dk] %s@%d:ERROR: Interface not up\n", "setSOFTAP_TRIGGER_CSA", 1918);
      }
    }
    return 6;
  }
  return v8;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::setSOFTAP_TRIGGER_CSA(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANIO80211APSTAInterface::setSOFTAP_TRIGGER_CSA((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANIO80211APSTAInterface::setSOFTAP_TRIGGER_CSA((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::setSOFTAP_PARAMS(AppleBCMWLANIO80211APSTAInterface *this, uint64_t a2)
{
  uint64_t v4 = *((void *)this + 17);
  if (*(unsigned __int8 *)(a2 + 23) != *(unsigned __int8 *)(v4 + 14))
  {
    if (!*(unsigned char *)(a2 + 23))
    {
      if (*(_DWORD *)(v4 + 620))
      {
        AppleBCMWLANIO80211APSTAInterface::setPowerSaveState(this, 0, 0);
        int v5 = 0;
        *(unsigned char *)(*((void *)this + 17) + 14) = 0;
      }
      else
      {
        int v5 = 0;
      }
      goto LABEL_5;
    }
    AppleBCMWLANIO80211APSTAInterface::enableSoftAPPowerSave(this, 0);
  }
  int v5 = 1;
LABEL_5:
  int v6 = *(unsigned __int16 *)(a2 + 20);
  uint64_t v7 = *((void *)this + 17);
  if (v6 != 0xFFFF && v6 != *(unsigned __int16 *)(v7 + 104))
  {
    AppleBCMWLANIO80211APSTAInterface::setBeaconInterval(this, v6);
    uint64_t v7 = *((void *)this + 17);
  }
  int v9 = *(_DWORD *)(a2 + 4);
  if (v9 != *(_DWORD *)(v7 + 24))
  {
    *(_DWORD *)(v7 + 24) = v9;
    uint64_t v7 = *((void *)this + 17);
  }
  int v10 = *(_DWORD *)(a2 + 8);
  if (v10 != *(_DWORD *)(v7 + 28))
  {
    *(_DWORD *)(v7 + 28) = v10;
    uint64_t v7 = *((void *)this + 17);
  }
  int v11 = *(_DWORD *)(a2 + 12);
  if (v11 != *(_DWORD *)(v7 + 32))
  {
    *(_DWORD *)(v7 + 32) = v11;
    uint64_t v7 = *((void *)this + 17);
  }
  int v12 = *(_DWORD *)(a2 + 16);
  if (v12 != *(_DWORD *)(v7 + 36))
  {
    *(_DWORD *)(v7 + 36) = v12;
    uint64_t v7 = *((void *)this + 17);
  }
  int v13 = *(unsigned __int8 *)(a2 + 24);
  if (*(_DWORD *)(v7 + 40) != v13) {
    *(_DWORD *)(v7 + 40) = v13;
  }
  if (v5) {
    AppleBCMWLANIO80211APSTAInterface::setPowerSaveState(this, 1u, 0);
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::setSOFTAP_PARAMS(uint64_t a1, uint64_t a2)
{
  return 0;
}

{
  AppleBCMWLANIO80211APSTAInterface::setSOFTAP_PARAMS((AppleBCMWLANIO80211APSTAInterface *)(a1 - 128), a2);
  return 0;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::setSOFTAP_WIFI_NETWORK_INFO_IE(void *a1, unsigned char *a2)
{
  if (!AppleBCMWLANCore::isConcurrencyEnabled(*(AppleBCMWLANCore **)(a1[17] + 536))) {
    return 0;
  }
  if (a2[3] < 0x21u)
  {
    uint64_t v6 = a1[17];
    if (memcmp((const void *)(v6 + 44), a2, 0x24uLL))
    {
      *(unsigned char *)(v6 + 98) = 1;
      uint64_t v6 = a1[17];
    }
    *(_DWORD *)(v6 + 76) = 0;
    *(_OWORD *)(v6 + 60) = 0u;
    *(_OWORD *)(v6 + 44) = 0u;
    *(unsigned char *)(a1[17] + 46) = a2[2];
    *(_WORD *)(a1[17] + 44) = *(_WORD *)a2;
    *(unsigned char *)(a1[17] + 47) = a2[3];
    if (a2[3]) {
      memcpy((void *)(a1[17] + 48), a2 + 4, a2[3]);
    }
    if ((*(uint64_t (**)(void *))(*a1 + 1024))(a1))
    {
      (*(void (**)(void *))(*a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1024))(a1);
        CCLogStream::logNotice(v8, "[dk] %s@%d: %s: %d %d %d\n", "setSOFTAP_WIFI_NETWORK_INFO_IE", 2044, "setSOFTAP_WIFI_NETWORK_INFO_IE", *(unsigned __int8 *)(a1[17] + 46), *(unsigned __int16 *)(a1[17] + 44), *(unsigned __int8 *)(a1[17] + 47));
      }
    }
    return 0;
  }
  uint64_t v4 = 3758097090;
  if ((*(uint64_t (**)(void *))(*a1 + 1024))(a1))
  {
    (*(void (**)(void *))(*a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      int v5 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1024))(a1);
      CCLogStream::logAlert(v5, "[dk] %s@%d: Invalid SSID len[%u]\n", "setSOFTAP_WIFI_NETWORK_INFO_IE", 2025, a2[3]);
    }
  }
  return v4;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::setSOFTAP_WIFI_NETWORK_INFO_IE(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANIO80211APSTAInterface::setSOFTAP_WIFI_NETWORK_INFO_IE((void *)(a1 - 112), a2);
}

{
  return AppleBCMWLANIO80211APSTAInterface::setSOFTAP_WIFI_NETWORK_INFO_IE((void *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::setSOFTAP_EXTENDED_CAPABILITIES_IE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 136);
  *(void *)(v2 + 80) = 0;
  *(void *)(v2 + 88) = 0;
  *(_WORD *)(v2 + 96) = 0;
  *(unsigned char *)(*(void *)(a1 + 136) + 80) = *(unsigned char *)a2;
  *(_OWORD *)(*(void *)(a1 + 136) + 81) = *(_OWORD *)(a2 + 1);
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::setSOFTAP_EXTENDED_CAPABILITIES_IE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(v2 + 80) = 0;
  *(void *)(v2 + 88) = 0;
  *(_WORD *)(v2 + 96) = 0;
  *(unsigned char *)(*(void *)(a1 + 24) + 80) = *(unsigned char *)a2;
  *(_OWORD *)(*(void *)(a1 + 24) + 81) = *(_OWORD *)(a2 + 1);
  return 0;
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(v2 + 80) = 0;
  *(void *)(v2 + 88) = 0;
  *(_WORD *)(v2 + 96) = 0;
  *(unsigned char *)(*(void *)(a1 + 8) + 80) = *(unsigned char *)a2;
  *(_OWORD *)(*(void *)(a1 + 8) + 81) = *(_OWORD *)(a2 + 1);
  return 0;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::getSOFTAP_PARAMS(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a2 + 20) = *(_WORD *)(*(void *)(a1 + 136) + 104);
  *(unsigned char *)(a2 + 23) = *(unsigned char *)(*(void *)(a1 + 136) + 14);
  *(unsigned char *)(a2 + 22) = *(_DWORD *)(*(void *)(a1 + 136) + 16);
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(*(void *)(a1 + 136) + 24);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(*(void *)(a1 + 136) + 28);
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(*(void *)(a1 + 136) + 32);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(*(void *)(a1 + 136) + 36);
  *(unsigned char *)(a2 + 24) = *(_DWORD *)(*(void *)(a1 + 136) + 40);
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::getSOFTAP_PARAMS(uint64_t a1, uint64_t a2)
{
  return 0;
}

{
  AppleBCMWLANIO80211APSTAInterface::getSOFTAP_PARAMS(a1 - 128, a2);
  return 0;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::getSOFTAP_STATS(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 136);
  long long v3 = *(_OWORD *)(v2 + 448);
  *(_OWORD *)a2 = *(_OWORD *)(v2 + 432);
  *(_OWORD *)(a2 + 16) = v3;
  long long v4 = *(_OWORD *)(v2 + 464);
  long long v5 = *(_OWORD *)(v2 + 480);
  long long v6 = *(_OWORD *)(v2 + 496);
  *(void *)(a2 + 80) = *(void *)(v2 + 512);
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 32) = v4;
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::getSOFTAP_STATS(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  long long v3 = *(_OWORD *)(v2 + 448);
  *(_OWORD *)a2 = *(_OWORD *)(v2 + 432);
  *(_OWORD *)(a2 + 16) = v3;
  long long v4 = *(_OWORD *)(v2 + 464);
  long long v5 = *(_OWORD *)(v2 + 480);
  long long v6 = *(_OWORD *)(v2 + 496);
  *(void *)(a2 + 80) = *(void *)(v2 + 512);
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 32) = v4;
  return 0;
}

{
  uint64_t v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;

  uint64_t v2 = *(void *)(a1 + 8);
  long long v3 = *(_OWORD *)(v2 + 448);
  *(_OWORD *)a2 = *(_OWORD *)(v2 + 432);
  *(_OWORD *)(a2 + 16) = v3;
  long long v4 = *(_OWORD *)(v2 + 464);
  long long v5 = *(_OWORD *)(v2 + 480);
  long long v6 = *(_OWORD *)(v2 + 496);
  *(void *)(a2 + 80) = *(void *)(v2 + 512);
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 32) = v4;
  return 0;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::setRSN_CONF(IO80211SkywalkInterface *this, uint64_t a2)
{
  unsigned int v54 = 0;
  memset(v58, 170, sizeof(v58));
  unint64_t v57 = 0xAAAAAAAAAAAAAAAALL;
  if ((*(unsigned char *)(*((void *)this + 17) + 667) & 0x10) != 0)
  {
    uint64_t v24 = 3758097109;
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        size_t v45 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v45, "[dk] %s@%d: softAP power change is in progress. Rejecting RSN config.\n", "setRSN_CONF", 2362);
      }
    }
  }
  else
  {
    unsigned int v4 = *(_DWORD *)(a2 + 44);
    int v5 = 0;
    if (v4 >= 8) {
      uint64_t v6 = 8;
    }
    else {
      uint64_t v6 = v4;
    }
    if (v6)
    {
      uint64_t v7 = (int *)(a2 + 48);
      do
      {
        int v9 = *v7++;
        int v8 = v9;
        int v10 = v5 | 2;
        if (v9 != 1) {
          int v10 = v5;
        }
        if (v8 == 2) {
          v5 |= 4u;
        }
        else {
          int v5 = v10;
        }
        --v6;
      }
      while (v6);
    }
    unsigned int v11 = *(_DWORD *)(a2 + 124);
    if (v11 >= 8) {
      uint64_t v12 = 8;
    }
    else {
      uint64_t v12 = v11;
    }
    if (v12)
    {
      int v13 = (int *)(a2 + 128);
      do
      {
        int v15 = *v13++;
        int v14 = v15;
        int v16 = v5 | 0x80;
        int v17 = v5 | 0x40;
        if (v15 != 4) {
          int v17 = v5;
        }
        if (v14 != 8) {
          int v16 = v17;
        }
        if (v14 == 4096) {
          v5 |= 0x40000u;
        }
        else {
          int v5 = v16;
        }
        --v12;
      }
      while (v12);
    }
    int v53 = v5;
    if (v4 && *(_DWORD *)(a2 + 8))
    {
      unint64_t v18 = 0;
      do
      {
        mapAppleCipherToBcomWsecFlags(&v54, *(_DWORD *)(a2 + 12 + 4 * v18));
        if (v18 > 6) {
          break;
        }
        ++v18;
      }
      while (v18 < *(unsigned int *)(a2 + 8));
      unsigned int v11 = *(_DWORD *)(a2 + 124);
    }
    if (v11 && *(_DWORD *)(a2 + 88))
    {
      unint64_t v19 = 0;
      do
      {
        mapAppleCipherToBcomWsecFlags(&v54, *(_DWORD *)(a2 + 92 + 4 * v19));
        if (v19 > 6) {
          break;
        }
        ++v19;
      }
      while (v19 < *(unsigned int *)(a2 + 88));
    }
    unsigned int v20 = *(unsigned __int16 *)(a2 + 160);
    int v52 = 0;
    int v21 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
    *(void *)&v55[0] = &v52;
    *((void *)&v55[0] + 1) = 4;
    uint64_t v23 = AppleBCMWLANCommander::runVirtualIOCtlSet(v21, InterfaceId, 22, (uint64_t)v55, 0, 0);
    if (v23)
    {
      uint64_t v24 = v23;
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v25 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
          (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 17) + 536) + 112))(*(void *)(*((void *)this + 17) + 536), v24);
          CCLogStream::logCrit(v25, "[dk] %s@%d:auth (0x%lx) failed, error %s\n");
        }
      }
    }
    else
    {
      unsigned int v56 = v20;
      *(void *)&long long v27 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v55[2] = v27;
      v55[3] = v27;
      v55[0] = v27;
      v55[1] = v27;
      v51[0] = v55;
      v51[1] = 0x4000000040;
      uint64_t v28 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
      unsigned __int8 v29 = IO80211SkywalkInterface::getInterfaceId(this);
      unsigned __int8 v49 = &v56;
      uint64_t v50 = 32;
      uint64_t v30 = AppleBCMWLANCommander::runVirtualIOVarSet(v28, v29, "wpa_cap", (uint64_t)&v49, (uint64_t)v51, 0);
      if (v30)
      {
        uint64_t v24 = v30;
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
          if (CCLogStream::shouldLog())
          {
            OSStringPtr v31 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
            (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 17) + 536) + 112))(*(void *)(*((void *)this + 17) + 536), v24);
            CCLogStream::logCrit(v31, "[dk] %s@%d:  wpa_cap (%ld) failed, error %s\n");
          }
        }
      }
      else
      {
        uint64_t v32 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
        unsigned __int8 v33 = IO80211SkywalkInterface::getInterfaceId(this);
        unsigned __int8 v49 = &v54;
        uint64_t v50 = 4;
        uint64_t v24 = AppleBCMWLANCommander::runVirtualIOVarSet(v32, v33, "wsec", (uint64_t)&v49, 0, 0);
        uint64_t v34 = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
        if (v24)
        {
          if (v34)
          {
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
            if (CCLogStream::shouldLog())
            {
              size_t v35 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
              (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 17) + 536) + 112))(*(void *)(*((void *)this + 17) + 536), v24);
              CCLogStream::logCrit(v35, "[dk] %s@%d:  wsec (0x%lx) failed, error %s\n");
            }
          }
        }
        else
        {
          if (v34)
          {
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
            if (CCLogStream::shouldLog())
            {
              char v46 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
              CCLogStream::logAlert(v46, "[dk] %s@%d: WLC_SET_WPA_AUTH 0x%X\n", "setRSN_CONF", 2441, v5);
            }
          }
          unsigned __int8 v36 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
          unsigned __int8 v37 = IO80211SkywalkInterface::getInterfaceId(this);
          unsigned __int8 v49 = (unsigned int *)&v53;
          uint64_t v50 = 4;
          uint64_t v38 = AppleBCMWLANCommander::runVirtualIOCtlSet(v36, v37, 165, (uint64_t)&v49, 0, 0);
          if (v38)
          {
            uint64_t v24 = v38;
            if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this))
            {
              (*(void (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
              if (CCLogStream::shouldLog())
              {
                size_t v39 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
                (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 17) + 536) + 112))(*(void *)(*((void *)this + 17) + 536), v24);
                CCLogStream::logCrit(v39, "[dk] %s@%d:  wpa_auth (0x%lx) failed, error %s\n");
              }
            }
          }
          else
          {
            if (v53 == 262272)
            {
              int v40 = 1;
            }
            else if (v53 == 0x40000)
            {
              int v40 = 2;
            }
            else
            {
              int v40 = (v20 >> 7) & 1;
            }
            AppleBCMWLANIO80211APSTAInterface::configureManagementFrameProtectionForSoftAP(this, v40);
            uint64_t v41 = *((void *)this + 17);
            v48[0] = *(_DWORD *)(v41 + 616);
            v48[1] = 1;
            uint64_t v42 = *(AppleBCMWLANCommander **)(v41 + 552);
            unsigned __int8 v43 = IO80211SkywalkInterface::getInterfaceId(this);
            unsigned __int8 v49 = v48;
            uint64_t v50 = 8;
            uint64_t v24 = AppleBCMWLANCommander::runVirtualIOVarSet(v42, v43, "bss", (uint64_t)&v49, 0, 0);
            if (v24)
            {
              if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this))
              {
                (*(void (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v44 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
                  (*(void (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)this + 856))(this, v24);
                  CCLogStream::logCrit(v44, "[dk] %s@%d: cant bring up bss, error %s\n");
                }
              }
            }
            else
            {
              AppleBCMWLANIO80211APSTAInterface::enableAPInterface(this);
              if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this))
              {
                (*(void (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
                if (CCLogStream::shouldLog())
                {
                  unsigned __int8 v47 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
                  CCLogStream::logAlert(v47, "[dk] %s@%d:%s: interface is up!\n", "setRSN_CONF", 2475, "virtual int32_t AppleBCMWLANIO80211APSTAInterface::setRSN_CONF(struct apple80211_rsn_conf_data *)");
                }
              }
              *(_DWORD *)(*((void *)this + 17) + 620) = 1;
            }
          }
        }
      }
    }
  }
  return v24;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::setRSN_CONF(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANIO80211APSTAInterface::setRSN_CONF((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANIO80211APSTAInterface::setRSN_CONF((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::setSTA_AUTHORIZE(IO80211SkywalkInterface *a1, uint64_t a2)
{
  if (!a2) {
    return 3758097090;
  }
  unsigned int v4 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  if (*(_DWORD *)(a2 + 4)) {
    int v6 = 121;
  }
  else {
    int v6 = 122;
  }
  v13[0] = a2 + 8;
  v13[1] = 6;
  uint64_t v7 = AppleBCMWLANCommander::runVirtualIOCtlSet(v4, InterfaceId, v6, (uint64_t)v13, 0, 0);
  if (v7)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v8 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        int v9 = *(_DWORD *)(a2 + 4);
        int v10 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)a1 + 17) + 536)
                                                                       + 112))(*(void *)(*((void *)a1 + 17) + 536), v7);
        int v11 = 121;
        if (!v9) {
          int v11 = 122;
        }
        CCLogStream::logCrit(v8, "[dk] %s@%d:  %d failed, error %s\n", "setSTA_AUTHORIZE", 2493, v11, v10);
      }
    }
  }
  return v7;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::setSTA_AUTHORIZE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANIO80211APSTAInterface::setSTA_AUTHORIZE((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANIO80211APSTAInterface::setSTA_AUTHORIZE((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::setSTA_DEAUTH(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1656))();
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::setSTA_DEAUTH(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 - 112) + 1656))();
}

{
  return (*(uint64_t (**)(void))(*(void *)(a1 - 128) + 1656))();
}

uint64_t AppleBCMWLANIO80211APSTAInterface::setSTA_DISASSOCIATE(IO80211SkywalkInterface *a1, uint64_t a2)
{
  int v15 = -1431655766;
  int v4 = *(_DWORD *)(a2 + 8);
  v16[0] = *(_DWORD *)(a2 + 4);
  v16[1] = v4;
  int v17 = -1431655766;
  LOWORD(v17) = *(_WORD *)(a2 + 12);
  v13[0] = &v14;
  v13[1] = 0xC000C000CLL;
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  int v5 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  v12[0] = v16;
  v12[1] = 12;
  uint64_t v7 = AppleBCMWLANCommander::runVirtualIOCtlSet(v5, InterfaceId, 201, (uint64_t)v12, (uint64_t)v13, 0);
  if (v7)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v9 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        int v10 = *(_DWORD *)(a2 + 4);
        int v11 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)a1 + 17) + 536)
                                                                       + 112))(*(void *)(*((void *)a1 + 17) + 536), v7);
        CCLogStream::logCrit(v9, "[dk] %s@%d: WLC_SCB_DEAUTHENTICATE_FOR_REASON (reason=%x) failed, error %s\n", "setSTA_DISASSOCIATE", 2519, v10, v11);
      }
    }
  }
  return v7;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::setSTA_DISASSOCIATE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANIO80211APSTAInterface::setSTA_DISASSOCIATE((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANIO80211APSTAInterface::setSTA_DISASSOCIATE((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::setCIPHER_KEY(IO80211SkywalkInterface *a1, uint64_t a2)
{
  if (*(_DWORD *)(*((void *)a1 + 17) + 620))
  {
    uint64_t v4 = *(unsigned int *)(a2 + 8);
    if (v4)
    {
      if (v4 == 5 || v4 == 3)
      {
        int v16 = 0;
        memset(v15, 0, sizeof(v15));
        uint64_t v6 = mapAppleKeyToBcomKey((uint64_t)v15, a2);
        if (v6)
        {
          uint64_t v4 = v6;
          if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
          {
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              (*(void (**)(void, uint64_t))(**(void **)(*((void *)a1 + 17) + 536) + 112))(*(void *)(*((void *)a1 + 17) + 536), v4);
              CCLogStream::logCrit(v7, "[dk] %s@%d: mapAppleKeyToBcomKey() failed, error %s\n");
            }
          }
        }
        else
        {
          int v8 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552);
          unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
          v14[0] = v15;
          v14[1] = 164;
          uint64_t v4 = AppleBCMWLANCommander::runVirtualIOCtlSet(v8, InterfaceId, 45, (uint64_t)v14, 0, 0);
          if (v4)
          {
            if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
            {
              (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
              if (CCLogStream::shouldLog())
              {
                int v13 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
                (*(void (**)(void, uint64_t))(**(void **)(*((void *)a1 + 17) + 536) + 112))(*(void *)(*((void *)a1 + 17) + 536), v4);
                CCLogStream::logCrit(v13, "[dk] %s@%d: WLC_SET_KEY failed, error %s\n");
              }
            }
          }
        }
      }
      else
      {
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
            CCLogStream::logCrit(v12, "[dk] %s@%d: cipher type (%d) not supported\n", "setCIPHER_KEY", 2568, *(_DWORD *)(a2 + 8));
          }
        }
        return 0;
      }
    }
  }
  else
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v11 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v11, "[dk] %s@%d:ERROR: SoftAP interface not up\n", "setCIPHER_KEY", 2531);
      }
    }
    return 6;
  }
  return v4;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::setCIPHER_KEY(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANIO80211APSTAInterface::setCIPHER_KEY((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANIO80211APSTAInterface::setCIPHER_KEY((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::getSTA_IE_LIST(IO80211SkywalkInterface *this, uint64_t a2)
{
  if (!a2) {
    return 22;
  }
  uint64_t v4 = 0;
  int v5 = (_DWORD *)(a2 + 4);
  uint64_t v6 = *((void *)this + 17) + 185;
  while (*(_DWORD *)(v6 + v4) != *v5 || *(unsigned __int16 *)(v6 + v4 + 4) != *(unsigned __int16 *)(a2 + 8))
  {
    v4 += 48;
    if (v4 == 240)
    {
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v24 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
          CCLogStream::logAlert(v24, "[dk] %s@%d:ERROR: Unable to find in Station table \n", "getSTA_IE_LIST", 2585);
        }
      }
      return 2;
    }
  }
  *(_DWORD *)(a2 + 16) = *v5;
  unsigned __int16 v9 = *(_WORD *)(a2 + 12) - 6;
  *(_WORD *)(a2 + 20) = *(_WORD *)(a2 + 8);
  uint64_t v10 = v9;
  unint64_t v11 = v9 | ((unint64_t)v9 << 32);
  if (v9)
  {
    uint64_t v12 = a2 + 16;
  }
  else
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  v26[0] = v12;
  v26[1] = v11;
  int v13 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
  v25[0] = v12;
  v25[1] = v10;
  uint64_t v8 = AppleBCMWLANCommander::runVirtualIOVarGet(v13, InterfaceId, "wpaie", (uint64_t)v25, (uint64_t)v26, 0);
  if (v8)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        int v15 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
        int v16 = *(unsigned __int8 *)(a2 + 4);
        int v17 = *(unsigned __int8 *)(a2 + 5);
        int v18 = *(unsigned __int8 *)(a2 + 6);
        int v19 = *(unsigned __int8 *)(a2 + 7);
        int v20 = *(unsigned __int8 *)(a2 + 8);
        int v21 = *(unsigned __int8 *)(a2 + 9);
        __int16 v22 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)this + 17) + 536)
                                                                       + 112))(*(void *)(*((void *)this + 17) + 536), v8);
        CCLogStream::logCrit(v15, "[dk] %s@%d:wpaie (%02x:%02x:%02x:%02x:%02x:%02x) failed, error %s\n", "getSTA_IE_LIST", 2605, v16, v17, v18, v19, v20, v21, v22);
      }
    }
  }
  else
  {
    *(_DWORD *)(a2 + 12) = *(unsigned __int8 *)(a2 + 17) + 2;
  }
  return v8;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::getSTA_IE_LIST(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANIO80211APSTAInterface::getSTA_IE_LIST((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANIO80211APSTAInterface::getSTA_IE_LIST((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::getSTA_STATS(IO80211SkywalkInterface *a1, _DWORD *a2)
{
  uint64_t v2 = *((void *)a1 + 17);
  if (!*(_DWORD *)(v2 + 620)) {
    return 57;
  }
  if (!a2) {
    return 22;
  }
  if (AppleBCMWLANCore::getFirmwareInterfaceVersion(*(AppleBCMWLANCore **)(v2 + 536)) >= 7)
  {
    if (AppleBCMWLANCore::getFirmwareInterfaceVersion(*(AppleBCMWLANCore **)(*((void *)a1 + 17) + 536)) >= 0xF) {
      unsigned int v5 = 296;
    }
    else {
      unsigned int v5 = 280;
    }
  }
  else
  {
    unsigned int v5 = 264;
  }
  uint64_t v7 = v5;
  uint64_t v8 = IOMallocZeroData();
  if (!v8) {
    return 12;
  }
  uint64_t v9 = v8;
  v20[0] = v8;
  v20[1] = v7 | ((unint64_t)(v7 | (v7 << 16)) << 16);
  uint64_t v10 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  v19[0] = a2 + 1;
  v19[1] = 6;
  uint64_t v6 = AppleBCMWLANCommander::runVirtualIOVarGet(v10, InterfaceId, "sta_info", (uint64_t)v19, (uint64_t)v20, 0);
  if (v6)
  {
    if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        int v13 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)a1 + 17) + 536)
                                                                       + 112))(*(void *)(*((void *)a1 + 17) + 536), v6);
        CCLogStream::logCrit(v12, "[dk] %s@%d: Failed to get station stats, error %s\n", "getSTA_STATS", 2645, v13);
      }
    }
  }
  else
  {
    int v14 = *(_DWORD *)(v9 + 84);
    int v15 = *(_DWORD *)(v9 + 88);
    uint64_t v16 = *(void *)(v9 + 96);
    uint64_t v17 = *(void *)(v9 + 104);
    *a2 = 1;
    a2[3] = v15;
    a2[4] = v17;
    a2[5] = v14;
    a2[6] = v16;
  }
  IOFreeData();
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::getSTA_STATS(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANIO80211APSTAInterface::getSTA_STATS((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANIO80211APSTAInterface::getSTA_STATS((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::getKEY_RSC(IO80211SkywalkInterface *a1, uint64_t a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  LODWORD(v9) = *(unsigned __int16 *)(a2 + 14);
  v7[0] = &v8;
  v7[1] = 0x800040008;
  long long v3 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
  v6[0] = &v9;
  v6[1] = 8;
  uint64_t result = AppleBCMWLANCommander::runVirtualIOCtlGet(v3, InterfaceId, 183, (uint64_t)v6, (uint64_t)v7, 0);
  if (!result)
  {
    *(void *)(a2 + 84) = v8;
    *(_DWORD *)(a2 + 80) = 8;
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::getKEY_RSC(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANIO80211APSTAInterface::getKEY_RSC((IO80211SkywalkInterface *)(a1 - 112), a2);
}

{
  return AppleBCMWLANIO80211APSTAInterface::getKEY_RSC((IO80211SkywalkInterface *)(a1 - 128), a2);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::handleEvent(uint64_t result, uint64_t a2)
{
  if (!a2) {
    return result;
  }
  long long v3 = (IO80211SkywalkInterface *)result;
  if ((*(uint64_t (**)(uint64_t))(*(void *)result + 1024))(result))
  {
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
    if (CCLogStream::shouldLog())
    {
      unsigned int v54 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
      uint64_t v55 = convertEventToString(*(_DWORD *)(a2 + 4), 0, 0);
      CCLogStream::logAlertIf(v54, 0x10uLL, "[dk] %s@%d:type = %s (%lu), status = %lu, reason = %lu, flags = 0x%x, authtype = %lu, addr = %02X:%02X:%02X:%02X:%02X:%02X\n", "handleEvent", 2719, v55, *(unsigned int *)(a2 + 4), *(unsigned int *)(a2 + 8), *(unsigned int *)(a2 + 12), *(unsigned __int16 *)(a2 + 2), *(unsigned int *)(a2 + 16), *(unsigned __int8 *)(a2 + 24), *(unsigned __int8 *)(a2 + 25), *(unsigned __int8 *)(a2 + 26), *(unsigned __int8 *)(a2 + 27), *(unsigned __int8 *)(a2 + 28), *(unsigned __int8 *)(a2 + 29));
    }
  }
  int v4 = *(_DWORD *)(a2 + 4);
  if (v4 > 53)
  {
    switch(v4)
    {
      case 150:
        uint64_t result = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
        if (result)
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            uint64_t v58 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
            uint64_t result = CCLogStream::logCrit(v58, "[dk] %s@%d: WLC_E_PSK_AUTH event size %lu, status %u reason %u dataLen %u authType 0x%X addr %02X:%02X:%02X:%02X:%02X:%02X", "handleEvent", 3025, 48, *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 16), *(unsigned __int8 *)(a2 + 24), *(unsigned __int8 *)(a2 + 25), *(unsigned __int8 *)(a2 + 26), *(unsigned __int8 *)(a2 + 27), *(unsigned __int8 *)(a2 + 28), *(unsigned __int8 *)(a2 + 29));
          }
        }
        if (*(_DWORD *)(a2 + 12) == 3)
        {
          uint64_t result = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
          if (result)
          {
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
            uint64_t result = CCLogStream::shouldLog();
            if (result)
            {
              uint64_t v42 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
              return CCLogStream::logCrit(v42, "[dk] %s@%d: WLC_E_PSK_AUTH event GTK rekeying done\n", "handleEvent", 3028);
            }
          }
        }
        break;
      case 75:
        return AppleBCMWLANIO80211APSTAInterface::handleActionFrame((uint64_t)v3, a2);
      case 54:
        unsigned int v11 = *(_DWORD *)(a2 + 20);
        if (v11)
        {
          if (v11 > 4)
          {
            int v12 = *(unsigned __int8 *)(a2 + 48);
            int v13 = *(unsigned __int8 *)(a2 + 51);
            int FirmwareInterfaceVersion = AppleBCMWLANCore::getFirmwareInterfaceVersion(*(AppleBCMWLANCore **)(*((void *)v3 + 17) + 536));
            IOLog(" AP interface index is now: %u (bsscfg=%u) fwVer %d\n", v12, v13, FirmwareInterfaceVersion);
            if (AppleBCMWLANCore::isHostAssignedInterfaceIndex(*(AppleBCMWLANCore **)(*((void *)v3 + 17) + 536)))
            {
              int v15 = *(unsigned __int8 *)(a2 + 48);
              if (IO80211SkywalkInterface::getInterfaceId(v3) == v15)
              {
                *(_DWORD *)(*((void *)v3 + 17) + 616) = -1;
              }
              else if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3))
              {
                (*(void (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v64 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
                  int InterfaceId = IO80211SkywalkInterface::getInterfaceId(v3);
                  CCLogStream::logAlert(v64, "[dk] %s@%d: ERROR: FW return invalid interface index: set 0x%X returned ox%X\n", "handleEvent", 2737, InterfaceId, *(unsigned __int8 *)(a2 + 48));
                }
              }
            }
            else if (*(_DWORD *)(*((void *)v3 + 17) + 616) == *(unsigned __int8 *)(a2 + 51))
            {
              IO80211SkywalkInterface::setInterfaceId(v3, *(unsigned __int8 *)(a2 + 48));
              AppleBCMWLANCore::setApStaSkywalkInterface(*(void *)(*((void *)v3 + 17) + 536), *(unsigned __int8 *)(a2 + 48));
              (*(void (**)(void, void))(**(void **)(*((void *)v3 + 17) + 720) + 104))(*(void *)(*((void *)v3 + 17) + 720), *(unsigned __int8 *)(a2 + 48));
              AppleBCMWLANCore::signalDriverEvent(*(void *)(*((void *)v3 + 17) + 536), 3);
            }
            IO80211SkywalkInterface::getInterfaceId(v3);
            return IOLog("%s %d interface id %d\n");
          }
          if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3))
          {
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
            if (CCLogStream::shouldLog())
            {
              unsigned int v56 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
              CCLogStream::logAlert(v56, "[dk] %s@%d: Insufficient space[%u] < %lu\n");
            }
          }
        }
LABEL_125:
        uint64_t result = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
        if (result)
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            uint64_t v61 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
            return CCLogStream::logEmergency(v61, "[dk] %s@%d:Failure in handleEvent\n", "handleEvent", 3044);
          }
        }
        return result;
      default:
LABEL_85:
        uint64_t result = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
        if (result)
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            unsigned __int8 v43 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
            return CCLogStream::logNotice(v43, "[dk] %s@%d: Unhandled event %lu: status = %lu, reason = %lu, flags = 0x%x, authtype = %lu, addr = %02x:%02x:%02x:%02x:%02x:%02x\n", "handleEvent", 3036, *(unsigned int *)(a2 + 4), *(unsigned int *)(a2 + 8), *(unsigned int *)(a2 + 12), *(unsigned __int16 *)(a2 + 2), *(unsigned int *)(a2 + 16), *(unsigned __int8 *)(a2 + 24), *(unsigned __int8 *)(a2 + 25), *(unsigned __int8 *)(a2 + 26), *(unsigned __int8 *)(a2 + 27), *(unsigned __int8 *)(a2 + 28), *(unsigned __int8 *)(a2 + 29));
          }
        }
        return result;
    }
  }
  else
  {
    switch(v4)
    {
      case 4:
        AppleBCMWLANIO80211APSTAInterface::setPowerSaveState(v3, 1u, 1u);
        AppleBCMWLANCore::requestBlockScan(*(AppleBCMWLANCore **)(*((void *)v3 + 17) + 536), 1, 500);
        uint64_t result = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
        if (result)
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            unint64_t v57 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
            uint64_t result = CCLogStream::logCrit(v57, "[dk] %s@%d: WLC_E_AUTH_IND event size %lu, status %u reason %u dataLen %u authType 0x%X addr %02X:%02X:%02X:%02X:%02X:%02X", "handleEvent", 2759, 48, *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 16), *(unsigned __int8 *)(a2 + 24), *(unsigned __int8 *)(a2 + 25), *(unsigned __int8 *)(a2 + 26), *(unsigned __int8 *)(a2 + 27), *(unsigned __int8 *)(a2 + 28), *(unsigned __int8 *)(a2 + 29));
          }
        }
        if (*(_DWORD *)(a2 + 8) || *(_DWORD *)(a2 + 16) != 3) {
          return result;
        }
        long long v88 = 0u;
        memset(v89, 0, 28);
        long long v86 = 0u;
        long long v87 = 0u;
        long long v85 = 0u;
        DWORD1(v84) = mapBcmStatusToApple80211IOReturnScan(0);
        unsigned int v21 = mapBcmReasonToApple80211IOReturnIEEEReason(*(_DWORD *)(a2 + 12));
        LODWORD(v84) = 5;
        unsigned int v23 = *(_DWORD *)(a2 + 20);
        *((void *)&v84 + 1) = __PAIR64__(*(_DWORD *)(a2 + 24), v21);
        LOWORD(v85) = *(_WORD *)(a2 + 28);
        if (!v23) {
          return AppleBCMWLANIO80211APSTAInterface::postMessageForSTA(v3, 152, &v84, 0x6Cu);
        }
        if (v23 <= 3)
        {
          uint64_t result = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
          if (result)
          {
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
            uint64_t result = CCLogStream::shouldLog();
            if (result)
            {
              uint64_t v66 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
              return CCLogStream::logAlert(v66, "[dk] %s@%d: Insufficient space[%u] < %lu\n");
            }
          }
          return result;
        }
        if (*(_WORD *)(a2 + 48) != 1) {
          return AppleBCMWLANIO80211APSTAInterface::postMessageForSTA(v3, 152, &v84, 0x6Cu);
        }
        unsigned int v24 = *(unsigned __int16 *)(a2 + 50);
        LOWORD(v25) = v24 - 4;
        if (v24 < 4 || v23 < v24 || (unsigned __int16)(v24 - 4) < 4u) {
          return AppleBCMWLANIO80211APSTAInterface::postMessageForSTA(v3, 152, &v84, 0x6Cu);
        }
        int v26 = 0;
        long long v27 = (unsigned __int16 *)(a2 + 52);
        while (1)
        {
          int v28 = *v27;
          size_t v29 = v27[1];
          uint64_t v83 = 0;
          if (AppleBCMWLANUtil::safe_align_up((AppleBCMWLANUtil *)v29, 4, &v83, v22)) {
            break;
          }
          BOOL v30 = __CFADD__(v83, 4);
          unint64_t v31 = v83 + 4;
          v83 += 4;
          if (v30)
          {
            if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3))
            {
              (*(void (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
              if (CCLogStream::shouldLog())
              {
                OSStringPtr v60 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
                CCLogStream::logAlert(v60, "[dk] %s@%d:os_add_overflow adding BCM_XTLV_HDR_SIZE failed\n");
              }
            }
            goto LABEL_125;
          }
          if (v31 >= 0xFFFF)
          {
            if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3))
            {
              (*(void (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
              if (CCLogStream::shouldLog())
              {
                BOOL v69 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
                CCLogStream::logAlert(v69, "[dk] %s@%d:UINT16_MAX overflow alignedTlvLen\n");
              }
            }
            goto LABEL_125;
          }
          if (v28 == 2)
          {
            if (v29 == 16)
            {
              memcpy(&v89[3], v27 + 2, v29);
              v89[2] = 16;
              if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3))
              {
                (*(void (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
                if (CCLogStream::shouldLog())
                {
                  unsigned __int8 v36 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
                  CCLogStream::logNotice(v36, "[dk] %s@%d: WLC_E_AUTH_IND: PMKID exists. length %lu\n", "handleEvent", 2838, v29);
                }
              }
              if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3))
              {
                (*(void (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v32 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
                  CCLogStream::logNotice(v32, "[dk] %s@%d: %02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X\n", "handleEvent", 2845, BYTE8(v85), BYTE9(v85), BYTE10(v85), BYTE11(v85));
                }
              }
            }
            else if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3))
            {
              (*(void (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
              if (CCLogStream::shouldLog())
              {
                unsigned __int8 v37 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
                CCLogStream::logNotice(v37, "[dk] %s@%d: WLC_E_AUTH_IND: PMKID has invalid length (%d)\n");
              }
            }
          }
          else if (v28 == 1)
          {
            if ((v29 - 32) > 0x20)
            {
              if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3))
              {
                (*(void (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
                if (CCLogStream::shouldLog())
                {
                  unsigned __int8 v33 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
                  CCLogStream::logNotice(v33, "[dk] %s@%d: WLC_E_AUTH_IND: PMK has invalid length (%d)\n");
                }
              }
            }
            else
            {
              memcpy((char *)&v85 + 8, v27 + 2, v29);
              if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3))
              {
                (*(void (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
                if (CCLogStream::shouldLog())
                {
                  size_t v35 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
                  CCLogStream::logNotice(v35, "[dk] %s@%d: WLC_E_AUTH_IND: PMK exists. length %lu\n", "handleEvent", 2827, v29);
                }
              }
              int v26 = v29;
            }
          }
          int v34 = (unsigned __int16)v25;
          int v25 = (unsigned __int16)v25 - (unsigned __int16)v31;
          if ((v25 & 0xFFFF0000) != 0)
          {
            if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3))
            {
              (*(void (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
              if (CCLogStream::shouldLog())
              {
                BOOL v70 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
                CCLogStream::logNotice(v70, "[dk] %s@%d: WLC_E_AUTH_IND: Invalid computed TLV length, computed[%u] tlvs_len[%u] tlv_size[%u]\n", "handleEvent", 2856, (unsigned __int16)v25, v34, v31);
              }
            }
LABEL_131:
            DWORD1(v85) = v26;
            return AppleBCMWLANIO80211APSTAInterface::postMessageForSTA(v3, 152, &v84, 0x6Cu);
          }
          long long v27 = (unsigned __int16 *)((char *)v27 + v31);
          if ((unsigned __int16)v25 <= 3u) {
            goto LABEL_131;
          }
        }
        if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3))
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
          if (CCLogStream::shouldLog())
          {
            uint64_t v59 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
            CCLogStream::logAlert(v59, "[dk] %s@%d:safe_align_up failed\n");
          }
        }
        goto LABEL_125;
      case 5:
      case 6:
      case 11:
      case 12:
        IO80211HexdumpIf();
        uint64_t v5 = *((void *)v3 + 17);
        int v6 = *(_DWORD *)(a2 + 24);
        *(_WORD *)(v5 + 132) = *(_WORD *)(a2 + 28);
        *(_DWORD *)(v5 + 128) = v6;
        (*(void (**)(void))(**(void **)(*((void *)v3 + 17) + 112) + 136))(*(void *)(*((void *)v3 + 17) + 112));
        (*(void (**)(void, void))(**(void **)(*((void *)v3 + 17) + 112) + 120))(*(void *)(*((void *)v3 + 17) + 112), 0);
        AppleBCMWLANIO80211APSTAInterface::clearStaContextFromStaTable(v3, (unsigned __int8 *)(a2 + 24));
        int v7 = **((_DWORD **)v3 + 17);
        *(void *)&long long v84 = 0;
        LODWORD(v84) = *(_DWORD *)(a2 + 24);
        WORD2(v84) = *(_WORD *)(a2 + 28);
        DWORD2(v84) = v7;
        AppleBCMWLANIO80211APSTAInterface::postMessageForSTA(v3, 13, &v84, 0xCu);
        uint64_t result = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
        if (result)
        {
          (*(void (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
            uint64_t v9 = *(unsigned int *)(a2 + 4);
            uint64_t v10 = convertEventToString(*(_DWORD *)(a2 + 4), 0, 0);
            return CCLogStream::logAlert(v8, "[dk] %s@%d:STA removal event type %ld(%s): status = %lu, reason = %lu, flags = 0x%x, authtype = %lu, addr = %02x:%02x:%02x:%02x:%02x:%02x (count =%ld)\n", "handleEvent", 3013, v9, v10, *(unsigned int *)(a2 + 8), *(unsigned int *)(a2 + 12));
          }
        }
        return result;
      case 8:
      case 10:
        uint64_t v16 = (AppleBCMWLANIO80211APSTAInterface *)IO80211HexdumpIf();
        if (*(_DWORD *)(a2 + 8) || *(_DWORD *)(a2 + 12))
        {
          uint64_t result = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
          if (result)
          {
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
            uint64_t result = CCLogStream::shouldLog();
            if (result)
            {
              uint64_t v17 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
              int v18 = "WLC_E_REASSOC_IND";
              if (*(_DWORD *)(a2 + 4) == 8) {
                int v18 = "WLC_E_ASSOC_IND";
              }
              uint64_t v78 = *(unsigned int *)(a2 + 8);
              uint64_t v79 = *(unsigned int *)(a2 + 12);
              uint64_t v76 = *(unsigned __int8 *)(a2 + 28);
              uint64_t v77 = *(unsigned __int8 *)(a2 + 29);
              uint64_t v74 = *(unsigned __int8 *)(a2 + 26);
              uint64_t v75 = *(unsigned __int8 *)(a2 + 27);
              uint64_t v72 = *(unsigned __int8 *)(a2 + 24);
              uint64_t v73 = *(unsigned __int8 *)(a2 + 25);
              int v71 = v18;
              uint64_t v19 = 2887;
              int v20 = "[dk] %s@%d:%s %02X:%02X:%02X:%02X:%02X:%02X assoc with failed status %u reason %u, ignored";
              return CCLogStream::logAlert(v17, v20, "handleEvent", v19, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82);
            }
          }
        }
        else
        {
          int v46 = AppleBCMWLANIO80211APSTAInterface::checkForAppleIE(v16, (unsigned __int8 *)(a2 + 48), *(_DWORD *)(a2 + 20));
          int v47 = v46;
          uint64_t v48 = *((void *)v3 + 17);
          if (!*(unsigned char *)(v48 + 13) || (v46 & 1) != 0)
          {
            int v49 = *(_DWORD *)(a2 + 24);
            *(_WORD *)(v48 + 132) = *(_WORD *)(a2 + 28);
            *(_DWORD *)(v48 + 128) = v49;
            *(int8x8_t *)&double v50 = AppleBCMWLANIO80211APSTAInterface::updateSTAAssocInfo(v3, a2);
            int v52 = v51;
            (*(void (**)(void, double))(**(void **)(*((void *)v3 + 17) + 112) + 136))(*(void *)(*((void *)v3 + 17) + 112), v50);
            (*(void (**)(void, void))(**(void **)(*((void *)v3 + 17) + 112) + 120))(*(void *)(*((void *)v3 + 17) + 112), 0);
            int v100 = 0;
            long long v98 = 0u;
            long long v99 = 0u;
            long long v96 = 0u;
            long long v97 = 0u;
            long long v94 = 0u;
            long long v95 = 0u;
            long long v92 = 0u;
            long long v93 = 0u;
            long long v91 = 0u;
            long long v90 = 0u;
            long long v88 = 0u;
            memset(v89, 0, sizeof(v89));
            long long v86 = 0u;
            long long v87 = 0u;
            long long v84 = 0u;
            long long v85 = 0u;
            AppleBCMWLANIO80211APSTAInterface::parseRSNXE(v3, (unsigned __int8 *)(a2 + 48), *(_DWORD *)(a2 + 20), (unsigned __int8 *)&v85);
            if (v52)
            {
              if (v52[8]) {
                HIDWORD(v84) |= 1u;
              }
              if (v52[9]) {
                HIDWORD(v84) |= 2u;
              }
              if (v47)
              {
                HIDWORD(v84) |= 4u;
                v52[10] = 1;
              }
            }
            uint64_t v53 = *((void *)v3 + 17);
            LODWORD(v84) = *(_DWORD *)(v53 + 128);
            WORD2(v84) = *(_WORD *)(v53 + 132);
            DWORD2(v84) = *(_DWORD *)v53;
            AppleBCMWLANIO80211APSTAInterface::postMessageForSTA(v3, 12, &v84, 0x114u);
            if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3))
            {
              (*(void (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
              if (CCLogStream::shouldLog())
              {
                uint64_t v67 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
                uint64_t v68 = "WLC_E_REASSOC_IND";
                if (*(_DWORD *)(a2 + 4) == 8) {
                  uint64_t v68 = "WLC_E_ASSOC_IND";
                }
                CCLogStream::logAlert(v67, "[dk] %s@%d:%s: status = %lu, reason = %lu, flags = 0x%x, authtype = %lu, addr = %02X:%02X:%02X:%02X:%02X:%02X, (count =%ld), AIHS %d Sharing %d, iOS %d\n", "handleEvent", 2934, v68, *(unsigned int *)(a2 + 8), *(unsigned int *)(a2 + 12), *(unsigned __int16 *)(a2 + 2), *(unsigned int *)(a2 + 16), *(unsigned __int8 *)(a2 + 24), *(unsigned __int8 *)(a2 + 25), *(unsigned __int8 *)(a2 + 26), *(unsigned __int8 *)(a2 + 27), *(unsigned __int8 *)(a2 + 28), *(unsigned __int8 *)(a2 + 29), **((unsigned int **)v3 + 17), BYTE12(v84) & 1, (HIDWORD(v84) >> 1) & 1,
                  (HIDWORD(v84) >> 2) & 1);
              }
            }
            ++*(_DWORD *)(*((void *)v3 + 17) + 812);
            uint64_t result = IOLog("fTestAssocCount %d\n");
          }
          else
          {
            uint64_t result = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
            if (result)
            {
              (*(void (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
              uint64_t result = CCLogStream::shouldLog();
              if (result)
              {
                uint64_t v17 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
                uint64_t v75 = *(unsigned __int8 *)(a2 + 28);
                uint64_t v76 = *(unsigned __int8 *)(a2 + 29);
                uint64_t v73 = *(unsigned __int8 *)(a2 + 26);
                uint64_t v74 = *(unsigned __int8 *)(a2 + 27);
                int v71 = (const char *)*(unsigned __int8 *)(a2 + 24);
                uint64_t v72 = *(unsigned __int8 *)(a2 + 25);
                uint64_t v19 = 2894;
                int v20 = "[dk] %s@%d:ALERT: Non-Apple device %02X:%02X:%02X:%02X:%02X:%02X joining when in hidden mode, reje"
                      "cting association\n";
                return CCLogStream::logAlert(v17, v20, "handleEvent", v19, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82);
              }
            }
          }
        }
        break;
      case 16:
        uint64_t v38 = *(void (**)(IO80211SkywalkInterface *, uint64_t, uint64_t))(*(void *)v3 + 1352);
        if (*(_WORD *)(a2 + 2))
        {
          v38(v3, 2, 1);
          AppleBCMWLANIO80211APSTAInterface::configureSoftAPPeerStats(v3, 1);
          uint64_t result = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
          if (result)
          {
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
            uint64_t result = CCLogStream::shouldLog();
            if (result)
            {
              uint64_t v44 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
              int v45 = IO80211SkywalkInterface::getInterfaceId(v3);
              return CCLogStream::logWarn(v44, "[dk] %s@%d:  Interface %u   Link change event send link up\n", "handleEvent", 2990, v45);
            }
          }
        }
        else
        {
          v38(v3, 1, 1);
          AppleBCMWLANCore::setConcurrencyState(*(void **)(*((void *)v3 + 17) + 536), 4, 0);
          if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3))
          {
            (*(void (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
            if (CCLogStream::shouldLog())
            {
              OSStringPtr v62 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)v3 + 1024))(v3);
              int v63 = IO80211SkywalkInterface::getInterfaceId(v3);
              CCLogStream::logWarn(v62, "[dk] %s@%d:  Interface %u   Link change event indicates link down\n", "handleEvent", 2956, v63);
            }
          }
          JoinAdapter = (AppleBCMWLANJoinAdapter *)AppleBCMWLANCore::getJoinAdapter(*(AppleBCMWLANCore **)(*((void *)v3 + 17) + 536));
          int isJoining = AppleBCMWLANJoinAdapter::isJoining(JoinAdapter);
          if ((AppleBCMWLANCore::isAssociated(*(AppleBCMWLANCore **)(*((void *)v3 + 17) + 536)) & 1) == 0
            && (isJoining & 1) == 0)
          {
            AppleBCMWLANBGScanAdapter::enablePrivateMACForScans(*(AppleBCMWLANBGScanAdapter **)(*((void *)v3 + 17)
                                                                                              + 576));
          }
          AppleBCMWLANBGScanAdapter::generateAndApplyNewPrivateMACForScans(*(AppleBCMWLANCore ****)(*((void *)v3 + 17)
                                                                                                  + 576));
          uint64_t result = AppleBCMWLANCore::isAssociated(*(AppleBCMWLANCore **)(*((void *)v3 + 17) + 536));
          if (((result | isJoining) & 1) == 0)
          {
            uint64_t v41 = *(AppleBCMWLANPowerManager **)(*((void *)v3 + 17) + 584);
            return AppleBCMWLANPowerManager::configureSISOPowerSavePolicy(v41);
          }
        }
        return result;
      default:
        goto LABEL_85;
    }
  }
  return result;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::getBssCfgId(AppleBCMWLANIO80211APSTAInterface *this)
{
  return *(unsigned int *)(*((void *)this + 17) + 616);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::postMessageForSTA(AppleBCMWLANIO80211APSTAInterface *this, uint64_t a2, void *a3, unsigned int a4)
{
  size_t v7 = a4;
  uint64_t v8 = (void *)IOMallocZeroData();
  if (v8)
  {
    uint64_t v9 = v8;
    memcpy(v8, a3, v7);
    (*(void (**)(AppleBCMWLANIO80211APSTAInterface *, uint64_t, void *, size_t, void))(*(void *)this
                                                                                                 + 512))(this, a2, v9, v7, 0);
    AppleBCMWLANCore::postMessageInfra(*(AppleBCMWLANCore **)(*((void *)this + 17) + 536), a2, v9, v7);
    return IOFreeData();
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        unsigned int v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        return CCLogStream::logAlert(v11, "[dk] %s@%d:ERROR: Allocating memory for posting SoftAP message failed\n", "postMessageForSTA", 3193);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::checkForAppleIE(AppleBCMWLANIO80211APSTAInterface *this, unsigned __int8 *a2, unsigned int a3)
{
  if (a3 < 6) {
    return 0;
  }
  while (1)
  {
    if (*a2 == 221)
    {
      if (*((_WORD *)a2 + 1) == 5888 && a2[4] == 242) {
        break;
      }
      if (*((_WORD *)a2 + 1) == 768 && a2[4] == 147) {
        break;
      }
      if (*((__int16 *)a2 + 1) == -24576 && a2[4] == 64) {
        break;
      }
    }
    uint64_t v6 = a2[1] + 2;
    BOOL v7 = a3 >= v6;
    a3 -= v6;
    a2 += v6;
    if (a3 == 0 || !v7 || a3 <= 5) {
      return 0;
    }
  }
  return 1;
}

int8x8_t AppleBCMWLANIO80211APSTAInterface::updateSTAAssocInfo(AppleBCMWLANIO80211APSTAInterface *a1, uint64_t a2)
{
  uint64_t v4 = a2 + 24;
  uint64_t v5 = (AppleBCMWLANIO80211APSTAInterface *)AppleBCMWLANIO80211APSTAInterface::addStaToStaTable(a1, (unsigned __int8 *)(a2 + 24));
  uint64_t v6 = AppleBCMWLANIO80211APSTAInterface::checkForAppleInstantHSIE(v5, (unsigned __int8 *)(a2 + 48), *(_DWORD *)(a2 + 20));
  if (v6)
  {
    BOOL v7 = v6;
    int32x2_t v15 = vtst_s32(vdup_n_s32(*v6), (int32x2_t)0x200000001);
    if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        int v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logInfo(v13, "[dk] %s@%d:Associating STA %02X:%02X:%02X:%02X:%02X:%02X has instant HS IE, flags %x\n", "updateSTAAssocInfo", 4425, *(unsigned __int8 *)(a2 + 24), *(unsigned __int8 *)(a2 + 25), *(unsigned __int8 *)(a2 + 26), *(unsigned __int8 *)(a2 + 27), *(unsigned __int8 *)(a2 + 28), *(unsigned __int8 *)(a2 + 29), *v7);
      }
    }
    int8x8_t v8 = (int8x8_t)v15;
  }
  else
  {
    int8x8_t v8 = 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = *((void *)a1 + 17);
  do
  {
    if (*(_DWORD *)(v10 + v9 + 185) == *(_DWORD *)v4
      && *(unsigned __int16 *)(v10 + v9 + 189) == *(unsigned __int16 *)(v4 + 4))
    {
      int8x8_t result = vand_s8(v8, (int8x8_t)0x100000001);
      *(int8x8_t *)(v10 + v9 + 216) = result;
      return result;
    }
    v9 += 48;
  }
  while (v9 != 240);
  if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)a1 + 1024))(a1))
  {
    (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      int v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logAlert(v14, "[dk] %s@%d:ERROR: Station %02X:%02X:%02X:%02X:%02X:%02X entry not found\n", "updateSTAAssocInfo", 4430, *(unsigned __int8 *)(a2 + 24), *(unsigned __int8 *)(a2 + 25), *(unsigned __int8 *)(a2 + 26), *(unsigned __int8 *)(a2 + 27), *(unsigned __int8 *)(a2 + 28), *(unsigned __int8 *)(a2 + 29));
    }
  }
  return result;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::parseRSNXE(AppleBCMWLANIO80211APSTAInterface *this, unsigned __int8 *a2, unsigned int a3, unsigned __int8 *__dst)
{
  if (a2 && a3 >= 2)
  {
    while (1)
    {
      unint64_t v6 = a2[1] + 2;
      if (v6 > a3) {
        break;
      }
      if (*a2 == 244)
      {
        memcpy(__dst, a2, a2[1] + 2);
        goto LABEL_11;
      }
      a2 += v6;
      a3 -= v6;
      if (a3 <= 1) {
        goto LABEL_11;
      }
    }
    if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        BOOL v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:Associating STA RSNXE not found", "parseRSNXE", 4396);
      }
    }
  }
LABEL_11:
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      return CCLogStream::logAlert(v9, "[dk] %s@%d:Associating STA RSNXE capability %x, %x, %x", "parseRSNXE", 4402, *__dst, __dst[1], __dst[2]);
    }
  }
  return result;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::clearStaContextFromStaTable(AppleBCMWLANIO80211APSTAInterface *this, unsigned __int8 *a2)
{
  uint64_t result = AppleBCMWLANIO80211APSTAInterface::removeSta(this, a2);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        if (a2)
        {
          int v6 = *a2;
          int v7 = a2[1];
          int v8 = a2[2];
          int v9 = a2[3];
          int v10 = a2[4];
          int v11 = a2[5];
        }
        else
        {
          int v10 = 0;
          int v8 = 0;
          int v6 = 0;
          int v7 = 0;
          int v9 = 0;
          int v11 = 0;
        }
        return CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Removing STA %02X:%02X:%02X:%02X:%02X:%02X failed\n", "clearStaContextFromStaTable", 4612, v6, v7, v8, v9, v10, v11);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::handleActionFrame(uint64_t result, uint64_t a2)
{
  if (a2) {
    uint64_t v2 = (unsigned __int16 *)(a2 + 48);
  }
  else {
    uint64_t v2 = 0;
  }
  if (!a2) {
    return result;
  }
  uint64_t v4 = (AppleBCMWLANIO80211APSTAInterface *)result;
  if (!(*(uint64_t (**)(uint64_t))(*(void *)result + 1024))(result)
    || ((*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v4 + 1024))(v4),
        (CCLogStream::shouldLogConsole() & 1) == 0))
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(unsigned __int8 *)(a2 + 24);
      int v6 = *(unsigned __int8 *)(a2 + 25);
      int v7 = *(unsigned __int8 *)(a2 + 26);
      int v8 = *(unsigned __int8 *)(a2 + 27);
      int v9 = *(unsigned __int8 *)(a2 + 28);
      int v10 = *(unsigned __int8 *)(a2 + 29);
      *(_DWORD *)buf = 67111170;
      int v39 = 78;
      __int16 v40 = 2080;
      uint64_t v41 = "handleActionFrame";
      __int16 v42 = 1024;
      int v43 = 4272;
      __int16 v44 = 1024;
      *(_DWORD *)int v45 = v5;
      *(_WORD *)&v45[4] = 1024;
      *(_DWORD *)&v45[6] = v6;
      *(_WORD *)int v46 = 1024;
      *(_DWORD *)&v46[2] = v7;
      *(_WORD *)int v47 = 1024;
      *(_DWORD *)&v47[2] = v8;
      *(_WORD *)uint64_t v48 = 1024;
      *(_DWORD *)&_DWORD v48[2] = v9;
      *(_WORD *)int v49 = 1024;
      *(_DWORD *)&v49[2] = v10;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: LPHS: Action frame received from addr = %02X:%02X:%02X:%02X:%02X:%02X\n", buf, 0x3Cu);
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v4 + 1024))(v4))
  {
    (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v4 + 1024))(v4);
    if (CCLogStream::shouldLog())
    {
      int v28 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v4 + 1024))(v4);
      CCLogStream::logNotice(v28, "[dk] %s@%d:LPHS: Action frame received from addr = %02X:%02X:%02X:%02X:%02X:%02X\n", "handleActionFrame", 4272, *(unsigned __int8 *)(a2 + 24), *(unsigned __int8 *)(a2 + 25), *(unsigned __int8 *)(a2 + 26), *(unsigned __int8 *)(a2 + 27), *(unsigned __int8 *)(a2 + 28), *(unsigned __int8 *)(a2 + 29));
    }
  }
  unsigned int v11 = *(_DWORD *)(a2 + 20);
  if (v11)
  {
    if (v11 <= 0x11)
    {
      uint64_t result = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v4 + 1024))(v4);
      if (result)
      {
        (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v4 + 1024))(v4);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          long long v27 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v4 + 1024))(v4);
          return CCLogStream::logCrit(v27, "[dk] %s@%d:Event message buffer underflow, datalen[%u], expected >= %u\n", "handleActionFrame", 4276, *(_DWORD *)(a2 + 20), 18);
        }
      }
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = *((void *)v4 + 17) + 185;
      while (*(_DWORD *)(v13 + v12) != *(_DWORD *)(a2 + 24)
           || *(unsigned __int16 *)(v13 + v12 + 4) != *(unsigned __int16 *)(a2 + 28))
      {
        v12 += 48;
        if (v12 == 240)
        {
          uint64_t result = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v4 + 1024))(v4);
          if (result)
          {
            (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v4 + 1024))(v4);
            uint64_t result = CCLogStream::shouldLog();
            if (result)
            {
              int32x2_t v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v4
                                                                                                  + 1024))(v4);
              return CCLogStream::logAlert(v15, "[dk] %s@%d:ERROR: No Free slots available in STA Table, this should never happen\n");
            }
          }
          return result;
        }
      }
      unsigned int v16 = *v2;
      if (__rev16(v16) >= 3)
      {
        uint64_t result = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v4 + 1024))(v4);
        if (result)
        {
          (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v4 + 1024))(v4);
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            size_t v29 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v4 + 1024))(v4);
            return CCLogStream::logAlert(v29, "[dk] %s@%d:unexpected AF event version[%u]\n");
          }
        }
      }
      else
      {
        if (v16 == 256)
        {
          uint64_t v17 = 17;
          uint64_t v18 = 8;
          goto LABEL_29;
        }
        if (v16 != 512)
        {
          int v19 = 170;
          int v20 = 170;
          goto LABEL_31;
        }
        if (v11 > 0x19)
        {
          uint64_t v17 = 25;
          uint64_t v18 = 12;
LABEL_29:
          int v19 = LOBYTE(v2[v18]);
          int v20 = *((unsigned __int8 *)v2 + v17);
LABEL_31:
          if (!(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v4 + 1024))(v4)
            || ((*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v4 + 1024))(v4),
                (CCLogStream::shouldLogConsole() & 1) == 0))
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67110146;
              int v39 = 78;
              __int16 v40 = 2080;
              uint64_t v41 = "handleActionFrame";
              __int16 v42 = 1024;
              int v43 = 4295;
              __int16 v44 = 1024;
              *(_DWORD *)int v45 = v19;
              *(_WORD *)&v45[4] = 1024;
              *(_DWORD *)&v45[6] = v20;
              _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: LPHS: Action frame Contents %0x %0x\n", buf, 0x24u);
            }
          }
          if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v4 + 1024))(v4))
          {
            (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v4 + 1024))(v4);
            if (CCLogStream::shouldLog())
            {
              BOOL v30 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v4
                                                                                                  + 1024))(v4);
              CCLogStream::logNotice(v30, "[dk] %s@%d:LPHS: Action frame Contents %0x %0x\n", "handleActionFrame", 4295, v19, v20);
            }
          }
          if (v19 == 127 && (v20 == 1 || v20 == 2)) {
            *(_DWORD *)(*((void *)v4 + 17) + v12 + 200) = v20;
          }
          if (AppleBCMWLANIO80211APSTAInterface::isSoftAPConcurrencyEnabled(v4))
          {
            if (!(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v4 + 1024))(v4)
              || ((*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v4 + 1024))(v4),
                  (CCLogStream::shouldLogConsole() & 1) == 0))
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
              {
                BOOL isConcurrencyOpModeSet = AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(*((void *)v4 + 17) + 536), 1);
                BOOL v22 = AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(*((void *)v4 + 17) + 536), 2);
                BOOL v23 = AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(*((void *)v4 + 17) + 536), 4);
                BOOL v24 = AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(*((void *)v4 + 17) + 536), 8);
                BOOL v25 = AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(*((void *)v4 + 17) + 536), 16);
                *(_DWORD *)buf = 67111170;
                int v39 = 78;
                __int16 v40 = 2080;
                uint64_t v41 = "handleActionFrame";
                __int16 v42 = 1024;
                int v43 = 4312;
                __int16 v44 = 2080;
                *(void *)int v45 = "handleActionFrame";
                *(_WORD *)&v45[8] = 1024;
                *(_DWORD *)int v46 = isConcurrencyOpModeSet;
                *(_WORD *)&v46[4] = 1024;
                *(_DWORD *)int v47 = v22;
                *(_WORD *)&v47[4] = 1024;
                *(_DWORD *)uint64_t v48 = v23;
                *(_WORD *)&v48[4] = 1024;
                *(_DWORD *)int v49 = v24;
                *(_WORD *)&v49[4] = 1024;
                BOOL v50 = v25;
                _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: %s: SoftAPConcurrencyEnabled: infra=%d awdl=%d softAp=%d nan=%d ir=%d\n", buf, 0x40u);
              }
            }
            if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v4 + 1024))(v4))
            {
              (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v4 + 1024))(v4);
              if (CCLogStream::shouldLog())
              {
                uint64_t v32 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v4 + 1024))(v4);
                BOOL v33 = AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(*((void *)v4 + 17) + 536), 1);
                BOOL v34 = AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(*((void *)v4 + 17) + 536), 2);
                BOOL v35 = AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(*((void *)v4 + 17) + 536), 4);
                BOOL v36 = AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(*((void *)v4 + 17) + 536), 8);
                BOOL v37 = AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(*((void *)v4 + 17) + 536), 16);
                CCLogStream::logNotice(v32, "[dk] %s@%d:%s: SoftAPConcurrencyEnabled: infra=%d awdl=%d softAp=%d nan=%d ir=%d\n", "handleActionFrame", 4312, "handleActionFrame", v33, v34, v35, v36, v37);
              }
            }
          }
          uint64_t result = AppleBCMWLANIO80211APSTAInterface::checkIfAllStaAreInLPM(v4);
          if (result)
          {
            uint64_t result = AppleBCMWLANIO80211APSTAInterface::isSoftAPConcurrencyEnabled(v4);
            if ((result & 1) == 0) {
              return AppleBCMWLANIO80211APSTAInterface::setPowerSaveState(v4, 3u, 0xBu);
            }
          }
          return result;
        }
        uint64_t result = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v4 + 1024))(v4);
        if (result)
        {
          (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v4 + 1024))(v4);
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            unint64_t v31 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v4 + 1024))(v4);
            return CCLogStream::logAlert(v31, "[dk] %s@%d:Event message buffer underflow, datalen[%u], expected >= %u\n");
          }
        }
      }
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v4 + 1024))(v4);
    if (result)
    {
      (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v4 + 1024))(v4);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v26 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v4 + 1024))(v4);
        return CCLogStream::logAlert(v26, "[dk] %s@%d:ERROR: Received event with no event data!\n");
      }
    }
  }
  return result;
}

AppleBCMWLANIO80211APSTAInterface *AppleBCMWLANIO80211APSTAInterface::checkForStationListMismatch(AppleBCMWLANIO80211APSTAInterface *result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 4);
  if (v2 <= 5)
  {
    long long v3 = result;
    if (v2 != **((_DWORD **)result + 17))
    {
      uint64_t result = (AppleBCMWLANIO80211APSTAInterface *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)result + 1024))(result);
      if (result)
      {
        (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v3 + 1024))(v3);
        uint64_t result = (AppleBCMWLANIO80211APSTAInterface *)CCLogStream::shouldLog();
        if (result)
        {
          uint64_t v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v3 + 1024))(v3);
          uint64_t result = (AppleBCMWLANIO80211APSTAInterface *)CCLogStream::logAlert(v18, "[dk] %s@%d:ALERT: Found station list mismatch fw = %d vs host = %d\n", "checkForStationListMismatch", 3085, *(_DWORD *)(a2 + 4), **((_DWORD **)v3 + 17));
        }
      }
      for (uint64_t i = 0; i != 5; ++i)
      {
        uint64_t v6 = *((void *)v3 + 17);
        if (*(unsigned char *)(v6 + 48 * i + 184))
        {
          uint64_t v7 = *(unsigned int *)(a2 + 4);
          if (v7)
          {
            uint64_t v8 = a2 + 12;
            while (*(_DWORD *)(v6 + 48 * i + 185) != *(_DWORD *)v8
                 || *(unsigned __int16 *)(v6 + 48 * i + 189) != *(unsigned __int16 *)(v8 + 4))
            {
              v8 += 16;
              if (!--v7) {
                goto LABEL_15;
              }
            }
          }
          else
          {
LABEL_15:
            if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v3 + 1024))(v3))
            {
              (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v3 + 1024))(v3);
              if (CCLogStream::shouldLog())
              {
                unsigned int v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)v3 + 1024))(v3);
                uint64_t v17 = (unsigned __int8 *)(v6 + 48 * i);
                CCLogStream::logAlert(v16, "[dk] %s@%d:ALERT: STA %02X:%02X:%02X:%02X:%02X:%02X, disappeared, removing and posting event\n", "checkForStationListMismatch", 3101, v17[185], v17[186], v17[187], v17[188], v17[189], v17[190]);
              }
            }
            uint64_t v10 = v6 + 48 * i;
            unsigned int v12 = *(_DWORD *)(v10 + 185);
            uint64_t v11 = v10 + 185;
            int v13 = *(_DWORD *)(a2 + 4);
            uint64_t v19 = v12;
            WORD2(v19) = *(_WORD *)(v11 + 4);
            int v20 = v13;
            AppleBCMWLANIO80211APSTAInterface::postMessageForSTA(v3, 13, &v19, 0xCu);
            uint64_t v14 = *((void *)v3 + 17);
            if (*(unsigned char *)(v14 + 676))
            {
              unint64_t v15 = 0;
              do
              {
                (*(void (**)(void, uint64_t))(**(void **)(v14 + 8 * v15 + 768) + 248))(*(void *)(v14 + 8 * v15 + 768), v11);
                ++v15;
                uint64_t v14 = *((void *)v3 + 17);
              }
              while (v15 < *(unsigned __int8 *)(v14 + 676));
            }
            uint64_t result = (AppleBCMWLANIO80211APSTAInterface *)AppleBCMWLANIO80211APSTAInterface::removeStaFromStaTable(v3, i);
          }
        }
      }
      **((_DWORD **)v3 + 17) = *(_DWORD *)(a2 + 4);
    }
  }
  return result;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::removeStaFromStaTable(AppleBCMWLANIO80211APSTAInterface *this, unsigned int a2)
{
  if (a2 < 5)
  {
    uint64_t v4 = 0;
    uint64_t v6 = *((void *)this + 17) + 48 * a2;
    *(_OWORD *)(v6 + 216) = 0u;
    *(_OWORD *)(v6 + 200) = 0u;
    *(_OWORD *)(v6 + 184) = 0u;
  }
  else
  {
    uint64_t v4 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        int v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Incorrect STA index %d in AP StaTable\n", "removeStaFromStaTable", 4623, a2);
      }
    }
  }
  return v4;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::disableInfraFeaturesForSoftAP(AppleBCMWLANIO80211APSTAInterface *this)
{
  AppleBCMWLANIO80211APSTAInterface::configureBcnThrottleParamsForSoftAP(this, 0);
  AppleBCMWLANIO80211APSTAInterface::configureWNMForSoftAP(this, 0);
  int v5 = 0;
  if (!IOParseBootArgNumber("wlan.ap.maxmpdu", &v5, 4))
  {
    int v3 = 3;
    return AppleBCMWLANIO80211APSTAInterface::configureMPDUSize(this, v3);
  }
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      uint64_t result = CCLogStream::logAlert(v4, "[dk] %s@%d:wlan.ap.maxmpdu overwrite %d\n", "disableInfraFeaturesForSoftAP", 3278, v5);
    }
  }
  int v3 = v5;
  if (v5) {
    return AppleBCMWLANIO80211APSTAInterface::configureMPDUSize(this, v3);
  }
  return result;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::configureKeepAliveProbing(AppleBCMWLANIO80211APSTAInterface *this)
{
  uint64_t v15 = 0xF0000001ELL;
  int v16 = 5;
  uint64_t WorkQueue = IO80211SkywalkInterface::getWorkQueue(this);
  if ((*(unsigned int (**)(uint64_t))(*(void *)WorkQueue + 136))(WorkQueue))
  {
    unsigned int v12 = (uint64_t *)this;
    uint64_t v13 = (uint64_t)AppleBCMWLANIO80211APSTAInterface::handleSetScbProbeAsyncCallBack;
    uint64_t v14 = 0;
    int v3 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
    v11[0] = &v15;
    v11[1] = 12;
    return AppleBCMWLANCommander::sendVirtualIOVarSet(v3, InterfaceId, "scb_probe", (uint64_t)v11, kNoRxExpected, (uint64_t)&v12, 0);
  }
  else
  {
    uint64_t v6 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
    unsigned __int8 v7 = IO80211SkywalkInterface::getInterfaceId(this);
    unsigned int v12 = &v15;
    uint64_t v13 = 12;
    uint64_t v5 = AppleBCMWLANCommander::runVirtualIOVarSet(v6, v7, "scb_probe", (uint64_t)&v12, 0, 0);
    if (v5)
    {
      if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          int v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
          uint64_t v10 = (const char *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *, uint64_t))(*(void *)this + 856))(this, v5);
          CCLogStream::logAlert(v9, "[dk] %s@%d: Error: Unable to set scb_probe: %s\n", "configureKeepAliveProbing", 4086, v10);
        }
      }
    }
  }
  return v5;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::configureBcnThrottleParamsForSoftAP(AppleBCMWLANIO80211APSTAInterface *this, int a2)
{
  if (!AppleBCMWLANCore::isVESupportedAndEnabled(*(AppleBCMWLANCore **)(*((void *)this + 17) + 536))) {
    return 0;
  }
  if (a2 == 1) {
    int v4 = 120;
  }
  else {
    int v4 = 0;
  }
  int v17 = v4;
  uint64_t v5 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
  uint64_t v15 = (BOOL *)&v17;
  uint64_t v16 = 4;
  uint64_t v7 = AppleBCMWLANCommander::runVirtualIOVarSet(v5, InterfaceId, "rrm_bcn_req_thrtl_win", (uint64_t)&v15, 0, 0);
  if (v7)
  {
    uint64_t v8 = v7;
    if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        int v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        (*(void (**)(AppleBCMWLANIO80211APSTAInterface *, uint64_t))(*(void *)this + 856))(this, v8);
        CCLogStream::logAlert(v9, "[dk] %s@%d:cannot set Beacon Request Throttle Window to %d : ret %x: %s  -> continue with initialization\n");
      }
    }
  }
  else
  {
    BOOL v14 = a2 == 1;
    uint64_t v11 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
    unsigned __int8 v12 = IO80211SkywalkInterface::getInterfaceId(this);
    uint64_t v15 = &v14;
    uint64_t v16 = 4;
    uint64_t v8 = AppleBCMWLANCommander::runVirtualIOVarSet(v11, v12, "rrm_bcn_req_max_off_chan_time", (uint64_t)&v15, 0, 0);
    if (v8)
    {
      if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
          (*(void (**)(AppleBCMWLANIO80211APSTAInterface *, uint64_t))(*(void *)this + 856))(this, v8);
          CCLogStream::logAlert(v13, "[dk] %s@%d:cannot set Beacon Request Off-Channel Time to %d : ret %x: %s  -> continue with initialization\n");
        }
      }
    }
  }
  return v8;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::configureWNMForSoftAP(AppleBCMWLANIO80211APSTAInterface *this, int a2)
{
  if (!AppleBCMWLANCore::isWNMSupportedAndEnabled(*(AppleBCMWLANCore **)(*((void *)this + 17) + 536))) {
    return 0;
  }
  int v15 = a2;
  int v4 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
  v14[0] = &v15;
  v14[1] = 4;
  uint64_t v6 = AppleBCMWLANCommander::runVirtualIOVarSet(v4, InterfaceId, "wnm", (uint64_t)v14, 0, 0);
  uint64_t v7 = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
  if (v6)
  {
    if (v7)
    {
      (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        int v9 = v15;
        uint64_t v10 = (const char *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *, uint64_t))(*(void *)this + 856))(this, v6);
        CCLogStream::logAlert(v8, "[dk] %s@%d:cannot set WNM Support to %d : ret %x: %s  -> continue with initialization\n", "configureWNMForSoftAP", 3377, v9, v6, v10);
      }
    }
  }
  else if (v7)
  {
    (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      unsigned __int8 v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      if (v15) {
        uint64_t v13 = "Enabled";
      }
      else {
        uint64_t v13 = "Disabled";
      }
      CCLogStream::logNoticeIf(v12, 0x80uLL, "[dk] %s@%d:WNM is %s\n", "configureWNMForSoftAP", 3379, v13);
    }
  }
  return v6;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::configureMPDUSize(AppleBCMWLANIO80211APSTAInterface *this, int a2)
{
  int v12 = a2;
  if (AppleBCMWLANCore::getFWAPIVer(*(AppleBCMWLANCore **)(*((void *)this + 17) + 536)) != 2
    || AppleBCMWLANCore::getFirmwareInterfaceVersion(*(AppleBCMWLANCore **)(*((void *)this + 17) + 536)) > 4)
  {
    return 0;
  }
  uint64_t v5 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
  v11[0] = &v12;
  v11[1] = 4;
  uint64_t v3 = AppleBCMWLANCommander::runIOVarSet(v5, (uint64_t)"ampdu_mpdu", (uint64_t)v11, 0, 0);
  uint64_t v6 = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
  if (!v3)
  {
    if (v6)
    {
      (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logNoticeIf(v10, 0x80uLL, "[dk] %s@%d:MPDU size is configured to %d\n", "configureMPDUSize", 3412, v12);
      }
    }
    return 0;
  }
  if (v6)
  {
    (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      int v8 = v12;
      int v9 = (const char *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *, uint64_t))(*(void *)this
                                                                                                 + 856))(this, v3);
      CCLogStream::logAlert(v7, "[dk] %s@%d:cannot set MPDU size to %d: ret %s\n", "configureMPDUSize", 3410, v8, v9);
    }
  }
  return v3;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::hostAPPowerOn(AppleBCMWLANIO80211APSTAInterface *this)
{
  uint64_t v1 = *((void *)this + 17);
  if (*(_DWORD *)(v1 + 620) && *(_DWORD *)(v1 + 16) == 3) {
    AppleBCMWLANIO80211APSTAInterface::setPowerSaveState(this, 1u, 2u);
  }
  return 0;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::hostAPPowerOff(AppleBCMWLANIO80211APSTAInterface *this)
{
  uint64_t v1 = (_DWORD *)*((void *)this + 17);
  if (!v1[155]) {
    return 0;
  }
  if (*v1)
  {
    if ((AppleBCMWLANIO80211APSTAInterface::isSoftAPConcurrencyEnabled(this) & 1) == 0) {
      AppleBCMWLANIO80211APSTAInterface::setPowerSaveState(this, 3u, 3u);
    }
    return 0;
  }
  AppleBCMWLANIO80211APSTAInterface::setPowerSaveState(this, 0, 0xCu);
  *(unsigned char *)(*((void *)this + 17) + 14) = 0;
  uint64_t v3 = AppleBCMWLANIO80211APSTAInterface::setHostApModeInternal(this, 0);
  IO80211Controller::postMessage(*(IO80211Controller **)(*((void *)this + 17) + 536), this, 1u, 0, 0, 1);
  if (v3)
  {
    if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        uint64_t v6 = (const char *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *, uint64_t))(*(void *)this + 856))(this, v3);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Stopping SoftAP error %s\n", "hostAPPowerOff", 3439, v6);
      }
    }
  }
  return v3;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::isSoftAPConcurrencyEnabled(AppleBCMWLANIO80211APSTAInterface *this)
{
  if (!AppleBCMWLANCore::isConcurrencyEnabled(*(AppleBCMWLANCore **)(*((void *)this + 17) + 536))) {
    return 0;
  }
  uint64_t v2 = 1;
  if (!AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(*((void *)this + 17) + 536), 1)
    && !AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(*((void *)this + 17) + 536), 2)
    && !AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(*((void *)this + 17) + 536), 8)
    && !AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(*((void *)this + 17) + 536), 16))
  {
    return 0;
  }
  return v2;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::configureLowPowerModeEntry(AppleBCMWLANIO80211APSTAInterface *this)
{
  if (*(_DWORD *)(*((void *)this + 17) + 180) == 1) {
    return 0;
  }
  uint64_t v1 = AppleBCMWLANIO80211APSTAInterface::configureLowPowerMode(this);
  if (v1)
  {
    if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v3 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v3, "[dk] %s@%d:HS LPM: Failed to configure Low Power Mode\n", "configureLowPowerModeEntry", 3470);
      }
    }
  }
  else
  {
    *(_DWORD *)(*((void *)this + 17) + 180) = 1;
  }
  return v1;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::configureLowPowerMode(AppleBCMWLANIO80211APSTAInterface *this)
{
  int v27 = 1;
  int v28 = 10;
  uint64_t WorkQueue = IO80211SkywalkInterface::getWorkQueue(this);
  if ((*(uint64_t (**)(uint64_t))(*(void *)WorkQueue + 136))(WorkQueue))
  {
    BOOL v24 = (int *)this;
    uint64_t v25 = (uint64_t)AppleBCMWLANIO80211APSTAInterface::handleSetBcnWaitPeriodAsyncCallBack;
    uint64_t v26 = 0;
    uint64_t v3 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
    v23[0] = &v28;
    v23[1] = 4;
    uint64_t v5 = AppleBCMWLANCommander::sendVirtualIOVarSet(v3, InterfaceId, "modesw_bcns_wait", (uint64_t)v23, kNoRxExpected, (uint64_t)&v24, 0);
    if (!v5)
    {
LABEL_21:
      if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
          CCLogStream::logInfo(v18, "[dk] %s@%d:HS LPM: Configure Low Power Mode\n", "configureLowPowerMode", 3968);
        }
      }
      return 0;
    }
  }
  else
  {
    uint64_t v6 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
    unsigned __int8 v7 = IO80211SkywalkInterface::getInterfaceId(this);
    BOOL v24 = &v28;
    uint64_t v25 = 4;
    uint64_t v8 = AppleBCMWLANCommander::runVirtualIOVarSet(v6, v7, "modesw_bcns_wait", (uint64_t)&v24, 0, 0);
    uint64_t v9 = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    if (v8)
    {
      if (v9)
      {
        (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
          uint64_t v11 = (const char *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *, uint64_t))(*(void *)this + 856))(this, v8);
          CCLogStream::logAlert(v10, "[dk] %s@%d:ERROR: HS LPM: Failed to Configure SMPS Wait Period %s\n", "configureLowPowerMode", 3951, v11);
        }
      }
    }
    else if (v9)
    {
      (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v21 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logInfo(v21, "[dk] %s@%d:HS LPM: Configured SMPS Wait Period to %d Beacon Intervals\n", "configureLowPowerMode", 3953, v28);
      }
    }
    int v12 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
    unsigned __int8 v13 = IO80211SkywalkInterface::getInterfaceId(this);
    BOOL v24 = &v27;
    uint64_t v25 = 4;
    uint64_t v5 = AppleBCMWLANCommander::runVirtualIOVarSet(v12, v13, "lphs_mode", (uint64_t)&v24, 0, 0);
    uint64_t v14 = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    if (!v5)
    {
      if (v14)
      {
        (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          BOOL v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
          CCLogStream::logInfo(v22, "[dk] %s@%d:HS LPM: Configure lphs mode\n", "configureLowPowerMode", 3961);
        }
      }
      goto LABEL_21;
    }
    if (v14)
    {
      (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        int v20 = (const char *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *, uint64_t))(*(void *)this + 856))(this, v5);
        CCLogStream::logAlert(v19, "[dk] %s@%d:ERROR: HS LPM: Failed to configure lphs mode %s\n", "configureLowPowerMode", 3959, v20);
      }
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      int v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      uint64_t v16 = (const char *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *, uint64_t))(*(void *)this
                                                                                                  + 856))(this, v5);
      CCLogStream::logAlert(v15, "[dk] %s@%d:ERROR: HS LPM: Failed to enable Low Power Mode ret %s\n", "configureLowPowerMode", 3966, v16);
    }
  }
  return v5;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::configureLowPowerModeExit(AppleBCMWLANIO80211APSTAInterface *this)
{
  if (!*(_DWORD *)(*((void *)this + 17) + 180)) {
    return 0;
  }
  uint64_t v2 = AppleBCMWLANIO80211APSTAInterface::unConfigureLowPowerMode(this);
  if (v2)
  {
    if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v3 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v3, "[dk] %s@%d:HS LPM: Failed to unConfigure Low Power Mode\n", "configureLowPowerModeExit", 3500);
      }
    }
  }
  else
  {
    *(_DWORD *)(*((void *)this + 17) + 180) = 0;
  }
  return v2;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::unConfigureLowPowerMode(AppleBCMWLANIO80211APSTAInterface *this)
{
  int v18 = 0;
  uint64_t WorkQueue = IO80211SkywalkInterface::getWorkQueue(this);
  if ((*(unsigned int (**)(uint64_t))(*(void *)WorkQueue + 136))(WorkQueue))
  {
    int v15 = this;
    uint64_t v16 = (uint64_t)AppleBCMWLANIO80211APSTAInterface::handleSetLowPowerModeAsyncCallBack;
    uint64_t v17 = 0;
    uint64_t v3 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
    v14[0] = &v18;
    v14[1] = 4;
    uint64_t v5 = AppleBCMWLANCommander::sendVirtualIOVarSet(v3, InterfaceId, "lphs_mode", (uint64_t)v14, kNoRxExpected, (uint64_t)&v15, 0);
  }
  else
  {
    uint64_t v6 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
    unsigned __int8 v7 = IO80211SkywalkInterface::getInterfaceId(this);
    int v15 = (AppleBCMWLANIO80211APSTAInterface *)&v18;
    uint64_t v16 = 4;
    uint64_t v5 = AppleBCMWLANCommander::runVirtualIOVarSet(v6, v7, "lphs_mode", (uint64_t)&v15, 0, 0);
  }
  uint64_t v8 = v5;
  uint64_t v9 = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
  if (v8)
  {
    if (v9)
    {
      (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        uint64_t v11 = (const char *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *, uint64_t))(*(void *)this + 856))(this, v8);
        CCLogStream::logAlert(v10, "[dk] %s@%d:ERROR: HS LPM: Failed to disable Low Power Mode ret %s\n", "unConfigureLowPowerMode", 3991, v11);
      }
    }
  }
  else if (v9)
  {
    (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      unsigned __int8 v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logInfo(v13, "[dk] %s@%d:HS LPM:  Low Power Mode Disabled\n", "unConfigureLowPowerMode", 3993);
    }
  }
  return v8;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::deleteIPv4PktFilters(AppleBCMWLANIO80211APSTAInterface *this)
{
  int v8 = 108;
  v7[0] = this;
  v7[1] = AppleBCMWLANIO80211APSTAInterface::deleteIPv4PktFiltersAsyncCallBack;
  void v7[2] = 0;
  uint64_t v2 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
  v6[0] = &v8;
  v6[1] = 4;
  uint64_t result = AppleBCMWLANCommander::sendVirtualIOVarSet(v2, InterfaceId, "pkt_filter_delete", (uint64_t)v6, kNoRxExpected, (uint64_t)v7, 0);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        return CCLogStream::logAlert(v5, "[dk] %s@%d:Failed to Delete Pkt Filters\n", "deleteIPv4PktFilters", 3734);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::deleteIPv4PktFiltersAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    int v4 = (void *)result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1024))(result);
    if (result)
    {
      (*(void (**)(void *))(*v4 + 1024))(v4);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(void *))(*v4 + 1024))(v4);
        uint64_t v6 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v4[17] + 536) + 112))(*(void *)(v4[17] + 536), a3);
        return CCLogStream::logCrit(v5, "[dk] %s@%d:  failed, error %s\n", "deleteIPv4PktFiltersAsyncCallBack", 3742, v6);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::configureARPOffload(AppleBCMWLANIO80211APSTAInterface *this, int a2)
{
  int v38 = a2;
  uint64_t WorkQueue = IO80211SkywalkInterface::getWorkQueue(this);
  if ((*(unsigned int (**)(uint64_t))(*(void *)WorkQueue + 136))(WorkQueue))
  {
    BOOL v35 = this;
    uint64_t v36 = (uint64_t)AppleBCMWLANIO80211APSTAInterface::handleSetARPOffloadAsyncCallBack;
    uint64_t v37 = 0;
    int v4 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
    BOOL v33 = (uint64_t *)&v38;
    uint64_t v34 = 4;
    uint64_t v6 = AppleBCMWLANCommander::sendVirtualIOVarSet(v4, InterfaceId, "arpoe", (uint64_t)&v33, kNoRxExpected, (uint64_t)&v35, 0);
  }
  else
  {
    unsigned __int8 v7 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
    unsigned __int8 v8 = IO80211SkywalkInterface::getInterfaceId(this);
    BOOL v35 = (AppleBCMWLANIO80211APSTAInterface *)&v38;
    uint64_t v36 = 4;
    uint64_t v6 = AppleBCMWLANCommander::runVirtualIOVarSet(v7, v8, "arpoe", (uint64_t)&v35, 0, 0);
  }
  uint64_t v9 = v6;
  if (v6)
  {
    if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        if (v38) {
          uint64_t v11 = "Enable";
        }
        else {
          uint64_t v11 = "Disable";
        }
        uint64_t v30 = (uint64_t)v11;
        uint64_t v31 = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *, uint64_t))(*(void *)this + 856))(this, v9);
        uint64_t v29 = 3788;
        int v12 = "[dk] %s@%d:ERROR: Unable to %s ARP filtering: %s\n";
        goto LABEL_11;
      }
    }
  }
  else
  {
    HIDWORD(v32) = *(_DWORD *)(*((void *)this + 17) + 172);
    if (!v38) {
      return 0;
    }
    LODWORD(v32) = 9;
    uint64_t v13 = IO80211SkywalkInterface::getWorkQueue(this);
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v13 + 136))(v13))
    {
      uint64_t v17 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
      unsigned __int8 v18 = IO80211SkywalkInterface::getInterfaceId(this);
      BOOL v35 = (AppleBCMWLANIO80211APSTAInterface *)&v32;
      uint64_t v36 = 4;
      uint64_t v19 = AppleBCMWLANCommander::runVirtualIOVarSet(v17, v18, "arp_ol", (uint64_t)&v35, 0, 0);
      if (v19)
      {
        uint64_t v20 = v19;
        if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
        {
          (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
          if (CCLogStream::shouldLog())
          {
            int v27 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this
                                                                                                + 1024))(this);
            int v28 = (const char *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *, uint64_t))(*(void *)this + 856))(this, v20);
            CCLogStream::logAlert(v27, "[dk] %s@%d:ERROR: Unable to turn on ARP monitoring: %s\n", "configureARPOffload", 3815, v28);
          }
        }
      }
      unsigned int v21 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
      unsigned __int8 v22 = IO80211SkywalkInterface::getInterfaceId(this);
      uint64_t v23 = AppleBCMWLANCommander::runVirtualIOVarSet(v21, v22, "arp_hostip_clear", (uint64_t)&kNoTxPayload, 0, 0);
      if (v23)
      {
        uint64_t v9 = v23;
        if (!(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this)) {
          return v9;
        }
        (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        if (!CCLogStream::shouldLog()) {
          return v9;
        }
        uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        uint64_t v29 = 3821;
        uint64_t v30 = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *, uint64_t))(*(void *)this + 856))(this, v9);
        int v12 = "[dk] %s@%d:ERROR: Unable to clear ARP : %s\n";
      }
      else
      {
        BOOL v24 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
        unsigned __int8 v25 = IO80211SkywalkInterface::getInterfaceId(this);
        BOOL v35 = (AppleBCMWLANIO80211APSTAInterface *)((char *)&v32 + 4);
        uint64_t v36 = 4;
        uint64_t v9 = AppleBCMWLANCommander::runVirtualIOVarSet(v24, v25, "arp_hostip", (uint64_t)&v35, 0, 0);
        if (!v9) {
          return v9;
        }
        if (!(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this)) {
          return v9;
        }
        (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        if (!CCLogStream::shouldLog()) {
          return v9;
        }
        uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        uint64_t v29 = 3828;
        uint64_t v30 = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *, uint64_t))(*(void *)this + 856))(this, v9);
        int v12 = "[dk] %s@%d:ERROR: Unable to program IP address for ARP filtering: %s\n";
      }
LABEL_11:
      CCLogStream::logAlert(v10, v12, "configureARPOffload", v29, v30, v31, v32);
      return v9;
    }
    BOOL v35 = this;
    uint64_t v36 = (uint64_t)AppleBCMWLANIO80211APSTAInterface::handleSetARPOffloadAsyncCallBack;
    uint64_t v37 = 0;
    uint64_t v14 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
    unsigned __int8 v15 = IO80211SkywalkInterface::getInterfaceId(this);
    BOOL v33 = &v32;
    uint64_t v34 = 4;
    uint64_t v9 = AppleBCMWLANCommander::sendVirtualIOVarSet(v14, v15, "arp_ol", (uint64_t)&v33, kNoRxExpected, (uint64_t)&v35, 0);
    if (v9)
    {
      if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
          CCLogStream::logAlert(v16, "[dk] %s@%d:ERROR: Failed to configure ARP Offload in ARP F/W\n");
        }
      }
    }
  }
  return v9;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::handleSetARPOffloadAsyncCallBack(IO80211SkywalkInterface *this, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t result = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
    if (result)
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
        (*(void (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)this + 856))(this, a3);
        return CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR:: cannot read ARP OE from the firmware: %s\n");
      }
    }
  }
  else
  {
    v10[0] = this;
    v10[1] = AppleBCMWLANIO80211APSTAInterface::handleSetARPHostIPClearAsyncCallBack;
    v10[2] = 0;
    unsigned __int8 v7 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
    uint64_t result = AppleBCMWLANCommander::sendVirtualIOVarSet(v7, InterfaceId, "arp_hostip_clear", (uint64_t)&kNoTxPayload, kNoRxExpected, (uint64_t)v10, 0);
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
      if (result)
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
          return CCLogStream::logAlert(v9, "[dk] %s@%d:ERROR: Failed to Issue arp_hostip_clear\n");
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::handleSetARPHostIPClearAsyncCallBack(IO80211SkywalkInterface *this, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t result = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
    if (result)
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
        (*(void (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)this + 856))(this, a3);
        return CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: cannot clear host IP in ARP table: %s\n");
      }
    }
  }
  else
  {
    uint64_t v7 = *((void *)this + 17);
    int v13 = *(_DWORD *)(v7 + 172);
    v12[0] = this;
    v12[1] = AppleBCMWLANIO80211APSTAInterface::handleSetARPHostIPAsyncCallBack;
    void v12[2] = 0;
    unsigned __int8 v8 = *(AppleBCMWLANCommander **)(v7 + 552);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
    v11[0] = &v13;
    v11[1] = 4;
    uint64_t result = AppleBCMWLANCommander::sendVirtualIOVarSet(v8, InterfaceId, "arp_hostip", (uint64_t)v11, kNoRxExpected, (uint64_t)v12, 0);
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
      if (result)
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
          return CCLogStream::logAlert(v10, "[dk] %s@%d:ERROR: Failed to Configure IP in ARP Table\n");
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::handleSetARPHostIPAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1024))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 1024))(v4);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 1024))(v4);
        uint64_t v6 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 856))(v4, a3);
        return CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Failed to Configure IP in ARP Table: %s\n", "handleSetARPHostIPAsyncCallBack", 3887, v6);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::handleSetBcnWaitPeriodAsyncCallBack(IO80211SkywalkInterface *this, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t result = (*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
    if (result)
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)this + 1024))(this);
        uint64_t v7 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *, uint64_t))(*(void *)this + 856))(this, a3);
        return CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: Cannot configure Low Power Mode to firmware: %s\n", "handleSetBcnWaitPeriodAsyncCallBack", 4008, v7);
      }
    }
  }
  else
  {
    int v12 = 1;
    v11[0] = this;
    v11[1] = AppleBCMWLANIO80211APSTAInterface::handleSetLowPowerModeAsyncCallBack;
    void v11[2] = 0;
    unsigned __int8 v8 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
    v10[0] = &v12;
    v10[1] = 4;
    return AppleBCMWLANCommander::sendVirtualIOVarSet(v8, InterfaceId, "lphs_mode", (uint64_t)v10, kNoRxExpected, (uint64_t)v11, 0);
  }
  return result;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::handleSetLowPowerModeAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1024))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 1024))(v4);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 1024))(v4);
        uint64_t v6 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 856))(v4, a3);
        return CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Cannot configure Low Power Mode to firmware: %s\n", "handleSetLowPowerModeAsyncCallBack", 4027, v6);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::setBeaconDutyCycle(AppleBCMWLANIO80211APSTAInterface *this, int a2)
{
  int v16 = 1048833;
  uint64_t v17 = 1;
  __int16 v18 = 2;
  __int16 v19 = a2 != 0;
  uint64_t WorkQueue = IO80211SkywalkInterface::getWorkQueue(this);
  if ((*(unsigned int (**)(uint64_t))(*(void *)WorkQueue + 136))(WorkQueue))
  {
    int v13 = (int *)this;
    uint64_t v14 = (uint64_t)AppleBCMWLANIO80211APSTAInterface::handleSetRpsNoaAsyncCallBack;
    uint64_t v15 = 0;
    uint64_t v4 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
    v12[0] = &v16;
    v12[1] = 16;
    return AppleBCMWLANCommander::sendVirtualIOVarSet(v4, InterfaceId, "rpsnoa", (uint64_t)v12, kNoRxExpected, (uint64_t)&v13, 0);
  }
  else
  {
    uint64_t v7 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
    unsigned __int8 v8 = IO80211SkywalkInterface::getInterfaceId(this);
    int v13 = &v16;
    uint64_t v14 = 16;
    uint64_t v6 = AppleBCMWLANCommander::runVirtualIOVarSet(v7, v8, "rpsnoa", (uint64_t)&v13, 0, 0);
    if (v6)
    {
      if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
          uint64_t v11 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)this + 17) + 536)
                                                                         + 112))(*(void *)(*((void *)this + 17) + 536), v6);
          CCLogStream::logCrit(v10, "[dk] %s@%d:ERROR:  Setting SoftAP beacon interval fails, error %s\n", "setBeaconDutyCycle", 4060, v11);
        }
      }
    }
  }
  return v6;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::handleSetRpsNoaAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    if ((*(uint64_t (**)(uint64_t))(*(void *)result + 1024))(result))
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 1024))(v4);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 1024))(v4);
        uint64_t v6 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 856))(v4, a3);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Cannot configure SoftAP RPSNOA, %s\n", "handleSetRpsNoaAsyncCallBack", 4141, v6);
      }
    }
    return IO80211Hexdump();
  }
  return result;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::handleSetScbProbeAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    if ((*(uint64_t (**)(uint64_t))(*(void *)result + 1024))(result))
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 1024))(v4);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 1024))(v4);
        uint64_t v6 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 856))(v4, a3);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Cannot configure SoftAP scb_probe, %s\n", "handleSetScbProbeAsyncCallBack", 4097, v6);
      }
    }
    return IO80211Hexdump();
  }
  return result;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::configureBeaconDutyCycleParams(IO80211SkywalkInterface *a1, unsigned int a2)
{
  int v17 = 1573121;
  uint64_t v18 = 3;
  __int16 v19 = 2;
  uint64_t v3 = (int32x2_t *)((char *)&dynamicPSParams + 12 * a2);
  char v20 = 10 - v3[1].i8[0];
  char v21 = 0;
  int32x2_t v22 = vrev64_s32(*v3);
  uint64_t WorkQueue = IO80211SkywalkInterface::getWorkQueue(a1);
  if ((*(unsigned int (**)(uint64_t))(*(void *)WorkQueue + 136))(WorkQueue))
  {
    uint64_t v14 = (int *)a1;
    uint64_t v15 = (uint64_t)AppleBCMWLANIO80211APSTAInterface::handleSetRpsNoaAsyncCallBack;
    uint64_t v16 = 0;
    uint64_t v5 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(a1);
    v13[0] = &v17;
    v13[1] = 24;
    return AppleBCMWLANCommander::sendVirtualIOVarSet(v5, InterfaceId, "rpsnoa", (uint64_t)v13, kNoRxExpected, (uint64_t)&v14, 0);
  }
  else
  {
    unsigned __int8 v8 = *(AppleBCMWLANCommander **)(*((void *)a1 + 17) + 552);
    unsigned __int8 v9 = IO80211SkywalkInterface::getInterfaceId(a1);
    uint64_t v14 = &v17;
    uint64_t v15 = 24;
    uint64_t v7 = AppleBCMWLANCommander::runVirtualIOVarSet(v8, v9, "rpsnoa", (uint64_t)&v14, 0, 0);
    if (v7)
    {
      if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
          int v12 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)a1 + 17) + 536)
                                                                         + 112))(*(void *)(*((void *)a1 + 17) + 536), v7);
          CCLogStream::logAlert(v11, "[dk] %s@%d:ERROR: Setting SoftAP beacon interval fails, error %s\n", "configureBeaconDutyCycleParams", 4129, v12);
        }
      }
    }
  }
  return v7;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::handleSetRSNXEAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1024))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 1024))(v4);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 1024))(v4);
        uint64_t v6 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 856))(v4, a3);
        return CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Cannot set softAP rsnxe, %s\n", "handleSetRSNXEAsyncCallBack", 4152, v6);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::handleSetBcnIntervalAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    if ((*(uint64_t (**)(uint64_t))(*(void *)result + 1024))(result))
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 1024))(v4);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 1024))(v4);
        uint64_t v6 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 856))(v4, a3);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Cannot configure SoftAP beacon interval, %s\n", "handleSetBcnIntervalAsyncCallBack", 4215, v6);
      }
    }
    return IO80211Hexdump();
  }
  return result;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::handleSetBcnDTIMPeriodAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    if ((*(uint64_t (**)(uint64_t))(*(void *)result + 1024))(result))
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 1024))(v4);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 1024))(v4);
        uint64_t v6 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 856))(v4, a3);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Cannot configure SoftAP beacon DTIM period, %s\n", "handleSetBcnDTIMPeriodAsyncCallBack", 4253, v6);
      }
    }
    return IO80211Hexdump();
  }
  return result;
}

BOOL AppleBCMWLANIO80211APSTAInterface::checkIfAllStaAreInLPM(AppleBCMWLANIO80211APSTAInterface *this)
{
  unint64_t v2 = 0;
  BOOL v3 = 0;
  uint64_t v4 = *((void *)this + 17);
  uint64_t v5 = -240;
  do
  {
    if (*(unsigned char *)(v4 + v5 + 424))
    {
      if (!(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this)
        || ((*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this),
            (CCLogStream::shouldLogConsole() & 1) == 0))
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v6 = *((void *)this + 17) + v5;
          int v7 = *(unsigned __int8 *)(v6 + 425);
          int v8 = *(unsigned __int8 *)(v6 + 426);
          int v9 = *(unsigned __int8 *)(v6 + 427);
          int v10 = *(unsigned __int8 *)(v6 + 428);
          int v11 = *(unsigned __int8 *)(v6 + 429);
          int v12 = *(unsigned __int8 *)(v6 + 430);
          LODWORD(v6) = *(_DWORD *)(v6 + 440);
          *(_DWORD *)buf = 67111682;
          int v18 = 78;
          __int16 v19 = 2080;
          char v20 = "checkIfAllStaAreInLPM";
          __int16 v21 = 1024;
          int v22 = 4557;
          __int16 v23 = 1024;
          int v24 = v2;
          __int16 v25 = 1024;
          int v26 = v7;
          __int16 v27 = 1024;
          int v28 = v8;
          __int16 v29 = 1024;
          int v30 = v9;
          __int16 v31 = 1024;
          int v32 = v10;
          __int16 v33 = 1024;
          int v34 = v11;
          __int16 v35 = 1024;
          int v36 = v12;
          __int16 v37 = 1024;
          int v38 = v6;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: STA Index = %d addr  = %02X:%02X:%02X:%02X:%02X:%02X SleepState %d\n", buf, 0x48u);
        }
      }
      if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
          uint64_t v15 = *((void *)this + 17) + v5;
          CCLogStream::logNotice(v14, "[dk] %s@%d:STA Index = %d addr  = %02X:%02X:%02X:%02X:%02X:%02X SleepState %d\n", "checkIfAllStaAreInLPM", 4557, v2, *(unsigned __int8 *)(v15 + 425), *(unsigned __int8 *)(v15 + 426), *(unsigned __int8 *)(v15 + 427), *(unsigned __int8 *)(v15 + 428), *(unsigned __int8 *)(v15 + 429), *(unsigned __int8 *)(v15 + 430), *(_DWORD *)(v15 + 440));
        }
      }
      uint64_t v4 = *((void *)this + 17);
      if (*(_DWORD *)(v4 + v5 + 440) == 2) {
        break;
      }
    }
    BOOL v13 = v2++ > 3;
    BOOL v3 = v13;
    v5 += 48;
  }
  while (v5);
  return v3;
}

unsigned __int8 *AppleBCMWLANIO80211APSTAInterface::checkForAppleInstantHSIE(AppleBCMWLANIO80211APSTAInterface *this, unsigned __int8 *a2, unsigned int a3)
{
  if (a3 >= 6)
  {
    while (1)
    {
      if (*a2 == 221)
      {
        if (*((_WORD *)a2 + 1) == 5888 && a2[4] == 242)
        {
          if (a2[5] == 11) {
            return a2 + 9;
          }
LABEL_21:
          uint64_t result = 0;
          unint64_t v6 = a2[1] + 2;
          if (v6 >= a3) {
            return result;
          }
          a3 -= v6;
          if (a3 <= 5) {
            return result;
          }
          goto LABEL_23;
        }
        if (*((_WORD *)a2 + 1) == 768 && a2[4] == 147) {
          goto LABEL_21;
        }
        if (*((__int16 *)a2 + 1) == -24576 && a2[4] == 64) {
          goto LABEL_21;
        }
      }
      unint64_t v6 = a2[1] + 2;
      BOOL v7 = a3 >= v6;
      a3 -= v6;
      BOOL v7 = a3 != 0 && v7 && a3 >= 6;
      if (!v7) {
        return 0;
      }
LABEL_23:
      a2 += v6;
    }
  }
  return 0;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::addStaToStaTable(AppleBCMWLANIO80211APSTAInterface *this, unsigned __int8 *a2)
{
  uint64_t result = AppleBCMWLANIO80211APSTAInterface::addSta(this, a2, &v12);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        if (a2)
        {
          int v6 = *a2;
          int v7 = a2[1];
          int v8 = a2[2];
          int v9 = a2[3];
          int v10 = a2[4];
          int v11 = a2[5];
        }
        else
        {
          int v10 = 0;
          int v8 = 0;
          int v6 = 0;
          int v7 = 0;
          int v9 = 0;
          int v11 = 0;
        }
        return CCLogStream::logAlert(v5, "[dk] %s@%d:ERROR: Adding STA %02X:%02X:%02X:%02X:%02X:%02X failed\n", "addStaToStaTable", 4598, v6, v7, v8, v9, v10, v11);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::addSta(AppleBCMWLANIO80211APSTAInterface *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = *((void *)this + 17);
  uint64_t v5 = v4 + 185;
  do
  {
    if (*(_DWORD *)v5 == *(_DWORD *)a2 && *(unsigned __int16 *)(v5 + 4) == *((unsigned __int16 *)a2 + 2))
    {
      uint64_t v11 = 0;
      *a3 = v3;
      return v11;
    }
    ++v3;
    v5 += 48;
  }
  while (v3 != 5);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = v4 + 185;
  while (*(_DWORD *)(v9 + v7) || *(_WORD *)(v9 + v7 + 4) != 0)
  {
    ++v8;
    v7 += 48;
    if (v8 == 5) {
      return 3758097084;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = v4 + v7;
  int v13 = *(_DWORD *)a2;
  *(_WORD *)(v12 + 189) = *((_WORD *)a2 + 2);
  *(_DWORD *)(v12 + 185) = v13;
  *(unsigned char *)(*((void *)this + 17) + v7 + 184) = 1;
  *(_DWORD *)(*((void *)this + 17) + v7 + 200) = 2;
  *a3 = v8;
  ++**((_DWORD **)this + 17);
  return v11;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::removeSta(AppleBCMWLANIO80211APSTAInterface *this, unsigned __int8 *a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = (_DWORD *)*((void *)this + 17);
  for (uint64_t i = (char *)v5 + 185;
        *(_DWORD *)i != *(_DWORD *)a2 || *((unsigned __int16 *)i + 2) != *((unsigned __int16 *)a2 + 2);
        i += 48)
  {
    if (++v4 == 5) {
      return 3758097084;
    }
  }
  if (*v5)
  {
    --*v5;
  }
  else if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logAlert(v11, "[dk] %s@%d:ERROR: Decrementing num of associated clients when it is already zero\n", "removeSta", 4537);
    }
  }
  uint64_t v9 = *((void *)this + 17);
  if (*(unsigned char *)(v9 + 676))
  {
    unint64_t v10 = 0;
    do
    {
      (*(void (**)(void, unsigned __int8 *))(**(void **)(v9 + 8 * v10 + 768) + 248))(*(void *)(v9 + 8 * v10 + 768), a2);
      ++v10;
      uint64_t v9 = *((void *)this + 17);
    }
    while (v10 < *(unsigned __int8 *)(v9 + 676));
  }
  return AppleBCMWLANIO80211APSTAInterface::removeStaFromStaTable(this, v4);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::releaseSoftAPPowerAssertion(AppleBCMWLANIO80211APSTAInterface *this)
{
  int v4 = 0;
  *(unsigned char *)(*((void *)this + 17) + 12) = 0;
  AppleBCMWLANCore::postMessageInfra(*(AppleBCMWLANCore **)(*((void *)this + 17) + 536), 0x8Du, &v4, 4uLL);
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v3 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      return CCLogStream::logAlert(v3, "[dk] %s@%d:LPHS: Release AP power assertion\n", "releaseSoftAPPowerAssertion", 4585);
    }
  }
  return result;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::softApStatsAccumulatePowerStateDuration(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 136) + 16 * a2;
  *(void *)(v4 + 464) += a3;
  mach_continuous_time();
  uint64_t result = absolutetime_to_nanoseconds();
  *(void *)(*(void *)(a1 + 136) + 424) = 0;
  return result;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::monitorInfraConcurrencyState(AppleBCMWLANIO80211APSTAInterface *this)
{
  uint64_t result = AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(*((void *)this + 17) + 536), 1);
  int v3 = result;
  uint64_t v4 = *((void *)this + 17);
  int v5 = *(unsigned __int8 *)(v4 + 520);
  *(unsigned char *)(v4 + 520) = result;
  if (v5 != result || *(unsigned char *)(*((void *)this + 17) + 98))
  {
    if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        int v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v6, "[dk] %s@%d:Update SoftAP venor IE, lphs IE = %d, networkIe = %d\n", "monitorInfraConcurrencyState", 5068, v5 != v3, *(unsigned __int8 *)(*((void *)this + 17) + 98));
      }
    }
    uint64_t result = AppleBCMWLANIO80211APSTAInterface::programAppleVendorIE(this);
    *(unsigned char *)(*((void *)this + 17) + 98) = 0;
  }
  return result;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::runPowerSaveStateMachine(AppleBCMWLANIO80211APSTAInterface *this)
{
  int StaInactivityPeriodSecs = AppleBCMWLANIO80211APSTAInterface::getStaInactivityPeriodSecs(this);
  uint64_t v3 = *((void *)this + 17);
  uint64_t v4 = *(void *)(v3 + 160);
  BOOL v5 = !AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(v3 + 536), 16)
    || !AppleBCMWLANCore::isConcurrencyOpModeSet(*(void *)(*((void *)this + 17) + 536), 8);
  if (AppleBCMWLANCore::isNanPhFeatureEnabled(*(AppleBCMWLANCore **)(*((void *)this + 17) + 536))
    && !v5)
  {
    v4 += AppleBCMWLANCore::getNanRxPktCounter(*(AppleBCMWLANCore **)(*((void *)this + 17) + 536));
  }
  uint64_t v6 = *(void *)(*((void *)this + 17) + 144);
  memset(buf, 0, 32);
  (*(void (**)(AppleBCMWLANIO80211APSTAInterface *, unsigned char *))(*(void *)this + 808))(this, buf);
  uint64_t v7 = vaddvq_s64(vaddq_s64(*(int64x2_t *)&buf[16], *(int64x2_t *)buf));
  if (v6) {
    unint64_t v8 = v4 - v6;
  }
  else {
    unint64_t v8 = 0;
  }
  uint64_t v9 = *((void *)this + 17);
  uint64_t v10 = *(void *)(v9 + 152);
  uint64_t v11 = v7 - v10;
  if (!v10) {
    uint64_t v11 = 0;
  }
  *(void *)(v9 + 440) += v8;
  *(void *)(*((void *)this + 17) + 448) += v11;
  *(void *)(*((void *)this + 17) + 144) = v4;
  *(void *)(*((void *)this + 17) + 152) = v7;
  uint64_t result = AppleBCMWLANIO80211APSTAInterface::isSoftAPConcurrencyEnabled(this);
  uint64_t v13 = *((void *)this + 17);
  if ((result & 1) != 0 || v8 >= *(unsigned int *)(v13 + 36)) {
    *(_DWORD *)(v13 + 100) = 0;
  }
  else {
    ++*(_DWORD *)(v13 + 100);
  }
  uint64_t v14 = *((void *)this + 17);
  if (*(unsigned char *)(v14 + 14))
  {
    int v15 = *(_DWORD *)(v14 + 16);
    if (v15 == 3)
    {
      if (*(_DWORD *)(v14 + 100)) {
        return result;
      }
      unsigned int v16 = 1;
    }
    else if (v15 == 2)
    {
      unsigned int v17 = *(_DWORD *)(v14 + 100);
      if (v17)
      {
        if (v17 < *(_DWORD *)(v14 + 28)) {
          return result;
        }
      }
      else
      {
        AppleBCMWLANIO80211APSTAInterface::setPowerSaveState(this, 1u, 4u);
        if (*(_DWORD *)(*((void *)this + 17) + 100) < *(_DWORD *)(*((void *)this + 17) + 28))
        {
LABEL_30:
          if (!(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this)
            || ((*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this),
                (CCLogStream::shouldLogConsole() & 1) == 0))
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
            {
              int v18 = *(_DWORD *)(*((void *)this + 17) + 100);
              *(_DWORD *)buf = 67110914;
              *(_DWORD *)&uint8_t buf[4] = 65;
              *(_WORD *)&uint8_t buf[8] = 2080;
              *(void *)&buf[10] = "runPowerSaveStateMachine";
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = 5152;
              *(_WORD *)&buf[24] = 2080;
              *(void *)&buf[26] = "runPowerSaveStateMachine";
              __int16 v21 = 2048;
              uint64_t v22 = v4;
              __int16 v23 = 2048;
              unint64_t v24 = v8;
              __int16 v25 = 1024;
              int v26 = v18;
              __int16 v27 = 1024;
              int v28 = StaInactivityPeriodSecs;
              _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: %s: LPHS PS state changed due to, rx packets %llu, delta %llu, lowTrafficTime %d, inactiveTime %d\n", buf, 0x42u);
            }
          }
          uint64_t result = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
          if (result)
          {
            (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
            uint64_t result = CCLogStream::shouldLog();
            if (result)
            {
              __int16 v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this
                                                                                                  + 1024))(this);
              uint64_t result = CCLogStream::logAlert(v19, "[dk] %s@%d:%s: LPHS PS state changed due to, rx packets %llu, delta %llu, lowTrafficTime %d, inactiveTime %d\n", "runPowerSaveStateMachine", 5152, "runPowerSaveStateMachine", v4, v8, *(_DWORD *)(*((void *)this + 17) + 100), StaInactivityPeriodSecs);
            }
          }
          *(_DWORD *)(*((void *)this + 17) + 100) = 0;
          return result;
        }
      }
      unsigned int v16 = 3;
    }
    else
    {
      if (v15 != 1 || *(_DWORD *)(v14 + 100) < *(_DWORD *)(v14 + 24)) {
        return result;
      }
      unsigned int v16 = 2;
    }
    AppleBCMWLANIO80211APSTAInterface::setPowerSaveState(this, v16, 4u);
    goto LABEL_30;
  }
  return result;
}

const char *AppleBCMWLANIO80211APSTAInterface::powerStateChangeReasonToString(uint64_t a1, unsigned int a2)
{
  if (a2 > 0xE) {
    return "Unknown";
  }
  else {
    return off_1003885B0[a2];
  }
}

AppleBCMWLANIO80211APSTAInterface *AppleBCMWLANIO80211APSTAInterface::configureSoftAPPowerSaveOff(AppleBCMWLANIO80211APSTAInterface *this, int a2)
{
  unint64_t v2 = this;
  if (a2 == 12 || a2 == 10) {
    this = (AppleBCMWLANIO80211APSTAInterface *)AppleBCMWLANIO80211APSTAInterface::releaseSoftAPPowerAssertion(this);
  }
  *(_DWORD *)(*((void *)v2 + 17) + 100) = 0;
  if (*(_DWORD *)(*((void *)v2 + 17) + 620))
  {
    AppleBCMWLANIO80211APSTAInterface::configureLowPowerModeExit(v2);
    return (AppleBCMWLANIO80211APSTAInterface *)AppleBCMWLANIO80211APSTAInterface::setBeaconDutyCycle(v2, 0);
  }
  return this;
}

AppleBCMWLANIO80211APSTAInterface *AppleBCMWLANIO80211APSTAInterface::configureSoftAPPowerSaveActive(AppleBCMWLANIO80211APSTAInterface *this)
{
  if (*(_DWORD *)(*((void *)this + 17) + 620))
  {
    uint64_t v1 = this;
    AppleBCMWLANIO80211APSTAInterface::holdSoftAPPowerAssertion(this);
    AppleBCMWLANIO80211APSTAInterface::configureLowPowerModeExit(v1);
    this = (AppleBCMWLANIO80211APSTAInterface *)AppleBCMWLANIO80211APSTAInterface::setBeaconDutyCycle(v1, 0);
    *(_DWORD *)(*((void *)v1 + 17) + 100) = 0;
  }
  return this;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::configureSoftAPPowerSaveDynamic(AppleBCMWLANIO80211APSTAInterface *this)
{
  AppleBCMWLANIO80211APSTAInterface::setBeaconDutyCycle(this, 1);
  AppleBCMWLANIO80211APSTAInterface::configureBeaconDutyCycleParams(this, *(_DWORD *)(*((void *)this + 17) + 40));
  return AppleBCMWLANIO80211APSTAInterface::releaseSoftAPPowerAssertion(this);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::configureSoftAPPowerSaveLow(AppleBCMWLANIO80211APSTAInterface *this)
{
  AppleBCMWLANIO80211APSTAInterface::setBeaconDutyCycle(this, 1);
  AppleBCMWLANIO80211APSTAInterface::configureBeaconDutyCycleParams(this, *(_DWORD *)(*((void *)this + 17) + 40));
  AppleBCMWLANIO80211APSTAInterface::configureLowPowerModeEntry(this);
  return AppleBCMWLANIO80211APSTAInterface::releaseSoftAPPowerAssertion(this);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::getStaInactivityPeriodSecs(AppleBCMWLANIO80211APSTAInterface *this)
{
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  uint64_t v2 = 0;
  uint64_t result = 0;
  uint64_t v4 = *((void *)this + 17);
  do
  {
    if (*(unsigned char *)(v4 + v2 + 184))
    {
      unint64_t v5 = -*(void *)(v4 + v2 + 192) / 0x3B9ACA00uLL;
      if (result >= v5) {
        unsigned int v6 = -*(void *)(v4 + v2 + 192) / 0x3B9ACA00uLL;
      }
      else {
        unsigned int v6 = result;
      }
      if (result) {
        uint64_t result = v6;
      }
      else {
        uint64_t result = v5;
      }
    }
    v2 += 48;
  }
  while (v2 != 240);
  return result;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::forwardPacket(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 136)
                                         + 8
                                         * ((*(unsigned __int16 (**)(uint64_t))(*(void *)a2 + 288))(a2) >> 7)
                                         + 768)
                           + 184);
  return v2();
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::forwardPacket(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 40)
                                         + 8
                                         * ((*(unsigned __int16 (**)(uint64_t))(*(void *)a2 + 288))(a2) >> 7)
                                         + 768)
                           + 184);
  return v2();
}

uint64_t AppleBCMWLANIO80211APSTAInterface::enable(AppleBCMWLANIO80211APSTAInterface *this, unsigned int a2)
{
  if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      unsigned int v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logAlert(v6, "[dk] %s@%d:APSTA: enable\n", "enable", 5191);
    }
  }
  uint64_t v4 = IO80211SkywalkInterface::enable(this, a2);
  (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1168))(this);
  return v4;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::enable(AppleBCMWLANIO80211APSTAInterface *this, unsigned int a2)
{
  return AppleBCMWLANIO80211APSTAInterface::enable((AppleBCMWLANIO80211APSTAInterface *)((char *)this - 80), a2);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::setMIS_MAX_STA(void *a1, int *a2)
{
  if (*(_DWORD *)(a1[17] + 620)) {
    AppleBCMWLANIO80211APSTAInterface::setMaxAssoc(a1, *a2);
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::setMIS_MAX_STA(uint64_t a1, int *a2)
{
  if (*(_DWORD *)(*(void *)(a1 + 24) + 620)) {
    AppleBCMWLANIO80211APSTAInterface::setMaxAssoc((void *)(a1 - 112), *a2);
  }
  return 0;
}

{
  if (*(_DWORD *)(*(void *)(a1 + 8) + 620)) {
    AppleBCMWLANIO80211APSTAInterface::setMaxAssoc((void *)(a1 - 128), *a2);
  }
  return 0;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::disable(AppleBCMWLANIO80211APSTAInterface *this, unsigned int a2)
{
  if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      unint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logAlert(v5, "[dk] %s@%d:APSTA: disable\n", "disable", 5220);
    }
  }
  if ((*(unsigned int (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1000))(this))
  {
    (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1176))(this);
    IO80211SkywalkInterface::disable(this, a2);
  }
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      unsigned int v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      return CCLogStream::logAlert(v6, "[dk] %s@%d:APSTA: disable Done\n", "disable", 5225);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::disable(AppleBCMWLANIO80211APSTAInterface *this, unsigned int a2)
{
  return AppleBCMWLANIO80211APSTAInterface::disable((AppleBCMWLANIO80211APSTAInterface *)((char *)this - 80), a2);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::enableDatapath(AppleBCMWLANIO80211APSTAInterface *this)
{
  char v2 = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1000))(this);
  uint64_t v3 = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
  if (v2)
  {
    if (v3)
    {
      (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logInfo(v12, "[dk] %s@%d:APSTA interface enable data path\n", "enableDatapath", 5235);
      }
    }
    (*(void (**)(void, AppleBCMWLANIO80211APSTAInterface *))(**(void **)(*((void *)this + 17) + 720)
                                                                        + 64))(*(void *)(*((void *)this + 17) + 720), this);
    uint64_t v4 = *(void *)(*((void *)this + 17) + 744);
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 192))(v4);
      uint64_t v5 = *(void *)(*((void *)this + 17) + 752);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 200))(v5);
        uint64_t v6 = (*(uint64_t (**)(void, void, void))(**(void **)(*((void *)this + 17) + 752) + 120))(*(void *)(*((void *)this + 17) + 752), 0, 0);
        if (v6)
        {
          if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
          {
            (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this
                                                                                                  + 1024))(this);
              CCLogStream::logInfo(v13, "[dk] %s@%d:skywalk rx completion queue enqueue fail with return %d\n", "enableDatapath", 5248, v6);
            }
          }
          return 0;
        }
        return v6;
      }
      if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
          CCLogStream::logCrit(v14, "[dk] %s@%d:rx completion queue not valid\n");
        }
      }
    }
    else if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logCrit(v10, "[dk] %s@%d:tx completion queue not valid\n");
      }
    }
  }
  else if (v3)
  {
    (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      unint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      uint64_t v9 = (const char *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 160))(this);
      CCLogStream::logInfo(v8, "[dk] %s@%d:%s %s failed because interface has not been enabled yet\n", "enableDatapath", 5233, v9, "enableDatapath");
    }
  }
  uint64_t v6 = 3758097084;
  if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logCrit(v11, "[dk] %s@%d:skywalk data path enable fail\n", "enableDatapath", 5253);
    }
  }
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::enableDatapath(AppleBCMWLANIO80211APSTAInterface *this)
{
  return AppleBCMWLANIO80211APSTAInterface::enableDatapath((AppleBCMWLANIO80211APSTAInterface *)((char *)this - 80));
}

uint64_t AppleBCMWLANIO80211APSTAInterface::disableDatapath(AppleBCMWLANIO80211APSTAInterface *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      unint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logInfo(v8, "[dk] %s@%d:APSTA interface disable data path\n", "disableDatapath", 5260);
    }
  }
  (*(void (**)(void, AppleBCMWLANIO80211APSTAInterface *))(**(void **)(*((void *)this + 17) + 720)
                                                                      + 72))(*(void *)(*((void *)this + 17) + 720), this);
  uint64_t v2 = *(void *)(*((void *)this + 17) + 752);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 208))(v2);
    uint64_t v3 = *(void *)(*((void *)this + 17) + 744);
    if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 200))(v3);
      return 0;
    }
    if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logCrit(v9, "[dk] %s@%d:tx completion queue not valid\n");
      }
    }
  }
  else if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logCrit(v6, "[dk] %s@%d:rx completion queue not valid\n");
    }
  }
  uint64_t v4 = 3758097084;
  if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logCrit(v7, "[dk] %s@%d:skywalk data path disable fail\n", "disableDatapath", 5273);
    }
  }
  return v4;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::disableDatapath(AppleBCMWLANIO80211APSTAInterface *this)
{
  return AppleBCMWLANIO80211APSTAInterface::disableDatapath((AppleBCMWLANIO80211APSTAInterface *)((char *)this - 80));
}

uint64_t AppleBCMWLANIO80211APSTAInterface::enabled(AppleBCMWLANIO80211APSTAInterface *this)
{
  return *(unsigned int *)(*((void *)this + 17) + 620);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::getLogger(AppleBCMWLANIO80211APSTAInterface *this)
{
  return *(void *)(*((void *)this + 17) + 528);
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::getLogger(AppleBCMWLANIO80211APSTAInterface *this)
{
  return *(void *)(*((void *)this + 7) + 528);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::getNumTxQueues(AppleBCMWLANIO80211APSTAInterface *this)
{
  return *(unsigned __int8 *)(*((void *)this + 17) + 676);
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::getNumTxQueues(AppleBCMWLANIO80211APSTAInterface *this)
{
  return *(unsigned __int8 *)(*((void *)this + 7) + 676);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::getRxCompQueue(AppleBCMWLANIO80211APSTAInterface *this)
{
  return *(void *)(*((void *)this + 17) + 752);
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::getRxCompQueue(AppleBCMWLANIO80211APSTAInterface *this)
{
  return *(void *)(*((void *)this + 7) + 752);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::getTxCompQueue(AppleBCMWLANIO80211APSTAInterface *this)
{
  return *(void *)(*((void *)this + 17) + 744);
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::getTxCompQueue(AppleBCMWLANIO80211APSTAInterface *this)
{
  return *(void *)(*((void *)this + 7) + 744);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::getTxSubQueue(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 136);
  uint64_t v3 = *(unsigned int *)(v2 + 4 * a2 + 696);
  if (v3 >= *(unsigned __int8 *)(v2 + 676)) {
    return 0;
  }
  else {
    return *(void *)(v2 + 8 * v3 + 768);
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::getTxSubQueue(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(unsigned int *)(v2 + 4 * a2 + 696);
  if (v3 >= *(unsigned __int8 *)(v2 + 676)) {
    return 0;
  }
  else {
    return *(void *)(v2 + 8 * v3 + 768);
  }
}

uint64_t AppleBCMWLANIO80211APSTAInterface::getMultiCastQueue(AppleBCMWLANIO80211APSTAInterface *this)
{
  return *(void *)(*((void *)this + 17) + 800);
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::getMultiCastQueue(AppleBCMWLANIO80211APSTAInterface *this)
{
  return *(void *)(*((void *)this + 7) + 800);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::getTxPacketPool(AppleBCMWLANIO80211APSTAInterface *this)
{
  return *(void *)(*((void *)this + 17) + 728);
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::getTxPacketPool(AppleBCMWLANIO80211APSTAInterface *this)
{
  return *(void *)(*((void *)this + 7) + 728);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::getRxPacketPool(AppleBCMWLANIO80211APSTAInterface *this)
{
  return *(void *)(*((void *)this + 17) + 736);
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::getRxPacketPool(AppleBCMWLANIO80211APSTAInterface *this)
{
  return *(void *)(*((void *)this + 7) + 736);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::getTxHeadroom(AppleBCMWLANIO80211APSTAInterface *this)
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::getTxHeadroom(AppleBCMWLANIO80211APSTAInterface *this)
{
  return 0;
}

AppleBCMWLANSkywalkTxSubmissionQueue *AppleBCMWLANIO80211APSTAInterface::getTxQueueDepth(AppleBCMWLANIO80211APSTAInterface *this)
{
  uint64_t result = *(AppleBCMWLANSkywalkTxSubmissionQueue **)(*((void *)this + 17) + 768);
  if (result) {
    return (AppleBCMWLANSkywalkTxSubmissionQueue *)AppleBCMWLANSkywalkTxSubmissionQueue::getQueueDepth(result);
  }
  return result;
}

AppleBCMWLANSkywalkTxSubmissionQueue *non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::getTxQueueDepth(AppleBCMWLANIO80211APSTAInterface *this)
{
  uint64_t result = *(AppleBCMWLANSkywalkTxSubmissionQueue **)(*((void *)this + 7) + 768);
  if (result) {
    return (AppleBCMWLANSkywalkTxSubmissionQueue *)AppleBCMWLANSkywalkTxSubmissionQueue::getQueueDepth(result);
  }
  return result;
}

AppleBCMWLANSkywalkRxCompletionQueue *AppleBCMWLANIO80211APSTAInterface::getRxQueueCapacity(AppleBCMWLANIO80211APSTAInterface *this)
{
  uint64_t result = *(AppleBCMWLANSkywalkRxCompletionQueue **)(*((void *)this + 17) + 752);
  if (result) {
    return (AppleBCMWLANSkywalkRxCompletionQueue *)AppleBCMWLANSkywalkRxCompletionQueue::getQueueCapacity(result);
  }
  return result;
}

AppleBCMWLANSkywalkRxCompletionQueue *non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::getRxQueueCapacity(AppleBCMWLANIO80211APSTAInterface *this)
{
  uint64_t result = *(AppleBCMWLANSkywalkRxCompletionQueue **)(*((void *)this + 7) + 752);
  if (result) {
    return (AppleBCMWLANSkywalkRxCompletionQueue *)AppleBCMWLANSkywalkRxCompletionQueue::getQueueCapacity(result);
  }
  return result;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::setDisableHostapdAuthentication(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)(this + 136) + 809) = a2;
  return this;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::setInternalAPAuthentication(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)(this + 136) + 810) = a2;
  return this;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::printDataPath(IO80211SkywalkInterface *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(unsigned int *)(a2 + 28);
  uint64_t v6 = *(unsigned int *)(a2 + 32);
  uint64_t v7 = *(unsigned int *)(a2 + 24);
  if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
  {
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      int v18 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      InterfaceRoleStr = (const char *)IO80211SkywalkInterface::getInterfaceRoleStr(a1);
      char v20 = (const char *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 160))(a1);
      CCLogStream::logInfo(v18, "[dk] %s@%d:Enter InterfaceRole:%s bsdname:%s\n", "printDataPath", 5394, InterfaceRoleStr, v20);
    }
  }
  (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
  IO80211SkywalkInterface::getInterfaceRoleStr(a1);
  (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 160))(a1);
  uint64_t v8 = IO80211Print() + v6;
  if (*(unsigned char *)(*((void *)a1 + 17) + 676))
  {
    unint64_t v9 = 0;
    do
    {
      (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v10 = IO80211Print() + v8;
      uint64_t v11 = *(void *)(*((void *)a1 + 17) + 8 * v9 + 768);
      uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 216))(v11, v4, v5, v7, v10);
      ++v9;
    }
    while (v9 < *(unsigned __int8 *)(*((void *)a1 + 17) + 676));
  }
  (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
  uint64_t v12 = IO80211Print();
  uint64_t v13 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(*((void *)a1 + 17)
                                                                                            + 744)
                                                                              + 176))(*(void *)(*((void *)a1 + 17) + 744), v4, v5, v7, v12 + v8);
  (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
  uint64_t v14 = IO80211Print();
  int v15 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(*((void *)a1 + 17)
                                                                                            + 752)
                                                                              + 184))(*(void *)(*((void *)a1 + 17) + 752), v4, v5, v7, v14 + v13);
  int v16 = *(_DWORD *)(a2 + 28) + v15;
  *(_DWORD *)(a2 + 24) -= v15;
  *(_DWORD *)(a2 + 28) = v16;
  IO80211VirtualInterface::printDataPath();
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::printDataPath(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::updateRxCounter(uint64_t this, uint64_t a2)
{
  *(void *)(*(void *)(this + 136) + 160) += a2;
  return this;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::updateRxCounter(uint64_t this, uint64_t a2)
{
  *(void *)(*(void *)(this + 56) + 160) += a2;
  return this;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::setMacAddress(AppleBCMWLANIO80211APSTAInterface *this, ether_addr *a2)
{
  int InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
  uint64_t v5 = *((void *)this + 17);
  int v6 = *(_DWORD *)(v5 + 620);
  if (InterfaceId == -1)
  {
    if (!v6) {
      return 0;
    }
  }
  else if (!v6)
  {
    uint64_t v7 = *(AppleBCMWLANCommander **)(v5 + 552);
    v11[0] = a2;
    v11[1] = 6;
    return AppleBCMWLANCommander::runVirtualIOVarSet(v7, InterfaceId, "cur_etheraddr", (uint64_t)v11, 0, 0);
  }
  uint64_t v8 = 3758097084;
  if ((*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      unint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logAlert(v9, "[dk] %s@%d:Not setting mac addres since interface id=<%d>up=<%d>", "setMacAddress", 5440, InterfaceId, *(_DWORD *)(*((void *)this + 17) + 620));
    }
  }
  return v8;
}

uint64_t non-virtual thunk to'AppleBCMWLANIO80211APSTAInterface::setMacAddress(AppleBCMWLANIO80211APSTAInterface *this, ether_addr *a2)
{
  return AppleBCMWLANIO80211APSTAInterface::setMacAddress((AppleBCMWLANIO80211APSTAInterface *)((char *)this - 80), a2);
}

uint64_t AppleBCMWLANIO80211APSTAInterface::configureSoftAPPeerStats(AppleBCMWLANIO80211APSTAInterface *this, int a2)
{
  if (AppleBCMWLANCore::checkForSoftAPStatsSupport(*(AppleBCMWLANCore **)(*((void *)this + 17) + 536)))
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    __int16 v21 = 0;
    uint64_t v20 = 0;
    int v17 = 524290;
    if (a2) {
      __int16 v4 = 1;
    }
    else {
      __int16 v4 = 2;
    }
    HIWORD(v18) = v4;
    uint64_t v5 = (unsigned char *)IOMallocZeroTyped();
    if (v5)
    {
      int v6 = v5;
      unsigned char *v5 = a2;
      v16[0] = this;
      v16[1] = AppleBCMWLANIO80211APSTAInterface::handleSoftAPStatsConfigAsyncCallback;
      _DWORD v16[2] = v5;
      uint64_t v7 = *(AppleBCMWLANCommander **)(*((void *)this + 17) + 552);
      unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
      v15[0] = &v17;
      v15[1] = 14;
      uint64_t result = AppleBCMWLANCommander::sendVirtualIOVarSet(v7, InterfaceId, "softap_stats", (uint64_t)v15, kNoRxExpected, (uint64_t)v16, 0);
      if (!result) {
        return result;
      }
      uint64_t v10 = result;
      IOFree(v6, 1uLL);
    }
    else
    {
      uint64_t v10 = 3758097084;
    }
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        if (a2) {
          uint64_t v13 = "enable";
        }
        else {
          uint64_t v13 = "disable";
        }
        uint64_t v14 = (const char *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *, uint64_t))(*(void *)this + 856))(this, v10);
        return CCLogStream::logAlert(v12, "[dk] %s@%d: Error: SoftAP Peer stats %s iovar failed, reason: %s\n", "configureSoftAPPeerStats", 5492, v13, v14);
      }
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANIO80211APSTAInterface *))(*(void *)this + 1024))(this);
        return CCLogStream::logInfo(v11, "[dk] %s@%d: SoftAP Peer stats is not supported \n", "configureSoftAPPeerStats", 5496);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANIO80211APSTAInterface::handleSoftAPStatsConfigAsyncCallback(void *a1, int a2, uint64_t a3, int a4, unsigned char *address)
{
  if (address)
  {
    BOOL v7 = *address != 0;
    IOFree(address, 1uLL);
  }
  else
  {
    BOOL v7 = 0;
  }
  uint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 1024))(a1);
  if (a3)
  {
    if (v8)
    {
      (*(void (**)(void *))(*a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        unint64_t v9 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1024))(a1);
        if (v7) {
          uint64_t v10 = "enable";
        }
        else {
          uint64_t v10 = "disable";
        }
        uint64_t v11 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 856))(a1, a3);
        CCLogStream::logAlert(v9, "[dk] %s@%d: Error: SoftAP Peer stats %s iovar failed, reason: %s\n", "handleSoftAPStatsConfigAsyncCallback", 5524, v10, v11);
      }
    }
  }
  else
  {
    if (v8)
    {
      (*(void (**)(void *))(*a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1024))(a1);
        if (v7) {
          uint64_t v14 = "enable";
        }
        else {
          uint64_t v14 = "disable";
        }
        CCLogStream::logInfo(v13, "[dk] %s@%d: SoftAP Peer stats %s iovar successful \n", "handleSoftAPStatsConfigAsyncCallback", 5526, v14);
      }
    }
    *(unsigned char *)(a1[17] + 808) = v7;
  }
  return a3;
}

void _GLOBAL__sub_I_AppleBCMWLANIO80211APSTAInterface_cpp()
{
  kNullRange = 0;
}

OSObject *AppleBCMWLANDynamicRingOperationContext::withCompletion(long long *a1)
{
  __int16 v4 = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANDynamicRingOperationContextMetaClass, &v4)) {
    return 0;
  }
  uint64_t v2 = v4;
  if (v4 && (AppleBCMWLANDynamicRingOperationContext::initWithCompletion(v4, a1) & 1) == 0)
  {
    ((void (*)(OSObject *))v2->release)(v2);
    return 0;
  }
  return v2;
}

uint64_t AppleBCMWLANDynamicRingOperationContext::initWithCompletion(OSObject *a1, long long *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t result = OSObject::init(a1);
  if (result)
  {
    uint64_t v5 = IOMallocZeroTyped();
    a1[1].OSMetaClassBase::__vftable = (OSObject_vtbl *)v5;
    if (v5)
    {
      long long v6 = *a2;
      *(void *)(v5 + 32) = *((void *)a2 + 2);
      *(_OWORD *)(v5 + 16) = v6;
      uint64_t result = IOMallocZeroTyped();
      if (result)
      {
        *(void *)(result + 16) = a1;
        a1[1].free = (void (__cdecl *)(OSObject *__hidden))result;
        return 1;
      }
    }
    else
    {
      IOLog(" RingOperationContext ivars alloc fail\n");
      return 0;
    }
  }
  return result;
}

void AppleBCMWLANDynamicRingOperationContext::free(OSObject *this)
{
  uint64_t v2 = this[1].OSMetaClassBase::__vftable;
  if (v2)
  {
    if (v2->free)
    {
      IOFree(v2->free, 0x18uLL);
      this[1].free = 0;
      uint64_t v2 = this[1].OSMetaClassBase::__vftable;
    }
    memset_s(v2, 0x38uLL, 0, 0x38uLL);
    uint64_t v3 = this[1].OSMetaClassBase::__vftable;
    if (v3)
    {
      IOFree(v3, 0x38uLL);
      this[1].OSMetaClassBase::__vftable = 0;
    }
  }
  OSObject::free(this);
}

void non-virtual thunk to'AppleBCMWLANDynamicRingOperationContext::free(AppleBCMWLANDynamicRingOperationContext *this)
{
}

uint64_t AppleBCMWLANDynamicRingOperationContext::getContextFromLink(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

uint64_t AppleBCMWLANDynamicRingOperationContext::getSubmissionRingPtr(AppleBCMWLANDynamicRingOperationContext *this)
{
  return **((void **)this + 5);
}

uint64_t AppleBCMWLANDynamicRingOperationContext::setSubmissionRingPtr(uint64_t result, uint64_t a2)
{
  **(void **)(result + 40) = a2;
  return result;
}

uint64_t AppleBCMWLANDynamicRingOperationContext::getCompletionRingPtr(AppleBCMWLANDynamicRingOperationContext *this)
{
  return *(void *)(*((void *)this + 5) + 8);
}

uint64_t AppleBCMWLANDynamicRingOperationContext::setCompletionRingPtr(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 40) + 8) = a2;
  return result;
}

uint64_t AppleBCMWLANDynamicRingOperationContext::getRingOperationCompletionPtr(AppleBCMWLANDynamicRingOperationContext *this)
{
  return *((void *)this + 5) + 16;
}

uint64_t AppleBCMWLANDynamicRingOperationContext::getRingOperationResourceID(AppleBCMWLANDynamicRingOperationContext *this)
{
  return *(unsigned int *)(*((void *)this + 5) + 40);
}

uint64_t AppleBCMWLANDynamicRingOperationContext::setRingOperationResourceID(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 40) + 40) = a2;
  return this;
}

uint64_t AppleBCMWLANDynamicRingOperationContext::getChain(AppleBCMWLANDynamicRingOperationContext *this)
{
  return *(void *)(*((void *)this + 5) + 48);
}

void _GLOBAL__sub_I_AppleBCMWLANDynamicRingOperationContext_cpp()
{
  kNullRange = 0;
}

OSObject *AppleBCMWLANObjectQueue::withCapacity(AppleBCMWLANObjectQueue *this)
{
  __int16 v4 = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANObjectQueueMetaClass, &v4)) {
    return 0;
  }
  uint64_t v2 = v4;
  if (v4
    && (((uint64_t (*)(OSObject *, AppleBCMWLANObjectQueue *))v4->OSMetaClassBase::__vftable[1].release)(v4, this) & 1) == 0)
  {
    ((void (*)(OSObject *))v2->release)(v2);
    return 0;
  }
  return v2;
}

uint64_t AppleBCMWLANObjectQueue::initWithCapacity(OSObject *this, unsigned int a2)
{
  uint64_t result = OSObject::init(this);
  if (result)
  {
    uint64_t result = IOMallocZeroTyped();
    *(void *)&this[1].refcount = result;
    if (result)
    {
      if (a2 >= 4)
      {
        v5.i32[0] = a2;
        uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
        v6.i16[0] = vaddlv_u8(v6);
        if (v6.i32[0] <= 1u)
        {
          *(_DWORD *)uint64_t result = a2;
          *(void *)(*(void *)&this[1].refcount + 16) = IOMallocZeroTyped();
          uint64_t result = *(void *)&this[1].refcount;
          if (*(void *)(result + 16)) {
            return 1;
          }
        }
      }
    }
    else
    {
      IOLog("Failed to allocate AppleBCMWLANObjectQueue_IVars\n");
      uint64_t result = *(void *)&this[1].refcount;
      if (!result) {
        return result;
      }
    }
    memset_s((void *)result, 0x18uLL, 0, 0x18uLL);
    uint64_t result = *(void *)&this[1].refcount;
    if (result)
    {
      IOFree((void *)result, 0x18uLL);
      uint64_t result = 0;
      *(void *)&this[1].refcount = 0;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANObjectQueue::initWithCapacity(OSObject *this, unsigned int a2)
{
  return AppleBCMWLANObjectQueue::initWithCapacity(this - 1, a2);
}

void AppleBCMWLANObjectQueue::free(OSObject *this)
{
  uint64_t v2 = *(void **)&this[1].refcount;
  if (!v2[2]) {
    goto LABEL_8;
  }
  if (((unsigned int (*)(OSObject *))this->OSMetaClassBase::__vftable[1].getMetaClass)(this)) {
    panic("Freeing non-empty queue %p", this);
  }
  while (((unsigned int (*)(OSObject *))this->OSMetaClassBase::__vftable[1].getMetaClass)(this))
    AppleBCMWLANObjectQueue::dequeue((AppleBCMWLANObjectQueue *)this);
  uint64_t v3 = *(unsigned int **)&this[1].refcount;
  __int16 v4 = (void *)*((void *)v3 + 2);
  if (v4)
  {
    IOFree(v4, 8 * *v3);
    *(void *)(*(void *)&this[1].refcount + 16) = 0;
    uint64_t v3 = *(unsigned int **)&this[1].refcount;
  }
  *((void *)v3 + 2) = 0;
  uint64_t v2 = *(void **)&this[1].refcount;
  if (v2)
  {
LABEL_8:
    memset_s(v2, 0x18uLL, 0, 0x18uLL);
    int8x8_t v5 = *(void **)&this[1].refcount;
    if (v5)
    {
      IOFree(v5, 0x18uLL);
      *(void *)&this[1].refcount = 0;
    }
  }
  OSObject::free(this);
}

uint64_t AppleBCMWLANObjectQueue::dequeue(AppleBCMWLANObjectQueue *this)
{
  uint64_t v1 = *((void *)this + 6);
  uint64_t v2 = *(unsigned int *)(v1 + 8);
  if (*(_DWORD *)(v1 + 12) == v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(*(void *)(v1 + 16) + 8 * v2);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    *(void *)(*(void *)(*((void *)this + 6) + 16) + 8 * *(unsigned int *)(*((void *)this + 6) + 8)) = 0;
    uint64_t v1 = *((void *)this + 6);
  }
  --*(_DWORD *)(v1 + 4);
  *(_DWORD *)(*((void *)this + 6) + 8) = (**((_DWORD **)this + 6) - 1) & (*(_DWORD *)(*((void *)this + 6) + 8)
                                                                            + 1);
  return v3;
}

void non-virtual thunk to'AppleBCMWLANObjectQueue::free(AppleBCMWLANObjectQueue *this)
{
}

uint64_t AppleBCMWLANObjectQueue::enqueue(AppleBCMWLANObjectQueue *this, OSObject *a2)
{
  uint64_t v2 = *((void *)this + 6);
  uint64_t v3 = *(unsigned int *)(v2 + 12);
  if (((*(_DWORD *)v2 - 1) & (v3 + 1)) == *(_DWORD *)(v2 + 8)) {
    return 3758097115;
  }
  *(void *)(*(void *)(v2 + 16) + 8 * v3) = a2;
  ((void (*)(OSObject *))a2->retain)(a2);
  uint64_t result = 0;
  ++*(_DWORD *)(*((void *)this + 6) + 4);
  *(_DWORD *)(*((void *)this + 6) + 12) = (**((_DWORD **)this + 6) - 1) & (*(_DWORD *)(*((void *)this + 6) + 12)
                                                                             + 1);
  return result;
}

uint64_t AppleBCMWLANObjectQueue::getSize(AppleBCMWLANObjectQueue *this)
{
  return *(unsigned int *)(*((void *)this + 6) + 4);
}

uint64_t non-virtual thunk to'AppleBCMWLANObjectQueue::getSize(AppleBCMWLANObjectQueue *this)
{
  return *(unsigned int *)(*((void *)this + 1) + 4);
}

uint64_t AppleBCMWLANObjectQueue::getCapacity(AppleBCMWLANObjectQueue *this)
{
  return **((unsigned int **)this + 6);
}

uint64_t non-virtual thunk to'AppleBCMWLANObjectQueue::getCapacity(AppleBCMWLANObjectQueue *this)
{
  return **((unsigned int **)this + 1);
}

AppleBCMWLANKeepAliveOffload *AppleBCMWLANKeepAliveOffload::withDriver(AppleBCMWLANKeepAliveOffload *this, AppleBCMWLANCore *a2)
{
  int8x8_t v5 = (AppleBCMWLANKeepAliveOffload *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANKeepAliveOffloadMetaClass, (OSObject **)&v5)) {
    return 0;
  }
  uint64_t v3 = v5;
  if (v5 && (AppleBCMWLANKeepAliveOffload::init((OSObject *)v5, this) & 1) == 0)
  {
    (*(void (**)(AppleBCMWLANKeepAliveOffload *))(*(void *)v3 + 16))(v3);
    return 0;
  }
  return v3;
}

uint64_t AppleBCMWLANKeepAliveOffload::init(OSObject *this, AppleBCMWLANCore *a2)
{
  BOOL v4 = OSObject::init(this);
  uint64_t result = 0;
  if (a2)
  {
    if (v4)
    {
      uint64_t result = IOMallocZeroTyped();
      this[1].OSMetaClassBase::__vftable = (OSObject_vtbl *)result;
      if (result)
      {
        *(void *)(result + 16) = a2;
        this[1].retain = (void (__cdecl *)(const OSObject *__hidden))(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
        retain = this[1].retain;
        if (retain)
        {
          (*(void (**)(void (__cdecl *)(const OSObject *__hidden)))(*(void *)retain + 8))(retain);
          this[1].getMetaClass = (const OSMetaClass *(__cdecl *)(const OSMetaClassBase *__hidden))AppleBCMWLANCore::getCommander(a2);
          BOOL v7 = this[1].OSMetaClassBase::__vftable;
          if (v7->getMetaClass)
          {
            (*(void (**)(const OSMetaClass *(__cdecl *)(const OSMetaClassBase *__hidden)))(*(void *)v7->getMetaClass + 8))(v7->getMetaClass);
            HIDWORD(this[1].isEqualTo) = 0;
            LODWORD(this[1].Dispatch) = 0;
            uint64_t result = 1;
            HIDWORD(this[1].init) = 1;
            LODWORD(this[1].free) = 5;
            HIDWORD(this[1].Dispatch) = 30;
            LODWORD(this[1].init) = 900;
            HIDWORD(this[1].free) = 3;
            LODWORD(this[1].OSMetaClassBase::__vftable[1].getMetaClass) = 5;
            uint64_t v8 = this[1].OSMetaClassBase::__vftable;
            *(_OWORD *)&v8[8].getMetaClass = 0u;
            *(_OWORD *)&v8[8].release = 0u;
            *(_OWORD *)&v8[7].isEqualTo = 0u;
            *(_OWORD *)&v8[7].init = 0u;
            *(_OWORD *)&v8[6].free = 0u;
            *(_OWORD *)&v8[7].retain = 0u;
            *(_OWORD *)&v8[6].release = 0u;
            *(_OWORD *)&v8[6].Dispatch = 0u;
            *(_OWORD *)&v8[5].init = 0u;
            *(_OWORD *)&v8[6].getMetaClass = 0u;
            unint64_t v9 = this[1].OSMetaClassBase::__vftable;
            *(_OWORD *)((char *)&v9[3].getMetaClass + 4) = 0u;
            *(_OWORD *)((char *)&v9[2].init + 4) = 0u;
            *(_OWORD *)((char *)&v9[2].isEqualTo + 4) = 0u;
            *(_OWORD *)((char *)&v9[2].retain + 4) = 0u;
            *(_OWORD *)((char *)&v9[1].free + 4) = 0u;
            *(_OWORD *)((char *)&v9[1].Dispatch + 4) = 0u;
            *(_OWORD *)((char *)&v9[1].release + 4) = 0u;
            *(_OWORD *)((char *)&v9[1].getMetaClass + 4) = 0u;
            uint64_t v10 = this[1].OSMetaClassBase::__vftable;
            *(_OWORD *)((char *)&v10[3].release + 4) = 0u;
            uint64_t v10 = (OSObject_vtbl *)((char *)v10 + 188);
            *(_OWORD *)&v10[1].init = 0u;
            *(_OWORD *)&v10[2].getMetaClass = 0u;
            *(_OWORD *)&v10[1].retain = 0u;
            *(_OWORD *)&v10[1].isEqualTo = 0u;
            *(_OWORD *)&v10->Dispatch = 0u;
            *(_OWORD *)&v10->free = 0u;
            *(_OWORD *)&v10->release = 0u;
            LOBYTE(this[1].OSMetaClassBase::__vftable[8].Dispatch) = 0;
            BYTE1(this[1].OSMetaClassBase::__vftable[8].Dispatch) = 1;
            return result;
          }
          if (v7->retain && CCLogStream::shouldLog()) {
            CCLogStream::logAlert((CCLogStream *)this[1].retain, "[dk] %s@%d: Failed to get Command Manager\n", "init", 92);
          }
        }
        else
        {
          IOLog("AppleBCMWLANKeepAliveOffload::%s(): Unable to get debug logger\n", "init");
        }
        AppleBCMWLANKeepAliveOffload::freeResources((AppleBCMWLANKeepAliveOffload *)this);
        uint64_t result = (uint64_t)this[1].OSMetaClassBase::__vftable;
        if (result)
        {
          memset_s((void *)result, 0x1E8uLL, 0, 0x1E8uLL);
          uint64_t result = (uint64_t)this[1].OSMetaClassBase::__vftable;
          if (result)
          {
            IOFree((void *)result, 0x1E8uLL);
            uint64_t result = 0;
            this[1].OSMetaClassBase::__vftable = 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANKeepAliveOffload::freeResources(AppleBCMWLANKeepAliveOffload *this)
{
  uint64_t v2 = (void *)*((void *)this + 5);
  if (*v2)
  {
    (*(void (**)(void))(*(void *)*v2 + 16))(*v2);
    **((void **)this + 5) = 0;
    uint64_t v2 = (void *)*((void *)this + 5);
  }
  uint64_t result = v2[1];
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    *(void *)(*((void *)this + 5) + 8) = 0;
  }
  return result;
}

void AppleBCMWLANKeepAliveOffload::free(AppleBCMWLANKeepAliveOffload *this)
{
  AppleBCMWLANKeepAliveOffload::freeResources(this);
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    memset_s(v2, 0x1E8uLL, 0, 0x1E8uLL);
    uint64_t v3 = (void *)*((void *)this + 5);
    if (v3)
    {
      IOFree(v3, 0x1E8uLL);
      *((void *)this + 5) = 0;
    }
  }
  OSObject::free((OSObject *)this);
}

void non-virtual thunk to'AppleBCMWLANKeepAliveOffload::free(AppleBCMWLANKeepAliveOffload *this)
{
}

uint64_t AppleBCMWLANKeepAliveOffload::initializeKeepAliveCapabilities(AppleBCMWLANCommander ***this)
{
  uint64_t v2 = IOMallocZeroData();
  if (!v2) {
    return 3758097085;
  }
  uint64_t v3 = v2;
  int bytes = 0;
  v11[0] = &bytes;
  v11[1] = 4;
  v10[0] = v2;
  v10[1] = 0x800000008;
  uint64_t v4 = AppleBCMWLANCommander::runIOVarGet(*this[5], (uint64_t)"tko", (uint64_t)v11, (uint64_t)v10, 0);
  removePropertyHelper((IOService *)this[5][2], "initializeKeepAliveCapabilities: tko");
  OSDataPtr v5 = OSData::withBytes(&bytes, 4uLL);
  setPropertyHelper((IOService *)this[5][2], "initializeKeepAliveCapabilities: tko", v5);
  if (v5) {
    ((void (*)(OSDataPtr))v5->release)(v5);
  }
  if (v4)
  {
    if (this[5][1] && CCLogStream::shouldLog())
    {
      uint8x8_t v6 = this[5];
      BOOL v7 = v6[1];
      (*(void (**)(AppleBCMWLANCommander *, uint64_t))(*(void *)v6[2] + 112))(v6[2], v4);
      CCLogStream::logAlert(v7, "[dk] %s@%d:Get TKO cap command failed, %s\n");
    }
  }
  else
  {
    *((_DWORD *)this[5] + 8) = *(unsigned __int8 *)(v3 + 4);
    uint64_t v8 = this[5];
    if (*((_DWORD *)v8 + 8) != 4 && v8[1] && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(this[5][1], "[dk] %s@%d:Max supported TCP socket offloads %d\n");
    }
  }
  IOFreeData();
  return v4;
}

uint64_t AppleBCMWLANKeepAliveOffload::configureKeepAlives(AppleBCMWLANKeepAliveOffload *this)
{
  uint64_t v3 = this;
  unsigned int FirmwareInterfaceVersion = AppleBCMWLANCore::getFirmwareInterfaceVersion(*(AppleBCMWLANCore **)(*((void *)this + 5)
                                                                                                + 16));
  AppleBCMWLANCore::getPrimaryInterface(*(AppleBCMWLANCore **)(*((void *)v3 + 5) + 16));
  unint64_t v111 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v109[1] = v4;
  long long v110 = v4;
  long long v108 = v4;
  v109[0] = v4;
  long long v106 = v4;
  long long v107 = v4;
  uint64_t v5 = IOMallocZeroData();
  if (!v5)
  {
    uint64_t v7 = 3758097085;
    if (*(void *)(*((void *)v3 + 5) + 8) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)v3 + 5) + 8), "[dk] %s@%d:%s: Failed to allocate keepalive frame buffer\n", "configureKeepAlives", 239, "configureKeepAlives");
    }
    return v7;
  }
  *((void *)&v107 + 1) = v5;
  *((void *)&v106 + 1) = v5 + 1248;
  uint64_t TcpUdpKeepAliveData = IO80211InfraInterface::getTcpUdpKeepAliveData();
  if (TcpUdpKeepAliveData)
  {
    uint64_t v7 = TcpUdpKeepAliveData;
    if (!*(void *)(*((void *)v3 + 5) + 8) || !CCLogStream::shouldLog()) {
      goto LABEL_155;
    }
    uint64_t v8 = *(CCLogStream **)(*((void *)v3 + 5) + 8);
    uint64_t v87 = 255;
    long long v88 = "configureKeepAlives";
    unint64_t v9 = "[dk] %s@%d:%s: Failed to get Tcp/Udp keepalive data\n";
    goto LABEL_6;
  }
  uint64_t v10 = *((void *)&v107 + 1);
  long long v98 = (AppleBCMWLANCommander ***)v3;
  if (!AppleBCMWLANCore::checkForTCPKAOffloadSupport(*(AppleBCMWLANCore **)(*((void *)v3 + 5) + 16))
    || !v107)
  {
    goto LABEL_84;
  }
  int v11 = 0;
  unsigned __int8 v12 = 0;
  uint64_t v93 = *((void *)&v107 + 1) + 140;
  uint64_t v95 = *((void *)&v107 + 1);
  unsigned int v13 = -1;
  unsigned int v101 = -1;
  do
  {
    unsigned int v14 = v12;
    uint64_t v15 = v10 + 312 * v12;
    int v16 = (unsigned __int8 *)(v15 + 136);
    if (*(char *)(v15 + 136) < 0)
    {
      uint64_t v20 = *((void *)v3 + 5);
LABEL_27:
      if (*(void *)(v20 + 8) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*((void *)v3 + 5) + 8), "[dk] %s@%d:Invalid TCP Probe Length %d OR response length %d\n", "configureKeepAlives", 271, *(unsigned __int8 *)(v10 + 312 * v14 + 129), *v16);
      }
      goto LABEL_70;
    }
    uint64_t v17 = v10 + 312 * v12;
    int v19 = *(char *)(v17 + 129);
    uint64_t v18 = (unsigned __int8 *)(v17 + 129);
    uint64_t v20 = *((void *)v3 + 5);
    if (v19 < 0) {
      goto LABEL_27;
    }
    if (*(void *)(v20 + 8))
    {
      int shouldLog = CCLogStream::shouldLog();
      uint64_t v20 = *((void *)v3 + 5);
      if (shouldLog)
      {
        CCLogStream::logNoticeIf(*(CCLogStream **)(v20 + 8), 0x8000000uLL, "[dk] %s@%d:Keepalive data: type: %u, ether_type: %u, length: %u, reply_length: %u, addr_length: %u \n", "configureKeepAlives", 276, *(unsigned __int8 *)(v10 + 312 * v14 + 128), *(unsigned __int8 *)(v10 + 312 * v14 + 132), *v18, *v16, *(unsigned __int8 *)(v10 + 312 * v14 + 137));
        uint64_t v20 = *((void *)v3 + 5);
      }
    }
    if (*(void *)(v20 + 8))
    {
      int v22 = CCLogStream::shouldLog();
      uint64_t v20 = *((void *)v3 + 5);
      if (v22)
      {
        CCLogStream::logNoticeIf(*(CCLogStream **)(v20 + 8), 0x8000000uLL, "[dk] %s@%d:Keepalive data: interval: %u, keep_retry: %u, keep_cnt: %u \n", "configureKeepAlives", 279, *(unsigned __int16 *)(v10 + 312 * v14 + 130), *(unsigned __int16 *)(v10 + 312 * v14 + 134), *(unsigned __int8 *)(v10 + 312 * v14 + 133));
        uint64_t v20 = *((void *)v3 + 5);
      }
    }
    int v99 = v11;
    unsigned int v96 = v13;
    if (*(void *)(v20 + 8) && CCLogStream::shouldLog())
    {
      uint64_t v41 = v10 + 312 * v14;
      CCLogStream::logNoticeIf(*(CCLogStream **)(*((void *)v3 + 5) + 8), 0x8000000uLL, "[dk] %s@%d:Keepalive data: local_addr: 0x%x.%x.%x.%x(%u.%u.%u.%u), remote_addr: 0x%x.%x.%x.%x(%u.%u.%u.%u), local_port: 0x%x(%u), remote_port: 0x%x(%u), local_seq: 0x%x(%u), remote_seq: 0x%x(%u) \n", "configureKeepAlives", 282, *(unsigned __int8 *)(v41 + 268), *(unsigned __int8 *)(v41 + 269), *(unsigned __int8 *)(v41 + 270), *(unsigned __int8 *)(v41 + 271), *(unsigned __int8 *)(v41 + 268), *(unsigned __int8 *)(v41 + 269), *(unsigned __int8 *)(v41 + 270), *(unsigned __int8 *)(v41 + 271), *(unsigned __int8 *)(v41 + 284), *(unsigned __int8 *)(v41 + 285), *(unsigned __int8 *)(v41 + 286), *(unsigned __int8 *)(v41 + 287), *(unsigned __int8 *)(v41 + 284),
        *(unsigned __int8 *)(v41 + 285),
        *(unsigned __int8 *)(v41 + 286),
        *(unsigned __int8 *)(v41 + 287),
        *(unsigned __int16 *)(v41 + 300),
        *(unsigned __int16 *)(v41 + 300),
        *(unsigned __int16 *)(v41 + 302),
        *(unsigned __int16 *)(v41 + 302),
        *(_DWORD *)(v41 + 304),
        *(_DWORD *)(v41 + 304),
        *(_DWORD *)(v41 + 308),
        *(_DWORD *)(v41 + 308));
    }
    __int16 v23 = (char *)IOMallocZeroData();
    unint64_t v24 = v23;
    if (v23)
    {
      strcpy(v23, "TCP Keepalive Probe Packet: ");
      unsigned int v25 = 28;
    }
    else
    {
      unsigned int v25 = 0;
    }
    if (*v18)
    {
      unint64_t v26 = 0;
      do
      {
        unsigned int v27 = 0;
        if (!v24
          || v25 > 0x3FE
          || (int v28 = 1024, v27 = snprintf(&v24[v25], 1024 - v25, "%0x ", *(unsigned __int8 *)(v15 + v26)), v27 <= 0x3FF))
        {
          int v28 = v27;
        }
        v25 += v28;
        ++v26;
      }
      while (v26 < *v18);
    }
    if (v24 && v25 <= 0x3FE)
    {
      snprintf(&v24[v25], 1024 - v25, "\n");
      __int16 v29 = v98;
    }
    else
    {
      __int16 v29 = v98;
      if (!v24) {
        goto LABEL_46;
      }
    }
    if (v29[5][1] && CCLogStream::shouldLog()) {
      CCLogStream::log();
    }
    char *v24 = 0;
    IOFreeData();
LABEL_46:
    int v30 = (char *)IOMallocZeroData();
    __int16 v31 = v30;
    if (v30)
    {
      strcpy(v30, "TCP Keepalive Probe Response Packet: ");
      unsigned int v32 = 37;
    }
    else
    {
      unsigned int v32 = 0;
    }
    if (*v16)
    {
      unint64_t v33 = 0;
      do
      {
        unsigned int v34 = 0;
        if (!v31
          || v32 > 0x3FE
          || (int v35 = 1024,
              unsigned int v34 = snprintf(&v31[v32], 1024 - v32, "%0x ", *(unsigned __int8 *)(v93 + 312 * v14 + v33)),
              v34 <= 0x3FF))
        {
          int v35 = v34;
        }
        v32 += v35;
        ++v33;
      }
      while (v33 < *v16);
    }
    if (v31 && v32 <= 0x3FE)
    {
      snprintf(&v31[v32], 1024 - v32, "\n");
      uint64_t v3 = (AppleBCMWLANKeepAliveOffload *)v98;
LABEL_60:
      if (*(void *)(*((void *)v3 + 5) + 8) && CCLogStream::shouldLog()) {
        CCLogStream::log();
      }
      char *v31 = 0;
      IOFreeData();
      goto LABEL_64;
    }
    uint64_t v3 = (AppleBCMWLANKeepAliveOffload *)v98;
    if (v31) {
      goto LABEL_60;
    }
LABEL_64:
    uint64_t v10 = v95;
    uint64_t v36 = v95 + 312 * v14;
    unsigned int v37 = *(unsigned __int16 *)(v36 + 130);
    unsigned int v38 = *(unsigned __int8 *)(v36 + 133);
    uint64_t v39 = AppleBCMWLANKeepAliveOffload::setTCPAliveOffloadConfig((AppleBCMWLANCommander ***)v3, v99, v15, (unsigned char *)&v110 + 6 * v14, (unsigned char *)v109 + 6 * v14 + 8);
    if (v39)
    {
      uint64_t v7 = v39;
      if (!*(void *)(*((void *)v3 + 5) + 8) || !CCLogStream::shouldLog()) {
        goto LABEL_155;
      }
      uint64_t v45 = *((void *)v3 + 5);
      __int16 v44 = *(CCLogStream **)(v45 + 8);
      uint64_t v87 = 315;
      long long v88 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v45 + 16) + 112))(*(void *)(v45 + 16), v7);
      unint64_t v9 = "[dk] %s@%d:Failed configuring TKO Socket with err: %s\n";
LABEL_83:
      uint64_t v8 = v44;
LABEL_6:
      CCLogStream::logAlert(v8, v9, "configureKeepAlives", v87, v88);
      goto LABEL_155;
    }
    unsigned int v13 = v96;
    if (v96 >= v38) {
      unsigned int v13 = v38;
    }
    unsigned int v40 = v101;
    if (v101 >= v37) {
      unsigned int v40 = v37;
    }
    unsigned int v101 = v40;
    int v11 = v99 + 1;
LABEL_70:
    unsigned __int8 v12 = v14 + 1;
  }
  while (v107 > (v14 + 1));
  if ((_BYTE)v11)
  {
    uint64_t v42 = AppleBCMWLANKeepAliveOffload::setTCPKeepAliveParam(v3, v101, 0xFFFFFFFF, v13);
    if (v42)
    {
      uint64_t v7 = v42;
      if (!*(void *)(*((void *)v3 + 5) + 8) || !CCLogStream::shouldLog()) {
        goto LABEL_155;
      }
      uint64_t v43 = *((void *)v3 + 5);
      __int16 v44 = *(CCLogStream **)(v43 + 8);
      uint64_t v87 = 328;
      long long v88 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v43 + 16) + 112))(*(void *)(v43 + 16), v7);
      unint64_t v9 = "[dk] %s@%d:Failed configuring TCP Keep Alive params with err: %s\n";
      goto LABEL_83;
    }
    uint64_t v46 = AppleBCMWLANKeepAliveOffload::setTCPAliveOffloadEnable(v3, 1);
    if (v46)
    {
      uint64_t v7 = v46;
      if (!*(void *)(*((void *)v3 + 5) + 8) || !CCLogStream::shouldLog()) {
        goto LABEL_155;
      }
      uint64_t v47 = *((void *)v3 + 5);
      __int16 v44 = *(CCLogStream **)(v47 + 8);
      uint64_t v87 = 335;
      long long v88 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v47 + 16) + 112))(*(void *)(v47 + 16), v7);
      unint64_t v9 = "[dk] %s@%d:Failed enabling TCP Keep Alive params with err: %s\n";
      goto LABEL_83;
    }
  }
LABEL_84:
  if (!v106) {
    goto LABEL_145;
  }
  uint64_t v48 = 0;
  uint64_t v49 = *((void *)&v106 + 1);
  uint64_t v97 = *((void *)&v106 + 1);
  char v50 = 1;
  *(void *)v102 = *((void *)&v106 + 1);
  int v100 = 8;
  while (2)
  {
    uint64_t v51 = *(void *)(*((void *)v3 + 5) + 8);
    if (v48 != 2)
    {
      if (v51 && CCLogStream::shouldLog()) {
        CCLogStream::logNoticeIf(*(CCLogStream **)(*((void *)v3 + 5) + 8), 0x8000000uLL, "[dk] %s@%d:Keepalive data: type: %u, ether_type: %u, length: %u, interval: %u\n", "configureKeepAlives", 355, *(unsigned __int8 *)(v49 + 312 * v48 + 128), *(unsigned __int8 *)(v49 + 312 * v48 + 132), *(unsigned __int8 *)(v49 + 312 * v48 + 129), *(unsigned __int16 *)(v49 + 312 * v48 + 130));
      }
      int v52 = (char *)IOMallocZeroData();
      uint64_t v53 = v52;
      if (v52)
      {
        strcpy(v52, "Keepalive data: ");
        unsigned int v54 = 16;
      }
      else
      {
        unsigned int v54 = 0;
      }
      uint64_t v55 = v49 + 312 * v48;
      int v57 = *(unsigned __int8 *)(v55 + 129);
      unsigned int v56 = (unsigned __int8 *)(v55 + 129);
      if (v57)
      {
        unint64_t v58 = 0;
        do
        {
          unsigned int v59 = 0;
          if (!v53
            || v54 > 0x3FE
            || (int v60 = 1024,
                unsigned int v59 = snprintf(&v53[v54], 1024 - v54, "%0x ", *(unsigned __int8 *)(*(void *)v102 + v58)),
                v59 <= 0x3FF))
          {
            int v60 = v59;
          }
          v54 += v60;
          ++v58;
        }
        while (v58 < *v56);
      }
      if (v53 && v54 <= 0x3FE)
      {
        snprintf(&v53[v54], 1024 - v54, "\n");
LABEL_104:
        if (*(void *)(*((void *)v3 + 5) + 8) && CCLogStream::shouldLog()) {
          CCLogStream::log();
        }
        char *v53 = 0;
        IOFreeData();
      }
      else if (v53)
      {
        goto LABEL_104;
      }
      uint64_t v61 = (char *)&v106 + 6 * v48;
      char v62 = v61[44];
      char v63 = v61[45];
      v2.i32[0] = *(_DWORD *)(v61 + 46);
      v1.i32[0] = *((_DWORD *)v61 + 8);
      char v92 = v61[36];
      char v94 = v61[37];
      uint64_t v64 = v97 + 312 * v48;
      if (*(unsigned char *)(v64 + 132)) {
        int v65 = v100;
      }
      else {
        int v65 = 8;
      }
      if (*(unsigned char *)(v64 + 132) == 1) {
        int v66 = -8826;
      }
      else {
        int v66 = v65;
      }
      int v100 = v66;
      int v67 = *(unsigned __int16 *)(v64 + 130);
      if (v67) {
        unsigned int v68 = 1000 * v67;
      }
      else {
        unsigned int v68 = 20000;
      }
      if (v68 >= 0x1389) {
        int v69 = v68;
      }
      else {
        int v69 = 20000;
      }
      unsigned int v70 = *v56 - 2;
      if (v70 >= 0x80) {
        size_t v71 = 128;
      }
      else {
        size_t v71 = v70;
      }
      uint64_t v72 = IOMallocZeroData();
      if (!v72)
      {
        if (v98[5][1])
        {
          if (CCLogStream::shouldLog()) {
            CCLogStream::logAlert(v98[5][1], "[dk] %s@%d:No memory for mKeepAliveBuf\n", "configureKeepAlives", 399);
          }
          uint64_t v7 = 12;
        }
        else
        {
          uint64_t v7 = 12;
        }
        goto LABEL_155;
      }
      uint64_t v73 = v72;
      uint64_t v74 = v97 + 312 * v48;
      int8x8_t v75 = (int8x8_t)vmovl_u8(v2).u64[0];
      int8x8_t v76 = (int8x8_t)vmovl_u8(v1).u64[0];
      if (FirmwareInterfaceVersion < 0x11)
      {
        *(_DWORD *)uint64_t v72 = 720897;
        *(_DWORD *)(v72 + 4) = v69;
        *(unsigned char *)(v72 + 10) = v50;
        *(unsigned char *)(v72 + 11) = v62;
        *(unsigned char *)(v72 + 12) = v63;
        *(int8x8_t *)(v72 + 13) = vuzp1_s8(v75, v76);
        *(unsigned char *)(v72 + 21) = v92;
        *(unsigned char *)(v72 + 22) = v94;
        *(_WORD *)(v72 + 23) = v100;
        memcpy((void *)(v72 + 25), (const void *)(v74 + 16), v71);
        *(_WORD *)(v73 + 8) = v71;
        uint64_t v78 = 11;
      }
      else
      {
        *(_DWORD *)uint64_t v72 = 983042;
        *(_DWORD *)(v72 + 4) = v69;
        *(unsigned char *)(v72 + 14) = v50;
        LODWORD(v103) = 5;
        int8x8_t v89 = v76;
        int8x8_t v90 = v75;
        IOParseBootArgNumber("wlan.keepalive.retrycnt", &v103, 4);
        __int16 v77 = v103;
        if (v103 >= 5) {
          __int16 v77 = 5;
        }
        *(_WORD *)(v73 + 10) = v77;
        *(unsigned char *)(v73 + 15) = v62;
        *(unsigned char *)(v73 + 16) = v63;
        *(int8x8_t *)(v73 + 17) = vuzp1_s8(v90, v89);
        *(unsigned char *)(v73 + 25) = v92;
        *(unsigned char *)(v73 + 26) = v94;
        *(_WORD *)(v73 + 27) = v100;
        memcpy((void *)(v73 + 29), (const void *)(v74 + 16), v71);
        *(_WORD *)(v73 + 8) = v71;
        uint64_t v78 = 15;
      }
      uint64_t v79 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(v71 + v78);
      uint64_t v3 = (AppleBCMWLANKeepAliveOffload *)v98;
      uint64_t v80 = (*(uint64_t (**)(AppleBCMWLANCommander *))(*(void *)v98[5][2] + 88))(v98[5][2]);
      uint64_t v49 = v97;
      if ((*(unsigned int (**)(uint64_t))(*(void *)v80 + 136))(v80))
      {
        uint64_t v103 = (uint64_t)v98;
        v104 = AppleBCMWLANKeepAliveOffload::handleMkeepAlivesAsyncCallBack;
        uint64_t v105 = 0;
        if (!AppleBCMWLANCommander::sendIOVarSet(*v98[5], (uint64_t)"mkeep_alive"))
        {
LABEL_133:
          ++*((_DWORD *)v98[5] + 7);
          if (v98[5][1] && CCLogStream::shouldLog())
          {
            int v82 = *(unsigned __int8 *)(v97 + 312 * v48 + 128);
            uint64_t v83 = "Other Keep Alive";
            if (v82 == 1) {
              uint64_t v83 = "CAR Play Keep Alive";
            }
            BOOL v84 = v82 == 0;
            long long v85 = "NAT Keep Alive";
            if (!v84) {
              long long v85 = v83;
            }
            CCLogStream::logAlert(v98[5][1], "[dk] %s@%d:Configured Keep Alive:  %s\n", "configureKeepAlives", 448, v85);
          }
        }
      }
      else
      {
        uint64_t v81 = *v98[5];
        uint64_t v103 = v73;
        v104 = v79;
        if (!AppleBCMWLANCommander::runIOVarSet(v81, (uint64_t)"mkeep_alive", (uint64_t)&v103, 0, 0)) {
          goto LABEL_133;
        }
      }
      ++v50;
      IOFreeData();
      ++v48;
      *(void *)v102 += 312;
      if (v106 <= v48) {
        goto LABEL_145;
      }
      continue;
    }
    break;
  }
  if (v51 && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*((void *)v3 + 5) + 8), "[dk] %s@%d:Reached FW Max of %d udp offload sockets\n", "configureKeepAlives", 350, 3);
  }
LABEL_145:
  if (*(void *)(*((void *)v3 + 5) + 8))
  {
    if (CCLogStream::shouldLog()) {
      CCLogStream::logNoticeIf(*(CCLogStream **)(*((void *)v3 + 5) + 8), 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "configureKeepAlives", 454, "configureKeepAlives");
    }
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 0;
  }
LABEL_155:
  IOFreeData();
  return v7;
}

uint64_t AppleBCMWLANKeepAliveOffload::setTCPAliveOffloadConfig(AppleBCMWLANCommander ***a1, int a2, uint64_t a3, unsigned char *a4, unsigned char *a5)
{
  unsigned __int16 v71 = 0;
  int v70 = 0;
  unsigned __int16 v69 = 0;
  int v68 = 0;
  Primaryuint64_t Interface = AppleBCMWLANCore::getPrimaryInterface(a1[5][2]);
  if (PrimaryInterface)
  {
    uint64_t v11 = 3758097090;
    if (*(unsigned char *)(a3 + 129) && *(unsigned char *)(a3 + 136))
    {
      unsigned __int8 v12 = (IO80211InfraInterface *)PrimaryInterface;
      if (AppleBCMWLANCore::getRouterMacAddress((uint64_t)a1[5][2], (uint64_t)&v68)) {
        return 3758097084;
      }
      unint64_t v14 = (*(uint64_t (**)(IO80211InfraInterface *))(*(void *)v12 + 1008))(v12);
      int v66 = v14;
      unsigned __int16 v67 = WORD2(v14);
      uint64_t v15 = a1[5];
      if (v15[1])
      {
        int shouldLog = CCLogStream::shouldLog();
        uint64_t v15 = a1[5];
        if (shouldLog)
        {
          CCLogStream::logNoticeIf(v15[1], 0x8000000uLL, "[dk] %s@%d:selfMac: %x:%x:%x:%x:%x:%x\n", "setTCPAliveOffloadConfig", 690, v14, BYTE1(v14), BYTE2(v14), BYTE3(v14), BYTE4(v14), BYTE5(v14));
          uint64_t v15 = a1[5];
        }
      }
      if (v15[1] && CCLogStream::shouldLog()) {
        CCLogStream::logNoticeIf(a1[5][1], 0x8000000uLL, "[dk] %s@%d:routerMac: %x:%x:%x:%x:%x:%x\n", "setTCPAliveOffloadConfig", 693, v68, BYTE1(v68), BYTE2(v68), HIBYTE(v68), v69, HIBYTE(v69));
      }
      uint64_t v17 = 56;
      if (!*(unsigned char *)(a3 + 132)) {
        uint64_t v17 = 32;
      }
      unint64_t v18 = *(unsigned __int8 *)(a3 + 129) + (unint64_t)*(unsigned __int8 *)(a3 + 136) + v17 + 28;
      uint64_t v19 = IOMallocZeroData();
      if (v19)
      {
        uint64_t v20 = v19;
        *(_WORD *)uint64_t v19 = 2;
        *(_WORD *)(v19 + 2) = v18 - 4;
        *(unsigned char *)(v19 + 4) = a2;
        *(unsigned char *)(v19 + 5) = *(unsigned char *)(a3 + 132) != 0;
        *(_DWORD *)(v19 + 12) = *(_DWORD *)(a3 + 304);
        *(_WORD *)(v19 + 6) = *(_WORD *)(a3 + 300);
        *(_DWORD *)(v19 + 16) = *(_DWORD *)(a3 + 308);
        *(_WORD *)(v19 + 8) = *(_WORD *)(a3 + 302);
        *(_WORD *)(v19 + 20) = *(unsigned __int8 *)(a3 + 129) - 2;
        *(_WORD *)(v19 + 22) = *(unsigned __int8 *)(a3 + 136) - 2;
        if (a1[5][1] && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(a1[5][1], "[dk] %s@%d:TCP KA Socket idx[%u]: lSeq %u rSeq %u sport %d dport %d destIP %d:%d:%d:%d \n\n", "setTCPAliveOffloadConfig", 729, a2, *(_DWORD *)(a3 + 304), *(_DWORD *)(a3 + 308), *(unsigned __int16 *)(a3 + 300), *(unsigned __int16 *)(a3 + 302), *(unsigned __int8 *)(a3 + 284), *(unsigned __int8 *)(a3 + 285), *(unsigned __int8 *)(a3 + 286), *(unsigned __int8 *)(a3 + 287));
        }
        int v21 = *(unsigned __int8 *)(a3 + 137);
        if (*(unsigned char *)(a3 + 132))
        {
          if (v21 != 16)
          {
            if (a1[5][1] && CCLogStream::shouldLog()) {
              CCLogStream::logAlert(a1[5][1], "[dk] %s@%d:TKO: Invalid IPV6 addr length %d\n");
            }
            goto LABEL_88;
          }
          *(_OWORD *)(v20 + 24) = *(_OWORD *)(a3 + 268);
          *(_OWORD *)(v20 + 40) = *(_OWORD *)(a3 + 284);
          uint64_t v22 = 14;
        }
        else
        {
          if (v21 != 4)
          {
            if (a1[5][1] && CCLogStream::shouldLog()) {
              CCLogStream::logAlert(a1[5][1], "[dk] %s@%d:TKO: Invalid IPV4 addr length %d\n");
            }
            goto LABEL_88;
          }
          *(_DWORD *)(v20 + 24) = *(_DWORD *)(a3 + 268);
          *(_DWORD *)(v20 + 28) = *(_DWORD *)(a3 + 284);
          uint64_t v22 = 8;
        }
        size_t v55 = v18;
        if (a4 && a5)
        {
          LOBYTE(CurrentApAddress) = *a4;
          LOBYTE(v62) = a4[1];
          LOBYTE(v61) = a4[2];
          LOBYTE(v60) = a4[3];
          char v59 = a4[4];
          char v58 = a4[5];
          LOBYTE(v24) = a5[1];
          LOBYTE(v25) = a5[2];
          LOBYTE(v26) = a5[3];
          char v27 = a5[4];
          char v28 = a5[5];
          LOBYTE(v14) = *a5;
        }
        else
        {
          unint64_t v24 = v14 >> 8;
          unint64_t v25 = v14 >> 16;
          uint64_t v26 = (v14 >> 24) & 0xFFFFFF;
          char v27 = BYTE4(v14);
          BOOL v29 = v68 == v66 && v69 == v67;
          if (v29 || (v68 == v70 ? (BOOL v30 = v69 == v71) : (BOOL v30 = 0), v30))
          {
            uint64_t v33 = v22;
            unint64_t CurrentApAddress = IO80211InfraInterface::getCurrentApAddress(v12);
            WORD2(v63) = WORD2(CurrentApAddress);
            LODWORD(v63) = CurrentApAddress;
            if (CurrentApAddress == v70 && WORD2(CurrentApAddress) == v71)
            {
              if (a1[5][1] && CCLogStream::shouldLog()) {
                CCLogStream::logAlert(a1[5][1], "[dk] %s@%d:Lost Connection while sending keep alive packet\n", "setTCPAliveOffloadConfig", 771);
              }
              uint64_t v11 = 3758097122;
              goto LABEL_88;
            }
            char v58 = BYTE5(CurrentApAddress);
            char v59 = BYTE4(CurrentApAddress);
            uint64_t v60 = (CurrentApAddress >> 24) & 0xFFFFFF;
            unint64_t v61 = CurrentApAddress >> 16;
            unint64_t v62 = CurrentApAddress >> 8;
            char v28 = BYTE5(v14);
            unint64_t v24 = v14 >> 8;
            unint64_t v25 = v14 >> 16;
            uint64_t v26 = (v14 >> 24) & 0xFFFFFF;
            char v27 = BYTE4(v14);
            uint64_t v22 = v33;
          }
          else
          {
            if (!a4 || (*(_DWORD *)a4 == v70 ? (BOOL v31 = *((unsigned __int16 *)a4 + 2) == v71) : (BOOL v31 = 0), v31))
            {
              LOBYTE(CurrentApAddress) = v68;
              LOBYTE(v62) = BYTE1(v68);
              LOBYTE(v61) = BYTE2(v68);
              LOBYTE(v60) = HIBYTE(v68);
              char v59 = v69;
              char v32 = HIBYTE(v69);
            }
            else
            {
              LOBYTE(CurrentApAddress) = *a4;
              LOBYTE(v62) = a4[1];
              LOBYTE(v61) = a4[2];
              LOBYTE(v60) = a4[3];
              char v59 = a4[4];
              char v32 = a4[5];
            }
            char v58 = v32;
            char v28 = BYTE5(v14);
          }
        }
        char v56 = v14;
        uint64_t v35 = v20 + 4 * v22;
        BOOL v29 = *(unsigned char *)(a3 + 132) == 0;
        *(unsigned char *)uint64_t v35 = CurrentApAddress;
        *(unsigned char *)(v35 + 1) = v62;
        if (v29) {
          __int16 v36 = 8;
        }
        else {
          __int16 v36 = -8826;
        }
        __int16 v57 = v36;
        *(unsigned char *)(v35 + 2) = v61;
        *(unsigned char *)(v35 + 3) = v60;
        *(unsigned char *)(v35 + 4) = v59;
        unsigned int v54 = (void *)v20;
        *(unsigned char *)(v35 + 5) = v58;
        *(unsigned char *)(v35 + 6) = v14;
        *(unsigned char *)(v35 + 7) = v24;
        *(unsigned char *)(v35 + 8) = v25;
        *(unsigned char *)(v35 + 9) = v26;
        *(unsigned char *)(v35 + 10) = v27;
        *(unsigned char *)(v35 + 11) = v28;
        *(_WORD *)(v35 + 12) = v36;
        uint64_t v37 = v35 + 14;
        char v38 = CurrentApAddress;
        char v39 = v28;
        char v40 = v24;
        char v41 = v25;
        char v42 = v26;
        char v43 = v27;
        memcpy((void *)(v35 + 14), (const void *)(a3 + 16), *(unsigned __int8 *)(a3 + 129) - 16);
        uint64_t v44 = *(unsigned __int8 *)(a3 + 129) + v37;
        *(unsigned char *)(v44 - 16) = v38;
        *(unsigned char *)(v44 - 15) = v62;
        *(unsigned char *)(v44 - 14) = v61;
        *(unsigned char *)(v44 - 13) = v60;
        *(unsigned char *)(v44 - 12) = v59;
        *(unsigned char *)(v44 - 11) = v58;
        *(unsigned char *)(v44 - 10) = v56;
        *(unsigned char *)(v44 - 9) = v40;
        *(unsigned char *)(v44 - 8) = v41;
        *(unsigned char *)(v44 - 7) = v42;
        *(unsigned char *)(v44 - 6) = v43;
        *(unsigned char *)(v44 - 5) = v39;
        *(_WORD *)(v44 - 4) = v57;
        memcpy((void *)(v44 - 2), (const void *)(a3 + 156), *(unsigned __int8 *)(a3 + 136) - 16);
        if (!a2)
        {
          if (*(unsigned __int8 *)(a3 + 129) >= 0x80u) {
            size_t v45 = 128;
          }
          else {
            size_t v45 = *(unsigned __int8 *)(a3 + 129);
          }
          memcpy((char *)a1[5] + 60, (const void *)a3, v45);
          uint64_t v46 = a1[5];
          *((unsigned char *)v46 + 60) = v38;
          *((unsigned char *)v46 + 61) = v62;
          *((unsigned char *)v46 + 62) = v61;
          *((unsigned char *)v46 + 63) = v60;
          *((unsigned char *)v46 + 64) = v59;
          *((unsigned char *)v46 + 65) = v58;
          *((unsigned char *)v46 + 66) = v56;
          *((unsigned char *)v46 + 67) = v40;
          *((unsigned char *)v46 + 68) = v41;
          *((unsigned char *)v46 + 69) = v42;
          *((unsigned char *)v46 + 70) = v43;
          *((unsigned char *)v46 + 71) = v39;
          *((_WORD *)v46 + 36) = v57;
          if (*(unsigned __int8 *)(a3 + 136) >= 0x80u) {
            size_t v47 = 128;
          }
          else {
            size_t v47 = *(unsigned __int8 *)(a3 + 136);
          }
          memcpy((char *)a1[5] + 188, (const void *)(a3 + 140), v47);
          uint64_t v48 = a1[5];
          *((unsigned char *)v48 + 188) = v38;
          *((unsigned char *)v48 + 189) = v62;
          *((unsigned char *)v48 + 190) = v61;
          *((unsigned char *)v48 + 191) = v60;
          *((unsigned char *)v48 + 192) = v59;
          *((unsigned char *)v48 + 193) = v58;
          *((unsigned char *)v48 + 194) = v56;
          *((unsigned char *)v48 + 195) = v40;
          *((unsigned char *)v48 + 196) = v41;
          *((unsigned char *)v48 + 197) = v42;
          *((unsigned char *)v48 + 198) = v43;
          *((unsigned char *)v48 + 199) = v39;
          *((_WORD *)v48 + 100) = v57;
        }
        removePropertyHelper((IOService *)a1[5][2], "setTCPAliveOffloadConfig: tko");
        OSDataPtr v49 = OSData::withBytes(v54, v55);
        setPropertyHelper((IOService *)a1[5][2], "setTCPAliveOffloadConfig: tko", v49);
        if (v49) {
          ((void (*)(OSDataPtr))v49->release)(v49);
        }
        uint64_t v50 = (*(uint64_t (**)(AppleBCMWLANCommander *))(*(void *)a1[5][2] + 88))(a1[5][2]);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v50 + 136))(v50))
        {
          char v63 = a1;
          uint64_t v64 = AppleBCMWLANKeepAliveOffload::handleTCPKeepAliveConfigAsyncCallBack;
          uint64_t v65 = 0;
          uint64_t v51 = AppleBCMWLANCommander::sendIOVarSet(*a1[5], (uint64_t)"tko");
        }
        else
        {
          int v52 = *a1[5];
          char v63 = (AppleBCMWLANCommander ***)v54;
          uint64_t v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v55;
          uint64_t v51 = AppleBCMWLANCommander::runIOVarSet(v52, (uint64_t)"tko", (uint64_t)&v63, 0, 0);
        }
        uint64_t v11 = v51;
        uint64_t v53 = a1[5];
        if (v51)
        {
          if (v53[1] && CCLogStream::shouldLog()) {
            CCLogStream::logAlert(a1[5][1], "[dk] %s@%d:Configuring TCP Keep Alive Connect failed\n");
          }
        }
        else
        {
          ++*((_DWORD *)v53 + 6);
        }
LABEL_88:
        IOFreeData();
        return v11;
      }
      uint64_t v11 = 3758097085;
      if (a1[5][1] && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(a1[5][1], "[dk] %s@%d:TCP Keep Alive Config buffer allocation failed\n");
      }
    }
    else if (a1[5][1] && CCLogStream::shouldLog())
    {
      CCLogStream::logAlert(a1[5][1], "[dk] %s@%d:Invalid parameters\n");
    }
  }
  else
  {
    uint64_t v11 = 3758097084;
    if (a1[5][1] && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(a1[5][1], "[dk] %s@%d:configureKeepAlives with infraSkywalkInterface is null \n");
    }
  }
  return v11;
}

uint64_t AppleBCMWLANKeepAliveOffload::setTCPKeepAliveParam(AppleBCMWLANKeepAliveOffload *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v8 = IOMallocZeroData();
  uint64_t v9 = *((void *)this + 5);
  if (v8)
  {
    uint64_t v10 = (_WORD *)v8;
    unsigned int v11 = *(_DWORD *)(v9 + 36);
    if (v11 <= a2) {
      unsigned int v11 = a2;
    }
    if (v11 >= *(_DWORD *)(v9 + 40)) {
      int v12 = *(_DWORD *)(v9 + 40);
    }
    else {
      int v12 = v11;
    }
    unsigned int v13 = *(_DWORD *)(v9 + 44);
    if (v13 <= a3) {
      unsigned int v13 = a3;
    }
    if (v13 >= *(_DWORD *)(v9 + 48)) {
      int v14 = *(_DWORD *)(v9 + 48);
    }
    else {
      int v14 = v13;
    }
    unsigned int v15 = *(_DWORD *)(v9 + 52);
    if (v15 <= a4) {
      unsigned int v15 = a4;
    }
    if (v15 >= *(_DWORD *)(v9 + 56)) {
      int v16 = *(_DWORD *)(v9 + 56);
    }
    else {
      int v16 = v15;
    }
    if (*(void *)(v9 + 8) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 8), "[dk] %s@%d:Setting Keepalive interval:%u, keep_retry:%d, keep_cnt:%d \n\n", "setTCPKeepAliveParam", 496, v12, v14, v16);
    }
    *(_DWORD *)uint64_t v10 = 524289;
    void v10[2] = v12;
    void v10[3] = v14;
    v10[4] = v16;
    removePropertyHelper(*(IOService **)(*((void *)this + 5) + 16), "setTCPKeepAliveParam: tko");
    OSDataPtr v17 = OSData::withBytes(v10, 0xCuLL);
    setPropertyHelper(*(IOService **)(*((void *)this + 5) + 16), "setTCPKeepAliveParam: tko", v17);
    if (v17) {
      ((void (*)(OSDataPtr))v17->release)(v17);
    }
    uint64_t v18 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 5) + 16) + 88))(*(void *)(*((void *)this + 5) + 16));
    if ((*(unsigned int (**)(uint64_t))(*(void *)v18 + 136))(v18))
    {
      __int16 v23 = this;
      uint64_t v24 = (uint64_t)AppleBCMWLANKeepAliveOffload::handleTCPKeepAliveParamAsyncCallBack;
      uint64_t v25 = 0;
      uint64_t v19 = AppleBCMWLANCommander::sendIOVarSet(**((AppleBCMWLANCommander ***)this + 5), (uint64_t)"tko");
    }
    else
    {
      int v21 = (AppleBCMWLANCommander *)**((void **)this + 5);
      __int16 v23 = (AppleBCMWLANKeepAliveOffload *)v10;
      uint64_t v24 = 12;
      uint64_t v19 = AppleBCMWLANCommander::runIOVarSet(v21, (uint64_t)"tko", (uint64_t)&v23, 0, 0);
    }
    uint64_t v20 = v19;
    if (v19 && *(void *)(*((void *)this + 5) + 8) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 8), "[dk] %s@%d:Configuring TCP Keep Alive Params failed\n", "setTCPKeepAliveParam", 528);
    }
    IOFreeData();
  }
  else
  {
    uint64_t v20 = 3758097085;
    if (*(void *)(v9 + 8) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 8), "[dk] %s@%d:TCP Keep Alive Param buffer allocation failed\n", "setTCPKeepAliveParam", 474);
    }
  }
  return v20;
}

uint64_t AppleBCMWLANKeepAliveOffload::setTCPAliveOffloadEnable(AppleBCMWLANKeepAliveOffload *this, int a2)
{
  uint64_t v4 = IOMallocZeroData();
  uint64_t v5 = (void *)v4;
  if (a2 && (uint64_t v6 = *((void *)this + 5), !*(unsigned char *)(v6 + 481)))
  {
    if (*(void *)(v6 + 8) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 8), "[dk] %s@%d:TCP Keep Alive offload disabled, ignoring\n", "setTCPAliveOffloadEnable", 547);
    }
    uint64_t v10 = 3758097122;
    if (v5) {
      goto LABEL_23;
    }
  }
  else
  {
    if (v4)
    {
      *(_DWORD *)uint64_t v4 = 262147;
      *(unsigned char *)(v4 + 4) = a2;
      removePropertyHelper(*(IOService **)(*((void *)this + 5) + 16), "setTCPAliveOffloadEnable: tko");
      OSDataPtr v7 = OSData::withBytes(v5, 8uLL);
      setPropertyHelper(*(IOService **)(*((void *)this + 5) + 16), "setTCPAliveOffloadEnable: tko", v7);
      if (v7) {
        ((void (*)(OSDataPtr))v7->release)(v7);
      }
      uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 5) + 16) + 88))(*(void *)(*((void *)this + 5) + 16));
      if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 136))(v8))
      {
        unsigned int v15 = this;
        uint64_t v16 = (uint64_t)AppleBCMWLANKeepAliveOffload::handleTCPKeepAliveEnableAsyncCallBack;
        uint64_t v17 = 0;
        uint64_t v9 = AppleBCMWLANCommander::sendIOVarSet(**((AppleBCMWLANCommander ***)this + 5), (uint64_t)"tko");
      }
      else
      {
        unsigned int v11 = (AppleBCMWLANCommander *)**((void **)this + 5);
        unsigned int v15 = (AppleBCMWLANKeepAliveOffload *)v5;
        uint64_t v16 = 8;
        uint64_t v9 = AppleBCMWLANCommander::runIOVarSet(v11, (uint64_t)"tko", (uint64_t)&v15, 0, 0);
      }
      uint64_t v10 = v9;
      uint64_t v12 = *(void *)(*((void *)this + 5) + 8);
      if (v10)
      {
        if (v12 && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 8), "[dk] %s@%d:Configuring TCP Keep Alive Enable/ failed\n", "setTCPAliveOffloadEnable", 596);
        }
      }
      else
      {
        if (v12 && CCLogStream::shouldLog())
        {
          if (a2) {
            int v14 = "Enabled";
          }
          else {
            int v14 = "Disabled";
          }
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 8), "[dk] %s@%d:TCP Keep Alive Offload: %s\n", "setTCPAliveOffloadEnable", 598, v14);
        }
        uint64_t v10 = 0;
      }
LABEL_23:
      IOFreeData();
      return v10;
    }
    uint64_t v10 = 3758097085;
    if (*(void *)(*((void *)this + 5) + 8) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 8), "[dk] %s@%d:TCP Keep Alive Param buffer allocation failed\n", "setTCPAliveOffloadEnable", 554);
    }
  }
  return v10;
}

uint64_t AppleBCMWLANKeepAliveOffload::handleMkeepAlivesAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(*(void *)(result + 40) + 8);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = *(void *)(v3 + 40);
        uint64_t v6 = *(CCLogStream **)(v5 + 8);
        OSDataPtr v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 16) + 112))(*(void *)(v5 + 16), a3);
        return CCLogStream::logAlert(v6, "[dk] %s@%d: Error: Cannot Configure M Keep Alives: %s\n", "handleMkeepAlivesAsyncCallBack", 972, v7);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANKeepAliveOffload::handleTCPKeepAliveParamAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(*(void *)(result + 40) + 8);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = *(void *)(v3 + 40);
        uint64_t v6 = *(CCLogStream **)(v5 + 8);
        OSDataPtr v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 16) + 112))(*(void *)(v5 + 16), a3);
        return CCLogStream::logAlert(v6, "[dk] %s@%d: Error: Cannot Configure TCP Keep Alive Param: %s\n", "handleTCPKeepAliveParamAsyncCallBack", 985, v7);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANKeepAliveOffload::handleTCPKeepAliveEnableAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(*(void *)(result + 40) + 8);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = *(void *)(v3 + 40);
        uint64_t v6 = *(CCLogStream **)(v5 + 8);
        OSDataPtr v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 16) + 112))(*(void *)(v5 + 16), a3);
        return CCLogStream::logAlert(v6, "[dk] %s@%d: Error: Cannot Configure TCP Keep Alive Enable: %s\n", "handleTCPKeepAliveEnableAsyncCallBack", 1011, v7);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANKeepAliveOffload::getTCPAliveOffloadWakeReason(AppleBCMWLANKeepAliveOffload *this)
{
  int bytes = 4;
  v8[0] = this;
  v8[1] = AppleBCMWLANKeepAliveOffload::handleTCPKeepAliveStatusAsyncCallBack;
  v8[2] = 0;
  removePropertyHelper(*(IOService **)(*((void *)this + 5) + 16), "getTCPAliveOffloadWakeReason: tko");
  OSDataPtr v2 = OSData::withBytes(&bytes, 4uLL);
  setPropertyHelper(*(IOService **)(*((void *)this + 5) + 16), "getTCPAliveOffloadWakeReason: tko", v2);
  if (v2) {
    ((void (*)(OSDataPtr))v2->release)(v2);
  }
  uint64_t v3 = (AppleBCMWLANCommander *)**((void **)this + 5);
  v7[0] = &bytes;
  v7[1] = 4;
  int v6 = 2949141;
  uint64_t v4 = AppleBCMWLANCommander::sendIOVarGet(v3, (uint64_t)"tko", (uint64_t)v7, (unsigned __int16 *)&v6, (uint64_t)v8, 0);
  if (v4 && *(void *)(*((void *)this + 5) + 8) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 8), "[dk] %s@%d:Getting TCP Keep Alive Status failed\n", "getTCPAliveOffloadWakeReason", 650);
  }
  return v4;
}

uint64_t AppleBCMWLANKeepAliveOffload::handleTCPKeepAliveStatusAsyncCallBack(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  if (a3)
  {
    uint64_t result = *(void *)(*(void *)(a1 + 40) + 8);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v7 = *(void *)(a1 + 40);
        uint64_t v8 = *(CCLogStream **)(v7 + 8);
        (*(void (**)(void, uint64_t))(**(void **)(v7 + 16) + 112))(*(void *)(v7 + 16), a3);
        return CCLogStream::logAlert(v8, "[dk] %s@%d: Error: Cannot retrieve TCP Keep Alive Status: %s\n");
      }
    }
  }
  else if (*a4 && *((_WORD *)a4 + 4))
  {
    uint64_t v10 = *(void *)(a1 + 40);
    if (*(void *)(v10 + 8))
    {
      int shouldLog = CCLogStream::shouldLog();
      uint64_t v10 = *(void *)(a1 + 40);
      if (shouldLog)
      {
        CCLogStream::logAlert(*(CCLogStream **)(v10 + 8), "[dk] %s@%d:TCPKA TKO status, rxPayload( length[%u], min[%u] max[%u])\n", "handleTCPKeepAliveStatusAsyncCallBack", 1036, *((unsigned __int16 *)a4 + 4), *((unsigned __int16 *)a4 + 5), *((unsigned __int16 *)a4 + 6));
        uint64_t v10 = *(void *)(a1 + 40);
      }
    }
    removePropertyHelper(*(IOService **)(v10 + 16), "TKO status data");
    OSDataPtr v12 = OSData::withBytes(*a4, *((unsigned __int16 *)a4 + 4));
    setPropertyHelper(*(IOService **)(*(void *)(a1 + 40) + 16), "TKO status data", v12);
    if (v12) {
      ((void (*)(OSDataPtr))v12->release)(v12);
    }
    unint64_t v13 = *((unsigned __int16 *)a4 + 4);
    if (v13 > 3)
    {
      int v14 = (unsigned __int16 *)*a4;
      if (*(_WORD *)*a4 == 4)
      {
        uint64_t v15 = v14[1];
        if (v15 + 4 <= v13)
        {
          unsigned int v16 = *((unsigned __int8 *)v14 + 4);
          uint64_t v17 = *(void *)(a1 + 40);
          if (v15 <= v16)
          {
            uint64_t result = *(void *)(v17 + 8);
            if (result)
            {
              uint64_t result = CCLogStream::shouldLog();
              if (result) {
                return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 8), "[dk] %s@%d: Error: Incorrect Status length %d, socket count %d\n");
              }
            }
          }
          else
          {
            if (*(unsigned __int8 *)(v17 + 480) >= 0xAu) {
              *(unsigned char *)(v17 + 480) = 0;
            }
            if (v16)
            {
              unint64_t v18 = 0;
              int v19 = 0;
              do
              {
                int v20 = *((unsigned __int8 *)v14 + v18 + 5);
                if ((v20 - 1) <= 5)
                {
                  if (*(void *)(*(void *)(a1 + 40) + 8))
                  {
                    int v21 = (AppleBCMWLANKeepAliveOffload *)CCLogStream::shouldLog();
                    if (v21)
                    {
                      uint64_t v26 = *(CCLogStream **)(*(void *)(a1 + 40) + 8);
                      int v24 = *((unsigned __int8 *)v14 + 4);
                      StringFromWakeReason = AppleBCMWLANKeepAliveOffload::getStringFromWakeReason(v21, v20);
                      CCLogStream::logAlert(v26, "[dk] %s@%d:TKO Socket count[%u], Id %d, Status: %u/'%s'\n", "handleTCPKeepAliveStatusAsyncCallBack", 1164, v24, v18, v20, StringFromWakeReason);
                    }
                  }
                  ++v19;
                  if (!v18)
                  {
                    mach_continuous_time();
                    absolutetime_to_nanoseconds();
                    *(_DWORD *)(*(void *)(a1 + 40) + 16 * *(unsigned __int8 *)(*(void *)(a1 + 40) + 480) + 328) = v20;
                    uint64_t v22 = *(void *)(a1 + 40);
                    int v23 = *(_DWORD *)(v22 + 484);
                    if (!v23) {
                      int v23 = v20;
                    }
                    *(_DWORD *)(v22 + 484) = v23;
                  }
                }
                ++v18;
              }
              while (v18 < *((unsigned __int8 *)v14 + 4));
            }
            uint64_t result = *(void *)(*(void *)(a1 + 40) + 8);
            if (result)
            {
              uint64_t result = CCLogStream::shouldLog();
              if (result) {
                return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 8), "[dk] %s@%d:TKO Socket count[%u], wakeCounts[%d]\n");
              }
            }
          }
        }
        else
        {
          uint64_t result = *(void *)(*(void *)(a1 + 40) + 8);
          if (result)
          {
            uint64_t result = CCLogStream::shouldLog();
            if (result) {
              return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 8), "[dk] %s@%d: Error: Incorrect buffer length %hu, expected %lu\n");
            }
          }
        }
      }
      else
      {
        uint64_t result = *(void *)(*(void *)(a1 + 40) + 8);
        if (result)
        {
          uint64_t result = CCLogStream::shouldLog();
          if (result) {
            return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 8), "[dk] %s@%d: Error: Incorrect SubCmdId in Status %d\n");
          }
        }
      }
    }
    else
    {
      uint64_t result = *(void *)(*(void *)(a1 + 40) + 8);
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result) {
          return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 8), "[dk] %s@%d: Error: Insufficient buffer length %hu, expected %lu\n");
        }
      }
    }
  }
  else
  {
    uint64_t result = *(void *)(*(void *)(a1 + 40) + 8);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result) {
        return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 40) + 8), "[dk] %s@%d: Error: Cannot retrieve TCP Keep Alive Status buffer, length[%u]\n");
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANKeepAliveOffload::handleTCPKeepAliveConfigAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(*(void *)(result + 40) + 8);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = *(void *)(v3 + 40);
        int v6 = *(CCLogStream **)(v5 + 8);
        uint64_t v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 16) + 112))(*(void *)(v5 + 16), a3);
        return CCLogStream::logAlert(v6, "[dk] %s@%d: Error: Cannot Configure TCP Keep Alive Config: %s\n", "handleTCPKeepAliveConfigAsyncCallBack", 998, v7);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANKeepAliveOffload::unConfigureKeepAlives(AppleBCMWLANKeepAliveOffload *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (*(void *)(v2 + 8))
  {
    int shouldLog = CCLogStream::shouldLog();
    uint64_t v2 = *((void *)this + 5);
    if (shouldLog)
    {
      CCLogStream::logNoticeIf(*(CCLogStream **)(v2 + 8), 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "unConfigureKeepAlives", 878, "unConfigureKeepAlives");
      uint64_t v2 = *((void *)this + 5);
    }
  }
  unsigned int FirmwareInterfaceVersion = AppleBCMWLANCore::getFirmwareInterfaceVersion(*(AppleBCMWLANCore **)(v2 + 16));
  if (AppleBCMWLANCore::checkForTCPKAOffloadSupport(*(AppleBCMWLANCore **)(*((void *)this + 5) + 16)))
  {
    uint64_t TCPAliveOffloadWakeReason = AppleBCMWLANKeepAliveOffload::getTCPAliveOffloadWakeReason(this);
    if (TCPAliveOffloadWakeReason)
    {
      uint64_t v6 = TCPAliveOffloadWakeReason;
      if (*(void *)(*((void *)this + 5) + 8))
      {
        if (CCLogStream::shouldLog())
        {
          uint64_t v22 = *((void *)this + 5);
          int v23 = *(CCLogStream **)(v22 + 8);
          int v24 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v22 + 16) + 112))(*(void *)(v22 + 16), v6);
          CCLogStream::logAlert(v23, "[dk] %s@%d:Failed to get TKO Wake Reason with err: %s\n", "unConfigureKeepAlives", 887, v24);
        }
      }
    }
    uint64_t v7 = AppleBCMWLANKeepAliveOffload::setTCPAliveOffloadEnable(this, 0);
    uint64_t v8 = *((void *)this + 5);
    if (v7)
    {
      uint64_t v9 = v7;
      if (*(void *)(v8 + 8))
      {
        int v10 = CCLogStream::shouldLog();
        uint64_t v8 = *((void *)this + 5);
        if (v10)
        {
          uint64_t v25 = *(CCLogStream **)(v8 + 8);
          uint64_t v26 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v8 + 16) + 112))(*(void *)(v8 + 16), v9);
          CCLogStream::logAlert(v25, "[dk] %s@%d:Failed to disable TKO with err: %s\n", "unConfigureKeepAlives", 892, v26);
          uint64_t v8 = *((void *)this + 5);
        }
      }
    }
    *(_DWORD *)(v8 + 24) = 0;
  }
  int v11 = 1;
  while (1)
  {
    uint64_t v12 = IOMallocZeroData();
    if (!v12) {
      break;
    }
    unint64_t v13 = (AppleBCMWLANKeepAliveOffload *)v12;
    if (FirmwareInterfaceVersion < 0x11)
    {
      *(void *)uint64_t v12 = 720897;
      *(unsigned char *)(v12 + 10) = v11;
      uint64_t v14 = 11;
    }
    else
    {
      *(void *)uint64_t v12 = 983042;
      *(unsigned char *)(v12 + 14) = v11;
      uint64_t v14 = 15;
    }
    *(_WORD *)(v12 + 8) = 0;
    uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 5) + 16) + 88))(*(void *)(*((void *)this + 5) + 16));
    if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 136))(v15))
    {
      char v27 = this;
      char v28 = AppleBCMWLANKeepAliveOffload::handleUnconfigureMkeepAlivesAsyncCallBack;
      uint64_t v29 = 0;
      uint64_t v16 = AppleBCMWLANCommander::sendIOVarSet(**((AppleBCMWLANCommander ***)this + 5), (uint64_t)"mkeep_alive");
    }
    else
    {
      uint64_t v17 = (AppleBCMWLANCommander *)**((void **)this + 5);
      char v27 = v13;
      char v28 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v14;
      uint64_t v16 = AppleBCMWLANCommander::runIOVarSet(v17, (uint64_t)"mkeep_alive", (uint64_t)&v27, 0, 0);
    }
    uint64_t v18 = v16;
    uint64_t v19 = *((void *)this + 5);
    if (v16)
    {
      if (*(void *)(v19 + 8) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 8), "[dk] %s@%d:Failed to UnConfigure mkeep-alive for ID %d\n");
      }
    }
    else
    {
      int v20 = *(_DWORD *)(v19 + 28);
      if (v20)
      {
        *(_DWORD *)(v19 + 28) = v20 - 1;
        uint64_t v19 = *((void *)this + 5);
      }
      *(_DWORD *)(v19 + 28) = v20;
      if (*(void *)(*((void *)this + 5) + 8) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 8), "[dk] %s@%d:UnConfigured Keep Alive ID = %d\n");
      }
    }
    IOFreeData();
    if (++v11 == 3)
    {
      if (*(void *)(*((void *)this + 5) + 8) && CCLogStream::shouldLog()) {
        CCLogStream::logNoticeIf(*(CCLogStream **)(*((void *)this + 5) + 8), 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "unConfigureKeepAlives", 949, "unConfigureKeepAlives");
      }
      return v18;
    }
  }
  if (*(void *)(*((void *)this + 5) + 8) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 8), "[dk] %s@%d:No memory for keepAliveBuf\n", "unConfigureKeepAlives", 908);
  }
  return 12;
}

uint64_t AppleBCMWLANKeepAliveOffload::handleUnconfigureMkeepAlivesAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(*(void *)(result + 40) + 8);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = *(void *)(v3 + 40);
        uint64_t v6 = *(CCLogStream **)(v5 + 8);
        uint64_t v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 16) + 112))(*(void *)(v5 + 16), a3);
        return CCLogStream::logAlert(v6, "[dk] %s@%d: Error: Cannot unconfigure M Keep Alives: %s\n", "handleUnconfigureMkeepAlivesAsyncCallBack", 959, v7);
      }
    }
  }
  return result;
}

BOOL AppleBCMWLANKeepAliveOffload::didWakeReasonCauseHostWake(AppleBCMWLANKeepAliveOffload *this, int a2)
{
  return (a2 - 1) < 6;
}

const char *AppleBCMWLANKeepAliveOffload::getStringFromWakeReason(AppleBCMWLANKeepAliveOffload *this, int a2)
{
  uint64_t result = "Normal";
  switch(a2)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "No Response to Keep Alive";
      break;
    case 2:
      uint64_t result = "Ack bit not set";
      break;
    case 3:
      uint64_t result = "Unexpected TCP Flag";
      break;
    case 4:
      uint64_t result = "Ack Number invalid";
      break;
    case 5:
      uint64_t result = "Seq Number invalid";
      break;
    case 6:
      uint64_t result = "Data Wakeup";
      break;
    default:
      if (a2 == 255) {
        uint64_t result = "Unavailable";
      }
      else {
        uint64_t result = "Invalid Wake Reason";
      }
      break;
  }
  return result;
}

uint64_t AppleBCMWLANKeepAliveOffload::getTCPAliveOffloadParams(uint64_t a1, _DWORD *a2)
{
  if (a2)
  {
    a2[1] = *(_DWORD *)(*(void *)(a1 + 40) + 36);
    a2[2] = *(_DWORD *)(*(void *)(a1 + 40) + 40);
    a2[3] = *(_DWORD *)(*(void *)(a1 + 40) + 44);
    a2[4] = *(_DWORD *)(*(void *)(a1 + 40) + 48);
    a2[5] = *(_DWORD *)(*(void *)(a1 + 40) + 52);
    a2[6] = *(_DWORD *)(*(void *)(a1 + 40) + 56);
  }
  return 0;
}

uint64_t AppleBCMWLANKeepAliveOffload::setTCPAliveOffloadParams(uint64_t a1, _DWORD *a2)
{
  if (a2)
  {
    int v2 = a2[2];
    *(_DWORD *)(*(void *)(a1 + 40) + 36) = a2[1];
    *(_DWORD *)(*(void *)(a1 + 40) + 40) = v2;
    int v3 = a2[4];
    *(_DWORD *)(*(void *)(a1 + 40) + 44) = a2[3];
    *(_DWORD *)(*(void *)(a1 + 40) + 48) = v3;
    int v4 = a2[6];
    *(_DWORD *)(*(void *)(a1 + 40) + 52) = a2[5];
    *(_DWORD *)(*(void *)(a1 + 40) + 56) = v4;
  }
  return 0;
}

uint64_t AppleBCMWLANKeepAliveOffload::getTCPAliveOffloadDump(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    long long v3 = *(_OWORD *)(v2 + 60);
    long long v4 = *(_OWORD *)(v2 + 76);
    long long v5 = *(_OWORD *)(v2 + 92);
    *(_OWORD *)(a2 + 52) = *(_OWORD *)(v2 + 108);
    *(_OWORD *)(a2 + 36) = v5;
    *(_OWORD *)(a2 + 20) = v4;
    *(_OWORD *)(a2 + 4) = v3;
    long long v6 = *(_OWORD *)(v2 + 124);
    long long v7 = *(_OWORD *)(v2 + 140);
    long long v8 = *(_OWORD *)(v2 + 156);
    *(_OWORD *)(a2 + 116) = *(_OWORD *)(v2 + 172);
    *(_OWORD *)(a2 + 100) = v8;
    *(_OWORD *)(a2 + 84) = v7;
    *(_OWORD *)(a2 + 68) = v6;
    uint64_t v9 = *(void *)(a1 + 40);
    long long v10 = *(_OWORD *)(v9 + 60);
    long long v11 = *(_OWORD *)(v9 + 76);
    long long v12 = *(_OWORD *)(v9 + 92);
    *(_OWORD *)(a2 + 180) = *(_OWORD *)(v9 + 108);
    *(_OWORD *)(a2 + 164) = v12;
    *(_OWORD *)(a2 + 148) = v11;
    *(_OWORD *)(a2 + 132) = v10;
    long long v13 = *(_OWORD *)(v9 + 124);
    long long v14 = *(_OWORD *)(v9 + 140);
    long long v15 = *(_OWORD *)(v9 + 156);
    *(_OWORD *)(a2 + 244) = *(_OWORD *)(v9 + 172);
    *(_OWORD *)(a2 + 228) = v15;
    *(_OWORD *)(a2 + 212) = v14;
    *(_OWORD *)(a2 + 196) = v13;
    uint64_t v16 = (_DWORD *)(a2 + 272);
    for (uint64_t i = 320; i != 480; i += 16)
    {
      *((void *)v16 - 1) = *(void *)(*(void *)(a1 + 40) + i);
      *uint64_t v16 = *(char *)(*(void *)(a1 + 40) + i + 8);
      v16 += 6;
    }
  }
  return 0;
}

uint64_t AppleBCMWLANKeepAliveOffload::handleTKOEvent(uint64_t result, uint64_t a2)
{
  if (a2 && *(_DWORD *)(a2 + 8) == 5)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(result + 40);
    if (*(void *)(v3 + 8))
    {
      int shouldLog = CCLogStream::shouldLog();
      uint64_t v3 = *(void *)(v2 + 40);
      if (shouldLog)
      {
        CCLogStream::logNoticeIf(*(CCLogStream **)(v3 + 8), 0x8000000uLL, "[dk] %s@%d: Posting APPLE80211_M_TCPKA_TIMEOUT <%u>\n", "handleTKOEvent", 1525, 91);
        uint64_t v3 = *(void *)(v2 + 40);
      }
    }
    long long v5 = *(AppleBCMWLANCore **)(v3 + 16);
    return AppleBCMWLANCore::postMessageInfra(v5, 0x5Bu, 0, 0);
  }
  return result;
}

uint64_t AppleBCMWLANKeepAliveOffload::setTCPAliveEnable(uint64_t result, uint64_t a2)
{
  if (a2) {
    *(unsigned char *)(*(void *)(result + 40) + 481) = *(_DWORD *)(a2 + 4) != 0;
  }
  return result;
}

uint64_t AppleBCMWLANKeepAliveOffload::getTCPAliveEnable(uint64_t result, uint64_t a2)
{
  if (a2) {
    *(_DWORD *)(a2 + 4) = *(unsigned __int8 *)(*(void *)(result + 40) + 481);
  }
  return result;
}

uint64_t AppleBCMWLANKeepAliveOffload::programGARP(AppleBCMWLANKeepAliveOffload *this, int a2)
{
  __int16 v24 = 0;
  int v23 = 0;
  unsigned int FirmwareInterfaceVersion = AppleBCMWLANCore::getFirmwareInterfaceVersion(*(AppleBCMWLANCore **)(*((void *)this + 5)
                                                                                                + 16));
  Primaryuint64_t Interface = AppleBCMWLANCore::getPrimaryInterface(*(AppleBCMWLANCore **)(*((void *)this + 5) + 16));
  uint64_t v6 = *((void *)this + 5);
  if (PrimaryInterface)
  {
    if (AppleBCMWLANCore::isAssociated(*(AppleBCMWLANCore **)(v6 + 16)))
    {
      uint64_t v7 = IOMallocZeroData();
      if (v7)
      {
        uint64_t v8 = v7;
        if (FirmwareInterfaceVersion < 0x11)
        {
          *(_DWORD *)uint64_t v7 = 720897;
          *(_DWORD *)(v7 + 4) = a2 | 0x80000000;
          *(unsigned char *)(v7 + 10) = 1;
          *(_WORD *)(v7 + 8) = 64;
          long long v10 = (void *)(v7 + 11);
        }
        else
        {
          *(_DWORD *)uint64_t v7 = 983042;
          LODWORD(__src[0]) = 5;
          IOParseBootArgNumber("wlan.keepalive.retrycnt", __src, 4);
          __int16 v9 = __src[0];
          if (LODWORD(__src[0]) >= 5) {
            __int16 v9 = 5;
          }
          *(_WORD *)(v8 + 10) = v9;
          *(_DWORD *)(v8 + 4) = a2 | 0x80000000;
          *(unsigned char *)(v8 + 14) = 1;
          *(_WORD *)(v8 + 8) = 64;
          long long v10 = (void *)(v8 + 15);
        }
        if (AppleBCMWLANCore::getRouterMacAddress(*(void *)(*((void *)this + 5) + 16), (uint64_t)&v23))
        {
          uint64_t v11 = 3758097084;
        }
        else
        {
          *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
          __src[1] = v13;
          *(_OWORD *)__n = v13;
          __src[0] = v13;
          uint64_t ArpKeepAliveData = IO80211InfraInterface::getArpKeepAliveData();
          if (ArpKeepAliveData)
          {
            uint64_t v11 = ArpKeepAliveData;
            if (*(void *)(*((void *)this + 5) + 8) && CCLogStream::shouldLog()) {
              CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 8), "[dk] %s@%d:%s: Failed to get GARP keepalive data (%d)\n");
            }
          }
          else
          {
            memcpy(v10, __src, HIDWORD(__n[1]));
            IO80211HexdumpIf();
            if (FirmwareInterfaceVersion <= 0x10) {
              uint64_t v15 = 75;
            }
            else {
              uint64_t v15 = 79;
            }
            uint64_t v16 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 5) + 16) + 88))(*(void *)(*((void *)this + 5) + 16));
            if ((*(unsigned int (**)(uint64_t))(*(void *)v16 + 136))(v16))
            {
              int v20 = this;
              int v21 = AppleBCMWLANKeepAliveOffload::handleConfigureProgramGARPAsyncCallBack;
              uint64_t v22 = 0;
              uint64_t v17 = AppleBCMWLANCommander::sendIOVarSet(**((AppleBCMWLANCommander ***)this + 5), (uint64_t)"mkeep_alive");
            }
            else
            {
              uint64_t v18 = (AppleBCMWLANCommander *)**((void **)this + 5);
              int v20 = (AppleBCMWLANKeepAliveOffload *)v8;
              int v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v15;
              uint64_t v17 = AppleBCMWLANCommander::runIOVarSet(v18, (uint64_t)"mkeep_alive", (uint64_t)&v20, 0, 0);
            }
            uint64_t v11 = v17;
            uint64_t v19 = *(void *)(*((void *)this + 5) + 8);
            if (v11)
            {
              if (v19 && CCLogStream::shouldLog()) {
                CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 8), "[dk] %s@%d:Failed to Configure GARP Keep-ALive for ID %d\n");
              }
            }
            else
            {
              if (v19 && CCLogStream::shouldLog()) {
                CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 8), "[dk] %s@%d:Configured GARP Keep Alive ID = %d\n", "programGARP", 1651, 1);
              }
              uint64_t v11 = 0;
            }
          }
        }
        IOFreeData();
      }
      else
      {
        if (*(void *)(*((void *)this + 5) + 8) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 8), "[dk] %s@%d:No memory for mKeepAliveBuf\n", "programGARP", 1590);
        }
        return 12;
      }
    }
    else
    {
      return 6;
    }
  }
  else
  {
    uint64_t v11 = 3758097084;
    if (*(void *)(v6 + 8) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 8), "[dk] %s@%d:configureKeepAlives with infraSkywalkInterface is null \n", "programGARP", 1574);
    }
  }
  return v11;
}

uint64_t AppleBCMWLANKeepAliveOffload::handleConfigureProgramGARPAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(*(void *)(result + 40) + 8);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = *(void *)(v3 + 40);
        uint64_t v6 = *(CCLogStream **)(v5 + 8);
        uint64_t v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 16) + 112))(*(void *)(v5 + 16), a3);
        return CCLogStream::logAlert(v6, "[dk] %s@%d: Failed to Program GARP %s\n", "handleConfigureProgramGARPAsyncCallBack", 1660, v7);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANKeepAliveOffload::stopGARP(AppleBCMWLANKeepAliveOffload *this)
{
  unsigned int FirmwareInterfaceVersion = AppleBCMWLANCore::getFirmwareInterfaceVersion(*(AppleBCMWLANCore **)(*((void *)this + 5)
                                                                                                + 16));
  uint64_t v3 = IOMallocZeroData();
  if (v3)
  {
    long long v4 = (AppleBCMWLANKeepAliveOffload *)v3;
    if (FirmwareInterfaceVersion < 0x11)
    {
      *(void *)uint64_t v3 = 720897;
      *(unsigned char *)(v3 + 10) = 1;
      uint64_t v5 = 11;
    }
    else
    {
      *(void *)uint64_t v3 = 983042;
      *(unsigned char *)(v3 + 14) = 1;
      uint64_t v5 = 15;
    }
    *(_WORD *)(v3 + 8) = 0;
    uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 5) + 16) + 88))(*(void *)(*((void *)this + 5) + 16));
    if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 136))(v7))
    {
      uint64_t v11 = this;
      long long v12 = AppleBCMWLANKeepAliveOffload::handleConfigureStopGARPAsyncCallBack;
      uint64_t v13 = 0;
      uint64_t v8 = AppleBCMWLANCommander::sendIOVarSet(**((AppleBCMWLANCommander ***)this + 5), (uint64_t)"mkeep_alive");
    }
    else
    {
      __int16 v9 = (AppleBCMWLANCommander *)**((void **)this + 5);
      uint64_t v11 = v4;
      long long v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v5;
      uint64_t v8 = AppleBCMWLANCommander::runIOVarSet(v9, (uint64_t)"mkeep_alive", (uint64_t)&v11, 0, 0);
    }
    uint64_t v6 = v8;
    IOFreeData();
  }
  else
  {
    if (*(void *)(*((void *)this + 5) + 8) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 5) + 8), "[dk] %s@%d:No memory for keepAliveBuf\n", "stopGARP", 1687);
    }
    return 12;
  }
  return v6;
}

uint64_t AppleBCMWLANKeepAliveOffload::handleConfigureStopGARPAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(*(void *)(result + 40) + 8);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = *(void *)(v3 + 40);
        uint64_t v6 = *(CCLogStream **)(v5 + 8);
        uint64_t v7 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 16) + 112))(*(void *)(v5 + 16), a3);
        return CCLogStream::logAlert(v6, "[dk] %s@%d: Failed to Stop GARP %s\n", "handleConfigureStopGARPAsyncCallBack", 1727, v7);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANKeepAliveOffload::getCachedTCPAliveWakeReason(AppleBCMWLANKeepAliveOffload *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    return *(unsigned int *)(v1 + 484);
  }
  else {
    return 0;
  }
}

uint64_t AppleBCMWLANKeepAliveOffload::setCachedTCPAliveWakeReason(AppleBCMWLANKeepAliveOffload *this, uint64_t a2)
{
  uint64_t v2 = *((void *)this + 5);
  if (!v2) {
    return 0;
  }
  *(_DWORD *)(v2 + 484) = a2;
  return a2;
}

void _GLOBAL__sub_I_AppleBCMWLANKeepAliveOffload_cpp()
{
  kNullRange = 0;
}

uint64_t convertAppleBCMWLANReturnToString(int a1)
{
  unint64_t v1 = 0xFFFFFFFFFFFFE980;
  while (*(_DWORD *)((char *)&kMapping + v1 + 5760) != a1)
  {
    v1 += 16;
    if (!v1) {
      return 0;
    }
  }
  return *(void *)((char *)&kMapping + v1 + 5768);
}

uint64_t forEachAppleBCMWLANReturnCodes(uint64_t (*a1)(uint64_t, void, void), uint64_t a2)
{
  unint64_t v4 = 0xFFFFFFFFFFFFE980;
  do
  {
    uint64_t result = a1(a2, *(unsigned int *)((char *)&kMapping + v4 + 5760), *(void *)((char *)&kMapping + v4 + 5768));
    v4 += 16;
  }
  while (v4);
  return result;
}

uint64_t convertAppleBCMWLANReturnToErrno(int a1)
{
  unint64_t v1 = 0xFFFFFFFFFFFFE980;
  while (*(_DWORD *)((char *)&kMapping + v1 + 5760) != a1)
  {
    v1 += 16;
    if (!v1) {
      return 0;
    }
  }
  return *(unsigned int *)((char *)&kMapping + v1 + 5764);
}

OSObject *AppleBCMWLANChipManagerPCIe4377::withChip(AppleBCMWLANChipManagerPCIe4377 *this, uint64_t a2)
{
  uint64_t v6 = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANChipManagerPCIe4377MetaClass, &v6)) {
    return 0;
  }
  unint64_t v4 = v6;
  if (v6
    && (((uint64_t (*)(OSObject *, AppleBCMWLANChipManagerPCIe4377 *, uint64_t))v6->OSMetaClassBase::__vftable[4].isEqualTo)(v6, this, a2) & 1) == 0)
  {
    ((void (*)(OSObject *))v4->release)(v4);
    return 0;
  }
  return v4;
}

BOOL AppleBCMWLANChipManagerPCIe4377::initWithChip(OSObject *this, int a2)
{
  BOOL result = AppleBCMWLANChipManagerPCIe::init(this);
  if (result)
  {
    AppleBCMWLANChipManagerPCIe::setOTPCoreID((uint64_t)this, 0);
    AppleBCMWLANChipManagerPCIe::setAWDLSupported((AppleBCMWLANChipManagerPCIe *)this, 1);
    AppleBCMWLANChipManagerPCIe::setChipNumber((uint64_t)this, a2);
    AppleBCMWLANChipManagerPCIe::setCoreCount((uint64_t)this, 9);
    AppleBCMWLANChipManagerPCIe::setCoreRegionList((uint64_t)this, (uint64_t)&kBCOM4377ChipCores);
    AppleBCMWLANChipManagerPCIe::setWrapperCount((uint64_t)this, 17);
    AppleBCMWLANChipManagerPCIe::setWrapperRegionList((uint64_t)this, (uint64_t)&kBCOM4377ChipWrappers);
    AppleBCMWLANChipManagerPCIe::setMemoryCount((uint64_t)this, 7);
    AppleBCMWLANChipManagerPCIe::setMemoryRegionList((uint64_t)this, (uint64_t)&kBCOM4377ChipMemories);
    AppleBCMWLANChipManagerPCIe::setBackplaneWindowCount((uint64_t)this, 8);
    AppleBCMWLANChipManagerPCIe::setBackplaneWindows((uint64_t)this, (uint64_t)&kBCOM4377ChipBackplaneWindows);
    AppleBCMWLANChipManagerPCIe::setOTPCoreID((uint64_t)this, 8);
    AppleBCMWLANChipManagerPCIe::setUserOTPRange((uint64_t)this, (uint64_t)&kBCOM4377ChipUserOTP);
    AppleBCMWLANChipManagerPCIe::setChipOTPRange((uint64_t)this, (uint64_t)&kBCOM4377ChipOTP);
    AppleBCMWLANChipManagerPCIe::setCoreIDTable((uint64_t)this, kBCOM4377CoreIDTable);
    AppleBCMWLANChipManagerPCIe::setUCodeRegionInfo((uint64_t)this, (uint64_t)&kBCOM4377UCodeSCRRegionInfo, 0);
    AppleBCMWLANChipManagerPCIe::setUCodeRegionInfo((uint64_t)this, (uint64_t)&kBCOM4377UCodeSHMRegionInfo, 1);
    AppleBCMWLANChipManagerPCIe::setConfigSpaceSaveRange((uint64_t)this, (uint64_t)&kBCOM4377ChipConfigSpaceStateTable);
    AppleBCMWLANChipManagerPCIe::setConfigSpaceSaveCount((uint64_t)this, 3);
    AppleBCMWLANChipManagerPCIe::setMemoryRAMAddress((uint64_t)this, 1507328);
    AppleBCMWLANChipManagerPCIe::setPCIeHeaderLength((uint64_t)this, 256);
    AppleBCMWLANChipManagerPCIe::setSROMVersion((uint64_t)this, 16);
    AppleBCMWLANChipManagerPCIe::setSROMWordCount((uint64_t)this, 1024);
    AppleBCMWLANChipManagerPCIe::setSROMSignature((uint64_t)this, 17271);
    int SROMWordCount = AppleBCMWLANChipManagerPCIe::getSROMWordCount((AppleBCMWLANChipManagerPCIe *)this);
    AppleBCMWLANChipManagerPCIe::setSROMoffsetVersion((uint64_t)this, 2 * SROMWordCount - 2);
    AppleBCMWLANChipManagerPCIe::setSROMoffsetSignature((uint64_t)this, 224);
    AppleBCMWLANChipManagerPCIe::setSROMoffsetMacAddress((uint64_t)this, 226);
    AppleBCMWLANChipManagerPCIe::setSROMoffsetSKU((uint64_t)this, 236);
    AppleBCMWLANChipManagerPCIe::setNotSplitArchitecture((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setBootMSIUnsupported((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setMultiFunctionChip((uint64_t)this, 0);
    AppleBCMWLANChipManagerPCIe::setSafeToCaptureSoCRAM((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setHMAPSupported((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setHMAPBaseAddress((uint64_t)this, 1344);
    AppleBCMWLANChipManagerPCIe::sethostWakeToggleNotConfigured((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setTrapBeforeFLRUnSupported((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setASPMWorkaround((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setPCIeBootMinPollingDelay((uint64_t)this, 200);
    int v11 = 0;
    while (1)
    {
      uint64_t BackplaneWindows = AppleBCMWLANChipManagerPCIe::getBackplaneWindows((AppleBCMWLANChipManagerPCIe *)this);
      unsigned int PacketCount = AppleBCMWLANPCIeFlowQueue::getPacketCount((AppleBCMWLANPCIeFlowQueue *)this);
      if (!AppleBCMWLANChipManagerPCIe::findRemappableWindow(BackplaneWindows, PacketCount, 0, &v11)) {
        break;
      }
      AppleBCMWLANChipManagerPCIe::incrementCoreRemapperCount((uint64_t)this);
    }
    int v11 = 0;
    while (1)
    {
      uint64_t v8 = AppleBCMWLANChipManagerPCIe::getBackplaneWindows((AppleBCMWLANChipManagerPCIe *)this);
      unsigned int v9 = AppleBCMWLANPCIeFlowQueue::getPacketCount((AppleBCMWLANPCIeFlowQueue *)this);
      if (!AppleBCMWLANChipManagerPCIe::findRemappableWindow(v8, v9, 1, &v11)) {
        break;
      }
      AppleBCMWLANChipManagerPCIe::incrementWrapperRemapperCount((uint64_t)this);
    }
    long long v10 = OSDictionary::withCapacity(0x20u);
    return AppleBCMWLANChipManagerPCIe::setChipProvisioningData((AppleBCMWLANChipManagerPCIe *)this, v10);
  }
  return result;
}

BOOL non-virtual thunk to'AppleBCMWLANChipManagerPCIe4377::initWithChip(AppleBCMWLANChipManagerPCIe4377 *this, int a2)
{
  return AppleBCMWLANChipManagerPCIe4377::initWithChip((OSObject *)((char *)this - 56), a2);
}

uint64_t AppleBCMWLANChipManagerPCIe4377::prepareHardware(AppleBCMWLANChipManagerPCIe4377 *this, AppleBCMWLANChipConfigSpace *a2, AppleBCMWLANChipBackplane *a3)
{
  uint64_t v3 = 3758097090;
  unsigned int v6 = 0;
  if (a2 && a3)
  {
    if (AppleBCMWLANChipBackplane::readGCICoreReg32(a3, 0xE64u, &v6))
    {
      return 3758097098;
    }
    else
    {
      unsigned int v6 = v6 & 0xFFFFFFFC | 1;
      AppleBCMWLANChipBackplane::writeGCICoreReg32(a3, 0xE64u, v6);
      return 0;
    }
  }
  return v3;
}

uint64_t AppleBCMWLANChipManagerPCIe4377::checkHardware(AppleBCMWLANChipManagerPCIe4377 *this, AppleBCMWLANChipConfigSpace *a2, AppleBCMWLANChipBackplane *a3)
{
  unsigned int v6 = 0;
  uint64_t result = 3758097090;
  if (a2 && a3)
  {
    AppleBCMWLANChipBackplane::writeGCICoreReg32(a3, 0x40u, 4u);
    if (AppleBCMWLANChipBackplane::readGCICoreReg32(a3, 0x204u, &v6) || (v6 & 0x4000) != 0)
    {
      return 3758097098;
    }
    else
    {
      int v5 = AppleBCMWLANChipBackplane::readGCICoreReg32(a3, 0x40u, &v6);
      uint64_t result = 3758097098;
      if (!v5)
      {
        if (v6 == 4) {
          return 0;
        }
        else {
          return 3758097098;
        }
      }
    }
  }
  return result;
}

void _GLOBAL__sub_I_AppleBCMWLANChipManagerPCIe4377_cpp()
{
  kNullRange = 0;
}

uint64_t AppleBCMWLANBusInterface::validateChipImage()
{
  return 1;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterface::validateChipImage()
{
  return 1;
}

uint64_t AppleBCMWLANBusInterface::init(IOService *this)
{
  IOLog("AppleBCMWLANBusInterface::init start\n");
  uint64_t result = IOService::init(this);
  if (result)
  {
    uint64_t result = IOMallocZeroTyped();
    *(void *)&this[1].refcount = result;
    if (result)
    {
      IOLog("AppleBCMWLANBusInterface::init complete\n");
      return 1;
    }
  }
  return result;
}

void AppleBCMWLANBusInterface::free(IOService *this)
{
  uint64_t v2 = *(void **)&this[1].refcount;
  if (v2)
  {
    memset_s(v2, 0x2B0uLL, 0, 0x2B0uLL);
    uint64_t v3 = *(void **)&this[1].refcount;
    if (v3)
    {
      IOFree(v3, 0x2B0uLL);
      *(void *)&this[1].refcount = 0;
    }
  }
  IOService::free(this);
}

uint64_t AppleBCMWLANBusInterface::captureRequestCallback(uint64_t a1, const char *a2, _OWORD *a3)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if (*(unsigned char *)(v4 + 684))
  {
    uint64_t v10 = 3758097109;
    if (*(void *)(v4 + 16) && CCLogStream::shouldLog()) {
      CCLogStream::logEmergency(*(CCLogStream **)(*(void *)(a1 + 56) + 16), "[dk] %s@%d:captureRequestCallbackActive is true", "captureRequestCallback", 173);
    }
  }
  else
  {
    *(unsigned char *)(v4 + 684) = 1;
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = *(void *)(v5 + 16);
    if (*(void *)v5)
    {
      if (v6)
      {
        int shouldLog = CCLogStream::shouldLog();
        uint64_t v5 = *(void *)(a1 + 56);
        if (shouldLog)
        {
          CCLogStream::logEmergency(*(CCLogStream **)(v5 + 16), "[dk] %s@%d:Calling captureRequestCallback!", "captureRequestCallback", 178);
          uint64_t v5 = *(void *)(a1 + 56);
        }
      }
      uint64_t v10 = AppleBCMWLANCore::captureRequestCallback(*(void **)v5, a2, a3);
    }
    else
    {
      uint64_t v10 = 3758097109;
      if (v6 && CCLogStream::shouldLog()) {
        CCLogStream::logEmergency(*(CCLogStream **)(*(void *)(a1 + 56) + 16), "[dk] %s@%d:NO-OP!", "captureRequestCallback", 181);
      }
    }
    *(unsigned char *)(*(void *)(a1 + 56) + 684) = 0;
  }
  return v10;
}

uint64_t AppleBCMWLANBusInterface::getLogger(AppleBCMWLANBusInterface *this)
{
  return *(void *)(*((void *)this + 7) + 16);
}

uint64_t AppleBCMWLANBusInterface::initDebug(IOService *this)
{
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t v7 = 0;
  Provider = (IOService *)IOService::GetProvider(this);
  if (checkAcquireDataPropertyNotEmpty(Provider, "instance-id", &v7, 4uLL, 1uLL, "IOService"))
  {
    uint64_t BytesNoCopy = OSData::getBytesNoCopy(v7, 0, 4uLL);
    if (BytesNoCopy) {
      *(_DWORD *)(*(void *)&this[1].refcount + 96) = *BytesNoCopy;
    }
    if (v7)
    {
      ((void (*)(OSData *))v7->release)(v7);
      uint64_t v7 = 0;
    }
  }
  else
  {
    *(_DWORD *)(*(void *)&this[1].refcount + 96) = 0;
  }
  memset(__str, 170, sizeof(__str));
  snprintf(__str, 0x10uLL, "%x", *(_DWORD *)(*(void *)&this[1].refcount + 96));
  uint64_t v4 = *(void *)&this[1].refcount;
  *(void *)&long long v8 = __str;
  *((void *)&v8 + 1) = v4 + 536;
  *(void *)&long long v9 = _captureCallback;
  *((void *)&v9 + 1) = _setFlagsCallback;
  uint64_t v10 = v4 + 408;
  queue = 0;
  OSObject::CopyDispatchQueue(this, "Default", &queue, 0);
  *(void *)(*(void *)&this[1].refcount + 88) = AppleBCMWLANLogger::withDriverAndOptions((uint64_t)this, (uint64_t)&v8, (uint64_t)queue);
  if (*(void *)(*(void *)&this[1].refcount + 88)) {
    return 0;
  }
  else {
    return 3758097084;
  }
}

uint64_t _captureCallback(const OSMetaClassBase *a1, const char *a2, _OWORD *a3)
{
  uint64_t v5 = OSMetaClassBase::safeMetaCast(a1, (const OSMetaClass *)gAppleBCMWLANBusInterfaceMetaClass);
  uint64_t result = IOLog("%s:%d Problem reported from corecapture\n", "_captureCallback", 157);
  if (v5)
  {
    return AppleBCMWLANBusInterface::captureRequestCallback((uint64_t)v5, a2, a3);
  }
  return result;
}

OSMetaClassBase *_setFlagsCallback(const OSObject *a1, unint64_t a2)
{
  uint64_t result = OSMetaClassBase::safeMetaCast(a1, (const OSMetaClass *)gAppleBCMWLANBusInterfaceMetaClass);
  if (result)
  {
    uint64_t result = **(OSMetaClassBase ***)&result[2].refcount;
    if (result)
    {
      return (OSMetaClassBase *)AppleBCMWLANCore::setLogFlagsCallback((AppleBCMWLANCore *)result, a2);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterface::initDebug(IOService *this)
{
  return AppleBCMWLANBusInterface::initDebug(this - 1);
}

uint64_t AppleBCMWLANBusInterface::destroyDebug(AppleBCMWLANBusInterface *this)
{
  uint64_t v2 = *((void *)this + 7);
  uint64_t v3 = *(void *)(v2 + 88);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    *(void *)(*((void *)this + 7) + 88) = 0;
    uint64_t v2 = *((void *)this + 7);
  }
  uint64_t v4 = *(void *)(v2 + 16);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
    *(void *)(*((void *)this + 7) + 16) = 0;
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterface::destroyDebug(AppleBCMWLANBusInterface *this)
{
  return 0;
}

uint64_t AppleBCMWLANBusInterface::Start_Impl(IOService *this, IOService *a2)
{
  if (((unsigned int (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[12].free)(this))
  {
    ClassNameHelper = (const char *)getClassNameHelper(this);
    IOLog("%s::%s() unable to create logger\n", ClassNameHelper, "Start_Impl");
    return 3758097084;
  }
  else
  {
    *(void *)(*(void *)&this[1].refcount + 16) = *(void *)(*(void *)&this[1].refcount + 552);
    (*(void (**)(void))(**(void **)(*(void *)&this[1].refcount + 16) + 8))(*(void *)(*(void *)&this[1].refcount + 16));
    if (*(void *)(*(void *)&this[1].refcount + 16) && CCLogStream::shouldLog()) {
      CCLogStream::logEmergency(*(CCLogStream **)(*(void *)&this[1].refcount + 16), "[dk] %s@%d:Bus Interface start", "Start_Impl", 287);
    }
    return IOService::Start(this, a2, (OSDispatchMethod)&IOService::_Dispatch);
  }
}

uint64_t AppleBCMWLANBusInterface::Stop_Impl(IOService *this, IOService *a2)
{
  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[13].getMetaClass)(this);
  return IOService::Stop(this, a2, (OSDispatchMethod)&IOService::_Dispatch);
}

OSMetaClass_vtbl *AppleBCMWLANBusInterface::freeResources(OSObject *this)
{
  p_meta = &this[1].meta;
  meta = this[1].meta;
  if (meta->refcount) {
    AppleBCMWLANBusInterface::freeResources(this, (uint64_t)&this[1].meta);
  }
  uint64_t v3 = meta[2].meta;
  if (v3)
  {
    ((void (*)(OSMetaClass *))v3->release)(v3);
    (*p_meta)[2].meta = 0;
    meta = *p_meta;
  }
  uint64_t v4 = *(void *)&meta[2].refcount;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
    *(void *)&(*p_meta)[2].refcount = 0;
    meta = *p_meta;
  }
  uint64_t v5 = meta[2].__vftable;
  if (v5)
  {
    (*((void (**)(OSMetaClass_vtbl *))v5->getMetaClass + 2))(v5);
    (*p_meta)[2].__vftable = 0;
    meta = *p_meta;
  }
  metaClassPrivate = meta[1].metaClassPrivate;
  if (metaClassPrivate)
  {
    (*(void (**)(OSMetaClassPrivate *))(*(void *)metaClassPrivate + 16))(metaClassPrivate);
    (*p_meta)[1].metaClassPrivate = 0;
    meta = *p_meta;
  }
  uint64_t result = meta->__vftable;
  if (meta->__vftable)
  {
    uint64_t result = (OSMetaClass_vtbl *)(*((uint64_t (**)(OSMetaClass_vtbl *))result->getMetaClass + 2))(result);
    (*p_meta)->__vftable = 0;
  }
  return result;
}

uint64_t AppleBCMWLANBusInterface::registerDriver(AppleBCMWLANBusInterface *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *((void *)this + 7);
  if (*(void *)(v6 + 16))
  {
    int shouldLog = CCLogStream::shouldLog();
    uint64_t v6 = *((void *)this + 7);
    if (shouldLog)
    {
      CCLogStream::logNoticeIf(*(CCLogStream **)(v6 + 16), 0x200000uLL, "[dk] %s@%d: %lu\n", "registerDriver", 356, *(unsigned int *)(v6 + 8));
      uint64_t v6 = *((void *)this + 7);
    }
  }
  int v8 = *(_DWORD *)(v6 + 8);
  if (!v8)
  {
    *(void *)uint64_t v6 = a2;
    (*(void (**)(void))(***((void ***)this + 7) + 8))(**((void **)this + 7));
    *(void *)(*((void *)this + 7) + 584) = a3;
    *(unsigned char *)(*((void *)this + 7) + 576) = 1;
    (*(void (**)(AppleBCMWLANBusInterface *))(*(void *)this + 696))(this);
    uint64_t v6 = *((void *)this + 7);
    int v8 = *(_DWORD *)(v6 + 8);
  }
  *(_DWORD *)(v6 + 8) = v8 + 1;
  if (**((void **)this + 7)) {
    AppleBCMWLANBusInterface::SendBootPendingEvents(this);
  }
  return 0;
}

AppleBCMWLANBusInterface *AppleBCMWLANBusInterface::SendBootPendingEvents(AppleBCMWLANBusInterface *this)
{
  unint64_t v1 = this;
  uint64_t v2 = 0;
  uint64_t v3 = 120;
  do
  {
    for (uint64_t i = 0; i != 12; ++i)
    {
      if (*(void *)(*((void *)v1 + 7) + v3 + 8 * i)) {
        this = (AppleBCMWLANBusInterface *)AppleBCMWLANBusInterface::sendBootCheckPointToCoreAnalytics(v1, v2, i, 0, 1);
      }
    }
    ++v2;
    v3 += 96;
  }
  while (v2 != 3);
  return this;
}

uint64_t AppleBCMWLANBusInterface::unregisterDriver(void *a1, const void *a2)
{
  uint64_t v3 = a1[7];
  if (*(void *)(v3 + 16))
  {
    int shouldLog = CCLogStream::shouldLog();
    uint64_t v3 = a1[7];
    if (shouldLog)
    {
      CCLogStream::logAlert(*(CCLogStream **)(v3 + 16), "[dk] %s@%d:enter, this[%p] driver[%p] count[%lu]\n", "unregisterDriver", 402, a1, a2, *(unsigned int *)(v3 + 8));
      uint64_t v3 = a1[7];
    }
  }
  --*(_DWORD *)(v3 + 8);
  uint64_t v6 = a1[7];
  if (!*(_DWORD *)(v6 + 8))
  {
    *(unsigned char *)(v6 + 576) = 0;
    *(void *)(a1[7] + 584) = 0;
    uint64_t v7 = *(void *)a1[7];
    if (v7)
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
      *(void *)a1[7] = 0;
    }
    (*(void (**)(void *))(*a1 + 704))(a1);
  }
  return 0;
}

uint64_t AppleBCMWLANBusInterface::parseOTPData(AppleBCMWLANBusInterface *this, const OSData *a2, OSObject *a3, int (*a4)(OSObject *, unsigned __int8, unsigned __int8, const void *, void *), void *a5)
{
  if (!a2)
  {
    uint64_t v15 = 3758097090;
    if (*(void *)(*((void *)this + 7) + 16) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 7) + 16), "[dk] %s@%d:Invalid OTP data\n", "parseOTPData", 477);
    }
    return v15;
  }
  uint64_t BytesNoCopy = OSData::getBytesNoCopy(a2);
  unint64_t Length = OSData::getLength(a2);
  if (!Length) {
    return 0;
  }
  uint64_t v16 = this;
  unint64_t v11 = 0;
  while (1)
  {
    if (!BytesNoCopy[v11])
    {
      ++v11;
      goto LABEL_11;
    }
    if (BytesNoCopy[v11] == 255) {
      break;
    }
    if (v11 + 2 > Length)
    {
      uint64_t v15 = 3758097115;
      if (*(void *)(*((void *)v16 + 7) + 16) && CCLogStream::shouldLog()) {
        CCLogStream::logCrit(*(CCLogStream **)(*((void *)v16 + 7) + 16), "[dk] %s@%d: %llu-Error! No space for link of 0x%02X (needed %llu, remaining %llu).\n");
      }
      return v15;
    }
    unint64_t v12 = BytesNoCopy[v11 + 1] + 2 + v11;
    if (v12 > Length)
    {
      uint64_t v15 = 3758097115;
      if (*(void *)(*((void *)v16 + 7) + 16) && CCLogStream::shouldLog()) {
        CCLogStream::logCrit(*(CCLogStream **)(*((void *)v16 + 7) + 16), "[dk] %s@%d: %llu-Error! No space for body of 0x%02X (needed %llu, remaining %llu).\n");
      }
      return v15;
    }
    uint64_t v13 = ((uint64_t (*)(OSObject *, void))a4)(a3, BytesNoCopy[v11]);
    unint64_t v11 = v12;
    if (v13) {
      return v13;
    }
LABEL_11:
    if (v11 >= Length) {
      return 0;
    }
  }
  if (*(void *)(*((void *)v16 + 7) + 16) && CCLogStream::shouldLog()) {
    CCLogStream::logNoticeIf(*(CCLogStream **)(*((void *)v16 + 7) + 16), 0x80uLL, "[dk] %s@%d:%llu - End of OTP 0x%02X.\n", "parseOTPData", 491, v11, 255);
  }
  return 0;
}

uint64_t AppleBCMWLANBusInterface::parseOTPTuple(AppleBCMWLANBusInterface *this, int a2, uint64_t a3, const void *a4, void *a5)
{
  int v5 = a3;
  if (a2 == 21)
  {
    if (a3 > 6)
    {
      (*(void (**)(AppleBCMWLANBusInterface *, uint64_t, uint64_t, const void *, void *))(*(void *)this
                                                                                                 + 712))(this, 21, a3, a4, a5);
      uint64_t v7 = *((void *)this + 7);
      if (*(void *)(v7 + 16))
      {
        int shouldLog = CCLogStream::shouldLog();
        uint64_t v7 = *((void *)this + 7);
        if (shouldLog)
        {
          unint64_t v12 = *(CCLogStream **)(v7 + 16);
          CStringNoCopy = OSString::getCStringNoCopy(*(const OSString **)(v7 + 56));
          CCLogStream::logInfoIf(v12, 0x80uLL, "[dk] %s@%d:Manufacturer: \"%s\"\n", "parseOTPTuple", 546, CStringNoCopy);
          uint64_t v7 = *((void *)this + 7);
        }
      }
      if (*(void *)(v7 + 16))
      {
        int v9 = CCLogStream::shouldLog();
        uint64_t v7 = *((void *)this + 7);
        if (v9)
        {
          long long v14 = *(CCLogStream **)(v7 + 16);
          uint64_t v15 = OSString::getCStringNoCopy(*(const OSString **)(v7 + 64));
          CCLogStream::logInfoIf(v14, 0x80uLL, "[dk] %s@%d:Product:      \"%s\"\n", "parseOTPTuple", 547, v15);
          uint64_t v7 = *((void *)this + 7);
        }
      }
      if (*(void *)(v7 + 16))
      {
        int v10 = CCLogStream::shouldLog();
        uint64_t v7 = *((void *)this + 7);
        if (v10)
        {
          uint64_t v16 = *(CCLogStream **)(v7 + 16);
          uint64_t v17 = OSString::getCStringNoCopy(*(const OSString **)(v7 + 72));
          CCLogStream::logInfoIf(v16, 0x80uLL, "[dk] %s@%d:ProductInfo0: \"%s\"\n", "parseOTPTuple", 548, v17);
          uint64_t v7 = *((void *)this + 7);
        }
      }
      if (*(void *)(v7 + 16) && CCLogStream::shouldLog())
      {
        uint64_t v18 = *((void *)this + 7);
        uint64_t v19 = *(CCLogStream **)(v18 + 16);
        OSString::getCStringNoCopy(*(const OSString **)(v18 + 80));
        CCLogStream::logInfoIf(v19, 0x80uLL, "[dk] %s@%d:ProductInfo1: \"%s\"\n");
      }
    }
    else if (*(void *)(*((void *)this + 7) + 16) && CCLogStream::shouldLog())
    {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 7) + 16), "[dk] %s@%d: dropping invalid Version tuple 0x%02X (size %u, expected >= %d)\n", "parseOTPTuple", 541, 21, v5, 7);
    }
  }
  else if (*(void *)(*((void *)this + 7) + 16) && CCLogStream::shouldLog())
  {
    CCLogStream::logInfoIf(*(CCLogStream **)(*((void *)this + 7) + 16), 0x80uLL, "[dk] %s@%d: Skipping OTP Tuple 0x%02X, size %u\n");
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterface::parseOTPTuple(AppleBCMWLANBusInterface *this, int a2, uint64_t a3, const void *a4, void *a5)
{
  return 0;
}

const char *AppleBCMWLANBusInterface::stringFromReturn(IOService *this, IOService *a2)
{
  int v2 = (int)a2;
  if (a2 >> 14 == 233470)
  {
    return (const char *)convertAppleBCMWLANReturnToString((int)a2);
  }
  else if (IOService::GetProvider(this))
  {
    Provider = (IOService *)IOService::GetProvider(this);
    return (const char *)IOService::StringFromReturn(Provider, v2);
  }
  else
  {
    return "NULL";
  }
}

uint64_t AppleBCMWLANBusInterface::errnoFromReturn(AppleBCMWLANBusInterface *this, uint64_t a2)
{
  if (a2 >> 14 == 233470) {
    return convertAppleBCMWLANReturnToErrno(a2);
  }
  switch(a2)
  {
    case 0xE00002BC:
    case 0xE00002BF:
    case 0xE00002C9:
    case 0xE00002CA:
    case 0xE00002CB:
    case 0xE00002D4:
    case 0xE00002DA:
    case 0xE00002DC:
    case 0xE00002DF:
    case 0xE00002E0:
    case 0xE00002E6:
    case 0xE00002E7:
    case 0xE00002E8:
    case 0xE00002EC:
      goto LABEL_4;
    case 0xE00002BD:
    case 0xE00002BE:
    case 0xE00002DE:
      a2 = 12;
      break;
    case 0xE00002C0:
    case 0xE00002D1:
    case 0xE00002D9:
    case 0xE00002E4:
    case 0xE00002E5:
      a2 = 6;
      break;
    case 0xE00002C1:
    case 0xE00002C3:
    case 0xE00002C4:
    case 0xE00002C5:
    case 0xE00002CD:
    case 0xE00002CE:
      a2 = 13;
      break;
    case 0xE00002C2:
    case 0xE00002C6:
    case 0xE00002D0:
    case 0xE00002EA:
      a2 = 22;
      break;
    case 0xE00002C7:
      a2 = 45;
      break;
    case 0xE00002C8:
      a2 = 14;
      break;
    case 0xE00002CC:
      a2 = 77;
      break;
    case 0xE00002CF:
      a2 = 30;
      break;
    case 0xE00002D2:
    case 0xE00002DD:
      a2 = 17;
      break;
    case 0xE00002D3:
      a2 = 88;
      break;
    case 0xE00002D5:
    case 0xE00002D7:
    case 0xE00002D8:
    case 0xE00002EB:
    case 0xE00002ED:
      a2 = 16;
      break;
    case 0xE00002D6:
      a2 = 60;
      break;
    case 0xE00002DB:
      a2 = 28;
      break;
    case 0xE00002E1:
      a2 = 40;
      break;
    case 0xE00002E2:
      a2 = 1;
      break;
    case 0xE00002E3:
      a2 = 82;
      break;
    case 0xE00002E9:
      a2 = 83;
      break;
    default:
      if (a2) {
LABEL_4:
      }
        a2 = 5;
      break;
  }
  return a2;
}

uint64_t AppleBCMWLANBusInterface::isIOKitModePreferred(AppleBCMWLANBusInterface *this)
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterface::isIOKitModePreferred(AppleBCMWLANBusInterface *this)
{
  return 0;
}

BOOL AppleBCMWLANBusInterface::isIOKitEnvironment(OSObject *this)
{
  if (((unsigned int (*)(OSObject *))this->OSMetaClassBase::__vftable[15].getMetaClass)(this))
  {
    ClassNameHelper = (const char *)getClassNameHelper(this);
    IOLog("%s::%s() WLAN Active Driver mode from Target-type IOKit\n", ClassNameHelper, "isIOKitEnvironment");
    return 1;
  }
  else
  {
    int v9 = 0;
    int v10 = 1;
    if (IOParseBootArgNumber("-restore", &v9, 4))
    {
      int v10 = 0;
      uint64_t v4 = (const char *)getClassNameHelper(this);
      IOLog("%s::%s() WLAN Active Driver IOKit mode, Forced '-restore' option\n", v4, "isIOKitEnvironment");
    }
    if (IOParseBootArgNumber("wlan.dk", &v10, 4))
    {
      int v5 = (const char *)getClassNameHelper(this);
      if (v10) {
        uint64_t v6 = "DriverKit";
      }
      else {
        uint64_t v6 = "IOKit";
      }
      IOLog("%s::%s() WLAN Active Driver mode from boot-args %s\n", v5, "isIOKitEnvironment", v6);
    }
    uint64_t v7 = (const char *)getClassNameHelper(this);
    if (v10) {
      int v8 = "DriverKit";
    }
    else {
      int v8 = "IOKit";
    }
    IOLog("%s::%s() WLAN Active Driver mode %s\n", v7, "isIOKitEnvironment", v8);
    return v10 == 0;
  }
}

BOOL non-virtual thunk to'AppleBCMWLANBusInterface::isIOKitEnvironment(AppleBCMWLANBusInterface *this)
{
  return AppleBCMWLANBusInterface::isIOKitEnvironment((OSObject *)((char *)this - 48));
}

BOOL AppleBCMWLANBusInterface::isAbortInit(AppleBCMWLANBusInterface *this)
{
  char v4 = 0;
  BOOL v1 = IOParseBootArgNumber("wlan.debug.abort-init", &v4, 1);
  if (v4) {
    BOOL v2 = v1;
  }
  else {
    BOOL v2 = 0;
  }
  return v4 == 2 && v2;
}

uint64_t AppleBCMWLANBusInterface::reportInitFailure(uint64_t a1, IOService *a2, uint64_t value, int a4)
{
  unsigned __int8 v5 = value;
  OSNumberPtr v8 = OSNumber::withNumber(value, 0x20uLL);
  setPropertyHelper(a2, "com.apple.wlan.init_failure", v8);
  if (v8) {
    ((void (*)(OSNumberPtr))v8->release)(v8);
  }
  int v20 = -1431655766;
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v18 = v9;
  long long v19 = v9;
  long long v16 = v9;
  long long v17 = v9;
  *(_OWORD *)__str = v9;
  long long v15 = v9;
  int v10 = (const char *)(*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 104))(a1, v5 | 0xE3FF9000);
  snprintf(__str, 0x64uLL, "%s-line %d", v10, a4);
  IOLog("AppleBCMWLANBusInterface init failed: %s\n", __str);
  unint64_t v11 = (AppleOLYHAL *)OSString::withCString(__str);
  uint64_t result = AppleOLYHAL::reportInitFailureDK(v11, v12);
  if (result) {
    return IOLog("AppleBCMWLANBusInterface: could not set failure string property into wlan nub!\n");
  }
  return result;
}

uint64_t AppleBCMWLANBusInterface::sendCCMissingFileInfoToCoreAnalytics(AppleBCMWLANBusInterface *this, OSString *a2, OSString *a3)
{
  OSStringPtr v6 = OSString::withCString("com.apple.CoreCapture.MissingLogFiles");
  uint64_t v7 = v6;
  if (a2 && a3)
  {
    if (!v6)
    {
      ((void (*)(OSString *))a2->release)(a2);
LABEL_13:
      ((void (*)(OSString *))a3->release)(a3);
      return 0;
    }
    values = a3;
    keys = a2;
    a3 = (OSString *)OSDictionary::withObjects((const OSObject **)&values, (const OSObject **)&keys, 1u, 0);
    if (keys)
    {
      ((void (*)(OSObject *))keys->release)(keys);
      keys = 0;
    }
    if (values)
    {
      ((void (*)(OSObject *))values->release)(values);
      values = 0;
    }
    if (IOService::CoreAnalyticsSendEvent(**((IOService ***)this + 7), 0, v7, (OSDictionary *)a3, 0)
      && *(void *)(*((void *)this + 7) + 16)
      && CCLogStream::shouldLog())
    {
      long long v9 = *(CCLogStream **)(*((void *)this + 7) + 16);
      CStringNoCopy = OSString::getCStringNoCopy(v7);
      CCLogStream::logEmergency(v9, "[dk] %s@%d:Failed to send CoreAnalytics CoreAnalyticsSendEvent for event %s", "sendCCMissingFileInfoToCoreAnalytics", 819, CStringNoCopy);
    }
    ((void (*)(OSString *))v7->release)(v7);
    if (a3) {
      goto LABEL_13;
    }
  }
  else
  {
    if (a2) {
      ((void (*)(OSString *))a2->release)(a2);
    }
    if (a3) {
      ((void (*)(OSString *))a3->release)(a3);
    }
    if (v7) {
      ((void (*)(OSString *))v7->release)(v7);
    }
  }
  return 0;
}

uint64_t AppleBCMWLANBusInterface::sendBootCheckPointToCoreAnalytics(AppleBCMWLANBusInterface *this, unsigned int a2, unsigned int a3, uint64_t a4, char a5)
{
  uint64_t v32 = 0;
  if (a4)
  {
    uint64_t v32 = a4;
  }
  else
  {
    mach_continuous_time();
    absolutetime_to_nanoseconds();
  }
  if (a2 <= 2)
  {
    long long v9 = OSString::withCString(off_10038A038[a2]);
    if (v9)
    {
      int v10 = v9;
      if (a3 >= 0xC)
      {
        if (*(void *)(*((void *)this + 7) + 16) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 7) + 16), "[dk] %s@%d:INVALID bootCheckPoint = %d\n");
        }
      }
      else
      {
        if (a5)
        {
          unint64_t v11 = (void *)*((void *)this + 7);
          uint64_t v12 = v11[12 * a2 + 15 + a3];
        }
        else
        {
          OSString::getCStringNoCopy(v9);
          stringFromBootCheckPoint(a3);
          io80211_os_log();
          uint64_t v14 = *((void *)this + 7);
          uint64_t v12 = (v32 - *(void *)(v14 + 104)) / 0x3E8uLL;
          *(void *)(v14 + 96 * a2 + 8 * a3 + 120) = v12;
          unint64_t v11 = (void *)*((void *)this + 7);
        }
        if (*v11)
        {
          v11[12 * a2 + 15 + a3] = 0;
          read_random();
          OSStringPtr v15 = OSString::withCString("com.apple.wifi.BootCheckPoint");
          if (v15)
          {
            long long v16 = v15;
            long long v17 = OSDictionary::withCapacity(2u);
            if (!v17)
            {
              if (*(void *)(*((void *)this + 7) + 16) && CCLogStream::shouldLog()) {
                CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 7) + 16), "[dk] %s@%d:Fail to allocate eventPayload\n");
              }
              goto LABEL_57;
            }
            OSStringPtr v18 = OSString::withCString(off_10038A050[a3]);
            if (v18)
            {
              long long v19 = v18;
              OSNumberPtr v20 = OSNumber::withNumber(v12, 0x40uLL);
              if (!v20)
              {
                if (*(void *)(*((void *)this + 7) + 16) && CCLogStream::shouldLog()) {
                  CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 7) + 16), "[dk] %s@%d:Fail to allocate numValue\n");
                }
                goto LABEL_56;
              }
              OSNumberPtr v21 = v20;
              OSDictionary::setObject(v17, v19, v20);
              ((void (*)(const OSObject *))v19->release)(v19);
              ((void (*)(OSNumberPtr))v21->release)(v21);
              OSStringPtr v22 = OSString::withCString("Reason");
              uint64_t v23 = *((void *)this + 7);
              if (v22)
              {
                long long v19 = v22;
                uint64_t v24 = *(int *)(v23 + 112);
                if (v24 <= 2)
                {
                  OSStringPtr v25 = OSString::withCString(off_10038A0B0[v24]);
                  if (v25)
                  {
                    OSStringPtr v26 = v25;
                    OSDictionary::setObject(v17, v19, v25);
                    ((void (*)(const OSObject *))v19->release)(v19);
                    ((void (*)(OSStringPtr))v26->release)(v26);
                    uint64_t v27 = *((void *)this + 7);
                    if (*(void *)v27)
                    {
                      if (!IOService::CoreAnalyticsSendEvent(*(IOService **)v27, 0, v16, v17, 0))
                      {
                        uint64_t v13 = 1;
                        goto LABEL_58;
                      }
                      uint64_t v27 = *((void *)this + 7);
                    }
                    if (*(void *)(v27 + 16))
                    {
                      uint64_t v13 = 0;
                      if (!CCLogStream::shouldLog()) {
                        goto LABEL_58;
                      }
                      char v28 = *(CCLogStream **)(*((void *)this + 7) + 16);
                      CStringNoCopy = OSString::getCStringNoCopy(v16);
                      CCLogStream::logEmergency(v28, "[dk] %s@%d:Failed to send CoreAnalyticsSendEvent for event %s", "sendBootCheckPointToCoreAnalytics", 1000, CStringNoCopy);
                    }
LABEL_57:
                    uint64_t v13 = 0;
LABEL_58:
                    ((void (*)(OSString *))v16->release)(v16);
                    if (v17) {
                      ((void (*)(OSDictionary *))v17->release)(v17);
                    }
                    goto LABEL_60;
                  }
                  uint64_t v23 = *((void *)this + 7);
                }
                if (*(void *)(v23 + 16) && CCLogStream::shouldLog()) {
                  CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 7) + 16), "[dk] %s@%d:Fail to allocate stringValue\n");
                }
LABEL_56:
                ((void (*)(const OSObject *))v19->release)(v19);
                goto LABEL_57;
              }
              if (!*(void *)(v23 + 16) || !CCLogStream::shouldLog()) {
                goto LABEL_57;
              }
              BOOL v30 = *(CCLogStream **)(*((void *)this + 7) + 16);
            }
            else
            {
              if (!*(void *)(*((void *)this + 7) + 16) || !CCLogStream::shouldLog()) {
                goto LABEL_57;
              }
              BOOL v30 = *(CCLogStream **)(*((void *)this + 7) + 16);
            }
            CCLogStream::logAlert(v30, "[dk] %s@%d:Fail to allocate keyString\n");
            goto LABEL_57;
          }
          if (*(void *)(*((void *)this + 7) + 16) && CCLogStream::shouldLog()) {
            CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 7) + 16), "[dk] %s@%d:Fail to allocate eventName\n");
          }
        }
        else if (v11[2] && CCLogStream::shouldLog())
        {
          CCLogStream::logNotice(*(CCLogStream **)(*((void *)this + 7) + 16), "[dk] %s@%d:Driver is not ready try again later\n", "sendBootCheckPointToCoreAnalytics", 912);
        }
      }
      uint64_t v13 = 0;
LABEL_60:
      ((void (*)(const OSString *))v10->release)(v10);
      return v13;
    }
  }
  if (*(void *)(*((void *)this + 7) + 16) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 7) + 16), "[dk] %s@%d:Fail to allocate bootClass\n", "sendBootCheckPointToCoreAnalytics", 896);
  }
  return 0;
}

uint64_t AppleBCMWLANBusInterface::setBootCheckPointAnchorTime(uint64_t this, uint64_t a2, int a3)
{
  *(void *)(*(void *)(this + 56) + 104) = a2;
  *(_DWORD *)(*(void *)(this + 56) + 112) = a3;
  return this;
}

uint64_t AppleBCMWLANBusInterface::sendBootCheckPointToCoreAnalytics(AppleBCMWLANBusInterface *this, unsigned int a2, unsigned int a3)
{
  return AppleBCMWLANBusInterface::sendBootCheckPointToCoreAnalytics(this, a2, a3, 0, 0);
}

uint64_t AppleBCMWLANBusInterface::sendBootCheckPointToCoreAnalytics(AppleBCMWLANBusInterface *this, unsigned int a2, unsigned int a3, uint64_t a4)
{
  return AppleBCMWLANBusInterface::sendBootCheckPointToCoreAnalytics(this, a2, a3, a4, 0);
}

uint64_t AppleBCMWLANBusInterface::hasRegisteredDriver(AppleBCMWLANBusInterface *this)
{
  return *(unsigned __int8 *)(*((void *)this + 7) + 576);
}

uint64_t AppleBCMWLANBusInterface::getModuleInstanceId(AppleBCMWLANBusInterface *this)
{
  return *(unsigned int *)(*((void *)this + 7) + 96);
}

uint64_t AppleBCMWLANBusInterface::getCCPipeOwner(AppleBCMWLANBusInterface *this)
{
  return *((void *)this + 7) + 408;
}

uint64_t AppleBCMWLANBusInterface::getFaultReporter(AppleBCMWLANBusInterface *this)
{
  return *(void *)(*((void *)this + 7) + 32);
}

uint64_t AppleBCMWLANBusInterface::getIO80211FaultReporter(AppleBCMWLANBusInterface *this)
{
  return *(void *)(*((void *)this + 7) + 40);
}

uint64_t AppleBCMWLANBusInterface::setFaultReporter(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 56) + 32) = a2;
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterface::setFaultReporter(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 8) + 32) = a2;
  return result;
}

uint64_t AppleBCMWLANBusInterface::setIO80211FaultReporter(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 56) + 40) = a2;
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterface::setIO80211FaultReporter(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 8) + 40) = a2;
  return result;
}

uint64_t AppleBCMWLANBusInterface::getLogPipesAndStreams(uint64_t result, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  if (a2) {
    *a2 = *(void *)(*(void *)(result + 56) + 544);
  }
  if (a5) {
    *a5 = *(void *)(*(void *)(result + 56) + 552);
  }
  if (a3) {
    *a3 = *(void *)(*(void *)(result + 56) + 536);
  }
  if (a4) {
    *a4 = *(void *)(*(void *)(result + 56) + 560);
  }
  if (a6) {
    *a6 = *(void *)(*(void *)(result + 56) + 568);
  }
  return result;
}

uint64_t AppleBCMWLANBusInterface::setCCLogDebugFlags(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 56) + 672) = a2;
  return this;
}

uint64_t AppleBCMWLANBusInterface::getCCLogDebugFlags(AppleBCMWLANBusInterface *this)
{
  return *(unsigned int *)(*((void *)this + 7) + 672);
}

uint64_t AppleBCMWLANBusInterface::setBusStateFlags(uint64_t this, unsigned int a2)
{
  return this;
}

uint64_t AppleBCMWLANBusInterface::clearBusStateFlags(uint64_t this, int a2)
{
  return this;
}

uint64_t AppleBCMWLANBusInterface::getBusState(AppleBCMWLANBusInterface *this)
{
  return atomic_load((unsigned int *)(*((void *)this + 7) + 48));
}

uint64_t AppleBCMWLANBusInterface::getProduct(AppleBCMWLANBusInterface *this)
{
  return *(void *)(*((void *)this + 7) + 64);
}

uint64_t AppleBCMWLANBusInterface::getProductInfo0(AppleBCMWLANBusInterface *this)
{
  return *(void *)(*((void *)this + 7) + 72);
}

uint64_t AppleBCMWLANBusInterface::getProductInfo1(AppleBCMWLANBusInterface *this)
{
  return *(void *)(*((void *)this + 7) + 80);
}

uint64_t AppleBCMWLANBusInterface::getManufacturerAddr(AppleBCMWLANBusInterface *this)
{
  return *((void *)this + 7) + 56;
}

uint64_t AppleBCMWLANBusInterface::getProductAddr(AppleBCMWLANBusInterface *this)
{
  return *((void *)this + 7) + 64;
}

uint64_t AppleBCMWLANBusInterface::getProductInfo0Addr(AppleBCMWLANBusInterface *this)
{
  return *((void *)this + 7) + 72;
}

uint64_t AppleBCMWLANBusInterface::getProductInfo1Addr(AppleBCMWLANBusInterface *this)
{
  return *((void *)this + 7) + 80;
}

uint64_t AppleBCMWLANBusInterface::dequeueTxIOs(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 56) + 584);
  if (v1) {
    return (*(uint64_t (**)(void))(v1 + 8))(*(void *)v1);
  }
  return result;
}

uint64_t AppleBCMWLANBusInterface::reportCommittedTxCommands(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 56);
  uint64_t v2 = *(void *)(v1 + 584);
  if (v2) {
    return (*(uint64_t (**)(void, uint64_t))(v2 + 16))(*(void *)v2, v1 + 640);
  }
  return this;
}

uint64_t AppleBCMWLANBusInterface::reportCompletedTxIOs(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 56) + 584);
  if (v1) {
    return (*(uint64_t (**)(void))(v1 + 24))(*(void *)v1);
  }
  return result;
}

uint64_t AppleBCMWLANBusInterface::enqueueRxIOs(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 56) + 584);
  if (v1) {
    return (*(uint64_t (**)(void))(v1 + 32))(*(void *)v1);
  }
  return result;
}

uint64_t AppleBCMWLANBusInterface::getCoreDriver(AppleBCMWLANBusInterface *this)
{
  return **((void **)this + 7);
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterface::getCoreDriver(AppleBCMWLANBusInterface *this)
{
  return **((void **)this + 1);
}

uint64_t AppleBCMWLANBusInterface::setStopDataPath(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)(this + 56) + 685) = a2;
  return this;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterface::setStopDataPath(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)(this + 8) + 685) = a2;
  return this;
}

uint64_t AppleBCMWLANBusInterface::getStopDataPath(AppleBCMWLANBusInterface *this)
{
  return *(unsigned __int8 *)(*((void *)this + 7) + 685);
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterface::getStopDataPath(AppleBCMWLANBusInterface *this)
{
  return *(unsigned __int8 *)(*((void *)this + 1) + 685);
}

__n128 AppleBCMWLANBusInterface::getTxDescriptor@<Q0>(AppleBCMWLANBusInterface *this@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2 = (__n128 *)*((void *)this + 7);
  __n128 result = v2[37];
  *a2 = result;
  a2[1].n128_u64[0] = v2[38].n128_u64[0];
  return result;
}

__n128 AppleBCMWLANBusInterface::getTxCompletionDescriptor@<Q0>(AppleBCMWLANBusInterface *this@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 7);
  a2[1].n128_u64[0] = *(void *)(v2 + 632);
  __n128 result = *(__n128 *)(v2 + 616);
  *a2 = result;
  return result;
}

uint64_t AppleBCMWLANBusInterface::getTxCommittedCommandDescriptor(AppleBCMWLANBusInterface *this)
{
  return *(void *)(*((void *)this + 7) + 640);
}

uint64_t AppleBCMWLANBusInterface::getRxDescriptor(AppleBCMWLANBusInterface *this)
{
  return *(void *)(*((void *)this + 7) + 656);
}

uint64_t AppleBCMWLANBusInterface::setRxDescriptorCommandQueue(uint64_t this, AppleBCMWLANObjectQueue *a2)
{
  *(void *)(*(void *)(this + 56) + 664) = a2;
  return this;
}

uint64_t AppleBCMWLANBusInterface::getRxDescriptorCommandQueue(AppleBCMWLANBusInterface *this)
{
  return *(void *)(*((void *)this + 7) + 664);
}

uint64_t AppleBCMWLANBusInterface::setRxDescriptorEventQueue(uint64_t this, AppleBCMWLANObjectQueue *a2)
{
  *(void *)(*(void *)(this + 56) + 656) = a2;
  return this;
}

uint64_t AppleBCMWLANBusInterface::getRxDescriptorEventQueue(AppleBCMWLANBusInterface *this)
{
  return *(void *)(*((void *)this + 7) + 656);
}

uint64_t AppleBCMWLANBusInterface::setTxCompletionDescriptorCommandQueue(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 56) + 624) = a2;
  return result;
}

uint64_t AppleBCMWLANBusInterface::setTxDescriptorCommandQueue(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 56) + 600) = a2;
  return result;
}

uint64_t AppleBCMWLANBusInterface::getTxDescriptorCommandQueue(AppleBCMWLANBusInterface *this)
{
  return *(void *)(*((void *)this + 7) + 600);
}

uint64_t AppleBCMWLANBusInterface::setTxDescriptorPacketactiveDataACs(uint64_t this, __int16 a2)
{
  *(_WORD *)(*(void *)(this + 56) + 610) = a2;
  return this;
}

uint64_t AppleBCMWLANBusInterface::setTxDescriptorCommandioCount(uint64_t this, __int16 a2)
{
  *(_WORD *)(*(void *)(this + 56) + 592) = a2;
  return this;
}

uint64_t AppleBCMWLANBusInterface::setTxDescriptorPacketioCount(uint64_t this, __int16 a2)
{
  *(_WORD *)(*(void *)(this + 56) + 608) = a2;
  return this;
}

uint64_t AppleBCMWLANBusInterface::setTxCommittedCommandDescriptorQueue(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 56) + 648) = a2;
  return result;
}

uint64_t AppleBCMWLANBusInterface::getTxCommittedCommandDescriptorQueue(AppleBCMWLANBusInterface *this)
{
  return *(void *)(*((void *)this + 7) + 648);
}

uint64_t AppleBCMWLANBusInterface::getRxDescriptorEventQueueSize(AppleBCMWLANBusInterface *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 7) + 656) + 56))();
}

uint64_t AppleBCMWLANBusInterface::getRxDescriptorCommandQueueSize(AppleBCMWLANBusInterface *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 7) + 664) + 56))();
}

uint64_t AppleBCMWLANBusInterface::getTxDescriptorCommandQueueSize(AppleBCMWLANBusInterface *this)
{
  return AppleBCMWLANCommandQueue::getSize(*(AppleBCMWLANCommandQueue **)(*((void *)this + 7) + 600));
}

uint64_t AppleBCMWLANBusInterface::getTxCompletionDescriptorCommandQueueSize(AppleBCMWLANBusInterface *this)
{
  return AppleBCMWLANCommandQueue::getSize(*(AppleBCMWLANCommandQueue **)(*((void *)this + 7) + 624));
}

__n128 AppleBCMWLANBusInterface::getCCLogs@<Q0>(AppleBCMWLANBusInterface *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this + 7);
  *(void *)(a2 + 32) = *(void *)(v2 + 568);
  __n128 result = *(__n128 *)(v2 + 536);
  long long v4 = *(_OWORD *)(v2 + 552);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

uint64_t AppleBCMWLANBusInterface::sd_devreg(AppleBCMWLANBusInterface *this, int a2, int a3, unsigned int a4, unsigned __int8 *a5, BOOL *a6)
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterface::sd_devreg(AppleBCMWLANBusInterface *this, int a2, int a3, unsigned int a4, unsigned __int8 *a5, BOOL *a6)
{
  return 0;
}

uint64_t AppleBCMWLANBusInterface::sbreg(AppleBCMWLANBusInterface *this, int a2, unsigned int a3, unsigned int *a4, BOOL *a5)
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterface::sbreg(AppleBCMWLANBusInterface *this, int a2, unsigned int a3, unsigned int *a4, BOOL *a5)
{
  return 0;
}

uint64_t AppleBCMWLANBusInterface::logLowLevelState(AppleBCMWLANBusInterface *this)
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterface::logLowLevelState(AppleBCMWLANBusInterface *this)
{
  return 0;
}

uint64_t AppleBCMWLANBusInterface::disconnectBus(AppleBCMWLANBusInterface *this)
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterface::disconnectBus(AppleBCMWLANBusInterface *this)
{
  return 0;
}

uint64_t AppleBCMWLANBusInterface::sendHostTimeSyncMessage()
{
  return 3758097095;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterface::sendHostTimeSyncMessage()
{
  return 3758097095;
}

uint64_t AppleBCMWLANBusInterface::testTimeSyncEngine(AppleBCMWLANBusInterface *this)
{
  return 3758097095;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterface::testTimeSyncEngine(AppleBCMWLANBusInterface *this)
{
  return 3758097095;
}

uint64_t AppleBCMWLANBusInterface::supportsTrap(AppleBCMWLANBusInterface *this)
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterface::supportsTrap(AppleBCMWLANBusInterface *this)
{
  return 0;
}

uint64_t AppleBCMWLANBusInterface::needWorkQueue(AppleBCMWLANBusInterface *this)
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterface::needWorkQueue(AppleBCMWLANBusInterface *this)
{
  return 0;
}

uint64_t AppleBCMWLANBusInterface::updateInterruptStats(AppleBCMWLANBusInterface *this, uint64_t a2, uint64_t a3)
{
  uint64_t result = **((void **)this + 7);
  if (result) {
    return AppleBCMWLANCore::updateInterruptStats(result, a2, a3);
  }
  return result;
}

void _GLOBAL__sub_I_AppleBCMWLANBusInterface_cpp()
{
  kNullRange = 0;
}

uint64_t AppleBCMWLANUserClient::ExternalMethod(IOUserClient *this, uint64_t a2, IOUserClientMethodArguments *a3, const IOUserClientMethodDispatch *a4, OSObject *a5, void *a6)
{
  v9[0] = a2;
  v9[1] = (uint64_t)a3;
  void v9[2] = (uint64_t)a4;
  v9[3] = (uint64_t)a5;
  uint64_t v7 = this[1].IOService::OSObject::OSMetaClassBase::__vftable;
  v9[4] = (uint64_t)v7->getMetaClass;
  if ((*(unsigned int (**)(void (__cdecl *)(const OSObject *__hidden), uint64_t, IOUserClientMethodArguments *, const IOUserClientMethodDispatch *, OSObject *, void *))(*(void *)v7->release + 144))(v7->release, a2, a3, a4, a5, a6))
  {
    return AppleBCMWLANUserClient::externalMethodGated(this, v9);
  }
  else
  {
    return (*(uint64_t (**)(BOOL (__cdecl *)(const OSMetaClassBase *__hidden, const OSMetaClassBase *), uint64_t (*)(IOUserClient *, uint64_t *), uint64_t *, void, void, void))(*(void *)this[1].isEqualTo + 56))(this[1].isEqualTo, AppleBCMWLANUserClient::externalMethodGated, v9, 0, 0, 0);
  }
}

uint64_t AppleBCMWLANUserClient::externalMethodGated(IOUserClient *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  long long v4 = (IOUserClientMethodArguments *)a2[1];
  unsigned __int8 v5 = (const IOUserClientMethodDispatch *)a2[2];
  OSStringPtr v6 = (IOUserClient *)a2[3];
  uint64_t v7 = (void *)a2[4];
  kdebug_trace();
  if (v3 >= 5) {
    OSNumberPtr v8 = v5;
  }
  else {
    OSNumberPtr v8 = (const IOUserClientMethodDispatch *)&sMethods[4 * v3];
  }
  if (v6) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = v3 >= 5;
  }
  if (v9) {
    int v10 = v6;
  }
  else {
    int v10 = this;
  }
  uint64_t v11 = IOUserClient::ExternalMethod(this, v3, v4, v8, v10, v7);
  uint64_t v13 = (OSString *)0xAAAAAAAAAAAAAAAALL;
  if (!IOService::StringFromReturn(this, v11, &v13, 0))
  {
    OSString::getCStringNoCopy(v13);
    io80211_os_log();
  }
  kdebug_trace();
  return v11;
}

uint64_t non-virtual thunk to'AppleBCMWLANUserClient::ExternalMethod(AppleBCMWLANUserClient *this, uint64_t a2, IOUserClientMethodArguments *a3, const IOUserClientMethodDispatch *a4, OSObject *a5, void *a6)
{
  return AppleBCMWLANUserClient::ExternalMethod((IOUserClient *)((char *)this - 48), a2, a3, a4, a5, a6);
}

uint64_t AppleBCMWLANUserClient::init(IOUserClient *this)
{
  if (IOUserClient::init(this))
  {
    uint64_t result = IOMallocZeroTyped();
    this[1].IOService::OSObject::OSMetaClassBase::__vftable = (IOUserClient_vtbl *)result;
    if (result)
    {
      *(void *)uint64_t result = 0;
      return 1;
    }
    return result;
  }
  uint64_t v3 = this[1].IOService::OSObject::OSMetaClassBase::__vftable;
  if (!v3) {
    return 0;
  }
  uint64_t result = (uint64_t)v3->Dispatch;
  if (result)
  {
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      long long v4 = this[1].IOService::OSObject::OSMetaClassBase::__vftable;
      if (v4) {
        Dispatch = (CCLogStream *)v4->Dispatch;
      }
      else {
        Dispatch = 0;
      }
      CCLogStream::logCrit(Dispatch, "[dk] %s@%d: Failed initWithTask() ... bailing\n", "init", 227);
      return 0;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANUserClient::init(AppleBCMWLANUserClient *this)
{
  return AppleBCMWLANUserClient::init((IOUserClient *)((char *)this - 24));
}

void AppleBCMWLANUserClient::free(IOUserClient *this)
{
  uint64_t v2 = this[1].IOService::OSObject::OSMetaClassBase::__vftable;
  if (v2)
  {
    memset_s(v2, 0x30uLL, 0, 0x30uLL);
    uint64_t v3 = this[1].IOService::OSObject::OSMetaClassBase::__vftable;
    if (v3)
    {
      IOFree(v3, 0x30uLL);
      this[1].IOService::OSObject::OSMetaClassBase::__vftable = 0;
    }
  }
  IOUserClient::free(this);
}

void non-virtual thunk to'AppleBCMWLANUserClient::free(AppleBCMWLANUserClient *this)
{
}

uint64_t AppleBCMWLANUserClient::Start_Impl(IOUserClient *this, IOService *a2)
{
  kern_return_t (__cdecl *Dispatch)(IOUserClient *__hidden, const IORPC);
  void (__cdecl *release)(const OSObject *__hidden);
  IODispatchQueue *v12;
  kern_return_t v13;
  IOUserClient_vtbl *v14;
  IOUserClient_vtbl *v15;
  IOUserClient_vtbl *v17;
  IOUserClient_vtbl *v18;
  CCLogStream *v19;
  IOUserClient_vtbl *v20;
  IOUserClient_vtbl *v21;
  CCLogStream *v22;
  IOUserClient_vtbl *v23;
  CCLogStream *v24;
  IOUserClient_vtbl *v25;
  IOUserClient_vtbl *v26;
  CCLogStream *v27;
  IOUserClient_vtbl *v28;
  CCLogStream *v29;
  OSString *v30;
  OSDictionary *v31;

  BOOL v31 = 0;
  uint64_t v4 = IOService::Start(this, a2, (OSDispatchMethod)&IOUserClient::_Dispatch);
  if (v4)
  {
    uint64_t v5 = v4;
    ClassNameHelper = (const char *)getClassNameHelper(this);
    IOLog("%s::%s(): super::start( provider) failed\n", ClassNameHelper, "Start_Impl");
    AppleBCMWLANUserClient::freeResources((AppleBCMWLANUserClient *)this);
  }
  else
  {
    this[1].getMetaClass = (const OSMetaClass *(__cdecl *)(const OSMetaClassBase *__hidden))OSMetaClassBase::safeMetaCast(a2, (const OSMetaClass *)gAppleBCMWLANCoreMetaClass);
    if (this[1].getMetaClass)
    {
      int v7 = IOUserClient::CopyClientEntitlements(this, &v31, 0);
      if (v7)
      {
        BOOL v30 = (OSString *)0xAAAAAAAAAAAAAAAALL;
        if (!IOService::StringFromReturn(this, v7, &v30, 0))
        {
          OSString::getCStringNoCopy(v30);
          io80211_os_log();
        }
        uint64_t v5 = 3758097084;
        getClassNameHelper(this);
        IOLog("%s::%s(): Unable to get entitlements for the current client\n");
      }
      else
      {
        OSBooleanPtr v8 = kOSBooleanTrue;
        Object = OSDictionary::getObject(v31, "com.apple.wlan.userclient");
        IOLog("UserClient entitlement check returned with value %d\n", v8 == Object);
        ((void (*)(OSDictionary *))v31->release)(v31);
        if (v8 == Object)
        {
          this[1].Dispatch = (kern_return_t (__cdecl *)(IOUserClient *__hidden, const IORPC))(*(uint64_t (**)(const OSMetaClass *(__cdecl *)(const OSMetaClassBase *__hidden)))(*(void *)this[1].getMetaClass + 1848))(this[1].getMetaClass);
          Dispatch = this[1].Dispatch;
          if (Dispatch)
          {
            (*(void (**)(kern_return_t (__cdecl *)(IOUserClient *__hidden, const IORPC *__struct_ptr)))(*(void *)Dispatch + 8))(Dispatch);
            this[1].release = (void (__cdecl *)(const OSObject *__hidden))(*(uint64_t (**)(const OSMetaClass *(__cdecl *)(const OSMetaClassBase *__hidden)))(*(void *)this[1].getMetaClass + 88))(this[1].getMetaClass);
            release = this[1].release;
            if (release)
            {
              (*(void (**)(void (__cdecl *)(const OSObject *__hidden)))(*(void *)release + 8))(release);
              uint64_t v12 = (IODispatchQueue *)(*(uint64_t (**)(void (__cdecl *)(const OSObject *__hidden)))(*(void *)this[1].release + 168))(this[1].release);
              if (v12)
              {
                uint64_t v13 = OSObject::SetDispatchQueue(this, "IOUserClientQueueExternalMethod", v12, 0);
                uint64_t v14 = this[1].IOService::OSObject::OSMetaClassBase::__vftable;
                if (v13)
                {
                  uint64_t v5 = 3758097084;
                  if (v14 && v14->Dispatch && CCLogStream::shouldLog())
                  {
                    uint64_t v23 = this[1].IOService::OSObject::OSMetaClassBase::__vftable;
                    if (v23) {
                      uint64_t v24 = (CCLogStream *)v23->Dispatch;
                    }
                    else {
                      uint64_t v24 = 0;
                    }
                    CCLogStream::logAlert(v24, "[dk] %s@%d:AppleBCMWLANUserClient : Failed to set External Method Dispatch Queue retVal:0x%x\n");
                  }
                }
                else
                {
                  this[1].isEqualTo = (BOOL (__cdecl *)(const OSMetaClassBase *__hidden, const OSMetaClassBase *))IO80211CommandGate::allocWithParams();
                  OSStringPtr v15 = this[1].IOService::OSObject::OSMetaClassBase::__vftable;
                  if (v15->isEqualTo)
                  {
                    if (v15->Dispatch && CCLogStream::shouldLog())
                    {
                      char v28 = this[1].IOService::OSObject::OSMetaClassBase::__vftable;
                      if (v28) {
                        uint64_t v29 = (CCLogStream *)v28->Dispatch;
                      }
                      else {
                        uint64_t v29 = 0;
                      }
                      CCLogStream::logNoticeIf(v29, 0x80uLL, "[dk] %s@%d:\n", "Start_Impl", 331);
                    }
                    return 0;
                  }
                  else
                  {
                    uint64_t v5 = 3758097084;
                    AppleBCMWLANUserClient::freeResources((AppleBCMWLANUserClient *)this);
                    OSStringPtr v25 = this[1].IOService::OSObject::OSMetaClassBase::__vftable;
                    if (v25 && v25->Dispatch && CCLogStream::shouldLog())
                    {
                      OSStringPtr v26 = this[1].IOService::OSObject::OSMetaClassBase::__vftable;
                      if (v26) {
                        uint64_t v27 = (CCLogStream *)v26->Dispatch;
                      }
                      else {
                        uint64_t v27 = 0;
                      }
                      CCLogStream::logAlert(v27, "[dk] %s@%d: Unable to get command gate\n");
                    }
                  }
                }
              }
              else
              {
                uint64_t v5 = 3758097084;
                OSNumberPtr v20 = this[1].IOService::OSObject::OSMetaClassBase::__vftable;
                if (v20 && v20->Dispatch && CCLogStream::shouldLog())
                {
                  OSNumberPtr v21 = this[1].IOService::OSObject::OSMetaClassBase::__vftable;
                  if (v21) {
                    OSStringPtr v22 = (CCLogStream *)v21->Dispatch;
                  }
                  else {
                    OSStringPtr v22 = 0;
                  }
                  CCLogStream::logAlert(v22, "[dk] %s@%d:AppleBCMWLANUserClient : WLANMainDispatchQueue NULL !!!\n");
                }
              }
            }
            else
            {
              uint64_t v5 = 3758097084;
              AppleBCMWLANUserClient::freeResources((AppleBCMWLANUserClient *)this);
              long long v17 = this[1].IOService::OSObject::OSMetaClassBase::__vftable;
              if (v17 && v17->Dispatch && CCLogStream::shouldLog())
              {
                OSStringPtr v18 = this[1].IOService::OSObject::OSMetaClassBase::__vftable;
                if (v18) {
                  long long v19 = (CCLogStream *)v18->Dispatch;
                }
                else {
                  long long v19 = 0;
                }
                CCLogStream::logAlert(v19, "[dk] %s@%d: Unable to get workQueue\n");
              }
            }
          }
          else
          {
            uint64_t v5 = 3758097084;
            getClassNameHelper(this);
            IOLog("%s::%s(): Unable to get debug logger\n");
          }
        }
        else
        {
          uint64_t v5 = 3758097084;
          getClassNameHelper(this);
          IOLog("%s::%s(): Client does not have the required entitlements\n");
        }
      }
    }
    else
    {
      uint64_t v5 = 3758097084;
      AppleBCMWLANUserClient::freeResources((AppleBCMWLANUserClient *)this);
      getClassNameHelper(this);
      IOLog("%s::%s(): Unable to allocate provider\n");
    }
  }
  return v5;
}

uint64_t AppleBCMWLANUserClient::freeResources(AppleBCMWLANUserClient *this)
{
  uint64_t v2 = (void *)*((void *)this + 8);
  uint64_t v3 = v2[1];
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    *(void *)(*((void *)this + 8) + 8) = 0;
    uint64_t v2 = (void *)*((void *)this + 8);
  }
  uint64_t v4 = v2[3];
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
    *(void *)(*((void *)this + 8) + 24) = 0;
    uint64_t v2 = (void *)*((void *)this + 8);
  }
  uint64_t v5 = v2[2];
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    *(void *)(*((void *)this + 8) + 16) = 0;
    uint64_t v2 = (void *)*((void *)this + 8);
  }
  uint64_t result = v2[4];
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    *(void *)(*((void *)this + 8) + 32) = 0;
    uint64_t v2 = (void *)*((void *)this + 8);
  }
  if (*v2) {
    *uint64_t v2 = 0;
  }
  return result;
}

uint64_t AppleBCMWLANUserClient::Stop_Impl(IOService *this, IOService *a2)
{
  meta = this[1].meta;
  if (meta && meta[1].__vftable && CCLogStream::shouldLog())
  {
    OSStringPtr v6 = this[1].meta;
    if (v6) {
      int v7 = (CCLogStream *)v6[1].__vftable;
    }
    else {
      int v7 = 0;
    }
    CCLogStream::logAlert(v7, "[dk] %s@%d:AppleBCMWLANUserClient::stop\n", "Stop_Impl", 353);
  }
  AppleBCMWLANUserClient::freeResources((AppleBCMWLANUserClient *)this);
  IOService::Stop(this, a2, (OSDispatchMethod)&IOUserClient::_Dispatch);
  return 0;
}

uint64_t AppleBCMWLANUserClient::open(AppleBCMWLANUserClient *this)
{
  uint64_t v2 = *((void *)this + 8);
  if (*(void *)(v2 + 32))
  {
    int shouldLog = CCLogStream::shouldLog();
    uint64_t v2 = *((void *)this + 8);
    if (shouldLog)
    {
      if (v2) {
        uint64_t v5 = *(CCLogStream **)(v2 + 32);
      }
      else {
        uint64_t v5 = 0;
      }
      CCLogStream::logNoticeIf(v5, 0x80uLL, "[dk] %s@%d:\n", "open", 405);
      uint64_t v2 = *((void *)this + 8);
    }
  }
  if (*(unsigned char *)(v2 + 40)) {
    return 3758097086;
  }
  AppleBCMWLAN_isVerboseDebugLoggingAllowed();
  uint64_t result = 0;
  *(unsigned char *)(*((void *)this + 8) + 40) = 1;
  return result;
}

uint64_t AppleBCMWLANUserClient::closeUserClient(AppleBCMWLANUserClient *this, AppleBCMWLANUserClient *a2, void *a3, IOUserClientMethodArguments *a4)
{
  return 0;
}

uint64_t AppleBCMWLANUserClient::close(AppleBCMWLANUserClient *this)
{
  uint64_t v2 = *((void *)this + 8);
  if (*(void *)(v2 + 32))
  {
    int shouldLog = CCLogStream::shouldLog();
    uint64_t v2 = *((void *)this + 8);
    if (shouldLog)
    {
      if (v2) {
        uint64_t v5 = *(CCLogStream **)(v2 + 32);
      }
      else {
        uint64_t v5 = 0;
      }
      CCLogStream::logNoticeIf(v5, 0x80uLL, "[dk] %s@%d:\n", "close", 432);
      uint64_t v2 = *((void *)this + 8);
    }
  }
  *(unsigned char *)(v2 + 40) = 0;
  return 0;
}

uint64_t AppleBCMWLANUserClient::prepareMapping(AppleBCMWLANUserClient *this, AppleBCMWLANUserClient *a2, const OSData **a3, IOUserClientMethodArguments *a4)
{
  memset(v14, 0, sizeof(v14));
  uint64_t BytesNoCopy = OSData::getBytesNoCopy(a3[5]);
  if (!BytesNoCopy) {
    return 3758097090;
  }
  long long v10 = BytesNoCopy[3];
  void v15[2] = BytesNoCopy[2];
  _OWORD v15[3] = v10;
  uint64_t v16 = *((void *)BytesNoCopy + 8);
  long long v11 = BytesNoCopy[1];
  v15[0] = *BytesNoCopy;
  v15[1] = v11;
  uint64_t result = AppleBCMWLANUserClient::prepareImageMap((uint64_t)this, (AppleBCMWLANCore *)v15, v14, v7, v8, v9);
  if (!result)
  {
    OSDataPtr v13 = OSData::withBytes(v14, 0x80uLL);
    uint64_t result = 0;
    a3[9] = v13;
  }
  return result;
}

uint64_t AppleBCMWLANUserClient::prepareImageMap(uint64_t a1, AppleBCMWLANCore *a2, void *a3, uint64_t a4, uint64_t a5, BOOL (*a6)(const OSObject *))
{
  int v9 = AppleBCMWLANCore::initAfterIORegUpdated(**(IOService ***)(a1 + 64), a2, (uint64_t)a3, a4, a5, a6);
  uint64_t result = 3825173796;
  if (!v9) {
    return result;
  }
  uint64_t v11 = *(void *)(a1 + 64);
  if (*(void *)(v11 + 32))
  {
    int shouldLog = CCLogStream::shouldLog();
    uint64_t v11 = *(void *)(a1 + 64);
    if (shouldLog)
    {
      if (v11) {
        OSStringPtr v18 = *(CCLogStream **)(v11 + 32);
      }
      else {
        OSStringPtr v18 = 0;
      }
      CCLogStream::logAlert(v18, "[dk] %s@%d: FW size %d NV size %d Sig size %d Reg size %d txcap size %d platcfg size %d\n", "prepareImageMap", 499, *(void *)a2, *((void *)a2 + 2), *((void *)a2 + 1), *((void *)a2 + 3), *((void *)a2 + 4), *((void *)a2 + 5));
      uint64_t v11 = *(void *)(a1 + 64);
    }
  }
  if (*(void *)(v11 + 8)) {
    return 3758097122;
  }
  if (*(void *)a2 > 0x307000uLL) {
    return 3825174273;
  }
  if (*(void *)a2 < 0x19000uLL) {
    return 3825174272;
  }
  unint64_t v13 = *((void *)a2 + 2);
  if (v13 > 0x8000) {
    return 3825174275;
  }
  if (v13 < 0x64) {
    return 3825174284;
  }
  unint64_t v14 = *((void *)a2 + 1);
  if (v14 > 0x400) {
    return 3825174302;
  }
  if (v14 - 16 > 0xFFFFFFFFFFFFFFF0) {
    return 3825174303;
  }
  unint64_t v15 = *((void *)a2 + 5);
  if (v15 > 0x10000) {
    return 3825174304;
  }
  if (v15 - 32 > 0xFFFFFFFFFFFFFFE0) {
    return 3825174305;
  }
  unint64_t v16 = *((void *)a2 + 3);
  if (v16 > 0x19000) {
    return 3825174276;
  }
  if (v16 - 33 > 0xFFFFFFFFFFFFFFDFLL) {
    return 3825174277;
  }
  unint64_t v17 = *((void *)a2 + 4);
  if (v17 > 0x8000) {
    return 3825174280;
  }
  if (v17 - 33 > 0xFFFFFFFFFFFFFFDFLL) {
    return 3825174281;
  }
  uint64_t v19 = AppleBCMWLANCore::verifyFileSelect(*(AppleBCMWLANCore **)v11, *((void *)a2 + 6), *((void *)a2 + 7), *((void *)a2 + 8));
  uint64_t v20 = *(void *)(a1 + 64);
  if (v19)
  {
    uint64_t v21 = v19;
    if (v20 && *(void *)(v20 + 32) && CCLogStream::shouldLog())
    {
      uint64_t v35 = *(void **)(a1 + 64);
      if (v35) {
        __int16 v36 = (CCLogStream *)v35[4];
      }
      else {
        __int16 v36 = 0;
      }
      char v38 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v35 + 112))(*v35, v21);
      CCLogStream::logAlert(v36, "[dk] %s@%d:verifyFileSelect: %s\n", "prepareImageMap", 562, v38);
    }
    return v21;
  }
  uint64_t Bus = AppleBCMWLANCore::getBus(*(AppleBCMWLANCore **)v20);
  if (((*(uint64_t (**)(void))(*(void *)(Bus + 48) + 520))() & 1) == 0) {
    *((void *)a2 + 1) = 0;
  }
  if (!AppleBCMWLANCore::isPlatformConfigFirmwareRequired(**(AppleBCMWLANCore ***)(a1 + 64))) {
    *((void *)a2 + 5) = 0;
  }
  *(void *)(*(void *)(a1 + 64) + 8) = AppleBCMWLANCore::allocChipImage(**(AppleBCMWLANCore ***)(a1 + 64), *(void *)a2, *((void *)a2 + 2), *((void *)a2 + 3), *((void *)a2 + 4));
  uint64_t v23 = *(void *)(a1 + 64);
  uint64_t v24 = *(void *)(v23 + 8);
  if (!v24)
  {
    if (*(void *)(v23 + 32) && CCLogStream::shouldLog())
    {
      uint64_t v29 = *(void *)(a1 + 64);
      if (v29) {
        BOOL v30 = *(CCLogStream **)(v29 + 32);
      }
      else {
        BOOL v30 = 0;
      }
      CCLogStream::logAlert(v30, "[dk] %s@%d: fActiveChipImage alloc fail\n", "prepareImageMap", 576);
    }
    return 3758097085;
  }
  uint64_t v25 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v24 + 56))(v24, a3);
  if (!v25)
  {
    if (*(void *)a2 <= a3[1]
      && *((void *)a2 + 2) <= a3[4]
      && *((void *)a2 + 3) <= a3[11]
      && *((void *)a2 + 4) <= a3[14]
      && *((void *)a2 + 1) <= a3[6]
      && *((void *)a2 + 5) <= a3[8])
    {
      return 0;
    }
    uint64_t v31 = *(void *)(a1 + 64);
    if (*(void *)(v31 + 32))
    {
      int v32 = CCLogStream::shouldLog();
      uint64_t v31 = *(void *)(a1 + 64);
      if (v32)
      {
        if (v31) {
          char v39 = *(CCLogStream **)(v31 + 32);
        }
        else {
          char v39 = 0;
        }
        CCLogStream::logAlert(v39, "[dk] %s@%d: kernel alloc imageSize is too small! imageSize->firmwareSize %d imageMapDescriptor->firmwareBufferLength %d\n", "prepareImageMap", 616, *(void *)a2, a3[1]);
        uint64_t v31 = *(void *)(a1 + 64);
      }
    }
    if (*(void *)(v31 + 32))
    {
      int v33 = CCLogStream::shouldLog();
      uint64_t v31 = *(void *)(a1 + 64);
      if (v33)
      {
        if (v31) {
          char v40 = *(CCLogStream **)(v31 + 32);
        }
        else {
          char v40 = 0;
        }
        CCLogStream::logAlert(v40, "[dk] %s@%d: imageSize->nvramSize %d imageMapDescriptor->nvramBufferLength %d imageSize->regSize %d imageMapDescriptor->regBufferLength %d, imageSize->txCapSize %d, imageMapDescriptor->txCapBufferLength %d\n", "prepareImageMap", 617, *((void *)a2 + 2), a3[4], *((void *)a2 + 3), a3[11], *((void *)a2 + 4), a3[14]);
        uint64_t v31 = *(void *)(a1 + 64);
      }
    }
    if (*(void *)(v31 + 32))
    {
      int v34 = CCLogStream::shouldLog();
      uint64_t v31 = *(void *)(a1 + 64);
      if (v34)
      {
        if (v31) {
          char v41 = *(CCLogStream **)(v31 + 32);
        }
        else {
          char v41 = 0;
        }
        CCLogStream::logAlert(v41, "[dk] %s@%d: imageSize->signatureSize %d imageMapDescriptor->signatureBufferLength %d imageSize->platcfgSize %d imageMapDescriptor->platcfgBufferLength %d\n", "prepareImageMap", 619, *((void *)a2 + 1), a3[6], *((void *)a2 + 5), a3[8]);
        uint64_t v31 = *(void *)(a1 + 64);
      }
    }
    (*(void (**)(void))(**(void **)(v31 + 8) + 16))(*(void *)(v31 + 8));
    *(void *)(*(void *)(a1 + 64) + 8) = 0;
    return 3758097085;
  }
  uint64_t v26 = v25;
  uint64_t v27 = *(void *)(a1 + 64);
  if (*(void *)(v27 + 32))
  {
    int v28 = CCLogStream::shouldLog();
    uint64_t v27 = *(void *)(a1 + 64);
    if (v28)
    {
      if (v27) {
        uint64_t v37 = *(CCLogStream **)(v27 + 32);
      }
      else {
        uint64_t v37 = 0;
      }
      CCLogStream::logAlert(v37, "[dk] %s@%d: ChipImage prepareMapping fail:0x%x\n", "prepareImageMap", 586, v26);
      uint64_t v27 = *(void *)(a1 + 64);
    }
  }
  (*(void (**)(void))(**(void **)(v27 + 8) + 16))(*(void *)(v27 + 8));
  *(void *)(*(void *)(a1 + 64) + 8) = 0;
  return v26;
}

uint64_t AppleBCMWLANUserClient::completeMapping(AppleBCMWLANUserClient *this, AppleBCMWLANUserClient *a2, const OSData **a3, IOUserClientMethodArguments *a4)
{
  uint64_t BytesNoCopy = (long long *)OSData::getBytesNoCopy(a3[5]);
  if (!BytesNoCopy) {
    return 3758097090;
  }
  long long v6 = *BytesNoCopy;
  long long v7 = BytesNoCopy[1];
  long long v8 = BytesNoCopy[3];
  void v13[2] = BytesNoCopy[2];
  v13[3] = v8;
  v13[0] = v6;
  v13[1] = v7;
  long long v9 = BytesNoCopy[4];
  long long v10 = BytesNoCopy[5];
  long long v11 = BytesNoCopy[7];
  v13[6] = BytesNoCopy[6];
  v13[7] = v11;
  v13[4] = v9;
  v13[5] = v10;
  return AppleBCMWLANUserClient::completeImageMap((uint64_t)this, (uint64_t)v13);
}

uint64_t AppleBCMWLANUserClient::completeImageMap(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 64);
  if (v4)
  {
    if (v4[4])
    {
      int shouldLog = CCLogStream::shouldLog();
      uint64_t v4 = *(void **)(a1 + 64);
      if (shouldLog)
      {
        if (v4) {
          uint64_t v25 = (CCLogStream *)v4[4];
        }
        else {
          uint64_t v25 = 0;
        }
        CCLogStream::logNoticeIf(v25, 0x80uLL, "[dk] %s@%d:\n", "completeImageMap", 681);
        uint64_t v4 = *(void **)(a1 + 64);
      }
    }
  }
  uint64_t ChipImage = 3758097084;
  uint64_t v7 = v4[1];
  if (!v7) {
    goto LABEL_18;
  }
  if (*v4)
  {
    (*(void (**)(uint64_t, void))(*(void *)v7 + 80))(v7, *(unsigned int *)(a2 + 16));
    (*(void (**)(void, void))(**(void **)(*(void *)(a1 + 64) + 8) + 88))(*(void *)(*(void *)(a1 + 64) + 8), *(unsigned __int8 *)(a2 + 96));
    (*(void (**)(void, void))(**(void **)(*(void *)(a1 + 64) + 8) + 104))(*(void *)(*(void *)(a1 + 64) + 8), *(unsigned __int8 *)(a2 + 120));
    (*(void (**)(void, void))(**(void **)(*(void *)(a1 + 64) + 8) + 120))(*(void *)(*(void *)(a1 + 64) + 8), *(unsigned __int8 *)(a2 + 72));
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 64) + 8) + 72))(*(void *)(*(void *)(a1 + 64) + 8), a2);
    long long v11 = *(IOService ***)(a1 + 64);
    if (v8)
    {
      uint64_t ChipImage = v8;
      unint64_t v13 = *v11;
      uint64_t v23 = 691;
LABEL_31:
      AppleBCMWLANCore::reportInitFailure(v13, 4uLL, v23, v9, v10);
      goto LABEL_17;
    }
    if (((unsigned int (*)(IOService *, IOService *, uint64_t (*)(), void))v11[1]->OSObject::OSMetaClassBase::__vftable[2].free)(v11[1], *v11, AppleBCMWLANCore::verifyImages, 0))
    {
      uint64_t ChipImage = AppleBCMWLANCore::generateChipImage(**(AppleBCMWLANCore ***)(a1 + 64), *(AppleBCMWLANChipImage **)(*(void *)(a1 + 64) + 8));
      uint64_t v12 = *(void *)(a1 + 64);
      unint64_t v13 = *(IOService **)v12;
      if (ChipImage)
      {
        uint64_t v23 = 707;
      }
      else
      {
        uint64_t ChipImage = AppleBCMWLANCore::validateChipImage((AppleBCMWLANCore *)v13, *(const AppleBCMWLANChipImage **)(v12 + 8));
        uint64_t v14 = *(void *)(a1 + 64);
        unint64_t v13 = *(IOService **)v14;
        if (ChipImage)
        {
          uint64_t v23 = 709;
        }
        else
        {
          uint64_t ChipImage = AppleBCMWLANCore::completeChipImage((AppleBCMWLANCore *)v13, *(AppleBCMWLANChipImage **)(v14 + 8));
          uint64_t v15 = *(void *)(a1 + 64);
          unint64_t v13 = *(IOService **)v15;
          if (!ChipImage)
          {
            uint64_t v16 = AppleBCMWLANCore::bootChipImage(v13, *(const AppleBCMWLANChipImage **)(v15 + 8));
            if (!v16)
            {
              AppleBCMWLANCore::removeFirmwareLoader(**(void ***)(a1 + 64));
              unint64_t v17 = OSDictionary::withCapacity(1u);
              uint64_t v18 = *(void *)(a1 + 64);
              if (v18 && *(void *)(v18 + 32) && CCLogStream::shouldLog())
              {
                uint64_t v28 = *(void *)(a1 + 64);
                if (v28) {
                  uint64_t v29 = *(CCLogStream **)(v28 + 32);
                }
                else {
                  uint64_t v29 = 0;
                }
                CCLogStream::logAlert(v29, "[dk] %s@%d: Setting '%s' property\n", "completeImageMap", 720, "FirmwareLoaded");
              }
              OSDictionary::setObject(v17, "FirmwareLoaded", kOSBooleanTrue);
              IOService::SetProperties(**(IOService ***)(a1 + 64), v17, 0);
              ((void (*)(OSDictionary *))v17->release)(v17);
              uint64_t ChipImage = 0;
              goto LABEL_20;
            }
            uint64_t ChipImage = v16;
            goto LABEL_17;
          }
          uint64_t v23 = 711;
        }
      }
      goto LABEL_31;
    }
    uint64_t ChipImage = 3825174300;
  }
LABEL_17:
  uint64_t v4 = *(void **)(a1 + 64);
LABEL_18:
  if (v4[4] && CCLogStream::shouldLog())
  {
    uint64_t v26 = *(void **)(a1 + 64);
    if (v26) {
      uint64_t v27 = (CCLogStream *)v26[4];
    }
    else {
      uint64_t v27 = 0;
    }
    if (*v26) {
      BOOL v30 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v26 + 112))(*v26, ChipImage);
    }
    else {
      BOOL v30 = "no core";
    }
    CCLogStream::logAlert(v27, "[dk] %s@%d:Fail %x: %s\n", "completeImageMap", 727, ChipImage, v30);
  }
LABEL_20:
  uint64_t v19 = *(void *)(a1 + 64);
  if (*(void *)(v19 + 32))
  {
    int v20 = CCLogStream::shouldLog();
    uint64_t v19 = *(void *)(a1 + 64);
    if (v20)
    {
      if (v19) {
        uint64_t v24 = *(CCLogStream **)(v19 + 32);
      }
      else {
        uint64_t v24 = 0;
      }
      CCLogStream::logAlert(v24, "[dk] %s@%d: - completed, status[%x]\n", "completeImageMap", 730, ChipImage);
      uint64_t v19 = *(void *)(a1 + 64);
    }
  }
  uint64_t v21 = *(void *)(v19 + 8);
  if (v21)
  {
    (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
    *(void *)(*(void *)(a1 + 64) + 8) = 0;
  }
  return ChipImage;
}

uint64_t AppleBCMWLANUserClient::reportMissingFirmwareFiles(AppleBCMWLANUserClient *this, AppleBCMWLANUserClient *a2, void *a3, IOUserClientMethodArguments *a4, uint64_t a5)
{
  uint64_t v5 = (IOService *)**((void **)this + 8);
  if (!v5) {
    return 3758097084;
  }
  AppleBCMWLANCore::reportInitFailure(v5, 3uLL, 669, (uint64_t)a4, a5);
  return 0;
}

uint64_t AppleBCMWLANUserClient::CopyClientMemoryForType_Impl(AppleBCMWLANUserClient *this, uint64_t a2, unint64_t *a3, IOMemoryDescriptor **a4)
{
  int v5 = a2;
  IOLog("ClientMemoryForType[%qd]\n", a2);
  MemoryDescriptorWithMapping = (IOMemoryDescriptor *)AppleBCMWLANChipImage::getMemoryDescriptorWithMapping(*(void *)(*((void *)this + 8) + 8), v5);
  ((void (*)(IOMemoryDescriptor *))MemoryDescriptorWithMapping->retain)(MemoryDescriptorWithMapping);
  *a4 = MemoryDescriptorWithMapping;
  return 0;
}

void _GLOBAL__sub_I_AppleBCMWLANUserClient_cpp()
{
  kNullRange = 0;
}

BOOL isValid5GHzCalibration(const unsigned __int8 *__s1, size_t __n)
{
  BOOL result = 0;
  v4[0] = 0;
  v4[1] = 0;
  __int16 v5 = 0;
  if (__n <= 0x12) {
    return memcmp(__s1, v4, __n) != 0;
  }
  return result;
}

BOOL isValid24GHzCalibration(const unsigned __int8 *__s1, size_t __n)
{
  BOOL result = 0;
  __int16 v5 = 0;
  int v4 = 0;
  if (__n <= 6) {
    return memcmp(__s1, &v4, __n) != 0;
  }
  return result;
}

BOOL isValid5GHzMIMOCalibration(const unsigned __int8 *__s1, size_t __n)
{
  BOOL result = 0;
  int v5 = 0;
  memset(v4, 0, sizeof(v4));
  if (__n <= 0x24) {
    return memcmp(__s1, v4, __n) != 0;
  }
  return result;
}

BOOL isValid5GHzWithXBandCalibration(const unsigned __int8 *a1, size_t __n)
{
  memset(v3, 0, sizeof(v3));
  return __n <= 0x18 && memcmp(a1, v3, __n) != 0;
}

BOOL isValid5GHzMIMOWithXBandCalibration(const unsigned __int8 *a1, size_t __n)
{
  memset(v3, 0, sizeof(v3));
  return __n <= 0x30 && memcmp(a1, v3, __n) != 0;
}

BOOL isValid24GHzMIMOCalibration(const unsigned __int8 *__s1, size_t __n)
{
  BOOL result = 0;
  int v5 = 0;
  uint64_t __s2 = 0;
  if (__n <= 0xC) {
    return memcmp(__s1, &__s2, __n) != 0;
  }
  return result;
}

BOOL isValid24GHzRxCalibration(const unsigned __int8 *__s1, size_t __n)
{
  BOOL result = 0;
  memset(__s2, 0, 27);
  if (__n <= 0x1B) {
    return memcmp(__s1, __s2, __n) != 0;
  }
  return result;
}

BOOL isValid5GHzRxCalibration(const unsigned __int8 *a1, size_t __n)
{
  __s2[0] = 0;
  __s2[1] = 0;
  return __n <= 0x10 && memcmp(a1, __s2, __n) != 0;
}

BOOL isValid24GHzRxMIMOCalibration(const unsigned __int8 *a1, size_t __n)
{
  memset(v3, 0, sizeof(v3));
  return __n <= 0x36 && memcmp(a1, v3, __n) != 0;
}

BOOL isValid5GHzRxMIMOCalibration(const unsigned __int8 *a1, size_t __n)
{
  memset(v3, 0, sizeof(v3));
  return __n <= 0x20 && memcmp(a1, v3, __n) != 0;
}

BOOL isValid5GHzRx4350Calibration(const unsigned __int8 *a1, size_t __n)
{
  memset(v3, 0, sizeof(v3));
  return __n <= 0x60 && memcmp(a1, v3, __n) != 0;
}

BOOL isValid24GHzRx4350Calibration(const unsigned __int8 *a1, size_t __n)
{
  memset(v3, 0, sizeof(v3));
  return __n <= 0x50 && memcmp(a1, v3, __n) != 0;
}

BOOL isValidRxTempCalibration(const unsigned __int8 *a1, int a2)
{
  return a2 == 1 && *a1 != 0;
}

BOOL isValidFreqGroup2GHzCalibration(const unsigned __int8 *a1, size_t __n)
{
  uint64_t v3 = 0;
  return __n <= 8 && memcmp(a1, &v3, __n) != 0;
}

OSObject *AppleBCMWLANProvisioningManager::withProvisioningRoot(AppleBCMWLANProvisioningManager *this, IOService *a2, AppleBCMWLANBusInterface *a3)
{
  uint64_t v7 = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANProvisioningManagerMetaClass, &v7)) {
    return 0;
  }
  int v5 = v7;
  if (v7
    && (((uint64_t (*)(OSObject *, AppleBCMWLANProvisioningManager *, IOService *))v7->OSMetaClassBase::__vftable[1].getMetaClass)(v7, this, a2) & 1) == 0)
  {
    ((void (*)(OSObject *))v5->release)(v5);
    return 0;
  }
  return v5;
}

uint64_t AppleBCMWLANProvisioningManager::initWithProvisioningRoot(OSObject *this, IOService *a2, AppleBCMWLANBusInterface *a3)
{
  uint64_t result = IOMallocZeroTyped();
  *(void *)&this[1].refcount = result;
  if (result)
  {
    uint64_t result = OSObject::init(this);
    if (result)
    {
      *(void *)(*(void *)&this[1].refcount + 16) = a2;
      (*(void (**)(void))(**(void **)(*(void *)&this[1].refcount + 16) + 8))(*(void *)(*(void *)&this[1].refcount + 16));
      *(void *)(*(void *)&this[1].refcount + 8) = AppleBCMWLANBusInterface::getLogger(a3);
      uint64_t v7 = *(void *)(*(void *)&this[1].refcount + 8);
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        uint64_t v21 = 0;
        if (IOParseBootArgNumber("wlan.debug.generate-mac", &v21, 8) && v21
          || IOParseBootArgNumber("wlan.factory", &v21, 8) && (v21 & 4) != 0)
        {
          uint64_t v8 = *(void *)&this[1].refcount;
          if (*(void *)(v8 + 8))
          {
            int shouldLog = CCLogStream::shouldLog();
            uint64_t v8 = *(void *)&this[1].refcount;
            if (shouldLog)
            {
              CCLogStream::logNoticeIf(*(CCLogStream **)(v8 + 8), 0x80uLL, "[dk] %s@%d: Will generate MAC address if none provisioned\n", "initWithProvisioningRoot", 250);
              uint64_t v8 = *(void *)&this[1].refcount;
            }
          }
          *(_DWORD *)(v8 + 596) |= 1u;
        }
        int v20 = 0;
        if (IOParseBootArgNumber("wlan.panic.factory", &v20, 4) && v20)
        {
          uint64_t v10 = *(void *)&this[1].refcount;
          if (*(void *)(v10 + 8))
          {
            int v11 = CCLogStream::shouldLog();
            uint64_t v10 = *(void *)&this[1].refcount;
            if (v11)
            {
              uint64_t v15 = *(CCLogStream **)(v10 + 8);
              ClassNameHelper = (const char *)getClassNameHelper(this);
              CCLogStream::logAlert(v15, "[dk] %s@%d:%s::%s(): Will panic on init failure\n", "initWithProvisioningRoot", 256, ClassNameHelper, "initWithProvisioningRoot");
              uint64_t v10 = *(void *)&this[1].refcount;
            }
          }
          *(_DWORD *)(v10 + 596) |= 2u;
        }
        int v19 = 0;
        if (IOParseBootArgNumber("wlan.debug.skip_old_rx_cal", &v19, 4) && v19)
        {
          uint64_t v12 = *(void *)&this[1].refcount;
          if (*(void *)(v12 + 8))
          {
            int v13 = CCLogStream::shouldLog();
            uint64_t v12 = *(void *)&this[1].refcount;
            if (v13)
            {
              unint64_t v17 = *(CCLogStream **)(v12 + 8);
              uint64_t v18 = (const char *)getClassNameHelper(this);
              CCLogStream::logAlert(v17, "[dk] %s@%d:%s::%s(): Will skip old RSSI Rx calibration.\n", "initWithProvisioningRoot", 262, v18, "initWithProvisioningRoot");
              uint64_t v12 = *(void *)&this[1].refcount;
            }
          }
          *(_DWORD *)(v12 + 596) |= 0x100u;
        }
        **(void **)&this[1].refcount = a3;
        (*(void (**)(void))(***(void ***)&this[1].refcount + 8))(**(void **)&this[1].refcount);
        return 1;
      }
      else
      {
        uint64_t v14 = (const char *)getClassNameHelper(this);
        IOLog("%s::%s(): Unable to get debug logger\n", v14, "initWithProvisioningRoot");
        return 0;
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANProvisioningManager::initWithProvisioningRoot(OSObject *this, IOService *a2, AppleBCMWLANBusInterface *a3)
{
  return AppleBCMWLANProvisioningManager::initWithProvisioningRoot(this - 1, a2, a3);
}

void AppleBCMWLANProvisioningManager::free(OSObject *this)
{
  uint64_t v2 = *(void **)&this[1].refcount;
  if (*v2)
  {
    (*(void (**)(void))(*(void *)*v2 + 16))(*v2);
    **(void **)&this[1].refcount = 0;
    uint64_t v2 = *(void **)&this[1].refcount;
  }
  uint64_t v3 = v2[2];
  if (v3)
  {
    (*(void (**)(void))(*(void *)v3 + 16))(v2[2]);
    *(void *)(*(void *)&this[1].refcount + 16) = 0;
    uint64_t v2 = *(void **)&this[1].refcount;
  }
  uint64_t v4 = v2[1];
  if (!v4
    || ((*(void (**)(void))(*(void *)v4 + 16))(v2[1]),
        *(void *)(*(void *)&this[1].refcount + 8) = 0,
        (uint64_t v2 = *(void **)&this[1].refcount) != 0))
  {
    memset_s(v2, 0x300uLL, 0, 0x300uLL);
    int v5 = *(void **)&this[1].refcount;
    if (v5)
    {
      IOFree(v5, 0x300uLL);
      *(void *)&this[1].refcount = 0;
    }
  }
  OSObject::free(this);
}

void non-virtual thunk to'AppleBCMWLANProvisioningManager::free(AppleBCMWLANProvisioningManager *this)
{
}

uint64_t AppleBCMWLANProvisioningManager::processProvisionedData(AppleBCMWLANProvisioningManager *this)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, AppleBCMWLANProvisioningManager *, uint64_t (*)(AppleBCMWLANProvisioningManager *, int, unsigned int, unsigned __int8 *, uint64_t), uint64_t))(*(void *)(**((void **)this + 6) + 48) + 128))(**((void **)this + 6) + 48, this, AppleBCMWLANProvisioningManager::parseOTPTuple, *((void *)this + 6) + 24);
  uint64_t v3 = *((void *)this + 6);
  if (v2)
  {
    uint64_t v4 = v2;
    if (*(void *)(v3 + 8) && CCLogStream::shouldLog())
    {
      int v5 = (void *)*((void *)this + 6);
      long long v6 = (CCLogStream *)v5[1];
      (*(void (**)(void, uint64_t))(*(void *)*v5 + 104))(*v5, v4);
      CCLogStream::logCrit(v6, "[dk] %s@%d: Unable to gather OTP provisioning data, %s\n");
    }
  }
  else
  {
    AppleBCMWLANProvisioningManager::gatherDeviceTreeData((uint64_t)this, (_DWORD *)(v3 + 24));
    AppleBCMWLANProvisioningManager::generateData((uint64_t)this, *((void *)this + 6) + 24);
    uint64_t v4 = AppleBCMWLANProvisioningManager::validateData((uint64_t)this, *((void *)this + 6) + 24);
    uint64_t v7 = *((void *)this + 6);
    if (v4)
    {
      if (*(void *)(v7 + 8) && CCLogStream::shouldLog())
      {
        uint64_t v8 = (void *)*((void *)this + 6);
        uint64_t v9 = (CCLogStream *)v8[1];
        (*(void (**)(void, uint64_t))(*(void *)*v8 + 104))(*v8, v4);
        CCLogStream::logCrit(v9, "[dk] %s@%d: Invalid provisioning data, %s\n");
      }
    }
    else
    {
      AppleBCMWLANProvisioningManager::populateDeviceTree((uint64_t)this, v7 + 24);
    }
  }
  return v4;
}

uint64_t AppleBCMWLANProvisioningManager::getProvisionedData(uint64_t a1, void *__dst)
{
  uint64_t v4 = *(void *)(a1 + 48);
  if (*(void *)(v4 + 8))
  {
    int shouldLog = CCLogStream::shouldLog();
    uint64_t v4 = *(void *)(a1 + 48);
    if (shouldLog)
    {
      CCLogStream::logAlert(*(CCLogStream **)(v4 + 8), "[dk] %s@%d:WiFi HW[ %02x:%02x:%02x:%02x:%02x:%02x ]\n", "getProvisionedData", 309, *(unsigned __int8 *)(v4 + 28), *(unsigned __int8 *)(v4 + 29), *(unsigned __int8 *)(v4 + 30), *(unsigned __int8 *)(v4 + 31), *(unsigned __int8 *)(v4 + 32), *(unsigned __int8 *)(v4 + 33));
      uint64_t v4 = *(void *)(a1 + 48);
    }
  }
  memmove(__dst, (const void *)(v4 + 24), 0x23CuLL);
  return 0;
}

uint64_t AppleBCMWLANProvisioningManager::parseOTPTuple(AppleBCMWLANProvisioningManager *this, int a2, unsigned int a3, unsigned __int8 *a4, uint64_t a5)
{
  if (a2 == 128)
  {
    if (*(void *)(*((void *)this + 6) + 8) && CCLogStream::shouldLog()) {
      CCLogStream::logNoticeIf(*(CCLogStream **)(*((void *)this + 6) + 8), 0x40000uLL, "[dk] %s@%d: BCOM Private 0x%02X, size %u.\n", "parseOTPTuple", 385, 128, a3);
    }
    AppleBCMWLANProvisioningManager::parseBCOMPrivateTuple((uint64_t)this, a4, a3, a5);
  }
  else if (a2 == 34)
  {
    if (*(void *)(*((void *)this + 6) + 8) && CCLogStream::shouldLog()) {
      CCLogStream::logNoticeIf(*(CCLogStream **)(*((void *)this + 6) + 8), 0x40000uLL, "[dk] %s@%d: Function Extension 0x%02X, size %u.\n", "parseOTPTuple", 381, 34, a3);
    }
    AppleBCMWLANProvisioningManager::parseFunctionExtension((uint64_t)this, a4, a3, a5);
  }
  else if (*(void *)(*((void *)this + 6) + 8) && CCLogStream::shouldLog())
  {
    CCLogStream::logNoticeIf(*(CCLogStream **)(*((void *)this + 6) + 8), 0x40000uLL, "[dk] %s@%d: Skipping CIS Tuple 0x%02X, size %u\n", "parseOTPTuple", 389, a2, a3);
  }
  return 0;
}

uint64_t AppleBCMWLANProvisioningManager::gatherDeviceTreeData(uint64_t a1, _DWORD *a2)
{
  return 0;
}

uint64_t AppleBCMWLANProvisioningManager::generateData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 4;
  if (*(_DWORD *)(a2 + 4) | *(unsigned __int16 *)(a2 + 8)) {
    BOOL v5 = (*(unsigned char *)(a2 + 4) & 1) == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5)
  {
    uint64_t v6 = *(void *)(a1 + 48);
    if (*(unsigned char *)(v6 + 596))
    {
      v13[0] = 0;
      int v7 = acquireProperty<OSString>(*(IOService **)(v6 + 16), "IOPlatformSerialNumber", v13, 1uLL, "IOService");
      if (v13[0] && OSString::getLength(v13[0]))
      {
        OSString::getCStringNoCopy(v13[0]);
        OSString::getLength(v13[0]);
        generateMacAddr(v4);
      }
      else
      {
        v13[1] = (OSString *)mach_continuous_time();
        generateMacAddr(v4);
        *(_WORD *)(a2 + 4) = -11590;
      }
      if (v13[0]) {
        int v8 = v7;
      }
      else {
        int v8 = 0;
      }
      if (v8 == 1)
      {
        ((void (*)(void))v13[0]->release)();
        v13[0] = 0;
      }
      if (*(void *)(*(void *)(a1 + 48) + 8) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d: No Provisioned WiFi Mac address, generating address: %02x:%02x:%02x:%02x:%02x:%02x.\n", "generateData", 1410, *(unsigned __int8 *)(a2 + 4), *(unsigned __int8 *)(a2 + 5), *(unsigned __int8 *)(a2 + 6), *(unsigned __int8 *)(a2 + 7), *(unsigned __int8 *)(a2 + 8), *(unsigned __int8 *)(a2 + 9));
      }
    }
  }
  uint64_t v9 = (_DWORD *)(a2 + 10);
  if (*(_DWORD *)(a2 + 10) | *(unsigned __int16 *)(a2 + 14)) {
    BOOL v10 = (*(unsigned char *)(a2 + 10) & 1) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (!v10)
  {
    int v11 = *(_DWORD *)v4;
    *uint64_t v9 = *(_DWORD *)v4;
    *(_WORD *)(a2 + 14) = *(_WORD *)(v4 + 4);
    *(unsigned char *)uint64_t v9 = v11 + 1;
    if (*(void *)(*(void *)(a1 + 48) + 8))
    {
      if (CCLogStream::shouldLog()) {
        CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 8), 0x80uLL, "[dk] %s@%d:Generating a BT addr %02x:%02x:%02x:%02x:%02x:%02x\n", "generateData", 1420, *(unsigned __int8 *)(a2 + 10), *(unsigned __int8 *)(a2 + 11), *(unsigned __int8 *)(a2 + 12), *(unsigned __int8 *)(a2 + 13), *(unsigned __int8 *)(a2 + 14), *(unsigned __int8 *)(a2 + 15));
      }
    }
  }
  return 0;
}

uint64_t AppleBCMWLANProvisioningManager::validateData(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4) | *(unsigned __int16 *)(a2 + 8)) {
    BOOL v2 = (*(unsigned char *)(a2 + 4) & 1) == 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 48);
  if ((*(unsigned char *)(v4 + 596) & 2) != 0) {
    AppleBCMWLANProvisioningManager::validateData((OSObject *)a1);
  }
  uint64_t v5 = 3758097084;
  if (*(void *)(v4 + 8) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d: Error, unable to obtain MAC address, can't proceed any further\n", "validateData", 1656);
  }
  return v5;
}

uint64_t AppleBCMWLANProvisioningManager::populateDeviceTree(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 1) & 8) == 0) {
    AppleBCMWLANProvisioningManager::populateMacAddress(a1, "local-mac-address", (unsigned __int8 *)(a2 + 4));
  }
  OSDataPtr v4 = OSData::withBytesNoCopy((void *)(a2 + 16), 6uLL);
  if (*(_DWORD *)(a2 + 16) | *(unsigned __int16 *)(a2 + 20)) {
    BOOL v5 = (*(unsigned char *)(a2 + 16) & 1) == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5
    && (setPropertyHelper(**(IOService ***)(a1 + 48), "ethernet-mac-address", v4) & 1) == 0
    && *(void *)(*(void *)(a1 + 48) + 8)
    && CCLogStream::shouldLog())
  {
    CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d: Failed to store %s property\n", "populateDeviceTree", 1566, "ethernet-mac-address");
    if (!v4) {
      return 0;
    }
    goto LABEL_12;
  }
  if (v4) {
LABEL_12:
  }
    ((void (*)(OSDataPtr))v4->release)(v4);
  return 0;
}

uint64_t AppleBCMWLANProvisioningManager::parseFunctionExtension(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    int v7 = *a2;
    if (v7 == 4)
    {
      if ((unint64_t)(a3 - 9) > 0xFFFFFFFFFFFFFFFDLL)
      {
        BOOL v10 = a2 + 1;
        uint64_t result = *(void *)(*(void *)(a1 + 48) + 8);
        if (result)
        {
          uint64_t result = CCLogStream::shouldLog();
          if (result) {
            uint64_t result = CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 8), 0x40080uLL, "[dk] %s@%d:WiFi MAC Address in FuncE LAN_NID 0x%02X: %02x:%02x:%02x:%02x:%02x:%02x\n", "parseFunctionExtension", 445, 4, a2[1], a2[2], a2[3], a2[4], a2[5], a2[6]);
          }
        }
        if (*(_DWORD *)(a2 + 1) | *(unsigned __int16 *)(a2 + 5)) {
          BOOL v11 = (*v10 & 1) == 0;
        }
        else {
          BOOL v11 = 0;
        }
        if (v11)
        {
          int v12 = *(_DWORD *)v10;
          *(_WORD *)(a4 + 8) = *(_WORD *)(a2 + 5);
          *(_DWORD *)(a4 + 4) = v12;
        }
        else
        {
          uint64_t result = *(void *)(*(void *)(a1 + 48) + 8);
          if (result)
          {
            uint64_t result = CCLogStream::shouldLog();
            if (result) {
              return CCLogStream::logWarnIf(*(CCLogStream **)(*(void *)(a1 + 48) + 8), 0x40000uLL, "[dk] %s@%d:Warning, invalid WiFi MAC data in FuncE LAN_NID 0x%02X\n", "parseFunctionExtension", 451, 4);
            }
          }
        }
      }
      else
      {
        uint64_t result = *(void *)(*(void *)(a1 + 48) + 8);
        if (result)
        {
          uint64_t result = CCLogStream::shouldLog();
          if (result) {
            return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d: Error, invalid LAN_NID 0x%02X in FuncE (size %llu, expected %lu)\n", "parseFunctionExtension", 437, 4, a3, 7);
          }
        }
      }
    }
    else
    {
      uint64_t result = *(void *)(*(void *)(a1 + 48) + 8);
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result) {
          return CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 8), 0x40000uLL, "[dk] %s@%d: Skipping FuncE type 0x%02X, size %llu\n", "parseFunctionExtension", 456, v7, a3);
        }
      }
    }
  }
  else
  {
    uint64_t result = *(void *)(*(void *)(a1 + 48) + 8);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result) {
        return CCLogStream::logCrit(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d: Error! No space for FuncE type.\n", "parseFunctionExtension", 427);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANProvisioningManager::parseBCOMPrivateTuple(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    int v7 = *a2;
    BOOL v5 = a2 + 1;
    int v6 = v7;
    unint64_t v8 = a3 - 1;
    if (a3 == 1) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = (uint64_t)v5;
    }
    uint64_t result = *(void *)(*(void *)(a1 + 48) + 8);
    if (v6 == 131)
    {
      if (result && CCLogStream::shouldLog()) {
        CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 8), 0x40000uLL, "[dk] %s@%d:@%u - Apple Private CIS 0x%02X, size %llu.\n", "parseBCOMPrivateTuple", 488, 0, 131, v8);
      }
      return AppleBCMWLANProvisioningManager::parseApplePrivateCIS(a1, v9, v8, a4);
    }
    else if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result) {
        return CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 8), 0x40000uLL, "[dk] %s@%d:@%u - Skipping BCOM private tuple, subtag 0x%02X body size %llu\n", "parseBCOMPrivateTuple", 492, 0, v6, v8);
      }
    }
  }
  else
  {
    uint64_t result = *(void *)(*(void *)(a1 + 48) + 8);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result) {
        return CCLogStream::logCrit(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d: @%u - Error! No space for subtag.\n", "parseBCOMPrivateTuple", 477, 0);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANProvisioningManager::parseApplePrivateCIS(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (!a3) {
    return result;
  }
  uint64_t v7 = result;
  unint64_t v8 = 0;
  uint64_t v36 = a4 + 4;
  uint64_t v37 = a4 + 16;
  uint64_t v35 = a4 + 10;
  unint64_t v9 = 1;
  while (1)
  {
    int v10 = *(unsigned char *)(a2 + v8) & 0x7F;
    if ((*(unsigned char *)(a2 + v8) & 0x7F) == 0) {
      goto LABEL_128;
    }
    if (v10 == 126) {
      break;
    }
    if (*(char *)(a2 + v8) < 0)
    {
      if (v8 + 3 > a3)
      {
        uint64_t result = *(void *)(*(void *)(v7 + 48) + 8);
        if (result)
        {
          uint64_t result = CCLogStream::shouldLog();
          if (result) {
            return CCLogStream::logCrit(*(CCLogStream **)(*(void *)(v7 + 48) + 8), "[dk] %s@%d: @%lu - Error! No space for long link of 0x%02X (needed %u, remaining %lu).\n");
          }
        }
        return result;
      }
      int v11 = *(unsigned __int16 *)(v9 + a2);
      unsigned int v12 = 3;
    }
    else
    {
      if (v8 + 2 > a3)
      {
        uint64_t result = *(void *)(*(void *)(v7 + 48) + 8);
        if (result)
        {
          uint64_t result = CCLogStream::shouldLog();
          if (result) {
            return CCLogStream::logCrit(*(CCLogStream **)(*(void *)(v7 + 48) + 8), "[dk] %s@%d: @%lu - Error! No space for short link of 0x%02X (needed %u, remaining %lu).\n");
          }
        }
        return result;
      }
      int v11 = *(unsigned __int8 *)(a2 + v9);
      unsigned int v12 = 2;
    }
    uint64_t v13 = v11 + v12;
    unint64_t v9 = v8 + v13;
    if (v8 + v13 > a3)
    {
      uint64_t result = *(void *)(*(void *)(v7 + 48) + 8);
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result) {
          return CCLogStream::logCrit(*(CCLogStream **)(*(void *)(v7 + 48) + 8), "[dk] %s@%d: @%lu - Error! No space for body of 0x%02X (needed %llu, remaining %lu).\n");
        }
      }
      return result;
    }
    uint64_t v14 = (unsigned __int8 *)(a2 + v8 + v12);
    if (v11) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    switch(*(unsigned char *)(a2 + v8) & 0x7F)
    {
      case 2:
        if (v11 == 6 || v11 == 12)
        {
          if (*(void *)(*(void *)(v7 + 48) + 8) && CCLogStream::shouldLog()) {
            CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(v7 + 48) + 8), 0x40080uLL, "[dk] %s@%d: @%llu - 2.4 GHz WiFi Calibration in tuple 0x%02X:", "parseApplePrivateCIS", 720, v8, 2);
          }
          IO80211HexdumpIf();
          if (v11 == 12)
          {
            uint64_t result = isValid24GHzMIMOCalibration(v15, 0xCuLL);
            if (result)
            {
              *(_WORD *)(a4 + 70) = *(_WORD *)v15;
              *(_WORD *)(a4 + 72) = *((_WORD *)v15 + 1);
              *(_WORD *)(a4 + 74) = *((_WORD *)v15 + 2);
              *(_WORD *)(a4 + 76) = *((_WORD *)v15 + 3);
              *(_WORD *)(a4 + 78) = *((_WORD *)v15 + 4);
              *(_WORD *)(a4 + 80) = *((_WORD *)v15 + 5);
              int v16 = *(_DWORD *)a4 | 8;
              goto LABEL_116;
            }
          }
          else
          {
            uint64_t result = isValid24GHzCalibration(v15, 6uLL);
            if (result)
            {
              *(_WORD *)(a4 + 22) = *(_WORD *)v15;
              *(_WORD *)(a4 + 24) = *((_WORD *)v15 + 1);
              *(_WORD *)(a4 + 26) = *((_WORD *)v15 + 2);
              int v16 = *(_DWORD *)a4 | 1;
              goto LABEL_116;
            }
          }
          uint64_t result = *(void *)(*(void *)(v7 + 48) + 8);
          if (result)
          {
            uint64_t result = CCLogStream::shouldLog();
            if (result) {
              uint64_t result = CCLogStream::logWarn(*(CCLogStream **)(*(void *)(v7 + 48) + 8), "[dk] %s@%d: @%llu - Invalid 2.4 GHz Cal data in tuple 0x%02X\n");
            }
          }
        }
        else
        {
          uint64_t result = *(void *)(*(void *)(v7 + 48) + 8);
          if (result)
          {
            uint64_t result = CCLogStream::shouldLog();
            if (result) {
              uint64_t result = CCLogStream::logCrit(*(CCLogStream **)(*(void *)(v7 + 48) + 8), "[dk] %s@%d: @%llu - Invalid 2.4 GHz WiFi Cal tuple 0x%02X (size %u, expected %lu or %lu)\n", "parseApplePrivateCIS");
            }
          }
        }
        break;
      case 3:
        if (*(void *)(*(void *)(v7 + 48) + 8) && CCLogStream::shouldLog()) {
          CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(v7 + 48) + 8), 0x40080uLL, "[dk] %s@%d: @%llu - 3.6 GHz WiFi Calibration in tuple 0x%02X:", "parseApplePrivateCIS", 752, v8, 3);
        }
        uint64_t result = IO80211HexdumpIf();
        break;
      case 5:
        if (v11 == 18 || v11 == 36)
        {
          if (*(void *)(*(void *)(v7 + 48) + 8) && CCLogStream::shouldLog()) {
            CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(v7 + 48) + 8), 0x40080uLL, "[dk] %s@%d: @%llu - 5.8 GHz WiFi Calibration in tuple 0x%02X:", "parseApplePrivateCIS", 765, v8, 5);
          }
          IO80211HexdumpIf();
          if (v11 == 36)
          {
            uint64_t result = isValid5GHzMIMOCalibration(v15, 0x24uLL);
            if (result)
            {
              *(_WORD *)(a4 + 82) = *(_WORD *)v15;
              *(_WORD *)(a4 + 84) = *((_WORD *)v15 + 1);
              *(_WORD *)(a4 + 86) = *((_WORD *)v15 + 2);
              *(_WORD *)(a4 + 88) = *((_WORD *)v15 + 3);
              *(_WORD *)(a4 + 90) = *((_WORD *)v15 + 4);
              *(_WORD *)(a4 + 92) = *((_WORD *)v15 + 5);
              *(_WORD *)(a4 + 94) = *((_WORD *)v15 + 6);
              *(_WORD *)(a4 + 96) = *((_WORD *)v15 + 7);
              *(_WORD *)(a4 + 98) = *((_WORD *)v15 + 8);
              *(_WORD *)(a4 + 100) = *((_WORD *)v15 + 9);
              *(_WORD *)(a4 + 102) = *((_WORD *)v15 + 10);
              *(_WORD *)(a4 + 104) = *((_WORD *)v15 + 11);
              *(_WORD *)(a4 + 106) = *((_WORD *)v15 + 12);
              *(_WORD *)(a4 + 108) = *((_WORD *)v15 + 13);
              *(_WORD *)(a4 + 110) = *((_WORD *)v15 + 14);
              *(_WORD *)(a4 + 112) = *((_WORD *)v15 + 15);
              *(_WORD *)(a4 + 114) = *((_WORD *)v15 + 16);
              *(_WORD *)(a4 + 116) = *((_WORD *)v15 + 17);
              int v16 = *(_DWORD *)a4 | 0x10;
              goto LABEL_116;
            }
          }
          else
          {
            uint64_t result = isValid5GHzCalibration(v15, 0x12uLL);
            if (result)
            {
              *(_WORD *)(a4 + 28) = *(_WORD *)v15;
              *(_WORD *)(a4 + 30) = *((_WORD *)v15 + 1);
              *(_WORD *)(a4 + 32) = *((_WORD *)v15 + 2);
              *(_WORD *)(a4 + 34) = *((_WORD *)v15 + 3);
              *(_WORD *)(a4 + 36) = *((_WORD *)v15 + 4);
              *(_WORD *)(a4 + 38) = *((_WORD *)v15 + 5);
              *(_WORD *)(a4 + 40) = *((_WORD *)v15 + 6);
              *(_WORD *)(a4 + 42) = *((_WORD *)v15 + 7);
              *(_WORD *)(a4 + 44) = *((_WORD *)v15 + 8);
              int v16 = *(_DWORD *)a4 | 2;
LABEL_116:
              *(_DWORD *)a4 = v16;
              break;
            }
          }
          uint64_t result = *(void *)(*(void *)(v7 + 48) + 8);
          if (result)
          {
            uint64_t result = CCLogStream::shouldLog();
            if (result) {
              uint64_t result = CCLogStream::logWarn(*(CCLogStream **)(*(void *)(v7 + 48) + 8), "[dk] %s@%d: @%llu - Invalid 5.8 GHz Cal data in tuple 0x%02X\n");
            }
          }
        }
        else
        {
          uint64_t result = *(void *)(*(void *)(v7 + 48) + 8);
          if (result)
          {
            uint64_t result = CCLogStream::shouldLog();
            if (result) {
              uint64_t result = CCLogStream::logCrit(*(CCLogStream **)(*(void *)(v7 + 48) + 8), "[dk] %s@%d: @%llu - Invalid 5.8 GHz WiFi Cal tuple 0x%02X (size %u, expected %lu or %lu)\n", "parseApplePrivateCIS");
            }
          }
        }
        break;
      case 0xB:
        uint64_t result = *(void *)(*(void *)(v7 + 48) + 8);
        if (v11 == 6)
        {
          if (result)
          {
            uint64_t result = CCLogStream::shouldLog();
            if (result) {
              uint64_t result = CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(v7 + 48) + 8), 0x40080uLL, "[dk] %s@%d:@%llu - BT MAC Address in tuple 0x%02X: %02x:%02x:%02x:%02x:%02x:%02x\n", "parseApplePrivateCIS", 682, v8, 11, *v15, v15[1], v15[2], v15[3], v15[4], v15[5]);
            }
          }
          if (*(_DWORD *)v15 | *((unsigned __int16 *)v15 + 2)) {
            BOOL v17 = (*v15 & 1) == 0;
          }
          else {
            BOOL v17 = 0;
          }
          if (v17)
          {
            int v27 = *(_DWORD *)v15;
            __int16 v28 = *((_WORD *)v15 + 2);
            uint64_t v29 = v35;
            goto LABEL_106;
          }
          uint64_t result = *(void *)(*(void *)(v7 + 48) + 8);
          if (result)
          {
            uint64_t result = CCLogStream::shouldLog();
            if (result) {
              uint64_t result = CCLogStream::logAlert(*(CCLogStream **)(*(void *)(v7 + 48) + 8), "[dk] %s@%d: @%llu - Warning, invalid BT MAC data in tuple 0x%02X\n");
            }
          }
        }
        else if (result)
        {
          uint64_t result = CCLogStream::shouldLog();
          if (result) {
            uint64_t result = CCLogStream::logAlert(*(CCLogStream **)(*(void *)(v7 + 48) + 8), "[dk] %s@%d: @%llu - Error, invalid BT MAC tuple 0x%02X (size %u, expected %u)\n");
          }
        }
        break;
      case 0xC:
        uint64_t result = *(void *)(*(void *)(v7 + 48) + 8);
        if (v11 != 6)
        {
          if (result)
          {
            uint64_t result = CCLogStream::shouldLog();
            if (result) {
              return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(v7 + 48) + 8), "[dk] %s@%d: %lu - Error! Serial number 0x%02x needed %lu bytes, but got %d byte.\n", "parseApplePrivateCIS", 625, v8, 12, 6, v11);
            }
          }
          return result;
        }
        if (result && CCLogStream::shouldLog((CCLogStream *)result, 0x40080uLL))
        {
          if (*(void *)(*(void *)(v7 + 48) + 8) && CCLogStream::shouldLog()) {
            CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(v7 + 48) + 8), 0x40080uLL, "[dk] %s@%d: @%lu - Module Serial number in tuple 0x%02X:, tupleLink %d\n", "parseApplePrivateCIS", 629, v8, 12, 6);
          }
          IO80211HexdumpIf();
        }
        OSDataPtr v18 = OSData::withBytes(v15, 6uLL);
        uint64_t v19 = *(void *)(v7 + 48);
        if (v18)
        {
          int v20 = v18;
          if ((setPropertyHelper(*(IOService **)(v19 + 16), "wifi-module-sn", v18) & 1) == 0
            && *(void *)(*(void *)(v7 + 48) + 8)
            && CCLogStream::shouldLog())
          {
            CCLogStream::logAlert(*(CCLogStream **)(*(void *)(v7 + 48) + 8), "[dk] %s@%d:Unable to set kModuleSerialNumber property\n", "parseApplePrivateCIS", 639);
          }
          uint64_t v21 = (AppleOLYHAL *)OSString::withCString("wifi-module-sn");
          OSStringPtr v22 = (OSString *)OSMetaClassBase::safeMetaCast(v20, gOSDataMetaClass);
          if (v22)
          {
            int v24 = AppleOLYHAL::setDataPropertyHelperDK(v21, v22, v23);
            goto LABEL_122;
          }
          BOOL v30 = (OSString *)OSMetaClassBase::safeMetaCast(v20, gOSStringMetaClass);
          if (v30)
          {
            int v24 = AppleOLYHAL::setStringPropertyHelperDK(v21, v30, v31);
            goto LABEL_122;
          }
          int v32 = (OSString *)OSMetaClassBase::safeMetaCast(v20, gOSDictionaryMetaClass);
          if (v32)
          {
            int v24 = AppleOLYHAL::setDictPropertyHelperDK(v21, v32, v33);
LABEL_122:
            int v34 = v24;
            if (v21) {
LABEL_123:
            }
              (*(void (**)(AppleOLYHAL *))(*(void *)v21 + 16))(v21);
          }
          else
          {
            int v34 = 0;
            if (v21) {
              goto LABEL_123;
            }
          }
          if (*(void *)(*(void *)(v7 + 48) + 8) && CCLogStream::shouldLog()) {
            CCLogStream::logAlert(*(CCLogStream **)(*(void *)(v7 + 48) + 8), "[dk] %s@%d:Publish %s property under OLYHAL nub, success %d\n", "parseApplePrivateCIS", 643, "wifi-module-sn", v34);
          }
          uint64_t result = ((uint64_t (*)(const OSMetaClassBase *))v20->release)(v20);
          break;
        }
        uint64_t result = *(void *)(v19 + 8);
        if (result)
        {
          uint64_t result = CCLogStream::shouldLog();
          if (result) {
            uint64_t result = CCLogStream::logAlert(*(CCLogStream **)(*(void *)(v7 + 48) + 8), "[dk] %s@%d:No memory!!\n");
          }
        }
        break;
      case 0xE:
        uint64_t result = *(void *)(*(void *)(v7 + 48) + 8);
        if (v11 == 6)
        {
          if (result)
          {
            uint64_t result = CCLogStream::shouldLog();
            if (result) {
              uint64_t result = CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(v7 + 48) + 8), 0x40080uLL, "[dk] %s@%d:@%llu - Ethernet MAC Address in tuple 0x%02X: %02x:%02x:%02x:%02x:%02x:%02x\n", "parseApplePrivateCIS", 703, v8, 14, *v15, v15[1], v15[2], v15[3], v15[4], v15[5]);
            }
          }
          if (*(_DWORD *)v15 | *((unsigned __int16 *)v15 + 2)) {
            BOOL v25 = (*v15 & 1) == 0;
          }
          else {
            BOOL v25 = 0;
          }
          if (v25)
          {
            int v27 = *(_DWORD *)v15;
            __int16 v28 = *((_WORD *)v15 + 2);
            uint64_t v29 = v37;
            goto LABEL_106;
          }
          uint64_t result = *(void *)(*(void *)(v7 + 48) + 8);
          if (result)
          {
            uint64_t result = CCLogStream::shouldLog();
            if (result) {
              uint64_t result = CCLogStream::logAlert(*(CCLogStream **)(*(void *)(v7 + 48) + 8), "[dk] %s@%d: @%llu - Warning, invalid Ethernet MAC data in tuple 0x%02X\n");
            }
          }
        }
        else if (result)
        {
          uint64_t result = CCLogStream::shouldLog();
          if (result) {
            uint64_t result = CCLogStream::logAlert(*(CCLogStream **)(*(void *)(v7 + 48) + 8), "[dk] %s@%d: @%llu - Error, invalid Ethernet MAC tuple 0x%02X (size %u, expected %u)\n");
          }
        }
        break;
      case 0xF:
        uint64_t result = *(void *)(*(void *)(v7 + 48) + 8);
        if (v11 == 6)
        {
          if (result)
          {
            uint64_t result = CCLogStream::shouldLog();
            if (result) {
              uint64_t result = CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(v7 + 48) + 8), 0x40080uLL, "[dk] %s@%d:@%lu - WiFi MAC Address in tuple 0x%02X: %02x:%02x:%02x:%02x:%02x:%02x\n", "parseApplePrivateCIS", 661, v8, 15, *v15, v15[1], v15[2], v15[3], v15[4], v15[5]);
            }
          }
          if (*(_DWORD *)v15 | *((unsigned __int16 *)v15 + 2)) {
            BOOL v26 = (*v15 & 1) == 0;
          }
          else {
            BOOL v26 = 0;
          }
          if (v26)
          {
            int v27 = *(_DWORD *)v15;
            __int16 v28 = *((_WORD *)v15 + 2);
            uint64_t v29 = v36;
LABEL_106:
            *(_WORD *)(v29 + 4) = v28;
            *(_DWORD *)uint64_t v29 = v27;
          }
          else
          {
            uint64_t result = *(void *)(*(void *)(v7 + 48) + 8);
            if (result)
            {
              uint64_t result = CCLogStream::shouldLog();
              if (result) {
                uint64_t result = CCLogStream::logAlert(*(CCLogStream **)(*(void *)(v7 + 48) + 8), "[dk] %s@%d: @%lu - Warning, invalid WiFi MAC data in tuple 0x%02X\n");
              }
            }
          }
        }
        else if (result)
        {
          uint64_t result = CCLogStream::shouldLog();
          if (result) {
            uint64_t result = CCLogStream::logAlert(*(CCLogStream **)(*(void *)(v7 + 48) + 8), "[dk] %s@%d: @%lu - Error, invalid WiFi MAC tuple 0x%02X (size %u, expected %u)\n");
          }
        }
        break;
      default:
        uint64_t result = *(void *)(*(void *)(v7 + 48) + 8);
        if (result)
        {
          uint64_t result = CCLogStream::shouldLog();
          if (result) {
            uint64_t result = CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(v7 + 48) + 8), 0x40000uLL, "[dk] %s@%d: @%llu - Skipping tuple 0x%02X, size %llu\n", "parseApplePrivateCIS", 818, v8, v10, v13);
          }
        }
        break;
    }
LABEL_128:
    unint64_t v8 = v9++;
    if (v9 > a3) {
      return result;
    }
  }
  uint64_t result = *(void *)(*(void *)(v7 + 48) + 8);
  if (result)
  {
    uint64_t result = CCLogStream::shouldLog();
    if (result) {
      return CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(v7 + 48) + 8), 0x40000uLL, "[dk] %s@%d: @%llu - End of Apple Private CIS 0x%02X.\n", "parseApplePrivateCIS", 576, v8, 126);
    }
  }
  return result;
}

uint64_t AppleBCMWLANProvisioningManager::gatherBaudRate(uint64_t a1, _DWORD *a2)
{
  BOOL v5 = 0;
  if (acquireProperty<OSNumber>(*(IOService **)(*(void *)(a1 + 48) + 16), "serial baud rate", &v5, 1uLL, "IOService"))
  {
    if (v5 && OSNumber::numberOfBits(v5) + 7 >= 8)
    {
      if (OSNumber::unsigned32BitValue(v5) >> 7 < 0x4B || OSNumber::unsigned32BitValue(v5) > 0x6ACFBF)
      {
        if (*(void *)(*(void *)(a1 + 48) + 8) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d:WiFi 'serial baud rate' is invalid!\n ");
        }
      }
      else
      {
        a2[74] = OSNumber::unsigned32BitValue(v5);
        *a2 |= 0x20000u;
      }
    }
    else if (*(void *)(*(void *)(a1 + 48) + 8) && CCLogStream::shouldLog())
    {
      CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d: WiFi 'serial baud rate' is the wrong size!\n");
    }
    uint64_t result = (uint64_t)v5;
    if (v5) {
      return ((uint64_t (*)(OSNumber *))v5->release)(v5);
    }
  }
  else
  {
    uint64_t result = *(void *)(*(void *)(a1 + 48) + 8);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result) {
        return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d: WARNING, Wifi 'serial baud rate' does not exist in the device tree\n", "gatherBaudRate", 849);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANProvisioningManager::gatherMacAddress(uint64_t a1, uint64_t a2)
{
  unint64_t v8 = 0;
  if (checkAcquireDataPropertyNotEmpty(*(IOService **)(*(void *)(a1 + 48) + 16), "local-mac-address", &v8, 0, 1uLL, "IOService"))
  {
    if (OSData::getLength(v8) == 6)
    {
      uint64_t BytesNoCopy = (unsigned __int8 *)OSData::getBytesNoCopy(v8);
      if (*(void *)(*(void *)(a1 + 48) + 8) && CCLogStream::shouldLog()) {
        CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 8), 0x80uLL, "[dk] %s@%d:WiFi Mac Addr in device tree: %02x:%02x:%02x:%02x:%02x:%02x\n", "gatherMacAddress", 862, *BytesNoCopy, BytesNoCopy[1], BytesNoCopy[2], BytesNoCopy[3], BytesNoCopy[4], BytesNoCopy[5]);
      }
      if (*(_DWORD *)BytesNoCopy | *((unsigned __int16 *)BytesNoCopy + 2)) {
        BOOL v5 = (*BytesNoCopy & 1) == 0;
      }
      else {
        BOOL v5 = 0;
      }
      if (v5)
      {
        int v7 = *(_DWORD *)BytesNoCopy;
        *(_WORD *)(a2 + 8) = *((_WORD *)BytesNoCopy + 2);
        *(_DWORD *)a2 |= 0x800u;
        *(_DWORD *)(a2 + 4) = v7;
      }
      else if (*(void *)(*(void *)(a1 + 48) + 8) && CCLogStream::shouldLog())
      {
        CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d:WiFi 'local-mac-address' is invalid!\n ");
      }
    }
    else if (*(void *)(*(void *)(a1 + 48) + 8) && CCLogStream::shouldLog())
    {
      CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d: WiFi 'local-mac-address' is the wrong size!\n");
    }
    uint64_t result = (uint64_t)v8;
    if (v8) {
      return ((uint64_t (*)(OSData *))v8->release)(v8);
    }
  }
  else
  {
    uint64_t result = *(void *)(*(void *)(a1 + 48) + 8);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result) {
        return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d: WARNING, Wifi 'local-mac-address' does not exist in the device tree\n", "gatherMacAddress", 875);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANProvisioningManager::gather24GHzTxCal(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = 0;
  if (checkAcquireDataPropertyNotEmpty(*(IOService **)(*(void *)(a1 + 48) + 16), "tx-calibration-2.4", &v13, 0, 1uLL, "IOService"))
  {
    if (OSData::getLength(v13) == 6)
    {
      uint64_t BytesNoCopy = (const unsigned __int8 *)OSData::getBytesNoCopy(v13, 0, 6uLL);
      BOOL v5 = isValid24GHzCalibration(BytesNoCopy, 6uLL);
      uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
      if (!v5)
      {
        if (v6 && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d:Invalid 2.4GHz calibration data in device tree.\n");
        }
        goto LABEL_27;
      }
      if (v6 && CCLogStream::shouldLog()) {
        CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 8), 0x80uLL, "[dk] %s@%d: Found 2.4GHz calibration data in device tree: \n", "gather24GHzTxCal", 888);
      }
      IO80211HexdumpIf();
      *(_WORD *)(a2 + 22) = *(_WORD *)BytesNoCopy;
      *(_WORD *)(a2 + 24) = *((_WORD *)BytesNoCopy + 1);
      *(_WORD *)(a2 + 26) = *((_WORD *)BytesNoCopy + 2);
      int v7 = *(_DWORD *)a2 | 1;
    }
    else
    {
      if (OSData::getLength(v13) != 12)
      {
        if (*(void *)(*(void *)(a1 + 48) + 8) && CCLogStream::shouldLog())
        {
          unsigned int v12 = *(CCLogStream **)(*(void *)(a1 + 48) + 8);
          OSData::getLength(v13);
          CCLogStream::logAlert(v12, "[dk] %s@%d:2.4GHz calibration data in device tree has wrong length %u.\n");
        }
        goto LABEL_27;
      }
      unint64_t v9 = (const unsigned __int8 *)OSData::getBytesNoCopy(v13, 0, 0xCuLL);
      BOOL v10 = isValid24GHzMIMOCalibration(v9, 0xCuLL);
      uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8);
      if (!v10)
      {
        if (v11 && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d:Invalid 2.4GHz MIMO calibration data in device tree.\n");
        }
        goto LABEL_27;
      }
      if (v11 && CCLogStream::shouldLog()) {
        CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 8), 0x80uLL, "[dk] %s@%d: Found 2.4GHz MIMO calibration data in device tree:", "gather24GHzTxCal", 901);
      }
      IO80211HexdumpIf();
      *(_WORD *)(a2 + 70) = *(_WORD *)v9;
      *(_WORD *)(a2 + 72) = *((_WORD *)v9 + 1);
      *(_WORD *)(a2 + 74) = *((_WORD *)v9 + 2);
      *(_WORD *)(a2 + 76) = *((_WORD *)v9 + 3);
      *(_WORD *)(a2 + 78) = *((_WORD *)v9 + 4);
      *(_WORD *)(a2 + 80) = *((_WORD *)v9 + 5);
      int v7 = *(_DWORD *)a2 | 8;
    }
    *(_DWORD *)a2 = v7;
LABEL_27:
    uint64_t result = (uint64_t)v13;
    if (v13) {
      return ((uint64_t (*)(OSData *))v13->release)(v13);
    }
    return result;
  }
  uint64_t result = *(void *)(*(void *)(a1 + 48) + 8);
  if (result)
  {
    uint64_t result = CCLogStream::shouldLog();
    if (result) {
      return CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 8), 0x80uLL, "[dk] %s@%d:No 'tx-calibration-2.4' property in device tree.\n", "gather24GHzTxCal", 922);
    }
  }
  return result;
}

uint64_t AppleBCMWLANProvisioningManager::gather50GHzTxCal(uint64_t a1, uint64_t a2)
{
  int v20 = 0;
  if (checkAcquireDataPropertyNotEmpty(*(IOService **)(*(void *)(a1 + 48) + 16), "tx-calibration-5.0", &v20, 0, 1uLL, "IOService"))
  {
    if (OSData::getLength(v20) == 18)
    {
      uint64_t BytesNoCopy = (const unsigned __int8 *)OSData::getBytesNoCopy(v20, 0, 0x12uLL);
      BOOL v5 = isValid5GHzCalibration(BytesNoCopy, 0x12uLL);
      uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
      if (!v5)
      {
        if (v6 && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d:Invalid 5GHz calibration data in device tree.\n");
        }
        goto LABEL_36;
      }
      if (v6 && CCLogStream::shouldLog()) {
        CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 8), 0x80uLL, "[dk] %s@%d: Found 5GHz calibration data in device tree: \n", "gather50GHzTxCal", 938);
      }
      IO80211HexdumpIf();
      *(_WORD *)(a2 + 28) = *(_WORD *)BytesNoCopy;
      *(_WORD *)(a2 + 30) = *((_WORD *)BytesNoCopy + 1);
      *(_WORD *)(a2 + 32) = *((_WORD *)BytesNoCopy + 2);
      *(_WORD *)(a2 + 34) = *((_WORD *)BytesNoCopy + 3);
      *(_WORD *)(a2 + 36) = *((_WORD *)BytesNoCopy + 4);
      *(_WORD *)(a2 + 38) = *((_WORD *)BytesNoCopy + 5);
      *(_WORD *)(a2 + 40) = *((_WORD *)BytesNoCopy + 6);
      *(_WORD *)(a2 + 42) = *((_WORD *)BytesNoCopy + 7);
      *(_WORD *)(a2 + 44) = *((_WORD *)BytesNoCopy + 8);
      int v7 = *(_DWORD *)a2 | 2;
      goto LABEL_35;
    }
    if (OSData::getLength(v20) == 36)
    {
      unint64_t v9 = (const unsigned __int8 *)OSData::getBytesNoCopy(v20, 0, 0x24uLL);
      BOOL v10 = isValid5GHzMIMOCalibration(v9, 0x24uLL);
      uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8);
      if (!v10)
      {
        if (v11 && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d:Invalid 5GHz MIMO calibration data in device tree.\n");
        }
        goto LABEL_36;
      }
      if (v11 && CCLogStream::shouldLog()) {
        CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 8), 0x80uLL, "[dk] %s@%d: Found 5GHz MIMO calibration data in device tree:", "gather50GHzTxCal", 957);
      }
      IO80211HexdumpIf();
      *(_WORD *)(a2 + 82) = *(_WORD *)v9;
      *(_WORD *)(a2 + 84) = *((_WORD *)v9 + 1);
      *(_WORD *)(a2 + 86) = *((_WORD *)v9 + 2);
      *(_WORD *)(a2 + 88) = *((_WORD *)v9 + 3);
      *(_WORD *)(a2 + 90) = *((_WORD *)v9 + 4);
      *(_WORD *)(a2 + 92) = *((_WORD *)v9 + 5);
      *(_WORD *)(a2 + 94) = *((_WORD *)v9 + 6);
      *(_WORD *)(a2 + 96) = *((_WORD *)v9 + 7);
      *(_WORD *)(a2 + 98) = *((_WORD *)v9 + 8);
      *(_WORD *)(a2 + 100) = *((_WORD *)v9 + 9);
      *(_WORD *)(a2 + 102) = *((_WORD *)v9 + 10);
      *(_WORD *)(a2 + 104) = *((_WORD *)v9 + 11);
      *(_WORD *)(a2 + 106) = *((_WORD *)v9 + 12);
      *(_WORD *)(a2 + 108) = *((_WORD *)v9 + 13);
      *(_WORD *)(a2 + 110) = *((_WORD *)v9 + 14);
      *(_WORD *)(a2 + 112) = *((_WORD *)v9 + 15);
      *(_WORD *)(a2 + 114) = *((_WORD *)v9 + 16);
      *(_WORD *)(a2 + 116) = *((_WORD *)v9 + 17);
      int v7 = *(_DWORD *)a2 | 0x10;
      goto LABEL_35;
    }
    if (OSData::getLength(v20) == 48)
    {
      unsigned int v12 = (const unsigned __int8 *)OSData::getBytesNoCopy(v20, 0, 0x30uLL);
      BOOL v13 = isValid5GHzMIMOWithXBandCalibration(v12, 0x30uLL);
      uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8);
      if (v13)
      {
        if (v14 && CCLogStream::shouldLog()) {
          CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 8), 0x80uLL, "[dk] %s@%d: Found 5GHz MIMO calibration with X Band data in device tree:", "gather50GHzTxCal", 988);
        }
        IO80211HexdumpIf();
        CalibrationChainTupleWithXBand::read((_WORD *)(a2 + 118), v12);
        CalibrationChainTupleWithXBand::read((_WORD *)(a2 + 142), v12 + 24);
        int v7 = *(_DWORD *)a2 | 0x20;
LABEL_35:
        *(_DWORD *)a2 = v7;
        goto LABEL_36;
      }
      if (!v14 || !CCLogStream::shouldLog()) {
        goto LABEL_36;
      }
      OSDataPtr v18 = *(CCLogStream **)(*(void *)(a1 + 48) + 8);
    }
    else
    {
      if (OSData::getLength(v20) != 24)
      {
        if (*(void *)(*(void *)(a1 + 48) + 8) && CCLogStream::shouldLog())
        {
          uint64_t v19 = *(CCLogStream **)(*(void *)(a1 + 48) + 8);
          OSData::getLength(v20);
          CCLogStream::logAlert(v19, "[dk] %s@%d:5GHz calibration data in device tree has wrong length %u.\n");
        }
        goto LABEL_36;
      }
      uint64_t v15 = (const unsigned __int8 *)OSData::getBytesNoCopy(v20, 0, 0x18uLL);
      BOOL v16 = isValid5GHzWithXBandCalibration(v15, 0x18uLL);
      uint64_t v17 = *(void *)(*(void *)(a1 + 48) + 8);
      if (v16)
      {
        if (v17 && CCLogStream::shouldLog()) {
          CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 8), 0x80uLL, "[dk] %s@%d: Found 5GHz calibration with X Band data in device tree:", "gather50GHzTxCal", 998);
        }
        IO80211HexdumpIf();
        CalibrationChainTupleWithXBand::read((_WORD *)(a2 + 46), v15);
        int v7 = *(_DWORD *)a2 | 4;
        goto LABEL_35;
      }
      if (!v17 || !CCLogStream::shouldLog()) {
        goto LABEL_36;
      }
      OSDataPtr v18 = *(CCLogStream **)(*(void *)(a1 + 48) + 8);
    }
    CCLogStream::logAlert(v18, "[dk] %s@%d:Invalid 5GHz MIMO with X Band calibration data in device tree.\n");
LABEL_36:
    uint64_t result = (uint64_t)v20;
    if (v20) {
      return ((uint64_t (*)(OSData *))v20->release)(v20);
    }
    return result;
  }
  uint64_t result = *(void *)(*(void *)(a1 + 48) + 8);
  if (result)
  {
    uint64_t result = CCLogStream::shouldLog();
    if (result) {
      return CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 8), 0x80uLL, "[dk] %s@%d:No 'tx-calibration-5.0' property in device tree.\n", "gather50GHzTxCal", 1010);
    }
  }
  return result;
}

uint64_t AppleBCMWLANProvisioningManager::gather24GHzRxCal(uint64_t a1, uint64_t a2)
{
  OSDataPtr v18 = 0;
  if (checkAcquireDataPropertyNotEmpty(*(IOService **)(*(void *)(a1 + 48) + 16), "rx-calibration-2.4", &v18, 0, 1uLL, "IOService"))
  {
    if (OSData::getLength(v18) == 27)
    {
      uint64_t BytesNoCopy = (const unsigned __int8 *)OSData::getBytesNoCopy(v18, 0, 0x1BuLL);
      BOOL v5 = isValid24GHzRxCalibration(BytesNoCopy, 0x1BuLL);
      uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
      if (!v5)
      {
        if (v6 && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d:Invalid RSSI Rx 2.4GHz calibration data in device tree.\n");
        }
        goto LABEL_34;
      }
      if (v6 && CCLogStream::shouldLog()) {
        CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 8), 0x80uLL, "[dk] %s@%d: Found RSSI Rx 2.4GHz calibration data in device tree: \n", "gather24GHzRxCal", 1024);
      }
      IO80211HexdumpIf();
      *(unsigned char *)(a2 + 166) = *BytesNoCopy;
      *(unsigned char *)(a2 + 167) = BytesNoCopy[1];
      *(unsigned char *)(a2 + 168) = BytesNoCopy[2];
      *(unsigned char *)(a2 + 169) = BytesNoCopy[3];
      *(unsigned char *)(a2 + 170) = BytesNoCopy[4];
      *(unsigned char *)(a2 + 171) = BytesNoCopy[5];
      *(unsigned char *)(a2 + 172) = BytesNoCopy[6];
      *(unsigned char *)(a2 + 173) = BytesNoCopy[7];
      *(unsigned char *)(a2 + 174) = BytesNoCopy[8];
      *(unsigned char *)(a2 + 175) = BytesNoCopy[9];
      *(unsigned char *)(a2 + 176) = BytesNoCopy[10];
      *(unsigned char *)(a2 + 177) = BytesNoCopy[11];
      *(unsigned char *)(a2 + 178) = BytesNoCopy[12];
      *(unsigned char *)(a2 + 179) = BytesNoCopy[13];
      *(unsigned char *)(a2 + 180) = BytesNoCopy[14];
      *(unsigned char *)(a2 + 181) = BytesNoCopy[15];
      *(unsigned char *)(a2 + 182) = BytesNoCopy[16];
      *(unsigned char *)(a2 + 183) = BytesNoCopy[17];
      *(unsigned char *)(a2 + 184) = BytesNoCopy[18];
      *(unsigned char *)(a2 + 185) = BytesNoCopy[19];
      *(unsigned char *)(a2 + 186) = BytesNoCopy[20];
      *(unsigned char *)(a2 + 187) = BytesNoCopy[21];
      *(unsigned char *)(a2 + 188) = BytesNoCopy[22];
      *(unsigned char *)(a2 + 189) = BytesNoCopy[23];
      *(unsigned char *)(a2 + 190) = BytesNoCopy[24];
      *(unsigned char *)(a2 + 191) = BytesNoCopy[25];
      *(unsigned char *)(a2 + 192) = BytesNoCopy[26];
      int v7 = *(_DWORD *)a2 | 0x40;
      goto LABEL_33;
    }
    if (OSData::getLength(v18) == 54)
    {
      unint64_t v9 = (const unsigned __int8 *)OSData::getBytesNoCopy(v18, 0, 0x36uLL);
      BOOL v10 = isValid24GHzRxMIMOCalibration(v9, 0x36uLL);
      uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8);
      if (!v10)
      {
        if (v11 && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d:Invalid RSSI Rx 2.4GHz MIMO calibration data in device tree.\n");
        }
        goto LABEL_34;
      }
      if (v11 && CCLogStream::shouldLog()) {
        CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 8), 0x80uLL, "[dk] %s@%d: Found RSSI Rx 2.4GHz MIMO calibration data in device tree: \n", "gather24GHzRxCal", 1069);
      }
      IO80211HexdumpIf();
      *(unsigned char *)(a2 + 209) = *v9;
      *(unsigned char *)(a2 + 210) = v9[1];
      *(unsigned char *)(a2 + 211) = v9[2];
      *(unsigned char *)(a2 + 212) = v9[3];
      *(unsigned char *)(a2 + 213) = v9[4];
      *(unsigned char *)(a2 + 214) = v9[5];
      *(unsigned char *)(a2 + 215) = v9[6];
      *(unsigned char *)(a2 + 216) = v9[7];
      *(unsigned char *)(a2 + 217) = v9[8];
      *(unsigned char *)(a2 + 236) = v9[9];
      *(unsigned char *)(a2 + 237) = v9[10];
      *(unsigned char *)(a2 + 238) = v9[11];
      *(unsigned char *)(a2 + 239) = v9[12];
      *(unsigned char *)(a2 + 240) = v9[13];
      *(unsigned char *)(a2 + 241) = v9[14];
      *(unsigned char *)(a2 + 242) = v9[15];
      *(unsigned char *)(a2 + 243) = v9[16];
      *(unsigned char *)(a2 + 244) = v9[17];
      *(unsigned char *)(a2 + 218) = v9[18];
      *(unsigned char *)(a2 + 219) = v9[19];
      *(unsigned char *)(a2 + 220) = v9[20];
      *(unsigned char *)(a2 + 221) = v9[21];
      *(unsigned char *)(a2 + 222) = v9[22];
      *(unsigned char *)(a2 + 223) = v9[23];
      *(unsigned char *)(a2 + 224) = v9[24];
      *(unsigned char *)(a2 + 225) = v9[25];
      *(unsigned char *)(a2 + 226) = v9[26];
      *(unsigned char *)(a2 + 245) = v9[27];
      *(unsigned char *)(a2 + 246) = v9[28];
      *(unsigned char *)(a2 + 247) = v9[29];
      *(unsigned char *)(a2 + 248) = v9[30];
      *(unsigned char *)(a2 + 249) = v9[31];
      *(unsigned char *)(a2 + 250) = v9[32];
      *(unsigned char *)(a2 + 251) = v9[33];
      *(unsigned char *)(a2 + 252) = v9[34];
      *(unsigned char *)(a2 + 253) = v9[35];
      *(unsigned char *)(a2 + 227) = v9[36];
      *(unsigned char *)(a2 + 228) = v9[37];
      *(unsigned char *)(a2 + 229) = v9[38];
      *(unsigned char *)(a2 + 230) = v9[39];
      *(unsigned char *)(a2 + 231) = v9[40];
      *(unsigned char *)(a2 + 232) = v9[41];
      *(unsigned char *)(a2 + 233) = v9[42];
      *(unsigned char *)(a2 + 234) = v9[43];
      *(unsigned char *)(a2 + 235) = v9[44];
      *(unsigned char *)(a2 + 254) = v9[45];
      *(unsigned char *)(a2 + 255) = v9[46];
      *(unsigned char *)(a2 + 256) = v9[47];
      *(unsigned char *)(a2 + 257) = v9[48];
      *(unsigned char *)(a2 + 258) = v9[49];
      *(unsigned char *)(a2 + 259) = v9[50];
      *(unsigned char *)(a2 + 260) = v9[51];
      *(unsigned char *)(a2 + 261) = v9[52];
      *(unsigned char *)(a2 + 262) = v9[53];
      int v7 = *(_DWORD *)a2 | 0x100;
      goto LABEL_33;
    }
    if (OSData::getLength(v18) == 80)
    {
      unsigned int v12 = (const unsigned __int8 *)OSData::getBytesNoCopy(v18, 0, 0x50uLL);
      if (isValid24GHzRx4350Calibration(v12, 0x50uLL))
      {
        IO80211HexdumpIf();
        for (uint64_t i = 0; i != 80; ++i)
          *(unsigned char *)(a2 + i + 308) = v12[i];
        int v7 = *(_DWORD *)a2 | 0x1000;
LABEL_33:
        *(_DWORD *)a2 = v7;
        goto LABEL_34;
      }
      if (!*(void *)(*(void *)(a1 + 48) + 8) || !CCLogStream::shouldLog()) {
        goto LABEL_34;
      }
      BOOL v16 = *(CCLogStream **)(*(void *)(a1 + 48) + 8);
    }
    else
    {
      if (OSData::getLength(v18) != 40)
      {
        if (*(void *)(*(void *)(a1 + 48) + 8) && CCLogStream::shouldLog())
        {
          uint64_t v17 = *(CCLogStream **)(*(void *)(a1 + 48) + 8);
          OSData::getLength(v18);
          CCLogStream::logAlert(v17, "[dk] %s@%d:RSSI Rx 2.4GHz calibration data in device tree has wrong length %u.\n");
        }
        goto LABEL_34;
      }
      uint64_t v14 = (const unsigned __int8 *)OSData::getBytesNoCopy(v18, 0, 0x28uLL);
      if (isValid5GHzMIMOWithXBandCalibration(v14, 0x28uLL))
      {
        IO80211HexdumpIf();
        for (uint64_t j = 0; j != 40; ++j)
          *(unsigned char *)(a2 + j + 484) = v14[j];
        int v7 = *(_DWORD *)a2 | 0x4000;
        goto LABEL_33;
      }
      if (!*(void *)(*(void *)(a1 + 48) + 8) || !CCLogStream::shouldLog()) {
        goto LABEL_34;
      }
      BOOL v16 = *(CCLogStream **)(*(void *)(a1 + 48) + 8);
    }
    CCLogStream::logAlert(v16, "[dk] %s@%d:Invalid rx-calibration-2.4 in device tree.\n");
LABEL_34:
    uint64_t result = (uint64_t)v18;
    if (v18) {
      return ((uint64_t (*)(OSData *))v18->release)(v18);
    }
    return result;
  }
  uint64_t result = *(void *)(*(void *)(a1 + 48) + 8);
  if (result)
  {
    uint64_t result = CCLogStream::shouldLog();
    if (result) {
      return CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 8), 0x80uLL, "[dk] %s@%d:No 'rx-calibration' in device tree.\n", "gather24GHzRxCal", 1172);
    }
  }
  return result;
}

uint64_t AppleBCMWLANProvisioningManager::gather50GHzRxCal(uint64_t a1, uint64_t a2)
{
  OSDataPtr v18 = 0;
  if (checkAcquireDataPropertyNotEmpty(*(IOService **)(*(void *)(a1 + 48) + 16), "rx-calibration-5.0", &v18, 0, 0, "IOService"))
  {
    if (OSData::getLength(v18) == 16)
    {
      uint64_t BytesNoCopy = (const unsigned __int8 *)OSData::getBytesNoCopy(v18, 0, 0x10uLL);
      BOOL v5 = isValid5GHzRxCalibration(BytesNoCopy, 0x10uLL);
      uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
      if (!v5)
      {
        if (v6 && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d:Invalid RSSI Rx 5GHz calibration data in device tree.\n");
        }
        goto LABEL_34;
      }
      if (v6 && CCLogStream::shouldLog()) {
        CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 8), 0x80uLL, "[dk] %s@%d: Found RSSI Rx 5GHz calibration data in device tree: \n", "gather50GHzRxCal", 1185);
      }
      IO80211HexdumpIf();
      *(unsigned char *)(a2 + 193) = *BytesNoCopy;
      *(unsigned char *)(a2 + 194) = BytesNoCopy[1];
      *(unsigned char *)(a2 + 195) = BytesNoCopy[2];
      *(unsigned char *)(a2 + 196) = BytesNoCopy[3];
      *(unsigned char *)(a2 + 197) = BytesNoCopy[4];
      *(unsigned char *)(a2 + 198) = BytesNoCopy[5];
      *(unsigned char *)(a2 + 199) = BytesNoCopy[6];
      *(unsigned char *)(a2 + 200) = BytesNoCopy[7];
      *(unsigned char *)(a2 + 201) = BytesNoCopy[8];
      *(unsigned char *)(a2 + 202) = BytesNoCopy[9];
      *(unsigned char *)(a2 + 203) = BytesNoCopy[10];
      *(unsigned char *)(a2 + 204) = BytesNoCopy[11];
      *(unsigned char *)(a2 + 205) = BytesNoCopy[12];
      *(unsigned char *)(a2 + 206) = BytesNoCopy[13];
      *(unsigned char *)(a2 + 207) = BytesNoCopy[14];
      *(unsigned char *)(a2 + 208) = BytesNoCopy[15];
      int v7 = *(_DWORD *)a2 | 0x80;
      goto LABEL_33;
    }
    if (OSData::getLength(v18) == 32)
    {
      unint64_t v9 = (const unsigned __int8 *)OSData::getBytesNoCopy(v18, 0, 0x20uLL);
      BOOL v10 = isValid5GHzRxMIMOCalibration(v9, 0x20uLL);
      uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8);
      if (!v10)
      {
        if (v11 && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d:Invalid RSSI Rx 5GHz MIMO calibration data in device tree.\n");
        }
        goto LABEL_34;
      }
      if (v11 && CCLogStream::shouldLog()) {
        CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 8), 0x80uLL, "[dk] %s@%d: Found RSSI Rx 5GHz MIMO calibration data in device tree: \n", "gather50GHzRxCal", 1216);
      }
      IO80211HexdumpIf();
      *(unsigned char *)(a2 + 263) = *v9;
      *(unsigned char *)(a2 + 264) = v9[1];
      *(unsigned char *)(a2 + 265) = v9[2];
      *(unsigned char *)(a2 + 266) = v9[3];
      *(unsigned char *)(a2 + 279) = v9[4];
      *(unsigned char *)(a2 + 280) = v9[5];
      *(unsigned char *)(a2 + 281) = v9[6];
      *(unsigned char *)(a2 + 282) = v9[7];
      *(unsigned char *)(a2 + 267) = v9[8];
      *(unsigned char *)(a2 + 268) = v9[9];
      *(unsigned char *)(a2 + 269) = v9[10];
      *(unsigned char *)(a2 + 270) = v9[11];
      *(unsigned char *)(a2 + 283) = v9[12];
      *(unsigned char *)(a2 + 284) = v9[13];
      *(unsigned char *)(a2 + 285) = v9[14];
      *(unsigned char *)(a2 + 286) = v9[15];
      *(unsigned char *)(a2 + 271) = v9[16];
      *(unsigned char *)(a2 + 272) = v9[17];
      *(unsigned char *)(a2 + 273) = v9[18];
      *(unsigned char *)(a2 + 274) = v9[19];
      *(unsigned char *)(a2 + 287) = v9[20];
      *(unsigned char *)(a2 + 288) = v9[21];
      *(unsigned char *)(a2 + 289) = v9[22];
      *(unsigned char *)(a2 + 290) = v9[23];
      *(unsigned char *)(a2 + 275) = v9[24];
      *(unsigned char *)(a2 + 276) = v9[25];
      *(unsigned char *)(a2 + 277) = v9[26];
      *(unsigned char *)(a2 + 278) = v9[27];
      *(unsigned char *)(a2 + 291) = v9[28];
      *(unsigned char *)(a2 + 292) = v9[29];
      *(unsigned char *)(a2 + 293) = v9[30];
      *(unsigned char *)(a2 + 294) = v9[31];
      int v7 = *(_DWORD *)a2 | 0x200;
      goto LABEL_33;
    }
    if (OSData::getLength(v18) == 96)
    {
      unsigned int v12 = (const unsigned __int8 *)OSData::getBytesNoCopy(v18, 0, 0x60uLL);
      if (isValid5GHzRx4350Calibration(v12, 0x60uLL))
      {
        IO80211HexdumpIf();
        for (uint64_t i = 0; i != 96; ++i)
          *(unsigned char *)(a2 + i + 388) = v12[i];
        int v7 = *(_DWORD *)a2 | 0x2000;
LABEL_33:
        *(_DWORD *)a2 = v7;
        goto LABEL_34;
      }
      if (!*(void *)(*(void *)(a1 + 48) + 8) || !CCLogStream::shouldLog()) {
        goto LABEL_34;
      }
      BOOL v16 = *(CCLogStream **)(*(void *)(a1 + 48) + 8);
    }
    else
    {
      if (OSData::getLength(v18) != 48)
      {
        if (*(void *)(*(void *)(a1 + 48) + 8) && CCLogStream::shouldLog())
        {
          uint64_t v17 = *(CCLogStream **)(*(void *)(a1 + 48) + 8);
          OSData::getLength(v18);
          CCLogStream::logAlert(v17, "[dk] %s@%d:RSSI Rx 5GHz calibration data in device tree has wrong length %u.\n");
        }
        goto LABEL_34;
      }
      uint64_t v14 = (const unsigned __int8 *)OSData::getBytesNoCopy(v18, 0, 0x30uLL);
      if (isValid5GHzMIMOWithXBandCalibration(v14, 0x30uLL))
      {
        IO80211HexdumpIf();
        for (uint64_t j = 0; j != 48; ++j)
          *(unsigned char *)(a2 + j + 524) = v14[j];
        int v7 = *(_DWORD *)a2 | 0x8000;
        goto LABEL_33;
      }
      if (!*(void *)(*(void *)(a1 + 48) + 8) || !CCLogStream::shouldLog()) {
        goto LABEL_34;
      }
      BOOL v16 = *(CCLogStream **)(*(void *)(a1 + 48) + 8);
    }
    CCLogStream::logAlert(v16, "[dk] %s@%d:Invalid rx-calibration-5.0 in device tree.\n");
LABEL_34:
    uint64_t result = (uint64_t)v18;
    if (v18) {
      return ((uint64_t (*)(OSData *))v18->release)(v18);
    }
    return result;
  }
  uint64_t result = *(void *)(*(void *)(a1 + 48) + 8);
  if (result)
  {
    uint64_t result = CCLogStream::shouldLog();
    if (result) {
      return CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 8), 0x80uLL, "[dk] %s@%d:No 'rx-calibration-5.0' in device tree.\n", "gather50GHzRxCal", 1302);
    }
  }
  return result;
}

uint64_t AppleBCMWLANProvisioningManager::gatherRxTempCal(uint64_t a1, uint64_t a2)
{
  unint64_t v9 = 0;
  if (checkAcquireDataPropertyNotEmpty(*(IOService **)(*(void *)(a1 + 48) + 16), "rx-calibration-temp", &v9, 1uLL, 1uLL, "IOService"))
  {
    if (OSData::getLength(v9) == 1)
    {
      uint64_t BytesNoCopy = (const unsigned __int8 *)OSData::getBytesNoCopy(v9, 0, 1uLL);
      BOOL valid = isValidRxTempCalibration(BytesNoCopy, 1);
      uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
      if (valid)
      {
        if (v6 && CCLogStream::shouldLog()) {
          CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 8), 0x80uLL, "[dk] %s@%d: Found rx calibration temperature in device tree: \n", "gatherRxTempCal", 1317);
        }
        IO80211HexdumpIf();
        *(unsigned char *)(a2 + 295) = *BytesNoCopy;
        *(_DWORD *)a2 |= 0x400u;
      }
      else if (v6 && CCLogStream::shouldLog())
      {
        CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d:Invalid Rx Calibration temperature in device tree.\n");
      }
    }
    else if (*(void *)(*(void *)(a1 + 48) + 8) && CCLogStream::shouldLog())
    {
      unint64_t v8 = *(CCLogStream **)(*(void *)(a1 + 48) + 8);
      OSData::getLength(v9);
      CCLogStream::logAlert(v8, "[dk] %s@%d:Rx calibration termperature in device tree has wrong length %u.\n");
    }
    uint64_t result = (uint64_t)v9;
    if (v9) {
      return ((uint64_t (*)(OSData *))v9->release)(v9);
    }
  }
  else
  {
    uint64_t result = *(void *)(*(void *)(a1 + 48) + 8);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result) {
        return CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 8), 0x80uLL, "[dk] %s@%d:No 'rx-calibration-temp' in device tree.\n", "gatherRxTempCal", 1329);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANProvisioningManager::gatherRxFreqGroup2G(uint64_t a1, _DWORD *a2)
{
  unint64_t v8 = 0;
  if (checkAcquireDataPropertyNotEmpty(*(IOService **)(*(void *)(a1 + 48) + 16), "freq-group-2g-calibration", &v8, 8uLL, 1uLL, "IOService"))
  {
    if (OSData::getLength(v8) == 8)
    {
      uint64_t BytesNoCopy = (const unsigned __int8 *)OSData::getBytesNoCopy(v8, 0, 8uLL);
      if (isValidFreqGroup2GHzCalibration(BytesNoCopy, 8uLL))
      {
        IO80211HexdumpIf();
        for (uint64_t i = 0; i != 8; ++i)
          *((unsigned char *)a2 + i + 300) = BytesNoCopy[i];
        *a2 |= 0x10000u;
      }
      else if (*(void *)(*(void *)(a1 + 48) + 8) && CCLogStream::shouldLog())
      {
        CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d:Invalid freq-group-2g-calibration in device tree.\n");
      }
    }
    else if (*(void *)(*(void *)(a1 + 48) + 8) && CCLogStream::shouldLog())
    {
      int v7 = *(CCLogStream **)(*(void *)(a1 + 48) + 8);
      OSData::getLength(v8);
      CCLogStream::logAlert(v7, "[dk] %s@%d:freq-group-2g-calibration in device tree has wrong length %u.\n");
    }
    uint64_t result = (uint64_t)v8;
    if (v8) {
      return ((uint64_t (*)(OSData *))v8->release)(v8);
    }
  }
  else
  {
    uint64_t result = *(void *)(*(void *)(a1 + 48) + 8);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result) {
        return CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 8), 0x80uLL, "[dk] %s@%d:No 'freq-group-2g-calibration' in device tree.\n", "gatherRxFreqGroup2G", 1388);
      }
    }
  }
  return result;
}

uint64_t generateMacAddr(uint64_t a1)
{
  memset(v3, 170, 20);
  SHA1Init();
  SHA1Update();
  uint64_t result = SHA1Final();
  *(_DWORD *)a1 = v3[0];
  *(_WORD *)(a1 + 4) = WORD2(v3[0]);
  *(_WORD *)a1 = -11846;
  return result;
}

uint64_t AppleBCMWLANProvisioningManager::addSInt16ValToImage(uint64_t a1, const char *a2, unsigned __int16 a3, uint64_t a4)
{
  uint64_t v4 = 3758097086;
  if (!a2) {
    return 3758097090;
  }
  size_t v8 = *(void *)a4 - *(void *)(a4 + 16) - 2;
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v20 = v9;
  long long v21 = v9;
  *(_OWORD *)__str = v9;
  long long v19 = v9;
  unsigned int v10 = snprintf(__str, 0x40uLL, "%s=0x%04x", a2, a3);
  if (v10 < 0x40)
  {
    uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8);
    if (v8 >= v10)
    {
      if (v11 && CCLogStream::shouldLog()) {
        CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 8), 0x80uLL, "[dk] %s@%d:Setting nvram parameter %s\n", "addSInt16ValToImage", 1455, __str);
      }
      unsigned int v12 = *(AppleBCMWLANUtil **)(a4 + 24);
      BOOL v13 = AppleBCMWLANUtil::findpattern(v12, a2, *(const char **)(a4 + 32));
      if (v13)
      {
        uint64_t v14 = v13;
        size_t v15 = strlen((const char *)v13);
        size_t v16 = v15 + 1;
        memmove(v14, (char *)v14 + v15 + 1, v12 - v14 + *(void *)(a4 + 32) + ~v15);
        *(void *)(a4 + 32) -= v16;
      }
      uint64_t v4 = 0;
      *(void *)(a4 + 16) += strlcpy((char *)(*(void *)(a4 + 8) + *(void *)(a4 + 16)), __str, v8) + 1;
    }
    else if (v11 && CCLogStream::shouldLog())
    {
      CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d:%s numPrinted %d, varsSpaceRemaining %ld\n", "addSInt16ValToImage", 1451, __str, v10, v8);
    }
  }
  else if (*(void *)(*(void *)(a1 + 48) + 8) && CCLogStream::shouldLog())
  {
    CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d:%s numPrinted %d, varsSpaceRemaining %ld\n", "addSInt16ValToImage", 1444, __str, v10, v8);
  }
  return v4;
}

uint64_t AppleBCMWLANProvisioningManager::addStringValToImage(AppleBCMWLANProvisioningManager *this, const char *a2, char *a3)
{
  uint64_t v3 = 3758097086;
  if (!a2) {
    return 3758097090;
  }
  uint64_t v7 = *((void *)this + 6);
  uint64_t v8 = *(void *)(v7 + 600);
  uint64_t v9 = *(void *)(v7 + 616);
  unsigned int v10 = (char *)IOMallocZeroData();
  if (v10)
  {
    uint64_t v11 = v10;
    size_t v12 = v8 - v9 - 2;
    unsigned int v13 = snprintf(v10, 0xC8uLL, "%s=%s", a2, a3);
    uint64_t v14 = *((void *)this + 6);
    uint64_t v15 = *(void *)(v14 + 8);
    if (v12 >= v13)
    {
      if (v15)
      {
        int shouldLog = CCLogStream::shouldLog();
        uint64_t v14 = *((void *)this + 6);
        if (shouldLog)
        {
          CCLogStream::logNoticeIf(*(CCLogStream **)(v14 + 8), 0x80uLL, "[dk] %s@%d:Setting nvram parameter %s\n", "addStringValToImage", 1517, v11);
          uint64_t v14 = *((void *)this + 6);
        }
      }
      uint64_t v17 = *(AppleBCMWLANUtil **)(v14 + 624);
      OSDataPtr v18 = AppleBCMWLANUtil::findpattern(v17, a2, *(const char **)(v14 + 632));
      if (v18)
      {
        long long v19 = v18;
        size_t v20 = strlen((const char *)v18);
        uint64_t v21 = *((void *)this + 6);
        int64_t v22 = v17 - v19 + *(void *)(v21 + 632) + ~v20;
        if (v22 < 0)
        {
          if (*(void *)(v21 + 8) && CCLogStream::shouldLog()) {
            CCLogStream::logEmergency(*(CCLogStream **)(*((void *)this + 6) + 8), "[dk] %s@%d:Unable to set nvram parameter %s\n", "addStringValToImage", 1531, v11);
          }
          goto LABEL_18;
        }
        size_t v23 = v20 + 1;
        memmove(v19, (char *)v19 + v20 + 1, v22);
        uint64_t v24 = *((void *)this + 6);
        size_t v25 = *(void *)(v24 + 632);
        BOOL v26 = v25 >= v23;
        size_t v27 = v25 - v23;
        if (!v26) {
          size_t v27 = 0;
        }
        *(void *)(v24 + 632) = v27;
      }
      uint64_t v3 = 0;
      *(void *)(*((void *)this + 6) + 616) += strlcpy((char *)(*(void *)(*((void *)this + 6) + 608)+ *(void *)(*((void *)this + 6) + 616)), v11, v12)+ 1;
    }
    else if (v15 && CCLogStream::shouldLog())
    {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 8), "[dk] %s@%d:%s numPrinted %d, varsSpaceRemaining %ld\n", "addStringValToImage", 1513, v11, v13, v12);
    }
LABEL_18:
    IOFreeData();
    return v3;
  }
  return 3758097085;
}

uint64_t AppleBCMWLANProvisioningManager::populateMacAddress(uint64_t a1, const char *a2, unsigned __int8 *a3)
{
  size_t v12 = 0;
  if (!acquireProperty<OSData>(*(IOService **)(*(void *)(a1 + 48) + 16), a2, (OSMetaClassBase **)&v12, 1uLL, "IOService"))return 0; {
  if (!v12
  }
    || ((uint64_t BytesNoCopy = (unsigned __int16 *)OSData::getBytesNoCopy(v12), *(_DWORD *)BytesNoCopy | BytesNoCopy[2])
      ? (BOOL v7 = (*(unsigned char *)BytesNoCopy & 1) == 0)
      : (BOOL v7 = 0),
        !v7))
  {
    OSDataPtr v8 = OSData::withBytesNoCopy(a3, 6uLL);
    char v9 = setPropertyHelper(*(IOService **)(*(void *)(a1 + 48) + 16), a2, v8);
    uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
    if (v9)
    {
      if (v10 && CCLogStream::shouldLog())
      {
        CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 8), 0x80uLL, "[dk] %s@%d:Wrote %s property, %02x:%02x:%02x:%02x:%02x:%02x\n", "populateMacAddress", 1636, a2, *a3, a3[1], a3[2], a3[3], a3[4], a3[5]);
        if (!v8) {
          goto LABEL_16;
        }
LABEL_15:
        ((void (*)(OSDataPtr))v8->release)(v8);
        goto LABEL_16;
      }
LABEL_14:
      if (!v8) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
    if (!v10 || !CCLogStream::shouldLog()) {
      goto LABEL_14;
    }
    CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d: Failed to write %s property\n", "populateMacAddress", 1631, a2);
    if (v8) {
      goto LABEL_15;
    }
  }
LABEL_16:
  if (v12) {
    ((void (*)(const OSData *))v12->release)(v12);
  }
  return 0;
}

uint64_t acquireProperty<OSData>(IOService *a1, const char *a2, OSMetaClassBase **a3, unint64_t a4, const char *a5)
{
  anObject = 0;
  uint64_t result = acquirePropertyWithString(a1, a2, (OSContainer **)&anObject, a4, a5);
  if (result)
  {
    BOOL v7 = OSMetaClassBase::safeMetaCast(anObject, gOSDataMetaClass);
    if (v7)
    {
      *a3 = v7;
      return 1;
    }
    else
    {
      uint64_t result = (uint64_t)anObject;
      if (anObject)
      {
        ((void (*)(OSMetaClassBase *))anObject->release)(anObject);
        return 0;
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANProvisioningManager::addBaudRate(AppleBCMWLANProvisioningManager *this)
{
  unsigned int v2 = 0;
  unsigned int v15 = 0;
  if ((*(unsigned char *)(*((void *)this + 6) + 26) & 2) == 0)
  {
    uint64_t result = IOParseBootArgNumber("wlan.h5baud", &v15, 4);
    if (!result) {
      return result;
    }
    unsigned int v2 = v15;
  }
  memset(__str, 170, 10);
  if (!v2)
  {
    unsigned int v2 = *(_DWORD *)(*((void *)this + 6) + 320);
    unsigned int v15 = v2;
  }
  uint64_t v4 = 0;
  int v5 = 0;
  unsigned int v6 = 0;
  BOOL v7 = kSerialBaudNVRAMTable;
  do
  {
    unsigned int v8 = *v7;
    v7 += 4;
    unsigned int v9 = v8 - v2;
    unsigned int v10 = v2 - v8;
    if (v2 <= v8) {
      unsigned int v10 = v9;
    }
    if (!v6) {
      unsigned int v6 = v10;
    }
    BOOL v11 = v6 > v10;
    if (v6 >= v10) {
      unsigned int v6 = v10;
    }
    if (v11) {
      int v5 = v4;
    }
    ++v4;
  }
  while (v4 != 8);
  uint64_t v12 = 0;
  int v13 = kSerialBaudNVRAMTable[4 * v5];
  while (kSerialBaudNVRAMTable[v12] != v13)
  {
    v12 += 4;
    if (v12 == 32)
    {
      uint64_t v14 = 0;
      goto LABEL_21;
    }
  }
  uint64_t v14 = *(const char **)&kSerialBaudNVRAMTable[v12 + 2];
LABEL_21:
  snprintf(__str, 0xAuLL, "%s", v14);
  return AppleBCMWLANProvisioningManager::addStringValToImage(this, "bauddiv", __str);
}

uint64_t AppleBCMWLANProvisioningManager::add24GHzTxCal(AppleBCMWLANProvisioningManager *this)
{
  uint64_t v1 = *((void *)this + 6);
  int v2 = *(_DWORD *)(v1 + 24);
  if ((v2 & 1) == 0) {
    return 0;
  }
  if ((v2 & 0x24) != 0)
  {
    if ((snprintf((char *)(v1 + 640), 0x80uLL, "%d,%d,%d", *(__int16 *)(v1 + 50), *(__int16 *)(v1 + 46), *(__int16 *)(v1 + 48))- 128) < 0xFFFFFF81)
    {
      return 3758097086;
    }
    else
    {
      int v5 = (char *)(*((void *)this + 6) + 640);
      return AppleBCMWLANProvisioningManager::addStringValToImage(this, "pa2ga0", v5);
    }
  }
  else
  {
    uint64_t result = AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa0b0", *(_WORD *)(v1 + 46), v1 + 600);
    if (!result)
    {
      uint64_t result = AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa0b1", *(_WORD *)(*((void *)this + 6) + 48), *((void *)this + 6) + 600);
      if (!result)
      {
        uint64_t v6 = *((void *)this + 6);
        unsigned __int16 v7 = *(_WORD *)(v6 + 50);
        return AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa0b2", v7, v6 + 600);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANProvisioningManager::add5GHzTxal(AppleBCMWLANProvisioningManager *this)
{
  uint64_t v1 = *((void *)this + 6);
  if ((*(unsigned char *)(v1 + 24) & 2) == 0) {
    return 0;
  }
  uint64_t result = AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa1lob0", *(_WORD *)(v1 + 52), v1 + 600);
  if (!result)
  {
    uint64_t result = AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa1lob1", *(_WORD *)(*((void *)this + 6) + 54), *((void *)this + 6) + 600);
    if (!result)
    {
      uint64_t result = AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa1lob2", *(_WORD *)(*((void *)this + 6) + 56), *((void *)this + 6) + 600);
      if (!result)
      {
        uint64_t result = AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa1b0", *(_WORD *)(*((void *)this + 6) + 58), *((void *)this + 6) + 600);
        if (!result)
        {
          uint64_t result = AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa1b1", *(_WORD *)(*((void *)this + 6) + 60), *((void *)this + 6) + 600);
          if (!result)
          {
            uint64_t result = AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa1b2", *(_WORD *)(*((void *)this + 6) + 62), *((void *)this + 6) + 600);
            if (!result)
            {
              uint64_t result = AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa1hib0", *(_WORD *)(*((void *)this + 6) + 64), *((void *)this + 6) + 600);
              if (!result)
              {
                uint64_t result = AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa1hib1", *(_WORD *)(*((void *)this + 6) + 66), *((void *)this + 6) + 600);
                if (!result)
                {
                  uint64_t v4 = *((void *)this + 6);
                  unsigned __int16 v5 = *(_WORD *)(v4 + 68);
                  return AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa1hib2", v5, v4 + 600);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANProvisioningManager::add24GHzMimoCal(AppleBCMWLANProvisioningManager *this)
{
  uint64_t v1 = *((void *)this + 6);
  int v2 = *(_DWORD *)(v1 + 24);
  if ((v2 & 8) == 0) {
    return 0;
  }
  if ((v2 & 0x24) == 0)
  {
    uint64_t v6 = AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa2gw1a0", *(_WORD *)(v1 + 94), v1 + 600);
    if (!v6)
    {
      uint64_t v6 = AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa2gw2a0", *(_WORD *)(*((void *)this + 6) + 96), *((void *)this + 6) + 600);
      if (!v6)
      {
        uint64_t v6 = AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa2gw0a0", *(_WORD *)(*((void *)this + 6) + 98), *((void *)this + 6) + 600);
        if (!v6)
        {
          uint64_t v6 = AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa2gw1a1", *(_WORD *)(*((void *)this + 6) + 100), *((void *)this + 6) + 600);
          if (!v6)
          {
            uint64_t v6 = AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa2gw2a1", *(_WORD *)(*((void *)this + 6) + 102), *((void *)this + 6) + 600);
            if (!v6)
            {
              uint64_t v8 = *((void *)this + 6);
              unsigned __int16 v9 = *(_WORD *)(v8 + 104);
              return AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa2gw0a1", v9, v8 + 600);
            }
          }
        }
      }
    }
    return v6;
  }
  uint64_t v3 = 3758097086;
  if ((snprintf((char *)(v1 + 640), 0x80uLL, "%d,%d,%d", *(__int16 *)(v1 + 98), *(__int16 *)(v1 + 94), *(__int16 *)(v1 + 96))- 128) < 0xFFFFFF81)return v3; {
  uint64_t v6 = AppleBCMWLANProvisioningManager::addStringValToImage(this, "pa2ga0", (char *)(*((void *)this + 6) + 640));
  }
  if (v6) {
    return v6;
  }
  if ((snprintf((char *)(*((void *)this + 6) + 640), 0x80uLL, "%d,%d,%d", *(__int16 *)(*((void *)this + 6) + 104), *(__int16 *)(*((void *)this + 6) + 100), *(__int16 *)(*((void *)this + 6) + 102))- 128) < 0xFFFFFF81)return v3; {
  unsigned __int16 v7 = (char *)(*((void *)this + 6) + 640);
  }
  return AppleBCMWLANProvisioningManager::addStringValToImage(this, "pa2ga1", v7);
}

uint64_t AppleBCMWLANProvisioningManager::add5GHzMimoCal(AppleBCMWLANProvisioningManager *this)
{
  uint64_t v1 = *((void *)this + 6);
  if ((*(unsigned char *)(v1 + 24) & 0x10) == 0) {
    return 0;
  }
  uint64_t result = AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa5glw1a0", *(_WORD *)(v1 + 106), v1 + 600);
  if (!result)
  {
    uint64_t result = AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa5glw2a0", *(_WORD *)(*((void *)this + 6) + 108), *((void *)this + 6) + 600);
    if (!result)
    {
      uint64_t result = AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa5glw0a0", *(_WORD *)(*((void *)this + 6) + 110), *((void *)this + 6) + 600);
      if (!result)
      {
        uint64_t result = AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa5gw1a0", *(_WORD *)(*((void *)this + 6) + 112), *((void *)this + 6) + 600);
        if (!result)
        {
          uint64_t result = AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa5gw2a0", *(_WORD *)(*((void *)this + 6) + 114), *((void *)this + 6) + 600);
          if (!result)
          {
            uint64_t result = AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa5gw0a0", *(_WORD *)(*((void *)this + 6) + 116), *((void *)this + 6) + 600);
            if (!result)
            {
              uint64_t result = AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa5ghw1a0", *(_WORD *)(*((void *)this + 6) + 118), *((void *)this + 6) + 600);
              if (!result)
              {
                uint64_t result = AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa5ghw2a0", *(_WORD *)(*((void *)this + 6) + 120), *((void *)this + 6) + 600);
                if (!result)
                {
                  uint64_t result = AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa5ghw0a0", *(_WORD *)(*((void *)this + 6) + 122), *((void *)this + 6) + 600);
                  if (!result)
                  {
                    uint64_t result = AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa5glw1a1", *(_WORD *)(*((void *)this + 6) + 124), *((void *)this + 6) + 600);
                    if (!result)
                    {
                      uint64_t result = AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa5glw2a1", *(_WORD *)(*((void *)this + 6) + 126), *((void *)this + 6) + 600);
                      if (!result)
                      {
                        uint64_t result = AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa5glw0a1", *(_WORD *)(*((void *)this + 6) + 128), *((void *)this + 6) + 600);
                        if (!result)
                        {
                          uint64_t result = AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa5gw1a1", *(_WORD *)(*((void *)this + 6) + 130), *((void *)this + 6) + 600);
                          if (!result)
                          {
                            uint64_t result = AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa5gw2a1", *(_WORD *)(*((void *)this + 6) + 132), *((void *)this + 6) + 600);
                            if (!result)
                            {
                              uint64_t result = AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa5gw0a1", *(_WORD *)(*((void *)this + 6) + 134), *((void *)this + 6) + 600);
                              if (!result)
                              {
                                uint64_t result = AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa5ghw1a1", *(_WORD *)(*((void *)this + 6) + 136), *((void *)this + 6) + 600);
                                if (!result)
                                {
                                  uint64_t result = AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa5ghw2a1", *(_WORD *)(*((void *)this + 6) + 138), *((void *)this + 6) + 600);
                                  if (!result)
                                  {
                                    uint64_t v4 = *((void *)this + 6);
                                    unsigned __int16 v5 = *(_WORD *)(v4 + 140);
                                    return AppleBCMWLANProvisioningManager::addSInt16ValToImage((uint64_t)this, "pa5ghw0a1", v5, v4 + 600);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANProvisioningManager::add5GHzWithXBandCal(AppleBCMWLANProvisioningManager *this)
{
  uint64_t v1 = *((void *)this + 6);
  if ((*(unsigned char *)(v1 + 24) & 4) == 0) {
    return 0;
  }
  if ((snprintf((char *)(v1 + 640), 0x80uLL, "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d", *(__int16 *)(v1 + 70), *(__int16 *)(v1 + 72), *(__int16 *)(v1 + 74), *(__int16 *)(v1 + 76), *(__int16 *)(v1 + 78), *(__int16 *)(v1 + 80), *(__int16 *)(v1 + 82), *(__int16 *)(v1 + 84), *(__int16 *)(v1 + 86), *(__int16 *)(v1 + 88), *(__int16 *)(v1 + 90), *(__int16 *)(v1 + 92))- 128) < 0xFFFFFF81)return 3758097086; {
  uint64_t v4 = (char *)(*((void *)this + 6) + 640);
  }
  return AppleBCMWLANProvisioningManager::addStringValToImage(this, "pa5ga0", v4);
}

uint64_t AppleBCMWLANProvisioningManager::add5GHzMimoWithXBandCal(AppleBCMWLANProvisioningManager *this)
{
  uint64_t v1 = *((void *)this + 6);
  if ((*(unsigned char *)(v1 + 24) & 0x20) == 0) {
    return 0;
  }
  uint64_t v2 = 3758097086;
  if ((snprintf((char *)(v1 + 640), 0x80uLL, "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d", *(__int16 *)(v1 + 142), *(__int16 *)(v1 + 144), *(__int16 *)(v1 + 146), *(__int16 *)(v1 + 148), *(__int16 *)(v1 + 150), *(__int16 *)(v1 + 152), *(__int16 *)(v1 + 154), *(__int16 *)(v1 + 156), *(__int16 *)(v1 + 158), *(__int16 *)(v1 + 160), *(__int16 *)(v1 + 162), *(__int16 *)(v1 + 164))- 128) < 0xFFFFFF81)return v2; {
  uint64_t v5 = AppleBCMWLANProvisioningManager::addStringValToImage(this, "pa5ga0", (char *)(*((void *)this + 6) + 640));
  }
  if (v5) {
    return v5;
  }
  uint64_t v6 = *((void *)this + 6);
  if ((snprintf((char *)(v6 + 640), 0x80uLL, "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d", *(__int16 *)(v6 + 166), *(__int16 *)(v6 + 168), *(__int16 *)(v6 + 170), *(__int16 *)(v6 + 172), *(__int16 *)(v6 + 174), *(__int16 *)(v6 + 176), *(__int16 *)(v6 + 178), *(__int16 *)(v6 + 180), *(__int16 *)(v6 + 182), *(__int16 *)(v6 + 184), *(__int16 *)(v6 + 186), *(__int16 *)(v6 + 188))- 128) < 0xFFFFFF81)return v2; {
  unsigned __int16 v7 = (char *)(*((void *)this + 6) + 640);
  }
  return AppleBCMWLANProvisioningManager::addStringValToImage(this, "pa5ga1", v7);
}

uint64_t AppleBCMWLANProvisioningManager::add24GHzRxCal(AppleBCMWLANProvisioningManager *this)
{
  uint64_t v1 = (unsigned char *)*((void *)this + 6);
  if ((v1[24] & 0x40) == 0) {
    return 0;
  }
  uint64_t v2 = 3758097086;
  if ((snprintf(v1 + 640, 0x80uLL, "%d,%d,%d,%d,%d,%d,%d,%d,%d", (char)v1[190], (char)v1[191], (char)v1[192], (char)v1[193], (char)v1[194], (char)v1[195], (char)v1[196], (char)v1[197], (char)v1[198])- 128) < 0xFFFFFF81)return v2; {
  uint64_t v5 = AppleBCMWLANProvisioningManager::addStringValToImage(this, "rssi_gain_delta_2g", (char *)(*((void *)this + 6) + 640));
  }
  if (v5) {
    return v5;
  }
  uint64_t v6 = (char *)*((void *)this + 6);
  if ((snprintf(v6 + 640, 0x80uLL, "%d,%d,%d,%d,%d,%d,%d,%d,%d", v6[199], v6[200], v6[201], v6[202], v6[203], v6[204], v6[205], v6[206], v6[207])- 128) < 0xFFFFFF81)return v2; {
  uint64_t v5 = AppleBCMWLANProvisioningManager::addStringValToImage(this, "rssi_gain_delta_2gh", (char *)(*((void *)this + 6) + 640));
  }
  if (v5) {
    return v5;
  }
  unsigned __int16 v7 = (char *)*((void *)this + 6);
  if ((snprintf(v7 + 640, 0x80uLL, "%d,%d,%d,%d,%d,%d,%d,%d,%d", v7[208], v7[209], v7[210], v7[211], v7[212], v7[213], v7[214], v7[215], v7[216])- 128) < 0xFFFFFF81)return v2; {
  uint64_t v8 = (char *)(*((void *)this + 6) + 640);
  }
  return AppleBCMWLANProvisioningManager::addStringValToImage(this, "rssi_gain_delta_2ghh", v8);
}

uint64_t AppleBCMWLANProvisioningManager::add5GHzRxCal(AppleBCMWLANProvisioningManager *this)
{
  uint64_t v1 = (unsigned char *)*((void *)this + 6);
  if ((v1[24] & 0x80) == 0) {
    return 0;
  }
  uint64_t v2 = 3758097086;
  if ((snprintf(v1 + 640, 0x80uLL, "%d,%d,%d,%d", (char)v1[217], (char)v1[218], (char)v1[219], (char)v1[220])- 128) < 0xFFFFFF81)return v2; {
  uint64_t v5 = AppleBCMWLANProvisioningManager::addStringValToImage(this, "rssi_gain_delta_5gl", (char *)(*((void *)this + 6) + 640));
  }
  if (v5) {
    return v5;
  }
  if ((snprintf((char *)(*((void *)this + 6) + 640), 0x80uLL, "%d,%d,%d,%d", *(char *)(*((void *)this + 6) + 221), *(char *)(*((void *)this + 6) + 222), *(char *)(*((void *)this + 6) + 223), *(char *)(*((void *)this + 6) + 224))- 128) < 0xFFFFFF81)return v2; {
  uint64_t v5 = AppleBCMWLANProvisioningManager::addStringValToImage(this, "rssi_gain_delta_5gml", (char *)(*((void *)this + 6) + 640));
  }
  if (v5) {
    return v5;
  }
  if ((snprintf((char *)(*((void *)this + 6) + 640), 0x80uLL, "%d,%d,%d,%d", *(char *)(*((void *)this + 6) + 225), *(char *)(*((void *)this + 6) + 226), *(char *)(*((void *)this + 6) + 227), *(char *)(*((void *)this + 6) + 228))- 128) < 0xFFFFFF81)return v2; {
  uint64_t v5 = AppleBCMWLANProvisioningManager::addStringValToImage(this, "rssi_gain_delta_5gmu", (char *)(*((void *)this + 6) + 640));
  }
  if (v5) {
    return v5;
  }
  if ((snprintf((char *)(*((void *)this + 6) + 640), 0x80uLL, "%d,%d,%d,%d", *(char *)(*((void *)this + 6) + 229), *(char *)(*((void *)this + 6) + 230), *(char *)(*((void *)this + 6) + 231), *(char *)(*((void *)this + 6) + 232))- 128) < 0xFFFFFF81)return v2; {
  uint64_t v6 = (char *)(*((void *)this + 6) + 640);
  }
  return AppleBCMWLANProvisioningManager::addStringValToImage(this, "rssi_gain_delta_5gh", v6);
}

uint64_t AppleBCMWLANProvisioningManager::add24GHzRxMimoCal(AppleBCMWLANProvisioningManager *this)
{
  uint64_t v1 = (unsigned char *)*((void *)this + 6);
  if ((v1[25] & 1) == 0) {
    return 0;
  }
  uint64_t v2 = 3758097086;
  if ((snprintf(v1 + 640, 0x80uLL, "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d", (char)v1[233], (char)v1[234], (char)v1[235], (char)v1[236], (char)v1[237], (char)v1[238], (char)v1[239], (char)v1[240], (char)v1[241], (char)v1[260], (char)v1[261], (char)v1[262], (char)v1[263], (char)v1[264], (char)v1[265], (char)v1[266],
                        (char)v1[267],
                        (char)v1[268])
                    - 128) < 0xFFFFFF81)
    return v2;
  uint64_t v5 = AppleBCMWLANProvisioningManager::addStringValToImage(this, "rssi_gain_delta_2g", (char *)(*((void *)this + 6) + 640));
  if (v5) {
    return v5;
  }
  uint64_t v6 = (char *)*((void *)this + 6);
  if ((snprintf(v6 + 640, 0x80uLL, "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d", v6[242], v6[243], v6[244], v6[245], v6[246], v6[247], v6[248], v6[249], v6[250], v6[269], v6[270], v6[271], v6[272], v6[273], v6[274], v6[275],
                        v6[276],
                        v6[277])
                    - 128) < 0xFFFFFF81)
    return v2;
  uint64_t v5 = AppleBCMWLANProvisioningManager::addStringValToImage(this, "rssi_gain_delta_2gh", (char *)(*((void *)this + 6) + 640));
  if (v5) {
    return v5;
  }
  unsigned __int16 v7 = (char *)*((void *)this + 6);
  if ((snprintf(v7 + 640, 0x80uLL, "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d", v7[251], v7[252], v7[253], v7[254], v7[255], v7[256], v7[257], v7[258], v7[259], v7[278], v7[279], v7[280], v7[281], v7[282], v7[283], v7[284],
                        v7[285],
                        v7[286])
                    - 128) < 0xFFFFFF81)
    return v2;
  uint64_t v8 = (char *)(*((void *)this + 6) + 640);
  return AppleBCMWLANProvisioningManager::addStringValToImage(this, "rssi_gain_delta_2ghh", v8);
}

uint64_t AppleBCMWLANProvisioningManager::add5GHzRxMimoCal(AppleBCMWLANProvisioningManager *this)
{
  uint64_t v1 = (unsigned char *)*((void *)this + 6);
  if ((v1[25] & 2) == 0) {
    return 0;
  }
  uint64_t v2 = 3758097086;
  if ((snprintf(v1 + 640, 0x80uLL, "%d,%d,%d,%d,%d,%d,%d,%d", (char)v1[287], (char)v1[288], (char)v1[289], (char)v1[290], (char)v1[303], (char)v1[304], (char)v1[305], (char)v1[306])- 128) < 0xFFFFFF81)return v2; {
  uint64_t v5 = AppleBCMWLANProvisioningManager::addStringValToImage(this, "rssi_gain_delta_5gl", (char *)(*((void *)this + 6) + 640));
  }
  if (v5) {
    return v5;
  }
  uint64_t v6 = (char *)*((void *)this + 6);
  if ((snprintf(v6 + 640, 0x80uLL, "%d,%d,%d,%d,%d,%d,%d,%d", v6[291], v6[292], v6[293], v6[294], v6[307], v6[308], v6[309], v6[310])- 128) < 0xFFFFFF81)return v2; {
  uint64_t v5 = AppleBCMWLANProvisioningManager::addStringValToImage(this, "rssi_gain_delta_5gml", (char *)(*((void *)this + 6) + 640));
  }
  if (v5) {
    return v5;
  }
  unsigned __int16 v7 = (char *)*((void *)this + 6);
  if ((snprintf(v7 + 640, 0x80uLL, "%d,%d,%d,%d,%d,%d,%d,%d", v7[295], v7[296], v7[297], v7[298], v7[311], v7[312], v7[313], v7[314])- 128) < 0xFFFFFF81)return v2; {
  uint64_t v5 = AppleBCMWLANProvisioningManager::addStringValToImage(this, "rssi_gain_delta_5gmu", (char *)(*((void *)this + 6) + 640));
  }
  if (v5) {
    return v5;
  }
  uint64_t v8 = (char *)*((void *)this + 6);
  if ((snprintf(v8 + 640, 0x80uLL, "%d,%d,%d,%d,%d,%d,%d,%d", v8[299], v8[300], v8[301], v8[302], v8[315], v8[316], v8[317], v8[318])- 128) < 0xFFFFFF81)return v2; {
  unsigned __int16 v9 = (char *)(*((void *)this + 6) + 640);
  }
  return AppleBCMWLANProvisioningManager::addStringValToImage(this, "rssi_gain_delta_5gh", v9);
}

uint64_t AppleBCMWLANProvisioningManager::addRxTempCal(AppleBCMWLANProvisioningManager *this)
{
  uint64_t v1 = (unsigned char *)*((void *)this + 6);
  if ((v1[25] & 4) == 0) {
    return 0;
  }
  if ((snprintf(v1 + 640, 0x80uLL, "%d", v1[319]) - 128) < 0xFFFFFF81) {
    return 3758097086;
  }
  uint64_t v4 = (char *)(*((void *)this + 6) + 640);
  return AppleBCMWLANProvisioningManager::addStringValToImage(this, "gain_cal_temp", v4);
}

uint64_t AppleBCMWLANProvisioningManager::addRxFreqgroupCal(AppleBCMWLANProvisioningManager *this)
{
  uint64_t v1 = *((void *)this + 6);
  if ((*(unsigned char *)(v1 + 26) & 1) == 0) {
    return 0;
  }
  unsigned int v5 = 0;
  uint64_t v2 = 3758097086;
  *(_OWORD *)(v1 + 736) = 0u;
  *(_OWORD *)(v1 + 752) = 0u;
  *(_OWORD *)(v1 + 704) = 0u;
  *(_OWORD *)(v1 + 720) = 0u;
  *(_OWORD *)(v1 + 672) = 0u;
  *(_OWORD *)(v1 + 688) = 0u;
  uint64_t v6 = 324;
  *(_OWORD *)(v1 + 640) = 0u;
  *(_OWORD *)(v1 + 656) = 0u;
  while (1)
  {
    int v7 = snprintf((char *)(*((void *)this + 6) + v5 + 640), 128 - v5, "0x%02x,", *(unsigned __int8 *)(*((void *)this + 6) + v6));
    if (v7 < 1 || 128 - (unint64_t)v5 <= v7) {
      break;
    }
    ++v6;
    v5 += v7;
    if (v6 == 331)
    {
      *(unsigned char *)(*((void *)this + 6) + v5 - 1 + 640) = 0;
      if (v5 - 128 < 0xFFFFFF81) {
        return v2;
      }
      unsigned __int16 v9 = (char *)(*((void *)this + 6) + 640);
      return AppleBCMWLANProvisioningManager::addStringValToImage(this, "rssi_cal_freq_grp_2g", v9);
    }
  }
  return v2;
}

uint64_t AppleBCMWLANProvisioningManager::addRx4350Cal(AppleBCMWLANProvisioningManager *this)
{
  uint64_t v2 = *((void *)this + 6);
  int v3 = *(_DWORD *)(v2 + 24);
  if ((v3 & 0x1000) != 0)
  {
    uint64_t result = AppleBCMWLANProvisioningManager::prepareNVRAMString(this, (void *)(v2 + 640), 0x80u, (char *)(v2 + 332), 0x10u, "rssi_delta_2gb0");
    if (result) {
      return result;
    }
    uint64_t result = AppleBCMWLANProvisioningManager::prepareNVRAMString(this, (void *)(*((void *)this + 6) + 640), 0x80u, (char *)(*((void *)this + 6) + 348), 0x10u, "rssi_delta_2gb1");
    if (result) {
      return result;
    }
    uint64_t result = AppleBCMWLANProvisioningManager::prepareNVRAMString(this, (void *)(*((void *)this + 6) + 640), 0x80u, (char *)(*((void *)this + 6) + 364), 0x10u, "rssi_delta_2gb2");
    if (result) {
      return result;
    }
    uint64_t result = AppleBCMWLANProvisioningManager::prepareNVRAMString(this, (void *)(*((void *)this + 6) + 640), 0x80u, (char *)(*((void *)this + 6) + 380), 0x10u, "rssi_delta_2gb3");
    if (result) {
      return result;
    }
    uint64_t result = AppleBCMWLANProvisioningManager::prepareNVRAMString(this, (void *)(*((void *)this + 6) + 640), 0x80u, (char *)(*((void *)this + 6) + 396), 0x10u, "rssi_delta_2gb4");
    if (result) {
      return result;
    }
    uint64_t v2 = *((void *)this + 6);
    int v3 = *(_DWORD *)(v2 + 24);
  }
  if ((v3 & 0x2000) == 0) {
    return 0;
  }
  uint64_t result = AppleBCMWLANProvisioningManager::prepareNVRAMString(this, (void *)(v2 + 640), 0x80u, (char *)(v2 + 412), 0x18u, "rssi_delta_5gl");
  if (!result)
  {
    uint64_t result = AppleBCMWLANProvisioningManager::prepareNVRAMString(this, (void *)(*((void *)this + 6) + 640), 0x80u, (char *)(*((void *)this + 6) + 436), 0x18u, "rssi_delta_5gml");
    if (!result)
    {
      uint64_t result = AppleBCMWLANProvisioningManager::prepareNVRAMString(this, (void *)(*((void *)this + 6) + 640), 0x80u, (char *)(*((void *)this + 6) + 460), 0x18u, "rssi_delta_5gmu");
      if (!result)
      {
        uint64_t v5 = *((void *)this + 6);
        return AppleBCMWLANProvisioningManager::prepareNVRAMString(this, (void *)(v5 + 640), 0x80u, (char *)(v5 + 484), 0x18u, "rssi_delta_5gh");
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANProvisioningManager::prepareNVRAMString(AppleBCMWLANProvisioningManager *a1, void *a2, unsigned int a3, char *a4, unsigned int a5, const char *a6)
{
  bzero(a2, a3);
  if (a5)
  {
    unsigned int v12 = 0;
    uint64_t v13 = a5;
    while (1)
    {
      int v14 = *a4++;
      unsigned int v15 = snprintf((char *)a2 + v12, a3 - v12, "%d,", v14);
      if ((v15 & 0x80000000) != 0 || v15 >= a3 - v12) {
        return 3758097086;
      }
      v12 += v15;
      if (!--v13)
      {
        uint64_t v16 = v12 - 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v16 = 0xFFFFFFFFLL;
LABEL_8:
    *((unsigned char *)a2 + v16) = 0;
    return AppleBCMWLANProvisioningManager::addStringValToImage(a1, a6, (char *)a2);
  }
}

uint64_t AppleBCMWLANProvisioningManager::addRx4345Cal(AppleBCMWLANProvisioningManager *this)
{
  uint64_t v2 = *((void *)this + 6);
  int v3 = *(_DWORD *)(v2 + 24);
  if ((v3 & 0x4000) != 0)
  {
    uint64_t result = AppleBCMWLANProvisioningManager::prepareNVRAMString(this, (void *)(v2 + 640), 0x80u, (char *)(v2 + 508), 8u, "rssi_delta_2gb0");
    if (result) {
      return result;
    }
    uint64_t result = AppleBCMWLANProvisioningManager::prepareNVRAMString(this, (void *)(*((void *)this + 6) + 640), 0x80u, (char *)(*((void *)this + 6) + 516), 8u, "rssi_delta_2gb1");
    if (result) {
      return result;
    }
    uint64_t result = AppleBCMWLANProvisioningManager::prepareNVRAMString(this, (void *)(*((void *)this + 6) + 640), 0x80u, (char *)(*((void *)this + 6) + 524), 8u, "rssi_delta_2gb2");
    if (result) {
      return result;
    }
    uint64_t result = AppleBCMWLANProvisioningManager::prepareNVRAMString(this, (void *)(*((void *)this + 6) + 640), 0x80u, (char *)(*((void *)this + 6) + 532), 8u, "rssi_delta_2gb3");
    if (result) {
      return result;
    }
    uint64_t result = AppleBCMWLANProvisioningManager::prepareNVRAMString(this, (void *)(*((void *)this + 6) + 640), 0x80u, (char *)(*((void *)this + 6) + 540), 8u, "rssi_delta_2gb4");
    if (result) {
      return result;
    }
    uint64_t v2 = *((void *)this + 6);
    int v3 = *(_DWORD *)(v2 + 24);
  }
  if ((v3 & 0x8000) == 0) {
    return 0;
  }
  uint64_t result = AppleBCMWLANProvisioningManager::prepareNVRAMString(this, (void *)(v2 + 640), 0x80u, (char *)(v2 + 548), 0xCu, "rssi_delta_5gl");
  if (!result)
  {
    uint64_t result = AppleBCMWLANProvisioningManager::prepareNVRAMString(this, (void *)(*((void *)this + 6) + 640), 0x80u, (char *)(*((void *)this + 6) + 560), 0xCu, "rssi_delta_5gml");
    if (!result)
    {
      uint64_t result = AppleBCMWLANProvisioningManager::prepareNVRAMString(this, (void *)(*((void *)this + 6) + 640), 0x80u, (char *)(*((void *)this + 6) + 572), 0xCu, "rssi_delta_5gmu");
      if (!result)
      {
        uint64_t v5 = *((void *)this + 6);
        return AppleBCMWLANProvisioningManager::prepareNVRAMString(this, (void *)(v5 + 640), 0x80u, (char *)(v5 + 584), 0xCu, "rssi_delta_5gh");
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANProvisioningManager::generateProvisionedNVRAMParameters(AppleBCMWLANProvisioningManager *a1, IO80211Buffer *this, void *a3)
{
  unint64_t v6 = a3[2];
  *(void *)(*((void *)a1 + 6) + 600) = a3[3];
  *(void *)(*((void *)a1 + 6) + 608) = IO80211Buffer::getBytesNoCopy(this, v6, *(void *)(*((void *)a1 + 6) + 600));
  *(void *)(*((void *)a1 + 6) + 616) = 0;
  unint64_t v7 = a3[4];
  unint64_t v8 = a3[5];
  *(void *)(*((void *)a1 + 6) + 632) = v8;
  *(void *)(*((void *)a1 + 6) + 624) = IO80211Buffer::getBytesNoCopy(this, v7, v8);
  uint64_t v9 = AppleBCMWLANProvisioningManager::addBaudRate(a1);
  if (v9) {
    return v9;
  }
  uint64_t v9 = AppleBCMWLANProvisioningManager::add24GHzTxCal(a1);
  if (v9) {
    return v9;
  }
  uint64_t v9 = AppleBCMWLANProvisioningManager::add5GHzTxal(a1);
  if (v9) {
    return v9;
  }
  uint64_t v9 = AppleBCMWLANProvisioningManager::add24GHzMimoCal(a1);
  if (v9) {
    return v9;
  }
  uint64_t v9 = AppleBCMWLANProvisioningManager::add5GHzMimoCal(a1);
  if (v9) {
    return v9;
  }
  uint64_t v9 = AppleBCMWLANProvisioningManager::add5GHzWithXBandCal(a1);
  if (v9) {
    return v9;
  }
  uint64_t v9 = AppleBCMWLANProvisioningManager::add5GHzMimoWithXBandCal(a1);
  if (v9) {
    return v9;
  }
  uint64_t v9 = AppleBCMWLANProvisioningManager::add24GHzRxCal(a1);
  if (v9) {
    return v9;
  }
  uint64_t v9 = AppleBCMWLANProvisioningManager::add5GHzRxCal(a1);
  if (v9) {
    return v9;
  }
  if ((*(unsigned char *)(*((void *)a1 + 6) + 597) & 1) == 0)
  {
    uint64_t v9 = AppleBCMWLANProvisioningManager::add24GHzRxMimoCal(a1);
    if (v9) {
      return v9;
    }
    uint64_t v9 = AppleBCMWLANProvisioningManager::add5GHzRxMimoCal(a1);
    if (v9) {
      return v9;
    }
  }
  uint64_t v9 = AppleBCMWLANProvisioningManager::addRxTempCal(a1);
  if (v9) {
    return v9;
  }
  uint64_t v9 = AppleBCMWLANProvisioningManager::addRxFreqgroupCal(a1);
  if (v9) {
    return v9;
  }
  uint64_t v9 = AppleBCMWLANProvisioningManager::addRx4350Cal(a1);
  if (v9) {
    return v9;
  }
  uint64_t v9 = AppleBCMWLANProvisioningManager::addRx4345Cal(a1);
  if (v9) {
    return v9;
  }
  uint64_t v10 = *((void *)a1 + 6);
  unint64_t v11 = *(void *)(v10 + 616);
  unint64_t v12 = *(void *)(v10 + 600);
  unsigned int v13 = v12 - v11;
  if (v12 >= v11)
  {
    unsigned int v15 = snprintf((char *)(*(void *)(v10 + 608) + v11), (v12 - v11), "macaddr=%02x:%02x:%02x:%02x:%02x:%02x", *(unsigned __int8 *)(v10 + 28), *(unsigned __int8 *)(v10 + 29), *(unsigned __int8 *)(v10 + 30), *(unsigned __int8 *)(v10 + 31), *(unsigned __int8 *)(v10 + 32), *(unsigned __int8 *)(v10 + 33));
    if ((v15 & 0x80000000) != 0 || v15 > v13)
    {
      uint64_t v14 = 3758097115;
      if (*(void *)(*((void *)a1 + 6) + 8) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*((void *)a1 + 6) + 8), "[dk] %s@%d: Error, can't fit MAC Address into vars (printed %d)\n");
      }
    }
    else
    {
      *(void *)(*((void *)a1 + 6) + 616) += v15 + 1;
      uint64_t v16 = *(void *)(*((void *)a1 + 6) + 616);
      a3[3] = v16;
      unint64_t v17 = *(void *)(*((void *)a1 + 6) + 632);
      a3[5] = v17;
      uint64_t BytesNoCopy = (void *)IO80211Buffer::getBytesNoCopy(this, a3[2] + v16, v17);
      long long v19 = (const void *)IO80211Buffer::getBytesNoCopy(this, a3[4], v17);
      if (BytesNoCopy && v19)
      {
        memmove(BytesNoCopy, v19, v17);
        uint64_t v14 = 0;
        a3[4] = a3[3] + a3[2];
      }
      else
      {
        uint64_t v14 = 3758097097;
        if (*(void *)(*((void *)a1 + 6) + 8) && CCLogStream::shouldLog()) {
          CCLogStream::logCrit(*(CCLogStream **)(*((void *)a1 + 6) + 8), "[dk] %s@%d: Invalid buffer address for nvram file copy\n", "generateProvisionedNVRAMParameters", 2485);
        }
      }
    }
  }
  else
  {
    uint64_t v14 = 3758097115;
    if (*(void *)(v10 + 8) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)a1 + 6) + 8), "[dk] %s@%d:Error, the total length of vars data (%llu) is longer than the max supported (%llu)\n");
    }
  }
  return v14;
}

uint64_t AppleBCMWLANProvisioningManager::logNVRAM(uint64_t a1, IO80211Buffer *this, unint64_t *a3)
{
  unint64_t v4 = a3[5] + a3[3];
  uint64_t BytesNoCopy = IO80211Buffer::getBytesNoCopy(this, a3[2], v4);
  unint64_t v6 = (unsigned char *)IOMallocZeroData();
  unint64_t v7 = v6;
  if (v6)
  {
    unsigned char *v6 = 0;
    if (!v4) {
      goto LABEL_15;
    }
  }
  else if (!v4)
  {
    goto LABEL_15;
  }
  unint64_t v8 = 0;
  unsigned int v9 = 0;
  do
  {
    unsigned int v10 = 0;
    if (!v7
      || v9 > 0x3FFE
      || (int v11 = 0x4000, v10 = snprintf(&v7[v9], 0x4000 - v9, "%s\n", (const char *)(BytesNoCopy + v8)), !(v10 >> 14)))
    {
      int v11 = v10;
    }
    if (v8 < v4)
    {
      while ((*(unsigned __int8 *)(BytesNoCopy + v8) | 0x20) != 0x20)
      {
        if (v4 == ++v8)
        {
          unint64_t v8 = v4;
          break;
        }
      }
    }
    v9 += v11;
    ++v8;
  }
  while (v8 < v4);
LABEL_15:
  if (v7)
  {
    if (*(void *)(*(void *)(a1 + 48) + 8) && CCLogStream::shouldLog()) {
      CCLogStream::log();
    }
    *unint64_t v7 = 0;
    IOFreeData();
  }
  return 0;
}

BOOL AppleBCMWLANProvisioningManager::checkTxCapTable(int a1, IO80211Buffer *this, uint64_t a3)
{
  uint64_t BytesNoCopy = (_DWORD *)IO80211Buffer::getBytesNoCopy(this, *(void *)(a3 + 96), *(void *)(a3 + 104));
  return *(void *)(a3 + 104) < 0x21uLL || *BytesNoCopy == 1112493122;
}

BOOL AppleBCMWLANProvisioningManager::checkRegulatorTable(int a1, IO80211Buffer *this, uint64_t a3)
{
  uint64_t BytesNoCopy = (_DWORD *)IO80211Buffer::getBytesNoCopy(this, *(void *)(a3 + 80), *(void *)(a3 + 88));
  return *(void *)(a3 + 88) < 0x21uLL || *BytesNoCopy == 1112493122;
}

uint64_t AppleBCMWLANProvisioningManager::checkNormalizedNVRAM(uint64_t a1, IO80211Buffer *this, uint64_t a3)
{
  uint64_t BytesNoCopy = (unsigned __int8 *)IO80211Buffer::getBytesNoCopy(this, *(void *)(a3 + 32), *(void *)(a3 + 40));
  uint64_t v6 = *(void *)(a3 + 40);
  if (v6)
  {
    unsigned int v7 = *BytesNoCopy;
    if (v7 > 0x20 || ((1 << v7) & 0x100000600) == 0)
    {
      char v10 = 0;
      uint64_t v11 = 0;
      while (1)
      {
        unsigned int v12 = BytesNoCopy[v11];
        if (v12 > 0x20 || ((1 << v12) & 0x100000600) == 0)
        {
          char v10 = 0;
        }
        else
        {
          if (v10)
          {
            uint64_t result = *(void *)(*(void *)(a1 + 48) + 8);
            if (result)
            {
              uint64_t result = CCLogStream::shouldLog();
              if (result)
              {
                CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d:Repeated whitespace in vars @ %lu!\n");
                return 0;
              }
            }
            return result;
          }
          if (v12 == 10)
          {
            uint64_t result = *(void *)(*(void *)(a1 + 48) + 8);
            if (result)
            {
              uint64_t result = CCLogStream::shouldLog();
              if (result)
              {
                CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d:Found EOL in vars @ %lu!\n");
                return 0;
              }
            }
            return result;
          }
          char v10 = 1;
        }
        if (v6 == ++v11) {
          goto LABEL_19;
        }
      }
    }
    uint64_t result = *(void *)(*(void *)(a1 + 48) + 8);
    if (!result) {
      return result;
    }
    uint64_t result = CCLogStream::shouldLog();
    if (!result) {
      return result;
    }
    CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d:Leading whitespace in vars @ %lu!\n");
    return 0;
  }
LABEL_19:
  if (!BytesNoCopy[v6 - 1] && !BytesNoCopy[v6 - 2]) {
    return 1;
  }
  uint64_t result = *(void *)(*(void *)(a1 + 48) + 8);
  if (result)
  {
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d:Ending byte %c %c isn't a separator... \n");
      return 0;
    }
  }
  return result;
}

uint64_t AppleBCMWLANProvisioningManager::getNormalizedNVRam(AppleBCMWLANProvisioningManager *this, unsigned __int8 *a2, unint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  uint64_t result = 0;
  if (a3 < 5 || !a2 || !a4 || a5 < 3) {
    return result;
  }
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  char v10 = 0;
  unsigned int v11 = 0;
  uint64_t v12 = 0;
  int v13 = 0;
  int v14 = 0;
  unint64_t v15 = a3 - 2;
  unint64_t v29 = a3 - 2;
  BOOL v30 = a2;
  do
  {
    int v16 = (char)a4[v9];
    if (v16 < 0) {
      return 0;
    }
    unsigned int v17 = a4[v9];
    if (v14 == 2)
    {
      if (v17 > 0xD || ((1 << v16) & 0x2401) == 0) {
LABEL_43:
      }
        int v14 = 2;
      else {
LABEL_16:
      }
        int v14 = 0;
      goto LABEL_44;
    }
    if (v14 != 1)
    {
      if (v17 == 35) {
        goto LABEL_43;
      }
      if (v17 < 0x21) {
        goto LABEL_16;
      }
      a2[v8] = v16;
      uint64_t v18 = (v12 + 1);
      int v14 = 1;
      unsigned int v11 = v12;
      goto LABEL_45;
    }
    if (v16 <= 0xCu)
    {
      if (!v17)
      {
LABEL_27:
        char v31 = v10;
        unsigned int v32 = v11;
        unint64_t v20 = 0;
        size_t v21 = v12 - v11;
        BOOL v22 = 1;
        size_t v23 = &a2[v11];
        do
        {
          size_t v24 = strlen(off_10038A270[v20]);
          if (v24 <= v21)
          {
            if (!v24) {
              break;
            }
            uint64_t v25 = 0;
            uint64_t v26 = v24 <= 1 ? 1 : v24;
            while (off_10038A270[v20][v25] == v23[v25])
            {
              if (v26 == ++v25)
              {
                uint64_t v25 = v26;
                break;
              }
            }
            if (v24 == v25) {
              break;
            }
          }
          BOOL v22 = v20++ < 4;
        }
        while (v20 != 5);
        int v14 = 0;
        if (v22)
        {
          char v10 = 0;
          unsigned int v11 = v32;
          uint64_t v18 = v32;
          unint64_t v15 = v29;
          a2 = v30;
        }
        else
        {
          unsigned int v11 = v32;
          int v27 = v12 - (v31 & 1);
          uint64_t v18 = (v27 + 1);
          unint64_t v15 = v29;
          a2 = v30;
          v30[v27] = 0;
          char v10 = 0;
        }
        goto LABEL_45;
      }
      if (v17 != 9)
      {
        if (v17 != 10) {
          goto LABEL_48;
        }
        goto LABEL_27;
      }
      char v10 = 0;
      int v14 = 1;
LABEL_44:
      uint64_t v18 = v12;
      goto LABEL_45;
    }
    if (v17 == 13) {
      goto LABEL_27;
    }
    if (v17 == 35)
    {
      char v10 = 0;
      goto LABEL_43;
    }
    if (v17 != 32)
    {
LABEL_48:
      char v10 = 0;
      uint64_t v18 = (v12 + 1);
      a2[v8] = v17;
      int v14 = 1;
      goto LABEL_45;
    }
    if (v10)
    {
      int v14 = 1;
      uint64_t v18 = v12;
    }
    else
    {
      uint64_t v18 = (v12 + 1);
      a2[v8] = 32;
      int v14 = 1;
    }
    char v10 = 1;
LABEL_45:
    unint64_t v9 = (v13 + 1);
    uint64_t v8 = v18;
    if (v9 >= a5) {
      break;
    }
    uint64_t v12 = v18;
    ++v13;
  }
  while (v15 > v18);
  uint64_t result = 0;
  if (v9 >= 3 && v18 >= 3)
  {
    if (a2[(v18 - 1)])
    {
      a2[(v18 + 1)] = 0;
      int v28 = 2;
      goto LABEL_58;
    }
    if (a2[(v18 - 2)])
    {
      int v28 = 1;
LABEL_58:
      a2[v18] = 0;
      LODWORD(v18) = v18 + v28;
    }
    return v18;
  }
  return result;
}

uint64_t AppleBCMWLANProvisioningManager::normalizeNVRAM(uint64_t a1, IO80211Buffer *a2, uint64_t a3)
{
  char v21 = 0;
  IOParseBootArgNumber("wlan.debug.enable", &v21, 1);
  unint64_t v6 = *(void *)(a3 + 40) + 2;
  unsigned int v7 = (unsigned __int8 *)IOMallocZeroData();
  unint64_t v8 = *(void *)(a3 + 40) + 2;
  uint64_t v9 = IOMallocZeroData();
  if (v9)
  {
    char v10 = (void *)v9;
    if (!v7)
    {
      IOFreeData();
      return 3758097085;
    }
    if (!a2)
    {
      uint64_t v13 = 3758097090;
      goto LABEL_10;
    }
    uint64_t BytesNoCopy = (void *)IO80211Buffer::getBytesNoCopy(a2, *(void *)(a3 + 32), *(void *)(a3 + 40));
    unint64_t v12 = *(void *)(a3 + 40);
    if (v12 >= 3)
    {
      uint64_t v13 = 3758097115;
      if (v6 < v12 || v8 < v12) {
        goto LABEL_10;
      }
      int v14 = BytesNoCopy;
      unint64_t v15 = (AppleBCMWLANProvisioningManager *)memmove(v10, BytesNoCopy, *(void *)(a3 + 40));
      size_t NormalizedNVRam = AppleBCMWLANProvisioningManager::getNormalizedNVRam(v15, v7, v6, (unsigned __int8 *)v10, v8);
      if (NormalizedNVRam >= 3)
      {
        size_t v17 = NormalizedNVRam;
        if (NormalizedNVRam <= v12 + 2)
        {
          memmove(v14, v7, NormalizedNVRam);
          uint64_t v13 = 0;
          *(void *)(a3 + 40) = v17;
          if (!v21)
          {
LABEL_19:
            IOFreeData();
LABEL_21:
            IOFreeData();
            return v13;
          }
LABEL_10:
          removePropertyHelper(*(IOService **)(*(void *)(a1 + 48) + 16), "NVRAM: source");
          OSDataPtr v18 = OSData::withBytes(v10, v8);
          if ((setPropertyHelper(*(IOService **)(*(void *)(a1 + 48) + 16), "NVRAM: source", v18) & 1) == 0
            && *(void *)(*(void *)(a1 + 48) + 8)
            && CCLogStream::shouldLog())
          {
            CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d:Unable to set %s property\n", "normalizeNVRAM", 2813, "NVRAM: source");
          }
          ((void (*)(OSDataPtr))v18->release)(v18);
          removePropertyHelper(*(IOService **)(*(void *)(a1 + 48) + 16), "NVRAM: normalized");
          OSDataPtr v19 = OSData::withBytes(v7, v6);
          if ((setPropertyHelper(*(IOService **)(*(void *)(a1 + 48) + 16), "NVRAM: normalized", v19) & 1) == 0
            && *(void *)(*(void *)(a1 + 48) + 8)
            && CCLogStream::shouldLog())
          {
            CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d:Unable to set %s property\n", "normalizeNVRAM", 2821, "NVRAM: normalized");
          }
          ((void (*)(OSDataPtr))v19->release)(v19);
          goto LABEL_19;
        }
      }
      if (*(void *)(*(void *)(a1 + 48) + 8) && CCLogStream::shouldLog()) {
        CCLogStream::logEmergency(*(CCLogStream **)(*(void *)(a1 + 48) + 8), "[dk] %s@%d: Failed to normalize NVRAM: nvram length[%zu]\n", "normalizeNVRAM", 2795, v12);
      }
    }
    uint64_t v13 = 3758097086;
    goto LABEL_10;
  }
  uint64_t v13 = 3758097085;
  if (v7) {
    goto LABEL_21;
  }
  return v13;
}

_WORD *CalibrationChainTupleWithXBand::read(_WORD *this, const unsigned __int8 *a2)
{
  this[1] = *(_WORD *)a2;
  this[2] = *((_WORD *)a2 + 1);
  *this = *((_WORD *)a2 + 2);
  this[4] = *((_WORD *)a2 + 3);
  this[5] = *((_WORD *)a2 + 4);
  this[3] = *((_WORD *)a2 + 5);
  this[7] = *((_WORD *)a2 + 6);
  this[8] = *((_WORD *)a2 + 7);
  this[6] = *((_WORD *)a2 + 8);
  this[10] = *((_WORD *)a2 + 9);
  this[11] = *((_WORD *)a2 + 10);
  this[9] = *((_WORD *)a2 + 11);
  return this;
}

void _GLOBAL__sub_I_AppleBCMWLANProvisioningManager_cpp()
{
  kNullRange = 0;
}

OSObject *AppleBCMWLANChipImage::withRange(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  pObject = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANChipImageMetaClass, &pObject)) {
    return 0;
  }
  unint64_t v8 = pObject;
  if (pObject
    && (((uint64_t (*)(OSObject *, uint64_t, void, void, void, void, void, void, void, void, void, void, void, void, void, void, uint64_t, uint64_t))pObject->OSMetaClassBase::__vftable[3].release)(pObject, a1, *a2, a2[1], a2[2], a2[3], a2[4], a2[5], a2[10], a2[11], a2[12], a2[13], a2[6], a2[7], a2[8], a2[9], a3, a4) & 1) == 0)
  {
    ((void (*)(OSObject *))v8->release)(v8);
    return 0;
  }
  return v8;
}

uint64_t AppleBCMWLANChipImage::initWithRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16, uint64_t a17)
{
  kern_return_t Mapping;
  uint64_t v37;

  uint64_t result = OSObject::init((OSObject *)a1);
  if (result)
  {
    uint64_t result = IOMallocZeroTyped();
    *(void *)(a1 + 48) = result;
    if (result)
    {
      *(void *)uint64_t result = a17;
      uint64_t v26 = **(void **)(a1 + 48);
      if (!v26)
      {
        ClassNameHelper = (const char *)getClassNameHelper((OSObject *)a1);
        IOLog("%s::%s(): Unable to get debug logger\n", ClassNameHelper, "initWithRange");
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
      if (a15 + a16 > a2
        || a5 < a3 + a4
        || a7 < a5 + a6
        || a13 < a7 + a8
        || a9 < a13 + a14 && a10
        || a15 < a11 + a12 && a16
        || a11 < a9 + a10 && a12)
      {
        uint64_t result = **(void **)(a1 + 48);
        if (result)
        {
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            CCLogStream::logAlert(**(CCLogStream ***)(a1 + 48), "[dk] %s@%d: the ranges are wrong, image size %lld, fw %lld:%lld, provision %lld:%lld, nvram %lld:%lld signature %lld:%lld reg %lld:%lld txcap %lld:%lld platcfg %lld:%lld\n", "initWithRange", 140, a2, a3, a4, a5, a6, a7, a8, a13, a14);
            return 0;
          }
        }
      }
      else
      {
        uint64_t v28 = *(void *)(a1 + 48);
        *(void *)(v28 + 24) = a3;
        *(void *)(v28 + 32) = a4;
        uint64_t v29 = *(void *)(a1 + 48);
        *(void *)(v29 + 40) = a5;
        *(void *)(v29 + 48) = a6;
        uint64_t v30 = *(void *)(a1 + 48);
        *(void *)(v30 + 56) = a7;
        *(void *)(v30 + 64) = a8;
        uint64_t v31 = *(void *)(a1 + 48);
        *(void *)(v31 + 72) = a13;
        *(void *)(v31 + 80) = a14;
        uint64_t v32 = *(void *)(a1 + 48);
        *(void *)(v32 + 88) = a15;
        *(void *)(v32 + 96) = a16;
        uint64_t v33 = *(void *)(a1 + 48);
        *(void *)(v33 + 104) = a9;
        *(void *)(v33 + 112) = a10;
        uint64_t v34 = *(void *)(a1 + 48);
        *(void *)(v34 + 120) = a11;
        *(void *)(v34 + 128) = a12;
        *(void *)(*(void *)(a1 + 48) + 8) = IO80211Buffer::allocBufferSingle();
        MemoryDescriptor = (IOMemoryDescriptor *)IO80211Buffer::getMemoryDescriptor(*(IO80211Buffer **)(*(void *)(a1 + 48) + 8));
        Mapping = IOMemoryDescriptor::CreateMapping(MemoryDescriptor, 0, 0, 0, a2, 0, (IOMemoryMap **)(*(void *)(a1 + 48) + 192), 0);
        uint64_t v37 = *(void *)(a1 + 48);
        if (Mapping)
        {
          uint64_t result = *(void *)v37;
          if (*(void *)v37)
          {
            uint64_t result = CCLogStream::shouldLog();
            if (result)
            {
              CCLogStream::logAlert(**(CCLogStream ***)(a1 + 48), "[dk] %s@%d: Failed to create buffer memory map\n");
              return 0;
            }
          }
        }
        else
        {
          if (*(void *)(v37 + 8))
          {
            *(_DWORD *)(v37 + 136) = 0;
            return 1;
          }
          uint64_t result = *(void *)v37;
          if (*(void *)v37)
          {
            uint64_t result = CCLogStream::shouldLog();
            if (result)
            {
              CCLogStream::logAlert(**(CCLogStream ***)(a1 + 48), "[dk] %s@%d: Failed to create fImageBD\n");
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANChipImage::initWithRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16, uint64_t a17)
{
  return AppleBCMWLANChipImage::initWithRange(a1 - 40, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

void AppleBCMWLANChipImage::free(OSObject *this)
{
  uint64_t v2 = *(void **)&this[1].refcount;
  if (v2)
  {
    uint64_t v3 = v2[21];
    if (v3)
    {
      (*(void (**)(void))(*(void *)v3 + 16))(v2[21]);
      *(void *)(*(void *)&this[1].refcount + 168) = 0;
      uint64_t v2 = *(void **)&this[1].refcount;
    }
    uint64_t v4 = v2[20];
    if (v4)
    {
      (*(void (**)(void))(*(void *)v4 + 16))(v2[20]);
      *(void *)(*(void *)&this[1].refcount + 160) = 0;
      uint64_t v2 = *(void **)&this[1].refcount;
    }
    uint64_t v5 = v2[23];
    if (v5)
    {
      (*(void (**)(void))(*(void *)v5 + 16))(v2[23]);
      *(void *)(*(void *)&this[1].refcount + 184) = 0;
      uint64_t v2 = *(void **)&this[1].refcount;
    }
    uint64_t v6 = v2[19];
    if (v6)
    {
      (*(void (**)(void))(*(void *)v6 + 16))(v2[19]);
      *(void *)(*(void *)&this[1].refcount + 152) = 0;
      uint64_t v2 = *(void **)&this[1].refcount;
    }
    uint64_t v7 = v2[18];
    if (v7)
    {
      (*(void (**)(void))(*(void *)v7 + 16))(v2[18]);
      *(void *)(*(void *)&this[1].refcount + 144) = 0;
      uint64_t v2 = *(void **)&this[1].refcount;
    }
    if (v2[1])
    {
      IO80211Buffer::returnBuffer((IO80211Buffer *)v2[1]);
      *(void *)(*(void *)&this[1].refcount + 8) = 0;
      uint64_t v2 = *(void **)&this[1].refcount;
    }
    uint64_t v8 = v2[2];
    if (v8)
    {
      (*(void (**)(void))(*(void *)v8 + 72))(v2[2]);
      uint64_t v2 = *(void **)&this[1].refcount;
      uint64_t v9 = v2[2];
      if (v9)
      {
        (*(void (**)(void))(*(void *)v9 + 16))(v2[2]);
        *(void *)(*(void *)&this[1].refcount + 16) = 0;
        uint64_t v2 = *(void **)&this[1].refcount;
      }
    }
    if (*v2)
    {
      (*(void (**)(void))(*(void *)*v2 + 16))(*v2);
      **(void **)&this[1].refcount = 0;
      uint64_t v2 = *(void **)&this[1].refcount;
    }
    uint64_t v10 = v2[24];
    if (v10)
    {
      (*(void (**)(void))(*(void *)v10 + 16))(v2[24]);
      *(void *)(*(void *)&this[1].refcount + 192) = 0;
      uint64_t v2 = *(void **)&this[1].refcount;
    }
    memset_s(v2, 0x158uLL, 0, 0x158uLL);
    unsigned int v11 = *(void **)&this[1].refcount;
    if (v11)
    {
      IOFree(v11, 0x158uLL);
      *(void *)&this[1].refcount = 0;
    }
  }
  OSObject::free(this);
}

void non-virtual thunk to'AppleBCMWLANChipImage::free(AppleBCMWLANChipImage *this)
{
}

uint64_t AppleBCMWLANChipImage::prepareMapping(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  unint64_t v5 = *(void *)(v4 + 24);
  unint64_t v6 = *(void *)(v4 + 32);
  unint64_t MemoryDescriptor = IO80211Buffer::getMemoryDescriptor(*(IO80211Buffer **)(v4 + 8));
  if (IOMemoryDescriptor::CreateSubMemoryDescriptor((IOMemoryDescriptor *)3, v5, v6, MemoryDescriptor, (IOMemoryDescriptor *)(*(void *)(a1 + 48) + 144), v8))
  {
    uint64_t v9 = 3758097096;
    if (**(void **)(a1 + 48) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(**(CCLogStream ***)(a1 + 48), "[dk] %s@%d: Failed to create fFirmwareMap\n");
    }
    return v9;
  }
  *a2 = 1;
  IOMemoryDescriptor::GetLength(*(IOMemoryDescriptor **)(*(void *)(a1 + 48) + 144), a2 + 1);
  uint64_t v10 = *(void *)(a1 + 48);
  unint64_t v11 = *(void *)(v10 + 56);
  unint64_t v12 = *(void *)(v10 + 64);
  unint64_t v13 = IO80211Buffer::getMemoryDescriptor(*(IO80211Buffer **)(v10 + 8));
  if (IOMemoryDescriptor::CreateSubMemoryDescriptor((IOMemoryDescriptor *)3, v11, v12, v13, (IOMemoryDescriptor *)(*(void *)(a1 + 48) + 152), v14))
  {
    uint64_t v9 = 3758097096;
    if (**(void **)(a1 + 48) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(**(CCLogStream ***)(a1 + 48), "[dk] %s@%d: Failed to create fNVRAMMap\n");
    }
    return v9;
  }
  a2[3] = 2;
  IOMemoryDescriptor::GetLength(*(IOMemoryDescriptor **)(*(void *)(a1 + 48) + 152), a2 + 4);
  uint64_t v16 = *(void *)(a1 + 48);
  unint64_t v17 = *(void *)(v16 + 80);
  if (v17)
  {
    unint64_t v18 = *(void *)(v16 + 72);
    unint64_t v19 = IO80211Buffer::getMemoryDescriptor(*(IO80211Buffer **)(v16 + 8));
    if (IOMemoryDescriptor::CreateSubMemoryDescriptor((IOMemoryDescriptor *)3, v18, v17, v19, (IOMemoryDescriptor *)(*(void *)(a1 + 48) + 160), v20))
    {
      uint64_t v9 = 3758097096;
      if (**(void **)(a1 + 48) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(**(CCLogStream ***)(a1 + 48), "[dk] %s@%d: Failed to create fSignatureMap\n");
      }
      return v9;
    }
    a2[5] = 3;
    IOMemoryDescriptor::GetLength(*(IOMemoryDescriptor **)(*(void *)(a1 + 48) + 160), a2 + 6);
    uint64_t v16 = *(void *)(a1 + 48);
  }
  unint64_t v21 = *(void *)(v16 + 96);
  if (v21)
  {
    unint64_t v22 = *(void *)(v16 + 88);
    unint64_t v23 = IO80211Buffer::getMemoryDescriptor(*(IO80211Buffer **)(v16 + 8));
    if (IOMemoryDescriptor::CreateSubMemoryDescriptor((IOMemoryDescriptor *)3, v22, v21, v23, (IOMemoryDescriptor *)(*(void *)(a1 + 48) + 184), v24))
    {
      uint64_t v9 = 3758097096;
      if (**(void **)(a1 + 48) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(**(CCLogStream ***)(a1 + 48), "[dk] %s@%d: Failed to create fPlatcfgMap\n");
      }
      return v9;
    }
    a2[7] = 6;
    IOMemoryDescriptor::GetLength(*(IOMemoryDescriptor **)(*(void *)(a1 + 48) + 184), a2 + 8);
    uint64_t v16 = *(void *)(a1 + 48);
  }
  unint64_t v25 = *(void *)(v16 + 112);
  if (v25)
  {
    unint64_t v26 = *(void *)(v16 + 104);
    unint64_t v27 = IO80211Buffer::getMemoryDescriptor(*(IO80211Buffer **)(v16 + 8));
    if (IOMemoryDescriptor::CreateSubMemoryDescriptor((IOMemoryDescriptor *)3, v26, v25, v27, (IOMemoryDescriptor *)(*(void *)(a1 + 48) + 168), v28))
    {
      uint64_t v9 = 3758097096;
      if (**(void **)(a1 + 48) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(**(CCLogStream ***)(a1 + 48), "[dk] %s@%d: Failed to create fRegTable\n");
      }
      return v9;
    }
    a2[10] = 4;
    IOMemoryDescriptor::GetLength(*(IOMemoryDescriptor **)(*(void *)(a1 + 48) + 168), a2 + 11);
    uint64_t v16 = *(void *)(a1 + 48);
  }
  unint64_t v29 = *(void *)(v16 + 128);
  if (!v29) {
    return 0;
  }
  unint64_t v30 = *(void *)(v16 + 120);
  unint64_t v31 = IO80211Buffer::getMemoryDescriptor(*(IO80211Buffer **)(v16 + 8));
  if (!IOMemoryDescriptor::CreateSubMemoryDescriptor((IOMemoryDescriptor *)3, v30, v29, v31, (IOMemoryDescriptor *)(*(void *)(a1 + 48) + 176), v32))
  {
    a2[13] = 5;
    IOMemoryDescriptor::GetLength(*(IOMemoryDescriptor **)(*(void *)(a1 + 48) + 176), a2 + 14);
    return 0;
  }
  uint64_t v9 = 3758097096;
  if (**(void **)(a1 + 48) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(**(CCLogStream ***)(a1 + 48), "[dk] %s@%d: Failed to create fTxCapTable\n");
  }
  return v9;
}

uint64_t non-virtual thunk to'AppleBCMWLANChipImage::prepareMapping(uint64_t a1, uint64_t *a2)
{
  return AppleBCMWLANChipImage::prepareMapping(a1 - 40, a2);
}

uint64_t AppleBCMWLANChipImage::prepareMapping(uint64_t a1, OSMappedFile **a2)
{
  uint64_t v2 = 3758097090;
  if (!*a2 || !a2[1] || !a2[2] || !a2[3]) {
    return v2;
  }
  uint64_t BytesNoCopy = IO80211Buffer::getBytesNoCopy(*(IO80211Buffer **)(*(void *)(a1 + 48) + 8), *(void *)(*(void *)(a1 + 48) + 24), *(void *)(*(void *)(a1 + 48) + 32));
  unint64_t v6 = *(void **)(a1 + 48);
  if (!BytesNoCopy)
  {
    uint64_t v2 = 3758097096;
    if (!*v6 || !CCLogStream::shouldLog()) {
      return v2;
    }
    CCLogStream::logAlert(**(CCLogStream ***)(a1 + 48), "[dk] %s@%d: Failed to find dstFirmwareFile\n");
    return 3758097096;
  }
  uint64_t v7 = (void *)BytesNoCopy;
  unint64_t v8 = v6[4];
  if (v8 < OSMappedFile::size(a2[1]))
  {
    if (**(void **)(a1 + 48) && CCLogStream::shouldLog())
    {
      uint64_t v9 = **(CCLogStream ***)(a1 + 48);
      OSMappedFile::size(a2[1]);
      CCLogStream::logAlert(v9, "[dk] %s@%d:user space set Firmware file too big %zu, expected %lld\n");
    }
    return v2;
  }
  if (!OSMappedFile::data(a2[1])) {
    return v2;
  }
  uint64_t v10 = (const void *)OSMappedFile::data(a2[1]);
  size_t v11 = OSMappedFile::size(a2[1]);
  memcpy(v7, v10, v11);
  uint64_t v12 = IO80211Buffer::getBytesNoCopy(*(IO80211Buffer **)(*(void *)(a1 + 48) + 8), *(void *)(*(void *)(a1 + 48) + 56), *(void *)(*(void *)(a1 + 48) + 64));
  unint64_t v13 = *(void **)(a1 + 48);
  if (!v12)
  {
    uint64_t v2 = 3758097096;
    if (!*v13 || !CCLogStream::shouldLog()) {
      return v2;
    }
    CCLogStream::logAlert(**(CCLogStream ***)(a1 + 48), "[dk] %s@%d: Failed to find dstNVRAMFile\n");
    return 3758097096;
  }
  int v14 = (void *)v12;
  unint64_t v15 = v13[8];
  if (v15 > OSMappedFile::size(*a2))
  {
    *(void *)(*(void *)(a1 + 48) + 64) = OSMappedFile::size(*a2);
    goto LABEL_25;
  }
  unint64_t v16 = *(void *)(*(void *)(a1 + 48) + 64);
  if (v16 >= OSMappedFile::size(*a2))
  {
LABEL_25:
    if (!OSMappedFile::data(*a2)) {
      return v2;
    }
    unint64_t v18 = (const void *)OSMappedFile::data(*a2);
    size_t v19 = OSMappedFile::size(*a2);
    memcpy(v14, v18, v19);
    uint64_t v20 = IO80211Buffer::getBytesNoCopy(*(IO80211Buffer **)(*(void *)(a1 + 48) + 8), *(void *)(*(void *)(a1 + 48) + 104), *(void *)(*(void *)(a1 + 48) + 112));
    unint64_t v21 = *(void **)(a1 + 48);
    if (v20)
    {
      unint64_t v22 = (void *)v20;
      unint64_t v23 = v21[14];
      if (v23 < OSMappedFile::size(a2[2]))
      {
        if (**(void **)(a1 + 48) && CCLogStream::shouldLog())
        {
          size_t v24 = **(CCLogStream ***)(a1 + 48);
          OSMappedFile::size(a2[2]);
          CCLogStream::logAlert(v24, "[dk] %s@%d:user space set Reg file too big %zu, expected %lld\n");
        }
        return v2;
      }
      if (!OSMappedFile::data(a2[2])) {
        return v2;
      }
      unint64_t v25 = (const void *)OSMappedFile::data(a2[2]);
      size_t v26 = OSMappedFile::size(a2[2]);
      memcpy(v22, v25, v26);
      uint64_t v27 = IO80211Buffer::getBytesNoCopy(*(IO80211Buffer **)(*(void *)(a1 + 48) + 8), *(void *)(*(void *)(a1 + 48) + 120), *(void *)(*(void *)(a1 + 48) + 128));
      uint64_t v28 = *(void **)(a1 + 48);
      if (v27)
      {
        unint64_t v29 = (void *)v27;
        unint64_t v30 = v28[16];
        if (v30 < OSMappedFile::size(a2[3]))
        {
          if (**(void **)(a1 + 48) && CCLogStream::shouldLog())
          {
            unint64_t v31 = **(CCLogStream ***)(a1 + 48);
            OSMappedFile::size(a2[3]);
            CCLogStream::logAlert(v31, "[dk] %s@%d:user space set TxCap Table too big %zu, expected %lld\n");
          }
          return v2;
        }
        if (!OSMappedFile::data(a2[3])) {
          return v2;
        }
        uint64_t v32 = (const void *)OSMappedFile::data(a2[3]);
        size_t v33 = OSMappedFile::size(a2[3]);
        memcpy(v29, v32, v33);
        if (a2[4])
        {
          uint64_t v34 = IO80211Buffer::getBytesNoCopy(*(IO80211Buffer **)(*(void *)(a1 + 48) + 8), *(void *)(*(void *)(a1 + 48) + 72), *(void *)(*(void *)(a1 + 48) + 80));
          uint64_t v35 = *(void **)(a1 + 48);
          if (!v34)
          {
            uint64_t v2 = 3758097096;
            if (!*v35 || !CCLogStream::shouldLog()) {
              return v2;
            }
            CCLogStream::logAlert(**(CCLogStream ***)(a1 + 48), "[dk] %s@%d: Failed to find dstSignatureFule\n");
            return 3758097096;
          }
          uint64_t v36 = (void *)v34;
          unint64_t v37 = v35[10];
          if (v37 < OSMappedFile::size(a2[4]))
          {
            if (**(void **)(a1 + 48) && CCLogStream::shouldLog())
            {
              char v38 = **(CCLogStream ***)(a1 + 48);
              OSMappedFile::size(a2[4]);
              CCLogStream::logAlert(v38, "[dk] %s@%d:user space set Signature file too big %zu, expected %lld\n");
            }
            return v2;
          }
          if (!OSMappedFile::data(a2[4])) {
            return v2;
          }
          char v39 = (const void *)OSMappedFile::data(a2[4]);
          size_t v40 = OSMappedFile::size(a2[4]);
          memcpy(v36, v39, v40);
        }
        if (!a2[5]) {
          return 0;
        }
        uint64_t v41 = IO80211Buffer::getBytesNoCopy(*(IO80211Buffer **)(*(void *)(a1 + 48) + 8), *(void *)(*(void *)(a1 + 48) + 88), *(void *)(*(void *)(a1 + 48) + 96));
        char v42 = *(void **)(a1 + 48);
        if (v41)
        {
          char v43 = (void *)v41;
          unint64_t v44 = v42[12];
          if (v44 < OSMappedFile::size(a2[5]))
          {
            if (**(void **)(a1 + 48) && CCLogStream::shouldLog())
            {
              size_t v45 = **(CCLogStream ***)(a1 + 48);
              OSMappedFile::size(a2[5]);
              CCLogStream::logAlert(v45, "[dk] %s@%d:user space set Platcfg file too big %zu, expected %lld\n");
            }
            return v2;
          }
          if (!OSMappedFile::data(a2[5])) {
            return v2;
          }
          uint64_t v46 = (const void *)OSMappedFile::data(a2[5]);
          size_t v47 = OSMappedFile::size(a2[5]);
          memcpy(v43, v46, v47);
          return 0;
        }
        uint64_t v2 = 3758097096;
        if (!*v42 || !CCLogStream::shouldLog()) {
          return v2;
        }
        CCLogStream::logAlert(**(CCLogStream ***)(a1 + 48), "[dk] %s@%d: Failed to find dstPlatcfgFile\n");
      }
      else
      {
        uint64_t v2 = 3758097096;
        if (!*v28 || !CCLogStream::shouldLog()) {
          return v2;
        }
        CCLogStream::logAlert(**(CCLogStream ***)(a1 + 48), "[dk] %s@%d: Failed to find dstTXCapFile\n");
      }
    }
    else
    {
      uint64_t v2 = 3758097096;
      if (!*v21 || !CCLogStream::shouldLog()) {
        return v2;
      }
      CCLogStream::logAlert(**(CCLogStream ***)(a1 + 48), "[dk] %s@%d: Failed to find dstRegulatoryFile\n");
    }
    return 3758097096;
  }
  if (**(void **)(a1 + 48) && CCLogStream::shouldLog())
  {
    unint64_t v17 = **(CCLogStream ***)(a1 + 48);
    OSMappedFile::size(*a2);
    CCLogStream::logAlert(v17, "[dk] %s@%d:user space set NVRAM file too big %zu, expected %lld\n");
  }
  return v2;
}

uint64_t non-virtual thunk to'AppleBCMWLANChipImage::prepareMapping(uint64_t a1, OSMappedFile **a2)
{
  return AppleBCMWLANChipImage::prepareMapping(a1 - 40, a2);
}

uint64_t AppleBCMWLANChipImage::completeMapping(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)(a1 + 48);
  uint64_t v5 = v4[19];
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    *(void *)(*(void *)(a1 + 48) + 152) = 0;
    uint64_t v4 = *(void **)(a1 + 48);
  }
  uint64_t v6 = v4[18];
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    *(void *)(*(void *)(a1 + 48) + 144) = 0;
    uint64_t v4 = *(void **)(a1 + 48);
  }
  uint64_t v7 = v4[20];
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    *(void *)(*(void *)(a1 + 48) + 160) = 0;
    uint64_t v4 = *(void **)(a1 + 48);
  }
  uint64_t v8 = v4[23];
  if (v8)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
    *(void *)(*(void *)(a1 + 48) + 184) = 0;
    uint64_t v4 = *(void **)(a1 + 48);
  }
  uint64_t v9 = v4[21];
  if (v9)
  {
    (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
    *(void *)(*(void *)(a1 + 48) + 168) = 0;
    uint64_t v4 = *(void **)(a1 + 48);
  }
  uint64_t v10 = v4[22];
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
    *(void *)(*(void *)(a1 + 48) + 176) = 0;
    uint64_t v4 = *(void **)(a1 + 48);
  }
  unint64_t v11 = v4[8];
  unint64_t v12 = a2[4];
  if (v11 > v12)
  {
    v4[8] = v12;
    uint64_t v4 = *(void **)(a1 + 48);
    goto LABEL_19;
  }
  if (v11 >= v12)
  {
LABEL_19:
    uint64_t v13 = 3758097090;
    if (v4[4] >= a2[1])
    {
      unint64_t v14 = v4[10];
      unint64_t v15 = a2[6];
      if (v14 <= v15)
      {
        if (v14 >= v15)
        {
          unint64_t v16 = v4[12];
          unint64_t v17 = a2[8];
          if (v16 <= v17)
          {
            if (v16 >= v17)
            {
              if (v4[14] >= a2[11])
              {
                if (v4[16] >= a2[14])
                {
                  return 0;
                }
                else if (*v4 && CCLogStream::shouldLog())
                {
                  CCLogStream::logAlert(**(CCLogStream ***)(a1 + 48), "[dk] %s@%d:user space set TxCap Table too big %lld, expected %lld\n");
                }
              }
              else if (*v4 && CCLogStream::shouldLog())
              {
                CCLogStream::logAlert(**(CCLogStream ***)(a1 + 48), "[dk] %s@%d:user space set Reg file too big %lld, expected %lld\n");
              }
            }
            else if (*v4 && CCLogStream::shouldLog())
            {
              CCLogStream::logAlert(**(CCLogStream ***)(a1 + 48), "[dk] %s@%d:user space set Platcfg file too big %lld, expected %lld\n");
            }
          }
        }
        else if (*v4 && CCLogStream::shouldLog())
        {
          CCLogStream::logAlert(**(CCLogStream ***)(a1 + 48), "[dk] %s@%d:user space set Signature file too big %lld, expected %lld\n");
        }
      }
    }
    else if (*v4 && CCLogStream::shouldLog())
    {
      CCLogStream::logAlert(**(CCLogStream ***)(a1 + 48), "[dk] %s@%d:user space set Firmware file too big %lld, expected %lld\n");
    }
    return v13;
  }
  uint64_t v13 = 3758097090;
  if (*v4 && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(**(CCLogStream ***)(a1 + 48), "[dk] %s@%d:user space set NVRAM file too big %lld, expected %lld\n");
  }
  return v13;
}

uint64_t non-virtual thunk to'AppleBCMWLANChipImage::completeMapping(uint64_t a1, void *a2)
{
  return AppleBCMWLANChipImage::completeMapping(a1 - 40, a2);
}

uint64_t AppleBCMWLANChipImage::edit(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, void, uint64_t))
{
  return a3(a2, *(void *)(*(void *)(a1 + 48) + 8), *(void *)(a1 + 48) + 24);
}

uint64_t non-virtual thunk to'AppleBCMWLANChipImage::edit(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, void, uint64_t))
{
  return a3(a2, *(void *)(*(void *)(a1 + 8) + 8), *(void *)(a1 + 8) + 24);
}

uint64_t AppleBCMWLANChipImage::output(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, void, uint64_t))
{
  return a3(a2, *(void *)(*(void *)(a1 + 48) + 8), *(void *)(a1 + 48) + 24);
}

uint64_t non-virtual thunk to'AppleBCMWLANChipImage::output(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, void, uint64_t))
{
  return a3(a2, *(void *)(*(void *)(a1 + 8) + 8), *(void *)(a1 + 8) + 24);
}

uint64_t AppleBCMWLANChipImage::validate(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, void, uint64_t))
{
  return a3(a2, *(void *)(*(void *)(a1 + 48) + 8), *(void *)(a1 + 48) + 24);
}

uint64_t non-virtual thunk to'AppleBCMWLANChipImage::validate(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, void, uint64_t))
{
  return a3(a2, *(void *)(*(void *)(a1 + 8) + 8), *(void *)(a1 + 8) + 24);
}

void AppleBCMWLANChipImage::clear(AppleBCMWLANChipImage *this)
{
  uint64_t v2 = *(IO80211Buffer **)(*((void *)this + 6) + 8);
  unint64_t Length = IO80211Buffer::getLength(v2);
  uint64_t BytesNoCopy = IO80211Buffer::getBytesNoCopy(v2, 0, Length);
  if (BytesNoCopy)
  {
    uint64_t v5 = (void *)BytesNoCopy;
    size_t v6 = IO80211Buffer::getLength(*(IO80211Buffer **)(*((void *)this + 6) + 8));
    bzero(v5, v6);
  }
}

void non-virtual thunk to'AppleBCMWLANChipImage::clear(AppleBCMWLANChipImage *this)
{
}

void *AppleBCMWLANChipImage::paint(AppleBCMWLANChipImage *this, int a2)
{
  uint64_t v4 = *(IO80211Buffer **)(*((void *)this + 6) + 8);
  unint64_t Length = IO80211Buffer::getLength(v4);
  uint64_t result = (void *)IO80211Buffer::getBytesNoCopy(v4, 0, Length);
  if (result)
  {
    uint64_t v7 = result;
    size_t v8 = IO80211Buffer::getLength(*(IO80211Buffer **)(*((void *)this + 6) + 8));
    return memset(v7, a2, v8);
  }
  return result;
}

void *non-virtual thunk to'AppleBCMWLANChipImage::paint(AppleBCMWLANChipImage *this, int a2)
{
  return AppleBCMWLANChipImage::paint((AppleBCMWLANChipImage *)((char *)this - 40), a2);
}

uint64_t AppleBCMWLANChipImage::getMemoryDescriptorWithMapping(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 1:
      uint64_t result = *(void *)(*(void *)(a1 + 48) + 144);
      break;
    case 2:
      uint64_t result = *(void *)(*(void *)(a1 + 48) + 152);
      break;
    case 3:
      uint64_t result = *(void *)(*(void *)(a1 + 48) + 160);
      break;
    case 4:
      uint64_t result = *(void *)(*(void *)(a1 + 48) + 168);
      break;
    case 5:
      uint64_t result = *(void *)(*(void *)(a1 + 48) + 176);
      break;
    case 6:
      uint64_t result = *(void *)(*(void *)(a1 + 48) + 184);
      break;
    default:
      uint64_t result = **(void **)(a1 + 48);
      if (result)
      {
        if (CCLogStream::shouldLog()) {
          CCLogStream::logAlert(**(CCLogStream ***)(a1 + 48), "[dk] %s@%d:Unexpected memory descriptor typeId\n", "getMemoryDescriptorWithMapping", 875);
        }
        uint64_t result = 0;
      }
      break;
  }
  return result;
}

uint64_t AppleBCMWLANChipImage::getImageType(AppleBCMWLANChipImage *this)
{
  return *(unsigned int *)(*((void *)this + 6) + 136);
}

uint64_t non-virtual thunk to'AppleBCMWLANChipImage::getImageType(AppleBCMWLANChipImage *this)
{
  return *(unsigned int *)(*((void *)this + 1) + 136);
}

uint64_t AppleBCMWLANChipImage::setImageType(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(result + 48) + 136) = a2;
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANChipImage::setImageType(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(result + 8) + 136) = a2;
  return result;
}

uint64_t AppleBCMWLANChipImage::setForceLoadRegTable(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)(this + 48) + 208) = a2;
  return this;
}

uint64_t non-virtual thunk to'AppleBCMWLANChipImage::setForceLoadRegTable(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)(this + 8) + 208) = a2;
  return this;
}

uint64_t AppleBCMWLANChipImage::forceLoadRegTable(AppleBCMWLANChipImage *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 208);
}

uint64_t non-virtual thunk to'AppleBCMWLANChipImage::forceLoadRegTable(AppleBCMWLANChipImage *this)
{
  return *(unsigned __int8 *)(*((void *)this + 1) + 208);
}

uint64_t AppleBCMWLANChipImage::setForceLoadTxCapTable(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)(this + 48) + 209) = a2;
  return this;
}

uint64_t non-virtual thunk to'AppleBCMWLANChipImage::setForceLoadTxCapTable(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)(this + 8) + 209) = a2;
  return this;
}

uint64_t AppleBCMWLANChipImage::forceLoadTxCapTable(AppleBCMWLANChipImage *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 209);
}

uint64_t non-virtual thunk to'AppleBCMWLANChipImage::forceLoadTxCapTable(AppleBCMWLANChipImage *this)
{
  return *(unsigned __int8 *)(*((void *)this + 1) + 209);
}

uint64_t AppleBCMWLANChipImage::setForceLoadPlatcfg(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)(this + 48) + 210) = a2;
  return this;
}

uint64_t non-virtual thunk to'AppleBCMWLANChipImage::setForceLoadPlatcfg(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)(this + 8) + 210) = a2;
  return this;
}

uint64_t AppleBCMWLANChipImage::forceLoadPlatcfg(AppleBCMWLANChipImage *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 210);
}

uint64_t non-virtual thunk to'AppleBCMWLANChipImage::forceLoadPlatcfg(AppleBCMWLANChipImage *this)
{
  return *(unsigned __int8 *)(*((void *)this + 1) + 210);
}

uint64_t AppleBCMWLANSkywalkTxSubmissionQueue::initWithPoolAndQueueInfo(IOUserNetworkTxSubmissionQueue *a1, OSObject *a2, IOUserNetworkPacketBufferPool *a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, OSMetaClass_vtbl *a8, uint64_t a9, OSMetaClass_vtbl *a10)
{
  unint64_t v18 = (OSMetaClass *)IOMallocZeroTyped();
  a1[1].meta = v18;
  if (!v18)
  {
    IOLog("tx sub ivar allocation fail\n");
    return 0;
  }
  v18->__vftable = a8;
  *(void *)&a1[1].meta->IOUserNetworkPacketQueue::OSObject::OSObjectInterface::refcount = a9;
  LOWORD(a1[1].meta->IOUserNetworkPacketQueue::OSObject::meta) = a4;
  a1[1].meta[1].refcount = a7;
  a1[1].meta[1].__vftable = a10;
  a1[1].meta[1].reserved = a5;
  LOBYTE(a1[1].meta[1].meta) = 0;
  if (IOUserNetworkTxSubmissionQueue::initWithPool(a1, a3, kServiceClass[a6], a7, a5, a2, 0, (unsigned int (*)(OSObject *, IOUserNetworkPacketQueue *, IOUserNetworkPacket **, unsigned int, void *))a1->IOUserNetworkPacketQueue::OSObject::OSMetaClassBase::__vftable[2].SetPacketBufferPool, a1, 0))return 1; {
  uint64_t result = ((uint64_t (*)(IOUserNetworkTxSubmissionQueue *))a1->IOUserNetworkPacketQueue::OSObject::OSMetaClassBase::__vftable[2].SetPacketDirection)(a1);
  }
  if (result)
  {
    ((void (*)(IOUserNetworkTxSubmissionQueue *))a1->IOUserNetworkPacketQueue::OSObject::OSMetaClassBase::__vftable[2].SetPacketDirection)(a1);
    int shouldLog = CCLogStream::shouldLog();
    uint64_t result = 0;
    if (shouldLog)
    {
      unint64_t v21 = (CCLogStream *)((uint64_t (*)(IOUserNetworkTxSubmissionQueue *))a1->IOUserNetworkPacketQueue::OSObject::OSMetaClassBase::__vftable[2].SetPacketDirection)(a1);
      CCLogStream::logEmergency(v21, "[dk] %s@%d:Failed to allocate TXSubmissionQueue for ifid:%u queue:%u ac:0x%x\n", "initWithPoolAndQueueInfo", 84, a4, a5, a6);
      return 0;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkTxSubmissionQueue::initWithPoolAndQueueInfo(uint64_t a1, OSObject *a2, IOUserNetworkPacketBufferPool *a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, OSMetaClass_vtbl *a8, uint64_t a9, OSMetaClass_vtbl *a10)
{
  return AppleBCMWLANSkywalkTxSubmissionQueue::initWithPoolAndQueueInfo((IOUserNetworkTxSubmissionQueue *)(a1 - 72), a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void AppleBCMWLANSkywalkTxSubmissionQueue::free(IOUserNetworkTxSubmissionQueue *this)
{
  meta = this[1].meta;
  if (meta)
  {
    IOFree(meta, 0x48uLL);
    this[1].meta = 0;
  }
  IOUserNetworkTxSubmissionQueue::free(this);
}

void non-virtual thunk to'AppleBCMWLANSkywalkTxSubmissionQueue::free(AppleBCMWLANSkywalkTxSubmissionQueue *this)
{
}

uint64_t AppleBCMWLANSkywalkTxSubmissionQueue::requestDequeue(IOUserNetworkPacketQueue *this, void *a2, unsigned int a3)
{
  return IOUserNetworkPacketQueue::requestDequeue(this, a2, a3);
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkTxSubmissionQueue::requestDequeue(AppleBCMWLANSkywalkTxSubmissionQueue *this, void *a2, unsigned int a3)
{
  return IOUserNetworkPacketQueue::requestDequeue((IOUserNetworkPacketQueue *)((char *)this - 40), a2, a3);
}

uint64_t AppleBCMWLANSkywalkTxSubmissionQueue::dequeuePackets()
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkTxSubmissionQueue::dequeuePackets()
{
  return 0;
}

uint64_t AppleBCMWLANSkywalkTxSubmissionQueue::forwardPacket(AppleBCMWLANSkywalkTxSubmissionQueue *this, IO80211NetworkPacket *a2)
{
  if ((*(uint64_t (**)(AppleBCMWLANSkywalkTxSubmissionQueue *, IO80211NetworkPacket *))(*(void *)this
                                                                                                 + 288))(this, a2))
  {
    (*(void (**)(AppleBCMWLANSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
      CCLogStream::logAlert(v4, "[dk] %s@%d:Unexpected call, not implemented!\n", "forwardPacket", 115);
    }
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkTxSubmissionQueue::forwardPacket(AppleBCMWLANSkywalkTxSubmissionQueue *this, IO80211NetworkPacket *a2)
{
  return 0;
}

uint64_t AppleBCMWLANSkywalkTxSubmissionQueue::dupAndTransmitMcastPacket(AppleBCMWLANSkywalkTxSubmissionQueue *this, IO80211NetworkPacket *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  if ((*(uint64_t (**)(AppleBCMWLANSkywalkTxSubmissionQueue *, IO80211NetworkPacket *, unsigned __int8 *, unsigned __int8 *))(*(void *)this + 288))(this, a2, a3, a4))
  {
    (*(void (**)(AppleBCMWLANSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
    if (CCLogStream::shouldLog())
    {
      size_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
      CCLogStream::logAlert(v6, "[dk] %s@%d:Unexpected call, not implemented!\n", "dupAndTransmitMcastPacket", 121);
    }
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkTxSubmissionQueue::dupAndTransmitMcastPacket(AppleBCMWLANSkywalkTxSubmissionQueue *this, IO80211NetworkPacket *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  return 0;
}

uint64_t AppleBCMWLANSkywalkTxSubmissionQueue::freeMulticastPacket(AppleBCMWLANSkywalkTxSubmissionQueue *this, IO80211NetworkPacket *a2)
{
  if ((*(uint64_t (**)(AppleBCMWLANSkywalkTxSubmissionQueue *, IO80211NetworkPacket *))(*(void *)this
                                                                                                 + 288))(this, a2))
  {
    (*(void (**)(AppleBCMWLANSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
      CCLogStream::logAlert(v4, "[dk] %s@%d:Unexpected call, not implemented!\n", "freeMulticastPacket", 127);
    }
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkTxSubmissionQueue::freeMulticastPacket(AppleBCMWLANSkywalkTxSubmissionQueue *this, IO80211NetworkPacket *a2)
{
  return 0;
}

uint64_t AppleBCMWLANSkywalkTxSubmissionQueue::triggerAWDLMulticastTx(AppleBCMWLANSkywalkTxSubmissionQueue *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this))
  {
    (*(void (**)(AppleBCMWLANSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v3 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
      CCLogStream::logAlert(v3, "[dk] %s@%d:Unexpected call, not implemented!\n", "triggerAWDLMulticastTx", 132);
    }
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkTxSubmissionQueue::triggerAWDLMulticastTx(AppleBCMWLANSkywalkTxSubmissionQueue *this)
{
  return 0;
}

void *AppleBCMWLANSkywalkTxSubmissionQueue::setInterface(void *this, IO80211SkywalkInterface *a2)
{
  uint64_t v2 = (uint64_t)this;
  if (a2)
  {
    *(void *)(this[10] + 24) = a2;
  }
  else
  {
    this = (void *)(*(uint64_t (**)(void *))(*this + 288))(this);
    if (this)
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 288))(v2);
      this = (void *)CCLogStream::shouldLog();
      if (this)
      {
        uint64_t v3 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 288))(v2);
        return (void *)CCLogStream::logAlert(v3, "[dk] %s@%d:TX SUB Q invalid interface", "setInterface", 143);
      }
    }
  }
  return this;
}

uint64_t AppleBCMWLANSkywalkTxSubmissionQueue::getInterface(AppleBCMWLANSkywalkTxSubmissionQueue *this)
{
  return *(void *)(*((void *)this + 10) + 24);
}

uint64_t AppleBCMWLANSkywalkTxSubmissionQueue::getQueueDepth(AppleBCMWLANSkywalkTxSubmissionQueue *this)
{
  return *(unsigned int *)(*((void *)this + 10) + 40);
}

uint64_t AppleBCMWLANSkywalkTxSubmissionQueue::getLogger(AppleBCMWLANSkywalkTxSubmissionQueue *this)
{
  return **((void **)this + 10);
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkTxSubmissionQueue::getLogger(AppleBCMWLANSkywalkTxSubmissionQueue *this)
{
  return **((void **)this + 1);
}

uint64_t AppleBCMWLANSkywalkTxSubmissionQueue::getRingFreeSpace(AppleBCMWLANSkywalkTxSubmissionQueue *this)
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkTxSubmissionQueue::getRingFreeSpace(AppleBCMWLANSkywalkTxSubmissionQueue *this)
{
  return 0;
}

uint64_t AppleBCMWLANSkywalkTxSubmissionQueue::getPendingPacketCount(AppleBCMWLANSkywalkTxSubmissionQueue *this)
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkTxSubmissionQueue::getPendingPacketCount(AppleBCMWLANSkywalkTxSubmissionQueue *this)
{
  return 0;
}

uint64_t AppleBCMWLANSkywalkTxSubmissionQueue::collectQueueStats(AppleBCMWLANSkywalkTxSubmissionQueue *this, char *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  absolutetime_to_nanoseconds();
  absolutetime_to_nanoseconds();
  (*(void (**)(AppleBCMWLANSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
  uint64_t v7 = IO80211Print() + a5;
  (*(void (**)(AppleBCMWLANSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
  return IO80211Print() + v7;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkTxSubmissionQueue::collectQueueStats(AppleBCMWLANSkywalkTxSubmissionQueue *this, char *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  return AppleBCMWLANSkywalkTxSubmissionQueue::collectQueueStats((AppleBCMWLANSkywalkTxSubmissionQueue *)((char *)this - 72), a2, a3, a4, a5);
}

uint64_t AppleBCMWLANSkywalkTxSubmissionQueue::getQueueId(AppleBCMWLANSkywalkTxSubmissionQueue *this)
{
  return *(unsigned int *)(*((void *)this + 10) + 44);
}

uint64_t AppleBCMWLANSkywalkTxSubmissionQueue::enable(IOUserNetworkPacketQueue *this)
{
  if (LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[3].init))
  {
    uint64_t result = ((uint64_t (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[2].SetPacketDirection)(this);
    if (result)
    {
      ((void (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[2].SetPacketDirection)(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v3 = (CCLogStream *)((uint64_t (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[2].SetPacketDirection)(this);
        return CCLogStream::logInfo(v3, "[dk] %s@%d:Enable called on already Enabled TxSubQ\n");
      }
    }
  }
  else
  {
    this[1].OSObject::OSObjectInterface::__vftable[3].free = (void (__cdecl *)(OSObjectInterface *__hidden))mach_continuous_time();
    LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[3].init) = 1;
    IOUserNetworkPacketQueue::SetEnable(this, 1, 0);
    uint64_t result = ((uint64_t (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[2].SetPacketDirection)(this);
    if (result)
    {
      ((void (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[2].SetPacketDirection)(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v4 = (CCLogStream *)((uint64_t (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[2].SetPacketDirection)(this);
        return CCLogStream::logInfo(v4, "[dk] %s@%d:TXSub Enable returned:0x%x\n");
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkTxSubmissionQueue::enable(AppleBCMWLANSkywalkTxSubmissionQueue *this)
{
  return AppleBCMWLANSkywalkTxSubmissionQueue::enable((IOUserNetworkPacketQueue *)((char *)this - 72));
}

uint64_t AppleBCMWLANSkywalkTxSubmissionQueue::disableSync(IOUserNetworkPacketQueue *this)
{
  if (LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[3].init))
  {
    this[1].OSObject::OSObjectInterface::__vftable[4].init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))mach_continuous_time();
    LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[3].init) = 0;
    IOUserNetworkPacketQueue::SetEnable(this, 0, 0);
    uint64_t result = ((uint64_t (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[2].SetPacketDirection)(this);
    if (result)
    {
      ((void (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[2].SetPacketDirection)(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v3 = (CCLogStream *)((uint64_t (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[2].SetPacketDirection)(this);
        return CCLogStream::logInfo(v3, "[dk] %s@%d:TXSub Disable returned:0x%x\n");
      }
    }
  }
  else
  {
    uint64_t result = ((uint64_t (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[2].SetPacketDirection)(this);
    if (result)
    {
      ((void (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[2].SetPacketDirection)(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v4 = (CCLogStream *)((uint64_t (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[2].SetPacketDirection)(this);
        return CCLogStream::logInfo(v4, "[dk] %s@%d:Disable called on already disabled TxSubQ\n");
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkTxSubmissionQueue::disableSync(AppleBCMWLANSkywalkTxSubmissionQueue *this)
{
  return AppleBCMWLANSkywalkTxSubmissionQueue::disableSync((IOUserNetworkPacketQueue *)((char *)this - 72));
}

uint64_t AppleBCMWLANSkywalkTxSubmissionQueue::disable(AppleBCMWLANSkywalkTxSubmissionQueue *this)
{
  if ((*(unsigned int (**)(void))(**(void **)(*((void *)this + 10) + 32) + 136))(*(void *)(*((void *)this + 10) + 32)))
  {
    uint64_t v2 = *(uint64_t (**)(AppleBCMWLANSkywalkTxSubmissionQueue *))(*(void *)this + 264);
    return v2(this);
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 10) + 32) + 144))(*(void *)(*((void *)this + 10) + 32));
    uint64_t v4 = *((void *)this + 10);
    if (result)
    {
      uint64_t v5 = *(void *)(v4 + 32);
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 0x40000000;
      void v7[2] = ___ZN36AppleBCMWLANSkywalkTxSubmissionQueue7disableEv_block_invoke;
      void v7[3] = &__block_descriptor_tmp_4;
      v7[4] = this;
      return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)v5 + 120))(v5, v7, 1);
    }
    else if (*(unsigned char *)(v4 + 48))
    {
      uint64_t result = (*(uint64_t (**)(AppleBCMWLANSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
      if (result)
      {
        (*(void (**)(AppleBCMWLANSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          size_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
          return CCLogStream::logAlert(v6, "[dk] %s@%d:failed to disable Tx SubmissionQueue  since not on gate\n", "disable", 259);
        }
      }
    }
  }
  return result;
}

uint64_t ___ZN36AppleBCMWLANSkywalkTxSubmissionQueue7disableEv_block_invoke(uint64_t a1)
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkTxSubmissionQueue::disable(AppleBCMWLANSkywalkTxSubmissionQueue *this)
{
  return AppleBCMWLANSkywalkTxSubmissionQueue::disable((AppleBCMWLANSkywalkTxSubmissionQueue *)((char *)this - 72));
}

uint64_t AppleBCMWLANSkywalkTxSubmissionQueue::dequeuePacketsUngate(void *a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1[10] + 32) + 104))(*(void *)(a1[10] + 32), *(void *)(*a1 + 176));
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkTxSubmissionQueue::dequeuePacketsUngate(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 8) + 32) + 104))(*(void *)(*(void *)(a1 + 8) + 32), *(void *)(*(void *)(a1 - 72) + 176));
}

uint64_t AppleBCMWLANSkywalkTxSubmissionQueue::p2pMulticastTx(AppleBCMWLANSkywalkTxSubmissionQueue *this, IO80211NetworkPacket **a2)
{
  if ((*(uint64_t (**)(AppleBCMWLANSkywalkTxSubmissionQueue *, IO80211NetworkPacket **))(*(void *)this
                                                                                                  + 288))(this, a2))
  {
    (*(void (**)(AppleBCMWLANSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkTxSubmissionQueue *))(*(void *)this + 288))(this);
      CCLogStream::logAlert(v4, "[dk] %s@%d:NOT IMPLEMENTED\n", "p2pMulticastTx", 279);
    }
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkTxSubmissionQueue::p2pMulticastTx(AppleBCMWLANSkywalkTxSubmissionQueue *this, IO80211NetworkPacket **a2)
{
  return 0;
}

uint64_t AppleBCMWLANSkywalkTxCompletionQueue::getLogger(AppleBCMWLANSkywalkTxCompletionQueue *this)
{
  return **((void **)this + 10);
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkTxCompletionQueue::getLogger(AppleBCMWLANSkywalkTxCompletionQueue *this)
{
  return **((void **)this + 1);
}

uint64_t AppleBCMWLANSkywalkTxCompletionQueue::initWithPoolAndQueueInfo(IOUserNetworkTxCompletionQueue *a1, OSObject *a2, IOUserNetworkPacketBufferPool *a3, int a4, unsigned int a5, unsigned int a6, const OSMetaClassBase *a7)
{
  uint64_t v14 = IOMallocZeroTyped();
  a1[1].meta = (OSMetaClass *)v14;
  if (!v14)
  {
    IOLog("tx comp ivar allocation fail\n");
    return 0;
  }
  *(_DWORD *)(v14 + 16) = a6;
  a1[1].meta->metaClassPrivate = (OSMetaClassPrivate *)OSMetaClassBase::safeMetaCast(a7, gIO80211WorkQueueMetaClass);
  LODWORD(a1[1].meta[1].__vftable) = a5;
  BYTE4(a1[1].meta[1].__vftable) = 0;
  if (IOUserNetworkTxCompletionQueue::initWithPool(a1, a3, a6, a5, a2, (unsigned int (*)(OSObject *, IOUserNetworkPacketQueue *, IOUserNetworkPacket **, unsigned int, void *))a1->IOUserNetworkPacketQueue::OSObject::OSMetaClassBase::__vftable[1].SetPacketBufferPool, a1, 0))return 1; {
  uint64_t result = ((uint64_t (*)(IOUserNetworkTxCompletionQueue *))a1->IOUserNetworkPacketQueue::OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(a1);
  }
  if (result)
  {
    ((void (*)(IOUserNetworkTxCompletionQueue *))a1->IOUserNetworkPacketQueue::OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(a1);
    int shouldLog = CCLogStream::shouldLog();
    uint64_t result = 0;
    if (shouldLog)
    {
      unint64_t v17 = (CCLogStream *)((uint64_t (*)(IOUserNetworkTxCompletionQueue *))a1->IOUserNetworkPacketQueue::OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(a1);
      CCLogStream::logEmergency(v17, "[dk] %s@%d:Failed to allocate TXCompletion for ifid:%u queue:%u\n", "initWithPoolAndQueueInfo", 331, a4, a5);
      return 0;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkTxCompletionQueue::initWithPoolAndQueueInfo(uint64_t a1, OSObject *a2, IOUserNetworkPacketBufferPool *a3, int a4, unsigned int a5, unsigned int a6, const OSMetaClassBase *a7)
{
  return AppleBCMWLANSkywalkTxCompletionQueue::initWithPoolAndQueueInfo((IOUserNetworkTxCompletionQueue *)(a1 - 72), a2, a3, a4, a5, a6, a7);
}

void AppleBCMWLANSkywalkTxCompletionQueue::free(IOUserNetworkTxCompletionQueue *this)
{
  meta = this[1].meta;
  if (meta)
  {
    IOFree(meta, 0x38uLL);
    this[1].meta = 0;
  }
  IOUserNetworkTxCompletionQueue::free(this);
}

void non-virtual thunk to'AppleBCMWLANSkywalkTxCompletionQueue::free(AppleBCMWLANSkywalkTxCompletionQueue *this)
{
}

uint64_t AppleBCMWLANSkywalkTxCompletionQueue::enqueuePackets()
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkTxCompletionQueue::enqueuePackets()
{
  return 0;
}

uint64_t AppleBCMWLANSkywalkTxCompletionQueue::setInterface(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 80) + 8) = a2;
  return result;
}

uint64_t AppleBCMWLANSkywalkTxCompletionQueue::getInterface(AppleBCMWLANSkywalkTxCompletionQueue *this)
{
  return *(void *)(*((void *)this + 10) + 8);
}

uint64_t AppleBCMWLANSkywalkTxCompletionQueue::collectQueueStats(AppleBCMWLANSkywalkTxCompletionQueue *this, char *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  absolutetime_to_nanoseconds();
  absolutetime_to_nanoseconds();
  (*(void (**)(AppleBCMWLANSkywalkTxCompletionQueue *))(*(void *)this + 216))(this);
  uint64_t v7 = IO80211Print() + a5;
  (*(void (**)(AppleBCMWLANSkywalkTxCompletionQueue *))(*(void *)this + 216))(this);
  return IO80211Print() + v7;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkTxCompletionQueue::collectQueueStats(AppleBCMWLANSkywalkTxCompletionQueue *this, char *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  return AppleBCMWLANSkywalkTxCompletionQueue::collectQueueStats((AppleBCMWLANSkywalkTxCompletionQueue *)((char *)this - 72), a2, a3, a4, a5);
}

uint64_t AppleBCMWLANSkywalkTxCompletionQueue::requestEnqueue(IOUserNetworkPacketQueue *this, void *a2, unsigned int a3)
{
  return IOUserNetworkPacketQueue::requestEnqueue(this, a2, a3);
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkTxCompletionQueue::requestEnqueue(AppleBCMWLANSkywalkTxCompletionQueue *this, void *a2, unsigned int a3)
{
  return IOUserNetworkPacketQueue::requestEnqueue((IOUserNetworkPacketQueue *)((char *)this - 40), a2, a3);
}

uint64_t AppleBCMWLANSkywalkTxCompletionQueue::getQueueId(AppleBCMWLANSkywalkTxCompletionQueue *this)
{
  return *(unsigned int *)(*((void *)this + 10) + 32);
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkTxCompletionQueue::getQueueId(AppleBCMWLANSkywalkTxCompletionQueue *this)
{
  return *(unsigned int *)(*((void *)this + 1) + 32);
}

uint64_t AppleBCMWLANSkywalkTxCompletionQueue::enable(IOUserNetworkPacketQueue *this)
{
  if (BYTE4(this[1].OSObject::OSObjectInterface::__vftable[2].init))
  {
    uint64_t result = ((uint64_t (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(this);
    if (result)
    {
      ((void (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v3 = (CCLogStream *)((uint64_t (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(this);
        return CCLogStream::logInfo(v3, "[dk] %s@%d:Enable called on already enabled TxCompletionQ \n");
      }
    }
  }
  else
  {
    this[1].OSObject::OSObjectInterface::__vftable[2].free = (void (__cdecl *)(OSObjectInterface *__hidden))mach_continuous_time();
    BYTE4(this[1].OSObject::OSObjectInterface::__vftable[2].init) = 1;
    IOUserNetworkPacketQueue::SetEnable(this, 1, 0);
    uint64_t result = ((uint64_t (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(this);
    if (result)
    {
      ((void (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v4 = (CCLogStream *)((uint64_t (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(this);
        return CCLogStream::logInfo(v4, "[dk] %s@%d:TX Completion Queue Enable returned:0x%x\n");
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkTxCompletionQueue::enable(AppleBCMWLANSkywalkTxCompletionQueue *this)
{
  return AppleBCMWLANSkywalkTxCompletionQueue::enable((IOUserNetworkPacketQueue *)((char *)this - 72));
}

uint64_t AppleBCMWLANSkywalkTxCompletionQueue::disable(IOUserNetworkPacketQueue *this)
{
  if (BYTE4(this[1].OSObject::OSObjectInterface::__vftable[2].init))
  {
    this[1].OSObject::OSObjectInterface::__vftable[3].init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))mach_continuous_time();
    BYTE4(this[1].OSObject::OSObjectInterface::__vftable[2].init) = 0;
    IOUserNetworkPacketQueue::SetEnable(this, 0, 0);
    uint64_t result = ((uint64_t (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(this);
    if (result)
    {
      ((void (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v3 = (CCLogStream *)((uint64_t (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(this);
        return CCLogStream::logInfo(v3, "[dk] %s@%d:TX Completion Queue Disable returned:0x%x\n");
      }
    }
  }
  else
  {
    uint64_t result = ((uint64_t (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(this);
    if (result)
    {
      ((void (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v4 = (CCLogStream *)((uint64_t (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(this);
        return CCLogStream::logInfo(v4, "[dk] %s@%d:Disable called on already disabled TxCompletionQ \n");
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkTxCompletionQueue::disable(AppleBCMWLANSkywalkTxCompletionQueue *this)
{
  return AppleBCMWLANSkywalkTxCompletionQueue::disable((IOUserNetworkPacketQueue *)((char *)this - 72));
}

uint64_t AppleBCMWLANSkywalkTxCompletionQueue::getCapacity(AppleBCMWLANSkywalkTxCompletionQueue *this)
{
  return *(unsigned int *)(*((void *)this + 10) + 16);
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkTxCompletionQueue::getCapacity(AppleBCMWLANSkywalkTxCompletionQueue *this)
{
  return *(unsigned int *)(*((void *)this + 1) + 16);
}

uint64_t AppleBCMWLANSkywalkRxSubmissionQueue::getLogger(AppleBCMWLANSkywalkRxSubmissionQueue *this)
{
  return **((void **)this + 10);
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkRxSubmissionQueue::getLogger(AppleBCMWLANSkywalkRxSubmissionQueue *this)
{
  return **((void **)this + 1);
}

uint64_t AppleBCMWLANSkywalkRxSubmissionQueue::setLogger(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 80);
  if (*v4)
  {
    (*(void (**)(void))(*(void *)*v4 + 16))(*v4);
    **(void **)(a1 + 80) = 0;
    uint64_t v4 = *(void **)(a1 + 80);
  }
  *uint64_t v4 = a2;
  uint64_t result = **(void **)(a1 + 80);
  if (result)
  {
    size_t v6 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v6();
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkRxSubmissionQueue::setLogger(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANSkywalkRxSubmissionQueue::setLogger(a1 - 72, a2);
}

uint64_t AppleBCMWLANSkywalkRxSubmissionQueue::initWithPoolAndQueueInfo(IOUserNetworkRxSubmissionQueue *a1, OSObject *a2, IOUserNetworkPacketBufferPool *a3, int a4, unsigned int a5, unsigned int a6, const OSMetaClassBase *a7)
{
  uint64_t v14 = IOMallocZeroTyped();
  a1[1].meta = (OSMetaClass *)v14;
  if (!v14)
  {
    IOLog("rx sub ivar allocation fail\n");
    return 0;
  }
  *(_DWORD *)(v14 + 16) = a6;
  a1[1].meta->metaClassPrivate = (OSMetaClassPrivate *)OSMetaClassBase::safeMetaCast(a7, gIO80211WorkQueueMetaClass);
  LODWORD(a1[1].meta[1].__vftable) = a5;
  uint64_t v15 = 1;
  char v16 = IOUserNetworkRxSubmissionQueue::initWithPool(a1, a3, a6, 1u, a5, a2, (unsigned int (*)(OSObject *, IOUserNetworkPacketQueue *, IOUserNetworkPacket **, unsigned int, void *))a1->IOUserNetworkPacketQueue::OSObject::OSMetaClassBase::__vftable[1].SetPacketBufferPool, a1, 0);
  HIDWORD(a1[1].meta[1].__vftable) = 0;
  if ((v16 & 1) == 0)
  {
    if (!((uint64_t (*)(IOUserNetworkRxSubmissionQueue *))a1->IOUserNetworkPacketQueue::OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(a1)) {
      return 0;
    }
    ((void (*)(IOUserNetworkRxSubmissionQueue *))a1->IOUserNetworkPacketQueue::OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(a1);
    uint64_t v15 = 0;
    if (CCLogStream::shouldLog())
    {
      unint64_t v17 = (CCLogStream *)((uint64_t (*)(IOUserNetworkRxSubmissionQueue *))a1->IOUserNetworkPacketQueue::OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(a1);
      CCLogStream::logEmergency(v17, "[dk] %s@%d:Failed to allcoate RXSubmissionQueue for ifId:%u queueId:%u\n", "initWithPoolAndQueueInfo", 487, a4, a5);
      return 0;
    }
  }
  return v15;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkRxSubmissionQueue::initWithPoolAndQueueInfo(uint64_t a1, OSObject *a2, IOUserNetworkPacketBufferPool *a3, int a4, unsigned int a5, unsigned int a6, const OSMetaClassBase *a7)
{
  return AppleBCMWLANSkywalkRxSubmissionQueue::initWithPoolAndQueueInfo((IOUserNetworkRxSubmissionQueue *)(a1 - 72), a2, a3, a4, a5, a6, a7);
}

void AppleBCMWLANSkywalkRxSubmissionQueue::free(IOUserNetworkRxSubmissionQueue *this)
{
  uint64_t v2 = &this[1].meta->IOUserNetworkPacketQueue::OSObject::OSMetaClassBase::__vftable;
  if (!*v2
    || ((*(void (**)(void))(*(void *)*v2 + 16))(*v2),
        this[1].meta->IOUserNetworkPacketQueue::OSObject::OSMetaClassBase::__vftable = 0,
        (uint64_t v2 = &this[1].meta->IOUserNetworkPacketQueue::OSObject::OSMetaClassBase::__vftable) != 0))
  {
    IOFree(v2, 0x38uLL);
    this[1].meta = 0;
  }
  IOUserNetworkRxSubmissionQueue::free(this);
}

void non-virtual thunk to'AppleBCMWLANSkywalkRxSubmissionQueue::free(AppleBCMWLANSkywalkRxSubmissionQueue *this)
{
}

uint64_t AppleBCMWLANSkywalkRxSubmissionQueue::setInterface(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 80) + 8) = a2;
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkRxSubmissionQueue::setInterface(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 8) + 8) = a2;
  return result;
}

uint64_t AppleBCMWLANSkywalkRxSubmissionQueue::dequeuePackets()
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkRxSubmissionQueue::dequeuePackets()
{
  return 0;
}

uint64_t AppleBCMWLANSkywalkRxSubmissionQueue::collectQueueStats(AppleBCMWLANSkywalkRxSubmissionQueue *this, char *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  absolutetime_to_nanoseconds();
  absolutetime_to_nanoseconds();
  (*(void (**)(AppleBCMWLANSkywalkRxSubmissionQueue *))(*(void *)this + 216))(this);
  uint64_t v7 = IO80211Print() + a5;
  (*(void (**)(AppleBCMWLANSkywalkRxSubmissionQueue *))(*(void *)this + 216))(this);
  return IO80211Print() + v7;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkRxSubmissionQueue::collectQueueStats(AppleBCMWLANSkywalkRxSubmissionQueue *this, char *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  return AppleBCMWLANSkywalkRxSubmissionQueue::collectQueueStats((AppleBCMWLANSkywalkRxSubmissionQueue *)((char *)this - 72), a2, a3, a4, a5);
}

uint64_t AppleBCMWLANSkywalkRxSubmissionQueue::enable(IOUserNetworkPacketQueue *this)
{
  uint64_t result = ((uint64_t (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(this);
  if (result)
  {
    ((void (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      size_t v6 = (CCLogStream *)((uint64_t (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(this);
      uint64_t result = CCLogStream::logInfo(v6, "[dk] %s@%d:Enter", "enable", 553);
    }
  }
  uint64_t v3 = this[1].OSObject::OSObjectInterface::__vftable;
  int init_high = HIDWORD(v3[2].init);
  if (init_high != 0x7FFFFFFF)
  {
    HIDWORD(v3[2].init) = init_high + 1;
    if (!init_high)
    {
      if (((uint64_t (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(this))
      {
        ((void (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v7 = (CCLogStream *)((uint64_t (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(this);
          CCLogStream::logInfo(v7, "[dk] %s@%d:Enable RXSubmission Queue", "enable", 560);
        }
      }
      this[1].OSObject::OSObjectInterface::__vftable[2].free = (void (__cdecl *)(OSObjectInterface *__hidden))mach_continuous_time();
      IOUserNetworkPacketQueue::SetEnable(this, 1, 0);
      release = this->OSObject::OSMetaClassBase::__vftable[1].release;
      return ((uint64_t (*)(IOUserNetworkPacketQueue *, void, void))release)(this, 0, 0);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkRxSubmissionQueue::enable(AppleBCMWLANSkywalkRxSubmissionQueue *this)
{
  return AppleBCMWLANSkywalkRxSubmissionQueue::enable((IOUserNetworkPacketQueue *)((char *)this - 72));
}

uint64_t AppleBCMWLANSkywalkRxSubmissionQueue::disable(IOUserNetworkPacketQueue *this)
{
  uint64_t result = ((uint64_t (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(this);
  if (result)
  {
    ((void (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v5 = (CCLogStream *)((uint64_t (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(this);
      uint64_t result = CCLogStream::logInfo(v5, "[dk] %s@%d:Enter", "disable", 570);
    }
  }
  uint64_t v3 = this[1].OSObject::OSObjectInterface::__vftable;
  int init_high = HIDWORD(v3[2].init);
  if (init_high)
  {
    HIDWORD(v3[2].init) = init_high - 1;
    if (!HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[2].init))
    {
      if (((uint64_t (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(this))
      {
        ((void (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(this);
        if (CCLogStream::shouldLog())
        {
          size_t v6 = (CCLogStream *)((uint64_t (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[1].DequeuePackets)(this);
          CCLogStream::logInfo(v6, "[dk] %s@%d:Disable RXSubmission Queue", "disable", 577);
        }
      }
      this[1].OSObject::OSObjectInterface::__vftable[3].init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))mach_continuous_time();
      return IOUserNetworkPacketQueue::SetEnable(this, 0, 0);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkRxSubmissionQueue::disable(AppleBCMWLANSkywalkRxSubmissionQueue *this)
{
  return AppleBCMWLANSkywalkRxSubmissionQueue::disable((IOUserNetworkPacketQueue *)((char *)this - 72));
}

BOOL AppleBCMWLANSkywalkRxSubmissionQueue::isEnabled(AppleBCMWLANSkywalkRxSubmissionQueue *this)
{
  return *(_DWORD *)(*((void *)this + 10) + 36) != 0;
}

BOOL non-virtual thunk to'AppleBCMWLANSkywalkRxSubmissionQueue::isEnabled(AppleBCMWLANSkywalkRxSubmissionQueue *this)
{
  return *(_DWORD *)(*((void *)this + 1) + 36) != 0;
}

uint64_t AppleBCMWLANSkywalkRxCompletionQueue::getLogger(AppleBCMWLANSkywalkRxCompletionQueue *this)
{
  return **((void **)this + 10);
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkRxCompletionQueue::getLogger(AppleBCMWLANSkywalkRxCompletionQueue *this)
{
  return **((void **)this + 1);
}

uint64_t AppleBCMWLANSkywalkRxCompletionQueue::stagePacket(AppleBCMWLANSkywalkRxCompletionQueue *this, IO80211NetworkPacket *a2)
{
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANSkywalkRxCompletionQueue *, IO80211NetworkPacket *))(*(void *)this + 224))(this, a2);
  if (result)
  {
    (*(void (**)(AppleBCMWLANSkywalkRxCompletionQueue *))(*(void *)this + 224))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkRxCompletionQueue *))(*(void *)this + 224))(this);
      return CCLogStream::logAlert(v4, "[dk] %s@%d:%s[%d] Base Implementation \n", "stagePacket", 614, "stagePacket", 614);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkRxCompletionQueue::stagePacket(AppleBCMWLANSkywalkRxCompletionQueue *this, IO80211NetworkPacket *a2)
{
  return AppleBCMWLANSkywalkRxCompletionQueue::stagePacket((AppleBCMWLANSkywalkRxCompletionQueue *)((char *)this - 72), a2);
}

uint64_t AppleBCMWLANSkywalkRxCompletionQueue::initWithPoolAndQueueInfo(IOUserNetworkRxCompletionQueue *a1, OSObject *a2, IOUserNetworkPacketBufferPool *a3, int a4, unsigned int a5, unsigned int a6, const OSMetaClassBase *a7)
{
  if (!a3) {
    return 0;
  }
  uint64_t v14 = IOMallocZeroTyped();
  a1[1].meta = (OSMetaClass *)v14;
  if (!v14)
  {
    IOLog("rx comp ivar allocation fail\n");
    return 0;
  }
  *(_DWORD *)(v14 + 16) = a6;
  a1[1].meta->metaClassPrivate = (OSMetaClassPrivate *)OSMetaClassBase::safeMetaCast(a7, gIO80211WorkQueueMetaClass);
  LODWORD(a1[1].meta[1].__vftable) = a5;
  BYTE4(a1[1].meta[1].__vftable) = 0;
  if (IOUserNetworkRxCompletionQueue::initWithPool(a1, a3, a6, a5, a2, (unsigned int (*)(OSObject *, IOUserNetworkPacketQueue *, IOUserNetworkPacket **, unsigned int, void *))a1->IOUserNetworkPacketQueue::OSObject::OSMetaClassBase::__vftable[1].SetPacketBufferPool, a1, 0))return 1; {
  uint64_t result = ((uint64_t (*)(IOUserNetworkRxCompletionQueue *))a1->IOUserNetworkPacketQueue::OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(a1);
  }
  if (result)
  {
    ((void (*)(IOUserNetworkRxCompletionQueue *))a1->IOUserNetworkPacketQueue::OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(a1);
    int shouldLog = CCLogStream::shouldLog();
    uint64_t result = 0;
    if (shouldLog)
    {
      unint64_t v17 = (CCLogStream *)((uint64_t (*)(IOUserNetworkRxCompletionQueue *))a1->IOUserNetworkPacketQueue::OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(a1);
      CCLogStream::logEmergency(v17, "[dk] %s@%d:Failed to allocate RXCompletionQueue for ifId:%u queue:%u\n", "initWithPoolAndQueueInfo", 649, a4, LODWORD(a1[1].meta[1].__vftable));
      return 0;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkRxCompletionQueue::initWithPoolAndQueueInfo(uint64_t a1, OSObject *a2, IOUserNetworkPacketBufferPool *a3, int a4, unsigned int a5, unsigned int a6, const OSMetaClassBase *a7)
{
  return AppleBCMWLANSkywalkRxCompletionQueue::initWithPoolAndQueueInfo((IOUserNetworkRxCompletionQueue *)(a1 - 72), a2, a3, a4, a5, a6, a7);
}

void AppleBCMWLANSkywalkRxCompletionQueue::free(IOUserNetworkRxCompletionQueue *this)
{
  meta = this[1].meta;
  if (meta)
  {
    IOFree(meta, 0x38uLL);
    this[1].meta = 0;
  }
  IOUserNetworkRxCompletionQueue::free(this);
}

void non-virtual thunk to'AppleBCMWLANSkywalkRxCompletionQueue::free(AppleBCMWLANSkywalkRxCompletionQueue *this)
{
}

uint64_t AppleBCMWLANSkywalkRxCompletionQueue::enqueuePackets()
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkRxCompletionQueue::enqueuePackets()
{
  return 0;
}

uint64_t AppleBCMWLANSkywalkRxCompletionQueue::setInterface(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 80) + 8) = a2;
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkRxCompletionQueue::setInterface(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 8) + 8) = a2;
  return result;
}

uint64_t AppleBCMWLANSkywalkRxCompletionQueue::getQueueCapacity(AppleBCMWLANSkywalkRxCompletionQueue *this)
{
  return *(unsigned int *)(*((void *)this + 10) + 16);
}

uint64_t AppleBCMWLANSkywalkRxCompletionQueue::collectQueueStats(AppleBCMWLANSkywalkRxCompletionQueue *this, char *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  absolutetime_to_nanoseconds();
  absolutetime_to_nanoseconds();
  (*(void (**)(AppleBCMWLANSkywalkRxCompletionQueue *))(*(void *)this + 224))(this);
  uint64_t v7 = IO80211Print() + a5;
  (*(void (**)(AppleBCMWLANSkywalkRxCompletionQueue *))(*(void *)this + 224))(this);
  return IO80211Print() + v7;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkRxCompletionQueue::collectQueueStats(AppleBCMWLANSkywalkRxCompletionQueue *this, char *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  return AppleBCMWLANSkywalkRxCompletionQueue::collectQueueStats((AppleBCMWLANSkywalkRxCompletionQueue *)((char *)this - 72), a2, a3, a4, a5);
}

uint64_t AppleBCMWLANSkywalkRxCompletionQueue::freePendingPackets(AppleBCMWLANSkywalkRxCompletionQueue *this, IO80211NetworkPacket **a2)
{
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANSkywalkRxCompletionQueue *, IO80211NetworkPacket **))(*(void *)this + 224))(this, a2);
  if (result)
  {
    (*(void (**)(AppleBCMWLANSkywalkRxCompletionQueue *))(*(void *)this + 224))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkRxCompletionQueue *))(*(void *)this + 224))(this);
      return CCLogStream::logAlert(v4, "[dk] %s@%d:Not Implemented\n", "freePendingPackets", 710);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkRxCompletionQueue::freePendingPackets(AppleBCMWLANSkywalkRxCompletionQueue *this, IO80211NetworkPacket **a2)
{
  return AppleBCMWLANSkywalkRxCompletionQueue::freePendingPackets((AppleBCMWLANSkywalkRxCompletionQueue *)((char *)this - 72), a2);
}

uint64_t AppleBCMWLANSkywalkRxCompletionQueue::flushPackets(AppleBCMWLANSkywalkRxCompletionQueue *this)
{
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANSkywalkRxCompletionQueue *))(*(void *)this + 224))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANSkywalkRxCompletionQueue *))(*(void *)this + 224))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v3 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkRxCompletionQueue *))(*(void *)this + 224))(this);
      return CCLogStream::logAlert(v3, "[dk] %s@%d:Unsupported Function\n", "flushPackets", 722);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkRxCompletionQueue::flushPackets(AppleBCMWLANSkywalkRxCompletionQueue *this)
{
  return AppleBCMWLANSkywalkRxCompletionQueue::flushPackets((AppleBCMWLANSkywalkRxCompletionQueue *)((char *)this - 72));
}

uint64_t AppleBCMWLANSkywalkRxCompletionQueue::enable(IOUserNetworkPacketQueue *this)
{
  if (((uint64_t (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this))
  {
    ((void (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v4 = (CCLogStream *)((uint64_t (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this);
      CCLogStream::logInfo(v4, "[dk] %s@%d:Enable RX Completion Queue", "enable", 730);
    }
  }
  if (BYTE4(this[1].OSObject::OSObjectInterface::__vftable[2].init))
  {
    uint64_t result = ((uint64_t (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this);
    if (result)
    {
      ((void (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v3 = (CCLogStream *)((uint64_t (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this);
        return CCLogStream::logInfo(v3, "[dk] %s@%d:Enable called on already enabled RxCompletionQ\n");
      }
    }
  }
  else
  {
    this[1].OSObject::OSObjectInterface::__vftable[2].free = (void (__cdecl *)(OSObjectInterface *__hidden))mach_continuous_time();
    BYTE4(this[1].OSObject::OSObjectInterface::__vftable[2].init) = 1;
    IOUserNetworkPacketQueue::SetEnable(this, 1, 0);
    uint64_t result = ((uint64_t (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this);
    if (result)
    {
      ((void (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)((uint64_t (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this);
        return CCLogStream::logInfo(v5, "[dk] %s@%d:TX Completion Queue Enable returned:0x%x\n");
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkRxCompletionQueue::enable(AppleBCMWLANSkywalkRxCompletionQueue *this)
{
  return AppleBCMWLANSkywalkRxCompletionQueue::enable((IOUserNetworkPacketQueue *)((char *)this - 72));
}

uint64_t AppleBCMWLANSkywalkRxCompletionQueue::disable(IOUserNetworkPacketQueue *this)
{
  uint64_t v2 = this[1].OSObject::OSObjectInterface::__vftable;
  if (BYTE4(v2[2].init))
  {
    BYTE4(v2[2].init) = 0;
    this[1].OSObject::OSObjectInterface::__vftable[3].init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))mach_continuous_time();
    IOUserNetworkPacketQueue::SetEnable(this, 0, 0);
    uint64_t result = ((uint64_t (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this);
    if (result)
    {
      ((void (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v4 = (CCLogStream *)((uint64_t (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this);
        return CCLogStream::logInfo(v4, "[dk] %s@%d:TX Completion Queue Disable returned:0x%x\n");
      }
    }
  }
  else
  {
    uint64_t result = ((uint64_t (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this);
    if (result)
    {
      ((void (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)((uint64_t (*)(IOUserNetworkPacketQueue *))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this);
        return CCLogStream::logInfo(v5, "[dk] %s@%d:Disable called on already disabled RxCompletionQ\n");
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkRxCompletionQueue::disable(AppleBCMWLANSkywalkRxCompletionQueue *this)
{
  return AppleBCMWLANSkywalkRxCompletionQueue::disable((IOUserNetworkPacketQueue *)((char *)this - 72));
}

uint64_t AppleBCMWLANSkywalkRxCompletionQueue::isEnabled(AppleBCMWLANSkywalkRxCompletionQueue *this)
{
  return *(unsigned __int8 *)(*((void *)this + 10) + 36);
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkRxCompletionQueue::isEnabled(AppleBCMWLANSkywalkRxCompletionQueue *this)
{
  return *(unsigned __int8 *)(*((void *)this + 1) + 36);
}

uint64_t AppleBCMWLANSkywalkMulticastQueue::initWithInterface(OSObject *this, IO80211SkywalkInterface *a2)
{
  uint64_t v4 = (OSObjectInterface_vtbl *)IOMallocZeroTyped();
  this[1].OSObjectInterface::__vftable = v4;
  if (v4)
  {
    v4->init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))a2;
    this[1].free = (void (__cdecl *)(OSObjectInterface *__hidden))(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a2 + 1024))(a2);
    return IO80211WorkSource::init((IO80211WorkSource *)this, this, 0);
  }
  else
  {
    IOLog("mc queue ivar allocation fail\n");
    return 0;
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkMulticastQueue::initWithInterface(AppleBCMWLANSkywalkMulticastQueue *this, IO80211SkywalkInterface *a2)
{
  return AppleBCMWLANSkywalkMulticastQueue::initWithInterface((OSObject *)((char *)this - 56), a2);
}

uint64_t AppleBCMWLANSkywalkMulticastQueue::free(AppleBCMWLANSkywalkMulticastQueue *this)
{
  uint64_t v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    IOFree(v2, 0x10uLL);
    *((void *)this + 8) = 0;
  }
  return IO80211WorkSource::free(this);
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkMulticastQueue::free(AppleBCMWLANSkywalkMulticastQueue *this)
{
  return AppleBCMWLANSkywalkMulticastQueue::free((AppleBCMWLANSkywalkMulticastQueue *)((char *)this - 24));
}

uint64_t AppleBCMWLANSkywalkMulticastQueue::enable(AppleBCMWLANSkywalkMulticastQueue *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANSkywalkMulticastQueue *))(*(void *)this + 136))(this))
  {
    (*(void (**)(AppleBCMWLANSkywalkMulticastQueue *))(*(void *)this + 136))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v3 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkMulticastQueue *))(*(void *)this + 136))(this);
      CCLogStream::logInfo(v3, "[dk] %s@%d:Enter", "enable", 798);
    }
  }
  uint64_t result = **((void **)this + 8);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1000))(result);
    if (result)
    {
      if ((*(uint64_t (**)(AppleBCMWLANSkywalkMulticastQueue *))(*(void *)this + 136))(this))
      {
        (*(void (**)(AppleBCMWLANSkywalkMulticastQueue *))(*(void *)this + 136))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkMulticastQueue *))(*(void *)this + 136))(this);
          CCLogStream::logInfo(v4, "[dk] %s@%d:Enabling MC Queue\n", "enable", 801);
        }
      }
      return IO80211WorkSource::enable(this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkMulticastQueue::enable(AppleBCMWLANSkywalkMulticastQueue *this)
{
  return AppleBCMWLANSkywalkMulticastQueue::enable((AppleBCMWLANSkywalkMulticastQueue *)((char *)this - 40));
}

uint64_t AppleBCMWLANSkywalkMulticastQueue::getLogger(AppleBCMWLANSkywalkMulticastQueue *this)
{
  return *(void *)(*((void *)this + 8) + 8);
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkMulticastQueue::getLogger(AppleBCMWLANSkywalkMulticastQueue *this)
{
  return *(void *)(*((void *)this + 1) + 8);
}

void _GLOBAL__sub_I_AppleBCMWLANSkywalkQueue_cpp()
{
  kNullRange = 0;
}

unint64_t bufferRange(unsigned int a1, unsigned int a2)
{
  return __PAIR64__(a2, a1);
}

OSObject *AppleBCMWLANWnmAdapter::withDriver(AppleBCMWLANWnmAdapter *this, AppleBCMWLANCore *a2)
{
  uint64_t v7 = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  MetaClass = (OSMetaClass *)AppleBCMWLANWnmAdapter::sGetMetaClass(this);
  if (OSObjectAllocate(MetaClass, &v7)) {
    uint64_t v7 = 0;
  }
  uint64_t v4 = v7;
  if (!v7
    || (((uint64_t (*)(OSObject *, AppleBCMWLANWnmAdapter *))v7->OSMetaClassBase::__vftable[1].getMetaClass)(v7, this) & 1) != 0)
  {
    return v4;
  }
  ((void (*)(OSObject *))v4->release)(v4);
  return 0;
}

uint64_t AppleBCMWLANWnmAdapter::sGetMetaClass(AppleBCMWLANWnmAdapter *this)
{
  return gAppleBCMWLANWnmAdapterMetaClass;
}

uint64_t AppleBCMWLANWnmAdapter::initWithDriver(OSObject *this, AppleBCMWLANCore *a2)
{
  if (is_mul_ok(0x20uLL, 1uLL)) {
    uint64_t v3 = IOMallocZeroTyped();
  }
  else {
    uint64_t v3 = 0;
  }
  *(void *)&this[1].refcount = v3;
  if (*(void *)&this[1].refcount)
  {
    **(void **)&this[1].refcount = a2;
    *(void *)(*(void *)&this[1].refcount + 16) = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
    if (*(void *)(*(void *)&this[1].refcount + 16))
    {
      (*(void (**)(void))(**(void **)(*(void *)&this[1].refcount + 16) + 8))(*(void *)(*(void *)&this[1].refcount + 16));
      *(void *)(*(void *)&this[1].refcount + 8) = AppleBCMWLANCore::getCommander(a2);
      if (*(void *)(*(void *)&this[1].refcount + 8))
      {
        (*(void (**)(void))(**(void **)(*(void *)&this[1].refcount + 8) + 8))(*(void *)(*(void *)&this[1].refcount + 8));
        if (OSObject::init(this) && a2)
        {
          char v6 = 1;
        }
        else
        {
          IOLog("%s:%d Super Init failed\n", "initWithDriver", 117);
          AppleBCMWLANWnmAdapter::freeResources((AppleBCMWLANWnmAdapter *)this);
          char v6 = 0;
        }
      }
      else
      {
        IOLog("%s:%d Failed to get Command Manager\n", "initWithDriver", 110);
        AppleBCMWLANWnmAdapter::freeResources((AppleBCMWLANWnmAdapter *)this);
        char v6 = 0;
      }
    }
    else
    {
      IOLog("%s::%d: Unable to get debug logger\n", "initWithDriver", 101);
      AppleBCMWLANWnmAdapter::freeResources((AppleBCMWLANWnmAdapter *)this);
      char v6 = 0;
    }
  }
  else
  {
    char v6 = 0;
  }
  return v6 & 1;
}

uint64_t AppleBCMWLANWnmAdapter::freeResources(AppleBCMWLANWnmAdapter *this)
{
  if (AppleBCMWLANWnmAdapter::getLogger(this))
  {
    AppleBCMWLANWnmAdapter::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(this);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:WnmAgent: Enter %s \n", "freeResources", 137, "freeResources");
    }
  }
  if (*(void *)(*((void *)this + 6) + 16))
  {
    (*(void (**)(void))(**(void **)(*((void *)this + 6) + 16) + 16))(*(void *)(*((void *)this + 6) + 16));
    *(void *)(*((void *)this + 6) + 16) = 0;
  }
  if (*(void *)(*((void *)this + 6) + 8))
  {
    (*(void (**)(void))(**(void **)(*((void *)this + 6) + 8) + 16))(*(void *)(*((void *)this + 6) + 8));
    *(void *)(*((void *)this + 6) + 8) = 0;
  }
  uint64_t result = AppleBCMWLANWnmAdapter::getLogger(this);
  if (result)
  {
    AppleBCMWLANWnmAdapter::getLogger(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v3 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(this);
      return CCLogStream::logAlert(v3, "[dk] %s@%d:WnmAgent: Leave %s \n", "freeResources", 143, "freeResources");
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANWnmAdapter::initWithDriver(OSObject *this, AppleBCMWLANCore *a2)
{
  return AppleBCMWLANWnmAdapter::initWithDriver(this - 1, a2);
}

void AppleBCMWLANWnmAdapter::free(void **this)
{
  if (this[6])
  {
    AppleBCMWLANWnmAdapter::freeResources((AppleBCMWLANWnmAdapter *)this);
    memset_s(this[6], 0x20uLL, 0, 0x20uLL);
    if (this[6])
    {
      if (is_mul_ok(1uLL, 0x20uLL)) {
        IOFree(this[6], 0x20uLL);
      }
      this[6] = 0;
    }
  }
  OSObject::free((OSObject *)this);
}

void non-virtual thunk to'AppleBCMWLANWnmAdapter::free(void **this)
{
}

uint64_t AppleBCMWLANWnmAdapter::getLogger(AppleBCMWLANWnmAdapter *this)
{
  return *(void *)(*((void *)this + 6) + 16);
}

uint64_t AppleBCMWLANWnmAdapter::configureWnmFeatures(AppleBCMWLANWnmAdapter *a1, unsigned char *a2)
{
  unsigned int v8 = 0;
  if (a2)
  {
    if (AppleBCMWLANWnmAdapter::getLogger(a1))
    {
      AppleBCMWLANWnmAdapter::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        Logger = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:WnmAgent:%s:%d Got IOUC\n", "configureWnmFeatures", 175, "configureWnmFeatures", 175);
      }
    }
    if (*a2)
    {
      if (a2[8]) {
        unsigned int v8 = AppleBCMWLANWnmAdapter::configureEnterpriseFeatures(a1, a2);
      }
      if (v8)
      {
        if (AppleBCMWLANWnmAdapter::getLogger(a1))
        {
          AppleBCMWLANWnmAdapter::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v3 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
            CCLogStream::logAlert(v3, "[dk] %s@%d:AppleBCMWLANWnmAdapter error configuring enterprise features\n", "configureWnmFeatures", 184);
          }
        }
      }
      else
      {
        if ((*a2 & 4) != 0) {
          unsigned int v8 = AppleBCMWLANWnmAdapter::configureProductInfoReporting(a1, (uint64_t)a2);
        }
        if (v8)
        {
          if (AppleBCMWLANWnmAdapter::getLogger(a1))
          {
            AppleBCMWLANWnmAdapter::getLogger(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v4 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
              CCLogStream::logAlert(v4, "[dk] %s@%d:AppleBCMWLANWnmAdapter error configuring product info\n", "configureWnmFeatures", 190);
            }
          }
        }
        else
        {
          if ((*a2 & 8) != 0) {
            unsigned int v8 = AppleBCMWLANWnmAdapter::configureBeaconReporting(a1, (uint64_t)a2);
          }
          if (v8)
          {
            if (AppleBCMWLANWnmAdapter::getLogger(a1))
            {
              AppleBCMWLANWnmAdapter::getLogger(a1);
              if (CCLogStream::shouldLog())
              {
                uint64_t v5 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
                CCLogStream::logAlert(v5, "[dk] %s@%d:AppleBCMWLANWnmAdapter error configuring beacon report\n", "configureWnmFeatures", 195);
              }
            }
          }
        }
      }
      return v8;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return -536870212;
  }
}

uint64_t AppleBCMWLANWnmAdapter::configureEnterpriseFeatures(AppleBCMWLANWnmAdapter *a1, unsigned char *a2)
{
  if (AppleBCMWLANWnmAdapter::getLogger(a1))
  {
    AppleBCMWLANWnmAdapter::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:WnmAgent: Enter %s \n", "configureEnterpriseFeatures", 236, "configureEnterpriseFeatures");
    }
  }
  unsigned int v6 = AppleBCMWLANWnmAdapter::configureVoiceEnterprise((AppleBCMWLANCore ***)a1, (a2[8] >> 2) & 1);
  if (v6)
  {
    return v6;
  }
  else
  {
    if (a2[12]) {
      AppleBCMWLANWnmAdapter::configureBcnThrottleParams(a1, (uint64_t)a2);
    }
    AppleBCMWLANWnmAdapter::configureFBTOverDS((AppleBCMWLANCore ***)a1, (a2[8] >> 3) & 1);
    int v9 = 0;
    if (!PE_parse_boot_argn("wlan.debug.wnm", &v9, 4)) {
      AppleBCMWLANWnmAdapter::configureWNM((AppleBCMWLANCore ***)a1, a2);
    }
    if ((a2[8] & 2) != 0) {
      AppleBCMWLANWnmAdapter::configureRssiToRateMappingTable((AppleBCMWLANCore ***)a1, (uint64_t)(a2 + 40));
    }
    if ((a2[8] & 0x20) != 0) {
      AppleBCMWLANWnmAdapter::addAppleDeviceIE(a1, a2 + 656);
    }
    if (AppleBCMWLANWnmAdapter::getLogger(a1))
    {
      AppleBCMWLANWnmAdapter::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v3 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
        CCLogStream::logAlert(v3, "[dk] %s@%d:WnmAgent: Leave %s \n", "configureEnterpriseFeatures", 273, "configureEnterpriseFeatures");
      }
    }
    return 0;
  }
}

uint64_t AppleBCMWLANWnmAdapter::configureProductInfoReporting(AppleBCMWLANWnmAdapter *a1, uint64_t a2)
{
  uint64_t v34 = 0;
  size_t v33 = 0;
  if (AppleBCMWLANWnmAdapter::getLogger(a1))
  {
    AppleBCMWLANWnmAdapter::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:WnmAgent: Enter %s \n", "configureProductInfoReporting", 1418, "configureProductInfoReporting");
    }
  }
  if (AppleBCMWLANWnmAdapter::getLogger(a1))
  {
    AppleBCMWLANWnmAdapter::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v3 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
      CCLogStream::logAlert(v3, "[dk] %s@%d:WCLWnmAgent: AppleBCMWLANWnmAdapter::configureProductInfoReporting(%d) Clear:%d\n", "configureProductInfoReporting", 1421, 1421, (*(unsigned char *)(a2 + 812) & 0x10) != 0);
    }
  }
  unint64_t MaxCmdTxPayload = AppleBCMWLANCommander::getMaxCmdTxPayload(*(AppleBCMWLANCommander **)(*((void *)a1 + 6) + 8));
  if (MaxCmdTxPayload >= AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(*((void *)a1 + 6) + 8))) {
    uint64_t MaxCmdRxPayload = AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(*((void *)a1 + 6) + 8));
  }
  else {
    uint64_t MaxCmdRxPayload = AppleBCMWLANCommander::getMaxCmdTxPayload(*(AppleBCMWLANCommander **)(*((void *)a1 + 6) + 8));
  }
  uint64_t v30 = MaxCmdRxPayload - (strlen("bcn_report") + 1);
  memset(v43, 170, sizeof(v43));
  AppleBCMWLANUtil::AutoreleasedBuffer::AutoreleasedBuffer((AppleBCMWLANUtil::AutoreleasedBuffer *)v43, v30, 4);
  if (AppleBCMWLANUtil::AutoreleasedBuffer::isAllocationFailure((AppleBCMWLANUtil::AutoreleasedBuffer *)v43))
  {
    if (AppleBCMWLANWnmAdapter::getLogger(a1))
    {
      AppleBCMWLANWnmAdapter::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v4 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
        CCLogStream::logCrit(v4, "[dk] %s@%d:WCLWnmAgent:  No memory\n", "configureProductInfoReporting", 1427);
      }
    }
    if (AppleBCMWLANWnmAdapter::getLogger(a1))
    {
      AppleBCMWLANWnmAdapter::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:WnmAgent: Leave %s \n", "configureProductInfoReporting", 1428, "configureProductInfoReporting");
      }
    }
    unsigned int v40 = 12;
  }
  else if ((unint64_t)AppleBCMWLANUtil::AutoreleasedBuffer::getSize((AppleBCMWLANUtil::AutoreleasedBuffer *)v43) >= 0xA)
  {
    uint64_t BytesNoCopy = (char *)AppleBCMWLANUtil::AutoreleasedBuffer::getBytesNoCopy((AppleBCMWLANUtil::AutoreleasedBuffer *)v43);
    *(_WORD *)uint64_t BytesNoCopy = 2;
    uint64_t v35 = BytesNoCopy + 4;
    if ((*(unsigned char *)(a2 + 812) & 0x10) != 0)
    {
      *uint64_t v35 = -35;
      BytesNoCopy[5] = 0;
      *((_WORD *)BytesNoCopy + 1) = 6;
      if (AppleBCMWLANWnmAdapter::getLogger(a1))
      {
        AppleBCMWLANWnmAdapter::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v10 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
          CCLogStream::logAlert(v10, "[dk] %s@%d:WCLWnmAgent: Unset Vendor IE: bcm_xtlv_tSz:%u VendorIELen:%u \n", "configureProductInfoReporting", 1518, *((unsigned __int16 *)BytesNoCopy + 1), BytesNoCopy[5]);
        }
      }
    }
    else
    {
      *uint64_t v35 = -35;
      *((_WORD *)BytesNoCopy + AppleBCMWLANWnmAdapter::free(this - 3) = *(_WORD *)(a2 + 672);
      BytesNoCopy[8] = *(unsigned char *)(a2 + 674);
      BytesNoCopy[9] = *(unsigned char *)(a2 + 675);
      BytesNoCopy[10] = *(unsigned char *)(a2 + 676);
      BytesNoCopy[11] = *(unsigned char *)(a2 + 677);
      BytesNoCopy[12] = 0;
      unsigned __int16 v31 = 4;
      if ((*(unsigned char *)(a2 + 812) & 8) != 0)
      {
        uint64_t v34 = BytesNoCopy + 13;
        BytesNoCopy[13] = *(unsigned char *)(a2 + 678);
        BytesNoCopy[14] = *(unsigned char *)(a2 + 679);
        memcpy(BytesNoCopy + 15, (const void *)(a2 + 680), BytesNoCopy[14]);
        unsigned __int16 v31 = BytesNoCopy[14] + 6;
      }
      if ((*(unsigned char *)(a2 + 812) & 4) != 0)
      {
        size_t v33 = &BytesNoCopy[v31 + 9];
        *size_t v33 = *(unsigned char *)(a2 + 744);
        v33[1] = *(unsigned char *)(a2 + 745);
        memcpy(v33 + 2, (const void *)(a2 + 746), v33[1]);
        LOBYTE(v31) = v31 + v33[1] + 2;
      }
      BytesNoCopy[12] = v31 - 4;
      BytesNoCopy[5] = BytesNoCopy[12] + 7;
      *((_WORD *)BytesNoCopy + 1) = BytesNoCopy[5] + 2;
      if (AppleBCMWLANWnmAdapter::getLogger(a1))
      {
        AppleBCMWLANWnmAdapter::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          unint64_t v25 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
          if (v34) {
            int v24 = v34[1];
          }
          else {
            int v24 = 0;
          }
          if (v33) {
            CCLogStream::logAlert(v25, "[dk] %s@%d:WCLWnmAgent: Set Vendor IE: osVersion->infoLen:%u productType->infoLen:%u \n", "configureProductInfoReporting", 1505, v24, v33[1]);
          }
          else {
            CCLogStream::logAlert(v25, "[dk] %s@%d:WCLWnmAgent: Set Vendor IE: osVersion->infoLen:%u productType->infoLen:%u \n", "configureProductInfoReporting", 1505, v24, 0);
          }
        }
      }
      if (AppleBCMWLANWnmAdapter::getLogger(a1))
      {
        AppleBCMWLANWnmAdapter::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          int v9 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
          CCLogStream::logAlert(v9, "[dk] %s@%d:WCLWnmAgent: Set Vendor IE: bcm_xtlv_tSz:%u VendorIELen:%u VendorDataLen:%u\n", "configureProductInfoReporting", 1506, *((unsigned __int16 *)BytesNoCopy + 1), BytesNoCopy[5], BytesNoCopy[12]);
        }
      }
    }
    unint64_t v42 = 0;
    unsigned int v37 = AppleBCMWLANUtil::safe_align_up((AppleBCMWLANUtil *)(*((unsigned __int16 *)BytesNoCopy + 1) + 4), 4, &v42, v8);
    if (v37)
    {
      if (AppleBCMWLANWnmAdapter::getLogger(a1))
      {
        AppleBCMWLANWnmAdapter::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          unint64_t v11 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
          CCLogStream::logAlert(v11, "[dk] %s@%d:WCLWnmAgent: bad safe_align_up\n", "configureProductInfoReporting", 1525);
        }
      }
      if (AppleBCMWLANWnmAdapter::getLogger(a1))
      {
        AppleBCMWLANWnmAdapter::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          unint64_t v12 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
          CCLogStream::logAlert(v12, "[dk] %s@%d:WnmAgent: Leave %s \n", "configureProductInfoReporting", 1526, "configureProductInfoReporting");
        }
      }
      unsigned int v40 = v37;
    }
    else if (v42 < 0x10000 {
           && (unint64_t v23 = v42,
    }
               v23 <= AppleBCMWLANUtil::AutoreleasedBuffer::getSize((AppleBCMWLANUtil::AutoreleasedBuffer *)v43)))
    {
      unsigned __int16 v32 = v42;
      if (AppleBCMWLANWnmAdapter::getLogger(a1))
      {
        AppleBCMWLANWnmAdapter::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v15 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
          CCLogStream::logAlert(v15, "[dk] %s@%d:WCLWnmAgent:%s  payLoadBufLen:%u \n", "configureProductInfoReporting", 1535, "configureProductInfoReporting", v32);
        }
      }
      IO80211HexdumpIf();
      uint64_t v20 = *(AppleBCMWLANCommander **)(*((void *)a1 + 6) + 8);
      v41[0] = txPayload(BytesNoCopy, v32);
      v41[1] = v16;
      unsigned int v38 = AppleBCMWLANCommander::runIOVarSet(v20, (uint64_t)"bcn_report", (uint64_t)v41, 0, 0);
      if (v38)
      {
        if (AppleBCMWLANWnmAdapter::getLogger(a1))
        {
          AppleBCMWLANWnmAdapter::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            unint64_t v17 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
            CCLogStream::logAlert(v17, "[dk] %s@%d:\nError: Failed to configure VendorIE in Beacon Report\n", "configureProductInfoReporting", 1541);
          }
        }
      }
      if (AppleBCMWLANWnmAdapter::getLogger(a1))
      {
        AppleBCMWLANWnmAdapter::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          unint64_t v18 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
          CCLogStream::logAlert(v18, "[dk] %s@%d:WnmAgent: Leave %s \n", "configureProductInfoReporting", 1544, "configureProductInfoReporting");
        }
      }
      unsigned int v40 = v38;
    }
    else
    {
      if (AppleBCMWLANWnmAdapter::getLogger(a1))
      {
        AppleBCMWLANWnmAdapter::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          unint64_t v22 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
          unint64_t v21 = v42;
          uint64_t Size = AppleBCMWLANUtil::AutoreleasedBuffer::getSize((AppleBCMWLANUtil::AutoreleasedBuffer *)v43);
          CCLogStream::logAlert(v22, "[dk] %s@%d:WCLWnmAgent: overflow, returnLen[%zu] getSize[%zu]\n", "configureProductInfoReporting", 1530, v21, Size);
        }
      }
      if (AppleBCMWLANWnmAdapter::getLogger(a1))
      {
        AppleBCMWLANWnmAdapter::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v14 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
          CCLogStream::logAlert(v14, "[dk] %s@%d:WnmAgent: Leave %s \n", "configureProductInfoReporting", 1531, "configureProductInfoReporting");
        }
      }
      unsigned int v40 = 22;
    }
  }
  else
  {
    if (AppleBCMWLANWnmAdapter::getLogger(a1))
    {
      AppleBCMWLANWnmAdapter::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        size_t v26 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
        uint64_t v6 = AppleBCMWLANUtil::AutoreleasedBuffer::getSize((AppleBCMWLANUtil::AutoreleasedBuffer *)v43);
        CCLogStream::logCrit(v26, "[dk] %s@%d:WCLWnmAgent:  Invalid size[%zu] < %zu\n", "configureProductInfoReporting", 1433, v6, 0xAuLL);
      }
    }
    if (AppleBCMWLANWnmAdapter::getLogger(a1))
    {
      AppleBCMWLANWnmAdapter::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
        CCLogStream::logAlert(v7, "[dk] %s@%d:WnmAgent: Leave %s \n", "configureProductInfoReporting", 1434, "configureProductInfoReporting");
      }
    }
    unsigned int v40 = 22;
  }
  AppleBCMWLANUtil::AutoreleasedBuffer::~AutoreleasedBuffer((AppleBCMWLANUtil::AutoreleasedBuffer *)v43);
  return v40;
}

uint64_t AppleBCMWLANWnmAdapter::configureBeaconReporting(AppleBCMWLANWnmAdapter *a1, uint64_t a2)
{
  if (AppleBCMWLANWnmAdapter::getLogger(a1))
  {
    AppleBCMWLANWnmAdapter::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:WnmAgent: Enter %s \n", "configureBeaconReporting", 1327, "configureBeaconReporting");
    }
  }
  unint64_t MaxCmdTxPayload = AppleBCMWLANCommander::getMaxCmdTxPayload(*(AppleBCMWLANCommander **)(*((void *)a1 + 6) + 8));
  if (MaxCmdTxPayload >= AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(*((void *)a1 + 6) + 8))) {
    uint64_t MaxCmdRxPayload = AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(*((void *)a1 + 6) + 8));
  }
  else {
    uint64_t MaxCmdRxPayload = AppleBCMWLANCommander::getMaxCmdTxPayload(*(AppleBCMWLANCommander **)(*((void *)a1 + 6) + 8));
  }
  unint64_t v24 = MaxCmdRxPayload - (strlen("bcn_report") + 1);
  memset(v34, 170, sizeof(v34));
  AppleBCMWLANUtil::AutoreleasedBuffer::AutoreleasedBuffer((AppleBCMWLANUtil::AutoreleasedBuffer *)v34, v24, 4);
  if (AppleBCMWLANUtil::AutoreleasedBuffer::isAllocationFailure((AppleBCMWLANUtil::AutoreleasedBuffer *)v34))
  {
    if (AppleBCMWLANWnmAdapter::getLogger(a1))
    {
      AppleBCMWLANWnmAdapter::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v3 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
        CCLogStream::logCrit(v3, "[dk] %s@%d: No memory\n", "configureBeaconReporting", 1333);
      }
    }
    if (AppleBCMWLANWnmAdapter::getLogger(a1))
    {
      AppleBCMWLANWnmAdapter::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v4 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
        CCLogStream::logAlert(v4, "[dk] %s@%d:WnmAgent: Leave %s \n", "configureBeaconReporting", 1334, "configureBeaconReporting");
      }
    }
    unsigned int v31 = 12;
  }
  else if ((unint64_t)AppleBCMWLANUtil::AutoreleasedBuffer::getSize((AppleBCMWLANUtil::AutoreleasedBuffer *)v34) >= 0x14)
  {
    uint64_t BytesNoCopy = (char *)AppleBCMWLANUtil::AutoreleasedBuffer::getBytesNoCopy((AppleBCMWLANUtil::AutoreleasedBuffer *)v34);
    size_t v26 = BytesNoCopy + 4;
    *(_WORD *)uint64_t BytesNoCopy = 1;
    *((_WORD *)BytesNoCopy + 1) = 16;
    *((_DWORD *)BytesNoCopy + 1) = 0;
    if ((*(unsigned char *)(a2 + 812) & 2) != 0)
    {
      *v26 |= 2u;
      *((_DWORD *)BytesNoCopy + 2) = 0;
    }
    if (*(unsigned char *)(a2 + 812))
    {
      *v26 |= 4u;
      *((_DWORD *)BytesNoCopy + 2) = *(_DWORD *)(a2 + 816);
    }
    BytesNoCopy[16] = *(unsigned char *)(a2 + 820);
    *((_DWORD *)BytesNoCopy + AppleBCMWLANWnmAdapter::free(this - 3) = 0;
    unint64_t v33 = 0;
    unsigned int v28 = AppleBCMWLANUtil::safe_align_up((AppleBCMWLANUtil *)0x14, 4, &v33, v7);
    if (v28)
    {
      if (AppleBCMWLANWnmAdapter::getLogger(a1))
      {
        AppleBCMWLANWnmAdapter::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          unsigned int v8 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
          CCLogStream::logAlert(v8, "[dk] %s@%d:bad safe_align_up\n", "configureBeaconReporting", 1370);
        }
      }
      if (AppleBCMWLANWnmAdapter::getLogger(a1))
      {
        AppleBCMWLANWnmAdapter::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          int v9 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
          CCLogStream::logAlert(v9, "[dk] %s@%d:WnmAgent: Leave %s \n", "configureBeaconReporting", 1371, "configureBeaconReporting");
        }
      }
      unsigned int v31 = v28;
    }
    else if (v33 < 0x10000 {
           && (unint64_t v19 = v33,
    }
               v19 <= AppleBCMWLANUtil::AutoreleasedBuffer::getSize((AppleBCMWLANUtil::AutoreleasedBuffer *)v34)))
    {
      __int16 v25 = v33;
      IO80211HexdumpIf();
      uint64_t v16 = *(AppleBCMWLANCommander **)(*((void *)a1 + 6) + 8);
      v32[0] = txPayload(BytesNoCopy, v25);
      v32[1] = v12;
      unsigned int v29 = AppleBCMWLANCommander::runIOVarSet(v16, (uint64_t)"bcn_report", (uint64_t)v32, 0, 0);
      if (v29)
      {
        if (AppleBCMWLANWnmAdapter::getLogger(a1))
        {
          AppleBCMWLANWnmAdapter::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v13 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
            CCLogStream::logAlert(v13, "[dk] %s@%d:\nError: Failed to configure Beacon Reporting\n", "configureBeaconReporting", 1387);
          }
        }
      }
      if (AppleBCMWLANWnmAdapter::getLogger(a1))
      {
        AppleBCMWLANWnmAdapter::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v14 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
          CCLogStream::logAlert(v14, "[dk] %s@%d:WnmAgent: Leave %s \n", "configureBeaconReporting", 1390, "configureBeaconReporting");
        }
      }
      unsigned int v31 = v29;
    }
    else
    {
      if (AppleBCMWLANWnmAdapter::getLogger(a1))
      {
        AppleBCMWLANWnmAdapter::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          unint64_t v18 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
          unint64_t v17 = v33;
          uint64_t Size = AppleBCMWLANUtil::AutoreleasedBuffer::getSize((AppleBCMWLANUtil::AutoreleasedBuffer *)v34);
          CCLogStream::logAlert(v18, "[dk] %s@%d:overflow, returnLen[%zu] getSize[%zu]\n", "configureBeaconReporting", 1375, v17, Size);
        }
      }
      if (AppleBCMWLANWnmAdapter::getLogger(a1))
      {
        AppleBCMWLANWnmAdapter::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          unint64_t v11 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
          CCLogStream::logAlert(v11, "[dk] %s@%d:WnmAgent: Leave %s \n", "configureBeaconReporting", 1376, "configureBeaconReporting");
        }
      }
      unsigned int v31 = 22;
    }
  }
  else
  {
    if (AppleBCMWLANWnmAdapter::getLogger(a1))
    {
      AppleBCMWLANWnmAdapter::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v20 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
        uint64_t v5 = AppleBCMWLANUtil::AutoreleasedBuffer::getSize((AppleBCMWLANUtil::AutoreleasedBuffer *)v34);
        CCLogStream::logCrit(v20, "[dk] %s@%d: Invalid size[%zu] < %zu\n", "configureBeaconReporting", 1339, v5, 0x14uLL);
      }
    }
    if (AppleBCMWLANWnmAdapter::getLogger(a1))
    {
      AppleBCMWLANWnmAdapter::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d:WnmAgent: Leave %s \n", "configureBeaconReporting", 1340, "configureBeaconReporting");
      }
    }
    unsigned int v31 = 22;
  }
  AppleBCMWLANUtil::AutoreleasedBuffer::~AutoreleasedBuffer((AppleBCMWLANUtil::AutoreleasedBuffer *)v34);
  return v31;
}

uint64_t AppleBCMWLANWnmAdapter::configureWnmOffloadFeatures(AppleBCMWLANWnmAdapter *a1, unsigned char *a2)
{
  if (AppleBCMWLANWnmAdapter::getLogger(a1))
  {
    AppleBCMWLANWnmAdapter::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:WnmAgent: Enter %s \n", "configureWnmOffloadFeatures", 205, "configureWnmOffloadFeatures");
    }
  }
  if (*a2)
  {
    if ((*a2 & 2) != 0) {
      AppleBCMWLANWnmAdapter::unconfigureOffloads((AppleBCMWLANCore ***)a1);
    }
    if ((a2[4] & 1) != 0 && (a2[4] & 2) != 0) {
      AppleBCMWLANWnmAdapter::configureOffloads((AppleBCMWLANCore ***)a1, (uint64_t)a2);
    }
    if (AppleBCMWLANWnmAdapter::getLogger(a1))
    {
      AppleBCMWLANWnmAdapter::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v4 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
        CCLogStream::logAlert(v4, "[dk] %s@%d:WnmAgent: Leave %s \n", "configureWnmOffloadFeatures", 227, "configureWnmOffloadFeatures");
      }
    }
  }
  else if (AppleBCMWLANWnmAdapter::getLogger(a1))
  {
    AppleBCMWLANWnmAdapter::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v3 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
      CCLogStream::logAlert(v3, "[dk] %s@%d:configureWnmOffloadFeatures() no valid configuration\n", "configureWnmOffloadFeatures", 208);
    }
  }
  return 0;
}

uint64_t AppleBCMWLANWnmAdapter::unconfigureOffloads(AppleBCMWLANCore ***this)
{
  if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this))
  {
    AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
      CCLogStream::logNoticeIf(Logger, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "unconfigureOffloads", 716, "unconfigureOffloads");
    }
  }
  unsigned int v16 = 0;
  if (AppleBCMWLANCore::isWNMSupportedAndEnabled(*this[6]))
  {
    unsigned int WNMState = AppleBCMWLANWnmAdapter::getWNMState(this, &v16);
    if (WNMState)
    {
      return WNMState;
    }
    else if ((v16 & 0x40) != 0)
    {
      __int16 v14 = 257;
      char v15 = 0;
      unsigned int v8 = this[6][1];
      v13[0] = txPayload(&v14, 3);
      v13[1] = v2;
      unsigned int v11 = AppleBCMWLANCommander::runIOVarSet(v8, (uint64_t)"wnm_service_term", (uint64_t)v13, 0, 0);
      if (v11)
      {
        if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this))
        {
          AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v7 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
            uint64_t v3 = (const char *)(*(uint64_t (**)(void, void))(*(void *)*this[6] + 112))(*this[6], v11);
            CCLogStream::logAlert(v7, "[dk] %s@%d: Error: Failed to Terminate WNM Service :  Ret %s\n", "unconfigureOffloads", 749, v3);
          }
        }
      }
      if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this))
      {
        AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v4 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
          CCLogStream::logAlert(v4, "[dk] %s@%d:Terminated WNM Service\n", "unconfigureOffloads", 752);
        }
      }
      if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this))
      {
        AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v5 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
          CCLogStream::logNoticeIf(v5, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "unconfigureOffloads", 754, "unconfigureOffloads");
        }
      }
      return v11;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return -536870201;
  }
}

uint64_t AppleBCMWLANWnmAdapter::configureOffloads(AppleBCMWLANCore ***a1, uint64_t a2)
{
  if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1))
  {
    AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
      CCLogStream::logNoticeIf(Logger, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "configureOffloads", 567, "configureOffloads");
    }
  }
  unsigned int v11 = 0;
  if (AppleBCMWLANCore::isWNMSupportedAndEnabled(*a1[6]))
  {
    unsigned int WNMState = AppleBCMWLANWnmAdapter::getWNMState(a1, &v11);
    if (WNMState)
    {
      return WNMState;
    }
    else
    {
      if ((v11 & 0x40) == 0) {
        goto LABEL_25;
      }
      if (AppleBCMWLANWnmAdapter::configureWNMDMSDependency((AppleBCMWLANWnmAdapter *)a1))
      {
        if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1))
        {
          AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v3 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
            CCLogStream::logAlert(v3, "[dk] %s@%d:Failed to configure wnm DMS dependency on Proxy ARP\n", "configureOffloads", 588);
          }
        }
      }
      unsigned int WNMState = AppleBCMWLANWnmAdapter::configureDMS((AppleBCMWLANWnmAdapter *)a1, v11, a2);
      if (WNMState)
      {
        if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1))
        {
          AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v4 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
            CCLogStream::logAlert(v4, "[dk] %s@%d:Failed to configure Directed Multicast Service\n", "configureOffloads", 594);
          }
        }
        return WNMState;
      }
      else
      {
LABEL_25:
        if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1))
        {
          AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v5 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
            CCLogStream::logNoticeIf(v5, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "configureOffloads", 599, "configureOffloads");
          }
        }
        return WNMState;
      }
    }
  }
  else
  {
    return -536870201;
  }
}

uint64_t AppleBCMWLANWnmAdapter::configureVoiceEnterprise(AppleBCMWLANCore ***this, int a2)
{
  int v12 = a2;
  if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this))
  {
    AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:WnmAgent: Enter %s \n", "configureVoiceEnterprise", 281, "configureVoiceEnterprise");
    }
  }
  if ((AppleBCMWLANCore::isVESupportedAndEnabled(*this[6]) & 1) != 0
    && (long long v11 = xmmword_10036E510,
        *(void *)&long long v11 = txPayload(&v12, 4),
        *((void *)&v11 + 1) = v3,
        (unsigned int v9 = AppleBCMWLANCommander::runIOVarSet(this[6][1], (uint64_t)"split_roamscan", (uint64_t)&v11, 0, 0)) != 0))
  {
    if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this))
    {
      AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
        uint64_t v4 = (const char *)(*(uint64_t (**)(void, void))(*(void *)*this[6] + 112))(*this[6], v9);
        CCLogStream::logAlert(v7, "[dk] %s@%d: iovar set split_roamscan command failed: %s\n", "configureVoiceEnterprise", 287, v4);
      }
    }
    return v9;
  }
  else
  {
    if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this))
    {
      AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
        CCLogStream::logAlert(v5, "[dk] %s@%d:WnmAgent: Leave %s \n", "configureVoiceEnterprise", 292, "configureVoiceEnterprise");
      }
    }
    return 0;
  }
}

uint64_t AppleBCMWLANWnmAdapter::configureBcnThrottleParams(AppleBCMWLANWnmAdapter *a1, uint64_t a2)
{
  if (AppleBCMWLANWnmAdapter::getLogger(a1))
  {
    AppleBCMWLANWnmAdapter::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:WnmAgent: Enter %s \n", "configureBcnThrottleParams", 324, "configureBcnThrottleParams");
    }
  }
  int v23 = -1431655766;
  if ((*(unsigned char *)(a2 + 12) & 2) != 0) {
    int v15 = *(_DWORD *)(a2 + 16);
  }
  else {
    int v15 = 0;
  }
  int v23 = v15;
  int v22 = -1431655766;
  int v22 = *(_DWORD *)(a2 + 20);
  __int16 v14 = *(AppleBCMWLANCommander **)(*((void *)a1 + 6) + 8);
  v21[0] = txPayload(&v23, 4);
  v21[1] = v3;
  unsigned int v17 = AppleBCMWLANCommander::runIOVarSet(v14, (uint64_t)"rrm_bcn_req_thrtl_win", (uint64_t)v21, 0, 0);
  if (v17)
  {
    uint64_t result = AppleBCMWLANWnmAdapter::getLogger(a1);
    if (result)
    {
      AppleBCMWLANWnmAdapter::getLogger(a1);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v13 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
        int v12 = v23;
        uint64_t v5 = (const char *)(*(uint64_t (**)(void, void))(***((void ***)a1 + 6) + 112))(**((void **)a1 + 6), v17);
        return CCLogStream::logAlert(v13, "[dk] %s@%d:cannot set Beacon Request Throttle Window to %d : ret %x: %s  -> continue with initialization\n", "configureBcnThrottleParams", 333, v12, v17, v5);
      }
    }
  }
  else
  {
    long long v11 = *(AppleBCMWLANCommander **)(*((void *)a1 + 6) + 8);
    v20[0] = txPayload(&v22, 4);
    v20[1] = v6;
    unsigned int v18 = AppleBCMWLANCommander::runIOVarSet(v11, (uint64_t)"rrm_bcn_req_max_off_chan_time", (uint64_t)v20, 0, 0);
    if (v18)
    {
      uint64_t result = AppleBCMWLANWnmAdapter::getLogger(a1);
      if (result)
      {
        AppleBCMWLANWnmAdapter::getLogger(a1);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          uint64_t v10 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
          int v9 = v22;
          uint64_t v7 = (const char *)(*(uint64_t (**)(void, void))(***((void ***)a1 + 6) + 112))(**((void **)a1 + 6), v18);
          return CCLogStream::logAlert(v10, "[dk] %s@%d:cannot set Beacon Request Off-Channel Time to %d : ret %x: %s  -> continue with initialization\n", "configureBcnThrottleParams", 340, v9, v18, v7);
        }
      }
    }
    else
    {
      uint64_t result = AppleBCMWLANWnmAdapter::getLogger(a1);
      if (result)
      {
        AppleBCMWLANWnmAdapter::getLogger(a1);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          unsigned int v8 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
          return CCLogStream::logAlert(v8, "[dk] %s@%d:WnmAgent: Leave %s \n", "configureBcnThrottleParams", 345, "configureBcnThrottleParams");
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANWnmAdapter::configureFBTOverDS(AppleBCMWLANCore ***this, int a2)
{
  int v14 = a2;
  if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this))
  {
    AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:WnmAgent: Enter %s \n", "configureFBTOverDS", 299, "configureFBTOverDS");
    }
  }
  if ((AppleBCMWLANCore::isVESupportedAndEnabled(*this[6]) & 1) != 0
    && (AppleBCMWLANCore::checkForFBTOverDSSUpport(*this[6]) & 1) != 0)
  {
    uint64_t v10 = this[6][1];
    v13[0] = txPayload(&v14, 4);
    v13[1] = v3;
    unsigned int v12 = AppleBCMWLANCommander::runIOVarSet(v10, (uint64_t)"fbtoverds", (uint64_t)v13, 0, 0);
    if (v12)
    {
      uint64_t result = AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
      if (result)
      {
        AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          int v9 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
          int v8 = v14;
          uint64_t v5 = (const char *)(*(uint64_t (**)(void, void))(*(void *)*this[6] + 112))(*this[6], v12);
          return CCLogStream::logAlert(v9, "[dk] %s@%d:cannot set FBT Over DS to %d : ret %x: %s  -> continue with initialization\n", "configureFBTOverDS", 307, v8, v12, v5);
        }
      }
      return result;
    }
    if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this))
    {
      AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
        CCLogStream::logNoticeIf(v6, 0x80uLL, "[dk] %s@%d:Enabled FBT Over DS \n", "configureFBTOverDS", 310);
      }
    }
  }
  uint64_t result = AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
  if (result)
  {
    AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v7 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
      return CCLogStream::logAlert(v7, "[dk] %s@%d:WnmAgent: Leave %s \n", "configureFBTOverDS", 313, "configureFBTOverDS");
    }
  }
  return result;
}

BOOL PE_parse_boot_argn(const char *a1, void *a2, int a3)
{
  return IOParseBootArgNumber(a1, a2, a3);
}

uint64_t AppleBCMWLANWnmAdapter::configureWNM(AppleBCMWLANCore ***a1, unsigned char *a2)
{
  if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1))
  {
    AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:WnmAgent: Enter %s \n", "configureWNM", 356, "configureWNM");
    }
  }
  if ((*a2 & 2) != 0)
  {
    if ((AppleBCMWLANCore::checkForWNMSupport(*a1[6]) & 1) == 0) {
      return 0;
    }
    int v15 = 0;
    int v9 = a1[6][1];
    v14[0] = txPayload(&v15, 4);
    v14[1] = v3;
    unsigned int v11 = AppleBCMWLANCommander::runIOVarSet(v9, (uint64_t)"wnm", (uint64_t)v14, 0, 0);
    if (v11)
    {
      if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1))
      {
        AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
        if (CCLogStream::shouldLog())
        {
          int v8 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
          uint64_t v4 = (const char *)(*(uint64_t (**)(void, void))(*(void *)*a1[6] + 112))(*a1[6], v11);
          CCLogStream::logAlert(v8, "[dk] %s@%d: Error: Unable to set WNM:  Ret %s\n", "configureWNM", 366, v4);
        }
      }
      return v11;
    }
  }
  else
  {
    unsigned int v11 = AppleBCMWLANWnmAdapter::configureWNMExtCapability(a1, (uint64_t)a2);
    if (v11)
    {
      if (v11 != -469794537)
      {
        if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1))
        {
          AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v5 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
            CCLogStream::logAlert(v5, "[dk] %s@%d:Failed to configure WNM\n", "configureWNM", 374);
          }
        }
      }
    }
  }
  if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1))
  {
    AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v6 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
      CCLogStream::logAlert(v6, "[dk] %s@%d:WnmAgent: Leave %s \n", "configureWNM", 378, "configureWNM");
    }
  }
  return v11;
}

uint64_t AppleBCMWLANWnmAdapter::configureRssiToRateMappingTable(AppleBCMWLANCore ***a1, uint64_t a2)
{
  memset(__b, -86, sizeof(__b));
  if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1))
  {
    AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:WnmAgent: Enter %s \n", "configureRssiToRateMappingTable", 1004, "configureRssiToRateMappingTable");
    }
  }
  if (AppleBCMWLANCore::getFirmwareInterfaceVersion(*a1[6]) < 0x11)
  {
    if (AppleBCMWLANCore::getFirmwareInterfaceVersion(*a1[6]) < 0xE)
    {
      *(_WORD *)__b = 1;
      *(_WORD *)&__b[2] = 172;
      *(void *)&__b[4] = cck;
      *(_OWORD *)&__b[12] = ofdm;
      *(_OWORD *)&__b[28] = phy_n_1_1;
      *(_OWORD *)&__b[92] = phy_ac_1_1;
      *(_DWORD *)&__b[108] = dword_1003A41C4;
      *(_OWORD *)&__b[44] = phy_n_2_2;
      *(_OWORD *)&__b[112] = phy_ac_2_2;
      *(_DWORD *)&__b[128] = dword_1003A4218;
      uint64_t v10 = a1[6][1];
      v15[0] = txPayload(__b, 172);
      v15[1] = v6;
      unsigned int v12 = AppleBCMWLANCommander::runIOVarSet(v10, (uint64_t)"wnm_bsstrans_rssi_rate_map", (uint64_t)v15, 0, 0);
      if (v12)
      {
        if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1))
        {
          AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v7 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
            CCLogStream::logAlert(v7, "[dk] %s@%d: Error: Failed to configure Rssi to Mapping To Table\n", "configureRssiToRateMappingTable", 1030);
          }
        }
      }
      if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1))
      {
        AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
        if (CCLogStream::shouldLog())
        {
          int v8 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
          CCLogStream::logAlert(v8, "[dk] %s@%d:WnmAgent: Leave %s \n", "configureRssiToRateMappingTable", 1034, "configureRssiToRateMappingTable");
        }
      }
      return v12;
    }
    else
    {
      if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1))
      {
        AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v5 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
          CCLogStream::logAlert(v5, "[dk] %s@%d:WnmAgent: Leave %s \n", "configureRssiToRateMappingTable", 1013, "configureRssiToRateMappingTable");
        }
      }
      return AppleBCMWLANWnmAdapter::configureRssiToRateMappingTableV2((AppleBCMWLANWnmAdapter *)a1);
    }
  }
  else
  {
    if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1))
    {
      AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v3 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
        CCLogStream::logAlert(v3, "[dk] %s@%d:WnmAgent: Leave %s \n", "configureRssiToRateMappingTable", 1007, "configureRssiToRateMappingTable");
      }
    }
    if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1))
    {
      AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v4 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
        CCLogStream::logNoticeIf(v4, 0x4000uLL, "[dk] %s@%d:%s WiFiRoam : Programming 6G capable rate map table \n", "configureRssiToRateMappingTable", 1009, "configureRssiToRateMappingTable");
      }
    }
    return AppleBCMWLANWnmAdapter::configureRssiToRateMappingTableV4((AppleBCMWLANWnmAdapter *)a1, a2);
  }
}

uint64_t AppleBCMWLANWnmAdapter::addAppleDeviceIE(AppleBCMWLANWnmAdapter *a1, unsigned char *a2)
{
  unsigned int v76 = 0;
  if (AppleBCMWLANWnmAdapter::getLogger(a1))
  {
    AppleBCMWLANWnmAdapter::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:WnmAgent: Enter %s \n", "addAppleDeviceIE", 1210, "addAppleDeviceIE");
    }
  }
  unint64_t MaxCmdTxPayload = AppleBCMWLANCommander::getMaxCmdTxPayload(*(AppleBCMWLANCommander **)(*((void *)a1 + 6) + 8));
  if (MaxCmdTxPayload >= AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(*((void *)a1 + 6) + 8))) {
    uint64_t MaxCmdRxPayload = AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(*((void *)a1 + 6) + 8));
  }
  else {
    uint64_t MaxCmdRxPayload = AppleBCMWLANCommander::getMaxCmdTxPayload(*(AppleBCMWLANCommander **)(*((void *)a1 + 6) + 8));
  }
  unint64_t v74 = ~strlen("vndr_ie") + MaxCmdRxPayload;
  memset(v86, 170, sizeof(v86));
  AppleBCMWLANUtil::AutoreleasedBuffer::AutoreleasedBuffer((AppleBCMWLANUtil::AutoreleasedBuffer *)v86, v74, 4);
  if (AppleBCMWLANUtil::AutoreleasedBuffer::isAllocationFailure((AppleBCMWLANUtil::AutoreleasedBuffer *)v86))
  {
    if (AppleBCMWLANWnmAdapter::getLogger(a1))
    {
      AppleBCMWLANWnmAdapter::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v3 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
        CCLogStream::logCrit(v3, "[dk] %s@%d: No memory\n", "addAppleDeviceIE", 1218);
      }
    }
    unsigned int v76 = 12;
  }
  else
  {
    *(_DWORD *)__dst = 0;
    long long v84 = xmmword_10036E510;
    uint64_t BytesNoCopy = (void *)AppleBCMWLANUtil::AutoreleasedBuffer::getBytesNoCopy((AppleBCMWLANUtil::AutoreleasedBuffer *)v86);
    uint64_t Size = AppleBCMWLANUtil::AutoreleasedBuffer::getSize((AppleBCMWLANUtil::AutoreleasedBuffer *)v86);
    IO80211BufferCursor::IO80211BufferCursor((IO80211BufferCursor *)&v84, BytesNoCopy, Size);
    if (IO80211BufferCursor::operator BOOL(&v84))
    {
      uint64_t v6 = IO80211BufferCursor::asType<vndr_ie_setbuf_t>(&v84, 0, 0x12uLL);
      uint64_t v83 = v7;
      int v82 = v6;
      if (__CFADD__(v6, SHIDWORD(v7))) {
        uint64_t v8 = ((uint64_t)SHIDWORD(v7) >> 63) + 1;
      }
      else {
        uint64_t v8 = (uint64_t)SHIDWORD(v7) >> 63;
      }
      if ((v8 << 63 >> 63) ^ v8 | v8 & 1) {
        os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", v7);
      }
      if (&v6[SHIDWORD(v7)])
      {
        long long v81 = xmmword_10036E510;
        IO80211BufferCursor::trimFront((IO80211BufferCursor *)&v84, 8uLL, v80);
        uint64_t v10 = IO80211BufferCursor::asType<vndr_ie_info_t>(v80, 0, 0xAuLL);
        *((void *)&v81 + 1) = v11;
        *(void *)&long long v81 = v10;
        IO80211BufferCursor::~IO80211BufferCursor((IO80211BufferCursor *)v80);
        if (__CFADD__((void)v81, SHIDWORD(v81))) {
          uint64_t v13 = ((uint64_t)SHIDWORD(v81) >> 63) + 1;
        }
        else {
          uint64_t v13 = (uint64_t)SHIDWORD(v81) >> 63;
        }
        if ((v13 << 63 >> 63) ^ v13 | v13 & 1) {
          os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", v12);
        }
        if ((void)v81 + SHIDWORD(v81))
        {
          strlcpy(__dst, "add", 4uLL);
          IO80211BufferCursor::IO80211BufferCursor((IO80211BufferCursor *)v79, __dst, 4);
          int v67 = IO80211BufferCursor::copyFrom((uint64_t)&v84, (uint64_t)v79, 4uLL);
          IO80211BufferCursor::~IO80211BufferCursor((IO80211BufferCursor *)v79);
          if (v67)
          {
            if (AppleBCMWLANWnmAdapter::getLogger(a1))
            {
              AppleBCMWLANWnmAdapter::getLogger(a1);
              if (CCLogStream::shouldLog())
              {
                unsigned int v16 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
                CCLogStream::logCrit(v16, "[dk] %s@%d:Failed sbCursor copyFrom 'add' command, size[%zu]\n", "addAppleDeviceIE", 1258, 4uLL);
              }
            }
            unsigned int v76 = -536870911;
          }
          else
          {
            BOOL v66 = 0;
            if ((HIDWORD(v83) & 0x80000000) == 0) {
              BOOL v66 = HIDWORD(v83) + 18 <= v83;
            }
            if (!v66) {
              os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"bounded_ptr<T>::operator->: Accessing a member through this pointer would access memory outside of the bounds set originally", v15);
            }
            if (__CFADD__(v82, SHIDWORD(v83))) {
              uint64_t v17 = ((uint64_t)SHIDWORD(v83) >> 63) + 1;
            }
            else {
              uint64_t v17 = (uint64_t)SHIDWORD(v83) >> 63;
            }
            if ((v17 << 63 >> 63) ^ v17 | v17 & 1) {
              os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", v15);
            }
            *(_DWORD *)&v82[SHIDWORD(v83) + 4] = 1;
            BOOL v65 = 0;
            if ((HIDWORD(v81) & 0x80000000) == 0) {
              BOOL v65 = (HIDWORD(v81) + 10) <= DWORD2(v81);
            }
            if (!v65) {
              os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"bounded_ptr<T>::operator->: Accessing a member through this pointer would access memory outside of the bounds set originally", v15);
            }
            if (__CFADD__((void)v81, SHIDWORD(v81))) {
              uint64_t v18 = ((uint64_t)SHIDWORD(v81) >> 63) + 1;
            }
            else {
              uint64_t v18 = (uint64_t)SHIDWORD(v81) >> 63;
            }
            if ((v18 << 63 >> 63) ^ v18 | v18 & 1) {
              os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", v15);
            }
            *(unsigned char *)(v81 + SHIDWORD(v81) + 4) = -35;
            BOOL v64 = 0;
            if ((HIDWORD(v81) & 0x80000000) == 0) {
              BOOL v64 = (HIDWORD(v81) + 10) <= DWORD2(v81);
            }
            if (!v64) {
              os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"bounded_ptr<T>::operator->: Accessing a member through this pointer would access memory outside of the bounds set originally", v15);
            }
            if (__CFADD__((void)v81, SHIDWORD(v81))) {
              uint64_t v19 = ((uint64_t)SHIDWORD(v81) >> 63) + 1;
            }
            else {
              uint64_t v19 = (uint64_t)SHIDWORD(v81) >> 63;
            }
            if ((v19 << 63 >> 63) ^ v19 | v19 & 1) {
              os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", v15);
            }
            *(unsigned char *)(v81 + SHIDWORD(v81) + 5) = 11;
            BOOL v63 = 0;
            if ((HIDWORD(v81) & 0x80000000) == 0) {
              BOOL v63 = (HIDWORD(v81) + 10) <= DWORD2(v81);
            }
            if (!v63) {
              os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"bounded_ptr<T>::operator->: Accessing a member through this pointer would access memory outside of the bounds set originally", v15);
            }
            if (__CFADD__((void)v81, SHIDWORD(v81))) {
              uint64_t v20 = ((uint64_t)SHIDWORD(v81) >> 63) + 1;
            }
            else {
              uint64_t v20 = (uint64_t)SHIDWORD(v81) >> 63;
            }
            if ((v20 << 63 >> 63) ^ v20 | v20 & 1) {
              os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", v15);
            }
            *(_DWORD *)(v81 + SHIDWORD(v81)) = 0;
            if ((*a2 & 4) != 0)
            {
              BOOL v62 = 0;
              if ((HIDWORD(v81) & 0x80000000) == 0) {
                BOOL v62 = (HIDWORD(v81) + 10) <= DWORD2(v81);
              }
              if (!v62) {
                os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"bounded_ptr<T>::operator->: Accessing a member through this pointer would access memory outside of the bounds set originally", v15);
              }
              if (__CFADD__((void)v81, SHIDWORD(v81))) {
                uint64_t v21 = ((uint64_t)SHIDWORD(v81) >> 63) + 1;
              }
              else {
                uint64_t v21 = (uint64_t)SHIDWORD(v81) >> 63;
              }
              if ((v21 << 63 >> 63) ^ v21 | v21 & 1) {
                os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", v15);
              }
              *(_DWORD *)(v81 + SHIDWORD(v81)) |= 0x10u;
            }
            if ((*a2 & 0x10) != 0)
            {
              BOOL v61 = 0;
              if ((HIDWORD(v81) & 0x80000000) == 0) {
                BOOL v61 = (HIDWORD(v81) + 10) <= DWORD2(v81);
              }
              if (!v61) {
                os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"bounded_ptr<T>::operator->: Accessing a member through this pointer would access memory outside of the bounds set originally", v15);
              }
              if (__CFADD__((void)v81, SHIDWORD(v81))) {
                uint64_t v22 = ((uint64_t)SHIDWORD(v81) >> 63) + 1;
              }
              else {
                uint64_t v22 = (uint64_t)SHIDWORD(v81) >> 63;
              }
              if ((v22 << 63 >> 63) ^ v22 | v22 & 1) {
                os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", v15);
              }
              *(_DWORD *)(v81 + SHIDWORD(v81)) |= 0x20u;
            }
            if ((*a2 & 0x40) != 0)
            {
              BOOL v60 = 0;
              if ((HIDWORD(v81) & 0x80000000) == 0) {
                BOOL v60 = (HIDWORD(v81) + 10) <= DWORD2(v81);
              }
              if (!v60) {
                os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"bounded_ptr<T>::operator->: Accessing a member through this pointer would access memory outside of the bounds set originally", v15);
              }
              if (__CFADD__((void)v81, SHIDWORD(v81))) {
                uint64_t v23 = ((uint64_t)SHIDWORD(v81) >> 63) + 1;
              }
              else {
                uint64_t v23 = (uint64_t)SHIDWORD(v81) >> 63;
              }
              if ((v23 << 63 >> 63) ^ v23 | v23 & 1) {
                os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", v15);
              }
              *(_DWORD *)(v81 + SHIDWORD(v81)) |= 0x80u;
            }
            BOOL v59 = 0;
            if ((HIDWORD(v81) & 0x80000000) == 0) {
              BOOL v59 = (HIDWORD(v81) + 10) <= DWORD2(v81);
            }
            if (!v59) {
              os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"bounded_ptr<T>::operator->: Accessing a member through this pointer would access memory outside of the bounds set originally", v15);
            }
            if (__CFADD__((void)v81, SHIDWORD(v81))) {
              uint64_t v24 = ((uint64_t)SHIDWORD(v81) >> 63) + 1;
            }
            else {
              uint64_t v24 = (uint64_t)SHIDWORD(v81) >> 63;
            }
            if ((v24 << 63 >> 63) ^ v24 | v24 & 1) {
              os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", v15);
            }
            uint64_t v73 = *(unsigned __int8 *)(v81 + SHIDWORD(v81) + 5) + 17;
            uint64_t v72 = (void *)IO80211BufferCursor::asIndexablePtr<unsigned char>(&v84, 0, v73);
            if (v72)
            {
              BOOL v56 = 0;
              if ((HIDWORD(v81) & 0x80000000) == 0) {
                BOOL v56 = (HIDWORD(v81) + 10) <= DWORD2(v81);
              }
              if (!v56) {
                os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"bounded_ptr<T>::operator->: Accessing a member through this pointer would access memory outside of the bounds set originally", v25);
              }
              if (__CFADD__((void)v81, SHIDWORD(v81))) {
                uint64_t v28 = ((uint64_t)SHIDWORD(v81) >> 63) + 1;
              }
              else {
                uint64_t v28 = (uint64_t)SHIDWORD(v81) >> 63;
              }
              if ((v28 << 63 >> 63) ^ v28 | v28 & 1) {
                os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", v25);
              }
              *(unsigned char *)(v81 + SHIDWORD(v81) + 6) = a2[4];
              BOOL v55 = 0;
              if ((HIDWORD(v81) & 0x80000000) == 0) {
                BOOL v55 = (HIDWORD(v81) + 10) <= DWORD2(v81);
              }
              if (!v55) {
                os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"bounded_ptr<T>::operator->: Accessing a member through this pointer would access memory outside of the bounds set originally", v25);
              }
              if (__CFADD__((void)v81, SHIDWORD(v81))) {
                uint64_t v29 = ((uint64_t)SHIDWORD(v81) >> 63) + 1;
              }
              else {
                uint64_t v29 = (uint64_t)SHIDWORD(v81) >> 63;
              }
              if ((v29 << 63 >> 63) ^ v29 | v29 & 1) {
                os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", v25);
              }
              *(unsigned char *)(v81 + SHIDWORD(v81) + 7) = a2[5];
              BOOL v54 = 0;
              if ((HIDWORD(v81) & 0x80000000) == 0) {
                BOOL v54 = (HIDWORD(v81) + 10) <= DWORD2(v81);
              }
              if (!v54) {
                os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"bounded_ptr<T>::operator->: Accessing a member through this pointer would access memory outside of the bounds set originally", v25);
              }
              if (__CFADD__((void)v81, SHIDWORD(v81))) {
                uint64_t v30 = ((uint64_t)SHIDWORD(v81) >> 63) + 1;
              }
              else {
                uint64_t v30 = (uint64_t)SHIDWORD(v81) >> 63;
              }
              if ((v30 << 63 >> 63) ^ v30 | v30 & 1) {
                os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", v25);
              }
              *(unsigned char *)(v81 + SHIDWORD(v81) + 8) = a2[6];
              BOOL v53 = 0;
              if ((HIDWORD(v81) & 0x80000000) == 0) {
                BOOL v53 = (HIDWORD(v81) + 10) <= DWORD2(v81);
              }
              if (!v53) {
                os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"bounded_ptr<T>::operator->: Accessing a member through this pointer would access memory outside of the bounds set originally", v25);
              }
              if (__CFADD__((void)v81, SHIDWORD(v81))) {
                uint64_t v31 = ((uint64_t)SHIDWORD(v81) >> 63) + 1;
              }
              else {
                uint64_t v31 = (uint64_t)SHIDWORD(v81) >> 63;
              }
              if ((v31 << 63 >> 63) ^ v31 | v31 & 1) {
                os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", v25);
              }
              *(unsigned char *)(v81 + SHIDWORD(v81) + 9) = a2[7];
              BOOL v52 = 0;
              if ((HIDWORD(v81) & 0x80000000) == 0) {
                BOOL v52 = (HIDWORD(v81) + 10) <= DWORD2(v81);
              }
              if (!v52) {
                os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"bounded_ptr<T>::operator->: Accessing a member through this pointer would access memory outside of the bounds set originally", v25);
              }
              if (__CFADD__((void)v81, SHIDWORD(v81))) {
                uint64_t v32 = ((uint64_t)SHIDWORD(v81) >> 63) + 1;
              }
              else {
                uint64_t v32 = (uint64_t)SHIDWORD(v81) >> 63;
              }
              if ((v32 << 63 >> 63) ^ v32 | v32 & 1) {
                os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", v25);
              }
              *(unsigned char *)(v81 + SHIDWORD(v81) + 10) = a2[8];
              BOOL v51 = 0;
              if ((HIDWORD(v81) & 0x80000000) == 0) {
                BOOL v51 = (HIDWORD(v81) + 10) <= DWORD2(v81);
              }
              if (!v51) {
                os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"bounded_ptr<T>::operator->: Accessing a member through this pointer would access memory outside of the bounds set originally", v25);
              }
              if (__CFADD__((void)v81, SHIDWORD(v81))) {
                uint64_t v33 = ((uint64_t)SHIDWORD(v81) >> 63) + 1;
              }
              else {
                uint64_t v33 = (uint64_t)SHIDWORD(v81) >> 63;
              }
              if ((v33 << 63 >> 63) ^ v33 | v33 & 1) {
                os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", v25);
              }
              *(unsigned char *)(v81 + SHIDWORD(v81) + 11) = a2[9];
              BOOL v50 = 0;
              if ((HIDWORD(v81) & 0x80000000) == 0) {
                BOOL v50 = (HIDWORD(v81) + 10) <= DWORD2(v81);
              }
              if (!v50) {
                os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"bounded_ptr<T>::operator->: Accessing a member through this pointer would access memory outside of the bounds set originally", v25);
              }
              if (__CFADD__((void)v81, SHIDWORD(v81))) {
                uint64_t v34 = ((uint64_t)SHIDWORD(v81) >> 63) + 1;
              }
              else {
                uint64_t v34 = (uint64_t)SHIDWORD(v81) >> 63;
              }
              if ((v34 << 63 >> 63) ^ v34 | v34 & 1) {
                os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", v25);
              }
              *(unsigned char *)(v81 + SHIDWORD(v81) + 12) = a2[10];
              BOOL v49 = 0;
              if ((HIDWORD(v81) & 0x80000000) == 0) {
                BOOL v49 = (HIDWORD(v81) + 10) <= DWORD2(v81);
              }
              if (!v49) {
                os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"bounded_ptr<T>::operator->: Accessing a member through this pointer would access memory outside of the bounds set originally", v25);
              }
              if (__CFADD__((void)v81, SHIDWORD(v81))) {
                uint64_t v35 = ((uint64_t)SHIDWORD(v81) >> 63) + 1;
              }
              else {
                uint64_t v35 = (uint64_t)SHIDWORD(v81) >> 63;
              }
              if ((v35 << 63 >> 63) ^ v35 | v35 & 1) {
                os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", v25);
              }
              *(unsigned char *)(v81 + SHIDWORD(v81) + 1AppleBCMWLANWnmAdapter::free(this - 3) = a2[11];
              BOOL v48 = 0;
              if ((HIDWORD(v81) & 0x80000000) == 0) {
                BOOL v48 = (HIDWORD(v81) + 10) <= DWORD2(v81);
              }
              if (!v48) {
                os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"bounded_ptr<T>::operator->: Accessing a member through this pointer would access memory outside of the bounds set originally", v25);
              }
              if (__CFADD__((void)v81, SHIDWORD(v81))) {
                uint64_t v36 = ((uint64_t)SHIDWORD(v81) >> 63) + 1;
              }
              else {
                uint64_t v36 = (uint64_t)SHIDWORD(v81) >> 63;
              }
              if ((v36 << 63 >> 63) ^ v36 | v36 & 1) {
                os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", v25);
              }
              *(unsigned char *)(v81 + SHIDWORD(v81) + 14) = a2[12];
              BOOL v47 = 0;
              if ((HIDWORD(v81) & 0x80000000) == 0) {
                BOOL v47 = (HIDWORD(v81) + 10) <= DWORD2(v81);
              }
              if (!v47) {
                os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"bounded_ptr<T>::operator->: Accessing a member through this pointer would access memory outside of the bounds set originally", v25);
              }
              if (__CFADD__((void)v81, SHIDWORD(v81))) {
                uint64_t v37 = ((uint64_t)SHIDWORD(v81) >> 63) + 1;
              }
              else {
                uint64_t v37 = (uint64_t)SHIDWORD(v81) >> 63;
              }
              if ((v37 << 63 >> 63) ^ v37 | v37 & 1) {
                os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", v25);
              }
              *(unsigned char *)(v81 + SHIDWORD(v81) + 15) = a2[13];
              BOOL v46 = 0;
              if ((HIDWORD(v81) & 0x80000000) == 0) {
                BOOL v46 = (HIDWORD(v81) + 10) <= DWORD2(v81);
              }
              if (!v46) {
                os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"bounded_ptr<T>::operator->: Accessing a member through this pointer would access memory outside of the bounds set originally", v25);
              }
              if (__CFADD__((void)v81, SHIDWORD(v81))) {
                uint64_t v38 = ((uint64_t)SHIDWORD(v81) >> 63) + 1;
              }
              else {
                uint64_t v38 = (uint64_t)SHIDWORD(v81) >> 63;
              }
              if ((v38 << 63 >> 63) ^ v38 | v38 & 1) {
                os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", v25);
              }
              *(unsigned char *)(v81 + SHIDWORD(v81) + 16) = a2[14];
              size_t v45 = *(AppleBCMWLANCommander **)(*((void *)a1 + 6) + 8);
              char v39 = txPayload(v72, v73);
              v78[1] = v40;
              v78[0] = v39;
              unsigned int v75 = AppleBCMWLANCommander::runIOVarSet(v45, (uint64_t)"vndr_ie", (uint64_t)v78, 0, 0);
              if (v75)
              {
                if (AppleBCMWLANWnmAdapter::getLogger(a1))
                {
                  AppleBCMWLANWnmAdapter::getLogger(a1);
                  if (CCLogStream::shouldLog())
                  {
                    unint64_t v44 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
                    uint64_t v41 = (const char *)(*(uint64_t (**)(void, void))(***((void ***)a1 + 6) + 112))(**((void **)a1 + 6), v75);
                    CCLogStream::logCrit(v44, "[dk] %s@%d: vndr_ie error %s - failed to add IE\n", "addAppleDeviceIE", 1309, v41);
                  }
                }
                unsigned int v76 = v75;
              }
            }
            else
            {
              if (AppleBCMWLANWnmAdapter::getLogger(a1))
              {
                AppleBCMWLANWnmAdapter::getLogger(a1);
                if (CCLogStream::shouldLog())
                {
                  __int16 v57 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
                  BOOL v58 = 0;
                  if ((HIDWORD(v81) & 0x80000000) == 0) {
                    BOOL v58 = (HIDWORD(v81) + 10) <= DWORD2(v81);
                  }
                  if (!v58) {
                    os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"bounded_ptr<T>::operator->: Accessing a member through this pointer would access memory outside of the bounds set originally", v26);
                  }
                  if (__CFADD__((void)v81, SHIDWORD(v81))) {
                    uint64_t v27 = ((uint64_t)SHIDWORD(v81) >> 63) + 1;
                  }
                  else {
                    uint64_t v27 = (uint64_t)SHIDWORD(v81) >> 63;
                  }
                  if ((v27 << 63 >> 63) ^ v27 | v27 & 1) {
                    os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", v26);
                  }
                  CCLogStream::logCrit(v57, "[dk] %s@%d: Insufficient space, payloadSize[%zu], sizeof(vndr_ie_setbuf_t)[%zu], len[%u]\n", "addAppleDeviceIE", 1287, v73, 0x12uLL, *(unsigned __int8 *)(v81 + SHIDWORD(v81) + 5));
                }
              }
              unsigned int v76 = -536870911;
            }
          }
        }
        else
        {
          if (AppleBCMWLANWnmAdapter::getLogger(a1))
          {
            AppleBCMWLANWnmAdapter::getLogger(a1);
            if (CCLogStream::shouldLog())
            {
              int v14 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
              CCLogStream::logCrit(v14, "[dk] %s@%d: Invalid argument, asType size[%zu], trim size[%zu]\n", "addAppleDeviceIE", 1234, 0xAuLL, 8uLL);
            }
          }
          unsigned int v76 = -536870911;
        }
      }
      else
      {
        if (AppleBCMWLANWnmAdapter::getLogger(a1))
        {
          AppleBCMWLANWnmAdapter::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            int v9 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
            CCLogStream::logCrit(v9, "[dk] %s@%d: Invalid argument, asType size[%zu]\n", "addAppleDeviceIE", 1228, 0x12uLL);
          }
        }
        unsigned int v76 = -536870911;
      }
    }
    else
    {
      if (AppleBCMWLANWnmAdapter::getLogger(a1))
      {
        AppleBCMWLANWnmAdapter::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v5 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
          CCLogStream::logCrit(v5, "[dk] %s@%d: Invalid cursor\n", "addAppleDeviceIE", 1225);
        }
      }
      unsigned int v76 = -536870911;
    }
    IO80211BufferCursor::~IO80211BufferCursor((IO80211BufferCursor *)&v84);
  }
  if (AppleBCMWLANWnmAdapter::getLogger(a1))
  {
    AppleBCMWLANWnmAdapter::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      unint64_t v42 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
      CCLogStream::logAlert(v42, "[dk] %s@%d:WnmAgent: Leave %s \n", "addAppleDeviceIE", 1314, "addAppleDeviceIE");
    }
  }
  AppleBCMWLANUtil::AutoreleasedBuffer::~AutoreleasedBuffer((AppleBCMWLANUtil::AutoreleasedBuffer *)v86);
  return v76;
}

const void *txPayload(const void *a1, __int16 a2)
{
  uint64_t v3 = 0;
  if (a1 && a2) {
    return a1;
  }
  return (const void *)v3;
}

uint64_t AppleBCMWLANWnmAdapter::configureWNMExtCapability(AppleBCMWLANCore ***a1, uint64_t a2)
{
  if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1))
  {
    AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
      CCLogStream::logNoticeIf(Logger, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "configureWNMExtCapability", 454, "configureWNMExtCapability");
    }
  }
  if ((AppleBCMWLANCore::checkForWNMSupport(*a1[6]) & 1) == 0) {
    return -536870201;
  }
  int v29 = 0;
  if (*(unsigned char *)(a2 + 4))
  {
    if ((*(unsigned char *)(a2 + 4) & 4) != 0) {
      v29 |= 4u;
    }
    if ((*(unsigned char *)(a2 + 4) & 0x10) != 0) {
      v29 |= 0x40u;
    }
    if ((*(unsigned char *)(a2 + 4) & 2) != 0) {
      v29 |= 2u;
    }
    if ((*(unsigned char *)(a2 + 4) & 0x20) != 0) {
      v29 |= 1u;
    }
  }
  uint64_t v18 = a1[6][1];
  v28[0] = txPayload(&v29, 4);
  v28[1] = v3;
  unsigned int v20 = AppleBCMWLANCommander::runIOVarSet(v18, (uint64_t)"wnm", (uint64_t)v28, 0, 0);
  if (v20)
  {
    if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1))
    {
      AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v17 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
        uint64_t v4 = (const char *)(*(uint64_t (**)(void, void))(*(void *)*a1[6] + 112))(*a1[6], v20);
        CCLogStream::logAlert(v17, "[dk] %s@%d: Error: Unable to set WNM:  Ret %s\n", "configureWNMExtCapability", 484, v4);
      }
    }
    return v20;
  }
  if (!v29 || (*(unsigned char *)(a2 + 8) & 2) == 0 || (*(unsigned char *)(a2 + 24) & 1) == 0) {
    goto LABEL_50;
  }
  int v27 = 4;
  unsigned int v16 = a1[6][1];
  v26[0] = txPayload(&v27, 4);
  v26[1] = v5;
  unsigned int v21 = AppleBCMWLANCommander::runIOVarSet(v16, (uint64_t)"wnm_bsstrans_resp", (uint64_t)v26, 0, 0);
  if (v21)
  {
    if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1))
    {
      AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
      if (CCLogStream::shouldLog())
      {
        int v15 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
        uint64_t v6 = (const char *)(*(uint64_t (**)(void, void))(*(void *)*a1[6] + 112))(*a1[6], v21);
        CCLogStream::logAlert(v15, "[dk] %s@%d: Error: Unable to set wnm_bsstrans_resp:  Ret %s\n", "configureWNMExtCapability", 496, v6);
      }
    }
    return v21;
  }
  unsigned int v22 = AppleBCMWLANWnmAdapter::configureRoamThrottleForBSSTransMgmt((AppleBCMWLANWnmAdapter *)a1, a2 + 24);
  if (v22)
  {
    if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1))
    {
      AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
      if (CCLogStream::shouldLog())
      {
        int v14 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
        uint64_t v7 = (const char *)(*(uint64_t (**)(void, void))(*(void *)*a1[6] + 112))(*a1[6], v22);
        CCLogStream::logAlert(v14, "[dk] %s@%d: Error: Unable to set wnm_bsstrans_roamthrottle:  Ret %s\n", "configureWNMExtCapability", 503, v7);
      }
    }
    return v22;
  }
  unsigned int v23 = AppleBCMWLANWnmAdapter::configureSolicitedBSSTransMgmt((AppleBCMWLANWnmAdapter *)a1, (*(unsigned __int8 *)(a2 + 24) >> 1) & 1);
  if (v23)
  {
    if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1))
    {
      AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v13 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
        uint64_t v8 = (const char *)(*(uint64_t (**)(void, void))(*(void *)*a1[6] + 112))(*a1[6], v23);
        CCLogStream::logAlert(v13, "[dk] %s@%d: Error: Unable to set wnm_btm_solicited:  Ret %s\n", "configureWNMExtCapability", 510, v8);
      }
    }
    return v23;
  }
  unsigned int v20 = AppleBCMWLANWnmAdapter::configureBTMRssiThreshold((AppleBCMWLANWnmAdapter *)a1, *(_DWORD *)(a2 + 36));
  if (v20)
  {
    if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1))
    {
      AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
      if (CCLogStream::shouldLog())
      {
        unsigned int v12 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
        int v9 = (const char *)(*(uint64_t (**)(void, void))(*(void *)*a1[6] + 112))(*a1[6], v20);
        CCLogStream::logAlert(v12, "[dk] %s@%d: Error: Unable to set BTM Rssi Threshold:  Ret %s\n", "configureWNMExtCapability", 521, v9);
      }
    }
    return v20;
  }
  else
  {
LABEL_50:
    if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1))
    {
      AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v10 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)a1);
        CCLogStream::logNoticeIf(v10, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "configureWNMExtCapability", 527, "configureWNMExtCapability");
      }
    }
    return v20;
  }
}

uint64_t AppleBCMWLANWnmAdapter::configureWNMKeepAlives(AppleBCMWLANCore ***this, unsigned __int16 a2, unsigned __int16 a3)
{
  if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this))
  {
    AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
      CCLogStream::logNoticeIf(Logger, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "configureWNMKeepAlives", 389, "configureWNMKeepAlives");
    }
  }
  int v16 = -1431655766;
  __int16 v17 = -21846;
  if (AppleBCMWLANCore::isWNMSupportedAndEnabled(*this[6]))
  {
    LOWORD(v16) = a2;
    BYTE2(v16) = 0;
    __int16 v17 = a3;
    int v9 = this[6][1];
    v15[0] = txPayload(&v16, 6);
    v15[1] = v4;
    unsigned int v11 = AppleBCMWLANCommander::runIOVarSet(v9, (uint64_t)"wnm_keepalives_max_idle", (uint64_t)v15, 0, 0);
    if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this))
    {
      AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
        uint64_t v5 = (const char *)(*(uint64_t (**)(void, void))(*(void *)*this[6] + 112))(*this[6], v11);
        CCLogStream::logAlert(v8, "[dk] %s@%d:set WNM Keep Alives:  Ret %s %d %d \n", "configureWNMKeepAlives", 404, v5, a2, a3);
      }
    }
    if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this))
    {
      AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
        CCLogStream::logNoticeIf(v6, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "configureWNMKeepAlives", 406, "configureWNMKeepAlives");
      }
    }
    return v11;
  }
  else
  {
    return -536870201;
  }
}

uint64_t rxPayload(uint64_t a1, __int16 a2)
{
  uint64_t v3 = 0;
  if (a1 && a2) {
    return a1;
  }
  return v3;
}

uint64_t rxExpected(__int16 a1, __int16 a2)
{
  LOWORD(vAppleBCMWLANWnmAdapter::free(this - 3) = a1;
  HIWORD(vAppleBCMWLANWnmAdapter::free(this - 3) = a2;
  return v3;
}

uint64_t AppleBCMWLANWnmAdapter::configureRoamThrottleForBSSTransMgmt(AppleBCMWLANWnmAdapter *a1, uint64_t a2)
{
  if (AppleBCMWLANWnmAdapter::getLogger(a1))
  {
    AppleBCMWLANWnmAdapter::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:WnmAgent: Enter %s \n", "configureRoamThrottleForBSSTransMgmt", 533, "configureRoamThrottleForBSSTransMgmt");
    }
  }
  int v13 = 0;
  unsigned __int16 v14 = 0;
  if (*(unsigned char *)(a2 + 4))
  {
    int v13 = 1;
    unsigned __int16 v14 = 0;
    HIWORD(v1AppleBCMWLANWnmAdapter::free(this - 3) = *(_WORD *)(a2 + 6);
    unsigned __int16 v14 = *(_WORD *)(a2 + 8);
    uint64_t v7 = *(AppleBCMWLANCommander **)(*((void *)a1 + 6) + 8);
    v12[0] = txPayload(&v13, 6);
    v12[1] = v3;
    unsigned int v9 = AppleBCMWLANCommander::runIOVarSet(v7, (uint64_t)"wnm_bsstrans_roamthrottle", (uint64_t)v12, 0, 0);
    if (!v9)
    {
      if (AppleBCMWLANWnmAdapter::getLogger(a1))
      {
        AppleBCMWLANWnmAdapter::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v4 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
          CCLogStream::logInfo(v4, "[dk] %s@%d:Configure Roam Throttle Period = %d Allowed Scans = %d\n", "configureRoamThrottleForBSSTransMgmt", 554, HIWORD(v13), v14);
        }
      }
    }
    if (AppleBCMWLANWnmAdapter::getLogger(a1))
    {
      AppleBCMWLANWnmAdapter::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:WnmAgent: Leave %s \n", "configureRoamThrottleForBSSTransMgmt", 557, "configureRoamThrottleForBSSTransMgmt");
      }
    }
    return v9;
  }
  else
  {
    return 0;
  }
}

uint64_t AppleBCMWLANWnmAdapter::configureSolicitedBSSTransMgmt(AppleBCMWLANWnmAdapter *this, int a2)
{
  if (AppleBCMWLANWnmAdapter::getLogger(this))
  {
    AppleBCMWLANWnmAdapter::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(this);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:WnmAgent: Enter %s \n", "configureSolicitedBSSTransMgmt", 763, "configureSolicitedBSSTransMgmt");
    }
  }
  int v13 = a2;
  uint64_t v8 = *(AppleBCMWLANCommander **)(*((void *)this + 6) + 8);
  v12[0] = txPayload(&v13, 4);
  v12[1] = v3;
  unsigned int v10 = AppleBCMWLANCommander::runIOVarSet(v8, (uint64_t)"wnm_btm_solicited", (uint64_t)v12, 0, 0);
  if (v10)
  {
    if (AppleBCMWLANWnmAdapter::getLogger(this))
    {
      AppleBCMWLANWnmAdapter::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(this);
        uint64_t v4 = (const char *)(*(uint64_t (**)(void, void))(***((void ***)this + 6) + 112))(**((void **)this + 6), v10);
        CCLogStream::logAlert(v7, "[dk] %s@%d: Error: Failed to Set Solicited BSS Trans Mgmt :  Ret %s\n", "configureSolicitedBSSTransMgmt", 770, v4);
      }
    }
  }
  if (AppleBCMWLANWnmAdapter::getLogger(this))
  {
    AppleBCMWLANWnmAdapter::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(this);
      CCLogStream::logAlert(v5, "[dk] %s@%d:WnmAgent: Leave %s \n", "configureSolicitedBSSTransMgmt", 773, "configureSolicitedBSSTransMgmt");
    }
  }
  return v10;
}

uint64_t AppleBCMWLANWnmAdapter::configureBTMRssiThreshold(AppleBCMWLANWnmAdapter *this, int a2)
{
  if (AppleBCMWLANWnmAdapter::getLogger(this))
  {
    AppleBCMWLANWnmAdapter::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(this);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:WnmAgent: Enter %s \n", "configureBTMRssiThreshold", 780, "configureBTMRssiThreshold");
    }
  }
  int v13 = a2;
  uint64_t v8 = *(AppleBCMWLANCommander **)(*((void *)this + 6) + 8);
  v12[0] = txPayload(&v13, 4);
  v12[1] = v3;
  unsigned int v10 = AppleBCMWLANCommander::runIOVarSet(v8, (uint64_t)"wnm_btm_rssi_thresh", (uint64_t)v12, 0, 0);
  if (v10)
  {
    if (AppleBCMWLANWnmAdapter::getLogger(this))
    {
      AppleBCMWLANWnmAdapter::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(this);
        uint64_t v4 = (const char *)(*(uint64_t (**)(void, void))(***((void ***)this + 6) + 112))(**((void **)this + 6), v10);
        CCLogStream::logAlert(v7, "[dk] %s@%d: Error: Failed to Set BTM Rssi Threshold :  Ret %s\n", "configureBTMRssiThreshold", 787, v4);
      }
    }
  }
  if (AppleBCMWLANWnmAdapter::getLogger(this))
  {
    AppleBCMWLANWnmAdapter::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(this);
      CCLogStream::logAlert(v5, "[dk] %s@%d:WnmAgent: Leave %s \n", "configureBTMRssiThreshold", 790, "configureBTMRssiThreshold");
    }
  }
  return v10;
}

uint64_t AppleBCMWLANWnmAdapter::getWNMState(AppleBCMWLANCore ***this, unsigned int *a2)
{
  if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this))
  {
    AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
      CCLogStream::logNoticeIf(Logger, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "getWNMState", 693, "getWNMState");
    }
  }
  unsigned int v13 = 0;
  if (AppleBCMWLANCore::isWNMSupportedAndEnabled(*this[6]))
  {
    long long v12 = xmmword_10036E510;
    rxExpected(4, 4);
    *(void *)&long long v12 = rxPayload((uint64_t)&v13, 4);
    *((void *)&v12 + 1) = v3;
    unsigned int v9 = AppleBCMWLANCommander::runIOVarGet(this[6][1], (uint64_t)"wnm", (uint64_t)&kNoTxPayload, (uint64_t)&v12, 0);
    if (v9)
    {
      if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this))
      {
        AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v7 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
          uint64_t v4 = (const char *)(*(uint64_t (**)(void, void))(*(void *)*this[6] + 112))(*this[6], v9);
          CCLogStream::logAlert(v7, "[dk] %s@%d: wnm get failed, error %s\n", "getWNMState", 705, v4);
        }
      }
    }
    *a2 = v13;
    if (AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this))
    {
      AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger((AppleBCMWLANWnmAdapter *)this);
        CCLogStream::logNoticeIf(v5, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "getWNMState", 710, "getWNMState");
      }
    }
    return v9;
  }
  else
  {
    return -536870201;
  }
}

uint64_t AppleBCMWLANWnmAdapter::configureWNMDMSDependency(AppleBCMWLANWnmAdapter *this)
{
  if (AppleBCMWLANWnmAdapter::getLogger(this))
  {
    AppleBCMWLANWnmAdapter::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(this);
      CCLogStream::logNoticeIf(Logger, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "configureWNMDMSDependency", 606, "configureWNMDMSDependency");
    }
  }
  int v9 = 1;
  uint64_t v5 = *(AppleBCMWLANCommander **)(*((void *)this + 6) + 8);
  v8[0] = txPayload(&v9, 4);
  v8[1] = v2;
  unsigned int v7 = AppleBCMWLANCommander::runIOVarSet(v5, (uint64_t)"wnm_dms_dependency", (uint64_t)v8, 0, 0);
  if (AppleBCMWLANWnmAdapter::getLogger(this))
  {
    AppleBCMWLANWnmAdapter::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v3 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(this);
      CCLogStream::logNoticeIf(v3, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "configureWNMDMSDependency", 615, "configureWNMDMSDependency");
    }
  }
  return v7;
}

uint64_t AppleBCMWLANWnmAdapter::configureDMS(AppleBCMWLANWnmAdapter *a1, char a2, uint64_t a3)
{
  if (AppleBCMWLANWnmAdapter::getLogger(a1))
  {
    AppleBCMWLANWnmAdapter::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
      CCLogStream::logNoticeIf(Logger, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "configureDMS", 621, "configureDMS");
    }
  }
  BOOL v16 = 1;
  if (*(_DWORD *)(a3 + 12)) {
    BOOL v16 = *(_DWORD *)(a3 + 12) == 2;
  }
  if ((a2 & 0x40) != 0 && v16)
  {
    memset(&v27[1], 0, 11);
    v27[0] = 72680448;
    LODWORD(v27[1]) = *(_DWORD *)(a3 + 16);
    HIWORD(v27[1]) = *(_WORD *)(a3 + 20);
    BYTE1(v27[2]) = *(unsigned char *)(a3 + 23);
    int v15 = *(AppleBCMWLANCommander **)(*((void *)a1 + 6) + 8);
    v26[0] = txPayload(v27, 19);
    v26[1] = v4;
    unsigned int v18 = AppleBCMWLANCommander::runIOVarSet(v15, (uint64_t)"tclas_add", (uint64_t)v26, 0, 0);
    if (v18)
    {
      if (AppleBCMWLANWnmAdapter::getLogger(a1))
      {
        AppleBCMWLANWnmAdapter::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          unsigned __int16 v14 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
          uint64_t v5 = (const char *)(*(uint64_t (**)(void, void))(***((void ***)a1 + 6) + 112))(**((void **)a1 + 6), v18);
          CCLogStream::logAlert(v14, "[dk] %s@%d: Error: Unable to Add Classifier Type %d:  Ret %s\n", "configureDMS", 655, 4, v5);
        }
      }
    }
    if (AppleBCMWLANWnmAdapter::getLogger(a1))
    {
      AppleBCMWLANWnmAdapter::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d:Added Traffic Classifer 4\n", "configureDMS", 658);
      }
    }
    __int16 v24 = 257;
    char v25 = 0;
    unsigned int v13 = *(AppleBCMWLANCommander **)(*((void *)a1 + 6) + 8);
    v23[0] = txPayload(&v24, 3);
    v23[1] = v7;
    unsigned int v19 = AppleBCMWLANCommander::runIOVarSet(v13, (uint64_t)"wnm_dms_set", (uint64_t)v23, 0, 0);
    if (v19)
    {
      if (AppleBCMWLANWnmAdapter::getLogger(a1))
      {
        AppleBCMWLANWnmAdapter::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          long long v12 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
          uint64_t v8 = (const char *)(*(uint64_t (**)(void, void))(***((void ***)a1 + 6) + 112))(**((void **)a1 + 6), v19);
          CCLogStream::logAlert(v12, "[dk] %s@%d: Error: Failed to set DMS Request :  Ret %s\n", "configureDMS", 675, v8);
        }
      }
      return v19;
    }
    else
    {
      if (AppleBCMWLANWnmAdapter::getLogger(a1) != 0)
      {
        AppleBCMWLANWnmAdapter::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          unsigned int v10 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
          CCLogStream::logNoticeIf(v10, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "configureDMS", 683, "configureDMS");
        }
      }
      return 0;
    }
  }
  else
  {
    return -536870174;
  }
}

uint64_t AppleBCMWLANWnmAdapter::configureRssiToRateMappingTableV4(AppleBCMWLANWnmAdapter *a1, uint64_t a2)
{
  memset(__b, -86, sizeof(__b));
  if (AppleBCMWLANWnmAdapter::getLogger(a1))
  {
    AppleBCMWLANWnmAdapter::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:WnmAgent: Enter %s \n", "configureRssiToRateMappingTableV4", 929, "configureRssiToRateMappingTableV4");
    }
  }
  *(_WORD *)__b = 4;
  *(_WORD *)&__b[2] = 616;
  *(void *)&__b[4] = *(void *)(a2 + 2);
  *(_DWORD *)&__b[12] = *(_DWORD *)(a2 + 10);
  *(_OWORD *)&__b[16] = *(_OWORD *)(a2 + 14);
  *(void *)&__b[32] = *(void *)(a2 + 30);
  *(_OWORD *)&__b[40] = *(_OWORD *)(a2 + 38);
  *(void *)&__b[56] = *(void *)(a2 + 54);
  memcpy(&__b[136], (const void *)(a2 + 134), 0x24uLL);
  memcpy(&__b[280], (const void *)(a2 + 278), 0x24uLL);
  memcpy(&__b[424], (const void *)(a2 + 422), 0x30uLL);
  *(_OWORD *)&__b[64] = *(_OWORD *)(a2 + 62);
  *(void *)&__b[80] = *(void *)(a2 + 78);
  memcpy(&__b[172], (const void *)(a2 + 170), 0x24uLL);
  memcpy(&__b[316], (const void *)(a2 + 314), 0x24uLL);
  memcpy(&__b[472], (const void *)(a2 + 470), 0x30uLL);
  uint64_t v8 = *(AppleBCMWLANCommander **)(*((void *)a1 + 6) + 8);
  v12[0] = txPayload(__b, 616);
  v12[1] = v3;
  unsigned int v10 = AppleBCMWLANCommander::runIOVarSet(v8, (uint64_t)"wnm_bsstrans_rssi_rate_map", (uint64_t)v12, 0, 0);
  if (v10)
  {
    if (AppleBCMWLANWnmAdapter::getLogger(a1))
    {
      AppleBCMWLANWnmAdapter::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v4 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
        CCLogStream::logAlert(v4, "[dk] %s@%d: WiFiRoam : Error: Failed to configure Rssi to Mapping To Table. Return value : [%d]\n", "configureRssiToRateMappingTableV4", 955, v10);
      }
    }
  }
  else if (AppleBCMWLANWnmAdapter::getLogger(a1))
  {
    AppleBCMWLANWnmAdapter::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
      CCLogStream::logAlert(v5, "[dk] %s@%d: WiFiRoam : Successfully programmed rate map table for tri band\n", "configureRssiToRateMappingTableV4", 958);
    }
  }
  if (AppleBCMWLANWnmAdapter::getLogger(a1))
  {
    AppleBCMWLANWnmAdapter::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v6 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(a1);
      CCLogStream::logAlert(v6, "[dk] %s@%d:WnmAgent: Leave %s \n", "configureRssiToRateMappingTableV4", 961, "configureRssiToRateMappingTableV4");
    }
  }
  return v10;
}

uint64_t AppleBCMWLANWnmAdapter::configureRssiToRateMappingTableV2(AppleBCMWLANWnmAdapter *this)
{
  memset(__b, -86, sizeof(__b));
  if (AppleBCMWLANWnmAdapter::getLogger(this))
  {
    AppleBCMWLANWnmAdapter::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(this);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:WnmAgent: Enter %s \n", "configureRssiToRateMappingTableV2", 971, "configureRssiToRateMappingTableV2");
    }
  }
  __b[0] = 18612226;
  *(void *)&__b[1] = cck;
  *(_OWORD *)&__b[3] = ofdm;
  *(_OWORD *)&__b[7] = phy_n_1_1;
  *(_OWORD *)&__b[23] = phy_ac_1_1_v2;
  *(void *)&__b[27] = qword_1003A41D8;
  *(_OWORD *)&__b[47] = phy_ax_1_1;
  *(void *)&__b[51] = qword_1003A41F0;
  *(_OWORD *)&__b[11] = phy_n_2_2;
  *(_OWORD *)&__b[29] = phy_ac_2_2_v2;
  *(void *)&__b[33] = qword_1003A422C;
  *(_OWORD *)&__b[53] = phy_ax_2_2;
  *(void *)&__b[57] = qword_1003A4244;
  uint64_t v6 = *(AppleBCMWLANCommander **)(*((void *)this + 6) + 8);
  v9[0] = txPayload(__b, 284);
  v9[1] = v2;
  unsigned int v8 = AppleBCMWLANCommander::runIOVarSet(v6, (uint64_t)"wnm_bsstrans_rssi_rate_map", (uint64_t)v9, 0, 0);
  if (v8)
  {
    if (AppleBCMWLANWnmAdapter::getLogger(this))
    {
      AppleBCMWLANWnmAdapter::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v3 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(this);
        CCLogStream::logAlert(v3, "[dk] %s@%d: Error: Failed to configure Rssi to Mapping To Table\n", "configureRssiToRateMappingTableV2", 989);
      }
    }
  }
  if (AppleBCMWLANWnmAdapter::getLogger(this))
  {
    AppleBCMWLANWnmAdapter::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v4 = (CCLogStream *)AppleBCMWLANWnmAdapter::getLogger(this);
      CCLogStream::logAlert(v4, "[dk] %s@%d:WnmAgent: Leave %s \n", "configureRssiToRateMappingTableV2", 993, "configureRssiToRateMappingTableV2");
    }
  }
  return v8;
}

AppleBCMWLANUtil::AutoreleasedBuffer *AppleBCMWLANUtil::AutoreleasedBuffer::AutoreleasedBuffer(AppleBCMWLANUtil::AutoreleasedBuffer *this, uint64_t a2, int a3)
{
  return this;
}

{
  AppleBCMWLANUtil::AutoreleasedResource::AutoreleasedResource(this);
  *(void *)this = IOMallocZeroData();
  *((void *)this + 1) = a2;
  *((_DWORD *)this + 4) = a3;
  if (!*(void *)this) {
    *((void *)this + 1) = 0;
  }
  return this;
}

BOOL AppleBCMWLANUtil::AutoreleasedBuffer::isAllocationFailure(AppleBCMWLANUtil::AutoreleasedBuffer *this)
{
  return *(void *)this == 0;
}

uint64_t AppleBCMWLANUtil::AutoreleasedBuffer::getBytesNoCopy(AppleBCMWLANUtil::AutoreleasedBuffer *this)
{
  return *(void *)this;
}

uint64_t AppleBCMWLANUtil::AutoreleasedBuffer::getSize(AppleBCMWLANUtil::AutoreleasedBuffer *this)
{
  return *((void *)this + 1);
}

void IO80211BufferCursor::IO80211BufferCursor(IO80211BufferCursor *this, void *a2, uint64_t a3)
{
}

{
  BOOL v3;

  *(void *)this = a2;
  *((void *)this + 1) = a3;
  uint64_t v3 = 1;
  if (*(void *)this)
  {
    uint64_t v3 = 1;
    if (*((void *)this + 1)) {
      uint64_t v3 = *((void *)this + 1) > 0x3FFFFFFFFFFFFFFFuLL;
    }
  }
  if (v3)
  {
    *(void *)this = 0;
    *((void *)this + 1) = 0;
  }
}

BOOL IO80211BufferCursor::operator BOOL(void *a1)
{
  BOOL v2 = 0;
  if (*a1) {
    return a1[1] != 0;
  }
  return v2;
}

const char *IO80211BufferCursor::asType<vndr_ie_setbuf_t>(void *a1, const char *a2, unint64_t a3)
{
  return IO80211BufferCursor::_asType<vndr_ie_setbuf_t>(a1, a2, a3);
}

uint64_t *IO80211BufferCursor::trimFront@<X0>(IO80211BufferCursor *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  return IO80211BufferCursor::_crop((uint64_t *)this, a2, 0xFFFFFFFFFFFFFFFFLL, a3);
}

const char *IO80211BufferCursor::asType<vndr_ie_info_t>(void *a1, const char *a2, unint64_t a3)
{
  return IO80211BufferCursor::_asType<vndr_ie_info_t>(a1, a2, a3);
}

void IO80211BufferCursor::~IO80211BufferCursor(IO80211BufferCursor *this)
{
}

{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
}

uint64_t IO80211BufferCursor::asIndexablePtr<unsigned char>(void *a1, uint64_t a2, uint64_t a3)
{
  return IO80211BufferCursor::_asRawPtr<unsigned char>(a1, a2, a3);
}

void AppleBCMWLANUtil::AutoreleasedBuffer::~AutoreleasedBuffer(AppleBCMWLANUtil::AutoreleasedBuffer *this)
{
}

{
  if (*(void *)this)
  {
    IOFreeData();
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
  }
  AppleBCMWLANUtil::AutoreleasedResource::AutoreleasedResource(this);
}

void AppleBCMWLANUtil::AutoreleasedResource::AutoreleasedResource(AppleBCMWLANUtil::AutoreleasedResource *this)
{
}

uint64_t IO80211BufferCursor::_asRawPtr<unsigned char>(void *a1, uint64_t a2, uint64_t a3)
{
  BOOL v3 = __CFADD__(a2, a3);
  BOOL v5 = 1;
  if (!v3)
  {
    BOOL v5 = 1;
    if ((unint64_t)(a2 + a3) <= a1[1]) {
      BOOL v5 = a3 == 0;
    }
  }
  if (v5) {
    return 0;
  }
  else {
    return *a1 + a2;
  }
}

const char *IO80211BufferCursor::_asType<vndr_ie_setbuf_t>(void *a1, const char *a2, unint64_t a3)
{
  BOOL v3 = __CFADD__(a2, a3);
  uint64_t v7 = &a2[a3];
  BOOL v6 = 1;
  if (!v3)
  {
    BOOL v6 = 1;
    if ((unint64_t)v7 <= a1[1]) {
      BOOL v6 = a3 < 0x12;
    }
  }
  if (v6) {
    return 0;
  }
  unsigned int v8 = &v7[*a1];
  int v9 = &a2[*a1];
  BOOL v4 = v8 < v9;
  if (((v8 - v9) & 0xFFFFFFFF00000000) != 0) {
    BOOL v4 = 1;
  }
  if (v4) {
    os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"The range of valid memory is too large to be represented by this type, or [begin, end) is not a well-formed range", a2);
  }
  return v9;
}

const char *IO80211BufferCursor::_asType<vndr_ie_info_t>(void *a1, const char *a2, unint64_t a3)
{
  BOOL v3 = __CFADD__(a2, a3);
  uint64_t v7 = &a2[a3];
  BOOL v6 = 1;
  if (!v3)
  {
    BOOL v6 = 1;
    if ((unint64_t)v7 <= a1[1]) {
      BOOL v6 = a3 < 0xA;
    }
  }
  if (v6) {
    return 0;
  }
  unsigned int v8 = &v7[*a1];
  int v9 = &a2[*a1];
  BOOL v4 = v8 < v9;
  if (((v8 - v9) & 0xFFFFFFFF00000000) != 0) {
    BOOL v4 = 1;
  }
  if (v4) {
    os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"The range of valid memory is too large to be represented by this type, or [begin, end) is not a well-formed range", a2);
  }
  return v9;
}

unint64_t __cxx_global_var_init()
{
  unint64_t result = bufferRange(0, 0);
  kNullRange  = result;
  return result;
}

unint64_t _GLOBAL__sub_I_AppleBCMWLANWnmAdapter_cpp()
{
  return __cxx_global_var_init();
}

OSObject *AppleBCMWLANPCIeIO::withSlab(AppleBCMWLANPCIeIO *this, AppleBCMWLANDMASlab *a2)
{
  BOOL v6 = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANPCIeIOMetaClass, &v6)) {
    return 0;
  }
  BOOL v4 = v6;
  if (v6
    && (((uint64_t (*)(OSObject *, AppleBCMWLANPCIeIO *, AppleBCMWLANDMASlab *))v6->OSMetaClassBase::__vftable[1].getMetaClass)(v6, this, a2) & 1) == 0)
  {
    ((void (*)(OSObject *))v4->release)(v4);
    return 0;
  }
  return v4;
}

uint64_t AppleBCMWLANPCIeIO::initWithSlab(AppleBCMWLANDMASlab ***this, AppleBCMWLANDMASlab *a2, int a3)
{
  uint64_t result = IOCommand::init((IOCommand *)this);
  if (result)
  {
    uint64_t v7 = (AppleBCMWLANDMASlab **)IOMallocZeroTyped();
    this[7]  = v7;
    if (v7)
    {
      *uint64_t v7 = a2;
      uint64_t result = (uint64_t)this[7];
      if (*(void *)result)
      {
        (*(void (**)(void))(**(void **)result + 8))(*(void *)result);
        *((_DWORD *)this[7] + 2)  = a3;
        *((_DWORD *)this[7] + AppleBCMWLANWnmAdapter::free(this - 3) = AppleBCMWLANDMASlab::getItemSize(*this[7]);
        return 1;
      }
    }
    else
    {
      IOLog("Failed to allocate AppleBCMWLANPCIeIO_IVars\n");
      uint64_t result = (uint64_t)this[7];
      if (!result) {
        return result;
      }
    }
    memset_s((void *)result, 0x38uLL, 0, 0x38uLL);
    uint64_t result = (uint64_t)this[7];
    if (result)
    {
      IOFree((void *)result, 0x38uLL);
      uint64_t result = 0;
      this[7]  = 0;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeIO::initWithSlab(AppleBCMWLANDMASlab ***this, AppleBCMWLANDMASlab *a2, int a3)
{
  return AppleBCMWLANPCIeIO::initWithSlab(this - 6, a2, a3);
}

uint64_t AppleBCMWLANPCIeIO::free(AppleBCMWLANPCIeIO *this)
{
  BOOL v2 = (void *)*((void *)this + 7);
  if (!*v2
    || ((*(void (**)(void))(*(void *)*v2 + 16))(*v2),
        **((void **)this + 7)  = 0,
        (BOOL v2 = (void *)*((void *)this + 7)) != 0))
  {
    memset_s(v2, 0x38uLL, 0, 0x38uLL);
    BOOL v3 = (void *)*((void *)this + 7);
    if (v3)
    {
      IOFree(v3, 0x38uLL);
      *((void *)this + 7)  = 0;
    }
  }
  return IOCommand::free(this);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeIO::free(AppleBCMWLANPCIeIO *this)
{
  return AppleBCMWLANPCIeIO::free((AppleBCMWLANPCIeIO *)((char *)this - 24));
}

uint64_t AppleBCMWLANPCIeIO::prepare(AppleBCMWLANPCIeIO *this, IO80211Buffer *a2, int a3, int a4)
{
  *(void *)(*((void *)this + 7) + 48)  = a2;
  *(_DWORD *)(*((void *)this + 7) + 24)  = a3;
  *(_DWORD *)(*((void *)this + 7) + 28)  = a4;
  if ((AppleBCMWLANDMASlab::getDirection(**((AppleBCMWLANDMASlab ***)this + 7)) & 2) == 0) {
    return 0;
  }
  uint64_t v5 = *((void *)this + 7);
  unsigned int v6 = *(_DWORD *)(v5 + 28);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = *(AppleBCMWLANDMASlab **)v5;
  unsigned int v8 = *(_DWORD *)(v5 + 8);
  int v9 = *(IO80211Buffer **)(v5 + 48);
  unsigned int v10 = *(_DWORD *)(v5 + 24);
  return AppleBCMWLANDMASlab::copyBufferDescriptorToBounce(v7, v8, v9, v10, v6);
}

uint64_t AppleBCMWLANPCIeIO::complete(AppleBCMWLANPCIeIO *this, IO80211Buffer **a2)
{
  uint64_t v2 = *((void *)this + 7);
  if (!*(void *)(v2 + 48)) {
    return 3758097136;
  }
  Direction  = AppleBCMWLANDMASlab::getDirection(*(AppleBCMWLANDMASlab **)v2);
  uint64_t v6 = *((void *)this + 7);
  if ((Direction & 1) != 0 && (unsigned int v7 = *(_DWORD *)(v6 + 28)) != 0)
  {
    uint64_t result = AppleBCMWLANDMASlab::copyBounceToBufferDescriptor(*(AppleBCMWLANDMASlab **)v6, *(_DWORD *)(v6 + 8), *(IO80211Buffer **)(v6 + 48), *(_DWORD *)(v6 + 24), v7);
    uint64_t v6 = *((void *)this + 7);
  }
  else
  {
    uint64_t result = 0;
  }
  *a2  = *(IO80211Buffer **)(v6 + 48);
  *(void *)(*((void *)this + 7) + 48)  = 0;
  return result;
}

uint64_t AppleBCMWLANPCIeIO::getDirection(AppleBCMWLANDMASlab ***this)
{
  return AppleBCMWLANDMASlab::getDirection(*this[7]);
}

uint64_t AppleBCMWLANPCIeIO::getBusAddr64(AppleBCMWLANDMASlab ***this, IOAddressSegment *a2)
{
  return AppleBCMWLANDMASlab::getBusAddr64(*this[7], *((_DWORD *)this[7] + 2), a2);
}

uint64_t AppleBCMWLANPCIeIO::reset(uint64_t this)
{
  *(void *)(*(void *)(this + 56) + 16)  = 0;
  return this;
}

uint64_t AppleBCMWLANPCIeIO::setCompanionIO(uint64_t this, AppleBCMWLANPCIeIO *a2)
{
  *(void *)(*(void *)(this + 56) + 32)  = a2;
  return this;
}

uint64_t AppleBCMWLANPCIeIO::setCompanionKey(uint64_t this, void *a2)
{
  *(void *)(*(void *)(this + 56) + 40)  = a2;
  return this;
}

uint64_t AppleBCMWLANPCIeIO::getMaxMemorySize(AppleBCMWLANPCIeIO *this)
{
  return *(unsigned int *)(*((void *)this + 7) + 12);
}

OSObject *AppleBCMWLANDMASlab::withOptions(AppleBCMWLANDMASlab *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, IOService *a7)
{
  int v15 = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANDMASlabMetaClass, &v15)) {
    return 0;
  }
  unsigned int v13 = v15;
  if (v15
    && (((uint64_t (*)(OSObject *, AppleBCMWLANDMASlab *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v15->OSMetaClassBase::__vftable[1].getMetaClass)(v15, this, a2, a3, a4, a5, a6) & 1) == 0)
  {
    ((void (*)(OSObject *))v13->release)(v13);
    return 0;
  }
  return v13;
}

uint64_t AppleBCMWLANDMASlab::initWithOptions(AppleBCMWLANDMASlab *this, unsigned int a2, unint64_t a3, unint64_t a4, int a5, unsigned int a6, IOService *a7)
{
  kern_return_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  uint32_t segmentsCount;
  uint64_t flags;
  IODMACommandSpecification specification;
  IOAddressSegment range;

  range.address  = 0xAAAAAAAAAAAAAAAALL;
  range.length  = 0xAAAAAAAAAAAAAAAALL;
  flags  = 0;
  segmentsCount  = 1;
  uint64_t result = OSObject::init((OSObject *)this);
  if (result)
  {
    uint64_t result = IOMallocZeroTyped();
    *((void *)this + 6)  = result;
    if (result)
    {
      uint64_t v15 = result;
      uint64_t result = 0;
      if (a2)
      {
        if (a3 && a4)
        {
          unint64_t v16 = a2 * a3;
          unint64_t v17 = v16 % a4 ? a4 - v16 % a4 : 0;
          *(_DWORD *)(v15 + 68)  = (v17 + v16) / a3;
          *(_DWORD *)(*((void *)this + 6) + 64)  = a3;
          *(void *)(*((void *)this + 6) + 24)  = IO80211Buffer::allocBufferSingle();
          uint64_t result = *(void *)(*((void *)this + 6) + 24);
          if (result)
          {
            uint64_t MemoryDescriptor = IO80211Buffer::getMemoryDescriptor((IO80211Buffer *)result);
            unsigned int v19 = *(IO80211Buffer **)(*((void *)this + 6) + 24);
            if (MemoryDescriptor)
            {
              *(void *)(*((void *)this + 6) + 8)  = IO80211Buffer::getMemoryDescriptor(v19);
              IOBufferMemoryDescriptor::GetAddressRange(*(IOBufferMemoryDescriptor **)(*((void *)this + 6) + 8), &range);
              *(void *)(*((void *)this + 6) + 48)  = range.address;
              uint64_t v20 = *((void *)this + 6);
              unsigned int v21 = *(void **)(v20 + 48);
              if (v21)
              {
                bzero(v21, range.length);
                uint64_t v20 = *((void *)this + 6);
              }
              *(_DWORD *)(v20 + 16)  = a5;
              if (a7
                && (**((void **)this + 6)  = a7,
                    specification.options  = 0,
                    memset(specification._resv, 0, sizeof(specification._resv)),
                    specification.maxAddressBits  = a6,
                    IODMACommand::Create(**((IOService ***)this + 6), 0, &specification, (IODMACommand **)(*((void *)this + 6) + 40)), *(void *)(*((void *)this + 6) + 40))&& (*(void *)(*((void *)this + 6) + 72) = IOMallocZeroTyped(), uint64_t v22 = *((void *)this + 6), *(void *)(v22 + 72)))
              {
                unsigned int v23 = IODMACommand::PrepareForDMA(*(IODMACommand **)(v22 + 40), 0, *(IOMemoryDescriptor **)(v22 + 8), 0, 0, &flags, &segmentsCount, &range, 0);
                uint64_t result = 0;
                if (!v23 && segmentsCount == 1)
                {
                  *(void *)(*((void *)this + 6) + 56)  = range.address;
                  __int16 v24 = *((void *)this + 6);
                  if (*(_DWORD *)(v24 + 68))
                  {
                    char v25 = 0;
                    size_t v26 = 0;
                    do
                    {
                      *(void *)(*(void *)(v24 + 72) + v25)  = *(void *)(v24 + 48)
                                                               + (*(_DWORD *)(v24 + 64) * v26);
                      int v27 = *((void *)this + 6);
                      uint64_t v28 = v26 * *(unsigned int *)(v27 + 64);
                      int v29 = *(void *)(v27 + 56);
                      uint64_t v30 = *(void *)(v27 + 72) + v25;
                      uint64_t v31 = __CFADD__(v29, v28);
                      uint64_t v32 = v29 + v28;
                      uint64_t v33 = v31;
                      *(void *)(v30 + 8)  = v32;
                      if (v31) {
                        break;
                      }
                      ++v26;
                      __int16 v24 = *((void *)this + 6);
                      v25 += 16;
                    }
                    while (v26 < *(unsigned int *)(v24 + 68));
                    return v33 ^ 1u;
                  }
                  else
                  {
                    return 1;
                  }
                }
              }
              else
              {
                return 0;
              }
            }
            else
            {
              IO80211Buffer::returnBuffer(v19);
              *(void *)(*((void *)this + 6) + 24)  = 0;
              (*(void (**)(void))(**(void **)(*((void *)this + 6) + 32) + 72))(*(void *)(*((void *)this + 6) + 32));
              uint64_t result = *(void *)(*((void *)this + 6) + 32);
              if (result)
              {
                (*(void (**)(uint64_t))(*(void *)result + 16))(result);
                uint64_t result = 0;
                *(void *)(*((void *)this + 6) + 32)  = 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANDMASlab::initWithOptions(AppleBCMWLANDMASlab *this, unsigned int a2, unint64_t a3, unint64_t a4, int a5, unsigned int a6, IOService *a7)
{
  return AppleBCMWLANDMASlab::initWithOptions((AppleBCMWLANDMASlab *)((char *)this - 40), a2, a3, a4, a5, a6, a7);
}

void AppleBCMWLANDMASlab::free(OSObject *this)
{
  uint64_t v2 = *(void *)&this[1].refcount;
  if (!v2) {
    goto LABEL_21;
  }
  BOOL v3 = *(void **)(v2 + 72);
  if (v3)
  {
    if (*(_DWORD *)(v2 + 68))
    {
      uint64_t v4 = 0;
      unint64_t v5 = 0;
      do
      {
        *(void *)(*(void *)(v2 + 72) + v4)  = 0;
        *(void *)(*(void *)(*(void *)&this[1].refcount + 72) + v4 + 8)  = 0;
        ++v5;
        uint64_t v2 = *(void *)&this[1].refcount;
        unint64_t v6 = *(unsigned int *)(v2 + 68);
        v4 += 16;
      }
      while (v5 < v6);
      BOOL v3 = *(void **)(v2 + 72);
      if (!v3) {
        goto LABEL_10;
      }
      size_t v7 = 16 * v6;
    }
    else
    {
      size_t v7 = 0;
    }
    IOFree(v3, v7);
    *(void *)(*(void *)&this[1].refcount + 72)  = 0;
    uint64_t v2 = *(void *)&this[1].refcount;
LABEL_10:
    *(void *)(v2 + 72)  = 0;
    uint64_t v2 = *(void *)&this[1].refcount;
  }
  if (*(void *)(v2 + 40))
  {
    IODMACommand::CompleteDMA(*(IODMACommand **)(v2 + 40), 0, 0);
    uint64_t v2 = *(void *)&this[1].refcount;
    uint64_t v8 = *(void *)(v2 + 40);
    if (v8)
    {
      (*(void (**)(void))(*(void *)v8 + 16))(*(void *)(v2 + 40));
      *(void *)(*(void *)&this[1].refcount + 40)  = 0;
      uint64_t v2 = *(void *)&this[1].refcount;
    }
  }
  if (*(void *)(v2 + 24))
  {
    IO80211Buffer::returnBuffer(*(IO80211Buffer **)(v2 + 24));
    *(void *)(*(void *)&this[1].refcount + 24)  = 0;
    uint64_t v2 = *(void *)&this[1].refcount;
  }
  uint64_t v9 = *(void *)(v2 + 32);
  if (v9)
  {
    (*(void (**)(void))(*(void *)v9 + 72))(*(void *)(v2 + 32));
    uint64_t v2 = *(void *)&this[1].refcount;
    uint64_t v10 = *(void *)(v2 + 32);
    if (v10)
    {
      (*(void (**)(void))(*(void *)v10 + 16))(*(void *)(v2 + 32));
      *(void *)(*(void *)&this[1].refcount + 32)  = 0;
      uint64_t v2 = *(void *)&this[1].refcount;
    }
  }
  memset_s((void *)v2, 0x50uLL, 0, 0x50uLL);
  unsigned int v11 = *(void **)&this[1].refcount;
  if (v11)
  {
    IOFree(v11, 0x50uLL);
    *(void *)&this[1].refcount  = 0;
  }
LABEL_21:
  OSObject::free(this);
}

void non-virtual thunk to'AppleBCMWLANDMASlab::free(AppleBCMWLANDMASlab *this)
{
}

uint64_t AppleBCMWLANDMASlab::copyBufferDescriptorToBounce(AppleBCMWLANDMASlab *this, unsigned int a2, IO80211Buffer *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5 = 3758097084;
  if (a3)
  {
    uint64_t v8 = *((void *)this + 6);
    if (*(_DWORD *)(v8 + 68) > a2
      && *(_DWORD *)(v8 + 64) >= a5
      && IO80211Buffer::getLength(a3) > (unint64_t)a4
      && IO80211Buffer::getLength(a3) >= (unint64_t)(a5 + a4))
    {
      if (IO80211Buffer::readBytes(a3, a4, *(void **)(*(void *)(*((void *)this + 6) + 72) + 16 * a2))) {
        return 0;
      }
      else {
        return 3758097084;
      }
    }
  }
  return v5;
}

uint64_t AppleBCMWLANDMASlab::getBusAddr64(AppleBCMWLANDMASlab *this, unsigned int a2, IOAddressSegment *a3)
{
  uint64_t v3 = *((void *)this + 6);
  uint64_t v4 = *(void *)(v3 + 72);
  if (!v4 || *(_DWORD *)(v3 + 68) <= a2) {
    return 3758096385;
  }
  uint64_t result = 0;
  a3->address  = *(void *)(v4 + 16 * a2 + 8);
  a3->length  = *(unsigned int *)(*((void *)this + 6) + 64);
  return result;
}

uint64_t AppleBCMWLANDMASlab::copyBounceToBufferDescriptor(AppleBCMWLANDMASlab *this, unsigned int a2, IO80211Buffer *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5 = 3758097084;
  if (a3)
  {
    uint64_t v8 = *((void *)this + 6);
    if (*(_DWORD *)(v8 + 68) > a2
      && *(_DWORD *)(v8 + 64) >= a5
      && IO80211Buffer::getLength(a3) > (unint64_t)a4
      && IO80211Buffer::getLength(a3) >= (unint64_t)(a5 + a4))
    {
      if (IO80211Buffer::writeBytes(a3, a4, *(const void **)(*(void *)(*((void *)this + 6) + 72) + 16 * a2), a5))
      {
        return 0;
      }
      else
      {
        return 3758097084;
      }
    }
  }
  return v5;
}

void AppleBCMWLANDMASlab::zero(AppleBCMWLANDMASlab *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 6);
  if (*(_DWORD *)(v2 + 68) > a2)
  {
    uint64_t BytesNoCopy = (void *)IO80211Buffer::getBytesNoCopy(*(IO80211Buffer **)(v2 + 24), *(_DWORD *)(v2 + 64) * a2, *(unsigned int *)(v2 + 64));
    if (BytesNoCopy)
    {
      size_t v5 = *(unsigned int *)(*((void *)this + 6) + 64);
      bzero(BytesNoCopy, v5);
    }
  }
}

uint64_t AppleBCMWLANDMASlab::getBytesNoCopy(AppleBCMWLANDMASlab *this, int a2)
{
  return IO80211Buffer::getBytesNoCopy(*(IO80211Buffer **)(*((void *)this + 6) + 24), (*(_DWORD *)(*((void *)this + 6) + 64) * a2), *(unsigned int *)(*((void *)this + 6) + 64));
}

uint64_t AppleBCMWLANDMASlab::getItemCount(AppleBCMWLANDMASlab *this)
{
  return *(unsigned int *)(*((void *)this + 6) + 68);
}

uint64_t AppleBCMWLANDMASlab::getItemSize(AppleBCMWLANDMASlab *this)
{
  return *(unsigned int *)(*((void *)this + 6) + 64);
}

uint64_t AppleBCMWLANDMASlab::getDirection(AppleBCMWLANDMASlab *this)
{
  return *(unsigned int *)(*((void *)this + 6) + 16);
}

uint64_t AppleBCMWLANPCIeLinkChangeEventSource::free(AppleBCMWLANPCIeLinkChangeEventSource *this)
{
  uint64_t v2 = *((void *)this + 7);
  if (v2)
  {
    if (*(void *)(v2 + 48))
    {
      IOLockFree(*(IOLock **)(v2 + 48));
      uint64_t v2 = *((void *)this + 7);
    }
    uint64_t v3 = *(void *)(v2 + 24);
    if (v3)
    {
      (*(void (**)(void))(*(void *)v3 + 16))(*(void *)(v2 + 24));
      *(void *)(*((void *)this + 7) + 24)  = 0;
      uint64_t v2 = *((void *)this + 7);
    }
    memset_s((void *)v2, 0x38uLL, 0, 0x38uLL);
    uint64_t v4 = (void *)*((void *)this + 7);
    if (v4)
    {
      IOFree(v4, 0x38uLL);
      *((void *)this + 7)  = 0;
    }
  }
  return IO80211WorkSource::free(this);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeLinkChangeEventSource::free(AppleBCMWLANPCIeLinkChangeEventSource *this)
{
  return AppleBCMWLANPCIeLinkChangeEventSource::free((AppleBCMWLANPCIeLinkChangeEventSource *)((char *)this - 24));
}

uint64_t AppleBCMWLANPCIeLinkChangeEventSource::checkForWork(AppleBCMWLANPCIeLinkChangeEventSource *this)
{
  IOLockLock(*(IOLock **)(*((void *)this + 7) + 48));
  uint64_t v2 = *((void *)this + 7);
  uint64_t v3 = *(void *)(v2 + 16);
  *(void *)(v2 + 16)  = 0;
  uint64_t v4 = *((void *)this + 7);
  uint64_t v5 = *(void *)(v4 + 8);
  *(void *)(v4 + 8)  = 0;
  unint64_t v6 = (int *)*((void *)this + 7);
  int v7 = *v6;
  int *v6 = 0;
  IOLockUnlock(*(IOLock **)(*((void *)this + 7) + 48));
  if (v7 == 2)
  {
    if (v3) {
      (*(void (**)(void, uint64_t))(*((void *)this + 7) + 40))(*(void *)(*((void *)this + 7) + 24), v3);
    }
    if (!v5) {
      goto LABEL_12;
    }
    uint64_t v3 = v5;
    if (!(*(unsigned int (**)(void, uint64_t))(*((void *)this + 7) + 32))(*(void *)(*((void *)this + 7) + 24), v5))goto LABEL_12; {
LABEL_11:
    }
    (*(void (**)(void, uint64_t))(*((void *)this + 7) + 40))(*(void *)(*((void *)this + 7) + 24), v3);
    goto LABEL_12;
  }
  if (v5
    && (*(unsigned int (**)(void, uint64_t))(*((void *)this + 7) + 32))(*(void *)(*((void *)this + 7) + 24), v5))
  {
    (*(void (**)(void, uint64_t))(*((void *)this + 7) + 40))(*(void *)(*((void *)this + 7) + 24), v5);
  }
  if (v3) {
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v8 = *((void *)this + 7);
  if (*(void *)(v8 + 8) || *(void *)(v8 + 16)) {
    IO80211WorkSource::signalWorkAvailable(this);
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeLinkChangeEventSource::checkForWork(AppleBCMWLANPCIeLinkChangeEventSource *this)
{
  return 0;
}

uint64_t AppleBCMWLANSkywalkInterface::init(AppleBCMWLANSkywalkInterface *this)
{
  IOLog("AppleBCMWLANSkywalkInterface::init start\n");
  uint64_t result = IO80211InfraInterface::init(this);
  if (result)
  {
    uint64_t result = IOMallocZeroTyped();
    *((void *)this + 19)  = result;
    if (result)
    {
      IOLog("Interface Init complete\n");
      return 1;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::init(AppleBCMWLANSkywalkInterface *this)
{
  return AppleBCMWLANSkywalkInterface::init((AppleBCMWLANSkywalkInterface *)((char *)this - 24));
}

uint64_t AppleBCMWLANSkywalkInterface::initWithProviderAndParameters(IO80211SkywalkInterface *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *__src, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10 = *((void *)a1 + 19);
  if (!v10)
  {
    IOLog("skywalk interface ivars alloc fail\n", a2, a3, a4, a5, a6, __src);
    return 0;
  }
  if (a6 > 4) {
    return 0;
  }
  char v12 = a5;
  unsigned int v13 = a4;
  unsigned int v14 = a3;
  *(unsigned char *)(v10 + 42)  = a6;
  memcpy((void *)(*((void *)a1 + 19) + 44), __src, 4 * a6);
  IO80211SkywalkInterface::setInterfaceRole(a1, v13);
  IO80211SkywalkInterface::setInterfaceId(a1, v14);
  *(_DWORD *)(*((void *)a1 + 19) + 16)  = a8;
  *(void *)(*((void *)a1 + 19) + 168)  = a9;
  uint64_t v16 = *((void *)a1 + 19);
  uint64_t v17 = *(void *)(v16 + 168);
  if (v17)
  {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    uint64_t v16 = *((void *)a1 + 19);
  }
  *(void *)(v16 + 8)  = a10;
  *(unsigned char *)(*((void *)a1 + 19) + 162)  = v12;
  *(unsigned char *)(*((void *)a1 + 19) + 161)  = 0;
  uint64_t v18 = 1;
  IOParseBootArgNumber("wlan.skywalk.ktrace", &fKernelTraceEnabled, 1);
  if ((*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1))
  {
    (*(void (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      unsigned int v19 = (CCLogStream *)(*(uint64_t (**)(IO80211SkywalkInterface *))(*(void *)a1 + 1024))(a1);
      CCLogStream::logInfoIf(v19, 0x80uLL, "[dk] %s@%d:Skywalk interface allocation success", "initWithProviderAndParameters", 162);
    }
  }
  return v18;
}

uint64_t AppleBCMWLANSkywalkInterface::free(AppleBCMWLANSkywalkInterface *this)
{
  if (*((void *)this + 19))
  {
    if ((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v6, "[dk] %s@%d:Enter ::free [%p]", "free", 173, this);
      }
    }
    *(void *)(*((void *)this + 19) + 24)  = 0;
    uint64_t v2 = (void *)*((void *)this + 19);
    uint64_t v3 = v2[21];
    if (v3)
    {
      (*(void (**)(void))(*(void *)v3 + 16))(v2[21]);
      *(void *)(*((void *)this + 19) + 168)  = 0;
      uint64_t v2 = (void *)*((void *)this + 19);
    }
    memset_s(v2, 0xE0uLL, 0, 0xE0uLL);
    uint64_t v4 = (void *)*((void *)this + 19);
    if (v4)
    {
      IOFree(v4, 0xE0uLL);
      *((void *)this + 19)  = 0;
    }
  }
  return AppleBCMWLANInfraProtocol::free(this);
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::free(AppleBCMWLANSkywalkInterface *this)
{
  return AppleBCMWLANSkywalkInterface::free((AppleBCMWLANSkywalkInterface *)((char *)this - 24));
}

uint64_t AppleBCMWLANSkywalkInterface::start(AppleBCMWLANSkywalkInterface *this, IOService *anObject)
{
  uint64_t v3 = OSMetaClassBase::safeMetaCast(anObject, (const OSMetaClass *)gAppleBCMWLANCoreMetaClass);
  uint64_t v4 = *(uint64_t (**)(AppleBCMWLANSkywalkInterface *, OSMetaClassBase *, void))(*(void *)this + 2896);
  return v4(this, v3, 0);
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::start(AppleBCMWLANSkywalkInterface *this, IOService *anObject)
{
  uint64_t v3 = OSMetaClassBase::safeMetaCast(anObject, (const OSMetaClass *)gAppleBCMWLANCoreMetaClass);
  uint64_t v4 = *(uint64_t (**)(char *, OSMetaClassBase *, void))(*((void *)this - 6) + 2896);
  return v4((char *)this - 48, v3, 0);
}

BOOL AppleBCMWLANSkywalkInterface::start(AppleBCMWLANInfraProtocol *a1, IOService *anObject)
{
  *(void *)(*((void *)a1 + 19) + 24)  = OSMetaClassBase::safeMetaCast(anObject, (const OSMetaClass *)gAppleBCMWLANCoreMetaClass);
  if ((AppleBCMWLANInfraProtocol::initWithProvider(a1, *(AppleBCMWLANCore **)(*((void *)a1 + 19) + 24)) & 1) == 0)
  {
    IOLog("AppleBCMWLANSkywalkInterface Failed to init IOUC routing \n");
    return 0;
  }
  if ((*(unsigned int (**)(void))(**(void **)(*((void *)a1 + 19) + 24) + 432))(*(void *)(*((void *)a1 + 19) + 24)))
  {
    IOLog("AppleBCMWLANSkywalkInterface matching started before Core powered on, deferring\n");
    return 0;
  }
  if (IO80211SkywalkInterface::isLowLatencyEnabled(a1))
  {
    LODWORD(__src)  = 3;
    unint64_t v6 = (OSMetaClassBase_vtbl *)anObject[1].OSObject::OSObjectInterface::__vftable;
    if (!LOBYTE(v6[885].Dispatch))
    {
      IOLog("ERROR: Skywalk config parameters not valid\n");
      unint64_t v6 = (OSMetaClassBase_vtbl *)anObject[1].OSObject::OSObjectInterface::__vftable;
    }
    Dispatch_high  = HIDWORD(v6[885].Dispatch);
    OSMetaClassBase::safeMetaCast(anObject, (const OSMetaClass *)gAppleBCMWLANCoreMetaClass);
    uint64_t v8 = ((uint64_t (*)(IOService *))anObject->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(anObject);
    FaultReporter  = AppleBCMWLANCore::getFaultReporter((AppleBCMWLANCore *)anObject);
    AppleBCMWLANSkywalkInterface::initWithProviderAndParameters(a1, v10, Dispatch_high, 2, 0, 1, &__src, 256, v8, FaultReporter);
    IO80211SkywalkInterface::setParentInterface(a1, (IO80211VirtualInterface *)anObject[1].OSObject::OSObjectInterface::__vftable[2215].free);
  }
  else
  {
    OSMetaClassBase::safeMetaCast(anObject, (const OSMetaClass *)gAppleBCMWLANCoreMetaClass);
    uint64_t v11 = ((uint64_t (*)(IOService *))anObject->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(anObject);
    uint64_t v12 = AppleBCMWLANCore::getFaultReporter((AppleBCMWLANCore *)anObject);
    AppleBCMWLANSkywalkInterface::initWithProviderAndParameters(a1, v13, 0, 1, 1, 4, &unk_10036E5A0, 256, v11, v12);
  }
  p_free  = &anObject[1].OSObject::OSObjectInterface::__vftable[2214].free;
  *(_OWORD *)p_free  = 0u;
  *((_OWORD *)p_free + 1)  = 0u;
  if (IO80211SkywalkInterface::getInterfaceRole(a1) == 1) {
    (*(void (**)(AppleBCMWLANInfraProtocol *, uint64_t))(*(void *)a1 + 456))(a1, 1);
  }
  if ((IO80211InfraInterface::start(a1, anObject) & 1) == 0)
  {
    if ((*(uint64_t (**)(AppleBCMWLANInfraProtocol *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANInfraProtocol *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        char v25 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANInfraProtocol *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logAlert(v25, "[dk] %s@%d:skywalk start fail\n", "start", 277);
      }
    }
    return 0;
  }
  uint64_t WorkQueue = IO80211SkywalkInterface::getWorkQueue(a1);
  Logger  = IO80211SkywalkInterface::getLogger(a1);
  uint64_t v17 = *((void *)a1 + 19);
  if (Logger)
  {
    uint64_t v18 = *(void *)(v17 + 168);
    if (v18)
    {
      (*(void (**)(uint64_t))(*(void *)v18 + 16))(v18);
      *(void *)(*((void *)a1 + 19) + 168)  = 0;
    }
    *(void *)(*((void *)a1 + 19) + 168)  = IO80211SkywalkInterface::getLogger(a1);
    uint64_t v17 = *((void *)a1 + 19);
    uint64_t v19 = *(void *)(v17 + 168);
    if (v19)
    {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
      uint64_t v17 = *((void *)a1 + 19);
    }
  }
  *(void *)(*((void *)a1 + 19) + 176)  = (*(uint64_t (**)(void))(**(void **)(v17 + 24) + 88))(*(void *)(v17 + 24));
  *(void *)(*((void *)a1 + 19) + 32)  = AppleBCMWLANCore::getBus(*(AppleBCMWLANCore **)(*((void *)a1 + 19) + 24));
  uint64_t v20 = (const OSMetaClassBase *)(*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 19) + 32) + 752))();
  **((void **)a1 + 19)  = OSMetaClassBase::safeMetaCast(v20, (const OSMetaClass *)gAppleBCMWLANBusSkywalkMetaClass);
  uint64_t v21 = *((void *)a1 + 19);
  if (*(void *)v21)
  {
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v33 = 0u;
    __src  = a1;
    LOBYTE(v3AppleBCMWLANWnmAdapter::free(this - 3) = *(unsigned char *)(v21 + 42);
    *(void *)&long long v35 = v21 + 96;
    *((void *)&v35 + 1)  = v21 + 104;
    if (*(unsigned char *)(v21 + 162)) {
      uint64_t v22 = v21 + 152;
    }
    else {
      uint64_t v22 = 0;
    }
    *(void *)&long long v36 = v22;
    *((void *)&v36 + 1)  = v21 + 80;
    *(void *)&long long v37 = v21 + 88;
    *((void *)&v33 + 1)  = v21 + 44;
    *(void *)&long long v34 = v21 + 120;
    *((void *)&v34 + 1)  = v21 + 112;
    uint64_t v38 = (*(uint64_t (**)(AppleBCMWLANInfraProtocol *))(*(void *)a1 + 1024))(a1);
    int v23 = (*(uint64_t (**)(void, AppleBCMWLANInfraProtocol **))(***((void ***)a1 + 19) + 56))(**((void **)a1 + 19), &__src);
    BOOL v4 = v23 == 0;
    if (v23)
    {
      if ((*(uint64_t (**)(AppleBCMWLANInfraProtocol *))(*(void *)a1 + 1024))(a1))
      {
        (*(void (**)(AppleBCMWLANInfraProtocol *))(*(void *)a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          __int16 v24 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANInfraProtocol *))(*(void *)a1 + 1024))(a1);
          CCLogStream::logAlert(v24, "[dk] %s@%d:Failed to register interface with bus interface", "start", 324);
        }
      }
    }
    else
    {
      if (IO80211SkywalkInterface::getInterfaceRole(a1) == 1)
      {
        uint64_t v26 = **((void **)a1 + 19);
        uint64_t v27 = (*(uint64_t (**)(AppleBCMWLANInfraProtocol *))(*(void *)a1 + 1024))(a1);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 128))(v26, v27);
      }
      uint64_t v28 = *(void *)(*((void *)a1 + 19) + 152);
      if (v28)
      {
        (*(void (**)(uint64_t))(*(void *)v28 + 72))(v28);
        (*(void (**)(uint64_t, void))(*(void *)WorkQueue + 64))(WorkQueue, *(void *)(*((void *)a1 + 19) + 152));
      }
      if (IO80211SkywalkInterface::getInterfaceRole(a1) == 1)
      {
        int v29 = (*(uint64_t (**)(AppleBCMWLANInfraProtocol *))(*(void *)a1 + 488))(a1);
        if ((*(uint64_t (**)(AppleBCMWLANInfraProtocol *))(*(void *)a1 + 1024))(a1))
        {
          (*(void (**)(AppleBCMWLANInfraProtocol *))(*(void *)a1 + 1024))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v31 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANInfraProtocol *))(*(void *)a1 + 1024))(a1);
            CCLogStream::logAlert(v31, "[dk] %s@%d:infra interface registration status  = %d \n", "start", 383, v29);
          }
        }
        AppleBCMWLANCore::setAndBootInfraInterface(*(AppleBCMWLANCore **)(*((void *)a1 + 19) + 24), 0, a1);
      }
    }
  }
  else
  {
    if ((*(uint64_t (**)(AppleBCMWLANInfraProtocol *))(*(void *)a1 + 1024))(a1))
    {
      (*(void (**)(AppleBCMWLANInfraProtocol *))(*(void *)a1 + 1024))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v30 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANInfraProtocol *))(*(void *)a1 + 1024))(a1);
        CCLogStream::logCrit(v30, "[dk] %s@%d:bus skywalk is not valid\n", "start", 293);
      }
    }
    return 1;
  }
  return v4;
}

BOOL non-virtual thunk to'AppleBCMWLANSkywalkInterface::start(uint64_t a1, IOService *a2)
{
  return AppleBCMWLANSkywalkInterface::start((AppleBCMWLANInfraProtocol *)(a1 - 144), a2);
}

uint64_t AppleBCMWLANSkywalkInterface::registerInterface(AppleBCMWLANSkywalkInterface *this)
{
  int v29 = -1431655766;
  unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1)  = 0xAAAAAAAAAAAAAAAALL;
  v30[1]  = v2;
  void v30[2] = v2;
  v30[0]  = v2;
  (*(void (**)(AppleBCMWLANSkywalkInterface *, unint64_t *))(*(void *)this + 1704))(this, &v28);
  if ((IO80211SkywalkInterface::registerInterface(this) & 1) == 0)
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v23 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v23, "[dk] %s@%d:SkywalkInterface: media type report fail, ret[0x%08x]\n");
        return 0;
      }
    }
    return result;
  }
  if (IOUserNetworkEthernet::SetTxPacketHeadroom((IOUserNetworkEthernet *)this, 0))
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        BOOL v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v4, "[dk] %s@%d:SkywalkInterface: set headroom fail fail, ret[0x%08x]\n");
        return 0;
      }
    }
    return result;
  }
  unint64_t v5 = 0;
  while (1)
  {
    uint64_t v6 = *((void *)this + 19);
    if (v5 >= *(unsigned __int8 *)(v6 + 42)) {
      break;
    }
    uint64_t v7 = *(void *)(v6 + 8 * v5 + 120);
    *((void *)v30 + v5)  = v7;
    (*(void (**)(uint64_t))(*(void *)v7 + 272))(v7);
    *(_DWORD *)(*((void *)this + 19) + 4 * *(unsigned int *)(*((void *)this + 19) + 4 * v5 + 44) + 60)  = AppleBCMWLANSkywalkTxSubmissionQueue::getQueueId(*(AppleBCMWLANSkywalkTxSubmissionQueue **)(*((void *)this + 19) + 8 * v5 + 120));
    if (++v5 == 4)
    {
      uint64_t v6 = *((void *)this + 19);
      unsigned __int8 v8 = 4;
      goto LABEL_14;
    }
  }
  unsigned __int8 v8 = v5;
LABEL_14:
  *((void *)v30 + v8)  = *(void *)(v6 + 96);
  unsigned __int8 v9 = v8 + 2;
  *((void *)v30 + (v8 + 1))  = *(void *)(v6 + 104);
  int InterfaceRole = IO80211SkywalkInterface::getInterfaceRole(this);
  uint64_t v11 = *((void *)this + 19);
  if (InterfaceRole == 1)
  {
    *((void *)v30 + (v8 + 2))  = *(void *)(v11 + 112);
    unsigned __int8 v9 = v8 + 3;
  }
  (*(void (**)(void))(**(void **)(v11 + 96) + 200))(*(void *)(v11 + 96));
  (*(void (**)(void))(**(void **)(*((void *)this + 19) + 104) + 208))(*(void *)(*((void *)this + 19) + 104));
  uint64_t v12 = *((void *)this + 19);
  uint64_t v13 = *(void *)(v12 + 152);
  if (v13)
  {
    (*(void (**)(uint64_t))(*(void *)v13 + 72))(v13);
    uint64_t v12 = *((void *)this + 19);
  }
  int v14 = BYTE4(v28);
  int v15 = BYTE5(v28);
  int v16 = BYTE6(v28);
  int v17 = HIBYTE(v28);
  int v18 = v29;
  int v19 = BYTE1(v29);
  int v20 = v9;
  int v21 = (*(uint64_t (**)(AppleBCMWLANSkywalkInterface *, unint64_t, void, _OWORD *, void))(*(void *)this + 272))(this, BYTE4(v28) | ((unint64_t)BYTE5(v28) << 8) | ((unint64_t)BYTE6(v28) << 16) | ((unint64_t)HIBYTE(v28) << 24) | ((unint64_t)v29 << 32) | ((unint64_t)BYTE1(v29) << 40), *(void *)(v12 + 80), v30, v9);
  if ((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      int v24 = v14;
      uint64_t v27 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      char v25 = *(const void **)(*((void *)this + 19) + 80);
      int v26 = IO80211SkywalkInterface::getInterfaceRole(this);
      CCLogStream::logAlert(v27, "[dk] %s@%d:SkywalkInterface: ret[0x%08x] MAC[%02x:%02x:%02x:%02x:%02x:%02x], pool[%p] queues[%p] numQueue[%2u], role[%u]", "registerInterface", 454, v21, v24, v15, v16, v17, v18, v19, v25, v30, v20, v26);
      if (v21) {
        goto LABEL_21;
      }
LABEL_27:
      IOService::RegisterService((IOService *)this, 0);
      return 1;
    }
  }
  if (!v21) {
    goto LABEL_27;
  }
LABEL_21:
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logAlert(v22, "[dk] %s@%d:SkywalkInterface: skywalk interface registration fail, ret[0x%08x]\n");
      return 0;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::registerInterface(AppleBCMWLANSkywalkInterface *this)
{
  return AppleBCMWLANSkywalkInterface::registerInterface((AppleBCMWLANSkywalkInterface *)((char *)this - 80));
}

uint64_t AppleBCMWLANSkywalkInterface::stop(AppleBCMWLANSkywalkInterface *this, IOService *a2)
{
  uint64_t WorkQueue = IO80211SkywalkInterface::getWorkQueue(this);
  IOLog("AppleBCMWLANSkywalkInterface::stop[%u] stop( %p)\n", 472, a2);
  IO80211SkywalkInterface::validateDispatchQueue(this);
  if ((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      int v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logAlert(v16, "[dk] %s@%d:Skywalk Interface Stop\n", "stop", 479);
    }
  }
  uint64_t v5 = *((void *)this + 19);
  if (*(unsigned char *)(v5 + 42))
  {
    uint64_t v6 = 15;
    do
    {
      uint64_t v7 = *(void *)(v5 + 8 * v6);
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v7 + 272))(v7);
        uint64_t v5 = *((void *)this + 19);
        uint64_t v8 = *(void *)(v5 + 8 * v6);
        if (v8)
        {
          (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
          *(void *)(*((void *)this + 19) + 8 * v6)  = 0;
          uint64_t v5 = *((void *)this + 19);
        }
      }
      unint64_t v9 = v6 - 14;
      ++v6;
    }
    while (v9 < *(unsigned __int8 *)(v5 + 42));
  }
  uint64_t v10 = *(void *)(v5 + 96);
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 200))(v10);
    uint64_t v5 = *((void *)this + 19);
    uint64_t v11 = *(void *)(v5 + 96);
    if (v11)
    {
      (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
      *(void *)(*((void *)this + 19) + 96)  = 0;
      uint64_t v5 = *((void *)this + 19);
    }
  }
  uint64_t v12 = *(void *)(v5 + 104);
  if (v12)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 208))(v12);
    uint64_t v5 = *((void *)this + 19);
    uint64_t v13 = *(void *)(v5 + 104);
    if (v13)
    {
      (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
      *(void *)(*((void *)this + 19) + 104)  = 0;
      uint64_t v5 = *((void *)this + 19);
    }
  }
  uint64_t v14 = *(void *)(v5 + 152);
  if (v14)
  {
    (*(void (**)(uint64_t))(*(void *)v14 + 72))(v14);
    (*(void (**)(uint64_t, void))(*(void *)WorkQueue + 72))(WorkQueue, *(void *)(*((void *)this + 19) + 152));
    uint64_t v15 = *(void *)(*((void *)this + 19) + 152);
    if (v15)
    {
      (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
      *(void *)(*((void *)this + 19) + 152)  = 0;
    }
  }
  if (IO80211SkywalkInterface::getInterfaceRole(this) == 1) {
    (*(void (**)(void, void))(***((void ***)this + 19) + 128))(**((void **)this + 19), 0);
  }
  IOLog("AppleBCMWLANSkywalkInterface::stop[%u] super::stop( %p) >>\n", 520, a2);
  return IO80211InfraInterface::stop(this, a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::stop(AppleBCMWLANSkywalkInterface *this, IOService *a2)
{
  return AppleBCMWLANSkywalkInterface::stop((AppleBCMWLANSkywalkInterface *)((char *)this - 48), a2);
}

uint64_t AppleBCMWLANSkywalkInterface::getSupportedMediaArray(AppleBCMWLANSkywalkInterface *this, unsigned int *a2, unsigned int *a3)
{
  IO80211SkywalkInterface::validateDispatchQueue(this);
  *a2  = 128;
  *a3  = 1;
  if ((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logInfo(v7, "[dk] %s@%d:Exit with ret:0x%x\n", "getSupportedMediaArray", 575, 0);
    }
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::getSupportedMediaArray(AppleBCMWLANSkywalkInterface *this, unsigned int *a2, unsigned int *a3)
{
  return 0;
}

uint64_t AppleBCMWLANSkywalkInterface::handleChosenMedia(AppleBCMWLANSkywalkInterface *this)
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::handleChosenMedia(AppleBCMWLANSkywalkInterface *this)
{
  return 0;
}

uint64_t AppleBCMWLANSkywalkInterface::setRunningState(AppleBCMWLANSkywalkInterface *this, char a2)
{
  *(unsigned char *)(*((void *)this + 19) + 160)  = a2;
  if ((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      BOOL v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logInfo(v4, "[dk] %s@%d:fRunning:%d\n", "setRunningState", 610, *(unsigned __int8 *)(*((void *)this + 19) + 160));
    }
  }
  return 0;
}

uint64_t AppleBCMWLANSkywalkInterface::enableDatapath(IOService *this)
{
  int v20 = 0;
  acquireProperty<OSString>(this, "IO80211InterfaceRole", &v20, 0, "IOService");
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[18].release)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[18].release)(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v14 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[18].release)(this);
      uint64_t v15 = (const char *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[2].free)(this);
      int InterfaceId = IO80211SkywalkInterface::getInterfaceId((IO80211SkywalkInterface *)this);
      if (v20) {
        CStringNoCopy  = OSString::getCStringNoCopy(v20);
      }
      else {
        CStringNoCopy  = "unknown";
      }
      CCLogStream::logInfo(v14, "[dk] %s@%d:AppleBCMWLANSkywalkInterface %s ifid %d Role %s enable skywalk Datapath.\n", "enableDatapath", 624, v15, InterfaceId, CStringNoCopy);
    }
  }
  if (v20)
  {
    ((void (*)(OSString *))v20->release)(v20);
    int v20 = 0;
  }
  uint64_t v2 = *(void *)&this[3].refcount;
  if (*(unsigned char *)(v2 + 161))
  {
    uint64_t v3 = *(void *)(v2 + 96);
    if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 192))(v3);
      uint64_t v4 = *(void *)(*(void *)&this[3].refcount + 104);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 200))(v4);
        if (IO80211SkywalkInterface::getInterfaceRole((IO80211SkywalkInterface *)this) != 1
          || (uint64_t v5 = *(unsigned char **)&this[3].refcount, !v5[216]))
        {
          if (IO80211SkywalkInterface::getInterfaceRole((IO80211SkywalkInterface *)this) == 1) {
            goto LABEL_13;
          }
          uint64_t v5 = *(unsigned char **)&this[3].refcount;
        }
        (*(void (**)(void, IOService *))(**(void **)v5 + 64))(*(void *)v5, this);
LABEL_13:
        int v6 = (*(uint64_t (**)(void, void, void))(**(void **)(*(void *)&this[3].refcount + 104)
                                                               + 120))(*(void *)(*(void *)&this[3].refcount + 104), 0, 0);
        if (v6)
        {
          int v7 = v6;
          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[18].release)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[18].release)(this);
            if (CCLogStream::shouldLog())
            {
              int v18 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[18].release)(this);
              CCLogStream::logAlert(v18, "[dk] %s@%d:ERROR: skywalk rx completion queue enqueue fail with return %d\n", "enableDatapath", 643, v7);
            }
          }
        }
        if (IO80211SkywalkInterface::getInterfaceRole((IO80211SkywalkInterface *)this) == 1) {
          AppleBCMWLANCore::infraDpEnable(*(void *)(*(void *)&this[3].refcount + 24), v8);
        }
        return 0;
      }
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[18].release)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[18].release)(this);
        if (CCLogStream::shouldLog())
        {
          int v19 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[18].release)(this);
          CCLogStream::logCrit(v19, "[dk] %s@%d:rx completion queue not valid\n");
        }
      }
    }
    else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[18].release)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[18].release)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v12 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[18].release)(this);
        CCLogStream::logCrit(v12, "[dk] %s@%d:tx completion queue not valid\n");
      }
    }
  }
  else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[18].release)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[18].release)(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v11 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[18].release)(this);
      CCLogStream::logCrit(v11, "[dk] %s@%d:interface not enabled yet\n");
    }
  }
  uint64_t v9 = 3758097084;
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[18].release)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[18].release)(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v13 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[18].release)(this);
      CCLogStream::logAlert(v13, "[dk] %s@%d:ERROR: skywalk data path enable fail\n", "enableDatapath", 653);
    }
  }
  return v9;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::enableDatapath(AppleBCMWLANSkywalkInterface *this)
{
  return AppleBCMWLANSkywalkInterface::enableDatapath((IOService *)((char *)this - 80));
}

uint64_t AppleBCMWLANSkywalkInterface::enable(AppleBCMWLANSkywalkInterface *this, unsigned int a2)
{
  *(void *)(*((void *)this + 19) + 184)  = mach_continuous_time();
  if ((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logInfo(v9, "[dk] %s@%d:Enter", "enable", 664);
    }
  }
  uint64_t v4 = IO80211SkywalkInterface::enable(this, a2);
  if ((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      uint64_t v11 = (const char *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 160))(this);
      int InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
      CCLogStream::logAlert(v10, "[dk] %s@%d:AppleBCMWLANSkywalkInterface %s ifid %d ready to handle packet data, running %d\n", "enable", 670, v11, InterfaceId, *(unsigned __int8 *)(*((void *)this + 19) + 160));
    }
  }
  uint64_t v5 = *((void *)this + 19);
  if (*(unsigned char *)(v5 + 160))
  {
    *(unsigned char *)(v5 + 161)  = 1;
    if (AppleBCMWLANCore::isPoweredOn(*(AppleBCMWLANCore **)(*((void *)this + 19) + 24))
      && (AppleBCMWLANCore::isWatchdogRunning(*(AppleBCMWLANCore **)(*((void *)this + 19) + 24)) & 1) == 0)
    {
      (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1168))(this);
    }
    else if ((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        int v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
        AppleBCMWLANCore::isPoweredOn(*(AppleBCMWLANCore **)(*((void *)this + 19) + 24));
        AppleBCMWLANCore::isWatchdogRunning(*(AppleBCMWLANCore **)(*((void *)this + 19) + 24));
        CCLogStream::logAlert(v6, "[dk] %s@%d:data path cannot enable, power state %d, watchdog status %d\n");
      }
    }
  }
  else
  {
    uint64_t v4 = 3758097109;
    if ((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        int v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:Called, but interface is not running");
      }
    }
  }
  (*(void (**)(AppleBCMWLANSkywalkInterface *, uint64_t, uint64_t))(*(void *)this + 240))(this, 127, 128);
  if ((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logInfo(v13, "[dk] %s@%d:Exit with ret:0x%x\n", "enable", 686, v4);
    }
  }
  return v4;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::enable(AppleBCMWLANSkywalkInterface *this, unsigned int a2)
{
  return AppleBCMWLANSkywalkInterface::enable((AppleBCMWLANSkywalkInterface *)((char *)this - 80), a2);
}

uint64_t AppleBCMWLANSkywalkInterface::disableDatapath(AppleBCMWLANSkywalkInterface *this)
{
  int v21 = 0;
  if ((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logInfo(v13, "[dk] %s@%d:Enter", "disableDatapath", 698);
    }
  }
  if (acquireProperty<OSString>((IOService *)this, "IO80211InterfaceRole", &v21, 0, "IOService"))
  {
    if ((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        int v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
        int InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
        CStringNoCopy  = OSString::getCStringNoCopy(v21);
        CCLogStream::logInfo(v17, "[dk] %s@%d:IfId %d Role %s disable skywalk data path\n", "disableDatapath", 701, InterfaceId, CStringNoCopy);
      }
    }
  }
  uint64_t v2 = *((void *)this + 19);
  if (*(unsigned char *)(v2 + 42))
  {
    unint64_t v3 = 0;
    while (1)
    {
      uint64_t v4 = *(void *)(v2 + 8 * v3 + 120);
      if (!v4) {
        break;
      }
      (*(void (**)(uint64_t))(*(void *)v4 + 272))(v4);
      ++v3;
      uint64_t v2 = *((void *)this + 19);
      if (v3 >= *(unsigned __int8 *)(v2 + 42)) {
        goto LABEL_12;
      }
    }
    if ((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        int v20 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logCrit(v20, "[dk] %s@%d:tx submission queue ac %d not valid\n");
      }
    }
  }
  else
  {
LABEL_12:
    uint64_t v5 = *(void *)(v2 + 152);
    if (v5)
    {
      (*(void (**)(uint64_t))(*(void *)v5 + 72))(v5);
      uint64_t v2 = *((void *)this + 19);
    }
    uint64_t v6 = *(void *)(v2 + 104);
    if (v6)
    {
      (*(void (**)(uint64_t))(*(void *)v6 + 192))(v6);
      (*(void (**)(void))(**(void **)(*((void *)this + 19) + 104) + 208))(*(void *)(*((void *)this + 19) + 104));
      uint64_t v7 = *(void *)(*((void *)this + 19) + 96);
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v7 + 200))(v7);
        if ((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this))
        {
          (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
            int v15 = IO80211SkywalkInterface::getInterfaceId(this);
            if (v21) {
              int v16 = OSString::getCStringNoCopy(v21);
            }
            else {
              int v16 = "Unknown";
            }
            CCLogStream::logInfo(v14, "[dk] %s@%d:IfId %d Role %s disable skywalk data path done\n", "disableDatapath", 720, v15, v16);
          }
        }
        if (v21) {
          ((void (*)(OSString *))v21->release)(v21);
        }
        return 0;
      }
      if ((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this))
      {
        (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
          CCLogStream::logCrit(v12, "[dk] %s@%d:tx completion queue not valid\n");
        }
      }
    }
    else if ((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logCrit(v11, "[dk] %s@%d:rx completion queue not valid\n");
      }
    }
  }
  uint64_t v8 = 3758097084;
  if ((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logCrit(v10, "[dk] %s@%d:skywalk data path disable fail\n", "disableDatapath", 726);
    }
  }
  return v8;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::disableDatapath(AppleBCMWLANSkywalkInterface *this)
{
  return AppleBCMWLANSkywalkInterface::disableDatapath((AppleBCMWLANSkywalkInterface *)((char *)this - 80));
}

uint64_t AppleBCMWLANSkywalkInterface::disable(AppleBCMWLANSkywalkInterface *this, unsigned int a2)
{
  if ((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      uint64_t v6 = (const char *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 160))(this);
      int InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
      CCLogStream::logAlert(v5, "[dk] %s@%d:AppleBCMWLANSkywalkInterface %s ifid %d disable, fEnabled:%d\n", "disable", 734, v6, InterfaceId, *(unsigned __int8 *)(*((void *)this + 19) + 161));
    }
  }
  *(void *)(*((void *)this + 19) + 192)  = mach_continuous_time();
  uint64_t result = IO80211SkywalkInterface::disable(this, a2);
  if (*(unsigned char *)(*((void *)this + 19) + 161))
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1176))(this);
    *(unsigned char *)(*((void *)this + 19) + 161)  = 0;
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::disable(AppleBCMWLANSkywalkInterface *this, unsigned int a2)
{
  return AppleBCMWLANSkywalkInterface::disable((AppleBCMWLANSkywalkInterface *)((char *)this - 80), a2);
}

uint64_t AppleBCMWLANSkywalkInterface::setMulticastAddresses(AppleBCMWLANSkywalkInterface *this, const ether_addr *a2, uint64_t a3)
{
  IO80211SkywalkInterface::validateDispatchQueue(this);
  if (IO80211SkywalkInterface::getInterfaceRole(this) != 1) {
    return 0;
  }
  if ((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logInfo(v10, "[dk] %s@%d:count  = %u, bEnable:%d\n", "setMulticastAddresses", 760, a3, a3 != 0);
    }
  }
  uint64_t v6 = (*(uint64_t (**)(void, BOOL))(**(void **)(*((void *)this + 19) + 24) + 416))(*(void *)(*((void *)this + 19) + 24), a3 != 0);
  if (v6)
  {
    uint64_t v7 = v6;
    if ((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v8, "[dk] %s@%d:setMulticastMode( %d) failed\n", "setMulticastAddresses", 766, a3 != 0);
      }
    }
  }
  else if (a3)
  {
    uint64_t v7 = (*(uint64_t (**)(void, const ether_addr *, uint64_t))(**(void **)(*((void *)this + 19) + 24)
                                                                        + 424))(*(void *)(*((void *)this + 19) + 24), a2, a3);
  }
  else
  {
    uint64_t v7 = 0;
  }
  if ((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logInfoIf(v11, 0x80uLL, "[dk] %s@%d:Returning 0x%08x\n", "setMulticastAddresses", 773, v7);
    }
  }
  return v7;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::setMulticastAddresses(AppleBCMWLANSkywalkInterface *this, const ether_addr *a2, uint64_t a3)
{
  return AppleBCMWLANSkywalkInterface::setMulticastAddresses((AppleBCMWLANSkywalkInterface *)((char *)this - 48), a2, a3);
}

uint64_t AppleBCMWLANSkywalkInterface::setAllMulticastModeEnable(AppleBCMWLANSkywalkInterface *this, BOOL a2)
{
  if ((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logAlert(v7, "[dk] %s@%d:Enter, enable:%d", "setAllMulticastModeEnable", 784, a2);
    }
  }
  IO80211SkywalkInterface::validateDispatchQueue(this);
  if (IO80211SkywalkInterface::getInterfaceRole(this) != 1) {
    return 0;
  }
  uint64_t v4 = AppleBCMWLANCore::setAllMulticastModeEnable(*(AppleBCMWLANCore **)(*((void *)this + 19) + 24), a2);
  if (v4)
  {
    if ((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v8, "[dk] %s@%d:setAllMulticastModeEnable( %d) failed\n", "setAllMulticastModeEnable", 794, a2);
      }
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logInfoIf(v5, 0x80uLL, "[dk] %s@%d:Returning 0x%08x\n", "setAllMulticastModeEnable", 797, v4);
    }
  }
  return v4;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::setAllMulticastModeEnable(AppleBCMWLANSkywalkInterface *this, BOOL a2)
{
  return AppleBCMWLANSkywalkInterface::setAllMulticastModeEnable((AppleBCMWLANSkywalkInterface *)((char *)this - 48), a2);
}

uint64_t AppleBCMWLANSkywalkInterface::reset(uint64_t this)
{
  *(unsigned char *)(*(void *)(this + 152) + 216)  = 0;
  return this;
}

uint64_t AppleBCMWLANSkywalkInterface::setCurrentApAddress(AppleBCMWLANSkywalkInterface *this, ether_addr *a2)
{
  if (a2)
  {
    IO80211InfraInterface::setCurrentApAddress(this, a2);
    if ((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
        if (IO80211SkywalkInterface::getInterfaceRole(this) == 1
          && !IO80211_io80211isDebuggable())
        {
          int v7 = 0;
        }
        else
        {
          int v7 = a2->octet[0];
        }
        if (IO80211SkywalkInterface::getInterfaceRole(this) == 1
          && !IO80211_io80211isDebuggable())
        {
          int v11 = 0;
        }
        else
        {
          int v11 = a2->octet[1];
        }
        if (IO80211SkywalkInterface::getInterfaceRole(this) == 1
          && !IO80211_io80211isDebuggable())
        {
          int v12 = 0;
        }
        else
        {
          int v12 = a2->octet[2];
        }
        if (IO80211SkywalkInterface::getInterfaceRole(this) == 1
          && !IO80211_io80211isDebuggable())
        {
          int v13 = 0;
        }
        else
        {
          int v13 = a2->octet[3];
        }
        if (IO80211SkywalkInterface::getInterfaceRole(this) == 1
          && !IO80211_io80211isDebuggable())
        {
          int v14 = 0;
        }
        else
        {
          int v14 = a2->octet[4];
        }
        if (IO80211SkywalkInterface::getInterfaceRole(this) == 1
          && !IO80211_io80211isDebuggable())
        {
          int v15 = 0;
        }
        else
        {
          int v15 = a2->octet[5];
        }
        int v16 = (const char *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 160))(this);
        int InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
        CCLogStream::logAlert(v6, "[dk] %s@%d:%s with %02x:%02x:%02x:%02x:%02x:%02x peer on skywalk interface for %s ifid %d\n", "setCurrentApAddress", 825, "virtual void AppleBCMWLANSkywalkInterface::setCurrentApAddress(struct ether_addr *)", v7, v11, v12, v13, v14, v15, v16, InterfaceId);
      }
    }
    *(unsigned char *)(*((void *)this + 19) + 216)  = 1;
    uint64_t v4 = (void *)*((void *)this + 19);
    if ((*((unsigned char *)v4 + 161) & (_BYTE)v4[20]) != 0)
    {
      (*(void (**)(void, AppleBCMWLANSkywalkInterface *))(*(void *)*v4 + 64))(*v4, this);
      uint64_t v4 = (void *)*((void *)this + 19);
    }
    uint64_t result = v4[3];
    if (result)
    {
      return AppleBCMWLANCore::resetCumulativePkts(result);
    }
  }
  else
  {
    if ((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
        uint64_t v9 = (const char *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 160))(this);
        int v10 = IO80211SkywalkInterface::getInterfaceId(this);
        CCLogStream::logAlert(v8, "[dk] %s@%d:%s with null peer on skywalk interface for %s ifid %d\n", "setCurrentApAddress", 815, "virtual void AppleBCMWLANSkywalkInterface::setCurrentApAddress(struct ether_addr *)", v9, v10);
      }
    }
    (*(void (**)(void, AppleBCMWLANSkywalkInterface *))(***((void ***)this + 19) + 72))(**((void **)this + 19), this);
    uint64_t result = IO80211InfraInterface::setCurrentApAddress(this, 0);
    *(unsigned char *)(*((void *)this + 19) + 216)  = 0;
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::setCurrentApAddress(AppleBCMWLANSkywalkInterface *this, ether_addr *a2)
{
  return AppleBCMWLANSkywalkInterface::setCurrentApAddress((AppleBCMWLANSkywalkInterface *)((char *)this - 96), a2);
}

uint64_t AppleBCMWLANSkywalkInterface::retrievePendingPacketsOnRoam(AppleBCMWLANSkywalkInterface *this, unsigned int *a2, unsigned int *a3)
{
  return (*(uint64_t (**)(void, unsigned int *, unsigned int *))(***((void ***)this + 19) + 136))(**((void **)this + 19), a2, a3);
}

uint64_t AppleBCMWLANSkywalkInterface::setMacAddress(AppleBCMWLANSkywalkInterface *this, ether_addr *a2)
{
  uint64_t v4 = AppleBCMWLANCore::setCurEtheraddr(*(AppleBCMWLANCore **)(*((void *)this + 19) + 24), a2);
  if (!v4
    && AppleBCMWLANCore::featureFlagIsBitSet(*(AppleBCMWLANCore **)(*((void *)this + 19) + 24), 115)
    && AppleBCMWLANCore::get11beAdapter(*(AppleBCMWLANCore **)(*((void *)this + 19) + 24)))
  {
    uint64_t v5 = (AppleBCMWLAN11beAdapter *)AppleBCMWLANCore::get11beAdapter(*(AppleBCMWLANCore **)(*((void *)this + 19) + 24));
    AppleBCMWLAN11beAdapter::setupJoinConfig(v5, 1, a2, 1);
  }
  return v4;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::setMacAddress(AppleBCMWLANSkywalkInterface *this, ether_addr *a2)
{
  return AppleBCMWLANSkywalkInterface::setMacAddress((AppleBCMWLANSkywalkInterface *)((char *)this - 80), a2);
}

uint64_t AppleBCMWLANSkywalkInterface::pendingPackets(AppleBCMWLANSkywalkInterface *this, unsigned int a2)
{
  uint64_t result = *(void *)(*((void *)this + 19) + 8 * a2 + 120);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 232))();
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::pendingPackets(AppleBCMWLANSkywalkInterface *this, unsigned int a2)
{
  uint64_t result = *(void *)(*((void *)this + 9) + 8 * a2 + 120);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 232))();
  }
  return result;
}

uint64_t AppleBCMWLANSkywalkInterface::packetSpace(AppleBCMWLANSkywalkInterface *this, unsigned int a2)
{
  uint64_t result = *(void *)(*((void *)this + 19) + 8 * a2 + 120);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 224))();
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::packetSpace(AppleBCMWLANSkywalkInterface *this, unsigned int a2)
{
  uint64_t result = *(void *)(*((void *)this + 9) + 8 * a2 + 120);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 224))();
  }
  return result;
}

uint64_t AppleBCMWLANSkywalkInterface::removePacketQueue(void *a1)
{
  uint64_t v1 = (void *)a1[19];
  if (v1)
  {
    if (*v1 && v1[4])
    {
      int v3 = (*(uint64_t (**)(void))(*(void *)*v1 + 120))(*v1);
      if ((*(uint64_t (**)(void *))(*a1 + 1024))(a1))
      {
        (*(void (**)(void *))(*a1 + 1024))(a1);
        if (CCLogStream::shouldLog())
        {
          int v7 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1024))(a1);
          CCLogStream::logInfo(v7, "[dk] %s@%d:Removing flowID:%u\n", "removePacketQueue", 893, v3);
        }
      }
      uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a1[19] + 32) + 760);
      return v4();
    }
    uint64_t v6 = "AppleBCMWLANSkywalkInterface::removePacketQueue: remove packet queue, bus interface is not valid\n";
  }
  else
  {
    uint64_t v6 = "AppleBCMWLANSkywalkInterface::removePacketQueue: No ivars\n";
  }
  return IOLog(v6);
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::removePacketQueue(uint64_t a1)
{
  return AppleBCMWLANSkywalkInterface::removePacketQueue((void *)(a1 - 80));
}

uint64_t AppleBCMWLANSkywalkInterface::updateRxCounter(AppleBCMWLANSkywalkInterface *this, uint64_t a2)
{
  return AppleBCMWLANCore::updateSkywalkRxCounter(*(void *)(*((void *)this + 19) + 24), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::updateRxCounter(AppleBCMWLANSkywalkInterface *this, uint64_t a2)
{
  return AppleBCMWLANCore::updateSkywalkRxCounter(*(void *)(*((void *)this + 9) + 24), a2);
}

uint64_t AppleBCMWLANSkywalkInterface::powerOnNotification(AppleBCMWLANSkywalkInterface *this)
{
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      int v3 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      return CCLogStream::logInfo(v3, "[dk] %s@%d:Enter", "powerOnNotification", 911);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::powerOnNotification(AppleBCMWLANSkywalkInterface *this)
{
  return AppleBCMWLANSkywalkInterface::powerOnNotification((AppleBCMWLANSkywalkInterface *)((char *)this - 80));
}

uint64_t AppleBCMWLANSkywalkInterface::powerOffNotification(AppleBCMWLANSkywalkInterface *this)
{
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      int v3 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      return CCLogStream::logInfo(v3, "[dk] %s@%d:Enter", "powerOffNotification", 917);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::powerOffNotification(AppleBCMWLANSkywalkInterface *this)
{
  return AppleBCMWLANSkywalkInterface::powerOffNotification((AppleBCMWLANSkywalkInterface *)((char *)this - 80));
}

uint64_t AppleBCMWLANSkywalkInterface::statsDump(IOService *this)
{
  uint64_t v6 = 0;
  uint64_t result = acquireProperty<OSString>(this, "IO80211InterfaceRole", &v6, 0, "IOService");
  if (result)
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[18].release)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[18].release)(this);
      if (CCLogStream::shouldLog())
      {
        int v3 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[18].release)(this);
        int InterfaceId = IO80211SkywalkInterface::getInterfaceId((IO80211SkywalkInterface *)this);
        CStringNoCopy  = OSString::getCStringNoCopy(v6);
        CCLogStream::logAlert(v3, "[dk] %s@%d:Skywalk Interface ID %d Role %s\n", "statsDump", 927, InterfaceId, CStringNoCopy);
      }
    }
    uint64_t result = (uint64_t)v6;
    if (v6) {
      return ((uint64_t (*)(OSString *))v6->release)(v6);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::statsDump(AppleBCMWLANSkywalkInterface *this)
{
  return AppleBCMWLANSkywalkInterface::statsDump((IOService *)((char *)this - 80));
}

uint64_t AppleBCMWLANSkywalkInterface::printDataPath(IO80211InfraInterface *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(unsigned int *)(a2 + 28);
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  uint64_t v6 = *(unsigned int *)(a2 + 24);
  (*(uint64_t (**)(void))(*(void *)a1 + 1008))();
  IO80211InfraInterface::getCurrentApAddress(a1);
  if ((*(uint64_t (**)(IO80211InfraInterface *))(*(void *)a1 + 1024))(a1))
  {
    (*(void (**)(IO80211InfraInterface *))(*(void *)a1 + 1024))(a1);
    if (CCLogStream::shouldLog())
    {
      int v23 = (CCLogStream *)(*(uint64_t (**)(IO80211InfraInterface *))(*(void *)a1 + 1024))(a1);
      InterfaceRoleStr  = (const char *)IO80211SkywalkInterface::getInterfaceRoleStr(a1);
      char v25 = (const char *)(*(uint64_t (**)(IO80211InfraInterface *))(*(void *)a1 + 160))(a1);
      CCLogStream::logInfo(v23, "[dk] %s@%d:Enter InterfaceRole:%s bsdname:%s\n", "printDataPath", 943, InterfaceRoleStr, v25);
    }
  }
  (*(void (**)(IO80211InfraInterface *))(*(void *)a1 + 1024))(a1);
  IO80211SkywalkInterface::getInterfaceRoleStr(a1);
  (*(void (**)(IO80211InfraInterface *))(*(void *)a1 + 160))(a1);
  uint64_t v7 = IO80211Print() + v5;
  (*(void (**)(IO80211InfraInterface *))(*(void *)a1 + 1024))(a1);
  (*(void (**)(IO80211InfraInterface *))(*(void *)a1 + 1104))(a1);
  uint64_t v8 = IO80211Print() + v7;
  (*(void (**)(IO80211InfraInterface *))(*(void *)a1 + 1024))(a1);
  uint64_t v9 = IO80211Print() + v8;
  (*(void (**)(IO80211InfraInterface *))(*(void *)a1 + 1024))(a1);
  uint64_t v10 = IO80211Print() + v9;
  absolutetime_to_nanoseconds();
  absolutetime_to_nanoseconds();
  (*(void (**)(IO80211InfraInterface *))(*(void *)a1 + 1024))(a1);
  uint64_t v11 = IO80211Print() + v10;
  absolutetime_to_nanoseconds();
  absolutetime_to_nanoseconds();
  (*(void (**)(IO80211InfraInterface *))(*(void *)a1 + 1024))(a1);
  uint64_t v12 = IO80211Print() + v11;
  if (*(unsigned char *)(*((void *)a1 + 19) + 42))
  {
    unint64_t v13 = 0;
    do
    {
      (*(void (**)(IO80211InfraInterface *))(*(void *)a1 + 1024))(a1);
      uint64_t v14 = IO80211Print() + v12;
      uint64_t v15 = *(void *)(*((void *)a1 + 19) + 8 * v13 + 120);
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v15 + 216))(v15, v3, v4, v6, v14);
      ++v13;
    }
    while (v13 < *(unsigned __int8 *)(*((void *)a1 + 19) + 42));
  }
  (*(void (**)(IO80211InfraInterface *))(*(void *)a1 + 1024))(a1);
  uint64_t v16 = IO80211Print();
  uint64_t v17 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(*((void *)a1 + 19) + 96)
                                                                              + 176))(*(void *)(*((void *)a1 + 19) + 96), v3, v4, v6, v16 + v12);
  (*(void (**)(IO80211InfraInterface *))(*(void *)a1 + 1024))(a1);
  uint64_t v18 = IO80211Print();
  uint64_t v19 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(*((void *)a1 + 19)
                                                                                            + 104)
                                                                              + 184))(*(void *)(*((void *)a1 + 19) + 104), v3, v4, v6, v18 + v17);
  if (IO80211SkywalkInterface::getInterfaceRole(a1) == 1)
  {
    (*(void (**)(IO80211InfraInterface *))(*(void *)a1 + 1024))(a1);
    uint64_t v20 = IO80211Print();
    LODWORD(v19)  = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(***((void ***)a1 + 19)
                                                                                         + 80))(**((void **)a1 + 19), v3, v4, v6, v20 + v19);
  }
  int v21 = *(_DWORD *)(a2 + 28) + v19;
  *(_DWORD *)(a2 + 24) -= v19;
  *(_DWORD *)(a2 + 28)  = v21;
  IO80211SkywalkInterface::printDataPath();
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::printDataPath(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t AppleBCMWLANSkywalkInterface::setPromiscuousModeEnable(AppleBCMWLANSkywalkInterface *this, int a2)
{
  IO80211SkywalkInterface::validateDispatchQueue(this);
  if ((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      CCLogStream::logInfo(v5, "[dk] %s@%d:Enter, enable:%d", "setPromiscuousModeEnable", 993, a2);
    }
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::setPromiscuousModeEnable(AppleBCMWLANSkywalkInterface *this, int a2)
{
  return 0;
}

uint64_t AppleBCMWLANSkywalkInterface::notifyQueueState(uint64_t a1, char a2, __int16 a3)
{
  v7[0]  = 0xAAAAAAAAAAAAAAAALL;
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  LOBYTE(v7[0])  = a2;
  WORD1(v7[0])  = a3;
  v7[1]  = 0xAAAAAAAAAAAAAAAALL;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 512))(a1, 154, v7, 16, 1);
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::notifyQueueState(uint64_t a1, char a2, __int16 a3)
{
  return AppleBCMWLANSkywalkInterface::notifyQueueState(a1 - 80, a2, a3);
}

uint64_t AppleBCMWLANSkywalkInterface::bpfTap(AppleBCMWLANSkywalkInterface *this, unsigned int a2, unsigned int a3)
{
  IO80211SkywalkInterface::validateDispatchQueue(this);
  if ((*(unsigned int (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1104))(this))
  {
    if ((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v6, "[dk] %s@%d:infra interface associated, cannot enable here\n", "bpfTap", 1031);
      }
    }
  }
  else
  {
    IO80211InfraInterface::bpfTap(this, a2, a3);
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::bpfTap(AppleBCMWLANSkywalkInterface *this, unsigned int a2, unsigned int a3)
{
  return 0;
}

uint64_t AppleBCMWLANSkywalkInterface::getLogger(AppleBCMWLANSkywalkInterface *this)
{
  return *(void *)(*((void *)this + 19) + 168);
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::getLogger(AppleBCMWLANSkywalkInterface *this)
{
  return *(void *)(*((void *)this + 9) + 168);
}

uint64_t AppleBCMWLANSkywalkInterface::getNumTxQueues(AppleBCMWLANSkywalkInterface *this)
{
  return *(unsigned __int8 *)(*((void *)this + 19) + 42);
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::getNumTxQueues(AppleBCMWLANSkywalkInterface *this)
{
  return *(unsigned __int8 *)(*((void *)this + 9) + 42);
}

uint64_t AppleBCMWLANSkywalkInterface::getRxCompQueue(AppleBCMWLANSkywalkInterface *this)
{
  return *(void *)(*((void *)this + 19) + 104);
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::getRxCompQueue(AppleBCMWLANSkywalkInterface *this)
{
  return *(void *)(*((void *)this + 9) + 104);
}

uint64_t AppleBCMWLANSkywalkInterface::getTxCompQueue(AppleBCMWLANSkywalkInterface *this)
{
  return *(void *)(*((void *)this + 19) + 96);
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::getTxCompQueue(AppleBCMWLANSkywalkInterface *this)
{
  return *(void *)(*((void *)this + 9) + 96);
}

uint64_t AppleBCMWLANSkywalkInterface::getTxSubQueue(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 152);
  uint64_t v3 = *(unsigned int *)(v2 + 4 * a2 + 60);
  if (v3 >= *(unsigned __int8 *)(v2 + 42)) {
    return 0;
  }
  else {
    return *(void *)(v2 + 8 * v3 + 120);
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::getTxSubQueue(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v3 = *(unsigned int *)(v2 + 4 * a2 + 60);
  if (v3 >= *(unsigned __int8 *)(v2 + 42)) {
    return 0;
  }
  else {
    return *(void *)(v2 + 8 * v3 + 120);
  }
}

uint64_t AppleBCMWLANSkywalkInterface::getMultiCastQueue(AppleBCMWLANSkywalkInterface *this)
{
  return *(void *)(*((void *)this + 19) + 152);
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::getMultiCastQueue(AppleBCMWLANSkywalkInterface *this)
{
  return *(void *)(*((void *)this + 9) + 152);
}

uint64_t AppleBCMWLANSkywalkInterface::getTxPacketPool(AppleBCMWLANSkywalkInterface *this)
{
  return *(void *)(*((void *)this + 19) + 80);
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::getTxPacketPool(AppleBCMWLANSkywalkInterface *this)
{
  return *(void *)(*((void *)this + 9) + 80);
}

uint64_t AppleBCMWLANSkywalkInterface::getRxPacketPool(AppleBCMWLANSkywalkInterface *this)
{
  return *(void *)(*((void *)this + 19) + 88);
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::getRxPacketPool(AppleBCMWLANSkywalkInterface *this)
{
  return *(void *)(*((void *)this + 9) + 88);
}

uint64_t AppleBCMWLANSkywalkInterface::getTxHeadroom(AppleBCMWLANSkywalkInterface *this)
{
  return *(unsigned __int16 *)(*((void *)this + 19) + 40);
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::getTxHeadroom(AppleBCMWLANSkywalkInterface *this)
{
  return *(unsigned __int16 *)(*((void *)this + 9) + 40);
}

uint64_t AppleBCMWLANSkywalkInterface::isEnabled(AppleBCMWLANSkywalkInterface *this)
{
  return *(unsigned __int8 *)(*((void *)this + 19) + 161);
}

AppleBCMWLANSkywalkTxSubmissionQueue *AppleBCMWLANSkywalkInterface::getTxQueueDepth(AppleBCMWLANSkywalkInterface *this)
{
  uint64_t result = *(AppleBCMWLANSkywalkTxSubmissionQueue **)(*((void *)this + 19) + 120);
  if (result) {
    return (AppleBCMWLANSkywalkTxSubmissionQueue *)AppleBCMWLANSkywalkTxSubmissionQueue::getQueueDepth(result);
  }
  return result;
}

AppleBCMWLANSkywalkTxSubmissionQueue *non-virtual thunk to'AppleBCMWLANSkywalkInterface::getTxQueueDepth(AppleBCMWLANSkywalkInterface *this)
{
  uint64_t result = *(AppleBCMWLANSkywalkTxSubmissionQueue **)(*((void *)this + 9) + 120);
  if (result) {
    return (AppleBCMWLANSkywalkTxSubmissionQueue *)AppleBCMWLANSkywalkTxSubmissionQueue::getQueueDepth(result);
  }
  return result;
}

AppleBCMWLANSkywalkRxCompletionQueue *AppleBCMWLANSkywalkInterface::getRxQueueCapacity(AppleBCMWLANSkywalkInterface *this)
{
  uint64_t result = *(AppleBCMWLANSkywalkRxCompletionQueue **)(*((void *)this + 19) + 104);
  if (result) {
    return (AppleBCMWLANSkywalkRxCompletionQueue *)AppleBCMWLANSkywalkRxCompletionQueue::getQueueCapacity(result);
  }
  return result;
}

AppleBCMWLANSkywalkRxCompletionQueue *non-virtual thunk to'AppleBCMWLANSkywalkInterface::getRxQueueCapacity(AppleBCMWLANSkywalkInterface *this)
{
  uint64_t result = *(AppleBCMWLANSkywalkRxCompletionQueue **)(*((void *)this + 9) + 104);
  if (result) {
    return (AppleBCMWLANSkywalkRxCompletionQueue *)AppleBCMWLANSkywalkRxCompletionQueue::getQueueCapacity(result);
  }
  return result;
}

uint64_t AppleBCMWLANSkywalkInterface::setInterfaceUnitNumber(AppleBCMWLANSkywalkInterface *this, int a2)
{
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      uint64_t result = CCLogStream::logInfo(v5, "[dk] %s@%d:Enter: unitNumber:%u\n", "setInterfaceUnitNumber", 1131, a2);
    }
  }
  *(_DWORD *)(*((void *)this + 19) + 164)  = a2;
  return result;
}

uint64_t AppleBCMWLANSkywalkInterface::isDataPathConnected(AppleBCMWLANSkywalkInterface *this)
{
  return *(unsigned __int8 *)(*((void *)this + 19) + 216);
}

uint64_t AppleBCMWLANSkywalkInterface::getController(AppleBCMWLANSkywalkInterface *this)
{
  return *(void *)(*((void *)this + 19) + 24);
}

uint64_t AppleBCMWLANSkywalkInterface::setInterfaceEnable(AppleBCMWLANSkywalkInterface *this, int a2)
{
  if ((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      uint64_t v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 160))(this);
      int InterfaceId = IO80211SkywalkInterface::getInterfaceId(this);
      int InterfaceRole = IO80211SkywalkInterface::getInterfaceRole(this);
      ActiveMediaType  = IO80211SkywalkInterface::getActiveMediaType(this);
      int v12 = (*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1104))(this);
      CCLogStream::logInfo(v7, "[dk] %s@%d:Enter skywalk bcm interface %s, ifId %d, ifRole %d,  isEnable  = %d activeMediaType  = %d associated=%d fEnabled:%d isDataPathConnected %d \n", "setInterfaceEnable", 1158, v8, InterfaceId, InterfaceRole, a2, ActiveMediaType, v12, *(unsigned __int8 *)(*((void *)this + 19) + 161), *(unsigned __int8 *)(*((void *)this + 19) + 216));
    }
  }
  if (IO80211SkywalkInterface::getInterfaceRole(this) == 1
    && *(unsigned __int8 *)(*((void *)this + 19) + 161) == a2)
  {
    if ((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logInfo(v4, "[dk] %s@%d:CurrentState == newState, bailing out");
      }
    }
    return 0;
  }
  IO80211SkywalkInterface::validateDispatchQueue(this);
  if (IO80211InfraInterface::setInterfaceEnable(this, a2))
  {
    if ((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this))
    {
      (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
        CCLogStream::logAlert(v13, "[dk] %s@%d:%s:%d ERROR: super::setInterfaceEnable failed!\n", "setInterfaceEnable", 1172, "setInterfaceEnable", 1172);
        if (a2) {
          goto LABEL_13;
        }
LABEL_24:
        if ((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this))
        {
          (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
            uint64_t v20 = (const char *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 160))(this);
            CCLogStream::logAlert(v19, "[dk] %s@%d:disable data path for %s\n", "setInterfaceEnable", 1192, v20);
          }
        }
        *(void *)(*((void *)this + 19) + 208)  = mach_continuous_time();
        (*(void (**)(AppleBCMWLANSkywalkInterface *, void))(*(void *)this + 1256))(this, 0);
        uint64_t v14 = *((void *)this + 19);
        if (*(unsigned char *)(v14 + 163))
        {
          (*(void (**)(void))(**(void **)(v14 + 112) + 200))(*(void *)(v14 + 112));
          *(unsigned char *)(*((void *)this + 19) + 16AppleBCMWLANWnmAdapter::free(this - 3) = 0;
        }
        AppleBCMWLANSkywalkInterface::setRunningState(this, 0);
        goto LABEL_30;
      }
    }
  }
  if (!a2) {
    goto LABEL_24;
  }
LABEL_13:
  *(void *)(*((void *)this + 19) + 200)  = mach_continuous_time();
  if (((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1104))(this) & 1) == 0)
  {
    uint64_t v5 = IO80211SkywalkInterface::getActiveMediaType(this);
    (*(void (**)(AppleBCMWLANSkywalkInterface *, uint64_t, uint64_t))(*(void *)this + 128))(this, 1, v5);
  }
  if ((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      uint64_t v18 = (const char *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 160))(this);
      CCLogStream::logAlert(v17, "[dk] %s@%d:enable data path for %s\n", "setInterfaceEnable", 1180, v18);
    }
  }
  AppleBCMWLANSkywalkInterface::setRunningState(this, 1);
  (*(void (**)(AppleBCMWLANSkywalkInterface *, void))(*(void *)this + 1248))(this, 0);
  if (!*(unsigned char *)(*((void *)this + 19) + 163) && IO80211SkywalkInterface::getInterfaceRole(this) == 1)
  {
    (*(void (**)(void))(**(void **)(*((void *)this + 19) + 112) + 192))(*(void *)(*((void *)this + 19) + 112));
    *(unsigned char *)(*((void *)this + 19) + 16AppleBCMWLANWnmAdapter::free(this - 3) = 1;
  }
  if ((*(unsigned int (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1104))(this))
  {
    uint64_t v6 = IO80211SkywalkInterface::getActiveMediaType(this);
    (*(void (**)(AppleBCMWLANSkywalkInterface *, uint64_t, uint64_t))(*(void *)this + 128))(this, 3, v6);
  }
LABEL_30:
  *(unsigned char *)(*((void *)this + 19) + 161)  = a2;
  if ((*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this))
  {
    (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1024))(this);
      (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 160))(this);
      IO80211SkywalkInterface::getActiveMediaType(this);
      (*(void (**)(AppleBCMWLANSkywalkInterface *))(*(void *)this + 1104))(this);
      CCLogStream::logInfo(v16, "[dk] %s@%d:Exit skywalk bcm interface %s isEnable  = %d activeMediaType  = %d associated=%d fEnabled:%d isDataPathConnected %d \n", "setInterfaceEnable");
    }
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANSkywalkInterface::setInterfaceEnable(AppleBCMWLANSkywalkInterface *this, int a2)
{
  return 0;
}

void _GLOBAL__sub_I_AppleBCMWLANSkywalkInterface_cpp()
{
  kNullRange  = 0;
}

OSObject *AppleBCMWLANChipManagerPCIe0x4377b::withChip(AppleBCMWLANChipManagerPCIe0x4377b *this, uint64_t a2)
{
  uint64_t v6 = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANChipManagerPCIe0x4377bMetaClass, &v6)) {
    return 0;
  }
  uint64_t v4 = v6;
  if (v6
    && (((uint64_t (*)(OSObject *, AppleBCMWLANChipManagerPCIe0x4377b *, uint64_t))v6->OSMetaClassBase::__vftable[4].isEqualTo)(v6, this, a2) & 1) == 0)
  {
    ((void (*)(OSObject *))v4->release)(v4);
    return 0;
  }
  return v4;
}

BOOL AppleBCMWLANChipManagerPCIe0x4377b::initWithChip(OSObject *this)
{
  BOOL result = AppleBCMWLANChipManagerPCIe::init(this);
  if (result)
  {
    AppleBCMWLANChipManagerPCIe::setOTPCoreID((uint64_t)this, 0);
    AppleBCMWLANChipManagerPCIe::setAWDLSupported((AppleBCMWLANChipManagerPCIe *)this, 1);
    AppleBCMWLANChipManagerPCIe::setChipNumber((uint64_t)this, 4377);
    AppleBCMWLANChipManagerPCIe::setCoreCount((uint64_t)this, 9);
    AppleBCMWLANChipManagerPCIe::setCoreRegionList((uint64_t)this, (uint64_t)&kBCOM4377ChipCores);
    AppleBCMWLANChipManagerPCIe::setWrapperCount((uint64_t)this, 17);
    AppleBCMWLANChipManagerPCIe::setWrapperRegionList((uint64_t)this, (uint64_t)&kBCOM4377ChipWrappers);
    AppleBCMWLANChipManagerPCIe::setMemoryCount((uint64_t)this, 7);
    AppleBCMWLANChipManagerPCIe::setMemoryRegionList((uint64_t)this, (uint64_t)&kBCOM4377B0ChipMemories);
    AppleBCMWLANChipManagerPCIe::setBackplaneWindowCount((uint64_t)this, 8);
    AppleBCMWLANChipManagerPCIe::setBackplaneWindows((uint64_t)this, (uint64_t)&kBCOM4377ChipBackplaneWindows);
    AppleBCMWLANChipManagerPCIe::setOTPCoreID((uint64_t)this, 8);
    AppleBCMWLANChipManagerPCIe::setUserOTPRange((uint64_t)this, (uint64_t)&kBCOM4377B0ChipUserOTP);
    AppleBCMWLANChipManagerPCIe::setChipOTPRange((uint64_t)this, (uint64_t)&kBCOM4377ChipOTP);
    AppleBCMWLANChipManagerPCIe::setCoreIDTable((uint64_t)this, kBCOM4377CoreIDTable);
    AppleBCMWLANChipManagerPCIe::setUCodeRegionInfo((uint64_t)this, (uint64_t)&kBCOM4377UCodeSCRRegionInfo, 0);
    AppleBCMWLANChipManagerPCIe::setUCodeRegionInfo((uint64_t)this, (uint64_t)&kBCOM4377UCodeSHMRegionInfo, 1);
    AppleBCMWLANChipManagerPCIe::setConfigSpaceSaveRange((uint64_t)this, (uint64_t)&kBCOM4377ChipConfigSpaceStateTable);
    AppleBCMWLANChipManagerPCIe::setConfigSpaceSaveCount((uint64_t)this, 3);
    AppleBCMWLANChipManagerPCIe::setMemoryRAMAddress((uint64_t)this, 1507328);
    AppleBCMWLANChipManagerPCIe::setPCIeHeaderLength((uint64_t)this, 256);
    AppleBCMWLANChipManagerPCIe::setSROMVersion((uint64_t)this, 18);
    AppleBCMWLANChipManagerPCIe::setSROMWordCount((uint64_t)this, 1024);
    AppleBCMWLANChipManagerPCIe::setSROMSignature((uint64_t)this, 17271);
    int SROMWordCount = AppleBCMWLANChipManagerPCIe::getSROMWordCount((AppleBCMWLANChipManagerPCIe *)this);
    AppleBCMWLANChipManagerPCIe::setSROMoffsetVersion((uint64_t)this, 2 * SROMWordCount - 2);
    AppleBCMWLANChipManagerPCIe::setSROMoffsetSignature((uint64_t)this, 224);
    AppleBCMWLANChipManagerPCIe::setSROMoffsetMacAddress((uint64_t)this, 226);
    AppleBCMWLANChipManagerPCIe::setSROMoffsetSKU((uint64_t)this, 236);
    AppleBCMWLANChipManagerPCIe::setMultiFunctionChip((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setSafeToCaptureSoCRAM((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setHMAPSupported((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setHMAPBaseAddress((uint64_t)this, 1408);
    AppleBCMWLANChipManagerPCIe::sethostWakeToggleNotConfigured((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setTrapBeforeFLRUnSupported((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setASPMWorkaround((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setNotSplitArchitecture((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setBootMSIUnsupported((uint64_t)this, 1);
    AppleBCMWLANChipManagerPCIe::setPCIeBootMinPollingDelay((uint64_t)this, 200);
    int v9 = 0;
    while (1)
    {
      uint64_t BackplaneWindows = AppleBCMWLANChipManagerPCIe::getBackplaneWindows((AppleBCMWLANChipManagerPCIe *)this);
      unsigned int PacketCount = AppleBCMWLANPCIeFlowQueue::getPacketCount((AppleBCMWLANPCIeFlowQueue *)this);
      if (!AppleBCMWLANChipManagerPCIe::findRemappableWindow(BackplaneWindows, PacketCount, 0, &v9)) {
        break;
      }
      AppleBCMWLANChipManagerPCIe::incrementCoreRemapperCount((uint64_t)this);
    }
    int v9 = 0;
    while (1)
    {
      uint64_t v6 = AppleBCMWLANChipManagerPCIe::getBackplaneWindows((AppleBCMWLANChipManagerPCIe *)this);
      unsigned int v7 = AppleBCMWLANPCIeFlowQueue::getPacketCount((AppleBCMWLANPCIeFlowQueue *)this);
      if (!AppleBCMWLANChipManagerPCIe::findRemappableWindow(v6, v7, 1, &v9)) {
        break;
      }
      AppleBCMWLANChipManagerPCIe::incrementWrapperRemapperCount((uint64_t)this);
    }
    uint64_t v8 = OSDictionary::withCapacity(0x20u);
    return AppleBCMWLANChipManagerPCIe::setChipProvisioningData((AppleBCMWLANChipManagerPCIe *)this, v8);
  }
  return result;
}

BOOL non-virtual thunk to'AppleBCMWLANChipManagerPCIe0x4377b::initWithChip(AppleBCMWLANChipManagerPCIe0x4377b *this)
{
  return AppleBCMWLANChipManagerPCIe0x4377b::initWithChip((OSObject *)((char *)this - 56));
}

uint64_t AppleBCMWLANChipManagerPCIe0x4377b::prepareHardware(AppleBCMWLANChipManagerPCIe0x4377b *this, AppleBCMWLANChipConfigSpace *a2, AppleBCMWLANChipBackplane *a3)
{
  uint64_t v3 = 3758097090;
  unsigned int v6 = 0;
  if (a2 && a3)
  {
    if (AppleBCMWLANChipBackplane::readGCICoreReg32(a3, 0xE64u, &v6))
    {
      return 3758097098;
    }
    else
    {
      unsigned int v6 = v6 & 0xFFFFFFFC | 1;
      AppleBCMWLANChipBackplane::writeGCICoreReg32(a3, 0xE64u, v6);
      return 0;
    }
  }
  return v3;
}

uint64_t AppleBCMWLANChipManagerPCIe0x4377b::checkHardware(AppleBCMWLANChipManagerPCIe0x4377b *this, AppleBCMWLANChipConfigSpace *a2, AppleBCMWLANChipBackplane *a3)
{
  unsigned int v6 = 0;
  uint64_t result = 3758097090;
  if (a2 && a3)
  {
    AppleBCMWLANChipBackplane::writeGCICoreReg32(a3, 0x40u, 4u);
    if (AppleBCMWLANChipBackplane::readGCICoreReg32(a3, 0x204u, &v6) || (v6 & 0x4000) != 0)
    {
      return 3758097098;
    }
    else
    {
      int v5 = AppleBCMWLANChipBackplane::readGCICoreReg32(a3, 0x40u, &v6);
      uint64_t result = 3758097098;
      if (!v5)
      {
        if (v6 == 4) {
          return 0;
        }
        else {
          return 3758097098;
        }
      }
    }
  }
  return result;
}

void _GLOBAL__sub_I_AppleBCMWLANChipManagerPCIe0x4377b_cpp()
{
  kNullRange  = 0;
}

OSObject *AppleBCMWLANTxPowerManager::withDriver(AppleBCMWLANTxPowerManager *this, AppleBCMWLANCore *a2)
{
  int v5 = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANTxPowerManagerMetaClass, &v5)) {
    return 0;
  }
  uint64_t v3 = v5;
  if (v5
    && (((uint64_t (*)(OSObject *, AppleBCMWLANTxPowerManager *))v5->OSMetaClassBase::__vftable[1].getMetaClass)(v5, this) & 1) == 0)
  {
    ((void (*)(OSObject *))v3->release)(v3);
    return 0;
  }
  return v3;
}

uint64_t AppleBCMWLANTxPowerManager::initWithDriver(AppleBCMWLANTxPowerManager *this, AppleBCMWLANCore *a2)
{
  BOOL v4 = OSObject::init((OSObject *)this);
  uint64_t v5 = 0;
  if (!a2 || !v4) {
    return v5;
  }
  unsigned int v6 = (void *)IOMallocZeroTyped();
  *((void *)this + 6)  = v6;
  if (!v6) {
    return 0;
  }
  void *v6 = a2;
  *(void *)(*((void *)this + 6) + 24)  = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a2 + 1848))(a2);
  uint64_t v7 = *(void *)(*((void *)this + 6) + 24);
  if (!v7)
  {
    ClassNameHelper  = (const char *)getClassNameHelper((OSObject *)this);
    IOLog("%s::%s(): Unable to get debug logger\n", ClassNameHelper, "initWithDriver");
    goto LABEL_11;
  }
  (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  *(void *)(*((void *)this + 6) + 8)  = AppleBCMWLANCore::getConfigManager(a2);
  uint64_t v8 = *((void *)this + 6);
  uint64_t v9 = *(void *)(v8 + 8);
  if (!v9)
  {
    if (*(void *)(v8 + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:Unable to get Config Manager\n");
    }
LABEL_11:
    AppleBCMWLANTxPowerManager::freeResources(this);
    uint64_t v15 = (void *)*((void *)this + 6);
    if (v15)
    {
      memset_s(v15, 0x168E0uLL, 0, 0x168E0uLL);
      uint64_t v16 = (void *)*((void *)this + 6);
      if (v16)
      {
        IOFree(v16, 0x168E0uLL);
        uint64_t v5 = 0;
        *((void *)this + 6)  = 0;
        return v5;
      }
    }
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  *(void *)(*((void *)this + 6) + 16)  = AppleBCMWLANCore::getCommander(a2);
  uint64_t v10 = *((void *)this + 6);
  uint64_t v11 = *(void *)(v10 + 16);
  if (!v11)
  {
    if (*(void *)(v10 + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d: Failed to get Command Manager\n");
    }
    goto LABEL_11;
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  *(void *)(*((void *)this + 6) + 32)  = AppleBCMWLANCore::getFaultReporter(**((AppleBCMWLANCore ***)this + 6));
  (*(void (**)(void))(**(void **)(*((void *)this + 6) + 32) + 8))(*(void *)(*((void *)this + 6)
                                                                                                 + 32));
  *(unsigned char *)(*((void *)this + 6) + 40)  = 0;
  *(unsigned char *)(*((void *)this + 6) + 41)  = 0;
  uint64_t v12 = *((void *)this + 6);
  if (*(void *)v12)
  {
    AppleBCMWLANCore::is4387C0(*(OSDictionary **)v12);
    uint64_t v12 = *((void *)this + 6);
  }
  uint64_t v5 = 1;
  *(_DWORD *)(v12 + 48)  = 1;
  *(_WORD *)(*((void *)this + 6) + 52)  = 1;
  *(_DWORD *)(*((void *)this + 6) + 56)  = 0;
  *(_DWORD *)(*((void *)this + 6) + 60)  = 1250;
  *(_DWORD *)(*((void *)this + 6) + 64)  = 250;
  *(_DWORD *)(*((void *)this + 6) + 68)  = 1;
  AppleBCMWLANCore::getLqmRssiLevels(**((void **)this + 6), (signed __int8 *)(*((void *)this + 6) + 72));
  *(_DWORD *)(*((void *)this + 6) + 80)  = 0;
  *(void *)(*((void *)this + 6) + 88)  = 0;
  *(_DWORD *)(*((void *)this + 6) + 92368)  = 0;
  *(_DWORD *)(*((void *)this + 6) + 92372)  = 0;
  *(_DWORD *)(*((void *)this + 6) + 92376)  = 0;
  *(_DWORD *)(*((void *)this + 6) + 92380)  = 0;
  *(_DWORD *)(*((void *)this + 6) + 120)  = -65;
  *(_DWORD *)(*((void *)this + 6) + 124)  = -80;
  *(unsigned char *)(*((void *)this + 6) + 42)  = 0;
  *(_WORD *)(*((void *)this + 6) + 44)  = 0;
  *(_WORD *)(*((void *)this + 6) + 46)  = 0;
  *(void *)(*((void *)this + 6) + 128)  = 0;
  *(void *)(*((void *)this + 6) + 136)  = 0;
  *(void *)(*((void *)this + 6) + 144)  = 0;
  *(void *)(*((void *)this + 6) + 152)  = 0;
  *(void *)(*((void *)this + 6) + 160)  = 0;
  *(_WORD *)(*((void *)this + 6) + 184)  = 0;
  *(void *)(*((void *)this + 6) + 188)  = 0;
  *(void *)(*((void *)this + 6) + 196)  = 0;
  uint64_t v13 = *((void *)this + 6);
  *(void *)(v13 + 112)  = 0xFFFFFF9CFFFFFFB0;
  *(_OWORD *)(v13 + 96)  = dynSARpwrBoostRssiLUTPreset;
  bzero((void *)(*((void *)this + 6) + 208), 0x16800uLL);
  return v5;
}

uint64_t AppleBCMWLANTxPowerManager::freeResources(AppleBCMWLANTxPowerManager *this)
{
  uint64_t v2 = *((void *)this + 6);
  if (*(void *)(v2 + 24))
  {
    int shouldLog = CCLogStream::shouldLog();
    uint64_t v2 = *((void *)this + 6);
    if (shouldLog)
    {
      CCLogStream::logNoticeIf(*(CCLogStream **)(v2 + 24), 0x20uLL, "[dk] %s@%d:TXPWR_PROFILE: Enter %s \n", "freeResources", 215, "freeResources");
      uint64_t v2 = *((void *)this + 6);
    }
  }
  uint64_t v4 = *(void *)(v2 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
    *(void *)(*((void *)this + 6) + 24)  = 0;
    uint64_t v2 = *((void *)this + 6);
  }
  uint64_t v5 = *(void *)(v2 + 8);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    *(void *)(*((void *)this + 6) + 8)  = 0;
    uint64_t v2 = *((void *)this + 6);
  }
  uint64_t v6 = *(void *)(v2 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    *(void *)(*((void *)this + 6) + 16)  = 0;
    uint64_t v2 = *((void *)this + 6);
  }
  uint64_t v7 = *(void *)(v2 + 32);
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    *(void *)(*((void *)this + 6) + 32)  = 0;
    uint64_t v2 = *((void *)this + 6);
  }
  uint64_t result = *(void *)(v2 + 24);
  if (result)
  {
    uint64_t result = CCLogStream::shouldLog();
    if (result) {
      return CCLogStream::logNoticeIf(*(CCLogStream **)(*((void *)this + 6) + 24), 0x20uLL, "[dk] %s@%d:TXPWR_PROFILE: Leave %s \n", "freeResources", 221, "freeResources");
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANTxPowerManager::initWithDriver(AppleBCMWLANTxPowerManager *this, AppleBCMWLANCore *a2)
{
  return AppleBCMWLANTxPowerManager::initWithDriver((AppleBCMWLANTxPowerManager *)((char *)this - 40), a2);
}

void AppleBCMWLANTxPowerManager::free(AppleBCMWLANTxPowerManager *this)
{
  AppleBCMWLANTxPowerManager::freeResources(this);
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    memset_s(v2, 0x168E0uLL, 0, 0x168E0uLL);
    uint64_t v3 = (void *)*((void *)this + 6);
    if (v3)
    {
      IOFree(v3, 0x168E0uLL);
      *((void *)this + 6)  = 0;
    }
  }
  OSObject::free((OSObject *)this);
}

void non-virtual thunk to'AppleBCMWLANTxPowerManager::free(AppleBCMWLANTxPowerManager *this)
{
}

uint64_t AppleBCMWLANTxPowerManager::sendDynSARStatsEventCoreAnalytics(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a2) {
    uint64_t v4 = "com.apple.wifi.dsaStats.slice1";
  }
  else {
    uint64_t v4 = "com.apple.wifi.dsaStats.slice0";
  }
  OSStringPtr v5 = OSString::withCString(v4);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = OSDictionary::withCapacity(0x12u);
    if (!v7)
    {
      if (*(void *)(*(void *)(a1 + 48) + 24) && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:Fail to allocate eventPayload\n");
      }
      goto LABEL_46;
    }
    OSStringPtr v8 = OSString::withCString("State");
    if (v8)
    {
      uint64_t v9 = v8;
      OSNumberPtr v10 = OSNumber::withNumber(*(unsigned __int16 *)(a2 + 64), 0x10uLL);
      if (!v10)
      {
        uint64_t v67 = *(void *)(a1 + 48);
        uint64_t v66 = a1 + 48;
        if (!*(void *)(v67 + 24) || (CCLogStream::shouldLog() & 1) == 0) {
          goto LABEL_165;
        }
        int v68 = 265;
        goto LABEL_167;
      }
      OSNumberPtr v11 = v10;
      OSDictionary::setObject(v7, v9, v10);
      ((void (*)(const OSObject *))v9->release)(v9);
      ((void (*)(OSNumberPtr))v11->release)(v11);
      OSStringPtr v12 = OSString::withCString("PowerBoost");
      if (v12)
      {
        uint64_t v9 = v12;
        OSNumberPtr v13 = OSNumber::withNumber(*(unsigned __int16 *)(a2 + 66), 0x10uLL);
        if (!v13)
        {
          uint64_t v69 = *(void *)(a1 + 48);
          uint64_t v66 = a1 + 48;
          if (!*(void *)(v69 + 24) || (CCLogStream::shouldLog() & 1) == 0) {
            goto LABEL_165;
          }
          int v68 = 273;
          goto LABEL_167;
        }
        OSNumberPtr v14 = v13;
        OSDictionary::setObject(v7, v9, v13);
        ((void (*)(const OSObject *))v9->release)(v9);
        ((void (*)(OSNumberPtr))v14->release)(v14);
        OSStringPtr v15 = OSString::withCString("TxDCAnt0");
        if (v15)
        {
          uint64_t v9 = v15;
          OSNumberPtr v16 = OSNumber::withNumber(*(unsigned __int8 *)(a2 + 68), 8uLL);
          if (!v16)
          {
            uint64_t v70 = *(void *)(a1 + 48);
            uint64_t v66 = a1 + 48;
            if (!*(void *)(v70 + 24) || (CCLogStream::shouldLog() & 1) == 0) {
              goto LABEL_165;
            }
            int v68 = 281;
            goto LABEL_167;
          }
          OSNumberPtr v17 = v16;
          OSDictionary::setObject(v7, v9, v16);
          ((void (*)(const OSObject *))v9->release)(v9);
          ((void (*)(OSNumberPtr))v17->release)(v17);
          OSStringPtr v18 = OSString::withCString("TxDCAnt1");
          if (v18)
          {
            uint64_t v9 = v18;
            OSNumberPtr v19 = OSNumber::withNumber(*(unsigned __int8 *)(a2 + 70), 8uLL);
            if (!v19)
            {
              uint64_t v71 = *(void *)(a1 + 48);
              uint64_t v66 = a1 + 48;
              if (!*(void *)(v71 + 24) || (CCLogStream::shouldLog() & 1) == 0) {
                goto LABEL_165;
              }
              int v68 = 289;
              goto LABEL_167;
            }
            OSNumberPtr v20 = v19;
            OSDictionary::setObject(v7, v9, v19);
            ((void (*)(const OSObject *))v9->release)(v9);
            ((void (*)(OSNumberPtr))v20->release)(v20);
            OSStringPtr v21 = OSString::withCString("TxDCAnt2");
            if (v21)
            {
              uint64_t v9 = v21;
              OSNumberPtr v22 = OSNumber::withNumber(*(unsigned __int8 *)(a2 + 72), 8uLL);
              if (!v22)
              {
                uint64_t v72 = *(void *)(a1 + 48);
                uint64_t v66 = a1 + 48;
                if (!*(void *)(v72 + 24) || (CCLogStream::shouldLog() & 1) == 0) {
                  goto LABEL_165;
                }
                int v68 = 297;
                goto LABEL_167;
              }
              OSNumberPtr v23 = v22;
              OSDictionary::setObject(v7, v9, v22);
              ((void (*)(const OSObject *))v9->release)(v9);
              ((void (*)(OSNumberPtr))v23->release)(v23);
              OSStringPtr v24 = OSString::withCString("TxDCAnt3");
              if (v24)
              {
                uint64_t v9 = v24;
                OSNumberPtr v25 = OSNumber::withNumber(*(unsigned __int8 *)(a2 + 74), 8uLL);
                if (!v25)
                {
                  uint64_t v73 = *(void *)(a1 + 48);
                  uint64_t v66 = a1 + 48;
                  if (!*(void *)(v73 + 24) || (CCLogStream::shouldLog() & 1) == 0) {
                    goto LABEL_165;
                  }
                  int v68 = 305;
                  goto LABEL_167;
                }
                OSNumberPtr v26 = v25;
                OSDictionary::setObject(v7, v9, v25);
                ((void (*)(const OSObject *))v9->release)(v9);
                ((void (*)(OSNumberPtr))v26->release)(v26);
                OSStringPtr v27 = OSString::withCString("UtilAnt0");
                if (v27)
                {
                  uint64_t v9 = v27;
                  OSNumberPtr v28 = OSNumber::withNumber(*(unsigned __int8 *)(a2 + 69), 8uLL);
                  if (!v28)
                  {
                    uint64_t v74 = *(void *)(a1 + 48);
                    uint64_t v66 = a1 + 48;
                    if (!*(void *)(v74 + 24) || (CCLogStream::shouldLog() & 1) == 0) {
                      goto LABEL_165;
                    }
                    int v68 = 313;
                    goto LABEL_167;
                  }
                  OSNumberPtr v29 = v28;
                  OSDictionary::setObject(v7, v9, v28);
                  ((void (*)(const OSObject *))v9->release)(v9);
                  ((void (*)(OSNumberPtr))v29->release)(v29);
                  OSStringPtr v30 = OSString::withCString("UtilAnt1");
                  if (v30)
                  {
                    uint64_t v9 = v30;
                    OSNumberPtr v31 = OSNumber::withNumber(*(unsigned __int8 *)(a2 + 71), 8uLL);
                    if (!v31)
                    {
                      uint64_t v75 = *(void *)(a1 + 48);
                      uint64_t v66 = a1 + 48;
                      if (!*(void *)(v75 + 24) || (CCLogStream::shouldLog() & 1) == 0) {
                        goto LABEL_165;
                      }
                      int v68 = 321;
                      goto LABEL_167;
                    }
                    OSNumberPtr v32 = v31;
                    OSDictionary::setObject(v7, v9, v31);
                    ((void (*)(const OSObject *))v9->release)(v9);
                    ((void (*)(OSNumberPtr))v32->release)(v32);
                    OSStringPtr v33 = OSString::withCString("UtilAnt2");
                    if (v33)
                    {
                      uint64_t v9 = v33;
                      OSNumberPtr v34 = OSNumber::withNumber(*(unsigned __int8 *)(a2 + 73), 8uLL);
                      if (!v34)
                      {
                        uint64_t v76 = *(void *)(a1 + 48);
                        uint64_t v66 = a1 + 48;
                        if (!*(void *)(v76 + 24) || (CCLogStream::shouldLog() & 1) == 0) {
                          goto LABEL_165;
                        }
                        int v68 = 329;
                        goto LABEL_167;
                      }
                      OSNumberPtr v35 = v34;
                      OSDictionary::setObject(v7, v9, v34);
                      ((void (*)(const OSObject *))v9->release)(v9);
                      ((void (*)(OSNumberPtr))v35->release)(v35);
                      OSStringPtr v36 = OSString::withCString("UtilAnt3");
                      if (v36)
                      {
                        uint64_t v9 = v36;
                        OSNumberPtr v37 = OSNumber::withNumber(*(unsigned __int8 *)(a2 + 75), 8uLL);
                        if (!v37)
                        {
                          uint64_t v77 = *(void *)(a1 + 48);
                          uint64_t v66 = a1 + 48;
                          if (!*(void *)(v77 + 24) || (CCLogStream::shouldLog() & 1) == 0) {
                            goto LABEL_165;
                          }
                          int v68 = 337;
                          goto LABEL_167;
                        }
                        OSNumberPtr v38 = v37;
                        OSDictionary::setObject(v7, v9, v37);
                        ((void (*)(const OSObject *))v9->release)(v9);
                        ((void (*)(OSNumberPtr))v38->release)(v38);
                        OSStringPtr v39 = OSString::withCString("NoOptDur");
                        if (v39)
                        {
                          uint64_t v9 = v39;
                          OSNumberPtr v40 = OSNumber::withNumber(*(void *)(a2 + 8), 0x40uLL);
                          if (!v40)
                          {
                            uint64_t v78 = *(void *)(a1 + 48);
                            uint64_t v66 = a1 + 48;
                            if (!*(void *)(v78 + 24) || (CCLogStream::shouldLog() & 1) == 0) {
                              goto LABEL_165;
                            }
                            int v68 = 345;
                            goto LABEL_167;
                          }
                          OSNumberPtr v41 = v40;
                          OSDictionary::setObject(v7, v9, v40);
                          ((void (*)(const OSObject *))v9->release)(v9);
                          ((void (*)(OSNumberPtr))v41->release)(v41);
                          OSStringPtr v42 = OSString::withCString("PwrOptDur");
                          if (v42)
                          {
                            uint64_t v9 = v42;
                            OSNumberPtr v43 = OSNumber::withNumber(*(void *)(a2 + 16), 0x40uLL);
                            if (!v43)
                            {
                              uint64_t v79 = *(void *)(a1 + 48);
                              uint64_t v66 = a1 + 48;
                              if (!*(void *)(v79 + 24) || (CCLogStream::shouldLog() & 1) == 0) {
                                goto LABEL_165;
                              }
                              int v68 = 353;
                              goto LABEL_167;
                            }
                            OSNumberPtr v44 = v43;
                            OSDictionary::setObject(v7, v9, v43);
                            ((void (*)(const OSObject *))v9->release)(v9);
                            ((void (*)(OSNumberPtr))v44->release)(v44);
                            OSStringPtr v45 = OSString::withCString("FailSafeDur");
                            if (v45)
                            {
                              uint64_t v9 = v45;
                              OSNumberPtr v46 = OSNumber::withNumber(*(void *)(a2 + 24), 0x40uLL);
                              if (!v46)
                              {
                                uint64_t v80 = *(void *)(a1 + 48);
                                uint64_t v66 = a1 + 48;
                                if (!*(void *)(v80 + 24) || (CCLogStream::shouldLog() & 1) == 0) {
                                  goto LABEL_165;
                                }
                                int v68 = 361;
                                goto LABEL_167;
                              }
                              OSNumberPtr v47 = v46;
                              OSDictionary::setObject(v7, v9, v46);
                              ((void (*)(const OSObject *))v9->release)(v9);
                              ((void (*)(OSNumberPtr))v47->release)(v47);
                              OSStringPtr v48 = OSString::withCString("NoMuteDur");
                              if (v48)
                              {
                                uint64_t v9 = v48;
                                OSNumberPtr v49 = OSNumber::withNumber(*(void *)(a2 + 32), 0x40uLL);
                                if (!v49)
                                {
                                  uint64_t v81 = *(void *)(a1 + 48);
                                  uint64_t v66 = a1 + 48;
                                  if (!*(void *)(v81 + 24) || (CCLogStream::shouldLog() & 1) == 0) {
                                    goto LABEL_165;
                                  }
                                  int v68 = 369;
                                  goto LABEL_167;
                                }
                                OSNumberPtr v50 = v49;
                                OSDictionary::setObject(v7, v9, v49);
                                ((void (*)(const OSObject *))v9->release)(v9);
                                ((void (*)(OSNumberPtr))v50->release)(v50);
                                OSStringPtr v51 = OSString::withCString("HybridDur");
                                if (v51)
                                {
                                  uint64_t v9 = v51;
                                  OSNumberPtr v52 = OSNumber::withNumber(*(void *)(a2 + 40), 0x40uLL);
                                  if (!v52)
                                  {
                                    uint64_t v82 = *(void *)(a1 + 48);
                                    uint64_t v66 = a1 + 48;
                                    if (!*(void *)(v82 + 24) || (CCLogStream::shouldLog() & 1) == 0) {
                                      goto LABEL_165;
                                    }
                                    int v68 = 377;
                                    goto LABEL_167;
                                  }
                                  OSNumberPtr v53 = v52;
                                  OSDictionary::setObject(v7, v9, v52);
                                  ((void (*)(const OSObject *))v9->release)(v9);
                                  ((void (*)(OSNumberPtr))v53->release)(v53);
                                  OSStringPtr v54 = OSString::withCString("TxDCThrottleDur");
                                  if (v54)
                                  {
                                    uint64_t v9 = v54;
                                    OSNumberPtr v55 = OSNumber::withNumber(*(void *)(a2 + 48), 0x40uLL);
                                    if (!v55)
                                    {
                                      uint64_t v83 = *(void *)(a1 + 48);
                                      uint64_t v66 = a1 + 48;
                                      if (!*(void *)(v83 + 24) || (CCLogStream::shouldLog() & 1) == 0) {
                                        goto LABEL_165;
                                      }
                                      int v68 = 385;
                                      goto LABEL_167;
                                    }
                                    OSNumberPtr v56 = v55;
                                    OSDictionary::setObject(v7, v9, v55);
                                    ((void (*)(const OSObject *))v9->release)(v9);
                                    ((void (*)(OSNumberPtr))v56->release)(v56);
                                    OSStringPtr v57 = OSString::withCString("PwrOptTxDCThrottleDur");
                                    if (v57)
                                    {
                                      uint64_t v9 = v57;
                                      OSNumberPtr v58 = OSNumber::withNumber(*(void *)(a2 + 56), 0x40uLL);
                                      if (!v58)
                                      {
                                        uint64_t v84 = *(void *)(a1 + 48);
                                        uint64_t v66 = a1 + 48;
                                        if (!*(void *)(v84 + 24) || (CCLogStream::shouldLog() & 1) == 0) {
                                          goto LABEL_165;
                                        }
                                        int v68 = 393;
LABEL_167:
                                        CCLogStream::logAlert(*(CCLogStream **)(*(void *)v66 + 24), "[dk] %s@%d:Fail to allocate numValue\n", "sendDynSARStatsEventCoreAnalytics", v68);
LABEL_165:
                                        ((void (*)(const OSObject *))v9->release)(v9);
                                        goto LABEL_46;
                                      }
                                      OSNumberPtr v59 = v58;
                                      OSDictionary::setObject(v7, v9, v58);
                                      ((void (*)(const OSObject *))v9->release)(v9);
                                      ((void (*)(OSNumberPtr))v59->release)(v59);
                                      OSStringPtr v60 = OSString::withCString("Updates");
                                      if (v60)
                                      {
                                        uint64_t v9 = v60;
                                        OSNumberPtr v61 = OSNumber::withNumber(*(unsigned int *)(a2 + 76), 0x20uLL);
                                        if (v61)
                                        {
                                          OSNumberPtr v62 = v61;
                                          OSDictionary::setObject(v7, v9, v61);
                                          ((void (*)(const OSObject *))v9->release)(v9);
                                          ((void (*)(OSNumberPtr))v62->release)(v62);
                                          if (IOService::CoreAnalyticsSendEvent(**(IOService ***)(a1 + 48), 0, v6, v7, 0)&& *(void *)(*(void *)(a1 + 48) + 24)&& CCLogStream::shouldLog())
                                          {
                                            long long v86 = *(CCLogStream **)(*(void *)(a1 + 48) + 24);
                                            CStringNoCopy  = OSString::getCStringNoCopy(v6);
                                            CCLogStream::logEmergency(v86, "[dk] %s@%d:Failed to send CoreAnalytics CoreAnalyticsSendEvent for event %s", "sendDynSARStatsEventCoreAnalytics", 407, CStringNoCopy);
                                          }
                                          goto LABEL_46;
                                        }
                                        uint64_t v85 = *(void *)(a1 + 48);
                                        uint64_t v66 = a1 + 48;
                                        if (!*(void *)(v85 + 24) || (CCLogStream::shouldLog() & 1) == 0) {
                                          goto LABEL_165;
                                        }
                                        int v68 = 401;
                                        goto LABEL_167;
                                      }
                                      if (*(void *)(*(void *)(a1 + 48) + 24)
                                        && CCLogStream::shouldLog())
                                      {
                                        BOOL v65 = *(CCLogStream **)(*(void *)(a1 + 48) + 24);
                                        goto LABEL_162;
                                      }
LABEL_46:
                                      uint64_t result = ((uint64_t (*)(OSString *))v6->release)(v6);
                                      if (v7)
                                      {
                                        release  = v7->release;
                                        return ((uint64_t (*)(OSDictionary *))release)(v7);
                                      }
                                      return result;
                                    }
                                    if (!*(void *)(*(void *)(a1 + 48) + 24)
                                      || !CCLogStream::shouldLog())
                                    {
                                      goto LABEL_46;
                                    }
                                    BOOL v65 = *(CCLogStream **)(*(void *)(a1 + 48) + 24);
                                  }
                                  else
                                  {
                                    if (!*(void *)(*(void *)(a1 + 48) + 24)
                                      || !CCLogStream::shouldLog())
                                    {
                                      goto LABEL_46;
                                    }
                                    BOOL v65 = *(CCLogStream **)(*(void *)(a1 + 48) + 24);
                                  }
                                }
                                else
                                {
                                  if (!*(void *)(*(void *)(a1 + 48) + 24)
                                    || !CCLogStream::shouldLog())
                                  {
                                    goto LABEL_46;
                                  }
                                  BOOL v65 = *(CCLogStream **)(*(void *)(a1 + 48) + 24);
                                }
                              }
                              else
                              {
                                if (!*(void *)(*(void *)(a1 + 48) + 24)
                                  || !CCLogStream::shouldLog())
                                {
                                  goto LABEL_46;
                                }
                                BOOL v65 = *(CCLogStream **)(*(void *)(a1 + 48) + 24);
                              }
                            }
                            else
                            {
                              if (!*(void *)(*(void *)(a1 + 48) + 24) || !CCLogStream::shouldLog()) {
                                goto LABEL_46;
                              }
                              BOOL v65 = *(CCLogStream **)(*(void *)(a1 + 48) + 24);
                            }
                          }
                          else
                          {
                            if (!*(void *)(*(void *)(a1 + 48) + 24) || !CCLogStream::shouldLog()) {
                              goto LABEL_46;
                            }
                            BOOL v65 = *(CCLogStream **)(*(void *)(a1 + 48) + 24);
                          }
                        }
                        else
                        {
                          if (!*(void *)(*(void *)(a1 + 48) + 24) || !CCLogStream::shouldLog()) {
                            goto LABEL_46;
                          }
                          BOOL v65 = *(CCLogStream **)(*(void *)(a1 + 48) + 24);
                        }
                      }
                      else
                      {
                        if (!*(void *)(*(void *)(a1 + 48) + 24) || !CCLogStream::shouldLog()) {
                          goto LABEL_46;
                        }
                        BOOL v65 = *(CCLogStream **)(*(void *)(a1 + 48) + 24);
                      }
                    }
                    else
                    {
                      if (!*(void *)(*(void *)(a1 + 48) + 24) || !CCLogStream::shouldLog()) {
                        goto LABEL_46;
                      }
                      BOOL v65 = *(CCLogStream **)(*(void *)(a1 + 48) + 24);
                    }
                  }
                  else
                  {
                    if (!*(void *)(*(void *)(a1 + 48) + 24) || !CCLogStream::shouldLog()) {
                      goto LABEL_46;
                    }
                    BOOL v65 = *(CCLogStream **)(*(void *)(a1 + 48) + 24);
                  }
                }
                else
                {
                  if (!*(void *)(*(void *)(a1 + 48) + 24) || !CCLogStream::shouldLog()) {
                    goto LABEL_46;
                  }
                  BOOL v65 = *(CCLogStream **)(*(void *)(a1 + 48) + 24);
                }
              }
              else
              {
                if (!*(void *)(*(void *)(a1 + 48) + 24) || !CCLogStream::shouldLog()) {
                  goto LABEL_46;
                }
                BOOL v65 = *(CCLogStream **)(*(void *)(a1 + 48) + 24);
              }
            }
            else
            {
              if (!*(void *)(*(void *)(a1 + 48) + 24) || !CCLogStream::shouldLog()) {
                goto LABEL_46;
              }
              BOOL v65 = *(CCLogStream **)(*(void *)(a1 + 48) + 24);
            }
          }
          else
          {
            if (!*(void *)(*(void *)(a1 + 48) + 24) || !CCLogStream::shouldLog()) {
              goto LABEL_46;
            }
            BOOL v65 = *(CCLogStream **)(*(void *)(a1 + 48) + 24);
          }
        }
        else
        {
          if (!*(void *)(*(void *)(a1 + 48) + 24) || !CCLogStream::shouldLog()) {
            goto LABEL_46;
          }
          BOOL v65 = *(CCLogStream **)(*(void *)(a1 + 48) + 24);
        }
      }
      else
      {
        if (!*(void *)(*(void *)(a1 + 48) + 24) || !CCLogStream::shouldLog()) {
          goto LABEL_46;
        }
        BOOL v65 = *(CCLogStream **)(*(void *)(a1 + 48) + 24);
      }
    }
    else
    {
      if (!*(void *)(*(void *)(a1 + 48) + 24) || !CCLogStream::shouldLog()) {
        goto LABEL_46;
      }
      BOOL v65 = *(CCLogStream **)(*(void *)(a1 + 48) + 24);
    }
LABEL_162:
    CCLogStream::logAlert(v65, "[dk] %s@%d:Fail to allocate keyString\n");
    goto LABEL_46;
  }
  uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
  if (result)
  {
    uint64_t result = CCLogStream::shouldLog();
    if (result) {
      return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:Fail to allocate eventName\n", "sendDynSARStatsEventCoreAnalytics", 258);
    }
  }
  return result;
}

uint64_t AppleBCMWLANTxPowerManager::getDynSARPwrBoostCur(AppleBCMWLANTxPowerManager *this)
{
  return *(unsigned int *)(*((void *)this + 6) + 56);
}

uint64_t AppleBCMWLANTxPowerManager::getDynSARMode(AppleBCMWLANTxPowerManager *this)
{
  return *(unsigned int *)(*((void *)this + 6) + 48);
}

uint64_t AppleBCMWLANTxPowerManager::getDynSARRssiThreshUpper(AppleBCMWLANTxPowerManager *this)
{
  return *(unsigned int *)(*((void *)this + 6) + 120);
}

uint64_t AppleBCMWLANTxPowerManager::resetDynSARLqmRssi(uint64_t this)
{
  *(_DWORD *)(*(void *)(this + 48) + 80)  = 0;
  return this;
}

uint64_t AppleBCMWLANTxPowerManager::updateDynSARCurState(AppleBCMWLANTxPowerManager *this, __int16 a2)
{
  *(_WORD *)(*((void *)this + 6) + 52)  = a2;
  uint64_t result = *(void *)(*((void *)this + 6) + 24);
  if (result)
  {
    uint64_t result = CCLogStream::shouldLog();
    if (result) {
      return CCLogStream::logInfo(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:DynSAR: FW DSA current state update, %d\n", "updateDynSARCurState", 478, *(unsigned __int16 *)(*((void *)this + 6) + 52));
    }
  }
  return result;
}

uint64_t AppleBCMWLANTxPowerManager::updateRssiThreshFromBootArgs(uint64_t this, int *a2, int *a3)
{
  if (a2)
  {
    if (a3)
    {
      int v3 = *a2;
      if ((*a2 + 99) <= 0x58 && *a3 < v3 && *a3 >= -99)
      {
        *(_DWORD *)(*(void *)(this + 48) + 100)  = v3;
        *(_DWORD *)(*(void *)(this + 48) + 104)  = *a2;
        *(_DWORD *)(*(void *)(this + 48) + 108)  = *a3;
        *(_DWORD *)(*(void *)(this + 48) + 112)  = *a3;
      }
    }
  }
  return this;
}

AppleBCMWLANConfigManager *AppleBCMWLANTxPowerManager::getDynSARPwrBoostPerRSSI(AppleBCMWLANTxPowerManager *this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *((void *)this + 6);
  for (uint64_t i = (_DWORD *)(v3 + 100); *i > a2 || *(i - 1) <= a2; i += 2)
  {
    if (++v2 == 3) {
      return 0;
    }
  }
  uint64_t result = *(AppleBCMWLANConfigManager **)(v3 + 8);
  if (result)
  {
    if (v2 == 2)
    {
      uint64_t v6 = (unsigned __int8 *)(AppleBCMWLANConfigManager::getDynSARPwrBoostCtl(result) + 3);
    }
    else if (v2 == 1)
    {
      uint64_t v6 = (unsigned __int8 *)(AppleBCMWLANConfigManager::getDynSARPwrBoostCtl(result) + 2);
    }
    else
    {
      if (v2) {
        return 0;
      }
      uint64_t v6 = (unsigned __int8 *)(AppleBCMWLANConfigManager::getDynSARPwrBoostCtl(result) + 1);
    }
    return (AppleBCMWLANConfigManager *)*v6;
  }
  return result;
}

uint64_t AppleBCMWLANTxPowerManager::getDynSARDurNoOpt(AppleBCMWLANTxPowerManager *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 6) + 4 * a2 + 128);
}

uint64_t AppleBCMWLANTxPowerManager::getDynSARDurPwrOpt(AppleBCMWLANTxPowerManager *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 6) + 4 * a2 + 136);
}

uint64_t AppleBCMWLANTxPowerManager::getDynSARDurFailSafe(AppleBCMWLANTxPowerManager *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 6) + 4 * a2 + 144);
}

uint64_t AppleBCMWLANTxPowerManager::getDynSARDurNoMute(AppleBCMWLANTxPowerManager *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 6) + 4 * a2 + 152);
}

uint64_t AppleBCMWLANTxPowerManager::getDynSARDurHybrid(AppleBCMWLANTxPowerManager *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 6) + 4 * a2 + 160);
}

uint64_t AppleBCMWLANTxPowerManager::getDynSARDurTxDCThrottle(AppleBCMWLANTxPowerManager *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 6) + 4 * a2 + 168);
}

uint64_t AppleBCMWLANTxPowerManager::getDynSARDurPwrOptTxDCThrottle(AppleBCMWLANTxPowerManager *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 6) + 4 * a2 + 176);
}

uint64_t AppleBCMWLANTxPowerManager::getDynSARUpdateCnt(AppleBCMWLANTxPowerManager *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 6) + 4 * a2 + 196);
}

uint64_t AppleBCMWLANTxPowerManager::getDynSARDetailCurId(AppleBCMWLANTxPowerManager *this, int a2)
{
  uint64_t v2 = *((void *)this + 6);
  uint64_t v3 = (unsigned int *)(v2 + 92368);
  uint64_t v4 = (unsigned int *)(v2 + 92372);
  if (!a2) {
    uint64_t v4 = v3;
  }
  return *v4;
}

uint64_t AppleBCMWLANTxPowerManager::getDynSARDetailCircled(AppleBCMWLANTxPowerManager *this, int a2)
{
  uint64_t v2 = *((void *)this + 6);
  uint64_t v3 = (unsigned int *)(v2 + 92376);
  uint64_t v4 = (unsigned int *)(v2 + 92380);
  if (!a2) {
    uint64_t v4 = v3;
  }
  return *v4;
}

uint64_t AppleBCMWLANTxPowerManager::getDynSARDetailReportPerSlicePerAnt(AppleBCMWLANTxPowerManager *this, int a2, unsigned int a3)
{
  uint64_t v3 = *((void *)this + 6) + 11520 * a3;
  uint64_t v4 = v3 + 208;
  uint64_t v5 = v3 + 46288;
  if (a2) {
    return v5;
  }
  else {
    return v4;
  }
}

uint64_t AppleBCMWLANTxPowerManager::handleConfigureDynSARModeAsyncCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(*(void *)(a1 + 48) + 24) && CCLogStream::shouldLog()) {
    CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 24), 0x20uLL, "[dk] %s@%d:TXPWR_PROFILE: Enter %s \n", "handleConfigureDynSARModeAsyncCallback", 618, "handleConfigureDynSARModeAsyncCallback");
  }
  uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
  if (a3)
  {
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v6 = *(void **)(a1 + 48);
        uint64_t v7 = (CCLogStream *)v6[3];
        OSStringPtr v8 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v6 + 112))(*v6, a3);
        return CCLogStream::logAlert(v7, "[dk] %s@%d:DynSAR: Error: Failed to Configure DSA Mode: %s\n", "handleConfigureDynSARModeAsyncCallback", 622, v8);
      }
    }
  }
  else if (result)
  {
    uint64_t result = CCLogStream::shouldLog();
    if (result) {
      return CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 24), 0x20uLL, "[dk] %s@%d:TXPWR_PROFILE: Leave %s \n", "handleConfigureDynSARModeAsyncCallback", 626, "handleConfigureDynSARModeAsyncCallback");
    }
  }
  return result;
}

uint64_t AppleBCMWLANTxPowerManager::handleConfigureTxSDBAsyncCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(*(void *)(a1 + 48) + 24) && CCLogStream::shouldLog()) {
    CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 24), 0x20uLL, "[dk] %s@%d:TXPWR_PROFILE: Enter %s \n", "handleConfigureTxSDBAsyncCallback", 633, "handleConfigureTxSDBAsyncCallback");
  }
  uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
  if (a3)
  {
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v6 = *(void **)(a1 + 48);
        uint64_t v7 = (CCLogStream *)v6[3];
        OSStringPtr v8 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v6 + 112))(*v6, a3);
        return CCLogStream::logAlert(v7, "[dk] %s@%d:TxSDB: Error: Failed to Configure TxSDB Mode: %s\n", "handleConfigureTxSDBAsyncCallback", 637, v8);
      }
    }
  }
  else if (result)
  {
    uint64_t result = CCLogStream::shouldLog();
    if (result) {
      return CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 24), 0x20uLL, "[dk] %s@%d:TXPWR_PROFILE: Leave %s \n", "handleConfigureTxSDBAsyncCallback", 641, "handleConfigureTxSDBAsyncCallback");
    }
  }
  return result;
}

uint64_t AppleBCMWLANTxPowerManager::handleConfigureDynSARPwrBoostAsyncCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(*(void *)(a1 + 48) + 24) && CCLogStream::shouldLog()) {
    CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 24), 0x20uLL, "[dk] %s@%d:TXPWR_PROFILE: Enter %s \n", "handleConfigureDynSARPwrBoostAsyncCallback", 648, "handleConfigureDynSARPwrBoostAsyncCallback");
  }
  uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
  if (a3)
  {
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v6 = *(void **)(a1 + 48);
        uint64_t v7 = (CCLogStream *)v6[3];
        OSStringPtr v8 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v6 + 112))(*v6, a3);
        return CCLogStream::logAlert(v7, "[dk] %s@%d:DynSAR: Error: Failed to Configure DSA Pwr Boost: %s\n", "handleConfigureDynSARPwrBoostAsyncCallback", 652, v8);
      }
    }
  }
  else if (result)
  {
    uint64_t result = CCLogStream::shouldLog();
    if (result) {
      return CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 24), 0x20uLL, "[dk] %s@%d:TXPWR_PROFILE: Leave %s \n", "handleConfigureDynSARPwrBoostAsyncCallback", 656, "handleConfigureDynSARPwrBoostAsyncCallback");
    }
  }
  return result;
}

uint64_t AppleBCMWLANTxPowerManager::handleConfigureDynSAREventAsyncCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(*(void *)(a1 + 48) + 24) && CCLogStream::shouldLog()) {
    CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 24), 0x20uLL, "[dk] %s@%d:TXPWR_PROFILE: Enter %s \n", "handleConfigureDynSAREventAsyncCallback", 663, "handleConfigureDynSAREventAsyncCallback");
  }
  uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
  if (a3)
  {
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v6 = *(void **)(a1 + 48);
        uint64_t v7 = (CCLogStream *)v6[3];
        OSStringPtr v8 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v6 + 112))(*v6, a3);
        return CCLogStream::logAlert(v7, "[dk] %s@%d:DynSAR: Error: Failed to Configure DSA Event: %s\n", "handleConfigureDynSAREventAsyncCallback", 667, v8);
      }
    }
  }
  else if (result)
  {
    uint64_t result = CCLogStream::shouldLog();
    if (result) {
      return CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 24), 0x20uLL, "[dk] %s@%d:TXPWR_PROFILE: Leave %s \n", "handleConfigureDynSAREventAsyncCallback", 671, "handleConfigureDynSAREventAsyncCallback");
    }
  }
  return result;
}

uint64_t AppleBCMWLANTxPowerManager::handleGetDynSARStatusAsyncCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (*(void *)(*(void *)(a1 + 48) + 24) && CCLogStream::shouldLog())
  {
    CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 24), 0x20uLL, "[dk] %s@%d:TXPWR_PROFILE: Enter %s \n", "handleGetDynSARStatusAsyncCallback", 693, "handleGetDynSARStatusAsyncCallback");
    if (a3)
    {
LABEL_4:
      uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          uint64_t v9 = *(void **)(a1 + 48);
          OSNumberPtr v10 = (CCLogStream *)v9[3];
          (*(void (**)(void, uint64_t))(*(void *)*v9 + 112))(*v9, a3);
          return CCLogStream::logAlert(v10, "[dk] %s@%d:DynSAR: Error: Failed to get DynSAR status: %s\n");
        }
      }
      return result;
    }
  }
  else if (a3)
  {
    goto LABEL_4;
  }
  OSStringPtr v8 = (_WORD *)*a4;
  if (*a4)
  {
    if (*v8 == 8)
    {
      if (v8[4] == 3)
      {
        AppleBCMWLANTxPowerManager::dumpDynSARStatusV3(a1, *a4);
        uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
        if (result)
        {
          uint64_t result = CCLogStream::shouldLog();
          if (result) {
            return CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 24), 0x20uLL, "[dk] %s@%d:TXPWR_PROFILE: Leave %s \n", "handleGetDynSARStatusAsyncCallback", 722, "handleGetDynSARStatusAsyncCallback");
          }
        }
      }
      else
      {
        uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
        if (result)
        {
          uint64_t result = CCLogStream::shouldLog();
          if (result) {
            return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Invalid version for DynSAR status response\n");
          }
        }
      }
    }
    else
    {
      uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result) {
          return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Sub Command ID mismatch, input %d, output %d\n");
        }
      }
    }
  }
  else
  {
    uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result) {
        return CCLogStream::logNotice(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: No valid data\n", "handleGetDynSARStatusAsyncCallback", 702);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANTxPowerManager::dumpDynSARStatusV3(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  if (*(void *)(v4 + 24))
  {
    int shouldLog = CCLogStream::shouldLog();
    uint64_t v4 = *(void *)(a1 + 48);
    if (shouldLog)
    {
      CCLogStream::logInfo(*(CCLogStream **)(v4 + 24), "[dk] %s@%d:DynSAR: Slice %d Mode %d power offset %d(dB)\n", "dumpDynSARStatusV3", 1556, *(unsigned __int8 *)(a2 + 12), *(unsigned __int8 *)(a2 + 13), *(unsigned __int8 *)(a2 + 19));
      uint64_t v4 = *(void *)(a1 + 48);
    }
  }
  if (*(void *)(v4 + 24))
  {
    int v6 = CCLogStream::shouldLog();
    uint64_t v4 = *(void *)(a1 + 48);
    if (v6)
    {
      CCLogStream::logInfo(*(CCLogStream **)(v4 + 24), "[dk] %s@%d:DynSAR: Prediction: Util Threshold %d%% Opt Txdc %d%% Dur %d\n", "dumpDynSARStatusV3", 1559, *(unsigned __int8 *)(a2 + 14), *(unsigned __int8 *)(a2 + 15), *(unsigned __int8 *)(a2 + 16));
      uint64_t v4 = *(void *)(a1 + 48);
    }
  }
  if (*(void *)(v4 + 24))
  {
    int v7 = CCLogStream::shouldLog();
    uint64_t v4 = *(void *)(a1 + 48);
    if (v7)
    {
      if (*(unsigned char *)(a2 + 17)) {
        OSNumberPtr v32 = "On";
      }
      else {
        OSNumberPtr v32 = "Off";
      }
      CCLogStream::logInfo(*(CCLogStream **)(v4 + 24), "[dk] %s@%d:DynSAR: Event report %s\n", "dumpDynSARStatusV3", 1560, v32);
      uint64_t v4 = *(void *)(a1 + 48);
    }
  }
  if (*(void *)(v4 + 24))
  {
    int v8 = CCLogStream::shouldLog();
    uint64_t v4 = *(void *)(a1 + 48);
    if (v8)
    {
      if (*(unsigned char *)(a2 + 18)) {
        OSStringPtr v33 = "On";
      }
      else {
        OSStringPtr v33 = "Off";
      }
      CCLogStream::logInfo(*(CCLogStream **)(v4 + 24), "[dk] %s@%d:DynSAR: Time sync %s\n", "dumpDynSARStatusV3", 1561, v33);
      uint64_t v4 = *(void *)(a1 + 48);
    }
  }
  if (*(void *)(v4 + 24))
  {
    int v9 = CCLogStream::shouldLog();
    uint64_t v4 = *(void *)(a1 + 48);
    if (v9)
    {
      CCLogStream::logInfo(*(CCLogStream **)(v4 + 24), "[dk] %s@%d:DynSAR: Variance thresh limit %d, hysterisis offset %d\n", "dumpDynSARStatusV3", 1562, *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28));
      uint64_t v4 = *(void *)(a1 + 48);
    }
  }
  if (*(void *)(v4 + 24))
  {
    int v10 = CCLogStream::shouldLog();
    uint64_t v4 = *(void *)(a1 + 48);
    if (v10)
    {
      CCLogStream::logInfo(*(CCLogStream **)(v4 + 24), "[dk] %s@%d:DynSAR: Error 0x%x\n", "dumpDynSARStatusV3", 1563, *(unsigned __int8 *)(a2 + 22));
      uint64_t v4 = *(void *)(a1 + 48);
    }
  }
  if (*(unsigned char *)(a2 + 22))
  {
    if (*(void *)(v4 + 24))
    {
      int v11 = CCLogStream::shouldLog();
      uint64_t v4 = *(void *)(a1 + 48);
      if (v11)
      {
        CCLogStream::logAlert(*(CCLogStream **)(v4 + 24), "[dk] %s@%d:DynSAR: Error (NO TXCAP)\n", "dumpDynSARStatusV3", 1565);
        uint64_t v4 = *(void *)(a1 + 48);
      }
    }
  }
  if ((*(unsigned char *)(a2 + 22) & 2) != 0)
  {
    if (*(void *)(v4 + 24))
    {
      int v12 = CCLogStream::shouldLog();
      uint64_t v4 = *(void *)(a1 + 48);
      if (v12)
      {
        CCLogStream::logAlert(*(CCLogStream **)(v4 + 24), "[dk] %s@%d:DynSAR: Error (NO CLM)\n", "dumpDynSARStatusV3", 1567);
        uint64_t v4 = *(void *)(a1 + 48);
      }
    }
  }
  if ((*(unsigned char *)(a2 + 22) & 4) != 0)
  {
    if (*(void *)(v4 + 24))
    {
      int v13 = CCLogStream::shouldLog();
      uint64_t v4 = *(void *)(a1 + 48);
      if (v13)
      {
        CCLogStream::logAlert(*(CCLogStream **)(v4 + 24), "[dk] %s@%d:DynSAR: Error (NO TDMTX)\n", "dumpDynSARStatusV3", 1569);
        uint64_t v4 = *(void *)(a1 + 48);
      }
    }
  }
  if ((*(unsigned char *)(a2 + 22) & 8) != 0)
  {
    if (*(void *)(v4 + 24))
    {
      int v14 = CCLogStream::shouldLog();
      uint64_t v4 = *(void *)(a1 + 48);
      if (v14)
      {
        CCLogStream::logAlert(*(CCLogStream **)(v4 + 24), "[dk] %s@%d:DynSAR: Error (DynSAR Violation)\n", "dumpDynSARStatusV3", 1571);
        uint64_t v4 = *(void *)(a1 + 48);
      }
    }
  }
  if ((*(unsigned char *)(a2 + 22) & 0x10) != 0)
  {
    if (*(void *)(v4 + 24))
    {
      int v15 = CCLogStream::shouldLog();
      uint64_t v4 = *(void *)(a1 + 48);
      if (v15)
      {
        CCLogStream::logAlert(*(CCLogStream **)(v4 + 24), "[dk] %s@%d:DynSAR: Error (DynSAR Ant Num Mismatch)\n", "dumpDynSARStatusV3", 1573);
        uint64_t v4 = *(void *)(a1 + 48);
      }
    }
  }
  if ((*(unsigned char *)(a2 + 22) & 0x20) != 0)
  {
    if (*(void *)(v4 + 24))
    {
      int v16 = CCLogStream::shouldLog();
      uint64_t v4 = *(void *)(a1 + 48);
      if (v16)
      {
        CCLogStream::logAlert(*(CCLogStream **)(v4 + 24), "[dk] %s@%d:DynSAR: Error (DynSAR country disabled)\n", "dumpDynSARStatusV3", 1575);
        uint64_t v4 = *(void *)(a1 + 48);
      }
    }
  }
  if (*(void *)(v4 + 24))
  {
    int v17 = CCLogStream::shouldLog();
    uint64_t v4 = *(void *)(a1 + 48);
    if (v17)
    {
      CCLogStream::logInfo(*(CCLogStream **)(v4 + 24), "[dk] %s@%d:DynSAR: GPIO Pin %d\n", "dumpDynSARStatusV3", 1577, *(unsigned __int8 *)(a2 + 23));
      uint64_t v4 = *(void *)(a1 + 48);
    }
  }
  if (*(void *)(v4 + 24))
  {
    int v18 = CCLogStream::shouldLog();
    uint64_t v4 = *(void *)(a1 + 48);
    if (v18)
    {
      CCLogStream::logInfo(*(CCLogStream **)(v4 + 24), "[dk] %s@%d:DynSAR: Status 0x%x\n", "dumpDynSARStatusV3", 1578, *(unsigned __int8 *)(a2 + 21));
      uint64_t v4 = *(void *)(a1 + 48);
    }
  }
  if (*(unsigned char *)(a2 + 21))
  {
    if (*(void *)(v4 + 24))
    {
      int v19 = CCLogStream::shouldLog();
      uint64_t v4 = *(void *)(a1 + 48);
      if (v19)
      {
        CCLogStream::logInfo(*(CCLogStream **)(v4 + 24), "[dk] %s@%d:DynSAR: Status (Power Optimized)\n", "dumpDynSARStatusV3", 1580);
        uint64_t v4 = *(void *)(a1 + 48);
      }
    }
  }
  if ((*(unsigned char *)(a2 + 21) & 2) != 0)
  {
    if (*(void *)(v4 + 24))
    {
      int v20 = CCLogStream::shouldLog();
      uint64_t v4 = *(void *)(a1 + 48);
      if (v20)
      {
        CCLogStream::logInfo(*(CCLogStream **)(v4 + 24), "[dk] %s@%d:DynSAR: Status (Failsafe)\n", "dumpDynSARStatusV3", 1582);
        uint64_t v4 = *(void *)(a1 + 48);
      }
    }
  }
  if ((*(unsigned char *)(a2 + 21) & 4) != 0)
  {
    if (*(void *)(v4 + 24))
    {
      int v21 = CCLogStream::shouldLog();
      uint64_t v4 = *(void *)(a1 + 48);
      if (v21)
      {
        CCLogStream::logInfo(*(CCLogStream **)(v4 + 24), "[dk] %s@%d:DynSAR: Status (No ACK Mute Optimized)\n", "dumpDynSARStatusV3", 1584);
        uint64_t v4 = *(void *)(a1 + 48);
      }
    }
  }
  if ((*(unsigned char *)(a2 + 21) & 8) != 0)
  {
    if (*(void *)(v4 + 24))
    {
      int v22 = CCLogStream::shouldLog();
      uint64_t v4 = *(void *)(a1 + 48);
      if (v22)
      {
        CCLogStream::logInfo(*(CCLogStream **)(v4 + 24), "[dk] %s@%d:DynSAR: Status (TxDC Limit)\n", "dumpDynSARStatusV3", 1586);
        uint64_t v4 = *(void *)(a1 + 48);
      }
    }
  }
  if (*(void *)(v4 + 24))
  {
    int v23 = CCLogStream::shouldLog();
    uint64_t v4 = *(void *)(a1 + 48);
    if (v23)
    {
      CCLogStream::logInfo(*(CCLogStream **)(v4 + 24), "[dk] %s@%d:DynSAR: Antenna number: %d\n", "dumpDynSARStatusV3", 1587, *(unsigned __int8 *)(a2 + 20));
      uint64_t v4 = *(void *)(a1 + 48);
    }
  }
  uint64_t result = *(void *)(v4 + 24);
  if (result)
  {
    uint64_t result = CCLogStream::shouldLog();
    if (result) {
      uint64_t result = CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Aggregation index:\n", "dumpDynSARStatusV3", 1588);
    }
  }
  int v25 = (__int16)(*(_WORD *)(a2 + 10) - 24);
  if (v25 >= 5)
  {
    OSNumberPtr v26 = (unsigned __int16 *)(a2 + 32);
    while ((v26 & 3) == 0)
    {
      uint64_t v27 = v26[1];
      if ((__int16)v25 < (__int16)(v27 + 4))
      {
        uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
        if (result)
        {
          uint64_t result = CCLogStream::shouldLog();
          if (result) {
            return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:Error: remaining_len = %d, xtlvunint64_t Length = %d\n");
          }
        }
        return result;
      }
      int v28 = *v26;
      if (v28 != 2)
      {
        if (v28 == 1)
        {
          if (v26[1])
          {
            uint64_t v29 = 0;
            do
            {
              uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
              if (result)
              {
                uint64_t result = CCLogStream::shouldLog();
                if (result) {
                  uint64_t result = CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Ant%d: %d\n", "dumpDynSARStatusV3", 1605, v29, *((unsigned __int8 *)v26 + v29 + 4));
                }
              }
              ++v29;
            }
            while (v27 != v29);
          }
        }
        else
        {
          uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
          if (result)
          {
            uint64_t result = CCLogStream::shouldLog();
            if (result) {
              uint64_t result = CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:Invalid tag id %d\n", "dumpDynSARStatusV3", 1614, v28);
            }
          }
        }
      }
      unsigned __int16 v30 = (v27 & 0xFFFC) + 4;
      if ((v27 & 3) == 0) {
        unsigned __int16 v30 = v27;
      }
      uint64_t v31 = v30 + 4;
      int v25 = (__int16)(v25 - v31);
      OSNumberPtr v26 = (unsigned __int16 *)((char *)v26 + v31);
      if (v25 <= 4) {
        return result;
      }
    }
    uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result) {
        return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:xtlvPtr alignment failure\n");
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANTxPowerManager::handleDynSAREventToPopulateUnsharedTxDCUtilAsyncCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
  if (result && (uint64_t result = CCLogStream::shouldLog(), result))
  {
    uint64_t result = CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 24), 0x20uLL, "[dk] %s@%d:TXPWR_PROFILE: Enter %s \n", "handleDynSAREventToPopulateUnsharedTxDCUtilAsyncCallback", 837, "handleDynSAREventToPopulateUnsharedTxDCUtilAsyncCallback");
    if (a3)
    {
LABEL_4:
      uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          OSStringPtr v45 = *(void **)(a1 + 48);
          OSNumberPtr v46 = (CCLogStream *)v45[3];
          (*(void (**)(void, uint64_t))(*(void *)*v45 + 112))(*v45, a3);
          return CCLogStream::logAlert(v46, "[dk] %s@%d:DynSAR: Error: Failed to get DynSAR summary unshared TxDC and Util: %s\n");
        }
      }
      return result;
    }
  }
  else if (a3)
  {
    goto LABEL_4;
  }
  uint64_t v10 = *a4;
  if (v10)
  {
    if (*(_WORD *)v10 == 3)
    {
      int v12 = (unsigned __int16 *)(v10 + 8);
      int v11 = *(unsigned __int16 *)(v10 + 8);
      BOOL v13 = v11 == 4 || v11 == 2;
      if (!v13 || *(unsigned char *)(v10 + 35) != 2 || *(unsigned __int8 *)(v10 + 36) >= 9u)
      {
        uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
        if (result)
        {
          uint64_t result = CCLogStream::shouldLog();
          if (result) {
            return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Invalid version or fields for DynSAR summary response\n");
          }
        }
        return result;
      }
      if (v11 == 4)
      {
        uint64_t v15 = *(unsigned __int8 *)(v10 + 38);
        if (v15 + 16 * (unint64_t)*(unsigned __int8 *)(v10 + 32) > *(unsigned __int16 *)(v10 + 10))
        {
          uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
          if (result)
          {
            uint64_t result = CCLogStream::shouldLog();
            if (result) {
              return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Invalid FW length detected for DYNSAR_CNT_VERSION_V4!\n");
            }
          }
          return result;
        }
        int v16 = 0;
        int v17 = (char *)v12 + v15;
      }
      else if (v11 == 2)
      {
        uint64_t v14 = *(unsigned __int8 *)(v10 + 38);
        if (v14 + 24 * (unint64_t)*(unsigned __int8 *)(v10 + 32) > *(unsigned __int16 *)(v10 + 10))
        {
          uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
          if (result)
          {
            uint64_t result = CCLogStream::shouldLog();
            if (result) {
              return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Invalid FW length detected for DYNSAR_CNT_VERSION_V2!\n");
            }
          }
          return result;
        }
        int v17 = 0;
        int v16 = (char *)v12 + v14;
      }
      else
      {
        uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
        if (result)
        {
          uint64_t result = CCLogStream::shouldLog();
          if (result) {
            uint64_t result = CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Dynamic SAR Summary invalid version\n", "handleDynSAREventToPopulateUnsharedTxDCUtilAsyncCallback", 884);
          }
        }
        int v16 = 0;
        int v17 = 0;
      }
      if (!*(_DWORD *)(v10 + 12)) {
        return result;
      }
      unsigned int v18 = *(unsigned __int8 *)(v10 + 32);
      if (*(unsigned char *)(v10 + 32))
      {
        unsigned int v19 = 0;
        do
        {
          uint64_t v20 = v19 + *a5 * v18;
          int v21 = *v12;
          if (v21 == 4)
          {
            if (v19 == 2)
            {
              unint64_t v32 = *(unsigned int *)(v10 + 12);
              if (v32) {
                unint64_t v33 = 100 * (unint64_t)*(unsigned int *)&v17[8 * v20] / v32;
              }
              else {
                LOBYTE(v3AppleBCMWLANWnmAdapter::free(this - 3) = 0;
              }
              *((unsigned char *)a5 + 72)  = v33;
              *((unsigned char *)a5 + 7AppleBCMWLANWnmAdapter::free(this - 3) = *(_WORD *)&v17[8 * v20 + 4] / 0xAu;
            }
            else if (v19 == 1)
            {
              unint64_t v34 = *(unsigned int *)(v10 + 12);
              if (v34) {
                unint64_t v35 = 100 * (unint64_t)*(unsigned int *)&v17[8 * v20] / v34;
              }
              else {
                LOBYTE(v35)  = 0;
              }
              *((unsigned char *)a5 + 70)  = v35;
              *((unsigned char *)a5 + 71)  = *(_WORD *)&v17[8 * v20 + 4] / 0xAu;
            }
            else if (v19)
            {
              unint64_t v36 = *(unsigned int *)(v10 + 12);
              if (v36) {
                unint64_t v37 = 100 * (unint64_t)*(unsigned int *)&v17[8 * v20] / v36;
              }
              else {
                LOBYTE(v37)  = 0;
              }
              *((unsigned char *)a5 + 74)  = v37;
              *((unsigned char *)a5 + 75)  = *(_WORD *)&v17[8 * v20 + 4] / 0xAu;
            }
            else
            {
              unint64_t v24 = *(unsigned int *)(v10 + 12);
              if (v24) {
                unint64_t v25 = 100 * (unint64_t)*(unsigned int *)&v17[8 * v20] / v24;
              }
              else {
                LOBYTE(v25)  = 0;
              }
              *((unsigned char *)a5 + 68)  = v25;
              *((unsigned char *)a5 + 69)  = *(_WORD *)&v17[8 * v20 + 4] / 0xAu;
            }
          }
          else if (v21 == 2)
          {
            if (v19 == 2)
            {
              unint64_t v26 = *(unsigned int *)(v10 + 12);
              if (v26) {
                unint64_t v27 = 100 * (unint64_t)*(unsigned int *)&v16[12 * v20 + 8] / v26;
              }
              else {
                LOBYTE(v27)  = 0;
              }
              *((unsigned char *)a5 + 72)  = v27;
              *((unsigned char *)a5 + 7AppleBCMWLANWnmAdapter::free(this - 3) = 100
                                  * (unint64_t)*(unsigned int *)&v16[12 * v20 + 4]
                                  / *(unsigned int *)&v16[12 * v20];
            }
            else if (v19 == 1)
            {
              unint64_t v28 = *(unsigned int *)(v10 + 12);
              if (v28) {
                unint64_t v29 = 100 * (unint64_t)*(unsigned int *)&v16[12 * v20 + 8] / v28;
              }
              else {
                LOBYTE(v29)  = 0;
              }
              *((unsigned char *)a5 + 70)  = v29;
              *((unsigned char *)a5 + 71)  = 100
                                  * (unint64_t)*(unsigned int *)&v16[12 * v20 + 4]
                                  / *(unsigned int *)&v16[12 * v20];
            }
            else if (v19)
            {
              unint64_t v30 = *(unsigned int *)(v10 + 12);
              if (v30) {
                unint64_t v31 = 100 * (unint64_t)*(unsigned int *)&v16[12 * v20 + 8] / v30;
              }
              else {
                LOBYTE(v31)  = 0;
              }
              *((unsigned char *)a5 + 74)  = v31;
              *((unsigned char *)a5 + 75)  = 100
                                  * (unint64_t)*(unsigned int *)&v16[12 * v20 + 4]
                                  / *(unsigned int *)&v16[12 * v20];
            }
            else
            {
              unint64_t v22 = *(unsigned int *)(v10 + 12);
              if (v22) {
                unint64_t v23 = 100 * (unint64_t)*(unsigned int *)&v16[12 * v20 + 8] / v22;
              }
              else {
                LOBYTE(v2AppleBCMWLANWnmAdapter::free(this - 3) = 0;
              }
              *((unsigned char *)a5 + 68)  = v23;
              *((unsigned char *)a5 + 69)  = 100
                                  * (unint64_t)*(unsigned int *)&v16[12 * v20 + 4]
                                  / *(unsigned int *)&v16[12 * v20];
            }
          }
          else if (*(void *)(*(void *)(a1 + 48) + 24) && CCLogStream::shouldLog())
          {
            CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Dynamic SAR Summary invalid version\n", "handleDynSAREventToPopulateUnsharedTxDCUtilAsyncCallback", 936);
          }
          ++v19;
          unsigned int v18 = *(unsigned __int8 *)(v10 + 32);
        }
        while (v19 < v18);
      }
      if (!AppleBCMWLANCore::getIOReporterPerSlice(**(AppleBCMWLANCore ***)(a1 + 48))) {
        goto LABEL_110;
      }
      int v38 = *((unsigned __int16 *)a5 + 32);
      int v39 = *((unsigned __int8 *)a5 + 80);
      IOReporterPerSlice  = (AppleBCMWLANBssManager *)AppleBCMWLANCore::getIOReporterPerSlice(**(AppleBCMWLANCore ***)(a1 + 48));
      int v41 = AppleBCMWLANIOReportingPerSlice::reportDSA(IOReporterPerSlice, *a5, (uint64_t)a5);
      AppleBCMWLANTxPowerManager::sendDynSARStatsEventCoreAnalytics(a1, (uint64_t)a5);
      IOFree(a5, 0x58uLL);
      if (!v41)
      {
        if (v38 != 2 || !v39)
        {
LABEL_110:
          uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
          if (result)
          {
            uint64_t result = CCLogStream::shouldLog();
            if (result) {
              return CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 24), 0x20uLL, "[dk] %s@%d:TXPWR_PROFILE: Leave %s \n", "handleDynSAREventToPopulateUnsharedTxDCUtilAsyncCallback", 966, "handleDynSAREventToPopulateUnsharedTxDCUtilAsyncCallback");
            }
          }
          return result;
        }
        if (*(void *)(*(void *)(a1 + 48) + 24) && CCLogStream::shouldLog())
        {
          CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Fail Safe Mode Reported in DSA Event. Trigger CoreCapture with fail safe reason code %d\n", "handleDynSAREventToPopulateUnsharedTxDCUtilAsyncCallback", 952, v39);
          if ((v39 & 1) == 0)
          {
LABEL_96:
            if ((v39 & 2) != 0)
            {
              OSStringPtr v42 = *(CCFaultReporter **)(*(void *)(a1 + 48) + 32);
              int v43 = -469789950;
              unsigned int v44 = 956;
            }
            else if ((v39 & 4) != 0)
            {
              OSStringPtr v42 = *(CCFaultReporter **)(*(void *)(a1 + 48) + 32);
              int v43 = -469789949;
              unsigned int v44 = 958;
            }
            else
            {
              OSStringPtr v42 = *(CCFaultReporter **)(*(void *)(a1 + 48) + 32);
              if ((v39 & 8) != 0)
              {
                int v43 = -469789948;
                unsigned int v44 = 960;
              }
              else
              {
                int v43 = -469789947;
                unsigned int v44 = 962;
              }
            }
            goto LABEL_109;
          }
        }
        else if ((v39 & 1) == 0)
        {
          goto LABEL_96;
        }
        OSStringPtr v42 = *(CCFaultReporter **)(*(void *)(a1 + 48) + 32);
        unsigned int v44 = 954;
        int v43 = -469789951;
LABEL_109:
        CCFaultReporter::reportFault(v42, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANTxPowerManager.cpp", v44, "handleDynSAREventToPopulateUnsharedTxDCUtilAsyncCallback", 0, v43, 0);
        goto LABEL_110;
      }
      uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result) {
          return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:Error parsing reportDSA\n");
        }
      }
    }
    else
    {
      uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result) {
          return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Sub Command ID mismatch, input %d, output %d\n");
        }
      }
    }
  }
  else
  {
    uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result) {
        return CCLogStream::logNotice(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: No valid data\n", "handleDynSAREventToPopulateUnsharedTxDCUtilAsyncCallback", 846);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANTxPowerManager::handleGetDynSARAggStatsAsyncCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(*(void *)(a1 + 48) + 24) && CCLogStream::shouldLog())
  {
    CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 24), 0x20uLL, "[dk] %s@%d:TXPWR_PROFILE: Enter %s \n", "handleGetDynSARAggStatsAsyncCallback", 976, "handleGetDynSARAggStatsAsyncCallback");
    if (a3)
    {
LABEL_4:
      uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          unint64_t v27 = *(void **)(a1 + 48);
          unint64_t v28 = (CCLogStream *)v27[3];
          (*(void (**)(void, uint64_t))(*(void *)*v27 + 112))(*v27, a3);
          return CCLogStream::logAlert(v28, "[dk] %s@%d:DynSAR: Error: Failed to get DynSAR Aggregated Stats: %s\n");
        }
      }
      return result;
    }
  }
  else if (a3)
  {
    goto LABEL_4;
  }
  int v8 = *(_WORD **)a4;
  if (*(void *)a4)
  {
    if (*(unsigned __int16 *)(a4 + 8) > 0xFu)
    {
      if (*v8 == 11)
      {
        *(_OWORD *)__dst  = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        *(_OWORD *)__str  = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        uint64_t v9 = 8 * (unsigned __int16)v8[5];
        if (((v9 * 2 + (v9 * 2) * (unint64_t)(unsigned __int16)v8[6]) | 8) <= (unsigned __int16)v8[1])
        {
          if ((unsigned __int16)v8[6] < 5u)
          {
            uint64_t v10 = *(void *)(a1 + 48);
            if (*(void *)(v10 + 24))
            {
              int shouldLog = CCLogStream::shouldLog();
              uint64_t v10 = *(void *)(a1 + 48);
              if (shouldLog)
              {
                CCLogStream::logInfo(*(CCLogStream **)(v10 + 24), "[dk] %s@%d:DynSAR: Ux: Tmon Utilization at aggregated index x\n", "handleGetDynSARAggStatsAsyncCallback", 1024);
                uint64_t v10 = *(void *)(a1 + 48);
              }
            }
            if (*(void *)(v10 + 24))
            {
              int v12 = CCLogStream::shouldLog();
              uint64_t v10 = *(void *)(a1 + 48);
              if (v12)
              {
                CCLogStream::logInfo(*(CCLogStream **)(v10 + 24), "[dk] %s@%d:DynSAR: Umx: Mean of Ux over Twin\n", "handleGetDynSARAggStatsAsyncCallback", 1025);
                uint64_t v10 = *(void *)(a1 + 48);
              }
            }
            if (*(void *)(v10 + 24) && CCLogStream::shouldLog()) {
              CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Vx: Variance of Ux over Twin\n", "handleGetDynSARAggStatsAsyncCallback", 1026);
            }
            snprintf(__str, 0x80uLL, "DynSAR: id %10s %4s ", "Ts", "Opt");
            strlcat(__dst, __str, 0x100uLL);
            *(_OWORD *)__str  = 0u;
            long long v31 = 0u;
            long long v32 = 0u;
            long long v33 = 0u;
            long long v34 = 0u;
            long long v35 = 0u;
            long long v36 = 0u;
            long long v37 = 0u;
            if (v8[6])
            {
              unsigned int v13 = 0;
              do
              {
                snprintf(__str, 0x80uLL, "%2s%u %2s%u %5s%u ", "U", v13, "Um", v13, "V", v13);
                strlcat(__dst, __str, 0x100uLL);
                *(_OWORD *)__str  = 0u;
                long long v31 = 0u;
                long long v32 = 0u;
                long long v33 = 0u;
                long long v34 = 0u;
                long long v35 = 0u;
                long long v36 = 0u;
                long long v37 = 0u;
                ++v13;
              }
              while (v13 < (unsigned __int16)v8[6]);
            }
            if (*(void *)(*(void *)(a1 + 48) + 24) && CCLogStream::shouldLog()) {
              CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:%s\n", "handleGetDynSARAggStatsAsyncCallback", 1035, __dst);
            }
            long long v52 = 0u;
            long long v53 = 0u;
            long long v50 = 0u;
            long long v51 = 0u;
            long long v48 = 0u;
            long long v49 = 0u;
            long long v46 = 0u;
            long long v47 = 0u;
            long long v44 = 0u;
            long long v45 = 0u;
            long long v42 = 0u;
            long long v43 = 0u;
            long long v40 = 0u;
            long long v41 = 0u;
            *(_OWORD *)__dst  = 0u;
            long long v39 = 0u;
            if (v8[5])
            {
              unint64_t v14 = 0;
              int v15 = 0;
              do
              {
                uint64_t v16 = (uint64_t)&v8[8 * v14 + 8];
                uint64_t v17 = *(void *)(v16 + 8);
                char v18 = *(unsigned char *)v16;
                uint64_t v19 = 84;
                if ((v18 & 8) == 0) {
                  uint64_t v19 = 46;
                }
                uint64_t v20 = 77;
                if ((v18 & 4) == 0) {
                  uint64_t v20 = 46;
                }
                uint64_t v29 = v19;
                uint64_t v21 = 70;
                if ((v18 & 2) == 0) {
                  uint64_t v21 = 46;
                }
                BOOL v22 = (v18 & 1) == 0;
                uint64_t v23 = 80;
                if (v22) {
                  uint64_t v23 = 46;
                }
                snprintf(__str, 0x80uLL, "DynSAR: %2u %10llu %c%c%c%c ", v14, v17, v23, v21, v20, v29);
                strlcat(__dst, __str, 0x100uLL);
                long long v24 = 0uLL;
                *(_OWORD *)__str  = 0u;
                long long v31 = 0u;
                long long v32 = 0u;
                long long v33 = 0u;
                long long v34 = 0u;
                long long v35 = 0u;
                long long v36 = 0u;
                long long v37 = 0u;
                if (v8[6])
                {
                  unsigned int v25 = 0;
                  do
                  {
                    snprintf(__str, 0x80uLL, "%3u %3u %6u ", *(_DWORD *)&v8[8 * v15 + 8 + 8 * v25 + v9], *(_DWORD *)&v8[8 * v15 + 12 + 8 * v25 + v9], *(_DWORD *)&v8[8 * v15 + 14 + 8 * v25 + v9]);
                    strlcat(__dst, __str, 0x100uLL);
                    long long v24 = 0uLL;
                    *(_OWORD *)__str  = 0u;
                    long long v31 = 0u;
                    long long v32 = 0u;
                    long long v33 = 0u;
                    long long v34 = 0u;
                    long long v35 = 0u;
                    long long v36 = 0u;
                    long long v37 = 0u;
                    ++v25;
                  }
                  while (v25 < (unsigned __int16)v8[6]);
                  v15 += v25;
                }
                if (*(void *)(*(void *)(a1 + 48) + 24))
                {
                  int v26 = CCLogStream::shouldLog();
                  long long v24 = 0uLL;
                  if (v26)
                  {
                    CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:%s\n", "handleGetDynSARAggStatsAsyncCallback", 1050, __dst);
                    long long v24 = 0uLL;
                  }
                }
                long long v52 = v24;
                long long v53 = v24;
                long long v50 = v24;
                long long v51 = v24;
                long long v48 = v24;
                long long v49 = v24;
                long long v46 = v24;
                long long v47 = v24;
                long long v44 = v24;
                long long v45 = v24;
                long long v42 = v24;
                long long v43 = v24;
                long long v40 = v24;
                long long v41 = v24;
                *(_OWORD *)__dst  = v24;
                long long v39 = v24;
                ++v14;
              }
              while (v14 < (unsigned __int16)v8[5]);
            }
            uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
            if (result)
            {
              uint64_t result = CCLogStream::shouldLog();
              if (result) {
                return CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 24), 0x20uLL, "[dk] %s@%d:TXPWR_PROFILE: Leave %s \n", "handleGetDynSARAggStatsAsyncCallback", 1054, "handleGetDynSARAggStatsAsyncCallback");
              }
            }
          }
          else
          {
            uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
            if (result)
            {
              uint64_t result = CCLogStream::shouldLog();
              if (result) {
                return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Error, invalid number of aggregated antenna %d, max is %d\n");
              }
            }
          }
        }
        else
        {
          uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
          if (result)
          {
            uint64_t result = CCLogStream::shouldLog();
            if (result) {
              return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Error, invalid data length  %d\n");
            }
          }
        }
      }
      else
      {
        uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
        if (result)
        {
          uint64_t result = CCLogStream::shouldLog();
          if (result) {
            return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Sub Command ID mismatch, input %d, output %d\n");
          }
        }
      }
    }
    else
    {
      uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result) {
          return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Error, invalid rxPayload length %d\n");
        }
      }
    }
  }
  else
  {
    uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result) {
        return CCLogStream::logNotice(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: No valid data\n", "handleGetDynSARAggStatsAsyncCallback", 985);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANTxPowerManager::handleGetDynSARDetailAsyncCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = a1;
  if (*(void *)(*(void *)(a1 + 48) + 24) && (int shouldLog = CCLogStream::shouldLog(), v6 = a1, shouldLog))
  {
    CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 24), 0x20uLL, "[dk] %s@%d:TXPWR_PROFILE: Enter %s \n", "handleGetDynSARDetailAsyncCallback", 1061, "handleGetDynSARDetailAsyncCallback");
    uint64_t v6 = a1;
    if (a3)
    {
LABEL_4:
      uint64_t result = *(void *)(*(void *)(v6 + 48) + 24);
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          long long v39 = *(void **)(a1 + 48);
          long long v40 = (CCLogStream *)v39[3];
          (*(void (**)(void, uint64_t))(*(void *)*v39 + 112))(*v39, a3);
          return CCLogStream::logAlert(v40, "[dk] %s@%d:DynSAR: Error: Failed to get DynSAR Details: %s\n");
        }
      }
      return result;
    }
  }
  else if (a3)
  {
    goto LABEL_4;
  }
  uint64_t v9 = *a4;
  if (*a4)
  {
    uint64_t v10 = *(void *)(v6 + 48);
    uint64_t result = *(void *)(v10 + 24);
    if (*(_WORD *)v9 == 4)
    {
      if (result)
      {
        int v11 = CCLogStream::shouldLog();
        uint64_t v6 = a1;
        uint64_t v10 = *(void *)(a1 + 48);
        if (v11)
        {
          CCLogStream::logInfo(*(CCLogStream **)(v10 + 24), "[dk] %s@%d:DynSAR: Details, slice %u monitor periods %u first sync %llu\n", "handleGetDynSARDetailAsyncCallback", 1086, *(unsigned __int8 *)(v9 + 14), *(unsigned __int8 *)(v9 + 13), *(void *)(v9 + 16));
          uint64_t v6 = a1;
          uint64_t v10 = *(void *)(a1 + 48);
        }
      }
      if (*(void *)(v10 + 24))
      {
        int v12 = CCLogStream::shouldLog();
        uint64_t v6 = a1;
        if (v12)
        {
          CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: P - Power optimization, M - no frame mute, F - Failsafe mode, T - Tx dutycycle limit\n", "handleGetDynSARDetailAsyncCallback", 1087);
          uint64_t v6 = a1;
        }
      }
      if (*(unsigned char *)(v9 + 13))
      {
        unint64_t v13 = 0;
        unint64_t v14 = (void *)(v9 + 32);
        do
        {
          if (*v14)
          {
            if (*((_DWORD *)v14 - 1))
            {
              if (*(void *)(*(void *)(v6 + 48) + 24))
              {
                int v15 = CCLogStream::shouldLog();
                uint64_t v6 = a1;
                if (v15)
                {
                  if ((*(unsigned char *)(v14 - 1) & 8) != 0) {
                    uint64_t v16 = 84;
                  }
                  else {
                    uint64_t v16 = 46;
                  }
                  uint64_t v43 = v16;
                  if ((*(unsigned char *)(v14 - 1) & 4) != 0) {
                    uint64_t v17 = 77;
                  }
                  else {
                    uint64_t v17 = 46;
                  }
                  if ((*(unsigned char *)(v14 - 1) & 2) != 0) {
                    uint64_t v18 = 70;
                  }
                  else {
                    uint64_t v18 = 46;
                  }
                  if (*(unsigned char *)(v14 - 1)) {
                    uint64_t v19 = 80;
                  }
                  else {
                    uint64_t v19 = 46;
                  }
                  CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: \t[%d] Opt %c%c%c%c TS %llu(us) Dur %u\n", "handleGetDynSARDetailAsyncCallback", 1096, v13, v19, v18, v17, v43, *v14, *((_DWORD *)v14 - 1));
                  uint64_t v6 = a1;
                }
              }
            }
          }
          ++v13;
          v14 += 2;
        }
        while (v13 < *(unsigned __int8 *)(v9 + 13));
      }
      if (*(unsigned char *)(v9 + 12))
      {
        uint64_t v45 = 0;
        uint64_t v20 = 0;
        do
        {
          uint64_t v21 = *(void *)(v6 + 48);
          if (*(void *)(v21 + 24))
          {
            int v22 = CCLogStream::shouldLog();
            uint64_t v6 = a1;
            uint64_t v21 = *(void *)(a1 + 48);
            if (v22)
            {
              CCLogStream::logInfo(*(CCLogStream **)(v21 + 24), "[dk] %s@%d:DynSAR: Slice %d Core & Ant combined index %d Detail\n", "handleGetDynSARDetailAsyncCallback", 1101, *(unsigned __int8 *)(v9 + 14), v20);
              uint64_t v6 = a1;
              uint64_t v21 = *(void *)(a1 + 48);
            }
          }
          if (*(void *)(v21 + 24))
          {
            int v23 = CCLogStream::shouldLog();
            uint64_t v6 = a1;
            uint64_t v21 = *(void *)(a1 + 48);
            if (v23)
            {
              CCLogStream::logInfo(*(CCLogStream **)(v21 + 24), "[dk] %s@%d:DynSAR: %7s %9s %6s %8s %9s %5s %10s %10s %7s %6s %6s\n", "handleGetDynSARDetailAsyncCallback", 1102, "Opt", "TxDur", "%TxDC", "PAv:mw", "PlimAv:mw", "Util%", "Energy", "Qsar:mw*ms", "FS(us)", "Util_pred", "Util_hist");
              uint64_t v6 = a1;
              uint64_t v21 = *(void *)(a1 + 48);
            }
          }
          uint64_t v44 = v20;
          if (*(void *)(v21 + 24))
          {
            int v24 = CCLogStream::shouldLog();
            uint64_t v6 = a1;
            if (v24)
            {
              CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: ---------------------------------------------------------------------------------------------\n", "handleGetDynSARDetailAsyncCallback", 1103);
              uint64_t v6 = a1;
            }
          }
          if (*(unsigned char *)(v9 + 13))
          {
            uint64_t v25 = 0;
            unint64_t v26 = 0;
            uint64_t v27 = v45;
            do
            {
              uint64_t v28 = v9 + v25;
              if (*(void *)(v9 + v25 + 32))
              {
                unint64_t v29 = *(unsigned int *)(v28 + 28);
                if (v29)
                {
                  unint64_t v30 = (_DWORD *)(v9 + v27);
                  unint64_t v31 = *(unsigned int *)(v9 + v27 + 360);
                  if (v31)
                  {
                    if (*(void *)(*(void *)(v6 + 48) + 24))
                    {
                      unsigned int v32 = v30[89];
                      unsigned int v33 = v30[86];
                      int v34 = CCLogStream::shouldLog();
                      uint64_t v6 = a1;
                      if (v34)
                      {
                        uint64_t v35 = 84;
                        if ((*(unsigned char *)(v28 + 24) & 8) == 0) {
                          uint64_t v35 = 46;
                        }
                        uint64_t v36 = 77;
                        if ((*(unsigned char *)(v28 + 24) & 4) == 0) {
                          uint64_t v36 = 46;
                        }
                        uint64_t v42 = v35;
                        uint64_t v41 = v36;
                        uint64_t v37 = 70;
                        if ((*(unsigned char *)(v28 + 24) & 2) == 0) {
                          uint64_t v37 = 46;
                        }
                        uint64_t v38 = 80;
                        if ((*(unsigned char *)(v28 + 24) & 1) == 0) {
                          uint64_t v38 = 46;
                        }
                        CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: %c%c%c%c %2u %9u %6llu %8llu %9llu %5llu %10u %10u %7u %6u %6u\n", "handleGetDynSARDetailAsyncCallback", 1125, v38, v37, v41, v42, v26, v30[86], ((v29 >> 1) + 100 * v33) / v29, (((v29 >> 1) + 1000 * v31) / v29 * (((v31 >> 1) + 100 * v32) / v31) + 50)/ 0x64, ((v29 >> 1) + 1000 * v31) / v29, ((v31 >> 1) + 100 * v32) / v31, v30[89], v30[90], *(unsigned __int16 *)(v9 + v27 + 364), *(unsigned __int8 *)(v9 + v27 + 367),
                          *(unsigned __int8 *)(v9 + v27 + 366));
                        uint64_t v6 = a1;
                      }
                    }
                  }
                }
              }
              ++v26;
              v25 += 16;
              v27 += 96;
            }
            while (v26 < *(unsigned __int8 *)(v9 + 13));
          }
          uint64_t v20 = v44 + 1;
          v45 += 24;
        }
        while (v44 + 1 < (unint64_t)*(unsigned __int8 *)(v9 + 12));
      }
      uint64_t result = *(void *)(*(void *)(v6 + 48) + 24);
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result) {
          return CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 24), 0x20uLL, "[dk] %s@%d:TXPWR_PROFILE: Leave %s \n", "handleGetDynSARDetailAsyncCallback", 1129, "handleGetDynSARDetailAsyncCallback");
        }
      }
    }
    else if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result) {
        return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Sub Command ID mismatch, input %d, output %d\n");
      }
    }
  }
  else
  {
    uint64_t result = *(void *)(*(void *)(v6 + 48) + 24);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result) {
        return CCLogStream::logNotice(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: No valid data\n", "handleGetDynSARDetailAsyncCallback", 1070);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANTxPowerManager::handleGetDynSARDetailAsyncCallbackV2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (*(void *)(*(void *)(a1 + 48) + 24) && CCLogStream::shouldLog())
  {
    CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 24), 0x20uLL, "[dk] %s@%d:TXPWR_PROFILE: Enter %s \n", "handleGetDynSARDetailAsyncCallbackV2", 1136, "handleGetDynSARDetailAsyncCallbackV2");
    if (a3)
    {
LABEL_4:
      uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          unsigned int v32 = *(void **)(a1 + 48);
          unsigned int v33 = (CCLogStream *)v32[3];
          (*(void (**)(void, uint64_t))(*(void *)*v32 + 112))(*v32, a3);
          return CCLogStream::logAlert(v33, "[dk] %s@%d:DynSAR: Error: Failed to get DynSAR Details: %s\n");
        }
      }
      return result;
    }
  }
  else if (a3)
  {
    goto LABEL_4;
  }
  uint64_t v8 = *a4;
  if (*a4)
  {
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t result = *(void *)(v9 + 24);
    if (*(_WORD *)v8 == 4)
    {
      if (result)
      {
        int shouldLog = CCLogStream::shouldLog();
        uint64_t v9 = *(void *)(a1 + 48);
        if (shouldLog)
        {
          CCLogStream::logInfo(*(CCLogStream **)(v9 + 24), "[dk] %s@%d:DynSAR: Details, slice %u monitor periods %u first sync %llu\n", "handleGetDynSARDetailAsyncCallbackV2", 1161, *(unsigned __int8 *)(v8 + 14), *(unsigned __int8 *)(v8 + 13), *(void *)(v8 + 16));
          uint64_t v9 = *(void *)(a1 + 48);
        }
      }
      if (*(void *)(v9 + 24) && CCLogStream::shouldLog()) {
        CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: P - Power optimization, M - no frame mute, F - Failsafe mode, T - Tx dutycycle limit\n", "handleGetDynSARDetailAsyncCallbackV2", 1162);
      }
      if (*(unsigned char *)(v8 + 13))
      {
        unint64_t v11 = 0;
        int v12 = (void *)(v8 + 32);
        do
        {
          if (*v12
            && *((_DWORD *)v12 - 1)
            && *(void *)(*(void *)(a1 + 48) + 24)
            && CCLogStream::shouldLog())
          {
            uint64_t v13 = 84;
            if ((*(unsigned char *)(v12 - 1) & 8) == 0) {
              uint64_t v13 = 46;
            }
            uint64_t v36 = v13;
            if ((*(unsigned char *)(v12 - 1) & 4) != 0) {
              uint64_t v14 = 77;
            }
            else {
              uint64_t v14 = 46;
            }
            if ((*(unsigned char *)(v12 - 1) & 2) != 0) {
              uint64_t v15 = 70;
            }
            else {
              uint64_t v15 = 46;
            }
            if (*(unsigned char *)(v12 - 1)) {
              uint64_t v16 = 80;
            }
            else {
              uint64_t v16 = 46;
            }
            CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: \t[%d] Opt %c%c%c%c TS %llu(us) Dur %u\n", "handleGetDynSARDetailAsyncCallbackV2", 1171, v11, v16, v15, v14, v36, *v12, *((_DWORD *)v12 - 1));
          }
          ++v11;
          v12 += 2;
        }
        while (v11 < *(unsigned __int8 *)(v8 + 13));
      }
      if (*(unsigned char *)(v8 + 12))
      {
        unint64_t v17 = 0;
        uint64_t v18 = (unsigned int *)(v8 + 344);
        do
        {
          uint64_t v19 = *(void *)(a1 + 48);
          if (*(void *)(v19 + 24))
          {
            int v20 = CCLogStream::shouldLog();
            uint64_t v19 = *(void *)(a1 + 48);
            if (v20)
            {
              CCLogStream::logInfo(*(CCLogStream **)(v19 + 24), "[dk] %s@%d:DynSAR: Slice %d Core & Ant combined index %d Detail\n", "handleGetDynSARDetailAsyncCallbackV2", 1176, *(unsigned __int8 *)(v8 + 14), v17);
              uint64_t v19 = *(void *)(a1 + 48);
            }
          }
          if (*(void *)(v19 + 24))
          {
            int v21 = CCLogStream::shouldLog();
            uint64_t v19 = *(void *)(a1 + 48);
            if (v21)
            {
              CCLogStream::logInfo(*(CCLogStream **)(v19 + 24), "[dk] %s@%d:DynSAR: %7s %9s %6s %8s %9s %5s %10s %10s %7s %6s %6s\n", "handleGetDynSARDetailAsyncCallbackV2", 1177, "Opt", "TxDur", "%TxDC", "PAv:mw", "PlimAv:mw", "Util%", "Energy", "Qsar:mw*ms", "FS(us)", "Util_pred", "Util_hist");
              uint64_t v19 = *(void *)(a1 + 48);
            }
          }
          if (*(void *)(v19 + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: ---------------------------------------------------------------------------------------------\n", "handleGetDynSARDetailAsyncCallbackV2", 1178);
          }
          if (*(unsigned char *)(v8 + 13))
          {
            unint64_t v22 = 0;
            int v23 = v18;
            int v24 = (void *)(v8 + 32);
            do
            {
              if (*v24)
              {
                unint64_t v25 = *((unsigned int *)v24 - 1);
                if (v25)
                {
                  if (*(void *)(*(void *)(a1 + 48) + 24))
                  {
                    unsigned int v26 = *v23;
                    int v27 = *((unsigned __int16 *)v23 + 2);
                    if (CCLogStream::shouldLog())
                    {
                      uint64_t v28 = 84;
                      if ((*(unsigned char *)(v24 - 1) & 8) == 0) {
                        uint64_t v28 = 46;
                      }
                      uint64_t v29 = 77;
                      if ((*(unsigned char *)(v24 - 1) & 4) == 0) {
                        uint64_t v29 = 46;
                      }
                      uint64_t v34 = v29;
                      uint64_t v35 = v28;
                      uint64_t v30 = 70;
                      if ((*(unsigned char *)(v24 - 1) & 2) == 0) {
                        uint64_t v30 = 46;
                      }
                      uint64_t v31 = 80;
                      if ((*(unsigned char *)(v24 - 1) & 1) == 0) {
                        uint64_t v31 = 46;
                      }
                      CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: %c%c%c%c %2u %9u %6u %8s %9s %5u %10s %10s %7s %6u %6u\n", "handleGetDynSARDetailAsyncCallbackV2", 1199, v31, v30, v34, v35, v22, *v23, (((v25 >> 1) + 100 * v26) / v25), "N/A", "N/A", (52429 * v27) >> 19, "N/A", "N/A", "N/A", *((unsigned __int16 *)v23 + 4) / 0xAu, *((unsigned __int16 *)v23 + 3) / 0xAu);
                    }
                  }
                }
              }
              ++v22;
              v24 += 2;
              v23 += 12;
            }
            while (v22 < *(unsigned __int8 *)(v8 + 13));
          }
          ++v17;
          v18 += 3;
        }
        while (v17 < *(unsigned __int8 *)(v8 + 12));
      }
      uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result) {
          return CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 24), 0x20uLL, "[dk] %s@%d:TXPWR_PROFILE: Leave %s \n", "handleGetDynSARDetailAsyncCallbackV2", 1203, "handleGetDynSARDetailAsyncCallbackV2");
        }
      }
    }
    else if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result) {
        return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Sub Command ID mismatch, input %d, output %d\n");
      }
    }
  }
  else
  {
    uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result) {
        return CCLogStream::logNotice(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: No valid data\n", "handleGetDynSARDetailAsyncCallbackV2", 1145);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANTxPowerManager::handleGetDynSARProfileAsyncCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (*(void *)(*(void *)(a1 + 48) + 24) && CCLogStream::shouldLog())
  {
    CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 24), 0x20uLL, "[dk] %s@%d:TXPWR_PROFILE: Enter %s \n", "handleGetDynSARProfileAsyncCallback", 1210, "handleGetDynSARProfileAsyncCallback");
    if (a3)
    {
LABEL_4:
      uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          unint64_t v11 = *(void **)(a1 + 48);
          int v12 = (CCLogStream *)v11[3];
          (*(void (**)(void, uint64_t))(*(void *)*v11 + 112))(*v11, a3);
          return CCLogStream::logAlert(v12, "[dk] %s@%d:DynSAR: Error: Failed to get DynSAR profile: %s\n");
        }
      }
      return result;
    }
  }
  else if (a3)
  {
    goto LABEL_4;
  }
  uint64_t v8 = (_WORD *)*a4;
  if (*a4)
  {
    if (*v8 == 13)
    {
      int v9 = (unsigned __int16)v8[4];
      if ((v9 - 1) >= 2)
      {
        uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
        if (result)
        {
          uint64_t result = CCLogStream::shouldLog();
          if (result) {
            return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Invalid version for DynSAR profiles response\n");
          }
        }
      }
      else
      {
        uint64_t v10 = *a4;
        if (v9 == 1) {
          AppleBCMWLANTxPowerManager::dumpDynSARProfilesV1(a1, v10);
        }
        else {
          AppleBCMWLANTxPowerManager::dumpDynSARProfilesV2(a1, v10);
        }
        uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
        if (result)
        {
          uint64_t result = CCLogStream::shouldLog();
          if (result) {
            return CCLogStream::logNoticeIf(*(CCLogStream **)(*(void *)(a1 + 48) + 24), 0x20uLL, "[dk] %s@%d:TXPWR_PROFILE: Leave %s \n", "handleGetDynSARProfileAsyncCallback", 1243, "handleGetDynSARProfileAsyncCallback");
          }
        }
      }
    }
    else
    {
      uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result) {
          return CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Sub Command ID mismatch, input %d, output %d\n");
        }
      }
    }
  }
  else
  {
    uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result) {
        return CCLogStream::logNotice(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: No valid data\n", "handleGetDynSARProfileAsyncCallback", 1219);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANTxPowerManager::dumpDynSARProfilesV1(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
  if (result)
  {
    uint64_t result = CCLogStream::shouldLog();
    if (result) {
      uint64_t result = CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Profiles Total: %d Active: %d\n", "dumpDynSARProfilesV1", 2517, *(unsigned __int16 *)(a2 + 14), *(unsigned __int16 *)(a2 + 12));
    }
  }
  if (*(_WORD *)(a2 + 14))
  {
    unsigned __int16 v5 = 0;
    unsigned __int8 v6 = 0;
    uint64_t v7 = a2 + 16;
    do
    {
      if (*(void *)(*(void *)(a1 + 48) + 24) && CCLogStream::shouldLog()) {
        CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: ----------------------------------------------------------\n", "dumpDynSARProfilesV1", 2520);
      }
      uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 24);
      if (*(unsigned __int16 *)(a2 + 12) == v5)
      {
        if (v8 && CCLogStream::shouldLog()) {
          CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Profile %d (Active)\n");
        }
      }
      else if (v8 && CCLogStream::shouldLog())
      {
        CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Profile %d (Common)\n");
      }
      uint64_t v9 = *(void *)(a1 + 48);
      if (*(void *)(v9 + 24))
      {
        int shouldLog = CCLogStream::shouldLog();
        uint64_t v9 = *(void *)(a1 + 48);
        if (shouldLog)
        {
          CCLogStream::logInfo(*(CCLogStream **)(v9 + 24), "[dk] %s@%d:DynSAR: Mode %d Power %d\n", "dumpDynSARProfilesV1", 2526, *(unsigned __int8 *)(v7 + 20 * v6 + 9), *(unsigned __int8 *)(v7 + 20 * v6 + 8));
          uint64_t v9 = *(void *)(a1 + 48);
        }
      }
      if (*(void *)(v9 + 24))
      {
        int v11 = CCLogStream::shouldLog();
        uint64_t v9 = *(void *)(a1 + 48);
        if (v11)
        {
          CCLogStream::logInfo(*(CCLogStream **)(v9 + 24), "[dk] %s@%d:DynSAR: Variance: threshold limit %u offset %u\n", "dumpDynSARProfilesV1", 2527, *(_DWORD *)(v7 + 20 * v6), *(_DWORD *)(v7 + 20 * v6 + 4));
          uint64_t v9 = *(void *)(a1 + 48);
        }
      }
      if (*(void *)(v9 + 24))
      {
        int v12 = CCLogStream::shouldLog();
        uint64_t v9 = *(void *)(a1 + 48);
        if (v12)
        {
          CCLogStream::logInfo(*(CCLogStream **)(v9 + 24), "[dk] %s@%d:DynSAR: Failsafe forecast utilization %d%%\n", "dumpDynSARProfilesV1", 2528, *(unsigned __int8 *)(v7 + 20 * v6 + 13));
          uint64_t v9 = *(void *)(a1 + 48);
        }
      }
      if (*(void *)(v9 + 24))
      {
        int v13 = CCLogStream::shouldLog();
        uint64_t v9 = *(void *)(a1 + 48);
        if (v13)
        {
          CCLogStream::logInfo(*(CCLogStream **)(v9 + 24), "[dk] %s@%d:DynSAR: Failsafe mean utilization threshold %d%%\n", "dumpDynSARProfilesV1", 2529, *(unsigned __int8 *)(v7 + 20 * v6 + 14));
          uint64_t v9 = *(void *)(a1 + 48);
        }
      }
      if (*(void *)(v9 + 24))
      {
        int v14 = CCLogStream::shouldLog();
        uint64_t v9 = *(void *)(a1 + 48);
        if (v14)
        {
          CCLogStream::logInfo(*(CCLogStream **)(v9 + 24), "[dk] %s@%d:DynSAR: Failsafe averaged historical duty cycle threshold %d%%\n", "dumpDynSARProfilesV1", 2530, *(unsigned __int8 *)(v7 + 20 * v6 + 15));
          uint64_t v9 = *(void *)(a1 + 48);
        }
      }
      if (*(void *)(v9 + 24))
      {
        int v15 = CCLogStream::shouldLog();
        uint64_t v9 = *(void *)(a1 + 48);
        if (v15)
        {
          CCLogStream::logInfo(*(CCLogStream **)(v9 + 24), "[dk] %s@%d:DynSAR: Optimization forecast duration %d\n", "dumpDynSARProfilesV1", 2531, *(unsigned __int8 *)(v7 + 20 * v6 + 10));
          uint64_t v9 = *(void *)(a1 + 48);
        }
      }
      if (*(void *)(v9 + 24))
      {
        int v16 = CCLogStream::shouldLog();
        uint64_t v9 = *(void *)(a1 + 48);
        if (v16)
        {
          CCLogStream::logInfo(*(CCLogStream **)(v9 + 24), "[dk] %s@%d:DynSAR: Optimization averaged historical utilization threshold %d%%\n", "dumpDynSARProfilesV1", 2532, *(unsigned __int8 *)(v7 + 20 * v6 + 11));
          uint64_t v9 = *(void *)(a1 + 48);
        }
      }
      if (*(void *)(v9 + 24))
      {
        int v17 = CCLogStream::shouldLog();
        uint64_t v9 = *(void *)(a1 + 48);
        if (v17)
        {
          CCLogStream::logInfo(*(CCLogStream **)(v9 + 24), "[dk] %s@%d:DynSAR: Optimization mean utilization threshold %d%%\n", "dumpDynSARProfilesV1", 2533, *(unsigned __int8 *)(v7 + 20 * v6 + 12));
          uint64_t v9 = *(void *)(a1 + 48);
        }
      }
      if (*(void *)(v9 + 24))
      {
        int v18 = CCLogStream::shouldLog();
        uint64_t v9 = *(void *)(a1 + 48);
        if (v18)
        {
          CCLogStream::logInfo(*(CCLogStream **)(v9 + 24), "[dk] %s@%d:DynSAR: Static tx duty cycle limit %d%%\n", "dumpDynSARProfilesV1", 2534, *(unsigned __int8 *)(v7 + 20 * v6 + 17));
          uint64_t v9 = *(void *)(a1 + 48);
        }
      }
      if (*(void *)(v9 + 24))
      {
        int v19 = CCLogStream::shouldLog();
        uint64_t v9 = *(void *)(a1 + 48);
        if (v19)
        {
          CCLogStream::logInfo(*(CCLogStream **)(v9 + 24), "[dk] %s@%d:DynSAR: Dynamic Tx duty cycle threshold %d%%\n", "dumpDynSARProfilesV1", 2535, *(unsigned __int8 *)(v7 + 20 * v6 + 18));
          uint64_t v9 = *(void *)(a1 + 48);
        }
      }
      if (*(void *)(v9 + 24))
      {
        int v20 = CCLogStream::shouldLog();
        uint64_t v9 = *(void *)(a1 + 48);
        if (v20)
        {
          CCLogStream::logInfo(*(CCLogStream **)(v9 + 24), "[dk] %s@%d:DynSAR: Dynamic Tx duty cycle target %d%%\n", "dumpDynSARProfilesV1", 2536, *(unsigned __int8 *)(v7 + 20 * v6 + 19));
          uint64_t v9 = *(void *)(a1 + 48);
        }
      }
      uint64_t result = *(void *)(v9 + 24);
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result) {
          uint64_t result = CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Dynamic Tx duty cycle mean utilization low limit %d%%\n", "dumpDynSARProfilesV1", 2537, *(unsigned __int8 *)(v7 + 20 * v6 + 16));
        }
      }
      unsigned __int16 v5 = ++v6;
    }
    while (*(unsigned __int16 *)(a2 + 14) > v6);
  }
  return result;
}

uint64_t AppleBCMWLANTxPowerManager::dumpDynSARProfilesV2(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(*(void *)(a1 + 48) + 24);
  if (result)
  {
    uint64_t result = CCLogStream::shouldLog();
    if (result) {
      uint64_t result = CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Profiles Total: %d Active: %d\n", "dumpDynSARProfilesV2", 2549, *(unsigned __int16 *)(a2 + 14), *(unsigned __int16 *)(a2 + 12));
    }
  }
  if (*(_WORD *)(a2 + 14))
  {
    unsigned __int16 v5 = 0;
    unsigned __int8 v6 = 0;
    uint64_t v7 = a2 + 16;
    do
    {
      if (*(void *)(*(void *)(a1 + 48) + 24) && CCLogStream::shouldLog()) {
        CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: ----------------------------------------------------------\n", "dumpDynSARProfilesV2", 2552);
      }
      uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 24);
      if (*(unsigned __int16 *)(a2 + 12) == v5)
      {
        if (v8 && CCLogStream::shouldLog()) {
          CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Profile %d (Active)\n");
        }
      }
      else if (v8 && CCLogStream::shouldLog())
      {
        CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Profile %d (Common)\n");
      }
      uint64_t v9 = *(void *)(a1 + 48);
      if (*(void *)(v9 + 24))
      {
        int shouldLog = CCLogStream::shouldLog();
        uint64_t v9 = *(void *)(a1 + 48);
        if (shouldLog)
        {
          CCLogStream::logInfo(*(CCLogStream **)(v9 + 24), "[dk] %s@%d:DynSAR: Mode %d Power %d\n", "dumpDynSARProfilesV2", 2558, *(unsigned __int8 *)(v7 + 24 * v6 + 9), *(unsigned __int8 *)(v7 + 24 * v6 + 8));
          uint64_t v9 = *(void *)(a1 + 48);
        }
      }
      if (*(void *)(v9 + 24))
      {
        int v11 = CCLogStream::shouldLog();
        uint64_t v9 = *(void *)(a1 + 48);
        if (v11)
        {
          CCLogStream::logInfo(*(CCLogStream **)(v9 + 24), "[dk] %s@%d:DynSAR: Variance: threshold limit %u offset %u\n", "dumpDynSARProfilesV2", 2559, *(_DWORD *)(v7 + 24 * v6), *(_DWORD *)(v7 + 24 * v6 + 4));
          uint64_t v9 = *(void *)(a1 + 48);
        }
      }
      if (*(void *)(v9 + 24))
      {
        int v12 = CCLogStream::shouldLog();
        uint64_t v9 = *(void *)(a1 + 48);
        if (v12)
        {
          CCLogStream::logInfo(*(CCLogStream **)(v9 + 24), "[dk] %s@%d:DynSAR: Failsafe forecast utilization %d%%\n", "dumpDynSARProfilesV2", 2560, *(unsigned __int8 *)(v7 + 24 * v6 + 13));
          uint64_t v9 = *(void *)(a1 + 48);
        }
      }
      if (*(void *)(v9 + 24))
      {
        int v13 = CCLogStream::shouldLog();
        uint64_t v9 = *(void *)(a1 + 48);
        if (v13)
        {
          CCLogStream::logInfo(*(CCLogStream **)(v9 + 24), "[dk] %s@%d:DynSAR: Failsafe mean utilization threshold %d%%\n", "dumpDynSARProfilesV2", 2561, *(unsigned __int8 *)(v7 + 24 * v6 + 14));
          uint64_t v9 = *(void *)(a1 + 48);
        }
      }
      if (*(void *)(v9 + 24))
      {
        int v14 = CCLogStream::shouldLog();
        uint64_t v9 = *(void *)(a1 + 48);
        if (v14)
        {
          CCLogStream::logInfo(*(CCLogStream **)(v9 + 24), "[dk] %s@%d:DynSAR: Failsafe averaged historical duty cycle threshold %d%%\n", "dumpDynSARProfilesV2", 2562, *(unsigned __int8 *)(v7 + 24 * v6 + 15));
          uint64_t v9 = *(void *)(a1 + 48);
        }
      }
      if (*(void *)(v9 + 24))
      {
        int v15 = CCLogStream::shouldLog();
        uint64_t v9 = *(void *)(a1 + 48);
        if (v15)
        {
          CCLogStream::logInfo(*(CCLogStream **)(v9 + 24), "[dk] %s@%d:DynSAR: Optimization forecast duration %d\n", "dumpDynSARProfilesV2", 2563, *(unsigned __int8 *)(v7 + 24 * v6 + 10));
          uint64_t v9 = *(void *)(a1 + 48);
        }
      }
      if (*(void *)(v9 + 24))
      {
        int v16 = CCLogStream::shouldLog();
        uint64_t v9 = *(void *)(a1 + 48);
        if (v16)
        {
          CCLogStream::logInfo(*(CCLogStream **)(v9 + 24), "[dk] %s@%d:DynSAR: Optimization averaged historical utilization threshold %d%%\n", "dumpDynSARProfilesV2", 2564, *(unsigned __int8 *)(v7 + 24 * v6 + 11));
          uint64_t v9 = *(void *)(a1 + 48);
        }
      }
      if (*(void *)(v9 + 24))
      {
        int v17 = CCLogStream::shouldLog();
        uint64_t v9 = *(void *)(a1 + 48);
        if (v17)
        {
          CCLogStream::logInfo(*(CCLogStream **)(v9 + 24), "[dk] %s@%d:DynSAR: Optimization mean utilization threshold %d%%\n", "dumpDynSARProfilesV2", 2565, *(unsigned __int8 *)(v7 + 24 * v6 + 12));
          uint64_t v9 = *(void *)(a1 + 48);
        }
      }
      if (*(void *)(v9 + 24))
      {
        int v18 = CCLogStream::shouldLog();
        uint64_t v9 = *(void *)(a1 + 48);
        if (v18)
        {
          CCLogStream::logInfo(*(CCLogStream **)(v9 + 24), "[dk] %s@%d:DynSAR: Static tx duty cycle limit %d%%\n", "dumpDynSARProfilesV2", 2566, *(unsigned __int8 *)(v7 + 24 * v6 + 17));
          uint64_t v9 = *(void *)(a1 + 48);
        }
      }
      if (*(void *)(v9 + 24))
      {
        int v19 = CCLogStream::shouldLog();
        uint64_t v9 = *(void *)(a1 + 48);
        if (v19)
        {
          CCLogStream::logInfo(*(CCLogStream **)(v9 + 24), "[dk] %s@%d:DynSAR: Dynamic Tx duty cycle threshold %d%%\n", "dumpDynSARProfilesV2", 2567, *(unsigned __int8 *)(v7 + 24 * v6 + 18));
          uint64_t v9 = *(void *)(a1 + 48);
        }
      }
      if (*(void *)(v9 + 24))
      {
        int v20 = CCLogStream::shouldLog();
        uint64_t v9 = *(void *)(a1 + 48);
        if (v20)
        {
          CCLogStream::logInfo(*(CCLogStream **)(v9 + 24), "[dk] %s@%d:DynSAR: Dynamic Tx duty cycle target %d%%\n", "dumpDynSARProfilesV2", 2568, *(unsigned __int8 *)(v7 + 24 * v6 + 19));
          uint64_t v9 = *(void *)(a1 + 48);
        }
      }
      if (*(void *)(v9 + 24))
      {
        int v21 = CCLogStream::shouldLog();
        uint64_t v9 = *(void *)(a1 + 48);
        if (v21)
        {
          CCLogStream::logInfo(*(CCLogStream **)(v9 + 24), "[dk] %s@%d:DynSAR: Dynamic Tx duty cycle mean utilization low limit %d%%\n", "dumpDynSARProfilesV2", 2569, *(unsigned __int8 *)(v7 + 24 * v6 + 16));
          uint64_t v9 = *(void *)(a1 + 48);
        }
      }
      uint64_t result = *(void *)(v9 + 24);
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result) {
          uint64_t result = CCLogStream::logInfo(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Time averaging window %d\n", "dumpDynSARProfilesV2", 2570, *(unsigned __int8 *)(v7 + 24 * v6 + 20));
        }
      }
      unsigned __int16 v5 = ++v6;
    }
    while (*(unsigned __int16 *)(a2 + 14) > v6);
  }
  return result;
}

uint64_t AppleBCMWLANTxPowerManager::configureDynSAR(AppleBCMWLANTxPowerManager *this)
{
  uint64_t v2 = (AppleBCMWLANCore **)*((void *)this + 6);
  if (v2[3])
  {
    int shouldLog = CCLogStream::shouldLog();
    uint64_t v2 = (AppleBCMWLANCore **)*((void *)this + 6);
    if (shouldLog)
    {
      CCLogStream::logNoticeIf(v2[3], 0x20uLL, "[dk] %s@%d:TXPWR_PROFILE: Enter %s \n", "configureDynSAR", 1251, "configureDynSAR");
      uint64_t v2 = (AppleBCMWLANCore **)*((void *)this + 6);
    }
  }
  unsigned int v21 = 0;
  if (!AppleBCMWLANCore::checkForDynSARSupport(*v2)
    || (AppleBCMWLANCore::getDynSARFeatureFlag(**((AppleBCMWLANCore ***)this + 6)) & 1) == 0)
  {
    if (*(void *)(*((void *)this + 6) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlertIf(*(CCLogStream **)(*((void *)this + 6) + 24), 0x20uLL, "[dk] %s@%d:DynSAR: DSA NOT Enabled by Host!\n", "configureDynSAR", 1256);
    }
    return 0;
  }
  uint64_t v4 = *((void *)this + 6);
  if (*(void *)v4)
  {
    AppleBCMWLANCore::is4387C0(*(OSDictionary **)v4);
    uint64_t v4 = *((void *)this + 6);
  }
  *(_DWORD *)(v4 + 48)  = 1;
  *(unsigned char *)(*((void *)this + 6) + 40)  = 0;
  IOParseBootArgNumber("wlan.dsa.mode", (void *)(*((void *)this + 6) + 48), 4);
  IOParseBootArgNumber("wlan.dsa.params", &v21, 4);
  IOParseBootArgNumber("wlan.dsa.rssi.upper", (void *)(*((void *)this + 6) + 120), 4);
  IOParseBootArgNumber("wlan.dsa.rssi.lower", (void *)(*((void *)this + 6) + 124), 4);
  unsigned int v5 = v21;
  uint64_t v6 = *((void *)this + 6);
  if (v21 && *(_DWORD *)(v6 + 48))
  {
    *(_DWORD *)(v6 + 56)  = v21;
    *(_DWORD *)(*((void *)this + 6) + 60)  = (unsigned __int16)(v5 >> 8);
    *(_DWORD *)(*((void *)this + 6) + 64)  = HIBYTE(v5);
    *(unsigned char *)(*((void *)this + 6) + 41)  = 1;
    uint64_t v6 = *((void *)this + 6);
  }
  int v7 = AppleBCMWLANTxPowerManager::configureDynSARMode(this, *(_DWORD *)(v6 + 48));
  uint64_t v8 = *((void *)this + 6);
  if (v7)
  {
    uint64_t v9 = 3758097084;
    if (*(void *)(v8 + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:Failed to Configure DynSAR Mode\n");
    }
    return v9;
  }
  int v11 = AppleBCMWLANTxPowerManager::configureDynSAREvent(this, *(_DWORD *)(v8 + 68));
  uint64_t v12 = *((void *)this + 6);
  if (v11)
  {
    uint64_t v9 = 3758097084;
    if (*(void *)(v12 + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:Failed to Configure DynSAR Event\n");
    }
    return v9;
  }
  if (*(unsigned __int8 *)(AppleBCMWLANConfigManager::getDynSARPwrBoostCtl(*(AppleBCMWLANConfigManager **)(v12 + 8)) + 3) >= 4u) {
    *(_DWORD *)(*((void *)this + 6) + 120)  = -60;
  }
  uint64_t v13 = *((void *)this + 6);
  if (*(_DWORD *)(v13 + 120) != -65 || *(_DWORD *)(v13 + 124) != -80)
  {
    AppleBCMWLANTxPowerManager::updateRssiThreshFromBootArgs((uint64_t)this, (int *)(v13 + 120), (int *)(v13 + 124));
    uint64_t v13 = *((void *)this + 6);
  }
  if (*(void *)v13)
  {
    BOOL v14 = AppleBCMWLANCore::is4387C0(*(OSDictionary **)v13);
    uint64_t v13 = *((void *)this + 6);
    if (v14)
    {
      *(unsigned char *)(AppleBCMWLANConfigManager::getDynSARPwrBoostCtl(*(AppleBCMWLANConfigManager **)(v13 + 8)) + 2)  = 6;
      *(unsigned char *)(AppleBCMWLANConfigManager::getDynSARPwrBoostCtl(*(AppleBCMWLANConfigManager **)(*((void *)this + 6)
                                                                                               + 8))
               + AppleBCMWLANWnmAdapter::free(this - 3) = 6;
      uint64_t v13 = *((void *)this + 6);
      if (*(void *)(v13 + 24))
      {
        int v15 = CCLogStream::shouldLog();
        uint64_t v13 = *((void *)this + 6);
        if (v15)
        {
          CCLogStream::logAlert(*(CCLogStream **)(v13 + 24), "[dk] %s@%d:Override DSA power boost with %d dB for 4387 C0\n", "configureDynSAR", 1303, 6);
          uint64_t v13 = *((void *)this + 6);
        }
      }
    }
  }
  DynSARPwrBoostCtl  = AppleBCMWLANConfigManager::getDynSARPwrBoostCtl(*(AppleBCMWLANConfigManager **)(v13 + 8));
  if (!AppleBCMWLANTxPowerManager::configureDynSARPwrBoost((AppleBCMWLANCore ***)this, *(unsigned __int8 *)(DynSARPwrBoostCtl + 3)))
  {
    DynSARProfile  = AppleBCMWLANTxPowerManager::getDynSARProfile(this);
    uint64_t v18 = *((void *)this + 6);
    if (DynSARProfile)
    {
      if (*(void *)(v18 + 24))
      {
        int v19 = CCLogStream::shouldLog();
        uint64_t v18 = *((void *)this + 6);
        if (v19)
        {
          CCLogStream::logAlert(*(CCLogStream **)(v18 + 24), "[dk] %s@%d:Failed to get DynSAR Profile\n", "configureDynSAR", 1312);
          uint64_t v18 = *((void *)this + 6);
        }
      }
    }
    if (*(void *)(v18 + 24))
    {
      int v20 = CCLogStream::shouldLog();
      uint64_t v18 = *((void *)this + 6);
      if (v20)
      {
        CCLogStream::logInfo(*(CCLogStream **)(v18 + 24), "[dk] %s@%d:Configured DynSAR\n", "configureDynSAR", 1327);
        uint64_t v18 = *((void *)this + 6);
      }
    }
    if (*(void *)(v18 + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logNoticeIf(*(CCLogStream **)(*((void *)this + 6) + 24), 0x20uLL, "[dk] %s@%d:TXPWR_PROFILE: Leave %s \n", "configureDynSAR", 1328, "configureDynSAR");
    }
    return 0;
  }
  uint64_t v9 = 3758097084;
  if (*(void *)(*((void *)this + 6) + 24) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:Failed to Configure DynSAR Power Boost\n");
  }
  return v9;
}

uint64_t AppleBCMWLANTxPowerManager::configureDynSARMode(AppleBCMWLANTxPowerManager *this, unsigned int a2)
{
  if (AppleBCMWLANCore::checkForDynSARSupport(**((AppleBCMWLANCore ***)this + 6)))
  {
    uint64_t v4 = 3758097084;
    if (a2 < 3)
    {
      uint64_t v5 = IOMallocZeroData();
      if (v5)
      {
        *(_DWORD *)uint64_t v5 = 65537;
        *(unsigned char *)(v5 + 8)  = a2;
        v18[0]  = v5;
        v18[1]  = 9;
        uint64_t v6 = (*(uint64_t (**)(void))(***((void ***)this + 6) + 88))(**((void **)this + 6));
        if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 136))(v6)) {
          uint64_t v7 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 6) + 16), (uint64_t)"dynsar");
        }
        else {
          uint64_t v7 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 6) + 16), (uint64_t)"dynsar", (uint64_t)v18, 0, 0);
        }
        uint64_t v4 = v7;
        uint64_t v8 = (void *)*((void *)this + 6);
        uint64_t v9 = v8[3];
        if (v4)
        {
          if (v9 && CCLogStream::shouldLog())
          {
            uint64_t v10 = (void *)*((void *)this + 6);
            int v11 = (CCLogStream *)v10[3];
            uint64_t v12 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v10 + 112))(*v10, v4);
            CCLogStream::logAlert(v11, "[dk] %s@%d:Failed to configure DSA mode, %s\n", "configureDynSARMode", 1381, v12);
          }
        }
        else
        {
          if (v9)
          {
            int shouldLog = CCLogStream::shouldLog();
            uint64_t v8 = (void *)*((void *)this + 6);
            if (shouldLog)
            {
              int v16 = (CCLogStream *)v8[3];
              int v17 = (const char *)(*(uint64_t (**)(void, void))(*(void *)*v8 + 112))(*v8, 0);
              CCLogStream::logInfo(v16, "[dk] %s@%d:Set DSA Mode to %d, %s\n", "configureDynSARMode", 1373, a2, v17);
              uint64_t v8 = (void *)*((void *)this + 6);
            }
          }
          *((_DWORD *)v8 + 12)  = a2;
          uint64_t v14 = *((void *)this + 6);
          if (a2) {
            *(unsigned char *)(v14 + 40)  = 1;
          }
          else {
            *(unsigned char *)(v14 + 40)  = 0;
          }
        }
        IOFreeData();
      }
      else
      {
        return 3758097085;
      }
    }
    else if (*(void *)(*((void *)this + 6) + 24) && CCLogStream::shouldLog())
    {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:Unsupported DSA Mode: %d \n", "configureDynSARMode", 1343, a2);
    }
  }
  else
  {
    if (*(void *)(*((void *)this + 6) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlertIf(*(CCLogStream **)(*((void *)this + 6) + 24), 0x20uLL, "[dk] %s@%d:DynSAR: DSA NOT Enabled by Host!\n", "configureDynSARMode", 1338);
    }
    return 0;
  }
  return v4;
}

uint64_t AppleBCMWLANTxPowerManager::configureDynSAREvent(AppleBCMWLANTxPowerManager *this, unsigned int a2)
{
  if (AppleBCMWLANCore::checkForDynSARSupport(**((AppleBCMWLANCore ***)this + 6)))
  {
    uint64_t v4 = 3758097084;
    if (a2 < 2)
    {
      uint64_t v5 = IOMallocZeroData();
      if (v5)
      {
        *(_DWORD *)uint64_t v5 = 65545;
        *(unsigned char *)(v5 + 8)  = a2;
        v18[0]  = v5;
        v18[1]  = 9;
        uint64_t v6 = (*(uint64_t (**)(void))(***((void ***)this + 6) + 88))(**((void **)this + 6));
        if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 136))(v6)) {
          uint64_t v7 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 6) + 16), (uint64_t)"dynsar");
        }
        else {
          uint64_t v7 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 6) + 16), (uint64_t)"dynsar", (uint64_t)v18, 0, 0);
        }
        uint64_t v4 = v7;
        uint64_t v8 = (void *)*((void *)this + 6);
        uint64_t v9 = v8[3];
        if (v4)
        {
          if (v9 && CCLogStream::shouldLog())
          {
            uint64_t v10 = (void *)*((void *)this + 6);
            int v11 = (CCLogStream *)v10[3];
            uint64_t v12 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v10 + 112))(*v10, v4);
            CCLogStream::logAlert(v11, "[dk] %s@%d:DynSAR: Failed to configure DSA event, %s\n", "configureDynSAREvent", 1541, v12);
          }
        }
        else
        {
          if (v9)
          {
            int shouldLog = CCLogStream::shouldLog();
            uint64_t v8 = (void *)*((void *)this + 6);
            if (shouldLog)
            {
              int v15 = (CCLogStream *)v8[3];
              if (a2 == 1) {
                int v16 = "enable";
              }
              else {
                int v16 = "disable";
              }
              int v17 = (const char *)(*(uint64_t (**)(void, void))(*(void *)*v8 + 112))(*v8, 0);
              CCLogStream::logInfo(v15, "[dk] %s@%d:Set DSA event to %d (%s), %s\n", "configureDynSAREvent", 1537, a2, v16, v17);
              uint64_t v8 = (void *)*((void *)this + 6);
            }
          }
          *((_DWORD *)v8 + 17)  = a2;
        }
        IOFreeData();
      }
      else
      {
        return 3758097085;
      }
    }
    else if (*(void *)(*((void *)this + 6) + 24) && CCLogStream::shouldLog())
    {
      CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:DSA event %d invalid, either 0 (disable) or 1 (enable) allowed\n", "configureDynSAREvent", 1507, a2);
    }
  }
  else
  {
    if (*(void *)(*((void *)this + 6) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlertIf(*(CCLogStream **)(*((void *)this + 6) + 24), 0x20uLL, "[dk] %s@%d:DynSAR: DSA NOT Enabled by Host!\n", "configureDynSAREvent", 1502);
    }
    return 0;
  }
  return v4;
}

uint64_t AppleBCMWLANTxPowerManager::configureDynSARPwrBoost(AppleBCMWLANCore ***this, unsigned int a2)
{
  int v4 = AppleBCMWLANCore::checkForDynSARSupport(*this[6]);
  uint64_t v5 = this[6];
  if (v4 && *((unsigned char *)v5 + 40))
  {
    uint64_t v6 = 3758097084;
    if (a2 < 7)
    {
      uint64_t v8 = IOMallocZeroData();
      if (v8)
      {
        *(_DWORD *)uint64_t v8 = 65538;
        *(unsigned char *)(v8 + 8)  = a2;
        v19[0]  = v8;
        v19[1]  = 9;
        uint64_t v9 = (*(uint64_t (**)(void))(*(void *)*this[6] + 88))(*this[6]);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 136))(v9)) {
          uint64_t v10 = AppleBCMWLANCommander::sendIOVarSet(this[6][2], (uint64_t)"dynsar");
        }
        else {
          uint64_t v10 = AppleBCMWLANCommander::runIOVarSet(this[6][2], (uint64_t)"dynsar", (uint64_t)v19, 0, 0);
        }
        uint64_t v6 = v10;
        int v11 = this[6];
        uint64_t v12 = v11[3];
        if (v6)
        {
          if (v12 && CCLogStream::shouldLog())
          {
            uint64_t v13 = this[6];
            uint64_t v14 = v13[3];
            int v15 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)*v13 + 112))(*v13, v6);
            CCLogStream::logAlert(v14, "[dk] %s@%d:Failed to configure DSA power boost, %s\n", "configureDynSARPwrBoost", 1432, v15);
          }
        }
        else
        {
          if (v12)
          {
            int shouldLog = CCLogStream::shouldLog();
            int v11 = this[6];
            if (shouldLog)
            {
              int v17 = v11[3];
              uint64_t v18 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, void))(*(void *)*v11 + 112))(*v11, 0);
              CCLogStream::logInfo(v17, "[dk] %s@%d:Set DSA power boost to %d dB, %s\n", "configureDynSARPwrBoost", 1428, a2, v18);
              int v11 = this[6];
            }
          }
          *((_DWORD *)v11 + 14)  = a2;
        }
        IOFreeData();
      }
      else
      {
        return 3758097085;
      }
    }
    else if (v5[3] && CCLogStream::shouldLog())
    {
      CCLogStream::logAlert(this[6][3], "[dk] %s@%d:DSA power boost %ddB out of range (0~%d dB)\n", "configureDynSARPwrBoost", 1398, a2, 6);
    }
  }
  else
  {
    if (v5[3] && CCLogStream::shouldLog()) {
      CCLogStream::logAlertIf(this[6][3], 0x20uLL, "[dk] %s@%d:DynSAR: DSA NOT Enabled by Host!\n", "configureDynSARPwrBoost", 1393);
    }
    return 0;
  }
  return v6;
}

uint64_t AppleBCMWLANTxPowerManager::getDynSARProfile(AppleBCMWLANTxPowerManager *this)
{
  if (AppleBCMWLANCore::checkForDynSARSupport(**((AppleBCMWLANCore ***)this + 6)))
  {
    uint64_t v2 = (_DWORD *)IOMallocZeroData();
    if (v2)
    {
      uint64_t v3 = v2;
      *uint64_t v2 = 13;
      v15[0]  = v2;
      v15[1]  = 64;
      v14[0]  = v2;
      v14[1]  = 0x4000000040;
      uint64_t v4 = (*(uint64_t (**)(void))(***((void ***)this + 6) + 88))(**((void **)this + 6));
      if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 136))(v4))
      {
        v13[0]  = this;
        v13[1]  = AppleBCMWLANTxPowerManager::handleGetDynSARProfileAsyncCallback;
        void v13[2] = 0;
        uint64_t v5 = *(AppleBCMWLANCommander **)(*((void *)this + 6) + 16);
        int v12 = 0x400000;
        int v6 = AppleBCMWLANCommander::sendIOVarGet(v5, (uint64_t)"dynsar", (uint64_t)v15, (unsigned __int16 *)&v12, (uint64_t)v13, 0);
        if (v6)
        {
          int v7 = v6;
          if (*(void *)(*((void *)this + 6) + 24))
          {
            if (CCLogStream::shouldLog()) {
              CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d: Failed GET IOCTL, cret[0x%08x]\n", "getDynSARProfile", 2478, v7);
            }
          }
        }
      }
      else
      {
        uint64_t v9 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*((void *)this + 6) + 16), (uint64_t)"dynsar", (uint64_t)v15, (uint64_t)v14, 0);
        if (v9)
        {
          uint64_t v8 = v9;
          if (*(void *)(*((void *)this + 6) + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logAlertIf(*(CCLogStream **)(*((void *)this + 6) + 24), 0x20uLL, "[dk] %s@%d:DynSAR: Failed to get DynSAR Profile\n", "getDynSARProfile", 2484);
          }
          goto LABEL_31;
        }
        if (*v3 != 13)
        {
          uint64_t v8 = 3758097084;
          if (*(void *)(*((void *)this + 6) + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:DynSAR: Sub Command ID mismatch, input %d, output %d\n");
          }
          goto LABEL_31;
        }
        int v10 = (unsigned __int16)v3[4];
        if ((v10 - 1) >= 2)
        {
          uint64_t v8 = 3758097084;
          if (*(void *)(*((void *)this + 6) + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:DynSAR: Invalid version for DynSAR profiles response\n");
          }
          goto LABEL_31;
        }
        if (v10 == 1) {
          AppleBCMWLANTxPowerManager::dumpDynSARProfilesV1((uint64_t)this, (uint64_t)v3);
        }
        else {
          AppleBCMWLANTxPowerManager::dumpDynSARProfilesV2((uint64_t)this, (uint64_t)v3);
        }
      }
      uint64_t v8 = 0;
LABEL_31:
      IOFreeData();
      return v8;
    }
    if (*(void *)(*((void *)this + 6) + 24))
    {
      uint64_t v8 = 3758097085;
      if (CCLogStream::shouldLog()) {
        CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:No memory for dsaSummaryBuffer\n", "getDynSARProfile", 2458);
      }
    }
    else
    {
      return 3758097085;
    }
  }
  else
  {
    if (*(void *)(*((void *)this + 6) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlertIf(*(CCLogStream **)(*((void *)this + 6) + 24), 0x20uLL, "[dk] %s@%d:DynSAR: DSA NOT Enabled by Host!\n", "getDynSARProfile", 2450);
    }
    return 0;
  }
  return v8;
}

uint64_t AppleBCMWLANTxPowerManager::getDynSARStatus(AppleBCMWLANTxPowerManager *this)
{
  if (AppleBCMWLANCore::checkForDynSARSupport(**((AppleBCMWLANCore ***)this + 6)))
  {
    uint64_t v2 = 3758097084;
    uint64_t v3 = (_DWORD *)IOMallocZeroData();
    if (v3)
    {
      uint64_t v4 = v3;
      _DWORD *v3 = 8;
      v18[0]  = v3;
      v18[1]  = 48;
      v17[0]  = v3;
      v17[1]  = 0x3000000030;
      uint64_t v5 = (*(uint64_t (**)(void))(***((void ***)this + 6) + 88))(**((void **)this + 6));
      if ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 136))(v5))
      {
        v16[0]  = this;
        v16[1]  = AppleBCMWLANTxPowerManager::handleGetDynSARStatusAsyncCallback;
        _DWORD v16[2] = 0;
        int v6 = *(AppleBCMWLANCommander **)(*((void *)this + 6) + 16);
        int v15 = 3145728;
        uint64_t v7 = AppleBCMWLANCommander::sendIOVarGet(v6, (uint64_t)"dynsar", (uint64_t)v18, (unsigned __int16 *)&v15, (uint64_t)v16, 0);
        if (v7)
        {
          uint64_t v2 = v7;
          if (*(void *)(*((void *)this + 6) + 24) && CCLogStream::shouldLog())
          {
            uint64_t v8 = (void *)*((void *)this + 6);
            uint64_t v9 = (CCLogStream *)v8[3];
            (*(void (**)(void, uint64_t))(*(void *)*v8 + 112))(*v8, v2);
            CCLogStream::logAlert(v9, "[dk] %s@%d:DynSAR: Failed to get DynSAR status, %s\n");
          }
LABEL_24:
          IOFreeData();
          return v2;
        }
      }
      else
      {
        uint64_t v10 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*((void *)this + 6) + 16), (uint64_t)"dynsar", (uint64_t)v18, (uint64_t)v17, 0);
        if (v10)
        {
          uint64_t v2 = v10;
          if (*(void *)(*((void *)this + 6) + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logAlertIf(*(CCLogStream **)(*((void *)this + 6) + 24), 0x20uLL, "[dk] %s@%d:DynSAR: Failed to get DynSAR Status\n", "getDynSARStatus", 1758);
          }
          goto LABEL_24;
        }
        if (*v4 != 8)
        {
          if (*(void *)(*((void *)this + 6) + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:DynSAR: Sub Command ID mismatch, input %d, output %d\n");
          }
          goto LABEL_24;
        }
        if (v4[4] != 3)
        {
          if (*(void *)(*((void *)this + 6) + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:DynSAR: Invalid version for DynSAR status response\n");
          }
          goto LABEL_24;
        }
        AppleBCMWLANTxPowerManager::dumpDynSARStatusV3((uint64_t)this, (uint64_t)v4);
      }
      if (*(void *)(*((void *)this + 6) + 24) && CCLogStream::shouldLog())
      {
        int v12 = (void *)*((void *)this + 6);
        uint64_t v13 = (CCLogStream *)v12[3];
        uint64_t v14 = (const char *)(*(uint64_t (**)(void, void))(*(void *)*v12 + 112))(*v12, 0);
        CCLogStream::logInfo(v13, "[dk] %s@%d:Get DSA status, %s\n", "getDynSARStatus", 1778, v14);
      }
      uint64_t v2 = 0;
      goto LABEL_24;
    }
    return 3758097085;
  }
  else
  {
    if (*(void *)(*((void *)this + 6) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlertIf(*(CCLogStream **)(*((void *)this + 6) + 24), 0x20uLL, "[dk] %s@%d:DynSAR: DSA NOT Enabled by Host!\n", "getDynSARStatus", 1727);
    }
    return 0;
  }
}

uint64_t AppleBCMWLANTxPowerManager::getDynSARAggStats(AppleBCMWLANTxPowerManager *this, unsigned int a2)
{
  if (AppleBCMWLANCore::checkForDynSARSupport(**((AppleBCMWLANCore ***)this + 6)))
  {
    uint64_t v4 = 3758097084;
    uint64_t v5 = (_DWORD *)IOMallocZeroData();
    if (v5)
    {
      int v6 = v5;
      _DWORD *v5 = 11;
      if (a2 >= 0x15)
      {
        if (*(void *)(*((void *)this + 6) + 24) && CCLogStream::shouldLog())
        {
          LOBYTE(a2)  = 20;
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:DynSAR: Observation window size %d exceeds limit, cap to %d\n", "getDynSARAggStats", 1946, 20, 20);
        }
        else
        {
          LOBYTE(a2)  = 20;
        }
      }
      *((unsigned char *)v6 + 8)  = a2;
      v39[0]  = v6;
      v39[1]  = 9;
      v38[0]  = v6;
      v38[1]  = 0x65000000650;
      uint64_t v7 = (*(uint64_t (**)(void))(***((void ***)this + 6) + 88))(**((void **)this + 6));
      if ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 136))(v7))
      {
        *(void *)__dst  = this;
        *(void *)&__dst[8]  = AppleBCMWLANTxPowerManager::handleGetDynSARAggStatsAsyncCallback;
        *(void *)&long long v49 = 0;
        uint64_t v8 = *(AppleBCMWLANCommander **)(*((void *)this + 6) + 16);
        *(_DWORD *)__str  = 105906176;
        uint64_t v9 = AppleBCMWLANCommander::sendIOVarGet(v8, (uint64_t)"dynsar", (uint64_t)v39, (unsigned __int16 *)__str, (uint64_t)__dst, 0);
        uint64_t v10 = *((void *)this + 6);
        if (v9)
        {
          uint64_t v4 = v9;
          if (*(void *)(v10 + 24) && CCLogStream::shouldLog())
          {
            int v11 = (void *)*((void *)this + 6);
            int v12 = (CCLogStream *)v11[3];
            (*(void (**)(void, uint64_t))(*(void *)*v11 + 112))(*v11, v4);
            CCLogStream::logAlert(v12, "[dk] %s@%d:DynSAR: Failed to get DynSAR Aggregated Stats, %s\n");
          }
LABEL_72:
          IOFreeData();
          return v4;
        }
      }
      else
      {
        uint64_t v13 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*((void *)this + 6) + 16), (uint64_t)"dynsar", (uint64_t)v39, (uint64_t)v38, 0);
        if (v13)
        {
          uint64_t v14 = v13;
          if (*(void *)(*((void *)this + 6) + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logAlertIf(*(CCLogStream **)(*((void *)this + 6) + 24), 0x20uLL, "[dk] %s@%d:DynSAR: Failed to get DynSAR Aggregated Stats\n", "getDynSARAggStats", 1965);
          }
          uint64_t v4 = v14;
          goto LABEL_72;
        }
        if (*(_WORD *)v6 != 11)
        {
          if (*(void *)(*((void *)this + 6) + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:DynSAR: Sub Command ID mismatch, input %d, output %d\n");
          }
          goto LABEL_72;
        }
        *(_OWORD *)__dst  = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        *(_OWORD *)__str  = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        uint64_t v15 = 4 * *((unsigned __int16 *)v6 + 5);
        long long v46 = 0u;
        long long v47 = 0u;
        if (((v15 * 4 + (v15 * 4) * (unint64_t)*((unsigned __int16 *)v6 + 6)) | 8) > *((unsigned __int16 *)v6 + 1))
        {
          if (*(void *)(*((void *)this + 6) + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:DynSAR: Error, invalid data length  %d\n");
          }
          goto LABEL_72;
        }
        if (*((unsigned __int16 *)v6 + 6) >= 5u)
        {
          if (*(void *)(*((void *)this + 6) + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:DynSAR: Error, invalid number of aggregated antenna %d, max is %d\n");
          }
          goto LABEL_72;
        }
        uint64_t v16 = *((void *)this + 6);
        if (*(void *)(v16 + 24))
        {
          int shouldLog = CCLogStream::shouldLog();
          uint64_t v16 = *((void *)this + 6);
          if (shouldLog)
          {
            CCLogStream::logInfo(*(CCLogStream **)(v16 + 24), "[dk] %s@%d:DynSAR: Ux: Tmon Utilization at aggregated index x\n", "getDynSARAggStats", 1997);
            uint64_t v16 = *((void *)this + 6);
          }
        }
        if (*(void *)(v16 + 24))
        {
          int v18 = CCLogStream::shouldLog();
          uint64_t v16 = *((void *)this + 6);
          if (v18)
          {
            CCLogStream::logInfo(*(CCLogStream **)(v16 + 24), "[dk] %s@%d:DynSAR: Umx: Mean of Ux over Twin\n", "getDynSARAggStats", 1998);
            uint64_t v16 = *((void *)this + 6);
          }
        }
        if (*(void *)(v16 + 24) && CCLogStream::shouldLog()) {
          CCLogStream::logInfo(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:DynSAR: Vx: Variance of Ux over Twin\n", "getDynSARAggStats", 1999);
        }
        snprintf(__str, 0x80uLL, "DynSAR: id %10s %4s ", "Ts", "Opt");
        strlcat(__dst, __str, 0x100uLL);
        *(_OWORD *)__str  = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        if (*((_WORD *)v6 + 6))
        {
          unsigned int v19 = 0;
          do
          {
            snprintf(__str, 0x80uLL, "%2s%u %2s%u %5s%u ", "U", v19, "Um", v19, "V", v19);
            strlcat(__dst, __str, 0x100uLL);
            *(_OWORD *)__str  = 0u;
            long long v41 = 0u;
            long long v42 = 0u;
            long long v43 = 0u;
            long long v44 = 0u;
            long long v45 = 0u;
            long long v46 = 0u;
            long long v47 = 0u;
            ++v19;
          }
          while (v19 < *((unsigned __int16 *)v6 + 6));
        }
        if (*(void *)(*((void *)this + 6) + 24) && CCLogStream::shouldLog()) {
          CCLogStream::logInfo(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:%s\n", "getDynSARAggStats", 2008, __dst);
        }
        long long v62 = 0u;
        long long v63 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        *(_OWORD *)__dst  = 0u;
        long long v49 = 0u;
        if (*((_WORD *)v6 + 5))
        {
          unint64_t v20 = 0;
          int v21 = 0;
          do
          {
            uint64_t v22 = (uint64_t)&v6[4 * v20 + 4];
            uint64_t v23 = *(void *)(v22 + 8);
            char v24 = *(unsigned char *)v22;
            uint64_t v25 = 84;
            if ((v24 & 8) == 0) {
              uint64_t v25 = 46;
            }
            uint64_t v26 = 77;
            if ((v24 & 4) == 0) {
              uint64_t v26 = 46;
            }
            uint64_t v37 = v25;
            uint64_t v27 = 70;
            if ((v24 & 2) == 0) {
              uint64_t v27 = 46;
            }
            BOOL v28 = (v24 & 1) == 0;
            uint64_t v29 = 80;
            if (v28) {
              uint64_t v29 = 46;
            }
            snprintf(__str, 0x80uLL, "DynSAR: %2u %10llu %c%c%c%c ", v20, v23, v29, v27, v26, v37);
            strlcat(__dst, __str, 0x100uLL);
            long long v30 = 0uLL;
            *(_OWORD *)__str  = 0u;
            long long v41 = 0u;
            long long v42 = 0u;
            long long v43 = 0u;
            long long v44 = 0u;
            long long v45 = 0u;
            long long v46 = 0u;
            long long v47 = 0u;
            if (*((_WORD *)v6 + 6))
            {
              unsigned int v31 = 0;
              do
              {
                snprintf(__str, 0x80uLL, "%3u %3u %6u ", v6[4 * v21 + 4 + 4 * v31 + v15], v6[4 * v21 + 6 + 4 * v31 + v15], v6[4 * v21 + 7 + 4 * v31 + v15]);
                strlcat(__dst, __str, 0x100uLL);
                long long v30 = 0uLL;
                *(_OWORD *)__str  = 0u;
                long long v41 = 0u;
                long long v42 = 0u;
                long long v43 = 0u;
                long long v44 = 0u;
                long long v45 = 0u;
                long long v46 = 0u;
                long long v47 = 0u;
                ++v31;
              }
              while (v31 < *((unsigned __int16 *)v6 + 6));
              v21 += v31;
            }
            if (*(void *)(*((void *)this + 6) + 24))
            {
              int v32 = CCLogStream::shouldLog();
              long long v30 = 0uLL;
              if (v32)
              {
                CCLogStream::logInfo(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:%s\n", "getDynSARAggStats", 2023, __dst);
                long long v30 = 0uLL;
              }
            }
            long long v62 = v30;
            long long v63 = v30;
            long long v60 = v30;
            long long v61 = v30;
            long long v58 = v30;
            long long v59 = v30;
            long long v56 = v30;
            long long v57 = v30;
            long long v54 = v30;
            long long v55 = v30;
            long long v52 = v30;
            long long v53 = v30;
            long long v50 = v30;
            long long v51 = v30;
            *(_OWORD *)__dst  = v30;
            long long v49 = v30;
            ++v20;
          }
          while (v20 < *((unsigned __int16 *)v6 + 5));
        }
        uint64_t v10 = *((void *)this + 6);
      }
      if (*(void *)(v10 + 24) && CCLogStream::shouldLog())
      {
        uint64_t v34 = (void *)*((void *)this + 6);
        uint64_t v35 = (CCLogStream *)v34[3];
        uint64_t v36 = (const char *)(*(uint64_t (**)(void, void))(*(void *)*v34 + 112))(*v34, 0);
        CCLogStream::logInfo(v35, "[dk] %s@%d:Get DSA Aggregated Stats, %s\n", "getDynSARAggStats", 2029, v36);
      }
      uint64_t v4 = 0;
      goto LABEL_72;
    }
    return 3758097085;
  }
  else
  {
    if (*(void *)(*((void *)this + 6) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlertIf(*(CCLogStream **)(*((void *)this + 6) + 24), 0x20uLL, "[dk] %s@%d:DynSAR: DSA NOT Enabled by Host!\n", "getDynSARAggStats", 1927);
    }
    return 0;
  }
}

uint64_t AppleBCMWLANTxPowerManager::getDynSARDetail(AppleBCMWLANTxPowerManager *this, unsigned int a2, unsigned int a3)
{
  if (AppleBCMWLANCore::checkForDynSARSupport(**((AppleBCMWLANCore ***)this + 6)))
  {
    uint64_t v6 = *((void *)this + 6);
    if (a3 >= 0xB)
    {
      if (*(void *)(v6 + 24) && (int shouldLog = CCLogStream::shouldLog(), v6 = *((void *)this + 6), shouldLog))
      {
        LOBYTE(aAppleBCMWLANWnmAdapter::free(this - 3) = 10;
        CCLogStream::logAlert(*(CCLogStream **)(v6 + 24), "[dk] %s@%d:DynSAR: Observation window size %d exceeds host limit, cap to %d\n", "getDynSARDetail", 2056, 10, 10);
        uint64_t v6 = *((void *)this + 6);
      }
      else
      {
        LOBYTE(aAppleBCMWLANWnmAdapter::free(this - 3) = 10;
      }
    }
    if (a2 >= 2)
    {
      if (*(void *)(v6 + 24) && (int v8 = CCLogStream::shouldLog(), v6 = *((void *)this + 6), v8))
      {
        CCLogStream::logAlert(*(CCLogStream **)(v6 + 24), "[dk] %s@%d:DynSAR: Invalid slice index %d, force it to slice %d\n", "getDynSARDetail", 2061, 0, 0);
        a2  = 0;
        uint64_t v6 = *((void *)this + 6);
      }
      else
      {
        a2  = 0;
      }
    }
    int MaxCmdRxPayload = AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(v6 + 16));
    uint64_t v10 = IOMallocZeroData();
    if (v10)
    {
      uint64_t v80 = 0;
      unsigned int v78 = a2;
      uint64_t v79 = 4;
      BYTE5(v80)  = a3;
      v77[0]  = &v78;
      v77[1]  = 20;
      if ((_WORD)MaxCmdRxPayload == 11) {
        unint64_t v11 = 0;
      }
      else {
        unint64_t v11 = (unsigned __int16)(MaxCmdRxPayload - 11) | ((unint64_t)(unsigned __int16)(MaxCmdRxPayload - 11) << 32);
      }
      uint64_t v73 = v10;
      if ((_WORD)MaxCmdRxPayload == 11) {
        uint64_t v12 = 0;
      }
      else {
        uint64_t v12 = v10;
      }
      v76[0]  = v12;
      v76[1]  = v11;
      uint64_t v13 = (*(uint64_t (**)(void))(***((void ***)this + 6) + 88))(**((void **)this + 6));
      if ((*(uint64_t (**)(uint64_t))(*(void *)v13 + 136))(v13))
      {
        v75[0]  = this;
        v75[1]  = AppleBCMWLANTxPowerManager::handleGetDynSARDetailAsyncCallback;
        v75[2]  = 0;
        uint64_t v14 = *(AppleBCMWLANCommander **)(*((void *)this + 6) + 16);
        int v74 = (MaxCmdRxPayload - 11) << 16;
        uint64_t v15 = AppleBCMWLANCommander::sendIOVarGet(v14, (uint64_t)"wlc:dynsar", (uint64_t)v77, (unsigned __int16 *)&v74, (uint64_t)v75, 0);
        if (v15)
        {
          uint64_t v16 = v15;
          if (*(void *)(*((void *)this + 6) + 24) && CCLogStream::shouldLog())
          {
            int v17 = (void *)*((void *)this + 6);
            int v18 = (CCLogStream *)v17[3];
            unsigned int v19 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v17 + 112))(*v17, v16);
            CCLogStream::logAlert(v18, "[dk] %s@%d:DynSAR: Failed to get DynSAR Detail, %s\n", "getDynSARDetail", 2234, v19);
          }
          goto LABEL_132;
        }
LABEL_120:
        if (*(void *)(*((void *)this + 6) + 24))
        {
          if (CCLogStream::shouldLog())
          {
            long long v62 = (void *)*((void *)this + 6);
            long long v63 = (CCLogStream *)v62[3];
            BOOL v64 = (const char *)(*(uint64_t (**)(void, void))(*(void *)*v62 + 112))(*v62, 0);
            CCLogStream::logInfo(v63, "[dk] %s@%d:DynSAR: Get DSA Detail of slice %d, %s\n", "getDynSARDetail", 2231, a2, v64);
          }
          uint64_t v16 = 0;
        }
        else
        {
          uint64_t v16 = 0;
        }
        goto LABEL_132;
      }
      uint64_t v20 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*((void *)this + 6) + 16), (uint64_t)"wlc:dynsar", (uint64_t)v77, (uint64_t)v76, 0);
      if (v20)
      {
        uint64_t v16 = v20;
        if (*(void *)(*((void *)this + 6) + 24) && CCLogStream::shouldLog()) {
          CCLogStream::logAlertIf(*(CCLogStream **)(*((void *)this + 6) + 24), 0x20uLL, "[dk] %s@%d:DynSAR: Failed to get DynSAR Details\n", "getDynSARDetail", 2101);
        }
        goto LABEL_132;
      }
      if (*(_WORD *)v73 == 4)
      {
        uint64_t v21 = *((void *)this + 6);
        uint64_t v22 = *(void *)(v21 + 24);
        if (a2 == *(unsigned __int8 *)(v73 + 14))
        {
          if (v22)
          {
            int v23 = CCLogStream::shouldLog();
            uint64_t v21 = *((void *)this + 6);
            if (v23)
            {
              CCLogStream::logInfo(*(CCLogStream **)(v21 + 24), "[dk] %s@%d:DynSAR: Details, slice %u monitor periods %u first sync %llu\n", "getDynSARDetail", 2117, *(unsigned __int8 *)(v73 + 14), *(unsigned __int8 *)(v73 + 13), *(void *)(v73 + 16));
              uint64_t v21 = *((void *)this + 6);
            }
          }
          unsigned int v69 = a2;
          if (*(void *)(v21 + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logInfo(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:DynSAR: P - Power optimization, M - no frame mute, F - Failsafe mode, T - Tx dutycycle limit\n", "getDynSARDetail", 2118);
          }
          char v24 = (unsigned char *)v73;
          if (*(unsigned char *)(v73 + 13))
          {
            unint64_t v25 = 0;
            uint64_t v26 = (void *)(v73 + 32);
            do
            {
              if (*v26)
              {
                if (*((_DWORD *)v26 - 1))
                {
                  if (*(void *)(*((void *)this + 6) + 24))
                  {
                    int v27 = CCLogStream::shouldLog();
                    char v24 = (unsigned char *)v73;
                    if (v27)
                    {
                      if ((*(unsigned char *)(v26 - 1) & 8) != 0) {
                        uint64_t v28 = 84;
                      }
                      else {
                        uint64_t v28 = 46;
                      }
                      if ((*(unsigned char *)(v26 - 1) & 4) != 0) {
                        uint64_t v29 = 77;
                      }
                      else {
                        uint64_t v29 = 46;
                      }
                      if ((*(unsigned char *)(v26 - 1) & 2) != 0) {
                        uint64_t v30 = 70;
                      }
                      else {
                        uint64_t v30 = 46;
                      }
                      if (*(unsigned char *)(v26 - 1)) {
                        uint64_t v31 = 80;
                      }
                      else {
                        uint64_t v31 = 46;
                      }
                      CCLogStream::logInfo(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:DynSAR: [%d] Opt %c%c%c%c TS %llu(us) Dur %u\n", "getDynSARDetail", 2127, v25, v31, v30, v29, v28, *v26, *((_DWORD *)v26 - 1));
                      char v24 = (unsigned char *)v73;
                    }
                  }
                }
              }
              ++v25;
              v26 += 2;
            }
            while (v25 < v24[13]);
          }
          int v32 = v24[14];
          if (v24[14])
          {
            int v66 = 0;
            int v67 = *(_DWORD *)(*((void *)this + 6) + 92372);
          }
          else
          {
            int v66 = *(_DWORD *)(*((void *)this + 6) + 92368);
            int v67 = 0;
          }
          if (v24[12])
          {
            uint64_t v33 = 0;
            unint64_t v72 = 0;
            int v70 = 0;
            int v68 = 0;
            do
            {
              uint64_t v34 = *((void *)this + 6);
              if (*(void *)(v34 + 24))
              {
                int v35 = CCLogStream::shouldLog();
                uint64_t v34 = *((void *)this + 6);
                if (v35)
                {
                  CCLogStream::logInfo(*(CCLogStream **)(v34 + 24), "[dk] %s@%d:DynSAR: Slice %d Core & Ant combined index %d Detail\n", "getDynSARDetail", 2138, *(unsigned __int8 *)(v73 + 14), v72);
                  uint64_t v34 = *((void *)this + 6);
                }
              }
              if (*(void *)(v34 + 24))
              {
                int v36 = CCLogStream::shouldLog();
                uint64_t v34 = *((void *)this + 6);
                if (v36)
                {
                  CCLogStream::logInfo(*(CCLogStream **)(v34 + 24), "[dk] %s@%d:DynSAR: %7s %9s %6s %8s %9s %5s %10s %10s %7s %6s %6s\n", "getDynSARDetail", 2139, "Opt", "TxDur", "%TxDC", "PAv:mw", "PlimAv:mw", "Util%", "Energy", "Qsar:mw*ms", "FS(us)", "Util_pred", "Util_hist");
                  uint64_t v34 = *((void *)this + 6);
                }
              }
              if (*(void *)(v34 + 24) && CCLogStream::shouldLog()) {
                CCLogStream::logInfo(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:DynSAR: ---------------------------------------------------------------------------------------------\n", "getDynSARDetail", 2140);
              }
              uint64_t v37 = (unsigned __int8 *)v73;
              int v32 = *(unsigned __int8 *)(v73 + 14);
              if (*(unsigned char *)(v73 + 14)) {
                *(_DWORD *)(*((void *)this + 6) + 92372)  = v67;
              }
              else {
                *(_DWORD *)(*((void *)this + 6) + 92368)  = v66;
              }
              LOBYTE(v38)  = *(unsigned char *)(v73 + 13);
              uint64_t v71 = v33;
              if ((_BYTE)v38)
              {
                uint64_t v39 = 0;
                unint64_t v40 = 0;
                do
                {
                  long long v41 = &v37[v39];
                  if (*(void *)&v37[v39 + 32])
                  {
                    unint64_t v42 = *((unsigned int *)v41 + 7);
                    if (v42)
                    {
                      long long v43 = (unsigned int *)&v37[v33];
                      unint64_t v44 = *(unsigned int *)&v37[v33 + 360];
                      if (v44)
                      {
                        unint64_t v45 = ((v44 >> 1) + 100 * v43[89]) / v44;
                        unint64_t v46 = ((v42 >> 1) + 1000 * v44) / v42;
                        unint64_t v47 = (v46 * v45 + 50) / 0x64;
                        unint64_t v48 = ((v42 >> 1) + 100 * v43[86]) / v42;
                        if (*(void *)(*((void *)this + 6) + 24))
                        {
                          int v49 = CCLogStream::shouldLog();
                          uint64_t v37 = (unsigned __int8 *)v73;
                          if (v49)
                          {
                            uint64_t v54 = 84;
                            if ((v41[24] & 8) == 0) {
                              uint64_t v54 = 46;
                            }
                            uint64_t v55 = 77;
                            if ((v41[24] & 4) == 0) {
                              uint64_t v55 = 46;
                            }
                            uint64_t v65 = v54;
                            uint64_t v56 = 70;
                            if ((v41[24] & 2) == 0) {
                              uint64_t v56 = 46;
                            }
                            uint64_t v57 = 80;
                            if ((v41[24] & 1) == 0) {
                              uint64_t v57 = 46;
                            }
                            CCLogStream::logInfo(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:DynSAR: %c%c%c%c %2u %9u %6llu %8llu %9llu %5llu %10u %10u %7u %6u %6u\n", "getDynSARDetail", 2169, v57, v56, v55, v65, v40, v43[86], v48, (v46 * v45 + 50) / 0x64, v46, v45, v43[89], v43[90], *(unsigned __int16 *)(v73 + v33 + 364), *(unsigned __int8 *)(v73 + v33 + 367), *(unsigned __int8 *)(v73 + v33 + 366));
                            uint64_t v37 = (unsigned __int8 *)v73;
                          }
                        }
                        int v32 = v37[14];
                        uint64_t v50 = *((void *)v41 + 4);
                        uint64_t v51 = *((void *)this + 6);
                        if (v37[14])
                        {
                          uint64_t v52 = 11520 * v72;
                          *(void *)(v51 + 11520 * v72 + 32 * *(unsigned int *)(v51 + 92372) + 46288)  = v50;
                          *(unsigned char *)(*((void *)this + 6)
                                   + v52
                                   + 32 * *(unsigned int *)(*((void *)this + 6) + 92372)
                                   + 46318)  = v41[24];
                          *(_DWORD *)(*((void *)this + 6)
                                    + v52
                                    + 32 * *(unsigned int *)(*((void *)this + 6) + 92372)
                                    + 46296)  = v43[86];
                          *(unsigned char *)(*((void *)this + 6)
                                   + v52
                                   + 32 * *(unsigned int *)(*((void *)this + 6) + 92372)
                                   + 46319)  = v48;
                          *(_DWORD *)(*((void *)this + 6)
                                    + v52
                                    + 32 * *(unsigned int *)(*((void *)this + 6) + 92372)
                                    + 46300)  = v46;
                          *(_DWORD *)(*((void *)this + 6)
                                    + v52
                                    + 32 * *(unsigned int *)(*((void *)this + 6) + 92372)
                                    + 46304)  = v47;
                          *(unsigned char *)(*((void *)this + 6)
                                   + v52
                                   + 32 * *(unsigned int *)(*((void *)this + 6) + 92372)
                                   + 46316)  = v45;
                          *(unsigned char *)(*((void *)this + 6)
                                   + v52
                                   + 32 * *(unsigned int *)(*((void *)this + 6) + 92372)
                                   + 46317)  = v37[v33 + 366];
                          *(_DWORD *)(*((void *)this + 6)
                                    + v52
                                    + 32 * *(unsigned int *)(*((void *)this + 6) + 92372)
                                    + 46308)  = v43[89];
                          *(_DWORD *)(*((void *)this + 6)
                                    + v52
                                    + 32 * (*(_DWORD *)(*((void *)this + 6) + 92372))++
                                    + 46312)  = v43[90];
                          int v38 = v37[13];
                          if (!v72 && v40 + 1 == v38) {
                            int v70 = *(_DWORD *)(*((void *)this + 6) + 92372);
                          }
                        }
                        else
                        {
                          uint64_t v53 = 11520 * v72;
                          *(void *)(v51 + 11520 * v72 + 32 * *(unsigned int *)(v51 + 92368) + 208)  = v50;
                          *(unsigned char *)(*((void *)this + 6)
                                   + v53
                                   + 32 * *(unsigned int *)(*((void *)this + 6) + 92368)
                                   + 238)  = v41[24];
                          *(_DWORD *)(*((void *)this + 6)
                                    + v53
                                    + 32 * *(unsigned int *)(*((void *)this + 6) + 92368)
                                    + 216)  = v43[86];
                          *(unsigned char *)(*((void *)this + 6)
                                   + v53
                                   + 32 * *(unsigned int *)(*((void *)this + 6) + 92368)
                                   + 239)  = v48;
                          *(_DWORD *)(*((void *)this + 6)
                                    + v53
                                    + 32 * *(unsigned int *)(*((void *)this + 6) + 92368)
                                    + 220)  = v46;
                          *(_DWORD *)(*((void *)this + 6)
                                    + v53
                                    + 32 * *(unsigned int *)(*((void *)this + 6) + 92368)
                                    + 224)  = v47;
                          *(unsigned char *)(*((void *)this + 6)
                                   + v53
                                   + 32 * *(unsigned int *)(*((void *)this + 6) + 92368)
                                   + 236)  = v45;
                          *(unsigned char *)(*((void *)this + 6)
                                   + v53
                                   + 32 * *(unsigned int *)(*((void *)this + 6) + 92368)
                                   + 237)  = v37[v33 + 366];
                          *(_DWORD *)(*((void *)this + 6)
                                    + v53
                                    + 32 * *(unsigned int *)(*((void *)this + 6) + 92368)
                                    + 228)  = v43[89];
                          *(_DWORD *)(*((void *)this + 6)
                                    + v53
                                    + 32 * (*(_DWORD *)(*((void *)this + 6) + 92368))++
                                    + 232)  = v43[90];
                          int v38 = v37[13];
                          if (!v72 && v40 + 1 == v38)
                          {
                            int v32 = 0;
                            int v68 = *(_DWORD *)(*((void *)this + 6) + 92368);
                          }
                        }
                      }
                    }
                  }
                  ++v40;
                  v39 += 16;
                  v33 += 96;
                }
                while (v40 < v38);
              }
              uint64_t v33 = v71 + 24;
              ++v72;
              a2  = v69;
            }
            while (v72 < v37[12]);
          }
          else
          {
            int v68 = 0;
            int v70 = 0;
          }
          uint64_t v58 = *((void *)this + 6);
          long long v59 = (_DWORD *)(v58 + 92368);
          if (v32)
          {
            if (v70 == *(_DWORD *)(v58 + 92372))
            {
              if (v70 != 360) {
                goto LABEL_120;
              }
              *(_DWORD *)(v58 + 92372)  = 0;
              long long v60 = (_DWORD *)(*((void *)this + 6) + 92380);
              goto LABEL_118;
            }
            if (*(void *)(v58 + 24))
            {
              if (CCLogStream::shouldLog()) {
                CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:DynSAR: Slice 1 DynSAR Detail Report index mismatch");
              }
              goto LABEL_131;
            }
          }
          else
          {
            if (v68 == *v59)
            {
              if (v68 != 360) {
                goto LABEL_120;
              }
              _DWORD *v59 = 0;
              long long v60 = (_DWORD *)(*((void *)this + 6) + 92376);
LABEL_118:
              if (!*v60) {
                *long long v60 = 1;
              }
              goto LABEL_120;
            }
            if (*(void *)(v58 + 24))
            {
              if (CCLogStream::shouldLog()) {
                CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:DynSAR: Slice 0 DynSAR Detail Report index mismatch");
              }
              goto LABEL_131;
            }
          }
LABEL_134:
          uint64_t v16 = 3758097084;
          goto LABEL_132;
        }
        if (!v22) {
          goto LABEL_134;
        }
        if (CCLogStream::shouldLog())
        {
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:DynSAR: Slice index mismatch, input %d, output %d\n");
          goto LABEL_134;
        }
      }
      else
      {
        if (!*(void *)(*((void *)this + 6) + 24)) {
          goto LABEL_134;
        }
        if (CCLogStream::shouldLog())
        {
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:DynSAR: Sub Command ID mismatch, input %d, output %d\n");
          goto LABEL_134;
        }
      }
LABEL_131:
      uint64_t v16 = 3758097084;
LABEL_132:
      IOFreeData();
      return v16;
    }
    return 3758097085;
  }
  else
  {
    if (*(void *)(*((void *)this + 6) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlertIf(*(CCLogStream **)(*((void *)this + 6) + 24), 0x20uLL, "[dk] %s@%d:DynSAR: DSA NOT Enabled by Host!\n", "getDynSARDetail", 2050);
    }
    return 0;
  }
}

uint64_t AppleBCMWLANTxPowerManager::getDynSARDetailV2(AppleBCMWLANTxPowerManager *this, unsigned int a2, unsigned int a3)
{
  if (AppleBCMWLANCore::checkForDynSARSupport(**((AppleBCMWLANCore ***)this + 6)))
  {
    uint64_t v6 = *((void *)this + 6);
    if (a3 >= 0xB)
    {
      if (*(void *)(v6 + 24) && (int shouldLog = CCLogStream::shouldLog(), v6 = *((void *)this + 6), shouldLog))
      {
        LOBYTE(aAppleBCMWLANWnmAdapter::free(this - 3) = 10;
        CCLogStream::logAlert(*(CCLogStream **)(v6 + 24), "[dk] %s@%d:DynSAR: Observation window size %d exceeds host limit, cap to %d\n", "getDynSARDetailV2", 2259, 10, 10);
        uint64_t v6 = *((void *)this + 6);
      }
      else
      {
        LOBYTE(aAppleBCMWLANWnmAdapter::free(this - 3) = 10;
      }
    }
    if (a2 >= 2)
    {
      if (*(void *)(v6 + 24) && (int v8 = CCLogStream::shouldLog(), v6 = *((void *)this + 6), v8))
      {
        CCLogStream::logAlert(*(CCLogStream **)(v6 + 24), "[dk] %s@%d:DynSAR: Invalid slice index %d, force it to slice %d\n", "getDynSARDetailV2", 2264, 0, 0);
        a2  = 0;
        uint64_t v6 = *((void *)this + 6);
      }
      else
      {
        a2  = 0;
      }
    }
    int MaxCmdRxPayload = AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(v6 + 16));
    uint64_t v10 = IOMallocZeroData();
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v74 = 0;
      unsigned int v72 = a2;
      uint64_t v73 = 4;
      BYTE5(v74)  = a3;
      v71[0]  = &v72;
      v71[1]  = 20;
      if ((_WORD)MaxCmdRxPayload == 11) {
        unint64_t v12 = 0;
      }
      else {
        unint64_t v12 = (unsigned __int16)(MaxCmdRxPayload - 11) | ((unint64_t)(unsigned __int16)(MaxCmdRxPayload - 11) << 32);
      }
      if ((_WORD)MaxCmdRxPayload == 11) {
        uint64_t v13 = 0;
      }
      else {
        uint64_t v13 = v10;
      }
      v70[0]  = v13;
      v70[1]  = v12;
      uint64_t v14 = (*(uint64_t (**)(void))(***((void ***)this + 6) + 88))(**((void **)this + 6));
      if ((*(uint64_t (**)(uint64_t))(*(void *)v14 + 136))(v14))
      {
        v69[0]  = this;
        v69[1]  = AppleBCMWLANTxPowerManager::handleGetDynSARDetailAsyncCallbackV2;
        v69[2]  = 0;
        uint64_t v15 = *(AppleBCMWLANCommander **)(*((void *)this + 6) + 16);
        int v68 = (MaxCmdRxPayload - 11) << 16;
        uint64_t v16 = AppleBCMWLANCommander::sendIOVarGet(v15, (uint64_t)"wlc:dynsar", (uint64_t)v71, (unsigned __int16 *)&v68, (uint64_t)v69, 0);
        if (v16)
        {
          uint64_t v17 = v16;
          if (*(void *)(*((void *)this + 6) + 24) && CCLogStream::shouldLog())
          {
            int v18 = (void *)*((void *)this + 6);
            unsigned int v19 = (CCLogStream *)v18[3];
            uint64_t v20 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v18 + 112))(*v18, v17);
            CCLogStream::logAlert(v19, "[dk] %s@%d:DynSAR: Failed to get DynSAR Detail, %s\n", "getDynSARDetailV2", 2436, v20);
          }
          goto LABEL_129;
        }
LABEL_118:
        if (*(void *)(*((void *)this + 6) + 24) && CCLogStream::shouldLog())
        {
          uint64_t v56 = (void *)*((void *)this + 6);
          uint64_t v57 = (CCLogStream *)v56[3];
          uint64_t v58 = (const char *)(*(uint64_t (**)(void, void))(*(void *)*v56 + 112))(*v56, 0);
          CCLogStream::logInfo(v57, "[dk] %s@%d:DynSAR: Get DSA Detail of slice %d, %s\n", "getDynSARDetailV2", 2433, a2, v58);
        }
        uint64_t v17 = 0;
        goto LABEL_129;
      }
      uint64_t v21 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*((void *)this + 6) + 16), (uint64_t)"wlc:dynsar", (uint64_t)v71, (uint64_t)v70, 0);
      if (v21)
      {
        uint64_t v17 = v21;
        if (*(void *)(*((void *)this + 6) + 24) && CCLogStream::shouldLog()) {
          CCLogStream::logAlertIf(*(CCLogStream **)(*((void *)this + 6) + 24), 0x20uLL, "[dk] %s@%d:DynSAR: Failed to get DynSAR Details\n", "getDynSARDetailV2", 2304);
        }
        goto LABEL_129;
      }
      if (*(_WORD *)v11 == 4)
      {
        uint64_t v22 = *((void *)this + 6);
        uint64_t v23 = *(void *)(v22 + 24);
        if (a2 == *(unsigned __int8 *)(v11 + 14))
        {
          if (v23)
          {
            int v24 = CCLogStream::shouldLog();
            uint64_t v22 = *((void *)this + 6);
            if (v24)
            {
              CCLogStream::logInfo(*(CCLogStream **)(v22 + 24), "[dk] %s@%d:DynSAR: Details, slice %u monitor periods %u first sync %llu\n", "getDynSARDetailV2", 2321, *(unsigned __int8 *)(v11 + 14), *(unsigned __int8 *)(v11 + 13), *(void *)(v11 + 16));
              uint64_t v22 = *((void *)this + 6);
            }
          }
          unsigned int v63 = a2;
          if (*(void *)(v22 + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logInfo(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:DynSAR: P - Power optimization, M - no frame mute, F - Failsafe mode, T - Tx dutycycle limit\n", "getDynSARDetailV2", 2322);
          }
          if (*(unsigned char *)(v11 + 13))
          {
            unint64_t v25 = 0;
            uint64_t v26 = (void *)(v11 + 32);
            do
            {
              if (*v26
                && *((_DWORD *)v26 - 1)
                && *(void *)(*((void *)this + 6) + 24)
                && CCLogStream::shouldLog())
              {
                uint64_t v27 = 84;
                if ((*(unsigned char *)(v26 - 1) & 8) == 0) {
                  uint64_t v27 = 46;
                }
                uint64_t v60 = v27;
                if ((*(unsigned char *)(v26 - 1) & 4) != 0) {
                  uint64_t v28 = 77;
                }
                else {
                  uint64_t v28 = 46;
                }
                if ((*(unsigned char *)(v26 - 1) & 2) != 0) {
                  uint64_t v29 = 70;
                }
                else {
                  uint64_t v29 = 46;
                }
                if (*(unsigned char *)(v26 - 1)) {
                  uint64_t v30 = 80;
                }
                else {
                  uint64_t v30 = 46;
                }
                CCLogStream::logInfo(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:DynSAR: [%d] Opt %c%c%c%c TS %llu(us) Dur %u\n", "getDynSARDetailV2", 2331, v25, v30, v29, v28, v60, *v26, *((_DWORD *)v26 - 1));
              }
              ++v25;
              v26 += 2;
            }
            while (v25 < *(unsigned __int8 *)(v11 + 13));
          }
          int v31 = *(unsigned __int8 *)(v11 + 14);
          if (*(unsigned char *)(v11 + 14))
          {
            int v61 = 0;
            int v62 = *(_DWORD *)(*((void *)this + 6) + 92372);
          }
          else
          {
            int v61 = *(_DWORD *)(*((void *)this + 6) + 92368);
            int v62 = 0;
          }
          if (*(unsigned char *)(v11 + 12))
          {
            uint64_t v32 = 0;
            unint64_t v67 = 0;
            int v66 = 0;
            int v64 = 0;
            do
            {
              uint64_t v33 = *((void *)this + 6);
              if (*(void *)(v33 + 24))
              {
                int v34 = CCLogStream::shouldLog();
                uint64_t v33 = *((void *)this + 6);
                if (v34)
                {
                  CCLogStream::logInfo(*(CCLogStream **)(v33 + 24), "[dk] %s@%d:DynSAR: Slice %d Core & Ant combined index %d Detail\n", "getDynSARDetailV2", 2342, *(unsigned __int8 *)(v11 + 14), v67);
                  uint64_t v33 = *((void *)this + 6);
                }
              }
              if (*(void *)(v33 + 24))
              {
                int v35 = CCLogStream::shouldLog();
                uint64_t v33 = *((void *)this + 6);
                if (v35)
                {
                  CCLogStream::logInfo(*(CCLogStream **)(v33 + 24), "[dk] %s@%d:DynSAR: %7s %9s %6s %8s %9s %5s %10s %10s %7s %6s %6s\n", "getDynSARDetailV2", 2343, "Opt", "TxDur", "%TxDC", "PAv:mw", "PlimAv:mw", "Util%", "Energy", "Qsar:mw*ms", "FS(us)", "Util_pred", "Util_hist");
                  uint64_t v33 = *((void *)this + 6);
                }
              }
              if (*(void *)(v33 + 24) && CCLogStream::shouldLog()) {
                CCLogStream::logInfo(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:DynSAR: ---------------------------------------------------------------------------------------------\n", "getDynSARDetailV2", 2344);
              }
              int v31 = *(unsigned __int8 *)(v11 + 14);
              if (*(unsigned char *)(v11 + 14)) {
                *(_DWORD *)(*((void *)this + 6) + 92372)  = v62;
              }
              else {
                *(_DWORD *)(*((void *)this + 6) + 92368)  = v61;
              }
              LOBYTE(v36)  = *(unsigned char *)(v11 + 13);
              uint64_t v65 = v32;
              if ((_BYTE)v36)
              {
                uint64_t v37 = 0;
                unint64_t v38 = 0;
                do
                {
                  uint64_t v39 = v11 + v37;
                  if (*(void *)(v11 + v37 + 32))
                  {
                    unint64_t v40 = *(unsigned int *)(v39 + 28);
                    if (v40)
                    {
                      uint64_t v41 = v11 + v32;
                      __int16 v42 = *(_WORD *)(v11 + v32 + 348) / 0xAu;
                      unint64_t v43 = ((v40 >> 1) + 100 * *(unsigned int *)(v11 + v32 + 344)) / v40;
                      if (*(void *)(*((void *)this + 6) + 24) && CCLogStream::shouldLog())
                      {
                        uint64_t v48 = 84;
                        if ((*(unsigned char *)(v39 + 24) & 8) == 0) {
                          uint64_t v48 = 46;
                        }
                        uint64_t v49 = 77;
                        if ((*(unsigned char *)(v39 + 24) & 4) == 0) {
                          uint64_t v49 = 46;
                        }
                        uint64_t v59 = v48;
                        uint64_t v50 = 70;
                        if ((*(unsigned char *)(v39 + 24) & 2) == 0) {
                          uint64_t v50 = 46;
                        }
                        uint64_t v51 = 80;
                        if ((*(unsigned char *)(v39 + 24) & 1) == 0) {
                          uint64_t v51 = 46;
                        }
                        CCLogStream::logInfo(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:DynSAR: %c%c%c%c %2u %9u %6u %8s %9s %5u %10s %10s %7s %6u %6u\n", "getDynSARDetailV2", 2371, v51, v50, v49, v59, v38, *(_DWORD *)(v41 + 344), v43, "N/A", "N/A", v42, "N/A", "N/A", "N/A", *(unsigned __int16 *)(v11 + v32 + 352) / 0xAu, *(unsigned __int16 *)(v11 + v32 + 350) / 0xAu);
                      }
                      int v31 = *(unsigned __int8 *)(v11 + 14);
                      uint64_t v44 = *(void *)(v39 + 32);
                      uint64_t v45 = *((void *)this + 6);
                      if (*(unsigned char *)(v11 + 14))
                      {
                        uint64_t v46 = 11520 * v67;
                        *(void *)(v45 + 11520 * v67 + 32 * *(unsigned int *)(v45 + 92372) + 46288)  = v44;
                        *(unsigned char *)(*((void *)this + 6)
                                 + v46
                                 + 32 * *(unsigned int *)(*((void *)this + 6) + 92372)
                                 + 46318)  = *(unsigned char *)(v39 + 24);
                        *(_DWORD *)(*((void *)this + 6)
                                  + v46
                                  + 32 * *(unsigned int *)(*((void *)this + 6) + 92372)
                                  + 46296)  = *(_DWORD *)(v41 + 344);
                        *(unsigned char *)(*((void *)this + 6)
                                 + v46
                                 + 32 * *(unsigned int *)(*((void *)this + 6) + 92372)
                                 + 46319)  = v43;
                        *(_DWORD *)(*((void *)this + 6)
                                  + v46
                                  + 32 * *(unsigned int *)(*((void *)this + 6) + 92372)
                                  + 46300)  = 255;
                        *(_DWORD *)(*((void *)this + 6)
                                  + v46
                                  + 32 * *(unsigned int *)(*((void *)this + 6) + 92372)
                                  + 46304)  = 255;
                        *(unsigned char *)(*((void *)this + 6)
                                 + v46
                                 + 32 * *(unsigned int *)(*((void *)this + 6) + 92372)
                                 + 46316)  = v42;
                        *(unsigned char *)(*((void *)this + 6)
                                 + v46
                                 + 32 * *(unsigned int *)(*((void *)this + 6) + 92372)
                                 + 46317)  = *(_WORD *)(v11 + v32 + 350) / 0xAu;
                        *(_DWORD *)(*((void *)this + 6)
                                  + v46
                                  + 32 * *(unsigned int *)(*((void *)this + 6) + 92372)
                                  + 46308)  = 255;
                        *(_DWORD *)(*((void *)this + 6)
                                  + v46
                                  + 32 * (*(_DWORD *)(*((void *)this + 6) + 92372))++
                                  + 46312)  = 255;
                        int v36 = *(unsigned __int8 *)(v11 + 13);
                        if (!v67 && v38 + 1 == v36) {
                          int v66 = *(_DWORD *)(*((void *)this + 6) + 92372);
                        }
                      }
                      else
                      {
                        uint64_t v47 = 11520 * v67;
                        *(void *)(v45 + 11520 * v67 + 32 * *(unsigned int *)(v45 + 92368) + 208)  = v44;
                        *(unsigned char *)(*((void *)this + 6)
                                 + v47
                                 + 32 * *(unsigned int *)(*((void *)this + 6) + 92368)
                                 + 238)  = *(unsigned char *)(v39 + 24);
                        *(_DWORD *)(*((void *)this + 6)
                                  + v47
                                  + 32 * *(unsigned int *)(*((void *)this + 6) + 92368)
                                  + 216)  = *(_DWORD *)(v41 + 344);
                        *(unsigned char *)(*((void *)this + 6)
                                 + v47
                                 + 32 * *(unsigned int *)(*((void *)this + 6) + 92368)
                                 + 239)  = v43;
                        *(_DWORD *)(*((void *)this + 6)
                                  + v47
                                  + 32 * *(unsigned int *)(*((void *)this + 6) + 92368)
                                  + 220)  = 255;
                        *(_DWORD *)(*((void *)this + 6)
                                  + v47
                                  + 32 * *(unsigned int *)(*((void *)this + 6) + 92368)
                                  + 224)  = 255;
                        *(unsigned char *)(*((void *)this + 6)
                                 + v47
                                 + 32 * *(unsigned int *)(*((void *)this + 6) + 92368)
                                 + 236)  = v42;
                        *(unsigned char *)(*((void *)this + 6)
                                 + v47
                                 + 32 * *(unsigned int *)(*((void *)this + 6) + 92368)
                                 + 237)  = *(_WORD *)(v11 + v32 + 350) / 0xAu;
                        *(_DWORD *)(*((void *)this + 6)
                                  + v47
                                  + 32 * *(unsigned int *)(*((void *)this + 6) + 92368)
                                  + 228)  = 255;
                        *(_DWORD *)(*((void *)this + 6)
                                  + v47
                                  + 32 * (*(_DWORD *)(*((void *)this + 6) + 92368))++
                                  + 232)  = 255;
                        int v36 = *(unsigned __int8 *)(v11 + 13);
                        if (!v67 && v38 + 1 == v36)
                        {
                          int v31 = 0;
                          int v64 = *(_DWORD *)(*((void *)this + 6) + 92368);
                        }
                      }
                    }
                  }
                  ++v38;
                  v37 += 16;
                  v32 += 48;
                }
                while (v38 < v36);
              }
              uint64_t v32 = v65 + 12;
              ++v67;
              a2  = v63;
            }
            while (v67 < *(unsigned __int8 *)(v11 + 12));
          }
          else
          {
            int v64 = 0;
            int v66 = 0;
          }
          uint64_t v52 = *((void *)this + 6);
          uint64_t v53 = (_DWORD *)(v52 + 92368);
          if (v31)
          {
            if (v66 == *(_DWORD *)(v52 + 92372))
            {
              if (v66 != 360) {
                goto LABEL_118;
              }
              *(_DWORD *)(v52 + 92372)  = 0;
              uint64_t v54 = (_DWORD *)(*((void *)this + 6) + 92380);
              goto LABEL_116;
            }
            if (*(void *)(v52 + 24) && CCLogStream::shouldLog()) {
              CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:DynSAR: Slice 1 DynSAR Detail Report index mismatch");
            }
          }
          else
          {
            if (v64 == *v53)
            {
              if (v64 != 360) {
                goto LABEL_118;
              }
              _DWORD *v53 = 0;
              uint64_t v54 = (_DWORD *)(*((void *)this + 6) + 92376);
LABEL_116:
              if (!*v54) {
                _DWORD *v54 = 1;
              }
              goto LABEL_118;
            }
            if (*(void *)(v52 + 24) && CCLogStream::shouldLog()) {
              CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:DynSAR: Slice 0 DynSAR Detail Report index mismatch");
            }
          }
        }
        else if (v23 && CCLogStream::shouldLog())
        {
          CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:DynSAR: Slice index mismatch, input %d, output %d\n");
        }
      }
      else if (*(void *)(*((void *)this + 6) + 24) && CCLogStream::shouldLog())
      {
        CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 24), "[dk] %s@%d:DynSAR: Sub Command ID mismatch, input %d, output %d\n");
      }
      uint64_t v17 = 3758097084;
LABEL_129:
      IOFreeData();
      return v17;
    }
    return 3758097085;
  }
  else
  {
    if (*(void *)(*((void *)this + 6) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlertIf(*(CCLogStream **)(*((void *)this + 6) + 24), 0x20uLL, "[dk] %s@%d:DynSAR: DSA NOT Enabled by Host!\n", "getDynSARDetailV2", 2253);
    }
    return 0;
  }
}

uint64_t AppleBCMWLANTxPowerManager::handleDynSAREventToPopulateUnsharedTxDCUtil(uint64_t a1, unsigned int *a2)
{
  BOOL v4 = AppleBCMWLANCore::is4399Up(**(AppleBCMWLANCore ***)(a1 + 48));
  if (AppleBCMWLANCore::checkForDynSARSupport(**(AppleBCMWLANCore ***)(a1 + 48)))
  {
    if (v4) {
      uint64_t v5 = 168;
    }
    else {
      uint64_t v5 = 200;
    }
    uint64_t v6 = (_DWORD *)IOMallocZeroData();
    if (v6)
    {
      uint64_t v7 = v6;
      _DWORD *v6 = 3;
      v51[0]  = v6;
      v51[1]  = v5;
      v50[0]  = v6;
      v50[1]  = v5 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v5 << 32);
      uint64_t v8 = (*(uint64_t (**)(void))(***(void ***)(a1 + 48) + 88))(**(void **)(a1 + 48));
      if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 136))(v8))
      {
        v49[0]  = a1;
        v49[1]  = AppleBCMWLANTxPowerManager::handleDynSAREventToPopulateUnsharedTxDCUtilAsyncCallback;
        v49[2]  = a2;
        uint64_t v9 = *(AppleBCMWLANCommander **)(*(void *)(a1 + 48) + 16);
        int v48 = v5 << 16;
        int v10 = AppleBCMWLANCommander::sendIOVarGet(v9, (uint64_t)"dynsar", (uint64_t)v51, (unsigned __int16 *)&v48, (uint64_t)v49, 0);
        if (v10)
        {
          int v11 = v10;
          if (*(void *)(*(void *)(a1 + 48) + 24))
          {
            if (CCLogStream::shouldLog()) {
              CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d: Failed GET IOCTL, cret[0x%08x]\n", "handleDynSAREventToPopulateUnsharedTxDCUtil", 2613, v11);
            }
          }
        }
        goto LABEL_11;
      }
      uint64_t v13 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*(void *)(a1 + 48) + 16), (uint64_t)"dynsar", (uint64_t)v51, (uint64_t)v50, 0);
      if (v13)
      {
        uint64_t v12 = v13;
        if (*(void *)(*(void *)(a1 + 48) + 24) && CCLogStream::shouldLog()) {
          CCLogStream::logAlertIf(*(CCLogStream **)(*(void *)(a1 + 48) + 24), 0x20uLL, "[dk] %s@%d:DynSAR: Failed to get DynSAR Summary\n", "handleDynSAREventToPopulateUnsharedTxDCUtil", 2619);
        }
        goto LABEL_36;
      }
      if (*(_WORD *)v7 != 3)
      {
        if (*(void *)(*(void *)(a1 + 48) + 24) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Sub Command ID mismatch, input %d, output %d\n");
        }
        goto LABEL_35;
      }
      uint64_t v15 = (unsigned __int16 *)(v7 + 2);
      int v14 = *((unsigned __int16 *)v7 + 4);
      BOOL v16 = v14 == 4 || v14 == 2;
      if (!v16 || *((unsigned char *)v7 + 35) != 2 || *((unsigned __int8 *)v7 + 36) >= 9u)
      {
        if (*(void *)(*(void *)(a1 + 48) + 24) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Invalid version or fields for DynSAR summary response\n");
        }
LABEL_35:
        uint64_t v12 = 3758097084;
        goto LABEL_36;
      }
      if (v14 == 4)
      {
        uint64_t v19 = *((unsigned __int8 *)v7 + 38);
        if (v19 + 16 * (unint64_t)*((unsigned __int8 *)v7 + 32) > *((unsigned __int16 *)v7 + 5))
        {
          if (*(void *)(*(void *)(a1 + 48) + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Invalid FW length detected for DYNSAR_CNT_VERSION_V4!\n");
          }
          goto LABEL_35;
        }
        uint64_t v20 = 0;
        uint64_t v21 = (char *)v15 + v19;
      }
      else if (v14 == 2)
      {
        uint64_t v18 = *((unsigned __int8 *)v7 + 38);
        if (v18 + 24 * (unint64_t)*((unsigned __int8 *)v7 + 32) > *((unsigned __int16 *)v7 + 5))
        {
          if (*(void *)(*(void *)(a1 + 48) + 24) && CCLogStream::shouldLog()) {
            CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Invalid FW length detected for DYNSAR_CNT_VERSION_V2!\n");
          }
          goto LABEL_35;
        }
        uint64_t v21 = 0;
        uint64_t v20 = (char *)v15 + v18;
      }
      else
      {
        if (*(void *)(*(void *)(a1 + 48) + 24) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Dynamic SAR Summary invalid version\n", "handleDynSAREventToPopulateUnsharedTxDCUtil", 2651);
        }
        uint64_t v20 = 0;
        uint64_t v21 = 0;
      }
      if (!v7[3]) {
        goto LABEL_11;
      }
      unsigned int v22 = *((unsigned __int8 *)v7 + 32);
      if (*((unsigned char *)v7 + 32))
      {
        unsigned int v23 = 0;
        do
        {
          uint64_t v24 = v23 + *a2 * v22;
          int v25 = *v15;
          if (v25 == 4)
          {
            if (v23 == 2)
            {
              unint64_t v36 = v7[3];
              if (v36) {
                unint64_t v37 = 100 * (unint64_t)*(unsigned int *)&v21[8 * v24] / v36;
              }
              else {
                LOBYTE(v37)  = 0;
              }
              *((unsigned char *)a2 + 72)  = v37;
              *((unsigned char *)a2 + 7AppleBCMWLANWnmAdapter::free(this - 3) = *(_WORD *)&v21[8 * v24 + 4] / 0xAu;
            }
            else if (v23 == 1)
            {
              unint64_t v38 = v7[3];
              if (v38) {
                unint64_t v39 = 100 * (unint64_t)*(unsigned int *)&v21[8 * v24] / v38;
              }
              else {
                LOBYTE(v39)  = 0;
              }
              *((unsigned char *)a2 + 70)  = v39;
              *((unsigned char *)a2 + 71)  = *(_WORD *)&v21[8 * v24 + 4] / 0xAu;
            }
            else if (v23)
            {
              unint64_t v40 = v7[3];
              if (v40) {
                unint64_t v41 = 100 * (unint64_t)*(unsigned int *)&v21[8 * v24] / v40;
              }
              else {
                LOBYTE(v41)  = 0;
              }
              *((unsigned char *)a2 + 74)  = v41;
              *((unsigned char *)a2 + 75)  = *(_WORD *)&v21[8 * v24 + 4] / 0xAu;
            }
            else
            {
              unint64_t v28 = v7[3];
              if (v28) {
                unint64_t v29 = 100 * (unint64_t)*(unsigned int *)&v21[8 * v24] / v28;
              }
              else {
                LOBYTE(v29)  = 0;
              }
              *((unsigned char *)a2 + 68)  = v29;
              *((unsigned char *)a2 + 69)  = *(_WORD *)&v21[8 * v24 + 4] / 0xAu;
            }
          }
          else if (v25 == 2)
          {
            if (v23 == 2)
            {
              unint64_t v30 = v7[3];
              if (v30) {
                unint64_t v31 = 100 * (unint64_t)*(unsigned int *)&v20[12 * v24 + 8] / v30;
              }
              else {
                LOBYTE(v31)  = 0;
              }
              *((unsigned char *)a2 + 72)  = v31;
              *((unsigned char *)a2 + 7AppleBCMWLANWnmAdapter::free(this - 3) = 100
                                  * (unint64_t)*(unsigned int *)&v20[12 * v24 + 4]
                                  / *(unsigned int *)&v20[12 * v24];
            }
            else if (v23 == 1)
            {
              unint64_t v32 = v7[3];
              if (v32) {
                unint64_t v33 = 100 * (unint64_t)*(unsigned int *)&v20[12 * v24 + 8] / v32;
              }
              else {
                LOBYTE(v3AppleBCMWLANWnmAdapter::free(this - 3) = 0;
              }
              *((unsigned char *)a2 + 70)  = v33;
              *((unsigned char *)a2 + 71)  = 100
                                  * (unint64_t)*(unsigned int *)&v20[12 * v24 + 4]
                                  / *(unsigned int *)&v20[12 * v24];
            }
            else if (v23)
            {
              unint64_t v34 = v7[3];
              if (v34) {
                unint64_t v35 = 100 * (unint64_t)*(unsigned int *)&v20[12 * v24 + 8] / v34;
              }
              else {
                LOBYTE(v35)  = 0;
              }
              *((unsigned char *)a2 + 74)  = v35;
              *((unsigned char *)a2 + 75)  = 100
                                  * (unint64_t)*(unsigned int *)&v20[12 * v24 + 4]
                                  / *(unsigned int *)&v20[12 * v24];
            }
            else
            {
              unint64_t v26 = v7[3];
              if (v26) {
                unint64_t v27 = 100 * (unint64_t)*(unsigned int *)&v20[12 * v24 + 8] / v26;
              }
              else {
                LOBYTE(v27)  = 0;
              }
              *((unsigned char *)a2 + 68)  = v27;
              *((unsigned char *)a2 + 69)  = 100
                                  * (unint64_t)*(unsigned int *)&v20[12 * v24 + 4]
                                  / *(unsigned int *)&v20[12 * v24];
            }
          }
          else if (*(void *)(*(void *)(a1 + 48) + 24) && CCLogStream::shouldLog())
          {
            CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Dynamic SAR Summary invalid version\n", "handleDynSAREventToPopulateUnsharedTxDCUtil", 2703);
          }
          ++v23;
          unsigned int v22 = *((unsigned __int8 *)v7 + 32);
        }
        while (v23 < v22);
      }
      if (!AppleBCMWLANCore::getIOReporterPerSlice(**(AppleBCMWLANCore ***)(a1 + 48))) {
        goto LABEL_11;
      }
      int v42 = *((unsigned __int16 *)a2 + 32);
      int v43 = *((unsigned __int8 *)a2 + 80);
      IOReporterPerSlice  = (AppleBCMWLANBssManager *)AppleBCMWLANCore::getIOReporterPerSlice(**(AppleBCMWLANCore ***)(a1 + 48));
      uint64_t v12 = AppleBCMWLANIOReportingPerSlice::reportDSA(IOReporterPerSlice, *a2, (uint64_t)a2);
      AppleBCMWLANTxPowerManager::sendDynSARStatsEventCoreAnalytics(a1, (uint64_t)a2);
      IOFree(a2, 0x58uLL);
      if (v12)
      {
        if (*(void *)(*(void *)(a1 + 48) + 24) && CCLogStream::shouldLog()) {
          CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:Error parsing reportDSA\n");
        }
        goto LABEL_35;
      }
      if (v42 != 2 || !v43) {
        goto LABEL_36;
      }
      if (*(void *)(*(void *)(a1 + 48) + 24) && CCLogStream::shouldLog())
      {
        CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 24), "[dk] %s@%d:DynSAR: Fail Safe Mode Reported in DSA Event. Trigger CoreCapture with fail safe reason code %d\n", "handleDynSAREventToPopulateUnsharedTxDCUtil", 2720, v43);
        if ((v43 & 1) == 0)
        {
LABEL_108:
          if ((v43 & 2) != 0)
          {
            uint64_t v45 = *(CCFaultReporter **)(*(void *)(a1 + 48) + 32);
            int v46 = -469789950;
            unsigned int v47 = 2724;
          }
          else if ((v43 & 4) != 0)
          {
            uint64_t v45 = *(CCFaultReporter **)(*(void *)(a1 + 48) + 32);
            int v46 = -469789949;
            unsigned int v47 = 2726;
          }
          else
          {
            uint64_t v45 = *(CCFaultReporter **)(*(void *)(a1 + 48) + 32);
            if ((v43 & 8) != 0)
            {
              int v46 = -469789948;
              unsigned int v47 = 2728;
            }
            else
            {
              int v46 = -469789947;
              unsigned int v47 = 2730;
            }
          }
          goto LABEL_120;
        }
      }
      else if ((v43 & 1) == 0)
      {
        goto LABEL_108;
      }
      uint64_t v45 = *(CCFaultReporter **)(*(void *)(a1 + 48) + 32);
      unsigned int v47 = 2722;
      int v46 = -469789951;
LABEL_120:
      CCFaultReporter::reportFault(v45, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANTxPowerManager.cpp", v47, "handleDynSAREventToPopulateUnsharedTxDCUtil", 0, v46, 0);
LABEL_11:
      uint64_t v12 = 0;
LABEL_36:
      IOFreeData();
      return v12;
    }
    return 3758097085;
  }
  else
  {
    if (*(void *)(*(void *)(a1 + 48) + 24) && CCLogStream::shouldLog()) {
      CCLogStream::logAlertIf(*(CCLogStream **)(*(void *)(a1 + 48) + 24), 0x20uLL, "[dk] %s@%d:DynSAR: DSA NOT Enabled by Host!\n", "handleDynSAREventToPopulateUnsharedTxDCUtil", 2586);
    }
    return 0;
  }
}

AppleBCMWLANCore *AppleBCMWLANTxPowerManager::configureDynSARPwrBoostPerRSSI(AppleBCMWLANCore ***this, int a2)
{
  uint64_t result = (AppleBCMWLANCore *)AppleBCMWLANCore::checkForDynSARSupport(*this[6]);
  if (result)
  {
    uint64_t v5 = this[6];
    if (*((unsigned char *)v5 + 40))
    {
      if (!*((unsigned char *)v5 + 41))
      {
        uint64_t result = AppleBCMWLANTxPowerManager::getDynSARPwrBoostPerRSSI((AppleBCMWLANTxPowerManager *)this, a2);
        uint64_t v6 = this[6];
        if (*((_DWORD *)v6 + 14) != result)
        {
          int v7 = *((_DWORD *)v6 + 20) - a2;
          if (v7 < 0) {
            int v7 = -v7;
          }
          if ((char)v7 >= 3)
          {
            unsigned int v8 = result;
            mach_continuous_time();
            absolutetime_to_nanoseconds();
            AppleBCMWLANTxPowerManager::configureDynSARPwrBoost(this, v8);
            this[6][11]  = (AppleBCMWLANCore *)mach_continuous_time();
            *((_DWORD *)this[6] + 20)  = a2;
            if (AppleBCMWLANTxPowerManager::getDynSARStatus((AppleBCMWLANTxPowerManager *)this)
              && this[6][3]
              && CCLogStream::shouldLog())
            {
              CCLogStream::logAlert(this[6][3], "[dk] %s@%d:DynSAR: Failed to get DynSAR status\n", "configureDynSARPwrBoostPerRSSI", 2759);
            }
            uint64_t result = (AppleBCMWLANCore *)AppleBCMWLANTxPowerManager::getDynSARAggStats((AppleBCMWLANTxPowerManager *)this, 0x14u);
            if (result)
            {
              uint64_t result = this[6][3];
              if (result)
              {
                uint64_t result = (AppleBCMWLANCore *)CCLogStream::shouldLog();
                if (result) {
                  return (AppleBCMWLANCore *)CCLogStream::logAlert(this[6][3], "[dk] %s@%d:DynSAR: Failed to get Aggregated Stats\n", "configureDynSARPwrBoostPerRSSI", 2762);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANTxPowerManager::processDynSAREvent(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned __int8 *)(a2 + 9);
  unsigned int v5 = *(_DWORD *)(a2 + 4);
  uint64_t v6 = *(void *)(result + 48);
  unsigned int v7 = *(_DWORD *)(v6 + 4 * v4 + 188);
  BOOL v8 = v5 >= v7;
  unsigned int v9 = v5 - v7;
  if (!v8) {
    unsigned int v9 = 0;
  }
  switch(*(unsigned char *)(v6 + v4 + 184))
  {
    case 0:
      *(_DWORD *)(v6 + 4 * v4 + 128) += v9;
      break;
    case 1:
      *(_DWORD *)(v6 + 4 * v4 + 136) += v9;
      break;
    case 2:
      *(_DWORD *)(v6 + 4 * v4 + 144) += v9;
      break;
    case 4:
      *(_DWORD *)(v6 + 4 * v4 + 152) += v9;
      break;
    case 5:
      *(_DWORD *)(v6 + 4 * v4 + 160) += v9;
      break;
    case 8:
      *(_DWORD *)(v6 + 4 * v4 + 168) += v9;
      break;
    case 9:
      *(_DWORD *)(v6 + 4 * v4 + 176) += v9;
      break;
    default:
      uint64_t result = *(void *)(v6 + 24);
      if (result)
      {
        uint64_t result = CCLogStream::shouldLog();
        if (result) {
          uint64_t result = CCLogStream::logAlert(*(CCLogStream **)(*(void *)(v3 + 48) + 24), "[dk] %s@%d:Invalid DSA Previous state\n", "processDynSAREvent", 2820);
        }
      }
      break;
  }
  *(_DWORD *)(*(void *)(v3 + 48) + 4 * v4 + 188)  = *(_DWORD *)(a2 + 4);
  *(unsigned char *)(*(void *)(v3 + 48) + v4 + 184)  = *(unsigned char *)(a2 + 10);
  ++*(_DWORD *)(*(void *)(v3 + 48) + 4 * v4 + 196);
  return result;
}

uint64_t AppleBCMWLANTxPowerManager::txSDBEnable(AppleBCMWLANTxPowerManager *this, int a2)
{
  uint64_t v4 = (unsigned char *)*((void *)this + 6);
  if (a2)
  {
    if (v4[42]) {
      return 0;
    }
    int v6 = 1;
  }
  else
  {
    int v6 = 0;
    uint64_t v5 = 0;
    if (!v4[42]) {
      return v5;
    }
  }
  int v22 = v6;
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)v4 + 88))();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 136))(v7))
  {
    uint64_t v19 = this;
    uint64_t v20 = (uint64_t)AppleBCMWLANTxPowerManager::handleConfigureTxSDBAsyncCallback;
    uint64_t v21 = 0;
    uint64_t v8 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 6) + 16), (uint64_t)"txsdb");
  }
  else
  {
    unsigned int v9 = *(AppleBCMWLANCommander **)(*((void *)this + 6) + 16);
    uint64_t v19 = (AppleBCMWLANTxPowerManager *)&v22;
    uint64_t v20 = 4;
    uint64_t v8 = AppleBCMWLANCommander::runIOVarSet(v9, (uint64_t)"txsdb", (uint64_t)&v19, 0, 0);
  }
  uint64_t v5 = v8;
  int v10 = (void *)*((void *)this + 6);
  uint64_t v11 = v10[3];
  if (v5)
  {
    if (v11 && CCLogStream::shouldLog())
    {
      uint64_t v12 = (void *)*((void *)this + 6);
      uint64_t v13 = (CCLogStream *)v12[3];
      int v14 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v12 + 112))(*v12, v5);
      CCLogStream::logAlert(v13, "[dk] %s@%d:Failed to configure TxSDB mode, %s\n", "txSDBEnable", 2866, v14);
    }
  }
  else
  {
    if (v11)
    {
      int shouldLog = CCLogStream::shouldLog();
      int v10 = (void *)*((void *)this + 6);
      if (shouldLog)
      {
        uint64_t v17 = (CCLogStream *)v10[3];
        uint64_t v18 = (const char *)(*(uint64_t (**)(void, void))(*(void *)*v10 + 112))(*v10, 0);
        CCLogStream::logInfo(v17, "[dk] %s@%d:Set TxSDB Mode to %d, %s\n", "txSDBEnable", 2863, a2, v18);
        int v10 = (void *)*((void *)this + 6);
      }
    }
    uint64_t v5 = 0;
    *((unsigned char *)v10 + 42)  = a2;
  }
  return v5;
}

AppleBCMWLANCore *AppleBCMWLANTxPowerManager::dynTxSDBStartUpdate(AppleBCMWLANCore ***this, char a2)
{
  uint64_t result = (AppleBCMWLANCore *)AppleBCMWLANCore::isDynTxSDBEnabled(*this[6]);
  if (result)
  {
    uint64_t result = (AppleBCMWLANCore *)AppleBCMWLANCore::getTxSDBFeatureFlag(*this[6]);
    if (result)
    {
      *((_WORD *)this[6] + 23) |= 1 << a2;
      uint64_t v5 = this[6];
      if (*((_WORD *)v5 + 23) == 3)
      {
        if (*((_WORD *)v5 + 22))
        {
          uint64_t result = v5[3];
          if (result)
          {
            uint64_t result = (AppleBCMWLANCore *)CCLogStream::shouldLog();
            if (result) {
              return (AppleBCMWLANCore *)CCLogStream::logNotice(this[6][3], "[dk] %s@%d:DynTxSDB: Postpone tx sdb due to pause %x\n", "dynTxSDBStartUpdate", 2881, *((unsigned __int16 *)this[6] + 22));
            }
          }
        }
        else
        {
          return (AppleBCMWLANCore *)AppleBCMWLANTxPowerManager::txSDBEnable((AppleBCMWLANTxPowerManager *)this, 1);
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANTxPowerManager::dynTxSDBStopUpdate(AppleBCMWLANCore ***this, char a2)
{
  uint64_t result = AppleBCMWLANCore::isDynTxSDBEnabled(*this[6]);
  if (result)
  {
    uint64_t result = AppleBCMWLANCore::getTxSDBFeatureFlag(*this[6]);
    if (result)
    {
      *((_WORD *)this[6] + 23) &= ~(1 << a2);
      return AppleBCMWLANTxPowerManager::txSDBEnable((AppleBCMWLANTxPowerManager *)this, 0);
    }
  }
  return result;
}

uint64_t AppleBCMWLANTxPowerManager::dynTxSDBPause(AppleBCMWLANCore ***this, char a2)
{
  uint64_t result = AppleBCMWLANCore::isDynTxSDBEnabled(*this[6]);
  if (result)
  {
    uint64_t result = AppleBCMWLANCore::getTxSDBFeatureFlag(*this[6]);
    if (result)
    {
      *((_WORD *)this[6] + 22) |= 1 << a2;
      uint64_t v5 = this[6];
      if (*((_WORD *)v5 + 23) == 3)
      {
        if (v5[3] && CCLogStream::shouldLog()) {
          CCLogStream::logNotice(this[6][3], "[dk] %s@%d:DynTxSDB: dynTxSDBPause %x\n", "dynTxSDBPause", 2902, *((unsigned __int16 *)this[6] + 22));
        }
        return AppleBCMWLANTxPowerManager::txSDBEnable((AppleBCMWLANTxPowerManager *)this, 0);
      }
    }
  }
  return result;
}

AppleBCMWLANCore *AppleBCMWLANTxPowerManager::dynTxSDBUnPause(AppleBCMWLANCore ***this, char a2)
{
  uint64_t result = (AppleBCMWLANCore *)AppleBCMWLANCore::isDynTxSDBEnabled(*this[6]);
  if (result)
  {
    uint64_t result = (AppleBCMWLANCore *)AppleBCMWLANCore::getTxSDBFeatureFlag(*this[6]);
    if (result)
    {
      *((_WORD *)this[6] + 22) &= ~(unsigned __int16)(1 << a2);
      uint64_t v5 = this[6];
      if (*((_WORD *)v5 + 23) == 3)
      {
        uint64_t result = v5[3];
        if (result)
        {
          uint64_t result = (AppleBCMWLANCore *)CCLogStream::shouldLog();
          uint64_t v5 = this[6];
          if (result)
          {
            uint64_t result = (AppleBCMWLANCore *)CCLogStream::logNotice(v5[3], "[dk] %s@%d:DynTxSDB: dynTxSDBUnPause %x\n", "dynTxSDBUnPause", 2914, *((unsigned __int16 *)v5 + 22));
            uint64_t v5 = this[6];
          }
        }
        if (!*((_WORD *)v5 + 22))
        {
          return (AppleBCMWLANCore *)AppleBCMWLANTxPowerManager::txSDBEnable((AppleBCMWLANTxPowerManager *)this, 1);
        }
      }
    }
  }
  return result;
}

void _GLOBAL__sub_I_AppleBCMWLANTxPowerManager_cpp()
{
  kNullRange  = 0;
}

OSObject *AppleBCMWLANCommandMonitor::withMonitorLengthProviderAndLogger(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  pObject  = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANCommandMonitorMetaClass, &pObject)) {
    return 0;
  }
  BOOL v16 = pObject;
  if (pObject
    && (((uint64_t (*)(OSObject *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))pObject->OSMetaClassBase::__vftable[1].getMetaClass)(pObject, a1, a2, a3, a4, a5, a6, a7, a8) & 1) == 0)
  {
    ((void (*)(OSObject *))v16->release)(v16);
    return 0;
  }
  return v16;
}

uint64_t AppleBCMWLANCommandMonitor::initWithMonitorLengthProviderAndLogger(uint64_t a1, uint64_t a2, int a3, const OSMetaClassBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  BOOL v17 = OSObject::init((OSObject *)a1);
  uint64_t result = 0;
  if (!a4) {
    return result;
  }
  if (!v17) {
    return result;
  }
  uint64_t v19 = IOMallocZeroTyped();
  uint64_t result = 0;
  *(void *)(a1 + 48)  = v19;
  if (!a5 || !v19) {
    return result;
  }
  *(void *)(v19 + 72)  = a5;
  (*(void (**)(void))(**(void **)(*(void *)(a1 + 48) + 72) + 8))(*(void *)(*(void *)(a1 + 48)
                                                                                                + 72));
  uint64_t v20 = *(void *)(a1 + 48);
  if (!a3)
  {
    uint64_t result = *(void *)(v20 + 72);
    if (!result) {
      return result;
    }
    uint64_t result = CCLogStream::shouldLog();
    if (!result) {
      return result;
    }
    CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 72), "[dk] %s@%d:invalid queuelen\n");
    return 0;
  }
  *(void *)(v20 + 80)  = a4;
  *(void *)(*(void *)(a1 + 48) + 216)  = OSMetaClassBase::safeMetaCast(a4, (const OSMetaClass *)gAppleBCMWLANCoreMetaClass);
  uint64_t v21 = *(void **)(a1 + 48);
  if (!v21[27])
  {
    uint64_t result = v21[9];
    if (!result) {
      return result;
    }
    uint64_t result = CCLogStream::shouldLog();
    if (!result) {
      return result;
    }
    CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 72), "[dk] %s@%d:invalid ivars->fDriver\n");
    return 0;
  }
  v21[3]  = a2;
  uint64_t v22 = *(void *)(a1 + 48);
  if (!a6)
  {
    uint64_t result = *(void *)(v22 + 72);
    if (!result) {
      return result;
    }
    uint64_t result = CCLogStream::shouldLog();
    if (!result) {
      return result;
    }
    CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 72), "[dk] %s@%d:invalid commandGate\n");
    return 0;
  }
  *(void *)(v22 + 88)  = a6;
  (*(void (**)(void))(**(void **)(*(void *)(a1 + 48) + 88) + 8))(*(void *)(*(void *)(a1 + 48)
                                                                                                + 88));
  *(void *)(*(void *)(a1 + 48) + 96)  = a7;
  (*(void (**)(void))(**(void **)(*(void *)(a1 + 48) + 96) + 8))(*(void *)(*(void *)(a1 + 48)
                                                                                                + 96));
  *(void *)(*(void *)(a1 + 48) + 32)  = a9;
  *(void *)(*(void *)(a1 + 48) + 40)  = a8;
  *(_DWORD *)(*(void *)(a1 + 48) + 112)  = a3;
  int v33 = 0;
  *(unsigned char *)(*(void *)(a1 + 48) + 10)  = 0;
  if (IOParseBootArgNumber("wlan.commander.panic_rateexceeded", &v33, 4)) {
    *(unsigned char *)(*(void *)(a1 + 48) + 10)  = v33 == 1;
  }
  *(void *)(*(void *)(a1 + 48) + 104)  = OSDictionary::withCapacity(0x64u);
  uint64_t v24 = *(void *)(a1 + 48);
  if (!*(void *)(v24 + 104))
  {
    uint64_t result = *(void *)(v24 + 72);
    if (!result) {
      return result;
    }
    uint64_t result = CCLogStream::shouldLog();
    if (!result) {
      return result;
    }
    CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 72), "[dk] %s@%d:unable to create ivars->fCommandsDict\n");
    return 0;
  }
  *(void *)(*(void *)(a1 + 48) + 16)  = OSSet::withCapacity((OSSet *)0x64, v23);
  uint64_t v25 = *(void *)(a1 + 48);
  if (!*(void *)(v25 + 16))
  {
    uint64_t result = *(void *)(v25 + 72);
    if (!result) {
      return result;
    }
    uint64_t result = CCLogStream::shouldLog();
    if (!result) {
      return result;
    }
    CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 72), "[dk] %s@%d:unable to create ivars->fCommandReporters\n");
    return 0;
  }
  *(_DWORD *)(v25 + 48)  = 1;
  *(_DWORD *)(*(void *)(a1 + 48) + 52)  = 10;
  *(_DWORD *)(*(void *)(a1 + 48) + 56)  = 64;
  *(_DWORD *)(*(void *)(a1 + 48) + 60)  = 1000;
  *(_DWORD *)(*(void *)(a1 + 48) + 64)  = 5000;
  *(_DWORD *)(*(void *)(a1 + 48) + 68)  = 10000;
  *(_DWORD *)(*(void *)(a1 + 48) + 124)  = 5000;
  *(_DWORD *)(*(void *)(a1 + 48) + 128)  = 10000;
  *(_DWORD *)(*(void *)(a1 + 48) + 132)  = 2500000;
  *(_DWORD *)(*(void *)(a1 + 48) + 136)  = 5000000;
  *(_DWORD *)(*(void *)(a1 + 48) + 140)  = 0x7FFFFFFF;
  *(_DWORD *)(*(void *)(a1 + 48) + 144)  = 5000;
  *(_DWORD *)(*(void *)(a1 + 48) + 148)  = 10000;
  *(_DWORD *)(*(void *)(a1 + 48) + 152)  = 1000000;
  *(_DWORD *)(*(void *)(a1 + 48) + 156)  = 2000000;
  *(_DWORD *)(*(void *)(a1 + 48) + 160)  = 0x7FFFFFFF;
  *(_DWORD *)(*(void *)(a1 + 48) + 164)  = 10;
  *(_DWORD *)(*(void *)(a1 + 48) + 168)  = 20;
  *(_DWORD *)(*(void *)(a1 + 48) + 172)  = 750000;
  *(_DWORD *)(*(void *)(a1 + 48) + 176)  = 1500000;
  *(_DWORD *)(*(void *)(a1 + 48) + 180)  = 0x7FFFFFFF;
  unint64_t v26 = off_10038B320;
  uint64_t v27 = 23;
  while (1)
  {
    unsigned int v28 = v27 == 26 ? 0 : v27 - 23;
    *(void *)(*(void *)(a1 + 48) + 8 * v27)  = AppleBCMWLANCommandMonitor::createCommandQueueTimeReporter(a1, (v27 - 23), (unsigned int *)(*(void *)(a1 + 48) + 20 * v28 + 124));
    uint64_t v29 = *(void *)(a1 + 48);
    unint64_t v30 = *(const OSMetaClassBase **)(v29 + 8 * v27);
    if (!v30) {
      break;
    }
    OSSet::setObject(*(OSSet **)(v29 + 16), v30);
    uint64_t v31 = *(void *)(*(void *)(a1 + 48) + 8 * v27);
    (*(void (**)(uint64_t))(*(void *)v31 + 16))(v31);
    unint64_t v32 = *v26;
    v26 += 2;
    (*(void (**)(void, void, void, const char *, char *))(*(void *)(a1 + 48) + 40))(*(void *)(*(void *)(a1 + 48) + 24), *(void *)(*(void *)(a1 + 48) + 80), *(void *)(*(void *)(a1 + 48) + 8 * v27++), "Commander Response Time", v32);
    if (v27 == 27) {
      return 1;
    }
  }
  uint64_t result = *(void *)(v29 + 72);
  if (result)
  {
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      CCLogStream::logAlert(*(CCLogStream **)(*(void *)(a1 + 48) + 72), "[dk] %s@%d:unable to create ivars->fcommandQueueTimeStats for queue type %u\n");
      return 0;
    }
  }
  return result;
}

uint64_t AppleBCMWLANCommandMonitor::createCommandQueueTimeReporter(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1)  = 0xAAAAAAAAAAAAAAAALL;
  v9[3]  = v3;
  v9[4]  = v3;
  v9[1]  = v3;
  void v9[2] = v3;
  v9[0]  = v3;
  for (uint64_t i = 12; i != 92; i += 16)
  {
    unsigned int v5 = *a3++;
    int v6 = (_DWORD *)((char *)v9 + i);
    *(void *)((char *)v9 + i - 12)  = v5;
    if (i == 76) {
      int v7 = 4;
    }
    else {
      int v7 = 1;
    }
    *(v6 - 1)  = v7;
    _DWORD *v6 = 1;
  }
  IO80211Controller::getReporterProvider(*(IO80211Controller **)(*(void *)(a1 + 48) + 216));
  return IOHistogramReporter::with();
}

uint64_t non-virtual thunk to'AppleBCMWLANCommandMonitor::initWithMonitorLengthProviderAndLogger(uint64_t a1, uint64_t a2, int a3, const OSMetaClassBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return AppleBCMWLANCommandMonitor::initWithMonitorLengthProviderAndLogger(a1 - 40, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t AppleBCMWLANCommandMonitor::reportQueueWaitTimeus(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t result = 3758097090;
  if (a2 <= 3)
  {
    unsigned int v5 = *(IOHistogramReporter **)(*(void *)(a1 + 48) + 8 * a2 + 184);
    if (v5)
    {
      IOHistogramReporter::tallyValue(v5, a3);
      return 0;
    }
  }
  return result;
}

uint64_t AppleBCMWLANCommandMonitor::freeResources(AppleBCMWLANCommandMonitor *this)
{
  uint64_t v2 = (void *)*((void *)this + 6);
  uint64_t v3 = v2[12];
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    *(void *)(*((void *)this + 6) + 96)  = 0;
    uint64_t v2 = (void *)*((void *)this + 6);
  }
  uint64_t v4 = v2[2];
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
    *(void *)(*((void *)this + 6) + 16)  = 0;
    uint64_t v2 = (void *)*((void *)this + 6);
  }
  uint64_t v5 = v2[13];
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    *(void *)(*((void *)this + 6) + 104)  = 0;
    uint64_t v2 = (void *)*((void *)this + 6);
  }
  uint64_t v6 = v2[11];
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    *(void *)(*((void *)this + 6) + 88)  = 0;
    uint64_t v2 = (void *)*((void *)this + 6);
  }
  v2[5]  = 0;
  *(void *)(*((void *)this + 6) + 32)  = 0;
  uint64_t result = *(void *)(*((void *)this + 6) + 72);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    *(void *)(*((void *)this + 6) + 72)  = 0;
  }
  return result;
}

void AppleBCMWLANCommandMonitor::free(void **this)
{
  if (this[6])
  {
    AppleBCMWLANCommandMonitor::freeResources((AppleBCMWLANCommandMonitor *)this);
    memset_s(this[6], 0xE0uLL, 0, 0xE0uLL);
    uint64_t v2 = this[6];
    if (v2)
    {
      IOFree(v2, 0xE0uLL);
      this[6]  = 0;
    }
  }
  OSObject::free((OSObject *)this);
}

void non-virtual thunk to'AppleBCMWLANCommandMonitor::free(void **this)
{
}

uint64_t AppleBCMWLANCommandMonitor::setRateThreshold(AppleBCMWLANCommandMonitor *this, unsigned int a2, int a3)
{
  uint64_t v6 = *((void *)this + 6);
  if (*(_DWORD *)(v6 + 112) < a2)
  {
    *(_DWORD *)(v6 + 112)  = a2;
    uint64_t v6 = *((void *)this + 6);
  }
  *(_DWORD *)(v6 + 116)  = a2;
  *(_DWORD *)(*((void *)this + 6) + 120)  = a3;
  if (*(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog()) {
    CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 72), "[dk] %s@%d:Applying command rate threshold of %d commands within %d ms\n", "setRateThreshold", 320, a2, a3);
  }
  return 1;
}

BOOL AppleBCMWLANCommandMonitor::monitorCmdPrepared(AppleBCMWLANCommandMonitor *this, AppleBCMWLANCommand *a2)
{
  if (a2)
  {
    if (AppleBCMWLANCommand::getCmdName(a2))
    {
      CmdName  = (const char *)AppleBCMWLANCommand::getCmdName(a2);
      OSStringPtr v5 = OSString::withCString(CmdName);
      if (v5)
      {
        uint64_t v6 = v5;
        Object  = OSDictionary::getObject(*(const OSDictionary **)(*((void *)this + 6) + 104), v5);
        uint64_t v8 = (OSDictionary *)OSMetaClassBase::safeMetaCast(Object, gOSDictionaryMetaClass);
        if (!v8)
        {
          OSDictionaryPtr v9 = OSDictionary::withCapacity(2u);
          if (!v9) {
            goto LABEL_53;
          }
          uint64_t v8 = v9;
          BOOL v10 = OSDictionary::setObject(*(OSDictionary **)(*((void *)this + 6) + 104), v6, v9);
          ((void (*)(OSDictionary *))v8->release)(v8);
          if (!v10) {
            goto LABEL_53;
          }
        }
        uint64_t v11 = OSDictionary::getObject(v8, "CommandMonitorTimeHistoryKey");
        uint64_t v12 = OSMetaClassBase::safeMetaCast(v11, gOSOrderedSetMetaClass);
        if (!v12)
        {
          uint64_t v13 = (const OSMetaClassBase *)OSOrderedSet::withCapacity();
          if (!v13)
          {
            if (*(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog())
            {
              uint64_t v22 = *(CCLogStream **)(*((void *)this + 6) + 72);
              AppleBCMWLANCommand::getCmdName(a2);
              CCLogStream::logAlert(v22, "[dk] %s@%d:Failed to get cmdTimeHistory for cmd %s\n");
            }
            goto LABEL_53;
          }
          uint64_t v12 = (OSMetaClassBase *)v13;
          BOOL v14 = OSDictionary::setObject(v8, "CommandMonitorTimeHistoryKey", v13);
          ((void (*)(OSMetaClassBase *))v12->release)(v12);
          if (!v14)
          {
LABEL_53:
            ((void (*)(OSString *))v6->release)(v6);
            return a2 != 0;
          }
        }
        uint64_t v15 = AppleBCMWLANCommand::getQueuedTime_ns(a2, 1u) / 0xF4240uLL;
        OSNumberPtr v16 = OSNumber::withNumber(v15, 0x40uLL);
        if (!v16)
        {
          if (*(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog())
          {
            uint64_t v21 = *(CCLogStream **)(*((void *)this + 6) + 72);
            AppleBCMWLANCommand::getCmdName(a2);
            CCLogStream::logAlert(v21, "[dk] %s@%d:Failed to create timeAtPending %lld for cmd %s\n");
          }
          goto LABEL_53;
        }
        BOOL v17 = v16;
        if (!((unsigned int (*)(OSMetaClassBase *))v12->__vftable[1].Dispatch)(v12)) {
          goto LABEL_27;
        }
        if (*(unsigned char *)(*((void *)this + 6) + 8))
        {
          uint64_t v18 = OSDictionary::getObject(v8, "CommandMonitorHistogramKey");
          uint64_t v19 = OSMetaClassBase::safeMetaCast(v18, gIOHistogramReporterMetaClass);
          if (!v19)
          {
            HistogramReporter  = AppleBCMWLANCommandMonitor::makeHistogramReporter(this, v6);
            if (!HistogramReporter)
            {
              if (*(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog())
              {
                unsigned int v47 = *(CCLogStream **)(*((void *)this + 6) + 72);
                int v48 = (const char *)AppleBCMWLANCommand::getCmdName(a2);
                CCLogStream::logAlert(v47, "[dk] %s@%d:Failed to create cmdTimeHistogram for cmd %s\n", "monitorCmdPrepared", 395, v48);
              }
              goto LABEL_52;
            }
            uint64_t v20 = (IOHistogramReporter *)HistogramReporter;
            OSDictionary::setObject(v8, "CommandMonitorHistogramKey", HistogramReporter);
            int v23 = 1;
LABEL_23:
            FirstObject  = (const OSMetaClassBase *)OSOrderedSet::getFirstObject((OSOrderedSet *)v12);
            uint64_t v25 = (const OSNumber *)OSMetaClassBase::safeMetaCast(FirstObject, gOSNumberMetaClass);
            if (v25)
            {
              uint64_t v26 = OSNumber::unsigned64BitValue(v25);
              if (v20 && v26) {
                IOHistogramReporter::tallyValue(v20, v15 - v26);
              }
LABEL_27:
              if (((unsigned int (*)(OSMetaClassBase *))v12->__vftable[1].Dispatch)(v12) == *(_DWORD *)(*((void *)this + 6) + 112))
              {
                LastObject  = (const OSMetaClassBase *)OSOrderedSet::getLastObject((OSOrderedSet *)v12);
                unsigned int v28 = OSMetaClassBase::safeMetaCast(LastObject, gOSNumberMetaClass);
                OSSet::removeObject((OSSet *)v12, v28);
              }
              OSOrderedSet::setFirstObject((OSOrderedSet *)v12, v17);
              uint64_t v29 = *((void *)this + 6);
              if ((*(_DWORD *)(v29 + 116) || *(_DWORD *)(v29 + 120))
                && ((unsigned int (*)(OSMetaClassBase *))v12->__vftable[1].Dispatch)(v12) >= *(_DWORD *)(*((void *)this + 6) + 116))
              {
                unint64_t v30 = (const OSMetaClassBase *)OSOrderedSet::getLastObject((OSOrderedSet *)v12);
                uint64_t v31 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v30, gOSNumberMetaClass);
                if (v31)
                {
                  unint64_t v32 = v15 - OSNumber::unsigned64BitValue(v31);
                  uint64_t v33 = *((void *)this + 6);
                  if (v32 < *(unsigned int *)(v33 + 120))
                  {
                    if (*(void *)(v33 + 72))
                    {
                      int shouldLog = CCLogStream::shouldLog();
                      uint64_t v33 = *((void *)this + 6);
                      if (shouldLog)
                      {
                        uint64_t v45 = *(CCLogStream **)(v33 + 72);
                        int v46 = (const char *)AppleBCMWLANCommand::getCmdName(a2);
                        CCLogStream::logEmergency(v45, "[dk] %s@%d: Command %s rate exceeded %d calls within %d ms, rule is %d calls within %d ms\n", "monitorCmdPrepared", 445, v46, *(_DWORD *)(*((void *)this + 6) + 116), v32, *(_DWORD *)(*((void *)this + 6) + 116), *(_DWORD *)(*((void *)this + 6) + 120));
                        uint64_t v33 = *((void *)this + 6);
                      }
                    }
                    if (*(unsigned char *)(v33 + 10)) {
                      unsigned int v35 = 6;
                    }
                    else {
                      unsigned int v35 = 4;
                    }
                    unint64_t v36 = *(CCFaultReporter **)(v33 + 96);
                    unint64_t v37 = (const char *)AppleBCMWLANCommand::getCmdName(a2);
                    CCFaultReporter::reportFault(v36, v35, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCommandMonitor.cpp", 0x1C4u, "monitorCmdPrepared", 0, -469793765, "cmd=%s", v37);
                    if (((unsigned int (*)(OSMetaClassBase *))v12->__vftable[1].Dispatch)(v12) >= 2)
                    {
                      do
                      {
                        unint64_t v38 = (const OSMetaClassBase *)OSOrderedSet::getLastObject((OSOrderedSet *)v12);
                        unint64_t v39 = OSMetaClassBase::safeMetaCast(v38, gOSNumberMetaClass);
                        OSSet::removeObject((OSSet *)v12, v39);
                      }
                      while (((unsigned int (*)(OSMetaClassBase *))v12->__vftable[1].Dispatch)(v12) > 1);
                    }
                  }
                }
              }
              goto LABEL_52;
            }
            if (*(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog())
            {
              int v42 = *(CCLogStream **)(*((void *)this + 6) + 72);
              int v43 = (const char *)AppleBCMWLANCommand::getCmdName(a2);
              int v44 = ((uint64_t (*)(OSMetaClassBase *))v12->__vftable[1].Dispatch)(v12);
              CCLogStream::logAlert(v42, "[dk] %s@%d:Invalid lastTime cmd: %s, count: %d\n", "monitorCmdPrepared", 405, v43, v44);
              if (!v23) {
                goto LABEL_52;
              }
            }
            else if (!v23)
            {
LABEL_52:
              ((void (*)(const OSMetaClassBase *))v17->release)(v17);
              goto LABEL_53;
            }
            OSDictionary::removeObject(v8, "CommandMonitorHistogramKey");
            (*(void (**)(IOHistogramReporter *))(*(void *)v20 + 16))(v20);
            goto LABEL_52;
          }
          uint64_t v20 = (IOHistogramReporter *)v19;
        }
        else
        {
          uint64_t v20 = 0;
        }
        int v23 = 0;
        goto LABEL_23;
      }
    }
  }
  return a2 != 0;
}

const OSMetaClassBase *AppleBCMWLANCommandMonitor::makeHistogramReporter(AppleBCMWLANCommandMonitor *this, OSString *a2)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1)  = 0xAAAAAAAAAAAAAAAALL;
  v20[4]  = v4;
  v20[5]  = v4;
  void v20[2] = v4;
  v20[3]  = v4;
  v20[0]  = v4;
  v20[1]  = v4;
  *(_DWORD *)__str  = -1431655766;
  snprintf(__str, 4uLL, "%03d", **((_DWORD **)this + 6));
  ++**((_DWORD **)this + 6);
  uint64_t v5 = *((void *)this + 6);
  uint64_t v6 = (unsigned int *)(v5 + 48);
  for (uint64_t i = 12; i != 108; i += 16)
  {
    unsigned int v8 = *v6++;
    OSDictionaryPtr v9 = (_DWORD *)((char *)v20 + i);
    *(void *)((char *)v20 + i - 12)  = v8;
    if (i == 92) {
      int v10 = 5;
    }
    else {
      int v10 = 1;
    }
    *(v9 - 1)  = v10;
    *OSDictionaryPtr v9 = 1;
  }
  IO80211Controller::getReporterProvider(*(IO80211Controller **)(v5 + 216));
  OSString::getCStringNoCopy(a2);
  uint64_t v11 = (const OSMetaClassBase *)IOHistogramReporter::with();
  uint64_t v12 = *((void *)this + 6);
  if (v11)
  {
    OSSet::setObject(*(OSSet **)(v12 + 16), v11);
    ((void (*)(const OSMetaClassBase *))v11->release)(v11);
    uint64_t v13 = (void *)*((void *)this + 6);
    BOOL v14 = (void (*)(uint64_t, uint64_t, const OSMetaClassBase *, const char *, const char *))v13[5];
    uint64_t v15 = v13[3];
    uint64_t v16 = v13[10];
    CStringNoCopy  = OSString::getCStringNoCopy(a2);
    v14(v15, v16, v11, "Commands Issued Histogram", CStringNoCopy);
  }
  else if (*(void *)(v12 + 72) && CCLogStream::shouldLog())
  {
    CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 72), "[dk] %s@%d:Failed to create histogram\n", "makeHistogramReporter", 605);
  }
  return v11;
}

BOOL AppleBCMWLANCommandMonitor::monitorCmdCompleted(AppleBCMWLANCommandMonitor *this, AppleBCMWLANCommand *a2)
{
  if (a2)
  {
    if (AppleBCMWLANCommand::getCmdName(a2))
    {
      CmdName  = (const char *)AppleBCMWLANCommand::getCmdName(a2);
      OSStringPtr v5 = OSString::withCString(CmdName);
      *(_DWORD *)__str  = -1431655766;
      if (v5)
      {
        uint64_t v6 = v5;
        uint64_t v7 = *((void *)this + 6);
        if (*(unsigned char *)(v7 + 9))
        {
          Object  = OSDictionary::getObject(*(const OSDictionary **)(v7 + 104), v5);
          OSDictionaryPtr v9 = (OSDictionaryPtr)OSMetaClassBase::safeMetaCast(Object, gOSDictionaryMetaClass);
          if (!v9)
          {
            OSDictionaryPtr v9 = OSDictionary::withCapacity(2u);
            OSDictionary::setObject(*(OSDictionary **)(*((void *)this + 6) + 104), v6, v9);
          }
          int v10 = OSDictionary::getObject(v9, "CommandMonitorSimpleKey");
          uint64_t v11 = OSMetaClassBase::safeMetaCast(v10, gIOSimpleReporterMetaClass);
          if (!v11)
          {
            SimpleReporter  = AppleBCMWLANCommandMonitor::makeSimpleReporter(this, v6);
            if (!SimpleReporter)
            {
              if (*(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog())
              {
                uint64_t v26 = *(CCLogStream **)(*((void *)this + 6) + 72);
                AppleBCMWLANCommand::getCmdName(a2);
                CCLogStream::logAlert(v26, "[dk] %s@%d:Failed to create simple for cmd %s\n");
              }
              goto LABEL_32;
            }
            uint64_t v11 = (OSMetaClassBase *)SimpleReporter;
            OSDictionary::setObject(v9, "CommandMonitorSimpleKey", SimpleReporter);
          }
          uint64_t v13 = OSDictionary::getObject(v9, "CommandMonitorSimpleChannelIDKey");
          BOOL v14 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v13, gOSNumberMetaClass);
          if (!v14)
          {
            snprintf(__str, 4uLL, "%03d", *(_DWORD *)(*((void *)this + 6) + 4));
            ++*(_DWORD *)(*((void *)this + 6) + 4);
            uint64_t v15 = ((uint64_t)__str[0] << 16) | ((uint64_t)__str[1] << 8) | __str[2] | 0x434D445374000000;
            ++*(_DWORD *)(*((void *)this + 6) + 4);
            OSNumberPtr v16 = OSNumber::withNumber(v15, 0x40uLL);
            if (!v16)
            {
              if (*(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog())
              {
                uint64_t v27 = *(CCLogStream **)(*((void *)this + 6) + 72);
                AppleBCMWLANCommand::getCmdName(a2);
                CCLogStream::logAlert(v27, "[dk] %s@%d:Failed to create chanidNumber for cmd %s\n");
              }
              goto LABEL_32;
            }
            BOOL v14 = v16;
            OSDictionary::setObject(v9, "CommandMonitorSimpleChannelIDKey", v16);
          }
          uint64_t v17 = OSNumber::unsigned64BitValue(v14);
          unsigned int Status = AppleBCMWLANCommand::getStatus(a2);
          unint64_t v19 = (Status << 24) | ((unint64_t)((Status >> 8) & 0x3F) << 32) | v17;
          if (IOSimpleReporter::incrementValue((IOSimpleReporter *)v11, v19, 1))
          {
            unint64_t v39 = 0;
            uint64_t v20 = *(IOService **)(*((void *)this + 6) + 80);
            int v21 = AppleBCMWLANCommand::getStatus(a2);
            if (IOService::StringFromReturn(v20, v21, &v39, 0))
            {
              if (*(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog())
              {
                uint64_t v22 = *(CCLogStream **)(*((void *)this + 6) + 72);
                AppleBCMWLANCommand::getCmdName(a2);
                CCLogStream::logAlert(v22, "[dk] %s@%d:Failed StringFromReturn for cmd %s\n");
              }
            }
            else
            {
              CStringNoCopy  = OSString::getCStringNoCopy(v39);
              int v24 = IOReporter::addChannel((IOReporter *)v11, v19, CStringNoCopy);
              if (v39)
              {
                ((void (*)(OSString *))v39->release)(v39);
                unint64_t v39 = 0;
              }
              if (v24)
              {
                if (*(void *)(*((void *)this + 6) + 72) && CCLogStream::shouldLog())
                {
                  uint64_t v25 = *(CCLogStream **)(*((void *)this + 6) + 72);
                  AppleBCMWLANCommand::getCmdName(a2);
                  CCLogStream::logAlert(v25, "[dk] %s@%d:Failed to create simple reporter for cmd %s\n");
                }
              }
              else
              {
                IOSimpleReporter::incrementValue((IOSimpleReporter *)v11, v19, 1);
                unsigned int v28 = (void *)*((void *)this + 6);
                uint64_t v29 = v28[3];
                unint64_t v30 = (void (*)(uint64_t, uint64_t, void, const char *, uint64_t))v28[4];
                uint64_t v31 = v28[10];
                uint64_t v32 = AppleBCMWLANCommand::getCmdName(a2);
                v30(v29, v31, 0, "Commands Issued", v32);
                uint64_t v33 = (void *)*((void *)this + 6);
                unint64_t v34 = (void (*)(uint64_t, uint64_t, OSMetaClassBase *, const char *, uint64_t))v33[5];
                uint64_t v35 = v33[3];
                uint64_t v36 = v33[10];
                uint64_t v37 = AppleBCMWLANCommand::getCmdName(a2);
                v34(v35, v36, v11, "Commands Issued", v37);
              }
            }
          }
        }
LABEL_32:
        ((void (*)(OSString *))v6->release)(v6);
      }
    }
  }
  return a2 != 0;
}

const OSMetaClassBase *AppleBCMWLANCommandMonitor::makeSimpleReporter(AppleBCMWLANCommandMonitor *this, OSString *a2)
{
  ReporterProvider  = (IOSimpleReporter *)IO80211Controller::getReporterProvider(*(IO80211Controller **)(*((void *)this + 6) + 216));
  uint64_t v6 = (const OSMetaClassBase *)IOSimpleReporter::with(ReporterProvider, (IOService *)0x8010, 0, v5);
  uint64_t v7 = *((void *)this + 6);
  if (v6)
  {
    OSSet::setObject(*(OSSet **)(v7 + 16), v6);
    ((void (*)(const OSMetaClassBase *))v6->release)(v6);
    unsigned int v8 = (void *)*((void *)this + 6);
    OSDictionaryPtr v9 = (void (*)(uint64_t, uint64_t, const OSMetaClassBase *, const char *, const char *))v8[5];
    uint64_t v10 = v8[3];
    uint64_t v11 = v8[10];
    CStringNoCopy  = OSString::getCStringNoCopy(a2);
    v9(v10, v11, v6, "Commands Issued", CStringNoCopy);
  }
  else if (*(void *)(v7 + 72) && CCLogStream::shouldLog())
  {
    CCLogStream::logAlert(*(CCLogStream **)(*((void *)this + 6) + 72), "[dk] %s@%d:Failed to create simple\n", "makeSimpleReporter", 628);
  }
  return v6;
}

uint64_t AppleBCMWLANCommandMonitor::configureReport(OSObject *this, OSCollection *a2, OSData *a3, unsigned int *a4)
{
  unsigned int v17 = 0;
  uint64_t v5 = *(void *)(*(void *)&this[1].refcount + 16);
  if (!v5) {
    return 3758097084;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 72))(v5);
  if (result)
  {
    int v18 = IOReporter::configureAllReports(*(IOReporter **)(*(void *)&this[1].refcount + 16), a2, a3, &v17, v10);
    uint64_t v11 = *(void *)&this[1].refcount;
    uint64_t v12 = *(CCLogStream **)(v11 + 72);
    uint64_t v13 = *(CCFaultReporter **)(v11 + 96);
    ClassNameHelper  = (const char *)getClassNameHelper(this);
    int v18 = testPostConfigureAllAndAdjustV3(v12, v13, ClassNameHelper, a3, (unsigned int *)&v18, a4, v17, -2);
    if (v18 && *(void *)(*(void *)&this[1].refcount + 72))
    {
      if (CCLogStream::shouldLog())
      {
        uint64_t v15 = *(CCLogStream **)(*(void *)&this[1].refcount + 72);
        OSNumberPtr v16 = (const char *)getClassNameHelper(this);
        CCLogStream::logEmergency(v15, "[dk] %s@%d:DKReporter::%s::%s(%d) testPostConfigureAllAndAdjustV3 failed\n", "configureReport", 659, v16, "configureReport", 659);
      }
    }
    return v18;
  }
  return result;
}

uint64_t AppleBCMWLANCommandMonitor::updateReport(OSObject *this, OSCollection *a2, OSData *a3, unsigned int *a4, unint64_t *a5, unint64_t *a6, IOMemoryDescriptor *a7)
{
  uint64_t result = 3758097084;
  unsigned int v26 = 0;
  uint64_t v9 = *(void *)&this[1].refcount;
  if (*(void *)(v9 + 88))
  {
    uint64_t v10 = *(void *)(v9 + 16);
    if (v10)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 72))(v10);
      if (result)
      {
        unsigned int v17 = *(CCLogStream **)(*(void *)&this[1].refcount + 72);
        ClassNameHelper  = (const char *)getClassNameHelper(this);
        testPreUpdateAllReportersV3(v17, ClassNameHelper, *(OSSet **)(*(void *)&this[1].refcount + 16), *a5, *a6, a7);
        updated  = IOReporter::updateAllReports(*(IOReporter **)(*(void *)&this[1].refcount + 16), a2, a3, &v26, (unsigned int *)*a5, *a6, (unint64_t)a7, v19);
        uint64_t v20 = *(void *)&this[1].refcount;
        int v21 = *(CCLogStream **)(v20 + 72);
        uint64_t v22 = *(CCFaultReporter **)(v20 + 96);
        int v23 = (const char *)getClassNameHelper(this);
        updated  = testPostUpdateAllAndAdjustV3(v21, v22, v23, (unsigned int *)&updated, v26, a4, a5, a6, -2);
        if (updated && *(void *)(*(void *)&this[1].refcount + 72))
        {
          if (CCLogStream::shouldLog())
          {
            int v24 = *(CCLogStream **)(*(void *)&this[1].refcount + 72);
            uint64_t v25 = (const char *)getClassNameHelper(this);
            CCLogStream::logEmergency(v24, "[dk] %s@%d:DKReporter::%s::%s(%d) testAndAdjustOffsetAndCapacity failed count %u outElementCount %u offset %llu capacity %llu", "updateReport", 687, v25, "updateReport", 687, v26, *a4, *a5, *a6);
          }
        }
        return updated;
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCommandMonitor::recordStats(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)(this + 48) + 8)  = a2;
  *(unsigned char *)(*(void *)(this + 48) + 9)  = a2;
  return this;
}

void _GLOBAL__sub_I_AppleBCMWLANCommandMonitor_cpp()
{
  kNullRange  = 0;
}

OSObject *AppleBCMWLANPCIeCompletionRing::withOptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANPCIeCompletionRingMetaClass, &v12)) {
    return 0;
  }
  uint64_t v10 = v12;
  if (v12
    && (((uint64_t (*)(OSObject *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v12->OSMetaClassBase::__vftable[5].release)(v12, a1, a2, a3, a4, a5) & 1) == 0)
  {
    ((void (*)(OSObject *))v10->release)(v10);
    return 0;
  }
  return v10;
}

uint64_t AppleBCMWLANPCIeCompletionRing::initWithOwnerAndOptions(AppleBCMWLANRxItemRing *a1, OSObject *a2, void (*a3)(OSObject *, ...), void (*a4)(OSObject *, AppleBCMWLANByteRing *, int, void *), uint64_t a5, uint64_t a6)
{
  uint64_t result = AppleBCMWLANRxItemRing::initWithOptions(a1, a2, a3, a4);
  if (!result) {
    return result;
  }
  uint64_t result = IOMallocZeroTyped();
  *((void *)a1 + 14)  = result;
  if (!result) {
    return result;
  }
  if (!a6)
  {
    ClassNameHelper  = (const char *)getClassNameHelper((OSObject *)a1);
    IOLog("%s::%s(): Unable to get debug logger\n", ClassNameHelper, "initWithOwnerAndOptions");
    return 0;
  }
  *(void *)(result + 200)  = a6;
  uint64_t v11 = *(void *)(*((void *)a1 + 14) + 200);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  AppleBCMWLANByteRing::setLogger((uint64_t)a1, a6);
  **((void **)a1 + 14)  = a2;
  *(_WORD *)(*((void *)a1 + 14) + 56)  = *(_WORD *)a5;
  *(unsigned char *)(*((void *)a1 + 14) + 58)  = *(unsigned char *)(a5 + 2);
  AppleBCMWLANItemRing::setItemCount((uint64_t)a1, *(_DWORD *)(a5 + 8));
  AppleBCMWLANItemRing::setItemSize((uint64_t)a1, *(_DWORD *)(a5 + 4));
  unint64_t v12 = *(void *)(a5 + 112);
  *(void *)(*((void *)a1 + 14) + 64)  = *(void *)(a5 + 104);
  unint64_t v13 = (*(_DWORD *)(a5 + 8) * *(_DWORD *)(a5 + 4));
  if (v13 % v12) {
    int v14 = v12 - v13 % v12;
  }
  else {
    int v14 = 0;
  }
  *(void *)(*((void *)a1 + 14) + 96)  = (v14 + v13);
  uint64_t v15 = *(void *)(a5 + 88);
  *(void *)(*((void *)a1 + 14) + 32)  = *(void *)(a5 + 80)
                                           + 4 * *(unsigned __int16 *)(*((void *)a1 + 14) + 56);
  *(void *)(*((void *)a1 + 14) + 40)  = v15 + 4 * *(unsigned __int16 *)(*((void *)a1 + 14) + 56);
  uint64_t v16 = *(void *)(a5 + 24);
  *(void *)(*((void *)a1 + 14) + 128)  = *(void *)(a5 + 16);
  *(void *)(*((void *)a1 + 14) + 136)  = v16;
  *(void *)(*((void *)a1 + 14) + 144)  = *(void *)(a5 + 48);
  *(_DWORD *)(*((void *)a1 + 14) + 152)  = *(_DWORD *)(a5 + 56);
  *(unsigned char *)(*((void *)a1 + 14) + 8)  = 1;
  *(void *)(*((void *)a1 + 14) + 104)  = *(void *)(*((void *)a1 + 14) + 96);
  if (AppleBCMWLANPCIeAllocateDartMappedMemory(*((void *)a1 + 14) + 72, v12, 1, *(IOService **)(a5 + 120)))
  {
    *(_DWORD *)(*((void *)a1 + 14) + 48)  = *(_DWORD *)(*((void *)a1 + 14) + 120);
    *(_DWORD *)(*((void *)a1 + 14) + 52)  = *(_DWORD *)(*((void *)a1 + 14) + 124);
    *(void *)(*((void *)a1 + 14) + 176)  = a1;
    **(_DWORD **)(*((void *)a1 + 14) + 40)  = 0;
    **(_DWORD **)(*((void *)a1 + 14) + 32)  = 0;
    return 1;
  }
  uint64_t result = AppleBCMWLANByteRing::getLogger(a1);
  if (result)
  {
    AppleBCMWLANByteRing::getLogger(a1);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      Logger  = (CCLogStream *)AppleBCMWLANByteRing::getLogger(a1);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:Failed to allocate scratch memory, direction[%u] size[0x%08llx] bufferSize[0x%08llx]\n", "initWithOwnerAndOptions", 159, 1, *(void *)(*((void *)a1 + 14) + 104), *(void *)(*((void *)a1 + 14) + 96));
      return 0;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeCompletionRing::initWithOwnerAndOptions(uint64_t a1, OSObject *a2, void (*a3)(OSObject *, ...), void (*a4)(OSObject *, AppleBCMWLANByteRing *, int, void *), uint64_t a5, uint64_t a6)
{
  return AppleBCMWLANPCIeCompletionRing::initWithOwnerAndOptions((AppleBCMWLANRxItemRing *)(a1 - 104), a2, a3, a4, a5, a6);
}

uint64_t AppleBCMWLANPCIeCompletionRing::free(void **this)
{
  if (this[14])
  {
    if (AppleBCMWLANByteRing::getLogger((AppleBCMWLANByteRing *)this))
    {
      AppleBCMWLANByteRing::getLogger((AppleBCMWLANByteRing *)this);
      if (CCLogStream::shouldLog())
      {
        Logger  = (CCLogStream *)AppleBCMWLANByteRing::getLogger((AppleBCMWLANByteRing *)this);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:Enter ::free [%p]", "free", 196, this);
      }
    }
    uint64_t v2 = this[14];
    uint64_t v3 = v2[25];
    if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
      *((void *)this[14] + 25)  = 0;
      uint64_t v2 = this[14];
    }
    AppleBCMWLANPCIeFreeDartMappedMemory((uint64_t)(v2 + 9));
    memset_s(this[14], 0xD0uLL, 0, 0xD0uLL);
    long long v4 = this[14];
    if (v4)
    {
      IOFree(v4, 0xD0uLL);
      this[14]  = 0;
    }
  }
  return AppleBCMWLANTxItemRing::free((AppleBCMWLANTxItemRing *)this);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeCompletionRing::free(void **this)
{
  return AppleBCMWLANPCIeCompletionRing::free(this - 3);
}

uint64_t AppleBCMWLANPCIeCompletionRing::requestRingDrain(AppleBCMWLANPCIeCompletionRing *this)
{
  unsigned int v2 = (*(uint64_t (**)(AppleBCMWLANPCIeCompletionRing *))(*(void *)this + 224))(this);
  unsigned int v3 = (*(uint64_t (**)(AppleBCMWLANPCIeCompletionRing *))(*(void *)this + 232))(this);
  ReadableItemCount  = AppleBCMWLANItemRing::getReadableItemCount(this, v3, v2);
  ItemCount  = AppleBCMWLANItemRing::getItemCount(this);
  uint64_t v6 = 0;
  if (AppleBCMWLANItemRing::getReadableItemCount(this, v3, v2))
  {
    unsigned int v7 = ItemCount >> 1;
    do
    {
      uint64_t v8 = *(void *)(*((void *)this + 14) + 112);
      uint64_t v9 = v8 + AppleBCMWLANItemRing::getItemSize(this) * v2;
      uint64_t v10 = (uint64_t (*)(uint64_t, AppleBCMWLANPCIeCompletionRing *, uint64_t, uint64_t))(*(uint64_t (**)(AppleBCMWLANPCIeCompletionRing *))(*(void *)this + 184))(this);
      uint64_t v11 = **((void **)this + 14);
      ReadableItemCountContinuous  = AppleBCMWLANItemRing::getReadableItemCountContinuous(this, v3, v2);
      int v13 = v10(v11, this, v9, ReadableItemCountContinuous);
      v2 += v13;
      if (v2 >= AppleBCMWLANItemRing::getItemCount(this))
      {
        unsigned int v2 = 0;
        *(unsigned char *)(*((void *)this + 14) + 8) ^= 1u;
      }
      uint64_t v6 = (v13 + v6);
      **(_DWORD **)(*((void *)this + 14) + 32)  = v2;
    }
    while (AppleBCMWLANItemRing::getReadableItemCount(this, v3, v2));
    if (v6)
    {
      mach_continuous_time();
      absolutetime_to_nanoseconds();
      *(_DWORD *)(*((void *)this + 14) + 168)  = v2;
      if (ReadableItemCount >= v7) {
        AppleBCMWLANPCIeDoorbell::ring(*(AppleBCMWLANPCIeDoorbell **)(*((void *)this + 14) + 144), *(_DWORD *)(*((void *)this + 14) + 152), 0, 0);
      }
    }
  }
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeCompletionRing::requestRingDrain(AppleBCMWLANPCIeCompletionRing *this)
{
  return AppleBCMWLANPCIeCompletionRing::requestRingDrain((AppleBCMWLANPCIeCompletionRing *)((char *)this - 88));
}

void AppleBCMWLANPCIeCompletionRing::commit(AppleBCMWLANPCIeCompletionRing *this)
{
}

void non-virtual thunk to'AppleBCMWLANPCIeCompletionRing::commit(AppleBCMWLANPCIeCompletionRing *this)
{
}

uint64_t AppleBCMWLANPCIeCompletionRing::getRingID(AppleBCMWLANPCIeCompletionRing *this)
{
  return *(unsigned __int16 *)(*((void *)this + 14) + 56);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeCompletionRing::getRingID(AppleBCMWLANPCIeCompletionRing *this)
{
  return *(unsigned __int16 *)(*((void *)this + 1) + 56);
}

uint64_t AppleBCMWLANPCIeCompletionRing::getRingType(AppleBCMWLANPCIeCompletionRing *this)
{
  return *(unsigned __int8 *)(*((void *)this + 14) + 58);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeCompletionRing::getRingType(AppleBCMWLANPCIeCompletionRing *this)
{
  return *(unsigned __int8 *)(*((void *)this + 1) + 58);
}

uint64_t AppleBCMWLANPCIeCompletionRing::getReadIndex(AppleBCMWLANPCIeCompletionRing *this)
{
  unsigned int v2 = **(_DWORD **)(*((void *)this + 14) + 32);
  if (v2 >= AppleBCMWLANItemRing::getItemCount(this)) {
    AppleBCMWLANPCIeCompletionRing::getReadIndex((uint64_t)this);
  }
  return (unsigned __int16)v2;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeCompletionRing::getReadIndex(AppleBCMWLANPCIeCompletionRing *this)
{
  return AppleBCMWLANPCIeCompletionRing::getReadIndex((AppleBCMWLANPCIeCompletionRing *)((char *)this - 72));
}

uint64_t AppleBCMWLANPCIeCompletionRing::getWriteIndex(AppleBCMWLANPCIeCompletionRing *this)
{
  unsigned int v2 = **(_DWORD **)(*((void *)this + 14) + 40);
  if (v2 >= AppleBCMWLANItemRing::getItemCount(this)) {
    AppleBCMWLANPCIeCompletionRing::getWriteIndex((uint64_t)this);
  }
  return (unsigned __int16)v2;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeCompletionRing::getWriteIndex(AppleBCMWLANPCIeCompletionRing *this)
{
  return AppleBCMWLANPCIeCompletionRing::getWriteIndex((AppleBCMWLANPCIeCompletionRing *)((char *)this - 72));
}

uint64_t AppleBCMWLANPCIeCompletionRing::getIndices(AppleBCMWLANPCIeCompletionRing *this, unsigned int *a2, unsigned int *a3)
{
  unsigned int v6 = **(_DWORD **)(*((void *)this + 14) + 32);
  if (v6 >= AppleBCMWLANItemRing::getItemCount(this)
    || (*a2  = v6,
        unsigned int v6 = **(_DWORD **)(*((void *)this + 14) + 40),
        uint64_t result = AppleBCMWLANItemRing::getItemCount(this),
        v6 >= result))
  {
    AppleBCMWLANItemRing::CallErrorAction((uint64_t)this, 3825173271, 0);
    panic("AppleBCMWLANPCIeCompletionRing::getIndices() Invalid index(0x%x)\n", v6);
  }
  *a3  = v6;
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeCompletionRing::getIndices(AppleBCMWLANPCIeCompletionRing *this, unsigned int *a2, unsigned int *a3)
{
  return AppleBCMWLANPCIeCompletionRing::getIndices((AppleBCMWLANPCIeCompletionRing *)((char *)this - 72), a2, a3);
}

uint64_t AppleBCMWLANPCIeCompletionRing::getBusAddress(uint64_t result, _DWORD *a2)
{
  *a2  = *(_DWORD *)(*(void *)(result + 112) + 48);
  a2[1]  = *(_DWORD *)(*(void *)(result + 112) + 52);
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeCompletionRing::getBusAddress(uint64_t result, _DWORD *a2)
{
  *a2  = *(_DWORD *)(*(void *)(result + 8) + 48);
  a2[1]  = *(_DWORD *)(*(void *)(result + 8) + 52);
  return result;
}

uint64_t AppleBCMWLANPCIeCompletionRing::getPhaseBit(AppleBCMWLANPCIeCompletionRing *this)
{
  return *(unsigned __int8 *)(*((void *)this + 14) + 8);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeCompletionRing::getPhaseBit(AppleBCMWLANPCIeCompletionRing *this)
{
  return *(unsigned __int8 *)(*((void *)this + 1) + 8);
}

uint64_t AppleBCMWLANPCIeCompletionRing::checkForWork(AppleBCMWLANPCIeCompletionRing *this)
{
  if (IO80211WorkSource::isEnabled(this))
  {
    if (AppleBCMWLANItemRing::getReadableItemCount(this))
    {
      ReadableItemCount  = AppleBCMWLANItemRing::getReadableItemCount(this);
      (*(void (**)(AppleBCMWLANPCIeCompletionRing *, uint64_t))(*(void *)this + 192))(this, ReadableItemCount);
    }
    if (AppleBCMWLANItemRing::getReadableItemCount(this)) {
      IO80211WorkSource::signalWorkAvailable(this);
    }
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeCompletionRing::checkForWork(AppleBCMWLANPCIeCompletionRing *this)
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeCompletionRing::signalWorkRecheck(AppleBCMWLANPCIeCompletionRing *this)
{
  return IO80211WorkSource::signalWorkAvailable((AppleBCMWLANPCIeCompletionRing *)((char *)this - 104));
}

uint64_t AppleBCMWLANPCIeCompletionRing::getBuffer(AppleBCMWLANPCIeCompletionRing *this)
{
  return *(void *)(*((void *)this + 14) + 112);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeCompletionRing::getBuffer(AppleBCMWLANPCIeCompletionRing *this)
{
  return *(void *)(*((void *)this + 7) + 112);
}

uint64_t AppleBCMWLANPCIeCompletionRing::getBufferSize(AppleBCMWLANPCIeCompletionRing *this)
{
  return *(void *)(*((void *)this + 14) + 96);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeCompletionRing::getBufferSize(AppleBCMWLANPCIeCompletionRing *this)
{
  return *(void *)(*((void *)this + 7) + 96);
}

uint64_t AppleBCMWLANPCIeCompletionRing::dumpRingState(AppleBCMWLANPCIeCompletionRing *this, const char *a2, char *a3)
{
  return IO80211Print();
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeCompletionRing::dumpRingState(AppleBCMWLANPCIeCompletionRing *this, const char *a2, char *a3)
{
  return AppleBCMWLANPCIeCompletionRing::dumpRingState((AppleBCMWLANPCIeCompletionRing *)((char *)this - 104), a2, a3);
}

uint64_t AppleBCMWLANPCIeCompletionRing::printRingState(AppleBCMWLANPCIeCompletionRing *this, const char *a2)
{
  uint64_t result = AppleBCMWLANByteRing::getLogger(this);
  if (result)
  {
    AppleBCMWLANByteRing::getLogger(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      Logger  = (CCLogStream *)AppleBCMWLANByteRing::getLogger(this);
      isEnabled  = IO80211WorkSource::isEnabled(this);
      uint64_t v7 = *((void *)this + 14);
      int v8 = **(_DWORD **)(v7 + 32);
      int v9 = **(_DWORD **)(v7 + 40);
      ReadableItemCount  = AppleBCMWLANItemRing::getReadableItemCount(this);
      WritableItemCount  = AppleBCMWLANItemRing::getWritableItemCount(this);
      Itemuint64_t Size = AppleBCMWLANItemRing::getItemSize(this);
      int v13 = (*(uint64_t (**)(AppleBCMWLANPCIeCompletionRing *))(*(void *)this + 248))(this);
      uint64_t v14 = *((void *)this + 14);
      return CCLogStream::logAlert(Logger, "[dk] %s@%d:%s: en %u, host {r=%u, w=%u} readable=%d writable=%d is=%d p=%d lst=[%d@%06llu.%06llu] cfw(cb %x, tgt %x), buf=%p this=%p \n", "printRingState", 485, a2, isEnabled, v8, v9, ReadableItemCount, WritableItemCount, ItemSize, v13, *(_DWORD *)(v14 + 168), *(void *)(v14 + 160) / 0x3B9ACA00uLL, *(void *)(v14 + 160) % 0x3B9ACA00uLL / 0x3E8, *(void *)(v14 + 128) != 0, *(void *)(v14 + 136) != 0, *(const void **)(v14 + 112),
               this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeCompletionRing::printRingState(AppleBCMWLANPCIeCompletionRing *this, const char *a2)
{
  return AppleBCMWLANPCIeCompletionRing::printRingState((AppleBCMWLANPCIeCompletionRing *)((char *)this - 104), a2);
}

uint64_t AppleBCMWLANPCIeCompletionRing::logRing(AppleBCMWLANPCIeCompletionRing *this, const char *a2, uint64_t a3)
{
  return (*(uint64_t (**)(AppleBCMWLANPCIeCompletionRing *, const char *, void, void, void, uint64_t))(*(void *)this + 280))(this, a2, 0, 0, 0, a3);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeCompletionRing::logRing(AppleBCMWLANPCIeCompletionRing *this, const char *a2)
{
  return (*(uint64_t (**)(void))(*((void *)this - 7) + 280))();
}

uint64_t AppleBCMWLANPCIeCompletionRing::getReadableByteCount(AppleBCMWLANPCIeCompletionRing *this)
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeCompletionRing::getReadableByteCount(AppleBCMWLANPCIeCompletionRing *this)
{
  return 0;
}

uint64_t AppleBCMWLANPCIeCompletionRing::getChain(AppleBCMWLANPCIeCompletionRing *this)
{
  return *((void *)this + 14) + 184;
}

uint64_t AppleBCMWLANPCIeCompletionRing::getRingFromChain(uint64_t a1)
{
  if (a1 == 184) {
    return 0;
  }
  else {
    return *(void *)(a1 - 8);
  }
}

uint64_t OUTLINED_FUNCTION_0(uint64_t a1)
{
  return AppleBCMWLANItemRing::CallErrorAction(a1, 3825173271, 0);
}

void _GLOBAL__sub_I_AppleBCMWLANPCIeCompletionRing_cpp()
{
  kNullRange  = 0;
}

OSObject *AppleBCMWLANPCIeTransmitFlowRing::withOptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v12 = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANPCIeTransmitFlowRingMetaClass, &v12)) {
    return 0;
  }
  uint64_t v10 = v12;
  if (v12
    && (((uint64_t (*)(OSObject *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v12->OSMetaClassBase::__vftable[7].init)(v12, a1, a2, a3, a4, a5) & 1) == 0)
  {
    ((void (*)(OSObject *))v10->release)(v10);
    return 0;
  }
  return v10;
}

uint64_t AppleBCMWLANPCIeTransmitFlowRing::initWithOwnerAndFillAction(uint64_t a1, OSObject *a2, void (*a3)(OSObject *, ...), void (*a4)(OSObject *, AppleBCMWLANByteRing *, int, void *), uint64_t a5, uint64_t a6)
{
  uint64_t result = AppleBCMWLANPCIeSubmissionRing::initWithOwnerAndOptions((uint64_t **)a1, a2, a3, a4, (unsigned __int16 *)(a5 + 8), a6);
  if (result)
  {
    uint64_t result = IOMallocZeroTyped();
    *(void *)(a1 + 128)  = result;
    if (result)
    {
      *(unsigned char *)(result + 6)  = *(unsigned char *)(a5 + 136);
      uint64_t v9 = *(void *)(a1 + 128);
      int v10 = *(_DWORD *)(a5 + 137);
      *(_WORD *)(v9 + 11)  = *(_WORD *)(a5 + 141);
      *(_DWORD *)(v9 + 7)  = v10;
      uint64_t v11 = *(void *)(a1 + 128);
      int v12 = *(_DWORD *)(a5 + 143);
      *(_WORD *)(v11 + 17)  = *(_WORD *)(a5 + 147);
      *(_DWORD *)(v11 + 1AppleBCMWLANCommandMonitor::free(this - 3) = v12;
      *(unsigned char *)(*(void *)(a1 + 128) + 19)  = *(unsigned char *)(a5 + 149);
      *(unsigned char *)(*(void *)(a1 + 128) + 20)  = *(unsigned char *)(a5 + 168);
      *(unsigned char *)(*(void *)(a1 + 128) + 21)  = *(unsigned char *)(a5 + 169);
      *(_DWORD *)(*(void *)(a1 + 128) + 24)  = *(_DWORD *)(a5 + 152);
      *(unsigned char *)(*(void *)(a1 + 128) + 28)  = *(unsigned char *)(a5 + 170);
      *(unsigned char *)(*(void *)(a1 + 128) + 29)  = *(unsigned char *)(a5 + 171);
      *(void *)(*(void *)(a1 + 128) + 32)  = *(void *)(a5 + 176);
      AppleBCMWLANItemRing::getItemCount((AppleBCMWLANItemRing *)a1);
      return 1;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeTransmitFlowRing::initWithOwnerAndFillAction(uint64_t a1, OSObject *a2, void (*a3)(OSObject *, ...), void (*a4)(OSObject *, AppleBCMWLANByteRing *, int, void *), uint64_t a5, uint64_t a6)
{
  return AppleBCMWLANPCIeTransmitFlowRing::initWithOwnerAndFillAction(a1 - 120, a2, a3, a4, a5, a6);
}

uint64_t AppleBCMWLANPCIeTransmitFlowRing::free(AppleBCMWLANPCIeTransmitFlowRing *this)
{
  unsigned int v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    memset_s(v2, 0x30uLL, 0, 0x30uLL);
    unsigned int v3 = (void *)*((void *)this + 16);
    if (v3)
    {
      IOFree(v3, 0x30uLL);
      *((void *)this + 16)  = 0;
    }
  }
  return AppleBCMWLANPCIeSubmissionRing::free(this);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeTransmitFlowRing::free(AppleBCMWLANPCIeTransmitFlowRing *this)
{
  return AppleBCMWLANPCIeTransmitFlowRing::free((AppleBCMWLANPCIeTransmitFlowRing *)((char *)this - 24));
}

uint64_t AppleBCMWLANPCIeTransmitFlowRing::requestRingFill(AppleBCMWLANPCIeTransmitFlowRing *this, int a2, int a3)
{
  if (**((_DWORD **)this + 16) == 3) {
    return AppleBCMWLANPCIeSubmissionRing::requestRingFill(this, a2, a3);
  }
  else {
    return 0;
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeTransmitFlowRing::requestRingFill(AppleBCMWLANPCIeTransmitFlowRing *this, int a2, int a3)
{
  if (**((_DWORD **)this + 5) == 3) {
    return AppleBCMWLANPCIeSubmissionRing::requestRingFill((AppleBCMWLANPCIeTransmitFlowRing *)((char *)this - 88), a2, a3);
  }
  else {
    return 0;
  }
}

uint64_t AppleBCMWLANPCIeTransmitFlowRing::checkForWork(AppleBCMWLANPCIeTransmitFlowRing *this)
{
  if (**((_DWORD **)this + 16) == 3) {
    return AppleBCMWLANPCIeSubmissionRing::checkForWork(this);
  }
  else {
    return 0;
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeTransmitFlowRing::checkForWork(AppleBCMWLANPCIeTransmitFlowRing *this)
{
  if (**((_DWORD **)this + 11) == 3) {
    return AppleBCMWLANPCIeSubmissionRing::checkForWork((AppleBCMWLANPCIeTransmitFlowRing *)((char *)this - 40));
  }
  else {
    return 0;
  }
}

uint64_t AppleBCMWLANPCIeTransmitFlowRing::packetsWaitingForRingCount(AppleBCMWLANPCIeTransmitFlowRing *this, char a2)
{
  uint64_t result = 0;
  if (a2)
  {
    uint64_t v4 = *((void *)this + 16);
    if (*(_DWORD *)v4 == 3)
    {
      uint64_t v5 = *(unsigned __int16 **)(v4 + 32);
      if (v5) {
        return *v5;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANPCIeTransmitFlowRing::getState(AppleBCMWLANPCIeTransmitFlowRing *this)
{
  return **((unsigned int **)this + 16);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeTransmitFlowRing::getState(AppleBCMWLANPCIeTransmitFlowRing *this)
{
  return **((unsigned int **)this + 1);
}

uint64_t AppleBCMWLANPCIeTransmitFlowRing::setState(uint64_t result, int a2)
{
  **(_DWORD **)(result + 128)  = a2;
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeTransmitFlowRing::setState(uint64_t result, int a2)
{
  **(_DWORD **)(result + 8)  = a2;
  return result;
}

uint64_t AppleBCMWLANPCIeTransmitFlowRing::getResourceID(AppleBCMWLANPCIeTransmitFlowRing *this)
{
  return *(__int16 *)(*((void *)this + 16) + 4);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeTransmitFlowRing::getResourceID(AppleBCMWLANPCIeTransmitFlowRing *this)
{
  return *(__int16 *)(*((void *)this + 1) + 4);
}

uint64_t AppleBCMWLANPCIeTransmitFlowRing::setResourceID(uint64_t this, __int16 a2)
{
  *(_WORD *)(*(void *)(this + 128) + 4)  = a2;
  return this;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeTransmitFlowRing::setResourceID(uint64_t this, __int16 a2)
{
  *(_WORD *)(*(void *)(this + 8) + 4)  = a2;
  return this;
}

uint64_t AppleBCMWLANPCIeTransmitFlowRing::getTid(AppleBCMWLANPCIeTransmitFlowRing *this)
{
  return *(unsigned __int8 *)(*((void *)this + 16) + 19);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeTransmitFlowRing::getTid(AppleBCMWLANPCIeTransmitFlowRing *this)
{
  return *(unsigned __int8 *)(*((void *)this + 1) + 19);
}

uint64_t AppleBCMWLANPCIeTransmitFlowRing::getIfFlags(AppleBCMWLANPCIeTransmitFlowRing *this)
{
  return *(unsigned __int8 *)(*((void *)this + 16) + 20);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeTransmitFlowRing::getIfFlags(AppleBCMWLANPCIeTransmitFlowRing *this)
{
  return *(unsigned __int8 *)(*((void *)this + 1) + 20);
}

uint64_t AppleBCMWLANPCIeTransmitFlowRing::getTc(AppleBCMWLANPCIeTransmitFlowRing *this)
{
  return *(unsigned __int8 *)(*((void *)this + 16) + 21);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeTransmitFlowRing::getTc(AppleBCMWLANPCIeTransmitFlowRing *this)
{
  return *(unsigned __int8 *)(*((void *)this + 1) + 21);
}

uint64_t AppleBCMWLANPCIeTransmitFlowRing::getAc(AppleBCMWLANPCIeTransmitFlowRing *this)
{
  return *(unsigned int *)(*((void *)this + 16) + 24);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeTransmitFlowRing::getAc(AppleBCMWLANPCIeTransmitFlowRing *this)
{
  return *(unsigned int *)(*((void *)this + 1) + 24);
}

uint64_t AppleBCMWLANPCIeTransmitFlowRing::getPriority(AppleBCMWLANPCIeTransmitFlowRing *this)
{
  return *(unsigned __int8 *)(*((void *)this + 16) + 28);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeTransmitFlowRing::getPriority(AppleBCMWLANPCIeTransmitFlowRing *this)
{
  return *(unsigned __int8 *)(*((void *)this + 1) + 28);
}

uint64_t AppleBCMWLANPCIeTransmitFlowRing::getIntVector(AppleBCMWLANPCIeTransmitFlowRing *this)
{
  return *(unsigned __int8 *)(*((void *)this + 16) + 29);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeTransmitFlowRing::getIntVector(AppleBCMWLANPCIeTransmitFlowRing *this)
{
  return *(unsigned __int8 *)(*((void *)this + 1) + 29);
}

uint64_t AppleBCMWLANPCIeTransmitFlowRing::getIfIndx(AppleBCMWLANPCIeTransmitFlowRing *this)
{
  return *(unsigned __int8 *)(*((void *)this + 16) + 6);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeTransmitFlowRing::getIfIndx(AppleBCMWLANPCIeTransmitFlowRing *this)
{
  return *(unsigned __int8 *)(*((void *)this + 1) + 6);
}

uint64_t AppleBCMWLANPCIeTransmitFlowRing::copyDestinationAddress(uint64_t this, unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(this + 128);
  int v3 = *(_DWORD *)(v2 + 7);
  *((_WORD *)a2 + 2)  = *(_WORD *)(v2 + 11);
  *(_DWORD *)a2  = v3;
  return this;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeTransmitFlowRing::copyDestinationAddress(uint64_t this, unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(this + 8);
  int v3 = *(_DWORD *)(v2 + 7);
  *((_WORD *)a2 + 2)  = *(_WORD *)(v2 + 11);
  *(_DWORD *)a2  = v3;
  return this;
}

uint64_t AppleBCMWLANPCIeTransmitFlowRing::copySourceAddress(uint64_t this, unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(this + 128);
  int v3 = *(_DWORD *)(v2 + 13);
  *((_WORD *)a2 + 2)  = *(_WORD *)(v2 + 17);
  *(_DWORD *)a2  = v3;
  return this;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeTransmitFlowRing::copySourceAddress(uint64_t this, unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(this + 8);
  int v3 = *(_DWORD *)(v2 + 13);
  *((_WORD *)a2 + 2)  = *(_WORD *)(v2 + 17);
  *(_DWORD *)a2  = v3;
  return this;
}

uint64_t AppleBCMWLANPCIeTransmitFlowRing::getReason(AppleBCMWLANPCIeTransmitFlowRing *this)
{
  return *(unsigned __int16 *)(*((void *)this + 16) + 40);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeTransmitFlowRing::getReason(AppleBCMWLANPCIeTransmitFlowRing *this)
{
  return *(unsigned __int16 *)(*((void *)this + 1) + 40);
}

uint64_t AppleBCMWLANPCIeTransmitFlowRing::setReason(uint64_t this, __int16 a2)
{
  *(_WORD *)(*(void *)(this + 128) + 40)  = a2;
  return this;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeTransmitFlowRing::setReason(uint64_t this, __int16 a2)
{
  *(_WORD *)(*(void *)(this + 8) + 40)  = a2;
  return this;
}

uint64_t AppleBCMWLANPCIeTransmitFlowRing::dumpRingState(AppleBCMWLANPCIeTransmitFlowRing *this, const char *a2, char *a3)
{
  AppleBCMWLANByteRing::getLogger(this);
  IO80211WorkSource::isEnabled(this);
  (*(void (**)(AppleBCMWLANPCIeTransmitFlowRing *))(*(void *)this + 312))(this);
  (*(void (**)(AppleBCMWLANPCIeTransmitFlowRing *))(*(void *)this + 208))(this);
  (*(void (**)(AppleBCMWLANPCIeTransmitFlowRing *))(*(void *)this + 392))(this);
  (*(void (**)(AppleBCMWLANPCIeTransmitFlowRing *))(*(void *)this + 344))(this);
  int v5 = IO80211Print();
  return AppleBCMWLANPCIeSubmissionRing::dumpRingState(this, a2, a3) + v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeTransmitFlowRing::dumpRingState(AppleBCMWLANPCIeTransmitFlowRing *this, const char *a2, char *a3)
{
  return AppleBCMWLANPCIeTransmitFlowRing::dumpRingState((AppleBCMWLANPCIeTransmitFlowRing *)((char *)this - 104), a2, a3);
}

uint64_t AppleBCMWLANPCIeTransmitFlowRing::printRingState(AppleBCMWLANPCIeTransmitFlowRing *this, const char *a2)
{
  uint64_t result = AppleBCMWLANByteRing::getLogger(this);
  if (result)
  {
    AppleBCMWLANByteRing::getLogger(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      Logger  = (CCLogStream *)AppleBCMWLANByteRing::getLogger(this);
      isEnabled  = IO80211WorkSource::isEnabled(this);
      int v7 = (*(uint64_t (**)(AppleBCMWLANPCIeTransmitFlowRing *))(*(void *)this + 312))(this);
      int v8 = (*(uint64_t (**)(AppleBCMWLANPCIeTransmitFlowRing *))(*(void *)this + 208))(this);
      int v9 = (*(uint64_t (**)(AppleBCMWLANPCIeTransmitFlowRing *))(*(void *)this + 392))(this);
      int v10 = (*(uint64_t (**)(AppleBCMWLANPCIeTransmitFlowRing *))(*(void *)this + 344))(this);
      uint64_t v11 = (unsigned __int8 *)*((void *)this + 16);
      return CCLogStream::logAlert(Logger, "[dk] %s@%d:%s, en %u, (state=%x id=%d if=%d tid=%d da=%02x:%02x:%02x:%02x:%02x:%02x sa=%02x:%02x:%02x:%02x:%02x:%02x pnd=%d)\n", "printRingState", 325, a2, isEnabled, v7, v8, v9, v10, v11[7], v11[8], v11[9], v11[10], v11[11], v11[12], v11[13], v11[14],
               v11[15],
               v11[16],
               v11[17],
               v11[18],
               0);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeTransmitFlowRing::printRingState(AppleBCMWLANPCIeTransmitFlowRing *this, const char *a2)
{
  return AppleBCMWLANPCIeTransmitFlowRing::printRingState((AppleBCMWLANPCIeTransmitFlowRing *)((char *)this - 104), a2);
}

uint64_t AppleBCMWLANPCIeTransmitFlowRing::logRing(AppleBCMWLANPCIeTransmitFlowRing *this, const char *a2, uint64_t a3)
{
  return (*(uint64_t (**)(AppleBCMWLANPCIeTransmitFlowRing *, const char *, void, void, void, uint64_t))(*(void *)this + 280))(this, a2, 0, 0, 0, a3);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeTransmitFlowRing::logRing(AppleBCMWLANPCIeTransmitFlowRing *this, const char *a2)
{
  return (*(uint64_t (**)(void))(*((void *)this - 7) + 280))();
}

uint64_t AppleBCMWLANPCIeTransmitFlowRing::getCounter(AppleBCMWLANPCIeTransmitFlowRing *this)
{
  return AppleBCMWLANPCIeSubmissionRing::getCounter(this) & 0x7FFF | (unsigned __int16)(*(unsigned __int8 *)(*((void *)this + 16) + 42) << 15);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeTransmitFlowRing::getCounter(AppleBCMWLANPCIeTransmitFlowRing *this)
{
  return AppleBCMWLANPCIeSubmissionRing::getCounter((AppleBCMWLANPCIeTransmitFlowRing *)((char *)this - 104)) & 0x7FFF | (unsigned __int16)(*(unsigned __int8 *)(*((void *)this + 3) + 42) << 15);
}

uint64_t AppleBCMWLANPCIeTransmitFlowRing::isSkywalkResource(AppleBCMWLANPCIeTransmitFlowRing *this)
{
  return this >> 15;
}

uint64_t AppleBCMWLANPCIeTransmitFlowRing::setSkywalkFlow(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)(this + 128) + 42)  = a2;
  return this;
}

uint64_t AppleBCMWLANPCIeTransmitFlowRing::isSkywalkFlow(AppleBCMWLANPCIeTransmitFlowRing *this)
{
  return *(unsigned __int8 *)(*((void *)this + 16) + 42);
}

uint64_t AppleBCMWLANPCIeTransmitFlowRing::isLowLatencyRing(AppleBCMWLANPCIeTransmitFlowRing *this)
{
  return *(unsigned char *)(*((void *)this + 16) + 20) & 1;
}

uint64_t AppleBCMWLANPCIeTransmitFlowRing::enable(AppleBCMWLANPCIeTransmitFlowRing *this)
{
  return IOLog("AppleBCMWLANPCIeTransmitFlowRing::enable %p\n", this);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeTransmitFlowRing::enable(AppleBCMWLANPCIeTransmitFlowRing *this)
{
  uint64_t v1 = (char *)this - 40;
  IO80211WorkSource::enable((AppleBCMWLANPCIeTransmitFlowRing *)((char *)this - 40));
  return IOLog("AppleBCMWLANPCIeTransmitFlowRing::enable %p\n", v1);
}

void _GLOBAL__sub_I_AppleBCMWLANPCIeTransmitFlowRing_cpp()
{
  kNullRange  = 0;
}

OSObject *AppleBCMWLANPCIeSubmissionRing::withOptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v12 = (OSObject *)0xAAAAAAAAAAAAAAAALL;
  if (OSObjectAllocate((OSMetaClass *)gAppleBCMWLANPCIeSubmissionRingMetaClass, &v12)) {
    return 0;
  }
  int v10 = v12;
  if (v12
    && (((uint64_t (*)(OSObject *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v12->OSMetaClassBase::__vftable[5].isEqualTo)(v12, a1, a2, a3, a4, a5) & 1) == 0)
  {
    ((void (*)(OSObject *))v10->release)(v10);
    return 0;
  }
  return v10;
}

uint64_t AppleBCMWLANPCIeSubmissionRing::initWithOwnerAndOptions(uint64_t **a1, OSObject *a2, void (*a3)(OSObject *, ...), void (*a4)(OSObject *, AppleBCMWLANByteRing *, int, void *), unsigned __int16 *a5, uint64_t a6)
{
  uint64_t result = AppleBCMWLANTxItemRing::initWithOptions((AppleBCMWLANTxItemRing *)a1, a2, a3, a4);
  if (!result) {
    return result;
  }
  uint64_t result = IOMallocZeroTyped();
  a1[14]  = (uint64_t *)result;
  if (!result) {
    return result;
  }
  if (!a6)
  {
    ClassNameHelper  = (const char *)getClassNameHelper((OSObject *)a1);
    IOLog("%s::%s(): Unable to get debug logger\n", ClassNameHelper, "initWithOwnerAndOptions");
    return 0;
  }
  *(void *)(result + 216)  = a6;
  uint64_t v11 = a1[14][27];
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  AppleBCMWLANByteRing::setLogger((uint64_t)a1, a6);
  a1[14][23]  = (uint64_t)a2;
  *((unsigned char *)a1[14] + 12)  = 1;
  *((_WORD *)a1[14] + 28)  = *a5;
  *((unsigned char *)a1[14] + 58)  = *((unsigned char *)a5 + 2);
  a1[14][8]  = *((void *)a5 + 13);
  AppleBCMWLANItemRing::setItemCount((uint64_t)a1, *((_DWORD *)a5 + 2));
  AppleBCMWLANItemRing::setItemSize((uint64_t)a1, *((_DWORD *)a5 + 1));
  unint64_t v12 = *((unsigned int *)a5 + 2);
  unint64_t v13 = (v12 * *((_DWORD *)a5 + 1));
  unint64_t v14 = *((void *)a5 + 14);
  if (v13 % v14) {
    int v15 = v14 - v13 % v14;
  }
  else {
    int v15 = 0;
  }
  a1[14][12]  = (v15 + v13);
  uint64_t v16 = *a5;
  uint64_t v17 = *((void *)a5 + 11);
  a1[14][4]  = *((void *)a5 + 10) + 4 * v16;
  a1[14][5]  = v17 + 4 * v16;
  uint64_t v18 = *((void *)a5 + 2);
  a1[14][20]  = *((void *)a5 + 3);
  a1[14][19]  = v18;
  uint64_t v19 = *((void *)a5 + 4);
  a1[14][22]  = *((void *)a5 + 5);
  a1[14][21]  = v19;
  *a1[14]  = *((void *)a5 + 6);
  *((_DWORD *)a1[14] + 2)  = *((_DWORD *)a5 + 14);
  uint64_t v20 = a1[14];
  if (*((_WORD *)v20 + 28) == 1)
  {
    *((unsigned char *)v20 + 141)  = 1;
    AppleBCMWLANPCIeDoorbell::setRXPacketThreshold(*a1[14], v12 >> 3);
    uint64_t v20 = a1[14];
    unint64_t v14 = *((void *)a5 + 14);
  }
  v20[13]  = v20[12];
  if (AppleBCMWLANPCIeAllocateDartMappedMemory((uint64_t)(a1[14] + 9), v14, 2, *((IOService **)a5 + 15)))
  {
    *((_DWORD *)a1[14] + 12)  = *((_DWORD *)a1[14] + 30);
    *((_DWORD *)a1[14] + 1AppleBCMWLANCommandMonitor::free(this - 3) = *((_DWORD *)a1[14] + 31);
    a1[14][24]  = (uint64_t)a1;
    *(_DWORD *)a1[14][5]  = 0;
    *(_DWORD *)a1[14][4]  = 0;
    return 1;
  }
  uint64_t result = AppleBCMWLANByteRing::getLogger((AppleBCMWLANByteRing *)a1);
  if (result)
  {
    AppleBCMWLANByteRing::getLogger((AppleBCMWLANByteRing *)a1);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      Logger  = (CCLogStream *)AppleBCMWLANByteRing::getLogger((AppleBCMWLANByteRing *)a1);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:Failed to allocate scratch memory, direction[%u] size[0x%08llx] bufferSize[0x%08llx]\n", "initWithOwnerAndOptions", 175, 2, a1[14][13], a1[14][12]);
      return 0;
    }
  }
  return result;
}

uint64_t AppleBCMWLANPCIeSubmissionRing::resetSharedPointers(uint64_t this)
{
  **(_DWORD **)(*(void *)(this + 112) + 40)  = 0;
  **(_DWORD **)(*(void *)(this + 112) + 32)  = 0;
  return this;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSubmissionRing::initWithOwnerAndOptions(uint64_t a1, OSObject *a2, void (*a3)(OSObject *, ...), void (*a4)(OSObject *, AppleBCMWLANByteRing *, int, void *), unsigned __int16 *a5, uint64_t a6)
{
  return AppleBCMWLANPCIeSubmissionRing::initWithOwnerAndOptions((uint64_t **)(a1 - 104), a2, a3, a4, a5, a6);
}

uint64_t AppleBCMWLANPCIeSubmissionRing::free(AppleBCMWLANPCIeSubmissionRing *this)
{
  uint64_t v2 = *((void *)this + 14);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 216);
    if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
      *(void *)(*((void *)this + 14) + 216)  = 0;
      uint64_t v2 = *((void *)this + 14);
    }
    AppleBCMWLANPCIeFreeDartMappedMemory(v2 + 72);
    memset_s(*((void **)this + 14), 0xE0uLL, 0, 0xE0uLL);
    uint64_t v4 = (void *)*((void *)this + 14);
    if (v4)
    {
      IOFree(v4, 0xE0uLL);
      *((void *)this + 14)  = 0;
    }
  }
  return AppleBCMWLANTxItemRing::free(this);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSubmissionRing::free(AppleBCMWLANPCIeSubmissionRing *this)
{
  return AppleBCMWLANPCIeSubmissionRing::free((AppleBCMWLANPCIeSubmissionRing *)((char *)this - 24));
}

uint64_t AppleBCMWLANPCIeSubmissionRing::requestRingFill(AppleBCMWLANPCIeSubmissionRing *this, int a2, int a3)
{
  if (a3)
  {
    uint64_t v5 = *((void *)this + 14);
    unsigned int v6 = *(void (**)(uint64_t, uint64_t))(v5 + 168);
    if (v6)
    {
      uint64_t v7 = *(void *)(v5 + 176);
      uint64_t v8 = (*(uint64_t (**)(AppleBCMWLANPCIeSubmissionRing *))(*(void *)this + 208))(this);
      v6(v7, v8);
    }
  }
  unsigned int v9 = (*(uint64_t (**)(AppleBCMWLANPCIeSubmissionRing *))(*(void *)this + 232))(this);
  unsigned int v10 = (*(uint64_t (**)(AppleBCMWLANPCIeSubmissionRing *))(*(void *)this + 224))(this);
  if (!a2) {
    return 0;
  }
  unsigned int v11 = v10;
  uint64_t v12 = 0;
  while (1)
  {
    if (!AppleBCMWLANItemRing::getWritableItemCount(this, v9, v11)) {
      goto LABEL_20;
    }
    uint64_t v13 = *(void *)(*((void *)this + 14) + 112);
    Itemuint64_t Size = AppleBCMWLANItemRing::getItemSize(this);
    if (!(*(uint64_t (**)(AppleBCMWLANPCIeSubmissionRing *))(*(void *)this + 184))(this)) {
      break;
    }
    if (!*(void *)(*((void *)this + 14) + 184))
    {
      if (!AppleBCMWLANByteRing::getLogger(this)) {
        goto LABEL_20;
      }
      AppleBCMWLANByteRing::getLogger(this);
      if (!CCLogStream::shouldLog()) {
        goto LABEL_20;
      }
      Logger  = (CCLogStream *)AppleBCMWLANByteRing::getLogger(this);
      (*(void (**)(AppleBCMWLANPCIeSubmissionRing *))(*(void *)this + 216))(this);
      (*(void (**)(AppleBCMWLANPCIeSubmissionRing *))(*(void *)this + 208))(this);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:ERROR: ivars->fOwner is NULL (ring type: %u, ring ID: %u)\n");
      goto LABEL_26;
    }
    uint64_t v15 = v13 + ItemSize * v9;
    uint64_t v16 = (uint64_t (*)(uint64_t, AppleBCMWLANPCIeSubmissionRing *, uint64_t, uint64_t))(*(uint64_t (**)(AppleBCMWLANPCIeSubmissionRing *))(*(void *)this + 184))(this);
    uint64_t v17 = *(void *)(*((void *)this + 14) + 184);
    WritableItemCountContinuous  = AppleBCMWLANItemRing::getWritableItemCountContinuous(this, v9, v11);
    int v19 = v16(v17, this, v15, WritableItemCountContinuous);
    if (v19)
    {
      int v20 = v19;
      v9 += v19;
      if (v9 >= AppleBCMWLANItemRing::getItemCount(this))
      {
        unsigned int v9 = 0;
        *(unsigned char *)(*((void *)this + 14) + 12) ^= 1u;
      }
      uint64_t v12 = (v20 + v12);
      **(_DWORD **)(*((void *)this + 14) + 40)  = v9;
      if (--a2) {
        continue;
      }
    }
    goto LABEL_20;
  }
  if (!AppleBCMWLANByteRing::getLogger(this)
    || (AppleBCMWLANByteRing::getLogger(this), !CCLogStream::shouldLog()))
  {
LABEL_20:
    if (!v12) {
      return v12;
    }
    goto LABEL_21;
  }
  int v21 = (CCLogStream *)AppleBCMWLANByteRing::getLogger(this);
  (*(void (**)(AppleBCMWLANPCIeSubmissionRing *))(*(void *)this + 216))(this);
  (*(void (**)(AppleBCMWLANPCIeSubmissionRing *))(*(void *)this + 208))(this);
  CCLogStream::logAlert(v21, "[dk] %s@%d:ERROR: getRingFillAction() is NULL (ring type: %u, ring ID: %u)\n");
LABEL_26:
  if (!v12) {
    return v12;
  }
LABEL_21:
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  *(_DWORD *)(*((void *)this + 14) + 136)  = v9;
  uint64_t v22 = *((void *)this + 14);
  int v23 = *(AppleBCMWLANPCIeDoorbell **)v22;
  if (*(unsigned char *)(v22 + 140))
  {
    AppleBCMWLANPCIeDoorbell::ringNow(v23);
    *(unsigned char *)(*((void *)this + 14) + 140)  = 0;
  }
  else
  {
    AppleBCMWLANPCIeDoorbell::ring(v23, *(_DWORD *)(v22 + 8), *(unsigned __int8 *)(v22 + 141), v12);
  }
  return v12;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSubmissionRing::requestRingFill(AppleBCMWLANPCIeSubmissionRing *this, int a2, int a3)
{
  return AppleBCMWLANPCIeSubmissionRing::requestRingFill((AppleBCMWLANPCIeSubmissionRing *)((char *)this - 88), a2, a3);
}

void AppleBCMWLANPCIeSubmissionRing::commit(AppleBCMWLANPCIeSubmissionRing *this)
{
}

void non-virtual thunk to'AppleBCMWLANPCIeSubmissionRing::commit(AppleBCMWLANPCIeSubmissionRing *this)
{
}

uint64_t AppleBCMWLANPCIeSubmissionRing::getRingID(AppleBCMWLANPCIeSubmissionRing *this)
{
  return *(unsigned __int16 *)(*((void *)this + 14) + 56);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSubmissionRing::getRingID(AppleBCMWLANPCIeSubmissionRing *this)
{
  return *(unsigned __int16 *)(*((void *)this + 1) + 56);
}

uint64_t AppleBCMWLANPCIeSubmissionRing::getRingType(AppleBCMWLANPCIeSubmissionRing *this)
{
  return *(unsigned __int8 *)(*((void *)this + 14) + 58);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSubmissionRing::getRingType(AppleBCMWLANPCIeSubmissionRing *this)
{
  return *(unsigned __int8 *)(*((void *)this + 1) + 58);
}

uint64_t AppleBCMWLANPCIeSubmissionRing::getReadIndex(AppleBCMWLANPCIeSubmissionRing *this)
{
  unsigned int v2 = **(_DWORD **)(*((void *)this + 14) + 32);
  if (v2 >= AppleBCMWLANItemRing::getItemCount(this)) {
    AppleBCMWLANPCIeSubmissionRing::getReadIndex((uint64_t)this);
  }
  return (unsigned __int16)v2;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSubmissionRing::getReadIndex(AppleBCMWLANPCIeSubmissionRing *this)
{
  return AppleBCMWLANPCIeSubmissionRing::getReadIndex((AppleBCMWLANPCIeSubmissionRing *)((char *)this - 72));
}

uint64_t AppleBCMWLANPCIeSubmissionRing::getWriteIndex(AppleBCMWLANPCIeSubmissionRing *this)
{
  unsigned int v2 = **(_DWORD **)(*((void *)this + 14) + 40);
  if (v2 >= AppleBCMWLANItemRing::getItemCount(this)) {
    AppleBCMWLANPCIeSubmissionRing::getWriteIndex((uint64_t)this);
  }
  return (unsigned __int16)v2;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSubmissionRing::getWriteIndex(AppleBCMWLANPCIeSubmissionRing *this)
{
  return AppleBCMWLANPCIeSubmissionRing::getWriteIndex((AppleBCMWLANPCIeSubmissionRing *)((char *)this - 72));
}

uint64_t AppleBCMWLANPCIeSubmissionRing::getIndices(AppleBCMWLANPCIeSubmissionRing *this, unsigned int *a2, unsigned int *a3)
{
  unsigned int v6 = **(_DWORD **)(*((void *)this + 14) + 32);
  if (v6 >= AppleBCMWLANItemRing::getItemCount(this)
    || (*a2  = v6,
        unsigned int v6 = **(_DWORD **)(*((void *)this + 14) + 40),
        uint64_t result = AppleBCMWLANItemRing::getItemCount(this),
        v6 >= result))
  {
    AppleBCMWLANItemRing::CallErrorAction((uint64_t)this, 3825173271, 0);
    panic("AppleBCMWLANPCIeSubmissionRing::getIndices() Invalid index(0x%x)\n", v6);
  }
  *a3  = v6;
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSubmissionRing::getIndices(AppleBCMWLANPCIeSubmissionRing *this, unsigned int *a2, unsigned int *a3)
{
  return AppleBCMWLANPCIeSubmissionRing::getIndices((AppleBCMWLANPCIeSubmissionRing *)((char *)this - 72), a2, a3);
}

uint64_t AppleBCMWLANPCIeSubmissionRing::getBusAddress(uint64_t result, _DWORD *a2)
{
  *a2  = *(_DWORD *)(*(void *)(result + 112) + 48);
  a2[1]  = *(_DWORD *)(*(void *)(result + 112) + 52);
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSubmissionRing::getBusAddress(uint64_t result, _DWORD *a2)
{
  *a2  = *(_DWORD *)(*(void *)(result + 8) + 48);
  a2[1]  = *(_DWORD *)(*(void *)(result + 8) + 52);
  return result;
}

uint64_t AppleBCMWLANPCIeSubmissionRing::getPhaseBit(AppleBCMWLANPCIeSubmissionRing *this)
{
  return *(unsigned __int8 *)(*((void *)this + 14) + 12);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSubmissionRing::getPhaseBit(AppleBCMWLANPCIeSubmissionRing *this)
{
  return *(unsigned __int8 *)(*((void *)this + 1) + 12);
}

uint64_t AppleBCMWLANPCIeSubmissionRing::checkForWork(AppleBCMWLANPCIeSubmissionRing *this)
{
  if (IO80211WorkSource::isEnabled(this))
  {
    uint64_t v2 = *((void *)this + 14);
    uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 152);
    if (v3)
    {
      uint64_t v4 = *(void *)(v2 + 160);
      uint64_t v5 = (*(uint64_t (**)(AppleBCMWLANPCIeSubmissionRing *))(*(void *)this + 208))(this);
      WritableItemCount  = v3(v4, v5);
      if (AppleBCMWLANItemRing::getWritableItemCount(this) < WritableItemCount) {
        WritableItemCount  = AppleBCMWLANItemRing::getWritableItemCount(this);
      }
      if (WritableItemCount) {
        (*(void (**)(AppleBCMWLANPCIeSubmissionRing *, uint64_t, uint64_t))(*(void *)this + 192))(this, WritableItemCount, 1);
      }
    }
    else
    {
      AppleBCMWLANItemRing::getWritableItemCount(this);
    }
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSubmissionRing::checkForWork(AppleBCMWLANPCIeSubmissionRing *this)
{
  return AppleBCMWLANPCIeSubmissionRing::checkForWork((AppleBCMWLANPCIeSubmissionRing *)((char *)this - 40));
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSubmissionRing::signalWorkRecheck(AppleBCMWLANPCIeSubmissionRing *this)
{
  return IO80211WorkSource::signalWorkAvailable((AppleBCMWLANPCIeSubmissionRing *)((char *)this - 104));
}

uint64_t AppleBCMWLANPCIeSubmissionRing::getBuffer(AppleBCMWLANPCIeSubmissionRing *this)
{
  return *(void *)(*((void *)this + 14) + 112);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSubmissionRing::getBuffer(AppleBCMWLANPCIeSubmissionRing *this)
{
  return *(void *)(*((void *)this + 7) + 112);
}

uint64_t AppleBCMWLANPCIeSubmissionRing::getBufferSize(AppleBCMWLANPCIeSubmissionRing *this)
{
  return *(void *)(*((void *)this + 14) + 96);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSubmissionRing::getBufferSize(AppleBCMWLANPCIeSubmissionRing *this)
{
  return *(void *)(*((void *)this + 7) + 96);
}

uint64_t AppleBCMWLANPCIeSubmissionRing::dumpRingState(AppleBCMWLANPCIeSubmissionRing *this, const char *a2, char *a3)
{
  return IO80211Print();
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSubmissionRing::dumpRingState(AppleBCMWLANPCIeSubmissionRing *this, const char *a2, char *a3)
{
  return AppleBCMWLANPCIeSubmissionRing::dumpRingState((AppleBCMWLANPCIeSubmissionRing *)((char *)this - 104), a2, a3);
}

uint64_t AppleBCMWLANPCIeSubmissionRing::printRingState(AppleBCMWLANPCIeSubmissionRing *this, const char *a2)
{
  uint64_t result = AppleBCMWLANByteRing::getLogger(this);
  if (result)
  {
    AppleBCMWLANByteRing::getLogger(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      Logger  = (CCLogStream *)AppleBCMWLANByteRing::getLogger(this);
      isEnabled  = IO80211WorkSource::isEnabled(this);
      uint64_t v7 = *((void *)this + 14);
      int v8 = **(_DWORD **)(v7 + 32);
      int v9 = **(_DWORD **)(v7 + 40);
      ReadableItemCount  = AppleBCMWLANItemRing::getReadableItemCount(this);
      WritableItemCount  = AppleBCMWLANItemRing::getWritableItemCount(this);
      Itemuint64_t Size = AppleBCMWLANItemRing::getItemSize(this);
      int v13 = (*(uint64_t (**)(AppleBCMWLANPCIeSubmissionRing *))(*(void *)this + 248))(this);
      uint64_t v14 = *((void *)this + 14);
      return CCLogStream::logAlert(Logger, "[dk] %s@%d:%s: en %u, host {r=%u, w=%u} readable=%d writable=%d is=%d p=%d lst=[%d@%06llu.%06llu] cfw(cb %x, tgt %x), buf=%p this=%p \n", "printRingState", 521, a2, isEnabled, v8, v9, ReadableItemCount, WritableItemCount, ItemSize, v13, *(_DWORD *)(v14 + 136), *(void *)(v14 + 128) / 0x3B9ACA00uLL, *(void *)(v14 + 128) % 0x3B9ACA00uLL / 0x3E8, *(void *)(v14 + 152) != 0, *(void *)(v14 + 160) != 0, *(const void **)(v14 + 112),
               this);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSubmissionRing::printRingState(AppleBCMWLANPCIeSubmissionRing *this, const char *a2)
{
  return AppleBCMWLANPCIeSubmissionRing::printRingState((AppleBCMWLANPCIeSubmissionRing *)((char *)this - 104), a2);
}

uint64_t AppleBCMWLANPCIeSubmissionRing::logRing(AppleBCMWLANPCIeSubmissionRing *this, const char *a2, uint64_t a3)
{
  return (*(uint64_t (**)(AppleBCMWLANPCIeSubmissionRing *, const char *, void, void, void, uint64_t))(*(void *)this + 280))(this, a2, 0, 0, 0, a3);
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSubmissionRing::logRing(AppleBCMWLANPCIeSubmissionRing *this, const char *a2)
{
  return (*(uint64_t (**)(void))(*((void *)this - 7) + 280))();
}

uint64_t AppleBCMWLANPCIeSubmissionRing::getCounter(AppleBCMWLANPCIeSubmissionRing *this)
{
  uint64_t v1 = *((void *)this + 14);
  int v2 = *(_DWORD *)(v1 + 144) + 1;
  *(_DWORD *)(v1 + 144)  = v2;
  return (unsigned __int16)v2;
}

uint64_t non-virtual thunk to'AppleBCMWLANPCIeSubmissionRing::getCounter(AppleBCMWLANPCIeSubmissionRing *this)
{
  uint64_t v1 = *((void *)this + 1);
  int v2 = *(_DWORD *)(v1 + 144) + 1;
  *(_DWORD *)(v1 + 144)  = v2;
  return (unsigned __int16)v2;
}

uint64_t AppleBCMWLANPCIeSubmissionRing::getChain(AppleBCMWLANPCIeSubmissionRing *this)
{
  return *((void *)this + 14) + 200;
}

uint64_t AppleBCMWLANPCIeSubmissionRing::getRingFromChain(uint64_t a1)
{
  if (a1 == 200) {
    return 0;
  }
  else {
    return *(void *)(a1 - 8);
  }
}

void _GLOBAL__sub_I_AppleBCMWLANPCIeSubmissionRing_cpp()
{
  kNullRange  = 0;
}

uint64_t AppleBCMWLANCore::postMessageInfra(AppleBCMWLANCore *this, unsigned int a2, void *a3, unint64_t a4)
{
  return IO80211Controller::postMessage(this, *(IO80211SkywalkInterface **)(*((void *)this + 9) + 11304), a2, a3, a4, 1);
}

IO80211Controller *AppleBCMWLANCore::postLQMEvent(IO80211Controller *result, void *a2)
{
  uint64_t v3 = *(IO80211SkywalkInterface **)(*((void *)result + 9) + 11304);
  if (v3) {
    return (IO80211Controller *)IO80211Controller::postMessage(result, v3, 0x27u, a2, 0x14CuLL, 1);
  }
  return result;
}

IO80211Controller *AppleBCMWLANCore::postChanQualEvent(IO80211Controller *result, void *a2)
{
  uint64_t v3 = *(IO80211SkywalkInterface **)(*((void *)result + 9) + 11304);
  if (v3) {
    return (IO80211Controller *)IO80211Controller::postMessage(result, v3, 0x3Cu, a2, 0x1CuLL, 1);
  }
  return result;
}

uint64_t AppleBCMWLANCore::safe_align_up(AppleBCMWLANCore *this, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v4 = a3;
  if (a2)
  {
    if (a3)
    {
      uint64_t v6 = (a2 - 1) & -(uint64_t)a3;
      unint64_t v4 = a3 + v6;
      if (!__CFADD__(a3, v6)) {
        goto LABEL_9;
      }
      uint64_t v7 = 3758097084;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          int v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logEmergency(v8, "[dk] %s@%d:os_add_overflow %zu\n");
        }
      }
      return v7;
    }
    uint64_t v7 = 3758097084;
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
      return v7;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (!CCLogStream::shouldLog()) {
      return v7;
    }
LABEL_16:
    unsigned int v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    CCLogStream::logEmergency(v10, "[dk] %s@%d:os_sub_overflow on alignment %zu\n");
    return v7;
  }
  if (a3)
  {
LABEL_9:
    uint64_t v7 = 0;
    *a4  = v4;
    return v7;
  }
  uint64_t v7 = 3758097084;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog()) {
      goto LABEL_16;
    }
  }
  return v7;
}

uint64_t AppleBCMWLANCore::getLqmRssiLevels(uint64_t this, signed __int8 *a2)
{
  int v2 = *(_DWORD *)(*(void *)(this + 72) + 17608);
  *(_DWORD *)(a2 + AppleBCMWLANCommandMonitor::free(this - 3) = *(_DWORD *)(*(void *)(this + 72) + 17611);
  *(_DWORD *)a2  = v2;
  return this;
}

uint64_t AppleBCMWLANCore::is4377Up(AppleBCMWLANCore *this)
{
  unsigned int v1 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 5400) + 368))(*(void *)(*((void *)this + 9) + 5400))
     - 4377;
  return (v1 < 0x17) & (0x400C03u >> v1);
}

uint64_t AppleBCMWLANCore::getBus(AppleBCMWLANCore *this)
{
  return *(void *)(*((void *)this + 9) + 5400);
}

uint64_t AppleBCMWLANCore::is4378Up(AppleBCMWLANCore *this)
{
  unsigned int v1 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 5400) + 368))(*(void *)(*((void *)this + 9) + 5400))
     - 4378;
  return (v1 < 0x16) & (0x200601u >> v1);
}

BOOL AppleBCMWLANCore::is4387Up(AppleBCMWLANCore *this)
{
  int v1 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 5400) + 368))(*(void *)(*((void *)this + 9) + 5400));
  return v1 == 4399 || (v1 - 4387) < 2;
}

BOOL AppleBCMWLANCore::is4387C0Up(OSDictionary *this)
{
  int v2 = (*(uint64_t (**)(void (__cdecl *)(OSDictionary *__hidden)))(*(void *)this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[51].flushCollection
                                                                           + 368))(this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[51].flushCollection);
  BOOL v3 = v2 == 4399 || v2 == 4388;
  BOOL result = 1;
  if (!v3)
  {
    if (v2 != 4387) {
      return 0;
    }
    unsigned __int8 v6 = 0;
    *(_WORD *)__dst  = 0;
    AppleBCMWLANCore::getChipRevString(this, __dst, 3uLL);
    if (*(unsigned __int16 *)__dst ^ 0x3043 | v6)
    {
      if (*(unsigned __int16 *)__dst ^ 0x3243 | v6) {
        return 0;
      }
    }
  }
  return result;
}

OSDictionaryPtr AppleBCMWLANCore::getChipRevString(OSDictionaryPtr this, char *__dst, size_t a3)
{
  if (__dst)
  {
    size_t v3 = a3;
    if (a3 >= 3)
    {
      OSDictionaryPtr v5 = this;
      unsigned __int8 v6 = this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable;
      iterateObjects  = (size_t)v6[345].iterateObjects;
      if (iterateObjects)
      {
        if (iterateObjects < a3) {
          a3  = (size_t)v6[345].iterateObjects;
        }
        return (OSDictionaryPtr)memcpy(__dst, &v6[345].free, a3);
      }
      else
      {
        this  = OSDictionary::withCapacity(6u);
        if (this)
        {
          int v8 = this;
          if (!(*(unsigned int (**)(void))(*((void *)v5[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[51].flushCollection
                                            + 6)
                                          + 408))())
          {
            Object  = OSDictionary::getObject(v8, "ChipInfo");
            unsigned int v10 = (const OSString *)OSMetaClassBase::safeMetaCast(Object, gOSStringMetaClass);
            CStringNoCopy  = OSString::getCStringNoCopy(v10);
            if (OSString::getLength(v10) >= 4 && CStringNoCopy != 0)
            {
              size_t Length = OSString::getLength(v10);
              uint64_t v14 = strnstr(CStringNoCopy, "s=", Length);
              if (v14) {
                memcpy(__dst, v14 + 2, v3);
              }
            }
            p_free  = (uint64_t)&v5[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[345].free;
            __int16 v16 = *(_WORD *)__dst;
            *(unsigned char *)(p_free + 2)  = __dst[2];
            *(_WORD *)p_free  = v16;
            v5[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[345].iterateObjects  = (BOOL (__cdecl *)(const OSDictionary *__hidden, OSCollectionIterateObjectsBlock))v3;
          }
          release  = v8->release;
          return (OSDictionaryPtr)((uint64_t (*)(const OSDictionary *))release)(v8);
        }
      }
    }
  }
  return this;
}

BOOL AppleBCMWLANCore::is4387C0(OSDictionary *this)
{
  BOOL result = 0;
  if ((*(unsigned int (**)(void (__cdecl *)(OSDictionary *__hidden)))(*(void *)this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[51].flushCollection
                                                                                + 368))(this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[51].flushCollection) == 4387)
  {
    unsigned __int8 v4 = 0;
    *(_WORD *)__dst  = 0;
    AppleBCMWLANCore::getChipRevString(this, __dst, 3uLL);
    if (!(*(unsigned __int16 *)__dst ^ 0x3043 | v4)) {
      return 1;
    }
  }
  return result;
}

BOOL AppleBCMWLANCore::is4399B0(OSDictionary *this)
{
  BOOL result = 0;
  if ((*(unsigned int (**)(void (__cdecl *)(OSDictionary *__hidden)))(*(void *)this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[51].flushCollection
                                                                                + 368))(this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[51].flushCollection) == 4399)
  {
    unsigned __int8 v4 = 0;
    *(_WORD *)__dst  = 0;
    AppleBCMWLANCore::getChipRevString(this, __dst, 3uLL);
    if (!(*(unsigned __int16 *)__dst ^ 0x3042 | v4)) {
      return 1;
    }
  }
  return result;
}

BOOL AppleBCMWLANCore::is4399C0Up(OSDictionary *this)
{
  unsigned int v2 = (*(uint64_t (**)(void (__cdecl *)(OSDictionary *__hidden)))(*(void *)this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[51].flushCollection
                                                                           + 368))(this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[51].flushCollection);
  unsigned __int8 v5 = 0;
  *(_WORD *)__dst  = 0;
  AppleBCMWLANCore::getChipRevString(this, __dst, 3uLL);
  return v2 >> 4 > 0x112
      || v2 == 4399
      && (!(*(unsigned __int16 *)__dst ^ 0x3043 | v5)
       || !(*(unsigned __int16 *)__dst ^ 0x3143 | v5)
       || !(*(unsigned __int16 *)__dst ^ 0x3243 | v5)
       || !(*(unsigned __int16 *)__dst ^ 0x3343 | v5));
}

BOOL AppleBCMWLANCore::is4387C2Up(OSDictionary *this)
{
  unsigned int v2 = (*(uint64_t (**)(void (__cdecl *)(OSDictionary *__hidden)))(*(void *)this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[51].flushCollection
                                                                           + 368))(this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[51].flushCollection);
  unsigned __int8 v5 = 0;
  *(_WORD *)__dst  = 0;
  AppleBCMWLANCore::getChipRevString(this, __dst, 3uLL);
  return v2 >> 2 > 0x448
      || v2 == 4387 && (!(*(unsigned __int16 *)__dst ^ 0x3243 | v5) || !(*(unsigned __int16 *)__dst ^ 0x3343 | v5));
}

BOOL AppleBCMWLANCore::is4399Up(AppleBCMWLANCore *this)
{
  return (*(unsigned int (**)(void))(**(void **)(*((void *)this + 9) + 5400) + 368))(*(void *)(*((void *)this + 9) + 5400)) > 0x112E;
}

uint64_t AppleBCMWLANCore::dumpCurTxDCSummary(AppleBCMWLANCore *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      size_t v3 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logInfo(v3, "[dk] %s@%d:|| [Tx DC Stats] ------------------------------------------||\n", "dumpCurTxDCSummary", 1282);
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      unsigned __int8 v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logInfo(v4, "[dk] %s@%d:||   [Slice 0 Ant0] ---------------------------------------||\n", "dumpCurTxDCSummary", 1283);
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      unsigned __int8 v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logInfo(v5, "[dk] %s@%d:||     [0 - 10]                     | %20llu ||\n", "dumpCurTxDCSummary", 1284, *(void *)(*((void *)this + 9) + 6312));
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      unsigned __int8 v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logInfo(v6, "[dk] %s@%d:||     [10 - 20]                    | %20llu ||\n", "dumpCurTxDCSummary", 1285, *(void *)(*((void *)this + 9) + 6320));
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logInfo(v7, "[dk] %s@%d:||     [20 - 30]                    | %20llu ||\n", "dumpCurTxDCSummary", 1286, *(void *)(*((void *)this + 9) + 6328));
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      int v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logInfo(v8, "[dk] %s@%d:||     [30 - 40]                    | %20llu ||\n", "dumpCurTxDCSummary", 1287, *(void *)(*((void *)this + 9) + 6336));
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      int v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logInfo(v9, "[dk] %s@%d:||     [40 - 50]                    | %20llu ||\n", "dumpCurTxDCSummary", 1288, *(void *)(*((void *)this + 9) + 6344));
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      unsigned int v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logInfo(v10, "[dk] %s@%d:||     [50 - 60]                    | %20llu ||\n", "dumpCurTxDCSummary", 1289, *(void *)(*((void *)this + 9) + 6352));
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      unsigned int v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logInfo(v11, "[dk] %s@%d:||     [60 - 70]                    | %20llu ||\n", "dumpCurTxDCSummary", 1290, *(void *)(*((void *)this + 9) + 6360));
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logInfo(v12, "[dk] %s@%d:||     [70 - 80]                    | %20llu ||\n", "dumpCurTxDCSummary", 1291, *(void *)(*((void *)this + 9) + 6368));
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      int v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logInfo(v13, "[dk] %s@%d:||     [80 - 90]                    | %20llu ||\n", "dumpCurTxDCSummary", 1292, *(void *)(*((void *)this + 9) + 6376));
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logInfo(v14, "[dk] %s@%d:||     [90 - 100]                   | %20llu ||\n", "dumpCurTxDCSummary", 1293, *(void *)(*((void *)this + 9) + 6384));
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logInfo(v15, "[dk] %s@%d:||   [Slice 1 Ant0] ---------------------------------------||\n", "dumpCurTxDCSummary", 1294);
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      __int16 v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logInfo(v16, "[dk] %s@%d:||     [0 - 10]                     | %20llu ||\n", "dumpCurTxDCSummary", 1295, *(void *)(*((void *)this + 9) + 6400));
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logInfo(v17, "[dk] %s@%d:||     [10 - 20]                    | %20llu ||\n", "dumpCurTxDCSummary", 1296, *(void *)(*((void *)this + 9) + 6408));
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logInfo(v18, "[dk] %s@%d:||     [20 - 30]                    | %20llu ||\n", "dumpCurTxDCSummary", 1297, *(void *)(*((void *)this + 9) + 6416));
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      int v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logInfo(v19, "[dk] %s@%d:||     [30 - 40]                    | %20llu ||\n", "dumpCurTxDCSummary", 1298, *(void *)(*((void *)this + 9) + 6424));
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      int v20 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logInfo(v20, "[dk] %s@%d:||     [40 - 50]                    | %20llu ||\n", "dumpCurTxDCSummary", 1299, *(void *)(*((void *)this + 9) + 6432));
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      int v21 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logInfo(v21, "[dk] %s@%d:||     [50 - 60]                    | %20llu ||\n", "dumpCurTxDCSummary", 1300, *(void *)(*((void *)this + 9) + 6440));
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logInfo(v22, "[dk] %s@%d:||     [60 - 70]                    | %20llu ||\n", "dumpCurTxDCSummary", 1301, *(void *)(*((void *)this + 9) + 6448));
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      int v23 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logInfo(v23, "[dk] %s@%d:||     [70 - 80]                    | %20llu ||\n", "dumpCurTxDCSummary", 1302, *(void *)(*((void *)this + 9) + 6456));
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      int v24 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logInfo(v24, "[dk] %s@%d:||     [80 - 90]                    | %20llu ||\n", "dumpCurTxDCSummary", 1303, *(void *)(*((void *)this + 9) + 6464));
    }
  }
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v25 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      return CCLogStream::logInfo(v25, "[dk] %s@%d:||     [90 - 100]                   | %20llu ||\n", "dumpCurTxDCSummary", 1304, *(void *)(*((void *)this + 9) + 6472));
    }
  }
  return result;
}

void *AppleBCMWLANCore::updateSCTxBlankingSummary(void *this, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = (uint64_t)this;
  if (a3)
  {
    uint64_t v4 = this[9];
    if (*(_DWORD *)(v4 + 17792) >= a2)
    {
      ++*(void *)(v4 + 17816);
      uint64_t v7 = this[9];
      if (a3 > 0x23) {
        ++*(void *)(v7 + 17808);
      }
      else {
        ++*(void *)(v7 + 17800);
      }
    }
    else if (*(_DWORD *)(v4 + 17824) >= a2)
    {
      ++*(void *)(v4 + 17848);
      uint64_t v8 = this[9];
      if (a3 > 0x23) {
        ++*(void *)(v8 + 17840);
      }
      else {
        ++*(void *)(v8 + 17832);
      }
    }
    else if (*(_DWORD *)(v4 + 17856) >= a2)
    {
      ++*(void *)(v4 + 17880);
      uint64_t v9 = this[9];
      if (a3 > 0x23) {
        ++*(void *)(v9 + 17872);
      }
      else {
        ++*(void *)(v9 + 17864);
      }
    }
    else if (*(_DWORD *)(v4 + 17888) >= a2)
    {
      ++*(void *)(v4 + 17912);
      uint64_t v10 = this[9];
      if (a3 > 0x23) {
        ++*(void *)(v10 + 17904);
      }
      else {
        ++*(void *)(v10 + 17896);
      }
    }
    else
    {
      this  = (void *)(*(uint64_t (**)(void *))(*this + 1848))(this);
      if (this)
      {
        (*(void (**)(uint64_t))(*(void *)v3 + 1848))(v3);
        this  = (void *)CCLogStream::shouldLog();
        if (this)
        {
          unsigned __int8 v5 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 1848))(v3);
          return (void *)CCLogStream::logAlert(v5, "[dk] %s@%d: Invalid Tx blanking percentage \n");
        }
      }
    }
  }
  else
  {
    this  = (void *)(*(uint64_t (**)(void *))(*this + 1848))(this);
    if (this)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 1848))(v3);
      this  = (void *)CCLogStream::shouldLog();
      if (this)
      {
        unsigned __int8 v6 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 1848))(v3);
        return (void *)CCLogStream::logAlert(v6, "[dk] %s@%d: Invalid channel number \n");
      }
    }
  }
  return this;
}

BOOL AppleBCMWLANCore::isPlatformConfigFirmwareRequired(AppleBCMWLANCore *this)
{
  int v1 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 5400) + 368))(*(void *)(*((void *)this + 9) + 5400));
  return v1 == 4388 || v1 == 4399;
}

uint64_t AppleBCMWLANCore::requestQueueSizeAndTimeout(IOService *this, unsigned __int16 *a2, unsigned __int16 *a3)
{
  DTParameter32  = AppleBCMWLANUtil::getDTParameter32(this, (IOService *)"IOService", "wlan.coalesce.qsize", 0);
  unsigned __int16 v7 = AppleBCMWLANUtil::getDTParameter32(this, (IOService *)"IOService", "wlan.coalesce.timeout", 0);
  if (DTParameter32) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8) {
    return 3758097095;
  }
  unsigned __int16 v9 = v7;
  uint64_t result = 0;
  *a2  = DTParameter32;
  *a3  = v9;
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::requestQueueSizeAndTimeout(IOService *this, unsigned __int16 *a2, unsigned __int16 *a3)
{
  return AppleBCMWLANCore::requestQueueSizeAndTimeout(this - 1, a2, a3);
}

BOOL AppleBCMWLANCore::init(OSObject *this, OSDictionary *a2)
{
  uint64_t v4 = IOMallocZeroTyped();
  this[1].ivars  = (OSObject_IVars *)v4;
  p_ivars  = (OSObject::$4342D741BF926617E558AFFE07804AA4 *)&this[1].ivars;
  if (!v4) {
    return 0;
  }
  if ((IO80211Controller::init((IO80211Controller *)this, a2) & 1) == 0)
  {
    getClassNameHelper(this);
    IOLog("%s::%s(): super failed to init!\n");
    return 0;
  }
  unsigned __int8 v6 = kAppleBCMWLANBuildTag[0];
  unsigned __int16 v7 = kAppleBCMWLANBuildDate[0];
  if (AppleBCMWLAN_isVerboseDebugLoggingAllowed()) {
    BOOL v8 = "[Debuggable - verbose]";
  }
  else {
    BOOL v8 = (const char *)&unk_10029A2CA;
  }
  if (AppleBCMWLAN_isSoCRAMCaptureAllowed()) {
    unsigned __int16 v9 = "[Debuggable - socram]";
  }
  else {
    unsigned __int16 v9 = (const char *)&unk_10029A2CA;
  }
  isDebugCommandActionAllowed  = AppleBCMWLAN_isDebugCommandActionAllowed();
  unsigned int v11 = "[Debuggable - debug command]";
  if (!isDebugCommandActionAllowed) {
    unsigned int v11 = (const char *)&unk_10029A2CA;
  }
  IOLog("%s %s %s %s  (%s %s %s)\n", v6, "\"AppleBCMWLANV3_driverkit-1430.34\"", v7, "release", v8, v9, v11);
  *((void *)p_ivars->ivars + 2208)  = IOLockAlloc();
  if (!*((void *)p_ivars->ivars + 2208))
  {
    getClassNameHelper(this);
    IOLog("%s::%s(): Failed to allocate lock\n");
    return 0;
  }
  *((void *)p_ivars->ivars + 150)  = IOLockAlloc();
  if (!*((void *)p_ivars->ivars + 150))
  {
    getClassNameHelper(this);
    IOLog("%s::%s(): Failed to allocate event bit lock\n");
    return 0;
  }
  if (IOParseBootArgNumber("WTE", (char *)p_ivars->ivars + 10748, 4)) {
    IOLog("Enabling WTE Options 0x%x\n", *((_DWORD *)p_ivars->ivars + 2687));
  }
  BOOL v12 = IOParseBootArgNumber("bcom.wte.thread-priority", (char *)p_ivars->ivars + 10752, 4);
  ivars  = p_ivars->ivars;
  if (v12) {
    IOLog(" Setting WTE Thread Priority to %d\n", *((_DWORD *)ivars + 2688));
  }
  else {
    *((_DWORD *)ivars + 2688)  = -50;
  }
  int v36 = -1431655766;
  if (IOParseBootArgNumber("wlan.panic.pqs", &v36, 4)) {
    *((_DWORD *)p_ivars->ivars + 2596) |= 8u;
  }
  if (IOParseBootArgNumber("wlan.panic.oqs", &v36, 4)) {
    *((_DWORD *)p_ivars->ivars + 2596) |= 0x10u;
  }
  if (IOParseBootArgNumber("wlan.panic.aqs", &v36, 4)) {
    *((_DWORD *)p_ivars->ivars + 2596) |= 0x20u;
  }
  if (IOParseBootArgNumber("wlan.panic.queuestall", &v36, 4)) {
    *((_DWORD *)p_ivars->ivars + 2596) |= 0x18u;
  }
  if (IOParseBootArgNumber("wlan.panic.queuefull", &v36, 4)) {
    *((_DWORD *)p_ivars->ivars + 2596) |= 0x800u;
  }
  *((_DWORD *)p_ivars->ivars + 8)  = 0;
  if (IOParseBootArgNumber("wlan.panic.problem", &v36, 4))
  {
    __int16 v16 = p_ivars->ivars;
    if (v36) {
      *((_DWORD *)v16 + 8)  = v36;
    }
    else {
      *((_DWORD *)v16 + 2596) |= 0x40u;
    }
  }
  if (IOParseBootArgNumber("wlan.sdb.support", &v36, 4)
    || IOParseBootArgNumber("wlan.factory", &v36, 4) && (v36 & 2) != 0)
  {
    IOLog(" Forcing SDB support\n");
    *((_DWORD *)p_ivars->ivars + 2596) |= 0x200u;
  }
  int v35 = 0;
  if (IOParseBootArgNumber("wlan.socramdump.disable", &v35, 4) && v35)
  {
    IOLog(" Disabling SoCRAM dumps.\n");
    *((_DWORD *)p_ivars->ivars + 2596) |= 4u;
  }
  *((unsigned char *)p_ivars->ivars + 10380)  = 1;
  if (IOParseBootArgNumber("wlan.debug.nowdogondisassoc", &v36, 4)) {
    *((unsigned char *)p_ivars->ivars + 10380)  = 0;
  }
  if (IOParseBootArgNumber("wlan.debug.enablescaneventlogs", &v36, 4)) {
    *((unsigned char *)p_ivars->ivars + 972)  = 1;
  }
  *((_DWORD *)p_ivars->ivars + 4397)  = 30;
  if (IOParseBootArgNumber("wlan.pmalert.dutycycle", &v36, 4)) {
    *((_DWORD *)p_ivars->ivars + 4397)  = v36;
  }
  *((_DWORD *)p_ivars->ivars + 1680)  = 120;
  *((_DWORD *)p_ivars->ivars + 4924)  = 0;
  *((_DWORD *)p_ivars->ivars + 4922)  = 0;
  *((_DWORD *)p_ivars->ivars + 2589)  = 90000;
  nanoseconds_to_absolutetime();
  *((_DWORD *)p_ivars->ivars + 3527)  = 0;
  *((_DWORD *)p_ivars->ivars + 3526)  = 0;
  *((_DWORD *)p_ivars->ivars + 2800)  = 1;
  *((unsigned char *)p_ivars->ivars + 761)  = 0;
  *((_DWORD *)p_ivars->ivars + 1652)  = 75;
  *((_DWORD *)p_ivars->ivars + 165AppleBCMWLANCommandMonitor::free(this - 3) = 60;
  *((_DWORD *)p_ivars->ivars + 1654)  = -1;
  *((_DWORD *)p_ivars->ivars + 1656)  = -1;
  *((_DWORD *)p_ivars->ivars + 1655)  = -1;
  *((_DWORD *)p_ivars->ivars + 1657)  = 86400000;
  *((void *)p_ivars->ivars + 829)  = 0;
  *((_DWORD *)p_ivars->ivars + 1660)  = -1;
  *((_DWORD *)p_ivars->ivars + 1661)  = 3;
  *((_DWORD *)p_ivars->ivars + 1662)  = 300;
  *((_DWORD *)p_ivars->ivars + 166AppleBCMWLANCommandMonitor::free(this - 3) = 900000;
  *((_DWORD *)p_ivars->ivars + 1665)  = -1;
  *((_DWORD *)p_ivars->ivars + 1664)  = 720000;
  *((_DWORD *)p_ivars->ivars + 1666)  = 86400000;
  *((_DWORD *)p_ivars->ivars + 1670)  = 0;
  *((void *)p_ivars->ivars + 834)  = 0;
  *((_DWORD *)p_ivars->ivars + 1667)  = 900000;
  *((unsigned char *)p_ivars->ivars + 6684)  = 0;
  *((_DWORD *)p_ivars->ivars + 1672)  = 75;
  *((_DWORD *)p_ivars->ivars + 167AppleBCMWLANCommandMonitor::free(this - 3) = 135;
  *((_DWORD *)p_ivars->ivars + 1681)  = 930;
  *((_DWORD *)p_ivars->ivars + 1682)  = 2000;
  *((_DWORD *)p_ivars->ivars + 1677)  = 6;
  *((_DWORD *)p_ivars->ivars + 3525)  = 4;
  *((_DWORD *)p_ivars->ivars + 1349)  = 0;
  uint64_t v17 = p_ivars->ivars;
  *((_OWORD *)v17 + 685)  = 0u;
  *((_OWORD *)v17 + 684)  = 0u;
  uint64_t v18 = (_OWORD *)((char *)p_ivars->ivars + 10984);
  _OWORD *v18 = 0u;
  v18[1]  = 0u;
  *((_DWORD *)p_ivars->ivars + 2744)  = 0;
  *((_DWORD *)p_ivars->ivars + 2754)  = 0;
  *((_DWORD *)p_ivars->ivars + 4928)  = 20;
  *((unsigned char *)p_ivars->ivars + 19637)  = 0;
  *((_DWORD *)p_ivars->ivars + 4910)  = 0;
  *(_DWORD *)p_ivars->ivars  = 100;
  *((_DWORD *)p_ivars->ivars + 1)  = 100;
  *((void *)p_ivars->ivars + 3722)  = 0;
  *((_DWORD *)p_ivars->ivars + 112AppleBCMWLANCommandMonitor::free(this - 3) = 60;
  *((unsigned char *)p_ivars->ivars + 4496)  = 0;
  if (IOParseBootArgNumber("wlan.dsa.obswin", &v36, 4) && v36 == 360)
  {
    *((_DWORD *)p_ivars->ivars + 112AppleBCMWLANCommandMonitor::free(this - 3) = 360;
    *((unsigned char *)p_ivars->ivars + 4496)  = 1;
  }
  *((unsigned char *)p_ivars->ivars + 14116)  = 0;
  *((_DWORD *)p_ivars->ivars + 4399)  = 2000;
  *((_DWORD *)p_ivars->ivars + 4400)  = 5000;
  *((unsigned char *)p_ivars->ivars + 17615)  = -70;
  *((_DWORD *)p_ivars->ivars + 4401)  = 5;
  int v19 = (_DWORD *)((char *)p_ivars->ivars + 17608);
  *(_DWORD *)((char *)v19 + AppleBCMWLANCommandMonitor::free(this - 3) = -994067787;
  _DWORD *v19 = -1246712922;
  *((unsigned char *)p_ivars->ivars + 17624)  = 2;
  *((void *)p_ivars->ivars + 2202)  = 0x5A504B463C322819;
  *((_DWORD *)p_ivars->ivars + 4407)  = 0;
  *((unsigned char *)p_ivars->ivars + 778)  = 0;
  *((void *)p_ivars->ivars + 4406)  = 0;
  *((_WORD *)p_ivars->ivars + 5157)  = 0;
  *((_WORD *)p_ivars->ivars + 5159)  = 0;
  *((_WORD *)p_ivars->ivars + 5160)  = 0;
  *((_WORD *)p_ivars->ivars + 5158)  = 0;
  *((void *)p_ivars->ivars + 2458)  = 0;
  *((unsigned char *)p_ivars->ivars + 19672)  = 0;
  *((_DWORD *)p_ivars->ivars + 4588)  = 0;
  *((void *)p_ivars->ivars + 229AppleBCMWLANCommandMonitor::free(this - 3) = mach_continuous_time();
  *((_DWORD *)p_ivars->ivars + 458AppleBCMWLANCommandMonitor::free(this - 3) = 0;
  *((_DWORD *)p_ivars->ivars + 4582)  = 0;
  *((_DWORD *)p_ivars->ivars + 2679)  = 0;
  *((unsigned char *)p_ivars->ivars + 10720)  = 0;
  *((_DWORD *)p_ivars->ivars + 2681)  = 0;
  *((_DWORD *)p_ivars->ivars + 2682)  = 0;
  *((unsigned char *)p_ivars->ivars + 1073AppleBCMWLANCommandMonitor::free(this - 3) = 0;
  *((unsigned char *)p_ivars->ivars + 10732)  = 0;
  *((unsigned char *)p_ivars->ivars + 10734)  = 9;
  *((unsigned char *)p_ivars->ivars + 10735)  = 10;
  *((unsigned char *)p_ivars->ivars + 10736)  = 100;
  *((unsigned char *)p_ivars->ivars + 30912)  = 1;
  *((unsigned char *)p_ivars->ivars + 3091AppleBCMWLANCommandMonitor::free(this - 3) = 1;
  *((unsigned char *)p_ivars->ivars + 30914)  = 1;
  *((_DWORD *)p_ivars->ivars + 4584)  = 0;
  *((unsigned char *)p_ivars->ivars + 18340)  = 0;
  *((unsigned char *)p_ivars->ivars + 18341)  = 0;
  *((_WORD *)p_ivars->ivars + 4451)  = 0;
  *((_WORD *)p_ivars->ivars + 4454)  = 0;
  *((_WORD *)p_ivars->ivars + 4452)  = 0;
  *((_WORD *)p_ivars->ivars + 445AppleBCMWLANCommandMonitor::free(this - 3) = 0;
  *((unsigned char *)p_ivars->ivars + 8910)  = 0;
  *((_DWORD *)p_ivars->ivars + 2228)  = 0;
  *((unsigned char *)p_ivars->ivars + 8916)  = 0;
  *((_DWORD *)p_ivars->ivars + 2230)  = 0;
  *((unsigned char *)p_ivars->ivars + 8924)  = 0;
  *((_DWORD *)p_ivars->ivars + 276)  = 2;
  *((_DWORD *)p_ivars->ivars + 277)  = 2;
  int v20 = p_ivars->ivars;
  *((_OWORD *)v20 + 1112)  = 0u;
  *((_OWORD *)v20 + 111AppleBCMWLANCommandMonitor::free(this - 3) = 0u;
  *((_OWORD *)v20 + 1114)  = 0u;
  *((_OWORD *)v20 + 1115)  = 0u;
  *((_OWORD *)v20 + 1116)  = 0u;
  *((_OWORD *)v20 + 1117)  = 0u;
  *((_OWORD *)v20 + 1118)  = 0u;
  *((_OWORD *)v20 + 1119)  = 0u;
  *((void *)v20 + 2240)  = 0;
  *((_DWORD *)p_ivars->ivars + 4448)  = 25;
  *((_DWORD *)p_ivars->ivars + 4456)  = 40;
  *((_DWORD *)p_ivars->ivars + 4464)  = 70;
  *((_DWORD *)p_ivars->ivars + 4472)  = 100;
  *((unsigned char *)p_ivars->ivars + 29937)  = 0;
  *((unsigned char *)p_ivars->ivars + 29938)  = 0;
  *((unsigned char *)p_ivars->ivars + 29939)  = 0;
  *((void *)p_ivars->ivars + 787)  = 0;
  int v21 = p_ivars->ivars;
  *((_OWORD *)v21 + 394)  = 0u;
  *((_OWORD *)v21 + 395)  = 0u;
  *((_OWORD *)v21 + 396)  = 0u;
  *((_OWORD *)v21 + 397)  = 0u;
  *((_OWORD *)v21 + 398)  = 0u;
  *((void *)v21 + 798)  = 0;
  uint64_t v22 = (_OWORD *)((char *)p_ivars->ivars + 6392);
  *((void *)p_ivars->ivars + 809)  = 0;
  *uint64_t v22 = 0u;
  v22[1]  = 0u;
  v22[2]  = 0u;
  v22[3]  = 0u;
  v22[4]  = 0u;
  int v23 = (_OWORD *)((char *)p_ivars->ivars + 4504);
  _OWORD *v23 = 0u;
  v23[1]  = 0u;
  void v23[2] = 0u;
  v23[3]  = 0u;
  v23[4]  = 0u;
  v23[5]  = 0u;
  v23[6]  = 0u;
  v23[7]  = 0u;
  int v24 = (_OWORD *)((char *)p_ivars->ivars + 4632);
  _OWORD *v24 = 0u;
  v24[1]  = 0u;
  v24[2]  = 0u;
  v24[3]  = 0u;
  v24[4]  = 0u;
  v24[5]  = 0u;
  v24[6]  = 0u;
  v24[7]  = 0u;
  uint64_t v25 = (_OWORD *)((char *)p_ivars->ivars + 4760);
  *uint64_t v25 = 0u;
  v25[1]  = 0u;
  void v25[2] = 0u;
  v25[3]  = 0u;
  v25[4]  = 0u;
  v25[5]  = 0u;
  v25[6]  = 0u;
  v25[7]  = 0u;
  unsigned int v26 = (_OWORD *)((char *)p_ivars->ivars + 17992);
  *unsigned int v26 = 0u;
  v26[1]  = 0u;
  *((unsigned char *)p_ivars->ivars + 30915)  = 0;
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  *(_WORD *)((char *)p_ivars->ivars + 29921)  = 1;
  *((unsigned char *)p_ivars->ivars + 2992AppleBCMWLANCommandMonitor::free(this - 3) = 1;
  *((unsigned char *)p_ivars->ivars + 29924)  = 1;
  *((void *)p_ivars->ivars + 386AppleBCMWLANCommandMonitor::free(this - 3) = IO80211CagedBuffer::withLayout();
  uint64_t v27 = *((void *)p_ivars->ivars + 3863);
  BOOL v14 = v27 != 0;
  if (v27)
  {
    *((_DWORD *)p_ivars->ivars + 7729)  = 0;
    *((void *)p_ivars->ivars + 3734)  = 0;
    *((void *)p_ivars->ivars + 3735)  = 0;
    *((void *)p_ivars->ivars + 3736)  = 0;
    *((void *)p_ivars->ivars + 3737)  = 0;
    *((void *)p_ivars->ivars + 3738)  = 0;
    *((void *)p_ivars->ivars + 3739)  = 0;
    *((void *)p_ivars->ivars + 1775)  = 0;
    *((_DWORD *)p_ivars->ivars + 3552)  = 0;
    *((unsigned char *)p_ivars->ivars + 35306)  = 0;
    if (IOParseBootArgNumber("wlan.wdt.disableLogging", &v36, 4))
    {
      IOLog(" wlan.wdt.disableLogging %d\n", v36);
      *((unsigned char *)p_ivars->ivars + 35306)  = v36 != 0;
    }
    mach_continuous_time();
    absolutetime_to_nanoseconds();
    *((void *)p_ivars->ivars + 2250)  = 0;
    *((void *)p_ivars->ivars + 2251)  = 5;
    *((_DWORD *)p_ivars->ivars + 4505)  = 0;
    *((_DWORD *)p_ivars->ivars + 4504)  = 0;
    *((unsigned char *)p_ivars->ivars + 18024)  = 0;
    *((unsigned char *)p_ivars->ivars + 18025)  = 1;
    *((_DWORD *)p_ivars->ivars + 8878)  = 4;
    *((unsigned char *)p_ivars->ivars + 29928)  = 0;
    *((unsigned char *)p_ivars->ivars + 29929)  = 0;
    *((_DWORD *)p_ivars->ivars + 4411)  = 0;
    *((unsigned char *)p_ivars->ivars + 18270)  = 0;
    int v34 = 0;
    *((unsigned char *)p_ivars->ivars + 984)  = 0;
    if (IOParseBootArgNumber("wlan.ior", &v34, 4) && !v34)
    {
      *((unsigned char *)p_ivars->ivars + 984)  = 1;
      IOLog(" Disabling IOReporter APIs due to boot-arg wlan.ior=0\n");
    }
    *((unsigned char *)p_ivars->ivars + 986)  = 0;
    if (IOParseBootArgNumber("wlan.getDiags", &v34, 4) && !v34)
    {
      *((unsigned char *)p_ivars->ivars + 986)  = 1;
      IOLog(" Disabling getDiags due to boot-arg wlan.getDiags=0\n");
    }
    *((unsigned char *)p_ivars->ivars + 985)  = 0;
    if (IOParseBootArgNumber("wlan.etrace", &v34, 4) && !v34)
    {
      *((unsigned char *)p_ivars->ivars + 985)  = 1;
      IOLog(" Disabling etrace processing due to boot-arg wlan.etrace=0\n");
    }
    *((_DWORD *)p_ivars->ivars + 8939)  = 3;
    *((_DWORD *)p_ivars->ivars + 8939)  = 7;
    BOOL v28 = IOParseBootArgNumber("wlan.channelFilter", (char *)p_ivars->ivars + 35756, 4);
    uint64_t v29 = p_ivars->ivars;
    if (v28 && !*((_DWORD *)v29 + 8939))
    {
      IOLog(" WiFiCC : Allowing all bands and no channel filter used. [%d]\n", 0);
      uint64_t v29 = p_ivars->ivars;
    }
    *((_DWORD *)v29 + 748AppleBCMWLANCommandMonitor::free(this - 3) = -80;
    if (IOParseBootArgNumber("wlan.rssicomp.value", (char *)p_ivars->ivars + 29932, 4))
    {
      int v30 = *((_DWORD *)p_ivars->ivars + 7483);
      if (v30)
      {
        if ((v30 + 90) >= 0x33)
        {
          IOLog(" WiFiRoam : RSSI compensation out of range. Value : [%d] Resorting to default value : [%d]\n", *((_DWORD *)p_ivars->ivars + 7483), -80);
          *((_DWORD *)p_ivars->ivars + 748AppleBCMWLANCommandMonitor::free(this - 3) = -80;
        }
        else
        {
          IOLog(" WiFiRoam : Using RSSI compensation Value : [%d] \n", *((_DWORD *)p_ivars->ivars + 7483));
        }
      }
      else
      {
        IOLog(" WiFiRoam : RSSI compensation not allowed. [%d]\n", 0);
        *((_DWORD *)p_ivars->ivars + 748AppleBCMWLANCommandMonitor::free(this - 3) = 0;
      }
    }
    *((unsigned char *)p_ivars->ivars + 35528)  = 1;
    if (IOParseBootArgNumber("wlan.dk.fwloading", &v36, 4))
    {
      int v31 = v36;
      *((unsigned char *)p_ivars->ivars + 35528)  = v36 != 0;
      if (*((unsigned char *)p_ivars->ivars + 35528)) {
        uint64_t v32 = "TRUE";
      }
      else {
        uint64_t v32 = "FALSE";
      }
      IOLog("wlan.dk.fwloading %d - %s\n", v31, v32);
    }
    int v34 = 0;
    *((unsigned char *)p_ivars->ivars + 992)  = 0;
    if (IOParseBootArgNumber("wlan.ranging.disableOutlierDiscarding", &v34, 4))
    {
      if (v34)
      {
        *((unsigned char *)this[1].ivars + 992)  = 1;
        if (((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this))
        {
          ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v33 = (CCLogStream *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
            CCLogStream::logAlert(v33, "[dk] %s@%d:wlan.ranging.disableOutlierDiscarding %d\n", "init", 1782, *((unsigned __int8 *)this[1].ivars + 992));
          }
        }
      }
    }
  }
  else
  {
    IOLog(" Failed to create IO80211CagedBuffer\n");
  }
  return v14;
}

BOOL non-virtual thunk to'AppleBCMWLANCore::init(AppleBCMWLANCore *this, OSDictionary *a2)
{
  return AppleBCMWLANCore::init((OSObject *)((char *)this - 48), a2);
}

uint64_t AppleBCMWLANCore::free(AppleBCMWLANCore *this)
{
  AppleBCMWLANCore::freeResources(this);
  unsigned int v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    bzero(v2, 0x8C70uLL);
    uint64_t v3 = (void *)*((void *)this + 9);
    if (v3)
    {
      IOFree(v3, 0x8C70uLL);
      *((void *)this + 9)  = 0;
    }
  }
  return IO80211Controller::free(this);
}

uint64_t AppleBCMWLANCore::freeResources(AppleBCMWLANCore *this)
{
  IOLog("AppleBCMWLANCore::freeResources[%u] this[%p]\n", 3972, this);
  unsigned int v2 = (void *)*((void *)this + 9);
  uint64_t v3 = v2[689];
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    *(void *)(*((void *)this + 9) + 5512)  = 0;
    unsigned int v2 = (void *)*((void *)this + 9);
  }
  uint64_t v4 = (AppleBCMWLANIOReportingPerSlice *)v2[690];
  if (v4)
  {
    AppleBCMWLANIOReportingPerSlice::stop(v4);
    unsigned int v2 = (void *)*((void *)this + 9);
    uint64_t v5 = v2[690];
    if (v5)
    {
      (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
      *(void *)(*((void *)this + 9) + 5520)  = 0;
      unsigned int v2 = (void *)*((void *)this + 9);
    }
  }
  uint64_t v6 = v2[152];
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    *(void *)(*((void *)this + 9) + 1216)  = 0;
    unsigned int v2 = (void *)*((void *)this + 9);
  }
  uint64_t v7 = v2[2197];
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    *(void *)(*((void *)this + 9) + 17576)  = 0;
    unsigned int v2 = (void *)*((void *)this + 9);
  }
  BOOL v8 = (IOLock *)v2[150];
  if (v8)
  {
    IOLockFree(v8);
    *(void *)(*((void *)this + 9) + 1200)  = 0;
    unsigned int v2 = (void *)*((void *)this + 9);
  }
  uint64_t v9 = v2[1773];
  if (v9)
  {
    (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
    *(void *)(*((void *)this + 9) + 14184)  = 0;
    unsigned int v2 = (void *)*((void *)this + 9);
  }
  uint64_t v10 = v2[1772];
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
    *(void *)(*((void *)this + 9) + 14176)  = 0;
    unsigned int v2 = (void *)*((void *)this + 9);
  }
  uint64_t v11 = v2[1399];
  if (v11)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
    *(void *)(*((void *)this + 9) + 11192)  = 0;
    unsigned int v2 = (void *)*((void *)this + 9);
  }
  uint64_t v12 = v2[1398];
  if (v12)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
    *(void *)(*((void *)this + 9) + 11184)  = 0;
    unsigned int v2 = (void *)*((void *)this + 9);
  }
  uint64_t v13 = v2[1397];
  if (v13)
  {
    (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
    *(void *)(*((void *)this + 9) + 11176)  = 0;
    unsigned int v2 = (void *)*((void *)this + 9);
  }
  uint64_t v14 = v2[694];
  if (v14)
  {
    (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
    *(void *)(*((void *)this + 9) + 5552)  = 0;
    unsigned int v2 = (void *)*((void *)this + 9);
  }
  uint64_t v15 = v2[683];
  if (v15)
  {
    (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
    *(void *)(*((void *)this + 9) + 5464)  = 0;
    unsigned int v2 = (void *)*((void *)this + 9);
  }
  uint64_t v16 = v2[682];
  if (v16)
  {
    (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
    *(void *)(*((void *)this + 9) + 5456)  = 0;
    unsigned int v2 = (void *)*((void *)this + 9);
  }
  uint64_t v17 = v2[688];
  if (v17)
  {
    (*(void (**)(uint64_t))(*(void *)v17 + 16))(v17);
    *(void *)(*((void *)this + 9) + 5504)  = 0;
    unsigned int v2 = (void *)*((void *)this + 9);
  }
  uint64_t v18 = v2[685];
  if (v18)
  {
    (*(void (**)(uint64_t))(*(void *)v18 + 16))(v18);
    *(void *)(*((void *)this + 9) + 5480)  = 0;
    unsigned int v2 = (void *)*((void *)this + 9);
  }
  uint64_t v19 = v2[680];
  if (v19)
  {
    (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
    *(void *)(*((void *)this + 9) + 5440)  = 0;
    unsigned int v2 = (void *)*((void *)this + 9);
  }
  int v20 = (OSObject *)v2[678];
  if (v20)
  {
    AppleBCMWLANJoinAdapter::stop(v20);
    unsigned int v2 = (void *)*((void *)this + 9);
    uint64_t v21 = v2[678];
    if (v21)
    {
      (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
      *(void *)(*((void *)this + 9) + 5424)  = 0;
      unsigned int v2 = (void *)*((void *)this + 9);
    }
  }
  uint64_t v22 = v2[691];
  if (v22)
  {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
    *(void *)(*((void *)this + 9) + 5528)  = 0;
  }
  removePropertyHelper((IOService *)this, "RequestedFiles");
  uint64_t v23 = *((void *)this + 9);
  uint64_t v24 = *(void *)(v23 + 5536);
  if (v24)
  {
    (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
    *(void *)(*((void *)this + 9) + 5536)  = 0;
    uint64_t v23 = *((void *)this + 9);
  }
  uint64_t v25 = *(OSObject **)(v23 + 5432);
  if (v25)
  {
    AppleBCMWLANJoinAdapter::stop(v25);
    uint64_t v23 = *((void *)this + 9);
    uint64_t v26 = *(void *)(v23 + 5432);
    if (v26)
    {
      (*(void (**)(uint64_t))(*(void *)v26 + 16))(v26);
      *(void *)(*((void *)this + 9) + 5432)  = 0;
      uint64_t v23 = *((void *)this + 9);
    }
  }
  uint64_t v27 = *(OSObject **)(v23 + 5472);
  if (v27)
  {
    AppleBCMWLANConfigManager::stop(v27);
    uint64_t v23 = *((void *)this + 9);
    uint64_t v28 = *(void *)(v23 + 5472);
    if (v28)
    {
      (*(void (**)(uint64_t))(*(void *)v28 + 16))(v28);
      *(void *)(*((void *)this + 9) + 5472)  = 0;
      uint64_t v23 = *((void *)this + 9);
    }
  }
  uint64_t v29 = *(void *)(v23 + 35840);
  if (v29)
  {
    (*(void (**)(uint64_t))(*(void *)v29 + 16))(v29);
    *(void *)(*((void *)this + 9) + 35840)  = 0;
    uint64_t v23 = *((void *)this + 9);
  }
  uint64_t v30 = *(void *)(v23 + 35856);
  if (v30)
  {
    (*(void (**)(uint64_t))(*(void *)v30 + 16))(v30);
    *(void *)(*((void *)this + 9) + 35856)  = 0;
    uint64_t v23 = *((void *)this + 9);
  }
  uint64_t v31 = *(void *)(v23 + 5576);
  if (v31)
  {
    (*(void (**)(uint64_t))(*(void *)v31 + 16))(v31);
    *(void *)(*((void *)this + 9) + 5576)  = 0;
    uint64_t v23 = *((void *)this + 9);
  }
  uint64_t v32 = *(void *)(v23 + 5584);
  if (v32)
  {
    (*(void (**)(uint64_t))(*(void *)v32 + 16))(v32);
    *(void *)(*((void *)this + 9) + 5584)  = 0;
    uint64_t v23 = *((void *)this + 9);
  }
  uint64_t v33 = *(void *)(v23 + 5560);
  if (v33)
  {
    (*(void (**)(uint64_t))(*(void *)v33 + 16))(v33);
    *(void *)(*((void *)this + 9) + 5560)  = 0;
    uint64_t v23 = *((void *)this + 9);
  }
  uint64_t v34 = *(void *)(v23 + 5592);
  if (v34)
  {
    (*(void (**)(uint64_t))(*(void *)v34 + 16))(v34);
    *(void *)(*((void *)this + 9) + 5592)  = 0;
    uint64_t v23 = *((void *)this + 9);
  }
  int v35 = *(OSObject **)(v23 + 5600);
  if (v35)
  {
    AppleBCMWLANNetAdapter::stop(v35);
    uint64_t v23 = *((void *)this + 9);
    uint64_t v36 = *(void *)(v23 + 5600);
    if (v36)
    {
      (*(void (**)(uint64_t))(*(void *)v36 + 16))(v36);
      *(void *)(*((void *)this + 9) + 5600)  = 0;
      uint64_t v23 = *((void *)this + 9);
    }
  }
  uint64_t v37 = *(void *)(v23 + 5608);
  if (v37)
  {
    (*(void (**)(uint64_t))(*(void *)v37 + 16))(v37);
    *(void *)(*((void *)this + 9) + 5608)  = 0;
    uint64_t v23 = *((void *)this + 9);
  }
  uint64_t v38 = *(void *)(v23 + 35848);
  if (v38)
  {
    (*(void (**)(uint64_t))(*(void *)v38 + 16))(v38);
    *(void *)(*((void *)this + 9) + 35848)  = 0;
    uint64_t v23 = *((void *)this + 9);
  }
  unint64_t v39 = *(OSObject **)(v23 + 5416);
  if (v39)
  {
    AppleBCMWLANCommander::stop(v39);
    uint64_t v23 = *((void *)this + 9);
    uint64_t v40 = *(void *)(v23 + 5416);
    if (v40)
    {
      (*(void (**)(uint64_t))(*(void *)v40 + 16))(v40);
      *(void *)(*((void *)this + 9) + 5416)  = 0;
      uint64_t v23 = *((void *)this + 9);
    }
  }
  unint64_t v41 = *(void **)(v23 + 5568);
  if (v41)
  {
    IOFree(v41, 0x28uLL);
    *(void *)(*((void *)this + 9) + 5568)  = 0;
    *(void *)(*((void *)this + 9) + 5568)  = 0;
    uint64_t v23 = *((void *)this + 9);
  }
  uint64_t v42 = *(void *)(v23 + 5408);
  if (v42)
  {
    (*(void (**)(uint64_t))(*(void *)v42 + 16))(v42);
    *(void *)(*((void *)this + 9) + 5408)  = 0;
    uint64_t v23 = *((void *)this + 9);
  }
  uint64_t v43 = *(void *)(v23 + 29784);
  if (v43)
  {
    (*(void (**)(uint64_t))(*(void *)v43 + 16))(v43);
    *(void *)(*((void *)this + 9) + 29784)  = 0;
    uint64_t v23 = *((void *)this + 9);
  }
  uint64_t v44 = *(void *)(v23 + 6280);
  if (v44)
  {
    (*(void (**)(uint64_t))(*(void *)v44 + 16))(v44);
    *(void *)(*((void *)this + 9) + 6280)  = 0;
    uint64_t v23 = *((void *)this + 9);
  }
  uint64_t v45 = *(void *)(v23 + 6240);
  if (v45)
  {
    (*(void (**)(uint64_t))(*(void *)v45 + 16))(v45);
    *(void *)(*((void *)this + 9) + 6240)  = 0;
    uint64_t v23 = *((void *)this + 9);
  }
  uint64_t v46 = *(void *)(v23 + 6232);
  if (v46)
  {
    (*(void (**)(uint64_t))(*(void *)v46 + 16))(v46);
    *(void *)(*((void *)this + 9) + 6232)  = 0;
    uint64_t v23 = *((void *)this + 9);
  }
  uint64_t v47 = *(void *)(v23 + 4424);
  if (v47)
  {
    (*(void (**)(uint64_t))(*(void *)v47 + 16))(v47);
    *(void *)(*((void *)this + 9) + 4424)  = 0;
    uint64_t v23 = *((void *)this + 9);
  }
  uint64_t v48 = *(void *)(v23 + 6288);
  if (v48)
  {
    (*(void (**)(uint64_t))(*(void *)v48 + 16))(v48);
    *(void *)(*((void *)this + 9) + 6288)  = 0;
    uint64_t v23 = *((void *)this + 9);
  }
  uint64_t v49 = *(void *)(v23 + 6248);
  if (v49)
  {
    (*(void (**)(uint64_t))(*(void *)v49 + 16))(v49);
    *(void *)(*((void *)this + 9) + 6248)  = 0;
    uint64_t v23 = *((void *)this + 9);
  }
  uint64_t v50 = *(void *)(v23 + 6256);
  if (v50)
  {
    (*(void (**)(uint64_t))(*(void *)v50 + 16))(v50);
    *(void *)(*((void *)this + 9) + 6256)  = 0;
    uint64_t v23 = *((void *)this + 9);
  }
  if (*(unsigned char *)(v23 + 4496))
  {
    uint64_t v51 = *(void *)(v23 + 6264);
    if (v51)
    {
      (*(void (**)(uint64_t))(*(void *)v51 + 16))(v51);
      *(void *)(*((void *)this + 9) + 6264)  = 0;
      uint64_t v23 = *((void *)this + 9);
    }
    uint64_t v52 = *(void *)(v23 + 6272);
    if (v52)
    {
      (*(void (**)(uint64_t))(*(void *)v52 + 16))(v52);
      *(void *)(*((void *)this + 9) + 6272)  = 0;
    }
  }
  AppleBCMWLANCore::destroyDebugInfo(this);
  uint64_t v53 = (void *)*((void *)this + 9);
  uint64_t v54 = v53[693];
  if (v54)
  {
    (*(void (**)(uint64_t))(*(void *)v54 + 16))(v54);
    *(void *)(*((void *)this + 9) + 5544)  = 0;
    uint64_t v53 = (void *)*((void *)this + 9);
  }
  uint64_t v55 = v53[1770];
  if (v55)
  {
    (*(void (**)(uint64_t))(*(void *)v55 + 16))(v55);
    *(void *)(*((void *)this + 9) + 14160)  = 0;
    uint64_t v53 = (void *)*((void *)this + 9);
  }
  uint64_t v56 = v53[675];
  if (v56)
  {
    (*(void (**)(uint64_t))(*(void *)v56 + 16))(v56);
    *(void *)(*((void *)this + 9) + 5400)  = 0;
    uint64_t v53 = (void *)*((void *)this + 9);
  }
  uint64_t v57 = v53[3865];
  if (v57)
  {
    (*(void (**)(uint64_t))(*(void *)v57 + 16))(v57);
    *(void *)(*((void *)this + 9) + 30920)  = 0;
  }
  return IOLog("AppleBCMWLANCore::freeResources[%u] this[%p]\n", 4151, this);
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::free(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::free((AppleBCMWLANCore *)((char *)this - 24));
}

BOOL AppleBCMWLANCore::createWorkQueue(AppleBCMWLANCore *this)
{
  *(void *)(*((void *)this + 9) + 30920)  = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9)
                                                                                                 + 5400)
                                                                                   + 80))(*(void *)(*((void *)this + 9) + 5400));
  (*(void (**)(void))(**(void **)(*((void *)this + 9) + 30920) + 8))(*(void *)(*((void *)this + 9) + 30920));
  return *(void *)(*((void *)this + 9) + 30920) != 0;
}

BOOL non-virtual thunk to'AppleBCMWLANCore::createWorkQueue(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::createWorkQueue((AppleBCMWLANCore *)((char *)this - 48));
}

uint64_t AppleBCMWLANCore::getWorkQueue(AppleBCMWLANCore *this)
{
  return *(void *)(*((void *)this + 9) + 30920);
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getWorkQueue(AppleBCMWLANCore *this)
{
  return *(void *)(*((void *)this + 3) + 30920);
}

void (__cdecl *AppleBCMWLANCore::reportInitFailure(IOService *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(OSObjectInterface *__hidden this)
{
  int v5 = a3;
  LODWORD(this[1].OSObject::OSObjectInterface::__vftable[1142].init)  = a2;
  HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[1142].init)  = a3;
  int v8 = 1;
  HIBYTE(this[1].OSObject::OSObjectInterface::__vftable[1141].free)  = 1;
  atomic_compare_exchange_strong((atomic_uint *volatile)&this[1].OSObject::OSObjectInterface::__vftable[276], (unsigned int *)&v8, 0);
  if (v8 == 1)
  {
    IOService::AdjustBusy(this, -1, 0);
    unsigned int v14 = 0;
    IOService::GetBusyState(this, &v14, 0);
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v12 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v12, "[dk] %s@%d:AppleBCMWLANCore::%s/%u: AdjustBusy(-1)! busystate %u, fAdjustBusyCnt %u, kAdjustBusyTimeout_ms %u\n", "reportInitFailure", 1887, "reportInitFailure", 1887, v14, LODWORD(this[1].OSObject::OSObjectInterface::__vftable[276].init), 40000);
      }
    }
    io80211_os_log();
  }
  free  = this[1].OSObject::OSObjectInterface::__vftable[337].free;
  uint64_t v10 = (IOService *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*((void *)free + 6)
                                                                                             + 288))((uint64_t)free + 48, a2, a3, a4, a5);
  AppleBCMWLANBusInterface::reportInitFailure((uint64_t)free, v10, a2, v5);
  atomic_fetch_and((atomic_uint *volatile)((char *)&this[1].OSObject::OSObjectInterface::__vftable[649].init + 4), 0xFFFFFFEF);
  uint64_t result = this[1].OSObject::OSObjectInterface::__vftable[1932].free;
  if (result)
  {
    v13[0]  = _NSConcreteStackBlock;
    v13[1]  = 0x40000000;
    void v13[2] = ___ZN16AppleBCMWLANCore17reportInitFailureE32InitilizationFailureReportReturnj_block_invoke;
    v13[3]  = &__block_descriptor_tmp_5;
    v13[4]  = this;
    return (void (__cdecl *)(OSObjectInterface *__hidden))(*(uint64_t (**)(void (__cdecl *)(OSObjectInterface *__hidden), void *))(*(void *)result + 112))(result, v13);
  }
  return result;
}

uint64_t ___ZN16AppleBCMWLANCore17reportInitFailureE32InitilizationFailureReportReturnj_block_invoke(uint64_t a1)
{
  return 0;
}

uint64_t AppleBCMWLANCore::signalDriverEvent(uint64_t a1, int a2)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1);
      uint64_t v7 = AppleBCMWDriverEventToString[a2];
      int v8 = (void *)current_thread();
      uint64_t v9 = thread_tid(v8);
      CCLogStream::logNoticeIf(v6, 0x200000uLL, "[dk] %s@%d: Signalling (%s) event from tid: %llx\n", "signalDriverEvent", 4858, v7, v9);
    }
  }
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) + 88);
  return v4();
}

IOService *AppleBCMWLANCore::handleAdjustBusy(IOService *this, void (__cdecl *a2)(OSObjectInterface *__hidden this))
{
  unsigned int v2 = this[1].OSObject::OSObjectInterface::__vftable;
  if (v2[276].free == a2)
  {
    uint64_t v3 = this;
    int v4 = 1;
    atomic_compare_exchange_strong((atomic_uint *volatile)&v2[276], (unsigned int *)&v4, 0);
    if (v4 == 1)
    {
      IOService::AdjustBusy(this, -1, 0);
      unsigned int v7 = 0;
      IOService::GetBusyState(v3, &v7, 0);
      if (((uint64_t (*)(IOService *))v3->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(v3))
      {
        ((void (*)(IOService *))v3->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(v3);
        if (CCLogStream::shouldLog())
        {
          int v5 = (CCLogStream *)((uint64_t (*)(IOService *))v3->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(v3);
          CCLogStream::logAlert(v5, "[dk] %s@%d:AdjustBusy(-1) timeout in %u ms! busystate %u, fAdjustBusyCnt %u\n", "handleAdjustBusy", 1913, 40000, v7, LODWORD(v3[1].OSObject::OSObjectInterface::__vftable[276].init));
        }
      }
    }
    else
    {
      unsigned int v7 = 0;
      IOService::GetBusyState(this, &v7, 0);
      if (((uint64_t (*)(IOService *))v3->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(v3))
      {
        ((void (*)(IOService *))v3->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(v3);
        if (CCLogStream::shouldLog())
        {
          uint64_t v6 = (CCLogStream *)((uint64_t (*)(IOService *))v3->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(v3);
          CCLogStream::logAlert(v6, "[dk] %s@%d:AdjustBusy timeout in %u ms! busystate %u, Not adjusting: fAdjustBusyCnt %u\n", "handleAdjustBusy", 1920, 40000, v7, LODWORD(v3[1].OSObject::OSObjectInterface::__vftable[276].init));
        }
      }
    }
    return (IOService *)io80211_os_log();
  }
  return this;
}

uint64_t AppleBCMWLANCore::initAfterIORegUpdated(IOService *this, AppleBCMWLANCore *a2, uint64_t a3, uint64_t a4, uint64_t a5, BOOL (*a6)(const OSObject *))
{
  unsigned int v7 = this[1].OSObject::OSObjectInterface::__vftable;
  if (!v7[342].init)
  {
    this[1].OSObject::OSObjectInterface::__vftable[342].init  = (BOOL (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANConfigManager::withDriver((AppleBCMWLANConfigManager *)this, (AppleBCMWLANCore *)AppleBCMWLANCore::allocChipImage, (AppleBCMWLANChipImage *(*)(const OSObject *, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t))AppleBCMWLANCore::generateChipImage, (int (*)(const OSObject *, AppleBCMWLANChipImage *))AppleBCMWLANCore::validateChipImage, (int (*)(const OSObject *, AppleBCMWLANChipImage *))AppleBCMWLANCore::isSecureBootEnabled, a6);
    uint64_t v16 = this[1].OSObject::OSObjectInterface::__vftable;
    init  = (AppleBCMWLANConfigManager *)v16[342].init;
    if (!init)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v27 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v27, "[dk] %s@%d: Unable to create ConfigManager object!\n", "initAfterIORegUpdated", 1965);
        }
      }
      uint64_t v22 = this;
      uint64_t v23 = 1966;
      goto LABEL_115;
    }
    uint64_t v18 = (IOService *)(*(uint64_t (**)(void))(*((void *)v16[337].free + 6) + 288))();
    if (AppleBCMWLANConfigManager::gatherParameterData(init, v18)) {
      return 0;
    }
    if ((*(unsigned int (**)(void (__cdecl *)(OSObjectInterface *__hidden), const char *, const char *, void))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[337].free + 680))(this[1].OSObject::OSObjectInterface::__vftable[337].free, "M", "TPHN", 0))
    {
      int v19 = (*(uint64_t (**)(void (__cdecl *)(OSObjectInterface *__hidden), const char *, const char *, void))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[337].free + 680))(this[1].OSObject::OSObjectInterface::__vftable[337].free, "m", "1.7", 0);
    }
    else
    {
      int v19 = 0;
    }
    char v46 = 1;
    char v45 = 0;
    IOParseBootArgNumber("wlan.debug.check-hwlimits", &v46, 1);
    IOParseBootArgNumber("wlan.debug.check-hwlimits-forced", &v45, 1);
    if (v46)
    {
      int v24 = v45 ? 1 : v19;
      if (v24 == 1)
      {
        uint64_t v25 = this[1].OSObject::OSObjectInterface::__vftable;
        if (!LOBYTE(v25[1103].init))
        {
          LOWORD(v25[1103].init)  = 98;
          uint64_t v25 = this[1].OSObject::OSObjectInterface::__vftable;
        }
        AppleBCMWLANConfigManager::setAWDLSupported((AppleBCMWLANConfigManager *)v25[342].init, 0);
        AppleBCMWLANConfigManager::setTetheringSupport((AppleBCMWLANConfigManager *)this[1].OSObject::OSObjectInterface::__vftable[342].init, 0);
        if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
        {
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (CCLogStream::shouldLog())
          {
            unint64_t v39 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            CCLogStream::logAlert(v39, "[dk] %s@%d: Limiting HW platform, disabling: '%s' band locked, AWDL/LLW, Tethering/SoftAP\n", "initAfterIORegUpdated", 1997, (const char *)&this[1].OSObject::OSObjectInterface::__vftable[1103]);
          }
        }
      }
    }
    unsigned int v7 = this[1].OSObject::OSObjectInterface::__vftable;
  }
  if (!v7[345].free)
  {
    this[1].OSObject::OSObjectInterface::__vftable[345].free  = (void (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANPowerManager::withDriver((AppleBCMWLANPowerManager *)this, a2);
    unsigned int v7 = this[1].OSObject::OSObjectInterface::__vftable;
    if (!v7[345].free)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v28 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v28, "[dk] %s@%d: Unable to create ivars->fPowerManager Manager object!\n", "initAfterIORegUpdated", 2006);
        }
      }
      AppleBCMWLANCore::stopAndFreeResources((AppleBCMWLANCore *)this);
      uint64_t v22 = this;
      uint64_t v23 = 2008;
      goto LABEL_115;
    }
  }
  if (!v7[340].init)
  {
    this[1].OSObject::OSObjectInterface::__vftable[340].init  = (BOOL (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANBssManager::withOptions((AppleBCMWLANBssManager *)this, a2);
    unsigned int v7 = this[1].OSObject::OSObjectInterface::__vftable;
    if (!v7[340].init)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v29 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v29, "[dk] %s@%d: Unable to create Bss manager object!\n", "initAfterIORegUpdated", 2016);
        }
      }
      AppleBCMWLANCore::stopAndFreeResources((AppleBCMWLANCore *)this);
      uint64_t v22 = this;
      uint64_t v23 = 2018;
      goto LABEL_115;
    }
  }
  if (!v7[339].init)
  {
    this[1].OSObject::OSObjectInterface::__vftable[339].init  = (BOOL (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANJoinAdapter::withDriver((uint64_t)this, 0, 0);
    unsigned int v7 = this[1].OSObject::OSObjectInterface::__vftable;
    if (!v7[339].init)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v30 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v30, "[dk] %s@%d: Unable to create join adapter\n", "initAfterIORegUpdated", 2042);
        }
      }
      AppleBCMWLANCore::freeResources((AppleBCMWLANCore *)this);
      return 0;
    }
  }
  if (!v7[346].init)
  {
    this[1].OSObject::OSObjectInterface::__vftable[346].init  = (BOOL (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANTxPowerManager::withDriver((AppleBCMWLANTxPowerManager *)this, a2);
    unsigned int v7 = this[1].OSObject::OSObjectInterface::__vftable;
    if (!v7[346].init)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v31 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v31, "[dk] %s@%d: Unable to create ivars->fTxPowerManager Manager object!\n", "initAfterIORegUpdated", 2051);
        }
      }
      AppleBCMWLANCore::stopAndFreeResources((AppleBCMWLANCore *)this);
      uint64_t v22 = this;
      uint64_t v23 = 2053;
      goto LABEL_115;
    }
  }
  if (!v7[350].init)
  {
    this[1].OSObject::OSObjectInterface::__vftable[350].init  = (BOOL (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANNetAdapter::withDriver((AppleBCMWLANNetAdapter *)this, a2);
    unsigned int v7 = this[1].OSObject::OSObjectInterface::__vftable;
    if (!v7[350].init)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v33 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v33, "[dk] %s@%d: Unable to create Net Adapter object!\n", "initAfterIORegUpdated", 2061);
        }
      }
      AppleBCMWLANCore::stopAndFreeResources((AppleBCMWLANCore *)this);
      uint64_t v22 = this;
      uint64_t v23 = 2063;
      goto LABEL_115;
    }
  }
  if (!v7[350].free)
  {
    this[1].OSObject::OSObjectInterface::__vftable[350].free  = (void (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANLQM::withDriver((AppleBCMWLANLQM *)this, a2);
    unsigned int v7 = this[1].OSObject::OSObjectInterface::__vftable;
    if (!v7[350].free)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          int v35 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v35, "[dk] %s@%d: Unable to create LQM object!\n", "initAfterIORegUpdated", 2071);
        }
      }
      AppleBCMWLANCore::stopAndFreeResources((AppleBCMWLANCore *)this);
      uint64_t v22 = this;
      uint64_t v23 = 2073;
      goto LABEL_115;
    }
  }
  if (!v7[344].init)
  {
    this[1].OSObject::OSObjectInterface::__vftable[344].init  = (BOOL (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANBGScanAdapter::withDriver((AppleBCMWLANBGScanAdapter *)this, a2);
    unsigned int v7 = this[1].OSObject::OSObjectInterface::__vftable;
    if (!v7[344].init)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v36 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v36, "[dk] %s@%d: Unable to create BGScan Adapter object!\n", "initAfterIORegUpdated", 2092);
        }
      }
      AppleBCMWLANCore::stopAndFreeResources((AppleBCMWLANCore *)this);
      uint64_t v22 = this;
      uint64_t v23 = 2094;
      goto LABEL_115;
    }
  }
  if (!v7[347].free)
  {
    this[1].OSObject::OSObjectInterface::__vftable[347].free  = (void (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANWnmAdapter::withDriver((AppleBCMWLANWnmAdapter *)this, a2);
    unsigned int v7 = this[1].OSObject::OSObjectInterface::__vftable;
    if (!v7[347].free)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v37 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v37, "[dk] %s@%d: Unable to create WNM Agent object!\n", "initAfterIORegUpdated", 2113);
        }
      }
      AppleBCMWLANCore::stopAndFreeResources((AppleBCMWLANCore *)this);
      uint64_t v22 = this;
      uint64_t v23 = 2115;
      goto LABEL_115;
    }
  }
  if (!v7[347].init)
  {
    this[1].OSObject::OSObjectInterface::__vftable[347].init  = (BOOL (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANKeepAliveOffload::withDriver((AppleBCMWLANKeepAliveOffload *)this, a2);
    unsigned int v7 = this[1].OSObject::OSObjectInterface::__vftable;
    if (!v7[347].init)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v38 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v38, "[dk] %s@%d: Unable to create Keep Alive Offload object!\n", "initAfterIORegUpdated", 2134);
        }
      }
      AppleBCMWLANCore::stopAndFreeResources((AppleBCMWLANCore *)this);
      uint64_t v22 = this;
      uint64_t v23 = 2136;
      goto LABEL_115;
    }
  }
  if (!v7[348].free)
  {
    this[1].OSObject::OSObjectInterface::__vftable[348].free  = (void (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANRoamAdapter::withDriver((AppleBCMWLANRoamAdapter *)this, a2);
    unsigned int v7 = this[1].OSObject::OSObjectInterface::__vftable;
    if (!v7[348].free)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v40 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v40, "[dk] %s@%d: Unable to create Roam Adapter object!\n", "initAfterIORegUpdated", 2156);
        }
      }
      AppleBCMWLANCore::stopAndFreeResources((AppleBCMWLANCore *)this);
      uint64_t v22 = this;
      uint64_t v23 = 2158;
      goto LABEL_115;
    }
  }
  if (!v7[349].init)
  {
    this[1].OSObject::OSObjectInterface::__vftable[349].init  = (BOOL (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLAN11axAdapter::withDriver((AppleBCMWLAN11axAdapter *)this, a2);
    unsigned int v7 = this[1].OSObject::OSObjectInterface::__vftable;
    if (!v7[349].init)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          unint64_t v41 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v41, "[dk] %s@%d: Unable to create 11ax Adapter object!\n", "initAfterIORegUpdated", 2166);
        }
      }
      AppleBCMWLANCore::stopAndFreeResources((AppleBCMWLANCore *)this);
      uint64_t v22 = this;
      uint64_t v23 = 2168;
      goto LABEL_115;
    }
  }
  if (!v7[349].free)
  {
    this[1].OSObject::OSObjectInterface::__vftable[349].free  = (void (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLAN11beAdapter::withDriver((AppleBCMWLAN11beAdapter *)this, a2);
    unsigned int v7 = this[1].OSObject::OSObjectInterface::__vftable;
    if (!v7[349].free)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v42 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v42, "[dk] %s@%d: Unable to create 11be Adapter object!\n", "initAfterIORegUpdated", 2189);
        }
      }
      AppleBCMWLANCore::stopAndFreeResources((AppleBCMWLANCore *)this);
      uint64_t v22 = this;
      uint64_t v23 = 2191;
      goto LABEL_115;
    }
  }
  if (!v7[2240].free)
  {
    this[1].OSObject::OSObjectInterface::__vftable[2240].free  = (void (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANPowerStateAdapter::withDriver((AppleBCMWLANPowerStateAdapter *)this, a2);
    unsigned int v7 = this[1].OSObject::OSObjectInterface::__vftable;
    if (!v7[2240].free)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v43 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v43, "[dk] %s@%d: Unable to create PowerState Adapter object!\n", "initAfterIORegUpdated", 2246);
        }
      }
      AppleBCMWLANCore::stopAndFreeResources((AppleBCMWLANCore *)this);
      uint64_t v22 = this;
      uint64_t v23 = 2248;
LABEL_115:
      AppleBCMWLANCore::reportInitFailure(v22, 2uLL, v23, v20, v21);
      return 0;
    }
  }
  if (!v7[886].init)
  {
    this[1].OSObject::OSObjectInterface::__vftable[886].init  = (BOOL (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANCoreDbg::withCoreDriver((AppleBCMWLANCoreDbg *)this, a2);
    unsigned int v7 = this[1].OSObject::OSObjectInterface::__vftable;
  }
  int v8 = 1;
  atomic_compare_exchange_strong((atomic_uint *volatile)&v7[276], (unsigned int *)&v8, 0);
  if (v8 == 1)
  {
    IOService::AdjustBusy(this, -1, 0);
    unsigned int v44 = 0;
    IOService::GetBusyState(this, &v44, 0);
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v34 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v34, "[dk] %s@%d:AdjustBusy(-1) busystate %u, fAdjustBusyCnt %u\n", "initAfterIORegUpdated", 2280, v44, LODWORD(this[1].OSObject::OSObjectInterface::__vftable[276].init));
      }
    }
    io80211_os_log();
  }
  uint64_t v9 = this[1].OSObject::OSObjectInterface::__vftable;
  uint64_t v10 = (uint64_t)v9[338].init;
  if (!v10) {
    return 1;
  }
  AppleBCMWLANProvisioningManager::getProvisionedData(v10, &v9[353]);
  uint64_t v13 = (*(uint64_t (**)(void (__cdecl *)(OSObjectInterface *__hidden), uint64_t, uint64_t))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[706].free + 1008))(this[1].OSObject::OSObjectInterface::__vftable[706].free, v11, v12);
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v32 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logAlert(v32, "[dk] %s@%d:Starting with MAC Address: %02x:%02x:%02x:%02x:%02x:%02x, HW[ %02x:%02x:%02x:%02x:%02x:%02x ]\n", "initAfterIORegUpdated", 2292, v13, BYTE1(v13), BYTE2(v13), BYTE3(v13), BYTE4(v13), BYTE5(v13), BYTE4(this[1].OSObject::OSObjectInterface::__vftable[353].init), BYTE5(this[1].OSObject::OSObjectInterface::__vftable[353].init), BYTE6(this[1].OSObject::OSObjectInterface::__vftable[353].init), HIBYTE(this[1].OSObject::OSObjectInterface::__vftable[353].init), LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[353].free), BYTE1(this[1].OSObject::OSObjectInterface::__vftable[353].free));
    }
  }
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
    return 1;
  }
  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
  uint64_t v14 = 1;
  if (CCLogStream::shouldLog())
  {
    uint64_t v15 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    CCLogStream::logAlert(v15, "[dk] %s@%d:Init Delay time is is %06llu.%06llu seconds\n", "initAfterIORegUpdated", 2296, (unint64_t)this[1].OSObject::OSObjectInterface::__vftable[275].free / 0x3B9ACA00, (unint64_t)this[1].OSObject::OSObjectInterface::__vftable[275].free % 0x3B9ACA00 / 0x3E8);
  }
  return v14;
}

uint64_t AppleBCMWLANCore::allocChipImage(AppleBCMWLANCore *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!*(void *)(*((void *)this + 9) + 5400)) {
    return 0;
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
    && ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
        CCLogStream::shouldLog()))
  {
    uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    CCLogStream::logNoticeIf(v12, 0x80uLL, "[dk] %s@%d: fw size %llu, nv size %llu, regSize %llu, txcapSize %llu\n", "allocChipImage", 5660, a2, a3, a4, a5);
    if (!a2) {
      return 0;
    }
  }
  else if (!a2)
  {
    return 0;
  }
  if (!a3) {
    return 0;
  }
  uint64_t v10 = *(uint64_t (**)(void))(*(void *)(*(void *)(*((void *)this + 9) + 5400) + 48) + 40);
  return v10();
}

uint64_t AppleBCMWLANCore::generateChipImage(AppleBCMWLANCore *this, AppleBCMWLANChipImage *a2)
{
  if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
    || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
        !CCLogStream::shouldLog()))
  {
    if (a2) {
      goto LABEL_4;
    }
    return 3758097084;
  }
  uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  CCLogStream::logNoticeIf(v11, 0x80uLL, "[dk] %s@%d:\n", "generateChipImage", 5674);
  if (!a2) {
    return 3758097084;
  }
LABEL_4:
  uint64_t v4 = (*(uint64_t (**)(AppleBCMWLANChipImage *, void, uint64_t (*)(uint64_t, IO80211Buffer *, uint64_t), void))(*(void *)a2 + 144))(a2, *(void *)(*((void *)this + 9) + 5408), AppleBCMWLANProvisioningManager::normalizeNVRAM, 0);
  if (v4)
  {
    uint64_t v6 = v4;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logEmergency(v8, "[dk] %s@%d: Failed to normalize NVRAM\n");
      }
    }
  }
  else
  {
    uint64_t v5 = (*(uint64_t (**)(AppleBCMWLANChipImage *, void, uint64_t (*)(AppleBCMWLANProvisioningManager *, IO80211Buffer *, void *), void))(*(void *)a2 + 144))(a2, *(void *)(*((void *)this + 9) + 5408), AppleBCMWLANProvisioningManager::generateProvisionedNVRAMParameters, 0);
    if (v5)
    {
      uint64_t v6 = v5;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logEmergency(v9, "[dk] %s@%d: Failed to generate provisioned NVRAM parameters\n");
        }
      }
    }
    else
    {
      uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(*(void *)(*((void *)this + 9) + 5400) + 48) + 48))();
      if (v6)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logEmergency(v10, "[dk] %s@%d: Failed to generate chip image\n");
          }
        }
      }
    }
  }
  return v6;
}

uint64_t AppleBCMWLANCore::validateChipImage(AppleBCMWLANCore *this, const AppleBCMWLANChipImage *a2)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v6, 0x80uLL, "[dk] %s@%d:\n", "validateChipImage", 5814);
    }
  }
  uint64_t v4 = 3825174278;
  if (!(*(unsigned int (**)(const AppleBCMWLANChipImage *, void, uint64_t (*)(uint64_t, IO80211Buffer *, uint64_t), void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)this + 9) + 5408), AppleBCMWLANProvisioningManager::checkNormalizedNVRAM, 0))return 3825174294; {
  if ((*(unsigned int (**)(const AppleBCMWLANChipImage *, void, BOOL (*)(int, IO80211Buffer *, uint64_t), void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)this + 9) + 5408), AppleBCMWLANProvisioningManager::checkRegulatorTable, 0))
  }
  {
    if ((*(unsigned int (**)(const AppleBCMWLANChipImage *, void, BOOL (*)(int, IO80211Buffer *, uint64_t), void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)this + 9) + 5408), AppleBCMWLANProvisioningManager::checkTxCapTable, 0))
    {
      if (((*(uint64_t (**)(void, const AppleBCMWLANChipImage *))(**(void **)(*((void *)this + 9)
                                                                                           + 5400)
                                                                             + 96))(*(void *)(*((void *)this + 9) + 5400), a2) & 1) != 0)return 0;
      else {
        return 3825174295;
      }
    }
    else
    {
      return 3825174282;
    }
  }
  return v4;
}

uint64_t AppleBCMWLANCore::isSecureBootEnabled(AppleBCMWLANCore *this)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(*((void *)this + 9) + 5400) + 48) + 520))();
}

uint64_t AppleBCMWLANCore::stopAndFreeResources(AppleBCMWLANCore *this)
{
  IOLog("AppleBCMWLANCore::stopAndFreeResources[%u] this[%p]\n", 3960, this);
  AppleBCMWLANCore::stopResources(this);
  return AppleBCMWLANCore::freeResources(this);
}

uint64_t AppleBCMWLANCore::getFaultReporterFromDriver(AppleBCMWLANCore *this)
{
  return AppleBCMWLANBusInterface::getIO80211FaultReporter(*(AppleBCMWLANBusInterface **)(*((void *)this + 9) + 5400));
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getFaultReporterFromDriver(AppleBCMWLANCore *this)
{
  return AppleBCMWLANBusInterface::getIO80211FaultReporter(*(AppleBCMWLANBusInterface **)(*((void *)this + 3) + 5400));
}

uint64_t AppleBCMWLANCore::start(IOService *this, IOService *a2)
{
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      unsigned int v63 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logAlert(v63, "[dk] %s@%d:core common start\n", "start", 2315);
    }
  }
  atomic_fetch_or((atomic_uint *volatile)((char *)&this[1].OSObject::OSObjectInterface::__vftable[649].init + 4), 0x40u);
  atomic_fetch_or((atomic_uint *volatile)((char *)&this[1].OSObject::OSObjectInterface::__vftable[649].init + 4), 0x20u);
  AppleBCMWLANCore::signalDriverReady((AppleBCMWLANCore *)this);
  if (checkPropertyTrue(a2, "IOPMResetPowerStateOnWake", 0, "IOService"))
  {
    BYTE4(this[1].OSObject::OSObjectInterface::__vftable[672].init)  = 1;
    setPropertyHelper(this, "IOPMResetPowerStateOnWake", kOSBooleanTrue);
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        int v64 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v64, "[dk] %s@%d:Will reset power state upon system wake\n", "start", 2334);
      }
    }
  }
  this[1].OSObject::OSObjectInterface::__vftable[885].init  = (BOOL (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this[1].OSObject::OSObjectInterface::__vftable[337].free);
  init  = this[1].OSObject::OSObjectInterface::__vftable[885].init;
  if (!init)
  {
    ClassNameHelper  = (const char *)getClassNameHelper(this);
    IOLog("%s::%s(): Unable to create debug logger!\n", ClassNameHelper, "start");
    unsigned int v7 = this;
    uint64_t v8 = 2;
    uint64_t v9 = 2341;
    goto LABEL_14;
  }
  (*(void (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)init + 8))(init);
  if ((IO80211Controller::start((IO80211Controller *)this, a2) & 1) == 0)
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          unint64_t v67 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v67, "[dk] %s@%d: super::start(provider) failed\n", "start", 2349);
        }
      }
    }
    (*(void (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[337].free
                                                                          + 16))(this[1].OSObject::OSObjectInterface::__vftable[337].free);
    return 0;
  }
  strlcpy((char *)&this[1].OSObject::OSObjectInterface::__vftable[19].init + 4, kAppleBCMWLANCoreIOImageLoaderConsumerId[0], 0x100uLL);
  int v116 = 0;
  if (IOParseBootArgNumber("wlan.debug.initfailure", &v116, 4) && v116)
  {
    unsigned int v7 = this;
    uint64_t v8 = 8;
    uint64_t v9 = 2359;
LABEL_14:
    AppleBCMWLANCore::reportInitFailure(v7, v8, v9, v5, v6);
    return 0;
  }
  BYTE1(this[1].OSObject::OSObjectInterface::__vftable[274].free)  = 1;
  BYTE2(this[1].OSObject::OSObjectInterface::__vftable[274].free)  = 0;
  if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[1].free)(this))
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v69 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v69, "[dk] %s@%d: Unable to get command gate from superclass\n", "start", 2371);
      }
    }
    unsigned int v7 = this;
    uint64_t v8 = 2;
    uint64_t v9 = 2372;
    goto LABEL_14;
  }
  LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[306].init)  = 1;
  if (IOParseBootArgNumber("wlan.sar.nocc", &v116, 4)) {
    LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[306].init)  = v116 == 0;
  }
  BYTE2(this[1].OSObject::OSObjectInterface::__vftable[1126].free)  = 0;
  if (IOParseBootArgNumber("wlan.proxd.dump", &v116, 4)) {
    BYTE2(this[1].OSObject::OSObjectInterface::__vftable[1126].free)  = v116 != 0;
  }
  BYTE1(this[1].OSObject::OSObjectInterface::__vftable[1933].free)  = 0;
  if (IOParseBootArgNumber("wlan.debug.linkdebug", &this[1].OSObject::OSObjectInterface::__vftable[1084], 4))
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        int v70 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t v71 = (const char *)getClassNameHelper(this);
        CCLogStream::logInfo(v70, "[dk] %s@%d:%s::%s(): Found 'wlan.debug.linkdebug' arg[0x%08x]\n", "start", 2388, v71, "start", LODWORD(this[1].OSObject::OSObjectInterface::__vftable[1084].init));
      }
    }
  }
  if (IOParseBootArgNumber("wlan.debug.single-boot-only", &v116, 4))
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v72 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t v73 = (const char *)getClassNameHelper(this);
        CCLogStream::logInfo(v72, "[dk] %s@%d:%s::%s(): Found 'wlan.debug.single-boot-only' arg[0x%08x]\n", "start", 2392, v73, "start", v116);
      }
    }
    BYTE3(this[1].OSObject::OSObjectInterface::__vftable[2206].free)  = v116 != 0;
  }
  v115  = 1;
  if (IOParseBootArgNumber("wlan.debug.disable_filter_ie", &v115, 4))
  {
    if (v115 <= 1) {
      BYTE1(this[1].OSObject::OSObjectInterface::__vftable[1105].free)  = v115;
    }
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v74 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (BYTE1(this[1].OSObject::OSObjectInterface::__vftable[1105].free)) {
          uint64_t v75 = "true";
        }
        else {
          uint64_t v75 = "false";
        }
        CCLogStream::logAlert(v74, "[dk] %s@%d:Disable IE filtering boot-arg override: %s\n", "start", 2403, v75);
      }
    }
  }
  v114  = 1;
  if (IOParseBootArgNumber("wlan.debug.lpsc", &v114, 4))
  {
    if (v114 <= 1) {
      BYTE5(this[1].OSObject::OSObjectInterface::__vftable[1146].init)  = v114;
    }
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v76 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (BYTE5(this[1].OSObject::OSObjectInterface::__vftable[1146].init)) {
          uint64_t v77 = "true";
        }
        else {
          uint64_t v77 = "false";
        }
        CCLogStream::logAlert(v76, "[dk] %s@%d:LPSC debug flag: %s\n", "start", 2413, v77);
      }
    }
  }
  if (IOParseBootArgNumber("wlan.lqm.logging", (char *)&this[1].OSObject::OSObjectInterface::__vftable[61].init + 4, 4)) {
    io80211_os_log();
  }
  HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[1102].init)  = AppleBCMWLANUtil::getHwFeatureFlags(a2, (IOService *)"IOService", v13);
  OSNumberPtr v14 = OSNumber::withNumber(HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[1102].init), 0x20uLL);
  setPropertyHelper(this, "wlan.hw.feature-flags", v14);
  if (v14) {
    ((void (*)(OSNumberPtr))v14->release)(v14);
  }
  if (IOParseBootArgString("wlan.debug.band-locked", (char *)&this[1].OSObject::OSObjectInterface::__vftable[1103], 16))
  {
    HIBYTE(this[1].OSObject::OSObjectInterface::__vftable[1103].free)  = 0;
    uint64_t v15 = this[1].OSObject::OSObjectInterface::__vftable + 1103;
    init_low  = LOBYTE(v15->init);
    if ((init_low == 97 || init_low == 98) && !BYTE1(this[1].OSObject::OSObjectInterface::__vftable[1103].init))
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v84 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v84, "[dk] %s@%d: Found 'wlan.debug.band-locked' boot-arg override: '%s'\n");
        }
      }
    }
    else
    {
      v15->init  = 0;
      v15->free  = 0;
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v17 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v17, "[dk] %s@%d: Found 'wlan.debug.band-locked' boot-arg override: Invalid '%s'\n");
        }
      }
    }
  }
  LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[271].init)  = 1;
  uint64_t v18 = this[1].OSObject::OSObjectInterface::__vftable;
  if (LOBYTE(v18[271].init))
  {
    this[1].OSObject::OSObjectInterface::__vftable[1230].init  = (BOOL (__cdecl *)(OSObjectInterface *__hidden))OSDictionary::withCapacity(0x10u);
    uint64_t v18 = this[1].OSObject::OSObjectInterface::__vftable;
  }
  this[1].OSObject::OSObjectInterface::__vftable[346].free  = (void (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANBusInterface::getFaultReporter((AppleBCMWLANBusInterface *)v18[337].free);
  free  = this[1].OSObject::OSObjectInterface::__vftable[346].free;
  if (!free)
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v78 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t v79 = (const char *)getClassNameHelper(this);
        CCLogStream::logAlert(v78, "[dk] %s@%d:%s::%s(): Unable to create Fault Reporter!\n", "start", 2481, v79, "start");
      }
    }
    unsigned int v7 = this;
    uint64_t v8 = 2;
    uint64_t v9 = 2482;
    goto LABEL_14;
  }
  (*(void (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)free + 8))(free);
  CCFaultReporter::registerWatchdog((CCFaultReporter *)this[1].OSObject::OSObjectInterface::__vftable[346].free, (int (*)(OSObject *, const CCFaultReport *))AppleBCMWLANCore::watchdog, this);
  CCFaultReporter::registerPanic((CCFaultReporter *)this[1].OSObject::OSObjectInterface::__vftable[346].free, (int (*)(OSObject *, const CCFaultReport *))AppleBCMWLANCore::PanicForFault, this);
  CCFaultReporter::registerErrorDecoder((CCFaultReporter *)this[1].OSObject::OSObjectInterface::__vftable[346].free, (const char *(*)(OSObject *, int))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass, this);
  v113[0]  = (OSData *)AppleBCMWLANCore::prepareFRCallback;
  v113[1]  = (OSData *)AppleBCMWLANCore::collectImmediateFaultDataCallback;
  v113[2]  = 0;
  v113[3]  = (OSData *)AppleBCMWLANCore::completeFaultReportCallback;
  v113[4]  = (OSData *)AppleBCMWLANCore::induceFaultCallback;
  getClassNameHelper(this);
  CCFaultReporter::registerCallbacks();
  uint64_t v20 = this[1].OSObject::OSObjectInterface::__vftable;
  if (((uint64_t)v20[649].init & 0x40) != 0)
  {
    CCFaultReporter::setAction((CCFaultReporter *)v20[346].free, 2u);
    uint64_t v20 = this[1].OSObject::OSObjectInterface::__vftable;
  }
  int v21 = (int)v20[2].init;
  if (v21)
  {
    CCFaultReporter::panicForReason((CCFaultReporter *)v20[346].free, v21);
    uint64_t v20 = this[1].OSObject::OSObjectInterface::__vftable;
  }
  uint64_t v22 = (AppleBCMWLANProvisioningManager *)(*(uint64_t (**)(uint64_t))(*((void *)v20[337].free + 6) + 288))((uint64_t)v20[337].free + 48);
  this[1].OSObject::OSObjectInterface::__vftable[338].init  = (BOOL (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANProvisioningManager::withProvisioningRoot(v22, (IOService *)this[1].OSObject::OSObjectInterface::__vftable[337].free, v23);
  int v24 = (AppleBCMWLANProvisioningManager *)this[1].OSObject::OSObjectInterface::__vftable[338].init;
  if (!v24)
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v82 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v82, "[dk] %s@%d: Failed to create a provisioning manager\n", "start", 2532);
      }
    }
    unsigned int v7 = this;
    uint64_t v8 = 2;
    uint64_t v9 = 2533;
    goto LABEL_14;
  }
  uint64_t v25 = AppleBCMWLANProvisioningManager::process(v24);
  uint64_t v26 = this[1].OSObject::OSObjectInterface::__vftable;
  if (v25)
  {
    uint64_t v27 = v25;
    (*(void (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)v26[337].free + 136))(v26[337].free);
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v80 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t v81 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v27);
        CCLogStream::logAlert(v80, "[dk] %s@%d: Failed to process provisioning data. %s\n", "start", 2540, v81);
      }
    }
    unsigned int v7 = this;
    uint64_t v8 = 14;
    uint64_t v9 = 2541;
    goto LABEL_14;
  }
  AppleBCMWLANProvisioningManager::getProvisionedData((uint64_t)v26[338].init, &v26[353]);
  this[1].OSObject::OSObjectInterface::__vftable[348].init  = (BOOL (__cdecl *)(OSObjectInterface *__hidden))IOMallocZeroTyped();
  uint64_t v28 = (IOService **)this[1].OSObject::OSObjectInterface::__vftable[348].init;
  if (!v28)
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v85 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v85, "[dk] %s@%d: callback allocation failure\n", "start", 2551);
      }
    }
    unsigned int v7 = this;
    uint64_t v8 = 2;
    uint64_t v9 = 2552;
    goto LABEL_14;
  }
  *uint64_t v28 = this;
  *((void *)this[1].OSObject::OSObjectInterface::__vftable[348].init + 1)  = AppleBCMWLANCore::dequeueTxIOs;
  *((void *)this[1].OSObject::OSObjectInterface::__vftable[348].init + AppleBCMWLANCommandMonitor::free(this - 3) = AppleBCMWLANCore::reportCompletedTxIOs_WithoutBDC;
  *((void *)this[1].OSObject::OSObjectInterface::__vftable[348].init + 4)  = AppleBCMWLANCore::enqueueRxIOs_WithEventQueue;
  *((void *)this[1].OSObject::OSObjectInterface::__vftable[348].init + 2)  = AppleBCMWLANCore::reportCommittedTxCommands;
  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[1].Dispatch)(this);
  this[1].OSObject::OSObjectInterface::__vftable[389].free  = (void (__cdecl *)(OSObjectInterface *__hidden))IO80211TimerSource::allocWithParams();
  uint64_t v29 = this->OSObject::OSMetaClassBase::__vftable;
  if (!this[1].OSObject::OSObjectInterface::__vftable[389].free)
  {
    if (((uint64_t (*)(IOService *))v29[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        int8x8_t v89 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v89, "[dk] %s@%d: Unable to get link inactivity timer\n", "start", 2567);
      }
    }
    unsigned int v7 = this;
    uint64_t v8 = 2;
    uint64_t v9 = 2568;
    goto LABEL_14;
  }
  ((void (*)(IOService *))v29[1].Dispatch)(this);
  this[1].OSObject::OSObjectInterface::__vftable[390].init  = (BOOL (__cdecl *)(OSObjectInterface *__hidden))IO80211TimerSource::allocWithParams();
  uint64_t v30 = this->OSObject::OSMetaClassBase::__vftable;
  if (!this[1].OSObject::OSObjectInterface::__vftable[390].init)
  {
    if (((uint64_t (*)(IOService *))v30[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        int8x8_t v90 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v90, "[dk] %s@%d: Unable to create ChanInfoTimer timer\n", "start", 2579);
      }
    }
    unsigned int v7 = this;
    uint64_t v8 = 2;
    uint64_t v9 = 2580;
    goto LABEL_14;
  }
  ((void (*)(IOService *))v30[1].Dispatch)(this);
  this[1].OSObject::OSObjectInterface::__vftable[392].free  = (void (__cdecl *)(OSObjectInterface *__hidden))IO80211TimerSource::allocWithParams();
  uint64_t v31 = this[1].OSObject::OSObjectInterface::__vftable;
  if (!v31[392].free)
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        char v92 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v92, "[dk] %s@%d: Unable to create disableHostCountryCode timer\n", "start", 2588);
      }
    }
    unsigned int v7 = this;
    uint64_t v8 = 2;
    uint64_t v9 = 2589;
    goto LABEL_14;
  }
  this[1].OSObject::OSObjectInterface::__vftable[338].free  = (void (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANCommander::withConfig((AppleBCMWLANCommander *)this, (AppleBCMWLANCore *)v31[337].free, (AppleBCMWLANBusInterface *)0x90);
  uint64_t v32 = this->OSObject::OSMetaClassBase::__vftable;
  if (!this[1].OSObject::OSObjectInterface::__vftable[338].free)
  {
    if (((uint64_t (*)(IOService *))v32[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        char v94 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v94, "[dk] %s@%d: Unable to create Cmd manager object!\n", "start", 2597);
      }
    }
    unsigned int v7 = this;
    uint64_t v8 = 2;
    uint64_t v9 = 2598;
    goto LABEL_14;
  }
  uint64_t v33 = ((uint64_t (*)(IOService *))v32[1].Dispatch)(this);
  (*(void (**)(uint64_t, void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)v33 + 64))(v33, this[1].OSObject::OSObjectInterface::__vftable[338].free);
  this[1].OSObject::OSObjectInterface::__vftable[2].free  = (void (__cdecl *)(OSObjectInterface *__hidden))mach_continuous_time();
  LODWORD(this[1].OSObject::OSObjectInterface::__vftable[3].init)  = 0;
  HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[3].init)  = 0;
  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[1].Dispatch)(this);
  this[1].OSObject::OSObjectInterface::__vftable[390].free  = (void (__cdecl *)(OSObjectInterface *__hidden))IO80211TimerSource::allocWithParams();
  uint64_t v34 = this->OSObject::OSMetaClassBase::__vftable;
  if (!this[1].OSObject::OSObjectInterface::__vftable[390].free)
  {
    if (((uint64_t (*)(IOService *))v34[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v95 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v95, "[dk] %s@%d: Unable to create ivars->fStatsReportTimer timer\n", "start", 2622);
      }
    }
    unsigned int v7 = this;
    uint64_t v8 = 2;
    uint64_t v9 = 2623;
    goto LABEL_14;
  }
  ((void (*)(IOService *))v34[1].Dispatch)(this);
  this[1].OSObject::OSObjectInterface::__vftable[391].init  = (BOOL (__cdecl *)(OSObjectInterface *__hidden))IO80211TimerSource::allocWithParams();
  int v35 = this[1].OSObject::OSObjectInterface::__vftable;
  if (!v35[391].init)
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v96 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v96, "[dk] %s@%d: Unable to create ivars->fTxDutyCycleReportTimer timer\n", "start", 2632);
      }
    }
    unsigned int v7 = this;
    uint64_t v8 = 2;
    uint64_t v9 = 2633;
    goto LABEL_14;
  }
  if (LOBYTE(v35[281].init))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[1].Dispatch)(this);
    this[1].OSObject::OSObjectInterface::__vftable[391].free  = (void (__cdecl *)(OSObjectInterface *__hidden))IO80211TimerSource::allocWithParams();
    uint64_t v36 = this->OSObject::OSMetaClassBase::__vftable;
    if (!this[1].OSObject::OSObjectInterface::__vftable[391].free)
    {
      if (((uint64_t (*)(IOService *))v36[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v97 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v97, "[dk] %s@%d: Unable to create ivars->fDynSARDetailSlice0Timer timer\n", "start", 2642);
        }
      }
      unsigned int v7 = this;
      uint64_t v8 = 2;
      uint64_t v9 = 2643;
      goto LABEL_14;
    }
    ((void (*)(IOService *))v36[1].Dispatch)(this);
    this[1].OSObject::OSObjectInterface::__vftable[392].init  = (BOOL (__cdecl *)(OSObjectInterface *__hidden))IO80211TimerSource::allocWithParams();
    int v35 = this[1].OSObject::OSObjectInterface::__vftable;
    if (!v35[392].init)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          long long v98 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v98, "[dk] %s@%d: Unable to create ivars->fDynSARDetailSlice1Timer timer\n", "start", 2651);
        }
      }
      unsigned int v7 = this;
      uint64_t v8 = 2;
      uint64_t v9 = 2652;
      goto LABEL_14;
    }
  }
  LOBYTE(v35[1862].init)  = 0;
  LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[1862].init)  = checkPropertyExists((IOService *)this[1].OSObject::OSObjectInterface::__vftable[337].free, "wlan.audio.mic.protect.enabled", 1uLL, "IOService");
  IOParseBootArgNumber("wlan.audio.enable", &this[1].OSObject::OSObjectInterface::__vftable[1862], 1);
  uint64_t v37 = this[1].OSObject::OSObjectInterface::__vftable;
  if (LOBYTE(v37[1862].init))
  {
    v113[0]  = 0;
    if (checkAcquireDataPropertyNotEmpty((IOService *)v37[337].free, "audio-protection-driver", v113, 0, 1uLL, "IOService"))
    {
      if (OSData::getBytesNoCopy(v113[0]))
      {
        uint64_t BytesNoCopy = (const char *)OSData::getBytesNoCopy(v113[0]);
        unint64_t v39 = (AppleBCMWLANCore *)OSString::withCString(BytesNoCopy);
        if (v39)
        {
          unint64_t v41 = v39;
          this[1].OSObject::OSObjectInterface::__vftable[1861].free  = (void (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANAudioProtector::withDriver((AppleBCMWLANAudioProtector *)this, v39, v40);
          (*(void (**)(AppleBCMWLANCore *))(*(void *)v41 + 16))(v41);
          uint64_t v42 = (uint64_t)this[1].OSObject::OSObjectInterface::__vftable[1861].free;
          if (!v42)
          {
            if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog())
              {
                unsigned int v101 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                CCLogStream::logAlert(v101, "[dk] %s@%d: Unable to create Audio Protector object!\n", "start", 2673);
              }
            }
            unsigned int v7 = this;
            uint64_t v8 = 2;
            uint64_t v9 = 2674;
            goto LABEL_14;
          }
          AppleBCMWLANAudioProtector::configureAudioMicProtect(v42, 1);
          uint64_t v43 = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[1].Dispatch)(this);
          (*(void (**)(uint64_t, void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)v43 + 64))(v43, this[1].OSObject::OSObjectInterface::__vftable[1861].free);
        }
      }
      if (v113[0]) {
        ((void (*)(OSData *))v113[0]->release)(v113[0]);
      }
    }
  }
  this[1].OSObject::OSObjectInterface::__vftable[339].free  = (void (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANScanAdapter::withDriverAndCallBack((uint64_t)this, 0, 0);
  if (!this[1].OSObject::OSObjectInterface::__vftable[339].free)
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v65 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v65, "[dk] %s@%d: Unable to create scanAdapter\n");
      }
    }
    return 0;
  }
  this[1].OSObject::OSObjectInterface::__vftable[2240].init  = (BOOL (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANSensingAdapter::withDriver((AppleBCMWLANSensingAdapter *)this, v44);
  if (!this[1].OSObject::OSObjectInterface::__vftable[2240].init)
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        int v66 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v66, "[dk] %s@%d: Unable to create fSensingAdapter\n");
      }
    }
    return 0;
  }
  this[1].OSObject::OSObjectInterface::__vftable[2241].init  = (BOOL (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANNearbyDeviceDiscoveryAdapter::withDriver((AppleBCMWLANNearbyDeviceDiscoveryAdapter *)this, v45);
  uint64_t v47 = this[1].OSObject::OSObjectInterface::__vftable;
  if (!v47[2241].init)
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        int v68 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v68, "[dk] %s@%d: Unable to create fNDDAdapter\n");
      }
    }
    return 0;
  }
  this[1].OSObject::OSObjectInterface::__vftable[341].init  = (BOOL (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANLeakyApParser::withLogger((AppleBCMWLANLeakyApParser *)v47[885].init, v46);
  if (!this[1].OSObject::OSObjectInterface::__vftable[341].init)
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        int v99 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v99, "[dk] %s@%d: Unable to create LeakyApParser object!\n", "start", 2719);
      }
    }
    AppleBCMWLANCore::stopAndFreeResources((AppleBCMWLANCore *)this);
    unsigned int v7 = this;
    uint64_t v8 = 2;
    uint64_t v9 = 2721;
    goto LABEL_14;
  }
  this[1].OSObject::OSObjectInterface::__vftable[341].free  = (void (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANTimeKeeper::withDriver((AppleBCMWLANTimeKeeper *)this, v48);
  uint64_t v49 = this[1].OSObject::OSObjectInterface::__vftable;
  if (!v49[341].free)
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        int v100 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v100, "[dk] %s@%d: Unable to create TimeKeeper object!\n", "start", 2727);
      }
    }
    AppleBCMWLANCore::stopAndFreeResources((AppleBCMWLANCore *)this);
    unsigned int v7 = this;
    uint64_t v8 = 2;
    uint64_t v9 = 2729;
    goto LABEL_14;
  }
  LODWORD(v49[49].free)  = 0;
  v49[49].init  = 0;
  HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[2246].free)  = 0;
  BYTE4(this[1].OSObject::OSObjectInterface::__vftable[49].free)  = 1;
  BOOL v50 = IOParseBootArgNumber("wlan.sac.enable", (char *)&this[1].OSObject::OSObjectInterface::__vftable[49].free + 4, 1);
  uint64_t v51 = this[1].OSObject::OSObjectInterface::__vftable;
  if (v50 && !BYTE4(v51[49].free))
  {
    io80211_os_log();
    uint64_t v51 = this[1].OSObject::OSObjectInterface::__vftable;
  }
  v51[1133].init  = (BOOL (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANCore::clearSacFreqGated;
  this[1].OSObject::OSObjectInterface::__vftable[1133].free  = (void (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANCore::addSacFreqGated;
  this[1].OSObject::OSObjectInterface::__vftable[1134].init  = (BOOL (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANCore::removeSacFreqGated;
  this[1].OSObject::OSObjectInterface::__vftable[342].free  = (void (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANGASAdapter::withDriver((const OSMetaClass *(__cdecl *)(const OSMetaClassBase *__hidden))this);
  uint64_t v52 = this[1].OSObject::OSObjectInterface::__vftable;
  if (!v52[342].free)
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        v102  = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v102, "[dk] %s@%d: Unable to create GAS Adapter object!\n", "start", 2760);
      }
    }
    AppleBCMWLANCore::stopAndFreeResources((AppleBCMWLANCore *)this);
    unsigned int v7 = this;
    uint64_t v8 = 2;
    uint64_t v9 = 2762;
    goto LABEL_14;
  }
  LODWORD(v52[593].init)  = 2;
  v113[0]  = 0;
  if (checkAcquireDataPropertyNotEmpty((IOService *)this[1].OSObject::OSObjectInterface::__vftable[337].free, "wlan.scanalg", v113, 4uLL, 1uLL, "IOService"))
  {
    uint64_t v53 = this[1].OSObject::OSObjectInterface::__vftable;
    LODWORD(v53[593].init)  = *(_DWORD *)OSData::getBytesNoCopy(v113[0], 0, 4uLL);
    if (v113[0])
    {
      ((void (*)(OSData *))v113[0]->release)(v113[0]);
      v113[0]  = 0;
    }
  }
  IOParseBootArgNumber("wlan.scanalg", &this[1].OSObject::OSObjectInterface::__vftable[593], 4);
  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[1].Dispatch)(this);
  this[1].OSObject::OSObjectInterface::__vftable[393].init  = (BOOL (__cdecl *)(OSObjectInterface *__hidden))IO80211TimerSource::allocWithParams();
  uint64_t v54 = this[1].OSObject::OSObjectInterface::__vftable;
  if (!v54[393].init)
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v83 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v83, "[dk] %s@%d: Unable to create Periodic RNG re seed timer\n");
      }
    }
    return 0;
  }
  HIDWORD(v54[1231].free)  = 0;
  BYTE4(this[1].OSObject::OSObjectInterface::__vftable[422].free)  = 0;
  BYTE2(this[1].OSObject::OSObjectInterface::__vftable[421].init)  = 1;
  if ((*(unsigned int (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[337].free
                                                                                     + 368))(this[1].OSObject::OSObjectInterface::__vftable[337].free))
  {
    unsigned int v55 = (*(uint64_t (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[337].free
                                                                                   + 368))(this[1].OSObject::OSObjectInterface::__vftable[337].free);
    OSNumberPtr v56 = OSNumber::withNumber(v55, 0x20uLL);
    setPropertyHelper(this, "ChipSet", v56);
    if (v56) {
      ((void (*)(OSNumberPtr))v56->release)(v56);
    }
  }
  setPropertyHelper(this, "AppleBCMWLAN.BuildTag", kAppleBCMWLANBuildTag[0]);
  setPropertyHelper(this, "AppleBCMWLAN.BuildTagGit", "\"AppleBCMWLANV3_driverkit-1430.34\"");
  setPropertyHelper(this, "AppleBCMWLAN.BuildDate", kAppleBCMWLANBuildDate[0]);
  setPropertyHelper(this, "AppleBCMWLAN.BuildType", "release");
  isVerboseDebugLoggingAllowed  = AppleBCMWLAN_isVerboseDebugLoggingAllowed();
  setPropertyHelper(this, "Debuggable - isVerboseDebugLoggingAllowed", isVerboseDebugLoggingAllowed);
  isSoCRAMCaptureAllowed  = AppleBCMWLAN_isSoCRAMCaptureAllowed();
  setPropertyHelper(this, "Debuggable - isSoCRAMCaptureAllowed", isSoCRAMCaptureAllowed);
  isDebugCommandActionAllowed  = AppleBCMWLAN_isDebugCommandActionAllowed();
  setPropertyHelper(this, "Debuggable - isDebugCommandActionAllowed", isDebugCommandActionAllowed);
  int v60 = AppleBCMWLANCore::populateRequestedFiles(this);
  if (v60 == -469792995)
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v103 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v103, "[dk] %s@%d:Invalid remote FEM information in IO registry\n", "start", 2851);
      }
    }
    unsigned int v7 = this;
    uint64_t v8 = 10;
    uint64_t v9 = 2852;
    goto LABEL_14;
  }
  if (v60)
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        v104  = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v104, "[dk] %s@%d:failed to populate requested files\n", "start", 2855);
      }
    }
    unsigned int v7 = this;
    uint64_t v8 = 2;
    uint64_t v9 = 2856;
    goto LABEL_14;
  }
  int v61 = AppleBCMWLANCore::driverkitAllocSkywalkBusResources((AppleBCMWLANCore *)this);
  int v62 = this->OSObject::OSMetaClassBase::__vftable;
  if (v61)
  {
    if (((uint64_t (*)(IOService *))v62[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v105 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v105, "[dk] %s@%d:driverkitAllocSkywalkBusResources() failed\n", "start", 2824);
      }
    }
    unsigned int v7 = this;
    uint64_t v8 = 11;
    uint64_t v9 = 2825;
    goto LABEL_14;
  }
  ((void (*)(IOService *))v62[1].Dispatch)(this);
  this[1].OSObject::OSObjectInterface::__vftable[276].free  = (void (__cdecl *)(OSObjectInterface *__hidden))IO80211TimerSource::allocWithParams();
  long long v86 = this[1].OSObject::OSObjectInterface::__vftable[276].free;
  if (!v86)
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        long long v91 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v91, "[dk] %s@%d: Unable to create adjust busy timer\n");
      }
    }
    return 0;
  }
  (*(void (**)(void (__cdecl *)(OSObjectInterface *__hidden), uint64_t))(*(void *)v86 + 120))(v86, 40000);
  IOService::AdjustBusy(this, 1, 0);
  LODWORD(this[1].OSObject::OSObjectInterface::__vftable[276].init)  = 1;
  LODWORD(v113[0])  = 0;
  IOService::GetBusyState(this, (unsigned int *)v113, 0);
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      long long v106 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logAlert(v106, "[dk] %s@%d:AdjustBusy(+1) busystate %u, fAdjustBusyCnt %u\n", "start", 2840, LODWORD(v113[0]), LODWORD(this[1].OSObject::OSObjectInterface::__vftable[276].init));
    }
  }
  io80211_os_log();
  this[1].OSObject::OSObjectInterface::__vftable[275].init  = (BOOL (__cdecl *)(OSObjectInterface *__hidden))mach_continuous_time();
  IOService::RegisterService(this, 0);
  IO80211Controller::PublishReporterProxyService((IO80211Controller *)this);
  AppleBCMWLANCore::initDebugInfo((AppleBCMWLANCore *)this);
  setPropertyHelper(this, "FirmwareLoaded", 0);
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      long long v107 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      int v108 = checkPropertyTrue(this, "FirmwareLoaded", 0, "IOService");
      CCLogStream::logAlert(v107, "[dk] %s@%d:Checking firmware loaded[%d]\n", "start", 2866, v108);
    }
  }
  BYTE2(this[1].OSObject::OSObjectInterface::__vftable[1134].free)  = 0;
  uint64_t v87 = (*(uint64_t (**)(void (__cdecl *)(OSObjectInterface *__hidden), IOService *, BOOL (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[337].free + 120))(this[1].OSObject::OSObjectInterface::__vftable[337].free, this, this[1].OSObject::OSObjectInterface::__vftable[348].init);
  uint64_t v88 = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
  if (v87)
  {
    if (v88)
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        unsigned __int8 v109 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        long long v110 = (const char *)getClassNameHelper((OSObject *)this[1].OSObject::OSObjectInterface::__vftable[337].free);
        unint64_t v111 = this[1].OSObject::OSObjectInterface::__vftable[337].free;
        unsigned __int8 v112 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v87);
        CCLogStream::logAlert(v109, "[dk] %s@%d:Failed to register with %s (%p), %s\n", "start", 2894, v110, v111, v112);
      }
    }
    AppleBCMWLANCore::stopAndFreeResources((AppleBCMWLANCore *)this);
    unsigned int v7 = this;
    uint64_t v8 = 2;
    uint64_t v9 = 2896;
    goto LABEL_14;
  }
  if (!v88) {
    return 1;
  }
  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
  uint64_t v11 = 1;
  if (CCLogStream::shouldLog())
  {
    uint64_t v93 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    CCLogStream::logAlert(v93, "[dk] %s@%d: WiFi driver started\n", "start", 2900);
  }
  return v11;
}

uint64_t AppleBCMWLANCore::signalDriverReady(AppleBCMWLANCore *this)
{
  int v2 = *(_DWORD *)(*((void *)this + 9) + 10388);
  OSStringPtr v3 = OSString::withCString("CoreWiFiDriverReadyKey");
  if ((v2 & 0x30) != 0) {
    uint64_t v4 = "false";
  }
  else {
    uint64_t v4 = "true";
  }
  OSStringPtr v5 = OSString::withCString(v4);
  OSStringPtr v6 = v5;
  if (v3 && v5)
  {
    uint64_t v7 = (*(uint64_t (**)(void))(*(void *)(*(void *)(*((void *)this + 9) + 5400) + 48) + 424))();
LABEL_11:
    ((void (*)(OSStringPtr))v3->release)(v3);
    uint64_t v8 = v7;
    goto LABEL_12;
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v10, "[dk] %s@%d:Failed to create key/value pair signaling state of Core WiFi driver\n", "signalDriverReady", 61337);
    }
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  if (v3) {
    goto LABEL_11;
  }
LABEL_12:
  if (v6) {
    ((void (*)(OSStringPtr))v6->release)(v6);
  }
  return v8;
}

uint64_t AppleBCMWLANCore::watchdog(IOService *this, CCFaultReport *a2)
{
  if (a2)
  {
    BOOL v4 = (*(unsigned int (**)(CCFaultReport *))(*(void *)a2 + 128))(a2) == -469794018;
    int v5 = (*(uint64_t (**)(CCFaultReport *))(*(void *)a2 + 168))(a2);
  }
  else
  {
    BOOL v4 = 0;
    int v5 = 0;
  }
  unint64_t v71 = 0;
  LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[2214].init)  = 0;
  BYTE1(this[1].OSObject::OSObjectInterface::__vftable[2220].free)  = 0;
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  free  = (uint64_t)this[1].OSObject::OSObjectInterface::__vftable[337].free;
  if (free) {
    AppleBCMWLANBusInterface::setBootCheckPointAnchorTime(free, v71, 2);
  }
  io80211_os_log();
  if (!a2)
  {
    kdebug_trace();
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        char v45 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v45, "[dk] %s@%d:report cannot be identified, do not reset commander pool\n");
      }
    }
    goto LABEL_15;
  }
  (*(void (**)(CCFaultReport *))(*(void *)a2 + 128))(a2);
  kdebug_trace();
  if ((*(unsigned int (**)(CCFaultReport *))(*(void *)a2 + 128))(a2) == -469794303
    || (*(unsigned int (**)(CCFaultReport *))(*(void *)a2 + 128))(a2) == -469794295)
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:firmware trap, do not reset commander pool\n");
      }
    }
LABEL_15:
    LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[2214].init)  = 1;
  }
  int v70 = 0;
  uint64_t v8 = IOMallocZeroData();
  uint64_t v9 = v8;
  if (v8) {
    int v70 = (void *)v8;
  }
  (*(void (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[337].free
                                                                        + 400))(this[1].OSObject::OSObjectInterface::__vftable[337].free);
  (*(void (**)(void (__cdecl *)(OSObjectInterface *__hidden), void))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[337].free
                                                                                + 616))(this[1].OSObject::OSObjectInterface::__vftable[337].free, 0);
  if (!v4)
  {
    uint64_t v10 = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (a2)
    {
      if (v10)
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v69 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          uint64_t v11 = (void *)current_thread();
          thread_tid(v11);
          uint64_t v12 = (const OSString *)(*(uint64_t (**)(CCFaultReport *))(*(void *)a2 + 56))(a2);
          OSString::getCStringNoCopy(v12);
          (*(uint64_t (**)(CCFaultReport *))(*(void *)a2 + 72))(a2);
          (*(void (**)(CCFaultReport *))(*(void *)a2 + 72))(a2);
          CCLogStream::logAlert(v69, "[dk] %s@%d: <%llx> state 0x%lX %s %llu.%llu\n", "watchdog");
        }
      }
    }
    else if (v10)
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        char v46 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t v47 = (void *)current_thread();
        thread_tid(v47);
        CCLogStream::logAlert(v46, "[dk] %s@%d: <%llx> state 0x%lX\n");
      }
    }
  }
  uint64_t v13 = this[1].OSObject::OSObjectInterface::__vftable;
  int init_high = HIDWORD(v13[649].init);
  if ((init_high & 0x20) != 0)
  {
    uint64_t v15 = 3758097111;
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v17 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v17, "[dk] %s@%d:Driver Uninitialized\n", "watchdog", 45750);
      }
    }
    goto LABEL_49;
  }
  if ((init_high & 0x10) != 0)
  {
    uint64_t v15 = 3758097112;
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v18 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v18, "[dk] %s@%d: Chip initializing, ivars->fStateFlags 0x%lX: watchdog bail\n", "watchdog", 45755, HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[649].init));
        uint64_t v15 = 3758097112;
      }
    }
    goto LABEL_49;
  }
  if ((init_high & 0x80) != 0)
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v48 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logEmergency(v48, "[dk] %s@%d:Watchdogged from watchdog, call halt then bail. It is possible other WD is stuck waiting on commander\n", "watchdog", 45760);
      }
    }
    AppleBCMWLANCore::halt((AppleBCMWLANCore *)this);
    uint64_t v15 = 3758097093;
    goto LABEL_49;
  }
  if ((init_high & 0x10002000) == 0)
  {
    if (((*(uint64_t (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)v13[337].free + 168))(v13[337].free) & 1) != 0
      || (uint64_t v23 = this[1].OSObject::OSObjectInterface::__vftable, (BYTE4(v23[649].init) & 5) != 0)
      && (*(unsigned int (**)(uint64_t, uint64_t))(*((void *)v23[337].free + 6) + 192))((uint64_t)v23[337].free + 48, v20)&& !(*(unsigned int (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[337].free+ 64))(this[1].OSObject::OSObjectInterface::__vftable[337].free))
    {
      atomic_fetch_or((atomic_uint *volatile)((char *)&this[1].OSObject::OSObjectInterface::__vftable[649].init + 4), 0x80u);
      LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[1099].init)  = 1;
      int v21 = v70;
      if (v70)
      {
        v70[22]  = 0;
        v21[9]  = 0u;
        v21[10]  = 0u;
        v21[7]  = 0u;
        v21[8]  = 0u;
        v21[5]  = 0u;
        v21[6]  = 0u;
        v21[3]  = 0u;
        v21[4]  = 0u;
        v21[1]  = 0u;
        void v21[2] = 0u;
        _OWORD *v21 = 0u;
        int v22 = a2 ? (*(uint64_t (**)(CCFaultReport *))(*(void *)a2 + 128))(a2) : 0;
        int v24 = this[1].OSObject::OSObjectInterface::__vftable;
        int v25 = v5 == HIDWORD(v24->free) ? 1 : BYTE5(v24[649].init) >> 7;
        *(_DWORD *)int v21 = 3;
        *((_DWORD *)v21 + 1)  = v25;
        *((_DWORD *)v21 + 4)  = -528336895;
        *((_DWORD *)v21 + 5)  = v22;
        *((_DWORD *)v21 + 6)  = 0;
        *((void *)v21 + 1)  = 0;
        if (this[1].OSObject::OSObjectInterface::__vftable[706].free)
        {
          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v57 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              CCLogStream::logAlert(v57, "[dk] %s@%d: posting APPLE80211_M_DRIVER_AVAILABLE, available[%u] reason[0x%08x] sub_reason[0x%08x] minor_reason[0x%08x]\n", "watchdog", 45809, *((_DWORD *)v21 + 2), *((_DWORD *)v21 + 4), *((_DWORD *)v21 + 5), *((_DWORD *)v21 + 6));
            }
          }
          IO80211Controller::postMessage((IO80211Controller *)this, (IO80211SkywalkInterface *)this[1].OSObject::OSObjectInterface::__vftable[706].free, 0x37u, v21, 0xB8uLL, 1);
        }
      }
      HIDWORD(this[1].free)  = v5;
      IO80211BssManager::setLastBSSRssi((IO80211BssManager *)this[1].OSObject::OSObjectInterface::__vftable[340].init);
      uint64_t v26 = AppleBCMWLANCore::bootChipImage(this, (const AppleBCMWLANChipImage *)this[1].OSObject::OSObjectInterface::__vftable[76].init);
      if (v26)
      {
        uint64_t v15 = v26;
        if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
        {
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (CCLogStream::shouldLog())
          {
            unsigned int v55 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            OSNumberPtr v56 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v15);
            CCLogStream::logEmergency(v55, "[dk] %s@%d: WATCHDOG FAILED: Unable to bootChipImage %s.\n", "watchdog", 45820, v56);
          }
        }
        atomic_fetch_and((atomic_uint *volatile)((char *)&this[1].OSObject::OSObjectInterface::__vftable[649].init + 4), 0xFFFFFF7F);
        atomic_fetch_or((atomic_uint *volatile)((char *)&this[1].OSObject::OSObjectInterface::__vftable[649].init + 4), 0x8000u);
        AppleBCMWLANCore::halt((AppleBCMWLANCore *)this);
        uint64_t v16 = v70;
        if (v70)
        {
          *(_OWORD *)(v70 + 21)  = 0u;
          *(_OWORD *)(v16 + 19)  = 0u;
          *(_OWORD *)(v16 + 17)  = 0u;
          *(_OWORD *)(v16 + 15)  = 0u;
          *(_OWORD *)(v16 + 1AppleBCMWLANCommandMonitor::free(this - 3) = 0u;
          *(_OWORD *)(v16 + 11)  = 0u;
          *(_OWORD *)(v16 + 9)  = 0u;
          *(_OWORD *)(v16 + 7)  = 0u;
          *(_OWORD *)(v16 + 5)  = 0u;
          *(_OWORD *)(v16 + AppleBCMWLANCommandMonitor::free(this - 3) = 0u;
          _DWORD v16[2] = 3766630404;
          *(_OWORD *)uint64_t v16 = xmmword_10036E970;
          if (this[1].OSObject::OSObjectInterface::__vftable[706].free)
          {
            if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog())
              {
                uint64_t v27 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                CCLogStream::logAlert(v27, "[dk] %s@%d: posting APPLE80211_M_DRIVER_AVAILABLE, available[%u] reason[0x%08x] sub_reason[0x%08x] minor_reason[0x%08x]\n", "watchdog", 45835, *((_DWORD *)v16 + 2), *((_DWORD *)v16 + 4), *((_DWORD *)v16 + 5), *((_DWORD *)v16 + 6));
              }
            }
LABEL_38:
            IO80211Controller::postMessage((IO80211Controller *)this, (IO80211SkywalkInterface *)this[1].OSObject::OSObjectInterface::__vftable[706].free, 0x37u, v16, 0xB8uLL, 1);
            goto LABEL_49;
          }
        }
        goto LABEL_49;
      }
      uint64_t v28 = this[1].OSObject::OSObjectInterface::__vftable;
      unsigned int v29 = HIDWORD(v28[649].init);
      if ((v29 & 1) != 0 && ((free_high  = HIDWORD(v28[1231].free), free_high == 4) || free_high == 1))
      {
        if ((v29 & 4) != 0)
        {
          int v31 = (v29 >> 2) & 1;
LABEL_89:
          atomic_fetch_and((atomic_uint *volatile)((char *)&v28[649].init + 4), 0xFFFFEFFF);
          goto LABEL_90;
        }
        AppleBCMWLANCore::powerOn(this);
      }
      else
      {
        if ((v29 & 0x1000) == 0 || HIDWORD(v28[1231].free))
        {
          int v31 = 0;
LABEL_90:
          HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[337].init)  = 0;
          atomic_fetch_and((atomic_uint *volatile)((char *)&this[1].OSObject::OSObjectInterface::__vftable[649].init + 4), 0xFFFF7F7F);
          uint64_t v32 = this[1].OSObject::OSObjectInterface::__vftable;
          if ((BYTE5(v32[649].init) & 4) != 0)
          {
            AppleBCMWLANCore::signalDriverEvent((uint64_t)this, 0);
            atomic_fetch_and((atomic_uint *volatile)((char *)&this[1].OSObject::OSObjectInterface::__vftable[649].init + 4), 0xFFFFFBFF);
            uint64_t v32 = this[1].OSObject::OSObjectInterface::__vftable;
          }
          init  = (AppleBCMWLANProximityInterface *)v32[707].init;
          if (init)
          {
            AppleBCMWLANProximityInterface::resetInterface(init);
            uint64_t v32 = this[1].OSObject::OSObjectInterface::__vftable;
          }
          uint64_t v34 = (AppleBCMWLANNANInterface *)v32[1862].free;
          if (v34)
          {
            AppleBCMWLANNANInterface::resetInterface(v34);
            int v35 = (AppleBCMWLANNANDataInterface *)this[1].OSObject::OSObjectInterface::__vftable[1863].init;
            if (v35) {
              AppleBCMWLANNANDataInterface::resetInterface(v35);
            }
          }
          AppleBCMWLANCore::resetInterfacesComplete((AppleBCMWLANCore *)this);
          BYTE4(this[1].OSObject::OSObjectInterface::__vftable[422].init)  = 88;
          BYTE5(this[1].OSObject::OSObjectInterface::__vftable[422].init)  = 90;
          BYTE6(this[1].OSObject::OSObjectInterface::__vftable[422].init)  = 0;
          uint64_t v36 = (unsigned int *)v70;
          if (v70) {
            int v37 = v31;
          }
          else {
            int v37 = 0;
          }
          if (v37 != 1) {
            goto LABEL_135;
          }
          v70[22]  = 0;
          *((_OWORD *)v36 + 9)  = 0u;
          *((_OWORD *)v36 + 10)  = 0u;
          *((_OWORD *)v36 + 7)  = 0u;
          *((_OWORD *)v36 + 8)  = 0u;
          *((_OWORD *)v36 + 5)  = 0u;
          *((_OWORD *)v36 + 6)  = 0u;
          *((_OWORD *)v36 + AppleBCMWLANCommandMonitor::free(this - 3) = 0u;
          *((_OWORD *)v36 + 4)  = 0u;
          *((_OWORD *)v36 + 1)  = 0u;
          *((_OWORD *)v36 + 2)  = 0u;
          v36[6]  = 0;
          *(_OWORD *)uint64_t v36 = xmmword_10036E980;
          if (a2)
          {
            void v36[4] = (*(uint64_t (**)(CCFaultReport *))(*(void *)a2 + 128))(a2);
            v36[36]  = (*(uint64_t (**)(CCFaultReport *))(*(void *)a2 + 136))(a2);
            *((void *)v36 + 12)  = CCFaultReport::getProgramCounter(a2);
            *((void *)v36 + 1AppleBCMWLANCommandMonitor::free(this - 3) = CCFaultReport::getLinkRegister(a2);
            v36[3]  = (*(uint64_t (**)(CCFaultReport *))(*(void *)a2 + 168))(a2);
            uint64_t v38 = (const char *)(*(uint64_t (**)(CCFaultReport *))(*(void *)a2 + 144))(a2);
            strlcpy((char *)v36 + 112, v38, 0x20uLL);
            unint64_t v39 = (const char *)(*(uint64_t (**)(CCFaultReport *))(*(void *)a2 + 152))(a2);
            strlcpy((char *)v36 + 148, v39, 0x20uLL);
            uint64_t v40 = (const char *)(*(uint64_t (**)(CCFaultReport *))(*(void *)a2 + 160))(a2);
            strlcpy((char *)v36 + 28, v40, 0x40uLL);
            if (!v4)
            {
              if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
              {
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if (CCLogStream::shouldLog())
                {
                  int v62 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  CCLogStream::logAlert(v62, "[dk] %s@%d: watchdog succeeded - sending driver available event\n", "watchdog", 45925);
                }
              }
              if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
              {
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if (CCLogStream::shouldLog())
                {
                  unsigned int v63 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  CCLogStream::logInfo(v63, "[dk] %s@%d: PC: %llx, LR: %llx\n", "watchdog", 45926, *((void *)v36 + 12), *((void *)v36 + 13));
                }
              }
            }
            unsigned int v41 = v36[4];
            switch(v41)
            {
              case 0xE3FF8201:
                goto LABEL_112;
              case 0xE3FF8901:
                void v36[4] = -528342010;
                if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                {
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  if (CCLogStream::shouldLog())
                  {
                    unint64_t v67 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    JoinTimeoutSequenceNum  = AppleBCMWLANJoinAdapter::getJoinTimeoutSequenceNum((AppleBCMWLANJoinAdapter *)this[1].OSObject::OSObjectInterface::__vftable[339].init);
                    CCLogStream::logInfo(v67, "[dk] %s@%d:fJoinTimeoutSequenceNum %d\n", "watchdog", 45946, JoinTimeoutSequenceNum);
                  }
                }
                v36[45]  = AppleBCMWLANJoinAdapter::getJoinTimeoutSequenceNum((AppleBCMWLANJoinAdapter *)this[1].OSObject::OSObjectInterface::__vftable[339].init);
                if (AppleBCMWLANJoinAdapter::hasJoinTimeoutBlob((AppleBCMWLANJoinAdapter *)this[1].OSObject::OSObjectInterface::__vftable[339].init))
                {
                  v36[1] |= 8u;
                  AppleBCMWLANJoinAdapter::clearJoinTimeoutBlobAvialable((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[339].init);
                }
                break;
              case 0xE3FF8209:
LABEL_112:
                *((int32x2_t *)v36 + 2)  = vdup_n_s32(0xE0823806);
                if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                {
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  if (CCLogStream::shouldLog())
                  {
                    int v64 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    int v66 = (*(uint64_t (**)(void (__cdecl *)(OSObjectInterface *__hidden), uint64_t))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[337].free + 568))(this[1].OSObject::OSObjectInterface::__vftable[337].free, v65);
                    CCLogStream::logInfo(v64, "[dk] %s@%d:ivars->fProvider->getTrapInfoSequenceNum %d\n", "watchdog", 45936, v66);
                  }
                }
                v36[45]  = (*(uint64_t (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[337].free + 568))(this[1].OSObject::OSObjectInterface::__vftable[337].free);
                if ((*(unsigned int (**)(void (__cdecl *)(OSObjectInterface *__hidden), uint64_t))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[337].free + 560))(this[1].OSObject::OSObjectInterface::__vftable[337].free, v42))
                {
                  v36[1] |= 4u;
                }
                if ((*(unsigned int (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[337].free + 584))(this[1].OSObject::OSObjectInterface::__vftable[337].free)) {
                  v36[1] |= 0x10u;
                }
                break;
            }
          }
          if ((v36[4] & 0xFFFFC000) == 0xE3FF8000)
          {
            if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog())
              {
                int v60 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                int v61 = (const char *)((uint64_t (*)(IOService *, void))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v36[4]);
                CCLogStream::logAlert(v60, "[dk] %s@%d:Driver avail message reason shouldn't be vendor specific - %s\n", "watchdog", 45955, v61);
              }
            }
          }
          uint64_t v43 = this[1].OSObject::OSObjectInterface::__vftable;
          if (v43[706].free)
          {
            if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog())
              {
                uint64_t v59 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                CCLogStream::logAlert(v59, "[dk] %s@%d: posting APPLE80211_M_DRIVER_AVAILABLE, available[%u] reason[0x%08x] sub_reason[0x%08x] minor_reason[0x%08x]\n", "watchdog", 45967, v36[2], v36[4], v36[5], v36[6]);
              }
            }
            IO80211Controller::postMessage((IO80211Controller *)this, (IO80211SkywalkInterface *)this[1].OSObject::OSObjectInterface::__vftable[706].free, 0x37u, v36, 0xB8uLL, 1);
            mach_continuous_time();
            absolutetime_to_nanoseconds();
            io80211_os_log();
            uint64_t v43 = this[1].OSObject::OSObjectInterface::__vftable;
          }
          unsigned int v44 = (IO80211SkywalkInterface *)v43[707].init;
          if (v44) {
            IO80211Controller::postMessage((IO80211Controller *)this, v44, 0x37u, &v70, 8uLL, 1);
          }
LABEL_135:
          if (!v4)
          {
            if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog())
              {
                uint64_t v58 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                CCLogStream::logCrit(v58, "[dk] %s@%d: Succeeded\n", "watchdog", 45981);
              }
            }
          }
          LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[1934].init)  = 0;
          BYTE1(this[1].OSObject::OSObjectInterface::__vftable[1934].init)  = 0;
          (*(void (**)(void (__cdecl *)(OSObjectInterface *__hidden), uint64_t))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[337].free
                                                                                         + 352))(this[1].OSObject::OSObjectInterface::__vftable[337].free, 3);
          uint64_t v15 = 0;
          this[1].OSObject::OSObjectInterface::__vftable[1229].init  = 0;
          LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[1229].free)  = 0;
          goto LABEL_49;
        }
        AppleBCMWLANCore::powerOff(this, 0);
      }
      int v31 = 0;
      uint64_t v28 = this[1].OSObject::OSObjectInterface::__vftable;
      goto LABEL_89;
    }
  }
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v49 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      BOOL v50 = this[1].OSObject::OSObjectInterface::__vftable;
      uint64_t v51 = HIDWORD(v50[649].init);
      int v53 = (*(uint64_t (**)(uint64_t, uint64_t))(*((void *)v50[337].free + 6) + 192))((uint64_t)v50[337].free + 48, v52);
      CCLogStream::logAlert(v49, "[dk] %s@%d: WATCHDOG abort: Shutdown pending or Power Change In Progress. state 0x%lX Bus Power On %d \n", "watchdog", 45771, v51, v53);
    }
  }
  uint64_t v15 = 3766630404;
  atomic_fetch_or((atomic_uint *volatile)((char *)&this[1].OSObject::OSObjectInterface::__vftable[649].init + 4), 0x8000u);
  uint64_t v16 = v70;
  if (v70)
  {
    *int v70 = 3;
    *((_DWORD *)v16 + 2)  = 0;
    _DWORD v16[2] = 3766630404;
    *((_DWORD *)v16 + 6)  = HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[649].init);
    *((_DWORD *)v16 + AppleBCMWLANCommandMonitor::free(this - 3) = 0;
    if (this[1].OSObject::OSObjectInterface::__vftable[706].free)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v54 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v54, "[dk] %s@%d: posting APPLE80211_M_DRIVER_AVAILABLE, available[%u] reason[0x%08x] sub_reason[0x%08x] minor_reason[0x%08x]\n", "watchdog", 45783, *((_DWORD *)v16 + 2), *((_DWORD *)v16 + 4), *((_DWORD *)v16 + 5), *((_DWORD *)v16 + 6));
        }
      }
      goto LABEL_38;
    }
  }
LABEL_49:
  if (v9) {
    IOFreeData();
  }
  return v15;
}

void AppleBCMWLANCore::PanicForFault(uint64_t a1, uint64_t a2)
{
  int v2 = (const OSString *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
  CStringNoCopy  = OSString::getCStringNoCopy(v2);
  panic("%s", CStringNoCopy);
}

uint64_t AppleBCMWLANCore::prepareFRCallback(AppleBCMWLANCore *this, const CCFaultReport *a2)
{
  atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)this + 9) + 8), 1u, memory_order_relaxed);
  if (!a2) {
    return 3758097084;
  }
  int v4 = (*(uint64_t (**)(const CCFaultReport *))(*(void *)a2 + 88))(a2);
  unsigned int v5 = (*(uint64_t (**)(const CCFaultReport *))(*(void *)a2 + 128))(a2) + 469794029;
  if (v5 > 3 || v5 == 2)
  {
    if (v4)
    {
      uint64_t v8 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
      if (v8) {
        AppleBCMWLANCommander::delayQueueTimeouts(v8);
      }
    }
    if ((*(unsigned int (**)(const CCFaultReport *))(*(void *)a2 + 128))(a2) != -469793503
      && *(void *)(*((void *)this + 9) + 11304))
    {
      memset(v11, 0, 140);
      uint64_t v9 = (const char *)(*(uint64_t (**)(const CCFaultReport *))(*(void *)a2 + 160))(a2);
      if (v9) {
        strlcpy((char *)((unint64_t)v11 | 0xC), v9, 0x80uLL);
      }
      uint64_t v10 = *(IO80211SkywalkInterface **)(*((void *)this + 9) + 11304);
      if (v10) {
        IO80211Controller::postMessage(this, v10, 0x4Fu, v11, 0x8CuLL, 1);
      }
    }
  }
  else
  {
    uint64_t result = *(void *)(*((void *)this + 9) + 5416);
    if (!result) {
      return result;
    }
    AppleBCMWLANCommander::delayQueueTimeouts((AppleBCMWLANCommander *)result);
  }
  return 0;
}

uint64_t AppleBCMWLANCore::collectImmediateFaultDataCallback(IOService *this, CCFaultReport *a2)
{
  uint64_t v23 = 0;
  if (BYTE2(this[1].OSObject::OSObjectInterface::__vftable[2206].free))
  {
    if (((uint64_t (*)(IOService *, CCFaultReport *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this, a2))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        OSStringPtr v3 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v3, "[dk] %s@%d:Skip WDT logging\n", "collectImmediateFaultDataCallback", 54470);
      }
    }
  }
  else
  {
    if (a2) {
      (*(void (**)(CCFaultReport *))(*(void *)a2 + 128))(a2);
    }
    kdebug_trace();
    unsigned int v5 = (char *)IOMallocZeroData();
    if (v5)
    {
      AppleBCMWLANCore::captureDriverState(this, 0, v5);
      OSStringPtr v6 = OSString::withCString("CoreState.txt");
      OSStringPtr v7 = OSString::withCString(v5);
      (*(void (**)(CCFaultReport *, OSStringPtr, OSStringPtr))(*(void *)a2 + 192))(a2, v6, v7);
      uint64_t v8 = this[1].OSObject::OSObjectInterface::__vftable;
      if (v8[706].free)
      {
        bzero(v5, 0x8000uLL);
        (*(void (**)(void))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[706].free + 848))();
        OSStringPtr v9 = OSString::withCString("InterfaceState_skywalkinfra.txt");
        OSStringPtr v10 = OSString::withCString(v5);
        (*(void (**)(CCFaultReport *, OSStringPtr, OSStringPtr))(*(void *)a2 + 192))(a2, v9, v10);
        uint64_t v8 = this[1].OSObject::OSObjectInterface::__vftable;
      }
      if (v8[707].init)
      {
        bzero(v5, 0x8000uLL);
        (*(void (**)(void))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[707].init + 848))();
        OSStringPtr v11 = OSString::withCString("InterfaceState_prox.txt");
        OSStringPtr v12 = OSString::withCString(v5);
        (*(void (**)(CCFaultReport *, OSStringPtr, OSStringPtr))(*(void *)a2 + 192))(a2, v11, v12);
        uint64_t v8 = this[1].OSObject::OSObjectInterface::__vftable;
      }
      if (v8[1862].free)
      {
        bzero(v5, 0x8000uLL);
        (*(void (**)(void))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[1862].free + 848))();
        OSStringPtr v13 = OSString::withCString("InterfaceState_nan.txt");
        OSStringPtr v14 = OSString::withCString(v5);
        (*(void (**)(CCFaultReport *, OSStringPtr, OSStringPtr))(*(void *)a2 + 192))(a2, v13, v14);
        uint64_t v8 = this[1].OSObject::OSObjectInterface::__vftable;
      }
      if (v8[1863].init)
      {
        bzero(v5, 0x8000uLL);
        (*(void (**)(void))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[1863].init + 848))();
        OSStringPtr v15 = OSString::withCString("InterfaceState_ndi.txt");
        OSStringPtr v16 = OSString::withCString(v5);
        (*(void (**)(CCFaultReport *, OSStringPtr, OSStringPtr))(*(void *)a2 + 192))(a2, v15, v16);
        uint64_t v8 = this[1].OSObject::OSObjectInterface::__vftable;
      }
      if (v8[707].free)
      {
        bzero(v5, 0x8000uLL);
        (*(void (**)(void))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[707].free + 848))();
        OSStringPtr v17 = OSString::withCString("InterfaceState_apsta.txt");
        OSStringPtr v18 = OSString::withCString(v5);
        (*(void (**)(CCFaultReport *, OSStringPtr, OSStringPtr))(*(void *)a2 + 192))(a2, v17, v18);
        uint64_t v8 = this[1].OSObject::OSObjectInterface::__vftable;
      }
      if (v8[708].init)
      {
        bzero(v5, 0x8000uLL);
        (*(void (**)(void))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[708].init + 848))();
        OSStringPtr v19 = OSString::withCString("InterfaceState_llw.txt");
        OSStringPtr v20 = OSString::withCString(v5);
        (*(void (**)(CCFaultReport *, OSStringPtr, OSStringPtr))(*(void *)a2 + 192))(a2, v19, v20);
      }
    }
    AppleBCMWLANCore::captureDeviceInfo(this, &v23);
    OSStringPtr v21 = OSString::withCString("DeviceInfo.xml");
    (*(void (**)(CCFaultReport *, OSStringPtr, OSDictionary *))(*(void *)a2 + 192))(a2, v21, v23);
    if ((*(unsigned int (**)(CCFaultReport *))(*(void *)a2 + 128))(a2) == -469793519) {
      (*(void (**)(CCFaultReport *, void (__cdecl **)(OSObjectInterface *__hidden)))(*(void *)a2 + 184))(a2, &this[1].OSObject::OSObjectInterface::__vftable[1142].free);
    }
    (*(void (**)(CCFaultReport *))(*(void *)a2 + 128))(a2);
    kdebug_trace();
    if (v5) {
      IOFreeData();
    }
  }
  return 0;
}

uint64_t AppleBCMWLANCore::completeFaultReportCallback(AppleBCMWLANCore *this, const CCFaultReport *a2)
{
  if (a2)
  {
    (*(void (**)(const CCFaultReport *))(*(void *)a2 + 128))(a2);
    kdebug_trace();
    if (((*(uint64_t (**)(const CCFaultReport *))(*(void *)a2 + 88))(a2) & 1) == 0)
    {
      unsigned int v4 = *(_DWORD *)(*((void *)this + 9) + 10388);
      if ((v4 & 0x8090) != 0) {
        int v5 = 0;
      }
      else {
        int v5 = (v4 >> 2) & 1;
      }
      memset(v21, 0, sizeof(v21));
      long long v20 = 0u;
      memset(v19, 0, sizeof(v19));
      uint64_t v14 = 0x200000004;
      int v15 = v5;
      int v16 = (*(uint64_t (**)(const CCFaultReport *))(*(void *)a2 + 168))(a2);
      int v17 = -528336891;
      int v18 = (*(uint64_t (**)(const CCFaultReport *))(*(void *)a2 + 128))(a2);
      *((void *)&v20 + 1)  = CCFaultReport::getProgramCounter(a2);
      *(void *)&v21[0]  = CCFaultReport::getLinkRegister(a2);
      DWORD2(v21[2])  = (*(uint64_t (**)(const CCFaultReport *))(*(void *)a2 + 136))(a2);
      OSStringPtr v6 = (const char *)(*(uint64_t (**)(const CCFaultReport *))(*(void *)a2 + 144))(a2);
      strlcpy((char *)v21 + 8, v6, 0x20uLL);
      OSStringPtr v7 = (const char *)(*(uint64_t (**)(const CCFaultReport *))(*(void *)a2 + 152))(a2);
      strlcpy((char *)&v21[2] + 12, v7, 0x20uLL);
      uint64_t v8 = (const char *)(*(uint64_t (**)(const CCFaultReport *))(*(void *)a2 + 160))(a2);
      strlcpy((char *)v19 + 4, v8, 0x40uLL);
      uint64_t v9 = *((void *)this + 9);
      if (*(void *)(v9 + 11304))
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            OSStringPtr v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v13, "[dk] %s@%d: posting APPLE80211_M_DRIVER_AVAILABLE, available[%u] reason[0x%08x] sub_reason[0x%08x] minor_reason[0x%08x]\n", "completeFaultReportCallback", 54590, v15, v17, v18, LODWORD(v19[0]));
          }
        }
        IO80211Controller::postMessage(this, *(IO80211SkywalkInterface **)(*((void *)this + 9) + 11304), 0x37u, &v14, 0xB8uLL, 1);
        uint64_t v9 = *((void *)this + 9);
      }
      OSStringPtr v10 = *(IO80211SkywalkInterface **)(v9 + 11312);
      if (v10) {
        IO80211Controller::postMessage(this, v10, 0x37u, &v14, 0xB8uLL, 1);
      }
    }
  }
  else
  {
    kdebug_trace();
  }
  uint64_t v11 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 104))(this);
  (*(void (**)(uint64_t, void))(*(void *)v11 + 88))(v11, *(void *)(*((void *)this + 9) + 5544));
  if (a2) {
    (*(void (**)(const CCFaultReport *))(*(void *)a2 + 128))(a2);
  }
  kdebug_trace();
  return 0;
}

uint64_t AppleBCMWLANCore::induceFaultCallback(AppleBCMWLANCore *this, uint64_t a2, const char *a3)
{
  if (a2 == -469793279)
  {
    *(unsigned char *)(*((void *)this + 9) + 4392)  = 1;
    if ((*(uint64_t (**)(AppleBCMWLANCore *, uint64_t, const char *))(*(void *)this + 1848))(this, a2, a3))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v5, "[dk] %s@%d:Simulate Scan Return scan failure\n", "induceFaultCallback", 54616);
      }
    }
  }
  return 0;
}

uint64_t AppleBCMWLANCore::getDebugFlags(AppleBCMWLANCore *this)
{
  return *(unsigned int *)(*((void *)this + 9) + 10384);
}

AppleBCMWLANCommand *AppleBCMWLANCore::dequeueTxIOs(AppleBCMWLANCommand *result, unsigned __int16 *a2)
{
  if (*a2) {
    return AppleBCMWLANCommander::dequeueTxCommands(*(AppleBCMWLANCommander **)(*((void *)result + 9) + 5416), a2);
  }
  return result;
}

uint64_t AppleBCMWLANCore::reportCompletedTxIOs_WithoutBDC(uint64_t a1, uint64_t a2)
{
  AppleBCMWLANCommandQueue::getSize(*(AppleBCMWLANCommandQueue **)(a2 + 8));
  kdebug_trace();
  if (AppleBCMWLANCommandQueue::getSize(*(AppleBCMWLANCommandQueue **)(a2 + 8))) {
    AppleBCMWLANCommander::reportCompletedTxCommands(*(AppleBCMWLANCommander **)(*(void *)(a1 + 72) + 5416), a2);
  }
  return kdebug_trace();
}

OSMetaClassBase *AppleBCMWLANCore::enqueueRxIOs_WithEventQueue(AppleBCMWLANCore *a1, AppleBCMWLANObjectQueue **a2)
{
  unsigned int v4 = a2 + 1;
  uint64_t result = (OSMetaClassBase *)(*(uint64_t (**)(AppleBCMWLANObjectQueue *))(*(void *)a2[1] + 56))(a2[1]);
  if (result) {
    uint64_t result = (OSMetaClassBase *)AppleBCMWLANCommander::enqueueRxCommands(*(AppleBCMWLANCommander **)(*((void *)a1 + 9) + 5416), v4);
  }
  if (!*(unsigned char *)(*((void *)a1 + 9) + 6588))
  {
    uint64_t result = (OSMetaClassBase *)(*(uint64_t (**)(void))(*(void *)*a2 + 56))();
    if (result)
    {
      return AppleBCMWLANCore::processRxEvents_WithEventQueue(a1, a2);
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::reportCommittedTxCommands(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCommander::reportCommittedTxCommands(*(AppleBCMWLANCommander **)(*(void *)(a1 + 72) + 5416), a2);
}

unint64_t AppleBCMWLANCore::handleLinkInactivityCheck(unint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 72);
  if (*(void *)(v2 + 6232) == a2)
  {
    OSStringPtr v3 = (AppleBCMWLANCore *)result;
    if (IO80211BssManager::isAssociated(*(IO80211BssManager **)(v2 + 5440)))
    {
      if (*(_DWORD *)(*((void *)v3 + 9) + 6732))
      {
        Activity_ms  = AppleBCMWLANCore::timeSinceLastActivity_ms(v3);
        uint64_t v5 = *((void *)v3 + 9);
        if (Activity_ms > *(unsigned int *)(v5 + 19700) && !*(unsigned char *)(v5 + 778))
        {
          isAssociatedToAdhoc  = IO80211BssManager::isAssociatedToAdhoc(*(IO80211BssManager **)(v5 + 5440));
          uint64_t v7 = *((void *)v3 + 9);
          if ((isAssociatedToAdhoc & 1) == 0)
          {
            uint64_t v8 = AppleBCMWLANConfigManager::setupBeaconOffload(*(AppleBCMWLANCore ****)(v7 + 5472), 1, 1, *(unsigned __int8 *)(v7 + 208), 0);
            if (v8)
            {
              uint64_t v9 = v8;
              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v3 + 1848))(v3))
              {
                (*(void (**)(AppleBCMWLANCore *))(*(void *)v3 + 1848))(v3);
                if (CCLogStream::shouldLog())
                {
                  int v24 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v3 + 1848))(v3);
                  int v25 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)v3 + 112))(v3, v9);
                  CCLogStream::logAlert(v24, "[dk] %s@%d: Error: cannot enable beacon offload with error %s\n", "handleLinkInactivityCheck", 13935, v25);
                }
              }
            }
            AppleBCMWLANCore::collectBeaconRxCounters(v3, *((void *)v3 + 9) + 19548, 0);
            uint64_t v7 = *((void *)v3 + 9);
            if (*(void *)(v7 + 5512))
            {
              *(void *)(*((void *)v3 + 9) + 18904)  = getCurrentContinuousTimeMilliSeconds() / 0x3E8uLL
                                                         - *(void *)(*((void *)v3 + 9) + 18960);
              uint64_t v10 = *((void *)v3 + 9);
              uint64_t v11 = *(AppleBCMWLANBssManager **)(v10 + 5512);
              uint64_t v30 = *(void *)(v10 + 18952);
              long long v12 = *(_OWORD *)(v10 + 18920);
              v29[0]  = *(_OWORD *)(v10 + 18904);
              v29[1]  = v12;
              v29[2]  = *(_OWORD *)(v10 + 18936);
              long long v13 = *(_OWORD *)(v10 + 19000);
              v28[0]  = *(_OWORD *)(v10 + 18984);
              v28[1]  = v13;
              long long v14 = *(_OWORD *)(v10 + 35776);
              long long v15 = *(_OWORD *)(v10 + 35792);
              uint64_t v27 = *(void *)(v10 + 35808);
              v26[0]  = v14;
              v26[1]  = v15;
              AppleBCMWLANIOReportingCore::updateScanRoamStats(v11, (uint64_t)v29, (unsigned int *)v28, (unsigned int *)v26);
              uint64_t v7 = *((void *)v3 + 9);
            }
          }
          uint64_t v16 = AppleBCMWLANPowerManager::configureBeaconBasedChannelWidthSwitch(*(AppleBCMWLANCore ****)(v7 + 5528), 1);
          if (v16 != -536870201 && v16 != 0)
          {
            uint64_t v18 = v16;
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v3 + 1848))(v3))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)v3 + 1848))(v3);
              if (CCLogStream::shouldLog())
              {
                int v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v3 + 1848))(v3);
                uint64_t v23 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)v3 + 112))(v3, v18);
                CCLogStream::logAlertIf(v22, 0x20uLL, "[dk] %s@%d: Error: cannot configure beacon based Channel Width : %s\n", "handleLinkInactivityCheck", 13953, v23);
              }
            }
          }
          *(unsigned char *)(*((void *)v3 + 9) + 778)  = 1;
          OSStringPtr v19 = (unsigned char *)(*((void *)v3 + 9) + 18027);
          if (!*v19)
          {
            unsigned char *v19 = 1;
            *(unsigned char *)(*((void *)v3 + 9) + 19756)  = 1;
            *(unsigned char *)(*((void *)v3 + 9) + 19757)  = 1;
            AppleBCMWLANCore::setTrafficInactivityStats((OSDictionary *)v3);
          }
          unint64_t v31 = 0;
          mach_continuous_time();
          absolutetime_to_nanoseconds();
          *(void *)(*((void *)v3 + 9) + 17544)  = v31 / 0x3B9ACA00;
        }
      }
      uint64_t result = AppleBCMWLANCore::timeSinceLastActivity_ms(v3);
      uint64_t v20 = *((void *)v3 + 9);
      if (result > *(unsigned int *)(v20 + 19700))
      {
        uint64_t result = AppleBCMWLANPowerManager::configureTVPMPeriodicity(*(AppleBCMWLANCore ****)(v20 + 5528), 10);
        uint64_t v20 = *((void *)v3 + 9);
      }
      if (*(_DWORD *)(v20 + 19696) != *(_DWORD *)(v20 + 19692))
      {
        uint64_t result = IO80211BssManager::isAssociated(*(IO80211BssManager **)(v20 + 5440));
        uint64_t v20 = *((void *)v3 + 9);
        if (result)
        {
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v20 + 6232) + 120))(*(void *)(v20 + 6232), 2000);
          uint64_t v20 = *((void *)v3 + 9);
        }
      }
      if (*(void *)(v20 + 14160))
      {
        if ((*(unsigned char *)(v20 + 17344) & 1) == 0
          || (uint64_t result = AppleBCMWLANCore::dumpWmeCounters(v3, 0), v20 = *((void *)v3 + 9), *(void *)(v20 + 14160)))
        {
          if ((*(unsigned char *)(v20 + 17344) & 4) != 0) {
            return AppleBCMWLANCore::printDataPathDebug(v3, 0);
          }
        }
      }
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v3 + 1848))(v3);
      if (result)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)v3 + 1848))(v3);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          OSStringPtr v21 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v3 + 1848))(v3);
          return CCLogStream::logAlert(v21, "[dk] %s@%d: Error, we're not associated and the inactivity timer went off\n", "handleLinkInactivityCheck", 13887);
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleChanInfoTimer(AppleBCMWLANCore *a1, uint64_t a2)
{
  uint64_t v103 = (int *)0xAAAAAAAAAAAAAAAALL;
  v104  = 0xAAAAAAAAAAAAAAAALL;
  int v100 = 0;
  BCMChannelSpec  = 0;
  unint64_t v4 = *(unsigned __int16 *)(*((void *)a1 + 9) + 19772);
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1)  = 0xAAAAAAAAAAAAAAAALL;
  v105[0]  = v5;
  v105[1]  = v5;
  int v99 = 4;
  OSStringPtr v6 = (_WORD *)IOMallocZeroData();
  if (v6)
  {
    uint64_t v7 = v6;
    v102  = -1431655766;
    memcpy(v6, (const void *)(*((void *)a1 + 9) + 19774), 0x320uLL);
    uint64_t v8 = *((void *)a1 + 9);
    if (*(void *)(v8 + 6240) != a2) {
      return IOFreeData();
    }
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 6760), 1u, memory_order_relaxed);
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v79 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        int v80 = *(_DWORD *)(*((void *)a1 + 9) + 780);
        IsBitSet  = AppleBCMWLANCore::featureFlagIsBitSet(a1, 93);
        CCLogStream::logAlert(v79, "[dk] %s@%d: P2PVLPAllowed FW version %d 6G enabled %d\n", "handleChanInfoTimer", 46846, v80, IsBitSet);
      }
    }
    if (*(_DWORD *)(*((void *)a1 + 9) + 780) >= 0x11u
      && AppleBCMWLANCore::featureFlagIsBitSet(a1, 93))
    {
      uint64_t v103 = &v100;
      v104  = 0x400040004;
      uint64_t v9 = *(AppleBCMWLANCommander **)(*((void *)a1 + 9) + 5416);
      p_BCMChannelSpec  = &v99;
      uint64_t v98 = 4;
      uint64_t v10 = AppleBCMWLANCommander::runIOVarGet(v9, (uint64_t)"clm_flags", (uint64_t)&p_BCMChannelSpec, (uint64_t)&v103, 0);
      uint64_t v11 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (v10)
      {
        if (v11)
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            long long v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)a1 + 112))(a1, v10);
            CCLogStream::logCrit(v12, "[dk] %s@%d: clm_flags failed, error %s\n");
          }
        }
        goto LABEL_160;
      }
      if (v11)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v85 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logAlert(v85, "[dk] %s@%d: clm_flags 0x%X\n", "handleChanInfoTimer", 46855, v100);
        }
      }
      if ((~v100 & 0x7000000) != 0)
      {
        char v15 = 1;
        if (v4) {
          goto LABEL_23;
        }
        goto LABEL_129;
      }
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v87 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logAlert(v87, "[dk] %s@%d: VLP is not allowed for P2P\n", "handleChanInfoTimer", 46857);
        }
      }
    }
    char v15 = 0;
    if (v4)
    {
LABEL_23:
      char v96 = v15;
      unsigned int v16 = 0;
      unint64_t v17 = 0;
      BOOL v92 = 0;
      BOOL v94 = 0;
      while (2)
      {
        uint64_t v18 = v16;
        while (1)
        {
          AppleChannelSpec  = AppleBCMWLANChanSpec::getAppleChannelSpec(*(int ***)(*((void *)a1 + 9) + 17576), (unsigned __int16)v7[v18]);
          unint64_t v20 = (unsigned __int16)AppleChannelSpec;
          PrimaryChannel  = ChanSpecGetPrimaryChannel();
          char v22 = PrimaryChannel;
          __int16 v23 = AppleChannelSpec & 0xC000;
          unsigned int v24 = (AppleChannelSpec >> 11) & 7;
          v102  = 0;
          BCMChannelSpec  = AppleBCMWLANChanSpec::getBCMChannelSpec(*(void *)(*((void *)a1 + 9) + 17576), PrimaryChannel & 0xC7FF | (((AppleChannelSpec >> 11) & 7) << 11) | AppleChannelSpec & 0xC000);
          if (v24 > 2) {
            break;
          }
          uint64_t v103 = &v102;
          v104  = 0x400040004;
          int v25 = *(AppleBCMWLANCommander **)(*((void *)a1 + 9) + 5416);
          p_BCMChannelSpec  = &BCMChannelSpec;
          uint64_t v98 = 4;
          uint64_t v26 = AppleBCMWLANCommander::runIOVarGet(v25, (uint64_t)"per_chan_info", (uint64_t)&p_BCMChannelSpec, (uint64_t)&v103, 0);
          uint64_t v27 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (v26)
          {
            if (v27)
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              if (CCLogStream::shouldLog())
              {
                uint64_t v42 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)a1 + 112))(a1, v26);
                CCLogStream::logCrit(v42, "[dk] %s@%d: per_chan_info failed, error %s\n");
              }
            }
            goto LABEL_160;
          }
          if (v27)
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              int8x8_t v90 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              int v29 = (unsigned __int16)v7[v18];
              uint64_t v30 = AppleBCMWLANChanSpec::convToAscii(v20, (char *)v105, 0x20u);
              CCLogStream::logNoticeIf(v90, 0x4000000400uLL, "[dk] %s@%d:Chanspec: %x, AppleChanSpec: %s Ch Bitmap: %04x perChanInfo: %04x\n", "handleChanInfoTimer", 46891, v29, v30, v102, BCMChannelSpec);
            }
          }
          if ((~v102 & 3) == 0 && ((v20 & 0xC000) != 0 || v24 == 2))
          {
            *(_WORD *)(*((void *)a1 + 9) + 2 * v17 + 19774)  = v7[v18];
            *(unsigned char *)(*((void *)a1 + 9) + v17 + 20574)  = v22;
            *(unsigned char *)(*((void *)a1 + 9) + v17 + 20974)  = (v102 & 0x40) != 0;
            *(unsigned char *)(*((void *)a1 + 9) + v17 + 21374)  = (v102 & 8) != 0;
            *(unsigned char *)(*((void *)a1 + 9) + v17 + 21774)  = (v102 & 0x20) != 0;
            *(unsigned char *)(*((void *)a1 + 9) + v17 + 22174)  = 0;
            *(unsigned char *)(*((void *)a1 + 9) + v17 + 22574)  = 0;
            *(unsigned char *)(*((void *)a1 + 9) + v17 + 26176)  = 0;
            *(unsigned char *)(*((void *)a1 + 9) + v17 + 26576)  = v23 == 0x4000;
            *(unsigned char *)(*((void *)a1 + 9) + v17 + 26976)  = (v102 & 0x400) != 0;
            unint64_t v31 = *((void *)a1 + 9) + v17;
            char v32 = v96;
            if (!*(unsigned char *)(v31 + 26976)) {
              char v32 = 0;
            }
            *(unsigned char *)(v31 + 27376)  = v32;
            if (*(unsigned char *)(*((void *)a1 + 9) + v17 + 26976))
            {
              BOOL v33 = v94 || AppleBCMWLANCore::get6GTxPowerFromFW(a1, v7[v18], 1u) == 0;
              BOOL v94 = v33;
              uint64_t v34 = dword_1003A4ACD;
              if (dword_1003A4ACD)
              {
                int v35 = &byte_1003A4AD3;
                while (*((unsigned __int16 *)v35 - 1) != (unsigned __int16)v7[v18])
                {
                  v35 += 4;
                  if (!--v34) {
                    goto LABEL_49;
                  }
                }
                LOBYTE(v34)  = *v35;
              }
LABEL_49:
              *(unsigned char *)(*((void *)a1 + 9) + v17 + 28176)  = v34;
            }
            if ((v102 & 0x1000) != 0)
            {
              BOOL v36 = v92 || AppleBCMWLANCore::get6GTxPowerFromFW(a1, v7[v18], 0) == 0;
              BOOL v92 = v36;
              uint64_t v37 = dword_1003A4BD9;
              if (dword_1003A4BD9)
              {
                uint64_t v38 = &byte_1003A4BDF;
                while (*((unsigned __int16 *)v38 - 1) != (unsigned __int16)v7[v18])
                {
                  v38 += 4;
                  if (!--v37) {
                    goto LABEL_60;
                  }
                }
                LOBYTE(v37)  = *v38;
              }
LABEL_60:
              *(unsigned char *)(*((void *)a1 + 9) + v17 + 28976)  = v37;
            }
            *(_DWORD *)(*((void *)a1 + 9) + 4 * v17 + 22976)  = BCMChannelSpec;
            *(_DWORD *)(*((void *)a1 + 9) + 4 * v17++ + 24576)  = v102;
            break;
          }
          if (++v18 >= v4) {
            goto LABEL_70;
          }
        }
        uint64_t v39 = *((void *)a1 + 9);
        if (*(_DWORD *)(v39 + 6760) <= 1u)
        {
          unsigned int v16 = v18 + 1;
        }
        else
        {
          *(_DWORD *)(v39 + 6760)  = 1;
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v40 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              CCLogStream::logAlert(v40, "[dk] %s@%d:WiFiCC : Chan specs changed due to another country code set call. Mismatch will occur which is fixed below after collecting a corecapture\n", "handleChanInfoTimer", 46942);
            }
          }
          unint64_t v17 = 0;
          unsigned int v16 = 0;
        }
        if (v16 < v4 && v17 < 0x190) {
          continue;
        }
        break;
      }
LABEL_70:
      if (v17 == 400)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)
          && ((*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1),
              CCLogStream::shouldLog()))
        {
          uint64_t v84 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          LOWORD(v41)  = 400;
          CCLogStream::logAlert(v84, "[dk] %s@%d:20MHz channel total number already reached max, %d\n", "handleChanInfoTimer", 47028, 400);
        }
        else
        {
          LOWORD(v41)  = 400;
        }
      }
      else if (v17 > 0x18F)
      {
        LOWORD(v41)  = v17;
      }
      else
      {
        unsigned int v43 = 0;
        BOOL v93 = 0;
        BOOL v91 = 0;
        unint64_t v41 = v17;
        do
        {
          unint64_t v95 = v41;
          uint64_t v44 = v43;
          while (1)
          {
            unsigned int v45 = AppleBCMWLANChanSpec::getAppleChannelSpec(*(int ***)(*((void *)a1 + 9) + 17576), (unsigned __int16)v7[v44]);
            unint64_t v46 = (unsigned __int16)v45;
            int v47 = ChanSpecGetPrimaryChannel();
            __int16 v48 = v45 & 0xC000;
            unsigned int v49 = v45 >> 11;
            unsigned int v50 = (v45 >> 11) & 7;
            v102  = 0;
            BCMChannelSpec  = AppleBCMWLANChanSpec::getBCMChannelSpec(*(void *)(*((void *)a1 + 9) + 17576), v47 & 0xC7FF | ((v49 & 7) << 11) | v48);
            if (v50 < 3)
            {
              unint64_t v41 = v95;
              goto LABEL_124;
            }
            if (v17)
            {
              uint64_t v51 = 0;
              uint64_t v52 = *((void *)a1 + 9);
              while (v47 != *(unsigned __int8 *)(v52 + 20574 + v51))
              {
                if (v17 == ++v51) {
                  goto LABEL_92;
                }
              }
              v102  = *(_DWORD *)(v52 + 4 * v51 + 24576);
              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
              {
                (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v55 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                  int v88 = (unsigned __int16)v7[v44];
                  int8x8_t v89 = (CCLogStream *)v55;
                  OSNumberPtr v56 = AppleBCMWLANChanSpec::convToAscii(v46, (char *)v105, 0x20u);
                  CCLogStream::logNoticeIf(v89, 0x4000000400uLL, "[dk] %s@%d:Chanspec: %x, AppleChanSpec: %s Ch Bitmap: %04x perChanInfo: %04x\n", "handleChanInfoTimer", 46979, v88, v56, v102, BCMChannelSpec);
                }
              }
              uint64_t v53 = v51;
            }
            else
            {
              uint64_t v53 = 0;
            }
            if (v53 != v17) {
              break;
            }
LABEL_92:
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              if (CCLogStream::shouldLog())
              {
                uint64_t v54 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                CCLogStream::logAlert(v54, "[dk] %s@%d:No existing 20MHz channel matches the primary channel of Chanspec: %x\n", "handleChanInfoTimer", 46986, *(unsigned __int16 *)(*((void *)a1 + 9) + 2 * v44 + 19774));
              }
            }
            if (++v44 >= v4)
            {
              LOWORD(v41)  = v95;
              goto LABEL_130;
            }
          }
          *(_WORD *)(*((void *)a1 + 9) + 2 * v95 + 19774)  = v7[v44];
          *(unsigned char *)(*((void *)a1 + 9) + v95 + 20574)  = v47;
          *(unsigned char *)(*((void *)a1 + 9) + v95 + 20974)  = (v102 & 0x40) != 0;
          *(unsigned char *)(*((void *)a1 + 9) + v95 + 21374)  = (v102 & 8) != 0;
          *(unsigned char *)(*((void *)a1 + 9) + v95 + 21774)  = (v102 & 0x20) != 0;
          *(unsigned char *)(*((void *)a1 + 9) + v95 + 22174)  = v50 == 3;
          *(unsigned char *)(*((void *)a1 + 9) + v95 + 22574)  = v50 == 4;
          *(unsigned char *)(*((void *)a1 + 9) + v95 + 26176)  = v50 == 5;
          *(unsigned char *)(*((void *)a1 + 9) + v95 + 26576)  = v48 == 0x4000;
          *(unsigned char *)(*((void *)a1 + 9) + v95 + 26976)  = (v102 & 0x400) != 0;
          unint64_t v57 = *((void *)a1 + 9) + v95;
          char v58 = v96;
          if (!*(unsigned char *)(v57 + 26976)) {
            char v58 = 0;
          }
          *(unsigned char *)(v57 + 27376)  = v58;
          if (v50 == 5)
          {
            if (*(unsigned char *)(*((void *)a1 + 9) + v95 + 26976))
            {
              BOOL v59 = v93 || AppleBCMWLANCore::get6GTxPowerFromFW(a1, v7[v44], 1u) == 0;
              BOOL v93 = v59;
              uint64_t v60 = dword_1003A4ACD;
              if (dword_1003A4ACD)
              {
                int v61 = &byte_1003A4AD3;
                while (*((unsigned __int16 *)v61 - 1) != (unsigned __int16)v7[v44])
                {
                  v61 += 4;
                  if (!--v60) {
                    goto LABEL_111;
                  }
                }
                LOBYTE(v60)  = *v61;
              }
LABEL_111:
              *(unsigned char *)(*((void *)a1 + 9) + v95 + 28576)  = v60;
            }
            if ((v102 & 0x1000) != 0)
            {
              BOOL v62 = v91 || AppleBCMWLANCore::get6GTxPowerFromFW(a1, v7[v44], 0) == 0;
              BOOL v91 = v62;
              uint64_t v63 = dword_1003A4BD9;
              if (dword_1003A4BD9)
              {
                int v64 = &byte_1003A4BDF;
                while (*((unsigned __int16 *)v64 - 1) != (unsigned __int16)v7[v44])
                {
                  v64 += 4;
                  if (!--v63) {
                    goto LABEL_122;
                  }
                }
                LOBYTE(v6AppleBCMWLANCommandMonitor::free(this - 3) = *v64;
              }
LABEL_122:
              *(unsigned char *)(*((void *)a1 + 9) + v95 + 29376)  = v63;
            }
          }
          *(_DWORD *)(*((void *)a1 + 9) + 4 * v95 + 22976)  = BCMChannelSpec;
          *(_DWORD *)(*((void *)a1 + 9) + 4 * v95 + 24576)  = v102;
          unint64_t v41 = v95 + 1;
LABEL_124:
          unsigned int v43 = v44 + 1;
        }
        while ((int)v44 + 1 < v4 && v41 < 0x190);
      }
      goto LABEL_130;
    }
LABEL_129:
    LOWORD(v41)  = 0;
LABEL_130:
    *(_WORD *)(*((void *)a1 + 9) + 19772)  = v41;
    uint64_t v65 = *((void *)a1 + 9);
    *(_WORD *)(v65 + 19768)  = *(_WORD *)(v65 + 6752);
    *(unsigned char *)(v65 + 19770)  = *(unsigned char *)(v65 + 6754);
    uint64_t v66 = *((void *)a1 + 9);
    unint64_t v67 = *(IO80211SkywalkInterface **)(v66 + 29800);
    if (v67)
    {
      IO80211Controller::postMessage(a1, v67, 0xBu, 0, 0, 1);
      uint64_t v66 = *((void *)a1 + 9);
    }
    int v68 = *(IO80211SkywalkInterface **)(v66 + 11312);
    if (v68)
    {
      IO80211Controller::postMessage(a1, v68, 0xBu, 0, 0, 1);
      uint64_t v66 = *((void *)a1 + 9);
    }
    unsigned int v69 = (unsigned char *)(v66 + 35752);
    unint64_t v70 = *(unsigned __int16 *)(v66 + 19772);
    if (*(_WORD *)(v66 + 19772))
    {
      if (*(unsigned char *)(v66 + 26576))
      {
        BOOL v71 = 1;
      }
      else
      {
        uint64_t v72 = 0;
        uint64_t v73 = v66 + 26577;
        do
        {
          uint64_t v74 = v72;
          if (v70 - 1 == v72) {
            break;
          }
          ++v72;
        }
        while (!*(unsigned char *)(v73 + v74));
        BOOL v71 = v74 + 1 < v70;
      }
    }
    else
    {
      BOOL v71 = 0;
    }
    *unsigned int v69 = v71;
    uint64_t v75 = *((void *)a1 + 9);
    if (*(_DWORD *)(v75 + 780) >= 0x11u
      && v71 != AppleBCMWLANCore::is6ESupportedInCountry(a1, (const char *)(v75 + 6752)))
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v83 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logAlert(v83, "[dk] %s@%d:WiFiCC : Mismatch between country supoprting 6E and 6E channels allowed. ivars->fCurrentCountrySupports6E : [%hhu], countryCode : [%s] , ivars->fThreadCountExecChanInfo : %d\n", "handleChanInfoTimer", 47057, *(unsigned __int8 *)(*((void *)a1 + 9) + 35752), (const char *)(*((void *)a1 + 9) + 6752), *(_DWORD *)(*((void *)a1 + 9) + 6760));
        }
      }
      if (*(unsigned char *)(*((void *)a1 + 9) + 1103))
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            long long v86 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logAlert(v86, "[dk] %s@%d:WiFiCC : FwTypeMfg detected. No recovery being attempted\n", "handleChanInfoTimer", 47059);
          }
        }
        AppleBCMWLANCore::populate6ESupportedCountryList(a1);
      }
      else
      {
        AppleBCMWLANCore::handleCountryCodeChangeToRepopulateChannels(a1);
      }
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v82 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v82, "[dk] %s@%d:WiFiCC : Current FW country [%s] supports 6E [%hhu]\n", "handleChanInfoTimer", 47068, (const char *)(*((void *)a1 + 9) + 6752), *(unsigned __int8 *)(*((void *)a1 + 9) + 35752));
      }
    }
    uint64_t v76 = *((void *)a1 + 9);
    uint64_t v77 = *(IO80211SkywalkInterface **)(v76 + 11312);
    if (v77)
    {
      IO80211Controller::postMessage(a1, v77, 0xE0u, 0, 0, 1);
      uint64_t v76 = *((void *)a1 + 9);
    }
    unsigned int v78 = *(IO80211SkywalkInterface **)(v76 + 11304);
    if (!v78) {
      goto LABEL_161;
    }
    IO80211Controller::postMessage(a1, v78, 0xE0u, 0, 0, 1);
LABEL_160:
    uint64_t v76 = *((void *)a1 + 9);
LABEL_161:
    *(_DWORD *)(v76 + 6760)  = 0;
    return IOFreeData();
  }
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
  if (result)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      long long v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      return CCLogStream::logAlert(v14, "[dk] %s@%d:No memory for currChanSpec\n", "handleChanInfoTimer", 46832);
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::disableHostCountryCode(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
  if (result)
  {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 1224))(a1, v3, &v4);
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleStatsReportTimeout(IOService *a1)
{
  if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)a1, 84)
    && (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)a1, 111) & 1) != 0
    || (uint64_t result = AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)a1, 85), result))
  {
    uint64_t v3 = a1[1].OSObject::OSObjectInterface::__vftable;
    if (BYTE4(v3[1147].init))
    {
      AppleBCMWLANCore::sendRC2CoexStatsEventCoreAnalytics(a1);
      uint64_t v3 = a1[1].OSObject::OSObjectInterface::__vftable;
    }
    if (BYTE4(v3[1150].init))
    {
      AppleBCMWLANCore::sendRC1CoexStatsEventCoreAnalytics(a1);
      uint64_t v3 = a1[1].OSObject::OSObjectInterface::__vftable;
    }
    uint64_t v4 = (_OWORD *)((char *)&v3[1147].init + 4);
    v4[1]  = 0u;
    _OWORD v4[2] = 0u;
    *uint64_t v4 = 0u;
    uint64_t v5 = (uint64_t)&a1[1].OSObject::OSObjectInterface::__vftable[1150].init + 4;
    *(void *)(v5 + 16)  = 0;
    *(_OWORD *)uint64_t v5 = 0u;
    uint64_t result = (uint64_t)a1[1].OSObject::OSObjectInterface::__vftable[390].free;
    if (result)
    {
      OSStringPtr v6 = *(uint64_t (**)(void))(*(void *)result + 120);
      return v6();
    }
  }
  return result;
}

_DWORD *AppleBCMWLANCore::handleTxDCReportTimeout(AppleBCMWLANCore *a1, uint64_t a2)
{
  uint64_t result = (_DWORD *)AppleBCMWLANCore::featureFlagIsBitSet(a1, 79);
  if (result)
  {
    uint64_t v5 = *((void *)a1 + 9);
    if (*(void *)(v5 + 6256) == a2)
    {
      uint64_t v6 = (*(unsigned int (**)(void))(**(void **)(v5 + 5400) + 368))(*(void *)(v5 + 5400)) <= 0x112E
         ? 200
         : 168;
      uint64_t result = (_DWORD *)IOMallocZeroData();
      if (result)
      {
        uint64_t v7 = result;
        *uint64_t result = 3;
        v74[0]  = result;
        v74[1]  = v6;
        v73[0]  = result;
        v73[1]  = v6 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v6 << 32);
        uint64_t v8 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 88))(a1);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 136))(v8))
        {
          v72[0]  = a1;
          v72[1]  = AppleBCMWLANCore::handleTxDCPerAntAsyncCallback;
          v72[2]  = 0;
          uint64_t v9 = *(AppleBCMWLANCommander **)(*((void *)a1 + 9) + 5416);
          int v71 = v6 << 16;
          if (AppleBCMWLANCommander::sendIOVarGet(v9, (uint64_t)"dynsar", (uint64_t)v74, (unsigned __int16 *)&v71, (uint64_t)v72, 0)&& (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              CCLogStream::logAlert(v10, "[dk] %s@%d: Failed GET IOCTL, cret[0x%08x]\n");
            }
          }
          return (_DWORD *)IOFreeData();
        }
        if (AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*((void *)a1 + 9) + 5416), (uint64_t)"dynsar", (uint64_t)v74, (uint64_t)v73, 0))
        {
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              CCLogStream::logAlert(v11, "[dk] %s@%d:Failed to get Tx Duty Cycle from DynSAR Summary\n");
            }
          }
          return (_DWORD *)IOFreeData();
        }
        if (*(_WORD *)v7 != 3)
        {
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              unsigned int v69 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              CCLogStream::logAlert(v69, "[dk] %s@%d:Sub Command ID mismatch, input %d, output %d\n");
            }
          }
          return (_DWORD *)IOFreeData();
        }
        long long v13 = (unsigned __int16 *)(v7 + 2);
        int v12 = *((unsigned __int16 *)v7 + 4);
        BOOL v14 = v12 == 4 || v12 == 2;
        if (!v14 || *((unsigned char *)v7 + 35) != 2 || *((unsigned __int8 *)v7 + 36) >= 9u)
        {
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              char v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              CCLogStream::logAlert(v15, "[dk] %s@%d:Invalid version or fields from DynSAR summary response\n");
            }
          }
          return (_DWORD *)IOFreeData();
        }
        if (v12 == 4)
        {
          uint64_t v18 = *((unsigned __int8 *)v7 + 38);
          if (v18 + 16 * (unint64_t)*((unsigned __int8 *)v7 + 32) > *((unsigned __int16 *)v7 + 5))
          {
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              if (CCLogStream::shouldLog())
              {
                OSStringPtr v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                CCLogStream::logAlert(v19, "[dk] %s@%d:Invalid FW length detected for DYNSAR_CNT_VERSION_V4!\n");
              }
            }
            return (_DWORD *)IOFreeData();
          }
          unint64_t v20 = 0;
          OSStringPtr v21 = (char *)v13 + v18;
        }
        else if (v12 == 2)
        {
          uint64_t v16 = *((unsigned __int8 *)v7 + 38);
          if (v16 + 24 * (unint64_t)*((unsigned __int8 *)v7 + 32) > *((unsigned __int16 *)v7 + 5))
          {
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              if (CCLogStream::shouldLog())
              {
                unint64_t v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                CCLogStream::logAlert(v17, "[dk] %s@%d:Invalid FW length detected for DYNSAR_CNT_VERSION_V2!\n");
              }
            }
            return (_DWORD *)IOFreeData();
          }
          OSStringPtr v21 = 0;
          unint64_t v20 = (char *)v13 + v16;
        }
        else
        {
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              unint64_t v70 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              CCLogStream::logAlert(v70, "[dk] %s@%d:Invalid DynSAR Summary version\n", "handleTxDCReportTimeout", 20390);
            }
          }
          unint64_t v20 = 0;
          OSStringPtr v21 = 0;
        }
        if (!v7[3]) {
          return (_DWORD *)IOFreeData();
        }
        if (!*((unsigned char *)v7 + 35))
        {
LABEL_174:
          uint64_t v65 = *((void *)a1 + 9);
          uint64_t v66 = *(AppleBCMWLANIOReporting **)(v65 + 5512);
          if (v66)
          {
            if (AppleBCMWLANCore::checkNonZeroTxDCValue(a1))
            {
              AppleBCMWLANIOReportingCore::reportTxDC(v66, (unsigned __int8 *)(v65 + 6296));
              uint64_t v67 = *((void *)a1 + 9);
              if (*(unsigned char *)(v67 + 6296) || *(unsigned char *)(v67 + 6297) || *(unsigned char *)(v67 + 6298) || *(unsigned char *)(v67 + 6299))
              {
                AppleBCMWLANCore::updateTxDCSlice0Ant0Report(a1);
                uint64_t v67 = *((void *)a1 + 9);
                if (!*(_DWORD *)(v67 + 6304))
                {
                  *(_DWORD *)(v67 + 6304)  = 1;
                  uint64_t v67 = *((void *)a1 + 9);
                }
              }
              if (*(unsigned char *)(v67 + 6300) || *(unsigned char *)(v67 + 6301) || *(unsigned char *)(v67 + 6302) || *(unsigned char *)(v67 + 6303))
              {
                AppleBCMWLANCore::updateTxDCSlice1Ant0Report(a1);
                uint64_t v67 = *((void *)a1 + 9);
                if (!*(_DWORD *)(v67 + 6392))
                {
                  *(_DWORD *)(v67 + 6392)  = 1;
                  uint64_t v67 = *((void *)a1 + 9);
                }
              }
              *(void *)(v67 + 6296)  = 0;
              uint64_t v65 = *((void *)a1 + 9);
            }
            uint64_t v68 = *(void *)(v65 + 6256);
            if (v68) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v68 + 120))(v68, 120000);
            }
          }
          return (_DWORD *)IOFreeData();
        }
        int v22 = 0;
        while (1)
        {
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              int v64 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              CCLogStream::logInfo(v64, "[dk] %s@%d:Slice %d\n", "handleTxDCReportTimeout", 20397, v22);
            }
          }
          unsigned int v23 = *((unsigned __int8 *)v7 + 32);
          if (*((unsigned char *)v7 + 32)) {
            break;
          }
LABEL_173:
          if (++v22 >= *((unsigned __int8 *)v7 + 35)) {
            goto LABEL_174;
          }
        }
        unsigned int v24 = 0;
        while (1)
        {
          unsigned int v25 = v24 + v22 * v23;
          int v26 = *v13;
          if (v26 == 4)
          {
            if (v22)
            {
              if (v24 == 2)
              {
                unint64_t v41 = v7[3];
                if (v41) {
                  unint64_t v42 = 100 * (unint64_t)*(unsigned int *)&v21[8 * v25] / v41;
                }
                else {
                  LOBYTE(v42)  = 0;
                }
                *(unsigned char *)(*((void *)a1 + 9) + 6302)  = v42;
                if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)) {
                  goto LABEL_73;
                }
                (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                if (!CCLogStream::shouldLog()) {
                  goto LABEL_73;
                }
                goto LABEL_164;
              }
              if (v24 == 1)
              {
                unint64_t v43 = v7[3];
                if (v43) {
                  unint64_t v44 = 100 * (unint64_t)*(unsigned int *)&v21[8 * v25] / v43;
                }
                else {
                  LOBYTE(v44)  = 0;
                }
                *(unsigned char *)(*((void *)a1 + 9) + 6301)  = v44;
                if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)) {
                  goto LABEL_73;
                }
                (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                if (!CCLogStream::shouldLog()) {
                  goto LABEL_73;
                }
                goto LABEL_168;
              }
              if (v24)
              {
                unint64_t v45 = v7[3];
                if (v45) {
                  unint64_t v46 = 100 * (unint64_t)*(unsigned int *)&v21[8 * v25] / v45;
                }
                else {
                  LOBYTE(v46)  = 0;
                }
                *(unsigned char *)(*((void *)a1 + 9) + 630AppleBCMWLANCommandMonitor::free(this - 3) = v46;
                if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)) {
                  goto LABEL_73;
                }
                (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                if (!CCLogStream::shouldLog()) {
                  goto LABEL_73;
                }
                goto LABEL_172;
              }
              unint64_t v29 = v7[3];
              if (v29) {
                unint64_t v30 = 100 * (unint64_t)*(unsigned int *)&v21[8 * v25] / v29;
              }
              else {
                LOBYTE(v30)  = 0;
              }
              *(unsigned char *)(*((void *)a1 + 9) + 6300)  = v30;
              if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)) {
                goto LABEL_73;
              }
              (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              if (!CCLogStream::shouldLog()) {
                goto LABEL_73;
              }
            }
            else
            {
              if (v24 == 2)
              {
                unint64_t v53 = v7[3];
                if (v53) {
                  unint64_t v54 = 100 * (unint64_t)*(unsigned int *)&v21[8 * v25] / v53;
                }
                else {
                  LOBYTE(v54)  = 0;
                }
                *(unsigned char *)(*((void *)a1 + 9) + 6298)  = v54;
                if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)) {
                  goto LABEL_73;
                }
                (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                if (!CCLogStream::shouldLog()) {
                  goto LABEL_73;
                }
LABEL_164:
                uint64_t v60 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                CCLogStream::logInfo(v60, "[dk] %s@%d:Ant 2 TxDC %d%%\n");
                goto LABEL_73;
              }
              if (v24 == 1)
              {
                unint64_t v55 = v7[3];
                if (v55) {
                  unint64_t v56 = 100 * (unint64_t)*(unsigned int *)&v21[8 * v25] / v55;
                }
                else {
                  LOBYTE(v56)  = 0;
                }
                *(unsigned char *)(*((void *)a1 + 9) + 6297)  = v56;
                if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)) {
                  goto LABEL_73;
                }
                (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                if (!CCLogStream::shouldLog()) {
                  goto LABEL_73;
                }
LABEL_168:
                int v61 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                CCLogStream::logInfo(v61, "[dk] %s@%d:Ant 1 TxDC %d%%\n");
                goto LABEL_73;
              }
              if (v24)
              {
                unint64_t v57 = v7[3];
                if (v57) {
                  unint64_t v58 = 100 * (unint64_t)*(unsigned int *)&v21[8 * v25] / v57;
                }
                else {
                  LOBYTE(v58)  = 0;
                }
                *(unsigned char *)(*((void *)a1 + 9) + 6299)  = v58;
                if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)) {
                  goto LABEL_73;
                }
                (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                if (!CCLogStream::shouldLog()) {
                  goto LABEL_73;
                }
LABEL_172:
                BOOL v62 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                CCLogStream::logInfo(v62, "[dk] %s@%d:Ant 3 TxDC %d%%\n");
                goto LABEL_73;
              }
              unint64_t v33 = v7[3];
              if (v33) {
                unint64_t v34 = 100 * (unint64_t)*(unsigned int *)&v21[8 * v25] / v33;
              }
              else {
                LOBYTE(v34)  = 0;
              }
              *(unsigned char *)(*((void *)a1 + 9) + 6296)  = v34;
              if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)) {
                goto LABEL_73;
              }
              (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              if (!CCLogStream::shouldLog()) {
                goto LABEL_73;
              }
            }
          }
          else
          {
            if (v26 != 2)
            {
              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
              {
                (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v63 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                  CCLogStream::logAlert(v63, "[dk] %s@%d:Invalid DynSAR Summary version\n", "handleTxDCReportTimeout", 20461);
                }
              }
              goto LABEL_73;
            }
            if (v22)
            {
              if (v24 == 2)
              {
                unint64_t v35 = v7[3];
                if (v35) {
                  unint64_t v36 = 100 * (unint64_t)*(unsigned int *)&v20[12 * v25 + 8] / v35;
                }
                else {
                  LOBYTE(v36)  = 0;
                }
                *(unsigned char *)(*((void *)a1 + 9) + 6302)  = v36;
                if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)) {
                  goto LABEL_73;
                }
                (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                if (!CCLogStream::shouldLog()) {
                  goto LABEL_73;
                }
                goto LABEL_164;
              }
              if (v24 == 1)
              {
                unint64_t v37 = v7[3];
                if (v37) {
                  unint64_t v38 = 100 * (unint64_t)*(unsigned int *)&v20[12 * v25 + 8] / v37;
                }
                else {
                  LOBYTE(v38)  = 0;
                }
                *(unsigned char *)(*((void *)a1 + 9) + 6301)  = v38;
                if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)) {
                  goto LABEL_73;
                }
                (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                if (!CCLogStream::shouldLog()) {
                  goto LABEL_73;
                }
                goto LABEL_168;
              }
              if (v24)
              {
                unint64_t v39 = v7[3];
                if (v39) {
                  unint64_t v40 = 100 * (unint64_t)*(unsigned int *)&v20[12 * v25 + 8] / v39;
                }
                else {
                  LOBYTE(v40)  = 0;
                }
                *(unsigned char *)(*((void *)a1 + 9) + 630AppleBCMWLANCommandMonitor::free(this - 3) = v40;
                if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)) {
                  goto LABEL_73;
                }
                (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                if (!CCLogStream::shouldLog()) {
                  goto LABEL_73;
                }
                goto LABEL_172;
              }
              unint64_t v27 = v7[3];
              if (v27) {
                unint64_t v28 = 100 * (unint64_t)*(unsigned int *)&v20[12 * v25 + 8] / v27;
              }
              else {
                LOBYTE(v28)  = 0;
              }
              *(unsigned char *)(*((void *)a1 + 9) + 6300)  = v28;
              if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)) {
                goto LABEL_73;
              }
              (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              if (!CCLogStream::shouldLog()) {
                goto LABEL_73;
              }
            }
            else
            {
              if (v24 == 2)
              {
                unint64_t v47 = v7[3];
                if (v47) {
                  unint64_t v48 = 100 * (unint64_t)*(unsigned int *)&v20[12 * v25 + 8] / v47;
                }
                else {
                  LOBYTE(v48)  = 0;
                }
                *(unsigned char *)(*((void *)a1 + 9) + 6298)  = v48;
                if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)) {
                  goto LABEL_73;
                }
                (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                if (!CCLogStream::shouldLog()) {
                  goto LABEL_73;
                }
                goto LABEL_164;
              }
              if (v24 == 1)
              {
                unint64_t v49 = v7[3];
                if (v49) {
                  unint64_t v50 = 100 * (unint64_t)*(unsigned int *)&v20[12 * v25 + 8] / v49;
                }
                else {
                  LOBYTE(v50)  = 0;
                }
                *(unsigned char *)(*((void *)a1 + 9) + 6297)  = v50;
                if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)) {
                  goto LABEL_73;
                }
                (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                if (!CCLogStream::shouldLog()) {
                  goto LABEL_73;
                }
                goto LABEL_168;
              }
              if (v24)
              {
                unint64_t v51 = v7[3];
                if (v51) {
                  unint64_t v52 = 100 * (unint64_t)*(unsigned int *)&v20[12 * v25 + 8] / v51;
                }
                else {
                  LOBYTE(v52)  = 0;
                }
                *(unsigned char *)(*((void *)a1 + 9) + 6299)  = v52;
                if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)) {
                  goto LABEL_73;
                }
                (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                if (!CCLogStream::shouldLog()) {
                  goto LABEL_73;
                }
                goto LABEL_172;
              }
              unint64_t v31 = v7[3];
              if (v31) {
                unint64_t v32 = 100 * (unint64_t)*(unsigned int *)&v20[12 * v25 + 8] / v31;
              }
              else {
                LOBYTE(v32)  = 0;
              }
              *(unsigned char *)(*((void *)a1 + 9) + 6296)  = v32;
              if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)) {
                goto LABEL_73;
              }
              (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              if (!CCLogStream::shouldLog()) {
                goto LABEL_73;
              }
            }
          }
          BOOL v59 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logInfo(v59, "[dk] %s@%d:Ant 0 TxDC %d%%\n");
LABEL_73:
          ++v24;
          unsigned int v23 = *((unsigned __int8 *)v7 + 32);
          if (v24 >= v23) {
            goto LABEL_173;
          }
        }
      }
    }
  }
  return result;
}

void *AppleBCMWLANCore::handleDynSARDetailSlice0Timeout(void *result, uint64_t a2)
{
  uint64_t v2 = result[9];
  if (*(unsigned char *)(v2 + 4496) && *(void *)(v2 + 6264) == a2)
  {
    uint64_t v3 = result;
    unsigned int v4 = (*(uint64_t (**)(void))(**(void **)(v2 + 5400) + 368))(*(void *)(v2 + 5400));
    uint64_t v5 = *(AppleBCMWLANTxPowerManager **)(v3[9] + 5536);
    if (v4 < 0x112F) {
      AppleBCMWLANTxPowerManager::getDynSARDetail(v5, 0, 0xAu);
    }
    else {
      AppleBCMWLANTxPowerManager::getDynSARDetailV2(v5, 0, 0xAu);
    }
    uint64_t result = *(void **)(v3[9] + 6264);
    if (result)
    {
      uint64_t v6 = *(uint64_t (**)(void))(*result + 120);
      return (void *)v6();
    }
  }
  return result;
}

void *AppleBCMWLANCore::handleDynSARDetailSlice1Timeout(void *result, uint64_t a2)
{
  uint64_t v2 = result[9];
  if (*(unsigned char *)(v2 + 4496) && *(void *)(v2 + 6272) == a2)
  {
    uint64_t v3 = result;
    unsigned int v4 = (*(uint64_t (**)(void))(**(void **)(v2 + 5400) + 368))(*(void *)(v2 + 5400));
    uint64_t v5 = *(AppleBCMWLANTxPowerManager **)(v3[9] + 5536);
    if (v4 < 0x112F) {
      AppleBCMWLANTxPowerManager::getDynSARDetail(v5, 1u, 0xAu);
    }
    else {
      AppleBCMWLANTxPowerManager::getDynSARDetailV2(v5, 1u, 0xAu);
    }
    uint64_t result = *(void **)(v3[9] + 6272);
    if (result)
    {
      uint64_t v6 = *(uint64_t (**)(void))(*result + 120);
      return (void *)v6();
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::clearSacFreqGated(AppleBCMWLANCore *this)
{
  if (*(unsigned char *)(*((void *)this + 9) + 796)) {
    return AppleOLYHAL::clearSacFreqDK(this);
  }
  else {
    return 3758097095;
  }
}

uint64_t AppleBCMWLANCore::addSacFreqGated(AppleBCMWLANCore *this, AppleOLYHAL *a2, unint64_t a3, unsigned int a4)
{
  if (!*(unsigned char *)(*((void *)this + 9) + 796)) {
    return 3758097095;
  }
  uint64_t v4 = AppleOLYHAL::addSacFreqDK(a2, a3, a4, a4);
  io80211_os_log();
  return v4;
}

uint64_t AppleBCMWLANCore::removeSacFreqGated(AppleBCMWLANCore *this, AppleOLYHAL *a2, unint64_t a3, unsigned int a4)
{
  if (!*(unsigned char *)(*((void *)this + 9) + 796)) {
    return 3758097095;
  }
  uint64_t v4 = AppleOLYHAL::removeSacFreqDK(a2, a3, a4, a4);
  io80211_os_log();
  return v4;
}

AppleBCMWLANCore *AppleBCMWLANCore::handlePeriodicRngReSeedTimer(AppleBCMWLANCore *result, uint64_t a2)
{
  if (*(void *)(*((void *)result + 9) + 6288) == a2)
  {
    uint64_t v2 = result;
    if (AppleBCMWLANCore::featureFlagIsBitSet(result, 81))
    {
      if (AppleBCMWLANCore::setEntropyForRNG(v2))
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v2 + 1848))(v2))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)v2 + 1848))(v2);
          if (CCLogStream::shouldLog())
          {
            uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v2 + 1848))(v2);
            CCLogStream::logAlert(v4, "[dk] %s@%d:Failed to set RNG seed value\n", "handlePeriodicRngReSeedTimer", 57208);
          }
        }
      }
    }
    uint64_t v3 = *(uint64_t (**)(void))(**(void **)(*((void *)v2 + 9) + 6288) + 120);
    return (AppleBCMWLANCore *)v3();
  }
  return result;
}

uint64_t AppleBCMWLANCore::populateRequestedFiles(IOService *this)
{
  OSArrayPtr v2 = OSArray::withCapacity(0x10u);
  if (!v2)
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v45 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v45, "[dk] %s@%d: failed to create requested files\n");
      }
    }
    return 12;
  }
  uint64_t v3 = v2;
  if (!(*(unsigned int (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[337].free
                                                                                      + 376))(this[1].OSObject::OSObjectInterface::__vftable[337].free))
  {
    uint64_t v6 = (const OSDictionary *)(*(uint64_t (**)(void))(*((void *)this[1].OSObject::OSObjectInterface::__vftable[337].free
                                                      + 6)
                                                    + 496))();
    if (!v6)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          unint64_t v40 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v40, "[dk] %s@%d: No FilesDB property found\n", "populateRequestedFiles", 3223);
        }
      }
      return 0;
    }
    uint64_t v7 = v6;
    Object  = OSDictionary::getObject(v6, "default");
    uint64_t v9 = OSMetaClassBase::safeMetaCast(Object, gOSDictionaryMetaClass);
    if (!v9)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          unint64_t v50 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v50, "[dk] %s@%d: No default entry is found in FilesDB\n", "populateRequestedFiles", 3229);
        }
      }
      ((void (*)(const OSDictionary *))v7->release)(v7);
      return 0;
    }
    OSArray::setObject(v3, 0, v9);
    unint64_t v56 = 0;
    if ((checkAcquireDataPropertyNotEmpty((IOService *)this[1].OSObject::OSObjectInterface::__vftable[337].free, "module-instance", &v56, 0, 1uLL, "IOService") & 1) == 0)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          unint64_t v51 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logNotice(v51, "[dk] %s@%d: No module-instance property defined\n", "populateRequestedFiles", 3237);
        }
      }
    }
    if (v56)
    {
      if (OSData::getBytesNoCopy(v56))
      {
        uint64_t BytesNoCopy = (const char *)OSData::getBytesNoCopy(v56);
        OSStringPtr v11 = OSString::withCString(BytesNoCopy);
      }
      else
      {
        OSStringPtr v11 = 0;
      }
      unint64_t v42 = OSDictionary::getObject(v7, v11);
      unint64_t v43 = OSMetaClassBase::safeMetaCast(v42, gOSDictionaryMetaClass);
      if (v43)
      {
        OSArray::setObject(v3, 0, v43);
      }
      else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          unint64_t v54 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logNoticeIf(v54, 0x80uLL, "[dk] %s@%d: No module specific entry is found in FilesDB\n", "populateRequestedFiles", 3247);
        }
      }
      ((void (*)(OSStringPtr))v11->release)(v11);
      if (v56)
      {
        ((void (*)(OSData *))v56->release)(v56);
        unint64_t v56 = 0;
      }
    }
    ((void (*)(const OSDictionary *))v7->release)(v7);
LABEL_67:
    setPropertyHelper(this, "RequestedFiles", v3);
    ((void (*)(OSArray *))v3->release)(v3);
    return 0;
  }
  FileName  = AppleBCMWLANCore::generateFileName(this);
  if (FileName)
  {
    uint64_t v5 = FileName;
    ((void (*)(OSArray *))v3->release)(v3);
    return v5;
  }
  uint64_t v5 = 3758097084;
  int v12 = (const char *)this[1].OSObject::OSObjectInterface::__vftable;
  size_t v13 = strlen(v12 + 1480);
  if (v13 - 249 >= 0xFFFFFFFFFFFFFF01)
  {
    size_t v14 = v13;
    size_t v15 = strlen(v12 + 1992);
    if (v15 - 249 >= 0xFFFFFFFFFFFFFF01)
    {
      size_t v16 = v15;
      size_t v17 = strlen(v12 + 1736);
      if (v17 - 249 >= 0xFFFFFFFFFFFFFF01)
      {
        size_t v18 = v17;
        size_t v19 = strlen(v12 + 2248);
        if (v19 - 249 >= 0xFFFFFFFFFFFFFF01)
        {
          size_t v20 = v19;
          OSDictionaryPtr v21 = OSDictionary::withCapacity(3u);
          if (v21)
          {
            int v22 = v21;
            size_t v55 = v18;
            unsigned int v23 = (char *)this[1].OSObject::OSObjectInterface::__vftable + v14;
            v23[1484]  = 0;
            *((_DWORD *)v23 + 370)  = 0;
            strlcpy((char *)&this[1].OSObject::OSObjectInterface::__vftable[92].free + v14, ".trx", 256 - v14);
            if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog())
              {
                unint64_t v46 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                CCLogStream::logNotice(v46, "[dk] %s@%d:FW %s\n", "populateRequestedFiles", 3140, (const char *)&this[1].OSObject::OSObjectInterface::__vftable[92].free);
              }
            }
            OSStringPtr v24 = OSString::withCString((const char *)&this[1].OSObject::OSObjectInterface::__vftable[92].free);
            OSDictionary::setObject(v22, "Firmware", v24);
            unsigned int v25 = (AppleBCMWLANCore *)strlcpy((char *)&this[1].OSObject::OSObjectInterface::__vftable[190].free, (const char *)&this[1].OSObject::OSObjectInterface::__vftable[92].free, 0xFFuLL);
            AppleBCMWLANCore::generateRequestedImages(v25, (OSDictionary *)this[1].OSObject::OSObjectInterface::__vftable[1230].init, (const char *)&this[1].OSObject::OSObjectInterface::__vftable[190].free, "Firmware", (const char *)1, 0);
            ((void (*)(OSStringPtr))v24->release)(v24);
            if ((*(unsigned int (**)(void))(*((void *)this[1].OSObject::OSObjectInterface::__vftable[337].free + 6)
                                           + 520))())
            {
              strlcpy((char *)&this[1].OSObject::OSObjectInterface::__vftable[108].free + v55, ".sig", 256 - v55);
              if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
              {
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if (CCLogStream::shouldLog())
                {
                  unint64_t v53 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  CCLogStream::logNotice(v53, "[dk] %s@%d:FW Signature %s\n", "populateRequestedFiles", 3151, (const char *)&this[1].OSObject::OSObjectInterface::__vftable[108].free);
                }
              }
              OSStringPtr v26 = OSString::withCString((const char *)&this[1].OSObject::OSObjectInterface::__vftable[108].free);
              OSDictionary::setObject(v22, "Signature", v26);
              unint64_t v27 = (AppleBCMWLANCore *)strlcpy((char *)&this[1].OSObject::OSObjectInterface::__vftable[206].free, (const char *)&this[1].OSObject::OSObjectInterface::__vftable[108].free, 0xFFuLL);
              AppleBCMWLANCore::generateRequestedImages(v27, (OSDictionary *)this[1].OSObject::OSObjectInterface::__vftable[1230].init, (const char *)&this[1].OSObject::OSObjectInterface::__vftable[206].free, "Signature", (const char *)1, 0);
              ((void (*)(OSStringPtr))v26->release)(v26);
            }
            int v28 = (*(uint64_t (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[337].free
                                                                                           + 368))(this[1].OSObject::OSObjectInterface::__vftable[337].free);
            if (v28 == 4399 || v28 == 4388)
            {
              strlcpy((char *)&this[1].OSObject::OSObjectInterface::__vftable[140].free + v20, ".pcfb", 256 - v20);
              if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
              {
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if (CCLogStream::shouldLog())
                {
                  unint64_t v52 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  CCLogStream::logNotice(v52, "[dk] %s@%d:FW Platcfg %s\n", "populateRequestedFiles", 3161, (const char *)&this[1].OSObject::OSObjectInterface::__vftable[140].free);
                }
              }
              OSStringPtr v29 = OSString::withCString((const char *)&this[1].OSObject::OSObjectInterface::__vftable[140].free);
              OSDictionary::setObject(v22, "Platcfg", v29);
              unint64_t v30 = (AppleBCMWLANCore *)strlcpy((char *)&this[1].OSObject::OSObjectInterface::__vftable[254].free, (const char *)&this[1].OSObject::OSObjectInterface::__vftable[140].free, 0xFFuLL);
              AppleBCMWLANCore::generateRequestedImages(v30, (OSDictionary *)this[1].OSObject::OSObjectInterface::__vftable[1230].init, (const char *)&this[1].OSObject::OSObjectInterface::__vftable[254].free, "Platcfg", (const char *)1, 0);
              ((void (*)(OSStringPtr))v29->release)(v29);
            }
            strlcpy((char *)&this[1].OSObject::OSObjectInterface::__vftable[124].free + v16, ".clmb", 256 - v16);
            if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog())
              {
                unint64_t v47 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                CCLogStream::logNotice(v47, "[dk] %s@%d:CLM %s\n", "populateRequestedFiles", 3171, (const char *)&this[1].OSObject::OSObjectInterface::__vftable[124].free);
              }
            }
            OSStringPtr v31 = OSString::withCString((const char *)&this[1].OSObject::OSObjectInterface::__vftable[124].free);
            OSDictionary::setObject(v22, "Regulatory", v31);
            unint64_t v32 = (AppleBCMWLANCore *)strlcpy((char *)&this[1].OSObject::OSObjectInterface::__vftable[222].free, (const char *)&this[1].OSObject::OSObjectInterface::__vftable[124].free, 0xFFuLL);
            AppleBCMWLANCore::generateRequestedImages(v32, (OSDictionary *)this[1].OSObject::OSObjectInterface::__vftable[1230].init, (const char *)&this[1].OSObject::OSObjectInterface::__vftable[222].free, "Regulatory", (const char *)1, 0);
            ((void (*)(OSStringPtr))v31->release)(v31);
            strlcpy((char *)&this[1].OSObject::OSObjectInterface::__vftable[124].free + v16, ".txcb", 256 - v16);
            if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog())
              {
                unint64_t v48 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                CCLogStream::logNotice(v48, "[dk] %s@%d:Tx Cap %s\n", "populateRequestedFiles", 3179, (const char *)&this[1].OSObject::OSObjectInterface::__vftable[124].free);
              }
            }
            OSStringPtr v33 = OSString::withCString((const char *)&this[1].OSObject::OSObjectInterface::__vftable[124].free);
            OSDictionary::setObject(v22, "TxCap", v33);
            unint64_t v34 = (AppleBCMWLANCore *)strlcpy((char *)&this[1].OSObject::OSObjectInterface::__vftable[238].free, (const char *)&this[1].OSObject::OSObjectInterface::__vftable[124].free, 0xFFuLL);
            AppleBCMWLANCore::generateRequestedImages(v34, (OSDictionary *)this[1].OSObject::OSObjectInterface::__vftable[1230].init, (const char *)&this[1].OSObject::OSObjectInterface::__vftable[238].free, "TxCap", 0, 0);
            ((void (*)(OSStringPtr))v33->release)(v33);
            unint64_t v35 = this[1].OSObject::OSObjectInterface::__vftable;
            size_t v36 = strlen((const char *)&v35[76].free);
            if (v36 - 250 >= 0xFFFFFFFFFFFFFF01)
            {
              size_t v37 = v36;
              strlcpy((char *)&v35[76].free + v36, ".txt", 256 - v36);
              if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
              {
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if (CCLogStream::shouldLog())
                {
                  unint64_t v49 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  CCLogStream::logNotice(v49, "[dk] %s@%d:NVRAM %s\n", "populateRequestedFiles", 3195, (const char *)&this[1].OSObject::OSObjectInterface::__vftable[76].free);
                }
              }
              OSStringPtr v38 = OSString::withCString((const char *)&this[1].OSObject::OSObjectInterface::__vftable[76].free);
              OSDictionary::setObject(v22, "NVRAM", v38);
              unint64_t v39 = (AppleBCMWLANCore *)strlcpy((char *)&this[1].OSObject::OSObjectInterface::__vftable[174].free, (const char *)&this[1].OSObject::OSObjectInterface::__vftable[76].free, 0xFFuLL);
              AppleBCMWLANCore::generateRequestedImages(v39, (OSDictionary *)this[1].OSObject::OSObjectInterface::__vftable[1230].init, (const char *)&this[1].OSObject::OSObjectInterface::__vftable[174].free, "NVRAM", (const char *)1, 0);
              ((void (*)(OSStringPtr))v38->release)(v38);
              *((unsigned char *)&this[1].OSObject::OSObjectInterface::__vftable[76].free + v37)  = 0;
              *((unsigned char *)&this[1].OSObject::OSObjectInterface::__vftable[92].free + v14)  = 0;
              *((unsigned char *)&this[1].OSObject::OSObjectInterface::__vftable[108].free + v55)  = 0;
              *((unsigned char *)&this[1].OSObject::OSObjectInterface::__vftable[140].free + v20)  = 0;
              *((unsigned char *)&this[1].OSObject::OSObjectInterface::__vftable[124].free + v16)  = 0;
              OSArray::setObject(v3, 0, v22);
              ((void (*)(OSDictionary *))v22->release)(v22);
              goto LABEL_67;
            }
            return v5;
          }
          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              unint64_t v41 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              CCLogStream::logAlert(v41, "[dk] %s@%d:failed to create file name Dict");
            }
          }
          return 12;
        }
      }
    }
  }
  return v5;
}

uint64_t AppleBCMWLANCore::driverkitAllocSkywalkBusResources(AppleBCMWLANCore *this)
{
  int v2 = AppleBCMWLANCore::driverKitProcessPlatformConfig(this);
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v7, "[dk] %s@%d:%s:%s: driverKitProcessPlatformConfig() rc:%d\n", "driverkitAllocSkywalkBusResources", 5400, "AppleBCMWLANCore", "driverkitAllocSkywalkBusResources", v2);
    }
  }
  if (AppleBCMWLANCore::fetchAndUpdateRingParameters(this))
  {
    if ((*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 5400) + 776))(*(void *)(*((void *)this + 9) + 5400)))
    {
      return 0;
    }
    else
    {
      uint64_t v3 = 3758097097;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v6, "[dk] %s@%d:allocateSkywalkBusResource failed - fetchAndUpdateRingParameters\n");
        }
      }
    }
  }
  else
  {
    uint64_t v3 = 3758097097;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v5, "[dk] %s@%d:%s:%s: Failed to fetchAndUpdateRingParameters()\n");
      }
    }
  }
  return v3;
}

uint64_t AppleBCMWLANCore::initDebugInfo(AppleBCMWLANCore *this)
{
  AppleBCMWLANBusInterface::getLogPipesAndStreams(*(void *)(*((void *)this + 9) + 5400), (void *)(*((void *)this + 9) + 14144), (void *)(*((void *)this + 9) + 14136), (void *)(*((void *)this + 9) + 14120), (void *)(*((void *)this + 9) + 14152), (void *)(*((void *)this + 9) + 14128));
  int v2 = (void *)*((void *)this + 9);
  uint64_t v3 = v2[1767];
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    int v2 = (void *)*((void *)this + 9);
  }
  uint64_t v4 = v2[1768];
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    int v2 = (void *)*((void *)this + 9);
  }
  uint64_t v5 = v2[1769];
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    int v2 = (void *)*((void *)this + 9);
  }
  uint64_t v6 = v2[1765];
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    int v2 = (void *)*((void *)this + 9);
  }
  uint64_t v7 = v2[1766];
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    int v2 = (void *)*((void *)this + 9);
  }
  uint64_t v8 = v2[1768];
  if (v8)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 72))(v8);
    int v2 = (void *)*((void *)this + 9);
  }
  uint64_t v9 = v2[1767];
  if (v9)
  {
    (*(void (**)(uint64_t))(*(void *)v9 + 72))(v9);
    int v2 = (void *)*((void *)this + 9);
  }
  uint64_t v10 = v2[1765];
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 72))(v10);
    int v2 = (void *)*((void *)this + 9);
  }
  if (v2[1767])
  {
    bzero(v14, 0x358uLL);
    uint64_t v15 = -1;
    char v20 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v17 = 0;
    unint64_t bytes = 0xA5A5000000000002;
    OSDataPtr v21 = OSData::withBytes(&bytes, 8uLL);
    __int16 v22 = 150;
    if (AppleBCMWLAN_isVerboseDebugLoggingAllowed())
    {
      LODWORD(v15)  = 127;
      uint64_t v16 = 1;
    }
    OSStringPtr v11 = (const OSMetaClassBase *)CCStream::withPipeAndName();
    *(void *)(*((void *)this + 9) + 14168)  = OSMetaClassBase::safeMetaCast(v11, gCCLogStreamMetaClass);
    ((void (*)(OSDataPtr))v21->release)(v21);
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::start(IOService *this, IOService *a2)
{
  return AppleBCMWLANCore::start(this - 1, a2);
}

uint64_t AppleBCMWLANCore::generateRequestedImages(AppleBCMWLANCore *this, OSDictionary *a2, const char *a3, const char *a4, const char *a5, unsigned int a6)
{
  uint64_t v11 = 3758097115;
  OSDictionaryPtr v12 = OSDictionary::withCapacity(0x10u);
  OSDictionaryPtr v13 = v12;
  if (a2 && a3 && a4)
  {
    if (!v12) {
      return 3758097085;
    }
    OSDictionary::setObject(a2, a3, v12);
    Attributes  = (OSDictionary *)IOImageLoaderImageDictionary::getAttributes(a2, a3);
    if (Attributes)
    {
      uint64_t v16 = Attributes;
      if (IOImageLoaderImageDictionary::setAttributeWithString(Attributes, (OSDictionary *)"imagename", a3, v15)
        && IOImageLoaderImageDictionary::setAttributeWithString(v16, (OSDictionary *)"imagetype", a4, v17)
        && IOImageLoaderImageDictionary::setAttributeWithBoolean(v16, (OSDictionary *)"required", a5)
        && (!a6 || IOImageLoaderImageDictionary::setAttributeWithNumber(v16, (OSDictionary *)"imagesize", a6)))
      {
        uint64_t v11 = 0;
      }
    }
    else
    {
      uint64_t v11 = 3758097086;
    }
  }
  else
  {
    uint64_t v11 = 3758097090;
    if (!v12) {
      return v11;
    }
  }
  ((void (*)(OSDictionaryPtr))v13->release)(v13);
  return v11;
}

uint64_t AppleBCMWLANCore::generateFileName(IOService *this)
{
  uint64_t v2 = 3758097085;
  char bytes = 0;
  anObject  = 0;
  OSDictionaryPtr v3 = OSDictionary::withCapacity(6u);
  if (!v3) {
    return v2;
  }
  uint64_t v4 = v3;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1)  = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)((char *)v144 + 15)  = v5;
  long long v143 = v5;
  v144[0]  = v5;
  v141  = v5;
  long long v142 = v5;
  v139  = v5;
  v140  = v5;
  v137  = v5;
  long long v138 = v5;
  long long v135 = v5;
  long long v136 = v5;
  long long v133 = v5;
  v134  = v5;
  v131  = v5;
  long long v132 = v5;
  uint64_t v6 = *((void *)this[1].OSObject::OSObjectInterface::__vftable[337].free + 6);
  *(_OWORD *)__source  = v5;
  uint64_t v7 = (*(uint64_t (**)(void))(v6 + 408))();
  if (v7)
  {
LABEL_73:
    uint64_t v2 = v7;
    goto LABEL_45;
  }
  Object  = OSDictionary::getObject(v4, "ChipInfo");
  uint64_t v9 = OSMetaClassBase::safeMetaCast(Object, gOSStringMetaClass);
  if (!v9
    || (uint64_t v10 = (const OSString *)v9,
        uint64_t v11 = OSDictionary::getObject(v4, "ModuleInfo"),
        (OSDictionaryPtr v12 = OSMetaClassBase::safeMetaCast(v11, gOSStringMetaClass)) == 0))
  {
    ((void (*)(const OSDictionary *))v4->release)(v4);
    return 3758097084;
  }
  OSDictionaryPtr v13 = (const OSString *)v12;
  CStringNoCopy  = OSString::getCStringNoCopy(v10);
  uint64_t v15 = OSString::getCStringNoCopy(v13);
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      v122  = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logInfo(v122, "[dk] %s@%d:Obtained module info from busInterface is %s, %s\n", "generateFileName", 3767, CStringNoCopy, v15);
    }
  }
  p_free  = &this[1].OSObject::OSObjectInterface::__vftable[76].free;
  *((_OWORD *)p_free + 14)  = 0u;
  *((_OWORD *)p_free + 15)  = 0u;
  *((_OWORD *)p_free + 12)  = 0u;
  *((_OWORD *)p_free + 1AppleBCMWLANCommandMonitor::free(this - 3) = 0u;
  *((_OWORD *)p_free + 10)  = 0u;
  *((_OWORD *)p_free + 11)  = 0u;
  *((_OWORD *)p_free + 8)  = 0u;
  *((_OWORD *)p_free + 9)  = 0u;
  *((_OWORD *)p_free + 6)  = 0u;
  *((_OWORD *)p_free + 7)  = 0u;
  *((_OWORD *)p_free + 4)  = 0u;
  *((_OWORD *)p_free + 5)  = 0u;
  *((_OWORD *)p_free + 2)  = 0u;
  *((_OWORD *)p_free + AppleBCMWLANCommandMonitor::free(this - 3) = 0u;
  *(_OWORD *)p_free  = 0u;
  *((_OWORD *)p_free + 1)  = 0u;
  uint64_t v17 = &this[1].OSObject::OSObjectInterface::__vftable[92].free;
  *((_OWORD *)v17 + 14)  = 0u;
  *((_OWORD *)v17 + 15)  = 0u;
  *((_OWORD *)v17 + 12)  = 0u;
  *((_OWORD *)v17 + 1AppleBCMWLANCommandMonitor::free(this - 3) = 0u;
  *((_OWORD *)v17 + 10)  = 0u;
  *((_OWORD *)v17 + 11)  = 0u;
  *((_OWORD *)v17 + 8)  = 0u;
  *((_OWORD *)v17 + 9)  = 0u;
  *((_OWORD *)v17 + 6)  = 0u;
  *((_OWORD *)v17 + 7)  = 0u;
  *((_OWORD *)v17 + 4)  = 0u;
  *((_OWORD *)v17 + 5)  = 0u;
  *((_OWORD *)v17 + 2)  = 0u;
  *((_OWORD *)v17 + AppleBCMWLANCommandMonitor::free(this - 3) = 0u;
  *(_OWORD *)uint64_t v17 = 0u;
  *((_OWORD *)v17 + 1)  = 0u;
  uint64_t v18 = &this[1].OSObject::OSObjectInterface::__vftable[108].free;
  *((_OWORD *)v18 + 14)  = 0u;
  *((_OWORD *)v18 + 15)  = 0u;
  *((_OWORD *)v18 + 12)  = 0u;
  *((_OWORD *)v18 + 1AppleBCMWLANCommandMonitor::free(this - 3) = 0u;
  *((_OWORD *)v18 + 10)  = 0u;
  *((_OWORD *)v18 + 11)  = 0u;
  *((_OWORD *)v18 + 8)  = 0u;
  *((_OWORD *)v18 + 9)  = 0u;
  *((_OWORD *)v18 + 6)  = 0u;
  *((_OWORD *)v18 + 7)  = 0u;
  *((_OWORD *)v18 + 4)  = 0u;
  *((_OWORD *)v18 + 5)  = 0u;
  *((_OWORD *)v18 + 2)  = 0u;
  *((_OWORD *)v18 + AppleBCMWLANCommandMonitor::free(this - 3) = 0u;
  *(_OWORD *)uint64_t v18 = 0u;
  *((_OWORD *)v18 + 1)  = 0u;
  uint64_t v19 = &this[1].OSObject::OSObjectInterface::__vftable[140].free;
  *((_OWORD *)v19 + 14)  = 0u;
  *((_OWORD *)v19 + 15)  = 0u;
  *((_OWORD *)v19 + 12)  = 0u;
  *((_OWORD *)v19 + 1AppleBCMWLANCommandMonitor::free(this - 3) = 0u;
  *((_OWORD *)v19 + 10)  = 0u;
  *((_OWORD *)v19 + 11)  = 0u;
  *((_OWORD *)v19 + 8)  = 0u;
  *((_OWORD *)v19 + 9)  = 0u;
  *((_OWORD *)v19 + 6)  = 0u;
  *((_OWORD *)v19 + 7)  = 0u;
  *((_OWORD *)v19 + 4)  = 0u;
  *((_OWORD *)v19 + 5)  = 0u;
  *((_OWORD *)v19 + 2)  = 0u;
  *((_OWORD *)v19 + AppleBCMWLANCommandMonitor::free(this - 3) = 0u;
  *(_OWORD *)uint64_t v19 = 0u;
  *((_OWORD *)v19 + 1)  = 0u;
  char v20 = &this[1].OSObject::OSObjectInterface::__vftable[124].free;
  *((_OWORD *)v20 + 14)  = 0u;
  *((_OWORD *)v20 + 15)  = 0u;
  *((_OWORD *)v20 + 12)  = 0u;
  *((_OWORD *)v20 + 1AppleBCMWLANCommandMonitor::free(this - 3) = 0u;
  *((_OWORD *)v20 + 10)  = 0u;
  *((_OWORD *)v20 + 11)  = 0u;
  *((_OWORD *)v20 + 8)  = 0u;
  *((_OWORD *)v20 + 9)  = 0u;
  *((_OWORD *)v20 + 6)  = 0u;
  *((_OWORD *)v20 + 7)  = 0u;
  *((_OWORD *)v20 + 4)  = 0u;
  *((_OWORD *)v20 + 5)  = 0u;
  *((_OWORD *)v20 + 2)  = 0u;
  *((_OWORD *)v20 + AppleBCMWLANCommandMonitor::free(this - 3) = 0u;
  *(_OWORD *)char v20 = 0u;
  *((_OWORD *)v20 + 1)  = 0u;
  AppleBCMWLANCore::copyKeys((AppleBCMWLANCore *)this, __source, CStringNoCopy, 0xFFuLL, 1);
  if (strnstr(CStringNoCopy, "C=", 0xFFuLL))
  {
    size_t v21 = 0;
  }
  else
  {
    __int16 v22 = this[1].OSObject::OSObjectInterface::__vftable;
    unsigned int v23 = (char *)&v22[76].free;
    int v24 = (*(uint64_t (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)v22[337].free + 368))(v22[337].free);
    snprintf(v23, 0x100uLL, "C=%d", v24);
    unsigned int v25 = this[1].OSObject::OSObjectInterface::__vftable;
    size_t v26 = strlen((const char *)&v25[76].free);
    size_t v21 = v26;
    if (!__source[0]) {
      goto LABEL_14;
    }
    size_t v21 = v26 + 1;
    *((unsigned char *)&v25[76].free + v26)  = 95;
  }
  if (__source[0])
  {
    strlcat((char *)&this[1].OSObject::OSObjectInterface::__vftable[76].free, __source, 0xFFuLL);
    size_t v21 = strlen((const char *)&this[1].OSObject::OSObjectInterface::__vftable[76].free);
  }
LABEL_14:
  AppleBCMWLANCore::copyKeys((AppleBCMWLANCore *)this, __source, CStringNoCopy, 0xFFuLL, 0);
  *((unsigned char *)&this[1].OSObject::OSObjectInterface::__vftable[76].free + v21)  = 95;
  *((unsigned char *)&this[1].OSObject::OSObjectInterface::__vftable[76].free + v21 + 1)  = 95;
  strlcat((char *)&this[1].OSObject::OSObjectInterface::__vftable[76].free, __source, 0xFFuLL);
  size_t v27 = strlen((const char *)&this[1].OSObject::OSObjectInterface::__vftable[76].free);
  *((unsigned char *)&this[1].OSObject::OSObjectInterface::__vftable[76].free + v27)  = 47;
  int v28 = this[1].OSObject::OSObjectInterface::__vftable;
  OSStringPtr v29 = (OSObjectInterface_vtbl *)((char *)v28 + 1480);
  int v28 = (OSObjectInterface_vtbl *)((char *)v28 + 1224);
  OSObjectInterface_vtbl v30 = v28[3];
  v29[2]  = v28[2];
  v29[3]  = v30;
  OSObjectInterface_vtbl v31 = v28[1];
  *OSStringPtr v29 = *v28;
  v29[1]  = v31;
  OSObjectInterface_vtbl v32 = v28[7];
  v29[6]  = v28[6];
  v29[7]  = v32;
  OSObjectInterface_vtbl v33 = v28[5];
  v29[4]  = v28[4];
  v29[5]  = v33;
  OSObjectInterface_vtbl v34 = v28[11];
  v29[10]  = v28[10];
  v29[11]  = v34;
  OSObjectInterface_vtbl v35 = v28[9];
  v29[8]  = v28[8];
  v29[9]  = v35;
  OSObjectInterface_vtbl v36 = v28[15];
  v29[14]  = v28[14];
  v29[15]  = v36;
  OSObjectInterface_vtbl v37 = v28[13];
  v29[12]  = v28[12];
  v29[13]  = v37;
  OSStringPtr v38 = this[1].OSObject::OSObjectInterface::__vftable;
  unint64_t v39 = (OSObjectInterface_vtbl *)((char *)v38 + 1736);
  OSStringPtr v38 = (OSObjectInterface_vtbl *)((char *)v38 + 1224);
  OSObjectInterface_vtbl v40 = v38[13];
  v39[12]  = v38[12];
  v39[13]  = v40;
  OSObjectInterface_vtbl v41 = v38[15];
  v39[14]  = v38[14];
  v39[15]  = v41;
  OSObjectInterface_vtbl v42 = v38[9];
  v39[8]  = v38[8];
  v39[9]  = v42;
  OSObjectInterface_vtbl v43 = v38[11];
  v39[10]  = v38[10];
  v39[11]  = v43;
  OSObjectInterface_vtbl v44 = v38[5];
  v39[4]  = v38[4];
  v39[5]  = v44;
  OSObjectInterface_vtbl v45 = v38[7];
  v39[6]  = v38[6];
  v39[7]  = v45;
  OSObjectInterface_vtbl v46 = v38[1];
  *unint64_t v39 = *v38;
  v39[1]  = v46;
  OSObjectInterface_vtbl v47 = v38[3];
  v39[2]  = v38[2];
  v39[3]  = v47;
  unint64_t v48 = this[1].OSObject::OSObjectInterface::__vftable;
  unint64_t v49 = (OSObjectInterface_vtbl *)((char *)v48 + 2248);
  unint64_t v48 = (OSObjectInterface_vtbl *)((char *)v48 + 1224);
  OSObjectInterface_vtbl v50 = v48[13];
  v49[12]  = v48[12];
  v49[13]  = v50;
  OSObjectInterface_vtbl v51 = v48[15];
  v49[14]  = v48[14];
  v49[15]  = v51;
  OSObjectInterface_vtbl v52 = v48[9];
  v49[8]  = v48[8];
  v49[9]  = v52;
  OSObjectInterface_vtbl v53 = v48[11];
  unsigned char v49[10] = v48[10];
  v49[11]  = v53;
  OSObjectInterface_vtbl v54 = v48[5];
  v49[4]  = v48[4];
  v49[5]  = v54;
  OSObjectInterface_vtbl v55 = v48[7];
  unsigned char v49[6] = v48[6];
  v49[7]  = v55;
  OSObjectInterface_vtbl v56 = v48[1];
  *unint64_t v49 = *v48;
  v49[1]  = v56;
  OSObjectInterface_vtbl v57 = v48[3];
  v49[2]  = v48[2];
  v49[3]  = v57;
  AppleBCMWLANCore::copyKeys((AppleBCMWLANCore *)this, __source, v15, 0xFFuLL, 1);
  if (strnstr(v15, "P=", 0xFFuLL)) {
    goto LABEL_15;
  }
  if (acquireProperty<OSObject>((IOService *)this[1].OSObject::OSObjectInterface::__vftable[337].free, "module-instance", &anObject, 1uLL, "IOService"))
  {
    uint64_t v72 = OSMetaClassBase::safeMetaCast(anObject, gOSDataMetaClass);
    if (v72)
    {
      uint64_t v73 = (const OSData *)v72;
      char v74 = 0;
      goto LABEL_55;
    }
  }
  uint64_t v75 = (const OSString *)OSMetaClassBase::safeMetaCast(anObject, gOSStringMetaClass);
  if (!v75)
  {
    uint64_t v2 = 3825173773;
    goto LABEL_45;
  }
  uint64_t v76 = v75;
  uint64_t v77 = OSString::getCStringNoCopy(v75);
  size_t Length = OSString::getLength(v76);
  uint64_t v79 = OSData::withBytes(v77, Length);
  if (v79)
  {
    uint64_t v73 = v79;
    char v74 = 1;
    if (!OSData::appendBytes(v79, &bytes, 1uLL))
    {
      uint64_t v2 = 3758097086;
      goto LABEL_45;
    }
LABEL_55:
    uint64_t v2 = 3825173773;
    if (OSData::getBytesNoCopy(v73))
    {
      *(void *)__s  = 0;
      v128  = 0;
      *(void *)((char *)v129 + 7)  = 0;
      v129[0]  = 0;
      if (IOParseBootArgString("wlan.debug.module-instance", __s, 31))
      {
        int v80 = strlen(__s);
        uint64_t v73 = OSData::withBytes(__s, (v80 + 1));
        char v74 = 1;
      }
      uint64_t v81 = (char *)&this[1].OSObject::OSObjectInterface::__vftable[156].free;
      uint64_t BytesNoCopy = (const char *)OSData::getBytesNoCopy(v73);
      if (OSData::getLength(v73) <= 0x20) {
        size_t v83 = OSData::getLength(v73);
      }
      else {
        size_t v83 = 32;
      }
      strlcpy(v81, BytesNoCopy, v83);
      uint64_t v84 = (char *)&this[1].OSObject::OSObjectInterface::__vftable[92].free;
      uint64_t v85 = (const char *)OSData::getBytesNoCopy(v73);
      strlcat(v84, v85, 0xFFuLL);
      long long v86 = this[1].OSObject::OSObjectInterface::__vftable;
      uint64_t v87 = (OSObjectInterface_vtbl *)((char *)v86 + 1992);
      long long v86 = (OSObjectInterface_vtbl *)((char *)v86 + 1480);
      OSObjectInterface_vtbl v88 = v86[3];
      v87[2]  = v86[2];
      v87[3]  = v88;
      OSObjectInterface_vtbl v89 = v86[1];
      *uint64_t v87 = *v86;
      v87[1]  = v89;
      OSObjectInterface_vtbl v90 = v86[7];
      v87[6]  = v86[6];
      v87[7]  = v90;
      OSObjectInterface_vtbl v91 = v86[5];
      v87[4]  = v86[4];
      v87[5]  = v91;
      OSObjectInterface_vtbl v92 = v86[11];
      v87[10]  = v86[10];
      v87[11]  = v92;
      OSObjectInterface_vtbl v93 = v86[9];
      v87[8]  = v86[8];
      v87[9]  = v93;
      OSObjectInterface_vtbl v94 = v86[15];
      v87[14]  = v86[14];
      v87[15]  = v94;
      OSObjectInterface_vtbl v95 = v86[13];
      v87[12]  = v86[12];
      v87[13]  = v95;
      char v96 = this[1].OSObject::OSObjectInterface::__vftable;
      uint64_t v97 = (OSObjectInterface_vtbl *)((char *)v96 + 1736);
      char v96 = (OSObjectInterface_vtbl *)((char *)v96 + 1480);
      OSObjectInterface_vtbl v98 = v96[13];
      v97[12]  = v96[12];
      v97[13]  = v98;
      OSObjectInterface_vtbl v99 = v96[15];
      v97[14]  = v96[14];
      v97[15]  = v99;
      OSObjectInterface_vtbl v100 = v96[9];
      v97[8]  = v96[8];
      v97[9]  = v100;
      OSObjectInterface_vtbl v101 = v96[11];
      v97[10]  = v96[10];
      v97[11]  = v101;
      v102  = v96[5];
      v97[4]  = v96[4];
      v97[5]  = v102;
      OSObjectInterface_vtbl v103 = v96[7];
      v97[6]  = v96[6];
      v97[7]  = v103;
      v104  = v96[1];
      *uint64_t v97 = *v96;
      v97[1]  = v104;
      OSObjectInterface_vtbl v105 = v96[3];
      v97[2]  = v96[2];
      v97[3]  = v105;
      long long v106 = this[1].OSObject::OSObjectInterface::__vftable;
      long long v107 = (OSObjectInterface_vtbl *)((char *)v106 + 2248);
      long long v106 = (OSObjectInterface_vtbl *)((char *)v106 + 1480);
      OSObjectInterface_vtbl v108 = v106[13];
      v107[12]  = v106[12];
      v107[13]  = v108;
      OSObjectInterface_vtbl v109 = v106[15];
      v107[14]  = v106[14];
      v107[15]  = v109;
      OSObjectInterface_vtbl v110 = v106[9];
      v107[8]  = v106[8];
      v107[9]  = v110;
      OSObjectInterface_vtbl v111 = v106[11];
      v107[10]  = v106[10];
      v107[11]  = v111;
      OSObjectInterface_vtbl v112 = v106[5];
      v107[4]  = v106[4];
      v107[5]  = v112;
      OSObjectInterface_vtbl v113 = v106[7];
      v107[6]  = v106[6];
      v107[7]  = v113;
      v114  = v106[1];
      *long long v107 = *v106;
      v107[1]  = v114;
      v115  = v106[3];
      v107[2]  = v106[2];
      v107[3]  = v115;
      *((unsigned char *)&this[1].OSObject::OSObjectInterface::__vftable[76].free + v27 + 1)  = 80;
      *((unsigned char *)&this[1].OSObject::OSObjectInterface::__vftable[76].free + v27 + 2)  = 61;
      int v116 = (char *)&this[1].OSObject::OSObjectInterface::__vftable[76].free;
      uint64_t v117 = (const char *)OSData::getBytesNoCopy(v73);
      strlcat(v116, v117, 0xFFuLL);
      appended  = AppleBCMWLANCore::appendWskuInfo((AppleBCMWLANCore *)this);
      if (appended)
      {
        uint64_t v2 = appended;
        if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
        {
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (CCLogStream::shouldLog())
          {
            unsigned __int8 v123 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            CCLogStream::logAlert(v123, "[dk] %s@%d:Failed appendWskuInfo(), ret[0x%08x]\n", "generateFileName", 3865, v2);
          }
        }
        goto LABEL_45;
      }
      if (__source[0]) {
        *((unsigned char *)&this[1].OSObject::OSObjectInterface::__vftable[76].free
      }
        + strlen((const char *)&this[1].OSObject::OSObjectInterface::__vftable[76].free))  = 95;
      memset(__dst, 0, sizeof(__dst));
      uint64_t v119 = OSData::getBytesNoCopy(v73);
      if (OSData::getLength(v73) <= 0xFF) {
        size_t v120 = OSData::getLength(v73);
      }
      else {
        size_t v120 = 255;
      }
      memcpy(__dst, v119, v120);
      strlcat((char *)__dst, "-PlatformConfig.plist", 0xFFuLL);
      setPropertyHelper(this, "PlatformConfigFileName", (const char *)__dst);
      strlcpy((char *)&this[1].OSObject::OSObjectInterface::__vftable[158].free, (const char *)__dst, 0xFFuLL);
      char v121 = v74 ^ 1;
      if (!v73) {
        char v121 = 1;
      }
      if ((v121 & 1) == 0) {
        ((void (*)(const OSData *))v73->release)(v73);
      }
LABEL_15:
      if (__source[0]) {
        strlcat((char *)&this[1].OSObject::OSObjectInterface::__vftable[76].free, __source, 0xFFuLL);
      }
      uint64_t v7 = AppleBCMWLANCore::appendRemoteFEMInfo((AppleBCMWLANCore *)this);
      if (!v7)
      {
        size_t v58 = strlen((const char *)&this[1].OSObject::OSObjectInterface::__vftable[76].free);
        AppleBCMWLANCore::copyKeys((AppleBCMWLANCore *)this, __source, v15, 0xFFuLL, 0);
        *((unsigned char *)&this[1].OSObject::OSObjectInterface::__vftable[76].free + v58)  = 95;
        *((unsigned char *)&this[1].OSObject::OSObjectInterface::__vftable[76].free + v58 + 1)  = 95;
        strlcat((char *)&this[1].OSObject::OSObjectInterface::__vftable[76].free, __source, 0xFFuLL);
        BOOL v59 = (const char *)this[1].OSObject::OSObjectInterface::__vftable;
        uint64_t v60 = v59 + 1224;
        size_t v61 = strlen(v59 + 1224);
        uint64_t v2 = 3825174293;
        if (v61 <= 0xF8)
        {
          size_t v62 = v61;
          if (strlen(v59 + 1480) <= 0xF8)
          {
            if (v62)
            {
              do
              {
                if (*v60 == 61) {
                  *uint64_t v60 = 45;
                }
                ++v60;
                --v62;
              }
              while (v62);
              BOOL v59 = (const char *)this[1].OSObject::OSObjectInterface::__vftable;
            }
            uint64_t v63 = v59 + 1480;
            size_t v64 = strlen(v59 + 1480);
            if (v64)
            {
              do
              {
                if (*v63 == 61) {
                  unsigned char *v63 = 45;
                }
                ++v63;
                --v64;
              }
              while (v64);
              BOOL v59 = (const char *)this[1].OSObject::OSObjectInterface::__vftable;
            }
            uint64_t v65 = v59 + 1736;
            size_t v66 = strlen(v59 + 1736);
            if (v66)
            {
              do
              {
                if (*v65 == 61) {
                  *uint64_t v65 = 45;
                }
                ++v65;
                --v66;
              }
              while (v66);
              BOOL v59 = (const char *)this[1].OSObject::OSObjectInterface::__vftable;
            }
            uint64_t v67 = v59 + 2248;
            size_t v68 = strlen(v59 + 2248);
            if (v68)
            {
              do
              {
                if (*v67 == 61) {
                  unsigned char *v67 = 45;
                }
                ++v67;
                --v68;
              }
              while (v68);
              BOOL v59 = (const char *)this[1].OSObject::OSObjectInterface::__vftable;
            }
            unsigned int v69 = v59 + 1992;
            for (size_t i = strlen(v59 + 1992); i; --i)
            {
              if (*v69 == 61) {
                *unsigned int v69 = 45;
              }
              ++v69;
            }
            uint64_t v2 = 0;
          }
        }
        goto LABEL_45;
      }
      goto LABEL_73;
    }
  }
LABEL_45:
  if (anObject)
  {
    ((void (*)(OSMetaClassBase *))anObject->release)(anObject);
    anObject  = 0;
  }
  ((void (*)(const OSDictionary *))v4->release)(v4);
  return v2;
}

unint64_t AppleBCMWLANCore::copyKeys(AppleBCMWLANCore *this, char *a2, const char *a3, size_t a4, int a5)
{
  bzero(a2, a4);
  unint64_t result = strlen(a3);
  if (result - 1 >= a4) {
    return result;
  }
  size_t v10 = 0;
  size_t v11 = 0;
  unint64_t v12 = 0;
  unint64_t v13 = 0;
  int v14 = 0;
  while (1)
  {
    int v15 = a3[v13];
    if (v14 != 2)
    {
      if (v14 == 1)
      {
        BOOL v17 = v15 == 61;
        int v14 = 2 * v17;
        size_t v11 = 2 * v17;
      }
      else if (!v14)
      {
        if (a5 && (char)v15 >= 65 && (char)v15 < 91
          || ((v14 = 0, (char)v15 > 96) ? (int v16 = a5 ^ 1) : (int v16 = 0), v16 == 1 && (char)v15 <= 122))
        {
          int v14 = 1;
          unint64_t v12 = v13;
        }
      }
      goto LABEL_26;
    }
    if (v13 != result - 1 && v15 != 32)
    {
      int v14 = 2;
      ++v11;
      goto LABEL_26;
    }
    if (v15 != 32) {
      ++v11;
    }
    if (v10)
    {
      size_t v18 = v10 + 1;
      a2[v10]  = 95;
    }
    else
    {
      size_t v18 = 0;
    }
    size_t v10 = v18 + v11;
    if (v18 + v11 >= a4) {
      break;
    }
    memcpy(&a2[v18], &a3[v12], v11);
    int v14 = 0;
LABEL_26:
    ++v13;
    unint64_t result = strlen(a3);
    if (v13 >= result || v10 >= a4) {
      return result;
    }
  }
  unint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    unint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      return CCLogStream::logAlert(v19, "[dk] %s@%d:key too long! index %ld, mode %d, cur %c, start %ld, keylen %ld copyindex %ld\n", "copyKeys", 3327, v13, 0, a3[v13], v12, v11, v18);
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::verifyFileSelect(AppleBCMWLANCore *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!(*(unsigned int (**)(void))(**(void **)(*((void *)this + 9) + 5400) + 376))(*(void *)(*((void *)this + 9) + 5400))) {
    return 0;
  }
  uint64_t result = 3825174285;
  if (a2) {
    return result;
  }
  if (a3) {
    return 3825174286;
  }
  if (a4) {
    return 3825174287;
  }
  else {
    return 0;
  }
}

uint64_t AppleBCMWLANCore::convertChannelNumToCenterFreq(uint64_t a1, unint64_t a2, __int16 a3, int a4)
{
  unint64_t v6 = HIDWORD(a2);
  if ((a3 & 0x2000) != 0) {
    int v7 = 1;
  }
  else {
    int v7 = 3;
  }
  if ((a3 & 8) != 0) {
    int v7 = 0;
  }
  if (v7 == 3)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        size_t v11 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v11, "[dk] %s@%d:convertChannelNumToCenterFreq: 5G channel  = %d, center channel  = %d, bandwidth  = %d\n", "convertChannelNumToCenterFreq", 3402, v6, v6, a4);
      }
    }
    int v9 = 5 * v6;
    int v10 = 5000;
  }
  else
  {
    if (v7 != 1) {
      return 1000000 * kChanFreqTableMH24G[v6];
    }
    if (HIDWORD(a2) == 2) {
      return 5935000000;
    }
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        unint64_t v12 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v12, "[dk] %s@%d:convertChannelNumToCenterFreq: 6G channel  = %d, center channel  = %d, bandwidth  = %d\n", "convertChannelNumToCenterFreq", 3416, v6, v6, a4);
      }
    }
    int v9 = 5 * v6;
    int v10 = 5950;
  }
  return 1000000 * (v9 + v10);
}

uint64_t AppleBCMWLANCore::reportWiFiChanTransitionToSac(void *a1, unint64_t a2, int a3, unsigned int a4)
{
  unint64_t v8 = HIDWORD(a2);
  uint64_t v9 = *(unsigned int *)(a1[9] + 788);
  uint64_t v10 = AppleBCMWLANCore::convertChannelNumToCenterFreq((uint64_t)a1, a2, a3, 9200000);
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = a1[9];
    if (*(unsigned char *)(v12 + 796))
    {
      if (a4)
      {
        if (*(_DWORD *)(v12 + 788) == v8 && ((*(_DWORD *)(v12 + 792) ^ a3) & 0x2018) == 0)
        {
          uint64_t v18 = 3758097095;
LABEL_22:
          if (!(*(uint64_t (**)(void *))(*a1 + 1848))(a1)) {
            return v18;
          }
          (*(void (**)(void *))(*a1 + 1848))(a1);
          if (!CCLogStream::shouldLog()) {
            return v18;
          }
          char v20 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          uint64_t v32 = v11;
          uint64_t v33 = 9200000;
          uint64_t v30 = v9;
          uint64_t v31 = *(unsigned int *)(a1[9] + 788);
          unint64_t v28 = v8;
          uint64_t v29 = a4;
          uint64_t v27 = v18;
          uint64_t v21 = 3481;
          __int16 v22 = "[dk] %s@%d: Report SAC: retval[0x%08x], channel[%u], onChan[%u], last[%u] ivars->fLastChanForSAC[%u], VI"
                "CTIM[ freq %llu, bw %u ]\n";
LABEL_27:
          CCLogStream::logAlert(v20, v22, "reportWiFiChanTransitionToSac", v21, v27, v28, v29, v30, v31, v32, v33);
          return v18;
        }
        uint64_t v13 = (*(uint64_t (**)(void *))(*a1 + 104))(a1);
        uint64_t v14 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, void, void))(*(void *)v13 + 56))(v13, *(void *)(a1[9] + 18136), v11, 9200000, 0, 0);
        uint64_t v15 = a1[9];
        if (*(_DWORD *)(v15 + 788))
        {
          uint64_t v11 = AppleBCMWLANCore::convertChannelNumToCenterFreq((uint64_t)a1, *(void *)(v15 + 784), *(_DWORD *)(v15 + 792), *(_DWORD *)(v15 + 35948));
          uint64_t v16 = *(unsigned int *)(a1[9] + 35948);
          uint64_t v17 = (*(uint64_t (**)(void *))(*a1 + 104))(a1);
          uint64_t v18 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, void, void))(*(void *)v17 + 56))(v17, *(void *)(a1[9] + 18144), v11, v16, 0, 0);
          uint64_t v15 = a1[9];
        }
        else
        {
          uint64_t v18 = v14;
        }
        *(void *)(v15 + 784)  = a2;
        *(_DWORD *)(v15 + 792)  = a3;
        int v25 = 9200000;
      }
      else
      {
        if (*(_DWORD *)(v12 + 788) && (int v23 = *(_DWORD *)(v12 + 35948)) != 0)
        {
          uint64_t v11 = AppleBCMWLANCore::convertChannelNumToCenterFreq((uint64_t)a1, *(void *)(v12 + 784), *(_DWORD *)(v12 + 792), v23);
          int v24 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(void *))(*a1 + 104))(a1) + 56);
        }
        else
        {
          int v24 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(void *))(*a1 + 104))(a1) + 56);
        }
        uint64_t v18 = v24();
        int v25 = 0;
        *(_DWORD *)(a1[9] + 788)  = 0;
      }
      *(_DWORD *)(a1[9] + 35948)  = v25;
      goto LABEL_22;
    }
    uint64_t v18 = 3758097095;
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        char v20 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        uint64_t v31 = *(unsigned int *)(a1[9] + 788);
        uint64_t v32 = v11;
        uint64_t v29 = a4;
        uint64_t v30 = v9;
        uint64_t v27 = 3758097095;
        unint64_t v28 = v8;
        uint64_t v21 = 3451;
        __int16 v22 = "[dk] %s@%d: Report SAC: DISABLED: retval[0x%08x], channel[%u], onChan[%u], last[%u] fLastChanForSAC[%u], V"
              "ICTIM[ freq %llu]\n";
        goto LABEL_27;
      }
    }
  }
  else
  {
    uint64_t v18 = 3758097095;
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v19 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v19, "[dk] %s@%d:Invalid center frequency: channel[%u], onChan[%u], ivars->fLastChanForSAC[%u]\n");
      }
    }
  }
  return v18;
}

uint64_t AppleBCMWLANCore::appendWskuInfo(AppleBCMWLANCore *this)
{
  int v11 = -1431655766;
  uint64_t v10 = 0;
  if (IOParseBootArgNumber("wlan.debug.nowsku", &v11, 4))
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v2 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v2, "[dk] %s@%d:Skip WSKU by boot-args\n", "appendWskuInfo", 3581);
      }
    }
    return 0;
  }
  if (checkAcquireDataPropertyNotEmpty(*(IOService **)(*((void *)this + 9) + 5400), "wlan.wsku.bypass", &v10, 0, 1uLL, "IOService"))
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v8, "[dk] %s@%d:Skip WSKU by EDT Property", "appendWskuInfo", 3586);
      }
    }
    if (v10) {
      ((void (*)(OSData *))v10->release)(v10);
    }
    return 0;
  }
  uint64_t v9 = 0;
  if (checkAcquireDataPropertyNotEmpty(*(IOService **)(*((void *)this + 9) + 5400), "wifi-antenna-sku-info", &v9, 0x10uLL, 1uLL, "IOService"))
  {
    uint64_t v5 = *((void *)this + 9);
    *(_OWORD *)(v5 + 4352)  = *(_OWORD *)OSData::getBytesNoCopy(v9, 0, 0x10uLL);
    uint64_t v6 = *((void *)this + 9);
    if (*(_DWORD *)(v6 + 4352) != 1 || *(_DWORD *)(v6 + 4356))
    {
      uint64_t v3 = 3825174292;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          int v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v7, "[dk] %s@%d:Invalid WSKU format, version[0x%08x] reserved[0x%08x]\n", "appendWskuInfo", 3596, *(_DWORD *)(*((void *)this + 9) + 4352), *(_DWORD *)(*((void *)this + 9) + 4356));
        }
      }
      goto LABEL_18;
    }
    strlcat((char *)(v6 + 1992), "=", 0x100uLL);
    strlcat((char *)(*((void *)this + 9) + 1992), (const char *)(*((void *)this + 9) + 4360), 0x100uLL);
    strlcat((char *)(*((void *)this + 9) + 1224), "=", 0x100uLL);
    strlcat((char *)(*((void *)this + 9) + 1224), (const char *)(*((void *)this + 9) + 4360), 0x100uLL);
    strlcat((char *)(*((void *)this + 9) + 2248), "=", 0x100uLL);
    strlcat((char *)(*((void *)this + 9) + 2248), (const char *)(*((void *)this + 9) + 4360), 0x100uLL);
  }
  uint64_t v3 = 0;
LABEL_18:
  if (v9) {
    ((void (*)(OSData *))v9->release)(v9);
  }
  return v3;
}

uint64_t AppleBCMWLANCore::appendRemoteFEMInfo(AppleBCMWLANCore *this)
{
  uint64_t v31 = 0;
  if (checkAcquireDataPropertyNotEmpty(*(IOService **)(*((void *)this + 9) + 5400), "wifi-rfem-info", &v31, 0x18uLL, 1uLL, "IOService"))
  {
    uint64_t v2 = 3825174301;
    uint64_t v3 = *((void *)this + 9);
    uint64_t BytesNoCopy = OSData::getBytesNoCopy(v31, 0, 0x18uLL);
    long long v5 = *(_OWORD *)BytesNoCopy;
    *(void *)(v3 + 4384)  = BytesNoCopy[2];
    *(_OWORD *)(v3 + 4368)  = v5;
    uint64_t v6 = *((void *)this + 9);
    if (*(_DWORD *)(v6 + 4368) != 1 || *(_DWORD *)(v6 + 4372)) {
      goto LABEL_54;
    }
    if (*(_WORD *)(v6 + 4376) != 21837 || *(unsigned char *)(v6 + 4378) != 82)
    {
      unint64_t v8 = (_WORD *)(v6 + 4376);
      if ((*(_WORD *)(v6 + 4376) != 19283 || *(unsigned char *)(v6 + 4378) != 89)
        && (*v8 != 21333 || *(unsigned char *)(v6 + 4378) != 73)
        && (*v8 != 17218 || *(unsigned char *)(v6 + 4378) != 77))
      {
        goto LABEL_54;
      }
    }
    if (*(_WORD *)(v6 + 4384) != 21837 || *(unsigned char *)(v6 + 4386) != 82)
    {
      uint64_t v13 = (_WORD *)(v6 + 4384);
      if ((*(_WORD *)(v6 + 4384) != 19283 || *(unsigned char *)(v6 + 4386) != 89)
        && (*v13 != 21333 || *(unsigned char *)(v6 + 4386) != 73)
        && (*v13 != 17218 || *(unsigned char *)(v6 + 4386) != 77))
      {
        goto LABEL_54;
      }
    }
    strlcat((char *)(v6 + 1224), "_F-", 0x100uLL);
    uint64_t v17 = *((void *)this + 9);
    int v18 = *(char *)(v17 + 4376);
    switch(v18)
    {
      case 'B':
        uint64_t v19 = "b";
        break;
      case 'M':
        uint64_t v19 = "m";
        break;
      case 'S':
        uint64_t v19 = "s";
        break;
      default:
        uint64_t v19 = "u";
        break;
    }
    strlcat((char *)(v17 + 1224), v19, 0x100uLL);
    uint64_t v20 = *((void *)this + 9);
    int v21 = *(char *)(v20 + 4384);
    switch(v21)
    {
      case 'B':
        __int16 v22 = "b";
        break;
      case 'M':
        __int16 v22 = "m";
        break;
      case 'S':
        __int16 v22 = "s";
        break;
      default:
        __int16 v22 = "u";
        break;
    }
    strlcat((char *)(v20 + 1224), v22, 0x100uLL);
  }
  uint64_t v2 = 0;
LABEL_54:
  int v23 = v31;
  if (v31) {
    goto LABEL_68;
  }
  uint64_t v30 = 0;
  if (IOParseBootArgNumber("wlan.factory", &v30, 8) && (v30 & 0x100) != 0)
  {
    unsigned int v24 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 5400) + 368))(*(void *)(*((void *)this + 9) + 5400));
    if (v24 >> 1 >= 0x88D)
    {
      unsigned int v25 = v24;
      strlcat((char *)(*((void *)this + 9) + 1224), "_F-", 0x100uLL);
      if (v25 == 4378) {
        char v26 = 85;
      }
      else {
        char v26 = 77;
      }
      if (v25 == 4378) {
        uint64_t v27 = "u";
      }
      else {
        uint64_t v27 = "m";
      }
      *(unsigned char *)(*((void *)this + 9) + 4376)  = v26;
      strlcat((char *)(*((void *)this + 9) + 1224), v27, 0x100uLL);
      *(unsigned char *)(*((void *)this + 9) + 4384)  = 83;
      strlcat((char *)(*((void *)this + 9) + 1224), "s", 0x100uLL);
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v29 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v29, "[dk] %s@%d:no rfem info found from device tree, fake it as %c%c\n", "appendRemoteFEMInfo", 3694, *(char *)(*((void *)this + 9) + 4376), *(char *)(*((void *)this + 9) + 4384));
        }
      }
    }
  }
  int v23 = v31;
  if (v31) {
LABEL_68:
  }
    ((void (*)(OSData *))v23->release)(v23);
  return v2;
}

uint64_t acquireProperty<OSObject>(IOService *a1, const char *a2, OSMetaClassBase **a3, unint64_t a4, const char *a5)
{
  anObject  = 0;
  uint64_t result = acquirePropertyWithString(a1, a2, (OSContainer **)&anObject, a4, a5);
  if (result)
  {
    int v7 = OSMetaClassBase::safeMetaCast(anObject, gOSObjectMetaClass);
    if (v7)
    {
      *a3  = v7;
      return 1;
    }
    else
    {
      uint64_t result = (uint64_t)anObject;
      if (anObject)
      {
        ((void (*)(OSMetaClassBase *))anObject->release)(anObject);
        return 0;
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::stopResources(AppleBCMWLANCore *this)
{
  IOLog("AppleBCMWLANCore::stopResources[%u] this[%p]\n", 4157, this);
  int v2 = 1;
  *(unsigned char *)(*((void *)this + 9) + 18269)  = 1;
  uint64_t v3 = *((void *)this + 9);
  uint64_t v4 = *(void *)(v3 + 5416);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 72))(v4);
    uint64_t v5 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
    (*(void (**)(uint64_t, void))(*(void *)v5 + 72))(v5, *(void *)(*((void *)this + 9) + 5416));
    uint64_t v3 = *((void *)this + 9);
  }
  atomic_compare_exchange_strong((atomic_uint *volatile)(v3 + 4416), (unsigned int *)&v2, 0);
  if (v2 == 1)
  {
    IOService::AdjustBusy((IOService *)this, -1, 0);
    unsigned int v27 = 0;
    IOService::GetBusyState((IOService *)this, &v27, 0);
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        char v26 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v26, "[dk] %s@%d:AdjustBusy(-1) busystate %u, fAdjustBusyCnt %u\n", "stopResources", 4170, v27, *(_DWORD *)(*((void *)this + 9) + 4416));
      }
    }
    io80211_os_log();
  }
  uint64_t v6 = *((void *)this + 9);
  uint64_t v7 = *(void *)(v6 + 29784);
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 72))(v7);
    uint64_t v8 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
    (*(void (**)(uint64_t, void))(*(void *)v8 + 72))(v8, *(void *)(*((void *)this + 9) + 29784));
    uint64_t v6 = *((void *)this + 9);
  }
  uint64_t v9 = *(void *)(v6 + 6280);
  if (v9)
  {
    (*(void (**)(uint64_t))(*(void *)v9 + 72))(v9);
    uint64_t v6 = *((void *)this + 9);
  }
  uint64_t v10 = *(void *)(v6 + 6240);
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 72))(v10);
    uint64_t v6 = *((void *)this + 9);
  }
  uint64_t v11 = *(void *)(v6 + 6232);
  if (v11)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 72))(v11);
    uint64_t v6 = *((void *)this + 9);
  }
  uint64_t v12 = *(void *)(v6 + 4424);
  if (v12)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 72))(v12);
    uint64_t v6 = *((void *)this + 9);
  }
  uint64_t v13 = *(void *)(v6 + 6288);
  if (v13)
  {
    (*(void (**)(uint64_t))(*(void *)v13 + 72))(v13);
    uint64_t v6 = *((void *)this + 9);
  }
  uint64_t v14 = *(void *)(v6 + 6248);
  if (v14)
  {
    (*(void (**)(uint64_t))(*(void *)v14 + 72))(v14);
    uint64_t v6 = *((void *)this + 9);
  }
  uint64_t v15 = *(void *)(v6 + 6256);
  if (v15)
  {
    (*(void (**)(uint64_t))(*(void *)v15 + 72))(v15);
    uint64_t v6 = *((void *)this + 9);
  }
  if (*(unsigned char *)(v6 + 4496))
  {
    uint64_t v16 = *(void *)(v6 + 6264);
    if (v16)
    {
      (*(void (**)(uint64_t))(*(void *)v16 + 72))(v16);
      uint64_t v6 = *((void *)this + 9);
    }
    uint64_t v17 = *(void *)(v6 + 6272);
    if (v17)
    {
      (*(void (**)(uint64_t))(*(void *)v17 + 72))(v17);
      uint64_t v6 = *((void *)this + 9);
    }
  }
  int v18 = *(AppleBCMWLANBGScanAdapter **)(v6 + 5504);
  if (v18)
  {
    AppleBCMWLANBGScanAdapter::cancelScanPrivacyMacTimer(v18);
    uint64_t v6 = *((void *)this + 9);
  }
  uint64_t v19 = *(CCFaultReporter **)(v6 + 5544);
  if (v19)
  {
    CCFaultReporter::unregisterCallbacks(v19, (OSObject *)this);
    uint64_t v6 = *((void *)this + 9);
  }
  uint64_t v20 = *(void *)(v6 + 11320);
  if (v20)
  {
    (*(void (**)(uint64_t))(*(void *)v20 + 16))(v20);
    *(void *)(*((void *)this + 9) + 11320)  = 0;
    uint64_t v6 = *((void *)this + 9);
  }
  uint64_t v21 = *(void *)(v6 + 11312);
  if (v21)
  {
    (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
    *(void *)(*((void *)this + 9) + 11312)  = 0;
    uint64_t v6 = *((void *)this + 9);
  }
  uint64_t v22 = *(void *)(v6 + 29800);
  if (v22)
  {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
    *(void *)(*((void *)this + 9) + 29800)  = 0;
    uint64_t v6 = *((void *)this + 9);
  }
  uint64_t v23 = *(void *)(v6 + 29808);
  if (v23)
  {
    (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
    *(void *)(*((void *)this + 9) + 29808)  = 0;
    uint64_t v6 = *((void *)this + 9);
  }
  uint64_t v24 = *(void *)(v6 + 14216);
  if (v24)
  {
    (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
    *(void *)(*((void *)this + 9) + 14216)  = 0;
  }
  return IOLog("AppleBCMWLANCore::stopResources[%u] this[%p]\n", 4248, this);
}

uint64_t AppleBCMWLANCore::destroyDebugInfo(AppleBCMWLANCore *this)
{
  int v2 = (void *)*((void *)this + 9);
  uint64_t v3 = v2[1766];
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    *(void *)(*((void *)this + 9) + 14128)  = 0;
    int v2 = (void *)*((void *)this + 9);
  }
  uint64_t v4 = v2[1769];
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
    *(void *)(*((void *)this + 9) + 14152)  = 0;
    int v2 = (void *)*((void *)this + 9);
  }
  uint64_t v5 = v2[1771];
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    *(void *)(*((void *)this + 9) + 14168)  = 0;
    int v2 = (void *)*((void *)this + 9);
  }
  uint64_t v6 = v2[1765];
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    *(void *)(*((void *)this + 9) + 14120)  = 0;
    int v2 = (void *)*((void *)this + 9);
  }
  uint64_t v7 = v2[1767];
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    *(void *)(*((void *)this + 9) + 14136)  = 0;
    int v2 = (void *)*((void *)this + 9);
  }
  uint64_t v8 = v2[1768];
  if (v8)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
    *(void *)(*((void *)this + 9) + 14144)  = 0;
  }
  return 0;
}

uint64_t AppleBCMWLANCore::getLogger(AppleBCMWLANCore *this)
{
  return *(void *)(*((void *)this + 9) + 14160);
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getLogger(AppleBCMWLANCore *this)
{
  return *(void *)(*((void *)this + 3) + 14160);
}

uint64_t AppleBCMWLANCore::getCommander(AppleBCMWLANCore *this)
{
  return *(void *)(*((void *)this + 9) + 5416);
}

uint64_t AppleBCMWLANCore::getBssManager(AppleBCMWLANCore *this)
{
  return *(void *)(*((void *)this + 9) + 5440);
}

uint64_t AppleBCMWLANCore::getConfigManager(AppleBCMWLANCore *this)
{
  return *(void *)(*((void *)this + 9) + 5472);
}

uint64_t AppleBCMWLANCore::getIOReporterPerSlice(AppleBCMWLANCore *this)
{
  return *(void *)(*((void *)this + 9) + 5520);
}

uint64_t AppleBCMWLANCore::getPowerManager(AppleBCMWLANCore *this)
{
  return *(void *)(*((void *)this + 9) + 5528);
}

uint64_t AppleBCMWLANCore::getTxPowerManager(AppleBCMWLANCore *this)
{
  return *(void *)(*((void *)this + 9) + 5536);
}

uint64_t AppleBCMWLANCore::getWnmAdaptor(AppleBCMWLANCore *this)
{
  return *(void *)(*((void *)this + 9) + 5560);
}

uint64_t AppleBCMWLANCore::get11beAdapter(AppleBCMWLANCore *this)
{
  return *(void *)(*((void *)this + 9) + 5592);
}

uint64_t AppleBCMWLANCore::getNetAdapter(AppleBCMWLANCore *this)
{
  return *(void *)(*((void *)this + 9) + 5600);
}

uint64_t AppleBCMWLANCore::getLQM(AppleBCMWLANCore *this)
{
  return *(void *)(*((void *)this + 9) + 5608);
}

uint64_t AppleBCMWLANCore::syncChipTimer(AppleBCMWLANCore *this)
{
  uint64_t v1 = *((void *)this + 9);
  if ((*(unsigned char *)(v1 + 10388) & 1) != 0 && ((int v2 = *(_DWORD *)(v1 + 19708), v2 != 4) ? (v3 = v2 == 1) : (v3 = 1), v3)) {
    return AppleBCMWLANTimeKeeper::synchronizeTime(*(AppleBCMWLANTimeKeeper **)(v1 + 5464));
  }
  else {
    return 3758097111;
  }
}

BOOL AppleBCMWLANCore::isPoweredOnOrRestricted(AppleBCMWLANCore *this)
{
  uint64_t v1 = *((void *)this + 9);
  if ((*(unsigned char *)(v1 + 10388) & 1) == 0) {
    return 0;
  }
  int v3 = *(_DWORD *)(v1 + 19708);
  return v3 == 1 || v3 == 4;
}

OSMetaClassBase *AppleBCMWLANCore::processRxEvents_WithEventQueue(AppleBCMWLANCore *a1, AppleBCMWLANObjectQueue **a2)
{
  (*(void (**)(void))(*(void *)*a2 + 56))();
  kdebug_trace();
  if ((*(unsigned int (**)(void))(*(void *)*a2 + 56))())
  {
    while (1)
    {
      uint64_t v4 = (const OSMetaClassBase *)AppleBCMWLANObjectQueue::dequeue(*a2);
      uint64_t result = OSMetaClassBase::safeMetaCast(v4, gIO80211BufferMetaClass);
      if (!result) {
        break;
      }
      uint64_t v6 = (IO80211Buffer *)result;
      unint64_t Length = IO80211Buffer::getLength((IO80211Buffer *)result);
      uint64_t BytesNoCopy = (const void *)IO80211Buffer::getBytesNoCopy(v6);
      AppleBCMWLANCore::handleRxEventFrame(a1, Length, BytesNoCopy);
      IO80211Buffer::returnBuffer(v6);
      if (!(*(unsigned int (**)(void))(*(void *)*a2 + 56))()) {
        goto LABEL_4;
      }
    }
  }
  else
  {
LABEL_4:
    return (OSMetaClassBase *)kdebug_trace();
  }
  return result;
}

uint64_t AppleBCMWLANCore::collectSPMIHEBResetStats(IOService *this, unsigned int a2)
{
  OSStringPtr v4 = OSString::withCString("com.apple.wifi.SPMIHEB.resetStats");
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = OSDictionary::withCapacity(1u);
    if (v6)
    {
      OSStringPtr v7 = OSString::withCString("resetCount");
      if (v7)
      {
        uint64_t v8 = v7;
        OSNumberPtr v9 = OSNumber::withNumber(a2, 0x20uLL);
        if (v9)
        {
          OSDictionary::setObject(v6, v8, v9);
          uint64_t v10 = IOService::CoreAnalyticsSendEvent(this, 0, v5, v6, 0);
          if (v10)
          {
            uint64_t v11 = v10;
            if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog())
              {
                uint64_t v12 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                CStringNoCopy  = OSString::getCStringNoCopy(v5);
                uint64_t v14 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v11);
                CCLogStream::logEmergency(v12, "[dk] %s@%d:Failed to send CoreAnalytics for event %s : %s\n", "collectSPMIHEBResetStats", 4595, CStringNoCopy, v14);
              }
            }
          }
          if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)
            || (((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this),
                (CCLogStream::shouldLogConsole() & 1) == 0))
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf  = 67109634;
              int v22 = 73;
              __int16 v23 = 2080;
              uint64_t v24 = "collectSPMIHEBResetStats";
              __int16 v25 = 1024;
              int v26 = 4598;
              _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: sent SPMI reset stats to coreAnalytics\n", buf, 0x18u);
            }
          }
          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v20 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              CCLogStream::logInfo(v20, "[dk] %s@%d:sent SPMI reset stats to coreAnalytics\n", "collectSPMIHEBResetStats", 4598);
            }
          }
        }
        else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
        {
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v19 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            CCLogStream::logAlert(v19, "[dk] %s@%d:Fail to allocate valResetCount\n", "collectSPMIHEBResetStats", 4589);
          }
        }
        ((void (*)(const OSObject *))v8->release)(v8);
        if (v9) {
          ((void (*)(OSNumberPtr))v9->release)(v9);
        }
      }
      else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          int v18 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v18, "[dk] %s@%d:Fail to allocate keyResetCount\n");
        }
      }
    }
    else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v17 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v17, "[dk] %s@%d:Fail to allocate eventPayload\n");
      }
    }
    uint64_t result = ((uint64_t (*)(OSString *))v5->release)(v5);
    if (v6) {
      return ((uint64_t (*)(OSDictionary *))v6->release)(v6);
    }
  }
  else
  {
    uint64_t result = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (result)
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v16 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        return CCLogStream::logAlert(v16, "[dk] %s@%d:Fail to allocate eventName\n", "collectSPMIHEBResetStats", 4582);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::isNanPhFeatureEnabled(AppleBCMWLANCore *this)
{
  return *(unsigned __int8 *)(*((void *)this + 9) + 29942);
}

uint64_t AppleBCMWLANCore::getTxPktCounter(AppleBCMWLANCore *this)
{
  int64x2_t v3 = 0u;
  int64x2_t v4 = 0u;
  uint64_t v1 = *(void *)(*((void *)this + 9) + 11304);
  if (v1) {
    (*(void (**)(uint64_t, int64x2_t *))(*(void *)v1 + 808))(v1, &v3);
  }
  return vaddvq_s64(vaddq_s64(v4, v3));
}

uint64_t AppleBCMWLANCore::getNanRxPktCounter(AppleBCMWLANCore *this)
{
  return vaddvq_s64(vaddq_s64(*(int64x2_t *)(*((void *)this + 9) + 10896), *(int64x2_t *)(*((void *)this + 9)
                                                                                            + 10880)));
}

uint64_t AppleBCMWLANCore::updateWmeRxCountersNDIRxCounter(uint64_t this, uint64_t a2)
{
  *(void *)(*(void *)(this + 72) + 10880) += a2;
  return this;
}

uint64_t AppleBCMWLANCore::getRealTimeAwdlTxPktCounter(AppleBCMWLANCore *this)
{
  long long v2 = 0u;
  long long v3 = 0u;
  uint64_t result = *(void *)(*((void *)this + 9) + 11312);
  if (result)
  {
    (*(void (**)(uint64_t, long long *))(*(void *)result + 808))(result, &v2);
    return *((void *)&v3 + 1) + v3;
  }
  return result;
}

uint64_t AppleBCMWLANCore::getRealTimeNANTxPktCounter(AppleBCMWLANCore *this)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t v2 = *((void *)this + 9);
  uint64_t v3 = *(void *)(v2 + 29800);
  if (v3)
  {
    (*(void (**)(uint64_t, long long *))(*(void *)v3 + 808))(v3, &v10);
    uint64_t v2 = *((void *)this + 9);
  }
  uint64_t v4 = *(void *)(v2 + 29808);
  if (v4)
  {
    (*(void (**)(uint64_t, long long *))(*(void *)v4 + 808))(v4, &v8);
    uint64_t v6 = *((void *)&v9 + 1);
    uint64_t v5 = v9;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  return *((void *)&v11 + 1) + v11 + v5 + v6;
}

uint64_t AppleBCMWLANCore::getRealTimeTrafficClassTxCounter(AppleBCMWLANCore *this)
{
  long long v2 = 0u;
  long long v3 = 0u;
  uint64_t result = *(void *)(*((void *)this + 9) + 11304);
  if (result)
  {
    (*(void (**)(uint64_t, long long *))(*(void *)result + 808))(result, &v2);
    return *((void *)&v3 + 1) + v3;
  }
  return result;
}

uint64_t AppleBCMWLANCore::dumpWmeCounters(AppleBCMWLANCore *this, char *a2)
{
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v3 = *(void *)(*((void *)this + 9) + 11304);
  if (v3) {
    (*(void (**)(uint64_t, long long *))(*(void *)v3 + 808))(v3, &v11);
  }
  (*(void (**)(AppleBCMWLANCore *, char *))(*(void *)this + 1848))(this, a2);
  uint64_t v4 = IO80211Print();
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v5 = *(void *)(*((void *)this + 9) + 11312);
  if (v5) {
    (*(void (**)(uint64_t, long long *))(*(void *)v5 + 808))(v5, &v11);
  }
  (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  uint64_t v6 = IO80211Print() + v4;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v7 = *(void *)(*((void *)this + 9) + 29800);
  if (v7) {
    (*(void (**)(uint64_t, long long *))(*(void *)v7 + 808))(v7, &v11);
  }
  (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  int v8 = IO80211Print();
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v9 = *(void *)(*((void *)this + 9) + 29808);
  if (v9) {
    (*(void (**)(uint64_t, long long *))(*(void *)v9 + 808))(v9, &v11);
  }
  (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  return IO80211Print() + v8 + v6;
}

uint64_t AppleBCMWLANCore::useAppleRSNSupplicant(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 0);
}

uint64_t AppleBCMWLANCore::featureFlagIsBitSet(AppleBCMWLANCore *this, int a2)
{
  char v2 = a2;
  int v4 = a2 + 7;
  if (a2 >= 0) {
    int v4 = a2;
  }
  if ((v4 >> 3) >= 0x10)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v11, "[dk] %s@%d: Invalid bit position, bit[%d]\n");
      }
    }
    return 0;
  }
  uint64_t v5 = *((void *)this + 9);
  uint64_t v6 = *(IOLock **)(v5 + 17664);
  if (!v6)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v12, "[dk] %s@%d: Invalid lock\n");
      }
    }
    return 0;
  }
  uint64_t v7 = v5 + 17672;
  uint64_t v8 = (uint64_t)v4 >> 3;
  IOLockLock(*(IOLock **)(v5 + 17664));
  uint64_t v9 = (*(unsigned __int8 *)(v7 + v8) >> (v2 & 7)) & 1;
  IOLockUnlock(v6);
  return v9;
}

uint64_t AppleBCMWLANCore::waitForDriverEvent(void *a1, unsigned int a2, unsigned int a3)
{
  clock_interval_to_deadline();
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      long long v10 = AppleBCMWDriverEventToString[a2];
      long long v11 = (void *)current_thread();
      uint64_t v12 = thread_tid(v11);
      CCLogStream::logNoticeIf(v9, 0x200000uLL, "[dk] %s@%d: Waiting %ld ms for (%s) event from tid: %llx\n", "waitForDriverEvent", 4843, a3, v10, v12);
    }
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 104))(a1);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v6 + 80))(v6, a1[9] + 4 * a2 + 6480, 0xAAAAAAAAAAAAAAAALL);
  if (v7)
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v13, "[dk] %s@%d:Sleep failed 0x%08x for event %s", "waitForDriverEvent", 4848, v7, AppleBCMWDriverEventToString[a2]);
      }
    }
  }
  return v7;
}

uint64_t AppleBCMWLANCore::handleRxEventFrame(AppleBCMWLANCore *a1, unint64_t a2, const void *a3)
{
  unint64_t v9 = a2;
  if (IO80211CagedBuffer::tryLock(*(IO80211CagedBuffer **)(*((void *)a1 + 9) + 30904)))
  {
    IO80211CagedBuffer::copyIn(*(IO80211CagedBuffer **)(*((void *)a1 + 9) + 30904), a3, a2);
    Buffer  = IO80211CagedBuffer::getBuffer(*(IO80211CagedBuffer **)(*((void *)a1 + 9) + 30904));
    AppleBCMWLANCore::handleEventPacket(a1, (uint64_t)&v9, v6);
    Buffer  = (uint64_t)a3;
    IO80211CagedBuffer::unlock(*(IO80211CagedBuffer **)(*((void *)a1 + 9) + 30904));
    return 0;
  }
  else
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logCrit(v8, "[dk] %s@%d: Failed to lock event cage buffer\n", "handleRxEventFrame", 4873);
      }
    }
    CCFaultReporter::reportFault(*(CCFaultReporter **)(*((void *)a1 + 9) + 5544), 5u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0x130Au, "handleRxEventFrame", 0, -469793524, 0);
    return 3758097084;
  }
}

int8x16_t AppleBCMWLANCore::handleEventPacket(AppleBCMWLANCore *a1, uint64_t a2, int8x16_t result)
{
  OSObjectInterface_vtbl v92 = 0;
  unint64_t v93 = 0;
  if (a2)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    if (v4)
    {
      if (*(void *)a2 <= 3uLL)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            int8x16_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logAlert(v6, "[dk] %s@%d:DeviceBuffer length %lu shorter than bdc_header %lu !\n");
          }
        }
        goto LABEL_17;
      }
      if (CCLogStream::shouldLog(*(CCLogStream **)(*((void *)a1 + 9) + 14168), 1uLL))
      {
        LODWORD(v94)  = 0;
        CCLogStream::logHeaderAndBuf(*(CCLogStream **)(*((void *)a1 + 9) + 14168), *(unsigned __int8 **)(a2 + 8), 0, *(void *)a2, *(void *)a2, &v94, 4uLL);
      }
      uint64_t v7 = 4 * *(unsigned __int8 *)(v4 + 3);
      unint64_t v8 = *(void *)a2;
      if (*(void *)a2 < (unint64_t)(v7 + 28))
      {
        if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)) {
          goto LABEL_17;
        }
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (!CCLogStream::shouldLog()) {
          goto LABEL_17;
        }
        goto LABEL_12;
      }
      uint64_t v10 = v7 + *(void *)(a2 + 8);
      if (*(_WORD *)(v10 + 23) != 4096 || *(unsigned char *)(v10 + 25) != 24) {
        goto LABEL_17;
      }
      int v12 = *(unsigned __int16 *)(v10 + 26);
      if (v12 != 256)
      {
        if (v12 == 1280) {
          AppleBCMWLANCore::handleDongleEventPacket(a1, (unsigned int *)a2);
        }
        goto LABEL_17;
      }
      uint64_t v13 = v7 + 76;
      if (v8 < v7 + 76)
      {
        if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)) {
          goto LABEL_17;
        }
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (!CCLogStream::shouldLog()) {
          goto LABEL_17;
        }
LABEL_12:
        unint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v9, "[dk] %s@%d:DeviceBuffer length %lu shorter than wl_event_msg_t start at %lu! (offset=%d)\n");
        goto LABEL_17;
      }
      uint64_t v14 = (int8x16_t *)(v7 + v4);
      uint64_t v15 = &v14->i8[4];
      unint64_t v16 = bswap32(v14[3].u32[0]);
      if ((v13 + v16) >> 32)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logAlert(v17, "[dk] %s@%d:Event buffer overflow Read Offset: %lu, Event Length: %lu\n");
          }
        }
        goto LABEL_17;
      }
      if (v8 < v13 + v16)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            int v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logAlert(v18, "[dk] %s@%d:DeviceBuffer length %lu shorter than wl_event_msg_t->datalen needs %lu! For event_type: %d\n");
          }
        }
        goto LABEL_17;
      }
      v14[1].i16[7]  = bswap32(v14[1].u16[7]) >> 16;
      uint64_t result = vrev32q_s8(v14[2]);
      void v14[2] = result;
      v14[3].i32[0]  = v16;
      v14[1].i16[6]  = bswap32(v14[1].u16[6]) >> 16;
      if (v8 >= v16)
      {
        if (result.i32[0] < 0xD7u)
        {
          uint64_t v20 = &v14[1].u32[3];
          if (v8 >= v16 + 48) {
            unint64_t v8 = v16 + 48;
          }
          OSObjectInterface_vtbl v92 = &v14[1].i8[12];
          unint64_t v93 = v8;
          uint64_t v21 = *((void *)a1 + 9);
          int v22 = *(CCLogStream **)(v21 + 14160);
          if (v22)
          {
            int shouldLog = CCLogStream::shouldLog(v22, 0x10uLL);
            uint64_t v21 = *((void *)a1 + 9);
            if (shouldLog)
            {
              if (*(_DWORD *)(v21 + 18160)
                || (unsigned int v24 = *((_DWORD *)v15 + 7) - 75, v24 > 0x17)
                || ((1 << v24) & 0xE00001) == 0)
              {
                unint64_t v94 = 0xAAAAAAAAAAAAAAAALL;
                mach_continuous_time();
                absolutetime_to_nanoseconds();
                if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
                {
                  (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                  if (CCLogStream::shouldLog())
                  {
                    uint64_t v75 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                    uint64_t v76 = *((unsigned int *)v15 + 7);
                    uint64_t v77 = convertEventToString(*((_DWORD *)v15 + 7), 0, 0);
                    CCLogStream::logNotice(v75, "[dk] %s@%d: wle@<%p> Received event %lu(%s) @ %llu.%09llu: status  = %lu, reason  = %lu, flags  = 0x%x, authtype  = %lu, addr  = %02x:%02x:%02x:%02x:%02x:%02x if %s ifidx %u bssidx %u len %lu\n", "handleEventPacket", 15554, v20, v76, v77, v94 / 0x3B9ACA00, v94 % 0x3B9ACA00, *((unsigned int *)v15 + 8), *((unsigned int *)v15 + 9), *((unsigned __int16 *)v15 + 13), *((unsigned int *)v15 + 10), v15[48], v15[49], v15[50], v15[51], v15[52],
                      v15[53],
                      v15 + 54,
                      v15[70],
                      v15[71],
                      *((unsigned int *)v15 + 11));
                  }
                }
                uint64_t v21 = *((void *)a1 + 9);
              }
            }
          }
          __int16 v25 = *(IO80211SkywalkInterface **)(v21 + 11312);
          if (v25
            && (BOOL v26 = AppleBCMWLANCore::isEventForInterface((uint64_t)a1, v25, (uint64_t)v20),
                uint64_t v21 = *((void *)a1 + 9),
                v26))
          {
            uint64_t v27 = *(void *)(v21 + 11312);
LABEL_53:
            AppleBCMWLANProximityInterface::handleEvent(v27, (const IO80211BufferCursor *)&v92);
          }
          else
          {
            unint64_t v28 = *(IO80211SkywalkInterface **)(v21 + 29800);
            if (!v28) {
              goto LABEL_61;
            }
            isEventForuint64_t Interface = AppleBCMWLANCore::isEventForInterface((uint64_t)a1, v28, (uint64_t)v20);
            uint64_t v21 = *((void *)a1 + 9);
            if (isEventForInterface)
            {
              uint64_t v30 = *(void *)(v21 + 29800);
LABEL_57:
              AppleBCMWLANNANInterface::handleEvent(v30, (uint64_t)v20);
              goto LABEL_17;
            }
            uint64_t v31 = *(IO80211SkywalkInterface **)(v21 + 29808);
            if (v31
              && (BOOL v32 = AppleBCMWLANCore::isEventForInterface((uint64_t)a1, v31, (uint64_t)v20),
                  uint64_t v21 = *((void *)a1 + 9),
                  v32))
            {
              AppleBCMWLANNANDataInterface::handleEvent(*(void *)(v21 + 29808), (uint64_t)v20);
            }
            else
            {
LABEL_61:
              uint64_t v33 = *(IO80211SkywalkInterface **)(v21 + 11320);
              if (v33 && AppleBCMWLANCore::isEventForInterface((uint64_t)a1, v33, (uint64_t)v20))
              {
                AppleBCMWLANIO80211APSTAInterface::handleEvent(*(void *)(*((void *)a1 + 9) + 11320), (uint64_t)v20);
              }
              else
              {
                if (v15[70] && *((_DWORD *)v15 + 7) != 52)
                {
                  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
                  {
                    (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                    if (CCLogStream::shouldLog())
                    {
                      unsigned int v78 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                      uint64_t v79 = *((unsigned int *)v15 + 7);
                      int v80 = convertEventToString(*((_DWORD *)v15 + 7), 0, 0);
                      CCLogStream::logAlert(v78, "[dk] %s@%d:WARNING: Event %lu(%s) found for missing virtual interface index %u!\n", "handleEventPacket", 15597, v79, v80, v15[70]);
                    }
                  }
                  OSObjectInterface_vtbl v34 = *(CCFaultReporter **)(*((void *)a1 + 9) + 5544);
                  uint64_t v35 = *((unsigned int *)v15 + 7);
                  OSObjectInterface_vtbl v36 = convertEventToString(*((_DWORD *)v15 + 7), 0, 0);
                  CCFaultReporter::reportFault(v34, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0x3CF1u, "handleEventPacket", 0, -469793524, "event=%lu(%s),interface=%u", v35, v36, v15[70]);
                }
                kdebug_trace();
                int v37 = *((_DWORD *)v15 + 7);
                if (v37 <= 123)
                {
                  switch(v37)
                  {
                    case 0:
                      AppleBCMWLANCore::handleSetSSIDEvent(a1, (uint64_t)v20);
                      goto LABEL_17;
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                    case 8:
                    case 10:
                    case 11:
                    case 15:
                    case 18:
                    case 20:
                    case 21:
                    case 22:
                    case 24:
                    case 25:
                    case 27:
                    case 28:
                    case 29:
                    case 30:
                    case 31:
                    case 34:
                    case 35:
                    case 36:
                    case 39:
                    case 40:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 48:
                    case 50:
                    case 51:
                    case 53:
                    case 54:
                    case 55:
                      goto LABEL_140;
                    case 3:
                      AppleBCMWLANCore::handleAuthEvent(a1, (uint64_t)v20);
                      goto LABEL_17;
                    case 6:
                    case 12:
                      AppleBCMWLANCore::sendDeauthDissasocEvent(a1, (uint64_t)v20);
                      AppleBCMWLANCore::handleExtendedEventData((uint64_t)a1, (uint64_t)v20);
                      goto LABEL_17;
                    case 7:
                      AppleBCMWLANCore::handleAssocEvent(a1, (uint64_t)v20);
                      goto LABEL_17;
                    case 9:
                      AppleBCMWLANCore::handleReassocEvent((uint64_t)a1, (uint64_t)v20);
                      goto LABEL_17;
                    case 13:
                      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
                      {
                        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                        if (CCLogStream::shouldLog())
                        {
                          OSObjectInterface_vtbl v56 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                          CCLogStream::logAlert(v56, "[dk] %s@%d:ALERT: WiFi infra entering QUIET mode.\n");
                        }
                      }
                      goto LABEL_17;
                    case 14:
                      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
                      {
                        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                        if (CCLogStream::shouldLog())
                        {
                          OSObjectInterface_vtbl v57 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                          CCLogStream::logAlert(v57, "[dk] %s@%d:ALERT: WiFi infra exiting QUIET mode.\n");
                        }
                      }
                      goto LABEL_17;
                    case 16:
                      AppleBCMWLANCore::handleLinkEvent(a1, (uint64_t)v20);
                      goto LABEL_17;
                    case 17:
                      AppleBCMWLANCore::handleMICErrorEvent(a1, (uint64_t)v20);
                      goto LABEL_17;
                    case 19:
                      AppleBCMWLANCore::handleRoamEvent(a1, (uint64_t)v20);
                      goto LABEL_17;
                    case 23:
                      AppleBCMWLANCore::handlePruneEvent(a1, (uint64_t)v20);
                      goto LABEL_17;
                    case 26:
                      size_t v58 = (uint64_t *)*((void *)a1 + 9);
                      uint64_t v59 = v58[1414];
                      if (v59)
                      {
                        AppleBCMWLANProximityInterface::handleEvent(v59, (const IO80211BufferCursor *)&v92);
                        size_t v58 = (uint64_t *)*((void *)a1 + 9);
                      }
                      uint64_t v60 = v58[3725];
                      if (v60)
                      {
                        AppleBCMWLANNANInterface::handleEvent(v60, (uint64_t)v20);
                        size_t v58 = (uint64_t *)*((void *)a1 + 9);
                      }
                      AppleBCMWLANScanAdapter::scanComplete(v58[679], (uint64_t)v20);
                      goto LABEL_17;
                    case 32:
                      AppleBCMWLANCore::handleRoamPrepEvent(a1, (uint64_t)v20);
                      goto LABEL_17;
                    case 33:
                      AppleBCMWLANBGScanAdapter::parseBGScanEvent(*(void *)(*((void *)a1 + 9) + 5504), (uint64_t)v20);
                      goto LABEL_17;
                    case 37:
                      size_t v61 = *(AppleBCMWLANJoinAdapter **)(*((void *)a1 + 9) + 5424);
                      if (!v61 || !AppleBCMWLANJoinAdapter::isJoining(v61))
                      {
                        AppleBCMWLANCore::handleRoamScanStartEvent(a1, (uint64_t)v20);
                        WORD2(v94)  = 0;
                        LODWORD(v94)  = 0;
                        IO80211BssManager::getCurrentBSSID(*(IO80211BssManager **)(*((void *)a1 + 9) + 5440), (ether_addr *)&v94);
                        *(unsigned char *)(*((void *)a1 + 9) + 12064)  = 0;
                        uint64_t v71 = *((void *)a1 + 9);
                        *(_OWORD *)(v71 + 13904)  = 0u;
                        *(_OWORD *)(v71 + 13920)  = 0u;
                        *(_OWORD *)(v71 + 13936)  = 0u;
                        *(_OWORD *)(v71 + 13952)  = 0u;
                        *(_OWORD *)(v71 + 13968)  = 0u;
                        *(_OWORD *)(v71 + 13984)  = 0u;
                        *(void *)(v71 + 14000)  = 0;
                        *(void *)(*((void *)a1 + 9) + 13912)  = getCurrentContinuousTimeMilliSeconds();
                        *(_WORD *)(*((void *)a1 + 9) + 13960)  = v94;
                        *(unsigned char *)(*((void *)a1 + 9) + 13962)  = BYTE2(v94);
                        uint64_t v72 = *((void *)a1 + 9);
                        *(_WORD *)(v72 + 13996)  = WORD2(v94);
                        *(_DWORD *)(v72 + 13992)  = v94;
                        *(_DWORD *)(*((void *)a1 + 9) + 13968)  = IO80211BssManager::getCurrentAuthType(*(IO80211BssManager **)(*((void *)a1 + 9) + 5440));
                        *(_DWORD *)(*((void *)a1 + 9) + 13976)  = IO80211BssManager::getCurrentBSSAKMs(*(IO80211BssManager **)(*((void *)a1 + 9) + 5440));
                        *(_DWORD *)(*((void *)a1 + 9) + 13908)  = mapBcmReasonToApple80211IOReturnRoam(*((_DWORD *)v15 + 9));
                        IO80211BssManager::getCurrentRSSI(*(IO80211BssManager **)(*((void *)a1 + 9) + 5440), (int *)(*((void *)a1 + 9) + 13936));
                        goto LABEL_17;
                      }
                      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
                      {
                        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                        if (CCLogStream::shouldLog())
                        {
                          OSObjectInterface_vtbl v90 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                          CCLogStream::logAlert(v90, "[dk] %s@%d: receive roam start event when joining\n", "handleEventPacket", 15779);
                        }
                      }
                      int v62 = (*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 9) + 5400) + 368))(*(void *)(*((void *)a1 + 9) + 5400));
                      if (v62 == 4355) {
                        goto LABEL_17;
                      }
                      int v63 = v62;
                      if (v62 == 4364) {
                        goto LABEL_17;
                      }
                      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
                      {
                        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                        if (CCLogStream::shouldLog())
                        {
                          OSObjectInterface_vtbl v91 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                          CCLogStream::logAlert(v91, "[dk] %s@%d: receive unexpected roam start event when joining. chip number %d\n", "handleEventPacket", 15782, v63);
                        }
                      }
                      unint64_t v48 = *(CCFaultReporter **)(*((void *)a1 + 9) + 5544);
                      int v49 = -469792505;
                      unsigned int v50 = 15791;
                      break;
                    case 38:
LABEL_78:
                      uint64_t v30 = *(void *)(*((void *)a1 + 9) + 29800);
                      if (v30) {
                        goto LABEL_57;
                      }
                      goto LABEL_17;
                    case 41:
                      AppleBCMWLANCore::handlePSMWatchdog(a1, v20);
                      goto LABEL_17;
                    case 46:
                      AppleBCMWLANCore::handlePSKEvent(a1, (uint64_t)v20);
                      goto LABEL_17;
                    case 47:
                      AppleBCMWLANCore::handleCountryCodeChangedEvent(a1, (uint64_t)v20);
                      goto LABEL_17;
                    case 49:
                      AppleBCMWLANCore::handleICVErrorEvent(a1, (uint64_t)v20);
                      goto LABEL_17;
                    case 52:
                      if (!*(unsigned char *)(*((void *)a1 + 9) + 985)) {
                        AppleBCMWLANCore::handleTraceEvent(a1, (uint64_t)v20);
                      }
                      goto LABEL_17;
                    case 56:
                      AppleBCMWLANLQM::handleLQMEvent(*(IO80211Controller **)(*((void *)a1 + 9) + 5608), v20);
                      goto LABEL_17;
                    case 57:
                      goto LABEL_17;
                    default:
                      int v39 = v37 - 96;
                      switch(v39)
                      {
                        case 0:
                        case 1:
                        case 2:
LABEL_93:
                          uint64_t v27 = *(void *)(*((void *)a1 + 9) + 11312);
                          if (v27) {
                            goto LABEL_53;
                          }
                          break;
                        case 3:
                        case 5:
                        case 6:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                          goto LABEL_140;
                        case 4:
                          goto LABEL_78;
                        case 7:
                          AppleBCMWLANGASAdapter::handleGAS_FRAGMENT_RX(*(AppleBCMWLANGASAdapter **)(*((void *)a1 + 9) + 5480), (uint64_t)v20);
                          break;
                        case 8:
                          AppleBCMWLANGASAdapter::handleGAS_COMPLETE(*(AppleBCMWLANGASAdapter **)(*((void *)a1 + 9) + 5480), (uint64_t)v20);
                          break;
                        case 13:
                          AppleBCMWLANCore::handleRangingEvent(a1, (uint64_t)v20);
                          break;
                        default:
                          switch(v39)
                          {
                            case 'E':
                              AppleBCMWLANScanAdapter::eventScanComplete(*(AppleBCMWLANScanAdapter **)(*((void *)a1 + 9) + 5432), (uint64_t)v20);
                              break;
                            case 'K':
                              size_t v64 = *(AppleBCMWLANProximityInterface **)(*((void *)a1 + 9) + 11312);
                              if (v64) {
                                AppleBCMWLANProximityInterface::handleActionFrame_rx(v64, (const IO80211BufferCursor *)&v92);
                              }
                              break;
                            case 'L':
                              int v65 = *(unsigned __int8 *)(*((void *)a1 + 9) + 9492);
                              uint64_t v66 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                              if (v65)
                              {
                                if (v66)
                                {
                                  (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                                  if (CCLogStream::shouldLog())
                                  {
                                    uint64_t v87 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                                    CCLogStream::logAlert(v87, "[dk] %s@%d: Received WLC_E_WAKE_EVENT\n", "handleEventPacket", 15611);
                                  }
                                }
                                *(unsigned char *)(*((void *)a1 + 9) + 9492)  = 0;
                              }
                              else if (v66)
                              {
                                (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                                if (CCLogStream::shouldLog())
                                {
                                  char v74 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                                  CCLogStream::logAlert(v74, "[dk] %s@%d: Received WLC_E_WAKE_EVENT, but we're not in WoW Test Mode\n");
                                }
                              }
                              break;
                            case 'P':
                              uint64_t v67 = *(void *)(*((void *)a1 + 9) + 11312);
                              if (v67) {
                                AppleBCMWLANProximityInterface::handleEvent(v67, (const IO80211BufferCursor *)&v92);
                              }
                              AppleBCMWLANCore::csaReceived(a1);
                              break;
                            case 'Q':
                              AppleBCMWLANCore::handlePMAlertEvent((IOService *)a1, (uint64_t)v20, (const void **)a2);
                              break;
                            case 'S':
                              size_t v68 = *(IO80211SkywalkInterface **)(*((void *)a1 + 9) + 11304);
                              if (v68) {
                                IO80211Controller::postMessage(a1, v68, 0x1Fu, 0, 0, 1);
                              }
                              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
                              {
                                (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                                if (CCLogStream::shouldLog())
                                {
LABEL_199:
                                  unsigned int v69 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                                  CCLogStream::logAlert(v69, "[dk] %s@%d: LOST ALL PNO networks \n");
                                }
                              }
                              break;
                            default:
                              goto LABEL_140;
                          }
                          break;
                      }
                      goto LABEL_17;
                  }
                }
                else
                {
                  if (v37 <= 151)
                  {
                    switch(v37)
                    {
                      case 124:
                        AppleBCMWLANCore::handleCCAChanQualEvent(a1, (uint64_t)v20);
                        break;
                      case 126:
                        AppleBCMWLANCore::handleTxStatusErrEvent(a1, (uint64_t)v20);
                        break;
                      case 151:
                        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
                        {
                          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                          if (CCLogStream::shouldLog())
                          {
                            uint64_t v84 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                            CCLogStream::logAlert(v84, "[dk] %s@%d:TKO Event woke up\n", "handleEventPacket", 15910);
                          }
                        }
                        uint64_t v40 = *(void *)(*((void *)a1 + 9) + 5552);
                        if (v40) {
                          AppleBCMWLANKeepAliveOffload::handleTKOEvent(v40, (uint64_t)v20);
                        }
                        break;
                      default:
LABEL_140:
                        ++*(_DWORD *)(*((void *)a1 + 9) + 4476);
                        break;
                    }
                    goto LABEL_17;
                  }
                  int v38 = v37 - 167;
                  switch(v38)
                  {
                    case 0:
                    case 1:
                      AppleBCMWLANBGScanAdapter::scanBackoffEvent(*(void *)(*((void *)a1 + 9) + 5504), (uint64_t)v20);
                      goto LABEL_17;
                    case 2:
                    case 3:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 14:
                    case 15:
                    case 18:
                    case 25:
                    case 27:
                    case 28:
                    case 29:
                    case 31:
                    case 32:
                    case 35:
                    case 37:
                    case 38:
                    case 39:
                    case 41:
                    case 43:
                    case 44:
                      goto LABEL_140;
                    case 4:
                      unint64_t v95 = 0xAAAAAAAAAAAAAAAALL;
                      if (*((_DWORD *)v15 + 11) <= 0xBu)
                      {
                        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
                        {
                          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                          if (CCLogStream::shouldLog())
                          {
                            uint64_t v81 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                            CCLogStream::logEmergency(v81, "[dk] %s@%d:Malformed WLC_E_TVPM_MITIGATION size %d expected %ld\n");
                          }
                        }
                      }
                      else if (*((_WORD *)v15 + 36))
                      {
                        unint64_t v41 = *((unsigned int *)v15 + 19);
                        __int16 v42 = *((_WORD *)v15 + 41);
                        LOBYTE(v95)  = v15[80];
                        int v43 = v95;
                        if (v95 >= 2u)
                        {
                          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
                          {
                            (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                            if (CCLogStream::shouldLog())
                            {
                              size_t v83 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                              CCLogStream::logEmergency(v83, "[dk] %s@%d:Malformed WLC_E_TVPM_MITIGATION slice %d\n");
                            }
                          }
                        }
                        else
                        {
                          int v44 = v42 & 7;
                          BYTE1(v95)  = v42 & 7;
                          unint64_t v94 = v41;
                          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
                          {
                            (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                            if (CCLogStream::shouldLog())
                            {
                              long long v86 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                              CCLogStream::logAlert(v86, "[dk] %s@%d:TVPM Mitigation slice %d, on_off flags %x, timestamp %llu ms\n", "handleEventPacket", 15958, v43, v44, v41);
                            }
                          }
                          OSObjectInterface_vtbl v45 = *(IO80211SkywalkInterface **)(*((void *)a1 + 9) + 11304);
                          if (v45) {
                            IO80211Controller::postMessage(a1, v45, 0x5Du, &v94, 0x10uLL, 1);
                          }
                        }
                      }
                      else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
                      {
                        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                        if (CCLogStream::shouldLog())
                        {
                          uint64_t v82 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                          CCLogStream::logEmergency(v82, "[dk] %s@%d:Malformed WLC_E_TVPM_MITIGATION version %d\n");
                        }
                      }
                      goto LABEL_17;
                    case 5:
                      AppleBCMWLANCore::handleScanEvent(a1, (uint64_t)v20);
                      goto LABEL_17;
                    case 13:
                      if (*((_DWORD *)v15 + 11) != 1)
                      {
                        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
                        {
                          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                          if (CCLogStream::shouldLog())
                          {
                            unint64_t v70 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                            CCLogStream::logAlert(v70, "[dk] %s@%d:Invalid SAR event MSG length=%u\n");
                          }
                        }
                        goto LABEL_17;
                      }
                      uint64_t v46 = v15[72];
                      if (v46 > 1)
                      {
                        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
                        {
                          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                          if (CCLogStream::shouldLog())
                          {
                            uint64_t v73 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                            CCLogStream::logAlert(v73, "[dk] %s@%d:Invalid SAR event state %u\n");
                          }
                        }
                        goto LABEL_17;
                      }
                      ++*(_DWORD *)(*((void *)a1 + 9) + 4 * v46 + 4888);
                      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)
                        && ((*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1),
                            CCLogStream::shouldLog()))
                      {
                        OSObjectInterface_vtbl v88 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                        if (v46) {
                          OSObjectInterface_vtbl v89 = "ON";
                        }
                        else {
                          OSObjectInterface_vtbl v89 = "OFF";
                        }
                        CCLogStream::logAlert(v88, "[dk] %s@%d:SAR event state:%s onbody:%u offbody:%u\n", "handleEventPacket", 15981, v89, *(_DWORD *)(*((void *)a1 + 9) + 4892), *(_DWORD *)(*((void *)a1 + 9) + 4888));
                        if (v46) {
                          goto LABEL_17;
                        }
                      }
                      else if (v46)
                      {
                        goto LABEL_17;
                      }
                      uint64_t v47 = *((void *)a1 + 9);
                      if (!*(unsigned char *)(v47 + 4896)) {
                        goto LABEL_17;
                      }
                      unint64_t v48 = *(CCFaultReporter **)(v47 + 5544);
                      int v49 = -469793492;
                      unsigned int v50 = 15983;
                      break;
                    case 16:
                      AppleBCMWLANNetAdapter::handleBssTransEvent(*(void *)(*((void *)a1 + 9) + 5600), (uint64_t)v20);
                      goto LABEL_17;
                    case 17:
                      AppleBCMWLANCore::handleWeightAvgLQMEvent(a1, (uint64_t)v20);
                      goto LABEL_17;
                    case 19:
                      AppleBCMWLANCore::handleWSECEvent(a1, (uint64_t)v20);
                      goto LABEL_17;
                    case 20:
                      AppleBCMWLANCore::handleObssDetectEvent((uint64_t)a1, (uint64_t)v20);
                      goto LABEL_17;
                    case 21:
                      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
                      {
                        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                        if (CCLogStream::shouldLog())
                        {
                          uint64_t v85 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                          CCLogStream::logInfo(v85, "[dk] %s@%d:Host: Received WLC_E_AP_BCN_MUTE event\n", "handleEventPacket", 15998);
                        }
                      }
                      AppleBCMWLANNetAdapter::handleBeacomMuteMitigation(*(void *)(*((void *)a1 + 9) + 5600), (uint64_t)v20);
                      goto LABEL_17;
                    case 22:
                      AppleBCMWLANCore::handleSCChanQualEvent(a1, (uint64_t)v20);
                      goto LABEL_17;
                    case 23:
                      AppleBCMWLANCore::handleDynSAREvent(a1, (uint64_t)v20);
                      goto LABEL_17;
                    case 24:
                      goto LABEL_17;
                    case 26:
                      if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 76))
                      {
                        uint64_t v51 = *((void *)a1 + 9);
                        if (!*(unsigned char *)(v51 + 18340))
                        {
                          OSObjectInterface_vtbl v52 = *(IO80211SkywalkInterface **)(v51 + 11304);
                          if (v52)
                          {
                            IO80211Controller::postMessage(a1, v52, 0x1Fu, 0, 0, 1);
                            uint64_t v51 = *((void *)a1 + 9);
                          }
                          AppleBCMWLANBGScanAdapter::parsePFNAllGoneExtEvent(*(void *)(v51 + 5504), (uint64_t)v20);
                          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
                          {
                            (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                            if (CCLogStream::shouldLog()) {
                              goto LABEL_199;
                            }
                          }
                        }
                      }
                      goto LABEL_17;
                    case 30:
                      AppleBCMWLANScanAdapter::eventRoamScanResult(*(AppleBCMWLANScanAdapter **)(*((void *)a1 + 9) + 5432), (uint64_t)v20);
                      goto LABEL_17;
                    case 33:
                      AppleBCMWLANCore::handleMSCSEvent(a1, (uint64_t)v20);
                      goto LABEL_17;
                    case 34:
                      io80211_os_log();
                      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
                      {
                        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                        if (CCLogStream::shouldLog())
                        {
                          OSObjectInterface_vtbl v53 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                          CCLogStream::logNotice(v53, "[dk] %s@%d:RxDMA recovery event status %u (count %u)\n", "handleEventPacket", 16009, *((_DWORD *)v15 + 8), *((_DWORD *)v15 + 9));
                        }
                      }
                      goto LABEL_17;
                    case 36:
                      if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 115))
                      {
                        uint64_t v54 = *(void *)(*((void *)a1 + 9) + 5592);
                        if (v54) {
                          AppleBCMWLAN11beAdapter::handleMloLinkEvent(v54, (uint64_t)v20);
                        }
                      }
                      goto LABEL_17;
                    case 40:
                      AppleBCMWLANCore::handleUlOfdmaDisableEvent((uint64_t)a1, (uint64_t)v20);
                      goto LABEL_17;
                    case 42:
                      AppleBCMWLANSensingAdapter::handleSensingEvent(*(void *)(*((void *)a1 + 9) + 35840), (uint64_t)v20);
                      goto LABEL_17;
                    case 45:
                      uint64_t v55 = *(void *)(*((void *)a1 + 9) + 35856);
                      if (v55) {
                        AppleBCMWLANNearbyDeviceDiscoveryAdapter::handleNDDFWEvents(v55, (uint64_t)v20);
                      }
                      goto LABEL_17;
                    default:
                      if (v38 == 152) {
                        goto LABEL_93;
                      }
                      goto LABEL_140;
                  }
                }
                CCFaultReporter::reportFault(v48, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", v50, "handleEventPacket", 0, v49, 0);
              }
            }
          }
        }
        else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logAlert(v19, "[dk] %s@%d: Received garbage event, ignore...\n");
          }
        }
LABEL_17:
        kdebug_trace();
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::enableWorkQueueSources(AppleBCMWLANCore *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 9) + 6232);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 64))(v2);
  }
  if ((AppleBCMWLANCore::featureFlagIsBitSet(this, 84) & 1) != 0
    || (AppleBCMWLANCore::featureFlagIsBitSet(this, 85) & 1) != 0
    || AppleBCMWLANCore::featureFlagIsBitSet(this, 111))
  {
    uint64_t v3 = *(void *)(*((void *)this + 9) + 6248);
    if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 64))(v3);
      (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 9) + 6248) + 120))(*(void *)(*((void *)this + 9) + 6248), 3600000);
    }
  }
  IsBitSet  = AppleBCMWLANCore::featureFlagIsBitSet(this, 79);
  uint64_t v5 = *((void *)this + 9);
  if (IsBitSet)
  {
    uint64_t v6 = *(void *)(v5 + 6256);
    if (v6)
    {
      (*(void (**)(uint64_t))(*(void *)v6 + 64))(v6);
      uint64_t v5 = *((void *)this + 9);
    }
    if (*(unsigned char *)(v5 + 4496))
    {
      uint64_t v7 = *(void *)(v5 + 6264);
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v7 + 64))(v7);
        uint64_t v5 = *((void *)this + 9);
      }
      uint64_t v8 = *(void *)(v5 + 6272);
      if (v8)
      {
        (*(void (**)(uint64_t))(*(void *)v8 + 64))(v8);
        uint64_t v5 = *((void *)this + 9);
      }
    }
  }
  uint64_t result = *(void *)(v5 + 11336);
  if (result)
  {
    uint64_t v10 = *(uint64_t (**)(void))(*(void *)result + 64);
    return v10();
  }
  return result;
}

uint64_t AppleBCMWLANCore::checkForDynSARSupport(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 79);
}

uint64_t AppleBCMWLANCore::disableWorkQueueSources(AppleBCMWLANCore *this)
{
  uint64_t v2 = *((void *)this + 9);
  uint64_t v3 = *(void *)(v2 + 6232);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 72))(v3);
    uint64_t v2 = *((void *)this + 9);
  }
  uint64_t v4 = *(void *)(v2 + 6248);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 72))(v4);
    uint64_t v2 = *((void *)this + 9);
  }
  uint64_t v5 = *(void *)(v2 + 6256);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 72))(v5);
    uint64_t v2 = *((void *)this + 9);
  }
  if (*(unsigned char *)(v2 + 4496))
  {
    uint64_t v6 = *(void *)(v2 + 6264);
    if (v6)
    {
      (*(void (**)(uint64_t))(*(void *)v6 + 72))(v6);
      uint64_t v2 = *((void *)this + 9);
    }
    uint64_t v7 = *(void *)(v2 + 6272);
    if (v7)
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 72))(v7);
      uint64_t v2 = *((void *)this + 9);
    }
  }
  uint64_t result = *(void *)(v2 + 11336);
  if (result)
  {
    unint64_t v9 = *(uint64_t (**)(void))(*(void *)result + 72);
    return v9();
  }
  return result;
}

uint64_t AppleBCMWLANCore::driverKitChipBoot(IOService *this)
{
  uint64_t v2 = (const char *)this[1].OSObject::OSObjectInterface::__vftable;
  canSkipVerification  = AppleBCMWLANCore::canSkipVerification((AppleBCMWLANCore *)this);
  if (AppleBCMWLANCore::initAfterIORegUpdated(this, v4, v5, v6, v7, v8))
  {
    init  = (uint64_t)this[1].OSObject::OSObjectInterface::__vftable[342].init;
    v24[0]  = v2 + 2792;
    v24[1]  = v2 + 3048;
    v24[2]  = v2 + 3560;
    v24[3]  = v2 + 3816;
    v24[4]  = v2 + 3304;
    v24[5]  = v2 + 4072;
    char v25 = canSkipVerification;
    memset(v26, 170, sizeof(v26));
    uint64_t v10 = AppleBCMWLANConfigManager::prepareImageMap(init, v24);
    if (v10)
    {
      uint64_t v13 = v10;
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v19 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v19, "[dk] %s@%d:Failed to prepare the ChipImage, iorc[0x%08x]\n");
        }
      }
    }
    else
    {
      uint64_t v11 = AppleBCMWLANConfigManager::completeImageMap((AppleBCMWLANConfigManager *)this[1].OSObject::OSObjectInterface::__vftable[342].init);
      if (v11)
      {
        uint64_t v13 = v11;
        if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
        {
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v20 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            CCLogStream::logAlert(v20, "[dk] %s@%d:Failed to complete the ChipImage, iorc[0x%08x]\n");
          }
        }
      }
      else
      {
        uint64_t ChipImage = (const AppleBCMWLANChipImage *)AppleBCMWLANConfigManager::getChipImage((AppleBCMWLANConfigManager *)this[1].OSObject::OSObjectInterface::__vftable[342].init);
        if (ChipImage)
        {
          uint64_t v13 = AppleBCMWLANCore::bootChipImage(this, ChipImage);
          free  = this[1].OSObject::OSObjectInterface::__vftable[337].free;
          if (free
            && (*(unsigned int (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)free + 552))(free))
          {
            uint64_t v15 = this;
            BOOL v16 = 0;
LABEL_10:
            setPropertyHelper(v15, "FirmwareLoaded", v16);
            goto LABEL_11;
          }
          if (!v13)
          {
            uint64_t v15 = this;
            BOOL v16 = 1;
            goto LABEL_10;
          }
          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v21 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              CCLogStream::logAlert(v21, "[dk] %s@%d:Failed in bootChipImage(), iorc[0x%08x]\n");
            }
          }
        }
        else
        {
          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              __int16 v23 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              CCLogStream::logAlert(v23, "[dk] %s@%d:Failed to get ChipImage\n", "driverKitChipBoot", 5375);
            }
          }
          uint64_t v13 = 0;
        }
      }
    }
  }
  else
  {
    uint64_t v13 = 3758097097;
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        int v18 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v18, "[dk] %s@%d:Failed in initAfterIORegUpdated()\n");
      }
    }
  }
LABEL_11:
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      int v22 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logInfo(v22, "[dk] %s@%d:%s:%s: iorc[0x%08x]\n", "driverKitChipBoot", 5389, "AppleBCMWLANCore", "driverKitChipBoot", v13);
    }
  }
  return v13;
}

uint64_t AppleBCMWLANCore::canSkipVerification(AppleBCMWLANCore *this)
{
  unsigned __int8 v7 = 0;
  int v6 = 0;
  isDevFusedOrCSRInternal  = AppleBCMWLAN_isDevFusedOrCSRInternal();
  char v3 = 0;
  if (isDevFusedOrCSRInternal)
  {
    IOParseBootArgNumber("wlan.factory", &v6, 4);
    IOParseBootArgNumber("ioimageloader.debug.csr-access", &v7, 1);
    char v3 = (v7 != 0) | v6;
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlertIf(v5, 0x80uLL, "[dk] %s@%d: internal:%d, sip:%d, embedded:%d, wlan.factory[0x%08x], allow:%d, skipVerification:%d\n", "canSkipVerification", 5729, isDevFusedOrCSRInternal, 0, 0, v6, v7, v3 & 1);
    }
  }
  return v3 & 1;
}

uint64_t AppleBCMWLANCore::bootChipImage(IOService *this, const AppleBCMWLANChipImage *a2)
{
  if (BYTE3(this[1].OSObject::OSObjectInterface::__vftable[2206].free)
    && HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[2206].free))
  {
    uint64_t v4 = 3758097084;
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v5, "[dk] %s@%d:wlan.debug.single-boot-only set, only one boot allowed\n", "bootChipImage", 5869);
      }
    }
  }
  else
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        int v22 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logNotice(v22, "[dk] %s@%d: state 0x%lX\n", "bootChipImage", 5874, HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[649].init));
      }
    }
    uint64_t v4 = 3758097084;
    int v6 = this[1].OSObject::OSObjectInterface::__vftable;
    int init_high = HIDWORD(v6[649].init);
    if ((init_high & 0x2000) != 0)
    {
      return 3758097122;
    }
    else if ((init_high & 0x10) != 0)
    {
      return 3758097093;
    }
    else if ((init_high & 0x200000) != 0)
    {
      return LODWORD(v6[649].free);
    }
    else
    {
      (*(void (**)(const AppleBCMWLANChipImage *))(*(void *)a2 + 8))(a2);
      atomic_fetch_or((atomic_uint *volatile)((char *)&this[1].OSObject::OSObjectInterface::__vftable[649].init + 4), 0x10u);
      uint64_t v8 = this[1].OSObject::OSObjectInterface::__vftable;
      init  = v8[76].init;
      if (init)
      {
        (*(void (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)init + 16))(init);
        uint64_t v8 = this[1].OSObject::OSObjectInterface::__vftable;
      }
      v8[76].init  = (BOOL (__cdecl *)(OSObjectInterface *__hidden))a2;
      uint64_t v25 = 0;
      AppleBCMWLANConfigManager::getBSSPreference((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[342].init, &v25);
      uint64_t v10 = this[1].OSObject::OSObjectInterface::__vftable;
      int v11 = HIDWORD(v10[649].init);
      BOOL v12 = (v11 & 0x200000) == 0;
      if ((v11 & 0x200000) != 0)
      {
LABEL_25:
        atomic_fetch_and((atomic_uint *volatile)((char *)&v10[649].init + 4), 0xFFFFFFEF);
        AppleBCMWLANCore::signalDriverReady((AppleBCMWLANCore *)this);
      }
      else
      {
        unsigned int v13 = 0;
        while (1)
        {
          AppleBCMWLANCore::halt((AppleBCMWLANCore *)this);
          uint64_t v14 = AppleBCMWLANCore::loadAndSetup(this, a2);
          uint64_t v15 = this[1].OSObject::OSObjectInterface::__vftable;
          if (!v14) {
            break;
          }
          uint64_t v4 = v14;
          CCFaultReporter::reportFault((CCFaultReporter *)v15[346].free, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0x1719u, "bootChipImage", 0, -469790715, "instance %u", v13);
          uint64_t v10 = this[1].OSObject::OSObjectInterface::__vftable;
          BOOL v16 = (BYTE6(v10[649].init) & 0x20) != 0 || v13 >= 2;
          BOOL v12 = !v16;
          ++v13;
          if (v16) {
            goto LABEL_25;
          }
        }
        (*(void (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)v15[337].free + 176))(v15[337].free);
        atomic_fetch_and((atomic_uint *volatile)((char *)&this[1].OSObject::OSObjectInterface::__vftable[649].init + 4), 0xFFFFFFEF);
        AppleBCMWLANCore::signalDriverReady((AppleBCMWLANCore *)this);
        int v18 = this[1].OSObject::OSObjectInterface::__vftable;
        int v19 = HIDWORD(v18[649].init);
        if ((v19 & 0x80) == 0)
        {
          long long v26 = 0u;
          long long v27 = 0u;
          long long v36 = 0u;
          long long v35 = 0u;
          long long v34 = 0u;
          long long v32 = 0u;
          long long v33 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          long long v28 = 0u;
          long long v29 = 0u;
          uint64_t v25 = 0x2000000003;
          LODWORD(v26)  = 1;
          DWORD2(v26)  = -528340989;
          if (v18[706].free)
          {
            if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog())
              {
                unsigned int v24 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                CCLogStream::logAlert(v24, "[dk] %s@%d: posting APPLE80211_M_DRIVER_AVAILABLE, available[%u] reason[0x%08x] sub_reason[0x%08x] minor_reason[0x%08x]\n", "bootChipImage", 5929, v26, DWORD2(v26), HIDWORD(v26), v27);
              }
            }
            IO80211Controller::postMessage((IO80211Controller *)this, (IO80211SkywalkInterface *)this[1].OSObject::OSObjectInterface::__vftable[706].free, 0x37u, &v25, 0xB8uLL, 1);
            int v18 = this[1].OSObject::OSObjectInterface::__vftable;
            free  = (AppleBCMWLANBusInterface *)v18[337].free;
            if (free)
            {
              AppleBCMWLANBusInterface::sendBootCheckPointToCoreAnalytics(free, 0, 8u);
              int v18 = this[1].OSObject::OSObjectInterface::__vftable;
            }
          }
          uint64_t v21 = (IO80211SkywalkInterface *)v18[707].init;
          if (v21)
          {
            IO80211Controller::postMessage((IO80211Controller *)this, v21, 0x37u, &v25, 0xB8uLL, 1);
            int v18 = this[1].OSObject::OSObjectInterface::__vftable;
          }
          int v19 = HIDWORD(v18[649].init);
        }
        if ((v19 & 0x80) != 0)
        {
          uint64_t v4 = 0;
        }
        else
        {
          AppleBCMWLANCore::resetInterfacesComplete((AppleBCMWLANCore *)this);
          uint64_t v4 = 0;
          BYTE4(this[1].OSObject::OSObjectInterface::__vftable[422].init)  = 88;
          BYTE5(this[1].OSObject::OSObjectInterface::__vftable[422].init)  = 90;
          BYTE6(this[1].OSObject::OSObjectInterface::__vftable[422].init)  = 0;
        }
      }
      BYTE1(this[1].OSObject::OSObjectInterface::__vftable[1870].free)  = 0;
      BYTE1(this[1].OSObject::OSObjectInterface::__vftable[1134].free)  = 0;
      BYTE6(this[1].OSObject::OSObjectInterface::__vftable[1141].free)  = 0;
      if (v4 == -469793013 || (BYTE6(this[1].OSObject::OSObjectInterface::__vftable[649].init) & 0x20) != 0)
      {
        if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
        {
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (CCLogStream::shouldLog())
          {
            __int16 v23 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            CCLogStream::logEmergency(v23, "[dk] %s@%d:FW image loading failed: retval 0x%x, putting device into reset state\n", "bootChipImage", 5952, v4);
          }
        }
        (*(void (**)(void))(*((void *)this[1].OSObject::OSObjectInterface::__vftable[337].free + 6) + 208))();
      }
      if (v12)
      {
        uint64_t v4 = 0;
        ++HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[2206].free);
      }
    }
  }
  return v4;
}

uint64_t AppleBCMWLANCore::driverKitProcessPlatformConfig(AppleBCMWLANCore *this)
{
  size_t v2 = strlen((const char *)(*((void *)this + 9) + 2536));
  int v38 = 0;
  anObject  = 0;
  canSkipVerification  = (OSBundle *)AppleBCMWLANCore::canSkipVerification(this);
  int v4 = (int)canSkipVerification;
  uint64_t v5 = (OSBundle *)OSBundle::mainBundle(canSkipVerification);
  if (!v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v27 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logEmergency(v27, "[dk] %s@%d:Invalid OSBundle");
      }
    }
    goto LABEL_44;
  }
  uint64_t v6 = IOMallocZeroData();
  if (!v6)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v30 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logEmergency(v30, "[dk] %s@%d:IOMalloc failed");
      }
    }
LABEL_44:
    uint64_t v7 = 0;
LABEL_52:
    uint64_t v24 = 0;
    goto LABEL_27;
  }
  uint64_t v7 = v6;
  if (v2 <= 0xFFFFFFFFFFFFFFEBLL) {
    size_t v8 = v2 + 1;
  }
  else {
    size_t v8 = 0;
  }
  unint64_t v9 = (void *)(v6 + 19);
  bzero((void *)(v6 + 19), v8);
  *(_DWORD *)(v7 + 15)  = 793988969;
  *(_OWORD *)uint64_t v7 = *(_OWORD *)"PlatformConfig/iOS/";
  size_t v10 = strlen((const char *)(*((void *)this + 9) + 2536));
  memcpy(v9, (const void *)(*((void *)this + 9) + 2536), v10);
  OSBundle::loadResource(v5, (const char *)v7, 0, 10 * IOVMPageSize, (OSMappedFile **)&anObject);
  if (!anObject)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v31 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logEmergency(v31, "[dk] %s@%d:Failed to load PlatformConfig.plist", "driverKitProcessPlatformConfig", 5450);
      }
    }
    io80211_os_log();
    goto LABEL_52;
  }
  OSMappedFile::size((OSMappedFile *)anObject);
  io80211_os_log();
  OSDictionaryPtr v11 = OSDictionary::withCapacity(1u);
  if (!v11)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v32 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logEmergency(v32, "[dk] %s@%d:Failed to create OSDictionary", "driverKitProcessPlatformConfig", 5458);
      }
    }
    goto LABEL_52;
  }
  BOOL v12 = v11;
  OSStringPtr v13 = OSString::withCStringNoCopy((const char *)v7);
  if (v13)
  {
    OSStringPtr v14 = v13;
    OSDictionary::setObject(v12, v13, anObject);
    int v15 = IOFileValidationRequestImageVerify();
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v29 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logNoticeIf(v29, 0x80uLL, "[dk] %s@%d:Image verification, rv:%d, skipVerification:%d\n", "driverKitProcessPlatformConfig", 5470, v15, v4);
      }
    }
    if (v15) {
      char v16 = v4;
    }
    else {
      char v16 = 1;
    }
    if (v16)
    {
      OSMappedFile::size((OSMappedFile *)anObject);
      uint64_t v17 = IOMallocZeroData();
      if (v17)
      {
        int v18 = (void *)v17;
        int v19 = (const void *)OSMappedFile::data((OSMappedFile *)anObject);
        size_t v20 = OSMappedFile::size((OSMappedFile *)anObject);
        memcpy(v18, v19, v20);
        uint64_t v21 = (const OSMetaClassBase *)OSUnserializeXML((const char *)v18, &v38);
        if (v21)
        {
          int v22 = v21;
          __int16 v23 = (OSDictionary *)OSMetaClassBase::safeMetaCast(v21, gOSDictionaryMetaClass);
          if (v23)
          {
            AppleBCMWLANCore::setPlatformConfigProperties(this, v23);
            uint64_t v24 = 1;
          }
          else
          {
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (CCLogStream::shouldLog())
              {
                int v37 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                CCLogStream::logEmergency(v37, "[dk] %s@%d:plist is not an OSDictionary", "driverKitProcessPlatformConfig", 5487);
              }
            }
            uint64_t v24 = 0;
          }
          goto LABEL_20;
        }
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            long long v36 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logEmergency(v36, "[dk] %s@%d:Failed to unserialize PlatformConfig.plist", "driverKitProcessPlatformConfig", 5484);
          }
        }
        uint64_t v24 = 0;
LABEL_69:
        int v22 = 0;
LABEL_20:
        ((void (*)(OSStringPtr))v14->release)(v14);
        goto LABEL_21;
      }
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          long long v35 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logEmergency(v35, "[dk] %s@%d:IOMallocZero failed", "driverKitProcessPlatformConfig", 5480);
        }
      }
    }
    else
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          long long v34 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logEmergency(v34, "[dk] %s@%d:PlatformConfig.plist validation failed", "driverKitProcessPlatformConfig", 5474);
        }
      }
      io80211_os_log();
    }
    uint64_t v24 = 0;
    int v18 = 0;
    goto LABEL_69;
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      long long v33 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logEmergency(v33, "[dk] %s@%d:Failed to create filename OSString", "driverKitProcessPlatformConfig", 5464);
    }
  }
  uint64_t v24 = 0;
  int v18 = 0;
  int v22 = 0;
LABEL_21:
  ((void (*)(OSDictionary *))v12->release)(v12);
  if (v38)
  {
    ((void (*)(OSString *))v38->release)(v38);
    int v38 = 0;
  }
  if (v22) {
    ((void (*)(const OSMetaClassBase *))v22->release)(v22);
  }
  uint64_t v25 = anObject;
  if (v18)
  {
    OSMappedFile::size((OSMappedFile *)anObject);
    IOFreeData();
LABEL_27:
    uint64_t v25 = anObject;
  }
  if (v25)
  {
    ((void (*)(OSMetaClassBase *))v25->release)(v25);
    anObject  = 0;
  }
  if (v7) {
    IOFreeData();
  }
  if (v5) {
    (*(void (**)(OSBundle *))(*(void *)v5 + 16))(v5);
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      long long v28 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logInfo(v28, "[dk] %s@%d:rc:%d\n", "driverKitProcessPlatformConfig", 5508, v24);
    }
  }
  return v24;
}

uint64_t AppleBCMWLANCore::fetchAndUpdateRingParameters(AppleBCMWLANCore *this)
{
  __int16 v23 = 0;
  uint64_t v24 = 0;
  isDevFusedOrCSRInternal  = AppleBCMWLAN_isDevFusedOrCSRInternal();
  uint64_t result = *(void *)(*((void *)this + 9) + 5400);
  if (result)
  {
    int v4 = (IOService *)(*(uint64_t (**)(void))(*(void *)(result + 48) + 288))();
    uint64_t v5 = *((void *)this + 9);
    if (*(void *)(v5 + 5400))
    {
      uint64_t v6 = v4;
      *(_DWORD *)(v5 + 4448)  = 256;
      if (checkAcquireDataPropertyNotEmpty(v4, "wlan.llw.tx.ring.size", &v24, 4uLL, 1uLL, "IOService"))
      {
        uint64_t v7 = *((void *)this + 9);
        *(_DWORD *)(v7 + 4448)  = *(_DWORD *)OSData::getBytesNoCopy(v24, 0, 4uLL);
        if (v24)
        {
          ((void (*)(OSData *))v24->release)(v24);
          uint64_t v24 = 0;
        }
      }
      *(_DWORD *)(*((void *)this + 9) + 4452)  = 256;
      if (checkAcquireDataPropertyNotEmpty(v6, "wlan.tx.ring.size", &v24, 4uLL, 1uLL, "IOService"))
      {
        uint64_t v8 = *((void *)this + 9);
        *(_DWORD *)(v8 + 4452)  = *(_DWORD *)OSData::getBytesNoCopy(v24, 0, 4uLL);
        if (v24)
        {
          ((void (*)(OSData *))v24->release)(v24);
          uint64_t v24 = 0;
        }
      }
      *(_DWORD *)(*((void *)this + 9) + 4456)  = 256;
      if (checkAcquireDataPropertyNotEmpty(v6, "wlan.rx.ring.size", &v24, 4uLL, 1uLL, "IOService"))
      {
        uint64_t v9 = *((void *)this + 9);
        *(_DWORD *)(v9 + 4456)  = *(_DWORD *)OSData::getBytesNoCopy(v24, 0, 4uLL);
        if (v24)
        {
          ((void (*)(OSData *))v24->release)(v24);
          uint64_t v24 = 0;
        }
      }
      *(_DWORD *)(*((void *)this + 9) + 4460)  = 0;
      if (checkAcquireDataPropertyNotEmpty(v6, "wlan.tx.submission-queue.size", &v24, 4uLL, 1uLL, "IOService"))
      {
        uint64_t v10 = *((void *)this + 9);
        *(_DWORD *)(v10 + 4460)  = *(_DWORD *)OSData::getBytesNoCopy(v24, 0, 4uLL);
        if (v24)
        {
          ((void (*)(OSData *))v24->release)(v24);
          uint64_t v24 = 0;
        }
      }
      *(_DWORD *)(*((void *)this + 9) + 4464)  = 0;
      if (checkAcquireDataPropertyNotEmpty(v6, "wlan.skywalk.packetpoolsize", &v24, 4uLL, 1uLL, "IOService"))
      {
        uint64_t v11 = *((void *)this + 9);
        *(_DWORD *)(v11 + 4464)  = *(_DWORD *)OSData::getBytesNoCopy(v24, 0, 4uLL);
        if (v24)
        {
          ((void (*)(OSData *))v24->release)(v24);
          uint64_t v24 = 0;
        }
      }
      if (acquireProperty<OSNumber>(v6, "wlan.llw.tx.ring.size", &v23, 1uLL, "IOService") && v23)
      {
        if (OSNumber::unsigned32BitValue(v23)) {
          *(_DWORD *)(*((void *)this + 9) + 4448)  = OSNumber::unsigned32BitValue(v23);
        }
        if (v23)
        {
          ((void (*)(OSNumber *))v23->release)(v23);
          __int16 v23 = 0;
        }
      }
      if (acquireProperty<OSNumber>(v6, "wlan.tx.ring.size", &v23, 1uLL, "IOService") && v23)
      {
        if (OSNumber::unsigned32BitValue(v23)) {
          *(_DWORD *)(*((void *)this + 9) + 4452)  = OSNumber::unsigned32BitValue(v23);
        }
        if (v23)
        {
          ((void (*)(OSNumber *))v23->release)(v23);
          __int16 v23 = 0;
        }
      }
      if (acquireProperty<OSNumber>(v6, "wlan.rx.ring.size", &v23, 1uLL, "IOService") && v23)
      {
        if (OSNumber::unsigned32BitValue(v23)) {
          *(_DWORD *)(*((void *)this + 9) + 4456)  = OSNumber::unsigned32BitValue(v23);
        }
        if (v23)
        {
          ((void (*)(OSNumber *))v23->release)(v23);
          __int16 v23 = 0;
        }
      }
      if (acquireProperty<OSNumber>(v6, "wlan.tx.submission-queue.size", &v23, 1uLL, "IOService") && v23)
      {
        if (OSNumber::unsigned32BitValue(v23)) {
          *(_DWORD *)(*((void *)this + 9) + 4460)  = OSNumber::unsigned32BitValue(v23);
        }
        if (v23)
        {
          ((void (*)(OSNumber *))v23->release)(v23);
          __int16 v23 = 0;
        }
      }
      if (acquireProperty<OSNumber>(v6, "wlan.skywalk.packetpoolsize", &v23, 1uLL, "IOService") && v23)
      {
        if (OSNumber::unsigned32BitValue(v23)) {
          *(_DWORD *)(*((void *)this + 9) + 4464)  = OSNumber::unsigned32BitValue(v23);
        }
        if (v23)
        {
          ((void (*)(OSNumber *))v23->release)(v23);
          __int16 v23 = 0;
        }
      }
      if (isDevFusedOrCSRInternal)
      {
        int v22 = 0;
        if (IOParseBootArgNumber("wlan.rx.ring.size", &v22, 4))
        {
          unsigned int v12 = v22;
          if (v22 <= 256) {
            unsigned int v12 = 256;
          }
          if (v12 >= 0x800) {
            unsigned int v12 = 2048;
          }
          *(_DWORD *)(*((void *)this + 9) + 4456)  = v12;
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v17, "[dk] %s@%d:%s() boot-args overrides '%s' to %d, bounded value: %d\n", "fetchAndUpdateRingParameters", 5618, "fetchAndUpdateRingParameters", "wlan.rx.ring.size", v22, *(_DWORD *)(*((void *)this + 9) + 4456));
            }
          }
        }
        if (IOParseBootArgNumber("wlan.tx.ring.size", &v22, 4))
        {
          unsigned int v13 = v22;
          if (v22 <= 256) {
            unsigned int v13 = 256;
          }
          if (v13 >= 0x800) {
            unsigned int v13 = 2048;
          }
          *(_DWORD *)(*((void *)this + 9) + 4452)  = v13;
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              int v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v18, "[dk] %s@%d:%s() boot-args overrides '%s' to %d, bounded value: %d\n", "fetchAndUpdateRingParameters", 5624, "fetchAndUpdateRingParameters", "wlan.tx.ring.size", v22, *(_DWORD *)(*((void *)this + 9) + 4452));
            }
          }
        }
        if (IOParseBootArgNumber("wlan.tx.submission-queue.size", &v22, 4))
        {
          unsigned int v14 = v22;
          if (v22 <= 256) {
            unsigned int v14 = 256;
          }
          if (v14 >= 0x800) {
            unsigned int v14 = 2048;
          }
          *(_DWORD *)(*((void *)this + 9) + 4460)  = v14;
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              int v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v19, "[dk] %s@%d:%s() boot-args overrides '%s' to %d, bounded value: %d\n", "fetchAndUpdateRingParameters", 5630, "fetchAndUpdateRingParameters", "wlan.tx.submission-queue.size", v22, *(_DWORD *)(*((void *)this + 9) + 4460));
            }
          }
        }
        if (IOParseBootArgNumber("wlan.llw.tx.ring.size", &v22, 4))
        {
          unsigned int v15 = v22;
          if (v22 <= 256) {
            unsigned int v15 = 256;
          }
          if (v15 >= 0x800) {
            unsigned int v15 = 2048;
          }
          *(_DWORD *)(*((void *)this + 9) + 4448)  = v15;
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              size_t v20 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v20, "[dk] %s@%d:%s() boot-args overrides '%s' to %d, bounded value: %d\n", "fetchAndUpdateRingParameters", 5636, "fetchAndUpdateRingParameters", "wlan.llw.tx.ring.size", v22, *(_DWORD *)(*((void *)this + 9) + 4448));
            }
          }
        }
        if (IOParseBootArgNumber("wlan.skywalk.packetpoolsize", &v22, 4))
        {
          unsigned int v16 = v22;
          if (v22 <= 1536) {
            unsigned int v16 = 1536;
          }
          if (v16 >= 0x3200) {
            unsigned int v16 = 12800;
          }
          *(_DWORD *)(*((void *)this + 9) + 4464)  = v16;
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v21 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v21, "[dk] %s@%d:%s() boot-args overrides '%s' to %d, bounded value: %d\n", "fetchAndUpdateRingParameters", 5642, "fetchAndUpdateRingParameters", "wlan.skywalk.packetpoolsize", v22, *(_DWORD *)(*((void *)this + 9) + 4448));
            }
          }
        }
      }
      (*(void (**)(void, void))(**(void **)(*((void *)this + 9) + 5400) + 632))(*(void *)(*((void *)this + 9) + 5400), *(unsigned int *)(*((void *)this + 9) + 4448));
      (*(void (**)(void))(**(void **)(*((void *)this + 9) + 5400) + 640))();
      (*(void (**)(void))(**(void **)(*((void *)this + 9) + 5400) + 648))();
      (*(void (**)(void))(**(void **)(*((void *)this + 9) + 5400) + 656))();
      (*(void (**)(void))(**(void **)(*((void *)this + 9) + 5400) + 664))();
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::setPlatformConfigProperties(AppleBCMWLANCore *this, OSDictionary *a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 9) + 5400);
  if (v3)
  {
    if ((*(uint64_t (**)(void))(*(void *)(v3 + 48) + 288))())
    {
      if (a2)
      {
        if (OSMetaClassBase::safeMetaCast(a2, gOSDictionaryMetaClass))
        {
          iterateObjectsHelper();
          return 0;
        }
        uint64_t v5 = 3758097090;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logEmergency(v10, "[dk] %s@%d:dict argument is not an OSDictionary");
            return 3758097090;
          }
        }
      }
      else
      {
        uint64_t v5 = 3758097090;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logEmergency(v9, "[dk] %s@%d:Missing dict argument");
            return 3758097090;
          }
        }
      }
    }
    else
    {
      uint64_t v5 = 3758097086;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logEmergency(v8, "[dk] %s@%d:Missing ProvisioningRoot");
        }
      }
    }
  }
  else
  {
    uint64_t v5 = 3758097086;
    if ((*(uint64_t (**)(AppleBCMWLANCore *, OSDictionary *))(*(void *)this + 1848))(this, a2))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logEmergency(v7, "[dk] %s@%d:Missing fProvider");
      }
    }
  }
  return v5;
}

uint64_t AppleBCMWLANCore::verifyImages()
{
  return 1;
}

uint64_t AppleBCMWLANCore::logChipImage(AppleBCMWLANCore *this, const AppleBCMWLANChipImage *a2)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v7, 0x80uLL, "[dk] %s@%d:\n", "logChipImage", 5840);
    }
  }
  uint64_t v4 = *(void *)(*((void *)this + 9) + 5408);
  uint64_t v5 = *(uint64_t (**)(const AppleBCMWLANChipImage *, uint64_t, uint64_t (*)(uint64_t, IO80211Buffer *, unint64_t *), void))(*(void *)a2 + 152);
  return v5(a2, v4, AppleBCMWLANProvisioningManager::logNVRAM, 0);
}

uint64_t AppleBCMWLANCore::completeChipImage(AppleBCMWLANCore *this, AppleBCMWLANChipImage *a2)
{
  if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
    || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
        !CCLogStream::shouldLog()))
  {
    if (a2) {
      goto LABEL_4;
    }
    return 3758097084;
  }
  uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  CCLogStream::logNoticeIf(v6, 0x80uLL, "[dk] %s@%d:\n", "completeChipImage", 5852);
  if (!a2) {
    return 3758097084;
  }
LABEL_4:
  if (*(void *)(*((void *)this + 9) + 14160) && CCLogStream::shouldLog()) {
    AppleBCMWLANCore::logChipImage(this, a2);
  }
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)(*(void *)(*((void *)this + 9) + 5400) + 48) + 64);
  return v4();
}

AppleBCMWLANLQM *AppleBCMWLANCore::halt(AppleBCMWLANCore *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      unsigned int v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      unsigned int v13 = (void *)current_thread();
      uint64_t v14 = thread_tid(v13);
      CCLogStream::logInfo(v12, "[dk] %s@%d:AppleBCMWLANCore::halt[%u] this[%p] <%llx>\n", "halt", 45451, 45451, this, v14);
    }
  }
  AppleBCMWLANCore::resetWoWStateMachine(this);
  size_t v2 = *(AppleBCMWLANBGScanAdapter **)(*((void *)this + 9) + 5504);
  if (v2) {
    AppleBCMWLANBGScanAdapter::cancelScanPrivacyMacTimer(v2);
  }
  AppleBCMWLANCore::disableWorkQueueSources(this);
  uint64_t v3 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  if (v3)
  {
    AppleBCMWLANCommander::delayQueueTimeouts(v3);
    uint64_t v3 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  }
  AppleBCMWLANCommander::quiesce(v3);
  (*(void (**)(void))(*(void *)(*(void *)(*((void *)this + 9) + 5400) + 48) + 240))();
  AppleBCMWLANCore::resetInterfacesBegin(this);
  uint64_t v4 = *((void *)this + 9);
  uint64_t v5 = *(void *)(v4 + 11304);
  if (v5)
  {
    AppleBCMWLANSkywalkInterface::reset(v5);
    uint64_t v4 = *((void *)this + 9);
  }
  uint64_t v6 = *(void *)(v4 + 11320);
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 1456))(v6);
    uint64_t v4 = *((void *)this + 9);
  }
  uint64_t v7 = *(void *)(v4 + 11312);
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 1456))(v7);
    uint64_t v4 = *((void *)this + 9);
  }
  uint64_t v8 = *(void *)(v4 + 29800);
  if (v8)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 1456))(v8);
    uint64_t v4 = *((void *)this + 9);
  }
  uint64_t v9 = *(void *)(v4 + 29808);
  if (v9)
  {
    (*(void (**)(uint64_t))(*(void *)v9 + 1456))(v9);
    uint64_t v4 = *((void *)this + 9);
  }
  uint64_t v10 = *(AppleBCMWLANJoinAdapter **)(v4 + 5424);
  if (v10)
  {
    AppleBCMWLANJoinAdapter::reset(v10);
    uint64_t v4 = *((void *)this + 9);
  }
  *(_DWORD *)uint64_t v4 = 100;
  *(_DWORD *)(*((void *)this + 9) + 4)  = 100;
  atomic_fetch_and((atomic_uint *volatile)(*((void *)this + 9) + 10388), 0xEFFFFFFF);
  *(_DWORD *)(*((void *)this + 9) + 8824)  = 0;
  uint64_t result = *(AppleBCMWLANLQM **)(*((void *)this + 9) + 5608);
  if (result)
  {
    return (AppleBCMWLANLQM *)AppleBCMWLANLQM::stopAssocTimer(result);
  }
  return result;
}

uint64_t AppleBCMWLANCore::loadAndSetup(IOService *this, const AppleBCMWLANChipImage *a2)
{
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      __int16 v23 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      uint64_t v24 = (void *)current_thread();
      uint64_t v25 = thread_tid(v24);
      CCLogStream::logNoticeIf(v23, 0x80uLL, "[dk] %s@%d:<%llx>\n", "loadAndSetup", 5968, v25);
    }
  }
  if ((BYTE5(this[1].OSObject::OSObjectInterface::__vftable[649].init) & 0x20) != 0) {
    return 3758097122;
  }
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      long long v26 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logAlert(v26, "[dk] %s@%d:Chip image loading begins.", "loadAndSetup", 5973);
    }
  }
  free  = (AppleBCMWLANBusInterface *)this[1].OSObject::OSObjectInterface::__vftable[337].free;
  if (free) {
    AppleBCMWLANBusInterface::sendBootCheckPointToCoreAnalytics(free, 0, 6u);
  }
  if (IO80211Controller::getDeadlockPolice((IO80211Controller *)this))
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[1].Dispatch)(this))
    {
      uint64_t v5 = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[1].Dispatch)(this);
      if ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 168))(v5))
      {
        DeadlockPolice  = (IO80211DeadlockPolice *)IO80211Controller::getDeadlockPolice((IO80211Controller *)this);
        uint64_t v7 = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[1].Dispatch)(this);
        uint64_t v8 = (IODispatchQueue *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 168))(v7);
        IO80211DeadlockPolice::resetDeadlockPolice(DeadlockPolice, v8);
      }
    }
  }
  uint64_t v9 = (*(uint64_t (**)(void))(*((void *)this[1].OSObject::OSObjectInterface::__vftable[337].free + 6) + 72))();
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)
    && (((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this),
        CCLogStream::shouldLog()))
  {
    long long v27 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    CCLogStream::logAlert(v27, "[dk] %s@%d:Chip image loading has finished.", "loadAndSetup", 5987);
    if (!v9) {
      goto LABEL_17;
    }
  }
  else if (!v9)
  {
LABEL_17:
    if (((*(uint64_t (**)(void))(*((void *)this[1].OSObject::OSObjectInterface::__vftable[337].free + 6) + 416))() & 1) == 0)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          int v38 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v38, "[dk] %s@%d:Failed to set WiFi Boot State", "loadAndSetup", 5990);
        }
      }
    }
  }
  uint64_t v10 = (AppleBCMWLANBusInterface *)this[1].OSObject::OSObjectInterface::__vftable[337].free;
  if (v10) {
    AppleBCMWLANBusInterface::sendBootCheckPointToCoreAnalytics(v10, 0, 7u);
  }
  if (v9)
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        long long v28 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        long long v29 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v9);
        CCLogStream::logEmergency(v28, "[dk] %s@%d: provider loadChipImage fail %s\n", "loadAndSetup", 5996, v29);
      }
    }
    unsigned int v13 = this[1].OSObject::OSObjectInterface::__vftable[337].free;
    if (v13
      && (*(unsigned int (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)v13 + 552))(v13))
    {
      AppleBCMWLANCore::setBootUnrecoverable(this, 3825175655);
      uint64_t v14 = this;
      uint64_t v15 = 12;
      uint64_t v16 = 5999;
    }
    else
    {
      uint64_t v14 = this;
      uint64_t v15 = 5;
      uint64_t v16 = 6001;
    }
LABEL_53:
    AppleBCMWLANCore::reportInitFailure(v14, v15, v16, v11, v12);
    return v9;
  }
  atomic_fetch_and((atomic_uint *volatile)((char *)&this[1].OSObject::OSObjectInterface::__vftable[649].init + 4), 0xFFFFFFBF);
  int v17 = AppleBCMWLANCommander::reset((AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free);
  if (v17)
  {
    int v18 = v17;
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        long long v35 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v35, "[dk] %s@%d: Failed commander reset(), ret[0x%08x]\n", "loadAndSetup", 6009, v18);
      }
    }
  }
  int v19 = this[1].OSObject::OSObjectInterface::__vftable;
  if (LOBYTE(v19[2214].init))
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        size_t v20 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v20, "[dk] %s@%d:command pool reset not allowed\n", "loadAndSetup", 6015);
      }
    }
  }
  else
  {
    AppleBCMWLANCommander::resetFreeCommanderPool((AppleBCMWLANCommander *)v19[338].free);
  }
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      long long v30 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      long long v31 = this[1].OSObject::OSObjectInterface::__vftable;
      uint64_t init_high = HIDWORD(v31[649].init);
      free_high  = SHIDWORD(v31[1231].free);
      if (free_high > 4) {
        long long v34 = "UNKNOWN";
      }
      else {
        long long v34 = off_10038CBB8[free_high];
      }
      CCLogStream::logInfo(v30, "[dk] %s@%d:Wakeup commander fStateFlags(%lx) userPower(%s)\n", "loadAndSetup", 6018, init_high, v34);
    }
  }
  AppleBCMWLANCommander::wakeup((AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free);
  uint64_t v21 = AppleBCMWLANCore::setupFirmware(this, a2);
  if (v21)
  {
    uint64_t v9 = v21;
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        long long v36 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        int v37 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v9);
        CCLogStream::logEmergency(v36, "[dk] %s@%d: setupFirmware fail %s\n", "loadAndSetup", 6023, v37);
      }
    }
    uint64_t v14 = this;
    uint64_t v15 = 6;
    uint64_t v16 = 6024;
    goto LABEL_53;
  }
  uint64_t v9 = AppleBCMWLANCore::setupDriver(this);
  if (v9)
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        int v39 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t v40 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v9);
        CCLogStream::logEmergency(v39, "[dk] %s@%d: setupDriver fail %s\n", "loadAndSetup", 6030, v40);
      }
    }
    uint64_t v14 = this;
    uint64_t v15 = 7;
    uint64_t v16 = 6031;
    goto LABEL_53;
  }
  return v9;
}

uint64_t AppleBCMWLANCore::resetInterfacesComplete(AppleBCMWLANCore *this)
{
  int v9 = 1;
  size_t v2 = (void *)*((void *)this + 9);
  uint64_t v3 = (IO80211SkywalkInterface *)v2[1413];
  if (v3)
  {
    IO80211Controller::postMessage(this, v3, 0x31u, &v9, 4uLL, 1);
    size_t v2 = (void *)*((void *)this + 9);
  }
  uint64_t v4 = (IO80211SkywalkInterface *)v2[1414];
  if (v4)
  {
    IO80211Controller::postMessage(this, v4, 0x31u, &v9, 4uLL, 1);
    size_t v2 = (void *)*((void *)this + 9);
  }
  uint64_t v5 = (IO80211SkywalkInterface *)v2[3725];
  if (v5)
  {
    IO80211Controller::postMessage(this, v5, 0x31u, &v9, 4uLL, 1);
    size_t v2 = (void *)*((void *)this + 9);
  }
  uint64_t v6 = (IO80211SkywalkInterface *)v2[3726];
  if (v6)
  {
    IO80211Controller::postMessage(this, v6, 0x31u, &v9, 4uLL, 1);
    size_t v2 = (void *)*((void *)this + 9);
  }
  uint64_t v7 = (IO80211SkywalkInterface *)v2[1415];
  if (v7) {
    IO80211Controller::postMessage(this, v7, 0x31u, &v9, 4uLL, 1);
  }
  return 0;
}

uint64_t AppleBCMWLANCore::setBootUnrecoverable(IOService *this, uint64_t a2)
{
  atomic_fetch_or((atomic_uint *volatile)((char *)&this[1].OSObject::OSObjectInterface::__vftable[649].init + 4), 0x200000u);
  LODWORD(this[1].OSObject::OSObjectInterface::__vftable[649].free)  = a2;
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v7 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      uint64_t v8 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, a2);
      CCLogStream::logAlert(v7, "[dk] %s@%d:WiFi Chip boot unrecoverable due to %s\n", "setBootUnrecoverable", 8166, v8);
    }
  }
  uint64_t v4 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, a2);
  setPropertyHelper(this, "Chip Boot Unrecoverable", v4);
  AppleBCMWLANCore::removeFirmwareLoader(this);
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[337].free + 808);
  return v5();
}

uint64_t AppleBCMWLANCore::setupFirmware(IOService *this, const AppleBCMWLANChipImage *a2)
{
  v188  = 0;
  uint64_t v189 = 0;
  this[1].OSObject::OSObjectInterface::__vftable[408].init  = (BOOL (__cdecl *)(OSObjectInterface *__hidden))mach_continuous_time();
  this[1].OSObject::OSObjectInterface::__vftable[408].free  = 0;
  uint64_t v4 = (_OWORD *)((char *)&this[1].OSObject::OSObjectInterface::__vftable[306].init + 1);
  *uint64_t v4 = 0u;
  v4[1]  = 0u;
  _OWORD v4[2] = 0u;
  v4[3]  = 0u;
  v4[4]  = 0u;
  void v4[5] = 0u;
  v4[6]  = 0u;
  v4[7]  = 0u;
  v4[8]  = 0u;
  v4[9]  = 0u;
  v4[10]  = 0u;
  v4[11]  = 0u;
  v4[12]  = 0u;
  v4[13]  = 0u;
  v4[14]  = 0u;
  v4[15]  = 0u;
  v4[16]  = 0u;
  v4[17]  = 0u;
  v4[18]  = 0u;
  v4[19]  = 0u;
  v4[20]  = 0u;
  v4[21]  = 0u;
  v4[22]  = 0u;
  v4[23]  = 0u;
  v4[24]  = 0u;
  v4[25]  = 0u;
  v4[26]  = 0u;
  v4[27]  = 0u;
  v4[28]  = 0u;
  v4[29]  = 0u;
  v4[30]  = 0u;
  AppleBCMWLANCore::enableWorkQueueSources((AppleBCMWLANCore *)this);
  uint64_t v5 = (const char *)IOMallocZeroData();
  if (!v5) {
    return 3758097085;
  }
  uint64_t v6 = v5;
  v187  = -1431655766;
  const char *v5 = 0;
  uint64_t v190 = (int **)v5;
  v191  = 0x10000000101;
  MaxSupportedEventLogSets  = AppleBCMWLANCommander::runIOVarGet((AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free, (uint64_t)"ver", (uint64_t)&kNoTxPayload, (uint64_t)&v190, 0);
  uint64_t v8 = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
  if (MaxSupportedEventLogSets)
  {
    if (v8)
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        long long v34 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        long long v35 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, MaxSupportedEventLogSets);
        CCLogStream::logAlert(v34, "[dk] %s@%d: iovar get version command failed: %s\n", "setupFirmware", 8541, v35);
      }
    }
    IOFreeData();
    return MaxSupportedEventLogSets;
  }
  if (v8)
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      unint64_t v41 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logAlert(v41, "[dk] %s@%d: Firmware Version: %s\n", "setupFirmware", 8544, v6);
    }
  }
  size_t v10 = strlen(v6) - 1;
  if (v6[v10] == 10) {
    v6[v10]  = 0;
  }
  OSStringPtr v11 = OSString::withCString(v6);
  setPropertyHelper(this, "FirmwareVersion", v11);
  if (v11) {
    ((void (*)(OSStringPtr))v11->release)(v11);
  }
  BOOL v12 = strnstr(v6, "WLTEST", 0x101uLL)
     || strnstr(v6, "MFGTEST", 0x101uLL)
     || (*(uint64_t (**)(const AppleBCMWLANChipImage *))(*(void *)a2 + 136))(a2) == 1;
  IOFreeData();
  HIBYTE(this[1].OSObject::OSObjectInterface::__vftable[68].free)  = v12;
  p_ListenInterval  = 0;
  v186  = 0;
  uint64_t v190 = &p_ListenInterval;
  v191  = 0x1000100010;
  uint64_t v13 = AppleBCMWLANCommander::runIOVarGet((AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free, (uint64_t)"wlc_ver", (uint64_t)&kNoTxPayload, (uint64_t)&v190, 0);
  if (v13)
  {
    MaxSupportedEventLogSets  = v13;
    if (v13 != -469794537) {
      return MaxSupportedEventLogSets;
    }
    HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[48].free)  = 3;
  }
  else
  {
    HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[48].free)  = WORD2(v186);
    uint64_t v14 = this[1].OSObject::OSObjectInterface::__vftable;
    if (HIDWORD(v14[48].free) >= 0x16)
    {
      MaxSupportedEventLogSets  = 3825174297;
      CCFaultReporter::reportFault((CCFaultReporter *)v14[346].free, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0x2179u, "setupFirmware", 0, -469792999, 0, v178);
      return MaxSupportedEventLogSets;
    }
  }
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      __int16 v42 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logAlert(v42, "[dk] %s@%d:Firmware InterfaceVersion: %d\n", "setupFirmware", 8576, HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[48].free));
    }
  }
  MaxSupportedEventLogSets  = AppleBCMWLANCore::getMaxSupportedEventLogSets((AppleBCMWLANCore *)this);
  if (!MaxSupportedEventLogSets)
  {
    MaxSupportedEventLogSets  = AppleBCMWLANCore::setupTraceLogCheckers((AppleBCMWLANCore *)this);
    if (!MaxSupportedEventLogSets)
    {
      if (!v12 || (*(unsigned int (**)(const AppleBCMWLANChipImage *))(*(void *)a2 + 96))(a2))
      {
        uint64_t v15 = (*(uint64_t (**)(const AppleBCMWLANChipImage *, IOService *, uint64_t (*)(AppleBCMWLANCore *, IO80211Buffer *, uint64_t), void))(*(void *)a2 + 152))(a2, this, AppleBCMWLANCore::outputRegTable, 0);
        if (v15)
        {
          MaxSupportedEventLogSets  = v15;
          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              int v43 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              int v44 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, MaxSupportedEventLogSets);
              CCLogStream::logAlert(v43, "[dk] %s@%d:Download clmb failed, rv 0x%x %s\n", "setupFirmware", 8627, MaxSupportedEventLogSets, v44);
            }
          }
          free  = (CCFaultReporter *)this[1].OSObject::OSObjectInterface::__vftable[346].free;
          uint64_t v17 = ((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, MaxSupportedEventLogSets);
          CCFaultReporter::reportFault(free, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0x21B4u, "setupFirmware", 0, -469792998, "%s", v17);
          return MaxSupportedEventLogSets;
        }
        if (!v12) {
          goto LABEL_40;
        }
      }
      if ((*(unsigned int (**)(const AppleBCMWLANChipImage *))(*(void *)a2 + 112))(a2))
      {
LABEL_40:
        uint64_t v18 = (*(uint64_t (**)(const AppleBCMWLANChipImage *, IOService *, uint64_t (*)(AppleBCMWLANCore *, IO80211Buffer *, uint64_t), void))(*(void *)a2 + 152))(a2, this, AppleBCMWLANCore::outputTxCapTable, 0);
        if (v18)
        {
          MaxSupportedEventLogSets  = v18;
          int v19 = (CCFaultReporter *)this[1].OSObject::OSObjectInterface::__vftable[346].free;
          size_t v20 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v18);
          CCFaultReporter::reportFault(v19, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0x21BEu, "setupFirmware", 0, -469792997, "%s", v20);
          if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
            return MaxSupportedEventLogSets;
          }
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (!CCLogStream::shouldLog()) {
            return MaxSupportedEventLogSets;
          }
          uint64_t v21 = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          uint64_t v179 = 8639;
          v180  = ((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, MaxSupportedEventLogSets);
          int v22 = "[dk] %s@%d:Download txcap failed: %s\n";
LABEL_52:
          long long v27 = (CCLogStream *)v21;
          goto LABEL_57;
        }
      }
      int v23 = (*(uint64_t (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[337].free
                                                                                     + 368))(this[1].OSObject::OSObjectInterface::__vftable[337].free);
      if ((v23 == 4399 || v23 == 4388)
        && (!v12 || (*(unsigned int (**)(const AppleBCMWLANChipImage *))(*(void *)a2 + 128))(a2)))
      {
        uint64_t v24 = (*(uint64_t (**)(const AppleBCMWLANChipImage *, IOService *, uint64_t (*)(AppleBCMWLANCore *, IO80211Buffer *, uint64_t), void))(*(void *)a2 + 152))(a2, this, AppleBCMWLANCore::outputPlatcfg, 0);
        if (v24)
        {
          MaxSupportedEventLogSets  = v24;
          uint64_t v25 = (CCFaultReporter *)this[1].OSObject::OSObjectInterface::__vftable[346].free;
          long long v26 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v24);
          CCFaultReporter::reportFault(v25, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0x21C9u, "setupFirmware", 0, -469792990, "%s", v26);
          if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
            return MaxSupportedEventLogSets;
          }
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (!CCLogStream::shouldLog()) {
            return MaxSupportedEventLogSets;
          }
          uint64_t v21 = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          uint64_t v179 = 8650;
          v180  = ((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, MaxSupportedEventLogSets);
          int v22 = "[dk] %s@%d:Download platcfg failed: %s\n";
          goto LABEL_52;
        }
      }
      uint64_t v28 = AppleBCMWLANCore::outputWiFiCal((AppleBCMWLANCore *)this);
      if (v28)
      {
        MaxSupportedEventLogSets  = v28;
        if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
          return MaxSupportedEventLogSets;
        }
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (!CCLogStream::shouldLog()) {
          return MaxSupportedEventLogSets;
        }
        uint64_t v29 = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t v179 = 8658;
        v180  = ((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, MaxSupportedEventLogSets);
        int v22 = "[dk] %s@%d:Download wifi cal msf failed: %s\n";
        long long v27 = (CCLogStream *)v29;
LABEL_57:
        CCLogStream::logAlert(v27, v22, "setupFirmware", v179, v180);
        return MaxSupportedEventLogSets;
      }
      uint64_t v30 = AppleBCMWLANTimeKeeper::synchronizeTime((AppleBCMWLANTimeKeeper *)this[1].OSObject::OSObjectInterface::__vftable[341].free);
      if (v30)
      {
        MaxSupportedEventLogSets  = v30;
        if (v30 != -536870201) {
          return MaxSupportedEventLogSets;
        }
      }
      MaxSupportedEventLogSets  = AppleBCMWLANCore::updateFWAPIVerFromHW((AppleBCMWLANCore *)this);
      if (MaxSupportedEventLogSets) {
        return MaxSupportedEventLogSets;
      }
      long long v31 = this[1].OSObject::OSObjectInterface::__vftable;
      long long v32 = v31[1098].free;
      if (v32)
      {
        (*(void (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)v32 + 16))(v32);
        this[1].OSObject::OSObjectInterface::__vftable[1098].free  = 0;
        long long v31 = this[1].OSObject::OSObjectInterface::__vftable;
      }
      this[1].OSObject::OSObjectInterface::__vftable[1098].free  = (void (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANChanSpec::withFWAPIVer(HIDWORD(v31[64].free));
      long long v33 = this[1].OSObject::OSObjectInterface::__vftable;
      if (!v33[1098].free) {
        return 3758097086;
      }
      if (v12)
      {
        if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
        {
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v66 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            CCLogStream::logAlert(v66, "[dk] %s@%d:Manufacturing image type; omitting additional initializations..\n",
              "setupFirmware",
              8678);
          }
        }
        (*(void (**)(void (__cdecl *)(OSObjectInterface *__hidden), uint64_t))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[337].free
                                                                                       + 160))(this[1].OSObject::OSObjectInterface::__vftable[337].free, 9216);
        AppleBCMWLANCore::processChipCaps(this);
        AppleBCMWLANCore::configureDefaultEvents((AppleBCMWLANCore *)this);
        return 0;
      }
      BYTE5(v33[65].init)  = 0;
      MaxSupportedEventLogSets  = AppleBCMWLANCore::processChipCaps(this);
      if (!MaxSupportedEventLogSets)
      {
        AppleBCMWLANCore::configureRegionSpecific((AppleBCMWLANCore *)this);
        v187  = 0;
        MaxSupportedEventLogSets  = AppleBCMWLANCore::set_mpc_state((AppleBCMWLANCore *)this, 0, &v187);
        if (!MaxSupportedEventLogSets)
        {
          if (!AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 81)
            || (MaxSupportedEventLogSets  = AppleBCMWLANCore::setEntropyForRNG((AppleBCMWLANCore *)this),
                !MaxSupportedEventLogSets))
          {
            AppleBCMWLANCore::updateHTAndVHTCapBasedOnHWSupport((AppleBCMWLANCore *)this);
            AppleBCMWLANCore::configureTethering((AppleBCMWLANCore *)this);
            LODWORD(p_ListenInterval)  = 1;
            v188  = &p_ListenInterval;
            uint64_t v189 = 4;
            uint64_t v36 = AppleBCMWLANCommander::runIOVarSet((AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free, (uint64_t)"pm2_refresh_badiv", (uint64_t)&v188, 0, 0);
            if (v36)
            {
              uint64_t v37 = v36;
              if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
              {
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v67 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  size_t v68 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v37);
                  CCLogStream::logAlert(v67, "[dk] %s@%d: iovar set pm2_refresh_badiv failed: %s\n", "setupFirmware", 8733, v68);
                }
              }
            }
            AppleBCMWLANCore::configureDualPowerMode((AppleBCMWLANCore *)this);
            MaxSupportedEventLogSets  = AppleBCMWLANCore::populateCountryList((AppleBCMWLANCore *)this);
            if (!MaxSupportedEventLogSets)
            {
              int v38 = this[1].OSObject::OSObjectInterface::__vftable;
              if (HIDWORD(v38[48].free) >= 0x11)
              {
                MaxSupportedEventLogSets  = AppleBCMWLANCore::populate6ESupportedCountryList((AppleBCMWLANCore *)this);
                if (MaxSupportedEventLogSets) {
                  return MaxSupportedEventLogSets;
                }
                int v38 = this[1].OSObject::OSObjectInterface::__vftable;
              }
              BYTE3(v38[421].free)  = 0;
              if (LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[421].free))
              {
                BYTE4(this[1].OSObject::OSObjectInterface::__vftable[422].free)  = 1;
                if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                {
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  if (CCLogStream::shouldLog())
                  {
                    unsigned int v69 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    CCLogStream::logAlert(v69, "[dk] %s@%d:WiFiCC : Initializing FW with country code [%s]. Probably a chip reset recovery\n", "setupFirmware", 8765, (const char *)&this[1].OSObject::OSObjectInterface::__vftable[421].free);
                  }
                }
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[8].getMetaClass)(this);
                if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                {
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  if (CCLogStream::shouldLog())
                  {
                    unint64_t v70 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    CCLogStream::logAlert(v70, "[dk] %s@%d:WiFiCC : Current host country code [%s] setup to FW is complete.\n");
                  }
                }
              }
              else
              {
                BYTE4(this[1].OSObject::OSObjectInterface::__vftable[422].free)  = 0;
                if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                {
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  if (CCLogStream::shouldLog())
                  {
                    uint64_t v118 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    CCLogStream::logAlert(v118, "[dk] %s@%d:WiFiCC : host country code not present. Defaulting fHostCountryEnabled to false\n", "setupFirmware", 8770);
                  }
                }
                MaxSupportedEventLogSets  = AppleBCMWLANCore::configureDefaultCountryCode(this);
                if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)
                  && (((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this),
                      CCLogStream::shouldLog()))
                {
                  uint64_t v119 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  size_t v120 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, MaxSupportedEventLogSets);
                  CCLogStream::logAlert(v119, "[dk] %s@%d:WiFiCC : setup default countrycode to FW complete. rv : [%s] \n", "setupFirmware", 8772, v120);
                  if (MaxSupportedEventLogSets) {
                    return MaxSupportedEventLogSets;
                  }
                }
                else if (MaxSupportedEventLogSets)
                {
                  return MaxSupportedEventLogSets;
                }
                uint64_t v45 = AppleBCMWLANCore::handleCountryCodeChangeToRepopulateChannels((AppleBCMWLANCore *)this);
                uint64_t v46 = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if (v45)
                {
                  if (v46)
                  {
                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    if (CCLogStream::shouldLog())
                    {
                      uint64_t v47 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                      unint64_t v48 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v45);
                      CCLogStream::logCrit(v47, "[dk] %s@%d: fw query for chanspecs failed during init : %s\n", "setupFirmware", 8778, v48);
                    }
                  }
                }
                else if (v46)
                {
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  if (CCLogStream::shouldLog())
                  {
                    int v65 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    ((void (*)(IOService *, void))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, 0);
                    CCLogStream::logAlert(v65, "[dk] %s@%d: WiFiCC : fw query for chanspecs SUCCEEDED during init : %s\n");
                  }
                }
              }
              v184  = 0;
              IOParseBootArgNumber("wlan.11d.ignore", &v184, 4);
              if ((AppleBCMWLANConfigManager::isIgnore11dPwrCtrl((AppleBCMWLANConfigManager *)this[1].OSObject::OSObjectInterface::__vftable[342].init) & 1) != 0
                || (MaxSupportedEventLogSets  = 0, v184))
              {
                if ((AppleBCMWLANConfigManager::isIgnore11dPwrCtrl((AppleBCMWLANConfigManager *)this[1].OSObject::OSObjectInterface::__vftable[342].init) & 1) == 0)
                {
                  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                  {
                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    if (CCLogStream::shouldLog())
                    {
                      v125  = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                      CCLogStream::logAlert(v125, "[dk] %s@%d: 11d ingored due to boot-arg wlan.11d.ignore override\n", "setupFirmware", 8792);
                    }
                  }
                }
                LODWORD(p_ListenInterval)  = 1;
                v188  = &p_ListenInterval;
                uint64_t v189 = 4;
                uint64_t v39 = AppleBCMWLANCommander::runIOVarSet((AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free, (uint64_t)"tpc_options", (uint64_t)&v188, 0, 0);
                uint64_t v40 = v39;
                if (v39 != -469794537 && v39)
                {
                  MaxSupportedEventLogSets  = v39;
                  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)
                    && (((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this),
                        MaxSupportedEventLogSets  = v40,
                        CCLogStream::shouldLog()))
                  {
                    int v126 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    v127  = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v40);
                    CCLogStream::logAlert(v126, "[dk] %s@%d: iovar tpc_options command failed: %s\n", "setupFirmware", 8798, v127);
                    MaxSupportedEventLogSets  = v40;
                    if (!v40) {
                      goto LABEL_116;
                    }
                  }
                  else if (!v40)
                  {
                    goto LABEL_116;
                  }
                }
                else
                {
                  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                  {
                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    if (CCLogStream::shouldLog())
                    {
                      char v121 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                      CCLogStream::logAlert(v121, "[dk] %s@%d:Disables adoption of tx power constraints from the AP's 802.11D Country IE and 802.11H Power Constraint IE\n", "setupFirmware", 8801);
                    }
                  }
                  MaxSupportedEventLogSets  = 0;
                  if (!v40) {
                    goto LABEL_116;
                  }
                }
                if (v40 != -469794537) {
                  return MaxSupportedEventLogSets;
                }
              }
LABEL_116:
              LODWORD(p_ListenInterval)  = 0;
              v188  = &p_ListenInterval;
              uint64_t v189 = 4;
              uint64_t v49 = AppleBCMWLANCommander::runIOVarSet((AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free, (uint64_t)"vlan_mode", (uint64_t)&v188, 0, 0);
              uint64_t v50 = v49;
              if (v49 != -469794537
                && v49
                && (MaxSupportedEventLogSets  = v49,
                    ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                && (((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this),
                    MaxSupportedEventLogSets  = v50,
                    CCLogStream::shouldLog()))
              {
                v122  = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                unsigned __int8 v123 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v50);
                CCLogStream::logAlert(v122, "[dk] %s@%d: iovar vlan_mode command failed: %s\n", "setupFirmware", 8810, v123);
                MaxSupportedEventLogSets  = v50;
                if (!v50) {
                  goto LABEL_122;
                }
              }
              else if (!v50)
              {
                goto LABEL_122;
              }
              if (v50 != -469794537) {
                return MaxSupportedEventLogSets;
              }
LABEL_122:
              if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 78))
              {
                HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[1145].free)  = 0;
                IOParseBootArgNumber("wlan.txprofile.disable", &this[1].OSObject::OSObjectInterface::__vftable[1145].free, 4);
                LODWORD(p_ListenInterval)  = LODWORD(this[1].OSObject::OSObjectInterface::__vftable[1145].free) == 0;
                uint64_t v51 = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[1].free)(this);
                (*(void (**)(uint64_t, void *(*)(AppleBCMWLANCore *, unsigned int *), int **, void, void, void))(*(void *)v51 + 56))(v51, AppleBCMWLANCore::setTxProfileEnable, &p_ListenInterval, 0, 0, 0);
              }
              v183  = 0;
              if (IOParseBootArgNumber("wlan.roam_td_th", &v183, 4))
              {
                unsigned int v52 = v183;
                LODWORD(this[1].OSObject::OSObjectInterface::__vftable[1938].init)  = HIBYTE(v183);
                HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[1938].init)  = -BYTE2(v52);
                LODWORD(this[1].OSObject::OSObjectInterface::__vftable[1938].free)  = 1000 * BYTE1(v52);
                int v53 = 1000 * v52;
              }
              else
              {
                LODWORD(this[1].OSObject::OSObjectInterface::__vftable[1938].init)  = 5;
                HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[1938].init)  = -80;
                LODWORD(this[1].OSObject::OSObjectInterface::__vftable[1938].free)  = 70000;
                int v53 = 10000;
              }
              HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[1938].free)  = v53;
              v182  = 0;
              if (IOParseBootArgNumber("wlan.rts_prot_en", &v182, 4))
              {
                int v54 = v182;
                LODWORD(this[1].OSObject::OSObjectInterface::__vftable[1939].free)  = HIBYTE(v182);
                LODWORD(this[1].OSObject::OSObjectInterface::__vftable[1939].init)  = BYTE2(v54);
                int v54 = (unsigned __int16)v54;
              }
              else
              {
                LODWORD(this[1].OSObject::OSObjectInterface::__vftable[1939].free)  = 0;
                LODWORD(this[1].OSObject::OSObjectInterface::__vftable[1939].init)  = 99;
                int v54 = 25;
              }
              HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[1939].init)  = v54;
              if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 76))
              {
                IOParseBootArgNumber("wlan.lpscancore.disable", &this[1].OSObject::OSObjectInterface::__vftable[1146], 4);
                BYTE4(this[1].OSObject::OSObjectInterface::__vftable[1146].init)  = LODWORD(this[1].OSObject::OSObjectInterface::__vftable[1146].init) != 0;
                if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                {
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  if (CCLogStream::shouldLog())
                  {
                    uint64_t v124 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    CCLogStream::logInfo(v124, "[dk] %s@%d:Low Power Scan Core based feature disable boot-arg=%d and disableProfileActive=%d \n", "setupFirmware", 8852, LODWORD(this[1].OSObject::OSObjectInterface::__vftable[1146].init), BYTE4(this[1].OSObject::OSObjectInterface::__vftable[1146].init));
                  }
                }
              }
              if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 67))
              {
                IsBitSet  = AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 67);
                OSObjectInterface_vtbl v56 = this[1].OSObject::OSObjectInterface::__vftable;
                if (!IsBitSet || (BYTE4(v56[1102].init) & 1) != 0)
                {
                  ListenInterval  = 0;
                  OSObjectInterface_vtbl v57 = (AppleBCMWLANCommander *)v56[338].free;
                  p_ListenInterval  = &ListenInterval;
                  v186  = 4;
                  uint64_t v58 = AppleBCMWLANCommander::runIOVarSet(v57, (uint64_t)"he", (uint64_t)&p_ListenInterval, 0, 0);
                  if (v58)
                  {
                    uint64_t v59 = v58;
                    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                    {
                      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                      if (CCLogStream::shouldLog())
                      {
                        unsigned __int8 v129 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                        uint64_t v130 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v59);
                        CCLogStream::logAlert(v129, "[dk] %s@%d: Error: cannot disable feature support : ret %x: %s\n", "setupFirmware", 8863, v59, v130);
                      }
                    }
                  }
                }
              }
              if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 101))
              {
                BYTE4(this[1].OSObject::OSObjectInterface::__vftable[1939].free)  = 2;
                AppleBCMWLANCore::enableObssMitigation((AppleBCMWLANCore *)this, BYTE4(this[1].OSObject::OSObjectInterface::__vftable[1939].free));
              }
              if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 105)
                && AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 106))
              {
                if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                {
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  if (CCLogStream::shouldLog())
                  {
                    v128  = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    CCLogStream::logInfo(v128, "[dk] %s@%d: Configuring Beacon protection params 0 to FW Active\n", "setupFirmware", 8877);
                  }
                }
                LOWORD(p_ListenInterval)  = 0;
                LOWORD(ListenInterval)  = 0;
                if ((*(unsigned int (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[337].free + 368))(this[1].OSObject::OSObjectInterface::__vftable[337].free) >= 0x112F)
                {
                  LOWORD(p_ListenInterval)  = 1;
                  LOWORD(ListenInterval)  = ListenInterval | 2;
                }
                uint64_t v60 = AppleBCMWLANJoinAdapter::setBeaconProtectionParams((AppleBCMWLANJoinAdapter *)this[1].OSObject::OSObjectInterface::__vftable[339].init, "WL_BCN_PROT_CMD_ENABLE", 1, &p_ListenInterval, 2u, 1);
                if (v60)
                {
                  uint64_t v61 = v60;
                  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                  {
                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    if (CCLogStream::shouldLog())
                    {
                      v131  = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                      long long v132 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v61);
                      CCLogStream::logAlert(v131, "[dk] %s@%d:Enabling Bcn Protection failed: %s\n", "setupFirmware", 8890, v132);
                    }
                  }
                }
                uint64_t v62 = AppleBCMWLANJoinAdapter::setBeaconProtectionParams((AppleBCMWLANJoinAdapter *)this[1].OSObject::OSObjectInterface::__vftable[339].init, "WL_BCN_PROT_CMD_CONFIG", 4, &ListenInterval, 2u, 1);
                if (v62)
                {
                  uint64_t v63 = v62;
                  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                  {
                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    if (CCLogStream::shouldLog())
                    {
                      long long v133 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                      v134  = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v63);
                      CCLogStream::logAlert(v133, "[dk] %s@%d:Bcn Protection config failed: %s\n", "setupFirmware", 8896, v134);
                    }
                  }
                }
              }
              if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
              {
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v71 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  CCLogStream::logAlert(v71, "[dk] %s@%d: Bringup firmware bringupBCM, calling ...\n", "setupFirmware", 8900);
                }
              }
              uint64_t v64 = AppleBCMWLANCore::bringupBCM((AppleBCMWLANCore *)this);
              if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)
                && (((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this),
                    CCLogStream::shouldLog()))
              {
                uint64_t v72 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                uint64_t v73 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v64);
                BCMInterfaceState  = AppleBCMWLANCore::getBCMInterfaceState((AppleBCMWLANCore *)this);
                CCLogStream::logAlert(v72, "[dk] %s@%d: Bringup firmware bringupBCM, called ..., rv[0x%08x]/'%s', bcmInterfaceState[%u]\n", "setupFirmware", 8902, v64, v73, BCMInterfaceState);
                if (v64) {
                  return v64;
                }
              }
              else if (v64)
              {
                return v64;
              }
              ListenInterval  = 1;
              uint64_t v75 = (AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free;
              p_ListenInterval  = &ListenInterval;
              v186  = 4;
              uint64_t v76 = AppleBCMWLANCommander::runIOVarSet(v75, (uint64_t)"bus:h2dindx_w_d2hdma", (uint64_t)&p_ListenInterval, 0, 0);
              if (v76 != -469794537)
              {
                uint64_t v77 = v76;
                if (v76)
                {
                  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                  {
                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    if (CCLogStream::shouldLog())
                    {
                      long long v135 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                      long long v136 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v77);
                      CCLogStream::logInfoIf(v135, 0x80uLL, "[dk] %s@%d:Failed to set FW dma mode: %s\n", "setupFirmware", 8914, v136);
                    }
                  }
                }
              }
              ListenInterval  = 1;
              unsigned int v78 = (AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free;
              p_ListenInterval  = &ListenInterval;
              v186  = 4;
              uint64_t v79 = AppleBCMWLANCommander::runIOVarSet(v78, (uint64_t)"bus:fl_prio_map", (uint64_t)&p_ListenInterval, 0, 0);
              uint64_t v80 = v79;
              if (v79 != -469794537
                && v79
                && (MaxSupportedEventLogSets  = v79,
                    ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                && (((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this),
                    MaxSupportedEventLogSets  = v80,
                    CCLogStream::shouldLog()))
              {
                v137  = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                long long v138 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v80);
                CCLogStream::logAlert(v137, "[dk] %s@%d:ERROR: Failed to set flow rings to TID mode: %s\n", "setupFirmware", 8923, v138);
                MaxSupportedEventLogSets  = v80;
                if (!v80) {
                  goto LABEL_180;
                }
              }
              else if (!v80)
              {
                goto LABEL_180;
              }
              uint64_t v64 = MaxSupportedEventLogSets;
              if (v80 != -469794537) {
                return v64;
              }
LABEL_180:
              (*(void (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[337].free
                                                                                    + 536))(this[1].OSObject::OSObjectInterface::__vftable[337].free);
              uint64_t v64 = AppleBCMWLANCore::configureDefaultEvents((AppleBCMWLANCore *)this);
              if (v64) {
                return v64;
              }
              AppleBCMWLANCore::configureScans((AppleBCMWLANCore *)this);
              AppleBCMWLANCore::configureLinkLoss((AppleBCMWLANCore *)this);
              uint64_t v81 = this[1].OSObject::OSObjectInterface::__vftable;
              if (!HIBYTE(v81[68].free))
              {
                uint64_t v82 = (AppleBCMWLANLQM *)v81[350].free;
                StatsTimerIntervalMS  = AppleBCMWLANLQM::getStatsTimerIntervalMS(v82);
                AppleBCMWLANLQM::setStatsTimerIntervalMS(v82, StatsTimerIntervalMS);
                uint64_t v81 = this[1].OSObject::OSObjectInterface::__vftable;
              }
              AppleBCMWLANBGScanAdapter::enablePrivateMACForScans((AppleBCMWLANBGScanAdapter *)v81[344].init);
              AppleBCMWLANBGScanAdapter::generateAndApplyNewPrivateMACForScans((AppleBCMWLANCore ***)this[1].OSObject::OSObjectInterface::__vftable[344].init);
              if (HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[48].free) <= 0x10)
              {
                if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 48))
                {
                  uint64_t v84 = this[1].OSObject::OSObjectInterface::__vftable;
                  if ((BYTE4(v84[1102].init) & 2) == 0) {
                    AppleBCMWLANConfigManager::configureRangingParams((AppleBCMWLANConfigManager *)v84[342].init);
                  }
                }
              }
              uint64_t v64 = AppleBCMWLANCore::configurePowerSave((AppleBCMWLANCore *)this);
              if (v64) {
                return v64;
              }
              AppleBCMWLANCore::configureRoam((AppleBCMWLANCore *)this);
              uint64_t v64 = AppleBCMWLANCore::configureSecurityParams((AppleBCMWLANCore *)this);
              if (v64) {
                return v64;
              }
              if ((AppleBCMWLANConfigManager::wompEnabled((AppleBCMWLANConfigManager *)this[1].OSObject::OSObjectInterface::__vftable[342].init) & 1) == 0)
              {
                ListenInterval  = 1;
                uint64_t v85 = (AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free;
                p_ListenInterval  = &ListenInterval;
                v186  = 4;
                uint64_t v86 = AppleBCMWLANCommander::runIOVarSet(v85, (uint64_t)"pkt_filter_mode", (uint64_t)&p_ListenInterval, 0, 0);
                if (v86)
                {
                  uint64_t v87 = v86;
                  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                  {
                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    if (CCLogStream::shouldLog())
                    {
                      v155  = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                      v156  = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v87);
                      CCLogStream::logAlert(v155, "[dk] %s@%d: Unable to set the packet filter mode: %s\n", "setupFirmware", 8987, v156);
                    }
                  }
                }
              }
              uint64_t v88 = AppleBCMWLANConfigManager::setupBeaconOffload((AppleBCMWLANCore ***)this[1].OSObject::OSObjectInterface::__vftable[342].init, 0, 0, LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[13].init), 1);
              if (v88 != -469794537)
              {
                uint64_t v89 = v88;
                if (v88)
                {
                  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                  {
                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    if (CCLogStream::shouldLog())
                    {
                      v150  = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                      int v151 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v89);
                      CCLogStream::logAlert(v150, "[dk] %s@%d: Error: cannot set offload with error : %s\n", "setupFirmware", 8995, v151);
                    }
                  }
                }
              }
              ListenInterval  = -1431655766;
              ListenInterval  = AppleBCMWLANConfigManager::getListenInterval((AppleBCMWLANConfigManager *)this[1].OSObject::OSObjectInterface::__vftable[342].init);
              OSObjectInterface_vtbl v90 = (AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free;
              p_ListenInterval  = &ListenInterval;
              v186  = 4;
              uint64_t v91 = AppleBCMWLANCommander::runIOVarSet(v90, (uint64_t)"assoc_listen", (uint64_t)&p_ListenInterval, 0, 0);
              if (v91 != -469794537)
              {
                uint64_t v92 = v91;
                if (v91)
                {
                  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                  {
                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    if (CCLogStream::shouldLog())
                    {
                      int v152 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                      v153  = ListenInterval;
                      v154  = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v92);
                      CCLogStream::logAlert(v152, "[dk] %s@%d: Error: cannot set assoc_listen to %d : ret %x: %s\n", "setupFirmware", 9006, v153, v92, v154);
                    }
                  }
                }
              }
              ListenInterval  = 5;
              unint64_t v93 = (AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free;
              p_ListenInterval  = &ListenInterval;
              v186  = 4;
              uint64_t v94 = AppleBCMWLANCommander::runIOVarSet(v93, (uint64_t)"assoc_retry_max", (uint64_t)&p_ListenInterval, 0, 0);
              if (v94)
              {
                uint64_t v95 = v94;
                if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                {
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  if (CCLogStream::shouldLog())
                  {
                    v146  = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    v147  = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v95);
                    CCLogStream::logAlert(v146, "[dk] %s@%d: Error: cannot set assoc_retry_max to %d : ret %x: %s\n", "setupFirmware", 9016, 5, v95, v147);
                  }
                }
              }
              ListenInterval  = 1;
              char v96 = (AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free;
              p_ListenInterval  = &ListenInterval;
              v186  = 4;
              uint64_t v97 = AppleBCMWLANCommander::runIOVarSet(v96, (uint64_t)"intol40", (uint64_t)&p_ListenInterval, 0, 0);
              if (v97)
              {
                uint64_t v98 = v97;
                if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                {
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  if (CCLogStream::shouldLog())
                  {
                    v148  = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    v149  = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v98);
                    CCLogStream::logAlert(v148, "[dk] %s@%d: Error: cannot set 40MHz Intolerant bit : ret %x: %s\n", "setupFirmware", 9027, v98, v149);
                  }
                }
              }
              AppleBCMWLANCore::configureDefaultAvgRssiParameters((AppleBCMWLANCore *)this);
              AppleBCMWLANCore::configureHS20IE((AppleBCMWLANCore *)this);
              uint64_t v64 = AppleBCMWLANConfigManager::setupFirmwareWithDTDefaults((AppleBCMWLANConfigManager *)this[1].OSObject::OSObjectInterface::__vftable[342].init);
              if (v64) {
                return v64;
              }
              uint64_t v64 = AppleBCMWLANCore::configureEarlyBeaconDetect((AppleBCMWLANCore *)this);
              if (v64) {
                return v64;
              }
              if (AppleBCMWLANPowerManager::configureTVPM((AppleBCMWLANPowerManager *)this[1].OSObject::OSObjectInterface::__vftable[345].free))
              {
                if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                {
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  if (CCLogStream::shouldLog())
                  {
                    v160  = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    CCLogStream::logAlert(v160, "[dk] %s@%d:Failed to Configure TVPM\n", "setupFirmware", 9089);
                  }
                }
              }
              if (AppleBCMWLANTxPowerManager::configureDynSAR((AppleBCMWLANTxPowerManager *)this[1].OSObject::OSObjectInterface::__vftable[346].init))
              {
                if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                {
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  if (CCLogStream::shouldLog())
                  {
                    v161  = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    CCLogStream::logAlert(v161, "[dk] %s@%d:Failed to Configure DynSAR\n", "setupFirmware", 9098);
                  }
                }
              }
              if (AppleBCMWLANConfigManager::isStaticTxSDBEnabled((AppleBCMWLANConfigManager *)this[1].OSObject::OSObjectInterface::__vftable[342].init))
              {
                if (AppleBCMWLANTxPowerManager::txSDBEnable((AppleBCMWLANTxPowerManager *)this[1].OSObject::OSObjectInterface::__vftable[346].init, 1))
                {
                  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                  {
                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    if (CCLogStream::shouldLog())
                    {
                      uint64_t v167 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                      CCLogStream::logAlert(v167, "[dk] %s@%d:Failed to Enable static tx sdb\n", "setupFirmware", 9104);
                    }
                  }
                }
              }
              HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[880].free)  = 0;
              LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[48].free)  = 0;
              BYTE1(this[1].OSObject::OSObjectInterface::__vftable[48].free)  = 0;
              HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[594].free)  = 1;
              LODWORD(this[1].OSObject::OSObjectInterface::__vftable[882].init)  = 0;
              LODWORD(this[1].OSObject::OSObjectInterface::__vftable[419].free)  = 0;
              HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[419].free)  = 0;
              AppleBCMWLANCore::configureTrgDisc((AppleBCMWLANCore *)this);
              AppleBCMWLANPowerManager::configureMIMOPowerSaveConfiguration((AppleBCMWLANPowerManager *)this[1].OSObject::OSObjectInterface::__vftable[345].free);
              if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
              {
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if (CCLogStream::shouldLog())
                {
                  unsigned __int8 v157 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  CCLogStream::logNotice(v157, "[dk] %s@%d:Calling configureOCLParams \n", "setupFirmware", 9125);
                }
              }
              AppleBCMWLANPowerManager::configureOCLParams((AppleBCMWLANPowerManager *)this[1].OSObject::OSObjectInterface::__vftable[345].free);
              OSObjectInterface_vtbl v99 = this[1].OSObject::OSObjectInterface::__vftable;
              if (LOBYTE(v99[553].init))
              {
                AppleBCMWLANCore::setMWSCoexIoVarsAsync_mws_coex_bitmap(this, 0, 1);
                OSObjectInterface_vtbl v99 = this[1].OSObject::OSObjectInterface::__vftable;
              }
              if (BYTE4(v99[553].free))
              {
                AppleBCMWLANCore::setMWSCoexIoVarsAsync_mws_aggCh_params(this, 0, 1);
                OSObjectInterface_vtbl v99 = this[1].OSObject::OSObjectInterface::__vftable;
              }
              if (BYTE4(v99[555].free))
              {
                AppleBCMWLANCore::setMWSCoexIoVarsAsync_mws_wciSig_config(this, 0, 1);
                OSObjectInterface_vtbl v99 = this[1].OSObject::OSObjectInterface::__vftable;
              }
              if (BYTE4(v99[556].init))
              {
                AppleBCMWLANCore::setMWSCoexIoVarsAsync_mws_wlanrxpri_threshold(this, 0, 1);
                OSObjectInterface_vtbl v99 = this[1].OSObject::OSObjectInterface::__vftable;
              }
              if (BYTE6(v99[556].free))
              {
                AppleBCMWLANCore::setMWSCoexIoVarsAsync_mws_coex_bitmap_V2(this, 0, 1);
                OSObjectInterface_vtbl v99 = this[1].OSObject::OSObjectInterface::__vftable;
              }
              if (BYTE4(v99[557].init))
              {
                AppleBCMWLANCore::setMWSCoexIoVarsRxPrioTimer(this, 0, 1);
                OSObjectInterface_vtbl v99 = this[1].OSObject::OSObjectInterface::__vftable;
              }
              if (BYTE4(v99[557].free)) {
                AppleBCMWLANCore::setMWSCoexIoVarsPwrLimitTimer(this, 0, 1);
              }
              for (uint64_t i = 0; i != 560; i += 56)
              {
                if (*(_WORD *)((char *)&this[1].OSObject::OSObjectInterface::__vftable[557].free + i + 6)) {
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[27].Dispatch)(this);
                }
              }
              if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 43))
              {
                if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                {
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  if (CCLogStream::shouldLog())
                  {
                    v162  = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    CCLogStream::logNotice(v162, "[dk] %s@%d:Ignoring mcast/bcast after %d ms\n", "setupFirmware", 9157, 50);
                  }
                }
                OSObjectInterface_vtbl v101 = (AppleBCMWLANPowerStateAdapter *)this[1].OSObject::OSObjectInterface::__vftable[2240].free;
                v102  = 50000;
                int v103 = 15000;
              }
              else
              {
                OSObjectInterface_vtbl v101 = (AppleBCMWLANPowerStateAdapter *)this[1].OSObject::OSObjectInterface::__vftable[2240].free;
                v102  = 0xFFFF;
                int v103 = 30000;
              }
              AppleBCMWLANPowerStateAdapter::configureMulticastBroadcastWaitPeriod(v101, v102, v103);
              AppleBCMWLANConfigManager::querySDBPolicies((AppleBCMWLANCore ***)this[1].OSObject::OSObjectInterface::__vftable[342].init);
              v104  = (AppleBCMWLANPowerManager *)this[1].OSObject::OSObjectInterface::__vftable[345].free;
              if (v104) {
                AppleBCMWLANPowerManager::setMWSCoexIoVarsAsync_mws_ocl_coex_bitmap(v104, 0, 1);
              }
              if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
              {
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v158 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  isTxFailEventSupported  = AppleBCMWLANConfigManager::isTxFailEventSupported((AppleBCMWLANConfigManager *)this[1].OSObject::OSObjectInterface::__vftable[342].init);
                  CCLogStream::logNotice(v158, "[dk] %s@%d:ivars->fConfigManager->isTxFailEventSupported() %d\n", "setupFirmware", 9175, isTxFailEventSupported);
                }
              }
              if (AppleBCMWLANConfigManager::isTxFailEventSupported((AppleBCMWLANConfigManager *)this[1].OSObject::OSObjectInterface::__vftable[342].init)) {
                AppleBCMWLANCore::configureTxFailEventThreshold((AppleBCMWLANCore *)this, 1);
              }
              if (AppleBCMWLANConfigManager::isVOBlockAck((AppleBCMWLANConfigManager *)this[1].OSObject::OSObjectInterface::__vftable[342].init))
              {
                LOWORD(ListenInterval)  = 262;
                OSObjectInterface_vtbl v105 = (AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free;
                p_ListenInterval  = &ListenInterval;
                v186  = 2;
                if (AppleBCMWLANCommander::runIOVarSet(v105, (uint64_t)"ampdu_tid", (uint64_t)&p_ListenInterval, 0, 0))
                {
                  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                  {
                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    if (CCLogStream::shouldLog())
                    {
                      v168  = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                      CCLogStream::logAlert(v168, "[dk] %s@%d: Error: cannot set Block Ack Policy on TID %d", "setupFirmware", 9188, ListenInterval);
                    }
                  }
                }
                LOWORD(ListenInterval)  = 263;
                long long v106 = (AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free;
                p_ListenInterval  = &ListenInterval;
                v186  = 2;
                if (AppleBCMWLANCommander::runIOVarSet(v106, (uint64_t)"ampdu_tid", (uint64_t)&p_ListenInterval, 0, 0))
                {
                  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                  {
                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    if (CCLogStream::shouldLog())
                    {
                      v169  = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                      CCLogStream::logAlert(v169, "[dk] %s@%d: Error: cannot set Block Ack Policy on TID %d", "setupFirmware", 9195, ListenInterval);
                    }
                  }
                }
              }
              if ((AppleBCMWLANConfigManager::isEBTSupportedInDriver((AppleBCMWLANConfigManager *)this[1].OSObject::OSObjectInterface::__vftable[342].init) & 1) == 0
                && AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 57))
              {
                if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                {
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  if (CCLogStream::shouldLog())
                  {
                    v173  = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    CCLogStream::logAlert(v173, "[dk] %s@%d:Disabling Early Beacon Termination in non-phone platform\n", "setupFirmware", 9202);
                  }
                }
                AppleBCMWLANPowerManager::configureEarlyBeaconTermination((AppleBCMWLANPowerManager *)this[1].OSObject::OSObjectInterface::__vftable[345].free, 0);
              }
              isDigitalNapSupportedInDriver  = AppleBCMWLANConfigManager::isDigitalNapSupportedInDriver((AppleBCMWLANConfigManager *)this[1].OSObject::OSObjectInterface::__vftable[342].init);
              OSObjectInterface_vtbl v108 = this[1].OSObject::OSObjectInterface::__vftable;
              if ((isDigitalNapSupportedInDriver & 1) == 0 && BYTE5(v108[648].free))
              {
                if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                {
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  if (CCLogStream::shouldLog())
                  {
                    v170  = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    CCLogStream::logAlert(v170, "[dk] %s@%d:Disabling Digital Nap feature in non-phone platform\n", "setupFirmware", 9207);
                  }
                }
                AppleBCMWLANPowerManager::configureDigitalNapPowerSave((AppleBCMWLANPowerManager *)this[1].OSObject::OSObjectInterface::__vftable[345].free, 0);
                OSObjectInterface_vtbl v108 = this[1].OSObject::OSObjectInterface::__vftable;
              }
              if ((AppleBCMWLANConfigManager::isOPSSupportedInDriver((AppleBCMWLANConfigManager *)v108[342].init) & 1) == 0
                && AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 56))
              {
                if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                {
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  if (CCLogStream::shouldLog())
                  {
                    uint64_t v174 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    CCLogStream::logAlert(v174, "[dk] %s@%d:Disabling Opportunistic PwrSave in non-phone platform\n", "setupFirmware", 9213);
                  }
                }
                AppleBCMWLANPowerManager::configureOpportunisticPowerSave((AppleBCMWLANPowerManager *)this[1].OSObject::OSObjectInterface::__vftable[345].free, 0);
              }
              if (AppleBCMWLANConfigManager::isGPIOTxEnvelopeIndEnabled((AppleBCMWLANConfigManager *)this[1].OSObject::OSObjectInterface::__vftable[342].init))
              {
                LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[658].free)  = 3;
                ((void (*)(IOService *, void))this->OSObject::OSMetaClassBase::__vftable[25].retain)(this, 0);
                if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                {
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  if (CCLogStream::shouldLog())
                  {
                    v163  = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    CCLogStream::logAlert(v163, "[dk] %s@%d:Setting GPIO Tx Envelope Ind to %d\n", "setupFirmware", 9220, LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[658].free));
                  }
                }
              }
              if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 82)) {
                AppleBCMWLANNetAdapter::setBeaconMuteMitigationVersion((AppleBCMWLANNetAdapter *)this[1].OSObject::OSObjectInterface::__vftable[350].init);
              }
              if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 87))
              {
                if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                {
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  if (CCLogStream::shouldLog())
                  {
                    v164  = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    CCLogStream::logInfo(v164, "[dk] %s@%d: Configuring Beacon drift mitigation params to FW Active\n", "setupFirmware", 9233);
                  }
                }
                uint64_t v109 = AppleBCMWLANConfigManager::configureBeaconDriftOffsetConfig((AppleBCMWLANConfigManager *)this[1].OSObject::OSObjectInterface::__vftable[342].init, 0);
                if (v109)
                {
                  uint64_t v110 = v109;
                  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                  {
                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    if (CCLogStream::shouldLog())
                    {
                      v171  = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                      uint64_t v172 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v110);
                      CCLogStream::logAlert(v171, "[dk] %s@%d: Configuring Beacon drift mitigation params failed: %s\n", "setupFirmware", 9237, v172);
                    }
                  }
                }
              }
              AppleBCMWLANJoinAdapter::configureDefaultUnAssocDwell((AppleBCMWLANJoinAdapter *)this[1].OSObject::OSObjectInterface::__vftable[339].init);
              AppleBCMWLANCore::configureECounters((OSDictionary *)this);
              if (BYTE4(this[1].OSObject::OSObjectInterface::__vftable[60].free)) {
                AppleBCMWLANCore::configureEventLogOneReportedStats((AppleBCMWLANCore *)this);
              }
              AppleBCMWLANCore::configureEventLogSixReportedStats((AppleBCMWLANCore *)this);
              AppleBCMWLANCore::configureEventLogSevenReportedStats((AppleBCMWLANCore *)this);
              if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 80)
                && LODWORD(this[1].OSObject::OSObjectInterface::__vftable[69].init))
              {
                uint64_t v111 = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[1].free)(this);
                (*(void (**)(uint64_t, uint64_t (*)(AppleBCMWLANCore *), void, void, void, void))(*(void *)v111 + 56))(v111, AppleBCMWLANCore::setLteCoexLBTMode, 0, 0, 0, 0);
              }
              OSObjectInterface_vtbl v112 = (int **)IOMallocZeroData();
              uint64_t v64 = 3758097085;
              if (!v112) {
                return v64;
              }
              *(unsigned char *)OSObjectInterface_vtbl v112 = 0;
              uint64_t v190 = v112;
              v191  = 0x10000000101;
              uint64_t v113 = AppleBCMWLANCommander::runIOVarGet((AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free, (uint64_t)"ver", (uint64_t)&kNoTxPayload, (uint64_t)&v190, 0);
              if (v113)
              {
                uint64_t v64 = v113;
                if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                {
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  if (CCLogStream::shouldLog())
                  {
                    v165  = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    unsigned __int8 v166 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v64);
                    CCLogStream::logAlert(v165, "[dk] %s@%d: iovar get version command failed: %s\n", "setupFirmware", 9281, v166);
                  }
                }
                IOFreeData();
                return v64;
              }
              IOFreeData();
              LODWORD(p_ListenInterval)  = 0;
              if (IOParseBootArgNumber("wlan.forced.ts", &p_ListenInterval, 4))
              {
                if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                {
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  if (CCLogStream::shouldLog())
                  {
                    v175  = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    CCLogStream::logAlert(v175, "[dk] %s@%d:[WiFiTimeSync] Override 'wlan.forced.ts' found : [%u]\n", "setupFirmware", 9289, p_ListenInterval);
                  }
                }
                if (p_ListenInterval >= 3)
                {
                  LODWORD(p_ListenInterval)  = 0;
                  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                  {
                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    if (CCLogStream::shouldLog())
                    {
                      uint64_t v177 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                      CCLogStream::logAlert(v177, "[dk] %s@%d:[WiFiTimeSync] Invalid forcedTimestmping value. Force it to %d\n", "setupFirmware", 9292, p_ListenInterval);
                    }
                  }
                }
              }
              LODWORD(this[1].OSObject::OSObjectInterface::__vftable[2235].free)  = p_ListenInterval;
              AppleBCMWLANCore::setPTMMode(this);
              (*(void (**)(void))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[337].free + 528))();
              v114  = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[6].free)(this);
              setPropertyHelper(this, "IOFeatures", v114, 0x20u);
              BYTE4(this[1].OSObject::OSObjectInterface::__vftable[1084].init)  = 0;
              BYTE5(this[1].OSObject::OSObjectInterface::__vftable[1084].init)  = 0;
              LODWORD(this[1].OSObject::OSObjectInterface::__vftable[648].free)  = 1;
              AppleBCMWLANCore::updateCurrentFWCountryCode((AppleBCMWLANCore *)this);
              HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[2234].free)  = 3;
              HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[2234].free)  = 7;
              if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 93))
              {
                v115  = IOParseBootArgNumber("wlan.channelFilter", (char *)&this[1].OSObject::OSObjectInterface::__vftable[2234].free + 4, 4);
                int v116 = this[1].OSObject::OSObjectInterface::__vftable;
                if (v115 && !HIDWORD(v116[2234].free))
                {
                  IOLog(" WiFiCC : Allowing all bands and no channel filter used. [%d]\n", 0);
                  int v116 = this[1].OSObject::OSObjectInterface::__vftable;
                }
                HIDWORD(v116[1870].free)  = -80;
                if (IOParseBootArgNumber("wlan.rssicomp.value", (char *)&this[1].OSObject::OSObjectInterface::__vftable[1870].free + 4, 4))
                {
                  free_high  = HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[1870].free);
                  if (free_high)
                  {
                    if ((free_high + 90) >= 0x33)
                    {
                      IOLog(" WiFiRoam : RSSI compensation out of range. Value : [%d] Resorting to default value : [%d]\n", HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[1870].free), -80);
                      HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[1870].free)  = -80;
                    }
                    else
                    {
                      IOLog(" WiFiRoam : Using RSSI compensation Value : [%d] \n", HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[1870].free));
                    }
                  }
                  else
                  {
                    IOLog(" WiFiRoam : RSSI compensation not allowed. [%d]\n", 0);
                    HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[1870].free)  = 0;
                  }
                }
              }
              if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 77))
              {
                if (!BYTE1(this[1].OSObject::OSObjectInterface::__vftable[1105].free))
                {
                  int v143 = AppleBCMWLANCore::configureIeFiltering((AppleBCMWLANCore *)this);
                  if (v143)
                  {
                    v144  = v143;
                    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                    {
                      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                      if (CCLogStream::shouldLog())
                      {
                        v145  = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                        CCLogStream::logWarn(v145, "[dk] %s@%d:Failied configure IE filtering %u\n", "setupFirmware", 9348, v144);
                      }
                    }
                  }
                }
              }
              AppleBCMWLANJoinAdapter::configure6GDefaultUnAssocDwell((AppleBCMWLANJoinAdapter *)this[1].OSObject::OSObjectInterface::__vftable[339].init);
              if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 89)) {
                AppleBCMWLANCore::cfgRoamPruneRssiThreshold((AppleBCMWLANCore *)this, -80);
              }
              AppleBCMWLANCore::initTrafficEngineering((AppleBCMWLANCore *)this);
              uint64_t v64 = AppleBCMWLANCore::restore_mpc_state((AppleBCMWLANCore *)this, v187);
              if (v64) {
                return v64;
              }
              BYTE6(this[1].OSObject::OSObjectInterface::__vftable[13].free)  = 0;
              AppleBCMWLANCore::setSPMICommonConfig((AppleBCMWLANCore *)this, 1);
              AppleBCMWLANCore::init6ESSIDTransition((AppleBCMWLANCore *)this);
              v139  = 4;
              v140  = 30843;
              do
              {
                *((unsigned char *)this[1].OSObject::OSObjectInterface::__vftable + v140 - 1)  = 0;
                *((unsigned char *)&this[1].init + v140)  = 0;
                v140 += 16;
                --v139;
              }
              while (v139);
              LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[1927].init)  = 0;
              AppleBCMWLANCore::disableC2C(this);
              AppleBCMWLANCore::setEcountersEnableStateSync((AppleBCMWLANCore *)this, (uint64_t)&__block_literal_global, 1);
              if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 115))
              {
                v141  = (AppleBCMWLAN11beAdapter *)this[1].OSObject::OSObjectInterface::__vftable[349].free;
                if (v141) {
                  AppleBCMWLAN11beAdapter::setupInitConfig(v141);
                }
              }
              if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 117)
                && (BYTE3(this[1].OSObject::OSObjectInterface::__vftable[1084].free) & 2) != 0)
              {
                AppleBCMWLANCore::configureScanForwardToAOP((AppleBCMWLANCore *)this, 1);
              }
              if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 120)
                && (BYTE3(this[1].OSObject::OSObjectInterface::__vftable[1084].free) & 4) != 0)
              {
                int v142 = 1;
              }
              else
              {
                if (!AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 120)) {
                  goto LABEL_362;
                }
                int v142 = 0;
              }
              AppleBCMWLANCore::configureFigaro5GTDDSupport((AppleBCMWLANCore *)this, v142);
              AppleBCMWLANCore::configureScanParamMods((AppleBCMWLANCore *)this);
LABEL_362:
              LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[552].free)  = 0;
              if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
              {
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if (CCLogStream::shouldLog())
                {
                  unsigned __int8 v176 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  CCLogStream::logNoticeIf(v176, 0x80uLL, "[dk] %s@%d: Succeeded\n", "setupFirmware", 9422);
                }
              }
              return 0;
            }
          }
        }
      }
    }
  }
  return MaxSupportedEventLogSets;
}

uint64_t AppleBCMWLANCore::setupDriver(IOService *this)
{
  unint64_t v43 = 0;
  int v42 = 0;
  uint64_t v2 = (*(uint64_t (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[706].free
                                                                                + 1008))(this[1].OSObject::OSObjectInterface::__vftable[706].free);
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      long long v26 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logAlert(v26, "[dk] %s@%d:WiFi MAC Address: %02x:%02x:%02x:%02x:%02x:%02x, HW[ %02x:%02x:%02x:%02x:%02x:%02x ]\n", "setupDriver", 6169, v2, BYTE1(v2), BYTE2(v2), BYTE3(v2), BYTE4(v2), BYTE5(v2), BYTE4(this[1].OSObject::OSObjectInterface::__vftable[353].init), BYTE5(this[1].OSObject::OSObjectInterface::__vftable[353].init), BYTE6(this[1].OSObject::OSObjectInterface::__vftable[353].init), HIBYTE(this[1].OSObject::OSObjectInterface::__vftable[353].init), LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[353].free), BYTE1(this[1].OSObject::OSObjectInterface::__vftable[353].free));
    }
  }
  int init_high = HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[649].init);
  uint64_t v4 = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
  if ((init_high & 0x20) == 0)
  {
    if (v4)
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        long long v27 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logNotice(v27, "[dk] %s@%d: driver initialized 0x%lX\n", "setupDriver", 6172, HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[649].init));
      }
    }
    if ((BYTE5(this[1].OSObject::OSObjectInterface::__vftable[649].init) & 0x10) == 0) {
      return 0;
    }
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v30 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logNotice(v30, "[dk] %s@%d: Setting power state to %lu\n", "setupDriver", 6180, LODWORD(this[1].OSObject::OSObjectInterface::__vftable[650].init));
      }
    }
    AppleBCMWLANCore::handlePowerStateChange(this, this[1].OSObject::OSObjectInterface::__vftable[650].init);
    free  = (IO80211SkywalkInterface *)this[1].OSObject::OSObjectInterface::__vftable[706].free;
    if (!free) {
      return 0;
    }
    IO80211Controller::postMessage((IO80211Controller *)this, free, 1u, 0, 0, 1);
    uint64_t v6 = 0;
    atomic_fetch_and((atomic_uint *volatile)((char *)&this[1].OSObject::OSObjectInterface::__vftable[649].init + 4), 0xFFFFEFFF);
    return v6;
  }
  if (v4)
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v28 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logNotice(v28, "[dk] %s@%d: State 0x%lX\n", "setupDriver", 6192, HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[649].init));
    }
  }
  atomic_fetch_or((atomic_uint *volatile)((char *)&this[1].OSObject::OSObjectInterface::__vftable[649].init + 4), 1u);
  AppleBCMWLANConfigManager::getDTIMParameters((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[342].init, (void (__cdecl **)(OSObjectInterface *__hidden))((char *)&this[1].OSObject::OSObjectInterface::__vftable[418].free+ 4));
  HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[1231].init)  = this[1].OSObject::OSObjectInterface::__vftable[419].init;
  HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[1230].free)  = HIWORD(this[1].OSObject::OSObjectInterface::__vftable[418].free);
  OSDictionaryPtr v7 = OSDictionary::withCapacity(6u);
  *(void *)&v44[0]  = 0;
  if (!v7
    || (*(unsigned int (**)(void))(*((void *)this[1].OSObject::OSObjectInterface::__vftable[337].free + 6) + 408))())
  {
    goto LABEL_19;
  }
  if ((setPropertyHelper(this, "ModuleDictionary", v7) & 1) == 0)
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v37 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v37, "[dk] %s@%d: Failed to set ModuleDictionary", "setupDriver", 6212);
      }
    }
  }
  if (setPropertyHelper(this, "ModuleInfo", *(const OSObject **)&v44[0])
    && ((*(uint64_t (**)(void))(*((void *)this[1].OSObject::OSObjectInterface::__vftable[337].free + 6) + 416))() & 1) != 0)
  {
LABEL_19:
    unint64_t v41 = 0;
    if (acquireProperty<OSString>((IOService *)this[1].OSObject::OSObjectInterface::__vftable[337].free, "vendor-id", &v41, 0, "IOService"))
    {
      if (!setPropertyHelper(this, "vendor-id", v41)
        || ((*(uint64_t (**)(void))(*((void *)this[1].OSObject::OSObjectInterface::__vftable[337].free + 6) + 416))() & 1) == 0)
      {
        if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
        {
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (CCLogStream::shouldLog())
          {
            long long v32 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            CStringNoCopy  = OSString::getCStringNoCopy(v41);
            CCLogStream::logWarn(v32, "[dk] %s@%d: Failed to write property \"%s\"  = \"%s\" into registry\n", "setupDriver", 6226, "vendor-id", CStringNoCopy);
          }
        }
        if (v41)
        {
          ((void (*)(OSString *))v41->release)(v41);
          unint64_t v41 = 0;
        }
        if (v7) {
          ((void (*)(OSDictionaryPtr))v7->release)(v7);
        }
        return 3758097086;
      }
      if (v41)
      {
        ((void (*)(OSString *))v41->release)(v41);
        unint64_t v41 = 0;
      }
    }
    if (v7) {
      ((void (*)(OSDictionaryPtr))v7->release)(v7);
    }
    AppleBCMWLANLeakyApParser::addLeakyAPStatsClient((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[341].init, (uint64_t)this, (uint64_t)&IO80211Controller::setLeakyAPStats);
    shouldSupportTethering  = AppleBCMWLANCore::shouldSupportTethering((AppleBCMWLANCore *)this);
    init  = (int)this[1].OSObject::OSObjectInterface::__vftable[649].init;
    if ((shouldSupportTethering & 1) != 0 || (init & 0x200) != 0)
    {
      memset(v44, 0, sizeof(v44));
      WORD2(v44[0])  = v2;
      BYTE6(v44[0])  = BYTE2(v2);
      BYTE7(v44[0])  = BYTE3(v2);
      BYTE8(v44[0])  = BYTE4(v2);
      BYTE9(v44[0])  = BYTE5(v2);
      HIDWORD(v44[0])  = 7;
      if ((init & 0x200) != 0) {
        strcpy((char *)&v44[1], "aux");
      }
      else {
        strcpy((char *)&v44[1], "ap");
      }
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          long long v34 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlertIf(v34, 0x80uLL, "[dk] %s@%d: creating virtual interface with prefix  = %s\n", "setupDriver", 6266, (const char *)&v44[1]);
        }
      }
      uint64_t v10 = ((uint64_t (*)(IOService *, _OWORD *))this->OSObject::OSMetaClassBase::__vftable[30].isEqualTo)(this, v44);
    }
    else
    {
      uint64_t v10 = 0;
    }
    if ((AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 2) & 1) == 0)
    {
      OSStringPtr v11 = (AppleBCMWLANConfigManager *)this[1].OSObject::OSObjectInterface::__vftable[342].init;
      if (v11)
      {
        if (AppleBCMWLANConfigManager::isAWDLSupported(v11))
        {
          LODWORD(v41)  = 0;
          if (IOParseBootArgNumber("wlan.awdl.create_by_driver", &v41, 4))
          {
            if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog())
              {
                int v38 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                ClassNameHelper  = (const char *)getClassNameHelper(this);
                uint64_t v40 = "Attempting";
                if (!v41) {
                  uint64_t v40 = "Skipping";
                }
                CCLogStream::logAlert(v38, "[dk] %s@%d:%s::%s() boot-args wlan.awdl.create_by_driver=%d. %s to create AWDL virtual interface here.\n", "setupDriver", 6280, ClassNameHelper, "setupDriver", v41, v40);
              }
            }
          }
          if (v41)
          {
            *(void *)((char *)v44 + 12)  = 6;
            *(void *)((char *)v44 + 4)  = 0;
            HIDWORD(v44[1])  = 0;
            *(void *)((char *)&v44[1] + 4)  = 0;
            LODWORD(v44[0])  = 1;
            ((void (*)(IOService *, _OWORD *))this->OSObject::OSMetaClassBase::__vftable[30].isEqualTo)(this, v44);
          }
        }
      }
    }
    mach_continuous_time();
    absolutetime_to_nanoseconds();
    setPropertyHelper(this, "CoreDriverInitializationTime", v43, 0x40u);
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v29 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v29, "[dk] %s@%d: Core Driver Initialization Time %llu.%09llu\n", "setupDriver", 6296, v43 / 0x3B9ACA00, v43 % 0x3B9ACA00);
      }
    }
    BOOL v12 = this[1].OSObject::OSObjectInterface::__vftable;
    if ((BYTE5(v12[649].init) & 0x10) != 0)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          long long v35 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logNotice(v35, "[dk] %s@%d: Setting power state to %lu\n", "setupDriver", 6301, LODWORD(this[1].OSObject::OSObjectInterface::__vftable[650].init));
        }
      }
      uint64_t v10 = AppleBCMWLANCore::handlePowerStateChange(this, this[1].OSObject::OSObjectInterface::__vftable[650].init);
      BOOL v12 = this[1].OSObject::OSObjectInterface::__vftable;
      uint64_t v13 = (IO80211SkywalkInterface *)v12[706].free;
      if (v13)
      {
        IO80211Controller::postMessage((IO80211Controller *)this, v13, 1u, 0, 0, 1);
        atomic_fetch_and((atomic_uint *volatile)((char *)&this[1].OSObject::OSObjectInterface::__vftable[649].init + 4), 0xFFFFEFFF);
        BOOL v12 = this[1].OSObject::OSObjectInterface::__vftable;
      }
    }
    atomic_fetch_and((atomic_uint *volatile)((char *)&v12[649].init + 4), 0xFFFFFFDF);
    AppleBCMWLANCore::signalDriverEvent((uint64_t)this, 5);
    AppleBCMWLANCore::signalDriverReady((AppleBCMWLANCore *)this);
    uint64_t v14 = this[1].OSObject::OSObjectInterface::__vftable;
    uint64_t v15 = v14[706].free;
    if (v15)
    {
      (*(void (**)(void (__cdecl *)(OSObjectInterface *__hidden), void))(*(void *)v15 + 456))(v15, 0);
      uint64_t v14 = this[1].OSObject::OSObjectInterface::__vftable;
      uint64_t v16 = (AppleBCMWLANBusInterface *)v14[337].free;
      if (v16)
      {
        AppleBCMWLANBusInterface::sendBootCheckPointToCoreAnalytics(v16, 2u, 9u);
        uint64_t v14 = this[1].OSObject::OSObjectInterface::__vftable;
      }
    }
    AppleBCMWLANConfigManager::readPmThresholds((uint64_t)v14[342].init, 1, (uint64_t)&v14[413]);
    if (AppleBCMWLANCore::checkForTCPKAOffloadSupport((AppleBCMWLANCore *)this)) {
      AppleBCMWLANKeepAliveOffload::initializeKeepAliveCapabilities((AppleBCMWLANCommander ***)this[1].OSObject::OSObjectInterface::__vftable[347].init);
    }
    BYTE1(this[1].OSObject::OSObjectInterface::__vftable[421].init)  = 0;
    uint64_t v17 = this[1].OSObject::OSObjectInterface::__vftable;
    unsigned int v18 = HIDWORD(v17[649].init);
    int v42 = (v18 >> 29) & 1;
    if ((v18 & 0x20000000) != 0)
    {
      int v19 = (AppleBCMWLANCommander *)v17[338].free;
      *(void *)&v44[0]  = &v42;
      *((void *)&v44[0] + 1)  = 4;
      uint64_t v20 = AppleBCMWLANCommander::runIOCtlSet(v19, 116, (uint64_t)v44, 0, 0);
      if (v20)
      {
        uint64_t v6 = v20;
        if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
        {
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v21 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            int v22 = v42;
            int v23 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v6);
            CCLogStream::logAlert(v21, "[dk] %s@%d:Unable to set scansuppress %u: %s\n", "setupDriver", 6359, v22, v23);
          }
        }
        return v6;
      }
      uint64_t v17 = this[1].OSObject::OSObjectInterface::__vftable;
    }
    BYTE1(v17[1134].free)  = 0;
    LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[1085].init)  = 0;
    HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[1101].free)  = 0;
    BYTE1(this[1].OSObject::OSObjectInterface::__vftable[1870].free)  = 0;
    this[1].OSObject::OSObjectInterface::__vftable[1229].init  = 0;
    LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[1229].free)  = 0;
    LODWORD(this[1].OSObject::OSObjectInterface::__vftable[417].free)  = 0;
    BYTE6(this[1].OSObject::OSObjectInterface::__vftable[1141].free)  = 0;
    uint64_t v24 = (AppleBCMWLANSensingAdapter *)this[1].OSObject::OSObjectInterface::__vftable[2240].init;
    if (v24) {
      AppleBCMWLANSensingAdapter::updateSensingVersion(v24);
    }
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        long long v31 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logNoticeIf(v31, 0x80uLL, "[dk] %s@%d: Succeeded\n", "setupDriver", 6383);
      }
    }
    return v10;
  }
  else
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v36 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v36, "[dk] %s@%d: Failed to set Moduleinfo\n", "setupDriver", 6215);
      }
    }
    uint64_t v6 = 3758097086;
    ((void (*)(OSDictionaryPtr))v7->release)(v7);
  }
  return v6;
}

uint64_t AppleBCMWLANCore::setPTMMode(IOService *this)
{
  int v14 = 0;
  v13[0]  = &v14;
  v13[1]  = 0x400040004;
  uint64_t v2 = IOMallocZeroData();
  if (v2)
  {
    uint64_t v3 = v2;
    LODWORD(this[1].OSObject::OSObjectInterface::__vftable[1871].free)  = 1;
    if ((LODWORD(this[1].OSObject::OSObjectInterface::__vftable[2235].free) - 1) > 1)
    {
      if ((AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 91) & 1) == 0)
      {
LABEL_25:
        setPropertyHelper(this, "PTM_Mode", LODWORD(this[1].OSObject::OSObjectInterface::__vftable[1871].free), 8u);
        return IOFreeData();
      }
    }
    else
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v10 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v10, "[dk] %s@%d:[WiFiTimeSync] %s: forcedTimestmping %d. Force fPTMMode to %d\n", "setPTMMode", 6080, "setPTMMode", LODWORD(this[1].OSObject::OSObjectInterface::__vftable[2235].free), 1);
        }
      }
      if ((AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 91) & 1) == 0) {
        goto LABEL_25;
      }
      if (AppleBCMWLANCommander::runIOVarGet((AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free, (uint64_t)"ptm_active", (uint64_t)&kNoTxPayload, (uint64_t)v13, 0))BOOL v4 = 1; {
      else
      }
        BOOL v4 = v14 == 0;
      if (!v4)
      {
        *(_DWORD *)uint64_t v3 = 262401;
        *(_WORD *)(v3 + 4)  = 1;
        *(_DWORD *)(v3 + 6)  = 0;
        v12[0]  = v3;
        v12[1]  = 12;
        int v5 = AppleBCMWLANCommander::runIOVarSet((AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free, (uint64_t)"bus:ptm", (uint64_t)v12, 0, 0);
        if (v5)
        {
          int v6 = v5;
          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              OSStringPtr v11 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              CCLogStream::logAlert(v11, "[dk] %s@%d:Failed to disable ptm, ret:0x%x\n", "setPTMMode", 6102, v6);
            }
          }
        }
      }
      LODWORD(this[1].OSObject::OSObjectInterface::__vftable[1871].free)  = 1;
    }
    if (AppleBCMWLANCommander::runIOVarGet((AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free, (uint64_t)"ptm_active", (uint64_t)&kNoTxPayload, (uint64_t)v13, 0))BOOL v9 = 1; {
    else
    }
      BOOL v9 = v14 == 0;
    if (!v9) {
      LODWORD(this[1].OSObject::OSObjectInterface::__vftable[1871].free)  = 2;
    }
    goto LABEL_25;
  }
  uint64_t result = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
  if (result)
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v8 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      return CCLogStream::logAlert(v8, "[dk] %s@%d:ptm cmd allocation failed", "setPTMMode", 6073);
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::getPTMMode(AppleBCMWLANCore *this)
{
  return *(unsigned int *)(*((void *)this + 9) + 29944);
}

uint64_t AppleBCMWLANCore::handlePowerStateChange(IOService *a1, unsigned int a2)
{
  free_high  = HIDWORD(a1[1].OSObject::OSObjectInterface::__vftable[1231].free);
  if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
  {
    ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
    if (CCLogStream::shouldLog())
    {
      int v14 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
      uint64_t v15 = SHIDWORD(a1[1].OSObject::OSObjectInterface::__vftable[1231].free);
      if (v15 > 4) {
        uint64_t v16 = "UNKNOWN";
      }
      else {
        uint64_t v16 = off_10038CBB8[v15];
      }
      if (a2 > 4) {
        int v19 = "UNKNOWN";
      }
      else {
        int v19 = off_10038CBB8[a2];
      }
      CCLogStream::logNotice(v14, "[dk] %s@%d: Changing power state from %s to %s.\n", "handlePowerStateChange", 34946, v16, v19);
    }
  }
  int v5 = (int *)&a1[1].OSObject::OSObjectInterface::__vftable[1231].free + 1;
  int v6 = *v5;
  if (!a2 && v6 == 1 || !a2 && v6 == 4)
  {
    int *v5 = 0;
LABEL_8:
    uint64_t v7 = AppleBCMWLANCore::powerOff(a1, 1);
    goto LABEL_9;
  }
  if (v6) {
    BOOL v10 = v6 == 4;
  }
  else {
    BOOL v10 = 1;
  }
  int v11 = v10;
  if (a2 == 1 && v11)
  {
    int v12 = 1;
LABEL_26:
    int *v5 = v12;
    uint64_t v7 = AppleBCMWLANCore::powerOn(a1);
LABEL_9:
    uint64_t v8 = v7;
    if (v7)
    {
      if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
      {
        ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v17 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
          if (free_high > 4) {
            unsigned int v18 = "UNKNOWN";
          }
          else {
            unsigned int v18 = off_10038CBB8[free_high];
          }
          CCLogStream::logAlert(v17, "[dk] %s@%d: Power transition failed. Restoring power state to %s.\n", "handlePowerStateChange", 34972, v18);
        }
      }
      HIDWORD(a1[1].OSObject::OSObjectInterface::__vftable[1231].free)  = free_high;
    }
    return v8;
  }
  if (a2 == 4 && !v6)
  {
    int v12 = 4;
    goto LABEL_26;
  }
  if (a2 == 4 && v6 == 1)
  {
    int *v5 = 4;
    goto LABEL_8;
  }
  uint64_t v8 = 3758097095;
  if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
  {
    ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v13 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
      CCLogStream::logAlert(v13, "[dk] %s@%d: Unknown power state transition from %d to %d\n", "handlePowerStateChange", 34967, HIDWORD(a1[1].OSObject::OSObjectInterface::__vftable[1231].free), a2);
    }
  }
  return v8;
}

uint64_t AppleBCMWLANCore::shouldSupportTethering(AppleBCMWLANCore *this)
{
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 11)) {
    return 0;
  }
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 16);
}

uint64_t AppleBCMWLANCore::checkForTCPKAOffloadSupport(AppleBCMWLANCore *this)
{
  uint64_t result = AppleBCMWLANCore::featureFlagIsBitSet(this, 49);
  if (result)
  {
    uint64_t v3 = *(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472);
    return AppleBCMWLANConfigManager::isTCPKAOffloadEnabled(v3);
  }
  return result;
}

uint64_t AppleBCMWLANCore::bringupBCM(AppleBCMWLANCore *this)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      int v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v6, "[dk] %s@%d: Bringup firmware, sending ...\n", "bringupBCM", 6394);
    }
  }
  uint64_t v2 = AppleBCMWLANCommander::runIOCtlSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), 2, (uint64_t)&kNoTxPayload, 0, 0);
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
    && ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
        CCLogStream::shouldLog()))
  {
    uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    uint64_t v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v2);
    CCLogStream::logAlert(v7, "[dk] %s@%d: Bringup firmware, ... sent rv[0x%08x]/'%s'\n", "bringupBCM", 6396, v2, v8);
    if (!v2) {
      goto LABEL_15;
    }
  }
  else if (!v2)
  {
    goto LABEL_15;
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      int v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t v13 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v2);
      CCLogStream::logAlert(v12, "[dk] %s@%d: WLC_UP command failed, trying again: %s\n", "bringupBCM", 6399, v13);
    }
  }
  uint64_t v3 = AppleBCMWLANCommander::runIOCtlSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), 2, (uint64_t)&kNoTxPayload, 0, 0);
  if (v3)
  {
    uint64_t v4 = v3;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v4);
        CCLogStream::logAlert(v5, "[dk] %s@%d: WLC_UP command failed, giving up: %s\n");
      }
    }
    return v4;
  }
LABEL_15:
  uint64_t v9 = *((void *)this + 9) + 6580;
  *(_WORD *)uint64_t v9 = 257;
  *(unsigned char *)(v9 + 2)  = 1;
  *(unsigned char *)(*((void *)this + 9) + 658AppleBCMWLANCommandMonitor::free(this - 3) = 0;
  *(void *)(*((void *)this + 9) + 6536)  = mach_continuous_time();
  *(_DWORD *)(*((void *)this + 9) + 6584)  = 0;
  uint64_t v10 = *((void *)this + 9);
  *(_WORD *)(v10 + 6580)  = 257;
  *(unsigned char *)(v10 + 6582)  = 1;
  *(unsigned char *)(*((void *)this + 9) + 658AppleBCMWLANCommandMonitor::free(this - 3) = 0;
  *(void *)(*((void *)this + 9) + 17544)  = 0;
  *(void *)(*((void *)this + 9) + 17552)  = 0;
  *(void *)(*((void *)this + 9) + 17560)  = 0;
  *(void *)(*((void *)this + 9) + 17568)  = 0;
  int v15 = 0x10000;
  uint64_t v16 = &v15;
  uint64_t v17 = 4;
  uint64_t v4 = AppleBCMWLANCommander::runIOCtlSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), 38, (uint64_t)&v16, 0, 0);
  if (v4)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v4);
        CCLogStream::logAlert(v14, "[dk] %s@%d: Error: Unable to enable radio (WLC_SET_RADIO): %s\n");
      }
    }
  }
  return v4;
}

uint64_t AppleBCMWLANCore::setNeedsScanSnapshotAtLinkUp(uint64_t this, __int16 a2)
{
  uint64_t v2 = *(void *)(this + 72) + 6580;
  *(_WORD *)uint64_t v2 = a2 | (a2 << 8);
  *(unsigned char *)(v2 + 2)  = a2;
  *(unsigned char *)(*(void *)(this + 72) + 658AppleBCMWLANCommandMonitor::free(this - 3) = 0;
  return this;
}

uint64_t AppleBCMWLANCore::resetInactivityAndSleepStats(uint64_t this)
{
  *(void *)(*(void *)(this + 72) + 17544)  = 0;
  *(void *)(*(void *)(this + 72) + 17552)  = 0;
  *(void *)(*(void *)(this + 72) + 17560)  = 0;
  *(void *)(*(void *)(this + 72) + 17568)  = 0;
  return this;
}

BOOL AppleBCMWLANCore::getBCMInterfaceState(AppleBCMWLANCore *this)
{
  int v8 = 0;
  v7[0]  = &v8;
  v7[1]  = 0x400040004;
  uint64_t v2 = AppleBCMWLANCommander::runIOCtlGet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), 162, (uint64_t)&kNoTxPayload, (uint64_t)v7, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int v6 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v3);
        CCLogStream::logAlert(v5, "[dk] %s@%d:Failed WLC_GET_UP: %s\n", "getBCMInterfaceState", 6435, v6);
      }
    }
  }
  return v8 != 0;
}

char *AppleBCMWLANCore::findWord(AppleBCMWLANCore *this, char *a2, const char *__s1, int64_t __n)
{
  if (!__s1) {
    return 0;
  }
  size_t v7 = strnlen(__s1, __n);
  uint64_t result = 0;
  if (a2 && __n >= 1 && v7)
  {
    for (uint64_t i = a2; ; uint64_t i = v10 + 1)
    {
      uint64_t result = strnstr(i, __s1, __n);
      if (!result) {
        break;
      }
      if (result == a2 || *(result - 1) <= 56)
      {
        uint64_t v10 = &result[v7];
        if (result[v7] < 57) {
          return result;
        }
      }
      else
      {
        uint64_t v10 = result;
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::IssueFwCap(IOService *this)
{
  uint64_t v2 = (char *)IOMallocZeroData();
  if (v2)
  {
    uint64_t v3 = v2;
    *uint64_t v2 = 0;
    v78[0]  = v2;
    v78[1]  = 0x40000000400;
    uint64_t v4 = AppleBCMWLANCommander::runIOVarGet((AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free, (uint64_t)"cap", (uint64_t)&kNoTxPayload, (uint64_t)v78, 0);
    if (v4)
    {
      uint64_t v5 = v4;
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          int v6 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          size_t v7 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v5);
          CCLogStream::logAlert(v6, "[dk] %s@%d: iovar get cap command failed, %s\n", "IssueFwCap", 6600, v7);
        }
      }
LABEL_199:
      IOFreeData();
      return v5;
    }
    v3[1023]  = 0;
    setPropertyHelper(this, "FWCap", v3);
    int shouldLog = (AppleBCMWLANCore *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (shouldLog)
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      int shouldLog = (AppleBCMWLANCore *)CCLogStream::shouldLog();
      if (shouldLog)
      {
        uint64_t v66 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        int shouldLog = (AppleBCMWLANCore *)CCLogStream::logNoticeIf(v66, 0x80uLL, "[dk] %s@%d:cap: %.*s\n", "IssueFwCap", 6607, 1024, v3);
      }
    }
    for (uint64_t i = 0; i != 249; i += 3)
    {
      uint64_t v10 = &(&off_10038BD68)[i];
      if (AppleBCMWLANCore::findWord(shouldLog, v3, (&off_10038BD68)[i], 1024))
      {
        AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, *((_DWORD *)v10 + 2));
        int shouldLog = (AppleBCMWLANCore *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (shouldLog)
        {
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          int shouldLog = (AppleBCMWLANCore *)CCLogStream::shouldLog();
          if (shouldLog)
          {
            int v11 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            int shouldLog = (AppleBCMWLANCore *)CCLogStream::logAlert(v11, "[dk] %s@%d:   Supported bit flag[ %3u], cap[ '%s' ] - %s\n");
          }
        }
      }
      else
      {
        AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, *((_DWORD *)v10 + 2));
        if (v10[2])
        {
          int shouldLog = (AppleBCMWLANCore *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (shouldLog)
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            int shouldLog = (AppleBCMWLANCore *)CCLogStream::shouldLog();
            if (shouldLog)
            {
              int v12 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              int shouldLog = (AppleBCMWLANCore *)CCLogStream::logAlert(v12, "[dk] %s@%d: Unsupported bit flag[ %3u], cap[ '%s' ] - %s\n");
            }
          }
        }
      }
    }
    if (AppleBCMWLANCore::findWord(shouldLog, v3, "ap", 1024)) {
      AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 11);
    }
    else {
      AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 11);
    }
    Word  = AppleBCMWLANCore::findWord(v13, v3, "mpf", 1024);
    isMotionAssistanceSupported  = AppleBCMWLANConfigManager::isMotionAssistanceSupported((AppleBCMWLANConfigManager *)this[1].OSObject::OSObjectInterface::__vftable[342].init);
    if (Word && isMotionAssistanceSupported) {
      AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 18);
    }
    else {
      AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 18);
    }
    if (AppleBCMWLANCore::isD11SeqReuseSupported((AppleBCMWLANCore *)this, v16)) {
      AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 41);
    }
    else {
      AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 41);
    }
    if (AppleBCMWLANConfigManager::isFastEnterpriseNwSupported((AppleBCMWLANConfigManager *)this[1].OSObject::OSObjectInterface::__vftable[342].init)) {
      AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 50);
    }
    else {
      AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 50);
    }
    unsigned int v18 = AppleBCMWLANCore::findWord(v17, v3, "nap", 1024);
    int v19 = (char *)&this[1].OSObject::OSObjectInterface::__vftable[648].free + 5;
    if (v18)
    {
      unsigned char *v19 = 1;
      uint64_t v20 = (AppleBCMWLANCore *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (v20)
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t v20 = (AppleBCMWLANCore *)CCLogStream::shouldLog();
        if (v20)
        {
          uint64_t v21 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          uint64_t v20 = (AppleBCMWLANCore *)CCLogStream::logAlert(v21, "[dk] %s@%d:DigitalNap Supported\n");
        }
      }
    }
    else
    {
      unsigned char *v19 = 0;
      uint64_t v20 = (AppleBCMWLANCore *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (v20)
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t v20 = (AppleBCMWLANCore *)CCLogStream::shouldLog();
        if (v20)
        {
          uint64_t v73 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          uint64_t v20 = (AppleBCMWLANCore *)CCLogStream::logAlert(v73, "[dk] %s@%d:DigitalNap NOT Supported\n");
        }
      }
    }
    int v22 = AppleBCMWLANCore::findWord(v20, v3, "nan", 1024);
    if (v22) {
      AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 6);
    }
    if (AppleBCMWLANCore::findWord((AppleBCMWLANCore *)v22, v3, "nanho", 1024)) {
      AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 64);
    }
    int v77 = 0;
    BOOL v23 = IOParseBootArgNumber("wlan.debug.disablenanho", &v77, 4);
    if (v23 && v77)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          size_t v68 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v68, "[dk] %s@%d:NAN and NANHO disabled\n", "IssueFwCap", 6681);
        }
      }
      AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 6);
      AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 64);
    }
    uint64_t v24 = AppleBCMWLANCore::findWord((AppleBCMWLANCore *)v23, v3, "dfsp", 1024);
    isDFSProxyEnabled  = AppleBCMWLANConfigManager::isDFSProxyEnabled((AppleBCMWLANConfigManager *)this[1].OSObject::OSObjectInterface::__vftable[342].init);
    if (v24 && isDFSProxyEnabled) {
      AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 54);
    }
    else {
      AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 54);
    }
    AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 70);
    if (AppleBCMWLANCore::findWord(v26, v3, "rsdb", 1024))
    {
      AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 46);
      AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 70);
      int v76 = 1;
      BOOL v27 = IOParseBootArgNumber("wlan.concurrentmode", &v76, 4);
      if (!v27 || v76)
      {
LABEL_60:
        if (AppleBCMWLANCore::findWord((AppleBCMWLANCore *)v27, v3, "psbw", 1024)) {
          AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 3);
        }
        else {
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 3);
        }
        if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 38))
        {
          int v76 = 1;
          uint64_t v30 = IOParseBootArgNumber("wlan.hotspot.support.sae", &v76, 4);
          if (v30 && !v76) {
            AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 75);
          }
        }
        else
        {
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 65);
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 66);
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 75);
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 109);
          uint64_t v30 = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (v30)
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            uint64_t v30 = CCLogStream::shouldLog();
            if (v30)
            {
              unsigned int v69 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              uint64_t v30 = CCLogStream::logAlert(v69, "[dk] %s@%d:PMF not supported so disable WPA3\n", "IssueFwCap", 6726);
            }
          }
        }
        if (AppleBCMWLANCore::findWord((AppleBCMWLANCore *)v30, v3, "he", 1024)) {
          AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 67);
        }
        else {
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 67);
        }
        if (AppleBCMWLANCore::findWord(v31, v3, "txhist", 1024)) {
          AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 69);
        }
        else {
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 69);
        }
        if (AppleBCMWLANCore::findWord(v32, v3, "ecounters", 1024)) {
          AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 74);
        }
        else {
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 74);
        }
        if (AppleBCMWLANCore::findWord(v33, v3, "sc", 1024)) {
          AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 76);
        }
        else {
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 76);
        }
        if (AppleBCMWLANCore::findWord(v34, v3, "tx-prof", 1024)) {
          AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 78);
        }
        else {
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 78);
        }
        if (AppleBCMWLANCore::findWord(v35, v3, "obss_hw", 1024)) {
          AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 101);
        }
        else {
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 101);
        }
        if (AppleBCMWLANCore::findWord(v36, v3, "dynbw", 1024)) {
          AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 102);
        }
        else {
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 102);
        }
        if (AppleBCMWLANCore::findWord(v37, v3, "hp2p", 1024))
        {
          AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 86);
          *(BOOL (__cdecl **)(OSObjectInterface *__hidden))((char *)&this[1].OSObject::OSObjectInterface::__vftable[13].init
                                                          + 4)  = 0;
          HP2P_CTRL  = (AppleBCMWLANCore *)AppleBCMWLANCore::getHP2P_CTRL((AppleBCMWLANCore *)this, 7, (unsigned int *)&this[1].OSObject::OSObjectInterface::__vftable[13].free);
          if (HP2P_CTRL)
          {
            uint64_t v39 = HP2P_CTRL;
            HP2P_CTRL  = (AppleBCMWLANCore *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (HP2P_CTRL)
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              HP2P_CTRL  = (AppleBCMWLANCore *)CCLogStream::shouldLog();
              if (HP2P_CTRL)
              {
                uint64_t v40 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                unint64_t v41 = (const char *)((uint64_t (*)(IOService *, AppleBCMWLANCore *))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v39);
                HP2P_CTRL  = (AppleBCMWLANCore *)CCLogStream::logAlert(v40, "[dk] %s@%d:Error:  getting HP2P Capability %s\n", "IssueFwCap", 6787, v41);
              }
            }
          }
          else
          {
            int v42 = this[1].OSObject::OSObjectInterface::__vftable;
            free  = (int)v42[13].free;
            if ((free & 8) != 0)
            {
              BYTE4(v42[13].free)  = 1;
              int v42 = this[1].OSObject::OSObjectInterface::__vftable;
              free  = (int)v42[13].free;
            }
            if ((free & 4) != 0) {
              BYTE5(v42[13].free)  = 1;
            }
          }
        }
        else
        {
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 86);
        }
        if (AppleBCMWLANCore::findWord(HP2P_CTRL, v3, "dsa", 1024)) {
          AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 79);
        }
        else {
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 79);
        }
        if (AppleBCMWLANCore::findWord(v44, v3, "ltecxlbt", 1024)) {
          AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 80);
        }
        else {
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 80);
        }
        if (AppleBCMWLANCore::findWord(v45, v3, "rng_reseed", 1024)) {
          AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 81);
        }
        else {
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 81);
        }
        if (AppleBCMWLANCore::findWord(v46, v3, "dtim_miss", 1024)) {
          AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 110);
        }
        else {
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 110);
        }
        uint64_t v47 = (AppleBCMWLANCore *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (v47)
        {
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          uint64_t v47 = (AppleBCMWLANCore *)CCLogStream::shouldLog();
          if (v47)
          {
            uint64_t v67 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            uint64_t v47 = (AppleBCMWLANCore *)CCLogStream::logInfo(v67, "[dk] %s@%d:Setting Beacon Mute & Drift feature flag\n", "IssueFwCap", 6823);
          }
        }
        if (AppleBCMWLANCore::findWord(v47, v3, "iot_bm", 1024))
        {
          AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 82);
          unint64_t v48 = (AppleBCMWLANCore *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (v48)
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            unint64_t v48 = (AppleBCMWLANCore *)CCLogStream::shouldLog();
            if (v48)
            {
              uint64_t v49 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              unint64_t v48 = (AppleBCMWLANCore *)CCLogStream::logInfo(v49, "[dk] %s@%d:Setting Beacon Mute feature flag\n", "IssueFwCap", 6826);
            }
          }
        }
        else
        {
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 82);
        }
        if (AppleBCMWLANCore::findWord(v48, v3, "iot_bd", 1024))
        {
          AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 87);
          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v50 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              CCLogStream::logInfo(v50, "[dk] %s@%d:Setting Beacon Drift feature flag\n", "IssueFwCap", 6832);
            }
          }
        }
        else
        {
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 87);
        }
        int v75 = 0;
        int v76 = 0;
        if (IOParseBootArgNumber("wlan.debug.disablebcnmute", &v76, 4) && v76)
        {
          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              unint64_t v70 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              CCLogStream::logAlert(v70, "[dk] %s@%d:Beacon Mute Mitigation disabled\n", "IssueFwCap", 6840);
            }
          }
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 82);
        }
        BOOL v51 = IOParseBootArgNumber("wlan.debug.disablebcndrift", &v75, 4);
        if (v51 && v75)
        {
          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v71 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              CCLogStream::logAlert(v71, "[dk] %s@%d:Beacon Drift Mitigation disabled\n", "IssueFwCap", 6847);
            }
          }
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 87);
        }
        if (AppleBCMWLANCore::findWord((AppleBCMWLANCore *)v51, v3, "avoid-bssid", 1024)) {
          AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 83);
        }
        else {
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 83);
        }
        if (AppleBCMWLANCore::findWord(v52, v3, "rc2cx", 1024)) {
          AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 84);
        }
        else {
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 84);
        }
        if (AppleBCMWLANCore::findWord(v53, v3, "lr154cx", 1024)) {
          AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 111);
        }
        else {
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 111);
        }
        if (AppleBCMWLANCore::isRC1CoexSupported((AppleBCMWLANCore *)this, v3, 1024)) {
          AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 85);
        }
        else {
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 85);
        }
        if (AppleBCMWLANCore::isAdvEcountersSupported((AppleBCMWLANCore *)this, v3, 1024)) {
          AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 89);
        }
        else {
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 89);
        }
        if (AppleBCMWLANCore::isPHYEcounterSupported((AppleBCMWLANCore *)this, v3, 1024)) {
          AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 90);
        }
        else {
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 90);
        }
        if (AppleBCMWLANCore::findWord(v54, v3, "spmi", 1024)) {
          AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 94);
        }
        else {
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 94);
        }
        if (AppleBCMWLANCore::findWord(v55, v3, "qos_mgmt", 1024)) {
          AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 95);
        }
        else {
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 95);
        }
        if (AppleBCMWLANCore::findWord(v56, v3, "csi", 1024)) {
          AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 97);
        }
        else {
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 97);
        }
        if (AppleBCMWLANCore::findWord(v57, v3, "eds", 1024)) {
          AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 119);
        }
        else {
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 119);
        }
        int v74 = 0;
        if (IOParseBootArgNumber("wlan.debug.enableNDD", &v74, 4) && v74)
        {
          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v72 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              CCLogStream::logAlert(v72, "[dk] %s@%d:Enable NDD feature\n", "IssueFwCap", 6913);
            }
          }
          AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 119);
        }
        if (AppleBCMWLANCore::isPHYCALEcounterSupported((AppleBCMWLANCore *)this, v3, 1024)) {
          AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 99);
        }
        else {
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 99);
        }
        if (AppleBCMWLANCore::findWord(v58, v3, "chstats", 1024)) {
          AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 103);
        }
        else {
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 103);
        }
        if (AppleBCMWLANCore::findWord(v59, v3, "peerstats", 1024)) {
          AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 104);
        }
        else {
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 104);
        }
        if (AppleBCMWLANCore::findWord(v60, v3, "oct", 1024)) {
          AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 98);
        }
        else {
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 98);
        }
        if (AppleBCMWLANCore::findWord(v61, v3, "scca", 1024)) {
          AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 112);
        }
        else {
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 112);
        }
        if (AppleBCMWLANCore::findWord(v62, v3, "spmi_scan_fwd", 1024)) {
          AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 117);
        }
        else {
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 117);
        }
        if (AppleBCMWLANCore::findWord(v63, v3, "monitor", 1024)) {
          AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 118);
        }
        else {
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 118);
        }
        unsigned int v64 = (*(uint64_t (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[337].free
                                                                                       + 368))(this[1].OSObject::OSObjectInterface::__vftable[337].free)
            - 4378;
        if (v64 <= 0x15 && ((1 << v64) & 0x200601) != 0) {
          AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 114);
        }
        else {
          AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 114);
        }
        uint64_t v5 = 0;
        goto LABEL_199;
      }
      uint64_t v28 = (AppleBCMWLANCore *)this;
      int v29 = 70;
    }
    else
    {
      uint64_t v28 = (AppleBCMWLANCore *)this;
      int v29 = 46;
    }
    AppleBCMWLANCore::featureFlagClearBit(v28, v29);
    goto LABEL_60;
  }
  return 3758097085;
}

void AppleBCMWLANCore::featureFlagSetBit(AppleBCMWLANCore *this, int a2)
{
  char v2 = a2;
  int v4 = a2 + 7;
  if (a2 >= 0) {
    int v4 = a2;
  }
  if ((v4 >> 3) >= 0x10)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v9, "[dk] %s@%d: Invalid bit position, bit[%d]\n");
      }
    }
  }
  else
  {
    uint64_t v5 = *((void *)this + 9);
    int v6 = *(IOLock **)(v5 + 17664);
    if (v6)
    {
      uint64_t v7 = v5 + 17672;
      uint64_t v8 = (uint64_t)v4 >> 3;
      IOLockLock(*(IOLock **)(v5 + 17664));
      *(unsigned char *)(v7 + v8) |= 1 << (v2 & 7);
      IOLockUnlock(v6);
    }
    else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v10, "[dk] %s@%d: Invalid lock\n");
      }
    }
  }
}

void AppleBCMWLANCore::featureFlagClearBit(AppleBCMWLANCore *this, int a2)
{
  char v2 = a2;
  int v4 = a2 + 7;
  if (a2 >= 0) {
    int v4 = a2;
  }
  if ((v4 >> 3) >= 0x10)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v9, "[dk] %s@%d: Invalid bit position, bit[%d]\n");
      }
    }
  }
  else
  {
    uint64_t v5 = *((void *)this + 9);
    int v6 = *(IOLock **)(v5 + 17664);
    if (v6)
    {
      uint64_t v7 = v5 + 17672;
      uint64_t v8 = (uint64_t)v4 >> 3;
      IOLockLock(*(IOLock **)(v5 + 17664));
      *(unsigned char *)(v7 + v8) &= ~(1 << (v2 & 7));
      IOLockUnlock(v6);
    }
    else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v10, "[dk] %s@%d: Invalid lock\n");
      }
    }
  }
}

uint64_t AppleBCMWLANCore::isD11SeqReuseSupported(AppleBCMWLANCore *this, const char *a2)
{
  unsigned int v5 = 1;
  IOParseBootArgNumber("bcom.feature.d11seq", &v5, 4);
  if (!v5) {
    return 0;
  }
  v4[0]  = &v5;
  v4[1]  = 0x400040004;
  if (AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"wlfc_mode", (uint64_t)&kNoTxPayload, (uint64_t)v4, 0) == -469794537)return 0; {
  else
  }
    return (v5 >> 3) & 1;
}

uint64_t AppleBCMWLANCore::checkForPMFSupport(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 38);
}

uint64_t AppleBCMWLANCore::getHP2P_CTRL(AppleBCMWLANCore *this, __int16 a2, unsigned int *a3)
{
  memset(v16, 170, sizeof(v16));
  uint64_t v6 = IOMallocZeroData();
  uint64_t v7 = IOMallocZeroData();
  if (((*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 5400) + 800))() & 1) == 0)
  {
    uint64_t v9 = 3758097095;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v11, "[dk] %s@%d:FW does not support llw", "getHP2P_CTRL", 56678);
        uint64_t v9 = 3758097095;
        if (!v7) {
          goto LABEL_8;
        }
        goto LABEL_7;
      }
    }
LABEL_17:
    if (!v7) {
      goto LABEL_8;
    }
LABEL_7:
    IOFreeData();
    goto LABEL_8;
  }
  if (v6)
  {
    if (!v7)
    {
      uint64_t v9 = 3758097085;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          int v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v12, "[dk] %s@%d:hp2p cmd resp alloc fail\n", "getHP2P_CTRL", 56680);
        }
      }
      goto LABEL_9;
    }
    *(_DWORD *)uint64_t v6 = 98304;
    *(_WORD *)(v6 + 4)  = a2;
    *(_WORD *)(v6 + 6)  = 4;
    *(_DWORD *)(v6 + 8)  = 1;
    _DWORD v16[2] = v6;
    void v16[3] = 12;
    v16[0]  = v7;
    v16[1]  = 0x40000000400;
    uint64_t v8 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"hp2p", (uint64_t)&v16[2], (uint64_t)v16, 0);
    if (v8)
    {
      uint64_t v9 = v8;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v13, "[dk] %s@%d:hp2p get iovar failed\n", "getHP2P_CTRL", 56700);
        }
      }
    }
    else
    {
      *a3  = *(_DWORD *)(v7 + 12);
      if (*(unsigned __int16 *)(v7 + 6) <= 7u)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            int v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v15, "[dk] %s@%d:Unexpected hp2p subcmd resp length\n", "getHP2P_CTRL", 56713);
          }
        }
        uint64_t v9 = 3758096385;
      }
      else
      {
        uint64_t v9 = 0;
      }
    }
    goto LABEL_7;
  }
  uint64_t v9 = 3758097085;
  if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
    goto LABEL_17;
  }
  (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (!CCLogStream::shouldLog()) {
    goto LABEL_17;
  }
  int v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  CCLogStream::logAlert(v14, "[dk] %s@%d:hp2p cmd alloc fail\n", "getHP2P_CTRL", 56679);
  if (v7) {
    goto LABEL_7;
  }
LABEL_8:
  if (v6) {
LABEL_9:
  }
    IOFreeData();
  return v9;
}

BOOL AppleBCMWLANCore::isRC1CoexSupported(AppleBCMWLANCore *this, char *a2, int64_t a3)
{
  unsigned __int8 v9 = -86;
  uint64_t shouldLog = IOParseBootArgNumber("wlan.rc1cx.enable", &v9, 1);
  if (!shouldLog) {
    return AppleBCMWLANCore::findWord((AppleBCMWLANCore *)shouldLog, a2, "rc1cx", a3) != 0;
  }
  uint64_t shouldLog = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (shouldLog)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    uint64_t shouldLog = CCLogStream::shouldLog();
    if (shouldLog)
    {
      uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t shouldLog = CCLogStream::logAlert(v8, "[dk] %s@%d:bootArg for rc1cx is %d\n", "isRC1CoexSupported", 41018, v9);
    }
  }
  return v9 || AppleBCMWLANCore::findWord((AppleBCMWLANCore *)shouldLog, a2, "rc1cx", a3) != 0;
}

BOOL AppleBCMWLANCore::isAdvEcountersSupported(AppleBCMWLANCore *this, char *a2, int64_t __n)
{
  Word  = AppleBCMWLANCore::findWord(this, a2, "adv_ecounters", __n);
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v6, "[dk] %s@%d:advance eCounter cap string found? %u\n", "isAdvEcountersSupported", 41100, Word != 0);
    }
  }
  return Word != 0;
}

BOOL AppleBCMWLANCore::isPHYEcounterSupported(AppleBCMWLANCore *this, char *a2, int64_t a3)
{
  unsigned __int8 v9 = -86;
  uint64_t shouldLog = IOParseBootArgNumber("wlan.PhyEconter.enable", &v9, 1);
  if (!shouldLog) {
    return AppleBCMWLANCore::findWord((AppleBCMWLANCore *)shouldLog, a2, "phy_ecounter", a3) != 0;
  }
  uint64_t shouldLog = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (shouldLog)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    uint64_t shouldLog = CCLogStream::shouldLog();
    if (shouldLog)
    {
      uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t shouldLog = CCLogStream::logAlert(v8, "[dk] %s@%d:bootArg for PHYEcounter is %d\n", "isPHYEcounterSupported", 41033, v9);
    }
  }
  return v9 || AppleBCMWLANCore::findWord((AppleBCMWLANCore *)shouldLog, a2, "phy_ecounter", a3) != 0;
}

BOOL AppleBCMWLANCore::isPHYCALEcounterSupported(AppleBCMWLANCore *this, char *a2, int64_t a3)
{
  unsigned __int8 v9 = -86;
  uint64_t shouldLog = IOParseBootArgNumber("wlan.PhyCalEcounter.enable", &v9, 1);
  if (!shouldLog) {
    return AppleBCMWLANCore::findWord((AppleBCMWLANCore *)shouldLog, a2, "phy_cal_ecounter", a3) != 0;
  }
  uint64_t shouldLog = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (shouldLog)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    uint64_t shouldLog = CCLogStream::shouldLog();
    if (shouldLog)
    {
      uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t shouldLog = CCLogStream::logAlert(v8, "[dk] %s@%d:bootArg for PHYCALEcounter is %d\n", "isPHYCALEcounterSupported", 41048, v9);
    }
  }
  return v9 || AppleBCMWLANCore::findWord((AppleBCMWLANCore *)shouldLog, a2, "phy_cal_ecounter", a3) != 0;
}

uint64_t AppleBCMWLANCore::IssueFwCapExt(AppleBCMWLANCore *this)
{
  uint64_t v2 = 3758097084;
  uint64_t v32 = 0;
  long long v33 = 0;
  uint64_t v3 = IOMallocZeroData();
  if (v3)
  {
    unint64_t v4 = v3;
    v31[0]  = v3;
    v31[1]  = 0x40000000400;
    uint64_t v5 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"dngl:capext", (uint64_t)&kNoTxPayload, (uint64_t)v31, 0);
    if (v5)
    {
      uint64_t v7 = v5;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          unsigned __int8 v9 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v7);
          CCLogStream::logAlert(v8, "[dk] %s@%d: iovar get capext command failed, issuing get cap %s\n", "IssueFwCapExt", 7000, v9);
        }
      }
    }
    else
    {
      if (v4 + 4 < v4) {
LABEL_52:
      }
        os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"The range of valid memory is too large to be represented by this type, or [begin, end) is not a well-formed range", v6);
      unint64_t v10 = *(unsigned __int16 *)(v4 + 2);
      if (v10 < 0x401)
      {
        v29[0]  = v4;
        v29[1]  = 1024;
        IO80211BufferCursor::_crop(v29, 4uLL, 0xFFFFFFFFFFFFFFFFLL, v30);
        IO80211BufferCursor::_crop(v30, 0xFFFFFFFFFFFFFFFFLL, v10, &v26);
        uint64_t v32 = v26;
        long long v33 = v27;
        if (v26 && v27)
        {
          IO80211BufferCursor::_crop(&v32, 0, 0xFFFFFFFFFFFFFFFFLL, &v26);
          int v12 = (unsigned __int16 *)v26;
          unint64_t v13 = (unint64_t)v27;
          BOOL v27 = (unsigned __int16 *)v26;
          for (i = v13; v27 && i >= 4; unint64_t v13 = i)
          {
            unint64_t v14 = v12[1] + (-v12[1] & 3) + 4;
            if (v14 > v13) {
              break;
            }
            v30[0]  = 0xAAAAAAAAAAAAAAAALL;
            if (v12 + 2 < v12) {
              goto LABEL_52;
            }
            uint64_t v15 = v12[1];
            if (v15 + 4 > v14 || v15 == 0)
            {
              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
              {
                (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                if (CCLogStream::shouldLog())
                {
                  BOOL v23 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                  CCLogStream::logAlert(v23, "[dk] %s@%d:%s::%s[%u] Error: Invalid xtlvData \n");
                }
              }
              goto LABEL_46;
            }
            uint64_t v17 = *v12;
            v30[0]  = (uint64_t)(v12 + 2);
            v30[1]  = v15;
            uint64_t v18 = AppleBCMWLANCore::processFwFeatures(this, (IO80211BufferCursor *)v30, v15, v17);
            if (v18)
            {
              uint64_t v21 = v18;
              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
              {
                (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v25 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                  CCLogStream::logAlert(v25, "[dk] %s@%d:processFwFeatures: Error parsing the xtlv payload:\n", "IssueFwCapExt", 7068);
                }
              }
              uint64_t v2 = v21;
              goto LABEL_46;
            }
            unint64_t v19 = v15 + 4 + (-(int)v15 & 3);
            if (v10 < v19) {
              unint64_t v19 = 0;
            }
            v10 -= v19;
            IO80211TLVIterator<IO80211TLVHeader<unsigned short,unsigned short,0ul,2ul,4ul>>::operator++((uint64_t)&v26);
            int v12 = v27;
          }
          if (v10)
          {
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (CCLogStream::shouldLog())
              {
                uint64_t v20 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                CCLogStream::logAlert(v20, "[dk] %s@%d:iovar dngl:capext: Extra payload remaining: remaininguint64_t Size = %lu\n");
              }
            }
          }
          else
          {
            if (AppleBCMWLANCore::isD11SeqReuseSupported(this, v6)) {
              AppleBCMWLANCore::featureFlagSetBit(this, 41);
            }
            else {
              AppleBCMWLANCore::featureFlagClearBit(this, 41);
            }
            if (AppleBCMWLANConfigManager::isFastEnterpriseNwSupported(*(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472))) {
              AppleBCMWLANCore::featureFlagSetBit(this, 50);
            }
            else {
              AppleBCMWLANCore::featureFlagClearBit(this, 50);
            }
            uint64_t v2 = 0;
          }
LABEL_46:
          uint64_t v7 = v2;
          goto LABEL_47;
        }
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v24 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v24, "[dk] %s@%d:iovar dngl:capext payload xtlvlist error:\n");
          }
        }
      }
      else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          int v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v11, "[dk] %s@%d:iovar dngl:capext payload size overrun:\n");
        }
      }
      uint64_t v7 = 3758097084;
    }
LABEL_47:
    IOFreeData();
    return v7;
  }
  return 3758097085;
}

uint64_t AppleBCMWLANCore::processFwFeatures(AppleBCMWLANCore *this, IO80211BufferCursor *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = this;
  if ((unint64_t)(a3 - 1) >= *((void *)a2 + 1) || (uint64_t v5 = *(char **)a2) == 0)
  {
    uint64_t v7 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
      if (CCLogStream::shouldLog())
      {
        unsigned __int8 v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
        CCLogStream::logAlert(v9, "[dk] %s@%d:%s:%d: xtlvData pointer null:\n", "processFwFeatures", 7132, "processFwFeatures", 7132);
      }
    }
    return v7;
  }
  uint64_t v7 = 0;
  if (a4 > 1025)
  {
    switch(a4)
    {
      case 2049:
        unint64_t v8 = 8 * a3;
        if ((unint64_t)(8 * a3) < 0xB) {
          goto LABEL_182;
        }
        if ((v5[1] & 4) != 0) {
          AppleBCMWLANCore::featureFlagSetBit(this, 28);
        }
        if (v8 < 0x39)
        {
          if (v8 < 0x31)
          {
            if (v8 < 0x2D)
            {
              if (v8 < 0x25)
              {
                if (v8 < 0x1A) {
                  goto LABEL_182;
                }
LABEL_98:
                if ((v5[3] & 2) != 0) {
                  AppleBCMWLANCore::featureFlagSetBit(v4, 17);
                }
                if (v8 < 0x24)
                {
                  if (v8 < 0x1B) {
                    goto LABEL_182;
                  }
LABEL_146:
                  if ((v5[3] & 4) != 0) {
                    AppleBCMWLANCore::featureFlagSetBit(v4, 48);
                  }
                  if (v8 < 0x34) {
                    goto LABEL_182;
                  }
                  if ((v5[6] & 8) != 0) {
                    AppleBCMWLANCore::featureFlagSetBit(v4, 51);
                  }
                  if (v8 < 0x4C)
                  {
                    if (v8 < 0x47)
                    {
                      if (v8 < 0x35) {
                        goto LABEL_182;
                      }
                      goto LABEL_174;
                    }
                  }
                  else if ((v5[9] & 8) != 0)
                  {
                    AppleBCMWLANCore::featureFlagSetBit(v4, 52);
                  }
                  if ((v5[8] & 0x40) != 0) {
                    AppleBCMWLANCore::featureFlagSetBit(v4, 53);
                  }
                  if (v8 < 0x50)
                  {
                    if (v8 < 0x4D)
                    {
                      if (v8 < 0x4B) {
                        goto LABEL_174;
                      }
                      goto LABEL_166;
                    }
                  }
                  else if (v5[9] < 0)
                  {
                    AppleBCMWLANCore::featureFlagSetBit(v4, 56);
                  }
                  if ((v5[9] & 0x10) != 0) {
                    AppleBCMWLANCore::featureFlagSetBit(v4, 57);
                  }
LABEL_166:
                  if ((v5[9] & 4) != 0) {
                    AppleBCMWLANCore::featureFlagSetBit(v4, 59);
                  }
                  if (v8 >= 0x4E)
                  {
                    if ((v5[9] & 0x20) != 0) {
                      AppleBCMWLANCore::featureFlagSetBit(v4, 60);
                    }
                    if (v8 >= 0x54 && (v5[10] & 8) != 0) {
                      AppleBCMWLANCore::featureFlagSetBit(v4, 4);
                    }
                  }
LABEL_174:
                  if ((v5[6] & 0x10) != 0) {
                    AppleBCMWLANCore::featureFlagSetBit(v4, 45);
                  }
                  if (v8 >= 0x46)
                  {
                    if ((v5[8] & 0x20) != 0) {
                      AppleBCMWLANCore::featureFlagSetBit(v4, 12);
                    }
                    HIDWORD(v29)  = 0;
                    if (v8 >= 0x73 && (v5[14] & 4) != 0) {
                      AppleBCMWLANCore::featureFlagSetBit(v4, 6);
                    }
LABEL_183:
                    if (IOParseBootArgNumber("wlan.debug.disablenanho", (char *)&v29 + 4, 4) && HIDWORD(v29))
                    {
                      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4))
                      {
                        (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                        if (CCLogStream::shouldLog())
                        {
                          BOOL v23 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                          CCLogStream::logAlert(v23, "[dk] %s@%d:NAN and NANHO disabled\n", "processFwFeatures", 7324);
                        }
                      }
                      AppleBCMWLANCore::featureFlagClearBit(v4, 6);
                      AppleBCMWLANCore::featureFlagClearBit(v4, 64);
                    }
                    if (v8 < 0x6E)
                    {
                      if (v8 < 0x62)
                      {
                        if (v8 < 0x5A)
                        {
                          if (v8 < 0x21) {
                            goto LABEL_221;
                          }
                          goto LABEL_207;
                        }
LABEL_205:
                        if ((v5[11] & 2) != 0) {
                          AppleBCMWLANCore::featureFlagSetBit(v4, 66);
                        }
LABEL_207:
                        if (v5[4]) {
                          AppleBCMWLANCore::featureFlagSetBit(v4, 121);
                        }
                        if (v8 >= 0x22)
                        {
                          if ((v5[4] & 2) != 0) {
                            AppleBCMWLANCore::featureFlagSetBit(v4, 67);
                          }
                          if (v8 >= 0x23)
                          {
                            if ((v5[4] & 4) != 0) {
                              AppleBCMWLANCore::featureFlagSetBit(v4, 116);
                            }
                            if (v8 >= 0x48 && v5[8] < 0)
                            {
                              AppleBCMWLANCore::featureFlagSetBit(v4, 68);
                              *(unsigned char *)(*((void *)v4 + 9) + 10381)  = 1;
                              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4))
                              {
                                (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                                if (CCLogStream::shouldLog())
                                {
                                  uint64_t v20 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                                  CCLogStream::logAlert(v20, "[dk] %s@%d:DigitalNap Supported\n", "processFwFeatures", 7371);
                                }
                              }
                              goto LABEL_224;
                            }
                          }
                        }
LABEL_221:
                        AppleBCMWLANCore::featureFlagClearBit(v4, 68);
                        *(unsigned char *)(*((void *)v4 + 9) + 10381)  = 0;
                        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4)
                          && ((*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4),
                              CCLogStream::shouldLog()))
                        {
                          int v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                          CCLogStream::logAlert(v22, "[dk] %s@%d:DigitalNap NOT Supported\n", "processFwFeatures", 7375);
                          if (!v8) {
                            goto LABEL_225;
                          }
                        }
                        else if (!v8)
                        {
                          goto LABEL_225;
                        }
LABEL_224:
                        if (*v5)
                        {
                          AppleBCMWLANCore::featureFlagSetBit(v4, 16);
                          AppleBCMWLANCore::featureFlagClearBit(v4, 11);
LABEL_227:
                          if (v8 >= 0x53)
                          {
                            if ((v5[10] & 4) != 0) {
                              AppleBCMWLANCore::featureFlagSetBit(v4, 54);
                            }
                            if (v8 >= 0x57 && (v5[10] & 0x40) != 0) {
                              AppleBCMWLANCore::featureFlagSetBit(v4, 3);
                            }
                          }
                          if (AppleBCMWLANCore::featureFlagIsBitSet(v4, 38))
                          {
                            HIDWORD(v29)  = 1;
                            if (IOParseBootArgNumber("wlan.hotspot.support.sae", (char *)&v29 + 4, 4) && !HIDWORD(v29)) {
                              AppleBCMWLANCore::featureFlagClearBit(v4, 75);
                            }
                          }
                          else
                          {
                            AppleBCMWLANCore::featureFlagClearBit(v4, 65);
                            AppleBCMWLANCore::featureFlagClearBit(v4, 66);
                            AppleBCMWLANCore::featureFlagClearBit(v4, 75);
                            AppleBCMWLANCore::featureFlagClearBit(v4, 105);
                            AppleBCMWLANCore::featureFlagClearBit(v4, 106);
                            AppleBCMWLANCore::featureFlagClearBit(v4, 109);
                            AppleBCMWLANCore::featureFlagClearBit(v4, 107);
                            AppleBCMWLANCore::featureFlagClearBit(v4, 108);
                            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4))
                            {
                              (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                              if (CCLogStream::shouldLog())
                              {
                                uint64_t v24 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                                CCLogStream::logAlert(v24, "[dk] %s@%d:PMF not supported so disable WPA3\n", "processFwFeatures", 7400);
                              }
                            }
                          }
                          if (v8 >= 0x33)
                          {
                            if ((v5[6] & 4) != 0) {
                              AppleBCMWLANCore::featureFlagSetBit(v4, 18);
                            }
                            if (v8 < 0x5D)
                            {
                              if (v8 < 0x4A) {
                                goto LABEL_270;
                              }
                            }
                            else if ((v5[11] & 0x10) != 0)
                            {
                              AppleBCMWLANCore::featureFlagSetBit(v4, 76);
                            }
                            if ((v5[9] & 2) != 0) {
                              AppleBCMWLANCore::featureFlagSetBit(v4, 77);
                            }
                            if (v8 >= 0x5F)
                            {
                              if ((v5[11] & 0x40) != 0) {
                                AppleBCMWLANCore::featureFlagSetBit(v4, 78);
                              }
                              if (v8 >= 0x60)
                              {
                                if (v5[11] < 0) {
                                  AppleBCMWLANCore::featureFlagSetBit(v4, 79);
                                }
                                if (v8 >= 0x63)
                                {
                                  if ((v5[12] & 4) != 0) {
                                    AppleBCMWLANCore::featureFlagSetBit(v4, 83);
                                  }
                                  if (v8 >= 0x64)
                                  {
                                    if ((v5[12] & 8) != 0)
                                    {
                                      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4))
                                      {
                                        (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                                        if (CCLogStream::shouldLog())
                                        {
                                          BOOL v27 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                                          CCLogStream::logInfo(v27, "[dk] %s@%d:Setting Beacon Mute feature flag\n", "processFwFeatures", 7430);
                                        }
                                      }
                                      AppleBCMWLANCore::featureFlagSetBit(v4, 82);
                                    }
                                    if (v8 >= 0x65 && (v5[12] & 0x10) != 0)
                                    {
                                      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4))
                                      {
                                        (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                                        if (CCLogStream::shouldLog())
                                        {
                                          uint64_t v28 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                                          CCLogStream::logInfo(v28, "[dk] %s@%d:Setting Beacon Drift feature flag\n", "processFwFeatures", 7434);
                                        }
                                      }
                                      AppleBCMWLANCore::featureFlagSetBit(v4, 87);
                                    }
                                  }
                                }
                              }
                            }
                          }
LABEL_270:
                          uint64_t v29 = 0;
                          if (IOParseBootArgNumber("wlan.debug.disablebcnmute", (char *)&v29 + 4, 4) && HIDWORD(v29))
                          {
                            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4))
                            {
                              (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                              if (CCLogStream::shouldLog())
                              {
                                uint64_t v25 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                                CCLogStream::logAlert(v25, "[dk] %s@%d:Beacon Mute Mitigation disabled\n", "processFwFeatures", 7442);
                              }
                            }
                            AppleBCMWLANCore::featureFlagClearBit(v4, 82);
                          }
                          if (IOParseBootArgNumber("wlan.debug.disablebcndrift", &v29, 4) && v29)
                          {
                            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4))
                            {
                              (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                              if (CCLogStream::shouldLog())
                              {
                                uint64_t v26 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                                CCLogStream::logAlert(v26, "[dk] %s@%d:Beacon Drift Mitigation disabled\n", "processFwFeatures", 7449);
                              }
                            }
                            AppleBCMWLANCore::featureFlagClearBit(v4, 87);
                          }
                          if (v8 >= 0x79 && (v5[15] & 1) != 0) {
                            AppleBCMWLANCore::featureFlagSetBit(v4, 101);
                          }
                          else {
                            AppleBCMWLANCore::featureFlagClearBit(v4, 101);
                          }
                          if (v8 >= 0x7A && (v5[15] & 2) != 0) {
                            AppleBCMWLANCore::featureFlagSetBit(v4, 102);
                          }
                          else {
                            AppleBCMWLANCore::featureFlagClearBit(v4, 102);
                          }
                          if (v8 < 0x83)
                          {
                            AppleBCMWLANCore::featureFlagClearBit(v4, 112);
                            if (v8 < 0x5E) {
                              goto LABEL_297;
                            }
                          }
                          else if ((v5[16] & 4) != 0)
                          {
                            AppleBCMWLANCore::featureFlagSetBit(v4, 112);
                          }
                          else
                          {
                            AppleBCMWLANCore::featureFlagClearBit(v4, 112);
                          }
                          if ((v5[11] & 0x20) != 0)
                          {
                            AppleBCMWLANCore::featureFlagSetBit(v4, 93);
                            AppleBCMWLANCore::featureFlagSetBit(v4, 120);
LABEL_299:
                            if (v8 < 0x85 || (v5[16] & 0x10) == 0) {
                              return 0;
                            }
                            this  = v4;
                            int v10 = 117;
                            goto LABEL_302;
                          }
LABEL_297:
                          AppleBCMWLANCore::featureFlagClearBit(v4, 93);
                          goto LABEL_299;
                        }
LABEL_225:
                        AppleBCMWLANCore::featureFlagClearBit(v4, 16);
                        AppleBCMWLANCore::featureFlagSetBit(v4, 11);
                        goto LABEL_227;
                      }
                    }
                    else if ((v5[13] & 0x20) != 0)
                    {
                      AppleBCMWLANCore::featureFlagSetBit(v4, 65);
                    }
                    if ((v5[12] & 2) != 0) {
                      AppleBCMWLANCore::featureFlagSetBit(v4, 105);
                    }
                    if (v8 >= 0x78)
                    {
                      if (v5[14] < 0) {
                        AppleBCMWLANCore::featureFlagSetBit(v4, 109);
                      }
                      if (v8 >= 0x7D)
                      {
                        if ((v5[15] & 0x10) != 0) {
                          AppleBCMWLANCore::featureFlagSetBit(v4, 107);
                        }
                        if (v8 >= 0x7E && (v5[15] & 0x20) != 0) {
                          AppleBCMWLANCore::featureFlagSetBit(v4, 108);
                        }
                      }
                    }
                    goto LABEL_205;
                  }
LABEL_182:
                  HIDWORD(v29)  = 0;
                  goto LABEL_183;
                }
                if ((v5[4] & 8) != 0) {
                  AppleBCMWLANCore::featureFlagSetBit(v4, 10);
                }
                if (v8 < 0x52)
                {
                  if (v8 < 0x32)
                  {
                    if (v8 < 0x30)
                    {
                      if (v8 < 0x2C)
                      {
                        if (v8 < 0x2A) {
                          goto LABEL_146;
                        }
                        goto LABEL_131;
                      }
LABEL_120:
                      if ((v5[5] & 8) != 0) {
                        AppleBCMWLANCore::featureFlagSetBit(v4, 38);
                      }
                      if (v8 < 0x3C) {
                        goto LABEL_131;
                      }
                      if ((v5[7] & 8) != 0) {
                        AppleBCMWLANCore::featureFlagSetBit(v4, 44);
                      }
                      if (v8 < 0x56)
                      {
                        if (v8 < 0x44)
                        {
LABEL_131:
                          if ((v5[5] & 2) != 0)
                          {
                            AppleBCMWLANCore::featureFlagSetBit(v4, 46);
                            AppleBCMWLANCore::featureFlagSetBit(v4, 70);
                            HIDWORD(v29)  = 1;
                            if (IOParseBootArgNumber("wlan.concurrentmode", (char *)&v29 + 4, 4) && !HIDWORD(v29)) {
                              AppleBCMWLANCore::featureFlagClearBit(v4, 70);
                            }
                          }
                          if (v8 >= 0x3E)
                          {
                            if ((v5[7] & 0x20) != 0) {
                              AppleBCMWLANCore::featureFlagSetBit(v4, 47);
                            }
                            if (v8 >= 0x75)
                            {
                              if ((v5[14] & 0x10) != 0) {
                                AppleBCMWLANCore::featureFlagSetBit(v4, 96);
                              }
                              if (v8 >= 0x77 && (v5[14] & 0x40) != 0) {
                                AppleBCMWLANCore::featureFlagSetBit(v4, 100);
                              }
                            }
                          }
                          goto LABEL_146;
                        }
                      }
                      else if ((v5[10] & 0x20) != 0)
                      {
                        AppleBCMWLANCore::featureFlagSetBit(v4, 118);
                      }
                      if ((v5[8] & 8) != 0) {
                        AppleBCMWLANCore::featureFlagSetBit(v4, 49);
                      }
                      goto LABEL_131;
                    }
LABEL_118:
                    if (v5[5] < 0) {
                      AppleBCMWLANCore::featureFlagSetBit(v4, 37);
                    }
                    goto LABEL_120;
                  }
                }
                else if ((v5[10] & 2) != 0)
                {
                  AppleBCMWLANCore::featureFlagSetBit(v4, 34);
                }
                if ((v5[6] & 2) != 0) {
                  AppleBCMWLANCore::featureFlagSetBit(v4, 36);
                }
                if (v8 >= 0x4F && (v5[9] & 0x40) != 0) {
                  AppleBCMWLANCore::featureFlagSetBit(v4, 61);
                }
                goto LABEL_118;
              }
              goto LABEL_96;
            }
LABEL_88:
            if ((v5[5] & 0x10) != 0) {
              AppleBCMWLANCore::featureFlagSetBit(v4, 30);
            }
            if (v8 >= 0x37)
            {
              if ((v5[6] & 0x40) != 0) {
                AppleBCMWLANCore::featureFlagSetBit(v4, 21);
              }
              goto LABEL_94;
            }
            if (v8 >= 0x2F)
            {
LABEL_94:
              if ((v5[5] & 0x40) != 0) {
                AppleBCMWLANCore::featureFlagSetBit(v4, 25);
              }
            }
LABEL_96:
            if ((v5[4] & 0x10) != 0) {
              AppleBCMWLANCore::featureFlagSetBit(v4, 26);
            }
            goto LABEL_98;
          }
        }
        else
        {
          if (v5[7]) {
            AppleBCMWLANCore::featureFlagSetBit(v4, 29);
          }
          if (v8 >= 0x51 && (v5[10] & 1) != 0) {
            AppleBCMWLANCore::featureFlagSetBit(v4, 62);
          }
        }
        if (v5[6]) {
          AppleBCMWLANCore::featureFlagSetBit(v4, 27);
        }
        goto LABEL_88;
      case 2050:
      case 2051:
      case 2052:
      case 2053:
      case 2056:
      case 2057:
      case 2058:
        return v7;
      case 2054:
        if ((a3 & 0x1FFFFFFFFFFFFFFFLL) == 0) {
          return 0;
        }
        char v13 = *v5;
        if (*v5)
        {
          AppleBCMWLANCore::featureFlagSetBit(this, 73);
          char v13 = *v5;
          if ((*v5 & 4) == 0)
          {
LABEL_42:
            if ((v13 & 2) == 0) {
              goto LABEL_43;
            }
            goto LABEL_74;
          }
        }
        else if ((*v5 & 4) == 0)
        {
          goto LABEL_42;
        }
        AppleBCMWLANCore::featureFlagSetBit(v4, 15);
        char v13 = *v5;
        if ((*v5 & 2) == 0)
        {
LABEL_43:
          if ((v13 & 8) == 0) {
            goto LABEL_44;
          }
          goto LABEL_75;
        }
LABEL_74:
        AppleBCMWLANCore::featureFlagSetBit(v4, 80);
        char v13 = *v5;
        if ((*v5 & 8) == 0)
        {
LABEL_44:
          if ((v13 & 0x10) == 0) {
            goto LABEL_45;
          }
LABEL_76:
          AppleBCMWLANCore::featureFlagSetBit(v4, 84);
          if ((*v5 & 0x40) == 0) {
            return 0;
          }
LABEL_77:
          this  = v4;
          int v10 = 111;
          goto LABEL_302;
        }
LABEL_75:
        AppleBCMWLANCore::featureFlagSetBit(v4, 85);
        char v13 = *v5;
        if ((*v5 & 0x10) == 0)
        {
LABEL_45:
          if ((v13 & 0x40) == 0) {
            return 0;
          }
          goto LABEL_77;
        }
        goto LABEL_76;
      case 2055:
        if ((a3 & 0x1FFFFFFFFFFFFFFFLL) == 0 || (*v5 & 1) == 0) {
          return 0;
        }
        int v10 = 32;
        goto LABEL_302;
      case 2059:
        if ((a3 & 0x1FFFFFFFFFFFFFFFLL) == 0 || (*v5 & 1) == 0) {
          return 0;
        }
        int v10 = 31;
        goto LABEL_302;
      case 2060:
        if ((a3 & 0x1FFFFFFFFFFFFFFFLL) == 0 || (*v5 & 2) == 0) {
          return 0;
        }
        int v10 = 115;
        goto LABEL_302;
      case 2061:
        if ((a3 & 0x1FFFFFFFFFFFFFFFLL) == 0) {
          return 0;
        }
        char v14 = *v5;
        if ((*v5 & 4) != 0)
        {
          AppleBCMWLANCore::featureFlagSetBit(this, 75);
          char v14 = *v5;
        }
        if ((v14 & 8) == 0) {
          return 0;
        }
        this  = v4;
        int v10 = 106;
        goto LABEL_302;
      default:
        if (a4 != 1026) {
          goto LABEL_36;
        }
        if ((a3 & 0x1FFFFFFFFFFFFFFFLL) == 0) {
          return 0;
        }
        char v11 = *v5;
        if (*v5)
        {
          AppleBCMWLANCore::featureFlagSetBit(this, 69);
          char v11 = *v5;
          if ((*v5 & 2) == 0)
          {
LABEL_27:
            if ((v11 & 4) == 0) {
              goto LABEL_28;
            }
            goto LABEL_67;
          }
        }
        else if ((*v5 & 2) == 0)
        {
          goto LABEL_27;
        }
        AppleBCMWLANCore::featureFlagSetBit(v4, 89);
        char v11 = *v5;
        if ((*v5 & 4) == 0)
        {
LABEL_28:
          if ((v11 & 8) == 0) {
            goto LABEL_29;
          }
          goto LABEL_68;
        }
LABEL_67:
        AppleBCMWLANCore::featureFlagSetBit(v4, 90);
        char v11 = *v5;
        if ((*v5 & 8) == 0)
        {
LABEL_29:
          if ((v11 & 0x10) == 0) {
            goto LABEL_30;
          }
          goto LABEL_69;
        }
LABEL_68:
        AppleBCMWLANCore::featureFlagSetBit(v4, 99);
        char v11 = *v5;
        if ((*v5 & 0x10) == 0)
        {
LABEL_30:
          if ((v11 & 0x20) == 0) {
            goto LABEL_31;
          }
          goto LABEL_70;
        }
LABEL_69:
        AppleBCMWLANCore::featureFlagSetBit(v4, 103);
        char v11 = *v5;
        if ((*v5 & 0x20) == 0)
        {
LABEL_31:
          if ((v11 & 0x80) == 0) {
            return 0;
          }
          goto LABEL_71;
        }
LABEL_70:
        AppleBCMWLANCore::featureFlagSetBit(v4, 104);
        if ((*v5 & 0x80) == 0) {
          return 0;
        }
LABEL_71:
        this  = v4;
        int v10 = 122;
        goto LABEL_302;
    }
  }
  if (a4 == 1)
  {
    if ((a3 & 0x1FFFFFFFFFFFFFFFLL) == 0) {
      return 0;
    }
    if ((*v5 & 1) == 0) {
      goto LABEL_35;
    }
    AppleBCMWLANCore::featureFlagSetBit(this, 86);
    *(void *)(*((void *)v4 + 9) + 212)  = 0;
    HP2P_CTRL  = AppleBCMWLANCore::getHP2P_CTRL(v4, 7, (unsigned int *)(*((void *)v4 + 9) + 216));
    if (HP2P_CTRL)
    {
      uint64_t v7 = HP2P_CTRL;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
        if (CCLogStream::shouldLog())
        {
          uint64_t v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
          uint64_t v17 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)v4 + 112))(v4, v7);
          CCLogStream::logAlert(v16, "[dk] %s@%d:Error:  getting HP2P Capability %s\n", "processFwFeatures", 7148, v17);
        }
      }
      goto LABEL_85;
    }
    uint64_t v18 = *((void *)v4 + 9);
    int v19 = *(_DWORD *)(v18 + 216);
    if ((v19 & 8) != 0)
    {
      *(unsigned char *)(v18 + 220)  = 1;
      uint64_t v18 = *((void *)v4 + 9);
      int v19 = *(_DWORD *)(v18 + 216);
    }
    if ((v19 & 4) != 0)
    {
      uint64_t v7 = 0;
      *(unsigned char *)(v18 + 221)  = 1;
    }
    else
    {
LABEL_35:
      uint64_t v7 = 0;
    }
LABEL_85:
    if ((*v5 & 2) != 0) {
      AppleBCMWLANCore::featureFlagSetBit(v4, 91);
    }
    return v7;
  }
  if (a4 != 2)
  {
    if (a4 != 1025)
    {
LABEL_36:
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
        if (CCLogStream::shouldLog())
        {
          int v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
          CCLogStream::logAlert(v12, "[dk] %s@%d:Should not come here. tlvtype  = %lu \n", "processFwFeatures", 7554, a4);
        }
      }
      return 0;
    }
    if ((a3 & 0x1FFFFFFFFFFFFFFFLL) != 0 && (*v5 & 8) != 0)
    {
      int v10 = 74;
LABEL_302:
      AppleBCMWLANCore::featureFlagSetBit(this, v10);
    }
    return 0;
  }
  return v7;
}

uint64_t *IO80211TLVIterator<IO80211TLVHeader<unsigned short,unsigned short,0ul,2ul,4ul>>::operator++(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 < 4
    || !*v2
    || (unint64_t v4 = *(unsigned __int16 *)(*v2 + 2) + (-*(unsigned __int16 *)(*v2 + 2) & 3) + 4, v4 > v3))
  {
    unint64_t v4 = 0;
  }
  uint64_t result = IO80211BufferCursor::_crop((uint64_t *)(a1 + 8), v4, 0xFFFFFFFFFFFFFFFFLL, v7);
  if (v2 == v7)
  {
    unint64_t v6 = *(void *)(a1 + 16);
  }
  else
  {
    unint64_t v6 = v7[1];
    *(void *)(a1 + 8)  = v7[0];
    *(void *)(a1 + 16)  = v6;
  }
  if (v6 < 4 || !*v2 || *(unsigned __int16 *)(*v2 + 2) + (-*(unsigned __int16 *)(*v2 + 2) & 3uLL) + 4 > v6)
  {
    *uint64_t v2 = 0;
    v2[1]  = 0;
  }
  return result;
}

uint64_t AppleBCMWLANCore::infraDpEnable(uint64_t this, unint64_t *a2)
{
  uint64_t v2 = *(void *)(this + 72);
  if (*(void *)(v2 + 5512) && *(_DWORD *)(v2 + 35512) != 4)
  {
    uint64_t v3 = this;
    AppleBCMWLANUtil::get_mach_continuous_nanoseconds(0, a2);
    this  = AppleBCMWLANIOReportingCore::reportWakeToInterfaceEnableTime(*(AppleBCMWLANIOReportingCore **)(*(void *)(v3 + 72) + 5512));
    uint64_t v2 = *(void *)(v3 + 72);
  }
  *(_DWORD *)(v2 + 35512)  = 4;
  return this;
}

uint64_t AppleBCMWLANCore::processChipCaps(IOService *this)
{
  int v14 = 0;
  BOOL v2 = IOParseBootArgNumber("wlan.fwcap", &v14, 4);
  int v3 = v14;
  *(_OWORD *)&this[1].OSObject::OSObjectInterface::__vftable[1104].free  = 0u;
  AppleBCMWLANCore::adjustFeatureFlags((AppleBCMWLANCore *)this);
  if (!v2 || v3 == 0)
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        char v13 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v13, "[dk] %s@%d:About to issue capext.... \n", "processChipCaps", 7583);
      }
    }
    if (!AppleBCMWLANCore::IssueFwCapExt((AppleBCMWLANCore *)this)) {
      goto LABEL_20;
    }
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v5, "[dk] %s@%d:FW capext not supported. Proceeding to default cap.... \n", "processChipCaps", 7586);
      }
    }
  }
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      int v12 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logAlert(v12, "[dk] %s@%d:About to issue cap.... \n", "processChipCaps", 7592);
    }
  }
  uint64_t v6 = AppleBCMWLANCore::IssueFwCap(this);
  if (v6)
  {
    uint64_t v7 = v6;
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v8 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v8, "[dk] %s@%d:FW cap returning error... can't proceed...  \n", "processChipCaps", 7595);
      }
    }
    return v7;
  }
LABEL_20:
  int v9 = (*(uint64_t (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[337].free
                                                                                + 368))(this[1].OSObject::OSObjectInterface::__vftable[337].free);
  if ((v9 - 4387) > 0xC || ((1 << (v9 - 35)) & 0x1003) == 0) {
    AppleBCMWLANCore::featureFlagClearBit((AppleBCMWLANCore *)this, 88);
  }
  else {
    AppleBCMWLANCore::featureFlagSetBit((AppleBCMWLANCore *)this, 88);
  }
  return 0;
}

uint64_t AppleBCMWLANCore::adjustFeatureFlags(AppleBCMWLANCore *this)
{
  unint64_t v7 = 0;
  unsigned int v6 = 0;
  if (IOParseBootArgNumber("bcom.feature.flags", &v7, 8))
  {
    IOLog(" Enabling features 0x%llX\n", v7);
    for (uint64_t i = 0; i != 64; ++i)
    {
      if ((v7 >> i)) {
        AppleBCMWLANCore::featureFlagSetBit(this, i);
      }
    }
  }
  if (IOParseBootArgNumber("bcom.feature.wow", &v6, 4))
  {
    if (v6 == 1)
    {
      AppleBCMWLANCore::featureFlagClearBit(this, -2);
    }
    else if (v6)
    {
      IOLog(" bcom.feature.wow=%lX is invalid, it can only be 1 or 0\n", v6);
    }
    else
    {
      AppleBCMWLANCore::featureFlagSetBit(this, 1);
    }
  }
  DTParameter32  = AppleBCMWLANUtil::getDTParameter32(*(IOService **)(*((void *)this + 9) + 5400), (IOService *)"IOService", "wlan.ignore.mcast", 0);
  IOParseBootArgNumber("bcom.feature.pmmcast", &DTParameter32, 4);
  if (DTParameter32)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logNotice(v4, "[dk] %s@%d:Enabling features: Power manage mcast/bcast\n", "adjustFeatureFlags", 35484);
        }
      }
    }
    AppleBCMWLANCore::featureFlagSetBit(this, 43);
  }
  return 1;
}

uint64_t AppleBCMWLANCore::downloadBlob(AppleBCMWLANCore *this, const char *a2, const char *a3, unint64_t a4)
{
  uint64_t v8 = IOMallocZeroData();
  if (!v8) {
    return 3758097085;
  }
  uint64_t v9 = v8;
  uint64_t v10 = 0;
  char v11 = (void *)(v8 + 12);
  int v12 = 2;
  do
  {
    if (a4 >= 0x580) {
      size_t v13 = 1408;
    }
    else {
      size_t v13 = a4;
    }
    memcpy(v11, &a3[v10], v13);
    a4 -= v13;
    if (!a4) {
      v12 |= 4u;
    }
    *(_WORD *)uint64_t v9 = v12 | 0x1000;
    *(_WORD *)(v9 + 2)  = 2;
    *(_DWORD *)(v9 + 4)  = v13;
    *(_DWORD *)(v9 + 8)  = 0;
    int v14 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    v18[0]  = v9;
    v18[1]  = v13 - (((_BYTE)v13 + 4) & 7) + 20;
    uint64_t v15 = AppleBCMWLANCommander::runIOVarSet(v14, (uint64_t)a2, (uint64_t)v18, 0, 0);
    uint64_t v16 = v15;
    if ((int)a4 < 1) {
      break;
    }
    v10 += v13;
    v12 &= ~2u;
  }
  while (!v15);
  IOFreeData();
  return v16;
}

uint64_t AppleBCMWLANCore::downloadBlobIOVBatch(AppleBCMWLANCore *this, const char *a2, const char *a3, unint64_t a4)
{
  uint64_t v7 = IOMallocZeroData();
  if (!v7) {
    return 3758097085;
  }
  uint64_t v8 = v7;
  uint64_t v9 = 0;
  uint64_t v10 = (void *)(v7 + 16);
  int v11 = 2;
  do
  {
    if (a4 >= 0x580) {
      size_t v12 = 1408;
    }
    else {
      size_t v12 = a4;
    }
    memcpy(v10, &a3[v9], v12);
    a4 -= v12;
    if (!a4) {
      v11 |= 4u;
    }
    *(_WORD *)uint64_t v8 = 0x8000;
    *(unsigned char *)(v8 + 2)  = 1;
    *(_WORD *)(v8 + 4)  = 1;
    *(_DWORD *)(v8 + 8)  = 1;
    *(_WORD *)(v8 + 6)  = v12 + 8;
    *(_WORD *)(v8 + 12)  = v11 | 0x1000;
    *(_WORD *)(v8 + 14)  = v12;
    size_t v13 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    if ((((_WORD)v12 + 24) & 0xFF8) != 0) {
      uint64_t v14 = v8;
    }
    else {
      uint64_t v14 = 0;
    }
    v19[0]  = v14;
    v19[1]  = ((_WORD)v12 + 24) & 0xFF8;
    uint64_t v15 = AppleBCMWLANCommander::runIOVarSet(v13, (uint64_t)a2, (uint64_t)v19, 0, 0);
    uint64_t v16 = v15;
    if ((int)a4 < 1) {
      break;
    }
    v9 += v12;
    v11 &= ~2u;
  }
  while (!v15);
  IOFreeData();
  return v16;
}

uint64_t AppleBCMWLANCore::queryPlatcfgCommandVersion(AppleBCMWLANCore *this, unsigned __int16 *a2)
{
  memset(v15, 170, sizeof(v15));
  uint64_t v4 = IOMallocZeroData();
  uint64_t v5 = IOMallocZeroData();
  uint64_t v6 = v5;
  if (v4)
  {
    if (v5)
    {
      *(_DWORD *)uint64_t v4 = 98304;
      *(void *)(v4 + 4)  = 0x100040000;
      void v15[2] = v4;
      _OWORD v15[3] = 12;
      v15[0]  = v5;
      v15[1]  = 0x40000000400;
      uint64_t v7 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"platcfg", (uint64_t)&v15[2], (uint64_t)v15, 0);
      if (v7)
      {
        uint64_t v8 = v7;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v10, "[dk] %s@%d:paltcfg get iovar failed\n", "queryPlatcfgCommandVersion", 7763);
          }
        }
      }
      else if (*(unsigned __int16 *)(v6 + 6) <= 7u)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v14, "[dk] %s@%d:Unexpected platcfg subcmd resp length\n", "queryPlatcfgCommandVersion", 7771);
          }
        }
        uint64_t v8 = 3758096385;
      }
      else
      {
        *a2  = *(_WORD *)(v6 + 12);
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            int v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logNotice(v11, "[dk] %s@%d:Platcfg command version %u\n", "queryPlatcfgCommandVersion", 7775, *a2);
          }
        }
        uint64_t v8 = 0;
      }
      IOFreeData();
    }
    else
    {
      uint64_t v8 = 3758097085;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          size_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v13, "[dk] %s@%d:platcfg cmd resp alloc fail\n", "queryPlatcfgCommandVersion", 7743);
        }
      }
    }
LABEL_18:
    IOFreeData();
    return v8;
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      size_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v12, "[dk] %s@%d:platcfg cmd alloc fail\n", "queryPlatcfgCommandVersion", 7742);
    }
  }
  uint64_t v8 = 3758097085;
  if (v6) {
    goto LABEL_18;
  }
  return v8;
}

uint64_t AppleBCMWLANCore::retrievePlatcfgStatus(AppleBCMWLANCore *this)
{
  memset(v23, 170, sizeof(v23));
  uint64_t v2 = IOMallocZeroData();
  uint64_t v3 = IOMallocZeroData();
  uint64_t v4 = v3;
  if (v2)
  {
    if (!v3)
    {
      uint64_t v10 = 3758097085;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v15, "[dk] %s@%d:platcfg cmd resp alloc fail\n", "retrievePlatcfgStatus", 7799);
        }
      }
      goto LABEL_45;
    }
    *(_DWORD *)uint64_t v2 = 98304;
    *(void *)(v2 + 4)  = 0x100040002;
    void v23[2] = v2;
    v23[3]  = 12;
    v23[0]  = v3;
    v23[1]  = 0x40000000400;
    uint64_t v5 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"platcfg", (uint64_t)&v23[2], (uint64_t)v23, 0);
    if (v5)
    {
      uint64_t v10 = v5;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v16, "[dk] %s@%d:paltcfg get iovar failed\n", "retrievePlatcfgStatus", 7819);
        }
      }
      goto LABEL_44;
    }
    unsigned int v6 = *(unsigned __int16 *)(v4 + 6);
    if (v6 <= 0xB)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v17, "[dk] %s@%d:Unexpected platcfg subcmd resp length\n");
        }
      }
    }
    else
    {
      int v7 = *(unsigned __int8 *)(v4 + 12);
      if ((v7 - 3) <= 0xFFFFFFFD)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v18, "[dk] %s@%d:invalid platcfg download status count\n");
          }
        }
      }
      else
      {
        unsigned int v8 = 8 * v7 + 12;
        uint64_t v9 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (v8 <= v6)
        {
          if (v9)
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v20 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v20, "[dk] %s@%d:platcfg blob download status: segment count=%u blob download status=%u\n", "retrievePlatcfgStatus", 7837, *(unsigned __int8 *)(v4 + 12), *(_DWORD *)(v4 + 16));
            }
          }
          if (*(_DWORD *)(v4 + 16)) {
            uint64_t v10 = 3758097084;
          }
          else {
            uint64_t v10 = 0;
          }
          if (*(unsigned char *)(v4 + 12))
          {
            unsigned int v11 = 0;
            size_t v12 = (_DWORD *)(v4 + 24);
            do
            {
              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
              {
                (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                  CCLogStream::logAlert(v14, "[dk] %s@%d:platcfg blob segment download status: type=%u status=%u\n", "retrievePlatcfgStatus", 7843, *((unsigned __int8 *)v12 - 4), *v12);
                }
              }
              int v13 = *v12;
              v12 += 2;
              if (v13) {
                uint64_t v10 = 3758097084;
              }
              else {
                uint64_t v10 = v10;
              }
              ++v11;
            }
            while (v11 < *(unsigned __int8 *)(v4 + 12));
          }
          goto LABEL_44;
        }
        if (v9)
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            int v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v22, "[dk] %s@%d:Unexpected platcfg download status resp length\n");
          }
        }
      }
    }
    uint64_t v10 = 3758096385;
LABEL_44:
    IOFreeData();
LABEL_45:
    IOFreeData();
    return v10;
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v21 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v21, "[dk] %s@%d:platcfg cmd alloc fail\n", "retrievePlatcfgStatus", 7798);
    }
  }
  uint64_t v10 = 3758097085;
  if (v4) {
    goto LABEL_45;
  }
  return v10;
}

uint64_t AppleBCMWLANCore::retrievePlatcfgBlobVersion(AppleBCMWLANCore *this)
{
  memset(v40, 170, sizeof(v40));
  uint64_t v2 = IOMallocZeroData();
  uint64_t v3 = IOMallocZeroData();
  uint64_t v4 = v3;
  if (!v2)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
      && ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
          CCLogStream::shouldLog()))
    {
      uint64_t v29 = 3758097085;
      uint64_t v37 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v37, "[dk] %s@%d:platcfg cmd alloc fail\n", "retrievePlatcfgBlobVersion", 7873);
    }
    else
    {
      uint64_t v29 = 3758097085;
    }
    if (v4) {
      goto LABEL_51;
    }
    return v29;
  }
  if (!v3)
  {
    uint64_t v29 = 3758097085;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v38 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v38, "[dk] %s@%d:platcfg cmd resp alloc fail\n", "retrievePlatcfgBlobVersion", 7874);
      }
    }
    goto LABEL_51;
  }
  *(_DWORD *)uint64_t v2 = 98304;
  *(void *)(v2 + 4)  = 0x100040005;
  v40[2]  = v2;
  v40[3]  = 12;
  v40[0]  = v3;
  v40[1]  = 0x40000000400;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"platcfg", (uint64_t)&v40[2], (uint64_t)v40, 0);
  if (v5)
  {
    uint64_t v29 = v5;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v33 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v33, "[dk] %s@%d:paltcfg get iovar failed\n", "retrievePlatcfgBlobVersion", 7894);
      }
    }
    goto LABEL_47;
  }
  uint64_t v6 = *(unsigned __int16 *)(v4 + 6);
  if (v6 <= 0xD)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v34 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v34, "[dk] %s@%d:Unexpected platcfg subcmd resp length\n");
      }
    }
    goto LABEL_56;
  }
  int v7 = *(unsigned __int8 *)(v4 + 14);
  if ((v7 - 1) >= 2)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v35 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v35, "[dk] %s@%d:invalid platcfg blob version count\n");
      }
    }
    goto LABEL_56;
  }
  if (4 * v7 + 8 > v6)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v36 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v36, "[dk] %s@%d:Unexpected platcfg blob version resp length\n");
      }
    }
    goto LABEL_56;
  }
  int v8 = 0;
  unint64_t v9 = v6 - 8;
  uint64_t v10 = (unsigned __int16 *)(v4 + 16);
  while (1)
  {
    unint64_t v11 = v9 - 4;
    if (v9 - 4 < v10[1])
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          long long v31 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v31, "[dk] %s@%d:remain length is short than XTLV length\n");
        }
      }
      goto LABEL_56;
    }
    if (*v10 != 3)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          BOOL v27 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v27, "[dk] %s@%d:Unknown blob version xtlv id=%u len=%u\n", "retrievePlatcfgBlobVersion", 7949, *v10, v10[1]);
        }
      }
      goto LABEL_37;
    }
    uint64_t v12 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (v11 <= 4)
    {
      if (v12)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v32 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v32, "[dk] %s@%d:not enough remain length\n");
        }
      }
      goto LABEL_56;
    }
    if (v12)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v28 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logNotice(v28, "[dk] %s@%d:Blob segment: 6GHz Antenna Gain, bin format version: %u\n", "retrievePlatcfgBlobVersion", 7924, *((unsigned __int8 *)v10 + 5));
      }
    }
    if (*((unsigned char *)v10 + 6))
    {
      unint64_t v13 = v9 - 8;
      if (v9 - 8 >= 5) {
        break;
      }
    }
LABEL_37:
    uint64_t v25 = v10[1];
    unint64_t v9 = v11 - v25;
    uint64_t v10 = (unsigned __int16 *)((char *)v10 + v25 + 4);
    if (++v8 >= *(unsigned __int8 *)(v4 + 14) || v9 <= 4)
    {
      uint64_t v29 = 0;
      goto LABEL_47;
    }
  }
  uint64_t v14 = v10 + 4;
  unsigned int v15 = 1;
  while (1)
  {
    unint64_t v16 = v13 - 4;
    unint64_t v17 = v14[1];
    if (v13 - 4 < v17) {
      break;
    }
    int v18 = *v14;
    *((unsigned char *)v14 + v17 + AppleBCMWLANCommandMonitor::free(this - 3) = 0;
    if (v18 == 1)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v20 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logNotice(v20, "[dk] %s@%d:Creation: %s\n");
        }
      }
    }
    else if (v18)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v24 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v24, "[dk] %s@%d:Unknown segment meta data xtlv ID %u len %u\n", "retrievePlatcfgBlobVersion", 7941, *v14, v14[1]);
        }
      }
    }
    else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logNotice(v19, "[dk] %s@%d:Title: %s\n");
      }
    }
    uint64_t v21 = v14[1];
    unint64_t v13 = v16 - v21;
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v21 + 4);
    if (v15++ >= *((unsigned __int8 *)v10 + 6) || v13 <= 4) {
      goto LABEL_37;
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v39 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v39, "[dk] %s@%d:remain length is short than xtlv length\n");
    }
  }
LABEL_56:
  uint64_t v29 = 3758096385;
LABEL_47:
  IOFreeData();
LABEL_51:
  IOFreeData();
  return v29;
}

uint64_t AppleBCMWLANCore::retrievePlatcfgXTLVDumpData(AppleBCMWLANCore *this)
{
  memset(v28, 170, sizeof(v28));
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  *(_OWORD *)__dst  = 0u;
  long long v32 = 0u;
  *(_OWORD *)__str  = 0u;
  long long v30 = 0u;
  uint64_t v2 = IOMallocZeroData();
  uint64_t v3 = IOMallocZeroData();
  uint64_t v4 = v3;
  if (v2)
  {
    if (!v3)
    {
      uint64_t v16 = 3758097085;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          int v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v19, "[dk] %s@%d:platcfg cmd resp alloc fail\n", "retrievePlatcfgXTLVDumpData", 7983);
        }
      }
      goto LABEL_34;
    }
    *(_DWORD *)uint64_t v2 = 98304;
    *(void *)(v2 + 4)  = 0x100040006;
    _OWORD v28[2] = v2;
    v28[3]  = 12;
    v28[0]  = v3;
    v28[1]  = 0x7D0000007D0;
    uint64_t v5 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"platcfg", (uint64_t)&v28[2], (uint64_t)v28, 0);
    if (v5)
    {
      uint64_t v16 = v5;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          BOOL v23 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v23, "[dk] %s@%d:paltcfg get iovar failed\n", "retrievePlatcfgXTLVDumpData", 8003);
        }
      }
      goto LABEL_33;
    }
    unint64_t v6 = *(unsigned __int16 *)(v4 + 6);
    if (v6 <= 7)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v24 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v24, "[dk] %s@%d:Unexpected platcfg subcmd resp length\n");
        }
      }
    }
    else if (*(unsigned __int8 *)(v4 + 14) - 1 >= 2)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v25 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v25, "[dk] %s@%d:invalid number of segment dumps\n");
        }
      }
    }
    else
    {
      unint64_t v7 = v6 - 8;
      if (v7 < 5)
      {
        uint64_t v16 = 0;
LABEL_33:
        IOFreeData();
        goto LABEL_34;
      }
      int v8 = 0;
      unint64_t v9 = (unsigned __int16 *)(v4 + 16);
      while (1)
      {
        unint64_t v10 = v7 - 4;
        unint64_t v11 = v9[1];
        if (v10 < v11) {
          break;
        }
        unsigned int v12 = *v9;
        if (v12 >= 0x29)
        {
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              int v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v22, "[dk] %s@%d:invalid dump data XTLV\n");
            }
          }
          goto LABEL_45;
        }
        if (v12 == 40)
        {
          if (!*((unsigned char *)v9 + 4) || 12 * (unint64_t)*((unsigned __int8 *)v9 + 4) + 4 > v11)
          {
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (CCLogStream::shouldLog())
              {
                BOOL v27 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                CCLogStream::logAlert(v27, "[dk] %s@%d:invalid dump ant gain xtlv\n");
              }
            }
            goto LABEL_45;
          }
          unsigned int v13 = 0;
          uint64_t v14 = v9 + 5;
          do
          {
            long long v37 = 0u;
            long long v38 = 0u;
            long long v35 = 0u;
            long long v36 = 0u;
            long long v33 = 0u;
            long long v34 = 0u;
            *(_OWORD *)__dst  = 0u;
            long long v32 = 0u;
            snprintf(__str, 0x20uLL, "%d ", (__int16)v14[3]);
            strlcat(__dst, __str, 0x80uLL);
            snprintf(__str, 0x20uLL, "%d ", (__int16)v14[4]);
            strlcat(__dst, __str, 0x80uLL);
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (CCLogStream::shouldLog())
              {
                unsigned int v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                CCLogStream::logNotice(v15, "[dk] %s@%d:%u - %u Mhz: Correlated signals: %d Uncorrelated signals: %d Individual AntGains: %s\n", "retrievePlatcfgXTLVDumpData", 8034, *(v14 - 1), *v14, (__int16)v14[1], (__int16)v14[2], __dst);
              }
            }
            ++v13;
            v14 += 6;
          }
          while (v13 < *((unsigned __int8 *)v9 + 4));
        }
        else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            int v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v18, "[dk] %s@%d:Unknown dump data xtlv id %u len %u\n", "retrievePlatcfgXTLVDumpData", 8038, *v9, v9[1]);
          }
        }
        uint64_t v16 = 0;
        if (++v8 < *(unsigned __int8 *)(v4 + 14))
        {
          uint64_t v17 = v9[1];
          unint64_t v7 = v10 - v17;
          unint64_t v9 = (unsigned __int16 *)((char *)v9 + v17 + 4);
          if (v10 - v17 > 4) {
            continue;
          }
        }
        goto LABEL_33;
      }
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v21 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v21, "[dk] %s@%d:segment dump xtlv length is too big\n");
        }
      }
    }
LABEL_45:
    uint64_t v16 = 3758096385;
    goto LABEL_33;
  }
  uint64_t v16 = 3758097085;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v26 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v26, "[dk] %s@%d:platcfg cmd alloc fail\n", "retrievePlatcfgXTLVDumpData", 7982);
      if (!v4) {
        return v16;
      }
      goto LABEL_34;
    }
  }
  if (v4) {
LABEL_34:
  }
    IOFreeData();
  return v16;
}

uint64_t AppleBCMWLANCore::retrieveRegTableStatus(AppleBCMWLANCore *this)
{
  int v8 = -1;
  v7[0]  = &v8;
  v7[1]  = 0x400040004;
  uint64_t v2 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"clmload_status", (uint64_t)&kNoTxPayload, (uint64_t)v7, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v5 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v3);
        CCLogStream::logCrit(v4, "[dk] %s@%d: clmload_status failed, error %s\n", "retrieveRegTableStatus", 8056, v5);
      }
    }
  }
  else if (v8)
  {
    return v8 | 0xE3FF8C00;
  }
  else
  {
    return 0;
  }
  return v3;
}

uint64_t AppleBCMWLANCore::retrieveTxCapTableStatus(AppleBCMWLANCore *this)
{
  int v8 = -1;
  v7[0]  = &v8;
  v7[1]  = 0x400040004;
  uint64_t v2 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"txcapload_status", (uint64_t)&kNoTxPayload, (uint64_t)v7, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v5 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v3);
        CCLogStream::logCrit(v4, "[dk] %s@%d: txcapload_status failed, error %s\n", "retrieveTxCapTableStatus", 8069, v5);
      }
    }
  }
  else if (v8)
  {
    return v8 | 0xE3FF8C00;
  }
  else
  {
    return 0;
  }
  return v3;
}

uint64_t AppleBCMWLANCore::retrieveCalMSFStatus(IOService *this, int a2)
{
  int v33 = -1;
  v32[0]  = &v33;
  v32[1]  = 0x400040004;
  uint64_t v4 = AppleBCMWLANCommander::runIOVarGet((AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free, (uint64_t)"calload_status", (uint64_t)&kNoTxPayload, (uint64_t)v32, 0);
  uint64_t v5 = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
  if (v4)
  {
    if (v5)
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v6 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        unint64_t v7 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v4);
        CCLogStream::logCrit(v6, "[dk] %s@%d:calload_status failed, error %s\n", "retrieveCalMSFStatus", 8094, v7);
      }
    }
    return v4;
  }
  if (v5)
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      int v22 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logNoticeIf(v22, 0x80uLL, "[dk] %s@%d:calload_status return %ld\n", "retrieveCalMSFStatus", 8098, v33);
    }
  }
  *(void *)__str  = 0xAAAAAAAAAAAAAAAALL;
  snprintf(__str, 8uLL, "%d", v33);
  OSStringPtr v8 = OSString::withCString(__str);
  setPropertyHelper(this, "calload_status", v8);
  if (v8) {
    ((void (*)(OSStringPtr))v8->release)(v8);
  }
  int v9 = v33;
  if (v33) {
    uint64_t v4 = v33 - 469791744;
  }
  else {
    uint64_t v4 = 0;
  }
  int v31 = 1;
  IOParseBootArgNumber("wlan.debug.checkmsf", &v31, 4);
  uint64_t v30 = 0;
  if (!IOParseBootArgNumber("wlan.factory", &v30, 8))
  {
    if (!a2) {
      goto LABEL_16;
    }
LABEL_19:
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v24 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logNoticeIf(v24, 0x80uLL, "[dk] %s@%d: Force skipping MSF checking\n", "retrieveCalMSFStatus", 8116);
      }
    }
    int v31 = 0;
    goto LABEL_23;
  }
  if (v30 & 8) != 0 || (a2) {
    goto LABEL_19;
  }
LABEL_16:
  if (!v31)
  {
LABEL_23:
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        BOOL v23 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v23, "[dk] %s@%d:Skip MSF SN check\n", "retrieveCalMSFStatus", 8122);
      }
    }
  }
  if (v31 && !v9)
  {
    uint64_t v29 = 0;
    if (checkAcquireDataPropertyNotEmpty((IOService *)this[1].OSObject::OSObjectInterface::__vftable[337].free, "wifi-module-sn", &v29, 0, 1uLL, "IOService"))
    {
      uint64_t BytesNoCopy = OSData::getBytesNoCopy(v29);
      __int16 v11 = BytesNoCopy[2];
      int v35 = *(_DWORD *)BytesNoCopy;
      __int16 v36 = v11;
      free  = (AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free;
      BOOL v27 = &v35;
      uint64_t v28 = 6;
      uint64_t v13 = AppleBCMWLANCommander::runIOVarSet(free, (uint64_t)"calload_chkver", (uint64_t)&v27, 0, 0);
      uint64_t v4 = v13;
      if (v13 != -469794537 && v13)
      {
        int v14 = (v35 >> 4) + 55;
        if (v35 < 0xA0u) {
          LOBYTE(v14)  = (v35 >> 4) | 0x30;
        }
        v34[0]  = v14;
        char v15 = (v35 & 0xF) + 55;
        if ((v35 & 0xFu) < 0xA) {
          char v15 = v35 & 0xF | 0x30;
        }
        v34[1]  = v15;
        int v16 = (BYTE1(v35) >> 4) + 55;
        if (BYTE1(v35) < 0xA0u) {
          LOBYTE(v16)  = (BYTE1(v35) >> 4) | 0x30;
        }
        v34[2]  = v16;
        char v17 = (BYTE1(v35) & 0xF) + 55;
        if ((BYTE1(v35) & 0xFu) < 0xA) {
          char v17 = BYTE1(v35) & 0xF | 0x30;
        }
        v34[3]  = v17;
        int v18 = (BYTE2(v35) >> 4) + 55;
        if (BYTE2(v35) < 0xA0u) {
          LOBYTE(v18)  = (BYTE2(v35) >> 4) | 0x30;
        }
        v34[4]  = v18;
        char v19 = (BYTE2(v35) & 0xF) + 55;
        if ((BYTE2(v35) & 0xFu) < 0xA) {
          char v19 = BYTE2(v35) & 0xF | 0x30;
        }
        v34[5]  = v19;
        uint64_t v20 = (AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free;
        BOOL v27 = (int *)v34;
        uint64_t v28 = 6;
        uint64_t v4 = AppleBCMWLANCommander::runIOVarSet(v20, (uint64_t)"calload_chkver", (uint64_t)&v27, 0, 0);
        if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
        {
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v25 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            uint64_t v26 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v4);
            CCLogStream::logNotice(v25, "[dk] %s@%d:apply SN workaround, returned %x %s\n", "retrieveCalMSFStatus", 8145, v4, v26);
          }
        }
        if (v4 == -469794559) {
          AppleBCMWLANCore::setBootUnrecoverable(this, 3825175653);
        }
      }
      if (v29) {
        ((void (*)(OSData *))v29->release)(v29);
      }
    }
    else
    {
      return 3825175654;
    }
  }
  return v4;
}

void *AppleBCMWLANCore::removeFirmwareLoader(void *this)
{
  if (*(void *)(this[9] + 14184))
  {
    uint64_t v1 = this;
    if ((*(uint64_t (**)(void *))(*this + 1848))(this))
    {
      (*(void (**)(void *))(*v1 + 1848))(v1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v2 = (CCLogStream *)(*(uint64_t (**)(void *))(*v1 + 1848))(v1);
        CCLogStream::logAlert(v2, "[dk] %s@%d:Terminating/releasing request of firmware loading\n", "removeFirmwareLoader", 53867);
      }
    }
    IOService::Terminate(*(IOService **)(v1[9] + 14184), 0, 0);
    this  = *(void **)(v1[9] + 14184);
    if (this)
    {
      this  = (void *)(*(uint64_t (**)(void *))(*this + 16))(this);
      *(void *)(v1[9] + 14184)  = 0;
    }
  }
  return this;
}

uint64_t AppleBCMWLANCore::logRegTableVersion(IOService *this)
{
  uint64_t v2 = IOMallocZeroData();
  if (!v2) {
    return 3758097085;
  }
  uint64_t v3 = (const char *)v2;
  v11[0]  = v2;
  v11[1]  = 0x200000A0200;
  uint64_t v4 = AppleBCMWLANCommander::runIOVarGet((AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free, (uint64_t)"clmver", (uint64_t)&kNoTxPayload, (uint64_t)v11, 0);
  uint64_t v5 = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
  if (v4)
  {
    if (v5)
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v6 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        unint64_t v7 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v4);
        CCLogStream::logAlert(v6, "[dk] %s@%d:%s returns %s\n", "logRegTableVersion", 8203, "clmver", v7);
      }
    }
  }
  else
  {
    if (v5)
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v10 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logNoticeIf(v10, 0x80uLL, "[dk] %s@%d:%s returns\n %s\n", "logRegTableVersion", 8197, "clmver", v3);
      }
    }
    OSStringPtr v8 = OSString::withCString(v3);
    setPropertyHelper(this, "CLMVersion", v8);
    if (v8) {
      ((void (*)(OSStringPtr))v8->release)(v8);
    }
  }
  IOFreeData();
  return v4;
}

uint64_t AppleBCMWLANCore::logTxCapTableVersion(IOService *this)
{
  uint64_t v2 = IOMallocZeroData();
  if (!v2) {
    return 3758097085;
  }
  uint64_t v3 = (const char *)v2;
  v11[0]  = v2;
  v11[1]  = 0x200000A0200;
  uint64_t v4 = AppleBCMWLANCommander::runIOVarGet((AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free, (uint64_t)"txcapver", (uint64_t)&kNoTxPayload, (uint64_t)v11, 0);
  uint64_t v5 = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
  if (v4)
  {
    if (v5)
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v6 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        unint64_t v7 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v4);
        CCLogStream::logAlert(v6, "[dk] %s@%d:%s returns %s\n", "logTxCapTableVersion", 8229, "txcapver", v7);
      }
    }
  }
  else
  {
    if (v5)
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v10 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logNoticeIf(v10, 0x80uLL, "[dk] %s@%d:%s returns\n %s\n", "logTxCapTableVersion", 8224, "txcapver", v3);
      }
    }
    OSStringPtr v8 = OSString::withCString(v3);
    setPropertyHelper(this, "TxCapVersion", v8);
    if (v8) {
      ((void (*)(OSStringPtr))v8->release)(v8);
    }
  }
  IOFreeData();
  return v4;
}

uint64_t AppleBCMWLANCore::outputRegTable(AppleBCMWLANCore *a1, IO80211Buffer *this, uint64_t a3)
{
  unint64_t v3 = *(void *)(a3 + 88);
  if (!v3) {
    return 0;
  }
  uint64_t BytesNoCopy = (const char *)IO80211Buffer::getBytesNoCopy(this, *(void *)(a3 + 80), *(void *)(a3 + 88));
  AppleBCMWLANCore::downloadBlob(a1, "clmload", BytesNoCopy, v3);
  uint64_t result = AppleBCMWLANCore::retrieveRegTableStatus(a1);
  if (!result)
  {
    return AppleBCMWLANCore::logRegTableVersion((IOService *)a1);
  }
  return result;
}

uint64_t AppleBCMWLANCore::outputTxCapTable(AppleBCMWLANCore *a1, IO80211Buffer *this, uint64_t a3)
{
  unint64_t v3 = *(void *)(a3 + 104);
  if (!v3) {
    return 0;
  }
  uint64_t BytesNoCopy = (const char *)IO80211Buffer::getBytesNoCopy(this, *(void *)(a3 + 96), *(void *)(a3 + 104));
  AppleBCMWLANCore::downloadBlob(a1, "txcapload", BytesNoCopy, v3);
  uint64_t result = AppleBCMWLANCore::retrieveTxCapTableStatus(a1);
  if (!result)
  {
    return AppleBCMWLANCore::logTxCapTableVersion((IOService *)a1);
  }
  return result;
}

uint64_t AppleBCMWLANCore::outputPlatcfg(AppleBCMWLANCore *a1, IO80211Buffer *this, uint64_t a3)
{
  unint64_t v4 = *(void *)(a3 + 72);
  if (v4)
  {
    uint64_t BytesNoCopy = (const char *)IO80211Buffer::getBytesNoCopy(this, *(void *)(a3 + 64), *(void *)(a3 + 72));
    uint64_t result = AppleBCMWLANCore::downloadBlobIOVBatch(a1, "platcfg", BytesNoCopy, v4);
    if (!result)
    {
      uint64_t result = AppleBCMWLANCore::retrievePlatcfgStatus(a1);
      if (!result)
      {
        unsigned __int16 v8 = 0;
        AppleBCMWLANCore::queryPlatcfgCommandVersion(a1, &v8);
        if (v8 >= 2u)
        {
          AppleBCMWLANCore::retrievePlatcfgBlobVersion(a1);
          AppleBCMWLANCore::retrievePlatcfgXTLVDumpData(a1);
        }
        return 0;
      }
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *, IO80211Buffer *))(*(void *)a1 + 1848))(a1, this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        unint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v7, "[dk] %s@%d:no platcfg blob present in chip image, skip download\n", "outputPlatcfg", 8287);
        return 0;
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::downloadCal(AppleBCMWLANCore *this, OSData *a2, int a3)
{
  uint64_t BytesNoCopy = OSData::getBytesNoCopy(a2);
  if (OSData::getLength(a2))
  {
    uint64_t v7 = 0;
    unsigned int v8 = 1;
    while (!BytesNoCopy[v7])
    {
      uint64_t v7 = v8;
      if (OSData::getLength(a2) <= v8++) {
        goto LABEL_5;
      }
    }
    __int16 v11 = (const char *)OSData::getBytesNoCopy(a2);
    size_t Length = OSData::getLength(a2);
    uint64_t result = AppleBCMWLANCore::downloadBlob(this, "calload", v11, Length);
    if (!result || result == -469794559)
    {
      return AppleBCMWLANCore::retrieveCalMSFStatus((IOService *)this, a3);
    }
  }
  else
  {
LABEL_5:
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logNotice(v13, "[dk] %s@%d:NO WCAL is programmed!\n", "downloadCal", 8328);
        return 0;
      }
    }
  }
  return result;
}

BOOL AppleBCMWLANCore::isFdrCal(AppleBCMWLANCore *this)
{
  unint64_t v3 = 0;
  if (!acquireProperty<OSBoolean>(*(IOService **)(*((void *)this + 9) + 5400), "wlan.is.fdr.cal", &v3, 1uLL, "IOService"))return 0; {
  BOOL v1 = v3 == kOSBooleanTrue;
  }
  if (v3) {
    ((void (*)(void))v3->release)();
  }
  return v1;
}

uint64_t AppleBCMWLANCore::outputWiFiCal(AppleBCMWLANCore *this)
{
  int v20 = -1431655766;
  if (IOParseBootArgNumber("wlan.debug.nomsf", &v20, 4))
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        char v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v15, "[dk] %s@%d:Skip WCAL by boot-args\n", "outputWiFiCal", 8361);
      }
    }
    return 0;
  }
  char v19 = 0;
  isFdrCal  = AppleBCMWLANCore::isFdrCal(this);
  unint64_t v4 = *(IOService **)(*((void *)this + 9) + 5400);
  if (isFdrCal)
  {
    if (checkAcquireDataPropertyNotEmpty(v4, "wifi-calibration-fdr", &v19, 0, 1uLL, "IOService"))
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v5, "[dk] %s@%d:Download %s\n", "outputWiFiCal", 8371, "wifi-calibration-fdr");
        }
      }
LABEL_15:
      unsigned int v8 = v19;
      int v9 = this;
      int v10 = 0;
LABEL_21:
      uint64_t v2 = AppleBCMWLANCore::downloadCal(v9, v8, v10);
      goto LABEL_29;
    }
    int v11 = checkAcquireDataPropertyNotEmpty(*(IOService **)(*((void *)this + 9) + 5400), "wifi-calibration-gen", &v19, 0, 1uLL, "IOService");
    uint64_t v12 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (v11)
    {
      if (v12)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          char v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v17, "[dk] %s@%d:Download %s\n", "outputWiFiCal", 8374, "wifi-calibration-gen");
        }
      }
      unsigned int v8 = v19;
      int v9 = this;
      int v10 = 1;
      goto LABEL_21;
    }
    if (v12)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v18, "[dk] %s@%d:%s and %s unavailable in ioreg\n");
      }
    }
  }
  else
  {
    int v6 = checkAcquireDataPropertyNotEmpty(v4, "wifi-calibration-msf", &v19, 0, 1uLL, "IOService");
    uint64_t v7 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (v6)
    {
      if (v7)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          int v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v16, "[dk] %s@%d:Download %s\n", "outputWiFiCal", 8382, "wifi-calibration-msf");
        }
      }
      goto LABEL_15;
    }
    if (v7)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v13, "[dk] %s@%d:%s unavailable in ioreg\n");
      }
    }
  }
  uint64_t v2 = 0;
LABEL_29:
  if (v19) {
    ((void (*)(OSData *))v19->release)(v19);
  }
  return v2;
}

uint64_t AppleBCMWLANCore::setupTraceLogCheckers(AppleBCMWLANCore *this)
{
  uint64_t v2 = *((void *)this + 9);
  if (*(void *)(v2 + 1016))
  {
    IOFreeData();
    *(void *)(*((void *)this + 9) + 1016)  = 0;
    *(void *)(*((void *)this + 9) + 1024)  = 0;
    uint64_t v2 = *((void *)this + 9);
  }
  if (*(void *)(v2 + 1000))
  {
    IOFreeData();
    *(void *)(*((void *)this + 9) + 1000)  = 0;
    *(void *)(*((void *)this + 9) + 1008)  = 0;
    uint64_t v2 = *((void *)this + 9);
  }
  *(void *)(v2 + 1024)  = *(unsigned int *)(v2 + 988);
  *(void *)(*((void *)this + 9) + 1016)  = IOMallocZeroData();
  uint64_t v3 = *((void *)this + 9);
  if (!*(void *)(v3 + 1016))
  {
    uint64_t v6 = 3758097084;
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
      return v6;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if ((CCLogStream::shouldLog() & 1) == 0) {
      return v6;
    }
    int v8 = 8413;
LABEL_18:
    int v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    CCLogStream::logAlert(v9, "[dk] %s@%d:Failed to allocate memory\n", "setupTraceLogCheckers", v8);
    return v6;
  }
  *(void *)(v3 + 1008)  = 2 * *(unsigned int *)(v3 + 988);
  *(void *)(*((void *)this + 9) + 1000)  = IOMallocZeroData();
  uint64_t v4 = *((void *)this + 9);
  if (!*(void *)(v4 + 1000))
  {
    uint64_t v6 = 3758097084;
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
      return v6;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if ((CCLogStream::shouldLog() & 1) == 0) {
      return v6;
    }
    int v8 = 8417;
    goto LABEL_18;
  }
  if (*(_DWORD *)(v4 + 988))
  {
    unint64_t v5 = 0;
    do
    {
      *(unsigned char *)(*(void *)(v4 + 1016) + v5++)  = 1;
      uint64_t v4 = *((void *)this + 9);
    }
    while (v5 < *(unsigned int *)(v4 + 988));
  }
  return 0;
}

uint64_t AppleBCMWLANCore::getMaxSupportedEventLogSets(AppleBCMWLANCore *this)
{
  *(_DWORD *)(*((void *)this + 9) + 988)  = 0;
  uint64_t v2 = *((void *)this + 9);
  v8[0]  = v2 + 988;
  v8[1]  = 0x400040004;
  uint64_t v3 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(v2 + 5416), (uint64_t)"event_log_max_sets", (uint64_t)&kNoTxPayload, (uint64_t)v8, 0);
  uint64_t v4 = v3;
  if (v3)
  {
    if (v3 == -469794537)
    {
      uint64_t v4 = 0;
      *(_DWORD *)(*((void *)this + 9) + 988)  = 8;
    }
    else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v7 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v4);
        CCLogStream::logAlert(v6, "[dk] %s@%d: Unable to get max event log sets: %s\n", "getMaxSupportedEventLogSets", 8442, v7);
      }
    }
  }
  return v4;
}

uint64_t AppleBCMWLANCore::set_mpc_state(AppleBCMWLANCore *this, unsigned int a2, unsigned int *a3)
{
  unsigned int v16 = -1431655766;
  v15[0]  = &v16;
  v15[1]  = 0x400040004;
  uint64_t v6 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  uint64_t v13 = &v16;
  uint64_t v14 = 4;
  uint64_t v7 = AppleBCMWLANCommander::runIOVarGet(v6, (uint64_t)"mpc", (uint64_t)&v13, (uint64_t)v15, 0);
  if (v7)
  {
    uint64_t v8 = v7;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v8);
        CCLogStream::logAlert(v9, "[dk] %s@%d:Iovar failure getting MPC value: %s\n");
      }
    }
  }
  else
  {
    if (a3) {
      *a3  = v16;
    }
    unsigned int v16 = a2;
    int v10 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    uint64_t v13 = &v16;
    uint64_t v14 = 4;
    uint64_t v8 = AppleBCMWLANCommander::runIOVarSet(v10, (uint64_t)"mpc", (uint64_t)&v13, 0, 0);
    if (v8)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v8);
          CCLogStream::logAlert(v12, "[dk] %s@%d:Iovar failure to MPC to zero: %s\n");
        }
      }
    }
  }
  return v8;
}

uint64_t AppleBCMWLANCore::restore_mpc_state(AppleBCMWLANCore *this, int a2)
{
  int v9 = a2;
  uint64_t v3 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  v8[0]  = &v9;
  v8[1]  = 4;
  uint64_t v4 = AppleBCMWLANCommander::runIOVarSet(v3, (uint64_t)"mpc", (uint64_t)v8, 0, 0);
  if (v4)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v7 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v4);
        CCLogStream::logAlert(v6, "[dk] %s@%d:Failure restoring MPC iovar: %s\n", "restore_mpc_state", 8493, v7);
      }
    }
  }
  return v4;
}

uint64_t AppleBCMWLANCore::updateFWAPIVerFromHW(AppleBCMWLANCore *this)
{
  int v10 = 1;
  v9[0]  = &v10;
  v9[1]  = 0x400040004;
  uint64_t v2 = AppleBCMWLANCommander::runIOCtlGet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), 1, (uint64_t)&kNoTxPayload, (uint64_t)v9, 0);
  uint64_t v3 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (v2)
  {
    if (!v3)
    {
LABEL_5:
      int v4 = 1;
      goto LABEL_10;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    int v4 = 1;
    if (CCLogStream::shouldLog())
    {
      unint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t v6 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v2);
      CCLogStream::logAlert(v5, "[dk] %s@%d: Unable to get FW API version: %s\n", "updateFWAPIVerFromHW", 9752, v6);
      goto LABEL_5;
    }
  }
  else
  {
    if (v3)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logNoticeIf(v8, 0x80uLL, "[dk] %s@%d: FW API version: 0x%x\n", "updateFWAPIVerFromHW", 9755, v10);
      }
    }
    int v4 = v10;
  }
LABEL_10:
  *(_DWORD *)(*((void *)this + 9) + 1036)  = v4;
  return v2;
}

uint64_t AppleBCMWLANCore::getFWAPIVer(AppleBCMWLANCore *this)
{
  return *(unsigned int *)(*((void *)this + 9) + 1036);
}

uint64_t AppleBCMWLANCore::configureDefaultEvents(AppleBCMWLANCore *this)
{
  *(_DWORD *)(*((void *)this + 9) + 6596)  = 0;
  *(_DWORD *)(*((void *)this + 9) + 6592)  = 0;
  *(unsigned char *)(*((void *)this + 9) + 6600)  = 0;
  uint64_t v2 = *((void *)this + 9);
  *(void *)(v2 + 1128)  = 0;
  *(_DWORD *)(v2 + 1135)  = 0;
  *(_OWORD *)(v2 + 1112)  = 0u;
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 34)) {
    AppleBCMWLANCore::addEventBit(this, 0xB4u);
  }
  AppleBCMWLANCore::addEventBit(this, 0x1Au);
  AppleBCMWLANCore::addEventBit(this, 0);
  AppleBCMWLANCore::addEventBit(this, 3u);
  AppleBCMWLANCore::addEventBit(this, 7u);
  AppleBCMWLANCore::addEventBit(this, 6u);
  AppleBCMWLANCore::addEventBit(this, 0xCu);
  AppleBCMWLANCore::addEventBit(this, 0x10u);
  AppleBCMWLANCore::addEventBit(this, 0x11u);
  AppleBCMWLANCore::addEventBit(this, 0x17u);
  AppleBCMWLANCore::addEventBit(this, 0x29u);
  AppleBCMWLANCore::addEventBit(this, 0x21u);
  AppleBCMWLANCore::addEventBit(this, 0x2Eu);
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 27))
  {
    AppleBCMWLANCore::addEventBit(this, 0x53u);
    if (AppleBCMWLANCore::featureFlagIsBitSet(this, 76))
    {
      if (!*(unsigned char *)(*((void *)this + 9) + 18340)) {
        AppleBCMWLANCore::addEventBit(this, 0xC1u);
      }
    }
  }
  AppleBCMWLANCore::addEventBit(this, 0x45u);
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 34)) {
    AppleBCMWLANCore::addEventBit(this, 0xACu);
  }
  AppleBCMWLANCore::addEventBit(this, 0x13u);
  int v3 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 5400) + 368))(*(void *)(*((void *)this + 9) + 5400));
  if ((v3 - 4377) <= 0x16 && ((1 << (v3 - 25)) & 0x400C03) != 0) {
    AppleBCMWLANCore::addEventBit(this, 0xC5u);
  }
  AppleBCMWLANCore::addEventBit(this, 0x20u);
  AppleBCMWLANCore::addEventBit(this, 0x25u);
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 34)) {
    AppleBCMWLANCore::addEventBit(this, 0xBFu);
  }
  AppleBCMWLANCore::addEventBit(this, 9u);
  AppleBCMWLANCore::addEventBit(this, 0x36u);
  AppleBCMWLANCore::addEventBit(this, 4u);
  AppleBCMWLANCore::addEventBit(this, 8u);
  AppleBCMWLANCore::addEventBit(this, 0xAu);
  AppleBCMWLANCore::addEventBit(this, 0x4Bu);
  AppleBCMWLANCore::addEventBit(this, 0x3Cu);
  AppleBCMWLANCore::addEventBit(this, 0x7Eu);
  AppleBCMWLANCore::addEventBit(this, 0x34u);
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 48)
    && (*(unsigned char *)(*((void *)this + 9) + 17636) & 2) == 0)
  {
    AppleBCMWLANCore::addEventBit(this, 0x6Du);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 48)
    && (*(unsigned char *)(*((void *)this + 9) + 17636) & 2) == 0
    || AppleBCMWLANCore::featureFlagIsBitSet(this, 12))
  {
    AppleBCMWLANCore::addEventBit(this, 0x96u);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 59)) {
    AppleBCMWLANCore::addEventBit(this, 0xABu);
  }
  AppleBCMWLANCore::addEventBit(this, 0x67u);
  AppleBCMWLANCore::addEventBit(this, 0x68u);
  AppleBCMWLANCore::addEventBit(this, 0xDu);
  AppleBCMWLANCore::addEventBit(this, 0xEu);
  AppleBCMWLANCore::configureLqmRssiUpdates(this, 2000, kDefaultLqmRssiLevels);
  AppleBCMWLANCore::configureLqmChanQUpdates(this, 5000, 2, kDefaultLqmCcaBounds);
  AppleBCMWLANCore::configureWeightAvgLQMUpdates(this, &kDefaultWeightAvgLQMParams);
  AppleBCMWLANCore::addEventBit(this, 0x2Fu);
  AppleBCMWLANCore::addEventBit(this, 0x50u);
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 46)) {
    AppleBCMWLANCore::addEventBit(this, 0x98u);
  }
  unsigned int v5 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 5400) + 368))(*(void *)(*((void *)this + 9) + 5400))
     - 4357;
  if (v5 <= 0x2A && ((1 << v5) & 0x400C0300001) != 0) {
    AppleBCMWLANCore::addEventBit(this, 0xB7u);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 34)) {
    AppleBCMWLANCore::addEventBit(this, 0xBAu);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 34)
    && AppleBCMWLANCore::featureFlagIsBitSet(this, 82))
  {
    AppleBCMWLANCore::addEventBit(this, 0xBCu);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 34)
    && AppleBCMWLANCore::featureFlagIsBitSet(this, 76))
  {
    AppleBCMWLANCore::addEventBit(this, 0xBDu);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 79)) {
    AppleBCMWLANCore::addEventBit(this, 0xBEu);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 92)) {
    AppleBCMWLANCore::addEventBit(this, 0xC7u);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 95)) {
    AppleBCMWLANCore::addEventBit(this, 0xC8u);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 93)) {
    AppleBCMWLANCore::addEventBit(this, 0xCFu);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 101)) {
    AppleBCMWLANCore::addEventBit(this, 0xBBu);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 97)) {
    AppleBCMWLANCore::addEventBit(this, 0xD1u);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 119)) {
    AppleBCMWLANCore::addEventBit(this, 0xD4u);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 115)) {
    AppleBCMWLANCore::addEventBit(this, 0xCBu);
  }
  uint64_t v6 = AppleBCMWLANCore::writeEventBitField(this);
  AppleBCMWLANCore::resetExtendedEventBit(this, 0xA5u);
  AppleBCMWLANCore::updateCurrentFWCountryCode(this);
  return v6;
}

uint64_t AppleBCMWLANCore::configureRegionSpecific(AppleBCMWLANCore *this)
{
  RegionInfo  = (const OSString *)AppleBCMWLANConfigManager::getRegionInfo(*(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472));
  int v3 = RegionInfo;
  if (RegionInfo) {
    CStringNoCopy  = OSString::getCStringNoCopy(RegionInfo);
  }
  else {
    CStringNoCopy  = 0;
  }
  char v16 = 0;
  isNewuint64_t Device = AppleBCMWLANConfigManager::isNewDevice(*(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472));
  if (CStringNoCopy)
  {
    int v6 = isNewDevice;
    char v14 = *CStringNoCopy;
    char v15 = CStringNoCopy[1];
    uint64_t result = IOParseBootArgNumber("wlan.RegionInfo.override", &v14, 3);
    char v16 = 0;
    if (!v6) {
      return result;
    }
    unint64_t v8 = 0;
    BOOL v9 = 1;
    do
    {
      int v10 = off_10038C760[v8];
      if (v14 == *v10 && v15 == v10[1]) {
        break;
      }
      BOOL v9 = v8++ < 0x23;
    }
    while (v8 != 36);
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (result
      && ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
          uint64_t result = CCLogStream::shouldLog(),
          result))
    {
      uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t v13 = OSString::getCStringNoCopy(v3);
      uint64_t result = CCLogStream::logAlert(v12, "[dk] %s@%d:Region Info <%s:%s> found=%d \n", "configureRegionSpecific", 40779, &v14, v13, v9);
      if (!v9) {
        return result;
      }
    }
    else if (!v9)
    {
      return result;
    }
    uint64_t result = AppleBCMWLANPowerManager::setHtSisoOnly(*(AppleBCMWLANPowerManager **)(*((void *)this + 9) + 5528), 1);
    *(unsigned char *)(*((void *)this + 9) + 35944)  = 1;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        return CCLogStream::logAlert(v11, "[dk] %s@%d:pRegionInfo is NULL\n", "configureRegionSpecific", 40757);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::checkForRngReSeedSupport(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 81);
}

uint64_t AppleBCMWLANCore::setEntropyForRNG(AppleBCMWLANCore *this)
{
  uint64_t v2 = (_DWORD *)IOMallocZeroData();
  if (!v2) {
    return 12;
  }
  int v3 = (AppleBCMWLANCore *)v2;
  *uint64_t v2 = 1;
  *(_DWORD *)((char *)v2 + 6)  = 4194370;
  read_random();
  uint64_t v4 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 136))(v4))
  {
    int v11 = this;
    uint64_t v12 = (uint64_t)AppleBCMWLANCore::handleSetEntropyForRNGAsyncCallback;
    uint64_t v13 = 0;
    uint64_t v5 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"rng");
  }
  else
  {
    uint64_t v7 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    int v11 = v3;
    uint64_t v12 = 74;
    uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v7, (uint64_t)"rng", (uint64_t)&v11, 0, 0);
  }
  uint64_t v6 = v5;
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        BOOL v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int v10 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
        CCLogStream::logAlert(v9, "[dk] %s@%d:Unable to set entropy to RNG: %s\n", "setEntropyForRNG", 57192, v10);
      }
    }
  }
  IOFreeData();
  return v6;
}

uint64_t AppleBCMWLANCore::updateHTAndVHTCapBasedOnHWSupport(AppleBCMWLANCore *this)
{
  uint64_t v2 = *((void *)this + 9);
  *(_OWORD *)(v2 + 1052)  = default_ht_ie;
  *(_OWORD *)(v2 + 1064)  = *(long long *)((char *)&default_ht_ie + 12);
  uint64_t v3 = *((void *)this + 9);
  *(void *)(v3 + 1080)  = 0xFFFF000000000CBFLL;
  *(void *)(v3 + 1086)  = 0xFFFF0000FFFFLL;
  SupportedPhyModeFromHW  = AppleBCMWLANCore::getSupportedPhyModeFromHW(this);
  if (SupportedPhyModeFromHW <= 0xA || SupportedPhyModeFromHW == 15) {
    int v6 = 16;
  }
  else {
    int v6 = 128;
  }
  *(_DWORD *)(*((void *)this + 9) + 1040)  = v6;
  if (*(unsigned char *)(*((void *)this + 9) + 35944))
  {
    unsigned int v7 = 1;
    goto LABEL_11;
  }
  HWCap  = AppleBCMWLANCore::utilGetHWCap(this, "rxstreams", (uint64_t)&kNoTxPayload);
  unsigned int v7 = HWCap;
  if (HWCap <= 4)
  {
    if (!HWCap)
    {
LABEL_17:
      BWCapFromHW  = AppleBCMWLANCore::getBWCapFromHW(this);
      *(_WORD *)(v2 + 1054) |= BWCapFromHW & 2;
      if ((BWCapFromHW & 2) != 0) {
        int v14 = 3;
      }
      else {
        int v14 = 2;
      }
      char v15 = AppleBCMWLANCore::utilGetHWCap(this, "ampdu_rx_density", (uint64_t)&kNoTxPayload);
      *(unsigned char *)(v2 + 1056)  = AppleBCMWLANCore::utilGetHWCap(this, "ampdu_rx_factor", (uint64_t)&kNoTxPayload) | (4 * v15);
      char v16 = (int *)(v3 + 1082);
      if ((BWCapFromHW & 4) != 0) {
        int v17 = 4;
      }
      else {
        int v17 = v14;
      }
      *char v16 = *(_DWORD *)(v3 + 1082) & 0xC | ((BWCapFromHW & 8) >> 1) | 0x3800002;
      if ((BWCapFromHW & 8) != 0) {
        int v18 = 5;
      }
      else {
        int v18 = v17;
      }
      *(_DWORD *)(*((void *)this + 9) + 1048)  = v18;
      uint64_t result = AppleBCMWLANCore::utilGetHWCap(this, "sgi_rx", (uint64_t)&kNoTxPayload);
      *(_WORD *)(v2 + 1054) |= 32 * (result & 3);
      int v20 = *v16 | (8 * result) & 0x20;
      *char v16 = v20;
      if (*(int *)(*((void *)this + 9) + 1036) >= 2)
      {
        uint64_t result = AppleBCMWLANCore::utilGetHWCap(this, "ldpc_cap", (uint64_t)&kNoTxPayload);
        BOOL v22 = result != 0;
        int v20 = *v16;
        *(_WORD *)(v2 + 1054) |= v22;
        int v21 = 16 * v22;
      }
      else
      {
        int v21 = 0;
      }
      *char v16 = v20 | v21;
      return result;
    }
LABEL_11:
    char v9 = 0;
    unint64_t v10 = 0;
    do
    {
      *(unsigned char *)(v2 + 1057 + v10)  = -1;
      if (*(int *)(*((void *)this + 9) + 1040) >= 128)
      {
        int v11 = *(unsigned __int16 *)(v3 + 1086) & ~(3 << v9) | (2 << v9);
        *(_WORD *)(v3 + 1086)  = *(_WORD *)(v3 + 1086) & ~(3 << v9) | (2 << v9);
        *(_WORD *)(v3 + 1090)  = v11;
      }
      if (v10 + 1 >= v7) {
        break;
      }
      v9 += 2;
    }
    while (v10++ < 0xF);
    goto LABEL_17;
  }
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      BOOL v23 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      return CCLogStream::logAlert(v23, "[dk] %s@%d: ERROR: Unexpected error detected: rxStreams (%d)\n", "updateHTAndVHTCapBasedOnHWSupport", 9830, v7);
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::configureTethering(AppleBCMWLANCore *this)
{
  if (AppleBCMWLANConfigManager::isTetheringSupport(*(AppleBCMWLANConfigManager **)(*((void *)this + 9)
                                                                                                 + 5472)))
    AppleBCMWLANCore::featureFlagSetBit(this, 16);
  else {
    AppleBCMWLANCore::featureFlagClearBit(this, 16);
  }
  if (AppleBCMWLANCore::shouldSupportTethering(this))
  {
    int v19 = 1;
    uint64_t v2 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    int v17 = &v19;
    uint64_t v18 = 4;
    uint64_t v3 = AppleBCMWLANCommander::runIOVarSet(v2, (uint64_t)"apsta", (uint64_t)&v17, 0, 0);
    if (v3)
    {
      uint64_t v4 = v3;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          int v6 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v4);
          CCLogStream::logAlert(v5, "[dk] %s@%d: apsta failed, error %s\n", "configureTethering", 40806, v6);
        }
      }
    }
    else
    {
      uint64_t v20 = 0;
      int v17 = (int *)&v20;
      uint64_t v18 = 0x800080008;
      uint64_t v7 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"apsta", (uint64_t)&kNoTxPayload, (uint64_t)&v17, 0);
      if (v7)
      {
        uint64_t v8 = v7;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            char v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            char v16 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v8);
            CCLogStream::logAlert(v9, "[dk] %s@%d: apsta get failed, error %s\n", "configureTethering", 40814, v16);
          }
        }
      }
      int v19 = v20;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          char v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logNoticeIf(v15, 0x80uLL, "[dk] %s@%d: apsta set to %u\n", "configureTethering", 40817, v19);
        }
      }
    }
    IsBitSet  = AppleBCMWLANCore::featureFlagIsBitSet(this, 11);
    uint64_t v11 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (IsBitSet)
    {
      if (v11)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logNoticeIf(v13, 0x80uLL, "[dk] %s@%d: AP mode unsupported but requested by device tree\n", "configureTethering", 40827);
        }
      }
      CCFaultReporter::reportFault(*(CCFaultReporter **)(*((void *)this + 9) + 5544), 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0x9F7Cu, "configureTethering", 0, -469792509, 0);
    }
    else if (v11)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logNoticeIf(v14, 0x80uLL, "[dk] %s@%d: Enabling AP mode feature\n", "configureTethering", 40823);
      }
    }
  }
  return 0;
}

uint64_t AppleBCMWLANCore::configureDualPowerMode(AppleBCMWLANCore *this)
{
  uint64_t v2 = *(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472);
  if (v2 && AppleBCMWLANConfigManager::isDualPowerModeSupported(v2))
  {
    AppleBCMWLANCore::featureFlagSetBit(this, 40);
    AppleBCMWLANCore::configTxPowerCapControl(this);
    *(_DWORD *)(*((void *)this + 9) + 19628)  = -1;
    *(_DWORD *)(*((void *)this + 9) + 19632)  = -1;
    AppleBCMWLANCore::setTxPowerCapState((uint64_t)this);
    if (AppleBCMWLANCore::isFourRowPowerTableSupported(this))
    {
      AppleBCMWLANCore::setTxHighCapTimeout(this, 0);
      *(unsigned char *)(*((void *)this + 9) + 19636)  = 0;
    }
    else
    {
      AppleBCMWLANCore::setTxHighCapTimeout(this, 35);
      *(unsigned char *)(*((void *)this + 9) + 19636)  = 1;
    }
  }
  else
  {
    AppleBCMWLANCore::featureFlagClearBit(this, 40);
  }
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (AppleBCMWLANCore::featureFlagIsBitSet(this, 40)) {
        uint64_t v5 = "SET";
      }
      else {
        uint64_t v5 = "CLEAR";
      }
      return CCLogStream::logAlert(v4, "[dk] %s@%d:Set kFeatureDualPowerMode %s\n", "configureDualPowerMode", 53762, v5);
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::populateCountryList(AppleBCMWLANCore *this)
{
  bzero((void *)(*((void *)this + 9) + 6768), 0x404uLL);
  uint64_t v2 = IOMallocZeroData();
  if (!v2) {
    return 3758097085;
  }
  uint64_t v3 = v2;
  *(void *)uint64_t v2 = 1040;
  *(_DWORD *)(v2 + 12)  = 0;
  v18[0]  = v2;
  v18[1]  = 1040;
  v17[0]  = v2;
  v17[1]  = 0x41000000410;
  uint64_t v4 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 136))(v4))
  {
    v16[0]  = this;
    v16[1]  = AppleBCMWLANCore::handleGetCountryListAsyncCallBack;
    _DWORD v16[2] = 0;
    uint64_t v5 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    int v15 = 68157440;
    uint64_t v6 = AppleBCMWLANCommander::sendIOCtlGet(v5, 261, (uint64_t)v18, (unsigned __int16 *)&v15, (uint64_t)v16, 0);
  }
  else
  {
    uint64_t v7 = AppleBCMWLANCommander::runIOCtlGet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), 261, (uint64_t)v18, (uint64_t)v17, 0);
    if (v7)
    {
      uint64_t v6 = v7;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          char v9 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
          CCLogStream::logAlert(v8, "[dk] %s@%d: Failed to retrieve country code list from firmware: %s\n", "populateCountryList", 47198, v9);
        }
      }
    }
    else
    {
      unsigned int v10 = *(_DWORD *)(v3 + 12);
      if (v10 >= 0x100) {
        unsigned int v10 = 256;
      }
      *(_DWORD *)(*((void *)this + 9) + 6768)  = v10;
      if (v10)
      {
        int v11 = 0;
        uint64_t v12 = (int *)(v3 + 16);
        do
        {
          int v13 = *v12++;
          *(_DWORD *)(*((void *)this + 9) + 4 * v11++ + 6772)  = v13;
        }
        while (v10 > v11);
      }
      uint64_t v6 = 0;
    }
  }
  IOFreeData();
  return v6;
}

uint64_t AppleBCMWLANCore::getFirmwareInterfaceVersion(AppleBCMWLANCore *this)
{
  return *(unsigned int *)(*((void *)this + 9) + 780);
}

uint64_t AppleBCMWLANCore::populate6ESupportedCountryList(AppleBCMWLANCore *this)
{
  bzero((void *)(*((void *)this + 9) + 7796), 0x404uLL);
  uint64_t v2 = (_OWORD *)IOMallocZeroData();
  if (!v2) {
    return 3758097085;
  }
  uint64_t v3 = v2;
  *uint64_t v2 = xmmword_10036E990;
  v22[0]  = v2;
  v22[1]  = 1040;
  v21[0]  = v2;
  v21[1]  = 0x41000000410;
  uint64_t v4 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 136))(v4))
  {
    v20[0]  = this;
    v20[1]  = AppleBCMWLANCore::handleGet6ECountryListAsyncCallBack;
    void v20[2] = 0;
    uint64_t v5 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    int v19 = 68157440;
    uint64_t v6 = AppleBCMWLANCommander::sendIOCtlGet(v5, 261, (uint64_t)v22, (unsigned __int16 *)&v19, (uint64_t)v20, 0);
  }
  else
  {
    uint64_t v7 = AppleBCMWLANCommander::runIOCtlGet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), 261, (uint64_t)v22, (uint64_t)v21, 0);
    if (v7)
    {
      uint64_t v6 = v7;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          char v9 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
          CCLogStream::logAlert(v8, "[dk] %s@%d: WiFiCC : Failed to retrieve country code list from firmware: %s\n", "populate6ESupportedCountryList", 47249, v9);
        }
      }
    }
    else
    {
      if (*((_DWORD *)v3 + 3) >= 0x100u) {
        unsigned int v10 = 256;
      }
      else {
        unsigned int v10 = *((_DWORD *)v3 + 3);
      }
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v18, "[dk] %s@%d:WiFiCC : Total # of countries in CLM for 6E: %d\n", "populate6ESupportedCountryList", 47254, *((_DWORD *)v3 + 3));
        }
      }
      *(_DWORD *)(*((void *)this + 9) + 7796)  = v10;
      if (v10)
      {
        int v11 = 0;
        for (i = 0; i < v10; int v11 = ++i)
        {
          int v13 = (char *)v3 + (4 * v11);
          int v15 = *((_DWORD *)v13 + 4);
          int v14 = v13 + 16;
          *(_DWORD *)(*((void *)this + 9) + 4 * i + 7800)  = v15;
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              char v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v16, "[dk] %s@%d:WiFiCC : Country %3d %s\n", "populate6ESupportedCountryList", 47259, v11, v14);
            }
          }
        }
      }
      uint64_t v6 = 0;
    }
  }
  IOFreeData();
  return v6;
}

uint64_t AppleBCMWLANCore::configureDefaultCountryCode(OSObject *this)
{
  *((unsigned char *)this[1].ivars + 6740)  = 85;
  *((unsigned char *)this[1].ivars + 6741)  = 83;
  *((unsigned char *)this[1].ivars + 6742)  = 0;
  *((unsigned char *)this[1].ivars + 6756)  = 88;
  *((unsigned char *)this[1].ivars + 6757)  = 90;
  *((unsigned char *)this[1].ivars + 6758)  = 0;
  bzero((char *)this[1].ivars + 19760, 0x2720uLL);
  if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 29)
    && AppleBCMWLANConfigManager::getRegionInfo(*((AppleBCMWLANConfigManager **)this[1].ivars + 684)))
  {
    uint64_t v2 = 0;
    while (1)
    {
      RegionInfo  = (const OSString *)AppleBCMWLANConfigManager::getRegionInfo(*((AppleBCMWLANConfigManager **)this[1].ivars
                                                                              + 684));
      if (OSString::isEqualTo(RegionInfo, (&kMpnToRestrictedCountryMappings)[v2])) {
        break;
      }
      v2 += 2;
      if (v2 == 8) {
        goto LABEL_10;
      }
    }
    *((_DWORD *)this[1].ivars + 1687)  = (&kMpnToRestrictedCountryMappings)[v2 + 1];
    if (((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v20 = (CCLogStream *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
        ClassNameHelper  = (const char *)getClassNameHelper(this);
        CCLogStream::logAlert(v20, "[dk] %s@%d:%s::%s(): Device MPN %s is for restricted country code %s\n", "configureDefaultCountryCode", 41187, ClassNameHelper, "configureDefaultCountryCode", (&kMpnToRestrictedCountryMappings)[v2], (const char *)&(&kMpnToRestrictedCountryMappings)[v2 + 1]);
      }
    }
  }
LABEL_10:
  if (IOParseBootArgString("wlan.restrictedccode", (char *)this[1].ivars + 6748, 3))
  {
    if (((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        int v17 = (CCLogStream *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t v18 = (const char *)getClassNameHelper(this);
        CCLogStream::logAlert(v17, "[dk] %s@%d:%s::%s() boot-args overrides ivars->fRestrictedCountryCode to %s\n", "configureDefaultCountryCode", 41200, v18, "configureDefaultCountryCode", (const char *)this[1].ivars + 6748);
      }
    }
  }
  ivars  = this[1].ivars;
  v28[0]  = (char *)ivars + 6740;
  v28[1]  = 0x400040004;
  uint64_t v5 = AppleBCMWLANCommander::runIOCtlGet(*((AppleBCMWLANCommander **)ivars + 677), 83, (uint64_t)&kNoTxPayload, (uint64_t)v28, 0);
  if (v5)
  {
    uint64_t v6 = v5;
    if (((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
        ((void (*)(OSObject *, uint64_t))this->OSMetaClassBase::__vftable[2].getMetaClass)(this, v6);
        CCLogStream::logAlert(v7, "[dk] %s@%d: Failed to retrieve country code:%s \n");
      }
    }
  }
  else
  {
    *((unsigned char *)this[1].ivars + 674AppleBCMWLANCommandMonitor::free(this - 3) = 0;
    if (((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        int v19 = (CCLogStream *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logNoticeIf(v19, 0x80uLL, "[dk] %s@%d: Default Country code set to %s\n", "configureDefaultCountryCode", 41212, (const char *)this[1].ivars + 6740);
      }
    }
    if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 28))
    {
      uint64_t v8 = this[1].ivars;
      p_isAutoCountryEnabled  = (int *)((char *)v8 + 6740);
      uint64_t v27 = 4;
      uint64_t v9 = AppleBCMWLANCommander::runIOVarSet(*((AppleBCMWLANCommander **)v8 + 677), (uint64_t)"autocountry_default", (uint64_t)&p_isAutoCountryEnabled, 0, 0);
      if (v9)
      {
        uint64_t v6 = v9;
        if (((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this))
        {
          ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (CCLogStream::shouldLog())
          {
            unsigned int v10 = (CCLogStream *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
            ((void (*)(OSObject *, uint64_t))this->OSMetaClassBase::__vftable[2].getMetaClass)(this, v6);
            CCLogStream::logAlert(v10, "[dk] %s@%d: iovar set autocountry_default command failed: %s\n");
          }
        }
      }
      else
      {
        int v25 = 1;
        p_isAutoCountryEnabled  = &v25;
        uint64_t v27 = 4;
        uint64_t v12 = AppleBCMWLANCommander::runIOVarSet(*((AppleBCMWLANCommander **)this[1].ivars + 677), (uint64_t)"scan_force_active", (uint64_t)&p_isAutoCountryEnabled, 0, 0);
        if (v12)
        {
          uint64_t v6 = v12;
          if (((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              int v13 = (CCLogStream *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
              ((void (*)(OSObject *, uint64_t))this->OSMetaClassBase::__vftable[2].getMetaClass)(this, v6);
              CCLogStream::logAlert(v13, "[dk] %s@%d: iovar set scan_force_active command failed: %s\n");
            }
          }
        }
        else if (AppleBCMWLANCore::isRestrictedCountry((AppleBCMWLANCore *)this))
        {
          if (((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              BOOL v22 = (CCLogStream *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
              CCLogStream::logNotice(v22, "[dk] %s@%d: Strict regulatory settings for %s required. Not enabling autocountry.\n", "configureDefaultCountryCode", 41232, (const char *)this[1].ivars + 6748);
            }
          }
          return ((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[7].free)(this);
        }
        else
        {
          isAutoCountryEnabled  = AppleBCMWLANConfigManager::isAutoCountryEnabled(*((AppleBCMWLANConfigManager **)this[1].ivars
                                                                                 + 684));
          p_isAutoCountryEnabled  = &isAutoCountryEnabled;
          uint64_t v27 = 4;
          if (AppleBCMWLANCommander::runIOVarSet(*((AppleBCMWLANCommander **)this[1].ivars + 677), (uint64_t)"autocountry", (uint64_t)&p_isAutoCountryEnabled, 0, 0)&& (uint64_t v14 = AppleBCMWLANCommander::runIOCtlSet(*((AppleBCMWLANCommander **)this[1].ivars + 677), 47, (uint64_t)&p_isAutoCountryEnabled, 0, 0), v14))
          {
            uint64_t v6 = v14;
            if (((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this))
            {
              ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog())
              {
                int v15 = (CCLogStream *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
                ((void (*)(OSObject *, uint64_t))this->OSMetaClassBase::__vftable[2].getMetaClass)(this, v6);
                CCLogStream::logAlert(v15, "[dk] %s@%d: Error: Unable to enable autocountry \"%d\" : %s\n");
              }
            }
          }
          else
          {
            isEnhancedLocaleEnabled  = AppleBCMWLANConfigManager::isEnhancedLocaleEnabled(*((AppleBCMWLANConfigManager **)this[1].ivars
                                                                                         + 684));
            p_isAutoCountryEnabled  = &isEnhancedLocaleEnabled;
            uint64_t v27 = 4;
            uint64_t v6 = AppleBCMWLANCommander::runIOVarSet(*((AppleBCMWLANCommander **)this[1].ivars + 677), (uint64_t)"ccode_pr_2g", (uint64_t)&p_isAutoCountryEnabled, 0, 0);
            if (v6)
            {
              if (((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this))
              {
                ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if (CCLogStream::shouldLog())
                {
                  char v16 = (CCLogStream *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  ((void (*)(OSObject *, uint64_t))this->OSMetaClassBase::__vftable[2].getMetaClass)(this, v6);
                  CCLogStream::logAlert(v16, "[dk] %s@%d: Error: Unable to enable ccode_pr_2g \"%d\" : %s\n");
                }
              }
            }
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

uint64_t AppleBCMWLANCore::handleCountryCodeChangeToRepopulateChannels(AppleBCMWLANCore *this)
{
  bzero(v7, 0x5FAuLL);
  if (strlcpy(v8, (const char *)(*((void *)this + 9) + 6752), 4uLL) > 3) {
    return 3758097097;
  }
  int v9 = 380;
  v6[0]  = this;
  v6[1]  = AppleBCMWLANCore::handleGetChanSpecs;
  void v6[2] = 0;
  uint64_t v3 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  v5[0]  = v7;
  v5[1]  = 1530;
  int v4 = 99876868;
  return AppleBCMWLANCommander::sendIOVarGet(v3, (uint64_t)"chanspecs", (uint64_t)v5, (unsigned __int16 *)&v4, (uint64_t)v6, 0);
}

void *AppleBCMWLANCore::setTxProfileEnable(AppleBCMWLANCore *this, unsigned int *a2)
{
  int v11 = -1431655766;
  unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v9 = 327680;
  LOBYTE(v10)  = *(unsigned char *)a2;
  int v4 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  v8[0]  = &v9;
  v8[1]  = 9;
  uint64_t result = (void *)AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"tx_profile", (uint64_t)v8, 0, 0);
  if (!result)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v7 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, void))(*(void *)this + 112))(this, 0);
        CCLogStream::logAlert(v6, "[dk] %s@%d: Enable tx_profile feature : %s \n", "setTxProfileEnable", 42025, v7);
      }
    }
    return AppleBCMWLANCore::setL3CtrlTxProfile(this, *a2);
  }
  return result;
}

uint64_t AppleBCMWLANCore::checkForScanCoreSupport(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 76);
}

uint64_t AppleBCMWLANCore::enableObssMitigation(AppleBCMWLANCore *this, int a2)
{
  __int16 v17 = -21846;
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  int v11 = 393218;
  __int16 v12 = 1;
  char v13 = a2;
  char v14 = 1;
  __int16 v15 = 30;
  int v4 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  v10[0]  = &v11;
  v10[1]  = 10;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"obss_hw", (uint64_t)v10, 0, 0);
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (a2 == 1) {
        uint64_t v8 = "Enabled";
      }
      else {
        uint64_t v8 = "Stats-Only";
      }
      uint64_t v9 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
      CCLogStream::logAlert(v7, "[dk] %s@%d: Configure OBSS mitigation feature mode to %s is: %s \n", "enableObssMitigation", 57231, v8, v9);
    }
  }
  return v5;
}

uint64_t AppleBCMWLANCore::configureScans(AppleBCMWLANCore *this)
{
  int v9 = 110;
  uint64_t v2 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  v8[0]  = &v9;
  v8[1]  = 4;
  uint64_t v3 = AppleBCMWLANCommander::runIOVarSet(v2, (uint64_t)"scan_passive_time", (uint64_t)v8, 0, 0);
  if (v3)
  {
    uint64_t v4 = v3;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v7 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v4);
        CCLogStream::logAlert(v6, "[dk] %s@%d: Error: Unable to set passive scan dwell time: %s\n", "configureScans", 41643, v7);
      }
    }
  }
  return 0;
}

uint64_t AppleBCMWLANCore::configureLinkLoss(AppleBCMWLANCore *this)
{
  int v26 = 8;
  uint64_t v2 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  uint64_t v24 = &v26;
  uint64_t v25 = 4;
  uint64_t v3 = AppleBCMWLANCommander::runIOVarSet(v2, (uint64_t)"bcn_timeout", (uint64_t)&v24, 0, 0);
  if (v3)
  {
    uint64_t v4 = v3;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        char v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        __int16 v15 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v4);
        CCLogStream::logAlert(v14, "[dk] %s@%d: Error: Unable to set the link lost timeout: %s\n", "configureLinkLoss", 41659, v15);
      }
    }
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 28))
  {
    int v23 = 1;
    uint64_t v5 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    uint64_t v24 = &v23;
    uint64_t v25 = 4;
    uint64_t v6 = AppleBCMWLANCommander::runIOVarSet(v5, (uint64_t)"bcn_to_dly", (uint64_t)&v24, 0, 0);
    if (v6)
    {
      uint64_t v7 = v6;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          int v19 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v7);
          CCLogStream::logAlert(v18, "[dk] %s@%d: Error: Unable to set  bcn_to_dly: %s\n", "configureLinkLoss", 41672, v19);
        }
      }
    }
    uint64_t v8 = *((void *)this + 9);
    if (*(_DWORD *)(v8 + 780) < 0x11u)
    {
      AppleBCMWLANCore::applyRoamingCandidateBoost(this, 1, 50);
    }
    else
    {
      LOWORD(v24)  = 12800;
      BYTE2(v24)  = 70;
      if (AppleBCMWLANRoamAdapter::applyRoamingCandidateBoost(*(void *)(v8 + 5576), (unsigned __int8 *)&v24, 0))
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v20 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v20, "[dk] %s@%d:%s WiFiRoam : Unable to set candidate boost\n", "configureLinkLoss", 41686, "configureLinkLoss");
          }
        }
      }
      if (AppleBCMWLANRoamAdapter::skipPscScansForRoamScans(*(AppleBCMWLANRoamAdapter **)(*((void *)this + 9) + 5576), 1))
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            int v21 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v21, "[dk] %s@%d:%s WiFiRoam : Unable to set join pref to skip PSC roam scans\n", "configureLinkLoss", 41692, "configureLinkLoss");
          }
        }
      }
      if (AppleBCMWLANRoamAdapter::rxSigSetRssiCompThreshold(*(AppleBCMWLANCore ****)(*((void *)this + 9) + 5576), *(_DWORD *)(*((void *)this + 9) + 29932)))
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            BOOL v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v22, "[dk] %s@%d:%s WiFiRoam : Unable to configure RSSI compensation threshold\n", "configureLinkLoss", 41697, "configureLinkLoss");
          }
        }
      }
      if (AppleBCMWLANRoamAdapter::rxSigSetRssiCompSmoothValues(*(AppleBCMWLANCore ****)(*((void *)this + 9) + 5576), kCompSteps, 0x40u))
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            int v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v9, "[dk] %s@%d:%s WiFiRoam : Unable to set RSSI compensation smooth values\n", "configureLinkLoss", 41702, "configureLinkLoss");
          }
        }
      }
    }
  }
  int v23 = 20;
  unint64_t v10 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  uint64_t v24 = &v23;
  uint64_t v25 = 4;
  uint64_t v11 = AppleBCMWLANCommander::runIOVarSet(v10, (uint64_t)"recreate_bi_timeout", (uint64_t)&v24, 0, 0);
  if (v11)
  {
    uint64_t v12 = v11;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        __int16 v17 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v12);
        CCLogStream::logAlert(v16, "[dk] %s@%d: Error: Unable to configure First beacon Rx timeout value: %s\n", "configureLinkLoss", 41719, v17);
      }
    }
  }
  return 0;
}

uint64_t AppleBCMWLANCore::checkForRangingEnabled(AppleBCMWLANCore *this)
{
  uint64_t result = AppleBCMWLANCore::featureFlagIsBitSet(this, 48);
  if (result) {
    return (*(unsigned char *)(*((void *)this + 9) + 17636) & 2) == 0;
  }
  return result;
}

uint64_t AppleBCMWLANCore::configurePowerSave(AppleBCMWLANCore *this)
{
  int v52 = 1;
  uint64_t v2 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  uint64_t v50 = &v52;
  uint64_t v51 = 4;
  uint64_t v3 = AppleBCMWLANCommander::runIOVarSet(v2, (uint64_t)"pm2_md_sleep_ext", (uint64_t)&v50, 0, 0);
  if (v3)
  {
    uint64_t v4 = v3;
    if (v3 == -469794537)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logInfo(v5, "[dk] %s@%d: Warning: Unable to configure pm2_md_sleep_ext, not supported on this platform.\n", "configurePowerSave", 41734);
        }
      }
    }
    else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v35 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        __int16 v36 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v4);
        CCLogStream::logAlert(v35, "[dk] %s@%d: Error: Unable to configure pm2_md_sleep_ext, %s\n", "configurePowerSave", 41736, v36);
      }
    }
  }
  int v49 = 0;
  int v6 = AppleBCMWLANConfigManager::hostWakePowerSaveEnabled(*(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472));
  BOOL v7 = 0;
  if (v6)
  {
    BOOL v7 = !IOParseBootArgNumber("wlan.feature.ps", &v49, 4);
    if (v49) {
      BOOL v7 = 1;
    }
  }
  *(_DWORD *)(*((void *)this + 9) + 6732)  = v7;
  int v48 = 1;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      long long v34 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v34, 0x80uLL, "[dk] %s@%d: Enabling MPC mode\n", "configurePowerSave", 41759);
    }
  }
  uint64_t v8 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  uint64_t v50 = &v48;
  uint64_t v51 = 4;
  uint64_t v9 = AppleBCMWLANCommander::runIOVarSet(v8, (uint64_t)"mpc", (uint64_t)&v50, 0, 0);
  if (v9)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v11 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v9);
        CCLogStream::logAlert(v10, "[dk] %s@%d: Error: Unable to enable MPC mode: %s\n", "configurePowerSave", 41762, v11);
      }
    }
    return v9;
  }
  uint64_t v12 = *((void *)this + 9);
  if (*(_DWORD *)(v12 + 6732))
  {
    if (*(_DWORD *)(v12 + 19692))
    {
      unsigned int v47 = *(_DWORD *)(v12 + 19692);
      char v13 = *(AppleBCMWLANCommander **)(v12 + 5416);
      uint64_t v50 = (int *)&v47;
      uint64_t v51 = 4;
      uint64_t v14 = AppleBCMWLANCommander::runIOVarSet(v13, (uint64_t)"bcn_li_dtim", (uint64_t)&v50, 0, 0);
      if (!v14) {
        goto LABEL_28;
      }
      uint64_t v15 = v14;
      if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
        goto LABEL_28;
      }
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (!CCLogStream::shouldLog()) {
        goto LABEL_28;
      }
      unint64_t v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t v43 = *(unsigned int *)(*((void *)this + 9) + 19692);
      uint64_t v44 = (*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v15);
      uint64_t v42 = 41775;
      __int16 v17 = "[dk] %s@%d: Error: cannot set extended DTIM: ret %x: %s\n";
    }
    else
    {
      unsigned int v47 = 1;
      *(_DWORD *)(v12 + 19688)  = 1;
      uint64_t v18 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
      uint64_t v50 = (int *)&v47;
      uint64_t v51 = 4;
      uint64_t v19 = AppleBCMWLANCommander::runIOVarSet(v18, (uint64_t)"bcn_li_bcn", (uint64_t)&v50, 0, 0);
      if (!v19) {
        goto LABEL_28;
      }
      uint64_t v20 = v19;
      if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
        goto LABEL_28;
      }
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (!CCLogStream::shouldLog()) {
        goto LABEL_28;
      }
      unint64_t v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t v43 = v47;
      uint64_t v44 = (*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v20);
      uint64_t v42 = 41785;
      __int16 v17 = "[dk] %s@%d: Error: cannot set bcn wake up to 1: ret %x: %s\n";
    }
    CCLogStream::logAlert(v16, v17, "configurePowerSave", v42, v43, v44);
LABEL_28:
    unsigned int v47 = 10;
    int v21 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    uint64_t v50 = (int *)&v47;
    uint64_t v51 = 4;
    uint64_t v22 = AppleBCMWLANCommander::runIOVarSet(v21, (uint64_t)"pm2_radio_shutoff_dly", (uint64_t)&v50, 0, 0);
    if (v22)
    {
      uint64_t v23 = v22;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          long long v37 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          uint64_t v45 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v23);
          CCLogStream::logAlert(v37, "[dk] %s@%d: Error: cannot set pm2_radio_shutoff to %d : ret %x: %s\n", "configurePowerSave", 41796, 10, v23, v45);
        }
      }
    }
    unsigned int v47 = 120;
    uint64_t v24 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    uint64_t v50 = (int *)&v47;
    uint64_t v51 = 4;
    uint64_t v25 = AppleBCMWLANCommander::runIOVarSet(v24, (uint64_t)"pm2_bcn_sleep_ret", (uint64_t)&v50, 0, 0);
    if (v25)
    {
      uint64_t v26 = v25;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          long long v38 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          uint64_t v46 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v26);
          CCLogStream::logAlert(v38, "[dk] %s@%d: cannot set pm2_bcn_sleep_ret to %d : ret %x: %s  -> continue with initialization\n", "configurePowerSave", 41804, 120, v26, v46);
        }
      }
    }
    unsigned int v47 = 1;
    uint64_t v27 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    uint64_t v50 = (int *)&v47;
    uint64_t v51 = 4;
    uint64_t v28 = AppleBCMWLANCommander::runIOVarSet(v27, (uint64_t)"sleep_between_ps_resend", (uint64_t)&v50, 0, 0);
    if (v28 != -469794537)
    {
      uint64_t v29 = v28;
      if (v28)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v39 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            unsigned int v40 = v47;
            unint64_t v41 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v29);
            CCLogStream::logAlert(v39, "[dk] %s@%d: Cannot set sleep_between_ps_resend to %d : ret %x: %s  -> continue with initialization\n", "configurePowerSave", 41811, v40, v29, v41);
          }
        }
      }
    }
    uint64_t v12 = *((void *)this + 9);
  }
  *(_DWORD *)(v12 + 35384)  = 0;
  isExternallyPoweredPlatform  = AppleBCMWLANConfigManager::isExternallyPoweredPlatform(*(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472));
  uint64_t v31 = *((void *)this + 9);
  if (isExternallyPoweredPlatform)
  {
    *(_DWORD *)(v31 + 14080)  = 1;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v32 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v32, "[dk] %s@%d:Always externally powered platform\n", "configurePowerSave", 41827);
      }
    }
  }
  else
  {
    *(_DWORD *)(v31 + 14080)  = 0;
  }
  AppleBCMWLANPowerManager::configureUnAssocFRTS(*(AppleBCMWLANPowerManager **)(*((void *)this + 9) + 5528));
  return v9;
}

uint64_t AppleBCMWLANCore::configureRoam(AppleBCMWLANCore *this)
{
  if (AppleBCMWLANConfigManager::isEnabledEnhancedRoaming(*(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472)))
  {
    AppleBCMWLANCore::featureFlagSetBit(this, 20);
    AppleBCMWLANConfigManager::configureEnterpriseRoamParams(*(AppleBCMWLANConfigManager **)(*((void *)this + 9)
                                                                                           + 5472));
  }
  else
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v3 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logNotice(v3, "[dk] %s@%d:%d RoamScan feature is not enabled for this platform \n", "configureRoam", 42141, 42141);
      }
    }
    AppleBCMWLANCore::featureFlagClearBit(this, 20);
  }
  return 0;
}

uint64_t AppleBCMWLANCore::configureSecurityParams(AppleBCMWLANCore *this)
{
  if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 128))(this))
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v16, "[dk] %s@%d:Interface is not available\n", "configureSecurityParams", 42159);
      }
    }
    return 0;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 0))
  {
LABEL_3:
    AppleBCMWLANCore::enablePTKKeyBuffer(this);
    return 0;
  }
  unsigned int v22 = 1;
  uint64_t v4 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  uint64_t v20 = (int *)&v22;
  uint64_t v21 = 4;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"sup_wpa", (uint64_t)&v20, 0, 0);
  if (!v5)
  {
    int v19 = -1;
    uint64_t v9 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    uint64_t v20 = &v19;
    uint64_t v21 = 4;
    int v10 = AppleBCMWLANCommander::runIOVarSet(v9, (uint64_t)"sup_wpa2_eapver", (uint64_t)&v20, 0, 0);
    if (v10)
    {
      int v11 = v10;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          __int16 v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v17, "[dk] %s@%d: Error: Unable to set iovar sup_auto_eapver %x\n", "configureSecurityParams", 42187, v11);
        }
      }
    }
    int v18 = 1;
    uint64_t v12 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    uint64_t v20 = &v18;
    uint64_t v21 = 4;
    int v13 = AppleBCMWLANCommander::runIOVarSet(v12, (uint64_t)"sup_m3sec_ok", (uint64_t)&v20, 0, 0);
    if (v13)
    {
      int v14 = v13;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v15, "[dk] %s@%d: Error: Unable to set iovar sup_m3sec_ok %x\n", "configureSecurityParams", 42194, v14);
        }
      }
    }
    goto LABEL_3;
  }
  uint64_t v2 = v5;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      int v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t v7 = v22;
      uint64_t v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v2);
      CCLogStream::logCrit(v6, "[dk] %s@%d: sup_wpa(%lu) failed, error %s\n", "configureSecurityParams", 42169, v7, v8);
    }
  }
  return v2;
}

uint64_t AppleBCMWLANCore::configureDefaultAvgRssiParameters(AppleBCMWLANCore *this)
{
  int v20 = 520;
  uint64_t v2 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  int v18 = &v20;
  uint64_t v19 = 4;
  uint64_t v3 = AppleBCMWLANCommander::runIOVarSet(v2, (uint64_t)"rssi_win", (uint64_t)&v18, 0, 0);
  if (v3 != -469794537 && v3 != 0)
  {
    uint64_t v5 = v3;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int v12 = v20;
        int v13 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
        CCLogStream::logAlert(v11, "[dk] %s@%d:Unable to set rssi window to %d: %s\n", "configureDefaultAvgRssiParameters", 50179, v12, v13);
      }
    }
  }
  int v17 = 8;
  int v6 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  int v18 = &v17;
  uint64_t v19 = 4;
  uint64_t v7 = AppleBCMWLANCommander::runIOVarSet(v6, (uint64_t)"snr_win", (uint64_t)&v18, 0, 0);
  if (v7 != -469794537 && v7 != 0)
  {
    uint64_t v9 = v7;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int v15 = v17;
        unint64_t v16 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v9);
        CCLogStream::logAlert(v14, "[dk] %s@%d:Unable to set snr window to %d: %s\n", "configureDefaultAvgRssiParameters", 50184, v15, v16);
      }
    }
  }
  return 0;
}

uint64_t AppleBCMWLANCore::configureHS20IE(AppleBCMWLANCore *this)
{
  uint64_t result = AppleBCMWLANCore::featureFlagIsBitSet(this, 17);
  if (result)
  {
    if (AppleBCMWLANGASAdapter::setHotspot20CapsIndicationIE(*(AppleBCMWLANGASAdapter **)(*((void *)this + 9) + 5480)))
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v3 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logWarn(v3, "[dk] %s@%d:Failed to configure HS20 Capability Indication IE\n", "configureHS20IE", 52377);
        }
      }
    }
    uint64_t result = AppleBCMWLANGASAdapter::setHotspot20InterworkingIE(*(AppleBCMWLANGASAdapter **)(*((void *)this + 9)
                                                                                           + 5480));
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (result)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          return CCLogStream::logWarn(v4, "[dk] %s@%d:Failed to configure HS20 Interworking IE\n", "configureHS20IE", 52380);
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::configureEarlyBeaconDetect(AppleBCMWLANCore *this)
{
  if (!AppleBCMWLANCore::featureFlagIsBitSet(this, 26)) {
    return 0;
  }
  int v9 = 4000;
  uint64_t v2 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  v8[0]  = &v9;
  v8[1]  = 4;
  uint64_t v3 = AppleBCMWLANCommander::runIOVarSet(v2, (uint64_t)"early_bcn_thresh", (uint64_t)v8, 0, 0);
  uint64_t v4 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (v3)
  {
    if (v4)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v3);
        CCLogStream::logAlert(v5, "[dk] %s@%d: Error: cannot set early Beacon Threshold to %d : ret %x: %s\n");
      }
    }
  }
  else if (v4)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v7, "[dk] %s@%d: early_bcn_thresh %u\n");
    }
  }
  return v3;
}

void AppleBCMWLANCore::configureTrgDisc(AppleBCMWLANCore *this)
{
  AppleBCMWLANCore::featureFlagSetBit(this, 39);
  int v2 = AppleBCMWLANLQM::checkInfraStaPeerStatsSupport(*(AppleBCMWLANLQM **)(*((void *)this + 9) + 5608));
  if (v2 != -469794537) {
    *(unsigned char *)(*((void *)this + 9) + 14224)  = 1;
  }
  uint64_t v3 = *(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472);
  if (v3
    && (isEnhancedTrgDiscEnabled  = AppleBCMWLANConfigManager::isEnhancedTrgDiscEnabled(v3), v2 != -469794537)
    && isEnhancedTrgDiscEnabled)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logNotice(v5, "[dk] %s@%d:Enabling Enhanced Trigger Disconnect Mode\n", "configureTrgDisc", 52480);
      }
    }
  }
  else
  {
    AppleBCMWLANCore::featureFlagClearBit(this, 39);
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v13, "[dk] %s@%d:Disabling Enhanced Trigger Disconnect Mode\n", "configureTrgDisc", 52478);
      }
    }
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 39))
  {
    int v23 = 0;
    int v6 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    uint64_t v21 = &v23;
    uint64_t v22 = 4;
    uint64_t v7 = AppleBCMWLANCommander::runIOVarSet(v6, (uint64_t)"lq_rssi_delta", (uint64_t)&v21, 0, 0);
    if (v7 != -469794537 && v7 != 0)
    {
      uint64_t v9 = v7;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          int v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          int v15 = v23;
          unint64_t v16 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v9);
          CCLogStream::logAlert(v14, "[dk] %s@%d:Unable to set lq_rssi_delta to %d: %s\n", "configureTrgDisc", 52488, v15, v16);
        }
      }
    }
    int v20 = 0;
    int v10 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    uint64_t v21 = &v20;
    uint64_t v22 = 4;
    uint64_t v11 = AppleBCMWLANCommander::runIOVarSet(v10, (uint64_t)"lq_max_bcn_thresh", (uint64_t)&v21, 0, 0);
    if (v11 != -469794537)
    {
      uint64_t v12 = v11;
      if (v11)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            int v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            int v18 = v20;
            uint64_t v19 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v12);
            CCLogStream::logAlert(v17, "[dk] %s@%d:Unable to set lq_max_bcn_thresh to %d: %s\n", "configureTrgDisc", 52494, v18, v19);
          }
        }
      }
    }
  }
  if (AppleBCMWLANNetAdapter::checkRoamCacheQuerySupport(*(AppleBCMWLANNetAdapter **)(*((void *)this + 9) + 5600)) == -469794537) {
    AppleBCMWLANCore::featureFlagClearBit(this, 58);
  }
  else {
    AppleBCMWLANCore::featureFlagSetBit(this, 58);
  }
  if (AppleBCMWLANNetAdapter::checkCcaStatsExtSupport(*(AppleBCMWLANCore ****)(*((void *)this + 9)
                                                                                            + 5600)) == -469794537)
    AppleBCMWLANCore::featureFlagClearBit(this, 72);
  else {
    AppleBCMWLANCore::featureFlagSetBit(this, 72);
  }
}

void *AppleBCMWLANCore::setMWSCoexIoVarsAsync_mws_coex_bitmap(void *this, OSObject *anObject, char a3)
{
  uint64_t v3 = this;
  if (a3)
  {
LABEL_21:
    v19[0]  = v3[9] + 8844;
    v19[1]  = 4;
    void v19[2] = "mws_coex_bitmap";
    uint64_t v18 = (*(uint64_t (**)(void *, OSObject *))(*v3 + 104))(v3, anObject);
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t (*)(AppleBCMWLANCore *, void *), void *, void, void, void))(*(void *)v18 + 56))(v18, AppleBCMWLANCore::handleSetCoexIoVarNotificationGated, v19, 0, 0, 0);
  }
  if (!anObject) {
    return this;
  }
  uint64_t v4 = OSMetaClassBase::safeMetaCast(anObject, gOSArrayMetaClass);
  if (v4)
  {
    uint64_t v5 = (const OSArray *)v4;
    int v6 = ((uint64_t (*)(OSMetaClassBase *))v4->__vftable[1].Dispatch)(v4);
    if (v6)
    {
      int v7 = v6;
      uint32_t v8 = 0;
      int v9 = 0;
      do
      {
        Object  = OSArray::getObject(v5, v8);
        uint64_t v11 = (const OSDictionary *)OSMetaClassBase::safeMetaCast(Object, gOSDictionaryMetaClass);
        if (v11)
        {
          uint64_t v12 = OSDictionary::getObject(v11, "MWS_Channel_Number");
          int v13 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v12, gOSNumberMetaClass);
          if (v13)
          {
            uint32_t v14 = OSNumber::unsigned32BitValue(v13);
            if (v14)
            {
              uint32_t v15 = v14;
              if (v14 > 0xE)
              {
                if ((*(uint64_t (**)(void *))(*v3 + 1848))(v3))
                {
                  (*(void (**)(void *))(*v3 + 1848))(v3);
                  if (CCLogStream::shouldLog())
                  {
                    unint64_t v16 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
                    CCLogStream::logAlert(v16, "[dk] %s@%d:Error: mws_coex_bitmap invalid channel(%d - %d/%d)\n", "setMWSCoexIoVarsAsync_mws_coex_bitmap", 10233, v15, v8 + 1, v7);
                  }
                }
              }
              else
              {
                v9 |= 1 << (v14 - 1);
              }
            }
          }
        }
        ++v8;
      }
      while (v7 != v8);
    }
    else
    {
      int v9 = 0;
    }
    *(_DWORD *)(v3[9] + 8844)  = v9;
    *(unsigned char *)(v3[9] + 8848)  = 1;
    goto LABEL_21;
  }
  this  = (void *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
  if (this)
  {
    (*(void (**)(void *))(*v3 + 1848))(v3);
    this  = (void *)CCLogStream::shouldLog();
    if (this)
    {
      int v17 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
      return (void *)CCLogStream::logAlert(v17, "[dk] %s@%d:Error: kMWSCoexIoVarCmd_mws_coex_bitmap  -- empty array\n", "setMWSCoexIoVarsAsync_mws_coex_bitmap", 10204);
    }
  }
  return this;
}

void *AppleBCMWLANCore::setMWSCoexIoVarsAsync_mws_aggCh_params(void *this, OSObject *anObject, char a3)
{
  uint64_t v3 = this;
  if (a3)
  {
LABEL_49:
    v32[0]  = v3[9] + 8850;
    v32[1]  = 30;
    void v32[2] = "mws_params";
    uint64_t v25 = (*(uint64_t (**)(void *, OSObject *))(*v3 + 104))(v3, anObject);
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t (*)(AppleBCMWLANCore *, void *), void *, void, void, void))(*(void *)v25 + 56))(v25, AppleBCMWLANCore::handleSetCoexIoVarNotificationGated, v32, 0, 0, 0);
  }
  if (!anObject) {
    return this;
  }
  uint64_t v4 = (const OSDictionary *)OSMetaClassBase::safeMetaCast(anObject, gOSDictionaryMetaClass);
  if (v4)
  {
    uint64_t v5 = v4;
    Object  = OSDictionary::getObject(v4, "MWS_Aggressor_Channel_Enable");
    if (Object)
    {
      int v7 = (const OSNumber *)OSMetaClassBase::safeMetaCast(Object, gOSNumberMetaClass);
      if (v7)
      {
        uint8_t v8 = OSNumber::unsigned8BitValue(v7);
        goto LABEL_14;
      }
    }
    else if ((*(uint64_t (**)(void *))(*v3 + 1848))(v3))
    {
      (*(void (**)(void *))(*v3 + 1848))(v3);
      if (CCLogStream::shouldLog())
      {
        uint64_t v26 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
        CCLogStream::logAlert(v26, "[dk] %s@%d:Error:: ch params -- enable NULL\n", "setMWSCoexIoVarsAsync_mws_aggCh_params", 10446);
      }
    }
    uint8_t v8 = 0;
LABEL_14:
    int v10 = OSDictionary::getObject(v5, "MWS_Aggressor_Channel_RxCenterFrequency");
    if (v10)
    {
      uint64_t v11 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v10, gOSNumberMetaClass);
      if (v11)
      {
        uint16_t v12 = OSNumber::unsigned16BitValue(v11);
        goto LABEL_21;
      }
    }
    else if ((*(uint64_t (**)(void *))(*v3 + 1848))(v3))
    {
      (*(void (**)(void *))(*v3 + 1848))(v3);
      if (CCLogStream::shouldLog())
      {
        uint64_t v27 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
        CCLogStream::logAlert(v27, "[dk] %s@%d:Error: ch params -- rx center freq NULL\n", "setMWSCoexIoVarsAsync_mws_aggCh_params", 10455);
      }
    }
    uint16_t v12 = 0;
LABEL_21:
    int v13 = OSDictionary::getObject(v5, "MWS_Aggressor_Channel_TxCenterFrequency");
    if (v13)
    {
      uint32_t v14 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v13, gOSNumberMetaClass);
      if (v14)
      {
        uint16_t v15 = OSNumber::unsigned16BitValue(v14);
        goto LABEL_28;
      }
    }
    else if ((*(uint64_t (**)(void *))(*v3 + 1848))(v3))
    {
      (*(void (**)(void *))(*v3 + 1848))(v3);
      if (CCLogStream::shouldLog())
      {
        uint64_t v28 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
        CCLogStream::logAlert(v28, "[dk] %s@%d:Error: ch params -- tx center freq NULL\n", "setMWSCoexIoVarsAsync_mws_aggCh_params", 10464);
      }
    }
    uint16_t v15 = 0;
LABEL_28:
    unint64_t v16 = OSDictionary::getObject(v5, "MWS_Aggressor_Channel_RxChannelBandwidth");
    if (v16)
    {
      int v17 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v16, gOSNumberMetaClass);
      if (v17)
      {
        uint16_t v18 = OSNumber::unsigned16BitValue(v17);
        goto LABEL_35;
      }
    }
    else if ((*(uint64_t (**)(void *))(*v3 + 1848))(v3))
    {
      (*(void (**)(void *))(*v3 + 1848))(v3);
      if (CCLogStream::shouldLog())
      {
        uint64_t v29 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
        CCLogStream::logAlert(v29, "[dk] %s@%d:Error:: ch params -- rx bw NULL\n", "setMWSCoexIoVarsAsync_mws_aggCh_params", 10473);
      }
    }
    uint16_t v18 = 0;
LABEL_35:
    uint64_t v19 = OSDictionary::getObject(v5, "MWS_Aggressor_Channel_TxChannelBandwidth");
    if (v19)
    {
      int v20 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v19, gOSNumberMetaClass);
      if (v20)
      {
        uint16_t v21 = OSNumber::unsigned16BitValue(v20);
LABEL_42:
        uint64_t v22 = OSDictionary::getObject(v5, "MWS_Aggressor_Channel_Type");
        if (v22)
        {
          int v23 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v22, gOSNumberMetaClass);
          if (v23) {
            LOBYTE(v2AppleBCMWLANCommandMonitor::free(this - 3) = OSNumber::unsigned8BitValue(v23);
          }
        }
        else
        {
          int v23 = (const OSNumber *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
          if (v23)
          {
            (*(void (**)(void *))(*v3 + 1848))(v3);
            LODWORD(v2AppleBCMWLANCommandMonitor::free(this - 3) = CCLogStream::shouldLog();
            if (v23)
            {
              uint64_t v31 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
              CCLogStream::logAlert(v31, "[dk] %s@%d:Error: ch params -- type NULL\n", "setMWSCoexIoVarsAsync_mws_aggCh_params", 10491);
              LOBYTE(v2AppleBCMWLANCommandMonitor::free(this - 3) = 0;
            }
          }
        }
        uint64_t v24 = v3[9] + 8850;
        *(_WORD *)uint64_t v24 = v12;
        *(_WORD *)(v24 + 2)  = v15;
        *(_WORD *)(v24 + 4)  = v18;
        *(_WORD *)(v24 + 6)  = v21;
        *(unsigned char *)(v24 + 8)  = v8;
        *(unsigned char *)(v24 + 9)  = (_BYTE)v23;
        *(unsigned char *)(v3[9] + 8860)  = 1;
        goto LABEL_49;
      }
    }
    else if ((*(uint64_t (**)(void *))(*v3 + 1848))(v3))
    {
      (*(void (**)(void *))(*v3 + 1848))(v3);
      if (CCLogStream::shouldLog())
      {
        uint64_t v30 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
        CCLogStream::logAlert(v30, "[dk] %s@%d:Error: ch params -- tx bw NULL\n", "setMWSCoexIoVarsAsync_mws_aggCh_params", 10482);
      }
    }
    uint16_t v21 = 0;
    goto LABEL_42;
  }
  this  = (void *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
  if (this)
  {
    (*(void (**)(void *))(*v3 + 1848))(v3);
    this  = (void *)CCLogStream::shouldLog();
    if (this)
    {
      int v9 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
      return (void *)CCLogStream::logAlert(v9, "[dk] %s@%d:Error: kMWSCoexIoVarCmd_mws_params  -- null dict\n", "setMWSCoexIoVarsAsync_mws_aggCh_params", 10432);
    }
  }
  return this;
}

void *AppleBCMWLANCore::setMWSCoexIoVarsAsync_mws_wciSig_config(void *this, OSObject *anObject, char a3)
{
  uint64_t v3 = this;
  memset(v68, 170, sizeof(v68));
  if (a3)
  {
LABEL_112:
    v68[0]  = v3[9] + 8862;
    v68[1]  = 30;
    void v68[2] = "wci2_config";
    uint64_t v45 = (*(uint64_t (**)(void *, OSObject *))(*v3 + 104))(v3, anObject);
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t (*)(AppleBCMWLANCore *, void *), void *, void, void, void))(*(void *)v45 + 56))(v45, AppleBCMWLANCore::handleSetCoexIoVarNotificationGated, v68, 0, 0, 0);
  }
  if (!anObject) {
    return this;
  }
  uint64_t v4 = (const OSDictionary *)OSMetaClassBase::safeMetaCast(anObject, gOSDictionaryMetaClass);
  if (v4)
  {
    uint64_t v5 = v4;
    Object  = OSDictionary::getObject(v4, "MWS_WCI_Signaling_RxAssertOffset");
    if (Object)
    {
      int v7 = (const OSNumber *)OSMetaClassBase::safeMetaCast(Object, gOSNumberMetaClass);
      if (v7)
      {
        uint16_t v67 = OSNumber::unsigned16BitValue(v7);
        goto LABEL_14;
      }
    }
    else if ((*(uint64_t (**)(void *))(*v3 + 1848))(v3))
    {
      (*(void (**)(void *))(*v3 + 1848))(v3);
      if (CCLogStream::shouldLog())
      {
        uint64_t v46 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
        CCLogStream::logAlert(v46, "[dk] %s@%d:Error:  mws signalling --  rx assert offset is NULL \n", "setMWSCoexIoVarsAsync_mws_wciSig_config", 10280);
      }
    }
    uint16_t v67 = 0;
LABEL_14:
    int v9 = OSDictionary::getObject(v5, "MWS_WCI_Signaling_RxAssertJitter");
    if (v9)
    {
      int v10 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v9, gOSNumberMetaClass);
      if (v10)
      {
        uint16_t v66 = OSNumber::unsigned16BitValue(v10);
        goto LABEL_21;
      }
    }
    else if ((*(uint64_t (**)(void *))(*v3 + 1848))(v3))
    {
      (*(void (**)(void *))(*v3 + 1848))(v3);
      if (CCLogStream::shouldLog())
      {
        unsigned int v47 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
        CCLogStream::logAlert(v47, "[dk] %s@%d:Error:  mws signalling -- rx assert jitter NULL \n", "setMWSCoexIoVarsAsync_mws_wciSig_config", 10289);
      }
    }
    uint16_t v66 = 0;
LABEL_21:
    uint64_t v11 = OSDictionary::getObject(v5, "MWS_WCI_Signaling_RxDeAssertOffset");
    if (v11)
    {
      uint16_t v12 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v11, gOSNumberMetaClass);
      if (v12)
      {
        uint16_t v65 = OSNumber::unsigned16BitValue(v12);
        goto LABEL_28;
      }
    }
    else if ((*(uint64_t (**)(void *))(*v3 + 1848))(v3))
    {
      (*(void (**)(void *))(*v3 + 1848))(v3);
      if (CCLogStream::shouldLog())
      {
        int v48 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
        CCLogStream::logAlert(v48, "[dk] %s@%d:Error:  mws signalling --  rx de-assert offset  NULL \n", "setMWSCoexIoVarsAsync_mws_wciSig_config", 10298);
      }
    }
    uint16_t v65 = 0;
LABEL_28:
    int v13 = OSDictionary::getObject(v5, "MWS_WCI_Signaling_RxDeAssertJitter");
    if (v13)
    {
      uint32_t v14 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v13, gOSNumberMetaClass);
      if (v14)
      {
        uint16_t v64 = OSNumber::unsigned16BitValue(v14);
        goto LABEL_35;
      }
    }
    else if ((*(uint64_t (**)(void *))(*v3 + 1848))(v3))
    {
      (*(void (**)(void *))(*v3 + 1848))(v3);
      if (CCLogStream::shouldLog())
      {
        int v49 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
        CCLogStream::logAlert(v49, "[dk] %s@%d:Error:  mws signalling -- rx de-assert jitter NULL \n", "setMWSCoexIoVarsAsync_mws_wciSig_config", 10307);
      }
    }
    uint16_t v64 = 0;
LABEL_35:
    uint16_t v15 = OSDictionary::getObject(v5, "MWS_WCI_Signaling_TxAssertOffset");
    if (v15)
    {
      unint64_t v16 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v15, gOSNumberMetaClass);
      if (v16)
      {
        uint16_t v63 = OSNumber::unsigned16BitValue(v16);
        goto LABEL_42;
      }
    }
    else if ((*(uint64_t (**)(void *))(*v3 + 1848))(v3))
    {
      (*(void (**)(void *))(*v3 + 1848))(v3);
      if (CCLogStream::shouldLog())
      {
        uint64_t v50 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
        CCLogStream::logAlert(v50, "[dk] %s@%d:Error:  mws signalling --  tx assert offset  NULL \n", "setMWSCoexIoVarsAsync_mws_wciSig_config", 10316);
      }
    }
    uint16_t v63 = 0;
LABEL_42:
    int v17 = OSDictionary::getObject(v5, "MWS_WCI_Signaling_TxAssertJitter");
    if (v17)
    {
      uint16_t v18 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v17, gOSNumberMetaClass);
      if (v18)
      {
        uint16_t v62 = OSNumber::unsigned16BitValue(v18);
        goto LABEL_49;
      }
    }
    else if ((*(uint64_t (**)(void *))(*v3 + 1848))(v3))
    {
      (*(void (**)(void *))(*v3 + 1848))(v3);
      if (CCLogStream::shouldLog())
      {
        uint64_t v51 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
        CCLogStream::logAlert(v51, "[dk] %s@%d:Error:  mws signalling -- tx assert jitter NULL \n", "setMWSCoexIoVarsAsync_mws_wciSig_config", 10325);
      }
    }
    uint16_t v62 = 0;
LABEL_49:
    uint64_t v19 = OSDictionary::getObject(v5, "MWS_WCI_Signaling_TxDeAssertOffset");
    if (v19)
    {
      int v20 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v19, gOSNumberMetaClass);
      if (v20)
      {
        uint16_t v61 = OSNumber::unsigned16BitValue(v20);
        goto LABEL_56;
      }
    }
    else if ((*(uint64_t (**)(void *))(*v3 + 1848))(v3))
    {
      (*(void (**)(void *))(*v3 + 1848))(v3);
      if (CCLogStream::shouldLog())
      {
        int v52 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
        CCLogStream::logAlert(v52, "[dk] %s@%d:Error:  mws signalling --  tx de-assert offset  NULL \n", "setMWSCoexIoVarsAsync_mws_wciSig_config", 10334);
      }
    }
    uint16_t v61 = 0;
LABEL_56:
    uint16_t v21 = OSDictionary::getObject(v5, "MWS_WCI_Signaling_TxDeAssertJitter");
    if (v21)
    {
      uint64_t v22 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v21, gOSNumberMetaClass);
      if (v22)
      {
        uint16_t v23 = OSNumber::unsigned16BitValue(v22);
        goto LABEL_63;
      }
    }
    else if ((*(uint64_t (**)(void *))(*v3 + 1848))(v3))
    {
      (*(void (**)(void *))(*v3 + 1848))(v3);
      if (CCLogStream::shouldLog())
      {
        int v53 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
        CCLogStream::logAlert(v53, "[dk] %s@%d:Error:  mws signalling -- tx de-assert jitter NULL \n", "setMWSCoexIoVarsAsync_mws_wciSig_config", 10343);
      }
    }
    uint16_t v23 = 0;
LABEL_63:
    uint64_t v24 = OSDictionary::getObject(v5, "MWS_WCI_Signaling_PatternAssertOffset");
    if (v24)
    {
      uint64_t v25 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v24, gOSNumberMetaClass);
      if (v25)
      {
        uint16_t v26 = OSNumber::unsigned16BitValue(v25);
        goto LABEL_70;
      }
    }
    else if ((*(uint64_t (**)(void *))(*v3 + 1848))(v3))
    {
      (*(void (**)(void *))(*v3 + 1848))(v3);
      if (CCLogStream::shouldLog())
      {
        int v54 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
        CCLogStream::logAlert(v54, "[dk] %s@%d:Error:  mws signalling --  pattern assert offset  NULL \n", "setMWSCoexIoVarsAsync_mws_wciSig_config", 10352);
      }
    }
    uint16_t v26 = 0;
LABEL_70:
    uint64_t v27 = OSDictionary::getObject(v5, "MWS_WCI_Signaling_PatternAssertJitter");
    if (v27)
    {
      uint64_t v28 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v27, gOSNumberMetaClass);
      if (v28)
      {
        uint16_t v29 = OSNumber::unsigned16BitValue(v28);
        goto LABEL_77;
      }
    }
    else if ((*(uint64_t (**)(void *))(*v3 + 1848))(v3))
    {
      (*(void (**)(void *))(*v3 + 1848))(v3);
      if (CCLogStream::shouldLog())
      {
        uint64_t v55 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
        CCLogStream::logAlert(v55, "[dk] %s@%d:Error:  mws signalling -- pattern assert jitter NULL \n", "setMWSCoexIoVarsAsync_mws_wciSig_config", 10361);
      }
    }
    uint16_t v29 = 0;
LABEL_77:
    uint64_t v30 = OSDictionary::getObject(v5, "MWS_WCI_Signaling_InactivityAssertOffset");
    if (v30)
    {
      uint64_t v31 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v30, gOSNumberMetaClass);
      if (v31)
      {
        uint16_t v32 = OSNumber::unsigned16BitValue(v31);
        goto LABEL_84;
      }
    }
    else if ((*(uint64_t (**)(void *))(*v3 + 1848))(v3))
    {
      (*(void (**)(void *))(*v3 + 1848))(v3);
      if (CCLogStream::shouldLog())
      {
        OSObjectInterface_vtbl v56 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
        CCLogStream::logAlert(v56, "[dk] %s@%d:Error:  mws signalling --  inactivity assert offset  NULL \n", "setMWSCoexIoVarsAsync_mws_wciSig_config", 10370);
      }
    }
    uint16_t v32 = 0;
LABEL_84:
    int v33 = OSDictionary::getObject(v5, "MWS_WCI_Signaling_InactivityAssertJitter");
    if (v33)
    {
      long long v34 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v33, gOSNumberMetaClass);
      if (v34)
      {
        uint16_t v35 = OSNumber::unsigned16BitValue(v34);
        goto LABEL_91;
      }
    }
    else if ((*(uint64_t (**)(void *))(*v3 + 1848))(v3))
    {
      (*(void (**)(void *))(*v3 + 1848))(v3);
      if (CCLogStream::shouldLog())
      {
        OSObjectInterface_vtbl v57 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
        CCLogStream::logAlert(v57, "[dk] %s@%d:Error:  mws signalling -- inactivity assert jitter NULL \n", "setMWSCoexIoVarsAsync_mws_wciSig_config", 10379);
      }
    }
    uint16_t v35 = 0;
LABEL_91:
    __int16 v36 = OSDictionary::getObject(v5, "MWS_WCI_Signaling_ScanFrequencyAssertOffset");
    if (v36)
    {
      long long v37 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v36, gOSNumberMetaClass);
      if (v37)
      {
        uint16_t v38 = OSNumber::unsigned16BitValue(v37);
        goto LABEL_98;
      }
    }
    else if ((*(uint64_t (**)(void *))(*v3 + 1848))(v3))
    {
      (*(void (**)(void *))(*v3 + 1848))(v3);
      if (CCLogStream::shouldLog())
      {
        uint64_t v58 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
        CCLogStream::logAlert(v58, "[dk] %s@%d:Error: signalling --  scan freq assert offset  NULL \n", "setMWSCoexIoVarsAsync_mws_wciSig_config", 10388);
      }
    }
    uint16_t v38 = 0;
LABEL_98:
    uint64_t v39 = OSDictionary::getObject(v5, "MWS_WCI_Signaling_ScanFrequencyAssertJitter");
    if (v39)
    {
      unsigned int v40 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v39, gOSNumberMetaClass);
      if (v40)
      {
        uint16_t v41 = OSNumber::unsigned16BitValue(v40);
LABEL_105:
        uint64_t v42 = OSDictionary::getObject(v5, "MWS_WCI_Signaling_PriorityAssertOffsetRequest");
        if (v42)
        {
          uint64_t v43 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v42, gOSNumberMetaClass);
          if (v43) {
            LOWORD(v4AppleBCMWLANCommandMonitor::free(this - 3) = OSNumber::unsigned16BitValue(v43);
          }
        }
        else
        {
          uint64_t v43 = (const OSNumber *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
          if (v43)
          {
            (*(void (**)(void *))(*v3 + 1848))(v3);
            LODWORD(v4AppleBCMWLANCommandMonitor::free(this - 3) = CCLogStream::shouldLog();
            if (v43)
            {
              uint64_t v60 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
              CCLogStream::logAlert(v60, "[dk] %s@%d:Error:  mws signalling -- signal priority assert jitter NULL \n", "setMWSCoexIoVarsAsync_mws_wciSig_config", 10406);
              LOWORD(v4AppleBCMWLANCommandMonitor::free(this - 3) = 0;
            }
          }
        }
        uint64_t v44 = (uint16_t *)(v3[9] + 8862);
        *uint64_t v44 = v67;
        v44[1]  = v66;
        v44[2]  = v65;
        v44[3]  = v64;
        v44[4]  = v63;
        v44[5]  = v62;
        v44[6]  = v61;
        v44[7]  = v23;
        v44[8]  = v26;
        v44[9]  = v29;
        v44[10]  = v32;
        v44[11]  = v35;
        v44[12]  = v38;
        v44[13]  = v41;
        v44[14]  = (unsigned __int16)v43;
        *(unsigned char *)(v3[9] + 8892)  = 1;
        goto LABEL_112;
      }
    }
    else if ((*(uint64_t (**)(void *))(*v3 + 1848))(v3))
    {
      (*(void (**)(void *))(*v3 + 1848))(v3);
      if (CCLogStream::shouldLog())
      {
        uint64_t v59 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
        CCLogStream::logAlert(v59, "[dk] %s@%d:Error:  mws signalling -- scan freq assert jitter NULL \n", "setMWSCoexIoVarsAsync_mws_wciSig_config", 10397);
      }
    }
    uint16_t v41 = 0;
    goto LABEL_105;
  }
  this  = (void *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
  if (this)
  {
    (*(void (**)(void *))(*v3 + 1848))(v3);
    this  = (void *)CCLogStream::shouldLog();
    if (this)
    {
      uint8_t v8 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
      return (void *)CCLogStream::logAlert(v8, "[dk] %s@%d:Error: kMWSCoexIoVarCmd_wci2_config  -- null dict\n", "setMWSCoexIoVarsAsync_mws_wciSig_config", 10266);
    }
  }
  return this;
}

void *AppleBCMWLANCore::setMWSCoexIoVarsAsync_mws_wlanrxpri_threshold(void *this, OSObject *anObject, char a3)
{
  uint64_t v3 = this;
  if (a3) {
    goto LABEL_5;
  }
  if (!anObject) {
    return this;
  }
  uint64_t v4 = (const OSNumber *)OSMetaClassBase::safeMetaCast(anObject, gOSNumberMetaClass);
  if (v4)
  {
    *(_DWORD *)(v3[9] + 8896)  = OSNumber::unsigned32BitValue(v4);
    *(unsigned char *)(v3[9] + 8900)  = 1;
LABEL_5:
    v7[0]  = v3[9] + 8896;
    v7[1]  = 4;
    unsigned char v7[2] = "mws_wlanrxpri_thresh";
    uint64_t v5 = (*(uint64_t (**)(void *, OSObject *))(*v3 + 104))(v3, anObject);
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t (*)(AppleBCMWLANCore *, void *), void *, void, void, void))(*(void *)v5 + 56))(v5, AppleBCMWLANCore::handleSetCoexIoVarNotificationGated, v7, 0, 0, 0);
  }
  this  = (void *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
  if (this)
  {
    (*(void (**)(void *))(*v3 + 1848))(v3);
    this  = (void *)CCLogStream::shouldLog();
    if (this)
    {
      int v6 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
      return (void *)CCLogStream::logAlert(v6, "[dk] %s@%d:Error: null wlanrxpri_threshold\n", "setMWSCoexIoVarsAsync_mws_wlanrxpri_threshold", 10516);
    }
  }
  return this;
}

void *AppleBCMWLANCore::setMWSCoexIoVarsAsync_mws_coex_bitmap_V2(void *this, OSDictionary *a2, char a3)
{
  uint64_t v3 = this;
  if ((a3 & 1) == 0)
  {
    if (!a2) {
      return this;
    }
    Object  = OSDictionary::getObject(a2, "IO80211InterfaceMwsCoex2GBitmapV2");
    if (Object)
    {
      int v6 = (const OSNumber *)OSMetaClassBase::safeMetaCast(Object, gOSNumberMetaClass);
      *(_WORD *)(v3[9] + 8902)  = OSNumber::unsigned16BitValue(v6);
      if ((*(uint64_t (**)(void *))(*v3 + 1848))(v3))
      {
        (*(void (**)(void *))(*v3 + 1848))(v3);
        if (CCLogStream::shouldLog())
        {
          uint32_t v14 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
          CCLogStream::logInfo(v14, "[dk] %s@%d:MWS_BITMAP_V2: 2G -------->  0x%x\n", "setMWSCoexIoVarsAsync_mws_coex_bitmap_V2", 10159, *(unsigned __int16 *)(v3[9] + 8902));
        }
      }
    }
    int v7 = OSDictionary::getObject(a2, "IO80211InterfaceMwsCoex5GBitmapLowV2");
    if (v7)
    {
      uint8_t v8 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v7, gOSNumberMetaClass);
      *(_WORD *)(v3[9] + 8904)  = OSNumber::unsigned16BitValue(v8);
      if ((*(uint64_t (**)(void *))(*v3 + 1848))(v3))
      {
        (*(void (**)(void *))(*v3 + 1848))(v3);
        if (CCLogStream::shouldLog())
        {
          uint16_t v15 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
          CCLogStream::logInfo(v15, "[dk] %s@%d:MWS_BITMAP_V2: 5G-Low --------> 0x%x\n", "setMWSCoexIoVarsAsync_mws_coex_bitmap_V2", 10166, *(unsigned __int16 *)(v3[9] + 8904));
        }
      }
    }
    int v9 = OSDictionary::getObject(a2, "IO80211InterfaceMwsCoex5GBitmapMidV2");
    if (v9)
    {
      int v10 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v9, gOSNumberMetaClass);
      *(_WORD *)(v3[9] + 8906)  = OSNumber::unsigned16BitValue(v10);
      if ((*(uint64_t (**)(void *))(*v3 + 1848))(v3))
      {
        (*(void (**)(void *))(*v3 + 1848))(v3);
        if (CCLogStream::shouldLog())
        {
          unint64_t v16 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
          CCLogStream::logInfo(v16, "[dk] %s@%d:MWS_BITMAP_V2: 5G-Mid --------> 0x%x\n", "setMWSCoexIoVarsAsync_mws_coex_bitmap_V2", 10173, *(unsigned __int16 *)(v3[9] + 8906));
        }
      }
    }
    uint64_t v11 = OSDictionary::getObject(a2, "IO80211InterfaceMwsCoex5GBitmapHiV2");
    if (v11)
    {
      uint16_t v12 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v11, gOSNumberMetaClass);
      *(_WORD *)(v3[9] + 8908)  = OSNumber::unsigned16BitValue(v12);
      if ((*(uint64_t (**)(void *))(*v3 + 1848))(v3))
      {
        (*(void (**)(void *))(*v3 + 1848))(v3);
        if (CCLogStream::shouldLog())
        {
          int v17 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
          CCLogStream::logInfo(v17, "[dk] %s@%d:MWS_BITMAP_V2: 5G-HI --------> 0x%x\n", "setMWSCoexIoVarsAsync_mws_coex_bitmap_V2", 10180, *(unsigned __int16 *)(v3[9] + 8908));
        }
      }
    }
    *(unsigned char *)(v3[9] + 8910)  = 1;
  }
  v18[0]  = v3[9] + 8902;
  v18[1]  = 8;
  v18[2]  = "mws_coex_bitmap_v2";
  uint64_t v13 = (*(uint64_t (**)(void *, OSDictionary *))(*v3 + 104))(v3, a2);
  return (void *)(*(uint64_t (**)(uint64_t, uint64_t (*)(AppleBCMWLANCore *, void *), void *, void, void, void))(*(void *)v13 + 56))(v13, AppleBCMWLANCore::handleSetCoexIoVarNotificationGated, v18, 0, 0, 0);
}

void *AppleBCMWLANCore::setMWSCoexIoVarsRxPrioTimer(void *this, OSObject *anObject, int a3)
{
  uint64_t v3 = this;
  if (a3)
  {
LABEL_2:
    v8[0]  = v3[9] + 8912;
    v8[1]  = 4;
    void v8[2] = "mws_rx_prio_timer";
    uint64_t v4 = (*(uint64_t (**)(void *, OSObject *))(*v3 + 104))(v3, anObject);
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t (*)(AppleBCMWLANCore *, void *), void *, void, void, void))(*(void *)v4 + 56))(v4, AppleBCMWLANCore::handleSetCoexIoVarNotificationGated, v8, 0, 0, 0);
  }
  if (anObject)
  {
    uint64_t v5 = (const OSNumber *)OSMetaClassBase::safeMetaCast(anObject, gOSNumberMetaClass);
    if (v5)
    {
      *(_DWORD *)(v3[9] + 8912)  = OSNumber::unsigned32BitValue(v5);
      *(unsigned char *)(v3[9] + 8916)  = 1;
      if ((*(uint64_t (**)(void *))(*v3 + 1848))(v3))
      {
        (*(void (**)(void *))(*v3 + 1848))(v3);
        if (CCLogStream::shouldLog())
        {
          int v6 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
          CCLogStream::logAlert(v6, "[dk] %s@%d:--------------------> MWS RX Prio Timer %u\n", "setMWSCoexIoVarsRxPrioTimer", 10549, *(_DWORD *)(v3[9] + 8912));
        }
      }
      goto LABEL_2;
    }
    this  = (void *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
    if (this)
    {
      (*(void (**)(void *))(*v3 + 1848))(v3);
      this  = (void *)CCLogStream::shouldLog();
      if (this)
      {
        int v7 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
        return (void *)CCLogStream::logAlert(v7, "[dk] %s@%d:Error: null Rx Prio Timer value\n", "setMWSCoexIoVarsRxPrioTimer", 10543);
      }
    }
  }
  return this;
}

void *AppleBCMWLANCore::setMWSCoexIoVarsPwrLimitTimer(void *this, OSObject *anObject, int a3)
{
  uint64_t v3 = this;
  if (a3)
  {
LABEL_2:
    v8[0]  = v3[9] + 8920;
    v8[1]  = 4;
    void v8[2] = "mws_pwr_limit_timer";
    uint64_t v4 = (*(uint64_t (**)(void *, OSObject *))(*v3 + 104))(v3, anObject);
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t (*)(AppleBCMWLANCore *, void *), void *, void, void, void))(*(void *)v4 + 56))(v4, AppleBCMWLANCore::handleSetCoexIoVarNotificationGated, v8, 0, 0, 0);
  }
  if (anObject)
  {
    uint64_t v5 = (const OSNumber *)OSMetaClassBase::safeMetaCast(anObject, gOSNumberMetaClass);
    if (v5)
    {
      *(_DWORD *)(v3[9] + 8920)  = OSNumber::unsigned32BitValue(v5);
      *(unsigned char *)(v3[9] + 8924)  = 1;
      if ((*(uint64_t (**)(void *))(*v3 + 1848))(v3))
      {
        (*(void (**)(void *))(*v3 + 1848))(v3);
        if (CCLogStream::shouldLog())
        {
          int v6 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
          CCLogStream::logAlert(v6, "[dk] %s@%d:--------------------> MWS Power Limit %u\n", "setMWSCoexIoVarsPwrLimitTimer", 10577, *(_DWORD *)(v3[9] + 8920));
        }
      }
      goto LABEL_2;
    }
    this  = (void *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
    if (this)
    {
      (*(void (**)(void *))(*v3 + 1848))(v3);
      this  = (void *)CCLogStream::shouldLog();
      if (this)
      {
        int v7 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
        return (void *)CCLogStream::logAlert(v7, "[dk] %s@%d:Error: null Pwr Limit Timer value\n", "setMWSCoexIoVarsPwrLimitTimer", 10571);
      }
    }
  }
  return this;
}

uint64_t AppleBCMWLANCore::configureTxFailEventThreshold(AppleBCMWLANCore *this, int a2)
{
  uint64_t v3 = *(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472);
  if (v3 && AppleBCMWLANConfigManager::isTxFailEventSupported(v3))
  {
    if (a2)
    {
      if (AppleBCMWLANConfigManager::getTxFailMediumThreshold(*(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472))) {
        TxFailMediumThreshold  = AppleBCMWLANConfigManager::getTxFailMediumThreshold(*(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472));
      }
      else {
        TxFailMediumThreshold  = 10;
      }
    }
    else
    {
      TxFailMediumThreshold  = 0;
    }
    if (AppleBCMWLANConfigManager::getCachedTxFailEventConfigured(*(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472)) == TxFailMediumThreshold) {
      return 0;
    }
    uint64_t v8 = IOMallocZeroData();
    if (v8)
    {
      uint64_t v9 = v8;
      *(void *)uint64_t v8 = 0x4000A00080002;
      *(_DWORD *)(v8 + 8)  = TxFailMediumThreshold;
      int v10 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
      v18[0]  = v9;
      v18[1]  = 14;
      uint64_t v6 = AppleBCMWLANCommander::runIOVarSet(v10, (uint64_t)"hc", (uint64_t)v18, 0, 0);
      uint64_t v11 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (!v6)
      {
        if (v11)
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            int v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logNotice(v17, "[dk] %s@%d: txFail Event is configured with value:%u!\n", "configureTxFailEventThreshold", 55419, TxFailMediumThreshold);
          }
        }
        uint64_t v13 = *(void *)(*((void *)this + 9) + 5472);
        if (v13) {
          AppleBCMWLANConfigManager::cacheTxFailEventThrehold(v13, TxFailMediumThreshold);
        }
        IOFreeData();
        return 0;
      }
      if (v11)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint16_t v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          unint64_t v16 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
          CCLogStream::logAlert(v15, "[dk] %s@%d: Unable to set txFail Event Threshold: %s\n", "configureTxFailEventThreshold", 55416, v16);
        }
      }
      IOFreeData();
    }
    else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t v6 = 3758097085;
      if (CCLogStream::shouldLog())
      {
        uint16_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v12, "[dk] %s@%d:Allocation failure for return TLV\n");
      }
    }
    else
    {
      return 3758097085;
    }
  }
  else
  {
    uint64_t v6 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d: txFail Event is not supported!\n");
      }
    }
  }
  return v6;
}

uint64_t AppleBCMWLANCore::checkForBeaconMuteMitiSupport(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 82);
}

uint64_t AppleBCMWLANCore::checkForBeaconDriftMitiSupport(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 87);
}

uint64_t AppleBCMWLANCore::configureECounters(OSDictionary *anObject)
{
  if (!anObject[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[53].retain)
  {
    uint64_t v8 = OSMetaClassBase::safeMetaCast(anObject, gIOServiceMetaClass);
    release  = (const OSMetaClass *(__cdecl *)(const OSMetaClassBase *__hidden))anObject[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[136].release;
    uint64_t v10 = ((uint64_t (*)(OSDictionary *))anObject->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[1].getMetaClass)(anObject);
    uint64_t v11 = (OSMetaClassBase_vtbl *)anObject[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable;
    isEqualTo  = v11[138].isEqualTo;
    uint64_t v13 = v11[439].release;
    isEqualTo_high  = HIDWORD(v11[24].isEqualTo);
    v41[0]  = anObject;
    v41[1]  = v8;
    void v41[2] = release;
    v41[3]  = v10;
    v41[4]  = isEqualTo;
    v41[5]  = &IO80211Controller::addReporterLegend;
    v41[6]  = &IO80211Controller::removeReporterFromLegend;
    v41[7]  = v13;
    int v42 = isEqualTo_high;
    int v43 = 0;
    anObject[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[53].getMetaClass  = (const OSMetaClass *(__cdecl *)(const OSMetaClassBase *__hidden))AppleBCMWLANIOReportingCore::with((uint64_t)v41);
    if (!anObject[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[53].getMetaClass)
    {
      uint64_t v4 = 3758097084;
      if (((uint64_t (*)(OSDictionary *))anObject->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(anObject))
      {
        ((void (*)(OSDictionary *))anObject->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(anObject);
        if (CCLogStream::shouldLog())
        {
          uint16_t v23 = (CCLogStream *)((uint64_t (*)(OSDictionary *))anObject->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(anObject);
          CCLogStream::logAlert(v23, "[dk] %s@%d: Unable to create AppleBCMWLANIOReportingCore block\n");
        }
      }
      return v4;
    }
    v38[0]  = anObject;
    v38[1]  = v8;
    v38[2]  = release;
    v38[3]  = v10;
    v38[4]  = isEqualTo;
    v38[5]  = &IO80211Controller::addReporterLegend;
    v38[6]  = &IO80211Controller::removeReporterFromLegend;
    v38[7]  = v13;
    int v39 = isEqualTo_high;
    int v40 = 0;
    anObject[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[53].retain  = (void (__cdecl *)(const OSObject *__hidden))AppleBCMWLANIOReportingPerSlice::with((uint64_t)v38);
    uint16_t v15 = (OSMetaClassBase_vtbl *)anObject[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable;
    getMetaClass  = (AppleBCMWLANIOReportingPerSlice *)v15[138].getMetaClass;
    if (!getMetaClass)
    {
      uint64_t v4 = 3758097084;
      if (((uint64_t (*)(OSDictionary *))anObject->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(anObject))
      {
        ((void (*)(OSDictionary *))anObject->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(anObject);
        if (CCLogStream::shouldLog())
        {
          uint16_t v29 = (CCLogStream *)((uint64_t (*)(OSDictionary *))anObject->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(anObject);
          CCLogStream::logAlert(v29, "[dk] %s@%d: Unable to create AppleBCMWLANIOReportingPerSlice block\n");
        }
      }
      return v4;
    }
    AppleBCMWLANIOReportingPerSlice::setCallbackForStaleConfig(getMetaClass, (OSObject *)v15[137].Dispatch, (int (*)(OSObject *))AppleBCMWLANIOReportingCore::incrementStaleConfigurationDetected);
  }
  int v37 = 0;
  BOOL v2 = IOParseBootArgNumber("wlan.ecounters", &v37, 4);
  uint64_t v3 = (OSMetaClassBase_vtbl *)anObject[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable;
  if (!v2 || v37)
  {
    LODWORD(v3[24].release)  = 2;
    int v44 = -1431655931;
    BOOL v5 = AppleBCMWLANCore::is4399C0Up(anObject);
    uint64_t v6 = (OSMetaClassBase_vtbl *)anObject[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable;
    if (v5)
    {
      int v7 = 1832;
    }
    else if (HIDWORD(v6[19].release) <= 4)
    {
      int v7 = 1400;
    }
    else
    {
      int v7 = 1648;
    }
    int v45 = v7;
    int v17 = (AppleBCMWLANCommander *)v6[135].release;
    uint16_t v35 = &v44;
    uint64_t v36 = 8;
    uint64_t v18 = AppleBCMWLANCommander::runIOVarSet(v17, (uint64_t)"event_log_set_init", (uint64_t)&v35, 0, 0);
    if (v18 != -469794537)
    {
      uint64_t v4 = v18;
      if (!v18) {
        return v4;
      }
      if (((uint64_t (*)(OSDictionary *))anObject->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(anObject)
        && (((void (*)(OSDictionary *))anObject->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(anObject),
            CCLogStream::shouldLog()))
      {
        uint16_t v26 = (CCLogStream *)((uint64_t (*)(OSDictionary *))anObject->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(anObject);
        int v27 = v44;
        int v28 = v45;
        long long v34 = (const char *)((uint64_t (*)(OSDictionary *, uint64_t))anObject->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[1].retain)(anObject, v4);
        CCLogStream::logAlert(v26, "[dk] %s@%d: Error: Unable to set event_log_set_init set %d, size %d: %s\n", "configureECounters", 52589, v27, v28, v34);
        if (!v4) {
          return v4;
        }
      }
      else if (!v4)
      {
        return v4;
      }
    }
    LOBYTE(v44)  = 5;
    int v45 = 0;
    retain  = (void (__cdecl *)(const OSMetaClassBase *__hidden))anObject[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[52].retain;
    uint16_t v35 = &v44;
    uint64_t v36 = 8;
    uint64_t v20 = AppleBCMWLANCommander::runIOVarSet((AppleBCMWLANCommander *)retain, (uint64_t)"event_log_set_shrink", (uint64_t)&v35, 0, 0);
    uint64_t v4 = v20;
    if (v20 != -469794537 && v20 != 0)
    {
      if (((uint64_t (*)(OSDictionary *))anObject->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(anObject))
      {
        ((void (*)(OSDictionary *))anObject->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(anObject);
        if (CCLogStream::shouldLog())
        {
          uint64_t v30 = (CCLogStream *)((uint64_t (*)(OSDictionary *))anObject->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(anObject);
          int v31 = v44;
          int v32 = v45;
          int v33 = (const char *)((uint64_t (*)(OSDictionary *, uint64_t))anObject->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[1].retain)(anObject, v4);
          CCLogStream::logAlert(v30, "[dk] %s@%d: Error: Unable to deallocate event_log_set_init set %d, size %d: %s\n", "configureECounters", 52601, v31, v32, v33);
        }
      }
    }
    if (((uint64_t (*)(OSDictionary *))anObject->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(anObject))
    {
      ((void (*)(OSDictionary *))anObject->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(anObject);
      if (CCLogStream::shouldLog())
      {
        uint64_t v22 = (CCLogStream *)((uint64_t (*)(OSDictionary *))anObject->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(anObject);
        CCLogStream::logInfo(v22, "[dk] %s@%d:Ecounter Configuration failed\n", "configureECounters", 52604);
      }
    }
  }
  else
  {
    LODWORD(v3[24].release)  = 1;
    if (((uint64_t (*)(OSDictionary *))anObject->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(anObject))
    {
      ((void (*)(OSDictionary *))anObject->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(anObject);
      if (CCLogStream::shouldLog())
      {
        uint64_t v25 = (CCLogStream *)((uint64_t (*)(OSDictionary *))anObject->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(anObject);
        CCLogStream::logAlert(v25, "[dk] %s@%d: Disabling ecounters due to boot-arg wlan.ecounters=0\n", "configureECounters", 52576);
      }
    }
    return 0;
  }
  return v4;
}

uint64_t AppleBCMWLANCore::configureEventLogOneReportedStats(AppleBCMWLANCore *this)
{
  int v18 = 0;
  if (IOParseBootArgNumber("wlan.elogs", &v18, 4) && v18 == 0)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint16_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v12, "[dk] %s@%d: Disabling event logs due to boot-arg wlan.elogs=0\n", "configureEventLogOneReportedStats", 53463);
      }
    }
    return 0;
  }
  else
  {
    if (*(_DWORD *)(*((void *)this + 9) + 780) <= 4u) {
      int v3 = 1400;
    }
    else {
      int v3 = 1648;
    }
    int v17 = v3;
    if (IOParseBootArgNumber("wlan.elogs.size1", &v17, 4))
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v13, "[dk] %s@%d: Setting Log1 size to %d due to boot-arg wlan.elogs.size1\n", "configureEventLogOneReportedStats", 53470, v17);
        }
      }
    }
    if (AppleBCMWLANCore::configureEventLogStats(this, 1, v17))
    {
      return AppleBCMWLANCore::configureEventLogShrinkStats(this, 1);
    }
    else
    {
      int v16 = -2147417999;
      uint64_t v6 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
      v15[0]  = &v16;
      v15[1]  = 4;
      uint64_t v4 = AppleBCMWLANCommander::runIOVarSet(v6, (uint64_t)"event_log_tag_control", (uint64_t)v15, 0, 0);
      if (v4)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            int v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            int v8 = BYTE2(v16);
            int v9 = (unsigned __int16)v16;
            uint32_t v14 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v4);
            CCLogStream::logAlert(v7, "[dk] %s@%d: Error: Unable to set event_log_tag_control set %d, tag %d: %s\n", "configureEventLogOneReportedStats", 53487, v8, v9, v14);
          }
        }
      }
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          uint64_t v11 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v4);
          CCLogStream::logInfo(v10, "[dk] %s@%d:Event Log Configuration %s\n", "configureEventLogOneReportedStats", 53490, v11);
        }
      }
    }
  }
  return v4;
}

uint64_t AppleBCMWLANCore::configureEventLogSixReportedStats(AppleBCMWLANCore *this)
{
  int v54 = -1431655766;
  int v53 = 0;
  if (IOParseBootArgNumber("wlan.elogs", &v53, 4) && v53 == 0)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v32 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v32, "[dk] %s@%d: Disabling event logs due to boot-arg wlan.elogs=0\n", "configureEventLogSixReportedStats", 53508);
      }
    }
    return 0;
  }
  else
  {
    int v52 = 300;
    if (IOParseBootArgNumber("wlan.elogs.size6", &v52, 4))
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint16_t v38 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v38, "[dk] %s@%d: Setting Log6 size to %d due to boot-arg wlan.elogs.size6\n", "configureEventLogSixReportedStats", 53515, v52);
        }
      }
    }
    int v55 = -1431655930;
    int v56 = (unsigned __int16)v52;
    int v3 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    uint64_t v50 = &v55;
    uint64_t v51 = 8;
    uint64_t v4 = AppleBCMWLANCommander::runIOVarSet(v3, (uint64_t)"event_log_set_init", (uint64_t)&v50, 0, 0);
    if (v4)
    {
      uint64_t v5 = v4;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          int v7 = v55;
          int v8 = v56;
          int v9 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
          CCLogStream::logInfo(v6, "[dk] %s@%d: Error: Unable to set event_log_set_init set %d, size %d: %s\n", "configureEventLogSixReportedStats", 53524, v7, v8, v9);
        }
      }
LABEL_25:
      LOBYTE(v55)  = 6;
      int v56 = 0;
      uint64_t v20 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
      uint64_t v50 = &v55;
      uint64_t v51 = 8;
      uint64_t v21 = AppleBCMWLANCommander::runIOVarSet(v20, (uint64_t)"event_log_set_shrink", (uint64_t)&v50, 0, 0);
      if (!v21) {
        goto LABEL_51;
      }
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          long long v34 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          int v35 = v55;
          int v36 = v56;
          int v37 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v21);
          CCLogStream::logInfo(v34, "[dk] %s@%d: Error: Unable to deallocate event_log_set_init set %d, size %d: %s\n", "configureEventLogSixReportedStats", 53565, v35, v36, v37);
        }
      }
      uint64_t v10 = 3825172759;
      if (v21 != -469794537)
      {
LABEL_51:
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            int v33 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logInfo(v33, "[dk] %s@%d:Event Log Configuration failed\n", "configureEventLogSixReportedStats", 53571);
          }
        }
        return v21;
      }
      return v10;
    }
    uint64_t v11 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    uint64_t v50 = &v55;
    uint64_t v51 = 8;
    uint64_t v12 = AppleBCMWLANCommander::runIOVarSet(v11, (uint64_t)"event_log_set_expand", (uint64_t)&v50, 0, 0);
    if (v12)
    {
      uint64_t v13 = v12;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint32_t v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          int v15 = v55;
          int v16 = v56;
          unsigned int v47 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v13);
          CCLogStream::logAlert(v14, "[dk] %s@%d: Error: Unable to set event_log_set_init set %d, size %d: %s\n", "configureEventLogSixReportedStats", 53530, v15, v16, v47);
        }
      }
      goto LABEL_25;
    }
    int v17 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    uint64_t v50 = &v55;
    uint64_t v51 = 8;
    uint64_t v18 = AppleBCMWLANCommander::runIOVarSet(v17, (uint64_t)"event_log_set_expand", (uint64_t)&v50, 0, 0);
    if (v18)
    {
      uint64_t v19 = v18;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          int v39 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          int v40 = v55;
          int v41 = v56;
          int v49 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v19);
          CCLogStream::logAlert(v39, "[dk] %s@%d: Error: Unable to set event_log_set_init set %d, size %d: %s\n", "configureEventLogSixReportedStats", 53535, v40, v41, v49);
        }
      }
      goto LABEL_25;
    }
    int v54 = -2147090336;
    uint16_t v23 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    uint64_t v50 = &v54;
    uint64_t v51 = 4;
    uint64_t v24 = AppleBCMWLANCommander::runIOVarSet(v23, (uint64_t)"event_log_tag_control", (uint64_t)&v50, 0, 0);
    if (v24)
    {
      uint64_t v25 = v24;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint16_t v26 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          int v27 = BYTE2(v54);
          int v28 = (unsigned __int16)v54;
          int v48 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v25);
          CCLogStream::logAlert(v26, "[dk] %s@%d: Error: Unable to set event_log_tag_control set %d, tag %d: %s\n", "configureEventLogSixReportedStats", 53545, v27, v28, v48);
        }
      }
    }
    LOWORD(v54)  = 113;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v42 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logInfo(v42, "[dk] %s@%d:Enable SCAN_SUMAMRY from configureEventLogSixReportedStats \n", "configureEventLogSixReportedStats", 53550);
      }
    }
    uint16_t v29 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    uint64_t v50 = &v54;
    uint64_t v51 = 4;
    uint64_t v10 = AppleBCMWLANCommander::runIOVarSet(v29, (uint64_t)"event_log_tag_control", (uint64_t)&v50, 0, 0);
    if (v10)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          int v43 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          int v44 = BYTE2(v54);
          int v45 = (unsigned __int16)v54;
          uint64_t v46 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v10);
          CCLogStream::logAlert(v43, "[dk] %s@%d: Error: Unable to set event_log_tag_control set %d, tag %d: %s\n", "configureEventLogSixReportedStats", 53553, v44, v45, v46);
        }
      }
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v30 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int v31 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v10);
        CCLogStream::logInfo(v30, "[dk] %s@%d:Event Log Configuration %s\n", "configureEventLogSixReportedStats", 53556, v31);
      }
    }
  }
  return v10;
}

uint64_t AppleBCMWLANCore::configureEventLogSevenReportedStats(AppleBCMWLANCore *this)
{
  int v46 = -1431655766;
  int v45 = 0;
  if (IOParseBootArgNumber("wlan.elogs", &v45, 4) && v45 == 0)
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (!result) {
      return result;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (!result) {
      return result;
    }
    uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    CCLogStream::logAlert(v12, "[dk] %s@%d: Disabling event logs due to boot-arg wlan.elogs=0\n", "configureEventLogSevenReportedStats", 53586);
    return 0;
  }
  if (*(_DWORD *)(*((void *)this + 9) + 780) <= 4u) {
    int v3 = 1400;
  }
  else {
    int v3 = 1648;
  }
  int v44 = v3;
  if (IOParseBootArgNumber("wlan.elogs.size7", &v44, 4))
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v37 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v37, "[dk] %s@%d: Setting Log7 size to %d due to boot-arg wlan.elogs.size7\n", "configureEventLogSevenReportedStats", 53593, v44);
      }
    }
  }
  int v47 = -1431655929;
  int v48 = (unsigned __int16)v44;
  uint64_t v4 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  int v42 = &v47;
  uint64_t v43 = 8;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"event_log_set_init", (uint64_t)&v42, 0, 0);
  if (v5)
  {
    uint64_t v6 = v5;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int v8 = v47;
        int v9 = v48;
        uint64_t v10 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
        CCLogStream::logInfo(v7, "[dk] %s@%d: Error: Unable to set event_log_set_init set %d, size %d: %s\n", "configureEventLogSevenReportedStats", 53602, v8, v9, v10);
      }
    }
    goto LABEL_51;
  }
  uint64_t v13 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  int v42 = &v47;
  uint64_t v43 = 8;
  uint64_t v14 = AppleBCMWLANCommander::runIOVarSet(v13, (uint64_t)"event_log_set_expand", (uint64_t)&v42, 0, 0);
  if (v14)
  {
    uint64_t v15 = v14;
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
      goto LABEL_51;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (!CCLogStream::shouldLog()) {
      goto LABEL_51;
    }
    goto LABEL_27;
  }
  int v16 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  int v42 = &v47;
  uint64_t v43 = 8;
  uint64_t v17 = AppleBCMWLANCommander::runIOVarSet(v16, (uint64_t)"event_log_set_expand", (uint64_t)&v42, 0, 0);
  if (!v17)
  {
    int v46 = -2147024849;
    uint64_t v19 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    int v42 = &v46;
    uint64_t v43 = 4;
    uint64_t v20 = AppleBCMWLANCommander::runIOVarSet(v19, (uint64_t)"event_log_tag_control", (uint64_t)&v42, 0, 0);
    if (v20)
    {
      uint64_t v21 = v20;
      if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
        goto LABEL_51;
      }
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (!CCLogStream::shouldLog()) {
        goto LABEL_51;
      }
      goto LABEL_64;
    }
    LOWORD(v46)  = 67;
    uint64_t v22 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    int v42 = &v46;
    uint64_t v43 = 4;
    uint64_t v23 = AppleBCMWLANCommander::runIOVarSet(v22, (uint64_t)"event_log_tag_control", (uint64_t)&v42, 0, 0);
    if (v23)
    {
      uint64_t v21 = v23;
      if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
        goto LABEL_51;
      }
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (!CCLogStream::shouldLog()) {
        goto LABEL_51;
      }
      goto LABEL_64;
    }
    LOWORD(v46)  = 68;
    uint64_t v24 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    int v42 = &v46;
    uint64_t v43 = 4;
    uint64_t v25 = AppleBCMWLANCommander::runIOVarSet(v24, (uint64_t)"event_log_tag_control", (uint64_t)&v42, 0, 0);
    if (v25)
    {
      uint64_t v21 = v25;
      if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
        goto LABEL_51;
      }
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (!CCLogStream::shouldLog()) {
        goto LABEL_51;
      }
      goto LABEL_64;
    }
    LOWORD(v46)  = 155;
    uint16_t v26 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    int v42 = &v46;
    uint64_t v43 = 4;
    uint64_t v27 = AppleBCMWLANCommander::runIOVarSet(v26, (uint64_t)"event_log_tag_control", (uint64_t)&v42, 0, 0);
    if (v27)
    {
      uint64_t v21 = v27;
      if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
        goto LABEL_51;
      }
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (!CCLogStream::shouldLog()) {
        goto LABEL_51;
      }
      goto LABEL_64;
    }
    LOWORD(v46)  = 223;
    int v28 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    int v42 = &v46;
    uint64_t v43 = 4;
    uint64_t v29 = AppleBCMWLANCommander::runIOVarSet(v28, (uint64_t)"event_log_tag_control", (uint64_t)&v42, 0, 0);
    if (v29)
    {
      uint64_t v21 = v29;
      if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
        goto LABEL_51;
      }
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (!CCLogStream::shouldLog()) {
        goto LABEL_51;
      }
      goto LABEL_64;
    }
    LOWORD(v46)  = 466;
    uint64_t v30 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    int v42 = &v46;
    uint64_t v43 = 4;
    uint64_t v21 = AppleBCMWLANCommander::runIOVarSet(v30, (uint64_t)"event_log_tag_control", (uint64_t)&v42, 0, 0);
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (v21)
    {
      if (!result) {
        goto LABEL_51;
      }
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (!CCLogStream::shouldLog()) {
        goto LABEL_51;
      }
LABEL_64:
      int v40 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v21);
      CCLogStream::logAlert(v40, "[dk] %s@%d: Error: Unable to set event_log_tag_control set %d, tag %d: %s\n");
      goto LABEL_51;
    }
    if (!result) {
      return result;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (!result) {
      return result;
    }
    uint16_t v38 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    int v39 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, void))(*(void *)this + 112))(this, 0);
    CCLogStream::logInfo(v38, "[dk] %s@%d:Event Log Configuration %s\n", "configureEventLogSevenReportedStats", 53663, v39);
    return 0;
  }
  uint64_t v15 = v17;
  if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
    goto LABEL_51;
  }
  (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (!CCLogStream::shouldLog()) {
    goto LABEL_51;
  }
LABEL_27:
  uint64_t v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v15);
  CCLogStream::logAlert(v18, "[dk] %s@%d: Error: Unable to set event_log_set_init set %d, size %d: %s\n");
LABEL_51:
  LOBYTE(v47)  = 7;
  int v48 = 0;
  int v31 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  int v42 = &v47;
  uint64_t v43 = 8;
  uint64_t v32 = AppleBCMWLANCommander::runIOVarSet(v31, (uint64_t)"event_log_set_shrink", (uint64_t)&v42, 0, 0);
  if (!v32) {
    goto LABEL_67;
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      long long v34 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      int v35 = v47;
      int v36 = v48;
      int v41 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v32);
      CCLogStream::logInfo(v34, "[dk] %s@%d: Error: Unable to deallocate event_log_set_init set %d, size %d: %s\n", "configureEventLogSevenReportedStats", 53672, v35, v36, v41);
    }
  }
  uint64_t result = 3825172759;
  if (v32 != -469794537)
  {
LABEL_67:
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v33 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logInfo(v33, "[dk] %s@%d:Event Log Configuration failed\n", "configureEventLogSevenReportedStats", 53678);
      }
    }
    return v32;
  }
  return result;
}

uint64_t AppleBCMWLANCore::checkForLtecxlbtSupport(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 80);
}

uint64_t AppleBCMWLANCore::setLteCoexLBTMode(AppleBCMWLANCore *this)
{
  uint64_t v2 = *((void *)this + 9);
  int v3 = *(AppleBCMWLANCommander **)(v2 + 5416);
  v9[0]  = v2 + 1104;
  v9[1]  = 4;
  uint64_t v4 = AppleBCMWLANCommander::runIOVarSet(v3, (uint64_t)"mws_coex_lbt_mode", (uint64_t)v9, 0, 0);
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      int v7 = *(_DWORD *)(*((void *)this + 9) + 1104);
      int v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v4);
      return CCLogStream::logAlert(v6, "[dk] %s@%d: Set LTE COEX LBT mode to %u : %s \n", "setLteCoexLBTMode", 42002, v7, v8);
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::updateCurrentFWCountryCode(AppleBCMWLANCore *this)
{
  uint64_t v2 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 136))(v2))
  {
    uint64_t v13 = this;
    uint64_t v14 = (uint64_t)AppleBCMWLANCore::handleGetCountryCodeAsyncCallBack;
    uint64_t v15 = 0;
    uint64_t v3 = *((void *)this + 9);
    uint64_t v4 = *(AppleBCMWLANCommander **)(v3 + 5416);
    v12[0]  = v3 + 6752;
    v12[1]  = 4;
    int v11 = 262148;
    uint64_t v5 = AppleBCMWLANCommander::sendIOCtlGet(v4, 83, (uint64_t)v12, (unsigned __int16 *)&v11, (uint64_t)&v13, 0);
  }
  else
  {
    uint64_t v6 = *((void *)this + 9);
    uint64_t v13 = (AppleBCMWLANCore *)(v6 + 6752);
    uint64_t v14 = 0x400040004;
    uint64_t v5 = AppleBCMWLANCommander::runIOCtlGet(*(AppleBCMWLANCommander **)(v6 + 5416), 83, (uint64_t)&kNoTxPayload, (uint64_t)&v13, 0);
  }
  uint64_t v7 = v5;
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v10 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v7);
        CCLogStream::logAlert(v9, "[dk] %s@%d: Failed to retrieve country code from firmware: %s\n", "updateCurrentFWCountryCode", 28735, v10);
      }
    }
  }
  return v7;
}

uint64_t AppleBCMWLANCore::checkFor6GSupportCardCapability(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 93);
}

uint64_t AppleBCMWLANCore::configureIeFiltering(AppleBCMWLANCore *this)
{
  uint64_t v2 = IOMallocZeroData();
  uint64_t v3 = 12;
  if (v2)
  {
    uint64_t v4 = v2;
    *(_DWORD *)uint64_t v2 = 6029313;
    *(_WORD *)(v2 + 4)  = 12;
    *(unsigned char *)(v2 + 6)  = 4;
    *(_DWORD *)(v2 + 8)  = 64;
    uint64_t v5 = &kProbeRequestIEs;
    do
    {
      __int16 v6 = *v5++;
      uint64_t v7 = v2 + v3;
      *(_WORD *)uint64_t v7 = v6;
      *(_DWORD *)(v7 + 2)  = 65537;
      *(_WORD *)(v7 + 6)  = 0;
      v3 += 8;
    }
    while (v3 != 92);
    int v8 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    v12[0]  = v4;
    v12[1]  = 92;
    uint64_t v3 = AppleBCMWLANCommander::runIOVarSet(v8, (uint64_t)"filter_ie", (uint64_t)v12, 0, 0);
    if (v3)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          int v11 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v3);
          CCLogStream::logInfo(v10, "[dk] %s@%d: Error: Unable to set filter ies : %s\n", "configureIeFiltering", 56830, v11);
        }
      }
    }
    IOFreeData();
  }
  return v3;
}

uint64_t AppleBCMWLANCore::checkForAdvEcountersSupport(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 89);
}

uint64_t AppleBCMWLANCore::cfgRoamPruneRssiThreshold(AppleBCMWLANCore *this, int a2)
{
  int v10 = a2;
  v9[0]  = &v10;
  v9[1]  = 4;
  uint64_t v3 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 136))(v3)) {
    uint64_t v4 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"wnm_prune_rssi_thresh");
  }
  else {
    uint64_t v4 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"wnm_prune_rssi_thresh", (uint64_t)v9, 0, 0);
  }
  uint64_t v5 = v4;
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (v5)
  {
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
        return CCLogStream::logAlert(v7, "[dk] %s@%d:Failed to Configure Prune RSSI threshold %s\n");
      }
    }
  }
  else if (result)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      int v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      return CCLogStream::logAlert(v8, "[dk] %s@%d:Prune Threshold for Roaming  = %d dB configured successfully\n");
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::initTrafficEngineering(AppleBCMWLANCore *this)
{
  *(unsigned char *)(*((void *)this + 9) + 29948)  = 0;
  *(void *)(*((void *)this + 9) + 35136)  = 0;
  *(unsigned char *)(*((void *)this + 9) + 35144)  = 0;
  *(unsigned char *)(*((void *)this + 9) + 35145)  = 0;
  *(unsigned char *)(*((void *)this + 9) + 35146)  = 0;
  *(unsigned char *)(*((void *)this + 9) + 29949)  = 0;
  *(_DWORD *)(*((void *)this + 9) + 35148)  = 80;
  *(_DWORD *)(*((void *)this + 9) + 35152)  = 160;
  *(_DWORD *)(*((void *)this + 9) + 35156)  = 2;
  IOParseBootArgNumber("wlan.trafficengineering.enabled", (void *)(*((void *)this + 9) + 29948), 1);
  IOParseBootArgNumber("wlan.trafficengineering.pktlogenabled", (void *)(*((void *)this + 9) + 29949), 1);
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v3 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (*(unsigned char *)(*((void *)this + 9) + 29948)) {
        uint64_t v4 = "Enabled";
      }
      else {
        uint64_t v4 = "Disabled";
      }
      CCLogStream::logInfo(v3, "[dk] %s@%d:Traffic Engineering support is: %s\n", "initTrafficEngineering", 57666, v4);
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (*(unsigned char *)(*((void *)this + 9) + 29949)) {
        __int16 v6 = "Enabled";
      }
      else {
        __int16 v6 = "Disabled";
      }
      CCLogStream::logInfo(v5, "[dk] %s@%d:Traffic Engineering logging is: %s\n", "initTrafficEngineering", 57667, v6);
    }
  }
  return 0;
}

uint64_t AppleBCMWLANCore::setSPMICommonConfig(AppleBCMWLANCore *this, int a2)
{
  uint64_t result = AppleBCMWLANCore::featureFlagIsBitSet(this, 94);
  if (result)
  {
    memset(v14, 0, sizeof(v14));
    uint64_t v13 = 0;
    int v10 = 262401;
    __int16 v11 = 2;
    int v12 = a2;
    uint64_t v5 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    v9[0]  = &v10;
    v9[1]  = 10;
    uint64_t result = AppleBCMWLANCommander::runIOVarSet(v5, (uint64_t)"spmi:common", (uint64_t)v9, 0, 0);
    if (result)
    {
      uint64_t v6 = result;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          int v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
          CCLogStream::logAlert(v7, "[dk] %s@%d:Failed to set SPMI common config %x reason %s\n", "setSPMICommonConfig", 54287, a2, v8);
        }
      }
      return CCFaultReporter::reportFault(*(CCFaultReporter **)(*((void *)this + 9) + 5544), 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0xD410u, "setSPMICommonConfig", 0, v6, "setSPMICommonConfig failed");
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::init6ESSIDTransition(AppleBCMWLANCore *this)
{
  *(unsigned char *)(*((void *)this + 9) + 3575AppleBCMWLANCommandMonitor::free(this - 3) = 0;
  BOOL v2 = IOParseBootArgNumber("wlan.netmanager.colocated_nw_transition", (void *)(*((void *)this + 9) + 35753), 1);
  uint64_t v3 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (v2)
  {
    if (!v3
      || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
          (CCLogStream::shouldLogConsole() & 1) == 0))
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        int v4 = *(unsigned __int8 *)(*((void *)this + 9) + 35753);
        *(_DWORD *)buf  = 67109890;
        int v10 = 65;
        __int16 v11 = 2080;
        int v12 = "init6ESSIDTransition";
        __int16 v13 = 1024;
        int v14 = 57681;
        __int16 v15 = 1024;
        int v16 = v4;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: Configuring Colocated Network to  = %d\n", buf, 0x1Eu);
      }
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v5 = 57681;
LABEL_17:
        int v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v8, "[dk] %s@%d:Configuring Colocated Network to  = %d\n", "init6ESSIDTransition", v5, *(unsigned __int8 *)(*((void *)this + 9) + 35753));
      }
    }
  }
  else
  {
    if (!v3
      || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
          (CCLogStream::shouldLogConsole() & 1) == 0))
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = *(unsigned __int8 *)(*((void *)this + 9) + 35753);
        *(_DWORD *)buf  = 67109890;
        int v10 = 65;
        __int16 v11 = 2080;
        int v12 = "init6ESSIDTransition";
        __int16 v13 = 1024;
        int v14 = 57683;
        __int16 v15 = 1024;
        int v16 = v6;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: Configuring Colocated Network to  = %d\n", buf, 0x1Eu);
      }
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v5 = 57683;
        goto LABEL_17;
      }
    }
  }
  return 0;
}

void *AppleBCMWLANCore::disableC2C(void *this)
{
  if (*(_DWORD *)(this[9] + 780) >= 0x11u)
  {
    BOOL v1 = this;
    BOOL v2 = (void *)IOMallocZeroData();
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v17 = v2;
      *BOOL v2 = 0x8000501018000;
      v2[1]  = 1;
      if ((*(uint64_t (**)(void *))(*v1 + 1848))(v1))
      {
        (*(void (**)(void *))(*v1 + 1848))(v1);
        if (CCLogStream::shouldLog())
        {
          int v12 = (CCLogStream *)(*(uint64_t (**)(void *))(*v1 + 1848))(v1);
          CCLogStream::logAlert(v12, "[dk] %s@%d: %s: ", "disableC2C", 9992, "disableC2C");
        }
      }
      uint64_t v4 = (*(uint64_t (**)(void *))(*v1 + 88))(v1);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 136))(v4))
      {
        int v14 = v1;
        uint64_t v15 = (uint64_t)AppleBCMWLANCore::handleSetC2CCompletion;
        uint64_t v16 = 0;
        uint64_t v5 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(v1[9] + 5416), (uint64_t)"c2c");
        if (v5)
        {
          uint64_t v6 = v5;
          if ((*(uint64_t (**)(void *))(*v1 + 1848))(v1))
          {
            (*(void (**)(void *))(*v1 + 1848))(v1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(void *))(*v1 + 1848))(v1);
              (*(void (**)(void *, uint64_t))(*v1 + 112))(v1, v6);
              CCLogStream::logAlert(v7, "[dk] %s@%d: Failure to send c2c: %s");
            }
          }
        }
      }
      else
      {
        int v9 = *(AppleBCMWLANCommander **)(v1[9] + 5416);
        int v14 = v3;
        uint64_t v15 = 128;
        uint64_t v10 = AppleBCMWLANCommander::runIOVarSet(v9, (uint64_t)"c2c", (uint64_t)&v14, 0, 0);
        if (v10)
        {
          uint64_t v11 = v10;
          if ((*(uint64_t (**)(void *))(*v1 + 1848))(v1))
          {
            (*(void (**)(void *))(*v1 + 1848))(v1);
            if (CCLogStream::shouldLog())
            {
              __int16 v13 = (CCLogStream *)(*(uint64_t (**)(void *))(*v1 + 1848))(v1);
              (*(void (**)(void *, uint64_t))(*v1 + 112))(v1, v11);
              CCLogStream::logAlert(v13, "[dk] %s@%d: Failure to set c2c: %s len %d subcmd len %d");
            }
          }
        }
      }
      return (void *)IOFreeData();
    }
    else
    {
      this  = (void *)(*(uint64_t (**)(void *))(*v1 + 1848))(v1);
      if (this)
      {
        (*(void (**)(void *))(*v1 + 1848))(v1);
        this  = (void *)CCLogStream::shouldLog();
        if (this)
        {
          int v8 = (CCLogStream *)(*(uint64_t (**)(void *))(*v1 + 1848))(v1);
          return (void *)CCLogStream::logAlert(v8, "[dk] %s@%d:Unable to allocate memory for txBuf\n", "disableC2C", 9979);
        }
      }
    }
  }
  return this;
}

uint64_t AppleBCMWLANCore::setEcountersEnableStateSync(AppleBCMWLANCore *a1, uint64_t a2, int a3)
{
  if (*(_DWORD *)(*((void *)a1 + 9) + 976) == 1) {
    return 0;
  }
  uint64_t v6 = AppleBCMWLANCore::commandSleepForThreadSafe(a1, 1u);
  if (v6)
  {
    uint64_t v7 = v6;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v9, "[dk] %s@%d: setEcountersEnableStateSync fail =(0x%x) from commandSleep\n", "setEcountersEnableStateSync", 52619, v7);
      }
    }
  }
  else
  {
    if (*(_DWORD *)(*((void *)a1 + 9) + 976) == 2 || (uint64_t v7 = AppleBCMWLANCore::disableECounters(a1), !v7)) {
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
    }
    if (a3) {
      AppleBCMWLANCore::enableECounters(a1);
    }
    AppleBCMWLANCore::commandWakeupForThreadSafe(a1, 1u);
  }
  return v7;
}

int ___ZN16AppleBCMWLANCore13setupFirmwareEPK21AppleBCMWLANChipImage_block_invoke(id a1)
{
  return 0;
}

uint64_t AppleBCMWLANCore::configureScanForwardToAOP(AppleBCMWLANCore *this, int a2)
{
  __int16 v15 = 8;
  int v14 = 1572865;
  uint64_t v4 = *((void *)this + 9);
  if (*(unsigned __int8 *)(v4 + 35529) == a2)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v5, "[dk] %s@%d:Scan forward to AOP is already %s\n");
      }
    }
    return 0;
  }
  int v17 = 6553603;
  long long v16 = xmmword_10036E9A0;
  __int16 v19 = a2;
  __int16 v18 = 2;
  uint64_t v6 = *(AppleBCMWLANCommander **)(v4 + 5416);
  v13[0]  = &v14;
  v13[1]  = 30;
  uint64_t v7 = AppleBCMWLANCommander::runIOVarSet(v6, (uint64_t)"spmi_scan_fwd", (uint64_t)v13, 0, 0);
  if (!v7)
  {
    *(unsigned char *)(*((void *)this + 9) + 35529)  = a2;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v12, "[dk] %s@%d:Scan forward to AOP is %s\n");
      }
    }
    return 0;
  }
  uint64_t v8 = v7;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      int v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t v10 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v8);
      CCLogStream::logAlert(v9, "[dk] %s@%d:Failed to configure scan forward to AOP %d reason %s\n", "configureScanForwardToAOP", 62920, a2, v10);
    }
  }
  return v8;
}

uint64_t AppleBCMWLANCore::configureFigaro5GTDDSupport(AppleBCMWLANCore *this, int a2)
{
  if (a2) {
    int v4 = 2;
  }
  else {
    int v4 = 0;
  }
  int v11 = v4;
  uint64_t v5 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  v10[0]  = &v11;
  v10[1]  = 4;
  uint64_t v6 = AppleBCMWLANCommander::runIOVarSet(v5, (uint64_t)"wifi_bt5g_policy", (uint64_t)v10, 0, 0);
  if (v6)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
        CCLogStream::logAlert(v7, "[dk] %s@%d:Failed to configure Wifi BT 5GHz Full TDD support %d reason %s\n", "configureFigaro5GTDDSupport", 62936, a2, v8);
      }
    }
  }
  else
  {
    *(_DWORD *)(*((void *)this + 9) + 35832)  = v11;
  }
  return v6;
}

uint64_t AppleBCMWLANCore::configureScanParamMods(AppleBCMWLANCore *this)
{
  uint64_t v2 = IOMallocZeroData();
  if (v2)
  {
    uint64_t v3 = v2;
    *(_DWORD *)uint64_t v2 = 786433;
    *(void *)(v2 + 4)  = 0xC800C800080001;
    *(_WORD *)(v2 + 12)  = 200;
    int v4 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    uint64_t v10 = v3;
    uint64_t v11 = 16;
    AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"scanparams_mods", (uint64_t)&v10, 0, 0);
    *(_WORD *)(v3 + 4)  = 2;
    uint64_t v5 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    uint64_t v10 = v3;
    uint64_t v11 = 16;
    AppleBCMWLANCommander::runIOVarSet(v5, (uint64_t)"scanparams_mods", (uint64_t)&v10, 0, 0);
    *(_WORD *)(v3 + 4)  = 3;
    uint64_t v6 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    uint64_t v10 = v3;
    uint64_t v11 = 16;
    uint64_t v7 = AppleBCMWLANCommander::runIOVarSet(v6, (uint64_t)"scanparams_mods", (uint64_t)&v10, 0, 0);
    IOFreeData();
  }
  else
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v9, "[dk] %s@%d:Unable to allocate memory for txBuf\n", "configureScanParamMods", 62953);
      }
    }
    return 0;
  }
  return v7;
}

uint64_t AppleBCMWLANCore::checkForBT5GSupport(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 120);
}

uint64_t AppleBCMWLANCore::setRxLatPrioEnabBitmapAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 1848))(v4);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 1848))(v4);
        uint64_t v6 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 112))(v4, a3);
        return CCLogStream::logAlert(v5, "[dk] %s@%d:Setting rx_lat_prio_enab failed: %s\n", "setRxLatPrioEnabBitmapAsyncCallback", 9432, v6);
      }
    }
  }
  return result;
}

void AppleBCMWLANCore::setMacAddressAsyncCallback(AppleBCMWLANCore *this, int a2, uint64_t a3, int a4, ether_addr *a5)
{
  if (a3)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
      && ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
          CCLogStream::shouldLog()))
    {
      uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      int v9 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, a3);
      CCLogStream::logAlert(v8, "[dk] %s@%d:WFRandomisation : Async setting interface mac address failed: %s\n", "setMacAddressAsyncCallback", 9441, v9);
      if (!a5) {
        return;
      }
    }
    else if (!a5)
    {
      return;
    }
  }
  else
  {
    if (!a5) {
      return;
    }
    AppleBCMWLANCore::setMacAddressComplete(this, a5);
  }
  IOFree(a5, 6uLL);
}

uint64_t AppleBCMWLANCore::setMacAddressComplete(AppleBCMWLANCore *this, const ether_addr *a2)
{
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      return CCLogStream::logAlert(v5, "[dk] %s@%d:WiFi MAC Address: %02x:%02x:%02x:%02x:%02x:%02x, HW[ %02x:%02x:%02x:%02x:%02x:%02x ]\n", "setMacAddressComplete", 25630, a2->octet[0], a2->octet[1], a2->octet[2], a2->octet[3], a2->octet[4], a2->octet[5], *(unsigned __int8 *)(*((void *)this + 9) + 5652), *(unsigned __int8 *)(*((void *)this + 9) + 5653), *(unsigned __int8 *)(*((void *)this + 9) + 5654), *(unsigned __int8 *)(*((void *)this + 9) + 5655), *(unsigned __int8 *)(*((void *)this + 9) + 5656), *(unsigned __int8 *)(*((void *)this + 9) + 5657));
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::setRxLatPrioEnabBitmap(AppleBCMWLANCore *this, int a2)
{
  int v16 = a2;
  uint64_t v3 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 136))(v3))
  {
    __int16 v13 = this;
    uint64_t v14 = (uint64_t)AppleBCMWLANCore::setRxLatPrioEnabBitmapAsyncCallback;
    uint64_t v15 = 0;
    uint64_t v4 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"rx_lat_prio_enab");
  }
  else
  {
    uint64_t v5 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    __int16 v13 = (AppleBCMWLANCore *)&v16;
    uint64_t v14 = 4;
    uint64_t v4 = AppleBCMWLANCommander::runIOVarSet(v5, (uint64_t)"rx_lat_prio_enab", (uint64_t)&v13, 0, 0);
  }
  uint64_t v6 = v4;
  uint64_t v7 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (v6)
  {
    if (v7)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int v9 = v16;
        uint64_t v10 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
        CCLogStream::logAlert(v8, "[dk] %s@%d:Could not set rx_lat_prio_enab %u: error %s\n", "setRxLatPrioEnabBitmap", 9469, v9, v10);
      }
    }
  }
  else if (v7)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      int v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logInfo(v12, "[dk] %s@%d:rx_lat_prio_enab is set to %u\n", "setRxLatPrioEnabBitmap", 9471, v16);
    }
  }
  return v6;
}

uint64_t AppleBCMWLANCore::utilGetHWCap(void *a1, const char *a2, uint64_t a3)
{
  unsigned int v13 = 0;
  v12[0]  = &v13;
  v12[1]  = 0x400040004;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(a1[9] + 5416), (uint64_t)a2, a3, (uint64_t)v12, 0);
  if (v5 == -469794537 || v5 == 0)
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logNoticeIf(v7, 0x80uLL, "[dk] %s@%d: %s: 0x%x\n", "utilGetHWCap", 9486, a2, v13);
      }
    }
  }
  else
  {
    uint64_t v8 = v5;
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        uint64_t v11 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 112))(a1, v8);
        CCLogStream::logAlert(v10, "[dk] %s@%d: Unable to get %s: %s\n", "utilGetHWCap", 9484, a2, v11);
      }
    }
  }
  return v13;
}

uint64_t AppleBCMWLANCore::handlePruneThresholdConfigurationAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 1848))(v4);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 1848))(v4);
        uint64_t v6 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 112))(v4, a3);
        return CCLogStream::logAlert(v5, "[dk] %s@%d:Failed to Configure Prune RSSI Threshold: %s\n", "handlePruneThresholdConfigurationAsyncCallback", 9516, v6);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::cfgAmpduWinSizeCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 1848))(v4);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 1848))(v4);
        uint64_t v6 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 112))(v4, a3);
        return CCLogStream::logAlert(v5, "[dk] %s@%d:Setting AMPDU BA window size failed: %s\n", "cfgAmpduWinSizeCallback", 9553, v6);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::cfgAmpduWindowSize(AppleBCMWLANCore *this)
{
  long long v26 = 0u;
  int v28 = 0;
  long long v27 = 0u;
  int v25 = 2621441;
  LOBYTE(v26)  = 32;
  if (*(unsigned char *)(*((void *)this + 9) + 29925)) {
    __int16 v2 = 528;
  }
  else {
    __int16 v2 = 576;
  }
  HIWORD(v26)  = v2;
  uint64_t v3 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 136))(v3))
  {
    *(void *)uint64_t v24 = this;
    *(void *)&v24[8]  = AppleBCMWLANCore::cfgAmpduWinSizeCallback;
    *(void *)&v24[16]  = 0;
    uint64_t v4 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    uint64_t v21 = &v25;
    uint64_t v22 = 40;
    uint64_t v5 = AppleBCMWLANCommander::sendIOVarSet(v4, (uint64_t)"ampdu_tx_ba_window_cfg");
  }
  else
  {
    uint64_t v6 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    *(void *)uint64_t v24 = &v25;
    *(void *)&v24[8]  = 40;
    uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v6, (uint64_t)"ampdu_tx_ba_window_cfg", (uint64_t)v24, 0, 0);
  }
  uint64_t v7 = v5;
  uint64_t v8 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (v7)
  {
    if (v8)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v10 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v7);
        CCLogStream::logAlert(v9, "[dk] %s@%d:Could not set Tx AMPDU window size: error %s\n", "cfgAmpduWindowSize", 9585, v10);
      }
    }
  }
  else if (v8)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      __int16 v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logInfo(v19, "[dk] %s@%d:Tx AMPDU BA window size setting is successful\n", "cfgAmpduWindowSize", 9587);
    }
  }
  *(_DWORD *)&v24[20]  = 0;
  *(_DWORD *)uint64_t v24 = 1572865;
  *(_OWORD *)&v24[4]  = 0x20uLL;
  if (*(unsigned char *)(*((void *)this + 9) + 29925)) {
    __int16 v11 = 16;
  }
  else {
    __int16 v11 = 64;
  }
  *(_WORD *)&v24[18]  = v11;
  uint64_t v12 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 136))(v12))
  {
    uint64_t v21 = (int *)this;
    uint64_t v22 = (uint64_t)AppleBCMWLANCore::cfgAmpduWinSizeCallback;
    uint64_t v23 = 0;
    uint64_t v13 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"ampdu_rx_ba_window_cfg");
  }
  else
  {
    uint64_t v14 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    uint64_t v21 = (int *)v24;
    uint64_t v22 = 24;
    uint64_t v13 = AppleBCMWLANCommander::runIOVarSet(v14, (uint64_t)"ampdu_rx_ba_window_cfg", (uint64_t)&v21, 0, 0);
  }
  uint64_t v15 = v13;
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (v15)
  {
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        __int16 v18 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v15);
        return CCLogStream::logAlert(v17, "[dk] %s@%d:Could not set Rx AMPDU window size: error %s\n", "cfgAmpduWindowSize", 9611, v18);
      }
    }
  }
  else if (result)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v20 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      return CCLogStream::logInfo(v20, "[dk] %s@%d:Rx AMPDU BA window size setting is successful\n", "cfgAmpduWindowSize", 9613);
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::getBWCapFromHW(AppleBCMWLANCore *this)
{
  if (*(int *)(*((void *)this + 9) + 1036) > 1)
  {
    uint64_t v3 = 1;
    v2[0]  = &v3;
    v2[1]  = 8;
    return AppleBCMWLANCore::utilGetHWCap(this, "bw_cap", (uint64_t)v2);
  }
  else if (AppleBCMWLANCore::utilGetHWCap(this, "mimo_bw_cap", (uint64_t)&kNoTxPayload) - 1 >= 2)
  {
    return 1;
  }
  else
  {
    return 3;
  }
}

BOOL AppleBCMWLANCore::isFWAPIVer11nOnly(AppleBCMWLANCore *this)
{
  return *(_DWORD *)(*((void *)this + 9) + 1036) < 2;
}

BOOL AppleBCMWLANCore::isSupportedPhyMode11nOnly(AppleBCMWLANCore *this)
{
  return *(_DWORD *)(*((void *)this + 9) + 1040) < 128;
}

uint64_t AppleBCMWLANCore::getSupportedPhyModeFromHW(AppleBCMWLANCore *this)
{
  unsigned int v9 = -1431655766;
  v8[0]  = &v9;
  v8[1]  = 0x400040004;
  uint64_t v2 = AppleBCMWLANCommander::runIOCtlGet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), 39, (uint64_t)&kNoTxPayload, (uint64_t)v8, 0);
  if (v2 != -469794537 && v2 != 0)
  {
    uint64_t v4 = v2;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v7 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v4);
        CCLogStream::logAlert(v6, "[dk] %s@%d: Unable to get phytype: %s\n", "getSupportedPhyModeFromHW", 9737, v7);
      }
    }
    return 15;
  }
  return v9;
}

uint64_t AppleBCMWLANCore::updateRSDBCaps(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(result + 72) + 1096)  = *(unsigned char *)a2;
  *(unsigned char *)(*(void *)(result + 72) + 1097)  = *(unsigned char *)(a2 + 1);
  *(_WORD *)(*(void *)(result + 72) + 1098)  = *(_WORD *)(a2 + 2);
  uint64_t v2 = *(void *)(result + 72);
  if (*(unsigned char *)(v2 + 1097))
  {
    uint64_t v3 = (void *)result;
    unint64_t v4 = 0;
    uint64_t v5 = a2 + 4;
    do
    {
      *(unsigned char *)(v2 + v4 + 1100)  = *(unsigned char *)(v5 + v4);
      if (*(unsigned __int8 *)(v3[9] + 1097) >= 3u)
      {
        uint64_t result = (*(uint64_t (**)(void *))(*v3 + 1848))(v3);
        if (result)
        {
          (*(void (**)(void *))(*v3 + 1848))(v3);
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
            uint64_t result = CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: More cores (%d) than expected (%d)\n", "updateRSDBCaps", 9843, *(unsigned __int8 *)(v3[9] + 1097), 2);
          }
        }
      }
      ++v4;
      uint64_t v2 = v3[9];
    }
    while (v4 < *(unsigned __int8 *)(v2 + 1097));
  }
  return result;
}

BOOL AppleBCMWLANCore::isSdbChip(AppleBCMWLANCore *this, BOOL *a2)
{
  *a2  = 0;
  uint64_t v2 = (unsigned __int8 *)*((void *)this + 9);
  unsigned int v3 = v2[1097];
  if (v3 >= 2 && v2[1100] != v2[1101]) {
    *a2  = 1;
  }
  return v3 > 1;
}

uint64_t AppleBCMWLANCore::applyRoamingCandidateBoost(AppleBCMWLANCore *this, int a2, int a3)
{
  __int16 v14 = 516;
  char v15 = a3;
  char v16 = a2;
  int v17 = 513;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      unsigned int v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t v10 = "2,4GHz";
      if (a2 == 1) {
        uint64_t v10 = "5GHz";
      }
      CCLogStream::logAlert(v9, "[dk] %s@%d:%s:%d: Issuing join_pref to FW: Applying %s roam candidate boost of %d\n", "applyRoamingCandidateBoost", 9875, "applyRoamingCandidateBoost", 9875, v10, a3);
    }
  }
  uint64_t v6 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  v13[0]  = &v14;
  v13[1]  = 8;
  uint64_t v7 = AppleBCMWLANCommander::runIOVarSet(v6, (uint64_t)"join_pref", (uint64_t)v13, 0, 0);
  if (v7)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        __int16 v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v12 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v7);
        CCLogStream::logAlert(v11, "[dk] %s@%d: Error: cannot set join_pref to %d : ret %x: %s\n", "applyRoamingCandidateBoost", 9879, 5, v7, v12);
      }
    }
  }
  return v7;
}

uint64_t AppleBCMWLANCore::disable6GRoaming(AppleBCMWLANCore *this)
{
  uint64_t result = AppleBCMWLANCore::featureFlagIsBitSet(this, 93);
  if (result)
  {
    AppleBCMWLANCore::set6GNegativeBoost(this, 2);
    return AppleBCMWLANCore::disable6GForRoamScans(this, 1, 1);
  }
  return result;
}

uint64_t AppleBCMWLANCore::set6GNegativeBoost(AppleBCMWLANCore *this, int a2)
{
  uint64_t result = AppleBCMWLANCore::featureFlagIsBitSet(this, 93);
  if (result)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v6, "[dk] %s@%d:set6GNegativeBoost by source %x\n", "set6GNegativeBoost", 9915, a2);
      }
    }
    *(unsigned char *)(*((void *)this + 9) + 29929) |= a2;
    uint64_t v5 = *(AppleBCMWLANCore ****)(*((void *)this + 9) + 5576);
    return AppleBCMWLANRoamAdapter::set6GCandidateBoost(v5, 156);
  }
  return result;
}

uint64_t AppleBCMWLANCore::disable6GForRoamScans(AppleBCMWLANCore *this, int a2, int a3)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
    && ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
        CCLogStream::shouldLog()))
  {
    uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    unsigned int v9 = "Enable";
    if (a2) {
      unsigned int v9 = "Disable";
    }
    CCLogStream::logAlert(v8, "[dk] %s@%d:[WiFiRoam]:Issuing join_pref to FW:%s 6G Roam Scan : [disable=%d, source=0x%x, current state=0x%x]\n", "disable6GForRoamScans", 9939, v9, a2, a3, *(_DWORD *)(*((void *)this + 9) + 8824));
    if (a2) {
      goto LABEL_4;
    }
  }
  else if (a2)
  {
LABEL_4:
    *(_DWORD *)(*((void *)this + 9) + 8824) |= a3;
    uint64_t v6 = *((void *)this + 9);
    char v7 = 1;
    goto LABEL_11;
  }
  *(_DWORD *)(*((void *)this + 9) + 8824) &= ~a3;
  uint64_t v6 = *((void *)this + 9);
  if (*(_DWORD *)(v6 + 8824)) {
    return 3758097109;
  }
  char v7 = 0;
LABEL_11:
  __int16 v11 = *(AppleBCMWLANRoamAdapter **)(v6 + 5576);
  return AppleBCMWLANRoamAdapter::disable6GForRoamScans(v11, v7);
}

uint64_t AppleBCMWLANCore::enable6GRoaming(AppleBCMWLANCore *this)
{
  uint64_t result = AppleBCMWLANCore::featureFlagIsBitSet(this, 93);
  if (result)
  {
    AppleBCMWLANCore::restore6GNegativeBoost(this, 2);
    return AppleBCMWLANCore::disable6GForRoamScans(this, 0, 1);
  }
  return result;
}

uint64_t AppleBCMWLANCore::restore6GNegativeBoost(AppleBCMWLANCore *this, int a2)
{
  if (!AppleBCMWLANCore::featureFlagIsBitSet(this, 93)) {
    return 0;
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      char v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v7, "[dk] %s@%d:restore6GNegativeBoost by source %x\n", "restore6GNegativeBoost", 9926, a2);
    }
  }
  *(unsigned char *)(*((void *)this + 9) + 29929) &= ~(_BYTE)a2;
  uint64_t v4 = *((void *)this + 9);
  if (*(unsigned char *)(v4 + 29929)) {
    return 0;
  }
  uint64_t v6 = *(AppleBCMWLANCore ****)(v4 + 5576);
  return AppleBCMWLANRoamAdapter::restore6GCandidateBoost(v6);
}

uint64_t AppleBCMWLANCore::handleSetC2CCompletion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d: Failed with status 0x%X(%u)", "handleSetC2CCompletion", 9959, a3, a3);
      }
    }
  }
  return a3;
}

uint64_t AppleBCMWLANCore::stopARPKeepAlive(AppleBCMWLANCore *this)
{
  uint64_t v2 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  v7[0]  = &v8;
  v7[1]  = 8;
  uint64_t v8 = 0;
  uint64_t v3 = AppleBCMWLANCommander::runIOVarSet(v2, (uint64_t)"keep_alive", (uint64_t)v7, 0, 0);
  if (v3)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v6 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v3);
        CCLogStream::logAlert(v5, "[dk] %s@%d: Error: Unable to set keep alive packet ret %s\n", "stopARPKeepAlive", 10028, v6);
      }
    }
  }
  return v3;
}

uint64_t AppleBCMWLANCore::programARPKeepAlive(AppleBCMWLANCore *this, int a2)
{
  *(_OWORD *)uint64_t v20 = xmmword_100370210;
  memset(&v20[2], 170, 56);
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v12, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "programARPKeepAlive", 10053, "programARPKeepAlive");
    }
  }
  if (!IO80211BssManager::isAssociated(*(IO80211BssManager **)(*((void *)this + 9) + 5440))) {
    return 6;
  }
  LODWORD(v20[0])  = a2;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v13, "[dk] %s@%d:ARP keepalive interval - %d ms\n", "programARPKeepAlive", 10065, a2);
    }
  }
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1)  = 0xAAAAAAAAAAAAAAAALL;
  __src[1]  = v4;
  *(_OWORD *)__n  = v4;
  __src[0]  = v4;
  uint64_t ArpKeepAliveData = IO80211InfraInterface::getArpKeepAliveData();
  if (ArpKeepAliveData)
  {
    uint64_t v6 = ArpKeepAliveData;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        char v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:%s: Failed to get Arp keepalive data (%d)\n", "programARPKeepAlive", 10076, "programARPKeepAlive", v6);
      }
    }
    return v6;
  }
  memcpy((char *)v20 + 6, __src, HIDWORD(__n[1]));
  IO80211HexdumpIf();
  WORD2(v20[0])  = WORD2(__n[1]);
  uint64_t v8 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  v17[0]  = v20;
  v17[1]  = 72;
  uint64_t v9 = AppleBCMWLANCommander::runIOVarSet(v8, (uint64_t)"keep_alive", (uint64_t)v17, 0, 0);
  uint64_t v10 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (v9)
  {
    if (v10)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        __int16 v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        char v15 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v9);
        CCLogStream::logAlert(v14, "[dk] %s@%d: Error: Unable to set keep alive packet ret %s\n", "programARPKeepAlive", 10088, v15);
      }
    }
    return 6;
  }
  if (v10)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      char v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v16, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "programARPKeepAlive", 10101, "programARPKeepAlive");
    }
  }
  return 0;
}

uint64_t AppleBCMWLANCore::isAssociated(AppleBCMWLANCore *this)
{
  return IO80211BssManager::isAssociated(*(IO80211BssManager **)(*((void *)this + 9) + 5440));
}

uint64_t AppleBCMWLANCore::runSetMwsCoexIoVarsAsync_mws_ocl_coex_bitmap(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    v6[0]  = a2;
    v6[1]  = 10;
    void v6[2] = "mws_ocl_override";
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t (*)(AppleBCMWLANCore *, void *), void *, void, void, void))(*(void *)v3 + 56))(v3, AppleBCMWLANCore::handleSetCoexIoVarNotificationGated, v6, 0, 0, 0);
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 1848))(a1);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1);
        return CCLogStream::logAlert(v5, "[dk] %s@%d:mws_ocl_channel_map is NULL!", "runSetMwsCoexIoVarsAsync_mws_ocl_coex_bitmap", 10130);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleSetCoexIoVarNotificationGated(AppleBCMWLANCore *this, void *a2)
{
  uint64_t v3 = (const char *)a2[2];
  uint64_t v4 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)v3);
  if (v4)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        char v7 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v4);
        CCLogStream::logAlert(v6, "[dk] %s@%d: Error: cannot set mws coex manager iovar - %s: %s\n", "handleSetCoexIoVarNotificationGated", 13606, v3, v7);
      }
    }
  }
  return v4;
}

uint64_t ___ZN16AppleBCMWLANCore27setPlatformConfigPropertiesEP12OSDictionary_block_invoke(uint64_t a1, OSMetaClassBase *anObject)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = (const OSString *)OSMetaClassBase::safeMetaCast(anObject, gOSStringMetaClass);
  if (v4)
  {
    uint64_t v5 = v4;
    if (OSString::getCStringNoCopy(v4))
    {
      CStringNoCopy  = OSString::getCStringNoCopy(v5);
      Object  = OSDictionary::getObject(*(const OSDictionary **)(a1 + 40), v5);
      uint64_t v20 = gOSDataMetaClass;
      v21[0]  = "bcom.roam.enabledenhanced";
      v21[1]  = gOSDataMetaClass;
      void v21[2] = "bcom.ps.realtime";
      v21[3]  = gOSDataMetaClass;
      v21[4]  = "wlan.ocl.enabled";
      v21[5]  = gOSDataMetaClass;
      v21[6]  = "bcom.ps.default";
      v21[7]  = gOSDataMetaClass;
      v21[8]  = "wlan.enhancedTrgDisc";
      v21[9]  = gOSDataMetaClass;
      v21[10]  = "bcom.roam.default";
      v21[11]  = gOSDataMetaClass;
      v21[12]  = "wlan.enhancedlocale.enabled";
      v21[13]  = gOSDataMetaClass;
      v21[14]  = "wlan.bss.5GHz-preference";
      v21[15]  = gOSDataMetaClass;
      v21[16]  = "wlan.sdb.profile";
      v21[17]  = gOSDataMetaClass;
      v21[18]  = "wlan.fast_enterprise_nw.enabled";
      v21[19]  = gOSDataMetaClass;
      v21[20]  = "wlan.voice_enterprise_nw.enabled";
      v21[21]  = gOSDataMetaClass;
      v21[22]  = "wlan.wnm.enabled";
      v21[23]  = gOSDataMetaClass;
      v21[24]  = "wlan.awdl.params";
      v21[25]  = gOSDataMetaClass;
      v21[26]  = "wlan.dfrts";
      v21[27]  = gOSDataMetaClass;
      v21[28]  = "bcom.oscar.profilestates";
      v21[29]  = gOSDataMetaClass;
      v21[30]  = "bcom.btc.params";
      v21[31]  = gOSDataMetaClass;
      v21[32]  = "bcom.roam.profiles";
      v21[33]  = gOSDataMetaClass;
      v21[34]  = "wlan.tethering.enabled";
      v21[35]  = gOSDataMetaClass;
      v21[36]  = "wlan.mimo_ps.enabled";
      v21[37]  = gOSDataMetaClass;
      v21[38]  = "bcom.roam.enterprise";
      v21[39]  = gOSDataMetaClass;
      v21[40]  = "bcom.wow.magic-packet";
      v21[41]  = gOSBooleanMetaClass;
      v21[42]  = "wlan.listen.interval";
      v21[43]  = gOSDataMetaClass;
      v21[44]  = "wlan.vo.blockack";
      v21[45]  = gOSBooleanMetaClass;
      v21[46]  = "wlan.llw.tx.ring.size";
      v21[47]  = gOSNumberMetaClass;
      v21[48]  = "wlan.tx.ring.size";
      v21[49]  = gOSNumberMetaClass;
      v21[50]  = "wlan.rx.ring.size";
      v21[51]  = gOSNumberMetaClass;
      v21[52]  = "wlan.tx.submission-queue.size";
      v21[53]  = gOSNumberMetaClass;
      v21[54]  = "wlan.dfsproxy.enabled";
      v21[55]  = gOSDataMetaClass;
      v21[56]  = "wlan.tx-power-cap-ctrl";
      v21[57]  = gOSDataMetaClass;
      v21[58]  = "wlan.psbw.enabled";
      v21[59]  = gOSNumberMetaClass;
      v21[60]  = "wlan.gpio-tx-envelope-ind";
      v21[61]  = gOSBooleanMetaClass;
      v21[62]  = "wlan.chip.power.dutycycle";
      v21[63]  = gOSDataMetaClass;
      v21[64]  = "wlan.lowlatency.enable";
      v21[65]  = gOSBooleanMetaClass;
      v21[66]  = "wlan.11d.power.constraint.ignored";
      v21[67]  = gOSDataMetaClass;
      v21[68]  = "wlan.adaptiveroaming.enabled";
      v21[69]  = gOSBooleanMetaClass;
      v21[70]  = "wlan.dsa.power.boost";
      v21[71]  = gOSDataMetaClass;
      v21[72]  = "wlan.txsdb.mode";
      v21[73]  = gOSNumberMetaClass;
      v21[74]  = "wlan.ant-inefficiency-mitigation.enabled";
      v21[75]  = gOSBooleanMetaClass;
      v21[76]  = "wlan.enterprise.params";
      v21[77]  = gOSDataMetaClass;
      v21[78]  = "wlan.lpas-allowed";
      v21[79]  = gOSDataMetaClass;
      v21[80]  = "wlan.aoac-allowed";
      v21[81]  = gOSDataMetaClass;
      v21[82]  = "wlan.continuous.cpms.power";
      v21[83]  = gOSBooleanMetaClass;
      v21[84]  = "wlan.txchain.mode";
      v21[85]  = gOSNumberMetaClass;
      v21[86]  = "wlan.6GHz.supported";
      v21[87]  = gOSBooleanMetaClass;
      v21[88]  = "wlan.bss.6GHz-preference";
      v21[89]  = gOSDataMetaClass;
      v21[90]  = "wlan.is.fdr.cal";
      v21[91]  = gOSBooleanMetaClass;
      v21[92]  = "wifi-calibration-fdr";
      v21[93]  = gOSDataMetaClass;
      v21[94]  = "wifi-calibration-gen";
      v21[95]  = gOSDataMetaClass;
      v21[96]  = "wlan.skywalk.packetpoolsize";
      v21[97]  = gOSNumberMetaClass;
      long long v22 = 0u;
      if (CStringNoCopy && (uint64_t v8 = Object) != 0 && (v9 = "wlan.autocountry.enabled") != 0)
      {
        uint64_t v10 = (const char **)v21;
        while (strncmp(v9, CStringNoCopy, 0x100uLL) || OSMetaClassBase::GetClass(v8) != (const OSMetaClass *)*(v10 - 1))
        {
          __int16 v11 = *v10;
          v10 += 2;
          uint64_t v9 = v11;
          if (!v11) {
            goto LABEL_10;
          }
        }
        if ((*(uint64_t (**)(void *))(*v3 + 1848))(v3))
        {
          (*(void (**)(void *))(*v3 + 1848))(v3);
          if (CCLogStream::shouldLog())
          {
            __int16 v18 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
            __int16 v19 = OSString::getCStringNoCopy(v5);
            CCLogStream::logInfo(v18, "[dk] %s@%d:Setting property: '%s'\n", "setPlatformConfigProperties_block_invoke", 10719, v19);
          }
        }
        char v15 = (IOService *)(*(uint64_t (**)(void))(*(void *)(*(void *)(v3[9] + 5400) + 48) + 288))();
        char v16 = OSDictionary::getObject(*(const OSDictionary **)(a1 + 40), v5);
        setPropertyHelper(v15, v5, v16);
      }
      else
      {
LABEL_10:
        if ((*(uint64_t (**)(void *))(*v3 + 1848))(v3))
        {
          (*(void (**)(void *))(*v3 + 1848))(v3);
          if (CCLogStream::shouldLog())
          {
            uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
            CCLogStream::logEmergency(v12, "[dk] %s@%d:Property check failed, skip to next keystr");
          }
        }
      }
    }
    else if ((*(uint64_t (**)(void *))(*v3 + 1848))(v3))
    {
      (*(void (**)(void *))(*v3 + 1848))(v3);
      if (CCLogStream::shouldLog())
      {
        __int16 v14 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
        CCLogStream::logEmergency(v14, "[dk] %s@%d:No cstring, skip to next keystr");
      }
    }
  }
  else if ((*(uint64_t (**)(void *))(*v3 + 1848))(v3))
  {
    (*(void (**)(void *))(*v3 + 1848))(v3);
    if (CCLogStream::shouldLog())
    {
      uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
      CCLogStream::logEmergency(v13, "[dk] %s@%d:Not OSString, skip to next keystr");
    }
  }
  return 0;
}

__n128 AppleBCMWLANCore::refreshLQMLogs(uint64_t a1, unsigned int a2, long long *a3)
{
  uint64_t v3 = *(void *)(a1 + 72);
  if ((*(_DWORD *)(v3 + 980) - 1) > 1)
  {
    unint64_t v5 = v3 + ((unint64_t)a2 << 8) + 31037;
    long long v6 = *a3;
    long long v7 = a3[1];
    long long v8 = a3[3];
    *(_OWORD *)(v5 + 32)  = a3[2];
    *(_OWORD *)(v5 + 48)  = v8;
    *(_OWORD *)unint64_t v5 = v6;
    *(_OWORD *)(v5 + 16)  = v7;
    long long v9 = a3[4];
    long long v10 = a3[5];
    long long v11 = a3[7];
    *(_OWORD *)(v5 + 96)  = a3[6];
    *(_OWORD *)(v5 + 112)  = v11;
    *(_OWORD *)(v5 + 64)  = v9;
    *(_OWORD *)(v5 + 80)  = v10;
    long long v12 = a3[8];
    long long v13 = a3[9];
    long long v14 = a3[11];
    *(_OWORD *)(v5 + 160)  = a3[10];
    *(_OWORD *)(v5 + 176)  = v14;
    *(_OWORD *)(v5 + 128)  = v12;
    *(_OWORD *)(v5 + 144)  = v13;
    __n128 result = (__n128)a3[12];
    long long v15 = a3[13];
    long long v16 = a3[15];
    *(_OWORD *)(v5 + 224)  = a3[14];
    *(_OWORD *)(v5 + 240)  = v16;
    *(__n128 *)(v5 + 192)  = result;
    *(_OWORD *)(v5 + 208)  = v15;
  }
  else
  {
    io80211_os_log();
  }
  return result;
}

uint64_t AppleBCMWLANCore::setPropertyIoctlGated(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(unsigned char *)(a1[9] + 30915)  = 1;
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(*a1 + 1832))(a1, v3);
  *(unsigned char *)(a1[9] + 30915)  = 0;
  return result;
}

uint64_t AppleBCMWLANCore::setSET_PROPERTY(void *a1, uint64_t a2)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1[9] + 30920) + 144))(*(void *)(a1[9] + 30920)))
  {
    uint64_t v4 = *(void *)(a2 + 8);
    *(unsigned char *)(a1[9] + 30915)  = 1;
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(*a1 + 1832))(a1, v4);
    *(unsigned char *)(a1[9] + 30915)  = 0;
  }
  else
  {
    long long v6 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(void *))(*a1 + 104))(a1) + 56);
    return v6();
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setSET_PROPERTY(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setSET_PROPERTY((void *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::setCOLOCATED_NETWORK_SCOPE_ID()
{
  return 102;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setCOLOCATED_NETWORK_SCOPE_ID()
{
  return 102;
}

uint64_t AppleBCMWLANCore::setProperties(AppleBCMWLANCore *this, OSObject *anObject)
{
  uint64_t v3 = (const OSDictionary *)OSMetaClassBase::safeMetaCast(anObject, gOSDictionaryMetaClass);
  Pid  = 0;
  v370  = xmmword_100370550;
  v371  = unk_100370560;
  v372  = xmmword_100370570;
  v373  = unk_100370580;
  *(_OWORD *)v366  = *(_OWORD *)"<unknown>";
  v367  = unk_100370520;
  v368  = xmmword_100370530;
  v369  = unk_100370540;
  if (IO80211ThreadProcessInfo::getProcessPid((IO80211ThreadProcessInfo *)&Pid, v4)
    || IO80211ThreadProcessInfo::getProcessName((IO80211ThreadProcessInfo *)v366, (char *)0x80, v5))
  {
    Pid  = IO80211Controller::getPid(this);
    IO80211Controller::getProcessName(this, v366, 0x80uLL);
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      v257  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logInfo(v257, "[dk] %s@%d:setProperties() entitled !!! pid[%d]'%s'\n", "setProperties", 11302, Pid, v366);
    }
  }
  uint64_t v6 = *((void *)this + 9);
  if (*(unsigned char *)(v6 + 30915))
  {
LABEL_8:
    if (v3) {
      goto LABEL_9;
    }
LABEL_59:
    LODWORD(v3AppleBCMWLANCommandMonitor::free(this - 3) = 0;
    goto LABEL_60;
  }
  if ((*(unsigned int (**)(void))(**(void **)(v6 + 30920) + 144))(*(void *)(v6 + 30920)))
  {
    CCFaultReporter::reportFault(*(CCFaultReporter **)(*((void *)this + 9) + 5544), 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0x2C2Fu, "setProperties", 0, -469793473, 0);
    if (!v3) {
      goto LABEL_59;
    }
  }
  else
  {
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
      goto LABEL_8;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (!CCLogStream::shouldLog()) {
      goto LABEL_8;
    }
    uint64_t v80 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    CCLogStream::logAlert(v80, "[dk] %s@%d:%s: ERROR: Unexpected non-ioctl set property call for this platform\n", "setProperties", 11313, "setProperties");
    if (!v3) {
      goto LABEL_59;
    }
  }
LABEL_9:
  Object  = OSDictionary::getObject(v3, "WiFiMSFCal");
  if (Object)
  {
    long long v8 = OSMetaClassBase::safeMetaCast(Object, gOSDataMetaClass);
    if (v8)
    {
      long long v9 = (const OSObject *)v8;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          v315  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          v316  = (const void *)(*(uint64_t (**)(void))(*(void *)(*(void *)(*((void *)this + 9) + 5400) + 48)
                                                    + 288))();
          CCLogStream::logAlert(v315, "[dk] %s@%d: Setting WiFi calibration MSF property: [%p] '%s'\n", "setProperties", 11323, v316, "wifi-calibration-msf");
        }
      }
      long long v10 = (IOService *)(*(uint64_t (**)(void))(*(void *)(*(void *)(*((void *)this + 9) + 5400) + 48) + 288))();
      setPropertyHelper(v10, "wifi-calibration-msf", v9);
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          v317  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          v318  = (const void *)(*(uint64_t (**)(void))(*(void *)(*(void *)(*((void *)this + 9) + 5400) + 48)
                                                    + 288))();
          CCLogStream::logAlert(v317, "[dk] %s@%d: Setting WiFi calibration MSF property: [%p] '%s' ... done\n", "setProperties", 11325, v318, "wifi-calibration-msf");
        }
      }
    }
  }
  long long v11 = OSDictionary::getObject(v3, "WiFiFdrCal");
  if (v11)
  {
    long long v12 = OSMetaClassBase::safeMetaCast(v11, gOSDataMetaClass);
    if (v12)
    {
      long long v13 = (const OSObject *)v12;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          v319  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          v320  = (const void *)(*(uint64_t (**)(void))(*(void *)(*(void *)(*((void *)this + 9) + 5400) + 48)
                                                    + 288))();
          CCLogStream::logAlert(v319, "[dk] %s@%d: Setting WiFi calibration FDR property: [%p] '%s'\n", "setProperties", 11334, v320, "wifi-calibration-fdr");
        }
      }
      long long v14 = (IOService *)(*(uint64_t (**)(void))(*(void *)(*(void *)(*((void *)this + 9) + 5400) + 48) + 288))();
      setPropertyHelper(v14, "wifi-calibration-fdr", v13);
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          v321  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          v322  = (const void *)(*(uint64_t (**)(void))(*(void *)(*(void *)(*((void *)this + 9) + 5400) + 48)
                                                    + 288))();
          CCLogStream::logAlert(v321, "[dk] %s@%d: Setting WiFi calibration FDR property: [%p] '%s' ... done\n", "setProperties", 11336, v322, "wifi-calibration-fdr");
        }
      }
    }
  }
  long long v15 = OSDictionary::getObject(v3, "WiFiGenericCal");
  if (v15)
  {
    long long v16 = OSMetaClassBase::safeMetaCast(v15, gOSDataMetaClass);
    if (v16)
    {
      int v17 = (const OSObject *)v16;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          v323  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          v324  = (const void *)(*(uint64_t (**)(void))(*(void *)(*(void *)(*((void *)this + 9) + 5400) + 48)
                                                    + 288))();
          CCLogStream::logAlert(v323, "[dk] %s@%d: Setting WiFi calibration Generic property: [%p] '%s'\n", "setProperties", 11345, v324, "wifi-calibration-gen");
        }
      }
      __int16 v18 = (IOService *)(*(uint64_t (**)(void))(*(void *)(*(void *)(*((void *)this + 9) + 5400) + 48) + 288))();
      setPropertyHelper(v18, "wifi-calibration-gen", v17);
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          v325  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          v326  = (const void *)(*(uint64_t (**)(void))(*(void *)(*(void *)(*((void *)this + 9) + 5400) + 48)
                                                    + 288))();
          CCLogStream::logAlert(v325, "[dk] %s@%d: Setting WiFi calibration Generic property: [%p] '%s' ... done\n", "setProperties", 11347, v326, "wifi-calibration-gen");
        }
      }
    }
  }
  __int16 v19 = OSDictionary::getObject(v3, "WiFiMSFSource");
  if (v19)
  {
    uint64_t v20 = v19;
    if (OSMetaClassBase::safeMetaCast(v19, gOSStringMetaClass))
    {
      uint64_t v21 = (const OSString *)OSMetaClassBase::safeMetaCast(v20, gOSStringMetaClass);
      OSStringPtr v22 = OSString::withString(v21);
      if (v22)
      {
        uint64_t v23 = v22;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            v329  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            v330  = (const void *)(*(uint64_t (**)(void))(*(void *)(*(void *)(*((void *)this + 9) + 5400) + 48)
                                                      + 288))();
            CCLogStream::logAlert(v329, "[dk] %s@%d: Setting WiFi MSF source property: [%p] '%s'\n", "setProperties", 11356, v330, "wlan.msf.source");
          }
        }
        uint64_t v24 = (IOService *)(*(uint64_t (**)(void))(*(void *)(*(void *)(*((void *)this + 9) + 5400) + 48) + 288))();
        setPropertyHelper(v24, "wlan.msf.source", v23);
        ((void (*)(const OSObject *))v23->release)(v23);
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            v331  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            v332  = (const void *)(*(uint64_t (**)(void))(*(void *)(*(void *)(*((void *)this + 9) + 5400) + 48)
                                                      + 288))();
            CCLogStream::logAlert(v331, "[dk] %s@%d: Setting WiFi calibration Generic property: [%p] '%s' ... done\n", "setProperties", 11359, v332, "wifi-calibration-gen");
          }
        }
      }
    }
  }
  int v25 = OSDictionary::getObject(v3, "PlatformConfig");
  if (v25)
  {
    long long v26 = (OSDictionary *)OSMetaClassBase::safeMetaCast(v25, gOSDictionaryMetaClass);
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        v258  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v258, "[dk] %s@%d: Calling setPlatformConfigProperties: [%p]\n", "setProperties", 11368, this);
      }
    }
    AppleBCMWLANCore::setPlatformConfigProperties(this, v26);
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        v259  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v259, "[dk] %s@%d: Calling setPlatformConfigProperties: [%p] ... done\n", "setProperties", 11370, this);
      }
    }
  }
  long long v27 = OSDictionary::getObject(v3, "MWS_BT_TRAFFIC_IMPACT_SCAN_OFFLOAD");
  if (v27)
  {
    OSBooleanPtr v28 = (OSBooleanPtr)OSMetaClassBase::safeMetaCast(v27, gOSBooleanMetaClass);
    OSBooleanPtr v29 = kOSBooleanTrue;
    *(unsigned char *)(*((void *)this + 9) + 30945)  = v28 == kOSBooleanTrue;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        v260  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (v28 == v29) {
          v261  = (const char *)&unk_10029A2CA;
        }
        else {
          v261  = "not";
        }
        CCLogStream::logAlert(v260, "[dk] %s@%d:Scan Offload is %s affected\n", "setProperties", 11396, v261);
      }
    }
  }
  uint64_t v30 = OSDictionary::getObject(v3, "MWS_BT_TRAFFIC_IMPACT_BCN_OFFLOAD");
  if (v30)
  {
    OSBooleanPtr v31 = (OSBooleanPtr)OSMetaClassBase::safeMetaCast(v30, gOSBooleanMetaClass);
    OSBooleanPtr v32 = kOSBooleanTrue;
    *(unsigned char *)(*((void *)this + 9) + 30944)  = v31 == kOSBooleanTrue;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        v262  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (v31 == v32) {
          v263  = (const char *)&unk_10029A2CA;
        }
        else {
          v263  = "not";
        }
        CCLogStream::logAlert(v262, "[dk] %s@%d:Beacon Offload is %s affected\n", "setProperties", 11407, v263);
      }
    }
  }
  if (AppleBCMWLANCore::isRejectingCommands(this)) {
    return 3758097112;
  }
  uint16_t v65 = OSDictionary::getObject(v3, "MWS_Coex_Enabled_Channels");
  if (v65)
  {
    uint16_t v66 = v65;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        v333  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logNotice(v333, "[dk] %s@%d:Setting APPLE80211KEY_MWS_COEX_ENABLED_CHANNELS\n", "setProperties", 11429);
      }
    }
    AppleBCMWLANCore::setMWSCoexIoVarsAsync_mws_coex_bitmap(this, v66, 0);
  }
  uint16_t v67 = OSDictionary::getObject(v3, "MWS_Aggressor_ChannelParameters");
  if (v67) {
    AppleBCMWLANCore::setMWSCoexIoVarsAsync_mws_aggCh_params(this, v67, 0);
  }
  size_t v68 = OSDictionary::getObject(v3, "MWS_WCI_Signaling_Config");
  if (v68) {
    AppleBCMWLANCore::setMWSCoexIoVarsAsync_mws_wciSig_config(this, v68, 0);
  }
  unsigned int v69 = OSDictionary::getObject(v3, "MWS_WLAN_RX_PRI_THRESHOLD");
  if (v69) {
    AppleBCMWLANCore::setMWSCoexIoVarsAsync_mws_wlanrxpri_threshold(this, v69, 0);
  }
  unint64_t v70 = OSDictionary::getObject(v3, "IO80211InterfaceMwsCoexBitmapV2");
  if (v70)
  {
    uint64_t v71 = v70;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        v334  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logInfo(v334, "[dk] %s@%d:Setting APPLE80211KEY_MWS_COEX_BITMAP_V2\n", "setProperties", 11451);
      }
    }
    uint64_t v72 = (OSDictionary *)OSMetaClassBase::safeMetaCast(v71, gOSDictionaryMetaClass);
    AppleBCMWLANCore::setMWSCoexIoVarsAsync_mws_coex_bitmap_V2(this, v72, 0);
  }
  uint64_t v73 = OSDictionary::getObject(v3, "MWS_RX_PRIO_TIMER");
  if (v73)
  {
    int v74 = v73;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        v335  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v335, "[dk] %s@%d:Setting APPLE80211KEY_MWS_RX_PRIO_TIMER\n", "setProperties", 11459);
      }
    }
    AppleBCMWLANCore::setMWSCoexIoVarsRxPrioTimer(this, v74, 0);
  }
  int v75 = OSDictionary::getObject(v3, "MWS_PWR_LIMIT_TIMER");
  if (v75)
  {
    int v76 = v75;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        v336  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v336, "[dk] %s@%d:Setting APPLE80211KEY_MWS_PWR_LIMIT_TIMER\n", "setProperties", 11466);
      }
    }
    AppleBCMWLANCore::setMWSCoexIoVarsPwrLimitTimer(this, v76, 0);
  }
  int v77 = OSDictionary::getObject(v3, "MWS_SWDIV_RX_POLICY");
  if (v77 && (unsigned int v78 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v77, gOSNumberMetaClass)) != 0)
  {
    *(_DWORD *)(*((void *)this + 9) + 10404)  = OSNumber::unsigned32BitValue(v78);
    uint64_t v79 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 104))(this);
    uint64_t v33 = (*(uint64_t (**)(uint64_t, void, void, void, void, void))(*(void *)v79 + 56))(v79, *(void *)(*(void *)this + 1248), 0, 0, 0, 0);
  }
  else
  {
    uint64_t v33 = 0;
  }
  uint64_t v81 = OSDictionary::getObject(v3, "MWS_SWDIV_TX_POLICY");
  if (v81)
  {
    uint64_t v82 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v81, gOSNumberMetaClass);
    if (v82)
    {
      *(_DWORD *)(*((void *)this + 9) + 10408)  = OSNumber::unsigned32BitValue(v82);
      uint64_t v83 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 104))(this);
      uint64_t v33 = (*(uint64_t (**)(uint64_t, void, void, void, void, void))(*(void *)v83 + 56))(v83, *(void *)(*(void *)this + 1256), 0, 0, 0, 0);
    }
  }
  uint64_t v84 = OSDictionary::getObject(v3, "MWS_SWDIV_CELL_POLICY");
  if (v84)
  {
    uint64_t v85 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v84, gOSNumberMetaClass);
    if (v85)
    {
      *(_DWORD *)(*((void *)this + 9) + 10412)  = OSNumber::unsigned32BitValue(v85);
      uint64_t v86 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 104))(this);
      uint64_t v33 = (*(uint64_t (**)(uint64_t, void, void, void, void, void))(*(void *)v86 + 56))(v86, *(void *)(*(void *)this + 1264), 0, 0, 0, 0);
    }
  }
  uint64_t v87 = OSDictionary::getObject(v3, "MWS_SCAN_FREQ");
  if (v87)
  {
    uint64_t v88 = (const OSDictionary *)OSMetaClassBase::safeMetaCast(v87, gOSDictionaryMetaClass);
    if (v88)
    {
      uint64_t v89 = v88;
      OSObjectInterface_vtbl v90 = OSDictionary::getObject(v88, "MWS_SCAN_FREQ_INDEX");
      uint64_t v91 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v90, gOSNumberMetaClass);
      uint64_t v92 = OSDictionary::getObject(v89, "MWS_SCAN_FREQ_CHANNELS");
      unint64_t v93 = OSMetaClassBase::safeMetaCast(v92, gOSArrayMetaClass);
      if (v91)
      {
        uint64_t v94 = (const OSArray *)v93;
        if (v93)
        {
          uint64_t v95 = *((void *)this + 9);
          *(void *)(v95 + 10424)  = 0;
          *(_WORD *)(v95 + 10432)  = 0;
          *(_WORD *)(*((void *)this + 9) + 10424)  = OSNumber::unsigned32BitValue(v91);
          int v96 = ((uint64_t (*)(const OSArray *))v94->getCount)(v94);
          if (v96 >= 1)
          {
            int v97 = v96;
            for (uint32_t i = 0; i != v97; ++i)
            {
              OSObjectInterface_vtbl v99 = OSArray::getObject(v94, i);
              OSObjectInterface_vtbl v100 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v99, gOSNumberMetaClass);
              if (v100)
              {
                uint32_t v101 = OSNumber::unsigned32BitValue(v100);
                v102  = v101;
                if (v101 > 0xE)
                {
                  if (v101 - 34 > 0x44)
                  {
                    if (v101 - 104 > 0x2F)
                    {
                      if (v101 - 153 > 0xC)
                      {
                        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                        {
                          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                          if (CCLogStream::shouldLog())
                          {
                            uint64_t v111 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this
                                                                                                + 1848))(this);
                            CCLogStream::logInfo(v111, "[dk] %s@%d:Error: mws_ocl_coex_bitmap invalid channel(%d)\n", "setProperties", 11536, v102);
                          }
                        }
                        continue;
                      }
                      uint64_t v109 = 0;
                      while (v101 != ch_5g_hi_index_map[v109])
                      {
                        v109 += 2;
                        if (v109 == 10) {
                          goto LABEL_146;
                        }
                      }
                      unsigned int v112 = ch_5g_hi_index_map[v109 + 1];
                      if (v112 > 0xF) {
                        continue;
                      }
                      int v103 = 1 << v112;
                      v104  = *((void *)this + 9);
                      uint64_t v105 = 10432;
                    }
                    else
                    {
                      uint64_t v107 = 0;
                      while (v101 != ch_5g_mid_index_map[v107])
                      {
                        v107 += 2;
                        if (v107 == 32) {
                          goto LABEL_146;
                        }
                      }
                      unsigned int v110 = ch_5g_mid_index_map[v107 + 1];
                      if (v110 > 0xF) {
                        continue;
                      }
                      int v103 = 1 << v110;
                      v104  = *((void *)this + 9);
                      uint64_t v105 = 10430;
                    }
                  }
                  else
                  {
                    uint64_t v106 = 0;
                    while (v101 != ch_5g_lo_index_map[v106])
                    {
                      v106 += 2;
                      if (v106 == 32) {
                        goto LABEL_146;
                      }
                    }
                    unsigned int v108 = ch_5g_lo_index_map[v106 + 1];
                    if (v108 > 0xF) {
                      continue;
                    }
                    int v103 = 1 << v108;
                    v104  = *((void *)this + 9);
                    uint64_t v105 = 10428;
                  }
                }
                else
                {
                  int v103 = 1 << v101;
                  v104  = *((void *)this + 9);
                  uint64_t v105 = 10426;
                }
                *(_WORD *)(v104 + v105) |= v103;
              }
LABEL_146:
              ;
            }
          }
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              v353  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logNotice(v353, "[dk] %s@%d:Setting MWS_SCAN_FREQ_CHANNELS to %d 0x%x 0x%x 0x%x 0x%x\n", "setProperties", 11541, *(unsigned __int16 *)(*((void *)this + 9) + 10424), *(unsigned __int16 *)(*((void *)this + 9) + 10426), *(unsigned __int16 *)(*((void *)this + 9) + 10428), *(unsigned __int16 *)(*((void *)this + 9) + 10430), *(unsigned __int16 *)(*((void *)this + 9) + 10432));
            }
          }
          uint64_t v124 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 104))(this);
          uint64_t v33 = (*(uint64_t (**)(uint64_t, void, uint64_t, void, void, void))(*(void *)v124 + 56))(v124, *(void *)(*(void *)this + 1280), *((void *)this + 9) + 10440, 0, 0, 0);
        }
      }
    }
    else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unsigned __int8 v123 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v123, "[dk] %s@%d:Parameters missing!!!\n", "setProperties", 11546);
      }
    }
  }
  v125  = OSDictionary::getObject(v3, "MWS_SET_LTE_TDD_MODE");
  if (v125)
  {
    int v126 = OSMetaClassBase::safeMetaCast(v125, gOSArrayMetaClass);
    if (v126)
    {
      v127  = (const OSArray *)v126;
      v128  = ((uint64_t (*)(OSMetaClassBase *))v126->__vftable[1].Dispatch)(v126);
      unsigned int v129 = v128;
      if (v128 > 0x20)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            v355  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v355, "[dk] %s@%d:more channels that APPLE80211_MAX_CHANNELS (%d)\n", "setProperties", 11570, v129);
          }
        }
      }
      else
      {
        *(_DWORD *)(*((void *)this + 9) + 10436)  = 0;
        if (v128)
        {
          uint32_t v130 = 0;
          do
          {
            v131  = OSArray::getObject(v127, v130);
            long long v132 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v131, gOSNumberMetaClass);
            if (v132)
            {
              long long v133 = v132;
              if (OSNumber::unsigned32BitValue(v132)) {
                *(_DWORD *)(*((void *)this + 9) + 10436) |= 1 << (OSNumber::unsigned32BitValue(v133) - 1);
              }
            }
            ++v130;
          }
          while (v129 != v130);
        }
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            v354  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logNotice(v354, "[dk] %s@%d:Setting MWS_SET_LTE_TDD_MODE channels bitmap %08x\n", "setProperties", 11566, *(_DWORD *)(*((void *)this + 9) + 10436));
          }
        }
        v134  = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 104))(this);
        uint64_t v33 = (*(uint64_t (**)(uint64_t, void, uint64_t, void, void, void))(*(void *)v134 + 56))(v134, *(void *)(*(void *)this + 1288), *((void *)this + 9) + 10436, 0, 0, 0);
      }
    }
  }
  long long v135 = OSDictionary::getObject(v3, "MWS_ANTENNA_SELECTION");
  if (v135)
  {
    long long v136 = OSMetaClassBase::safeMetaCast(v135, gOSArrayMetaClass);
    if (v136)
    {
      v137  = (const OSArray *)v136;
      *(void *)(*((void *)this + 9) + 10440)  = 0;
      int v138 = ((uint64_t (*)(OSMetaClassBase *))v136->__vftable[1].Dispatch)(v136);
      if (v138 == 4)
      {
        for (uint64_t j = 0; j != 4; ++j)
        {
          v140  = OSArray::getObject(v137, j);
          v141  = (const OSNumber *)OSMetaClassBase::safeMetaCast(v140, gOSNumberMetaClass);
          if (v141)
          {
            int v142 = v141;
            if (OSNumber::unsigned16BitValue(v141)) {
              *(_WORD *)(*((void *)this + 9) + 2 * j + 10440)  = OSNumber::unsigned16BitValue(v142);
            }
          }
        }
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            v356  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logNotice(v356, "[dk] %s@%d:Setting MWS_ANTENNA_SELECTION ivars->fAntennaSelection array %d %d %d %d\n", "setProperties", 11591, *(unsigned __int16 *)(*((void *)this + 9) + 10440), *(unsigned __int16 *)(*((void *)this + 9) + 10442), *(unsigned __int16 *)(*((void *)this + 9) + 10444), *(unsigned __int16 *)(*((void *)this + 9) + 10446));
          }
        }
        uint64_t v143 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 104))(this);
        uint64_t v33 = (*(uint64_t (**)(uint64_t, void, uint64_t, void, void, void))(*(void *)v143 + 56))(v143, *(void *)(*(void *)this + 1296), *((void *)this + 9) + 10440, 0, 0, 0);
      }
      else
      {
        v144  = v138;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            v357  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v357, "[dk] %s@%d:Expected array of 4, got %d\n", "setProperties", 11595, v144);
          }
        }
      }
    }
  }
  v145  = OSDictionary::getObject(v3, "MWS_ANTENNA_SELECTION_V2");
  if (v145)
  {
    v146  = OSMetaClassBase::safeMetaCast(v145, gOSArrayMetaClass);
    if (v146)
    {
      v147  = (const OSArray *)v146;
      v148  = *((void *)this + 9);
      *(_OWORD *)(v148 + 10464)  = 0u;
      *(_OWORD *)(v148 + 10448)  = 0u;
      v149  = ((uint64_t (*)(OSMetaClassBase *))v146->__vftable[1].Dispatch)(v146);
      if (v149 == 16)
      {
        for (k  = 0; k != 16; ++k)
        {
          int v151 = OSArray::getObject(v147, k);
          int v152 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v151, gOSNumberMetaClass);
          if (v152)
          {
            v153  = v152;
            if (OSNumber::unsigned16BitValue(v152)) {
              *(_WORD *)(*((void *)this + 9) + 2 * k + 10448)  = OSNumber::unsigned16BitValue(v153);
            }
          }
        }
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            v358  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logNotice(v358, "[dk] %s@%d:Setting MWS_ANTENNA_SELECTION_V2 ivars->fAntennaSelection_v2 array %d %d %d %d %d %d %d %d\n", "setProperties", 11617, *(unsigned __int16 *)(*((void *)this + 9) + 10448), *(unsigned __int16 *)(*((void *)this + 9) + 10450), *(unsigned __int16 *)(*((void *)this + 9) + 10452), *(unsigned __int16 *)(*((void *)this + 9) + 10454), *(unsigned __int16 *)(*((void *)this + 9) + 10456), *(unsigned __int16 *)(*((void *)this + 9) + 10458), *(unsigned __int16 *)(*((void *)this + 9) + 10460), *(unsigned __int16 *)(*((void *)this + 9) + 10462));
          }
        }
        v154  = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 104))(this);
        uint64_t v33 = (*(uint64_t (**)(uint64_t, void, uint64_t, void, void, void))(*(void *)v154 + 56))(v154, *(void *)(*(void *)this + 1304), *((void *)this + 9) + 10448, 0, 0, 0);
      }
      else
      {
        v155  = v149;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            v359  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v359, "[dk] %s@%d:Expected array of %d, got %d\n", "setProperties", 11621, 16, v155);
          }
        }
      }
    }
  }
  v156  = OSDictionary::getObject(v3, "MWS_WLANRX_PROT");
  if (v156)
  {
    unsigned __int8 v157 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v156, gOSNumberMetaClass);
    if (v157)
    {
      *(_DWORD *)(*((void *)this + 9) + 10500)  = OSNumber::unsigned32BitValue(v157);
      uint64_t v158 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 104))(this);
      uint64_t v33 = (*(uint64_t (**)(uint64_t, void, void, void, void, void))(*(void *)v158 + 56))(v158, *(void *)(*(void *)this + 1320), 0, 0, 0, 0);
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          v339  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logNotice(v339, "[dk] %s@%d:Setting MWS_WLANRX_PROT to 0x%x\n", "setProperties", 11633, *(_DWORD *)(*((void *)this + 9) + 10500));
        }
      }
    }
  }
  uint64_t v159 = OSDictionary::getObject(v3, "MWS_WCI2_TXIND");
  if (v159)
  {
    v160  = (const OSNumber *)OSMetaClassBase::safeMetaCast(v159, gOSNumberMetaClass);
    if (v160)
    {
      *(_DWORD *)(*((void *)this + 9) + 10504)  = OSNumber::unsigned32BitValue(v160);
      v161  = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 104))(this);
      uint64_t v33 = (*(uint64_t (**)(uint64_t, void, void, void, void, void))(*(void *)v161 + 56))(v161, *(void *)(*(void *)this + 1328), 0, 0, 0, 0);
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          v340  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logNotice(v340, "[dk] %s@%d:Setting WCI2_TXIND to 0x%x\n", "setProperties", 11643, *(_DWORD *)(*((void *)this + 9) + 10504));
        }
      }
    }
  }
  v162  = OSDictionary::getObject(v3, "MWS_SCANJOIN_PROT");
  if (v162)
  {
    v163  = (const OSNumber *)OSMetaClassBase::safeMetaCast(v162, gOSNumberMetaClass);
    if (v163)
    {
      *(_DWORD *)(*((void *)this + 9) + 10508)  = OSNumber::unsigned32BitValue(v163);
      v164  = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 104))(this);
      uint64_t v33 = (*(uint64_t (**)(uint64_t, void, void, void, void, void))(*(void *)v164 + 56))(v164, *(void *)(*(void *)this + 1336), 0, 0, 0, 0);
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          v341  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logNotice(v341, "[dk] %s@%d:Setting MWS_SCANJOIN_PROT to 0x%x\n", "setProperties", 11653, *(_DWORD *)(*((void *)this + 9) + 10508));
        }
      }
    }
  }
  v165  = OSDictionary::getObject(v3, "MWS_AUTOPROT_PARAMS");
  if (v165)
  {
    unsigned __int8 v166 = (const OSDictionary *)OSMetaClassBase::safeMetaCast(v165, gOSDictionaryMetaClass);
    if (v166)
    {
      uint64_t v167 = v166;
      v168  = OSDictionary::getObject(v166, "MWS_AUTOPROT_PARAMS_WEIGHT");
      v169  = (const OSNumber *)OSMetaClassBase::safeMetaCast(v168, gOSNumberMetaClass);
      v170  = OSDictionary::getObject(v167, "MWS_AUTOPROT_PARAMS_THRESH");
      v171  = OSMetaClassBase::safeMetaCast(v170, gOSNumberMetaClass);
      if (v169)
      {
        uint64_t v172 = (const OSNumber *)v171;
        if (v171)
        {
          *(_DWORD *)(*((void *)this + 9) + 10512)  = OSNumber::unsigned32BitValue(v169);
          *(_DWORD *)(*((void *)this + 9) + 10516)  = OSNumber::unsigned32BitValue(v172);
          v173  = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 104))(this);
          uint64_t v33 = (*(uint64_t (**)(uint64_t, void, void, void, void, void))(*(void *)v173 + 56))(v173, *(void *)(*(void *)this + 1344), 0, 0, 0, 0);
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              v360  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logNotice(v360, "[dk] %s@%d:Setting MWS_AUTOPROT_PARAMS to weight 0x%x thresh 0x%x\n", "setProperties", 11667, *(_DWORD *)(*((void *)this + 9) + 10512), *(_DWORD *)(*((void *)this + 9) + 10516));
            }
          }
        }
      }
    }
  }
  uint64_t v174 = OSDictionary::getObject(v3, "IO80211InterfaceMwsNGCCoexBitmap");
  if (v174)
  {
    v175  = v174;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        v337  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v337, "[dk] %s@%d:Setting APPLE80211KEY_MWS_NGC_COEX_BITMAP\n", "setProperties", 11675);
      }
    }
    unsigned __int8 v176 = (const OSDictionary *)OSMetaClassBase::safeMetaCast(v175, gOSDictionaryMetaClass);
    if (v176)
    {
      uint64_t v177 = v176;
      v178  = OSDictionary::getObject(v176, "IO80211InterfaceMwsNGCCoex5GHzBitmapLow");
      if (v178)
      {
        uint64_t v179 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v178, gOSNumberMetaClass);
        *(_DWORD *)(*((void *)this + 9) + 10540)  = OSNumber::unsigned32BitValue(v179);
      }
      v180  = OSDictionary::getObject(v177, "IO80211InterfaceMwsNGCCoex5GHzBitmapMid");
      if (v180)
      {
        v181  = (const OSNumber *)OSMetaClassBase::safeMetaCast(v180, gOSNumberMetaClass);
        *(_DWORD *)(*((void *)this + 9) + 10544)  = OSNumber::unsigned32BitValue(v181);
      }
      v182  = OSDictionary::getObject(v177, "IO80211InterfaceMwsNGCCoex5GHzBitmapHi");
      if (v182)
      {
        v183  = (const OSNumber *)OSMetaClassBase::safeMetaCast(v182, gOSNumberMetaClass);
        *(_DWORD *)(*((void *)this + 9) + 10548)  = OSNumber::unsigned32BitValue(v183);
      }
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          v342  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logNotice(v342, "[dk] %s@%d:Setting MWS_NGC_COEX_BITMAPS to 0x%x 0x%x 0x%x\n", "setProperties", 11699, *(_DWORD *)(*((void *)this + 9) + 10540), *(_DWORD *)(*((void *)this + 9) + 10544), *(_DWORD *)(*((void *)this + 9) + 10548));
        }
      }
      v184  = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 104))(this);
      uint64_t v33 = (*(uint64_t (**)(uint64_t, void, uint64_t, void, void, void))(*(void *)v184 + 56))(v184, *(void *)(*(void *)this + 1416), *((void *)this + 9) + 10540, 0, 0, 0);
    }
  }
  v185  = OSDictionary::getObject(v3, "MWS_NGC_TIMER_GRANULARITY");
  if (v185)
  {
    v186  = (const OSNumber *)OSMetaClassBase::safeMetaCast(v185, gOSNumberMetaClass);
    if (v186)
    {
      *(_DWORD *)(*((void *)this + 9) + 10712)  = OSNumber::unsigned32BitValue(v186);
      v187  = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 104))(this);
      uint64_t v33 = (*(uint64_t (**)(uint64_t, void, void, void, void, void))(*(void *)v187 + 56))(v187, *(void *)(*(void *)this + 1424), 0, 0, 0, 0);
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          v343  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v343, "[dk] %s@%d:Setting MWS_NGC_TIMER_GRANULARITY to 0x%x\n", "setProperties", 11711, *(_DWORD *)(*((void *)this + 9) + 10712));
        }
      }
    }
  }
  v188  = OSDictionary::getObject(v3, "MWS_NGC_ACTIVITY_LEVEL_THRESHOLDS");
  if (v188)
  {
    uint64_t v189 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v188, gOSNumberMetaClass);
    if (v189)
    {
      *(_DWORD *)(*((void *)this + 9) + 10708)  = OSNumber::unsigned32BitValue(v189);
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          v344  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v344, "[dk] %s@%d:Setting MWS_NGC_ACTIVITY_LEVEL_THRESHOLDS to 0x%x\n", "setProperties", 11720, *(_DWORD *)(*((void *)this + 9) + 10708));
        }
      }
      uint64_t v190 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 104))(this);
      uint64_t v33 = (*(uint64_t (**)(uint64_t, void, uint64_t, void, void, void))(*(void *)v190 + 56))(v190, *(void *)(*(void *)this + 1432), *((void *)this + 9) + 10708, 0, 0, 0);
    }
  }
  v191  = OSDictionary::getObject(v3, "IO80211MWS2GWiFiType7Bitmap");
  if (v191)
  {
    unsigned __int8 v192 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v191, gOSNumberMetaClass);
    if (v192)
    {
      *(_DWORD *)(*((void *)this + 9) + 30940)  = OSNumber::unsigned32BitValue(v192);
      uint64_t v193 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 104))(this);
      uint64_t v33 = (*(uint64_t (**)(uint64_t, void, uint64_t, void, void, void))(*(void *)v193 + 56))(v193, *(void *)(*(void *)this + 1440), *((void *)this + 9) + 30940, 0, 0, 0);
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          v345  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v345, "[dk] %s@%d:Setting MWS_2GWiFi_TYPE7_BITMAP to 0x%x\n", "setProperties", 11733, *(_DWORD *)(*((void *)this + 9) + 30940));
        }
      }
    }
  }
  v194  = OSDictionary::getObject(v3, "MWS_Aggressor_FrameConfig");
  if (v194)
  {
    memset(v365, 170, 28);
    v195  = (const OSDictionary *)OSMetaClassBase::safeMetaCast(v194, gOSDictionaryMetaClass);
    if (v195)
    {
      unsigned int v196 = v195;
      __int16 v197 = OSDictionary::getObject(v195, "MWS_Aggressor_Frame_Duration");
      __int16 v198 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v197, gOSNumberMetaClass);
      if (!v198)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            v207  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v207, "[dk] %s@%d:Error reading APPLE80211KEY_MWS_AGG_FRAME_DURATION\n");
          }
        }
        return v33;
      }
      *(_WORD *)v365  = OSNumber::unsigned16BitValue(v198);
      v199  = OSDictionary::getObject(v196, "MWS_Aggressor_Frame_SyncAssertOffset");
      unsigned __int8 v200 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v199, gOSNumberMetaClass);
      if (!v200)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            v208  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v208, "[dk] %s@%d:Error reading APPLE80211KEY_MWS_AGG_FRAME_SYNC_ASSERT_OFFSET\n");
          }
        }
        return v33;
      }
      *(_WORD *)&v365[2]  = OSNumber::unsigned16BitValue(v200);
      uint64_t v201 = OSDictionary::getObject(v196, "MWS_Aggressor_Frame_SyncAssertJitter");
      v202  = (const OSNumber *)OSMetaClassBase::safeMetaCast(v201, gOSNumberMetaClass);
      if (!v202)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            v209  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v209, "[dk] %s@%d:Error reading APPLE80211KEY_MWS_AGG_FRAME_SYNC_ASSERT_JITTER\n");
          }
        }
        return v33;
      }
      *(_WORD *)&v365[4]  = OSNumber::unsigned16BitValue(v202);
      v203  = OSDictionary::getObject(v196, "MWS_Aggressor_Frame_NumPeriods");
      uint64_t v204 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v203, gOSNumberMetaClass);
      if (!v204)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            v210  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v210, "[dk] %s@%d:Error reading APPLE80211KEY_MWS_AGG_FRAME_NUM_PERIODS\n");
          }
        }
        return v33;
      }
      v205  = OSNumber::unsigned8BitValue(v204);
      v365[27]  = v205;
      if (v205 >= 8)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            v206  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v206, "[dk] %s@%d:Error reading APPLE80211KEY_MWS_AGG_FRAME_NUM_PERIODS is too big %d(max %d)\n");
          }
        }
        return v33;
      }
      v211  = OSDictionary::getObject(v196, "MWS_Aggressor_Frame_PeriodDuration");
      v212  = OSMetaClassBase::safeMetaCast(v211, gOSArrayMetaClass);
      if (!v212)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            unsigned int v225 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v225, "[dk] %s@%d:Error reading APPLE80211KEY_MWS_AGG_FRAME_PERIOD_DURATION\n");
          }
        }
        return v33;
      }
      int v213 = (const OSArray *)v212;
      v214  = ((uint64_t (*)(OSMetaClassBase *))v212->__vftable[1].Dispatch)(v212);
      if (v214 > 7 || v214 != v365[27])
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            v226  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v226, "[dk] %s@%d:Error reading APPLE80211KEY_MWS_AGG_FRAME_PERIOD_DURATION is doesn't match %d(expected params->num_periods %d, max %d)\n");
          }
        }
        return v33;
      }
      if (v214)
      {
        v215  = 0;
        v216  = v214;
        do
        {
          uint64_t v217 = OSArray::getObject(v213, v215);
          v218  = (const OSNumber *)OSMetaClassBase::safeMetaCast(v217, gOSNumberMetaClass);
          if (v218) {
            *(_WORD *)&v365[2 * v215 + 6]  = OSNumber::unsigned16BitValue(v218);
          }
          ++v215;
        }
        while (v216 != v215);
      }
      uint64_t v219 = OSDictionary::getObject(v196, "MWS_Aggressor_Frame_PeriodType");
      v220  = OSMetaClassBase::safeMetaCast(v219, gOSArrayMetaClass);
      if (!v220)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v227 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v227, "[dk] %s@%d:Error reading APPLE80211KEY_MWS_AGG_FRAME_PERIOD_TYPE\n");
          }
        }
        return v33;
      }
      uint64_t v221 = (const OSArray *)v220;
      unsigned int v222 = ((uint64_t (*)(OSMetaClassBase *))v220->__vftable[1].Dispatch)(v220);
      if (v222 > 7 || v222 != v365[27])
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            int v224 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v224, "[dk] %s@%d:Error reading APPLE80211KEY_MWS_AGG_FRAME_PERIOD_TYPE is doesn't match %d(expected params->num_periods %d, max %d)\n");
          }
        }
        return v33;
      }
      if (v222)
      {
        v228  = 0;
        unsigned int v229 = v222;
        do
        {
          v230  = OSArray::getObject(v221, v228);
          v231  = (const OSNumber *)OSMetaClassBase::safeMetaCast(v230, gOSNumberMetaClass);
          if (v231) {
            v365[v228 + 20]  = OSNumber::unsigned8BitValue(v231);
          }
          ++v228;
        }
        while (v229 != v228);
      }
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          v362  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logNotice(v362, "[dk] %s@%d:Setting MWS_AGG_FRAME_CONFIG\n", "setProperties", 11821);
        }
      }
      v232  = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 104))(this);
      LODWORD(v3AppleBCMWLANCommandMonitor::free(this - 3) = (*(uint64_t (**)(uint64_t, void, unsigned char *, void, void, void))(*(void *)v232 + 56))(v232, *(void *)(*(void *)this + 1352), v365, 0, 0, 0);
    }
  }
  if ((AppleBCMWLANCore::isOCLEnabled(this) & 1) != 0 || AppleBCMWLANCore::featureFlagIsBitSet(this, 80))
  {
    v233  = OSDictionary::getObject(v3, "MWS_OCL_PARAMS");
    if (v233)
    {
      int v234 = v233;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          v347  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logNotice(v347, "[dk] %s@%d:Processing Property APPLE80211KEY_MWS_OCL_PARAMS\n", "setProperties", 11834);
        }
      }
      v235  = *(AppleBCMWLANPowerManager **)(*((void *)this + 9) + 5528);
      if (v235) {
        AppleBCMWLANPowerManager::setMWSCoexIoVarsAsync_mws_ocl_coex_bitmap(v235, v234, 0);
      }
    }
  }
  v236  = OSDictionary::getObject(v3, "MWS_WCI2_TX_ENVELOPE_IND_2G");
  if (v236)
  {
    v237  = (const OSNumber *)OSMetaClassBase::safeMetaCast(v236, gOSNumberMetaClass);
    if (v237)
    {
      *(unsigned char *)(*((void *)this + 9) + 10520)  = OSNumber::unsigned16BitValue(v237) == 1;
      v238  = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 104))(this);
      LODWORD(v3AppleBCMWLANCommandMonitor::free(this - 3) = (*(uint64_t (**)(uint64_t, void, void, void, void, void))(*(void *)v238 + 56))(v238, *(void *)(*(void *)this + 1360), 0, 0, 0, 0);
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          v348  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logNotice(v348, "[dk] %s@%d:Setting WCI2 Tx Envelope Indication Enable to 0x%x\n", "setProperties", 11882, *(unsigned __int8 *)(*((void *)this + 9) + 10520));
        }
      }
    }
  }
  v239  = OSDictionary::getObject(v3, "MWS_TX_ENVELOPE_IDLE_TIMER");
  if (v239)
  {
    v240  = (const OSNumber *)OSMetaClassBase::safeMetaCast(v239, gOSNumberMetaClass);
    if (v240)
    {
      *(_WORD *)(*((void *)this + 9) + 10522)  = OSNumber::unsigned16BitValue(v240);
      v241  = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 104))(this);
      LODWORD(v3AppleBCMWLANCommandMonitor::free(this - 3) = (*(uint64_t (**)(uint64_t, void, void, void, void, void))(*(void *)v241 + 56))(v241, *(void *)(*(void *)this + 1368), 0, 0, 0, 0);
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          v349  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logNotice(v349, "[dk] %s@%d:Setting Tx Envelope Idle Timeout to 0x%x\n", "setProperties", 11892, *(unsigned __int16 *)(*((void *)this + 9) + 10522));
        }
      }
    }
  }
  v242  = OSDictionary::getObject(v3, "MWS_WCI2_TXIND_5G");
  if (v242)
  {
    v243  = (const OSNumber *)OSMetaClassBase::safeMetaCast(v242, gOSNumberMetaClass);
    if (v243)
    {
      *(unsigned char *)(*((void *)this + 9) + 10524)  = OSNumber::unsigned16BitValue(v243) == 1;
      v244  = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 104))(this);
      LODWORD(v3AppleBCMWLANCommandMonitor::free(this - 3) = (*(uint64_t (**)(uint64_t, void, void, void, void, void))(*(void *)v244 + 56))(v244, *(void *)(*(void *)this + 1376), 0, 0, 0, 0);
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          v350  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logNotice(v350, "[dk] %s@%d:Setting WCI2 Tx Indication 5G to 0x%x\n", "setProperties", 11902, *(unsigned __int8 *)(*((void *)this + 9) + 10524));
        }
      }
    }
  }
  v245  = OSDictionary::getObject(v3, "MWS_WCI2_TXDUR_THRESH");
  if (v245)
  {
    v246  = (const OSNumber *)OSMetaClassBase::safeMetaCast(v245, gOSNumberMetaClass);
    if (v246)
    {
      *(_WORD *)(*((void *)this + 9) + 10526)  = OSNumber::unsigned16BitValue(v246);
      v247  = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 104))(this);
      LODWORD(v3AppleBCMWLANCommandMonitor::free(this - 3) = (*(uint64_t (**)(uint64_t, void, void, void, void, void))(*(void *)v247 + 56))(v247, *(void *)(*(void *)this + 1384), 0, 0, 0, 0);
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          v351  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logNotice(v351, "[dk] %s@%d:Setting Tx Duration Threshold to 0x%x\n", "setProperties", 11912, *(unsigned __int16 *)(*((void *)this + 9) + 10526));
        }
      }
    }
  }
  v248  = OSDictionary::getObject(v3, "MWS_ACTIVE_SCAN_THROTTLE");
  if (v248)
  {
    v249  = (const OSNumber *)OSMetaClassBase::safeMetaCast(v248, gOSNumberMetaClass);
    if (v249)
    {
      *(_DWORD *)(*((void *)this + 9) + 10528)  = OSNumber::unsigned32BitValue(v249);
      v250  = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 104))(this);
      LODWORD(v3AppleBCMWLANCommandMonitor::free(this - 3) = (*(uint64_t (**)(uint64_t, void, void, void, void, void))(*(void *)v250 + 56))(v250, *(void *)(*(void *)this + 1392), 0, 0, 0, 0);
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          v352  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logNotice(v352, "[dk] %s@%d:Setting Active Scan Throttle to 0x%x\n", "setProperties", 11922, *(_DWORD *)(*((void *)this + 9) + 10528));
        }
      }
    }
  }
  v251  = OSDictionary::getObject(v3, "MWS_ACTIVE_DWELL_TIME");
  if (v251)
  {
    v252  = (const OSNumber *)OSMetaClassBase::safeMetaCast(v251, gOSNumberMetaClass);
    if (v252)
    {
      *(_DWORD *)(*((void *)this + 9) + 10532)  = OSNumber::unsigned32BitValue(v252);
      v253  = *((void *)this + 9);
      v254  = *(_DWORD *)(v253 + 10532);
      if (v254 >= 0x78) {
        v254  = 120;
      }
      *(_DWORD *)(v253 + 10532)  = v254;
      v255  = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 104))(this);
      LODWORD(v3AppleBCMWLANCommandMonitor::free(this - 3) = (*(uint64_t (**)(uint64_t, void, void, void, void, void))(*(void *)v255 + 56))(v255, *(void *)(*(void *)this + 1400), 0, 0, 0, 0);
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          v256  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logNotice(v256, "[dk] %s@%d:Setting Active Scan Throttle Dwell Time to 0x%x\n", "setProperties", 11934, *(_DWORD *)(*((void *)this + 9) + 10532));
        }
      }
    }
  }
LABEL_60:
  long long v34 = OSDictionary::getObject(v3, "MWS_RC2_COEX_MODE");
  if (v34)
  {
    int v35 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v34, gOSNumberMetaClass);
    if (v35)
    {
      *(_DWORD *)(*((void *)this + 9) + 10724)  = OSNumber::unsigned32BitValue(v35);
      uint64_t v36 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 104))(this);
      LODWORD(v3AppleBCMWLANCommandMonitor::free(this - 3) = (*(uint64_t (**)(uint64_t, void, void, void, void, void))(*(void *)v36 + 56))(v36, *(void *)(*(void *)this + 1520), 0, 0, 0, 0);
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          v327  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logNotice(v327, "[dk] %s@%d:Setting RC2 Coex Mode to 0x%x\n", "setProperties", 11946, *(_DWORD *)(*((void *)this + 9) + 10724));
        }
      }
    }
  }
  int v37 = OSDictionary::getObject(v3, "MWS_RC2_PM_PROTECTION_MODE");
  if (v37)
  {
    uint16_t v38 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v37, gOSNumberMetaClass);
    if (v38)
    {
      *(_DWORD *)(*((void *)this + 9) + 10728)  = OSNumber::unsigned32BitValue(v38);
      uint64_t v39 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 104))(this);
      LODWORD(v3AppleBCMWLANCommandMonitor::free(this - 3) = (*(uint64_t (**)(uint64_t, void, void, void, void, void))(*(void *)v39 + 56))(v39, *(void *)(*(void *)this + 1528), 0, 0, 0, 0);
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          v328  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logNotice(v328, "[dk] %s@%d:Setting RC2 PM Protection Mode to 0x%x\n", "setProperties", 11957, *(_DWORD *)(*((void *)this + 9) + 10728));
        }
      }
    }
  }
  int v40 = OSDictionary::getObject(v3, "MWS_RC2_WIFI_TIMING_PARAM_INFO");
  if (v40)
  {
    int v41 = (const OSDictionary *)OSMetaClassBase::safeMetaCast(v40, gOSDictionaryMetaClass);
    if (v41)
    {
      int v42 = v41;
      uint64_t v43 = OSDictionary::getObject(v41, "MWS_RC2_GPIO_PROCESSING_DELAY");
      int v44 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v43, gOSNumberMetaClass);
      int v45 = OSDictionary::getObject(v42, "MWS_RC2_COEX_GRANT_DURATION");
      int v46 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v45, gOSNumberMetaClass);
      int v47 = OSDictionary::getObject(v42, "MWS_RC2_COEX_GRANT_INTERVAL");
      int v48 = OSMetaClassBase::safeMetaCast(v47, gOSNumberMetaClass);
      if (v44)
      {
        if (v46)
        {
          int v49 = (const OSNumber *)v48;
          if (v48)
          {
            *(unsigned char *)(*((void *)this + 9) + 10734)  = OSNumber::unsigned8BitValue(v44);
            *(unsigned char *)(*((void *)this + 9) + 10735)  = OSNumber::unsigned8BitValue(v46);
            *(unsigned char *)(*((void *)this + 9) + 10736)  = OSNumber::unsigned8BitValue(v49);
            uint64_t v50 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 104))(this);
            LODWORD(v3AppleBCMWLANCommandMonitor::free(this - 3) = (*(uint64_t (**)(uint64_t, void, void, void, void, void))(*(void *)v50 + 56))(v50, *(void *)(*(void *)this + 1536), 0, 0, 0, 0);
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (CCLogStream::shouldLog())
              {
                v338  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                CCLogStream::logNotice(v338, "[dk] %s@%d:Setting RC2 CTS2S setting to 0x%x\n", "setProperties", 11975, *(unsigned __int8 *)(*((void *)this + 9) + 10734));
              }
            }
          }
        }
      }
    }
  }
  uint64_t v51 = OSDictionary::getObject(v3, "MWS_RC1_COEX_PARAM_INFO");
  if (v51)
  {
    int v52 = (const OSDictionary *)OSMetaClassBase::safeMetaCast(v51, gOSDictionaryMetaClass);
    if (v52)
    {
      int v53 = v52;
      int v54 = OSDictionary::getObject(v52, "MWS_RC1_COEX_MODE_CHANGED");
      if (v54)
      {
        int v55 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v54, gOSNumberMetaClass);
        if (v55)
        {
          if (OSNumber::unsigned8BitValue(v55))
          {
            int v56 = OSDictionary::getObject(v53, "MWS_RC1_COEX_MODE");
            if (v56)
            {
              OSObjectInterface_vtbl v57 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v56, gOSNumberMetaClass);
              if (v57)
              {
                *(_DWORD *)(*((void *)this + 9) + 10716)  = OSNumber::unsigned32BitValue(v57);
                uint64_t v58 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 104))(this);
                LODWORD(v3AppleBCMWLANCommandMonitor::free(this - 3) = (*(uint64_t (**)(uint64_t, void, void, void, void, void))(*(void *)v58 + 56))(v58, *(void *)(*(void *)this + 1512), 0, 0, 0, 0);
                if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                {
                  (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                  if (CCLogStream::shouldLog())
                  {
                    v361  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                    CCLogStream::logAlert(v361, "[dk] %s@%d:Setting RC1 Coex Mode to 0x%x\n", "setProperties", 12002, *(_DWORD *)(*((void *)this + 9) + 10716));
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t v59 = OSDictionary::getObject(v3, "MWS_SET_WIFI_BT_AIRTIME_POLICY");
  if (v59)
  {
    uint64_t v60 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v59, gOSNumberMetaClass);
    *(_DWORD *)v365  = 0;
    if (v60)
    {
      uint32_t v61 = OSNumber::unsigned32BitValue(v60);
      int v62 = v61;
      if (!v61)
      {
LABEL_93:
        *(_DWORD *)v365  = v62;
        uint64_t v63 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 104))(this);
        LODWORD(v3AppleBCMWLANCommandMonitor::free(this - 3) = (*(uint64_t (**)(uint64_t, AppleBCMWLANCommander *(*)(AppleBCMWLANCore *, unsigned int *), unsigned char *, void, void, void))(*(void *)v63 + 56))(v63, AppleBCMWLANCore::setACLParams, v365, 0, 0, 0);
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint16_t v64 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logNotice(v64, "[dk] %s@%d:Setting WIFI BT AIRTIME POLICY to 0x%x\n", "setProperties", 12040, *(_DWORD *)v365);
          }
        }
        goto LABEL_175;
      }
      if (v61 == 1)
      {
        int v62 = 4705;
        goto LABEL_93;
      }
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          v346  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v346, "[dk] %s@%d:APPLE80211KEY_MWS_SET_WIFI_BT_AIRTIME_POLICY profile %d is not supported\n", "setProperties", 12034, v62);
        }
      }
    }
  }
LABEL_175:
  uint64_t v113 = OSDictionary::getObject(v3, "MWS_BT_SCO_HID_TRAFFIC_PARAM");
  v114  = v33;
  if (!v113) {
    goto LABEL_407;
  }
  v115  = (const OSDictionary *)OSMetaClassBase::safeMetaCast(v113, gOSDictionaryMetaClass);
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
    && ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
        CCLogStream::shouldLog()))
  {
    v264  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    CCLogStream::logAlert(v264, "[dk] %s@%d:Got APPLE80211KEY_MWS_BT_SCO_HID_TRAFFIC_PARAM\n", "setProperties", 12053);
    if (v115) {
      goto LABEL_179;
    }
  }
  else if (v115)
  {
LABEL_179:
    int v116 = OSDictionary::getObject(v115, "MWS_BT_SCO_HID_TRAFFIC_INDICATION");
    if (v116 && (uint64_t v117 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v116, gOSNumberMetaClass)) != 0) {
      uint32_t v118 = OSNumber::unsigned32BitValue(v117);
    }
    else {
      uint32_t v118 = 0;
    }
    uint64_t v119 = OSDictionary::getObject(v115, "MWS_BT_SCO_HID_TRAFFIC_USE_CASE");
    if (v119 && (size_t v120 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v119, gOSNumberMetaClass)) != 0)
    {
      uint32_t v121 = OSNumber::unsigned32BitValue(v120);
      LODWORD(v115)  = v121;
      if (v118 && v121 == 1)
      {
        v122  = 1;
        LODWORD(v115)  = 1;
LABEL_190:
        *(unsigned char *)(*((void *)this + 9) + 17640)  = v122;
        goto LABEL_403;
      }
    }
    else
    {
      LODWORD(v115)  = 0;
    }
    v122  = 0;
    goto LABEL_190;
  }
  uint32_t v118 = 0;
LABEL_403:
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      v269  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v269, "[dk] %s@%d:BT traffic indication is %d for LAUseCase %d\n", "setProperties", 12081, v118, v115);
    }
  }
  v114  = 0;
LABEL_407:
  v265  = OSDictionary::getObject(v3, "MWS_BT_A2DP_TRAFFIC_INDICATION");
  if (v265)
  {
    v266  = (const OSNumber *)OSMetaClassBase::safeMetaCast(v265, gOSNumberMetaClass);
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
      && ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
          CCLogStream::shouldLog()))
    {
      v270  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logInfo(v270, "[dk] %s@%d:Got APPLE80211KEY_MWS_BT_A2DP_TRAFFIC_INDICATION\n", "setProperties", 12089);
      if (v266)
      {
LABEL_411:
        v267  = OSNumber::unsigned32BitValue(v266);
        v268  = (unsigned char *)(*((void *)this + 9) + 17641);
        if (v267) {
          *v268  = 1;
        }
        else {
          *v268  = 0;
        }
        goto LABEL_416;
      }
    }
    else if (v266)
    {
      goto LABEL_411;
    }
    *(unsigned char *)(*((void *)this + 9) + 17641)  = 0;
LABEL_416:
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        v311  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v311, "[dk] %s@%d:BT A2DP for iphone indication is %d \n", "setProperties", 12103, *(unsigned __int8 *)(*((void *)this + 9) + 17641));
      }
    }
    v114  = 0;
  }
  v271  = OSDictionary::getObject(v3, "MWS_BT_ESCO_TRAFFIC_INDICATION");
  if (v271)
  {
    v272  = OSMetaClassBase::safeMetaCast(v271, gOSNumberMetaClass);
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        v312  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v312, "[dk] %s@%d:Got APPLE80211KEY_MWS_BT_ESCO_TRAFFIC_INDICATION\n", "setProperties", 12112);
      }
    }
    uint64_t v33 = 3758097090;
    if (v272)
    {
      v273  = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 104))(this);
      v114  = (*(uint64_t (**)(uint64_t, uint64_t (*)(AppleBCMWLANCore *, OSNumber *), OSMetaClassBase *, void, void, void))(*(void *)v273 + 56))(v273, AppleBCMWLANCore::reportEscoTrafficIndication, v272, 0, 0, 0);
      if (v114 == -536870206) {
        return v33;
      }
    }
    else
    {
      v114  = -536870206;
    }
  }
  v274  = OSDictionary::getObject(v3, "IO80211InterfaceSimulateJoinStatusSubStateParams");
  if (v274)
  {
    v275  = (const OSDictionary *)OSMetaClassBase::safeMetaCast(v274, gOSDictionaryMetaClass);
    if (v275)
    {
      v276  = v275;
      memset(v365, 170, 12);
      v277  = OSDictionary::getObject(v275, "IO80211InterfaceSimulateSubStateIdx");
      if (v277)
      {
        v278  = (const OSNumber *)OSMetaClassBase::safeMetaCast(v277, gOSNumberMetaClass);
        if (v278) {
          v365[0]  = OSNumber::unsigned8BitValue(v278);
        }
      }
      v279  = OSDictionary::getObject(v276, "IO80211InterfaceSimulateSubStateType");
      if (v279)
      {
        v280  = (const OSNumber *)OSMetaClassBase::safeMetaCast(v279, gOSNumberMetaClass);
        if (v280) {
          v365[1]  = OSNumber::unsigned8BitValue(v280);
        }
      }
      v281  = OSDictionary::getObject(v276, "IO80211InterfaceSimulateSubStateStatus");
      if (v281)
      {
        v282  = (const OSNumber *)OSMetaClassBase::safeMetaCast(v281, gOSNumberMetaClass);
        if (v282) {
          *(_DWORD *)&v365[4]  = OSNumber::unsigned32BitValue(v282);
        }
      }
      v283  = OSDictionary::getObject(v276, "IO80211InterfaceSimulateSubStateReason");
      if (v283)
      {
        v284  = (const OSNumber *)OSMetaClassBase::safeMetaCast(v283, gOSNumberMetaClass);
        if (v284) {
          *(_DWORD *)&v365[8]  = OSNumber::unsigned32BitValue(v284);
        }
      }
      if (OSDictionary::getObject(v276, "IO80211InterfaceSimulateSubStateClear")) {
        v285  = 0;
      }
      else {
        v285  = v365;
      }
      v286  = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 104))(this);
      v114  = (*(uint64_t (**)(uint64_t, uint64_t (*)(), unsigned char *, void, void, void))(*(void *)v286 + 56))(v286, AppleBCMWLANCore::simulateJoinStatusSubStateGated, v285, 0, 0, 0);
    }
  }
  v287  = OSDictionary::getObject(v3, "IO80211InterfaceSimulateRoamStatusSubStateParams");
  if (v287)
  {
    v288  = (const OSDictionary *)OSMetaClassBase::safeMetaCast(v287, gOSDictionaryMetaClass);
    if (v288)
    {
      v289  = v288;
      memset(v365, 170, 12);
      v290  = OSDictionary::getObject(v288, "IO80211InterfaceSimulateSubStateIdx");
      if (v290)
      {
        v291  = (const OSNumber *)OSMetaClassBase::safeMetaCast(v290, gOSNumberMetaClass);
        if (v291) {
          v365[0]  = OSNumber::unsigned8BitValue(v291);
        }
      }
      v292  = OSDictionary::getObject(v289, "IO80211InterfaceSimulateSubStateType");
      if (v292)
      {
        v293  = (const OSNumber *)OSMetaClassBase::safeMetaCast(v292, gOSNumberMetaClass);
        if (v293) {
          v365[1]  = OSNumber::unsigned8BitValue(v293);
        }
      }
      v294  = OSDictionary::getObject(v289, "IO80211InterfaceSimulateSubStateStatus");
      if (v294)
      {
        v295  = (const OSNumber *)OSMetaClassBase::safeMetaCast(v294, gOSNumberMetaClass);
        if (v295) {
          *(_DWORD *)&v365[4]  = OSNumber::unsigned32BitValue(v295);
        }
      }
      v296  = OSDictionary::getObject(v289, "IO80211InterfaceSimulateSubStateReason");
      if (v296)
      {
        v297  = (const OSNumber *)OSMetaClassBase::safeMetaCast(v296, gOSNumberMetaClass);
        if (v297) {
          *(_DWORD *)&v365[8]  = OSNumber::unsigned32BitValue(v297);
        }
      }
      if (OSDictionary::getObject(v289, "IO80211InterfaceSimulateSubStateClear")) {
        v298  = 0;
      }
      else {
        v298  = v365;
      }
      v299  = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 104))(this);
      v114  = (*(uint64_t (**)(uint64_t, void *(*)(void *, unsigned __int8 *), unsigned char *, void, void, void))(*(void *)v299 + 56))(v299, AppleBCMWLANCore::simulateRoamStatusSubStateGated, v298, 0, 0, 0);
    }
  }
  if (!v114) {
    return 0;
  }
  *(void *)v365  = 0;
  *(void *)&v365[8]  = v365;
  *(void *)&v365[16]  = 0x2000000000;
  *(void *)&v365[24]  = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v365[24]  = OSArray::withCapacity(5u);
  v300  = (const char *)IOMallocZeroData();
  if (v300) {
    v301  = 200;
  }
  else {
    v301  = 0;
  }
  v363[0]  = _NSConcreteStackBlock;
  v363[1]  = 1107296256;
  v363[2]  = ___ZN16AppleBCMWLANCore13setPropertiesEP8OSObject_block_invoke;
  v363[3]  = &__block_descriptor_tmp_938;
  v363[4]  = v365;
  ((void (*)(const OSDictionary *, void *))v3->iterateObjects)(v3, v363);
  if ((*(unsigned int (**)(void))(**(void **)(*(void *)&v365[8] + 24) + 72))(*(void *)(*(void *)&v365[8] + 24)))
  {
    v302  = 0;
    v303  = 0;
    do
    {
      v304  = OSArray::getObject(*(const OSArray **)(*(void *)&v365[8] + 24), v302);
      v305  = (const OSString *)OSMetaClassBase::safeMetaCast(v304, gOSStringMetaClass);
      if (v305)
      {
        v306  = v305;
        if (OSString::getLength(v305) + v303 <= v301) {
          v307  = (char *)&v300[v303];
        }
        else {
          v307  = 0;
        }
        CStringNoCopy  = OSString::getCStringNoCopy(v306);
        v303 += snprintf(v307, v301 - v303, "%s ", CStringNoCopy);
      }
      ++v302;
    }
    while (v302 < (*(unsigned int (**)(void))(**(void **)(*(void *)&v365[8] + 24) + 72))(*(void *)(*(void *)&v365[8] + 24)));
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      v313  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      v314  = (*(uint64_t (**)(void))(**(void **)(*(void *)&v365[8] + 24) + 72))(*(void *)(*(void *)&v365[8] + 24));
      CCLogStream::logAlert(v313, "[dk] %s@%d:SetProperty Failed handling of propertyDict with %d keys: %s\n", "setProperties", 12272, v314, v300);
    }
  }
  v309  = *(void *)(*(void *)&v365[8] + 24);
  if (v309)
  {
    (*(void (**)(uint64_t))(*(void *)v309 + 16))(v309);
    *(void *)(*(void *)&v365[8] + 24)  = 0;
  }
  if (v300) {
    IOFreeData();
  }
  _Block_object_dispose(v365, 8);
  return v114;
}

uint64_t AppleBCMWLANCore::isRejectingCommands(AppleBCMWLANCore *this)
{
  uint64_t v1 = *((void *)this + 9);
  int v2 = *(_DWORD *)(v1 + 10388);
  if ((v2 & 0x20) != 0) {
    return 3766622210;
  }
  uint64_t result = 3766622209;
  if ((v2 & 0x2000) == 0)
  {
    uint64_t result = 3766630402;
    if ((v2 & 0x80) == 0)
    {
      if ((v2 & 0x10) != 0)
      {
        return 3766622211;
      }
      else if ((v2 & 0x8000) != 0)
      {
        return 3766630404;
      }
      else if ((v2 & 1) != 0 {
             && *(_DWORD *)(v1 + 19708) == 1
      }
             && (unint64_t v5 = *(AppleBCMWLANCommander **)(v1 + 5416)) != 0
             && (AppleBCMWLANCommander::isSleeping(v5) & 1) == 0)
      {
        uint64_t v6 = *((void *)this + 9);
        int v7 = *(_DWORD *)(v6 + 10388);
        if ((v7 & 0x10000000) == 0 || (v7 & 1) != 0 && *(_DWORD *)(v6 + 19708)) {
          return 0;
        }
        else {
          return 3766622213;
        }
      }
      else
      {
        return 82;
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::isOCLEnabled(AppleBCMWLANCore *this)
{
  uint64_t result = AppleBCMWLANCore::featureFlagIsBitSet(this, 47);
  if (result)
  {
    uint64_t v3 = *(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472);
    return AppleBCMWLANConfigManager::isOCLSupportedInDriver(v3);
  }
  return result;
}

AppleBCMWLANCommander *AppleBCMWLANCore::setACLParams(AppleBCMWLANCore *this, unsigned int *a2)
{
  int v8 = *a2;
  uint64_t result = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  if (result)
  {
    v7[0]  = &v8;
    v7[1]  = 4;
    uint64_t result = (AppleBCMWLANCommander *)AppleBCMWLANCommander::runIOVarSet(result, (uint64_t)"btc_low_latency_acl", (uint64_t)v7, 0, 0);
    if (result)
    {
      uint64_t v4 = result;
      uint64_t result = (AppleBCMWLANCommander *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (result)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t result = (AppleBCMWLANCommander *)CCLogStream::shouldLog();
        if (result)
        {
          unint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          uint64_t v6 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, AppleBCMWLANCommander *))(*(void *)this + 112))(this, v4);
          return (AppleBCMWLANCommander *)CCLogStream::logAlert(v5, "[dk] %s@%d: Error: Unable to set btc_low_latency_acl param %s, %s\n", "setACLParams", 55564, "btc_low_latency_acl", v6);
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::reportEscoTrafficIndication(AppleBCMWLANCore *this, OSNumber *a2)
{
  uint32_t v4 = OSNumber::unsigned32BitValue(a2);
  IO80211Controller::postMessage(this, *(IO80211SkywalkInterface **)(*((void *)this + 9) + 11304), 0xB5u, &v4, 4uLL, 1);
  return 0;
}

void *AppleBCMWLANCore::simulateRoamStatusSubStateGated(void *result, unsigned __int8 *a2)
{
  int v2 = result;
  if (a2)
  {
    if (a2[1] <= 3u)
    {
      *(unsigned char *)(result[9] + 12065)  = 1;
      if ((*(uint64_t (**)(void *))(*result + 1848))(result))
      {
        (*(void (**)(void *))(*v2 + 1848))(v2);
        if (CCLogStream::shouldLog())
        {
          int v8 = (CCLogStream *)(*(uint64_t (**)(void *))(*v2 + 1848))(v2);
          CCLogStream::logAlert(v8, "[dk] %s@%d:Setting simulated roam status substate params: substate: 0x%x idx: 0x%x status: 0x%x reason: 0x%x\n", "simulateRoamStatusSubStateGated", 56885, a2[1], *a2, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 2));
        }
      }
      int v4 = a2[1];
      if (v4 == 3)
      {
        *(_DWORD *)(v2[9] + 12076) |= 4u;
        *(_DWORD *)(v2[9] + 12096)  = mapBcmStatusToApple80211IOReturnScan(*((_DWORD *)a2 + 1));
        uint64_t result = (void *)mapBcmStatusToApple80211IOReturnIEEEStatus(*((_DWORD *)a2 + 2));
        *(_DWORD *)(v2[9] + 12100)  = result;
      }
      else if (v4 == 1)
      {
        *(_DWORD *)(v2[9] + 12076) |= 2u;
        *(_DWORD *)(v2[9] + 12088)  = mapBcmStatusToApple80211IOReturnScan(*((_DWORD *)a2 + 1));
        uint64_t result = (void *)mapBcmStatusToApple80211IOReturnIEEEStatus(*((_DWORD *)a2 + 2));
        *(_DWORD *)(v2[9] + 12092)  = result;
      }
      else if (a2[1])
      {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*v2 + 1848))(v2);
        if (result)
        {
          (*(void (**)(void *))(*v2 + 1848))(v2);
          uint64_t result = (void *)CCLogStream::shouldLog();
          if (result)
          {
            uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(void *))(*v2 + 1848))(v2);
            return (void *)CCLogStream::logAlert(v6, "[dk] %s@%d:Failed to configure simulated roam status substate: substate=%d idx=%d status=%d reason=%d\n", "simulateRoamStatusSubStateGated", 56910, a2[1], *a2, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 2));
          }
        }
      }
      else
      {
        *(_DWORD *)(v2[9] + 12076) |= 1u;
        *(_DWORD *)(v2[9] + 12080)  = mapBcmStatusToApple80211IOReturnScan(*((_DWORD *)a2 + 1));
        uint64_t result = (void *)mapBcmStatusToApple80211IOReturnIEEEStatus(*((_DWORD *)a2 + 2));
        *(_DWORD *)(v2[9] + 12084)  = result;
      }
    }
  }
  else
  {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 1848))(result);
    if (result)
    {
      (*(void (**)(void *))(*v2 + 1848))(v2);
      uint64_t result = (void *)CCLogStream::shouldLog();
      if (result)
      {
        int v7 = (CCLogStream *)(*(uint64_t (**)(void *))(*v2 + 1848))(v2);
        uint64_t result = (void *)CCLogStream::logAlert(v7, "[dk] %s@%d:Clearing simulated roam status substate\n", "simulateRoamStatusSubStateGated", 56916);
      }
    }
    *(unsigned char *)(v2[9] + 12065)  = 0;
    uint64_t v5 = v2[9];
    *(_DWORD *)(v5 + 12100)  = 0;
    *(_OWORD *)(v5 + 12068)  = 0u;
    *(_OWORD *)(v5 + 12084)  = 0u;
  }
  return result;
}

uint64_t ___ZN16AppleBCMWLANCore13setPropertiesEP8OSObject_block_invoke(uint64_t a1, OSMetaClassBase *anObject)
{
  uint64_t v3 = OSMetaClassBase::safeMetaCast(anObject, gOSStringMetaClass);
  OSArray::setObject(*(OSArray **)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v3);
  return 1;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setProperties(AppleBCMWLANCore *this, OSObject *a2)
{
  return AppleBCMWLANCore::setProperties((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::handleSetEventBitFieldAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    int v4 = (void *)result;
    if ((*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result))
    {
      (*(void (**)(void *))(*v4 + 1848))(v4);
      if (CCLogStream::shouldLog())
      {
        long long v12 = (CCLogStream *)(*(uint64_t (**)(void *))(*v4 + 1848))(v4);
        long long v13 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*v4 + 112))(v4, a3);
        CCLogStream::logAlert(v12, "[dk] %s@%d: Error: cannot set the event bit field!!: %s\n", "handleSetEventBitFieldAsyncCallBack", 12565, v13);
      }
    }
    uint64_t result = *(void *)(v4[9] + 14160);
    if (result)
    {
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t result = IOMallocZeroData();
        uint64_t v5 = (unsigned char *)result;
        if (result)
        {
          strcpy((char *)result, "Currently:");
          unsigned int v6 = 10;
        }
        else
        {
          unsigned int v6 = 0;
        }
        for (uint64_t i = 0; i != 27; ++i)
        {
          int v8 = 0;
          int v9 = i;
          do
          {
            if ((*(unsigned __int8 *)(v4[9] + i + 1112) >> v8))
            {
              uint64_t result = 0;
              if (!v5
                || v6 > 0x3FE
                || (int v10 = 1024,
                    long long v11 = convertEventToString(v9, 0, 0),
                    uint64_t result = snprintf(&v5[v6], 1024 - v6, " %s", v11),
                    result <= 0x3FF))
              {
                int v10 = result;
              }
              v6 += v10;
            }
            ++v8;
            v9 += 8;
          }
          while (v8 != 8);
        }
        if (v5 && v6 <= 0x3FE)
        {
          snprintf(&v5[v6], 1024 - v6, "\n");
        }
        else if (!v5)
        {
          return result;
        }
        if (*(void *)(v4[9] + 14160) && CCLogStream::shouldLog()) {
          CCLogStream::log();
        }
        unsigned char *v5 = 0;
        return IOFreeData();
      }
    }
  }
  return result;
}

IO80211Controller *AppleBCMWLANCore::startRoamScanAsyncCallback(IO80211Controller *result, uint64_t a2, unsigned int a3)
{
  unsigned int v6 = a3;
  if (a3)
  {
    uint64_t v3 = result;
    IO80211Controller::postMessage(result, *(IO80211SkywalkInterface **)(*((void *)result + 9) + 11304), 0xCFu, &v6, 4uLL, 1);
    uint64_t result = (IO80211Controller *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v3 + 1848))(v3);
    if (result)
    {
      (*(void (**)(IO80211Controller *))(*(void *)v3 + 1848))(v3);
      uint64_t result = (IO80211Controller *)CCLogStream::shouldLog();
      if (result)
      {
        int v4 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v3 + 1848))(v3);
        uint64_t v5 = (const char *)(*(uint64_t (**)(IO80211Controller *, void))(*(void *)v3 + 112))(v3, v6);
        return (IO80211Controller *)CCLogStream::logAlert(v4, "[dk] %s@%d: Error: cannot start a Roam Scan: %s\n", "startRoamScanAsyncCallback", 12598, v5);
      }
    }
  }
  return result;
}

IO80211Controller *AppleBCMWLANCore::getRssiAsyncCallback(void *a1, uint64_t a2, uint64_t a3, int **a4)
{
  if (a3)
  {
    uint64_t result = (IO80211Controller *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
    if (result)
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      uint64_t result = (IO80211Controller *)CCLogStream::shouldLog();
      if (result)
      {
        int v10 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        long long v11 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 112))(a1, a3);
        return (IO80211Controller *)CCLogStream::logAlert(v10, "[dk] %s@%d: Error: cannot read rssi from the firmware: %s\n", "getRssiAsyncCallback", 12608, v11);
      }
    }
  }
  else if (*a4)
  {
    int v7 = **a4;
    int v8 = *(AppleBCMWLANLQM **)(a1[9] + 5608);
    return AppleBCMWLANLQM::updateRSSI(v8, v7);
  }
  else
  {
    uint64_t result = (IO80211Controller *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
    if (result)
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      uint64_t result = (IO80211Controller *)CCLogStream::shouldLog();
      if (result)
      {
        int v9 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        return (IO80211Controller *)CCLogStream::logNotice(v9, "[dk] %s@%d: no valid data \n", "getRssiAsyncCallback", 12613);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handlePktFilterPortsAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 1848))(v4);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 1848))(v4);
        unsigned int v6 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 112))(v4, a3);
        return CCLogStream::logAlert(v5, "[dk] %s@%d: Error: cannot Configure Pkt Ports List in the firmware: %s\n", "handlePktFilterPortsAsyncCallBack", 12628, v6);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleSetARPOffloadAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 1848))(v4);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 1848))(v4);
        unsigned int v6 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 112))(v4, a3);
        return CCLogStream::logAlert(v5, "[dk] %s@%d: Error: cannot read ARP OE from the firmware: %s\n", "handleSetARPOffloadAsyncCallBack", 12641, v6);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleSetICMPAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 1848))(v4);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 1848))(v4);
        unsigned int v6 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 112))(v4, a3);
        return CCLogStream::logAlert(v5, "[dk] %s@%d: Error: cannot configure ICMP in firmware: %s\n", "handleSetICMPAsyncCallBack", 12653, v6);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleSetLpasAsyncCallBack(void *a1, int a2, uint64_t a3, int a4, int *address)
{
  if (address)
  {
    int v7 = *address;
    IOFree(address, 4uLL);
    if (a3)
    {
LABEL_3:
      uint64_t result = (*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      if (result)
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          int v9 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          int v10 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 112))(a1, a3);
          uint64_t result = CCLogStream::logAlert(v9, "[dk] %s@%d: Error: cannot configure LPAS in firmware: %s\n", "handleSetLpasAsyncCallBack", 12683, v10);
        }
      }
      atomic_fetch_and((atomic_uint *volatile)(a1[9] + 10388), 0xFF7FFFFF);
      return result;
    }
  }
  else
  {
    int v7 = 0;
    if (a3) {
      goto LABEL_3;
    }
  }
  if (v7 == 1)
  {
    atomic_fetch_or((atomic_uint *volatile)(a1[9] + 10388), 0x800000u);
  }
  else if (!v7)
  {
    atomic_fetch_and((atomic_uint *volatile)(a1[9] + 10388), 0xFF7FFFFF);
  }
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 1848))(a1);
  if (result)
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      long long v11 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      long long v12 = (const char *)(*(uint64_t (**)(void *, void))(*a1 + 112))(a1, 0);
      return CCLogStream::logAlert(v11, "[dk] %s@%d: LPAS request in FW: %s %d \n", "handleSetLpasAsyncCallBack", 12694, v12, v7);
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::clearLPASConfigState(uint64_t this)
{
  return this;
}

uint64_t AppleBCMWLANCore::handleSetNDOffloadAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 1848))(v4);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 1848))(v4);
        unsigned int v6 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 112))(v4, a3);
        return CCLogStream::logAlert(v5, "[dk] %s@%d: Error: cannot read ND OE from the firmware: %s\n", "handleSetNDOffloadAsyncCallBack", 12705, v6);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::setRangingAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    if (*(void *)(a2 + 8)) {
      uint64_t v5 = *(const char **)(a2 + 8);
    }
    else {
      uint64_t v5 = "(null)";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 1848))(v4);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        unsigned int v6 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 1848))(v4);
        int v7 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 112))(v4, a3);
        return CCLogStream::logAlert(v6, "[dk] %s@%d: Error: Cannot configure ranging (%s): %s\n", "setRangingAsyncCallBack", 12721, v5, v7);
      }
    }
  }
  return result;
}

void *AppleBCMWLANCore::handleExtDTIMIoVarAsyncCallBack(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  if (a3)
  {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 1848))(result);
    if (result)
    {
      (*(void (**)(void *))(*v3 + 1848))(v3);
      uint64_t result = (void *)CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
        (*(void (**)(void *, uint64_t))(*v3 + 112))(v3, a3);
        return (void *)CCLogStream::logAlert(v5, "[dk] %s@%d: Error: cannot set extended dtim to %d (%d): %s\n");
      }
    }
  }
  else
  {
    uint64_t v6 = result[9];
    if (!*(_DWORD *)(v6 + 19696) && (*(unsigned char *)(v6 + 10390) & 0x80) != 0)
    {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 1848))(result);
      if (result)
      {
        (*(void (**)(void *))(*v3 + 1848))(v3);
        uint64_t result = (void *)CCLogStream::shouldLog();
        if (result)
        {
          int v7 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
          (*(void (**)(void *, void))(*v3 + 112))(v3, 0);
          return (void *)CCLogStream::logAlert(v7, "[dk] %s@%d: LPAS config update needed with %d (%d): %s\n");
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleBcnLiBcnIoVarAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 1848))(v4);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 1848))(v4);
        uint64_t v6 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 112))(v4, a3);
        return CCLogStream::logAlert(v5, "[dk] %s@%d: Error: cannot set beacon wake up time: %s\n", "handleBcnLiBcnIoVarAsyncCallBack", 12821, v6);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleMWSCoexIoVarAsyncCallBack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1);
  if (a3)
  {
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 1848))(a1);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v9 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1);
        int v10 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 112))(a1, a3);
        return CCLogStream::logAlert(v9, "[dk] %s@%d: Error: Failed to set coex iovar - %s : %s\n", "handleMWSCoexIoVarAsyncCallBack", 12834, a5, v10);
      }
    }
  }
  else if (result)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 1848))(a1);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      long long v11 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1);
      long long v12 = (const char *)(*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 112))(a1, 0);
      return CCLogStream::logNoticeIf(v11, 0x4000000uLL, "[dk] %s@%d:Coex iovar set successfully - %s : %s\n", "handleMWSCoexIoVarAsyncCallBack", 12837, a5, v12);
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handle2GWiFiType7BitmapAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (a3)
  {
    uint64_t v7 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 1848))(v7);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v8 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 1848))(v7);
        int v9 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 112))(v7, a3);
        return CCLogStream::logAlert(v8, "[dk] %s@%d:Error: Failed to set 2G WiFi Type7 iovar - %s : %s\n", "handle2GWiFiType7BitmapAsyncCallback", 12844, a5, v9);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleMWSCoexBitmapsWiFiEnhAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (a3)
  {
    uint64_t v7 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 1848))(v7);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v8 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 1848))(v7);
        int v9 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 112))(v7, a3);
        return CCLogStream::logAlert(v8, "[dk] %s@%d:Error: Failed to set MWS WiFiEnh COEX iovar - %s : %s\n", "handleMWSCoexBitmapsWiFiEnhAsyncCallback", 12855, a5, v9);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleMWSOCLCoexBitmapsWiFiEnhAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (a3)
  {
    uint64_t v7 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 1848))(v7);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v8 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 1848))(v7);
        int v9 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 112))(v7, a3);
        return CCLogStream::logAlert(v8, "[dk] %s@%d:Error: Failed to set MWS OCL WiFiEnh COEX iovar - %s : %s\n", "handleMWSOCLCoexBitmapsWiFiEnhAsyncCallback", 12866, a5, v9);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleMWSWiFiType7CoexBitmapsWiFiEnhAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (a3)
  {
    uint64_t v7 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 1848))(v7);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v8 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 1848))(v7);
        int v9 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 112))(v7, a3);
        return CCLogStream::logAlert(v8, "[dk] %s@%d:Error: Failed to set MWS WiFiType7 WiFiEnh COEX iovar - %s : %s\n", "handleMWSWiFiType7CoexBitmapsWiFiEnhAsyncCallback", 12877, a5, v9);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleMWSWiFiType4BlankCoexBitmapsWiFiEnhAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (a3)
  {
    uint64_t v7 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 1848))(v7);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v8 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 1848))(v7);
        int v9 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 112))(v7, a3);
        return CCLogStream::logAlert(v8, "[dk] %s@%d:Error: Failed to set MWS WiFi Type4 Blanking WiFiEnh COEX iovar - %s : %s\n", "handleMWSWiFiType4BlankCoexBitmapsWiFiEnhAsyncCallback", 12888, a5, v9);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleMWSWiFiType4BlankModeCoexBitmapsWiFiEnhAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (a3)
  {
    uint64_t v7 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 1848))(v7);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v8 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 1848))(v7);
        int v9 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 112))(v7, a3);
        return CCLogStream::logAlert(v8, "[dk] %s@%d:Error: Failed to set MWS WiFi Type4 Blanking Mode WiFiEnh COEX iovar - %s : %s\n", "handleMWSWiFiType4BlankModeCoexBitmapsWiFiEnhAsyncCallback", 12899, a5, v9);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleMWSWiFiAssocProtConfigCoexBitmapsWiFiEnhAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (a3)
  {
    uint64_t v7 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 1848))(v7);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v8 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 1848))(v7);
        int v9 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 112))(v7, a3);
        return CCLogStream::logAlert(v8, "[dk] %s@%d:Error: Failed to set MWS WiFi Assoc Prot config WiFiEnh COEX iovar - %s : %s\n", "handleMWSWiFiAssocProtConfigCoexBitmapsWiFiEnhAsyncCallback", 12910, a5, v9);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleMWSWiFiRfemConfigCoexBitmapsWiFiEnhAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (a3)
  {
    uint64_t v7 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 1848))(v7);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v8 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 1848))(v7);
        int v9 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 112))(v7, a3);
        return CCLogStream::logAlert(v8, "[dk] %s@%d:Error: Failed to set MWS WiFi rFEM config WiFiEnh COEX iovar - %s : %s\n", "handleMWSWiFiRfemConfigCoexBitmapsWiFiEnhAsyncCallback", 12921, a5, v9);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleMWSWiFiConditionIdCoexBitmapsWiFiEnhAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (a3)
  {
    uint64_t v7 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 1848))(v7);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v8 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 1848))(v7);
        int v9 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 112))(v7, a3);
        return CCLogStream::logAlert(v8, "[dk] %s@%d:Error: Failed to set MWS WiFi Condition id bm WiFiEnh COEX iovar - %s : %s\n", "handleMWSWiFiConditionIdCoexBitmapsWiFiEnhAsyncCallback", 12932, a5, v9);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleMWSAntSelCoexBitmapsWiFiEnhAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (a3)
  {
    uint64_t v7 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 1848))(v7);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v8 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 1848))(v7);
        int v9 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 112))(v7, a3);
        return CCLogStream::logAlert(v8, "[dk] %s@%d:Error: Failed to set MWS WiFi Antenna Selection WiFiEnh COEX iovar - %s : %s\n", "handleMWSAntSelCoexBitmapsWiFiEnhAsyncCallback", 12943, a5, v9);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleAutoCountryAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 1848))(v4);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 1848))(v4);
        uint64_t v6 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 112))(v4, a3);
        return CCLogStream::logAlert(v5, "[dk] %s@%d: Error: cannot reset autocountry : %s\n", "handleAutoCountryAsyncCallBack", 12966, v6);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleGetCountryCodeAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = (void *)result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(void *))(*v4 + 1848))(v4);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(void *))(*v4 + 1848))(v4);
        uint64_t v6 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*v4 + 112))(v4, a3);
        return CCLogStream::logAlert(v5, "[dk] %s@%d: Error: cannot get current country code from FW : %s, ivars->fCurrentFWCountryCode: %s\n", "handleGetCountryCodeAsyncCallBack", 12976, v6, (const char *)(v4[9] + 6752));
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleExcessPMPeriodAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = (void *)result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(void *))(*v4 + 1848))(v4);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(void *))(*v4 + 1848))(v4);
        uint64_t v6 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*v4 + 112))(v4, a3);
        uint64_t result = CCLogStream::logAlert(v5, "[dk] %s@%d: Error: cannot set excess_pm_period: %s\n", "handleExcessPMPeriodAsyncCallBack", 12985, v6);
      }
    }
    if (a3 == -469794537) {
      *(_DWORD *)(v4[9] + 35384)  = 1;
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleExcessPMPercentAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = (void *)result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(void *))(*v4 + 1848))(v4);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(void *))(*v4 + 1848))(v4);
        uint64_t v6 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*v4 + 112))(v4, a3);
        uint64_t result = CCLogStream::logAlert(v5, "[dk] %s@%d: Error: cannot set excess_pm_period: %s\n", "handleExcessPMPercentAsyncCallBack", 12997, v6);
      }
    }
    if (a3 == -469794537) {
      *(_DWORD *)(v4[9] + 35384)  = 1;
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleGetPowerSaveModeAsyncCallBack(uint64_t result, uint64_t a2, int a3, _DWORD **a4)
{
  if (!a3)
  {
    uint64_t v5 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v5 + 1848))(v5);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 1848))(v5);
        return CCLogStream::logInfo(v6, "Power Save  = %d\n", **a4);
      }
    }
  }
  return result;
}

AppleBCMWLANBssManager *AppleBCMWLANCore::handleCollectBeaconRxCountersAsyncCallBack(IOService *a1, uint64_t a2, uint64_t a3, unsigned int **a4)
{
  if (a3)
  {
    uint64_t result = (AppleBCMWLANBssManager *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
    if (result)
    {
      ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
      uint64_t result = (AppleBCMWLANBssManager *)CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v7 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        int v8 = (const char *)((uint64_t (*)(IOService *, uint64_t))a1->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(a1, a3);
        return (AppleBCMWLANBssManager *)CCLogStream::logAlert(v7, "[dk] %s@%d: Error: cannot get Beacon Rx Counters: %s\n", "handleCollectBeaconRxCountersAsyncCallBack", 13018, v8);
      }
    }
  }
  else
  {
    int v9 = *a4;
    int v10 = (_OWORD *)((char *)&a1[1].OSObject::OSObjectInterface::__vftable[1221].free + 4);
    long long v11 = *(_OWORD *)*a4;
    long long v12 = *((_OWORD *)*a4 + 1);
    *(_OWORD *)((char *)v10 + 28)  = *(_OWORD *)(*a4 + 7);
    _OWORD *v10 = v11;
    v10[1]  = v12;
    if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
    {
      ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
      if (CCLogStream::shouldLog())
      {
        long long v14 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        CCLogStream::logInfo(v14, "[dk] %s@%d:BCN_OFLD_DUR=%d RX_BCN_CNT=%d MISSED_BCN_CNT=%d\n", "handleCollectBeaconRxCountersAsyncCallBack", 13024, v9[9], v9[5], v9[6]);
      }
    }
    AppleBCMWLANCore::updateTrafficInactivityScanCoreBeaconStats(a1, v9);
    mach_continuous_time();
    absolutetime_to_nanoseconds();
    a1[1].OSObject::OSObjectInterface::__vftable[1225].init  = (BOOL (__cdecl *)(OSObjectInterface *__hidden))-(uint64_t)a1[1].OSObject::OSObjectInterface::__vftable[1224].free;
    AppleBCMWLANCore::updateBeaconOffloadStatsReport((AppleBCMWLANCore *)a1, v9, (uint64_t)a1[1].OSObject::OSObjectInterface::__vftable[1225].init);
    long long v13 = a1[1].OSObject::OSObjectInterface::__vftable;
    uint64_t result = (AppleBCMWLANBssManager *)v13[344].free;
    if (result && v9[9])
    {
      uint64_t result = (AppleBCMWLANBssManager *)AppleBCMWLANIOReportingCore::updateBeaconOffloadStats(result, v9, (uint64_t)v13[1225].init);
      long long v13 = a1[1].OSObject::OSObjectInterface::__vftable;
    }
    if (LOBYTE(v13[1225].free))
    {
      uint64_t result = (AppleBCMWLANBssManager *)AppleBCMWLANCore::sendBeaconOffloadStatsEventCoreAnalytics(a1);
      LOBYTE(a1[1].OSObject::OSObjectInterface::__vftable[1225].free)  = 0;
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::updateTrafficInactivityScanCoreBeaconStats(void *a1, _DWORD *a2)
{
  if (*(unsigned char *)(a1[9] + 18027))
  {
    *(_DWORD *)(a1[9] + 18108)  = a2[9];
    int v4 = a2[6];
    *(_DWORD *)(a1[9] + 18124)  = a2[5];
    *(_DWORD *)(a1[9] + 18120)  = v4;
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logInfo(v5, "[dk] %s@%d:Enter: BCN_OFLD_DUR= %d EXPECTED=%d MISSED_BCN_CNT= %d\n", "updateTrafficInactivityScanCoreBeaconStats", 13723, a2[9], a2[5], a2[6]);
      }
    }
  }
  else
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        OSStringPtr v22 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logInfo(v22, "[dk] %s@%d:Exit: BCN_OFLD_DUR= %d EXPECTED= %d MISSED_BCN_CNT= %d\n", "updateTrafficInactivityScanCoreBeaconStats", 13725, a2[9], a2[5], a2[6]);
      }
    }
    uint64_t v6 = (_DWORD *)(a1[9] + 18060);
    int v7 = *(_DWORD *)(a1[9] + 18108);
    if (v7)
    {
      int v8 = a2[9];
      if (v8)
      {
        int v9 = v8 - v7;
        BOOL v10 = __CFADD__(*v6, v9);
        int v11 = *v6 + v9;
        BOOL v12 = v10;
        _DWORD *v6 = v11;
        long long v13 = (_DWORD *)(a1[9] + 18076);
        int v14 = a2[5] - *(_DWORD *)(a1[9] + 18124);
        BOOL v10 = __CFADD__(*v13, v14);
        int v15 = *v13 + v14;
        BOOL v16 = v10;
        *long long v13 = v15;
        int v17 = (_DWORD *)(a1[9] + 18072);
        int v18 = a2[6] - *(_DWORD *)(a1[9] + 18120);
        BOOL v10 = __CFADD__(*v17, v18);
        int v19 = *v17 + v18;
        BOOL v20 = v10;
        _DWORD *v17 = v19;
        *(_DWORD *)(a1[9] + 18108)  = 0;
        *(_DWORD *)(a1[9] + 18124)  = 0;
        *(_DWORD *)(a1[9] + 18120)  = 0;
        if (v12 || v16 || v20)
        {
          if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
          {
            (*(void (**)(void *))(*a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v23 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
              CCLogStream::logCrit(v23, "[dk] %s@%d:Overflow detected in adding LPSC beacon stats\n", "updateTrafficInactivityScanCoreBeaconStats", 13734);
            }
          }
        }
      }
    }
  }
  *(unsigned char *)(a1[9] + 19757)  = 0;
  return 0;
}

uint64_t AppleBCMWLANCore::updateBeaconOffloadStatsReport(AppleBCMWLANCore *a1, _DWORD *a2, uint64_t a3)
{
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 76))
  {
    uint64_t v6 = *((void *)a1 + 9);
    if (!*(unsigned char *)(v6 + 18340))
    {
      *(void *)(v6 + 18864)  = a3;
      *(void *)(*((void *)a1 + 9) + 18872)  = a2[9] / 0x3E8uLL;
      int v7 = a2[4];
      *(_DWORD *)(*((void *)a1 + 9) + 18880)  = a2[5];
      *(_DWORD *)(*((void *)a1 + 9) + 18884)  = a2[6];
      *(_DWORD *)(*((void *)a1 + 9) + 18888)  = a2[2];
      *(_DWORD *)(*((void *)a1 + 9) + 18892)  = v7;
      *(unsigned char *)(*((void *)a1 + 9) + 18856)  = 1;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          int v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          uint64_t v10 = *((void *)a1 + 9);
          CCLogStream::logInfo(v9, "[dk] %s@%d:Beacon Offload Stats: SessionDur %lld, OffloadDur %lld, BcnRxCount %d BcnMissedCnt %d, OffloadEnterCount %d, OffloadRejectCount %d \n", "updateBeaconOffloadStatsReport", 43979, *(void *)(v10 + 18864), *(void *)(v10 + 18872), *(_DWORD *)(v10 + 18880), *(_DWORD *)(v10 + 18884), *(_DWORD *)(v10 + 18888), *(_DWORD *)(v10 + 18892));
        }
      }
    }
  }
  return 0;
}

uint64_t AppleBCMWLANCore::sendBeaconOffloadStatsEventCoreAnalytics(IOService *this)
{
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  OSStringPtr v2 = OSString::withCString("com.apple.wifi.BeaconOffloadStats");
  if (v2)
  {
    uint64_t v3 = v2;
    int v4 = OSDictionary::withCapacity(6u);
    if (!v4)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          OSBooleanPtr v32 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v32, "[dk] %s@%d:Fail to allocate eventPayload\n");
        }
      }
      goto LABEL_43;
    }
    this[1].OSObject::OSObjectInterface::__vftable[1225].init  = (BOOL (__cdecl *)(OSObjectInterface *__hidden))-(uint64_t)this[1].OSObject::OSObjectInterface::__vftable[1224].free;
    OSStringPtr v5 = OSString::withCString("WiFiSessionDuration");
    if (!v5)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v33 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v33, "[dk] %s@%d:Fail to allocate keySessionDur\n");
        }
      }
      goto LABEL_43;
    }
    uint64_t v6 = v5;
    OSNumberPtr v7 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[1225].init, 0x40uLL);
    OSNumberPtr v52 = v7;
    if (v7)
    {
      OSDictionary::setObject(v4, v6, v7);
      OSStringPtr v8 = OSString::withCString("BcnOffloadDuration");
      if (v8)
      {
        int v9 = v8;
        OSNumberPtr v48 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[1179].free, 0x40uLL);
        OSDictionary::setObject(v4, v9, v48);
        OSStringPtr v10 = OSString::withCString("BcnOffldRxBcnCount");
        uint64_t v51 = v9;
        if (v10)
        {
          int v11 = v10;
          OSNumberPtr v12 = OSNumber::withNumber(LODWORD(this[1].OSObject::OSObjectInterface::__vftable[1180].init), 0x20uLL);
          uint64_t v50 = v11;
          if (v12)
          {
            OSNumberPtr v49 = v12;
            OSDictionary::setObject(v4, v11, v12);
            OSStringPtr v13 = OSString::withCString("BcnOffldMissedBcnCount");
            if (v13)
            {
              int v14 = v13;
              OSNumberPtr v15 = OSNumber::withNumber(HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[1180].init), 0x20uLL);
              if (v15)
              {
                OSNumberPtr v16 = v15;
                OSDictionary::setObject(v4, v14, v15);
                OSStringPtr v17 = OSString::withCString("BcnOffldEnterCount");
                if (v17)
                {
                  int v18 = v17;
                  OSNumberPtr v19 = OSNumber::withNumber(LODWORD(this[1].OSObject::OSObjectInterface::__vftable[1180].free), 0x20uLL);
                  if (v19)
                  {
                    OSNumberPtr v20 = v19;
                    OSDictionary::setObject(v4, v18, v19);
                    OSStringPtr v21 = OSString::withCString("OffldBcnRejectCount");
                    if (v21)
                    {
                      OSStringPtr v22 = v21;
                      OSNumberPtr v23 = OSNumber::withNumber(HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[1180].free), 0x20uLL);
                      OSDictionary::setObject(v4, v22, v23);
                      uint64_t v24 = this[1].OSObject::OSObjectInterface::__vftable;
                      init  = (unint64_t)v24[1225].init;
                      if (init <= 0x57E3F && (char *)init > (char *)v24[1179].free)
                      {
                        int v47 = v6;
                        long long v26 = v3;
                        uint64_t v27 = IOService::CoreAnalyticsSendEvent(this, 0, v3, v4, 0);
                        if (v27
                          && (uint64_t v28 = v27,
                              ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                          && (((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this),
                              CCLogStream::shouldLog()))
                        {
                          int v46 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                          CStringNoCopy  = OSString::getCStringNoCopy(v26);
                          uint64_t v37 = v28;
                          uint64_t v3 = (OSString *)v26;
                          uint16_t v38 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v37);
                          CCLogStream::logEmergency(v46, "[dk] %s@%d:Failed to send CoreAnalytics for event %s : %s\n", "sendBeaconOffloadStatsEventCoreAnalytics", 44041, CStringNoCopy, v38);
                        }
                        else
                        {
                          uint64_t v3 = (OSString *)v26;
                        }
                        uint64_t v6 = v47;
                      }
                      goto LABEL_20;
                    }
                    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                    {
                      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                      if (CCLogStream::shouldLog())
                      {
                        int v44 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                        CCLogStream::logAlert(v44, "[dk] %s@%d:Fail to allocate keyOffldEnterCount\n", "sendBeaconOffloadStatsEventCoreAnalytics", 44032);
                      }
                    }
                    OSStringPtr v22 = 0;
LABEL_80:
                    OSNumberPtr v23 = 0;
LABEL_20:
                    OSNumberPtr v29 = v48;
LABEL_21:
                    ((void (*)(const OSObject *))v6->release)(v6);
                    if (v52) {
                      ((void (*)(OSNumberPtr))v52->release)(v52);
                    }
                    if (v51) {
                      ((void (*)(const OSObject *))v51->release)(v51);
                    }
                    if (v29) {
                      ((void (*)(OSNumberPtr))v29->release)(v29);
                    }
                    if (v50) {
                      ((void (*)(const OSObject *))v50->release)(v50);
                    }
                    if (v49) {
                      ((void (*)(OSNumberPtr))v49->release)(v49);
                    }
                    if (v14) {
                      ((void (*)(const OSObject *))v14->release)(v14);
                    }
                    if (v16) {
                      ((void (*)(OSNumberPtr))v16->release)(v16);
                    }
                    if (v18) {
                      ((void (*)(const OSObject *))v18->release)(v18);
                    }
                    if (v20) {
                      ((void (*)(OSNumberPtr))v20->release)(v20);
                    }
                    if (v22) {
                      ((void (*)(const OSObject *))v22->release)(v22);
                    }
                    if (v23) {
                      ((void (*)(OSNumberPtr))v23->release)(v23);
                    }
LABEL_43:
                    uint64_t result = ((uint64_t (*)(OSString *))v3->release)(v3);
                    if (v4) {
                      return ((uint64_t (*)(OSDictionary *))v4->release)(v4);
                    }
                    return result;
                  }
                  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                  {
                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    if (CCLogStream::shouldLog())
                    {
                      uint64_t v36 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                      CCLogStream::logAlert(v36, "[dk] %s@%d:Fail to allocate valueOffloadEnterCount\n", "sendBeaconOffloadStatsEventCoreAnalytics", 44028);
                    }
                  }
LABEL_79:
                  OSStringPtr v22 = 0;
                  OSNumberPtr v20 = 0;
                  goto LABEL_80;
                }
                if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                {
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  if (CCLogStream::shouldLog())
                  {
                    int v35 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    CCLogStream::logAlert(v35, "[dk] %s@%d:Fail to allocate keyOffldEnterCount\n", "sendBeaconOffloadStatsEventCoreAnalytics", 44026);
                  }
                }
LABEL_78:
                int v18 = 0;
                goto LABEL_79;
              }
              if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
              {
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v43 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  CCLogStream::logAlert(v43, "[dk] %s@%d:Fail to allocate valueBcnMissedCount\n", "sendBeaconOffloadStatsEventCoreAnalytics", 44022);
                }
              }
            }
            else
            {
              if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
              {
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if (CCLogStream::shouldLog())
                {
                  int v42 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  CCLogStream::logAlert(v42, "[dk] %s@%d:Fail to allocate keyBcnMissedCount\n", "sendBeaconOffloadStatsEventCoreAnalytics", 44020);
                }
              }
              int v14 = 0;
            }
LABEL_77:
            OSNumberPtr v16 = 0;
            goto LABEL_78;
          }
          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              int v41 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              CCLogStream::logAlert(v41, "[dk] %s@%d:Fail to allocate valueBcnRxCount\n", "sendBeaconOffloadStatsEventCoreAnalytics", 44016);
            }
          }
        }
        else
        {
          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              int v40 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              CCLogStream::logAlert(v40, "[dk] %s@%d:Fail to allocate keyBcnRxCount\n", "sendBeaconOffloadStatsEventCoreAnalytics", 44014);
            }
          }
          uint64_t v50 = 0;
        }
        int v14 = 0;
        OSNumberPtr v49 = 0;
        goto LABEL_77;
      }
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v39 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v39, "[dk] %s@%d:Fail to allocate keyOffloadDur\n");
        }
      }
    }
    else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        long long v34 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v34, "[dk] %s@%d:Fail to allocate valueSessionDur\n");
      }
    }
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    int v14 = 0;
    OSNumberPtr v29 = 0;
    OSNumberPtr v49 = 0;
    OSNumberPtr v16 = 0;
    int v18 = 0;
    OSStringPtr v22 = 0;
    OSNumberPtr v20 = 0;
    OSNumberPtr v23 = 0;
    goto LABEL_21;
  }
  uint64_t result = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
  if (result)
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      OSBooleanPtr v31 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      return CCLogStream::logAlert(v31, "[dk] %s@%d:Fail to allocate eventName\n", "sendBeaconOffloadStatsEventCoreAnalytics", 43996);
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::deleteIPv6PktFiltersAsyncCallBack(uint64_t result, uint64_t a2, int a3)
{
  if (!a3) {
    *(unsigned char *)(*(void *)(result + 72) + 10052)  = 0;
  }
  return result;
}

uint64_t AppleBCMWLANCore::deleteIPv4PktFiltersAsyncCallBack(uint64_t result, uint64_t a2, int a3)
{
  if (!a3) {
    *(unsigned char *)(*(void *)(result + 72) + 1005AppleBCMWLANCommandMonitor::free(this - 3) = 0;
  }
  return result;
}

uint64_t AppleBCMWLANCore::deleteMagicPktFiltersAsyncCallBack(uint64_t result, uint64_t a2, int a3)
{
  if (!a3) {
    *(unsigned char *)(*(void *)(result + 72) + 10054)  = 0;
  }
  return result;
}

void *AppleBCMWLANCore::deleteEapolFilterAsyncCallBack(void *result, uint64_t a2, int a3)
{
  if (!a3)
  {
    uint64_t v3 = result;
    *(unsigned char *)(result[9] + 10055)  = 0;
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 1848))(result);
    if (result)
    {
      (*(void (**)(void *))(*v3 + 1848))(v3);
      uint64_t result = (void *)CCLogStream::shouldLog();
      if (result)
      {
        int v4 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
        return (void *)CCLogStream::logAlert(v4, "[dk] %s@%d:%s: WoWEapolFilter is deleted\n", "deleteEapolFilterAsyncCallBack", 13088, "deleteEapolFilterAsyncCallBack");
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleResetLinkParamsAsyncCallBack(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 1848))(v4);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        OSStringPtr v5 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 1848))(v4);
        uint64_t v6 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 112))(v4, a3);
        return CCLogStream::logAlert(v5, "[dk] %s@%d: Error: cannot Reset Linkup : %s\n", "handleResetLinkParamsAsyncCallBack", 13097, v6);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleBusWakeReasonSyncCallBack(IOService *a1, uint64_t a2, uint64_t a3)
{
  long long v49 = 0u;
  long long v50 = 0u;
  *(_OWORD *)__dst  = 0u;
  long long v48 = 0u;
  OSStringPtr v5 = *(_WORD **)a3;
  unint64_t v6 = 8;
  if (**(_WORD **)a3 == 1) {
    unint64_t v6 = 4;
  }
  if (v6 > *(unsigned __int16 *)(a3 + 8))
  {
    uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
    if (result)
    {
      ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        OSNumberPtr v29 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        return CCLogStream::logAlert(v29, "[dk] %s@%d:Rx payload buffer is too small (%d bytes) to contain cached wake up data \n");
      }
    }
    return result;
  }
  uint64_t v8 = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
  if (a2)
  {
    if (v8)
    {
      ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v30 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        OSBooleanPtr v31 = (const char *)((uint64_t (*)(IOService *, uint64_t))a1->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(a1, a2);
        CCLogStream::logCrit(v30, "[dk] %s@%d: bus:wakeup_data failed, error %s\n", "handleBusWakeReasonSyncCallBack", 13146, v31);
      }
    }
    free  = (CCFaultReporter *)a1[1].OSObject::OSObjectInterface::__vftable[346].free;
    return CCFaultReporter::reportFault(free, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0x335Bu, "handleBusWakeReasonSyncCallBack", 0, -469793518, "Failed to get cached FW wakeup data");
  }
  if (v8)
  {
    ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
    if (CCLogStream::shouldLog())
    {
      long long v34 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
      CCLogStream::logNoticeIf(v34, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "handleBusWakeReasonSyncCallBack", 13151, "handleBusWakeReasonSyncCallBack");
    }
  }
  unint64_t v11 = (unsigned __int16)v5[1];
  if (v5[1]) {
    BOOL v12 = (unint64_t)*(unsigned __int16 *)(a3 + 8) + 16 >= v11;
  }
  else {
    BOOL v12 = 0;
  }
  if (!v12)
  {
    uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
    if (result)
    {
      ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        OSBooleanPtr v32 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        return CCLogStream::logNoticeIf(v32, 0x8000000uLL, "[dk] %s@%d:Rx payload buffer size %d is too small to contain the cached wakeup data size %d (version %d).\n");
      }
    }
    return result;
  }
  if (v11 <= 7)
  {
    uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
    if (result)
    {
      ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v33 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        return CCLogStream::logAlert(v33, "[dk] %s@%d:Cached FW wakeup data length %u is too small to contain a BCOMIPCHeader size %lu\n");
      }
    }
    return result;
  }
  uint64_t v13 = 4;
  if (*v5 == 1)
  {
    uint64_t v13 = 2;
    int v14 = v5 + 2;
  }
  else
  {
    int v14 = v5 + 4;
  }
  int v15 = LOBYTE(v5[v13]);
  if (v15 == 14)
  {
    if ((v11 - 8) <= 0x47)
    {
      uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
      if (result)
      {
        ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          uint64_t v37 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
          return CCLogStream::logAlert(v37, "[dk] %s@%d:Firmware event buffer remaining length %u is too small to contain bcm_event_t size %zu\n");
        }
      }
      return result;
    }
    if ((v11 - 22) <= 9)
    {
      uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
      if (result)
      {
        ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          uint16_t v38 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
          return CCLogStream::logAlert(v38, "[dk] %s@%d:Firmware event buffer remaining length %u is too small to contain bcmeth_hdr_t size %zu\n");
        }
      }
      return result;
    }
    if (*(_WORD *)((char *)v14 + 27) != 4096 || *((unsigned char *)v14 + 29) != 24)
    {
LABEL_36:
      uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
      if (result)
      {
        ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          OSStringPtr v22 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
          return CCLogStream::logAlert(v22, "[dk] %s@%d: Got a BRCM host wakeup event packet but an OUI/SUBTYPE mismatch (OUI=%02x %02x %02x, subtype=%d) length %lu\n", "handleBusWakeReasonSyncCallBack");
        }
      }
      return result;
    }
    int v23 = (unsigned __int16)v14[15];
    if (v23 == 256)
    {
      if ((v11 - 32) <= 0x2F)
      {
        uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        if (result)
        {
          ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            int v41 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
            return CCLogStream::logAlert(v41, "[dk] %s@%d:Firmware event buffer remaining length %u is too small to contain wl_event_msg_t size %zu\n");
          }
        }
        return result;
      }
      *((_DWORD *)v14 + 9)  = bswap32(*((_DWORD *)v14 + 9));
      *((_DWORD *)v14 + 1AppleBCMWLANCommandMonitor::free(this - 3) = bswap32(*((_DWORD *)v14 + 13));
      if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
      {
        ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        if (CCLogStream::shouldLog())
        {
          int v44 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
          int v45 = *((_DWORD *)v14 + 9);
          int v46 = convertEventToString(v45, 0, 0);
          CCLogStream::logAlert(v44, "[dk] %s@%d:Wake up event packet received event_type: 0x%x %s \n", "handleBusWakeReasonSyncCallBack", 13216, v45, v46);
        }
      }
      if ((v11 - 80) < *((_DWORD *)v14 + 13))
      {
        uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        if (result)
        {
          ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            int v42 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
            return CCLogStream::logAlert(v42, "[dk] %s@%d:remainingBufferLength %u is too small to contain data length %u\n");
          }
        }
        return result;
      }
      int v25 = convertEventToString(*((_DWORD *)v14 + 9), __dst, 0x40uLL);
      AppleBCMWLANCore::updateWoWReasonToIoReg(a1, v25, (char *)v14 + 32, *((_DWORD *)v14 + 13) + 48, 14, *((_DWORD *)v14 + 9));
      if ((AppleBCMWLANCore::whitelistedWakeReason((AppleBCMWLANCore *)a1, *((_DWORD *)v14 + 9)) & 1) == 0)
      {
        long long v26 = (CCFaultReporter *)a1[1].OSObject::OSObjectInterface::__vftable[346].free;
        uint64_t v27 = convertEventToString(*((_DWORD *)v14 + 9), __dst, 0x40uLL);
        CCFaultReporter::reportFault(v26, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0x33ABu, "handleBusWakeReasonSyncCallBack", 0, -469793518, "Event=%s", v27);
      }
      unsigned int v24 = *((_DWORD *)v14 + 9);
    }
    else
    {
      if (v23 != 1280) {
        goto LABEL_36;
      }
      if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
      {
        ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v43 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
          CCLogStream::logAlert(v43, "[dk] %s@%d: Wake up dongle dump event received\n", "handleBusWakeReasonSyncCallBack", 13199);
        }
      }
      unsigned int v24 = 220;
      AppleBCMWLANCore::updateWoWReasonToIoReg(a1, "BCMILCP_BCM_SUBTYPE_DNGLEVENT", (char *)v14, v11, 14, 220);
    }
    uint64_t v28 = (AppleBCMWLANIOReportingCore *)a1[1].OSObject::OSObjectInterface::__vftable[344].free;
    if (v28) {
      AppleBCMWLANIOReportingCore::reportWakeReason(v28, v24);
    }
    goto LABEL_44;
  }
  if (v15 != 67)
  {
    if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
    {
      ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
      if (CCLogStream::shouldLog())
      {
        int v40 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        CCLogStream::logEmergency(v40, "[dk] %s@%d: Wake up event received, but failed to parse\n", "handleBusWakeReasonSyncCallBack", 13239);
      }
    }
    unsigned int v17 = (unsigned __int16)v5[1];
    int v18 = "Unknown or unparseable packet";
    OSNumberPtr v19 = a1;
    OSNumberPtr v16 = (char *)v14;
    int v20 = 0;
    goto LABEL_43;
  }
  if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
  {
    ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v39 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
      CCLogStream::logAlert(v39, "[dk] %s@%d:Wake up packet received: Data\n", "handleBusWakeReasonSyncCallBack", 13165);
    }
  }
  if (v11 > 0xF)
  {
    OSNumberPtr v16 = (char *)(v14 + 8);
    unsigned int v17 = (unsigned __int16)v5[1] - 16;
    int v18 = "DataFrame";
    OSNumberPtr v19 = a1;
    int v20 = 67;
LABEL_43:
    AppleBCMWLANCore::updateWoWReasonToIoReg(v19, v18, v16, v17, v20, 0);
LABEL_44:
    uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
    if (result)
    {
      ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v35 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        return CCLogStream::logNoticeIf(v35, 0x8000000uLL, "[dk] %s@%d:Leave %s \n");
      }
    }
    return result;
  }
  uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
  if (result)
  {
    ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v36 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
      return CCLogStream::logAlert(v36, "[dk] %s@%d:Data offset %u is larger than remaining buffer length %u\n");
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::updateWoWReasonToIoReg(IOService *this, const char *a2, char *a3, unsigned int a4, int a5, int a6)
{
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      int v46 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logNoticeIf(v46, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "updateWoWReasonToIoReg", 48669, "updateWoWReasonToIoReg");
    }
  }
  unint64_t v54 = 0xAAAAAAAAAAAAAAAALL;
  OSDictionaryPtr v12 = OSDictionary::withCapacity(4u);
  if (v12)
  {
    uint64_t v13 = v12;
    mach_continuous_time();
    absolutetime_to_nanoseconds();
    OSNumberPtr v14 = OSNumber::withNumber(v54 / 0xF4240, 0x40uLL);
    if (v14)
    {
      OSNumberPtr v15 = v14;
      OSDictionary::setObject(v13, "IO80211InterfaceWoWWakeUpTimeStamp", v14);
      ((void (*)(OSNumberPtr))v15->release)(v15);
      OSStringPtr v16 = OSString::withCString("WiFi");
      if (v16)
      {
        OSStringPtr v17 = v16;
        OSDictionary::setObject(v13, "IO80211InterfaceWoWWakeUpReason", v16);
        ((void (*)(OSStringPtr))v17->release)(v17);
        if (a2 && (OSStringPtr v18 = OSString::withCString(a2)) != 0)
        {
          OSStringPtr v19 = v18;
          OSDictionary::setObject(v13, "IO80211InterfaceWoWWakeUpCommand", v18);
          ((void (*)(OSStringPtr))v19->release)(v19);
          OSDataPtr v20 = OSData::withBytes(a3, a4);
          if (v20)
          {
            OSStringPtr v21 = v20;
            OSDictionary::setObject(v13, "IO80211InterfaceWoWWakeUpData", v20);
            OSStringPtr v22 = this[1].OSObject::OSObjectInterface::__vftable;
            if (v22)
            {
              init  = (AppleBCMWLANKeepAliveOffload *)v22[347].init;
              if (init)
              {
                CachedTCPAliveWakeReason  = AppleBCMWLANKeepAliveOffload::getCachedTCPAliveWakeReason(init);
                if (AppleBCMWLANKeepAliveOffload::didWakeReasonCauseHostWake((AppleBCMWLANKeepAliveOffload *)this[1].OSObject::OSObjectInterface::__vftable[347].init, CachedTCPAliveWakeReason))
                {
                  StringFromWakeReason  = AppleBCMWLANKeepAliveOffload::getStringFromWakeReason((AppleBCMWLANKeepAliveOffload *)this[1].OSObject::OSObjectInterface::__vftable[347].init, CachedTCPAliveWakeReason);
                  OSStringPtr v26 = OSString::withCString(StringFromWakeReason);
                  OSDictionary::setObject(v13, "IO80211InterfaceWoWWakeUpTCPKAWakeReason", v26);
                  if (v26) {
                    ((void (*)(OSStringPtr))v26->release)(v26);
                  }
                }
              }
            }
            setPropertyHelper(this, "IO80211InterfaceWoWWakeUpParams", v13);
            if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog())
              {
                int v47 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                CCLogStream::logAlert(v47, "[dk] %s@%d:Finished setting APPLE80211_REGKEY_WOW_WAKEUP_PARAMS in the registry\n", "updateWoWReasonToIoReg", 48744);
              }
            }
            ((void (*)(OSDictionary *))v13->release)(v13);
            if (a5 == 67) {
              size_t v27 = 12;
            }
            else {
              size_t v27 = 0;
            }
            *(void *)__str  = 0;
            uint64_t v28 = (char *)IOMallocZeroData();
            if (v28)
            {
              OSNumberPtr v29 = v28;
              bzero(v28, 0x401uLL);
              uint64_t v30 = 60;
              size_t v53 = 60;
              size_t Length = OSData::getLength(v21);
              size_t v32 = OSData::getLength(v21);
              if (Length >= v27) {
                size_t v33 = v27;
              }
              else {
                size_t v33 = 0;
              }
              unint64_t v34 = v32 - v33;
              if (v34 >= 0x200) {
                size_t v35 = 512;
              }
              else {
                size_t v35 = v34;
              }
              BOOL v36 = IOParseBootArgNumber("wlan.wake-data.limit", &v53, 8);
              size_t v37 = v53;
              if (v53 >= v35) {
                size_t v37 = v35;
              }
              if (v36) {
                uint64_t v30 = v37;
              }
              if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
              {
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if (CCLogStream::shouldLog())
                {
                  long long v49 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  size_t v50 = OSData::getLength(v21);
                  CCLogStream::logAlert(v49, "[dk] %s@%d: Wake up data packet info: type[0x%08x] subtype[0x%08x], getLength[%zu] offset[%u] displayBytes[%zu] boundedLength[%zu] requestedDisplayBytes[%zu]\n", "updateWoWReasonToIoReg", 48815, a5, a6, v50, v27, v30, v35, v53);
                }
              }
              if (v35 >= v30) {
                uint64_t v30 = v30;
              }
              else {
                uint64_t v30 = v35;
              }
              if (v30)
              {
                do
                {
                  if (!OSData::getBytesNoCopy(v21, v27, 1uLL)) {
                    break;
                  }
                  uint64_t BytesNoCopy = (unsigned __int8 *)OSData::getBytesNoCopy(v21, v27, 1uLL);
                  snprintf(__str, 8uLL, "%02x", *BytesNoCopy);
                  strlcat(v29, __str, 0x401uLL);
                  ++v27;
                  --v30;
                }
                while (v30);
              }
              if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
              {
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v51 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  CCLogStream::logAlert(v51, "[dk] %s@%d: Wake up data packet: type[0x%08x] subtype[0x%08x], <%s>\n", "updateWoWReasonToIoReg", 48825, a5, a6, v29);
                }
              }
              ClassNameHelper  = (const char *)getClassNameHelper(this);
              IOLog("%s::%s():  Wake up data packet: type[0x%08x] subtype[0x%08x], <%s>\n", ClassNameHelper, "updateWoWReasonToIoReg", a5, a6, v29);
              v29[59]  = 0;
              OSStringPtr v40 = OSString::withCString(v29);
              IOService::_ClaimSystemWakeEvent(this, this, 1uLL, a2, v40, 0);
              if (v40) {
                ((void (*)(OSStringPtr))v40->release)(v40);
              }
              IOService::_ClaimSystemWakeEvent(this, this, 1uLL, "ARPT", 0, 0);
              IOFreeData();
            }
            else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog())
              {
                OSNumberPtr v52 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                CCLogStream::logAlert(v52, "[dk] %s@%d: Unable to allocate buffer, size[%zu], wake up data packet: type[0x%08x] subtype[0x%08x]\n", "updateWoWReasonToIoReg", 48771, 0x401uLL, a5, a6);
              }
            }
            setPropertyHelper(this, "IO80211WokeSystem", 1);
            ((void (*)(const OSData *))v21->release)(v21);
            if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog())
              {
                long long v48 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                CCLogStream::logNoticeIf(v48, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "updateWoWReasonToIoReg", 48863, "updateWoWReasonToIoReg");
              }
            }
            return 0;
          }
          uint64_t v41 = 3758097085;
          ((void (*)(OSDictionary *))v13->release)(v13);
          if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
            return v41;
          }
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (!CCLogStream::shouldLog()) {
            return v41;
          }
        }
        else
        {
          uint64_t v41 = 3758097085;
          ((void (*)(OSDictionary *))v13->release)(v13);
          if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
            return v41;
          }
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (!CCLogStream::shouldLog()) {
            return v41;
          }
        }
      }
      else
      {
        uint64_t v41 = 3758097085;
        ((void (*)(OSDictionary *))v13->release)(v13);
        if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
          return v41;
        }
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (!CCLogStream::shouldLog()) {
          return v41;
        }
      }
      int v44 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logAlert(v44, "[dk] %s@%d:Failed to create strRef\n");
      return v41;
    }
    uint64_t v41 = 3758097085;
    ((void (*)(OSDictionary *))v13->release)(v13);
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v43 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v43, "[dk] %s@%d:Failed to create numRef for wakeTimeStamp\n");
      }
    }
  }
  else
  {
    uint64_t v41 = 3758097085;
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        int v42 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v42, "[dk] %s@%d:Failed to create dictRef\n");
      }
    }
  }
  return v41;
}

uint64_t AppleBCMWLANCore::whitelistedWakeReason(AppleBCMWLANCore *this, unsigned int a2)
{
  if (a2 == 52 || a2 == 124) {
    return 0;
  }
  if (a2 == 151) {
    return AppleBCMWLANCore::checkForTCPKAOffloadSupport(this);
  }
  return AppleBCMWLANCore::isCachedSleepingEventBitFieldSet(this, a2);
}

IO80211BssManager *AppleBCMWLANCore::linkChangeEvent(AppleBCMWLANCore *this, int a2, int a3)
{
  int v23 = 0;
  uint64_t v5 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (a3)
  {
    if (v5)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        OSStringPtr v21 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logNoticeIf(v21, 0x20uLL, "[dk] %s@%d: LinkUp: Starting link activity timer\n", "linkChangeEvent", 13288);
      }
    }
    isAssociated  = IO80211BssManager::isAssociated(*(IO80211BssManager **)(*((void *)this + 9) + 5440));
    uint64_t v7 = *((void *)this + 9);
    if (isAssociated)
    {
      uint64_t v8 = *(void *)(v7 + 6232);
      if (v8)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 120))(v8, 2000);
        uint64_t v7 = *((void *)this + 9);
      }
    }
    uint64_t result = *(IO80211BssManager **)(v7 + 6256);
    if (result)
    {
      uint64_t result = (IO80211BssManager *)(*(uint64_t (**)(IO80211BssManager *, uint64_t))(*(void *)result + 120))(result, 120000);
      uint64_t v7 = *((void *)this + 9);
    }
    if (*(unsigned char *)(v7 + 4496))
    {
      uint64_t v10 = *(void *)(v7 + 6264);
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 120))(v10, 10000);
        uint64_t v7 = *((void *)this + 9);
      }
      uint64_t result = *(IO80211BssManager **)(v7 + 6272);
      if (result)
      {
        uint64_t result = (IO80211BssManager *)(*(uint64_t (**)(IO80211BssManager *, uint64_t))(*(void *)result + 120))(result, 10000);
        uint64_t v7 = *((void *)this + 9);
      }
    }
    if (*(void *)(v7 + 5536))
    {
      uint64_t result = *(IO80211BssManager **)(v7 + 5440);
      if (result)
      {
        IO80211BssManager::getCurrentRSSI(result, &v23);
        int v11 = v23;
        uint64_t result = (IO80211BssManager *)AppleBCMWLANTxPowerManager::getDynSARRssiThreshUpper(*(AppleBCMWLANTxPowerManager **)(*((void *)this + 9) + 5536));
        if (v11 > (int)result)
        {
          AppleBCMWLANTxPowerManager::resetDynSARLqmRssi(*(void *)(*((void *)this + 9) + 5536));
          return (IO80211BssManager *)AppleBCMWLANTxPowerManager::configureDynSARPwrBoost(*(AppleBCMWLANCore ****)(*((void *)this + 9) + 5536), 0);
        }
      }
    }
  }
  else
  {
    if (v5)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        OSStringPtr v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logNoticeIf(v22, 0x20uLL, "[dk] %s@%d: LinkDown: Stopping link activity timer\n", "linkChangeEvent", 13320);
      }
    }
    uint64_t v12 = *((void *)this + 9);
    uint64_t v13 = *(void *)(v12 + 6232);
    if (v13)
    {
      (*(void (**)(uint64_t))(*(void *)v13 + 136))(v13);
      uint64_t v12 = *((void *)this + 9);
    }
    uint64_t v14 = *(void *)(v12 + 6256);
    if (v14)
    {
      (*(void (**)(uint64_t))(*(void *)v14 + 136))(v14);
      uint64_t v12 = *((void *)this + 9);
    }
    if (*(unsigned char *)(v12 + 4496))
    {
      uint64_t v15 = *(void *)(v12 + 6264);
      if (v15)
      {
        (*(void (**)(uint64_t))(*(void *)v15 + 136))(v15);
        uint64_t v12 = *((void *)this + 9);
      }
      uint64_t v16 = *(void *)(v12 + 6272);
      if (v16)
      {
        (*(void (**)(uint64_t))(*(void *)v16 + 136))(v16);
        uint64_t v12 = *((void *)this + 9);
      }
    }
    OSStringPtr v17 = *(AppleBCMWLANTxPowerManager **)(v12 + 5536);
    if (v17 && !AppleBCMWLANTxPowerManager::getDynSARPwrBoostCur(v17))
    {
      AppleBCMWLANTxPowerManager::resetDynSARLqmRssi(*(void *)(*((void *)this + 9) + 5536));
      uint64_t v18 = *((void *)this + 9);
      OSStringPtr v19 = *(AppleBCMWLANCore ****)(v18 + 5536);
      DynSARPwrBoostCtl  = AppleBCMWLANConfigManager::getDynSARPwrBoostCtl(*(AppleBCMWLANConfigManager **)(v18 + 5472));
      AppleBCMWLANTxPowerManager::configureDynSARPwrBoost(v19, *(unsigned __int8 *)(DynSARPwrBoostCtl + 3));
    }
    uint64_t result = (IO80211BssManager *)AppleBCMWLANCore::featureFlagIsBitSet(this, 89);
    if (result)
    {
      return (IO80211BssManager *)AppleBCMWLANCore::cfgAmpduWindowSize(this);
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::resetScanRoamStats(AppleBCMWLANCore *this)
{
  memset_s((void *)(*((void *)this + 9) + 35776), 0x28uLL, 0, 0x28uLL);
  uint64_t v2 = *((void *)this + 9);
  *(void *)(v2 + 18952)  = 0;
  *(_OWORD *)(v2 + 18904)  = 0u;
  *(_OWORD *)(v2 + 18920)  = 0u;
  *(_OWORD *)(v2 + 18936)  = 0u;
  uint64_t v3 = *((void *)this + 9);
  *(void *)(v3 + 18976)  = 0;
  *(_OWORD *)(v3 + 18960)  = 0u;
  uint64_t v4 = (_OWORD *)(*((void *)this + 9) + 18984);
  *uint64_t v4 = 0u;
  v4[1]  = 0u;
  memset_s((void *)(*((void *)this + 9) + 35816), 0x10uLL, 0, 0x10uLL);
  mach_continuous_time();
  uint64_t result = absolutetime_to_nanoseconds();
  *(void *)(*((void *)this + 9) + 18960)  = 0;
  *(void *)(*((void *)this + 9) + 18960) /= 0x3E8uLL;
  *(void *)(*((void *)this + 9) + 18312)  = 0;
  *(void *)(*((void *)this + 9) + 18320)  = 0;
  *(unsigned char *)(*((void *)this + 9) + 1032)  = 0;
  return result;
}

uint64_t AppleBCMWLANCore::getTXRX_CHAIN_INFO(void *a1, char *a2)
{
  if (!a2) {
    return 3758097090;
  }
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 88))(a1);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v4 + 136))(v4))
  {
    char v13 = -86;
    v12[0]  = &v13;
    v12[1]  = 0x100010001;
    if (AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(a1[9] + 5416), (uint64_t)"hw_rxchain", (uint64_t)&kNoTxPayload, (uint64_t)v12, 0))
    {
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          (*(void (**)(void *, uint64_t))(*a1 + 112))(a1, 3758097084);
          CCLogStream::logAlert(v8, "[dk] %s@%d:hw_rxchain GET Failed, , error %s\n");
        }
      }
    }
    else
    {
      *a2  = v13;
      if (AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(a1[9] + 5416), (uint64_t)"hw_txchain", (uint64_t)&kNoTxPayload, (uint64_t)v12, 0))
      {
        if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
        {
          (*(void (**)(void *))(*a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            int v9 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
            (*(void (**)(void *, uint64_t))(*a1 + 112))(a1, 3758097084);
            CCLogStream::logAlert(v9, "[dk] %s@%d:hw_txchain GET Failed, , error %s\n");
          }
        }
      }
      else
      {
        a2[1]  = v13;
        if (AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(a1[9] + 5416), (uint64_t)"txchain", (uint64_t)&kNoTxPayload, (uint64_t)v12, 0))
        {
          if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
          {
            (*(void (**)(void *))(*a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
              (*(void (**)(void *, uint64_t))(*a1 + 112))(a1, 3758097084);
              CCLogStream::logAlert(v10, "[dk] %s@%d:bss_txchain GET Failed, , error %s\n");
            }
          }
        }
        else
        {
          a2[2]  = v13;
          if (!AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(a1[9] + 5416), (uint64_t)"rxchain", (uint64_t)&kNoTxPayload, (uint64_t)v12, 0))
          {
            uint64_t v5 = 0;
            a2[3]  = v13;
            return v5;
          }
          if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
          {
            (*(void (**)(void *))(*a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              int v11 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
              (*(void (**)(void *, uint64_t))(*a1 + 112))(a1, 3758097084);
              CCLogStream::logAlert(v11, "[dk] %s@%d:bss_rxchain GET Failed, , error %s\n");
            }
          }
        }
      }
    }
    return 3758097084;
  }
  uint64_t v5 = 3758097122;
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v7, "[dk] %s@%d:getTXRX_CHAIN_INFO() not permitted on driver workQueue thread\n", "getTXRX_CHAIN_INFO", 13420);
      return 3758097122;
    }
  }
  return v5;
}

uint64_t AppleBCMWLANCore::setLQM(AppleBCMWLANCore *this)
{
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 128))(this);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 128))(this)
                             + 696);
    return v3();
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleIPv4AddressNotificationGated(AppleBCMWLANCore *this, void *a2)
{
  uint64_t v3 = *((void *)this + 9);
  uint64_t v4 = *(AppleBCMWLANBusInterface **)(v3 + 5400);
  if (v4)
  {
    AppleBCMWLANBusInterface::sendBootCheckPointToCoreAnalytics(v4, 0, 0xAu);
    uint64_t v3 = *((void *)this + 9);
  }
  unsigned int v5 = *(_DWORD *)(v3 + 9496);
  if (!(*(uint64_t (**)(AppleBCMWLANCore *, void *))(*(void *)this + 1848))(this, a2)
    || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
        (CCLogStream::shouldLogConsole() & 1) == 0))
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf  = 67110658;
      int v10 = 78;
      __int16 v11 = 2080;
      uint64_t v12 = "handleIPv4AddressNotificationGated";
      __int16 v13 = 1024;
      int v14 = 13460;
      __int16 v15 = 1024;
      int v16 = v5;
      __int16 v17 = 1024;
      int v18 = BYTE1(v5);
      __int16 v19 = 1024;
      int v20 = BYTE2(v5);
      __int16 v21 = 1024;
      unsigned int v22 = HIBYTE(v5);
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d:  Local IPv4  address %u.%u.%u.%u\n", buf, 0x30u);
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNotice(v8, "[dk] %s@%d: Local IPv4  address %u.%u.%u.%u\n", "handleIPv4AddressNotificationGated", 13460, v5, BYTE1(v5), BYTE2(v5), HIBYTE(v5));
    }
  }
  uint64_t v6 = *((void *)this + 9);
  if (*(_DWORD *)(v6 + 9496))
  {
    if (*(unsigned char *)(v6 + 29948)) {
      AppleBCMWLANCore::setupTrafficMonitoring(this, 1);
    }
  }
  else
  {
    *(_DWORD *)(v6 + 9504)  = 0;
  }
  return 0;
}

uint64_t AppleBCMWLANCore::checkForTrafficEngineeringSupport(AppleBCMWLANCore *this)
{
  return *(unsigned __int8 *)(*((void *)this + 9) + 29948);
}

uint64_t AppleBCMWLANCore::setupTrafficMonitoring(AppleBCMWLANCore *this, int a2)
{
  uint64_t v4 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
  unsigned int v5 = *(IO80211InfraInterface **)(*((void *)this + 9) + 11304);
  if (v5)
  {
    TrafficMonitor  = IO80211InfraInterface::getTrafficMonitor(v5);
    if (v4)
    {
      if (TrafficMonitor)
      {
        if (a2)
        {
          TrafficNotification  = IO80211TrafficMonitor::createTrafficNotification();
          if (TrafficNotification)
          {
            uint64_t v8 = TrafficNotification;
            (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 64))(v4, TrafficNotification);
            (*(void (**)(uint64_t))(*(void *)v8 + 64))(v8);
            uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (result)
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              uint64_t result = CCLogStream::shouldLog();
              if (result)
              {
                int v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                return CCLogStream::logInfo(v10, "[dk] %s@%d:Created RT/NRT traffic notification with config reportIntervalMS:%u realTimePacketCount:%u backgroundPackCount:%u\n");
              }
            }
          }
          else
          {
            uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (result)
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              uint64_t result = CCLogStream::shouldLog();
              if (result)
              {
                int v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                return CCLogStream::logInfo(v14, "[dk] %s@%d:Failed to create RT/NRT traffic notification\n");
              }
            }
          }
        }
        else
        {
          uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (result)
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            uint64_t result = CCLogStream::shouldLog();
            if (result)
            {
              uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              return CCLogStream::logInfo(v12, "[dk] %s@%d:RT/NRT traffic notification not created yet\n");
            }
          }
        }
        return result;
      }
      goto LABEL_10;
    }
  }
  else if (v4)
  {
LABEL_10:
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        __int16 v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        return CCLogStream::logAlert(v11, "[dk] %s@%d:Failed to get RT/NRT traffic monitor\n");
      }
    }
    return result;
  }
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      __int16 v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      return CCLogStream::logAlert(v13, "[dk] %s@%d:Failed to get workloop\n");
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleKeepaliveDataNotificationGated(AppleBCMWLANCore *this, void *a2)
{
  unsigned int v3 = *(_DWORD *)(*((void *)this + 9) + 9504);
  if ((*(uint64_t (**)(AppleBCMWLANCore *, void *))(*(void *)this + 1848))(this, a2))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      unsigned int v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v5, 0x100uLL, "[dk] %s@%d: Router IPv4 address  = %u.%u.%u.%u, MAC  = %02x:%02x:%02x:%02x:%02x:%02x\n", "handleKeepaliveDataNotificationGated", 13554, v3, BYTE1(v3), BYTE2(v3), HIBYTE(v3), *(unsigned __int8 *)(*((void *)this + 9) + 9508), *(unsigned __int8 *)(*((void *)this + 9) + 9509), *(unsigned __int8 *)(*((void *)this + 9) + 9510), *(unsigned __int8 *)(*((void *)this + 9) + 9511), *(unsigned __int8 *)(*((void *)this + 9) + 9512), *(unsigned __int8 *)(*((void *)this + 9) + 9513));
    }
  }
  return 0;
}

uint64_t AppleBCMWLANCore::handleIPv6AddressNotificationGated(AppleBCMWLANCore *this, void *a2)
{
  uint64_t v3 = *((void *)this + 9);
  uint64_t v4 = *(AppleBCMWLANBusInterface **)(v3 + 5400);
  if (v4)
  {
    AppleBCMWLANBusInterface::sendBootCheckPointToCoreAnalytics(v4, 0, 0xBu);
    uint64_t v3 = *((void *)this + 9);
  }
  if (*(_DWORD *)(v3 + 10048))
  {
    unint64_t v5 = 0;
    uint64_t v6 = 9536;
    do
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *, void *))(*(void *)this + 1848))(this, a2))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          uint64_t v8 = (const char *)my_ip6_sprintf((const unsigned __int8 *)(*((void *)this + 9) + v6));
          CCLogStream::logNoticeIf(v7, 0x100uLL, "[dk] %s@%d:IPv6  addresses Configured %s\n", "handleIPv6AddressNotificationGated", 13574, v8);
        }
      }
      ++v5;
      v6 += 16;
    }
    while (v5 < *(unsigned int *)(*((void *)this + 9) + 10048));
  }
  return 0;
}

uint64_t AppleBCMWLANCore::recoverFromDisassocFailure(uint64_t this, int a2)
{
  if (a2 != -469793790 && a2 != -469793788)
  {
    uint64_t v3 = *(void *)(this + 72);
    if (*(unsigned char *)(v3 + 10380)) {
      unsigned int v4 = 5;
    }
    else {
      unsigned int v4 = 4;
    }
    return CCFaultReporter::reportFault(*(CCFaultReporter **)(v3 + 5544), v4, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0x353Du, "recoverFromDisassocFailure", 0, -469793525, 0);
  }
  return this;
}

uint64_t AppleBCMWLANCore::handlGetPMDurationAsyncCallback(void *a1, uint64_t a2, uint64_t a3, unsigned int **a4)
{
  if (a3)
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v14 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        (*(void (**)(void *, uint64_t))(*a1 + 112))(a1, a3);
        CCLogStream::logCrit(v14, "[dk] %s@%d: pm_dur failed, error %s\n");
      }
    }
  }
  else if (*(unsigned char *)(a1[9] + 18027))
  {
    *(_DWORD *)(a1[9] + 18088)  = **a4;
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logInfo(v6, "[dk] %s@%d:ASync enter MPC duration - last: %d\n", "handlGetPMDurationAsyncCallback", 13641, *(_DWORD *)(a1[9] + 18088));
      }
    }
  }
  else
  {
    unsigned int v7 = **a4;
    unsigned int v8 = *(_DWORD *)(a1[9] + 18088);
    if (v8) {
      BOOL v9 = v7 > v8;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9)
    {
      int v10 = v7 - v8;
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          int v16 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logInfo(v16, "[dk] %s@%d:Async exit MPC duration - last: %d current: %d delta: %d\n", "handlGetPMDurationAsyncCallback", 13647, *(_DWORD *)(a1[9] + 18088), v7, v10);
        }
      }
      uint64_t v11 = a1[9];
      int v12 = *(_DWORD *)(v11 + 18040);
      *(_DWORD *)(v11 + 18040)  = v12 + v10;
      *(_DWORD *)(a1[9] + 18088)  = 0;
      if (__CFADD__(v12, v10))
      {
        if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
        {
          (*(void (**)(void *))(*a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            __int16 v15 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
            CCLogStream::logCrit(v15, "[dk] %s@%d:Over flow detected in adding delta value to ivars->fInactivityMpcSleepDuration\n");
          }
        }
      }
    }
  }
  return a3;
}

uint64_t AppleBCMWLANCore::updateTrafficInactivityBeaconStats(AppleBCMWLANCore *this, OSData *a2)
{
  unsigned int v22 = 0;
  OSData::getBytesNoCopy(a2);
  memset(v23, 170, sizeof(v23));
  AppleBCMWLANUtil::AutoreleasedAlignedOSData::AutoreleasedAlignedOSData((AppleBCMWLANUtil::AutoreleasedAlignedOSData *)v23, a2, 4);
  unsigned int v4 = v23[0];
  if (v23[0])
  {
    CounterValueSafe  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, v23[0], 4uLL);
    unsigned int v6 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v22, (int *)4, v4, 8uLL);
    unsigned int v7 = v6;
    if (*(unsigned char *)(*((void *)this + 9) + 18027))
    {
      *(_DWORD *)(*((void *)this + 9) + 18104)  = v6;
      *(_DWORD *)(*((void *)this + 9) + 18092)  = CounterValueSafe;
    }
    else
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          __int16 v21 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logInfo(v21, "[dk] %s@%d:Beacon stats: Prev [sched: %d rcvd: %d] Current [sched: %d rcvd: %d]\n", "updateTrafficInactivityBeaconStats", 13699, *(_DWORD *)(*((void *)this + 9) + 18104), *(_DWORD *)(*((void *)this + 9) + 18092), v7, CounterValueSafe);
        }
      }
      int v10 = (_DWORD *)(*((void *)this + 9) + 18056);
      unsigned int v11 = v7 - *(_DWORD *)(*((void *)this + 9) + 18104);
      unsigned int v12 = *v10 + v11;
      BOOL v13 = __CFADD__(*v10, v11);
      _DWORD *v10 = v12;
      int v14 = (_DWORD *)(*((void *)this + 9) + 18044);
      unsigned int v15 = CounterValueSafe - *(_DWORD *)(*((void *)this + 9) + 18092);
      BOOL v16 = __CFADD__(*v14, v15);
      unsigned int v17 = *v14 + v15;
      int v18 = v16;
      _DWORD *v14 = v17;
      *(_DWORD *)(*((void *)this + 9) + 18104)  = 0;
      *(_DWORD *)(*((void *)this + 9) + 18092)  = 0;
      if (v13 || v18)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            int v20 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logCrit(v20, "[dk] %s@%d:Overflow detected in adding MPC beacon stats\n", "updateTrafficInactivityBeaconStats", 13706);
          }
        }
      }
    }
    *(unsigned char *)(*((void *)this + 9) + 19756)  = 0;
    uint64_t v8 = v22;
  }
  else
  {
    uint64_t v8 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        BOOL v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v9, "[dk] %s@%d:Failed to create aligned infraSpecificStats data\n", "updateTrafficInactivityBeaconStats", 13676);
      }
    }
  }
  AppleBCMWLANUtil::AutoreleasedAlignedOSData::~AutoreleasedAlignedOSData((AppleBCMWLANUtil::AutoreleasedAlignedOSData *)v23);
  return v8;
}

uint64_t AppleBCMWLANCore::setTrafficInactivityStats(OSDictionary *this)
{
  unsigned int v22 = 0;
  *(void *)__int16 v19 = 0;
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  uint64_t v2 = this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable;
  int v21 = BYTE2(v2[7].free);
  if (BYTE3(v2[173].Dispatch))
  {
    v2[173].ensureCapacity  = 0;
    if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
    {
      ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v3 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
        CCLogStream::logInfo(v3, "[dk] %s@%d:enter %llu\n");
      }
    }
  }
  else
  {
    v2[173].init  = (BOOL (__cdecl *)(OSObject *__hidden))((char *)v2[173].init
                                                        + -LODWORD(v2[173].ensureCapacity));
    if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
    {
      ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v15 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
        CCLogStream::logInfo(v15, "[dk] %s@%d:exit %llu duration %llu\n");
      }
    }
  }
  uint64_t v4 = ((uint64_t (*)(OSDictionary *))this->ensureCapacity)(this);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v4 + 136))(v4))
  {
    *(void *)__int16 v19 = &v22;
    *(void *)&v19[8]  = 0x400040004;
    unsigned int v7 = AppleBCMWLANCommander::runIOVarGet((AppleBCMWLANCommander *)this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[52].retain, (uint64_t)"pm_dur", (uint64_t)&kNoTxPayload, (uint64_t)v19, 0);
    if (v7)
    {
      unsigned int v18 = v7;
      if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
      {
        ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
        if (CCLogStream::shouldLog()) {
          goto LABEL_32;
        }
      }
      return IO80211Controller::postMessage((IO80211Controller *)this, (IO80211SkywalkInterface *)this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[108].getCount, 0xDDu, &v21, 4uLL, 1);
    }
    if (BYTE3(this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[173].Dispatch))
    {
      LODWORD(this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[173].flushCollection)  = v22;
      if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
      {
        ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v8 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
          CCLogStream::logInfo(v8, "[dk] %s@%d:Sync enter MPC duration - last: %d\n", "setTrafficInactivityStats", 13781, LODWORD(this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[173].flushCollection));
        }
      }
    }
    else
    {
      flushCollection  = this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[173].flushCollection;
      if (flushCollection)
      {
        int v10 = v22 - flushCollection;
        if (v22 > flushCollection)
        {
          if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
          {
            ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
            if (CCLogStream::shouldLog())
            {
              unsigned int v17 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
              CCLogStream::logInfo(v17, "[dk] %s@%d:Sync exit MPC duration - last: %d current: %d delta: %d\n", "setTrafficInactivityStats", 13786, LODWORD(this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[173].flushCollection), v22, v10);
            }
          }
          unsigned int v11 = this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable;
          free  = (int)v11[173].free;
          LODWORD(v11[173].free)  = free + v10;
          LODWORD(this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[173].flushCollection)  = 0;
          if (__CFADD__(free, v10))
          {
            if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
            {
              ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
              if (CCLogStream::shouldLog())
              {
                BOOL v16 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
                CCLogStream::logCrit(v16, "[dk] %s@%d:Overflow detected in adding delta stats to ivars->fInactivityMpcSleepDuration\n");
              }
            }
            return IO80211Controller::postMessage((IO80211Controller *)this, (IO80211SkywalkInterface *)this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[108].getCount, 0xDDu, &v21, 4uLL, 1);
          }
        }
      }
    }
LABEL_24:
    if (AppleBCMWLANCore::checkForEarlyBeconTerminationSupport((AppleBCMWLANCore *)this)) {
      AppleBCMWLANCore::getChipIfCounters(this);
    }
    if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 76)
      && !BYTE4(this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[176].Dispatch))
    {
      memset(v19, 0, sizeof(v19));
      AppleBCMWLANCore::collectBeaconRxCounters((AppleBCMWLANCore *)this, (uint64_t)v19, 0);
    }
    return IO80211Controller::postMessage((IO80211Controller *)this, (IO80211SkywalkInterface *)this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[108].getCount, 0xDDu, &v21, 4uLL, 1);
  }
  *(void *)__int16 v19 = this;
  *(void *)&v19[8]  = AppleBCMWLANCore::handlGetPMDurationAsyncCallback;
  *(void *)&v19[16]  = 0;
  retain  = (AppleBCMWLANCommander *)this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[52].retain;
  int v20 = 262148;
  unsigned int v6 = AppleBCMWLANCommander::sendIOVarGet(retain, (uint64_t)"pm_dur", (uint64_t)&kNoTxPayload, (unsigned __int16 *)&v20, (uint64_t)v19, 0);
  if (!v6) {
    goto LABEL_24;
  }
  unsigned int v18 = v6;
  if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
  {
    ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
    if (CCLogStream::shouldLog())
    {
LABEL_32:
      int v14 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
      ((void (*)(OSDictionary *, void))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[1].retain)(this, v18);
      CCLogStream::logCrit(v14, "[dk] %s@%d: pm_dur failed, error %s\n");
    }
  }
  return IO80211Controller::postMessage((IO80211Controller *)this, (IO80211SkywalkInterface *)this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[108].getCount, 0xDDu, &v21, 4uLL, 1);
}

uint64_t AppleBCMWLANCore::checkForEarlyBeconTerminationSupport(AppleBCMWLANCore *this)
{
  uint64_t result = AppleBCMWLANCore::featureFlagIsBitSet(this, 57);
  if (result)
  {
    uint64_t v3 = *(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472);
    return AppleBCMWLANConfigManager::isEBTSupportedInDriver(v3);
  }
  return result;
}

uint64_t AppleBCMWLANCore::getChipIfCounters(OSDictionary *this)
{
  ensureCapacity  = (AppleBCMWLANIO80211APSTAInterface *)this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[108].ensureCapacity;
  if (ensureCapacity)
  {
    if (AppleBCMWLANIO80211APSTAInterface::enabled(ensureCapacity))
    {
      uint64_t v3 = AppleBCMWLANCore::issueIfCounterIOVar(this, 1u);
      if (v3)
      {
        uint64_t v8 = v3;
        if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
        {
          ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
          if (CCLogStream::shouldLog())
          {
            BOOL v9 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
            int v10 = (const char *)((uint64_t (*)(OSDictionary *, uint64_t))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[1].retain)(this, v8);
            CCLogStream::logAlert(v9, "[dk] %s@%d:getChipIfCounters failed getting soft AP if_counters reason: %s\n", "getChipIfCounters", 32702, v10);
          }
        }
      }
    }
  }
  uint64_t v4 = AppleBCMWLANCore::issueIfCounterIOVar(this, 0);
  if (v4)
  {
    if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
    {
      ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v6 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
        unsigned int v7 = (const char *)((uint64_t (*)(OSDictionary *, uint64_t))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[1].retain)(this, v4);
        CCLogStream::logAlert(v6, "[dk] %s@%d:getChipIfCounters failed reason: %s\n", "getChipIfCounters", 32708, v7);
      }
    }
  }
  return v4;
}

uint64_t AppleBCMWLANCore::checkForLPSCDisable(AppleBCMWLANCore *this)
{
  return *(unsigned __int8 *)(*((void *)this + 9) + 18340);
}

uint64_t AppleBCMWLANCore::collectBeaconRxCounters(AppleBCMWLANCore *a1, uint64_t a2, int a3)
{
  uint64_t result = AppleBCMWLANCore::featureFlagIsBitSet(a1, 76);
  if (result)
  {
    uint64_t v7 = *((void *)a1 + 9);
    if (!*(unsigned char *)(v7 + 18340))
    {
      uint64_t result = IO80211BssManager::isAssociatedToAdhoc(*(IO80211BssManager **)(v7 + 5440));
      if ((result & 1) == 0)
      {
        *(unsigned char *)(*((void *)a1 + 9) + 19608)  = a3;
        uint64_t v8 = (_OWORD *)(*((void *)a1 + 9) + 19548);
        *(_OWORD *)((char *)v8 + 28)  = 0u;
        *uint64_t v8 = 0u;
        v8[1]  = 0u;
        uint64_t result = IOMallocZeroData();
        if (result)
        {
          uint64_t v9 = result;
          *(_WORD *)uint64_t result = 1;
          *(_DWORD *)(result + 4) |= a3;
          uint64_t v10 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 88))(a1);
          if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 136))(v10))
          {
            unsigned int v24 = a1;
            uint64_t v25 = (uint64_t)AppleBCMWLANCore::handleCollectBeaconRxCountersAsyncCallBack;
            uint64_t v26 = a2;
            unsigned int v11 = *(AppleBCMWLANCommander **)(*((void *)a1 + 9) + 5416);
            uint64_t v22 = v9;
            uint64_t v23 = 44;
            int v21 = 2883628;
            int v12 = AppleBCMWLANCommander::sendIOVarGet(v11, (uint64_t)"sta_pm_sc_offload_status", (uint64_t)&v22, (unsigned __int16 *)&v21, (uint64_t)&v24, 0);
            if (v12)
            {
              int v13 = v12;
              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
              {
                (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  int v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                  CCLogStream::logAlert(v14, "[dk] %s@%d: Failed GET IOCTL, cret[0x%08x]\n", "collectBeaconRxCounters", 44094, v13);
                }
              }
            }
          }
          else
          {
            unsigned int v24 = (AppleBCMWLANCore *)v9;
            uint64_t v25 = 0x2C002C002CLL;
            unsigned int v15 = *(AppleBCMWLANCommander **)(*((void *)a1 + 9) + 5416);
            uint64_t v22 = v9;
            uint64_t v23 = 44;
            if (!AppleBCMWLANCommander::runIOVarGet(v15, (uint64_t)"sta_pm_sc_offload_status", (uint64_t)&v22, (uint64_t)&v24, 0))
            {
              long long v16 = *(_OWORD *)v9;
              long long v17 = *(_OWORD *)(v9 + 16);
              *(_OWORD *)(a2 + 28)  = *(_OWORD *)(v9 + 28);
              *(_OWORD *)a2  = v16;
              *(_OWORD *)(a2 + 16)  = v17;
              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
              {
                (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  int v20 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                  CCLogStream::logInfo(v20, "[dk] %s@%d:BCN_OFLD_DUR=%d RX_BCN_CNT=%d MISSED_BCN_CNT=%d\n", "collectBeaconRxCounters", 44105, *(_DWORD *)(v9 + 36), *(_DWORD *)(v9 + 20), *(_DWORD *)(v9 + 24));
                }
              }
              if (*(unsigned char *)(*((void *)a1 + 9) + 19757)) {
                AppleBCMWLANCore::updateTrafficInactivityScanCoreBeaconStats(a1, (_DWORD *)v9);
              }
              *(void *)(*((void *)a1 + 9) + 19600)  = getCurrentContinuousTimeMilliSeconds() / 0x3E8uLL
                                                         - *(void *)(*((void *)a1 + 9) + 19592);
              AppleBCMWLANCore::updateBeaconOffloadStatsReport(a1, (_DWORD *)a2, *(void *)(*((void *)a1 + 9) + 19600));
              uint64_t v18 = *((void *)a1 + 9);
              __int16 v19 = *(AppleBCMWLANBssManager **)(v18 + 5512);
              if (v19 && *(_DWORD *)(a2 + 36))
              {
                AppleBCMWLANIOReportingCore::updateBeaconOffloadStats(v19, (unsigned int *)a2, *(void *)(v18 + 19600));
                uint64_t v18 = *((void *)a1 + 9);
              }
              if (*(unsigned char *)(v18 + 19608))
              {
                AppleBCMWLANCore::sendBeaconOffloadStatsEventCoreAnalytics((IOService *)a1);
                *(unsigned char *)(*((void *)a1 + 9) + 19608)  = 0;
              }
            }
          }
          return IOFreeData();
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::getBtScoForIphone(AppleBCMWLANCore *this)
{
  return *(unsigned __int8 *)(*((void *)this + 9) + 17640);
}

uint64_t AppleBCMWLANCore::timeSinceLastActivity_ms(AppleBCMWLANCore *this)
{
  return 0xB2F4FC07949;
}

uint64_t AppleBCMWLANCore::printDataPathDebug(AppleBCMWLANCore *this, char *a2)
{
  (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  int v4 = IO80211Print();
  int v5 = AppleBCMWLANCore::dumpWmeCounters(this, a2) + v4;
  (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  int v6 = v5 + IO80211Print();
  (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  int v7 = v6 + IO80211Print();
  (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  int v8 = v7 + IO80211Print();
  (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  uint64_t v9 = v8 + IO80211Print();
  if (*(void *)(*((void *)this + 9) + 11320))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(*((void *)this + 9) + 11320));
    AppleBCMWLANIO80211APSTAInterface::enabled(*(AppleBCMWLANIO80211APSTAInterface **)(*((void *)this + 9) + 11320));
    return v9 + IO80211Print();
  }
  return v9;
}

uint64_t AppleBCMWLANCore::flowIdSupported(AppleBCMWLANCore *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 5400) + 408))();
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::flowIdSupported(AppleBCMWLANCore *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 3) + 5400) + 408))();
}

uint64_t AppleBCMWLANCore::releaseFlowQueue(IO80211Controller *a1, IO80211FlowQueue *a2)
{
  if ((*(unsigned int (**)(void))(**(void **)(*((void *)a1 + 9) + 5400) + 408))(*(void *)(*((void *)a1 + 9) + 5400)))
  {
    int v4 = *(uint64_t (**)(void))(**(void **)(*((void *)a1 + 9) + 5400) + 424);
    return v4();
  }
  else
  {
    return IO80211Controller::releaseFlowQueue(a1, a2);
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::releaseFlowQueue(uint64_t a1, IO80211FlowQueue *a2)
{
  return AppleBCMWLANCore::releaseFlowQueue((IO80211Controller *)(a1 - 48), a2);
}

uint64_t AppleBCMWLANCore::requestFlowQueue(AppleBCMWLANCore *a1, uint64_t a2)
{
  if ((*(unsigned int (**)(void))(**(void **)(*((void *)a1 + 9) + 5400) + 408))(*(void *)(*((void *)a1 + 9) + 5400)))
  {
    if (AppleBCMWLANCore::isRejectingCommands(a1))
    {
      return 0;
    }
    else
    {
      int v5 = *(uint64_t (**)(void))(**(void **)(*((void *)a1 + 9) + 5400) + 416);
      return v5();
    }
  }
  else
  {
    return IO80211Controller::requestFlowQueue(a1, a2);
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::requestFlowQueue(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::requestFlowQueue((AppleBCMWLANCore *)(a1 - 48), a2);
}

unsigned __int8 *AppleBCMWLANCore::validateBrcmExtChIE(AppleBCMWLANCore *this, unsigned __int8 *a2, unint64_t a3)
{
  if (!a2 || !a3)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v8, "[dk] %s@%d:Invalid argument\n", "validateBrcmExtChIE", 14401);
      }
    }
    return 0;
  }
  if (a3 < 7) {
    return 0;
  }
  if (*((__int16 *)a2 + 1) != -28672 || a2[4] != 76) {
    return 0;
  }
  int v5 = 0;
  if (a3 >= 0x83 && a2[5] == 64)
  {
    if ((unint64_t)*(unsigned int *)(a2 + 10) + 6 > a3 || *(_DWORD *)(a2 + 126) || *((_WORD *)a2 + 61))
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logEmergency(v9, "[dk] %s@%d:Malformed IE, bss_info is invalid in Extentded Channel IE\n", "validateBrcmExtChIE", 14419);
        }
      }
      return 0;
    }
    int v5 = a2 + 6;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logInfo(v7, "[dk] %s@%d:Found wl_bss_info_t\n", "validateBrcmExtChIE", 14420);
      }
    }
  }
  return v5;
}

uint64_t AppleBCMWLANCore::getRoamNoNetworkReason(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = *(unsigned int *)(a2 + 20);
  if (v2 < 2 || *(_DWORD *)(a2 + 4) != 19 || *(_DWORD *)(a2 + 8) != 3) {
    return 0;
  }
  uint64_t v4 = v2 + 47 + a2;
  if (!__CFADD__(v2 + 47, a2))
  {
    int v7 = (unsigned __int8 *)(a2 + 48);
    uint64_t v8 = a2 + 49;
    if (v8 >= a2 && a2 != -49 && v8 <= v4 && (uint64_t)v7 >= a2 && v4 >= (uint64_t)v7)
    {
      if (*v7 != 221)
      {
        unint64_t v9 = *(unsigned __int16 *)(a2 + 50);
        if (v2 >= v9
          && (unint64_t)*(unsigned __int16 *)(a2 + 54) + 8 <= v9
          && *(_WORD *)(a2 + 52) == 1)
        {
          return *(unsigned int *)(a2 + 56);
        }
      }
      return 0;
    }
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1);
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 1848))(a1);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      int v6 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1);
      CCLogStream::logCrit(v6, "[dk] %s@%d: ERROR: Boundary condition detected\n", "getRoamNoNetworkReason", 14449);
      return 0;
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleExtendedEventData(uint64_t this, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(unsigned int *)(a2 + 20);
    if (v3 >= 2)
    {
      uint64_t v4 = (AppleBCMWLANCore *)this;
      uint64_t v5 = a2 + 48;
      uint64_t v6 = v3 + 47 + a2;
      BOOL v7 = __CFADD__(v3 + 47, a2);
      int v8 = *(_DWORD *)(a2 + 4);
      if (v8) {
        unint64_t v9 = (unsigned __int8 *)(a2 + 48);
      }
      else {
        unint64_t v9 = (unsigned __int8 *)(a2 + 81);
      }
      if (v7
        || ((uint64_t)(v9 + 1) >= a2 ? (BOOL v10 = v9 != (unsigned __int8 *)-1) : (BOOL v10 = 0),
            v10 ? (BOOL v11 = (uint64_t)(v9 + 1) <= v6) : (BOOL v11 = 0),
            v11 ? (BOOL v12 = (uint64_t)v9 < a2) : (BOOL v12 = 1),
            !v12 ? (BOOL v13 = v6 < (uint64_t)v9) : (BOOL v13 = 1),
            v13))
      {
        this  = (*(uint64_t (**)(uint64_t))(*(void *)this + 1848))(this);
        if (this)
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
          this  = CCLogStream::shouldLog();
          if (this)
          {
            int v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
            return CCLogStream::logCrit(v14, "[dk] %s@%d: ERROR: Boundary condition detected\n", "handleExtendedEventData", 14589);
          }
        }
      }
      else
      {
        unsigned int v15 = v9[1] + 2;
        uint64_t v16 = v3 - 1 + v5;
        BOOL v17 = __CFADD__(v3 - 1, v5);
        if (v8 == 19 && *(_DWORD *)(a2 + 8) == 3)
        {
          uint64_t v18 = v9;
          if (*v9 != 221)
          {
            uint64_t v19 = *(unsigned __int16 *)(a2 + 50);
            uint64_t v18 = &v9[v19];
            unsigned int v15 = v19 + v9[v19 + 1] + 2;
          }
        }
        else
        {
          uint64_t v18 = v9;
        }
        if (v15 <= v3)
        {
          while (1)
          {
            if (*v18 == 221)
            {
              this  = (uint64_t)AppleBCMWLANCore::validateBrcmExtChIE(v4, v18, v18[1] + 2);
              if (this)
              {
                int v25 = *(_DWORD *)(this + 8);
                unsigned __int16 v26 = *(_WORD *)(this + 12);
                if (*(_DWORD *)(a2 + 4) == 16 && !(v25 | v26))
                {
                  int v25 = *(_DWORD *)(a2 + 24);
                  unsigned __int16 v26 = *(_WORD *)(a2 + 28);
                }
                if (v25 | v26) {
                  this  = AppleBCMWLANScanAdapter::processAndSendWLBSSInfo(*(AppleBCMWLANScanAdapter **)(*((void *)v4 + 9) + 5432), (const void *)this, *(unsigned int *)(this + 4));
                }
              }
            }
            unsigned int v20 = *(_DWORD *)(a2 + 20);
            if (v20 == v15) {
              return this;
            }
            if (v20 > v15 && v20 - v15 <= 1)
            {
              this  = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
              if (this)
              {
                (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                this  = CCLogStream::shouldLog();
                if (this)
                {
                  int v23 = 14642;
                  goto LABEL_64;
                }
              }
              return this;
            }
            if (v17) {
              break;
            }
            uint64_t v18 = &v9[v15];
            uint64_t v22 = v18 + 1;
            if (v18 == (unsigned __int8 *)-1
              || (uint64_t)v22 < v5
              || (uint64_t)v22 > v16
              || v5 > (uint64_t)v18
              || v16 < (uint64_t)v18)
            {
              break;
            }
            v15 += v18[1] + 2;
            if (v15 > v20) {
              return this;
            }
          }
          this  = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
          if (this)
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
            this  = CCLogStream::shouldLog();
            if (this)
            {
              int v23 = 14649;
LABEL_64:
              unsigned int v24 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
              return CCLogStream::logEmergency(v24, "[dk] %s@%d:Malformed event message does not have enough space for another IE\n", "handleExtendedEventData", v23);
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t AppleBCMWLANCore::updateSlowWifiRxAmpduStats(AppleBCMWLANCore *this, OSData *a2)
{
  unsigned int v8 = 0;
  uint64_t v4 = IOMallocZeroData();
  if (!a2) {
    goto LABEL_10;
  }
  if (((unint64_t)OSData::getBytesNoCopy(a2, 4uLL, 4uLL) & 3) != 0)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        BOOL v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:alignment fails\n", "updateSlowWifiRxAmpduStats", 14749);
      }
    }
    unsigned int v8 = -536870212;
LABEL_10:
    uint64_t v5 = 3758097084;
    if (v4) {
      goto LABEL_11;
    }
    return v5;
  }
  if (v4)
  {
    *(void *)(v4 + 2080)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v8, (int *)4, a2, 4uLL);
    *(void *)(v4 + 2088)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v8, (int *)4, a2, 0x14uLL);
    *(void *)(v4 + 2096)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v8, (int *)4, a2, 0x18uLL);
    *(void *)(v4 + 2104)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v8, (int *)4, a2, 8uLL);
    *(void *)(v4 + 2120)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v8, (int *)4, a2, 0x40uLL);
    *(void *)(v4 + 2128)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v8, (int *)4, a2, 0x30uLL);
    *(void *)(v4 + 2136)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v8, (int *)4, a2, 0x34uLL);
    *(void *)(v4 + 2144)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v8, (int *)4, a2, 0x28uLL);
    *(void *)(v4 + 2152)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v8, (int *)4, a2, 0x2CuLL);
    *(void *)(v4 + 2160)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v8, (int *)4, a2, 0x1CuLL);
    *(void *)(v4 + 2168)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v8, (int *)4, a2, 0xCuLL);
    *(void *)(v4 + 2176)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v8, (int *)4, a2, 0x10uLL);
    *(void *)(v4 + 2184)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v8, (int *)4, a2, 0x20uLL);
    *(void *)(v4 + 2192)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v8, (int *)4, a2, 0x24uLL);
    *(void *)(v4 + 2208)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v8, (int *)4, a2, 0x50uLL);
    *(void *)(v4 + 2216)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v8, (int *)4, a2, 0x4CuLL);
    *(void *)(v4 + 2200)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v8, (int *)4, a2, 0x48uLL);
    *(_DWORD *)(v4 + 2072)  = 3;
    IO80211Controller::setChipCounterStats();
    uint64_t v5 = v8;
LABEL_11:
    IOFreeData();
    return v5;
  }
  return 0;
}

uint64_t AppleBCMWLANCore::handleDongleEventPacket(AppleBCMWLANCore *a1, unsigned int *a2)
{
  int v57 = 0;
  uint64_t v4 = *((void *)a2 + 1);
  uint64_t result = *(void *)(*((void *)a1 + 9) + 5400);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 368))(result);
    int v6 = result;
  }
  else
  {
    int v6 = 0;
  }
  unint64_t v7 = *(void *)a2;
  if (*(void *)a2 < 4uLL) {
    return result;
  }
  uint64_t v8 = *((void *)a2 + 1);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 3);
  unint64_t v10 = 4 * v9 + 36;
  if (v7 < v10) {
    return result;
  }
  uint64_t v11 = v8 + 4 * v9;
  if (*(_WORD *)(v11 + 26) != 1280) {
    return result;
  }
  uint64_t v12 = v11 + 4;
  unsigned int v13 = *(unsigned __int16 *)(v11 + 34);
  if (v7 < v10 + (bswap32(v13) >> 16))
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v14, "[dk] %s@%d:Event too short for a specified datalen(%d, %d) vs (%d)\n");
      }
    }
LABEL_30:
    return IO80211Hexdump();
  }
  if (*(_WORD *)(v12 + 24) != 256)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        BOOL v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v17, "[dk] %s@%d:Unsupported Dongle Event Message Version (%d)\n");
      }
    }
    goto LABEL_30;
  }
  int v15 = *(unsigned __int16 *)(v12 + 28);
  if (v15 == 512)
  {
    uint64_t v18 = v4 + v7;
    if (CCLogStream::shouldLog(*(CCLogStream **)(*((void *)a1 + 9) + 14168), 1uLL))
    {
      LODWORD(keys)  = 0;
      CCLogStream::logHeaderAndBuf(*(CCLogStream **)(*((void *)a1 + 9) + 14168), *((unsigned __int8 **)a2 + 1), 0, *(void *)a2, *(void *)a2, &keys, 4uLL);
    }
    *(_WORD *)(v12 + 24)  = bswap32(*(unsigned __int16 *)(v12 + 24)) >> 16;
    *(_WORD *)(v12 + 28)  = bswap32(*(unsigned __int16 *)(v12 + 28)) >> 16;
    *(_WORD *)(v12 + 30)  = bswap32(*(unsigned __int16 *)(v12 + 30)) >> 16;
    int v56 = -469793522;
    uint64_t v19 = (unsigned __int16 *)(v12 + 32);
    if (v18 - (v12 + 32) < 5)
    {
      if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)) {
        return IO80211Hexdump();
      }
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (!CCLogStream::shouldLog()) {
        return IO80211Hexdump();
      }
      uint64_t v39 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      int v40 = 14901;
LABEL_137:
      CCLogStream::logAlert(v39, "[dk] %s@%d:Buffer overflow\n", "handleDongleEventPacket", v40);
      return IO80211Hexdump();
    }
    unsigned int v23 = *(unsigned __int16 *)(v12 + 30);
    int v24 = v57;
    if (v23 <= (unsigned __int16)(*(_WORD *)(v12 + 34) - 1))
    {
      int v26 = -469793522;
LABEL_69:
      int v56 = v26;
      int v57 = v24;
      goto LABEL_109;
    }
    unsigned int v25 = 0;
    int v26 = -469793522;
    while (1)
    {
      uint64_t v19 = (unsigned __int16 *)((char *)v19 + v25);
      if (v18 - (uint64_t)v19 <= 4)
      {
        int v56 = v26;
        int v57 = v24;
        if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)) {
          return IO80211Hexdump();
        }
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (!CCLogStream::shouldLog()) {
          return IO80211Hexdump();
        }
        uint64_t v39 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        int v40 = 14913;
        goto LABEL_137;
      }
      int v27 = *v19;
      if (v27 == 1)
      {
        int v26 = -469793504;
      }
      else if (v27 == 2)
      {
        if (v18 - (uint64_t)v19 - 4 < 5)
        {
          int v56 = v26;
          int v57 = v24;
          if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)) {
            return IO80211Hexdump();
          }
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (!CCLogStream::shouldLog()) {
            return IO80211Hexdump();
          }
          uint64_t v39 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          int v40 = 14922;
          goto LABEL_137;
        }
        unsigned int v28 = v19[1];
        if (v28 > (unsigned __int16)(v19[3] - 1))
        {
          unsigned int v29 = 0;
          while (2)
          {
            uint64_t v30 = (unsigned __int16 *)((char *)v19 + v29 + 4);
            uint64_t v31 = v18 - (void)v30;
            if (v18 - (uint64_t)v30 <= 4)
            {
              int v56 = v26;
              int v57 = v24;
              if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)) {
                return IO80211Hexdump();
              }
              (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              if (!CCLogStream::shouldLog()) {
                return IO80211Hexdump();
              }
              uint64_t v39 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              int v40 = 14934;
              goto LABEL_137;
            }
            switch(*v30)
            {
              case 1:
                if (*(unsigned __int16 *)((char *)v19 + v29 + 6) < 0x70u) {
                  goto LABEL_55;
                }
                int v56 = v26;
                int v57 = v24;
                if (v18 - (uint64_t)v30 - 4 > 111)
                {
                  int v42 = *(unsigned __int16 *)((char *)v19 + v29 + 12);
                  int v56 = -469793510;
                  int v57 = v42;
                  switch(v42)
                  {
                    case 1:
                      int v41 = -469793509;
                      goto LABEL_108;
                    case 2:
                      int v41 = -469793508;
                      goto LABEL_108;
                    case 3:
                      int v41 = -469793507;
                      goto LABEL_108;
                    case 4:
                      int v41 = -469793506;
                      goto LABEL_108;
                    case 5:
                      int v41 = -469793505;
                      goto LABEL_108;
                    default:
                      goto LABEL_109;
                  }
                  goto LABEL_109;
                }
                if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
                {
                  (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                  if (CCLogStream::shouldLog())
                  {
                    uint64_t v39 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                    int v40 = 14945;
                    goto LABEL_137;
                  }
                }
                return IO80211Hexdump();
              case 2:
                int v57 = v24;
                int v41 = -469793513;
                goto LABEL_108;
              case 3:
                int v57 = v24;
                int v41 = -469793512;
                goto LABEL_108;
              case 4:
                int v57 = v24;
                int v41 = -469793511;
LABEL_108:
                int v56 = v41;
                goto LABEL_109;
              case 5:
              case 6:
                unsigned int v32 = *(unsigned __int16 *)((char *)v19 + v29 + 6);
                if (v32 < 2) {
                  goto LABEL_55;
                }
                size_t v33 = (unsigned __int16 *)((char *)v19 + v29 + 8);
                unint64_t v34 = v18 - (void)v33;
                if (v18 - (uint64_t)v33 <= 1)
                {
                  int v56 = v26;
                  int v57 = v24;
                  if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)) {
                    return IO80211Hexdump();
                  }
                  (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                  if (!CCLogStream::shouldLog()) {
                    return IO80211Hexdump();
                  }
                  uint64_t v39 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                  int v40 = 14987;
                  goto LABEL_137;
                }
                break;
              default:
LABEL_55:
                int v35 = *(unsigned __int16 *)((char *)v19 + v29 + 6);
                v29 += v35;
                if (v30[1]) {
                  BOOL v36 = v29 + v35 > v28;
                }
                else {
                  BOOL v36 = 1;
                }
                if (!v36) {
                  continue;
                }
                goto LABEL_62;
            }
            break;
          }
          int v24 = (unsigned __int16)*v33;
          switch(*v33)
          {
            case 0:
              int v57 = (unsigned __int16)*v33;
              int v41 = -469793510;
              goto LABEL_108;
            case 1:
              uint64_t v43 = (unsigned __int16 *)((char *)v19 + v29 + 4);
              int v57 = (unsigned __int16)*v33;
              int v56 = -469793516;
              int v44 = (*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 9) + 5400) + 368))(*(void *)(*((void *)a1 + 9) + 5400));
              if ((v44 - 4378) > 0x15 || ((1 << (v44 - 26)) & 0x200601) == 0)
              {
                if ((v6 - 4355) > 0x16 || ((1 << (v6 - 3)) & 0x400005) == 0) {
                  goto LABEL_109;
                }
                uint64_t v50 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                if (v34 <= 7)
                {
                  if (v50)
                  {
                    (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                    if (CCLogStream::shouldLog()) {
                      goto LABEL_121;
                    }
                  }
                  goto LABEL_109;
                }
                if (v50)
                {
                  (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                  if (CCLogStream::shouldLog())
                  {
                    int v55 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                    CCLogStream::logAlert(v55, "[dk] %s@%d:RX DMA STALL - entity=%d timeout=%u stalled_dma_bitmap=%u\n", "handleDongleEventPacket", 15018, *v43, v43[4], v43[5]);
                  }
                }
              }
              else
              {
                if (v34 <= 5)
                {
                  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
                  {
                    (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                    if (CCLogStream::shouldLog())
                    {
                      int v46 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                      CCLogStream::logAlert(v46, "[dk] %s@%d:RX DMA STALL - Buffer overflow bcm_xtlv\n");
                    }
                  }
                  goto LABEL_109;
                }
                if (v43[3] != 8)
                {
                  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
                  {
                    (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                    if (CCLogStream::shouldLog())
                    {
                      OSNumberPtr v52 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                      CCLogStream::logAlert(v52, "[dk] %s@%d:RX DMA STALL - wrong bcm_xtlv length %u\n");
                    }
                  }
                  goto LABEL_109;
                }
                uint64_t v49 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                if (v31 - 8 <= 7)
                {
                  if (v49)
                  {
                    (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                    if (CCLogStream::shouldLog())
                    {
LABEL_121:
                      uint64_t v51 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                      CCLogStream::logAlert(v51, "[dk] %s@%d:RX DMA STALL - Buffer overflow rx_dma_hc_info\n");
                    }
                  }
LABEL_109:
                  keys  = OSString::withCString("DongleEventData.bin");
                  values  = OSData::withBytes(*((const void **)a2 + 1), *a2);
                  int v47 = *(CCFaultReporter **)(*((void *)a1 + 9) + 5544);
                  long long v48 = OSDictionary::withObjects((const OSObject **)&values, (const OSObject **)&keys, 1u, 0);
                  CCFaultReporter::reportFault(v47, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0x3B00u, "handleDongleEventPacket", v48, v56, "reason=(0x%x)", v57);
                  return (uint64_t)AppleBCMWLANUtil::releaseOSObjectArray(&keys, (const OSString **)&values, (const OSObject **)1);
                }
                if (v49)
                {
                  (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                  if (CCLogStream::shouldLog())
                  {
                    size_t v53 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                    CCLogStream::logAlert(v53, "[dk] %s@%d:RX DMA STALL - entity=%d timeout=%u stalled_dma_bitmap=%u\n", "handleDongleEventPacket", 15008, *v43, v43[6], v43[7]);
                  }
                }
              }
              AppleBCMWLANCore::validateRxDMAStall(a1);
              goto LABEL_109;
            case 2:
              int v57 = (unsigned __int16)*v33;
              int v41 = -469793515;
              goto LABEL_108;
            case 3:
              int v57 = (unsigned __int16)*v33;
              int v41 = -469793514;
              goto LABEL_108;
            case 4:
              int v57 = (unsigned __int16)*v33;
              int v41 = -469793497;
              goto LABEL_108;
            case 6:
              int v57 = (unsigned __int16)*v33;
              int v41 = -469793496;
              goto LABEL_108;
            case 7:
              int v57 = (unsigned __int16)*v33;
              int v41 = -469793495;
              goto LABEL_108;
            case 8:
            case 0xE:
              if (v32 < 0x20) {
                goto LABEL_55;
              }
              int v56 = v26;
              int v57 = v24;
              uint64_t result = AppleBCMWLANCore::handleRxStallReasons(a1, (uint64_t)v30, &v57, &v56, v18);
              if (result) {
                return result;
              }
              goto LABEL_109;
            default:
              int v57 = (unsigned __int16)*v33;
              int v41 = -469793517;
              goto LABEL_108;
          }
        }
      }
LABEL_62:
      int v37 = v19[1];
      v25 += v37;
      if (v19[1]) {
        BOOL v38 = v25 + v37 > v23;
      }
      else {
        BOOL v38 = 1;
      }
      if (v38) {
        goto LABEL_69;
      }
    }
  }
  if (v15 != 1024)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        unint64_t v54 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v54, "[dk] %s@%d:Unexpected Dongle Event Type (%04x) Event Length (%hu)\n");
      }
    }
    goto LABEL_30;
  }
  if (v13 > 7)
  {
    uint64_t v20 = *(unsigned __int8 *)(v12 + 36);
    if (v20 <= 1)
    {
      unsigned int v21 = *(unsigned __int16 *)(v12 + 34);
      *(_DWORD *)(*((void *)a1 + 9) + 4 * v20 + 35504) += v21;
      if (!v20) {
        AppleBCMWLANCore::collectSPMIHEBResetStats((IOService *)a1, v21);
      }
    }
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        return CCLogStream::logAlert(v22, "[dk] %s@%d:SPMI reset ind dongle event core#0[%u] core#1[%u]\n");
      }
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        return CCLogStream::logAlert(v16, "[dk] %s@%d:Invalid SPMI reset indication message length\n");
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::validateRxDMAStall(AppleBCMWLANCore *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 9) + 5400);
  if (v2)
  {
    uint64_t v3 = (const OSMetaClassBase *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 752))(v2);
    uint64_t v4 = OSMetaClassBase::safeMetaCast(v3, (const OSMetaClass *)gAppleBCMWLANBusSkywalkMetaClass);
    if (v4)
    {
      release  = (uint64_t (*)(void))v4->__vftable[2].release;
      return release();
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (result)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          return CCLogStream::logAlert(v8, "[dk] %s@%d:validateRxDMAStall: no fBusSkywalk");
        }
      }
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        unint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        return CCLogStream::logAlert(v7, "[dk] %s@%d:validateRxDMAStall: no fProvider");
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleRxStallReasons(void *a1, uint64_t a2, _DWORD *a3, int *a4, uint64_t a5)
{
  unsigned int v10 = (*(uint64_t (**)(void))(**(void **)(a1[9] + 5400) + 368))(*(void *)(a1[9] + 5400));
  uint64_t v11 = a5 - a2 - 4;
  if (v10 < 0x112F || *a3 != 14)
  {
    int v13 = -469793484;
    if (v11 <= 31)
    {
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        BOOL v14 = 1;
        if (CCLogStream::shouldLog()) {
          goto LABEL_15;
        }
        return v14;
      }
      return 1;
    }
LABEL_11:
    BOOL v14 = 0;
    *a3  = *(_DWORD *)(a2 + 24);
    *a4  = v13;
    switch(*a3)
    {
      case 0:
        BOOL v14 = 0;
        int v15 = -469793483;
        goto LABEL_25;
      case 1:
        BOOL v14 = 0;
        int v15 = -469793482;
        goto LABEL_25;
      case 2:
        BOOL v14 = 0;
        int v17 = -469793481;
        if (v10 > 0x112E) {
          int v17 = -469793463;
        }
        *a4  = v17;
        ++*(void *)(a1[9] + 29888);
        goto LABEL_43;
      case 3:
        BOOL v14 = 0;
        int v18 = -469793480;
        if (v10 > 0x112E) {
          int v18 = -469793462;
        }
        *a4  = v18;
        ++*(void *)(a1[9] + 29880);
        goto LABEL_43;
      case 4:
        BOOL v14 = 0;
        int v15 = -469793479;
        if (v10 > 0x112E) {
          int v15 = -469793461;
        }
LABEL_25:
        *a4  = v15;
        goto LABEL_43;
      case 6:
        BOOL v14 = 0;
        int v19 = -469793478;
        if (v10 > 0x112E) {
          int v19 = -469793460;
        }
        *a4  = v19;
        ++*(void *)(a1[9] + 29872);
        goto LABEL_43;
      case 7:
        int v20 = -469793477;
        if (v10 > 0x112E) {
          int v20 = -469793459;
        }
        *a4  = v20;
        ++*(void *)(a1[9] + 29896);
        goto LABEL_42;
      case 8:
        int v21 = -469793476;
        if (v10 > 0x112E) {
          int v21 = -469793464;
        }
        *a4  = v21;
        ++*(void *)(a1[9] + 29904);
        v31[0]  = 0;
        mach_continuous_time();
        absolutetime_to_nanoseconds();
        uint64_t v22 = a1[9];
        uint64_t v23 = *(void *)(v22 + 14200);
        BOOL v24 = v23 == 0;
        unint64_t v25 = -v23;
        if (v24)
        {
          if (v25 >= 0x5265C01)
          {
            *(void *)(v22 + 14200)  = 0;
            *(_DWORD *)(a1[9] + 14208)  = 0;
            uint64_t v22 = a1[9];
          }
          BOOL v29 = *(_DWORD *)(v22 + 14208) != 0;
          if (IO80211BssManager::isAssociated(*(IO80211BssManager **)(v22 + 5440)))
          {
            memset(v31, 0, sizeof(v31));
            int v32 = 0;
            AppleBCMWLANLQM::getExtCCAStats(*(void *)(a1[9] + 5608), (uint64_t)v31);
            IO80211BssManager::getCurrentChannel();
            if (SBYTE6(v31[0]) >= 41 && SWORD2(v31[0]) == 43690) {
              BOOL v29 = 1;
            }
          }
          BOOL v14 = v29;
          if (!v29)
          {
            BOOL v14 = 0;
            ++*(_DWORD *)(a1[9] + 14208);
          }
LABEL_43:
          if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
          {
            (*(void (**)(void *))(*a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v30 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
              convertAppleBCMWLANReturnToString(*a4);
              CCLogStream::logAlert(v30, "[dk] %s@%d:Rx Stall Reason Code %s- NumPkts Considered=%u, NumPkts Dropped=%u, Alert Threshold=%u\n");
            }
          }
        }
        else
        {
          if (!(*(uint64_t (**)(void *))(*a1 + 1848))(a1)) {
            return 1;
          }
          (*(void (**)(void *))(*a1 + 1848))(a1);
          BOOL v14 = 1;
          if (CCLogStream::shouldLog())
          {
            int v26 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
            CCLogStream::logAlert(v26, "[dk] %s@%d:HC currentTime %llu is less than resetTime %llu\n");
          }
        }
        break;
      case 9:
        int v27 = -469793475;
        if (v10 > 0x112E) {
          int v27 = -469793458;
        }
        *a4  = v27;
        ++*(void *)(a1[9] + 29912);
LABEL_42:
        BOOL v14 = 1;
        goto LABEL_43;
      default:
        goto LABEL_43;
    }
    return v14;
  }
  if (v11 > 31)
  {
    int v13 = -469793465;
    goto LABEL_11;
  }
  if (!(*(uint64_t (**)(void *))(*a1 + 1848))(a1)) {
    return 1;
  }
  (*(void (**)(void *))(*a1 + 1848))(a1);
  BOOL v14 = 1;
  if (CCLogStream::shouldLog())
  {
LABEL_15:
    uint64_t v16 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
    CCLogStream::logAlert(v16, "[dk] %s@%d:Buffer overflow\n");
  }
  return v14;
}

uint64_t AppleBCMWLANCore::isCachedSleepingEventBitFieldSet(AppleBCMWLANCore *this, unsigned int a2)
{
  uint64_t v3 = *(IOLock **)(*((void *)this + 9) + 1200);
  if (!v3) {
    return 0;
  }
  IOLockLock(v3);
  uint64_t v5 = *((void *)this + 9);
  uint64_t v6 = (*(unsigned __int8 *)(v5 + ((unint64_t)a2 >> 3) + 1166) >> (a2 & 7)) & 1;
  IOLockUnlock(*(IOLock **)(v5 + 1200));
  return v6;
}

BOOL AppleBCMWLANCore::isHostAssignedInterfaceIndex(AppleBCMWLANCore *this)
{
  return *(_DWORD *)(*((void *)this + 9) + 780) > 4u;
}

BOOL AppleBCMWLANCore::isEventForInterface(uint64_t a1, IO80211SkywalkInterface *this, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 72);
  if (*(_DWORD *)(v5 + 780) < 5u)
  {
    uint64_t v8 = *(IO80211SkywalkInterface **)(v5 + 11312);
    if (v8) {
      BOOL v9 = v8 == this;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9)
    {
      if (AppleBCMWLANProximityInterface::getBssCfgId(this) == *(unsigned __int8 *)(a3 + 47)) {
        return 1;
      }
      uint64_t v5 = *(void *)(a1 + 72);
    }
    unsigned int v10 = *(IO80211SkywalkInterface **)(v5 + 29800);
    if (v10) {
      BOOL v11 = v10 == this;
    }
    else {
      BOOL v11 = 0;
    }
    if (v11)
    {
      if (AppleBCMWLANNANInterface::getBssCfgId(this) == *(unsigned __int8 *)(a3 + 47)) {
        return 1;
      }
      uint64_t v5 = *(void *)(a1 + 72);
    }
    uint64_t v12 = *(IO80211SkywalkInterface **)(v5 + 11320);
    if (v12) {
      BOOL v13 = v12 == this;
    }
    else {
      BOOL v13 = 0;
    }
    return v13 && AppleBCMWLANIO80211APSTAInterface::getBssCfgId(this) == *(unsigned __int8 *)(a3 + 47);
  }
  int v6 = *(unsigned __int8 *)(a3 + 46);
  return IO80211SkywalkInterface::getInterfaceId(this) == v6;
}

void *AppleBCMWLANCore::checkActionFrameCompleteOverdue(void *this)
{
  if (*(unsigned char *)(this[9] + 17360))
  {
    if ((uint64_t v1 = this,
          mach_continuous_time(),
          this  = (void *)absolutetime_to_nanoseconds(),
          uint64_t v2 = v1[9],
          unint64_t v3 = *(void *)(v2 + 17368),
          v3 <= 0xB2F4FC07949)
      && 0xB2F4FC07949 - v3 > 0x12C
      || v3 > 0xB2F4FC07949 && 0xB2F4FC07948 - v3 >= 0x12D)
    {
      *(unsigned char *)(v2 + 17360)  = 0;
      if ((*(uint64_t (**)(void *))(*v1 + 1848))(v1))
      {
        (*(void (**)(void *))(*v1 + 1848))(v1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(void *))(*v1 + 1848))(v1);
          CCLogStream::logAlert(v4, "[dk] %s@%d:Found action frame completion overdue start=%llu(ms) now=%llu(ms)\n", "checkActionFrameCompleteOverdue", 15338, *(void *)(v1[9] + 17368), 0xB2F4FC07949);
        }
      }
      return (void *)CCFaultReporter::reportFault(*(CCFaultReporter **)(v1[9] + 5544), 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0x3BEBu, "checkActionFrameCompleteOverdue", 0, -469793493, 0);
    }
  }
  return this;
}

uint64_t AppleBCMWLANCore::getTransDisabledFlags(AppleBCMWLANCore *this, unsigned __int8 *a2, unint64_t a3)
{
  if (!a2 || !a3)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        BOOL v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v9, "[dk] %s@%d:Invalid argument\n", "getTransDisabledFlags", 15350);
      }
    }
    return 0;
  }
  if (a3 < 7) {
    return 0;
  }
  BOOL v5 = *((_WORD *)a2 + 1) == 28496 && a2[4] == 154;
  if (!v5 || a2[5] != 32) {
    return 0;
  }
  uint64_t v6 = a2[6];
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      unint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v7, "[dk] %s@%d:Transition mode disabled 0x%x\n", "getTransDisabledFlags", 15355, a2[6]);
    }
  }
  return v6;
}

uint64_t AppleBCMWLANCore::updateTransitionDisabledInfo(AppleBCMWLANCore *this, uint64_t a2)
{
  if (!a2 || (uint64_t v4 = *(unsigned int *)(a2 + 20), v4 <= 1))
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        BOOL v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logCrit(v5, "[dk] %s@%d: ERROR: invalid Length\n");
      }
    }
    return 0;
  }
  uint64_t v6 = v4 + 47 + a2;
  if (__CFADD__(v4 + 47, a2)
    || (uint64_t v7 = a2 + 48, a2 + 49 < a2)
    || a2 == -49
    || (a2 + 49 <= v6 ? (BOOL v8 = v7 < a2) : (BOOL v8 = 1), !v8 ? (v9 = v6 < v7) : (v9 = 1), v9))
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logCrit(v18, "[dk] %s@%d: ERROR: Boundary condition detected\n");
      }
    }
    return 0;
  }
  uint64_t v10 = v4 - 1 + v7;
  BOOL v11 = __CFADD__(v4 - 1, v7);
  unsigned int v12 = *(unsigned __int8 *)(a2 + 49) + 2;
  if (v12 > v4) {
    return 0;
  }
  uint64_t v13 = 0;
  BOOL v14 = (unsigned __int8 *)(a2 + 48);
  do
  {
    if (*v14 == 221)
    {
      TransDisabledFlags  = AppleBCMWLANCore::getTransDisabledFlags(this, v14, v14[1] + 2);
      if (TransDisabledFlags) {
        uint64_t v13 = TransDisabledFlags;
      }
      else {
        uint64_t v13 = v13;
      }
      LODWORD(v4)  = *(_DWORD *)(a2 + 20);
    }
    if (v4 - v12 < 2) {
      break;
    }
    if (v11) {
      break;
    }
    BOOL v14 = (unsigned __int8 *)(v7 + v12);
    uint64_t v16 = v14 + 1;
    if (v14 == (unsigned __int8 *)-1) {
      break;
    }
    if ((uint64_t)v16 < v7) {
      break;
    }
    if ((uint64_t)v16 > v10) {
      break;
    }
    if (v7 > (uint64_t)v14) {
      break;
    }
    if (v10 < (uint64_t)v14) {
      break;
    }
    v12 += v14[1] + 2;
  }
  while (v12 <= v4);
  return v13;
}

uint64_t AppleBCMWLANCore::handleScanEvent(AppleBCMWLANCore *a1, uint64_t a2)
{
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  uint64_t v4 = *((void *)a1 + 9);
  int v5 = *(unsigned __int8 *)(v4 + 208);
  unint64_t v85 = 0xAAAAAAAAAAAAAAAALL;
  int v86 = -1431655766;
  CurrentBSS  = AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(v4 + 5440));
  uint64_t result = AppleBCMWLANScanAdapter::handleScanEvent(*(void *)(*((void *)a1 + 9) + 5432), a2, v7, v8);
  int v10 = *(_DWORD *)(a2 + 12);
  if (v10 != 3)
  {
    if (v10 == 2)
    {
      uint64_t v20 = *((void *)a1 + 9);
      if (*(_DWORD *)(v20 + 17628) == 2)
      {
        AppleBCMWLANRoamAdapter::getRoamCacheAsync(*(AppleBCMWLANRoamAdapter **)(v20 + 5576));
        uint64_t v21 = *((void *)a1 + 9) + 600 * *(unsigned int *)(*((void *)a1 + 9) + 14076);
        ++*(unsigned char *)(v21 + 12682);
        *(unsigned char *)(*((void *)a1 + 9) + 14058)  = *(unsigned char *)(*((void *)a1 + 9)
                                                             + 600 * *(unsigned int *)(*((void *)a1 + 9) + 14076)
                                                             + 12682);
        uint64_t v20 = *((void *)a1 + 9);
      }
      uint64_t result = (uint64_t)AppleBCMWLANTxPowerManager::dynTxSDBUnPause(*(AppleBCMWLANCore ****)(v20 + 5536), 1);
      *(_DWORD *)(*((void *)a1 + 9) + 17628)  = 0;
    }
    else if (v10 == 1)
    {
      if (*(_DWORD *)(a2 + 20) > 0xBu)
      {
        *(_DWORD *)(*((void *)a1 + 9) + 17628)  = *(_DWORD *)(a2 + 52);
        AppleBCMWLANTxPowerManager::dynTxSDBPause(*(AppleBCMWLANCore ****)(*((void *)a1 + 9) + 5536), 1);
        if (2 * (*(unsigned __int16 *)(a2 + 58) + (unint64_t)*(unsigned __int16 *)(a2 + 56)) + 12 <= *(unsigned int *)(a2 + 20))
        {
          uint64_t result = IO80211BssManager::isAssociated(*(IO80211BssManager **)(*((void *)a1 + 9) + 5440));
          int v55 = 0;
          if (result && CurrentBSS)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)CurrentBSS + 256))(CurrentBSS);
            int v55 = result;
          }
          if (*(_DWORD *)(a2 + 48) >= 2u)
          {
            unsigned int v65 = *(_DWORD *)(a2 + 56);
            if (v65)
            {
              int v66 = 0;
              unsigned int v67 = 0;
              int v83 = v5;
              do
              {
                size_t v68 = (unsigned __int16 *)(a2 + 60 + v67);
                if (*v68 == v5)
                {
                  unsigned int v69 = v68[1];
                  if (v69 >= 2)
                  {
                    unsigned __int8 v70 = 0;
                    uint64_t v71 = v68 + 2;
                    unsigned int v72 = v69 >> 1;
                    do
                    {
                      uint64_t v73 = v70;
                      AppleBCMWLANChanSpec::getAppleChannelSpec(*(int ***)(*((void *)a1 + 9) + 17576), v71[v70]);
                      uint64_t result = ChanSpecConvToApple80211Channel();
                      if (HIDWORD(v85) != v55) {
                        uint64_t result = AppleBCMWLANCore::isPassiveChanSpec(a1, v71[v73]);
                      }
                      unsigned __int8 v70 = v73 + 1;
                    }
                    while (v72 > (v73 + 1));
                    unsigned int v65 = *(_DWORD *)(a2 + 56);
                    int v5 = v83;
                  }
                }
                v67 += ((v68[1] + 3) & 0x1FFFC) + 4;
                ++v66;
              }
              while (v65 > (unsigned __int16)v66);
            }
          }
          else
          {
            unsigned __int16 v56 = *(_WORD *)(a2 + 56);
            if (v5)
            {
              unsigned int v57 = *(unsigned __int16 *)(a2 + 56);
              v56 += *(_WORD *)(a2 + 58);
            }
            else
            {
              unsigned int v57 = 0;
            }
            if (v57 < v56)
            {
              uint64_t v75 = a2 + 60;
              uint64_t v76 = v57;
              do
              {
                AppleBCMWLANChanSpec::getAppleChannelSpec(*(int ***)(*((void *)a1 + 9) + 17576), *(unsigned __int16 *)(v75 + 2 * v76));
                uint64_t result = ChanSpecConvToApple80211Channel();
                if (HIDWORD(v85) != v55) {
                  uint64_t result = AppleBCMWLANCore::isPassiveChanSpec(a1, *(unsigned __int16 *)(v75 + 2 * v76));
                }
                ++v76;
              }
              while (v56 != (unsigned __int16)v76);
            }
          }
        }
        else
        {
          uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (result)
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            uint64_t result = CCLogStream::shouldLog();
            if (result)
            {
              uint64_t v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              return CCLogStream::logAlert(v22, "[dk] %s@%d:ERROR: Invalid event data length %d, num channels slice0 %d, slice1 %d \n");
            }
          }
        }
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (result)
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            BOOL v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            return CCLogStream::logAlert(v11, "[dk] %s@%d:ERROR: Invalid event data length %d \n");
          }
        }
      }
    }
    return result;
  }
  uint64_t v12 = *(unsigned int *)(a2 + 20) + 48;
  uint64_t v87 = a2;
  uint64_t v88 = v12;
  IO80211BufferCursor::_crop(&v87, 0x30uLL, 0xFFFFFFFFFFFFFFFFLL, v84);
  uint64_t v13 = IO80211BufferCursor::asType<wl_roam_11kvr_nbr_rpt_req_v1>(v84, 0, (const char *)0xC);
  uint64_t v15 = v13 + (v14 >> 32);
  if (__CFADD__(v13, v14 >> 32)) {
    uint64_t v16 = (v14 >> 63) + 1;
  }
  else {
    uint64_t v16 = v14 >> 63;
  }
  uint64_t v17 = v16 << 63 >> 63;
  if (v17 != v16 || v17 < 0) {
    goto LABEL_148;
  }
  if (!v15)
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v23 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        return CCLogStream::logAlert(v23, "[dk] %s@%d:ERROR: Event Payload incorrect: datalen  = %d\n");
      }
    }
    return result;
  }
  uint64_t v18 = v14;
  if (IO80211BssManager::isAssociated(*(IO80211BssManager **)(*((void *)a1 + 9) + 5440))) {
    BOOL v19 = CurrentBSS == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (v19) {
    int v24 = 0;
  }
  else {
    int v24 = (*(uint64_t (**)(uint64_t))(*(void *)CurrentBSS + 256))(CurrentBSS);
  }
  if (v18 < 0 || HIDWORD(v18) + 12 > v18) {
LABEL_150:
  }
    os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"bounded_ptr<T>::operator->: Accessing a member through this pointer would access memory outside of the bounds set originally", (const char *)v14);
  if (*(_DWORD *)v15 <= 1u)
  {
    int v25 = *(unsigned __int16 *)(v15 + 8);
    int v26 = *(unsigned __int16 *)(v15 + 10);
    if ((v26 + v25) >= 0x191)
    {
      uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (result)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        uint64_t result = CCLogStream::shouldLog();
        if (result) {
          goto LABEL_37;
        }
      }
      return result;
    }
    unsigned __int8 v58 = 0;
    unsigned __int8 v59 = 0;
    if (v5) {
      uint64_t v60 = *(unsigned __int16 *)(v15 + 8);
    }
    else {
      uint64_t v60 = 0;
    }
    if (!v5) {
      LOWORD(v26)  = 0;
    }
    unsigned __int16 v61 = v25 + v26;
    if (v60 < v61)
    {
      unsigned __int8 v59 = 0;
      unsigned __int8 v58 = 0;
      uint64_t v62 = v15 + 12;
      int v63 = v61;
      do
      {
        AppleBCMWLANChanSpec::getAppleChannelSpec(*(int ***)(*((void *)a1 + 9) + 17576), *(unsigned __int16 *)(v62 + 2 * v60));
        ChanSpecConvToApple80211Channel();
        if (HIDWORD(v85) != v24)
        {
          if (AppleBCMWLANCore::isPassiveChanSpec(a1, *(unsigned __int16 *)(v62 + 2 * v60))) {
            ++v59;
          }
          else {
            ++v58;
          }
        }
        ++v60;
      }
      while (v63 != (unsigned __int16)v60);
    }
    if (IO80211Controller::isLQMOSLOGEnabled(a1))
    {
      io80211_os_log();
      if (!IO80211Controller::isLQMIOLOGEnabled(a1))
      {
LABEL_125:
        uint64_t result = IO80211Controller::isLQMCCLOGEnabled(a1);
        if (result) {
          return IO80211Controller::logLQMToCC(a1, "LQM-WIFI: SCAN_ADD Event:V%d currentSlice:%d num_chan_slice0:%d num_chan_slice1:%d passiveCnt:%d activeCnt:%d\n");
        }
        return result;
      }
    }
    else if ((IO80211Controller::isLQMIOLOGEnabled(a1) & 1) == 0)
    {
      goto LABEL_125;
    }
    IOLog("LQM-WIFI: SCAN_ADD Event:V%d currentSlice:%d num_chan_slice0:%d num_chan_slice1:%d passiveCnt:%d activeCnt:%d\n", v77, v5, *(unsigned __int16 *)(v15 + 8), *(unsigned __int16 *)(v15 + 10), v59, v58);
    goto LABEL_125;
  }
  if (*(_DWORD *)v15 != 2)
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint16_t v64 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        return CCLogStream::logAlert(v64, "[dk] %s@%d:ERROR: Incorrect scan add version %d\n");
      }
    }
    return result;
  }
  IO80211BufferCursor::_crop(&v87, 0x30uLL, 0xFFFFFFFFFFFFFFFFLL, v84);
  uint64_t result = IO80211BufferCursor::asType<wl_roam_11kvr_nbr_rpt_resp_v1>(v84, 0, (const char *)0x10);
  unsigned int v28 = (unsigned int *)(result + (v14 >> 32));
  uint64_t v29 = __CFADD__(result, v14 >> 32) ? (v14 >> 63) + 1 : v14 >> 63;
  uint64_t v30 = v29 << 63 >> 63;
  if (v30 != v29 || v30 < 0) {
LABEL_148:
  }
    os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", (const char *)v14);
  if (!v28)
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v74 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        return CCLogStream::logAlert(v74, "[dk] %s@%d:ERROR: Could not materialize the Scan event from FW\n");
      }
    }
    return result;
  }
  if (v14 < 0 || HIDWORD(v14) + 16 > v14) {
    goto LABEL_150;
  }
  if (!v28[2])
  {
    LOWORD(v81)  = 0;
    LOWORD(v82)  = 0;
    LOWORD(v34)  = 0;
    unsigned __int8 v32 = 0;
    unsigned __int8 v31 = 0;
    unsigned int v80 = 0;
LABEL_138:
    if (a1)
    {
      if (IO80211Controller::isLQMOSLOGEnabled(a1)) {
        io80211_os_log();
      }
      if (IO80211Controller::isLQMIOLOGEnabled(a1)) {
        IOLog("LQM-WIFI: SCAN_ADD Event:V%d passiveChannelCnt=%d ActiveChannelCnt=%d total channel cnt=%d Num2G=%d Num5G=%d Num6G=%d\n", *v28, v32, v31, v80, (unsigned __int16)v34, (unsigned __int16)v82, (unsigned __int16)v81);
      }
      uint64_t result = IO80211Controller::isLQMCCLOGEnabled(a1);
      if (result) {
        return IO80211Controller::logLQMToCC(a1, "LQM-WIFI: SCAN_ADD Event:V%d passiveChannelCnt=%d ActiveChannelCnt=%d total channel cnt=%d Num2G=%d Num5G=%d Num6G=%d\n", *v28);
      }
    }
    return result;
  }
  unsigned int v80 = 0;
  int v81 = 0;
  unsigned __int8 v31 = 0;
  unsigned __int8 v32 = 0;
  int v33 = 0;
  int v82 = 0;
  int v34 = 0;
  int v35 = 0;
  unsigned int v36 = 60;
  unsigned int v78 = (unsigned int *)(result + (v14 >> 32));
  while (1)
  {
    IO80211BufferCursor::_crop(&v87, v36, 0xFFFFFFFFFFFFFFFFLL, v84);
    uint64_t result = IO80211BufferCursor::asType<ether_addr>(v84, 0, (const char *)6);
    int v37 = (unsigned __int16 *)(result + (v14 >> 32));
    if (__CFADD__(result, v14 >> 32)) {
      uint64_t v38 = (v14 >> 63) + 1;
    }
    else {
      uint64_t v38 = v14 >> 63;
    }
    uint64_t v39 = v38 << 63 >> 63;
    if (v39 != v38 || v39 < 0) {
      goto LABEL_148;
    }
    if (!v37) {
      goto LABEL_138;
    }
    if (v14 < 0 || HIDWORD(v14) + 6 > v14) {
      goto LABEL_150;
    }
    unsigned int v40 = v36 + 4;
    unsigned int v41 = v37[1];
    if (v37[1]) {
      break;
    }
LABEL_86:
    unsigned int v36 = ((v41 + 3) & 0x1FFFC) + v40;
    if (v28[2] <= (unsigned __int16)++v35) {
      goto LABEL_138;
    }
  }
  if (v33 + (v41 >> 1) < 0x191)
  {
    int v42 = *v37;
    if (v42 == 2) {
      unsigned int v43 = v41 >> 1;
    }
    else {
      unsigned int v43 = 0;
    }
    int v44 = v43 + v81;
    int v45 = v82 + (v41 >> 1);
    if (v42) {
      int v45 = v82;
    }
    else {
      int v44 = v81;
    }
    if (v42 == 1) {
      int v46 = v82;
    }
    else {
      int v46 = v45;
    }
    if (v42 == 1)
    {
      v34 += v41 >> 1;
      int v47 = v81;
    }
    else
    {
      int v47 = v44;
    }
    int v81 = v47;
    int v82 = v46;
    unsigned int v80 = v41 >> 1;
    if (v41 >= 2)
    {
      int v79 = v34;
      if (v41 >> 1 <= 1) {
        __int16 v48 = 1;
      }
      else {
        __int16 v48 = v41 >> 1;
      }
      unsigned __int16 v49 = v48 + v33;
      unsigned int v50 = v36 + 4;
      do
      {
        IO80211BufferCursor::_crop(&v87, v50, 0xFFFFFFFFFFFFFFFFLL, v84);
        uint64_t result = IO80211BufferCursor::asType<unsigned short>(v84, 0, (const char *)2);
        uint64_t v51 = (unsigned __int16 *)(result + (v14 >> 32));
        if (__CFADD__(result, v14 >> 32)) {
          uint64_t v52 = (v14 >> 63) + 1;
        }
        else {
          uint64_t v52 = v14 >> 63;
        }
        uint64_t v53 = v52 << 63 >> 63;
        if (v53 != v52 || v53 < 0) {
          goto LABEL_148;
        }
        if (!v51) {
          break;
        }
        if (v14 < 0 || HIDWORD(v14) + 2 > v14) {
          os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"bounded_ptr<T>::operator*: Dereferencing this pointer would access memory outside of the bounds set originally", (const char *)v14);
        }
        isPassiveuint64_t ChanSpec = AppleBCMWLANCore::isPassiveChanSpec(a1, *v51);
        v50 += 2;
        v32 += isPassiveChanSpec;
        v31 += isPassiveChanSpec ^ 1;
        uint64_t result = AppleBCMWLANChanSpec::getAppleChannelSpec(*(int ***)(*((void *)a1 + 9) + 17576), *v51);
        ++v33;
      }
      while (v49 != (unsigned __int16)v33);
      unsigned int v28 = v78;
      int v34 = v79;
    }
    goto LABEL_86;
  }
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
  if (result)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
LABEL_37:
      int v27 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      return CCLogStream::logAlert(v27, "[dk] %s@%d:ERROR: Channels in scan list %d > max %d\n");
    }
  }
  return result;
}

_DWORD *AppleBCMWLANCore::handleCCAChanQualEvent(IO80211Controller *a1, uint64_t a2)
{
  unint64_t v44 = 0xAAAAAAAAAAAAAAAALL;
  unsigned int v45 = -1431655766;
  unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
  int v43 = -1431655766;
  uint64_t v4 = (char *)IOMallocZeroData();
  uint64_t result = (_DWORD *)IOMallocZeroData();
  if (result)
  {
    uint64_t v6 = result;
    unint64_t v41 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1)  = 0xAAAAAAAAAAAAAAAALL;
    long long v39 = v7;
    long long v40 = v7;
    int v38 = 3;
    if (v4)
    {
      unsigned int v8 = *(_DWORD *)(a2 + 20);
      if (v8 <= 7)
      {
        if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            int v34 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logAlert(v34, "[dk] %s@%d:handleCCAChanQualEvent: Invalid wle message length=%u, too small to hold event length=%u\n");
          }
        }
LABEL_7:
        BOOL v9 = *(CCFaultReporter **)(*((void *)a1 + 9) + 5544);
        if (v9) {
          CCFaultReporter::reportFault(v9, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0x6141u, "handleCCAChanQualEvent", 0, -469793488, 0);
        }
        goto LABEL_24;
      }
      unsigned int v10 = *(unsigned __int16 *)(a2 + 50);
      if (v10 <= 0xFF)
      {
        if (v10 < 3)
        {
          unsigned int v11 = 20;
          goto LABEL_27;
        }
      }
      else
      {
        if (*(unsigned __int16 *)(a2 + 50) <= 0x3FFu)
        {
          if (v10 != 256)
          {
            if (v10 != 512) {
              goto LABEL_49;
            }
            goto LABEL_23;
          }
          unsigned int v11 = 28;
LABEL_27:
          if (v8 < v11 || v8 >= 0x1D)
          {
            if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
            {
              (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
              if (CCLogStream::shouldLog())
              {
                uint64_t v18 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                CCLogStream::logAlert(v18, "[dk] %s@%d:handleCCAChanQualEvent: Invalid wle message length=%u, expected_min=%u expected_max=%u\n");
              }
            }
            goto LABEL_7;
          }
          memcpy(result, (const void *)(a2 + 48), v11);
          long long v39 = 0u;
          long long v40 = 0u;
          unint64_t v41 = 0;
          BYTE4(v39)  = 1;
          LODWORD(v39)  = 16;
          AppleChannelSpec  = (unsigned __int16)AppleBCMWLANChanSpec::getAppleChannelSpec(*(int ***)(*((void *)a1 + 9) + 17576), *((unsigned __int16 *)v6 + 2));
          ChanSpecConvToApple80211Channel();
          *((void *)&v39 + 1)  = v44;
          LODWORD(v40)  = v45;
          IO80211BssManager::getCurrentBand();
          unsigned int v13 = *((unsigned __int16 *)v6 + 1);
          if (v13 > 1)
          {
            if (v13 == 2)
            {
              IO80211Controller::setChanNoiseFloorLTE();
              goto LABEL_24;
            }
            if (v13 == 256)
            {
              int v20 = v6[4];
              int v21 = v6[5];
              unsigned int v23 = v6[2];
              int v22 = v6[3];
              BOOL v24 = __CFADD__(v22, v20);
              int v25 = v22 + v20;
              char v26 = v24;
              unsigned int v27 = v25 + v21;
              BOOL v28 = __CFADD__(v25, v21);
              v37[0]  = v6[2];
              v37[1]  = v27;
              v37[2]  = v6[6];
              if (!v23)
              {
                if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
                {
                  (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                  if (CCLogStream::shouldLog())
                  {
                    unsigned __int8 v32 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                    CCLogStream::logAlert(v32, "[dk] %s@%d:handleCCAChanQualEvent: %d CCA busy zero duration\n");
                  }
                }
                goto LABEL_24;
              }
              if ((v26 & 1) != 0 || v28 || ((100 * v27) & 0xFFFFFFFF00000000) != 0)
              {
                if (!(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1)) {
                  goto LABEL_24;
                }
                (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                if (!CCLogStream::shouldLog()) {
                  goto LABEL_24;
                }
              }
              else
              {
                AppleBCMWLANChanSpec::convToAscii(AppleChannelSpec, v4, 0x20u);
                io80211_os_log();
                io80211_os_log();
                if (v23 > 0x2710 || v23 < v27) {
                  goto LABEL_24;
                }
                if (((100 * v6[5]) & 0xFFFFFFFF00000000) == 0
                  && ((100 * v6[4]) & 0xFFFFFFFF00000000) == 0
                  && ((100 * v6[3]) & 0xFFFFFFFF00000000) == 0)
                {
                  IO80211Controller::setChanExtendedCCA();
                  if (IO80211BssManager::getCurrentChannel()
                    || HIDWORD(v42) != ChanSpecGetPrimaryChannel()
                    || v38 != AppleChannelSpec >> 14)
                  {
                    goto LABEL_24;
                  }
                  uint64_t v29 = *(void *)(*((void *)a1 + 9) + 5608);
                  uint64_t v30 = v37;
                  goto LABEL_81;
                }
                if (!(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1)) {
                  goto LABEL_24;
                }
                (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                if (!CCLogStream::shouldLog()) {
                  goto LABEL_24;
                }
              }
              unsigned int v36 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
              CCLogStream::logEmergency(v36, "[dk] %s@%d: Overflow detected: cca_busy.congest[%u], cca_busy_ext.congest_ibss[%u], cca_busy_ext.congest_obss[%u], cca_busy_ext.interference[%u]\n");
            }
          }
          else
          {
            if (*((_WORD *)v6 + 1))
            {
              if (v13 != 1) {
                goto LABEL_24;
              }
              if (IO80211Controller::isLQMOSLOGEnabled(a1))
              {
                AppleBCMWLANChanSpec::convToAscii(AppleChannelSpec, v4, 0x20u);
                io80211_os_log();
              }
              if (IO80211Controller::isLQMIOLOGEnabled(a1))
              {
                uint64_t v14 = AppleBCMWLANChanSpec::convToAscii(AppleChannelSpec, v4, 0x20u);
                IOLog("LQM-WIFI: %s Noise %d\n", v14, v6[2]);
              }
              if (IO80211Controller::isLQMCCLOGEnabled(a1))
              {
                uint64_t v15 = AppleBCMWLANChanSpec::convToAscii(AppleChannelSpec, v4, 0x20u);
                IO80211Controller::logLQMToCC(a1, "LQM-WIFI: %s Noise %d\n", v15, v6[2]);
              }
              IO80211Controller::setChanNoiseFloor();
              if (IO80211BssManager::getCurrentChannel()) {
                goto LABEL_24;
              }
              if (HIDWORD(v42) != ChanSpecGetPrimaryChannel()) {
                goto LABEL_24;
              }
              if (v38 != AppleChannelSpec >> 14) {
                goto LABEL_24;
              }
              uint64_t v16 = *(void *)(*((void *)a1 + 9) + 11304);
              if (!v16
                || ((*(uint64_t (**)(uint64_t, unint64_t, void, void))(*(void *)v16 + 736))(v16, v44, v45, (int)v6[2]) & 1) != 0)
              {
                goto LABEL_24;
              }
              if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
              {
                (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v17 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                  CCLogStream::logEmergency(v17, "[dk] %s@%d:fInfraSkywalkInterface->setInterfaceNF failed\n", "handleCCAChanQualEvent", 24792);
                }
              }
              goto LABEL_7;
            }
            if (!v6[2])
            {
              if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
              {
                (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  int v33 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                  CCLogStream::logAlert(v33, "[dk] %s@%d:handleCCAChanQualEvent: %d zero CCA busy duration\n");
                }
              }
              goto LABEL_24;
            }
            if (((100 * v6[3]) & 0xFFFFFFFF00000000) != 0)
            {
              if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
              {
                (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  int v35 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                  CCLogStream::logEmergency(v35, "[dk] %s@%d: Overflow detected: cca_busy.congest[%u]\n");
                }
              }
              goto LABEL_24;
            }
            AppleBCMWLANChanSpec::convToAscii(AppleChannelSpec, v4, 0x20u);
            io80211_os_log();
            unsigned int v31 = v6[2];
            if (v31 <= 0x2710 && v31 >= v6[3])
            {
              IO80211Controller::setChanCCA();
              if (!IO80211BssManager::getCurrentChannel()
                && HIDWORD(v42) == ChanSpecGetPrimaryChannel()
                && v38 == AppleChannelSpec >> 14)
              {
                uint64_t v29 = *(void *)(*((void *)a1 + 9) + 5608);
                uint64_t v30 = v6 + 2;
LABEL_81:
                AppleBCMWLANLQM::updateCCA(v29, v30);
              }
            }
          }
LABEL_24:
          IOFreeData();
          return (_DWORD *)IOFreeData();
        }
        if (v10 == 1024 || v10 == 1280)
        {
LABEL_23:
          AppleBCMWLANCore::handleCCAOnlyChanQualEvent(a1, a2);
          goto LABEL_24;
        }
      }
LABEL_49:
      if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          BOOL v19 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logAlert(v19, "[dk] %s@%d:handleCCAChanQualEvent: Invalid wle message,unknown message ID=%u\n");
        }
      }
      goto LABEL_7;
    }
    return (_DWORD *)IOFreeData();
  }
  else if (v4)
  {
    return (_DWORD *)IOFreeData();
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleTxStatusErrEvent(void *a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(AppleBCMWLANIOReportingCore **)(a1[9] + 5512);
  if (v4) {
    BOOL v5 = (*(_DWORD *)(a2 + 8) & 1) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    AppleBCMWLANIOReportingCore::incrementBackoffStuckDetected(v4);
  }
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 1848))(a1);
  if (result)
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      long long v7 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      return CCLogStream::logAlert(v7, "[dk] %s@%d:handleTxStatusErrEvent: PHY TX Error event from FW: 0x%x\n", "handleTxStatusErrEvent", 24661, v3);
    }
  }
  return result;
}

AppleBCMWLANCore ***AppleBCMWLANCore::handleWeightAvgLQMEvent(IO80211Controller *a1, uint64_t a2)
{
  memset(v36, 170, sizeof(v36));
  if ((IO80211BssManager::isAssociated(*(IO80211BssManager **)(*((void *)a1 + 9) + 5440)) & 1) == 0)
  {
    if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v35 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logInfo(v35, "[dk] %s@%d:Not associated, will drop\n", "handleWeightAvgLQMEvent", 23691);
      }
    }
  }
  unsigned int v4 = *(_DWORD *)(a2 + 20);
  if (v4 <= 3)
  {
    uint64_t result = (AppleBCMWLANCore ***)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
    if (result)
    {
      (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      uint64_t result = (AppleBCMWLANCore ***)CCLogStream::shouldLog();
      if (result)
      {
        unsigned int v31 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        return (AppleBCMWLANCore ***)CCLogStream::logAlert(v31, "[dk] %s@%d:Invalid WLE size[%d]\n");
      }
    }
  }
  else if (((a2 + 48) & 3) != 0)
  {
    uint64_t result = (AppleBCMWLANCore ***)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
    if (result)
    {
      (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      uint64_t result = (AppleBCMWLANCore ***)CCLogStream::shouldLog();
      if (result)
      {
        unsigned __int8 v32 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        return (AppleBCMWLANCore ***)CCLogStream::logAlert(v32, "[dk] %s@%d:event_weight_avg_lqm alignment failure\n");
      }
    }
  }
  else
  {
    unsigned int v5 = *(unsigned __int16 *)(a2 + 50);
    unsigned int v6 = v5 - 4;
    if (v5 <= 4)
    {
      uint64_t result = (AppleBCMWLANCore ***)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      if (result)
      {
        (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        uint64_t result = (AppleBCMWLANCore ***)CCLogStream::shouldLog();
        if (result)
        {
          int v33 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          return (AppleBCMWLANCore ***)CCLogStream::logAlert(v33, "[dk] %s@%d:Invalid event_weight_avg_lqm->len  = %d\n");
        }
      }
    }
    else if (v4 < v5)
    {
      uint64_t result = (AppleBCMWLANCore ***)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      if (result)
      {
        (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        uint64_t result = (AppleBCMWLANCore ***)CCLogStream::shouldLog();
        if (result)
        {
          int v34 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          return (AppleBCMWLANCore ***)CCLogStream::logAlert(v34, "[dk] %s@%d:Invalid event_weight_avg_lqm->len  = %d, exceeds %u\n");
        }
      }
    }
    else if (*(_WORD *)(a2 + 48))
    {
      uint64_t result = (AppleBCMWLANCore ***)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      if (result)
      {
        (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        uint64_t result = (AppleBCMWLANCore ***)CCLogStream::shouldLog();
        if (result)
        {
          unsigned int v8 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          return (AppleBCMWLANCore ***)CCLogStream::logAlert(v8, "[dk] %s@%d:Unsupported Weighted Average Event Version  = %d\n");
        }
      }
    }
    else
    {
      *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v9 + 1)  = 0xAAAAAAAAAAAAAAAALL;
      long long v51 = v9;
      long long v52 = v9;
      long long v49 = v9;
      long long v50 = v9;
      long long v47 = v9;
      long long v48 = v9;
      long long v45 = v9;
      long long v46 = v9;
      long long v43 = v9;
      long long v44 = v9;
      long long v41 = v9;
      long long v42 = v9;
      long long v39 = v9;
      long long v40 = v9;
      *(_OWORD *)__str  = v9;
      long long v38 = v9;
      if (v6 < 5)
      {
LABEL_26:
        int v25 = (void *)*((void *)a1 + 9);
        if (v25[680])
        {
          IO80211BssManager::updateWeightAvgLQM();
          int v25 = (void *)*((void *)a1 + 9);
          char v26 = (IO80211SkywalkInterface *)v25[1413];
          if (v26)
          {
            IO80211Controller::postMessage(a1, v26, 0x91u, v36, 0x10uLL, 1);
            int v25 = (void *)*((void *)a1 + 9);
          }
        }
        uint64_t result = (AppleBCMWLANCore ***)v25[692];
        if (result) {
          return (AppleBCMWLANCore ***)AppleBCMWLANTxPowerManager::configureDynSARPwrBoostPerRSSI(result, v36[0]);
        }
      }
      else
      {
        uint64_t v10 = a2 + 52;
        while ((v10 & 3) == 0)
        {
          int v11 = *(unsigned __int16 *)(v10 + 2);
          if (v6 < v11 + 4)
          {
            uint64_t result = (AppleBCMWLANCore ***)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            if (result)
            {
              (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
              uint64_t result = (AppleBCMWLANCore ***)CCLogStream::shouldLog();
              if (result)
              {
                unsigned int v27 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                return (AppleBCMWLANCore ***)CCLogStream::logAlert(v27, "[dk] %s@%d:Error: remaining_len  = %u, sub_event->len  = %d\n");
              }
            }
            return result;
          }
          if (*(_WORD *)v10)
          {
            uint64_t result = (AppleBCMWLANCore ***)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            if (result)
            {
              (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
              uint64_t result = (AppleBCMWLANCore ***)CCLogStream::shouldLog();
              if (result)
              {
                BOOL v28 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                return (AppleBCMWLANCore ***)CCLogStream::logAlert(v28, "[dk] %s@%d:Unsupported Weighted Average LQM event subtype  = %d\n");
              }
            }
            return result;
          }
          if (v11 != 16)
          {
            uint64_t result = (AppleBCMWLANCore ***)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            if (result)
            {
              (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
              uint64_t result = (AppleBCMWLANCore ***)CCLogStream::shouldLog();
              if (result)
              {
                uint64_t v29 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                return (AppleBCMWLANCore ***)CCLogStream::logAlert(v29, "[dk] %s@%d:Wrong event length(WL_EVENT_WA_LQM_BASIC)  = %d\n");
              }
            }
            return result;
          }
          *(_OWORD *)unsigned int v36 = *(_OWORD *)(v10 + 4);
          snprintf(__str, 0x100uLL, "WeightAvgLQM rssi=%d snr=%d txRate=%u rxRate=%u\n", v36[0], v36[1], v36[2], v36[3]);
          uint64_t v12 = *((void *)a1 + 9);
          if ((*(_DWORD *)(v12 + 980) - 1) > 1)
          {
            unsigned int v13 = (_OWORD *)(v12 + 31037);
            long long v14 = v50;
            v13[28]  = v49;
            v13[29]  = v14;
            long long v15 = v52;
            v13[30]  = v51;
            v13[31]  = v15;
            long long v16 = v46;
            v13[24]  = v45;
            v13[25]  = v16;
            long long v17 = v48;
            v13[26]  = v47;
            v13[27]  = v17;
            long long v18 = v42;
            v13[20]  = v41;
            v13[21]  = v18;
            long long v19 = v44;
            v13[22]  = v43;
            v13[23]  = v19;
            long long v20 = v38;
            v13[16]  = *(_OWORD *)__str;
            v13[17]  = v20;
            long long v21 = v40;
            v13[18]  = v39;
            v13[19]  = v21;
          }
          else
          {
            io80211_os_log();
          }
          uint64_t v22 = *(unsigned __int16 *)(v10 + 2);
          unsigned int v23 = v22 + 4;
          v10 += v22 + 4;
          unsigned int v24 = v6 - (v22 + 4);
          if (v6 >= v23) {
            unsigned int v6 = v24;
          }
          else {
            unsigned int v6 = 0;
          }
          if (v6 <= 4) {
            goto LABEL_26;
          }
        }
        uint64_t result = (AppleBCMWLANCore ***)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        if (result)
        {
          (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          uint64_t result = (AppleBCMWLANCore ***)CCLogStream::shouldLog();
          if (result)
          {
            uint64_t v30 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            return (AppleBCMWLANCore ***)CCLogStream::logAlert(v30, "[dk] %s@%d:sub_event_ptr alignment failure\n");
          }
        }
      }
    }
  }
  return result;
}

void AppleBCMWLANCore::handleDynSAREvent(void *a1, uint64_t a2)
{
  uint64_t v4 = IOMallocZeroTyped();
  if (v4)
  {
    uint64_t v5 = v4;
    *(void *)(v4 + 80)  = 0;
    *(_OWORD *)(v4 + 48)  = 0u;
    *(_OWORD *)(v4 + 64)  = 0u;
    *(_OWORD *)(v4 + 16)  = 0u;
    *(_OWORD *)(v4 + 32)  = 0u;
    *(_OWORD *)uint64_t v4 = 0u;
    if (((a2 + 48) & 3) != 0)
    {
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          long long v15 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logAlert(v15, "[dk] %s@%d:Alignment failure, event_dynsar\n");
        }
      }
    }
    else if (*(_DWORD *)(a2 + 20) == 12)
    {
      if (*(_WORD *)(a2 + 50) == 12)
      {
        if (*(unsigned __int16 *)(a2 + 48) - 3 <= 0xFFFFFFFD)
        {
          if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
          {
            (*(void (**)(void *))(*a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              long long v18 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
              CCLogStream::logAlert(v18, "[dk] %s@%d:Unsupported DynSAR event version  = %d\n");
            }
          }
        }
        else
        {
          unsigned int v6 = *(unsigned __int8 *)(a2 + 57);
          if (v6 < 2)
          {
            *(_DWORD *)uint64_t v4 = v6;
            *(_WORD *)(v4 + 66)  = *(unsigned __int8 *)(a2 + 56);
            __int16 v7 = *(unsigned __int8 *)(a2 + 58);
            *(_WORD *)(v4 + 64)  = v7;
            *(unsigned char *)(v4 + 80)  = *(unsigned char *)(a2 + 59);
            unsigned int v8 = *(AppleBCMWLANTxPowerManager **)(a1[9] + 5536);
            if (v8)
            {
              AppleBCMWLANTxPowerManager::updateDynSARCurState(v8, v7);
              if (!*(_DWORD *)v5 && *(_WORD *)(v5 + 64) == 2) {
                *(void *)(a1[9] + 29776)  = mach_continuous_time();
              }
              AppleBCMWLANTxPowerManager::processDynSAREvent(*(void *)(a1[9] + 5536), a2 + 48);
              *(_DWORD *)(v5 + 76)  = AppleBCMWLANTxPowerManager::getDynSARUpdateCnt(*(AppleBCMWLANTxPowerManager **)(a1[9] + 5536), *(unsigned __int8 *)(a2 + 57));
              *(void *)(v5 + 8)  = AppleBCMWLANTxPowerManager::getDynSARDurNoOpt(*(AppleBCMWLANTxPowerManager **)(a1[9] + 5536), *(unsigned __int8 *)(a2 + 57));
              *(void *)(v5 + 16)  = AppleBCMWLANTxPowerManager::getDynSARDurPwrOpt(*(AppleBCMWLANTxPowerManager **)(a1[9] + 5536), *(unsigned __int8 *)(a2 + 57));
              *(void *)(v5 + 24)  = AppleBCMWLANTxPowerManager::getDynSARDurFailSafe(*(AppleBCMWLANTxPowerManager **)(a1[9] + 5536), *(unsigned __int8 *)(a2 + 57));
              *(void *)(v5 + 32)  = AppleBCMWLANTxPowerManager::getDynSARDurNoMute(*(AppleBCMWLANTxPowerManager **)(a1[9] + 5536), *(unsigned __int8 *)(a2 + 57));
              *(void *)(v5 + 40)  = AppleBCMWLANTxPowerManager::getDynSARDurHybrid(*(AppleBCMWLANTxPowerManager **)(a1[9] + 5536), *(unsigned __int8 *)(a2 + 57));
              *(void *)(v5 + 48)  = AppleBCMWLANTxPowerManager::getDynSARDurTxDCThrottle(*(AppleBCMWLANTxPowerManager **)(a1[9] + 5536), *(unsigned __int8 *)(a2 + 57));
              DynSARDurPwrOptTxDCThrottle  = AppleBCMWLANTxPowerManager::getDynSARDurPwrOptTxDCThrottle(*(AppleBCMWLANTxPowerManager **)(a1[9] + 5536), *(unsigned __int8 *)(a2 + 57));
              *(void *)(v5 + 56)  = DynSARDurPwrOptTxDCThrottle;
              unint64_t v10 = *(void *)(v5 + 16);
              uint64_t v11 = *(unsigned __int8 *)(a2 + 57);
              *(void *)(a1[9] + (v11 << 6) + 4760)  = *(void *)(v5 + 8) / 0x3E8uLL;
              *(void *)(a1[9] + (v11 << 6) + 4768)  = v10 / 0x3E8;
              unint64_t v12 = *(void *)(v5 + 32);
              *(void *)(a1[9] + (v11 << 6) + 4776)  = *(void *)(v5 + 24) / 0x3E8uLL;
              *(void *)(a1[9] + (v11 << 6) + 4784)  = v12 / 0x3E8;
              unint64_t v13 = *(void *)(v5 + 48);
              *(void *)(a1[9] + (v11 << 6) + 4792)  = *(void *)(v5 + 40) / 0x3E8uLL;
              *(void *)(a1[9] + (v11 << 6) + 4800)  = v13 / 0x3E8;
              *(void *)(a1[9] + (v11 << 6) + 4808)  = DynSARDurPwrOptTxDCThrottle / 0x3E8uLL;
              ++*(_DWORD *)(a1[9] + (v11 << 6) + 4816);
              uint64_t v14 = *(void *)(a1[9] + 5536);
              AppleBCMWLANTxPowerManager::handleDynSAREventToPopulateUnsharedTxDCUtil(v14, (unsigned int *)v5);
            }
            return;
          }
          if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
          {
            (*(void (**)(void *))(*a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              long long v20 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
              CCLogStream::logAlert(v20, "[dk] %s@%d:DSA slice %d is out of range\n");
            }
          }
        }
      }
      else if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          long long v17 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logAlert(v17, "[dk] %s@%d:Invalid event_dynsar->length  = %d\n");
        }
      }
    }
    else if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        long long v16 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v16, "[dk] %s@%d:Invalid wle->datalen  = %d\n");
      }
    }
    IOFree((void *)v5, 0x58uLL);
  }
  else if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      long long v19 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v19, "[dk] %s@%d:Memory allocation failure for dynSARDataPerSlice\n", "handleDynSAREvent", 23814);
    }
  }
}

uint64_t AppleBCMWLANCore::handleRangingEvent(IO80211Controller *a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 20);
  if (!v3
    || ((uint64_t v5 = (unsigned __int16 *)(a2 + 48), v6 = v3 - 1 + a2 + 48, !__CFADD__(v3 - 1, a2 + 48)) ? (v7 = 0) : (v7 = 1),
        v3 <= 0x11))
  {
    uint64_t result = (*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
    if (result)
    {
      (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        long long v9 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        return CCLogStream::logAlert(v9, "[dk] %s@%d:incorrect payload size for wl_proxd_event_t");
      }
    }
    return result;
  }
  if ((v7 & 1) != 0
    || a2 + 65 < (uint64_t)v5
    || (unint64_t)v5 >= 0xFFFFFFFFFFFFFFEFLL
    || (a2 + 65 <= v6 ? (BOOL v10 = v6 < (uint64_t)v5) : (BOOL v10 = 1), v10))
  {
    uint64_t result = (*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
    if (result)
    {
      (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v124 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        return CCLogStream::logCrit(v124, "[dk] %s@%d: ERROR: Boundary condition detected\n", "handleRangingEvent", 24066);
      }
    }
    return result;
  }
  uint64_t v11 = *(__int16 *)(a2 + 52) - 1;
  if (v11 > 0x10) {
    unint64_t v12 = "Unidentified";
  }
  else {
    unint64_t v12 = off_10038CB30[v11];
  }
  uint64_t result = (*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
  if (result)
  {
    (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      v125  = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      uint64_t result = CCLogStream::logNotice(v125, "[dk] %s@%d: proxd event: reason=%d type %s method 0x%x session %d\n", "handleRangingEvent", 24110, *(_DWORD *)(a2 + 12), v12, *(__int16 *)(a2 + 54), *(unsigned __int16 *)(a2 + 56));
    }
  }
  unint64_t v13 = v3 - 16;
  int v14 = *(unsigned __int16 *)(a2 + 52);
  if (v14 == 5)
  {
    uint64_t result = (*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
    if (result)
    {
      (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v126 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        uint64_t result = CCLogStream::logNotice(v126, "[dk] %s@%d: WL_PROXD_EVENT_BURST_END, TLV ID: 0x%x\n", "handleRangingEvent", 24155, *(unsigned __int16 *)(a2 + 60));
      }
    }
    int v18 = *(unsigned __int16 *)(a2 + 60);
    if ((v18 - 515) > 6 || ((1 << (v18 - 3)) & 0x61) == 0)
    {
LABEL_229:
      if ((~v18 & 0x206) != 0) {
        return result;
      }
      if (v13 > 0xB)
      {
        uint64_t result = (*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        if (result)
        {
          (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            unsigned int v110 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            return CCLogStream::logAlert(v110, "[dk] %s@%d:Proxd: Burst Status - sid: %u state: %d status: %d(%s) BurstNum: %u core supported: %d core id: %d\n", "handleRangingEvent", 24623);
          }
        }
        return result;
      }
      uint64_t result = (*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      if (!result) {
        return result;
      }
      (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      uint64_t result = CCLogStream::shouldLog();
      if (!result) {
        return result;
      }
      long long v17 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      return CCLogStream::logAlert(v17, "[dk] %s@%d:insufficient remaining data length for wl_proxd_ftm_session_status_t\n");
    }
    long long v166 = 0u;
    memset(v165, 0, sizeof(v165));
    v163  = 0u;
    v164  = 0u;
    if (v18 != 521)
    {
      if (v18 != 520)
      {
        if (v18 == 515)
        {
          if (v13 <= 0x7F)
          {
            uint64_t result = (*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            if (result)
            {
              (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
              uint64_t result = CCLogStream::shouldLog();
              if (result)
              {
                long long v19 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                return CCLogStream::logAlert(v19, "[dk] %s@%d:insufficient remaining data length for wl_proxd_rtt_result_v1_t\n");
              }
            }
            return result;
          }
          int v32 = *(_DWORD *)(a2 + 132);
          if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
          {
            (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              v134  = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
              int v135 = *(_DWORD *)(a2 + 68);
              if (v135)
              {
                if (v135 == -1)
                {
                  long long v136 = "error";
                }
                else if ((v135 + 1056) > 0x20)
                {
                  long long v136 = "unknown";
                }
                else
                {
                  long long v136 = wl_proxd_error_to_string[v135 + 1056];
                }
              }
              else
              {
                long long v136 = "OK";
              }
              CCLogStream::logNotice(v134, "[dk] %s@%d: Ranging result v1: session=%d, flags=0x%x, status=%d(%s) peer=%02X:%02X:%02X:%02X:%02X:%02X, state=%d,avg_dist=%d.%04dm,  num RTT samples=%d, valid=%d, num_ftm %d, burst_num  %d\n ", "handleRangingEvent", 24184, *(unsigned __int16 *)(a2 + 64), *(__int16 *)(a2 + 66), v135, v136, *(unsigned __int8 *)(a2 + 72), *(unsigned __int8 *)(a2 + 73), *(unsigned __int8 *)(a2 + 74), *(unsigned __int8 *)(a2 + 75), *(unsigned __int8 *)(a2 + 76), *(unsigned __int8 *)(a2 + 77), *(__int16 *)(a2 + 78), v32 >> 8, (625 * v32) >> 4,
                *(unsigned __int16 *)(a2 + 142),
                *(unsigned __int8 *)(a2 + 138),
                *(unsigned __int8 *)(a2 + 139),
                *(unsigned __int16 *)(a2 + 140));
            }
          }
          WORD4(v165[24])  = *(_WORD *)(a2 + 66);
          uint64_t v33 = 1000 * v32;
          if (v33 != (int)v33)
          {
            uint64_t result = (*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            if (result)
            {
              (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
              uint64_t result = CCLogStream::shouldLog();
              if (result)
              {
                uint32_t v130 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                return CCLogStream::logEmergency(v130, "[dk] %s@%d: Overflow detected: avg_dist[%d]\n", "handleRangingEvent", 24191, *(_DWORD *)(a2 + 132));
              }
            }
            return result;
          }
          *((float *)&v165[24] + AppleBCMWLANCommandMonitor::free(this - 3) = (float)((int)v33 >> 8);
          LOWORD(v166)  = *(_WORD *)(a2 + 136);
          BYTE2(v166)  = *(unsigned char *)(a2 + 138);
          *(_DWORD *)((char *)&v164 + 10)  = *(_DWORD *)(a2 + 72);
          HIWORD(v164)  = *(_WORD *)(a2 + 76);
          unint64_t v13 = v3 - 100;
          if (*(_WORD *)(a2 + 142))
          {
            uint64_t v34 = 0;
            uint64_t v35 = 0;
            unint64_t v36 = 0;
            v156  = 0;
            v147  = a2 + 148;
            v150  = -100;
            while (1)
            {
              if (v35 > 7u) {
                goto LABEL_208;
              }
              if (v13 <= 0x2B)
              {
                uint64_t result = (*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                if (result)
                {
                  (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                  uint64_t result = CCLogStream::shouldLog();
                  if (result) {
                    goto LABEL_285;
                  }
                }
                return result;
              }
              uint64_t v37 = v147 + v34 + 43;
              if ((unint64_t)(v147 + v34) >= 0xFFFFFFFFFFFFFFD5
                || v37 < (uint64_t)v5
                || v37 > v6
                || (long long v38 = (unsigned __int8 *)(a2 + v34 + 148), (uint64_t)v5 > (uint64_t)v38)
                || v6 < v147 + v34)
              {
                uint64_t result = (*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                if (result)
                {
                  (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                  uint64_t result = CCLogStream::shouldLog();
                  if (result)
                  {
LABEL_285:
                    uint32_t v121 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                    return CCLogStream::logAlert(v121, "[dk] %s@%d:insufficient remaining data length for wl_proxd_rtt_sample_v1_t\n");
                  }
                }
                return result;
              }
              unint64_t v158 = v13;
              uint64_t v39 = a2 + v34;
              int v40 = *(_DWORD *)(a2 + v34 + 152);
              __int16 v41 = *(_WORD *)(a2 + v34 + 166);
              if (*(_WORD *)(a2 + v34 + 184)) {
                BOOL v42 = *(unsigned __int16 *)(a2 + v34 + 186) == 0;
              }
              else {
                BOOL v42 = 1;
              }
              int v43 = !v42;
              int v151 = *(_DWORD *)(a2 + v34 + 152);
              BOOL v44 = (v40 - 1334) < 0xFFFFF97D;
              if (*(unsigned char *)(*((void *)a1 + 9) + 992) && (v40 - 1334) <= 0xFFFFF97C)
              {
                v145  = v43;
                char v45 = *(_WORD *)(a2 + v34 + 166);
                if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
                {
                  (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                  if (CCLogStream::shouldLog())
                  {
                    unint64_t v54 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                    CCLogStream::logNotice(v54, "[dk] %s@%d:Detected outlier but not discarding sample!\n", "handleRangingEvent", 24234);
                  }
                }
                BOOL v44 = 0;
                LOBYTE(v41)  = v45;
                int v43 = v145;
              }
              if (!*(_DWORD *)(v39 + 168))
              {
                uint64_t v47 = v35;
                uint64_t v48 = a2 + v34;
                int v49 = *(unsigned __int8 *)(a2 + v34 + 149);
                if (((v49 | v44 | v43) & 1) == 0)
                {
                  long long v50 = (char *)&v165[3 * v47] + 8;
                  *((_DWORD *)v50 + 6)  = v151;
                  *((_WORD *)v50 + AppleBCMWLANCommandMonitor::free(this - 3) = *(_WORD *)(v48 + 150);
                  *((_WORD *)v50 + 10)  = v49;
                  *((_WORD *)v50 + 4)  = *(_WORD *)(v48 + 164);
                  *long long v50 = v41;
                  *((_WORD *)v50 + 11)  = 0;
                  *((_WORD *)v50 + 5)  = *(_WORD *)(v39 + 184);
                  v50[1]  = *(unsigned char *)(v39 + 186);
                  *(void *)(v50 + 12)  = *(void *)(v48 + 176);
                  v50[2]  = *(unsigned char *)(v48 + 188);
                  v50[5]  = *(_DWORD *)(v48 + 160);
                  v50[4]  = *(_DWORD *)(v48 + 172);
                  if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
                  {
                    (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                    if (CCLogStream::shouldLog())
                    {
                      int v55 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                      CCLogStream::logNotice(v55, "[dk] %s@%d:sample[%d]: id=%d rssi=%d snr=%d bitflips=%d tof_phy_error %x tof_tgt_phy_error %x tof_target_snr=%d tof_target_bitflips=%d rtt=%d status=%d coreid  = %d\n", "handleRangingEvent", 24257, v36, *v38, *(__int16 *)(v48 + 150), *(unsigned __int16 *)(v48 + 164), *(unsigned __int16 *)(v39 + 166), *(_DWORD *)(v48 + 176), *(_DWORD *)(v48 + 180), *(unsigned __int16 *)(v39 + 184), *(unsigned __int16 *)(v39 + 186), *(_DWORD *)(v39 + 152), *(_DWORD *)(v39 + 168), *(unsigned __int8 *)(v48 + 188));
                    }
                  }
                  uint64_t v51 = BYTE3(v166) + 1;
                  ++BYTE3(v166);
                  int v52 = *(__int16 *)(v48 + 150);
                  uint64_t v35 = v51;
                  int v53 = v150;
                  if (v150 <= v52) {
                    int v53 = v52;
                  }
                  v150  = v53;
                  v156 += v151;
                  goto LABEL_111;
                }
                uint64_t v35 = v47;
                if ((v49 & 1) == 0)
                {
                  if (v44) {
                    WORD4(v165[24]) |= 0x2000u;
                  }
                  if (v43) {
                    WORD4(v165[24]) |= 0x8000u;
                  }
                }
              }
              if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
              {
                (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  long long v46 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                  CCLogStream::logNotice(v46, "[dk] %s@%d:Discarding sample[%d]: id=%d rssi=%d snr=%d bitflips=%d tof_phy_error %x tof_tgt_phy_error %x tof_target_snr=%d tof_target_bitflips=%d rtt=%d status=%d coreid  = %d\n", "handleRangingEvent", 24279, v36, *v38, *(__int16 *)(a2 + v34 + 150), *(unsigned __int16 *)(a2 + v34 + 164), *(unsigned __int16 *)(v39 + 166), *(_DWORD *)(a2 + v34 + 176), *(_DWORD *)(a2 + v34 + 180), *(unsigned __int16 *)(v39 + 184), *(unsigned __int16 *)(v39 + 186), *(_DWORD *)(v39 + 152), *(_DWORD *)(v39 + 168), *(unsigned __int8 *)(a2 + v34 + 188));
                }
              }
LABEL_111:
              unint64_t v13 = v158 - 44;
              if (v36 <= 6)
              {
                ++v36;
                v34 += 44;
                if (v36 < *(unsigned __int16 *)(a2 + 142)) {
                  continue;
                }
              }
              goto LABEL_208;
            }
          }
        }
        goto LABEL_207;
      }
      if (v13 <= 0x5F)
      {
        uint64_t result = (*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        if (result)
        {
          (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            unsigned int v31 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            return CCLogStream::logAlert(v31, "[dk] %s@%d:insufficient remaining data length for wl_proxd_rtt_result_v2_t\n");
          }
        }
        return result;
      }
      if ((*(_WORD *)(a2 + 70) & 0x80) != 0) {
        int v77 = -*(_DWORD *)(a2 + 92);
      }
      else {
        int v77 = *(_DWORD *)(a2 + 92);
      }
      if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          v140  = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          v141  = *(_DWORD *)(a2 + 72);
          if (v141)
          {
            if (v141 == -1)
            {
              int v142 = "error";
            }
            else if ((v141 + 1056) > 0x20)
            {
              int v142 = "unknown";
            }
            else
            {
              int v142 = wl_proxd_error_to_string[v141 + 1056];
            }
          }
          else
          {
            int v142 = "OK";
          }
          CCLogStream::logNotice(v140, "[dk] %s@%d: Ranging result V2: session=%d, flags=0x%x, status=%d(%s), peer=%02X:%02X:%02X:%02X:%02X:%02X, state=%d,avg_dist=%d.%04dm,  num RTT samples=%d, valid=%d, num_ftm %d, burst_num  %d\n ", "handleRangingEvent", 24315, *(unsigned __int16 *)(a2 + 68), *(__int16 *)(a2 + 70), v141, v142, *(unsigned __int8 *)(a2 + 76), *(unsigned __int8 *)(a2 + 77), *(unsigned __int8 *)(a2 + 78), *(unsigned __int8 *)(a2 + 79), *(unsigned __int8 *)(a2 + 80), *(unsigned __int8 *)(a2 + 81), *(__int16 *)(a2 + 82), v77 >> 8, (625 * v77) >> 4,
            *(unsigned __int16 *)(a2 + 102),
            *(unsigned __int8 *)(a2 + 98),
            *(unsigned __int8 *)(a2 + 99),
            *(unsigned __int16 *)(a2 + 100));
        }
      }
      WORD4(v165[24])  = *(_WORD *)(a2 + 70);
      uint64_t v78 = 1000 * v77;
      if (v78 != (int)v78)
      {
        uint64_t result = (*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        if (result)
        {
          (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            long long v132 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            return CCLogStream::logEmergency(v132, "[dk] %s@%d: Overflow detected: avg_dist[%d]\n", "handleRangingEvent", 24322, *(_DWORD *)(a2 + 92));
          }
        }
        return result;
      }
      *((float *)&v165[24] + AppleBCMWLANCommandMonitor::free(this - 3) = (float)((int)v78 >> 8);
      LOWORD(v166)  = *(_WORD *)(a2 + 96);
      BYTE2(v166)  = *(unsigned char *)(a2 + 98);
      *(_DWORD *)((char *)&v164 + 10)  = *(_DWORD *)(a2 + 76);
      HIWORD(v164)  = *(_WORD *)(a2 + 80);
      unint64_t v13 = v3 - 60;
      if (*(_WORD *)(a2 + 102))
      {
        uint64_t v79 = 0;
        uint64_t v35 = 0;
        v156  = 0;
        v149  = a2 + 160;
        v150  = -100;
        unint64_t v80 = 1;
        while (1)
        {
          if (v35 > 7u) {
            goto LABEL_208;
          }
          if (v13 <= 0x33)
          {
            uint64_t result = (*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            if (!result) {
              return result;
            }
            (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            uint64_t result = CCLogStream::shouldLog();
            if (!result) {
              return result;
            }
LABEL_291:
            unsigned __int8 v123 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            return CCLogStream::logAlert(v123, "[dk] %s@%d:insufficient remaining data length for wl_proxd_rtt_sample_v2_t\n");
          }
          uint64_t v81 = v149 + v79 + 51;
          if ((unint64_t)(v149 + v79) >= 0xFFFFFFFFFFFFFFCDLL
            || v81 < (uint64_t)v5
            || v81 > v6
            || (uint64_t)v5 > a2 + v79 + 160
            || v6 < v149 + v79)
          {
            uint64_t result = (*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            if (!result) {
              return result;
            }
            (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            uint64_t result = CCLogStream::shouldLog();
            if (!result) {
              return result;
            }
            goto LABEL_291;
          }
          v153  = v35;
          v160  = v13;
          uint64_t v82 = a2 + v79;
          int v83 = "-";
          if (*(char *)(a2 + v79 + 165) >= 0) {
            int v83 = (const char *)&unk_10029A2CA;
          }
          v146  = v83;
          if (*(char *)(a2 + v79 + 165) >= 0) {
            int v84 = *(_DWORD *)(a2 + v79 + 168);
          }
          else {
            int v84 = -*(_DWORD *)(a2 + v79 + 168);
          }
          __int16 v85 = *(_WORD *)(v82 + 182);
          int v86 = *(unsigned __int16 *)(v82 + 202);
          BOOL v87 = (v84 - 1334) < 0xFFFFF97D;
          if (*(unsigned char *)(*((void *)a1 + 9) + 992) && (v84 - 1334) <= 0xFFFFF97C)
          {
            if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
            {
              (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
              if (CCLogStream::shouldLog())
              {
                uint64_t v95 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                CCLogStream::logNotice(v95, "[dk] %s@%d:Detected outlier but not discarding sample!\n", "handleRangingEvent", 24370);
              }
            }
            BOOL v87 = 0;
          }
          if (!*(_DWORD *)(v82 + 184))
          {
            unsigned int v90 = v86 - 1;
            int v91 = *(unsigned __int8 *)(v82 + 165);
            if (((v91 | v87) & 1) == 0 && v90 >= 0xFFFE)
            {
              uint64_t v92 = (char *)&v165[3 * v153] + 8;
              v154  = v84;
              *((_DWORD *)v92 + 6)  = v84;
              uint64_t v93 = a2 + v79;
              *((_WORD *)v92 + AppleBCMWLANCommandMonitor::free(this - 3) = *(_WORD *)(a2 + v79 + 166);
              *((_WORD *)v92 + 10)  = v91;
              *((_WORD *)v92 + 4)  = *(_WORD *)(a2 + v79 + 180);
              char *v92 = v85;
              *((_WORD *)v92 + 11)  = 0;
              *((_WORD *)v92 + 5)  = *(_WORD *)(a2 + v79 + 200);
              v92[1]  = *(unsigned char *)(v82 + 202);
              *(void *)(v92 + 12)  = *(void *)(a2 + v79 + 192);
              v92[2]  = *(unsigned char *)(a2 + v79 + 204);
              v92[5]  = *(_DWORD *)(a2 + v79 + 176);
              v92[4]  = *(_DWORD *)(a2 + v79 + 188);
              *((_WORD *)v92 + 14)  = *(unsigned __int8 *)(a2 + v79 + 208);
              if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
              {
                (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  int v96 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                  CCLogStream::logNotice(v96, "[dk] %s@%d:sample[%d]: id=%d rssi=%d snr=%d bitflips=%d tof_phy_error %x tof_tgt_phy_error %x tof_target_snr=%d tof_target_bitflips=%d rtt=%s%d status=%d coreid  = %d flags=%d channel  = %d\n", "handleRangingEvent", 24397, v80, *(unsigned __int8 *)(a2 + v79 + 164), *(__int16 *)(v93 + 166), *(unsigned __int16 *)(v93 + 180), *(unsigned __int16 *)(v82 + 182), *(_DWORD *)(v93 + 192), *(_DWORD *)(v93 + 196), *(unsigned __int16 *)(v93 + 200), *(unsigned __int16 *)(v82 + 202), v146, *(_DWORD *)(v82 + 168), *(_DWORD *)(v82 + 184), *(unsigned __int8 *)(v93 + 204), *(unsigned __int8 *)(v82 + 165),
                    *(unsigned __int8 *)(v93 + 208));
                }
              }
              uint64_t v35 = BYTE3(v166) + 1;
              ++BYTE3(v166);
              int v94 = v150;
              if (v150 <= *(__int16 *)(v93 + 166)) {
                int v94 = *(__int16 *)(v93 + 166);
              }
              v150  = v94;
              v156 += v154;
              unint64_t v88 = v160;
              goto LABEL_198;
            }
            if ((v91 & 1) == 0)
            {
              if (v87) {
                WORD4(v165[24]) |= 0x2000u;
              }
              if (v90 <= 0xFFFD) {
                WORD4(v165[24]) |= 0x8000u;
              }
            }
          }
          if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
          {
            (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            unint64_t v88 = v160;
            uint64_t v35 = v153;
            if (CCLogStream::shouldLog())
            {
              uint64_t v89 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
              CCLogStream::logNotice(v89, "[dk] %s@%d:Discarding sample[%d]: id=%d rssi=%d snr=%d bitflips=%d tof_phy_error %x tof_tgt_phy_error %x tof_target_snr=%d tof_target_bitflips=%d rtt=%s%d status=%d coreid  = %d flags=%d channel  = %d\n", "handleRangingEvent", 24423, v80, *(unsigned __int8 *)(a2 + v79 + 164), *(__int16 *)(a2 + v79 + 166), *(unsigned __int16 *)(a2 + v79 + 180), *(unsigned __int16 *)(v82 + 182), *(_DWORD *)(a2 + v79 + 192), *(_DWORD *)(a2 + v79 + 196), *(unsigned __int16 *)(a2 + v79 + 200), *(unsigned __int16 *)(v82 + 202), v146, *(_DWORD *)(v82 + 168), *(_DWORD *)(v82 + 184), *(unsigned __int8 *)(a2 + v79 + 204), *(unsigned __int8 *)(v82 + 165),
                *(unsigned __int8 *)(a2 + v79 + 208));
            }
          }
          else
          {
            unint64_t v88 = v160;
            uint64_t v35 = v153;
          }
LABEL_198:
          unint64_t v13 = v88 - 52;
          if (v80 <= 6)
          {
            v79 += 52;
            BOOL v74 = v80++ >= *(unsigned __int16 *)(a2 + 102);
            if (!v74) {
              continue;
            }
          }
          goto LABEL_208;
        }
      }
LABEL_207:
      LOBYTE(v35)  = 0;
      v156  = 0;
      v150  = -100;
LABEL_208:
      uint64_t v97 = *((void *)a1 + 9);
      if (*(unsigned char *)(v97 + 30937))
      {
        *(void *)&long long v98 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v98 + 1)  = 0xAAAAAAAAAAAAAAAALL;
        __src[22]  = v98;
        __src[23]  = v98;
        __src[20]  = v98;
        __src[21]  = v98;
        __src[18]  = v98;
        __src[19]  = v98;
        int v99 = v150 - 10;
        __src[16]  = v98;
        __src[17]  = v98;
        __src[14]  = v98;
        __src[15]  = v98;
        __src[12]  = v98;
        __src[13]  = v98;
        __src[10]  = v98;
        __src[11]  = v98;
        __src[8]  = v98;
        __src[9]  = v98;
        __src[6]  = v98;
        __src[7]  = v98;
        __src[4]  = v98;
        _OWORD __src[5] = v98;
        _OWORD __src[2] = v98;
        __src[3]  = v98;
        __src[0]  = v98;
        __src[1]  = v98;
        int v157 = v156 / v35;
        if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            unsigned int v129 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logAlert(v129, "[dk] %s@%d:Checking RSSI of ranging samples, count=%d, rssiPassThreshold=%d avgRtt=%d\n", "handleRangingEvent", 24578, v35, v99, v157);
          }
        }
        v161  = v13;
        v155  = v35;
        if ((_BYTE)v35)
        {
          unint64_t v100 = 0;
          int v101 = 0;
          v102  = 0;
          uint64_t v103 = 48 * v35;
          do
          {
            v104  = (unsigned __int8 *)&v165[v100 / 0x10] + 8;
            int v105 = SHIWORD(v165[v100 / 0x10]);
            if (v99 >= v105 && (int v106 = v165[v100 / 0x10 + 2], v106 >= v157))
            {
              if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
              {
                (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v109 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                  CCLogStream::logNotice(v109, "[dk] %s@%d:Discarding sample[%d]: rssi=%d snr=%d bitflips=%d tof_phy_error=%x tof_tgt_phy_error=%x tof_target_snr=%d tof_target_bitflips=%d rtt=%d status=%d coreid=%d flags=%d channel=%d\n", "handleRangingEvent", 24600, v101, v105, LOWORD(v165[v100 / 0x10 + 1]), *v104, DWORD1(v165[v100 / 0x10 + 1]), DWORD2(v165[v100 / 0x10 + 1]), WORD1(v165[v100 / 0x10 + 1]), BYTE9(v165[v100 / 0x10]), v106, HIWORD(v165[v100 / 0x10 + 1]), BYTE10(v165[v100 / 0x10]), WORD6(v165[v100 / 0x10 + 1]), WORD2(v165[v100 / 0x10 + 2]));
                }
              }
            }
            else
            {
              uint64_t v107 = &__src[3 * v102];
              long long v108 = *(_OWORD *)((char *)&v165[v100 / 0x10 + 1] + 8);
              *uint64_t v107 = *(_OWORD *)v104;
              v107[1]  = v108;
              v107[2]  = *(_OWORD *)((char *)&v165[v100 / 0x10 + 2] + 8);
              ++v102;
            }
            ++v101;
            v100 += 48;
          }
          while (v103 != v100);
        }
        else
        {
          v102  = 0;
        }
        if (v155 != v102)
        {
          WORD4(v165[24]) |= 0x4000u;
          BYTE2(v166)  = v102;
          BYTE3(v166)  = v102;
          memcpy((char *)v165 + 8, __src, 0x180uLL);
          if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
          {
            (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              long long v133 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
              CCLogStream::logAlert(v133, "[dk] %s@%d:Filtered ranging samples based on RSSI, new count=%d\n", "handleRangingEvent", 24608, v102);
            }
          }
        }
        uint64_t v97 = *((void *)a1 + 9);
        unint64_t v13 = v161;
      }
      uint64_t result = IO80211Controller::postMessage(a1, *(IO80211SkywalkInterface **)(v97 + 11312), 0x55u, &v163, 0x1C0uLL, 1);
      int v18 = *(unsigned __int16 *)(a2 + 60);
      goto LABEL_229;
    }
    if (v13 <= 0x2B)
    {
      uint64_t result = (*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      if (result)
      {
        (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          uint64_t v30 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          return CCLogStream::logAlert(v30, "[dk] %s@%d:insufficient remaining data length for wl_proxd_rtt_result_v3_t\n");
        }
      }
      return result;
    }
    int v56 = *(_DWORD *)(a2 + 92);
    if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        v137  = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        int v138 = *(_DWORD *)(a2 + 72);
        if (v138)
        {
          if (v138 == -1)
          {
            v139  = "error";
          }
          else if ((v138 + 1056) > 0x20)
          {
            v139  = "unknown";
          }
          else
          {
            v139  = wl_proxd_error_to_string[v138 + 1056];
          }
        }
        else
        {
          v139  = "OK";
        }
        CCLogStream::logNotice(v137, "[dk] %s@%d: Ranging result V3: session=%d, flags=0x%x, status=%d(%s), peer=%02X:%02X:%02X:%02X:%02X:%02X, state=%d,avg_dist=%d.%04dm,  num RTT samples=%d, valid=%d, num_ftm %d, burst_num  %d\n ", "handleRangingEvent", 24449, *(unsigned __int16 *)(a2 + 68), *(__int16 *)(a2 + 70), v138, v139, *(unsigned __int8 *)(a2 + 76), *(unsigned __int8 *)(a2 + 77), *(unsigned __int8 *)(a2 + 78), *(unsigned __int8 *)(a2 + 79), *(unsigned __int8 *)(a2 + 80), *(unsigned __int8 *)(a2 + 81), *(__int16 *)(a2 + 82), v56 >> 8, (625 * v56) >> 4,
          *(unsigned __int16 *)(a2 + 102),
          *(unsigned __int8 *)(a2 + 98),
          *(unsigned __int8 *)(a2 + 99),
          *(unsigned __int16 *)(a2 + 100));
      }
    }
    WORD4(v165[24])  = *(_WORD *)(a2 + 70);
    uint64_t v57 = 1000 * v56;
    if (v57 != (int)v57)
    {
      uint64_t result = (*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      if (result)
      {
        (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          v131  = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          return CCLogStream::logEmergency(v131, "[dk] %s@%d: Overflow detected: avg_dist[%d]\n", "handleRangingEvent", 24456, *(_DWORD *)(a2 + 92));
        }
      }
      return result;
    }
    *((float *)&v165[24] + AppleBCMWLANCommandMonitor::free(this - 3) = (float)((int)v57 >> 8);
    LOWORD(v166)  = *(_WORD *)(a2 + 96);
    BYTE2(v166)  = *(unsigned char *)(a2 + 98);
    *(_DWORD *)((char *)&v164 + 10)  = *(_DWORD *)(a2 + 76);
    HIWORD(v164)  = *(_WORD *)(a2 + 80);
    unint64_t v13 = v3 - 60;
    if (!*(_WORD *)(a2 + 102)) {
      goto LABEL_207;
    }
    uint64_t v58 = 0;
    uint64_t v35 = 0;
    v156  = 0;
    uint64_t v59 = a2 + 164;
    v150  = -100;
    unint64_t v60 = 1;
    while (1)
    {
      if (v35 > 7u) {
        goto LABEL_208;
      }
      if (v13 <= 0x37)
      {
        uint64_t result = (*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        if (!result) {
          return result;
        }
        (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        uint64_t result = CCLogStream::shouldLog();
        if (!result) {
          return result;
        }
LABEL_288:
        v122  = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        return CCLogStream::logAlert(v122, "[dk] %s@%d:insufficient remaining data length for wl_proxd_rtt_sample_v3_t\n");
      }
      uint64_t v61 = v59 + v58 + 55;
      if ((unint64_t)(v59 + v58) >= 0xFFFFFFFFFFFFFFC9
        || v61 < (uint64_t)v5
        || v61 > v6
        || (uint64_t)v5 > a2 + v58 + 164
        || v6 < v59 + v58)
      {
        uint64_t result = (*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        if (!result) {
          return result;
        }
        (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        uint64_t result = CCLogStream::shouldLog();
        if (!result) {
          return result;
        }
        goto LABEL_288;
      }
      uint64_t v152 = v35;
      unint64_t v159 = v13;
      uint64_t v62 = a2 + v58;
      int v63 = *(_DWORD *)(a2 + v58 + 172);
      __int16 v64 = *(_WORD *)(a2 + v58 + 186);
      BOOL v66 = *(__int16 *)(a2 + v58 + 204) != -1 && *(__int16 *)(a2 + v58 + 206) != -1;
      v148  = *(_DWORD *)(a2 + v58 + 172);
      BOOL v67 = (v63 - 1334) < 0xFFFFF97D;
      if (*(unsigned char *)(*((void *)a1 + 9) + 992) && (v63 - 1334) <= 0xFFFFF97C)
      {
        char v68 = *(_WORD *)(a2 + v58 + 186);
        if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v75 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logNotice(v75, "[dk] %s@%d:Detected outlier but not discarding sample!\n", "handleRangingEvent", 24499);
          }
        }
        BOOL v67 = 0;
        LOBYTE(v64)  = v68;
      }
      if (!*(_DWORD *)(v62 + 188))
      {
        uint64_t v70 = a2 + v58;
        int v71 = *(unsigned __int8 *)(a2 + v58 + 169);
        if (((v71 | v67 | v66) & 1) == 0)
        {
          unsigned int v72 = (char *)&v165[3 * v152] + 8;
          *((_DWORD *)v72 + 6)  = v148;
          *((_WORD *)v72 + AppleBCMWLANCommandMonitor::free(this - 3) = *(_WORD *)(v70 + 170);
          *((_WORD *)v72 + 10)  = v71;
          *((_WORD *)v72 + 4)  = *(_WORD *)(v70 + 184);
          char *v72 = v64;
          *((_WORD *)v72 + 11)  = 0;
          *((_WORD *)v72 + 5)  = *(_WORD *)(v62 + 204);
          v72[1]  = *(unsigned char *)(v62 + 206);
          *(void *)(v72 + 12)  = *(void *)(v70 + 196);
          v72[2]  = *(unsigned char *)(v70 + 208);
          v72[5]  = *(_DWORD *)(v70 + 180);
          v72[4]  = *(_DWORD *)(v70 + 192);
          *((_WORD *)v72 + 14)  = *(unsigned __int8 *)(v70 + 212);
          *((_DWORD *)v72 + 10)  = *(_DWORD *)(v70 + 216);
          if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
          {
            (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v76 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
              CCLogStream::logNotice(v76, "[dk] %s@%d:sample[%d]: id=%d rssi=%d snr=%d bitflips=%d tof_phy_error %x tof_tgt_phy_error %x tof_target_snr=%d tof_target_bitflips=%d rtt=%d status=%d coreid  = %d flags=%d channel  = %d gd_var=%d\n", "handleRangingEvent", 24528, v60, *(unsigned __int8 *)(a2 + v58 + 168), *(__int16 *)(v70 + 170), *(unsigned __int16 *)(v70 + 184), *(unsigned __int16 *)(v62 + 186), *(_DWORD *)(v70 + 196), *(_DWORD *)(v70 + 200), *(unsigned __int16 *)(v62 + 204), *(unsigned __int16 *)(v62 + 206), *(_DWORD *)(v62 + 172), *(_DWORD *)(v62 + 188), *(unsigned __int8 *)(v70 + 208), *(unsigned __int8 *)(v70 + 169), *(unsigned __int8 *)(v70 + 212),
                *(_DWORD *)(v70 + 216));
            }
          }
          uint64_t v35 = BYTE3(v166) + 1;
          ++BYTE3(v166);
          int v73 = v150;
          if (v150 <= *(__int16 *)(v70 + 170)) {
            int v73 = *(__int16 *)(v70 + 170);
          }
          v150  = v73;
          v156 += v148;
          uint64_t v59 = a2 + 164;
          goto LABEL_155;
        }
        uint64_t v59 = a2 + 164;
        if ((v71 & 1) == 0)
        {
          if (v67) {
            WORD4(v165[24]) |= 0x2000u;
          }
          if (v66) {
            WORD4(v165[24]) |= 0x8000u;
          }
        }
      }
      if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        uint64_t v35 = v152;
        if (CCLogStream::shouldLog())
        {
          unsigned int v69 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logNotice(v69, "[dk] %s@%d:Discarding sample[%d]: id=%d rssi=%d snr=%d bitflips=%d tof_phy_error %x tof_tgt_phy_error %x tof_target_snr=%d tof_target_bitflips=%d rtt=%d status=%d coreid  = %d flags=%d channel  = %d gd_var=%d\n", "handleRangingEvent", 24555, v60, *(unsigned __int8 *)(a2 + v58 + 168), *(__int16 *)(a2 + v58 + 170), *(unsigned __int16 *)(a2 + v58 + 184), *(unsigned __int16 *)(v62 + 186), *(_DWORD *)(a2 + v58 + 196), *(_DWORD *)(a2 + v58 + 200), *(unsigned __int16 *)(v62 + 204), *(unsigned __int16 *)(v62 + 206), *(_DWORD *)(v62 + 172), *(_DWORD *)(v62 + 188), *(unsigned __int8 *)(a2 + v58 + 208), *(unsigned __int8 *)(a2 + v58 + 169), *(unsigned __int8 *)(a2 + v58 + 212),
            *(_DWORD *)(a2 + v58 + 216));
        }
      }
      else
      {
        uint64_t v35 = v152;
      }
LABEL_155:
      unint64_t v13 = v159 - 56;
      if (v60 <= 6)
      {
        v58 += 56;
        BOOL v74 = v60++ >= *(unsigned __int16 *)(a2 + 102);
        if (!v74) {
          continue;
        }
      }
      goto LABEL_208;
    }
  }
  if (v14 == 6)
  {
    if (*(_WORD *)(a2 + 60) == 518)
    {
      if (v13 <= 0xB)
      {
        uint64_t result = (*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        if (!result) {
          return result;
        }
        (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        uint64_t result = CCLogStream::shouldLog();
        if (!result) {
          return result;
        }
        long long v17 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        return CCLogStream::logAlert(v17, "[dk] %s@%d:insufficient remaining data length for wl_proxd_ftm_session_status_t\n");
      }
      int v24 = *(unsigned __int16 *)(a2 + 64);
      int v25 = *(__int16 *)(a2 + 66);
      int v26 = *(_DWORD *)(a2 + 68);
      int v27 = *(unsigned __int16 *)(a2 + 72);
      unsigned int v28 = *(unsigned __int16 *)(a2 + 74);
      if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          v127  = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          if (v26)
          {
            if (v26 == -1)
            {
              v128  = "error";
            }
            else if ((v26 + 1056) > 0x20)
            {
              v128  = "unknown";
            }
            else
            {
              v128  = wl_proxd_error_to_string[v26 + 1056];
            }
          }
          else
          {
            v128  = "OK";
          }
          CCLogStream::logAlert(v127, "[dk] %s@%d:Proxd: Session Status - sid: %u state: %d status: %d(%s) BurstNum: %u core supported: %d core id: %d\n", "handleRangingEvent", 24637, v24, v25, v26, v128, v27, v28, v28 >> 8);
        }
      }
      if (v26 == -1033)
      {
        uint64_t v29 = *((void *)a1 + 9);
        if ((*(unsigned char *)(v29 + 10388) & 0x80) == 0) {
          CCFaultReporter::reportFault(*(CCFaultReporter **)(v29 + 5544), 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0x6040u, "handleRangingEvent", 0, -469794531, "Ranging Protocol Error");
        }
      }
    }
    uint64_t result = IO80211Controller::postMessage(a1, *(IO80211SkywalkInterface **)(*((void *)a1 + 9) + 11312), 0x55u, 0, 0, 1);
    atomic_fetch_and((atomic_uint *volatile)(*((void *)a1 + 9) + 10388), 0xFFFBFFFF);
    return result;
  }
  if (v14 != 17) {
    return result;
  }
  int v15 = *v5;
  if (v15 == 3 && v13 > 0x4AC || v15 == 4 && v13 >= 0x4D1)
  {
    uint64_t result = (*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
    if (result)
    {
      (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        long long v16 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        return CCLogStream::logAlert(v16, "[dk] %s@%d:incorrect remaining data size for wl_proxd_collect_event_data_v%d_t\n");
      }
    }
  }
  else
  {
    uint64_t v20 = *((void *)a1 + 9);
    if (*(unsigned char *)(v20 + 18026) || *(unsigned char *)(v20 + 30936))
    {
      unint64_t v21 = (*(_DWORD *)(a2 + 20) + 48) & 0xFFFFFFE0;
      uint64_t result = IOMallocZeroData();
      uint64_t v22 = (unsigned char *)result;
      if (result)
      {
        strcpy((char *)result, "Proxd Dump:\n");
        unsigned int v23 = 12;
      }
      else
      {
        unsigned int v23 = 0;
      }
      if (v21)
      {
        unint64_t v111 = 0;
        v144  = a2 + 15;
        do
        {
          unsigned int v112 = 0;
          if (!v22
            || v23 > 0xC7E
            || (v113 = 3200, unsigned int v112 = snprintf(&v22[v23], 3200 - v23, "proxd %05d: ", v111), v112 <= 0xC7F))
          {
            int v113 = v112;
          }
          uint64_t result = 0;
          v114  = v113 + v23;
          if (!v22
            || v114 > 0xC7E
            || (v115  = &v22[v114],
                int v116 = 3200,
                int v143 = *(unsigned __int8 *)(v144 + v111 + 15),
                uint64_t result = snprintf(v115, 3200 - v114, "%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x\n", *(unsigned __int8 *)(v144 + v111 - 15), *(unsigned __int8 *)(v144 + v111 - 14), *(unsigned __int8 *)(v144 + v111 - 13), *(unsigned __int8 *)(v144 + v111 - 12), *(unsigned __int8 *)(v144 + v111 - 11), *(unsigned __int8 *)(v144 + v111 - 10), *(unsigned __int8 *)(v144 + v111 - 9), *(unsigned __int8 *)(v144 + v111 - 8), *(unsigned __int8 *)(v144 + v111 - 7), *(unsigned __int8 *)(v144 + v111 - 6), *(unsigned __int8 *)(v144 + v111 - 5), *(unsigned __int8 *)(v144 + v111 - 4), *(unsigned __int8 *)(v144 + v111 - 3), *(unsigned __int8 *)(v144 + v111 - 2), *(unsigned __int8 *)(v144 + v111 - 1),
                           *(unsigned __int8 *)(v144 + v111),
                           *(unsigned __int8 *)(v144 + v111 + 1),
                           *(unsigned __int8 *)(v144 + v111 + 2),
                           *(unsigned __int8 *)(v144 + v111 + 3),
                           *(unsigned __int8 *)(v144 + v111 + 4),
                           *(unsigned __int8 *)(v144 + v111 + 5),
                           *(unsigned __int8 *)(v144 + v111 + 6),
                           *(unsigned __int8 *)(v144 + v111 + 7),
                           *(unsigned __int8 *)(v144 + v111 + 8),
                           *(unsigned __int8 *)(v144 + v111 + 9),
                           *(unsigned __int8 *)(v144 + v111 + 10),
                           *(unsigned __int8 *)(v144 + v111 + 11),
                           *(unsigned __int8 *)(v144 + v111 + 12),
                           *(unsigned __int8 *)(v144 + v111 + 13),
                           *(unsigned __int8 *)(v144 + v111 + 14),
                           v143,
                           *(unsigned __int8 *)(v144 + v111 + 16)),
                result <= 0xC7F))
          {
            int v116 = result;
          }
          unsigned int v23 = v116 + v114;
          v111 += 32;
        }
        while (v111 < v21);
        unint64_t v117 = v21;
      }
      else
      {
        unint64_t v117 = 0;
      }
      if ((unint64_t)*(unsigned int *)(a2 + 20) + 48 > v117)
      {
        uint64_t result = 0;
        if (!v22
          || v23 > 0xC7E
          || (v118 = 3200, uint64_t result = snprintf(&v22[v23], 3200 - v23, "proxd %05d: ", v21), result <= 0xC7F))
        {
          int v118 = result;
        }
        v23 += v118;
        if ((unint64_t)*(unsigned int *)(a2 + 20) + 48 > v117)
        {
          unsigned int v119 = v21 + 1;
          do
          {
            uint64_t result = 0;
            if (!v22
              || v23 > 0xC7E
              || (int v120 = 3200,
                  uint64_t result = snprintf(&v22[v23], 3200 - v23, "%02x", *(unsigned __int8 *)(a2 + v117)),
                  result <= 0xC7F))
            {
              int v120 = result;
            }
            v23 += v120;
            unint64_t v117 = v119;
            BOOL v10 = (unint64_t)*(unsigned int *)(a2 + 20) + 48 > v119++;
          }
          while (v10);
        }
      }
      if (v22 && v23 <= 0xC7E)
      {
        snprintf(&v22[v23], 3200 - v23, "\n");
      }
      else if (!v22)
      {
        return result;
      }
      if (*(void *)(*((void *)a1 + 9) + 14160) && CCLogStream::shouldLog()) {
        CCLogStream::log();
      }
      *uint64_t v22 = 0;
      return IOFreeData();
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleAuthEvent(AppleBCMWLANCore *a1, uint64_t a2)
{
  long long v15 = 0u;
  long long v14 = 0u;
  long long v13 = 0u;
  long long v12 = 0u;
  long long v11 = 0u;
  long long v10 = 0u;
  AppleBCMWLANCore::processAuthEvenData(a1, a2);
  v9[0]  = mapBcmStatusToApple80211IOReturnScan(*(_DWORD *)(a2 + 8));
  v9[1]  = mapBcmStatusToApple80211IOReturnIEEEStatus(*(_DWORD *)(a2 + 12));
  uint64_t v4 = *((void *)a1 + 9);
  uint64_t v5 = *(IO80211SkywalkInterface **)(v4 + 11304);
  if (v5)
  {
    IO80211Controller::postMessage(a1, v5, 0x4Au, v9, 0x68uLL, 1);
    uint64_t v4 = *((void *)a1 + 9);
  }
  uint64_t v6 = *(IO80211SkywalkInterface **)(v4 + 29800);
  if (v6) {
    IO80211Controller::postMessage(a1, v6, 0x4Au, v9, 0x68uLL, 1);
  }
  AppleBCMWLANCore::handleExtendedEventData((uint64_t)a1, a2);
  uint64_t result = AppleBCMWLANJoinAdapter::handleAuth(*(void *)(*((void *)a1 + 9) + 5424), a2);
  uint64_t v8 = *((void *)a1 + 9);
  if (*(unsigned char *)(v8 + 12064))
  {
    *(_DWORD *)(v8 + 14020) |= 1u;
    *(_DWORD *)(*((void *)a1 + 9) + 14024)  = mapBcmStatusToApple80211IOReturnScan(*(_DWORD *)(a2 + 8));
    uint64_t result = mapBcmStatusToApple80211IOReturnIEEEStatus(*(_DWORD *)(a2 + 12));
    *(_DWORD *)(*((void *)a1 + 9) + 14028)  = result;
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleAssocEvent(IO80211Controller *a1, uint64_t a2)
{
  v8[0]  = mapBcmStatusToApple80211IOReturnScan(*(_DWORD *)(a2 + 8));
  v8[1]  = mapBcmStatusToApple80211IOReturnIEEEStatus(*(_DWORD *)(a2 + 12));
  uint64_t v4 = *((void *)a1 + 9);
  uint64_t v5 = *(IO80211SkywalkInterface **)(v4 + 11304);
  if (v5)
  {
    IO80211Controller::postMessage(a1, v5, 0x4Eu, v8, 8uLL, 1);
    uint64_t v4 = *((void *)a1 + 9);
  }
  uint64_t v6 = *(IO80211SkywalkInterface **)(v4 + 29800);
  if (v6) {
    IO80211Controller::postMessage(a1, v6, 0x4Eu, v8, 8uLL, 1);
  }
  AppleBCMWLANCore::handleExtendedEventData((uint64_t)a1, a2);
  return AppleBCMWLANJoinAdapter::handleAssoc(*(AppleBCMWLANJoinAdapter **)(*((void *)a1 + 9) + 5424), a2);
}

uint64_t AppleBCMWLANCore::handleSetSSIDEvent(IO80211Controller *a1, uint64_t a2)
{
  v8[0]  = mapBcmStatusToApple80211IOReturnScan(*(_DWORD *)(a2 + 8));
  v8[1]  = mapBcmReasonToApple80211IOReturnIEEEReason(*(_DWORD *)(a2 + 12));
  uint64_t v4 = *(IO80211SkywalkInterface **)(*((void *)a1 + 9) + 11304);
  if (v4) {
    IO80211Controller::postMessage(a1, v4, 2u, v8, 8uLL, 1);
  }
  AppleBCMWLANCore::handleExtendedEventData((uint64_t)a1, a2);
  uint64_t v5 = *((void *)a1 + 9);
  uint64_t v6 = *(IO80211SkywalkInterface **)(v5 + 11312);
  if (v6)
  {
    IO80211Controller::postMessage(a1, v6, 2u, v8, 8uLL, 1);
    uint64_t v5 = *((void *)a1 + 9);
  }
  AppleBCMWLANJoinAdapter::handleSetSSID(*(AppleBCMWLANJoinAdapter **)(v5 + 5424), a2);
  return AppleBCMWLANCore::collectDtimConfigFromFW(a1);
}

uint64_t AppleBCMWLANCore::handleLinkEvent(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[9];
  if (*(_DWORD *)(v3 + 780) < 5u || (*(unsigned __int8 *)(a2 + 46) | 2) == 2)
  {
    AppleBCMWLANNetAdapter::handleLink(*(void *)(v3 + 5600), a2);
    if (AppleBCMWLANBGScanAdapter::generateAndApplyNewPrivateMACForScans(*(AppleBCMWLANCore ****)(a1[9] + 5504))
      && (*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d:Failed to configure Private MAC Address for Scans \n", "handleLinkEvent", 23556);
      }
    }
    return IO80211BssManager::getCurrentChannel();
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void *))(*a1 + 1848))(a1);
    if (result)
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        return CCLogStream::logAlert(v5, "[dk] %s@%d:Link event not intended for STA or AWDL interface! Dropping!\n", "handleLinkEvent", 23488);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleReassocEvent(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 8) != 6)
  {
    uint64_t v3 = (IO80211Controller *)result;
    AppleBCMWLANJoinAdapter::enableSupplicantEvents(*(AppleBCMWLANJoinAdapter **)(*(void *)(result + 72) + 5424));
    v19[0]  = mapBcmStatusToApple80211IOReturnScan(*(_DWORD *)(a2 + 8));
    v19[1]  = mapBcmReasonToApple80211IOReturnIEEEReason(*(_DWORD *)(a2 + 12));
    uint64_t v4 = *(IO80211SkywalkInterface **)(*((void *)v3 + 9) + 11304);
    if (v4) {
      IO80211Controller::postMessage(v3, v4, 0x49u, v19, 8uLL, 1);
    }
    AppleBCMWLANCore::handleExtendedEventData((uint64_t)v3, a2);
    AppleBCMWLANCore::collectWmeParameters(v3);
    atomic_fetch_or((atomic_uint *volatile)(*((void *)v3 + 9) + 10388), 0x20000u);
    memset(v20, 0, 460);
    HIDWORD(v20[0])  = *(_DWORD *)(a2 + 8);
    uint64_t v5 = HIDWORD(v20[0]);
    uint64_t v6 = stringFromStatusInEvent(HIDWORD(v20[0]), 0);
    int v7 = *(unsigned __int16 *)(a2 + 2);
    uint64_t v8 = *(unsigned int *)(a2 + 16);
    uint64_t v17 = *(unsigned int *)(a2 + 12);
    int v18 = v6;
    int v9 = 0;
    if (IO80211_io80211isDebuggable()) {
      int v9 = *(unsigned __int8 *)(a2 + 24);
    }
    if (IO80211_io80211isDebuggable()) {
      int v10 = *(unsigned __int8 *)(a2 + 25);
    }
    else {
      int v10 = 0;
    }
    if (IO80211_io80211isDebuggable()) {
      int v11 = *(unsigned __int8 *)(a2 + 26);
    }
    else {
      int v11 = 0;
    }
    if (IO80211_io80211isDebuggable()) {
      int v12 = *(unsigned __int8 *)(a2 + 27);
    }
    else {
      int v12 = 0;
    }
    if (IO80211_io80211isDebuggable()) {
      int v13 = *(unsigned __int8 *)(a2 + 28);
    }
    else {
      int v13 = 0;
    }
    if (IO80211_io80211isDebuggable()) {
      int v14 = *(unsigned __int8 *)(a2 + 29);
    }
    else {
      int v14 = 0;
    }
    uint64_t result = IOLog("%s: status = %lu %s, reason = %lu, flags = 0x%x, authtype = %lu, addr = %02X:%02X:%02X:%02X:%02X:%02X\n", "handleReassocEvent", v5, v18, v17, v7, v8, v9, v10, v11, v12, v13, v14);
    uint64_t v15 = *((void *)v3 + 9);
    long long v16 = *(IO80211SkywalkInterface **)(v15 + 29800);
    if (v16)
    {
      uint64_t result = IO80211Controller::postMessage(v3, v16, 9u, v20, 0x1CCuLL, 1);
      uint64_t v15 = *((void *)v3 + 9);
    }
    if (*(unsigned char *)(v15 + 12064))
    {
      *(_DWORD *)(v15 + 14020) |= 2u;
      *(_DWORD *)(*((void *)v3 + 9) + 14032)  = mapBcmStatusToApple80211IOReturnScan(*(_DWORD *)(a2 + 8));
      uint64_t result = mapBcmStatusToApple80211IOReturnIEEEStatus(*(_DWORD *)(a2 + 12));
      *(_DWORD *)(*((void *)v3 + 9) + 14036)  = result;
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleRoamScanStartEvent(AppleBCMWLANCore *a1, uint64_t a2)
{
  int v32 = 0;
  AppleBCMWLANCore::setBeaconListenInterval(a1);
  *(unsigned char *)(*((void *)a1 + 9) + 658AppleBCMWLANCommandMonitor::free(this - 3) = 1;
  int v4 = mapBcmStatusToApple80211IOReturnScan(*(_DWORD *)(a2 + 8));
  v31[0]  = v4;
  int v5 = mapBcmReasonToApple80211IOReturnRoam(*(_DWORD *)(a2 + 12));
  v31[1]  = v5;
  int v6 = (*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 9) + 5400) + 368))();
  if ((v6 - 4377) > 0x16 || ((1 << (v6 - 25)) & 0x400C03) == 0)
  {
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)
      || ((*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1),
          (CCLogStream::shouldLogConsole() & 1) == 0))
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = *(_DWORD *)(a2 + 8);
        int v24 = *(_DWORD *)(a2 + 12);
        *(_DWORD *)buf  = 67110658;
        int v34 = 73;
        __int16 v35 = 2080;
        unint64_t v36 = "handleRoamScanStartEvent";
        __int16 v37 = 1024;
        int v38 = 22663;
        __int16 v39 = 1024;
        int v40 = v4;
        __int16 v41 = 1024;
        *(_DWORD *)BOOL v42 = v23;
        *(_WORD *)&v42[4]  = 1024;
        *(_DWORD *)&v42[6]  = v5;
        __int16 v43 = 1024;
        int v44 = v24;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: roamStartEv.status: %d wle->status %d roamStartEv.reason: %d wle->reason: %d \n", buf, 0x30u);
      }
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v30 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logInfo(v30, "[dk] %s@%d:roamStartEv.status: %d wle->status %d roamStartEv.reason: %d wle->reason: %d \n", "handleRoamScanStartEvent", 22663, v4, *(_DWORD *)(a2 + 8), v5, *(_DWORD *)(a2 + 12));
      }
    }
  }
  else
  {
    if (*(_DWORD *)(a2 + 20) < 6u)
    {
      if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)
        || ((*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1),
            (CCLogStream::shouldLogConsole() & 1) == 0))
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          int v11 = *(_DWORD *)(a2 + 20);
          *(_DWORD *)buf  = 67110146;
          int v34 = 65;
          __int16 v35 = 2080;
          unint64_t v36 = "handleRoamScanStartEvent";
          __int16 v37 = 1024;
          int v38 = 22599;
          __int16 v39 = 1024;
          int v40 = v11;
          __int16 v41 = 2048;
          *(void *)BOOL v42 = 6;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: Insufficent space, wle->datalen[%u] < %lu\n", buf, 0x28u);
        }
      }
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v29 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logAlert(v29, "[dk] %s@%d:Insufficent space, wle->datalen[%u] < %lu\n", "handleRoamScanStartEvent", 22599, *(_DWORD *)(a2 + 20), 6);
        }
      }
    }
    else
    {
      LOWORD(v32)  = *(_WORD *)(a2 + 52);
      AppleBCMWLANLQM::updateRSSI(*(AppleBCMWLANLQM **)(*((void *)a1 + 9) + 5608), (__int16)v32);
      if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)
        || ((*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1),
            (CCLogStream::shouldLogConsole() & 1) == 0))
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          int v8 = *(_DWORD *)(a2 + 8);
          int v9 = *(_DWORD *)(a2 + 12);
          *(_DWORD *)buf  = 67110914;
          int v34 = 73;
          __int16 v35 = 2080;
          unint64_t v36 = "handleRoamScanStartEvent";
          __int16 v37 = 1024;
          int v38 = 22595;
          __int16 v39 = 1024;
          int v40 = v4;
          __int16 v41 = 1024;
          *(_DWORD *)BOOL v42 = v8;
          *(_WORD *)&v42[4]  = 1024;
          *(_DWORD *)&v42[6]  = v5;
          __int16 v43 = 1024;
          int v44 = v9;
          __int16 v45 = 1024;
          int v46 = (__int16)v32;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: roamStartEv.status: %d wle->status %d roamStartEv.reason: %d wle->reason: %d Rssi %d\n", buf, 0x36u);
        }
      }
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          int v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logInfo(v10, "[dk] %s@%d:roamStartEv.status: %d wle->status %d roamStartEv.reason: %d wle->reason: %d Rssi %d\n", "handleRoamScanStartEvent", 22595, v4, *(_DWORD *)(a2 + 8), v5, *(_DWORD *)(a2 + 12), (__int16)v32);
        }
      }
    }
    if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 105))
    {
      if ((*(unsigned char *)(*((void *)a1 + 9) + 17354) & 2) != 0 && v5 == 4)
      {
        unsigned int v12 = *(unsigned __int16 *)(a2 + 50) - 8;
        if (v12 >= 0x11)
        {
          int v13 = 0;
          uint64_t v14 = a2 + 56;
          do
          {
            if (*(_WORD *)v14 == 1)
            {
              int v15 = *(_DWORD *)(v14 + 8);
              int v16 = *(_DWORD *)(v14 + 12);
              int v17 = *(_DWORD *)(v14 + 16);
              int v18 = *(_DWORD *)(v14 + 20);
              int v19 = *(_DWORD *)(v14 + 24);
              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
              {
                (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                  CCLogStream::logAlert(v22, "[dk] %s@%d: BSSID %02x:%02x:%02x:%02x:%02x:%02x, RSSI %d roaming due to beacon protection failures -> BSS beacon protection: Unprotected beacon rx count (%d), beacons without MME IE (%d), beacon with mic failure (%d), beacon with replay fails (%d), no. of error since good beacon rx (%d)\n", "handleRoamScanStartEvent", 22648, *(unsigned __int8 *)(a2 + 24), *(unsigned __int8 *)(a2 + 25), *(unsigned __int8 *)(a2 + 26), *(unsigned __int8 *)(a2 + 27), *(unsigned __int8 *)(a2 + 28), *(unsigned __int8 *)(a2 + 29), *(__int16 *)(a2 + 52), v15, v16, v17, v18, v19);
                }
              }
            }
            uint64_t v20 = *(unsigned __int16 *)(v14 + 2);
            __int16 v21 = v13 + v20;
            v14 += v20 + 4;
            v13 += v20 + 4;
          }
          while ((unsigned __int16)(v21 + 4) < (unsigned __int16)v12);
        }
      }
    }
  }
  uint64_t v25 = *((void *)a1 + 9);
  int v26 = *(IO80211SkywalkInterface **)(v25 + 11304);
  if (v26)
  {
    IO80211Controller::postMessage(a1, v26, 0x89u, v31, 0xCuLL, 1);
    uint64_t v25 = *((void *)a1 + 9);
  }
  int v27 = *(IO80211SkywalkInterface **)(v25 + 11312);
  if (v27) {
    IO80211Controller::postMessage(a1, v27, 0x89u, 0, 0, 1);
  }
  AppleBCMWLANCore::handleExtendedEventData((uint64_t)a1, a2);
  return AppleBCMWLANLQM::setPendingBssidUpdatePostRoam(*(void *)(*((void *)a1 + 9) + 5608), 1);
}

uint64_t AppleBCMWLANCore::handleRoamEvent(AppleBCMWLANCore *a1, uint64_t a2)
{
  ++*(_DWORD *)(*((void *)a1 + 9) + 17952);
  ++*(_DWORD *)(*((void *)a1 + 9) + 17984);
  *(unsigned char *)(*((void *)a1 + 9) + 14058)  = *(unsigned char *)(*((void *)a1 + 9)
                                                       + 600 * *(unsigned int *)(*((void *)a1 + 9) + 14076)
                                                       + 12682);
  isAssociatedOnHighBand  = IO80211BssManager::isAssociatedOnHighBand(*(IO80211BssManager **)(*((void *)a1 + 9) + 5440));
  int v33 = 0;
  uint64_t v32 = 0;
  if (AppleBCMWLANCore::dumpEventLogReportedStats(a1, 7))
  {
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)
      || ((*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1),
          (CCLogStream::shouldLogConsole() & 1) == 0))
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf  = 67109634;
        *(_DWORD *)&uint8_t buf[4] = 78;
        __int16 v35 = 2080;
        unint64_t v36 = "handleRoamEvent";
        __int16 v37 = 1024;
        int v38 = 22995;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: LQM-WiFi-Roam: Fail to dump roam target evaluation\n", buf, 0x18u);
      }
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v29 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logNotice(v29, "[dk] %s@%d:LQM-WiFi-Roam: Fail to dump roam target evaluation\n", "handleRoamEvent", 22995);
      }
    }
  }
  *(_DWORD *)(*((void *)a1 + 9) + 13904)  = mapBcmStatusToApple80211IOReturnScan(*(_DWORD *)(a2 + 8));
  *(_DWORD *)(*((void *)a1 + 9) + 13908)  = mapBcmReasonToApple80211IOReturnRoam(*(_DWORD *)(a2 + 12));
  *(_DWORD *)(*((void *)a1 + 9) + 13932)  = AppleBCMWLANRoamAdapter::getCurrentRoamProfile(*(AppleBCMWLANRoamAdapter **)(*((void *)a1 + 9) + 5576));
  CurrentBSS  = AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(*((void *)a1 + 9) + 5440));
  if (!CurrentBSS) {
    goto LABEL_32;
  }
  uint64_t v6 = CurrentBSS;
  if ((*(unsigned int (**)(uint64_t))(*(void *)CurrentBSS + 712))(CurrentBSS)) {
    *(_DWORD *)(*((void *)a1 + 9) + 13928) |= 1u;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 720))(v6)) {
    *(_DWORD *)(*((void *)a1 + 9) + 13928) |= 2u;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 664))(v6)) {
    *(_DWORD *)(*((void *)a1 + 9) + 13928) |= 4u;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 728))(v6)) {
    *(_DWORD *)(*((void *)a1 + 9) + 13928) |= 0x10u;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 744))(v6)) {
    *(_DWORD *)(*((void *)a1 + 9) + 13928) |= 0x20u;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 736))(v6)) {
    *(_DWORD *)(*((void *)a1 + 9) + 13928) |= 8u;
  }
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 184))(v6);
    if (v7)
    {
      *(unsigned char *)(*((void *)a1 + 9) + 13960)  = *(unsigned char *)v7;
      *(unsigned char *)(*((void *)a1 + 9) + 13961)  = *(unsigned char *)(v7 + 1);
      *(unsigned char *)(*((void *)a1 + 9) + 13962)  = *(unsigned char *)(v7 + 2);
      uint64_t v8 = *((void *)a1 + 9);
      int v9 = *(_DWORD *)v7;
      *(_WORD *)(v8 + 13996)  = *(_WORD *)(v7 + 4);
      *(_DWORD *)(v8 + 13992)  = v9;
    }
    *(_DWORD *)(*((void *)a1 + 9) + 13944)  = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 256))(v6);
    IO80211BssManager::getCurrentRSSI(*(IO80211BssManager **)(*((void *)a1 + 9) + 5440), (int *)(*((void *)a1 + 9) + 13936));
    (*(void (**)(uint64_t))(*(void *)v6 + 264))(v6);
    ChanSpecConvToApple80211Channel();
    *(_DWORD *)(*((void *)a1 + 9) + 13952)  = v33;
  }
  int v10 = *(_DWORD *)(a2 + 12);
  if (v10 == 1) {
    char v11 = isAssociatedOnHighBand;
  }
  else {
    char v11 = 1;
  }
  if ((v11 & 1) == 0)
  {
    if (*(int *)(*((void *)a1 + 9) + 13936) >= -64) {
      *(_DWORD *)(*((void *)a1 + 9) + 13908)  = mapBcmReasonToApple80211IOReturnRoam(8);
    }
LABEL_32:
    int v10 = *(_DWORD *)(a2 + 12);
  }
  if (v10 == 1
    && (IO80211BssManager::isAssociatedOn5G(*(IO80211BssManager **)(*((void *)a1 + 9) + 5440)) & 1) == 0
    && *(int *)(*((void *)a1 + 9) + 13936) >= -64)
  {
    *(_DWORD *)(*((void *)a1 + 9) + 13908)  = mapBcmReasonToApple80211IOReturnRoam(8);
  }
  *(void *)buf  = 0;
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  *(void *)(*((void *)a1 + 9) + 13920)  = *(void *)buf / 0xF4240uLL;
  *(_DWORD *)(*((void *)a1 + 9) + 13972)  = IO80211BssManager::getCurrentAuthType(*(IO80211BssManager **)(*((void *)a1 + 9) + 5440));
  *(_DWORD *)(*((void *)a1 + 9) + 13980)  = IO80211BssManager::getCurrentBSSAKMs(*(IO80211BssManager **)(*((void *)a1 + 9) + 5440));
  if (*(unsigned char *)(*((void *)a1 + 9) + 12065))
  {
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)
      || ((*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1),
          (CCLogStream::shouldLogConsole() & 1) == 0))
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf  = 67109634;
        *(_DWORD *)&uint8_t buf[4] = 65;
        __int16 v35 = 2080;
        unint64_t v36 = "handleRoamEvent";
        __int16 v37 = 1024;
        int v38 = 23044;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: Using simulated roam status substate\n", buf, 0x18u);
      }
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v30 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v30, "[dk] %s@%d:Using simulated roam status substate\n", "handleRoamEvent", 23044);
      }
    }
    *(_DWORD *)(*((void *)a1 + 9) + 14020)  = *(_DWORD *)(*((void *)a1 + 9) + 12076);
    *(_DWORD *)(*((void *)a1 + 9) + 14024)  = *(_DWORD *)(*((void *)a1 + 9) + 12080);
    *(_DWORD *)(*((void *)a1 + 9) + 14028)  = *(_DWORD *)(*((void *)a1 + 9) + 12084);
    *(_DWORD *)(*((void *)a1 + 9) + 14032)  = *(_DWORD *)(*((void *)a1 + 9) + 12088);
    *(_DWORD *)(*((void *)a1 + 9) + 14036)  = *(_DWORD *)(*((void *)a1 + 9) + 12092);
    *(_DWORD *)(*((void *)a1 + 9) + 14040)  = *(_DWORD *)(*((void *)a1 + 9) + 12096);
    *(_DWORD *)(*((void *)a1 + 9) + 14044)  = *(_DWORD *)(*((void *)a1 + 9) + 12100);
  }
  int v12 = *(_DWORD *)(a2 + 8);
  if (v12 != 3) {
    goto LABEL_51;
  }
  if (AppleBCMWLANCore::getRoamNoNetworkReason((uint64_t)a1, a2)) {
    *(_DWORD *)(*((void *)a1 + 9) + 13904)  = -528350133;
  }
  int v12 = *(_DWORD *)(a2 + 8);
  if (v12 == 3)
  {
    ++*(_DWORD *)(*((void *)a1 + 9) + 17944);
    ++*(_DWORD *)(*((void *)a1 + 9) + 17976);
    uint64_t v13 = *((void *)a1 + 9) + 600 * *(unsigned int *)(*((void *)a1 + 9) + 14076);
    ++*(unsigned char *)(v13 + 12680);
    uint64_t v14 = *((void *)a1 + 9);
    char v15 = *(unsigned char *)(v14 + 600 * *(unsigned int *)(v14 + 14076) + 12680);
    uint64_t v16 = 14056;
  }
  else
  {
LABEL_51:
    switch(v12)
    {
      case 1:
        uint64_t v18 = *((void *)a1 + 9) + 600 * *(unsigned int *)(*((void *)a1 + 9) + 14076);
        ++*(unsigned char *)(v18 + 12686);
        uint64_t v14 = *((void *)a1 + 9);
        char v15 = *(unsigned char *)(v14 + 600 * *(unsigned int *)(v14 + 14076) + 12686);
        uint64_t v16 = 14062;
        break;
      case 2:
        uint64_t v19 = *((void *)a1 + 9) + 600 * *(unsigned int *)(*((void *)a1 + 9) + 14076);
        ++*(unsigned char *)(v19 + 12685);
        uint64_t v14 = *((void *)a1 + 9);
        char v15 = *(unsigned char *)(v14 + 600 * *(unsigned int *)(v14 + 14076) + 12685);
        uint64_t v16 = 14061;
        break;
      case 4:
        uint64_t v17 = *((void *)a1 + 9) + 600 * *(unsigned int *)(*((void *)a1 + 9) + 14076);
        ++*(unsigned char *)(v17 + 12684);
        uint64_t v14 = *((void *)a1 + 9);
        char v15 = *(unsigned char *)(v14 + 600 * *(unsigned int *)(v14 + 14076) + 12684);
        uint64_t v16 = 14060;
        break;
      default:
        goto LABEL_58;
    }
  }
  *(unsigned char *)(v14 + v16)  = v15;
LABEL_58:
  AppleBCMWLANCore::handleExtendedEventData((uint64_t)a1, a2);
  AppleBCMWLANNetAdapter::handleRoam(*(void *)(*((void *)a1 + 9) + 5600), a2);
  AppleBCMWLANCore::collectDtimConfigFromFW(a1);
  uint64_t result = AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(*((void *)a1 + 9) + 5440));
  if (result) {
    uint64_t result = AppleBCMWLANCore::postRoamCompletionStatus(a1);
  }
  if (!*(_DWORD *)(a2 + 8))
  {
    *(_DWORD *)(*((void *)a1 + 9) + 600 * *(unsigned int *)(*((void *)a1 + 9) + 14076) + 12692)  = *(_DWORD *)(a2 + 12);
    __int16 v21 = (const OSMetaClassBase *)(*(uint64_t (**)(AppleBCMWLANCore *, void))(*(void *)a1 + 1888))(a1, 0);
    uint64_t v22 = OSMetaClassBase::safeMetaCast(v21, (const OSMetaClass *)gAppleBCMWLANSkywalkInterfaceMetaClass);
    *(_DWORD *)buf  = 0;
    unsigned int v31 = 0;
    if (v22)
    {
      AppleBCMWLANSkywalkInterface::retrievePendingPacketsOnRoam((AppleBCMWLANSkywalkInterface *)v22, (unsigned int *)buf, &v31);
      uint8_t v23 = buf[0];
      char v24 = v31;
    }
    else
    {
      char v24 = 0;
      uint8_t v23 = 0;
    }
    *(unsigned char *)(*((void *)a1 + 9) + 600 * *(unsigned int *)(*((void *)a1 + 9) + 14076) + 12688)  = v23;
    *(unsigned char *)(*((void *)a1 + 9) + 600 * *(unsigned int *)(*((void *)a1 + 9) + 14076) + 12264)  = *(unsigned char *)(*((void *)a1 + 9) + 600 * *(unsigned int *)(*((void *)a1 + 9) + 14076) + 12688);
    *(unsigned char *)(*((void *)a1 + 9) + 600 * *(unsigned int *)(*((void *)a1 + 9) + 14076) + 12689)  = v24;
    *(unsigned char *)(*((void *)a1 + 9) + 600 * *(unsigned int *)(*((void *)a1 + 9) + 14076) + 12265)  = *(unsigned char *)(*((void *)a1 + 9) + 600 * *(unsigned int *)(*((void *)a1 + 9) + 14076) + 12689);
    uint64_t result = AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(*((void *)a1 + 9) + 5440));
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 768))(result);
      *(_DWORD *)(*((void *)a1 + 9) + 600 * *(unsigned int *)(*((void *)a1 + 9) + 14076) + 12700)  = result;
    }
    uint64_t v25 = *((void *)a1 + 9);
    if (!*(unsigned char *)(v25 + 14072))
    {
      uint64_t result = AppleBCMWLANCore::printRoamInfo(a1, *(_DWORD *)(v25 + 14076));
      ++*(_DWORD *)(*((void *)a1 + 9) + 14076);
      uint64_t v26 = *((void *)a1 + 9);
      unsigned int v27 = *(_DWORD *)(v26 + 14076);
      if (v27 > 2) {
        unsigned int v27 = 0;
      }
      *(_DWORD *)(v26 + 14076)  = v27;
      uint64_t v28 = *((void *)a1 + 9) + 600 * *(unsigned int *)(*((void *)a1 + 9) + 14076);
      *(void *)(v28 + 12680)  = 0;
      *(void *)(v28 + 12672)  = 0;
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleRoamPrepEvent(IO80211Controller *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 12);
  int v31 = 0;
  v30[0]  = v4;
  int v5 = (*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 9) + 5400) + 368))(*(void *)(*((void *)a1 + 9) + 5400));
  if ((v5 - 4377) <= 0x16 && ((1 << (v5 - 25)) & 0x400C03) != 0)
  {
    HIWORD(v31)  = *(_WORD *)(a2 + 52);
    int v7 = SHIWORD(v31);
    *(_DWORD *)(*((void *)a1 + 9) + 13940)  = SHIWORD(v31);
    if (!(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1)
      || ((*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1),
          (CCLogStream::shouldLogConsole() & 1) == 0))
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = *(_DWORD *)(a2 + 12);
        if (IO80211_io80211isDebuggable()) {
          int v9 = *(unsigned __int8 *)(a2 + 24);
        }
        else {
          int v9 = 0;
        }
        if (IO80211_io80211isDebuggable()) {
          int v10 = *(unsigned __int8 *)(a2 + 25);
        }
        else {
          int v10 = 0;
        }
        if (IO80211_io80211isDebuggable()) {
          int v11 = *(unsigned __int8 *)(a2 + 26);
        }
        else {
          int v11 = 0;
        }
        if (IO80211_io80211isDebuggable()) {
          int v12 = *(unsigned __int8 *)(a2 + 27);
        }
        else {
          int v12 = 0;
        }
        if (IO80211_io80211isDebuggable()) {
          int v13 = *(unsigned __int8 *)(a2 + 28);
        }
        else {
          int v13 = 0;
        }
        if (IO80211_io80211isDebuggable()) {
          int v14 = *(unsigned __int8 *)(a2 + 29);
        }
        else {
          int v14 = 0;
        }
        int v15 = *(_DWORD *)(*((void *)a1 + 9) + 13940);
        *(_DWORD *)buf  = 67111938;
        int v33 = 65;
        __int16 v34 = 2080;
        __int16 v35 = "handleRoamPrepEvent";
        __int16 v36 = 1024;
        int v37 = 22524;
        __int16 v38 = 1024;
        int v39 = v8;
        __int16 v40 = 1024;
        int v41 = v9;
        __int16 v42 = 1024;
        int v43 = v10;
        __int16 v44 = 1024;
        int v45 = v11;
        __int16 v46 = 1024;
        int v47 = v12;
        __int16 v48 = 1024;
        int v49 = v13;
        __int16 v50 = 1024;
        int v51 = v14;
        __int16 v52 = 1024;
        int v53 = v7;
        __int16 v54 = 1024;
        int v55 = v15;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: Roam reason:%d addr  = %02X:%02X:%02X:%02X:%02X:%02X  Roam RSSI:%d Target RSSI:%d\n", buf, 0x4Eu);
      }
    }
    if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v22 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        int v23 = *(_DWORD *)(a2 + 12);
        if (IO80211_io80211isDebuggable()) {
          int v24 = *(unsigned __int8 *)(a2 + 24);
        }
        else {
          int v24 = 0;
        }
        if (IO80211_io80211isDebuggable()) {
          int v25 = *(unsigned __int8 *)(a2 + 25);
        }
        else {
          int v25 = 0;
        }
        if (IO80211_io80211isDebuggable()) {
          int v26 = *(unsigned __int8 *)(a2 + 26);
        }
        else {
          int v26 = 0;
        }
        if (IO80211_io80211isDebuggable()) {
          int v27 = *(unsigned __int8 *)(a2 + 27);
        }
        else {
          int v27 = 0;
        }
        if (IO80211_io80211isDebuggable()) {
          int v28 = *(unsigned __int8 *)(a2 + 28);
        }
        else {
          int v28 = 0;
        }
        if (IO80211_io80211isDebuggable()) {
          int v29 = *(unsigned __int8 *)(a2 + 29);
        }
        else {
          int v29 = 0;
        }
        CCLogStream::logAlert(v22, "[dk] %s@%d:Roam reason:%d addr  = %02X:%02X:%02X:%02X:%02X:%02X  Roam RSSI:%d Target RSSI:%d\n", "handleRoamPrepEvent", 22524, v23, v24, v25, v26, v27, v28, v29, v7, *(_DWORD *)(*((void *)a1 + 9) + 13940));
      }
    }
  }
  v30[1]  = *(_DWORD *)(a2 + 24);
  LOWORD(v31)  = *(_WORD *)(a2 + 28);
  uint64_t v16 = *((void *)a1 + 9);
  uint64_t v17 = *(IO80211SkywalkInterface **)(v16 + 11304);
  if (v17)
  {
    IO80211Controller::postMessage(a1, v17, 0x8Bu, v30, 0xCuLL, 1);
    uint64_t v16 = *((void *)a1 + 9);
  }
  uint64_t v18 = *(IO80211SkywalkInterface **)(v16 + 11312);
  if (v18) {
    IO80211Controller::postMessage(a1, v18, 0x8Bu, 0, 0, 1);
  }
  AppleBCMWLANCore::handleExtendedEventData((uint64_t)a1, a2);
  uint64_t result = AppleBCMWLANCore::setBeaconListenInterval(a1);
  ++*(unsigned char *)(*((void *)a1 + 9) + 12064);
  uint64_t v20 = *((void *)a1 + 9);
  int v21 = *(_DWORD *)(a2 + 24);
  *(_WORD *)(v20 + 14016)  = *(_WORD *)(a2 + 28);
  *(_DWORD *)(v20 + 14012)  = v21;
  return result;
}

uint64_t AppleBCMWLANCore::handleMICErrorEvent(IO80211Controller *a1, uint64_t a2)
{
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 0))
  {
    int v4 = *(IO80211SkywalkInterface **)(*((void *)a1 + 9) + 11304);
    if (v4)
    {
      if ((*(_WORD *)(a2 + 2) & 4) != 0) {
        unsigned int v5 = 6;
      }
      else {
        unsigned int v5 = 5;
      }
      IO80211Controller::postMessage(a1, v4, v5, (void *)(a2 + 24), 6uLL, 1);
    }
  }
  uint64_t result = (*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
  if (result)
  {
    (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      int v7 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      if ((*(_WORD *)(a2 + 2) & 4) != 0) {
        int v8 = "multicast";
      }
      else {
        int v8 = "unicast";
      }
      return CCLogStream::logWarn(v7, "[dk] %s@%d: %s MIC Error\n", "handleMICErrorEvent", 22386, v8);
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleCountryCodeChangedEvent(AppleBCMWLANCore *a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 20) > 2u)
  {
    strlcpy((char *)(*((void *)a1 + 9) + 6752), (const char *)(a2 + 48), 3uLL);
    *(unsigned char *)(*((void *)a1 + 9) + 6755)  = 0;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v11, "[dk] %s@%d:WiFiCC : Country code changed from %s to %s\n", "handleCountryCodeChangedEvent", 22340, (const char *)(*((void *)a1 + 9) + 6756), (const char *)(*((void *)a1 + 9) + 6752));
      }
    }
    AppleBCMWLANCore::setLMTPC(a1);
    int v6 = strncmp((const char *)(*((void *)a1 + 9) + 6756), (const char *)(*((void *)a1 + 9) + 6752), 4uLL);
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    if (v6)
    {
      if (result)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          int v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logAlert(v12, "[dk] %s@%d:WiFiCC : Querying FW; old country queried was: %s\n",
            "handleCountryCodeChangedEvent",
            22346,
            (const char *)(*((void *)a1 + 9) + 6756));
        }
      }
      strlcpy((char *)(*((void *)a1 + 9) + 6756), (const char *)(*((void *)a1 + 9) + 6752), 4uLL);
      *(unsigned char *)(*((void *)a1 + 9) + 6759)  = 0;
      uint64_t result = AppleBCMWLANCore::handleCountryCodeChangeToRepopulateChannels(a1);
    }
    else
    {
      if (result)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          int v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          uint64_t result = CCLogStream::logInfo(v13, "[dk] %s@%d:WiFiCC : Skip querying FW; old country queried for chan list was: %s \n",
                     "handleCountryCodeChangedEvent",
                     22351,
                     (const char *)(*((void *)a1 + 9) + 6756));
        }
      }
      uint64_t v7 = *((void *)a1 + 9);
      int v8 = *(IO80211SkywalkInterface **)(v7 + 29800);
      if (v8)
      {
        uint64_t result = IO80211Controller::postMessage(a1, v8, 0xBu, 0, 0, 1);
        uint64_t v7 = *((void *)a1 + 9);
      }
      int v9 = *(IO80211SkywalkInterface **)(v7 + 11312);
      if (v9) {
        uint64_t result = IO80211Controller::postMessage(a1, v9, 0xBu, 0, 0, 1);
      }
    }
    int v10 = *(IO80211SkywalkInterface **)(*((void *)a1 + 9) + 11304);
    if (v10)
    {
      return IO80211Controller::postMessage(a1, v10, 0xBu, 0, 0, 1);
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        unsigned int v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        return CCLogStream::logCrit(v5, "[dk] %s@%d:Handling country code change event failed - payload insufficient for CC (length %d)\n", "handleCountryCodeChangedEvent", 22331, *(_DWORD *)(a2 + 20));
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleICVErrorEvent(IO80211Controller *a1, uint64_t a2)
{
  v8[0]  = mapBcmStatusToApple80211IOReturnIEEEStatus(*(_DWORD *)(a2 + 8));
  v8[1]  = mapBcmReasonToApple80211IOReturnIEEEReason(*(_DWORD *)(a2 + 12));
  uint64_t v4 = *((void *)a1 + 9);
  unsigned int v5 = *(IO80211SkywalkInterface **)(v4 + 11304);
  if (v5)
  {
    IO80211Controller::postMessage(a1, v5, 0xEu, v8, 8uLL, 1);
    uint64_t v4 = *((void *)a1 + 9);
  }
  AppleBCMWLANJoinAdapter::handleICVErrorEvent(*(void *)(v4 + 5424), a2);
  uint64_t result = (*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
  if (result)
  {
    (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      return CCLogStream::logWarn(v7, "[dk] %s@%d: Decryption Failure\n", "handleICVErrorEvent", 22221);
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handlePSKEvent(AppleBCMWLANCore *a1, uint64_t a2)
{
  updated  = AppleBCMWLANCore::updateTransitionDisabledInfo(a1, a2);
  if (*(_DWORD *)(a2 + 8) == 6 && (int v5 = updated, AppleBCMWLANCore::featureFlagIsBitSet(a1, 65))) {
    AppleBCMWLANJoinAdapter::updateTransDisabledModeAsync(*(AppleBCMWLANJoinAdapter **)(*((void *)a1 + 9) + 5424), v5);
  }
  else {
    int v5 = 0x80000000;
  }
  int v20 = -1431655766;
  v17[0]  = mapBcmStatusToApple80211IOReturnScan(*(_DWORD *)(a2 + 8));
  v17[1]  = mapBcmReasonToApple80211IOReturnSupplicant(*(_DWORD *)(a2 + 12));
  void v17[2] = mapBcmSupplicantEventToAppleStatus(*(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 12));
  v17[3]  = v5;
  long long v18 = 0uLL;
  int v19 = 0;
  LOBYTE(v20)  = AppleBCMWLANJoinAdapter::isJoining(*(AppleBCMWLANJoinAdapter **)(*((void *)a1 + 9) + 5424));
  int v10 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(*((void *)a1 + 9)
                                                                                            + 5400)
                                                                              + 368))(*(void *)(*((void *)a1 + 9) + 5400), v6, v7, v8, v9);
  BOOL v11 = (v10 - 4378) > 0x15 || ((1 << (v10 - 26)) & 0x200601) == 0;
  if (!v11 && *(unsigned char *)(a2 + 53) == 57)
  {
    int v12 = *(_DWORD *)(a2 + 74);
    long long v18 = *(_OWORD *)(a2 + 58);
    int v19 = v12;
  }
  uint64_t v13 = *((void *)a1 + 9);
  int v14 = *(IO80211SkywalkInterface **)(v13 + 11304);
  if (v14)
  {
    IO80211Controller::postMessage(a1, v14, 0x4Cu, v17, 0x28uLL, 1);
    uint64_t v13 = *((void *)a1 + 9);
  }
  uint64_t result = AppleBCMWLANJoinAdapter::handleSupplicantEvent(*(void *)(v13 + 5424), a2);
  uint64_t v16 = *((void *)a1 + 9);
  if (*(unsigned char *)(v16 + 12064))
  {
    *(_DWORD *)(v16 + 14020) |= 4u;
    *(_DWORD *)(*((void *)a1 + 9) + 14040)  = mapBcmStatusToApple80211IOReturnScan(*(_DWORD *)(a2 + 8));
    uint64_t result = mapBcmReasonToApple80211IOReturnSupplicant(*(_DWORD *)(a2 + 12));
    *(_DWORD *)(*((void *)a1 + 9) + 14044)  = result;
  }
  return result;
}

uint64_t AppleBCMWLANCore::handlePruneEvent(IO80211Controller *a1, uint64_t a2)
{
  if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
  {
    (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      CCLogStream::logNotice(v7, "[dk] %s@%d: PRUNE event %lu\n", "handlePruneEvent", 22127, *(unsigned int *)(a2 + 4));
    }
  }
  if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
  {
    (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      uint64_t v10 = *(unsigned int *)(a2 + 8);
      uint64_t v9 = *(unsigned int *)(a2 + 12);
      BOOL v11 = (const char *)stringFromReason(*(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 12));
      CCLogStream::logNotice(v8, "    status  = %lu, reason  = %lu %s, flags  = 0x%x, authtype  = %lu, addr  = %02x:%02x:%02x:%02x:%02x:%02x\n", v10, v9, v11, *(unsigned __int16 *)(a2 + 2), *(unsigned int *)(a2 + 16), *(unsigned __int8 *)(a2 + 24), *(unsigned __int8 *)(a2 + 25), *(unsigned __int8 *)(a2 + 26), *(unsigned __int8 *)(a2 + 27), *(unsigned __int8 *)(a2 + 28), *(unsigned __int8 *)(a2 + 29));
    }
  }
  int v13 = -1431655766;
  v12[0]  = mapBcmStatusToApple80211IOReturnScan(*(_DWORD *)(a2 + 8));
  uint64_t result = mapBcmReasonToApple80211IOReturnPrune(*(_DWORD *)(a2 + 12));
  int v5 = *(_DWORD *)(a2 + 24);
  v12[1]  = result;
  void v12[2] = v5;
  LOWORD(v1AppleBCMWLANCommandMonitor::free(this - 3) = *(_WORD *)(a2 + 28);
  uint64_t v6 = *(IO80211SkywalkInterface **)(*((void *)a1 + 9) + 11304);
  if (v6) {
    return IO80211Controller::postMessage(a1, v6, 0x4Bu, v12, 0x10uLL, 1);
  }
  return result;
}

void *AppleBCMWLANCore::handlePSMWatchdog(void *a1, unsigned int *a2)
{
  unsigned int v4 = a2[3];
  if (v4 == 1)
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v5 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:Detect WCI2 hang!\n");
      }
    }
  }
  else
  {
    unsigned int v6 = a2[2];
    if (v4 == 3 && v6 == 3)
    {
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logAlert(v10, "[dk] %s@%d:Debug PSMl Watchdog event.\n");
        }
      }
    }
    else if (!(v6 | v4))
    {
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logAlert(v8, "[dk] %s@%d:Default ucode lockup.\n");
        }
      }
    }
  }
  return AppleBCMWLANCore::reportMicrocodeLockup(a1, a2);
}

void *AppleBCMWLANCore::handlePMAlertEvent(IOService *a1, uint64_t a2, const void **a3)
{
  int v32 = 0;
  AppleBCMWLANCore::retrieveExcessPMParams(a1, a2, &v32);
  int v5 = v32;
  HIDWORD(a1[1].OSObject::OSObjectInterface::__vftable[412].free)  = v32 != 0;
  unsigned int v6 = a1[1].OSObject::OSObjectInterface::__vftable;
  if (!LODWORD(v6[2211].free))
  {
    int v31 = 0;
    values  = a1;
    __int16 v42 = AppleBCMWLANCore::handleExcessPMPeriodAsyncCallBack;
    uint64_t v43 = 0;
    free  = (AppleBCMWLANCommander *)v6[338].free;
    *(void *)buf  = &v31;
    *(void *)__int16 v34 = 4;
    uint64_t v8 = AppleBCMWLANCommander::sendIOVarSet(free, (uint64_t)"excess_pm_period");
    if (v8)
    {
      uint64_t v9 = v8;
      if (!((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1)
        || (((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1),
            (CCLogStream::shouldLogConsole() & 1) == 0))
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v10 = ((uint64_t (*)(IOService *, uint64_t))a1->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(a1, v9);
          *(_DWORD *)buf  = 67110146;
          *(_DWORD *)&uint8_t buf[4] = 65;
          *(_WORD *)__int16 v34 = 2080;
          *(void *)&v34[2]  = "handlePMAlertEvent";
          __int16 v35 = 1024;
          int v36 = 23421;
          __int16 v37 = 1024;
          int v38 = v9;
          __int16 v39 = 2080;
          uint64_t v40 = v10;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d:  cannot set excess_pm_period to 0 : ret %x: %s  -> got WLC_E_PM_ALERT\n", buf, 0x28u);
        }
      }
      if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
      {
        ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        if (CCLogStream::shouldLog())
        {
          int v30 = v5;
          uint64_t v21 = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
          int v28 = (const char *)((uint64_t (*)(IOService *, uint64_t))a1->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(a1, v9);
          uint64_t v22 = (CCLogStream *)v21;
          int v5 = v30;
          CCLogStream::logAlert(v22, "[dk] %s@%d: cannot set excess_pm_period to 0 : ret %x: %s  -> got WLC_E_PM_ALERT\n", "handlePMAlertEvent", 23421, v9, v28);
        }
      }
    }
    int v31 = 0;
    values  = a1;
    __int16 v42 = AppleBCMWLANCore::handleExcessPMPercentAsyncCallBack;
    uint64_t v43 = 0;
    BOOL v11 = (AppleBCMWLANCommander *)a1[1].OSObject::OSObjectInterface::__vftable[338].free;
    *(void *)buf  = &v31;
    *(void *)__int16 v34 = 4;
    uint64_t v12 = AppleBCMWLANCommander::sendIOVarSet(v11, (uint64_t)"excess_pm_percent");
    if (v12)
    {
      uint64_t v13 = v12;
      if (!((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1)
        || (((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1),
            (CCLogStream::shouldLogConsole() & 1) == 0))
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v14 = ((uint64_t (*)(IOService *, uint64_t))a1->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(a1, v13);
          *(_DWORD *)buf  = 67110146;
          *(_DWORD *)&uint8_t buf[4] = 65;
          *(_WORD *)__int16 v34 = 2080;
          *(void *)&v34[2]  = "handlePMAlertEvent";
          __int16 v35 = 1024;
          int v36 = 23433;
          __int16 v37 = 1024;
          int v38 = v13;
          __int16 v39 = 2080;
          uint64_t v40 = v14;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d:  cannot set excess_pm_percent to 0 : ret %x: %s  -> got WLC_E_PM_ALERT\n", buf, 0x28u);
        }
      }
      if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
      {
        ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        if (CCLogStream::shouldLog())
        {
          int v23 = v5;
          uint64_t v24 = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
          int v29 = (const char *)((uint64_t (*)(IOService *, uint64_t))a1->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(a1, v13);
          int v25 = (CCLogStream *)v24;
          int v5 = v23;
          CCLogStream::logAlert(v25, "[dk] %s@%d: cannot set excess_pm_percent to 0 : ret %x: %s  -> got WLC_E_PM_ALERT\n", "handlePMAlertEvent", 23433, v13, v29);
        }
      }
    }
    values  = a1;
    __int16 v42 = AppleBCMWLANCore::handleGetPowerSaveModeAsyncCallBack;
    uint64_t v43 = 0;
    int v15 = (AppleBCMWLANCommander *)a1[1].OSObject::OSObjectInterface::__vftable[338].free;
    *(_DWORD *)buf  = 262148;
    if (AppleBCMWLANCommander::sendIOCtlGet(v15, 85, (uint64_t)&kNoTxPayload, (unsigned __int16 *)buf, (uint64_t)&values, 0))
    {
      if (!((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1)
        || (((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1),
            (CCLogStream::shouldLogConsole() & 1) == 0))
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf  = 67109120;
          *(_DWORD *)&uint8_t buf[4] = 73;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c Failed to get Current Power Save Mode\n", buf, 8u);
        }
      }
      if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
      {
        ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        if (CCLogStream::shouldLog())
        {
          int v26 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
          CCLogStream::logInfo(v26, "Failed to get Current Power Save Mode\n");
        }
      }
    }
    unsigned int v6 = a1[1].OSObject::OSObjectInterface::__vftable;
  }
  uint64_t result = (void *)IO80211BssManager::isAssociated((IO80211BssManager *)v6[340].init);
  if (result)
  {
    uint64_t v17 = a1[1].OSObject::OSObjectInterface::__vftable;
    if (LODWORD(v17[412].init))
    {
      HIDWORD(v17[412].init)  = 1;
    }
    else
    {
      if (v17[706].free)
      {
        if (!((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1)
          || (((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1),
              (CCLogStream::shouldLogConsole() & 1) == 0))
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf  = 67109634;
            *(_DWORD *)&uint8_t buf[4] = 65;
            *(_WORD *)__int16 v34 = 2080;
            *(void *)&v34[2]  = "handlePMAlertEvent";
            __int16 v35 = 1024;
            int v36 = 23458;
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d:  Send BLACKLIST_NETWORK\n", buf, 0x18u);
          }
        }
        if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
        {
          ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
          if (CCLogStream::shouldLog())
          {
            int v27 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
            CCLogStream::logAlert(v27, "[dk] %s@%d: Send BLACKLIST_NETWORK\n", "handlePMAlertEvent", 23458);
          }
        }
        uint64_t result = (void *)IO80211Controller::postMessage((IO80211Controller *)a1, (IO80211SkywalkInterface *)a1[1].OSObject::OSObjectInterface::__vftable[706].free, 0x23u, 0, 0, 1);
        uint64_t v17 = a1[1].OSObject::OSObjectInterface::__vftable;
      }
      HIDWORD(v17[412].init)  = 0;
    }
  }
  else
  {
    if (!((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1)
      || (((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1),
          (CCLogStream::shouldLogConsole() & 1) == 0))
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf  = 67109634;
        *(_DWORD *)&uint8_t buf[4] = 65;
        *(_WORD *)__int16 v34 = 2080;
        *(void *)&v34[2]  = "handlePMAlertEvent";
        __int16 v35 = 1024;
        int v36 = 23464;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: Received PM ALERT Event in Un-Associated Sleep Mode\n", buf, 0x18u);
      }
    }
    uint64_t result = (void *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
    if (result)
    {
      ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
      uint64_t result = (void *)CCLogStream::shouldLog();
      if (result)
      {
        long long v18 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        uint64_t result = (void *)CCLogStream::logAlert(v18, "[dk] %s@%d:Received PM ALERT Event in Un-Associated Sleep Mode\n", "handlePMAlertEvent", 23464);
      }
    }
  }
  if (v5)
  {
    *(void *)buf  = OSString::withCString("FirmwareEvent.bin");
    values  = OSData::withBytes(a3[1], *(unsigned int *)a3);
    int v19 = (CCFaultReporter *)a1[1].OSObject::OSObjectInterface::__vftable[346].free;
    int v20 = OSDictionary::withObjects((const OSObject **)&values, (const OSObject **)buf, 1u, 0);
    CCFaultReporter::reportFault(v19, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0x5BB5u, "handlePMAlertEvent", v20, -469793529, 0);
    return AppleBCMWLANUtil::releaseOSObjectArray(buf, (const OSString **)&values, (const OSObject **)1);
  }
  return result;
}

AppleBCMWLANCore *AppleBCMWLANCore::handleTraceEvent(AppleBCMWLANCore *result, uint64_t a2)
{
  uint64_t v2 = result;
  unsigned int v3 = *(_DWORD *)(a2 + 20);
  if (v3 <= 0xF)
  {
    uint64_t result = (AppleBCMWLANCore *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)v2 + 1848))(v2);
      uint64_t result = (AppleBCMWLANCore *)CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v2 + 1848))(v2);
        return (AppleBCMWLANCore *)CCLogStream::logCrit(v16, "[dk] %s@%d:Event message buffer underflow\n", "handleTraceEvent", 22056);
      }
    }
  }
  else if (*(unsigned char *)(a2 + 48) == 1)
  {
    unsigned int v5 = bswap32(*(unsigned __int16 *)(a2 + 50)) >> 16;
    if (v5 + 16 <= v3)
    {
      if (*(unsigned char *)(a2 + 49) == 1)
      {
        uint64_t v8 = (void *)(a2 + 64);
        unsigned int v9 = v3 - 16;
        if (v9 >= v5) {
          size_t v10 = v5;
        }
        else {
          size_t v10 = v9;
        }
        BOOL v11 = OSData::withBytesNoCopy(v8, v10);
        if (v11)
        {
          uint64_t v12 = v11;
          int v13 = AppleBCMWLANCore::handleMsgTraceBlock(v2, v11);
          uint64_t result = (AppleBCMWLANCore *)((uint64_t (*)(OSData *))v12->release)(v12);
          if (!v13) {
            return result;
          }
        }
        else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v2 + 1848))(v2))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)v2 + 1848))(v2);
          if (CCLogStream::shouldLog())
          {
            uint64_t v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v2 + 1848))(v2);
            CCLogStream::logAlert(v17, "[dk] %s@%d:Failed to allocate eventHeaderAndPayload\n", "handleTraceEvent", 22082);
          }
        }
        IO80211Hexdump();
        keys  = OSString::withCString("RawTraceEvent.bin");
        values  = OSData::withBytes((const void *)a2, *(unsigned int *)(a2 + 20) + 48);
        uint64_t v14 = *(CCFaultReporter **)(*((void *)v2 + 9) + 5544);
        int v15 = OSDictionary::withObjects((const OSObject **)&values, (const OSObject **)&keys, 1u, 0);
        CCFaultReporter::reportFault(v14, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0x5657u, "handleTraceEvent", v15, -469793521, 0);
        return (AppleBCMWLANCore *)AppleBCMWLANUtil::releaseOSObjectArray(&keys, (const OSString **)&values, (const OSObject **)1);
      }
    }
    else
    {
      uint64_t result = (AppleBCMWLANCore *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)result + 1848))(result);
      if (result)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)v2 + 1848))(v2);
        uint64_t result = (AppleBCMWLANCore *)CCLogStream::shouldLog();
        if (result)
        {
          unsigned int v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v2 + 1848))(v2);
          return (AppleBCMWLANCore *)CCLogStream::logAlert(v6, "[dk] %s@%d: Invalid trace event payload length %u allowed %u\n");
        }
      }
    }
  }
  else
  {
    uint64_t result = (AppleBCMWLANCore *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)v2 + 1848))(v2);
      uint64_t result = (AppleBCMWLANCore *)CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v2 + 1848))(v2);
        return (AppleBCMWLANCore *)CCLogStream::logAlert(v7, "[dk] %s@%d: [unsupported version --> dhd version:%d dongle version:%d]\n");
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::csaReceived(AppleBCMWLANCore *this)
{
  if (IO80211BssManager::isAssociated(*(IO80211BssManager **)(*((void *)this + 9) + 5440)))
  {
    *(_DWORD *)(*((void *)this + 9) + 19688)  = 1;
    uint64_t v2 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"bcn_li_bcn");
    if (v2)
    {
      uint64_t v3 = v2;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          uint64_t v7 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v3);
          CCLogStream::logAlert(v6, "[dk] %s@%d: Error: cannot set bcn wake up to %d: ret %x: %s\n", "csaReceived", 16097, 1, 1, v7);
        }
      }
    }
    IO80211Controller::postMessage(this, *(IO80211SkywalkInterface **)(*((void *)this + 9) + 11304), 0xD1u, 0, 0, 1);
    return AppleBCMWLANLQM::setCsaReceived(*(AppleBCMWLANLQM **)(*((void *)this + 9) + 5608));
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        unsigned int v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        return CCLogStream::logAlert(v5, "[dk] %s@%d:CSA received while device not yet Associated, Bail out\n", "csaReceived", 16080);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleWSECEvent(IO80211Controller *a1, uint64_t a2)
{
  __int16 v29 = 0;
  isDevFusedOrCSRInternal  = AppleBCMWLAN_isDevFusedOrCSRInternal();
  if (*(_DWORD *)(a2 + 20) <= 5u)
  {
    if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        unsigned int v5 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d: handleWSECEvent: Invalid wle message length=%u, too small to hold event length=%u\n");
      }
    }
LABEL_19:
    uint64_t v16 = "UNKNOWN";
    return CCFaultReporter::reportFault(*(CCFaultReporter **)(*((void *)a1 + 9) + 5544), 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0x625Fu, "handleWSECEvent", 0, -469793486, "%s", v16);
  }
  if (isDevFusedOrCSRInternal)
  {
    IOParseBootArgNumber("wlan.wsec.reassoc", (char *)&v29 + 1, 1);
    IOParseBootArgNumber("wlan.wsec.disassoc", &v29, 1);
  }
  if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
  {
    (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      long long v18 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      int v19 = "enabled";
      if (HIBYTE(v29)) {
        int v20 = "enabled";
      }
      else {
        int v20 = "disabled";
      }
      if (!(_BYTE)v29) {
        int v19 = "disabled";
      }
      CCLogStream::logAlert(v18, "[dk] %s@%d: handleWSECEvent: Re-assoc %s, Dis-assoc %s\n", "handleWSECEvent", 25083, v20, v19);
    }
  }
  if (*(_WORD *)(a2 + 52) != 1)
  {
    if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v22 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v22, "[dk] %s@%d: handleWSECEvent: Invalid WSEC event, unknown type[%u]\n");
      }
    }
    goto LABEL_19;
  }
  if (*(_DWORD *)(a2 + 20) <= 0x2Bu)
  {
    if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v21 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v21, "[dk] %s@%d: handleWSECEvent: Invalid message length[%u] < %u\n");
      }
    }
  }
  else
  {
    uint64_t v6 = IOMallocZeroData();
    if (v6)
    {
      uint64_t v7 = (char *)v6;
      int v28 = *(_DWORD *)(a2 + 60);
      int v27 = *(_DWORD *)(a2 + 56);
      int v26 = *(_DWORD *)(a2 + 72);
      int v8 = *(unsigned __int16 *)(a2 + 70);
      int v9 = *(unsigned __int16 *)(a2 + 78);
      int v10 = *(_DWORD *)(a2 + 80);
      int v11 = *(_DWORD *)(a2 + 84);
      int v12 = *(unsigned __int16 *)(a2 + 88);
      int v25 = *(unsigned __int16 *)(a2 + 76);
      int v13 = *(unsigned __int16 *)(a2 + 68);
      if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          int v23 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logAlert(v23, "[dk] %s@%d: WLC_WSEC_EVENT_PTK_PN_SYNC_ERROR: TSF[0x%08x%08x] keyID[%d] keyIDX[0x%04x] tid[%d] rx SN[0x%04x] PN[0x%08x%04x], RX PN[0x%08x%04x] span[ time[0x%08x] pkts[0x%04x]  \n", "handleWSECEvent", 25153, v28, v27, *(unsigned __int8 *)(a2 + 64), v25, *(unsigned __int8 *)(a2 + 65), v13, v26, v8, v10, v9, v11, v12);
        }
      }
      *(void *)uint64_t v7 = 0x100000011;
      *((_DWORD *)v7 + 2)  = 1;
      IO80211BssManager::getCurrentBSSID(*(IO80211BssManager **)(*((void *)a1 + 9) + 5440), (ether_addr *)v7 + 2);
      *((_DWORD *)v7 + 5)  = 36;
      long long v14 = *(_OWORD *)(a2 + 56);
      long long v15 = *(_OWORD *)(a2 + 72);
      *((_DWORD *)v7 + 14)  = *(_DWORD *)(a2 + 88);
      *(_OWORD *)(v7 + 40)  = v15;
      *(_OWORD *)(v7 + 24)  = v14;
      IO80211Controller::postMessage(a1, *(IO80211SkywalkInterface **)(*((void *)a1 + 9) + 11304), 0x92u, v7, 0x98uLL, 1);
      IOFreeData();
    }
    else if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v24 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v24, "[dk] %s@%d: Allocation failure for return WSEC notification\n");
      }
    }
  }
  uint64_t v16 = "WLC_WSEC_EVENT_PTK_PN_SYNC_ERROR";
  return CCFaultReporter::reportFault(*(CCFaultReporter **)(*((void *)a1 + 9) + 5544), 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0x625Fu, "handleWSECEvent", 0, -469793486, "%s", v16);
}

uint64_t AppleBCMWLANCore::handleSCChanQualEvent(void *a1, uint64_t a2)
{
  unsigned int v5 = (_DWORD *)(a2 + 48);
  unsigned int v4 = *(_DWORD *)(a2 + 48);
  if (v4 >= 8) {
    int v6 = 0;
  }
  else {
    int v6 = 84;
  }
  if (v4 == 6) {
    int v6 = 80;
  }
  if (v4 >= 6) {
    int v7 = v6;
  }
  else {
    int v7 = 72;
  }
  uint64_t v8 = IOMallocZeroData();
  if (v8)
  {
    uint64_t v9 = v8;
    if ((v5 & 3) != 0)
    {
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v24 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logAlert(v24, "[dk] %s@%d:Alignment failure, event_chanim_sc_stats\n");
        }
      }
    }
    else if ((v4 & 0xFFFFFFFC) == 4)
    {
      if (*(_DWORD *)(a2 + 52) == v7)
      {
        if (*(unsigned char *)(a2 + 57) == 1)
        {
          if (*(unsigned char *)(a2 + 58) == 1)
          {
            uint64_t v10 = *(unsigned __int16 *)(a2 + 64);
            *(_WORD *)(v8 + 4)  = v10;
            *(_DWORD *)uint64_t v8 = *(_DWORD *)(a2 + 60);
            *(_DWORD *)(v8 + 56)  = *(_DWORD *)(a2 + 116);
            *(_OWORD *)(v8 + 8)  = *(_OWORD *)(a2 + 68);
            *(_OWORD *)(v8 + 24)  = *(_OWORD *)(a2 + 84);
            *(_OWORD *)(v8 + 40)  = *(_OWORD *)(a2 + 100);
            unsigned int v11 = *(_DWORD *)(a2 + 48);
            if (v11 - 5 <= 1) {
              *(_WORD *)(v8 + 6)  = *(_WORD *)(a2 + 66);
            }
            if (v11 >= 6)
            {
              *(_DWORD *)(v8 + 60)  = *(_DWORD *)(a2 + 120);
              *(_WORD *)(v8 + 64)  = *(_WORD *)(a2 + 124);
              if (*(_DWORD *)(a2 + 48) >= 7u)
              {
                *(_WORD *)(v8 + 66)  = *(_WORD *)(a2 + 126);
                *(_DWORD *)(v8 + 68)  = *(_DWORD *)(a2 + 128);
              }
            }
            AppleBCMWLANChanSpec::getAppleChannelSpec(*(int ***)(a1[9] + 17576), v10);
            PrimaryChannel  = ChanSpecGetPrimaryChannel();
            unsigned int v13 = PrimaryChannel;
            long long v14 = "N/A";
            long long v15 = "No";
            if (*(_DWORD *)v9)
            {
              float v16 = (float)*(unsigned int *)v9;
              if (PrimaryChannel > 0x23)
              {
                unsigned int v17 = (float)((float)((float)*(unsigned int *)(v9 + 20) / v16) * 100.0);
                BOOL v18 = v17 > 0x19;
                BOOL v19 = v17 > 0x19;
                *(unsigned char *)(a1[9] + 19544)  = v19;
                if (v17 > 0x19) {
                  long long v15 = "Yes";
                }
                int v20 = "MC Tx";
              }
              else
              {
                if ((float)((float)(50 * *(_DWORD *)(v9 + 28)) / 100.0)
                   + (float)((float)((float)*(unsigned int *)(v9 + 24) / v16) * 100.0) >= 0x64)
                  unsigned int v17 = 100;
                else {
                  unsigned int v17 = (float)((float)(50 * *(_DWORD *)(v9 + 28)) / 100.0)
                }
                      + (float)((float)((float)*(unsigned int *)(v9 + 24) / v16) * 100.0);
                BOOL v18 = v17 > 0x19;
                BOOL v19 = v17 > 0x19;
                *(unsigned char *)(a1[9] + 19544)  = v19;
                if (v17 > 0x19) {
                  long long v15 = "Yes";
                }
                int v20 = "AC/BT Tx";
              }
              if (v18) {
                long long v14 = v20;
              }
            }
            else
            {
              unsigned int v17 = 0;
              BOOL v19 = 0;
            }
            if (*(unsigned char *)(a1[9] + 18341))
            {
              if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
              {
                (*(void (**)(void *))(*a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  __int16 v29 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                  CCLogStream::logInfo(v29, "[dk] %s@%d:|| [Channel: %-3d] ===========================================================================\n", "handleSCChanQualEvent", 25334, v13);
                }
              }
              if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
              {
                (*(void (**)(void *))(*a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  int v30 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                  CCLogStream::logInfo(v30, "[dk] %s@%d:|| [Summary] --------------------------------------------------------------------------------\n", "handleSCChanQualEvent", 25335);
                }
              }
              if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
              {
                (*(void (**)(void *))(*a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  int v31 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                  CCLogStream::logInfo(v31, "[dk] %s@%d:||   Tx Blanking                                    |                       | %-12s ||\n", "handleSCChanQualEvent", 25336, v15);
                }
              }
              if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
              {
                (*(void (**)(void *))(*a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  int v32 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                  CCLogStream::logInfo(v32, "[dk] %s@%d:||   Tx Blanking Reason                             |                       | %-12s ||\n", "handleSCChanQualEvent", 25337, v14);
                }
              }
              if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
              {
                (*(void (**)(void *))(*a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  int v33 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                  CCLogStream::logInfo(v33, "[dk] %s@%d:||   Tx Blanking Thresh Perc                        |                       | %-12u ||\n", "handleSCChanQualEvent", 25338, 25);
                }
              }
              if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
              {
                (*(void (**)(void *))(*a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  __int16 v34 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                  CCLogStream::logInfo(v34, "[dk] %s@%d:||   Tx Blanking Perc                               |                       | %-12u ||\n", "handleSCChanQualEvent", 25339, v17);
                }
              }
              if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
              {
                (*(void (**)(void *))(*a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  __int16 v35 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                  CCLogStream::logInfo(v35, "[dk] %s@%d:||   Duration on SC                                 | sc_only_rx_dur        | %-12u ||\n", "handleSCChanQualEvent", 25340, *(_DWORD *)(v9 + 8));
                }
              }
              if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
              {
                (*(void (**)(void *))(*a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  int v36 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                  CCLogStream::logInfo(v36, "[dk] %s@%d:||   Duration total                                 | time_dur              | %-12u ||\n", "handleSCChanQualEvent", 25341, *(_DWORD *)v9);
                }
              }
              if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
              {
                (*(void (**)(void *))(*a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  __int16 v37 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                  CCLogStream::logInfo(v37, "[dk] %s@%d:||   Timestamp                                      | timestamp             | %-12u ||\n", "handleSCChanQualEvent", 25342, *(_DWORD *)(v9 + 56));
                }
              }
              if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
              {
                (*(void (**)(void *))(*a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  int v38 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                  CCLogStream::logInfo(v38, "[dk] %s@%d:|| [Details] --------------------------------------------------------------------------------\n", "handleSCChanQualEvent", 25343);
                }
              }
              if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
              {
                (*(void (**)(void *))(*a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  __int16 v39 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                  CCLogStream::logInfo(v39, "[dk] %s@%d:||   Rx only on SC                                  | sc_only_rx_dur        | %-12u ||\n", "handleSCChanQualEvent", 25344, *(_DWORD *)(v9 + 8));
                }
              }
              if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
              {
                (*(void (**)(void *))(*a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v40 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                  CCLogStream::logInfo(v40, "[dk] %s@%d:||   Rx on SC when MC active                        | sc_rx_mc_rx_dur       | %-12u ||\n", "handleSCChanQualEvent", 25345, *(_DWORD *)(v9 + 12));
                }
              }
              if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
              {
                (*(void (**)(void *))(*a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  int v41 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                  CCLogStream::logInfo(v41, "[dk] %s@%d:||   Rx on SC when AC active                        | sc_rx_ac_rx_dur       | %-12u ||\n", "handleSCChanQualEvent", 25346, *(_DWORD *)(v9 + 16));
                }
              }
              if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
              {
                (*(void (**)(void *))(*a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  __int16 v42 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                  CCLogStream::logInfo(v42, "[dk] %s@%d:||   Rx on SC when BT Main active                   | sc_rx_bt_rx_dur       | %-12u ||\n", "handleSCChanQualEvent", 25347, *(_DWORD *)(v9 + 28));
                }
              }
              if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
              {
                (*(void (**)(void *))(*a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v43 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                  CCLogStream::logInfo(v43, "[dk] %s@%d:||   Rx on SC when MC Tx                            | sc_rx_mc_tx_dur       | %-12u ||\n", "handleSCChanQualEvent", 25348, *(_DWORD *)(v9 + 20));
                }
              }
              if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
              {
                (*(void (**)(void *))(*a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  __int16 v44 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                  CCLogStream::logInfo(v44, "[dk] %s@%d:||   Rx on SC when AC-BT Tx                         | sc_rx_ac_bt_tx_dur    | %-12u ||\n", "handleSCChanQualEvent", 25349, *(_DWORD *)(v9 + 24));
                }
              }
              if ((*v5 - 5) <= 1)
              {
                if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
                {
                  (*(void (**)(void *))(*a1 + 1848))(a1);
                  if (CCLogStream::shouldLog())
                  {
                    __int16 v52 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                    CCLogStream::logInfo(v52, "[dk] %s@%d:||   BT Rx transitions                              | sc_btrx_trans_cnt     | %-12u ||\n", "handleSCChanQualEvent", 25351, *(unsigned __int16 *)(v9 + 6));
                  }
                }
              }
              if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
              {
                (*(void (**)(void *))(*a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  int v45 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                  CCLogStream::logInfo(v45, "[dk] %s@%d:||   WLAN SC awake and BT SC LE scan overlapped     | sc_btle_overlap_dur   | %-12u ||\n", "handleSCChanQualEvent", 25352, *(_DWORD *)(v9 + 32));
                }
              }
              if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
              {
                (*(void (**)(void *))(*a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  __int16 v46 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                  CCLogStream::logInfo(v46, "[dk] %s@%d:||   WLAN SC awake and BT SC Page scan overlapped   | sc_btpage_overlap_dur | %-12u ||\n", "handleSCChanQualEvent", 25353, *(_DWORD *)(v9 + 36));
                }
              }
              if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
              {
                (*(void (**)(void *))(*a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  int v47 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                  CCLogStream::logInfo(v47, "[dk] %s@%d:||   WLAN Aux Tx blanked BT SC LE scan              | ac_btle_blnk_dur      | %-12u ||\n", "handleSCChanQualEvent", 25354, *(_DWORD *)(v9 + 40));
                }
              }
              if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
              {
                (*(void (**)(void *))(*a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  __int16 v48 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                  CCLogStream::logInfo(v48, "[dk] %s@%d:||   WLAN Aux Tx blanked BT SC Page scan            | ac_btpage_blnk_dur    | %-12u ||\n", "handleSCChanQualEvent", 25355, *(_DWORD *)(v9 + 44));
                }
              }
              if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
              {
                (*(void (**)(void *))(*a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  int v49 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                  CCLogStream::logInfo(v49, "[dk] %s@%d:||   WLAN Aux awake and BT SC LE scan overlapped    | ac_btle_overlap_dur   | %-12u ||\n", "handleSCChanQualEvent", 25356, *(_DWORD *)(v9 + 48));
                }
              }
              if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
              {
                (*(void (**)(void *))(*a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  __int16 v50 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                  CCLogStream::logInfo(v50, "[dk] %s@%d:||   WLAN Aux awake and BT SC Page scan overlapped  | ac_btpage_overlap_dur | %-12u ||\n", "handleSCChanQualEvent", 25357, *(_DWORD *)(v9 + 52));
                }
              }
            }
            uint64_t v22 = *(void *)(a1[9] + 5432);
            if (!v22) {
              goto LABEL_115;
            }
            if (v19)
            {
              int v23 = 4;
            }
            else
            {
              if (!v17)
              {
                AppleBCMWLANScanAdapter::setSCTxBlankStatus(v22, 1);
                ++*(void *)(a1[9] + 17920);
                goto LABEL_115;
              }
              int v23 = 2;
            }
            AppleBCMWLANScanAdapter::setSCTxBlankStatus(v22, v23);
            AppleBCMWLANCore::updateSCTxBlankingSummary(a1, v17, v13);
LABEL_115:
            return IOFreeData();
          }
          if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
          {
            (*(void (**)(void *))(*a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              int v53 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
              CCLogStream::logAlert(v53, "[dk] %s@%d:Per channel event channle count  = %d, not 1\n");
            }
          }
        }
        else if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
        {
          (*(void (**)(void *))(*a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            int v27 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
            CCLogStream::logAlert(v27, "[dk] %s@%d:Invalid event_chanim_sc_stats->id  = %d\n");
          }
        }
      }
      else if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          int v26 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logAlert(v26, "[dk] %s@%d:Invalid event_chanim_sc_stats->length  = %d, expected len  = %d\n");
        }
      }
    }
    else if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v25 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v25, "[dk] %s@%d:Unsupported SC_CHANIM_STATS event Version  = %d\n");
      }
    }
    int v28 = *(CCFaultReporter **)(a1[9] + 5544);
    if (v28) {
      CCFaultReporter::reportFault(v28, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0x6325u, "handleSCChanQualEvent", 0, -469793488, 0);
    }
    goto LABEL_115;
  }
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 1848))(a1);
  if (result)
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      int v51 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      return CCLogStream::logAlert(v51, "[dk] %s@%d:Allocation failure\n", "handleSCChanQualEvent", 25243);
    }
  }
  return result;
}

CCFaultReporter *AppleBCMWLANCore::handleMSCSEvent(void *a1, uint64_t a2)
{
  if (*(_WORD *)(a2 + 48) == 1)
  {
    unsigned int v4 = *(unsigned __int16 *)(a2 + 50);
    uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 1848))(a1);
    if (v4 <= 0xF)
    {
      if (!v5 || ((*(void (**)(void *))(*a1 + 1848))(a1), (CCLogStream::shouldLogConsole() & 1) == 0))
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          int v17 = *(unsigned __int16 *)(a2 + 50);
          *(_DWORD *)buf  = 67109890;
          int v22 = 65;
          __int16 v23 = 2080;
          uint64_t v24 = "handleMSCSEvent";
          __int16 v25 = 1024;
          int v26 = 25193;
          __int16 v27 = 1024;
          *(_DWORD *)int v28 = v17;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: unexpected event_mscs length  = %u\n", buf, 0x1Eu);
        }
      }
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          BOOL v18 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logAlert(v18, "[dk] %s@%d:unexpected event_mscs length  = %u\n");
        }
      }
    }
    else
    {
      if (!v5 || ((*(void (**)(void *))(*a1 + 1848))(a1), (CCLogStream::shouldLogConsole() & 1) == 0))
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          int v6 = *(unsigned __int8 *)(a2 + 60);
          int v7 = *(unsigned __int8 *)(a2 + 61);
          int v8 = *(unsigned __int16 *)(a2 + 62);
          int v9 = *(_DWORD *)(a2 + 52);
          int v10 = *(unsigned __int8 *)(a2 + 56);
          int v11 = *(unsigned __int8 *)(a2 + 57);
          int v12 = *(unsigned __int8 *)(a2 + 58);
          int v13 = *(unsigned __int8 *)(a2 + 59);
          *(_DWORD *)buf  = 67111682;
          int v22 = 65;
          __int16 v23 = 2080;
          uint64_t v24 = "handleMSCSEvent";
          __int16 v25 = 1024;
          int v26 = 25199;
          __int16 v27 = 1024;
          *(_DWORD *)int v28 = v6;
          *(_WORD *)&v28[4]  = 1024;
          *(_DWORD *)&v28[6]  = v7;
          __int16 v29 = 1024;
          int v30 = v8;
          __int16 v31 = 1024;
          int v32 = v9;
          __int16 v33 = 1024;
          int v34 = v10;
          __int16 v35 = 1024;
          int v36 = v11;
          __int16 v37 = 1024;
          int v38 = v12;
          __int16 v39 = 1024;
          int v40 = v13;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: WiFi-QoS: req_type=%u status_flags=0x%02x status_code=%u stream_timeout=%u up_bitmap=0x%02x up_limit=%u fc_type=%u fc_mask=0x%02x\n", buf, 0x48u);
        }
      }
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          BOOL v19 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logAlert(v19, "[dk] %s@%d:WiFi-QoS: req_type=%u status_flags=0x%02x status_code=%u stream_timeout=%u up_bitmap=0x%02x up_limit=%u fc_type=%u fc_mask=0x%02x\n", "handleMSCSEvent", 25199, *(unsigned __int8 *)(a2 + 60), *(unsigned __int8 *)(a2 + 61), *(unsigned __int16 *)(a2 + 62), *(_DWORD *)(a2 + 52), *(unsigned __int8 *)(a2 + 56), *(unsigned __int8 *)(a2 + 57), *(unsigned __int8 *)(a2 + 58), *(unsigned __int8 *)(a2 + 59));
        }
      }
      *(unsigned char *)(a1[9] + 29938)  = (*(unsigned char *)(a2 + 61) & 0x20) != 0;
      if (!(*(uint64_t (**)(void *))(*a1 + 1848))(a1)
        || ((*(void (**)(void *))(*a1 + 1848))(a1), (CCLogStream::shouldLogConsole() & 1) == 0))
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          int v14 = *(unsigned __int8 *)(a1[9] + 29938);
          *(_DWORD *)buf  = 67109890;
          int v22 = 65;
          if (v14) {
            long long v15 = "active";
          }
          else {
            long long v15 = "inactive";
          }
          __int16 v23 = 2080;
          uint64_t v24 = "handleMSCSEvent";
          __int16 v25 = 1024;
          int v26 = 25201;
          __int16 v27 = 2080;
          *(void *)int v28 = v15;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: WiFi-QoS: QoS MSCS is %s\n", buf, 0x22u);
        }
      }
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          int v20 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logAlert(v20, "[dk] %s@%d:WiFi-QoS: QoS MSCS is %s\n");
        }
      }
    }
  }
  uint64_t result = *(CCFaultReporter **)(a1[9] + 5544);
  if (result) {
    return (CCFaultReporter *)CCFaultReporter::reportFault(result, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0x6276u, "handleMSCSEvent", 0, -469793488, 0);
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleUlOfdmaDisableEvent(uint64_t result, uint64_t a2)
{
  if (*(_WORD *)(a2 + 48) != 1)
  {
    uint64_t v3 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 1848))(v3);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        unsigned int v4 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 1848))(v3);
        return CCLogStream::logAlert(v4, "[dk] %s@%d:WLC_E_ULMU_DISABLED_REASON_UPD: Invalid version number %u for the event\n", "handleUlOfdmaDisableEvent", 24026, *(unsigned __int16 *)(a2 + 48));
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleObssDetectEvent(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1);
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 1848))(a1);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1);
      return CCLogStream::logAlert(v5, "[dk] %s@%d:OBSS Detection Event: Available channel spec  = 0x%x\n", "handleObssDetectEvent", 24016, *(unsigned __int16 *)(a2 + 48));
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::setBeaconListenInterval(AppleBCMWLANCore *this)
{
  if (*(unsigned char *)(*((void *)this + 9) + 8840))
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v3 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        return CCLogStream::logAlert(v3, "[dk] %s@%d:Associated Sleep issued not setting beaocn intervals for active mode\n");
      }
    }
  }
  else
  {
    *(_DWORD *)(*((void *)this + 9) + 19688)  = 1;
    uint64_t v4 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"bcn_li_bcn");
    if (v4)
    {
      uint64_t v5 = v4;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          int v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          int v9 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
          CCLogStream::logAlert(v8, "[dk] %s@%d: Error: cannot set bcn wake up to %d: ret %x: %s\n", "setBeaconListenInterval", 16131, 1, 1, v9);
        }
      }
    }
    uint64_t result = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"bcn_li_dtim");
    uint64_t v6 = result;
    uint64_t v7 = *((void *)this + 9);
    if ((*(unsigned char *)(v7 + 10390) & 0x80) == 0) {
      *(_DWORD *)(v7 + 19696)  = 0;
    }
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (result)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          int v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
          return CCLogStream::logAlert(v10, "[dk] %s@%d: Error: cannot disable extended dtim(%d): ret %x: %s\n");
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::parseEventLogRecordAMPDU(AppleBCMWLANCore *this, OSData *a2, unsigned int a3, unsigned int a4)
{
  if (OSData::getLength(a2) == a4 + 4)
  {
    size_t v9 = OSData::getLength(a2) + 272;
    int v10 = (_DWORD *)IOMallocZeroData();
    if (v10)
    {
      int v11 = v10;
      if (a3 >= 0x4C)
      {
        uint64_t v13 = 3758097084;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            int v30 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logEmergency(v30, "[dk] %s@%d:ampdu_stats_type_int larger than max known WL_AMPDU_STATS_TYPE_MLO_LINK_INFO\n", "parseEventLogRecordAMPDU", 16178);
          }
        }
      }
      else
      {
        switch(a3)
        {
          case 0u:
          case 1u:
          case 2u:
          case 3u:
          case 8u:
          case 9u:
          case 0xAu:
          case 0xBu:
          case 0x10u:
          case 0x11u:
          case 0x14u:
          case 0x15u:
          case 0x1Au:
          case 0x1Cu:
          case 0x1Eu:
            int v12 = 1;
            goto LABEL_15;
          case 4u:
          case 5u:
          case 6u:
          case 7u:
          case 0xCu:
          case 0xDu:
          case 0xEu:
          case 0xFu:
          case 0x12u:
          case 0x13u:
          case 0x16u:
          case 0x17u:
          case 0x1Bu:
          case 0x1Du:
          case 0x1Fu:
            int v12 = 2;
            goto LABEL_15;
          case 0x18u:
          case 0x19u:
          case 0x2Du:
            _DWORD *v10 = 0;
            break;
          case 0x20u:
          case 0x21u:
          case 0x22u:
          case 0x23u:
          case 0x24u:
          case 0x25u:
          case 0x26u:
          case 0x27u:
          case 0x28u:
          case 0x29u:
          case 0x2Au:
          case 0x2Bu:
          case 0x2Cu:
          case 0x2Eu:
          case 0x2Fu:
          case 0x30u:
          case 0x31u:
          case 0x32u:
          case 0x33u:
          case 0x34u:
          case 0x35u:
          case 0x36u:
          case 0x37u:
          case 0x38u:
          case 0x39u:
          case 0x3Au:
          case 0x3Bu:
          case 0x3Cu:
          case 0x3Du:
          case 0x3Eu:
          case 0x3Fu:
          case 0x40u:
          case 0x41u:
          case 0x42u:
          case 0x43u:
          case 0x44u:
          case 0x45u:
          case 0x46u:
          case 0x47u:
          case 0x48u:
          case 0x49u:
          case 0x4Au:
            int v12 = 3;
LABEL_15:
            _DWORD *v10 = v12;
            break;
          default:
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (CCLogStream::shouldLog())
              {
                int v26 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                CCLogStream::logAlert(v26, "[dk] %s@%d:Unhandled %d mapping for report->encodingRate\n", "parseEventLogRecordAMPDU", 16282, a3);
              }
            }
            break;
        }
        switch(a3)
        {
          case 0u:
          case 1u:
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 6u:
          case 7u:
          case 0x10u:
          case 0x12u:
          case 0x14u:
          case 0x16u:
          case 0x18u:
          case 0x1Au:
          case 0x1Bu:
          case 0x20u:
          case 0x21u:
          case 0x22u:
          case 0x23u:
          case 0x24u:
          case 0x25u:
          case 0x26u:
          case 0x2Du:
          case 0x2Eu:
          case 0x2Fu:
          case 0x30u:
          case 0x31u:
          case 0x36u:
          case 0x37u:
          case 0x38u:
          case 0x39u:
          case 0x3Eu:
          case 0x3Fu:
          case 0x40u:
          case 0x41u:
          case 0x42u:
          case 0x43u:
          case 0x44u:
            v11[1]  = 0;
            break;
          case 8u:
          case 9u:
          case 0xAu:
          case 0xBu:
          case 0xCu:
          case 0xDu:
          case 0xEu:
          case 0xFu:
          case 0x11u:
          case 0x13u:
          case 0x15u:
          case 0x17u:
          case 0x19u:
          case 0x1Cu:
          case 0x1Du:
          case 0x1Eu:
          case 0x1Fu:
          case 0x27u:
          case 0x28u:
          case 0x29u:
          case 0x2Au:
          case 0x2Bu:
          case 0x2Cu:
          case 0x32u:
          case 0x33u:
          case 0x34u:
          case 0x35u:
          case 0x3Au:
          case 0x3Bu:
          case 0x3Cu:
          case 0x3Du:
          case 0x45u:
          case 0x46u:
          case 0x47u:
          case 0x48u:
          case 0x49u:
          case 0x4Au:
            v11[1]  = 1;
            break;
          default:
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (CCLogStream::shouldLog())
              {
                __int16 v27 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                CCLogStream::logAlert(v27, "[dk] %s@%d:Unhandled %d mapping for report->trafficDirection\n", "parseEventLogRecordAMPDU", 16375, a3);
              }
            }
            break;
        }
        switch(a3)
        {
          case 0u:
          case 4u:
          case 8u:
          case 0xCu:
          case 0x2Eu:
          case 0x32u:
            void v11[2] = 0;
            break;
          case 1u:
          case 5u:
          case 9u:
          case 0xDu:
          case 0x2Fu:
          case 0x33u:
            int v16 = 1;
            goto LABEL_39;
          case 2u:
          case 6u:
          case 0xAu:
          case 0xEu:
          case 0x30u:
          case 0x34u:
            int v16 = 2;
            goto LABEL_39;
          case 3u:
          case 7u:
          case 0xBu:
          case 0xFu:
          case 0x31u:
          case 0x35u:
            int v16 = 3;
            goto LABEL_39;
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
            int v16 = 4;
            goto LABEL_39;
          case 0x14u:
          case 0x15u:
          case 0x16u:
          case 0x17u:
            int v16 = 7;
            goto LABEL_39;
          case 0x18u:
          case 0x19u:
            int v16 = 5;
            goto LABEL_39;
          case 0x1Au:
          case 0x1Bu:
          case 0x1Eu:
          case 0x1Fu:
          case 0x20u:
          case 0x28u:
          case 0x3Eu:
          case 0x46u:
            int v16 = 8;
            goto LABEL_39;
          case 0x1Cu:
          case 0x1Du:
          case 0x27u:
          case 0x45u:
            int v16 = 6;
            goto LABEL_39;
          case 0x21u:
          case 0x3Fu:
            int v16 = 10;
            goto LABEL_39;
          case 0x22u:
          case 0x40u:
            int v16 = 16;
            goto LABEL_39;
          case 0x23u:
          case 0x41u:
            int v16 = 12;
            goto LABEL_39;
          case 0x24u:
          case 0x42u:
            int v16 = 15;
            goto LABEL_39;
          case 0x25u:
          case 0x43u:
            int v16 = 11;
            goto LABEL_39;
          case 0x26u:
          case 0x2Bu:
          case 0x44u:
          case 0x49u:
            int v16 = 17;
            goto LABEL_39;
          case 0x29u:
          case 0x47u:
            int v16 = 14;
            goto LABEL_39;
          case 0x2Au:
          case 0x48u:
            int v16 = 13;
            goto LABEL_39;
          case 0x2Cu:
          case 0x4Au:
            int v16 = 18;
LABEL_39:
            void v11[2] = v16;
            break;
          case 0x2Du:
            break;
          default:
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (CCLogStream::shouldLog())
              {
                __int16 v25 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                CCLogStream::logAlert(v25, "[dk] %s@%d:Unhandled %d mapping for report->ampduStatType\n", "parseEventLogRecordAMPDU", 16540, a3);
              }
            }
            break;
        }
        if (v11[2] != 5)
        {
          void v11[3] = a4 >> 2;
          uint64_t BytesNoCopy = OSData::getBytesNoCopy(a2, 4uLL, a4);
          uint64_t v21 = v11 + 4;
          size_t v22 = a4;
          goto LABEL_46;
        }
        int v17 = (unsigned __int16 *)OSData::getBytesNoCopy(a2);
        BOOL v18 = v17;
        if (a4 <= 7)
        {
          uint64_t v13 = 3758097084;
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              BOOL v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logEmergency(v19, "[dk] %s@%d:Insufficient Length for Density Distribution len %d, aggregationDens->len %d\n");
            }
          }
LABEL_57:
          IOFreeData();
          return v13;
        }
        if (v17[1] != a4)
        {
          uint64_t v13 = 3758097084;
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              __int16 v29 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logEmergency(v29, "[dk] %s@%d:Length for Density Distribution len %d, aggregationDens->len %d\n");
            }
          }
          goto LABEL_57;
        }
        size_t v22 = a4 - 8;
        void v11[3] = (a4 - 8) >> 2;
        if (v9 >= v22)
        {
          uint64_t v21 = v11 + 4;
          uint64_t BytesNoCopy = v18 + 6;
LABEL_46:
          memcpy(v21, BytesNoCopy, v22);
          if (IO80211Controller::setAMPDUstat())
          {
            uint64_t v13 = 0;
          }
          else
          {
            uint64_t v13 = 3758097084;
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (CCLogStream::shouldLog())
              {
                __int16 v23 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                CCLogStream::logAlert(v23, "[dk] %s@%d:Failed to setAMPDUstat\n", "parseEventLogRecordAMPDU", 16580);
              }
            }
          }
          goto LABEL_57;
        }
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            __int16 v31 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logEmergency(v31, "[dk] %s@%d:Invalid length %u\n", "parseEventLogRecordAMPDU", 16562, a4);
          }
        }
        uint64_t v13 = 3758096385;
      }
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          int v28 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logEmergency(v28, "[dk] %s@%d:Processing of tag %d failed\n");
        }
      }
      goto LABEL_57;
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t v13 = 3758097085;
      if (CCLogStream::shouldLog())
      {
        long long v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        OSData::getLength(a2);
        CCLogStream::logEmergency(v15, "[dk] %s@%d:Failed to allocate report buffer with size %lu for tag %d\n");
      }
    }
    else
    {
      return 3758097085;
    }
  }
  else
  {
    uint64_t v13 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        OSData::getLength(a2);
        CCLogStream::logEmergency(v14, "[dk] %s@%d:Unexpected length payload, total len %d, needs to support nBins %ld totalling %d\n");
      }
    }
  }
  return v13;
}

uint64_t AppleBCMWLANCore::parseEventLogRecordWLCounters(AppleBCMWLANCore *this, OSData *a2)
{
  uint64_t v4 = (unsigned __int16 **)IOMallocZeroData();
  if (!v4) {
    return 12;
  }
  uint64_t v5 = AppleBCMWLANCore::convertWlCntToApple80211ChipStats(this, a2, v4);
  if (v5)
  {
    uint64_t v8 = v5;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v10, "[dk] %s@%d:Failed to convertWlCntToApple80211ChipStats\n");
      }
    }
  }
  else
  {
    uint64_t v6 = *(AppleBCMWLANLQM **)(*((void *)this + 9) + 5608);
    if (v6 && (updated  = AppleBCMWLANLQM::updateInfraStatistics(v6, a2), updated))
    {
      uint64_t v8 = updated;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          int v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v12, "[dk] %s@%d:Failed to updateInfraStatistics\n");
        }
      }
    }
    else
    {
      uint64_t v8 = 0;
      if ((IO80211Controller::setChipCounterStats() & 1) == 0)
      {
        uint64_t v8 = 3758097084;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            int v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v11, "[dk] %s@%d:Failed to setChipCounterStats\n");
          }
        }
      }
    }
  }
  IOFreeData();
  return v8;
}

uint64_t AppleBCMWLANCore::convertWlCntToApple80211ChipStats(AppleBCMWLANCore *a1, OSData *a2, unsigned __int16 **a3)
{
  unsigned int v11 = 0;
  memset(v12, 170, sizeof(v12));
  AppleBCMWLANUtil::AutoreleasedAlignedOSData::AutoreleasedAlignedOSData((AppleBCMWLANUtil::AutoreleasedAlignedOSData *)v12, a2, 4);
  uint64_t v5 = v12[0];
  if (v12[0])
  {
    a3[143]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v12[0], 4uLL);
    a3[144]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 8uLL);
    a3[145]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0xCuLL);
    a3[146]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x10uLL);
    a3[147]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x14uLL);
    a3[148]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x18uLL);
    a3[149]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x1CuLL);
    a3[150]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x20uLL);
    a3[151]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x24uLL);
    a3[152]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x28uLL);
    a3[153]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x2CuLL);
    a3[154]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x30uLL);
    a3[162]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x40uLL);
    a3[163]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x44uLL);
    a3[164]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x48uLL);
    a3[165]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x4CuLL);
    a3[166]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x50uLL);
    a3[167]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x34CuLL);
    a3[168]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x54uLL);
    a3[169]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x58uLL);
    a3[170]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x5CuLL);
    a3[171]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x60uLL);
    a3[172]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x64uLL);
    a3[173]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x68uLL);
    a3[174]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x6CuLL);
    a3[175]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x70uLL);
    a3[176]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x74uLL);
    a3[177]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x78uLL);
    a3[178]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x7CuLL);
    a3[156]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x34uLL);
    a3[157]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x38uLL);
    a3[158]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x3CuLL);
    a3[159]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x210uLL);
    a3[160]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x2A0uLL);
    a3[180]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x104uLL);
    a3[181]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x108uLL);
    a3[182]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x10CuLL);
    a3[183]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x110uLL);
    a3[184]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x114uLL);
    a3[185]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x118uLL);
    a3[186]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x11CuLL);
    a3[203]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x294uLL);
    a3[204]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x298uLL);
    a3[205]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x29CuLL);
    a3[189]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x120uLL);
    a3[190]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x124uLL);
    a3[191]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x128uLL);
    a3[192]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x12CuLL);
    a3[193]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x130uLL);
    a3[194]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x134uLL);
    a3[195]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x138uLL);
    a3[196]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x13CuLL);
    a3[197]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x140uLL);
    a3[198]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x144uLL);
    a3[199]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x148uLL);
    a3[200]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x14CuLL);
    a3[201]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x150uLL);
    a3[202]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x154uLL);
    a3[22]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x35CuLL);
    a3[23]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x1A4uLL);
    a3[24]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x364uLL);
    a3[25]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0xC8uLL);
    a3[26]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0xCCuLL);
    a3[27]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0xD0uLL);
    *a3  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x360uLL);
    a3[1]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x1A0uLL);
    a3[2]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x368uLL);
    CounterValueSafe  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x12CuLL);
    a3[3]  = (unsigned __int16 *)((char *)CounterValueSafe
                               + (void)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x144uLL));
    uint64_t v7 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x130uLL);
    a3[4]  = (unsigned __int16 *)((char *)v7
                               + (void)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x148uLL));
    a3[5]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x134uLL);
    a3[115]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x37CuLL);
    a3[116]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x394uLL);
    a3[117]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x384uLL);
    a3[118]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x39CuLL);
    a3[119]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x3B4uLL);
    a3[120]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x3BCuLL);
    a3[121]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0xD8uLL);
    *(void *)(*((void *)a1 + 9) + 17336)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0xD8uLL);
    a3[123]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x38CuLL);
    a3[124]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x3A4uLL);
    a3[125]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x3ACuLL);
    a3[126]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x3C4uLL);
    a3[102]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x380uLL);
    a3[103]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x398uLL);
    a3[104]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x388uLL);
    a3[105]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x3A0uLL);
    a3[106]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x3B8uLL);
    a3[107]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x3C0uLL);
    if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 93)) {
      a3[114]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x3CCuLL);
    }
    a3[108]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x158uLL);
    *(void *)(*((void *)a1 + 9) + 17328)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x158uLL);
    a3[110]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x390uLL);
    a3[111]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x3A8uLL);
    a3[112]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x3B0uLL);
    a3[113]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x3C8uLL);
    a3[77]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x36CuLL);
    a3[84]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x374uLL);
    a3[48]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x370uLL);
    a3[55]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x378uLL);
    a3[207]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x1E0uLL);
    a3[208]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x1E4uLL);
    a3[209]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x1E8uLL);
    a3[210]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x1ECuLL);
    a3[211]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x1F0uLL);
    a3[212]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x1F4uLL);
    a3[213]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x1F8uLL);
    a3[214]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x1FCuLL);
    a3[215]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x200uLL);
    a3[216]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x204uLL);
    a3[217]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x208uLL);
    a3[218]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x20CuLL);
    a3[220]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x2B8uLL);
    a3[221]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x2BCuLL);
    a3[222]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x2C0uLL);
    a3[223]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x2C4uLL);
    a3[224]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x2C8uLL);
    a3[225]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x2CCuLL);
    a3[226]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x2D0uLL);
    a3[227]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x2D4uLL);
    a3[228]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x2D8uLL);
    a3[229]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x2DCuLL);
    a3[230]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x2E0uLL);
    a3[231]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x2E4uLL);
    a3[233]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x1A8uLL);
    a3[234]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x1ACuLL);
    a3[235]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x1B0uLL);
    a3[236]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x1B4uLL);
    a3[237]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x1B8uLL);
    a3[238]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x1BCuLL);
    a3[239]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x1C0uLL);
    a3[240]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x1C4uLL);
    a3[241]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x1C8uLL);
    a3[242]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x1CCuLL);
    a3[243]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x1D0uLL);
    a3[244]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x1D4uLL);
    a3[245]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x1D8uLL);
    a3[246]  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)4, v5, 0x1DCuLL);
    uint64_t v8 = v11;
  }
  else
  {
    uint64_t v8 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v10, "[dk] %s@%d:Failed to create aligned wl_cnt_t data\n", "convertWlCntToApple80211ChipStats", 28950);
      }
    }
  }
  AppleBCMWLANUtil::AutoreleasedAlignedOSData::~AutoreleasedAlignedOSData((AppleBCMWLANUtil::AutoreleasedAlignedOSData *)v12);
  return v8;
}

uint64_t AppleBCMWLANCore::setHeStats(void *a1, OSData *this, unsigned int a3)
{
  unsigned int v25 = 0;
  uint64_t v6 = a1 + 9;
  if (!*(void *)(a1[9] + 29832))
  {
    *(void *)(*v6 + 29832)  = IOMallocZeroTyped();
    uint64_t v7 = *(void *)(*v6 + 29832);
    if (!v7) {
      return 12;
    }
    *(void *)(v7 + 480)  = 0;
    *(_OWORD *)(v7 + 448)  = 0u;
    *(_OWORD *)(v7 + 464)  = 0u;
    *(_OWORD *)(v7 + 416)  = 0u;
    *(_OWORD *)(v7 + 432)  = 0u;
    *(_OWORD *)(v7 + 384)  = 0u;
    *(_OWORD *)(v7 + 400)  = 0u;
    *(_OWORD *)(v7 + 352)  = 0u;
    *(_OWORD *)(v7 + 368)  = 0u;
    *(_OWORD *)(v7 + 320)  = 0u;
    *(_OWORD *)(v7 + 336)  = 0u;
    *(_OWORD *)(v7 + 288)  = 0u;
    *(_OWORD *)(v7 + 304)  = 0u;
    *(_OWORD *)(v7 + 256)  = 0u;
    *(_OWORD *)(v7 + 272)  = 0u;
    *(_OWORD *)(v7 + 224)  = 0u;
    *(_OWORD *)(v7 + 240)  = 0u;
    *(_OWORD *)(v7 + 192)  = 0u;
    *(_OWORD *)(v7 + 208)  = 0u;
    *(_OWORD *)(v7 + 160)  = 0u;
    *(_OWORD *)(v7 + 176)  = 0u;
    *(_OWORD *)(v7 + 128)  = 0u;
    *(_OWORD *)(v7 + 144)  = 0u;
    *(_OWORD *)(v7 + 96)  = 0u;
    *(_OWORD *)(v7 + 112)  = 0u;
    *(_OWORD *)(v7 + 64)  = 0u;
    *(_OWORD *)(v7 + 80)  = 0u;
    *(_OWORD *)(v7 + 32)  = 0u;
    *(_OWORD *)(v7 + 48)  = 0u;
    *(_OWORD *)uint64_t v7 = 0u;
    *(_OWORD *)(v7 + 16)  = 0u;
  }
  size_t Length = OSData::getLength(this);
  size_t v9 = OSData::getLength(this);
  BOOL v10 = OSData::getLength(this) == 224;
  if (*(_DWORD *)(*v6 + 780) == 21) {
    BOOL v10 = OSData::getLength(this) == 404;
  }
  if (Length == 200 || v9 == 220 || v10)
  {
    if (a3)
    {
      if (v10)
      {
        **(void **)(*v6 + 29832) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x20uLL);
        *(void *)(*(void *)(*v6 + 29832) + 16) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x24uLL);
        *(void *)(*(void *)(*v6 + 29832) + 40) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0xCuLL);
        *(void *)(*(void *)(*v6 + 29832) + 8) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x9CuLL);
        *(void *)(*(void *)(*v6 + 29832) + 24) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0xA0uLL);
        *(void *)(*(void *)(*v6 + 29832) + 32) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0xA4uLL);
        *(void *)(*(void *)(*v6 + 29832) + 48) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x80uLL);
        *(void *)(*(void *)(*v6 + 29832) + 56) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x84uLL);
        *(void *)(*(void *)(*v6 + 29832) + 64) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x88uLL);
        *(void *)(*(void *)(*v6 + 29832) + 72) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x8CuLL);
        *(void *)(*(void *)(*v6 + 29832) + 80) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x90uLL);
        *(void *)(*(void *)(*v6 + 29832) + 88) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x94uLL);
        *(void *)(*(void *)(*v6 + 29832) + 96) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x68uLL);
        *(void *)(*(void *)(*v6 + 29832) + 104) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x6CuLL);
        *(void *)(*(void *)(*v6 + 29832) + 112) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x70uLL);
        *(void *)(*(void *)(*v6 + 29832) + 120) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x74uLL);
        *(void *)(*(void *)(*v6 + 29832) + 128) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x78uLL);
        *(void *)(*(void *)(*v6 + 29832) + 136) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x7CuLL);
        *(void *)(*(void *)(*v6 + 29832) + 272) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x28uLL);
        *(void *)(*(void *)(*v6 + 29832) + 280) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x14uLL);
        *(void *)(*(void *)(*v6 + 29832) + 288) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x18uLL);
        *(void *)(*(void *)(*v6 + 29832) + 296) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x1CuLL);
        *(void *)(*(void *)(*v6 + 29832) + 304) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 4uLL);
        *(void *)(*(void *)(*v6 + 29832) + 312) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 8uLL);
        *(void *)(*(void *)(*v6 + 29832) + 320) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x2CuLL);
        *(void *)(*(void *)(*v6 + 29832) + 328) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x30uLL);
        *(void *)(*(void *)(*v6 + 29832) + 336) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x34uLL);
        *(void *)(*(void *)(*v6 + 29832) + 344) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0xA8uLL);
        *(void *)(*(void *)(*v6 + 29832) + 352) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0xACuLL);
        *(void *)(*(void *)(*v6 + 29832) + 360) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x64uLL);
        *(void *)(*(void *)(*v6 + 29832) + 368) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0xB0uLL);
        *(void *)(*(void *)(*v6 + 29832) + 384) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x60uLL);
        *(void *)(*(void *)(*v6 + 29832) + 392) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x44uLL);
        *(void *)(*(void *)(*v6 + 29832) + 400) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x48uLL);
        unsigned int v11 = this;
        size_t v12 = 152;
      }
      else
      {
        if (v9 != 220 && Length != 200)
        {
          CounterValueSafe  = 0;
          uint64_t v15 = a3;
          *(_DWORD *)(*v6 + 8 * a3 + 29820)  = -*(_DWORD *)(*v6 + 8 * a3 + 29844);
          goto LABEL_18;
        }
        **(void **)(*v6 + 29832) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x20uLL);
        *(void *)(*(void *)(*v6 + 29832) + 16) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x24uLL);
        *(void *)(*(void *)(*v6 + 29832) + 40) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0xCuLL);
        *(void *)(*(void *)(*v6 + 29832) + 8) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0xA0uLL);
        *(void *)(*(void *)(*v6 + 29832) + 24) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0xA4uLL);
        *(void *)(*(void *)(*v6 + 29832) + 32) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0xA8uLL);
        *(void *)(*(void *)(*v6 + 29832) + 48) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x84uLL);
        *(void *)(*(void *)(*v6 + 29832) + 56) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x88uLL);
        *(void *)(*(void *)(*v6 + 29832) + 64) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x8CuLL);
        *(void *)(*(void *)(*v6 + 29832) + 72) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x90uLL);
        *(void *)(*(void *)(*v6 + 29832) + 80) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x94uLL);
        *(void *)(*(void *)(*v6 + 29832) + 88) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x98uLL);
        *(void *)(*(void *)(*v6 + 29832) + 96) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x6CuLL);
        *(void *)(*(void *)(*v6 + 29832) + 104) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x70uLL);
        *(void *)(*(void *)(*v6 + 29832) + 112) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x74uLL);
        *(void *)(*(void *)(*v6 + 29832) + 120) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x78uLL);
        *(void *)(*(void *)(*v6 + 29832) + 128) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x7CuLL);
        *(void *)(*(void *)(*v6 + 29832) + 136) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x80uLL);
        *(void *)(*(void *)(*v6 + 29832) + 272) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x28uLL);
        *(void *)(*(void *)(*v6 + 29832) + 280) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x14uLL);
        *(void *)(*(void *)(*v6 + 29832) + 288) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x18uLL);
        *(void *)(*(void *)(*v6 + 29832) + 296) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x1CuLL);
        *(void *)(*(void *)(*v6 + 29832) + 304) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 4uLL);
        *(void *)(*(void *)(*v6 + 29832) + 312) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 8uLL);
        *(void *)(*(void *)(*v6 + 29832) + 320) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x2CuLL);
        *(void *)(*(void *)(*v6 + 29832) + 328) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x30uLL);
        *(void *)(*(void *)(*v6 + 29832) + 336) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x34uLL);
        *(void *)(*(void *)(*v6 + 29832) + 344) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0xACuLL);
        *(void *)(*(void *)(*v6 + 29832) + 352) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0xB0uLL);
        *(void *)(*(void *)(*v6 + 29832) + 360) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x68uLL);
        *(void *)(*(void *)(*v6 + 29832) + 368) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0xB4uLL);
        *(void *)(*(void *)(*v6 + 29832) + 384) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x64uLL);
        *(void *)(*(void *)(*v6 + 29832) + 392) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x44uLL);
        *(void *)(*(void *)(*v6 + 29832) + 400) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x48uLL);
        unsigned int v11 = this;
        size_t v12 = 156;
      }
      *(void *)(*(void *)(*v6 + 29832) + 408) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, v11, v12);
      *(void *)(*(void *)(*v6 + 29832) + 416) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x10uLL);
      *(void *)(*(void *)(*v6 + 29832) + 432) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x48uLL);
      *(void *)(*(void *)(*v6 + 29832) + 440) += AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x58uLL);
      uint64_t v15 = a3;
      *(_DWORD *)(*v6 + 8 * a3 + 29820)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x54uLL)- *(_DWORD *)(*v6 + 8 * a3 + 29844);
      CounterValueSafe  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x54uLL);
LABEL_18:
      *(void *)(*(void *)(*v6 + 29832) + 424)  = CounterValueSafe;
      *(_DWORD *)(*v6 + 8 * v15 + 29844)  = *(void *)(*(void *)(*v6 + 29832) + 424);
      if (v10 || v9 == 220 || Length == 200)
      {
        *(_DWORD *)(*v6 + 8 * v15 + 29816)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x5CuLL)- *(_DWORD *)(*v6 + 8 * v15 + 29840);
        int v17 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x5CuLL);
      }
      else
      {
        int v17 = 0;
        *(_DWORD *)(*v6 + 8 * v15 + 29816)  = -*(_DWORD *)(*v6 + 8 * v15 + 29840);
      }
      *(void *)(*(void *)(*v6 + 29832) + 448)  = v17;
      *(_DWORD *)(*v6 + 8 * v15 + 29840)  = *(void *)(*(void *)(*v6 + 29832) + 448);
      if (Length == 200)
      {
        *(void *)(*(void *)(*v6 + 29832) + 464)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x4CuLL);
        *(void *)(*(void *)(*v6 + 29832) + 472)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x50uLL);
        *(void *)(*(void *)(*v6 + 29832) + 480)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x38uLL);
      }
      if (!IO80211Controller::setExtendedChipCounterStats())
      {
        uint64_t v18 = 3758097084;
        if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
        {
          (*(void (**)(void *))(*a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            BOOL v19 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
            CCLogStream::logAlert(v19, "[dk] %s@%d:Failed to setExtendedChipCounterStats\n", "setHeStats", 16783);
          }
        }
        return v18;
      }
      return v25;
    }
    if (v10)
    {
      **(void **)(*v6 + 29832)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x20uLL);
      *(void *)(*(void *)(*v6 + 29832) + 16)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x24uLL);
      *(void *)(*(void *)(*v6 + 29832) + 40)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0xCuLL);
      *(void *)(*(void *)(*v6 + 29832) + 8)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x9CuLL);
      *(void *)(*(void *)(*v6 + 29832) + 24)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0xA0uLL);
      *(void *)(*(void *)(*v6 + 29832) + 32)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0xA4uLL);
      *(void *)(*(void *)(*v6 + 29832) + 48)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x80uLL);
      *(void *)(*(void *)(*v6 + 29832) + 56)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x84uLL);
      *(void *)(*(void *)(*v6 + 29832) + 64)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x88uLL);
      *(void *)(*(void *)(*v6 + 29832) + 72)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x8CuLL);
      *(void *)(*(void *)(*v6 + 29832) + 80)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x90uLL);
      *(void *)(*(void *)(*v6 + 29832) + 88)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x94uLL);
      *(void *)(*(void *)(*v6 + 29832) + 96)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x68uLL);
      *(void *)(*(void *)(*v6 + 29832) + 104)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x6CuLL);
      *(void *)(*(void *)(*v6 + 29832) + 112)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x70uLL);
      *(void *)(*(void *)(*v6 + 29832) + 120)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x74uLL);
      *(void *)(*(void *)(*v6 + 29832) + 128)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x78uLL);
      *(void *)(*(void *)(*v6 + 29832) + 136)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x7CuLL);
      *(void *)(*(void *)(*v6 + 29832) + 272)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x28uLL);
      *(void *)(*(void *)(*v6 + 29832) + 280)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x14uLL);
      *(void *)(*(void *)(*v6 + 29832) + 288)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x18uLL);
      *(void *)(*(void *)(*v6 + 29832) + 296)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x1CuLL);
      *(void *)(*(void *)(*v6 + 29832) + 304)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 4uLL);
      *(void *)(*(void *)(*v6 + 29832) + 312)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 8uLL);
      *(void *)(*(void *)(*v6 + 29832) + 320)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x2CuLL);
      *(void *)(*(void *)(*v6 + 29832) + 328)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x30uLL);
      *(void *)(*(void *)(*v6 + 29832) + 336)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x34uLL);
      *(void *)(*(void *)(*v6 + 29832) + 344)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0xA8uLL);
      *(void *)(*(void *)(*v6 + 29832) + 352)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0xACuLL);
      *(void *)(*(void *)(*v6 + 29832) + 360)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x64uLL);
      *(void *)(*(void *)(*v6 + 29832) + 368)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0xB0uLL);
      *(void *)(*(void *)(*v6 + 29832) + 384)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x60uLL);
      *(void *)(*(void *)(*v6 + 29832) + 392)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x44uLL);
      *(void *)(*(void *)(*v6 + 29832) + 400)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x48uLL);
      uint64_t v13 = this;
      size_t v14 = 152;
    }
    else
    {
      if (v9 != 220 && Length != 200)
      {
        int v20 = 0;
        **(void **)(*v6 + 29832)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 16)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 40)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 8)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 24)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 32)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 48)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 56)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 64)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 72)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 80)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 88)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 96)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 104)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 112)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 120)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 128)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 136)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 272)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 280)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 288)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 296)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 304)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 312)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 320)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 328)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 336)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 344)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 352)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 360)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 368)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 384)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 392)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 400)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 408)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 416)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 432)  = 0;
        *(void *)(*(void *)(*v6 + 29832) + 440)  = 0;
        *(_DWORD *)(*v6 + 29820)  = -*(_DWORD *)(*v6 + 29844);
        goto LABEL_32;
      }
      **(void **)(*v6 + 29832)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x20uLL);
      *(void *)(*(void *)(*v6 + 29832) + 16)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x24uLL);
      *(void *)(*(void *)(*v6 + 29832) + 40)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0xCuLL);
      *(void *)(*(void *)(*v6 + 29832) + 8)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0xA0uLL);
      *(void *)(*(void *)(*v6 + 29832) + 24)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0xA4uLL);
      *(void *)(*(void *)(*v6 + 29832) + 32)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0xA8uLL);
      *(void *)(*(void *)(*v6 + 29832) + 48)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x84uLL);
      *(void *)(*(void *)(*v6 + 29832) + 56)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x88uLL);
      *(void *)(*(void *)(*v6 + 29832) + 64)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x8CuLL);
      *(void *)(*(void *)(*v6 + 29832) + 72)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x90uLL);
      *(void *)(*(void *)(*v6 + 29832) + 80)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x94uLL);
      *(void *)(*(void *)(*v6 + 29832) + 88)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x98uLL);
      *(void *)(*(void *)(*v6 + 29832) + 96)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x6CuLL);
      *(void *)(*(void *)(*v6 + 29832) + 104)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x70uLL);
      *(void *)(*(void *)(*v6 + 29832) + 112)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x74uLL);
      *(void *)(*(void *)(*v6 + 29832) + 120)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x78uLL);
      *(void *)(*(void *)(*v6 + 29832) + 128)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x7CuLL);
      *(void *)(*(void *)(*v6 + 29832) + 136)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x80uLL);
      *(void *)(*(void *)(*v6 + 29832) + 272)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x28uLL);
      *(void *)(*(void *)(*v6 + 29832) + 280)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x14uLL);
      *(void *)(*(void *)(*v6 + 29832) + 288)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x18uLL);
      *(void *)(*(void *)(*v6 + 29832) + 296)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x1CuLL);
      *(void *)(*(void *)(*v6 + 29832) + 304)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 4uLL);
      *(void *)(*(void *)(*v6 + 29832) + 312)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 8uLL);
      *(void *)(*(void *)(*v6 + 29832) + 320)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x2CuLL);
      *(void *)(*(void *)(*v6 + 29832) + 328)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x30uLL);
      *(void *)(*(void *)(*v6 + 29832) + 336)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x34uLL);
      *(void *)(*(void *)(*v6 + 29832) + 344)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0xACuLL);
      *(void *)(*(void *)(*v6 + 29832) + 352)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0xB0uLL);
      *(void *)(*(void *)(*v6 + 29832) + 360)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x68uLL);
      *(void *)(*(void *)(*v6 + 29832) + 368)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0xB4uLL);
      *(void *)(*(void *)(*v6 + 29832) + 384)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x64uLL);
      *(void *)(*(void *)(*v6 + 29832) + 392)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x44uLL);
      *(void *)(*(void *)(*v6 + 29832) + 400)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x48uLL);
      uint64_t v13 = this;
      size_t v14 = 156;
    }
    *(void *)(*(void *)(*v6 + 29832) + 408)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, v13, v14);
    *(void *)(*(void *)(*v6 + 29832) + 416)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x10uLL);
    *(void *)(*(void *)(*v6 + 29832) + 432)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x48uLL);
    *(void *)(*(void *)(*v6 + 29832) + 440)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x58uLL);
    *(_DWORD *)(*v6 + 29820)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x54uLL)- *(_DWORD *)(*v6 + 29844);
    int v20 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x54uLL);
LABEL_32:
    *(void *)(*(void *)(*v6 + 29832) + 424)  = v20;
    *(_DWORD *)(*v6 + 29844)  = *(void *)(*(void *)(*v6 + 29832) + 424);
    if (v10 || v9 == 220 || Length == 200)
    {
      *(_DWORD *)(*v6 + 29816)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x5CuLL)- *(_DWORD *)(*v6 + 29840);
      uint64_t v21 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x5CuLL);
    }
    else
    {
      uint64_t v21 = 0;
      *(_DWORD *)(*v6 + 29816)  = -*(_DWORD *)(*v6 + 29840);
    }
    *(void *)(*(void *)(*v6 + 29832) + 448)  = v21;
    *(_DWORD *)(*v6 + 29840)  = *(void *)(*(void *)(*v6 + 29832) + 448);
    if (Length == 200)
    {
      *(void *)(*(void *)(*v6 + 29832) + 464)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x4CuLL);
      *(void *)(*(void *)(*v6 + 29832) + 472)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x50uLL);
      *(void *)(*(void *)(*v6 + 29832) + 480)  = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v25, (int *)4, this, 0x38uLL);
    }
    return v25;
  }
  uint64_t v18 = 3758097084;
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      __int16 v23 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      size_t v24 = OSData::getLength(this);
      CCLogStream::logEmergency(v23, "[dk] %s@%d:invalid payload length %lu expect one of size(%lu,%lu,%lu)\n", "setHeStats", 16653, v24, 200, 220, 224);
    }
  }
  return v18;
}

uint64_t AppleBCMWLANCore::setOmiStats(void *a1, OSData *this, uint64_t a3)
{
  if (!*(void *)(a1[9] + 29832))
  {
    *(void *)(a1[9] + 29832)  = IOMallocZeroTyped();
    uint64_t v6 = *(void *)(a1[9] + 29832);
    if (!v6) {
      return 12;
    }
    *(void *)(v6 + 480)  = 0;
    *(_OWORD *)(v6 + 448)  = 0u;
    *(_OWORD *)(v6 + 464)  = 0u;
    *(_OWORD *)(v6 + 416)  = 0u;
    *(_OWORD *)(v6 + 432)  = 0u;
    *(_OWORD *)(v6 + 384)  = 0u;
    *(_OWORD *)(v6 + 400)  = 0u;
    *(_OWORD *)(v6 + 352)  = 0u;
    *(_OWORD *)(v6 + 368)  = 0u;
    *(_OWORD *)(v6 + 320)  = 0u;
    *(_OWORD *)(v6 + 336)  = 0u;
    *(_OWORD *)(v6 + 288)  = 0u;
    *(_OWORD *)(v6 + 304)  = 0u;
    *(_OWORD *)(v6 + 256)  = 0u;
    *(_OWORD *)(v6 + 272)  = 0u;
    *(_OWORD *)(v6 + 224)  = 0u;
    *(_OWORD *)(v6 + 240)  = 0u;
    *(_OWORD *)(v6 + 192)  = 0u;
    *(_OWORD *)(v6 + 208)  = 0u;
    *(_OWORD *)(v6 + 160)  = 0u;
    *(_OWORD *)(v6 + 176)  = 0u;
    *(_OWORD *)(v6 + 128)  = 0u;
    *(_OWORD *)(v6 + 144)  = 0u;
    *(_OWORD *)(v6 + 96)  = 0u;
    *(_OWORD *)(v6 + 112)  = 0u;
    *(_OWORD *)(v6 + 64)  = 0u;
    *(_OWORD *)(v6 + 80)  = 0u;
    *(_OWORD *)(v6 + 32)  = 0u;
    *(_OWORD *)(v6 + 48)  = 0u;
    *(_OWORD *)uint64_t v6 = 0u;
    *(_OWORD *)(v6 + 16)  = 0u;
  }
  uint64_t BytesNoCopy = (unsigned int *)OSData::getBytesNoCopy(this);
  uint64_t v8 = BytesNoCopy[1];
  uint64_t v9 = *(void *)(a1[9] + 29832);
  if (a3)
  {
    *(void *)(v9 + 144) += v8;
    *(void *)(*(void *)(a1[9] + 29832) + 152) += BytesNoCopy[2];
    *(void *)(*(void *)(a1[9] + 29832) + 160) += BytesNoCopy[3];
    *(void *)(*(void *)(a1[9] + 29832) + 168) += BytesNoCopy[4];
    *(void *)(*(void *)(a1[9] + 29832) + 176) += BytesNoCopy[5];
    *(void *)(*(void *)(a1[9] + 29832) + 184) += BytesNoCopy[6];
    *(void *)(*(void *)(a1[9] + 29832) + 192) += BytesNoCopy[7];
    *(void *)(*(void *)(a1[9] + 29832) + 200) += BytesNoCopy[8];
    *(void *)(*(void *)(a1[9] + 29832) + 208) += BytesNoCopy[9];
    *(void *)(*(void *)(a1[9] + 29832) + 216) += BytesNoCopy[10];
    *(void *)(*(void *)(a1[9] + 29832) + 224) += BytesNoCopy[11];
    *(void *)(*(void *)(a1[9] + 29832) + 232) += BytesNoCopy[12];
    *(void *)(*(void *)(a1[9] + 29832) + 240) += BytesNoCopy[13];
    *(void *)(*(void *)(a1[9] + 29832) + 248) += BytesNoCopy[14];
    *(void *)(*(void *)(a1[9] + 29832) + 256) += BytesNoCopy[15];
    *(void *)(*(void *)(a1[9] + 29832) + 264) += BytesNoCopy[16];
    a3  = 0;
    if ((IO80211Controller::setExtendedChipCounterStats() & 1) == 0)
    {
      a3  = 3758097084;
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          BOOL v10 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logAlert(v10, "[dk] %s@%d:Failed to setExtendedChipCounterStats\n", "setOmiStats", 16847);
        }
      }
    }
  }
  else
  {
    *(void *)(v9 + 144)  = v8;
    *(void *)(*(void *)(a1[9] + 29832) + 152)  = BytesNoCopy[2];
    *(void *)(*(void *)(a1[9] + 29832) + 160)  = BytesNoCopy[3];
    *(void *)(*(void *)(a1[9] + 29832) + 168)  = BytesNoCopy[4];
    *(void *)(*(void *)(a1[9] + 29832) + 176)  = BytesNoCopy[5];
    *(void *)(*(void *)(a1[9] + 29832) + 184)  = BytesNoCopy[6];
    *(void *)(*(void *)(a1[9] + 29832) + 192)  = BytesNoCopy[7];
    *(void *)(*(void *)(a1[9] + 29832) + 200)  = BytesNoCopy[8];
    *(void *)(*(void *)(a1[9] + 29832) + 208)  = BytesNoCopy[9];
    *(void *)(*(void *)(a1[9] + 29832) + 216)  = BytesNoCopy[10];
    *(void *)(*(void *)(a1[9] + 29832) + 224)  = BytesNoCopy[11];
    *(void *)(*(void *)(a1[9] + 29832) + 232)  = BytesNoCopy[12];
    *(void *)(*(void *)(a1[9] + 29832) + 240)  = BytesNoCopy[13];
    *(void *)(*(void *)(a1[9] + 29832) + 248)  = BytesNoCopy[14];
    *(void *)(*(void *)(a1[9] + 29832) + 256)  = BytesNoCopy[15];
    *(void *)(*(void *)(a1[9] + 29832) + 264)  = BytesNoCopy[16];
  }
  return a3;
}

uint64_t AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV2(AppleBCMWLANCore *this, OSData *a2)
{
  uint64_t v2 = 3758097084;
  unint64_t v46 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1)  = 0xAAAAAAAAAAAAAAAALL;
  long long v44 = v3;
  long long v45 = v3;
  BYTE4(v44)  = 0;
  LODWORD(v44)  = 19;
  if (!a2) {
    return 3758097090;
  }
  uint64_t BytesNoCopy = (unsigned int *)OSData::getBytesNoCopy(a2);
  if (OSData::getLength(a2) <= 0x23)
  {
    uint64_t v12 = 3758097086;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v34 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int Length = OSData::getLength(a2);
        CCLogStream::logAlert(v34, "[dk] %s@%d:Invalid payload size[%u], expected >= %zu\n", "parseEventLogRecordBTCoexStatsV2", 16874, Length, 0x24uLL);
        return 3758097086;
      }
    }
  }
  else
  {
    if ((((_BYTE)BytesNoCopy + 8) & 3) == 0)
    {
      unsigned int v11 = 0;
      goto LABEL_8;
    }
    uint64_t v7 = IOMallocZeroTyped();
    if (v7)
    {
      uint64_t BytesNoCopy = (unsigned int *)v7;
      uint64_t v8 = OSData::getBytesNoCopy(a2);
      unsigned int v9 = v8[8];
      long long v10 = *((_OWORD *)v8 + 1);
      *(_OWORD *)uint64_t BytesNoCopy = *(_OWORD *)v8;
      *((_OWORD *)BytesNoCopy + 1)  = v10;
      BytesNoCopy[8]  = v9;
      unsigned int v11 = BytesNoCopy;
LABEL_8:
      unint64_t v50 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v13 + 1)  = 0xAAAAAAAAAAAAAAAALL;
      long long v49 = v13;
      *(_OWORD *)&v47[16]  = v13;
      long long v48 = v13;
      *(_OWORD *)int v47 = v13;
      if (BytesNoCopy[1])
      {
        long long v48 = 0uLL;
        uint64_t v14 = *((void *)BytesNoCopy + 2);
        *(void *)&long long v15 = v14;
        *((void *)&v15 + 1)  = HIDWORD(v14);
        *(_OWORD *)&v47[8]  = v15;
        *(void *)&v47[24]  = BytesNoCopy[6];
        *(void *)&long long v49 = *((unsigned __int16 *)BytesNoCopy + 14);
        *((void *)&v49 + 1)  = *((unsigned __int16 *)BytesNoCopy + 15);
        unint64_t v50 = *((unsigned __int16 *)BytesNoCopy + 16);
        *(void *)int v47 = *((void *)BytesNoCopy + 1);
        if (*(_DWORD *)v47 >= 8u) {
          *(_DWORD *)int v47 = v47[0] & 7;
        }
        if (IO80211Controller::setBTCoexstat())
        {
          dword_1003A4790  = BytesNoCopy[2];
          int32x4_t v16 = *(int32x4_t *)(BytesNoCopy + 3);
          unsigned __int32 v17 = vorrq_s8(*(int8x16_t *)algn_1003A4794, (int8x16_t)v16).u32[0];
          int32x4_t v18 = vaddq_s32(*(int32x4_t *)algn_1003A4794, v16);
          v18.i32[0]  = v17;
          *(int32x4_t *)algn_1003A4794  = v18;
          word_1003A47A4 += *((_WORD *)BytesNoCopy + 14);
          word_1003A47A6 += *((_WORD *)BytesNoCopy + 15);
          LOWORD(dword_1003A47A8)  = dword_1003A47A8 + *((_WORD *)BytesNoCopy + 16);
          AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV2(OSData *)::fDeltaBTCoexStatsReport  = (uint64_t)vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(dword_1003A4790), (uint32x2_t)-2), (int8x8_t)0x100000001), (int32x2_t)AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV2(OSData *)::fDeltaBTCoexStatsReport);
          dword_1003A47B8 += (dword_1003A4790 >> 9) & 1;
          unint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
          mach_continuous_time();
          absolutetime_to_nanoseconds();
          unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v19 + 1)  = 0xAAAAAAAAAAAAAAAALL;
          long long v65 = v19;
          long long v66 = v19;
          long long v63 = v19;
          long long v64 = v19;
          long long v61 = v19;
          long long v62 = v19;
          long long v59 = v19;
          long long v60 = v19;
          long long v57 = v19;
          long long v58 = v19;
          long long v55 = v19;
          long long v56 = v19;
          long long v53 = v19;
          long long v54 = v19;
          __str  = v19;
          long long v52 = v19;
          uint64_t v38 = AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV2(OSData *)::fDeltaBTCoexStatsReport;
          int v20 = dword_1003A479C;
          unint64_t v21 = unk_1003A47A0 / 0x3E8uLL;
          int v39 = 1338014025;
          int v40 = v21;
          int v41 = dword_1003A47B8;
          *(_WORD *)(*((void *)this + 9) + 30826)  = 100 * (unint64_t)v21 / 0xB2F4FC07949;
          snprintf((char *)&__str, 0x100uLL, "BT Coex Stats2:btDur=%llums(%llu%%) status=0x%x reqTypeMap=0x%x req=%u gnt=%u abort=%u rx1ovfl=%u latency=%u [%llums]\n", v21, 100 * (unint64_t)v21 / 0xB2F4FC07949, dword_1003A4790, *(_DWORD *)algn_1003A4794, dword_1003A4798, v20, (unsigned __int16)word_1003A47A4, (unsigned __int16)word_1003A47A6, (unsigned __int16)dword_1003A47A8, 0xB2F4FC07949);
          uint64_t v22 = *((void *)this + 9);
          if ((*(_DWORD *)(v22 + 980) - 1) > 1)
          {
            __int16 v23 = (_OWORD *)(v22 + 31037);
            long long v24 = v64;
            v23[124]  = v63;
            v23[125]  = v24;
            long long v25 = v66;
            v23[126]  = v65;
            v23[127]  = v25;
            long long v26 = v60;
            v23[120]  = v59;
            v23[121]  = v26;
            long long v27 = v62;
            v23[122]  = v61;
            v23[123]  = v27;
            long long v28 = v56;
            v23[116]  = v55;
            v23[117]  = v28;
            long long v29 = v58;
            v23[118]  = v57;
            v23[119]  = v29;
            long long v30 = v52;
            v23[112]  = __str;
            v23[113]  = v30;
            long long v31 = v54;
            v23[114]  = v53;
            v23[115]  = v31;
          }
          else
          {
            io80211_os_log();
          }
          AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV2(OSData *)::fLastLogDeltaBTCoexStats  = mach_continuous_time();
          int v32 = *(IO80211SkywalkInterface **)(*((void *)this + 9) + 11304);
          if (v32) {
            IO80211Controller::postMessage(this, v32, 0xBEu, &v38, 0x1CuLL, 1);
          }
          uint64_t v2 = 0;
          dword_1003A47A8  = 0;
          AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV2(OSData *)::fDeltaBTCoexStatsV2  = 0u;
          *(_OWORD *)&dword_1003A4798  = 0u;
          AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV2(OSData *)::fDeltaBTCoexStatsReport  = 0;
          dword_1003A47B8  = 0;
        }
        else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            int v36 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v36, "[dk] %s@%d:Failed to setBTCoexstat\n", "parseEventLogRecordBTCoexStatsV2", 16916);
          }
        }
      }
      else
      {
        uint64_t v2 = 0;
      }
      if (v11)
      {
        memset_s(v11, 0x24uLL, 0, 0x24uLL);
        IOFree(v11, 0x24uLL);
      }
      return v2;
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        __int16 v37 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v37, "[dk] %s@%d:Failed to create aligned wl_ctl_mgt_cnt_t data\n", "parseEventLogRecordBTCoexStatsV2", 16880);
      }
    }
    return 3758097084;
  }
  return v12;
}

uint64_t AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV3(AppleBCMWLANCore *this, OSData *a2)
{
  uint64_t v2 = 3758097084;
  if (!a2) {
    return 3758097090;
  }
  uint64_t BytesNoCopy = (char *)OSData::getBytesNoCopy(a2);
  if (OSData::getLength(a2) <= 0x3B)
  {
    uint64_t v12 = 3758097086;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v28 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int Length = OSData::getLength(a2);
        CCLogStream::logAlert(v28, "[dk] %s@%d:Invalid payload size[%u], expected >= %zu\n", "parseEventLogRecordBTCoexStatsV3", 16988, Length, 0x3CuLL);
        return 3758097086;
      }
    }
  }
  else
  {
    if ((((_BYTE)BytesNoCopy + 8) & 3) == 0)
    {
      unsigned int v11 = 0;
      goto LABEL_8;
    }
    uint64_t v6 = IOMallocZeroTyped();
    if (v6)
    {
      uint64_t BytesNoCopy = (char *)v6;
      uint64_t v7 = (long long *)OSData::getBytesNoCopy(a2);
      long long v9 = v7[1];
      long long v8 = v7[2];
      long long v10 = *v7;
      *(_OWORD *)(BytesNoCopy + 44)  = *(long long *)((char *)v7 + 44);
      *((_OWORD *)BytesNoCopy + 1)  = v9;
      *((_OWORD *)BytesNoCopy + 2)  = v8;
      *(_OWORD *)uint64_t BytesNoCopy = v10;
      unsigned int v11 = BytesNoCopy;
LABEL_8:
      if (*((_DWORD *)BytesNoCopy + 1))
      {
        if (IO80211Controller::setBTCoexstat())
        {
          dword_1003A47D0  = *((_DWORD *)BytesNoCopy + 2);
          int32x4_t v13 = *(int32x4_t *)(BytesNoCopy + 12);
          unsigned __int32 v14 = vorrq_s8(*(int8x16_t *)algn_1003A47D4, (int8x16_t)v13).u32[0];
          int32x4_t v15 = vaddq_s32(*(int32x4_t *)algn_1003A47D4, v13);
          v15.i32[0]  = v14;
          *(int32x4_t *)algn_1003A47D4  = v15;
          word_1003A47E4 += *((_WORD *)BytesNoCopy + 14);
          word_1003A47E6 += *((_WORD *)BytesNoCopy + 15);
          LOWORD(xmmword_1003A47E8)  = xmmword_1003A47E8 + *((_WORD *)BytesNoCopy + 16);
          *(long long *)((char *)&xmmword_1003A47E8 + 4)  = (__int128)vaddq_s16(*(int16x8_t *)((char *)&xmmword_1003A47E8 + 4), *(int16x8_t *)(BytesNoCopy + 36));
          word_1003A47FC += *((_WORD *)BytesNoCopy + 26);
          word_1003A47FE += *((_WORD *)BytesNoCopy + 27);
          word_1003A4800 += *((_WORD *)BytesNoCopy + 28);
          mach_continuous_time();
          absolutetime_to_nanoseconds();
          *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v16 + 1)  = 0xAAAAAAAAAAAAAAAALL;
          __str  = v16;
          long long v33 = v16;
          long long v34 = v16;
          long long v35 = v16;
          long long v36 = v16;
          long long v37 = v16;
          long long v38 = v16;
          long long v39 = v16;
          long long v40 = v16;
          long long v41 = v16;
          long long v42 = v16;
          long long v43 = v16;
          long long v44 = v16;
          long long v45 = v16;
          long long v46 = v16;
          long long v47 = v16;
          snprintf((char *)&__str, 0x100uLL, "BT Coex Stats3:btDur=%llums(%llu%%) status=0x%x reqTypeMap=0x%x req=%u gnt=%u abort=%u rx1ovfl=%u latency=%u sucPM=%u sucCTS2S=%u wlanTXPreempt=%u wlanRXPreempt=%u apTXafterPM=%u gntAudio=%u denyAudio=%u gntA2DP=%u denyA2DP=%u gntSniff=%u denySniff=%u [%llums]\n", dword_1003A47E0 / 0x3E8uLL, 100 * (unint64_t)(dword_1003A47E0 / 0x3E8u) / 0xB2F4FC07949, dword_1003A47D0, *(_DWORD *)algn_1003A47D4, dword_1003A47D8, unk_1003A47DC, (unsigned __int16)word_1003A47E4, (unsigned __int16)word_1003A47E6, (unsigned __int16)xmmword_1003A47E8, WORD2(xmmword_1003A47E8), WORD3(xmmword_1003A47E8), WORD4(xmmword_1003A47E8), WORD5(xmmword_1003A47E8), WORD6(xmmword_1003A47E8),
            HIWORD(xmmword_1003A47E8),
            (unsigned __int16)word_1003A47F8,
            (unsigned __int16)word_1003A47FA,
            (unsigned __int16)word_1003A47FC,
            (unsigned __int16)word_1003A47FE,
            (unsigned __int16)word_1003A4800,
            0xB2F4FC07949);
          uint64_t v17 = *((void *)this + 9);
          if ((*(_DWORD *)(v17 + 980) - 1) > 1)
          {
            int32x4_t v18 = (_OWORD *)(v17 + 31037);
            long long v19 = v45;
            v18[124]  = v44;
            v18[125]  = v19;
            long long v20 = v47;
            v18[126]  = v46;
            v18[127]  = v20;
            long long v21 = v41;
            v18[120]  = v40;
            v18[121]  = v21;
            long long v22 = v43;
            v18[122]  = v42;
            v18[123]  = v22;
            long long v23 = v37;
            v18[116]  = v36;
            v18[117]  = v23;
            long long v24 = v39;
            v18[118]  = v38;
            v18[119]  = v24;
            long long v25 = v33;
            v18[112]  = __str;
            v18[113]  = v25;
            long long v26 = v35;
            v18[114]  = v34;
            v18[115]  = v26;
          }
          else
          {
            io80211_os_log();
          }
          uint64_t v2 = 0;
          AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV3(OSData *)::fLastLogDeltaBTCoexStats  = mach_continuous_time();
          AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV3(OSData *)::fDeltaBTCoexStatsV3  = 0u;
          *(_OWORD *)&dword_1003A47D8  = 0u;
          xmmword_1003A47E8  = 0u;
          *(long long *)((char *)&xmmword_1003A47E8 + 12)  = 0u;
        }
        else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            long long v30 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v30, "[dk] %s@%d:Failed to setBTCoexstat\n", "parseEventLogRecordBTCoexStatsV3", 17030);
          }
        }
      }
      else
      {
        uint64_t v2 = 0;
      }
      if (v11)
      {
        memset_s(v11, 0x3CuLL, 0, 0x3CuLL);
        IOFree(v11, 0x3CuLL);
      }
      return v2;
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v31 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v31, "[dk] %s@%d:Failed to create aligned wl_ctl_mgt_cnt_t data\n", "parseEventLogRecordBTCoexStatsV3", 16994);
      }
    }
    return 3758097084;
  }
  return v12;
}

uint64_t AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV4(AppleBCMWLANCore *this, OSData *a2)
{
  if (!a2) {
    return 3758097090;
  }
  uint64_t BytesNoCopy = OSData::getBytesNoCopy(a2);
  if (OSData::getLength(a2) <= 0x5B)
  {
    uint64_t v6 = 3758097086;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unsigned __int32 v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int Length = OSData::getLength(a2);
        CCLogStream::logAlert(v14, "[dk] %s@%d:Invalid payload size[%u], expected >= %zu\n", "parseEventLogRecordBTCoexStatsV4", 17099, Length, 0x5CuLL);
        return 3758097086;
      }
    }
  }
  else
  {
    if ((((_BYTE)BytesNoCopy + 8) & 3) == 0)
    {
      uint64_t v6 = 0;
      goto LABEL_8;
    }
    uint64_t v5 = IOMallocZeroTyped();
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = OSData::getBytesNoCopy(a2);
      long long v8 = v7[1];
      *(_OWORD *)uint64_t v6 = *v7;
      *(_OWORD *)(v6 + 16)  = v8;
      long long v10 = v7[3];
      long long v9 = v7[4];
      long long v11 = v7[2];
      *(_OWORD *)(v6 + 76)  = *(_OWORD *)((char *)v7 + 76);
      *(_OWORD *)(v6 + 48)  = v10;
      *(_OWORD *)(v6 + 64)  = v9;
      *(_OWORD *)(v6 + 32)  = v11;
      uint64_t BytesNoCopy = (void *)v6;
LABEL_8:
      if (*((_DWORD *)BytesNoCopy + 1))
      {
        unsigned int v12 = BytesNoCopy[1];
        if (v12 >= 8)
        {
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              long long v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v16, "[dk] %s@%d:%s::%s[%u] Unknown status bit in report.btStatusUsed %x\n", "parseEventLogRecordBTCoexStatsV4", 17136, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", "parseEventLogRecordBTCoexStatsV4", 17136, v12);
            }
          }
        }
        IO80211Controller::setBTCoexstat();
      }
      if (v6)
      {
        memset_s((void *)v6, 0x5CuLL, 0, 0x5CuLL);
        IOFree((void *)v6, 0x5CuLL);
        return 0;
      }
      return v6;
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v17, "[dk] %s@%d:Failed to create aligned wl_ctl_mgt_cnt_t data\n", "parseEventLogRecordBTCoexStatsV4", 17105);
      }
    }
    return 3758097084;
  }
  return v6;
}

uint64_t AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV6(AppleBCMWLANCore *this, OSData *a2)
{
  uint64_t v2 = 3758097084;
  unint64_t v46 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1)  = 0xAAAAAAAAAAAAAAAALL;
  long long v44 = v3;
  long long v45 = v3;
  BYTE4(v44)  = 0;
  LODWORD(v44)  = 19;
  if (!a2) {
    return 3758097090;
  }
  uint64_t BytesNoCopy = (char *)OSData::getBytesNoCopy(a2);
  if (OSData::getLength(a2) <= 0x3B)
  {
    uint64_t v13 = 3758097086;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v34 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int Length = OSData::getLength(a2);
        CCLogStream::logAlert(v34, "[dk] %s@%d:Invalid payload size[%u], expected >= %zu\n", "parseEventLogRecordBTCoexStatsV6", 17181, Length, 0x3CuLL);
        return 3758097086;
      }
    }
  }
  else
  {
    if ((((_BYTE)BytesNoCopy + 8) & 3) == 0)
    {
      unsigned int v12 = 0;
      goto LABEL_8;
    }
    uint64_t v7 = IOMallocZeroTyped();
    if (v7)
    {
      uint64_t BytesNoCopy = (char *)v7;
      long long v8 = (long long *)OSData::getBytesNoCopy(a2);
      long long v10 = v8[1];
      long long v9 = v8[2];
      long long v11 = *v8;
      *(_OWORD *)(BytesNoCopy + 44)  = *(long long *)((char *)v8 + 44);
      *((_OWORD *)BytesNoCopy + 1)  = v10;
      *((_OWORD *)BytesNoCopy + 2)  = v9;
      *(_OWORD *)uint64_t BytesNoCopy = v11;
      unsigned int v12 = BytesNoCopy;
LABEL_8:
      unint64_t v50 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v14 + 1)  = 0xAAAAAAAAAAAAAAAALL;
      long long v49 = v14;
      *(_OWORD *)&v47[16]  = v14;
      long long v48 = v14;
      *(_OWORD *)long long v47 = v14;
      if (*((_DWORD *)BytesNoCopy + 1))
      {
        long long v48 = 0uLL;
        uint64_t v15 = *((void *)BytesNoCopy + 2);
        *(void *)&long long v16 = v15;
        *((void *)&v16 + 1)  = HIDWORD(v15);
        *(_OWORD *)&v47[8]  = v16;
        *(void *)&v47[24]  = *((unsigned int *)BytesNoCopy + 6);
        *(void *)&long long v49 = *((unsigned __int16 *)BytesNoCopy + 14);
        *((void *)&v49 + 1)  = *((unsigned __int16 *)BytesNoCopy + 15);
        unint64_t v50 = *((unsigned __int16 *)BytesNoCopy + 16);
        *(void *)long long v47 = *((void *)BytesNoCopy + 1);
        if (*(_DWORD *)v47 >= 8u) {
          *(_DWORD *)long long v47 = v47[0] & 7;
        }
        if (IO80211Controller::setBTCoexstat())
        {
          dword_1003A4818  = *((_DWORD *)BytesNoCopy + 2);
          int32x4_t v17 = *(int32x4_t *)(BytesNoCopy + 12);
          unsigned __int32 v18 = vorrq_s8(*(int8x16_t *)algn_1003A481C, (int8x16_t)v17).u32[0];
          int32x4_t v19 = vaddq_s32(*(int32x4_t *)algn_1003A481C, v17);
          v19.i32[0]  = v18;
          *(int32x4_t *)algn_1003A481C  = v19;
          *(long long *)((char *)&xmmword_1003A4820 + 12)  = (__int128)vaddq_s16(*(int16x8_t *)((char *)&xmmword_1003A4820 + 12), *(int16x8_t *)(BytesNoCopy + 28));
          *(int16x4_t *)&word_1003A483C  = vadd_s16(*(int16x4_t *)&word_1003A483C, *(int16x4_t *)(BytesNoCopy + 44));
          word_1003A4844 += *((_WORD *)BytesNoCopy + 26);
          word_1003A4846 += *((_WORD *)BytesNoCopy + 27);
          word_1003A4848 += *((_WORD *)BytesNoCopy + 28);
          AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV6(OSData *)::fDeltaBTCoexStatsReport  = (uint64_t)vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(dword_1003A4818), (uint32x2_t)-2), (int8x8_t)0x100000001), (int32x2_t)AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV6(OSData *)::fDeltaBTCoexStatsReport);
          dword_1003A4858 += (dword_1003A4818 >> 9) & 1;
          unint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
          mach_continuous_time();
          absolutetime_to_nanoseconds();
          unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v20 + 1)  = 0xAAAAAAAAAAAAAAAALL;
          long long v65 = v20;
          long long v66 = v20;
          long long v63 = v20;
          long long v64 = v20;
          long long v61 = v20;
          long long v62 = v20;
          long long v59 = v20;
          long long v60 = v20;
          long long v57 = v20;
          long long v58 = v20;
          long long v55 = v20;
          long long v56 = v20;
          long long v53 = v20;
          long long v54 = v20;
          __str  = v20;
          long long v52 = v20;
          uint64_t v38 = AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV6(OSData *)::fDeltaBTCoexStatsReport;
          unint64_t v21 = DWORD2(xmmword_1003A4820) / 0x3E8uLL;
          int v39 = 1338014025;
          int v40 = v21;
          int v41 = dword_1003A4858;
          *(_WORD *)(*((void *)this + 9) + 30826)  = 100 * (unint64_t)v21 / 0xB2F4FC07949;
          snprintf((char *)&__str, 0x100uLL, "BT Coex Stats6:btDur=%llums(%llu%%) status=0x%x reqTypeMap=0x%x req=%u gnt=%u abort=%u rx1ovfl=%u latency=%u pmAttempt=%u sucPM=%u sucCTS2S=%u wlanTXPreempt=%u wlanRXPreempt=%u apTXafterPM=%u gntAudio=%u denyAudio=%u gntA2DP=%u denyA2DP=%u gntSniff=%u denySniff=%u [%llums]\n", v21, 100 * (unint64_t)v21 / 0xB2F4FC07949, dword_1003A4818, *(_DWORD *)algn_1003A481C, xmmword_1003A4820, DWORD1(xmmword_1003A4820), WORD6(xmmword_1003A4820), HIWORD(xmmword_1003A4820), (unsigned __int16)word_1003A4830, (unsigned __int16)word_1003A4832, (unsigned __int16)word_1003A4834, (unsigned __int16)word_1003A4836, (unsigned __int16)word_1003A4838, (unsigned __int16)word_1003A483A,
            (unsigned __int16)word_1003A483C,
            (unsigned __int16)word_1003A483E,
            (unsigned __int16)word_1003A4840,
            (unsigned __int16)word_1003A4842,
            (unsigned __int16)word_1003A4844,
            (unsigned __int16)word_1003A4846,
            (unsigned __int16)word_1003A4848,
            0xB2F4FC07949);
          uint64_t v22 = *((void *)this + 9);
          if ((*(_DWORD *)(v22 + 980) - 1) > 1)
          {
            long long v23 = (_OWORD *)(v22 + 31037);
            long long v24 = v64;
            v23[124]  = v63;
            v23[125]  = v24;
            long long v25 = v66;
            v23[126]  = v65;
            v23[127]  = v25;
            long long v26 = v60;
            v23[120]  = v59;
            v23[121]  = v26;
            long long v27 = v62;
            v23[122]  = v61;
            v23[123]  = v27;
            long long v28 = v56;
            v23[116]  = v55;
            v23[117]  = v28;
            long long v29 = v58;
            v23[118]  = v57;
            v23[119]  = v29;
            long long v30 = v52;
            v23[112]  = __str;
            v23[113]  = v30;
            long long v31 = v54;
            v23[114]  = v53;
            v23[115]  = v31;
          }
          else
          {
            io80211_os_log();
          }
          AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV6(OSData *)::fLastLogDeltaBTCoexStats  = mach_continuous_time();
          int v32 = *(IO80211SkywalkInterface **)(*((void *)this + 9) + 11304);
          if (v32) {
            IO80211Controller::postMessage(this, v32, 0xBEu, &v38, 0x1CuLL, 1);
          }
          uint64_t v2 = 0;
          *(_OWORD *)&word_1003A483C  = 0u;
          xmmword_1003A4820  = 0u;
          *(_OWORD *)&word_1003A4830  = 0u;
          AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV6(OSData *)::fDeltaBTCoexStatsV6  = 0u;
          AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV6(OSData *)::fDeltaBTCoexStatsReport  = 0;
          dword_1003A4858  = 0;
        }
        else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            long long v36 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v36, "[dk] %s@%d:Failed to setBTCoexstat\n", "parseEventLogRecordBTCoexStatsV6", 17222);
          }
        }
      }
      else
      {
        uint64_t v2 = 0;
      }
      if (v12)
      {
        memset_s(v12, 0x3CuLL, 0, 0x3CuLL);
        IOFree(v12, 0x3CuLL);
      }
      return v2;
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v37 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v37, "[dk] %s@%d:Failed to create aligned wlc_btc_stats_v6_t data\n", "parseEventLogRecordBTCoexStatsV6", 17187);
      }
    }
    return 3758097084;
  }
  return v13;
}

uint64_t AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV7(AppleBCMWLANCore *this, OSData *a2)
{
  uint64_t v2 = 3758097084;
  unint64_t v57 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1)  = 0xAAAAAAAAAAAAAAAALL;
  long long v55 = v3;
  long long v56 = v3;
  BYTE4(v55)  = 0;
  LODWORD(v55)  = 19;
  if (!a2) {
    return 3758097090;
  }
  uint64_t BytesNoCopy = (unsigned int *)OSData::getBytesNoCopy(a2);
  if (OSData::getLength(a2) <= 0x47)
  {
    uint64_t v13 = 3758097086;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v45 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int Length = OSData::getLength(a2);
        CCLogStream::logAlert(v45, "[dk] %s@%d:Invalid payload size[%u], expected >= %zu\n", "parseEventLogRecordBTCoexStatsV7", 17311, Length, 0x48uLL);
        return 3758097086;
      }
    }
  }
  else
  {
    if ((((_BYTE)BytesNoCopy + 8) & 3) == 0)
    {
      unsigned int v12 = 0;
      goto LABEL_8;
    }
    uint64_t v7 = IOMallocZeroTyped();
    if (v7)
    {
      uint64_t BytesNoCopy = (unsigned int *)v7;
      long long v8 = OSData::getBytesNoCopy(a2);
      *(_OWORD *)uint64_t BytesNoCopy = *v8;
      long long v10 = v8[2];
      long long v9 = v8[3];
      long long v11 = v8[1];
      *((void *)BytesNoCopy + 8)  = *((void *)v8 + 8);
      *((_OWORD *)BytesNoCopy + 2)  = v10;
      *((_OWORD *)BytesNoCopy + AppleBCMWLANCommandMonitor::free(this - 3) = v9;
      *((_OWORD *)BytesNoCopy + 1)  = v11;
      unsigned int v12 = BytesNoCopy;
LABEL_8:
      unint64_t v61 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v14 + 1)  = 0xAAAAAAAAAAAAAAAALL;
      long long v60 = v14;
      *(_OWORD *)&v58[16]  = v14;
      long long v59 = v14;
      *(_OWORD *)long long v58 = v14;
      if (BytesNoCopy[1])
      {
        long long v59 = 0uLL;
        uint64_t v15 = *((void *)BytesNoCopy + 2);
        *(void *)&long long v16 = v15;
        *((void *)&v16 + 1)  = HIDWORD(v15);
        *(_OWORD *)&v58[8]  = v16;
        *(void *)&v58[24]  = BytesNoCopy[6];
        *(void *)&long long v60 = *((unsigned __int16 *)BytesNoCopy + 14);
        *((void *)&v60 + 1)  = *((unsigned __int16 *)BytesNoCopy + 15);
        unint64_t v61 = *((unsigned __int16 *)BytesNoCopy + 16);
        *(void *)long long v58 = *((void *)BytesNoCopy + 1);
        if (*(_DWORD *)v58 >= 8u) {
          *(_DWORD *)long long v58 = v58[0] & 7;
        }
        if (IO80211Controller::setBTCoexstat())
        {
          dword_1003A4870  = BytesNoCopy[2];
          int32x4_t v17 = *(int32x4_t *)(BytesNoCopy + 3);
          unsigned __int32 v18 = vorrq_s8(*(int8x16_t *)algn_1003A4874, (int8x16_t)v17).u32[0];
          int32x4_t v19 = vaddq_s32(*(int32x4_t *)algn_1003A4874, v17);
          v19.i32[0]  = v18;
          *(int32x4_t *)algn_1003A4874  = v19;
          *(int16x8_t *)&word_1003A4884  = vaddq_s16(*(int16x8_t *)&word_1003A4884, *(int16x8_t *)(BytesNoCopy + 7));
          *(long long *)((char *)&xmmword_1003A4888 + 12)  = (__int128)vaddq_s16(*(int16x8_t *)((char *)&xmmword_1003A4888 + 12), *(int16x8_t *)(BytesNoCopy + 11));
          *(int16x4_t *)&word_1003A48A4  = vadd_s16(*(int16x4_t *)&word_1003A48A4, *(int16x4_t *)(BytesNoCopy + 15));
          WORD2(qword_1003A48A8) += *((_WORD *)BytesNoCopy + 34);
          unsigned int v20 = BytesNoCopy[2];
          AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV7(OSData *)::fDeltaBTCoexStatsReport  = (uint64_t)vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v20), (uint32x2_t)-2), (int8x8_t)0x100000001), (int32x2_t)AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV7(OSData *)::fDeltaBTCoexStatsReport);
          dword_1003A48B8 += (v20 >> 9) & 1;
          unint64_t v54 = 0xAAAAAAAAAAAAAAAALL;
          mach_continuous_time();
          absolutetime_to_nanoseconds();
          unint64_t v53 = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&long long v21 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v21 + 1)  = 0xAAAAAAAAAAAAAAAALL;
          long long v76 = v21;
          long long v77 = v21;
          long long v74 = v21;
          long long v75 = v21;
          long long v72 = v21;
          long long v73 = v21;
          long long v70 = v21;
          long long v71 = v21;
          long long v68 = v21;
          long long v69 = v21;
          long long v66 = v21;
          long long v67 = v21;
          long long v64 = v21;
          long long v65 = v21;
          __str  = v21;
          long long v63 = v21;
          uint64_t v49 = AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV7(OSData *)::fDeltaBTCoexStatsReport;
          int v52 = dword_1003A48B8;
          unint64_t v22 = dword_1003A4880 / 0x3E8uLL;
          *(_WORD *)(*((void *)this + 9) + 30826)  = 100 * (unint64_t)v22 / 0xB2F4FC07949;
          int v50 = 1338014025;
          int v51 = v22;
          snprintf((char *)&__str, 0x100uLL, "Stats7: btDur=%llums(%llu%%) status=0x%x reqTypeMap=0x%x req=%u gnt=%u abort=%u rx1ovfl=%u latency=%u pmAttempt=%u sucPM=%u sucCTS2S=%u wlanTXPreempt=%u wlanRXPreempt=%u apTXafterPM=%u gntAudio=%u denyAudio=%u gntA2DP=%u denyA2DP=%u\n", v22, 100 * (unint64_t)v22 / 0xB2F4FC07949, dword_1003A4870, *(_DWORD *)algn_1003A4874, dword_1003A4878, unk_1003A487C, (unsigned __int16)word_1003A4884, (unsigned __int16)word_1003A4886, (unsigned __int16)xmmword_1003A4888, WORD1(xmmword_1003A4888), WORD2(xmmword_1003A4888), WORD3(xmmword_1003A4888), WORD4(xmmword_1003A4888), WORD5(xmmword_1003A4888),
            WORD6(xmmword_1003A4888),
            HIWORD(xmmword_1003A4888),
            (unsigned __int16)word_1003A4898,
            (unsigned __int16)word_1003A489A,
            (unsigned __int16)word_1003A489C);
          uint64_t v23 = *((void *)this + 9);
          if ((*(_DWORD *)(v23 + 980) - 1) > 1)
          {
            long long v24 = (_OWORD *)(v23 + 31037);
            long long v25 = v75;
            v24[124]  = v74;
            v24[125]  = v25;
            long long v26 = v77;
            v24[126]  = v76;
            v24[127]  = v26;
            long long v27 = v71;
            v24[120]  = v70;
            v24[121]  = v27;
            long long v28 = v73;
            v24[122]  = v72;
            v24[123]  = v28;
            long long v29 = v67;
            v24[116]  = v66;
            v24[117]  = v29;
            long long v30 = v69;
            v24[118]  = v68;
            v24[119]  = v30;
            long long v31 = v63;
            v24[112]  = __str;
            v24[113]  = v31;
            long long v32 = v65;
            v24[114]  = v64;
            v24[115]  = v32;
          }
          else
          {
            io80211_os_log();
          }
          snprintf((char *)&__str, 0x100uLL, "Stats7: CrtPriCnt=%u PriCnt=%u gntSniff=%u denySniff=%u antGrant0~10ms=%u antGrant10~30ms=%u antGrant30~60ms=%u antGrant>60ms=%u [%llums]\n", (unsigned __int16)word_1003A48A2, (unsigned __int16)word_1003A48A4, (unsigned __int16)word_1003A489E, (unsigned __int16)word_1003A48A0, (unsigned __int16)word_1003A48A6, (unsigned __int16)qword_1003A48A8, WORD1(qword_1003A48A8), WORD2(qword_1003A48A8), 0xB2F4FC07949);
          uint64_t v33 = *((void *)this + 9);
          if ((*(_DWORD *)(v33 + 980) - 1) > 1)
          {
            long long v34 = (_OWORD *)(v33 + 31037);
            long long v35 = v75;
            v34[140]  = v74;
            v34[141]  = v35;
            long long v36 = v77;
            v34[142]  = v76;
            v34[143]  = v36;
            long long v37 = v71;
            v34[136]  = v70;
            v34[137]  = v37;
            long long v38 = v73;
            v34[138]  = v72;
            v34[139]  = v38;
            long long v39 = v67;
            v34[132]  = v66;
            v34[133]  = v39;
            long long v40 = v69;
            v34[134]  = v68;
            v34[135]  = v40;
            long long v41 = v63;
            v34[128]  = __str;
            v34[129]  = v41;
            long long v42 = v65;
            v34[130]  = v64;
            v34[131]  = v42;
          }
          else
          {
            io80211_os_log();
          }
          AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV7(OSData *)::fLastLogDeltaBTCoexStats  = mach_continuous_time();
          unint64_t v43 = *(IO80211SkywalkInterface **)(*((void *)this + 9) + 11304);
          if (v43) {
            IO80211Controller::postMessage(this, v43, 0xBEu, &v49, 0x1CuLL, 1);
          }
          uint64_t v2 = 0;
          qword_1003A48A8  = 0;
          xmmword_1003A4888  = 0u;
          *(_OWORD *)&word_1003A4898  = 0u;
          AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV7(OSData *)::fDeltaBTCoexStatsV7  = 0u;
          *(_OWORD *)&dword_1003A4878  = 0u;
          AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV7(OSData *)::fDeltaBTCoexStatsReport  = 0;
          dword_1003A48B8  = 0;
        }
        else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            long long v47 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v47, "[dk] %s@%d:Failed to setBTCoexstat\n", "parseEventLogRecordBTCoexStatsV7", 17352);
          }
        }
      }
      else
      {
        uint64_t v2 = 0;
      }
      if (v12)
      {
        memset_s(v12, 0x48uLL, 0, 0x48uLL);
        IOFree(v12, 0x48uLL);
      }
      return v2;
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v48 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v48, "[dk] %s@%d:Failed to create aligned wlc_btc_stats_v7_t data\n", "parseEventLogRecordBTCoexStatsV7", 17317);
      }
    }
    return 3758097084;
  }
  return v13;
}

uint64_t AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV11(AppleBCMWLANCore *this, OSData *a2)
{
  uint64_t v2 = 3758097084;
  unint64_t v74 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1)  = 0xAAAAAAAAAAAAAAAALL;
  long long v72 = v3;
  long long v73 = v3;
  BYTE4(v72)  = 0;
  LODWORD(v72)  = 19;
  if (!a2) {
    return 3758097090;
  }
  uint64_t BytesNoCopy = (unsigned int *)OSData::getBytesNoCopy(a2);
  if (OSData::getLength(a2) <= 0x57)
  {
    uint64_t v14 = 3758097086;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v61 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int Length = OSData::getLength(a2);
        CCLogStream::logAlert(v61, "[dk] %s@%d:Invalid payload size[%u], expected >= %zu\n", "parseEventLogRecordBTCoexStatsV11", 17452, Length, 0x58uLL);
        return 3758097086;
      }
    }
  }
  else
  {
    if ((((_BYTE)BytesNoCopy + 8) & 3) == 0)
    {
      uint64_t v13 = 0;
      goto LABEL_8;
    }
    uint64_t v7 = IOMallocZeroTyped();
    if (v7)
    {
      uint64_t BytesNoCopy = (unsigned int *)v7;
      long long v8 = OSData::getBytesNoCopy(a2);
      long long v9 = v8[1];
      *(_OWORD *)uint64_t BytesNoCopy = *v8;
      *((_OWORD *)BytesNoCopy + 1)  = v9;
      long long v11 = v8[3];
      long long v10 = v8[4];
      long long v12 = v8[2];
      *((void *)BytesNoCopy + 10)  = *((void *)v8 + 10);
      *((_OWORD *)BytesNoCopy + AppleBCMWLANCommandMonitor::free(this - 3) = v11;
      *((_OWORD *)BytesNoCopy + 4)  = v10;
      *((_OWORD *)BytesNoCopy + 2)  = v12;
      uint64_t v13 = BytesNoCopy;
LABEL_8:
      unint64_t v78 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v15 + 1)  = 0xAAAAAAAAAAAAAAAALL;
      long long v77 = v15;
      *(_OWORD *)&v75[16]  = v15;
      long long v76 = v15;
      *(_OWORD *)long long v75 = v15;
      if (BytesNoCopy[1])
      {
        long long v76 = 0uLL;
        uint64_t v16 = *((void *)BytesNoCopy + 2);
        *(void *)&long long v17 = v16;
        *((void *)&v17 + 1)  = HIDWORD(v16);
        *(_OWORD *)&v75[8]  = v17;
        *(void *)&v75[24]  = BytesNoCopy[6];
        uint64_t v18 = *((unsigned __int16 *)BytesNoCopy + 14);
        *(void *)&long long v77 = v18 - (unsigned __int16)AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV11(OSData *)::lastBTC;
        uint64_t v19 = *((unsigned __int16 *)BytesNoCopy + 15);
        *((void *)&v77 + 1)  = v19
                              - (unsigned __int16)AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV11(OSData *)::lastBTC;
        uint64_t v20 = *((unsigned __int16 *)BytesNoCopy + 16);
        unint64_t v78 = v20 - (unsigned __int16)AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV11(OSData *)::lastBTC;
        AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV11(OSData *)::lastBTC  = v18;
        AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV11(OSData *)::lastBTC  = v19;
        AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV11(OSData *)::lastBTC  = v20;
        *(void *)long long v75 = *((void *)BytesNoCopy + 1);
        if (*(_DWORD *)v75 >= 8u) {
          *(_DWORD *)long long v75 = v75[0] & 7;
        }
        if (IO80211Controller::setBTCoexstat())
        {
          dword_1003A48DC  = BytesNoCopy[2];
          int32x4_t v21 = *(int32x4_t *)(BytesNoCopy + 3);
          unsigned __int32 v22 = vorrq_s8(unk_1003A48E0, (int8x16_t)v21).u32[0];
          int32x4_t v23 = vaddq_s32(unk_1003A48E0, v21);
          v23.i32[0]  = v22;
          unk_1003A48E0  = v23;
          *(long long *)((char *)&xmmword_1003A48E4 + 12)  = (__int128)vaddq_s16(*(int16x8_t *)((char *)&xmmword_1003A48E4 + 12), *(int16x8_t *)(BytesNoCopy + 7));
          *(int16x8_t *)&word_1003A4900  = vaddq_s16(*(int16x8_t *)&word_1003A4900, *(int16x8_t *)(BytesNoCopy + 11));
          *(int16x4_t *)((char *)&xmmword_1003A4904 + 12)  = vadd_s16(*(int16x4_t *)((char *)&xmmword_1003A4904 + 12), *(int16x4_t *)(BytesNoCopy + 15));
          word_1003A4918 += *((_WORD *)BytesNoCopy + 34);
          __int16 v24 = word_1003A491A;
          if ((unsigned __int16)word_1003A491A <= *((unsigned __int16 *)BytesNoCopy + 35)) {
            __int16 v24 = *((_WORD *)BytesNoCopy + 35);
          }
          word_1003A491A  = v24;
          byte_1003A491C += *((unsigned char *)BytesNoCopy + 72);
          byte_1003A491D += *((unsigned char *)BytesNoCopy + 73);
          *(_DWORD *)&byte_1003A491F  = *(unsigned int *)((char *)BytesNoCopy + 75);
          byte_1003A4923  = *((unsigned char *)BytesNoCopy + 79);
          LOWORD(qword_1003A4924)  = qword_1003A4924 + *((_WORD *)BytesNoCopy + 40);
          WORD1(qword_1003A4924) += *((_WORD *)BytesNoCopy + 41);
          HIDWORD(qword_1003A4924)  = BytesNoCopy[21];
          unsigned int v25 = BytesNoCopy[2];
          AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV11(OSData *)::fDeltaBTCoexStatsReport  = (uint64_t)vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v25), (uint32x2_t)-2), (int8x8_t)0x100000001), (int32x2_t)AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV11(OSData *)::fDeltaBTCoexStatsReport);
          dword_1003A4938 += (v25 >> 9) & 1;
          unint64_t v71 = 0xAAAAAAAAAAAAAAAALL;
          mach_continuous_time();
          absolutetime_to_nanoseconds();
          *(void *)&long long v26 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v26 + 1)  = 0xAAAAAAAAAAAAAAAALL;
          long long v93 = v26;
          long long v94 = v26;
          long long v91 = v26;
          long long v92 = v26;
          long long v89 = v26;
          long long v90 = v26;
          long long v87 = v26;
          long long v88 = v26;
          long long v85 = v26;
          long long v86 = v26;
          long long v83 = v26;
          long long v84 = v26;
          long long v81 = v26;
          long long v82 = v26;
          __str  = v26;
          long long v80 = v26;
          uint64_t v65 = AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV11(OSData *)::fDeltaBTCoexStatsReport;
          int v70 = -1431655766;
          unint64_t v27 = DWORD2(xmmword_1003A48E4) / 0x3E8uLL;
          int v66 = 1338014025;
          int v67 = v27;
          int v68 = dword_1003A4938;
          *(_WORD *)(*((void *)this + 9) + 30826)  = 100 * (unint64_t)v27 / 0xB2F4FC07949;
          LOWORD(v70)  = word_1003A4920;
          uint64_t v28 = ((double)(0xB2F4FC07949 * v27)
                             / ((double)0xB2F4FC07949uLL - (double)(unsigned __int16)qword_1003A4924));
          unsigned int v69 = ((double)(0xB2F4FC07949 * v27)
                             / ((double)0xB2F4FC07949uLL - (double)(unsigned __int16)qword_1003A4924));
          snprintf((char *)&__str, 0x100uLL, "Stats11: btDur=%llums(%llu%%) status=0x%x reqTypeMap=0x%x req=%u gnt=%u abort=%u rx1ovfl=%u latency=%u pmAttempt=%u sucPM=%u sucCTS2S=%u wlanTXPreempt=%u wlanRXPreempt=%u apTXafterPM=%u gntAudio=%u denyAudio=%u gntA2DP=%u denyA2DP=%u\n", v27, 100 * (unint64_t)v27 / 0xB2F4FC07949, dword_1003A48DC, unk_1003A48E0, xmmword_1003A48E4, DWORD1(xmmword_1003A48E4), WORD6(xmmword_1003A48E4), HIWORD(xmmword_1003A48E4), (unsigned __int16)word_1003A48F4, (unsigned __int16)word_1003A48F6, (unsigned __int16)word_1003A48F8, (unsigned __int16)word_1003A48FA, (unsigned __int16)word_1003A48FC, (unsigned __int16)word_1003A48FE,
            (unsigned __int16)word_1003A4900,
            (unsigned __int16)word_1003A4902,
            (unsigned __int16)xmmword_1003A4904,
            WORD1(xmmword_1003A4904),
            WORD2(xmmword_1003A4904));
          uint64_t v29 = *((void *)this + 9);
          if ((*(_DWORD *)(v29 + 980) - 1) > 1)
          {
            long long v30 = (_OWORD *)(v29 + 31037);
            long long v31 = v92;
            v30[124]  = v91;
            v30[125]  = v31;
            long long v32 = v94;
            v30[126]  = v93;
            v30[127]  = v32;
            long long v33 = v88;
            v30[120]  = v87;
            v30[121]  = v33;
            long long v34 = v90;
            v30[122]  = v89;
            v30[123]  = v34;
            long long v35 = v84;
            v30[116]  = v83;
            v30[117]  = v35;
            long long v36 = v86;
            v30[118]  = v85;
            v30[119]  = v36;
            long long v37 = v80;
            v30[112]  = __str;
            v30[113]  = v37;
            long long v38 = v82;
            v30[114]  = v81;
            v30[115]  = v38;
          }
          else
          {
            io80211_os_log();
          }
          snprintf((char *)&__str, 0x100uLL, "Stats11: CrtPriCnt=%u PriCnt=%u gntSniff=%u denySniff=%u antGrant0~10ms=%u antGrant10~30ms=%u antGrant30~60ms=%u antGrant>60ms=%u APLeakiness=%u rr_cnt=%u rr_succ_cnt=%u\n", WORD5(xmmword_1003A4904), WORD6(xmmword_1003A4904), WORD3(xmmword_1003A4904), WORD4(xmmword_1003A4904), HIWORD(xmmword_1003A4904), (unsigned __int16)word_1003A4914, (unsigned __int16)word_1003A4916, (unsigned __int16)word_1003A4918, (unsigned __int16)word_1003A491A, byte_1003A491C, byte_1003A491D);
          uint64_t v39 = *((void *)this + 9);
          if ((*(_DWORD *)(v39 + 980) - 1) > 1)
          {
            long long v40 = (_OWORD *)(v39 + 31037);
            long long v41 = v92;
            v40[140]  = v91;
            v40[141]  = v41;
            long long v42 = v94;
            v40[142]  = v93;
            v40[143]  = v42;
            long long v43 = v88;
            v40[136]  = v87;
            v40[137]  = v43;
            long long v44 = v90;
            v40[138]  = v89;
            v40[139]  = v44;
            long long v45 = v84;
            v40[132]  = v83;
            v40[133]  = v45;
            long long v46 = v86;
            v40[134]  = v85;
            v40[135]  = v46;
            long long v47 = v80;
            v40[128]  = __str;
            v40[129]  = v47;
            long long v48 = v82;
            v40[130]  = v81;
            v40[131]  = v48;
          }
          else
          {
            io80211_os_log();
          }
          snprintf((char *)&__str, 0x100uLL, "Stats11: btDurAir=%llums(%llu%%) desenseMode=%d wlrssi=%d btrssi=%d profile2gActive=%d profile5gActive=%d inactiveDur=%u btPmAttemptNoackCnt=%u status2=0x%x [%llums]\n", v28, 100 * v28 / 0xB2F4FC07949uLL, byte_1003A491F, (char)word_1003A4920, SHIBYTE(word_1003A4920), byte_1003A4922, byte_1003A4923, (unsigned __int16)qword_1003A4924, WORD1(qword_1003A4924), HIDWORD(qword_1003A4924), 0xB2F4FC07949);
          uint64_t v49 = *((void *)this + 9);
          if ((*(_DWORD *)(v49 + 980) - 1) > 1)
          {
            int v50 = (_OWORD *)(v49 + 31037);
            long long v51 = v92;
            v50[188]  = v91;
            v50[189]  = v51;
            long long v52 = v94;
            v50[190]  = v93;
            v50[191]  = v52;
            long long v53 = v88;
            v50[184]  = v87;
            v50[185]  = v53;
            long long v54 = v90;
            v50[186]  = v89;
            v50[187]  = v54;
            long long v55 = v84;
            v50[180]  = v83;
            v50[181]  = v55;
            long long v56 = v86;
            v50[182]  = v85;
            v50[183]  = v56;
            long long v57 = v80;
            v50[176]  = __str;
            v50[177]  = v57;
            long long v58 = v82;
            v50[178]  = v81;
            v50[179]  = v58;
          }
          else
          {
            io80211_os_log();
          }
          AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV11(OSData *)::fLastLogDeltaBTCoexStats  = mach_continuous_time();
          long long v59 = *(IO80211SkywalkInterface **)(*((void *)this + 9) + 11304);
          if (v59) {
            IO80211Controller::postMessage(this, v59, 0xBEu, &v65, 0x1CuLL, 1);
          }
          uint64_t v2 = 0;
          qword_1003A4924  = 0;
          xmmword_1003A4904  = 0u;
          *(_OWORD *)&word_1003A4914  = 0u;
          xmmword_1003A48E4  = 0u;
          *(_OWORD *)&word_1003A48F4  = 0u;
          AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV11(OSData *)::fDeltaBTCoexStatsV11  = 0u;
          AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV11(OSData *)::fDeltaBTCoexStatsReport  = 0;
          dword_1003A4938  = 0;
        }
        else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            long long v63 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v63, "[dk] %s@%d:Failed to setBTCoexstat\n", "parseEventLogRecordBTCoexStatsV11", 17498);
          }
        }
      }
      else
      {
        uint64_t v2 = 0;
      }
      if (v13)
      {
        memset_s(v13, 0x58uLL, 0, 0x58uLL);
        IOFree(v13, 0x58uLL);
      }
      return v2;
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v64 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v64, "[dk] %s@%d:Failed to create aligned wlc_btc_stats_v11_t data\n", "parseEventLogRecordBTCoexStatsV11", 17458);
      }
    }
    return 3758097084;
  }
  return v14;
}

uint64_t AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV12(AppleBCMWLANCore *this, OSData *a2)
{
  uint64_t v2 = 3758097084;
  unint64_t v97 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1)  = 0xAAAAAAAAAAAAAAAALL;
  long long v95 = v3;
  long long v96 = v3;
  BYTE4(v95)  = 0;
  LODWORD(v95)  = 19;
  if (!a2) {
    return 3758097090;
  }
  uint64_t BytesNoCopy = (unsigned __int8 *)OSData::getBytesNoCopy(a2);
  if (OSData::getLength(a2) <= 0x6F)
  {
    uint64_t v15 = 3758097086;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v89 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int Length = OSData::getLength(a2);
        CCLogStream::logAlert(v89, "[dk] %s@%d:Invalid payload size[%u], expected >= %zu\n", "parseEventLogRecordBTCoexStatsV12", 17646, Length, 0x70uLL);
        return 3758097086;
      }
    }
  }
  else
  {
    if ((((_BYTE)BytesNoCopy + 8) & 3) == 0)
    {
      uint64_t v14 = 0;
LABEL_8:
      unint64_t v101 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v16 + 1)  = 0xAAAAAAAAAAAAAAAALL;
      long long v100 = v16;
      v98[1]  = v16;
      long long v99 = v16;
      v98[0]  = v16;
      if (*((_DWORD *)BytesNoCopy + 1))
      {
        unsigned int v17 = BytesNoCopy[74];
        if (v17 >= 2)
        {
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              long long v91 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v91, "[dk] %s@%d: parseEventLogRecordBTCoexStatsV12: Invalid btc slice_index [%u] \n");
            }
          }
          goto LABEL_55;
        }
        unint64_t v101 = 0;
        long long v100 = 0u;
        long long v99 = 0u;
        memset(v98, 0, sizeof(v98));
        if (v17 == 1)
        {
          uint64_t v18 = *((void *)BytesNoCopy + 2);
          *(void *)&long long v19 = v18;
          *((void *)&v19 + 1)  = HIDWORD(v18);
          *(_OWORD *)((char *)v98 + 8)  = v19;
          *((void *)&v98[1] + 1)  = *((unsigned int *)BytesNoCopy + 6);
          uint64_t v20 = *((unsigned __int16 *)BytesNoCopy + 14);
          *(void *)&long long v100 = v20
                           - (unsigned __int16)AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV12(OSData *)::lastBTC;
          uint64_t v21 = *((unsigned __int16 *)BytesNoCopy + 15);
          *((void *)&v100 + 1)  = v21
                                 - (unsigned __int16)AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV12(OSData *)::lastBTC;
          uint64_t v22 = *((unsigned __int16 *)BytesNoCopy + 16);
          unint64_t v101 = v22 - (unsigned __int16)AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV12(OSData *)::lastBTC;
          AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV12(OSData *)::lastBTC  = v20;
          AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV12(OSData *)::lastBTC  = v21;
          AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV12(OSData *)::lastBTC  = v22;
          *(void *)&v98[0]  = *((void *)BytesNoCopy + 1);
          if (LODWORD(v98[0]) >= 8) {
            LODWORD(v98[0])  = v98[0] & 7;
          }
          if (!IO80211Controller::setBTCoexstat())
          {
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (CCLogStream::shouldLog())
              {
                long long v92 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                CCLogStream::logAlert(v92, "[dk] %s@%d:Failed to setBTCoexstat\n");
              }
            }
            goto LABEL_55;
          }
          unsigned int v23 = BytesNoCopy[74];
        }
        else
        {
          unsigned int v23 = 0;
        }
        __int16 v24 = (char *)&AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV12(OSData *)::fDeltaBTCoexStatsv12 + 112 * v23;
        *((_DWORD *)v24 + 2)  = *((_DWORD *)BytesNoCopy + 2);
        int32x4_t v25 = *(int32x4_t *)(BytesNoCopy + 12);
        int32x4_t v26 = *(int32x4_t *)(v24 + 12);
        unsigned __int32 v27 = vorrq_s8((int8x16_t)v26, (int8x16_t)v25).u32[0];
        int32x4_t v28 = vaddq_s32(v26, v25);
        v28.i32[0]  = v27;
        *(int32x4_t *)(v24 + 12)  = v28;
        *(int16x8_t *)(v24 + 28)  = vaddq_s16(*(int16x8_t *)(v24 + 28), *(int16x8_t *)(BytesNoCopy + 28));
        *(int16x8_t *)(v24 + 44)  = vaddq_s16(*(int16x8_t *)(v24 + 44), *(int16x8_t *)(BytesNoCopy + 44));
        *(int16x4_t *)(v24 + 60)  = vadd_s16(*(int16x4_t *)(v24 + 60), *(int16x4_t *)(BytesNoCopy + 60));
        *((_WORD *)v24 + 34) += *((_WORD *)BytesNoCopy + 34);
        unsigned int v29 = *((unsigned __int16 *)v24 + 35);
        if (v29 <= *((unsigned __int16 *)BytesNoCopy + 35)) {
          LOWORD(v29)  = *((_WORD *)BytesNoCopy + 35);
        }
        *((_WORD *)v24 + 35)  = v29;
        v24[72] += BytesNoCopy[72];
        v24[73] += BytesNoCopy[73];
        *(_DWORD *)(v24 + 75)  = *(_DWORD *)(BytesNoCopy + 75);
        v24[79]  = BytesNoCopy[79];
        *((_WORD *)v24 + 40) += *((_WORD *)BytesNoCopy + 40);
        *((_WORD *)v24 + 41) += *((_WORD *)BytesNoCopy + 41);
        *((_DWORD *)v24 + 21)  = *((_DWORD *)BytesNoCopy + 21);
        v24[74]  = v23;
        uint64_t v30 = BytesNoCopy[74];
        long long v31 = (uint32x2_t *)((char *)&AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV12(OSData *)::fDeltaBTCoexStatsv12
                           + 112 * v30);
        v31[11].i32[0]  = *((_DWORD *)BytesNoCopy + 22);
        v31[11].i16[2] += *((_WORD *)BytesNoCopy + 46);
        v31[11].i16[3] += *((_WORD *)BytesNoCopy + 47);
        v31[12]  = vmax_u32(v31[12], *(uint32x2_t *)(BytesNoCopy + 96));
        v31[13].i16[0] += *((_WORD *)BytesNoCopy + 52);
        v31[13].i16[1] += *((_WORD *)BytesNoCopy + 53);
        v31[13].i16[2] |= *((_WORD *)BytesNoCopy + 54);
        if (v30 == 1)
        {
          unsigned int v32 = *((_DWORD *)BytesNoCopy + 2);
          AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV12(OSData *)::fDeltaBTCoexStatsReport  = (uint64_t)vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v32), (uint32x2_t)-2), (int8x8_t)0x100000001), (int32x2_t)AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV12(OSData *)::fDeltaBTCoexStatsReport);
          dword_1003A4A40 += (v32 >> 9) & 1;
        }
        v94[4]  = 0xAAAAAAAAAAAAAAAALL;
        mach_continuous_time();
        absolutetime_to_nanoseconds();
        memset(v94, 170, 28);
        *(void *)&long long v33 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v33 + 1)  = 0xAAAAAAAAAAAAAAAALL;
        long long v116 = v33;
        long long v117 = v33;
        v114  = v33;
        v115  = v33;
        long long v112 = v33;
        long long v113 = v33;
        long long v110 = v33;
        long long v111 = v33;
        long long v108 = v33;
        long long v109 = v33;
        long long v106 = v33;
        long long v107 = v33;
        v104  = v33;
        long long v105 = v33;
        __str  = v33;
        long long v103 = v33;
        unsigned int v34 = BytesNoCopy[74];
        unint64_t v35 = *((unsigned int *)&AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV12(OSData *)::fDeltaBTCoexStatsv12
              + 28 * BytesNoCopy[74]
              + 6)
            / 0x3E8uLL;
        if (v34 == 1)
        {
          *(_WORD *)(*((void *)this + 9) + 30826)  = 100 * (unint64_t)v35 / 0xB2F4FC07949;
          v94[0]  = AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV12(OSData *)::fDeltaBTCoexStatsReport;
          LODWORD(v94[1])  = 1338014025;
          HIDWORD(v94[1])  = v35;
          LOWORD(v94[3])  = unk_1003A4A10;
          v94[2]  = dword_1003A4A40;
        }
        uint64_t v36 = ((double)(0xB2F4FC07949 * v35)
                           / ((double)0xB2F4FC07949uLL
                            - (double)*((unsigned __int16 *)&AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV12(OSData *)::fDeltaBTCoexStatsv12
                                      + 56 * v34
                                      + 40)));
        if (!v34)
        {
          long long v37 = "2";
          if (!unk_1003A499E) {
            long long v37 = "5";
          }
          snprintf((char *)&__str, 0x100uLL, "Stats12(%sG): bt5g_status=0x%x bt5g_defer_cnt=%u bt5g_no_defer_cnt=%u bt5g_defer_max_switch_dur=%u bt5g_no_defer_max_switch_dur=%u bt5g_switch_succ_cnt=%u bt5g_switch_fail_cnt=%u bt5g_switch_reason_bm=%u\n", v37, unk_1003A49AC, unk_1003A49B0, unk_1003A49B2, unk_1003A49B4, unk_1003A49B8, unk_1003A49BC, unk_1003A49BE, unk_1003A49C0);
        }
        uint64_t v38 = *((void *)this + 9);
        if ((*(_DWORD *)(v38 + 980) - 1) > 1)
        {
          uint64_t v39 = (_OWORD *)(v38 + 31037);
          long long v40 = v115;
          v39[124]  = v114;
          v39[125]  = v40;
          long long v41 = v117;
          v39[126]  = v116;
          v39[127]  = v41;
          long long v42 = v111;
          v39[120]  = v110;
          v39[121]  = v42;
          long long v43 = v113;
          v39[122]  = v112;
          v39[123]  = v43;
          long long v44 = v107;
          v39[116]  = v106;
          v39[117]  = v44;
          long long v45 = v109;
          v39[118]  = v108;
          v39[119]  = v45;
          long long v46 = v103;
          v39[112]  = __str;
          v39[113]  = v46;
          long long v47 = v105;
          v39[114]  = v104;
          v39[115]  = v47;
        }
        else
        {
          io80211_os_log();
        }
        long long v48 = (char *)&AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV12(OSData *)::fDeltaBTCoexStatsv12
            + 112 * BytesNoCopy[74];
        uint64_t v49 = "2";
        if (!v48[74]) {
          uint64_t v49 = "5";
        }
        snprintf((char *)&__str, 0x100uLL, "Stats12(%sG): btDur=%llums(%llu%%) status=0x%x reqTypeMap=0x%x req=%u gnt=%u abort=%u rx1ovfl=%u latency=%u pmAttempt=%u sucPM=%u sucCTS2S=%u wlanTXPreempt=%u wlanRXPreempt=%u apTXafterPM=%u gntAudio=%u denyAudio=%u gntA2DP=%u denyA2DP=%u\n", v49, v35, 100 * (unint64_t)v35 / 0xB2F4FC07949, *((_DWORD *)v48 + 2), *((_DWORD *)v48 + 3), *((_DWORD *)v48 + 4), *((_DWORD *)v48 + 5), *((unsigned __int16 *)v48 + 14), *((unsigned __int16 *)v48 + 15), *((unsigned __int16 *)v48 + 16), *((unsigned __int16 *)v48 + 17), *((unsigned __int16 *)v48 + 18), *((unsigned __int16 *)v48 + 19), *((unsigned __int16 *)v48 + 20),
          *((unsigned __int16 *)v48 + 21),
          *((unsigned __int16 *)v48 + 22),
          *((unsigned __int16 *)v48 + 23),
          *((unsigned __int16 *)v48 + 24),
          *((unsigned __int16 *)v48 + 25),
          *((unsigned __int16 *)v48 + 26));
        uint64_t v50 = *((void *)this + 9);
        if ((*(_DWORD *)(v50 + 980) - 1) > 1)
        {
          long long v51 = (_OWORD *)(v50 + 31037);
          long long v52 = v115;
          v51[140]  = v114;
          v51[141]  = v52;
          long long v53 = v117;
          v51[142]  = v116;
          v51[143]  = v53;
          long long v54 = v111;
          v51[136]  = v110;
          v51[137]  = v54;
          long long v55 = v113;
          v51[138]  = v112;
          v51[139]  = v55;
          long long v56 = v107;
          v51[132]  = v106;
          v51[133]  = v56;
          long long v57 = v109;
          v51[134]  = v108;
          v51[135]  = v57;
          long long v58 = v103;
          v51[128]  = __str;
          v51[129]  = v58;
          long long v59 = v105;
          v51[130]  = v104;
          v51[131]  = v59;
        }
        else
        {
          io80211_os_log();
        }
        long long v60 = (char *)&AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV12(OSData *)::fDeltaBTCoexStatsv12
            + 112 * BytesNoCopy[74];
        unint64_t v61 = "2";
        if (!v60[74]) {
          unint64_t v61 = "5";
        }
        snprintf((char *)&__str, 0x100uLL, "Stats12(%sG): CrtPriCnt=%u PriCnt=%u gntSniff=%u denySniff=%u antGrant0~10ms=%u antGrant10~30ms=%u antGrant30~60ms=%u antGrant>60ms=%u APLeakiness=%u rr_cnt=%u rr_succ_cnt=%u\n", v61, *((unsigned __int16 *)v60 + 29), *((unsigned __int16 *)v60 + 30), *((unsigned __int16 *)v60 + 27), *((unsigned __int16 *)v60 + 28), *((unsigned __int16 *)v60 + 31), *((unsigned __int16 *)v60 + 32), *((unsigned __int16 *)v60 + 33), *((unsigned __int16 *)v60 + 34), *((unsigned __int16 *)v60 + 35), v60[72], v60[73]);
        uint64_t v62 = *((void *)this + 9);
        if ((*(_DWORD *)(v62 + 980) - 1) > 1)
        {
          long long v63 = (_OWORD *)(v62 + 31037);
          long long v64 = v115;
          v63[188]  = v114;
          v63[189]  = v64;
          long long v65 = v117;
          v63[190]  = v116;
          v63[191]  = v65;
          long long v66 = v111;
          v63[184]  = v110;
          v63[185]  = v66;
          long long v67 = v113;
          v63[186]  = v112;
          v63[187]  = v67;
          long long v68 = v107;
          v63[180]  = v106;
          v63[181]  = v68;
          long long v69 = v109;
          v63[182]  = v108;
          v63[183]  = v69;
          long long v70 = v103;
          v63[176]  = __str;
          v63[177]  = v70;
          long long v71 = v105;
          v63[178]  = v104;
          v63[179]  = v71;
        }
        else
        {
          io80211_os_log();
        }
        long long v72 = (char *)&AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV12(OSData *)::fDeltaBTCoexStatsv12
            + 112 * BytesNoCopy[74];
        long long v73 = "2";
        if (!v72[74]) {
          long long v73 = "5";
        }
        snprintf((char *)&__str, 0x100uLL, "Stats12(%sG): btDurAir=%llums(%llu%%) desenseMode=%d wlrssi=%d btrssi=%d profile2gActive=%d profile5gActive=%d inactiveDur=%u btPmAttemptNoackCnt=%u status2=0x%x [%llums]\n", v73, v36, 100 * v36 / 0xB2F4FC07949uLL, v72[75], v72[76], v72[77], v72[78], v72[79], *((unsigned __int16 *)v72 + 40), *((unsigned __int16 *)v72 + 41), *((_DWORD *)v72 + 21), 0xB2F4FC07949);
        uint64_t v74 = *((void *)this + 9);
        if ((*(_DWORD *)(v74 + 980) - 1) > 1)
        {
          long long v75 = (_OWORD *)(v74 + 31037);
          long long v76 = v115;
          v75[220]  = v114;
          v75[221]  = v76;
          long long v77 = v117;
          v75[222]  = v116;
          v75[223]  = v77;
          long long v78 = v111;
          v75[216]  = v110;
          v75[217]  = v78;
          long long v79 = v113;
          v75[218]  = v112;
          v75[219]  = v79;
          long long v80 = v107;
          v75[212]  = v106;
          v75[213]  = v80;
          long long v81 = v109;
          v75[214]  = v108;
          v75[215]  = v81;
          long long v82 = v103;
          v75[208]  = __str;
          v75[209]  = v82;
          long long v83 = v105;
          v75[210]  = v104;
          v75[211]  = v83;
        }
        else
        {
          io80211_os_log();
        }
        uint64_t v84 = mach_continuous_time();
        uint64_t v85 = BytesNoCopy[74];
        AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV12(OSData *)::fLastLogDeltaBTCoexStats[v85]  = v84;
        if (v85 == 1)
        {
          long long v86 = *(IO80211SkywalkInterface **)(*((void *)this + 9) + 11304);
          if (v86)
          {
            IO80211Controller::postMessage(this, v86, 0xBEu, v94, 0x1CuLL, 1);
            LODWORD(v85)  = BytesNoCopy[74];
          }
          else
          {
            LODWORD(v85)  = 1;
          }
          dword_1003A4A40  = 0;
          AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV12(OSData *)::fDeltaBTCoexStatsReport  = 0;
        }
        uint64_t v2 = 0;
        long long v87 = (_OWORD *)((char *)&AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV12(OSData *)::fDeltaBTCoexStatsv12
                       + 112 * v85);
        v87[5]  = 0u;
        v87[6]  = 0u;
        v87[3]  = 0u;
        v87[4]  = 0u;
        v87[1]  = 0u;
        v87[2]  = 0u;
        *long long v87 = 0u;
      }
      else
      {
        uint64_t v2 = 0;
      }
LABEL_55:
      if (v14)
      {
        memset_s(v14, 0x70uLL, 0, 0x70uLL);
        IOFree(v14, 0x70uLL);
      }
      return v2;
    }
    uint64_t v7 = IOMallocZeroTyped();
    if (v7)
    {
      uint64_t BytesNoCopy = (unsigned __int8 *)v7;
      long long v8 = OSData::getBytesNoCopy(a2);
      long long v10 = v8[1];
      long long v9 = v8[2];
      *(_OWORD *)uint64_t BytesNoCopy = *v8;
      *((_OWORD *)BytesNoCopy + 1)  = v10;
      *((_OWORD *)BytesNoCopy + 2)  = v9;
      long long v11 = v8[6];
      long long v13 = v8[3];
      long long v12 = v8[4];
      *((_OWORD *)BytesNoCopy + 5)  = v8[5];
      *((_OWORD *)BytesNoCopy + 6)  = v11;
      *((_OWORD *)BytesNoCopy + AppleBCMWLANCommandMonitor::free(this - 3) = v13;
      *((_OWORD *)BytesNoCopy + 4)  = v12;
      uint64_t v14 = BytesNoCopy;
      goto LABEL_8;
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v93 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v93, "[dk] %s@%d:Failed to create aligned wlc_btc_stats_v12_t data\n", "parseEventLogRecordBTCoexStatsV12", 17652);
      }
    }
    return 3758097084;
  }
  return v15;
}

uint64_t AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV9(AppleBCMWLANCore *this, OSData *a2)
{
  uint64_t v2 = 3758097084;
  unint64_t v58 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1)  = 0xAAAAAAAAAAAAAAAALL;
  long long v56 = v3;
  long long v57 = v3;
  BYTE4(v56)  = 0;
  LODWORD(v56)  = 19;
  if (!a2) {
    return 3758097090;
  }
  uint64_t BytesNoCopy = (char *)OSData::getBytesNoCopy(a2);
  if (OSData::getLength(a2) <= 0x4B)
  {
    uint64_t v13 = 3758097086;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v46 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int Length = OSData::getLength(a2);
        CCLogStream::logAlert(v46, "[dk] %s@%d:Invalid payload size[%u], expected >= %zu\n", "parseEventLogRecordBTCoexStatsV9", 18127, Length, 0x4CuLL);
        return 3758097086;
      }
    }
  }
  else
  {
    if ((((_BYTE)BytesNoCopy + 8) & 3) == 0)
    {
      long long v12 = 0;
      goto LABEL_8;
    }
    uint64_t v7 = IOMallocZeroTyped();
    if (v7)
    {
      uint64_t BytesNoCopy = (char *)v7;
      long long v8 = OSData::getBytesNoCopy(a2);
      *(_OWORD *)uint64_t BytesNoCopy = *v8;
      long long v10 = v8[2];
      long long v9 = v8[3];
      long long v11 = v8[1];
      *(_OWORD *)(BytesNoCopy + 60)  = *(_OWORD *)((char *)v8 + 60);
      *((_OWORD *)BytesNoCopy + 2)  = v10;
      *((_OWORD *)BytesNoCopy + AppleBCMWLANCommandMonitor::free(this - 3) = v9;
      *((_OWORD *)BytesNoCopy + 1)  = v11;
      long long v12 = BytesNoCopy;
LABEL_8:
      unint64_t v62 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v14 + 1)  = 0xAAAAAAAAAAAAAAAALL;
      long long v61 = v14;
      *(_OWORD *)&v59[16]  = v14;
      long long v60 = v14;
      *(_OWORD *)long long v59 = v14;
      if (*((_DWORD *)BytesNoCopy + 1))
      {
        long long v60 = 0uLL;
        uint64_t v15 = *((void *)BytesNoCopy + 2);
        *(void *)&long long v16 = v15;
        *((void *)&v16 + 1)  = HIDWORD(v15);
        *(_OWORD *)&v59[8]  = v16;
        *(void *)&v59[24]  = *((unsigned int *)BytesNoCopy + 6);
        *(void *)&long long v61 = *((unsigned __int16 *)BytesNoCopy + 14);
        *((void *)&v61 + 1)  = *((unsigned __int16 *)BytesNoCopy + 15);
        unint64_t v62 = *((unsigned __int16 *)BytesNoCopy + 16);
        *(void *)long long v59 = *((void *)BytesNoCopy + 1);
        if (*(_DWORD *)v59 >= 8u) {
          *(_DWORD *)long long v59 = v59[0] & 7;
        }
        if (IO80211Controller::setBTCoexstat())
        {
          dword_1003A4A60  = *((_DWORD *)BytesNoCopy + 2);
          int32x4_t v17 = *(int32x4_t *)(BytesNoCopy + 12);
          unsigned __int32 v18 = vorrq_s8(*(int8x16_t *)algn_1003A4A64, (int8x16_t)v17).u32[0];
          int32x4_t v19 = vaddq_s32(*(int32x4_t *)algn_1003A4A64, v17);
          v19.i32[0]  = v18;
          *(int32x4_t *)algn_1003A4A64  = v19;
          *(int16x8_t *)&word_1003A4A74  = vaddq_s16(*(int16x8_t *)&word_1003A4A74, *(int16x8_t *)(BytesNoCopy + 28));
          *(long long *)((char *)&xmmword_1003A4A78 + 12)  = (__int128)vaddq_s16(*(int16x8_t *)((char *)&xmmword_1003A4A78 + 12), *(int16x8_t *)(BytesNoCopy + 44));
          *(int16x4_t *)&word_1003A4A94  = vadd_s16(*(int16x4_t *)&word_1003A4A94, *(int16x4_t *)(BytesNoCopy + 60));
          word_1003A4A9C += *((_WORD *)BytesNoCopy + 34);
          __int16 v20 = word_1003A4A9E;
          if ((unsigned __int16)word_1003A4A9E <= *((unsigned __int16 *)BytesNoCopy + 35)) {
            __int16 v20 = *((_WORD *)BytesNoCopy + 35);
          }
          word_1003A4A9E  = v20;
          byte_1003A4AA0 += BytesNoCopy[72];
          byte_1003A4AA1 += BytesNoCopy[73];
          unsigned int v21 = *((_DWORD *)BytesNoCopy + 2);
          AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV9(OSData *)::fDeltaBTCoexStatsReport  = (uint64_t)vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v21), (uint32x2_t)-2), (int8x8_t)0x100000001), (int32x2_t)AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV9(OSData *)::fDeltaBTCoexStatsReport);
          dword_1003A4AB0 += (v21 >> 9) & 1;
          unint64_t v55 = 0xAAAAAAAAAAAAAAAALL;
          mach_continuous_time();
          absolutetime_to_nanoseconds();
          unint64_t v54 = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&long long v22 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v22 + 1)  = 0xAAAAAAAAAAAAAAAALL;
          long long v77 = v22;
          long long v78 = v22;
          long long v75 = v22;
          long long v76 = v22;
          long long v73 = v22;
          long long v74 = v22;
          long long v71 = v22;
          long long v72 = v22;
          long long v69 = v22;
          long long v70 = v22;
          long long v67 = v22;
          long long v68 = v22;
          long long v65 = v22;
          long long v66 = v22;
          __str  = v22;
          long long v64 = v22;
          uint64_t v50 = AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV9(OSData *)::fDeltaBTCoexStatsReport;
          int v53 = dword_1003A4AB0;
          unint64_t v23 = dword_1003A4A70 / 0x3E8uLL;
          *(_WORD *)(*((void *)this + 9) + 30826)  = 100 * (unint64_t)v23 / 0xB2F4FC07949;
          int v51 = 1338014025;
          int v52 = v23;
          snprintf((char *)&__str, 0x100uLL, "Stats9: btDur=%llums(%llu%%) status=0x%x reqTypeMap=0x%x req=%u gnt=%u abort=%u rx1ovfl=%u latency=%u pmAttempt=%u sucPM=%u sucCTS2S=%u wlanTXPreempt=%u wlanRXPreempt=%u apTXafterPM=%u gntAudio=%u denyAudio=%u gntA2DP=%u denyA2DP=%u\n", v23, 100 * (unint64_t)v23 / 0xB2F4FC07949, dword_1003A4A60, *(_DWORD *)algn_1003A4A64, dword_1003A4A68, unk_1003A4A6C, (unsigned __int16)word_1003A4A74, (unsigned __int16)word_1003A4A76, (unsigned __int16)xmmword_1003A4A78, WORD1(xmmword_1003A4A78), WORD2(xmmword_1003A4A78), WORD3(xmmword_1003A4A78), WORD4(xmmword_1003A4A78), WORD5(xmmword_1003A4A78),
            WORD6(xmmword_1003A4A78),
            HIWORD(xmmword_1003A4A78),
            (unsigned __int16)word_1003A4A88,
            (unsigned __int16)word_1003A4A8A,
            (unsigned __int16)word_1003A4A8C);
          uint64_t v24 = *((void *)this + 9);
          if ((*(_DWORD *)(v24 + 980) - 1) > 1)
          {
            int32x4_t v25 = (_OWORD *)(v24 + 31037);
            long long v26 = v76;
            v25[124]  = v75;
            v25[125]  = v26;
            long long v27 = v78;
            v25[126]  = v77;
            v25[127]  = v27;
            long long v28 = v72;
            v25[120]  = v71;
            v25[121]  = v28;
            long long v29 = v74;
            v25[122]  = v73;
            v25[123]  = v29;
            long long v30 = v68;
            v25[116]  = v67;
            v25[117]  = v30;
            long long v31 = v70;
            v25[118]  = v69;
            v25[119]  = v31;
            long long v32 = v64;
            v25[112]  = __str;
            v25[113]  = v32;
            long long v33 = v66;
            v25[114]  = v65;
            v25[115]  = v33;
          }
          else
          {
            io80211_os_log();
          }
          snprintf((char *)&__str, 0x100uLL, "Stats9: CrtPriCnt=%u PriCnt=%u gntSniff=%u denySniff=%u antGrant0~10ms=%u antGrant10~30ms=%u antGrant30~60ms=%u antGrant>60ms=%u APLeakiness=%u rr_cnt=%u rr_succ_cnt=%u [%llums]\n", (unsigned __int16)word_1003A4A92, (unsigned __int16)word_1003A4A94, (unsigned __int16)word_1003A4A8E, (unsigned __int16)word_1003A4A90, (unsigned __int16)word_1003A4A96, (unsigned __int16)word_1003A4A98, (unsigned __int16)word_1003A4A9A, (unsigned __int16)word_1003A4A9C, (unsigned __int16)word_1003A4A9E, byte_1003A4AA0, byte_1003A4AA1, 0xB2F4FC07949);
          uint64_t v34 = *((void *)this + 9);
          if ((*(_DWORD *)(v34 + 980) - 1) > 1)
          {
            unint64_t v35 = (_OWORD *)(v34 + 31037);
            long long v36 = v76;
            v35[140]  = v75;
            v35[141]  = v36;
            long long v37 = v78;
            v35[142]  = v77;
            v35[143]  = v37;
            long long v38 = v72;
            v35[136]  = v71;
            v35[137]  = v38;
            long long v39 = v74;
            v35[138]  = v73;
            v35[139]  = v39;
            long long v40 = v68;
            v35[132]  = v67;
            v35[133]  = v40;
            long long v41 = v70;
            v35[134]  = v69;
            v35[135]  = v41;
            long long v42 = v64;
            v35[128]  = __str;
            v35[129]  = v42;
            long long v43 = v66;
            v35[130]  = v65;
            v35[131]  = v43;
          }
          else
          {
            io80211_os_log();
          }
          AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV9(OSData *)::fLastLogDeltaBTCoexStats  = mach_continuous_time();
          long long v44 = *(IO80211SkywalkInterface **)(*((void *)this + 9) + 11304);
          if (v44) {
            IO80211Controller::postMessage(this, v44, 0xBEu, &v50, 0x1CuLL, 1);
          }
          uint64_t v2 = 0;
          *(_OWORD *)&word_1003A4A94  = 0u;
          xmmword_1003A4A78  = 0u;
          *(_OWORD *)&word_1003A4A88  = 0u;
          AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV9(OSData *)::fDeltaBTCoexStatsV9  = 0u;
          *(_OWORD *)&dword_1003A4A68  = 0u;
          AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV9(OSData *)::fDeltaBTCoexStatsReport  = 0;
          dword_1003A4AB0  = 0;
        }
        else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            long long v48 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v48, "[dk] %s@%d:Failed to setBTCoexstat\n", "parseEventLogRecordBTCoexStatsV9", 18173);
          }
        }
      }
      else
      {
        uint64_t v2 = 0;
      }
      if (v12)
      {
        memset_s(v12, 0x4CuLL, 0, 0x4CuLL);
        IOFree(v12, 0x4CuLL);
      }
      return v2;
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v49 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v49, "[dk] %s@%d:Failed to create aligned wlc_btc_stats_v9_t data\n", "parseEventLogRecordBTCoexStatsV9", 18133);
      }
    }
    return 3758097084;
  }
  return v13;
}

uint64_t AppleBCMWLANCore::parseEventLogScan(AppleBCMWLANCore *this, OSData *a2)
{
  *(void *)buf  = 0;
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  uint64_t BytesNoCopy = (unsigned __int8 *)OSData::getBytesNoCopy(a2);
  int v5 = *BytesNoCopy;
  if (v5 == 1) {
    goto LABEL_281;
  }
  uint64_t v6 = BytesNoCopy;
  if (v5 == 2)
  {
    int32x4_t v17 = OSData::getBytesNoCopy(a2);
    if (OSData::getLength(a2) != 64)
    {
      uint64_t v15 = 3758097084;
      if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
        return v15;
      }
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (!CCLogStream::shouldLog()) {
        return v15;
      }
LABEL_51:
      long long v38 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      OSData::getLength(a2);
      CCLogStream::logAlert(v38, "[dk] %s@%d:ScanSummary size mismatch, have %d, expected %ld\n");
      return v15;
    }
    unsigned int v18 = *((unsigned __int16 *)v17 + 3);
    if (v18)
    {
      if ((v18 & 4) != 0)
      {
        unsigned int v48 = 0;
      }
      else if ((v18 & 8) != 0)
      {
        unsigned int v48 = 1;
      }
      else
      {
        unsigned int v48 = (v18 >> 4) & 2;
      }
      uint64_t v151 = *((void *)this + 9);
      if (*(_DWORD *)(v151 + 17784))
      {
        *(void *)(v151 + 17784)  = 0;
        *(_OWORD *)(v151 + 17752)  = 0u;
        *(_OWORD *)(v151 + 17768)  = 0u;
        *(_OWORD *)(v151 + 17736)  = 0u;
      }
      v153  = v17[5];
      unsigned int v152 = v17[6];
      v154  = *((void *)this + 9) + 17736;
      v155  = v152 - v153;
      if (v152 < v153 || v155 >= 0x97) {
        ++*(unsigned char *)(v154 + 16 * v48 + 4);
      }
      else {
        *(_DWORD *)(v154 + 16 * v48) += v155;
      }
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          v156  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logInfo(v156, "[dk] %s@%d:SCAN_INFO: ScanDuration=%dms CoreIndex=%d\n");
        }
      }
      goto LABEL_281;
    }
    unsigned int v20 = v17[5];
    unsigned int v19 = v17[6];
    BOOL v12 = v19 >= v20;
    unsigned int v21 = v19 - v20;
    if (!v12)
    {
      uint64_t v15 = 3758097131;
      if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
        return v15;
      }
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (!CCLogStream::shouldLog()) {
        return v15;
      }
      goto LABEL_293;
    }
    int v22 = (v18 >> 6) & 7;
    __int16 v23 = *((_WORD *)v6 + 3);
    *(_DWORD *)(*((void *)this + 9) + 17784)  = v21;
    uint64_t v24 = *((void *)this + 9);
    unsigned int v25 = *(_DWORD *)(v24 + 17784);
    if (v25)
    {
      for (uint64_t i = 0; i != 48; i += 16)
        *(void *)(*((void *)this + 9) + i + 17744)  = (100
                                                                      * *(_DWORD *)(*((void *)this + 9) + 17736 + i))
                                                       / *(_DWORD *)(*((void *)this + 9) + 17784);
      uint64_t v24 = *((void *)this + 9);
      unsigned int v25 = *(_DWORD *)(v24 + 17784);
    }
    v241  = -1431655766;
    v242  = v25;
    v240  = (v18 >> 6) & 7;
    IO80211Controller::postMessage(this, *(IO80211SkywalkInterface **)(v24 + 11304), 0xADu, &v240, 0x10uLL, 1);
    if (IO80211Controller::isLQMOSLOGEnabled(this)) {
      io80211_os_log();
    }
    if (IO80211Controller::isLQMIOLOGEnabled(this))
    {
      uint64_t v27 = *((void *)this + 9);
      IOLog("LQM-WIFI: Scan[%ums] - 5G<%ums %llu%%> 2.4G<%ums %llu%%> scanCore<%ums %llu%%> client=%d\n", *(_DWORD *)(v27 + 17784), *(_DWORD *)(v27 + 17736), *(void *)(v27 + 17744), *(_DWORD *)(v27 + 17752), *(void *)(v27 + 17760), *(_DWORD *)(v27 + 17768), *(void *)(v27 + 17776), (v18 >> 6) & 7);
    }
    if (IO80211Controller::isLQMCCLOGEnabled(this))
    {
      uint64_t v28 = *((void *)this + 9);
      IO80211Controller::logLQMToCC(this, "LQM-WIFI: Scan[%ums] - 5G<%ums %llu%%> 2.4G<%ums %llu%%> scanCore<%ums %llu%%> client=%d\n", *(_DWORD *)(v28 + 17784), *(_DWORD *)(v28 + 17736), *(void *)(v28 + 17744), *(_DWORD *)(v28 + 17752), *(void *)(v28 + 17760), *(_DWORD *)(v28 + 17768), *(void *)(v28 + 17776), (v18 >> 6) & 7);
    }
    int v29 = (v18 >> 9) & 7;
    uint64_t v30 = *((void *)this + 9);
    if (*(unsigned char *)(v30 + 17740) || *(unsigned char *)(v30 + 17756) || *(unsigned char *)(v30 + 17772))
    {
      if (IO80211Controller::isLQMOSLOGEnabled(this)) {
        io80211_os_log();
      }
      if (IO80211Controller::isLQMIOLOGEnabled(this)) {
        IOLog("LQM-WIFI: Scan - invaldCnt<%u %u %u>\n", *(unsigned __int8 *)(*((void *)this + 9) + 17740), *(unsigned __int8 *)(*((void *)this + 9) + 17756), *(unsigned __int8 *)(*((void *)this + 9) + 17772));
      }
      isLQMCCLOGEnabled  = IO80211Controller::isLQMCCLOGEnabled(this);
      uint64_t v30 = *((void *)this + 9);
      if (isLQMCCLOGEnabled)
      {
        IO80211Controller::logLQMToCC(this, "LQM-WIFI: Scan - invaldCnt<%u %u %u>\n", *(unsigned __int8 *)(v30 + 17740), *(unsigned __int8 *)(v30 + 17756), *(unsigned __int8 *)(v30 + 17772));
        uint64_t v30 = *((void *)this + 9);
      }
    }
    unsigned int v32 = v23 & 0x1000;
    *(void *)(v30 + 17784)  = 0;
    *(_OWORD *)(v30 + 17752)  = 0u;
    *(_OWORD *)(v30 + 17768)  = 0u;
    *(_OWORD *)(v30 + 17736)  = 0u;
    int v34 = v17[5];
    int v33 = v17[6];
    if (!AppleBCMWLANCore::featureFlagIsBitSet(this, 76)) {
      goto LABEL_243;
    }
    unint64_t v35 = *(AppleBCMWLANScanAdapter **)(*((void *)this + 9) + 5432);
    if (v35)
    {
      if (AppleBCMWLANScanAdapter::getSCTxBlankStatus(v35) == 4)
      {
        if ((v23 & 0x1000) == 0)
        {
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              long long v36 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logInfo(v36, "[dk] %s@%d:SCAN_SUMMARY (SC_TX_BLANK): Tx blanking over retry thresh. Retry will happen if configured \n");
            }
          }
        }
      }
      else
      {
        SCTxBlankunsigned int Status = AppleBCMWLANScanAdapter::getSCTxBlankStatus(*(AppleBCMWLANScanAdapter **)(*((void *)this + 9)
                                                                                                  + 5432));
        v160  = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (SCTxBlankStatus == 2)
        {
          if (v160)
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              v161  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logInfo(v161, "[dk] %s@%d:SCAN_SUMMARY (SC_TX_BLANK): Tx blanking less than retry thresh. But retry might still happen if Infra channel was scanned \n");
            }
          }
        }
        else if (v160)
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            int v234 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logInfo(v234, "[dk] %s@%d:SCAN_SUMMARY (SC_TX_BLANK): NO blanking. But retry might still happen if Infra channel was scanned \n");
          }
        }
      }
    }
    if (v29 == 2)
    {
      v162  = *(AppleBCMWLANIOReporting **)(*((void *)this + 9) + 5520);
      if (AppleBCMWLANCore::featureFlagIsBitSet(this, 76)) {
        v163  = 3;
      }
      else {
        v163  = 2;
      }
      v164  = AppleBCMWLANIOReportingPerSlice::reportScanModeStatsSinceLinkUp(v162, 2, 2, v163);
      if (v164)
      {
        uint64_t v15 = v164;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            unsigned int v229 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v229, "[dk] %s@%d:Error parsing reportScanModeStatsSinceLinkUp for mode %d\n");
          }
        }
        return v15;
      }
      if (AppleBCMWLANCore::featureFlagIsBitSet(this, 76)) {
        v165  = 3;
      }
      else {
        v165  = 2;
      }
      uint64_t v166 = AppleBCMWLANCore::reportSlicesScanModeStats(this, 2, 2u, v165);
      if (v166)
      {
        uint64_t v15 = v166;
        if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
          return v15;
        }
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (!CCLogStream::shouldLog()) {
          return v15;
        }
        goto LABEL_317;
      }
LABEL_243:
      v183  = (v33 - v34);
      if (v22 == 1)
      {
        v185  = v29;
        v186  = v32;
        *(void *)buf  = 0;
        if (((*((unsigned __int8 *)v17 + 9) + (unsigned __int16)*((unsigned __int8 *)v17 + 8)) & 0x100) != 0) {
          v187  = 0;
        }
        else {
          v187  = *((unsigned char *)v17 + 9) + *((unsigned char *)v17 + 8);
        }
        mach_continuous_time();
        absolutetime_to_nanoseconds();
        v188  = *(void *)buf;
        uint64_t v189 = *((void *)this + 9);
        unint64_t v190 = *(void *)(v189 + 17928);
        v191  = *(void *)buf - v190;
        if (*(void *)buf >= v190)
        {
          v191 /= 0xDF8475800uLL;
          unint64_t v192 = (*(void *)buf - *(void *)(v189 + 17960)) / 0xDF8475800uLL;
        }
        else
        {
          unint64_t v192 = 0;
          *(void *)(v189 + 17960)  = *(void *)buf;
          *(void *)(*((void *)this + 9) + 17928)  = v188;
          *(_DWORD *)(*((void *)this + 9) + 17944)  = 0;
          *(_DWORD *)(*((void *)this + 9) + 17948)  = 0;
          *(_DWORD *)(*((void *)this + 9) + 17952)  = 0;
          *(void *)(*((void *)this + 9) + 17936)  = 0;
          *(_DWORD *)(*((void *)this + 9) + 17976)  = 0;
          *(_DWORD *)(*((void *)this + 9) + 17980)  = 0;
          *(_DWORD *)(*((void *)this + 9) + 17984)  = 0;
          *(void *)(*((void *)this + 9) + 17968)  = 0;
          uint64_t v189 = *((void *)this + 9);
        }
        uint64_t v193 = *(void *)(v189 + 17936);
        BOOL v12 = __CFADD__(v193, v183);
        v194  = v193 + v183;
        if (!v12)
        {
          *(void *)(v189 + 17936)  = v194;
          *(void *)(*((void *)this + 9) + 17968) += v183;
          *(void *)(*((void *)this + 9) + 14048)  = v183;
          uint64_t v189 = *((void *)this + 9);
        }
        v195  = v187;
        if (v187 >= 0xEu)
        {
          ++*(_DWORD *)(v189 + 17948);
          ++*(_DWORD *)(*((void *)this + 9) + 17980);
          uint64_t v189 = *((void *)this + 9);
        }
        unsigned int v32 = v186;
        *(_WORD *)(v189 + 14010)  = v195;
        uint64_t v196 = *((void *)this + 9) + 600 * *(unsigned int *)(*((void *)this + 9) + 14076);
        *(_WORD *)(v196 + 12210) += v195;
        int v29 = v185;
        uint64_t v197 = *((void *)this + 9) + 600 * *(unsigned int *)(*((void *)this + 9) + 14076);
        if (v195 >= 0xE)
        {
          ++*(unsigned char *)(v197 + 12681);
          uint64_t v198 = *((void *)this + 9);
          v199  = *(unsigned char *)(v198 + 600 * *(unsigned int *)(v198 + 14076) + 12681);
          uint64_t v200 = 14057;
        }
        else
        {
          ++*(unsigned char *)(v197 + 12683);
          uint64_t v198 = *((void *)this + 9);
          v199  = *(unsigned char *)(v198 + 600 * *(unsigned int *)(v198 + 14076) + 12683);
          uint64_t v200 = 14059;
        }
        *(unsigned char *)(v198 + v200)  = v199;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            v230  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            v231  = *((void *)this + 9);
            CCLogStream::logInfo(v230, "[dk] %s@%d:Roam Scan Summary: Day Roam Scan Summary: In last %llu min: numberOfRoamAttempt =%d ScanDuration=%llu  FullBandScancount=%d FailRoamCount=%d Week Roam Scan Summary: in last %llu min:numberOfRoamAttempt =%d ScanDuration=%llu FullBandScancount=%d FailRoamCount=%d\n", "parseEventLogScan", 18616, v191, *(_DWORD *)(v231 + 17952), *(void *)(v231 + 17936), *(_DWORD *)(v231 + 17948), *(_DWORD *)(v231 + 17944), v192, *(_DWORD *)(v231 + 17984), *(void *)(v231 + 17968), *(_DWORD *)(v231 + 17980), *(_DWORD *)(v231 + 17976));
          }
        }
        if (v191 >= 0x5A0)
        {
          *(void *)(*((void *)this + 9) + 17928)  = *(void *)buf;
          *(_DWORD *)(*((void *)this + 9) + 17944)  = 0;
          *(_DWORD *)(*((void *)this + 9) + 17948)  = 0;
          *(_DWORD *)(*((void *)this + 9) + 17984)  = 0;
          *(void *)(*((void *)this + 9) + 17936)  = 0;
        }
        if (v192 >> 5 >= 0x13B)
        {
          *(void *)(*((void *)this + 9) + 17960)  = *(void *)buf;
          *(_DWORD *)(*((void *)this + 9) + 17976)  = 0;
          *(_DWORD *)(*((void *)this + 9) + 17980)  = 0;
          *(_DWORD *)(*((void *)this + 9) + 17984)  = 0;
          *(void *)(*((void *)this + 9) + 17968)  = 0;
        }
      }
      else if (v22 == 2)
      {
        *(void *)buf  = 0;
        mach_continuous_time();
        absolutetime_to_nanoseconds();
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            v184  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logInfo(v184, "[dk] %s@%d:FW Scan: Scan startTime=%d nowTime=%llu \n", "parseEventLogScan", 18632, v17[5], *(void *)buf / 0xF4240uLL);
          }
        }
      }
      if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
        || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
            (CCLogStream::shouldLogConsole() & 1) == 0))
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          int v201 = *((unsigned __int8 *)v17 + 9);
          v202  = *((unsigned __int8 *)v17 + 8);
          v203  = *((unsigned __int8 *)v17 + 10);
          int v204 = *((unsigned __int8 *)v17 + 11);
          v205  = *((unsigned __int8 *)v17 + 12);
          *(_DWORD *)buf  = 67111938;
          *(_DWORD *)&uint8_t buf[4] = 73;
          *(_WORD *)v244  = 2080;
          *(void *)&v244[2]  = "parseEventLogScan";
          *(_WORD *)&v244[10]  = 1024;
          v245  = 18634;
          v246  = 1024;
          *(_DWORD *)v247  = v183;
          *(_WORD *)&v247[4]  = 1024;
          *(_DWORD *)&v247[6]  = v201;
          *(_WORD *)v248  = 1024;
          *(_DWORD *)&v248[2]  = v202;
          *(_WORD *)&v248[6]  = 1024;
          *(_DWORD *)&v248[8]  = v203;
          *(_WORD *)&v248[12]  = 1024;
          *(_DWORD *)&v248[14]  = v204;
          *(_WORD *)&v248[18]  = 1024;
          *(_DWORD *)&v248[20]  = v205;
          *(_WORD *)&v248[24]  = 1024;
          *(_DWORD *)v249  = v29;
          *(_WORD *)&v249[4]  = 1024;
          *(_DWORD *)v250  = v22;
          *(_WORD *)&v250[4]  = 1024;
          *(_DWORD *)&v250[6]  = v32 >> 12;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: SCAN_SUMMARY: ScanDuration=%dms NumChanMain=%d NumChanAux=%d NumChanLP=%d NumActive=%d NumPassive=%d ScanMode=%d ScanClient=%d isRescheduled=%d\n", buf, 0x4Eu);
        }
      }
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v217 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logInfo(v217, "[dk] %s@%d:SCAN_SUMMARY: ScanDuration=%dms NumChanMain=%d NumChanAux=%d NumChanLP=%d NumActive=%d NumPassive=%d ScanMode=%d ScanClient=%d isRescheduled=%d\n", "parseEventLogScan", 18634, v183, *((unsigned __int8 *)v17 + 9), *((unsigned __int8 *)v17 + 8), *((unsigned __int8 *)v17 + 10), *((unsigned __int8 *)v17 + 11), *((unsigned __int8 *)v17 + 12), v29, v22, v32 >> 12);
        }
      }
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          v218  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logInfo(v218, "[dk] %s@%d:SCAN_SUMMARY: ScanDuration=%dms NumChanMain=%d NumChanAux=%d NumChanLP=%d NumActive=%d NumPassive=%d ScanMode=%d ScanClient=%d isRescheduled=%d\n", "parseEventLogScan", 18635, v183, *((unsigned __int8 *)v17 + 9), *((unsigned __int8 *)v17 + 8), *((unsigned __int8 *)v17 + 10), *((unsigned __int8 *)v17 + 11), *((unsigned __int8 *)v17 + 12), v29, v22, v32 >> 12);
        }
      }
      *(_DWORD *)buf  = 0;
      *(_DWORD *)&uint8_t buf[4] = v183;
      *(_DWORD *)v244  = *((unsigned __int8 *)v17 + 9);
      *(_DWORD *)&v244[4]  = *((unsigned __int8 *)v17 + 8);
      *(_DWORD *)&v244[8]  = *((unsigned __int8 *)v17 + 10);
      v245  = v22;
      IO80211Controller::postMessage(this, *(IO80211SkywalkInterface **)(*((void *)this + 9) + 11304), 0xBBu, buf, 0x18uLL, 1);
      if (v22 != 3) {
        goto LABEL_281;
      }
LABEL_280:
      ++*(_DWORD *)(*((void *)this + 9) + 18928);
LABEL_281:
      v206  = (void *)*((void *)this + 9);
      if (v206[689])
      {
        v206[2363]  = -v206[2370];
        v207  = *((void *)this + 9);
        v208  = *(AppleBCMWLANBssManager **)(v207 + 5512);
        v239  = *(void *)(v207 + 18952);
        v209  = *(_OWORD *)(v207 + 18920);
        v238[0]  = *(_OWORD *)(v207 + 18904);
        v238[1]  = v209;
        v238[2]  = *(_OWORD *)(v207 + 18936);
        v210  = *(_OWORD *)(v207 + 19000);
        v237[0]  = *(_OWORD *)(v207 + 18984);
        v237[1]  = v210;
        v211  = *(_OWORD *)(v207 + 35776);
        v212  = *(_OWORD *)(v207 + 35792);
        v236  = *(void *)(v207 + 35808);
        v235[0]  = v211;
        v235[1]  = v212;
        AppleBCMWLANIOReportingCore::updateScanRoamStats(v208, (uint64_t)v238, (unsigned int *)v237, (unsigned int *)v235);
      }
      return 0;
    }
    if (*((unsigned char *)v17 + 9))
    {
      uint64_t v167 = *(AppleBCMWLANIOReporting **)(*((void *)this + 9) + 5520);
      if (AppleBCMWLANCore::featureFlagIsBitSet(this, 76)) {
        v168  = 3;
      }
      else {
        v168  = 2;
      }
      v169  = AppleBCMWLANIOReportingPerSlice::reportScanModeStatsSinceLinkUp(v167, 0, v29, v168);
      if (v169)
      {
        uint64_t v15 = v169;
        if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
          return v15;
        }
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (!CCLogStream::shouldLog()) {
          return v15;
        }
        goto LABEL_314;
      }
      if (AppleBCMWLANCore::featureFlagIsBitSet(this, 76)) {
        v170  = 3;
      }
      else {
        v170  = 2;
      }
      v171  = AppleBCMWLANCore::reportSlicesScanModeStats(this, 0, v29, v170);
      if (v171)
      {
        uint64_t v15 = v171;
        if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
          return v15;
        }
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (!CCLogStream::shouldLog()) {
          return v15;
        }
        goto LABEL_317;
      }
    }
    if (*((unsigned char *)v17 + 8))
    {
      uint64_t v172 = *(AppleBCMWLANIOReporting **)(*((void *)this + 9) + 5520);
      if (AppleBCMWLANCore::featureFlagIsBitSet(this, 76)) {
        v173  = 3;
      }
      else {
        v173  = 2;
      }
      uint64_t v174 = AppleBCMWLANIOReportingPerSlice::reportScanModeStatsSinceLinkUp(v172, 1, v29, v173);
      if (v174)
      {
        uint64_t v15 = v174;
        if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
          return v15;
        }
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (!CCLogStream::shouldLog()) {
          return v15;
        }
        goto LABEL_314;
      }
      if (AppleBCMWLANCore::featureFlagIsBitSet(this, 76)) {
        v175  = 3;
      }
      else {
        v175  = 2;
      }
      uint64_t v176 = AppleBCMWLANCore::reportSlicesScanModeStats(this, 1, v29, v175);
      if (v176)
      {
        uint64_t v15 = v176;
        if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
          return v15;
        }
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (!CCLogStream::shouldLog()) {
          return v15;
        }
        goto LABEL_317;
      }
    }
    if (!*((unsigned char *)v17 + 10)) {
      goto LABEL_240;
    }
    uint64_t v177 = *(AppleBCMWLANIOReporting **)(*((void *)this + 9) + 5520);
    if (AppleBCMWLANCore::featureFlagIsBitSet(this, 76)) {
      v178  = 3;
    }
    else {
      v178  = 2;
    }
    uint64_t v179 = AppleBCMWLANIOReportingPerSlice::reportScanModeStatsSinceLinkUp(v177, 2, v29, v178);
    if (!v179)
    {
      if (AppleBCMWLANCore::featureFlagIsBitSet(this, 76)) {
        v180  = 3;
      }
      else {
        v180  = 2;
      }
      v181  = AppleBCMWLANCore::reportSlicesScanModeStats(this, 2, v29, v180);
      if (!v181)
      {
LABEL_240:
        if (v32)
        {
          v182  = *(void *)(*((void *)this + 9) + 5432);
          if (v182) {
            AppleBCMWLANScanAdapter::getSCChanQual(v182, 255);
          }
        }
        goto LABEL_243;
      }
      uint64_t v15 = v181;
      if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
        return v15;
      }
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (!CCLogStream::shouldLog()) {
        return v15;
      }
LABEL_317:
      v233  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v233, "[dk] %s@%d:Error parsing reportSlicesScanModeStats for mode %d\n");
      return v15;
    }
    uint64_t v15 = v179;
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
      return v15;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (!CCLogStream::shouldLog()) {
      return v15;
    }
LABEL_314:
    v232  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    CCLogStream::logAlert(v232, "[dk] %s@%d:Error parsing reportScanModeStatsSinceLinkUp for slice %d\n");
    return v15;
  }
  if (v5 != 3)
  {
    uint64_t v15 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v37 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v37, "[dk] %s@%d:Scan Summary version mismatch, found %d\n");
      }
    }
    return v15;
  }
  uint64_t v7 = OSData::getBytesNoCopy(a2);
  if (OSData::getLength(a2) != 40)
  {
    uint64_t v15 = 3758097084;
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
      return v15;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (!CCLogStream::shouldLog()) {
      return v15;
    }
    goto LABEL_51;
  }
  unsigned int v8 = *((unsigned __int16 *)v7 + 3);
  if ((v8 & 1) == 0)
  {
    unsigned int v9 = (v8 >> 6) & 7;
    unsigned int v11 = v7[2];
    unsigned int v10 = v7[3];
    BOOL v12 = v10 >= v11;
    unsigned int v13 = v10 - v11;
    int v14 = !v12;
    if (v9 >= 4)
    {
      uint64_t v15 = 3758097131;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          long long v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logEmergency(v16, "[dk] %s@%d:Invalid scan_client %d.. Aborting \n");
        }
      }
      return v15;
    }
    if (!v14)
    {
      *(_DWORD *)(*((void *)this + 9) + 35640)  = v13;
      uint64_t v49 = *((void *)this + 9);
      unsigned int v50 = *(_DWORD *)(v49 + 35640);
      if (v50)
      {
        uint64_t v51 = 35600;
        uint64_t v52 = 3;
        do
        {
          *(void *)(*((void *)this + 9) + v51)  = (100 * *(_DWORD *)(*((void *)this + 9) + v51 - 8))
                                                   / *(_DWORD *)(*((void *)this + 9) + 35640);
          v51 += 16;
          --v52;
        }
        while (v52);
        uint64_t v49 = *((void *)this + 9);
        unsigned int v50 = *(_DWORD *)(v49 + 35640);
      }
      v241  = -1431655766;
      v242  = v50;
      v240  = (v8 >> 6) & 7;
      IO80211Controller::postMessage(this, *(IO80211SkywalkInterface **)(v49 + 11304), 0xADu, &v240, 0x10uLL, 1);
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v221 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          uint64_t v222 = *((void *)this + 9);
          CCLogStream::logInfo(v221, "[dk] %s@%d:Scan[%ums] - 2.4G<%ums %llu%%> 5G<%ums %llu%%> 6G<%ums %llu%%> client=%d\n", "parseEventLogScan", 18375, *(_DWORD *)(v222 + 17784), *(_DWORD *)(v222 + 35592), *(void *)(v222 + 35600), *(_DWORD *)(v222 + 35608), *(void *)(v222 + 35616), *(_DWORD *)(v222 + 35624), *(void *)(v222 + 35632), (v8 >> 6) & 7);
        }
      }
      if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
        || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
            (CCLogStream::shouldLogConsole() & 1) == 0))
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          int v53 = (int *)*((void *)this + 9);
          int v54 = v53[4446];
          v53 += 8898;
          int v55 = *v53;
          uint64_t v56 = *((void *)v53 + 1);
          int v57 = v53[4];
          uint64_t v58 = *((void *)v53 + 3);
          int v59 = v53[8];
          uint64_t v60 = *((void *)v53 + 5);
          *(_DWORD *)buf  = 67111682;
          *(_DWORD *)&uint8_t buf[4] = 73;
          *(_WORD *)v244  = 2080;
          *(void *)&v244[2]  = "parseEventLogScan";
          *(_WORD *)&v244[10]  = 1024;
          v245  = 18380;
          v246  = 1024;
          *(_DWORD *)v247  = v54;
          *(_WORD *)&v247[4]  = 1024;
          *(_DWORD *)&v247[6]  = v55;
          *(_WORD *)v248  = 2048;
          *(void *)&v248[2]  = v56;
          *(_WORD *)&v248[10]  = 1024;
          *(_DWORD *)&v248[12]  = v57;
          *(_WORD *)&v248[16]  = 2048;
          *(void *)&v248[18]  = v58;
          *(_WORD *)v249  = 1024;
          *(_DWORD *)&v249[2]  = v59;
          *(_WORD *)v250  = 2048;
          *(void *)&v250[2]  = v60;
          *(_WORD *)&v250[10]  = 1024;
          v251  = (v8 >> 6) & 7;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: Scan[%ums] - 2.4G<%ums %llu%%> 5G<%ums %llu%%> 6G<%ums %llu%%> client=%d\n", buf, 0x54u);
        }
      }
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          int v223 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          uint64_t v224 = *((void *)this + 9);
          CCLogStream::logInfo(v223, "[dk] %s@%d:Scan[%ums] - 2.4G<%ums %llu%%> 5G<%ums %llu%%> 6G<%ums %llu%%> client=%d\n", "parseEventLogScan", 18380, *(_DWORD *)(v224 + 17784), *(_DWORD *)(v224 + 35592), *(void *)(v224 + 35600), *(_DWORD *)(v224 + 35608), *(void *)(v224 + 35616), *(_DWORD *)(v224 + 35624), *(void *)(v224 + 35632), (v8 >> 6) & 7);
        }
      }
      int v61 = (v8 >> 9) & 7;
      unint64_t v62 = (unsigned __int8 *)*((void *)this + 9);
      if (v62[35596] || v62[35612] || v62[35628])
      {
        if (IO80211Controller::isLQMOSLOGEnabled(this)) {
          io80211_os_log();
        }
        if (IO80211Controller::isLQMIOLOGEnabled(this)) {
          IOLog("LQM-WIFI: Scan - invaldCnt<%u %u %u>\n", *(unsigned __int8 *)(*((void *)this + 9) + 35596), *(unsigned __int8 *)(*((void *)this + 9) + 35612), *(unsigned __int8 *)(*((void *)this + 9) + 35628));
        }
        int v63 = IO80211Controller::isLQMCCLOGEnabled(this);
        unint64_t v62 = (unsigned __int8 *)*((void *)this + 9);
        if (v63)
        {
          IO80211Controller::logLQMToCC(this, "LQM-WIFI: Scan - invaldCnt<%u %u %u>\n", v62[35596], v62[35612], v62[35628]);
          unint64_t v62 = (unsigned __int8 *)*((void *)this + 9);
        }
      }
      long long v64 = v62 + 35592;
      *((void *)v64 + 6)  = 0;
      *((_OWORD *)v64 + 1)  = 0u;
      *((_OWORD *)v64 + 2)  = 0u;
      *(_OWORD *)long long v64 = 0u;
      unsigned int v65 = v7[2];
      LODWORD(v64)  = v7[3];
      BOOL v12 = v64 >= v65;
      unsigned int v66 = v64 - v65;
      uint64_t v67 = *((void *)this + 9);
      int v68 = *(_DWORD *)(v67 + 35648);
      char v69 = !v12;
      int v70 = v7[4];
      BOOL v12 = __CFADD__(v68, v70);
      int v71 = v68 + v70;
      char v72 = v12;
      *(_DWORD *)(v67 + 35648)  = v71;
      uint64_t v73 = *((void *)this + 9);
      int v74 = *(_DWORD *)(v73 + 35652);
      int v75 = v7[5];
      BOOL v12 = __CFADD__(v74, v75);
      *(_DWORD *)(v73 + 35652)  = v74 + v75;
      uint64_t v76 = *((void *)this + 9);
      int v77 = *(_DWORD *)(v76 + 35656);
      char v78 = v12;
      int v79 = v7[6];
      BOOL v12 = __CFADD__(v77, v79);
      int v80 = v77 + v79;
      char v81 = v12;
      *(_DWORD *)(v76 + 35656)  = v80;
      uint64_t v82 = *((void *)this + 9);
      int v83 = *(_DWORD *)(v82 + 35660);
      int v84 = *((unsigned __int8 *)v7 + 29);
      BOOL v12 = __CFADD__(v83, v84);
      *(_DWORD *)(v82 + 35660)  = v83 + v84;
      uint64_t v85 = *((void *)this + 9);
      int v86 = *(_DWORD *)(v85 + 35664);
      char v87 = v12;
      int v88 = *((unsigned __int8 *)v7 + 30);
      BOOL v12 = __CFADD__(v86, v88);
      int v89 = v86 + v88;
      char v90 = v12;
      *(_DWORD *)(v85 + 35664)  = v89;
      uint64_t v91 = *((void *)this + 9);
      int v92 = *(_DWORD *)(v91 + 35668);
      int v93 = *((unsigned __int8 *)v7 + 31);
      BOOL v12 = __CFADD__(v92, v93);
      *(_DWORD *)(v91 + 35668)  = v92 + v93;
      uint64_t v94 = *((void *)this + 9);
      int v95 = *(_DWORD *)(v94 + 35672);
      char v96 = v12;
      int v97 = *((unsigned __int8 *)v7 + 32);
      BOOL v12 = __CFADD__(v95, v97);
      int v98 = v95 + v97;
      char v99 = v12;
      *(_DWORD *)(v94 + 35672)  = v98;
      uint64_t v100 = *((void *)this + 9);
      int v101 = *(_DWORD *)(v100 + 35676);
      v102  = *((unsigned __int8 *)v7 + 33);
      BOOL v12 = __CFADD__(v101, v102);
      *(_DWORD *)(v100 + 35676)  = v101 + v102;
      uint64_t v103 = *((void *)this + 9);
      v104  = *(_DWORD *)(v103 + 35680);
      char v105 = v12;
      int v106 = *((unsigned __int8 *)v7 + 34);
      BOOL v12 = __CFADD__(v104, v106);
      int v107 = v104 + v106;
      char v108 = v12;
      *(_DWORD *)(v103 + 35680)  = v107;
      uint64_t v109 = *((void *)this + 9);
      int v110 = *(_DWORD *)(v109 + 35684);
      int v111 = *((unsigned __int8 *)v7 + 35);
      BOOL v12 = __CFADD__(v110, v111);
      *(_DWORD *)(v109 + 35684)  = v110 + v111;
      uint64_t v112 = *((void *)this + 9);
      int v113 = *(_DWORD *)(v112 + 35688);
      v114  = v12;
      v115  = *((unsigned __int8 *)v7 + 36);
      BOOL v12 = __CFADD__(v113, v115);
      int v116 = v113 + v115;
      int v117 = v12;
      *(_DWORD *)(v112 + 35688)  = v116;
      if ((v69 & 1) != 0
        || (v72 & 1) != 0
        || (v78 & 1) != 0
        || (v81 & 1) != 0
        || (v87 & 1) != 0
        || (v90 & 1) != 0
        || (v96 & 1) != 0
        || (v99 & 1) != 0
        || (v105 & 1) != 0
        || (v108 & 1) != 0
        || (v114 & 1) != 0
        || v117)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 1848))(this, v114))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            v220  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logEmergency(v220, "[dk] %s@%d: Overflow detected during scan details processing... \n", "parseEventLogScan", 18424);
          }
        }
      }
      *(_DWORD *)(*((void *)this + 9) + 35712)  = *((unsigned __int8 *)v7 + 28);
      *(_DWORD *)(*((void *)this + 9) + 35716)  = *((unsigned __int8 *)v7 + 29);
      *(_DWORD *)(*((void *)this + 9) + 35720)  = *((unsigned __int8 *)v7 + 30);
      *(_DWORD *)(*((void *)this + 9) + 35724)  = *((unsigned __int8 *)v7 + 31);
      *(_DWORD *)(*((void *)this + 9) + 35728)  = *((unsigned __int8 *)v7 + 32);
      *(_DWORD *)(*((void *)this + 9) + 35732)  = *((unsigned __int8 *)v7 + 33);
      unsigned int v118 = v8 & 0x1000;
      *(_DWORD *)(*((void *)this + 9) + 35736)  = *((unsigned __int8 *)v7 + 34);
      *(_DWORD *)(*((void *)this + 9) + 35740)  = *((unsigned __int8 *)v7 + 35);
      *(_DWORD *)(*((void *)this + 9) + 35744)  = *((unsigned __int8 *)v7 + 36);
      *(unsigned char *)(*((void *)this + 9) + 35749)  = v61;
      *(unsigned char *)(*((void *)this + 9) + 35748)  = v9;
      if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
        || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
            (CCLogStream::shouldLogConsole() & 1) == 0))
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          int v119 = v7[4];
          int v120 = v7[5];
          int v121 = v7[6];
          v122  = *((unsigned __int8 *)v7 + 29);
          int v123 = *((unsigned __int8 *)v7 + 30);
          int v124 = *((unsigned __int8 *)v7 + 31);
          v125  = *((unsigned __int8 *)v7 + 32);
          int v126 = *((unsigned __int8 *)v7 + 33);
          v127  = *((unsigned __int8 *)v7 + 34);
          v128  = *((unsigned __int8 *)v7 + 35);
          int v129 = *((unsigned __int8 *)v7 + 36);
          *(_DWORD *)buf  = 67113474;
          *(_DWORD *)&uint8_t buf[4] = 73;
          *(_WORD *)v244  = 2080;
          *(void *)&v244[2]  = "parseEventLogScan";
          *(_WORD *)&v244[10]  = 1024;
          v245  = 18439;
          v246  = 1024;
          *(_DWORD *)v247  = v66;
          *(_WORD *)&v247[4]  = 1024;
          *(_DWORD *)&v247[6]  = v119;
          *(_WORD *)v248  = 1024;
          *(_DWORD *)&v248[2]  = v120;
          *(_WORD *)&v248[6]  = 1024;
          *(_DWORD *)&v248[8]  = v121;
          *(_WORD *)&v248[12]  = 1024;
          *(_DWORD *)&v248[14]  = v122;
          *(_WORD *)&v248[18]  = 1024;
          *(_DWORD *)&v248[20]  = v123;
          *(_WORD *)&v248[24]  = 1024;
          *(_DWORD *)v249  = v124;
          *(_WORD *)&v249[4]  = 1024;
          *(_DWORD *)v250  = v125;
          *(_WORD *)&v250[4]  = 1024;
          *(_DWORD *)&v250[6]  = v126;
          *(_WORD *)&v250[10]  = 1024;
          v251  = v127;
          v252  = 1024;
          v253  = v128;
          v254  = 1024;
          v255  = v129;
          v256  = 1024;
          v257  = v61;
          v258  = 1024;
          v259  = v9;
          v260  = 1024;
          v261  = v118 >> 12;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: PER_SCAN_SUMMARY: Dur=%ums Dur2G %ums Dur5G %ums Dur6G %ums Num2G=%d Num5G=%d Num6G=%d SCNum2G=%d SCNum5G=%d SCNum6G=%d NumActive=%d NumPassive=%d Mode=%d Client=%d isRescheduled=%d\n", buf, 0x72u);
        }
      }
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v225 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logInfo(v225, "[dk] %s@%d:PER_SCAN_SUMMARY: Dur=%ums Dur2G %ums Dur5G %ums Dur6G %ums Num2G=%d Num5G=%d Num6G=%d SCNum2G=%d SCNum5G=%d SCNum6G=%d NumActive=%d NumPassive=%d Mode=%d Client=%d isRescheduled=%d\n", "parseEventLogScan", 18439, v66, v7[4], v7[5], v7[6], *((unsigned __int8 *)v7 + 29), *((unsigned __int8 *)v7 + 30), *((unsigned __int8 *)v7 + 31), *((unsigned __int8 *)v7 + 32), *((unsigned __int8 *)v7 + 33), *((unsigned __int8 *)v7 + 34), *((unsigned __int8 *)v7 + 35), *((unsigned __int8 *)v7 + 36), v61, v9,
            v118 >> 12);
        }
      }
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          v226  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logInfo(v226, "[dk] %s@%d:PER_SCAN_SUMMARY: Dur=%ums Dur2G %ums Dur5G %ums Dur6G %ums Num2G=%d Num5G=%d Num6G=%d SCNum2G=%d SCNum5G=%d SCNum6G=%d NumActive=%d NumPassive=%d  Mode=%d Client=%d isRescheduled=%d\n", "parseEventLogScan", 18441, v66, v7[4], v7[5], v7[6], *((unsigned __int8 *)v7 + 29), *((unsigned __int8 *)v7 + 30), *((unsigned __int8 *)v7 + 31), *((unsigned __int8 *)v7 + 32), *((unsigned __int8 *)v7 + 33), *((unsigned __int8 *)v7 + 34), *((unsigned __int8 *)v7 + 35), *((unsigned __int8 *)v7 + 36), v61, v9,
            v118 >> 12);
        }
      }
      if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
        || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
            (CCLogStream::shouldLogConsole() & 1) == 0))
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          int v130 = *(_DWORD *)(*((void *)this + 9) + 35648);
          v131  = *(_DWORD *)(*((void *)this + 9) + 35652);
          int v132 = *(_DWORD *)(*((void *)this + 9) + 35656);
          int v133 = *(_DWORD *)(*((void *)this + 9) + 35660);
          v134  = *(_DWORD *)(*((void *)this + 9) + 35664);
          int v135 = *(_DWORD *)(*((void *)this + 9) + 35668);
          int v136 = *(_DWORD *)(*((void *)this + 9) + 35672);
          v137  = *(_DWORD *)(*((void *)this + 9) + 35676);
          v139  = *(_DWORD *)(*((void *)this + 9) + 35680);
          int v138 = *(_DWORD *)(*((void *)this + 9) + 35684);
          v140  = *(_DWORD *)(*((void *)this + 9) + 35688);
          *(_DWORD *)buf  = 67112450;
          *(_DWORD *)&uint8_t buf[4] = 73;
          *(_WORD *)v244  = 2080;
          *(void *)&v244[2]  = "parseEventLogScan";
          *(_WORD *)&v244[10]  = 1024;
          v245  = 18447;
          v246  = 1024;
          *(_DWORD *)v247  = v130;
          *(_WORD *)&v247[4]  = 1024;
          *(_DWORD *)&v247[6]  = v131;
          *(_WORD *)v248  = 1024;
          *(_DWORD *)&v248[2]  = v132;
          *(_WORD *)&v248[6]  = 1024;
          *(_DWORD *)&v248[8]  = v133;
          *(_WORD *)&v248[12]  = 1024;
          *(_DWORD *)&v248[14]  = v134;
          *(_WORD *)&v248[18]  = 1024;
          *(_DWORD *)&v248[20]  = v135;
          *(_WORD *)&v248[24]  = 1024;
          *(_DWORD *)v249  = v136;
          *(_WORD *)&v249[4]  = 1024;
          *(_DWORD *)v250  = v137;
          *(_WORD *)&v250[4]  = 1024;
          *(_DWORD *)&v250[6]  = v139;
          *(_WORD *)&v250[10]  = 1024;
          v251  = v138;
          v252  = 1024;
          v253  = v140;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: TOTAL_SCAN_SUMMARY: Dur2G %ums Dur5G %ums Dur6G %ums Num2G=%d Num5G=%d Num6G=%d SCNum2G=%d SCNum5G=%d SCNum6G=%d NumActive=%d NumPassive=%d\n", buf, 0x5Au);
        }
      }
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v227 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logInfo(v227, "[dk] %s@%d:TOTAL_SCAN_SUMMARY: Dur2G %ums Dur5G %ums Dur6G %ums Num2G=%d Num5G=%d Num6G=%d SCNum2G=%d SCNum5G=%d SCNum6G=%d NumActive=%d NumPassive=%d\n", "parseEventLogScan", 18447, *(_DWORD *)(*((void *)this + 9) + 35648), *(_DWORD *)(*((void *)this + 9) + 35652), *(_DWORD *)(*((void *)this + 9) + 35656), *(_DWORD *)(*((void *)this + 9) + 35660), *(_DWORD *)(*((void *)this + 9) + 35664), *(_DWORD *)(*((void *)this + 9) + 35668), *(_DWORD *)(*((void *)this + 9) + 35672), *(_DWORD *)(*((void *)this + 9) + 35676), *(_DWORD *)(*((void *)this + 9) + 35680), *(_DWORD *)(*((void *)this + 9) + 35684), *(_DWORD *)(*((void *)this + 9) + 35688));
        }
      }
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          v228  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logInfo(v228, "[dk] %s@%d:TOTAL_SCAN_SUMMARY: Dur2G %ums Dur5G %ums Dur6G %ums Num2G=%d Num5G=%d Num6G=%d SCNum2G=%d SCNum5G=%d SCNum6G=%d NumActive=%d NumPassive=%d\n", "parseEventLogScan", 18453, *(_DWORD *)(*((void *)this + 9) + 35648), *(_DWORD *)(*((void *)this + 9) + 35652), *(_DWORD *)(*((void *)this + 9) + 35656), *(_DWORD *)(*((void *)this + 9) + 35660), *(_DWORD *)(*((void *)this + 9) + 35664), *(_DWORD *)(*((void *)this + 9) + 35668), *(_DWORD *)(*((void *)this + 9) + 35672), *(_DWORD *)(*((void *)this + 9) + 35676), *(_DWORD *)(*((void *)this + 9) + 35680), *(_DWORD *)(*((void *)this + 9) + 35684), *(_DWORD *)(*((void *)this + 9) + 35688));
        }
      }
      if (v9 != 3) {
        goto LABEL_281;
      }
      goto LABEL_280;
    }
    uint64_t v15 = 3758097131;
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
      return v15;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (!CCLogStream::shouldLog()) {
      return v15;
    }
LABEL_293:
    uint64_t v219 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    CCLogStream::logEmergency(v219, "[dk] %s@%d: Overflow detected: scan_end_time[%u], scan_start_time[%u]\n");
    return v15;
  }
  AppleChannelSpec  = AppleBCMWLANChanSpec::getAppleChannelSpec(*(int ***)(*((void *)this + 9) + 17576), *((unsigned __int16 *)v7 + 4));
  int v40 = AppleChannelSpec >> 14;
  if (v40 == 3) {
    uint64_t v41 = 1;
  }
  else {
    uint64_t v41 = 2 * (v40 == 1);
  }
  if ((AppleChannelSpec & 0xC000) == 0) {
    uint64_t v41 = 0;
  }
  uint64_t v42 = *((void *)this + 9);
  if (*(_DWORD *)(v42 + 35640))
  {
    v214  = v42 + 35592;
    *(void *)(v214 + 48)  = 0;
    *(_OWORD *)(v214 + 16)  = 0u;
    *(_OWORD *)(v214 + 32)  = 0u;
    *(_OWORD *)v214  = 0u;
  }
  unsigned int v44 = v7[3];
  unsigned int v43 = v7[4];
  uint64_t v45 = *((void *)this + 9) + 35592;
  BOOL v12 = v43 >= v44;
  unsigned int v46 = v43 - v44;
  BOOL v47 = v43 < v44;
  if (v12 && v46 < 0x97) {
    *(_DWORD *)(v45 + 16 * v41) += v46;
  }
  else {
    ++*(unsigned char *)(v45 + 16 * v41 + 4);
  }
  v141  = v7[4];
  unsigned int v142 = v7[5];
  int v143 = v141 - v142;
  v144  = v141 < v142 || v47;
  if (v144 != 1)
  {
    if ((*((_WORD *)v7 + 3) & 0x10) != 0)
    {
      v148  = 0;
      v149  = 0;
      v147  = "Invalid";
      v150  = "Home Channel:";
    }
    else
    {
      v145  = *((_WORD *)v6 + 3);
      v146  = "Active";
      if ((v145 & 2) == 0) {
        v146  = "Passive";
      }
      if ((v145 & 0x40) != 0) {
        v147  = "Fils";
      }
      else {
        v147  = v146;
      }
      v148  = *((unsigned __int16 *)v7 + 12);
      v149  = *((unsigned __int16 *)v7 + 13);
      v150  = "Off channel:";
    }
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
      || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
          (CCLogStream::shouldLogConsole() & 1) == 0))
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        int v157 = v6[8];
        *(_DWORD *)buf  = 67111682;
        *(_DWORD *)&uint8_t buf[4] = 73;
        *(_WORD *)v244  = 2080;
        *(void *)&v244[2]  = "parseEventLogScan";
        *(_WORD *)&v244[10]  = 1024;
        v245  = 18338;
        v246  = 2080;
        *(void *)v247  = v150;
        *(_WORD *)&v247[8]  = 2080;
        *(void *)v248  = v147;
        *(_WORD *)&v248[8]  = 1024;
        *(_DWORD *)&v248[10]  = v157;
        *(_WORD *)&v248[14]  = 1024;
        *(_DWORD *)&v248[16]  = 0;
        *(_WORD *)&v248[20]  = 1024;
        *(_DWORD *)&v248[22]  = v46;
        *(_WORD *)v249  = 1024;
        *(_DWORD *)&v249[2]  = v149;
        *(_WORD *)v250  = 1024;
        *(_DWORD *)&v250[2]  = v148;
        *(_WORD *)&v250[6]  = 1024;
        *(_DWORD *)&v250[8]  = v143;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: Type:%s Scan Type:%s Channel:%d CoreIndex:%d Scan Duration:%dms ScanResultsPerChan %d ProbeReqsSent %d Active6GScanTime  = %dms\n", buf, 0x50u);
      }
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        v216  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logInfo(v216, "[dk] %s@%d:Type:%s Scan Type:%s Channel:%d CoreIndex:%d Scan Duration:%dms ScanResultsPerChan %d ProbeReqsSent %d Active6GScanTime  = %dms\n", "parseEventLogScan", 18338, v150, v147, v6[8], 0, v46, v149, v148, v143);
      }
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v158 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logInfo(v158, "[dk] %s@%d:Type:%s Scan Type:%s Channel:%d CoreIndex:%d Scan Duration:%dms ScanResultsPerChan %d ProbeReqsSent %d Active6GScanTime  = %dms\n", "parseEventLogScan", 18341);
      }
    }
    goto LABEL_281;
  }
  uint64_t v15 = 3758097131;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      v215  = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logEmergency(v215, "[dk] %s@%d:%s:%d: Overflow detected: scan_end_time %u 6g_act_scan_start_time %u \n");
    }
  }
  return v15;
}

uint64_t AppleBCMWLANCore::reportSlicesScanModeStats(void *a1, int a2, unsigned int a3, int a4)
{
  if (a2 > 2 || a4 <= a2)
  {
    uint64_t v5 = 3758097084;
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        unsigned int v8 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logEmergency(v8, "[dk] %s@%d:Out of range slice index %d\n");
      }
    }
  }
  else if (a3 >= 3)
  {
    uint64_t v5 = 3758097084;
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        unsigned int v9 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logEmergency(v9, "[dk] %s@%d:Out of range scan mode %d\n");
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = a1[9] + 12 * a2 + 4 * a3;
    ++*(_DWORD *)(v6 + 19508);
  }
  return v5;
}

uint64_t AppleBCMWLANCore::parseExtendedEventLogRecordScanChan(AppleBCMWLANCore *this, OSData *a2)
{
  uint64_t BytesNoCopy = (unsigned __int8 *)OSData::getBytesNoCopy(a2);
  int v5 = *BytesNoCopy;
  if (v5 == 2)
  {
    unsigned int v10 = OSData::getBytesNoCopy(a2);
    if (OSData::getLength(a2) == 64)
    {
      if (*((_WORD *)v10 + 3))
      {
        AppleChannelSpec  = AppleBCMWLANChanSpec::getAppleChannelSpec(*(int ***)(*((void *)this + 9) + 17576), *((unsigned __int16 *)v10 + 8));
        unsigned int v18 = *((unsigned __int16 *)v10 + 3);
        if ((v18 & 2) != 0) {
          unsigned int v19 = "Active";
        }
        else {
          unsigned int v19 = "Passive";
        }
        if ((v18 & 0x10) != 0) {
          unsigned int v20 = "Home Channel";
        }
        else {
          unsigned int v20 = "Off channel";
        }
        if ((v18 & 4) != 0)
        {
          unsigned int v21 = 0;
        }
        else if ((v18 & 8) != 0)
        {
          unsigned int v21 = 1;
        }
        else
        {
          unsigned int v21 = (v18 >> 4) & 2;
        }
        uint64_t v23 = *((void *)this + 9);
        if (*(_DWORD *)(v23 + 17784))
        {
          *(void *)(v23 + 17784)  = 0;
          *(_OWORD *)(v23 + 17752)  = 0u;
          *(_OWORD *)(v23 + 17768)  = 0u;
          *(_OWORD *)(v23 + 17736)  = 0u;
        }
        unsigned int v25 = v10[5];
        unsigned int v24 = v10[6];
        uint64_t v26 = *((void *)this + 9) + 17736;
        unsigned int v27 = v24 - v25;
        if (v24 < v25 || v27 >= 0x97) {
          ++*(unsigned char *)(v26 + 16 * v21 + 4);
        }
        else {
          *(_DWORD *)(v26 + 16 * v21) += v27;
        }
        if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
          || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
              (CCLogStream::shouldLogConsole() & 1) == 0))
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf  = 67110914;
            int v44 = 73;
            __int16 v45 = 2080;
            unsigned int v46 = "parseExtendedEventLogRecordScanChan";
            __int16 v47 = 1024;
            int v48 = 18804;
            __int16 v49 = 1024;
            int v50 = AppleChannelSpec;
            __int16 v51 = 2080;
            uint64_t v52 = v20;
            __int16 v53 = 2080;
            int v54 = v19;
            __int16 v55 = 1024;
            unsigned int v56 = v27;
            __int16 v57 = 1024;
            unsigned int v58 = v21;
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: SCAN_INFO: CurrentChannel=%d, Type=%s, ScanType=%s, ScanDuration=%dms, CoreIndex=%d\n", buf, 0x3Eu);
          }
        }
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v28 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logInfo(v28, "[dk] %s@%d:SCAN_INFO: CurrentChannel=%d, Type=%s, ScanType=%s, ScanDuration=%dms, CoreIndex=%d\n", "parseExtendedEventLogRecordScanChan", 18804, AppleChannelSpec, v20, v19, v27, v21);
          }
        }
      }
      else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v11, "[dk] %s@%d:ERROR:Invalid scan_flags %x\n on SCAN_SUMMARY_VERSION_2", "parseExtendedEventLogRecordScanChan", 18808, *((unsigned __int16 *)v10 + 3));
        }
      }
      return 0;
    }
    uint64_t v8 = 3758097084;
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
      return v8;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (!CCLogStream::shouldLog()) {
      return v8;
    }
LABEL_21:
    unsigned int v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    OSData::getLength(a2);
    CCLogStream::logAlert(v13, "[dk] %s@%d:ScanSummary size mismatch, have %d, expected %ld\n");
    return v8;
  }
  uint64_t v6 = BytesNoCopy;
  if (v5 == 3)
  {
    uint64_t v7 = OSData::getBytesNoCopy(a2);
    if (OSData::getLength(a2) == 40)
    {
      if ((v7[3] & 1) == 0)
      {
        uint64_t v8 = 3758097084;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            unsigned int v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v9, "[dk] %s@%d:ERROR:Invalid scan_flags %x\n");
          }
        }
        return v8;
      }
      unsigned __int16 v14 = AppleBCMWLANChanSpec::getAppleChannelSpec(*(int ***)(*((void *)this + 9) + 17576), (unsigned __int16)v7[4]);
      if (v14 >= 0x4000u)
      {
        int v22 = v14 >> 14;
        if (v22 == 3)
        {
          long long v16 = "5G";
          uint64_t v15 = 1;
        }
        else if (v22 == 1)
        {
          long long v16 = "6G";
          uint64_t v15 = 2;
        }
        else
        {
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v42 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v42, "[dk] %s@%d:Invalid: appleChanSpec band[%d]", "parseExtendedEventLogRecordScanChan", 18727, 2);
            }
          }
          uint64_t v15 = 0;
          long long v16 = 0;
        }
      }
      else
      {
        uint64_t v15 = 0;
        long long v16 = "2G";
      }
      uint64_t v29 = *((void *)this + 9);
      if (*(_DWORD *)(v29 + 35640))
      {
        uint64_t v41 = v29 + 35592;
        *(void *)(v41 + 48)  = 0;
        *(_OWORD *)(v41 + 16)  = 0u;
        *(_OWORD *)(v41 + 32)  = 0u;
        *(_OWORD *)uint64_t v41 = 0u;
      }
      unsigned int v31 = *((_DWORD *)v7 + 3);
      unsigned int v30 = *((_DWORD *)v7 + 4);
      uint64_t v32 = *((void *)this + 9) + 35592;
      unsigned int v33 = v30 - v31;
      if (v30 < v31 || v33 >= 0x97) {
        ++*(unsigned char *)(v32 + 16 * v15 + 4);
      }
      else {
        *(_DWORD *)(v32 + 16 * v15) += v33;
      }
      if ((v7[3] & 0x10) != 0)
      {
        int v37 = 0;
        int v38 = 0;
        long long v36 = "Invalid";
        long long v39 = "Home Channel:";
      }
      else
      {
        __int16 v34 = *((_WORD *)v6 + 3);
        unint64_t v35 = "Active";
        if ((v34 & 2) == 0) {
          unint64_t v35 = "Passive";
        }
        if ((v34 & 0x40) != 0) {
          long long v36 = "Fils";
        }
        else {
          long long v36 = v35;
        }
        int v37 = (unsigned __int16)v7[12];
        int v38 = (unsigned __int16)v7[13];
        long long v39 = "Off channel:";
      }
      if (IO80211Controller::isLQMOSLOGEnabled(this)) {
        io80211_os_log();
      }
      if (IO80211Controller::isLQMIOLOGEnabled(this)) {
        IOLog("LQM-WIFI: Type:%s Scan Type:%s Channel:%d(%s) CoreIndex:%d Scan Duration:%dms ScanResultsPerChan %d ProbeReqsSent %d\n", v39, v36, v6[8], v16, 0, v33, v38, v37);
      }
      if (IO80211Controller::isLQMCCLOGEnabled(this)) {
        IO80211Controller::logLQMToCC(this, "LQM-WIFI: Type:%s Scan Type:%s Channel:%d(%s) CoreIndex:%d Scan Duration:%dms ScanResultsPerChan %d ProbeReqsSent %d\n", v39, v36, v6[8], v16, 0, v33, v38, v37);
      }
      return 0;
    }
    uint64_t v8 = 3758097084;
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
      return v8;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (!CCLogStream::shouldLog()) {
      return v8;
    }
    goto LABEL_21;
  }
  uint64_t v8 = 3758097084;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      BOOL v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v12, "[dk] %s@%d:Invalid scan chan info version %d\n");
    }
  }
  return v8;
}

uint64_t AppleBCMWLANCore::parseEventLogRecordRC2CoexStatsPerSlice(AppleBCMWLANCore *a1, OSData *a2, int a3)
{
  if (a3 >= 2)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        BOOL v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v12, "[dk] %s@%d:Invalid sliceIndex %d\n", "parseEventLogRecordRC2CoexStatsPerSlice", 18827, a3);
      }
    }
    return 0;
  }
  updated  = AppleBCMWLANCore::updateRC2CoexStatsReport(a1, a2, a3);
  if (!updated)
  {
    uint64_t v7 = *(AppleBCMWLANIOReporting **)(*((void *)a1 + 9) + 5520);
    if (v7)
    {
      uint64_t v8 = AppleBCMWLANIOReportingPerSlice::reportRC2Coex(v7, a2, a3);
      if (v8)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            unsigned int v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logAlert(v9, "[dk] %s@%d:Failed reportRC2Coex\n");
          }
        }
      }
      return v8;
    }
    return 0;
  }
  uint64_t v8 = updated;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      unsigned int v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      CCLogStream::logAlert(v11, "[dk] %s@%d:Failed updateRC2CoexStatsReport\n");
    }
  }
  return v8;
}

uint64_t AppleBCMWLANCore::updateRC2CoexStatsReport(AppleBCMWLANCore *a1, OSData *this, int a3)
{
  if (a3 != 1)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *, OSData *))(*(void *)a1 + 1848))(a1, this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        unsigned int v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logInfo(v11, "[dk] %s@%d:Unexpected slice index %d\n", "updateRC2CoexStatsReport", 19144, a3);
      }
    }
    return 0;
  }
  if (OSData::getLength(this) <= 2)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        unsigned int v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        int Length = OSData::getLength(this);
        CCLogStream::logAlert(v13, "[dk] %s@%d:Unexpected RC2 Coex Stats length %d\n", "updateRC2CoexStatsReport", 19145, Length);
      }
    }
    return 0;
  }
  uint64_t BytesNoCopy = (unsigned __int16 *)OSData::getBytesNoCopy(this);
  int v6 = *BytesNoCopy;
  switch(v6)
  {
    case 3:
      return AppleBCMWLANCore::updateRC2CoexStatsReportV3(a1, this);
    case 2:
      return AppleBCMWLANCore::updateRC2CoexStatsReportV2(a1, this);
    case 1:
      return AppleBCMWLANCore::updateRC2CoexStatsReportV1(a1, this);
    default:
      uint64_t v8 = BytesNoCopy;
      uint64_t v9 = 3758097090;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          BOOL v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logAlert(v12, "[dk] %s@%d:Invalid RC2 Coex stats version - %u\n", "updateRC2CoexStatsReport", 19160, *v8);
        }
      }
      return v9;
  }
}

uint64_t AppleBCMWLANCore::updateRC2CoexStatsReportV1(AppleBCMWLANCore *this, OSData *a2)
{
  unint64_t v33 = 0xAAAAAAAAAAAAAAAALL;
  *(_WORD *)(*((void *)this + 9) + 18428)  = 1;
  if (OSData::getLength(a2) == 36)
  {
    *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v4 + 1)  = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v31[16]  = v4;
    long long v32 = v4;
    *(_OWORD *)unsigned int v31 = v4;
    uint64_t BytesNoCopy = OSData::getBytesNoCopy(a2);
    if (*((unsigned char *)BytesNoCopy + 2) == 36)
    {
      int v6 = *((unsigned __int8 *)BytesNoCopy + 3);
      int v7 = BytesNoCopy[8];
      __int16 v8 = *((_WORD *)BytesNoCopy + 14);
      __int16 v9 = *((_WORD *)BytesNoCopy + 13);
      __int16 v10 = *((_WORD *)BytesNoCopy + 12);
      uint64_t v11 = *((void *)BytesNoCopy + 2);
      __int16 v12 = *((_WORD *)BytesNoCopy + 7);
      __int16 v13 = *((_WORD *)BytesNoCopy + 6);
      int v14 = BytesNoCopy[2];
      __int16 v15 = *((_WORD *)BytesNoCopy + 3);
      __int16 v16 = *((_WORD *)BytesNoCopy + 2);
      *(_WORD *)(*((void *)this + 9) + 18358) += v16;
      *(_WORD *)(*((void *)this + 9) + 18360) += v15;
      *(_WORD *)(*((void *)this + 9) + 18362) += v13;
      *(_WORD *)(*((void *)this + 9) + 18364) += v12;
      *(_WORD *)(*((void *)this + 9) + 18366) += v11;
      *(_WORD *)(*((void *)this + 9) + 18368) += WORD1(v11);
      *(_WORD *)(*((void *)this + 9) + 18370) += WORD2(v11);
      *(_WORD *)(*((void *)this + 9) + 18372) += HIWORD(v11);
      *(_WORD *)(*((void *)this + 9) + 18374) += v10;
      *(_WORD *)(*((void *)this + 9) + 18376) += v9;
      *(_WORD *)(*((void *)this + 9) + 18378) += v8;
      *(_DWORD *)(*((void *)this + 9) + 18380) += v7;
      *(_DWORD *)(*((void *)this + 9) + 18384) += v14;
      *(unsigned char *)(*((void *)this + 9) + 18356)  = 1;
      LOWORD(v17)  = v16;
      WORD1(v17)  = v15;
      WORD2(v17)  = v13;
      WORD3(v17)  = v12;
      *((void *)&v17 + 1)  = v11;
      *(_WORD *)(*((void *)this + 9) + 18724) += v16;
      *(_WORD *)(*((void *)this + 9) + 18726) += v15;
      *(_OWORD *)&v31[2]  = v17;
      *(_WORD *)(*((void *)this + 9) + 18732) += v13;
      uint64_t v18 = *((void *)this + 9);
      __int16 v19 = *(_WORD *)(v18 + 18734);
      *(_WORD *)&v31[18]  = v10;
      *(_WORD *)(v18 + 18734)  = v19 + v12;
      *(_WORD *)(*((void *)this + 9) + 18736) += v11;
      *(_WORD *)(*((void *)this + 9) + 18738) += WORD1(v11);
      *(_WORD *)&v31[20]  = v9;
      *(_WORD *)(*((void *)this + 9) + 18740) += WORD2(v11);
      uint64_t v20 = *((void *)this + 9);
      __int16 v21 = *(_WORD *)(v20 + 18742);
      *(_WORD *)&v31[22]  = v8;
      *(_WORD *)(v20 + 18742)  = v21 + HIWORD(v11);
      *(_WORD *)(*((void *)this + 9) + 18744) += v10;
      *(_DWORD *)&v31[24]  = v7;
      *(_DWORD *)&v31[28]  = v14;
      *(_WORD *)(*((void *)this + 9) + 18746) += v9;
      uint64_t v22 = *((void *)this + 9);
      LOWORD(v20)  = *(_WORD *)(v22 + 18748);
      v31[0]  = 1;
      *(_WORD *)(v22 + 18748)  = v20 + v8;
      *(_DWORD *)(*((void *)this + 9) + 18752) += v7;
      *(_DWORD *)(*((void *)this + 9) + 18728) += v14;
      mach_continuous_time();
      absolutetime_to_nanoseconds();
      unint64_t v23 = v33 / 0xF4240;
      LODWORD(v32)  = v33 / 0xF4240;
      if (v33 >= 0x10C388D00)
      {
        if (IO80211Controller::isLQMOSLOGEnabled(this)) {
          io80211_os_log();
        }
        if (IO80211Controller::isLQMIOLOGEnabled(this)) {
          IOLog("LQM-WIFI: RC2 Coex Stats V1: Mode=%u Request=%u Grant=%u Duration=%uus AckedPM=%u TXedCTS2A=%u GrantDelay=%u CritPhyCal=%u CritRateRecovery=%u CritBcnLoss=%u CritHpp=%u CritBT=%u CritAwdlNan=%u CirtAggregate=%u [%llums]\n", v6, *(unsigned __int16 *)(*((void *)this + 9) + 18724), *(unsigned __int16 *)(*((void *)this + 9) + 18726), *(_DWORD *)(*((void *)this + 9) + 18728), *(unsigned __int16 *)(*((void *)this + 9) + 18732), *(unsigned __int16 *)(*((void *)this + 9) + 18734), *(unsigned __int16 *)(*((void *)this + 9) + 18736), *(unsigned __int16 *)(*((void *)this + 9) + 18738), *(unsigned __int16 *)(*((void *)this + 9) + 18740), *(unsigned __int16 *)(*((void *)this + 9) + 18742), *(unsigned __int16 *)(*((void *)this + 9) + 18744), *(unsigned __int16 *)(*((void *)this + 9) + 18746), *(unsigned __int16 *)(*((void *)this + 9) + 18748), *(_DWORD *)(*((void *)this + 9) + 18752), v23);
        }
        if (IO80211Controller::isLQMCCLOGEnabled(this)) {
          IO80211Controller::logLQMToCC(this, "LQM-WIFI: RC2 Coex Stats V1: Mode=%u Request=%u Grant=%u Duration=%uus AckedPM=%u TXedCTS2A=%u GrantDelay=%u CritPhyCal=%u CritRateRecovery=%u CritBcnLoss=%u CritHpp=%u CritBT=%u CritAwdlNan=%u CirtAggregate=%u [%llums]\n", v6, *(unsigned __int16 *)(*((void *)this + 9) + 18724), *(unsigned __int16 *)(*((void *)this + 9) + 18726), *(_DWORD *)(*((void *)this + 9) + 18728), *(unsigned __int16 *)(*((void *)this + 9) + 18732), *(unsigned __int16 *)(*((void *)this + 9) + 18734), *(unsigned __int16 *)(*((void *)this + 9) + 18736), *(unsigned __int16 *)(*((void *)this + 9) + 18738), *(unsigned __int16 *)(*((void *)this + 9) + 18740), *(unsigned __int16 *)(*((void *)this + 9) + 18742), *(unsigned __int16 *)(*((void *)this + 9) + 18744), *(unsigned __int16 *)(*((void *)this + 9) + 18746), *(unsigned __int16 *)(*((void *)this + 9) + 18748), *(_DWORD *)(*((void *)this + 9) + 18752), v23);
        }
        *(void *)(*((void *)this + 9) + 30952)  = mach_continuous_time();
        uint64_t v24 = *((void *)this + 9);
        *(_OWORD *)(v24 + 18720)  = 0u;
        *(_OWORD *)(v24 + 18736)  = 0u;
        *(_DWORD *)(v24 + 18752)  = 0;
      }
      uint64_t v25 = *((void *)this + 9);
      uint64_t v26 = *(IO80211SkywalkInterface **)(v25 + 11304);
      if (v26 && *(unsigned char *)(v25 + 18356)) {
        IO80211Controller::postMessage(this, v26, 0xA2u, v31, 0x30uLL, 1);
      }
      return 0;
    }
    else
    {
      uint64_t v27 = 3758097084;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v30 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v30, "[dk] %s@%d:sizeof(rc2CoexStatsV1) %ld rc2CoexStatsV1.len() %d\n");
        }
      }
    }
  }
  else
  {
    uint64_t v27 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v29 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        OSData::getLength(a2);
        CCLogStream::logAlert(v29, "[dk] %s@%d:sizeof(rc2CoexStatsV1) %ld payload->getLength() %d\n");
      }
    }
  }
  return v27;
}

uint64_t AppleBCMWLANCore::updateRC2CoexStatsReportV2(AppleBCMWLANCore *this, OSData *a2)
{
  unint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
  if (OSData::getLength(a2) == 40)
  {
    *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v4 + 1)  = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v38[16]  = v4;
    long long v39 = v4;
    *(_OWORD *)int v38 = v4;
    uint64_t BytesNoCopy = OSData::getBytesNoCopy(a2);
    if (*((unsigned char *)BytesNoCopy + 2) == 40)
    {
      int v6 = *((unsigned __int8 *)BytesNoCopy + 3);
      __int16 v7 = BytesNoCopy[18];
      int v8 = *((_DWORD *)BytesNoCopy + 8);
      __int16 v9 = BytesNoCopy[15];
      __int16 v10 = BytesNoCopy[14];
      __int16 v11 = BytesNoCopy[13];
      __int16 v12 = BytesNoCopy[12];
      uint64_t v13 = *((void *)BytesNoCopy + 2);
      __int16 v14 = BytesNoCopy[7];
      __int16 v15 = BytesNoCopy[6];
      int v16 = *((_DWORD *)BytesNoCopy + 2);
      __int16 v17 = BytesNoCopy[3];
      __int16 v18 = BytesNoCopy[2];
      *(_WORD *)(*((void *)this + 9) + 18428)  = 2;
      *(_WORD *)(*((void *)this + 9) + 18358) += v18;
      *(_WORD *)(*((void *)this + 9) + 18360) += v17;
      *(_WORD *)(*((void *)this + 9) + 18362) += v15;
      *(_WORD *)(*((void *)this + 9) + 18364) += v14;
      *(_WORD *)(*((void *)this + 9) + 18366) += v13;
      *(_WORD *)(*((void *)this + 9) + 18368) += WORD1(v13);
      *(_WORD *)(*((void *)this + 9) + 18370) += WORD2(v13);
      *(_WORD *)(*((void *)this + 9) + 18372) += HIWORD(v13);
      *(_WORD *)(*((void *)this + 9) + 18374) += v12;
      *(_WORD *)(*((void *)this + 9) + 18376) += v11;
      *(_WORD *)(*((void *)this + 9) + 18378) += v10;
      *(_WORD *)(*((void *)this + 9) + 18392) += v9;
      *(_DWORD *)(*((void *)this + 9) + 18380) += v8;
      *(_WORD *)(*((void *)this + 9) + 18394) += v7;
      *(_DWORD *)(*((void *)this + 9) + 18384) += v16;
      *(unsigned char *)(*((void *)this + 9) + 18356)  = 1;
      LOWORD(v19)  = v18;
      WORD1(v19)  = v17;
      WORD2(v19)  = v15;
      uint64_t v20 = *((void *)this + 9);
      __int16 v21 = *(_WORD *)(v20 + 18760);
      WORD3(v19)  = v14;
      *((void *)&v19 + 1)  = v13;
      *(_OWORD *)&v38[2]  = v19;
      *(_WORD *)(v20 + 18760)  = v21 + v18;
      uint64_t v22 = *((void *)this + 9);
      __int16 v23 = *(_WORD *)(v22 + 18762);
      *(_WORD *)&v38[18]  = v12;
      *(_WORD *)(v22 + 18762)  = v23 + v17;
      *(_WORD *)(*((void *)this + 9) + 18768) += v15;
      *(_WORD *)(*((void *)this + 9) + 18770) += v14;
      *(_WORD *)&v38[20]  = v11;
      *(_WORD *)(*((void *)this + 9) + 18772) += v13;
      uint64_t v24 = *((void *)this + 9);
      __int16 v25 = *(_WORD *)(v24 + 18774);
      *(_WORD *)&v38[22]  = v10;
      *(_WORD *)(v24 + 18774)  = v25 + WORD1(v13);
      *(_WORD *)(*((void *)this + 9) + 18776) += WORD2(v13);
      *(_WORD *)(*((void *)this + 9) + 18778) += HIWORD(v13);
      WORD2(v39)  = v9;
      *(_WORD *)(*((void *)this + 9) + 18780) += v12;
      uint64_t v26 = *((void *)this + 9);
      __int16 v27 = *(_WORD *)(v26 + 18782);
      WORD3(v39)  = v7;
      *(_WORD *)(v26 + 18782)  = v27 + v11;
      *(_WORD *)(*((void *)this + 9) + 18784) += v10;
      *(_DWORD *)&v38[24]  = v8;
      *(_DWORD *)&v38[28]  = v16;
      *(_WORD *)(*((void *)this + 9) + 18786) += v9;
      uint64_t v28 = *((void *)this + 9);
      int v29 = *(_DWORD *)(v28 + 18788);
      v38[0]  = 1;
      *(_DWORD *)(v28 + 18788)  = v29 + v8;
      *(_WORD *)(*((void *)this + 9) + 18792) += v7;
      *(_DWORD *)(*((void *)this + 9) + 18764) += v16;
      mach_continuous_time();
      absolutetime_to_nanoseconds();
      unint64_t v30 = v40 / 0xF4240;
      LODWORD(v39)  = v40 / 0xF4240;
      if (v40 >= 0x10C388D00)
      {
        if (IO80211Controller::isLQMOSLOGEnabled(this)) {
          io80211_os_log();
        }
        if (IO80211Controller::isLQMIOLOGEnabled(this)) {
          IOLog("LQM-WIFI: RC2 Coex Stats V2: Mode=%u Request=%u Grant=%u Duration=%uus AckedPM=%u TXedCTS2A=%u GrantDelay=%u CritPhyCal=%u CritRateRecovery=%u CritBcnLoss=%u CritHpp=%u CritBT=%u CritAwdlNan=%u CritMaxDur=%u CirtAggregate=%u CritBitMapMax=%u [%llums]\n", v6, *(unsigned __int16 *)(*((void *)this + 9) + 18760), *(unsigned __int16 *)(*((void *)this + 9) + 18762), *(_DWORD *)(*((void *)this + 9) + 18764), *(unsigned __int16 *)(*((void *)this + 9) + 18768), *(unsigned __int16 *)(*((void *)this + 9) + 18770), *(unsigned __int16 *)(*((void *)this + 9) + 18772), *(unsigned __int16 *)(*((void *)this + 9) + 18774), *(unsigned __int16 *)(*((void *)this + 9) + 18776), *(unsigned __int16 *)(*((void *)this + 9) + 18778), *(unsigned __int16 *)(*((void *)this + 9) + 18780), *(unsigned __int16 *)(*((void *)this + 9) + 18782), *(unsigned __int16 *)(*((void *)this + 9) + 18784), *(unsigned __int16 *)(*((void *)this + 9) + 18786), *(_DWORD *)(*((void *)this + 9) + 18788), *(unsigned __int16 *)(*((void *)this + 9) + 18792),
        }
            v30);
        if (IO80211Controller::isLQMCCLOGEnabled(this)) {
          IO80211Controller::logLQMToCC(this, "LQM-WIFI: RC2 Coex Stats V2: Mode=%u Request=%u Grant=%u Duration=%uus AckedPM=%u TXedCTS2A=%u GrantDelay=%u CritPhyCal=%u CritRateRecovery=%u CritBcnLoss=%u CritHpp=%u CritBT=%u CritAwdlNan=%u CritMaxDur=%u CirtAggregate=%u CritBitMapMax=%u [%llums]\n", v6, *(unsigned __int16 *)(*((void *)this + 9) + 18760), *(unsigned __int16 *)(*((void *)this + 9) + 18762), *(_DWORD *)(*((void *)this + 9) + 18764), *(unsigned __int16 *)(*((void *)this + 9) + 18768), *(unsigned __int16 *)(*((void *)this + 9) + 18770), *(unsigned __int16 *)(*((void *)this + 9) + 18772), *(unsigned __int16 *)(*((void *)this + 9) + 18774), *(unsigned __int16 *)(*((void *)this + 9) + 18776), *(unsigned __int16 *)(*((void *)this + 9) + 18778), *(unsigned __int16 *)(*((void *)this + 9) + 18780), *(unsigned __int16 *)(*((void *)this + 9) + 18782), *(unsigned __int16 *)(*((void *)this + 9) + 18784), *(unsigned __int16 *)(*((void *)this + 9) + 18786), *(_DWORD *)(*((void *)this + 9) + 18788),
        }
            *(unsigned __int16 *)(*((void *)this + 9) + 18792),
            v30);
        *(void *)(*((void *)this + 9) + 30952)  = mach_continuous_time();
        uint64_t v31 = *((void *)this + 9) + 18756;
        *(_OWORD *)uint64_t v31 = 0u;
        *(_OWORD *)(v31 + 16)  = 0u;
        *(void *)(v31 + 32)  = 0;
      }
      uint64_t v32 = *((void *)this + 9);
      unint64_t v33 = *(IO80211SkywalkInterface **)(v32 + 11304);
      if (v33 && *(unsigned char *)(v32 + 18356)) {
        IO80211Controller::postMessage(this, v33, 0xA2u, v38, 0x30uLL, 1);
      }
      return 0;
    }
    else
    {
      uint64_t v34 = 3758097084;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          int v37 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v37, "[dk] %s@%d:sizeof(rc2CoexStatsV2) %ld rc2CoexStatsV2.len() %d\n");
        }
      }
    }
  }
  else
  {
    uint64_t v34 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v36 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        OSData::getLength(a2);
        CCLogStream::logAlert(v36, "[dk] %s@%d:sizeof(rc2CoexStatsV2) %ld payload->getLength() %d\n");
      }
    }
  }
  return v34;
}

uint64_t AppleBCMWLANCore::updateRC2CoexStatsReportV3(AppleBCMWLANCore *this, OSData *a2)
{
  unint64_t v49 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = *((void *)this + 9);
  if (OSData::getLength(a2) == 48)
  {
    int v45 = -1431655766;
    *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v5 + 1)  = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)int v44 = v5;
    *(_OWORD *)&v44[16]  = v5;
    uint64_t BytesNoCopy = (unsigned __int8 *)OSData::getBytesNoCopy(a2);
    if (BytesNoCopy[2] == 48)
    {
      __int16 v7 = (unsigned __int16 *)(v4 + 18800);
      int v8 = BytesNoCopy[3];
      __int16 v9 = *((_WORD *)BytesNoCopy + 22);
      int v10 = *((_DWORD *)BytesNoCopy + 8);
      int v11 = *((_DWORD *)BytesNoCopy + 2);
      LODWORD(v12)  = *((_DWORD *)BytesNoCopy + 1);
      DWORD1(v12)  = *((_DWORD *)BytesNoCopy + 3);
      int16x4_t v13 = *(int16x4_t *)(BytesNoCopy + 24);
      *((void *)&v12 + 1)  = *((void *)BytesNoCopy + 2);
      int16x4_t v14 = *(int16x4_t *)(BytesNoCopy + 36);
      *(_WORD *)(*((void *)this + 9) + 18428)  = 3;
      *(_WORD *)(*((void *)this + 9) + 18358) += v12;
      *(_WORD *)(*((void *)this + 9) + 18360) += WORD1(v12);
      *(_WORD *)(*((void *)this + 9) + 18362) += WORD2(v12);
      *(_WORD *)(*((void *)this + 9) + 18364) += WORD3(v12);
      *(_WORD *)(*((void *)this + 9) + 18366) += WORD4(v12);
      *(_WORD *)(*((void *)this + 9) + 18368) += WORD5(v12);
      *(_WORD *)(*((void *)this + 9) + 18370) += WORD6(v12);
      *(_WORD *)(*((void *)this + 9) + 18372) += HIWORD(v12);
      *(_WORD *)(*((void *)this + 9) + 18374) += v13.i16[0];
      *(_WORD *)(*((void *)this + 9) + 18376) += v13.i16[1];
      *(_WORD *)(*((void *)this + 9) + 18378) += v13.i16[2];
      *(_WORD *)(*((void *)this + 9) + 18392) += v13.i16[3];
      *(_DWORD *)(*((void *)this + 9) + 18380) += v10;
      *(_WORD *)(*((void *)this + 9) + 18394) += v14.i16[0];
      *(_DWORD *)(*((void *)this + 9) + 18384) += v11;
      *(_WORD *)(*((void *)this + 9) + 18396) += v14.i16[1];
      *(_WORD *)(*((void *)this + 9) + 18398) += v14.i16[2];
      *(_WORD *)(*((void *)this + 9) + 18400) += v14.i16[3];
      *(_WORD *)(*((void *)this + 9) + 18402) += v9;
      *(unsigned char *)(*((void *)this + 9) + 18356)  = 1;
      *(_OWORD *)&v44[2]  = v12;
      *(_DWORD *)&v44[18]  = v13.i32[0];
      __int16 v46 = v13.i16[3];
      *(_WORD *)&v44[22]  = v13.i16[2];
      int16x4_t v47 = v14;
      *(_DWORD *)&v44[24]  = v10;
      *(_DWORD *)&v44[28]  = v11;
      __int16 v48 = v9;
      v44[0]  = 1;
      *v7 += v12;
      v7[1] += WORD1(v12);
      v7[4] += WORD2(v12);
      v7[5] += WORD3(v12);
      v7[6] += WORD4(v12);
      v7[7] += WORD5(v12);
      v7[8] += WORD6(v12);
      v7[9] += HIWORD(v12);
      *(int16x4_t *)(v7 + 10)  = vadd_s16(*(int16x4_t *)(v7 + 10), v13);
      *((_DWORD *)v7 + 7) += v10;
      *((_DWORD *)v7 + 1) += v11;
      *((int16x4_t *)v7 + 4)  = vadd_s16(*(int16x4_t *)(v7 + 16), v14);
      v7[20] += v9;
      mach_continuous_time();
      absolutetime_to_nanoseconds();
      unint64_t v15 = v49 / 0xF4240;
      int v45 = v49 / 0xF4240;
      if (v49 >= 0x10C388D00)
      {
        if (IO80211Controller::isLQMOSLOGEnabled(this)) {
          io80211_os_log();
        }
        if (IO80211Controller::isLQMIOLOGEnabled(this)) {
          IOLog("LQM-WIFI: RC2 Coex Stats V3: Mode=%u Request=%u Grant=%u Duration=%uus AckedPM=%u TXedCTS2A=%u GrantDelay=%u CritPhyCal=%u CritRateRecovery=%u CritBcnLoss=%u CritHpp=%u CritBT=%u CritAwdlNan=%u CritMaxDur=%u CirtAggregate=%u CritBitMapMax=%u rc2_tx_req_cnt=%u rc2_rx_req_cnt=%u rc2_tx_deny_cnt=%u rc2_rx_deny_cnt=%u [%llums]\n", v8, *v7, v7[1], *((_DWORD *)v7 + 1), v7[4], v7[5], v7[6], v7[7], v7[8], v7[9], v7[10], v7[11], v7[12], v7[13], *((_DWORD *)v7 + 7), v7[16],
        }
            v7[17],
            v7[18],
            v7[19],
            v7[20],
            v15);
        if (IO80211Controller::isLQMCCLOGEnabled(this)) {
          IO80211Controller::logLQMToCC(this, "LQM-WIFI: RC2 Coex Stats V3: Mode=%u Request=%u Grant=%u Duration=%uus AckedPM=%u TXedCTS2A=%u GrantDelay=%u CritPhyCal=%u CritRateRecovery=%u CritBcnLoss=%u CritHpp=%u CritBT=%u CritAwdlNan=%u CritMaxDur=%u CirtAggregate=%u CritBitMapMax=%u rc2_tx_req_cnt=%u rc2_rx_req_cnt=%u rc2_tx_deny_cnt=%u rc2_rx_deny_cnt=%u [%llums]\n", v8, *v7, v7[1], *((_DWORD *)v7 + 1), v7[4], v7[5], v7[6], v7[7], v7[8], v7[9], v7[10], v7[11], v7[12], v7[13], *((_DWORD *)v7 + 7),
        }
            v7[16],
            v7[17],
            v7[18],
            v7[19],
            v7[20],
            v15);
        *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v16 + 1)  = 0xAAAAAAAAAAAAAAAALL;
        long long v64 = v16;
        long long v65 = v16;
        long long v62 = v16;
        long long v63 = v16;
        long long v60 = v16;
        long long v61 = v16;
        long long v58 = v16;
        long long v59 = v16;
        long long v56 = v16;
        long long v57 = v16;
        long long v54 = v16;
        long long v55 = v16;
        long long v52 = v16;
        long long v53 = v16;
        *(_OWORD *)__str  = v16;
        long long v51 = v16;
        snprintf(__str, 0x100uLL, "15.4 Coex Stats V3: Mode=%u Request=%u Grant=%u Duration=%uus AckedPM=%u TXedCTS2A=%u GrantDelay=%u CritPhyCal=%u CritRateRecovery=%u CritBcnLoss=%u CritHpp=%u CritBT=%u CritAwdlNan=%u CritMaxDur=%u CirtAggregate=%u CritBitMapMax=%u \n", v8, *v7, v7[1], *((_DWORD *)v7 + 1), v7[4], v7[5], v7[6], v7[7], v7[8], v7[9], v7[10], v7[11], v7[12], v7[13], *((_DWORD *)v7 + 7),
          v7[16]);
        uint64_t v17 = *((void *)this + 9);
        if ((*(_DWORD *)(v17 + 980) - 1) > 1)
        {
          __int16 v18 = (_OWORD *)(v17 + 31037);
          long long v19 = v63;
          v18[236]  = v62;
          v18[237]  = v19;
          long long v20 = v65;
          v18[238]  = v64;
          v18[239]  = v20;
          long long v21 = v59;
          v18[232]  = v58;
          v18[233]  = v21;
          long long v22 = v61;
          v18[234]  = v60;
          v18[235]  = v22;
          long long v23 = v55;
          v18[228]  = v54;
          v18[229]  = v23;
          long long v24 = v57;
          v18[230]  = v56;
          v18[231]  = v24;
          long long v25 = v51;
          v18[224]  = *(_OWORD *)__str;
          v18[225]  = v25;
          long long v26 = v53;
          v18[226]  = v52;
          v18[227]  = v26;
        }
        else
        {
          io80211_os_log();
        }
        snprintf(__str, 0x100uLL, "15.4 Coex Stats V3: 154_tx_req_cnt=%u 154_rx_req_cnt=%u 154_tx_deny_cnt=%u 154_rx_deny_cnt=%u [%llums]\n", v7[17], v7[18], v7[19], v7[20], v15);
        uint64_t v27 = *((void *)this + 9);
        if ((*(_DWORD *)(v27 + 980) - 1) > 1)
        {
          uint64_t v28 = (_OWORD *)(v27 + 31037);
          long long v29 = v63;
          v28[252]  = v62;
          v28[253]  = v29;
          long long v30 = v65;
          v28[254]  = v64;
          v28[255]  = v30;
          long long v31 = v59;
          v28[248]  = v58;
          v28[249]  = v31;
          long long v32 = v61;
          v28[250]  = v60;
          v28[251]  = v32;
          long long v33 = v55;
          v28[244]  = v54;
          v28[245]  = v33;
          long long v34 = v57;
          v28[246]  = v56;
          v28[247]  = v34;
          long long v35 = v51;
          v28[240]  = *(_OWORD *)__str;
          v28[241]  = v35;
          long long v36 = v53;
          v28[242]  = v52;
          v28[243]  = v36;
        }
        else
        {
          io80211_os_log();
        }
        *(void *)(*((void *)this + 9) + 30952)  = mach_continuous_time();
        int v37 = (_OWORD *)(*((void *)this + 9) + 18796);
        _OWORD *v37 = 0u;
        v37[1]  = 0u;
        v37[2]  = 0u;
      }
      uint64_t v38 = *((void *)this + 9);
      long long v39 = *(IO80211SkywalkInterface **)(v38 + 11304);
      if (v39 && *(unsigned char *)(v38 + 18356)) {
        IO80211Controller::postMessage(this, v39, 0xA2u, v44, 0x30uLL, 1);
      }
      return 0;
    }
    else
    {
      uint64_t v40 = 3758097084;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v43 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v43, "[dk] %s@%d:sizeof(rc2CoexStatsV3) %ld rc2CoexStatsV3.len() %d\n");
        }
      }
    }
  }
  else
  {
    uint64_t v40 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v42 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        OSData::getLength(a2);
        CCLogStream::logAlert(v42, "[dk] %s@%d:sizeof(rc2CoexStatsV3) %ld payload->getLength() %d\n");
      }
    }
  }
  return v40;
}

uint64_t AppleBCMWLANCore::sendRC2CoexStatsEventCoreAnalytics(IOService *this)
{
  if (!WORD2(this[1].OSObject::OSObjectInterface::__vftable[1151].free))
  {
    long long v3 = 0;
    long long v5 = 0;
    int v101 = 0;
    int v119 = 0;
    int v120 = 0;
    unsigned int v118 = 0;
    OSNumberPtr v111 = 0;
    OSNumberPtr v112 = 0;
    OSNumberPtr v110 = 0;
    OSNumberPtr v105 = 0;
    int v116 = 0;
    int v117 = 0;
    v114  = 0;
    v115  = 0;
    OSNumberPtr v108 = 0;
    OSNumberPtr v109 = 0;
    OSNumberPtr v106 = 0;
    OSNumberPtr v107 = 0;
    aKey  = 0;
    long long v26 = 0;
    long long v29 = 0;
    long long v32 = 0;
    long long v36 = 0;
    OSNumberPtr v103 = 0;
    v104  = 0;
    v102  = 0;
    OSNumberPtr v34 = 0;
    OSNumberPtr v38 = 0;
    goto LABEL_47;
  }
  OSStringPtr v2 = OSString::withCString("com.apple.wifi.RC2CoexStats");
  if (v2)
  {
    long long v3 = v2;
    OSDictionaryPtr v4 = OSDictionary::withCapacity(0x13u);
    if (v4)
    {
      long long v5 = v4;
      OSStringPtr v6 = OSString::withCString("Request");
      if (v6)
      {
        __int16 v7 = v6;
        OSNumberPtr v8 = OSNumber::withNumber(HIWORD(this[1].OSObject::OSObjectInterface::__vftable[1147].init), 0x10uLL);
        if (v8)
        {
          OSNumberPtr v112 = v8;
          OSDictionary::setObject(v5, v7, v8);
          OSStringPtr v9 = OSString::withCString("Grant");
          if (v9)
          {
            int v120 = v9;
            OSNumberPtr v10 = OSNumber::withNumber(LOWORD(this[1].OSObject::OSObjectInterface::__vftable[1147].free), 0x10uLL);
            if (v10)
            {
              OSNumberPtr v111 = v10;
              OSDictionary::setObject(v5, v120, v10);
              OSStringPtr v11 = OSString::withCString("SuccessfullyAckedPM");
              if (v11)
              {
                int v119 = v11;
                OSNumberPtr v12 = OSNumber::withNumber(WORD1(this[1].OSObject::OSObjectInterface::__vftable[1147].free), 0x10uLL);
                if (v12)
                {
                  OSNumberPtr v110 = v12;
                  OSDictionary::setObject(v5, v119, v12);
                  OSStringPtr v13 = OSString::withCString("SuccessfullyTXedCTS2A");
                  if (v13)
                  {
                    unsigned int v118 = v13;
                    OSNumberPtr v14 = OSNumber::withNumber(WORD2(this[1].OSObject::OSObjectInterface::__vftable[1147].free), 0x10uLL);
                    if (!v14)
                    {
                      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                      {
                        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                        if (CCLogStream::shouldLog())
                        {
                          int v77 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                          CCLogStream::logAlert(v77, "[dk] %s@%d:Fail to allocate valueRC2SuccessTXedCTS2A\n", "sendRC2CoexStatsEventCoreAnalytics", 19211);
                        }
                      }
                      OSNumberPtr v38 = 0;
                      OSNumberPtr v34 = 0;
                      v102  = 0;
                      OSNumberPtr v103 = 0;
                      v104  = 0;
                      long long v36 = 0;
                      long long v32 = 0;
                      long long v29 = 0;
                      long long v26 = 0;
                      aKey  = 0;
                      OSNumberPtr v106 = 0;
                      OSNumberPtr v107 = 0;
                      OSNumberPtr v108 = 0;
                      OSNumberPtr v109 = 0;
                      v114  = 0;
                      v115  = 0;
                      int v116 = 0;
                      int v117 = 0;
                      OSNumberPtr v105 = 0;
                      goto LABEL_52;
                    }
                    OSNumberPtr v105 = v14;
                    OSDictionary::setObject(v5, v118, v14);
                    OSStringPtr v15 = OSString::withCString("GrantDelay");
                    if (!v15)
                    {
                      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                      {
                        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                        if (CCLogStream::shouldLog())
                        {
                          char v78 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                          CCLogStream::logAlert(v78, "[dk] %s@%d:Fail to allocate keyRC2GrantDelay\n", "sendRC2CoexStatsEventCoreAnalytics", 19215);
                        }
                      }
                      OSNumberPtr v38 = 0;
                      OSNumberPtr v34 = 0;
                      v102  = 0;
                      OSNumberPtr v103 = 0;
                      v104  = 0;
                      long long v36 = 0;
                      long long v32 = 0;
                      long long v29 = 0;
                      long long v26 = 0;
                      aKey  = 0;
                      OSNumberPtr v106 = 0;
                      OSNumberPtr v107 = 0;
                      OSNumberPtr v108 = 0;
                      OSNumberPtr v109 = 0;
                      v114  = 0;
                      v115  = 0;
                      int v116 = 0;
                      int v117 = 0;
                      goto LABEL_52;
                    }
                    int v117 = v15;
                    OSNumberPtr v16 = OSNumber::withNumber(HIWORD(this[1].OSObject::OSObjectInterface::__vftable[1147].free), 0x10uLL);
                    if (v16)
                    {
                      OSNumberPtr v109 = v16;
                      OSDictionary::setObject(v5, v117, v16);
                      OSStringPtr v17 = OSString::withCString("CriticalPHYCal");
                      if (v17)
                      {
                        int v116 = v17;
                        OSNumberPtr v18 = OSNumber::withNumber(LOWORD(this[1].OSObject::OSObjectInterface::__vftable[1148].init), 0x10uLL);
                        if (v18)
                        {
                          OSNumberPtr v108 = v18;
                          OSDictionary::setObject(v5, v116, v18);
                          OSStringPtr v19 = OSString::withCString("CriticalRateRecovery");
                          if (v19)
                          {
                            v115  = v19;
                            OSNumberPtr v20 = OSNumber::withNumber(WORD1(this[1].OSObject::OSObjectInterface::__vftable[1148].init), 0x10uLL);
                            if (v20)
                            {
                              OSNumberPtr v107 = v20;
                              OSDictionary::setObject(v5, v115, v20);
                              OSStringPtr v21 = OSString::withCString("CriticalBeaconLoss");
                              if (v21)
                              {
                                v114  = v21;
                                OSNumberPtr v22 = OSNumber::withNumber(WORD2(this[1].OSObject::OSObjectInterface::__vftable[1148].init), 0x10uLL);
                                if (!v22)
                                {
                                  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                                  {
                                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                    if (CCLogStream::shouldLog())
                                    {
                                      uint64_t v85 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                      CCLogStream::logAlert(v85, "[dk] %s@%d:Fail to allocate valueRC2CritBcnLoss\n", "sendRC2CoexStatsEventCoreAnalytics", 19235);
                                    }
                                  }
                                  OSNumberPtr v38 = 0;
                                  OSNumberPtr v34 = 0;
                                  v102  = 0;
                                  OSNumberPtr v103 = 0;
                                  v104  = 0;
                                  long long v36 = 0;
                                  long long v32 = 0;
                                  long long v29 = 0;
                                  long long v26 = 0;
                                  aKey  = 0;
                                  OSNumberPtr v106 = 0;
                                  goto LABEL_52;
                                }
                                OSNumberPtr v106 = v22;
                                OSDictionary::setObject(v5, v114, v22);
                                OSStringPtr v23 = OSString::withCString("CriticalHPP");
                                if (!v23)
                                {
                                  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                                  {
                                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                    if (CCLogStream::shouldLog())
                                    {
                                      int v86 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                      CCLogStream::logAlert(v86, "[dk] %s@%d:Fail to allocate keyRC2CritHpp\n", "sendRC2CoexStatsEventCoreAnalytics", 19239);
                                    }
                                  }
                                  OSNumberPtr v38 = 0;
                                  OSNumberPtr v34 = 0;
                                  v102  = 0;
                                  OSNumberPtr v103 = 0;
                                  v104  = 0;
                                  long long v36 = 0;
                                  long long v32 = 0;
                                  long long v29 = 0;
                                  long long v26 = 0;
                                  aKey  = 0;
                                  goto LABEL_52;
                                }
                                aKey  = v23;
                                OSNumberPtr v24 = OSNumber::withNumber(HIWORD(this[1].OSObject::OSObjectInterface::__vftable[1148].init), 0x10uLL);
                                if (v24)
                                {
                                  v104  = v24;
                                  OSDictionary::setObject(v5, aKey, v24);
                                  OSStringPtr v25 = OSString::withCString("CriticalBT");
                                  if (v25)
                                  {
                                    long long v26 = v25;
                                    OSNumberPtr v27 = OSNumber::withNumber(LOWORD(this[1].OSObject::OSObjectInterface::__vftable[1148].free), 0x10uLL);
                                    if (v27)
                                    {
                                      OSNumberPtr v103 = v27;
                                      OSDictionary::setObject(v5, v26, v27);
                                      OSStringPtr v28 = OSString::withCString("CriticalAWDLAndNAN");
                                      if (v28)
                                      {
                                        long long v29 = v28;
                                        OSNumberPtr v30 = OSNumber::withNumber(WORD1(this[1].OSObject::OSObjectInterface::__vftable[1148].free), 0x10uLL);
                                        if (v30)
                                        {
                                          v102  = (uint64_t)v30;
                                          OSDictionary::setObject(v5, v29, v30);
                                          OSStringPtr v31 = OSString::withCString("CriticalAggregate");
                                          if (v31)
                                          {
                                            long long v32 = v31;
                                            OSNumberPtr v33 = OSNumber::withNumber(HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[1148].free), 0x20uLL);
                                            if (v33)
                                            {
                                              OSNumberPtr v34 = v33;
                                              OSDictionary::setObject(v5, v32, v33);
                                              OSStringPtr v35 = OSString::withCString("RC2Duration");
                                              if (v35)
                                              {
                                                long long v36 = v35;
                                                OSNumberPtr v37 = OSNumber::withNumber(LODWORD(this[1].OSObject::OSObjectInterface::__vftable[1149].init), 0x20uLL);
                                                if (!v37)
                                                {
                                                  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                                                  {
                                                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                                    if (CCLogStream::shouldLog())
                                                    {
                                                      int v95 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                                      CCLogStream::logAlert(v95, "[dk] %s@%d:Fail to allocate valueRC2Duration\n", "sendRC2CoexStatsEventCoreAnalytics", 19265);
                                                    }
                                                  }
                                                  OSNumberPtr v38 = 0;
                                                  goto LABEL_52;
                                                }
                                                OSNumberPtr v38 = v37;
                                                int v101 = v7;
                                                OSDictionary::setObject(v5, v36, v37);
                                                if (WORD2(this[1].OSObject::OSObjectInterface::__vftable[1151].free) < 2u) {
                                                  goto LABEL_47;
                                                }
                                                OSStringPtr v39 = OSString::withCString("CriticalMaxDur");
                                                if (v39)
                                                {
                                                  uint64_t v40 = v39;
                                                  OSNumberPtr v41 = OSNumber::withNumber(LOWORD(this[1].OSObject::OSObjectInterface::__vftable[1149].free), 0x10uLL);
                                                  if (!v41)
                                                  {
                                                    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                                                    {
                                                      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                                      if (CCLogStream::shouldLog())
                                                      {
                                                        unsigned int v66 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                                        CCLogStream::logAlert(v66, "[dk] %s@%d:Fail to allocate numValue\n");
                                                      }
                                                    }
                                                    goto LABEL_266;
                                                  }
                                                  OSDictionary::setObject(v5, v40, v41);
                                                  OSStringPtr v42 = OSString::withCString("CriticalMapMax");
                                                  if (v42)
                                                  {
                                                    unsigned int v43 = v42;
                                                    char v99 = v3;
                                                    OSNumberPtr v44 = OSNumber::withNumber(LOWORD(this[1].OSObject::OSObjectInterface::__vftable[1149].free), 0x10uLL);
                                                    if (v44)
                                                    {
                                                      OSNumberPtr v45 = v44;
                                                      OSDictionary::setObject(v5, v43, v44);
                                                      ((void (*)(const OSObject *))v43->release)(v43);
                                                      ((void (*)(OSNumberPtr))v45->release)(v45);
                                                      if (WORD2(this[1].OSObject::OSObjectInterface::__vftable[1151].free) < 3u)
                                                      {
LABEL_45:
                                                        long long v3 = v99;
LABEL_47:
                                                        uint64_t v59 = IOService::CoreAnalyticsSendEvent(this, 0, v3, v5, 0);
                                                        if (v59)
                                                        {
                                                          uint64_t v60 = v59;
                                                          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                                                          {
                                                            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                                            if (CCLogStream::shouldLog())
                                                            {
                                                              int v98 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                                              uint64_t v100 = v3;
                                                              CStringNoCopy  = OSString::getCStringNoCopy(v3);
                                                              long long v65 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v60);
                                                              int v97 = CStringNoCopy;
                                                              long long v3 = v100;
                                                              CCLogStream::logEmergency(v98, "[dk] %s@%d:Failed to send CoreAnalytics for event %s : %s\n", "sendRC2CoexStatsEventCoreAnalytics", 19319, v97, v65);
                                                            }
                                                          }
                                                        }
                                                        __int16 v7 = v101;
                                                        if (!v101)
                                                        {
LABEL_53:
                                                          if (v112) {
                                                            ((void (*)(OSNumberPtr))v112->release)(v112);
                                                          }
                                                          if (v120) {
                                                            ((void (*)(const OSObject *))v120->release)(v120);
                                                          }
                                                          if (v111) {
                                                            ((void (*)(OSNumberPtr))v111->release)(v111);
                                                          }
                                                          if (v119) {
                                                            ((void (*)(const OSObject *))v119->release)(v119);
                                                          }
                                                          if (v110) {
                                                            ((void (*)(OSNumberPtr))v110->release)(v110);
                                                          }
                                                          if (v118) {
                                                            ((void (*)(const OSObject *))v118->release)(v118);
                                                          }
                                                          if (v105) {
                                                            ((void (*)(OSNumberPtr))v105->release)(v105);
                                                          }
                                                          if (v117) {
                                                            ((void (*)(const OSObject *))v117->release)(v117);
                                                          }
                                                          if (v109) {
                                                            ((void (*)(OSNumberPtr))v109->release)(v109);
                                                          }
                                                          if (v116) {
                                                            ((void (*)(const OSObject *))v116->release)(v116);
                                                          }
                                                          if (v108) {
                                                            ((void (*)(OSNumberPtr))v108->release)(v108);
                                                          }
                                                          if (v115) {
                                                            ((void (*)(const OSObject *))v115->release)(v115);
                                                          }
                                                          if (v107) {
                                                            ((void (*)(OSNumberPtr))v107->release)(v107);
                                                          }
                                                          if (v114) {
                                                            ((void (*)(const OSObject *))v114->release)(v114);
                                                          }
                                                          if (v106) {
                                                            ((void (*)(OSNumberPtr))v106->release)(v106);
                                                          }
                                                          if (aKey) {
                                                            ((void (*)(OSObject *))aKey->release)(aKey);
                                                          }
                                                          if (v104) {
                                                            ((void (*)(OSNumberPtr))v104->release)(v104);
                                                          }
                                                          if (v26) {
                                                            ((void (*)(const OSObject *))v26->release)(v26);
                                                          }
                                                          if (v103) {
                                                            ((void (*)(OSNumberPtr))v103->release)(v103);
                                                          }
                                                          if (v29) {
                                                            ((void (*)(const OSObject *))v29->release)(v29);
                                                          }
                                                          uint64_t result = v102;
                                                          if (v102) {
                                                            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v102 + 16))(v102);
                                                          }
                                                          if (v32) {
                                                            uint64_t result = ((uint64_t (*)(const OSObject *))v32->release)(v32);
                                                          }
                                                          if (v34) {
                                                            uint64_t result = ((uint64_t (*)(OSNumberPtr))v34->release)(v34);
                                                          }
                                                          if (v36) {
                                                            uint64_t result = ((uint64_t (*)(const OSObject *))v36->release)(v36);
                                                          }
                                                          if (v38) {
                                                            uint64_t result = ((uint64_t (*)(OSNumberPtr))v38->release)(v38);
                                                          }
                                                          if (!v3) {
                                                            goto LABEL_105;
                                                          }
                                                          goto LABEL_104;
                                                        }
LABEL_52:
                                                        ((void (*)(const OSObject *))v7->release)(v7);
                                                        goto LABEL_53;
                                                      }
                                                      OSStringPtr v46 = OSString::withCString("RC2TXReqCnt");
                                                      if (v46)
                                                      {
                                                        int16x4_t v47 = v46;
                                                        OSNumberPtr v48 = OSNumber::withNumber(WORD2(this[1].OSObject::OSObjectInterface::__vftable[1149].free), 0x10uLL);
                                                        if (!v48)
                                                        {
                                                          if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                                                            goto LABEL_265;
                                                          }
                                                          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                                          if (!CCLogStream::shouldLog()) {
                                                            goto LABEL_265;
                                                          }
                                                          goto LABEL_267;
                                                        }
                                                        OSDictionary::setObject(v5, v47, v48);
                                                        OSStringPtr v49 = OSString::withCString("RC2RXReqCnt");
                                                        if (v49)
                                                        {
                                                          int v50 = v49;
                                                          OSNumberPtr v51 = OSNumber::withNumber(HIWORD(this[1].OSObject::OSObjectInterface::__vftable[1149].free), 0x10uLL);
                                                          if (!v51)
                                                          {
                                                            if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                                                              goto LABEL_265;
                                                            }
                                                            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                                            if (!CCLogStream::shouldLog()) {
                                                              goto LABEL_265;
                                                            }
                                                            goto LABEL_267;
                                                          }
                                                          OSDictionary::setObject(v5, v50, v51);
                                                          OSStringPtr v52 = OSString::withCString("RC2TXDenyCnt");
                                                          if (v52)
                                                          {
                                                            long long v53 = v52;
                                                            OSNumberPtr v54 = OSNumber::withNumber(LOWORD(this[1].OSObject::OSObjectInterface::__vftable[1150].init), 0x10uLL);
                                                            if (!v54)
                                                            {
                                                              if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                                                                goto LABEL_265;
                                                              }
                                                              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                                              if (!CCLogStream::shouldLog()) {
                                                                goto LABEL_265;
                                                              }
                                                              goto LABEL_267;
                                                            }
                                                            OSDictionary::setObject(v5, v53, v54);
                                                            OSStringPtr v55 = OSString::withCString("RC2RXDenyCnt");
                                                            if (v55)
                                                            {
                                                              long long v56 = v55;
                                                              OSNumberPtr v57 = OSNumber::withNumber(WORD1(this[1].OSObject::OSObjectInterface::__vftable[1150].init), 0x10uLL);
                                                              if (v57)
                                                              {
                                                                OSNumberPtr v58 = v57;
                                                                OSDictionary::setObject(v5, v56, v57);
                                                                ((void (*)(const OSObject *))v56->release)(v56);
                                                                ((void (*)(OSNumberPtr))v58->release)(v58);
                                                                goto LABEL_45;
                                                              }
                                                              if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                                                                goto LABEL_265;
                                                              }
                                                              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                                              if (!CCLogStream::shouldLog()) {
                                                                goto LABEL_265;
                                                              }
LABEL_267:
                                                              char v96 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                                              CCLogStream::logAlert(v96, "[dk] %s@%d:Fail to allocate numValue\n");
                                                              goto LABEL_265;
                                                            }
                                                            if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                                                              goto LABEL_265;
                                                            }
                                                            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                                            if (!CCLogStream::shouldLog()) {
                                                              goto LABEL_265;
                                                            }
                                                          }
                                                          else
                                                          {
                                                            if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                                                              goto LABEL_265;
                                                            }
                                                            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                                            if (!CCLogStream::shouldLog()) {
                                                              goto LABEL_265;
                                                            }
                                                          }
                                                        }
                                                        else
                                                        {
                                                          if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                                                            goto LABEL_265;
                                                          }
                                                          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                                          if (!CCLogStream::shouldLog()) {
                                                            goto LABEL_265;
                                                          }
                                                        }
                                                      }
                                                      else
                                                      {
                                                        if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                                                          goto LABEL_265;
                                                        }
                                                        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                                        if (!CCLogStream::shouldLog()) {
                                                          goto LABEL_265;
                                                        }
                                                      }
                                                      int v68 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                                      CCLogStream::logAlert(v68, "[dk] %s@%d:Fail to allocate keyString\n");
LABEL_265:
                                                      long long v3 = v99;
                                                      goto LABEL_266;
                                                    }
                                                    if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                                                      goto LABEL_265;
                                                    }
                                                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                                    if (!CCLogStream::shouldLog()) {
                                                      goto LABEL_265;
                                                    }
                                                    goto LABEL_267;
                                                  }
                                                  if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                                                    goto LABEL_266;
                                                  }
                                                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                                  if (!CCLogStream::shouldLog()) {
                                                    goto LABEL_266;
                                                  }
                                                }
                                                else
                                                {
                                                  if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                                                    goto LABEL_266;
                                                  }
                                                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                                  if (!CCLogStream::shouldLog()) {
                                                    goto LABEL_266;
                                                  }
                                                }
                                                uint64_t v67 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                                CCLogStream::logAlert(v67, "[dk] %s@%d:Fail to allocate keyString\n");
LABEL_266:
                                                __int16 v7 = v101;
                                                goto LABEL_52;
                                              }
                                              if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                                              {
                                                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                                if (CCLogStream::shouldLog())
                                                {
                                                  uint64_t v94 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                                  CCLogStream::logAlert(v94, "[dk] %s@%d:Fail to allocate keyRC2Duration\n", "sendRC2CoexStatsEventCoreAnalytics", 19263);
                                                }
                                              }
                                              OSNumberPtr v38 = 0;
                                            }
                                            else
                                            {
                                              if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                                              {
                                                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                                if (CCLogStream::shouldLog())
                                                {
                                                  int v93 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                                  CCLogStream::logAlert(v93, "[dk] %s@%d:Fail to allocate valueRC2CirtAggregate\n", "sendRC2CoexStatsEventCoreAnalytics", 19259);
                                                }
                                              }
                                              OSNumberPtr v38 = 0;
                                              OSNumberPtr v34 = 0;
                                            }
                                            long long v36 = 0;
                                            goto LABEL_52;
                                          }
                                          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                                          {
                                            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                            if (CCLogStream::shouldLog())
                                            {
                                              int v92 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                              CCLogStream::logAlert(v92, "[dk] %s@%d:Fail to allocate keyRC2CirtAggregate\n", "sendRC2CoexStatsEventCoreAnalytics", 19257);
                                            }
                                          }
                                          OSNumberPtr v38 = 0;
                                          OSNumberPtr v34 = 0;
                                        }
                                        else
                                        {
                                          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                                          {
                                            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                            if (CCLogStream::shouldLog())
                                            {
                                              uint64_t v91 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                              CCLogStream::logAlert(v91, "[dk] %s@%d:Fail to allocate valueC2CritAwdlNan\n", "sendRC2CoexStatsEventCoreAnalytics", 19253);
                                            }
                                          }
                                          OSNumberPtr v38 = 0;
                                          OSNumberPtr v34 = 0;
                                          v102  = 0;
                                        }
                                        long long v36 = 0;
                                        long long v32 = 0;
                                        goto LABEL_52;
                                      }
                                      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                                      {
                                        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                        if (CCLogStream::shouldLog())
                                        {
                                          char v90 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                          CCLogStream::logAlert(v90, "[dk] %s@%d:Fail to allocate keyC2CritAwdlNan\n", "sendRC2CoexStatsEventCoreAnalytics", 19251);
                                        }
                                      }
                                      OSNumberPtr v38 = 0;
                                      OSNumberPtr v34 = 0;
                                      v102  = 0;
                                    }
                                    else
                                    {
                                      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                                      {
                                        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                        if (CCLogStream::shouldLog())
                                        {
                                          int v89 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                          CCLogStream::logAlert(v89, "[dk] %s@%d:Fail to allocate valueRC2CritBT\n", "sendRC2CoexStatsEventCoreAnalytics", 19247);
                                        }
                                      }
                                      OSNumberPtr v38 = 0;
                                      OSNumberPtr v34 = 0;
                                      v102  = 0;
                                      OSNumberPtr v103 = 0;
                                    }
                                    long long v36 = 0;
                                    long long v32 = 0;
                                    long long v29 = 0;
                                    goto LABEL_52;
                                  }
                                  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                                  {
                                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                    if (CCLogStream::shouldLog())
                                    {
                                      int v88 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                      CCLogStream::logAlert(v88, "[dk] %s@%d:Fail to allocate keyRC2CritBT\n", "sendRC2CoexStatsEventCoreAnalytics", 19245);
                                    }
                                  }
                                  OSNumberPtr v38 = 0;
                                  OSNumberPtr v34 = 0;
                                  v102  = 0;
                                  OSNumberPtr v103 = 0;
                                }
                                else
                                {
                                  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                                  {
                                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                    if (CCLogStream::shouldLog())
                                    {
                                      char v87 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                      CCLogStream::logAlert(v87, "[dk] %s@%d:Fail to allocate valueRC2CritHpp\n", "sendRC2CoexStatsEventCoreAnalytics", 19241);
                                    }
                                  }
                                  OSNumberPtr v38 = 0;
                                  OSNumberPtr v34 = 0;
                                  v102  = 0;
                                  OSNumberPtr v103 = 0;
                                  v104  = 0;
                                }
                                long long v36 = 0;
                                long long v32 = 0;
                                long long v29 = 0;
                                long long v26 = 0;
                                goto LABEL_52;
                              }
                              if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                              {
                                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                if (CCLogStream::shouldLog())
                                {
                                  int v84 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                  CCLogStream::logAlert(v84, "[dk] %s@%d:Fail to allocate keyRC2CritBcnLoss\n", "sendRC2CoexStatsEventCoreAnalytics", 19233);
                                }
                              }
                              OSNumberPtr v38 = 0;
                              OSNumberPtr v34 = 0;
                              v102  = 0;
                              OSNumberPtr v103 = 0;
                              v104  = 0;
                              long long v36 = 0;
                              long long v32 = 0;
                              long long v29 = 0;
                              long long v26 = 0;
                              aKey  = 0;
                              OSNumberPtr v106 = 0;
                            }
                            else
                            {
                              if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                              {
                                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                if (CCLogStream::shouldLog())
                                {
                                  int v83 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                  CCLogStream::logAlert(v83, "[dk] %s@%d:Fail to allocate valueCritRateRecovery\n", "sendRC2CoexStatsEventCoreAnalytics", 19229);
                                }
                              }
                              OSNumberPtr v38 = 0;
                              OSNumberPtr v34 = 0;
                              v102  = 0;
                              OSNumberPtr v103 = 0;
                              v104  = 0;
                              long long v36 = 0;
                              long long v32 = 0;
                              long long v29 = 0;
                              long long v26 = 0;
                              aKey  = 0;
                              OSNumberPtr v106 = 0;
                              OSNumberPtr v107 = 0;
                            }
                            v114  = 0;
                            goto LABEL_52;
                          }
                          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                          {
                            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                            if (CCLogStream::shouldLog())
                            {
                              uint64_t v82 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                              CCLogStream::logAlert(v82, "[dk] %s@%d:Fail to allocate keyCritRateRecovery\n", "sendRC2CoexStatsEventCoreAnalytics", 19227);
                            }
                          }
                          OSNumberPtr v38 = 0;
                          OSNumberPtr v34 = 0;
                          v102  = 0;
                          OSNumberPtr v103 = 0;
                          v104  = 0;
                          long long v36 = 0;
                          long long v32 = 0;
                          long long v29 = 0;
                          long long v26 = 0;
                          aKey  = 0;
                          OSNumberPtr v106 = 0;
                          OSNumberPtr v107 = 0;
                        }
                        else
                        {
                          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                          {
                            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                            if (CCLogStream::shouldLog())
                            {
                              char v81 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                              CCLogStream::logAlert(v81, "[dk] %s@%d:Fail to allocate valueRC2CritPhyCal\n", "sendRC2CoexStatsEventCoreAnalytics", 19223);
                            }
                          }
                          OSNumberPtr v38 = 0;
                          OSNumberPtr v34 = 0;
                          v102  = 0;
                          OSNumberPtr v103 = 0;
                          v104  = 0;
                          long long v36 = 0;
                          long long v32 = 0;
                          long long v29 = 0;
                          long long v26 = 0;
                          aKey  = 0;
                          OSNumberPtr v106 = 0;
                          OSNumberPtr v107 = 0;
                          OSNumberPtr v108 = 0;
                        }
                        v114  = 0;
                        v115  = 0;
                        goto LABEL_52;
                      }
                      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                      {
                        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                        if (CCLogStream::shouldLog())
                        {
                          int v80 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                          CCLogStream::logAlert(v80, "[dk] %s@%d:Fail to allocate keyRC2CritPhyCal\n", "sendRC2CoexStatsEventCoreAnalytics", 19221);
                        }
                      }
                      OSNumberPtr v38 = 0;
                      OSNumberPtr v34 = 0;
                      v102  = 0;
                      OSNumberPtr v103 = 0;
                      v104  = 0;
                      long long v36 = 0;
                      long long v32 = 0;
                      long long v29 = 0;
                      long long v26 = 0;
                      aKey  = 0;
                      OSNumberPtr v106 = 0;
                      OSNumberPtr v107 = 0;
                      OSNumberPtr v108 = 0;
                    }
                    else
                    {
                      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                      {
                        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                        if (CCLogStream::shouldLog())
                        {
                          int v79 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                          CCLogStream::logAlert(v79, "[dk] %s@%d:Fail to allocate valueRC2GrantDelay\n", "sendRC2CoexStatsEventCoreAnalytics", 19217);
                        }
                      }
                      OSNumberPtr v38 = 0;
                      OSNumberPtr v34 = 0;
                      v102  = 0;
                      OSNumberPtr v103 = 0;
                      v104  = 0;
                      long long v36 = 0;
                      long long v32 = 0;
                      long long v29 = 0;
                      long long v26 = 0;
                      aKey  = 0;
                      OSNumberPtr v106 = 0;
                      OSNumberPtr v107 = 0;
                      OSNumberPtr v108 = 0;
                      OSNumberPtr v109 = 0;
                    }
                    v114  = 0;
                    v115  = 0;
                    int v116 = 0;
                    goto LABEL_52;
                  }
                  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                  {
                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    if (CCLogStream::shouldLog())
                    {
                      uint64_t v76 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                      CCLogStream::logAlert(v76, "[dk] %s@%d:Fail to allocate keyRC2SuccessTXedCTS2A\n", "sendRC2CoexStatsEventCoreAnalytics", 19209);
                    }
                  }
                  OSNumberPtr v38 = 0;
                  OSNumberPtr v34 = 0;
                  v102  = 0;
                  OSNumberPtr v103 = 0;
                  v104  = 0;
                  long long v36 = 0;
                  long long v32 = 0;
                  long long v29 = 0;
                  long long v26 = 0;
                  aKey  = 0;
                  OSNumberPtr v106 = 0;
                  OSNumberPtr v107 = 0;
                  OSNumberPtr v108 = 0;
                  OSNumberPtr v109 = 0;
                  v114  = 0;
                  v115  = 0;
                  int v116 = 0;
                  int v117 = 0;
                  OSNumberPtr v105 = 0;
                }
                else
                {
                  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                  {
                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    if (CCLogStream::shouldLog())
                    {
                      int v75 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                      CCLogStream::logAlert(v75, "[dk] %s@%d:Fail to allocate valueRC2SuccessAckedPM\n", "sendRC2CoexStatsEventCoreAnalytics", 19205);
                    }
                  }
                  OSNumberPtr v38 = 0;
                  OSNumberPtr v34 = 0;
                  v102  = 0;
                  OSNumberPtr v103 = 0;
                  v104  = 0;
                  long long v36 = 0;
                  long long v32 = 0;
                  long long v29 = 0;
                  long long v26 = 0;
                  aKey  = 0;
                  OSNumberPtr v106 = 0;
                  OSNumberPtr v107 = 0;
                  OSNumberPtr v108 = 0;
                  OSNumberPtr v109 = 0;
                  v114  = 0;
                  v115  = 0;
                  int v116 = 0;
                  int v117 = 0;
                  OSNumberPtr v105 = 0;
                  OSNumberPtr v110 = 0;
                }
                unsigned int v118 = 0;
                goto LABEL_52;
              }
              if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
              {
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if (CCLogStream::shouldLog())
                {
                  int v74 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  CCLogStream::logAlert(v74, "[dk] %s@%d:Fail to allocate keyRC2SuccessAckedPM\n", "sendRC2CoexStatsEventCoreAnalytics", 19203);
                }
              }
              OSNumberPtr v38 = 0;
              OSNumberPtr v34 = 0;
              v102  = 0;
              OSNumberPtr v103 = 0;
              v104  = 0;
              long long v36 = 0;
              long long v32 = 0;
              long long v29 = 0;
              long long v26 = 0;
              aKey  = 0;
              OSNumberPtr v106 = 0;
              OSNumberPtr v107 = 0;
              OSNumberPtr v108 = 0;
              OSNumberPtr v109 = 0;
              v114  = 0;
              v115  = 0;
              int v116 = 0;
              int v117 = 0;
              OSNumberPtr v105 = 0;
              OSNumberPtr v110 = 0;
            }
            else
            {
              if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
              {
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v73 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  CCLogStream::logAlert(v73, "[dk] %s@%d:Fail to allocate valueRC2Grant\n", "sendRC2CoexStatsEventCoreAnalytics", 19199);
                }
              }
              OSNumberPtr v38 = 0;
              OSNumberPtr v34 = 0;
              v102  = 0;
              OSNumberPtr v103 = 0;
              v104  = 0;
              long long v36 = 0;
              long long v32 = 0;
              long long v29 = 0;
              long long v26 = 0;
              aKey  = 0;
              OSNumberPtr v106 = 0;
              OSNumberPtr v107 = 0;
              OSNumberPtr v108 = 0;
              OSNumberPtr v109 = 0;
              v114  = 0;
              v115  = 0;
              int v116 = 0;
              int v117 = 0;
              OSNumberPtr v105 = 0;
              OSNumberPtr v110 = 0;
              OSNumberPtr v111 = 0;
            }
            unsigned int v118 = 0;
            int v119 = 0;
            goto LABEL_52;
          }
          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              char v72 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              CCLogStream::logAlert(v72, "[dk] %s@%d:Fail to allocate keyRC2Grant\n", "sendRC2CoexStatsEventCoreAnalytics", 19197);
            }
          }
          OSNumberPtr v38 = 0;
          OSNumberPtr v34 = 0;
          v102  = 0;
          OSNumberPtr v103 = 0;
          v104  = 0;
          long long v36 = 0;
          long long v32 = 0;
          long long v29 = 0;
          long long v26 = 0;
          aKey  = 0;
          OSNumberPtr v106 = 0;
          OSNumberPtr v107 = 0;
          OSNumberPtr v108 = 0;
          OSNumberPtr v109 = 0;
          v114  = 0;
          v115  = 0;
          int v116 = 0;
          int v117 = 0;
          OSNumberPtr v105 = 0;
          OSNumberPtr v110 = 0;
          OSNumberPtr v111 = 0;
        }
        else
        {
          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              int v71 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              CCLogStream::logAlert(v71, "[dk] %s@%d:Fail to allocate valueRC2Request\n", "sendRC2CoexStatsEventCoreAnalytics", 19193);
            }
          }
          OSNumberPtr v38 = 0;
          OSNumberPtr v34 = 0;
          v102  = 0;
          OSNumberPtr v103 = 0;
          v104  = 0;
          long long v36 = 0;
          long long v32 = 0;
          long long v29 = 0;
          long long v26 = 0;
          aKey  = 0;
          OSNumberPtr v106 = 0;
          OSNumberPtr v107 = 0;
          OSNumberPtr v108 = 0;
          OSNumberPtr v109 = 0;
          v114  = 0;
          v115  = 0;
          int v116 = 0;
          int v117 = 0;
          OSNumberPtr v105 = 0;
          OSNumberPtr v110 = 0;
          OSNumberPtr v111 = 0;
          OSNumberPtr v112 = 0;
        }
        unsigned int v118 = 0;
        int v119 = 0;
        int v120 = 0;
        goto LABEL_52;
      }
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          long long v63 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v63, "[dk] %s@%d:Fail to allocate keyRC2Request\n", "sendRC2CoexStatsEventCoreAnalytics", 19191);
        }
      }
    }
    else
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          int v70 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v70, "[dk] %s@%d:Fail to allocate eventPayload\n", "sendRC2CoexStatsEventCoreAnalytics", 19188);
        }
      }
      long long v5 = 0;
    }
LABEL_104:
    uint64_t result = ((uint64_t (*)(OSString *))v3->release)(v3);
LABEL_105:
    if (v5)
    {
      release  = v5->release;
      return ((uint64_t (*)(OSDictionary *))release)(v5);
    }
    return result;
  }
  uint64_t result = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
  if (result)
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      char v69 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      return CCLogStream::logAlert(v69, "[dk] %s@%d:Fail to allocate eventName\n", "sendRC2CoexStatsEventCoreAnalytics", 19186);
    }
  }
  return result;
}