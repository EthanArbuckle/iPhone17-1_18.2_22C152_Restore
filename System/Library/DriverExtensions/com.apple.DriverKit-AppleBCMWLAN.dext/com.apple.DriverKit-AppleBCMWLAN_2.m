uint64_t AppleBCMWLANCore::parseEventLogRecordRC1CoexStatsPerSlice(AppleBCMWLANCore *a1, OSData *a2, int a3)
{
  uint64_t updated;
  AppleBCMWLANIOReporting *v7;
  uint64_t v8;
  CCLogStream *v9;
  CCLogStream *v11;
  CCLogStream *v12;

  if (a3 >= 2)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v12, "[dk] %s@%d:Invalid sliceIndex %d\n", "parseEventLogRecordRC1CoexStatsPerSlice", 19374, a3);
      }
    }
    return 0;
  }
  updated = AppleBCMWLANCore::updateRC1CoexStatsReport(a1, a2, a3);
  if (!updated)
  {
    v7 = *(AppleBCMWLANIOReporting **)(*((void *)a1 + 9) + 5520);
    if (v7)
    {
      v8 = AppleBCMWLANIOReportingPerSlice::reportRC1Coex(v7, a2, a3);
      if (v8)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logAlert(v9, "[dk] %s@%d:Failed reportRC1Coex\n");
          }
        }
      }
      return v8;
    }
    return 0;
  }
  v8 = updated;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      CCLogStream::logAlert(v11, "[dk] %s@%d:Failed updateRC1CoexStatsReport\n");
    }
  }
  return v8;
}

uint64_t AppleBCMWLANCore::updateRC1CoexStatsReport(AppleBCMWLANCore *a1, OSData *this, int a3)
{
  if (a3)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *, OSData *))(*(void *)a1 + 1848))(a1, this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logInfo(v9, "[dk] %s@%d:Unexpected slice index %d\n", "updateRC1CoexStatsReport", 19938, a3);
      }
    }
    return 0;
  }
  if (OSData::getLength(this) <= 2)
  {
    uint64_t v6 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        OSData::getLength(this);
        CCLogStream::logAlert(v10, "[dk] %s@%d:Unexpected RC1 Coex Stats length %d\n");
      }
    }
  }
  else
  {
    unsigned int v5 = *(unsigned __int16 *)OSData::getBytesNoCopy(this);
    if (v5 < 6)
    {
      switch(v5)
      {
        case 1u:
          AppleBCMWLANCore::updateRC1CoexStatsReportV1(a1, this);
          break;
        case 2u:
          AppleBCMWLANCore::updateRC1CoexStatsReportV2(a1, this);
          break;
        case 3u:
          AppleBCMWLANCore::updateRC1CoexStatsReportV3(a1, this);
          break;
        case 4u:
          AppleBCMWLANCore::updateRC1CoexStatsReportV4(a1, this);
          break;
        case 5u:
          AppleBCMWLANCore::updateRC1CoexStatsReportV5(a1, this);
          break;
        default:
          return 0;
      }
      return 0;
    }
    uint64_t v6 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v11, "[dk] %s@%d:Invalid RC1 Coex stats version - %u\n");
      }
    }
  }
  return v6;
}

uint64_t AppleBCMWLANCore::parseEventLogRecordLostMpduPerSlice(void *a1, OSData *a2, uint64_t a3)
{
  int StatsTimerIntervalMS = AppleBCMWLANLQM::getStatsTimerIntervalMS(*(AppleBCMWLANLQM **)(a1[9] + 5608));
  if ((int)a3 >= 2)
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        v8 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v8, "[dk] %s@%d:Invalid sliceIndex %d\n", "parseEventLogRecordLostMpduPerSlice", 19393, a3);
      }
    }
    return 0;
  }
  if (*(void *)(a1[9] + 8 * a3 + 30960) <= (unint64_t)(StatsTimerIntervalMS - 200)) {
    return 0;
  }
  return AppleBCMWLANCore::updateLostMpduStatsReport(a1, a2, a3);
}

uint64_t AppleBCMWLANCore::updateLostMpduStatsReport(void *a1, OSData *this, uint64_t a3)
{
  if (OSData::getLength(this) == 68)
  {
    BytesNoCopy = OSData::getBytesNoCopy(this);
    long long v24 = *BytesNoCopy;
    long long v8 = BytesNoCopy[2];
    long long v7 = BytesNoCopy[3];
    long long v9 = BytesNoCopy[1];
    int v28 = *((_DWORD *)BytesNoCopy + 16);
    long long v26 = v8;
    long long v27 = v7;
    long long v25 = v9;
    if ((unsigned __int16)v24 >= 2u)
    {
      uint64_t v17 = 3758097084;
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          v21 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logAlert(v21, "[dk] %s@%d:Invalid lost MPDU stats version - %u\n");
        }
      }
    }
    else
    {
      if (*(_DWORD *)(a1[9] + 30828))
      {
        if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
        {
          (*(void (**)(void *))(*a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            v22 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
            CCLogStream::logInfo(v22, "[dk] %s@%d:Lost MPDU BA TID:Value -> 0:%u, 1:%u, 5:%u, 6:%u\n", "updateLostMpduStatsReport", 19443, DWORD1(v24), DWORD2(v24), DWORD2(v25), HIDWORD(v25));
          }
        }
        if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
        {
          (*(void (**)(void *))(*a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            v23 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
            CCLogStream::logInfo(v23, "[dk] %s@%d:Lost MPDU NonBA TID:Value -> 0:%u, 1:%u, 5:%u, 6:%u\n", "updateLostMpduStatsReport", 19444, DWORD1(v26), DWORD2(v26), DWORD2(v27), HIDWORD(v27));
          }
        }
      }
      uint64_t v10 = 0;
      uint64_t v11 = 68 * a3 + 29956;
      do
      {
        int v12 = *(_DWORD *)((char *)&v24 + v10 + 4);
        v13 = (_DWORD *)(a1[9] + v11 + v10);
        int v14 = *(_DWORD *)((char *)&v26 + v10 + 4);
        int v15 = v14 - v13[8];
        v13[70] = (v12 - *v13) & ~((v12 - *v13) >> 31);
        *(_DWORD *)(a1[9] + 68 * a3 + 30268 + v10) = v15 & ~(v15 >> 31);
        *(_DWORD *)(a1[9] + v11 + v10) = v12;
        *(_DWORD *)(a1[9] + 68 * a3 + 29988 + v10) = v14;
        v10 += 4;
      }
      while (v10 != 32);
      v16 = *(AppleBCMWLANBssManager **)(a1[9] + 5520);
      if (v16)
      {
        uint64_t v17 = AppleBCMWLANIOReportingPerSlice::reportRxMpduLost(v16, (unsigned int *)&v24, a3);
        if (v17)
        {
          if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
          {
            (*(void (**)(void *))(*a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              v18 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
              CCLogStream::logAlert(v18, "[dk] %s@%d:Failed reportRxMpduLost\n");
            }
          }
        }
      }
      else
      {
        return 0;
      }
    }
  }
  else
  {
    uint64_t v17 = 3758097084;
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        v20 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        OSData::getLength(this);
        CCLogStream::logAlert(v20, "[dk] %s@%d:sizeof(lostMpdus) %ld payload->getLength() %d\n");
      }
    }
  }
  return v17;
}

uint64_t AppleBCMWLANCore::parseEventLogRecordWmeTxMpduPerSlice(void *a1, OSData *a2, uint64_t a3)
{
  int StatsTimerIntervalMS = AppleBCMWLANLQM::getStatsTimerIntervalMS(*(AppleBCMWLANLQM **)(a1[9] + 5608));
  if ((int)a3 >= 2)
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        long long v8 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v8, "[dk] %s@%d:Invalid sliceIndex %d\n", "parseEventLogRecordWmeTxMpduPerSlice", 19407, a3);
      }
    }
    return 0;
  }
  if (*(void *)(a1[9] + 8 * a3 + 30960) <= (unint64_t)(StatsTimerIntervalMS - 200)) {
    return 0;
  }
  return AppleBCMWLANCore::updateWmeTxMpduStatsReport(a1, a2, a3);
}

uint64_t AppleBCMWLANCore::updateWmeTxMpduStatsReport(void *a1, OSData *this, uint64_t a3)
{
  if (OSData::getLength(this) == 36)
  {
    BytesNoCopy = OSData::getBytesNoCopy(this);
    int v7 = BytesNoCopy[8];
    long long v8 = *((_OWORD *)BytesNoCopy + 1);
    long long v19 = *(_OWORD *)BytesNoCopy;
    long long v20 = v8;
    int v21 = v7;
    if ((unsigned __int16)v19 >= 2u)
    {
      uint64_t v13 = 3758097084;
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v17 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logAlert(v17, "[dk] %s@%d:Invalid WME Tx stats version - %u\n");
        }
      }
    }
    else
    {
      if (*(_DWORD *)(a1[9] + 30828))
      {
        if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
        {
          (*(void (**)(void *))(*a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            v18 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
            CCLogStream::logInfo(v18, "[dk] %s@%d:WME Tx TID:Value -> 0:%u, 1:%u, 5:%u, 6:%u\n", "updateWmeTxMpduStatsReport", 19480, DWORD1(v19), DWORD2(v19), DWORD2(v20), HIDWORD(v20));
          }
        }
      }
      uint64_t v9 = 0;
      uint64_t v10 = 36 * a3 + 30092;
      do
      {
        int v11 = *(_DWORD *)((char *)&v19 + v9 + 4);
        *(_DWORD *)(a1[9] + v10 + v9 + 280) = (v11 - *(_DWORD *)(a1[9] + v10 + v9)) & ~((v11
                                                                                       - *(_DWORD *)(a1[9] + v10 + v9)) >> 31);
        *(_DWORD *)(a1[9] + v10 + v9) = v11;
        v9 += 4;
      }
      while (v9 != 32);
      int v12 = *(AppleBCMWLANBssManager **)(a1[9] + 5520);
      if (v12)
      {
        uint64_t v13 = AppleBCMWLANIOReportingPerSlice::reportTxMpduWme(v12, (unsigned int *)&v19, a3);
        if (v13)
        {
          if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
          {
            (*(void (**)(void *))(*a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              int v14 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
              CCLogStream::logAlert(v14, "[dk] %s@%d:Failed reportTxMpduWme\n");
            }
          }
        }
      }
      else
      {
        return 0;
      }
    }
  }
  else
  {
    uint64_t v13 = 3758097084;
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        v16 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        OSData::getLength(this);
        CCLogStream::logAlert(v16, "[dk] %s@%d:sizeof(wmeTx) %ld payload->getLength() %d\n");
      }
    }
  }
  return v13;
}

uint64_t AppleBCMWLANCore::parseEventLogRecordWmeRxMpduPerSlice(void *a1, OSData *a2, uint64_t a3)
{
  int StatsTimerIntervalMS = AppleBCMWLANLQM::getStatsTimerIntervalMS(*(AppleBCMWLANLQM **)(a1[9] + 5608));
  if ((int)a3 >= 2)
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        long long v8 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v8, "[dk] %s@%d:Invalid sliceIndex %d\n", "parseEventLogRecordWmeRxMpduPerSlice", 19420, a3);
      }
    }
    return 0;
  }
  if (*(void *)(a1[9] + 8 * a3 + 30960) <= (unint64_t)(StatsTimerIntervalMS - 200)) {
    return 0;
  }
  return AppleBCMWLANCore::updateWmeRxMpduStatsReport(a1, a2, a3);
}

uint64_t AppleBCMWLANCore::updateWmeRxMpduStatsReport(void *a1, OSData *this, uint64_t a3)
{
  if (OSData::getLength(this) == 36)
  {
    BytesNoCopy = OSData::getBytesNoCopy(this);
    int v7 = BytesNoCopy[8];
    long long v8 = *((_OWORD *)BytesNoCopy + 1);
    long long v19 = *(_OWORD *)BytesNoCopy;
    long long v20 = v8;
    int v21 = v7;
    if ((unsigned __int16)v19 >= 2u)
    {
      uint64_t v13 = 3758097084;
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v17 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logAlert(v17, "[dk] %s@%d:Invalid WME Rx stats version - %u\n");
        }
      }
    }
    else
    {
      if (*(_DWORD *)(a1[9] + 30828))
      {
        if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
        {
          (*(void (**)(void *))(*a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            v18 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
            CCLogStream::logInfo(v18, "[dk] %s@%d:WME Rx TID:Value -> 0:%u, 1:%u, 5:%u, 6:%u\n", "updateWmeRxMpduStatsReport", 19513, DWORD1(v19), DWORD2(v19), DWORD2(v20), HIDWORD(v20));
          }
        }
      }
      uint64_t v9 = 0;
      uint64_t v10 = 36 * a3 + 30164;
      do
      {
        int v11 = *(_DWORD *)((char *)&v19 + v9 + 4);
        *(_DWORD *)(a1[9] + v10 + v9 + 280) = (v11 - *(_DWORD *)(a1[9] + v10 + v9)) & ~((v11
                                                                                       - *(_DWORD *)(a1[9] + v10 + v9)) >> 31);
        *(_DWORD *)(a1[9] + v10 + v9) = v11;
        v9 += 4;
      }
      while (v9 != 32);
      int v12 = *(AppleBCMWLANBssManager **)(a1[9] + 5520);
      if (v12)
      {
        uint64_t v13 = AppleBCMWLANIOReportingPerSlice::reportRxMpduWme(v12, (unsigned int *)&v19, a3);
        if (v13)
        {
          if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
          {
            (*(void (**)(void *))(*a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              int v14 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
              CCLogStream::logAlert(v14, "[dk] %s@%d:Failed reportRxMpduWme\n");
            }
          }
        }
      }
      else
      {
        return 0;
      }
    }
  }
  else
  {
    uint64_t v13 = 3758097084;
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        v16 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        OSData::getLength(this);
        CCLogStream::logAlert(v16, "[dk] %s@%d:sizeof(wmeRx) %ld payload->getLength() %d\n");
      }
    }
  }
  return v13;
}

uint64_t AppleBCMWLANCore::updateRC1CoexStatsReportV1(AppleBCMWLANCore *this, OSData *a2)
{
  int v35 = -1431655766;
  if (OSData::getLength(a2) == 40)
  {
    *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v52 = v4;
    long long v53 = v4;
    long long v50 = v4;
    long long v51 = v4;
    long long v48 = v4;
    long long v49 = v4;
    long long v46 = v4;
    long long v47 = v4;
    long long v44 = v4;
    long long v45 = v4;
    long long v42 = v4;
    long long v43 = v4;
    long long v40 = v4;
    long long v41 = v4;
    *(_OWORD *)__str = v4;
    long long v39 = v4;
    BytesNoCopy = OSData::getBytesNoCopy(a2);
    if (BytesNoCopy[1] == 40)
    {
      __int16 v6 = BytesNoCopy[19];
      __int16 v7 = BytesNoCopy[18];
      unsigned int v8 = *((_DWORD *)BytesNoCopy + 8);
      uint64_t v9 = *((void *)BytesNoCopy + 3);
      unsigned int v11 = *((_DWORD *)BytesNoCopy + 4);
      unsigned int v10 = *((_DWORD *)BytesNoCopy + 5);
      *(void *)&long long v13 = *((void *)BytesNoCopy + 1);
      int v12 = *((_DWORD *)BytesNoCopy + 1);
      *(_DWORD *)(*((void *)this + 9) + 18408) += v13;
      *(_DWORD *)(*((void *)this + 9) + 18412) += DWORD1(v13);
      *((void *)&v13 + 1) = v9;
      *(_DWORD *)(*((void *)this + 9) + 18416) += v9;
      *(_DWORD *)(*((void *)this + 9) + 18420) += HIDWORD(v9);
      *(unsigned char *)(*((void *)this + 9) + 18404) = 1;
      *(_DWORD *)(*((void *)this + 9) + 18436) = v12;
      *(_DWORD *)(*((void *)this + 9) + 18440) += v13;
      *(_DWORD *)(*((void *)this + 9) + 18444) += DWORD1(v13);
      uint64_t v14 = *((void *)this + 9);
      if (*(_DWORD *)(v14 + 18448) > v11) {
        unsigned int v11 = *(_DWORD *)(v14 + 18448);
      }
      *(_DWORD *)(v14 + 18448) = v11;
      uint64_t v15 = *((void *)this + 9);
      if (*(_DWORD *)(v15 + 18452) > v10) {
        unsigned int v10 = *(_DWORD *)(v15 + 18452);
      }
      *(_DWORD *)(v15 + 18452) = v10;
      *(_DWORD *)(*((void *)this + 9) + 18456) += v9;
      *(_DWORD *)(*((void *)this + 9) + 18460) += HIDWORD(v9);
      uint64_t v16 = *((void *)this + 9);
      if (*(_DWORD *)(v16 + 18464) > v8) {
        unsigned int v8 = *(_DWORD *)(v16 + 18464);
      }
      *(_DWORD *)(v16 + 18464) = v8;
      long long v36 = v13;
      *(_WORD *)(*((void *)this + 9) + 18468) |= v7;
      uint64_t v17 = *((void *)this + 9);
      __int16 v18 = *(_WORD *)(v17 + 18470);
      LOBYTE(v35) = 1;
      *(_WORD *)(v17 + 18470) = v18 | v6;
      mach_continuous_time();
      absolutetime_to_nanoseconds();
      int v37 = 1338014025;
      if (*(void *)(*((void *)this + 9) + 18436))
      {
        snprintf(__str, 0x100uLL, "RC1 Coex Stats: Mode=%u, Request=%u RC1Duration=%uus RC1DutyCycle=%u RC1MaxDuration=%u WlanCritCnt=%u WlanCritDur=%u WlanCritMaxDur=%u WlanCritEvtBitmap=0x%x WlanCritMaxEvtType=%u [%llums]\n", *(_DWORD *)(*((void *)this + 9) + 18436), *(_DWORD *)(*((void *)this + 9) + 18440), *(_DWORD *)(*((void *)this + 9) + 18444), *(_DWORD *)(*((void *)this + 9) + 18448), *(_DWORD *)(*((void *)this + 9) + 18452), *(_DWORD *)(*((void *)this + 9) + 18456), *(_DWORD *)(*((void *)this + 9) + 18460), *(_DWORD *)(*((void *)this + 9) + 18464), *(unsigned __int16 *)(*((void *)this + 9) + 18468), *(unsigned __int16 *)(*((void *)this + 9) + 18470), 0xB2F4FC07949);
        uint64_t v19 = *((void *)this + 9);
        if ((*(_DWORD *)(v19 + 980) - 1) > 1)
        {
          long long v20 = (_OWORD *)(v19 + 31037);
          long long v21 = v51;
          v20[156] = v50;
          v20[157] = v21;
          long long v22 = v53;
          v20[158] = v52;
          v20[159] = v22;
          long long v23 = v47;
          v20[152] = v46;
          v20[153] = v23;
          long long v24 = v49;
          v20[154] = v48;
          v20[155] = v24;
          long long v25 = v43;
          v20[148] = v42;
          v20[149] = v25;
          long long v26 = v45;
          v20[150] = v44;
          v20[151] = v26;
          long long v27 = v39;
          v20[144] = *(_OWORD *)__str;
          v20[145] = v27;
          long long v28 = v41;
          v20[146] = v40;
          v20[147] = v28;
        }
        else
        {
          io80211_os_log();
        }
      }
      *(void *)(*((void *)this + 9) + 18848) = mach_continuous_time();
      uint64_t v29 = *((void *)this + 9);
      *(_OWORD *)(v29 + 18432) = 0u;
      *(_OWORD *)(v29 + 18448) = 0u;
      *(void *)(v29 + 18464) = 0;
      uint64_t v30 = *((void *)this + 9);
      v31 = *(IO80211SkywalkInterface **)(v30 + 11304);
      if (v31 && *(unsigned char *)(v30 + 18404)) {
        IO80211Controller::postMessage(this, v31, 0xA1u, &v35, 0x18uLL, 1);
      }
    }
    else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        v34 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v34, "[dk] %s@%d:sizeof(rc1CoexStatsV1) %ld rc1CoexStatsV1.len() %d\n");
      }
    }
  }
  else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      v33 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      OSData::getLength(a2);
      CCLogStream::logAlert(v33, "[dk] %s@%d:sizeof(rc1CoexStatsV1) %ld payload->getLength() %d\n");
    }
  }
  return 0;
}

uint64_t AppleBCMWLANCore::updateRC1CoexStatsReportV2(AppleBCMWLANCore *this, OSData *a2)
{
  int v39 = -1431655766;
  if (OSData::getLength(a2) == 48)
  {
    *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v56 = v4;
    long long v57 = v4;
    long long v54 = v4;
    long long v55 = v4;
    long long v52 = v4;
    long long v53 = v4;
    long long v50 = v4;
    long long v51 = v4;
    long long v48 = v4;
    long long v49 = v4;
    long long v46 = v4;
    long long v47 = v4;
    long long v44 = v4;
    long long v45 = v4;
    *(_OWORD *)__str = v4;
    long long v43 = v4;
    BytesNoCopy = OSData::getBytesNoCopy(a2);
    if (BytesNoCopy[1] == 48)
    {
      __int16 v6 = BytesNoCopy[23];
      __int16 v7 = BytesNoCopy[22];
      __int16 v8 = BytesNoCopy[21];
      __int16 v9 = BytesNoCopy[20];
      __int16 v10 = BytesNoCopy[19];
      __int16 v11 = BytesNoCopy[18];
      unsigned int v12 = *((_DWORD *)BytesNoCopy + 8);
      uint64_t v13 = *((void *)BytesNoCopy + 3);
      unsigned int v15 = *((_DWORD *)BytesNoCopy + 4);
      unsigned int v14 = *((_DWORD *)BytesNoCopy + 5);
      *(void *)&long long v17 = *((void *)BytesNoCopy + 1);
      int v16 = *((_DWORD *)BytesNoCopy + 1);
      *(_DWORD *)(*((void *)this + 9) + 18408) += v17;
      *(_DWORD *)(*((void *)this + 9) + 18412) += DWORD1(v17);
      *((void *)&v17 + 1) = v13;
      *(_DWORD *)(*((void *)this + 9) + 18416) += v13;
      *(_DWORD *)(*((void *)this + 9) + 18420) += HIDWORD(v13);
      *(unsigned char *)(*((void *)this + 9) + 18404) = 1;
      *(_DWORD *)(*((void *)this + 9) + 18476) = v16;
      *(_DWORD *)(*((void *)this + 9) + 18480) += v17;
      *(_DWORD *)(*((void *)this + 9) + 18484) += DWORD1(v17);
      uint64_t v18 = *((void *)this + 9);
      if (*(_DWORD *)(v18 + 18488) > v15) {
        unsigned int v15 = *(_DWORD *)(v18 + 18488);
      }
      *(_DWORD *)(v18 + 18488) = v15;
      uint64_t v19 = *((void *)this + 9);
      if (*(_DWORD *)(v19 + 18492) > v14) {
        unsigned int v14 = *(_DWORD *)(v19 + 18492);
      }
      *(_DWORD *)(v19 + 18492) = v14;
      *(_DWORD *)(*((void *)this + 9) + 18496) += v13;
      *(_DWORD *)(*((void *)this + 9) + 18500) += HIDWORD(v13);
      uint64_t v20 = *((void *)this + 9);
      if (*(_DWORD *)(v20 + 18504) > v12) {
        unsigned int v12 = *(_DWORD *)(v20 + 18504);
      }
      *(_DWORD *)(v20 + 18504) = v12;
      *(_WORD *)(*((void *)this + 9) + 18508) |= v11;
      *(_WORD *)(*((void *)this + 9) + 18510) |= v10;
      *(_WORD *)(*((void *)this + 9) + 18512) += v9;
      *(_WORD *)(*((void *)this + 9) + 18514) += v8;
      long long v40 = v17;
      *(_WORD *)(*((void *)this + 9) + 18516) += v7;
      uint64_t v21 = *((void *)this + 9);
      __int16 v22 = *(_WORD *)(v21 + 18518);
      LOBYTE(v39) = 1;
      *(_WORD *)(v21 + 18518) = v22 + v6;
      mach_continuous_time();
      absolutetime_to_nanoseconds();
      int v41 = 1338014025;
      if (*(void *)(*((void *)this + 9) + 18476))
      {
        snprintf(__str, 0x100uLL, "RC1 Coex Stats: Mode=%u, Request=%u RC1Duration=%uus RC1DutyCycle=%u RC1MaxDuration=%u WlanCritCnt=%u WlanCritDur=%u WlanCritMaxDur=%u WlanCritEvtBitmap=0x%x WlanCritMaxEvtType=%u DataStall=%u RC1DenyDS=%u RC1DenyDurDS=%u SucRR=%u [%llums]\n", *(_DWORD *)(*((void *)this + 9) + 18476), *(_DWORD *)(*((void *)this + 9) + 18480), *(_DWORD *)(*((void *)this + 9) + 18484), *(_DWORD *)(*((void *)this + 9) + 18488), *(_DWORD *)(*((void *)this + 9) + 18492), *(_DWORD *)(*((void *)this + 9) + 18496), *(_DWORD *)(*((void *)this + 9) + 18500), *(_DWORD *)(*((void *)this + 9) + 18504), *(unsigned __int16 *)(*((void *)this + 9) + 18508), *(unsigned __int16 *)(*((void *)this + 9) + 18510), *(unsigned __int16 *)(*((void *)this + 9) + 18512), *(unsigned __int16 *)(*((void *)this + 9) + 18514), *(unsigned __int16 *)(*((void *)this + 9) + 18516), *(unsigned __int16 *)(*((void *)this + 9) + 18518),
          0xB2F4FC07949);
        uint64_t v23 = *((void *)this + 9);
        if ((*(_DWORD *)(v23 + 980) - 1) > 1)
        {
          long long v24 = (_OWORD *)(v23 + 31037);
          long long v25 = v55;
          v24[156] = v54;
          v24[157] = v25;
          long long v26 = v57;
          v24[158] = v56;
          v24[159] = v26;
          long long v27 = v51;
          v24[152] = v50;
          v24[153] = v27;
          long long v28 = v53;
          v24[154] = v52;
          v24[155] = v28;
          long long v29 = v47;
          v24[148] = v46;
          v24[149] = v29;
          long long v30 = v49;
          v24[150] = v48;
          v24[151] = v30;
          long long v31 = v43;
          v24[144] = *(_OWORD *)__str;
          v24[145] = v31;
          long long v32 = v45;
          v24[146] = v44;
          v24[147] = v32;
        }
        else
        {
          io80211_os_log();
        }
      }
      *(void *)(*((void *)this + 9) + 18848) = mach_continuous_time();
      v33 = (_OWORD *)(*((void *)this + 9) + 18472);
      _OWORD *v33 = 0u;
      v33[1] = 0u;
      v33[2] = 0u;
      uint64_t v34 = *((void *)this + 9);
      int v35 = *(IO80211SkywalkInterface **)(v34 + 11304);
      if (v35 && *(unsigned char *)(v34 + 18404)) {
        IO80211Controller::postMessage(this, v35, 0xA1u, &v39, 0x18uLL, 1);
      }
    }
    else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        v38 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v38, "[dk] %s@%d:sizeof(rc1CoexStatsV2) %ld rc1CoexStatsV2.len() %d\n");
      }
    }
  }
  else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      int v37 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      OSData::getLength(a2);
      CCLogStream::logAlert(v37, "[dk] %s@%d:sizeof(rc1CoexStatsV2) %ld payload->getLength() %d\n");
    }
  }
  return 0;
}

uint64_t AppleBCMWLANCore::updateRC1CoexStatsReportV3(AppleBCMWLANCore *this, OSData *a2)
{
  int v59 = -1431655766;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v76 = v4;
  long long v77 = v4;
  long long v74 = v4;
  long long v75 = v4;
  long long v72 = v4;
  long long v73 = v4;
  long long v70 = v4;
  long long v71 = v4;
  long long v68 = v4;
  long long v69 = v4;
  long long v66 = v4;
  long long v67 = v4;
  long long v64 = v4;
  long long v65 = v4;
  *(_OWORD *)__str = v4;
  long long v63 = v4;
  if (OSData::getLength(a2) == 72)
  {
    BytesNoCopy = OSData::getBytesNoCopy(a2);
    if (*((_WORD *)BytesNoCopy + 1) == 72)
    {
      char v6 = BytesNoCopy[70];
      char v7 = BytesNoCopy[69];
      char v8 = BytesNoCopy[68];
      char v9 = BytesNoCopy[67];
      char v10 = BytesNoCopy[66];
      __int16 v11 = *((_WORD *)BytesNoCopy + 32);
      unsigned int v13 = *((_DWORD *)BytesNoCopy + 14);
      unsigned int v12 = *((_DWORD *)BytesNoCopy + 15);
      int v15 = *((_DWORD *)BytesNoCopy + 12);
      int v14 = *((_DWORD *)BytesNoCopy + 13);
      __int16 v16 = *((_WORD *)BytesNoCopy + 23);
      __int16 v17 = *((_WORD *)BytesNoCopy + 22);
      __int16 v18 = *((_WORD *)BytesNoCopy + 21);
      __int16 v19 = *((_WORD *)BytesNoCopy + 20);
      __int16 v20 = *((_WORD *)BytesNoCopy + 19);
      __int16 v21 = *((_WORD *)BytesNoCopy + 18);
      unsigned int v22 = *((_DWORD *)BytesNoCopy + 8);
      uint64_t v23 = *((void *)BytesNoCopy + 3);
      unsigned int v25 = *((_DWORD *)BytesNoCopy + 4);
      unsigned int v24 = *((_DWORD *)BytesNoCopy + 5);
      *(void *)&long long v27 = *((void *)BytesNoCopy + 1);
      int v26 = *((_DWORD *)BytesNoCopy + 1);
      *(_DWORD *)(*((void *)this + 9) + 18408) += v27;
      *(_DWORD *)(*((void *)this + 9) + 18412) += DWORD1(v27);
      *((void *)&v27 + 1) = v23;
      *(_DWORD *)(*((void *)this + 9) + 18416) += v23;
      *(_DWORD *)(*((void *)this + 9) + 18420) += HIDWORD(v23);
      *(unsigned char *)(*((void *)this + 9) + 18404) = 1;
      *(_DWORD *)(*((void *)this + 9) + 18524) = v26;
      *(_DWORD *)(*((void *)this + 9) + 18528) += v27;
      *(_DWORD *)(*((void *)this + 9) + 18532) += DWORD1(v27);
      uint64_t v28 = *((void *)this + 9);
      if (*(_DWORD *)(v28 + 18536) > v25) {
        unsigned int v25 = *(_DWORD *)(v28 + 18536);
      }
      *(_DWORD *)(v28 + 18536) = v25;
      uint64_t v29 = *((void *)this + 9);
      if (*(_DWORD *)(v29 + 18540) > v24) {
        unsigned int v24 = *(_DWORD *)(v29 + 18540);
      }
      *(_DWORD *)(v29 + 18540) = v24;
      *(_DWORD *)(*((void *)this + 9) + 18544) += v23;
      *(_DWORD *)(*((void *)this + 9) + 18548) += HIDWORD(v23);
      uint64_t v30 = *((void *)this + 9);
      if (*(_DWORD *)(v30 + 18552) > v22) {
        unsigned int v22 = *(_DWORD *)(v30 + 18552);
      }
      *(_DWORD *)(v30 + 18552) = v22;
      *(_WORD *)(*((void *)this + 9) + 18556) |= v21;
      *(_WORD *)(*((void *)this + 9) + 18558) |= v20;
      *(_WORD *)(*((void *)this + 9) + 18560) += v19;
      *(_WORD *)(*((void *)this + 9) + 18562) += v18;
      *(_WORD *)(*((void *)this + 9) + 18564) += v17;
      *(_WORD *)(*((void *)this + 9) + 18566) += v16;
      *(_DWORD *)(*((void *)this + 9) + 18568) += v15;
      long long v60 = v27;
      *(_DWORD *)(*((void *)this + 9) + 18572) += v14;
      uint64_t v31 = *((void *)this + 9);
      if (*(_DWORD *)(v31 + 18576) > v13) {
        unsigned int v13 = *(_DWORD *)(v31 + 18576);
      }
      *(_DWORD *)(v31 + 18576) = v13;
      uint64_t v32 = *((void *)this + 9);
      if (*(_DWORD *)(v32 + 18580) > v12) {
        unsigned int v12 = *(_DWORD *)(v32 + 18580);
      }
      *(_DWORD *)(v32 + 18580) = v12;
      LOBYTE(v59) = 1;
      *(_WORD *)(*((void *)this + 9) + 18584) += v11;
      *(unsigned char *)(*((void *)this + 9) + 18586) = v10;
      *(unsigned char *)(*((void *)this + 9) + 18587) = v9;
      *(unsigned char *)(*((void *)this + 9) + 18588) = v8;
      *(unsigned char *)(*((void *)this + 9) + 18589) = v7;
      *(unsigned char *)(*((void *)this + 9) + 18590) = v6;
      mach_continuous_time();
      absolutetime_to_nanoseconds();
      int v61 = 1338014025;
      if (*(void *)(*((void *)this + 9) + 18524))
      {
        snprintf(__str, 0x100uLL, "RC1 Coex Stats3: Mode=%u, Request=%u RC1Duration=%uus RC1DutyCycle=%u RC1MaxDuration=%u WlanCritCnt=%u WlanCritDur=%u WlanCritMaxDur=%u,WlanCritEvtBitmap=0x%x WlanCritMaxEvtType=%u DataStall=%u RC1DenyDS=%u RC1DenyDurDS=%u SucRR=%u \n", *(_DWORD *)(*((void *)this + 9) + 18524), *(_DWORD *)(*((void *)this + 9) + 18528), *(_DWORD *)(*((void *)this + 9) + 18532), *(_DWORD *)(*((void *)this + 9) + 18536), *(_DWORD *)(*((void *)this + 9) + 18540), *(_DWORD *)(*((void *)this + 9) + 18544), *(_DWORD *)(*((void *)this + 9) + 18548), *(_DWORD *)(*((void *)this + 9) + 18552), *(unsigned __int16 *)(*((void *)this + 9) + 18556), *(unsigned __int16 *)(*((void *)this + 9) + 18558), *(unsigned __int16 *)(*((void *)this + 9) + 18560), *(unsigned __int16 *)(*((void *)this + 9) + 18562), *(unsigned __int16 *)(*((void *)this + 9) + 18564), *(unsigned __int16 *)(*((void *)this + 9) + 18566));
        uint64_t v33 = *((void *)this + 9);
        if ((*(_DWORD *)(v33 + 980) - 1) > 1)
        {
          uint64_t v34 = (_OWORD *)(v33 + 31037);
          long long v35 = v75;
          v34[156] = v74;
          v34[157] = v35;
          long long v36 = v77;
          v34[158] = v76;
          v34[159] = v36;
          long long v37 = v71;
          v34[152] = v70;
          v34[153] = v37;
          long long v38 = v73;
          v34[154] = v72;
          v34[155] = v38;
          long long v39 = v67;
          v34[148] = v66;
          v34[149] = v39;
          long long v40 = v69;
          v34[150] = v68;
          v34[151] = v40;
          long long v41 = v63;
          v34[144] = *(_OWORD *)__str;
          v34[145] = v41;
          long long v42 = v65;
          v34[146] = v64;
          v34[147] = v42;
        }
        else
        {
          io80211_os_log();
        }
        snprintf(__str, 0x100uLL, "RC1 Coex Stats3: NewRequest=%u NewRC1Duration=%uus NewRC1DutyCycle=%u NewRC1MaxDuration=%u rc1_msg73_cnt=%u rc1_last_msg73_pl[0]=%u rc1_last_msg73_pl[1]=%u rc1_last_msg73_pl[2]=0x%x rc1_last_msg73_pl[3]=%u rc1_last_msg73_pl[4]=%u [%llums]\n", *(_DWORD *)(*((void *)this + 9) + 18568), *(_DWORD *)(*((void *)this + 9) + 18572), *(_DWORD *)(*((void *)this + 9) + 18576), *(_DWORD *)(*((void *)this + 9) + 18580), *(unsigned __int16 *)(*((void *)this + 9) + 18584), *(unsigned __int8 *)(*((void *)this + 9) + 18586), *(unsigned __int8 *)(*((void *)this + 9) + 18587), *(unsigned __int8 *)(*((void *)this + 9) + 18588), *(unsigned __int8 *)(*((void *)this + 9) + 18589), *(unsigned __int8 *)(*((void *)this + 9) + 18590), 0xB2F4FC07949);
        uint64_t v43 = *((void *)this + 9);
        if ((*(_DWORD *)(v43 + 980) - 1) > 1)
        {
          long long v44 = (_OWORD *)(v43 + 31037);
          long long v45 = v75;
          v44[204] = v74;
          v44[205] = v45;
          long long v46 = v77;
          v44[206] = v76;
          v44[207] = v46;
          long long v47 = v71;
          v44[200] = v70;
          v44[201] = v47;
          long long v48 = v73;
          v44[202] = v72;
          v44[203] = v48;
          long long v49 = v67;
          v44[196] = v66;
          v44[197] = v49;
          long long v50 = v69;
          v44[198] = v68;
          v44[199] = v50;
          long long v51 = v63;
          v44[192] = *(_OWORD *)__str;
          v44[193] = v51;
          long long v52 = v65;
          v44[194] = v64;
          v44[195] = v52;
        }
        else
        {
          io80211_os_log();
        }
      }
      *(void *)(*((void *)this + 9) + 18848) = mach_continuous_time();
      uint64_t v53 = *((void *)this + 9);
      *(void *)(v53 + 18584) = 0;
      *(_OWORD *)(v53 + 18520) = 0u;
      *(_OWORD *)(v53 + 18536) = 0u;
      *(_OWORD *)(v53 + 18552) = 0u;
      *(_OWORD *)(v53 + 18568) = 0u;
      uint64_t v54 = *((void *)this + 9);
      long long v55 = *(IO80211SkywalkInterface **)(v54 + 11304);
      if (v55 && *(unsigned char *)(v54 + 18404)) {
        IO80211Controller::postMessage(this, v55, 0xA1u, &v59, 0x18uLL, 1);
      }
    }
    else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        v58 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v58, "[dk] %s@%d:sizeof(rc1CoexStatsV3) %ld rc1CoexStatsV3.len() %d\n");
      }
    }
  }
  else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      long long v57 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      OSData::getLength(a2);
      CCLogStream::logAlert(v57, "[dk] %s@%d:sizeof(rc1CoexStatsV3) %ld payload->getLength() %d\n");
    }
  }
  return 0;
}

uint64_t AppleBCMWLANCore::updateRC1CoexStatsReportV4(AppleBCMWLANCore *this, OSData *a2)
{
  int v50 = -1431655766;
  if (OSData::getLength(a2) == 52)
  {
    *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v67 = v4;
    long long v68 = v4;
    long long v65 = v4;
    long long v66 = v4;
    long long v63 = v4;
    long long v64 = v4;
    long long v61 = v4;
    long long v62 = v4;
    long long v59 = v4;
    long long v60 = v4;
    long long v57 = v4;
    long long v58 = v4;
    long long v55 = v4;
    long long v56 = v4;
    *(_OWORD *)__str = v4;
    long long v54 = v4;
    BytesNoCopy = OSData::getBytesNoCopy(a2);
    if (BytesNoCopy[1] == 52)
    {
      __int16 v6 = BytesNoCopy[24];
      __int16 v7 = BytesNoCopy[23];
      __int16 v8 = BytesNoCopy[22];
      __int16 v9 = BytesNoCopy[21];
      __int16 v10 = BytesNoCopy[20];
      __int16 v11 = BytesNoCopy[19];
      __int16 v12 = BytesNoCopy[18];
      unsigned int v13 = *((_DWORD *)BytesNoCopy + 8);
      uint64_t v14 = *((void *)BytesNoCopy + 3);
      unsigned int v15 = *((_DWORD *)BytesNoCopy + 4);
      unsigned int v16 = *((_DWORD *)BytesNoCopy + 5);
      *(void *)&long long v18 = *((void *)BytesNoCopy + 1);
      int v17 = *((_DWORD *)BytesNoCopy + 1);
      *(_DWORD *)(*((void *)this + 9) + 18408) += v18;
      *(_DWORD *)(*((void *)this + 9) + 18412) += DWORD1(v18);
      *((void *)&v18 + 1) = v14;
      *(_DWORD *)(*((void *)this + 9) + 18416) += v14;
      *(_DWORD *)(*((void *)this + 9) + 18420) += HIDWORD(v14);
      *(unsigned char *)(*((void *)this + 9) + 18404) = 1;
      *(_DWORD *)(*((void *)this + 9) + 18596) = v17;
      *(_DWORD *)(*((void *)this + 9) + 18600) += v18;
      *(_DWORD *)(*((void *)this + 9) + 18604) += DWORD1(v18);
      uint64_t v19 = *((void *)this + 9);
      if (*(_DWORD *)(v19 + 18608) > v15) {
        unsigned int v15 = *(_DWORD *)(v19 + 18608);
      }
      *(_DWORD *)(v19 + 18608) = v15;
      uint64_t v20 = *((void *)this + 9);
      if (*(_DWORD *)(v20 + 18612) > v16) {
        unsigned int v16 = *(_DWORD *)(v20 + 18612);
      }
      *(_DWORD *)(v20 + 18612) = v16;
      *(_DWORD *)(*((void *)this + 9) + 18616) += v14;
      *(_DWORD *)(*((void *)this + 9) + 18620) += HIDWORD(v14);
      uint64_t v21 = *((void *)this + 9);
      if (*(_DWORD *)(v21 + 18624) > v13) {
        unsigned int v13 = *(_DWORD *)(v21 + 18624);
      }
      *(_DWORD *)(v21 + 18624) = v13;
      *(_WORD *)(*((void *)this + 9) + 18628) |= v12;
      *(_WORD *)(*((void *)this + 9) + 18630) |= v11;
      *(_WORD *)(*((void *)this + 9) + 18632) += v10;
      *(_WORD *)(*((void *)this + 9) + 18634) += v9;
      *(_WORD *)(*((void *)this + 9) + 18636) += v8;
      long long v51 = v18;
      *(_WORD *)(*((void *)this + 9) + 18638) += v7;
      uint64_t v22 = *((void *)this + 9);
      __int16 v23 = *(_WORD *)(v22 + 18640);
      LOBYTE(v50) = 1;
      *(_WORD *)(v22 + 18640) = v23 + v6;
      mach_continuous_time();
      absolutetime_to_nanoseconds();
      int v52 = 1338014025;
      if (*(void *)(*((void *)this + 9) + 18596))
      {
        snprintf(__str, 0x100uLL, "RC1 Coex Stats4: Mode=%u, Request=%u RC1Duration=%uus RC1DutyCycle=%u RC1MaxDuration=%u WlanCritCnt=%u WlanCritDur=%u WlanCritMaxDur=%u WlanCritEvtBitmap=0x%x WlanCritMaxEvtType=%u DataStall=%u RC1DenyDS=%u RC1DenyDurDS=%u SucRR=%u\n", *(_DWORD *)(*((void *)this + 9) + 18596), *(_DWORD *)(*((void *)this + 9) + 18600), *(_DWORD *)(*((void *)this + 9) + 18604), *(_DWORD *)(*((void *)this + 9) + 18608), *(_DWORD *)(*((void *)this + 9) + 18612), *(_DWORD *)(*((void *)this + 9) + 18616), *(_DWORD *)(*((void *)this + 9) + 18620), *(_DWORD *)(*((void *)this + 9) + 18624), *(unsigned __int16 *)(*((void *)this + 9) + 18628), *(unsigned __int16 *)(*((void *)this + 9) + 18630), *(unsigned __int16 *)(*((void *)this + 9) + 18632), *(unsigned __int16 *)(*((void *)this + 9) + 18634), *(unsigned __int16 *)(*((void *)this + 9) + 18636), *(unsigned __int16 *)(*((void *)this + 9) + 18638));
        uint64_t v24 = *((void *)this + 9);
        if ((*(_DWORD *)(v24 + 980) - 1) > 1)
        {
          unsigned int v25 = (_OWORD *)(v24 + 31037);
          long long v26 = v66;
          v25[156] = v65;
          v25[157] = v26;
          long long v27 = v68;
          v25[158] = v67;
          v25[159] = v27;
          long long v28 = v62;
          v25[152] = v61;
          v25[153] = v28;
          long long v29 = v64;
          v25[154] = v63;
          v25[155] = v29;
          long long v30 = v58;
          v25[148] = v57;
          v25[149] = v30;
          long long v31 = v60;
          v25[150] = v59;
          v25[151] = v31;
          long long v32 = v54;
          v25[144] = *(_OWORD *)__str;
          v25[145] = v32;
          long long v33 = v56;
          v25[146] = v55;
          v25[147] = v33;
        }
        else
        {
          io80211_os_log();
        }
        snprintf(__str, 0x100uLL, "RC1 Coex Stats4: StuckCnt=%u [%llums]\n", *(unsigned __int16 *)(*((void *)this + 9) + 18640), 0xB2F4FC07949);
        uint64_t v34 = *((void *)this + 9);
        if ((*(_DWORD *)(v34 + 980) - 1) > 1)
        {
          long long v35 = (_OWORD *)(v34 + 31037);
          long long v36 = v66;
          v35[204] = v65;
          v35[205] = v36;
          long long v37 = v68;
          v35[206] = v67;
          v35[207] = v37;
          long long v38 = v62;
          v35[200] = v61;
          v35[201] = v38;
          long long v39 = v64;
          v35[202] = v63;
          v35[203] = v39;
          long long v40 = v58;
          v35[196] = v57;
          v35[197] = v40;
          long long v41 = v60;
          v35[198] = v59;
          v35[199] = v41;
          long long v42 = v54;
          v35[192] = *(_OWORD *)__str;
          v35[193] = v42;
          long long v43 = v56;
          v35[194] = v55;
          v35[195] = v43;
        }
        else
        {
          io80211_os_log();
        }
      }
      *(void *)(*((void *)this + 9) + 18848) = mach_continuous_time();
      uint64_t v44 = *((void *)this + 9);
      *(_OWORD *)(v44 + 18592) = 0u;
      *(_OWORD *)(v44 + 18608) = 0u;
      *(_OWORD *)(v44 + 18624) = 0u;
      *(_DWORD *)(v44 + 18640) = 0;
      uint64_t v45 = *((void *)this + 9);
      long long v46 = *(IO80211SkywalkInterface **)(v45 + 11304);
      if (v46 && *(unsigned char *)(v45 + 18404)) {
        IO80211Controller::postMessage(this, v46, 0xA1u, &v50, 0x18uLL, 1);
      }
    }
    else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v49 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v49, "[dk] %s@%d:sizeof(rc1CoexStatsV4) %ld rc1CoexStatsV4.len() %d\n");
      }
    }
  }
  else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      long long v48 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      OSData::getLength(a2);
      CCLogStream::logAlert(v48, "[dk] %s@%d:sizeof(rc1CoexStatsV4) %ld payload->getLength() %d\n");
    }
  }
  return 0;
}

uint64_t AppleBCMWLANCore::updateRC1CoexStatsReportV5(AppleBCMWLANCore *this, OSData *a2)
{
  memset(v60, 170, sizeof(v60));
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v75 = v4;
  long long v76 = v4;
  long long v73 = v4;
  long long v74 = v4;
  long long v71 = v4;
  long long v72 = v4;
  long long v69 = v4;
  long long v70 = v4;
  long long v67 = v4;
  long long v68 = v4;
  long long v65 = v4;
  long long v66 = v4;
  long long v63 = v4;
  long long v64 = v4;
  *(_OWORD *)__str = v4;
  long long v62 = v4;
  if (OSData::getLength(a2) == 76)
  {
    BytesNoCopy = OSData::getBytesNoCopy(a2);
    if (BytesNoCopy[1] == 76)
    {
      __int16 v6 = BytesNoCopy[36];
      char v7 = *((unsigned char *)BytesNoCopy + 70);
      char v8 = *((unsigned char *)BytesNoCopy + 69);
      char v9 = *((unsigned char *)BytesNoCopy + 68);
      char v10 = *((unsigned char *)BytesNoCopy + 67);
      char v11 = *((unsigned char *)BytesNoCopy + 66);
      __int16 v12 = BytesNoCopy[32];
      unsigned int v14 = *((_DWORD *)BytesNoCopy + 14);
      unsigned int v13 = *((_DWORD *)BytesNoCopy + 15);
      int v15 = *((_DWORD *)BytesNoCopy + 12);
      int v16 = *((_DWORD *)BytesNoCopy + 13);
      __int16 v17 = BytesNoCopy[23];
      __int16 v18 = BytesNoCopy[22];
      __int16 v19 = BytesNoCopy[21];
      __int16 v20 = BytesNoCopy[20];
      __int16 v21 = BytesNoCopy[19];
      __int16 v22 = BytesNoCopy[18];
      unsigned int v23 = *((_DWORD *)BytesNoCopy + 8);
      uint64_t v24 = *((void *)BytesNoCopy + 3);
      unsigned int v26 = *((_DWORD *)BytesNoCopy + 4);
      unsigned int v25 = *((_DWORD *)BytesNoCopy + 5);
      *(void *)&long long v28 = *((void *)BytesNoCopy + 1);
      int v27 = *((_DWORD *)BytesNoCopy + 1);
      *(_DWORD *)(*((void *)this + 9) + 18408) += v28;
      *(_DWORD *)(*((void *)this + 9) + 18412) += DWORD1(v28);
      *((void *)&v28 + 1) = v24;
      *(_DWORD *)(*((void *)this + 9) + 18416) += v24;
      *(_DWORD *)(*((void *)this + 9) + 18420) += HIDWORD(v24);
      *(unsigned char *)(*((void *)this + 9) + 18404) = 1;
      *(_DWORD *)(*((void *)this + 9) + 18648) = v27;
      *(_DWORD *)(*((void *)this + 9) + 18652) += v28;
      *(_DWORD *)(*((void *)this + 9) + 18656) += DWORD1(v28);
      uint64_t v29 = *((void *)this + 9);
      if (*(_DWORD *)(v29 + 18660) > v26) {
        unsigned int v26 = *(_DWORD *)(v29 + 18660);
      }
      *(_DWORD *)(v29 + 18660) = v26;
      uint64_t v30 = *((void *)this + 9);
      if (*(_DWORD *)(v30 + 18664) > v25) {
        unsigned int v25 = *(_DWORD *)(v30 + 18664);
      }
      *(_DWORD *)(v30 + 18664) = v25;
      *(_DWORD *)(*((void *)this + 9) + 18668) += v24;
      *(_DWORD *)(*((void *)this + 9) + 18672) += HIDWORD(v24);
      uint64_t v31 = *((void *)this + 9);
      if (*(_DWORD *)(v31 + 18676) > v23) {
        unsigned int v23 = *(_DWORD *)(v31 + 18676);
      }
      *(_DWORD *)(v31 + 18676) = v23;
      *(_WORD *)(*((void *)this + 9) + 18680) |= v22;
      *(_WORD *)(*((void *)this + 9) + 18682) |= v21;
      *(_WORD *)(*((void *)this + 9) + 18684) += v20;
      *(_WORD *)(*((void *)this + 9) + 18686) += v19;
      *(_WORD *)(*((void *)this + 9) + 18688) += v18;
      *(_WORD *)(*((void *)this + 9) + 18690) += v17;
      *(_WORD *)(*((void *)this + 9) + 18716) += v6;
      *(_DWORD *)(*((void *)this + 9) + 18692) += v15;
      *(_OWORD *)&v60[4] = v28;
      *(_DWORD *)(*((void *)this + 9) + 18696) += v16;
      uint64_t v32 = *((void *)this + 9);
      if (*(_DWORD *)(v32 + 18700) > v14) {
        unsigned int v14 = *(_DWORD *)(v32 + 18700);
      }
      *(_DWORD *)(v32 + 18700) = v14;
      uint64_t v33 = *((void *)this + 9);
      if (*(_DWORD *)(v33 + 18704) > v13) {
        unsigned int v13 = *(_DWORD *)(v33 + 18704);
      }
      *(_DWORD *)(v33 + 18704) = v13;
      v60[0] = 1;
      *(_WORD *)(*((void *)this + 9) + 18708) += v12;
      *(unsigned char *)(*((void *)this + 9) + 18710) = v11;
      *(unsigned char *)(*((void *)this + 9) + 18711) = v10;
      *(unsigned char *)(*((void *)this + 9) + 18712) = v9;
      *(unsigned char *)(*((void *)this + 9) + 18713) = v8;
      *(unsigned char *)(*((void *)this + 9) + 18714) = v7;
      mach_continuous_time();
      absolutetime_to_nanoseconds();
      *(_DWORD *)&v60[20] = 1338014025;
      if (*(void *)(*((void *)this + 9) + 18648))
      {
        snprintf(__str, 0x100uLL, "RC1 Coex Stats5: Mode=%u, Request=%u RC1Duration=%uus RC1DutyCycle=%u RC1MaxDuration=%u WlanCritCnt=%u WlanCritDur=%u WlanCritMaxDur=%u,WlanCritEvtBitmap=0x%x WlanCritMaxEvtType=%u DataStall=%u RC1DenyDS=%u RC1DenyDurDS=%u SucRR=%u\n", *(_DWORD *)(*((void *)this + 9) + 18648), *(_DWORD *)(*((void *)this + 9) + 18652), *(_DWORD *)(*((void *)this + 9) + 18656), *(_DWORD *)(*((void *)this + 9) + 18660), *(_DWORD *)(*((void *)this + 9) + 18664), *(_DWORD *)(*((void *)this + 9) + 18668), *(_DWORD *)(*((void *)this + 9) + 18672), *(_DWORD *)(*((void *)this + 9) + 18676), *(unsigned __int16 *)(*((void *)this + 9) + 18680), *(unsigned __int16 *)(*((void *)this + 9) + 18682), *(unsigned __int16 *)(*((void *)this + 9) + 18684), *(unsigned __int16 *)(*((void *)this + 9) + 18686), *(unsigned __int16 *)(*((void *)this + 9) + 18688), *(unsigned __int16 *)(*((void *)this + 9) + 18690));
        uint64_t v34 = *((void *)this + 9);
        if ((*(_DWORD *)(v34 + 980) - 1) > 1)
        {
          long long v35 = (_OWORD *)(v34 + 31037);
          long long v36 = v74;
          v35[156] = v73;
          v35[157] = v36;
          long long v37 = v76;
          v35[158] = v75;
          v35[159] = v37;
          long long v38 = v70;
          v35[152] = v69;
          v35[153] = v38;
          long long v39 = v72;
          v35[154] = v71;
          v35[155] = v39;
          long long v40 = v66;
          v35[148] = v65;
          v35[149] = v40;
          long long v41 = v68;
          v35[150] = v67;
          v35[151] = v41;
          long long v42 = v62;
          v35[144] = *(_OWORD *)__str;
          v35[145] = v42;
          long long v43 = v64;
          v35[146] = v63;
          v35[147] = v43;
        }
        else
        {
          io80211_os_log();
        }
        snprintf(__str, 0x100uLL, "RC1 Coex Stats5: NewRequest=%u NewRC1Duration=%uus NewRC1DutyCycle=%u NewRC1MaxDuration=%u rc1_msg73_cnt=%u rc1_last_msg73_pl[0]=%u rc1_last_msg73_pl[1]=%u rc1_last_msg73_pl[2]=0x%x rc1_last_msg73_pl[3]=%u rc1_last_msg73_pl[4]=%u StuckCnt=%u [%llums]\n", *(_DWORD *)(*((void *)this + 9) + 18692), *(_DWORD *)(*((void *)this + 9) + 18696), *(_DWORD *)(*((void *)this + 9) + 18700), *(_DWORD *)(*((void *)this + 9) + 18704), *(unsigned __int16 *)(*((void *)this + 9) + 18708), *(unsigned __int8 *)(*((void *)this + 9) + 18710), *(unsigned __int8 *)(*((void *)this + 9) + 18711), *(unsigned __int8 *)(*((void *)this + 9) + 18712), *(unsigned __int8 *)(*((void *)this + 9) + 18713), *(unsigned __int8 *)(*((void *)this + 9) + 18714), *(unsigned __int16 *)(*((void *)this + 9) + 18716), 0xB2F4FC07949);
        uint64_t v44 = *((void *)this + 9);
        if ((*(_DWORD *)(v44 + 980) - 1) > 1)
        {
          uint64_t v45 = (_OWORD *)(v44 + 31037);
          long long v46 = v74;
          v45[204] = v73;
          v45[205] = v46;
          long long v47 = v76;
          v45[206] = v75;
          v45[207] = v47;
          long long v48 = v70;
          v45[200] = v69;
          v45[201] = v48;
          long long v49 = v72;
          v45[202] = v71;
          v45[203] = v49;
          long long v50 = v66;
          v45[196] = v65;
          v45[197] = v50;
          long long v51 = v68;
          v45[198] = v67;
          v45[199] = v51;
          long long v52 = v62;
          v45[192] = *(_OWORD *)__str;
          v45[193] = v52;
          long long v53 = v64;
          v45[194] = v63;
          v45[195] = v53;
        }
        else
        {
          io80211_os_log();
        }
      }
      *(void *)(*((void *)this + 9) + 18848) = mach_continuous_time();
      long long v54 = (_OWORD *)*((void *)this + 9);
      v54[1169] = 0u;
      *(_OWORD *)((char *)v54 + 18644) = 0u;
      *(_OWORD *)((char *)v54 + 18660) = 0u;
      *(_OWORD *)((char *)v54 + 18676) = 0u;
      *(_OWORD *)((char *)v54 + 18692) = 0u;
      uint64_t v55 = *((void *)this + 9);
      long long v56 = *(IO80211SkywalkInterface **)(v55 + 11304);
      if (v56 && *(unsigned char *)(v55 + 18404)) {
        IO80211Controller::postMessage(this, v56, 0xA1u, v60, 0x18uLL, 1);
      }
    }
    else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v59 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v59, "[dk] %s@%d:sizeof(rc1CoexStatsV5) %ld rc1CoexStatsV5.len() %d\n");
      }
    }
  }
  else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      long long v58 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      OSData::getLength(a2);
      CCLogStream::logAlert(v58, "[dk] %s@%d:sizeof(rc1CoexStatsV5) %ld payload->getLength() %d\n");
    }
  }
  return 0;
}

uint64_t AppleBCMWLANCore::sendRC1CoexStatsEventCoreAnalytics(IOService *this)
{
  OSStringPtr v2 = OSString::withCString("com.apple.wifi.RC1CoexStats");
  if (v2)
  {
    v3 = v2;
    long long v4 = OSDictionary::withCapacity(4u);
    if (!v4)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          long long v28 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v28, "[dk] %s@%d:Fail to allocate eventPayload\n");
        }
      }
      goto LABEL_30;
    }
    OSStringPtr v5 = OSString::withCString("RC1Request");
    if (!v5)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v29 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v29, "[dk] %s@%d:Fail to allocate keyRC1Request\n");
        }
      }
      goto LABEL_30;
    }
    __int16 v6 = v5;
    OSNumberPtr v7 = OSNumber::withNumber(LODWORD(this[1].OSObject::OSObjectInterface::__vftable[1150].free), 0x20uLL);
    if (v7)
    {
      OSDictionary::setObject(v4, v6, v7);
      OSStringPtr v8 = OSString::withCString("RC1Duration");
      if (v8)
      {
        char v9 = v8;
        OSNumberPtr v10 = OSNumber::withNumber(HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[1150].free), 0x20uLL);
        if (v10)
        {
          OSNumberPtr v11 = v10;
          OSDictionary::setObject(v4, v9, v10);
          OSStringPtr v12 = OSString::withCString("WLANCritCnt");
          if (v12)
          {
            unsigned int v13 = v12;
            OSNumberPtr v14 = OSNumber::withNumber(LODWORD(this[1].OSObject::OSObjectInterface::__vftable[1151].init), 0x20uLL);
            if (v14)
            {
              OSNumberPtr v45 = v14;
              OSDictionary::setObject(v4, v13, v14);
              OSStringPtr v15 = OSString::withCString("WLANCritDuraton");
              if (v15)
              {
                int v16 = v15;
                OSNumberPtr v17 = OSNumber::withNumber(HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[1151].init), 0x20uLL);
                if (v17)
                {
                  OSNumberPtr v18 = v17;
                  long long v43 = v13;
                  uint64_t v44 = v11;
                  __int16 v19 = v9;
                  __int16 v20 = v7;
                  __int16 v21 = v6;
                  OSDictionary::setObject(v4, v16, v17);
                  __int16 v22 = v3;
                  unsigned int v23 = v4;
                  uint64_t v24 = IOService::CoreAnalyticsSendEvent(this, 0, v3, v4, 0);
                  if (v24
                    && (uint64_t v25 = v24,
                        ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                    && (((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this),
                        CCLogStream::shouldLog()))
                  {
                    long long v42 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    uint64_t v32 = (OSString *)v22;
                    CStringNoCopy = OSString::getCStringNoCopy(v22);
                    uint64_t v34 = v25;
                    v3 = v32;
                    long long v35 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v34);
                    CCLogStream::logEmergency(v42, "[dk] %s@%d:Failed to send CoreAnalytics for event %s : %s\n", "sendRC1CoexStatsEventCoreAnalytics", 20026, CStringNoCopy, v35);
                  }
                  else
                  {
                    v3 = (OSString *)v22;
                  }
                  __int16 v6 = v21;
                  OSNumberPtr v7 = v20;
                  long long v4 = v23;
                  char v9 = v19;
                  unsigned int v13 = v43;
                  OSNumberPtr v11 = v44;
                  goto LABEL_16;
                }
                if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                {
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  if (CCLogStream::shouldLog())
                  {
                    uint64_t v31 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    CCLogStream::logAlert(v31, "[dk] %s@%d:Fail to allocate valueRC1WlanCritDur\n", "sendRC1CoexStatsEventCoreAnalytics", 20020);
                  }
                }
              }
              else
              {
                if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                {
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  if (CCLogStream::shouldLog())
                  {
                    long long v41 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    CCLogStream::logAlert(v41, "[dk] %s@%d:Fail to allocate keyRC1WlanCritDur\n", "sendRC1CoexStatsEventCoreAnalytics", 20018);
                  }
                }
                int v16 = 0;
              }
LABEL_64:
              OSNumberPtr v18 = 0;
LABEL_16:
              ((void (*)(const OSObject *))v6->release)(v6);
              if (v7) {
                ((void (*)(OSNumberPtr))v7->release)(v7);
              }
              if (v9) {
                ((void (*)(const OSObject *))v9->release)(v9);
              }
              if (v11) {
                ((void (*)(OSNumberPtr))v11->release)(v11);
              }
              if (v13) {
                ((void (*)(const OSObject *))v13->release)(v13);
              }
              if (v45) {
                ((void (*)(OSNumberPtr))v45->release)(v45);
              }
              if (v16) {
                ((void (*)(const OSObject *))v16->release)(v16);
              }
              if (v18) {
                ((void (*)(OSNumberPtr))v18->release)(v18);
              }
LABEL_30:
              uint64_t result = ((uint64_t (*)(OSString *))v3->release)(v3);
              if (v4)
              {
                release = v4->release;
                return ((uint64_t (*)(OSDictionary *))release)(v4);
              }
              return result;
            }
            if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog())
              {
                long long v40 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                CCLogStream::logAlert(v40, "[dk] %s@%d:Fail to allocate valueRC1WlanCrit\n", "sendRC1CoexStatsEventCoreAnalytics", 20014);
              }
            }
          }
          else
          {
            if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog())
              {
                long long v39 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                CCLogStream::logAlert(v39, "[dk] %s@%d:Fail to allocate keyRC1WlanCrit\n", "sendRC1CoexStatsEventCoreAnalytics", 20012);
              }
            }
            unsigned int v13 = 0;
          }
          int v16 = 0;
LABEL_63:
          OSNumberPtr v45 = 0;
          goto LABEL_64;
        }
        if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
        {
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (CCLogStream::shouldLog())
          {
            long long v38 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            CCLogStream::logAlert(v38, "[dk] %s@%d:Fail to allocate valueRC1Duration", "sendRC1CoexStatsEventCoreAnalytics", 20008);
          }
        }
LABEL_54:
        unsigned int v13 = 0;
        int v16 = 0;
        OSNumberPtr v11 = 0;
        goto LABEL_63;
      }
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          long long v37 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v37, "[dk] %s@%d:Fail to allocate keyRC1Duration\n");
        }
      }
    }
    else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v30 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v30, "[dk] %s@%d:Fail to allocate valueRC1Request\n");
      }
    }
    char v9 = 0;
    goto LABEL_54;
  }
  uint64_t result = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
  if (result)
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      long long v36 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      return CCLogStream::logAlert(v36, "[dk] %s@%d:Fail to allocate eventName\n", "sendRC1CoexStatsEventCoreAnalytics", 19995);
    }
  }
  return result;
}

BOOL AppleBCMWLANCore::checkNonZeroTxDCValue(AppleBCMWLANCore *this)
{
  return *(unsigned char *)(*((void *)this + 9) + 6296)
      || *(unsigned char *)(*((void *)this + 9) + 6297)
      || *(unsigned char *)(*((void *)this + 9) + 6298)
      || *(unsigned char *)(*((void *)this + 9) + 6299)
      || *(unsigned char *)(*((void *)this + 9) + 6300)
      || *(unsigned char *)(*((void *)this + 9) + 6301)
      || *(unsigned char *)(*((void *)this + 9) + 6302)
      || *(unsigned char *)(*((void *)this + 9) + 6303) != 0;
}

void *AppleBCMWLANCore::updateTxDCSlice0Ant0Report(void *this)
{
  uint64_t v1 = this[9];
  unsigned int v2 = *(unsigned __int8 *)(v1 + 6296);
  if (v2 > 0xA)
  {
    if (v2 > 0x14)
    {
      if (v2 > 0x1E)
      {
        if (v2 > 0x28)
        {
          if (v2 > 0x32)
          {
            if (v2 > 0x3C)
            {
              if (v2 > 0x46)
              {
                if (v2 > 0x50)
                {
                  if (v2 > 0x5A)
                  {
                    if (v2 > 0x64)
                    {
                      uint64_t v3 = (uint64_t)this;
                      this = (void *)(*(uint64_t (**)(void *))(*this + 1848))(this);
                      if (this)
                      {
                        (*(void (**)(uint64_t))(*(void *)v3 + 1848))(v3);
                        this = (void *)CCLogStream::shouldLog();
                        if (this)
                        {
                          long long v4 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 1848))(v3);
                          return (void *)CCLogStream::logAlert(v4, "[dk] %s@%d:Invalid Tx Duty Cycle for Slice 0 Ant0\n", "updateTxDCSlice0Ant0Report", 20134);
                        }
                      }
                    }
                    else
                    {
                      ++*(void *)(v1 + 6384);
                    }
                  }
                  else
                  {
                    ++*(void *)(v1 + 6376);
                  }
                }
                else
                {
                  ++*(void *)(v1 + 6368);
                }
              }
              else
              {
                ++*(void *)(v1 + 6360);
              }
            }
            else
            {
              ++*(void *)(v1 + 6352);
            }
          }
          else
          {
            ++*(void *)(v1 + 6344);
          }
        }
        else
        {
          ++*(void *)(v1 + 6336);
        }
      }
      else
      {
        ++*(void *)(v1 + 6328);
      }
    }
    else
    {
      ++*(void *)(v1 + 6320);
    }
  }
  else
  {
    ++*(void *)(v1 + 6312);
  }
  return this;
}

void *AppleBCMWLANCore::updateTxDCSlice1Ant0Report(void *this)
{
  uint64_t v1 = this[9];
  unsigned int v2 = *(unsigned __int8 *)(v1 + 6300);
  if (v2 > 0xA)
  {
    if (v2 > 0x14)
    {
      if (v2 > 0x1E)
      {
        if (v2 > 0x28)
        {
          if (v2 > 0x32)
          {
            if (v2 > 0x3C)
            {
              if (v2 > 0x46)
              {
                if (v2 > 0x50)
                {
                  if (v2 > 0x5A)
                  {
                    if (v2 > 0x64)
                    {
                      uint64_t v3 = (uint64_t)this;
                      this = (void *)(*(uint64_t (**)(void *))(*this + 1848))(this);
                      if (this)
                      {
                        (*(void (**)(uint64_t))(*(void *)v3 + 1848))(v3);
                        this = (void *)CCLogStream::shouldLog();
                        if (this)
                        {
                          long long v4 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 1848))(v3);
                          return (void *)CCLogStream::logAlert(v4, "[dk] %s@%d:Invalid Tx Duty Cycle for Slice 1 Ant0\n", "updateTxDCSlice1Ant0Report", 20160);
                        }
                      }
                    }
                    else
                    {
                      ++*(void *)(v1 + 6472);
                    }
                  }
                  else
                  {
                    ++*(void *)(v1 + 6464);
                  }
                }
                else
                {
                  ++*(void *)(v1 + 6456);
                }
              }
              else
              {
                ++*(void *)(v1 + 6448);
              }
            }
            else
            {
              ++*(void *)(v1 + 6440);
            }
          }
          else
          {
            ++*(void *)(v1 + 6432);
          }
        }
        else
        {
          ++*(void *)(v1 + 6424);
        }
      }
      else
      {
        ++*(void *)(v1 + 6416);
      }
    }
    else
    {
      ++*(void *)(v1 + 6408);
    }
  }
  else
  {
    ++*(void *)(v1 + 6400);
  }
  return this;
}

uint64_t AppleBCMWLANCore::handleTxDCPerAntAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  long long v4 = (AppleBCMWLANCore *)result;
  if (a3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        long long v66 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
        (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)v4 + 112))(v4, a3);
        return CCLogStream::logAlert(v66, "[dk] %s@%d:Failed to get TxDC from DynSAR summary %s\n");
      }
    }
    return result;
  }
  uint64_t v6 = *a4;
  if (*a4)
  {
    if (*(_WORD *)v6 == 3)
    {
      OSStringPtr v8 = (unsigned __int16 *)(v6 + 8);
      int v7 = *(unsigned __int16 *)(v6 + 8);
      BOOL v9 = v7 == 4 || v7 == 2;
      if (!v9 || *(unsigned char *)(v6 + 35) != 2 || *(unsigned __int8 *)(v6 + 36) >= 9u)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
        if (result)
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            OSNumberPtr v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
            return CCLogStream::logAlert(v10, "[dk] %s@%d:Invalid version or fields from DynSAR summary response\n");
          }
        }
        return result;
      }
      if (v7 == 4)
      {
        uint64_t v15 = *(unsigned __int8 *)(v6 + 38);
        if (v15 + 16 * (unint64_t)*(unsigned __int8 *)(v6 + 32) > *(unsigned __int16 *)(v6 + 10))
        {
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
          if (result)
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
            uint64_t result = CCLogStream::shouldLog();
            if (result)
            {
              int v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
              return CCLogStream::logAlert(v16, "[dk] %s@%d:Invalid FW length detected for DYNSAR_CNT_VERSION_V4!\n");
            }
          }
          return result;
        }
        OSNumberPtr v17 = 0;
        OSNumberPtr v18 = (char *)v8 + v15;
      }
      else if (v7 == 2)
      {
        uint64_t v13 = *(unsigned __int8 *)(v6 + 38);
        if (v13 + 24 * (unint64_t)*(unsigned __int8 *)(v6 + 32) > *(unsigned __int16 *)(v6 + 10))
        {
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
          if (result)
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
            uint64_t result = CCLogStream::shouldLog();
            if (result)
            {
              OSNumberPtr v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
              return CCLogStream::logAlert(v14, "[dk] %s@%d:Invalid FW length detected for DYNSAR_CNT_VERSION_V2!\n");
            }
          }
          return result;
        }
        OSNumberPtr v18 = 0;
        OSNumberPtr v17 = (char *)v8 + v13;
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
        if (result)
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            long long v67 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
            uint64_t result = CCLogStream::logAlert(v67, "[dk] %s@%d:Invalid DynSAR Summary version\n", "handleTxDCPerAntAsyncCallback", 20211);
          }
        }
        OSNumberPtr v17 = 0;
        OSNumberPtr v18 = 0;
      }
      if (!*(_DWORD *)(v6 + 12)) {
        return result;
      }
      if (*(unsigned char *)(v6 + 35))
      {
        int v19 = 0;
        while (1)
        {
          uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
          if (result)
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
            uint64_t result = CCLogStream::shouldLog();
            if (result)
            {
              long long v61 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
              uint64_t result = CCLogStream::logInfo(v61, "[dk] %s@%d:Slice %d\n", "handleTxDCPerAntAsyncCallback", 20217, v19);
            }
          }
          unsigned int v20 = *(unsigned __int8 *)(v6 + 32);
          if (*(unsigned char *)(v6 + 32)) {
            break;
          }
LABEL_164:
          if (++v19 >= *(unsigned __int8 *)(v6 + 35)) {
            goto LABEL_165;
          }
        }
        unsigned int v21 = 0;
        while (1)
        {
          unsigned int v22 = v21 + v19 * v20;
          int v23 = *v8;
          if (v23 == 4)
          {
            if (v19)
            {
              if (v21 == 2)
              {
                unint64_t v38 = *(unsigned int *)(v6 + 12);
                if (v38) {
                  unint64_t v39 = 100 * (unint64_t)*(unsigned int *)&v18[8 * v22] / v38;
                }
                else {
                  LOBYTE(v39) = 0;
                }
                *(unsigned char *)(*((void *)v4 + 9) + 6302) = v39;
                uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                if (!result) {
                  goto LABEL_64;
                }
                (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                uint64_t result = CCLogStream::shouldLog();
                if (!result) {
                  goto LABEL_64;
                }
                goto LABEL_155;
              }
              if (v21 == 1)
              {
                unint64_t v40 = *(unsigned int *)(v6 + 12);
                if (v40) {
                  unint64_t v41 = 100 * (unint64_t)*(unsigned int *)&v18[8 * v22] / v40;
                }
                else {
                  LOBYTE(v41) = 0;
                }
                *(unsigned char *)(*((void *)v4 + 9) + 6301) = v41;
                uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                if (!result) {
                  goto LABEL_64;
                }
                (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                uint64_t result = CCLogStream::shouldLog();
                if (!result) {
                  goto LABEL_64;
                }
                goto LABEL_159;
              }
              if (v21)
              {
                unint64_t v42 = *(unsigned int *)(v6 + 12);
                if (v42) {
                  unint64_t v43 = 100 * (unint64_t)*(unsigned int *)&v18[8 * v22] / v42;
                }
                else {
                  LOBYTE(v43) = 0;
                }
                *(unsigned char *)(*((void *)v4 + 9) + 6303) = v43;
                uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                if (!result) {
                  goto LABEL_64;
                }
                (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                uint64_t result = CCLogStream::shouldLog();
                if (!result) {
                  goto LABEL_64;
                }
                goto LABEL_163;
              }
              unint64_t v26 = *(unsigned int *)(v6 + 12);
              if (v26) {
                unint64_t v27 = 100 * (unint64_t)*(unsigned int *)&v18[8 * v22] / v26;
              }
              else {
                LOBYTE(v27) = 0;
              }
              *(unsigned char *)(*((void *)v4 + 9) + 6300) = v27;
              uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
              if (!result) {
                goto LABEL_64;
              }
              (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
              uint64_t result = CCLogStream::shouldLog();
              if (!result) {
                goto LABEL_64;
              }
            }
            else
            {
              if (v21 == 2)
              {
                unint64_t v50 = *(unsigned int *)(v6 + 12);
                if (v50) {
                  unint64_t v51 = 100 * (unint64_t)*(unsigned int *)&v18[8 * v22] / v50;
                }
                else {
                  LOBYTE(v51) = 0;
                }
                *(unsigned char *)(*((void *)v4 + 9) + 6298) = v51;
                uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                if (!result) {
                  goto LABEL_64;
                }
                (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                uint64_t result = CCLogStream::shouldLog();
                if (!result) {
                  goto LABEL_64;
                }
LABEL_155:
                long long v57 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                uint64_t result = CCLogStream::logInfo(v57, "[dk] %s@%d:Ant 2 TxDC %d%%\n");
                goto LABEL_64;
              }
              if (v21 == 1)
              {
                unint64_t v52 = *(unsigned int *)(v6 + 12);
                if (v52) {
                  unint64_t v53 = 100 * (unint64_t)*(unsigned int *)&v18[8 * v22] / v52;
                }
                else {
                  LOBYTE(v53) = 0;
                }
                *(unsigned char *)(*((void *)v4 + 9) + 6297) = v53;
                uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                if (!result) {
                  goto LABEL_64;
                }
                (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                uint64_t result = CCLogStream::shouldLog();
                if (!result) {
                  goto LABEL_64;
                }
LABEL_159:
                long long v58 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                uint64_t result = CCLogStream::logInfo(v58, "[dk] %s@%d:Ant 1 TxDC %d%%\n");
                goto LABEL_64;
              }
              if (v21)
              {
                unint64_t v54 = *(unsigned int *)(v6 + 12);
                if (v54) {
                  unint64_t v55 = 100 * (unint64_t)*(unsigned int *)&v18[8 * v22] / v54;
                }
                else {
                  LOBYTE(v55) = 0;
                }
                *(unsigned char *)(*((void *)v4 + 9) + 6299) = v55;
                uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                if (!result) {
                  goto LABEL_64;
                }
                (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                uint64_t result = CCLogStream::shouldLog();
                if (!result) {
                  goto LABEL_64;
                }
LABEL_163:
                long long v59 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                uint64_t result = CCLogStream::logInfo(v59, "[dk] %s@%d:Ant 3 TxDC %d%%\n");
                goto LABEL_64;
              }
              unint64_t v30 = *(unsigned int *)(v6 + 12);
              if (v30) {
                unint64_t v31 = 100 * (unint64_t)*(unsigned int *)&v18[8 * v22] / v30;
              }
              else {
                LOBYTE(v31) = 0;
              }
              *(unsigned char *)(*((void *)v4 + 9) + 6296) = v31;
              uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
              if (!result) {
                goto LABEL_64;
              }
              (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
              uint64_t result = CCLogStream::shouldLog();
              if (!result) {
                goto LABEL_64;
              }
            }
          }
          else
          {
            if (v23 != 2)
            {
              uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
              if (result)
              {
                (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                uint64_t result = CCLogStream::shouldLog();
                if (result)
                {
                  long long v60 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                  uint64_t result = CCLogStream::logAlert(v60, "[dk] %s@%d:Invalid DynSAR Summary version\n", "handleTxDCPerAntAsyncCallback", 20281);
                }
              }
              goto LABEL_64;
            }
            if (v19)
            {
              if (v21 == 2)
              {
                unint64_t v32 = *(unsigned int *)(v6 + 12);
                if (v32) {
                  unint64_t v33 = 100 * (unint64_t)*(unsigned int *)&v17[12 * v22 + 8] / v32;
                }
                else {
                  LOBYTE(v33) = 0;
                }
                *(unsigned char *)(*((void *)v4 + 9) + 6302) = v33;
                uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                if (!result) {
                  goto LABEL_64;
                }
                (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                uint64_t result = CCLogStream::shouldLog();
                if (!result) {
                  goto LABEL_64;
                }
                goto LABEL_155;
              }
              if (v21 == 1)
              {
                unint64_t v34 = *(unsigned int *)(v6 + 12);
                if (v34) {
                  unint64_t v35 = 100 * (unint64_t)*(unsigned int *)&v17[12 * v22 + 8] / v34;
                }
                else {
                  LOBYTE(v35) = 0;
                }
                *(unsigned char *)(*((void *)v4 + 9) + 6301) = v35;
                uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                if (!result) {
                  goto LABEL_64;
                }
                (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                uint64_t result = CCLogStream::shouldLog();
                if (!result) {
                  goto LABEL_64;
                }
                goto LABEL_159;
              }
              if (v21)
              {
                unint64_t v36 = *(unsigned int *)(v6 + 12);
                if (v36) {
                  unint64_t v37 = 100 * (unint64_t)*(unsigned int *)&v17[12 * v22 + 8] / v36;
                }
                else {
                  LOBYTE(v37) = 0;
                }
                *(unsigned char *)(*((void *)v4 + 9) + 6303) = v37;
                uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                if (!result) {
                  goto LABEL_64;
                }
                (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                uint64_t result = CCLogStream::shouldLog();
                if (!result) {
                  goto LABEL_64;
                }
                goto LABEL_163;
              }
              unint64_t v24 = *(unsigned int *)(v6 + 12);
              if (v24) {
                unint64_t v25 = 100 * (unint64_t)*(unsigned int *)&v17[12 * v22 + 8] / v24;
              }
              else {
                LOBYTE(v25) = 0;
              }
              *(unsigned char *)(*((void *)v4 + 9) + 6300) = v25;
              uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
              if (!result) {
                goto LABEL_64;
              }
              (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
              uint64_t result = CCLogStream::shouldLog();
              if (!result) {
                goto LABEL_64;
              }
            }
            else
            {
              if (v21 == 2)
              {
                unint64_t v44 = *(unsigned int *)(v6 + 12);
                if (v44) {
                  unint64_t v45 = 100 * (unint64_t)*(unsigned int *)&v17[12 * v22 + 8] / v44;
                }
                else {
                  LOBYTE(v45) = 0;
                }
                *(unsigned char *)(*((void *)v4 + 9) + 6298) = v45;
                uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                if (!result) {
                  goto LABEL_64;
                }
                (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                uint64_t result = CCLogStream::shouldLog();
                if (!result) {
                  goto LABEL_64;
                }
                goto LABEL_155;
              }
              if (v21 == 1)
              {
                unint64_t v46 = *(unsigned int *)(v6 + 12);
                if (v46) {
                  unint64_t v47 = 100 * (unint64_t)*(unsigned int *)&v17[12 * v22 + 8] / v46;
                }
                else {
                  LOBYTE(v47) = 0;
                }
                *(unsigned char *)(*((void *)v4 + 9) + 6297) = v47;
                uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                if (!result) {
                  goto LABEL_64;
                }
                (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                uint64_t result = CCLogStream::shouldLog();
                if (!result) {
                  goto LABEL_64;
                }
                goto LABEL_159;
              }
              if (v21)
              {
                unint64_t v48 = *(unsigned int *)(v6 + 12);
                if (v48) {
                  unint64_t v49 = 100 * (unint64_t)*(unsigned int *)&v17[12 * v22 + 8] / v48;
                }
                else {
                  LOBYTE(v49) = 0;
                }
                *(unsigned char *)(*((void *)v4 + 9) + 6299) = v49;
                uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                if (!result) {
                  goto LABEL_64;
                }
                (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
                uint64_t result = CCLogStream::shouldLog();
                if (!result) {
                  goto LABEL_64;
                }
                goto LABEL_163;
              }
              unint64_t v28 = *(unsigned int *)(v6 + 12);
              if (v28) {
                unint64_t v29 = 100 * (unint64_t)*(unsigned int *)&v17[12 * v22 + 8] / v28;
              }
              else {
                LOBYTE(v29) = 0;
              }
              *(unsigned char *)(*((void *)v4 + 9) + 6296) = v29;
              uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
              if (!result) {
                goto LABEL_64;
              }
              (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
              uint64_t result = CCLogStream::shouldLog();
              if (!result) {
                goto LABEL_64;
              }
            }
          }
          long long v56 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
          uint64_t result = CCLogStream::logInfo(v56, "[dk] %s@%d:Ant 0 TxDC %d%%\n");
LABEL_64:
          ++v21;
          unsigned int v20 = *(unsigned __int8 *)(v6 + 32);
          if (v21 >= v20) {
            goto LABEL_164;
          }
        }
      }
LABEL_165:
      uint64_t v62 = *((void *)v4 + 9);
      long long v63 = *(AppleBCMWLANIOReporting **)(v62 + 5512);
      if (v63)
      {
        if (AppleBCMWLANCore::checkNonZeroTxDCValue(v4))
        {
          AppleBCMWLANIOReportingCore::reportTxDC(v63, (unsigned __int8 *)(v62 + 6296));
          uint64_t v64 = *((void *)v4 + 9);
          if (*(unsigned char *)(v64 + 6296) || *(unsigned char *)(v64 + 6297) || *(unsigned char *)(v64 + 6298) || *(unsigned char *)(v64 + 6299))
          {
            AppleBCMWLANCore::updateTxDCSlice0Ant0Report(v4);
            uint64_t v64 = *((void *)v4 + 9);
            if (!*(_DWORD *)(v64 + 6304))
            {
              *(_DWORD *)(v64 + 6304) = 1;
              uint64_t v64 = *((void *)v4 + 9);
            }
          }
          if (*(unsigned char *)(v64 + 6300) || *(unsigned char *)(v64 + 6301) || *(unsigned char *)(v64 + 6302) || *(unsigned char *)(v64 + 6303))
          {
            AppleBCMWLANCore::updateTxDCSlice1Ant0Report(v4);
            uint64_t v64 = *((void *)v4 + 9);
            if (!*(_DWORD *)(v64 + 6392))
            {
              *(_DWORD *)(v64 + 6392) = 1;
              uint64_t v64 = *((void *)v4 + 9);
            }
          }
          *(void *)(v64 + 6296) = 0;
          uint64_t v62 = *((void *)v4 + 9);
        }
        uint64_t result = *(void *)(v62 + 6256);
        if (result)
        {
          long long v65 = *(uint64_t (**)(void))(*(void *)result + 120);
          return v65();
        }
      }
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
      if (result)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          OSStringPtr v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
          return CCLogStream::logAlert(v12, "[dk] %s@%d:Sub Command ID mismatch, input %d, output %d\n");
        }
      }
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        OSNumberPtr v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)v4 + 1848))(v4);
        return CCLogStream::logNotice(v11, "[dk] %s@%d:No valid data\n", "handleTxDCPerAntAsyncCallback", 20173);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::parseEventLogRecordBTCoexStatsPerSlice(AppleBCMWLANCore *this, OSData *a2, uint64_t a3)
{
  if ((int)a3 >= 2)
  {
    uint64_t v8 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        OSNumberPtr v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v11, "[dk] %s@%d:Invalid sliceIndex %d\n");
      }
    }
  }
  else
  {
    uint64_t v6 = AppleBCMWLANCore::parseEventLogRecordBTCoexStats(this, a2);
    if (v6)
    {
      uint64_t v8 = v6;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          OSStringPtr v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v12, "[dk] %s@%d:Failed parseEventLogRecordBTCoexStats\n");
        }
      }
    }
    else
    {
      int v7 = *(AppleBCMWLANIOReporting **)(*((void *)this + 9) + 5520);
      if (v7)
      {
        uint64_t v8 = AppleBCMWLANIOReportingPerSlice::reportExtraBTCoex(v7, a2, a3);
        if (v8)
        {
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              BOOL v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v9, "[dk] %s@%d:Failed reportExtraBTCoex\n");
            }
          }
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return v8;
}

uint64_t AppleBCMWLANCore::parseEventLogRecordBTCoexStats(AppleBCMWLANCore *this, OSData *a2)
{
  switch(*(_WORD *)OSData::getBytesNoCopy(a2))
  {
    case 2:
      if (OSData::getLength(a2) != 36)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            size_t Length = OSData::getLength(a2);
            uint64_t v12 = 36;
            uint64_t v7 = 20760;
            goto LABEL_49;
          }
        }
        goto LABEL_61;
      }
      uint64_t result = AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV2(this, a2);
      break;
    case 3:
      if (OSData::getLength(a2) != 60)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            size_t Length = OSData::getLength(a2);
            uint64_t v12 = 60;
            uint64_t v7 = 20770;
            goto LABEL_49;
          }
        }
        goto LABEL_61;
      }
      uint64_t result = AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV3(this, a2);
      break;
    case 4:
      if (OSData::getLength(a2) != 92)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            size_t Length = OSData::getLength(a2);
            uint64_t v12 = 92;
            uint64_t v7 = 20781;
            goto LABEL_49;
          }
        }
        goto LABEL_61;
      }
      uint64_t result = AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV4(this, a2);
      break;
    case 6:
      if (OSData::getLength(a2) != 60)
      {
        if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
          goto LABEL_61;
        }
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (!CCLogStream::shouldLog()) {
          goto LABEL_61;
        }
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        size_t Length = OSData::getLength(a2);
        uint64_t v12 = 60;
        uint64_t v7 = 20792;
LABEL_49:
        uint64_t v10 = v7;
        uint64_t v8 = "[dk] %s@%d:BTC size mismatch, have %d, expected %ld\n";
        goto LABEL_64;
      }
      uint64_t result = AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV6(this, a2);
      break;
    case 7:
      if (OSData::getLength(a2) != 72)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            size_t Length = OSData::getLength(a2);
            uint64_t v12 = 72;
            uint64_t v9 = 20803;
            goto LABEL_63;
          }
        }
        goto LABEL_61;
      }
      uint64_t result = AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV7(this, a2);
      break;
    case 9:
      if (OSData::getLength(a2) != 76)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            size_t Length = OSData::getLength(a2);
            uint64_t v12 = 76;
            uint64_t v9 = 20814;
            goto LABEL_63;
          }
        }
        goto LABEL_61;
      }
      uint64_t result = AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV9(this, a2);
      break;
    case 0xB:
      if (OSData::getLength(a2) != 88)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            size_t Length = OSData::getLength(a2);
            uint64_t v12 = 88;
            uint64_t v9 = 20824;
            goto LABEL_63;
          }
        }
        goto LABEL_61;
      }
      uint64_t result = AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV11(this, a2);
      break;
    case 0xC:
      if (OSData::getLength(a2) != 112)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            size_t Length = OSData::getLength(a2);
            uint64_t v12 = 112;
            uint64_t v9 = 20834;
LABEL_63:
            uint64_t v10 = v9;
            uint64_t v8 = "[dk] %s@%d:BTC size mismatch, have %u, expected %ld\n";
LABEL_64:
            CCLogStream::logAlert(v6, v8, "parseEventLogRecordBTCoexStats", v10, Length, v12);
          }
        }
        goto LABEL_61;
      }
      uint64_t result = AppleBCMWLANCore::parseEventLogRecordBTCoexStatsV12(this, a2);
      break;
    default:
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          OSStringPtr v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v5, "[dk] %s@%d:BTC version mismatch, found %d\n");
        }
      }
LABEL_61:
      uint64_t result = 3758097084;
      break;
  }
  return result;
}

uint64_t AppleBCMWLANCore::parseEventLogRecordChannelSwitch(AppleBCMWLANCore *this, OSData *a2)
{
  unint64_t v30 = 0;
  long long v29 = 0u;
  memset(v28, 0, sizeof(v28));
  size_t Length = OSData::getLength(a2);
  if (Length == 28 || Length == 24)
  {
    BytesNoCopy = (unsigned int *)OSData::getBytesNoCopy(a2);
    unsigned int v31 = AppleBCMWLANIOReportingPerSlice::reportChannelSwitchV2PerSlice(*(AppleBCMWLANIOReporting **)(*((void *)this + 9) + 5520), a2, BytesNoCopy[5]);
    uint64_t v13 = *(int ***)(*((void *)this + 9) + 17576);
    unsigned __int16 CounterValueSafe = (unsigned __int16)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v31, (int *)4, a2, 4uLL);
    AppleBCMWLANChanSpec::getAppleChannelSpec(v13, CounterValueSafe);
    ChanSpecConvToApple80211Channel();
    uint64_t v15 = *(int ***)(*((void *)this + 9) + 17576);
    unsigned __int16 v16 = (unsigned __int16)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v31, (int *)4, a2, 8uLL);
    AppleBCMWLANChanSpec::getAppleChannelSpec(v15, v16);
    ChanSpecConvToApple80211Channel();
    *(void *)&v28[0] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v31, (int *)4, a2, 0);
    *((void *)&v29 + 1) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v31, (int *)4, a2, 0x10uLL);
    unsigned int v17 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v31, (int *)4, a2, 0xCuLL);
    if (OSData::getLength(a2) == 28) {
      unint64_t v30 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v31, (int *)4, a2, 0x18uLL);
    }
    goto LABEL_15;
  }
  if (Length == 20)
  {
    OSStringPtr v5 = (unsigned __int16 *)OSData::getBytesNoCopy(a2);
    int IsBitSet = AppleBCMWLANCore::featureFlagIsBitSet(this, 46);
    uint64_t v7 = *((void *)this + 9);
    if (IsBitSet)
    {
      __int16 AppleChannelSpec = AppleBCMWLANChanSpec::getAppleChannelSpec(*(int ***)(v7 + 17576), v5[4]);
      uint64_t v9 = *(AppleBCMWLANIOReporting **)(*((void *)this + 9) + 5520);
      if ((AppleChannelSpec & 0xC000) == 0)
      {
        uint64_t v10 = a2;
        uint64_t v11 = 1;
LABEL_14:
        unsigned int v31 = AppleBCMWLANIOReportingPerSlice::reportChannelSwitchV1PerSlice(v9, v10, v11);
        unsigned int v21 = *(int ***)(*((void *)this + 9) + 17576);
        unsigned __int16 v22 = (unsigned __int16)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v31, (int *)4, a2, 4uLL);
        AppleBCMWLANChanSpec::getAppleChannelSpec(v21, v22);
        ChanSpecConvToApple80211Channel();
        int v23 = *(int ***)(*((void *)this + 9) + 17576);
        unsigned __int16 v24 = (unsigned __int16)AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v31, (int *)4, a2, 8uLL);
        AppleBCMWLANChanSpec::getAppleChannelSpec(v23, v24);
        ChanSpecConvToApple80211Channel();
        *(void *)&v28[0] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v31, (int *)4, a2, 0);
        *((void *)&v29 + 1) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v31, (int *)4, a2, 0x10uLL);
        unsigned int v17 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v31, (int *)4, a2, 0xCuLL);
LABEL_15:
        uint64_t v18 = v31;
        if (!v31)
        {
          unsigned int v25 = v17 - 1;
          if (v17 > 0x1F) {
            unsigned int v25 = -1;
          }
          if (v25 > 0x1E) {
            int v26 = 0;
          }
          else {
            int v26 = dword_1003711D4[v25];
          }
          LODWORD(v29) = v26;
          IO80211Controller::postMessage(this, *(IO80211SkywalkInterface **)(*((void *)this + 9) + 11304), 0x99u, v28, 0x38uLL, 1);
          return v31;
        }
        return v18;
      }
    }
    else
    {
      uint64_t v9 = *(AppleBCMWLANIOReporting **)(v7 + 5520);
    }
    uint64_t v10 = a2;
    uint64_t v11 = 0;
    goto LABEL_14;
  }
  uint64_t v18 = 3758097084;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      int v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      int v20 = OSData::getLength(a2);
      CCLogStream::logAlert(v19, "[dk] %s@%d:Unknown payload length %d\n", "parseEventLogRecordChannelSwitch", 21085, v20);
    }
  }
  return v18;
}

uint64_t AppleBCMWLANCore::checkForSDBSupport(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 46);
}

uint64_t AppleBCMWLANCore::parseEventLogRecordRoamTargetEvaluation(AppleBCMWLANCore *this, OSData *a2)
{
  long long v4 = (char *)IOMallocZeroData();
  uint64_t v5 = IOMallocZeroData();
  if (v5)
  {
    uint64_t v6 = (char *)v5;
    if (a2)
    {
      if (OSData::getLength(a2) < 0x31)
      {
        BytesNoCopy = OSData::getBytesNoCopy(a2);
        size_t Length = OSData::getLength(a2);
        memcpy(v6, BytesNoCopy, Length);
        switch(*(_DWORD *)v6)
        {
          case 1:
            unsigned __int16 AppleChannelSpec = AppleBCMWLANChanSpec::getAppleChannelSpec(*(int ***)(*((void *)this + 9) + 17576), *((unsigned __int16 *)v6 + 10));
            if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
              || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
                  (CCLogStream::shouldLogConsole() & 1) == 0))
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
              {
                int v11 = *((_DWORD *)v6 + 1);
                int v10 = *((_DWORD *)v6 + 2);
                if (IO80211_io80211isDebuggable()) {
                  int v12 = *((_DWORD *)v6 + 3);
                }
                else {
                  int v12 = 0;
                }
                if (IO80211_io80211isDebuggable()) {
                  int v23 = *((_DWORD *)v6 + 4);
                }
                else {
                  int v23 = 0;
                }
                int v26 = AppleBCMWLANChanSpec::convToAscii(AppleChannelSpec, v4, 0x20u);
                int v27 = *((_DWORD *)v6 + 6);
                int v28 = *((_DWORD *)v6 + 7);
                int v29 = *((_DWORD *)v6 + 8);
                int v30 = *((_DWORD *)v6 + 9);
                int v31 = *((_DWORD *)v6 + 10);
                int v32 = *((_DWORD *)v6 + 11);
                *(_DWORD *)buf = 67112450;
                int v77 = 73;
                __int16 v78 = 2080;
                v79 = "parseEventLogRecordRoamTargetEvaluation";
                __int16 v80 = 1024;
                int v81 = 21142;
                __int16 v82 = 1024;
                *(_DWORD *)v83 = v11;
                *(_WORD *)&v83[4] = 1024;
                *(_DWORD *)&v83[6] = v10;
                __int16 v84 = 1024;
                *(_DWORD *)v85 = v12;
                *(_WORD *)&v85[4] = 1024;
                *(_DWORD *)&v85[6] = v23;
                *(_WORD *)v86 = 2080;
                *(void *)&v86[2] = v26;
                *(_WORD *)v87 = 1024;
                *(_DWORD *)&v87[2] = v27;
                *(_WORD *)v88 = 1024;
                *(_DWORD *)&v88[2] = v28;
                *(_WORD *)v89 = 1024;
                *(_DWORD *)&v89[2] = v29;
                *(_WORD *)v90 = 1024;
                *(_DWORD *)&v90[2] = v30;
                *(_WORD *)v91 = 1024;
                *(_DWORD *)&v91[2] = v31;
                *(_WORD *)v92 = 1024;
                *(_DWORD *)&v92[2] = v32;
                _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: LQM-WiFi-Roam: roamReason=%u roamType=%u home(bssid=%8x%4x chanSpec=%s, rssi=%d) prof[%d](flags=0x%x trigger=%d delta=%d) userOverride=%u\n", buf, 0x5Eu);
              }
            }
            if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
              goto LABEL_68;
            }
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (!CCLogStream::shouldLog()) {
              goto LABEL_68;
            }
            unint64_t v33 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            uint64_t v34 = *((unsigned int *)v6 + 1);
            uint64_t v35 = *((unsigned int *)v6 + 2);
            if (IO80211_io80211isDebuggable()) {
              unint64_t v36 = (char *)*((unsigned int *)v6 + 3);
            }
            else {
              unint64_t v36 = 0;
            }
            if (IO80211_io80211isDebuggable()) {
              long long v57 = (char *)*((unsigned int *)v6 + 4);
            }
            else {
              long long v57 = 0;
            }
            long long v60 = AppleBCMWLANChanSpec::convToAscii(AppleChannelSpec, v4, 0x20u);
            uint64_t v74 = *((unsigned int *)v6 + 10);
            uint64_t v75 = *((unsigned int *)v6 + 11);
            uint64_t v72 = *((unsigned int *)v6 + 8);
            uint64_t v73 = *((unsigned int *)v6 + 9);
            uint64_t v70 = *((unsigned int *)v6 + 6);
            uint64_t v71 = *((unsigned int *)v6 + 7);
            long long v68 = v57;
            long long v69 = v60;
            uint64_t v66 = v35;
            long long v67 = v36;
            uint64_t v65 = v34;
            uint64_t v61 = 21142;
            uint64_t v62 = "[dk] %s@%d:LQM-WiFi-Roam: roamReason=%u roamType=%u home(bssid=%8x%4x chanSpec=%s, rssi=%d) prof[%d](f"
                  "lags=0x%x trigger=%d delta=%d) userOverride=%u\n";
            goto LABEL_103;
          case 2:
            unsigned __int16 v15 = AppleBCMWLANChanSpec::getAppleChannelSpec(*(int ***)(*((void *)this + 9) + 17576), *((unsigned __int16 *)v6 + 6));
            if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
              || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
                  (CCLogStream::shouldLogConsole() & 1) == 0))
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
              {
                if (IO80211_io80211isDebuggable()) {
                  int v16 = *((_DWORD *)v6 + 1);
                }
                else {
                  int v16 = 0;
                }
                if (IO80211_io80211isDebuggable()) {
                  int v24 = *((_DWORD *)v6 + 2);
                }
                else {
                  int v24 = 0;
                }
                unint64_t v37 = AppleBCMWLANChanSpec::convToAscii(v15, v4, 0x20u);
                int v38 = *((_DWORD *)v6 + 4);
                int v39 = *((_DWORD *)v6 + 5);
                int v40 = *((_DWORD *)v6 + 6);
                int v41 = *((_DWORD *)v6 + 7);
                int v42 = *((_DWORD *)v6 + 8);
                *(_DWORD *)buf = 67111682;
                int v77 = 73;
                __int16 v78 = 2080;
                v79 = "parseEventLogRecordRoamTargetEvaluation";
                __int16 v80 = 1024;
                int v81 = 21151;
                __int16 v82 = 1024;
                *(_DWORD *)v83 = v16;
                *(_WORD *)&v83[4] = 1024;
                *(_DWORD *)&v83[6] = v24;
                __int16 v84 = 2080;
                *(void *)v85 = v37;
                *(_WORD *)&v85[8] = 1024;
                *(_DWORD *)v86 = v38;
                *(_WORD *)&v86[4] = 1024;
                *(_DWORD *)&v86[6] = v39;
                *(_WORD *)v87 = 1024;
                *(_DWORD *)&v87[2] = v40;
                *(_WORD *)v88 = 1024;
                *(_DWORD *)&v88[2] = v41;
                *(_WORD *)v89 = 1024;
                *(_DWORD *)&v89[2] = v42;
                _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: LQM-WiFi-Roam: apTargetRSSIScore: mac=%8x%4x chanSpec=%s, rssi=%d rssiBoosted=%d rssiScore=%u loadAAC=%u chanFree=%u\n", buf, 0x4Cu);
              }
            }
            if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
              goto LABEL_68;
            }
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (!CCLogStream::shouldLog()) {
              goto LABEL_68;
            }
            unint64_t v33 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (IO80211_io80211isDebuggable()) {
              uint64_t v43 = *((unsigned int *)v6 + 1);
            }
            else {
              uint64_t v43 = 0;
            }
            if (IO80211_io80211isDebuggable()) {
              uint64_t v58 = *((unsigned int *)v6 + 2);
            }
            else {
              uint64_t v58 = 0;
            }
            long long v63 = AppleBCMWLANChanSpec::convToAscii(v15, v4, 0x20u);
            uint64_t v71 = *((unsigned int *)v6 + 7);
            uint64_t v72 = *((unsigned int *)v6 + 8);
            long long v69 = (char *)*((unsigned int *)v6 + 5);
            uint64_t v70 = *((unsigned int *)v6 + 6);
            long long v67 = v63;
            long long v68 = (char *)*((unsigned int *)v6 + 4);
            uint64_t v65 = v43;
            uint64_t v66 = v58;
            uint64_t v61 = 21151;
            uint64_t v62 = "[dk] %s@%d:LQM-WiFi-Roam: apTargetRSSIScore: mac=%8x%4x chanSpec=%s, rssi=%d rssiBoosted=%d rssiScore="
                  "%u loadAAC=%u chanFree=%u\n";
            goto LABEL_103;
          case 3:
            unsigned __int16 v17 = AppleBCMWLANChanSpec::getAppleChannelSpec(*(int ***)(*((void *)this + 9) + 17576), *((unsigned __int16 *)v6 + 6));
            if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
              || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
                  (CCLogStream::shouldLogConsole() & 1) == 0))
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
              {
                if (IO80211_io80211isDebuggable()) {
                  int v18 = *((_DWORD *)v6 + 1);
                }
                else {
                  int v18 = 0;
                }
                if (IO80211_io80211isDebuggable()) {
                  int v25 = *((_DWORD *)v6 + 2);
                }
                else {
                  int v25 = 0;
                }
                unint64_t v44 = AppleBCMWLANChanSpec::convToAscii(v17, v4, 0x20u);
                int v45 = *((_DWORD *)v6 + 4);
                int v46 = *((_DWORD *)v6 + 5);
                int v47 = *((_DWORD *)v6 + 7);
                int v48 = *((_DWORD *)v6 + 8);
                int v49 = *((_DWORD *)v6 + 9);
                int v50 = *((_DWORD *)v6 + 10);
                int v51 = *((_DWORD *)v6 + 11);
                *(_DWORD *)buf = 67112450;
                int v77 = 73;
                __int16 v78 = 2080;
                v79 = "parseEventLogRecordRoamTargetEvaluation";
                __int16 v80 = 1024;
                int v81 = 21161;
                __int16 v82 = 1024;
                *(_DWORD *)v83 = v18;
                *(_WORD *)&v83[4] = 1024;
                *(_DWORD *)&v83[6] = v25;
                __int16 v84 = 2080;
                *(void *)v85 = v6 + 24;
                *(_WORD *)&v85[8] = 2080;
                *(void *)v86 = v44;
                *(_WORD *)&v86[8] = 1024;
                *(_DWORD *)v87 = v45;
                *(_WORD *)&v87[4] = 1024;
                *(_DWORD *)v88 = v46;
                *(_WORD *)&v88[4] = 1024;
                *(_DWORD *)v89 = v47;
                *(_WORD *)&v89[4] = 1024;
                *(_DWORD *)v90 = v48;
                *(_WORD *)&v90[4] = 1024;
                *(_DWORD *)v91 = v49;
                *(_WORD *)&v91[4] = 1024;
                *(_DWORD *)v92 = v50;
                *(_WORD *)&v92[4] = 1024;
                int v93 = v51;
                _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: LQM-WiFi-Roam: apTargetLoadScore: mac=%8x%4x(%2s) chanSpec=%s, rssi=%d rssiBoosted=%d rate=%u bw=%u nss=%u chanFree=%u loadScore=%u\n", buf, 0x62u);
              }
            }
            if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
              goto LABEL_68;
            }
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (!CCLogStream::shouldLog()) {
              goto LABEL_68;
            }
            unint64_t v33 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (IO80211_io80211isDebuggable()) {
              uint64_t v56 = *((unsigned int *)v6 + 1);
            }
            else {
              uint64_t v56 = 0;
            }
            if (IO80211_io80211isDebuggable()) {
              uint64_t v59 = *((unsigned int *)v6 + 2);
            }
            else {
              uint64_t v59 = 0;
            }
            uint64_t v64 = AppleBCMWLANChanSpec::convToAscii(v17, v4, 0x20u);
            uint64_t v74 = *((unsigned int *)v6 + 10);
            uint64_t v75 = *((unsigned int *)v6 + 11);
            uint64_t v72 = *((unsigned int *)v6 + 8);
            uint64_t v73 = *((unsigned int *)v6 + 9);
            uint64_t v70 = *((unsigned int *)v6 + 5);
            uint64_t v71 = *((unsigned int *)v6 + 7);
            long long v68 = v64;
            long long v69 = (char *)*((unsigned int *)v6 + 4);
            uint64_t v66 = v59;
            long long v67 = v6 + 24;
            uint64_t v65 = v56;
            uint64_t v61 = 21161;
            uint64_t v62 = "[dk] %s@%d:LQM-WiFi-Roam: apTargetLoadScore: mac=%8x%4x(%2s) chanSpec=%s, rssi=%d rssiBoosted=%d rate="
                  "%u bw=%u nss=%u chanFree=%u loadScore=%u\n";
LABEL_103:
            CCLogStream::logInfo(v33, v62, "parseEventLogRecordRoamTargetEvaluation", v61, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75);
            goto LABEL_68;
          case 4:
            if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
              || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
                  (CCLogStream::shouldLogConsole() & 1) == 0))
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
              {
                int v19 = *((_DWORD *)v6 + 1);
                int v20 = *((_DWORD *)v6 + 2);
                int v21 = *((_DWORD *)v6 + 3);
                *(_DWORD *)buf = 67110402;
                int v77 = 73;
                __int16 v78 = 2080;
                v79 = "parseEventLogRecordRoamTargetEvaluation";
                __int16 v80 = 1024;
                int v81 = 21165;
                __int16 v82 = 1024;
                *(_DWORD *)v83 = v19;
                *(_WORD *)&v83[4] = 1024;
                *(_DWORD *)&v83[6] = v20;
                __int16 v84 = 1024;
                *(_DWORD *)v85 = v21;
                _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: LQM-WiFi-Roam: refScore=%u scoreDelta=%u numTargets=%u\n", buf, 0x2Au);
              }
            }
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (CCLogStream::shouldLog())
              {
                unsigned __int16 v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                CCLogStream::logInfo(v22, "[dk] %s@%d:LQM-WiFi-Roam: refScore=%u scoreDelta=%u numTargets=%u\n");
              }
            }
            goto LABEL_68;
          default:
            if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
              || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
                  (CCLogStream::shouldLogConsole() & 1) == 0))
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109634;
                int v77 = 65;
                __int16 v78 = 2080;
                v79 = "parseEventLogRecordRoamTargetEvaluation";
                __int16 v80 = 1024;
                int v81 = 21167;
                _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: LQM-WiFi-Roam: Roam Target Evaluation unknown type\n", buf, 0x18u);
              }
            }
            uint64_t v13 = 3758097090;
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (CCLogStream::shouldLog())
              {
                OSNumberPtr v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                CCLogStream::logAlert(v14, "[dk] %s@%d:LQM-WiFi-Roam: Roam Target Evaluation unknown type\n", "parseEventLogRecordRoamTargetEvaluation", 21167);
                uint64_t v13 = 3758097090;
              }
            }
            goto LABEL_69;
        }
      }
      if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
        || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
            (CCLogStream::shouldLogConsole() & 1) == 0))
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109890;
          int v77 = 65;
          __int16 v78 = 2080;
          v79 = "parseEventLogRecordRoamTargetEvaluation";
          __int16 v80 = 1024;
          int v81 = 21128;
          __int16 v82 = 2048;
          *(void *)v83 = 48;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: Insufficient buf sized wl_roam_target_evaluation_t %ld to hold payload", buf, 0x22u);
        }
      }
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unint64_t v54 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v54, "[dk] %s@%d:Insufficient buf sized wl_roam_target_evaluation_t %ld to hold payload", "parseEventLogRecordRoamTargetEvaluation", 21128, 48);
        }
      }
LABEL_68:
      uint64_t v13 = 0;
    }
    else
    {
      if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
        || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
            (CCLogStream::shouldLogConsole() & 1) == 0))
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109634;
          int v77 = 65;
          __int16 v78 = 2080;
          v79 = "parseEventLogRecordRoamTargetEvaluation";
          __int16 v80 = 1024;
          int v81 = 21127;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: Received NULL pointer\n", buf, 0x18u);
        }
      }
      uint64_t v13 = 3758097084;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unint64_t v53 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v53, "[dk] %s@%d:Received NULL pointer\n", "parseEventLogRecordRoamTargetEvaluation", 21127);
        }
      }
    }
LABEL_69:
    IOFreeData();
    if (v4) {
LABEL_70:
    }
      IOFreeData();
  }
  else
  {
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
      || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
          (CCLogStream::shouldLogConsole() & 1) == 0))
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109634;
        int v77 = 65;
        __int16 v78 = 2080;
        v79 = "parseEventLogRecordRoamTargetEvaluation";
        __int16 v80 = 1024;
        int v81 = 21124;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: Failed to allocate wl_roam_target_evaluation_t buf", buf, 0x18u);
      }
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v55 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v55, "[dk] %s@%d:Failed to allocate wl_roam_target_evaluation_t buf", "parseEventLogRecordRoamTargetEvaluation", 21124);
      }
    }
    uint64_t v13 = 0;
    if (v4) {
      goto LABEL_70;
    }
  }
  return v13;
}

uint64_t AppleBCMWLANCore::parseEventLogRecordKvrReport(AppleBCMWLANCore *this, OSData *a2)
{
  v102 = 0;
  size_t v103 = 0;
  if (!a2)
  {
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
      return 0;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (!CCLogStream::shouldLog()) {
      return 0;
    }
    uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    uint64_t v91 = 21190;
    uint64_t v5 = "[dk] %s@%d:LQM-WiFi-Roam-kvr: NULL payload\n";
    goto LABEL_14;
  }
  if (OSData::getLength(a2) >= 0x2D)
  {
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
      || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
          (CCLogStream::shouldLogConsole() & 1) == 0))
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109890;
        int v105 = 65;
        __int16 v106 = 2080;
        v107 = "parseEventLogRecordKvrReport";
        __int16 v108 = 1024;
        int v109 = 21195;
        __int16 v110 = 2048;
        *(void *)v111 = OSData::getLength(a2);
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: Payload too large %ld", buf, 0x22u);
      }
    }
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
      return 0;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (!CCLogStream::shouldLog()) {
      return 0;
    }
    uint64_t v4 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    uint64_t v91 = 21195;
    size_t Length = OSData::getLength(a2);
    uint64_t v5 = "[dk] %s@%d:Payload too large %ld";
LABEL_10:
    uint64_t v6 = (CCLogStream *)v4;
LABEL_14:
    CCLogStream::logAlert(v6, v5, "parseEventLogRecordKvrReport", v91, Length);
    return 0;
  }
  BytesNoCopy = OSData::getBytesNoCopy(a2);
  size_t v8 = OSData::getLength(a2);
  if (!BytesNoCopy || v8 - 0x4000000000000000 <= 0xC000000000000000)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        v89 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v89, "[dk] %s@%d:LQM-WiFi-Roam-kvr: Invalid kvrCursor IO80211BufferCursor\n");
      }
    }
    return 0;
  }
  v102 = BytesNoCopy;
  size_t v103 = v8;
  uint64_t v9 = IO80211BufferCursor::asType<bcmv3_awdl_scan_event_data_min>((uint64_t *)&v102, 0, (const char *)4);
  int v11 = (_DWORD *)(v9 + (v10 >> 32));
  if (__CFADD__(v9, v10 >> 32)) {
    uint64_t v12 = (v10 >> 63) + 1;
  }
  else {
    uint64_t v12 = v10 >> 63;
  }
  uint64_t v13 = v12 << 63 >> 63;
  if (v13 != v12 || v13 < 0) {
    goto LABEL_154;
  }
  unint64_t v14 = v10;
  uint64_t v15 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (!v11)
  {
    if (!v15) {
      return 0;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (!CCLogStream::shouldLog()) {
      return 0;
    }
    uint64_t v4 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    uint64_t v91 = 21207;
    size_t Length = OSData::getLength(a2);
    uint64_t v5 = "[dk] %s@%d:LQM-WiFi-Roam-kvr: not enough space for the kvr type payoad. length is %ld\n";
    goto LABEL_10;
  }
  if (!v15
    || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
        (CCLogStream::shouldLogConsole() & 1) == 0))
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      if ((v14 & 0x8000000000000000) != 0 || HIDWORD(v14) + 4 > v14) {
        goto LABEL_161;
      }
      int v17 = *v11;
      *(_DWORD *)buf = 67109890;
      int v105 = 73;
      __int16 v106 = 2080;
      v107 = "parseEventLogRecordKvrReport";
      __int16 v108 = 1024;
      int v109 = 21209;
      __int16 v110 = 1024;
      *(_DWORD *)v111 = v17;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: LQM-WiFi-Roam-kvr:Type: %d\n", buf, 0x1Eu);
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
    && ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
        CCLogStream::shouldLog()))
  {
    v90 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if ((v14 & 0x8000000000000000) != 0 || HIDWORD(v14) + 4 > v14) {
      goto LABEL_161;
    }
    CCLogStream::logInfo(v90, "[dk] %s@%d:LQM-WiFi-Roam-kvr:Type: %d\n", "parseEventLogRecordKvrReport", 21209, *v11);
  }
  else if ((v14 & 0x8000000000000000) != 0 || HIDWORD(v14) + 4 > v14)
  {
    goto LABEL_161;
  }
  if (*v11 == 1)
  {
    uint64_t v18 = IO80211BufferCursor::asType<wl_roam_11kvr_bcn_rpt_req_v1>((uint64_t *)&v102, 0, (const char *)0x28);
    int v19 = (_DWORD *)(v18 + (v10 >> 32));
    if (__CFADD__(v18, v10 >> 32)) {
      uint64_t v20 = (v10 >> 63) + 1;
    }
    else {
      uint64_t v20 = v10 >> 63;
    }
    uint64_t v21 = v20 << 63 >> 63;
    if (v21 == v20 && (v21 & 0x8000000000000000) == 0)
    {
      unint64_t v22 = v10;
      uint64_t v23 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (!v19)
      {
        if (!v23) {
          return 0;
        }
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (!CCLogStream::shouldLog()) {
          return 0;
        }
        uint64_t v4 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v91 = 21214;
        size_t Length = OSData::getLength(a2);
        uint64_t v5 = "[dk] %s@%d:LQM-WiFi-Roam-kvr: not enough space for the wl_roam_11kvr_bcn_rpt_req_v1 payload. length is %ld\n";
        goto LABEL_10;
      }
      if (!v23
        || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
            (CCLogStream::shouldLogConsole() & 1) == 0))
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          if ((v22 & 0x8000000000000000) != 0 || HIDWORD(v22) + 40 > v22) {
            goto LABEL_170;
          }
          int v25 = v19[2];
          int v26 = v19[3];
          int v27 = v19[4];
          int v28 = v19[5];
          int v29 = v19[6];
          int v30 = v19[7];
          int v31 = v19[8];
          int v32 = v19[9];
          *(_DWORD *)buf = 67111682;
          int v105 = 73;
          __int16 v106 = 2080;
          v107 = "parseEventLogRecordKvrReport";
          __int16 v108 = 1024;
          int v109 = 21216;
          __int16 v110 = 1024;
          *(_DWORD *)v111 = v25;
          *(_WORD *)&v111[4] = 1024;
          *(_DWORD *)&v111[6] = v26;
          __int16 v112 = 1024;
          int v113 = v27;
          __int16 v114 = 1024;
          int v115 = v28;
          __int16 v116 = 1024;
          int v117 = v29;
          __int16 v118 = 1024;
          int v119 = v30;
          __int16 v120 = 1024;
          int v121 = v31;
          __int16 v122 = 1024;
          int v123 = v32;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: LQM-WiFi-Roam-kvr: kvrPayloadBcnRptReq: operating_class=%u requesting_channel_number=%u bcn_mode=%u bssid_hi=%u bssid_lo=%u duration=%u channel_num=%u bcm_chanspec=0x%x \n", buf, 0x48u);
        }
      }
      if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
        return 0;
      }
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (!CCLogStream::shouldLog()) {
        return 0;
      }
      int v50 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if ((v22 & 0x8000000000000000) == 0 && HIDWORD(v22) + 40 <= v22)
      {
        uint64_t v99 = v19[8];
        uint64_t v100 = v19[9];
        uint64_t v97 = v19[6];
        uint64_t v98 = v19[7];
        uint64_t v95 = v19[4];
        uint64_t v96 = v19[5];
        uint64_t v93 = v19[2];
        uint64_t v94 = v19[3];
        uint64_t v51 = 21216;
        unint64_t v52 = "[dk] %s@%d:LQM-WiFi-Roam-kvr: kvrPayloadBcnRptReq: operating_class=%u requesting_channel_number=%u bcn_mod"
              "e=%u bssid_hi=%u bssid_lo=%u duration=%u channel_num=%u bcm_chanspec=0x%x \n";
LABEL_168:
        CCLogStream::logInfo(v50, v52, "parseEventLogRecordKvrReport", v51, v93, v94, v95, v96, v97, v98, v99, v100, v101);
        return 0;
      }
LABEL_170:
      os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"bounded_ptr<T>::operator->: Accessing a member through this pointer would access memory outside of the bounds set originally", v24);
    }
LABEL_154:
    os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", (const char *)v10);
  }
  if (HIDWORD(v14) + 4 > v14) {
LABEL_161:
  }
    os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"bounded_ptr<T>::operator*: Dereferencing this pointer would access memory outside of the bounds set originally", v16);
  switch(*v11)
  {
    case 2:
      uint64_t v35 = IO80211BufferCursor::asType<wl_roam_11kvr_bcn_rpt_resp_v1>((uint64_t *)&v102, 0, (const char *)0x2C);
      unint64_t v36 = (_DWORD *)(v35 + (v10 >> 32));
      if (__CFADD__(v35, v10 >> 32)) {
        uint64_t v37 = (v10 >> 63) + 1;
      }
      else {
        uint64_t v37 = v10 >> 63;
      }
      uint64_t v38 = v37 << 63 >> 63;
      if (v38 != v37 || v38 < 0) {
        goto LABEL_154;
      }
      unint64_t v39 = v10;
      uint64_t v40 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (!v36)
      {
        if (!v40) {
          return 0;
        }
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (!CCLogStream::shouldLog()) {
          return 0;
        }
        uint64_t v4 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v91 = 21221;
        size_t Length = OSData::getLength(a2);
        uint64_t v5 = "[dk] %s@%d:LQM-WiFi-Roam-kvr: not enough space for the wl_roam_11kvr_bcn_rpt_resp_v1 payload. length is %ld\n";
        goto LABEL_10;
      }
      if (v40)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLogConsole()) {
          goto LABEL_65;
        }
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_65;
      }
      if ((v39 & 0x8000000000000000) != 0 || HIDWORD(v39) + 44 > v39) {
        goto LABEL_170;
      }
      int v41 = v36[2];
      int v42 = v36[3];
      int v43 = v36[4];
      int v44 = v36[5];
      int v45 = v36[6];
      int v46 = v36[7];
      int v47 = v36[8];
      int v48 = v36[9];
      int v49 = v36[10];
      *(_DWORD *)buf = 67111938;
      int v105 = 73;
      __int16 v106 = 2080;
      v107 = "parseEventLogRecordKvrReport";
      __int16 v108 = 1024;
      int v109 = 21223;
      __int16 v110 = 1024;
      *(_DWORD *)v111 = v41;
      *(_WORD *)&v111[4] = 1024;
      *(_DWORD *)&v111[6] = v42;
      __int16 v112 = 1024;
      int v113 = v43;
      __int16 v114 = 1024;
      int v115 = v45;
      __int16 v116 = 1024;
      int v117 = v44;
      __int16 v118 = 1024;
      int v119 = v46;
      __int16 v120 = 1024;
      int v121 = v47;
      __int16 v122 = 1024;
      int v123 = v48;
      __int16 v124 = 1024;
      int v125 = v49;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: LQM-WiFi-Roam-kvr: kvrPayloadBcnRptRsp:  index_of_AP_in_report=%u num_aps=%u meas_mode=%u bssid_hi=%u bssid_lo=%u ssid_match=%u bcm_chanspec=0x%x rssi=%d snr=%d \n", buf, 0x4Eu);
LABEL_65:
      if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
        return 0;
      }
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (!CCLogStream::shouldLog()) {
        return 0;
      }
      int v50 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if ((v39 & 0x8000000000000000) != 0 || HIDWORD(v39) + 44 > v39) {
        goto LABEL_170;
      }
      uint64_t v100 = v36[9];
      uint64_t v101 = v36[10];
      uint64_t v98 = v36[7];
      uint64_t v99 = v36[8];
      uint64_t v96 = v36[6];
      uint64_t v97 = v36[5];
      uint64_t v94 = v36[3];
      uint64_t v95 = v36[4];
      uint64_t v93 = v36[2];
      uint64_t v51 = 21223;
      unint64_t v52 = "[dk] %s@%d:LQM-WiFi-Roam-kvr: kvrPayloadBcnRptRsp:  index_of_AP_in_report=%u num_aps=%u meas_mode=%u bssid_h"
            "i=%u bssid_lo=%u ssid_match=%u bcm_chanspec=0x%x rssi=%d snr=%d \n";
      goto LABEL_168;
    case 3:
      uint64_t v54 = IO80211BufferCursor::asType<wl_roam_11kvr_nbr_rpt_req_v1>((uint64_t *)&v102, 0, (const char *)0xC);
      uint64_t v55 = v54 + (v10 >> 32);
      if (__CFADD__(v54, v10 >> 32)) {
        uint64_t v56 = (v10 >> 63) + 1;
      }
      else {
        uint64_t v56 = v10 >> 63;
      }
      uint64_t v57 = v56 << 63 >> 63;
      if (v57 != v56 || v57 < 0) {
        goto LABEL_154;
      }
      unint64_t v58 = v10;
      uint64_t v59 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (!v55)
      {
        if (!v59) {
          return 0;
        }
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (!CCLogStream::shouldLog()) {
          return 0;
        }
        uint64_t v4 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v91 = 21228;
        size_t Length = OSData::getLength(a2);
        uint64_t v5 = "[dk] %s@%d:LQM-WiFi-Roam-kvr: not enough space for the wl_roam_11kvr_nbr_rpt_req_v1 payload. length is %ld\n";
        goto LABEL_10;
      }
      if (v59)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLogConsole()) {
          goto LABEL_89;
        }
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_89;
      }
      if ((v58 & 0x8000000000000000) != 0 || HIDWORD(v58) + 12 > v58) {
        goto LABEL_170;
      }
      int v60 = *(_DWORD *)(v55 + 8);
      *(_DWORD *)buf = 67109890;
      int v105 = 73;
      __int16 v106 = 2080;
      v107 = "parseEventLogRecordKvrReport";
      __int16 v108 = 1024;
      int v109 = 21229;
      __int16 v110 = 1024;
      *(_DWORD *)v111 = v60;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: LQM-WiFi-Roam-kvr: nbr_report_req: token=%u \n", buf, 0x1Eu);
LABEL_89:
      if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
        return 0;
      }
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (!CCLogStream::shouldLog()) {
        return 0;
      }
      uint64_t v61 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if ((v58 & 0x8000000000000000) != 0 || HIDWORD(v58) + 12 > v58) {
        goto LABEL_170;
      }
      CCLogStream::logInfo(v61, "[dk] %s@%d:LQM-WiFi-Roam-kvr: nbr_report_req: token=%u \n");
      return 0;
    case 4:
      uint64_t v62 = IO80211BufferCursor::asType<wl_roam_11kvr_nbr_rpt_resp_v1>((uint64_t *)&v102, 0, (const char *)0x10);
      uint64_t v63 = v62 + (v10 >> 32);
      if (__CFADD__(v62, v10 >> 32)) {
        uint64_t v64 = (v10 >> 63) + 1;
      }
      else {
        uint64_t v64 = v10 >> 63;
      }
      uint64_t v65 = v64 << 63 >> 63;
      if (v65 != v64 || v65 < 0) {
        goto LABEL_154;
      }
      unint64_t v66 = v10;
      uint64_t v67 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (!v63)
      {
        if (!v67) {
          return 0;
        }
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (!CCLogStream::shouldLog()) {
          return 0;
        }
        uint64_t v4 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v91 = 21234;
        size_t Length = OSData::getLength(a2);
        uint64_t v5 = "[dk] %s@%d:LQM-WiFi-Roam-kvr: not enough space for the wl_roam_11kvr_nbr_rpt_resp_v1 payload. length is %ld\n";
        goto LABEL_10;
      }
      if (v67)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLogConsole()) {
          goto LABEL_106;
        }
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_106;
      }
      if ((v66 & 0x8000000000000000) != 0 || HIDWORD(v66) + 16 > v66) {
        goto LABEL_170;
      }
      int v68 = *(_DWORD *)(v63 + 8);
      int v69 = *(_DWORD *)(v63 + 12);
      *(_DWORD *)buf = 67110146;
      int v105 = 73;
      __int16 v106 = 2080;
      v107 = "parseEventLogRecordKvrReport";
      __int16 v108 = 1024;
      int v109 = 21236;
      __int16 v110 = 1024;
      *(_DWORD *)v111 = v68;
      *(_WORD *)&v111[4] = 1024;
      *(_DWORD *)&v111[6] = v69;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: LQM-WiFi-Roam-kvr: nbr_report_rsp:  channel_num=%u bcm_chanspec=0x%x \n", buf, 0x24u);
LABEL_106:
      if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
        return 0;
      }
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (!CCLogStream::shouldLog()) {
        return 0;
      }
      uint64_t v70 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if ((v66 & 0x8000000000000000) != 0 || HIDWORD(v66) + 16 > v66) {
        goto LABEL_170;
      }
      CCLogStream::logInfo(v70, "[dk] %s@%d:LQM-WiFi-Roam-kvr: nbr_report_rsp:  channel_num=%u bcm_chanspec=0x%x \n");
      return 0;
    case 5:
      uint64_t v71 = IO80211BufferCursor::asType<wl_roam_11kvr_nbr_rpt_req_v1>((uint64_t *)&v102, 0, (const char *)0xC);
      uint64_t v72 = v71 + (v10 >> 32);
      if (__CFADD__(v71, v10 >> 32)) {
        uint64_t v73 = (v10 >> 63) + 1;
      }
      else {
        uint64_t v73 = v10 >> 63;
      }
      uint64_t v74 = v73 << 63 >> 63;
      if (v74 != v73 || v74 < 0) {
        goto LABEL_154;
      }
      unint64_t v75 = v10;
      uint64_t v76 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (!v72)
      {
        if (!v76) {
          return 0;
        }
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (!CCLogStream::shouldLog()) {
          return 0;
        }
        uint64_t v4 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v91 = 21241;
        size_t Length = OSData::getLength(a2);
        uint64_t v5 = "[dk] %s@%d:LQM-WiFi-Roam-kvr: not enough space for the wl_roam_11kvr_dms_req_v1 payload. length is %ld\n";
        goto LABEL_10;
      }
      if (v76)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLogConsole()) {
          goto LABEL_123;
        }
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_123;
      }
      if ((v75 & 0x8000000000000000) != 0 || HIDWORD(v75) + 12 > v75) {
        goto LABEL_170;
      }
      int v77 = *(_DWORD *)(v72 + 8);
      *(_DWORD *)buf = 67109890;
      int v105 = 73;
      __int16 v106 = 2080;
      v107 = "parseEventLogRecordKvrReport";
      __int16 v108 = 1024;
      int v109 = 21243;
      __int16 v110 = 1024;
      *(_DWORD *)v111 = v77;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: LQM-WiFi-Roam-kvr: dms_req: token=%u \n", buf, 0x1Eu);
LABEL_123:
      if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
        return 0;
      }
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (!CCLogStream::shouldLog()) {
        return 0;
      }
      __int16 v78 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if ((v75 & 0x8000000000000000) != 0 || HIDWORD(v75) + 12 > v75) {
        goto LABEL_170;
      }
      CCLogStream::logInfo(v78, "[dk] %s@%d:LQM-WiFi-Roam-kvr: dms_req: token=%u \n");
      return 0;
    case 6:
      uint64_t v79 = IO80211BufferCursor::asType<wl_roam_11kvr_nbr_rpt_req_v1>((uint64_t *)&v102, 0, (const char *)0xC);
      uint64_t v80 = v79 + (v10 >> 32);
      if (__CFADD__(v79, v10 >> 32)) {
        uint64_t v81 = (v10 >> 63) + 1;
      }
      else {
        uint64_t v81 = v10 >> 63;
      }
      uint64_t v82 = v81 << 63 >> 63;
      if (v82 != v81 || v82 < 0) {
        goto LABEL_154;
      }
      unint64_t v83 = v10;
      uint64_t v84 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (!v80)
      {
        if (!v84) {
          return 0;
        }
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (!CCLogStream::shouldLog()) {
          return 0;
        }
        uint64_t v4 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v91 = 21248;
        size_t Length = OSData::getLength(a2);
        uint64_t v5 = "[dk] %s@%d:LQM-WiFi-Roam-kvr: not enough space for the wl_roam_11kvr_dms_resp_v1 payload. length is %ld\n";
        goto LABEL_10;
      }
      if (v84)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLogConsole()) {
          goto LABEL_140;
        }
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_140;
      }
      if ((v83 & 0x8000000000000000) != 0 || HIDWORD(v83) + 12 > v83) {
        goto LABEL_170;
      }
      int v85 = *(_DWORD *)(v80 + 8);
      *(_DWORD *)buf = 67109890;
      int v105 = 73;
      __int16 v106 = 2080;
      v107 = "parseEventLogRecordKvrReport";
      __int16 v108 = 1024;
      int v109 = 21250;
      __int16 v110 = 1024;
      *(_DWORD *)v111 = v85;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: LQM-WiFi-Roam-kvr: dms_rsp: token=%u \n", buf, 0x1Eu);
LABEL_140:
      if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
        return 0;
      }
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (!CCLogStream::shouldLog()) {
        return 0;
      }
      v86 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if ((v83 & 0x8000000000000000) != 0 || HIDWORD(v83) + 12 > v83) {
        goto LABEL_170;
      }
      CCLogStream::logInfo(v86, "[dk] %s@%d:LQM-WiFi-Roam-kvr: dms_rsp: token=%u \n");
      break;
    case 7:
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          v87 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v87, "[dk] %s@%d:LQM-WiFi-Roam-kvr: Unhandled WLC_FBT_ODS_REQ. Phase 2\n");
        }
      }
      return 0;
    case 8:
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          v88 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v88, "[dk] %s@%d:LQM-WiFi-Roam-kvr: Unhandled WLC_FBT_ODS_RESP. Phase 2\n");
        }
      }
      return 0;
    default:
      if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
        || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
            (CCLogStream::shouldLogConsole() & 1) == 0))
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109890;
          int v105 = 65;
          __int16 v106 = 2080;
          v107 = "parseEventLogRecordKvrReport";
          __int16 v108 = 1024;
          int v109 = 21262;
          __int16 v110 = 2080;
          *(void *)v111 = "parseEventLogRecordKvrReport";
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: %s LQM-WiFi-Roam-kvr: kvr Report unknown type\n", buf, 0x22u);
        }
      }
      uint64_t v33 = 3758097090;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unint64_t v53 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v53, "[dk] %s@%d:%s LQM-WiFi-Roam-kvr: kvr Report unknown type\n", "parseEventLogRecordKvrReport", 21262, "parseEventLogRecordKvrReport");
        }
      }
      return v33;
  }
  return 0;
}

uint64_t IO80211BufferCursor::asType<wl_roam_11kvr_bcn_rpt_req_v1>(uint64_t *a1, uint64_t a2, const char *a3)
{
  uint64_t result = IO80211BufferCursor::_asType<wl_roam_11kvr_bcn_rpt_req_v1>(a1, a2, a3);
  if (__CFADD__(result, (uint64_t)v4 >> 32)) {
    uint64_t v5 = ((uint64_t)v4 >> 63) + 1;
  }
  else {
    uint64_t v5 = (uint64_t)v4 >> 63;
  }
  uint64_t v6 = v5 << 63 >> 63;
  if (v6 != v5 || v6 < 0) {
    os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", v4);
  }
  return result;
}

uint64_t IO80211BufferCursor::asType<wl_roam_11kvr_bcn_rpt_resp_v1>(uint64_t *a1, uint64_t a2, const char *a3)
{
  uint64_t result = IO80211BufferCursor::_asType<wl_roam_11kvr_bcn_rpt_resp_v1>(a1, a2, a3);
  if (__CFADD__(result, (uint64_t)v4 >> 32)) {
    uint64_t v5 = ((uint64_t)v4 >> 63) + 1;
  }
  else {
    uint64_t v5 = (uint64_t)v4 >> 63;
  }
  uint64_t v6 = v5 << 63 >> 63;
  if (v6 != v5 || v6 < 0) {
    os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", v4);
  }
  return result;
}

uint64_t IO80211BufferCursor::asType<wl_roam_11kvr_nbr_rpt_req_v1>(uint64_t *a1, uint64_t a2, const char *a3)
{
  uint64_t result = IO80211BufferCursor::_asType<wl_roam_11kvr_nbr_rpt_req_v1>(a1, a2, a3);
  if (__CFADD__(result, (uint64_t)v4 >> 32)) {
    uint64_t v5 = ((uint64_t)v4 >> 63) + 1;
  }
  else {
    uint64_t v5 = (uint64_t)v4 >> 63;
  }
  uint64_t v6 = v5 << 63 >> 63;
  if (v6 != v5 || v6 < 0) {
    os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", v4);
  }
  return result;
}

uint64_t IO80211BufferCursor::asType<wl_roam_11kvr_nbr_rpt_resp_v1>(uint64_t *a1, uint64_t a2, const char *a3)
{
  uint64_t result = IO80211BufferCursor::_asType<wl_roam_11kvr_nbr_rpt_resp_v1>(a1, a2, a3);
  if (__CFADD__(result, (uint64_t)v4 >> 32)) {
    uint64_t v5 = ((uint64_t)v4 >> 63) + 1;
  }
  else {
    uint64_t v5 = (uint64_t)v4 >> 63;
  }
  uint64_t v6 = v5 << 63 >> 63;
  if (v6 != v5 || v6 < 0) {
    os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", v4);
  }
  return result;
}

uint64_t AppleBCMWLANCore::parseEventLogRecordLTECoexStatsPerSlice(AppleBCMWLANCore *a1, OSData *a2, uint64_t a3)
{
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 73))
  {
    if ((int)a3 >= 2)
    {
      uint64_t v8 = 3758097084;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          unint64_t v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logAlert(v14, "[dk] %s@%d:Invalid sliceIndex %d\n");
        }
      }
    }
    else
    {
      if (*(_WORD *)OSData::getBytesNoCopy(a2) == 1)
      {
        if (OSData::getLength(a2) == 160)
        {
          if (OSData::getLength(a2) == 160)
          {
            uint64_t v6 = AppleBCMWLANCore::convertInfraLTECoexStatisticsToApple80211Counters((uint64_t)a1, a2);
            if (v6)
            {
              uint64_t v8 = v6;
              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
              {
                (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                  CCLogStream::logAlert(v15, "[dk] %s@%d:failed to convertInfraLTECoexStatisticsToApple80211Counters\n");
                }
              }
            }
            else
            {
              uint64_t v7 = *(AppleBCMWLANIOReporting **)(*((void *)a1 + 9) + 5520);
              if (v7)
              {
                uint64_t v8 = AppleBCMWLANIOReportingPerSlice::reportLTECoexStatisticsPerSlice(v7, a2, a3);
                if (v8)
                {
                  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
                  {
                    (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                    if (CCLogStream::shouldLog())
                    {
                      uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                      CCLogStream::logAlert(v9, "[dk] %s@%d:failed to reportLTECoexStatisticsPerSlice\n");
                    }
                  }
                }
              }
              else
              {
                return 0;
              }
            }
            return v8;
          }
          uint64_t v8 = 3758097084;
          if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)) {
            return v8;
          }
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (!CCLogStream::shouldLog()) {
            return v8;
          }
        }
        else
        {
          uint64_t v8 = 3758097084;
          if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)) {
            return v8;
          }
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (!CCLogStream::shouldLog()) {
            return v8;
          }
        }
        uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        OSData::getLength(a2);
        CCLogStream::logAlert(v12, "[dk] %s@%d:LTECoex stats size mismatch, have %d, expected %ld\n");
        return v8;
      }
      uint64_t v8 = 3758097084;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          int v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logAlert(v11, "[dk] %s@%d:LTECoex stats version mismatch, found %d\n");
        }
      }
    }
  }
  else
  {
    uint64_t v8 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v10, "[dk] %s@%d:LTECX capability is missing for this chipset/FW\n");
      }
    }
  }
  return v8;
}

uint64_t AppleBCMWLANCore::convertInfraLTECoexStatisticsToApple80211Counters(uint64_t a1, OSData *a2)
{
  unsigned int v11 = 0;
  uint64_t v4 = (void *)IOMallocZeroData();
  memset(v12, 170, sizeof(v12));
  AppleBCMWLANUtil::AutoreleasedAlignedOSData::AutoreleasedAlignedOSData((AppleBCMWLANUtil::AutoreleasedAlignedOSData *)v12, a2, 2);
  uint64_t v5 = v12[0];
  if (v12[0])
  {
    if (v4)
    {
      v4[4] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)2, v12[0], 0x8CuLL);
      *uint64_t v4 = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)2, v5, 0x8EuLL);
      v4[1] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)2, v5, 0x90uLL);
      v4[6] = v4[4];
      v4[7] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)2, v5, 0x98uLL);
      v4[8] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v11, (int *)2, v5, 0x96uLL);
      if (IO80211Controller::setLTECoexstat())
      {
        uint64_t v6 = v11;
      }
      else
      {
        if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(uint64_t))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            int64_t v10 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1);
            CCLogStream::logEmergency(v10, "[dk] %s@%d:setLTECoexstat failed\n", "convertInfraLTECoexStatisticsToApple80211Counters", 31037);
          }
        }
        uint64_t v6 = 3758097084;
        unsigned int v11 = -536870212;
      }
      AppleBCMWLANUtil::AutoreleasedAlignedOSData::~AutoreleasedAlignedOSData((AppleBCMWLANUtil::AutoreleasedAlignedOSData *)v12);
LABEL_6:
      IOFreeData();
      return v6;
    }
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1);
        CCLogStream::logEmergency(v9, "[dk] %s@%d:Failed to allocate buffer\n", "convertInfraLTECoexStatisticsToApple80211Counters", 31022);
      }
    }
    uint64_t v6 = 3758097084;
    AppleBCMWLANUtil::AutoreleasedAlignedOSData::~AutoreleasedAlignedOSData((AppleBCMWLANUtil::AutoreleasedAlignedOSData *)v12);
  }
  else
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1);
        CCLogStream::logEmergency(v8, "[dk] %s@%d:Failed to allocate alignedCounters\n", "convertInfraLTECoexStatisticsToApple80211Counters", 31019);
      }
    }
    uint64_t v6 = 3758097084;
    unsigned int v11 = -536870212;
    AppleBCMWLANUtil::AutoreleasedAlignedOSData::~AutoreleasedAlignedOSData((AppleBCMWLANUtil::AutoreleasedAlignedOSData *)v12);
    if (v4) {
      goto LABEL_6;
    }
  }
  return v6;
}

uint64_t AppleBCMWLANCore::parseEventLogRecordControlManagementFrameCounts(AppleBCMWLANCore *this, OSData *a2)
{
  uint64_t v4 = 3758097084;
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v28 = v5;
  long long v29 = v5;
  bzero(v27, 0x478uLL);
  BYTE4(v28) = 0;
  LODWORD(v28) = 19;
  if (!a2) {
    return 3758097090;
  }
  BytesNoCopy = OSData::getBytesNoCopy(a2);
  if (OSData::getLength(a2) <= 0x93)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        OSData::getLength(a2);
        CCLogStream::logAlert(v7, "[dk] %s@%d:CTL Mgmt size mismatch, have %d, expected %ld\n");
      }
    }
    return v4;
  }
  if ((BytesNoCopy & 3) == 0)
  {
    int v17 = 0;
    goto LABEL_11;
  }
  uint64_t v8 = IOMallocZeroTyped();
  if (v8)
  {
    BytesNoCopy = (_OWORD *)v8;
    uint64_t v9 = OSData::getBytesNoCopy(a2);
    long long v10 = v9[1];
    _OWORD *BytesNoCopy = *v9;
    BytesNoCopy[1] = v10;
    long long v11 = v9[5];
    long long v13 = v9[2];
    long long v12 = v9[3];
    BytesNoCopy[4] = v9[4];
    BytesNoCopy[5] = v11;
    BytesNoCopy[2] = v13;
    BytesNoCopy[3] = v12;
    long long v15 = v9[7];
    long long v14 = v9[8];
    long long v16 = v9[6];
    *((_DWORD *)BytesNoCopy + 36) = *((_DWORD *)v9 + 36);
    BytesNoCopy[7] = v15;
    BytesNoCopy[8] = v14;
    BytesNoCopy[6] = v16;
    int v17 = BytesNoCopy;
LABEL_11:
    if (*(_WORD *)BytesNoCopy)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v18, "[dk] %s@%d:Unexpected type found %d, expected %d\n");
        }
      }
    }
    else if (*((_WORD *)BytesNoCopy + 1) == 144)
    {
      uint64_t v19 = AppleBCMWLANCore::convertwlMgmtCntToAppleFrameCounters((uint64_t)this, BytesNoCopy, v27);
      if (v19)
      {
        uint64_t v23 = v19;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            int v26 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v26, "[dk] %s@%d:Failed to convertwlMgmtCntToAppleFrameCounters\n", "parseEventLogRecordControlManagementFrameCounts", 21363);
          }
        }
        uint64_t v4 = v23;
      }
      else
      {
        uint64_t v20 = *((void *)this + 9);
        v27[108] = *(void *)(v20 + 17328);
        v27[121] = *(void *)(v20 + 17336);
        if (IO80211Controller::setFrameStats())
        {
          uint64_t v4 = 0;
        }
        else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            int v24 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v24, "[dk] %s@%d:Failed to setFrameStats\n");
          }
        }
      }
    }
    else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v25 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v25, "[dk] %s@%d:CTL Mgmt size mismatch, found %d, expected %ld\n");
      }
    }
    if (v17)
    {
      memset_s(v17, 0x94uLL, 0, 0x94uLL);
      IOFree(v17, 0x94uLL);
    }
    return v4;
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v21 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v21, "[dk] %s@%d:Failed to create aligned wl_ctl_mgt_cnt_t data\n");
    }
  }
  return v4;
}

uint64_t AppleBCMWLANCore::convertwlMgmtCntToAppleFrameCounters(uint64_t a1, _OWORD *a2, void *a3)
{
  uint64_t v4 = a2;
  if ((((_BYTE)a2 + 124) & 3) == 0)
  {
    uint64_t v7 = 0;
    goto LABEL_8;
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      unint64_t v39 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1);
      CCLogStream::logInfo(v39, "[dk] %s@%d:Control Management Frame counter data not aligned, %p\n", "convertwlMgmtCntToAppleFrameCounters", 29127, v4);
    }
  }
  uint64_t v6 = IOMallocZeroTyped();
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    long long v8 = v4[1];
    *(_OWORD *)uint64_t v6 = *v4;
    *(_OWORD *)(v6 + 16) = v8;
    long long v9 = v4[2];
    long long v10 = v4[3];
    long long v11 = v4[5];
    *(_OWORD *)(v6 + 64) = v4[4];
    *(_OWORD *)(v6 + 80) = v11;
    *(_OWORD *)(v6 + 32) = v9;
    *(_OWORD *)(v6 + 48) = v10;
    long long v12 = v4[6];
    long long v13 = v4[7];
    long long v14 = v4[8];
    *(_DWORD *)(v6 + 144) = *((_DWORD *)v4 + 36);
    *(_OWORD *)(v6 + 112) = v13;
    *(_OWORD *)(v6 + 128) = v14;
    *(_OWORD *)(v6 + 96) = v12;
    uint64_t v4 = (_OWORD *)v6;
LABEL_8:
    uint64_t v15 = *((unsigned int *)v4 + 32);
    uint64_t v16 = *((unsigned int *)v4 + 33);
    uint64_t v17 = *((unsigned int *)v4 + 34);
    a3[22] = *((unsigned int *)v4 + 31);
    a3[23] = v16;
    uint64_t v18 = *((unsigned int *)v4 + 36);
    uint64_t v19 = *((unsigned int *)v4 + 25);
    uint64_t v20 = *((unsigned int *)v4 + 26);
    a3[24] = *((unsigned int *)v4 + 35);
    a3[25] = v19;
    uint64_t v21 = *((unsigned int *)v4 + 28);
    uint64_t v22 = *((unsigned int *)v4 + 29);
    uint64_t v23 = *((unsigned int *)v4 + 30);
    a3[26] = *((unsigned int *)v4 + 27);
    a3[27] = v22;
    *a3 = v15;
    a3[1] = v17;
    a3[2] = v18;
    a3[3] = v20;
    a3[4] = v21;
    a3[5] = v23;
    uint64_t v24 = *((unsigned int *)v4 + 6);
    a3[115] = *((unsigned int *)v4 + 5);
    uint64_t v25 = *((unsigned int *)v4 + 12);
    a3[116] = *((unsigned int *)v4 + 11);
    uint64_t v26 = *((unsigned int *)v4 + 8);
    a3[117] = *((unsigned int *)v4 + 7);
    uint64_t v27 = *((unsigned int *)v4 + 14);
    a3[118] = *((unsigned int *)v4 + 13);
    uint64_t v28 = *((unsigned int *)v4 + 20);
    a3[119] = *((unsigned int *)v4 + 19);
    uint64_t v29 = *((unsigned int *)v4 + 22);
    a3[120] = *((unsigned int *)v4 + 21);
    uint64_t v30 = *((unsigned int *)v4 + 10);
    a3[123] = *((unsigned int *)v4 + 9);
    uint64_t v31 = *((unsigned int *)v4 + 16);
    a3[124] = *((unsigned int *)v4 + 15);
    uint64_t v32 = *((unsigned int *)v4 + 18);
    a3[125] = *((unsigned int *)v4 + 17);
    uint64_t v33 = *((unsigned int *)v4 + 24);
    a3[126] = *((unsigned int *)v4 + 23);
    a3[102] = v24;
    a3[103] = v25;
    a3[104] = v26;
    a3[105] = v27;
    a3[106] = v28;
    a3[107] = v29;
    a3[110] = v30;
    a3[111] = v31;
    a3[112] = v32;
    a3[113] = v33;
    uint64_t v34 = *((unsigned int *)v4 + 2);
    a3[77] = *((unsigned int *)v4 + 1);
    uint64_t v35 = *((unsigned int *)v4 + 4);
    a3[84] = *((unsigned int *)v4 + 3);
    a3[48] = v34;
    a3[55] = v35;
    if (v7)
    {
      memset_s(v7, 0x94uLL, 0, 0x94uLL);
      IOFree(v7, 0x94uLL);
    }
    return 0;
  }
  uint64_t v36 = 3758097084;
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v38 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1);
      CCLogStream::logAlert(v38, "[dk] %s@%d:Failed to create aligned ctl data\n", "convertwlMgmtCntToAppleFrameCounters", 29130);
    }
  }
  return v36;
}

uint64_t AppleBCMWLANCore::parseEventLogRecord(AppleBCMWLANCore *a1, OSData *this, _DWORD *a3)
{
  if (!this) {
    return 3758097084;
  }
  if (!OSData::getBytesNoCopy(this)) {
    return 3758097084;
  }
  size_t Length = OSData::getLength(this);
  if (!a3 || !Length || ((unint64_t)OSData::getBytesNoCopy(this) & 3) != 0) {
    return 3758097084;
  }
  if (!OSData::getLength(this))
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v31 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v31, "[dk] %s@%d:Bad payload\n", "parseEventLogRecord", 21398);
      }
    }
    return 0;
  }
  unsigned int v7 = a3[1];
  unsigned int v8 = HIWORD(v7);
  if (HIWORD(v7) != 0xFFFF && (v7 & 0x30000) != 0)
  {
    int v9 = a3[1] | ((*a3 & 0xF) << 8);
    if (v9 != 223)
    {
      if (v9 == 466)
      {
        uint64_t v11 = AppleBCMWLANCore::parseEventLogRecordKvrReport(a1, this);
        if (v11)
        {
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              CCLogStream::logAlert(v15, "[dk] %s@%d:parseEventLogRecordKvrReport failed\n");
            }
          }
        }
        return v11;
      }
      if (v9 == 370)
      {
        return AppleBCMWLANCore::parseExtendedEventLogRecordScanChan(a1, this);
      }
      return 0;
    }
    uint64_t v11 = AppleBCMWLANCore::parseEventLogRecordRoamTargetEvaluation(a1, this);
    if (!v11) {
      return v11;
    }
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)) {
      return v11;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    if (!CCLogStream::shouldLog()) {
      return v11;
    }
    goto LABEL_44;
  }
  uint64_t v11 = 0;
  if (v7 <= 0x5Eu)
  {
    if (v7 <= 0x43u)
    {
      if (v7 == 47)
      {
        uint64_t v11 = AppleBCMWLANCore::parseEventLogRecordChannelSwitch(a1, this);
        if (v11)
        {
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              CCLogStream::logAlert(v18, "[dk] %s@%d:parseEventLogRecordChannelSwitch failed\n");
            }
          }
        }
        return v11;
      }
      if (v7 != 67) {
        return v11;
      }
    }
    else
    {
      if (v7 == 68)
      {
        if (v8 == 0xFFFF)
        {
          uint64_t v11 = AppleBCMWLANCore::parseEventLogRecordControlManagementFrameCounts(a1, this);
          if (v11)
          {
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              if (CCLogStream::shouldLog())
              {
                uint64_t v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                CCLogStream::logAlert(v22, "[dk] %s@%d:parseEventLogRecordControlManagementFrameCounts failed\n");
              }
            }
          }
          return v11;
        }
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v29 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logAlert(v29, "[dk] %s@%d:Bad fmt_num, got %x expected %x\n", "parseEventLogRecord", 21466, v8, 0xFFFF);
          }
        }
        return 3758097084;
      }
      if (v7 != 69)
      {
        if (v7 != 83) {
          return v11;
        }
        if (v8 == 0xFFFF)
        {
          uint64_t v12 = *(void *)(*((void *)a1 + 9) + 5608);
          if (v12) {
            AppleBCMWLANLQM::setCountersProvidedViaEcounters(v12, 1);
          }
          uint64_t v11 = AppleBCMWLANCore::parseEventLogRecordWLCounters(a1, this);
          if (v11)
          {
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              if (CCLogStream::shouldLog())
              {
                long long v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                CCLogStream::logAlert(v13, "[dk] %s@%d:parseEventLogRecordWLCounters failed\n");
              }
            }
          }
          return v11;
        }
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v26 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logAlert(v26, "[dk] %s@%d:Bad fmt_num, got %x expected %x\n", "parseEventLogRecord", 21494, v8, 0xFFFF);
          }
        }
        return 3758097084;
      }
    }
    if (v8 == 0xFFFF)
    {
      BytesNoCopy = (unsigned __int16 *)OSData::getBytesNoCopy(this);
      uint64_t v11 = AppleBCMWLANCore::parseEventLogRecordAMPDU(a1, this, *BytesNoCopy, BytesNoCopy[1]);
      if (v11)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logAlert(v17, "[dk] %s@%d:parseEventLogRecordAMPDU failed\n");
          }
        }
      }
      return v11;
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v19, "[dk] %s@%d:Bad fmt_num, got %x expected %x\n", "parseEventLogRecord", 21436, v8, 0xFFFF);
      }
    }
    return 3758097084;
  }
  if (v7 > 0x98u)
  {
    if (v7 != 153)
    {
      if (v7 == 155)
      {
        uint64_t v11 = AppleBCMWLANCore::parseEventLogRecordTxFailure(a1, this);
        if (v11)
        {
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v25 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              CCLogStream::logAlert(v25, "[dk] %s@%d:parseEventLogRecordTxFailure failed\n");
            }
          }
        }
        return v11;
      }
      if (v7 == 223)
      {
        uint64_t v11 = AppleBCMWLANCore::parseEventLogRecordRoamTargetEvaluation(a1, this);
        if (v11)
        {
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
LABEL_44:
              long long v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              CCLogStream::logAlert(v14, "[dk] %s@%d:parseEventLogRecordRoamTargetEvaluation failed\n");
            }
          }
        }
      }
      return v11;
    }
    if (v8 == 0xFFFF)
    {
      uint64_t v23 = *(void *)(*((void *)a1 + 9) + 5608);
      if (v23) {
        AppleBCMWLANLQM::setCountersProvidedViaEcounters(v23, 1);
      }
      uint64_t v11 = AppleBCMWLANCore::parseXTLVContainers((OSDictionary *)a1, this);
      if (v11)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v24 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logAlert(v24, "[dk] %s@%d:parseXTLVContainers failed\n");
          }
        }
      }
      return v11;
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v30 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v30, "[dk] %s@%d:Bad fmt_num, got %x expected %x\n", "parseEventLogRecord", 21521, v8, 0xFFFF);
      }
    }
    return 3758097084;
  }
  if (v7 == 95)
  {
    if (v8 == 0xFFFF)
    {
      uint64_t v11 = AppleBCMWLANCore::parseEventLogRecordBTCoexStats(a1, this);
      if (v11)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v20 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logAlert(v20, "[dk] %s@%d:parseEventLogRecordBTCoexStats failed\n");
          }
        }
      }
      return v11;
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v27 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v27, "[dk] %s@%d:Bad fmt_num, got %x expected %x\n", "parseEventLogRecord", 21509, v8, 0xFFFF);
      }
    }
    return 3758097084;
  }
  if (v7 == 96)
  {
    if (v8 == 0xFFFF)
    {
      uint64_t v11 = AppleBCMWLANLeakyApParser::parseEventLogRecordLeakyAP(*(CCLogStream ****)(*((void *)a1 + 9) + 5456), this);
      if (v11)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v21 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logAlert(v21, "[dk] %s@%d:parseEventLogRecordLeakyAP failed\n");
          }
        }
      }
      return v11;
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v28 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v28, "[dk] %s@%d:Bad fmt_num, got %x expected %x\n", "parseEventLogRecord", 21483, v8, 0xFFFF);
      }
    }
    return 3758097084;
  }
  if (v7 != 113) {
    return v11;
  }
  return AppleBCMWLANCore::parseEventLogScan(a1, this);
}

uint64_t AppleBCMWLANCore::parseXTLVContainers(OSDictionary *this, OSData *a2)
{
  if (OSData::getLength(a2) < 4)
  {
    uint64_t v8 = 3758097084;
    if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
    {
      ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v27 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
        int Length = OSData::getLength(a2);
        CCLogStream::logAlert(v27, "[dk] %s@%d:Insufficient length for any XTLV, %u\n", "parseXTLVContainers", 29198, Length);
      }
    }
    LOWORD(v7) = 0;
    LOWORD(v6) = 0;
    int v5 = 0;
LABEL_61:
    if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
    {
      ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v24 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
        CCLogStream::logAlert(v24, "[dk] %s@%d:Goto fail last tag %x length %d index %d\n", "parseXTLVContainers", 29271, (unsigned __int16)v7, (unsigned __int16)v6, v5);
      }
    }
    CCFaultReporter::reportFault((CCFaultReporter *)this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[53].Dispatch, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0x725Au, "parseXTLVContainers", 0, -469793457, "parse TLV error");
  }
  else
  {
    if (OSData::getLength(a2))
    {
      unint64_t v4 = 0;
      int v5 = 0;
      LOWORD(v6) = 0;
      LOWORD(v7) = 0;
      uint64_t v8 = 3758097084;
      do
      {
        if (OSData::getLength(a2) - v4 < 5) {
          return 0;
        }
        BytesNoCopy = (unsigned __int16 *)OSData::getBytesNoCopy(a2, v4, 4uLL);
        uint64_t v10 = ((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
        if (!BytesNoCopy)
        {
          if (v10)
          {
            ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v20 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
              CCLogStream::logAlert(v20, "[dk] %s@%d:Bad read at index %d\n");
            }
          }
          goto LABEL_61;
        }
        if (v10)
        {
          ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v17 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
            CCLogStream::logInfoIf(v17, 0x2000000000uLL, "[dk] %s@%d:first xtlv id %x length %d\n", "parseXTLVContainers", 29206, *BytesNoCopy, BytesNoCopy[1]);
          }
        }
        size_t v6 = BytesNoCopy[1];
        if (OSData::getLength(a2) - (v5 + 4) < v6)
        {
          if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
          {
            ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v29 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
              OSData::getLength(a2);
              OSData::getLength(a2);
              CCLogStream::logAlert(v29, "[dk] %s@%d:Insufficient xtlv->len %d index %d xtlv->id 0x%x payload->getLength() %d remainder %d\n", "parseXTLVContainers");
            }
          }
          goto LABEL_61;
        }
        uint64_t v11 = (void *)OSData::getBytesNoCopy(a2, (v5 + 4), v6);
        if (!v11)
        {
          if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
          {
            ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v21 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
              OSData::getLength(a2);
              CCLogStream::logAlert(v21, "[dk] %s@%d:Bad payloadStart xtlv->len %d index %d xtlv->id 0x%x payload->getLength() %d index + BCM_XTLV_HDR_SIZE %d\n", "parseXTLVContainers");
            }
          }
          goto LABEL_61;
        }
        uint64_t v12 = OSData::withBytesNoCopy(v11, v6);
        if (!v12)
        {
          if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
          {
            ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v22 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
              CCLogStream::logAlert(v22, "[dk] %s@%d:Bad xtlvContainerPayload index %d xtlv->len %d xtlv->id 0x%x\n");
            }
          }
          goto LABEL_61;
        }
        long long v13 = v12;
        unsigned int v7 = *BytesNoCopy;
        if (v7 > 0x300)
        {
          if (v7 == 1281)
          {
            uint64_t v14 = AppleBCMWLANCore::parseIFStatsContainer((AppleBCMWLANCore *)this, v12);
            goto LABEL_28;
          }
          if (v7 == 769)
          {
            uint64_t v14 = AppleBCMWLANCore::parsePerSliceContainer(this, v12);
LABEL_28:
            uint64_t v15 = v14;
            goto LABEL_29;
          }
LABEL_20:
          uint64_t v15 = 3758097090;
          if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
          {
            ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v16 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
              CCLogStream::logAlert(v16, "[dk] %s@%d:Unknown XTLV tag %d\n", "parseXTLVContainers", 29249, v7);
              uint64_t v15 = 3758097090;
            }
          }
        }
        else
        {
          switch(*BytesNoCopy)
          {
            case 0x101u:
            case 0x102u:
              uint64_t v14 = AppleBCMWLANCore::parseAMPDUStatsGlobalContainer((AppleBCMWLANCore *)this, v12);
              goto LABEL_28;
            case 0x103u:
            case 0x104u:
            case 0x106u:
            case 0x107u:
            case 0x108u:
            case 0x109u:
            case 0x10Au:
              goto LABEL_20;
            case 0x105u:
              uint64_t v14 = AppleBCMWLANCore::parseChanStatsGlobalContainer((AppleBCMWLANCore *)this, v12);
              goto LABEL_28;
            case 0x10Bu:
              uint64_t v14 = AppleBCMWLANCore::parsePHYEcounter((AppleBCMWLANCore *)this, v12);
              goto LABEL_28;
            case 0x10Cu:
              uint64_t v14 = AppleBCMWLANCore::parsePHYCalEcounter((AppleBCMWLANCore *)this, v12);
              goto LABEL_28;
            case 0x10Du:
              uint64_t v14 = AppleBCMWLANCore::parseDTIMEcounter((AppleBCMWLANCore *)this, v12);
              goto LABEL_28;
            default:
              if (v7 - 6 >= 2) {
                goto LABEL_20;
              }
              uint64_t v15 = 0;
              break;
          }
        }
LABEL_29:
        ((void (*)(OSData *))v13->release)(v13);
        if (v15)
        {
          if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
          {
            ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v25 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
              CCLogStream::logEmergency(v25, "[dk] %s@%d:Failed to parse Event Log Record xtlv %x payloadLen %d\n", "parseXTLVContainers", 29255, v7, v6);
            }
            uint64_t v8 = v15;
          }
          else
          {
            uint64_t v8 = v15;
          }
          goto LABEL_61;
        }
        unint64_t v30 = 0;
        if (AppleBCMWLANCore::safe_align_up((AppleBCMWLANCore *)this, v4 + v6 + 4, 4uLL, &v30))
        {
          if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
          {
            ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v23 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
              CCLogStream::logAlert(v23, "[dk] %s@%d:safe_align_up failed\n");
            }
          }
          goto LABEL_60;
        }
        unint64_t v4 = v30;
        if (v30 >= 0xFFFF)
        {
          if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
          {
            ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v26 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
              CCLogStream::logAlert(v26, "[dk] %s@%d:UINT16_MAX overflow nextAlignedIndex\n");
            }
          }
LABEL_60:
          uint64_t v8 = 0;
          goto LABEL_61;
        }
        if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
        {
          ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v18 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
            CCLogStream::logInfoIf(v18, 0x2000000000uLL, "[dk] %s@%d:parseXTLVContainers: index %d\n", "parseXTLVContainers", 29266, v4);
          }
        }
        int v5 = (unsigned __int16)v4;
      }
      while (OSData::getLength(a2) > v4);
    }
    return 0;
  }
  return v8;
}

uint64_t AppleBCMWLANCore::parseEventLogRecordTxFailure(AppleBCMWLANCore *this, OSData *a2)
{
  unsigned int Length = OSData::getLength(a2);
  BytesNoCopy = (unsigned __int16 *)OSData::getBytesNoCopy(a2);
  size_t v6 = (char *)OSData::getBytesNoCopy(a2);
  if ((Length & 0xFFFFFFF0) == 0) {
    goto LABEL_20;
  }
  int v7 = 0;
  uint64_t v8 = (int *)(v6 + 12);
  uint64_t v9 = (Length >> 2) - 3;
  do
  {
    int v10 = *v8++;
    v7 += v10;
    --v9;
  }
  while (v9);
  if (!v7)
  {
LABEL_20:
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v20 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logNotice(v20, "[dk] %s@%d:%s: dropping '0' failureCount report", "parseEventLogRecordTxFailure", 21672, "parseEventLogRecordTxFailure");
      }
    }
    return 0;
  }
  if ((Length & 0xFFFFFFFC) < 0x3CuLL) {
    return 0;
  }
  uint64_t v11 = (char *)IOMallocZeroData();
  if (v11)
  {
    int v12 = *(_DWORD *)BytesNoCopy;
    *((_DWORD *)BytesNoCopy + 2) = BytesNoCopy[2] | (*((_DWORD *)BytesNoCopy + 2) << 16);
    *(_DWORD *)uint64_t v11 = 1;
    *((_DWORD *)v11 + 1) = v12;
    long long v13 = *(_OWORD *)(BytesNoCopy + 4);
    long long v14 = *(_OWORD *)(BytesNoCopy + 12);
    long long v15 = *(_OWORD *)(BytesNoCopy + 20);
    *((_DWORD *)v11 + 14) = *((_DWORD *)BytesNoCopy + 14);
    *(_OWORD *)(v11 + 40) = v15;
    *(_OWORD *)(v11 + 24) = v14;
    *(_OWORD *)(v11 + 8) = v13;
    uint64_t v16 = *(IO80211SkywalkInterface **)(*((void *)this + 9) + 11304);
    if (v16) {
      IO80211Controller::postMessage(this, v16, 0x59u, v11, 0x3CuLL, 1);
    }
    IOFreeData();
    return 0;
  }
  uint64_t v17 = 3758097085;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v19, "[dk] %s@%d:Allocation failure for return TLV\n", "parseEventLogRecordTxFailure", 21625);
    }
  }
  return v17;
}

uint64_t AppleBCMWLANCore::parseEventLogRecords(AppleBCMWLANCore *this, OSData *a2, unsigned int *a3)
{
  size_t v6 = a2;
  int v69 = &v69;
  uint64_t v70 = (uint64_t *)&v69;
  if ((OSData::getLength(a2) & 3) != 0)
  {
    uint64_t v8 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        OSData::getLength(v6);
        CCLogStream::logAlert(v9, "[dk] %s@%d:Unexpected length payload, total len %d, needs to be 4 byte alligned\n");
      }
    }
    return v8;
  }
  if (OSData::getLength(v6) <= 8)
  {
    uint64_t v8 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        OSData::getLength(v6);
        CCLogStream::logAlert(v10, "[dk] %s@%d:Insufficient length payload %d\n");
      }
    }
    return v8;
  }
  int v11 = OSData::getLength(v6) - 4;
  uint64_t v64 = (OSData *)v6;
  if (v11 < 1) {
    goto LABEL_60;
  }
  uint64_t v65 = a3;
  while (1)
  {
    uint64_t v12 = v11;
    BytesNoCopy = (unsigned __int8 *)OSData::getBytesNoCopy(v6, v11, 4uLL);
    LODWORD(v8) = *BytesNoCopy;
    unsigned int v14 = BytesNoCopy[1];
    LODWORD(v4) = *((unsigned __int16 *)BytesNoCopy + 1);
    if (!((v4 << 16) | (v14 << 8) | v8))
    {
      if (v11 < 5) {
        goto LABEL_60;
      }
      v11 -= 4;
      goto LABEL_59;
    }
    if ((v4 & 3) == 2 && ((v4 != 0xFFFF) & v4) != 0)
    {
      uint64_t v8 = 3758097084;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v34 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v34, "[dk] %s@%d:Corrupted record, unsupported extened event format 0x2\n");
        }
      }
      goto LABEL_92;
    }
    uint64_t v16 = BytesNoCopy;
    if (!*a3) {
      *a3 = v11 + 4;
    }
    uint64_t v17 = 4 * v14;
    if (((v4 != 0xFFFF) & v4) != 0) {
      unsigned int v18 = 8;
    }
    else {
      unsigned int v18 = 4;
    }
    if (((v4 != 0xFFFF) & v4) != 0) {
      uint64_t v3 = v17 + 4;
    }
    else {
      uint64_t v3 = 4 * v14;
    }
    if (v18 > v3)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v35 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v35, "[dk] %s@%d:Corrupt record at position %d, with fmt_num 0x%x and tag %d, and payloadLenWithTimestamp %d\n", "parseEventLogRecords", 21766, v11, v4, v8, v3);
        }
      }
      goto LABEL_72;
    }
    unsigned int v67 = v11;
    if (((v4 != 0xFFFF) & v4) != 0) {
      int v19 = -8;
    }
    else {
      int v19 = -4;
    }
    size_t v20 = (v19 + v3);
    if (v19 + v3)
    {
      size_t v21 = v67 - v3;
      if (v67 < v3)
      {
        uint64_t v8 = 3758097084;
        if ((*(uint64_t (**)(AppleBCMWLANCore *, size_t))(*(void *)this + 1848))(this, v21))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v36 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logInfo(v36, "[dk] %s@%d:Insufficient space in payload to believe LTV, space to beginning of buf %d, needed space %d\n", "parseEventLogRecords", 21807, v67, v3);
          }
        }
      }
      else
      {
        uint64_t v22 = (void *)OSData::getBytesNoCopy(v64, v21, v20);
        if (!v22)
        {
          if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
            goto LABEL_72;
          }
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (!CCLogStream::shouldLog()) {
            goto LABEL_72;
          }
          goto LABEL_143;
        }
        OSDataPtr v23 = OSData::withBytesNoCopy(v22, v20);
        if (v23)
        {
          uint64_t v8 = (uint64_t)v23;
          uint64_t v24 = (unsigned int *)OSData::getBytesNoCopy(v64, v12 - 4, 8uLL);
          if (v24)
          {
            uint64_t v25 = v24;
            uint64_t v26 = IOMallocZeroTyped();
            if (v26)
            {
              *(void *)(v26 + 16) = v25;
              *(void *)(v26 + 24) = v8;
              unsigned int v27 = v67;
              *(_DWORD *)(v26 + 32) = v67;
              uint64_t v28 = v70;
              if ((void **)*v70 == &v69)
              {
                *(void *)uint64_t v26 = &v69;
                *(void *)(v26 + 8) = v28;
                if (v28 == (uint64_t *)&v69) {
                  int v69 = (void *)v26;
                }
                else {
                  *uint64_t v28 = v26;
                }
                uint64_t v70 = (uint64_t *)v26;
                uint64_t v32 = *(AppleBCMWLANIOReportingCore **)(*((void *)this + 9) + 5512);
                if (v32) {
                  AppleBCMWLANIOReportingCore::incrementEventLogCounter(v32, *v16, v3);
                }
                unint64_t v33 = ((unint64_t)v25[1] >> 6) & 0x3FC;
                if (((v4 != 0xFFFF) & v4) == 0)
                {
                  unsigned int v31 = v33 + 4;
                  goto LABEL_54;
                }
                unsigned int v31 = v33 + 8;
                if (v67 <= (int)v33 + 8)
                {
                  unsigned int v31 = v33 + 4;
                  if (v67 == v33 + 4) {
                    goto LABEL_60;
                  }
LABEL_54:
                  if (v67 <= v31)
                  {
                    if (v67 != v33)
                    {
                      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                      {
                        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                        if (CCLogStream::shouldLog())
                        {
                          int v41 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                          CCLogStream::logInfo(v41, "[dk] %s@%d:Insufficient space to read next log, i %d current record count size %ld\n", "parseEventLogRecords", 21879, v67, v33);
                        }
                      }
LABEL_91:
                      uint64_t v8 = 0;
                      goto LABEL_92;
                    }
                    goto LABEL_60;
                  }
                  goto LABEL_58;
                }
                goto LABEL_58;
              }
LABEL_142:
              __break(1u);
LABEL_143:
              uint64_t v61 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logInfo(v61, "[dk] %s@%d:Failed to find payloadStart at %d, with fmt_num 0x%x and tag %d, and payloadLenWithTimestamp %d\n", "parseEventLogRecords", 21818, v67, v4, v8, v3);
LABEL_72:
              unsigned int v67 = 1;
              uint64_t v8 = 3758097084;
              goto LABEL_93;
            }
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (CCLogStream::shouldLog())
              {
                uint64_t v62 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                OSData::getLength((const OSData *)v8);
                CCLogStream::logInfo(v62, "[dk] %s@%d:Failed to allocate memory to parse Event Log Record tag %x at i %d, payloadLen %d\n");
              }
            }
          }
          else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v38 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              OSData::getLength(v64);
              CCLogStream::logInfo(v38, "[dk] %s@%d:failed to cast footer at position %lu, payload length is %d\n");
            }
          }
          unint64_t v39 = *(void (**)(uint64_t))(*(void *)v8 + 16);
          uint64_t v40 = v8;
          uint64_t v8 = 3758097084;
          v39(v40);
          goto LABEL_92;
        }
        uint64_t v8 = 3758097084;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v37 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v37, "[dk] %s@%d:Failed to allocate eventLogRecordPayload\n");
          }
        }
      }
LABEL_92:
      unsigned int v67 = 1;
      goto LABEL_93;
    }
    uint64_t v29 = *(AppleBCMWLANIOReportingCore **)(*((void *)this + 9) + 5512);
    if (v29) {
      AppleBCMWLANIOReportingCore::incrementEventLogCounter(v29, v8, v3);
    }
    int v30 = 4 * v14;
    unsigned int v27 = v67;
    if (((v4 != 0xFFFF) & v4) == 0)
    {
      unsigned int v31 = v30 + 4;
      goto LABEL_57;
    }
    unsigned int v31 = v30 + 8;
    if (v67 <= v30 + 8) {
      break;
    }
LABEL_58:
    int v11 = v27 - v31;
    size_t v6 = v64;
    a3 = v65;
LABEL_59:
    if (v11 <= 0) {
      goto LABEL_60;
    }
  }
  unsigned int v31 = v30 + 4;
  if (v67 == v30 + 4) {
    goto LABEL_60;
  }
LABEL_57:
  if (v67 > v31) {
    goto LABEL_58;
  }
  if (v17 != v12)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v63 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logInfo(v63, "[dk] %s@%d:Insufficient space to read next log, i %d current record count size %ld\n", "parseEventLogRecords", 21797, v67, 4 * v14);
      }
    }
    goto LABEL_91;
  }
LABEL_60:
  unsigned int v67 = 0;
  uint64_t v8 = 0;
LABEL_93:
  if (&v69 != v69)
  {
    uint64_t v66 = 0;
    while (1)
    {
      int v42 = v70;
      if (v70 != (uint64_t *)&v69)
      {
        int v43 = (void *)*v70;
        int v44 = (uint64_t **)v70[1];
        if ((void **)*v70 == &v69)
        {
          if (*v44 != v70) {
            goto LABEL_142;
          }
          uint64_t v70 = (uint64_t *)v70[1];
        }
        else
        {
          if ((uint64_t *)v43[1] != v70 || *v44 != v70) {
            goto LABEL_142;
          }
          v43[1] = v44;
        }
        if (v44 == &v69) {
          int v69 = v43;
        }
        else {
          *int v44 = v43;
        }
        *int v42 = 0;
        v42[1] = 0;
      }
      uint64_t v4 = v42[2];
      int v46 = (OSData *)v42[3];
      int v47 = *((_DWORD *)v42 + 8);
      if (((unint64_t)OSData::getBytesNoCopy(v46) & 3) != 0)
      {
        OSData::getLength(v46);
        uint64_t v48 = IOMallocZeroData();
        if (!v48)
        {
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v56 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v56, "[dk] %s@%d:Failed to create aligned tmpData data\n", "parseEventLogRecords", 21907);
            }
          }
          goto LABEL_130;
        }
        int v49 = (void *)v48;
        uint64_t v50 = v8;
        LODWORD(v3) = OSData::getLength(v46);
        uint64_t v51 = OSData::getBytesNoCopy(v46);
        size_t Length = OSData::getLength(v46);
        memcpy(v49, v51, Length);
        if (v46) {
          ((void (*)(OSData *))v46->release)(v46);
        }
        OSDataPtr v53 = OSData::withBytesNoCopy(v49, v3);
        if (!v53)
        {
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v59 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v59, "[dk] %s@%d:Failed to create aligned eventLogRecordPayload OSData\n", "parseEventLogRecords", 21919);
            }
          }
          IOFreeData();
          uint64_t v8 = v50;
          goto LABEL_136;
        }
        int v46 = v53;
      }
      else
      {
        int v49 = 0;
        LODWORD(v3) = 0;
      }
      unsigned int v54 = AppleBCMWLANCore::parseEventLogRecord(this, v46, (_DWORD *)v4);
      if (v54)
      {
        if (*(unsigned char *)(*((void *)this + 9) + *(unsigned __int8 *)(v4 + 4) + 4897)) {
          uint64_t v55 = 0;
        }
        else {
          uint64_t v55 = v54;
        }
        uint64_t v66 = v55;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            int v68 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            int v57 = *(unsigned __int8 *)(v4 + 4);
            int v58 = OSData::getLength(v46);
            CCLogStream::logAlert(v68, "[dk] %s@%d:Failed to parse Event Log Record tag %x at i %d, payloadLen %d lastFailure=%d \n", "parseEventLogRecords", 21935, v57, v47, v58, v55);
          }
        }
        unsigned int v67 = 1;
        *(unsigned char *)(*((void *)this + 9) + *(unsigned __int8 *)(v4 + 4) + 4897) = 1;
        uint64_t v8 = v55;
        if (!v49) {
          goto LABEL_130;
        }
      }
      else
      {
        uint64_t v8 = 0;
        if (!v49) {
          goto LABEL_130;
        }
      }
      IOFreeData();
LABEL_130:
      if (v46) {
        ((void (*)(OSData *))v46->release)(v46);
      }
LABEL_136:
      IOFree(v42, 0x28uLL);
      if (&v69 == v69) {
        goto LABEL_139;
      }
    }
  }
  uint64_t v66 = 0;
LABEL_139:
  if (v67)
  {
    OSData::getBytesNoCopy(v64);
    OSData::getLength(v64);
    IO80211Hexdump();
    return v66;
  }
  return v8;
}

uint64_t AppleBCMWLANCore::handleMsgTraceBlock(AppleBCMWLANCore *this, OSData *a2)
{
  if (a2)
  {
    if (!*(_DWORD *)(*((void *)this + 9) + 988)) {
      return 0;
    }
    BytesNoCopy = (unsigned __int16 *)OSData::getBytesNoCopy(a2, 0, 8uLL);
    uint64_t v5 = *BytesNoCopy;
    int v6 = BytesNoCopy[1];
    int v7 = *((_DWORD *)BytesNoCopy + 1);
    size_t Length = OSData::getLength(a2);
    if (Length == v5)
    {
      unsigned int v9 = v7 & 0x3F;
      uint64_t v10 = *((void *)this + 9);
      if (v9 < *(_DWORD *)(v10 + 988))
      {
        uint64_t v11 = *(void *)(v10 + 1000);
        if (v11)
        {
          unint64_t v12 = Length;
          uint64_t v13 = v7 & 0x3F;
          uint64_t v14 = *(void *)(v10 + 1016);
          if (*(unsigned char *)(v14 + v13))
          {
            unsigned __int16 v15 = 0;
            *(unsigned char *)(v14 + v13) = 0;
          }
          else
          {
            int v24 = *(unsigned __int16 *)(v11 + 2 * v13);
            unsigned __int16 v15 = v6 + ~(_WORD)v24;
            if (v24 | v6) {
              unsigned __int16 v25 = v6 + ~(_WORD)v24;
            }
            else {
              unsigned __int16 v25 = 0;
            }
            int v26 = v25;
            if (v25)
            {
              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
              {
                (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                if (CCLogStream::shouldLog())
                {
                  unsigned int v27 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                  CCLogStream::logInfo(v27, "[dk] %s@%d:Missed %d Seqno for this log set %d, has seqno %d, last seqno %d\n", "handleMsgTraceBlock", 22020, v26, v9, v6, *(unsigned __int16 *)(*(void *)(*((void *)this + 9) + 1000) + 2 * v13));
                }
              }
            }
            else
            {
              unsigned __int16 v15 = 0;
            }
          }
          *(_WORD *)(*(void *)(*((void *)this + 9) + 1000) + 2 * v13) = v6;
          if ((unint64_t)OSData::getLength(a2) - 8 < v12) {
            LODWORD(v12) = OSData::getLength(a2) - 8;
          }
          uint64_t v16 = *(AppleBCMWLANIOReportingCore **)(*((void *)this + 9) + 5512);
          if (v16) {
            AppleBCMWLANIOReportingCore::reportEventLogSet(v16, v13, v15);
          }
          uint64_t v17 = (void *)OSData::getBytesNoCopy(a2, 8uLL, v12);
          unsigned int v18 = OSData::withBytesNoCopy(v17, v12);
          *(_DWORD *)uint64_t v29 = 0;
          uint64_t v19 = AppleBCMWLANCore::parseEventLogRecords(this, v18, (unsigned int *)v29);
          size_t v20 = *(AppleBCMWLANIOReportingCore **)(*((void *)this + 9) + 5512);
          if (v20) {
            AppleBCMWLANIOReportingCore::reportEventLogSetSize(v20, v13, v29[0]);
          }
          if (v18) {
            ((void (*)(OSData *))v18->release)(v18);
          }
          return v19;
        }
        return 0;
      }
      uint64_t v19 = 3758097084;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v28 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v28, "[dk] %s@%d:Invalid set number in event_log_block, found %d max supported log sets %d\n");
        }
      }
    }
    else
    {
      uint64_t v19 = 3758097084;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          OSData::getLength(a2);
          CCLogStream::logAlert(v22, "[dk] %s@%d:payload and header size mismatch (payload len %d, header length field %d)\n");
        }
      }
    }
  }
  else
  {
    uint64_t v19 = 3758097090;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        size_t v21 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v21, "[dk] %s@%d: Bad argument\n", "handleMsgTraceBlock", 21968);
        return 3758097090;
      }
    }
  }
  return v19;
}

void *AppleBCMWLANCore::reportMicrocodeLockup(void *result, unsigned int *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    if ((*(uint64_t (**)(void *))(*result + 1848))(result))
    {
      (*(void (**)(void *))(*v3 + 1848))(v3);
      if (CCLogStream::shouldLog())
      {
        int v7 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
        CCLogStream::logEmergency(v7, "[dk] %s@%d: Chip uCode Lockup, status = 0x%lx, reason = 0x%lx, auth_type = %lu, datalen = %lu\n", "reportMicrocodeLockup", 45623, a2[2], a2[3], a2[4], a2[5]);
      }
    }
    if (a2[3] == 2) {
      unsigned int v4 = 4;
    }
    else {
      unsigned int v4 = 5;
    }
    keys = OSString::withCString("FirmwareEvent.bin");
    values = OSData::withBytes(a2, a2[5] + 48);
    uint64_t v5 = *(CCFaultReporter **)(v3[9] + 5544);
    int v6 = OSDictionary::withObjects((const OSObject **)&values, (const OSObject **)&keys, 1u, 0);
    CCFaultReporter::reportFault(v5, v4, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0xB244u, "reportMicrocodeLockup", v6, -469794299, "status=%u,reason=%u", a2[2], a2[3]);
    return AppleBCMWLANUtil::releaseOSObjectArray(&keys, (const OSString **)&values, (const OSObject **)1);
  }
  return result;
}

uint64_t AppleBCMWLANCore::checkForWPA3SAESupport(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 65);
}

uint64_t AppleBCMWLANCore::adjustBeaconListPerNewCountryCode(AppleBCMWLANCore *this)
{
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t result = CCLogStream::logInfo(v10, "[dk] %s@%d:WiFiCC : band filter is : [%d]\n,", "adjustBeaconListPerNewCountryCode", 22242, *(_DWORD *)(*((void *)this + 9) + 35756));
    }
  }
  uint64_t v3 = *((void *)this + 9);
  if (*(_WORD *)(v3 + 19772))
  {
    unint64_t v4 = 0;
    do
    {
      unsigned __int16 AppleChannelSpec = AppleBCMWLANChanSpec::getAppleChannelSpec(*(int ***)(v3 + 17576), *(unsigned __int16 *)(v3 + 2 * v4 + 19774));
      uint64_t result = ChanSpecConvToApple80211Channel();
      int v6 = AppleChannelSpec >> 14;
      if (v6 == 3)
      {
        if ((*(unsigned char *)(*((void *)this + 9) + 35756) & 2) != 0)
        {
          uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (result)
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            uint64_t result = CCLogStream::shouldLog();
            if (result)
            {
              uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              uint64_t result = CCLogStream::logInfo(v8, "[dk] %s@%d:WiFiCC : setting 5GHz valid channels : [%d]\n,", "adjustBeaconListPerNewCountryCode", 22272, *(_DWORD *)(*((void *)this + 9) + 35756));
            }
          }
        }
      }
      else if (v6 == 1)
      {
        if ((*(unsigned char *)(*((void *)this + 9) + 35756) & 4) != 0)
        {
          uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (result)
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            uint64_t result = CCLogStream::shouldLog();
            if (result)
            {
              unsigned int v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              uint64_t result = CCLogStream::logInfo(v9, "[dk] %s@%d:WiFiCC : setting 6GHz valid channels : [%d]\n,", "adjustBeaconListPerNewCountryCode", 22290, *(_DWORD *)(*((void *)this + 9) + 35756));
            }
          }
        }
      }
      else if (!(AppleChannelSpec >> 14) && (*(unsigned char *)(*((void *)this + 9) + 35756) & 1) != 0)
      {
        uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (result)
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            int v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            uint64_t result = CCLogStream::logInfo(v7, "[dk] %s@%d:WiFiCC : setting 2GHz valid channels : [%d]\n,", "adjustBeaconListPerNewCountryCode", 22256, *(_DWORD *)(*((void *)this + 9) + 35756));
          }
        }
      }
      ++v4;
      uint64_t v3 = *((void *)this + 9);
    }
    while (v4 < *(unsigned __int16 *)(v3 + 19772));
  }
  return result;
}

uint64_t AppleBCMWLANCore::setLMTPC(AppleBCMWLANCore *this)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 5400) + 368))(*(void *)(*((void *)this + 9) + 5400));
  if (result >= 0x1123)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logInfo(v10, "[dk] %s@%d:Country code is %s\n", "setLMTPC", 55530, (const char *)(*((void *)this + 9) + 6752));
      }
    }
    uint64_t v3 = *((void *)this + 9);
    if (!strncmp((const char *)(v3 + 6752), "XZ", 2uLL)) {
      int v4 = 0;
    }
    else {
      int v4 = *(_DWORD *)(v3 + 17644);
    }
    int v15 = v4;
    uint64_t v5 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 136))(v5))
    {
      unint64_t v12 = this;
      uint64_t v13 = (uint64_t)AppleBCMWLANCore::setLMTPCCallback;
      uint64_t v14 = 0;
      int v6 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"lpc");
    }
    else
    {
      int v7 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
      unint64_t v12 = (AppleBCMWLANCore *)&v15;
      uint64_t v13 = 4;
      int v6 = AppleBCMWLANCommander::runIOVarSet(v7, (uint64_t)"lpc", (uint64_t)&v12, 0, 0);
    }
    int v8 = v6;
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (v8)
    {
      if (result)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          unsigned int v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          return CCLogStream::logAlert(v9, "[dk] %s@%d:Couldn't set lpc %u: ret %x\n");
        }
      }
    }
    else if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        return CCLogStream::logAlert(v11, "[dk] %s@%d:LMTPC is configured to %d\n");
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::postRoamCompletionStatus(IO80211Controller *a1)
{
  uint64_t v2 = *((void *)a1 + 9);
  if (*(_DWORD *)(v2 + 13904) || *(_DWORD *)(v2 + 13948))
  {
    IO80211HexdumpIf();
    uint64_t v3 = (void *)*((void *)a1 + 9);
    int v4 = (IO80211SkywalkInterface *)v3[1413];
    if (v4)
    {
      IO80211Controller::postMessage(a1, v4, 0x50u, v3 + 1738, 0xA8uLL, 1);
      uint64_t v3 = (void *)*((void *)a1 + 9);
    }
    uint64_t v5 = (IO80211SkywalkInterface *)v3[1414];
    if (v5) {
      IO80211Controller::postMessage(a1, v5, 0x50u, v3 + 1738, 4uLL, 1);
    }
    IO80211_io80211isDebuggable();
    IO80211_io80211isDebuggable();
    IO80211_io80211isDebuggable();
    IO80211_io80211isDebuggable();
    IO80211_io80211isDebuggable();
    IO80211_io80211isDebuggable();
    IO80211_io80211isDebuggable();
    IO80211_io80211isDebuggable();
    IO80211_io80211isDebuggable();
    IO80211_io80211isDebuggable();
    IO80211_io80211isDebuggable();
    IO80211_io80211isDebuggable();
    uint64_t result = io80211_os_log();
    char v7 = 0;
    *(unsigned char *)(*((void *)a1 + 9) + 12064) = 0;
    uint64_t v8 = *((void *)a1 + 9);
    *(void *)(v8 + 14000) = 0;
    *(_OWORD *)(v8 + 13984) = 0u;
    *(_OWORD *)(v8 + 13968) = 0u;
    *(_OWORD *)(v8 + 13952) = 0u;
    *(_OWORD *)(v8 + 13936) = 0u;
    *(_OWORD *)(v8 + 13920) = 0u;
    *(_OWORD *)(v8 + 13904) = 0u;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
    if (result)
    {
      (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      char v7 = 1;
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        unsigned int v9 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        uint64_t result = CCLogStream::logAlert(v9, "[dk] %s@%d:Roam status not populated yet, defer posting roam completion status\n", "postRoamCompletionStatus", 22393);
      }
    }
    else
    {
      char v7 = 1;
    }
  }
  *(unsigned char *)(*((void *)a1 + 9) + 14072) = v7;
  return result;
}

uint64_t AppleBCMWLANCore::buildRoamCompletionStatus(IO80211Controller *a1, IO80211BSSBeacon *a2)
{
  *(_DWORD *)(*((void *)a1 + 9) + 13904) = mapBcmStatusToApple80211IOReturnScan(0);
  *(_DWORD *)(*((void *)a1 + 9) + 13932) = AppleBCMWLANRoamAdapter::getCurrentRoamProfile(*(AppleBCMWLANRoamAdapter **)(*((void *)a1 + 9) + 5576));
  uint64_t CurrentBSS = AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(*((void *)a1 + 9) + 5440));
  uint64_t v5 = CurrentBSS;
  if (CurrentBSS)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)CurrentBSS + 184))(CurrentBSS);
    if (v6)
    {
      *(unsigned char *)(*((void *)a1 + 9) + 13960) = *(unsigned char *)v6;
      *(unsigned char *)(*((void *)a1 + 9) + 13961) = *(unsigned char *)(v6 + 1);
      *(unsigned char *)(*((void *)a1 + 9) + 13962) = *(unsigned char *)(v6 + 2);
      uint64_t v7 = *((void *)a1 + 9);
      int v8 = *(_DWORD *)v6;
      *(_WORD *)(v7 + 13996) = *(_WORD *)(v6 + 4);
      *(_DWORD *)(v7 + 13992) = v8;
    }
    IO80211BssManager::getCurrentRSSI(*(IO80211BssManager **)(*((void *)a1 + 9) + 5440), (int *)(*((void *)a1 + 9) + 13936));
    *(_DWORD *)(*((void *)a1 + 9) + 13944) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 256))(v5);
    (*(void (**)(uint64_t))(*(void *)v5 + 264))(v5);
    ChanSpecConvToApple80211Channel();
    *(_DWORD *)(*((void *)a1 + 9) + 13952) = -1431655766;
  }
  if ((*(unsigned int (**)(IO80211BSSBeacon *))(*(void *)a2 + 712))(a2)) {
    *(_DWORD *)(*((void *)a1 + 9) + 13928) |= 1u;
  }
  if ((*(unsigned int (**)(IO80211BSSBeacon *))(*(void *)a2 + 720))(a2)) {
    *(_DWORD *)(*((void *)a1 + 9) + 13928) |= 2u;
  }
  if ((*(unsigned int (**)(IO80211BSSBeacon *))(*(void *)a2 + 664))(a2)) {
    *(_DWORD *)(*((void *)a1 + 9) + 13928) |= 4u;
  }
  if ((*(unsigned int (**)(IO80211BSSBeacon *))(*(void *)a2 + 728))(a2)) {
    *(_DWORD *)(*((void *)a1 + 9) + 13928) |= 0x10u;
  }
  if ((*(unsigned int (**)(IO80211BSSBeacon *))(*(void *)a2 + 744))(a2)) {
    *(_DWORD *)(*((void *)a1 + 9) + 13928) |= 0x20u;
  }
  if ((*(unsigned int (**)(IO80211BSSBeacon *))(*(void *)a2 + 736))(a2)) {
    *(_DWORD *)(*((void *)a1 + 9) + 13928) |= 8u;
  }
  if ((*(unsigned int (**)(IO80211BSSBeacon *))(*(void *)a2 + 768))(a2)) {
    *(_DWORD *)(*((void *)a1 + 9) + 13928) |= 0x40u;
  }
  uint64_t v9 = (*(uint64_t (**)(IO80211BSSBeacon *))(*(void *)a2 + 184))(a2);
  if (v9)
  {
    *(unsigned char *)(*((void *)a1 + 9) + 13963) = *(unsigned char *)v9;
    *(unsigned char *)(*((void *)a1 + 9) + 13964) = *(unsigned char *)(v9 + 1);
    *(unsigned char *)(*((void *)a1 + 9) + 13965) = *(unsigned char *)(v9 + 2);
    uint64_t v10 = *((void *)a1 + 9) + 13904;
    int v11 = *(_DWORD *)v9;
    *(_WORD *)(v10 + 98) = *(_WORD *)(v9 + 4);
    *(_DWORD *)(v10 + 94) = v11;
  }
  *(_DWORD *)(*((void *)a1 + 9) + 13940) = IO80211BSSBeacon::getRSSI(a2);
  *(_DWORD *)(*((void *)a1 + 9) + 13948) = (*(uint64_t (**)(IO80211BSSBeacon *))(*(void *)a2 + 256))(a2);
  (*(void (**)(IO80211BSSBeacon *))(*(void *)a2 + 264))(a2);
  ChanSpecConvToApple80211Channel();
  *(_DWORD *)(*((void *)a1 + 9) + 13956) = -1431655766;
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  *(void *)(*((void *)a1 + 9) + 13920) = 0;
  if (v5 && AppleBCMWLANCore::isColocatedRoam((uint64_t)a1, v5, (uint64_t)a2)) {
    *(_DWORD *)(*((void *)a1 + 9) + 13928) |= 0x80u;
  }
  uint64_t v12 = *((void *)a1 + 9);
  if (*(unsigned char *)(v12 + 12065))
  {
    if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        OSDataPtr v23 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v23, "[dk] %s@%d:Using simulated roam status substate\n", "buildRoamCompletionStatus", 22479);
      }
    }
    *(_DWORD *)(*((void *)a1 + 9) + 14020) = *(_DWORD *)(*((void *)a1 + 9) + 12076);
    *(_DWORD *)(*((void *)a1 + 9) + 14024) = *(_DWORD *)(*((void *)a1 + 9) + 12080);
    *(_DWORD *)(*((void *)a1 + 9) + 14028) = *(_DWORD *)(*((void *)a1 + 9) + 12084);
    *(_DWORD *)(*((void *)a1 + 9) + 14032) = *(_DWORD *)(*((void *)a1 + 9) + 12088);
    *(_DWORD *)(*((void *)a1 + 9) + 14036) = *(_DWORD *)(*((void *)a1 + 9) + 12092);
    *(_DWORD *)(*((void *)a1 + 9) + 14040) = *(_DWORD *)(*((void *)a1 + 9) + 12096);
    *(_DWORD *)(*((void *)a1 + 9) + 14044) = *(_DWORD *)(*((void *)a1 + 9) + 12100);
    uint64_t v12 = *((void *)a1 + 9);
  }
  uint64_t v13 = v12 + 600 * *(unsigned int *)(v12 + 14076);
  long long v14 = *(_OWORD *)(v12 + 13968);
  long long v15 = *(_OWORD *)(v12 + 13984);
  long long v16 = *(_OWORD *)(v12 + 13952);
  *(void *)(v13 + 12200) = *(void *)(v12 + 14000);
  long long v17 = *(_OWORD *)(v12 + 13936);
  long long v18 = *(_OWORD *)(v12 + 13920);
  *(_OWORD *)(v13 + 12104) = *(_OWORD *)(v12 + 13904);
  *(_OWORD *)(v13 + 12120) = v18;
  *(_OWORD *)(v13 + 12136) = v17;
  *(_OWORD *)(v13 + 12152) = v16;
  *(_OWORD *)(v13 + 12168) = v14;
  *(_OWORD *)(v13 + 12184) = v15;
  IO80211_io80211isDebuggable();
  IO80211_io80211isDebuggable();
  IO80211_io80211isDebuggable();
  IO80211_io80211isDebuggable();
  IO80211_io80211isDebuggable();
  IO80211_io80211isDebuggable();
  IO80211_io80211isDebuggable();
  IO80211_io80211isDebuggable();
  IO80211_io80211isDebuggable();
  IO80211_io80211isDebuggable();
  IO80211_io80211isDebuggable();
  IO80211_io80211isDebuggable();
  uint64_t result = io80211_os_log();
  if (*(unsigned char *)(*((void *)a1 + 9) + 14072))
  {
    AppleBCMWLANCore::postRoamCompletionStatus(a1);
    uint64_t result = AppleBCMWLANCore::printRoamInfo(a1, *(_DWORD *)(*((void *)a1 + 9) + 14076));
    ++*(_DWORD *)(*((void *)a1 + 9) + 14076);
    uint64_t v20 = *((void *)a1 + 9);
    unsigned int v21 = *(_DWORD *)(v20 + 14076);
    if (v21 > 2) {
      unsigned int v21 = 0;
    }
    *(_DWORD *)(v20 + 14076) = v21;
    uint64_t v22 = *((void *)a1 + 9) + 600 * *(unsigned int *)(*((void *)a1 + 9) + 14076);
    *(void *)(v22 + 12680) = 0;
    *(void *)(v22 + 12672) = 0;
  }
  return result;
}

uint64_t AppleBCMWLANCore::isColocatedRoam(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 0;
  unsigned __int16 v13 = -21846;
  unsigned int v12 = -1431655766;
  if (a2 && a3)
  {
    uint64_t v7 = *(void *)(a1 + 72);
    int v8 = *(_DWORD *)(v7 + 13956);
    int v9 = *(_DWORD *)(v7 + 13952);
    if ((v8 & 0x2000) != 0 && (v9 & 0x10) != 0)
    {
      (*(void (**)(uint64_t, unsigned int *))(*(void *)a3 + 136))(a3, &v12);
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 480))(a2);
      return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)a2 + 800))(a2, v10, v12 | ((unint64_t)v13 << 32));
    }
    else
    {
      uint64_t result = 0;
      if ((v8 & 0x10) != 0 && (v9 & 0x2000) != 0)
      {
        (*(void (**)(uint64_t, unsigned int *))(*(void *)a2 + 136))(a2, &v12);
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 480))(a3);
        return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)a3 + 800))(a3, v11, v12 | ((unint64_t)v13 << 32));
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::printRoamInfo(AppleBCMWLANCore *this, unsigned int a2)
{
  if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
    || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
        (CCLogStream::shouldLogConsole() & 1) == 0))
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      if (IO80211_io80211isDebuggable()) {
        int v58 = *(unsigned __int8 *)(*((void *)this + 9) + 600 * a2 + 12192);
      }
      else {
        int v58 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v56 = *(unsigned __int8 *)(*((void *)this + 9) + 600 * a2 + 12193);
      }
      else {
        int v56 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v54 = *(unsigned __int8 *)(*((void *)this + 9) + 600 * a2 + 12194);
      }
      else {
        int v54 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v4 = *(unsigned __int8 *)(*((void *)this + 9) + 600 * a2 + 12195);
      }
      else {
        int v4 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v5 = *(unsigned __int8 *)(*((void *)this + 9) + 600 * a2 + 12196);
      }
      else {
        int v5 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v6 = *(unsigned __int8 *)(*((void *)this + 9) + 600 * a2 + 12197);
      }
      else {
        int v6 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v7 = *(unsigned __int8 *)(*((void *)this + 9) + 600 * a2 + 12198);
      }
      else {
        int v7 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v8 = *(unsigned __int8 *)(*((void *)this + 9) + 600 * a2 + 12199);
      }
      else {
        int v8 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v9 = *(unsigned __int8 *)(*((void *)this + 9) + 600 * a2 + 12200);
      }
      else {
        int v9 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v10 = *(unsigned __int8 *)(*((void *)this + 9) + 600 * a2 + 12201);
      }
      else {
        int v10 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v11 = *(unsigned __int8 *)(*((void *)this + 9) + 600 * a2 + 12202);
      }
      else {
        int v11 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v12 = *(unsigned __int8 *)(*((void *)this + 9) + 600 * a2 + 12203);
      }
      else {
        int v12 = 0;
      }
      *(_DWORD *)buf = 67112706;
      int v61 = 73;
      __int16 v62 = 2080;
      uint64_t v63 = "printRoamInfo";
      __int16 v64 = 1024;
      int v65 = 33257;
      __int16 v66 = 1024;
      int v67 = v58;
      __int16 v68 = 1024;
      int v69 = v56;
      __int16 v70 = 1024;
      int v71 = v54;
      __int16 v72 = 1024;
      int v73 = v4;
      __int16 v74 = 1024;
      int v75 = v5;
      __int16 v76 = 1024;
      *(_DWORD *)int v77 = v6;
      *(_WORD *)&v77[4] = 1024;
      *(_DWORD *)&v77[6] = v7;
      LOWORD(v78) = 1024;
      *(_DWORD *)((char *)&v78 + 2) = v8;
      HIWORD(v78) = 1024;
      *(_DWORD *)uint64_t v79 = v9;
      *(_WORD *)&v79[4] = 1024;
      *(_DWORD *)&v79[6] = v10;
      __int16 v80 = 1024;
      int v81 = v11;
      __int16 v82 = 1024;
      int v83 = v12;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: RoamInfo: SrcBSS: %02X:%02X:%02X:%02X:%02X:%02X DstBSS: %02X:%02X:%02X:%02X:%02X:%02X \n", buf, 0x60u);
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v59 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (IO80211_io80211isDebuggable()) {
        int v57 = *(unsigned __int8 *)(*((void *)this + 9) + 600 * a2 + 12192);
      }
      else {
        int v57 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v55 = *(unsigned __int8 *)(*((void *)this + 9) + 600 * a2 + 12193);
      }
      else {
        int v55 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v53 = *(unsigned __int8 *)(*((void *)this + 9) + 600 * a2 + 12194);
      }
      else {
        int v53 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v44 = *(unsigned __int8 *)(*((void *)this + 9) + 600 * a2 + 12195);
      }
      else {
        int v44 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v45 = *(unsigned __int8 *)(*((void *)this + 9) + 600 * a2 + 12196);
      }
      else {
        int v45 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v46 = *(unsigned __int8 *)(*((void *)this + 9) + 600 * a2 + 12197);
      }
      else {
        int v46 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v47 = *(unsigned __int8 *)(*((void *)this + 9) + 600 * a2 + 12198);
      }
      else {
        int v47 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v48 = *(unsigned __int8 *)(*((void *)this + 9) + 600 * a2 + 12199);
      }
      else {
        int v48 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v49 = *(unsigned __int8 *)(*((void *)this + 9) + 600 * a2 + 12200);
      }
      else {
        int v49 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v50 = *(unsigned __int8 *)(*((void *)this + 9) + 600 * a2 + 12201);
      }
      else {
        int v50 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v51 = *(unsigned __int8 *)(*((void *)this + 9) + 600 * a2 + 12202);
      }
      else {
        int v51 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v52 = *(unsigned __int8 *)(*((void *)this + 9) + 600 * a2 + 12203);
      }
      else {
        int v52 = 0;
      }
      CCLogStream::logInfo(v59, "[dk] %s@%d:RoamInfo: SrcBSS: %02X:%02X:%02X:%02X:%02X:%02X DstBSS: %02X:%02X:%02X:%02X:%02X:%02X \n", "printRoamInfo", 33257, v57, v55, v53, v44, v45, v46, v47, v48, v49, v50, v51, v52);
    }
  }
  if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
    || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
        (CCLogStream::shouldLogConsole() & 1) == 0))
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      unsigned __int16 v13 = (_DWORD *)(*((void *)this + 9) + 600 * a2);
      int v14 = v13[3034];
      int v15 = v13[3035];
      int v16 = v13[3036];
      int v17 = v13[3037];
      int v18 = v13[3173];
      uint64_t v19 = stringFromReason(19, v18);
      uint64_t v20 = *((void *)this + 9);
      uint64_t v21 = *(void *)(v20 + 12104 + 600 * a2 + 16) - *(void *)(v20 + 12104 + 600 * a2 + 8);
      if (*(_DWORD *)(v20 + 12104 + 600 * *(unsigned int *)(v20 + 14076) + 596)) {
        uint64_t v22 = "Yes";
      }
      else {
        uint64_t v22 = "No";
      }
      *(_DWORD *)buf = 67111682;
      int v61 = 73;
      __int16 v62 = 2080;
      uint64_t v63 = "printRoamInfo";
      __int16 v64 = 1024;
      int v65 = 33259;
      __int16 v66 = 1024;
      int v67 = v14;
      __int16 v68 = 1024;
      int v69 = v15;
      __int16 v70 = 1024;
      int v71 = v16;
      __int16 v72 = 1024;
      int v73 = v17;
      __int16 v74 = 1024;
      int v75 = v18;
      __int16 v76 = 2080;
      *(void *)int v77 = v19;
      *(_WORD *)&v77[8] = 2048;
      uint64_t v78 = v21;
      *(_WORD *)uint64_t v79 = 2080;
      *(void *)&v79[2] = v22;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: OrigRSSI: %d TargetRSSI: %d OrigChannel: %d TargetChannel: %d Reason: %d %s RoamTime: %llums isScoreComputed: %s\n", buf, 0x54u);
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v32 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      unint64_t v33 = (_DWORD *)(*((void *)this + 9) + 600 * a2);
      int v34 = v33[3173];
      int v35 = v33[3034];
      int v36 = v33[3035];
      int v37 = v33[3036];
      int v38 = v33[3037];
      unint64_t v39 = (const char *)stringFromReason(19, v34);
      uint64_t v40 = *((void *)this + 9);
      uint64_t v41 = *(void *)(v40 + 12104 + 600 * a2 + 16) - *(void *)(v40 + 12104 + 600 * a2 + 8);
      if (*(_DWORD *)(v40 + 12104 + 600 * *(unsigned int *)(v40 + 14076) + 596)) {
        int v42 = "Yes";
      }
      else {
        int v42 = "No";
      }
      CCLogStream::logInfo(v32, "[dk] %s@%d:OrigRSSI: %d TargetRSSI: %d OrigChannel: %d TargetChannel: %d Reason: %d %s RoamTime: %llums isScoreComputed: %s\n", "printRoamInfo", 33259, v35, v36, v37, v38, v34, v39, v41, v42);
    }
  }
  if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
    || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
        (CCLogStream::shouldLogConsole() & 1) == 0))
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = *(char *)(*((void *)this + 9) + 600 * a2 + 12682);
      int v24 = *(char *)(*((void *)this + 9) + 600 * a2 + 12681);
      int v25 = *(char *)(*((void *)this + 9) + 600 * a2 + 12683);
      int v26 = *(char *)(*((void *)this + 9) + 600 * a2 + 12684);
      int v27 = *(char *)(*((void *)this + 9) + 600 * a2 + 12685);
      int v28 = *(char *)(*((void *)this + 9) + 600 * a2 + 12686);
      int v29 = *(char *)(*((void *)this + 9) + 600 * a2 + 12688);
      int v30 = *(char *)(*((void *)this + 9) + 600 * a2 + 12689);
      *(_DWORD *)buf = 67111682;
      int v61 = 73;
      __int16 v62 = 2080;
      uint64_t v63 = "printRoamInfo";
      __int16 v64 = 1024;
      int v65 = 33261;
      __int16 v66 = 1024;
      int v67 = v23;
      __int16 v68 = 1024;
      int v69 = v24;
      __int16 v70 = 1024;
      int v71 = v25;
      __int16 v72 = 1024;
      int v73 = v26;
      __int16 v74 = 1024;
      int v75 = v27;
      __int16 v76 = 1024;
      *(_DWORD *)int v77 = v28;
      *(_WORD *)&v77[4] = 1024;
      *(_DWORD *)&v77[6] = v29;
      LOWORD(v78) = 1024;
      *(_DWORD *)((char *)&v78 + 2) = v30;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: NumRoamScanAttempts: %d NumFullBand: %d NumPartial:%d NumRoamAborts: %d NumRoamOperationTimeouts: %d NumRoamOperationFailed: %d PacketsLost AQM: %d PacketLost SubQ: %d \n", buf, 0x48u);
    }
  }
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      int v43 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      return CCLogStream::logInfo(v43, "[dk] %s@%d:NumRoamScanAttempts: %d NumFullBand: %d NumPartial:%d NumRoamAborts: %d NumRoamOperationTimeouts: %d NumRoamOperationFailed: %d PacketsLost AQM: %d PacketLost SubQ: %d \n", "printRoamInfo", 33261, *(char *)(*((void *)this + 9) + 600 * a2 + 12682), *(char *)(*((void *)this + 9) + 600 * a2 + 12681), *(char *)(*((void *)this + 9) + 600 * a2 + 12683), *(char *)(*((void *)this + 9) + 600 * a2 + 12684), *(char *)(*((void *)this + 9) + 600 * a2 + 12685), *(char *)(*((void *)this + 9) + 600 * a2 + 12686), *(char *)(*((void *)this + 9) + 600 * a2 + 12688), *(char *)(*((void *)this + 9) + 600 * a2 + 12689));
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::checkForBeaconProtectionSupport(AppleBCMWLANCore *this)
{
  uint64_t result = AppleBCMWLANCore::featureFlagIsBitSet(this, 105);
  if (result) {
    return (*(unsigned __int8 *)(*((void *)this + 9) + 17354) >> 1) & 1;
  }
  return result;
}

BOOL AppleBCMWLANCore::isPassiveChanSpec(AppleBCMWLANCore *this, uint64_t a2)
{
  return AppleBCMWLANCore::isPassiveChannel((uint64_t)this, 0, 3, 0, 0, 0);
}

BOOL AppleBCMWLANCore::isPassiveChannel(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t v6 = *(void *)(a1 + 72);
  unint64_t v7 = *(unsigned __int16 *)(v6 + 19772);
  if (*(_WORD *)(v6 + 19772))
  {
    uint64_t v8 = 0;
    uint64_t v9 = v6 + 20574;
    uint64_t v10 = v6 + 26176;
    BOOL v11 = 1;
    while (1)
    {
      if (*(unsigned __int8 *)(v9 + v8) == a2
        && *(unsigned char *)(v10 + v8 + 400) == (a3 == 1)
        && *(unsigned char *)(v9 + v8 + 1200) == 1)
      {
        if (*(unsigned char *)(v9 + v8 + 1600) || *(unsigned char *)(v9 + v8 + 2000))
        {
          if (*(unsigned __int8 *)(v9 + v8 + 1600) == a4) {
            return v11;
          }
          int v12 = *(unsigned __int8 *)(v9 + v8 + 2000);
        }
        else
        {
          if (!a4 || !*(unsigned char *)(v10 + v8)) {
            return v11;
          }
          int v12 = 0;
        }
        if (v12 == a5 || *(unsigned __int8 *)(v10 + v8) == a6) {
          return v11;
        }
      }
      BOOL v11 = ++v8 < v7;
      if (v7 == v8) {
        return v11;
      }
    }
  }
  return 0;
}

uint64_t AppleBCMWLANCore::getCurrentSlice(AppleBCMWLANCore *this)
{
  return *(unsigned __int8 *)(*((void *)this + 9) + 208);
}

uint64_t IO80211BufferCursor::asType<unsigned short>(uint64_t *a1, uint64_t a2, const char *a3)
{
  uint64_t result = IO80211BufferCursor::_asType<unsigned short>(a1, a2, a3);
  if (__CFADD__(result, (uint64_t)v4 >> 32)) {
    uint64_t v5 = ((uint64_t)v4 >> 63) + 1;
  }
  else {
    uint64_t v5 = (uint64_t)v4 >> 63;
  }
  uint64_t v6 = v5 << 63 >> 63;
  if (v6 != v5 || v6 < 0) {
    os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"This bounded_ptr is pointing to memory outside of what can be represented by a native pointer.", v4);
  }
  return result;
}

IO80211Controller *AppleBCMWLANCore::postRoamCacheEvent(IO80211Controller *result, void *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    *(unsigned char *)(*((void *)result + 9) + 6583) = 0;
    uint64_t v4 = *((void *)result + 9);
    uint64_t v5 = *(IO80211SkywalkInterface **)(v4 + 11304);
    if (v5)
    {
      uint64_t result = (IO80211Controller *)IO80211Controller::postMessage(result, v5, 0x8Au, a2, 0x4CuLL, 1);
      uint64_t v4 = *((void *)v3 + 9);
    }
    uint64_t v6 = *(IO80211SkywalkInterface **)(v4 + 11312);
    if (v6)
    {
      return (IO80211Controller *)IO80211Controller::postMessage(v3, v6, 0x8Au, a2, 0x4CuLL, 1);
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::dumpEventLogReportedStats(AppleBCMWLANCore *this, char a2)
{
  memset(v19, 0, sizeof(v19));
  v15[0] = v19;
  v15[1] = 0x1800180018;
  uint64_t v16 = 2863311530;
  LOBYTE(v16) = a2;
  char isEventBitSet = AppleBCMWLANCore::isEventBitSet(this, 0x34u);
  uint64_t v4 = *(void *)this;
  if (isEventBitSet)
  {
    uint64_t v5 = (*(uint64_t (**)(AppleBCMWLANCore *))(v4 + 88))(this);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 136))(v5))
    {
      *(void *)buf = this;
      *(void *)&long long v18 = AppleBCMWLANCore::handleEventLogGetAsyncCallback;
      *((void *)&v18 + 1) = 0;
      uint64_t v6 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"event_log_get");
    }
    else
    {
      uint64_t v8 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
      *(void *)buf = &v16;
      *(void *)&long long v18 = 8;
      uint64_t v6 = AppleBCMWLANCommander::runIOVarSet(v8, (uint64_t)"event_log_get", (uint64_t)buf, (uint64_t)v15, 0);
    }
    uint64_t v7 = v6;
    if (v6 != -469794535 && v6 != 0)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          int v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          int v13 = v16;
          int v14 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v7);
          CCLogStream::logInfo(v12, "[dk] %s@%d: Error: Unable to set event_log_get set %d struct sizeof is %d %s\n", "dumpEventLogReportedStats", 53715, v13, 8, v14);
        }
      }
    }
  }
  else
  {
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(v4 + 1848))(this)
      || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
          (CCLogStream::shouldLogConsole() & 1) == 0))
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = 78;
        LOWORD(v18) = 2080;
        *(void *)((char *)&v18 + 2) = "dumpEventLogReportedStats";
        WORD5(v18) = 1024;
        HIDWORD(v18) = 53702;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: Fails to dumpEventLogReportedStats as WLC_E_TRACE is not set\n", buf, 0x18u);
      }
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        BOOL v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logNotice(v11, "[dk] %s@%d:Fails to dumpEventLogReportedStats as WLC_E_TRACE is not set\n", "dumpEventLogReportedStats", 53702);
      }
    }
    return 0;
  }
  return v7;
}

uint64_t AppleBCMWLANCore::collectDtimConfigFromFW(AppleBCMWLANCore *this)
{
  uint64_t result = IO80211BssManager::isAssociated(*(IO80211BssManager **)(*((void *)this + 9) + 5440));
  if (result)
  {
    v6[0] = this;
    v6[1] = AppleBCMWLANCore::handleGetDtimParam;
    v6[2] = 0;
    uint64_t v3 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    int v5 = 0x40000;
    uint64_t result = AppleBCMWLANCommander::sendIOCtlGet(v3, 77, (uint64_t)&kNoTxPayload, (unsigned __int16 *)&v5, (uint64_t)v6, 0);
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (result)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          return CCLogStream::logAlert(v4, "[dk] %s@%d:Failed to collect DTIM Config from F/W", "collectDtimConfigFromFW", 56568);
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::collectWmeParameters(AppleBCMWLANCore *this)
{
  if (!IO80211BssManager::isAssociated(*(IO80211BssManager **)(*((void *)this + 9) + 5440))) {
    return 3758097084;
  }
  v5[0] = this;
  v5[1] = AppleBCMWLANCore::handleGetWmeParams;
  v5[2] = 0;
  uint64_t v2 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  int v4 = 0x100000;
  return AppleBCMWLANCommander::sendIOVarGet(v2, (uint64_t)"wme_ac_sta", (uint64_t)&kNoTxPayload, (unsigned __int16 *)&v4, (uint64_t)v5, 0);
}

uint64_t AppleBCMWLANCore::getP2PNANMgmtDataInterface(AppleBCMWLANCore *this)
{
  return *(void *)(*((void *)this + 9) + 29800);
}

uint64_t AppleBCMWLANCore::sendDeauthDissasocEvent(IO80211Controller *a1, uint64_t a2)
{
  int v45 = -1431655766;
  int v5 = (unsigned __int8 *)(a2 + 24);
  int v4 = *(_DWORD *)(a2 + 24);
  unsigned int v6 = *(_DWORD *)(a2 + 8);
  __int16 v42 = *(_DWORD *)(a2 + 12);
  int v43 = v4;
  __int16 v44 = *(_WORD *)(a2 + 28);
  LOBYTE(v45) = *(_DWORD *)(a2 + 4) == 6;
  int v7 = mapBcmStatusToApple80211IOReturnScan(v6);
  int v8 = mapBcmReasonToApple80211IOReturnIEEEReason(*((_DWORD *)v5 - 3));
  v41[0] = v7;
  v41[1] = v8;
  if (!(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1)
    || ((*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1),
        (CCLogStream::shouldLogConsole() & 1) == 0))
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = "Disassoc";
      uint64_t v10 = *(unsigned int *)(a2 + 8);
      if (*(_DWORD *)(a2 + 4) == 6) {
        uint64_t v9 = "Deauth";
      }
      int v35 = v9;
      BOOL v11 = stringFromStatusInEvent(v10, 0);
      int v37 = *(unsigned __int16 *)(a2 + 2);
      uint64_t v33 = *(unsigned int *)(a2 + 12);
      uint64_t v39 = *(unsigned int *)(a2 + 16);
      int v12 = 0;
      if (IO80211_io80211isDebuggable()) {
        int v12 = *v5;
      }
      if (IO80211_io80211isDebuggable()) {
        int v13 = *(unsigned __int8 *)(a2 + 25);
      }
      else {
        int v13 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v14 = *(unsigned __int8 *)(a2 + 26);
      }
      else {
        int v14 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v15 = *(unsigned __int8 *)(a2 + 27);
      }
      else {
        int v15 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v16 = *(unsigned __int8 *)(a2 + 28);
      }
      else {
        int v16 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v17 = *(unsigned __int8 *)(a2 + 29);
      }
      else {
        int v17 = 0;
      }
      *(_DWORD *)buf = 67112706;
      int v47 = 73;
      __int16 v48 = 2080;
      int v49 = "sendDeauthDissasocEvent";
      __int16 v50 = 1024;
      int v51 = 23318;
      __int16 v52 = 2080;
      int v53 = v35;
      __int16 v54 = 2048;
      uint64_t v55 = v10;
      __int16 v56 = 2080;
      int v57 = v11;
      __int16 v58 = 2048;
      uint64_t v59 = v33;
      __int16 v60 = 1024;
      int v61 = v37;
      __int16 v62 = 2048;
      uint64_t v63 = v39;
      __int16 v64 = 1024;
      int v65 = v12;
      __int16 v66 = 1024;
      int v67 = v13;
      __int16 v68 = 1024;
      int v69 = v14;
      __int16 v70 = 1024;
      int v71 = v15;
      __int16 v72 = 1024;
      int v73 = v16;
      __int16 v74 = 1024;
      int v75 = v17;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: Reason: %s,  status = %lu %s, IEEE reason = %lu, flags = 0x%x, authtype = %lu, addr = %02X:%02X:%02X:%02X:%02X:%02X\n", buf, 0x74u);
    }
  }
  if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
  {
    (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v21 = (*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      uint64_t v22 = "Disassoc";
      uint64_t v23 = *(unsigned int *)(a2 + 8);
      if (*(_DWORD *)(a2 + 4) == 6) {
        uint64_t v22 = "Deauth";
      }
      int v38 = v22;
      uint64_t v40 = (CCLogStream *)v21;
      int v24 = stringFromStatusInEvent(v23, 0);
      int v25 = *(unsigned __int16 *)(a2 + 2);
      uint64_t v26 = *(unsigned int *)(a2 + 16);
      uint64_t v34 = *(unsigned int *)(a2 + 12);
      int v36 = v24;
      int v27 = 0;
      if (IO80211_io80211isDebuggable()) {
        int v27 = *v5;
      }
      if (IO80211_io80211isDebuggable()) {
        int v28 = *(unsigned __int8 *)(a2 + 25);
      }
      else {
        int v28 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v29 = *(unsigned __int8 *)(a2 + 26);
      }
      else {
        int v29 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v30 = *(unsigned __int8 *)(a2 + 27);
      }
      else {
        int v30 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v31 = *(unsigned __int8 *)(a2 + 28);
      }
      else {
        int v31 = 0;
      }
      if (IO80211_io80211isDebuggable()) {
        int v32 = *(unsigned __int8 *)(a2 + 29);
      }
      else {
        int v32 = 0;
      }
      CCLogStream::logInfo(v40, "[dk] %s@%d:Reason: %s,  status = %lu %s, IEEE reason = %lu, flags = 0x%x, authtype = %lu, addr = %02X:%02X:%02X:%02X:%02X:%02X\n", "sendDeauthDissasocEvent", 23318, v38, v23, v36, v34, v25, v26, v27, v28, v29, v30, v31, v32);
    }
  }
  uint64_t v18 = *((void *)a1 + 9);
  uint64_t v19 = *(IO80211SkywalkInterface **)(v18 + 11304);
  if (v19)
  {
    IO80211Controller::postMessage(a1, v19, 0xCBu, v41, 0x14uLL, 1);
    uint64_t v18 = *((void *)a1 + 9);
  }
  uint64_t result = *(void *)(v18 + 5424);
  if (result) {
    return AppleBCMWLANJoinAdapter::handleDeauthDisassocEvent(result, *(unsigned __int16 *)(a2 + 12));
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleDeauthData(IO80211Controller *a1, uint64_t a2)
{
  AppleBCMWLANCore::sendDeauthDissasocEvent(a1, a2);
  return AppleBCMWLANCore::handleExtendedEventData((uint64_t)a1, a2);
}

uint64_t AppleBCMWLANCore::processAuthEvenData(AppleBCMWLANCore *a1, uint64_t a2)
{
  uint64_t result = AppleBCMWLAN_isDevFusedOrCSRInternal();
  if (result)
  {
    if ((allowWiFiDebug(void)::checked & 1) == 0)
    {
      allowWiFiDebug(void)::checked = 1;
      uint64_t result = IOParseBootArgNumber("wlan.debug.enable", &allowWiFiDebug(void)::debugEnasbled, 4);
    }
    if (a2)
    {
      if (allowWiFiDebug(void)::debugEnasbled)
      {
        if (!*(_DWORD *)(a2 + 8))
        {
          unsigned int v5 = *(_DWORD *)(a2 + 20);
          if (v5 >= 4)
          {
            uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            if (result)
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              uint64_t result = CCLogStream::shouldLog();
              if (result)
              {
                uint64_t v23 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                uint64_t result = CCLogStream::logNotice(v23, "[dk] %s@%d: event auth type %d datalength %u ", "processAuthEvenData", 57311, *(_DWORD *)(a2 + 16), v5);
              }
            }
            if (*(_WORD *)(a2 + 48) == 1 && v5 >= *(unsigned __int16 *)(a2 + 50) && (v5 & 0xFFFC) != 0)
            {
              char v6 = 0;
              char v7 = 0;
              int v8 = (unsigned __int16 *)(a2 + 52);
              while (1)
              {
                int v9 = *v8;
                size_t v10 = v8[1];
                unint64_t v25 = 0;
                uint64_t result = AppleBCMWLANCore::safe_align_up(a1, v10 + 4, 4uLL, &v25);
                if (result) {
                  break;
                }
                unsigned __int16 v11 = v25;
                if (v25 >= 0xFFFF)
                {
                  uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                  if (result)
                  {
                    (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                    uint64_t result = CCLogStream::shouldLog();
                    if (result)
                    {
                      int v24 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                      return CCLogStream::logAlert(v24, "[dk] %s@%d:UINT16_MAX overflow tagMemoryUsage\n");
                    }
                  }
                  return result;
                }
                if (v9 == 2)
                {
                  if (v10 == 16)
                  {
                    memcpy((void *)(*((void *)a1 + 9) + 292), v8 + 2, v10);
                    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
                    {
                      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                      if (CCLogStream::shouldLog())
                      {
                        uint64_t v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                        CCLogStream::logNotice(v18, "[dk] %s@%d: WLC_E_AUTH: PMKID exists. length %lu\n", "processAuthEvenData", 57353, v10);
                      }
                    }
                    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                    if (result
                      && ((*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1),
                          uint64_t result = CCLogStream::shouldLog(),
                          result))
                    {
                      uint64_t v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                      uint64_t v20 = (unsigned __int8 *)*((void *)a1 + 9);
                      uint64_t result = CCLogStream::logNotice(v19, "[dk] %s@%d: %02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X\n", "processAuthEvenData", 57358, v20[292], v20[293], v20[294], v20[295], v20[296], v20[297], v20[298], v20[299], v20[300], v20[301], v20[302], v20[303], v20[304], v20[305], v20[306],
                                 v20[307]);
                      if (v7) {
                        return result;
                      }
                    }
                    else if (v7)
                    {
                      return result;
                    }
                    char v7 = 0;
                    char v6 = 1;
                  }
                  else
                  {
                    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                    if (result)
                    {
                      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                      uint64_t result = CCLogStream::shouldLog();
                      if (result)
                      {
                        uint64_t v21 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                        uint64_t result = CCLogStream::logNotice(v21, "[dk] %s@%d: WLC_E_AUTH: PMKID has invalid length (%d)\n");
                      }
                    }
                  }
                }
                else if (v9 == 1)
                {
                  if ((v10 - 32) > 0x20)
                  {
                    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                    if (result)
                    {
                      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                      uint64_t result = CCLogStream::shouldLog();
                      if (result)
                      {
                        int v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                        uint64_t result = CCLogStream::logNotice(v16, "[dk] %s@%d: WLC_E_AUTH: PMK has invalid length (%d)\n");
                      }
                    }
                  }
                  else
                  {
                    memcpy((void *)(*((void *)a1 + 9) + 223), v8 + 2, v10);
                    *(_DWORD *)(*((void *)a1 + 9) + 288) = v10;
                    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
                    {
                      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                      if (CCLogStream::shouldLog())
                      {
                        int v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                        CCLogStream::logNotice(v17, "[dk] %s@%d: WLC_E_AUTH: PMK exists. length %lu\n", "processAuthEvenData", 57333, v10);
                      }
                    }
                    size_t v12 = v10 >> 4;
                    uint64_t v13 = 238;
                    do
                    {
                      uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                      if (result)
                      {
                        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                        uint64_t result = CCLogStream::shouldLog();
                        if (result)
                        {
                          int v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                          int v15 = (unsigned __int8 *)(*((void *)a1 + 9) + v13);
                          uint64_t result = CCLogStream::logNotice(v14, "[dk] %s@%d: %02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X\n", "processAuthEvenData", 57340, *(v15 - 15), *(v15 - 14), *(v15 - 13), *(v15 - 12), *(v15 - 11), *(v15 - 10), *(v15 - 9), *(v15 - 8), *(v15 - 7), *(v15 - 6), *(v15 - 5), *(v15 - 4), *(v15 - 3), *(v15 - 2), *(v15 - 1),
                                     *v15);
                        }
                      }
                      v13 += 16;
                      --v12;
                    }
                    while (v12);
                    if (v6) {
                      return result;
                    }
                    char v6 = 0;
                    char v7 = 1;
                  }
                }
                if ((unsigned __int16)v5 >= v11) {
                  unsigned int v5 = (unsigned __int16)v5 - v11;
                }
                else {
                  unsigned int v5 = 0;
                }
                int v8 = (unsigned __int16 *)((char *)v8 + v11);
                if (v5 <= 3) {
                  return result;
                }
              }
              uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              if (result)
              {
                (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                uint64_t result = CCLogStream::shouldLog();
                if (result)
                {
                  uint64_t v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                  return CCLogStream::logAlert(v22, "[dk] %s@%d:safe_align_up failed\n");
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::retrieveExcessPMParams(IOService *a1, uint64_t a2, _DWORD *a3)
{
  if (a2)
  {
    uint64_t result = (*(uint64_t (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)a1[1].OSObject::OSObjectInterface::__vftable[337].free
                                                                                      + 368))(a1[1].OSObject::OSObjectInterface::__vftable[337].free);
    if (result == 4399 || result == 4388)
    {
      *a3 = 1;
      return result;
    }
    if (*(_DWORD *)(a2 + 20) <= 7u)
    {
      uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
      if (result)
      {
        ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          int v9 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
          return CCLogStream::logAlert(v9, "[dk] %s@%d:PM ALERT: Incorrect data length in the Event\n");
        }
      }
      return result;
    }
    if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
    {
      ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
      if (CCLogStream::shouldLog())
      {
        __int16 v114 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        CCLogStream::logAlert(v114, "[dk] %s@%d:PM ALERT: version[%u] length[%4u] reasons[%u]\n", "retrieveExcessPMParams", 50296, *(unsigned __int16 *)(a2 + 48), *(unsigned __int16 *)(a2 + 50), *(_DWORD *)(a2 + 52));
      }
    }
    removePropertyHelper(a1, "PM ALERT event");
    unsigned int v10 = *(_DWORD *)(a2 + 20);
    if (v10 >= 0x700) {
      size_t v11 = 1792;
    }
    else {
      size_t v11 = v10;
    }
    OSDataPtr v12 = OSData::withBytes((const void *)a2, v11);
    uint64_t result = setPropertyHelper(a1, "PM ALERT event", v12);
    if (v12) {
      uint64_t result = ((uint64_t (*)(OSDataPtr))v12->release)(v12);
    }
    *a3 = 1;
    if (*(_WORD *)(a2 + 48) == 3)
    {
      int v13 = *(_DWORD *)(a2 + 52);
      switch(v13)
      {
        case 1:
          uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
          if (result)
          {
            ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
            uint64_t result = CCLogStream::shouldLog();
            if (result)
            {
              v127 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
              uint64_t result = CCLogStream::logAlert(v127, "[dk] %s@%d:PM ALERT: PM_DUR_EXCEEDED\n", "retrieveExcessPMParams", 50317);
            }
          }
          unsigned int v14 = *(unsigned __int16 *)(a2 + 50);
          if (v14 < 8 || *(_DWORD *)(a2 + 20) < v14)
          {
            uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
            if (result)
            {
              ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
              uint64_t result = CCLogStream::shouldLog();
              if (result)
              {
                uint64_t v22 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                uint64_t result = CCLogStream::logAlert(v22, "[dk] %s@%d:PM ALERT: Incorrect data length in the Event %d\n");
              }
            }
          }
          else
          {
            if (v14 >= 0x701)
            {
              uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
              if (result)
              {
                ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                uint64_t result = CCLogStream::shouldLog();
                if (result)
                {
                  int v15 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                  return CCLogStream::logAlert(v15, "[dk] %s@%d:InCorrect PM Alert Len =%d\n");
                }
              }
              return result;
            }
            unsigned int v23 = v14 - 8;
            if (v14 == 8) {
              return result;
            }
            unsigned int v131 = 0;
            uint64_t v132 = 0;
            int v130 = 0;
            uint64_t v133 = 0;
            uint64_t v24 = a2 + 56;
            while (2)
            {
              if (v23 <= 3)
              {
                uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                if (result)
                {
                  ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                  uint64_t result = CCLogStream::shouldLog();
                  if (result)
                  {
                    __int16 v112 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                    uint64_t result = CCLogStream::logAlert(v112, "[dk] %s@%d:PM ALERT: Incorrect length %d remaining. Report issue. Bailing.\n");
                  }
                }
              }
              else
              {
                unsigned int v25 = *(unsigned __int16 *)(v24 + 2);
                if (v23 < v25)
                {
                  uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                  if (result)
                  {
                    ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                    uint64_t result = CCLogStream::shouldLog();
                    if (result)
                    {
                      int v113 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                      uint64_t result = CCLogStream::logAlert(v113, "[dk] %s@%d:PM ALERT: Incorrect remlength %d remaining, length in TLV %d Report issue. Bailing.\n");
                    }
                  }
                }
                else
                {
                  switch(*(_WORD *)v24)
                  {
                    case 0:
                      uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                      if (v25 > 0x4B)
                      {
                        if (result)
                        {
                          ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                          uint64_t result = CCLogStream::shouldLog();
                          if (result)
                          {
                            int v105 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                            uint64_t result = CCLogStream::logAlert(v105, "[dk] %s@%d:PMALERT_FIXED: PM ALERT 0x%08x:\n\tPrev Stats Time: %u, Current Time: %u\n\tPrev PM Dur: %u Prev MPC Dur: %u Current PM Dur %u Current MPC Dur %u\n\tHw-MACC: %u Sw-MACC: %u\n\tDrift: last=%u min=%u avg=%u max=%u ct=%u\n", "retrieveExcessPMParams", 50412, *(_DWORD *)(a2 + 52), *(_DWORD *)(v24 + 4), *(_DWORD *)(v24 + 8), *(_DWORD *)(v24 + 12), *(_DWORD *)(v24 + 20), *(_DWORD *)(v24 + 16), *(_DWORD *)(v24 + 24), *(_DWORD *)(v24 + 28), *(_DWORD *)(v24 + 32), *(_DWORD *)(v24 + 36), *(_DWORD *)(v24 + 40),
                                       *(_DWORD *)(v24 + 48),
                                       *(_DWORD *)(v24 + 44),
                                       *(_DWORD *)(v24 + 52));
                          }
                        }
                        unsigned int v27 = *(_DWORD *)(v24 + 4);
                        unsigned int v26 = *(_DWORD *)(v24 + 8);
                        unsigned int v28 = v26 - v27;
                        if (v26 > v27)
                        {
                          unsigned int v30 = *(_DWORD *)(v24 + 12);
                          unsigned int v29 = *(_DWORD *)(v24 + 16);
                          BOOL v31 = v29 >= v30;
                          unsigned int v32 = v29 - v30;
                          if (v31)
                          {
                            unsigned int v33 = v28 - v32;
                            BOOL v34 = v28 < v32;
                            unsigned int v131 = v33;
                            uint64_t v35 = 100 * v33;
                            int v36 = (v35 & 0xFFFFFFFF00000000) != 0 || v34;
                            unsigned int v37 = v35 / v28;
                            uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                            if (result)
                            {
                              ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                              uint64_t result = CCLogStream::shouldLog();
                              if (result)
                              {
                                int v109 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                                uint64_t result = CCLogStream::logAlert(v109, "[dk] %s@%d:PM ALERT: Awake time: %u Total time: %u Duty cycle %u\n", "retrieveExcessPMParams", 50426, v131, v28, v37);
                              }
                            }
                            if ((v130 | v36))
                            {
                              if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
                              {
                                ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                                if (CCLogStream::shouldLog())
                                {
                                  __int16 v110 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                                  CCLogStream::logEmergency(v110, "[dk] %s@%d:PM ALERT: Overflow detected\n", "retrieveExcessPMParams", 50429);
                                }
                              }
                              uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                              if (result)
                              {
                                ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                                uint64_t result = CCLogStream::shouldLog();
                                if (result)
                                {
                                  v111 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                                  uint64_t result = CCLogStream::logEmergency(v111, "[dk] %s@%d:PM ALERT 0x%08x:\n\tPrev Stats Time: %u, Current Time: %u\n\tPrev PM Dur: %u Prev MPC Dur: %u Current PM Dur %u Current MPC Dur %u\n\tHw-MACC: %u Sw-MACC: %u\n\tDrift: last=%u min=%u avg=%u max=%u ct=%u\n", "retrieveExcessPMParams", 50449, *(_DWORD *)(a2 + 52), *(_DWORD *)(v24 + 4), *(_DWORD *)(v24 + 8), *(_DWORD *)(v24 + 12), *(_DWORD *)(v24 + 20), *(_DWORD *)(v24 + 16), *(_DWORD *)(v24 + 24), *(_DWORD *)(v24 + 28), *(_DWORD *)(v24 + 32), *(_DWORD *)(v24 + 36), *(_DWORD *)(v24 + 40),
                                             *(_DWORD *)(v24 + 48),
                                             *(_DWORD *)(v24 + 44),
                                             *(_DWORD *)(v24 + 52));
                                }
                              }
                              int v130 = 1;
                            }
                            else
                            {
                              int v130 = 0;
                              if (v37 < HIDWORD(a1[1].OSObject::OSObjectInterface::__vftable[1099].init)) {
                                *a3 = 0;
                              }
                            }
                          }
                        }
                        goto LABEL_242;
                      }
                      if (result)
                      {
                        ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                        uint64_t result = CCLogStream::shouldLog();
                        if (result)
                        {
                          int v115 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                          return CCLogStream::logAlert(v115, "[dk] %s@%d:PM ALERT: Incorrect PM alert fixed length %d. Expected length %ld. Rem length %d. Report issue. Bailing.\n");
                        }
                      }
                      return result;
                    case 1:
                      if (v25 <= 0xF)
                      {
                        uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                        if (result)
                        {
                          ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                          uint64_t result = CCLogStream::shouldLog();
                          if (result)
                          {
                            __int16 v116 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                            return CCLogStream::logAlert(v116, "[dk] %s@%d:PM ALERT: Incorrect PM state length %d remaining. Expected minimum length is %ld. Rem length %d. Report issue. Bailing.\n");
                          }
                        }
                      }
                      else
                      {
                        int v39 = (v25 & 0xFFF8) - 24;
                        if (v25 <= 0x18) {
                          int v40 = 24;
                        }
                        else {
                          int v40 = *(unsigned __int16 *)(v24 + 2);
                        }
                        if (v25 <= 0x18) {
                          int v39 = 0;
                        }
                        if (v40 - 24 == v39)
                        {
                          if (*(unsigned char *)(v24 + 4))
                          {
                            unint64_t v41 = 0;
                            __int16 v42 = (int *)(v24 + 12);
                            do
                            {
                              uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                              if (result)
                              {
                                ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                                uint64_t result = CCLogStream::shouldLog();
                                if (result)
                                {
                                  int v43 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                                  int v44 = *v42;
                                  int v45 = pmReasonStr(*v42);
                                  uint64_t result = CCLogStream::logInfo(v43, "[dk] %s@%d:Reason 0x%x (%s) Timestmp %ums\n", "retrieveExcessPMParams", 50483, v44, v45, *(v42 - 1));
                                }
                              }
                              ++v41;
                              v42 += 2;
                            }
                            while (v41 < *(unsigned __int8 *)(v24 + 4));
                          }
                          uint64_t v132 = v24;
                          goto LABEL_242;
                        }
                        uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                        if (result)
                        {
                          ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                          uint64_t result = CCLogStream::shouldLog();
                          if (result)
                          {
                            __int16 v124 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                            return CCLogStream::logAlert(v124, "[dk] %s@%d:PM ALERT: Incorrect PM state TLV length %d remaining. Report issue. Bailing.\n");
                          }
                        }
                      }
                      return result;
                    case 2:
                      if (v25 <= 7)
                      {
                        uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                        if (result)
                        {
                          ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                          uint64_t result = CCLogStream::shouldLog();
                          if (result) {
                            goto LABEL_283;
                          }
                        }
                      }
                      else
                      {
                        if (v25 - 4 >= 3) {
                          int v46 = 3;
                        }
                        else {
                          int v46 = v25 - 4;
                        }
                        unsigned int v47 = ~v46 + v25;
                        if (v25 - 4 == (v47 & 0xFFFFFFFC))
                        {
                          if (v47 >= 4)
                          {
                            uint64_t v98 = 0;
                            uint64_t v99 = v47 >> 2;
                            uint64_t v100 = 12;
                            do
                            {
                              if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
                              {
                                ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                                if (CCLogStream::shouldLog())
                                {
                                  uint64_t v101 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                                  v102 = pmReasonStr(*(_DWORD *)(v132 + v100));
                                  CCLogStream::logInfo(v101, "[dk] %s@%d:\tWL_PMALERT_EVENT_DUR Duration of %d %s is %u", "retrieveExcessPMParams", 50557, v98, v102, *(_DWORD *)(v24 + 4 * v98 + 4));
                                }
                              }
                              uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                              if (result)
                              {
                                ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                                uint64_t result = CCLogStream::shouldLog();
                                if (result)
                                {
                                  size_t v103 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                                  uint64_t result = CCLogStream::logInfo(v103, "[dk] %s@%d:\n", "retrieveExcessPMParams", 50558);
                                }
                              }
                              ++v98;
                              v100 += 8;
                            }
                            while (v99 != v98);
                          }
                          uint64_t v133 = v24;
                          goto LABEL_242;
                        }
                        uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                        if (result)
                        {
                          ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                          uint64_t result = CCLogStream::shouldLog();
                          if (result) {
                            goto LABEL_304;
                          }
                        }
                      }
                      return result;
                    case 3:
                      uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                      if (v25 > 0x10F)
                      {
                        if (result)
                        {
                          ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                          uint64_t result = CCLogStream::shouldLog();
                          if (result)
                          {
                            __int16 v48 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                            uint64_t result = CCLogStream::logAlertIf(v48, 0x20uLL, "[dk] %s@%d:PMALERT_UCODE_DBG: macctrl %u m_p2p_hps %u psm_brc %u ifsstat %u\n\t psmdebug[0] %u psmdebug[1] %u psmdebug[2] %u psmdebug[3] %u\n\t phydebug[0] %u phydebug[1] %u phydebug[2] %u phydebug[3] %u\n\t psm_maccommand %u txe_status1 %u AQMFifoReady %u\n", "retrieveExcessPMParams", 50625, *(unsigned int *)(v24 + 4), *(unsigned __int16 *)(v24 + 8), *(unsigned int *)(v24 + 10), *(unsigned int *)(v24 + 14));
                          }
                        }
                        goto LABEL_242;
                      }
                      if (result)
                      {
                        ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                        uint64_t result = CCLogStream::shouldLog();
                        if (result)
                        {
                          int v117 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                          return CCLogStream::logAlert(v117, "[dk] %s@%d:PM ALERT: Incorrect PM ucode dbg length %d remaining. Expected minimum length is %ld. Rem length %d. Report issue. Bailing.\n");
                        }
                      }
                      return result;
                    case 4:
                      if (v25 < 0x10)
                      {
                        uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                        if (result)
                        {
                          ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                          uint64_t result = CCLogStream::shouldLog();
                          if (result)
                          {
                            __int16 v118 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                            return CCLogStream::logAlert(v118, "[dk] %s@%d:PM ALERT: Incorrect PS Hist length %d remaining. Expected minimum length is %ld. Rem length %d. Report issue. Bailing.\n");
                          }
                        }
                      }
                      else
                      {
                        if ((v25 & 7) == 0) {
                          goto LABEL_242;
                        }
                        uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                        if (result)
                        {
                          ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                          uint64_t result = CCLogStream::shouldLog();
                          if (result)
                          {
                            int v125 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                            return CCLogStream::logAlert(v125, "[dk] %s@%d:PM ALERT: Incorrect PS Dbg TLV length %d remaining. Report issue. Bailing.\n");
                          }
                        }
                      }
                      return result;
                    case 5:
                      uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                      if (v25 > 0x10F)
                      {
                        if (result)
                        {
                          ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                          if (CCLogStream::shouldLog())
                          {
                            __int16 v106 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                            CCLogStream::logAlertIf(v106, 0x20uLL, "[dk] %s@%d:PMALERT_EXT_UCODE_DBG: macctrl %u m_p2p_hps %u psm_brc %u ifsstat %u\n\t m_p2p_bss_dtim_prd[0] %u m_p2p_bss_dtim_prd[1] %u m_p2p_bss_dtim_prd[2] %u m_p2p_bss_dtim_prd[3] %u\n", "retrieveExcessPMParams", 50655, *(_DWORD *)(v24 + 4), *(unsigned __int16 *)(v24 + 8), *(_DWORD *)(v24 + 10), *(_DWORD *)(v24 + 14), *(_DWORD *)(v24 + 26), *(_DWORD *)(v24 + 30), *(_DWORD *)(v24 + 34), *(_DWORD *)(v24 + 38));
                          }
                        }
                        for (uint64_t i = 0; i != 20; ++i)
                        {
                          if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
                          {
                            ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                            if (CCLogStream::shouldLog())
                            {
                              __int16 v50 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                              CCLogStream::logAlertIf(v50, 0x20uLL, "[dk] %s@%d:\t psmdebug[%d] %u", "retrieveExcessPMParams", 50658, i, *(_DWORD *)(v24 + 26 + 4 * i));
                            }
                          }
                        }
                        for (uint64_t j = 0; j != 20; ++j)
                        {
                          if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
                          {
                            ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                            if (CCLogStream::shouldLog())
                            {
                              __int16 v72 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                              CCLogStream::logAlertIf(v72, 0x20uLL, "[dk] %s@%d:\t phydebug[%d] %u", "retrieveExcessPMParams", 50661, j, *(_DWORD *)(v24 + 106 + 4 * j));
                            }
                          }
                        }
                        uint64_t v77 = 0;
                        uint64_t v78 = v24 + 186;
                        do
                        {
                          for (uint64_t k = 0; k != 12; ++k)
                          {
                            if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
                            {
                              ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                              if (CCLogStream::shouldLog())
                              {
                                __int16 v80 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                                CCLogStream::logAlertIf(v80, 0x20uLL, "[dk] %s@%d:\t M_P2P_BSS[%d][%d] %u", "retrieveExcessPMParams", 50665, v77, k, *(unsigned __int16 *)(v78 + 2 * k));
                              }
                            }
                          }
                          ++v77;
                          v78 += 24;
                        }
                        while (v77 != 3);
                        for (uint64_t m = 0; m != 3; ++m)
                        {
                          if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
                          {
                            ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                            if (CCLogStream::shouldLog())
                            {
                              __int16 v82 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                              CCLogStream::logAlertIf(v82, 0x20uLL, "[dk] %s@%d:\t M_P2P_PRE_TBTT[%d] %u", "retrieveExcessPMParams", 50669, m, *(unsigned __int16 *)(v24 + 258 + 2 * m));
                            }
                          }
                        }
                        uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                        if (result)
                        {
                          ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                          uint64_t result = CCLogStream::shouldLog();
                          if (result)
                          {
                            uint64_t v95 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                            uint64_t result = CCLogStream::logAlertIf(v95, 0x20uLL, "[dk] %s@%d:\t xmtfifordy %u psm_maccommand %u txe_status1 %u AQMFifoReady %u\n", "retrieveExcessPMParams");
                          }
                        }
                        goto LABEL_242;
                      }
                      if (result)
                      {
                        ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                        uint64_t result = CCLogStream::shouldLog();
                        if (result)
                        {
                          int v119 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                          return CCLogStream::logAlert(v119, "[dk] %s@%d:PM ALERT: Incorrect PM ucode dbg1 length %d remaining. Expected minimum length is %ld. Rem length %d. Report issue. Bailing.\n");
                        }
                      }
                      return result;
                    case 6:
                      if (v25 <= 7)
                      {
                        uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                        if (result)
                        {
                          ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                          uint64_t result = CCLogStream::shouldLog();
                          if (result)
                          {
LABEL_283:
                            __int16 v120 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                            uint64_t result = CCLogStream::logAlert(v120, "[dk] %s@%d:PM ALERT: Incorrect Event %d Duration length %d remaining. Expected minimum Length %ld. Rem length %d. Report issue. Bailing.\n");
                          }
                        }
                      }
                      else
                      {
                        if (v25 - 4 >= 3) {
                          int v51 = 3;
                        }
                        else {
                          int v51 = v25 - 4;
                        }
                        unsigned int v52 = ~v51 + v25;
                        if (v25 - 4 == (v52 & 0xFFFFFFFC))
                        {
                          if (v52 < 4) {
                            goto LABEL_242;
                          }
                          uint64_t v53 = 0;
                          uint64_t v54 = v52 >> 2;
                          uint64_t v55 = v24 + 4;
                          uint64_t v56 = 12;
                          while (1)
                          {
                            if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
                            {
                              ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                              if (CCLogStream::shouldLog())
                              {
                                v129 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                                uint64_t v63 = pmReasonStr(*(_DWORD *)(v132 + v56));
                                CCLogStream::logInfo(v129, "[dk] %s@%d:\tWL_PMALERT_EPM_START_EVENT_DUR of Reason %d (%s) is %u", "retrieveExcessPMParams", 50591, v53, v63, *(_DWORD *)(v55 + 4 * v53));
                              }
                            }
                            int v57 = *(_DWORD *)(v132 + v56);
                            if (v57 == 256)
                            {
                              if (v133) {
                                goto LABEL_136;
                              }
                            }
                            else if (v57 == 512 && v133 != 0)
                            {
LABEL_136:
                              unsigned int v59 = *(_DWORD *)(v133 + 4 * v53 + 4);
                              unsigned int v60 = *(_DWORD *)(v55 + 4 * v53);
                              BOOL v31 = v59 >= v60;
                              unsigned int v61 = v59 - v60;
                              if (v61 != 0 && v31)
                              {
                                p_free = &a1[1].OSObject::OSObjectInterface::__vftable[412].free;
                                if (v61 >= v131 >> 1)
                                {
                                  unsigned char *p_free = 1;
                                  if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
                                  {
                                    ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                                    if (CCLogStream::shouldLog())
                                    {
                                      int v65 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                                      CCLogStream::logAlert(v65, "[dk] %s@%d:Radio is awake possibly due to Access Point Issues such as setting TIM in all beacons\n", "retrieveExcessPMParams", 50598);
                                    }
                                  }
                                }
                                else
                                {
                                  unsigned char *p_free = 0;
                                }
                              }
                            }
                            uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                            if (result)
                            {
                              ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                              uint64_t result = CCLogStream::shouldLog();
                              if (result)
                              {
                                __int16 v64 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                                uint64_t result = CCLogStream::logInfo(v64, "[dk] %s@%d:\n", "retrieveExcessPMParams", 50604);
                              }
                            }
                            ++v53;
                            v56 += 8;
                            if (v54 == v53) {
                              goto LABEL_242;
                            }
                          }
                        }
                        uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                        if (result)
                        {
                          ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                          uint64_t result = CCLogStream::shouldLog();
                          if (result)
                          {
LABEL_304:
                            v126 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                            uint64_t result = CCLogStream::logAlert(v126, "[dk] %s@%d:PM ALERT: Incorrect Event Duration TLV length %d remaining. Report issue. Bailing.\n");
                          }
                        }
                      }
                      break;
                    case 7:
                      uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                      if (v25 <= 0x111)
                      {
                        if (result)
                        {
                          ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                          uint64_t result = CCLogStream::shouldLog();
                          if (result)
                          {
                            int v121 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                            return CCLogStream::logAlert(v121, "[dk] %s@%d:PM ALERT: Incorrect PM ucode dbg2 length %d remaining. Expected minimum length is %ld. Rem length %d. Report issue. Bailing.\n");
                          }
                        }
                        return result;
                      }
                      if (result)
                      {
                        ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                        if (CCLogStream::shouldLog())
                        {
                          v107 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                          CCLogStream::logInfoIf(v107, 0x20uLL, "[dk] %s@%d:PMALERT_UCODE_DBG_V2: macctrl %u m_p2p_hps %u psm_brc %u ifsstat %u\n\t m_p2p_bss_dtim_prd[0] %u m_p2p_bss_dtim_prd[1] %u m_p2p_bss_dtim_prd[2] %u m_p2p_bss_dtim_prd[3] %u\n", "retrieveExcessPMParams", 50684, *(_DWORD *)(v24 + 4), *(unsigned __int16 *)(v24 + 8), *(_DWORD *)(v24 + 10), *(_DWORD *)(v24 + 14), *(_DWORD *)(v24 + 26), *(_DWORD *)(v24 + 30), *(_DWORD *)(v24 + 34), *(_DWORD *)(v24 + 38));
                        }
                      }
                      for (uint64_t n = 0; n != 20; ++n)
                      {
                        if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
                        {
                          ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                          if (CCLogStream::shouldLog())
                          {
                            int v67 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                            CCLogStream::logInfoIf(v67, 0x20uLL, "[dk] %s@%d:\t psmdebug[%d] %u", "retrieveExcessPMParams", 50687, n, *(_DWORD *)(v24 + 26 + 4 * n));
                          }
                        }
                      }
                      for (iuint64_t i = 0; ii != 20; ++ii)
                      {
                        if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
                        {
                          ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                          if (CCLogStream::shouldLog())
                          {
                            __int16 v74 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                            CCLogStream::logInfoIf(v74, 0x20uLL, "[dk] %s@%d:\t phydebug[%d] %u", "retrieveExcessPMParams", 50690, ii, *(_DWORD *)(v24 + 106 + 4 * ii));
                          }
                        }
                      }
                      uint64_t v83 = 0;
                      uint64_t v84 = v24 + 186;
                      do
                      {
                        for (juint64_t j = 0; jj != 12; ++jj)
                        {
                          if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
                          {
                            ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                            if (CCLogStream::shouldLog())
                            {
                              v86 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                              CCLogStream::logInfoIf(v86, 0x20uLL, "[dk] %s@%d:\t M_P2P_BSS[%d][%d] %u", "retrieveExcessPMParams", 50694, v83, jj, *(unsigned __int16 *)(v84 + 2 * jj));
                            }
                          }
                        }
                        ++v83;
                        v84 += 24;
                      }
                      while (v83 != 3);
                      for (kuint64_t k = 0; kk != 3; ++kk)
                      {
                        if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
                        {
                          ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                          if (CCLogStream::shouldLog())
                          {
                            v88 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                            CCLogStream::logInfoIf(v88, 0x20uLL, "[dk] %s@%d:\t M_P2P_PRE_TBTT[%d] %u", "retrieveExcessPMParams", 50698, kk, *(unsigned __int16 *)(v24 + 258 + 2 * kk));
                          }
                        }
                      }
                      uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                      if (result)
                      {
                        ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                        uint64_t result = CCLogStream::shouldLog();
                        if (result)
                        {
                          uint64_t v96 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                          uint64_t result = CCLogStream::logInfoIf(v96, 0x20uLL, "[dk] %s@%d:\t xmtfifordy %u psm_maccommand %u txe_status1 %u AQMFifoReady %u\n", "retrieveExcessPMParams", 50700, *(unsigned __int16 *)(v24 + 264), *(unsigned __int16 *)(v24 + 266), *(unsigned __int16 *)(v24 + 268), *(_DWORD *)(v24 + 270));
                        }
                      }
                      goto LABEL_242;
                    case 8:
                      uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                      if (v25 <= 0x3F)
                      {
                        if (result)
                        {
                          ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                          uint64_t result = CCLogStream::shouldLog();
                          if (result)
                          {
                            __int16 v122 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                            return CCLogStream::logAlert(v122, "[dk] %s@%d:PM ALERT: Incorrect WL_PMALERT_FIXED_SC length %d remaining. Expected minimum length is %ld. Rem length %d. Report issue. Bailing.\n");
                          }
                        }
                        return result;
                      }
                      if (result)
                      {
                        ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                        uint64_t result = CCLogStream::shouldLog();
                        if (result)
                        {
                          __int16 v68 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                          uint64_t result = CCLogStream::logAlert(v68, "PMALERT_FIXED_SC: PM ALERT SC 0x%08x:\n\tPrev Stats Time: %u, Current Time: %u\n\tPrev PM Dur: %u Current PM Dur %u win_down_time %u\n\tHw-MACC: %u Sw-MACC: %u\n\tDrift: last=%u min=%u avg=%u max=%u ct=%u\n\tCalibration: CalDur: %u Prev CalDur: %u\n", *(unsigned int *)(a2 + 52), *(unsigned int *)(v24 + 8), *(unsigned int *)(v24 + 12), *(unsigned int *)(v24 + 16), *(unsigned int *)(v24 + 20));
                        }
                      }
                      goto LABEL_242;
                    case 9:
                      uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                      if (v25 <= 0x109)
                      {
                        if (result)
                        {
                          ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                          uint64_t result = CCLogStream::shouldLog();
                          if (result)
                          {
                            int v123 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                            return CCLogStream::logAlert(v123, "[dk] %s@%d:PM ALERT: Incorrect wl_pmalert_ucode_dbg_sc_v1 length %d remaining. Expected minimum length is %ld. Rem length %d. Report issue. Bailing.\n");
                          }
                        }
                        return result;
                      }
                      if (result)
                      {
                        ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                        if (CCLogStream::shouldLog())
                        {
                          __int16 v108 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                          CCLogStream::logAlert(v108, "PMALERT_UCODE_DBG_SC: macctrl %u m_p2p_hps %u psm_brc %u ifsstat %u\n\t m_p2p_bss_dtim_prd[0] %u m_p2p_bss_dtim_prd[1] %u m_p2p_bss_dtim_prd[2] %u m_p2p_bss_dtim_prd[3] %u\n", *(_DWORD *)(v24 + 4), *(unsigned __int16 *)(v24 + 8), *(_DWORD *)(v24 + 10), *(_DWORD *)(v24 + 14), *(_DWORD *)(v24 + 26), *(_DWORD *)(v24 + 30), *(_DWORD *)(v24 + 34), *(_DWORD *)(v24 + 38));
                        }
                      }
                      for (uint64_t mm = 0; mm != 20; ++mm)
                      {
                        if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
                        {
                          ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                          if (CCLogStream::shouldLog())
                          {
                            __int16 v70 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                            CCLogStream::logAlert(v70, "\t psmdebug[%d] %u", mm, *(_DWORD *)(v24 + 26 + 4 * mm));
                          }
                        }
                      }
                      for (nuint64_t n = 0; nn != 20; ++nn)
                      {
                        if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
                        {
                          ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                          if (CCLogStream::shouldLog())
                          {
                            __int16 v76 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                            CCLogStream::logAlert(v76, "\t phydebug[%d] %u", nn, *(_DWORD *)(v24 + 106 + 4 * nn));
                          }
                        }
                      }
                      uint64_t v89 = 0;
                      uint64_t v90 = v24 + 186;
                      do
                      {
                        for (uint64_t i1 = 0; i1 != 12; ++i1)
                        {
                          if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
                          {
                            ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                            if (CCLogStream::shouldLog())
                            {
                              v92 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                              CCLogStream::logAlert(v92, "\t M_P2P_BSS[%d][%d] %u", v89, i1, *(unsigned __int16 *)(v90 + 2 * i1));
                            }
                          }
                        }
                        ++v89;
                        v90 += 24;
                      }
                      while (v89 != 3);
                      for (uint64_t i2 = 0; i2 != 3; ++i2)
                      {
                        if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
                        {
                          ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                          if (CCLogStream::shouldLog())
                          {
                            uint64_t v94 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                            CCLogStream::logAlert(v94, "\t M_P2P_PRE_TBTT[%d] %u", i2, *(unsigned __int16 *)(v24 + 258 + 2 * i2));
                          }
                        }
                      }
                      uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                      if (result)
                      {
                        ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                        uint64_t result = CCLogStream::shouldLog();
                        if (result)
                        {
                          uint64_t v97 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                          uint64_t result = CCLogStream::logAlert(v97, "\t psm_maccommand %u \n");
                        }
                      }
LABEL_242:
                      unsigned int v104 = *(unsigned __int16 *)(v24 + 2);
                      BOOL v31 = v23 >= v104;
                      v23 -= v104;
                      if (!v31)
                      {
                        uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                        if (result)
                        {
                          ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                          uint64_t result = CCLogStream::shouldLog();
                          if (result)
                          {
                            v128 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                            return CCLogStream::logInfo(v128, "[dk] %s@%d:Not enough space to accomodate remaining TLVs, Bail out\n", "retrieveExcessPMParams", 50784);
                          }
                        }
                        return result;
                      }
                      v24 += *(unsigned __int16 *)(v24 + 2);
                      if (!v23) {
                        return result;
                      }
                      continue;
                    default:
                      uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                      if (result)
                      {
                        ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                        uint64_t result = CCLogStream::shouldLog();
                        if (result)
                        {
                          int v38 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                          uint64_t result = CCLogStream::logAlert(v38, "[dk] %s@%d:PM ALERT: Incorrect type field. %d Len %d\n");
                        }
                      }
                      goto LABEL_242;
                  }
                }
              }
              break;
            }
          }
          break;
        case 2:
          uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
          if (result)
          {
            ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
            uint64_t result = CCLogStream::shouldLog();
            if (result)
            {
              uint64_t v19 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
              return CCLogStream::logAlert(v19, "[dk] %s@%d:PM ALERT: MPC_DUR_EXCEEDED\n");
            }
          }
          return result;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_39;
        case 4:
          uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
          if (result)
          {
            ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
            uint64_t result = CCLogStream::shouldLog();
            if (result)
            {
              uint64_t v20 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
              return CCLogStream::logAlert(v20, "[dk] %s@%d:PM ALERT: ROAM_THRESH_EXCEEDED\n");
            }
          }
          return result;
        case 8:
          uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
          if (result)
          {
            ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
            uint64_t result = CCLogStream::shouldLog();
            if (result)
            {
              uint64_t v18 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
              return CCLogStream::logAlert(v18, "[dk] %s@%d:PM ALERT: EPNO_THRESH_EXCEEDED\n");
            }
          }
          return result;
        default:
          if (v13 == 16)
          {
            uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
            if (result)
            {
              ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
              uint64_t result = CCLogStream::shouldLog();
              if (result)
              {
                uint64_t v21 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                return CCLogStream::logAlert(v21, "[dk] %s@%d:PM ALERT: CONST_AWAKE_DUR_ALERT\n");
              }
            }
          }
          else if (v13 == 32)
          {
            uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
            if (result)
            {
              ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
              uint64_t result = CCLogStream::shouldLog();
              if (result)
              {
                int v16 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                return CCLogStream::logAlert(v16, "[dk] %s@%d:PM ALERT: CONST_AWAKE_DUR_RECOVERY\n");
              }
            }
          }
          else
          {
LABEL_39:
            uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
            if (result)
            {
              ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
              uint64_t result = CCLogStream::shouldLog();
              if (result)
              {
                int v17 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
                return CCLogStream::logAlert(v17, "[dk] %s@%d:PM ALERT: UN-KNOWN \n");
              }
            }
          }
          return result;
      }
    }
  }
  else
  {
    uint64_t result = ((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
    if (result)
    {
      ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v8 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        return CCLogStream::logAlert(v8, "[dk] %s@%d:PM ALERT: No data attached to Event\n");
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleLinkDown(AppleBCMWLANCore *this)
{
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 29)) {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 456))(this);
  }
  AppleBCMWLANCore::setBeaconListenInterval(this);
  AppleBCMWLANCore::reportWiFiChanTransitionToSac(this, *(void *)(*((void *)this + 9) + 784), *(_DWORD *)(*((void *)this + 9) + 792), 0);
  uint64_t v2 = *((void *)this + 9);
  if (*(unsigned char *)(v2 + 29948))
  {
    AppleBCMWLANCore::setupTrafficMonitoring(this, 0);
    uint64_t v2 = *((void *)this + 9);
  }
  *(_DWORD *)(v2 + 17644) = 0;
  uint64_t result = AppleBCMWLANCore::setLMTPC(this);
  *(_DWORD *)(*((void *)this + 9) + 19640) = 0;
  uint64_t v4 = *((void *)this + 9);
  if (*(void *)(v4 + 11312))
  {
    if (*(unsigned char *)(v4 + 222))
    {
      *(unsigned char *)(v4 + 222) = 0;
      uint64_t result = AppleBCMWLANProximityInterface::bringupLink(*(AppleBCMWLANProximityInterface **)(*((void *)this + 9)
                                                                                              + 11312));
      if (result)
      {
        uint64_t v5 = result;
        uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (result)
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            char v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            char v7 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
            return CCLogStream::logAlert(v6, "[dk] %s@%d: Unable to bring up AWDL: %s\n", "handleLinkDown", 23674, v7);
          }
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::isWatchdogRunning(AppleBCMWLANCore *this)
{
  return *(unsigned __int8 *)(*((void *)this + 9) + 10388) >> 7;
}

uint64_t AppleBCMWLANCore::handleCCAOnlyChanQualEvent(AppleBCMWLANCore *a1, uint64_t a2)
{
  unint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
  unsigned int v41 = -1431655766;
  uint64_t v4 = (char *)IOMallocZeroData();
  uint64_t v5 = (unsigned int *)IOMallocZeroData();
  char v6 = v5;
  unint64_t v39 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v37 = v7;
  long long v38 = v7;
  *(void *)&long long v36 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v36 + 1) = 0xAAAAAAAAAAAAAAAALL;
  if (v4 && v5)
  {
    unsigned int v8 = *(_DWORD *)(a2 + 20);
    if (v8 <= 7)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          int v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logAlert(v9, "[dk] %s@%d:Invalid wle message length=%u, too small to hold event length=%u\n");
        }
      }
      goto LABEL_50;
    }
    int v11 = *(unsigned __int16 *)(a2 + 50);
    switch(v11)
    {
      case 512:
        unsigned int v12 = 68;
        break;
      case 1280:
        unsigned int v12 = 80;
        break;
      case 1024:
        unsigned int v12 = 72;
        break;
      default:
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            BOOL v31 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logAlert(v31, "[dk] %s@%d:Invalid wle message,unknown message ID=0x%x\n");
          }
        }
        goto LABEL_50;
    }
    if (v8 > 0x50 || v8 < v12)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          unsigned int v26 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logAlert(v26, "[dk] %s@%d:Invalid wle message length=%u, expected_min=%u expected_max=%u\n");
        }
      }
      goto LABEL_50;
    }
    memcpy(v5, (const void *)(a2 + 48), v12);
    unsigned int v14 = v6 + 2;
    unsigned int v13 = v6[2];
    if (v13)
    {
      unsigned int v15 = v6[4] + v6[3] + v6[5];
      unsigned int v16 = 100 * v15 / v13;
      long long v37 = 0u;
      long long v38 = 0u;
      unint64_t v39 = 0;
      BYTE4(v37) = 1;
      LODWORD(v37) = 16;
      unint64_t AppleChannelSpec = (unsigned __int16)AppleBCMWLANChanSpec::getAppleChannelSpec(*(int ***)(*((void *)a1 + 9) + 17576), *((unsigned __int16 *)v6 + 2));
      ChanSpecConvToApple80211Channel();
      *((void *)&v37 + 1) = v40;
      LODWORD(v38) = v41;
      IO80211BssManager::getCurrentBand();
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          unsigned int v32 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          unsigned int v33 = AppleBCMWLANChanSpec::convToAscii(AppleChannelSpec, v4, 0x20u);
          CCLogStream::logInfo(v32, "[dk] %s@%d:ChanSpec %s CCA %d%% duration: %d congest_me: %d congest_notme: %d interference: %d ts: %d\n", "handleCCAOnlyChanQualEvent", 24979, v33, (char)v16, v6[2], v6[3], v6[4], v6[5], v6[6]);
        }
      }
      if (*v14 < v15 || *v14 > 0x2710)
      {
        if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 70)) {
          goto LABEL_52;
        }
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            unsigned int v29 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logAlert(v29, "[dk] %s@%d:handleCCAOnlyChanQualEvent: Invalid cca_busy_dur %d ccaSum %d\n");
          }
        }
        goto LABEL_50;
      }
      IO80211Controller::setChanCCA();
      if (!IO80211BssManager::getCurrentChannel()
        && ChanSpecGetPrimaryChannel() == -1431655766
        && AppleChannelSpec >> 14 == 3)
      {
        AppleBCMWLANLQM::updateCCAStats(*(void *)(*((void *)a1 + 9) + 5608), v6 + 2, v6 + 12, v6 + 7);
        int v18 = *(unsigned __int16 *)(a2 + 50);
        if (v18 == 1024)
        {
          AppleBCMWLANLQM::updateOFDMDesense(*(void *)(*((void *)a1 + 9) + 5608), v6[17]);
          uint64_t v19 = *(void *)(*((void *)a1 + 9) + 11304);
          if (v19
            && ((*(uint64_t (**)(uint64_t, unint64_t, void, void))(*(void *)v19 + 744))(v19, v40, v41, (int)v6[17]) & 1) == 0)
          {
            if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)) {
              goto LABEL_50;
            }
            (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            if ((CCLogStream::shouldLog() & 1) == 0) {
              goto LABEL_50;
            }
            int v34 = 24999;
            goto LABEL_67;
          }
          int v18 = *(unsigned __int16 *)(a2 + 50);
        }
        if (v18 != 1280) {
          goto LABEL_52;
        }
        AppleBCMWLANLQM::updateOFDMDesense(*(void *)(*((void *)a1 + 9) + 5608), v6[17]);
        *(_DWORD *)(*((void *)a1 + 9) + 30992) = 0;
        uint64_t v20 = *((void *)a1 + 9);
        uint64_t v21 = *(void *)(v20 + 11304);
        if (!v21) {
          goto LABEL_39;
        }
        if ((*(unsigned int (**)(uint64_t, unint64_t, void, void))(*(void *)v21 + 744))(v21, v40, v41, (int)v6[17]))
        {
          uint64_t v20 = *((void *)a1 + 9);
LABEL_39:
          uint64_t v22 = (unsigned int *)(v20 + 30996);
          unsigned int v23 = v6[17];
          if (*v22 != v23 || v22[1] != v6[18] || v6[19])
          {
            unsigned int *v22 = v23;
            *(_DWORD *)(*((void *)a1 + 9) + 31000) = v6[18];
            *(_DWORD *)(*((void *)a1 + 9) + 31004) = v6[19];
            uint64_t v24 = *((void *)a1 + 9);
            long long v36 = *(_OWORD *)(v24 + 30992);
            unsigned int v25 = *(IO80211SkywalkInterface **)(v24 + 11304);
            if (v25) {
              IO80211Controller::postMessage(a1, v25, 0xB9u, &v36, 0x10uLL, 1);
            }
          }
          goto LABEL_52;
        }
        if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)
          || ((*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1),
              (CCLogStream::shouldLog() & 1) == 0))
        {
LABEL_50:
          unsigned int v27 = *(CCFaultReporter **)(*((void *)a1 + 9) + 5544);
          if (v27) {
            CCFaultReporter::reportFault(v27, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0x61CDu, "handleCCAOnlyChanQualEvent", 0, -469793488, 0);
          }
          goto LABEL_52;
        }
        int v34 = 25008;
LABEL_67:
        uint64_t v35 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logEmergency(v35, "[dk] %s@%d:fInfraSkywalkInterface->setInterfaceOFDMDesense failed\n", "handleCCAOnlyChanQualEvent", v34);
        goto LABEL_50;
      }
    }
    else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        unsigned int v28 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v28, "[dk] %s@%d:Zero CCA busy duration\n", "handleCCAOnlyChanQualEvent", 24960);
      }
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        unsigned int v30 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        uint64_t result = CCLogStream::logAlert(v30, "[dk] %s@%d:Allocation failure\n", "handleCCAOnlyChanQualEvent", 24925);
      }
    }
    if (!v6)
    {
      if (!v4) {
        return result;
      }
      return IOFreeData();
    }
  }
LABEL_52:
  uint64_t result = IOFreeData();
  if (v4) {
    return IOFreeData();
  }
  return result;
}

uint64_t AppleBCMWLANCore::isConcurrencyEnabled(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 70);
}

uint64_t AppleBCMWLANCore::completePeerCacheControl(IO80211Controller *a1, uint64_t a2, IO80211SkywalkInterface *a3)
{
  uint64_t v6 = IOMallocZeroData();
  if (!v6) {
    AppleBCMWLANCore::completePeerCacheControl();
  }
  int v7 = *(_DWORD *)(a2 + 4);
  if (v7 == 6)
  {
LABEL_5:
    if (*(_DWORD *)(*((void *)a1 + 9) + 1036) != 2) {
      goto LABEL_10;
    }
    int v8 = 1;
    goto LABEL_9;
  }
  if (v7 != 2)
  {
    if (v7) {
      goto LABEL_10;
    }
    goto LABEL_5;
  }
  if (*(_DWORD *)(*((void *)a1 + 9) + 1036) != 2) {
    goto LABEL_10;
  }
  int v8 = 3;
LABEL_9:
  int v9 = *(_DWORD *)(a2 + 8);
  *(_WORD *)(v6 + 12) = *(_WORD *)(a2 + 12);
  *(_DWORD *)(v6 + 4) = v8;
  *(_DWORD *)(v6 + 8) = v9;
  *(_WORD *)(v6 + 14) = *(_WORD *)(a2 + 14);
  IO80211Controller::postMessage(a1, a3, 0x33u, (void *)v6, 0x1D0uLL, 1);
LABEL_10:
  return IOFreeData();
}

__n128 AppleBCMWLANCore::handleGetWmeParams(void *a1, uint64_t a2, uint64_t a3, __n128 **a4)
{
  if (a3)
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v7 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        int v8 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 112))(a1, a3);
        CCLogStream::logAlert(v7, "[dk] %s@%d:Error: cannot get WME params: %s\n", "handleGetWmeParams", 25425, v8);
      }
    }
  }
  else if (*a4)
  {
    __n128 result = **a4;
    *(__n128 *)(a1[9] + 19609) = result;
  }
  return result;
}

uint64_t AppleBCMWLANCore::enableTxQueues(AppleBCMWLANCore *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v4, 0x10200uLL, "[dk] %s@%d: Enabling data queues\n", "enableTxQueues", 25474);
    }
  }
  atomic_fetch_or((atomic_uint *volatile)(*((void *)this + 9) + 10388), 0x10000u);
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 5400) + 352);
  return v2();
}

void *AppleBCMWLANCore::disableTxQueues(void *this)
{
  atomic_fetch_and((atomic_uint *volatile)(this[9] + 10388), 0xFFFEFFFF);
  if ((*(unsigned char *)(this[9] + 10388) & 0x80) == 0)
  {
    uint64_t v1 = (uint64_t)this;
    this = (void *)(*(uint64_t (**)(void *))(*this + 1848))(this);
    if (this)
    {
      (*(void (**)(uint64_t))(*(void *)v1 + 1848))(v1);
      this = (void *)CCLogStream::shouldLog();
      if (this)
      {
        uint64_t v2 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 1848))(v1);
        return (void *)CCLogStream::logNoticeIf(v2, 0x10200uLL, "[dk] %s@%d: Disabling data queues\n", "disableTxQueues", 25493);
      }
    }
  }
  return this;
}

uint64_t AppleBCMWLANCore::configureMonitorModeToFW(AppleBCMWLANCore *this, uint64_t a2)
{
  int v12 = a2;
  v11[0] = &v12;
  v11[1] = 4;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      int v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v7, "[dk] %s@%d:Configure Monitor Mode: enable=%d ivars->fMonitorEnabled=%d \n", "configureMonitorModeToFW", 25512, a2, *(unsigned __int8 *)(*((void *)this + 9) + 18153));
    }
  }
  uint64_t v10 = *(unsigned __int8 *)(*((void *)this + 9) + 18153);
  io80211_os_log();
  uint64_t v4 = AppleBCMWLANCommander::runIOCtlSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), 108, (uint64_t)v11, 0, 0);
  uint64_t v5 = *((void *)this + 9);
  if (v4)
  {
    CCFaultReporter::reportFault(*(CCFaultReporter **)(v5 + 5544), 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0x63AEu, "configureMonitorModeToFW", 0, -469793491, 0, a2, v10);
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int v9 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v4);
        CCLogStream::logAlert(v8, "[dk] %s@%d: Error: Unable to enable monitor mode (WLC_SET_MONITOR): %s\n", "configureMonitorModeToFW", 25521, v9);
      }
    }
  }
  else
  {
    *(unsigned char *)(v5 + 18153) = a2;
  }
  return v4;
}

uint64_t AppleBCMWLANCore::monitorModeSetEnabled(AppleBCMWLANCore *this, uint64_t a2, int a3)
{
  long long v23 = xmmword_100370550;
  long long v24 = unk_100370560;
  long long v25 = xmmword_100370570;
  long long v26 = unk_100370580;
  *(_OWORD *)uint64_t v19 = *(_OWORD *)"<unknown>";
  long long v20 = unk_100370520;
  long long v21 = xmmword_100370530;
  long long v22 = unk_100370540;
  int Pid = 0;
  if (IO80211ThreadProcessInfo::getProcessPid((IO80211ThreadProcessInfo *)&Pid, (int *)a2)
    || IO80211ThreadProcessInfo::getProcessName((IO80211ThreadProcessInfo *)v19, (char *)0x80, v6))
  {
    int Pid = IO80211Controller::getPid(this);
    IO80211Controller::getProcessName(this, v19, 0x80uLL);
  }
  if (a3 == 127)
  {
    if (IO80211BssManager::isAssociated(*(IO80211BssManager **)(*((void *)this + 9) + 5440)))
    {
      uint64_t v8 = 6;
    }
    else
    {
      if (a2) {
        (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 1112))(this, *((void *)this + 9) + 35312);
      }
      uint64_t v7 = AppleBCMWLANCore::configureMonitorModeToFW(this, a2);
      if (v7)
      {
        uint64_t v9 = v7;
        uint64_t v10 = *((void *)this + 9);
        if (!*(_DWORD *)(v10 + 19708) && (a2 & 1) == 0) {
          *(unsigned char *)(v10 + 18154) = 0;
        }
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            unsigned int v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            int v17 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v9);
            CCLogStream::logAlert(v16, "[dk] %s@%d: Error: Unable to enable monitor mode (WLC_SET_MONITOR): %s\n", "monitorModeSetEnabled", 25557, v17);
          }
        }
        (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v9);
        io80211_os_log();
        uint64_t v8 = 1;
      }
      else
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            unsigned int v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v15, "[dk] %s@%d:Configure Monitor Mode: successful: enabled=%d, (channel[%u] flags[0x%08x])\n", "monitorModeSetEnabled", 25561, a2, *(_DWORD *)(*((void *)this + 9) + 35320), *(_DWORD *)(*((void *)this + 9) + 35324));
          }
        }
        uint64_t v8 = 0;
        *(unsigned char *)(*((void *)this + 9) + 18154) = a2;
      }
    }
  }
  else
  {
    uint64_t v8 = 43;
  }
  uint64_t v11 = *(void *)(*((void *)this + 9) + 5400);
  if (v11)
  {
    int v12 = (const OSMetaClassBase *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 752))(v11);
    unsigned int v13 = OSMetaClassBase::safeMetaCast(v12, (const OSMetaClass *)gAppleBCMWLANBusSkywalkMetaClass);
    if (v13) {
      ((void (*)(OSMetaClassBase *, void))v13->__vftable[2].retain)(v13, *(unsigned __int8 *)(*((void *)this + 9) + 18154));
    }
  }
  return v8;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::monitorModeSetEnabled(AppleBCMWLANCore *this, uint64_t a2, int a3)
{
  return AppleBCMWLANCore::monitorModeSetEnabled((AppleBCMWLANCore *)((char *)this - 48), a2, a3);
}

uint64_t AppleBCMWLANCore::updateInterruptStats(uint64_t this, uint64_t a2, uint64_t a3)
{
  *(void *)(*(void *)(this + 72) + 4432) = a2;
  *(void *)(*(void *)(this + 72) + 4440) = a3;
  return this;
}

uint64_t AppleBCMWLANCore::setCLEAR_PMKSA_CACHE(AppleBCMWLANCore *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 11304) + 1008))(*(void *)(*((void *)this + 9) + 11304));
  *(_DWORD *)v4.octet = v2;
  *(_WORD *)&v4.octet[4] = WORD2(v2);
  return AppleBCMWLANCore::setCurEtheraddr(this, &v4);
}

uint64_t AppleBCMWLANCore::setCurEtheraddr(AppleBCMWLANCore *this, ether_addr *a2)
{
  if (IO80211BssManager::isAssociated(*(IO80211BssManager **)(*((void *)this + 9) + 5440)))
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t v4 = 3825172764;
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v5, "[dk] %s@%d: Cannot set MAC address. Already associated \n");
      }
    }
    else
    {
      return 3825172764;
    }
  }
  else if (AppleBCMWLANJoinAdapter::isJoining(*(AppleBCMWLANJoinAdapter **)(*((void *)this + 9) + 5424)))
  {
    uint64_t v4 = 3825172752;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v6, "[dk] %s@%d: Cannot set MAC address. Join manager busy \n");
      }
    }
  }
  else if (AppleBCMWLANGASAdapter::isBusy(*(AppleBCMWLANGASAdapter **)(*((void *)this + 9) + 5480)))
  {
    uint64_t v4 = 3825172752;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d: Cannot set MAC address. GAS query in progress \n");
      }
    }
  }
  else
  {
    uint64_t v9 = *(void *)this;
    if (!(*(_DWORD *)a2->octet | *(unsigned __int16 *)&a2->octet[4]) || (a2->octet[0] & 1) != 0)
    {
      uint64_t v4 = 3758097090;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(v9 + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v14, "[dk] %s@%d: Invalid MAC address %02X:%02X:%02X:%02X:%02X:%02X \n", "setCurEtheraddr");
        }
      }
    }
    else
    {
      uint64_t v10 = (*(uint64_t (**)(AppleBCMWLANCore *))(v9 + 88))(this);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 136))(v10))
      {
        uint64_t v11 = IOMallocZeroTyped();
        if (v11)
        {
          int v12 = (void *)v11;
          int v13 = *(_DWORD *)a2->octet;
          *(_WORD *)(v11 + 4) = *(_WORD *)&a2->octet[4];
          *(_DWORD *)uint64_t v11 = v13;
          long long v20 = this;
          uint64_t v21 = (uint64_t)AppleBCMWLANCore::setMacAddressAsyncCallback;
          uint64_t v22 = v11;
          uint64_t v4 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"cur_etheraddr");
          if (v4)
          {
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (CCLogStream::shouldLog())
              {
                int v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                uint64_t v19 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v4);
                CCLogStream::logAlert(v18, "[dk] %s@%d: cur_etheraddr send iovar failed, error %s\n", "setCurEtheraddr", 25682, v19);
              }
            }
            IOFree(v12, 6uLL);
          }
        }
        else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          uint64_t v4 = 1;
          if (CCLogStream::shouldLog())
          {
            int v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v17, "[dk] %s@%d:Error: cannot set Mac address. MemAlloc Failed \n");
          }
        }
        else
        {
          return 1;
        }
      }
      else
      {
        unsigned int v15 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
        long long v20 = (AppleBCMWLANCore *)a2;
        uint64_t v21 = 6;
        uint64_t v4 = AppleBCMWLANCommander::runIOVarSet(v15, (uint64_t)"cur_etheraddr", (uint64_t)&v20, 0, 0);
        if (v4)
        {
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              unsigned int v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v4);
              CCLogStream::logAlert(v16, "[dk] %s@%d: cur_etheraddr failed, error %s\n");
            }
          }
        }
        else
        {
          AppleBCMWLANCore::setMacAddressComplete(this, a2);
        }
      }
    }
  }
  return v4;
}

uint64_t AppleBCMWLANCore::_setAllMulticastModeEnable(AppleBCMWLANCore *this, int a2)
{
  uint64_t v3 = *((void *)this + 9);
  int v4 = *(_DWORD *)(v3 + 564);
  if (a2)
  {
    if (v4 && (uint64_t v5 = AppleBCMWLANCore::cleanFWMulticastList(this), v5))
    {
      uint64_t v6 = v5;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
          CCLogStream::logCrit(v11, "[dk] %s@%d: cleanFWMulticastList failed, error %s\n");
        }
      }
    }
    else
    {
      uint64_t v6 = AppleBCMWLANCore::setAllMulticast(this, 1);
      if (v6)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
            CCLogStream::logCrit(v7, "[dk] %s@%d: setAllMulticast(true) failed, error %s\n");
          }
        }
      }
    }
  }
  else if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 424))(this, v3 + 568);
    if (v6)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
          CCLogStream::logCrit(v8, "[dk] %s@%d: resetMulticastList failed, error %s\n");
        }
      }
    }
  }
  else
  {
    uint64_t v9 = AppleBCMWLANCore::setAllMulticast(this, 0);
    uint64_t v6 = 0;
    if (v9)
    {
      uint64_t v12 = v9;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          int v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          unsigned int v14 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v12);
          CCLogStream::logCrit(v13, "[dk] %s@%d: setAllMulticast(false) failed, error %s\n", "_setAllMulticastModeEnable", 25723, v14);
        }
      }
      return v12;
    }
  }
  return v6;
}

uint64_t AppleBCMWLANCore::cleanFWMulticastList(AppleBCMWLANCore *this)
{
  if ((*(unsigned char *)(*((void *)this + 9) + 10389) & 0x80) != 0) {
    return 3766630404;
  }
  if (AppleBCMWLANCore::isRejectingCommands(this)) {
    return 0;
  }
  int v11 = 0;
  uint64_t v3 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  v9[0] = &v10;
  v9[1] = 12;
  uint64_t v10 = 0;
  uint64_t v4 = AppleBCMWLANCommander::runIOVarSet(v3, (uint64_t)"mcast_list", (uint64_t)v9, 0, 0);
  uint64_t v2 = v4;
  if (v4 != -536870173 && v4 != 0)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v2);
        CCLogStream::logCrit(v7, "[dk] %s@%d: ivars->mcast_list failed, error %s\n", "cleanFWMulticastList", 25761, v8);
      }
    }
  }
  return v2;
}

uint64_t AppleBCMWLANCore::setAllMulticast(AppleBCMWLANCore *this, int a2)
{
  if ((*(unsigned char *)(*((void *)this + 9) + 10389) & 0x80) != 0) {
    return 3766630404;
  }
  if (AppleBCMWLANCore::isRejectingCommands(this)) {
    return 0;
  }
  int v12 = a2;
  uint64_t v5 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  v11[0] = &v12;
  v11[1] = 4;
  uint64_t v6 = AppleBCMWLANCommander::runIOVarSet(v5, (uint64_t)"allmulti", (uint64_t)v11, 0, 0);
  uint64_t v4 = v6;
  if (v6 != -536870173 && v6 != 0)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v10 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v4);
        CCLogStream::logCrit(v9, "[dk] %s@%d: %s() failed, error %s\n", "setAllMulticast", 25934, "allmulti", v10);
      }
    }
  }
  return v4;
}

uint64_t AppleBCMWLANCore::setPromiscuousMode(AppleBCMWLANCore *this, char a2)
{
  *(unsigned char *)(*((void *)this + 9) + 18152) = a2;
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setPromiscuousMode(AppleBCMWLANCore *this, char a2)
{
  *(unsigned char *)(*((void *)this + 3) + 18152) = a2;
  return 0;
}

uint64_t AppleBCMWLANCore::setMulticastMode(AppleBCMWLANCore *this, char a2)
{
  if ((*(unsigned char *)(*((void *)this + 9) + 10389) & 0x80) != 0) {
    return 3766630404;
  }
  uint64_t v4 = 0;
  if (!AppleBCMWLANCore::isRejectingCommands(this) && (a2 & 1) == 0)
  {
    uint64_t v4 = AppleBCMWLANCore::setAllMulticast(this, 0);
    if (!v4)
    {
      int v13 = 0;
      uint64_t v5 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
      v11[0] = &v12;
      v11[1] = 12;
      uint64_t v12 = 0;
      uint64_t v6 = AppleBCMWLANCommander::runIOVarSet(v5, (uint64_t)"mcast_list", (uint64_t)v11, 0, 0);
      uint64_t v4 = v6;
      if (v6 != -536870173 && v6 != 0)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            uint64_t v9 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v4);
            CCLogStream::logCrit(v8, "[dk] %s@%d: ivars->mcast_list failed, error %s\n", "setMulticastMode", 25793, v9);
          }
        }
      }
    }
  }
  return v4;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setMulticastMode(AppleBCMWLANCore *this, char a2)
{
  return AppleBCMWLANCore::setMulticastMode((AppleBCMWLANCore *)((char *)this - 48), a2);
}

uint64_t AppleBCMWLANCore::setMulticastList(AppleBCMWLANCore *this, const ether_addr *a2, unsigned int a3)
{
  if ((*(unsigned char *)(*((void *)this + 9) + 10389) & 0x80) != 0) {
    return 3766630404;
  }
  if (AppleBCMWLANCore::isRejectingCommands(this)) {
    return 0;
  }
  if (a3 > 0x20) {
    return 3758097084;
  }
  uint64_t v8 = *(void *)(*((void *)this + 9) + 11312);
  if (v8)
  {
    if (a3)
    {
      int v9 = *(_DWORD *)a2->octet ^ awdl_bonjour_addr | *(unsigned __int16 *)&a2->octet[4] ^ (unsigned __int16)word_1003A414C;
      BOOL v10 = v9 == 0;
      LODWORD(v8) = v9 != 0;
      char v11 = v10;
      unsigned int v12 = a3;
      while (v8)
      {
        if (!--v12) {
          goto LABEL_18;
        }
      }
    }
    else
    {
      char v11 = 0;
LABEL_18:
      LODWORD(v8) = 1;
    }
  }
  else
  {
    char v11 = 1;
  }
  int v13 = v8 + a3;
  if (v8 + a3 < 0x20)
  {
    uint64_t v6 = AppleBCMWLANCore::setAllMulticast(this, 0);
    if (!v6)
    {
      *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&v34[10] = v14;
      v33[10] = v14;
      *(_OWORD *)int v34 = v14;
      v33[8] = v14;
      v33[9] = v14;
      v33[6] = v14;
      v33[7] = v14;
      v33[4] = v14;
      v33[5] = v14;
      v33[2] = v14;
      v33[3] = v14;
      v33[0] = v14;
      v33[1] = v14;
      if (a3)
      {
        uint64_t v15 = 0;
        unsigned int v16 = a3;
        do
        {
          uint64_t v17 = *((void *)this + 9) + v15 * 6;
          int v18 = *(_DWORD *)a2[v15].octet;
          *(_WORD *)(v17 + 572) = *(_WORD *)&a2[v15].octet[4];
          *(_DWORD *)(v17 + 568) = v18;
          ++v15;
        }
        while (a3 != v15);
        *(_DWORD *)(*((void *)this + 9) + 564) = a3;
        LODWORD(v33[0]) = v13;
        memcpy((char *)v33 + 4, a2, 6 * a3);
      }
      else
      {
        unsigned int v16 = 0;
        *(_DWORD *)(*((void *)this + 9) + 564) = 0;
        LODWORD(v33[0]) = v13;
      }
      if ((v11 & 1) == 0)
      {
        uint64_t v19 = (char *)v33 + 6 * v16;
        *((_DWORD *)v19 + 1) = awdl_bonjour_addr;
        *((_WORD *)v19 + 4) = word_1003A414C;
      }
      long long v20 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
      if (((6 * (_WORD)v13 + 4) & 0xFFFE) != 0) {
        uint64_t v21 = v33;
      }
      else {
        uint64_t v21 = 0;
      }
      BOOL v31 = v21;
      uint64_t v32 = (unsigned __int16)(6 * v13 + 4) & 0xFFFE;
      uint64_t v6 = AppleBCMWLANCommander::runIOVarSet(v20, (uint64_t)"mcast_list", (uint64_t)&v31, 0, 0);
      if (v6)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            unsigned int v29 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            unsigned int v30 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
            CCLogStream::logCrit(v29, "[dk] %s@%d:ivars->mcast_list() failed, error %s\n", "setMulticastList", 25896, v30);
          }
        }
      }
      uint64_t v22 = *(IO80211SkywalkInterface **)(*((void *)this + 9) + 11312);
      if (v22)
      {
        if (IO80211SkywalkInterface::getInterfaceId(v22) != -1)
        {
          uint64_t v23 = *((void *)this + 9);
          long long v24 = *(AppleBCMWLANCommander **)(v23 + 5416);
          unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(v23 + 11312));
          BOOL v31 = v21;
          uint64_t v32 = (unsigned __int16)(6 * v13 + 4) & 0xFFFE;
          uint64_t v6 = AppleBCMWLANCommander::runVirtualIOVarSet(v24, InterfaceId, "mcast_list", (uint64_t)&v31, 0, 0);
          if (v6)
          {
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (CCLogStream::shouldLog())
              {
                long long v26 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                uint64_t v27 = IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(*((void *)this + 9) + 11312));
                unsigned int v28 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
                CCLogStream::logCrit(v26, "[dk] %s@%d:ivars->mcast_list() failed on virt interface %lu, error %s\n", "setMulticastList", 25904, v27, v28);
              }
            }
          }
        }
      }
    }
    return v6;
  }
  return AppleBCMWLANCore::setAllMulticast(this, 1);
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setMulticastList(AppleBCMWLANCore *this, const ether_addr *a2, unsigned int a3)
{
  return AppleBCMWLANCore::setMulticastList((AppleBCMWLANCore *)((char *)this - 48), a2, a3);
}

uint64_t AppleBCMWLANCore::isCommandProhibited(AppleBCMWLANCore *this, int a2)
{
  uint64_t v2 = *((void *)this + 9);
  if (*(unsigned char *)(v2 + 18268)) {
    return 58;
  }
  uint64_t v3 = *(unsigned __int8 *)(v2 + 18269);
  if (*(unsigned char *)(v2 + 18269)) {
    return 58;
  }
  if (a2 > 347)
  {
    if ((a2 - 425) <= 0x3D && ((1 << (a2 + 87)) & 0x299A300021202631) != 0
      || (a2 - 489) <= 0x2D && ((1 << (a2 + 23)) & 0x200000201825) != 0)
    {
      return v3;
    }
    if ((a2 - 348) > 0x36) {
      goto LABEL_28;
    }
    uint64_t v5 = 1 << (a2 - 92);
    unint64_t v6 = 0x48000800200801;
    goto LABEL_16;
  }
  if (a2 > 93)
  {
    if (a2 > 190)
    {
      if ((a2 - 191) <= 0x3F && ((1 << (a2 + 65)) & 0x8003000001000003) != 0
        || a2 == 265
        || a2 == 293)
      {
        return v3;
      }
      goto LABEL_28;
    }
    if ((a2 - 94) > 0x3F) {
      goto LABEL_28;
    }
    uint64_t v5 = 1 << (a2 - 94);
    unint64_t v6 = 0xC00000000020120FLL;
LABEL_16:
    if ((v5 & v6) != 0) {
      return v3;
    }
    goto LABEL_28;
  }
  if (a2 <= 0x2C)
  {
    if (((1 << a2) & 0x180010800206) != 0) {
      return v3;
    }
    if (a2 != 12)
    {
      if (a2 != 19) {
        goto LABEL_28;
      }
      if ((*(unsigned char *)(v2 + 10389) & 0x20) != 0) {
        return 3766622209;
      }
    }
    return *(void *)(v2 + 5472) == 0;
  }
LABEL_28:
  if ((*(unsigned char *)(v2 + 10388) & 1) != 0 && *(_DWORD *)(v2 + 19708) == 4) {
    return AppleBCMWLANCore::isCommandAllowedInRestrictedMode(this, a2);
  }
  else {
    return AppleBCMWLANCore::isRejectingCommands(this);
  }
}

uint64_t AppleBCMWLANCore::isCommandAllowedInRestrictedMode(AppleBCMWLANCore *this, int a2)
{
  if (a2 > 206)
  {
    if (((a2 - 207) > 0x3E || ((1 << (a2 + 49)) & 0x41800000000000D3) == 0)
      && ((a2 - 323) > 0x21 || ((1 << (a2 - 67)) & 0x200240001) == 0)
      && ((a2 - 418) > 0x1F || ((1 << (a2 + 94)) & 0x80004001) == 0))
    {
      return AppleBCMWLANCore::isRejectingCommands(this);
    }
    return 0;
  }
  if ((a2 - 116) <= 0x2A && ((1 << (a2 - 116)) & 0x4CA081D6667) != 0
    || a2 == 51
    || a2 == 205)
  {
    return 0;
  }
  return AppleBCMWLANCore::isRejectingCommands(this);
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::isCommandProhibited(AppleBCMWLANCore *this, int a2)
{
  return AppleBCMWLANCore::isCommandProhibited((AppleBCMWLANCore *)((char *)this - 48), a2);
}

BOOL AppleBCMWLANCore::isPoweredOn(AppleBCMWLANCore *this)
{
  uint64_t v1 = *((void *)this + 9);
  return (*(unsigned char *)(v1 + 10388) & 1) != 0 && *(_DWORD *)(v1 + 19708) == 1;
}

BOOL AppleBCMWLANCore::isPoweringOff(AppleBCMWLANCore *this)
{
  uint64_t v1 = *((void *)this + 9);
  int v2 = *(_DWORD *)(v1 + 10388);
  if ((v2 & 0x10000000) == 0) {
    return 0;
  }
  if (v2) {
    return *(_DWORD *)(v1 + 19708) == 0;
  }
  return 1;
}

uint64_t ratespec2rate(uint64_t a1, unsigned int a2)
{
  int v2 = a2 & 0x70000;
  switch(HIBYTE(a2) & 7)
  {
    case 0:
      return a2 >> 1;
    case 1:
      if (a2 > 0x4Cu) {
        return 0;
      }
      if (v2 == 0x10000)
      {
        uint64_t v4 = MCS_RATE_TABLE_20MHZ;
      }
      else
      {
        if (v2 != 0x20000) {
          return 0;
        }
        uint64_t v4 = (const __int16 *)&MCS_RATE_TABLE_40MHZ;
      }
      uint64_t v7 = (__int16 *)&v4[2 * a2];
      goto LABEL_26;
    case 2:
      int v5 = a2 >> 4;
      if ((v5 - 4) < 0xFFFFFFFD) {
        return 0;
      }
      switch(v2)
      {
        case 65536:
          unint64_t v6 = &VHT_MCS_RATE_TABLE_20MHZ;
          break;
        case 196608:
          unint64_t v6 = (__int16 **)&VHT_MCS_RATE_TABLE_80MHZ;
          break;
        case 131072:
          unint64_t v6 = (__int16 **)&VHT_MCS_RATE_TABLE_40MHZ;
          break;
        default:
          return 0;
      }
      goto LABEL_23;
    case 3:
      int v5 = a2 >> 4;
      if ((v5 - 4) < 0xFFFFFFFD) {
        return 0;
      }
      switch(v2)
      {
        case 65536:
          unint64_t v6 = (__int16 **)&AppleBCMWLANUtil80211RateTables::HE_MCS_RATE_TABLE_20MHZ;
          break;
        case 196608:
          unint64_t v6 = &AppleBCMWLANUtil80211RateTables::HE_MCS_RATE_TABLE_80MHZ;
          break;
        case 131072:
          unint64_t v6 = (__int16 **)&AppleBCMWLANUtil80211RateTables::HE_MCS_RATE_TABLE_40MHZ;
          break;
        default:
          return 0;
      }
LABEL_23:
      if ((a2 & 0xF) > 0xB) {
        return 0;
      }
      uint64_t v7 = &v6[v5 - 1][2 * (a2 & 0xF)];
LABEL_26:
      if ((a2 & 0x800000) != 0) {
        ++v7;
      }
      return *v7;
    default:
      return 0;
  }
}

uint64_t AppleBCMWLANCore::createNANMgmtDataInterface(IOService *this, uint64_t a2)
{
  uint64_t v3 = this[1].OSObject::OSObjectInterface::__vftable;
  if (v3[1862].free)
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        char v11 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v11, "[dk] %s@%d: NAN mgmt+data interface already created\n", "createNANMgmtDataInterface", 26289);
      }
    }
    return 0;
  }
  LODWORD(v3[2215].init) = 9;
  p_free = &this[1].OSObject::OSObjectInterface::__vftable[2214].free;
  int v6 = *(_DWORD *)(a2 + 4);
  *((_WORD *)p_free + 14) = *(_WORD *)(a2 + 8);
  *((_DWORD *)p_free + 6) = v6;
  LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[2214].free) = 1;
  uint64_t v4 = IOService::Create(this, this, "DriverKit_IO80211NAN", (IOService **)&this[1].OSObject::OSObjectInterface::__vftable[1862].free, 0);
  if (v4) {
    return v4;
  }
  free = this[1].OSObject::OSObjectInterface::__vftable[1862].free;
  int v9 = this->OSObject::OSMetaClassBase::__vftable;
  if (free)
  {
    ((void (*)(IOService *, void (__cdecl *)(OSObjectInterface *__hidden), IOService *))v9[6].Dispatch)(this, free, this);
    return 0;
  }
  uint64_t v4 = 3758097084;
  if (((uint64_t (*)(IOService *))v9[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      BOOL v10 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logAlert(v10, "[dk] %s@%d: Unable to create NAN mgmt+data interface \n", "createNANMgmtDataInterface", 26306);
    }
  }
  return v4;
}

uint64_t AppleBCMWLANCore::createNANDataInterface(IOService *this, uint64_t a2)
{
  uint64_t v3 = this[1].OSObject::OSObjectInterface::__vftable;
  if (v3[1863].init)
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        char v11 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v11, "[dk] %s@%d: NAN Data Interface already created\n", "createNANDataInterface", 26368);
      }
    }
    return 0;
  }
  LODWORD(v3[2215].init) = 10;
  p_free = &this[1].OSObject::OSObjectInterface::__vftable[2214].free;
  int v6 = *(_DWORD *)(a2 + 4);
  *((_WORD *)p_free + 14) = *(_WORD *)(a2 + 8);
  *((_DWORD *)p_free + 6) = v6;
  LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[2214].free) = 1;
  uint64_t v4 = IOService::Create(this, this, "DriverKit_IO80211NANIR", (IOService **)&this[1].OSObject::OSObjectInterface::__vftable[1863], 0);
  if (v4) {
    return v4;
  }
  init = this[1].OSObject::OSObjectInterface::__vftable[1863].init;
  int v9 = this->OSObject::OSMetaClassBase::__vftable;
  if (init)
  {
    ((void (*)(IOService *, BOOL (__cdecl *)(OSObjectInterface *__hidden), IOService *))v9[6].Dispatch)(this, init, this);
    return 0;
  }
  uint64_t v4 = 3758097084;
  if (((uint64_t (*)(IOService *))v9[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      BOOL v10 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logAlert(v10, "[dk] %s@%d: Unable to create NAN data interface \n", "createNANDataInterface", 26385);
    }
  }
  return v4;
}

IO80211SkywalkInterface *AppleBCMWLANCore::getProximityInterfaceId(AppleBCMWLANCore *this)
{
  __n128 result = *(IO80211SkywalkInterface **)(*((void *)this + 9) + 11312);
  if (result) {
    return (IO80211SkywalkInterface *)IO80211SkywalkInterface::getInterfaceId(result);
  }
  return result;
}

uint64_t AppleBCMWLANCore::createProxInterface(IOService *a1, uint64_t a2)
{
  uint64_t v15 = 0x100000000;
  IOParseBootArgNumber("wlan.awdl.create_by_driver", &v15, 4);
  IOParseBootArgNumber("wlan.dk.awdl", (char *)&v15 + 4, 4);
  if (v15)
  {
    uint64_t v4 = a1[1].OSObject::OSObjectInterface::__vftable;
    if (v4[707].init)
    {
      if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
      {
        ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        if (CCLogStream::shouldLog())
        {
          long long v14 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
          CCLogStream::logAlert(v14, "[dk] %s@%d: already created\n", "createProxInterface", 26472);
        }
      }
      return 0;
    }
    LODWORD(v4[2215].init) = 6;
    uint64_t p_free = (uint64_t)&a1[1].OSObject::OSObjectInterface::__vftable[2214].free;
    int v9 = *(_DWORD *)(a2 + 4);
    *(_WORD *)(p_free + 28) = *(_WORD *)(a2 + 8);
    *(_DWORD *)(p_free + 24) = v9;
    LOBYTE(a1[1].OSObject::OSObjectInterface::__vftable[2214].free) = 1;
    uint64_t v5 = IOService::Create(a1, a1, "DriverKit_IO80211AWDL", (IOService **)&a1[1].OSObject::OSObjectInterface::__vftable[707], 0);
    if (v5) {
      return v5;
    }
    init = a1[1].OSObject::OSObjectInterface::__vftable[707].init;
    unsigned int v12 = a1->OSObject::OSMetaClassBase::__vftable;
    if (init)
    {
      ((void (*)(IOService *, BOOL (__cdecl *)(OSObjectInterface *__hidden), IOService *))v12[6].Dispatch)(a1, init, a1);
      return 0;
    }
    uint64_t v5 = 3758097084;
    if (((uint64_t (*)(IOService *))v12[33].getMetaClass)(a1))
    {
      ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
      if (CCLogStream::shouldLog())
      {
        int v13 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        CCLogStream::logAlert(v13, "[dk] %s@%d: Unable to create awdl interface \n", "createProxInterface", 26489);
      }
    }
  }
  else
  {
    uint64_t v5 = 3758097095;
    if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
    {
      ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
      if (CCLogStream::shouldLog())
      {
        int v6 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        ClassNameHelper = (const char *)getClassNameHelper(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d:%s::%s() skipping createProxInterface\n", "createProxInterface", 26467, ClassNameHelper, "createProxInterface");
        return 3758097095;
      }
    }
  }
  return v5;
}

uint64_t AppleBCMWLANCore::commandSleepForThreadSafe(void *a1, unsigned int a2)
{
  unsigned int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(a1[9] + 4 * a2 + 6516), 1u, memory_order_relaxed);
  clock_interval_to_deadline();
  if (!add_explicit) {
    return 0;
  }
  uint64_t v5 = a2;
  uint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 104))(a1);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v6 + 80))(v6, a1[9] + 4 * a2 + 6508, 0xAAAAAAAAAAAAAAAALL);
  if (v7)
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v9 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v9, "[dk] %s@%d:Sleep failed 0x%08x", "commandSleepForThreadSafe", 26539, v7);
      }
    }
    atomic_fetch_add_explicit((atomic_uint *volatile)(a1[9] + 4 * v5 + 6516), 0xFFFFFFFF, memory_order_relaxed);
  }
  return v7;
}

void *AppleBCMWLANCore::commandWakeupForThreadSafe(void *result, unsigned int a2)
{
  if (atomic_fetch_add_explicit((atomic_uint *volatile)(result[9] + 4 * a2 + 6516), 0xFFFFFFFF, memory_order_relaxed) >= 2)
  {
    uint64_t v3 = result;
    if ((*(uint64_t (**)(void *))(*result + 1848))(result))
    {
      (*(void (**)(void *))(*v3 + 1848))(v3);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
        uint64_t v6 = (void *)current_thread();
        uint64_t v7 = thread_tid(v6);
        CCLogStream::logNoticeIf(v5, 0x200000uLL, "[dk] %s@%d: Signalling wakeup (%d) event from tid: %llx\n", "commandWakeupForThreadSafe", 26561, a2, v7);
      }
    }
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(void *))(*v3 + 104))(v3) + 88);
    return (void *)v4();
  }
  return result;
}

uint64_t AppleBCMWLANCore::getDiagsAmpduStats(AppleBCMWLANCore *this)
{
  memset(v20, 170, sizeof(v20));
  uint64_t v2 = IOMallocZeroData();
  uint64_t v3 = (char *)IOMallocZeroData();
  uint64_t v4 = v3;
  if (v2)
  {
    if (!v3)
    {
      uint64_t ECounterOnDemand = 3758097084;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logEmergency(v8, "[dk] %s@%d:ampduReq.isAllocationFailure()\n", "getDiagsAmpduStats", 26578);
        }
      }
      goto LABEL_43;
    }
    strcpy(v3, "ampdu");
    v20[2] = v3;
    v20[3] = 100;
    v20[0] = v2;
    v20[1] = 0x6400000064;
    uint64_t v5 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"dump", (uint64_t)&v20[2], (uint64_t)v20, 0);
    if (v5 == -469794535 || v5 == 0)
    {
      uint64_t v9 = *((void *)this + 9);
      if ((*(unsigned char *)(v9 + 10388) & 1) == 0)
      {
        uint64_t ECounterOnDemand = v5;
        if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
          goto LABEL_42;
        }
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (!CCLogStream::shouldLog()) {
          goto LABEL_42;
        }
        goto LABEL_53;
      }
    }
    else
    {
      uint64_t v9 = *((void *)this + 9);
    }
    if (*(_DWORD *)(v9 + 780) < 6u
      || (strcpy(v4, "ampdu_rx"),
          v20[2] = v4,
          v20[3] = 100,
          v20[0] = v2,
          v20[1] = 0x6400000064,
          uint64_t v10 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"dump", (uint64_t)&v20[2], (uint64_t)v20, 0), ECounterOnDemand = v10, v10 != -469794537)&& v10&& v10 != -469794535|| (*(unsigned char *)(*((void *)this + 9) + 10388) & 1) != 0)
    {
      uint64_t v11 = AppleBCMWLANCore::dumpEventLogReportedStats(this, 6);
      uint64_t ECounterOnDemand = v11;
      if v11 && v11 != -469794535 || (*(unsigned char *)(*((void *)this + 9) + 10388))
      {
        uint64_t v12 = AppleBCMWLANCore::dumpEventLogReportedStats(this, 7);
        uint64_t ECounterOnDemand = v12;
        if v12 && v12 != -469794535 || (*(unsigned char *)(*((void *)this + 9) + 10388))
        {
          uint64_t ECounterOnDemand = AppleBCMWLANCore::getECounterOnDemand(this, 69);
          if (ECounterOnDemand || (*(unsigned char *)(*((void *)this + 9) + 10388) & 1) == 0)
          {
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (CCLogStream::shouldLog())
              {
                int v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, ECounterOnDemand);
                CCLogStream::logEmergency(v13, "[dk] %s@%d:Failed to getECounterOnDemand(EVENT_LOG_TAG_AMPDU_DUMP) - %s\n");
              }
            }
          }
          else
          {
            uint64_t ECounterOnDemand = AppleBCMWLANCore::getECounterOnDemand(this, 95);
            if (ECounterOnDemand || (*(unsigned char *)(*((void *)this + 9) + 10388) & 1) == 0)
            {
              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
              {
                (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                if (CCLogStream::shouldLog())
                {
                  long long v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                  (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, ECounterOnDemand);
                  CCLogStream::logEmergency(v14, "[dk] %s@%d:Failed to getECounterOnDemand(EVENT_LOG_TAG_BTCX_STATS) - %s\n");
                }
              }
            }
            else
            {
              uint64_t ECounterOnDemand = 0;
            }
          }
        }
        else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, ECounterOnDemand);
            CCLogStream::logEmergency(v17, "[dk] %s@%d:Failed to dumpEventLogReportedStats (7) - %s\n");
          }
        }
      }
      else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, ECounterOnDemand);
          CCLogStream::logEmergency(v16, "[dk] %s@%d:Failed to dumpEventLogReportedStats (6) - %s\n");
        }
      }
      goto LABEL_42;
    }
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
      || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
          !CCLogStream::shouldLog()))
    {
LABEL_42:
      IOFreeData();
LABEL_43:
      IOFreeData();
      return ECounterOnDemand;
    }
LABEL_53:
    uint64_t v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, ECounterOnDemand);
    CCLogStream::logEmergency(v19, "[dk] %s@%d:Failed to dump ampdu - %s\n");
    goto LABEL_42;
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      int v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logEmergency(v18, "[dk] %s@%d:ampduResp.isAllocationFailure()\n", "getDiagsAmpduStats", 26577);
    }
  }
  uint64_t ECounterOnDemand = 3758097084;
  if (v4) {
    goto LABEL_43;
  }
  return ECounterOnDemand;
}

uint64_t AppleBCMWLANCore::getECounterOnDemand(AppleBCMWLANCore *this, __int16 a2)
{
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 53)) {
    return 0;
  }
  uint64_t v5 = IOMallocZeroData();
  if (!v5) {
    return 12;
  }
  uint64_t v6 = v5;
  if (*(_DWORD *)(*((void *)this + 9) + 976) == 2)
  {
    *(_DWORD *)uint64_t v5 = 327681;
    if (*(_DWORD *)(*((void *)this + 9) + 780) <= 4u) {
      __int16 v7 = 1400;
    }
    else {
      __int16 v7 = 1648;
    }
    *(_WORD *)(v5 + 4) = v7;
    *(_DWORD *)(v5 + 6) = 0x10000;
    *(_WORD *)(v5 + 10) = 1;
    *(_WORD *)(v5 + 12) = a2;
    uint64_t v8 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    v14[0] = v6;
    v14[1] = 14;
    uint64_t v9 = AppleBCMWLANCommander::runIOVarSet(v8, (uint64_t)"ecounters", (uint64_t)v14, 0, 0);
    uint64_t v4 = v9;
    if (v9 != -469794537 && v9 != 0)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          int v13 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v4);
          CCLogStream::logAlert(v12, "[dk] %s@%d: Error: Unable to set ecounters: %s\n", "getECounterOnDemand", 53317, v13);
        }
      }
    }
  }
  else
  {
    uint64_t v4 = 3758097084;
  }
  IOFreeData();
  return v4;
}

uint64_t AppleBCMWLANCore::getDiags(AppleBCMWLANCore *a1, uint64_t a2, int *a3)
{
  if (AppleBCMWLANCore::isRejectingCommands(a1))
  {
    uint64_t v5 = 3758097112;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logEmergency(v6, "[dk] %s@%d:Unable to getDiags, rejecting commands\n", "getDiags", 26624);
        return 3758097112;
      }
    }
    return v5;
  }
  if (*(unsigned char *)(*((void *)a1 + 9) + 986))
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      uint64_t v5 = 0;
      if (!CCLogStream::shouldLog()) {
        return v5;
      }
      __int16 v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      CCLogStream::logEmergency(v7, "[dk] %s@%d:Unable to getDiags, due to boot-arg wlan.getDiags=0,, returning kIOReturnSuccess\n", "getDiags", 26629);
    }
    return 0;
  }
  uint64_t v8 = IOMallocZeroData();
  uint64_t v9 = (__n128 *)IOMallocZeroData();
  uint64_t v10 = IOMallocZeroData();
  uint64_t v11 = v10;
  if (!v8)
  {
    uint64_t v5 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        long long v24 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logEmergency(v24, "[dk] %s@%d:buf.isAllocationFailure()\n");
      }
    }
LABEL_53:
    kdebug_trace();
    kdebug_trace();
    if (!v11) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (!v9)
  {
    uint64_t v5 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        long long v25 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logEmergency(v25, "[dk] %s@%d:_buffer.isAllocationFailure()\n");
      }
    }
    goto LABEL_53;
  }
  if (!v10)
  {
    uint64_t v5 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        long long v26 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logEmergency(v26, "[dk] %s@%d:memuseString.isAllocationFailure()\n");
      }
    }
    goto LABEL_53;
  }
  kdebug_trace();
  uint64_t v12 = AppleBCMWLANCore::commandSleepForThreadSafe(a1, 0);
  if (v12)
  {
    uint64_t v5 = v12;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        BOOL v31 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        uint64_t v32 = (void *)current_thread();
        thread_tid(v32);
        CCLogStream::logEmergency(v31, "[dk] %s@%d:commandSleepForThreadSafe for getDiags failed, dropping request for tid %llx\n");
      }
    }
    goto LABEL_53;
  }
  kdebug_trace();
  if (!AppleBCMWLANCore::getCHIP_COUNTER_STATS(a1, v8)) {
    IO80211Controller::setChipCounterStats();
  }
  if (AppleBCMWLANCore::getPowerStats(a1, v9, a3))
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        unsigned int v28 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logInfo(v28, "[dk] %s@%d: Failed to get AssociatedSleep/UnAssociatedSleep Duration Values \n", "getDiags", 26670);
      }
    }
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 76))
  {
    if (!*(unsigned char *)(*((void *)a1 + 9) + 18340))
    {
      memset(__b, 170, sizeof(__b));
      *a3 = 32;
      int PowerStats = AppleBCMWLANCore::getPowerStats(a1, __b, a3);
      uint64_t v17 = *((void *)a1 + 9);
      int v18 = __b[0];
      int v19 = __b[7];
      int v20 = HIDWORD(__b[50]);
      int v21 = __b[60];
      *(_OWORD *)(v17 + 11992) = *(_OWORD *)((char *)&__b[9] + 4);
      *(_OWORD *)(v17 + 12008) = *(_OWORD *)((char *)&__b[11] + 4);
      *(_OWORD *)(v17 + 12024) = *(_OWORD *)((char *)&__b[13] + 4);
      uint64_t v22 = __b[59];
      *(void *)(v17 + 12040) = __b[42];
      *(_DWORD *)(v17 + 11984) = v18;
      *(_DWORD *)(v17 + 11988) = v19;
      *(void *)(v17 + 12052) = v22;
      *(_DWORD *)(v17 + 12060) = v21;
      *(_DWORD *)(v17 + 12048) = v20;
      if (PowerStats)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v23 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logInfo(v23, "[dk] %s@%d:Failed to get power stats during sleep for LPSC \n", "getDiags", 26679);
          }
        }
      }
    }
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 53))
  {
    uint64_t ChipIfCounters = AppleBCMWLANCore::getChipIfCounters((OSDictionary *)a1);
    if (ChipIfCounters)
    {
      uint64_t v14 = ChipIfCounters;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          unsigned int v29 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          unsigned int v30 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)a1 + 112))(a1, v14);
          CCLogStream::logInfo(v29, "[dk] %s@%d:Failed to getChipIfCounters - %s\n", "getDiags", 26685, v30);
        }
      }
    }
  }
  if (AppleBCMWLANCore::is4387C2Up((OSDictionary *)a1)) {
    AppleBCMWLANLQM::updateInfraMuticastBroadcastDuration(*(void *)(*((void *)a1 + 9) + 5608), v9);
  }
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 0x40000000;
  v33[2] = ___ZN16AppleBCMWLANCore8getDiagsEP13apple80211reqP22apple80211_stat_report_block_invoke;
  v33[3] = &__block_descriptor_tmp_1653;
  v33[4] = a1;
  uint64_t v5 = AppleBCMWLANCore::setEcountersEnableStateSync(a1, (uint64_t)v33, 1);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v27 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logEmergency(v27, "[dk] %s@%d:getDiagsAmpduStats failed %x\n", "getDiags", 26695, v5);
      }
    }
  }
  kdebug_trace();
  AppleBCMWLANCore::commandWakeupForThreadSafe(a1, 0);
  kdebug_trace();
LABEL_31:
  IOFreeData();
LABEL_32:
  if (v9) {
    IOFreeData();
  }
  if (v8) {
    IOFreeData();
  }
  return v5;
}

uint64_t AppleBCMWLANCore::getCHIP_COUNTER_STATS(AppleBCMWLANCore *a1, uint64_t a2)
{
  if (*(_DWORD *)(*((void *)a1 + 9) + 780) > 5u) {
    return 3758097126;
  }
  uint64_t v5 = IOMallocZeroData();
  if (!v5) {
    return 12;
  }
  uint64_t v6 = (const void *)v5;
  uint64_t v10 = v5;
  size_t numBytes = 0x51405140514;
  uint64_t v2 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*((void *)a1 + 9) + 5416), (uint64_t)"counters", (uint64_t)&kNoTxPayload, (uint64_t)&v10, 0);
  if (!v2)
  {
    __int16 v7 = OSData::withBytes(v6, (unsigned __int16)numBytes);
    *(void *)(a2 + 2232) = *(void *)(*((void *)a1 + 9) + 29872);
    *(void *)(a2 + 2240) = *(void *)(*((void *)a1 + 9) + 29880);
    *(void *)(a2 + 2248) = *(void *)(*((void *)a1 + 9) + 29888);
    *(_DWORD *)(a2 + 2224) = 1;
    uint64_t v2 = AppleBCMWLANCore::convertWlCntToApple80211ChipStats(a1, v7, (unsigned __int16 **)a2);
    uint64_t v8 = *(AppleBCMWLANLQM **)(*((void *)a1 + 9) + 5608);
    if (v8) {
      AppleBCMWLANLQM::updateInfraStatistics(v8, v7);
    }
    if (v7) {
      ((void (*)(OSData *))v7->release)(v7);
    }
  }
  IOFreeData();
  return v2;
}

uint64_t AppleBCMWLANCore::getPowerStats(AppleBCMWLANCore *a1, _DWORD *a2, int *a3)
{
  bzero(a2, 0x270uLL);
  int v6 = *a3;
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 24))
  {
    uint64_t v7 = 0;
    goto LABEL_20;
  }
  uint64_t v7 = AppleBCMWLANCore::collectOPSEBTStatus(a1);
  if (v7)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v22, "[dk] %s@%d:Failed to collect OPS/EBT Status\n", "getPowerStats", 48069);
      }
    }
  }
  if (!AppleBCMWLANCore::featureFlagIsBitSet(a1, 46))
  {
    uint64_t v9 = a1;
    uint64_t v10 = (uint64_t)a2;
    unsigned int v11 = 0;
    goto LABEL_13;
  }
  if ((AppleBCMWLANCore::featureFlagIsBitSet(a1, 76) & 1) == 0 || *a3 != 32)
  {
    unsigned int v13 = 0;
    char v14 = 1;
    do
    {
      char v15 = v14;
      uint64_t PowerStatsPerSliceIndex = AppleBCMWLANCore::getPowerStatsPerSliceIndex(a1, (uint64_t)a2, v8, v13);
      char v14 = 0;
      unsigned int v13 = 1;
    }
    while ((v15 & 1) != 0);
    goto LABEL_16;
  }
  if (!*(unsigned char *)(*((void *)a1 + 9) + 18340))
  {
    *a3 = 13;
    uint64_t v9 = a1;
    uint64_t v10 = (uint64_t)a2;
    unsigned int v11 = 2;
LABEL_13:
    uint64_t PowerStatsPerSliceIndex = AppleBCMWLANCore::getPowerStatsPerSliceIndex(v9, v10, v8, v11);
LABEL_16:
    uint64_t v7 = PowerStatsPerSliceIndex;
  }
  if (v7 != -469794537 && v6 != 32) {
    IO80211Controller::setPowerStats();
  }
LABEL_20:
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 24))
  {
    int v26 = 0;
    long long v24 = &v26;
    uint64_t v25 = 0x400040004;
    uint64_t v16 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*((void *)a1 + 9) + 5416), (uint64_t)"mpc_dur", (uint64_t)&kNoTxPayload, (uint64_t)&v24, 0);
    if (v16)
    {
      uint64_t v17 = v16;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          int v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)a1 + 112))(a1, v17);
          CCLogStream::logCrit(v18, "[dk] %s@%d: mpc_dur failed, error %s\n");
        }
      }
    }
    else
    {
      a2[2] = v26;
      long long v24 = &v26;
      uint64_t v25 = 0x400040004;
      uint64_t v19 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*((void *)a1 + 9) + 5416), (uint64_t)"pm_dur", (uint64_t)&kNoTxPayload, (uint64_t)&v24, 0);
      if (!v19)
      {
        a2[1] = v26;
        unint64_t v27 = 0;
        mach_continuous_time();
        absolutetime_to_nanoseconds();
        uint64_t v7 = 0;
        *a2 = v27 / 0xF4240;
        return v7;
      }
      uint64_t v20 = v19;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v23 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)a1 + 112))(a1, v20);
          CCLogStream::logCrit(v23, "[dk] %s@%d: pm_dur failed, error %s\n");
        }
      }
    }
    return 3758097084;
  }
  return v7;
}

double AppleBCMWLANCore::setLPSCPowerStats(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a3 + 56);
  *(_DWORD *)a2 = *(_DWORD *)a3;
  *(_DWORD *)(a2 + 4) = v3;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 76);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 92);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 108);
  *(void *)(a2 + 56) = *(void *)(a3 + 336);
  double result = *(double *)(a3 + 472);
  *(double *)(a2 + 68) = result;
  *(_DWORD *)(a2 + 76) = *(_DWORD *)(a3 + 480);
  *(_WORD *)(a2 + 64) = *(_WORD *)(a3 + 404);
  *(_WORD *)(a2 + 66) = *(_WORD *)(a3 + 406);
  return result;
}

uint64_t ___ZN16AppleBCMWLANCore8getDiagsEP13apple80211reqP22apple80211_stat_report_block_invoke(uint64_t a1)
{
  return AppleBCMWLANCore::getDiagsAmpduStats(*(AppleBCMWLANCore **)(a1 + 32));
}

uint64_t AppleBCMWLANCore::handleCardSpecific(AppleBCMWLANCore *this, OSMetaClassBase *anObject, uint64_t a3, long long *a4)
{
  long long v6 = a4[1];
  long long v31 = *a4;
  long long v32 = v6;
  unsigned int v33 = (void *)*((void *)a4 + 4);
  uint64_t v7 = OSMetaClassBase::safeMetaCast(anObject, gIO80211VirtualInterfaceMetaClass);
  int v8 = DWORD1(v32);
  if (DWORD1(v32))
  {
    if (DWORD1(v32) != 1012)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          uint64_t v23 = "SIOCGA80211";
          if (a3 == 2150132168) {
            uint64_t v23 = "SIOCSA80211";
          }
          long long v24 = "get";
          if (a3 == 2150132168) {
            long long v24 = "set";
          }
          CCLogStream::logNoticeIf(v22, 4uLL, "[dk] %s@%d:wl: \"%.16s\" ioctl cmd %s : %s type = %x val = %x buf %p len %u\n", "handleCardSpecific", 26831, (const char *)&v31, v23, v24, v32, DWORD1(v32), v33, DWORD2(v32));
          int v8 = DWORD1(v32);
        }
      }
    }
  }
  uint64_t v9 = 3758097115;
  if (v8 == 1013)
  {
    uint64_t v12 = *(CCLogStream **)(*((void *)this + 9) + 14160);
    if (!v12) {
      return 0;
    }
    unsigned int ConsoleLevel = CCLogStream::getConsoleLevel(v12);
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v27 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        unsigned int v28 = "get";
        if (a3 == 2150132168) {
          unsigned int v28 = "set";
        }
        CCLogStream::logNotice(v27, "[dk] %s@%d:CARD_SPECIFIC_LOG_LEVEL rlen %u val %u <%s> level %lx \n", "handleCardSpecific", 26879, DWORD2(v32), DWORD1(v32), v28, ConsoleLevel);
      }
    }
    if (DWORD2(v32) < 4) {
      return v9;
    }
    if (a3 == 2150132168)
    {
      uint64_t v20 = *(unsigned int *)v33;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v30 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logNotice(v30, "[dk] %s@%d:-> %lx \n", "handleCardSpecific", 26914, v20);
        }
      }
      (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 9) + 14160) + 144))(*(void *)(*((void *)this + 9) + 14160), v20);
      return 0;
    }
    if (a3 == 3223873993)
    {
      uint64_t v9 = 0;
      *(_DWORD *)unsigned int v33 = ConsoleLevel;
      return v9;
    }
LABEL_22:
    if (v7) {
      uint64_t InterfaceId = IO80211SkywalkInterface::getInterfaceId((IO80211SkywalkInterface *)v7);
    }
    else {
      uint64_t InterfaceId = 0;
    }
    char v15 = v33;
    uint64_t v9 = AppleBCMWLANCore::wlc_ioctl(this, DWORD1(v32), InterfaceId, (char *)v33, DWORD2(v32));
    if (v9)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if ((DWORD1(v32) & 0xFFFFFFFE) == 0x106) {
            uint64_t v17 = "IOVAR";
          }
          else {
            uint64_t v17 = "IOCTL";
          }
          CCLogStream::logNoticeIf(v16, 4uLL, "[dk] %s@%d:wl: error %x (cmd=%d %s)\n", "handleCardSpecific", 26997, v9, DWORD1(v32), v17);
        }
      }
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logNoticeIf(v18, 4uLL, "[dk] %s@%d:wl: wlErr = %x, copyErr = %x, req_data=%p (req_len=%d) requestBufferData[%p]\n", "handleCardSpecific", 27011, v9, 0, v33, DWORD2(v32), v15);
      }
    }
    return v9;
  }
  if (v8 == 1010) {
    return 3758097095;
  }
  if (v8 != 1009) {
    goto LABEL_22;
  }
  uint64_t v10 = *(void *)(*((void *)this + 9) + 14160);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 160))(v10);
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v25 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      int v26 = "get";
      if (a3 == 2150132168) {
        int v26 = "set";
      }
      CCLogStream::logNotice(v25, "[dk] %s@%d:CARD_SPECIFIC_LOG_FLAGS rlen %u val %u <%s> flags %lx \n", "handleCardSpecific", 26836, DWORD2(v32), DWORD1(v32), v26, v11);
    }
  }
  if (DWORD2(v32) >= 8)
  {
    if (a3 != 2150132168)
    {
      if (a3 != 3223873993) {
        return 3758097084;
      }
      uint64_t v9 = 0;
      *(void *)unsigned int v33 = v11;
      return v9;
    }
    uint64_t v19 = *(void *)v33;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v29 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logNotice(v29, "[dk] %s@%d:-> %lx \n", "handleCardSpecific", 26870, v19);
      }
    }
    (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 9) + 14160) + 152))(*(void *)(*((void *)this + 9) + 14160), v19);
    return 0;
  }
  return v9;
}

uint64_t AppleBCMWLANCore::wlc_ioctl(AppleBCMWLANCore *this, unsigned int a2, uint64_t a3, char *a4, unsigned int a5)
{
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  uint64_t v10 = AppleBCMWLANCore::_wlc_ioctl(this, a2, a3, a4, a5);
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  return v10;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::handleCardSpecific(AppleBCMWLANCore *this, OSMetaClassBase *a2, uint64_t a3, long long *a4)
{
  return AppleBCMWLANCore::handleCardSpecific((AppleBCMWLANCore *)((char *)this - 48), a2, a3, a4);
}

uint64_t AppleBCMWLANCore::_wlc_ioctl(AppleBCMWLANCore *this, unsigned int a2, uint64_t a3, char *a4, unsigned int a5)
{
  if (a2 <= 0x34 && ((1 << a2) & 0x1000000800000CLL) != 0
    || a2 - 214 <= 0x35 && ((1 << (a2 + 42)) & 0x20002000000001) != 0
    || a2 == 163)
  {
    goto LABEL_13;
  }
  if (a4 && a5)
  {
    if (!a2)
    {
      if (a5 > 3)
      {
        uint64_t v10 = 0;
        *(_DWORD *)a4 = 350514295;
      }
      else
      {
        uint64_t v10 = 3758097090;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            long long v37 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v37, "[dk] %s@%d:wl: error %x wl command %d requires argument, insufficient space, len %u < %zu\n", "_wlc_ioctl", 27076, -536870206, 0, a5, 4uLL);
          }
        }
      }
      return v10;
    }
LABEL_13:
    uint64_t v11 = (*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 1872))(this, 0xFFFFFFFFLL);
    if (v11)
    {
      uint64_t v10 = v11;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          unsigned int v13 = (const char *)convertApple80211IOCTLToString();
          char v14 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v10);
          CCLogStream::logInfo(v12, "[dk] %s@%d: Rejecting ioctl %s, error 0x%x(%s) (state 0x%lx)\n", "_wlc_ioctl", 27093, v13, v10, v14, *(unsigned int *)(*((void *)this + 9) + 10388));
        }
      }
      return v10;
    }
    if (a3 == -1) {
      return 4294967277;
    }
    unint64_t v15 = a5;
    unint64_t MaxCmdTxPayload = a5;
    if (AppleBCMWLANCommander::getMaxCmdTxPayload(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416)) <= (unint64_t)a5) {
      unint64_t MaxCmdTxPayload = AppleBCMWLANCommander::getMaxCmdTxPayload(*(AppleBCMWLANCommander **)(*((void *)this + 9)
    }
                                                                                            + 5416));
    if ((a2 & 0xFFFFFFFE) == 0x106)
    {
      int v17 = strnlen(a4, a5);
      uint64_t v18 = (v17 + 1);
      if (v17 == -1 || MaxCmdTxPayload < v18) {
        return 3758096385;
      }
      MaxCmdTxPayload -= v18;
      uint64_t v19 = &a4[v18];
    }
    else
    {
      LODWORD(v18) = 0;
      uint64_t v19 = a4;
    }
    unint64_t MaxCmdRxPayload = AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(*((void *)this + 9)
                                                                                          + 5416));
    if (a2 == 262)
    {
      if (MaxCmdRxPayload - v18 <= v15) {
        unint64_t v15 = AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416))
      }
            - v18;
    }
    else
    {
      if (MaxCmdRxPayload <= v15) {
        unint64_t v15 = AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416));
      }
      if ((a2 & 0xFFFFFFFE) != 0x106)
      {
        if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
          || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
              (CCLogStream::shouldLogConsole() & 1) == 0))
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67110914;
            *(_DWORD *)&uint8_t buf[4] = 78;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "_wlc_ioctl";
            __int16 v40 = 1024;
            int v41 = 27126;
            __int16 v42 = 1024;
            int v43 = a3;
            __int16 v44 = 1024;
            unsigned int v45 = a2;
            __int16 v46 = 1024;
            *(_DWORD *)unsigned int v47 = v18;
            *(_WORD *)&v47[4] = 2048;
            *(void *)&v47[6] = MaxCmdTxPayload;
            *(_WORD *)&v47[14] = 2048;
            *(void *)&v47[16] = v15;
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d:  wl: interfaceID %d: IOVAR %u command (argLen:%u, %lu, %lu)\n", buf, 0x3Eu);
          }
        }
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            long long v36 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logNotice(v36, "[dk] %s@%d: wl: interfaceID %d: IOVAR %u command (argLen:%u, %lu, %lu)\n", "_wlc_ioctl");
          }
        }
        goto LABEL_51;
      }
    }
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
      || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
          (CCLogStream::shouldLogConsole() & 1) == 0))
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        int v21 = "SET";
        *(_DWORD *)buf = 67111426;
        *(_DWORD *)&uint8_t buf[4] = 78;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "_wlc_ioctl";
        __int16 v40 = 1024;
        if (a2 == 262) {
          int v21 = "GET";
        }
        int v41 = 27122;
        __int16 v42 = 1024;
        int v43 = a3;
        __int16 v44 = 1024;
        unsigned int v45 = a2;
        __int16 v46 = 2080;
        *(void *)unsigned int v47 = v21;
        *(_WORD *)&v47[8] = 2080;
        *(void *)&v47[10] = a4;
        *(_WORD *)&v47[18] = 1024;
        *(_DWORD *)&v47[20] = v18;
        __int16 v48 = 2048;
        unint64_t v49 = MaxCmdTxPayload;
        __int16 v50 = 2048;
        unint64_t v51 = v15;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d:  wl: interfaceID %d: IOVAR %u/%s command \"%s\" (argLen:%u, %lu, %lu)\n", buf, 0x52u);
      }
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logNotice(v22, "[dk] %s@%d: wl: interfaceID %d: IOVAR %u/%s command \"%s\" (argLen:%u, %lu, %lu)\n", "_wlc_ioctl", 27122, a3);
      }
    }
LABEL_51:
    *(_OWORD *)buf = kNoRxPayload;
    if (a4) {
      BOOL v24 = v15 == 0;
    }
    else {
      BOOL v24 = 1;
    }
    int v25 = !v24;
    if (!v24)
    {
      unint64_t v26 = ((unint64_t)(unsigned __int16)v15 << 32) | (unsigned __int16)v15;
      if ((_WORD)v15)
      {
        unint64_t v27 = a4;
      }
      else
      {
        unint64_t v26 = 0;
        unint64_t v27 = 0;
      }
      *(void *)buf = v27;
      *(void *)&uint8_t buf[8] = v26;
    }
    long long v38 = kNoTxPayload;
    if (a4 && MaxCmdTxPayload)
    {
      BOOL v28 = v19 != 0;
      BOOL v29 = (unsigned __int16)MaxCmdTxPayload != 0;
      BOOL v30 = !v29 || !v28;
      if (v29 && v28) {
        uint64_t v31 = (unsigned __int16)MaxCmdTxPayload;
      }
      else {
        uint64_t v31 = 0;
      }
      if (v30) {
        long long v32 = 0;
      }
      else {
        long long v32 = v19;
      }
      *(void *)&long long v38 = v32;
      *((void *)&v38 + 1) = v31;
    }
    unsigned int v33 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    if (a2 == 262) {
      return AppleBCMWLANCommander::runVirtualIOVarGet(v33, a3, a4, (uint64_t)&v38, (uint64_t)buf, 0);
    }
    if (a2 == 263) {
      return AppleBCMWLANCommander::runVirtualIOVarSet(v33, a3, a4, (uint64_t)&v38, (uint64_t)buf, 0);
    }
    if (v25) {
      return AppleBCMWLANCommander::runVirtualIOCtlGet(v33, a3, a2, (uint64_t)&v38, (uint64_t)buf, 0);
    }
    return AppleBCMWLANCommander::runVirtualIOCtlSet(v33, a3, a2, (uint64_t)&v38, 0, 0);
  }
  uint64_t v10 = 3758097090;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v23 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v23, "[dk] %s@%d:wl: error %x wl command %d requires argument\n", "_wlc_ioctl", 27062, -536870206, a2);
    }
  }
  return v10;
}

uint64_t AppleBCMWLANCore::getDRIVER_VERSION(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v4 = snprintf((char *)(a3 + 6), 0x100uLL, "%s %s %s", kAppleBCMWLANBuildTag[0], "\"AppleBCMWLANV3_driverkit-1430.34\"", kAppleBCMWLANBuildDate[0]);
  if ((v4 & 0xFF00) != 0) {
    __int16 v5 = 255;
  }
  else {
    __int16 v5 = v4;
  }
  *(_WORD *)(a3 + 4) = v5;
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getDRIVER_VERSION(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v4 = snprintf((char *)(a3 + 6), 0x100uLL, "%s %s %s", kAppleBCMWLANBuildTag[0], "\"AppleBCMWLANV3_driverkit-1430.34\"", kAppleBCMWLANBuildDate[0]);
  if ((v4 & 0xFF00) != 0) {
    __int16 v5 = 255;
  }
  else {
    __int16 v5 = v4;
  }
  *(_WORD *)(a3 + 4) = v5;
  return 0;
}

uint64_t AppleBCMWLANCore::getHARDWARE_VERSION(void *a1, uint64_t a2, uint64_t a3)
{
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v43 = v5;
  long long v44 = v5;
  long long v41 = v5;
  long long v42 = v5;
  long long v39 = v5;
  long long v40 = v5;
  long long v37 = v5;
  long long v38 = v5;
  long long v35 = v5;
  long long v36 = v5;
  long long v33 = v5;
  long long v34 = v5;
  long long v31 = v5;
  long long v32 = v5;
  long long v29 = v5;
  long long v30 = v5;
  long long v27 = v5;
  long long v28 = v5;
  long long v25 = v5;
  long long v26 = v5;
  long long v23 = v5;
  long long v24 = v5;
  uint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 88))(a1);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v6 + 144))(v6)) {
    return 3766626306;
  }
  if (!a3) {
    return 22;
  }
  v22[0] = &v23;
  v22[1] = 0x16001600160;
  uint64_t v7 = AppleBCMWLANCommander::runIOCtlGet(*(AppleBCMWLANCommander **)(a1[9] + 5416), 98, (uint64_t)&kNoTxPayload, (uint64_t)v22, 0);
  if (!v7)
  {
    *(_DWORD *)a3 = 1;
    uint64_t v8 = a3 + 6;
    int v9 = snprintf((char *)(a3 + 6), 0x100uLL, "vendorid: 0x%x\n", v23);
    if (v9 <= 255)
    {
      size_t v10 = strlen((const char *)(a3 + 6));
      v9 += snprintf((char *)(v8 + v10), (256 - v9), "deviceid: 0x%x\n", DWORD1(v23));
      if (v9 <= 255)
      {
        size_t v11 = strlen((const char *)(a3 + 6));
        v9 += snprintf((char *)(v8 + v11), (256 - v9), "radiorev: 0x%x\n", DWORD2(v23));
        if (v9 <= 255)
        {
          size_t v12 = strlen((const char *)(a3 + 6));
          v9 += snprintf((char *)(v8 + v12), (256 - v9), "chipnum: 0x%x\n", HIDWORD(v25));
          if (v9 <= 255)
          {
            size_t v13 = strlen((const char *)(a3 + 6));
            v9 += snprintf((char *)(v8 + v13), (256 - v9), "chiprev: 0x%x\n", HIDWORD(v23));
            if (v9 <= 255)
            {
              size_t v14 = strlen((const char *)(a3 + 6));
              v9 += snprintf((char *)(v8 + v14), (256 - v9), "corerev: 0x%x\n", v24);
              if (v9 <= 255)
              {
                size_t v15 = strlen((const char *)(a3 + 6));
                v9 += snprintf((char *)(v8 + v15), (256 - v9), "boardid: 0x%x\n", DWORD1(v24));
                if (v9 <= 255)
                {
                  size_t v16 = strlen((const char *)(a3 + 6));
                  v9 += snprintf((char *)(v8 + v16), (256 - v9), "boardvendor: 0x%x\n", DWORD2(v24));
                  if (v9 <= 255)
                  {
                    size_t v17 = strlen((const char *)(a3 + 6));
                    v9 += snprintf((char *)(v8 + v17), (256 - v9), "boardrev: 0x%x\n", HIDWORD(v24));
                    if (v9 <= 255)
                    {
                      size_t v18 = strlen((const char *)(a3 + 6));
                      v9 += snprintf((char *)(v8 + v18), (256 - v9), "driverrev: 0x%x\n", v25);
                      if (v9 <= 255)
                      {
                        size_t v19 = strlen((const char *)(a3 + 6));
                        v9 += snprintf((char *)(v8 + v19), (256 - v9), "ucoderev: 0x%x\n", DWORD1(v25));
                        if (v9 <= 255)
                        {
                          size_t v20 = strlen((const char *)(a3 + 6));
                          LOWORD(v9) = snprintf((char *)(v8 + v20), (256 - v9), "bus: 0x%x\n", DWORD2(v25))+ v9;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    *(_WORD *)(a3 + 4) = v9;
  }
  return v7;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getHARDWARE_VERSION(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AppleBCMWLANCore::getHARDWARE_VERSION((void *)(a1 - 48), a2, a3);
}

uint64_t AppleBCMWLANCore::getCHANNEL(void *a1)
{
  if (IO80211BssManager::isAssociated(*(IO80211BssManager **)(a1[9] + 5440)))
  {
    return IO80211BssManager::getCurrentChannel();
  }
  else
  {
    *(void *)uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v3 = (*(uint64_t (**)(void *))(*a1 + 88))(a1);
    if ((*(uint64_t (**)(uint64_t))(*(void *)v3 + 136))(v3)) {
      return 3766626305;
    }
    v7[0] = v8;
    v7[1] = 0x1000100010;
    uint64_t v4 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(a1[9] + 5416), (uint64_t)"chanspec", (uint64_t)&kNoTxPayload, (uint64_t)v7, 0);
    if (v4)
    {
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          long long v5 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          uint64_t v6 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 112))(a1, v4);
          CCLogStream::logCrit(v5, "[dk] %s@%d: chanspec failed, error %s\n", "getCHANNEL", 27345, v6);
        }
      }
    }
    else
    {
      AppleBCMWLANChanSpec::getAppleChannelSpec(*(int ***)(a1[9] + 17576), v8[0]);
      ChanSpecConvToApple80211Channel();
    }
    return v4;
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getCHANNEL(uint64_t a1)
{
  return AppleBCMWLANCore::getCHANNEL((void *)(a1 - 64));
}

uint64_t AppleBCMWLANCore::getBSSID(uint64_t a1, uint64_t a2)
{
  return IO80211BssManager::getCurrentBSSID(*(IO80211BssManager **)(*(void *)(a1 + 72) + 5440), (ether_addr *)(a2 + 4));
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getBSSID(uint64_t a1, uint64_t a2)
{
  return IO80211BssManager::getCurrentBSSID(*(IO80211BssManager **)(*(void *)(a1 + 8) + 5440), (ether_addr *)(a2 + 4));
}

uint64_t AppleBCMWLANCore::getCARD_CAPABILITIES(AppleBCMWLANCore *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = *(_DWORD *)(*((void *)a1 + 9) + 780);
  *(void *)(a3 + 12) = 0;
  *(void *)(a3 + 4) = 0;
  *(_DWORD *)(a3 + 20) = 0;
  *(_DWORD *)a3 = 1;
  *(unsigned char *)(a3 + 19) = 1;
  *(_WORD *)(a3 + 4) = -6545;
  *(unsigned char *)(a3 + 9) = 64;
  *(_WORD *)(a3 + 12) = 513;
  *(unsigned char *)(a3 + 6) = 97;
  if ((AppleBCMWLANCore::featureFlagIsBitSet(a1, 1) & 1) == 0)
  {
    *(unsigned char *)(a3 + 6) |= 0x10u;
    *(unsigned char *)(a3 + 9) |= 1u;
  }
  if ((AppleBCMWLANCore::featureFlagIsBitSet(a1, 7) & 1) == 0) {
    *(unsigned char *)(a3 + 6) |= 2u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 28)) {
    *(unsigned char *)(a3 + 7) |= 0x20u;
  }
  if (AppleBCMWLANCore::shouldSupportTethering(a1)) {
    *(unsigned char *)(a3 + 4) |= 0x80u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 27))
  {
    *(unsigned char *)(a3 + 7) |= 0x80u;
    *(unsigned char *)(a3 + 8) |= 4u;
  }
  if ((AppleBCMWLANCore::featureFlagIsBitSet(a1, 2) & 1) == 0)
  {
    uint64_t v6 = *(AppleBCMWLANConfigManager **)(*((void *)a1 + 9) + 5472);
    if (v6)
    {
      if (AppleBCMWLANConfigManager::isAWDLSupported(v6))
      {
        if ((*(unsigned char *)(*((void *)a1 + 9) + 10385) & 2) == 0)
        {
          *(unsigned char *)(a3 + 8) |= 1u;
          *(unsigned char *)(a3 + 7) |= 1u;
          if ((AppleBCMWLANConfigManager::getAWDLFlags(*(AppleBCMWLANConfigManager **)(*((void *)a1 + 9) + 5472)) & 4) == 0) {
            *(unsigned char *)(a3 + 10) |= 8u;
          }
        }
      }
    }
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 55)) {
    *(unsigned char *)(a3 + 7) |= 3u;
  }
  if (AppleBCMWLANCore::isVESupportedAndEnabled(a1)) {
    *(unsigned char *)(a3 + 8) |= 2u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 38)) {
    *(unsigned char *)(a3 + 10) |= 0x10u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 17)) {
    *(unsigned char *)(a3 + 9) |= 0x20u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 29)) {
    *(unsigned char *)(a3 + 9) |= 0x80u;
  }
  uint64_t v7 = *((void *)a1 + 9);
  __int16 v8 = *(_WORD *)(v7 + 1054);
  if ((v8 & 0x20) != 0)
  {
    *(unsigned char *)(a3 + 6) |= 8u;
    uint64_t v7 = *((void *)a1 + 9);
    __int16 v8 = *(_WORD *)(v7 + 1054);
  }
  if ((v8 & 0x40) != 0)
  {
    *(unsigned char *)(a3 + 6) |= 4u;
    uint64_t v7 = *((void *)a1 + 9);
  }
  if (*(int *)(v7 + 1040) >= 128)
  {
    if ((*(unsigned char *)(v7 + 1082) & 0x20) != 0) {
      *(unsigned char *)(a3 + 9) |= 8u;
    }
    if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 121)) {
      *(unsigned char *)(a3 + 22) |= 2u;
    }
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 39))
  {
    if (AppleBCMWLANConfigManager::getEnhancedTrgDiscMode(*(AppleBCMWLANConfigManager **)(*((void *)a1 + 9) + 5472)) == 1) {
      *(unsigned char *)(a3 + 10) |= 0x20u;
    }
    else {
      *(unsigned char *)(a3 + 12) |= 2u;
    }
  }
  uint64_t v9 = *(AppleBCMWLANConfigManager **)(*((void *)a1 + 9) + 5472);
  if (v9 && AppleBCMWLANConfigManager::isAutoJoinPowerOptimizationSupported(v9)) {
    *(unsigned char *)(a3 + 12) |= 4u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 40)) {
    *(unsigned char *)(a3 + 10) |= 0x40u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 46))
  {
    *(unsigned char *)(a3 + 11) |= 2u;
    if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 70)) {
      *(unsigned char *)(a3 + 13) |= 0x40u;
    }
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 47)) {
    *(unsigned char *)(a3 + 11) |= 1u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 30)) {
    *(unsigned char *)(a3 + 20) |= 0x20u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 98)) {
    *(unsigned char *)(a3 + 16) |= 4u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 48)
    && (*(unsigned char *)(*((void *)a1 + 9) + 17636) & 2) == 0)
  {
    *(unsigned char *)(a3 + 11) |= 4u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 50)) {
    *(unsigned char *)(a3 + 11) |= 8u;
  }
  *(unsigned char *)(a3 + 10) |= 4u;
  *(unsigned char *)(a3 + 7) |= 4u;
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 12)) {
    *(unsigned char *)(a3 + 11) |= 0x20u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 6)) {
    *(unsigned char *)(a3 + 13) |= 1u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 54)) {
    *(unsigned char *)(a3 + 12) |= 8u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 52)) {
    *(unsigned char *)(a3 + 12) |= 0x20u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 49)) {
    *(unsigned char *)(a3 + 12) |= 0x40u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 62)) {
    *(unsigned char *)(a3 + 11) |= 0x80u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 65)) {
    *(unsigned char *)(a3 + 13) |= 8u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 96)) {
    *(unsigned char *)(a3 + 16) |= 1u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 100)) {
    *(unsigned char *)(a3 + 16) |= 8u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 75)) {
    *(unsigned char *)(a3 + 14) |= 1u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 66)) {
    *(unsigned char *)(a3 + 13) |= 0x10u;
  }
  if (*(_DWORD *)(*((void *)a1 + 9) + 780) >= 5u) {
    *(unsigned char *)(a3 + 13) |= 0x80u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 26)) {
    *(unsigned char *)(a3 + 14) |= 2u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 83)) {
    *(unsigned char *)(a3 + 14) |= 0x10u;
  }
  if (v5 > 5
    || v5 == 5
    && (*(unsigned int (**)(void))(**(void **)(*((void *)a1 + 9) + 5400) + 368))(*(void *)(*((void *)a1 + 9) + 5400)) == 4364)
  {
    *(unsigned char *)(a3 + 14) |= 8u;
  }
  size_t v10 = *(AppleBCMWLANConfigManager **)(*((void *)a1 + 9) + 5472);
  if (v10 && AppleBCMWLANConfigManager::isAdaptiveRoamingSupported(v10)) {
    *(unsigned char *)(a3 + 14) |= 0x20u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 86)) {
    *(unsigned char *)(a3 + 14) |= 0x40u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 88)) {
    *(unsigned char *)(a3 + 14) |= 0x80u;
  }
  int IsBitSet = AppleBCMWLANCore::featureFlagIsBitSet(a1, 76);
  uint64_t v12 = *((void *)a1 + 9);
  if (IsBitSet && !*(unsigned char *)(v12 + 18340))
  {
    *(unsigned char *)(a3 + 15) |= 1u;
    uint64_t v12 = *((void *)a1 + 9);
  }
  unsigned int v13 = (*(uint64_t (**)(void))(**(void **)(v12 + 5400) + 368))(*(void *)(v12 + 5400)) - 4378;
  if (v13 <= 0x15 && ((1 << v13) & 0x200601) != 0) {
    *(unsigned char *)(a3 + 20) |= 8u;
  }
  uint64_t v14 = *((void *)a1 + 9);
  if ((*(unsigned char *)(v14 + 17352) & 0x20) != 0)
  {
    *(unsigned char *)(a3 + 15) |= 2u;
    uint64_t v14 = *((void *)a1 + 9);
  }
  if (*(unsigned char *)(v14 + 29948))
  {
    *(unsigned char *)(a3 + 15) |= 4u;
    uint64_t v14 = *((void *)a1 + 9);
  }
  if (*(unsigned char *)(v14 + 29926))
  {
    *(unsigned char *)(a3 + 15) |= 8u;
    uint64_t v14 = *((void *)a1 + 9);
  }
  if (*(unsigned char *)(v14 + 29927))
  {
    *(unsigned char *)(a3 + 15) |= 0x10u;
    uint64_t v14 = *((void *)a1 + 9);
  }
  size_t v15 = *(AppleBCMWLANConfigManager **)(v14 + 5472);
  if (v15 && AppleBCMWLANConfigManager::isContCPMSPowerSupported(v15)) {
    *(unsigned char *)(a3 + 15) |= 0x20u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 97)) {
    *(unsigned char *)(a3 + 16) |= 2u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 119)) {
    *(unsigned char *)(a3 + 22) |= 1u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 93)) {
    *(unsigned char *)(a3 + 15) |= 0x40u;
  }
  if (*(unsigned char *)(*((void *)a1 + 9) + 29928) && AppleBCMWLANCore::featureFlagIsBitSet(a1, 93)) {
    *(unsigned char *)(a3 + 15) |= 0x80u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 93) && *(unsigned char *)(*((void *)a1 + 9) + 35753)) {
    *(unsigned char *)(a3 + 16) |= 0x10u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 72)) {
    *(unsigned char *)(a3 + 16) |= 0x20u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 37)) {
    *(unsigned char *)(a3 + 16) |= 0x40u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 60)) {
    *(unsigned char *)(a3 + 16) |= 0x80u;
  }
  if (v5 <= 0x10) {
    *(unsigned char *)(a3 + 17) |= 1u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 105)) {
    *(unsigned char *)(a3 + 17) |= 2u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 106)) {
    *(unsigned char *)(a3 + 17) |= 4u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 109)) {
    *(unsigned char *)(a3 + 17) |= 0x20u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 107)) {
    *(unsigned char *)(a3 + 17) |= 8u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 108)) {
    *(unsigned char *)(a3 + 17) |= 0x10u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 35)) {
    *(unsigned char *)(a3 + 17) |= 0x40u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 104)) {
    *(unsigned char *)(a3 + 18) |= 1u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 82)) {
    *(unsigned char *)(a3 + 18) |= 4u;
  }
  if (AppleBCMWLANNetAdapter::isLimitedAggregationSupported(*(AppleBCMWLANCore ****)(*((void *)a1 + 9) + 5600))) {
    *(unsigned char *)(a3 + 18) |= 8u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 89)) {
    *(unsigned char *)(a3 + 18) |= 2u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 113)) {
    *(unsigned char *)(a3 + 20) |= 0x80u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 36)) {
    *(unsigned char *)(a3 + 18) |= 0x10u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 18)) {
    *(unsigned char *)(a3 + 18) |= 0x20u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 61)) {
    *(unsigned char *)(a3 + 18) |= 0x40u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 25)) {
    *(unsigned char *)(a3 + 18) |= 0x80u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 50)) {
    *(unsigned char *)(a3 + 19) |= 4u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 32)) {
    *(unsigned char *)(a3 + 19) |= 8u;
  }
  if (AppleBCMWLANConfigManager::isEnhancedDisassociationReasonEnabled(*(AppleBCMWLANConfigManager **)(*((void *)a1 + 9) + 5472))) {
    *(unsigned char *)(a3 + 19) |= 0x40u;
  }
  if (AppleBCMWLANConfigManager::isBeaconReportingEnabled(*(AppleBCMWLANConfigManager **)(*((void *)a1 + 9) + 5472))) {
    *(unsigned char *)(a3 + 19) |= 0x10u;
  }
  if (AppleBCMWLANConfigManager::isOSVersionReportingSupported(*(AppleBCMWLANConfigManager **)(*((void *)a1 + 9) + 5472))) {
    *(unsigned char *)(a3 + 19) |= 0x20u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 114)) {
    *(unsigned char *)(a3 + 21) |= 2u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 115)) {
    *(unsigned char *)(a3 + 21) |= 8u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 116)) {
    *(unsigned char *)(a3 + 21) |= 0x30u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 117)) {
    *(unsigned char *)(a3 + 21) |= 4u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 67)) {
    *(unsigned char *)(a3 + 21) |= 0x80u;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 118)) {
    *(unsigned char *)(a3 + 5) |= 8u;
  }
  return 0;
}

uint64_t AppleBCMWLANCore::isVESupportedAndEnabled(AppleBCMWLANCore *this)
{
  int IsBitSet = AppleBCMWLANCore::featureFlagIsBitSet(this, 21);
  uint64_t v3 = *(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472);
  if (v3) {
    LODWORD(v3) = AppleBCMWLANConfigManager::isVoiceEnterpriseNwSupportEnabled(v3);
  }
  return IsBitSet & v3;
}

uint64_t AppleBCMWLANCore::checkForHP2PSupport(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 86);
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getCARD_CAPABILITIES(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

uint64_t AppleBCMWLANCore::getOP_MODE(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 22;
  }
  unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)a2 = 1;
  uint64_t v4 = *(void *)(a1 + 72);
  unsigned int v5 = *(AppleBCMWLANIO80211APSTAInterface **)(v4 + 11320);
  if (v5)
  {
    int v6 = AppleBCMWLANIO80211APSTAInterface::enabled(v5);
    uint64_t v4 = *(void *)(a1 + 72);
    if (v6)
    {
      (*(void (**)(void, unint64_t *))(**(void **)(v4 + 11320) + 1544))(*(void *)(v4 + 11320), &v8);
      *(_DWORD *)(a2 + 4) |= HIDWORD(v8);
      uint64_t v4 = *(void *)(a1 + 72);
    }
  }
  if (IO80211BssManager::isAssociated(*(IO80211BssManager **)(v4 + 5440))) {
    *(_DWORD *)(a2 + 4) |= IO80211BssManager::getOPMode(*(IO80211BssManager **)(*(void *)(a1 + 72) + 5440));
  }
  uint64_t result = 0;
  if (*(unsigned char *)(*(void *)(a1 + 72) + 18153)) {
    *(_DWORD *)(a2 + 4) |= 0x10u;
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getOP_MODE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getOP_MODE(a1 - 64, a2);
}

uint64_t AppleBCMWLANCore::getNOISE(uint64_t a1, uint64_t a2)
{
  if (!IO80211BssManager::isAssociated(*(IO80211BssManager **)(*(void *)(a1 + 72) + 5440))) {
    return 6;
  }
  __int16 v5 = 0;
  uint64_t result = IO80211BssManager::getCurrentNoise(*(IO80211BssManager **)(*(void *)(a1 + 72) + 5440), &v5);
  *(_DWORD *)(a2 + 12) = v5;
  *(void *)(a2 + 4) = 1;
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getNOISE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getNOISE(a1 - 64, a2);
}

uint64_t AppleBCMWLANCore::getRSSI(void *a1, uint64_t a2)
{
  memset(v12, 0, sizeof(v12));
  if (!IO80211BssManager::isAssociated(*(IO80211BssManager **)(a1[9] + 5440))) {
    return 3766625283;
  }
  *(_OWORD *)(a2 + 36) = 0u;
  *(_OWORD *)(a2 + 20) = 0u;
  *(_OWORD *)(a2 + 4) = 0u;
  *(_DWORD *)a2 = 1;
  int isAssociatedToAdhoc = IO80211BssManager::isAssociatedToAdhoc(*(IO80211BssManager **)(a1[9] + 5440));
  uint64_t v5 = a1[9];
  if (isAssociatedToAdhoc)
  {
    uint64_t CurrentRSSI = IO80211BssManager::getCurrentRSSI(*(IO80211BssManager **)(v5 + 5440), (int *)(a2 + 12));
    if (!CurrentRSSI)
    {
      *(_DWORD *)(a2 + 28) = *(_DWORD *)(a2 + 12);
      int v7 = 1;
LABEL_12:
      *(_DWORD *)(a2 + 4) = v7;
    }
  }
  else
  {
    uint64_t CurrentRSSI = AppleBCMWLANNetAdapter::getRSSIPerAntenna(*(AppleBCMWLANCore ****)(v5 + 5600), (int32x4_t *)v12);
    if (!CurrentRSSI)
    {
      int32x4_t v9 = *(int32x4_t *)v12;
      *(_OWORD *)(a2 + 12) = *(_OWORD *)v12;
      if (vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(v9, v9))))
      {
        uint64_t CurrentRSSI = 0;
        int32x4_t v10 = (int32x4_t)vbicq_s8((int8x16_t)xmmword_10036E9B0, (int8x16_t)vceqzq_s32(v9));
        v10.i32[0] = vaddvq_s32(v10) & 0xF;
        *(int8x8_t *)v10.i8 = vcnt_s8(*(int8x8_t *)v10.i8);
        v10.i16[0] = vaddlv_u8(*(uint8x8_t *)v10.i8);
        int v7 = v10.i32[0];
        *(_DWORD *)(a2 + 28) = vaddvq_s32(v9) / v10.i32[0];
        goto LABEL_12;
      }
      *(_DWORD *)(a2 + 28) = 0;
      *(_DWORD *)(a2 + 4) = 0;
    }
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        unint64_t v8 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v8, "[dk] %s@%d: ERROR: Invalid radio count[%u], retVal[0x%08x]\n", "getRSSI", 27903, 0, CurrentRSSI);
      }
    }
  }
  return CurrentRSSI;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getRSSI(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getRSSI((void *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::getPOWER(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a1 + 72) + 19708);
  *(_DWORD *)(a3 + 4) = 1;
  *(_DWORD *)(a3 + 8) = v3;
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getPOWER(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a1 + 24) + 19708);
  *(_DWORD *)(a3 + 4) = 1;
  *(_DWORD *)(a3 + 8) = v3;
  return 0;
}

uint64_t AppleBCMWLANCore::getRATE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANLQM::getCurrentTxRate(*(AppleBCMWLANCore ****)(*(void *)(a1 + 72) + 5608), (unsigned int *)(a2 + 8));
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getRATE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANLQM::getCurrentTxRate(*(AppleBCMWLANCore ****)(*(void *)(a1 + 8) + 5608), (unsigned int *)(a2 + 8));
}

uint64_t AppleBCMWLANCore::getRX_RATE(uint64_t a1, uint64_t a2)
{
  return IO80211BssManager::getCurrentRxRate(*(IO80211BssManager **)(*(void *)(a1 + 72) + 5440), (unsigned int *)(a2 + 8));
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getRX_RATE(uint64_t a1, uint64_t a2)
{
  return IO80211BssManager::getCurrentRxRate(*(IO80211BssManager **)(*(void *)(a1 + 8) + 5440), (unsigned int *)(a2 + 8));
}

uint64_t AppleBCMWLANCore::getRATE_SET(uint64_t a1)
{
  return IO80211BssManager::getCurrentRateSet(*(void *)(*(void *)(a1 + 72) + 5440));
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getRATE_SET(uint64_t a1)
{
  return IO80211BssManager::getCurrentRateSet(*(void *)(*(void *)(a1 + 8) + 5440));
}

uint64_t AppleBCMWLANCore::getMCS_INDEX_SET(uint64_t a1)
{
  return IO80211BssManager::getCurrentMCSSet(*(void *)(*(void *)(a1 + 72) + 5440));
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getMCS_INDEX_SET(uint64_t a1)
{
  return IO80211BssManager::getCurrentMCSSet(*(void *)(*(void *)(a1 + 8) + 5440));
}

uint64_t AppleBCMWLANCore::getVHT_MCS_INDEX_SET(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 72);
  if (*(int *)(v1 + 1040) >= 128) {
    return IO80211BssManager::getCurrentVHTMCSSet(*(void *)(v1 + 5440));
  }
  else {
    return 3758097095;
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getVHT_MCS_INDEX_SET(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (*(int *)(v1 + 1040) >= 128) {
    return IO80211BssManager::getCurrentVHTMCSSet(*(void *)(v1 + 5440));
  }
  else {
    return 3758097095;
  }
}

uint64_t AppleBCMWLANCore::getHE_MCS_INDEX_SET(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 72);
  if (*(int *)(v1 + 1040) >= 128) {
    return IO80211BssManager::getCurrentHEMCSSet(*(void *)(v1 + 5440));
  }
  else {
    return 3758097095;
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getHE_MCS_INDEX_SET(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (*(int *)(v1 + 1040) >= 128) {
    return IO80211BssManager::getCurrentHEMCSSet(*(void *)(v1 + 5440));
  }
  else {
    return 3758097095;
  }
}

uint64_t AppleBCMWLANCore::getCHIP_DIAGS(uint64_t a1)
{
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  *(void *)&long long v1 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v1 + 1) = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v5 = 0xAAAAAAAAAAAAAAAALL;
  v4[0] = v1;
  v4[1] = v1;
  BYTE4(v4[0]) = 0;
  LODWORD(v4[0]) = 20;
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t (*)(AppleBCMWLANCore *, uint64_t, int *), _OWORD *, _OWORD *, void, void))(*(void *)v2 + 56))(v2, AppleBCMWLANCore::getDiags, v6, v4, 0, 0);
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getCHIP_DIAGS(uint64_t a1)
{
  return AppleBCMWLANCore::getCHIP_DIAGS(a1 - 64);
}

uint64_t AppleBCMWLANCore::getPOWERSAVE(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(*(void *)(a1 + 72) + 6732);
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getPOWERSAVE(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(*(void *)(a1 + 8) + 6732);
  return 0;
}

uint64_t AppleBCMWLANCore::getAUTH_TYPE()
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getAUTH_TYPE()
{
  return 0;
}

uint64_t AppleBCMWLANCore::getAP_IE_LIST(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = 0;
  uint64_t result = IO80211BssManager::getCurrentIEList(*(IO80211BssManager **)(*(void *)(a1 + 72) + 5440), (unsigned __int8 *)(a2 + 8), &v4);
  *(_DWORD *)(a2 + 4) = v4;
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getAP_IE_LIST(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = 0;
  uint64_t result = IO80211BssManager::getCurrentIEList(*(IO80211BssManager **)(*(void *)(a1 + 8) + 5440), (unsigned __int8 *)(a2 + 8), &v4);
  *(_DWORD *)(a2 + 4) = v4;
  return result;
}

uint64_t AppleBCMWLANCore::getDBG_GUARD_TIME_PARAMS(void *a1, uint64_t a2)
{
  v10[0] = &v11;
  v10[1] = 0x800080008;
  unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(a1[9] + 5416), (uint64_t)"forced_pm", (uint64_t)&kNoTxPayload, (uint64_t)v10, 0);
  uint64_t v5 = v4;
  if (v4 == -536870173 || v4 == 0)
  {
    *(_WORD *)(a2 + 4) = v11;
    *(_DWORD *)(a2 + 8) = HIDWORD(v11);
  }
  else if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      unint64_t v8 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      int32x4_t v9 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 112))(a1, v5);
      CCLogStream::logCrit(v8, "[dk] %s@%d: forced_pm failed, error %s\n", "getDBG_GUARD_TIME_PARAMS", 28123, v9);
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getDBG_GUARD_TIME_PARAMS(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getDBG_GUARD_TIME_PARAMS((void *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::getLEAKY_AP_STATS_MODE(void *a1, uint64_t a2)
{
  int v12 = 0;
  v11[0] = &v12;
  v11[1] = 0x400040004;
  uint64_t v4 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(a1[9] + 5416), (uint64_t)"leaky_ap_stats", (uint64_t)&kNoTxPayload, (uint64_t)v11, 0);
  uint64_t v5 = v4;
  if (v4 == -536870173 || v4 == -469794537 || v4 == 0)
  {
    *(_DWORD *)(a2 + 4) = v12;
  }
  else if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      int32x4_t v9 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      int32x4_t v10 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 112))(a1, v5);
      CCLogStream::logCrit(v9, "[dk] %s@%d: leaky_ap_stats failed, error %s\n", "getLEAKY_AP_STATS_MODE", 28146, v10);
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getLEAKY_AP_STATS_MODE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getLEAKY_AP_STATS_MODE((void *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::getTHERMAL_INDEX(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 4) = **(_DWORD **)(a1 + 72);
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getTHERMAL_INDEX(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 4) = **(_DWORD **)(a1 + 8);
  return 0;
}

uint64_t AppleBCMWLANCore::getBEACON_INFO(void *a1, uint64_t a2)
{
  uint64_t v4 = IOMallocZeroData();
  if (v4)
  {
    uint64_t v5 = (unsigned int *)v4;
    v16[0] = v4;
    v16[1] = 0x70800040708;
    uint64_t v6 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(a1[9] + 5416), (uint64_t)"beacon_info", (uint64_t)&kNoTxPayload, (uint64_t)v16, 0);
    if (v6 || (size_t v8 = *v5, v9 = v5 + 1, (v5[1] & 0xFC) != 0x80) || (int)v8 < 37)
    {
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          unint64_t v11 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logAlert(v11, "[dk] %s@%d:beacon_info iovar failed.\n", "getBEACON_INFO", 28228);
        }
      }
      *(void *)a2 = 0xDEADBEEF00000000;
    }
    else if (v8 >= 0x801)
    {
      int v13 = *v5;
      if ((*(uint64_t (**)(void *, const void *))(*a1 + 1848))(a1, v9))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          size_t v15 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logAlert(v15, "[dk] %s@%d: beaconFrmLength[%d] too large > %lu\n", "getBEACON_INFO", 28210, v13, 2048);
        }
      }
      *(_DWORD *)a2 = 0;
      uint64_t v6 = 3758097115;
    }
    else
    {
      *(_DWORD *)a2 = v8;
      memcpy((void *)(a2 + 4), v9, v8);
      *(unsigned char *)(a2 + 2052) = 0;
      uint64_t CurrentBSS = AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(a1[9] + 5440));
      if (CurrentBSS)
      {
        *(unsigned char *)(a2 + 2052) = (*(uint64_t (**)(uint64_t))(*(void *)CurrentBSS + 808))(CurrentBSS);
        if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
        {
          (*(void (**)(void *))(*a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
            CCLogStream::logInfo(v14, "[dk] %s@%d:WiFiRoam : is HE Beacon ? [%d]\n", "getBEACON_INFO", 28224, *(unsigned __int8 *)(a2 + 2052));
          }
        }
      }
      uint64_t v6 = 0;
    }
    IOFreeData();
  }
  else
  {
    uint64_t v6 = 3758097085;
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v12 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v12, "[dk] %s@%d: buffer allocation failed for beacon_info get iovar, returning\n", "getBEACON_INFO", 28178);
      }
    }
  }
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getBEACON_INFO(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getBEACON_INFO((void *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::getPOWER_BUDGET(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(*(void *)(a1 + 72) + 4);
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getPOWER_BUDGET(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(*(void *)(a1 + 8) + 4);
  return 0;
}

uint64_t AppleBCMWLANCore::getHW_ADDR(void *a1, uint64_t a2)
{
  *(_DWORD *)a2 = 1;
  *(unsigned char *)(a2 + 4) = *(unsigned char *)(a1[9] + 5652);
  *(unsigned char *)(a2 + 5) = *(unsigned char *)(a1[9] + 5653);
  *(unsigned char *)(a2 + 6) = *(unsigned char *)(a1[9] + 5654);
  *(unsigned char *)(a2 + 7) = *(unsigned char *)(a1[9] + 5655);
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(a1[9] + 5656);
  *(unsigned char *)(a2 + 9) = *(unsigned char *)(a1[9] + 5657);
  if ((*(uint64_t (**)(void))(*a1 + 1848))())
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v4, "[dk] %s@%d: WFMacRandomisation :  Populating MAC Address for host. MAC Address: %02x:%02x:%02x:%02x:%02x:%02x\n", "getHW_ADDR", 28260, *(unsigned __int8 *)(a1[9] + 5652), *(unsigned __int8 *)(a1[9] + 5653), *(unsigned __int8 *)(a1[9] + 5654), *(unsigned __int8 *)(a1[9] + 5655), *(unsigned __int8 *)(a1[9] + 5656), *(unsigned __int8 *)(a1[9] + 5657));
    }
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getHW_ADDR(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t AppleBCMWLANCore::getTXPOWER(void *a1, uint64_t a2)
{
  v16[0] = 0xAAAAAAAAAAAAAAAALL;
  v16[1] = 0xAAAAAAAAAAAAAAAALL;
  v15[0] = v16;
  v15[1] = 0x1000100010;
  uint64_t v4 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(a1[9] + 5416), (uint64_t)"qtxpower", (uint64_t)&kNoTxPayload, (uint64_t)v15, 0);
  uint64_t v5 = v4;
  if (v4 == -536870173 || v4 == 0)
  {
    unsigned int v7 = LOBYTE(v16[0]);
    unsigned int v8 = 1;
    *(_DWORD *)(a2 + 4) = 1;
    if (v7 <= 0xC0)
    {
      if (v7 > 0x98)
      {
        unsigned int v13 = v7 - 153;
      }
      else
      {
        int v12 = v7 - 193;
        do
        {
          LOWORD(v8) = 10 * v8;
          v12 += 40;
        }
        while (v12 < -40);
        unsigned int v8 = (unsigned __int16)v8;
        unsigned int v13 = v12 + 40;
      }
      int v9 = (unsigned __int16)((nqdBm_to_mW_map[v13] + (v8 >> 1)) / v8);
    }
    else
    {
      int v9 = 0xFFFF;
    }
    *(_DWORD *)(a2 + 8) = v9;
  }
  else if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      int32x4_t v10 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      unint64_t v11 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 112))(a1, v5);
      CCLogStream::logCrit(v10, "[dk] %s@%d: qtxpower failed, error %s\n", "getTXPOWER", 28274, v11);
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getTXPOWER(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getTXPOWER((void *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::getCURRENT_NETWORK(uint64_t a1, uint64_t a2)
{
  if (!IO80211BssManager::isAssociated(*(IO80211BssManager **)(*(void *)(a1 + 72) + 5440))) {
    return 3766625283;
  }
  uint64_t v4 = *(void *)(*(void *)(a1 + 72) + 5440);
  return IO80211BssManager::getCurrentNet(v4, a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getCURRENT_NETWORK(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getCURRENT_NETWORK(a1 - 64, a2);
}

uint64_t AppleBCMWLANCore::getRSSI_BOUNDS(uint64_t a1, _OWORD *a2)
{
  *a2 = kRSSIBounds;
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getRSSI_BOUNDS(uint64_t a1, _OWORD *a2)
{
  *a2 = kRSSIBounds;
  return 0;
}

uint64_t AppleBCMWLANCore::getCHIP_POWER_RANGE(uint64_t a1, _DWORD *a2)
{
  *a2 = 1;
  AppleBCMWLANConfigManager::copyWlanPwrDutyCycleTable(*(void *)(*(void *)(a1 + 72) + 5472), (uint64_t)a2);
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getCHIP_POWER_RANGE(uint64_t a1, _DWORD *a2)
{
  *a2 = 1;
  AppleBCMWLANConfigManager::copyWlanPwrDutyCycleTable(*(void *)(*(void *)(a1 + 8) + 5472), (uint64_t)a2);
  return 0;
}

uint64_t AppleBCMWLANCore::appending6GOnlyChannelsWithCurrentCC(AppleBCMWLANCore *a1, unsigned int *a2, void *a3)
{
  *a3 = 0;
  if (!AppleBCMWLANCore::featureFlagIsBitSet(a1, 93)) {
    return 0;
  }
  long long v36 = 0;
  uint64_t v37 = 0;
  bzero(&v39, 0x5FAuLL);
  *(_DWORD *)__source = 0;
  unsigned int v35 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  LOWORD(v39) = 0;
  if (!a2) {
    return 22;
  }
  uint64_t v6 = a2[1];
  if (v6 > 0x18F) {
    return 0;
  }
  if (v6)
  {
    int v9 = a2 + 4;
    while ((*((unsigned char *)v9 + 1) & 0x20) == 0)
    {
      v9 += 3;
      if (!--v6) {
        goto LABEL_10;
      }
    }
    return 0;
  }
LABEL_10:
  long long v36 = __source;
  uint64_t v37 = 0x400040004;
  uint64_t v10 = AppleBCMWLANCommander::runIOCtlGet(*(AppleBCMWLANCommander **)(*((void *)a1 + 9) + 5416), 83, (uint64_t)&kNoTxPayload, (uint64_t)&v36, 0);
  if (v10)
  {
    uint64_t v7 = v10;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        unint64_t v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        int v12 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)a1 + 112))(a1, v7);
        CCLogStream::logAlert(v11, "[dk] %s@%d: Failed to retrieve country code:%s \n", "appending6GOnlyChannelsWithCurrentCC", 28364, v12);
      }
    }
    return v7;
  }
  if (strlcpy((char *)&v39 + 2, __source, 4uLL) > 3) {
    return 22;
  }
  *(_DWORD *)&v40[2] = 380;
  long long v36 = (char *)&v39;
  uint64_t v37 = 0x5F4000405FALL;
  unsigned int v13 = *(AppleBCMWLANCommander **)(*((void *)a1 + 9) + 5416);
  v30[0] = &v39;
  v30[1] = 1530;
  uint64_t v14 = AppleBCMWLANCommander::runIOVarGet(v13, (uint64_t)"chanspecs", (uint64_t)v30, (uint64_t)&v36, 0);
  if (v14)
  {
    uint64_t v7 = v14;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        size_t v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        size_t v16 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)a1 + 112))(a1, v7);
        CCLogStream::logCrit(v15, "[dk] %s@%d: chanspecs failed, error %s\n", "appending6GOnlyChannelsWithCurrentCC", 28380, v16);
      }
    }
  }
  else
  {
    if (v39 >= 0x17C) {
      uint64_t v17 = 380;
    }
    else {
      uint64_t v17 = v39;
    }
    unsigned int v18 = a2[1];
    if (v17)
    {
      size_t v19 = (unsigned __int16 *)v40;
      do
      {
        unsigned int v20 = *v19;
        v19 += 2;
        AppleBCMWLANChanSpec::getAppleChannelSpec(*(int ***)(*((void *)a1 + 9) + 17576), v20);
        ChanSpecConvToApple80211Channel();
        unsigned int v21 = v35;
        if ((v35 & 0x2000) != 0) {
          int v22 = 1;
        }
        else {
          int v22 = 3;
        }
        if ((v35 & 8) != 0) {
          int v23 = 0;
        }
        else {
          int v23 = v22;
        }
        int v24 = BYTE4(v34);
        if (!AppleBCMWLANCore::isPassiveChannel((uint64_t)a1, BYTE4(v34), v23, (v35 >> 2) & 1, (v35 >> 10) & 1, (v35 >> 11) & 1))unsigned int v35 = v21 | 0x80; {
        if ((v21 & 0x2000) != 0)
        }
          int v25 = 1;
        else {
          int v25 = 3;
        }
        if ((v21 & 8) != 0) {
          int v26 = 0;
        }
        else {
          int v26 = v25;
        }
        BOOL isDFSChannel = AppleBCMWLANCore::isDFSChannel(a1, v24, v26);
        int v28 = v35;
        if (isDFSChannel)
        {
          int v28 = v35 | 0x100;
          v35 |= 0x100u;
        }
        if ((v28 & 0x2000) != 0 && (a2[1202] & v28) != 0 && (a2[1203] & v28) == 0)
        {
          long long v29 = &a2[3 * v18];
          *((void *)v29 + 1) = v34;
          v29[4] = v28;
          if (++v18 > 0x18F) {
            break;
          }
        }
        --v17;
      }
      while (v17);
    }
    a2[1] = v18;
    mach_continuous_time();
    absolutetime_to_nanoseconds();
    uint64_t v7 = 0;
    *a3 = v31 - v32;
  }
  return v7;
}

BOOL AppleBCMWLANCore::isDFSChannel(void *a1, int a2, int a3)
{
  uint64_t v3 = a1[9];
  unint64_t v4 = *(unsigned __int16 *)(v3 + 19772);
  if (*(_WORD *)(v3 + 19772))
  {
    uint64_t v7 = 0;
    unsigned int v8 = (unsigned __int8 *)(v3 + 20574);
    uint64_t v9 = v3 + 26576;
    BOOL v10 = 1;
    uint64_t v11 = 24576;
    int v12 = v8;
    while (1)
    {
      int v13 = *v12++;
      if (v13 == a2 && *(unsigned char *)(v9 + v7) == (a3 == 1) && v8[800] == 1) {
        break;
      }
      BOOL v10 = ++v7 < v4;
      v11 += 4;
      unsigned int v8 = v12;
      if (v4 == v7) {
        return 0;
      }
    }
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        size_t v15 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlertIf(v15, 0x400uLL, "[dk] %s@%d:chan %u is a radar DFS channel; perchanInfo 0x%X chanbitmap 0x%X \n",
          "isDFSChannel",
          47308,
          a2,
          *(_DWORD *)(a1[9] + v11 - 1600),
          *(_DWORD *)(a1[9] + v11));
      }
    }
  }
  else
  {
    return 0;
  }
  return v10;
}

uint64_t AppleBCMWLANCore::getSupportedChannelsMatching(AppleBCMWLANCore *a1, uint64_t a2, void *a3, void *a4)
{
  __int16 v46 = 0;
  uint64_t v47 = 0;
  bzero(&v49, 0x5FAuLL);
  int v48 = 0;
  unsigned int v45 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  LOWORD(v49) = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  *a4 = 0;
  *a3 = 0;
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  if (!a2) {
    return 22;
  }
  unsigned int v8 = (unsigned char *)(a2 + 4816);
  uint64_t v9 = *((void *)a1 + 9);
  int v10 = *(unsigned __int8 *)(v9 + 17648);
  if (v10 == 97)
  {
    BOOL v12 = 0;
    BOOL v11 = *(unsigned char *)(v9 + 17649) == 0;
  }
  else if (v10 == 98)
  {
    BOOL v11 = 0;
    BOOL v12 = *(unsigned char *)(v9 + 17649) == 0;
  }
  else
  {
    BOOL v12 = 0;
    BOOL v11 = 0;
  }
  if (*(unsigned char *)(a2 + 4817))
  {
    int v13 = (const char *)(a2 + 4818);
  }
  else if (*v8)
  {
    BOOL isRestrictedCountry = AppleBCMWLANCore::isRestrictedCountry(a1);
    uint64_t v15 = 6740;
    if (isRestrictedCountry) {
      uint64_t v15 = 6748;
    }
    int v13 = (const char *)(v9 + v15);
  }
  else
  {
    __int16 v46 = (unsigned int *)&v48;
    uint64_t v47 = 0x400040004;
    uint64_t v34 = AppleBCMWLANCommander::runIOCtlGet(*(AppleBCMWLANCommander **)(v9 + 5416), 83, (uint64_t)&kNoTxPayload, (uint64_t)&v46, 0);
    if (v34)
    {
      uint64_t v16 = v34;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          unsigned int v35 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          long long v36 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)a1 + 112))(a1, v16);
          CCLogStream::logAlert(v35, "[dk] %s@%d: Failed to retrieve country code:%s \n", "getSupportedChannelsMatching", 28509, v36);
        }
      }
      return v16;
    }
    int v13 = (const char *)&v48;
  }
  if (strlcpy((char *)&v49 + 2, v13, 4uLL) > 3) {
    return 22;
  }
  *(_DWORD *)&v50[2] = 380;
  __int16 v46 = &v49;
  uint64_t v47 = 0x5F4000405FALL;
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  uint64_t v17 = *(AppleBCMWLANCommander **)(*((void *)a1 + 9) + 5416);
  v40[0] = &v49;
  v40[1] = 1530;
  uint64_t v16 = AppleBCMWLANCommander::runIOVarGet(v17, (uint64_t)"chanspecs", (uint64_t)v40, (uint64_t)&v46, 0);
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  *a4 = v41 - v43;
  if (v16)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        unsigned int v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        size_t v19 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)a1 + 112))(a1, v16);
        CCLogStream::logCrit(v18, "[dk] %s@%d: chanspecs failed, error %s\n", "getSupportedChannelsMatching", 28529, v19);
      }
    }
  }
  else
  {
    long long v38 = a3;
    if (v49 >= 0x17C) {
      uint64_t v20 = 380;
    }
    else {
      uint64_t v20 = v49;
    }
    if (v20)
    {
      unsigned int v39 = 0;
      unsigned int v21 = (unsigned __int16 *)v50;
      do
      {
        unsigned int v22 = *v21;
        v21 += 2;
        AppleBCMWLANChanSpec::getAppleChannelSpec(*(int ***)(*((void *)a1 + 9) + 17576), v22);
        ChanSpecConvToApple80211Channel();
        unsigned int v23 = v45;
        if ((v45 & 0x2000) != 0) {
          int v24 = 1;
        }
        else {
          int v24 = 3;
        }
        if ((v45 & 8) != 0) {
          int v25 = 0;
        }
        else {
          int v25 = v24;
        }
        int v26 = BYTE4(v44);
        if (!AppleBCMWLANCore::isPassiveChannel((uint64_t)a1, BYTE4(v44), v25, (v45 >> 2) & 1, (v45 >> 10) & 1, (v45 >> 11) & 1))unsigned int v45 = v23 | 0x80; {
        if ((v23 & 0x2000) != 0)
        }
          int v27 = 1;
        else {
          int v27 = 3;
        }
        if ((v23 & 8) != 0) {
          int v28 = 0;
        }
        else {
          int v28 = v27;
        }
        BOOL isDFSChannel = AppleBCMWLANCore::isDFSChannel(a1, v26, v28);
        int v30 = v45;
        if (isDFSChannel)
        {
          int v30 = v45 | 0x100;
          v45 |= 0x100u;
        }
        if ((v30 & 0x10) != 0 || !v11)
        {
          BOOL v32 = (v30 & 8) == 0 && v12;
          if (!v32 && (*(_DWORD *)(a2 + 4808) & v30) != 0 && (*(_DWORD *)(a2 + 4812) & v30) == 0)
          {
            uint64_t v33 = a2 + 12 * v39;
            *(void *)(v33 + 8) = v44;
            *(_DWORD *)(v33 + 16) = v30;
            ++v39;
          }
        }
        --v20;
      }
      while (v20);
    }
    else
    {
      unsigned int v39 = 0;
    }
    *(_DWORD *)a2 = 1;
    *(_DWORD *)(a2 + 4) = v39;
    if (*v8 && !*(unsigned char *)(a2 + 4817)) {
      AppleBCMWLANCore::appending6GOnlyChannelsWithCurrentCC(a1, (unsigned int *)a2, v40);
    }
    mach_continuous_time();
    absolutetime_to_nanoseconds();
    uint64_t v16 = 0;
    void *v38 = v41 - v42;
  }
  return v16;
}

BOOL AppleBCMWLANCore::isRestrictedCountry(AppleBCMWLANCore *this)
{
  long long v1 = (unsigned char *)(*((void *)this + 9) + 6744);
  return *(unsigned char *)(*((void *)this + 9) + 6748)
      && (!*v1 || *(_DWORD *)(*((void *)this + 9) + 6748) == *(_DWORD *)v1);
}

uint64_t AppleBCMWLANCore::getSUPPORTED_CHANNELS(AppleBCMWLANCore *a1, uint64_t a2)
{
  unint64_t v6 = 0;
  unint64_t v7 = 0;
  int v8 = 0;
  if (!a2) {
    return 22;
  }
  if (!*(_DWORD *)(a2 + 4808) && !*(_DWORD *)(a2 + 4812)) {
    *(_DWORD *)(a2 + 4808) = 2;
  }
  uint64_t result = AppleBCMWLANCore::getSupportedChannelsMatching(a1, a2, &v6, &v7);
  if (!result)
  {
    LOWORD(v8) = *(_WORD *)(a2 + 4818);
    BYTE2(v8) = *(unsigned char *)(a2 + 4820);
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d: call time[%06llu.%06llu], ioctl time[%06llu.%06llu], channels[%3u], flags In[0x%08x] Ex[0x%08x] cc['%s'], def[%u]/sp[%u]", "getSUPPORTED_CHANNELS", 28629, v6 / 0x3B9ACA00, v6 % 0x3B9ACA00 / 0x3E8, v7 / 0x3B9ACA00, v7 % 0x3B9ACA00 / 0x3E8, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 4808), *(_DWORD *)(a2 + 4812), (const char *)&v8, *(unsigned __int8 *)(a2 + 4816), *(unsigned __int8 *)(a2 + 4817));
        return 0;
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getSUPPORTED_CHANNELS(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getSUPPORTED_CHANNELS((AppleBCMWLANCore *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::getHW_SUPPORTED_CHANNELS(AppleBCMWLANCore *a1, uint64_t a2)
{
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  int v9 = 0;
  if (!a2) {
    return 22;
  }
  unint64_t v4 = (unsigned __int8 *)(a2 + 4816);
  *(_WORD *)(a2 + 4816) = 1;
  *(_DWORD *)(a2 + 4808) = 2;
  uint64_t result = AppleBCMWLANCore::getSupportedChannelsMatching(a1, a2, &v7, &v8);
  if (!result)
  {
    LOWORD(v9) = *(_WORD *)(a2 + 4818);
    BYTE2(v9) = *(unsigned char *)(a2 + 4820);
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        unint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d: call time[%06llu.%06llu], ioctl time[%06llu.%06llu], channels[%3u], flags In[0x%08x] Ex[0x%08x] cc['%s'], def[%u]/sp[%u]", "getHW_SUPPORTED_CHANNELS", 28664, v7 / 0x3B9ACA00, v7 % 0x3B9ACA00 / 0x3E8, v8 / 0x3B9ACA00, v8 % 0x3B9ACA00 / 0x3E8, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 4808), *(_DWORD *)(a2 + 4812), (const char *)&v9, *v4, v4[1]);
        return 0;
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getHW_SUPPORTED_CHANNELS(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getHW_SUPPORTED_CHANNELS((AppleBCMWLANCore *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::getCOUNTRY_CHANNELS(AppleBCMWLANCore *a1, uint64_t a2)
{
  bzero(&v9, 0x12D8uLL);
  unint64_t v6 = 0;
  unint64_t v7 = 0;
  int v8 = 0;
  if (!a2) {
    return 22;
  }
  unsigned __int8 v14 = 1;
  char v16 = *(unsigned char *)(a2 + 10);
  __int16 v15 = *(_WORD *)(a2 + 8);
  int v11 = 2;
  uint64_t result = AppleBCMWLANCore::getSupportedChannelsMatching(a1, (uint64_t)&v9, &v7, &v6);
  if (!result)
  {
    *(void *)a2 = v9;
    memcpy((void *)(a2 + 12), v10, 0x12C0uLL);
    LOWORD(v8) = v15;
    BYTE2(v8) = v16;
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d: call time[%06llu.%06llu], ioctl time[%06llu.%06llu], channels[%3u], flags In[0x%08x] Ex[0x%08x] cc['%s'], def[%u]/sp[%u]", "getCOUNTRY_CHANNELS", 28710, v7 / 0x3B9ACA00, v7 % 0x3B9ACA00 / 0x3E8, v6 / 0x3B9ACA00, v6 % 0x3B9ACA00 / 0x3E8, HIDWORD(v9), v11, v12, (const char *)&v8, v13, v14);
        return 0;
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getCOUNTRY_CHANNELS(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getCOUNTRY_CHANNELS((AppleBCMWLANCore *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::getCurrentSupportedChannels(AppleBCMWLANCore *this, char *a2)
{
  *(_DWORD *)__source = 0;
  uint64_t v20 = __source;
  uint64_t v21 = 0x400040004;
  uint64_t v3 = AppleBCMWLANCommander::runIOCtlGet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), 83, (uint64_t)&kNoTxPayload, (uint64_t)&v20, 0);
  uint64_t v4 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (v3)
  {
    if (v4)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        size_t v19 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v3);
        CCLogStream::logAlert(v18, "[dk] %s@%d: Failed to retrieve country code:%s \n", "getCurrentSupportedChannels", 28758, v19);
      }
    }
    return 0xFFFFFFFFLL;
  }
  else
  {
    int v6 = IO80211Print();
    bzero(&v24, 0x5FAuLL);
    if (strlcpy((char *)&v24 + 2, __source, 4uLL) > 3)
    {
      return 22;
    }
    else
    {
      *(_DWORD *)&v25[2] = 380;
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      int v7 = IO80211Print();
      uint64_t v20 = (char *)&v24;
      uint64_t v21 = 0x5F4000405FALL;
      int v8 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
      *(void *)&v23[0] = &v24;
      *((void *)&v23[0] + 1) = 1530;
      uint64_t v9 = AppleBCMWLANCommander::runIOVarGet(v8, (uint64_t)"chanspecs", (uint64_t)v23, (uint64_t)&v20, 0);
      if (v9)
      {
        uint64_t v5 = v9;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            int v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            int v11 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
            CCLogStream::logCrit(v10, "[dk] %s@%d: chanspecs failed, error %s\n", "getCurrentSupportedChannels", 28788, v11);
          }
        }
      }
      else
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int v12 = IO80211Print() + v7 + v6;
        if (v24 >= 0x17C) {
          uint64_t v13 = 380;
        }
        else {
          uint64_t v13 = v24;
        }
        if (v13)
        {
          unsigned __int8 v14 = (unsigned __int16 *)v25;
          do
          {
            *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v23[0] = v15;
            v23[1] = v15;
            unsigned __int16 AppleChannelSpec = AppleBCMWLANChanSpec::getAppleChannelSpec(*(int ***)(*((void *)this + 9) + 17576), *v14);
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            v14 += 2;
            AppleBCMWLANChanSpec::convToAscii(AppleChannelSpec, (char *)v23, 0x20u);
            v12 += IO80211Print();
            --v13;
          }
          while (v13);
        }
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        return IO80211Print() + v12;
      }
    }
  }
  return v5;
}

uint64_t AppleBCMWLANCore::getOFFLOAD_TCPKA_ENABLE(AppleBCMWLANCore *this, uint64_t a2)
{
  uint64_t v2 = 3758097095;
  if (!a2 || !*((void *)this + 9)) {
    return 3758097090;
  }
  if (AppleBCMWLANCore::checkForTCPKAOffloadSupport(this))
  {
    uint64_t v5 = *(void *)(*((void *)this + 9) + 5552);
    if (v5)
    {
      AppleBCMWLANKeepAliveOffload::getTCPAliveEnable(v5, a2);
      return 0;
    }
  }
  else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      int v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v7, "[dk] %s@%d:TCP keep alive offload not supported, ignoring\n", "getOFFLOAD_TCPKA_ENABLE", 28847);
    }
  }
  return v2;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getOFFLOAD_TCPKA_ENABLE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getOFFLOAD_TCPKA_ENABLE((AppleBCMWLANCore *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::setOFFLOAD_TCPKA_ENABLE(AppleBCMWLANCore *this, uint64_t a2)
{
  uint64_t v2 = 3758097095;
  if (a2 && *((void *)this + 9))
  {
    if (AppleBCMWLANCore::checkForTCPKAOffloadSupport(this))
    {
      uint64_t v5 = *(void *)(*((void *)this + 9) + 5552);
      if (v5)
      {
        AppleBCMWLANKeepAliveOffload::setTCPAliveEnable(v5, a2);
        return 0;
      }
    }
    else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:TCP keep alive offload not supported, ignoring\n", "setOFFLOAD_TCPKA_ENABLE", 28865);
      }
    }
  }
  return v2;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setOFFLOAD_TCPKA_ENABLE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setOFFLOAD_TCPKA_ENABLE((AppleBCMWLANCore *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::getRSN_XE(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 257;
  uint64_t result = AppleBCMWLANJoinAdapter::getAssocRSNXE(*(AppleBCMWLANJoinAdapter **)(*(void *)(a1 + 72) + 5424), (unsigned __int8 *)(a2 + 6), &v4);
  *(_WORD *)(a2 + 4) = v4;
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getRSN_XE(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 257;
  uint64_t result = AppleBCMWLANJoinAdapter::getAssocRSNXE(*(AppleBCMWLANJoinAdapter **)(*(void *)(a1 + 8) + 5424), (unsigned __int8 *)(a2 + 6), &v4);
  *(_WORD *)(a2 + 4) = v4;
  return result;
}

uint64_t AppleBCMWLANCore::parsePerSliceContainer(OSDictionary *this, OSData *a2)
{
  unsigned int getMetaClass_low = LOBYTE(this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[2].getMetaClass);
  unint64_t v96 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v92 = IOMallocZeroData();
  uint64_t v91 = (void *)IOMallocZeroData();
  if (!OSData::getLength(a2))
  {
LABEL_95:
    uint64_t v56 = v92;
    if (v92)
    {
      *(void *)&long long v57 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v57 + 1) = 0xAAAAAAAAAAAAAAAALL;
      unint64_t v95 = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)uint64_t v93 = v57;
      long long v94 = v57;
      BYTE4(v93[0]) = 0;
      LODWORD(v93[0]) = 19;
      *(void *)(v92 + 2232) = this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[287].isEqualTo;
      *(void *)(v92 + 2240) = this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[287].Dispatch;
      *(void *)(v92 + 2248) = this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[287].init;
      *(_DWORD *)(v92 + 2224) = 1;
      IO80211Controller::setChipCounterStats();
    }
    uint64_t v67 = 0;
    __int16 v58 = v91;
    goto LABEL_98;
  }
  unint64_t v4 = 0;
  LOWORD(v5) = 0;
  int v6 = 0;
  uint64_t v7 = 2;
  while (2)
  {
    if (OSData::getLength(a2) - v4 < 5) {
      goto LABEL_95;
    }
    if (((unint64_t)OSData::getBytesNoCopy(a2) & 3) != 0)
    {
      uint64_t v67 = 3758097084;
      if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
      {
        ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
        uint64_t v56 = v92;
        if (CCLogStream::shouldLog())
        {
          unsigned int v61 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
          CCLogStream::logAlert(v61, "[dk] %s@%d:Buffer not aligned\n");
        }
        goto LABEL_121;
      }
      goto LABEL_122;
    }
    BytesNoCopy = OSData::getBytesNoCopy(a2, v4, 4uLL);
    if (!BytesNoCopy)
    {
      uint64_t v67 = 3758097084;
      if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
      {
        ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
        uint64_t v56 = v92;
        if (CCLogStream::shouldLog())
        {
          __int16 v62 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
          CCLogStream::logAlert(v62, "[dk] %s@%d:Bad read at index %d\n");
        }
        goto LABEL_121;
      }
      goto LABEL_122;
    }
    uint64_t v9 = BytesNoCopy;
    size_t v10 = (unsigned __int16)BytesNoCopy[1];
    if (OSData::getLength(a2) - (v6 + 4) < v10)
    {
      uint64_t v67 = 3758097084;
      if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
      {
        ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
        uint64_t v56 = v92;
        if (CCLogStream::shouldLog())
        {
          uint64_t v63 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
          CCLogStream::logAlert(v63, "[dk] %s@%d:Insufficient containerLength %d index %d\n");
        }
        goto LABEL_121;
      }
      goto LABEL_122;
    }
    int v11 = (void *)OSData::getBytesNoCopy(a2, (v6 + 4), v10);
    if (!v11)
    {
      uint64_t v67 = 3758097084;
      if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
      {
        ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
        uint64_t v56 = v92;
        if (CCLogStream::shouldLog())
        {
          __int16 v64 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
          CCLogStream::logAlert(v64, "[dk] %s@%d:Bad payloadStart\n");
        }
        goto LABEL_121;
      }
LABEL_122:
      uint64_t v13 = 0;
      goto LABEL_130;
    }
    int v12 = OSData::withBytesNoCopy(v11, v10);
    if (!v12)
    {
      uint64_t v67 = 3758097084;
      if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
      {
        ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
        uint64_t v56 = v92;
        if (CCLogStream::shouldLog())
        {
          int v75 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
          CCLogStream::logAlert(v75, "[dk] %s@%d:Bad xtlvContainerPayload\n");
        }
LABEL_121:
        uint64_t v13 = 0;
        goto LABEL_131;
      }
      goto LABEL_122;
    }
    uint64_t v13 = v12;
    int v5 = (unsigned __int16)*v9;
    switch(*v9)
    {
      case 0x302:
      case 0x303:
      case 0x307:
      case 0x309:
        if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
        {
          ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
          if (CCLogStream::shouldLog())
          {
            unsigned __int8 v14 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
            CCLogStream::logAlert(v14, "[dk] %s@%d:Unhandled stat tag: %d\n", "parsePerSliceContainer", 29473, v5);
          }
        }
        goto LABEL_89;
      case 0x304:
        uint64_t v27 = AppleBCMWLANCore::parseEventLogRecordBTCoexStatsPerSlice((AppleBCMWLANCore *)this, v12, v7);
        if (!v27) {
          goto LABEL_89;
        }
        uint64_t v67 = v27;
        if (!((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
        {
          LOWORD(v5) = 772;
          goto LABEL_130;
        }
        ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
        uint64_t v56 = v92;
        if (CCLogStream::shouldLog())
        {
          uint64_t v77 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
          CCLogStream::logAlert(v77, "[dk] %s@%d:Error parsing parseEventLogRecordBTCoexStatsPerSlice\n", "parsePerSliceContainer", 29445);
        }
        LOWORD(v5) = 772;
        goto LABEL_131;
      case 0x305:
      case 0x30D:
      case 0x30E:
      case 0x30F:
      case 0x312:
      case 0x313:
      case 0x314:
      case 0x316:
      case 0x317:
      case 0x318:
      case 0x31D:
        goto LABEL_103;
      case 0x306:
        if (v7 == getMetaClass_low) {
          int v28 = (unsigned __int16 **)v92;
        }
        else {
          int v28 = 0;
        }
        uint64_t v29 = AppleBCMWLANCore::parseV30CntContainer((AppleBCMWLANCore *)this, v12, v7, v28);
        if (!v29) {
          goto LABEL_89;
        }
        uint64_t v67 = v29;
        if (!((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
        {
          LOWORD(v5) = 774;
          goto LABEL_130;
        }
        ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
        uint64_t v56 = v92;
        if (CCLogStream::shouldLog())
        {
          uint64_t v78 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
          CCLogStream::logAlert(v78, "[dk] %s@%d:Error parsing parseV30CntContainer\n", "parsePerSliceContainer", 29466);
        }
        LOWORD(v5) = 774;
        goto LABEL_131;
      case 0x308:
        uint64_t v17 = this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable;
        if (!v17[53].retain) {
          goto LABEL_89;
        }
        if (*((unsigned char *)&v17[63].isEqualTo + v7 + 4))
        {
          v93[0] = 0;
          mach_continuous_time();
          absolutetime_to_nanoseconds();
          this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[188].init = (BOOL (__cdecl *)(OSObject *__hidden))this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[182].Dispatch;
          this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[188].free = 0;
          LOBYTE(this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[188].iterateObjects) = 0;
          unsigned int v18 = this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable;
          retaiuint64_t n = (AppleBCMWLANIOReporting *)v18[53].retain;
          unsigned int Dispatch = v18[63].Dispatch;
          if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 76)) {
            int v21 = 3;
          }
          else {
            int v21 = 2;
          }
          uint64_t v22 = AppleBCMWLANIOReportingPerSlice::reportScanPwrStatsAtLinkUp(retain, Dispatch, v13, v7, v21);
          if (v22)
          {
            uint64_t v67 = v22;
            if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
            {
              ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
              if (CCLogStream::shouldLog())
              {
                __int16 v72 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
                CCLogStream::logAlert(v72, "[dk] %s@%d:Error parsing reportScanPwrStatsAtLinkUp\n");
              }
            }
          }
          else
          {
            if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 76)) {
              signed int v23 = 3;
            }
            else {
              signed int v23 = 2;
            }
            uint64_t v24 = AppleBCMWLANCore::reportSlicesScanPwrStatsAtLinkup(this, v13, v7, v23);
            if (v24)
            {
              uint64_t v67 = v24;
              if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
              {
                ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
                if (CCLogStream::shouldLog())
                {
                  int v73 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
                  CCLogStream::logAlert(v73, "[dk] %s@%d:Error parsing reportSlicesScanPwrStatsAtLinkup\n");
                }
              }
            }
            else
            {
              if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 76)) {
                signed int v25 = 3;
              }
              else {
                signed int v25 = 2;
              }
              uint64_t v26 = AppleBCMWLANCore::reportSlicesScanPwrStats(this, v13, v7, v25);
              if (!v26)
              {
                *((unsigned char *)&this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[63].isEqualTo
                + v7
                + 4) = 0;
                goto LABEL_85;
              }
              uint64_t v67 = v26;
              if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
              {
                ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
                if (CCLogStream::shouldLog())
                {
                  v88 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
                  CCLogStream::logAlert(v88, "[dk] %s@%d:Error parsing reportSlicesScanPwrStats\n");
                }
              }
            }
          }
          uint64_t v56 = v92;
          LOWORD(v5) = 776;
          goto LABEL_131;
        }
        if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 76)) {
          signed int v47 = 3;
        }
        else {
          signed int v47 = 2;
        }
        uint64_t v48 = AppleBCMWLANCore::reportSlicesScanPwrStats(this, v13, v7, v47);
        if (v48)
        {
          uint64_t v67 = v48;
          if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
          {
            ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v89 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
              CCLogStream::logAlert(v89, "[dk] %s@%d:Error parsing reportSlicesScanPwrStats\n");
            }
          }
          goto LABEL_218;
        }
LABEL_85:
        unsigned int v49 = this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable;
        __int16 v50 = (AppleBCMWLANIOReporting *)v49[53].retain;
        unsigned int v51 = v49[63].Dispatch;
        if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 76)) {
          int v52 = 3;
        }
        else {
          int v52 = 2;
        }
        uint64_t v53 = AppleBCMWLANIOReportingPerSlice::reportScanPwrStats(v50, v51, v13, v7, v52);
        if (!v53) {
          goto LABEL_89;
        }
        uint64_t v67 = v53;
        if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
        {
          ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
          if (CCLogStream::shouldLog())
          {
            int v71 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
            CCLogStream::logAlert(v71, "[dk] %s@%d:Error parsing reportScanPwrStats\n");
          }
        }
LABEL_218:
        LOWORD(v5) = 776;
        goto LABEL_130;
      case 0x30A:
        uint64_t v30 = AppleBCMWLANCore::parseEventLogRecordLTECoexStatsPerSlice((AppleBCMWLANCore *)this, v12, v7);
        if (!v30) {
          goto LABEL_89;
        }
        uint64_t v67 = v30;
        if (!((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
        {
          LOWORD(v5) = 778;
          goto LABEL_130;
        }
        ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
        uint64_t v56 = v92;
        if (CCLogStream::shouldLog())
        {
          uint64_t v79 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
          CCLogStream::logAlert(v79, "[dk] %s@%d:Error parsing parseEventLogRecordLTECoexStatsPerSlice\n", "parsePerSliceContainer", 29452);
        }
        LOWORD(v5) = 778;
        goto LABEL_131;
      case 0x30B:
        uint64_t v31 = (AppleBCMWLANIOReporting *)this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[53].retain;
        if (!v31) {
          goto LABEL_89;
        }
        if (v7 == getMetaClass_low) {
          uint64_t v32 = (uint64_t)v91;
        }
        else {
          uint64_t v32 = 0;
        }
        uint64_t v33 = AppleBCMWLANIOReportingPerSlice::reportTVPM(v31, v13, v7, v32);
        if (v33)
        {
          uint64_t v67 = v33;
          if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
          {
            ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
            if (CCLogStream::shouldLog())
            {
              v86 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
              CCLogStream::logAlert(v86, "[dk] %s@%d:Error parsing reportTVPM\n", "parsePerSliceContainer", 29524);
            }
          }
          LOWORD(v5) = 779;
          goto LABEL_130;
        }
        if (v7 == getMetaClass_low)
        {
          if (v91)
          {
            getCount = (IO80211SkywalkInterface *)this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[108].getCount;
            uint64_t v7 = getMetaClass_low;
            if (getCount)
            {
              IO80211Controller::postMessage((IO80211Controller *)this, getCount, 0x9Bu, v91, 0xCuLL, 1);
              uint64_t v7 = getMetaClass_low;
            }
          }
        }
        goto LABEL_89;
      case 0x30C:
        unsigned int v35 = (AppleBCMWLANIOReporting *)this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[53].retain;
        if (!v35) {
          goto LABEL_89;
        }
        uint64_t v36 = AppleBCMWLANIOReportingPerSlice::reportTDM(v35, v13, v7);
        if (!v36) {
          goto LABEL_89;
        }
        uint64_t v67 = v36;
        if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
        {
          ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
          if (CCLogStream::shouldLog())
          {
            int v85 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
            CCLogStream::logAlert(v85, "[dk] %s@%d:Error parsing reportTDM\n", "parsePerSliceContainer", 29538);
          }
        }
        LOWORD(v5) = 780;
        goto LABEL_130;
      case 0x310:
      case 0x311:
        goto LABEL_89;
      case 0x315:
        uint64_t v37 = AppleBCMWLANCore::parseEventLogRecordRC1CoexStatsPerSlice((AppleBCMWLANCore *)this, v12, v7);
        if (!v37) {
          goto LABEL_89;
        }
        uint64_t v67 = v37;
        if (!((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
        {
          LOWORD(v5) = 789;
          goto LABEL_130;
        }
        ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
        uint64_t v56 = v92;
        if (CCLogStream::shouldLog())
        {
          __int16 v80 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
          CCLogStream::logAlert(v80, "[dk] %s@%d:Error parsing parseEventLogRecordRC1CoexStatsPerSlice\n", "parsePerSliceContainer", 29557);
        }
        LOWORD(v5) = 789;
        goto LABEL_131;
      case 0x319:
        uint64_t v38 = AppleBCMWLANCore::parseEventLogRecordRC2CoexStatsPerSlice((AppleBCMWLANCore *)this, v12, v7);
        if (!v38) {
          goto LABEL_89;
        }
        uint64_t v67 = v38;
        if (!((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
        {
          LOWORD(v5) = 793;
          goto LABEL_130;
        }
        ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
        uint64_t v56 = v92;
        if (CCLogStream::shouldLog())
        {
          int v81 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
          CCLogStream::logAlert(v81, "[dk] %s@%d:Error parsing parseEventLogRecordRC2CoexStatsPerSlice\n", "parsePerSliceContainer", 29551);
        }
        LOWORD(v5) = 793;
        goto LABEL_131;
      case 0x31A:
        mach_continuous_time();
        absolutetime_to_nanoseconds();
        *((void *)&this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[297].getCount
        + v7) = v96 / 0xF4240;
        *((void *)&this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[297].ensureCapacity
        + v7) = mach_continuous_time();
        uint64_t v39 = AppleBCMWLANCore::parseEventLogRecordLostMpduPerSlice(this, v13, v7);
        if (!v39) {
          goto LABEL_89;
        }
        uint64_t v67 = v39;
        if (!((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
        {
          LOWORD(v5) = 794;
          goto LABEL_130;
        }
        ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
        uint64_t v56 = v92;
        if (CCLogStream::shouldLog())
        {
          __int16 v82 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
          CCLogStream::logAlert(v82, "[dk] %s@%d:Error parsing parseEventLogRecordLostMpduPerSlice\n", "parsePerSliceContainer", 29567);
        }
        LOWORD(v5) = 794;
        goto LABEL_131;
      case 0x31B:
        uint64_t v40 = AppleBCMWLANCore::parseEventLogRecordWmeTxMpduPerSlice(this, v12, v7);
        if (!v40) {
          goto LABEL_89;
        }
        uint64_t v67 = v40;
        if (!((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
        {
          LOWORD(v5) = 795;
          goto LABEL_130;
        }
        ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
        uint64_t v56 = v92;
        if (CCLogStream::shouldLog())
        {
          uint64_t v83 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
          CCLogStream::logAlert(v83, "[dk] %s@%d:Error parsing parseEventLogRecordWmeTxMpduPerSlice\n", "parsePerSliceContainer", 29574);
        }
        LOWORD(v5) = 795;
        goto LABEL_131;
      case 0x31C:
        uint64_t v41 = AppleBCMWLANCore::parseEventLogRecordWmeRxMpduPerSlice(this, v12, v7);
        if (!v41) {
          goto LABEL_89;
        }
        uint64_t v67 = v41;
        if (!((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
        {
          LOWORD(v5) = 796;
          goto LABEL_130;
        }
        ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
        uint64_t v56 = v92;
        if (CCLogStream::shouldLog())
        {
          uint64_t v84 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
          CCLogStream::logAlert(v84, "[dk] %s@%d:Error parsing parseEventLogRecordWmeRxMpduPerSlice\n", "parsePerSliceContainer", 29581);
        }
        LOWORD(v5) = 796;
        goto LABEL_131;
      case 0x31E:
        if (!this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[53].retain) {
          goto LABEL_89;
        }
        if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 76)) {
          signed int v42 = 3;
        }
        else {
          signed int v42 = 2;
        }
        uint64_t v43 = AppleBCMWLANCore::reportSlicesScanPwrStats6E(this, v13, v7, v42);
        if (!v43)
        {
          uint64_t v44 = (AppleBCMWLANIOReporting *)this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[53].retain;
          if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 76)) {
            int v45 = 3;
          }
          else {
            int v45 = 2;
          }
          uint64_t v46 = AppleBCMWLANIOReportingPerSlice::reportScanPwrStats6E(v44, v13, v7, v45);
          if (v46)
          {
            uint64_t v67 = v46;
            if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
            {
              ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
              if (CCLogStream::shouldLog())
              {
                v87 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
                CCLogStream::logAlert(v87, "[dk] %s@%d:Error parsing reportScanPwrStats6E\n");
              }
            }
            goto LABEL_193;
          }
LABEL_89:
          v93[0] = 0;
          if (AppleBCMWLANCore::safe_align_up((AppleBCMWLANCore *)this, v4 + v10 + 4, 4uLL, v93))
          {
            if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
            {
              ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
              if (CCLogStream::shouldLog())
              {
                int v65 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
                CCLogStream::logAlert(v65, "[dk] %s@%d:safe_align_up failed\n");
              }
            }
            goto LABEL_129;
          }
          unint64_t v4 = v93[0];
          if (v93[0] >= 0xFFFF)
          {
            if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
            {
              ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
              if (CCLogStream::shouldLog())
              {
                __int16 v76 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
                CCLogStream::logAlert(v76, "[dk] %s@%d:UINT16_MAX overflow nextAlignedIndex\n");
              }
            }
LABEL_129:
            uint64_t v67 = 3758097084;
            goto LABEL_130;
          }
          ((void (*)(OSData *))v13->release)(v13);
          if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
          {
            ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v54 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
              CCLogStream::logInfoIf(v54, 0x2000000000uLL, "[dk] %s@%d:parsePerSliceContainer: index %d\n", "parsePerSliceContainer", 29604, v4);
            }
          }
          int v6 = (unsigned __int16)v4;
          if (OSData::getLength(a2) <= v4) {
            goto LABEL_95;
          }
          continue;
        }
        uint64_t v67 = v43;
        if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
        {
          ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
          if (CCLogStream::shouldLog())
          {
            __int16 v70 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
            CCLogStream::logAlert(v70, "[dk] %s@%d:Error parsing reportSlicesScanPwrStats6E\n");
          }
        }
LABEL_193:
        LOWORD(v5) = 798;
LABEL_130:
        uint64_t v56 = v92;
LABEL_131:
        if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
        {
          ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
          if (CCLogStream::shouldLog())
          {
            __int16 v74 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
            CCLogStream::logEmergency(v74, "[dk] %s@%d:Failed to parse Event Log Record xtlv %x\n", "parsePerSliceContainer", 29647, (unsigned __int16)v5);
          }
        }
        AppleBCMWLANCore::is4387C0(this);
        __int16 v58 = v91;
        if (v13) {
          ((void (*)(OSData *))v13->release)(v13);
        }
LABEL_98:
        if (v58) {
          IOFreeData();
        }
        if (v56) {
          IOFreeData();
        }
        return v67;
      default:
        if (v5 != 1)
        {
LABEL_103:
          uint64_t v67 = 3758097084;
          if (!((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this)) {
            goto LABEL_130;
          }
          ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
          uint64_t v56 = v92;
          if (CCLogStream::shouldLog())
          {
            unsigned int v60 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
            CCLogStream::logAlert(v60, "[dk] %s@%d:parsePerSliceContainer: Invalid tag id %d\n", "parsePerSliceContainer", 29587, v5);
          }
          goto LABEL_131;
        }
        if (v10 != 1)
        {
          uint64_t v67 = 3758097084;
          if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
          {
            ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
            LOWORD(v5) = 1;
            uint64_t v56 = v92;
            if (!CCLogStream::shouldLog()) {
              goto LABEL_131;
            }
            __int16 v68 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
            CCLogStream::logAlert(v68, "[dk] %s@%d:Incorrect len for sliceIndex %d\n");
            goto LABEL_177;
          }
LABEL_178:
          LOWORD(v5) = 1;
          goto LABEL_130;
        }
        long long v15 = (unsigned __int8 *)OSData::getBytesNoCopy(a2, (v6 + 4), 1uLL);
        if (!v15)
        {
          uint64_t v67 = 3758097084;
          if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
          {
            ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
            LOWORD(v5) = 1;
            uint64_t v56 = v92;
            if (!CCLogStream::shouldLog()) {
              goto LABEL_131;
            }
            int v69 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
            CCLogStream::logAlert(v69, "[dk] %s@%d:Bad read at index %d\n");
            goto LABEL_177;
          }
          goto LABEL_178;
        }
        uint64_t v7 = *v15;
        if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
        {
          ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v55 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
            CCLogStream::logInfoIf(v55, 0x2000000000uLL, "[dk] %s@%d:WL_IFSTATS_XTLV_SLICE_INDEX %d\n", "parsePerSliceContainer", 29436, v7);
          }
        }
        if (v7 > 2
          || (!AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 76) ? (unsigned int v16 = 2) : (unsigned int v16 = 3),
              v7 >= v16))
        {
          uint64_t v67 = 3758097084;
          if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
          {
            ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
            LOWORD(v5) = 1;
            uint64_t v56 = v92;
            if (!CCLogStream::shouldLog()) {
              goto LABEL_131;
            }
            __int16 v66 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
            CCLogStream::logAlert(v66, "[dk] %s@%d:Invalid slice index\n");
LABEL_177:
            LOWORD(v5) = 1;
            goto LABEL_131;
          }
          goto LABEL_178;
        }
        goto LABEL_89;
    }
  }
}

uint64_t AppleBCMWLANCore::parseIFStatsContainer(AppleBCMWLANCore *this, OSData *a2)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      signed int v42 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logInfoIf(v42, 0x2000000000uLL, "[dk] %s@%d:parseIFStatsContainer\n", "parseIFStatsContainer", 32543);
    }
  }
  if (!OSData::getLength(a2)) {
    return 0;
  }
  unint64_t v4 = 0;
  LOWORD(v5) = 0;
  int v6 = 0;
  unsigned int v7 = 3;
  while (2)
  {
    if (OSData::getLength(a2) - v4 < 5) {
      return 0;
    }
    if (((unint64_t)OSData::getBytesNoCopy(a2) & 3) != 0)
    {
      unsigned int v53 = -536870212;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v36 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v36, "[dk] %s@%d:Buffer not aligned\n");
        }
      }
      goto LABEL_102;
    }
    BytesNoCopy = (unsigned __int16 *)OSData::getBytesNoCopy(a2, v4, 4uLL);
    if (!BytesNoCopy)
    {
      unsigned int v53 = -536870212;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v37 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v37, "[dk] %s@%d:Bad read at index %d\n");
        }
      }
      goto LABEL_102;
    }
    uint64_t v9 = BytesNoCopy;
    size_t v10 = BytesNoCopy[1];
    size_t Length = OSData::getLength(a2);
    size_t v12 = (v6 + 4);
    if (Length - v12 < v10)
    {
      unsigned int v53 = -536870212;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v38 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v38, "[dk] %s@%d:Insufficient containerLength %d index %d\n");
        }
      }
      goto LABEL_102;
    }
    uint64_t v13 = (void *)OSData::getBytesNoCopy(a2, v12, v10);
    if (!v13)
    {
      unsigned int v53 = -536870212;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v39 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v39, "[dk] %s@%d:Bad payloadStart\n");
        }
      }
      goto LABEL_102;
    }
    OSDataPtr v14 = OSData::withBytesNoCopy(v13, v10);
    if (!v14)
    {
      unsigned int v53 = -536870212;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          __int16 v62 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v62, "[dk] %s@%d:Bad xtlvContainerPayload\n");
        }
      }
LABEL_102:
      long long v15 = 0;
      goto LABEL_70;
    }
    long long v15 = v14;
    int v5 = *v9;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v31 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logInfoIf(v31, 0x2000000000uLL, "[dk] %s@%d:parseIFStatsContainer xtlv index %d id %x length %d\n", "parseIFStatsContainer", 32565, v6, *v9, v9[1]);
      }
    }
    switch(v5)
    {
      case 1282:
        if (v7 >= 3)
        {
          unsigned int v53 = -536870212;
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v44 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v44, "[dk] %s@%d:Invalid interface index %d\n");
            }
          }
        }
        else if (v10 == 184)
        {
          unsigned int v17 = AppleBCMWLANCore::convertInfraGenericStatisticsToApple80211Counters(this, v15, v7);
          if (!v17)
          {
            unsigned int v18 = *(AppleBCMWLANLQM **)(*((void *)this + 9) + 5608);
            if (v18 && !v7)
            {
              unsigned int updated = AppleBCMWLANLQM::updateInfraGenericStatistics(v18, v15);
              if (!updated) {
                goto LABEL_48;
              }
              unsigned int v53 = updated;
              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
              {
                (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                if (CCLogStream::shouldLog())
                {
                  int v65 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                  CCLogStream::logAlert(v65, "[dk] %s@%d:Error updating updateInfraGenericStatistics\n");
                }
              }
              goto LABEL_153;
            }
            goto LABEL_16;
          }
          unsigned int v53 = v17;
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              __int16 v50 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v50, "[dk] %s@%d:Error convertInfraGenericStatisticsToApple80211Counters\n");
            }
          }
        }
        else
        {
          unsigned int v53 = -536870212;
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              signed int v47 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v47, "[dk] %s@%d:xtlv_payload %hu is not equal to sizeof(wl_if_stats_t) %lu\n");
            }
          }
        }
LABEL_153:
        LOWORD(v5) = 1282;
        goto LABEL_70;
      case 1283:
        if (v7 >= 3)
        {
          unsigned int v53 = -536870212;
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              int v45 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v45, "[dk] %s@%d:Invalid interface index %d\n");
            }
          }
LABEL_86:
          LOWORD(v5) = 1283;
          goto LABEL_70;
        }
        int v20 = *(unsigned __int16 *)OSData::getBytesNoCopy(v15);
        if (v20 == 2)
        {
          if ((v10 - 29) <= 0xFFFFFFF6)
          {
            unsigned int v53 = -536870212;
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (CCLogStream::shouldLog())
              {
                __int16 v58 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                CCLogStream::logAlert(v58, "[dk] %s@%d:xtlv_payload %hu is not equal to sizeof(wl_if_infra_enh_stats_v2_t) %lu\n");
              }
            }
            goto LABEL_86;
          }
        }
        else
        {
          if (v20 != 1)
          {
            unsigned int v53 = -536870212;
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (CCLogStream::shouldLog())
              {
                unsigned int v61 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                CCLogStream::logAlert(v61, "[dk] %s@%d:unsupported infra status version %d");
              }
            }
            goto LABEL_86;
          }
          if (v10 != 12)
          {
            unsigned int v53 = -536870212;
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (CCLogStream::shouldLog())
              {
                long long v57 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                CCLogStream::logAlert(v57, "[dk] %s@%d:xtlv_payload %hu is not equal to sizeof(wl_if_infra_stats_t) %lu\n");
              }
            }
            goto LABEL_86;
          }
        }
        uint64_t v26 = *(void *)(*((void *)this + 9) + 5608);
        if (v26) {
          AppleBCMWLANLQM::setInfraSpecificStatsVersion(v26, v20);
        }
        unsigned int v27 = AppleBCMWLANCore::convertInfraSpecificStatisticsToApple80211Counters(this, v15);
        if (v27)
        {
          unsigned int v53 = v27;
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v54 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v54, "[dk] %s@%d:Error convertInfraSpecificStatisticsToApple80211Counters\n");
            }
          }
          goto LABEL_86;
        }
        uint64_t v28 = *((void *)this + 9);
        uint64_t v29 = *(AppleBCMWLANLQM **)(v28 + 5608);
        if (v29 && !v7)
        {
          unsigned int v30 = AppleBCMWLANLQM::updateInfraSpecificStatistics(v29, v15);
          if (v30)
          {
            unsigned int v53 = v30;
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (CCLogStream::shouldLog())
              {
                unsigned int v59 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                CCLogStream::logAlert(v59, "[dk] %s@%d:Error updating updateInfraSpecificStatistics\n");
              }
            }
            goto LABEL_86;
          }
          uint64_t v28 = *((void *)this + 9);
        }
        if (*(unsigned char *)(v28 + 19756)) {
          AppleBCMWLANCore::updateTrafficInactivityBeaconStats(this, v15);
        }
        goto LABEL_16;
      case 1284:
        if (v7 >= 3)
        {
          unsigned int v53 = -536870212;
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v46 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v46, "[dk] %s@%d:Invalid interface index %d\n");
            }
          }
          goto LABEL_157;
        }
        if (v10 != 108)
        {
          unsigned int v53 = -536870212;
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v48 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v48, "[dk] %s@%d:xtlv_payload %hu is not equal to sizeof(wl_if_mgt_stats_t) %lu\n");
            }
          }
          goto LABEL_157;
        }
        unsigned int v21 = AppleBCMWLANCore::convertInfraControlManagementStatisticsToApple80211Counters(this, v15, v7);
        if (v21)
        {
          unsigned int v53 = v21;
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              unsigned int v51 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v51, "[dk] %s@%d:Error convertInfraControlManagementStatisticsToApple80211Counters\n");
            }
          }
          goto LABEL_157;
        }
        uint64_t v22 = *(AppleBCMWLANLQM **)(*((void *)this + 9) + 5608);
        if (v22 && !v7)
        {
          unsigned int v23 = AppleBCMWLANLQM::updateInfraControlManagementStatistics(v22, v15);
          if (!v23)
          {
LABEL_48:
            unsigned int v7 = 0;
            goto LABEL_16;
          }
          unsigned int v53 = v23;
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              __int16 v66 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v66, "[dk] %s@%d:Error parsing convertInfraControlManagementStatisticsToApple80211Counters\n");
            }
          }
LABEL_157:
          LOWORD(v5) = 1284;
          goto LABEL_70;
        }
        goto LABEL_16;
      case 1285:
      case 1286:
      case 1287:
      case 1288:
        goto LABEL_16;
      case 1289:
      case 1290:
      case 1292:
      case 1293:
        goto LABEL_79;
      case 1291:
        if (v7 < 3)
        {
          if (v10 != 88)
          {
            unsigned int v53 = -536870212;
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (CCLogStream::shouldLog())
              {
                unsigned int v49 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                CCLogStream::logAlert(v49, "[dk] %s@%d:xtlv_payload %hu is not equal to sizeof(wl_if_infra_stats_he_t) %lu\n");
              }
            }
            goto LABEL_139;
          }
          unsigned int v24 = AppleBCMWLANCore::convertInfraSpecificHeStatisticsToApple80211Counters(this, v15);
          if (v24)
          {
            unsigned int v53 = v24;
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (CCLogStream::shouldLog())
              {
                uint64_t v63 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                CCLogStream::logAlert(v63, "[dk] %s@%d:Error convertInfraSpecificStatisticsToApple80211Counters\n");
              }
            }
            goto LABEL_139;
          }
LABEL_16:
          unint64_t v67 = 0;
          if (AppleBCMWLANCore::safe_align_up(this, v4 + v10 + 4, 4uLL, &v67))
          {
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (CCLogStream::shouldLog())
              {
                uint64_t v40 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                CCLogStream::logAlert(v40, "[dk] %s@%d:safe_align_up failed\n");
              }
            }
            goto LABEL_82;
          }
          unint64_t v4 = v67;
          if (v67 >= 0xFFFF)
          {
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (CCLogStream::shouldLog())
              {
                uint64_t v41 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                CCLogStream::logAlert(v41, "[dk] %s@%d:UINT16_MAX overflow nextAlignedIndex\n");
              }
            }
LABEL_82:
            unsigned int v53 = 0;
            goto LABEL_70;
          }
          ((void (*)(OSData *))v15->release)(v15);
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v32 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logInfoIf(v32, 0x2000000000uLL, "[dk] %s@%d:parseIFStatsContainer: index %d\n", "parseIFStatsContainer", 32677, v4);
            }
          }
          int v6 = (unsigned __int16)v4;
          if (OSData::getLength(a2) <= v4) {
            return 0;
          }
          continue;
        }
        unsigned int v53 = -536870212;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v43 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v43, "[dk] %s@%d:Invalid interface index %d\n");
          }
        }
LABEL_139:
        LOWORD(v5) = 1291;
LABEL_70:
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v55 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logEmergency(v55, "[dk] %s@%d:Failed to parse Event Log Record xtlv %x\n", "parseIFStatsContainer", 32684, (unsigned __int16)v5);
          }
        }
        if (v53) {
          uint64_t v34 = v53;
        }
        else {
          uint64_t v34 = 3758097084;
        }
        if (v15) {
          ((void (*)(OSData *))v15->release)(v15);
        }
        return v34;
      case 1294:
        unsigned int v25 = AppleBCMWLANCore::parsePeerStatsGlobalContainer(this, v7, v15);
        if (!v25) {
          goto LABEL_16;
        }
        unsigned int v53 = v25;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v56 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logEmergency(v56, "[dk] %s@%d:Failed to parse Event Log Record xtlv %x\n", "parseIFStatsContainer", 32666, v5);
          }
        }
        LOWORD(v5) = 1294;
        goto LABEL_70;
      default:
        if (v5 != 2)
        {
LABEL_79:
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              unsigned int v60 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v60, "[dk] %s@%d:Invalid tag id %u\n");
            }
          }
          goto LABEL_82;
        }
        unsigned int v16 = (unsigned __int8 *)OSData::getBytesNoCopy(v15, 0, 1uLL);
        if (!v16)
        {
          unsigned int v53 = -536870212;
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              int v52 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v52, "[dk] %s@%d:Bad read ifPtr\n");
            }
          }
LABEL_146:
          LOWORD(v5) = 2;
          goto LABEL_70;
        }
        unsigned int v7 = *v16;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v33 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logInfoIf(v33, 0x2000000000uLL, "[dk] %s@%d:WL_IFSTATS_XTLV_IF_INDEX %d\n", "parseIFStatsContainer", 32576, v7);
          }
        }
        if (v7 >= 3)
        {
          unsigned int v53 = -536870212;
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              __int16 v64 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v64, "[dk] %s@%d:Invalid interface index %d\n");
            }
          }
          goto LABEL_146;
        }
        goto LABEL_16;
    }
  }
}

uint64_t AppleBCMWLANCore::parseAMPDUStatsGlobalContainer(AppleBCMWLANCore *this, OSData *a2)
{
  memset(bytes, 0, 260);
  memset(v99, 0, sizeof(v99));
  uint64_t v98 = 0;
  memset(__dst, 0, sizeof(__dst));
  if (OSData::getLength(a2))
  {
    unint64_t v4 = 0;
    uint64_t v92 = 0;
    int v91 = 0;
    unsigned __int16 v5 = 0;
    LODWORD(v6) = 0;
    int v7 = 0;
    uint64_t v8 = 0;
    uint64_t v90 = (_OWORD *)((unint64_t)v99 | 0xC);
    while (1)
    {
      if (OSData::getLength(a2) - v4 < 4) {
        return 0;
      }
      if (((unint64_t)OSData::getBytesNoCopy(a2) & 3) != 0)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v55 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v55, "[dk] %s@%d:Buffer not aligned\n");
          }
        }
        goto LABEL_148;
      }
      BytesNoCopy = (unsigned __int16 *)OSData::getBytesNoCopy(a2, v4, 4uLL);
      if (!BytesNoCopy)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v56 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v56, "[dk] %s@%d:Bad read at index %d\n");
          }
        }
        goto LABEL_148;
      }
      size_t v10 = BytesNoCopy;
      size_t v6 = BytesNoCopy[1];
      uint64_t v93 = v8;
      uint64_t v8 = (v8 + 4);
      if (OSData::getLength(a2) - v8 < v6)
      {
        __int16 v62 = this;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (!CCLogStream::shouldLog()) {
            goto LABEL_128;
          }
          long long v57 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          uint64_t v95 = v10[1];
          uint64_t v58 = *v10;
          size_t Length = OSData::getLength(a2);
          size_t v60 = OSData::getLength(a2) - v8;
          uint64_t v83 = v58;
          size_t v85 = Length;
          LODWORD(v8) = v93;
          uint64_t v82 = v93;
          uint64_t v80 = 30420;
          uint64_t v81 = v95;
          unsigned int v61 = "[dk] %s@%d:Insufficient xtlv->len %d index %d xtlv->id 0x%x payload->getLength() %d remainder %d\n";
          size_t v86 = v60;
          goto LABEL_177;
        }
LABEL_135:
        LODWORD(v8) = v93;
        goto LABEL_136;
      }
      int v11 = OSData::getBytesNoCopy(a2, v8, v6);
      if (v11) {
        BOOL v12 = 1;
      }
      else {
        BOOL v12 = v6 == 0;
      }
      if (!v12)
      {
        __int16 v62 = this;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (!CCLogStream::shouldLog())
          {
LABEL_128:
            LODWORD(v8) = v93;
            goto LABEL_148;
          }
          long long v57 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          uint64_t v75 = v10[1];
          size_t v76 = *v10;
          size_t v86 = OSData::getLength(a2);
          uint64_t v87 = v8;
          LODWORD(v8) = v93;
          uint64_t v83 = v93;
          size_t v85 = v76;
          uint64_t v81 = 0;
          uint64_t v82 = v75;
          unsigned int v61 = "[dk] %s@%d:payloadStart valid %d xtlv->len %d index %d xtlv->id 0x%x payload->getLength() %d index + BCM"
                "_XTLV_HDR_SIZE %d\n";
          uint64_t v80 = 30424;
LABEL_177:
          CCLogStream::logAlert(v57, v61, "parseAMPDUStatsGlobalContainer", v80, v81, v82, v83, v85, v86, v87);
          goto LABEL_148;
        }
        goto LABEL_135;
      }
      int v94 = *v10;
      uint64_t v13 = (v94 - 16);
      if (v13 > 0x3A) {
        goto LABEL_114;
      }
      if (((1 << (v94 - 16)) & 0x7FFC0001FFFFC0FLL) != 0) {
        break;
      }
      unsigned int v23 = v11;
      if (((1 << (v94 - 16)) & 0x300) != 0)
      {
        if (v6)
        {
          if (!v11)
          {
            __int16 v62 = this;
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (!CCLogStream::shouldLog()) {
                goto LABEL_153;
              }
              uint64_t v78 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              OSData::getLength(a2);
              LODWORD(v8) = v93;
              CCLogStream::logAlert(v78, "[dk] %s@%d:Bad payloadStart xtlv->len %d index %d xtlv->id 0x%x payload->getLength() %d index + BCM_XTLV_HDR_SIZE %d\n", "parseAMPDUStatsGlobalContainer");
LABEL_116:
              int v7 = v94;
LABEL_148:
              uint64_t v53 = 3758097084;
              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
              {
                (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                if (CCLogStream::shouldLog())
                {
                  __int16 v68 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                  CCLogStream::logAlert(v68, "[dk] %s@%d:Goto fail last tag %x length %d index %d\n", "parseAMPDUStatsGlobalContainer", 30656, v7, v6, v8);
                }
              }
              return v53;
            }
            LODWORD(v8) = v93;
            int v7 = v94;
LABEL_136:
            this = v62;
            goto LABEL_148;
          }
          if (v6 >= 0x111)
          {
            LODWORD(v8) = v93;
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (CCLogStream::shouldLog())
              {
                int v69 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                CCLogStream::logAlert(v69, "[dk] %s@%d:containerLength too long %u\n");
              }
            }
            goto LABEL_116;
          }
          LODWORD(v8) = v93;
          if (v6 < 8)
          {
            int v24 = 0;
          }
          else
          {
            int v24 = v11[1];
            if (v6 >= 0xC)
            {
              int v25 = v11[2];
LABEL_83:
              size_t v33 = (v6 - 12);
              if (!v5)
              {
                *(_DWORD *)(((unint64_t)v99 | 0xC) + 0x100) = 0;
                *(_OWORD *)(((unint64_t)v99 | 0xC) + 0xE0) = 0u;
                *(_OWORD *)(((unint64_t)v99 | 0xC) + 0xF0) = 0u;
                *(_OWORD *)(((unint64_t)v99 | 0xC) + 0xC0) = 0u;
                *(_OWORD *)(((unint64_t)v99 | 0xC) + 0xD0) = 0u;
                *(_OWORD *)(((unint64_t)v99 | 0xC) + 0xA0) = 0u;
                *(_OWORD *)(((unint64_t)v99 | 0xC) + 0xB0) = 0u;
                *(_OWORD *)(((unint64_t)v99 | 0xC) + 0x80) = 0u;
                *(_OWORD *)(((unint64_t)v99 | 0xC) + 0x90) = 0u;
                *(_OWORD *)(((unint64_t)v99 | 0xC) + 0x60) = 0u;
                *(_OWORD *)(((unint64_t)v99 | 0xC) + 0x70) = 0u;
                *(_OWORD *)(((unint64_t)v99 | 0xC) + 0x40) = 0u;
                *(_OWORD *)(((unint64_t)v99 | 0xC) + 0x50) = 0u;
                *(_OWORD *)(((unint64_t)v99 | 0xC) + 0x20) = 0u;
                *(_OWORD *)(((unint64_t)v99 | 0xC) + 0x30) = 0u;
                _OWORD *v90 = 0u;
                *(_OWORD *)(((unint64_t)v99 | 0xC) + 0x10) = 0u;
                int v7 = v94;
                v99[0] = v94;
                v99[1] = v6;
                *(_DWORD *)&v99[2] = v24;
                *(_DWORD *)&v99[4] = v25;
                if (v6 < 0xD) {
                  goto LABEL_42;
                }
                if (v6 >= 0x10D)
                {
                  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                  {
                    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                    if (CCLogStream::shouldLog())
                    {
                      int v73 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                      CCLogStream::logAlert(v73, "[dk] %s@%d:Bad memory length xtlvLength %d aggregationDens.aggr_dist %lu\n", "parseAMPDUStatsGlobalContainer", 30568, v6, 268);
                    }
                  }
LABEL_153:
                  LODWORD(v8) = v93;
                  goto LABEL_116;
                }
                memcpy(v90, v11 + 3, v33);
                unsigned __int16 v5 = 1;
                int v7 = v94;
                goto LABEL_43;
              }
              if (v91 != v94)
              {
LABEL_157:
                if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                {
                  (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                  if (CCLogStream::shouldLog())
                  {
                    __int16 v70 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                    CCLogStream::logAlert(v70, "[dk] %s@%d:Slice types do not match\n");
                  }
                }
                goto LABEL_116;
              }
              *(_DWORD *)&v99[2] += v24;
              *(_DWORD *)&v99[4] += v25;
              if (v6 >= 0xD && v33 >= 4)
              {
                LODWORD(v34) = v33 >> 2;
                if (v33 >> 2 <= 1) {
                  uint64_t v34 = 1;
                }
                else {
                  uint64_t v34 = v34;
                }
                unsigned int v35 = v11 + 3;
                uint64_t v36 = (_DWORD *)((unint64_t)v99 | 0xC);
                do
                {
                  int v37 = *v35++;
                  *v36++ += v37;
                  --v34;
                }
                while (v34);
              }
LABEL_92:
              size_t v38 = v99[1];
              if (v6 > v99[1])
              {
                v99[1] = v6;
                size_t v38 = v6;
              }
              int v7 = v94;
              uint64_t v39 = OSData::withBytes(v99, v38 + 4);
              int v40 = AppleBCMWLANCore::parseEventLogRecordAMPDU(this, v39, v99[0], v99[1]);
              if (v39) {
                ((void (*)(OSData *))v39->release)(v39);
              }
              if (v40)
              {
                if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                {
                  (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                  if (CCLogStream::shouldLog())
                  {
                    int v71 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                    CCLogStream::logAlert(v71, "[dk] %s@%d:Failed to parseEventLogRecordAMPDU\n");
                  }
                }
                goto LABEL_148;
              }
LABEL_48:
              unsigned __int16 v5 = 0;
              goto LABEL_49;
            }
          }
          int v25 = 0;
          goto LABEL_83;
        }
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v48 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            int v89 = v10[1];
            int v49 = *v10;
            int v50 = OSData::getLength(a2);
            int v51 = OSData::getLength(a2);
            CCLogStream::logInfoIf(v48, 0x2000000000uLL, "[dk] %s@%d:Zero containerLength currentSlice %d xtlv->len %d index %d xtlv->id 0x%x payload->getLength() %d remainder %d\n", "parseAMPDUStatsGlobalContainer", 30552, v5, v89, v93, v49, v50, v51 - v8);
          }
        }
        if (v5)
        {
          LODWORD(v8) = v93;
          if (v91 != v94) {
            goto LABEL_157;
          }
          goto LABEL_92;
        }
        LODWORD(v6) = 0;
        LODWORD(v8) = v93;
        int v7 = v94;
        v99[0] = v94;
        unsigned __int16 v5 = 1;
        int v91 = v94;
        memset(&v99[1], 0, 270);
      }
      else
      {
        if (v13 != 29)
        {
LABEL_114:
          if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            LODWORD(v8) = v93;
            int v7 = v94;
            goto LABEL_148;
          }
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          LODWORD(v8) = v93;
          if (CCLogStream::shouldLog())
          {
            __int16 v74 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            int v7 = v94;
            CCLogStream::logAlert(v74, "[dk] %s@%d:Unknown AMPDU stat type %d\n");
            goto LABEL_148;
          }
          goto LABEL_116;
        }
        if (v6 >= 0x58) {
          size_t v26 = 88;
        }
        else {
          size_t v26 = v6;
        }
        if (v26 <= 0x57) {
          size_t v27 = 88 - v26;
        }
        else {
          size_t v27 = 0;
        }
        bzero((char *)__dst + v26, v27);
        memcpy(__dst, v23, v26);
        int v28 = LOWORD(__dst[0]);
        if (LOWORD(__dst[0]) == 1)
        {
          int v29 = WORD1(__dst[0]);
          if (WORD1(__dst[0]) >= 0x59u)
          {
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (CCLogStream::shouldLog())
              {
                uint64_t v79 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                CCLogStream::logAlert(v79, "[dk] %s@%d:unexpected size %u\n", "parseAMPDUStatsGlobalContainer", 30613, v29);
              }
            }
            LODWORD(v8) = v93;
LABEL_170:
            int v7 = 45;
            goto LABEL_148;
          }
          unsigned int v30 = OSData::withBytesNoCopy(v23, v26);
          int updated = AppleBCMWLANLQM::updateSliceRxAmpduStats(*(AppleBCMWLANLQM **)(*((void *)this + 9) + 5608), v30, v5);
          int v32 = updated;
          if (v5 == *(unsigned __int8 *)(*((void *)this + 9) + 208))
          {
            LODWORD(v8) = v93;
            if (!updated) {
              int v32 = AppleBCMWLANCore::updateSlowWifiRxAmpduStats(this, v30);
            }
          }
          else
          {
            LODWORD(v8) = v93;
          }
          int v7 = v94;
          if (v30) {
            ((void (*)(OSData *))v30->release)(v30);
          }
          unsigned __int16 v5 = v5 == 0;
          if (v32)
          {
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (CCLogStream::shouldLog())
              {
                __int16 v72 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                CCLogStream::logAlert(v72, "[dk] %s@%d:Error updating updateSliceRxAmpduStats\n", "parseAMPDUStatsGlobalContainer", 30629);
              }
            }
            goto LABEL_170;
          }
        }
        else
        {
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              int v52 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v52, "[dk] %s@%d:unexpected version %u\n", "parseAMPDUStatsGlobalContainer", 30625, v28);
            }
          }
          unsigned __int16 v5 = v5 == 0;
          LODWORD(v8) = v93;
          int v7 = v94;
        }
      }
LABEL_49:
      unint64_t v96 = 0;
      if (AppleBCMWLANCore::safe_align_up(this, v4 + v6 + 4, 4uLL, &v96))
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v63 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v63, "[dk] %s@%d:safe_align_up failed\n");
          }
        }
        goto LABEL_148;
      }
      unint64_t v4 = v96;
      if (v96 >= 0xFFFF)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            __int16 v64 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v64, "[dk] %s@%d:UINT16_MAX overflow nextAlignedIndex\n");
          }
        }
        goto LABEL_148;
      }
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v41 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logInfoIf(v41, 0x2000000000uLL, "[dk] %s@%d:parseAMPDUStatsGlobalContainer: index %d\n", "parseAMPDUStatsGlobalContainer", 30647, v4);
        }
      }
      uint64_t v8 = (unsigned __int16)v4;
      if (OSData::getLength(a2) <= v4) {
        return 0;
      }
    }
    if (v6)
    {
      OSDataPtr v14 = (char *)OSData::getBytesNoCopy(a2, v4, v6);
      LODWORD(v8) = v93;
      unsigned __int16 v15 = v5;
      if (!v14)
      {
        uint64_t v65 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int v7 = v94;
        if (v65)
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            __int16 v66 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v66, "[dk] %s@%d:Bad ampduRateCntReport\n");
          }
        }
        goto LABEL_148;
      }
    }
    else
    {
      unsigned __int16 v15 = v5;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
        && ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
            CCLogStream::shouldLog()))
      {
        signed int v42 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int v88 = v10[1];
        int v43 = *v10;
        int v44 = OSData::getLength(a2);
        int v45 = OSData::getLength(a2) - v8;
        int v84 = v43;
        unsigned __int16 v15 = v5;
        LODWORD(v8) = v93;
        CCLogStream::logInfoIf(v42, 0x2000000000uLL, "[dk] %s@%d:Zero containerLength currentSlice %d xtlv->len %d index %d xtlv->id 0x%x payload->getLength() %d remainder %d\n", "parseAMPDUStatsGlobalContainer", 30477, v5, v88, v93, v84, v44, v45);
      }
      else
      {
        LODWORD(v8) = v93;
      }
      OSDataPtr v14 = v92;
    }
    int v7 = v94;
    uint64_t v92 = v14;
    if (!v15)
    {
      memset(&bytes[1], 0, 256);
      LOWORD(bytes[0]) = v94;
      unsigned __int16 v5 = 1;
      HIWORD(bytes[0]) = v6;
      if (v6 >= 5 && v14)
      {
        if (v6 >= 0x105)
        {
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              signed int v47 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v47, "[dk] %s@%d:Bad memory tag %d, length xtlvLength %d ampduRateCnt.counters %lu\n", "parseAMPDUStatsGlobalContainer", 30490, v94, v6, 256);
            }
          }
          LODWORD(v6) = 260;
          OSDataPtr v14 = v92;
        }
        memcpy(&bytes[1], v14 + 4, v6);
LABEL_42:
        unsigned __int16 v5 = 1;
      }
LABEL_43:
      int v91 = v7;
      goto LABEL_49;
    }
    if (v91 != v94)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unint64_t v67 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v67, "[dk] %s@%d:Slice types do not match\n");
        }
      }
      goto LABEL_148;
    }
    if (v6 >= 5 && v14)
    {
      if (v6 >= 0x105)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v46 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v46, "[dk] %s@%d:Bad memory tag %d length xtlvLength %d ampduRateCnt.counters %lu\n", "parseAMPDUStatsGlobalContainer", 30505, v94, v6, 256);
          }
        }
        LODWORD(v6) = 260;
        OSDataPtr v14 = v92;
      }
      uint64_t v16 = v6 >> 2;
      unsigned int v17 = (int *)(v14 + 4);
      unsigned int v18 = &bytes[1];
      do
      {
        int v19 = *v17++;
        *v18++ += v19;
        --v16;
      }
      while (v16);
      unsigned int v20 = HIWORD(bytes[0]);
      if (v6 > HIWORD(bytes[0]))
      {
        HIWORD(bytes[0]) = v6;
        unsigned int v20 = v6;
      }
    }
    else
    {
      unsigned int v20 = HIWORD(bytes[0]);
    }
    unsigned int v21 = OSData::withBytes(bytes, v20 + 4);
    int v22 = AppleBCMWLANCore::parseEventLogRecordAMPDU(this, v21, LOWORD(bytes[0]), HIWORD(bytes[0]));
    if (v21) {
      ((void (*)(OSData *))v21->release)(v21);
    }
    if (v22)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v77 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v77, "[dk] %s@%d:Failed to parseEventLogRecordAMPDU\n", "parseAMPDUStatsGlobalContainer", 30523);
        }
      }
      int v7 = v91;
      goto LABEL_148;
    }
    goto LABEL_48;
  }
  return 0;
}

uint64_t AppleBCMWLANCore::parseChanStatsGlobalContainer(AppleBCMWLANCore *this, OSData *a2)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      int v25 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logInfoIf(v25, 0x2000000000uLL, "[dk] %s@%d:parseChanStatsGlobalContainer\n", "parseChanStatsGlobalContainer", 29925);
    }
  }
  if (((unint64_t)OSData::getBytesNoCopy(a2) & 3) != 0)
  {
    uint64_t v17 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v24 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v24, "[dk] %s@%d:Buffer not aligned\n");
      }
    }
    return v17;
  }
  if (!OSData::getLength(a2)) {
    return 0;
  }
  uint64_t v4 = 0;
  int v5 = 0;
  while (1)
  {
    int v6 = v5;
    if (OSData::getLength(a2) - v4 < 5) {
      return 0;
    }
    BytesNoCopy = OSData::getBytesNoCopy(a2, v4, 4uLL);
    if (!BytesNoCopy)
    {
      uint64_t v17 = 3758097084;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog()) {
          goto LABEL_29;
        }
      }
      return v17;
    }
    uint64_t v8 = BytesNoCopy;
    size_t v9 = (unsigned __int16)BytesNoCopy[1];
    size_t Length = OSData::getLength(a2);
    size_t v11 = (unsigned __int16)v5 + 4;
    if (Length - v11 < v9)
    {
      uint64_t v17 = 3758097084;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v21 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v21, "[dk] %s@%d:Insufficient containerLength %d index %d\n");
        }
      }
      return v17;
    }
    if (*v8 != 1)
    {
      uint64_t v17 = 3758097084;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          int v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v19, "[dk] %s@%d:Unknown channel stat type %d\n");
        }
      }
      return v17;
    }
    BOOL v12 = OSData::getBytesNoCopy(a2, v11, 0x10uLL);
    if (!v12)
    {
      uint64_t v17 = 3758097084;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          int v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v22, "[dk] %s@%d:Bad chanCntrHdr\n");
        }
      }
      return v17;
    }
    uint64_t v13 = (uint64_t)v12;
    if (*v12 != 1)
    {
      uint64_t v17 = 3758097084;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v23 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v23, "[dk] %s@%d:Unexpected Version\n");
        }
      }
      return v17;
    }
    v5 += 20;
    if (OSData::getLength(a2) > (unsigned __int16)(v6 + 20) && OSData::getLength(a2) - (unsigned __int16)v5 >= 5) {
      break;
    }
LABEL_18:
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logInfoIf(v16, 0x2000000000uLL, "[dk] %s@%d:parseChanStatsGlobalContainer: index %d\n", "parseChanStatsGlobalContainer", 29970, (unsigned __int16)v5);
      }
    }
    uint64_t v4 = (unsigned __int16)v5;
    if (OSData::getLength(a2) <= (unsigned __int16)v5) {
      return 0;
    }
  }
  OSDataPtr v14 = OSData::getBytesNoCopy(a2, (unsigned __int16)v5, 4uLL);
  if (v14)
  {
    if (*v14 == 1)
    {
      unsigned __int16 v15 = (long long *)OSData::getBytesNoCopy(a2, (unsigned __int16)(v6 + 24), (unsigned __int16)v14[1]);
      int v5 = v6 + 72;
      AppleBCMWLANLQM::updateChanSeqCommonStats(*(void *)(*((void *)this + 9) + 5608), v13, v15);
    }
    goto LABEL_18;
  }
  uint64_t v17 = 3758097084;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
LABEL_29:
      unsigned int v20 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v20, "[dk] %s@%d:Bad read at index %d\n");
    }
  }
  return v17;
}

uint64_t AppleBCMWLANCore::parsePHYEcounter(AppleBCMWLANCore *this, OSData *a2)
{
  if (((unint64_t)OSData::getBytesNoCopy(a2) & 3) != 0)
  {
    uint64_t v5 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v8, "[dk] %s@%d:Buffer not aligned\n", "parsePHYEcounter", 31701);
      }
    }
  }
  else
  {
    BytesNoCopy = (unsigned __int16 *)OSData::getBytesNoCopy(a2);
    switch(*BytesNoCopy)
    {
      case 1u:
        AppleBCMWLANCore::parsePHYEcounterV1(this, a2);
        goto LABEL_13;
      case 2u:
        AppleBCMWLANCore::parsePHYEcounterV2(this, a2);
        goto LABEL_13;
      case 3u:
        AppleBCMWLANCore::parsePHYEcounterV3(this, a2);
        goto LABEL_13;
      case 4u:
        AppleBCMWLANCore::parsePHYEcounterV4(this, a2);
        goto LABEL_13;
      case 5u:
        AppleBCMWLANCore::parsePHYEcounterV5(this, a2);
        goto LABEL_13;
      case 6u:
        goto LABEL_5;
      case 7u:
        AppleBCMWLANCore::parsePHYEcounterV7(this, a2);
        goto LABEL_13;
      default:
        if (*BytesNoCopy == 255)
        {
LABEL_13:
          uint64_t v5 = 0;
        }
        else
        {
LABEL_5:
          uint64_t v5 = 3758097090;
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              int v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v6, "[dk] %s@%d:Unknown phy ecounter version %d\n", "parsePHYEcounter", 31726, *BytesNoCopy);
              uint64_t v5 = 3758097090;
            }
          }
        }
        break;
    }
  }
  return v5;
}

uint64_t AppleBCMWLANCore::parsePHYCalEcounter(AppleBCMWLANCore *this, OSData *a2)
{
  if (((unint64_t)OSData::getBytesNoCopy(a2) & 3) != 0)
  {
    uint64_t v6 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        size_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v9, "[dk] %s@%d:Buffer not aligned\n", "parsePHYCalEcounter", 32210);
      }
    }
  }
  else
  {
    BytesNoCopy = (unsigned __int16 *)OSData::getBytesNoCopy(a2);
    unsigned int v5 = *BytesNoCopy;
    if (v5 > 2)
    {
      if (v5 == 3)
      {
        AppleBCMWLANCore::parsePHYCalEcounterV3(this, a2);
        return 0;
      }
      if (v5 == 255) {
        return 0;
      }
    }
    else
    {
      if (v5 == 1)
      {
        AppleBCMWLANCore::parsePHYCalEcounterV1(this, a2);
        return 0;
      }
      if (v5 == 2)
      {
        AppleBCMWLANCore::parsePHYCalEcounterV2(this, a2);
        return 0;
      }
    }
    uint64_t v6 = 3758097090;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:Unknown phycal ecounter version %d\n", "parsePHYCalEcounter", 32226, *BytesNoCopy);
        return 3758097090;
      }
    }
  }
  return v6;
}

uint64_t AppleBCMWLANCore::parseDTIMEcounter(AppleBCMWLANCore *this, OSData *a2)
{
  if (((unint64_t)OSData::getBytesNoCopy(a2) & 3) != 0)
  {
    uint64_t v12 = 3758097084;
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
      return v12;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (!CCLogStream::shouldLog()) {
      return v12;
    }
LABEL_18:
    OSDataPtr v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    CCLogStream::logAlert(v14, "[dk] %s@%d:DTIMEcounter: Unexpected Version\n");
    return v12;
  }
  BytesNoCopy = OSData::getBytesNoCopy(a2);
  if (*(_WORD *)BytesNoCopy != 1)
  {
    uint64_t v12 = 3758097084;
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
      return v12;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (!CCLogStream::shouldLog()) {
      return v12;
    }
    goto LABEL_18;
  }
  if (*((_WORD *)BytesNoCopy + 1) == 32)
  {
    int v5 = BytesNoCopy[1];
    int v6 = BytesNoCopy[2];
    int v7 = BytesNoCopy[3];
    int v8 = BytesNoCopy[4];
    int v9 = BytesNoCopy[5];
    int v10 = BytesNoCopy[6];
    int v11 = BytesNoCopy[7];
    mach_continuous_time();
    absolutetime_to_nanoseconds();
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
      || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
          (CCLogStream::shouldLogConsole() & 1) == 0))
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67111426;
        int v18 = 73;
        __int16 v19 = 2080;
        unsigned int v20 = "parseDTIMEcounter";
        __int16 v21 = 1024;
        int v22 = 29318;
        __int16 v23 = 1024;
        int v24 = v5;
        __int16 v25 = 1024;
        int v26 = v6;
        __int16 v27 = 1024;
        int v28 = v7;
        __int16 v29 = 1024;
        int v30 = v8;
        __int16 v31 = 1024;
        int v32 = v9;
        __int16 v33 = 1024;
        int v34 = v10;
        __int16 v35 = 1024;
        int v36 = v11;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: DTIM missed count: p2p(%d), iovar(%d), scan(%d), roam(%d), homechan(%d), sleep(%d), misc(%d)", buf, 0x42u);
      }
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logInfo(v16, "[dk] %s@%d:DTIM missed count: p2p(%d), iovar(%d), scan(%d), roam(%d), homechan(%d), sleep(%d), misc(%d)", "parseDTIMEcounter", 29318, v5, v6, v7, v8, v9, v10, v11);
      }
    }
    uint64_t v12 = 0;
    AppleBCMWLANCore::parseDTIMEcounter(OSData *)::fLastLogDeltaDTIMMissedStats = mach_continuous_time();
  }
  else
  {
    uint64_t v12 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unsigned __int16 v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v15, "[dk] %s@%d:DTIMEcounter: Unexpected length\n");
      }
    }
  }
  return v12;
}

uint64_t AppleBCMWLANCore::parseXTLVMessage(OSDictionary *this, OSData *a2)
{
  if (a2 && ((unint64_t)OSData::getBytesNoCopy(a2) & 3) == 0)
  {
    BytesNoCopy = (unsigned __int16 *)OSData::getBytesNoCopy(a2, 0, 4uLL);
    uint64_t v5 = ((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
    if (BytesNoCopy)
    {
      if (v5)
      {
        ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v17 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
          CCLogStream::logInfoIf(v17, 0x2000000000uLL, "[dk] %s@%d:XTLV message. Version: %d Length %d\n", "parseXTLVMessage", 29343, *BytesNoCopy, BytesNoCopy[1]);
        }
      }
      size_t v6 = BytesNoCopy[1];
      if (OSData::getLength(a2) < v6)
      {
        if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
        {
          ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
          if (CCLogStream::shouldLog())
          {
            OSDataPtr v14 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
            OSData::getLength(a2);
            CCLogStream::logAlert(v14, "[dk] %s@%d:Insufficient payload->getLength() %d for response->length %d\n");
          }
        }
      }
      else
      {
        size_t v7 = BytesNoCopy[1];
        if (OSData::getLength(a2) - 4 < v7)
        {
          if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
          {
            ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
            if (CCLogStream::shouldLog())
            {
              unsigned __int16 v15 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
              CCLogStream::logAlert(v15, "[dk] %s@%d:Insufficient containerLength %d\n");
            }
          }
        }
        else
        {
          int v8 = (void *)OSData::getBytesNoCopy(a2, 4uLL, v7);
          if (v8)
          {
            int v9 = OSData::withBytesNoCopy(v8, v7);
            if (v9)
            {
              int v10 = v9;
              uint64_t v11 = AppleBCMWLANCore::parseXTLVContainers(this, v9);
              ((void (*)(OSData *))v10->release)(v10);
              return v11;
            }
            if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
            {
              ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
              if (CCLogStream::shouldLog())
              {
                int v18 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
                CCLogStream::logAlert(v18, "[dk] %s@%d:Bad xtlvContainerPayload\n");
              }
            }
          }
          else if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
          {
            ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v16 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
              CCLogStream::logAlert(v16, "[dk] %s@%d:Bad payloadStart\n");
            }
          }
        }
      }
    }
    else if (v5)
    {
      ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v13 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
        CCLogStream::logAlert(v13, "[dk] %s@%d:Bad read at response\n");
      }
    }
  }
  return 3758097084;
}

uint64_t AppleBCMWLANCore::parseV30CntContainer(AppleBCMWLANCore *a1, OSData *this, uint64_t a3, unsigned __int16 **a4)
{
  if (!OSData::getLength(this)) {
    return 0;
  }
  unint64_t v7 = 0;
  LOWORD(v8) = 0;
  int v9 = 0;
  while (2)
  {
    if (OSData::getLength(this) - v7 < 5) {
      return 0;
    }
    if (((unint64_t)OSData::getBytesNoCopy(this) & 3) != 0)
    {
      uint64_t v65 = 3758097084;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          unsigned int v61 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logAlert(v61, "[dk] %s@%d:Buffer not aligned\n");
        }
      }
      goto LABEL_124;
    }
    BytesNoCopy = OSData::getBytesNoCopy(this, v7, 4uLL);
    if (!BytesNoCopy)
    {
      uint64_t v65 = 3758097084;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          __int16 v62 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logAlert(v62, "[dk] %s@%d:Bad read at index %d size %d\n");
        }
      }
      goto LABEL_124;
    }
    uint64_t v11 = BytesNoCopy;
    size_t v12 = (unsigned __int16)BytesNoCopy[1];
    if (OSData::getLength(this) - (v9 + 4) < v12)
    {
      uint64_t v65 = 3758097084;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          size_t v85 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          OSData::getLength(this);
          OSData::getLength(this);
          CCLogStream::logAlert(v85, "[dk] %s@%d:Insufficient xtlv->len %d index %d xtlv->id 0x%x payload->getLength() %d remainder %d\n", "parseV30CntContainer");
        }
      }
      goto LABEL_124;
    }
    uint64_t v13 = (void *)OSData::getBytesNoCopy(this, (v9 + 4), v12);
    if (!v13)
    {
      uint64_t v65 = 3758097084;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v63 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          OSData::getLength(this);
          CCLogStream::logAlert(v63, "[dk] %s@%d:Bad payloadStart xtlv->len %d index %d xtlv->id 0x%x payload->getLength() %d index + BCM_XTLV_HDR_SIZE %d\n", "parseV30CntContainer");
        }
      }
      goto LABEL_124;
    }
    OSDataPtr v14 = OSData::withBytesNoCopy(v13, v12);
    if (!v14)
    {
      uint64_t v65 = 3758097084;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          __int16 v74 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logAlert(v74, "[dk] %s@%d:Bad xtlvContainerPayload index %d xtlv->len %d xtlv->id 0x%x\n");
        }
      }
LABEL_124:
      unsigned __int16 v15 = 0;
      goto LABEL_135;
    }
    unsigned __int16 v15 = v14;
    unsigned int v8 = (unsigned __int16)*v11;
    if (v8 <= 0x8FF)
    {
      if ((unsigned __int16)*v11 <= 0x1FFu)
      {
        switch(*v11)
        {
          case 0x100:
            uint64_t v17 = *((void *)a1 + 9);
            int v18 = *(AppleBCMWLANIOReporting **)(v17 + 5520);
            if (!v18) {
              goto LABEL_22;
            }
            if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 76)) {
              int v19 = 3;
            }
            else {
              int v19 = 2;
            }
            uint64_t v20 = AppleBCMWLANIOReportingPerSlice::reportWlCntPerSlice(v18, v15, a3, a4, v19);
            if (v20)
            {
              uint64_t v65 = v20;
              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
              {
                (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  unint64_t v67 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                  CCLogStream::logAlert(v67, "[dk] %s@%d:Error parsing reportWlCntPerSlice\n");
                }
              }
            }
            else
            {
              uint64_t v17 = *((void *)a1 + 9);
LABEL_22:
              if (a3) {
                goto LABEL_54;
              }
              __int16 v21 = *(AppleBCMWLANLQM **)(v17 + 5608);
              if (!v21) {
                goto LABEL_54;
              }
              uint64_t updated = AppleBCMWLANLQM::updateAdditionalRxCounters(v21, v15);
              if (!updated) {
                goto LABEL_54;
              }
              uint64_t v65 = updated;
              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
              {
                (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v77 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                  CCLogStream::logAlert(v77, "[dk] %s@%d:Error parsing updateExtraRxCounters\n");
                }
              }
            }
            LOWORD(v8) = 256;
            goto LABEL_135;
          case 0x101:
            goto LABEL_52;
          case 0x102:
LABEL_33:
            if (a3 == 2 || !v12) {
              goto LABEL_54;
            }
            __int16 v23 = *(AppleBCMWLANIOReporting **)(*((void *)a1 + 9) + 5520);
            if (v23)
            {
              uint64_t v24 = AppleBCMWLANIOReportingPerSlice::reportHeCntPerSlice(v23, v15, a3);
              if (v24)
              {
                uint64_t v65 = v24;
                if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
                {
                  (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                  if (CCLogStream::shouldLog())
                  {
                    __int16 v68 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                    CCLogStream::logAlert(v68, "[dk] %s@%d:Error parsing reportHeCntPerSlice\n");
                  }
                }
                goto LABEL_135;
              }
            }
            AppleBCMWLANCore::setHeStats(a1, v15, a3);
            goto LABEL_54;
          case 0x103:
            goto LABEL_106;
          case 0x104:
LABEL_38:
            if (!v12) {
              goto LABEL_54;
            }
            __int16 v25 = *(AppleBCMWLANIOReporting **)(*((void *)a1 + 9) + 5520);
            if (v25)
            {
              uint64_t v26 = AppleBCMWLANIOReportingPerSlice::reportOmiCntPerSlice(v25, v15, a3);
              if (v26)
              {
                uint64_t v65 = v26;
                if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
                {
                  (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                  if (CCLogStream::shouldLog())
                  {
                    __int16 v66 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                    CCLogStream::logAlert(v66, "[dk] %s@%d:Error parsing reportOmiCntPerSlice\n");
                  }
                }
                goto LABEL_135;
              }
            }
            AppleBCMWLANCore::setOmiStats(a1, v15, a3);
            goto LABEL_54;
          default:
            if (v8 == 1) {
              goto LABEL_52;
            }
            goto LABEL_106;
        }
      }
      if ((unsigned __int16)*v11 <= 0x3FFu)
      {
        if (v8 != 512 && v8 != 768)
        {
LABEL_106:
          uint64_t v65 = 3758097084;
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              size_t v60 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              CCLogStream::logAlert(v60, "[dk] %s@%d:parseV30CntContainer: Invalid tag id %d\n");
            }
          }
          goto LABEL_135;
        }
        goto LABEL_52;
      }
      if (v8 != 1024)
      {
        if (v8 != 2048) {
          goto LABEL_106;
        }
LABEL_52:
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
LABEL_103:
            uint64_t v58 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logInfo(v58, "[dk] %s@%d:tag id %d Not implemented \n");
          }
        }
        goto LABEL_54;
      }
      char IsBitSet = AppleBCMWLANCore::featureFlagIsBitSet(a1, 76);
      if a3 == 2 && (IsBitSet) {
        goto LABEL_54;
      }
      uint64_t v30 = *((void *)a1 + 9);
      __int16 v31 = *(AppleBCMWLANIOReporting **)(v30 + 5520);
      if (v31)
      {
        uint64_t v32 = AppleBCMWLANIOReportingPerSlice::reportUcodeCntPerSlice(v31, v15, a3, 0, (uint64_t)a4);
        if (v32)
        {
          uint64_t v65 = v32;
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              int v69 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              CCLogStream::logAlert(v69, "[dk] %s@%d:Error parsing reportUcodeCntPerSlice\n");
            }
          }
          goto LABEL_159;
        }
        uint64_t v30 = *((void *)a1 + 9);
      }
      __int16 v33 = *(AppleBCMWLANLQM **)(v30 + 5608);
      if (!v33) {
        goto LABEL_54;
      }
      uint64_t v34 = AppleBCMWLANLQM::updateSliceUcodeStatistics(v33, v15, a3, 1);
      if (!v34) {
        goto LABEL_54;
      }
      uint64_t v65 = v34;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v78 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logAlert(v78, "[dk] %s@%d:Error updating SliceUcodeStatistics\n");
        }
      }
LABEL_159:
      LOWORD(v8) = 1024;
      goto LABEL_135;
    }
    switch(*v11)
    {
      case 0x1000:
        goto LABEL_52;
      case 0x1001:
      case 0x1002:
      case 0x1003:
      case 0x1004:
      case 0x1005:
      case 0x1006:
      case 0x1007:
      case 0x1008:
      case 0x1009:
      case 0x100A:
      case 0x100D:
      case 0x100E:
      case 0x100F:
      case 0x1010:
      case 0x1011:
      case 0x1012:
        goto LABEL_106;
      case 0x100B:
      case 0x100C:
      case 0x1019:
        if (a3) {
          goto LABEL_54;
        }
        uint64_t v16 = AppleBCMWLANLQM::updateDynBwStats(*(AppleBCMWLANLQM **)(*((void *)a1 + 9) + 5608), (unsigned __int16)*v11, v14);
        if (!v16) {
          goto LABEL_54;
        }
        uint64_t v65 = v16;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            size_t v76 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logEmergency(v76, "[dk] %s@%d:Failed to parse Event Log Record xtlv %x\n", "parseV30CntContainer", 29881, v8);
          }
        }
        goto LABEL_135;
      case 0x1013:
        int v35 = AppleBCMWLANCore::featureFlagIsBitSet(a1, 76);
        if (a3 == 2 && v35)
        {
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              int v36 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              CCLogStream::logAlert(v36, "[dk] %s@%d:parseV30CntContainer TLV on slice 2\n", "parseV30CntContainer", 29827);
            }
          }
          goto LABEL_54;
        }
        uint64_t v47 = *((void *)a1 + 9);
        uint64_t v48 = *(AppleBCMWLANIOReporting **)(v47 + 5520);
        if (!v48) {
          goto LABEL_94;
        }
        uint64_t v49 = AppleBCMWLANIOReportingPerSlice::reportUcodeCntPerSlice(v48, v15, a3, 3, (uint64_t)a4);
        if (v49)
        {
          uint64_t v65 = v49;
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              __int16 v70 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              CCLogStream::logAlert(v70, "[dk] %s@%d:Error parsing reportUcodeCntPerSlice\n");
            }
          }
        }
        else
        {
          uint64_t v47 = *((void *)a1 + 9);
LABEL_94:
          int v50 = *(AppleBCMWLANLQM **)(v47 + 5608);
          if (!v50) {
            goto LABEL_54;
          }
          uint64_t v51 = AppleBCMWLANLQM::updateSliceUcodeStatistics(v50, v15, a3, 6);
          if (!v51) {
            goto LABEL_54;
          }
          uint64_t v65 = v51;
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v80 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              CCLogStream::logAlert(v80, "[dk] %s@%d:Error updating SliceUcodeStatistics\n");
            }
          }
        }
        LOWORD(v8) = 4115;
        goto LABEL_135;
      case 0x1014:
        int v39 = AppleBCMWLANCore::featureFlagIsBitSet(a1, 76);
        if (a3 == 2 && v39)
        {
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              int v40 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              CCLogStream::logInfo(v40, "[dk] %s@%d:parseV30CntContainer TLV on slice 2 ignored\n");
            }
          }
          goto LABEL_54;
        }
        uint64_t v52 = *((void *)a1 + 9);
        uint64_t v53 = *(AppleBCMWLANIOReporting **)(v52 + 5520);
        if (!v53) {
          goto LABEL_100;
        }
        uint64_t v54 = AppleBCMWLANIOReportingPerSlice::reportUcodeCntPerSlice(v53, v15, a3, 2, (uint64_t)a4);
        if (v54)
        {
          uint64_t v65 = v54;
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              int v71 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              CCLogStream::logAlert(v71, "[dk] %s@%d:Error parsing reportUcodeCntPerSlice\n");
            }
          }
        }
        else
        {
          uint64_t v52 = *((void *)a1 + 9);
LABEL_100:
          uint64_t v55 = *(AppleBCMWLANLQM **)(v52 + 5608);
          if (!v55) {
            goto LABEL_54;
          }
          uint64_t v56 = AppleBCMWLANLQM::updateSliceUcodeStatistics(v55, v15, a3, 4);
          if (!v56) {
            goto LABEL_54;
          }
          uint64_t v65 = v56;
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v81 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              CCLogStream::logAlert(v81, "[dk] %s@%d:Error updating SliceUcodeStatistics\n");
            }
          }
        }
        LOWORD(v8) = 4116;
        goto LABEL_135;
      case 0x1015:
        if (a3 == 2) {
          goto LABEL_54;
        }
        int v37 = *(AppleBCMWLANLQM **)(*((void *)a1 + 9) + 5608);
        if (!v37) {
          goto LABEL_54;
        }
        uint64_t v38 = AppleBCMWLANLQM::updateSliceUcodeRxErr(v37, v15, a3, 4117);
        if (!v38) {
          goto LABEL_54;
        }
        uint64_t v65 = v38;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v79 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logAlert(v79, "[dk] %s@%d:Error updateSliceUcodeRxErr\n", "parseV30CntContainer", 29796);
          }
        }
        LOWORD(v8) = 4117;
        goto LABEL_135;
      case 0x1016:
        goto LABEL_38;
      case 0x1017:
      case 0x1018:
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog()) {
            goto LABEL_103;
          }
        }
        goto LABEL_54;
      case 0x101A:
        goto LABEL_54;
      case 0x101B:
        goto LABEL_33;
      default:
        if (v8 == 2304)
        {
          char v41 = AppleBCMWLANCore::featureFlagIsBitSet(a1, 76);
          if a3 == 2 && (v41) {
            goto LABEL_54;
          }
          uint64_t v42 = *((void *)a1 + 9);
          int v43 = *(AppleBCMWLANIOReporting **)(v42 + 5520);
          if (v43)
          {
            uint64_t v44 = AppleBCMWLANIOReportingPerSlice::reportUcodeCntPerSlice(v43, v15, a3, 1, (uint64_t)a4);
            if (v44)
            {
              uint64_t v65 = v44;
              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
              {
                (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  __int16 v72 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                  CCLogStream::logAlert(v72, "[dk] %s@%d:Error parsing reportUcodeCntPerSlice\n");
                }
              }
              goto LABEL_188;
            }
            uint64_t v42 = *((void *)a1 + 9);
          }
          int v45 = *(AppleBCMWLANLQM **)(v42 + 5608);
          if (!v45) {
            goto LABEL_54;
          }
          uint64_t v46 = AppleBCMWLANLQM::updateSliceUcodeStatistics(v45, v15, a3, 3);
          if (!v46) {
            goto LABEL_54;
          }
          uint64_t v65 = v46;
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v83 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              CCLogStream::logAlert(v83, "[dk] %s@%d:Error updating SliceUcodeStatistics\n");
            }
          }
LABEL_188:
          LOWORD(v8) = 2304;
          goto LABEL_135;
        }
        if (v8 != 2305) {
          goto LABEL_106;
        }
        if (a3 == 2
          || (__int16 v27 = *(AppleBCMWLANLQM **)(*((void *)a1 + 9) + 5608)) == 0
          || (uint64_t v28 = AppleBCMWLANLQM::updateSliceUcodeRxErr(v27, v15, a3, 2305), !v28))
        {
LABEL_54:
          unint64_t v86 = 0;
          if (AppleBCMWLANCore::safe_align_up(a1, v7 + v12 + 4, 4uLL, &v86))
          {
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              if (CCLogStream::shouldLog())
              {
                __int16 v64 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                CCLogStream::logAlert(v64, "[dk] %s@%d:safe_align_up failed\n");
              }
            }
            goto LABEL_131;
          }
          unint64_t v7 = v86;
          if (v86 >= 0xFFFF)
          {
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              if (CCLogStream::shouldLog())
              {
                uint64_t v75 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                CCLogStream::logAlert(v75, "[dk] %s@%d:UINT16_MAX overflow nextAlignedIndex\n");
              }
            }
LABEL_131:
            uint64_t v65 = 3758097084;
            goto LABEL_135;
          }
          ((void (*)(OSData *))v15->release)(v15);
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              long long v57 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              CCLogStream::logInfoIf(v57, 0x2000000000uLL, "[dk] %s@%d:parseV30CntContainer: index %d\n", "parseV30CntContainer", 29892, v7);
            }
          }
          int v9 = (unsigned __int16)v7;
          if (OSData::getLength(this) <= v7) {
            return 0;
          }
          continue;
        }
        uint64_t v65 = v28;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v82 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logAlert(v82, "[dk] %s@%d:Error updateSliceUcodeRxErr\n", "parseV30CntContainer", 29785);
          }
        }
        LOWORD(v8) = 2305;
LABEL_135:
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            int v73 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logEmergency(v73, "[dk] %s@%d:Failed to parse Event Log Record xtlv %x\n", "parseV30CntContainer", 29901, (unsigned __int16)v8);
          }
        }
        AppleBCMWLANCore::is4387C0((OSDictionary *)a1);
        if (v15) {
          ((void (*)(OSData *))v15->release)(v15);
        }
        return v65;
    }
  }
}

uint64_t AppleBCMWLANCore::reportSlicesScanPwrStatsAtLinkup(void *a1, const OSData *a2, unsigned int a3, signed int a4)
{
  uint64_t v8 = IOMallocZeroData();
  if (v8)
  {
    int v9 = (_DWORD *)v8;
    if (!a2)
    {
      if (!(*(uint64_t (**)(void *))(*a1 + 1848))(a1)
        || ((*(void (**)(void *))(*a1 + 1848))(a1), (CCLogStream::shouldLogConsole() & 1) == 0))
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109634;
          int v24 = 65;
          __int16 v25 = 2080;
          uint64_t v26 = "reportSlicesScanPwrStatsAtLinkup";
          __int16 v27 = 1024;
          int v28 = 43063;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: Received NULL pointer\n", buf, 0x18u);
        }
      }
      uint64_t v16 = 3758097084;
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v20 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logAlert(v20, "[dk] %s@%d:Received NULL pointer\n");
        }
      }
      goto LABEL_21;
    }
    if (OSData::getLength(a2) >= 0x95)
    {
      if (!(*(uint64_t (**)(void *))(*a1 + 1848))(a1)
        || ((*(void (**)(void *))(*a1 + 1848))(a1), (CCLogStream::shouldLogConsole() & 1) == 0))
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109890;
          int v24 = 65;
          __int16 v25 = 2080;
          uint64_t v26 = "reportSlicesScanPwrStatsAtLinkup";
          __int16 v27 = 1024;
          int v28 = 43064;
          __int16 v29 = 2048;
          uint64_t v30 = 148;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: Insufficient buf sized scan_stats_data %ld to hold payload", buf, 0x22u);
        }
      }
      uint64_t v16 = 3758097084;
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          __int16 v21 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logAlert(v21, "[dk] %s@%d:Insufficient buf sized scan_stats_data %ld to hold payload");
        }
      }
      goto LABEL_21;
    }
    BytesNoCopy = OSData::getBytesNoCopy(a2);
    size_t Length = OSData::getLength(a2);
    memcpy(v9, BytesNoCopy, Length);
    if ((int)a3 > 2 || a4 <= (int)a3)
    {
      uint64_t v16 = 3758097084;
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          int v22 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logEmergency(v22, "[dk] %s@%d:Out of range slice index %d\n", "reportSlicesScanPwrStatsAtLinkup", 43067, a3);
        }
      }
      goto LABEL_21;
    }
    int v12 = *(unsigned __int16 *)v9;
    if (v12 == 1)
    {
      uint64_t v13 = a3;
      uint64_t v14 = 5 * a3;
      *(_DWORD *)(a1[9] + 20 * a3 + 19448) = v9[1];
      *(_DWORD *)(a1[9] + 20 * a3 + 19452) = v9[3];
      *(_DWORD *)(a1[9] + 20 * a3 + 19456) = v9[5];
      *(_DWORD *)(a1[9] + 20 * a3 + 19460) = v9[7];
      int v15 = v9[23];
    }
    else
    {
      if (v12 != 18)
      {
        uint64_t v13 = a3;
LABEL_19:
        uint64_t v18 = 9 * v13;
        *(void *)(a1[9] + 16 * v18 + 19056) = 0;
        *(void *)(a1[9] + 16 * v18 + 19064) = 0;
        *(void *)(a1[9] + 16 * v18 + 19072) = 0;
        *(void *)(a1[9] + 16 * v18 + 19080) = 0;
        *(void *)(a1[9] + 16 * v18 + 19088) = 0;
        uint64_t v16 = 0;
        if (*(_WORD *)v9 == 18)
        {
          *(void *)(a1[9] + 16 * v18 + 19120) = 0;
          *(void *)(a1[9] + 16 * v18 + 19128) = 0;
          *(void *)(a1[9] + 16 * v18 + 19136) = 0;
          *(void *)(a1[9] + 16 * v18 + 19144) = 0;
          *(void *)(a1[9] + 16 * v18 + 19152) = 0;
        }
LABEL_21:
        IOFreeData();
        return v16;
      }
      uint64_t v13 = a3;
      uint64_t v14 = 5 * a3;
      *(_DWORD *)(a1[9] + 20 * a3 + 19448) = v9[1];
      *(_DWORD *)(a1[9] + 20 * a3 + 19452) = v9[4];
      *(_DWORD *)(a1[9] + 20 * a3 + 19456) = v9[7];
      *(_DWORD *)(a1[9] + 20 * a3 + 19460) = v9[10];
      int v15 = v9[34];
    }
    *(_DWORD *)(a1[9] + 4 * v14 + 19464) = v15;
    goto LABEL_19;
  }
  if (!(*(uint64_t (**)(void *))(*a1 + 1848))(a1)
    || ((*(void (**)(void *))(*a1 + 1848))(a1), (CCLogStream::shouldLogConsole() & 1) == 0))
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109634;
      int v24 = 65;
      __int16 v25 = 2080;
      uint64_t v26 = "reportSlicesScanPwrStatsAtLinkup";
      __int16 v27 = 1024;
      int v28 = 43060;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: Failed to allocate scan_stats_data buf", buf, 0x18u);
    }
  }
  uint64_t v16 = 3758097084;
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v17 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v17, "[dk] %s@%d:Failed to allocate scan_stats_data buf", "reportSlicesScanPwrStatsAtLinkup", 43060);
    }
  }
  return v16;
}

uint64_t AppleBCMWLANCore::reportSlicesScanPwrStats(void *a1, const OSData *a2, unsigned int a3, signed int a4)
{
  uint64_t v8 = IOMallocZeroData();
  if (v8)
  {
    int v9 = (_DWORD *)v8;
    if (!a2)
    {
      if (!(*(uint64_t (**)(void *))(*a1 + 1848))(a1)
        || ((*(void (**)(void *))(*a1 + 1848))(a1), (CCLogStream::shouldLogConsole() & 1) == 0))
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109634;
          int v32 = 65;
          __int16 v33 = 2080;
          uint64_t v34 = "reportSlicesScanPwrStats";
          __int16 v35 = 1024;
          int v36 = 43146;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: Received NULL pointer\n", buf, 0x18u);
        }
      }
      uint64_t v17 = 3758097084;
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          int v28 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logAlert(v28, "[dk] %s@%d:Received NULL pointer\n");
        }
      }
      goto LABEL_23;
    }
    if (OSData::getLength(a2) >= 0x95)
    {
      if (!(*(uint64_t (**)(void *))(*a1 + 1848))(a1)
        || ((*(void (**)(void *))(*a1 + 1848))(a1), (CCLogStream::shouldLogConsole() & 1) == 0))
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109890;
          int v32 = 65;
          __int16 v33 = 2080;
          uint64_t v34 = "reportSlicesScanPwrStats";
          __int16 v35 = 1024;
          int v36 = 43147;
          __int16 v37 = 2048;
          uint64_t v38 = 148;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: Insufficient buf sized scan_stats_data %ld to hold payload", buf, 0x22u);
        }
      }
      uint64_t v17 = 3758097084;
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          __int16 v29 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logAlert(v29, "[dk] %s@%d:Insufficient buf sized scan_stats_data %ld to hold payload");
        }
      }
      goto LABEL_23;
    }
    BytesNoCopy = OSData::getBytesNoCopy(a2);
    size_t Length = OSData::getLength(a2);
    memcpy(v9, BytesNoCopy, Length);
    if ((int)a3 > 2 || a4 <= (int)a3)
    {
      uint64_t v17 = 3758097084;
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v30 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logEmergency(v30, "[dk] %s@%d:Out of range slice index %d\n", "reportSlicesScanPwrStats", 43150, a3);
        }
      }
      goto LABEL_23;
    }
    int v12 = *(unsigned __int16 *)v9;
    if (v12 == 18)
    {
      *(_DWORD *)(a1[9] + 144 * a3 + 19016) = v9[1];
      *(_DWORD *)(a1[9] + 144 * a3 + 19020) = v9[4];
      *(_DWORD *)(a1[9] + 144 * a3 + 19024) = v9[7];
      *(_DWORD *)(a1[9] + 144 * a3 + 19028) = v9[10];
      *(_DWORD *)(a1[9] + 144 * a3 + 19032) = v9[34];
      uint64_t v23 = a1[9];
      if (!*(unsigned char *)(v23 + a3 + 6580))
      {
        *(void *)(v23 + 144 * a3 + 19056) += (v9[2] - *(_DWORD *)(v23 + 144 * a3 + 19036));
        *(void *)(a1[9] + 144 * a3 + 19064) += (v9[5] - *(_DWORD *)(a1[9] + 144 * a3 + 19040));
        *(void *)(a1[9] + 144 * a3 + 19072) += (v9[8] - *(_DWORD *)(a1[9] + 144 * a3 + 19044));
        *(void *)(a1[9] + 144 * a3 + 19080) += (v9[11] - *(_DWORD *)(a1[9] + 144 * a3 + 19048));
        *(void *)(a1[9] + 144 * a3 + 19088) += (v9[35] - *(_DWORD *)(a1[9] + 144 * a3 + 19052));
        *(void *)(a1[9] + 144 * a3 + 19120) += (v9[3] - *(_DWORD *)(a1[9] + 144 * a3 + 19096));
        *(void *)(a1[9] + 144 * a3 + 19128) += (v9[6] - *(_DWORD *)(a1[9] + 144 * a3 + 19100));
        *(void *)(a1[9] + 144 * a3 + 19136) += (v9[9] - *(_DWORD *)(a1[9] + 144 * a3 + 19104));
        uint64_t v24 = a1[9] + 144 * a3;
        *(void *)(v24 + 19144) += (v9[12] - *(_DWORD *)(v24 + 19108));
        uint64_t v25 = a1[9] + 144 * a3;
        *(void *)(v25 + 19152) += (v9[36] - *(_DWORD *)(v25 + 19112));
        uint64_t v23 = a1[9];
      }
      uint64_t v17 = 0;
      uint64_t v26 = 9 * a3;
      *(_DWORD *)(v23 + 16 * v26 + 19036) = v9[2];
      *(_DWORD *)(a1[9] + 16 * v26 + 19040) = v9[5];
      *(_DWORD *)(a1[9] + 16 * v26 + 19044) = v9[8];
      *(_DWORD *)(a1[9] + 16 * v26 + 19048) = v9[11];
      *(_DWORD *)(a1[9] + 16 * v26 + 19052) = v9[35];
      *(_DWORD *)(a1[9] + 16 * v26 + 19096) = v9[3];
      *(_DWORD *)(a1[9] + 16 * v26 + 19100) = v9[6];
      *(_DWORD *)(a1[9] + 16 * v26 + 19104) = v9[9];
      *(_DWORD *)(a1[9] + 16 * v26 + 19108) = v9[12];
      int v19 = v9[36];
      uint64_t v20 = a1[9] + 144 * a3;
      uint64_t v21 = 19112;
    }
    else
    {
      if (v12 != 1)
      {
        uint64_t v17 = 0;
        goto LABEL_23;
      }
      uint64_t v13 = 9 * a3;
      *(_DWORD *)(a1[9] + 16 * v13 + 19016) = v9[1];
      *(_DWORD *)(a1[9] + 16 * v13 + 19020) = v9[3];
      *(_DWORD *)(a1[9] + 16 * v13 + 19024) = v9[5];
      *(_DWORD *)(a1[9] + 16 * v13 + 19028) = v9[7];
      *(_DWORD *)(a1[9] + 16 * v13 + 19032) = v9[23];
      uint64_t v14 = a1[9];
      if (!*(unsigned char *)(v14 + a3 + 6580))
      {
        *(void *)(v14 + 144 * a3 + 19056) += (v9[2] - *(_DWORD *)(v14 + 144 * a3 + 19036));
        *(void *)(a1[9] + 144 * a3 + 19064) += (v9[4] - *(_DWORD *)(a1[9] + 144 * a3 + 19040));
        *(void *)(a1[9] + 144 * a3 + 19072) += (v9[6] - *(_DWORD *)(a1[9] + 144 * a3 + 19044));
        uint64_t v15 = a1[9] + 144 * a3;
        *(void *)(v15 + 19080) += (v9[8] - *(_DWORD *)(v15 + 19048));
        uint64_t v16 = a1[9] + 144 * a3;
        *(void *)(v16 + 19088) += (v9[24] - *(_DWORD *)(v16 + 19052));
        uint64_t v14 = a1[9];
      }
      uint64_t v17 = 0;
      uint64_t v18 = 9 * a3;
      *(_DWORD *)(v14 + 16 * v18 + 19036) = v9[2];
      *(_DWORD *)(a1[9] + 16 * v18 + 19040) = v9[4];
      *(_DWORD *)(a1[9] + 16 * v18 + 19044) = v9[6];
      *(_DWORD *)(a1[9] + 16 * v18 + 19048) = v9[8];
      int v19 = v9[24];
      uint64_t v20 = a1[9] + 144 * a3;
      uint64_t v21 = 19052;
    }
    *(_DWORD *)(v20 + v21) = v19;
LABEL_23:
    IOFreeData();
    return v17;
  }
  if (!(*(uint64_t (**)(void *))(*a1 + 1848))(a1)
    || ((*(void (**)(void *))(*a1 + 1848))(a1), (CCLogStream::shouldLogConsole() & 1) == 0))
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109634;
      int v32 = 65;
      __int16 v33 = 2080;
      uint64_t v34 = "reportSlicesScanPwrStats";
      __int16 v35 = 1024;
      int v36 = 43143;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: Failed to allocate scan_stats_data buf", buf, 0x18u);
    }
  }
  uint64_t v17 = 3758097084;
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      int v22 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v22, "[dk] %s@%d:Failed to allocate scan_stats_data buf", "reportSlicesScanPwrStats", 43143);
    }
  }
  return v17;
}

uint64_t AppleBCMWLANCore::reportSlicesScanPwrStats6E(void *a1, OSData *this, unsigned int a3, signed int a4)
{
  if ((int)a3 > 2 || a4 <= (int)a3)
  {
    uint64_t v8 = 3758097084;
    if ((*(uint64_t (**)(void *, OSData *))(*a1 + 1848))(a1, this))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logEmergency(v14, "[dk] %s@%d:Out of range slice index %d\n");
      }
    }
  }
  else if (OSData::getLength(this) == 24)
  {
    BytesNoCopy = OSData::getBytesNoCopy(this);
    uint64_t v8 = 0;
    int v9 = BytesNoCopy[2];
    int v10 = BytesNoCopy[3];
    int v11 = BytesNoCopy[4];
    int v12 = BytesNoCopy[5];
    *(_DWORD *)(a1[9] + 20 * a3 + 35532) = BytesNoCopy[1];
    *(_DWORD *)(a1[9] + 20 * a3 + 35536) = v9;
    *(_DWORD *)(a1[9] + 20 * a3 + 35540) = v10;
    *(_DWORD *)(a1[9] + 20 * a3 + 35544) = v11;
    *(_DWORD *)(a1[9] + 20 * a3 + 35548) = v12;
  }
  else
  {
    uint64_t v8 = 3758097084;
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v15 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        OSData::getLength(this);
        CCLogStream::logEmergency(v15, "[dk] %s@%d:sizeof(wl_pwr_scan_6E_stats_t) %ld cnt->getLength() %d\n");
      }
    }
  }
  return v8;
}

uint64_t AppleBCMWLANCore::handlePeerStatsConfigAsyncCallback(AppleBCMWLANCore *a1, int a2, uint64_t a3, int a4, unsigned __int8 *address)
{
  if (address)
  {
    unsigned int v7 = *address;
    IOFree(address, 1uLL);
  }
  else
  {
    unsigned int v7 = 0;
  }
  uint64_t v8 = *((void *)a1 + 9);
  uint64_t v9 = v8 + 16 * v7;
  int v10 = (unsigned __int8 *)(v9 + 30836);
  int v11 = *(unsigned __int8 *)(v9 + 30842);
  if (!a3)
  {
    AppleBCMWLANCore::processPeerStatsConfig(a1, v11 == 0, v7);
    uint64_t v8 = *((void *)a1 + 9);
  }
  *(unsigned char *)(v8 + 16 * v7 + 30843) = 0;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v21 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (v11) {
        uint64_t v13 = "disable";
      }
      else {
        uint64_t v13 = "enable";
      }
      int v14 = *v10;
      int v15 = v10[1];
      int v16 = v10[2];
      int v17 = v10[3];
      int v18 = v10[4];
      int v19 = v10[5];
      uint64_t v20 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)a1 + 112))(a1, a3);
      CCLogStream::logAlert(v21, "[dk] %s@%d: P2p Peer stats %s iovar for [%02X:%02X:%02X:%02X:%02X:%02X] %s, peers %u, index %u, status %u \n", "handlePeerStatsConfigAsyncCallback", 30006, v13, v14, v15, v16, v17, v18, v19, v20, *(unsigned __int8 *)(*((void *)a1 + 9) + 30832), v7, *(unsigned __int8 *)(*((void *)a1 + 9) + 16 * v7 + 30842));
    }
  }
  return a3;
}

uint64_t AppleBCMWLANCore::processPeerStatsConfig(AppleBCMWLANCore *this, int a2, unsigned int a3)
{
  __int16 v12 = 0;
  int v11 = 0;
  uint64_t v3 = *((void *)this + 9);
  uint64_t v4 = (unsigned char *)(v3 + 30832);
  char v5 = *(unsigned char *)(v3 + 30832);
  if (a2)
  {
    *uint64_t v4 = v5 + 1;
    *(unsigned char *)(*((void *)this + 9) + 16 * a3 + 30842) = 1;
    uint64_t v6 = *((void *)this + 9);
    __int16 v7 = *(_WORD *)(v6 + 16 * a3 + 30840);
    uint64_t v8 = a3;
    int v11 = *(_DWORD *)(v6 + 16 * a3 + 30836);
    __int16 v12 = v7;
  }
  else
  {
    if (*(unsigned char *)(v3 + 30832))
    {
      *uint64_t v4 = v5 - 1;
      uint64_t v3 = *((void *)this + 9);
    }
    uint64_t v9 = v3 + 16 * a3;
    uint64_t v8 = a3;
    *(unsigned char *)(v9 + 30842) = 0;
    uint64_t v6 = *((void *)this + 9);
  }
  *(unsigned char *)(v6 + 16 * v8 + 30844) = 0;
  *(_DWORD *)(*((void *)this + 9) + 16 * v8 + 30848) = 0;
  return AppleBCMWLANLQM::updatePeerStatsAddrForIndex(*(void *)(*((void *)this + 9) + 5608), (unsigned __int8 *)&v11, a3);
}

uint64_t AppleBCMWLANCore::getPeerStatsIndex(AppleBCMWLANCore *this, ether_addr *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *((void *)this + 9) + 30836;
  unsigned __int8 v4 = -1;
  while (*(_DWORD *)v3 != *(_DWORD *)a2->octet || *(unsigned __int16 *)(v3 + 4) != *(unsigned __int16 *)&a2->octet[4])
  {
    if (!*(unsigned char *)(v3 + 6) && !*(unsigned char *)(v3 + 7)) {
      unsigned __int8 v4 = v2;
    }
    ++v2;
    v3 += 16;
    if (v2 == 4) {
      return v4;
    }
  }
  return v2;
}

AppleBCMWLANCore *AppleBCMWLANCore::reportPerPeerTxPerAndLatency(AppleBCMWLANCore *this, ether_addr *a2, char a3, int a4)
{
  if (a2)
  {
    __int16 v7 = this;
    this = (AppleBCMWLANCore *)AppleBCMWLANCore::featureFlagIsBitSet(this, 104);
    if (this)
    {
      if (*(_DWORD *)a2->octet || *(_WORD *)&a2->octet[4] != 0)
      {
        this = (AppleBCMWLANCore *)AppleBCMWLANCore::getPeerStatsIndex(v7, a2);
        if (this <= 3)
        {
          unsigned int v9 = this;
          uint64_t v10 = *((void *)v7 + 9) + 30836;
          if (*(unsigned char *)(v10 + 16 * this + 6))
          {
            *(unsigned char *)(v10 + 16 * this + 8) = a3;
            *(_DWORD *)(*((void *)v7 + 9) + 16 * this + 30848) = a4;
            uint64_t v11 = *((void *)v7 + 9);
            uint64_t v12 = *(void *)(v11 + 5608);
            uint64_t v13 = v11 + 16 * v9 + 30836;
            char v14 = *(unsigned char *)(v13 + 8);
            int v15 = *(_DWORD *)(v13 + 12);
            return (AppleBCMWLANCore *)AppleBCMWLANLQM::updatePeerTxLatencyAndPer(v12, v9, v14, v15);
          }
        }
      }
    }
  }
  return this;
}

void AppleBCMWLANCore::configPerPeerStats(AppleBCMWLANCore *this, int a2, int a3, unsigned int a4, ether_addr *a5)
{
  unsigned __int16 v33 = 0;
  int v32 = 0;
  if (!a5
    || !AppleBCMWLANCore::featureFlagIsBitSet(this, 104)
    || (*(_DWORD *)a5->octet == v32 ? (BOOL v10 = *(unsigned __int16 *)&a5->octet[4] == v33) : (BOOL v10 = 0), v10))
  {
    unsigned int v12 = 0;
    goto LABEL_14;
  }
  unsigned int PeerStatsIndex = AppleBCMWLANCore::getPeerStatsIndex(this, a5);
  if (PeerStatsIndex > 3) {
    return;
  }
  unsigned int v12 = PeerStatsIndex;
  uint64_t v13 = *((void *)this + 9);
  uint64_t v14 = v13 + 30836;
  if (*(unsigned char *)(v13 + 30836 + 16 * PeerStatsIndex + 7)) {
    goto LABEL_14;
  }
  uint64_t v38 = 0;
  uint64_t v37 = 0;
  __int16 v39 = 0;
  v34[0] = 524289;
  v34[1] = *(_DWORD *)a5->octet;
  __int16 v35 = *(_WORD *)&a5->octet[4];
  unsigned int v15 = *(unsigned __int8 *)(v13 + 30832);
  if (a2)
  {
    if (v15 > 3) {
      goto LABEL_14;
    }
    uint64_t v16 = v14 + 16 * PeerStatsIndex;
    if (*(unsigned char *)(v16 + 6)) {
      goto LABEL_14;
    }
    int v17 = *(_DWORD *)a5->octet;
    *(_WORD *)(v16 + 4) = *(_WORD *)&a5->octet[4];
    *(_DWORD *)uint64_t v16 = v17;
    __int16 v18 = 1;
  }
  else
  {
    if (!v15 || !*(unsigned char *)(v14 + 16 * PeerStatsIndex + 6)) {
      goto LABEL_14;
    }
    if (!a3)
    {
      AppleBCMWLANCore::processPeerStatsConfig(this, 0, PeerStatsIndex);
      goto LABEL_14;
    }
    __int16 v18 = 2;
  }
  __int16 v36 = v18;
  int v19 = (unsigned char *)IOMallocZeroTyped();
  if (v19)
  {
    uint64_t v20 = v19;
    *int v19 = v12;
    v31[0] = this;
    v31[1] = AppleBCMWLANCore::handlePeerStatsConfigAsyncCallback;
    v31[2] = v19;
    uint64_t v21 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    v30[0] = v34;
    v30[1] = 14;
    if (AppleBCMWLANCommander::sendVirtualIOVarSet(v21, a4, "peer_stats", (uint64_t)v30, kNoRxExpected, (uint64_t)v31, 0))IOFree(v20, 1uLL); {
    else
    }
      *(unsigned char *)(*((void *)this + 9) + 16 * v12 + 30843) = 1;
    return;
  }
LABEL_14:
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      int v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t v23 = "disable";
      if (a2) {
        uint64_t v23 = "enable";
      }
      if (a5)
      {
        int v24 = a5->octet[0];
        int v25 = a5->octet[1];
        int v26 = a5->octet[2];
        int v27 = a5->octet[3];
        int v28 = a5->octet[4];
        int v29 = a5->octet[5];
      }
      else
      {
        int v28 = 0;
        int v26 = 0;
        int v24 = 0;
        int v25 = 0;
        int v27 = 0;
        int v29 = 0;
      }
      CCLogStream::logAlert(v22, "[dk] %s@%d: Error: P2p Peer stats %s iovar for [%02X:%02X:%02X:%02X:%02X:%02X], peers %u, index %u, status %u busy %d\n", "configPerPeerStats", 30171, v23, v24, v25, v26, v27, v28, v29, *(unsigned __int8 *)(*((void *)this + 9) + 30832), v12, *(unsigned __int8 *)(*((void *)this + 9) + 16 * v12 + 30842), *(unsigned __int8 *)(*((void *)this + 9) + 16 * v12 + 30843));
    }
  }
}

uint64_t AppleBCMWLANCore::parsePerPeerLeafStats(void *a1, int a2, OSData *this)
{
  BytesNoCopy = (ether_addr *)OSData::getBytesNoCopy(this, 0, 0xCuLL);
  if (BytesNoCopy)
  {
    unsigned int updated = AppleBCMWLANLQM::updatePerPeerCommonStats(*(AppleBCMWLANLQM **)(a1[9] + 5608), a2, BytesNoCopy);
    if (OSData::getLength(this) >= 0xD)
    {
      size_t v8 = 12;
      unsigned __int16 v9 = 12;
      while (OSData::getLength(this) - v8 >= 5)
      {
        BOOL v10 = (unsigned __int16 *)OSData::getBytesNoCopy(this, v8, 4uLL);
        if (!v10)
        {
          uint64_t v20 = 3758097084;
          if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
          {
            (*(void (**)(void *))(*a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              int v22 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
              CCLogStream::logAlert(v22, "[dk] %s@%d:Bad read at index %d\n");
            }
          }
          return v20;
        }
        uint64_t v11 = v10;
        size_t v12 = v10[1];
        size_t Length = OSData::getLength(this);
        size_t v14 = v9 + 4;
        if (Length - v14 < v12)
        {
          uint64_t v20 = 3758097084;
          if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
          {
            (*(void (**)(void *))(*a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v23 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
              CCLogStream::logAlert(v23, "[dk] %s@%d:Insufficient containerLength %d index %d\n");
            }
          }
          return v20;
        }
        unsigned int v15 = (unsigned int *)OSData::getBytesNoCopy(this, v14, v12);
        if (!v15)
        {
          uint64_t v20 = 3758097084;
          if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
          {
            (*(void (**)(void *))(*a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              int v24 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
              CCLogStream::logAlert(v24, "[dk] %s@%d:Bad payloadStart\n");
            }
          }
          return v20;
        }
        int v16 = *v11;
        switch(v16)
        {
          case 3:
            AppleBCMWLANLQM::updatePerPeerTxAmpduStats(*(AppleBCMWLANLQM **)(a1[9] + 5608), updated, v15);
            break;
          case 2:
            AppleBCMWLANLQM::updatePerPeerRxAmpduStats(*(AppleBCMWLANLQM **)(a1[9] + 5608), updated, (long long *)v15);
            break;
          case 1:
            AppleBCMWLANLQM::updatePerPeerChanStats(*(AppleBCMWLANLQM **)(a1[9] + 5608), updated, v15);
            break;
          default:
            if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
            {
              (*(void (**)(void *))(*a1 + 1848))(a1);
              if (CCLogStream::shouldLog())
              {
                int v19 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                CCLogStream::logAlert(v19, "[dk] %s@%d:Unknown peer stat type %d\n", "parsePerPeerLeafStats", 30222, v16);
              }
            }
            break;
        }
        if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
        {
          (*(void (**)(void *))(*a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            __int16 v18 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
            CCLogStream::logInfoIf(v18, 0x2000000000uLL, "[dk] %s@%d:parsePeerStatsGlobalContainer: index %d\n", "parsePerPeerLeafStats", 30226, v9);
          }
        }
        __int16 v17 = v9 + v12;
        v9 += v12 + 4;
        size_t v8 = (unsigned __int16)(v17 + 4);
        if (OSData::getLength(this) <= v9) {
          return 0;
        }
      }
    }
    return 0;
  }
  else
  {
    uint64_t v20 = 3758097084;
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v25 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v25, "[dk] %s@%d:Bad peerStatsHdr\n");
      }
    }
  }
  return v20;
}

uint64_t AppleBCMWLANCore::parseSoftAPClientLeafStats(void *a1, int a2, OSData *this)
{
  BytesNoCopy = (unsigned __int8 *)OSData::getBytesNoCopy(this, 0, 0xCuLL);
  if (BytesNoCopy)
  {
    AppleBCMWLANLQM::printPeerCommonStats(*(void *)(a1[9] + 5608), BytesNoCopy, a2, 1);
    if (OSData::getLength(this) >= 0xD)
    {
      size_t v7 = 12;
      unsigned __int16 v8 = 12;
      while (OSData::getLength(this) - v7 >= 5)
      {
        unsigned __int16 v9 = (unsigned __int16 *)OSData::getBytesNoCopy(this, v7, 4uLL);
        if (!v9)
        {
          uint64_t v21 = 3758097084;
          if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
          {
            (*(void (**)(void *))(*a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v23 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
              CCLogStream::logAlert(v23, "[dk] %s@%d:Bad read at index %d\n");
            }
          }
          return v21;
        }
        BOOL v10 = v9;
        size_t v11 = v9[1];
        size_t Length = OSData::getLength(this);
        size_t v13 = v8 + 4;
        if (Length - v13 < v11)
        {
          uint64_t v21 = 3758097084;
          if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
          {
            (*(void (**)(void *))(*a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              int v24 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
              CCLogStream::logAlert(v24, "[dk] %s@%d:Insufficient containerLength %d index %d\n");
            }
          }
          return v21;
        }
        size_t v14 = (unsigned int *)OSData::getBytesNoCopy(this, v13, v11);
        if (!v14)
        {
          uint64_t v21 = 3758097084;
          if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
          {
            (*(void (**)(void *))(*a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              int v25 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
              CCLogStream::logAlert(v25, "[dk] %s@%d:Bad payloadStart\n");
            }
          }
          return v21;
        }
        unsigned int v15 = v14;
        int v16 = *v10;
        switch(v16)
        {
          case 3:
            AppleBCMWLANLQM::printPeerTxAmpduStats(*(void *)(a1[9] + 5608), v14, 1);
            break;
          case 2:
            AppleBCMWLANLQM::printPeerRxAmpduStats(*(void *)(a1[9] + 5608), v14, 1);
            break;
          case 1:
            AppleBCMWLANChanSpec::getAppleChannelSpec(*(int ***)(a1[9] + 17576), *(unsigned __int16 *)v14);
            int PrimaryChannel = ChanSpecGetPrimaryChannel();
            AppleBCMWLANLQM::printPeerChanStats(*(void *)(a1[9] + 5608), v15, PrimaryChannel, 1);
            break;
          default:
            if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
            {
              (*(void (**)(void *))(*a1 + 1848))(a1);
              if (CCLogStream::shouldLog())
              {
                uint64_t v20 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                CCLogStream::logAlert(v20, "[dk] %s@%d:Unknown peer stat type %d\n", "parseSoftAPClientLeafStats", 30289, v16);
              }
            }
            break;
        }
        if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
        {
          (*(void (**)(void *))(*a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            int v19 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
            CCLogStream::logInfoIf(v19, 0x2000000000uLL, "[dk] %s@%d:parsePeerStatsGlobalContainer: index %d\n", "parseSoftAPClientLeafStats", 30293, v8);
          }
        }
        __int16 v18 = v8 + v11;
        v8 += v11 + 4;
        size_t v7 = (unsigned __int16)(v18 + 4);
        if (OSData::getLength(this) <= v8) {
          return 0;
        }
      }
    }
    return 0;
  }
  else
  {
    uint64_t v21 = 3758097084;
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v26 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v26, "[dk] %s@%d:Bad peerStatsHdr\n");
      }
    }
  }
  return v21;
}

uint64_t AppleBCMWLANCore::getChanSpecHandler(AppleBCMWLANCore *this)
{
  return *(void *)(*((void *)this + 9) + 17576);
}

uint64_t AppleBCMWLANCore::parsePeerStatsGlobalContainer(AppleBCMWLANCore *a1, int a2, const OSData *a3)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v30 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      CCLogStream::logInfoIf(v30, 0x2000000000uLL, "[dk] %s@%d:parsePeerStatsGlobalContainer\n", "parsePeerStatsGlobalContainer", 30316);
    }
  }
  if (((unint64_t)OSData::getBytesNoCopy(a3) & 3) != 0)
  {
    uint64_t v18 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v29 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v29, "[dk] %s@%d:Buffer not aligned\n");
      }
    }
  }
  else if (OSData::getLength(a3))
  {
    unint64_t v6 = 0;
    int v7 = 0;
    while (1)
    {
      if (OSData::getLength(a3) - v6 < 5) {
        return 0;
      }
      BytesNoCopy = OSData::getBytesNoCopy(a3, v6, 4uLL);
      if (!BytesNoCopy) {
        break;
      }
      unsigned __int16 v9 = BytesNoCopy;
      size_t v10 = (unsigned __int16)BytesNoCopy[1];
      size_t Length = OSData::getLength(a3);
      size_t v12 = (v7 + 4);
      if (Length - v12 < v10)
      {
        uint64_t v18 = 3758097084;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v23 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logAlert(v23, "[dk] %s@%d:Insufficient containerLength %d index %d\n");
          }
        }
        return v18;
      }
      size_t v13 = (void *)OSData::getBytesNoCopy(a3, v12, v10);
      if (!v13)
      {
        uint64_t v18 = 3758097084;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            int v24 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logAlert(v24, "[dk] %s@%d:Bad payloadStart\n");
          }
        }
        return v18;
      }
      OSDataPtr v14 = OSData::withBytesNoCopy(v13, v10);
      if (!v14)
      {
        uint64_t v18 = 3758097084;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            int v25 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logAlert(v25, "[dk] %s@%d:Bad xtlvContainerPayload\n");
          }
        }
        return v18;
      }
      if (*v9 != 1)
      {
        uint64_t v18 = 3758097084;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v21 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logAlert(v21, "[dk] %s@%d:Unknown peer stat type %d\n");
          }
        }
        return v18;
      }
      unsigned int v15 = v14;
      if (!AppleBCMWLANCore::featureFlagIsBitSet(a1, 122)) {
        goto LABEL_16;
      }
      int v16 = OSData::getBytesNoCopy(v15, v6, 0xCuLL);
      if (!v16)
      {
        uint64_t v18 = 3758097084;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            int v28 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logAlert(v28, "[dk] %s@%d:Bad peerStatsHdr\n");
          }
        }
        return v18;
      }
      if ((v16[6] & 2) != 0) {
        uint64_t v17 = AppleBCMWLANCore::parseSoftAPClientLeafStats(a1, a2, v15);
      }
      else {
LABEL_16:
      }
        uint64_t v17 = AppleBCMWLANCore::parsePerPeerLeafStats(a1, a2, v15);
      uint64_t v18 = v17;
      if (v17)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            int v26 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logEmergency(v26, "[dk] %s@%d:Failed to parse Event Log Record xtlv %x\n", "parsePeerStatsGlobalContainer", 30363, 1);
          }
        }
        return v18;
      }
      unint64_t v32 = 0;
      if (AppleBCMWLANCore::safe_align_up(a1, v6 + v10 + 4, 4uLL, &v32))
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            int v27 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logAlert(v27, "[dk] %s@%d:safe_align_up failed\n");
          }
        }
        return 3758097084;
      }
      unint64_t v6 = v32;
      if (v32 >= 0xFFFF)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            __int16 v31 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logAlert(v31, "[dk] %s@%d:UINT16_MAX overflow nextAlignedIndex\n");
          }
        }
        return 3758097084;
      }
      ((void (*)(OSData *))v15->release)(v15);
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          int v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logInfoIf(v19, 0x2000000000uLL, "[dk] %s@%d:parsePeerStatsGlobalContainer: index %d\n", "parsePeerStatsGlobalContainer", 30374, v6);
        }
      }
      int v7 = (unsigned __int16)v6;
      if (OSData::getLength(a3) <= v6) {
        return 0;
      }
    }
    uint64_t v18 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v22, "[dk] %s@%d:Bad read at index %d\n");
      }
    }
  }
  else
  {
    return 0;
  }
  return v18;
}

uint64_t AppleBCMWLANCore::checkForSoftAPStatsSupport(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 122);
}

uint64_t AppleBCMWLANCore::convertInfraGenericStatisticsToApple80211Counters(void *a1, OSData *this, int a3)
{
  BytesNoCopy = OSData::getBytesNoCopy(this);
  unint64_t v6 = (void *)IOMallocZeroData();
  int v7 = (void *)IOMallocZeroData();
  unsigned __int16 v8 = (void *)IOMallocZeroData();
  uint64_t v9 = IOMallocZeroData();
  uint64_t v10 = v9;
  if (!v6)
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v28 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logEmergency(v28, "[dk] %s@%d:Failed to allocate rx buffer\n");
      }
    }
LABEL_73:
    uint64_t v12 = 3758097084;
    if (!v10)
    {
LABEL_57:
      if (!v8) {
        goto LABEL_59;
      }
      goto LABEL_58;
    }
    goto LABEL_56;
  }
  if (!v7)
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v29 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logEmergency(v29, "[dk] %s@%d:Failed to allocate tx buffer\n");
      }
    }
    goto LABEL_73;
  }
  if (!v8)
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v38 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logEmergency(v38, "[dk] %s@%d:Failed to allocate mib buffer\n");
      }
    }
    goto LABEL_73;
  }
  if (v9)
  {
    if (!BytesNoCopy)
    {
      uint64_t v12 = 3758097084;
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          __int16 v31 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logEmergency(v31, "[dk] %s@%d:Failed to allocate alignedCounters\n");
        }
      }
      goto LABEL_56;
    }
    *int v7 = BytesNoCopy[1];
    v7[1] = BytesNoCopy[2];
    v7[3] = BytesNoCopy[3];
    v7[7] = BytesNoCopy[4];
    v7[9] = BytesNoCopy[5];
    void v7[2] = BytesNoCopy[22];
    *unint64_t v6 = BytesNoCopy[12];
    v6[1] = BytesNoCopy[13];
    _OWORD v6[2] = BytesNoCopy[14];
    v6[4] = BytesNoCopy[15];
    v6[10] = BytesNoCopy[16];
    v6[9] = BytesNoCopy[17];
    v8[2] = BytesNoCopy[6];
    v8[3] = BytesNoCopy[7];
    unsigned __int16 v8[4] = BytesNoCopy[8];
    v8[12] = BytesNoCopy[9];
    v8[1] = BytesNoCopy[10];
    void *v8 = BytesNoCopy[11];
    v8[6] = BytesNoCopy[20];
    v8[7] = BytesNoCopy[21];
    v8[10] = BytesNoCopy[18];
    *(void *)(v9 + 32) = BytesNoCopy[19];
    switch(a3)
    {
      case 0:
        uint64_t v11 = *(void *)(a1[9] + 11304);
        if (!v11)
        {
          if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
          {
            (*(void (**)(void *))(*a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v23 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
              CCLogStream::logAlert(v23, "[dk] %s@%d:kAPPLE80211InterfaceIdSTA infra interface is not exist\n");
            }
          }
          goto LABEL_55;
        }
        if ((*(uint64_t (**)(uint64_t, void, void *, uint64_t, void *))(*(void *)v11 + 776))(v11, 0, v7, v10, v6))
        {
          if ((*(uint64_t (**)(void, void, void *))(**(void **)(a1[9] + 11304) + 784))(*(void *)(a1[9] + 11304), 0, v8))goto LABEL_55; {
          uint64_t v12 = 3758097084;
          }
          if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
          {
            (*(void (**)(void *))(*a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              size_t v13 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
              CCLogStream::logEmergency(v13, "[dk] %s@%d:ivars->fInfraSkywalkInterface->setInterfaceMIBdot11 failed\n");
            }
          }
        }
        else
        {
          uint64_t v12 = 3758097084;
          if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
          {
            (*(void (**)(void *))(*a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              unint64_t v32 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
              CCLogStream::logEmergency(v32, "[dk] %s@%d:ivars->fInfraSkywalkInterface->setInterfaceChipCounters failed\n");
            }
          }
        }
        break;
      case 1:
        uint64_t v15 = *(void *)(a1[9] + 11320);
        if (!v15)
        {
          if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
          {
            (*(void (**)(void *))(*a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              int v24 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
              CCLogStream::logAlert(v24, "[dk] %s@%d:kAPPLE80211InterfaceIdSoftAP soft AP does not exist\n");
            }
          }
          goto LABEL_55;
        }
        if ((*(uint64_t (**)(uint64_t, void, void *, uint64_t, void *))(*(void *)v15 + 776))(v15, 0, v7, v10, v6))
        {
          if ((*(uint64_t (**)(void, void, void *))(**(void **)(a1[9] + 11320) + 784))(*(void *)(a1[9] + 11320), 0, v8))goto LABEL_55; {
          uint64_t v12 = 3758097084;
          }
          if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
          {
            (*(void (**)(void *))(*a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              int v16 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
              CCLogStream::logEmergency(v16, "[dk] %s@%d:ivars->fApStaInterface->setInterfaceMIBdot11 failed\n");
            }
          }
        }
        else
        {
          uint64_t v12 = 3758097084;
          if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
          {
            (*(void (**)(void *))(*a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              unsigned __int16 v33 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
              CCLogStream::logEmergency(v33, "[dk] %s@%d:ivars->fApStaInterface->setInterfaceChipCounters failed\n");
            }
          }
        }
        break;
      case 2:
        uint64_t v17 = *(void *)(a1[9] + 11312);
        if (!v17)
        {
          if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
          {
            (*(void (**)(void *))(*a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              int v25 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
              CCLogStream::logAlert(v25, "[dk] %s@%d:kAPPLE80211InterfaceIdAWDL awdl interface does not exist\n");
            }
          }
          goto LABEL_55;
        }
        if ((*(uint64_t (**)(uint64_t, void, void *, uint64_t, void *))(*(void *)v17 + 776))(v17, 0, v7, v10, v6))
        {
          if ((*(uint64_t (**)(void, void, void *))(**(void **)(a1[9] + 11312) + 784))(*(void *)(a1[9] + 11312), 0, v8))goto LABEL_55; {
          uint64_t v12 = 3758097084;
          }
          if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
          {
            (*(void (**)(void *))(*a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v18 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
              CCLogStream::logEmergency(v18, "[dk] %s@%d:fProximityInterface->setInterfaceMIBdot11 failed\n");
            }
          }
        }
        else
        {
          uint64_t v12 = 3758097084;
          if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
          {
            (*(void (**)(void *))(*a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v34 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
              CCLogStream::logEmergency(v34, "[dk] %s@%d:fProximityInterface->setInterfaceChipCounters failed\n");
            }
          }
        }
        break;
      case 3:
        uint64_t v19 = *(void *)(a1[9] + 29800);
        if (!v19)
        {
          if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
          {
            (*(void (**)(void *))(*a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              int v26 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
              CCLogStream::logAlert(v26, "[dk] %s@%d:kAPPLE80211InterfaceIdNAN nan interface does not exist\n");
            }
          }
          goto LABEL_55;
        }
        if ((*(uint64_t (**)(uint64_t, void, void *, uint64_t, void *))(*(void *)v19 + 776))(v19, 0, v7, v10, v6))
        {
          if ((*(uint64_t (**)(void, void, void *))(**(void **)(a1[9] + 29800) + 784))(*(void *)(a1[9] + 29800), 0, v8))goto LABEL_55; {
          uint64_t v12 = 3758097084;
          }
          if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
          {
            (*(void (**)(void *))(*a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v20 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
              CCLogStream::logEmergency(v20, "[dk] %s@%d:fP2PNANMgmtDataInterface->setInterfaceMIBdot11 failed\n");
            }
          }
        }
        else
        {
          uint64_t v12 = 3758097084;
          if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
          {
            (*(void (**)(void *))(*a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              __int16 v35 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
              CCLogStream::logEmergency(v35, "[dk] %s@%d:fP2PNANMgmtDataInterface->setInterfaceChipCounters failed\n");
            }
          }
        }
        break;
      case 4:
        uint64_t v21 = *(void *)(a1[9] + 29808);
        if (v21)
        {
          if (((*(uint64_t (**)(uint64_t, void, void *, uint64_t, void *))(*(void *)v21 + 776))(v21, 0, v7, v10, v6) & 1) == 0)
          {
            uint64_t v12 = 3758097084;
            if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
            {
              (*(void (**)(void *))(*a1 + 1848))(a1);
              if (CCLogStream::shouldLog())
              {
                __int16 v36 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                CCLogStream::logEmergency(v36, "[dk] %s@%d:fP2PNANDataInterface->setInterfaceChipCounters failed\n");
              }
            }
            break;
          }
          if (((*(uint64_t (**)(void, void, void *))(**(void **)(a1[9] + 29808) + 784))(*(void *)(a1[9] + 29808), 0, v8) & 1) == 0)
          {
            uint64_t v12 = 3758097084;
            if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
            {
              (*(void (**)(void *))(*a1 + 1848))(a1);
              if (CCLogStream::shouldLog())
              {
                int v22 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                CCLogStream::logEmergency(v22, "[dk] %s@%d:fP2PNANDataInterface->setInterfaceMIBdot11 failed\n");
              }
            }
            break;
          }
        }
        else if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
        {
          (*(void (**)(void *))(*a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v37 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
            CCLogStream::logAlert(v37, "[dk] %s@%d:kAPPLE80211InterfaceIdNANData nan data interface does not exist\n");
          }
        }
LABEL_55:
        uint64_t v12 = 0;
        break;
      default:
        uint64_t v12 = 3758097084;
        if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
        {
          (*(void (**)(void *))(*a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            OSDataPtr v14 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
            CCLogStream::logAlert(v14, "[dk] %s@%d:Unhandled interfaceIndex %d\n", "convertInfraGenericStatisticsToApple80211Counters", 30801, a3);
          }
        }
        break;
    }
LABEL_56:
    IOFreeData();
    goto LABEL_57;
  }
  uint64_t v12 = 3758097084;
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v30 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logEmergency(v30, "[dk] %s@%d:Failed to allocate tx err buffer\n", "convertInfraGenericStatisticsToApple80211Counters", 30699);
    }
  }
LABEL_58:
  IOFreeData();
LABEL_59:
  if (v7) {
    IOFreeData();
  }
  if (v6) {
    IOFreeData();
  }
  return v12;
}

uint64_t AppleBCMWLANCore::convertInfraSpecificStatisticsToApple80211Counters(void *a1, OSData *this)
{
  if (*(void *)(a1[9] + 11304))
  {
    unsigned int v14 = 0;
    OSData::getBytesNoCopy(this);
    memset(v15, 170, sizeof(v15));
    AppleBCMWLANUtil::AutoreleasedAlignedOSData::AutoreleasedAlignedOSData((AppleBCMWLANUtil::AutoreleasedAlignedOSData *)v15, this, 4);
    unsigned __int8 v4 = (OSData *)v15[0];
    if (v15[0])
    {
      if (IOMallocZeroData())
      {
        *(void *)(a1[9] + 17048) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v14, (int *)4, v4, 4uLL);
        uint64_t v5 = a1[9];
        uint64_t v6 = *(void *)(v5 + 11304);
        if (v6)
        {
          if (((*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v6 + 792))(v6, 0, v5 + 16184) & 1) == 0)
          {
            if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
            {
              (*(void (**)(void *))(*a1 + 1848))(a1);
              if (CCLogStream::shouldLog())
              {
                size_t v13 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                CCLogStream::logEmergency(v13, "[dk] %s@%d:ivars->fInfraSkywalkInterface->setFrameStats failed\n", "convertInfraSpecificStatisticsToApple80211Counters", 30858);
              }
            }
            unsigned int v14 = -536870212;
          }
        }
        else if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
        {
          (*(void (**)(void *))(*a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
            CCLogStream::logAlert(v12, "[dk] %s@%d:Infra interface is not existing %d\n", "convertInfraSpecificStatisticsToApple80211Counters", 30860, 30860);
          }
        }
        uint64_t v7 = v14;
        IOFreeData();
      }
      else
      {
        if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
        {
          (*(void (**)(void *))(*a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
            CCLogStream::logEmergency(v11, "[dk] %s@%d:Failed to allocate buffer\n", "convertInfraSpecificStatisticsToApple80211Counters", 30841);
          }
        }
        uint64_t v7 = 3758097084;
        unsigned int v14 = -536870212;
      }
    }
    else
    {
      uint64_t v7 = 3758097084;
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          unsigned __int16 v8 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logAlert(v8, "[dk] %s@%d:Failed to create aligned infraSpecificStats data\n", "convertInfraSpecificStatisticsToApple80211Counters", 30834);
        }
      }
    }
    AppleBCMWLANUtil::AutoreleasedAlignedOSData::~AutoreleasedAlignedOSData((AppleBCMWLANUtil::AutoreleasedAlignedOSData *)v15);
  }
  else
  {
    if ((*(uint64_t (**)(void *, OSData *))(*a1 + 1848))(a1, this))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logCrit(v10, "[dk] %s@%d:NO INTER %s %d\n", "convertInfraSpecificStatisticsToApple80211Counters", 30815, "IOReturn AppleBCMWLANCore::convertInfraSpecificStatisticsToApple80211Counters(OSData *, apple80211_interface_id_t)", 30815);
      }
    }
    return 0;
  }
  return v7;
}

uint64_t AppleBCMWLANCore::convertInfraSpecificHeStatisticsToApple80211Counters(void *a1, OSData *a2)
{
  if (*(void *)(a1[9] + 11304))
  {
    unsigned int v15 = 0;
    uint64_t v4 = IOMallocZeroData();
    memset(v16, 170, sizeof(v16));
    AppleBCMWLANUtil::AutoreleasedAlignedOSData::AutoreleasedAlignedOSData((AppleBCMWLANUtil::AutoreleasedAlignedOSData *)v16, a2, 4);
    if (v4)
    {
      uint64_t v5 = v16[0];
      if (v16[0])
      {
        *(void *)(a1[9] + 16744) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v15, (int *)4, v16[0], 8uLL);
        *(void *)(a1[9] + 17208) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v15, (int *)4, v5, 0x10uLL);
        *(void *)(a1[9] + 16752) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v15, (int *)4, v5, 0x18uLL);
        *(void *)(a1[9] + 17216) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v15, (int *)4, v5, 0x20uLL);
        *(void *)(a1[9] + 16760) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v15, (int *)4, v5, 0x28uLL);
        *(void *)(a1[9] + 17224) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v15, (int *)4, v5, 0x30uLL);
        *(void *)(a1[9] + 16976) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v15, (int *)4, v5, 0x38uLL);
        *(void *)(a1[9] + 17232) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v15, (int *)4, v5, 0x40uLL);
        *(void *)(a1[9] + 16992) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v15, (int *)4, v5, 0x48uLL);
        *(void *)(a1[9] + 17248) = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v15, (int *)4, v5, 0x50uLL);
        *(_DWORD *)(a1[9] + 17320) = 1;
        uint64_t v6 = a1[9];
        uint64_t v7 = *(void *)(v6 + 11304);
        if (v7)
        {
          if (((*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v7 + 792))(v7, 0, v6 + 16184) & 1) == 0)
          {
            if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
            {
              (*(void (**)(void *))(*a1 + 1848))(a1);
              if (CCLogStream::shouldLog())
              {
                unsigned __int16 v8 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                CCLogStream::logEmergency(v8, "[dk] %s@%d:ivars->fInfraSkywalkInterface->setFrameStats failed\n");
              }
            }
LABEL_26:
            uint64_t v9 = 3758097084;
            unsigned int v15 = -536870212;
            goto LABEL_17;
          }
        }
        else if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
        {
          (*(void (**)(void *))(*a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
            CCLogStream::logAlert(v12, "[dk] %s@%d:Infra interface is not existing %d\n", "convertInfraSpecificHeStatisticsToApple80211Counters", 30903, 30903);
          }
        }
        *(_DWORD *)(a1[9] + 17320) = 1;
        uint64_t v9 = v15;
LABEL_17:
        AppleBCMWLANUtil::AutoreleasedAlignedOSData::~AutoreleasedAlignedOSData((AppleBCMWLANUtil::AutoreleasedAlignedOSData *)v16);
        IOFreeData();
        return v9;
      }
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          unsigned int v14 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logEmergency(v14, "[dk] %s@%d:Failed to allocate alignedCounters\n");
        }
      }
      goto LABEL_26;
    }
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        size_t v13 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logEmergency(v13, "[dk] %s@%d:Failed to allocate buffer\n", "convertInfraSpecificHeStatisticsToApple80211Counters", 30883);
      }
    }
    uint64_t v9 = 3758097084;
    AppleBCMWLANUtil::AutoreleasedAlignedOSData::~AutoreleasedAlignedOSData((AppleBCMWLANUtil::AutoreleasedAlignedOSData *)v16);
  }
  else
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logCrit(v11, "[dk] %s@%d:NO INTER %s %d\n", "convertInfraSpecificHeStatisticsToApple80211Counters", 30872, "IOReturn AppleBCMWLANCore::convertInfraSpecificHeStatisticsToApple80211Counters(OSData *, apple80211_interface_id_t)", 30872);
      }
    }
    return 0;
  }
  return v9;
}

uint64_t AppleBCMWLANCore::convertInfraControlManagementStatisticsToApple80211Counters(void *a1, OSData *a2, int a3)
{
  unsigned int v20 = 0;
  uint64_t v6 = (void *)IOMallocZeroData();
  memset(v21, 170, sizeof(v21));
  AppleBCMWLANUtil::AutoreleasedAlignedOSData::AutoreleasedAlignedOSData((AppleBCMWLANUtil::AutoreleasedAlignedOSData *)v21, a2, 4);
  uint64_t v7 = v21[0];
  if (v21[0])
  {
    if (v6)
    {
      v6[77] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v20, (int *)4, v21[0], 4uLL);
      v6[48] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v20, (int *)4, v7, 8uLL);
      v6[84] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v20, (int *)4, v7, 0xCuLL);
      v6[55] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v20, (int *)4, v7, 0x10uLL);
      v6[115] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v20, (int *)4, v7, 0x14uLL);
      v6[102] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v20, (int *)4, v7, 0x18uLL);
      v6[117] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v20, (int *)4, v7, 0x1CuLL);
      v6[104] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v20, (int *)4, v7, 0x20uLL);
      v6[123] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v20, (int *)4, v7, 0x24uLL);
      v6[110] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v20, (int *)4, v7, 0x28uLL);
      v6[116] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v20, (int *)4, v7, 0x2CuLL);
      v6[103] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v20, (int *)4, v7, 0x30uLL);
      v6[118] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v20, (int *)4, v7, 0x34uLL);
      v6[105] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v20, (int *)4, v7, 0x38uLL);
      v6[124] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v20, (int *)4, v7, 0x3CuLL);
      v6[111] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v20, (int *)4, v7, 0x40uLL);
      v6[125] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v20, (int *)4, v7, 0x44uLL);
      v6[112] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v20, (int *)4, v7, 0x48uLL);
      v6[119] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v20, (int *)4, v7, 0x4CuLL);
      v6[106] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v20, (int *)4, v7, 0x50uLL);
      v6[120] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v20, (int *)4, v7, 0x54uLL);
      v6[107] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v20, (int *)4, v7, 0x58uLL);
      v6[126] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v20, (int *)4, v7, 0x5CuLL);
      v6[113] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v20, (int *)4, v7, 0x60uLL);
      v6[24] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v20, (int *)4, v7, 0x64uLL);
      _OWORD v6[2] = AppleBCMWLANUtil::getCounterValueSafe((AppleBCMWLANUtil *)&v20, (int *)4, v7, 0x68uLL);
      switch(a3)
      {
        case 0:
          v6[108] = *(void *)(a1[9] + 17048);
          uint64_t v8 = *(void *)(a1[9] + 11304);
          if (v8)
          {
            if (((*(uint64_t (**)(uint64_t, void, void *))(*(void *)v8 + 792))(v8, 0, v6) & 1) == 0)
            {
              if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
              {
                (*(void (**)(void *))(*a1 + 1848))(a1);
                if (CCLogStream::shouldLog())
                {
                  int v16 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                  CCLogStream::logEmergency(v16, "[dk] %s@%d:ivars->fInfraSkywalkInterface->setFrameStats failed\n");
                }
              }
              goto LABEL_10;
            }
            memcpy((void *)(a1[9] + 16184), v6, 0x478uLL);
          }
          else if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
          {
            (*(void (**)(void *))(*a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              unsigned int v14 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
              CCLogStream::logAlert(v14, "[dk] %s@%d:kAPPLE80211InterfaceIdSTA %d Infra interface is not exist\n", "convertInfraControlManagementStatisticsToApple80211Counters", 30969, 30969);
            }
          }
          break;
        case 1:
          if (((*(uint64_t (**)(void, void, void *))(**(void **)(a1[9] + 11320) + 792))(*(void *)(a1[9] + 11320), 0, v6) & 1) == 0)
          {
            if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
            {
              (*(void (**)(void *))(*a1 + 1848))(a1);
              if (CCLogStream::shouldLog())
              {
                uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                CCLogStream::logEmergency(v9, "[dk] %s@%d:ivars->fApStaInterface->setFrameStats failed\n");
              }
            }
            goto LABEL_10;
          }
          break;
        case 2:
          if (((*(uint64_t (**)(void, void, void *))(**(void **)(a1[9] + 11312) + 792))(*(void *)(a1[9] + 11312), 0, v6) & 1) == 0)
          {
            if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
            {
              (*(void (**)(void *))(*a1 + 1848))(a1);
              if (CCLogStream::shouldLog())
              {
                uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                CCLogStream::logEmergency(v10, "[dk] %s@%d:ivars->fProximityInterface->setFrameStats failed\n");
              }
            }
            goto LABEL_10;
          }
          break;
        case 3:
          if (((*(uint64_t (**)(void, void, void *))(**(void **)(a1[9] + 29800) + 792))(*(void *)(a1[9] + 29800), 0, v6) & 1) == 0)
          {
            if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
            {
              (*(void (**)(void *))(*a1 + 1848))(a1);
              if (CCLogStream::shouldLog())
              {
                uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                CCLogStream::logEmergency(v11, "[dk] %s@%d:ivars->fP2PNANMgmtDataInterface->setFrameStats failed\n");
              }
            }
            goto LABEL_10;
          }
          break;
        case 4:
          if (((*(uint64_t (**)(void, void, void *))(**(void **)(a1[9] + 29808) + 792))(*(void *)(a1[9] + 29808), 0, v6) & 1) == 0)
          {
            if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
            {
              (*(void (**)(void *))(*a1 + 1848))(a1);
              if (CCLogStream::shouldLog())
              {
                unsigned int v15 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                CCLogStream::logEmergency(v15, "[dk] %s@%d:ivars->fP2PNANDataInterface->setFrameStats failed\n");
              }
            }
            goto LABEL_10;
          }
          break;
        default:
          if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
          {
            (*(void (**)(void *))(*a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v17 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
              CCLogStream::logAlert(v17, "[dk] %s@%d:Unhandled interfaceIndex %d\n", "convertInfraControlManagementStatisticsToApple80211Counters", 30996, a3);
            }
          }
LABEL_10:
          unsigned int v20 = -536870212;
          break;
      }
      uint64_t v12 = v20;
      AppleBCMWLANUtil::AutoreleasedAlignedOSData::~AutoreleasedAlignedOSData((AppleBCMWLANUtil::AutoreleasedAlignedOSData *)v21);
LABEL_25:
      IOFreeData();
      return v12;
    }
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v19 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logEmergency(v19, "[dk] %s@%d:Failed to allocate buffer\n", "convertInfraControlManagementStatisticsToApple80211Counters", 30928);
      }
    }
    uint64_t v12 = 3758097084;
    unsigned int v20 = -536870212;
    AppleBCMWLANUtil::AutoreleasedAlignedOSData::~AutoreleasedAlignedOSData((AppleBCMWLANUtil::AutoreleasedAlignedOSData *)v21);
  }
  else
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v18 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logEmergency(v18, "[dk] %s@%d:Failed to allocate alignedCounters\n", "convertInfraControlManagementStatisticsToApple80211Counters", 30925);
      }
    }
    uint64_t v12 = 3758097084;
    unsigned int v20 = -536870212;
    AppleBCMWLANUtil::AutoreleasedAlignedOSData::~AutoreleasedAlignedOSData((AppleBCMWLANUtil::AutoreleasedAlignedOSData *)v21);
    if (v6) {
      goto LABEL_25;
    }
  }
  return v12;
}

uint64_t AppleBCMWLANCore::parsePHYEcounterV1(AppleBCMWLANCore *this, OSData *a2)
{
  uint64_t v4 = (char *)IOMallocZeroData();
  if (((unint64_t)OSData::getBytesNoCopy(a2) & 3) != 0)
  {
    uint64_t v12 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v14, "[dk] %s@%d:Buffer not aligned\n");
      }
    }
  }
  else
  {
    BytesNoCopy = (unsigned __int8 *)OSData::getBytesNoCopy(a2);
    if (*(_WORD *)BytesNoCopy == 1)
    {
      uint64_t v6 = BytesNoCopy;
      if (14 * BytesNoCopy[4] + 6 == *((unsigned __int16 *)BytesNoCopy + 1))
      {
        mach_continuous_time();
        absolutetime_to_nanoseconds();
        if (v6[4])
        {
          unsigned int v7 = 0;
          uint64_t v8 = (unsigned __int16 *)(v6 + 10);
          do
          {
            unsigned __int16 AppleChannelSpec = AppleBCMWLANChanSpec::getAppleChannelSpec(*(int ***)(*((void *)this + 9) + 17576), *(v8 - 2));
            if (IO80211Controller::isLQMOSLOGEnabled(this))
            {
              AppleBCMWLANChanSpec::convToAscii(AppleChannelSpec, v4, 0x20u);
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this))
            {
              uint64_t v10 = AppleBCMWLANChanSpec::convToAscii(AppleChannelSpec, v4, 0x20u);
              IOLog("LQM-WIFI-PHY: ChanSpec %s, slice=%u phyWdg=%u noiseReq=%u noiseCrsbit=%u noiseApply=%u calCnt=%u\n", v10, *((unsigned __int8 *)v8 - 2), *v8, v8[1], v8[2], v8[3], v8[4]);
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this))
            {
              uint64_t v11 = AppleBCMWLANChanSpec::convToAscii(AppleChannelSpec, v4, 0x20u);
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY: ChanSpec %s, slice=%u phyWdg=%u noiseReq=%u noiseCrsbit=%u noiseApply=%u calCnt=%u\n", v11, *((unsigned __int8 *)v8 - 2), *v8, v8[1], v8[2], v8[3], v8[4]);
            }
            ++v7;
            v8 += 7;
          }
          while (v7 < v6[4]);
        }
        uint64_t v12 = 0;
        *(void *)(*((void *)this + 9) + 35416) = mach_continuous_time();
      }
      else
      {
        uint64_t v12 = 3758097084;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            int v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v16, "[dk] %s@%d:Unexpected length\n");
          }
        }
      }
    }
    else
    {
      uint64_t v12 = 3758097084;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v15, "[dk] %s@%d:Unexpected Version\n");
        }
      }
    }
  }
  if (v4) {
    IOFreeData();
  }
  return v12;
}

uint64_t AppleBCMWLANCore::parsePHYEcounterV2(AppleBCMWLANCore *this, OSData *a2)
{
  uint64_t v4 = (char *)IOMallocZeroData();
  if (((unint64_t)OSData::getBytesNoCopy(a2) & 3) != 0)
  {
    uint64_t v18 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v20 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v20, "[dk] %s@%d:Buffer not aligned\n");
      }
    }
  }
  else
  {
    BytesNoCopy = (unsigned __int8 *)OSData::getBytesNoCopy(a2);
    if (*(_WORD *)BytesNoCopy == 2)
    {
      uint64_t v6 = BytesNoCopy;
      if (92 * BytesNoCopy[4] + 8 == *((unsigned __int16 *)BytesNoCopy + 1))
      {
        mach_continuous_time();
        absolutetime_to_nanoseconds();
        if (v6[4])
        {
          unsigned int v7 = 0;
          uint64_t v8 = (unsigned __int16 *)(v6 + 50);
          do
          {
            unsigned __int16 AppleChannelSpec = AppleBCMWLANChanSpec::getAppleChannelSpec(*(int ***)(*((void *)this + 9) + 17576), *(v8 - 21));
            if (IO80211Controller::isLQMOSLOGEnabled(this))
            {
              AppleBCMWLANChanSpec::convToAscii(AppleChannelSpec, v4, 0x20u);
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this))
            {
              uint64_t v10 = AppleBCMWLANChanSpec::convToAscii(AppleChannelSpec, v4, 0x20u);
              IOLog("LQM-WIFI-PHY: ChanSpec %s, slice=%u phyWdg=%u noiseReq=%u noiseCrsbit=%u noiseApply=%u calCnt=%u featureflag=0x%04x chanSwitchCnt=%u chipTemp=%d femTemp=%d rxChain=%u txChain=%u\n", v10, *((unsigned __int8 *)v8 - 40), *(v8 - 19), *(v8 - 18), *(v8 - 17), *(v8 - 16), *(v8 - 15), *(v8 - 14), *(_DWORD *)(v8 - 13), *((char *)v8 - 22), *((char *)v8 - 21), *((unsigned __int8 *)v8 - 20), *((unsigned __int8 *)v8 - 19));
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this))
            {
              uint64_t v11 = AppleBCMWLANChanSpec::convToAscii(AppleChannelSpec, v4, 0x20u);
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY: ChanSpec %s, slice=%u phyWdg=%u noiseReq=%u noiseCrsbit=%u noiseApply=%u calCnt=%u featureflag=0x%04x chanSwitchCnt=%u chipTemp=%d femTemp=%d rxChain=%u txChain=%u\n", v11, *((unsigned __int8 *)v8 - 40), *(v8 - 19), *(v8 - 18), *(v8 - 17), *(v8 - 16), *(v8 - 15), *(v8 - 14), *(_DWORD *)(v8 - 13), *((char *)v8 - 22), *((char *)v8 - 21), *((unsigned __int8 *)v8 - 20), *((unsigned __int8 *)v8 - 19));
            }
            if (IO80211Controller::isLQMOSLOGEnabled(this))
            {
              AppleBCMWLANChanSpec::convToAscii(AppleChannelSpec, v4, 0x20u);
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this))
            {
              uint64_t v12 = AppleBCMWLANChanSpec::convToAscii(AppleChannelSpec, v4, 0x20u);
              IOLog("LQM-WIFI-PHY: ChanSpec %s, slice=%u ofdmDesense=%u bphyDesense=%u deafCnt=%u phylogNoiseMode=%u totalDesenseOn=%u initgainDesense=%u crsminInit=%u lteOfdmDesense=%u lteBphyDesense=%u crsminHigh=%d\n", v12, *((unsigned __int8 *)v8 - 40), *((unsigned __int8 *)v8 - 18), *((unsigned __int8 *)v8 - 17), *(v8 - 8), *((unsigned __int8 *)v8 - 14), *((unsigned __int8 *)v8 - 13), *((unsigned __int8 *)v8 - 12), *((unsigned __int8 *)v8 - 11), *((unsigned __int8 *)v8 - 10), *((unsigned __int8 *)v8 - 9), *((char *)v8 - 8));
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this))
            {
              size_t v13 = AppleBCMWLANChanSpec::convToAscii(AppleChannelSpec, v4, 0x20u);
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY: ChanSpec %s, slice=%u ofdmDesense=%u bphyDesense=%u deafCnt=%u phylogNoiseMode=%u totalDesenseOn=%u initgainDesense=%u crsminInit=%u lteOfdmDesense=%u lteBphyDesense=%u crsminHigh=%d\n", v13, *((unsigned __int8 *)v8 - 40), *((unsigned __int8 *)v8 - 18), *((unsigned __int8 *)v8 - 17), *(v8 - 8), *((unsigned __int8 *)v8 - 14), *((unsigned __int8 *)v8 - 13), *((unsigned __int8 *)v8 - 12), *((unsigned __int8 *)v8 - 11), *((unsigned __int8 *)v8 - 10), *((unsigned __int8 *)v8 - 9), *((char *)v8 - 8));
            }
            if (IO80211Controller::isLQMOSLOGEnabled(this))
            {
              AppleBCMWLANChanSpec::convToAscii(AppleChannelSpec, v4, 0x20u);
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this))
            {
              unsigned int v14 = AppleBCMWLANChanSpec::convToAscii(AppleChannelSpec, v4, 0x20u);
              IOLog("LQM-WIFI-PHY: ChanSpec %s, slice=%u weakestRssi=%d edThreshold=%d edCrsStatus=0x%04x preemptStatus1=0x%04x preemptStatus2=0x%04x preemptStatus3=0x%04x preemptStatus4=0x%04x glitch=%u bphyGlitch=%u badplcp=%d bphyBadplcp=%u\n", v14, *((unsigned __int8 *)v8 - 40), *((char *)v8 - 7), *((char *)v8 - 6), *(v8 - 2), *(v8 - 1), *v8, v8[1], v8[2], *(_DWORD *)(v8 + 3), *(_DWORD *)(v8 + 5), *(_DWORD *)(v8 + 7), *(_DWORD *)(v8 + 9));
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this))
            {
              unsigned int v15 = AppleBCMWLANChanSpec::convToAscii(AppleChannelSpec, v4, 0x20u);
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY: ChanSpec %s, slice=%u weakestRssi=%d edThreshold=%d edCrsStatus=0x%04x preemptStatus1=0x%04x preemptStatus2=0x%04x preemptStatus3=0x%04x preemptStatus4=0x%04x glitch=%u bphyGlitch=%u badplcp=%d bphyBadplcp=%u\n", v15, *((unsigned __int8 *)v8 - 40), *((char *)v8 - 7), *((char *)v8 - 6), *(v8 - 2), *(v8 - 1), *v8, v8[1], v8[2], *(_DWORD *)(v8 + 3), *(_DWORD *)(v8 + 5), *(_DWORD *)(v8 + 7), *(_DWORD *)(v8 + 9));
            }
            if (IO80211Controller::isLQMOSLOGEnabled(this))
            {
              AppleBCMWLANChanSpec::convToAscii(AppleChannelSpec, v4, 0x20u);
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this))
            {
              int v16 = AppleBCMWLANChanSpec::convToAscii(AppleChannelSpec, v4, 0x20u);
              IOLog("LQM-WIFI-PHY: ChanSpec %s, slice=%u ccaDurMS=%d ccaEdDuration=%u crsminPwr0=%d rssi0=%d noisePwr0[%d %d %d %d %d %d %d %d] crsminPwr1=%d rssi1=%d noisePwr1[%d %d %d %d %d %d %d %d]", v16, *((unsigned __int8 *)v8 - 40), *(_DWORD *)(v8 + 11), *(_DWORD *)(v8 + 13), *((char *)v8 + 30), *((char *)v8 + 31), *((char *)v8 + 32), *((char *)v8 + 33), *((char *)v8 + 34), *((char *)v8 + 35), *((char *)v8 + 36), *((char *)v8 + 37), *((char *)v8 + 38), *((char *)v8 + 39), *((char *)v8 + 40), *((char *)v8 + 41), *((char *)v8 + 42),
                *((char *)v8 + 43),
                *((char *)v8 + 44),
                *((char *)v8 + 45),
                *((char *)v8 + 46),
                *((char *)v8 + 47),
                *((char *)v8 + 48),
                *((char *)v8 + 49));
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this))
            {
              uint64_t v17 = AppleBCMWLANChanSpec::convToAscii(AppleChannelSpec, v4, 0x20u);
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY: ChanSpec %s, slice=%u ccaDurMS=%d ccaEdDuration=%u crsminPwr0=%d rssi0=%d noisePwr0[%d %d %d %d %d %d %d %d] crsminPwr1=%d rssi1=%d noisePwr1[%d %d %d %d %d %d %d %d]", v17, *((unsigned __int8 *)v8 - 40), *(_DWORD *)(v8 + 11), *(_DWORD *)(v8 + 13), *((char *)v8 + 30), *((char *)v8 + 31), *((char *)v8 + 32), *((char *)v8 + 33), *((char *)v8 + 34), *((char *)v8 + 35), *((char *)v8 + 36), *((char *)v8 + 37), *((char *)v8 + 38), *((char *)v8 + 39), *((char *)v8 + 40), *((char *)v8 + 41),
                *((char *)v8 + 42),
                *((char *)v8 + 43),
                *((char *)v8 + 44),
                *((char *)v8 + 45),
                *((char *)v8 + 46),
                *((char *)v8 + 47),
                *((char *)v8 + 48),
                *((char *)v8 + 49));
            }
            ++v7;
            v8 += 46;
          }
          while (v7 < v6[4]);
        }
        uint64_t v18 = 0;
        *(void *)(*((void *)this + 9) + 35416) = mach_continuous_time();
      }
      else
      {
        uint64_t v18 = 3758097084;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            int v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v22, "[dk] %s@%d:Unexpected length\n");
          }
        }
      }
    }
    else
    {
      uint64_t v18 = 3758097084;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v21 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v21, "[dk] %s@%d:Unexpected Version\n");
        }
      }
    }
  }
  if (v4) {
    IOFreeData();
  }
  return v18;
}

uint64_t AppleBCMWLANCore::parsePHYEcounterV3(AppleBCMWLANCore *this, OSData *a2)
{
  uint64_t v4 = *(AppleBCMWLANBssManager **)(*((void *)this + 9) + 5440);
  if (v4)
  {
    uint64_t CurrentBSS = AppleBCMWLANBssManager::getCurrentBSS(v4);
    if (IO80211BssManager::isAssociated(*(IO80211BssManager **)(*((void *)this + 9) + 5440))) {
      BOOL v6 = CurrentBSS == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(*((void *)this + 9) + 5440));
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 256))(v7);
      goto LABEL_9;
    }
  }
  else
  {
    IO80211BssManager::isAssociated(0);
  }
  int v8 = 0;
LABEL_9:
  uint64_t v9 = (char *)IOMallocZeroData();
  if (((unint64_t)OSData::getBytesNoCopy(a2) & 3) != 0)
  {
    uint64_t v18 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v20 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v20, "[dk] %s@%d:Buffer not aligned\n");
      }
    }
  }
  else
  {
    BytesNoCopy = (unsigned __int16 *)OSData::getBytesNoCopy(a2);
    if (*BytesNoCopy == 3)
    {
      uint64_t v11 = BytesNoCopy;
      if (76 * *((unsigned __int8 *)BytesNoCopy + 4) + 8 == BytesNoCopy[1])
      {
        mach_continuous_time();
        absolutetime_to_nanoseconds();
        if (*((unsigned char *)v11 + 4))
        {
          uint64_t v12 = 0;
          unsigned int v13 = 0;
          do
          {
            unint64_t AppleChannelSpec = (unsigned __int16)AppleBCMWLANChanSpec::getAppleChannelSpec(*(int ***)(*((void *)this + 9) + 17576), v11[v12 + 4]);
            if (v8 == ChanSpecGetPrimaryChannel())
            {
              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
              {
                (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                if (CCLogStream::shouldLog())
                {
                  int v24 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                  int v23 = *v11;
                  unsigned int v15 = AppleBCMWLANChanSpec::convToAscii(AppleChannelSpec, v9, 0x20u);
                  CCLogStream::logAlert(v24, "[dk] %s@%d:Versiouint64_t n = %u, ChanSpec %s, slice=%u phyWdg=%u noiseReq=%u noiseCrsbit=%u crsminPwrIdx=%u featureflag=0x%04x chanSwitchCnt=%u chipTemp=%d femTemp=%d ofdmDesense=%u bphyDesense=%u\n", "parsePHYEcounterV3", 31194, v23, v15, HIBYTE(v11[v12 + 10]), v11[v12 + 5], v11[v12 + 6], v11[v12 + 7], LOBYTE(v11[v12 + 10]), v11[v12 + 19], HIBYTE(v11[v12 + 17]), SHIBYTE(v11[v12 + 14]), SLOBYTE(v11[v12 + 15]), HIBYTE(v11[v12 + 13]), LOBYTE(v11[v12 + 14]));
                }
              }
              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
              {
                (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                if (CCLogStream::shouldLog())
                {
                  int v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                  CCLogStream::logAlert(v16, "[dk] %s@%d:gbdBphySleepCnt=%u gbdOfdmSleepCnt=%u homeChan=0x%x scca_txstall_precondition=%u, crsminPwrApplyCnt=%u edThreshold=%d preemptStatus2=0x%04x totalGlitch=%u bphyGlitch=%u badplcp=%d bphyBadplcp=%u\n", "parsePHYEcounterV3", 31200, LOBYTE(v11[v12 + 12]), HIBYTE(v11[v12 + 12]), LOBYTE(v11[v12 + 13]), HIBYTE(v11[v12 + 18]), v11[v12 + 22], SLOBYTE(v11[v12 + 17]), v11[v12 + 25], *(_DWORD *)&v11[v12 + 28], *(_DWORD *)&v11[v12 + 30], *(_DWORD *)&v11[v12 + 32], *(_DWORD *)&v11[v12 + 34]);
                }
              }
              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
              {
                (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                  CCLogStream::logAlert(v17, "[dk] %s@%d:ccaDurMS=%d ccaEdDuration=%u crsminPwr0=%d noiseLevelInst0=%d crsminPwr1=%d noiseLevelInst1=%d", "parsePHYEcounterV3", 31205, *(_DWORD *)&v11[v12 + 36], *(_DWORD *)&v11[v12 + 38], SLOBYTE(v11[v12 + 40]), SHIBYTE(v11[v12 + 40]), SLOBYTE(v11[v12 + 41]), SHIBYTE(v11[v12 + 41]));
                }
              }
            }
            ++v13;
            v12 += 38;
          }
          while (v13 < *((unsigned __int8 *)v11 + 4));
        }
        uint64_t v18 = 0;
        *(void *)(*((void *)this + 9) + 35416) = mach_continuous_time();
      }
      else
      {
        uint64_t v18 = 3758097084;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            int v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v22, "[dk] %s@%d:Unexpected length\n");
          }
        }
      }
    }
    else
    {
      uint64_t v18 = 3758097084;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v21 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v21, "[dk] %s@%d:Unexpected Version\n");
        }
      }
    }
  }
  if (v9) {
    IOFreeData();
  }
  return v18;
}

uint64_t AppleBCMWLANCore::parsePHYEcounterV4(AppleBCMWLANCore *this, OSData *a2)
{
  uint64_t v4 = IOMallocZeroData();
  if (((unint64_t)OSData::getBytesNoCopy(a2) & 3) != 0)
  {
    uint64_t v9 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v11, "[dk] %s@%d:Buffer not aligned\n");
      }
    }
  }
  else
  {
    BytesNoCopy = (unsigned __int16 *)OSData::getBytesNoCopy(a2);
    BOOL v6 = BytesNoCopy + 4;
    if (*BytesNoCopy == 4)
    {
      uint64_t v7 = BytesNoCopy;
      if (((244 * *((unsigned __int8 *)BytesNoCopy + 4) + 8) & 0xFFFC) == BytesNoCopy[1])
      {
        mach_continuous_time();
        absolutetime_to_nanoseconds();
        if (*((unsigned char *)v7 + 4))
        {
          unsigned int v8 = 0;
          do
          {
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  Versiouint64_t n = %u, ChanSpec=0x%04x, phy_wdg=%u, noise_req=%u, noise_crsbit=%u, noise_apply=%u, cal_counter=%u, slice=%u\n", *v7, *v6, v6[1], v6[2], v6[3], v6[4], v6[5], *((unsigned __int8 *)v6 + 12));
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  Versiouint64_t n = %u, ChanSpec=0x%04x, phy_wdg=%u, noise_req=%u, noise_crsbit=%u, noise_apply=%u, cal_counter=%u, slice=%u\n", *v7, *v6, v6[1], v6[2], v6[3], v6[4], v6[5], *((unsigned __int8 *)v6 + 12));
            }
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  rxchain=%u, txchain=%u, gbd_bphy_sleep_counter=%u, gbd_ofdm_sleep_counter=%u, curr_home_channel=%u, gbd_ofdm_desense=%u, gbd_bphy_desense=%u \n", *((unsigned __int8 *)v6 + 13), *((unsigned __int8 *)v6 + 14), *((unsigned __int8 *)v6 + 15), *((unsigned __int8 *)v6 + 16), *((unsigned __int8 *)v6 + 17), *((unsigned __int8 *)v6 + 18), *((unsigned __int8 *)v6 + 19));
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  rxchain=%u, txchain=%u, gbd_bphy_sleep_counter=%u, gbd_ofdm_sleep_counter=%u, curr_home_channel=%u, gbd_ofdm_desense=%u, gbd_bphy_desense=%u \n", *((unsigned __int8 *)v6 + 13), *((unsigned __int8 *)v6 + 14), *((unsigned __int8 *)v6 + 15), *((unsigned __int8 *)v6 + 16), *((unsigned __int8 *)v6 + 17), *((unsigned __int8 *)v6 + 18), *((unsigned __int8 *)v6 + 19));
            }
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  chiptemp=%d, femtemp=%d, btcx_mode=%d, ltecx_mode=%d, weakest_rssi=%d, ed_threshold=%d, chan_switch_cnt=%u, phycal_disable=%u, scca_txstall_precondition=%u, featureflag=%u\n", *((char *)v6 + 20), *((char *)v6 + 21), *((_DWORD *)v6 + 6), *((char *)v6 + 23), *((char *)v6 + 22), *((char *)v6 + 28), *((unsigned __int8 *)v6 + 29), *((unsigned __int8 *)v6 + 30), *((unsigned __int8 *)v6 + 31), v6[16]);
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  chiptemp=%d, femtemp=%d, btcx_mode=%d, ltecx_mode=%d, weakest_rssi=%d, ed_threshold=%d, chan_switch_cnt=%u, phycal_disable=%u, scca_txstall_precondition=%u, featureflag=%u\n", *((char *)v6 + 20), *((char *)v6 + 21), *((_DWORD *)v6 + 6), *((char *)v6 + 23), *((char *)v6 + 22), *((char *)v6 + 28), *((unsigned __int8 *)v6 + 29), *((unsigned __int8 *)v6 + 30), *((unsigned __int8 *)v6 + 31), v6[16]);
            }
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  deaf_count=%u, noise_mmt_overdue=%u, crsmin_pwr_apply_cnt=%u, ed_crs_status=%u, preempt_status1=%u, preempt_status2=%u, preempt_status3=%u, preempt_status4=%u , counter_noise_iqest_to=%u, cca_stats_total_glitch=%u, cca_stats_bphy_glitch=%u, cca_stats_total_badplcp=%u,  cca_stats_bphy_badplcp=%u, cca_stats_mbsstime= %u, cca_stats_ed_duration=%u\n", v6[17], v6[18], v6[19], v6[20], v6[21], v6[22], v6[23], v6[24], v6[25], *((_DWORD *)v6 + 13), *((_DWORD *)v6 + 14), *((_DWORD *)v6 + 15), *((_DWORD *)v6 + 16), *((_DWORD *)v6 + 17), *((_DWORD *)v6 + 18));
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  deaf_count=%u, noise_mmt_overdue=%u, crsmin_pwr_apply_cnt=%u, ed_crs_status=%u, preempt_status1=%u, preempt_status2=%u, preempt_status3=%u, preempt_status4=%u , counter_noise_iqest_to=%u, cca_stats_total_glitch=%u, cca_stats_bphy_glitch=%u, cca_stats_total_badplcp=%u,  cca_stats_bphy_badplcp=%u, cca_stats_mbsstime= %u, cca_stats_ed_duration=%u\n", v6[17], v6[18], v6[19], v6[20], v6[21], v6[22], v6[23], v6[24], v6[25], *((_DWORD *)v6 + 13), *((_DWORD *)v6 + 14), *((_DWORD *)v6 + 15), *((_DWORD *)v6 + 16), *((_DWORD *)v6 + 17),
            }
                *((_DWORD *)v6 + 18));
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  measurehold=%u, rxsense_disable_req_ch=%u, ocl_disable_reqs=%u, interference_mode=%u, power_mode=%u, obss_last_read_time=%u, asym_intf_ed_thresh=%d, obss_mit_bw=%u , obss_stats_cnt=%u, dynbw_init_reducebw_cnt=%u, dynbw_resp_reducebw_cnt=%u, dynbw_rxdata_reducebw_cnt=%u,  obss_mmt_skip_cnt=%u, obss_mmt_no_result_cnt= %u, obss_mmt_intr_err_cnt=%u\n", *((_DWORD *)v6 + 19), *((_DWORD *)v6 + 20), *((_DWORD *)v6 + 21), *((_DWORD *)v6 + 22), *((_DWORD *)v6 + 23), *((_DWORD *)v6 + 24), *((_DWORD *)v6 + 25), v6[52], v6[53], v6[54], v6[55], v6[56], v6[57], v6[58], v6[59]);
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  measurehold=%u, rxsense_disable_req_ch=%u, ocl_disable_reqs=%u, interference_mode=%u, power_mode=%u, obss_last_read_time=%u, asym_intf_ed_thresh=%d, obss_mit_bw=%u , obss_stats_cnt=%u, dynbw_init_reducebw_cnt=%u, dynbw_resp_reducebw_cnt=%u, dynbw_rxdata_reducebw_cnt=%u,  obss_mmt_skip_cnt=%u, obss_mmt_no_result_cnt= %u, obss_mmt_intr_err_cnt=%u\n", *((_DWORD *)v6 + 19), *((_DWORD *)v6 + 20), *((_DWORD *)v6 + 21), *((_DWORD *)v6 + 22), *((_DWORD *)v6 + 23), *((_DWORD *)v6 + 24), *((_DWORD *)v6 + 25), v6[52], v6[53], v6[54], v6[55], v6[56], v6[57], v6[58],
            }
                v6[59]);
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  gci_lst_inv_ctr=%u, gci_lst_rst_ctr=%u, gci_lst_sem_ctr=%u, gci_lst_rb_st=%u, gci_dbg01=%u, gci_dbg02=%u, gci_dbg03=%u , gci_dbg04=%u, gci_dbg05=%u, gci_lst_st_msk=%u, gci_inv_tx=%u,  gci_inv_rx=%u, gci_rst_tx= %u, gci_rst_rx=%u\n", v6[60], v6[61], v6[62], v6[63], v6[64], v6[65], v6[66], v6[67], v6[68], v6[69], v6[70], v6[71], v6[72], v6[73]);
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  gci_lst_inv_ctr=%u, gci_lst_rst_ctr=%u, gci_lst_sem_ctr=%u, gci_lst_rb_st=%u, gci_dbg01=%u, gci_dbg02=%u, gci_dbg03=%u , gci_dbg04=%u, gci_dbg05=%u, gci_lst_st_msk=%u, gci_inv_tx=%u,  gci_inv_rx=%u, gci_rst_tx= %u, gci_rst_rx=%u\n", v6[60], v6[61], v6[62], v6[63], v6[64], v6[65], v6[66], v6[67], v6[68], v6[69], v6[70], v6[71], v6[72], v6[73]);
            }
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  gci_sem_ctr=%u, gci_invstate=%u, gci_ctl2=%u, gci_chan=%u, gci_cm=%u, gci_sc=%u, gci_rst_sc=%u, gci_prdc_rx=%u , gci_wk_rx=%u, gci_rmac_rx=%u, gci_tx_rx=%u, asym_intf_stats=%u,  asym_intf_ncal_crs_stat=%u, ed_crsEn= %d, nvcfg0=%d, cal_suppressed_cntr_ed=%u \n", v6[74], v6[75], v6[76], v6[77], v6[78], v6[79], v6[80], v6[81], v6[82], v6[83], v6[84], v6[85], v6[86], (__int16)v6[87], (__int16)v6[88], *((unsigned __int8 *)v6 + 178));
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  gci_sem_ctr=%u, gci_invstate=%u, gci_ctl2=%u, gci_chan=%u, gci_cm=%u, gci_sc=%u, gci_rst_sc=%u, gci_prdc_rx=%u , gci_wk_rx=%u, gci_rmac_rx=%u, gci_tx_rx=%u, asym_intf_stats=%u,  asym_intf_ncal_crs_stat=%u, ed_crsEn= %d, nvcfg0=%d, cal_suppressed_cntr_ed=%u \n", v6[74], v6[75], v6[76], v6[77], v6[78], v6[79], v6[80], v6[81], v6[82], v6[83], v6[84], v6[85], v6[86], (__int16)v6[87], (__int16)v6[88],
            }
                *((unsigned __int8 *)v6 + 178));
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  sc_dccal_incc_cnt=%u, sc_noisecal_incc_cnt=%u, obss_need_updt=%u, obss_mit_status=%u, obss_final_rec_bw=%u, btc_mode=%u, asym_intf_ant_noise_idx=%u, asym_intf_pending_host_req_type=%u , asym_intf_ncal_crs_stat_idx=%u, rxsense_noise_idx=%d, rxsense_offset=%d, asym_intf_tx_smartcca_cm=%d,  asym_intf_rx_noise_mit_cm=%d, asym_intf_avg_noise[0]= %d, asym_intf_latest_noise[0]=%d, asym_intf_avg_noise[1]=%d, asym_intf_latest_noise[1]=%d\n", *((unsigned __int8 *)v6 + 179), *((unsigned __int8 *)v6 + 180), *((unsigned __int8 *)v6 + 181), *((unsigned __int8 *)v6 + 182), *((unsigned __int8 *)v6 + 183), *((unsigned __int8 *)v6 + 184), *((unsigned __int8 *)v6 + 185), *((unsigned __int8 *)v6 + 186), *((unsigned __int8 *)v6 + 187), *((char *)v6 + 188), *((char *)v6 + 189), *((char *)v6 + 190), *((char *)v6 + 191), *((char *)v6 + 192),
            }
                *((char *)v6 + 194),
                *((char *)v6 + 193),
                *((char *)v6 + 195));
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  sc_dccal_incc_cnt=%u, sc_noisecal_incc_cnt=%u, obss_need_updt=%u, obss_mit_status=%u, obss_final_rec_bw=%u, btc_mode=%u, asym_intf_ant_noise_idx=%u, asym_intf_pending_host_req_type=%u , asym_intf_ncal_crs_stat_idx=%u, rxsense_noise_idx=%d, rxsense_offset=%d, asym_intf_tx_smartcca_cm=%d,  asym_intf_rx_noise_mit_cm=%d, asym_intf_avg_noise[0]= %d, asym_intf_latest_noise[0]=%d, asym_intf_avg_noise[1]=%d, asym_intf_latest_noise[1]=%d\n", *((unsigned __int8 *)v6 + 179), *((unsigned __int8 *)v6 + 180), *((unsigned __int8 *)v6 + 181), *((unsigned __int8 *)v6 + 182), *((unsigned __int8 *)v6 + 183), *((unsigned __int8 *)v6 + 184), *((unsigned __int8 *)v6 + 185), *((unsigned __int8 *)v6 + 186), *((unsigned __int8 *)v6 + 187), *((char *)v6 + 188), *((char *)v6 + 189), *((char *)v6 + 190), *((char *)v6 + 191),
            }
                *((char *)v6 + 192),
                *((char *)v6 + 194),
                *((char *)v6 + 193),
                *((char *)v6 + 195));
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  obss_curr_det[0] = %u, obss_curr_det[1] = %u, obss_curr_det[2] = %u, obss_curr_det[3] = %u, obss_curr_det[4] = %u, obss_curr_det[5] = %u, obss_curr_det[6] = %u, obss_curr_det[7] = %u \n", *((unsigned __int8 *)v6 + 196), *((unsigned __int8 *)v6 + 197), *((unsigned __int8 *)v6 + 198), *((unsigned __int8 *)v6 + 199), *((unsigned __int8 *)v6 + 200), *((unsigned __int8 *)v6 + 201), *((unsigned __int8 *)v6 + 202), *((unsigned __int8 *)v6 + 203));
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  obss_curr_det[0] = %u, obss_curr_det[1] = %u, obss_curr_det[2] = %u, obss_curr_det[3] = %u, obss_curr_det[4] = %u, obss_curr_det[5] = %u, obss_curr_det[6] = %u, obss_curr_det[7] = %u \n", *((unsigned __int8 *)v6 + 196), *((unsigned __int8 *)v6 + 197), *((unsigned __int8 *)v6 + 198), *((unsigned __int8 *)v6 + 199), *((unsigned __int8 *)v6 + 200), *((unsigned __int8 *)v6 + 201), *((unsigned __int8 *)v6 + 202), *((unsigned __int8 *)v6 + 203));
            }
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  bad_txbaseidx_cnt[0]=%u curr_tssival[0]=%u pwridx_init[0]=%u auxphystats[0]=%d phystatsgaininfo[0]=%u flexgaininfo_A[0]=%u crsmin_pwr_idx[0]=%u, baseindxval[0]=%u, crsmin_pwr[0]=%d, noise_level_inst[0]=%d, tgt_pwr[0]=%d, estpwradj[0]=%d bad_txbaseidx_cnt[1]=%u curr_tssival[1]=%u pwridx_init[1]=%u auxphystats[1]=%d phystatsgaininfo[1]=%u flexgaininfo_A[1]=%u crsmin_pwr_idx[1]=%u, baseindxval[1]=%u, crsmin_pwr[1]=%d, noise_level_inst[1]=%d, tgt_pwr[1]=%d, estpwradj[1]=%d \n", v6[102], v6[103], v6[104], v6[105], v6[106], v6[107], *((unsigned __int8 *)v6 + 216), *((unsigned __int8 *)v6 + 217), *((char *)v6 + 218), *((char *)v6 + 219), *((char *)v6 + 220), *((char *)v6 + 221), v6[112], v6[113],
            }
                v6[114],
                v6[115],
                v6[116],
                v6[117],
                *((unsigned __int8 *)v6 + 236),
                *((unsigned __int8 *)v6 + 237),
                *((char *)v6 + 238),
                *((char *)v6 + 239),
                *((char *)v6 + 240),
                *((char *)v6 + 241));
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  bad_txbaseidx_cnt[0]=%u curr_tssival[0]=%u pwridx_init[0]=%u auxphystats[0]=%d phystatsgaininfo[0]=%u flexgaininfo_A[0]=%u crsmin_pwr_idx[0]=%u, baseindxval[0]=%u, crsmin_pwr[0]=%d, noise_level_inst[0]=%d, tgt_pwr[0]=%d, estpwradj[0]=%d bad_txbaseidx_cnt[1]=%u curr_tssival[1]=%u pwridx_init[1]=%u auxphystats[1]=%d phystatsgaininfo[1]=%u flexgaininfo_A[1]=%u crsmin_pwr_idx[1]=%u, baseindxval[1]=%u, crsmin_pwr[1]=%d, noise_level_inst[1]=%d, tgt_pwr[1]=%d, estpwradj[1]=%d \n", v6[102], v6[103], v6[104], v6[105], v6[106], v6[107], *((unsigned __int8 *)v6 + 216), *((unsigned __int8 *)v6 + 217), *((char *)v6 + 218), *((char *)v6 + 219), *((char *)v6 + 220), *((char *)v6 + 221), v6[112],
            }
                v6[113],
                v6[114],
                v6[115],
                v6[116],
                v6[117],
                *((unsigned __int8 *)v6 + 236),
                *((unsigned __int8 *)v6 + 237),
                *((char *)v6 + 238),
                *((char *)v6 + 239),
                *((char *)v6 + 240),
                *((char *)v6 + 241));
            v6 += 122;
            ++v8;
          }
          while (v8 < *((unsigned __int8 *)v7 + 4));
        }
        uint64_t v9 = 0;
        *(void *)(*((void *)this + 9) + 35416) = mach_continuous_time();
      }
      else
      {
        uint64_t v9 = 3758097084;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            unsigned int v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v13, "[dk] %s@%d:Unexpected length\n");
          }
        }
      }
    }
    else
    {
      uint64_t v9 = 3758097084;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v12, "[dk] %s@%d:Unexpected Version\n");
        }
      }
    }
  }
  if (v4) {
    IOFreeData();
  }
  return v9;
}

uint64_t AppleBCMWLANCore::parsePHYEcounterV5(AppleBCMWLANCore *this, OSData *a2)
{
  uint64_t v4 = *(AppleBCMWLANBssManager **)(*((void *)this + 9) + 5440);
  if (v4)
  {
    uint64_t CurrentBSS = AppleBCMWLANBssManager::getCurrentBSS(v4);
    if (IO80211BssManager::isAssociated(*(IO80211BssManager **)(*((void *)this + 9) + 5440))) {
      BOOL v6 = CurrentBSS == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(*((void *)this + 9) + 5440));
      int v25 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 256))(v7);
      goto LABEL_9;
    }
  }
  else
  {
    IO80211BssManager::isAssociated(0);
  }
  int v25 = 0;
LABEL_9:
  *(_WORD *)int v27 = -21846;
  uint64_t v8 = IOMallocZeroData();
  if (((unint64_t)OSData::getBytesNoCopy(a2) & 3) != 0)
  {
    uint64_t v20 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v22, "[dk] %s@%d:Buffer not aligned\n");
      }
    }
  }
  else
  {
    BytesNoCopy = (unsigned __int16 *)OSData::getBytesNoCopy(a2);
    uint64_t v10 = BytesNoCopy + 4;
    if (*BytesNoCopy == 5)
    {
      uint64_t v11 = BytesNoCopy;
      if (((260 * *((unsigned __int8 *)BytesNoCopy + 4) + 8) & 0xFFFC) == BytesNoCopy[1])
      {
        mach_continuous_time();
        absolutetime_to_nanoseconds();
        if (*((unsigned char *)v11 + 4))
        {
          unsigned int v12 = 0;
          int v26 = v11;
          do
          {
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  Versiouint64_t n = %u, ChanSpec=0x%04x, phy_wdg=%u, noise_req=%u, noise_crsbit=%u, noise_apply=%u, cal_counter=%u, slice=%u\n", *v11, *v10, v10[1], v10[2], v10[3], v10[4], v10[5], *((unsigned __int8 *)v10 + 12));
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  Versiouint64_t n = %u, ChanSpec=0x%04x, phy_wdg=%u, noise_req=%u, noise_crsbit=%u, noise_apply=%u, cal_counter=%u, slice=%u\n", *v11, *v10, v10[1], v10[2], v10[3], v10[4], v10[5], *((unsigned __int8 *)v10 + 12));
            }
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  gbd_ofdm_desense=%u, gbd_bphy_desense=%u, gbd_bphy_sleep_counter=%u, gbd_ofdm_sleep_counter=%u, rxchain=%u, txchain=%u \n", *((unsigned __int8 *)v10 + 18), *((unsigned __int8 *)v10 + 19), *((unsigned __int8 *)v10 + 15), *((unsigned __int8 *)v10 + 16), *((unsigned __int8 *)v10 + 13), *((unsigned __int8 *)v10 + 14));
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  gbd_ofdm_desense=%u, gbd_bphy_desense=%u, gbd_bphy_sleep_counter=%u, gbd_ofdm_sleep_counter=%u, rxchain=%u, txchain=%u \n", *((unsigned __int8 *)v10 + 18), *((unsigned __int8 *)v10 + 19), *((unsigned __int8 *)v10 + 15), *((unsigned __int8 *)v10 + 16), *((unsigned __int8 *)v10 + 13), *((unsigned __int8 *)v10 + 14));
            }
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  chiptemp=%d, femtemp=%d, btcx_mode=%d, ltecx_mode=%d, weakest_rssi=%d, chan_switch_cnt=%u, phycal_disable=%u, featureflag=%u\n", *((char *)v10 + 20), *((char *)v10 + 21), *((_DWORD *)v10 + 6), *((char *)v10 + 23), *((char *)v10 + 22), *((unsigned __int8 *)v10 + 28), *((unsigned __int8 *)v10 + 29), v10[16]);
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  chiptemp=%d, femtemp=%d, btcx_mode=%d, ltecx_mode=%d, weakest_rssi=%d, chan_switch_cnt=%u, phycal_disable=%u, featureflag=%u\n", *((char *)v10 + 20), *((char *)v10 + 21), *((_DWORD *)v10 + 6), *((char *)v10 + 23), *((char *)v10 + 22), *((unsigned __int8 *)v10 + 28), *((unsigned __int8 *)v10 + 29), v10[16]);
            }
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  deaf_count=%u, noise_mmt_overdue=%u, crsmin_pwr_apply_cnt=%u, ed_crs_status=%u, preempt_status1=%u, preempt_status2=%u, preempt_status3=%u, preempt_status4=%u , counter_noise_iqest_to=%u, cca_stats_total_glitch=%u, cca_stats_bphy_glitch=%u, cca_stats_total_badplcp=%u,  cca_stats_bphy_badplcp=%u, cca_stats_mbsstime= %u, cca_stats_ed_duration=%u\n", v10[17], v10[18], v10[19], v10[20], v10[21], v10[22], v10[23], v10[24], v10[25], *((_DWORD *)v10 + 13), *((_DWORD *)v10 + 14), *((_DWORD *)v10 + 15), *((_DWORD *)v10 + 16), *((_DWORD *)v10 + 17), *((_DWORD *)v10 + 18));
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  deaf_count=%u, noise_mmt_overdue=%u, crsmin_pwr_apply_cnt=%u, ed_crs_status=%u, preempt_status1=%u, preempt_status2=%u, preempt_status3=%u, preempt_status4=%u , counter_noise_iqest_to=%u, cca_stats_total_glitch=%u, cca_stats_bphy_glitch=%u, cca_stats_total_badplcp=%u,  cca_stats_bphy_badplcp=%u, cca_stats_mbsstime= %u, cca_stats_ed_duration=%u\n", v10[17], v10[18], v10[19], v10[20], v10[21], v10[22], v10[23], v10[24], v10[25], *((_DWORD *)v10 + 13), *((_DWORD *)v10 + 14), *((_DWORD *)v10 + 15), *((_DWORD *)v10 + 16), *((_DWORD *)v10 + 17),
            }
                *((_DWORD *)v10 + 18));
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  measurehold=%u, rxsense_disable_req_ch=%u, ocl_disable_reqs=%u, interference_mode=%u, power_mode=%u, obss_last_read_time=%u, asym_intf_ed_thresh=%d, obss_mit_bw=%u , obss_stats_cnt=%u, dynbw_init_reducebw_cnt=%u, dynbw_resp_reducebw_cnt=%u, dynbw_rxdata_reducebw_cnt=%u,  obss_mmt_skip_cnt=%u, obss_mmt_no_result_cnt= %u, obss_mmt_intr_err_cnt=%u\n", *((_DWORD *)v10 + 19), *((_DWORD *)v10 + 20), *((_DWORD *)v10 + 21), *((_DWORD *)v10 + 22), *((_DWORD *)v10 + 23), *((_DWORD *)v10 + 24), *((_DWORD *)v10 + 25), v10[52], v10[53], v10[54], v10[55], v10[56], v10[57], v10[58], v10[59]);
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  measurehold=%u, rxsense_disable_req_ch=%u, ocl_disable_reqs=%u, interference_mode=%u, power_mode=%u, obss_last_read_time=%u, asym_intf_ed_thresh=%d, obss_mit_bw=%u , obss_stats_cnt=%u, dynbw_init_reducebw_cnt=%u, dynbw_resp_reducebw_cnt=%u, dynbw_rxdata_reducebw_cnt=%u,  obss_mmt_skip_cnt=%u, obss_mmt_no_result_cnt= %u, obss_mmt_intr_err_cnt=%u\n", *((_DWORD *)v10 + 19), *((_DWORD *)v10 + 20), *((_DWORD *)v10 + 21), *((_DWORD *)v10 + 22), *((_DWORD *)v10 + 23), *((_DWORD *)v10 + 24), *((_DWORD *)v10 + 25), v10[52], v10[53], v10[54], v10[55], v10[56], v10[57], v10[58],
            }
                v10[59]);
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  gci_lst_inv_ctr=%u, gci_lst_rst_ctr=%u, gci_lst_sem_ctr=%u, gci_lst_rb_st=%u, gci_dbg01=%u, gci_dbg02=%u, gci_dbg03=%u , gci_dbg04=%u, gci_dbg05=%u, gci_lst_st_msk=%u, gci_inv_tx=%u,  gci_inv_rx=%u, gci_rst_tx= %u, gci_rst_rx=%u\n", v10[60], v10[61], v10[62], v10[63], v10[64], v10[65], v10[66], v10[67], v10[68], v10[69], v10[70], v10[71], v10[72], v10[73]);
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  gci_lst_inv_ctr=%u, gci_lst_rst_ctr=%u, gci_lst_sem_ctr=%u, gci_lst_rb_st=%u, gci_dbg01=%u, gci_dbg02=%u, gci_dbg03=%u , gci_dbg04=%u, gci_dbg05=%u, gci_lst_st_msk=%u, gci_inv_tx=%u,  gci_inv_rx=%u, gci_rst_tx= %u, gci_rst_rx=%u\n", v10[60], v10[61], v10[62], v10[63], v10[64], v10[65], v10[66], v10[67], v10[68], v10[69], v10[70], v10[71], v10[72], v10[73]);
            }
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  gci_sem_ctr=%u, gci_invstate=%u, gci_ctl2=%u, gci_chan=%u, gci_cm=%u, gci_sc=%u, gci_rst_sc=%u, gci_prdc_rx=%u , gci_wk_rx=%u, gci_rmac_rx=%u, gci_tx_rx=%u, asym_intf_stats=%u,  asym_intf_ncal_crs_stat=%u, ed_crsEn= %d, nvcfg0=%d, cal_suppressed_cntr_ed=%u \n", v10[74], v10[75], v10[76], v10[77], v10[78], v10[79], v10[80], v10[81], v10[82], v10[83], v10[84], v10[85], v10[86], (__int16)v10[87], (__int16)v10[88], *((unsigned __int8 *)v10 + 178));
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  gci_sem_ctr=%u, gci_invstate=%u, gci_ctl2=%u, gci_chan=%u, gci_cm=%u, gci_sc=%u, gci_rst_sc=%u, gci_prdc_rx=%u , gci_wk_rx=%u, gci_rmac_rx=%u, gci_tx_rx=%u, asym_intf_stats=%u,  asym_intf_ncal_crs_stat=%u, ed_crsEn= %d, nvcfg0=%d, cal_suppressed_cntr_ed=%u \n", v10[74], v10[75], v10[76], v10[77], v10[78], v10[79], v10[80], v10[81], v10[82], v10[83], v10[84], v10[85], v10[86], (__int16)v10[87], (__int16)v10[88],
            }
                *((unsigned __int8 *)v10 + 178));
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  sc_dccal_incc_cnt=%u, sc_noisecal_incc_cnt=%u, btc_mode=%u, asym_intf_ant_noise_idx=%u, asym_intf_pending_host_req_type=%u,  asym_intf_ncal_crs_stat_idx=%u, rxsense_noise_idx=%d, rxsense_offset=%d, asym_intf_tx_smartcca_cm=%d, asym_intf_rx_noise_mit_cm=%d,  asym_intf_avg_noise[0/1]= [%d, %d], asym_intf_latest_noise[0/1]=[%d, %d]\n", *((unsigned __int8 *)v10 + 179), *((unsigned __int8 *)v10 + 180), *((unsigned __int8 *)v10 + 17), *((unsigned __int8 *)v10 + 184), *((unsigned __int8 *)v10 + 185), *((unsigned __int8 *)v10 + 186), *((char *)v10 + 30), *((char *)v10 + 31), *((char *)v10 + 187), *((char *)v10 + 188), *((char *)v10 + 189), *((char *)v10 + 190), *((char *)v10 + 191), *((char *)v10 + 192));
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  sc_dccal_incc_cnt=%u, sc_noisecal_incc_cnt=%u, btc_mode=%u, asym_intf_ant_noise_idx=%u, asym_intf_pending_host_req_type=%u,  asym_intf_ncal_crs_stat_idx=%u, rxsense_noise_idx=%d, rxsense_offset=%d, asym_intf_tx_smartcca_cm=%d, asym_intf_rx_noise_mit_cm=%d,  asym_intf_avg_noise[0/1]= [%d, %d], asym_intf_latest_noise[0/1]=[%d, %d]\n", *((unsigned __int8 *)v10 + 179), *((unsigned __int8 *)v10 + 180), *((unsigned __int8 *)v10 + 17), *((unsigned __int8 *)v10 + 184), *((unsigned __int8 *)v10 + 185), *((unsigned __int8 *)v10 + 186), *((char *)v10 + 30), *((char *)v10 + 31), *((char *)v10 + 187), *((char *)v10 + 188), *((char *)v10 + 189), *((char *)v10 + 190), *((char *)v10 + 191), *((char *)v10 + 192));
            }
            if (IO80211Controller::isLQMOSLOGEnabled(this))
            {
              uint64_t v11 = v26;
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this))
            {
              uint64_t v11 = v26;
              IOLog("LQM-WIFI-PHY:  ed_threshold[0/1]= [%d, %d], bad_txbaseidx_cnt[0/1]=[%u, %u], curr_tssival[0/1]=[%u, %u], pwridx_init[0/1]=[%u, %u], auxphystats[0/1]=[%d,%d],  phystatsgaininfo[0/1]=[%u, %u], flexgaininfo_A[0/1]=[%u, %u], crsmin_pwr_idx[0/1]=[%u, %u], baseindxval[0/1]=[%u, %u], crsmin_pwr[0/1]=[%d, %d],  noise_level_inst[0/1]=[%d, %d], tgt_pwr[0/1]=[%d, %d], estpwradj[0/1]=[%d, %d] \n", *((char *)v10 + 222), *((char *)v10 + 250), v10[102], v10[116], v10[103], v10[117], v10[104], v10[118], v10[105], v10[119], v10[106], v10[120], v10[107], v10[121], *((unsigned __int8 *)v10 + 216),
                *((unsigned __int8 *)v10 + 244),
                *((unsigned __int8 *)v10 + 217),
                *((unsigned __int8 *)v10 + 245),
                *((char *)v10 + 218),
                *((char *)v10 + 246),
                *((char *)v10 + 219),
                *((char *)v10 + 247),
                *((char *)v10 + 220),
                *((char *)v10 + 248),
                *((char *)v10 + 221),
                *((char *)v10 + 249));
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this))
            {
              uint64_t v11 = v26;
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  ed_threshold[0/1]= [%d, %d], bad_txbaseidx_cnt[0/1]=[%u, %u], curr_tssival[0/1]=[%u, %u], pwridx_init[0/1]=[%u, %u], auxphystats[0/1]=[%d,%d],  phystatsgaininfo[0/1]=[%u, %u], flexgaininfo_A[0/1]=[%u, %u], crsmin_pwr_idx[0/1]=[%u, %u], baseindxval[0/1]=[%u, %u], crsmin_pwr[0/1]=[%d, %d],  noise_level_inst[0/1]=[%d, %d], tgt_pwr[0/1]=[%d, %d], estpwradj[0/1]=[%d, %d] \n", *((char *)v10 + 222), *((char *)v10 + 250), v10[102], v10[116], v10[103], v10[117], v10[104], v10[118], v10[105], v10[119], v10[106], v10[120], v10[107], v10[121],
                *((unsigned __int8 *)v10 + 216),
                *((unsigned __int8 *)v10 + 244),
                *((unsigned __int8 *)v10 + 217),
                *((unsigned __int8 *)v10 + 245),
                *((char *)v10 + 218),
                *((char *)v10 + 246),
                *((char *)v10 + 219),
                *((char *)v10 + 247),
                *((char *)v10 + 220),
                *((char *)v10 + 248),
                *((char *)v10 + 221),
                *((char *)v10 + 249));
            }
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  OBSS Info --> need_updt: %u, mit_status: %u, obss_mit_bw=%u, last_rec_bw: %u, obss_last_read_time=%u \n", *((unsigned __int8 *)v10 + 181), *((unsigned __int8 *)v10 + 182), v10[52], *((unsigned __int8 *)v10 + 183), *((_DWORD *)v10 + 24));
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  OBSS Info --> need_updt: %u, mit_status: %u, obss_mit_bw=%u, last_rec_bw: %u, obss_last_read_time=%u \n", *((unsigned __int8 *)v10 + 181), *((unsigned __int8 *)v10 + 182), v10[52], *((unsigned __int8 *)v10 + 183), *((_DWORD *)v10 + 24));
            }
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  OBSS PWR Estimation Core0 --> LLL: %d  LLU: %d  LUL: %d  LUU: %d  ULL: %d  ULU: %d  UUL: %d  UUU: %d\n", *((char *)v10 + 224), *((char *)v10 + 225), *((char *)v10 + 226), *((char *)v10 + 227), *((char *)v10 + 228), *((char *)v10 + 229), *((char *)v10 + 230), *((char *)v10 + 231));
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  OBSS PWR Estimation Core0 --> LLL: %d  LLU: %d  LUL: %d  LUU: %d  ULL: %d  ULU: %d  UUL: %d  UUU: %d\n", *((char *)v10 + 224), *((char *)v10 + 225), *((char *)v10 + 226), *((char *)v10 + 227), *((char *)v10 + 228), *((char *)v10 + 229), *((char *)v10 + 230), *((char *)v10 + 231));
            }
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  OBSS PWR Estimation Core1 --> LLL: %d  LLU: %d  LUL: %d  LUU: %d  ULL: %d  ULU: %d  UUL: %d  UUU: %d\n", *((char *)v10 + 252), *((char *)v10 + 253), *((char *)v10 + 254), *((char *)v10 + 255), *((char *)v10 + 256), *((char *)v10 + 257), *((char *)v10 + 258), *((char *)v10 + 259));
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  OBSS PWR Estimation Core1 --> LLL: %d  LLU: %d  LUL: %d  LUU: %d  ULL: %d  ULU: %d  UUL: %d  UUU: %d\n", *((char *)v10 + 252), *((char *)v10 + 253), *((char *)v10 + 254), *((char *)v10 + 255), *((char *)v10 + 256), *((char *)v10 + 257), *((char *)v10 + 258), *((char *)v10 + 259));
            }
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  OBSS --> detection stats 0: %u  1: %u  2: %u  3: %u  4: %u  5: %u  6: %u  7: %u \n", *((unsigned __int8 *)v10 + 193), *((unsigned __int8 *)v10 + 194), *((unsigned __int8 *)v10 + 195), *((unsigned __int8 *)v10 + 196), *((unsigned __int8 *)v10 + 197), *((unsigned __int8 *)v10 + 198), *((unsigned __int8 *)v10 + 199), *((unsigned __int8 *)v10 + 200));
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  OBSS --> detection stats 0: %u  1: %u  2: %u  3: %u  4: %u  5: %u  6: %u  7: %u \n", *((unsigned __int8 *)v10 + 193), *((unsigned __int8 *)v10 + 194), *((unsigned __int8 *)v10 + 195), *((unsigned __int8 *)v10 + 196), *((unsigned __int8 *)v10 + 197), *((unsigned __int8 *)v10 + 198), *((unsigned __int8 *)v10 + 199), *((unsigned __int8 *)v10 + 200));
            }
            AppleBCMWLANChanSpec::getAppleChannelSpec(*(int ***)(*((void *)this + 9) + 17576), *v10);
            if (v25 == ChanSpecGetPrimaryChannel())
            {
              unsigned int v13 = *v10;
              if (v13 >= 0x4000 && (v13 & 0x3800) != 0x1000)
              {
                if (AppleBCMWLANCore::featureFlagIsBitSet(this, 101))
                {
                  *(_DWORD *)(*((void *)this + 9) + 35352) = *((_DWORD *)v10 + 24);
                  *(unsigned char *)(*((void *)this + 9) + 35332) = *((unsigned char *)v10 + 181);
                  *(unsigned char *)(*((void *)this + 9) + 35333) = *((unsigned char *)v10 + 182);
                  *(unsigned char *)(*((void *)this + 9) + 35334) = *((unsigned char *)v10 + 104);
                  *(unsigned char *)(*((void *)this + 9) + 35335) = *((unsigned char *)v10 + 183);
                  *(_DWORD *)(*((void *)this + 9) + 35336) = AppleBCMWLANLQM::getRecentRxPlcpErrCnt(*(AppleBCMWLANLQM **)(*((void *)this + 9) + 5608));
                  *(_DWORD *)(*((void *)this + 9) + 35340) = AppleBCMWLANLQM::getRecentRxBadFcsCnt(*(AppleBCMWLANLQM **)(*((void *)this + 9) + 5608));
                  *(_DWORD *)(*((void *)this + 9) + 35344) = AppleBCMWLANLQM::getRecentRxFramesCnt(*(AppleBCMWLANLQM **)(*((void *)this + 9) + 5608));
                  *(_DWORD *)(*((void *)this + 9) + 35348) = *(_DWORD *)(*((void *)this + 9) + 30512);
                  AppleBCMWLANLQM::getPerCoreRssi(*(void *)(*((void *)this + 9) + 5608), v27);
                  *(unsigned char *)(*((void *)this + 9) + 35372) = v27[0];
                  *(unsigned char *)(*((void *)this + 9) + 35373) = v27[1];
                  *(void *)(*((void *)this + 9) + 35356) = *((void *)v10 + 28);
                  *(void *)(*((void *)this + 9) + 35364) = *(void *)(v10 + 126);
                  uint64_t v14 = *((void *)this + 9);
                  unsigned int v15 = *(IO80211SkywalkInterface **)(v14 + 11304);
                  if (v15) {
                    IO80211Controller::postMessage(this, v15, 0xDAu, (void *)(v14 + 35332), 0x2CuLL, 1);
                  }
                }
              }
              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
              {
                (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                if (CCLogStream::shouldLog())
                {
                  int v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                  CCLogStream::logAlert(v16, "[dk] %s@%d: Versiouint64_t n = %u, ChanSpec=0x%04x, noise_req=%u, noise_crsbit=%u, cal_counter=%u, rxchain=%u, chiptemp=%d, femtemp=%d, btcx_mode=%d,  ltecx_mode=%d, weakest_rssi=%d, chan_switch_cnt=%u, sc_dccal_incc_cnt=%u\n", "parsePHYEcounterV5", 31488, *v11, *v10, v10[2], v10[3], v10[5], *((unsigned __int8 *)v10 + 13), *((char *)v10 + 20), *((char *)v10 + 21), *((_DWORD *)v10 + 6), *((char *)v10 + 23), *((char *)v10 + 22), *((unsigned __int8 *)v10 + 28), *((unsigned __int8 *)v10 + 179));
                }
              }
              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
              {
                (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                  CCLogStream::logAlert(v17, "[dk] %s@%d: gbd_ofdm_desense=%u, gbd_bphy_desense=%u, featureflag=%u, crsmin_pwr_apply_cnt=%u, preempt_status2=%u, ed_crs_status=%u, measurehold=%u, ocl_disable_reqs=%u,  gci_rst_tx= %u, gci_rst_rx=%u, gci_rst_sc=%u, asym_intf_stats=%u\n", "parsePHYEcounterV5", 31493, *((unsigned __int8 *)v10 + 18), *((unsigned __int8 *)v10 + 19), v10[16], v10[19], v10[22], v10[20], *((_DWORD *)v10 + 19), *((_DWORD *)v10 + 21), v10[72], v10[73], v10[80], v10[85]);
                }
              }
              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
              {
                (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                  CCLogStream::logAlert(v18, "[dk] %s@%d: asym_intf_avg_noise[0/1]= [%d, %d], asym_intf_latest_noise[0/1]=[%d, %d], pwridx_init[0/1]=[%u, %u], baseindxval[0/1]=[%u, %u]\n", "parsePHYEcounterV5", 31498, *((char *)v10 + 189), *((char *)v10 + 190), *((char *)v10 + 191), *((char *)v10 + 192), v10[104], v10[118], *((unsigned __int8 *)v10 + 217), *((unsigned __int8 *)v10 + 245));
                }
              }
              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
              {
                (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                  CCLogStream::logAlert(v19, "[dk] %s@%d: estpwradj[0/1]=[%d, %d], ed_threshold[0/1]=[%d, %d], crsmin_pwr_idx[0/1]=[%u, %u], crsmin_pwr[0/1]=[%d, %d], noise_level_inst[0/1]=[%d, %d]\n", "parsePHYEcounterV5", 31504, *((char *)v10 + 221), *((char *)v10 + 249), *((char *)v10 + 222), *((char *)v10 + 250), *((unsigned __int8 *)v10 + 216), *((unsigned __int8 *)v10 + 244), *((char *)v10 + 218), *((char *)v10 + 246), *((char *)v10 + 219), *((char *)v10 + 247));
                }
              }
            }
            v10 += 130;
            ++v12;
          }
          while (v12 < *((unsigned __int8 *)v11 + 4));
        }
        uint64_t v20 = 0;
        *(void *)(*((void *)this + 9) + 35416) = mach_continuous_time();
      }
      else
      {
        uint64_t v20 = 3758097084;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            int v24 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v24, "[dk] %s@%d:Unexpected length\n");
          }
        }
      }
    }
    else
    {
      uint64_t v20 = 3758097084;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          int v23 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v23, "[dk] %s@%d:Unexpected Version\n");
        }
      }
    }
  }
  if (v8) {
    IOFreeData();
  }
  return v20;
}

uint64_t AppleBCMWLANCore::getRxPer(AppleBCMWLANCore *this)
{
  return *(unsigned int *)(*((void *)this + 9) + 30512);
}

uint64_t AppleBCMWLANCore::parsePHYEcounterV7(AppleBCMWLANCore *this, OSData *a2)
{
  uint64_t v4 = *(AppleBCMWLANBssManager **)(*((void *)this + 9) + 5440);
  if (v4)
  {
    uint64_t CurrentBSS = AppleBCMWLANBssManager::getCurrentBSS(v4);
    if (IO80211BssManager::isAssociated(*(IO80211BssManager **)(*((void *)this + 9) + 5440))) {
      BOOL v6 = CurrentBSS == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(*((void *)this + 9) + 5440));
      int v25 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 256))(v7);
      goto LABEL_9;
    }
  }
  else
  {
    IO80211BssManager::isAssociated(0);
  }
  int v25 = 0;
LABEL_9:
  *(_WORD *)int v27 = -21846;
  uint64_t v8 = IOMallocZeroData();
  if (((unint64_t)OSData::getBytesNoCopy(a2) & 3) != 0)
  {
    uint64_t v20 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v22, "[dk] %s@%d:Buffer not aligned\n");
      }
    }
  }
  else
  {
    BytesNoCopy = (unsigned __int16 *)OSData::getBytesNoCopy(a2);
    uint64_t v10 = BytesNoCopy + 4;
    if (*BytesNoCopy == 7)
    {
      uint64_t v11 = BytesNoCopy;
      if (((344 * *((unsigned __int8 *)BytesNoCopy + 4) + 8) & 0xFFF8) == BytesNoCopy[1])
      {
        mach_continuous_time();
        absolutetime_to_nanoseconds();
        if (*((unsigned char *)v11 + 4))
        {
          unsigned int v12 = 0;
          int v26 = v11;
          do
          {
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  Versiouint64_t n = %u, ChanSpec=0x%04x, phy_wdg=%u, noise_req=%u, noise_crsbit=%u, noise_apply=%u, cal_counter=%u, slice=%u\n", *v11, *v10, v10[1], v10[2], v10[3], v10[4], v10[5], *((unsigned __int8 *)v10 + 12));
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  Versiouint64_t n = %u, ChanSpec=0x%04x, phy_wdg=%u, noise_req=%u, noise_crsbit=%u, noise_apply=%u, cal_counter=%u, slice=%u\n", *v11, *v10, v10[1], v10[2], v10[3], v10[4], v10[5], *((unsigned __int8 *)v10 + 12));
            }
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  gbd_ofdm_desense=%u, gbd_bphy_desense=%u, gbd_bphy_sleep_counter=%u, gbd_ofdm_sleep_counter=%u, rxchain=%u, txchain=%u \n", *((unsigned __int8 *)v10 + 18), *((unsigned __int8 *)v10 + 19), *((unsigned __int8 *)v10 + 15), *((unsigned __int8 *)v10 + 16), *((unsigned __int8 *)v10 + 13), *((unsigned __int8 *)v10 + 14));
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  gbd_ofdm_desense=%u, gbd_bphy_desense=%u, gbd_bphy_sleep_counter=%u, gbd_ofdm_sleep_counter=%u, rxchain=%u, txchain=%u \n", *((unsigned __int8 *)v10 + 18), *((unsigned __int8 *)v10 + 19), *((unsigned __int8 *)v10 + 15), *((unsigned __int8 *)v10 + 16), *((unsigned __int8 *)v10 + 13), *((unsigned __int8 *)v10 + 14));
            }
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  chiptemp=%d, femtemp=%d, btcx_mode=%d, ltecx_mode=%d, weakest_rssi=%d, chan_switch_cnt=%u, phycal_disable=%u, featureflag=%u\n", *((char *)v10 + 20), *((char *)v10 + 21), *((_DWORD *)v10 + 6), *((char *)v10 + 23), *((char *)v10 + 22), *((unsigned __int8 *)v10 + 28), *((unsigned __int8 *)v10 + 29), v10[18]);
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  chiptemp=%d, femtemp=%d, btcx_mode=%d, ltecx_mode=%d, weakest_rssi=%d, chan_switch_cnt=%u, phycal_disable=%u, featureflag=%u\n", *((char *)v10 + 20), *((char *)v10 + 21), *((_DWORD *)v10 + 6), *((char *)v10 + 23), *((char *)v10 + 22), *((unsigned __int8 *)v10 + 28), *((unsigned __int8 *)v10 + 29), v10[18]);
            }
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  deaf_count=%u, noise_mmt_overdue=%u, crsmin_pwr_apply_cnt=%u, ed_crs_status=%u, preempt_status2=%u,  counter_noise_iqest_to=%u, cca_stats_total_glitch=%u, cca_stats_bphy_glitch=%u, cca_stats_total_badplcp=%u,  cca_stats_bphy_badplcp=%u, cca_stats_mbsstime= %u, cca_stats_ed_duration=%u\n", v10[19], v10[20], v10[22], v10[23], v10[24], v10[21], *((_DWORD *)v10 + 13), *((_DWORD *)v10 + 14), *((_DWORD *)v10 + 15), *((_DWORD *)v10 + 16), *((_DWORD *)v10 + 17), *((_DWORD *)v10 + 18));
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  deaf_count=%u, noise_mmt_overdue=%u, crsmin_pwr_apply_cnt=%u, ed_crs_status=%u, preempt_status2=%u,  counter_noise_iqest_to=%u, cca_stats_total_glitch=%u, cca_stats_bphy_glitch=%u, cca_stats_total_badplcp=%u,  cca_stats_bphy_badplcp=%u, cca_stats_mbsstime= %u, cca_stats_ed_duration=%u\n", v10[19], v10[20], v10[22], v10[23], v10[24], v10[21], *((_DWORD *)v10 + 13), *((_DWORD *)v10 + 14), *((_DWORD *)v10 + 15), *((_DWORD *)v10 + 16), *((_DWORD *)v10 + 17), *((_DWORD *)v10 + 18));
            }
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  measurehold=%u, rxsense_disable_req_ch=%u, ocl_disable_reqs=%u, interference_mode=%u, power_mode=%u, obss_last_read_time=%u, asym_intf_ed_thresh=%d, obss_mit_bw=%u , obss_stats_cnt=%u, dynbw_init_reducebw_cnt=%u, dynbw_resp_reducebw_cnt=%u, dynbw_rxdata_reducebw_cnt=%u,  obss_mmt_skip_cnt=%u, obss_mmt_no_result_cnt= %u, obss_mmt_intr_err_cnt=%u\n", *((_DWORD *)v10 + 19), *((_DWORD *)v10 + 8), *((_DWORD *)v10 + 20), *((_DWORD *)v10 + 21), *((_DWORD *)v10 + 22), *((_DWORD *)v10 + 24), *((_DWORD *)v10 + 23), v10[50], v10[51], v10[57], v10[58], v10[59], v10[52], v10[53], v10[54]);
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  measurehold=%u, rxsense_disable_req_ch=%u, ocl_disable_reqs=%u, interference_mode=%u, power_mode=%u, obss_last_read_time=%u, asym_intf_ed_thresh=%d, obss_mit_bw=%u , obss_stats_cnt=%u, dynbw_init_reducebw_cnt=%u, dynbw_resp_reducebw_cnt=%u, dynbw_rxdata_reducebw_cnt=%u,  obss_mmt_skip_cnt=%u, obss_mmt_no_result_cnt= %u, obss_mmt_intr_err_cnt=%u\n", *((_DWORD *)v10 + 19), *((_DWORD *)v10 + 8), *((_DWORD *)v10 + 20), *((_DWORD *)v10 + 21), *((_DWORD *)v10 + 22), *((_DWORD *)v10 + 24), *((_DWORD *)v10 + 23), v10[50], v10[51], v10[57], v10[58], v10[59], v10[52], v10[53],
            }
                v10[54]);
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  asym_intf_stats=%u, asym_intf_ncal_crs_stat=%u, ed_crsEn= %d, nvcfg0=%d, cal_suppressed_cntr_ed=%u,  dcc_digi_gain=%d, dcc_est_overflow=%d\n, smrcDebug1=0x%x\n", v10[62], v10[63], (__int16)v10[60], (__int16)v10[61], *((unsigned __int8 *)v10 + 137), *((unsigned __int8 *)v10 + 140), *((unsigned __int8 *)v10 + 141), *((_DWORD *)v10 + 48));
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  asym_intf_stats=%u, asym_intf_ncal_crs_stat=%u, ed_crsEn= %d, nvcfg0=%d, cal_suppressed_cntr_ed=%u,  dcc_digi_gain=%d, dcc_est_overflow=%d\n, smrcDebug1=0x%x\n", v10[62], v10[63], (__int16)v10[60], (__int16)v10[61], *((unsigned __int8 *)v10 + 137), *((unsigned __int8 *)v10 + 140), *((unsigned __int8 *)v10 + 141), *((_DWORD *)v10 + 48));
            }
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  fbcx_info[1 to 6]=[0x%x,0x%x,0x%x,0x%x,0x%x,0x%x], scan[info:%d, starts:%d, detect:%d, good_fcs:%d, bad_fcs:%d, busy:%d, err:%d]\n", *((_DWORD *)v10 + 36), *((_DWORD *)v10 + 37), *((_DWORD *)v10 + 38), *((_DWORD *)v10 + 39), *((_DWORD *)v10 + 40), *((_DWORD *)v10 + 41), v10[84], v10[85], v10[86], v10[89], v10[92], v10[93], v10[94]);
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  fbcx_info[1 to 6]=[0x%x,0x%x,0x%x,0x%x,0x%x,0x%x], scan[info:%d, starts:%d, detect:%d, good_fcs:%d, bad_fcs:%d, busy:%d, err:%d]\n", *((_DWORD *)v10 + 36), *((_DWORD *)v10 + 37), *((_DWORD *)v10 + 38), *((_DWORD *)v10 + 39), *((_DWORD *)v10 + 40), *((_DWORD *)v10 + 41), v10[84], v10[85], v10[86], v10[89], v10[92], v10[93], v10[94]);
            }
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  cal_code[main:0x%x, pll2g:0x%x, 5g:0x%x], phy_cal_debug=[1:0x%x, 2:0x%x], ml_req[tx:%d, tot_retry:%d], ml_resp[rx:%d, match:%d]\n", v10[98], v10[107], v10[99], (__int16)v10[108], (__int16)v10[109], v10[110], v10[111], v10[112], v10[113]);
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  cal_code[main:0x%x, pll2g:0x%x, 5g:0x%x], phy_cal_debug=[1:0x%x, 2:0x%x], ml_req[tx:%d, tot_retry:%d], ml_resp[rx:%d, match:%d]\n", v10[98], v10[107], v10[99], (__int16)v10[108], (__int16)v10[109], v10[110], v10[111], v10[112], v10[113]);
            }
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  pa_mode=%u, debug[1 to 10] = [0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x]\n", *((unsigned __int8 *)v10 + 229), v10[25], v10[95], v10[115], v10[116], v10[117], v10[118], v10[119], v10[120], v10[121], v10[122]);
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  pa_mode=%u, debug[1 to 10] = [0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x]\n", *((unsigned __int8 *)v10 + 229), v10[25], v10[95], v10[115], v10[116], v10[117], v10[118], v10[119], v10[120], v10[121], v10[122]);
            }
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  sc_dccal_incc_cnt=%u, sc_noisecal_incc_cnt=%u, btc_mode=%u, asym_intf_ant_noise_idx=%u, asym_intf_pending_host_req_type=%u,  asym_intf_ncal_crs_stat_idx=%u, rxsense_noise_idx=%d, rxsense_offset=%d, asym_intf_tx_smartcca_cm=%d, asym_intf_rx_noise_mit_cm=%d,  asym_intf_avg_noise[0/1]= [%d, %d], asym_intf_latest_noise[0/1]=[%d, %d]\n", *((unsigned __int8 *)v10 + 138), *((unsigned __int8 *)v10 + 139), *((unsigned __int8 *)v10 + 17), *((unsigned __int8 *)v10 + 128), *((unsigned __int8 *)v10 + 129), *((unsigned __int8 *)v10 + 130), *((char *)v10 + 30), *((char *)v10 + 31), *((char *)v10 + 131), *((char *)v10 + 132), *((char *)v10 + 133), *((char *)v10 + 134), *((char *)v10 + 135), *((char *)v10 + 136));
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  sc_dccal_incc_cnt=%u, sc_noisecal_incc_cnt=%u, btc_mode=%u, asym_intf_ant_noise_idx=%u, asym_intf_pending_host_req_type=%u,  asym_intf_ncal_crs_stat_idx=%u, rxsense_noise_idx=%d, rxsense_offset=%d, asym_intf_tx_smartcca_cm=%d, asym_intf_rx_noise_mit_cm=%d,  asym_intf_avg_noise[0/1]= [%d, %d], asym_intf_latest_noise[0/1]=[%d, %d]\n", *((unsigned __int8 *)v10 + 138), *((unsigned __int8 *)v10 + 139), *((unsigned __int8 *)v10 + 17), *((unsigned __int8 *)v10 + 128), *((unsigned __int8 *)v10 + 129), *((unsigned __int8 *)v10 + 130), *((char *)v10 + 30), *((char *)v10 + 31), *((char *)v10 + 131), *((char *)v10 + 132), *((char *)v10 + 133), *((char *)v10 + 134), *((char *)v10 + 135), *((char *)v10 + 136));
            }
            if (IO80211Controller::isLQMOSLOGEnabled(this))
            {
              uint64_t v11 = v26;
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this))
            {
              uint64_t v11 = v26;
              IOLog("LQM-WIFI-PHY:  ed_threshold[0/1]= [%d, %d], bad_txbaseidx_cnt[0/1]=[%u, %u], curr_tssival[0/1]=[%u, %u], pwridx_init[0/1]=[%u, %u], auxphystats[0/1]=[%d,%d],  phystatsgaininfo[0/1]=[%u, %u], flexgaininfo_A[0/1]=[%u, %u], crsmin_pwr_idx[0/1]=[%u, %u], baseindxval[0/1]=[%u, %u], crsmin_pwr[0/1]=[%d, %d],  noise_level_inst[0/1]=[%d, %d], tgt_pwr[0/1]=[%d, %d], estpwradj[0/1]=[%d, %d] \n", *((char *)v10 + 266), *((char *)v10 + 314), v10[124], v10[148], v10[125], v10[149], v10[126], v10[150], v10[127], v10[151], v10[128], v10[152], v10[129], v10[153], *((unsigned __int8 *)v10 + 260),
                *((unsigned __int8 *)v10 + 308),
                *((unsigned __int8 *)v10 + 261),
                *((unsigned __int8 *)v10 + 309),
                *((char *)v10 + 262),
                *((char *)v10 + 310),
                *((char *)v10 + 263),
                *((char *)v10 + 311),
                *((char *)v10 + 264),
                *((char *)v10 + 312),
                *((char *)v10 + 265),
                *((char *)v10 + 313));
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this))
            {
              uint64_t v11 = v26;
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  ed_threshold[0/1]= [%d, %d], bad_txbaseidx_cnt[0/1]=[%u, %u], curr_tssival[0/1]=[%u, %u], pwridx_init[0/1]=[%u, %u], auxphystats[0/1]=[%d,%d],  phystatsgaininfo[0/1]=[%u, %u], flexgaininfo_A[0/1]=[%u, %u], crsmin_pwr_idx[0/1]=[%u, %u], baseindxval[0/1]=[%u, %u], crsmin_pwr[0/1]=[%d, %d],  noise_level_inst[0/1]=[%d, %d], tgt_pwr[0/1]=[%d, %d], estpwradj[0/1]=[%d, %d] \n", *((char *)v10 + 266), *((char *)v10 + 314), v10[124], v10[148], v10[125], v10[149], v10[126], v10[150], v10[127], v10[151], v10[128], v10[152], v10[129], v10[153],
                *((unsigned __int8 *)v10 + 260),
                *((unsigned __int8 *)v10 + 308),
                *((unsigned __int8 *)v10 + 261),
                *((unsigned __int8 *)v10 + 309),
                *((char *)v10 + 262),
                *((char *)v10 + 310),
                *((char *)v10 + 263),
                *((char *)v10 + 311),
                *((char *)v10 + 264),
                *((char *)v10 + 312),
                *((char *)v10 + 265),
                *((char *)v10 + 313));
            }
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  OBSS Info --> need_updt: %u, mit_status: %u, obss_mit_bw=%u, last_rec_bw: %u, obss_last_read_time=%u obss_cur_det: 0x%x\n", *((unsigned __int8 *)v10 + 112), *((unsigned __int8 *)v10 + 113), v10[50], *((unsigned __int8 *)v10 + 110), *((_DWORD *)v10 + 24), *((unsigned __int8 *)v10 + 111));
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  OBSS Info --> need_updt: %u, mit_status: %u, obss_mit_bw=%u, last_rec_bw: %u, obss_last_read_time=%u obss_cur_det: 0x%x\n", *((unsigned __int8 *)v10 + 112), *((unsigned __int8 *)v10 + 113), v10[50], *((unsigned __int8 *)v10 + 110), *((_DWORD *)v10 + 24), *((unsigned __int8 *)v10 + 111));
            }
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  OBSS PWR Estimation Core0 --> LLL: %d  LLU: %d  LUL: %d  LUU: %d  ULL: %d  ULU: %d  UUL: %d  UUU: %d\n", *((char *)v10 + 288), *((char *)v10 + 289), *((char *)v10 + 290), *((char *)v10 + 291), *((char *)v10 + 292), *((char *)v10 + 293), *((char *)v10 + 294), *((char *)v10 + 295));
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  OBSS PWR Estimation Core0 --> LLL: %d  LLU: %d  LUL: %d  LUU: %d  ULL: %d  ULU: %d  UUL: %d  UUU: %d\n", *((char *)v10 + 288), *((char *)v10 + 289), *((char *)v10 + 290), *((char *)v10 + 291), *((char *)v10 + 292), *((char *)v10 + 293), *((char *)v10 + 294), *((char *)v10 + 295));
            }
            if (IO80211Controller::isLQMOSLOGEnabled(this)) {
              io80211_os_log();
            }
            if (IO80211Controller::isLQMIOLOGEnabled(this)) {
              IOLog("LQM-WIFI-PHY:  OBSS PWR Estimation Core1 --> LLL: %d  LLU: %d  LUL: %d  LUU: %d  ULL: %d  ULU: %d  UUL: %d  UUU: %d\n", *((char *)v10 + 336), *((char *)v10 + 337), *((char *)v10 + 338), *((char *)v10 + 339), *((char *)v10 + 340), *((char *)v10 + 341), *((char *)v10 + 342), *((char *)v10 + 343));
            }
            if (IO80211Controller::isLQMCCLOGEnabled(this)) {
              IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHY:  OBSS PWR Estimation Core1 --> LLL: %d  LLU: %d  LUL: %d  LUU: %d  ULL: %d  ULU: %d  UUL: %d  UUU: %d\n", *((char *)v10 + 336), *((char *)v10 + 337), *((char *)v10 + 338), *((char *)v10 + 339), *((char *)v10 + 340), *((char *)v10 + 341), *((char *)v10 + 342), *((char *)v10 + 343));
            }
            AppleBCMWLANChanSpec::getAppleChannelSpec(*(int ***)(*((void *)this + 9) + 17576), *v10);
            if (v25 == ChanSpecGetPrimaryChannel())
            {
              unsigned int v13 = *v10;
              if (v13 >= 0x4000 && (v13 & 0x3800) != 0x1000)
              {
                if (AppleBCMWLANCore::featureFlagIsBitSet(this, 101))
                {
                  *(_DWORD *)(*((void *)this + 9) + 35352) = *((_DWORD *)v10 + 24);
                  *(unsigned char *)(*((void *)this + 9) + 35332) = *((unsigned char *)v10 + 112);
                  *(unsigned char *)(*((void *)this + 9) + 35333) = *((unsigned char *)v10 + 113);
                  *(unsigned char *)(*((void *)this + 9) + 35334) = *((unsigned char *)v10 + 100);
                  *(unsigned char *)(*((void *)this + 9) + 35335) = *((unsigned char *)v10 + 110);
                  *(_DWORD *)(*((void *)this + 9) + 35336) = AppleBCMWLANLQM::getRecentRxPlcpErrCnt(*(AppleBCMWLANLQM **)(*((void *)this + 9) + 5608));
                  *(_DWORD *)(*((void *)this + 9) + 35340) = AppleBCMWLANLQM::getRecentRxBadFcsCnt(*(AppleBCMWLANLQM **)(*((void *)this + 9) + 5608));
                  *(_DWORD *)(*((void *)this + 9) + 35344) = AppleBCMWLANLQM::getRecentRxFramesCnt(*(AppleBCMWLANLQM **)(*((void *)this + 9) + 5608));
                  *(_DWORD *)(*((void *)this + 9) + 35348) = *(_DWORD *)(*((void *)this + 9) + 30512);
                  AppleBCMWLANLQM::getPerCoreRssi(*(void *)(*((void *)this + 9) + 5608), v27);
                  *(unsigned char *)(*((void *)this + 9) + 35372) = v27[0];
                  *(unsigned char *)(*((void *)this + 9) + 35373) = v27[1];
                  *(void *)(*((void *)this + 9) + 35356) = *((void *)v10 + 36);
                  *(void *)(*((void *)this + 9) + 35364) = *((void *)v10 + 42);
                  uint64_t v14 = *((void *)this + 9);
                  unsigned int v15 = *(IO80211SkywalkInterface **)(v14 + 11304);
                  if (v15) {
                    IO80211Controller::postMessage(this, v15, 0xDAu, (void *)(v14 + 35332), 0x2CuLL, 1);
                  }
                }
              }
              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
              {
                (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                if (CCLogStream::shouldLog())
                {
                  int v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                  CCLogStream::logAlert(v16, "[dk] %s@%d: Ver=%u, Chan=0x%04x, noise_req=%u, noise_crsbit=%u, cal_counter=%u, rxchain=%u, chiptemp=%d, femtemp=%d, btcx_mode=%d,  ltecx_mode=%d, weakest_rssi=%d, chan_switch_cnt=%u, sc_dccal_incc_cnt=%u\n", "parsePHYEcounterV7", 31665, *v11, *v10, v10[2], v10[3], v10[5], *((unsigned __int8 *)v10 + 13), *((char *)v10 + 20), *((char *)v10 + 21), *((_DWORD *)v10 + 6), *((char *)v10 + 23), *((char *)v10 + 22), *((unsigned __int8 *)v10 + 28), *((unsigned __int8 *)v10 + 138));
                }
              }
              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
              {
                (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                  CCLogStream::logAlert(v17, "[dk] %s@%d: gbd_desense[ofdm:%d, bphy:%d], featureflag=%u, crsmin_pwr_apply_cnt=%u, preempt_status2=%u, ed_crs_status=%u,  measurehold=%u, ocl_disable_reqs=%u, asym_intf_stats=%u\n", "parsePHYEcounterV7", 31670, *((unsigned __int8 *)v10 + 18), *((unsigned __int8 *)v10 + 19), v10[18], v10[22], v10[24], v10[23], *((_DWORD *)v10 + 19), *((_DWORD *)v10 + 20), v10[62]);
                }
              }
              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
              {
                (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                  CCLogStream::logAlert(v18, "[dk] %s@%d: asym_intf_avg_noise[0/1]= [%d, %d], asym_intf_latest_noise[0/1]=[%d, %d], pwridx_init[0/1]=[%u, %u], baseindxval[0/1]=[%u, %u], estpwradj[0/1]=[%d, %d]\n", "parsePHYEcounterV7", 31676, *((char *)v10 + 133), *((char *)v10 + 134), *((char *)v10 + 135), *((char *)v10 + 136), v10[126], v10[150], *((unsigned __int8 *)v10 + 261), *((unsigned __int8 *)v10 + 309), *((char *)v10 + 265), *((char *)v10 + 313));
                }
              }
              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
              {
                (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                  CCLogStream::logAlert(v19, "[dk] %s@%d: obss_cur_det_bitmap=0x%x, ed_threshold[0/1]=[%d, %d], crsmin_pwr_idx[0/1]=[%u, %u], crsmin_pwr[0/1]=[%d, %d], noise_level_inst[0/1]=[%d, %d]\n", "parsePHYEcounterV7", 31682, *((unsigned __int8 *)v10 + 111), *((char *)v10 + 266), *((char *)v10 + 314), *((unsigned __int8 *)v10 + 260), *((unsigned __int8 *)v10 + 308), *((char *)v10 + 262), *((char *)v10 + 310), *((char *)v10 + 263), *((char *)v10 + 311));
                }
              }
            }
            v10 += 172;
            ++v12;
          }
          while (v12 < *((unsigned __int8 *)v11 + 4));
        }
        uint64_t v20 = 0;
        *(void *)(*((void *)this + 9) + 35416) = mach_continuous_time();
      }
      else
      {
        uint64_t v20 = 3758097084;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            int v24 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v24, "[dk] %s@%d:Unexpected length\n");
          }
        }
      }
    }
    else
    {
      uint64_t v20 = 3758097084;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          int v23 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v23, "[dk] %s@%d:Unexpected Version\n");
        }
      }
    }
  }
  if (v8) {
    IOFreeData();
  }
  return v20;
}

uint64_t AppleBCMWLANCore::parsePHYCalEcounterV1(AppleBCMWLANCore *this, OSData *a2)
{
  uint64_t v4 = IOMallocZeroData();
  if (((unint64_t)OSData::getBytesNoCopy(a2) & 3) != 0)
  {
    uint64_t v10 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v12, "[dk] %s@%d:Buffer not aligned\n");
      }
    }
  }
  else
  {
    BytesNoCopy = (unsigned __int16 *)OSData::getBytesNoCopy(a2);
    if (*BytesNoCopy == 1)
    {
      BOOL v6 = BytesNoCopy;
      if (((132 * *((unsigned __int8 *)BytesNoCopy + 4) + 8) & 0xFFFC) == BytesNoCopy[1])
      {
        if (*((unsigned char *)BytesNoCopy + 4))
        {
          uint64_t v15 = v4;
          uint64_t v7 = 0;
          unsigned int v8 = 0;
          do
          {
            if (this)
            {
              uint64_t v9 = &v6[v7];
              if (IO80211Controller::isLQMOSLOGEnabled(this)) {
                io80211_os_log();
              }
              if (IO80211Controller::isLQMIOLOGEnabled(this)) {
                IOLog("LQM-WIFI-PHYCAL: V1 Version: %u , NumChan: %u, ChanSpec: 0x%04x, slice: %u, LastCal: %u, LastCalTemp: %d, TXIQLocalRetry: %u, RXE: %u, CalPhaseId: %u\n", *v6, *((unsigned __int8 *)v6 + 4), v6[v7 + 6], HIBYTE(v6[v7 + 9]), *((_DWORD *)v9 + 2), (__int16)v6[v7 + 7], LOBYTE(v6[v7 + 8]), HIBYTE(v6[v7 + 8]), LOBYTE(v6[v7 + 9]));
              }
              if (IO80211Controller::isLQMCCLOGEnabled(this)) {
                IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHYCAL: V1 Version: %u , NumChan: %u, ChanSpec: 0x%04x, slice: %u, LastCal: %u, LastCalTemp: %d, TXIQLocalRetry: %u, RXE: %u, CalPhaseId: %u\n", *v6, *((unsigned __int8 *)v6 + 4), v6[v7 + 6], HIBYTE(v6[v7 + 9]), *((_DWORD *)v9 + 2), (__int16)v6[v7 + 7], LOBYTE(v6[v7 + 8]), HIBYTE(v6[v7 + 8]), LOBYTE(v6[v7 + 9]));
              }
              if (IO80211Controller::isLQMOSLOGEnabled(this)) {
                io80211_os_log();
              }
              if (IO80211Controller::isLQMIOLOGEnabled(this)) {
                IOLog("LQM-WIFI-PHYCAL: V1 rxs[0]= %d, rxs_vpoff[0]= %d, rxs_ipoff[0]= %d, ofdm_txa[0]= %u,ofdm_txb[0]= %u, ofdm_txd[0]= %u, bphy_txa[0]= %u, bphy_txb[0]= %u, bphy_txd[0]= %u \n", *(_DWORD *)&v6[v7 + 10], *(_DWORD *)&v6[v7 + 12], *(_DWORD *)&v6[v7 + 14], v6[v7 + 16], v6[v7 + 17], v6[v7 + 18], v6[v7 + 19], v6[v7 + 20], v6[v7 + 21]);
              }
              if (IO80211Controller::isLQMCCLOGEnabled(this)) {
                IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHYCAL: V1 rxs[0]= %d, rxs_vpoff[0]= %d, rxs_ipoff[0]= %d, ofdm_txa[0]= %u,ofdm_txb[0]= %u, ofdm_txd[0]= %u, bphy_txa[0]= %u, bphy_txb[0]= %u, bphy_txd[0]= %u \n", *(_DWORD *)&v6[v7 + 10], *(_DWORD *)&v6[v7 + 12], *(_DWORD *)&v6[v7 + 14], v6[v7 + 16], v6[v7 + 17], v6[v7 + 18], v6[v7 + 19], v6[v7 + 20], v6[v7 + 21]);
              }
              if (IO80211Controller::isLQMOSLOGEnabled(this)) {
                io80211_os_log();
              }
              if (IO80211Controller::isLQMIOLOGEnabled(this)) {
                IOLog("LQM-WIFI-PHYCAL: V1 txbaseidx_gtthres_cnt[0]= %u, rxa[0]= %u, rxb[0]= %u, rxa_vpoff[0]= %u, rxb_vpoff[0]= %u, txiqlo_2g_a0[0]= %u, txiqlo_2g_b0[0]= %u, txiqlo_2g_a1[0]= %u, txiqlo_2g_b1[0]= %u, txiqlo_2g_a2[0]= %u, txiqlo_2g_b2[0]= %u \n", v6[v7 + 22], v6[v7 + 23], v6[v7 + 24], v6[v7 + 26], v6[v7 + 27], v6[v7 + 30], v6[v7 + 31], v6[v7 + 32], v6[v7 + 33], v6[v7 + 34], v6[v7 + 35]);
              }
              if (IO80211Controller::isLQMCCLOGEnabled(this)) {
                IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHYCAL: V1 txbaseidx_gtthres_cnt[0]= %u, rxa[0]= %u, rxb[0]= %u, rxa_vpoff[0]= %u, rxb_vpoff[0]= %u, txiqlo_2g_a0[0]= %u, txiqlo_2g_b0[0]= %u, txiqlo_2g_a1[0]= %u, txiqlo_2g_b1[0]= %u, txiqlo_2g_a2[0]= %u, txiqlo_2g_b2[0]= %u \n", v6[v7 + 22], v6[v7 + 23], v6[v7 + 24], v6[v7 + 26], v6[v7 + 27], v6[v7 + 30], v6[v7 + 31], v6[v7 + 32], v6[v7 + 33], v6[v7 + 34], v6[v7 + 35]);
              }
              if (IO80211Controller::isLQMOSLOGEnabled(this)) {
                io80211_os_log();
              }
              if (IO80211Controller::isLQMIOLOGEnabled(this)) {
                IOLog("LQM-WIFI-PHYCAL: V1 baseidx[0]= %u, baseidx_cck[0]= %u, adc_coeff_cap0_adcI[0]= %u, adc_coeff_cap1_adcI[0]= %u, adc_coeff_cap2_adcI[0]= %u,adc_coeff_cap0_adcQ[0]= %u, adc_coeff_cap1_adcQ[0]= %u, adc_coeff_cap2_adcQ[0]= %u\n", LOBYTE(v6[v7 + 36]), HIBYTE(v6[v7 + 36]), LOBYTE(v6[v7 + 37]), HIBYTE(v6[v7 + 37]), LOBYTE(v6[v7 + 38]), HIBYTE(v6[v7 + 38]), LOBYTE(v6[v7 + 39]), HIBYTE(v6[v7 + 39]));
              }
              if (IO80211Controller::isLQMCCLOGEnabled(this)) {
                IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHYCAL: V1 baseidx[0]= %u, baseidx_cck[0]= %u, adc_coeff_cap0_adcI[0]= %u, adc_coeff_cap1_adcI[0]= %u, adc_coeff_cap2_adcI[0]= %u,adc_coeff_cap0_adcQ[0]= %u, adc_coeff_cap1_adcQ[0]= %u, adc_coeff_cap2_adcQ[0]= %u\n", LOBYTE(v6[v7 + 36]), HIBYTE(v6[v7 + 36]), LOBYTE(v6[v7 + 37]), HIBYTE(v6[v7 + 37]), LOBYTE(v6[v7 + 38]), HIBYTE(v6[v7 + 38]), LOBYTE(v6[v7 + 39]), HIBYTE(v6[v7 + 39]));
              }
              if (IO80211Controller::isLQMOSLOGEnabled(this)) {
                io80211_os_log();
              }
              if (IO80211Controller::isLQMIOLOGEnabled(this)) {
                IOLog("LQM-WIFI-PHYCAL: V1 rxs[1]= %d, rxs_vpoff[1]= %d, rxs_ipoff[1]= %d, ofdm_txa[1]= %u,ofdm_txb[1]= %u, ofdm_txd[1]= %u, bphy_txa[1]= %u, bphy_txb[1]= %u,bphy_txd[1]= %u\n", *(_DWORD *)&v6[v7 + 40], *(_DWORD *)&v6[v7 + 42], *(_DWORD *)&v6[v7 + 44], v6[v7 + 46], v6[v7 + 47], v6[v7 + 48], v6[v7 + 49], v6[v7 + 50], v6[v7 + 51]);
              }
              if (IO80211Controller::isLQMCCLOGEnabled(this)) {
                IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHYCAL: V1 rxs[1]= %d, rxs_vpoff[1]= %d, rxs_ipoff[1]= %d, ofdm_txa[1]= %u,ofdm_txb[1]= %u, ofdm_txd[1]= %u, bphy_txa[1]= %u, bphy_txb[1]= %u,bphy_txd[1]= %u\n", *(_DWORD *)&v6[v7 + 40], *(_DWORD *)&v6[v7 + 42], *(_DWORD *)&v6[v7 + 44], v6[v7 + 46], v6[v7 + 47], v6[v7 + 48], v6[v7 + 49], v6[v7 + 50], v6[v7 + 51]);
              }
              if (IO80211Controller::isLQMOSLOGEnabled(this)) {
                io80211_os_log();
              }
              if (IO80211Controller::isLQMIOLOGEnabled(this)) {
                IOLog("LQM-WIFI-PHYCAL: V1 txbaseidx_gtthres_cnt[1]= %u, rxa[1]= %u, rxb[1]= %u, rxa_vpoff[1]= %u, rxb_vpoff[1]= %u, txiqlo_2g_a0[1]= %u, txiqlo_2g_b0[1]= %u, txiqlo_2g_a1[1]= %u, txiqlo_2g_b1[1]= %u, txiqlo_2g_a2[1]= %u, txiqlo_2g_b2[1]= %u \n", v6[v7 + 52], v6[v7 + 53], v6[v7 + 54], v6[v7 + 56], v6[v7 + 57], v6[v7 + 60], v6[v7 + 61], v6[v7 + 62], v6[v7 + 63], v6[v7 + 64], v6[v7 + 65]);
              }
              if (IO80211Controller::isLQMCCLOGEnabled(this)) {
                IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHYCAL: V1 txbaseidx_gtthres_cnt[1]= %u, rxa[1]= %u, rxb[1]= %u, rxa_vpoff[1]= %u, rxb_vpoff[1]= %u, txiqlo_2g_a0[1]= %u, txiqlo_2g_b0[1]= %u, txiqlo_2g_a1[1]= %u, txiqlo_2g_b1[1]= %u, txiqlo_2g_a2[1]= %u, txiqlo_2g_b2[1]= %u \n", v6[v7 + 52], v6[v7 + 53], v6[v7 + 54], v6[v7 + 56], v6[v7 + 57], v6[v7 + 60], v6[v7 + 61], v6[v7 + 62], v6[v7 + 63], v6[v7 + 64], v6[v7 + 65]);
              }
              if (IO80211Controller::isLQMOSLOGEnabled(this)) {
                io80211_os_log();
              }
              if (IO80211Controller::isLQMIOLOGEnabled(this)) {
                IOLog("LQM-WIFI-PHYCAL: V1 baseidx[1]= %u, baseidx_cck[1]= %u, adc_coeff_cap0_adcI[1]= %u, adc_coeff_cap1_adcI[1]= %u, adc_coeff_cap2_adcI[1]= %u, adc_coeff_cap0_adcQ[1]= %u, adc_coeff_cap1_adcQ[1]= %u, adc_coeff_cap2_adcQ[1]= %u \n", LOBYTE(v6[v7 + 66]), HIBYTE(v6[v7 + 66]), LOBYTE(v6[v7 + 67]), HIBYTE(v6[v7 + 67]), LOBYTE(v6[v7 + 68]), HIBYTE(v6[v7 + 68]), LOBYTE(v6[v7 + 69]), HIBYTE(v6[v7 + 69]));
              }
              if (IO80211Controller::isLQMCCLOGEnabled(this)) {
                IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHYCAL: V1 baseidx[1]= %u, baseidx_cck[1]= %u, adc_coeff_cap0_adcI[1]= %u, adc_coeff_cap1_adcI[1]= %u, adc_coeff_cap2_adcI[1]= %u, adc_coeff_cap0_adcQ[1]= %u, adc_coeff_cap1_adcQ[1]= %u, adc_coeff_cap2_adcQ[1]= %u \n", LOBYTE(v6[v7 + 66]), HIBYTE(v6[v7 + 66]), LOBYTE(v6[v7 + 67]), HIBYTE(v6[v7 + 67]), LOBYTE(v6[v7 + 68]), HIBYTE(v6[v7 + 68]), LOBYTE(v6[v7 + 69]), HIBYTE(v6[v7 + 69]));
              }
            }
            ++v8;
            v7 += 66;
          }
          while (v8 < *((unsigned __int8 *)v6 + 4));
          uint64_t v10 = 0;
          uint64_t v4 = v15;
        }
        else
        {
          uint64_t v10 = 0;
        }
      }
      else
      {
        uint64_t v10 = 3758097084;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v14, "[dk] %s@%d:Unexpected length\n");
          }
        }
      }
    }
    else
    {
      uint64_t v10 = 3758097084;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v13, "[dk] %s@%d:Unexpected Version\n");
        }
      }
    }
  }
  if (v4) {
    IOFreeData();
  }
  return v10;
}

uint64_t AppleBCMWLANCore::parsePHYCalEcounterV2(AppleBCMWLANCore *this, OSData *a2)
{
  uint64_t v23 = IOMallocZeroData();
  if (((unint64_t)OSData::getBytesNoCopy(a2) & 3) != 0)
  {
    uint64_t v18 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v20 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v20, "[dk] %s@%d:Buffer not aligned\n");
      }
    }
  }
  else
  {
    BytesNoCopy = (char *)OSData::getBytesNoCopy(a2);
    if (*(_WORD *)BytesNoCopy == 2)
    {
      uint64_t v5 = (unsigned __int16 *)BytesNoCopy;
      if (((unsigned __int16)(336 * BytesNoCopy[4]) | 8) == *((unsigned __int16 *)BytesNoCopy + 1))
      {
        if (BytesNoCopy[4])
        {
          int v6 = 0;
          uint64_t v7 = BytesNoCopy + 8;
          int v26 = this;
          int v24 = (unsigned __int16 *)BytesNoCopy;
          do
          {
            int v25 = v6;
            if (this)
            {
              if (IO80211Controller::isLQMOSLOGEnabled(this)) {
                io80211_os_log();
              }
              if (IO80211Controller::isLQMIOLOGEnabled(this)) {
                IOLog("LQM-WIFI-PHYCAL: V2:  Version: %u , NumChan: %u, Chanspec = 0x%04x, last_cal_time = %d, last_cal_temp = %d, txiqlocal_retry = %u, rxe = %u,cal_phase_id = %u, slice = %u, desense_reasouint64_t n = %u, dur = %u, reasouint64_t n = %u, hc_retry_count_vpoff = %u, hc_retry_count_ipoff = %u,hc_retry_count_rx = %u ", *v5, *((unsigned __int8 *)v5 + 4), *((unsigned __int16 *)v7 + 2), *v7, *((__int16 *)v7 + 3), *((unsigned __int8 *)v7 + 8), *((unsigned __int8 *)v7 + 9), *((unsigned __int8 *)v7 + 10), *((unsigned __int8 *)v7 + 11), v7[3], *((unsigned __int16 *)v7 + 8), *((unsigned __int8 *)v7 + 18), *((unsigned __int8 *)v7 + 19), *((unsigned __int8 *)v7 + 20), *((unsigned __int8 *)v7 + 21));
              }
              if (IO80211Controller::isLQMCCLOGEnabled(this)) {
                IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHYCAL: V2:  Version: %u , NumChan: %u, Chanspec = 0x%04x, last_cal_time = %d, last_cal_temp = %d, txiqlocal_retry = %u, rxe = %u,cal_phase_id = %u, slice = %u, desense_reasouint64_t n = %u, dur = %u, reasouint64_t n = %u, hc_retry_count_vpoff = %u, hc_retry_count_ipoff = %u,hc_retry_count_rx = %u ", *v5, *((unsigned __int8 *)v5 + 4), *((unsigned __int16 *)v7 + 2), *v7, *((__int16 *)v7 + 3), *((unsigned __int8 *)v7 + 8), *((unsigned __int8 *)v7 + 9), *((unsigned __int8 *)v7 + 10), *((unsigned __int8 *)v7 + 11), v7[3], *((unsigned __int16 *)v7 + 8), *((unsigned __int8 *)v7 + 18), *((unsigned __int8 *)v7 + 19), *((unsigned __int8 *)v7 + 20), *((unsigned __int8 *)v7 + 21));
              }
              if (IO80211Controller::isLQMOSLOGEnabled(this)) {
                io80211_os_log();
              }
              if (IO80211Controller::isLQMIOLOGEnabled(this)) {
                IOLog("LQM-WIFI-PHYCAL: V2: hc_dev_exceed_log_rx_vpoff = %u, hc_dev_exceed_log_rx_ipoff = %u, hc_dev_exceed_log_rx = %u, sc_rxiqcal_skip_cnt = %u,hc_retry_count_tx = %u, hc_dev_exceed_log_tx = %u, txiqcal_max_retry_cnt = %u, txiqcal_max_slope_cnt = %u, mppc_cal_failed_count = %u,is_mppc_gain_offset_cal_success = %u \n", *((unsigned __int8 *)v7 + 22), *((unsigned __int8 *)v7 + 23), *((unsigned __int8 *)v7 + 24), *((unsigned __int8 *)v7 + 25), *((unsigned __int8 *)v7 + 26), *((unsigned __int8 *)v7 + 27), *((unsigned __int16 *)v7 + 14), *((unsigned __int16 *)v7 + 15), *((unsigned __int16 *)v7 + 16), *((unsigned __int8 *)v7 + 76));
              }
              if (IO80211Controller::isLQMCCLOGEnabled(this)) {
                IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHYCAL: V2: hc_dev_exceed_log_rx_vpoff = %u, hc_dev_exceed_log_rx_ipoff = %u, hc_dev_exceed_log_rx = %u, sc_rxiqcal_skip_cnt = %u,hc_retry_count_tx = %u, hc_dev_exceed_log_tx = %u, txiqcal_max_retry_cnt = %u, txiqcal_max_slope_cnt = %u, mppc_cal_failed_count = %u,is_mppc_gain_offset_cal_success = %u \n", *((unsigned __int8 *)v7 + 22), *((unsigned __int8 *)v7 + 23), *((unsigned __int8 *)v7 + 24), *((unsigned __int8 *)v7 + 25), *((unsigned __int8 *)v7 + 26), *((unsigned __int8 *)v7 + 27), *((unsigned __int16 *)v7 + 14), *((unsigned __int16 *)v7 + 15), *((unsigned __int16 *)v7 + 16), *((unsigned __int8 *)v7 + 76));
              }
              if (IO80211Controller::isLQMOSLOGEnabled(this)) {
                io80211_os_log();
              }
              if (IO80211Controller::isLQMIOLOGEnabled(this)) {
                IOLog("LQM-WIFI-PHYCAL: V2: txiqlocal_coeffs[0] = %d, txiqlocal_coeffs[1] = %d, txiqlocal_coeffs[2] = %d, txiqlocal_coeffs[3] = %d, txiqlocal_coeffs[4] =%d, txiqlocal_coeffs[5] = %d, txiqlocal_coeffs[6] = %d, txiqlocal_coeffs[7] = %d, txiqlocal_coeffs[8] = %d, txiqlocal_coeffs[9] = %d,txiqlocal_coeffs[10] = %d, txiqlocal_coeffs[11] = %d, txiqlocal_coeffs[12] = %d, txiqlocal_coeffs[13] = %d, txiqlocal_coeffs[14] = %d,txiqlocal_coeffs[15] = %d, txiqlocal_coeffs[16] = %d, txiqlocal_coeffs[17] = %d, txiqlocal_coeffs[18] = %d, txiqlocal_coeffs[19] = %d \n ", *((unsigned __int16 *)v7 + 18), *((unsigned __int16 *)v7 + 19), *((unsigned __int16 *)v7 + 20), *((unsigned __int16 *)v7 + 21), *((unsigned __int16 *)v7 + 22), *((unsigned __int16 *)v7 + 23), *((unsigned __int16 *)v7 + 24), *((unsigned __int16 *)v7 + 25), *((unsigned __int16 *)v7 + 26), *((unsigned __int16 *)v7 + 27), *((unsigned __int16 *)v7 + 28), *((unsigned __int16 *)v7 + 29),
              }
                  *((unsigned __int16 *)v7 + 30),
                  *((unsigned __int16 *)v7 + 31),
                  *((unsigned __int16 *)v7 + 32),
                  *((unsigned __int16 *)v7 + 33),
                  *((unsigned __int16 *)v7 + 34),
                  *((unsigned __int16 *)v7 + 35),
                  *((unsigned __int16 *)v7 + 36),
                  *((unsigned __int16 *)v7 + 37));
              if (IO80211Controller::isLQMCCLOGEnabled(this)) {
                IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHYCAL: V2: txiqlocal_coeffs[0] = %d, txiqlocal_coeffs[1] = %d, txiqlocal_coeffs[2] = %d, txiqlocal_coeffs[3] = %d, txiqlocal_coeffs[4] =%d, txiqlocal_coeffs[5] = %d, txiqlocal_coeffs[6] = %d, txiqlocal_coeffs[7] = %d, txiqlocal_coeffs[8] = %d, txiqlocal_coeffs[9] = %d,txiqlocal_coeffs[10] = %d, txiqlocal_coeffs[11] = %d, txiqlocal_coeffs[12] = %d, txiqlocal_coeffs[13] = %d, txiqlocal_coeffs[14] = %d,txiqlocal_coeffs[15] = %d, txiqlocal_coeffs[16] = %d, txiqlocal_coeffs[17] = %d, txiqlocal_coeffs[18] = %d, txiqlocal_coeffs[19] = %d \n ", *((unsigned __int16 *)v7 + 18), *((unsigned __int16 *)v7 + 19), *((unsigned __int16 *)v7 + 20), *((unsigned __int16 *)v7 + 21), *((unsigned __int16 *)v7 + 22), *((unsigned __int16 *)v7 + 23), *((unsigned __int16 *)v7 + 24), *((unsigned __int16 *)v7 + 25), *((unsigned __int16 *)v7 + 26), *((unsigned __int16 *)v7 + 27), *((unsigned __int16 *)v7 + 28),
              }
                  *((unsigned __int16 *)v7 + 29),
                  *((unsigned __int16 *)v7 + 30),
                  *((unsigned __int16 *)v7 + 31),
                  *((unsigned __int16 *)v7 + 32),
                  *((unsigned __int16 *)v7 + 33),
                  *((unsigned __int16 *)v7 + 34),
                  *((unsigned __int16 *)v7 + 35),
                  *((unsigned __int16 *)v7 + 36),
                  *((unsigned __int16 *)v7 + 37));
              if (IO80211Controller::isLQMOSLOGEnabled(this)) {
                io80211_os_log();
              }
              if (IO80211Controller::isLQMIOLOGEnabled(this)) {
                IOLog("LQM-WIFI-PHYCAL: V2 debug_01 = %u, debug_02 = %u, debug_03 = %u, debug_04 = %u, debug_05 = %u, debug_06 = %u, debug_07 = %u, debug_08 = %u, debug_09 = %u, debug_10 = %u, debug_11 = %u \n", *((unsigned __int8 *)v7 + 77), *((unsigned __int8 *)v7 + 78), *((unsigned __int8 *)v7 + 79), *((unsigned __int16 *)v7 + 40), *((unsigned __int16 *)v7 + 41), *((unsigned __int16 *)v7 + 42), *((unsigned __int16 *)v7 + 43), v7[22], v7[23], v7[24], v7[25]);
              }
              if (IO80211Controller::isLQMCCLOGEnabled(this)) {
                IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHYCAL: V2 debug_01 = %u, debug_02 = %u, debug_03 = %u, debug_04 = %u, debug_05 = %u, debug_06 = %u, debug_07 = %u, debug_08 = %u, debug_09 = %u, debug_10 = %u, debug_11 = %u \n", *((unsigned __int8 *)v7 + 77), *((unsigned __int8 *)v7 + 78), *((unsigned __int8 *)v7 + 79), *((unsigned __int16 *)v7 + 40), *((unsigned __int16 *)v7 + 41), *((unsigned __int16 *)v7 + 42), *((unsigned __int16 *)v7 + 43), v7[22], v7[23], v7[24], v7[25]);
              }
            }
            uint64_t v8 = 0;
            int v9 = 0;
            char v10 = 1;
            int v27 = v7;
            do
            {
              char v11 = v10;
              if (this)
              {
                if (IO80211Controller::isLQMOSLOGEnabled(this)) {
                  io80211_os_log();
                }
                if (IO80211Controller::isLQMIOLOGEnabled(this))
                {
                  unsigned int v12 = &v7[29 * v8];
                  IOLog("LQM-WIFI-PHYCAL: V2 ofdm_txa[%u] = %u, ofdm_txb[%u] = %u, ofdm_txd[%u] = %u, bphy_txa[%u] = %u, bphy_txb[%u] = %u, bphy_txd[%u] = %u, rxa[%u] = %u, rxb[%u] = %u, rxs[%u] = %u, baseidx[%u] = %u, baseidx_cck[%u] = %u, txbaseidx_gtthres_cnt[%u] = %u,adc_coeff_cap0_adcI[%u] = %u, adc_coeff_cap1_adcI[%u] = %u, adc_coeff_cap2_adcI[%u] = %u, adc_coeff_cap0_adcQ[%u] = %u,adc_coeff_cap1_adcQ[%u] = %u, adc_coeff_cap2_adcQ[%u] = %u\n", v9, *((unsigned __int16 *)v12 + 54), v9, *((unsigned __int16 *)v12 + 55), v9, *((unsigned __int16 *)v12 + 56), v9, *((unsigned __int16 *)v12 + 57), v9, *((unsigned __int16 *)v12 + 58), v9, *((unsigned __int16 *)v12 + 59), v9, *((unsigned __int16 *)v12 + 60),
                    v9,
                    *((unsigned __int16 *)v12 + 61),
                    v9,
                    v12[26],
                    v9,
                    *((unsigned __int8 *)v12 + 152),
                    v9,
                    *((unsigned __int8 *)v12 + 153),
                    v9,
                    *((unsigned __int16 *)v12 + 83),
                    v9,
                    *((unsigned __int8 *)v12 + 154),
                    v9,
                    *((unsigned __int8 *)v12 + 155),
                    v9,
                    *((unsigned __int8 *)v12 + 156),
                    v9,
                    *((unsigned __int8 *)v12 + 157),
                    v9,
                    *((unsigned __int8 *)v12 + 158),
                    v9,
                    *((unsigned __int8 *)v12 + 159));
                }
                if (IO80211Controller::isLQMCCLOGEnabled(this))
                {
                  unsigned int v13 = &v7[29 * v8];
                  IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHYCAL: V2 ofdm_txa[%u] = %u, ofdm_txb[%u] = %u, ofdm_txd[%u] = %u, bphy_txa[%u] = %u, bphy_txb[%u] = %u, bphy_txd[%u] = %u, rxa[%u] = %u, rxb[%u] = %u, rxs[%u] = %u, baseidx[%u] = %u, baseidx_cck[%u] = %u, txbaseidx_gtthres_cnt[%u] = %u,adc_coeff_cap0_adcI[%u] = %u, adc_coeff_cap1_adcI[%u] = %u, adc_coeff_cap2_adcI[%u] = %u, adc_coeff_cap0_adcQ[%u] = %u,adc_coeff_cap1_adcQ[%u] = %u, adc_coeff_cap2_adcQ[%u] = %u\n", v9, *((unsigned __int16 *)v13 + 54), v9, *((unsigned __int16 *)v13 + 55), v9, *((unsigned __int16 *)v13 + 56), v9, *((unsigned __int16 *)v13 + 57), v9, *((unsigned __int16 *)v13 + 58), v9, *((unsigned __int16 *)v13 + 59), v9,
                    *((unsigned __int16 *)v13 + 60),
                    v9,
                    *((unsigned __int16 *)v13 + 61),
                    v9,
                    v13[26],
                    v9,
                    *((unsigned __int8 *)v13 + 152),
                    v9,
                    *((unsigned __int8 *)v13 + 153),
                    v9,
                    *((unsigned __int16 *)v13 + 83),
                    v9,
                    *((unsigned __int8 *)v13 + 154),
                    v9,
                    *((unsigned __int8 *)v13 + 155),
                    v9,
                    *((unsigned __int8 *)v13 + 156),
                    v9,
                    *((unsigned __int8 *)v13 + 157),
                    v9,
                    *((unsigned __int8 *)v13 + 158),
                    v9,
                    *((unsigned __int8 *)v13 + 159));
                }
                if (IO80211Controller::isLQMOSLOGEnabled(this))
                {
                  uint64_t v7 = v27;
                  this = v26;
                  io80211_os_log();
                }
                if (IO80211Controller::isLQMIOLOGEnabled(this))
                {
                  uint64_t v14 = &v7[29 * v8];
                  uint64_t v7 = v27;
                  this = v26;
                  IOLog("LQM-WIFI-PHYCAL: V2 rxa_vpoff[%u] = %u, rxb_vpoff[%u] = %u, rxa_ipoff[%u] = %u, rxb_ipoff[%u] = %u, rxs_vpoff[%u] = %u, rxs_ipoff[%u] = %u,txiqlo_2g_a0[%u] = %u, txiqlo_2g_b0[%u] = %u, txiqlo_2g_a1[%u] = %u, txiqlo_2g_b1[%u] = %u, txiqlo_2g_a2[%u] = %u, txiqlo_2g_b2[%u]= %u, txs[%u] = %u, txs_mean[%u] = %u, txgain_rad_gain[%u] = %u, txgain_rad_gain_mi[%u] = %u, txgain_rad_gain_hi[%u] = %u,txgain_dac_gain[%u] = %u, txgain_bbmult[%u] = %u, rxs_mean_vpoff[%u] = %u, rxs_mean_ipoff[%u] = %u, rxs_mean[%u] = %u rxms[%u] =%u, rxms_vpoff[%u] = %u, rxms_ipoff[%u] = %u \n", v9, *((unsigned __int16 *)v14 + 62), v9, *((unsigned __int16 *)v14 + 63), v9, *((unsigned __int16 *)v14 + 64), v9, *((unsigned __int16 *)v14 + 65), v9, v14[33], v9, v14[34], v9,
                    *((unsigned __int16 *)v14 + 70),
                    v9,
                    *((unsigned __int16 *)v14 + 71),
                    v9,
                    *((unsigned __int16 *)v14 + 72),
                    v9,
                    *((unsigned __int16 *)v14 + 73),
                    v9,
                    *((unsigned __int16 *)v14 + 74),
                    v9,
                    *((unsigned __int16 *)v14 + 75),
                    v9,
                    v14[40],
                    v9,
                    *((__int16 *)v14 + 82),
                    v9,
                    *((unsigned __int16 *)v14 + 84),
                    v9,
                    *((unsigned __int16 *)v14 + 85),
                    v9,
                    *((unsigned __int16 *)v14 + 86),
                    v9,
                    *((unsigned __int16 *)v14 + 87),
                    v9,
                    *((unsigned __int16 *)v14 + 88),
                    v9,
                    *((__int16 *)v14 + 89),
                    v9,
                    *((__int16 *)v14 + 90),
                    v9,
                    *((__int16 *)v14 + 91),
                    v9,
                    *((unsigned __int8 *)v14 + 184),
                    v9,
                    *((unsigned __int8 *)v14 + 185),
                    v9,
                    *((unsigned __int8 *)v14 + 186));
                }
                if (IO80211Controller::isLQMCCLOGEnabled(this))
                {
                  uint64_t v15 = &v7[29 * v8];
                  uint64_t v7 = v27;
                  this = v26;
                  IO80211Controller::logLQMToCC(v26, "LQM-WIFI-PHYCAL: V2 rxa_vpoff[%u] = %u, rxb_vpoff[%u] = %u, rxa_ipoff[%u] = %u, rxb_ipoff[%u] = %u, rxs_vpoff[%u] = %u, rxs_ipoff[%u] = %u,txiqlo_2g_a0[%u] = %u, txiqlo_2g_b0[%u] = %u, txiqlo_2g_a1[%u] = %u, txiqlo_2g_b1[%u] = %u, txiqlo_2g_a2[%u] = %u, txiqlo_2g_b2[%u]= %u, txs[%u] = %u, txs_mean[%u] = %u, txgain_rad_gain[%u] = %u, txgain_rad_gain_mi[%u] = %u, txgain_rad_gain_hi[%u] = %u,txgain_dac_gain[%u] = %u, txgain_bbmult[%u] = %u, rxs_mean_vpoff[%u] = %u, rxs_mean_ipoff[%u] = %u, rxs_mean[%u] = %u rxms[%u] =%u, rxms_vpoff[%u] = %u, rxms_ipoff[%u] = %u \n", v9, *((unsigned __int16 *)v15 + 62), v9, *((unsigned __int16 *)v15 + 63), v9, *((unsigned __int16 *)v15 + 64), v9, *((unsigned __int16 *)v15 + 65), v9, v15[33], v9, v15[34],
                    v9,
                    *((unsigned __int16 *)v15 + 70),
                    v9,
                    *((unsigned __int16 *)v15 + 71),
                    v9,
                    *((unsigned __int16 *)v15 + 72),
                    v9,
                    *((unsigned __int16 *)v15 + 73),
                    v9,
                    *((unsigned __int16 *)v15 + 74),
                    v9,
                    *((unsigned __int16 *)v15 + 75),
                    v9,
                    v15[40],
                    v9,
                    *((__int16 *)v15 + 82),
                    v9,
                    *((unsigned __int16 *)v15 + 84),
                    v9,
                    *((unsigned __int16 *)v15 + 85),
                    v9,
                    *((unsigned __int16 *)v15 + 86),
                    v9,
                    *((unsigned __int16 *)v15 + 87),
                    v9,
                    *((unsigned __int16 *)v15 + 88),
                    v9,
                    *((__int16 *)v15 + 89),
                    v9,
                    *((__int16 *)v15 + 90),
                    v9,
                    *((__int16 *)v15 + 91),
                    v9,
                    *((unsigned __int8 *)v15 + 184),
                    v9,
                    *((unsigned __int8 *)v15 + 185),
                    v9,
                    *((unsigned __int8 *)v15 + 186));
                }
                if (IO80211Controller::isLQMOSLOGEnabled(this)) {
                  io80211_os_log();
                }
                if (IO80211Controller::isLQMIOLOGEnabled(this))
                {
                  int v16 = &v7[29 * v8];
                  IOLog("LQM-WIFI-PHYCAL: V2 ccktxgain_offset[%u] = %u, mppc_gain_offset_qdB0[%u] = %u, mppc_gain_offset_qdB1[%u] = %u, mppc_gain_offset_qdB2[%u] = %u,mppc_gain_offset_qdB3[%u] = %u, debug_01[%u] = %u, debug_02[%u] = %u, debug_03[%u] = %u, debug_04[%u] = %u, debug_05[%u] = %u,debug_06[%u] = %u, debug_07[%u] = %u, debug_08[%u] = %u, debug_09[%u] = %u, debug_10[%u] = %u, debug_11[%u] = %u, debug_12[%u] = %u\n", v9, *((unsigned __int8 *)v16 + 187), v9, *((char *)v16 + 188), v9, *((char *)v16 + 189), v9, *((char *)v16 + 190), v9, *((char *)v16 + 191), v9, *((unsigned __int8 *)v16 + 192), v9, *((unsigned __int8 *)v16 + 193), v9,
                    *((unsigned __int8 *)v16 + 194),
                    v9,
                    *((unsigned __int8 *)v16 + 195),
                    v9,
                    *((unsigned __int16 *)v16 + 98),
                    v9,
                    *((unsigned __int16 *)v16 + 99),
                    v9,
                    *((unsigned __int16 *)v16 + 100),
                    v9,
                    *((unsigned __int16 *)v16 + 101),
                    v9,
                    v16[51],
                    v9,
                    v16[52],
                    v9,
                    v16[53],
                    v9,
                    v16[54]);
                }
                if (IO80211Controller::isLQMCCLOGEnabled(this))
                {
                  uint64_t v17 = &v7[29 * v8];
                  IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHYCAL: V2 ccktxgain_offset[%u] = %u, mppc_gain_offset_qdB0[%u] = %u, mppc_gain_offset_qdB1[%u] = %u, mppc_gain_offset_qdB2[%u] = %u,mppc_gain_offset_qdB3[%u] = %u, debug_01[%u] = %u, debug_02[%u] = %u, debug_03[%u] = %u, debug_04[%u] = %u, debug_05[%u] = %u,debug_06[%u] = %u, debug_07[%u] = %u, debug_08[%u] = %u, debug_09[%u] = %u, debug_10[%u] = %u, debug_11[%u] = %u, debug_12[%u] = %u\n", v9, *((unsigned __int8 *)v17 + 187), v9, *((char *)v17 + 188), v9, *((char *)v17 + 189), v9, *((char *)v17 + 190), v9, *((char *)v17 + 191), v9, *((unsigned __int8 *)v17 + 192), v9, *((unsigned __int8 *)v17 + 193),
                    v9,
                    *((unsigned __int8 *)v17 + 194),
                    v9,
                    *((unsigned __int8 *)v17 + 195),
                    v9,
                    *((unsigned __int16 *)v17 + 98),
                    v9,
                    *((unsigned __int16 *)v17 + 99),
                    v9,
                    *((unsigned __int16 *)v17 + 100),
                    v9,
                    *((unsigned __int16 *)v17 + 101),
                    v9,
                    v17[51],
                    v9,
                    v17[52],
                    v9,
                    v17[53],
                    v9,
                    v17[54]);
                }
              }
              char v10 = 0;
              uint64_t v8 = 1;
              int v9 = 1;
            }
            while ((v11 & 1) != 0);
            v7 += 84;
            int v6 = v25 + 1;
            uint64_t v5 = v24;
          }
          while (v25 + 1 < *((unsigned __int8 *)v24 + 4));
        }
        uint64_t v18 = 0;
      }
      else
      {
        uint64_t v18 = 3758097084;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            int v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v22, "[dk] %s@%d:Unexpected length\n");
          }
        }
      }
    }
    else
    {
      uint64_t v18 = 3758097084;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v21 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v21, "[dk] %s@%d:Unexpected Version\n");
        }
      }
    }
  }
  if (v23) {
    IOFreeData();
  }
  return v18;
}

uint64_t AppleBCMWLANCore::parsePHYCalEcounterV3(AppleBCMWLANCore *this, OSData *a2)
{
  uint64_t v4 = IOMallocZeroData();
  if (((unint64_t)OSData::getBytesNoCopy(a2) & 3) != 0)
  {
    uint64_t v27 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v29 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v29, "[dk] %s@%d:Buffer not aligned\n");
      }
    }
  }
  else
  {
    BytesNoCopy = (char *)OSData::getBytesNoCopy(a2);
    if (*(_WORD *)BytesNoCopy == 3)
    {
      int v6 = (unsigned __int16 *)BytesNoCopy;
      if (((540 * BytesNoCopy[4] + 8) & 0xFFFC) == *((unsigned __int16 *)BytesNoCopy + 1))
      {
        if (BytesNoCopy[4])
        {
          uint64_t v32 = v4;
          unsigned __int16 v33 = (unsigned __int16 *)BytesNoCopy;
          int v7 = 0;
          uint64_t v8 = BytesNoCopy + 8;
          do
          {
            int v34 = v7;
            if (this)
            {
              if (IO80211Controller::isLQMOSLOGEnabled(this)) {
                io80211_os_log();
              }
              if (IO80211Controller::isLQMIOLOGEnabled(this)) {
                IOLog("LQM-WIFI-PHYCAL: V3:  Version: %u , NumChan: %u, Chanspec = 0x%04x, last_cal_time = %d, last_cal_temp = %d, txiqlocal_retry = %u, rxe = %u,cal_phase_id = %u, slice = %u, desense_reasouint64_t n = %u, dur = %u, reasouint64_t n = %u, hc_retry_count_vpoff = %u, hc_retry_count_ipoff = %u,hc_retry_count_rx = %u ", *v6, *((unsigned __int8 *)v6 + 4), *((unsigned __int16 *)v8 + 2), *v8, *((__int16 *)v8 + 3), *((unsigned __int8 *)v8 + 8), *((unsigned __int8 *)v8 + 9), *((unsigned __int8 *)v8 + 10), *((unsigned __int8 *)v8 + 11), v8[3], *((unsigned __int16 *)v8 + 8), *((unsigned __int8 *)v8 + 18), *((unsigned __int8 *)v8 + 19), *((unsigned __int8 *)v8 + 20), *((unsigned __int8 *)v8 + 21));
              }
              if (IO80211Controller::isLQMCCLOGEnabled(this)) {
                IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHYCAL: V3:  Version: %u , NumChan: %u, Chanspec = 0x%04x, last_cal_time = %d, last_cal_temp = %d, txiqlocal_retry = %u, rxe = %u,cal_phase_id = %u, slice = %u, desense_reasouint64_t n = %u, dur = %u, reasouint64_t n = %u, hc_retry_count_vpoff = %u, hc_retry_count_ipoff = %u,hc_retry_count_rx = %u ", *v6, *((unsigned __int8 *)v6 + 4), *((unsigned __int16 *)v8 + 2), *v8, *((__int16 *)v8 + 3), *((unsigned __int8 *)v8 + 8), *((unsigned __int8 *)v8 + 9), *((unsigned __int8 *)v8 + 10), *((unsigned __int8 *)v8 + 11), v8[3], *((unsigned __int16 *)v8 + 8), *((unsigned __int8 *)v8 + 18), *((unsigned __int8 *)v8 + 19), *((unsigned __int8 *)v8 + 20), *((unsigned __int8 *)v8 + 21));
              }
              if (IO80211Controller::isLQMOSLOGEnabled(this)) {
                io80211_os_log();
              }
              if (IO80211Controller::isLQMIOLOGEnabled(this)) {
                IOLog("LQM-WIFI-PHYCAL: V3: hc_dev_exceed_log_rx_vpoff = %u, hc_dev_exceed_log_rx_ipoff = %u, hc_dev_exceed_log_rx = %u, sc_rxiqcal_skip_cnt = %u,hc_retry_count_tx = %u, hc_dev_exceed_log_tx = %u, txiqcal_max_retry_cnt = %u, txiqcal_max_slope_cnt = %u, mppc_cal_failed_count = %u,is_mppc_gain_offset_cal_success = %u \n", *((unsigned __int8 *)v8 + 23), *((unsigned __int8 *)v8 + 24), *((unsigned __int8 *)v8 + 25), *((unsigned __int8 *)v8 + 27), *((unsigned __int8 *)v8 + 22), *((unsigned __int8 *)v8 + 26), *((unsigned __int16 *)v8 + 14), *((unsigned __int16 *)v8 + 15), *((unsigned __int16 *)v8 + 16), *((unsigned __int8 *)v8 + 76));
              }
              if (IO80211Controller::isLQMCCLOGEnabled(this)) {
                IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHYCAL: V3: hc_dev_exceed_log_rx_vpoff = %u, hc_dev_exceed_log_rx_ipoff = %u, hc_dev_exceed_log_rx = %u, sc_rxiqcal_skip_cnt = %u,hc_retry_count_tx = %u, hc_dev_exceed_log_tx = %u, txiqcal_max_retry_cnt = %u, txiqcal_max_slope_cnt = %u, mppc_cal_failed_count = %u,is_mppc_gain_offset_cal_success = %u \n", *((unsigned __int8 *)v8 + 23), *((unsigned __int8 *)v8 + 24), *((unsigned __int8 *)v8 + 25), *((unsigned __int8 *)v8 + 27), *((unsigned __int8 *)v8 + 22), *((unsigned __int8 *)v8 + 26), *((unsigned __int16 *)v8 + 14), *((unsigned __int16 *)v8 + 15), *((unsigned __int16 *)v8 + 16), *((unsigned __int8 *)v8 + 76));
              }
              if (IO80211Controller::isLQMOSLOGEnabled(this)) {
                io80211_os_log();
              }
              if (IO80211Controller::isLQMIOLOGEnabled(this)) {
                IOLog("LQM-WIFI-PHYCAL: V3: txiqlocal_coeffs[0] = %d, txiqlocal_coeffs[1] = %d, txiqlocal_coeffs[2] = %d, txiqlocal_coeffs[3] = %d, txiqlocal_coeffs[4] =%d, txiqlocal_coeffs[5] = %d, txiqlocal_coeffs[6] = %d, txiqlocal_coeffs[7] = %d, txiqlocal_coeffs[8] = %d, txiqlocal_coeffs[9] = %d,txiqlocal_coeffs[10] = %d, txiqlocal_coeffs[11] = %d, txiqlocal_coeffs[12] = %d, txiqlocal_coeffs[13] = %d, txiqlocal_coeffs[14] = %d,txiqlocal_coeffs[15] = %d, txiqlocal_coeffs[16] = %d, txiqlocal_coeffs[17] = %d, txiqlocal_coeffs[18] = %d, txiqlocal_coeffs[19] = %d \n ", *((unsigned __int16 *)v8 + 18), *((unsigned __int16 *)v8 + 19), *((unsigned __int16 *)v8 + 20), *((unsigned __int16 *)v8 + 21), *((unsigned __int16 *)v8 + 22), *((unsigned __int16 *)v8 + 23), *((unsigned __int16 *)v8 + 24), *((unsigned __int16 *)v8 + 25), *((unsigned __int16 *)v8 + 26), *((unsigned __int16 *)v8 + 27), *((unsigned __int16 *)v8 + 28), *((unsigned __int16 *)v8 + 29),
              }
                  *((unsigned __int16 *)v8 + 30),
                  *((unsigned __int16 *)v8 + 31),
                  *((unsigned __int16 *)v8 + 32),
                  *((unsigned __int16 *)v8 + 33),
                  *((unsigned __int16 *)v8 + 34),
                  *((unsigned __int16 *)v8 + 35),
                  *((unsigned __int16 *)v8 + 36),
                  *((unsigned __int16 *)v8 + 37));
              if (IO80211Controller::isLQMCCLOGEnabled(this)) {
                IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHYCAL: V3: txiqlocal_coeffs[0] = %d, txiqlocal_coeffs[1] = %d, txiqlocal_coeffs[2] = %d, txiqlocal_coeffs[3] = %d, txiqlocal_coeffs[4] =%d, txiqlocal_coeffs[5] = %d, txiqlocal_coeffs[6] = %d, txiqlocal_coeffs[7] = %d, txiqlocal_coeffs[8] = %d, txiqlocal_coeffs[9] = %d,txiqlocal_coeffs[10] = %d, txiqlocal_coeffs[11] = %d, txiqlocal_coeffs[12] = %d, txiqlocal_coeffs[13] = %d, txiqlocal_coeffs[14] = %d,txiqlocal_coeffs[15] = %d, txiqlocal_coeffs[16] = %d, txiqlocal_coeffs[17] = %d, txiqlocal_coeffs[18] = %d, txiqlocal_coeffs[19] = %d \n ", *((unsigned __int16 *)v8 + 18), *((unsigned __int16 *)v8 + 19), *((unsigned __int16 *)v8 + 20), *((unsigned __int16 *)v8 + 21), *((unsigned __int16 *)v8 + 22), *((unsigned __int16 *)v8 + 23), *((unsigned __int16 *)v8 + 24), *((unsigned __int16 *)v8 + 25), *((unsigned __int16 *)v8 + 26), *((unsigned __int16 *)v8 + 27), *((unsigned __int16 *)v8 + 28),
              }
                  *((unsigned __int16 *)v8 + 29),
                  *((unsigned __int16 *)v8 + 30),
                  *((unsigned __int16 *)v8 + 31),
                  *((unsigned __int16 *)v8 + 32),
                  *((unsigned __int16 *)v8 + 33),
                  *((unsigned __int16 *)v8 + 34),
                  *((unsigned __int16 *)v8 + 35),
                  *((unsigned __int16 *)v8 + 36),
                  *((unsigned __int16 *)v8 + 37));
              if (IO80211Controller::isLQMOSLOGEnabled(this)) {
                io80211_os_log();
              }
              if (IO80211Controller::isLQMIOLOGEnabled(this)) {
                IOLog("LQM-WIFI-PHYCAL: V3 debug_01 = %u, debug_02 = %u, debug_03 = %u, debug_04 = %u, debug_05 = %u, debug_06 = %u, debug_07 = %u, debug_08 = %u\n", *((unsigned __int16 *)v8 + 17), *((unsigned __int8 *)v8 + 77), *((unsigned __int8 *)v8 + 78), *((unsigned __int8 *)v8 + 79), *((unsigned __int16 *)v8 + 40), *((unsigned __int16 *)v8 + 41), v8[21], v8[22]);
              }
              if (IO80211Controller::isLQMCCLOGEnabled(this)) {
                IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHYCAL: V3 debug_01 = %u, debug_02 = %u, debug_03 = %u, debug_04 = %u, debug_05 = %u, debug_06 = %u, debug_07 = %u, debug_08 = %u\n", *((unsigned __int16 *)v8 + 17), *((unsigned __int8 *)v8 + 77), *((unsigned __int8 *)v8 + 78), *((unsigned __int8 *)v8 + 79), *((unsigned __int16 *)v8 + 40), *((unsigned __int16 *)v8 + 41), v8[21], v8[22]);
              }
            }
            uint64_t v9 = 0;
            int v10 = 0;
            char v11 = 1;
            __int16 v35 = v8;
            do
            {
              char v12 = v11;
              if (this)
              {
                if (IO80211Controller::isLQMOSLOGEnabled(this)) {
                  io80211_os_log();
                }
                if (IO80211Controller::isLQMIOLOGEnabled(this))
                {
                  unsigned int v13 = &v8[56 * v9];
                  IOLog("LQM-WIFI-PHYCAL: V3 dc_est_i[%u] = %d, dc_est_q[%u] = %d, ofdm_txd[%u] = %u, rxa[%u] = %u, rxb[%u] = %u, rxs[%u] = %u, baseidx[%u] = %u, baseidx_cck[%u] = %u, txbaseidx_gtthres_cnt[%u] = %u\n", v10, *((__int16 *)v13 + 81), v10, *((__int16 *)v13 + 82), v10, *((unsigned __int16 *)v13 + 50), v10, *((unsigned __int16 *)v13 + 46), v10, *((unsigned __int16 *)v13 + 47), v10, v13[24], v10, *((unsigned __int8 *)v13 + 102), v10, *((unsigned __int8 *)v13 + 103), v10,
                    *((unsigned __int16 *)v13 + 69));
                }
                if (IO80211Controller::isLQMCCLOGEnabled(this))
                {
                  uint64_t v14 = &v8[56 * v9];
                  IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHYCAL: V3 dc_est_i[%u] = %d, dc_est_q[%u] = %d, ofdm_txd[%u] = %u, rxa[%u] = %u, rxb[%u] = %u, rxs[%u] = %u, baseidx[%u] = %u, baseidx_cck[%u] = %u, txbaseidx_gtthres_cnt[%u] = %u\n", v10, *((__int16 *)v14 + 81), v10, *((__int16 *)v14 + 82), v10, *((unsigned __int16 *)v14 + 50), v10, *((unsigned __int16 *)v14 + 46), v10, *((unsigned __int16 *)v14 + 47), v10, v14[24], v10, *((unsigned __int8 *)v14 + 102), v10, *((unsigned __int8 *)v14 + 103),
                    v10,
                    *((unsigned __int16 *)v14 + 69));
                }
                if (IO80211Controller::isLQMOSLOGEnabled(this)) {
                  io80211_os_log();
                }
                if (IO80211Controller::isLQMIOLOGEnabled(this))
                {
                  uint64_t v15 = (__int16 *)&v8[56 * v9];
                  IOLog("LQM-WIFI-PHYCAL: V3 core %u kappa_theta[0-15][0]: %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\n", v10, v15[83], v15[85], v15[87], v15[89], v15[91], v15[93], v15[95], v15[97], v15[99], v15[101], v15[103], v15[105], v15[107], v15[109], v15[111], v15[113]);
                }
                if (IO80211Controller::isLQMCCLOGEnabled(this))
                {
                  int v16 = (__int16 *)&v8[56 * v9];
                  IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHYCAL: V3 core %u kappa_theta[0-15][0]: %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\n", v10, v16[83], v16[85], v16[87], v16[89], v16[91], v16[93], v16[95], v16[97], v16[99], v16[101], v16[103], v16[105], v16[107], v16[109], v16[111], v16[113]);
                }
                if (IO80211Controller::isLQMOSLOGEnabled(this)) {
                  io80211_os_log();
                }
                if (IO80211Controller::isLQMIOLOGEnabled(this))
                {
                  uint64_t v17 = (__int16 *)&v8[56 * v9];
                  IOLog("LQM-WIFI-PHYCAL: V3 core %u kappa_theta[0-15][1]: %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\n", v10, v17[84], v17[86], v17[88], v17[90], v17[92], v17[94], v17[96], v17[98], v17[100], v17[102], v17[104], v17[106], v17[108], v17[110], v17[112], v17[114]);
                }
                if (IO80211Controller::isLQMCCLOGEnabled(this))
                {
                  uint64_t v18 = (__int16 *)&v8[56 * v9];
                  IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHYCAL: V3 core %u kappa_theta[0-15][1]: %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\n", v10, v18[84], v18[86], v18[88], v18[90], v18[92], v18[94], v18[96], v18[98], v18[100], v18[102], v18[104], v18[106], v18[108], v18[110], v18[112], v18[114]);
                }
                if (IO80211Controller::isLQMOSLOGEnabled(this)) {
                  io80211_os_log();
                }
                if (IO80211Controller::isLQMIOLOGEnabled(this))
                {
                  uint64_t v19 = (__int16 *)&v8[56 * v9];
                  IOLog("LQM-WIFI-PHYCAL: V3 core %u dc_re_im[0-15][0]: %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\n", v10, v19[115], v19[117], v19[119], v19[121], v19[123], v19[125], v19[127], v19[129], v19[131], v19[133], v19[135], v19[137], v19[139], v19[141], v19[143], v19[145]);
                }
                if (IO80211Controller::isLQMCCLOGEnabled(this))
                {
                  uint64_t v20 = (__int16 *)&v8[56 * v9];
                  IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHYCAL: V3 core %u dc_re_im[0-15][0]: %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\n", v10, v20[115], v20[117], v20[119], v20[121], v20[123], v20[125], v20[127], v20[129], v20[131], v20[133], v20[135], v20[137], v20[139], v20[141], v20[143], v20[145]);
                }
                if (IO80211Controller::isLQMOSLOGEnabled(this)) {
                  io80211_os_log();
                }
                if (IO80211Controller::isLQMIOLOGEnabled(this))
                {
                  uint64_t v21 = (__int16 *)&v8[56 * v9];
                  IOLog("LQM-WIFI-PHYCAL: V3 core %u dc_re_im[0-15][1]: %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\n", v10, v21[116], v21[118], v21[120], v21[122], v21[124], v21[126], v21[128], v21[130], v21[132], v21[134], v21[136], v21[138], v21[140], v21[142], v21[144], v21[146]);
                }
                if (IO80211Controller::isLQMCCLOGEnabled(this))
                {
                  int v22 = (__int16 *)&v8[56 * v9];
                  IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHYCAL: V3 core %u dc_re_im[0-15][1]: %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\n", v10, v22[116], v22[118], v22[120], v22[122], v22[124], v22[126], v22[128], v22[130], v22[132], v22[134], v22[136], v22[138], v22[140], v22[142], v22[144], v22[146]);
                }
                if (IO80211Controller::isLQMOSLOGEnabled(this))
                {
                  uint64_t v8 = v35;
                  io80211_os_log();
                }
                if (IO80211Controller::isLQMIOLOGEnabled(this))
                {
                  uint64_t v23 = &v8[56 * v9];
                  uint64_t v8 = v35;
                  IOLog("LQM-WIFI-PHYCAL: V3 rxa_vpoff[%u] = %u, rxb_vpoff[%u] = %u, rxa_ipoff[%u] = %u, rxb_ipoff[%u] = %u, rxs_vpoff[%u] = %u, rxs_ipoff[%u] = %u,txiqlo_a0[%u] = %u, txiqlo_b0[%u] = %u, txiqlo_a1[%u] = %u, txiqlo_b1[%u] = %u, txiqlo_a2[%u] = %u, txiqlo_b2[%u]= %u, txs[%u] = %u, txs_mean[%u] = %u, txgain_rad_gain[%u] = %u, txgain_rad_gain_mi[%u] = %u, txgain_rad_gain_hi[%u] = %u,txgain_bbmult[%u] = %u, rxs_mean_vpoff[%u] = %u, rxs_mean_ipoff[%u] = %u, rxs_mean[%u] = %u rxms[%u] =%u, rxms_vpoff[%u] = %u, rxms_ipoff[%u] = %u \n", v10, *((unsigned __int16 *)v23 + 52), v10, *((unsigned __int16 *)v23 + 53), v10, *((unsigned __int16 *)v23 + 54), v10, *((unsigned __int16 *)v23 + 55), v10, v23[28], v10, v23[29], v10,
                    *((unsigned __int16 *)v23 + 60),
                    v10,
                    *((unsigned __int16 *)v23 + 61),
                    v10,
                    *((unsigned __int16 *)v23 + 62),
                    v10,
                    *((unsigned __int16 *)v23 + 63),
                    v10,
                    *((unsigned __int16 *)v23 + 64),
                    v10,
                    *((unsigned __int16 *)v23 + 65),
                    v10,
                    v23[33],
                    v10,
                    *((__int16 *)v23 + 68),
                    v10,
                    *((unsigned __int16 *)v23 + 70),
                    v10,
                    *((unsigned __int16 *)v23 + 71),
                    v10,
                    *((unsigned __int16 *)v23 + 72),
                    v10,
                    *((unsigned __int16 *)v23 + 73),
                    v10,
                    *((__int16 *)v23 + 74),
                    v10,
                    *((__int16 *)v23 + 75),
                    v10,
                    *((__int16 *)v23 + 76),
                    v10,
                    *((unsigned __int8 *)v23 + 154),
                    v10,
                    *((unsigned __int8 *)v23 + 155),
                    v10,
                    *((unsigned __int8 *)v23 + 156));
                }
                if (IO80211Controller::isLQMCCLOGEnabled(this))
                {
                  int v24 = &v8[56 * v9];
                  uint64_t v8 = v35;
                  IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHYCAL: V3 rxa_vpoff[%u] = %u, rxb_vpoff[%u] = %u, rxa_ipoff[%u] = %u, rxb_ipoff[%u] = %u, rxs_vpoff[%u] = %u, rxs_ipoff[%u] = %u,txiqlo_a0[%u] = %u, txiqlo_b0[%u] = %u, txiqlo_a1[%u] = %u, txiqlo_b1[%u] = %u, txiqlo_a2[%u] = %u, txiqlo_b2[%u]= %u, txs[%u] = %u, txs_mean[%u] = %u, txgain_rad_gain[%u] = %u, txgain_rad_gain_mi[%u] = %u, txgain_rad_gain_hi[%u] = %u,txgain_bbmult[%u] = %u, rxs_mean_vpoff[%u] = %u, rxs_mean_ipoff[%u] = %u, rxs_mean[%u] = %u rxms[%u] =%u, rxms_vpoff[%u] = %u, rxms_ipoff[%u] = %u \n", v10, *((unsigned __int16 *)v24 + 52), v10, *((unsigned __int16 *)v24 + 53), v10, *((unsigned __int16 *)v24 + 54), v10, *((unsigned __int16 *)v24 + 55), v10, v24[28], v10, v24[29],
                    v10,
                    *((unsigned __int16 *)v24 + 60),
                    v10,
                    *((unsigned __int16 *)v24 + 61),
                    v10,
                    *((unsigned __int16 *)v24 + 62),
                    v10,
                    *((unsigned __int16 *)v24 + 63),
                    v10,
                    *((unsigned __int16 *)v24 + 64),
                    v10,
                    *((unsigned __int16 *)v24 + 65),
                    v10,
                    v24[33],
                    v10,
                    *((__int16 *)v24 + 68),
                    v10,
                    *((unsigned __int16 *)v24 + 70),
                    v10,
                    *((unsigned __int16 *)v24 + 71),
                    v10,
                    *((unsigned __int16 *)v24 + 72),
                    v10,
                    *((unsigned __int16 *)v24 + 73),
                    v10,
                    *((__int16 *)v24 + 74),
                    v10,
                    *((__int16 *)v24 + 75),
                    v10,
                    *((__int16 *)v24 + 76),
                    v10,
                    *((unsigned __int8 *)v24 + 154),
                    v10,
                    *((unsigned __int8 *)v24 + 155),
                    v10,
                    *((unsigned __int8 *)v24 + 156));
                }
                if (IO80211Controller::isLQMOSLOGEnabled(this)) {
                  io80211_os_log();
                }
                if (IO80211Controller::isLQMIOLOGEnabled(this))
                {
                  int v25 = &v8[56 * v9];
                  IOLog("LQM-WIFI-PHYCAL: V3 ccktxgain_offset[%u] = %u, mppc_gain_offset_qdB0[%u] = %u, mppc_gain_offset_qdB1[%u] = %u, mppc_gain_offset_qdB2[%u] = %u,mppc_gain_offset_qdB3[%u] = %u, debug_01[%u] = %u, debug_02[%u] = %u, debug_03[%u] = %u, debug_04[%u] = %u, debug_05[%u] = %u,debug_06[%u] = %u\n", v10, *((unsigned __int8 *)v25 + 157), v10, *((char *)v25 + 158), v10, *((char *)v25 + 159), v10, *((char *)v25 + 160), v10, *((char *)v25 + 161), v10, *((unsigned __int16 *)v25 + 150), v10, *((unsigned __int16 *)v25 + 151), v10, *((unsigned __int16 *)v25 + 152),
                    v10,
                    *((unsigned __int16 *)v25 + 153),
                    v10,
                    v25[77],
                    v10,
                    v25[78]);
                }
                if (IO80211Controller::isLQMCCLOGEnabled(this))
                {
                  int v26 = &v8[56 * v9];
                  IO80211Controller::logLQMToCC(this, "LQM-WIFI-PHYCAL: V3 ccktxgain_offset[%u] = %u, mppc_gain_offset_qdB0[%u] = %u, mppc_gain_offset_qdB1[%u] = %u, mppc_gain_offset_qdB2[%u] = %u,mppc_gain_offset_qdB3[%u] = %u, debug_01[%u] = %u, debug_02[%u] = %u, debug_03[%u] = %u, debug_04[%u] = %u, debug_05[%u] = %u,debug_06[%u] = %u\n", v10, *((unsigned __int8 *)v26 + 157), v10, *((char *)v26 + 158), v10, *((char *)v26 + 159), v10, *((char *)v26 + 160), v10, *((char *)v26 + 161), v10, *((unsigned __int16 *)v26 + 150), v10, *((unsigned __int16 *)v26 + 151), v10,
                    *((unsigned __int16 *)v26 + 152),
                    v10,
                    *((unsigned __int16 *)v26 + 153),
                    v10,
                    v26[77],
                    v10,
                    v26[78]);
                }
              }
              char v11 = 0;
              uint64_t v9 = 1;
              int v10 = 1;
            }
            while ((v12 & 1) != 0);
            v8 += 135;
            int v7 = v34 + 1;
            int v6 = v33;
          }
          while (v34 + 1 < *((unsigned __int8 *)v33 + 4));
          uint64_t v27 = 0;
          uint64_t v4 = v32;
        }
        else
        {
          uint64_t v27 = 0;
        }
      }
      else
      {
        uint64_t v27 = 3758097084;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            __int16 v31 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v31, "[dk] %s@%d:Unexpected length\n");
          }
        }
      }
    }
    else
    {
      uint64_t v27 = 3758097084;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v30 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v30, "[dk] %s@%d:Unexpected Version\n");
        }
      }
    }
  }
  if (v4) {
    IOFreeData();
  }
  return v27;
}

uint64_t AppleBCMWLANCore::issueIfCounterIOVar(OSDictionary *a1, unsigned int a2)
{
  if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)a1, 53))
  {
    uint64_t v5 = 3758097084;
    int v59 = 2;
    int v6 = (AppleBCMWLANCommandWithXTLV *)AppleBCMWLANCommandWithXTLV::withLengthAndHeader((AppleBCMWLANCommandWithXTLV *)0xE4, &v59, (void *)4, (CCLogStream *)a1[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[136].release, v4);
    uint64_t v8 = (void *)IOMallocZeroData();
    unint64_t v57 = 0xAAAAAAAAAAAAAAAALL;
    size_t numBytes = 0xAAAAAAAAAAAAAAAALL;
    if (!v6)
    {
      uint64_t v5 = 3758097085;
      goto LABEL_59;
    }
    if (a2 > 2) {
      goto LABEL_51;
    }
    __int16 v9 = 1282;
    if (a2 != 2)
    {
      if (a2 != 1)
      {
        AppleBCMWLANCommandWithXTLV::addXTLV(v6, 1282, 0, 0);
        __int16 v9 = 1283;
      }
      AppleBCMWLANCommandWithXTLV::addXTLV(v6, v9, 0, 0);
      __int16 v9 = 1284;
    }
    AppleBCMWLANCommandWithXTLV::addXTLV(v6, v9, 0, 0);
    AppleBCMWLANConfigManager::setupFirmwareWithDTDefaults(v6);
    AppleBCMWLANCommandWithXTLV::complete(v6);
    if (v8) {
      size_t v10 = 0x51400B80514;
    }
    else {
      size_t v10 = 0;
    }
    unint64_t v57 = (unint64_t)v8;
    size_t numBytes = v10;
    uint64_t v11 = ((uint64_t (*)(OSDictionary *))a1->ensureCapacity)(a1);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 136))(v11))
    {
      uint64_t v54 = a1;
      uint64_t v55 = AppleBCMWLANCore::handleIssueIfCounterIOVarAsyncCallback;
      uint64_t v56 = 0;
      retaiuint64_t n = (AppleBCMWLANCommander *)a1[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[52].retain;
      if (a2)
      {
        uint64_t CompletionRingPtr = AppleBCMWLANDynamicRingOperationContext::getCompletionRingPtr(v6);
        Commandsize_t Length = AppleBCMWLANCommandWithXTLV::getCommandLength(v6);
        BOOL v15 = CompletionRingPtr != 0;
        BOOL v16 = CommandLength != 0;
        BOOL v17 = !v15 || !v16;
        if (v15 && v16) {
          uint64_t v18 = CommandLength;
        }
        else {
          uint64_t v18 = 0;
        }
        if (v17) {
          uint64_t v19 = 0;
        }
        else {
          uint64_t v19 = CompletionRingPtr;
        }
        uint64_t v52 = v19;
        uint64_t v53 = v18;
        int v51 = 65537 * (v10 & 0x514);
        uint64_t v20 = AppleBCMWLANCommander::sendVirtualIOVarGet(retain, a2, "if_counters", (uint64_t)&v52, (unsigned __int16 *)&v51, (uint64_t)&v54, 0);
      }
      else
      {
        uint64_t v31 = AppleBCMWLANDynamicRingOperationContext::getCompletionRingPtr(v6);
        unsigned int v32 = AppleBCMWLANCommandWithXTLV::getCommandLength(v6);
        BOOL v33 = v31 != 0;
        BOOL v34 = v32 != 0;
        BOOL v35 = !v33 || !v34;
        if (v33 && v34) {
          uint64_t v36 = v32;
        }
        else {
          uint64_t v36 = 0;
        }
        if (v35) {
          uint64_t v37 = 0;
        }
        else {
          uint64_t v37 = v31;
        }
        uint64_t v52 = v37;
        uint64_t v53 = v36;
        int v51 = 65537 * (v10 & 0x514);
        uint64_t v20 = AppleBCMWLANCommander::sendIOVarGet(retain, (uint64_t)"if_counters", (uint64_t)&v52, (unsigned __int16 *)&v51, (uint64_t)&v54, 0);
      }
      uint64_t v5 = v20;
    }
    else
    {
      int v22 = (AppleBCMWLANCommander *)a1[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[52].retain;
      if (a2)
      {
        uint64_t v23 = AppleBCMWLANDynamicRingOperationContext::getCompletionRingPtr(v6);
        unsigned int v24 = AppleBCMWLANCommandWithXTLV::getCommandLength(v6);
        BOOL v25 = v23 != 0;
        BOOL v26 = v24 != 0;
        BOOL v27 = !v25 || !v26;
        if (v25 && v26) {
          int v28 = (uint64_t (*)(OSDictionary *, uint64_t, uint64_t, uint64_t))v24;
        }
        else {
          int v28 = 0;
        }
        if (v27) {
          uint64_t v29 = 0;
        }
        else {
          uint64_t v29 = v23;
        }
        uint64_t v54 = (OSDictionary *)v29;
        uint64_t v55 = v28;
        uint64_t v30 = AppleBCMWLANCommander::runVirtualIOVarGet(v22, a2, "if_counters", (uint64_t)&v54, (uint64_t)&v57, 0);
      }
      else
      {
        uint64_t v38 = AppleBCMWLANDynamicRingOperationContext::getCompletionRingPtr(v6);
        unsigned int v39 = AppleBCMWLANCommandWithXTLV::getCommandLength(v6);
        BOOL v40 = v38 != 0;
        BOOL v41 = v39 != 0;
        BOOL v42 = !v40 || !v41;
        if (v40 && v41) {
          int v43 = (uint64_t (*)(OSDictionary *, uint64_t, uint64_t, uint64_t))v39;
        }
        else {
          int v43 = 0;
        }
        if (v42) {
          uint64_t v44 = 0;
        }
        else {
          uint64_t v44 = v38;
        }
        uint64_t v54 = (OSDictionary *)v44;
        uint64_t v55 = v43;
        uint64_t v30 = AppleBCMWLANCommander::runIOVarGet(v22, (uint64_t)"if_counters", (uint64_t)&v54, (uint64_t)&v57, 0);
      }
      uint64_t v5 = v30;
      if (v30) {
        goto LABEL_59;
      }
      int v45 = OSData::withBytesNoCopy(v8, (unsigned __int16)numBytes);
      if (!v45)
      {
        if (((uint64_t (*)(OSDictionary *))a1->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(a1))
        {
          ((void (*)(OSDictionary *))a1->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(a1);
          if (CCLogStream::shouldLog())
          {
            int v50 = (CCLogStream *)((uint64_t (*)(OSDictionary *))a1->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(a1);
            CCLogStream::logAlert(v50, "[dk] %s@%d:Bad payload\n", "issueIfCounterIOVar", 32798);
          }
        }
        uint64_t v5 = 3758097084;
        goto LABEL_59;
      }
      uint64_t v46 = v45;
      uint64_t v5 = AppleBCMWLANCore::parseXTLVMessage(a1, v45);
      ((void (*)(OSData *))v46->release)(v46);
    }
    if (!v5)
    {
LABEL_50:
      (*(void (**)(AppleBCMWLANCommandWithXTLV *))(*(void *)v6 + 16))(v6);
      goto LABEL_51;
    }
LABEL_59:
    if (((uint64_t (*)(OSDictionary *, uint64_t))a1->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(a1, v7)&& (((void (*)(OSDictionary *))a1->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(a1), CCLogStream::shouldLog()))
    {
      uint64_t v48 = (CCLogStream *)((uint64_t (*)(OSDictionary *))a1->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(a1);
      uint64_t v49 = (const char *)((uint64_t (*)(OSDictionary *, uint64_t))a1->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[1].retain)(a1, v5);
      CCLogStream::logAlert(v48, "[dk] %s@%d:if_counters command failed reason: %s\n", "issueIfCounterIOVar", 32805, v49);
      if (v6) {
        goto LABEL_50;
      }
    }
    else if (v6)
    {
      goto LABEL_50;
    }
LABEL_51:
    if (v8) {
      IOFreeData();
    }
    return v5;
  }
  uint64_t v5 = 3758097095;
  if (((uint64_t (*)(OSDictionary *))a1->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(a1))
  {
    ((void (*)(OSDictionary *))a1->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v21 = (CCLogStream *)((uint64_t (*)(OSDictionary *))a1->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(a1);
      CCLogStream::logAlert(v21, "[dk] %s@%d:issueIfCounterIOVar feature is not supported\n", "issueIfCounterIOVar", 32735);
      return 3758097095;
    }
  }
  return v5;
}

uint64_t AppleBCMWLANCore::handleIssueIfCounterIOVarAsyncCallback(OSDictionary *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v5 = a3;
    if (((uint64_t (*)(OSDictionary *))a1->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(a1))
    {
      ((void (*)(OSDictionary *))a1->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(a1);
      if (CCLogStream::shouldLog())
      {
        size_t v10 = (CCLogStream *)((uint64_t (*)(OSDictionary *))a1->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(a1);
        uint64_t v11 = (const char *)((uint64_t (*)(OSDictionary *, uint64_t))a1->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[1].retain)(a1, v5);
        CCLogStream::logCrit(v10, "[dk] %s@%d: if_counters IOVAR failed, error %s\n", "handleIssueIfCounterIOVarAsyncCallback", 32716, v11);
      }
    }
    return v5;
  }
  uint64_t v7 = OSData::withBytesNoCopy(*(void **)a4, *(unsigned __int16 *)(a4 + 8));
  if (!v7)
  {
    uint64_t v5 = 3758097084;
    if (((uint64_t (*)(OSDictionary *))a1->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(a1))
    {
      ((void (*)(OSDictionary *))a1->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(a1);
      if (CCLogStream::shouldLog())
      {
        char v12 = (CCLogStream *)((uint64_t (*)(OSDictionary *))a1->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(a1);
        CCLogStream::logAlert(v12, "[dk] %s@%d:Bad payload\n", "handleIssueIfCounterIOVarAsyncCallback", 32721);
      }
    }
    return v5;
  }
  uint64_t v8 = v7;
  uint64_t v9 = AppleBCMWLANCore::parseXTLVMessage(a1, v7);
  ((void (*)(OSData *))v8->release)(v8);
  return v9;
}

uint64_t AppleBCMWLANCore::getPRIVATE_MAC(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  if (!a2) {
    return 22;
  }
  *(_DWORD *)(a2 + 4) = AppleBCMWLANBGScanAdapter::isPrivateMacEnabled(*(AppleBCMWLANCore ****)(*(void *)(a1 + 72)
                                                                                              + 5504));
  *(_DWORD *)(a2 + 12) = AppleBCMWLANBGScanAdapter::getPrivateMacTimeout(*(AppleBCMWLANBGScanAdapter **)(*(void *)(a1 + 72) + 5504));
  int v8 = 1048578;
  v7[0] = &v8;
  v7[1] = 0x1400140014;
  uint64_t v4 = *(AppleBCMWLANCommander **)(*(void *)(a1 + 72) + 5416);
  v6[0] = &v8;
  v6[1] = 20;
  uint64_t result = AppleBCMWLANCommander::runIOVarGet(v4, (uint64_t)"scanmac", (uint64_t)v6, (uint64_t)v7, 0);
  if (!result)
  {
    *(_DWORD *)(a2 + 16) = v9;
    *(_WORD *)(a2 + 20) = WORD2(v9);
    *(_DWORD *)(a2 + 22) = *(_DWORD *)((char *)&v9 + 6);
    *(_WORD *)(a2 + 26) = WORD5(v9);
    *(_DWORD *)(a2 + 8) = WORD6(v9);
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getPRIVATE_MAC(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getPRIVATE_MAC(a1 - 64, a2);
}

uint64_t AppleBCMWLANCore::getTRAP_INFO(AppleBCMWLANCore *a1, _DWORD *a2)
{
  uint64_t v4 = (unsigned __int8 *)(a2 + 3);
  bzero(a2 + 3, 0x204uLL);
  *a2 = 1;
  int v5 = a2[1];
  if (v5 != 1)
  {
    if (v5)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          long long v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logAlert(v9, "[dk] %s@%d:Unknown trap info type %d\n", "getTRAP_INFO", 32961, a2[1]);
        }
      }
    }
    else if ((*(unsigned int (**)(void))(**(void **)(*((void *)a1 + 9) + 5400) + 560))(*(void *)(*((void *)a1 + 9) + 5400)))
    {
      a2[2] = (*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 9) + 5400) + 568))(*(void *)(*((void *)a1 + 9) + 5400));
      int v6 = *(uint64_t (**)(void))(**(void **)(*((void *)a1 + 9) + 5400) + 576);
      return v6();
    }
    return 3758097095;
  }
  if (!AppleBCMWLANCore::featureFlagIsBitSet(a1, 35)) {
    return 3758097095;
  }
  a2[2] = AppleBCMWLANJoinAdapter::getJoinTimeoutSequenceNum(*(AppleBCMWLANJoinAdapter **)(*((void *)a1 + 9) + 5424));
  int v8 = *(AppleBCMWLANJoinAdapter **)(*((void *)a1 + 9) + 5424);
  return AppleBCMWLANJoinAdapter::copyJoinTimeoutBlob(v8, v4, 0x204uLL);
}

uint64_t AppleBCMWLANCore::getTRAP_CRASHTRACER_MINI_DUMP(uint64_t a1, _DWORD *a2)
{
  bzero(a2 + 1, 0x19000uLL);
  *a2 = 1;
  if (!(*(unsigned int (**)(void))(**(void **)(*(void *)(a1 + 72) + 5400) + 584))()) {
    return 3758097095;
  }
  uint64_t v4 = *(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 72) + 5400) + 592);
  return v4();
}

uint64_t AppleBCMWLANCore::getWIFI_BT_5G_POLICY(AppleBCMWLANCore *a1, _DWORD *a2)
{
  if (!AppleBCMWLANCore::featureFlagIsBitSet(a1, 120)) {
    return 3758097095;
  }
  uint64_t result = 0;
  *a2 = 1;
  a2[1] = *(_DWORD *)(*((void *)a1 + 9) + 35832);
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getWIFI_BT_5G_POLICY(uint64_t a1, _DWORD *a2)
{
  if (!AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)(a1 - 64), 120)) {
    return 3758097095;
  }
  uint64_t result = 0;
  *a2 = 1;
  a2[1] = *(_DWORD *)(*(void *)(a1 + 8) + 35832);
  return result;
}

uint64_t AppleBCMWLANCore::getWIFI_NOISE_PER_ANT(void *a1, uint64_t a2)
{
  if (!IO80211BssManager::isAssociated(*(IO80211BssManager **)(a1[9] + 5440))) {
    return 3766625283;
  }
  int v13 = 0;
  v11[1] = 0xC000C000CLL;
  uint64_t v12 = 0;
  uint64_t v4 = *(AppleBCMWLANCommander **)(a1[9] + 5416);
  v10[0] = &v12;
  v10[1] = 12;
  v11[0] = &v12;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarGet(v4, (uint64_t)"phy_noise_ant", (uint64_t)v10, (uint64_t)v11, 0);
  if (v5)
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v6 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d: phy_noise_ant Failed \n");
      }
    }
  }
  else if (HIDWORD(v12))
  {
    int v8 = v13;
    *(_DWORD *)(a2 + 4) = HIDWORD(v12);
    *(_DWORD *)(a2 + 8) = v8;
  }
  else
  {
    *(_DWORD *)(a2 + 4) = 0;
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        long long v9 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v9, "[dk] %s@%d:phy_noise_ant: not supported on this chip\n");
      }
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getWIFI_NOISE_PER_ANT(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getWIFI_NOISE_PER_ANT((void *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::getLQM_CONFIG(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(*(void *)(a1 + 72) + 5608)) {
    return 3758097084;
  }
  *(_DWORD *)a2 = 1;
  int StatsTimerIntervalMS = AppleBCMWLANLQM::getStatsTimerIntervalMS(*(AppleBCMWLANLQM **)(*(void *)(a1 + 72) + 5608));
  uint64_t result = 0;
  *(_DWORD *)(a2 + 4) = StatsTimerIntervalMS;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(*(void *)(a1 + 72) + 17596);
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(*(void *)(a1 + 72) + 17600);
  int v6 = *(_DWORD *)(*(void *)(a1 + 72) + 17608);
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(*(void *)(a1 + 72) + 17611);
  *(_DWORD *)(a2 + 17) = v6;
  *(unsigned char *)(a2 + 24) = *(unsigned char *)(*(void *)(a1 + 72) + 17624);
  *(void *)(a2 + 25) = *(void *)(*(void *)(a1 + 72) + 17616);
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getLQM_CONFIG(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getLQM_CONFIG(a1 - 64, a2);
}

uint64_t AppleBCMWLANCore::getMIMO_STATUS(AppleBCMWLANCore *a1, uint64_t a2)
{
  if (!AppleBCMWLANCore::featureFlagIsBitSet(a1, 44)) {
    return 3758097095;
  }
  uint64_t v15 = 0;
  uint64_t v14 = 2;
  v13[0] = &v14;
  v13[1] = 0x1000100010;
  uint64_t v4 = *(AppleBCMWLANCommander **)(*((void *)a1 + 9) + 5416);
  v12[0] = &v14;
  v12[1] = 16;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarGet(v4, (uint64_t)"mimo_ps_status", (uint64_t)v12, (uint64_t)v13, 0);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d:Failed to collect MIMO PS Status values \n", "getMIMO_STATUS", 33092);
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 1;
    if ((v14 & 0xC00) != 0) {
      char v7 = 0;
    }
    else {
      char v7 = BYTE1(v14) & 0xF;
    }
    *(unsigned char *)(a2 + 1) = v7;
    char v8 = BYTE2(v14);
    if (BYTE2(v14) >= 4u) {
      char v8 = 0;
    }
    *(unsigned char *)(a2 + 6) = v8;
    *(unsigned char *)(a2 + 5) = BYTE4(v14);
    *(_WORD *)(a2 + 2) = *(_WORD *)((char *)&v14 + 5);
    if (HIBYTE(v14) >= 4u) {
      char v9 = 0;
    }
    else {
      char v9 = 0x50281450u >> (8 * HIBYTE(v14));
    }
    *(unsigned char *)(a2 + 4) = v9;
    *(_WORD *)(a2 + 7) = WORD1(v15);
    switch(BYTE4(v15))
    {
      case 0:
      case 3:
        char v10 = 80;
        goto LABEL_20;
      case 1:
        char v10 = 20;
        goto LABEL_20;
      case 2:
        char v10 = 40;
LABEL_20:
        *(unsigned char *)(a2 + 9) = v10;
        break;
      default:
        *(unsigned char *)(a2 + 9) = 0;
        break;
    }
  }
  return v5;
}

uint64_t AppleBCMWLANCore::getDYNSAR_DETAIL(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 22;
  }
  if (*(_DWORD *)(a2 + 8) > 3u) {
    return 22;
  }
  *(_DWORD *)a2 = 1;
  *(_DWORD *)(a2 + 12) = AppleBCMWLANTxPowerManager::getDynSARDetailCurId(*(AppleBCMWLANTxPowerManager **)(*(void *)(a1 + 72) + 5536), *(unsigned __int8 *)(a2 + 4));
  *(_DWORD *)(a2 + 16) = AppleBCMWLANTxPowerManager::getDynSARDetailCircled(*(AppleBCMWLANTxPowerManager **)(*(void *)(a1 + 72) + 5536), *(unsigned __int8 *)(a2 + 4));
  DynSARDetailReportPerSlicePerAnt = (const void *)AppleBCMWLANTxPowerManager::getDynSARDetailReportPerSlicePerAnt(*(AppleBCMWLANTxPowerManager **)(*(void *)(a1 + 72) + 5536), *(unsigned __int8 *)(a2 + 4), *(unsigned __int8 *)(a2 + 8));
  memcpy((void *)(a2 + 24), DynSARDetailReportPerSlicePerAnt, 0x2D00uLL);
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getDYNSAR_DETAIL(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getDYNSAR_DETAIL(a1 - 64, a2);
}

IO80211BssManager *AppleBCMWLANCore::getCOLOCATED_NETWORK_SCOPE_ID(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return (IO80211BssManager *)22;
  }
  *(_DWORD *)a2 = 1;
  uint64_t result = *(IO80211BssManager **)(*(void *)(a1 + 72) + 5440);
  if (result) {
    return (IO80211BssManager *)IO80211BssManager::getCurrentColocatedNetworkScopeId(result, (unsigned __int8 *)(a2 + 8), (unsigned int *)(a2 + 4));
  }
  return result;
}

IO80211BssManager *non-virtual thunk to'AppleBCMWLANCore::getCOLOCATED_NETWORK_SCOPE_ID(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return (IO80211BssManager *)22;
  }
  *(_DWORD *)a2 = 1;
  uint64_t result = *(IO80211BssManager **)(*(void *)(a1 + 8) + 5440);
  if (result) {
    return (IO80211BssManager *)IO80211BssManager::getCurrentColocatedNetworkScopeId(result, (unsigned __int8 *)(a2 + 8), (unsigned int *)(a2 + 4));
  }
  return result;
}

uint64_t AppleBCMWLANCore::getSLOW_WIFI_FEATURE_ENABLED(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 3758097090;
  }
  uint64_t result = 0;
  *(_DWORD *)(a2 + 4) = *(unsigned __int8 *)(*(void *)(a1 + 72) + 29921);
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getSLOW_WIFI_FEATURE_ENABLED(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 3758097090;
  }
  uint64_t result = 0;
  *(_DWORD *)(a2 + 4) = *(unsigned __int8 *)(*(void *)(a1 + 8) + 29921);
  return result;
}

uint64_t AppleBCMWLANCore::getSIB_COEX_STATUS(OSObject *a1, _DWORD *a2)
{
  if (!a2) {
    return 3758097090;
  }
  *a2 = *((_DWORD *)a1[1].ivars + 8866);
  a2[1] = *((_DWORD *)a1[1].ivars + 8867);
  if (!((uint64_t (*)(OSObject *))a1->OSMetaClassBase::__vftable[33].getMetaClass)(a1)
    || (((void (*)(OSObject *))a1->OSMetaClassBase::__vftable[33].getMetaClass)(a1),
        (CCLogStream::shouldLogConsole() & 1) == 0))
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t ClassNameHelper = getClassNameHelper(a1);
      int v5 = *a2;
      int v6 = a2[1];
      *(_DWORD *)buf = 67110658;
      int v11 = 73;
      __int16 v12 = 2080;
      int v13 = "getSIB_COEX_STATUS";
      __int16 v14 = 1024;
      int v15 = 33234;
      __int16 v16 = 2080;
      uint64_t v17 = ClassNameHelper;
      __int16 v18 = 2080;
      uint64_t v19 = "getSIB_COEX_STATUS";
      __int16 v20 = 1024;
      int v21 = v5;
      __int16 v22 = 1024;
      int v23 = v6;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: %s::%s getting sib coex mode %d , timeToTST %d\n", buf, 0x38u);
    }
  }
  uint64_t result = ((uint64_t (*)(OSObject *))a1->OSMetaClassBase::__vftable[33].getMetaClass)(a1);
  if (result)
  {
    ((void (*)(OSObject *))a1->OSMetaClassBase::__vftable[33].getMetaClass)(a1);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      char v8 = (CCLogStream *)((uint64_t (*)(OSObject *))a1->OSMetaClassBase::__vftable[33].getMetaClass)(a1);
      char v9 = (const char *)getClassNameHelper(a1);
      CCLogStream::logInfo(v8, "[dk] %s@%d:%s::%s getting sib coex mode %d , timeToTST %d\n", "getSIB_COEX_STATUS", 33234, v9, "getSIB_COEX_STATUS", *a2, a2[1]);
      return 0;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getSIB_COEX_STATUS(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANCore::getSIB_COEX_STATUS((OSObject *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::getSSID_TRANSITION_SUPPORT(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 3758097090;
  }
  uint64_t result = 0;
  *(_DWORD *)(a2 + 4) = *(unsigned __int8 *)(*(void *)(a1 + 72) + 29922);
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getSSID_TRANSITION_SUPPORT(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 3758097090;
  }
  uint64_t result = 0;
  *(_DWORD *)(a2 + 4) = *(unsigned __int8 *)(*(void *)(a1 + 8) + 29922);
  return result;
}

uint64_t AppleBCMWLANCore::setPM_MODE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANNetAdapter::configurePM(*(void *)(*(void *)(a1 + 72) + 5600), *(_DWORD *)(a2 + 4));
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setPM_MODE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANNetAdapter::configurePM(*(void *)(*(void *)(a1 + 8) + 5600), *(_DWORD *)(a2 + 4));
}

uint64_t AppleBCMWLANCore::dbgSuppressScans(AppleBCMWLANCore *this, int a2)
{
  int v11 = a2;
  uint64_t v4 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  v10[0] = &v11;
  v10[1] = 4;
  uint64_t v5 = AppleBCMWLANCommander::runIOCtlSet(v4, 116, (uint64_t)v10, 0, 0);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
        CCLogStream::logAlert(v6, "[dk] %s@%d:Unable to set scansuppress %d: %s\n");
      }
    }
  }
  else
  {
    char v7 = (atomic_uint *)(*((void *)this + 9) + 10388);
    if (a2) {
      atomic_fetch_or(v7, 0x20000000u);
    }
    else {
      atomic_fetch_and(v7, 0xDFFFFFFF);
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        char v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v9, "[dk] %s@%d:[%s]: %s %s\n");
      }
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::dbgSuppressScans(AppleBCMWLANCore *this, int a2)
{
  return AppleBCMWLANCore::dbgSuppressScans((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setWIFI_BT_5G_POLICY(AppleBCMWLANCore *a1, _DWORD *a2)
{
  if (!AppleBCMWLANCore::featureFlagIsBitSet(a1, 120)) {
    return 3758097095;
  }
  int v4 = 1;
  *a2 = 1;
  int v5 = a2[1];
  if (v5 != 1)
  {
    if (!v5)
    {
      int v14 = 0;
      goto LABEL_8;
    }
    int v4 = 2;
  }
  int v14 = v4;
LABEL_8:
  v13[0] = &v14;
  v13[1] = 4;
  uint64_t v6 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)a1 + 9) + 5416), (uint64_t)"wifi_bt5g_policy", (uint64_t)v13, 0, 0);
  if (v6)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        __int16 v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)a1 + 112))(a1, v6);
        CCLogStream::logAlert(v12, "[dk] %s@%d:Unable to set wifi_bt5g_policy %d: %s\n");
      }
    }
  }
  else
  {
    *(_DWORD *)(*((void *)a1 + 9) + 35832) = v14;
    int v8 = a2[1];
    if (v8 == 1)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          char v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logAlert(v10, "[dk] %s@%d:[%s]: Setting WiFi BT 5G Policy to TDD during band-switch \n");
        }
      }
    }
    else if (v8)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          int v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logAlert(v11, "[dk] %s@%d:[%s]: Setting WiFi BT 5G Policy to full TDD \n");
        }
      }
    }
    else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        char v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v9, "[dk] %s@%d:[%s]: Setting WiFi BT 5G Policy to assoc delay for band-switch \n");
      }
    }
  }
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setWIFI_BT_5G_POLICY(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANCore::setWIFI_BT_5G_POLICY((AppleBCMWLANCore *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::setLQM_CONFIG(AppleBCMWLANCore *this, uint64_t a2)
{
  if (!a2) {
    return 22;
  }
  if (*(unsigned char *)(*((void *)this + 9) + 1103)) {
    return 45;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 39))
  {
    if (*(_DWORD *)(a2 + 4) >= 0x3E8u && *(_DWORD *)(a2 + 8) >= 0x3E8u && *(_DWORD *)(a2 + 12) >= 0x3E8u)
    {
      for (uint64_t i = 0; i != 7; ++i)
      {
        if (*(unsigned __int8 *)(a2 + i + 17) - 11 <= 0x90)
        {
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              char v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v10, "[dk] %s@%d:%d is not valid rssi_level for count:%d\n");
            }
          }
          return 22;
        }
      }
      uint64_t v6 = 0;
      while (*(unsigned __int8 *)(a2 + v6 + 25) < 0x64u)
      {
        if (++v6 == 8)
        {
          v14[0] = _NSConcreteStackBlock;
          v14[1] = 0x40000000;
          void v14[2] = ___ZN16AppleBCMWLANCore13setLQM_CONFIGEP23apple80211_lqm_config_t_block_invoke;
          v14[3] = &__block_descriptor_tmp_1960;
          v14[4] = this;
          v14[5] = a2;
          uint64_t v7 = AppleBCMWLANCore::setEcountersEnableStateSync(this, (uint64_t)v14, 1);
          if (v7)
          {
            uint64_t v3 = v7;
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (CCLogStream::shouldLog())
              {
                int v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v3);
                CCLogStream::logAlert(v8, "[dk] %s@%d:Failed to update fECountersUpdateIntervalSeconds %s\n");
              }
            }
          }
          else
          {
            __int16 v12 = *(AppleBCMWLANLQM **)(*((void *)this + 9) + 5608);
            if (v12) {
              uint64_t v3 = AppleBCMWLANLQM::setStatsTimerIntervalMS(v12, *(unsigned int *)(a2 + 4));
            }
            else {
              uint64_t v3 = 0;
            }
            AppleBCMWLANCore::configureLqmRssiUpdates(this, *(_DWORD *)(a2 + 8), (const signed __int8 *)(a2 + 17));
            AppleBCMWLANCore::configureLqmChanQUpdates(this, *(_DWORD *)(a2 + 12), *(unsigned __int8 *)(a2 + 24), (const unsigned __int8 *)(a2 + 25));
          }
          return v3;
        }
      }
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          int v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v13, "[dk] %s@%d:%d is not valid CCA Bound for count:%d\n");
        }
      }
    }
    return 22;
  }
  uint64_t v3 = 3758097084;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      char v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v9, "[dk] %s@%d:Enhanced trigger disconnect is not enabled. Interval change not allowed\n");
    }
  }
  return v3;
}

uint64_t AppleBCMWLANCore::isEnhancedTrgDisconnectEnabled(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 39);
}

uint64_t ___ZN16AppleBCMWLANCore13setLQM_CONFIGEP23apple80211_lqm_config_t_block_invoke(uint64_t a1)
{
  long long v1 = *(void **)(a1 + 32);
  *(_DWORD *)(v1[9] + 17604) = (*(_DWORD *)(*(void *)(a1 + 40) + 4) + 500) / 0x3E8u;
  if ((*(uint64_t (**)(void *))(*v1 + 1848))(v1))
  {
    (*(void (**)(void *))(*v1 + 1848))(v1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v3 = (CCLogStream *)(*(uint64_t (**)(void *))(*v1 + 1848))(v1);
      CCLogStream::logAlert(v3, "[dk] %s@%d:Setting ECounter update interval to: %d\n", "setLQM_CONFIG_block_invoke", 33415, *(_DWORD *)(v1[9] + 17604));
    }
  }
  return 0;
}

uint64_t AppleBCMWLANCore::configureLqmRssiUpdates(AppleBCMWLANCore *this, int a2, const signed __int8 *a3)
{
  unsigned __int8 v4 = 0;
  *(_DWORD *)(*((void *)this + 9) + 17596) = a2;
  int v5 = (_DWORD *)(*((void *)this + 9) + 17608);
  int v6 = *(_DWORD *)a3;
  *(_DWORD *)((char *)v5 + 3) = *(_DWORD *)(a3 + 3);
  *int v5 = v6;
  int v27 = 0;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  LODWORD(v5) = *(_DWORD *)(*((void *)this + 9) + 17596);
  uint64_t v7 = __str;
  *(_OWORD *)__str = 0u;
  long long v22 = 0u;
  *(void *)&v20[7] = 0;
  *(void *)__int16 v20 = 0;
  int v19 = (int)v5;
  int v8 = 100;
  do
  {
    int v9 = *(char *)(*((void *)this + 9) + v4 + 17608);
    v20[v4 + 1] = *(unsigned char *)(*((void *)this + 9) + v4 + 17608);
    if (v8 >= 7)
    {
      char v10 = v4 >= 6u ? "." : ",";
      int v11 = snprintf(v7, v8, "%d%s ", v9, v10);
      if (v11 >= 1)
      {
        v7 += v11;
        v8 -= v11;
      }
    }
    unsigned __int8 v4 = ++v20[0];
  }
  while (v20[0] < 7u);
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v17, "[dk] %s@%d:Setting rate_limit_msec %d rssi_levels %s\n", "configureLqmRssiUpdates", 41527, v19, __str);
    }
  }
  __int16 v12 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  v18[0] = &v19;
  v18[1] = 19;
  uint64_t v13 = AppleBCMWLANCommander::runIOVarSet(v12, (uint64_t)"rssi_event", (uint64_t)v18, 0, 0);
  if (v13)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int v15 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v13);
        CCLogStream::logAlert(v14, "[dk] %s@%d: Error: Unable to setup rssi events: %s\n", "configureLqmRssiUpdates", 41531, v15);
      }
    }
  }
  else
  {
    AppleBCMWLANCore::addEventBit(this, 0x38u);
  }
  return v13;
}

uint64_t AppleBCMWLANCore::configureLqmChanQUpdates(AppleBCMWLANCore *this, int a2, __int16 a3, const unsigned __int8 *a4)
{
  *(_DWORD *)(*((void *)this + 9) + 17600) = a2;
  *(unsigned char *)(*((void *)this + 9) + 17624) = a3;
  *(void *)(*((void *)this + 9) + 17616) = *(void *)a4;
  long long v27 = 0u;
  long long v26 = 0u;
  memset(v25, 0, sizeof(v25));
  long long v24 = 0u;
  long long v23 = 0u;
  uint64_t v5 = *((void *)this + 9) + 17600;
  int v22 = *(_DWORD *)v5;
  WORD1(v23) = 3;
  BYTE5(v23) = 8;
  __int16 v6 = *(unsigned __int8 *)(v5 + 16);
  WORD4(v24) = v6 + a3;
  WORD4(v23) = v6 - a3;
  __int16 v7 = *(unsigned __int8 *)(v5 + 17);
  WORD5(v24) = v7 + a3;
  WORD5(v23) = v7 - a3;
  __int16 v8 = *(unsigned __int8 *)(v5 + 18);
  WORD6(v24) = v8 + a3;
  WORD6(v23) = v8 - a3;
  __int16 v9 = *(unsigned __int8 *)(v5 + 19);
  HIWORD(v24) = v9 + a3;
  HIWORD(v23) = v9 - a3;
  __int16 v10 = *(unsigned __int8 *)(v5 + 20);
  LOWORD(v25[0]) = v10 + a3;
  LOWORD(v24) = v10 - a3;
  __int16 v11 = *(unsigned __int8 *)(v5 + 21);
  WORD1(v25[0]) = v11 + a3;
  WORD1(v24) = v11 - a3;
  __int16 v12 = *(unsigned __int8 *)(v5 + 22);
  WORD2(v25[0]) = v12 + a3;
  WORD2(v24) = v12 - a3;
  LOWORD(v5) = *(unsigned __int8 *)(v5 + 23);
  WORD3(v25[0]) = v5 + a3;
  WORD3(v24) = v5 - a3;
  if ((*(uint64_t (**)(void))(*(void *)this + 1848))())
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      __int16 v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v16, "[dk] %s@%d:Setting rate_limit_msec: %d hysterisis: %d bounds: %d,%d,%d,%d,%d,%d,%d,%d \n", "configureLqmChanQUpdates", 41577, *(_DWORD *)(*((void *)this + 9) + 17600), *(unsigned __int8 *)(*((void *)this + 9) + 17624), *(unsigned __int8 *)(*((void *)this + 9) + 17616), *(unsigned __int8 *)(*((void *)this + 9) + 17617), *(unsigned __int8 *)(*((void *)this + 9) + 17618), *(unsigned __int8 *)(*((void *)this + 9) + 17619), *(unsigned __int8 *)(*((void *)this + 9) + 17620), *(unsigned __int8 *)(*((void *)this + 9) + 17621), *(unsigned __int8 *)(*((void *)this + 9) + 17622), *(unsigned __int8 *)(*((void *)this + 9) + 17623));
    }
  }
  WORD4(v25[0]) = 2049;
  *(_OWORD *)((char *)&v25[1] + 12) = xmmword_10036E9C0;
  *(_OWORD *)((char *)v25 + 12) = xmmword_10036E9D0;
  WORD6(v25[2]) = 258;
  LOWORD(v27) = -85;
  LOWORD(v26) = -90;
  uint64_t v13 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  v21[0] = &v22;
  v21[1] = 116;
  uint64_t v14 = AppleBCMWLANCommander::runIOVarSet(v13, (uint64_t)"chq_event", (uint64_t)v21, 0, 0);
  if (v14 == -469794537) {
    goto LABEL_9;
  }
  uint64_t v15 = v14;
  if (v14)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
      && ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
          CCLogStream::shouldLog()))
    {
      uint64_t v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      __int16 v18 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v15);
      CCLogStream::logAlert(v17, "[dk] %s@%d:Error: setting up chq_event fail: %s\n", "configureLqmChanQUpdates", 41605, v18);
      if (v15) {
        goto LABEL_9;
      }
    }
    else if (v15)
    {
LABEL_9:
      AppleBCMWLANCore::featureFlagClearBit(this, 33);
      goto LABEL_12;
    }
  }
  AppleBCMWLANCore::addEventBit(this, 0x7Cu);
  AppleBCMWLANCore::featureFlagSetBit(this, 33);
LABEL_12:
  AppleBCMWLANCore::addEventBit(this, 0x2Fu);
  AppleBCMWLANCore::addEventBit(this, 0x50u);
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 46)) {
    AppleBCMWLANCore::addEventBit(this, 0x98u);
  }
  AppleBCMWLANCore::addEventBit(this, 0x13u);
  AppleBCMWLANCore::addEventBit(this, 0x20u);
  AppleBCMWLANCore::addEventBit(this, 0x25u);
  uint64_t v19 = AppleBCMWLANCore::writeEventBitField(this);
  AppleBCMWLANCore::resetExtendedEventBit(this, 0xA5u);
  AppleBCMWLANCore::updateCurrentFWCountryCode(this);
  return v19;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setLQM_CONFIG(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setLQM_CONFIG((AppleBCMWLANCore *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::set6G_MODE(AppleBCMWLANCore *a1, uint64_t a2)
{
  if (!a2) {
    return 3758097090;
  }
  uint64_t result = AppleBCMWLANCore::featureFlagIsBitSet(a1, 93);
  if (result)
  {
    int v5 = *(_DWORD *)(a2 + 4);
    if (v5 == IO80211BssManager::get6GMode(*(IO80211BssManager **)(*((void *)a1 + 9) + 5440)))
    {
      return 0;
    }
    else
    {
      IO80211BssManager::set6GMode(*(IO80211BssManager **)(*((void *)a1 + 9) + 5440), *(_DWORD *)(a2 + 4));
      if (*(_DWORD *)(a2 + 4) == 1) {
        AppleBCMWLANCore::disable6GRoaming(a1);
      }
      else {
        AppleBCMWLANCore::enable6GRoaming(a1);
      }
      uint64_t result = IO80211BssManager::isAssociated(*(IO80211BssManager **)(*((void *)a1 + 9) + 5440));
      if (result)
      {
        __int16 v6 = *(AppleBCMWLANJoinAdapter **)(*((void *)a1 + 9) + 5424);
        return AppleBCMWLANJoinAdapter::set6GMode(v6);
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::set6G_MODE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::set6G_MODE((AppleBCMWLANCore *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::setWCL_SCAN_REQ(AppleBCMWLANCore *this, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a2 + 84);
  if (v4)
  {
    int v5 = (unsigned int *)(a2 + 92);
    uint64_t v6 = v4;
    while (1)
    {
      unsigned int v7 = *v5;
      v5 += 3;
      if (v7 <= 0xD) {
        break;
      }
      if (!--v6) {
        goto LABEL_7;
      }
    }
    AppleBCMWLANCore::checkBackToBackHostScans(this, v4);
  }
LABEL_7:
  __int16 v8 = *(AppleBCMWLANScanAdapter **)(*((void *)this + 9) + 5432);
  return AppleBCMWLANScanAdapter::startScan(v8, a2);
}

uint64_t AppleBCMWLANCore::checkBackToBackHostScans(AppleBCMWLANCore *this, int a2)
{
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  if (a2 == 3)
  {
    uint64_t v4 = (void *)(*((void *)this + 9) + 35816);
    if (-*v4 > 3uLL)
    {
      *(unsigned char *)(*((void *)this + 9) + 35828) = 1;
      *(void *)(*((void *)this + 9) + 35816) = 0;
      uint64_t v6 = *((void *)this + 9);
      unsigned int v7 = *(_DWORD *)(v6 + 35824);
      if (v7)
      {
        __int16 v8 = (_DWORD *)(v6 + 18948);
        if (v7 > 3) {
          ++*v8;
        }
        else {
          ++v8[1];
        }
        *(_DWORD *)(*((void *)this + 9) + 35824) = 0;
      }
    }
    else if (*v4)
    {
      ++*(_DWORD *)(*((void *)this + 9) + 35824);
      int v5 = (unsigned char *)(*((void *)this + 9) + 35828);
      if (*v5)
      {
        *int v5 = 0;
        ++*(_DWORD *)(*((void *)this + 9) + 18944);
      }
    }
  }
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      __int16 v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t v11 = *((void *)this + 9);
      return CCLogStream::logInfo(v10, "[dk] %s@%d:checkingBackToBackScans: timeNow=%llu prev=%llu numScansInThisWindow=%d, low=%d high=%d, notInMeasurement=%d numHostB2B=%d \n", "checkBackToBackHostScans", 61527, 0, *(void *)(v11 + 35816), *(_DWORD *)(v11 + 35824), *(_DWORD *)(v11 + 18952), *(_DWORD *)(v11 + 18948), *(unsigned __int8 *)(v11 + 35828), *(_DWORD *)(v11 + 18944));
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setWCL_SCAN_REQ(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setWCL_SCAN_REQ((AppleBCMWLANCore *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::setNDD_REQ(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 72) + 35856);
  if (v2) {
    return AppleBCMWLANNearbyDeviceDiscoveryAdapter::setNDD_REQ(v2, a2);
  }
  else {
    return 3758097095;
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setNDD_REQ(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 35856);
  if (v2) {
    return AppleBCMWLANNearbyDeviceDiscoveryAdapter::setNDD_REQ(v2, a2);
  }
  else {
    return 3758097095;
  }
}

uint64_t AppleBCMWLANCore::getScanAlgorithm(AppleBCMWLANCore *this)
{
  return *(unsigned int *)(*((void *)this + 9) + 9488);
}

uint64_t AppleBCMWLANCore::isScanAllowed(AppleBCMWLANCore *this)
{
  uint64_t v2 = *((void *)this + 9);
  if ((*(unsigned char *)(v2 + 10391) & 0x20) == 0)
  {
    if (IO80211BssManager::isAssociated(*(IO80211BssManager **)(v2 + 5440)))
    {
      if (IO80211InfraInterface::getBtCoexState(*(IO80211InfraInterface **)(*((void *)this + 9) + 11304)))
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            __int16 v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logNoticeIf(v8, 0x40uLL, "[dk] %s@%d:BT is busy with a call\n");
          }
        }
        goto LABEL_21;
      }
      if ((AppleBCMWLANCore::featureFlagIsBitSet(this, 60) & 1) == 0)
      {
        int v9 = -1431655766;
        if (!IO80211BssManager::getCurrentRSSI(*(IO80211BssManager **)(*((void *)this + 9) + 5440), &v9))
        {
          int v3 = v9;
          if (v3 <= (int)AppleBCMWLANConfigManager::getEnterpriseRoamTrigger(*(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472))
            && v9 >= -90)
          {
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (CCLogStream::shouldLog())
              {
                uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                CCLogStream::logNoticeIf(v4, 0x40uLL, "[dk] %s@%d:Device is in low signal area, Rssi %d and could potentially roam\n");
              }
            }
LABEL_21:
            uint64_t result = 0;
            atomic_fetch_or((atomic_uint *volatile)(*((void *)this + 9) + 10388), 8u);
            return result;
          }
        }
      }
    }
    else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logNoticeIf(v7, 0x40uLL, "[dk] %s@%d:Device not yet associated\n", "isScanAllowed", 33675);
      }
    }
    return 1;
  }
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v6, "[dk] %s@%d: [%s]: Scans suppressed\n", "isScanAllowed", 33668, "isScanAllowed");
      return 0;
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::getBtCoexState(AppleBCMWLANCore *this)
{
  return IO80211InfraInterface::getBtCoexState(*(IO80211InfraInterface **)(*((void *)this + 9) + 11304));
}

IO80211Controller *AppleBCMWLANCore::isScanResumeAllowed(IO80211Controller *this)
{
  if ((*(unsigned char *)(*((void *)this + 9) + 10388) & 8) != 0)
  {
    long long v1 = this;
    this = (IO80211Controller *)AppleBCMWLANCore::isScanAllowed(this);
    if (this)
    {
      this = (IO80211Controller *)IO80211Controller::postMessage(v1, *(IO80211SkywalkInterface **)(*((void *)v1 + 9) + 11304), 0x24u, 0, 0, 1);
      atomic_fetch_and((atomic_uint *volatile)(*((void *)v1 + 9) + 10388), 0xFFFFFFF7);
    }
  }
  return this;
}

uint64_t AppleBCMWLANCore::setSCAN_CONTROL(uint64_t a1, unsigned __int8 *a2)
{
  memset(v11, 170, sizeof(v11));
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      int v5 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1);
      uint64_t v6 = "OFF";
      if (a2[1]) {
        unsigned int v7 = "OFF";
      }
      else {
        unsigned int v7 = "ON";
      }
      if (a2[2]) {
        __int16 v8 = "OFF";
      }
      else {
        __int16 v8 = "ON";
      }
      if (a2[3]) {
        uint64_t v6 = "ON";
      }
      CCLogStream::logAlert(v5, "[dk] %s@%d:Abort scan %d, ePnoScans %s, roamScans %s, limitedRoam %s\n", "setSCAN_CONTROL", 33770, *a2, v7, v8, v6);
    }
  }
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  if (0xAAAAAAAAAAAAAAAALL - v11[2] >= 0x6052340)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        __int16 v10 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1);
        CCLogStream::logCrit(v10, "[dk] %s@%d: ERROR: setSCAN_CONTROL is taking more time %06llu\n", "setSCAN_CONTROL", 33809, (0xAAAAAAAAAAAAAAAALL - v11[2]) / 0xF4240);
      }
    }
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      int v9 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1);
      CCLogStream::logAlert(v9, "[dk] %s@%d:t54: %06llu, t43: %06llu, t32: %06llu, t21: %06llu, \n", "setSCAN_CONTROL", 33812, 0, (0xAAAAAAAAAAAAAAAALL - v11[0]) / 0xF4240, (v11[0] - v11[1]) / 0xF4240uLL, (v11[1] - v11[2]) / 0xF4240uLL);
    }
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setSCAN_CONTROL(uint64_t a1, unsigned __int8 *a2)
{
  return 0;
}

uint64_t AppleBCMWLANCore::setOFFLOAD_ARP(void *a1, uint64_t a2)
{
  if (!a2) {
    return 22;
  }
  uint64_t v3 = a1[9];
  if (!*(void *)(v3 + 11304)) {
    return 22;
  }
  *(_DWORD *)(v3 + 9504) = *(_DWORD *)(a2 + 12);
  uint64_t v5 = a1[9];
  if (*(_DWORD *)(a2 + 4))
  {
    *(_DWORD *)(v5 + 9496) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1[9] + 9500) = 0;
    uint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 104))(a1);
    (*(void (**)(uint64_t, uint64_t (*)(AppleBCMWLANCore *, void *), uint64_t, void, void, void))(*(void *)v6 + 56))(v6, AppleBCMWLANCore::handleIPv4AddressNotificationGated, a1[9] + 9496, 0, 0, 0);
    uint64_t v5 = a1[9];
    uint64_t v7 = *(void *)(v5 + 11312);
    if (v7)
    {
      AppleBCMWLANProximityInterface::setIPv4Addr(v7, *(_DWORD *)(v5 + 9496));
      uint64_t v5 = a1[9];
    }
  }
  int v8 = *(_DWORD *)(a2 + 16);
  *(_WORD *)(v5 + 9512) = *(_WORD *)(a2 + 20);
  *(_DWORD *)(v5 + 9508) = v8;
  uint64_t v9 = a1[9];
  if (*(void *)(v9 + 11304))
  {
    IO80211InfraInterface::setIPv4Params();
    uint64_t v9 = a1[9];
  }
  unsigned int v10 = *(_DWORD *)(v9 + 9504);
  if (v10 && *(_DWORD *)(v9 + 9496))
  {
    uint64_t v11 = (*(uint64_t (**)(void *))(*a1 + 104))(a1);
    (*(void (**)(uint64_t, uint64_t (*)(AppleBCMWLANCore *, void *), uint64_t, void, void, void))(*(void *)v11 + 56))(v11, AppleBCMWLANCore::handleKeepaliveDataNotificationGated, a1[9] + 9508, 0, 0, 0);
    uint64_t v9 = a1[9];
    unsigned int v10 = *(_DWORD *)(v9 + 9504);
  }
  unsigned int v12 = *(_DWORD *)(v9 + 9496);
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 1848))(a1);
  if (result)
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v14, "[dk] %s@%d: Address count[%d], WoW IPv4 address[ %u.%u.%u.%u ], Router IPv4 address[ %u.%u.%u.%u ]\n", "setOFFLOAD_ARP", 33885, *(_DWORD *)(a2 + 4), v12, BYTE1(v12), BYTE2(v12), HIBYTE(v12), v10, BYTE1(v10), BYTE2(v10), HIBYTE(v10));
      return 0;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setOFFLOAD_ARP(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setOFFLOAD_ARP((void *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::setOFFLOAD_NDP(void *a1, uint64_t a2)
{
  if (!a2) {
    return 22;
  }
  uint64_t v3 = a1[9];
  if (!*(void *)(v3 + 11304)) {
    return 22;
  }
  *(_DWORD *)(v3 + 10048) = *(_DWORD *)(a2 + 4);
  uint64_t v5 = a1[9];
  unsigned int v6 = *(_DWORD *)(v5 + 10048);
  if (v6 >= 5)
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v21 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v21, "[dk] %s@%d: Too Many IPV6 Addresses, MAX Limit is %d \n", "setOFFLOAD_NDP", 33898, 4);
      }
    }
    *(_DWORD *)(a1[9] + 10048) = 4;
    uint64_t v5 = a1[9];
    unsigned int v6 = *(_DWORD *)(v5 + 10048);
  }
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      *(_OWORD *)(v5 + v7 + 9536) = *(_OWORD *)(a2 + 8 + v7);
      ++v8;
      uint64_t v5 = a1[9];
      v7 += 16;
    }
    while (v8 < *(unsigned int *)(v5 + 10048));
  }
  uint64_t v9 = -64;
  do
  {
    *(_OWORD *)(a1[9] + v9 + 9856) = 0uLL;
    v9 += 16;
  }
  while (v9);
  *(unsigned char *)(a1[9] + 9520) = -2;
  *(unsigned char *)(a1[9] + 9521) = 0x80;
  uint64_t v10 = a1[9] + 9520;
  *(_WORD *)(v10 + 6) = 0;
  *(_DWORD *)(v10 + 2) = 0;
  *(void *)(a1[9] + 9528) = *(void *)(a1[9] + 9544);
  uint64_t v11 = a1[9];
  if (*(void *)(v11 + 11304))
  {
    *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v23[9] = v12;
    v23[8] = v12;
    v23[7] = v12;
    v23[6] = v12;
    v23[5] = v12;
    v23[4] = v12;
    v23[3] = v12;
    _OWORD v23[2] = v12;
    v23[1] = v12;
    v23[0] = v12;
    unint64_t v13 = *(unsigned int *)(v11 + 10048);
    int v22 = v13;
    if (v13)
    {
      unint64_t v14 = 0;
      uint64_t v15 = (long long *)(a2 + 8);
      __int16 v16 = v23;
      do
      {
        long long v17 = *v15++;
        *v16++ = v17;
        ++v14;
      }
      while (v14 < v13);
    }
    IO80211InfraInterface::setIPv6Params();
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        __int16 v18 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v18, "[dk] %s@%d:Number of IPv6 addresses %d\n", "setOFFLOAD_NDP", 33926, v22);
      }
    }
  }
  uint64_t v20 = (*(uint64_t (**)(void *))(*a1 + 104))(a1);
  (*(void (**)(uint64_t, uint64_t (*)(AppleBCMWLANCore *, void *), uint64_t, void, void, void))(*(void *)v20 + 56))(v20, AppleBCMWLANCore::handleIPv6AddressNotificationGated, a1[9] + 9536, 0, 0, 0);
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setOFFLOAD_NDP(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setOFFLOAD_NDP((void *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::resetAutoCountry(AppleBCMWLANCore *this)
{
  long long v23 = 0;
  uint64_t v24 = 0;
  if (!AppleBCMWLANCore::featureFlagIsBitSet(this, 28)) {
    return 0;
  }
  isBringingUpLinuint64_t k = AppleBCMWLANNetAdapter::isBringingUpLink(*(AppleBCMWLANNetAdapter **)(*((void *)this + 9) + 5600));
  int isJoining = AppleBCMWLANJoinAdapter::isJoining(*(AppleBCMWLANJoinAdapter **)(*((void *)this + 9) + 5424));
  if ((IO80211BssManager::isAssociated(*(IO80211BssManager **)(*((void *)this + 9) + 5440)) & 1) != 0
    || (isBringingUpLink & 1) != 0
    || isJoining)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        __int16 v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int isAssociated = IO80211BssManager::isAssociated(*(IO80211BssManager **)(*((void *)this + 9) + 5440));
        CCLogStream::logAlert(v18, "[dk] %s@%d: isAssociated: %d, isBringingUpLink: %d, isBusy: %d\n", "resetAutoCountry", 33954, isAssociated, isBringingUpLink, isJoining);
      }
    }
    return 0;
  }
  int v21 = -1431655766;
  int v22 = -1431655766;
  uint64_t v4 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 136))(v4))
  {
    v20[0] = this;
    v20[1] = AppleBCMWLANCore::handleAutoCountryAsyncCallBack;
    v20[2] = 0;
    if (AppleBCMWLANConfigManager::isAutoCountryEnabled(*(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472)))
    {
      int v22 = 0;
      long long v23 = &v22;
      uint64_t v24 = 4;
      if (AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"autocountry"))
      {
        uint64_t v5 = AppleBCMWLANCommander::sendIOCtlSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), 47, (uint64_t)&v23, kNoRxExpected, (uint64_t)v20, 0);
        if (v5)
        {
          uint64_t v6 = v5;
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
LABEL_23:
              CCLogStream::logAlert(v7, "[dk] %s@%d: Error: Unable to clear autocountry \"%d\" : %s\n");
              return v6;
            }
          }
          return v6;
        }
      }
    }
    if (AppleBCMWLANConfigManager::isEnhancedLocaleEnabled(*(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472)))
    {
      int v21 = !AppleBCMWLANCore::isRestrictedCountry(this);
      long long v23 = &v21;
      uint64_t v24 = 4;
      uint64_t v10 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"ccode_pr_2g");
      if (v10)
      {
        uint64_t v6 = v10;
        if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
          return v6;
        }
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (!CCLogStream::shouldLog()) {
          return v6;
        }
        uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
        goto LABEL_34;
      }
    }
    if (!AppleBCMWLANCore::isRestrictedCountry(this))
    {
      if (AppleBCMWLANConfigManager::isAutoCountryEnabled(*(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472)))
      {
        int v22 = 1;
        long long v23 = &v22;
        uint64_t v24 = 4;
        if (AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"autocountry"))
        {
          uint64_t v13 = AppleBCMWLANCommander::sendIOCtlSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), 47, (uint64_t)&v23, kNoRxExpected, (uint64_t)v20, 0);
          if (v13)
          {
            uint64_t v6 = v13;
            if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
              return v6;
            }
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (!CCLogStream::shouldLog()) {
              return v6;
            }
            unint64_t v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
            goto LABEL_49;
          }
        }
      }
LABEL_50:
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          __int16 v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          int isEnhancedLocaleEnabled = AppleBCMWLANConfigManager::isEnhancedLocaleEnabled(*(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472));
          CCLogStream::logNotice(v16, "[dk] %s@%d:EnhancedLocaleEnabled: %d, HostCountry:%d, ivars->fDefaultCountryCode:%s, ivars->fCurrentHostCountryCode:%s\n", "resetAutoCountry", 34041, isEnhancedLocaleEnabled, *(unsigned __int8 *)(*((void *)this + 9) + 6764), (const char *)(*((void *)this + 9) + 6740), (const char *)(*((void *)this + 9) + 6744));
        }
      }
      return 0;
    }
    return 0;
  }
  if (!AppleBCMWLANConfigManager::isAutoCountryEnabled(*(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472))
    || (int v22 = 0,
        long long v23 = &v22,
        uint64_t v24 = 4,
        !AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"autocountry", (uint64_t)&v23, 0, 0))|| (uint64_t v9 = AppleBCMWLANCommander::runIOCtlSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), 47, (uint64_t)&v23, 0, 0), !v9))
  {
    if (AppleBCMWLANConfigManager::isEnhancedLocaleEnabled(*(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472)))
    {
      int v21 = !AppleBCMWLANCore::isRestrictedCountry(this);
      long long v23 = &v21;
      uint64_t v24 = 4;
      uint64_t v12 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"ccode_pr_2g", (uint64_t)&v23, 0, 0);
      if (v12)
      {
        uint64_t v6 = v12;
        if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
          return v6;
        }
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (!CCLogStream::shouldLog()) {
          return v6;
        }
        uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
LABEL_34:
        CCLogStream::logAlert(v11, "[dk] %s@%d: Error: Unable to set ccode_pr_2g to \"%d\" : %s\n");
        return v6;
      }
    }
    if (!AppleBCMWLANCore::isRestrictedCountry(this))
    {
      if (AppleBCMWLANConfigManager::isAutoCountryEnabled(*(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472)))
      {
        int v22 = 1;
        long long v23 = &v22;
        uint64_t v24 = 4;
        if (AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"autocountry", (uint64_t)&v23, 0, 0))
        {
          uint64_t v15 = AppleBCMWLANCommander::runIOCtlSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), 47, (uint64_t)&v23, 0, 0);
          if (v15)
          {
            uint64_t v6 = v15;
            if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
              return v6;
            }
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (!CCLogStream::shouldLog()) {
              return v6;
            }
            unint64_t v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
LABEL_49:
            CCLogStream::logAlert(v14, "[dk] %s@%d: Error: Unable to reset autocountry \"%d\" : %s\n");
            return v6;
          }
        }
      }
      goto LABEL_50;
    }
    return 0;
  }
  uint64_t v6 = v9;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
      goto LABEL_23;
    }
  }
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::resetAutoCountry(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::resetAutoCountry((AppleBCMWLANCore *)((char *)this - 64));
}

uint64_t AppleBCMWLANCore::setupRestrictedCountryCode(AppleBCMWLANCore *this)
{
  uint64_t v2 = 3758097095;
  int v22 = 0;
  uint64_t v23 = 0;
  uint64_t v21 = 0;
  int v20 = 1;
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 28)
    && AppleBCMWLANCore::featureFlagIsBitSet(this, 29))
  {
    if (AppleBCMWLANConfigManager::isEnhancedLocaleEnabled(*(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472))
      && (int v22 = (int *)&v21,
          uint64_t v23 = 4,
          uint64_t v3 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"ccode_pr_2g", (uint64_t)&v22, 0, 0), v3))
    {
      uint64_t v2 = v3;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v2);
          CCLogStream::logAlert(v4, "[dk] %s@%d: %s: disable ccode_pr_2g command failed: %s\n");
        }
      }
    }
    else if ((IO80211BssManager::isAssociated(*(IO80211BssManager **)(*((void *)this + 9) + 5440)) & 1) == 0 {
           && AppleBCMWLANConfigManager::isAutoCountryEnabled(*(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472))
    }
           && (int v22 = (int *)&v21 + 1,
               uint64_t v23 = 4,
               uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"autocountry", (uint64_t)&v22, 0, 0), v5))
    {
      uint64_t v2 = v5;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v2);
          CCLogStream::logAlert(v6, "[dk] %s@%d: %s: disable autocountry command failed: %s\n");
        }
      }
    }
    else
    {
      int v22 = &v20;
      uint64_t v23 = 4;
      uint64_t v7 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"passive_on_restricted", (uint64_t)&v22, 0, 0);
      if (v7)
      {
        uint64_t v2 = v7;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v2);
            CCLogStream::logAlert(v15, "[dk] %s@%d: %s: enable passive_on_restricted command failed: %s\n");
          }
        }
      }
      else if (AppleBCMWLANCore::featureFlagIsBitSet(this, 29) {
             && (int v22 = (int *)&v21 + 1,
      }
                 uint64_t v23 = 4,
                 uint64_t v9 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"country_default", (uint64_t)&v22, 0, 0), v9))
      {
        uint64_t v2 = v9;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v2);
            CCLogStream::logAlert(v10, "[dk] %s@%d: %s: disable country_default command failed: %s\n");
          }
        }
      }
      else
      {
        uint64_t v2 = 3825172766;
        uint64_t v11 = *((void *)this + 9);
        if (AppleBCMWLANCore::checkCountryCodeValidness(this, (const char *)(v11 + 6748)) == -469794530)
        {
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, 3825172766);
              CCLogStream::logAlert(v12, "[dk] %s@%d: Error: Unsupported country %s, error: %s\n");
            }
          }
        }
        else
        {
          int v22 = (int *)(v11 + 6748);
          uint64_t v23 = 4;
          uint64_t v2 = AppleBCMWLANCommander::runIOCtlSet(*(AppleBCMWLANCommander **)(v11 + 5416), 84, (uint64_t)&v22, 0, 0);
          uint64_t v13 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (v2)
          {
            if (v13)
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (CCLogStream::shouldLog())
              {
                unint64_t v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v2);
                CCLogStream::logAlert(v14, "[dk] %s@%d: Error: Unable to set country to %s : %s\n");
              }
            }
          }
          else
          {
            if (v13)
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (CCLogStream::shouldLog())
              {
                __int16 v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                uint64_t v17 = *((void *)this + 9);
                __int16 v18 = (const char *)(v17 + 6748);
                int isEnhancedLocaleEnabled = AppleBCMWLANConfigManager::isEnhancedLocaleEnabled(*(AppleBCMWLANConfigManager **)(v17 + 5472));
                CCLogStream::logNotice(v16, "[dk] %s@%d:Strict regulatory settings applied: ivars->fRestrictedCountryCode:%s EnhancedLocaleEnabled: %d\n", "setupRestrictedCountryCode", 34112, v18, isEnhancedLocaleEnabled);
              }
            }
            return 0;
          }
        }
      }
    }
  }
  return v2;
}

uint64_t AppleBCMWLANCore::checkCountryCodeValidness(AppleBCMWLANCore *this, const char *__s1)
{
  uint64_t v2 = 3825172766;
  uint64_t v3 = *((void *)this + 9);
  unsigned int v4 = *(_DWORD *)(v3 + 6768);
  if (v4)
  {
    unsigned __int8 v6 = 0;
    while (strcmp(__s1, (const char *)(v3 + 4 * v6 + 6772)))
    {
      if (v4 <= ++v6) {
        return v2;
      }
    }
    return 0;
  }
  return v2;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setupRestrictedCountryCode(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::setupRestrictedCountryCode((AppleBCMWLANCore *)((char *)this - 64));
}

uint64_t AppleBCMWLANCore::setupCountryCode(AppleBCMWLANCore *this)
{
  uint64_t v2 = 3758097095;
  if (!AppleBCMWLANCore::featureFlagIsBitSet(this, 28)
    || !AppleBCMWLANCore::featureFlagIsBitSet(this, 29))
  {
    return v2;
  }
  int v21 = 0;
  uint64_t v23 = &v21;
  uint64_t v24 = 4;
  uint64_t v3 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"passive_on_restricted", (uint64_t)&v23, 0, 0);
  if (v3)
  {
    uint64_t v2 = v3;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v2);
        CCLogStream::logAlert(v4, "[dk] %s@%d: iovar set passive_on_restricted command failed: %s\n");
      }
    }
    return v2;
  }
  int v22 = 1;
  uint64_t v23 = &v22;
  uint64_t v24 = 4;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"country_default", (uint64_t)&v23, 0, 0);
  if (v5)
  {
    uint64_t v2 = v5;
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
      return v2;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (!CCLogStream::shouldLog()) {
      return v2;
    }
    goto LABEL_37;
  }
  uint64_t v7 = *((void *)this + 9);
  if (*(unsigned char *)(v7 + 6764))
  {
    uint64_t v2 = 3825172766;
    if (AppleBCMWLANCore::checkCountryCodeValidness(this, (const char *)(v7 + 6744)) == -469794530)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, 3825172766);
          CCLogStream::logAlert(v8, "[dk] %s@%d: Error: Unsupported country %s, error: %s\n");
        }
      }
      return v2;
    }
    uint64_t v23 = (int *)(v7 + 6744);
    uint64_t v24 = 4;
    uint64_t v13 = AppleBCMWLANCommander::runIOCtlSet(*(AppleBCMWLANCommander **)(v7 + 5416), 84, (uint64_t)&v23, 0, 0);
    uint64_t v2 = v13;
    if (v13 != -469794532 && v13)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unint64_t v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v2);
          CCLogStream::logAlert(v14, "[dk] %s@%d: Error: Unable to set country to %s : %s\n");
        }
      }
      return v2;
    }
    goto LABEL_34;
  }
  uint64_t v23 = (int *)(v7 + 6740);
  uint64_t v24 = 4;
  uint64_t v9 = AppleBCMWLANCommander::runIOCtlSet(*(AppleBCMWLANCommander **)(v7 + 5416), 84, (uint64_t)&v23, 0, 0);
  if (v9 != -469794532)
  {
    uint64_t v10 = v9;
    if (v9)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          __int16 v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          uint64_t v19 = (const char *)(*((void *)this + 9) + 6740);
          int v20 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v10);
          CCLogStream::logAlert(v18, "[dk] %s@%d: Error: Unable to restore country to %s : %s\n", "setupCountryCode", 34177, v19, v20);
        }
      }
    }
  }
  int v22 = 0;
  uint64_t v23 = &v22;
  uint64_t v24 = 4;
  uint64_t v11 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"country_default", (uint64_t)&v23, 0, 0);
  uint64_t v12 = *(void *)this;
  if (v11)
  {
    uint64_t v2 = v11;
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(v12 + 1848))(this)) {
      return v2;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (!CCLogStream::shouldLog()) {
      return v2;
    }
LABEL_37:
    uint64_t v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v2);
    CCLogStream::logAlert(v17, "[dk] %s@%d: iovar set country_default command failed: %s\n");
    return v2;
  }
  uint64_t v2 = (*(uint64_t (**)(AppleBCMWLANCore *))(v12 + 456))(this);
  if (!v2)
  {
LABEL_34:
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        __int16 v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logInfo(v16, "[dk] %s@%d:WiFiCC : HostCountry:%d, ivars->fDefaultCountryCode:%s, ivars->fCurrentHostCountryCode:%s\n", "setupCountryCode", 34199, *(unsigned __int8 *)(*((void *)this + 9) + 6764), (const char *)(*((void *)this + 9) + 6740), (const char *)(*((void *)this + 9) + 6744));
      }
    }
    return v2;
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v2);
      CCLogStream::logAlert(v15, "[dk] %s@%d: Error: Failed to restore autocountry setting : %s\n");
    }
  }
  return v2;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setupCountryCode(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::setupCountryCode((AppleBCMWLANCore *)((char *)this - 64));
}

uint64_t AppleBCMWLANCore::setWCL_ASSOCIATE(IO80211Controller *a1, uint64_t a2, unint64_t a3)
{
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  *(_OWORD *)uint64_t v24 = 0u;
  long long v25 = 0u;
  if (IO80211ThreadProcessInfo::getProcessName((IO80211ThreadProcessInfo *)v24, (char *)0x80, a3)) {
    IO80211Controller::getProcessName(a1, v24, 0x80uLL);
  }
  if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
  {
    (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v15 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      __int16 v16 = (const char *)authtypelower2str(*(_DWORD *)(a2 + 16));
      uint64_t v17 = (const char *)authtypeupper2str(*(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24));
      __int16 v18 = (const char *)ciphertype2str(*(_DWORD *)(a2 + 72));
      __int16 v19 = *(_WORD *)(a2 + 480);
      int v20 = ", Instant Hotspot";
      if ((v19 & 2) == 0) {
        int v20 = (const char *)&unk_10029A2CA;
      }
      if ((v19 & 4) != 0) {
        int v21 = ", Auto Instant Hotspot";
      }
      else {
        int v21 = (const char *)&unk_10029A2CA;
      }
      CCLogStream::logCrit(v15, "[dk] %s@%d: [%s]: lowerAuth = %s, upperAuth = %s, key = %s %s %s.\n", "setWCL_ASSOCIATE", 34332, v24, v16, v17, v18, v20, v21);
    }
  }
  uint64_t v5 = (*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 456))(a1);
  uint64_t v6 = *((void *)a1 + 9);
  if (v5)
  {
    uint64_t v7 = v5;
    *(unsigned char *)(v6 + 10396) = 0;
  }
  else
  {
    atomic_fetch_and((atomic_uint *volatile)(v6 + 10388), 0xFFFDFFFF);
    *(unsigned char *)(*((void *)a1 + 9) + 8828) = 0;
    if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 81))
    {
      if (AppleBCMWLANCore::setEntropyForRNG(a1))
      {
        if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            int v22 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logAlert(v22, "[dk] %s@%d:Failed to set RNG seed value\n", "setWCL_ASSOCIATE", 34347);
          }
        }
      }
    }
    IO80211BssManager::setAuthContext();
    unint64_t v8 = *(IO80211BssManager **)(*((void *)a1 + 9) + 5440);
    unsigned int BandInfoBitmap = IO80211GetBandInfoBitmap(*(_DWORD *)(a2 + 976));
    IO80211BssManager::setBandInfoBitmap(v8, BandInfoBitmap);
    IO80211BssManager::setAssocSSID(*(IO80211BssManager **)(*((void *)a1 + 9) + 5440), (const unsigned __int8 *)(a2 + 32), *(unsigned int *)(a2 + 28));
    IO80211BssManager::set5GhPreference(*(IO80211BssManager **)(*((void *)a1 + 9) + 5440), 0);
    AppleBCMWLANRoamAdapter::skipPscScansForRoamScans(*(AppleBCMWLANRoamAdapter **)(*((void *)a1 + 9) + 5576), (*(_WORD *)(a2 + 480) & 0x10) == 0);
    int IsBitSet = AppleBCMWLANCore::featureFlagIsBitSet(a1, 115);
    uint64_t v11 = *((void *)a1 + 9);
    if (IsBitSet && *(void *)(v11 + 5592))
    {
      uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(v11 + 11304) + 1008))(*(void *)(v11 + 11304));
      *(_DWORD *)v23.octet = v12;
      *(_WORD *)&v23.octet[4] = WORD2(v12);
      AppleBCMWLAN11beAdapter::setupJoinConfig(*(AppleBCMWLAN11beAdapter **)(*((void *)a1 + 9) + 5592), (*(_WORD *)(a2 + 480) & 0x80) == 0, &v23, 0);
      uint64_t v11 = *((void *)a1 + 9);
    }
    uint64_t v7 = AppleBCMWLANJoinAdapter::performJoin(*(AppleBCMWLANJoinAdapter **)(v11 + 5424), a2);
    if (v7)
    {
      AppleBCMWLANPowerManager::configureMIMOPowerSaveForJoinFailure(*(AppleBCMWLANPowerManager **)(*((void *)a1 + 9)
                                                                                                  + 5528));
    }
    else if (*(_WORD *)(a2 + 12) == 1)
    {
      IO80211BssManager::setAdHocCreated(*(IO80211BssManager **)(*((void *)a1 + 9) + 5440), 1);
      uint64_t v13 = *((void *)a1 + 9);
      if (*(void *)(v13 + 11312))
      {
        *(unsigned char *)(v13 + 222) = 1;
        AppleBCMWLANProximityInterface::bringdownLink(*(AppleBCMWLANProximityInterface **)(*((void *)a1 + 9) + 11312));
      }
    }
  }
  return v7;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setWCL_ASSOCIATE(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return AppleBCMWLANCore::setWCL_ASSOCIATE((IO80211Controller *)(a1 - 64), a2, a3);
}

uint64_t AppleBCMWLANCore::createNANInterface(IOService *a1, uint64_t a2)
{
  uint64_t v4 = 3758097095;
  if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)a1, 6))
  {
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    int v5 = *(_DWORD *)(a2 + 12);
    if ((v5 - 8) < 2)
    {
      char v21 = 1;
      if (IOParseBootArgNumber("enable_nan", &v21, 1))
      {
        if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
        {
          ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v17 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
            if (v21) {
              __int16 v18 = "Allow";
            }
            else {
              __int16 v18 = "Disallow";
            }
            CCLogStream::logAlert(v17, "[dk] %s@%d:%s creation of nan0 interface\n", "createNANInterface", 34558, v18);
          }
        }
      }
      if (v21)
      {
        free = a1[1].OSObject::OSObjectInterface::__vftable[1862].free;
        if (free) {
          goto LABEL_29;
        }
        uint64_t NANMgmtDataInterface = AppleBCMWLANCore::createNANMgmtDataInterface(a1, a2);
        if (NANMgmtDataInterface)
        {
          uint64_t v4 = NANMgmtDataInterface;
          if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
          {
            ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
            if (CCLogStream::shouldLog())
            {
              unint64_t v8 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
              CCLogStream::logAlert(v8, "[dk] %s@%d:ERROR: Failed to create NAN Mgmt interface\n");
            }
          }
          return v4;
        }
        uint64_t v12 = a1[1].OSObject::OSObjectInterface::__vftable;
        uint64_t v13 = 29800;
        goto LABEL_28;
      }
      return 3758097122;
    }
    if (v5 != 10) {
      return v4;
    }
    char v21 = 1;
    if (IOParseBootArgNumber("enable_nan_data_if", &v21, 1))
    {
      if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
      {
        ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        if (CCLogStream::shouldLog())
        {
          __int16 v19 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
          if (v21) {
            int v20 = "Allow";
          }
          else {
            int v20 = "Disallow";
          }
          CCLogStream::logAlert(v19, "[dk] %s@%d:%s creation of nan1 data interface\n", "createNANInterface", 34580, v20);
        }
      }
    }
    if (!v21) {
      return 3758097122;
    }
    free = a1[1].OSObject::OSObjectInterface::__vftable[1863].init;
    if (free) {
      goto LABEL_29;
    }
    uint64_t NANDataInterface = AppleBCMWLANCore::createNANDataInterface(a1, a2);
    if (!NANDataInterface)
    {
      uint64_t v12 = a1[1].OSObject::OSObjectInterface::__vftable;
      uint64_t v13 = 29808;
LABEL_28:
      free = *(BOOL (__cdecl **)(OSObjectInterface *__hidden))((char *)&v12->init + v13);
LABEL_29:
      unint64_t v14 = (const char *)(*(uint64_t (**)(void *))(*(void *)free + 160))(free);
      strlcpy((char *)(a2 + 16), v14, 0x10uLL);
      if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
      {
        ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        if (CCLogStream::shouldLog())
        {
          __int16 v16 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
          CCLogStream::logAlert(v16, "[dk] %s@%d:Created virtif <%s> role %u\n", "createNANInterface", 34609, (const char *)(a2 + 16), *(_DWORD *)(a2 + 12));
        }
      }
      return 0;
    }
    uint64_t v4 = NANDataInterface;
    if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
    {
      ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v11 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        CCLogStream::logAlert(v11, "[dk] %s@%d:ERROR: Failed to create NAN Data interface\n");
      }
    }
  }
  else if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
  {
    ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v9 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
      CCLogStream::logAlert(v9, "[dk] %s@%d:No driver support for NAN, skipping interface creation\n");
    }
  }
  return v4;
}

uint64_t AppleBCMWLANCore::setVIRTUAL_IF_CREATE(IOService *a1, uint64_t a2)
{
  int v20 = 1;
  IOParseBootArgNumber("wlan.dk.awdl", &v20, 4);
  int v4 = *(_DWORD *)(a2 + 12);
  if (v4 == 6 && v20 == 0)
  {
    if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
    {
      ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
      uint64_t ProxInterface = 1;
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        CCLogStream::logAlert(v7, "[dk] %s@%d:AWDL VIRTUAL_IF_CREATE is rejected due to boot-args wlan.dk.awdl=0\n");
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    if ((v4 - 8) < 3) {
      return AppleBCMWLANCore::createNANInterface(a1, a2);
    }
    if (v4 == 6)
    {
      if (!a1[1].OSObject::OSObjectInterface::__vftable[707].init)
      {
        uint64_t ProxInterface = AppleBCMWLANCore::createProxInterface(a1, a2);
        if (ProxInterface) {
          return ProxInterface;
        }
      }
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      unint64_t v8 = (const char *)(*(uint64_t (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)a1[1].OSObject::OSObjectInterface::__vftable[707].init
                                                                                                  + 160))(a1[1].OSObject::OSObjectInterface::__vftable[707].init);
      strlcpy((char *)(a2 + 16), v8, 0x10uLL);
      if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
      {
        ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        if (CCLogStream::shouldLog())
        {
          __int16 v18 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
          CCLogStream::logAlert(v18, "[dk] %s@%d: create virtif <%s> role %u\n", "setVIRTUAL_IF_CREATE", 34666, (const char *)(a2 + 16), *(_DWORD *)(a2 + 12));
        }
      }
      return 0;
    }
    if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
    {
      ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v17 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        CCLogStream::logAlert(v17, "[dk] %s@%d: create virtif role %u\n", "setVIRTUAL_IF_CREATE", 34669, *(_DWORD *)(a2 + 12));
      }
    }
    if (*(_DWORD *)(a2 + 12) == 7)
    {
      uint64_t v9 = a1[1].OSObject::OSObjectInterface::__vftable;
      if (v9[707].free)
      {
        uint64_t ProxInterface = 3758097106;
        if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
        {
          ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v10 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
            uint64_t v11 = (const char *)(*(uint64_t (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)a1[1].OSObject::OSObjectInterface::__vftable[707].free + 160))(a1[1].OSObject::OSObjectInterface::__vftable[707].free);
            CCLogStream::logAlert(v10, "[dk] %s@%d:WARNING: <%s> already created role %u\n", "setVIRTUAL_IF_CREATE", 34680, v11, *(_DWORD *)(a2 + 12));
            return 3758097106;
          }
        }
      }
      else
      {
        IOService::Create(a1, a1, "DriverKit_IO80211SoftAP", (IOService **)&v9[707].free, 0);
        if (a1[1].OSObject::OSObjectInterface::__vftable[707].free)
        {
          if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)a1, 13)) {
            AppleBCMWLANIO80211APSTAInterface::setDisableHostapdAuthentication((uint64_t)a1[1].OSObject::OSObjectInterface::__vftable[707].free, 1);
          }
          if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)a1, 12)) {
            AppleBCMWLANIO80211APSTAInterface::setInternalAPAuthentication((uint64_t)a1[1].OSObject::OSObjectInterface::__vftable[707].free, 1);
          }
          if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
          {
            ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v13 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
              uint64_t InterfaceId = IO80211SkywalkInterface::getInterfaceId((IO80211SkywalkInterface *)a1[1].OSObject::OSObjectInterface::__vftable[707].free);
              unsigned int InterfaceRole = IO80211SkywalkInterface::getInterfaceRole((IO80211SkywalkInterface *)a1[1].OSObject::OSObjectInterface::__vftable[707].free);
              CCLogStream::logAlertIf(v13, 0x5000080400uLL, "[dk] %s@%d: Created Virtual interface id %lu role %lu\n", "setVIRTUAL_IF_CREATE", 34725, InterfaceId, InterfaceRole);
            }
          }
          return 0;
        }
        uint64_t ProxInterface = 3758097085;
        if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
        {
          ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
          if (CCLogStream::shouldLog())
          {
            __int16 v16 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
            CCLogStream::logAlert(v16, "[dk] %s@%d:Failed to create AP STA Interface role %u\n");
          }
        }
      }
    }
    else
    {
      if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
      {
        ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        if (CCLogStream::shouldLog())
        {
          __int16 v19 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
          CCLogStream::logAlert(v19, "[dk] %s@%d:ERROR: Invalid virtual interface role 0x%X name %s \n", "setVIRTUAL_IF_CREATE", 34671, *(_DWORD *)(a2 + 12), (const char *)(a2 + 16));
        }
      }
      return 3758096385;
    }
  }
  return ProxInterface;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setVIRTUAL_IF_CREATE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setVIRTUAL_IF_CREATE((IOService *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::setIBSS_MODE(IO80211Controller *a1, uint64_t a2, unint64_t a3)
{
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  *(_OWORD *)uint64_t v56 = 0u;
  long long v57 = 0u;
  if (IO80211ThreadProcessInfo::getProcessName((IO80211ThreadProcessInfo *)v56, (char *)0x80, a3)) {
    IO80211Controller::getProcessName(a1, v56, 0x80uLL);
  }
  uint64_t v5 = *(void *)(*((void *)a1 + 9) + 11312);
  if (a2)
  {
    if (v5)
    {
      if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          long long v29 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logNotice(v29, "[dk] %s@%d: [%s]: Tearing down AWDL before bringing up adhoc\n", "setIBSS_MODE", 34871, v56);
        }
      }
      uint64_t v6 = AppleBCMWLANProximityInterface::bringdownLink(*(AppleBCMWLANProximityInterface **)(*((void *)a1 + 9)
                                                                                            + 11312));
      if (v6)
      {
        uint64_t v7 = v6;
        if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            unsigned int v32 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            BOOL v33 = (const char *)(*(uint64_t (**)(IO80211Controller *, uint64_t))(*(void *)a1 + 112))(a1, v7);
            CCLogStream::logAlert(v32, "[dk] %s@%d: [%s]:Unable to quiesce AWDL: %s\n", "setIBSS_MODE", 34874, v56, v33);
          }
        }
      }
    }
    if (*(void *)(*((void *)a1 + 9) + 29800))
    {
      if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          long long v30 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logNotice(v30, "[dk] %s@%d: [%s]: Tearing down NAN before bringing up adhoc\n", "setIBSS_MODE", 34881, v56);
        }
      }
      uint64_t v8 = AppleBCMWLANNANInterface::bringdownLink(*(AppleBCMWLANNANInterface **)(*((void *)a1 + 9) + 29800));
      if (v8)
      {
        uint64_t v9 = v8;
        if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            BOOL v34 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            BOOL v35 = (const char *)(*(uint64_t (**)(IO80211Controller *, uint64_t))(*(void *)a1 + 112))(a1, v9);
            CCLogStream::logAlert(v34, "[dk] %s@%d: [%s]:Unable to quiesce NAN: %s\n", "setIBSS_MODE", 34884, v56, v35);
          }
        }
      }
    }
    if (*(void *)(*((void *)a1 + 9) + 29808))
    {
      if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          long long v31 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logNotice(v31, "[dk] %s@%d: [%s]: Tearing down NDI before bringing up adhoc\n", "setIBSS_MODE", 34890, v56);
        }
      }
      uint64_t v10 = AppleBCMWLANNANDataInterface::bringdownLink(*(AppleBCMWLANNANDataInterface **)(*((void *)a1 + 9) + 29808));
      if (v10)
      {
        uint64_t v11 = v10;
        if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v36 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            uint64_t v37 = (const char *)(*(uint64_t (**)(IO80211Controller *, uint64_t))(*(void *)a1 + 112))(a1, v11);
            CCLogStream::logAlert(v36, "[dk] %s@%d: [%s]:Unable to quiesce NAN: %s\n", "setIBSS_MODE", 34893, v56, v37);
          }
        }
      }
    }
    AdhocNetworuint64_t k = AppleBCMWLANJoinAdapter::createAdhocNetwork(*(AppleBCMWLANJoinAdapter **)(*((void *)a1 + 9) + 5424), a2);
    uint64_t v13 = *((void *)a1 + 9);
    if (AdhocNetwork)
    {
      if (*(void *)(v13 + 11312) && *(void *)(v13 + 29800))
      {
        if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            BOOL v41 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            BOOL v42 = (const char *)(*(uint64_t (**)(IO80211Controller *, uint64_t))(*(void *)a1 + 112))(a1, AdhocNetwork);
            CCLogStream::logCrit(v41, "[dk] %s@%d: [%s]: Failed to create network adhoc, error %s\n", "setIBSS_MODE", 34908, v56, v42);
          }
        }
        if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            int v43 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logNotice(v43, "[dk] %s@%d: [%s]: Bring AWDL up after tearing down adhoc\n", "setIBSS_MODE", 34910, v56);
          }
        }
        uint64_t v14 = AppleBCMWLANProximityInterface::bringupLink(*(AppleBCMWLANProximityInterface **)(*((void *)a1 + 9)
                                                                                             + 11312));
        if (v14)
        {
          uint64_t v15 = v14;
          if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
          {
            (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              int v51 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
              uint64_t v52 = (const char *)(*(uint64_t (**)(IO80211Controller *, uint64_t))(*(void *)a1 + 112))(a1, v15);
              CCLogStream::logAlert(v51, "[dk] %s@%d: [%s]: Unable to bring UP AWDL: %s\n", "setIBSS_MODE", 34913, v56, v52);
            }
          }
        }
        if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v44 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logNotice(v44, "[dk] %s@%d: [%s]: Bring NAN up after tearing down adhoc\n", "setIBSS_MODE", 34918, v56);
          }
        }
        uint64_t v16 = AppleBCMWLANNANInterface::bringupLink(*(AppleBCMWLANNANInterface **)(*((void *)a1 + 9) + 29800));
        if (v16)
        {
          uint64_t v17 = v16;
          if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
          {
            (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v53 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
              uint64_t v54 = (const char *)(*(uint64_t (**)(IO80211Controller *, uint64_t))(*(void *)a1 + 112))(a1, v17);
              CCLogStream::logAlert(v53, "[dk] %s@%d: [%s]: Unable to bring UP NAN: %s\n", "setIBSS_MODE", 34921, v56, v54);
            }
          }
        }
        if (*(void *)(*((void *)a1 + 9) + 29808))
        {
          if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
          {
            (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v55 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
              CCLogStream::logNotice(v55, "[dk] %s@%d: [%s]: Bring NDI up after tearing down adhoc\n", "setIBSS_MODE", 34925, v56);
            }
          }
          uint64_t v18 = AppleBCMWLANNANDataInterface::bringupLink(*(AppleBCMWLANNANDataInterface **)(*((void *)a1 + 9)
                                                                                           + 29808));
          if (v18)
          {
            uint64_t v19 = v18;
            if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
            {
              (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
              if (CCLogStream::shouldLog())
              {
                int v20 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                char v21 = (const char *)(*(uint64_t (**)(IO80211Controller *, uint64_t))(*(void *)a1 + 112))(a1, v19);
                CCLogStream::logAlert(v20, "[dk] %s@%d: [%s]: Unable to bring UP NAN: %s\n", "setIBSS_MODE", 34928, v56, v21);
              }
            }
          }
        }
      }
    }
    else
    {
      IO80211BssManager::setAdHocCreated(*(IO80211BssManager **)(v13 + 5440), 1);
    }
    IO80211BssManager::setAuthContext();
  }
  else
  {
    if (v5)
    {
      if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v38 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logNotice(v38, "[dk] %s@%d: [%s]: Bring AWDL up after tearing down adhoc\n", "setIBSS_MODE", 34841, v56);
        }
      }
      uint64_t v22 = AppleBCMWLANProximityInterface::bringupLink(*(AppleBCMWLANProximityInterface **)(*((void *)a1 + 9)
                                                                                           + 11312));
      if (v22)
      {
        uint64_t v23 = v22;
        if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            int v45 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            uint64_t v46 = (const char *)(*(uint64_t (**)(IO80211Controller *, uint64_t))(*(void *)a1 + 112))(a1, v23);
            CCLogStream::logAlert(v45, "[dk] %s@%d: [%s]: Unable to bring UP AWDL: %s\n", "setIBSS_MODE", 34844, v56, v46);
          }
        }
      }
    }
    if (*(void *)(*((void *)a1 + 9) + 29800))
    {
      if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          unsigned int v39 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logNotice(v39, "[dk] %s@%d: [%s]: Bring NAN up after tearing down adhoc\n", "setIBSS_MODE", 34851, v56);
        }
      }
      uint64_t v24 = AppleBCMWLANNANInterface::bringupLink(*(AppleBCMWLANNANInterface **)(*((void *)a1 + 9) + 29800));
      if (v24)
      {
        uint64_t v25 = v24;
        if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v47 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            uint64_t v48 = (const char *)(*(uint64_t (**)(IO80211Controller *, uint64_t))(*(void *)a1 + 112))(a1, v25);
            CCLogStream::logAlert(v47, "[dk] %s@%d: [%s]: Unable to bring UP NAN: %s\n", "setIBSS_MODE", 34854, v56, v48);
          }
        }
      }
    }
    if (*(void *)(*((void *)a1 + 9) + 29808))
    {
      if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          BOOL v40 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logNotice(v40, "[dk] %s@%d: [%s]: Bring NDI up after tearing down adhoc\n", "setIBSS_MODE", 34859, v56);
        }
      }
      uint64_t v26 = AppleBCMWLANNANDataInterface::bringupLink(*(AppleBCMWLANNANDataInterface **)(*((void *)a1 + 9) + 29808));
      if (v26)
      {
        uint64_t v27 = v26;
        if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v49 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            int v50 = (const char *)(*(uint64_t (**)(IO80211Controller *, uint64_t))(*(void *)a1 + 112))(a1, v27);
            CCLogStream::logAlert(v49, "[dk] %s@%d: [%s]: Unable to bring UP NAN: %s\n", "setIBSS_MODE", 34862, v56, v50);
          }
        }
      }
    }
    return 0;
  }
  return AdhocNetwork;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setIBSS_MODE(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return AppleBCMWLANCore::setIBSS_MODE((IO80211Controller *)(a1 - 64), a2, a3);
}

uint64_t AppleBCMWLANCore::powerOff(IOService *this, int a2)
{
  int init_low = LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[421].init);
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      long long v59 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      long long v60 = this[1].OSObject::OSObjectInterface::__vftable;
      long long v61 = v60 + 421;
      int v62 = LOBYTE(v60[421].init);
      int v63 = BYTE1(v60[48].free);
      uint64_t init_high = HIDWORD(v60[649].init);
      uint64_t free_high = SHIDWORD(v61[810].free);
      if (free_high > 4) {
        __int16 v66 = "UNKNOWN";
      }
      else {
        __int16 v66 = off_10038CBB8[free_high];
      }
      CCLogStream::logAlert(v59, "[dk] %s@%d: Userland LPAS [%d] , Associated sleep LPAS [%d], fStateFlags(%lx) userPower(%s)\n", "powerOff", 39974, v62, v63, init_high, v66);
    }
  }
  v180 = (AppleBCMWLANTimeTrace *)0xAAAAAAAAAAAAAAAALL;
  AppleBCMWLANUtil::AutoreleasedTimeTrace::AutoreleasedTimeTrace(&v180, (AppleBCMWLANTimeTrace *)0x40, 0, 1);
  mach_continuous_nanoseconds = (unint64_t *)AppleBCMWLANUtil::get_mach_continuous_nanoseconds(0, v5);
  AppleBCMWLANUtil::AutoreleasedTimeTrace::recordTraceWithTimestamp(&v180, mach_continuous_nanoseconds, 131106, 39981, "%s: %6u", "IOReturn AppleBCMWLANCore::powerOff(BOOL)", 39981);
  free = this[1].OSObject::OSObjectInterface::__vftable[706].free;
  uint64_t v8 = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
  if (!free)
  {
    if (v8)
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v12 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logCrit(v12, "[dk] %s@%d:NO INTER %s %d\n", "powerOff", 39984, "IOReturn AppleBCMWLANCore::powerOff(BOOL)", 39984);
      }
    }
    goto LABEL_19;
  }
  if (v8)
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      v172 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      int QueueSize = AppleBCMWLANCommander::getQueueSize((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[338].free, 0);
      int v164 = AppleBCMWLANCommander::getQueueSize((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[338].free, 3u);
      int v162 = AppleBCMWLANCommander::getQueueSize((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[338].free, 2u);
      int v67 = AppleBCMWLANCommander::getQueueSize((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[338].free, 4u);
      int v68 = AppleBCMWLANCommander::getQueueSize((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[338].free, 1u);
      int isSleeping = AppleBCMWLANCommander::isSleeping((AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free);
      BOOL isBusy = AppleBCMWLANCommander::isBusy((AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free);
      int isPaused = AppleBCMWLANCommander::isPaused((AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free);
      CCLogStream::logAlert(v172, "[dk] %s@%d: commander state fq %d aq %d obq %d compq %d pq %d, sleeping[%u] busy[%u] paused[%u]\n", "powerOff", 39989, QueueSize, v164, v162, v67, v68, isSleeping, isBusy, isPaused);
    }
  }
  uint64_t v9 = this[1].OSObject::OSObjectInterface::__vftable;
  int v10 = HIDWORD(v9[649].init);
  if ((v10 & 0x10000000) != 0)
  {
    uint64_t v13 = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if ((v10 & 4) == 0)
    {
      if (v13)
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          __int16 v72 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v72, "[dk] %s@%d: already powering off!\n");
        }
      }
      goto LABEL_19;
    }
    uint64_t v14 = 3758097109;
    if (v13)
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        int v45 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v45, "[dk] %s@%d:Conflicting power transitions.\n");
      }
    }
  }
  else
  {
    if ((v10 & 4) == 0)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v11 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v11, "[dk] %s@%d: already powered off!\n");
        }
      }
LABEL_19:
      uint64_t v14 = 0;
      goto LABEL_20;
    }
    if ((v10 & 0x10) != 0)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t v14 = 3766622211;
        if (CCLogStream::shouldLog())
        {
          uint64_t v46 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v46, "[dk] %s@%d: during initialization !!\n");
        }
      }
      else
      {
        uint64_t v14 = 3766622211;
      }
    }
    else
    {
      uint64_t v14 = 3766622210;
      if ((v10 & 0x20) == 0)
      {
        atomic_fetch_or((atomic_uint *volatile)((char *)&v9[649].init + 4), 0x10000000u);
        uint64_t v16 = this[1].OSObject::OSObjectInterface::__vftable;
        if (!HIDWORD(v16[1231].free) || (BYTE4(v16[649].init) & 1) == 0)
        {
          atomic_fetch_and((atomic_uint *volatile)((char *)&v16[649].init + 4), 0xFFFFFFFB);
          uint64_t v16 = this[1].OSObject::OSObjectInterface::__vftable;
        }
        uint64_t v17 = (IO80211InfraInterface *)v16[706].free;
        if (v17)
        {
          IO80211InfraInterface::cancelDebounceTimer(v17);
          uint64_t v16 = this[1].OSObject::OSObjectInterface::__vftable;
        }
        if (HIDWORD(v16[1231].free) == 1 && (BYTE5(v16[649].init) & 0x20) == 0)
        {
          unint64_t v179 = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v178[0] = v18;
          v178[1] = v18;
          BYTE4(v178[0]) = 0;
          LODWORD(v178[0]) = 18;
          if (AppleBCMWLANCore::getPowerStats((AppleBCMWLANCore *)this, &v16[710], (int *)v178))
          {
            if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog())
              {
                v151 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                CCLogStream::logNotice(v151, "[dk] %s@%d: Failed to get AssociatedSleep/UnAssociatedSleep Duration Values \n", "powerOff", 40041);
              }
            }
          }
          int IsBitSet = AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 76);
          uint64_t v16 = this[1].OSObject::OSObjectInterface::__vftable;
          if (IsBitSet && !BYTE4(v16[1146].init))
          {
            memset(__b, 170, 0x270uLL);
            LODWORD(v178[0]) = 32;
            int PowerStats = AppleBCMWLANCore::getPowerStats((AppleBCMWLANCore *)this, __b, (int *)v178);
            uint64_t v21 = (uint64_t)&this[1].OSObject::OSObjectInterface::__vftable[749];
            uint64_t v22 = memcpy(__dst, __b, sizeof(__dst));
            double v23 = AppleBCMWLANCore::setLPSCPowerStats((uint64_t)v22, v21, (uint64_t)__dst);
            if (PowerStats)
            {
              if (((uint64_t (*)(IOService *, double))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this, v23))
              {
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if (CCLogStream::shouldLog())
                {
                  v156 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  CCLogStream::logInfo(v156, "[dk] %s@%d:Failed to get power stats during sleep for LPSC \n", "powerOff", 40049);
                }
              }
            }
            uint64_t v16 = this[1].OSObject::OSObjectInterface::__vftable;
          }
        }
        memset(__b, 0, 184);
        LODWORD(__b[0]) = 3;
        LODWORD(__b[2]) = -528345084;
        if (v16[706].free)
        {
          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v79 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              CCLogStream::logAlert(v79, "[dk] %s@%d: posting APPLE80211_M_DRIVER_AVAILABLE, available[%u] reason[0x%08x] sub_reason[0x%08x] minor_reason[0x%08x]\n", "powerOff", 40059, LODWORD(__b[1]), LODWORD(__b[2]), HIDWORD(__b[2]), LODWORD(__b[3]));
            }
          }
          IO80211Controller::postMessage((IO80211Controller *)this, (IO80211SkywalkInterface *)this[1].OSObject::OSObjectInterface::__vftable[706].free, 0x37u, __b, 0xB8uLL, 1);
          uint64_t v16 = this[1].OSObject::OSObjectInterface::__vftable;
        }
        if ((BYTE6(v16[649].init) & 4) != 0)
        {
          AppleBCMWLANCore::resetRangingState((AppleBCMWLANCore *)this);
          uint64_t v16 = this[1].OSObject::OSObjectInterface::__vftable;
        }
        if ((!HIDWORD(v16[1231].free) || (BYTE4(v16[649].init) & 1) == 0) && (v16[707].init || v16[1862].free))
        {
          init = (IOLock *)v16[75].init;
          IOLockLock(init);
          BYTE5(v16[69].free) &= ~0x80u;
          IOLockUnlock(init);
          uint64_t v25 = AppleBCMWLANCore::writeEventBitField((AppleBCMWLANCore *)this);
          if (v25)
          {
            uint64_t v26 = v25;
            if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog())
              {
                v135 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                v136 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v26);
                CCLogStream::logAlert(v135, "[dk] %s@%d: Failed to clear event WLC_E_COUNTRY_CODE_CHANGED : %s\n", "powerOff", 40078, v136);
              }
            }
          }
          uint64_t v27 = (AppleBCMWLANProximityInterface *)this[1].OSObject::OSObjectInterface::__vftable[707].init;
          if (v27)
          {
            AppleBCMWLANProximityInterface::clearTrafficRegistrationState(v27);
            uint64_t v28 = AppleBCMWLANProximityInterface::bringdownLink((AppleBCMWLANProximityInterface *)this[1].OSObject::OSObjectInterface::__vftable[707].init);
            if (v28)
            {
              uint64_t v29 = v28;
              if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
              {
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if (CCLogStream::shouldLog())
                {
                  v145 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  v146 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v29);
                  CCLogStream::logAlert(v145, "[dk] %s@%d:Unable to quiesce AWDL: %s\n", "powerOff", 40084, v146);
                }
              }
            }
          }
          long long v30 = (AppleBCMWLANNANInterface *)this[1].OSObject::OSObjectInterface::__vftable[1862].free;
          if (v30)
          {
            uint64_t v31 = AppleBCMWLANNANInterface::bringdownLink(v30);
            if (v31)
            {
              uint64_t v32 = v31;
              if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
              {
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if (CCLogStream::shouldLog())
                {
                  v147 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  v148 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v32);
                  CCLogStream::logAlert(v147, "[dk] %s@%d:Unable to quiesce NAN: %s\n", "powerOff", 40092, v148);
                }
              }
            }
            BOOL v33 = (AppleBCMWLANNANDataInterface *)this[1].OSObject::OSObjectInterface::__vftable[1863].init;
            if (v33)
            {
              uint64_t v34 = AppleBCMWLANNANDataInterface::bringdownLink(v33);
              if (v34)
              {
                uint64_t v35 = v34;
                if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                {
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  if (CCLogStream::shouldLog())
                  {
                    v154 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    v155 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v35);
                    CCLogStream::logAlert(v154, "[dk] %s@%d:Unable to quiesce NDI: %s\n", "powerOff", 40097, v155);
                  }
                }
              }
            }
          }
        }
        AppleBCMWLANCore::sendTxPowerCapValueToFirmware((uint64_t)this, 1, 1);
        AppleBCMWLANCore::setSPMICommonConfig((AppleBCMWLANCore *)this, 0);
        uint64_t v36 = (AppleBCMWLANIO80211APSTAInterface *)this[1].OSObject::OSObjectInterface::__vftable[707].free;
        if (v36 && AppleBCMWLANIO80211APSTAInterface::enabled(v36))
        {
          uint64_t v37 = this[1].OSObject::OSObjectInterface::__vftable;
          if (!HIDWORD(v37[1231].free) && (BYTE4(v37[649].init) & 1) != 0) {
            AppleBCMWLANIO80211APSTAInterface::setHostApModeInternal((IO80211SkywalkInterface *)v37[707].free, 0);
          }
          else {
            AppleBCMWLANIO80211APSTAInterface::hostAPPowerOff((AppleBCMWLANIO80211APSTAInterface *)v37[707].free);
          }
        }
        uint64_t v38 = this[1].OSObject::OSObjectInterface::__vftable;
        unsigned int v39 = v38[389].free;
        if (v39)
        {
          (*(void (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)v39 + 136))(v39);
          uint64_t v38 = this[1].OSObject::OSObjectInterface::__vftable;
        }
        if (!HIDWORD(v38[1231].free) || (BYTE4(v38[649].init) & 1) == 0)
        {
          AppleBCMWLANCore::disableTxQueues(this);
          uint64_t v38 = this[1].OSObject::OSObjectInterface::__vftable;
          BOOL v40 = v38[706].free;
          if (v40)
          {
            (*(void (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)v40 + 1176))(v40);
            uint64_t v38 = this[1].OSObject::OSObjectInterface::__vftable;
          }
        }
        LOBYTE(v38[1934].init) = 0;
        BYTE1(this[1].OSObject::OSObjectInterface::__vftable[1934].init) = 0;
        BOOL v41 = this[1].OSObject::OSObjectInterface::__vftable;
        int free_low = LOBYTE(v41[552].free);
        int v43 = (AppleBCMWLANCore ***)v41[344].init;
        if (v43)
        {
          if (AppleBCMWLANBGScanAdapter::generateAndApplyNewPrivateMACForScans(v43))
          {
            if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog())
              {
                uint64_t v44 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                CCLogStream::logAlert(v44, "[dk] %s@%d:Failed to configure Private MAC Address for Scans \n", "powerOff", 40203);
              }
            }
          }
          else
          {
            AppleBCMWLANBGScanAdapter::copyCurrentToOnSleepPrivateMac((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[344].init);
          }
        }
        uint64_t v48 = this[1].OSObject::OSObjectInterface::__vftable;
        uint64_t v49 = (AppleBCMWLANBGScanAdapter *)v48[344].init;
        if (v49)
        {
          AppleBCMWLANBGScanAdapter::cancelScanPrivacyMacTimer(v49);
          uint64_t v48 = this[1].OSObject::OSObjectInterface::__vftable;
        }
        AppleBCMWLANNetAdapter::quiesce((AppleBCMWLANCore ***)v48[350].init);
        AppleBCMWLANPowerManager::quiesce((AppleBCMWLANPowerManager *)this[1].OSObject::OSObjectInterface::__vftable[345].free);
        AppleBCMWLANCore::setEcountersEnableStateSync((AppleBCMWLANCore *)this, (uint64_t)&__block_literal_global_2310, 0);
        if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 81))
        {
          if (AppleBCMWLANCore::setEntropyForRNG((AppleBCMWLANCore *)this))
          {
            if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog())
              {
                v142 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                CCLogStream::logAlert(v142, "[dk] %s@%d:Failed to set RNG seed value\n", "powerOff", 40244);
              }
            }
          }
          (*(void (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[393].init
                                                                                + 136))(this[1].OSObject::OSObjectInterface::__vftable[393].init);
          (*(void (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[393].init
                                                                                + 72))(this[1].OSObject::OSObjectInterface::__vftable[393].init);
        }
        int v50 = this[1].OSObject::OSObjectInterface::__vftable;
        if (HIDWORD(v50[61].free))
        {
          unint64_t v51 = 0;
          do
          {
            *((unsigned char *)v50[63].free + v51++) = 1;
            int v50 = this[1].OSObject::OSObjectInterface::__vftable;
          }
          while (v51 < HIDWORD(v50[61].free));
        }
        if (free_low)
        {
          if (AppleBCMWLANCore::configureAssociatedSleepEntry((AppleBCMWLANCore *)this))
          {
            AppleBCMWLANCore::configureAssociatedSleepExit(this);
            AppleBCMWLANNetAdapter::quiesce((AppleBCMWLANCore ***)this[1].OSObject::OSObjectInterface::__vftable[350].init);
            int free_low = 0;
          }
          else
          {
            int free_low = 1;
          }
        }
        uint64_t v52 = this[1].OSObject::OSObjectInterface::__vftable;
        if (!HIDWORD(v52[1231].free) || (BYTE4(v52[649].init) & 1) == 0)
        {
          BYTE4(v52[411].free) = 1;
          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              __int16 v74 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              uint64_t v75 = this[1].OSObject::OSObjectInterface::__vftable;
              uint64_t v76 = HIDWORD(v75[649].init);
              uint64_t v77 = SHIDWORD(v75[1231].free);
              if (v77 > 4) {
                uint64_t v78 = "UNKNOWN";
              }
              else {
                uint64_t v78 = off_10038CBB8[v77];
              }
              CCLogStream::logAlert(v74, "[dk] %s@%d:Quiesce commander ivars->fStateFlags(%lx) userPower(%s)\n", "powerOff", 40325, v76, v78);
            }
          }
          AppleBCMWLANCommander::quiesce((AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free);
          uint64_t v53 = this[1].OSObject::OSObjectInterface::__vftable;
          if ((BYTE5(v53[649].init) & 0x80) == 0)
          {
            if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog())
              {
                v137 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                v138 = this[1].OSObject::OSObjectInterface::__vftable;
                uint64_t v139 = HIDWORD(v138[649].init);
                uint64_t v140 = SHIDWORD(v138[1231].free);
                if (v140 > 4) {
                  v141 = "UNKNOWN";
                }
                else {
                  v141 = off_10038CBB8[v140];
                }
                CCLogStream::logAlert(v137, "[dk] %s@%d:Wakeup commander ivars->fStateFlags(%lx) userPower(%s)\n", "powerOff", 40330, v139, v141);
              }
            }
            AppleBCMWLANCommander::wakeup((AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free);
            uint64_t v53 = this[1].OSObject::OSObjectInterface::__vftable;
          }
          BYTE4(v53[411].free) = 0;
          AppleBCMWLANCore::disableWorkQueueSources((AppleBCMWLANCore *)this);
          uint64_t v52 = this[1].OSObject::OSObjectInterface::__vftable;
        }
        if ((IO80211BssManager::isAssociated((IO80211BssManager *)v52[340].init) & 1) == 0) {
          AppleBCMWLANCore::configureEventBitMaskForUnAssociatedSleep((AppleBCMWLANCore *)this);
        }
        uint64_t v54 = (AppleBCMWLANBGScanAdapter *)this[1].OSObject::OSObjectInterface::__vftable[344].init;
        BOOL v56 = v54
           && AppleBCMWLANBGScanAdapter::isBGScanConfigured(v54)
           && (IO80211BssManager::isAssociated((IO80211BssManager *)this[1].OSObject::OSObjectInterface::__vftable[340].init) & 1) == 0
           && (uint64_t v55 = this[1].OSObject::OSObjectInterface::__vftable, HIDWORD(v55[1231].free) == 1)
           && (BYTE4(v55[649].init) & 1) == 0;
        int v171 = free_low;
        BOOL v57 = (free_low & 1) != 0 || BYTE4(this[1].OSObject::OSObjectInterface::__vftable[593].init) != 0;
        if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
        {
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (CCLogStream::shouldLog())
          {
            int v73 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            CCLogStream::logAlert(v73, "[dk] %s@%d: Wow params %d %d %d %d, wakeForPNO %d\n", "powerOff", 40354, 0, free_low, 0, BYTE4(this[1].OSObject::OSObjectInterface::__vftable[593].init), v56);
          }
        }
        LODWORD(v178[0]) = 0;
        long long v58 = this[1].OSObject::OSObjectInterface::__vftable[337].free;
        if (v58
          && (*(unsigned int (**)(void (__cdecl *)(OSObjectInterface *__hidden), _OWORD *))(*(void *)v58 + 56))(v58, v178))
        {
          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (!CCLogStream::shouldLog())
            {
              int v166 = 1;
              BOOL v56 = 0;
              BOOL v57 = 0;
              goto LABEL_153;
            }
            uint64_t v80 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            CCLogStream::logAlert(v80, "[dk] %s@%d: Disabling WoW, system hibernating, hibstate[%08x], ivars->fUserSpacePowerState[%08x] ivars->fStateFlags[%08x]\n", "powerOff", 40368, LODWORD(v178[0]), HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[1231].free), HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[649].init));
          }
          BOOL v56 = 0;
          BOOL v57 = 0;
          int v166 = 1;
        }
        else
        {
          int v166 = 0;
        }
LABEL_153:
        int v81 = v57 || v56;
        if (!v57 && !v56) {
          goto LABEL_176;
        }
        int v176 = 1;
        uint64_t v82 = (AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free;
        __b[0] = &v176;
        __b[1] = 4;
        uint64_t v83 = AppleBCMWLANCommander::runIOVarSet(v82, (uint64_t)"bus:disconnect", (uint64_t)__b, 0, 0);
        if (v83 != -469794537 && (uint64_t v84 = v83, v83))
        {
          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              v149 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              v150 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v84);
              CCLogStream::logAlert(v149, "[dk] %s@%d: Sending disconnect command failed %s\n", "powerOff", 40383, v150);
            }
          }
        }
        else if (!(*(unsigned int (**)(void))(*((void *)this[1].OSObject::OSObjectInterface::__vftable[337].free + 6) {
                                             + 232))())
        }
        {
LABEL_165:
          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              v165 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              int v163 = AppleBCMWLANCommander::getQueueSize((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[338].free, 0);
              int v161 = AppleBCMWLANCommander::getQueueSize((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[338].free, 3u);
              int v160 = AppleBCMWLANCommander::getQueueSize((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[338].free, 2u);
              int v159 = AppleBCMWLANCommander::getQueueSize((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[338].free, 4u);
              int v158 = AppleBCMWLANCommander::getQueueSize((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[338].free, 1u);
              int v157 = AppleBCMWLANCommander::isSleeping((AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free);
              BOOL v131 = AppleBCMWLANCommander::isBusy((AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free);
              int v132 = AppleBCMWLANCommander::isPaused((AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free);
              CCLogStream::logAlert(v165, "[dk] %s@%d: commander state fq %d aq %d obq %d compq %d pq %d, sleeping[%u] busy[%u] paused[%u]\n", "powerOff", 40394, v163, v161, v160, v159, v158, v157, v131, v132);
            }
          }
          size_t v85 = this[1].OSObject::OSObjectInterface::__vftable;
          if (v57)
          {
            HIBYTE(v85[551].free) = 1;
            BYTE5(this[1].OSObject::OSObjectInterface::__vftable[551].free) = 1;
            LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[552].init) = 1;
            unint64_t v86 = this[1].OSObject::OSObjectInterface::__vftable;
            if (BYTE1(v86[48].free)
              && IO80211BssManager::isAssociated((IO80211BssManager *)v86[340].init))
            {
              int v87 = v171;
              if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
              {
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                int v88 = 1;
                if (CCLogStream::shouldLog())
                {
                  int v89 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  CCLogStream::logAlert(v89, "[dk] %s@%d: Low Power Associated Sleep Enabled\n");
                }
                goto LABEL_178;
              }
            }
            else
            {
              int v87 = v171;
              if (v171
                && IO80211BssManager::isAssociated((IO80211BssManager *)this[1].OSObject::OSObjectInterface::__vftable[340].init)
                && ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
              {
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                int v88 = 1;
                if (CCLogStream::shouldLog())
                {
                  int v105 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  CCLogStream::logAlert(v105, "[dk] %s@%d: Associated & WoW enabled, WiFi will remain up\n");
                }
LABEL_178:
                if (a2)
                {
                  int v90 = HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[649].init);
                  if ((v90 & 0x80) != 0)
                  {
                    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                    {
                      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                      if (CCLogStream::shouldLog())
                      {
                        v143 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                        CCLogStream::logAlert(v143, "[dk] %s@%d: Waiting for watchdog to complete\n", "powerOff", 40419);
                      }
                    }
                    atomic_fetch_or((atomic_uint *volatile)((char *)&this[1].OSObject::OSObjectInterface::__vftable[649].init + 4), 0x400u);
                    int v90 = HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[649].init);
                  }
                  if ((v90 & 0x400) != 0)
                  {
                    uint64_t v91 = AppleBCMWLANCore::waitForDriverEvent(this, 0, 0x1388u);
                    if (v91)
                    {
                      uint64_t v92 = v91;
                      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                      {
                        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                        if (CCLogStream::shouldLog())
                        {
                          v152 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                          v153 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v92);
                          CCLogStream::logAlert(v152, "[dk] %s@%d: Timed out waiting for driver to reset itself: %s\n", "powerOff", 40426, v153);
                        }
                      }
                    }
                  }
                }
                uint64_t v93 = this[1].OSObject::OSObjectInterface::__vftable;
                if (HIDWORD(v93[1231].free)
                  || BYTE1(v93[1134].free)
                  && (AppleBCMWLANCore::configureMonitorModeToFW((AppleBCMWLANCore *)this, 0),
                      uint64_t v93 = this[1].OSObject::OSObjectInterface::__vftable,
                      HIDWORD(v93[1231].free)))
                {
                  if (BYTE4(v93[649].init))
                  {
                    int v94 = 0;
                    goto LABEL_216;
                  }
                }
                BYTE4(v93[411].free) = 1;
                if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                {
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  if (CCLogStream::shouldLog())
                  {
                    v126 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    v127 = this[1].OSObject::OSObjectInterface::__vftable;
                    uint64_t v128 = HIDWORD(v127[649].init);
                    uint64_t v129 = SHIDWORD(v127[1231].free);
                    if (v129 > 4) {
                      int v130 = "UNKNOWN";
                    }
                    else {
                      int v130 = off_10038CBB8[v129];
                    }
                    CCLogStream::logAlert(v126, "[dk] %s@%d:Quiesce commander ivars->fStateFlags(%lx) userPower(%s) hibernating[%u]\n", "powerOff", 40439, v128, v130, v166);
                    int v87 = v171;
                  }
                }
                AppleBCMWLANCommander::quiesce((AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free);
                removePropertyHelper(this, "LastWakeReason");
                removePropertyHelper(this, "LastWakePacket");
                setPropertyHelper(this, "LastWakeReason", 0, 0x20u);
                removePropertyHelper(this, "IO80211InterfaceWoWWakeUpParams");
                uint64_t v95 = this[1].OSObject::OSObjectInterface::__vftable;
                unint64_t v96 = (AppleBCMWLANKeepAliveOffload *)v95[347].init;
                if (v96)
                {
                  AppleBCMWLANKeepAliveOffload::setCachedTCPAliveWakeReason(v96, 0);
                  uint64_t v95 = this[1].OSObject::OSObjectInterface::__vftable;
                }
                if (BYTE1(v95[48].free))
                {
                  int isAssociated = IO80211BssManager::isAssociated((IO80211BssManager *)v95[340].init);
                  if (isAssociated) {
                    unint64_t v98 = 3;
                  }
                  else {
                    unint64_t v98 = 1;
                  }
                  if (isAssociated) {
                    int v94 = 3;
                  }
                  else {
                    int v94 = 1;
                  }
                  if ((isAssociated | v87)) {
                    goto LABEL_215;
                  }
                }
                else if (v87)
                {
                  unint64_t v98 = 1;
                  int v94 = 1;
LABEL_215:
                  setPropertyHelper(this, "LastSleepMode", v98, 0x20u);
LABEL_216:
                  LODWORD(this[1].OSObject::OSObjectInterface::__vftable[2219].free) = v94;
                  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                  {
                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    if (CCLogStream::shouldLog())
                    {
                      __int16 v106 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                      if (v88) {
                        v107 = " with WoW";
                      }
                      else {
                        v107 = (const char *)&unk_10029A2CA;
                      }
                      CCLogStream::logAlert(v106, "[dk] %s@%d: Ready to power off%s\n", "powerOff", 40470, v107);
                    }
                  }
                  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                  {
                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    if (CCLogStream::shouldLog())
                    {
                      uint64_t v108 = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                      int v109 = this[1].OSObject::OSObjectInterface::__vftable;
                      int v168 = LOBYTE(v109[421].init);
                      v173 = (CCLogStream *)v108;
                      int v110 = BYTE1(v109[48].free);
                      int v111 = IO80211BssManager::isAssociated((IO80211BssManager *)v109[340].init);
                      CCLogStream::logAlert(v173, "[dk] %s@%d: Power off info: sleepMode[%u], fLPASSleep[%d], fLPASEnabledBeforeSleep[%d], associated[%d], wowEnabled[%u], wakeForPNO[%u], wow_enable_associated[%u], wow_enable_unassociated[%u], savedLPAS[%d]\n", "powerOff", 40473, v94, v168, v110, v111, v88, v56, v87, 0, init_low);
                    }
                  }
                  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                  {
                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    if (CCLogStream::shouldLog())
                    {
                      v174 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                      int v169 = AppleBCMWLANCommander::getQueueSize((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[338].free, 0);
                      int v112 = AppleBCMWLANCommander::getQueueSize((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[338].free, 3u);
                      int v113 = AppleBCMWLANCommander::getQueueSize((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[338].free, 2u);
                      int v114 = AppleBCMWLANCommander::getQueueSize((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[338].free, 4u);
                      int v115 = AppleBCMWLANCommander::getQueueSize((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[338].free, 1u);
                      int v116 = AppleBCMWLANCommander::isSleeping((AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free);
                      BOOL v117 = AppleBCMWLANCommander::isBusy((AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free);
                      int v118 = AppleBCMWLANCommander::isPaused((AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free);
                      CCLogStream::logAlert(v174, "[dk] %s@%d: commander state fq %d aq %d obq %d compq %d pq %d, sleeping[%u] busy[%u] paused[%u]\n", "powerOff", 40476, v169, v112, v113, v114, v115, v116, v117, v118);
                    }
                  }
                  atomic_fetch_and((atomic_uint *volatile)((char *)&this[1].OSObject::OSObjectInterface::__vftable[649].init + 4), 0xEFFFFFFF);
                  uint64_t v99 = this[1].OSObject::OSObjectInterface::__vftable;
                  uint64_t v100 = v99[706].free;
                  if (v100)
                  {
                    (*(void (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)v100 + 1064))(v100);
                    uint64_t v99 = this[1].OSObject::OSObjectInterface::__vftable;
                  }
                  if ((HIDWORD(v99[649].init) & 0x8080) == 0x8000)
                  {
                    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                    {
                      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                      if (CCLogStream::shouldLog())
                      {
                        uint64_t v133 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                        CCLogStream::logAlert(v133, "[dk] %s@%d:WD Failed while in powerOff. Save me!\n", "powerOff", 40494);
                      }
                    }
                    uint64_t v101 = this[1].OSObject::OSObjectInterface::__vftable;
                    unsigned int v102 = HIDWORD(v101[337].init);
                    if (v102 > 4)
                    {
                      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                      {
                        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                        if (CCLogStream::shouldLog())
                        {
                          v144 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                          CCLogStream::logAlert(v144, "[dk] %s@%d:Last watchdog failed, max retries performed, waiting for panic\n", "powerOff", 40501);
                        }
                      }
                    }
                    else
                    {
                      HIDWORD(v101[337].init) = v102 + 1;
                      AppleBCMWLANCore::watchdog((AppleBCMWLANCore *)this, 0);
                    }
                  }
                  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                  {
                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    if (CCLogStream::shouldLog())
                    {
                      v175 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                      int v170 = AppleBCMWLANCommander::getQueueSize((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[338].free, 0);
                      int v119 = AppleBCMWLANCommander::getQueueSize((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[338].free, 3u);
                      int v120 = AppleBCMWLANCommander::getQueueSize((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[338].free, 2u);
                      int v121 = AppleBCMWLANCommander::getQueueSize((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[338].free, 4u);
                      int v122 = AppleBCMWLANCommander::getQueueSize((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[338].free, 1u);
                      int v123 = AppleBCMWLANCommander::isSleeping((AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free);
                      BOOL v124 = AppleBCMWLANCommander::isBusy((AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free);
                      int v125 = AppleBCMWLANCommander::isPaused((AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free);
                      CCLogStream::logAlert(v175, "[dk] %s@%d: commander state fq %d aq %d obq %d compq %d pq %d, sleeping[%u] busy[%u] paused[%u]\n", "powerOff", 40506, v170, v119, v120, v121, v122, v123, v124, v125);
                    }
                  }
                  unsigned int v104 = (unint64_t *)AppleBCMWLANUtil::get_mach_continuous_nanoseconds(0, v103);
                  AppleBCMWLANUtil::AutoreleasedTimeTrace::recordTraceWithTimestamp(&v180, (unint64_t *)((char *)v104 - (char *)mach_continuous_nanoseconds), 131106, 40509, "%s: %6u", "IOReturn AppleBCMWLANCore::powerOff(BOOL)", 40509);
                  AppleBCMWLANUtil::AutoreleasedTimeTrace::recordTraceWithTimestamp(&v180, v104, 131106, 40510, "%s: %6u", "IOReturn AppleBCMWLANCore::powerOff(BOOL)", 40510);
                  AppleBCMWLANUtil::AutoreleasedTimeTrace::dumpToLog((AppleBCMWLANUtil::AutoreleasedTimeTrace *)&v180, 0, 0);
                  uint64_t v14 = 0;
                  LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[552].free) = 0;
                  goto LABEL_20;
                }
                if (v56) {
                  unint64_t v98 = 2;
                }
                else {
                  unint64_t v98 = 0;
                }
                if (v56) {
                  int v94 = 2;
                }
                else {
                  int v94 = 0;
                }
                goto LABEL_215;
              }
            }
            int v88 = 1;
            goto LABEL_178;
          }
          if (!v56)
          {
            int v81 = 0;
            goto LABEL_177;
          }
          BYTE6(v85[551].free) = 1;
          LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[552].init) = 1;
LABEL_176:
          size_t v85 = this[1].OSObject::OSObjectInterface::__vftable;
LABEL_177:
          int v87 = v171;
          int v88 = 0;
          HIBYTE(v85[551].free) = 0;
          BOOL v56 = v81;
          goto LABEL_178;
        }
        if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
        {
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (CCLogStream::shouldLog())
          {
            v134 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            CCLogStream::logAlert(v134, "[dk] %s@%d: Unsuccessful requesting WLAN to wake host\n", "powerOff", 40388);
          }
        }
        BOOL v56 = 0;
        BOOL v57 = 0;
        goto LABEL_165;
      }
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v47 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v47, "[dk] %s@%d: driver uninititalized\n");
        }
      }
    }
  }
LABEL_20:
  if (v180) {
    (*(void (**)(AppleBCMWLANTimeTrace *))(*(void *)v180 + 16))(v180);
  }
  return v14;
}

uint64_t AppleBCMWLANCore::powerOn(IOService *this)
{
  unint64_t v84 = 0;
  unsigned __int8 v83 = 0;
  IOParseBootArgNumber("wlan.check-wake-type", &v83, 1);
  uint64_t v82 = (AppleBCMWLANTimeTrace *)0xAAAAAAAAAAAAAAAALL;
  AppleBCMWLANUtil::AutoreleasedTimeTrace::AutoreleasedTimeTrace(&v82, (AppleBCMWLANTimeTrace *)0x40, 0, 1);
  mach_continuous_nanoseconds = (unint64_t *)AppleBCMWLANUtil::get_mach_continuous_nanoseconds(0, v2);
  AppleBCMWLANUtil::AutoreleasedTimeTrace::recordTraceWithTimestamp(&v82, mach_continuous_nanoseconds, 65553, 39477, "%s: %6u", "IOReturn AppleBCMWLANCore::powerOn()", 39477);
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      int v50 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      unint64_t v51 = this[1].OSObject::OSObjectInterface::__vftable;
      uint64_t v52 = (unsigned __int8 *)&v51[551].free + 5;
      uint64_t init_high = HIDWORD(v51[649].init);
      uint64_t free_high = SHIDWORD(v51[1231].free);
      if (free_high > 4) {
        uint64_t v55 = "UNKNOWN";
      }
      else {
        uint64_t v55 = off_10038CBB8[free_high];
      }
      CCLogStream::logAlert(v50, "[dk] %s@%d: stateFlags(%lx) userPower(%s), fCaptureWoWPacket[%u] fCaptureBGScanPacket[%u], checkWakeType[%u], fWoWSetup[%u]\n", "powerOn", 39479, init_high, v55, *v52, v52[1], v83, v52[2]);
    }
  }
  BYTE4(this[1].OSObject::OSObjectInterface::__vftable[1141].free) = 0;
  LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[552].free) = 0;
  int v4 = this[1].OSObject::OSObjectInterface::__vftable;
  int v5 = HIDWORD(v4[649].init);
  if ((v5 & 0x10000000) != 0)
  {
    uint64_t v8 = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if ((v5 & 4) != 0)
    {
      if (v8)
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          int v10 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v10, "[dk] %s@%d: alreedy powering on\n", "powerOn", 39487);
        }
      }
      goto LABEL_125;
    }
    uint64_t v7 = 3758097109;
    if (v8)
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v9 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v9, "[dk] %s@%d:Conflicting power transitions.\n", "powerOn", 39490);
      }
    }
  }
  else
  {
    if (!v4[337].free) {
      goto LABEL_125;
    }
    if ((HIDWORD(v4[649].init) & 0x8080) == 0x8000)
    {
      unsigned int v6 = HIDWORD(v4[337].init);
      if (v6 <= 4)
      {
        HIDWORD(v4[337].init) = v6 + 1;
        if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
        {
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v65 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            CCLogStream::logAlert(v65, "[dk] %s@%d:WD Failed detected, trying WD now. No %d\n", "powerOn", 39503, HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[337].init));
          }
        }
        uint64_t v7 = AppleBCMWLANCore::watchdog((AppleBCMWLANCore *)this, 0);
        goto LABEL_126;
      }
      goto LABEL_124;
    }
    atomic_fetch_or((atomic_uint *volatile)((char *)&v4[649].init + 4), 0x10000004u);
    BYTE4(this[1].OSObject::OSObjectInterface::__vftable[411].free) = 0;
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        BOOL v56 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        BOOL v57 = this[1].OSObject::OSObjectInterface::__vftable;
        uint64_t v58 = HIDWORD(v57[649].init);
        uint64_t v59 = SHIDWORD(v57[1231].free);
        if (v59 > 4) {
          long long v60 = "UNKNOWN";
        }
        else {
          long long v60 = off_10038CBB8[v59];
        }
        CCLogStream::logInfo(v56, "[dk] %s@%d:Wakeup commander fStateFlags(%lx) userPower(%s)\n", "powerOn", 39515, v58, v60);
      }
    }
    AppleBCMWLANCommander::wakeup((AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free);
    AppleBCMWLANCore::enableWorkQueueSources((AppleBCMWLANCore *)this);
    AppleBCMWLANCore::syncChipTimer((AppleBCMWLANCore *)this);
    uint64_t v11 = this[1].OSObject::OSObjectInterface::__vftable;
    if ((BYTE5(v11[649].init) & 0x10) != 0
      && (free = (AppleBCMWLANIO80211APSTAInterface *)v11[707].free) != 0
      && (int v13 = AppleBCMWLANIO80211APSTAInterface::enabled(free),
          uint64_t v11 = this[1].OSObject::OSObjectInterface::__vftable,
          v13))
    {
      uint64_t v7 = AppleBCMWLANIO80211APSTAInterface::hostAPPowerOn((AppleBCMWLANIO80211APSTAInterface *)v11[707].free);
      uint64_t v11 = this[1].OSObject::OSObjectInterface::__vftable;
    }
    else
    {
      uint64_t v7 = 0;
    }
    uint64_t v14 = v11[706].free;
    if (v14 && (BYTE4(v11[649].init) & 0x80) == 0)
    {
      (*(void (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)v14 + 1168))(v14);
      (*(void (**)(void))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[706].free + 1056))();
    }
    AppleBCMWLANCore::allowLinkup((AppleBCMWLANCore *)this);
    AppleBCMWLANCore::resetPorts(this);
    AppleBCMWLANCore::collectScanForwardStats((AppleBCMWLANCore *)this);
    AppleBCMWLANCore::processPowerStatsChangesInSleep((AppleBCMWLANCore *)this, 1);
    AppleBCMWLANCore::unconfigureEventBitMaskForUnAssociatedSleep((AppleBCMWLANCore *)this);
    AppleBCMWLANCore::setEcountersEnableStateSync((AppleBCMWLANCore *)this, (uint64_t)&__block_literal_global_2278, 1);
    if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 76))
    {
      if (!BYTE4(this[1].OSObject::OSObjectInterface::__vftable[1146].init))
      {
        uint64_t v22 = AppleBCMWLANCore::dumpEventLogReportedStats((AppleBCMWLANCore *)this, 6);
        if (v22)
        {
          uint64_t v23 = v22;
          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v24 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              uint64_t v25 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v23);
              CCLogStream::logAlert(v24, "[dk] %s@%d: Failed to flush log set 6 : %s\n", "powerOn", 39583, v25);
            }
          }
        }
      }
    }
    init = (AppleBCMWLANCore ***)this[1].OSObject::OSObjectInterface::__vftable[344].init;
    if (init)
    {
      uint64_t v7 = (uint64_t)AppleBCMWLANBGScanAdapter::generateAndApplyNewPrivateMACForScans(init);
      if (v7)
      {
        if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
        {
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (CCLogStream::shouldLog())
          {
            int v67 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            CCLogStream::logAlert(v67, "[dk] %s@%d:Failed to configure Private MAC Address for Scans \n", "powerOn", 39609);
          }
        }
      }
    }
    uint64_t v16 = this[1].OSObject::OSObjectInterface::__vftable;
    if (HIBYTE(v16[551].free))
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          long long v61 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v61, "[dk] %s@%d: Tearing down WoW mode\n", "powerOn", 39621);
        }
      }
      uint64_t v17 = this[1].OSObject::OSObjectInterface::__vftable;
      if (LOBYTE(v17[48].free))
      {
        if (IO80211BssManager::isAssociated((IO80211BssManager *)v17[340].init))
        {
          long long v18 = this[1].OSObject::OSObjectInterface::__vftable[389].free;
          if (v18) {
            (*(void (**)(void (__cdecl *)(OSObjectInterface *__hidden), uint64_t))(*(void *)v18 + 120))(v18, 2000);
          }
        }
        AppleBCMWLANCore::configureAssociatedSleepExit(this);
        uint64_t v17 = this[1].OSObject::OSObjectInterface::__vftable;
      }
      HIBYTE(v17[551].free) = 0;
      uint64_t v16 = this[1].OSObject::OSObjectInterface::__vftable;
    }
    char v19 = (*(uint64_t (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)v16[337].free + 208))(v16[337].free);
    int v20 = this[1].OSObject::OSObjectInterface::__vftable;
    if ((v19 & 1) == 0 && (BYTE4(v20[649].init) & 0x80) == 0)
    {
      if ((BYTE5(v20[551].free) || BYTE6(v20[551].free))
        && (char v21 = AppleBCMWLANCore::systemWokenByWiFi((AppleBCMWLANCore *)this),
            int v20 = this[1].OSObject::OSObjectInterface::__vftable,
            (v21 & 1) != 0)
        || v83 && HIDWORD(v20[552].init))
      {
        v80[0] = 0;
        if (acquireProperty<OSDictionary>((IOService *)v20[337].free, "IO80211InterfaceWoWWakeUpParams", v80, 0, "IOService"))
        {
          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              __int16 v74 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              CCLogStream::logAlert(v74, "[dk] %s@%d: APPLE80211_REGKEY_WOW_WAKEUP_PARAMS already present, populate wakeup parameters\n", "powerOn", 39659);
            }
          }
          setPropertyHelper(this, "IO80211InterfaceWoWWakeUpParams", v80[0]);
          if (v80[0]) {
            ((void (*)(OSObject *))v80[0]->release)(v80[0]);
          }
        }
        else
        {
          uint64_t v26 = this[1].OSObject::OSObjectInterface::__vftable;
          if (BYTE5(v26[551].free) || BYTE6(v26[551].free) || v83 && HIDWORD(v26[552].init))
          {
            unsigned __int16 MaxCmdRxPayload = AppleBCMWLANCommander::getMaxCmdRxPayload((AppleBCMWLANCommander *)v26[338].free);
            uint64_t v28 = IOMallocZeroData();
            if (v28)
            {
              unint64_t v29 = ((unint64_t)MaxCmdRxPayload << 32) | MaxCmdRxPayload;
              if (MaxCmdRxPayload)
              {
                uint64_t v30 = v28;
              }
              else
              {
                unint64_t v29 = 0;
                uint64_t v30 = 0;
              }
              *(void *)&long long v85 = v30;
              *((void *)&v85 + 1) = v29;
              uint64_t v31 = AppleBCMWLANCommander::runIOVarGet((AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free, (uint64_t)"bus:wakeup_data", (uint64_t)&kNoTxPayload, (uint64_t)&v85, 0);
              AppleBCMWLANCore::handleBusWakeReasonSyncCallBack(this, v31, (uint64_t)&v85);
              if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
              {
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v77 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  uint64_t v78 = this[1].OSObject::OSObjectInterface::__vftable;
                  if (v78) {
                    LODWORD(v78) = HIDWORD(v78[552].init);
                  }
                  CCLogStream::logAlert(v77, "[dk] %s@%d:Queried WiFi bus wakeup data, WiFiWakeType[0x%08x]\n", "powerOn", 39686, v78);
                }
              }
              IOFreeData();
            }
          }
          else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v49 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              CCLogStream::logAlert(v49, "[dk] %s@%d:Unable to process WiFi wake reason\n", "powerOn", 39690);
            }
          }
        }
        int v20 = this[1].OSObject::OSObjectInterface::__vftable;
      }
    }
    BYTE5(v20[551].free) = 0;
    BYTE6(this[1].OSObject::OSObjectInterface::__vftable[551].free) = 0;
    LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[552].init) = 0;
    AppleBCMWLANCore::setWiFiWakeType((AppleBCMWLANCore *)this, 0);
    if (IO80211BssManager::isAssociated((IO80211BssManager *)this[1].OSObject::OSObjectInterface::__vftable[340].init))
    {
      int v81 = -1431655766;
      *(void *)&long long v85 = this;
      *((void *)&v85 + 1) = AppleBCMWLANCore::getRssiAsyncCallback;
      *(void *)&long long v86 = 0;
      uint64_t v32 = (AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free;
      v80[0] = (OSObject *)&v81;
      v80[1] = (OSObject *)4;
      int v79 = 262148;
      if (AppleBCMWLANCommander::sendIOCtlGet(v32, 127, (uint64_t)v80, (unsigned __int16 *)&v79, (uint64_t)&v85, 0))
      {
        if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
        {
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (CCLogStream::shouldLog())
          {
            int v68 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            CCLogStream::logAlert(v68, "[dk] %s@%d:%u Error: Unable to get the rssi from firmware using WLC_GET_RSSI\n", "powerOn", 39712, 39712);
          }
        }
      }
    }
    if (IO80211BssManager::isAssociated((IO80211BssManager *)this[1].OSObject::OSObjectInterface::__vftable[340].init)) {
      AppleBCMWLANCore::enableTxQueues((AppleBCMWLANCore *)this);
    }
    BOOL v33 = this[1].OSObject::OSObjectInterface::__vftable;
    if (v33[707].init || v33[1862].free)
    {
      AppleBCMWLANCore::addEventBit((AppleBCMWLANCore *)this, 0x2Fu);
      uint64_t v7 = AppleBCMWLANCore::writeEventBitField((AppleBCMWLANCore *)this);
      if (v7)
      {
        if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
        {
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (CCLogStream::shouldLog())
          {
            int v63 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            __int16 v64 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v7);
            CCLogStream::logAlert(v63, "[dk] %s@%d: Failed to set event WLC_E_COUNTRY_CODE_CHANGED : %s\n", "powerOn", 39739, v64);
          }
        }
      }
      AppleBCMWLANCore::updateCurrentFWCountryCode((AppleBCMWLANCore *)this);
      uint64_t v34 = this[1].OSObject::OSObjectInterface::__vftable;
      if (BYTE4(v34[649].init))
      {
        int v35 = HIDWORD(v34[1231].free);
        if (v35 == 4 || v35 == 1)
        {
          uint64_t v36 = (AppleBCMWLANProximityInterface *)v34[707].init;
          if (v36)
          {
            uint64_t v7 = AppleBCMWLANProximityInterface::bringupLink(v36);
            if (v7)
            {
              if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
              {
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if (CCLogStream::shouldLog())
                {
                  __int16 v70 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  int v71 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v7);
                  CCLogStream::logAlert(v70, "[dk] %s@%d: Failed to resume AWDL link: %s\n", "powerOn", 39749, v71);
                }
              }
            }
          }
          uint64_t v37 = (AppleBCMWLANNANInterface *)this[1].OSObject::OSObjectInterface::__vftable[1862].free;
          if (v37)
          {
            uint64_t v7 = AppleBCMWLANNANInterface::bringupLink(v37);
            if (v7)
            {
              if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
              {
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if (CCLogStream::shouldLog())
                {
                  __int16 v72 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  int v73 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v7);
                  CCLogStream::logAlert(v72, "[dk] %s@%d: Failed to resume NAN link: %s\n", "powerOn", 39757, v73);
                }
              }
            }
            uint64_t v38 = (AppleBCMWLANNANDataInterface *)this[1].OSObject::OSObjectInterface::__vftable[1863].init;
            if (v38)
            {
              uint64_t v7 = AppleBCMWLANNANDataInterface::bringupLink(v38);
              if (v7)
              {
                if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                {
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  if (CCLogStream::shouldLog())
                  {
                    uint64_t v75 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    uint64_t v76 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v7);
                    CCLogStream::logAlert(v75, "[dk] %s@%d: Failed to resume NDI link: %s\n", "powerOn", 39762, v76);
                  }
                }
              }
            }
          }
        }
      }
    }
    if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 81))
    {
      uint64_t v7 = AppleBCMWLANCore::setEntropyForRNG((AppleBCMWLANCore *)this);
      if (v7)
      {
        if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
        {
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (CCLogStream::shouldLog())
          {
            int v69 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            CCLogStream::logAlert(v69, "[dk] %s@%d:Failed to set RNG seed value\n", "powerOn", 39773);
          }
        }
      }
      (*(void (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[393].init
                                                                            + 64))(this[1].OSObject::OSObjectInterface::__vftable[393].init);
      (*(void (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden), uint64_t))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[393].init
                                                                                     + 120))(this[1].OSObject::OSObjectInterface::__vftable[393].init, 720000);
    }
    long long v85 = 0u;
    long long v86 = 0u;
    uint64_t v96 = 0;
    long long v94 = 0u;
    long long v95 = 0u;
    long long v92 = 0u;
    long long v93 = 0u;
    long long v90 = 0u;
    long long v91 = 0u;
    long long v88 = 0u;
    long long v89 = 0u;
    long long v87 = 0u;
    LODWORD(v85) = 3;
    DWORD2(v85) = 1;
    LODWORD(v86) = -528345085;
    unsigned int v39 = this[1].OSObject::OSObjectInterface::__vftable;
    if (v39[706].free)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          int v62 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v62, "[dk] %s@%d: posting APPLE80211_M_DRIVER_AVAILABLE, available[%u] reason[0x%08x] sub_reason[0x%08x] minor_reason[0x%08x]\n", "powerOn", 39783, DWORD2(v85), v86, DWORD1(v86), DWORD2(v86));
        }
      }
      IO80211Controller::postMessage((IO80211Controller *)this, (IO80211SkywalkInterface *)this[1].OSObject::OSObjectInterface::__vftable[706].free, 0x37u, &v85, 0xB8uLL, 1);
      unsigned int v39 = this[1].OSObject::OSObjectInterface::__vftable;
    }
    BOOL v40 = (IO80211SkywalkInterface *)v39[707].init;
    if (v40) {
      IO80211Controller::postMessage((IO80211Controller *)this, v40, 0x37u, &v85, 0xB8uLL, 1);
    }
    mach_continuous_time();
    absolutetime_to_nanoseconds();
    BOOL v41 = this[1].OSObject::OSObjectInterface::__vftable;
    if ((v84 / 0xF4240 - (unint64_t)v41[1228].init) >> 4 <= 0x752)
    {
      AppleBCMWLANCore::sendTxPowerCapValueToFirmware((uint64_t)this, (int)v41[1227].init, HIDWORD(v41[1226].free));
      BOOL v41 = this[1].OSObject::OSObjectInterface::__vftable;
    }
    atomic_fetch_and((atomic_uint *volatile)((char *)&v41[649].init + 4), 0xEFFFFFFF);
    BOOL v42 = this[1].OSObject::OSObjectInterface::__vftable;
    if ((HIDWORD(v42[649].init) & 0x8080) == 0x8000)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          __int16 v66 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v66, "[dk] %s@%d:WD Failed while in powerOn. Save me!\n", "powerOn", 39809);
        }
      }
      int v43 = this[1].OSObject::OSObjectInterface::__vftable;
      unsigned int v44 = HIDWORD(v43[337].init);
      if (v44 > 4)
      {
LABEL_124:
        AppleBCMWLANCore::watchdogFailed((AppleBCMWLANCore *)this);
        goto LABEL_125;
      }
      HIDWORD(v43[337].init) = v44 + 1;
      AppleBCMWLANCore::watchdog((AppleBCMWLANCore *)this, 0);
LABEL_125:
      uint64_t v7 = 0;
      goto LABEL_126;
    }
    if (HIDWORD(v42[1231].free) == 1)
    {
      uint64_t v46 = (char *)&v42[1134].free + 1;
      if (v46[1])
      {
        if (!*v46) {
          AppleBCMWLANCore::configureMonitorModeToFW((AppleBCMWLANCore *)this, 1);
        }
      }
    }
    AppleBCMWLANCore::setSPMICommonConfig((AppleBCMWLANCore *)this, 1);
    uint64_t v48 = (unint64_t *)AppleBCMWLANUtil::get_mach_continuous_nanoseconds(0, v47);
    AppleBCMWLANUtil::AutoreleasedTimeTrace::recordTraceWithTimestamp(&v82, (unint64_t *)((char *)v48 - (char *)mach_continuous_nanoseconds), 65553, 39830, "%s: %6u", "IOReturn AppleBCMWLANCore::powerOn()", 39830);
    AppleBCMWLANUtil::AutoreleasedTimeTrace::recordTraceWithTimestamp(&v82, v48, 65553, 39831, "%s: %6u", "IOReturn AppleBCMWLANCore::powerOn()", 39831);
    AppleBCMWLANUtil::AutoreleasedTimeTrace::dumpToLog((AppleBCMWLANUtil::AutoreleasedTimeTrace *)&v82, 0, 0);
  }
LABEL_126:
  if (v82) {
    (*(void (**)(AppleBCMWLANTimeTrace *))(*(void *)v82 + 16))(v82);
  }
  return v7;
}

uint64_t AppleBCMWLANCore::setPOWER(IO80211Controller *a1, uint64_t a2, unint64_t a3)
{
  long long v46 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  *(_OWORD *)unsigned int v39 = 0u;
  if (IO80211ThreadProcessInfo::getProcessName((IO80211ThreadProcessInfo *)v39, (char *)0x80, a3)) {
    IO80211Controller::getProcessName(a1, v39, 0x80uLL);
  }
  if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
  {
    (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      unint64_t v29 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      CCLogStream::logAlert(v29, "[dk] %s@%d: [%s]: Setting power state to %u. stateFlags(%lx)\n", "setPOWER", 34986, v39, *(_DWORD *)(a3 + 8), *(unsigned int *)(*((void *)a1 + 9) + 10388));
    }
  }
  uint64_t v5 = *((void *)a1 + 9);
  int v6 = *(_DWORD *)(v5 + 10388);
  if ((v6 & 1) == 0)
  {
    if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logNotice(v7, "[dk] %s@%d: IOKit power off. Discarding request.\n", "setPOWER", 34989);
      }
    }
    return 0;
  }
  if ((v6 & 0xA0) != 0)
  {
    if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v30 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logNotice(v30, "[dk] %s@%d:  driver not initialized or watchdog running; setPOWER request deferred\n",
          "setPOWER",
          34993);
      }
    }
    uint64_t v8 = 0;
    *(_DWORD *)(*((void *)a1 + 9) + 10400) = *(_DWORD *)(a3 + 8);
    atomic_fetch_or((atomic_uint *volatile)(*((void *)a1 + 9) + 10388), 0x1000u);
  }
  else
  {
    if (*(_DWORD *)(v5 + 19708) == *(_DWORD *)(a3 + 8)) {
      return 0;
    }
    unint64_t v37 = 180;
    unint64_t v38 = 0;
    char v36 = 0;
    IOParseBootArgNumber("wlan.debug.setpower-off.trap", &v36, 1);
    IOParseBootArgNumber("wlan.debug.setpower-off.trap.boot-seconds", &v37, 8);
    mach_continuous_time();
    absolutetime_to_nanoseconds();
    if (v37 >= v38 / 0x3B9ACA00)
    {
      uint64_t v10 = *((void *)a1 + 9);
    }
    else
    {
      uint64_t v10 = *((void *)a1 + 9);
      if (!*(_DWORD *)(a3 + 8) && v36 && *(void *)(v10 + 5400))
      {
        *(_DWORD *)(v10 + 19708) = 0;
        if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v31 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logEmergency(v31, "[dk] %s@%d: Forced host trapping firmware\n", "setPOWER", 35018);
          }
        }
        (*(void (**)(void, void))(**(void **)(*((void *)a1 + 9) + 5400) + 216))(*(void *)(*((void *)a1 + 9) + 5400), 0);
        (*(void (**)(void, uint64_t))(**(void **)(*((void *)a1 + 9) + 5400) + 200))(*(void *)(*((void *)a1 + 9) + 5400), 35021);
        return 0;
      }
    }
    atomic_fetch_or((atomic_uint *volatile)(v10 + 10388), 0x1000u);
    uint64_t v11 = *((void *)a1 + 9);
    if ((*(unsigned char *)(v11 + 10389) & 0x10) != 0)
    {
      *(_DWORD *)(v11 + 10400) = *(_DWORD *)(a3 + 8);
      uint64_t v8 = AppleBCMWLANCore::handlePowerStateChange((IOService *)a1, *(_DWORD *)(*((void *)a1 + 9) + 10400));
      uint64_t v11 = *((void *)a1 + 9);
    }
    else
    {
      uint64_t v8 = 0;
    }
    atomic_fetch_and((atomic_uint *volatile)(v11 + 10388), 0xFFFFEFFF);
    uint64_t v12 = *((void *)a1 + 9);
    int v13 = *(AppleBCMWLANProximityInterface **)(v12 + 11312);
    if (v13)
    {
      if (*(unsigned char *)(v12 + 10388))
      {
        int v14 = *(_DWORD *)(v12 + 19708);
        if (v14 == 4 || v14 == 1)
        {
          uint64_t v15 = AppleBCMWLANProximityInterface::bringupLink(v13);
          if (v15)
          {
            uint64_t v16 = v15;
            if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
            {
              (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
              if (CCLogStream::shouldLog())
              {
                uint64_t v32 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                BOOL v33 = (const char *)(*(uint64_t (**)(IO80211Controller *, uint64_t))(*(void *)a1 + 112))(a1, v16);
                CCLogStream::logAlert(v32, "[dk] %s@%d: Failed to resume-poweron AWDL link: %s\n", "setPOWER", 35040, v33);
              }
            }
          }
        }
      }
    }
    uint64_t v17 = *((void *)a1 + 9);
    long long v18 = *(AppleBCMWLANNANInterface **)(v17 + 29800);
    if (v18)
    {
      if (*(unsigned char *)(v17 + 10388))
      {
        int v19 = *(_DWORD *)(v17 + 19708);
        if (v19 == 4 || v19 == 1)
        {
          uint64_t v20 = AppleBCMWLANNANInterface::bringupLink(v18);
          if (v20)
          {
            uint64_t v21 = v20;
            if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
            {
              (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
              if (CCLogStream::shouldLog())
              {
                uint64_t v34 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                int v35 = (const char *)(*(uint64_t (**)(IO80211Controller *, uint64_t))(*(void *)a1 + 112))(a1, v21);
                CCLogStream::logAlert(v34, "[dk] %s@%d: Failed to resume-poweron NAN link: %s\n", "setPOWER", 35048, v35);
              }
            }
          }
        }
      }
    }
    uint64_t v22 = *((void *)a1 + 9);
    uint64_t v23 = *(AppleBCMWLANNANDataInterface **)(v22 + 29808);
    if (v23)
    {
      if (*(unsigned char *)(v22 + 10388))
      {
        int v24 = *(_DWORD *)(v22 + 19708);
        if (v24 == 4 || v24 == 1)
        {
          uint64_t v25 = AppleBCMWLANNANDataInterface::bringupLink(v23);
          if (v25)
          {
            uint64_t v26 = v25;
            if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
            {
              (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
              if (CCLogStream::shouldLog())
              {
                uint64_t v27 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
                uint64_t v28 = (const char *)(*(uint64_t (**)(IO80211Controller *, uint64_t))(*(void *)a1 + 112))(a1, v26);
                CCLogStream::logAlert(v27, "[dk] %s@%d: Failed to resume-poweron NDI link: %s\n", "setPOWER", 35055, v28);
              }
            }
          }
        }
      }
    }
  }
  return v8;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setPOWER(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return AppleBCMWLANCore::setPOWER((IO80211Controller *)(a1 - 48), a2, a3);
}

uint64_t AppleBCMWLANCore::setCIPHER_KEY(IO80211Controller *a1, uint64_t a2, unint64_t a3)
{
  if (*(_DWORD *)(a2 + 8))
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    *(_OWORD *)uint64_t v8 = 0u;
    long long v9 = 0u;
    if (IO80211ThreadProcessInfo::getProcessName((IO80211ThreadProcessInfo *)v8, (char *)0x80, a3)) {
      IO80211Controller::getProcessName(a1, v8, 0x80uLL);
    }
    if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v6 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        uint64_t v7 = (const char *)ciphertype2str(*(_DWORD *)(a2 + 8));
        CCLogStream::logNotice(v6, "[dk] %s@%d: [%s]: type = %s, index = %u, flags = 0x%X, key length = %u, key rsc length = %u\n", "setCIPHER_KEY", 35071, v8, v7, *(unsigned __int16 *)(a2 + 14), *(unsigned __int16 *)(a2 + 12), *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 80));
      }
    }
  }
  return AppleBCMWLANJoinAdapter::setKey(*(AppleBCMWLANJoinAdapter **)(*((void *)a1 + 9) + 5424), (_DWORD *)a2, 1, 0, 0);
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setCIPHER_KEY(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return AppleBCMWLANCore::setCIPHER_KEY((IO80211Controller *)(a1 - 64), a2, a3);
}

uint64_t AppleBCMWLANCore::setDISASSOCIATE(IO80211Controller *a1, uint64_t a2, unint64_t a3)
{
  if (a2) {
    int v5 = *(_DWORD *)(a2 + 4);
  }
  else {
    int v5 = 0;
  }
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  *(_OWORD *)uint64_t v8 = 0u;
  long long v9 = 0u;
  if (IO80211ThreadProcessInfo::getProcessName((IO80211ThreadProcessInfo *)v8, (char *)0x80, a3)) {
    IO80211Controller::getProcessName(a1, v8, 0x80uLL);
  }
  if (a2 && (*(unsigned char *)(*((void *)a1 + 9) + 10385) & 4) != 0) {
    return 102;
  }
  if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
  {
    (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      CCLogStream::logAlert(v7, "[dk] %s@%d: procName['%s']: Disassociating, reason[%u]\n", "setDISASSOCIATE", 35098, v8, v5);
    }
  }
  AppleBCMWLANNetAdapter::sendInternalLinkDownInd(*(AppleBCMWLANNetAdapter **)(*((void *)a1 + 9) + 5600));
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setDISASSOCIATE(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return AppleBCMWLANCore::setDISASSOCIATE((IO80211Controller *)(a1 - 64), a2, a3);
}

uint64_t AppleBCMWLANCore::setWCL_SET_ROAM_LOCK(void *a1, unsigned char *a2)
{
  if (a2)
  {
    uint64_t v3 = *(AppleBCMWLANRoamAdapter **)(a1[9] + 5576);
    unsigned int v4 = *a2 != 0;
    return AppleBCMWLANRoamAdapter::setRoamLock(v3, v4);
  }
  else
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v6 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d:pSetRoamLock is null\n", "setWCL_SET_ROAM_LOCK", 35116);
      }
    }
    return 22;
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setWCL_SET_ROAM_LOCK(uint64_t a1, unsigned char *a2)
{
  return AppleBCMWLANCore::setWCL_SET_ROAM_LOCK((void *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::setWCL_LEAVE_NETWORK(uint64_t a1, uint64_t a2)
{
  if (a2) {
    uint64_t v3 = AppleBCMWLANNetAdapter::leaveNetworkRequest(*(AppleBCMWLANCore ****)(*(void *)(a1 + 72) + 5600), a2);
  }
  else {
    uint64_t v3 = 22;
  }
  if (AppleBCMWLANCommander::isSleeping(*(AppleBCMWLANCommander **)(*(void *)(a1 + 72) + 5416)))
  {
    uint64_t v4 = *(void *)(a1 + 72);
    if (*(_DWORD *)(v4 + 19708))
    {
      if ((*(unsigned char *)(v4 + 10388) & 0x80) != 0) {
        return v3;
      }
      else {
        return 3766622214;
      }
    }
  }
  return v3;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setWCL_LEAVE_NETWORK(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setWCL_LEAVE_NETWORK(a1 - 64, a2);
}

uint64_t AppleBCMWLANCore::setPRIVATE_MAC(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 22;
  }
  int v4 = *(_DWORD *)(a2 + 12);
  if (v4) {
    AppleBCMWLANBGScanAdapter::configureBGScanPrivateMacTimeout(*(void *)(*(void *)(a1 + 72) + 5504), v4);
  }
  if (*(_DWORD *)(a2 + 16)) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = *(unsigned __int16 *)(a2 + 20) == 0;
  }
  if (!v5) {
    AppleBCMWLANBGScanAdapter::configureBGScanPrivateMac(*(void *)(*(void *)(a1 + 72) + 5504), (unsigned __int8 *)(a2 + 16));
  }
  int v6 = *(AppleBCMWLANBGScanAdapter **)(*(void *)(a1 + 72) + 5504);
  if (*(_DWORD *)(a2 + 4)) {
    AppleBCMWLANBGScanAdapter::enablePrivateMACForScans(v6);
  }
  else {
    AppleBCMWLANBGScanAdapter::disablePrivateMACForScans(v6);
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setPRIVATE_MAC(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setPRIVATE_MAC(a1 - 64, a2);
}

uint64_t AppleBCMWLANCore::setIsInfraOn2G(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)(this + 72) + 208) = a2;
  return this;
}

uint64_t AppleBCMWLANCore::resetCumulativePkts(uint64_t this)
{
  uint64_t v1 = -32;
  do
  {
    *(void *)(*(void *)(this + 72) + v1 + 18216) = 0;
    *(void *)(*(void *)(this + 72) + v1 + 18248) = 0;
    v1 += 8;
  }
  while (v1);
  *(_DWORD *)(*(void *)(this + 72) + 18252) = 0;
  return this;
}

uint64_t AppleBCMWLANCore::isCachedEventBitFieldSet(AppleBCMWLANCore *this, unsigned int a2)
{
  uint64_t v3 = *(IOLock **)(*((void *)this + 9) + 1200);
  if (!v3) {
    return 0;
  }
  IOLockLock(v3);
  uint64_t v5 = *((void *)this + 9);
  uint64_t v6 = (*(unsigned __int8 *)(v5 + ((unint64_t)a2 >> 3) + 1139) >> (a2 & 7)) & 1;
  IOLockUnlock(*(IOLock **)(v5 + 1200));
  return v6;
}

void AppleBCMWLANCore::addEventBit(AppleBCMWLANCore *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 9);
  uint64_t v3 = *(IOLock **)(v2 + 1200);
  if (v3)
  {
    char v4 = a2;
    uint64_t v5 = v2 + ((unint64_t)a2 >> 3);
    IOLockLock(*(IOLock **)(v2 + 1200));
    *(unsigned char *)(v5 + 1112) |= 1 << (v4 & 7);
    IOLockUnlock(v3);
  }
}

void AppleBCMWLANCore::removeEventBit(AppleBCMWLANCore *this, unsigned int a2)
{
  char v2 = a2;
  uint64_t v3 = *((void *)this + 9);
  char v4 = *(IOLock **)(v3 + 1200);
  uint64_t v5 = v3 + ((unint64_t)a2 >> 3);
  IOLockLock(v4);
  *(unsigned char *)(v5 + 1112) &= ~(1 << (v2 & 7));
  IOLockUnlock(v4);
}

uint64_t AppleBCMWLANCore::isEventBitSet(AppleBCMWLANCore *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 9);
  uint64_t v3 = *(IOLock **)(v2 + 1200);
  if (!v3) {
    return 0;
  }
  char v4 = a2;
  uint64_t v5 = v2 + ((unint64_t)a2 >> 3);
  IOLockLock(*(IOLock **)(v2 + 1200));
  uint64_t v6 = (*(unsigned __int8 *)(v5 + 1112) >> (v4 & 7)) & 1;
  IOLockUnlock(v3);
  return v6;
}

uint64_t AppleBCMWLANCore::writeEventBitField(AppleBCMWLANCore *this)
{
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 34))
  {
    uint64_t v2 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    uint64_t v3 = "event_msgs_ext";
  }
  else
  {
    uint64_t v4 = *((void *)this + 9);
    uint64_t v5 = 1128;
    while (!*(unsigned char *)(v4 + v5))
    {
      if (++v5 == 1139) {
        goto LABEL_8;
      }
    }
    CCFaultReporter::reportFault(*(CCFaultReporter **)(v4 + 5544), 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0x8B3Fu, "writeEventBitField", 0, -469793499, 0);
    uint64_t v4 = *((void *)this + 9);
LABEL_8:
    uint64_t v2 = *(AppleBCMWLANCommander **)(v4 + 5416);
    uint64_t v3 = "event_msgs";
  }
  uint64_t v6 = AppleBCMWLANCommander::sendIOVarSet(v2, (uint64_t)v3);
  if (v6)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        long long v9 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
        CCLogStream::logAlert(v8, "[dk] %s@%d: Error: Unable to setup event handling: %s\n", "writeEventBitField", 35657, v9);
      }
    }
  }
  return v6;
}

uint64_t AppleBCMWLANCore::setEventBit(AppleBCMWLANCore *this, unsigned int a2)
{
  AppleBCMWLANCore::addEventBit(this, a2);
  return AppleBCMWLANCore::writeEventBitField(this);
}

uint64_t AppleBCMWLANCore::clearEventBit(AppleBCMWLANCore *this, unsigned int a2)
{
  AppleBCMWLANCore::removeEventBit(this, a2);
  return AppleBCMWLANCore::writeEventBitField(this);
}

uint64_t AppleBCMWLANCore::dumpEventBitField(AppleBCMWLANCore *this, char *a2)
{
  uint64_t v3 = (void *)(*((void *)this + 9) + 1112);
  (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  uint64_t v4 = IO80211HexdumpIfKernel();
  *(_OWORD *)int v19 = 0uLL;
  *(_DWORD *)&v19[23] = 0;
  *(void *)&char v19[16] = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  memset(&v16[1], 0, 32);
  v16[0] = 1078198273;
  v15[0] = v16;
  v15[1] = 0x4400440044;
  v14[0] = v16;
  v14[1] = 68;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"event_msgs_ext", (uint64_t)v14, (uint64_t)v15, 0);
  if (v5)
  {
    uint64_t v6 = v5;
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
    uint64_t v4 = IO80211Print() + v4;
  }
  else
  {
    *(_OWORD *)int v19 = *(_OWORD *)&v16[1];
    *(_OWORD *)&v19[11] = *(_OWORD *)((char *)&v16[3] + 3);
  }
  if (*(void *)v19 != *v3
    || *(void *)&v19[8] != v3[1]
    || *(void *)&v19[16] != v3[2]
    || *(void *)&v19[19] != *(void *)((char *)v3 + 19))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    unsigned int v10 = 0;
    int v11 = IO80211HexdumpIfKernel() + v4;
    do
    {
      if ((v19[(unint64_t)v10 >> 3] >> (v10 & 7)))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        convertEventToString(v10, 0, 0);
        v11 += IO80211Print();
      }
      ++v10;
    }
    while (v10 != 215);
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    uint64_t v4 = v11 + IO80211HexdumpIfKernel();
  }
  for (unsigned int i = 0; i != 215; ++i)
  {
    if ((v19[(unint64_t)i >> 3] >> (i & 7)))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      convertEventToString(i, 0, 0);
      uint64_t v4 = v4 + IO80211Print();
    }
  }
  return v4;
}

uint64_t AppleBCMWLANCore::setExtendedEventBit(AppleBCMWLANCore *this, unsigned int a2)
{
  char v12 = 0;
  memset(v11, 0, sizeof(v11));
  __int16 v9 = 257;
  char v10 = (a2 >> 3) + 5;
  *((unsigned char *)v11 + (a2 >> 3) + 1) = 1 << (a2 & 7);
  uint64_t v3 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  v8[0] = &v9;
  v8[1] = 68;
  uint64_t v4 = AppleBCMWLANCommander::runIOVarSet(v3, (uint64_t)"event_msgs_ext", (uint64_t)v8, 0, 0);
  if (v4)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v7 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v4);
        CCLogStream::logAlert(v6, "[dk] %s@%d:Error: Unable to set event_mgs_ext, %s\n", "setExtendedEventBit", 35740, v7);
      }
    }
  }
  return v4;
}

uint64_t AppleBCMWLANCore::resetExtendedEventBit(AppleBCMWLANCore *this, unsigned int a2)
{
  char v13 = -1;
  *(void *)&long long v3 = -1;
  *((void *)&v3 + 1) = -1;
  v12[3] = v3;
  void v12[2] = v3;
  v12[1] = v3;
  v12[0] = v3;
  __int16 v10 = 513;
  char v11 = (a2 >> 3) + 5;
  *((unsigned char *)v12 + (a2 >> 3) + 1) = ~(1 << (a2 & 7));
  uint64_t v4 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  v9[0] = &v10;
  v9[1] = 68;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"event_msgs_ext", (uint64_t)v9, 0, 0);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
        CCLogStream::logAlert(v7, "[dk] %s@%d:Error: Unable to set event_mgs_ext, %s\n", "resetExtendedEventBit", 35763, v8);
      }
    }
  }
  return v5;
}

uint64_t AppleBCMWLANCore::setRESET_CHIP(IO80211Controller *a1, uint64_t a2)
{
  long long v30 = xmmword_1003705E0;
  long long v31 = unk_1003705F0;
  long long v32 = xmmword_100370600;
  long long v33 = unk_100370610;
  *(_OWORD *)__str = *(_OWORD *)"IOCTL trigger";
  long long v27 = *(_OWORD *)&algn_1003705AE[2];
  long long v28 = xmmword_1003705C0;
  long long v29 = unk_1003705D0;
  int v24 = 0;
  if (!a2) {
    return 22;
  }
  uint64_t v3 = a2 + 4;
  if (*(unsigned char *)(a2 + 4)) {
    snprintf(__str, 0x80uLL, "%s", (const char *)(a2 + 4));
  }
  snprintf(v25, 0x10uLL, "%s", __str);
  BOOL v4 = *(void *)v3 == 0x6C536E4F70617254 && *(void *)(v3 + 6) == 0x535044776F6C53;
  int v5 = !v4;
  if (v4)
  {
    char v13 = 0;
    int v14 = 0;
    uint64_t v17 = 1;
LABEL_46:
    BOOL v16 = 1;
    goto LABEL_47;
  }
  if (*(void *)v3 == 0x75516E4F70617254 && *(void *)(v3 + 7) == 0x5350446B636975)
  {
    int v14 = 0;
    uint64_t v17 = 5;
    char v13 = 1;
    goto LABEL_46;
  }
  if (*(void *)v3 == 0x4E446E4F70617254
    && *(void *)(v3 + 8) == 0x6D6F74706D795353
    && *(_WORD *)(v3 + 16) == 115)
  {
    char v13 = 0;
    int v14 = 0;
    BOOL v16 = 1;
    uint64_t v17 = 6;
  }
  else if (*(void *)v3 == 0x6F72724574666F53 {
         && *(void *)(v3 + 8) == 0x7265676769725472
  }
         && *(void *)(v3 + 16) == 0x6552706968436465
         && *(_DWORD *)(v3 + 24) == 7628147)
  {
    char v13 = 0;
    uint64_t v17 = 0;
    BOOL v16 = 0;
    int v14 = 1;
  }
  else if (*(void *)v3 == 0x6946695772657355 && *(_DWORD *)(v3 + 8) == 6710863)
  {
    if (!AppleBCMWLAN_isDevFusedOrCSRInternal()) {
      return 102;
    }
    if ((AppleBCMWLANCore::setRESET_CHIP(apple80211_reset_command *)::checked & 1) == 0)
    {
      IOParseBootArgNumber("wifioff.wd", &AppleBCMWLANCore::setRESET_CHIP(apple80211_reset_command *)::allowWD, 4);
      AppleBCMWLANCore::setRESET_CHIP(apple80211_reset_command *)::checked = 1;
    }
    if (!AppleBCMWLANCore::setRESET_CHIP(apple80211_reset_command *)::allowWD) {
      return 102;
    }
    char v13 = 0;
    int v14 = 0;
    BOOL v16 = 1;
    uint64_t v17 = 7;
  }
  else
  {
    char v13 = 0;
    int v14 = 0;
    BOOL v16 = *(void *)v3 == 0x5772656767697254 && *(void *)(v3 + 8) == 0x676F6468637461;
    uint64_t v17 = (8 * v16);
  }
LABEL_47:
  int v19 = *(IO80211SkywalkInterface **)(*((void *)a1 + 9) + 11304);
  if (v19)
  {
    int v24 = 3;
    char v20 = v13 ^ 1;
    if (!v5) {
      char v20 = 0;
    }
    if ((v20 & 1) == 0) {
      IO80211Controller::postMessage(a1, v19, 0xB8u, &v24, 4uLL, 1);
    }
  }
  if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
  {
    (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v23 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      CCLogStream::logAlert(v23, "[dk] %s@%d:isTrap=%u, isUserspaceReset=%u, trap reason %u\n", "setRESET_CHIP", 35853, v16, v14, v17);
    }
  }
  uint64_t v21 = *((void *)a1 + 9);
  if (v16)
  {
    (*(void (**)(void, uint64_t))(**(void **)(v21 + 5400) + 216))(*(void *)(v21 + 5400), v17);
    (*(void (**)(void, uint64_t))(**(void **)(*((void *)a1 + 9) + 5400) + 200))(*(void *)(*((void *)a1 + 9) + 5400), 35857);
    return 0;
  }
  if (!v14)
  {
    CCFaultReporter::reportFault(*(CCFaultReporter **)(v21 + 5544), 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0x8C18u, "setRESET_CHIP", 0, -469793533, "msg=%s,call=setRESET_CHIP", __str);
    return 0;
  }
  uint64_t v22 = *(AppleBCMWLANCore ****)(v21 + 14176);
  if (v22) {
    return AppleBCMWLANCoreDbg::dbgTriggerWatchdog(v22, (char *)v3);
  }
  else {
    return 19;
  }
}

uint64_t AppleBCMWLANCore::setCRASH(uint64_t a1, uint64_t a2)
{
  if (!a2 || (*(_DWORD *)(a2 + 4) - 9) < 0xFFFFFFF8) {
    return 22;
  }
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v6 = *(AppleBCMWLANBusInterface **)(v5 + 5400);
  if (v6)
  {
    AppleBCMWLANBusInterface::sendBootCheckPointToCoreAnalytics(v6, 0, 0);
    uint64_t v5 = *(void *)(a1 + 72);
  }
  uint64_t v7 = *(void *)(v5 + 14176);
  if (!v7) {
    return 19;
  }
  int v8 = *(_DWORD *)(a2 + 4);
  return AppleBCMWLANCoreDbg::dbgTriggerCrash(v7, v8);
}

uint64_t AppleBCMWLANCore::setCHANNEL(void *a1, uint64_t a2)
{
  uint64_t v2 = 3758097090;
  unsigned __int16 v18 = 0;
  if (!a2) {
    return 3758097084;
  }
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (v5 < 0x100)
  {
    *(_OWORD *)(a1[9] + 35312) = *(_OWORD *)a2;
    uint64_t ChanSpec = AppleBCMWLANCore::getChanSpec(a1, a2 + 4, &v18);
    int v19 = v18;
    if (ChanSpec || !v18)
    {
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          __int16 v10 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          (*(void (**)(void *, uint64_t))(*a1 + 112))(a1, ChanSpec);
          CCLogStream::logAlert(v10, "[dk] %s@%d: Failed to set channel %d/%s/%s flags[0x%08x] chanspecs 0x%x, failed to convert to chanspec (error=%s)  \n", "setCHANNEL", 35912);
        }
      }
    }
    else
    {
      uint64_t v7 = *(AppleBCMWLANCommander **)(a1[9] + 5416);
      v17[0] = &v19;
      v17[1] = 4;
      uint64_t v2 = AppleBCMWLANCommander::runIOVarSet(v7, (uint64_t)"chanspec", (uint64_t)v17, 0, 0);
      uint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      if (v2)
      {
        if (v8)
        {
          (*(void (**)(void *))(*a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            __int16 v9 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
            (*(void (**)(void *, uint64_t))(*a1 + 112))(a1, v2);
            CCLogStream::logAlert(v9, "[dk] %s@%d: Failed to set channel %d/%s/%s flags[0x%08x] chanspecs 0x%x, failed to set iovar (error=%s)  \n", "setCHANNEL", 35919);
          }
        }
      }
      else
      {
        if (v8)
        {
          (*(void (**)(void *))(*a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            char v13 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
            int v14 = *(_DWORD *)(a2 + 12);
            long long v15 = "5GHz";
            if ((v14 & 0x10) == 0) {
              long long v15 = "2GHz";
            }
            if ((v14 & 0x2000) != 0) {
              long long v15 = "6GHz";
            }
            if ((v14 & 0x800) != 0)
            {
              BOOL v16 = "160MHz";
            }
            else
            {
              BOOL v16 = "40MHz";
              if ((v14 & 4) == 0) {
                BOOL v16 = "20MHz";
              }
              if ((v14 & 0x400) != 0) {
                BOOL v16 = "80MHz";
              }
            }
            CCLogStream::logAlert(v13, "[dk] %s@%d: Setting channel %d/%s/%s flags[0x%08x] chanspecs 0x%x \n", "setCHANNEL", 35923, v5, v15, v16, *(_DWORD *)(a2 + 12), v19);
          }
        }
        return 0;
      }
    }
  }
  else
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        char v12 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v12, "[dk] %s@%d: Setting channel Failed to set chanspecs, channel %d is out range \n", "setCHANNEL", 35901, v5);
      }
    }
    return 22;
  }
  return v2;
}

uint64_t AppleBCMWLANCore::getChanSpec(void *a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v4 = *(unsigned int *)(a2 + 4);
  if ((v4 - 256) <= 0xFFFFFF00)
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        unsigned int v5 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:Warning Failed to parse requested channel, channel %d is out range \n");
      }
    }
    return 22;
  }
  int v7 = *(_DWORD *)(a2 + 8);
  if ((v7 & 2) != 0)
  {
    int v8 = 2;
  }
  else if ((v7 & 4) != 0)
  {
    int v8 = 3;
  }
  else if ((v7 & 0x400) != 0)
  {
    int v8 = 4;
  }
  else if ((v7 & 0x800) != 0)
  {
    int v8 = 5;
  }
  else if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    int v8 = 1;
    if (CCLogStream::shouldLog())
    {
      __int16 v9 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v9, "[dk] %s@%d:WARNING: failed to get parse requested BW, channel %d, flags 0x%x, bw is out of range \n", "getChanSpec", 47834, v4, v7);
    }
  }
  else
  {
    int v8 = 1;
  }
  LODWORD(v10) = *(_DWORD *)(a1[9] + 1048);
  if ((int)v10 >= v8) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = v10;
  }
  uint64_t v32 = v10;
  if ((v7 & 8) != 0) {
    goto LABEL_33;
  }
  if ((v7 & 0x10) == 0)
  {
    if ((v7 & 0x2000) != 0)
    {
      int v11 = 1;
      goto LABEL_34;
    }
    if ((v4 - 15) <= 0xB5)
    {
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v26 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logAlert(v26, "[dk] %s@%d:WARNING: band not specified, inferring 5GHz from channel number (%d), flags 0x%x \n", "getChanSpec", 47858, v4, v7);
        }
      }
      goto LABEL_27;
    }
    uint64_t v12 = (*(uint64_t (**)(void *))(*a1 + 1848))(a1);
    if (v4 > 0xE)
    {
      if (v12)
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v23 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logAlert(v23, "[dk] %s@%d:WARNING: band not specified and unable to infer based on channel number (%d), flags 0x%x \n");
        }
      }
      return 22;
    }
    if (v12)
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        long long v27 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v27, "[dk] %s@%d:WARNING: band not specified, inferring 2GHz from channel number (%d), flags 0x%x \n", "getChanSpec", 47863, v4, v7);
      }
    }
LABEL_33:
    int v11 = 0;
    goto LABEL_34;
  }
LABEL_27:
  int v11 = 3;
LABEL_34:
  uint64_t v13 = a1[9];
  uint64_t v14 = *(unsigned __int16 *)(v13 + 19772);
  if (!*(_WORD *)(v13 + 19772)) {
    goto LABEL_60;
  }
  long long v28 = a3;
  int v29 = v7;
  unsigned int v30 = 0;
  unsigned __int8 v31 = 0;
  unsigned __int16 v15 = 0;
  int v16 = 1;
  do
  {
    unsigned int AppleChannelSpec = AppleBCMWLANChanSpec::getAppleChannelSpec(*(int ***)(a1[9] + 17576), *(unsigned __int16 *)(a1[9] + 2 * v14 + 19772));
    unsigned __int8 PrimaryChannel = ChanSpecGetPrimaryChannel();
    if (v4 == ChanSpecGetPrimaryChannel())
    {
      int v19 = (AppleChannelSpec >> 11) & 7;
      BOOL v20 = v11 == (unsigned __int16)(AppleChannelSpec & 0xC000) >> 14 && v16 <= v19;
      if (v20 && (int)v32 >= v19)
      {
        unsigned __int16 v15 = *(_WORD *)(a1[9] + 2 * v14 + 19772);
        unsigned int v30 = AppleChannelSpec;
        unsigned __int8 v31 = PrimaryChannel;
        int v16 = (AppleChannelSpec >> 11) & 7;
      }
    }
    --v14;
  }
  while ((unint64_t)(v14 + 1) > 1);
  if (v16 < 2)
  {
LABEL_60:
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v24 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v24, "[dk] %s@%d:ERROR: failed to find chanspec, req(ch[%3u] bw[%u] band[%u] flags[0x%08x]) specTarget(ch[%3u], subch[%u], bw[%u], band[%u], primary[%3u]), supported(chanspec[0x%04x] bw[%u]) maxBW[%u]\n", "getChanSpec", 47906, v4, v32);
      }
    }
    return 22;
  }
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v25 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logNotice(v25, "[dk] %s@%d: req(ch[%3u] bw[%u] band[%u] flags[0x%08x]) specTarget(ch[%3u], subch[%u], bw[%u], band[%u], primary[%3u]), supported(chanspec[0x%04x] bw[%u]) maxBW[%u]\n", "getChanSpec", 47914, v4, v32, v11, v29, v30, (v30 >> 8) & 7, (v30 >> 11) & 7, (unsigned __int16)v30 >> 14, v31, v15, v16, *(_DWORD *)(a1[9] + 1048));
    }
  }
  uint64_t result = 0;
  *long long v28 = v15;
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setCHANNEL(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setCHANNEL((void *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::setAP_MODE(AppleBCMWLANCore *a1, uint64_t a2)
{
  if (!AppleBCMWLAN_isVerboseDebugLoggingAllowed()) {
    return 3758097095;
  }
  uint64_t result = AppleBCMWLANCore::featureFlagIsBitSet(a1, 63);
  if (result)
  {
    uint64_t result = 0;
    *(_DWORD *)(*((void *)a1 + 9) + 10384) = *(_DWORD *)(*((void *)a1 + 9) + 10384) & 0xFFFFFBFF | ((*(_DWORD *)(a2 + 4) == 2) << 10);
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setAP_MODE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setAP_MODE((AppleBCMWLANCore *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::setPOWERSAVE(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 4);
  if (v2 > 1) {
    return 102;
  }
  uint64_t result = 0;
  *(_DWORD *)(*(void *)(a1 + 72) + 6732) = v2;
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setPOWERSAVE(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 4);
  if (v2 > 1) {
    return 102;
  }
  uint64_t result = 0;
  *(_DWORD *)(*(void *)(a1 + 8) + 6732) = v2;
  return result;
}

uint64_t AppleBCMWLANCore::setDBG_GUARD_TIME_PARAMS(void *a1, uint64_t a2)
{
  v9[1] = -21846;
  v9[0] = *(_WORD *)(a2 + 4);
  int v10 = *(_DWORD *)(a2 + 8);
  uint64_t v3 = *(AppleBCMWLANCommander **)(a1[9] + 5416);
  v8[0] = v9;
  v8[1] = 8;
  uint64_t v4 = AppleBCMWLANCommander::runIOVarSet(v3, (uint64_t)"forced_pm", (uint64_t)v8, 0, 0);
  if (v4)
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        int v7 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 112))(a1, v4);
        CCLogStream::logCrit(v6, "[dk] %s@%d: Setting debug guard time params failed, error %s\n", "setDBG_GUARD_TIME_PARAMS", 36003, v7);
      }
    }
  }
  return v4;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setDBG_GUARD_TIME_PARAMS(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setDBG_GUARD_TIME_PARAMS((void *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::setLEAKY_AP_STATS_MODE(void *a1, uint64_t a2)
{
  int v11 = *(_DWORD *)(a2 + 4);
  uint64_t v3 = *(AppleBCMWLANCommander **)(a1[9] + 5416);
  if (!v3)
  {
    uint64_t v5 = 3758097084;
LABEL_8:
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v8 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        __int16 v9 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 112))(a1, v5);
        CCLogStream::logInfo(v8, "[dk] %s@%d: ERROR: Setting leaky_ap_stats, error %s\n", "setLEAKY_AP_STATS_MODE", 36023, v9);
      }
    }
    return v5;
  }
  v10[0] = &v11;
  v10[1] = 4;
  uint64_t v4 = AppleBCMWLANCommander::runIOVarSet(v3, (uint64_t)"leaky_ap_stats", (uint64_t)v10, 0, 0);
  uint64_t v5 = v4;
  if (v4 != -469794537 && v4 != 0) {
    goto LABEL_8;
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setLEAKY_AP_STATS_MODE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setLEAKY_AP_STATS_MODE((void *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::setTHERMAL_INDEX(AppleBCMWLANCore *a1, uint64_t a2)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      CCLogStream::logInfo(v13, "[dk] %s@%d:CLTM Index: %d\n", "setTHERMAL_INDEX", 36035, *(_DWORD *)(a2 + 4));
    }
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 59))
  {
    if ((*(_DWORD *)(a2 + 4) - 101) > 0xFFFFFF9B)
    {
      uint64_t v4 = 12;
      uint64_t v7 = IOMallocZeroData();
      if (v7)
      {
        uint64_t v8 = v7;
        *(void *)uint64_t v7 = 0x40000000C0001;
        *(_DWORD *)(v7 + 8) = *(_DWORD *)(a2 + 4);
        __int16 v9 = *(AppleBCMWLANCommander **)(*((void *)a1 + 9) + 5416);
        v16[0] = v8;
        v16[1] = 12;
        uint64_t v10 = AppleBCMWLANCommander::runIOVarSet(v9, (uint64_t)"tvpm", (uint64_t)v16, 0, 0);
        uint64_t v4 = v10;
        if (v10 == -469794537 || v10 == 0)
        {
          **((_DWORD **)a1 + 9) = *(_DWORD *)(a2 + 4);
        }
        else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            unsigned __int16 v15 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)a1 + 112))(a1, v4);
            CCLogStream::logInfo(v14, "[dk] %s@%d: Error: Unable to set CLTM Index: %s\n", "setTHERMAL_INDEX", 36063, v15);
          }
        }
        IOFreeData();
      }
    }
    else
    {
      uint64_t v4 = 3758097084;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logCrit(v5, "[dk] %s@%d:setTHERMAL_INDEX is called with an out-of-range value %d\n");
        }
      }
    }
  }
  else
  {
    uint64_t v4 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logCrit(v6, "[dk] %s@%d:TVPM capability is missing for this chipset/FW\n");
      }
    }
  }
  return v4;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setTHERMAL_INDEX(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setTHERMAL_INDEX((AppleBCMWLANCore *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::setPOWER_BUDGET(AppleBCMWLANCore *a1, uint64_t a2)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      CCLogStream::logInfo(v13, "[dk] %s@%d:PPM Index: %d\n", "setPOWER_BUDGET", 36077, *(_DWORD *)(a2 + 4));
    }
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 59))
  {
    if ((*(_DWORD *)(a2 + 4) - 101) > 0xFFFFFF9B)
    {
      uint64_t v4 = 12;
      uint64_t v7 = IOMallocZeroData();
      if (v7)
      {
        uint64_t v8 = v7;
        *(void *)uint64_t v7 = 0x40001000C0001;
        *(_DWORD *)(v7 + 8) = *(_DWORD *)(a2 + 4);
        __int16 v9 = *(AppleBCMWLANCommander **)(*((void *)a1 + 9) + 5416);
        v16[0] = v8;
        v16[1] = 12;
        uint64_t v10 = AppleBCMWLANCommander::runIOVarSet(v9, (uint64_t)"tvpm", (uint64_t)v16, 0, 0);
        uint64_t v4 = v10;
        if (v10 == -469794537 || v10 == 0)
        {
          *(_DWORD *)(*((void *)a1 + 9) + 4) = *(_DWORD *)(a2 + 4);
        }
        else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            unsigned __int16 v15 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)a1 + 112))(a1, v4);
            CCLogStream::logInfo(v14, "[dk] %s@%d: Error: Unable to set PPM Index: %s\n", "setPOWER_BUDGET", 36105, v15);
          }
        }
        IOFreeData();
      }
    }
    else
    {
      uint64_t v4 = 3758097084;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logCrit(v5, "[dk] %s@%d:setPOWER_BUDGET is called with an out-of-range value %d\n");
        }
      }
    }
  }
  else
  {
    uint64_t v4 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logCrit(v6, "[dk] %s@%d:TVPM capability is missing for this chipset/FW\n");
      }
    }
  }
  return v4;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setPOWER_BUDGET(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setPOWER_BUDGET((AppleBCMWLANCore *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::setTXPOWER(void *a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4) == 1)
  {
    unsigned int v3 = (unsigned __int16)*(_DWORD *)(a2 + 8);
    if (v3 >= 2)
    {
      if (v3 > 0x195C)
      {
        char v5 = -103;
      }
      else
      {
        char v5 = -103;
        unsigned int v6 = (unsigned __int16)*(_DWORD *)(a2 + 8);
        do
        {
          unsigned int v3 = 10 * v6;
          v5 -= 40;
          BOOL v7 = v6 >= 0x28A;
          v6 *= 10;
        }
        while (!v7);
      }
      uint64_t v8 = 0;
      int v9 = 6683;
      do
      {
        int v10 = nqdBm_to_mW_map[v8 + 1];
        int v11 = v10 - v9;
        if (v10 < v9) {
          ++v11;
        }
        if (v3 < v9 + (v11 >> 1)) {
          break;
        }
        ++v8;
        int v9 = v10;
      }
      while (v8 != 39);
      int v4 = (v8 + v5);
    }
    else
    {
      int v4 = 0;
    }
  }
  else
  {
    int v4 = 4 * *(_DWORD *)(a2 + 8);
  }
  unsigned int v18 = v4 | 0x80000000;
  uint64_t v12 = *(AppleBCMWLANCommander **)(a1[9] + 5416);
  v17[0] = &v18;
  v17[1] = 4;
  uint64_t v13 = AppleBCMWLANCommander::runIOVarSet(v12, (uint64_t)"qtxpower", (uint64_t)v17, 0, 0);
  if (v13)
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        unsigned __int16 v15 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        int v16 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 112))(a1, v13);
        CCLogStream::logCrit(v15, "[dk] %s@%d: qtxpower override 2 failed, error %s\n", "setTXPOWER", 36136, v16);
      }
    }
  }
  return v13;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setTXPOWER(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setTXPOWER((void *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::setUSB_HOST_NOTIFICATION(AppleBCMWLANCore *a1, _DWORD *a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 9) + 5400) + 368))(*(void *)(*((void *)a1 + 9) + 5400));
  BOOL v5 = v4 == 4399 || v4 == 4388;
  if (v5 && !AppleBCMWLANCore::featureFlagIsBitSet(a1, 112)) {
    return 0;
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      unsigned __int16 v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      CCLogStream::logCrit(v15, "[dk] %s@%d:%s seqNum %d pres %d chg %d\n", "setUSB_HOST_NOTIFICATION", 36151, "setUSB_HOST_NOTIFICATION", a2[1], a2[3], a2[2]);
    }
  }
  int v22 = a2[3];
  unsigned int v6 = *(AppleBCMWLANCommander **)(*((void *)a1 + 9) + 5416);
  BOOL v20 = &v22;
  uint64_t v21 = 4;
  uint64_t v7 = AppleBCMWLANCommander::runIOVarSet(v6, (uint64_t)"asym_mit_ext_usb", (uint64_t)&v20, 0, 0);
  if (v7)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        int v17 = a2[3];
        int v18 = a2[1];
        int v19 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)a1 + 112))(a1, v7);
        CCLogStream::logCrit(v16, "[dk] %s@%d:%s failed ioVarSet asym_mit_ext_usb %d seqNum %d. Error %s\n", "setUSB_HOST_NOTIFICATION", 36158, "setUSB_HOST_NOTIFICATION", v17, v18, v19);
      }
    }
  }
  if (a2[2] <= 1u)
  {
    int v22 = a2[2];
    uint64_t v8 = *(AppleBCMWLANCommander **)(*((void *)a1 + 9) + 5416);
    BOOL v20 = &v22;
    uint64_t v21 = 4;
    uint64_t v7 = AppleBCMWLANCommander::runIOVarSet(v8, (uint64_t)"asym_mit_ext_usb_chg", (uint64_t)&v20, 0, 0);
    if (v7)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          int v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          uint64_t v12 = a2 + 1;
          int v10 = a2[1];
          int v11 = v12[1];
          uint64_t v13 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)a1 + 112))(a1, v7);
          CCLogStream::logCrit(v9, "[dk] %s@%d:%s failed ioVarSet asym_mit_ext_usb_chg %d seqNum %d. Error %s\n", "setUSB_HOST_NOTIFICATION", 36167, "setUSB_HOST_NOTIFICATION", v11, v10, v13);
        }
      }
    }
  }
  return v7;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setUSB_HOST_NOTIFICATION(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANCore::setUSB_HOST_NOTIFICATION((AppleBCMWLANCore *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::setRATE(void *a1, uint64_t a2)
{
  int v20 = -1;
  int v18 = &v20;
  uint64_t v19 = 0x400040004;
  uint64_t v4 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(a1[9] + 5416), (uint64_t)"bg_rate", (uint64_t)&kNoTxPayload, (uint64_t)&v18, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v11 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        uint64_t v12 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 112))(a1, v5);
        CCLogStream::logCrit(v11, "[dk] %s@%d: bg_rate override 1 failed, error %s\n", "setRATE", 36185, v12);
      }
    }
  }
  int v20 = *(_DWORD *)(a2 + 8);
  unsigned int v6 = *(AppleBCMWLANCommander **)(a1[9] + 5416);
  v17[0] = &v20;
  v17[1] = 4;
  uint64_t v7 = AppleBCMWLANCommander::runIOVarSet(v6, (uint64_t)"bg_rate", (uint64_t)v17, 0, 0);
  if (v7)
  {
    uint64_t v8 = v7;
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        uint64_t v14 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 112))(a1, v8);
        CCLogStream::logCrit(v13, "[dk] %s@%d: bg_rate override 2 failed, error %s\n", "setRATE", 36194, v14);
      }
    }
  }
  int v18 = &v20;
  uint64_t v19 = 0x400040004;
  uint64_t v9 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(a1[9] + 5416), (uint64_t)"bg_rate", (uint64_t)&kNoTxPayload, (uint64_t)&v18, 0);
  if (v9)
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        unsigned __int16 v15 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        int v16 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 112))(a1, v9);
        CCLogStream::logCrit(v15, "[dk] %s@%d: bg_rate override 3 failed, error %s\n", "setRATE", 36201, v16);
      }
    }
  }
  return v9;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setRATE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setRATE((void *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::setRSN_IE()
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setRSN_IE()
{
  return 0;
}

uint64_t AppleBCMWLANCore::setRSN_XE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANJoinAdapter::setAssocRSNXE(*(AppleBCMWLANJoinAdapter **)(*(void *)(a1 + 72) + 5424), (const unsigned __int8 *)(a2 + 6), *(unsigned __int16 *)(a2 + 4));
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setRSN_XE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANJoinAdapter::setAssocRSNXE(*(AppleBCMWLANJoinAdapter **)(*(void *)(a1 + 8) + 5424), (const unsigned __int8 *)(a2 + 6), *(unsigned __int16 *)(a2 + 4));
}

uint64_t AppleBCMWLANCore::setWOW_TEST(AppleBCMWLANCore *a1, uint64_t a2)
{
  if ((*(_DWORD *)(a2 + 4) - 601) < 0xFFFFFDA8) {
    return 3758097090;
  }
  int v5 = 5;
  do
  {
    uint64_t result = AppleBCMWLANCore::configureWoWTestModeEntry(a1, *(_DWORD *)(a2 + 4));
    if (!result) {
      break;
    }
    --v5;
  }
  while (v5);
  return result;
}

uint64_t AppleBCMWLANCore::configureWoWTestModeEntry(AppleBCMWLANCore *this, unsigned int a2)
{
  if (a2 - 601 < 0xFFFFFDA8) {
    return 3758097090;
  }
  AppleBCMWLANCore::addEventBit(this, 0x4Cu);
  uint64_t v5 = AppleBCMWLANCore::writeEventBitField(this);
  if (v5)
  {
    uint64_t v2 = v5;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v2);
        CCLogStream::logAlert(v6, "[dk] %s@%d: Failure to setup event handling for WLC_E_WAKE_EVENT, %s\n");
      }
    }
  }
  else
  {
    unsigned int v13 = a2;
    uint64_t v7 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    v12[0] = &v13;
    v12[1] = 4;
    uint64_t v2 = AppleBCMWLANCommander::runIOVarSet(v7, (uint64_t)"wake_event", (uint64_t)v12, 0, 0);
    uint64_t v8 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (v2)
    {
      if (v8)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v2);
          CCLogStream::logAlert(v9, "[dk] %s@%d: Failure to send 'wake_event' iovar, %s\n");
        }
      }
    }
    else
    {
      if (v8)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          int v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logNotice(v11, "[dk] %s@%d: WoW test mode: Firmware will send a WAKE EVENT in %ld seconds  \n", "configureWoWTestModeEntry", 45261, a2);
        }
      }
      *(unsigned char *)(*((void *)this + 9) + 9492) = 1;
    }
  }
  return v2;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setWOW_TEST(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setWOW_TEST((AppleBCMWLANCore *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::setVendorIE(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t MaxCmdTxPayload = AppleBCMWLANCommander::getMaxCmdTxPayload(*(AppleBCMWLANCommander **)(a1[9] + 5416));
  unint64_t MaxCmdRxPayload = AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(a1[9] + 5416));
  uint64_t v8 = *(AppleBCMWLANCommander **)(a1[9] + 5416);
  if (MaxCmdTxPayload >= MaxCmdRxPayload) {
    uint64_t v9 = AppleBCMWLANCommander::getMaxCmdRxPayload(v8);
  }
  else {
    uint64_t v9 = AppleBCMWLANCommander::getMaxCmdTxPayload(v8);
  }
  uint64_t v10 = v9 - 8;
  unint64_t v11 = *(unsigned int *)(a3 + 16) + 13;
  if (v11 > v9 - 8)
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        long long v42 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logCrit(v42, "[dk] %s@%d:ERROR: IE is too large setbuflen=%lu maxbuflen=%lu\n", "setVendorIE", 36311, v11, v10);
      }
    }
    return 12;
  }
  uint64_t v13 = IOMallocZeroData();
  uint64_t v14 = IOMallocZeroData();
  unsigned __int16 v15 = (_DWORD *)v14;
  if (!v13)
  {
    BOOL v22 = v14 == 0;
LABEL_21:
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        long long v43 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logCrit(v43, "[dk] %s@%d:ERROR: failed to allocate setbuflen=%lu maxbuflen=%lu \n", "setVendorIE", 36319, v11, v10);
      }
    }
    uint64_t v12 = 12;
    if (v22) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (!v14)
  {
    BOOL v22 = 1;
    goto LABEL_21;
  }
  unint64_t v16 = (unsigned __int16)v10 | ((unint64_t)(unsigned __int16)v10 << 32) | 0x40000;
  if ((_WORD)v10)
  {
    uint64_t v17 = v14;
  }
  else
  {
    unint64_t v16 = 0;
    uint64_t v17 = 0;
  }
  v52[0] = v17;
  v52[1] = v16;
  uint64_t v18 = AppleBCMWLANCommander::runVirtualIOVarGet(*(AppleBCMWLANCommander **)(a1[9] + 5416), a2, "vndr_ie", (uint64_t)&kNoTxPayload, (uint64_t)v52, 0);
  if (v18)
  {
    uint64_t v12 = v18;
    if (!(*(uint64_t (**)(void *))(*a1 + 1848))(a1)) {
      goto LABEL_25;
    }
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (!CCLogStream::shouldLog()) {
      goto LABEL_25;
    }
    uint64_t v19 = (*(uint64_t (**)(void *))(*a1 + 1848))(a1);
    uint64_t v45 = (*(uint64_t (**)(void *, uint64_t))(*a1 + 112))(a1, v12);
    uint64_t v46 = a2;
    uint64_t v44 = 36333;
    int v20 = "[dk] %s@%d:ERROR: vndr_ie  error %s - failed to get all vendor IEs on interface %d\n";
    uint64_t v21 = (CCLogStream *)v19;
    goto LABEL_18;
  }
  uint64_t v47 = (int *)(v13 + 8);
  uint64_t v48 = v13;
  uint64_t v49 = v15;
  int v25 = *v15;
  int v24 = (unsigned __int8 *)(v15 + 1);
  if (v25 >= 1)
  {
    int v26 = 0;
    unint64_t v27 = (unint64_t)&v24[v10];
    while (1)
    {
      if ((unint64_t)(v24 + 6) > v27)
      {
        uint64_t v12 = 3758097128;
        if (!(*(uint64_t (**)(void *))(*a1 + 1848))(a1)) {
          goto LABEL_68;
        }
        (*(void (**)(void *))(*a1 + 1848))(a1);
        uint64_t v13 = v48;
        if (CCLogStream::shouldLog())
        {
          uint64_t v34 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logWarn(v34, "[dk] %s@%d:WARNING: vendor IE information overrun max allowed %u\n", "setVendorIE", 36350, v10);
        }
        goto LABEL_25;
      }
      uint64_t v28 = v24[5];
      if ((unint64_t)&v24[v28 + 6] > v27)
      {
        uint64_t v12 = 3758097128;
        if (!(*(uint64_t (**)(void *))(*a1 + 1848))(a1)) {
          goto LABEL_68;
        }
        (*(void (**)(void *))(*a1 + 1848))(a1);
        uint64_t v13 = v48;
        if (CCLogStream::shouldLog())
        {
          int v35 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logWarn(v35, "[dk] %s@%d:WARNING: vendor IE information overrun max allowed %u\n", "setVendorIE", 36360, v10);
        }
        goto LABEL_25;
      }
      uint64_t v29 = (uint64_t)&v24[v28 + 6];
      if (v29 + v28 + 6 > v27)
      {
        uint64_t v12 = 3758097128;
        if (!(*(uint64_t (**)(void *))(*a1 + 1848))(a1)) {
          goto LABEL_68;
        }
        (*(void (**)(void *))(*a1 + 1848))(a1);
        uint64_t v13 = v48;
        if (CCLogStream::shouldLog())
        {
          char v36 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logWarn(v36, "[dk] %s@%d:WARNING: vendor IE information overrun max allowed %u\n", "setVendorIE", 36373, v10);
        }
        goto LABEL_25;
      }
      if (AppleBCMWLANUtil::matchIESignature((unsigned __int8 *)(a3 + 20), *(_DWORD *)(a3 + 12), v24 + 4)) {
        break;
      }
      ++v26;
      int v24 = (unsigned __int8 *)v29;
      if (v26 >= *v49) {
        goto LABEL_36;
      }
    }
    uint64_t v13 = v48;
    *(void *)uint64_t v48 = 0x1006C6564;
    size_t v37 = v24[5] + 6;
    if ((unint64_t)v47 + v37 <= v48 + v11)
    {
      memmove(v47, v24, v37);
      unsigned int v39 = *(AppleBCMWLANCommander **)(a1[9] + 5416);
      if ((_WORD)v11) {
        uint64_t v40 = v48;
      }
      else {
        uint64_t v40 = 0;
      }
      uint64_t v50 = v40;
      uint64_t v51 = (unsigned __int16)v11;
      uint64_t v41 = AppleBCMWLANCommander::runVirtualIOVarSet(v39, a2, "vndr_ie", (uint64_t)&v50, 0, 0);
      if (!v41) {
        goto LABEL_36;
      }
      uint64_t v12 = v41;
      if (!(*(uint64_t (**)(void *))(*a1 + 1848))(a1)) {
        goto LABEL_68;
      }
      (*(void (**)(void *))(*a1 + 1848))(a1);
      uint64_t v13 = v48;
      if (CCLogStream::shouldLog())
      {
        uint64_t v33 = (*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        uint64_t v44 = 36396;
        uint64_t v45 = (*(uint64_t (**)(void *, uint64_t))(*a1 + 112))(a1, v12);
        int v20 = "[dk] %s@%d:ERROR: vndr_ie error %s - failed to delete existing IE\n";
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v12 = 3758097128;
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          unint64_t v38 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logWarn(v38, "[dk] %s@%d:WARNING: vendor IE information overrun max allowed %u, ie->len[%u]\n", "setVendorIE", 36387, v10, v24[5]);
        }
      }
    }
    goto LABEL_25;
  }
LABEL_36:
  if (!*(_DWORD *)(a3 + 8))
  {
    uint64_t v12 = 0;
LABEL_68:
    uint64_t v13 = v48;
    goto LABEL_25;
  }
  uint64_t v13 = v48;
  *(void *)uint64_t v48 = 0x100646461;
  int v30 = (*(_DWORD *)(a3 + 4) >> 4) & 1;
  *(_DWORD *)(v48 + 8) = v30;
  if ((*(_DWORD *)(a3 + 4) & 0xF) != 0) {
    *uint64_t v47 = (*(_DWORD *)(a3 + 4) >> 1) & 4 | *(_DWORD *)(a3 + 4) & 2 | (16 * (*(_DWORD *)(a3 + 4) & 1)) & 0xDF | (32 * ((*(_DWORD *)(a3 + 4) >> 2) & 1)) | v30;
  }
  *(unsigned char *)(v48 + 12) = *(unsigned char *)(a3 + 20);
  memmove((void *)(v48 + 14), (const void *)(a3 + 21), (*(_DWORD *)(a3 + 16) - 1));
  *(unsigned char *)(v48 + 13) = *(unsigned char *)(a3 + 16) - 1;
  unsigned __int8 v31 = *(AppleBCMWLANCommander **)(a1[9] + 5416);
  if ((_WORD)v11) {
    uint64_t v32 = v48;
  }
  else {
    uint64_t v32 = 0;
  }
  uint64_t v50 = v32;
  uint64_t v51 = (unsigned __int16)v11;
  uint64_t v12 = AppleBCMWLANCommander::runVirtualIOVarSet(v31, a2, "vndr_ie", (uint64_t)&v50, 0, 0);
  if (v12)
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v33 = (*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        uint64_t v44 = 36441;
        uint64_t v45 = (*(uint64_t (**)(void *, uint64_t))(*a1 + 112))(a1, v12);
        int v20 = "[dk] %s@%d:ERROR: vndr_ie error %s - failed to add IE\n";
LABEL_46:
        uint64_t v21 = (CCLogStream *)v33;
LABEL_18:
        CCLogStream::logCrit(v21, v20, "setVendorIE", v44, v45, v46);
      }
    }
  }
LABEL_25:
  IOFreeData();
LABEL_26:
  if (v13) {
    IOFreeData();
  }
  return v12;
}

uint64_t AppleBCMWLANCore::setIE(void *a1, uint64_t a2)
{
  if (!a2)
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v9, "[dk] %s@%d:%s: NULL input association data parameters, bailing\n");
      }
    }
    return 22;
  }
  uint64_t v4 = *(unsigned int *)(a2 + 16);
  if ((v4 - 2049) <= 0xFFFFF7FF)
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:%s: Invalid input association data parameters, bailing ie_len %d\n");
      }
    }
    return 22;
  }
  if (*(_DWORD *)(a2 + 4) == 4 && *(_DWORD *)(a2 + 8) && (uint64_t v7 = (char *)(a2 + 20), *(unsigned char *)(a2 + 20) == 68))
  {
    uint64_t v8 = *(AppleBCMWLANJoinAdapter **)(a1[9] + 5424);
    return AppleBCMWLANJoinAdapter::setCustomAssocIE(v8, v7, v4);
  }
  else
  {
    return AppleBCMWLANCore::setVendorIE(a1, 0, a2);
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setIE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setIE((void *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::setHT_CAPABILITY(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 22;
  }
  uint64_t result = 0;
  uint64_t v4 = (_OWORD *)(*(void *)(a1 + 72) + 1052);
  long long v5 = *(_OWORD *)(a2 + 4);
  *(_OWORD *)((char *)v4 + 12) = *(_OWORD *)(a2 + 16);
  *uint64_t v4 = v5;
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setHT_CAPABILITY(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 22;
  }
  uint64_t result = 0;
  uint64_t v4 = (_OWORD *)(*(void *)(a1 + 8) + 1052);
  long long v5 = *(_OWORD *)(a2 + 4);
  *(_OWORD *)((char *)v4 + 12) = *(_OWORD *)(a2 + 16);
  *uint64_t v4 = v5;
  return result;
}

uint64_t AppleBCMWLANCore::setVHT_CAPABILITY(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 22;
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (*(int *)(v2 + 1040) < 128) {
    return 45;
  }
  uint64_t result = 0;
  uint64_t v4 = *(void *)(a2 + 4);
  *(void *)(v2 + 1086) = *(void *)(a2 + 10);
  *(void *)(v2 + 1080) = v4;
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setVHT_CAPABILITY(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 22;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(int *)(v2 + 1040) < 128) {
    return 45;
  }
  uint64_t result = 0;
  uint64_t v4 = *(void *)(a2 + 4);
  *(void *)(v2 + 1086) = *(void *)(a2 + 10);
  *(void *)(v2 + 1080) = v4;
  return result;
}

uint64_t AppleBCMWLANCore::printLogOnDeadlock(AppleBCMWLANCore *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v4, "[dk] %s@%d:Dumping IPC stats before assert\n", "printLogOnDeadlock", 36526);
    }
  }
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 5400) + 688);
  return v2();
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::printLogOnDeadlock(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::printLogOnDeadlock((AppleBCMWLANCore *)((char *)this - 48));
}

uint64_t AppleBCMWLANCore::setCOUNTRY_CODE(AppleBCMWLANCore *a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 22;
  }
  unsigned int v5 = *(_DWORD *)(*((void *)a1 + 9) + 780);
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      unsigned __int8 v31 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      CCLogStream::logAlert(v31, "[dk] %s@%d:WiFiCC : Incoming country code : [%s]. Current host country code : [%s]. Current FW country code : [%s]. RestrictedCountryCode : [%s], DefaultCountryCode : [%s]\n", "setCOUNTRY_CODE", 36548, (const char *)(a3 + 4), (const char *)(*((void *)a1 + 9) + 6744), (const char *)(*((void *)a1 + 9) + 6752), (const char *)(*((void *)a1 + 9) + 6748), (const char *)(*((void *)a1 + 9) + 6740));
    }
  }
  uint64_t v6 = 0;
  uint64_t v7 = a3 + 4;
  do
  {
    int v8 = *(unsigned __int8 *)(v7 + v6);
    if ((v8 - 97) < 0x1A) {
      LOBYTE(v8) = v8 - 32;
    }
    *(unsigned char *)(v7 + v6++) = v8;
  }
  while (v6 != 3);
  int isRestrictedCountry = AppleBCMWLANCore::isRestrictedCountry(a1);
  if (v5 < 0x11)
  {
    int v10 = 0;
LABEL_75:
    int v19 = 0;
    int v21 = 0;
    char v22 = 1;
    goto LABEL_76;
  }
  unint64_t v11 = (unsigned char *)(a3 + 4);
  int v10 = strncmp((const char *)(*((void *)a1 + 9) + 6744), (const char *)(a3 + 4), 4uLL);
  if (v10)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v49 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v49, "[dk] %s@%d:WiFiCC : Country code changed\n", "setCOUNTRY_CODE", 36573);
      }
    }
  }
  uint64_t v12 = *((void *)a1 + 9);
  if (*(unsigned char *)(v12 + 6764))
  {
    BOOL v13 = AppleBCMWLANCore::is6ESupportedInCountry(a1, (const char *)(v12 + 6744));
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v14, "[dk] %s@%d:WiFiCC : currentCountrySupports6E [%hhu] fHostCountryEnabled : [%hhu]. fCurrentHostCountryCode : [%s]\n", "setCOUNTRY_CODE", 36583, v13, *(unsigned __int8 *)(*((void *)a1 + 9) + 6764), (const char *)(*((void *)a1 + 9) + 6744));
      }
    }
  }
  else
  {
    if (!strncmp((const char *)(v12 + 6744), (const char *)(v12 + 6740), 4uLL)
      || !strncmp((const char *)(v12 + 6744), (const char *)(v12 + 6748), 4uLL))
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          long long v61 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logAlert(v61, "[dk] %s@%d:WiFiCC : Country code currently unavaiialble at host. CurrentHostCountryCode : [%s]. RestricedCountryCode : [%s]. DefaultCountryCode : [%s]\n", "setCOUNTRY_CODE", 36579, (const char *)(*((void *)a1 + 9) + 6744), (const char *)(*((void *)a1 + 9) + 6748), (const char *)(*((void *)a1 + 9) + 6740));
        }
      }
    }
    BOOL v13 = 0;
  }
  BOOL v15 = 0;
  int v16 = *v11;
  if (*v11 && v16 != 88 && v16 != 120) {
    BOOL v15 = AppleBCMWLANCore::is6ESupportedInCountry(a1, (const char *)(a3 + 4));
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)
    && ((*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1), CCLogStream::shouldLog()))
  {
    uint64_t v32 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    CCLogStream::logAlert(v32, "[dk] %s@%d:WiFiCC : newCountrySupports6E [%hhu], incomingCountryCode : [%s] \n", "setCOUNTRY_CODE", 36591, v15, (const char *)(a3 + 4));
    if (!v10) {
      goto LABEL_75;
    }
  }
  else if (!v10)
  {
    goto LABEL_75;
  }
  if (!v13 && v15)
  {
    if ((IO80211BssManager::isAssociatedOn2G(*(IO80211BssManager **)(*((void *)a1 + 9) + 5440)) & 1) != 0
      || IO80211BssManager::isAssociatedOn5G(*(IO80211BssManager **)(*((void *)a1 + 9) + 5440)))
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        int v19 = 1;
        if (CCLogStream::shouldLog())
        {
          long long v60 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          int v19 = 1;
          CCLogStream::logAlert(v60, "[dk] %s@%d:WiFiCC : Currently associated on legacy. disconnected Needed : [%hhu] enable6ENeeded : [%hhu]\n", "setCOUNTRY_CODE", 36598, 0, 1);
        }
        goto LABEL_43;
      }
    }
    else
    {
      int isAssociatedOn6G = IO80211BssManager::isAssociatedOn6G(*(IO80211BssManager **)(*((void *)a1 + 9) + 5440));
      uint64_t v24 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (isAssociatedOn6G)
      {
        if (v24)
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          int v19 = 1;
          if (!CCLogStream::shouldLog())
          {
LABEL_43:
            int v10 = 0;
LABEL_54:
            int v21 = 0;
            char v22 = 0;
            goto LABEL_76;
          }
          int v25 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logAlert(v25, "[dk] %s@%d:WiFiCC : Currently associated on 6GHz but current country is not supposed to support 6E!\n", "setCOUNTRY_CODE", 36602);
        }
      }
      else if (v24)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        int v19 = 1;
        if (CCLogStream::shouldLog())
        {
          uint64_t v28 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          int v19 = 1;
          CCLogStream::logAlert(v28, "[dk] %s@%d:WiFiCC : Not associated. No action needed. currentCountrySupports6E : [%hhu] and newCountrySupports6E : [%hhu] \n", "setCOUNTRY_CODE", 36605, 0, 1);
          int v10 = 0;
          int v21 = 0;
          char v22 = 0;
          goto LABEL_76;
        }
        goto LABEL_43;
      }
    }
    int v10 = 0;
    int v21 = 0;
    char v22 = 0;
    int v19 = 1;
    goto LABEL_76;
  }
  if (!v13 || v15)
  {
    uint64_t v17 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    if (!v13 || !v15)
    {
      if (v17)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logAlert(v18, "[dk] %s@%d:WiFiCC : No action needed. currentCountrySupports6E : [%hhu] and newCountrySupports6E : [%hhu] \n");
        }
      }
    }
    else if (v17)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v62 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v62, "[dk] %s@%d:WiFiCC : Country code change will be attempted. currentCountrySupports6E : [%hhu] and newCountrySupports6E : [%hhu] \n");
      }
    }
    int v10 = 0;
LABEL_53:
    int v19 = 0;
    goto LABEL_54;
  }
  if ((IO80211BssManager::isAssociatedOn2G(*(IO80211BssManager **)(*((void *)a1 + 9) + 5440)) & 1) != 0
    || IO80211BssManager::isAssociatedOn5G(*(IO80211BssManager **)(*((void *)a1 + 9) + 5440)))
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      int v10 = 1;
      if (CCLogStream::shouldLog())
      {
        int v20 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        int v10 = 1;
        CCLogStream::logAlert(v20, "[dk] %s@%d:WiFiCC : Currently associated on legacy. disconnected Needed : [%hhu] disable6ENeeded : [%hhu]\n", "setCOUNTRY_CODE", 36612, 0, 1);
      }
      goto LABEL_53;
    }
LABEL_70:
    int v19 = 0;
    int v21 = 0;
    char v22 = 0;
    int v10 = 1;
    goto LABEL_76;
  }
  int v26 = IO80211BssManager::isAssociatedOn6G(*(IO80211BssManager **)(*((void *)a1 + 9) + 5440));
  uint64_t v27 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
  if (!v26)
  {
    if (v27)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      int v10 = 1;
      if (CCLogStream::shouldLog())
      {
        uint64_t v29 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        int v10 = 1;
        CCLogStream::logAlert(v29, "[dk] %s@%d:WiFiCC : Not associated. No action needed. currentCountrySupports6E : [%hhu] and newCountrySupports6E : [%hhu] \n", "setCOUNTRY_CODE", 36618, 1, 0);
        int v19 = 0;
        int v21 = 0;
        char v22 = 0;
        goto LABEL_76;
      }
      goto LABEL_53;
    }
    goto LABEL_70;
  }
  if (v27)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    int v10 = 1;
    if (CCLogStream::shouldLog())
    {
      __int16 v64 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      int v21 = 1;
      CCLogStream::logAlert(v64, "[dk] %s@%d:WiFiCC : Currently associated on 6GHz. disconnected Needed : [%hhu] disable6ENeeded : [%hhu]\n", "setCOUNTRY_CODE", 36616, 1, 1);
      int v19 = 0;
      char v22 = 0;
      int v10 = 1;
      goto LABEL_76;
    }
    int v19 = 0;
    char v22 = 0;
  }
  else
  {
    int v19 = 0;
    char v22 = 0;
    int v10 = 1;
  }
  int v21 = 1;
LABEL_76:
  int v35 = *(unsigned __int8 *)(a3 + 4);
  uint64_t v34 = a3 + 4;
  int v33 = v35;
  if (v35 && v33 != 120 && v33 != 88)
  {
    uint64_t v41 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 88))(a1);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v41 + 136))(v41))
    {
      uint64_t v30 = 3766626305;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          long long v42 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logAlert(v42, "[dk] %s@%d: Setting country code from workQueue thread is not supported. Rejecting.\n");
        }
      }
      return v30;
    }
    uint64_t v44 = (_WORD *)(*((void *)a1 + 9) + 6744);
    unsigned __int8 v45 = *(unsigned char *)(v34 + 2);
    *uint64_t v44 = *(_WORD *)v34;
    v44[1] = v45;
    char v43 = 1;
LABEL_97:
    *(unsigned char *)(*((void *)a1 + 9) + 6764) = v43;
    int v46 = AppleBCMWLANCore::isRestrictedCountry(a1);
    (*(void (**)(void))(**(void **)(*((void *)a1 + 9) + 6280) + 136))(*(void *)(*((void *)a1 + 9) + 6280));
    if (isRestrictedCountry != v46)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)
        && ((*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1),
            CCLogStream::shouldLog()))
      {
        uint64_t v50 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        uint64_t v51 = "Leaving";
        if (v46) {
          uint64_t v51 = "Entering";
        }
        uint64_t v52 = "Enabling";
        if (v46) {
          uint64_t v52 = "Disabling";
        }
        CCLogStream::logAlert(v50, "[dk] %s@%d: %s restricted regulatory domain. %s autocountry settings\n", "setCOUNTRY_CODE", 36671, v51, v52);
        if (v46) {
          goto LABEL_101;
        }
      }
      else if (v46)
      {
LABEL_101:
        if (IO80211BssManager::isAssociated(*(IO80211BssManager **)(*((void *)a1 + 9) + 5440)))
        {
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v47 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              CCLogStream::logAlert(v47, "[dk] %s@%d: Disassociating before performing country settings\n", "setCOUNTRY_CODE", 36717);
            }
          }
        }
        goto LABEL_127;
      }
      int v69 = (unsigned int *)0xAAAAAAAAAAAAAAAALL;
      unint64_t v70 = 0xAAAAAAAAAAAAAAAALL;
      if ((IO80211BssManager::isAssociated(*(IO80211BssManager **)(*((void *)a1 + 9) + 5440)) & 1) == 0)
      {
        if (AppleBCMWLANConfigManager::isEnhancedLocaleEnabled(*(AppleBCMWLANConfigManager **)(*((void *)a1 + 9) + 5472)))
        {
          unsigned int v68 = 1;
          int v69 = &v68;
          unint64_t v70 = 4;
          uint64_t v53 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)a1 + 9) + 5416), (uint64_t)"ccode_pr_2g", (uint64_t)&v69, 0, 0);
          if (v53)
          {
            uint64_t v30 = v53;
            if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)) {
              return v30;
            }
            (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            if (!CCLogStream::shouldLog()) {
              return v30;
            }
            uint64_t v54 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            uint64_t v66 = v68;
            uint64_t v67 = (*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)a1 + 112))(a1, v30);
            uint64_t v65 = 36688;
            uint64_t v55 = "[dk] %s@%d: Error: Unable to enable ccode_pr_2g \"%d\" : %s\n";
            goto LABEL_126;
          }
        }
        if (AppleBCMWLANConfigManager::isAutoCountryEnabled(*(AppleBCMWLANConfigManager **)(*((void *)a1 + 9) + 5472)))
        {
          unsigned int v68 = 1;
          int v69 = &v68;
          unint64_t v70 = 4;
          if (AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)a1 + 9) + 5416), (uint64_t)"autocountry", (uint64_t)&v69, 0, 0))
          {
            uint64_t v56 = AppleBCMWLANCommander::runIOCtlSet(*(AppleBCMWLANCommander **)(*((void *)a1 + 9) + 5416), 47, (uint64_t)&v69, 0, 0);
            if (v56)
            {
              uint64_t v30 = v56;
              if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)) {
                return v30;
              }
              (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              if (!CCLogStream::shouldLog()) {
                return v30;
              }
              uint64_t v54 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              uint64_t v66 = v68;
              uint64_t v67 = (*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)a1 + 112))(a1, v30);
              uint64_t v65 = 36700;
              uint64_t v55 = "[dk] %s@%d: Error: Unable to enable autocountry \"%d\" : %s\n";
              goto LABEL_126;
            }
          }
        }
      }
      unsigned int v68 = 0;
      int v69 = &v68;
      unint64_t v70 = 4;
      uint64_t v57 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)a1 + 9) + 5416), (uint64_t)"passive_on_restricted", (uint64_t)&v69, 0, 0);
      if (v57)
      {
        uint64_t v30 = v57;
        if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)) {
          return v30;
        }
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (!CCLogStream::shouldLog()) {
          return v30;
        }
        uint64_t v54 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        uint64_t v65 = 36711;
        uint64_t v66 = (*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)a1 + 112))(a1, v30);
        uint64_t v55 = "[dk] %s@%d: iovar set passive_on_restricted command failed: %s\n";
LABEL_126:
        CCLogStream::logAlert(v54, v55, "setCOUNTRY_CODE", v65, v66, v67);
        return v30;
      }
    }
LABEL_127:
    if (AppleBCMWLANCore::isRestrictedCountry(a1)) {
      return (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 440))(a1);
    }
    if (v5 < 0x11) {
      char v59 = 1;
    }
    else {
      char v59 = v22;
    }
    if ((v59 & 1) == 0)
    {
      if (v21)
      {
        if (IO80211BssManager::isAssociated(*(IO80211BssManager **)(*((void *)a1 + 9) + 5440)))
        {
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              int v63 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              CCLogStream::logAlert(v63, "[dk] %s@%d:WiFiCC : Country code changed. For 4388, Disassociating before performing country settings\n", "setCOUNTRY_CODE", 36738);
            }
          }
        }
      }
      if ((v10 | v19) == 1) {
        AppleBCMWLANCore::disable6GForRoamScans(a1, v10, 2);
      }
    }
    return (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 448))(a1);
  }
  uint64_t v36 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 88))(a1);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v36 + 136))(v36))
  {
    unsigned int v39 = (_DWORD *)*((void *)a1 + 9);
    if (*(unsigned char *)v34)
    {
      uint64_t v40 = v39 + 1685;
    }
    else if (*((unsigned char *)v39 + 6748))
    {
      uint64_t v40 = v39 + 1687;
    }
    else
    {
      uint64_t v40 = v39 + 1685;
    }
    char v43 = 0;
    v39[1686] = *v40;
    goto LABEL_97;
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v48 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      CCLogStream::logAlert(v48, "[dk] %s@%d: Disabling host country code from workQueue thread. Deferring to timer context.\n", "setCOUNTRY_CODE", 36638);
    }
  }
  size_t v37 = *(uint64_t (**)(void))(**(void **)(*((void *)a1 + 9) + 6280) + 120);
  return v37();
}

BOOL AppleBCMWLANCore::is6ESupportedInCountry(AppleBCMWLANCore *this, const char *__s1)
{
  uint64_t v2 = *((void *)this + 9);
  unsigned int v3 = *(_DWORD *)(v2 + 7796);
  if (!v3) {
    return 0;
  }
  for (unsigned __int8 i = 0; i < v3; ++i)
  {
    int v6 = strcmp(__s1, (const char *)(v2 + 4 * i + 7800));
    BOOL result = v6 == 0;
    if (!v6) {
      break;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setCOUNTRY_CODE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AppleBCMWLANCore::setCOUNTRY_CODE((AppleBCMWLANCore *)(a1 - 48), a2, a3);
}

uint64_t AppleBCMWLANCore::setSWDIV_RX_POLICY(AppleBCMWLANCore *this, int *a2)
{
  uint64_t v3 = *((void *)this + 9);
  int v10 = *(_DWORD *)(v3 + 10404);
  uint64_t v4 = *(AppleBCMWLANCommander **)(v3 + 5416);
  v9[0] = &v10;
  v9[1] = 4;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"swdiv_rx_policy", (uint64_t)v9, 0, 0);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
        CCLogStream::logCrit(v7, "[dk] %s@%d: swdiv_rx_policy failed, error %s\n", "setSWDIV_RX_POLICY", 36811, v8);
      }
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setSWDIV_RX_POLICY(AppleBCMWLANCore *this, int *a2)
{
  return AppleBCMWLANCore::setSWDIV_RX_POLICY((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setSWDIV_TX_POLICY(AppleBCMWLANCore *this, int *a2)
{
  uint64_t v3 = *((void *)this + 9);
  int v10 = *(_DWORD *)(v3 + 10408);
  uint64_t v4 = *(AppleBCMWLANCommander **)(v3 + 5416);
  v9[0] = &v10;
  v9[1] = 4;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"swdiv_tx_policy", (uint64_t)v9, 0, 0);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
        CCLogStream::logCrit(v7, "[dk] %s@%d: swdiv_tx_policy failed, error %s\n", "setSWDIV_TX_POLICY", 36826, v8);
      }
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setSWDIV_TX_POLICY(AppleBCMWLANCore *this, int *a2)
{
  return AppleBCMWLANCore::setSWDIV_TX_POLICY((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setSWDIV_CELL_POLICY(AppleBCMWLANCore *this, int *a2)
{
  uint64_t v3 = *((void *)this + 9);
  int v10 = *(_DWORD *)(v3 + 10412);
  uint64_t v4 = *(AppleBCMWLANCommander **)(v3 + 5416);
  v9[0] = &v10;
  v9[1] = 4;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"swdiv_cell_policy", (uint64_t)v9, 0, 0);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
        CCLogStream::logCrit(v7, "[dk] %s@%d: swdiv_cell_policy failed, error %s\n", "setSWDIV_CELL_POLICY", 36841, v8);
      }
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setSWDIV_CELL_POLICY(AppleBCMWLANCore *this, int *a2)
{
  return AppleBCMWLANCore::setSWDIV_CELL_POLICY((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setMWS_NGC_COEX_BITMAPS(AppleBCMWLANCore *this, unsigned __int8 *a2)
{
  v10[0] = 1;
  uint64_t v3 = *((void *)this + 9);
  v10[1] = *(_DWORD *)(v3 + 10540);
  void v10[2] = *(_DWORD *)(v3 + 10544);
  v10[3] = *(_DWORD *)(v3 + 10548);
  uint64_t v4 = *(AppleBCMWLANCommander **)(v3 + 5416);
  v9[0] = v10;
  v9[1] = 8;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"nr_5gwifi_coex_bitmap", (uint64_t)v9, 0, 0);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
        CCLogStream::logCrit(v7, "[dk] %s@%d: 5gwifi_coex_bitmap failed, error %s\n", "setMWS_NGC_COEX_BITMAPS", 36863, v8);
      }
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setMWS_NGC_COEX_BITMAPS(AppleBCMWLANCore *this, unsigned __int8 *a2)
{
  return AppleBCMWLANCore::setMWS_NGC_COEX_BITMAPS((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setMWS_NGC_TimerGranularity(AppleBCMWLANCore *this, unsigned __int8 *a2)
{
  uint64_t v3 = *((void *)this + 9);
  uint64_t v4 = *(AppleBCMWLANCommander **)(v3 + 5416);
  v9[0] = v3 + 10712;
  v9[1] = 4;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"nr_5gwifi_timer_granularity", (uint64_t)v9, 0, 0);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
        CCLogStream::logCrit(v7, "[dk] %s@%d: 5gwifi_timer_granularity failed, error %s\n", "setMWS_NGC_TimerGranularity", 36876, v8);
      }
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setMWS_NGC_TimerGranularity(AppleBCMWLANCore *this, unsigned __int8 *a2)
{
  return AppleBCMWLANCore::setMWS_NGC_TimerGranularity((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setMWS_NGC_ACTIVITY_LEVEL_THRESHOLDS(AppleBCMWLANCore *this, unsigned __int8 *a2)
{
  uint64_t v3 = *((void *)this + 9);
  uint64_t v4 = *(AppleBCMWLANCommander **)(v3 + 5416);
  v9[0] = v3 + 10708;
  v9[1] = 4;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"nr_5gwifi_inact_thresh", (uint64_t)v9, 0, 0);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
        CCLogStream::logCrit(v7, "[dk] %s@%d: 5gwifi_activity_level_threshold failed, error %s\n", "setMWS_NGC_ACTIVITY_LEVEL_THRESHOLDS", 36889, v8);
      }
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setMWS_NGC_ACTIVITY_LEVEL_THRESHOLDS(AppleBCMWLANCore *this, unsigned __int8 *a2)
{
  return AppleBCMWLANCore::setMWS_NGC_ACTIVITY_LEVEL_THRESHOLDS((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setMWS2GWiFiType7Bitmap(AppleBCMWLANCore *this, unsigned __int8 *a2)
{
  uint64_t v3 = IOMallocZeroData();
  if (v3)
  {
    *(_DWORD *)uint64_t v3 = 16875520;
    *(_WORD *)(v3 + 4) = 1;
    *(_DWORD *)(v3 + 8) = 1;
    *(_DWORD *)(v3 + 12) = *(_DWORD *)(*((void *)this + 9) + 30940);
    *(_WORD *)(v3 + 6) = 8;
    v14[0] = v3;
    v14[1] = 16;
    uint64_t v4 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 136))(v4)) {
      uint64_t v5 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"mws");
    }
    else {
      uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"mws", (uint64_t)v14, 0, 0);
    }
    uint64_t v6 = v5;
    uint64_t v8 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (v6)
    {
      if (v8)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          int v10 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
          CCLogStream::logCrit(v9, "[dk] %s@%d:Configured 2G WiFi Type7 bitmap Failure, error %s\n", "setMWS2GWiFiType7Bitmap", 36956, v10);
        }
      }
    }
    else if (v8)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        BOOL v13 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, void))(*(void *)this + 112))(this, 0);
        CCLogStream::logAlert(v12, "[dk] %s@%d:Configured 2G WiFi Type7 bitmap Success with %s, 0x%x\n", "setMWS2GWiFiType7Bitmap", 36952, v13, *(_DWORD *)(*((void *)this + 9) + 30940));
      }
    }
    IOFreeData();
  }
  else
  {
    uint64_t v6 = 3758097085;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:ltecx cmd alloc fail\n", "setMWS2GWiFiType7Bitmap", 36912);
      }
    }
  }
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setMWS2GWiFiType7Bitmap(AppleBCMWLANCore *this, unsigned __int8 *a2)
{
  return AppleBCMWLANCore::setMWS2GWiFiType7Bitmap((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setMWSCoexBitmapsWiFiEnh(AppleBCMWLANCore *this, unsigned __int8 *a2)
{
  uint64_t v3 = IOMallocZeroData();
  if (v3)
  {
    *(_DWORD *)uint64_t v3 = 16875520;
    *(_WORD *)(v3 + 4) = 2;
    *(void *)(v3 + 8) = 0x18000300000001;
    *(unsigned char *)(v3 + 16) = 7;
    *(_WORD *)(v3 + 18) = *(_DWORD *)(*((void *)this + 9) + 10552);
    *(_WORD *)(v3 + 20) = *(_DWORD *)(*((void *)this + 9) + 10556);
    *(_WORD *)(v3 + 22) = *(_DWORD *)(*((void *)this + 9) + 10560);
    *(_WORD *)(v3 + 24) = *(_DWORD *)(*((void *)this + 9) + 10564);
    *(_WORD *)(v3 + 26) = *(_DWORD *)(*((void *)this + 9) + 10568);
    *(_WORD *)(v3 + 28) = *(_DWORD *)(*((void *)this + 9) + 10572);
    *(_WORD *)(v3 + 30) = *(_DWORD *)(*((void *)this + 9) + 10576);
    *(_WORD *)(v3 + 32) = *(_DWORD *)(*((void *)this + 9) + 10580);
    *(_WORD *)(v3 + 34) = *(_DWORD *)(*((void *)this + 9) + 10584);
    *(_WORD *)(v3 + 6) = 28;
    v14[0] = v3;
    v14[1] = 36;
    uint64_t v4 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 136))(v4)) {
      uint64_t v5 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"mws");
    }
    else {
      uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"mws", (uint64_t)v14, 0, 0);
    }
    uint64_t v6 = v5;
    uint64_t v8 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (v6)
    {
      if (v8)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          int v10 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
          CCLogStream::logCrit(v9, "[dk] %s@%d:Configured MWS WiFiEnh COEX iovar Failure, error %s\n", "setMWSCoexBitmapsWiFiEnh", 37035, v10);
        }
      }
    }
    else if (v8)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        BOOL v13 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, void))(*(void *)this + 112))(this, 0);
        CCLogStream::logAlert(v12, "[dk] %s@%d:Configured MWS WiFiEnh COEX iovar Success with %s\n", "setMWSCoexBitmapsWiFiEnh", 37031, v13);
      }
    }
    IOFreeData();
  }
  else
  {
    uint64_t v6 = 3758097085;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:ltecx cmd (MWSCoexBitmapsWiFiEnh) alloc failed\n", "setMWSCoexBitmapsWiFiEnh", 36979);
      }
    }
  }
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setMWSCoexBitmapsWiFiEnh(AppleBCMWLANCore *this, unsigned __int8 *a2)
{
  return AppleBCMWLANCore::setMWSCoexBitmapsWiFiEnh((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setOCLCoexBitmapsWiFiEnh(AppleBCMWLANCore *this, unsigned __int8 *a2)
{
  uint64_t v3 = IOMallocZeroData();
  if (v3)
  {
    *(_DWORD *)uint64_t v3 = 16875520;
    *(_WORD *)(v3 + 4) = 3;
    *(void *)(v3 + 8) = 0x18000200000001;
    *(unsigned char *)(v3 + 16) = 7;
    *(_WORD *)(v3 + 18) = *(_DWORD *)(*((void *)this + 9) + 10592);
    *(_WORD *)(v3 + 20) = *(_DWORD *)(*((void *)this + 9) + 10596);
    *(_WORD *)(v3 + 22) = *(_DWORD *)(*((void *)this + 9) + 10600);
    *(_WORD *)(v3 + 24) = *(_DWORD *)(*((void *)this + 9) + 10604);
    *(_WORD *)(v3 + 26) = *(_DWORD *)(*((void *)this + 9) + 10608);
    *(_WORD *)(v3 + 28) = *(_DWORD *)(*((void *)this + 9) + 10612);
    *(_WORD *)(v3 + 30) = *(_DWORD *)(*((void *)this + 9) + 10616);
    *(_WORD *)(v3 + 32) = *(_DWORD *)(*((void *)this + 9) + 10620);
    *(_WORD *)(v3 + 34) = *(_DWORD *)(*((void *)this + 9) + 10624);
    *(_WORD *)(v3 + 6) = 28;
    v14[0] = v3;
    v14[1] = 36;
    uint64_t v4 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 136))(v4)) {
      uint64_t v5 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"mws");
    }
    else {
      uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"mws", (uint64_t)v14, 0, 0);
    }
    uint64_t v6 = v5;
    uint64_t v8 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (v6)
    {
      if (v8)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          int v10 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
          CCLogStream::logCrit(v9, "[dk] %s@%d:Configured OCL WiFiEnh COEX iovar Failure, error %s\n", "setOCLCoexBitmapsWiFiEnh", 37115, v10);
        }
      }
    }
    else if (v8)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        BOOL v13 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, void))(*(void *)this + 112))(this, 0);
        CCLogStream::logAlert(v12, "[dk] %s@%d:Configured OCL WiFiEnh COEX iovar Success with %s\n", "setOCLCoexBitmapsWiFiEnh", 37111, v13);
      }
    }
    IOFreeData();
  }
  else
  {
    uint64_t v6 = 3758097085;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:ltecx cmd (OCLCoexBitmapsWiFiEnh) alloc failed\n", "setOCLCoexBitmapsWiFiEnh", 37058);
      }
    }
  }
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setOCLCoexBitmapsWiFiEnh(AppleBCMWLANCore *this, unsigned __int8 *a2)
{
  return AppleBCMWLANCore::setOCLCoexBitmapsWiFiEnh((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setWiFiType7BitmapsWiFiEnh(AppleBCMWLANCore *this, unsigned __int8 *a2)
{
  uint64_t v3 = IOMallocZeroData();
  if (v3)
  {
    *(_DWORD *)uint64_t v3 = 16875520;
    *(_WORD *)(v3 + 4) = 6;
    *(void *)(v3 + 8) = 0x18000100000001;
    *(unsigned char *)(v3 + 16) = 7;
    *(_WORD *)(v3 + 18) = *(_DWORD *)(*((void *)this + 9) + 10628);
    *(_WORD *)(v3 + 20) = *(_DWORD *)(*((void *)this + 9) + 10632);
    *(_WORD *)(v3 + 22) = *(_DWORD *)(*((void *)this + 9) + 10636);
    *(_WORD *)(v3 + 24) = *(_DWORD *)(*((void *)this + 9) + 10640);
    *(_WORD *)(v3 + 26) = *(_DWORD *)(*((void *)this + 9) + 10644);
    *(_WORD *)(v3 + 28) = *(_DWORD *)(*((void *)this + 9) + 10648);
    *(_WORD *)(v3 + 30) = *(_DWORD *)(*((void *)this + 9) + 10652);
    *(_WORD *)(v3 + 32) = *(_DWORD *)(*((void *)this + 9) + 10656);
    *(_WORD *)(v3 + 34) = *(_DWORD *)(*((void *)this + 9) + 10660);
    *(_WORD *)(v3 + 6) = 28;
    v14[0] = v3;
    v14[1] = 36;
    uint64_t v4 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 136))(v4)) {
      uint64_t v5 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"mws");
    }
    else {
      uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"mws", (uint64_t)v14, 0, 0);
    }
    uint64_t v6 = v5;
    uint64_t v8 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (v6)
    {
      if (v8)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          int v10 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
          CCLogStream::logCrit(v9, "[dk] %s@%d:Configured WiFiType7 WiFiEnh COEX iovar Failure, error %s\n", "setWiFiType7BitmapsWiFiEnh", 37194, v10);
        }
      }
    }
    else if (v8)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        BOOL v13 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, void))(*(void *)this + 112))(this, 0);
        CCLogStream::logAlert(v12, "[dk] %s@%d:Configured WiFiType7 WiFiEnh COEX iovar Success with %s\n", "setWiFiType7BitmapsWiFiEnh", 37190, v13);
      }
    }
    IOFreeData();
  }
  else
  {
    uint64_t v6 = 3758097085;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:ltecx cmd (WiFiType7BitmapsWiFiEnh) alloc failed\n", "setWiFiType7BitmapsWiFiEnh", 37138);
      }
    }
  }
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setWiFiType7BitmapsWiFiEnh(AppleBCMWLANCore *this, unsigned __int8 *a2)
{
  return AppleBCMWLANCore::setWiFiType7BitmapsWiFiEnh((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setWiFiType4BlankingBitmapsWiFiEnh(AppleBCMWLANCore *this, unsigned __int8 *a2)
{
  uint64_t v3 = IOMallocZeroData();
  if (v3)
  {
    *(_DWORD *)uint64_t v3 = 16875520;
    *(_WORD *)(v3 + 4) = 7;
    *(void *)(v3 + 8) = 0x1C000200000001;
    *(unsigned char *)(v3 + 16) = 7;
    *(_WORD *)(v3 + 18) = *(_DWORD *)(*((void *)this + 9) + 10664);
    *(_WORD *)(v3 + 20) = *(_DWORD *)(*((void *)this + 9) + 10668);
    *(_WORD *)(v3 + 22) = *(_DWORD *)(*((void *)this + 9) + 10672);
    *(_WORD *)(v3 + 24) = *(_DWORD *)(*((void *)this + 9) + 10676);
    *(_WORD *)(v3 + 26) = *(_DWORD *)(*((void *)this + 9) + 10680);
    *(_WORD *)(v3 + 28) = *(_DWORD *)(*((void *)this + 9) + 10684);
    *(_WORD *)(v3 + 30) = *(_DWORD *)(*((void *)this + 9) + 10688);
    *(_WORD *)(v3 + 32) = *(_DWORD *)(*((void *)this + 9) + 10692);
    *(_WORD *)(v3 + 34) = *(_DWORD *)(*((void *)this + 9) + 10696);
    *(_WORD *)(v3 + 36) = *(_DWORD *)(*((void *)this + 9) + 10700);
    *(_WORD *)(v3 + 6) = 32;
    v14[0] = v3;
    v14[1] = 40;
    uint64_t v4 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 136))(v4)) {
      uint64_t v5 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"mws");
    }
    else {
      uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"mws", (uint64_t)v14, 0, 0);
    }
    uint64_t v6 = v5;
    uint64_t v8 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (v6)
    {
      if (v8)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          int v10 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
          CCLogStream::logCrit(v9, "[dk] %s@%d:Configured WiFi Type4 Blanking WiFiEnh COEX iovar Failure, error %s\n", "setWiFiType4BlankingBitmapsWiFiEnh", 37274, v10);
        }
      }
    }
    else if (v8)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        BOOL v13 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, void))(*(void *)this + 112))(this, 0);
        CCLogStream::logAlert(v12, "[dk] %s@%d:Configured WiFi Type4 Blanking WiFiEnh COEX iovar Success with %s\n", "setWiFiType4BlankingBitmapsWiFiEnh", 37270, v13);
      }
    }
    IOFreeData();
  }
  else
  {
    uint64_t v6 = 3758097085;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:ltecx cmd (WiFiType4BlankingBitmapsWiFiEnh) alloc failed\n", "setWiFiType4BlankingBitmapsWiFiEnh", 37217);
      }
    }
  }
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setWiFiType4BlankingBitmapsWiFiEnh(AppleBCMWLANCore *this, unsigned __int8 *a2)
{
  return AppleBCMWLANCore::setWiFiType4BlankingBitmapsWiFiEnh((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setWiFiType4BlankingModeBitmapsWiFiEnh(AppleBCMWLANCore *this, unsigned __int8 *a2)
{
  uint64_t v3 = IOMallocZeroData();
  if (v3)
  {
    *(_DWORD *)uint64_t v3 = 16875520;
    *(_WORD *)(v3 + 4) = 12;
    *(void *)(v3 + 8) = 0x1C000100000001;
    *(unsigned char *)(v3 + 16) = 2;
    *(_WORD *)(v3 + 18) = *(_DWORD *)(*((void *)this + 9) + 10664);
    *(_WORD *)(v3 + 20) = 0;
    *(_WORD *)(v3 + 22) = *(_DWORD *)(*((void *)this + 9) + 10668);
    *(_WORD *)(v3 + 24) = *(_DWORD *)(*((void *)this + 9) + 10672);
    *(_WORD *)(v3 + 26) = *(_DWORD *)(*((void *)this + 9) + 10676);
    *(void *)(v3 + 28) = 0;
    *(_WORD *)(v3 + 36) = 0;
    *(_WORD *)(v3 + 6) = 32;
    v14[0] = v3;
    v14[1] = 40;
    uint64_t v4 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 136))(v4)) {
      uint64_t v5 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"mws");
    }
    else {
      uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"mws", (uint64_t)v14, 0, 0);
    }
    uint64_t v6 = v5;
    uint64_t v8 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (v6)
    {
      if (v8)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          int v10 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
          CCLogStream::logCrit(v9, "[dk] %s@%d:Configured WiFi Type4 Blanking Mode WiFiEnh COEX iovar Failure, error %s\n", "setWiFiType4BlankingModeBitmapsWiFiEnh", 37355, v10);
        }
      }
    }
    else if (v8)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        BOOL v13 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, void))(*(void *)this + 112))(this, 0);
        CCLogStream::logAlert(v12, "[dk] %s@%d:Configured WiFi Type4 Blanking Mode WiFiEnh COEX iovar Success with %s\n", "setWiFiType4BlankingModeBitmapsWiFiEnh", 37351, v13);
      }
    }
    IOFreeData();
  }
  else
  {
    uint64_t v6 = 3758097085;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:ltecx cmd (WiFiType4BlankingModeBitmapsWiFiEnh) alloc failed\n", "setWiFiType4BlankingModeBitmapsWiFiEnh", 37296);
      }
    }
  }
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setWiFiType4BlankingModeBitmapsWiFiEnh(AppleBCMWLANCore *this, unsigned __int8 *a2)
{
  return AppleBCMWLANCore::setWiFiType4BlankingModeBitmapsWiFiEnh((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setWiFiRfemConfigBitmapWiFiEnh(AppleBCMWLANCore *this, unsigned __int8 *a2)
{
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v3 = IOMallocZeroData();
  if (v3)
  {
    *(_DWORD *)uint64_t v3 = 16875520;
    *(_WORD *)(v3 + 4) = 8;
    *(void *)(v3 + 8) = 0x18000100000001;
    *(unsigned char *)(v3 + 16) = 0;
    char v4 = *(unsigned char *)(*((void *)this + 9) + 10588) & 1;
    *(unsigned char *)(v3 + 16) = v4;
    uint64_t v5 = *((void *)this + 9);
    int v6 = *(_DWORD *)(v5 + 10588);
    if ((v6 & 2) != 0)
    {
      v4 |= 2u;
      *(unsigned char *)(v3 + 16) = v4;
      uint64_t v5 = *((void *)this + 9);
      int v6 = *(_DWORD *)(v5 + 10588);
    }
    if ((v6 & 4) != 0)
    {
      *(unsigned char *)(v3 + 16) = v4 | 4;
      uint64_t v5 = *((void *)this + 9);
    }
    *(_WORD *)(v3 + 18) = *(_DWORD *)(v5 + 10552);
    *(_WORD *)(v3 + 20) = *(_DWORD *)(*((void *)this + 9) + 10556);
    *(_WORD *)(v3 + 22) = *(_DWORD *)(*((void *)this + 9) + 10560);
    *(_WORD *)(v3 + 24) = *(_DWORD *)(*((void *)this + 9) + 10564);
    *(_WORD *)(v3 + 26) = *(_DWORD *)(*((void *)this + 9) + 10568);
    *(_WORD *)(v3 + 28) = *(_DWORD *)(*((void *)this + 9) + 10572);
    *(_WORD *)(v3 + 30) = *(_DWORD *)(*((void *)this + 9) + 10576);
    *(_WORD *)(v3 + 32) = *(_DWORD *)(*((void *)this + 9) + 10580);
    *(_WORD *)(v3 + 34) = *(_DWORD *)(*((void *)this + 9) + 10584);
    *(_WORD *)(v3 + 6) = 28;
    unint64_t v17 = v3;
    unint64_t v18 = 36;
    uint64_t v7 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 136))(v7)) {
      uint64_t v8 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"mws");
    }
    else {
      uint64_t v8 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"mws", (uint64_t)&v17, 0, 0);
    }
    uint64_t v9 = v8;
    uint64_t v11 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (v9)
    {
      if (v11)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          BOOL v13 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v9);
          CCLogStream::logCrit(v12, "[dk] %s@%d:Configured WiFi rFEM Config WiFiEnh COEX iovar Failure, error %s\n", "setWiFiRfemConfigBitmapWiFiEnh", 37454, v13);
        }
      }
    }
    else if (v11)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        BOOL v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int v16 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, void))(*(void *)this + 112))(this, 0);
        CCLogStream::logAlert(v15, "[dk] %s@%d:Configured WiFi rFEM Config WiFiEnh COEX iovar Success with %s\n", "setWiFiRfemConfigBitmapWiFiEnh", 37450, v16);
      }
    }
    IOFreeData();
  }
  else
  {
    uint64_t v9 = 3758097085;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v10, "[dk] %s@%d:ltecx cmd (setWiFiRfemConfigBitmapWiFiEnh) alloc failed\n", "setWiFiRfemConfigBitmapWiFiEnh", 37379);
      }
    }
  }
  return v9;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setWiFiRfemConfigBitmapWiFiEnh(AppleBCMWLANCore *this, unsigned __int8 *a2)
{
  return AppleBCMWLANCore::setWiFiRfemConfigBitmapWiFiEnh((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setWiFiAssocProtectionConfigBitmapWiFiEnh(AppleBCMWLANCore *this, unsigned __int8 *a2)
{
  uint64_t v3 = IOMallocZeroData();
  if (v3)
  {
    *(_DWORD *)uint64_t v3 = 16875520;
    *(_WORD *)(v3 + 4) = 13;
    *(void *)(v3 + 8) = 0x18000100000001;
    *(unsigned char *)(v3 + 16) = 7;
    *(_WORD *)(v3 + 18) = *(_DWORD *)(*((void *)this + 9) + 10552);
    *(_WORD *)(v3 + 20) = *(_DWORD *)(*((void *)this + 9) + 10556);
    *(_WORD *)(v3 + 22) = *(_DWORD *)(*((void *)this + 9) + 10560);
    *(_WORD *)(v3 + 24) = *(_DWORD *)(*((void *)this + 9) + 10564);
    *(_WORD *)(v3 + 26) = *(_DWORD *)(*((void *)this + 9) + 10568);
    *(_WORD *)(v3 + 28) = *(_DWORD *)(*((void *)this + 9) + 10572);
    *(_WORD *)(v3 + 30) = *(_DWORD *)(*((void *)this + 9) + 10576);
    *(_WORD *)(v3 + 32) = *(_DWORD *)(*((void *)this + 9) + 10580);
    *(_WORD *)(v3 + 34) = *(_DWORD *)(*((void *)this + 9) + 10584);
    *(_WORD *)(v3 + 6) = 28;
    v14[0] = v3;
    v14[1] = 36;
    uint64_t v4 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 136))(v4)) {
      uint64_t v5 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"mws");
    }
    else {
      uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"mws", (uint64_t)v14, 0, 0);
    }
    uint64_t v6 = v5;
    uint64_t v8 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (v6)
    {
      if (v8)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          int v10 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
          CCLogStream::logCrit(v9, "[dk] %s@%d:Configured WiFi Assoc Protection Config WiFiEnh COEX iovar Failure, error %s\n", "setWiFiAssocProtectionConfigBitmapWiFiEnh", 37535, v10);
        }
      }
    }
    else if (v8)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        BOOL v13 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, void))(*(void *)this + 112))(this, 0);
        CCLogStream::logAlert(v12, "[dk] %s@%d:Configured WiFi Assoc Protection Config WiFiEnh COEX iovar Success with %s\n", "setWiFiAssocProtectionConfigBitmapWiFiEnh", 37531, v13);
      }
    }
    IOFreeData();
  }
  else
  {
    uint64_t v6 = 3758097085;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:ltecx cmd (setWiFiAssocProtectionConfigBitmapWiFiEnh) alloc failed\n", "setWiFiAssocProtectionConfigBitmapWiFiEnh", 37477);
      }
    }
  }
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setWiFiAssocProtectionConfigBitmapWiFiEnh(AppleBCMWLANCore *this, unsigned __int8 *a2)
{
  return AppleBCMWLANCore::setWiFiAssocProtectionConfigBitmapWiFiEnh((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setSCAN_FREQ_CHANNELS(AppleBCMWLANCore *this, unsigned __int8 *a2)
{
  uint64_t v3 = *((void *)this + 9);
  uint64_t v4 = *(AppleBCMWLANCommander **)(v3 + 5416);
  v9[0] = v3 + 10424;
  v9[1] = 10;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"mws_scanreq_bm", (uint64_t)v9, 0, 0);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
        CCLogStream::logCrit(v7, "[dk] %s@%d: mws_scanreq_bm failed, error %s\n", "setSCAN_FREQ_CHANNELS", 37549, v8);
      }
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setSCAN_FREQ_CHANNELS(AppleBCMWLANCore *this, unsigned __int8 *a2)
{
  return AppleBCMWLANCore::setSCAN_FREQ_CHANNELS((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setLTE_TDD_CHANNELS(AppleBCMWLANCore *this, unsigned int *a2)
{
  uint64_t v3 = *((void *)this + 9);
  uint64_t v4 = *(AppleBCMWLANCommander **)(v3 + 5416);
  v9[0] = v3 + 10436;
  v9[1] = 4;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"mws_tscoex_bitmap", (uint64_t)v9, 0, 0);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
        CCLogStream::logCrit(v7, "[dk] %s@%d: mws_tscoex_bitmap failed, error %s\n", "setLTE_TDD_CHANNELS", 37562, v8);
      }
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setLTE_TDD_CHANNELS(AppleBCMWLANCore *this, unsigned int *a2)
{
  return AppleBCMWLANCore::setLTE_TDD_CHANNELS((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setANTENNA_SELECTION(AppleBCMWLANCore *this, unsigned __int8 *a2)
{
  uint64_t v3 = *((void *)this + 9);
  uint64_t v4 = *(AppleBCMWLANCommander **)(v3 + 5416);
  v9[0] = v3 + 10440;
  v9[1] = 8;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"mws_antenna_selection", (uint64_t)v9, 0, 0);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
        CCLogStream::logCrit(v7, "[dk] %s@%d: mws_antenna_selection failed, error %s\n", "setANTENNA_SELECTION", 37574, v8);
      }
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setANTENNA_SELECTION(AppleBCMWLANCore *this, unsigned __int8 *a2)
{
  return AppleBCMWLANCore::setANTENNA_SELECTION((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setANTENNA_SELECTION_V2(AppleBCMWLANCore *this, unsigned __int8 *a2)
{
  uint64_t v3 = *((void *)this + 9);
  uint64_t v4 = *(AppleBCMWLANCommander **)(v3 + 5416);
  v9[0] = v3 + 10448;
  v9[1] = 32;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"mws_antenna_selection_2nd", (uint64_t)v9, 0, 0);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
        CCLogStream::logCrit(v7, "[dk] %s@%d: mws_antenna_selection_2nd failed, error %s\n", "setANTENNA_SELECTION_V2", 37586, v8);
      }
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setANTENNA_SELECTION_V2(AppleBCMWLANCore *this, unsigned __int8 *a2)
{
  return AppleBCMWLANCore::setANTENNA_SELECTION_V2((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setANTENNA_SELECTION_V3_WiFiEnh(AppleBCMWLANCore *this, unsigned __int8 *a2)
{
  uint64_t v3 = IOMallocZeroData();
  if (v3)
  {
    uint64_t v4 = v3;
    *(_DWORD *)uint64_t v3 = 16875520;
    *(_WORD *)(v3 + 4) = 4;
    *(void *)(v3 + 8) = 0x68000300000001;
    int v5 = *(unsigned __int16 *)(*((void *)this + 9) + 10480);
    *(_WORD *)(v3 + 16) = v5;
    switch(v5)
    {
      case 1:
        for (uint64_t i = 0; i != 16; i += 2)
          *(_WORD *)(v3 + 18 + i) = *(_WORD *)(*((void *)this + 9) + i + 10482);
        break;
      case 2:
        for (uint64_t j = 0; j != 16; j += 2)
          *(_WORD *)(v3 + 50 + j) = *(_WORD *)(*((void *)this + 9) + j + 10482);
        break;
      case 3:
        for (uint64_t k = 0; k != 16; k += 2)
          *(_WORD *)(v3 + 82 + k) = *(_WORD *)(*((void *)this + 9) + k + 10482);
        break;
      default:
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            int v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v19, "[dk] %s@%d:Invalid band index (%d) for WiFi Antenna Selection WiFiEnh COEX iovar.\n", "setANTENNA_SELECTION_V3_WiFiEnh", 37657, *(unsigned __int16 *)(v4 + 16));
          }
        }
        break;
    }
    *(_WORD *)(v4 + 6) = 108;
    v20[0] = v4;
    v20[1] = 116;
    uint64_t v11 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 136))(v11)) {
      uint64_t v12 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"mws");
    }
    else {
      uint64_t v12 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"mws", (uint64_t)v20, 0, 0);
    }
    uint64_t v7 = v12;
    uint64_t v13 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (v7)
    {
      if (v13)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          BOOL v15 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v7);
          CCLogStream::logCrit(v14, "[dk] %s@%d:Configured WiFi Antenna Selection WiFiEnh COEX iovar Failure, error %s\n", "setANTENNA_SELECTION_V3_WiFiEnh", 37684, v15);
        }
      }
    }
    else if (v13)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        unint64_t v18 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, void))(*(void *)this + 112))(this, 0);
        CCLogStream::logAlert(v17, "[dk] %s@%d:Configured WiFi Antenna Selection WiFiEnh COEX iovar Success with %s\n", "setANTENNA_SELECTION_V3_WiFiEnh", 37680, v18);
      }
    }
    IOFreeData();
  }
  else
  {
    uint64_t v7 = 3758097085;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v8, "[dk] %s@%d:ltecx cmd (WiFiAntennaSelectionBitmapsWiFiEnh) alloc failed\n", "setANTENNA_SELECTION_V3_WiFiEnh", 37609);
      }
    }
  }
  return v7;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setANTENNA_SELECTION_V3_WiFiEnh(AppleBCMWLANCore *this, unsigned __int8 *a2)
{
  return AppleBCMWLANCore::setANTENNA_SELECTION_V3_WiFiEnh((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setWlanRxProt(AppleBCMWLANCore *this, int *a2)
{
  uint64_t v3 = *((void *)this + 9);
  int v10 = *(_DWORD *)(v3 + 10500);
  uint64_t v4 = *(AppleBCMWLANCommander **)(v3 + 5416);
  v9[0] = &v10;
  v9[1] = 4;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"mws_wlanrx_prot", (uint64_t)v9, 0, 0);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
        CCLogStream::logCrit(v7, "[dk] %s@%d: mws_wlanrx_prot failed, error %s\n", "setWlanRxProt", 37699, v8);
      }
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setWlanRxProt(AppleBCMWLANCore *this, int *a2)
{
  return AppleBCMWLANCore::setWlanRxProt((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setWCI2TxInd(AppleBCMWLANCore *this, int *a2)
{
  uint64_t v3 = *((void *)this + 9);
  int v10 = *(_DWORD *)(v3 + 10504);
  uint64_t v4 = *(AppleBCMWLANCommander **)(v3 + 5416);
  v9[0] = &v10;
  v9[1] = 4;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"wci2_txind", (uint64_t)v9, 0, 0);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
        CCLogStream::logCrit(v7, "[dk] %s@%d: wci2_txind failed, error %s\n", "setWCI2TxInd", 37714, v8);
      }
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setWCI2TxInd(AppleBCMWLANCore *this, int *a2)
{
  return AppleBCMWLANCore::setWCI2TxInd((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setScanJoinProt(AppleBCMWLANCore *this, int *a2)
{
  uint64_t v3 = *((void *)this + 9);
  int v10 = *(_DWORD *)(v3 + 10508);
  uint64_t v4 = *(AppleBCMWLANCommander **)(v3 + 5416);
  v9[0] = &v10;
  v9[1] = 4;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"mws_scanjoin_prot", (uint64_t)v9, 0, 0);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
        CCLogStream::logCrit(v7, "[dk] %s@%d: mws_scanjoin_prot failed, error %s\n", "setScanJoinProt", 37729, v8);
      }
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setScanJoinProt(AppleBCMWLANCore *this, int *a2)
{
  return AppleBCMWLANCore::setScanJoinProt((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setAutoProtParams(AppleBCMWLANCore *this, int *a2)
{
  uint64_t v3 = *((void *)this + 9);
  uint64_t v10 = *(void *)(v3 + 10512);
  uint64_t v4 = *(AppleBCMWLANCommander **)(v3 + 5416);
  v9[0] = &v10;
  v9[1] = 8;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"mws_autoprot_params", (uint64_t)v9, 0, 0);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
        CCLogStream::logAlert(v7, "[dk] %s@%d: mws_autoprot_params failed, error %s\n", "setAutoProtParams", 37751, v8);
      }
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setAutoProtParams(AppleBCMWLANCore *this, int *a2)
{
  return AppleBCMWLANCore::setAutoProtParams((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setMwsFrameConfig(AppleBCMWLANCore *this, unsigned __int8 *a2)
{
  uint64_t v3 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  uint64_t v4 = 28;
  if (!a2) {
    uint64_t v4 = 0;
  }
  v9[0] = a2;
  v9[1] = v4;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v3, (uint64_t)"mws_frame_config", (uint64_t)v9, 0, 0);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
        CCLogStream::logAlert(v7, "[dk] %s@%d: mws_frame_config failed, error %s\n", "setMwsFrameConfig", 37773, v8);
      }
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setMwsFrameConfig(AppleBCMWLANCore *this, unsigned __int8 *a2)
{
  return AppleBCMWLANCore::setMwsFrameConfig((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setWCI2TxEnvelopeIndEnable(AppleBCMWLANCore *this, int *a2)
{
  uint64_t v3 = *((void *)this + 9);
  int v10 = *(unsigned __int8 *)(v3 + 10520);
  uint64_t v4 = *(AppleBCMWLANCommander **)(v3 + 5416);
  v9[0] = &v10;
  v9[1] = 4;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"wci2_tx_envelope_ind_2g", (uint64_t)v9, 0, 0);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
        CCLogStream::logCrit(v7, "[dk] %s@%d: wci2_tx_envelope_ind_2g failed, error %s\n", "setWCI2TxEnvelopeIndEnable", 37789, v8);
      }
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setWCI2TxEnvelopeIndEnable(AppleBCMWLANCore *this, int *a2)
{
  return AppleBCMWLANCore::setWCI2TxEnvelopeIndEnable((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setWCI2TxEnvelopeIdleTimeout(AppleBCMWLANCore *this, int *a2)
{
  uint64_t v3 = *((void *)this + 9);
  int v10 = *(unsigned __int16 *)(v3 + 10522);
  uint64_t v4 = *(AppleBCMWLANCommander **)(v3 + 5416);
  v9[0] = &v10;
  v9[1] = 4;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"mws_tx_envelope_idle_timer", (uint64_t)v9, 0, 0);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
        CCLogStream::logCrit(v7, "[dk] %s@%d: mws_tx_envelope_idle_timer failed, error %s\n", "setWCI2TxEnvelopeIdleTimeout", 37804, v8);
      }
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setWCI2TxEnvelopeIdleTimeout(AppleBCMWLANCore *this, int *a2)
{
  return AppleBCMWLANCore::setWCI2TxEnvelopeIdleTimeout((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setWCI2TxInd5G(AppleBCMWLANCore *this, int *a2)
{
  uint64_t v3 = *((void *)this + 9);
  int v10 = *(unsigned __int8 *)(v3 + 10524);
  uint64_t v4 = *(AppleBCMWLANCommander **)(v3 + 5416);
  v9[0] = &v10;
  v9[1] = 4;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"wci2_txind_5g", (uint64_t)v9, 0, 0);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
        CCLogStream::logCrit(v7, "[dk] %s@%d: wci2_txind_5g failed, error %s\n", "setWCI2TxInd5G", 37819, v8);
      }
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setWCI2TxInd5G(AppleBCMWLANCore *this, int *a2)
{
  return AppleBCMWLANCore::setWCI2TxInd5G((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setWiFiConditionIdBitmapsWiFiEnh(AppleBCMWLANCore *this, unsigned __int8 *a2)
{
  uint64_t v3 = IOMallocZeroData();
  if (v3)
  {
    *(_DWORD *)uint64_t v3 = 16875520;
    *(_WORD *)(v3 + 4) = 10;
    *(void *)(v3 + 8) = 0x18000100000001;
    *(unsigned char *)(v3 + 16) = 7;
    *(unsigned char *)(v3 + 17) = *(unsigned char *)(*((void *)this + 9) + 10704);
    *(_WORD *)(v3 + 18) = *(_DWORD *)(*((void *)this + 9) + 10552);
    *(_WORD *)(v3 + 20) = *(_DWORD *)(*((void *)this + 9) + 10556);
    *(_WORD *)(v3 + 22) = *(_DWORD *)(*((void *)this + 9) + 10560);
    *(_WORD *)(v3 + 24) = *(_DWORD *)(*((void *)this + 9) + 10564);
    *(_WORD *)(v3 + 26) = *(_DWORD *)(*((void *)this + 9) + 10568);
    *(_WORD *)(v3 + 28) = *(_DWORD *)(*((void *)this + 9) + 10572);
    *(_WORD *)(v3 + 30) = *(_DWORD *)(*((void *)this + 9) + 10576);
    *(_WORD *)(v3 + 32) = *(_DWORD *)(*((void *)this + 9) + 10580);
    *(_WORD *)(v3 + 34) = *(_DWORD *)(*((void *)this + 9) + 10584);
    *(_WORD *)(v3 + 6) = 28;
    v14[0] = v3;
    v14[1] = 36;
    uint64_t v4 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 136))(v4)) {
      uint64_t v5 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"mws");
    }
    else {
      uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"mws", (uint64_t)v14, 0, 0);
    }
    uint64_t v6 = v5;
    uint64_t v8 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (v6)
    {
      if (v8)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          int v10 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
          CCLogStream::logCrit(v9, "[dk] %s@%d:Configured WiFi conditin id bm WiFiEnh COEX iovar Failure, error %s\n", "setWiFiConditionIdBitmapsWiFiEnh", 37901, v10);
        }
      }
    }
    else if (v8)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v13 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, void))(*(void *)this + 112))(this, 0);
        CCLogStream::logAlert(v12, "[dk] %s@%d:Configured WiFi condition id bm WiFiEnh COEX iovar Success with %s\n", "setWiFiConditionIdBitmapsWiFiEnh", 37897, v13);
      }
    }
    IOFreeData();
  }
  else
  {
    uint64_t v6 = 3758097085;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:ltecx cmd (setWiFiConditionIdBitmapsWiFiEnh) alloc failed\n", "setWiFiConditionIdBitmapsWiFiEnh", 37842);
      }
    }
  }
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setWiFiConditionIdBitmapsWiFiEnh(AppleBCMWLANCore *this, unsigned __int8 *a2)
{
  return AppleBCMWLANCore::setWiFiConditionIdBitmapsWiFiEnh((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setWCI2TxDurThresh(AppleBCMWLANCore *this, int *a2)
{
  uint64_t v3 = *((void *)this + 9);
  int v10 = *(unsigned __int16 *)(v3 + 10526);
  uint64_t v4 = *(AppleBCMWLANCommander **)(v3 + 5416);
  v9[0] = &v10;
  v9[1] = 4;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"wci2_txdur_thresh", (uint64_t)v9, 0, 0);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
        CCLogStream::logCrit(v7, "[dk] %s@%d: wci2_txdur_thresh failed, error %s\n", "setWCI2TxDurThresh", 37919, v8);
      }
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setWCI2TxDurThresh(AppleBCMWLANCore *this, int *a2)
{
  return AppleBCMWLANCore::setWCI2TxDurThresh((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setmwsActiveScanThrottle(AppleBCMWLANCore *this, int *a2)
{
  uint64_t v3 = *((void *)this + 9);
  int v10 = *(_DWORD *)(v3 + 10528);
  uint64_t v4 = *(AppleBCMWLANCommander **)(v3 + 5416);
  v9[0] = &v10;
  v9[1] = 4;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"mws_active_scan_throttle", (uint64_t)v9, 0, 0);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
        CCLogStream::logCrit(v7, "[dk] %s@%d: mws_active_scan_throttle failed, error %s\n", "setmwsActiveScanThrottle", 37934, v8);
      }
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setmwsActiveScanThrottle(AppleBCMWLANCore *this, int *a2)
{
  return AppleBCMWLANCore::setmwsActiveScanThrottle((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setmwsActiveScanThrottleDwellTime(AppleBCMWLANCore *this, int *a2)
{
  uint64_t v3 = *((void *)this + 9);
  int v10 = *(_DWORD *)(v3 + 10532);
  uint64_t v4 = *(AppleBCMWLANCommander **)(v3 + 5416);
  v9[0] = &v10;
  v9[1] = 4;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"mws_active_dwell_time", (uint64_t)v9, 0, 0);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
        CCLogStream::logCrit(v7, "[dk] %s@%d: mws_active_dwell_time failed, error %s\n", "setmwsActiveScanThrottleDwellTime", 37949, v8);
      }
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setmwsActiveScanThrottleDwellTime(AppleBCMWLANCore *this, int *a2)
{
  return AppleBCMWLANCore::setmwsActiveScanThrottleDwellTime((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setGPIOTxEnvelopeInd(AppleBCMWLANCore *this, int *a2)
{
  uint64_t v3 = *((void *)this + 9);
  int v10 = *(unsigned __int8 *)(v3 + 10536);
  uint64_t v4 = *(AppleBCMWLANCommander **)(v3 + 5416);
  v9[0] = &v10;
  v9[1] = 4;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"gpio_tx_envelope_ind", (uint64_t)v9, 0, 0);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
        CCLogStream::logCrit(v7, "[dk] %s@%d: gpio_tx_envelope_ind failed, error %s\n", "setGPIOTxEnvelopeInd", 37964, v8);
      }
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setGPIOTxEnvelopeInd(AppleBCMWLANCore *this, int *a2)
{
  return AppleBCMWLANCore::setGPIOTxEnvelopeInd((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setPowerProfile(AppleBCMWLANCore *this)
{
  return AppleBCMWLANConfigManager::setPowerProfile(*(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472), *(_DWORD *)(*((void *)this + 9) + 10740));
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setPowerProfile(AppleBCMWLANCore *this)
{
  return AppleBCMWLANConfigManager::setPowerProfile(*(AppleBCMWLANConfigManager **)(*((void *)this + 1) + 5472), *(_DWORD *)(*((void *)this + 1) + 10740));
}

uint64_t AppleBCMWLANCore::setUCMCoexProfileV1(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  *(_WORD *)uint64_t v3 = *(_WORD *)a2;
  *(_WORD *)(v3 + 4) = 24;
  *(_WORD *)(v3 + 2) = v4;
  *(unsigned char *)(v3 + 6) = *(unsigned char *)(a2 + 2);
  LODWORD(v5) = *(unsigned __int8 *)(a2 + 3);
  *(unsigned char *)(v3 + 7) = v5;
  *(unsigned char *)(v3 + 8) = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(v3 + 9) = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(v3 + 10) = *(unsigned char *)(a2 + 6);
  *(unsigned char *)(v3 + 11) = *(unsigned char *)(a2 + 7);
  *(unsigned char *)(v3 + 12) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(v3 + 13) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(v3 + 14) = *(unsigned char *)(a2 + 10);
  *(unsigned char *)(v3 + 15) = *(unsigned char *)(a2 + 11);
  *(unsigned char *)(v3 + 16) = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(v3 + 17) = *(unsigned char *)(a2 + 13);
  *(unsigned char *)(v3 + 18) = *(unsigned char *)(a2 + 14);
  *(unsigned char *)(v3 + 19) = *(unsigned char *)(a2 + 15);
  *(unsigned char *)(v3 + 20) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(v3 + 21) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(v3 + 22) = *(unsigned char *)(a2 + 18);
  if (v5 >= 5) {
    uint64_t v5 = 5;
  }
  else {
    uint64_t v5 = v5;
  }
  if (v5)
  {
    uint64_t v6 = (_DWORD *)(v3 + 27);
    uint64_t v7 = a2 + 20;
    do
    {
      *(_WORD *)((char *)v6 - 3) = 8;
      *((unsigned char *)v6 - 1) = *(unsigned char *)v7;
      *uint64_t v6 = *(_DWORD *)(v7 + 3);
      v6 += 2;
      v7 += 7;
      --v5;
    }
    while (v5);
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setUCMCoexProfileV1(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return 0;
}

uint64_t AppleBCMWLANCore::setUCMCoexProfileV2(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  *(_WORD *)uint64_t v3 = *(_WORD *)a2;
  *(_WORD *)(v3 + 4) = 24;
  *(_WORD *)(v3 + 2) = v4;
  *(unsigned char *)(v3 + 6) = *(unsigned char *)(a2 + 2);
  LODWORD(v5) = *(unsigned __int8 *)(a2 + 3);
  *(unsigned char *)(v3 + 7) = v5;
  *(unsigned char *)(v3 + 8) = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(v3 + 9) = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(v3 + 10) = *(unsigned char *)(a2 + 6);
  *(unsigned char *)(v3 + 11) = *(unsigned char *)(a2 + 7);
  *(unsigned char *)(v3 + 12) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(v3 + 13) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(v3 + 14) = *(unsigned char *)(a2 + 10);
  *(unsigned char *)(v3 + 15) = *(unsigned char *)(a2 + 11);
  *(unsigned char *)(v3 + 16) = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(v3 + 17) = *(unsigned char *)(a2 + 13);
  *(unsigned char *)(v3 + 18) = *(unsigned char *)(a2 + 14);
  *(unsigned char *)(v3 + 19) = *(unsigned char *)(a2 + 15);
  *(unsigned char *)(v3 + 20) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(v3 + 21) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(v3 + 22) = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(v3 + 23) = *(unsigned char *)(a2 + 19);
  if (v5 >= 5) {
    uint64_t v5 = 5;
  }
  else {
    uint64_t v5 = v5;
  }
  if (v5)
  {
    uint64_t v6 = (_DWORD *)(v3 + 27);
    uint64_t v7 = a2 + 20;
    do
    {
      *(_WORD *)((char *)v6 - 3) = 8;
      *((unsigned char *)v6 - 1) = *(unsigned char *)v7;
      *uint64_t v6 = *(_DWORD *)(v7 + 3);
      v6 += 2;
      v7 += 7;
      --v5;
    }
    while (v5);
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setUCMCoexProfileV2(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return 0;
}

uint64_t AppleBCMWLANCore::setUCMCoexProfileV3(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  *(_WORD *)uint64_t v3 = *(_WORD *)a2;
  *(_WORD *)(v3 + 4) = 24;
  *(_WORD *)(v3 + 2) = v4;
  *(unsigned char *)(v3 + 6) = *(unsigned char *)(a2 + 2);
  LODWORD(v5) = *(unsigned __int8 *)(a2 + 3);
  *(unsigned char *)(v3 + 7) = v5;
  *(unsigned char *)(v3 + 8) = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(v3 + 9) = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(v3 + 10) = *(unsigned char *)(a2 + 6);
  *(unsigned char *)(v3 + 11) = *(unsigned char *)(a2 + 7);
  *(unsigned char *)(v3 + 12) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(v3 + 13) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(v3 + 14) = *(unsigned char *)(a2 + 10);
  *(unsigned char *)(v3 + 15) = *(unsigned char *)(a2 + 11);
  *(unsigned char *)(v3 + 16) = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(v3 + 17) = *(unsigned char *)(a2 + 13);
  *(unsigned char *)(v3 + 18) = *(unsigned char *)(a2 + 14);
  *(unsigned char *)(v3 + 19) = *(unsigned char *)(a2 + 15);
  *(unsigned char *)(v3 + 20) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(v3 + 21) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(v3 + 22) = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(v3 + 23) = *(unsigned char *)(a2 + 19);
  if (v5 >= 5) {
    uint64_t v5 = 5;
  }
  else {
    uint64_t v5 = v5;
  }
  if (v5)
  {
    uint64_t v6 = v3 + 31;
    uint64_t v7 = a2 + 26;
    do
    {
      *(_WORD *)(v6 - 7) = 8;
      *(_DWORD *)(v6 - 5) = *(_DWORD *)(v7 - 5);
      *(_WORD *)(v6 - 1) = *(_WORD *)(v7 - 1);
      v6 += 8;
      v7 += 7;
      --v5;
    }
    while (v5);
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setUCMCoexProfileV3(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return 0;
}

uint64_t AppleBCMWLANCore::setBTCOEX_PROFILE(void *a1, unsigned __int16 *a2)
{
  uint64_t v3 = 3758097090;
  if (a2)
  {
    if (*((unsigned __int8 *)a2 + 3) <= 4u)
    {
      int v5 = *a2;
      if ((v5 - 4) >= 0xFFFFFFFD && *((unsigned __int8 *)a2 + 4) <= 9uLL)
      {
        uint64_t v6 = a1[9] + 56 * *((unsigned __int8 *)a2 + 4) + 8926;
        long long v7 = *(_OWORD *)a2;
        long long v8 = *((_OWORD *)a2 + 1);
        long long v9 = *((_OWORD *)a2 + 2);
        *(void *)(v6 + 48) = *((void *)a2 + 6);
        *(_OWORD *)(v6 + 16) = v8;
        *(_OWORD *)(v6 + 32) = v9;
        *(_OWORD *)uint64_t v6 = v7;
        if ((v5 - 1) > 2) {
          uint64_t v10 = 0;
        }
        else {
          uint64_t v10 = 8 * *((unsigned __int8 *)a2 + 3) + 24;
        }
        AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(a1[9] + 5416));
        uint64_t v11 = IOMallocZeroData();
        uint64_t v22 = IOMallocZeroData();
        uint64_t v23 = v10;
        unint64_t v24 = 0xAAAAAAAA00000004;
        uint64_t v3 = 3758097085;
        if (v22)
        {
          if (v11)
          {
            switch(v5)
            {
              case 3:
                (*(void (**)(void *, unsigned __int16 *, uint64_t *))(*a1 + 1568))(a1, a2, &v22);
                break;
              case 2:
                (*(void (**)(void *, unsigned __int16 *, uint64_t *))(*a1 + 1560))(a1, a2, &v22);
                break;
              case 1:
                (*(void (**)(void *, unsigned __int16 *, uint64_t *))(*a1 + 1552))(a1, a2, &v22);
                break;
            }
            uint64_t v12 = v22;
            uint64_t v13 = (unsigned __int16)v23;
            if (v22 == 0 || (unsigned __int16)v23 == 0)
            {
              uint64_t v13 = 0;
              uint64_t v12 = 0;
            }
            v21[0] = v12;
            v21[1] = v13;
            unsigned __int16 MaxCmdRxPayload = AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(a1[9] + 5416));
            unint64_t v15 = ((unint64_t)(unsigned __int16)AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(a1[9] + 5416)) << 32) | MaxCmdRxPayload;
            if (MaxCmdRxPayload)
            {
              uint64_t v16 = v11;
            }
            else
            {
              unint64_t v15 = 0;
              uint64_t v16 = 0;
            }
            v20[0] = v16;
            v20[1] = v15;
            uint64_t v3 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(a1[9] + 5416), (uint64_t)"btc_profile", (uint64_t)v21, (uint64_t)v20, 0);
            if (!v22)
            {
LABEL_24:
              IOFreeData();
LABEL_25:
              if (!v3) {
                return v3;
              }
              goto LABEL_26;
            }
          }
          IOFreeData();
        }
        if (!v11) {
          goto LABEL_25;
        }
        goto LABEL_24;
      }
    }
  }
LABEL_26:
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      unint64_t v18 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      int v19 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 112))(a1, v3);
      CCLogStream::logCrit(v18, "[dk] %s@%d:BTC_PROFILE failed, error %s\n", "setBTCOEX_PROFILE", 38199, v19);
    }
  }
  return v3;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setBTCOEX_PROFILE(uint64_t a1, unsigned __int16 *a2)
{
  return AppleBCMWLANCore::setBTCOEX_PROFILE((void *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::setBTCOEX_PROFILE_ACTIVE(void *a1, uint64_t a2)
{
  if (!a2) {
    return 3758097090;
  }
  uint64_t v3 = *(AppleBCMWLANCommander **)(a1[9] + 5416);
  v8[0] = a2 + 4;
  v8[1] = 4;
  uint64_t v4 = AppleBCMWLANCommander::runIOVarSet(v3, (uint64_t)"btc_profile_active", (uint64_t)v8, 0, 0);
  if (v4)
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        long long v7 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 112))(a1, v4);
        CCLogStream::logCrit(v6, "[dk] %s@%d:BTC_PROFILE_ACTIVE failed, error %s\n", "setBTCOEX_PROFILE_ACTIVE", 38213, v7);
      }
    }
  }
  return v4;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setBTCOEX_PROFILE_ACTIVE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setBTCOEX_PROFILE_ACTIVE((void *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::setBTCOEX_2G_CHAIN_DISABLE(void *a1, uint64_t a2)
{
  uint64_t v2 = 3758097085;
  if (!a2) {
    return 3758097090;
  }
  __int16 v4 = *(_WORD *)(a2 + 4);
  uint64_t v5 = IOMallocZeroData();
  *(_DWORD *)uint64_t v5 = 393217;
  *(_WORD *)(v5 + 4) = v4;
  v15[0] = v5;
  v15[1] = 6;
  AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(a1[9] + 5416));
  uint64_t v6 = IOMallocZeroData();
  if (v6)
  {
    uint64_t v7 = v6;
    unsigned __int16 MaxCmdRxPayload = AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(a1[9] + 5416));
    unint64_t v9 = ((unint64_t)(unsigned __int16)AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(a1[9] + 5416)) << 32) | MaxCmdRxPayload;
    if (MaxCmdRxPayload)
    {
      uint64_t v10 = v7;
    }
    else
    {
      unint64_t v9 = 0;
      uint64_t v10 = 0;
    }
    v14[0] = v10;
    v14[1] = v9;
    uint64_t v2 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(a1[9] + 5416), (uint64_t)"btc_2g_shchain_disable", (uint64_t)v15, (uint64_t)v14, 0);
    IOFreeData();
    IOFreeData();
    if (v2)
    {
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          uint64_t v12 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 112))(a1, v2);
          CCLogStream::logCrit(v11, "[dk] %s@%d:btc_2g_schain_disable failed, error %s\n", "setBTCOEX_2G_CHAIN_DISABLE", 38251, v12);
        }
      }
    }
  }
  else
  {
    IOFreeData();
  }
  return v2;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setBTCOEX_2G_CHAIN_DISABLE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setBTCOEX_2G_CHAIN_DISABLE((void *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::setRANGING_ENABLE(void *a1, uint64_t a2)
{
  memset(v27, 170, 34);
  v26[0] = a1;
  v26[1] = AppleBCMWLANCore::setRangingAsyncCallBack;
  v26[2] = 0;
  if (!a2) {
    return 3758096385;
  }
  if (!*(_DWORD *)(a2 + 4))
  {
    if (*(unsigned char *)(a1[9] + 18270))
    {
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          int v21 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logAlert(v21, "[dk] %s@%d:Receive disable ranging before ranging ended, stop ranging!", "setRANGING_ENABLE", 38275);
        }
      }
      memcpy(__dst, &unk_100370620, sizeof(__dst));
      __dst[0] = 1;
      (*(void (**)(void *, void *))(*a1 + 1600))(a1, __dst);
      int v5 = *(_DWORD *)(a2 + 4);
      LODWORD(v27[2]) = 1180416;
      if (v5) {
        goto LABEL_4;
      }
    }
    else
    {
      LODWORD(v27[2]) = 1180416;
    }
    __int16 v4 = 3;
    goto LABEL_13;
  }
  LODWORD(v27[2]) = 1180416;
LABEL_4:
  __int16 v4 = 2;
LABEL_13:
  WORD2(v27[2]) = v4;
  *(_DWORD *)((char *)&v27[2] + 6) = 4;
  BYTE2(v27[3]) = 1;
  HIDWORD(v27[3]) = 0;
  if (IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(a1[9] + 11312)) == -1
    || IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(a1[9] + 11312)) >= 0xC)
  {
    if (!(*(uint64_t (**)(void *))(*a1 + 1848))(a1)) {
      return 3758096385;
    }
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (!CCLogStream::shouldLog()) {
      return 3758096385;
    }
    uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
    int v7 = 38294;
LABEL_39:
    CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: %s:%u fProximityInterface not initialized, bailing out\n", "setRANGING_ENABLE", v7, "setRANGING_ENABLE", v7);
    return 3758096385;
  }
  v27[0] = &v27[2];
  v27[1] = 18;
  uint64_t v8 = a1[9];
  unint64_t v9 = *(AppleBCMWLANCommander **)(v8 + 5416);
  unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(v8 + 11312));
  uint64_t v11 = AppleBCMWLANCommander::sendVirtualIOVarSet(v9, InterfaceId, "proxd", (uint64_t)v27, kNoRxExpected, (uint64_t)v26, 0);
  if (v11)
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v22 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        if (*(_DWORD *)(a2 + 4)) {
          uint64_t v23 = "enable";
        }
        else {
          uint64_t v23 = "disable";
        }
        unint64_t v24 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 112))(a1, v11);
        CCLogStream::logAlert(v22, "[dk] %s@%d: Error: Unable to %s proxd ftm : %s\n", "setRANGING_ENABLE", 38305, v23, v24);
      }
    }
  }
  if (IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(a1[9] + 11312)) == -1
    || IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(a1[9] + 11312)) >= 0xC)
  {
    if (!(*(uint64_t (**)(void *))(*a1 + 1848))(a1)) {
      return 3758096385;
    }
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (!CCLogStream::shouldLog()) {
      return 3758096385;
    }
    uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
    int v7 = 38310;
    goto LABEL_39;
  }
  if (!*(_DWORD *)(a2 + 4))
  {
    int v25 = 0;
    uint64_t v13 = (*(uint64_t (**)(void *))(*a1 + 88))(a1);
    int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 136))(v13);
    uint64_t v15 = a1[9];
    uint64_t v16 = *(AppleBCMWLANCommander **)(v15 + 5416);
    unsigned __int8 v17 = IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(v15 + 11312));
    __dst[0] = &v25;
    __dst[1] = 4;
    if (v14) {
      uint64_t v18 = AppleBCMWLANCommander::sendVirtualIOVarSet(v16, v17, "wsec", (uint64_t)__dst, kNoRxExpected, (uint64_t)v26, 0);
    }
    else {
      uint64_t v18 = AppleBCMWLANCommander::runVirtualIOVarSet(v16, v17, "wsec", (uint64_t)__dst, 0, 0);
    }
    uint64_t v11 = v18;
  }
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      int v19 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      if (*(_DWORD *)(a2 + 4)) {
        int v20 = "enabled";
      }
      else {
        int v20 = "disabled";
      }
      CCLogStream::logNotice(v19, "[dk] %s@%d:Ranging %s\n", "setRANGING_ENABLE", 38327, v20);
    }
  }
  return v11;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setRANGING_ENABLE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setRANGING_ENABLE((void *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::setRANGING_START_V3(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[9];
  unsigned int v3 = *(_DWORD *)(v2 + 780);
  v57[0] = a1;
  v57[1] = AppleBCMWLANCore::setRangingAsyncCallBack;
  v57[2] = 0;
  if (!a2) {
    return 3758096385;
  }
  if (IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(v2 + 11312)) == -1
    || IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(a1[9] + 11312)) == 255)
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v49 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v49, "[dk] %s@%d:ERROR: %s:%u fProximityInterface not initialized, bailing out\n", "setRANGING_START_V3", 38354, "setRANGING_START_V3", 38354);
      }
    }
    return 3758096385;
  }
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v50 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logNotice(v50, "[dk] %s@%d:%s: request->start=%d\n", "setRANGING_START_V3", 38358, "setRANGING_START_V3", *(_DWORD *)(a2 + 4));
    }
  }
  atomic_fetch_and((atomic_uint *volatile)(a1[9] + 10388), 0xFFFBFFFF);
  if (!*(_DWORD *)(a2 + 4))
  {
    *(void *)((char *)v59 + 2) = 1;
    uint64_t v58 = 0x4001300120300;
    LOWORD(v59[0]) = 0;
    uint64_t v28 = a1[9];
    uint64_t v29 = *(AppleBCMWLANCommander **)(v28 + 5416);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(v28 + 11312));
    uint64_t v55 = &v58;
    uint64_t v56 = 18;
    AppleBCMWLANCommander::sendVirtualIOVarSet(v29, InterfaceId, "proxd", (uint64_t)&v55, kNoRxExpected, (uint64_t)v57, 0);
    *(void *)((char *)v59 + 2) = 1;
    uint64_t v58 = 0x4000800120300;
    LOWORD(v59[0]) = 1;
    uint64_t v31 = a1[9];
    uint64_t v32 = *(AppleBCMWLANCommander **)(v31 + 5416);
    unsigned __int8 v33 = IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(v31 + 11312));
    uint64_t v55 = &v58;
    uint64_t v56 = 18;
    AppleBCMWLANCommander::sendVirtualIOVarSet(v32, v33, "proxd", (uint64_t)&v55, kNoRxExpected, (uint64_t)v57, 0);
    return 0;
  }
  if (!*(_DWORD *)(a2 + 20)) {
    return 3758096385;
  }
  uint64_t v8 = 92;
  uint64_t v9 = IOMallocZeroData();
  uint64_t v10 = v9;
  if (!v9) {
    uint64_t v8 = 0;
  }
  *(void *)uint64_t v9 = 0x40004005C0300;
  *(_WORD *)(v9 + 8) = 1;
  *(unsigned char *)(v9 + 10) = 1;
  int v11 = *(_DWORD *)(a1[9] + 1048);
  int v12 = *(unsigned __int16 *)(a2 + 58);
  if (v12 == 80) {
    int v11 = 4;
  }
  if (v12 == 40) {
    int v11 = 3;
  }
  if (v12 == 20) {
    int v11 = 2;
  }
  LODWORD(v55) = v11;
  unsigned int v13 = *(unsigned __int8 *)(a2 + 56);
  if (v13 >= 0xF) {
    int v14 = 3;
  }
  else {
    int v14 = 0;
  }
  int ChanSpec = AppleBCMWLANCore::getChanSpec((uint64_t)a1, v13, v14, (int *)&v55);
  *(_DWORD *)(v10 + 12) = 262147;
  *(_WORD *)(v10 + 16) = ChanSpec;
  *(_DWORD *)(v10 + 20) = 393234;
  __int16 v16 = *(_WORD *)(a2 + 54);
  *(_DWORD *)(v10 + 24) = *(_DWORD *)(a2 + 50);
  *(_WORD *)(v10 + 28) = v16;
  *(_DWORD *)(v10 + 32) = 262170;
  if (*(_WORD *)(a2 + 144) == 4) {
    int v17 = 163941;
  }
  else {
    int v17 = 163937;
  }
  *(_DWORD *)(v10 + 36) = v17;
  *(_DWORD *)(v10 + 40) = 262169;
  if (*(_WORD *)(a2 + 128)) {
    unsigned int v18 = v17;
  }
  else {
    unsigned int v18 = v17 & 0xFFFF803F;
  }
  *(_DWORD *)(v10 + 44) = v18;
  int v19 = *(unsigned __int16 *)(a2 + 136);
  if (!*(_WORD *)(a2 + 136)) {
    int v19 = 500;
  }
  *(_WORD *)(v10 + 56) = 2;
  *(_DWORD *)(v10 + 48) = 524303;
  *(_DWORD *)(v10 + 52) = v19;
  int v20 = *(unsigned __int16 *)(a2 + 138);
  if (!*(_WORD *)(a2 + 138)) {
    int v20 = 128;
  }
  *(_WORD *)(v10 + 68) = 2;
  *(_DWORD *)(v10 + 60) = 524294;
  *(_DWORD *)(v10 + 64) = v20;
  *(void *)(v10 + 72) = 0xA00080007;
  *(_WORD *)(v10 + 80) = 2;
  __int16 v21 = *(unsigned __int8 *)(a2 + 130);
  if (!*(unsigned char *)(a2 + 130)) {
    __int16 v21 = 3;
  }
  *(_DWORD *)(v10 + 84) = 131082;
  *(_WORD *)(v10 + 88) = v21;
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v51 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logNotice(v51, "[dk] %s@%d:Ranging config session=%d for %02X:%02X:%02X:%02X:%02X:%02X on chanspec 0x%x flagsMask=0x%x\n", "setRANGING_START_V3", 38522, *(unsigned __int16 *)(v10 + 8), *(unsigned __int8 *)(a2 + 50), *(unsigned __int8 *)(a2 + 51), *(unsigned __int8 *)(a2 + 52), *(unsigned __int8 *)(a2 + 53), *(unsigned __int8 *)(a2 + 54), *(unsigned __int8 *)(a2 + 55), ChanSpec, v17);
    }
  }
  uint64_t v22 = a1[9];
  uint64_t v23 = *(AppleBCMWLANCommander **)(v22 + 5416);
  unsigned __int8 v24 = IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(v22 + 11312));
  uint64_t v58 = v10;
  v59[0] = v8;
  uint64_t v25 = AppleBCMWLANCommander::sendVirtualIOVarSet(v23, v24, "proxd", (uint64_t)&v58, kNoRxExpected, (uint64_t)v57, 0);
  if (v25)
  {
    uint64_t v6 = v25;
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v26 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        uint64_t v27 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 112))(a1, v6);
        CCLogStream::logAlert(v26, "[dk] %s@%d: Error: Unable to config proxd ftm: %s\n", "setRANGING_START_V3", 38528, v27);
      }
    }
  }
  else
  {
    uint64_t v34 = 22;
    uint64_t v35 = IOMallocZeroData();
    uint64_t v36 = v35;
    if (!v35) {
      uint64_t v34 = 0;
    }
    *(_WORD *)uint64_t v35 = 768;
    *(_WORD *)(v35 + 2) = v34;
    *(_DWORD *)(v35 + 4) = 262162;
    *(_WORD *)(v35 + 8) = 0;
    *(unsigned char *)(v35 + 10) = 1;
    *(void *)(v35 + 12) = 0x1000100040207;
    if (v3 > 5) {
      goto LABEL_52;
    }
    char v54 = 64;
    __int16 v53 = 1;
    uint64_t v37 = a1[9];
    unint64_t v38 = *(AppleBCMWLANCommander **)(v37 + 5416);
    unsigned __int8 v39 = IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(v37 + 11312));
    uint64_t v58 = (uint64_t)&v53;
    v59[0] = 3;
    uint64_t v40 = AppleBCMWLANCommander::sendVirtualIOVarSet(v38, v39, "awdl_ftm_ranging_config", (uint64_t)&v58, kNoRxExpected, (uint64_t)v57, 0);
    if (v40)
    {
      uint64_t v6 = v40;
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v41 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          (*(void (**)(void *, uint64_t))(*a1 + 112))(a1, v6);
          CCLogStream::logAlert(v41, "[dk] %s@%d: Error: Unable to set awdl_ftm_ranging_config : %s\n");
        }
      }
    }
    else
    {
LABEL_52:
      uint64_t v42 = a1[9];
      char v43 = *(AppleBCMWLANCommander **)(v42 + 5416);
      unsigned __int8 v44 = IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(v42 + 11312));
      if (v34) {
        uint64_t v45 = v36;
      }
      else {
        uint64_t v45 = 0;
      }
      uint64_t v58 = v45;
      v59[0] = v34;
      uint64_t v46 = AppleBCMWLANCommander::sendVirtualIOVarSet(v43, v44, "proxd", (uint64_t)&v58, kNoRxExpected, (uint64_t)v57, 0);
      if (v46)
      {
        uint64_t v6 = v46;
        if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
        {
          (*(void (**)(void *))(*a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v47 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
            (*(void (**)(void *, uint64_t))(*a1 + 112))(a1, v6);
            CCLogStream::logAlert(v47, "[dk] %s@%d: Error: Unable to start ranging : %s\n");
          }
        }
      }
      else
      {
        atomic_fetch_or((atomic_uint *volatile)(a1[9] + 10388), 0x40000u);
        char v48 = *(unsigned char *)(a2 + 60);
        *(unsigned char *)(a1[9] + 30936) = (v48 & 2) != 0;
        *(unsigned char *)(a1[9] + 30937) = (v48 & 4) != 0;
        if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
        {
          (*(void (**)(void *))(*a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v52 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
            CCLogStream::logAlert(v52, "[dk] %s@%d: fEnableOnDemandProxdDumpLogging=%d fEnableProxdRssiFiltering=%d\n", "setRANGING_START_V3", 38579, *(unsigned __int8 *)(a1[9] + 30936), *(unsigned __int8 *)(a1[9] + 30937));
          }
        }
        uint64_t v6 = 0;
      }
    }
    IOFreeData();
  }
  IOFreeData();
  return v6;
}

uint64_t AppleBCMWLANCore::getSupportedMaxBW(AppleBCMWLANCore *this)
{
  return *(unsigned int *)(*((void *)this + 9) + 1048);
}

uint64_t AppleBCMWLANCore::getChanSpec(uint64_t a1, unsigned int a2, int *a3)
{
  if (a2 >= 0xF) {
    int v4 = 3;
  }
  else {
    int v4 = 0;
  }
  return AppleBCMWLANCore::getChanSpec(a1, a2, v4, a3);
}

uint64_t AppleBCMWLANCore::setRANGING_START_V4(void *a1, uint64_t a2)
{
  v47[0] = a1;
  v47[1] = AppleBCMWLANCore::setRangingAsyncCallBack;
  v47[2] = 0;
  if (!a2) {
    return 3758096385;
  }
  if (IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(a1[9] + 11312)) == -1
    || IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(a1[9] + 11312)) == 255)
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v41 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v41, "[dk] %s@%d:ERROR: %s:%u fProximityInterface not initialized, bailing out\n", "setRANGING_START_V4", 38601, "setRANGING_START_V4", 38601);
      }
    }
    return 3758096385;
  }
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v42 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logNotice(v42, "[dk] %s@%d:%s: request->start=%d\n", "setRANGING_START_V4", 38605, "setRANGING_START_V4", *(_DWORD *)(a2 + 4));
    }
  }
  atomic_fetch_and((atomic_uint *volatile)(a1[9] + 10388), 0xFFFBFFFF);
  if (!*(_DWORD *)(a2 + 4))
  {
    *(void *)((char *)v49 + 2) = 1;
    uint64_t v48 = 0x4001300120400;
    LOWORD(v49[0]) = 0;
    uint64_t v26 = a1[9];
    uint64_t v27 = *(AppleBCMWLANCommander **)(v26 + 5416);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(v26 + 11312));
    uint64_t v45 = &v48;
    uint64_t v46 = 18;
    AppleBCMWLANCommander::sendVirtualIOVarSet(v27, InterfaceId, "proxd", (uint64_t)&v45, kNoRxExpected, (uint64_t)v47, 0);
    *(void *)((char *)v49 + 2) = 1;
    uint64_t v48 = 0x4000800120400;
    LOWORD(v49[0]) = 1;
    uint64_t v29 = a1[9];
    uint64_t v30 = *(AppleBCMWLANCommander **)(v29 + 5416);
    unsigned __int8 v31 = IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(v29 + 11312));
    uint64_t v45 = &v48;
    uint64_t v46 = 18;
    AppleBCMWLANCommander::sendVirtualIOVarSet(v30, v31, "proxd", (uint64_t)&v45, kNoRxExpected, (uint64_t)v47, 0);
    return 0;
  }
  if (!*(_DWORD *)(a2 + 20)) {
    return 3758096385;
  }
  uint64_t v6 = 100;
  uint64_t v7 = IOMallocZeroData();
  uint64_t v8 = v7;
  if (!v7) {
    uint64_t v6 = 0;
  }
  *(void *)uint64_t v7 = 0x4000400640400;
  *(_WORD *)(v7 + 8) = 1;
  *(unsigned char *)(v7 + 10) = 1;
  int v9 = *(_DWORD *)(a1[9] + 1048);
  int v10 = *(unsigned __int16 *)(a2 + 58);
  if (v10 == 80) {
    int v9 = 4;
  }
  if (v10 == 40) {
    int v9 = 3;
  }
  if (v10 == 20) {
    int v9 = 2;
  }
  LODWORD(v45) = v9;
  unsigned int v11 = *(unsigned __int8 *)(a2 + 56);
  if (v11 >= 0xF) {
    int v12 = 3;
  }
  else {
    int v12 = 0;
  }
  int ChanSpec = AppleBCMWLANCore::getChanSpec((uint64_t)a1, v11, v12, (int *)&v45);
  *(_DWORD *)(v8 + 12) = 262147;
  *(_WORD *)(v8 + 16) = ChanSpec;
  *(_DWORD *)(v8 + 20) = 393234;
  __int16 v14 = *(_WORD *)(a2 + 54);
  *(_DWORD *)(v8 + 24) = *(_DWORD *)(a2 + 50);
  *(_WORD *)(v8 + 28) = v14;
  *(_DWORD *)(v8 + 32) = 524314;
  if (*(_WORD *)(a2 + 144) == 4) {
    uint64_t v15 = 163941;
  }
  else {
    uint64_t v15 = 163937;
  }
  *(void *)(v8 + 36) = v15;
  *(_DWORD *)(v8 + 44) = 524313;
  if (*(_WORD *)(a2 + 128)) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = v15 & 0x3803F;
  }
  *(void *)(v8 + 48) = v16;
  int v17 = *(unsigned __int16 *)(a2 + 136);
  if (!*(_WORD *)(a2 + 136)) {
    int v17 = 500;
  }
  *(_WORD *)(v8 + 64) = 2;
  *(_DWORD *)(v8 + 56) = 524303;
  *(_DWORD *)(v8 + 60) = v17;
  int v18 = *(unsigned __int16 *)(a2 + 138);
  if (!*(_WORD *)(a2 + 138)) {
    int v18 = 128;
  }
  *(_WORD *)(v8 + 76) = 2;
  *(_DWORD *)(v8 + 68) = 524294;
  *(_DWORD *)(v8 + 72) = v18;
  *(void *)(v8 + 80) = 0xA00080007;
  *(_WORD *)(v8 + 88) = 2;
  __int16 v19 = *(unsigned __int8 *)(a2 + 130);
  if (!*(unsigned char *)(a2 + 130)) {
    __int16 v19 = 3;
  }
  *(_DWORD *)(v8 + 92) = 131082;
  *(_WORD *)(v8 + 96) = v19;
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      char v43 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logNotice(v43, "[dk] %s@%d:Ranging config session=%d for %02X:%02X:%02X:%02X:%02X:%02X on chanspec 0x%x flagsMask=0x%llx\n", "setRANGING_START_V4", 38769, *(unsigned __int16 *)(v8 + 8), *(unsigned __int8 *)(a2 + 50), *(unsigned __int8 *)(a2 + 51), *(unsigned __int8 *)(a2 + 52), *(unsigned __int8 *)(a2 + 53), *(unsigned __int8 *)(a2 + 54), *(unsigned __int8 *)(a2 + 55), ChanSpec, v15);
    }
  }
  uint64_t v20 = a1[9];
  __int16 v21 = *(AppleBCMWLANCommander **)(v20 + 5416);
  unsigned __int8 v22 = IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(v20 + 11312));
  uint64_t v48 = v8;
  v49[0] = v6;
  uint64_t v23 = AppleBCMWLANCommander::sendVirtualIOVarSet(v21, v22, "proxd", (uint64_t)&v48, kNoRxExpected, (uint64_t)v47, 0);
  if (v23)
  {
    uint64_t v4 = v23;
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        unsigned __int8 v24 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        uint64_t v25 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 112))(a1, v4);
        CCLogStream::logAlert(v24, "[dk] %s@%d: Error: Unable to config proxd ftm: %s\n", "setRANGING_START_V4", 38775, v25);
      }
    }
  }
  else
  {
    uint64_t v32 = IOMallocZeroData();
    uint64_t v33 = v32;
    if (v32) {
      uint64_t v34 = 22;
    }
    else {
      uint64_t v34 = 0;
    }
    *(_WORD *)uint64_t v32 = 1024;
    *(_WORD *)(v32 + 2) = v34;
    *(_DWORD *)(v32 + 4) = 262162;
    *(_WORD *)(v32 + 8) = 0;
    *(unsigned char *)(v32 + 10) = 1;
    *(void *)(v32 + 12) = 0x1000100040207;
    uint64_t v35 = a1[9];
    uint64_t v36 = *(AppleBCMWLANCommander **)(v35 + 5416);
    unsigned __int8 v37 = IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(v35 + 11312));
    if (v34) {
      uint64_t v38 = v33;
    }
    else {
      uint64_t v38 = 0;
    }
    uint64_t v48 = v38;
    v49[0] = v34;
    uint64_t v4 = AppleBCMWLANCommander::sendVirtualIOVarSet(v36, v37, "proxd", (uint64_t)&v48, kNoRxExpected, (uint64_t)v47, 0);
    if (v4)
    {
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          unsigned __int8 v39 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          (*(void (**)(void *, uint64_t))(*a1 + 112))(a1, v4);
          CCLogStream::logAlert(v39, "[dk] %s@%d: Error: Unable to start ranging : %s\n");
        }
      }
    }
    else
    {
      atomic_fetch_or((atomic_uint *volatile)(a1[9] + 10388), 0x40000u);
      char v40 = *(unsigned char *)(a2 + 60);
      *(unsigned char *)(a1[9] + 30936) = (v40 & 2) != 0;
      *(unsigned char *)(a1[9] + 30937) = (v40 & 4) != 0;
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          unsigned __int8 v44 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logAlert(v44, "[dk] %s@%d: fEnableOnDemandProxdDumpLogging=%d fEnableProxdRssiFiltering=%d\n");
        }
      }
    }
    IOFreeData();
  }
  IOFreeData();
  return v4;
}

uint64_t AppleBCMWLANCore::setRANGING_START(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[9];
  if (*(unsigned char *)(v4 + 18270) == (*(_DWORD *)(a2 + 4) != 0))
  {
    uint64_t v5 = 3758097090;
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        if (*(_DWORD *)(a2 + 4)) {
          uint64_t v7 = "started";
        }
        else {
          uint64_t v7 = "stoped";
        }
        CCLogStream::logAlert(v6, "[dk] %s@%d:ranging already %s", "setRANGING_START", 38822, v7);
      }
    }
  }
  else
  {
    if (*(_DWORD *)(v4 + 780) > 0x10u) {
      uint64_t v8 = AppleBCMWLANCore::setRANGING_START_V4(a1, a2);
    }
    else {
      uint64_t v8 = AppleBCMWLANCore::setRANGING_START_V3(a1, a2);
    }
    uint64_t v5 = v8;
    if (!v8) {
      *(unsigned char *)(a1[9] + 18270) = *(_DWORD *)(a2 + 4) != 0;
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setRANGING_START(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setRANGING_START((void *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::setRANGING_AUTHENTICATE(IO80211Controller *a1, uint64_t a2, uint64_t a3)
{
  int v57 = 12;
  int v56 = 128;
  if (a3 && *(_WORD *)(a3 + 112))
  {
    if (IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(*((void *)a1 + 9)
                                                                                           + 11312)) == -1
      || IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(*((void *)a1 + 9)
                                                                                           + 11312)) == 255)
    {
      if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          __int16 v53 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logAlert(v53, "[dk] %s@%d:ERROR: %s:%u fProximityInterface not initialized, bailing out\n", "setRANGING_AUTHENTICATE", 38852, "setRANGING_AUTHENTICATE", 38852);
        }
      }
      return 3758096385;
    }
    v55[0] = a1;
    v55[1] = AppleBCMWLANCore::setRangingAsyncCallBack;
    v55[2] = 0;
    if (*(_DWORD *)(*((void *)a1 + 9) + 780) >= 0x11u) {
      uint64_t v8 = 36;
    }
    else {
      uint64_t v8 = 28;
    }
    uint64_t v9 = IOMallocZeroData();
    uint64_t v10 = v9;
    if (v9) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 0;
    }
    if (*(_DWORD *)(*((void *)a1 + 9) + 780) > 0x10u)
    {
      *(_WORD *)uint64_t v9 = 1024;
      *(_WORD *)(v9 + 2) = v8;
      *(_DWORD *)(v9 + 4) = 262148;
      *(_WORD *)(v9 + 8) = 0;
      *(unsigned char *)(v9 + 10) = 1;
      *(_DWORD *)(v9 + 12) = 524305;
      *(void *)(v9 + 16) = 1024;
      *(_DWORD *)(v9 + 24) = 524290;
      *(void *)(v9 + 28) = 1024;
    }
    else
    {
      *(_WORD *)uint64_t v9 = 768;
      *(_WORD *)(v9 + 2) = v8;
      *(_DWORD *)(v9 + 4) = 262148;
      *(_WORD *)(v9 + 8) = 0;
      *(unsigned char *)(v9 + 10) = 1;
      *(void *)(v9 + 12) = 0x40000040011;
      *(void *)(v9 + 20) = 0x40000040002;
    }
    uint64_t v12 = (*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 88))(a1);
    int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 136))(v12);
    uint64_t v14 = *((void *)a1 + 9);
    uint64_t v15 = *(AppleBCMWLANCommander **)(v14 + 5416);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(v14 + 11312));
    v58[0] = v10;
    v58[1] = v11;
    if (v13) {
      uint64_t v17 = AppleBCMWLANCommander::sendVirtualIOVarSet(v15, InterfaceId, "proxd", (uint64_t)v58, kNoRxExpected, (uint64_t)v55, 0);
    }
    else {
      uint64_t v17 = AppleBCMWLANCommander::runVirtualIOVarSet(v15, InterfaceId, "proxd", (uint64_t)v58, 0, 0);
    }
    uint64_t v6 = v17;
    uint64_t v18 = *(void *)a1;
    if (v17)
    {
      if ((*(uint64_t (**)(IO80211Controller *))(v18 + 1848))(a1))
      {
        (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          __int16 v19 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          uint64_t v20 = (const char *)(*(uint64_t (**)(IO80211Controller *, uint64_t))(*(void *)a1 + 112))(a1, v6);
          CCLogStream::logAlert(v19, "[dk] %s@%d: Error: Unable to config proxd ftm: %s\n", "setRANGING_AUTHENTICATE", 38935, v20);
        }
      }
      goto LABEL_61;
    }
    uint64_t v21 = (*(uint64_t (**)(IO80211Controller *))(v18 + 88))(a1);
    int v22 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 136))(v21);
    uint64_t v23 = *((void *)a1 + 9);
    unsigned __int8 v24 = *(AppleBCMWLANCommander **)(v23 + 5416);
    unsigned __int8 v25 = IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(v23 + 11312));
    v58[0] = &v57;
    v58[1] = 4;
    if (v22) {
      uint64_t v26 = AppleBCMWLANCommander::sendVirtualIOVarSet(v24, v25, "wsec", (uint64_t)v58, kNoRxExpected, (uint64_t)v55, 0);
    }
    else {
      uint64_t v26 = AppleBCMWLANCommander::runVirtualIOVarSet(v24, v25, "wsec", (uint64_t)v58, 0, 0);
    }
    uint64_t v6 = v26;
    uint64_t v27 = *(void *)a1;
    if (v26)
    {
      if ((*(uint64_t (**)(IO80211Controller *))(v27 + 1848))(a1))
      {
        (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v28 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          (*(void (**)(IO80211Controller *, uint64_t))(*(void *)a1 + 112))(a1, v6);
          CCLogStream::logCrit(v28, "[dk] %s@%d:  wsec (0x%lx) failed, error %s\n");
        }
      }
      goto LABEL_61;
    }
    uint64_t v29 = (*(uint64_t (**)(IO80211Controller *))(v27 + 88))(a1);
    int v30 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 136))(v29);
    uint64_t v31 = *((void *)a1 + 9);
    uint64_t v32 = *(AppleBCMWLANCommander **)(v31 + 5416);
    unsigned __int8 v33 = IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(v31 + 11312));
    v58[0] = &v56;
    v58[1] = 4;
    if (v30) {
      uint64_t v34 = AppleBCMWLANCommander::sendVirtualIOCtlSet(v32, v33, 165, (uint64_t)v58, kNoRxExpected, (uint64_t)v55, 0);
    }
    else {
      uint64_t v34 = AppleBCMWLANCommander::runVirtualIOCtlSet(v32, v33, 165, (uint64_t)v58, 0, 0);
    }
    uint64_t v6 = v34;
    if (v34)
    {
      if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v35 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          (*(void (**)(IO80211Controller *, uint64_t))(*(void *)a1 + 112))(a1, v6);
          CCLogStream::logCrit(v35, "[dk] %s@%d:  wpa_auth (0x%lx) failed, error %s\n");
        }
      }
      goto LABEL_61;
    }
    size_t v36 = *(unsigned __int16 *)(a3 + 112);
    uint64_t v37 = IOMallocZeroData();
    if (!v37)
    {
      uint64_t v6 = 3758097085;
LABEL_61:
      IOFreeData();
      return v6;
    }
    uint64_t v38 = v37;
    *(_WORD *)(v37 + 2) = v36 + 32;
    *(void *)(v37 + 4) = 0x100000002;
    int v39 = *(_DWORD *)(a3 + 4) - 2;
    int v40 = 1;
    if (v39 <= 2) {
      int v40 = dword_100371250[v39];
    }
    *(_DWORD *)(v37 + 12) = v40;
    int v41 = *(_DWORD *)(a3 + 34);
    *(_WORD *)(v37 + 20) = *(_WORD *)(a3 + 38);
    *(_DWORD *)(v37 + 16) = v41;
    *(_WORD *)(v37 + 24) = 1;
    *(_WORD *)(v37 + 26) = v36;
    memcpy((void *)(v37 + 28), (const void *)(a3 + 48), v36);
    uint64_t v42 = (*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 88))(a1);
    int v43 = (*(uint64_t (**)(uint64_t))(*(void *)v42 + 136))(v42);
    uint64_t v44 = *((void *)a1 + 9);
    uint64_t v45 = *(AppleBCMWLANCommander **)(v44 + 5416);
    unsigned __int8 v46 = IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(v44 + 11312));
    if ((_WORD)v36 == 0xFFE0) {
      uint64_t v47 = 0;
    }
    else {
      uint64_t v47 = v38;
    }
    v58[0] = v47;
    v58[1] = (unsigned __int16)(v36 + 32);
    if (v43) {
      uint64_t v48 = AppleBCMWLANCommander::sendVirtualIOVarSet(v45, v46, "ptk_start", (uint64_t)v58, kNoRxExpected, (uint64_t)v55, 0);
    }
    else {
      uint64_t v48 = AppleBCMWLANCommander::runVirtualIOVarSet(v45, v46, "ptk_start", (uint64_t)v58, 0, 0);
    }
    uint64_t v6 = v48;
    uint64_t v49 = (*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
    if (v6)
    {
      if (v49)
      {
        (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v50 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          uint64_t v51 = (const char *)(*(uint64_t (**)(IO80211Controller *, uint64_t))(*(void *)a1 + 112))(a1, v6);
          CCLogStream::logAlert(v50, "[dk] %s@%d: Failure to start ranging authentication: %s for %02X:%02X:%02X:%02X:%02X:%02X, role %d, pmkLen %d\n", "setRANGING_AUTHENTICATE", 39012, v51, *(unsigned __int8 *)(a3 + 34), *(unsigned __int8 *)(a3 + 35), *(unsigned __int8 *)(a3 + 36), *(unsigned __int8 *)(a3 + 37), *(unsigned __int8 *)(a3 + 38), *(unsigned __int8 *)(a3 + 39), *(_DWORD *)(v38 + 12), v36);
        }
      }
      goto LABEL_60;
    }
    if (v49
      && ((*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1),
          CCLogStream::shouldLog()))
    {
      char v54 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      CCLogStream::logNotice(v54, "[dk] %s@%d:Ranging authentication pmk-length=%d role=%d for %02X:%02X:%02X:%02X:%02X:%02X\n", "setRANGING_AUTHENTICATE", 39018, v36, *(_DWORD *)(v38 + 12), *(unsigned __int8 *)(a3 + 34), *(unsigned __int8 *)(a3 + 35), *(unsigned __int8 *)(a3 + 36), *(unsigned __int8 *)(a3 + 37), *(unsigned __int8 *)(a3 + 38), *(unsigned __int8 *)(a3 + 39));
      if (a2) {
        goto LABEL_57;
      }
    }
    else if (a2)
    {
LABEL_57:
      if (*(_DWORD *)(a3 + 4) == 4)
      {
        *(_OWORD *)((char *)v58 + 4) = 0uLL;
        LODWORD(v58[0]) = 1;
        HIDWORD(v58[1]) = *(_DWORD *)(a3 + 34);
        LOWORD(v58[2]) = *(_WORD *)(a3 + 38);
        uint64_t v52 = *(IO80211SkywalkInterface **)(*((void *)a1 + 9) + 11304);
        if (v52) {
          IO80211Controller::postMessage(a1, v52, 0x54u, v58, 0x14uLL, 1);
        }
      }
    }
LABEL_60:
    IOFreeData();
    goto LABEL_61;
  }
  return 3758096385;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setRANGING_AUTHENTICATE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AppleBCMWLANCore::setRANGING_AUTHENTICATE((IO80211Controller *)(a1 - 64), a2, a3);
}

uint64_t AppleBCMWLANCore::setSENSING_ENABLE(uint64_t a1)
{
  return AppleBCMWLANSensingAdapter::setSENSING_ENABLE(*(void *)(*(void *)(a1 + 72) + 35840));
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setSENSING_ENABLE(uint64_t a1)
{
  return AppleBCMWLANSensingAdapter::setSENSING_ENABLE(*(void *)(*(void *)(a1 + 8) + 35840));
}

uint64_t AppleBCMWLANCore::isSensingOSFeatureFlagEnabled(AppleBCMWLANCore *this)
{
  return *(unsigned __int8 *)(*((void *)this + 9) + 29941);
}

uint64_t AppleBCMWLANCore::setSENSING_DISABLE(uint64_t a1)
{
  return AppleBCMWLANSensingAdapter::setSENSING_DISABLE(*(void *)(*(void *)(a1 + 72) + 35840));
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setSENSING_DISABLE(uint64_t a1)
{
  return AppleBCMWLANSensingAdapter::setSENSING_DISABLE(*(void *)(*(void *)(a1 + 8) + 35840));
}

uint64_t AppleBCMWLANCore::getSENSING_DATA(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANSensingAdapter::getSENSING_DATA(*(void *)(*(void *)(a1 + 72) + 35840), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getSENSING_DATA(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANSensingAdapter::getSENSING_DATA(*(void *)(*(void *)(a1 + 8) + 35840), a2);
}

uint64_t AppleBCMWLANCore::HandleShutdownGated(IOService *this)
{
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v4 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logAlert(v4, "[dk] %s@%d:AppleBCMWLANCore[%u] [%p]\n", "HandleShutdownGated", 39124, 39124, this);
    }
  }
  int v2 = 1;
  BYTE4(this[1].OSObject::OSObjectInterface::__vftable[1141].free) = 1;
  atomic_compare_exchange_strong((atomic_uint *volatile)&this[1].OSObject::OSObjectInterface::__vftable[276], (unsigned int *)&v2, 0);
  if (v2 == 1)
  {
    IOService::AdjustBusy(this, -1, 0);
    unsigned int v6 = 0;
    IOService::GetBusyState(this, &v6, 0);
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v5, "[dk] %s@%d:AdjustBusy(-1) busystate %u, fAdjustBusyCnt %u\n", "HandleShutdownGated", 39133, v6, LODWORD(this[1].OSObject::OSObjectInterface::__vftable[276].init));
      }
    }
    io80211_os_log();
  }
  AppleBCMWLANCommander::pause((AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free);
  atomic_fetch_or((atomic_uint *volatile)((char *)&this[1].OSObject::OSObjectInterface::__vftable[649].init + 4), 0x2000u);
  AppleBCMWLANCore::halt((AppleBCMWLANCore *)this);
  return 0;
}

uint64_t AppleBCMWLANCore::SetPowerState_Impl(IOService *this, uint32_t a2)
{
  uint64_t v18 = 0;
  __int16 v19 = &v18;
  uint64_t v20 = 0x2000000000;
  int v21 = -1431655766;
  uint64_t v4 = this[1].OSObject::OSObjectInterface::__vftable;
  free = (AppleBCMWLANIOReportingCore *)v4[344].free;
  if (free) {
    AppleBCMWLANIOReportingCore::reportSystemPowerState(free, 0, a2 == 2, 1, (int)v4[2219].free);
  }
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v12 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logAlert(v12, "[dk] %s@%d:DK: SetPowerState Core %u\n", "SetPowerState_Impl", 39259, a2);
    }
  }
  unsigned int v6 = (IODispatchQueue *)(*(uint64_t (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[1932].free + 168))(this[1].OSObject::OSObjectInterface::__vftable[1932].free);
  block[0] = _NSConcreteStackBlock;
  block[1] = 1107296256;
  block[2] = ___ZN16AppleBCMWLANCore18SetPowerState_ImplEj_block_invoke;
  block[3] = &__block_descriptor_tmp_2254;
  block[4] = &v18;
  block[5] = this;
  uint32_t v17 = a2;
  IODispatchQueue::DispatchSync(v6, block);
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      int v13 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logAlert(v13, "[dk] %s@%d:DK: SetPowerState Core %u complete retval %#x\n", "SetPowerState_Impl", 39265, a2, *((_DWORD *)v19 + 6));
    }
  }
  uint64_t v7 = this[1].OSObject::OSObjectInterface::__vftable[1932].free;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 0x40000000;
  void v14[2] = ___ZN16AppleBCMWLANCore18SetPowerState_ImplEj_block_invoke_2256;
  v14[3] = &__block_descriptor_tmp_2258;
  v14[4] = this;
  uint32_t v15 = a2;
  (*(void (**)(void (__cdecl *)(OSObjectInterface *__hidden), void *))(*(void *)v7 + 112))(v7, v14);
  uint64_t v8 = IOService::SetPowerState(this, a2, (OSDispatchMethod)&IO80211Controller::_Dispatch);
  *((_DWORD *)v19 + 6) = v8;
  uint64_t v9 = this[1].OSObject::OSObjectInterface::__vftable;
  uint64_t v10 = (AppleBCMWLANIOReportingCore *)v9[344].free;
  if (v10)
  {
    AppleBCMWLANIOReportingCore::reportSystemPowerState(v10, 0, a2 == 2, 1, (int)v9[2219].free);
    uint64_t v8 = *((unsigned int *)v19 + 6);
  }
  _Block_object_dispose(&v18, 8);
  return v8;
}

AppleBCMWLANIOReportingCore *AppleBCMWLANCore::reportSystemPowerState(AppleBCMWLANCore *this, unint64_t *a2, int a3, int a4)
{
  uint64_t v4 = *((void *)this + 9);
  BOOL result = *(AppleBCMWLANIOReportingCore **)(v4 + 5512);
  if (result) {
    return (AppleBCMWLANIOReportingCore *)AppleBCMWLANIOReportingCore::reportSystemPowerState(result, a2, a3, a4, *(_DWORD *)(v4 + 35512));
  }
  return result;
}

uint64_t ___ZN16AppleBCMWLANCore18SetPowerState_ImplEj_block_invoke(uint64_t a1)
{
  uint64_t result = AppleBCMWLANCore::SetPowerStateGated(*(IOService **)(a1 + 40), *(_DWORD *)(a1 + 48));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  return result;
}

uint64_t AppleBCMWLANCore::SetPowerStateGated(IOService *this, int a2)
{
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v10 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logNotice(v10, "[dk] %s@%d: powerState %u, fStateFlags 0x%lx\n", "SetPowerStateGated", 39324, a2, HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[649].init));
    }
  }
  uint64_t v4 = this[1].OSObject::OSObjectInterface::__vftable;
  int init_high = HIDWORD(v4[649].init);
  if ((init_high & 0x30) == 0x20)
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v6 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logNotice(v6, "[dk] %s@%d:Received power state change before driver has initialized, ignoring 0x%08x\n");
      }
    }
  }
  else if (a2 == 2)
  {
    if (init_high)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v11 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logNotice(v11, "[dk] %s@%d: Already powered on, ignoring\n");
        }
      }
    }
    else
    {
      atomic_fetch_or((atomic_uint *volatile)((char *)&v4[649].init + 4), 1u);
      AppleBCMWLANCore::powerOnSystem(this);
    }
  }
  else if (a2)
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v8, "[dk] %s@%d:Bad Power State %u\n", "SetPowerStateGated", 39383, a2);
      }
    }
  }
  else if (init_high)
  {
    removePropertyHelper(this, "IO80211WokeSystem");
    atomic_fetch_and((atomic_uint *volatile)((char *)&this[1].OSObject::OSObjectInterface::__vftable[649].init + 4), 0xFFFFFFFE);
    AppleBCMWLANCore::powerOffSystem(this);
  }
  else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v7 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logInfo(v7, "[dk] %s@%d: Already powered off, ignoring\n", "SetPowerStateGated", 39346);
    }
  }
  return 0;
}

uint64_t ___ZN16AppleBCMWLANCore18SetPowerState_ImplEj_block_invoke_2256(uint64_t a1)
{
  uint64_t v1 = *(IOService **)(a1 + 32);
  if (*(_DWORD *)(a1 + 40) == 2)
  {
    if (((uint64_t (*)(void))v1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(*(void *)(a1 + 32)))
    {
      ((void (*)(IOService *))v1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(v1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)((uint64_t (*)(IOService *))v1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(v1);
        CCLogStream::logCrit(v5, "[dk] %s@%d:Trigger powerOn Skywalk interfaces\n", "SetPowerState_Impl_block_invoke", 39270);
      }
    }
    int v2 = v1[1].OSObject::OSObjectInterface::__vftable;
    free = (IOService *)v2[706].free;
    if (free)
    {
      IOService::ChangePowerState(free, 2u, 0);
      int v2 = v1[1].OSObject::OSObjectInterface::__vftable;
    }
    BYTE5(v2[1866].free) = 1;
    if (BYTE4(v1[1].OSObject::OSObjectInterface::__vftable[1866].free)) {
      IOService::RegisterService(v1, 0);
    }
  }
  else
  {
    BYTE5(v1[1].OSObject::OSObjectInterface::__vftable[1866].free) = 0;
  }
  return 0;
}

uint64_t AppleBCMWLANCore::powerOffSystem(IOService *this)
{
  uint64_t v18 = (AppleBCMWLANTimeTrace *)0xAAAAAAAAAAAAAAAALL;
  AppleBCMWLANUtil::AutoreleasedTimeTrace::AutoreleasedTimeTrace(&v18, (AppleBCMWLANTimeTrace *)0x40, 0, 1);
  mach_continuous_nanoseconds = (unint64_t *)AppleBCMWLANUtil::get_mach_continuous_nanoseconds(0, v2);
  AppleBCMWLANUtil::AutoreleasedTimeTrace::recordTraceWithTimestamp(&v18, mach_continuous_nanoseconds, 131074, 39848, "%s: %6u", "IOReturn AppleBCMWLANCore::powerOffSystem()", 39848);
  int init_high = HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[649].init);
  if ((init_high & 0x20) != 0)
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v14 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v14, "[dk] %s@%d:System Sleep request before Driver has initialized, waiting\n", "powerOffSystem", 39852);
      }
    }
    if (AppleBCMWLANCore::waitForDriverEvent(this, 5u, 0x2710u) == -536870186) {
      AppleBCMWLANCore::powerOffSystem();
    }
    int init_high = HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[649].init);
  }
  if ((init_high & 0x80) != 0)
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint32_t v15 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logNotice(v15, "[dk] %s@%d: Unavailable (0x%lX), waiting...\n", "powerOffSystem", 39861, HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[649].init));
      }
    }
    atomic_fetch_or((atomic_uint *volatile)((char *)&this[1].OSObject::OSObjectInterface::__vftable[649].init + 4), 0x400u);
    int init_high = HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[649].init);
  }
  if ((init_high & 0x400) != 0)
  {
    uint64_t v5 = AppleBCMWLANCore::waitForDriverEvent(this, 0, 0x1388u);
    if (v5)
    {
      uint64_t v6 = v5;
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v16 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          uint32_t v17 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v6);
          CCLogStream::logNotice(v16, "[dk] %s@%d: Timed out waiting for driver to reset itself: %s\n", "powerOffSystem", 39872, v17);
        }
      }
    }
  }
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      int v13 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logNotice(v13, "[dk] %s@%d: : Powering Off and sleeping\n", "powerOffSystem", 39876);
    }
  }
  uint64_t v8 = AppleBCMWLANUtil::get_mach_continuous_nanoseconds(0, v7);
  AppleBCMWLANUtil::AutoreleasedTimeTrace::setMarkTimestamp(&v18, v8);
  if (!AppleBCMWLANCore::powerOff(this, 1)) {
    LODWORD(this[1].OSObject::OSObjectInterface::__vftable[412].init) = 1;
  }
  AppleBCMWLANUtil::AutoreleasedTimeTrace::recordTraceFromMarkTimestamp(&v18, (unint64_t *)0x20002, 39881, "%s: %6u", "IOReturn AppleBCMWLANCore::powerOffSystem()", 39881);
  uint64_t v10 = this[1].OSObject::OSObjectInterface::__vftable;
  if ((HIDWORD(v10[649].init) & 0x8080) == 0x8000) {
    (*(void (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)v10[337].free + 272))(v10[337].free);
  }
  uint64_t v11 = (unint64_t *)AppleBCMWLANUtil::get_mach_continuous_nanoseconds(0, v9);
  AppleBCMWLANUtil::AutoreleasedTimeTrace::recordTraceWithTimestamp(&v18, (unint64_t *)((char *)v11 - (char *)mach_continuous_nanoseconds), 131074, 39890, "%s: %6u", "IOReturn AppleBCMWLANCore::powerOffSystem()", 39890);
  AppleBCMWLANUtil::AutoreleasedTimeTrace::recordTraceWithTimestamp(&v18, v11, 131074, 39891, "%s: %6u", "IOReturn AppleBCMWLANCore::powerOffSystem()", 39891);
  AppleBCMWLANUtil::AutoreleasedTimeTrace::dumpToLog((AppleBCMWLANUtil::AutoreleasedTimeTrace *)&v18, 0, 0);
  if (v18) {
    (*(void (**)(AppleBCMWLANTimeTrace *))(*(void *)v18 + 16))(v18);
  }
  return 0;
}

uint64_t AppleBCMWLANCore::powerOnSystem(IOService *this)
{
  __int16 v19 = (AppleBCMWLANTimeTrace *)0xAAAAAAAAAAAAAAAALL;
  AppleBCMWLANUtil::AutoreleasedTimeTrace::AutoreleasedTimeTrace(&v19, (AppleBCMWLANTimeTrace *)0x40, 0, 1);
  mach_continuous_nanoseconds = (unint64_t *)AppleBCMWLANUtil::get_mach_continuous_nanoseconds(0, v2);
  AppleBCMWLANUtil::AutoreleasedTimeTrace::recordTraceWithTimestamp(&v19, mach_continuous_nanoseconds, 65537, 39405, "%s: %6u", "IOReturn AppleBCMWLANCore::powerOnSystem()", 39405);
  this[1].OSObject::OSObjectInterface::__vftable[2220].init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))mach_continuous_nanoseconds;
  uint64_t v4 = this[1].OSObject::OSObjectInterface::__vftable;
  int init_high = HIDWORD(v4[649].init);
  if ((init_high & 0x20) != 0)
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v14 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logNotice(v14, "[dk] %s@%d: Dongle not yet initialized, deferring 0x%08x\n", "powerOnSystem", 39409, HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[649].init));
      }
    }
    LODWORD(this[1].OSObject::OSObjectInterface::__vftable[412].init) = 0;
  }
  else if ((init_high & 0x8000) != 0)
  {
    unsigned int v12 = HIDWORD(v4[337].init);
    if (v12 > 4)
    {
      AppleBCMWLANCore::watchdogFailed((AppleBCMWLANCore *)this);
    }
    else
    {
      HIDWORD(v4[337].init) = v12 + 1;
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint32_t v17 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logEmergency(v17, "[dk] %s@%d:Last watchdog aborted, inducing another watchdog\n", "powerOnSystem", 39415);
        }
      }
      AppleBCMWLANCore::watchdog(this, 0);
    }
  }
  else
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint32_t v15 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logNotice(v15, "[dk] %s@%d: : Powering On\n", "powerOnSystem", 39424);
      }
    }
    uint64_t v7 = AppleBCMWLANUtil::get_mach_continuous_nanoseconds(0, v6);
    AppleBCMWLANUtil::AutoreleasedTimeTrace::setMarkTimestamp(&v19, v7);
    AppleBCMWLANCore::powerOn(this);
    AppleBCMWLANUtil::AutoreleasedTimeTrace::recordTraceFromMarkTimestamp(&v19, (unint64_t *)0x10001, 39428, "%s: %6u", "IOReturn AppleBCMWLANCore::powerOnSystem()", 39428);
    atomic_fetch_and((atomic_uint *volatile)((char *)&this[1].OSObject::OSObjectInterface::__vftable[649].init + 4), 0xFFFFFBFF);
    uint64_t v8 = this[1].OSObject::OSObjectInterface::__vftable;
    free = (IO80211SkywalkInterface *)v8[706].free;
    if (free)
    {
      IO80211Controller::postMessage((IO80211Controller *)this, free, 1u, 0, 0, 1);
      uint64_t v8 = this[1].OSObject::OSObjectInterface::__vftable;
    }
    if (HIDWORD(v8[412].init))
    {
      if (v8[706].free)
      {
        if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
        {
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v18 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            CCLogStream::logAlert(v18, "[dk] %s@%d: post BLACKLIST_NETWORK\n", "powerOnSystem", 39442);
          }
        }
        IO80211Controller::postMessage((IO80211Controller *)this, (IO80211SkywalkInterface *)this[1].OSObject::OSObjectInterface::__vftable[706].free, 0x23u, 0, 0, 1);
        uint64_t v8 = this[1].OSObject::OSObjectInterface::__vftable;
      }
      HIDWORD(v8[412].init) = 0;
      uint64_t v8 = this[1].OSObject::OSObjectInterface::__vftable;
    }
    LODWORD(v8[412].init) = 0;
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v16 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logNotice(v16, "[dk] %s@%d: : Powered On\n", "powerOnSystem", 39452);
      }
    }
    uint64_t v11 = (unint64_t *)AppleBCMWLANUtil::get_mach_continuous_nanoseconds(0, v10);
    AppleBCMWLANUtil::AutoreleasedTimeTrace::recordTraceWithTimestamp(&v19, (unint64_t *)((char *)v11 - (char *)mach_continuous_nanoseconds), 65537, 39456, "%s: %6u", "IOReturn AppleBCMWLANCore::powerOnSystem()", 39456);
    AppleBCMWLANUtil::AutoreleasedTimeTrace::recordTraceWithTimestamp(&v19, v11, 65537, 39457, "%s: %6u", "IOReturn AppleBCMWLANCore::powerOnSystem()", 39457);
    AppleBCMWLANUtil::AutoreleasedTimeTrace::dumpToLog((AppleBCMWLANUtil::AutoreleasedTimeTrace *)&v19, 0, 0);
  }
  if (v19) {
    (*(void (**)(AppleBCMWLANTimeTrace *))(*(void *)v19 + 16))(v19);
  }
  return 0;
}

uint64_t AppleBCMWLANCore::watchdogFailed(AppleBCMWLANCore *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      unsigned int v3 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v3, "[dk] %s@%d:Last watchdog failed, max retries performed, bailing out\n", "watchdogFailed", 45662);
    }
  }
  (*(void (**)(void))(*(void *)(*(void *)(*((void *)this + 9) + 5400) + 48) + 208))();
  atomic_fetch_or((atomic_uint *volatile)(*((void *)this + 9) + 10388), 0x40u);
  atomic_fetch_or((atomic_uint *volatile)(*((void *)this + 9) + 10388), 0x20u);
  AppleBCMWLANCore::signalDriverReady(this);
  AppleBCMWLANCore::halt(this);
  return 3758097084;
}

uint64_t AppleBCMWLANCore::allowLinkup(AppleBCMWLANCore *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v8, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "allowLinkup", 40673, "allowLinkup");
    }
  }
  int v14 = 0;
  uint64_t v2 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 136))(v2))
  {
    uint64_t v11 = this;
    uint64_t v12 = (uint64_t)AppleBCMWLANCore::handleResetLinkParamsAsyncCallBack;
    uint64_t v13 = 0;
    if (AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"nolinkup"))
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v3 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v3, "[dk] %s@%d: Failed SET IOCTL, cret[0x%08x]\n");
        }
      }
    }
  }
  else
  {
    uint64_t v4 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    uint64_t v11 = (AppleBCMWLANCore *)&v14;
    uint64_t v12 = 4;
    uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"nolinkup", (uint64_t)&v11, 0, 0);
    if (v5)
    {
      uint64_t v6 = v5;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
          CCLogStream::logAlert(v10, "[dk] %s@%d: Unable to turn off Link Up filtering %s\n");
        }
      }
    }
  }
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      return CCLogStream::logNoticeIf(v9, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "allowLinkup", 40695, "allowLinkup");
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::resetPorts(IOService *this)
{
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logNoticeIf(v5, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "resetPorts", 51146, "resetPorts");
    }
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 31))
  {
    LOWORD(this[1].OSObject::OSObjectInterface::__vftable[644].free) = 0;
    uint64_t active = AppleBCMWLANCore::configureActivePortsInToChip(this, 858980353);
    if (active)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v3 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v3, "[dk] %s@%d:Failed to configure Active Ports\n", "resetPorts", 51153);
        }
      }
    }
  }
  else
  {
    uint64_t active = 0;
  }
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v6 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logNoticeIf(v6, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "resetPorts", 51157, "resetPorts");
    }
  }
  return active;
}

uint64_t AppleBCMWLANCore::collectScanForwardStats(AppleBCMWLANCore *this)
{
  __int16 v18 = 6;
  int v17 = 1;
  uint64_t v2 = IOMallocZeroData();
  if (v2)
  {
    uint64_t v3 = v2;
    if (AppleBCMWLANCore::featureFlagIsBitSet(this, 117)
      && (*(unsigned char *)(*((void *)this + 9) + 17355) & 2) != 0)
    {
      uint64_t v4 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 136))(v4))
      {
        int v14 = this;
        uint64_t v15 = (uint64_t)AppleBCMWLANCore::scanForwardStatsAsyncCallBack;
        uint64_t v16 = 0;
        uint64_t v5 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
        uint64_t v12 = &v17;
        uint64_t v13 = 6;
        int v11 = 5636182;
        if (AppleBCMWLANCommander::sendIOVarGet(v5, (uint64_t)"spmi_scan_fwd", (uint64_t)&v12, (unsigned __int16 *)&v11, (uint64_t)&v14, 0)&& (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v6, "[dk] %s@%d:sendIOVarGet failed for spmi_scan_fwd, ret[0x%08x]\n");
          }
        }
      }
      else
      {
        int v14 = (AppleBCMWLANCore *)v3;
        uint64_t v15 = 0x5600560056;
        uint64_t v9 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
        uint64_t v12 = &v17;
        uint64_t v13 = 6;
        if (AppleBCMWLANCommander::runIOVarGet(v9, (uint64_t)"spmi_scan_fwd", (uint64_t)&v12, (uint64_t)&v14, 0))
        {
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v10, "[dk] %s@%d:sendIOVarGet failed, ret[0x%08x]\n");
            }
          }
        }
        else
        {
          AppleBCMWLANCore::processScanForwardStats(this, v3);
        }
      }
    }
    return IOFreeData();
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        return CCLogStream::logAlert(v8, "[dk] %s@%d:Failed to allocate buffer for scan forward stats\n", "collectScanForwardStats", 63082);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::processPowerStatsChangesInSleep(AppleBCMWLANCore *this, int a2)
{
  uint64_t v2 = *((void *)this + 9);
  if (!*(unsigned char *)(v2 + 8831) || (*(unsigned char *)(v2 + 10388) & 1) == 0 || *(_DWORD *)(v2 + 19708) != 1) {
    return 0;
  }
  bzero(v40, 0x270uLL);
  unint64_t v39 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v38[0] = v5;
  v38[1] = v5;
  BYTE4(v38[0]) = 0;
  LODWORD(v38[0]) = 18;
  uint64_t PowerStats = AppleBCMWLANCore::getPowerStats(this, v40, (int *)v38);
  if (PowerStats)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, PowerStats);
        CCLogStream::logAlert(v7, "[dk] %s@%d:Failure to get power stats changes, %s\n", "processPowerStatsChangesInSleep", 52245, v8);
      }
    }
    return PowerStats;
  }
  uint64_t v10 = *((void *)this + 9);
  int v11 = v40[24] - *(_DWORD *)(v10 + 11456);
  int v12 = v40[11] - *(_DWORD *)(v10 + 11404);
  uint64_t v13 = (v40[1] - *(_DWORD *)(v10 + 11364));
  uint64_t v14 = (v40[2] - *(_DWORD *)(v10 + 11368));
  uint64_t v15 = (v40[0] - *(_DWORD *)(v10 + 11360));
  if (AppleBCMWLANBGScanAdapter::isBGScanConfigured(*(AppleBCMWLANBGScanAdapter **)(v10 + 5504))) {
    uint64_t v16 = 4;
  }
  else {
    uint64_t v16 = 0;
  }
  float v17 = (float)(1.0 - (float)((float)(v14 + v13) / (float)(int)v15)) * 1000.0;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v27 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v27, "[dk] %s@%d: (0x%x) MpcDuration %dms PmDuration %dms SleepDuration %dms DutyCycle %d.%d%% RoamScanDuration %dms ConnectTime %dms, LPAS AvailableRoamTime %dms, WOW AvailableRoamTime %dms\n", "processPowerStatsChangesInSleep", 52265, v16, v14, v13, v15, (int)v17 / 10, (int)v17 % 10, v11, v12, *(_DWORD *)(*((void *)this + 9) + 6668), *(_DWORD *)(*((void *)this + 9) + 6640));
    }
  }
  uint64_t v18 = *((void *)this + 9);
  if (*(unsigned char *)(v18 + 776))
  {
    int v19 = *(_DWORD *)(v18 + 35384);
    if (*(unsigned char *)(v18 + 777))
    {
      uint64_t v16 = v16 | 1;
      if (v19)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v20 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v20, "[dk] %s@%d:LPAS (0x%x) power report: MpcDuration %dms PmDuration %dms SleepDuration %dms DutyCycle %d.%d%%\n", "processPowerStatsChangesInSleep");
          }
        }
      }
      else
      {
        AppleBCMWLANCore::calculateAvailableRoamTime(this, 2, v12 + v11, (int *)(v18 + 6668));
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            unsigned __int8 v25 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v25, "[dk] %s@%d:LPAS (0x%x) power report: MpcDuration %dms PmDuration %dms SleepDuration %dms DutyCycle %d.%d%% RoamScanDuration %dms ConnectTime %dms AvailableRoamTime %dms\n", "processPowerStatsChangesInSleep", 52277, v16);
          }
        }
      }
      goto LABEL_36;
    }
    uint64_t v16 = v16 | 2;
    if (!v19)
    {
      AppleBCMWLANCore::calculateAvailableRoamTime(this, 1, v12 + v11, (int *)(v18 + 6640));
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v28 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v28, "[dk] %s@%d:WOW (0x%x) power report: MpcDuration %dms PmDuration %dms SleepDuration %dms DutyCycle %d.%d%% RoamScanDuration %dms ConnectTime %dms AvailableRoamTime %dms\n", "processPowerStatsChangesInSleep", 52288, v16);
        }
      }
      goto LABEL_36;
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v21 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v22 = ((int)v17 / 10);
        uint64_t v23 = ((int)v17 % 10);
        uint64_t v32 = v13;
        uint64_t v33 = v15;
        uint64_t v30 = v16;
        uint64_t v31 = v14;
        uint64_t v29 = 52290;
        unsigned __int8 v24 = "[dk] %s@%d:WOW (0x%x) power report: MpcDuration %dms PmDuration %dms SleepDuration %dms DutyCycle %d.%d%%\n";
        goto LABEL_29;
      }
    }
  }
  else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      int v21 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t v22 = ((int)v17 / 10);
      uint64_t v23 = ((int)v17 % 10);
      uint64_t v32 = v13;
      uint64_t v33 = v15;
      uint64_t v30 = v16;
      uint64_t v31 = v14;
      uint64_t v29 = 52294;
      unsigned __int8 v24 = "[dk] %s@%d:PNO (0x%x) power report: MpcDuration %dms PmDuration %dms SleepDuration %dms DutyCycle %d.%d%%\n";
LABEL_29:
      CCLogStream::logAlert(v21, v24, "processPowerStatsChangesInSleep", v29, v30, v31, v32, v33, v22, v23, v34, v35, v36);
    }
  }
LABEL_36:
  if (a2)
  {
    v37[0] = v16;
    v37[1] = v14;
    v37[2] = v13;
    v37[3] = v12 + v11;
    v37[4] = v15;
    *(float *)&v37[5] = v17 / 10.0;
    uint64_t v26 = *(IO80211SkywalkInterface **)(*((void *)this + 9) + 11304);
    if (v26) {
      IO80211Controller::postMessage(this, v26, 0x3Du, v37, 0x18uLL, 1);
    }
  }
  return PowerStats;
}

uint64_t AppleBCMWLANCore::unconfigureEventBitMaskForUnAssociatedSleep(AppleBCMWLANCore *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v9, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "unconfigureEventBitMaskForUnAssociatedSleep", 52113, "unconfigureEventBitMaskForUnAssociatedSleep");
    }
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 34)) {
    AppleBCMWLANCore::addEventBit(this, 0xB4u);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 33)) {
    AppleBCMWLANCore::addEventBit(this, 0x7Cu);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 34)
    && AppleBCMWLANCore::featureFlagIsBitSet(this, 76))
  {
    AppleBCMWLANCore::addEventBit(this, 0xBDu);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 71)) {
    AppleBCMWLANCore::addEventBit(this, 0xB8u);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 79)) {
    AppleBCMWLANCore::addEventBit(this, 0xBEu);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 92)) {
    AppleBCMWLANCore::addEventBit(this, 0xC7u);
  }
  AppleBCMWLANCore::addEventBit(this, 0x1Au);
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 97)) {
    AppleBCMWLANCore::addEventBit(this, 0xD1u);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 97)) {
    AppleBCMWLANCore::addEventBit(this, 0xD1u);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 115)) {
    AppleBCMWLANCore::addEventBit(this, 0xCBu);
  }
  if (AppleBCMWLANCore::isCachedEventBitFieldSet(this, 0xACu)) {
    AppleBCMWLANCore::addEventBit(this, 0xACu);
  }
  uint64_t v2 = *((void *)this + 9);
  uint64_t v3 = *(IOLock **)(v2 + 1200);
  IOLockLock(v3);
  *(unsigned char *)(v2 + 1119) &= ~2u;
  IOLockUnlock(v3);
  if (AppleBCMWLANCore::isCachedEventBitFieldSet(this, 0x34u)) {
    AppleBCMWLANCore::addEventBit(this, 0x34u);
  }
  if (AppleBCMWLANCore::isCachedEventBitFieldSet(this, 0xABu)) {
    AppleBCMWLANCore::addEventBit(this, 0xABu);
  }
  if (AppleBCMWLANCore::isCachedEventBitFieldSet(this, 0xDu)) {
    AppleBCMWLANCore::addEventBit(this, 0xDu);
  }
  if (AppleBCMWLANCore::isCachedEventBitFieldSet(this, 0xEu)) {
    AppleBCMWLANCore::addEventBit(this, 0xEu);
  }
  AppleBCMWLANCore::addEventBit(this, 0x45u);
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 95)) {
    AppleBCMWLANCore::addEventBit(this, 0xC8u);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 93)) {
    AppleBCMWLANCore::addEventBit(this, 0xCFu);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 101)) {
    AppleBCMWLANCore::addEventBit(this, 0xBBu);
  }
  uint64_t v4 = AppleBCMWLANCore::writeEventBitField(this);
  uint64_t v5 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (v4)
  {
    if (v5)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v7 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v4);
        CCLogStream::logAlert(v6, "[dk] %s@%d:Failure to Add WLC_E_CCA_CHAN_QUAL/WLC_E_SCAN_COMPLETE  events from the event mask, %s\n", "unconfigureEventBitMaskForUnAssociatedSleep", 52193, v7);
      }
    }
  }
  else if (v5)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v10, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "unconfigureEventBitMaskForUnAssociatedSleep", 52197, "unconfigureEventBitMaskForUnAssociatedSleep");
    }
  }
  return v4;
}

int ___ZN16AppleBCMWLANCore7powerOnEv_block_invoke(id a1)
{
  return 0;
}

uint64_t AppleBCMWLANCore::configureAssociatedSleepExit(IOService *this)
{
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v10 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logNoticeIf(v10, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "configureAssociatedSleepExit", 44592, "configureAssociatedSleepExit");
    }
  }
  BYTE2(this[1].OSObject::OSObjectInterface::__vftable[48].free) = 1;
  AppleBCMWLANCore::updateInactivityAndSleepCounters(this, 0);
  AppleBCMWLANCore::configureAvgRssiParamsForAssociatedSleepExit((AppleBCMWLANCore *)this);
  if (BYTE1(this[1].OSObject::OSObjectInterface::__vftable[48].free))
  {
    if (AppleBCMWLANCore::configureLPASExit((AppleBCMWLANCore *)this))
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v2 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v2, "[dk] %s@%d:Failed to Configure LPAS in F/W\n");
        }
      }
      goto LABEL_19;
    }
    goto LABEL_13;
  }
  if (!AppleBCMWLANCore::configureWoWExit(this))
  {
LABEL_13:
    if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 87))
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          int v19 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v19, "[dk] %s@%d: Configuring Beacon drift mitigation params to FW Active mode\n", "configureAssociatedSleepExit", 44627);
        }
      }
      AppleBCMWLANConfigManager::configureBeaconDriftOffsetConfig((AppleBCMWLANConfigManager *)this[1].OSObject::OSObjectInterface::__vftable[342].init, 0);
    }
    AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 82);
    goto LABEL_19;
  }
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v3 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logAlert(v3, "[dk] %s@%d:Failed to Configure WoW in F/W\n");
    }
  }
LABEL_19:
  if (BYTE4(this[1].OSObject::OSObjectInterface::__vftable[1871].free)) {
    AppleBCMWLANCore::setupTrafficMonitoring((AppleBCMWLANCore *)this, 1);
  }
  if (AppleBCMWLANCore::checkForEarlyBeconTerminationSupport((AppleBCMWLANCore *)this)
    && (uint64_t v4 = AppleBCMWLANPowerManager::configureEarlyBeaconTermination((AppleBCMWLANPowerManager *)this[1].OSObject::OSObjectInterface::__vftable[345].free, 1), v4))
  {
    uint64_t v5 = v4;
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v6, "[dk] %s@%d:Failed to enable EBT in F/W\n");
      }
    }
  }
  else
  {
    if (AppleBCMWLANCore::isMIMOPowerSaveEnabled((AppleBCMWLANCore *)this))
    {
      if (AppleBCMWLANPowerManager::configureMIMOPowerSaveAssociatedSleepExit((AppleBCMWLANPowerManager *)this[1].OSObject::OSObjectInterface::__vftable[345].free))
      {
        if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
        {
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v18 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            CCLogStream::logAlertIf(v18, 0x20uLL, "[dk] %s@%d:Failed to Exit MIMO Power Save\n", "configureAssociatedSleepExit", 44680);
          }
        }
      }
    }
    if ((IO80211BssManager::isAssociatedToAdhoc((IO80211BssManager *)this[1].OSObject::OSObjectInterface::__vftable[340].init) & 1) != 0
      || (uint64_t v7 = AppleBCMWLANConfigManager::setupBeaconOffload((AppleBCMWLANCore ***)this[1].OSObject::OSObjectInterface::__vftable[342].init, 0, 0, LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[13].init), 0), !v7))
    {
      uint64_t v5 = AppleBCMWLANCore::configureAssociatedSleepExitParams((AppleBCMWLANCore *)this);
      if (v5)
      {
        if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
        {
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (CCLogStream::shouldLog())
          {
            float v17 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            CCLogStream::logAlert(v17, "[dk] %s@%d:Failed to configure Associated Sleep Mode\n", "configureAssociatedSleepExit", 44694);
          }
        }
      }
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          int v11 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          int v12 = this[1].OSObject::OSObjectInterface::__vftable;
          int v13 = BYTE1(v12[48].free);
          int free_high = HIDWORD(v12[420].free);
          int IsBitSet = AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 26);
          CCLogStream::logAlert(v11, "[dk] %s@%d: rval[0x%08x], fLPASEnabledBeforeSleep[%u] -> false, fPowerSaveMode[%u], lpasSupported[%u]\n", "configureAssociatedSleepExit", 44697, v5, v13, free_high, IsBitSet);
        }
      }
      AppleBCMWLANCore::collectBeaconRxCounters((AppleBCMWLANCore *)this, (uint64_t)&this[1].OSObject::OSObjectInterface::__vftable[1221].free + 4, 0);
      BYTE1(this[1].OSObject::OSObjectInterface::__vftable[48].free) = 0;
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v16 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logNoticeIf(v16, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "configureAssociatedSleepExit", 44703, "configureAssociatedSleepExit");
        }
      }
    }
    else
    {
      uint64_t v5 = v7;
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v8 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v8, "[dk] %s@%d:Failed to disable Beacon offload\n");
        }
      }
    }
  }
  return v5;
}

uint64_t AppleBCMWLANCore::systemWokenByWiFi(AppleBCMWLANCore *this)
{
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  memset(__dst, 0, sizeof(__dst));
  int v19 = (OSDictionary *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v2 = OSString::withCString("com.apple.iokit.pm.wakedescription");
  int v3 = IOService::StateNotificationItemCopy(*(IOService **)(*((void *)this + 9) + 35392), v2, &v19, 0);
  if (v2) {
    ((void (*)(OSString *))v2->release)(v2);
  }
  if (v3)
  {
LABEL_18:
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v15 = *((void *)this + 9);
        if (v15) {
          LODWORD(v15) = *(_DWORD *)(v15 + 8836);
        }
        CCLogStream::logAlert(v14, "[dk] %s@%d:rv[0x%08x] len[%3u], kern.wakereason: '%s', type[0x%08x]\n", "systemWokenByWiFi", 45356, -1, 255, __dst, v15);
        return 0;
      }
    }
  }
  else
  {
    Object = OSDictionary::getObject(v19, "com.apple.iokit.pm.wakereason");
    uint64_t v5 = (const OSString *)OSMetaClassBase::safeMetaCast(Object, gOSStringMetaClass);
    if (v5)
    {
      CStringNoCopy = OSString::getCStringNoCopy(v5);
      strlcpy(__dst, CStringNoCopy, 0x100uLL);
    }
    else
    {
      IOLog("AppleBCMWLANCore::systemWokenByWiFi: Failed, Unknown Wake reason, [%p]\n", 0);
      strcpy(__dst, "Unknown Wake reason");
    }
    if (v19)
    {
      ((void (*)(OSDictionary *))v19->release)(v19);
      int v19 = 0;
    }
    unsigned int v18 = 0;
    IOParseBootArgNumber("wifibt-external", &v18, 4);
    if (v18
      && (*(void *)__str = 0,
          uint64_t v23 = 0,
          *(void *)__little = 0,
          uint64_t v21 = 0,
          snprintf(__str, 0x10uLL, "pci%04x,%04x", (unsigned __int16)v18, HIWORD(v18)),
          size_t v7 = strlen(__dst),
          strnstr(__dst, __str, v7)))
    {
      int v8 = 0;
      while (1)
      {
        snprintf(__little, 0x10uLL, "ATC%d.CIOWakeup", v8);
        size_t v9 = strlen(__dst);
        if (strnstr(__dst, __little, v9)) {
          break;
        }
        if (++v8 == 4) {
          goto LABEL_14;
        }
      }
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          float v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v17, "[dk] %s@%d:kern.wakereason: '%s'\n");
        }
      }
    }
    else
    {
LABEL_14:
      uint64_t v10 = 0;
      while (1)
      {
        int v11 = kWoWWakeReasonStrings[v10];
        size_t v12 = strlen(__dst);
        if (strnstr(__dst, v11, v12))
        {
          if ((*(unsigned int (**)(void, char *, const char *, uint64_t))(**(void **)(*((void *)this + 9) + 5400)
                                                                                     + 816))(*(void *)(*((void *)this + 9) + 5400), __dst, v11, 255))
          {
            break;
          }
        }
        if (++v10 == 3) {
          goto LABEL_18;
        }
      }
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v16, "[dk] %s@%d:WoW Wake reasouint64_t n = %s, kern.wakereason: '%s', type[0x%08x]\n");
        }
      }
    }
    return 1;
  }
  return result;
}

uint64_t acquireProperty<OSDictionary>(IOService *a1, const char *a2, OSMetaClassBase **a3, unint64_t a4, const char *a5)
{
  anObject = 0;
  uint64_t result = acquirePropertyWithString(a1, a2, (OSContainer **)&anObject, a4, a5);
  if (result)
  {
    size_t v7 = OSMetaClassBase::safeMetaCast(anObject, gOSDictionaryMetaClass);
    if (v7)
    {
      *a3 = v7;
      return 1;
    }
    else
    {
      uint64_t result = (uint64_t)anObject;
      if (anObject)
      {
        ((void (*)(OSMetaClassBase *))anObject->release)(anObject);
        return 0;
      }
    }
  }
  return result;
}

BOOL AppleBCMWLANCore::setWiFiWakeType(AppleBCMWLANCore *this, int a2)
{
  uint64_t v3 = *((void *)this + 9);
  if (v3)
  {
    *(_DWORD *)(v3 + 8836) = a2;
  }
  else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v6, "[dk] %s@%d:Can't set WiFiWakeType[0x%08x]", "setWiFiWakeType", 48872, a2);
    }
  }
  return v3 != 0;
}

uint64_t AppleBCMWLANCore::sendTxPowerCapValueToFirmware(uint64_t result, int a2, int a3)
{
  uint64_t v3 = (void *)result;
  uint64_t v4 = *(void *)(result + 72);
  if ((*(_DWORD *)(v4 + 10388) & 0x2080B0) == 0)
  {
    if (a2 == -1) {
      return result;
    }
    if (a3 == -1) {
      return result;
    }
    uint64_t result = *(void *)(v4 + 5472);
    if (!result) {
      return result;
    }
    uint64_t result = AppleBCMWLANConfigManager::isDualPowerModeSupported((AppleBCMWLANConfigManager *)result);
    if (!result) {
      return result;
    }
    uint64_t result = AppleBCMWLANConfigManager::getTxPowerCapConfig(*(AppleBCMWLANConfigManager **)(v3[9] + 5472));
    int v7 = *(_DWORD *)(result + 12);
    if (v7 != 4)
    {
      if (v7 == 3)
      {
        *(void *)&v31[1] = 0xAAAAAAAAAAAAAAAALL;
        __int16 v32 = -21846;
        v31[0] = 3;
        unint64_t v17 = *(unsigned __int8 *)(result + 11);
        if (*(unsigned char *)(result + 11))
        {
          unint64_t v18 = 0;
          if (a2 == 1 && a3 == 0) {
            char v19 = 2;
          }
          else {
            char v19 = 0;
          }
          if (a2 == 0 && a3 == 1) {
            char v20 = 1;
          }
          else {
            char v20 = v19;
          }
          if (a3 | a2) {
            char v21 = v20;
          }
          else {
            char v21 = 3;
          }
          uint64_t v22 = result + 1;
          do
          {
            if (*(unsigned char *)(v22 + v18)) {
              BOOL v23 = a3 == 0;
            }
            else {
              BOOL v23 = a2 == 0;
            }
            if (*(unsigned char *)(v22 + v18) == 2) {
              char v24 = v21;
            }
            else {
              char v24 = v23;
            }
            v31[++v18] = v24;
          }
          while (v18 < v17);
        }
        uint64_t v14 = *(AppleBCMWLANCommander **)(v3[9] + 5416);
        uint64_t v15 = 11;
      }
      else
      {
        if (v7 != 2) {
          return result;
        }
        v31[5] = -86;
        *(_DWORD *)&v31[1] = -1431655766;
        v31[0] = 2;
        unint64_t v8 = *(unsigned __int8 *)(result + 11);
        if (*(unsigned char *)(result + 11))
        {
          unint64_t v9 = 0;
          if (a2 == 1 && a3 == 0) {
            char v10 = 2;
          }
          else {
            char v10 = 0;
          }
          if (a2 == 0 && a3 == 1) {
            char v10 = 1;
          }
          if (!(a3 | a2)) {
            char v10 = 3;
          }
          uint64_t v11 = result + 1;
          do
          {
            if (*(unsigned char *)(v11 + v9)) {
              BOOL v12 = a3 == 0;
            }
            else {
              BOOL v12 = a2 == 0;
            }
            if (*(unsigned char *)(v11 + v9) == 2) {
              char v13 = v10;
            }
            else {
              char v13 = v12;
            }
            v31[++v9] = v13;
          }
          while (v9 < v8);
        }
        uint64_t v14 = *(AppleBCMWLANCommander **)(v3[9] + 5416);
        uint64_t v15 = 6;
      }
LABEL_61:
      v30[0] = v31;
      v30[1] = v15;
      uint64_t result = AppleBCMWLANCommander::runIOVarSet(v14, (uint64_t)"txcapstate", (uint64_t)v30, 0, 0);
      if (result == -469793790 || result == -469793788)
      {
        uint64_t v27 = v3[9];
        if ((*(unsigned char *)(v27 + 10388) & 0x80) != 0) {
          return result;
        }
      }
      else
      {
        if (!result) {
          return result;
        }
        uint64_t v27 = v3[9];
      }
      return CCFaultReporter::reportFault(*(CCFaultReporter **)(v27 + 5544), 5u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0xD317u, "sendTxPowerCapValueToFirmware", 0, result, "txcapstate failed");
    }
    *(_WORD *)long long v31 = 772;
    if (*(unsigned char *)(result + 1))
    {
      if (*(unsigned char *)(result + 1) == 2)
      {
        if (a3 | a2)
        {
          if (a2 || a3 != 1)
          {
            if (a3) {
              BOOL v28 = 0;
            }
            else {
              BOOL v28 = a2 == 1;
            }
            if (v28) {
              char v16 = 2;
            }
            else {
              char v16 = 0;
            }
          }
          else
          {
            char v16 = 1;
          }
        }
        else
        {
          char v16 = 3;
        }
        goto LABEL_60;
      }
      BOOL v25 = a3 == 0;
    }
    else
    {
      BOOL v25 = a2 == 0;
    }
    char v16 = v25;
LABEL_60:
    v31[2] = v16;
    uint64_t v14 = *(AppleBCMWLANCommander **)(v3[9] + 5416);
    uint64_t v15 = 3;
    goto LABEL_61;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
  if (result)
  {
    (*(void (**)(void *))(*v3 + 1848))(v3);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      long long v29 = (CCLogStream *)(*(uint64_t (**)(void *))(*v3 + 1848))(v3);
      return CCLogStream::logNotice(v29, "[dk] %s@%d:Deferring send Tx Power Cap Value to Firmware due to ivars->fStateFlags 0x%x\n", "sendTxPowerCapValueToFirmware", 53975, *(_DWORD *)(v3[9] + 10388));
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::resetRangingState(AppleBCMWLANCore *this)
{
  uint64_t v2 = *((void *)this + 9);
  if (*(void *)(v2 + 11304))
  {
    __int16 v14 = 0;
    uint64_t v13 = 0;
    v12[0] = &v13;
    v12[1] = 10;
    if (AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(v2 + 5416), (uint64_t)"awdl_ranging_config", (uint64_t)v12, 0, 0))
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          int v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v7, "[dk] %s@%d: Error: Unable to reset ranging state\n", "resetRangingState", 52412);
        }
      }
    }
    uint64_t v3 = *((void *)this + 9);
    if ((*(unsigned char *)(v3 + 10390) & 4) != 0)
    {
      uint64_t v10 = 1;
      int v11 = 2;
      uint64_t v4 = *(IO80211SkywalkInterface **)(v3 + 11304);
      if (v4)
      {
        IO80211Controller::postMessage(this, v4, 0x53u, &v10, 0xCuLL, 1);
      }
      else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v9, "[dk] %s@%d:resetRangingState %d infra interface is not exist\n", "resetRangingState", 52428, 52428);
        }
      }
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v8, "[dk] %s@%d:Posted ranging abort event\n", "resetRangingState", 52430);
        }
      }
      uint64_t v3 = *((void *)this + 9);
    }
    atomic_fetch_and((atomic_uint *volatile)(v3 + 10388), 0xFFFBFFFF);
  }
  else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logCrit(v5, "[dk] %s@%d:NO INTER %s %d\n", "resetRangingState", 52401, "IOReturn AppleBCMWLANCore::resetRangingState(IOReturn)", 52401);
    }
  }
  return 0;
}

int ___ZN16AppleBCMWLANCore8powerOffEb_block_invoke(id a1)
{
  return 0;
}

uint64_t AppleBCMWLANCore::configureAssociatedSleepEntry(AppleBCMWLANCore *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      unint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v9, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "configureAssociatedSleepEntry", 44147, "configureAssociatedSleepEntry");
    }
  }
  AppleBCMWLANCore::configureSupplicantTimeOutForEAPAssociation(this);
  *(unsigned char *)(*((void *)this + 9) + 777) = *(unsigned char *)(*((void *)this + 9) + 6736);
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v10, "[dk] %s@%d: Userland LPAS [%d] , Associated sleep [%d] \n", "configureAssociatedSleepEntry", 44157, *(unsigned __int8 *)(*((void *)this + 9) + 6736), *(unsigned __int8 *)(*((void *)this + 9) + 777));
    }
  }
  if (*(unsigned char *)(*((void *)this + 9) + 777))
  {
    uint64_t v2 = AppleBCMWLANCore::configureLPASEntry(this);
    uint64_t v3 = v2;
    if (v2 == -536870174) {
      return v3;
    }
    if (!v2)
    {
      if (AppleBCMWLANCore::featureFlagIsBitSet(this, 87))
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            __int16 v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logInfo(v14, "[dk] %s@%d: Configuring Beacon drift mitigation params to FW LPAS mode \n", "configureAssociatedSleepEntry", 44179);
          }
        }
        AppleBCMWLANConfigManager::configureBeaconDriftOffsetConfig(*(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472), 1);
      }
      if (AppleBCMWLANCore::featureFlagIsBitSet(this, 82))
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logInfo(v4, "[dk] %s@%d: Configuring Beacon mute mitigation params to FW LPAS mode \n", "configureAssociatedSleepEntry", 44183);
          }
        }
      }
LABEL_31:
      if (AppleBCMWLANCore::checkForEarlyBeconTerminationSupport(this))
      {
        if (AppleBCMWLANPowerManager::configureEarlyBeaconTermination(*(AppleBCMWLANPowerManager **)(*((void *)this + 9) + 5528), 0))
        {
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              BOOL v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v12, "[dk] %s@%d:Failed to disable EBT in F/W\n", "configureAssociatedSleepEntry", 44205);
            }
          }
        }
      }
      if ((IO80211BssManager::isAssociatedToAdhoc(*(IO80211BssManager **)(*((void *)this + 9) + 5440)) & 1) == 0)
      {
        if (AppleBCMWLANConfigManager::setupBeaconOffload(*(AppleBCMWLANCore ****)(*((void *)this + 9) + 5472), 1, 0, *(unsigned __int8 *)(*((void *)this + 9) + 208), 0))
        {
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v13, "[dk] %s@%d:Failed to enable Beacon Offload in F/W\n", "configureAssociatedSleepEntry", 44213);
            }
          }
        }
      }
      if (AppleBCMWLANCore::isMIMOPowerSaveEnabled(this)) {
        AppleBCMWLANPowerManager::configureMIMOPowerSaveAssociatedSleepEntry(*(AppleBCMWLANPowerManager **)(*((void *)this + 9) + 5528));
      }
      if (*(unsigned char *)(*((void *)this + 9) + 29948)) {
        AppleBCMWLANCore::setupTrafficMonitoring(this, 0);
      }
      AppleBCMWLANCore::configureAssociatedSleepEntryParams(this);
      mach_continuous_time();
      absolutetime_to_nanoseconds();
      *(void *)(*((void *)this + 9) + 17552) = 0;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          int v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logNoticeIf(v11, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "configureAssociatedSleepEntry", 44233, "configureAssociatedSleepEntry");
        }
      }
      return 0;
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:Failed to Configure LPAS in F/W\n");
      }
    }
  }
  else
  {
    uint64_t v5 = AppleBCMWLANCore::configureWoWEntry((IOService *)this);
    if (!v5)
    {
      if (AppleBCMWLANCore::featureFlagIsBitSet(this, 87))
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v15, "[dk] %s@%d: Configuring Beacon drift mitigation params to FW WoW Mode\n", "configureAssociatedSleepEntry", 44197);
          }
        }
        AppleBCMWLANConfigManager::configureBeaconDriftOffsetConfig(*(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472), 2);
      }
      goto LABEL_31;
    }
    uint64_t v3 = v5;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v6, "[dk] %s@%d:Failed to Configure WoW in F/W\n");
      }
    }
  }
  return v3;
}

uint64_t AppleBCMWLANCore::configureEventBitMaskForUnAssociatedSleep(AppleBCMWLANCore *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      __int16 v53 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v53, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "configureEventBitMaskForUnAssociatedSleep", 52025, "configureEventBitMaskForUnAssociatedSleep");
    }
  }
  IOLockLock(*(IOLock **)(*((void *)this + 9) + 1200));
  uint64_t v2 = (_OWORD *)*((void *)this + 9);
  uint64_t v3 = (_OWORD *)((char *)v2 + 1139);
  uint64_t v2 = (_OWORD *)((char *)v2 + 1112);
  _OWORD *v3 = *v2;
  *(_OWORD *)((char *)v3 + 11) = *(_OWORD *)((char *)v2 + 11);
  IOLockUnlock(*(IOLock **)(*((void *)this + 9) + 1200));
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 34))
  {
    uint64_t v4 = *((void *)this + 9);
    uint64_t v5 = *(IOLock **)(v4 + 1200);
    IOLockLock(v5);
    *(unsigned char *)(v4 + 1134) &= ~0x10u;
    IOLockUnlock(v5);
    uint64_t v6 = *((void *)this + 9);
    int v7 = *(IOLock **)(v6 + 1200);
    IOLockLock(v7);
    *(unsigned char *)(v6 + 1133) &= ~0x10u;
    IOLockUnlock(v7);
  }
  uint64_t v8 = *((void *)this + 9);
  unint64_t v9 = *(IOLock **)(v8 + 1200);
  IOLockLock(v9);
  *(unsigned char *)(v8 + 1113) &= ~0x20u;
  IOLockUnlock(v9);
  uint64_t v10 = *((void *)this + 9);
  int v11 = *(IOLock **)(v10 + 1200);
  IOLockLock(v11);
  *(unsigned char *)(v10 + 1113) &= ~0x40u;
  IOLockUnlock(v11);
  uint64_t v12 = *((void *)this + 9);
  uint64_t v13 = *(IOLock **)(v12 + 1200);
  IOLockLock(v13);
  *(unsigned char *)(v12 + 1118) &= ~0x10u;
  IOLockUnlock(v13);
  uint64_t v14 = *((void *)this + 9);
  uint64_t v15 = *(IOLock **)(v14 + 1200);
  IOLockLock(v15);
  *(unsigned char *)(v14 + 1133) &= ~8u;
  IOLockUnlock(v15);
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 33))
  {
    uint64_t v16 = *((void *)this + 9);
    unint64_t v17 = *(IOLock **)(v16 + 1200);
    IOLockLock(v17);
    *(unsigned char *)(v16 + 1127) &= ~0x10u;
    IOLockUnlock(v17);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 34)
    && AppleBCMWLANCore::featureFlagIsBitSet(this, 76))
  {
    uint64_t v18 = *((void *)this + 9);
    char v19 = *(IOLock **)(v18 + 1200);
    IOLockLock(v19);
    *(unsigned char *)(v18 + 1135) &= ~0x20u;
    IOLockUnlock(v19);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 71))
  {
    uint64_t v20 = *((void *)this + 9);
    char v21 = *(IOLock **)(v20 + 1200);
    IOLockLock(v21);
    *(unsigned char *)(v20 + 1135) &= ~1u;
    IOLockUnlock(v21);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 79))
  {
    uint64_t v22 = *((void *)this + 9);
    BOOL v23 = *(IOLock **)(v22 + 1200);
    IOLockLock(v23);
    *(unsigned char *)(v22 + 1135) &= ~0x40u;
    IOLockUnlock(v23);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 92))
  {
    uint64_t v24 = *((void *)this + 9);
    BOOL v25 = *(IOLock **)(v24 + 1200);
    IOLockLock(v25);
    *(unsigned char *)(v24 + 1136) &= ~0x80u;
    IOLockUnlock(v25);
  }
  uint64_t v26 = *((void *)this + 9);
  uint64_t v27 = *(IOLock **)(v26 + 1200);
  IOLockLock(v27);
  *(unsigned char *)(v26 + 1115) &= ~4u;
  IOLockUnlock(v27);
  uint64_t v28 = *((void *)this + 9);
  long long v29 = *(IOLock **)(v28 + 1200);
  IOLockLock(v29);
  *(unsigned char *)(v28 + 1138) &= ~2u;
  IOLockUnlock(v29);
  uint64_t v30 = *((void *)this + 9);
  long long v31 = *(IOLock **)(v30 + 1200);
  IOLockLock(v31);
  *(unsigned char *)(v30 + 1138) &= ~0x10u;
  IOLockUnlock(v31);
  uint64_t v32 = *((void *)this + 9);
  long long v33 = *(IOLock **)(v32 + 1200);
  IOLockLock(v33);
  *(unsigned char *)(v32 + 1117) &= ~0x40u;
  IOLockUnlock(v33);
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 115))
  {
    uint64_t v34 = *((void *)this + 9);
    long long v35 = *(IOLock **)(v34 + 1200);
    IOLockLock(v35);
    *(unsigned char *)(v34 + 1137) &= ~8u;
    IOLockUnlock(v35);
  }
  if (AppleBCMWLANBGScanAdapter::isBGScanCacheRollOverEnabled(*(AppleBCMWLANBGScanAdapter **)(*((void *)this + 9)
                                                                                             + 5504)))
  {
    uint64_t v36 = *((void *)this + 9);
    long long v37 = *(IOLock **)(v36 + 1200);
    IOLockLock(v37);
    *(unsigned char *)(v36 + 1119) &= ~2u;
    IOLockUnlock(v37);
  }
  else
  {
    AppleBCMWLANCore::addEventBit(this, 0x39u);
  }
  uint64_t v38 = *((void *)this + 9);
  unint64_t v39 = *(IOLock **)(v38 + 1200);
  IOLockLock(v39);
  *(unsigned char *)(v38 + 1120) &= ~0x20u;
  IOLockUnlock(v39);
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 95))
  {
    uint64_t v40 = *((void *)this + 9);
    int v41 = *(IOLock **)(v40 + 1200);
    IOLockLock(v41);
    *(unsigned char *)(v40 + 1137) &= ~1u;
    IOLockUnlock(v41);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 93))
  {
    uint64_t v42 = *((void *)this + 9);
    int v43 = *(IOLock **)(v42 + 1200);
    IOLockLock(v43);
    *(unsigned char *)(v42 + 1137) &= ~0x80u;
    IOLockUnlock(v43);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 101))
  {
    uint64_t v44 = *((void *)this + 9);
    uint64_t v45 = *(IOLock **)(v44 + 1200);
    IOLockLock(v45);
    *(unsigned char *)(v44 + 1135) &= ~8u;
    IOLockUnlock(v45);
  }
  IOLockLock(*(IOLock **)(*((void *)this + 9) + 1200));
  unsigned __int8 v46 = (_OWORD *)*((void *)this + 9);
  uint64_t v47 = (_OWORD *)((char *)v46 + 1166);
  unsigned __int8 v46 = (_OWORD *)((char *)v46 + 1112);
  *uint64_t v47 = *v46;
  *(_OWORD *)((char *)v47 + 11) = *(_OWORD *)((char *)v46 + 11);
  IOLockUnlock(*(IOLock **)(*((void *)this + 9) + 1200));
  uint64_t v48 = AppleBCMWLANCore::writeEventBitField(this);
  uint64_t v49 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (v48)
  {
    if (v49)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v50 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v51 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v48);
        CCLogStream::logAlert(v50, "[dk] %s@%d:Failure to clear WLC_E_CCA_CHAN_QUAL/WLC_E_SCAN_COMPLETE events from the event mask, %s\n", "configureEventBitMaskForUnAssociatedSleep", 52100, v51);
      }
    }
  }
  else if (v49)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      char v54 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v54, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "configureEventBitMaskForUnAssociatedSleep", 52105, "configureEventBitMaskForUnAssociatedSleep");
    }
  }
  return v48;
}

uint64_t AppleBCMWLANCore::resetWoWStateMachine(AppleBCMWLANCore *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v4, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "resetWoWStateMachine", 40640, "resetWoWStateMachine");
    }
  }
  *(unsigned char *)(*((void *)this + 9) + 8831) = 0;
  *(unsigned char *)(*((void *)this + 9) + 9492) = 0;
  *(_DWORD *)(*((void *)this + 9) + 9500) = 0;
  *(unsigned char *)(*((void *)this + 9) + 8829) = 0;
  *(unsigned char *)(*((void *)this + 9) + 8830) = 0;
  *(unsigned char *)(*((void *)this + 9) + 8832) = 0;
  *(unsigned char *)(*((void *)this + 9) + 10322) = 0;
  uint64_t v2 = -160;
  do
  {
    *(_OWORD *)(*((void *)this + 9) + v2 + 9952) = 0uLL;
    v2 += 16;
  }
  while (v2);
  *(_DWORD *)(*((void *)this + 9) + 10048) = 0;
  *(unsigned char *)(*((void *)this + 9) + 10052) = 0;
  *(unsigned char *)(*((void *)this + 9) + 10053) = 0;
  *(unsigned char *)(*((void *)this + 9) + 10054) = 0;
  *(unsigned char *)(*((void *)this + 9) + 10055) = 0;
  *(unsigned char *)(*((void *)this + 9) + 776) = 0;
  *(unsigned char *)(*((void *)this + 9) + 6600) = 0;
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      return CCLogStream::logNoticeIf(v5, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "resetWoWStateMachine", 40658, "resetWoWStateMachine");
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::resetPktFilterParams(AppleBCMWLANCore *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v3 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v3, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "resetPktFilterParams", 40664, "resetPktFilterParams");
    }
  }
  *(_DWORD *)(*((void *)this + 9) + 9500) = 0;
  *(unsigned char *)(*((void *)this + 9) + 10322) = 0;
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      return CCLogStream::logNoticeIf(v4, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "resetPktFilterParams", 40667, "resetPktFilterParams");
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::getSupportedBands(AppleBCMWLANCore *this)
{
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 28)) {
    return 3;
  }
  else {
    return 1;
  }
}

uint64_t AppleBCMWLANCore::configureWeightAvgLQMUpdates(AppleBCMWLANCore *a1, _OWORD *a2)
{
  uint64_t v2 = 3758097085;
  if (!a2) {
    return 3758097084;
  }
  uint64_t v5 = IOMallocZeroData();
  if (v5)
  {
    uint64_t v6 = v5;
    *(void *)uint64_t v5 = 0x10000000140000;
    *(_OWORD *)(v5 + 8) = *a2;
    int v7 = *(AppleBCMWLANCommander **)(*((void *)a1 + 9) + 5416);
    v17[0] = v6;
    v17[1] = 24;
    uint64_t v8 = AppleBCMWLANCommander::runIOVarSet(v7, (uint64_t)"lq_wa_params", (uint64_t)v17, 0, 0);
    if (v8 == -469794537)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logAlert(v15, "[dk] %s@%d:Firmware does not support weighted average LQM\n", "configureWeightAvgLQMUpdates", 41477);
        }
      }
      AppleBCMWLANCore::featureFlagClearBit(a1, 71);
      uint64_t v2 = 3825172759;
    }
    else
    {
      uint64_t v2 = v8;
      if (v8)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logAlert(v16, "[dk] %s@%d:Error - Fail to configure weighted average LQM\n", "configureWeightAvgLQMUpdates", 41482);
          }
        }
        AppleBCMWLANCore::featureFlagClearBit(a1, 71);
      }
      else
      {
        unsigned int v9 = 0;
        uint64_t v10 = (unsigned __int8 *)(v6 + 11);
        do
        {
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              CCLogStream::logAlert(v12, "[dk] %s@%d:Weighted Averge %s Conf: NumTotal=%d, NumRecent=%d, WeightRecent=%d%%\n", "configureWeightAvgLQMUpdates", 41490, off_10038C880[*(v10 - 3)], *(v10 - 2), *(v10 - 1), *v10);
            }
          }
          v10 += 4;
        }
        while (v9++ < 3);
        AppleBCMWLANCore::featureFlagSetBit(a1, 71);
        AppleBCMWLANCore::addEventBit(a1, 0xB8u);
        uint64_t v2 = 0;
      }
    }
    IOFreeData();
  }
  else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      CCLogStream::logAlert(v13, "[dk] %s@%d:Allocation Failure for Weighted Average LQM config\n", "configureWeightAvgLQMUpdates", 41463);
    }
  }
  return v2;
}

uint64_t AppleBCMWLANCore::isSensingCapable(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 97);
}

uint64_t AppleBCMWLANCore::isNDDCapable(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 119);
}

uint64_t AppleBCMWLANCore::isDualBand(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 28);
}

IO80211Controller *AppleBCMWLANCore::reportLQMCrashTracerFeatureFlag(IO80211Controller *this)
{
  uint64_t v1 = *((void *)this + 9);
  int v3 = *(unsigned __int8 *)(v1 + 29920);
  uint64_t v2 = *(IO80211SkywalkInterface **)(v1 + 11304);
  if (v2) {
    return (IO80211Controller *)IO80211Controller::postMessage(this, v2, 0xB1u, &v3, 4uLL, 1);
  }
  return this;
}

IO80211Controller *AppleBCMWLANCore::reportP2PForULLRTInfraFeatureFlag(IO80211Controller *this)
{
  uint64_t v1 = *((void *)this + 9);
  int v3 = *(unsigned __int8 *)(v1 + 29936);
  uint64_t v2 = *(IO80211SkywalkInterface **)(v1 + 11304);
  if (v2) {
    return (IO80211Controller *)IO80211Controller::postMessage(this, v2, 0xC2u, &v3, 4uLL, 1);
  }
  return this;
}

void *AppleBCMWLANCore::setL3CtrlTxProfile(void *this, int a2)
{
  uint64_t v2 = this[9];
  if (*(_DWORD *)(v2 + 18332) != a2)
  {
    uint64_t v4 = this;
    *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v19[10] = v5;
    *(_OWORD *)char v19 = v5;
    long long v18 = v5;
    *(_OWORD *)&v17[32] = v5;
    *(_OWORD *)&v17[16] = v5;
    *(_OWORD *)unint64_t v17 = v5;
    if (a2)
    {
      *(_DWORD *)unint64_t v17 = 65568;
      *(_WORD *)&v17[4] = 4;
      *(void *)&v17[6] = 0x4000200000010;
      *(void *)&v17[14] = 0x400030000000CLL;
      *(void *)&v17[22] = 0x4000700000000;
      __int16 v6 = 40;
      __int16 v7 = 1;
      *(_DWORD *)&v17[30] = 2000;
      uint64_t v8 = 44;
    }
    else
    {
      __int16 v6 = 6;
      __int16 v7 = 3;
      uint64_t v8 = 10;
    }
    v14[0] = v7;
    int v15 = 0;
    v14[1] = v6;
    __int16 v16 = 0;
    unsigned int v9 = *(AppleBCMWLANCommander **)(v2 + 5416);
    v13[0] = v14;
    v13[1] = v8;
    this = (void *)AppleBCMWLANCommander::runIOVarSet(v9, (uint64_t)"tx_profile", (uint64_t)v13, 0, 0);
    if (!this)
    {
      this = (void *)(*(uint64_t (**)(void *))(*v4 + 1848))(v4);
      if (this)
      {
        (*(void (**)(void *))(*v4 + 1848))(v4);
        this = (void *)CCLogStream::shouldLog();
        if (this)
        {
          uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(void *))(*v4 + 1848))(v4);
          int v11 = v14[0];
          uint64_t v12 = (const char *)(*(uint64_t (**)(void *, void))(*v4 + 112))(v4, 0);
          this = (void *)CCLogStream::logAlert(v10, "[dk] %s@%d: Reliable L3 control frames tx_profile iovar command %d: %s \n", "setL3CtrlTxProfile", 42105, v11, v12);
        }
      }
      *(_DWORD *)(v4[9] + 18332) = a2;
    }
  }
  return this;
}

uint64_t AppleBCMWLANCore::enablePTKKeyBuffer(AppleBCMWLANCore *this)
{
  int v7 = 1;
  uint64_t v2 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  v6[0] = &v7;
  v6[1] = 4;
  uint64_t v3 = AppleBCMWLANCommander::runIOVarSet(v2, (uint64_t)"buf_key_b4_m4", (uint64_t)v6, 0, 0);
  if (v3)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v5, "[dk] %s@%d: Error: Unable to set iovar buf_key_b4_m4 %x\n", "enablePTKKeyBuffer", 42214, v3);
      }
    }
  }
  return v3;
}

uint64_t AppleBCMWLANCore::configureSupplicantTimeOutForEAPAssociation(AppleBCMWLANCore *this)
{
  uint64_t CurrentBSS = (IO80211BSSBeacon *)AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(*((void *)this + 9) + 5440));
  if (!CurrentBSS || !IO80211BSSBeacon::is8021xEnabled(CurrentBSS)) {
    return 0;
  }
  uint64_t v3 = *(AppleBCMWLANJoinAdapter **)(*((void *)this + 9) + 5424);
  return AppleBCMWLANJoinAdapter::configureSupplicantTimeOutForEAPAssociation(v3);
}

uint64_t AppleBCMWLANCore::sendTxDCSlice0Ant0StatsCoreAnalytics(IOService *this)
{
  OSStringPtr v2 = OSString::withCString("com.apple.wifi.TxDCStatsSlice0Ant0");
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = OSDictionary::withCapacity(0xAu);
    if (!v4)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v40 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v40, "[dk] %s@%d:Fail to allocate eventPayload\n");
        }
      }
      goto LABEL_27;
    }
    OSStringPtr v5 = OSString::withCString("Slice0Ant0TxDC0To10");
    if (v5)
    {
      __int16 v6 = v5;
      OSNumberPtr v7 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[394].free, 0x40uLL);
      if (!v7)
      {
        if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
          goto LABEL_97;
        }
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if ((CCLogStream::shouldLog() & 1) == 0) {
          goto LABEL_97;
        }
        int v41 = 42249;
        goto LABEL_99;
      }
      OSNumberPtr v8 = v7;
      OSDictionary::setObject(v4, v6, v7);
      ((void (*)(const OSObject *))v6->release)(v6);
      ((void (*)(OSNumberPtr))v8->release)(v8);
      OSStringPtr v9 = OSString::withCString("Slice0Ant0TxDC10To20");
      if (v9)
      {
        __int16 v6 = v9;
        OSNumberPtr v10 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[395].init, 0x40uLL);
        if (!v10)
        {
          if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
            goto LABEL_97;
          }
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if ((CCLogStream::shouldLog() & 1) == 0) {
            goto LABEL_97;
          }
          int v41 = 42257;
          goto LABEL_99;
        }
        OSNumberPtr v11 = v10;
        OSDictionary::setObject(v4, v6, v10);
        ((void (*)(const OSObject *))v6->release)(v6);
        ((void (*)(OSNumberPtr))v11->release)(v11);
        OSStringPtr v12 = OSString::withCString("Slice0Ant0TxDC20To30");
        if (v12)
        {
          __int16 v6 = v12;
          OSNumberPtr v13 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[395].free, 0x40uLL);
          if (!v13)
          {
            if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
              goto LABEL_97;
            }
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if ((CCLogStream::shouldLog() & 1) == 0) {
              goto LABEL_97;
            }
            int v41 = 42265;
            goto LABEL_99;
          }
          OSNumberPtr v14 = v13;
          OSDictionary::setObject(v4, v6, v13);
          ((void (*)(const OSObject *))v6->release)(v6);
          ((void (*)(OSNumberPtr))v14->release)(v14);
          OSStringPtr v15 = OSString::withCString("Slice0Ant0TxDC30To40");
          if (v15)
          {
            __int16 v6 = v15;
            OSNumberPtr v16 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[396].init, 0x40uLL);
            if (!v16)
            {
              if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                goto LABEL_97;
              }
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if ((CCLogStream::shouldLog() & 1) == 0) {
                goto LABEL_97;
              }
              int v41 = 42273;
              goto LABEL_99;
            }
            OSNumberPtr v17 = v16;
            OSDictionary::setObject(v4, v6, v16);
            ((void (*)(const OSObject *))v6->release)(v6);
            ((void (*)(OSNumberPtr))v17->release)(v17);
            OSStringPtr v18 = OSString::withCString("Slice0Ant0TxDC40To50");
            if (v18)
            {
              __int16 v6 = v18;
              OSNumberPtr v19 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[396].free, 0x40uLL);
              if (!v19)
              {
                if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                  goto LABEL_97;
                }
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if ((CCLogStream::shouldLog() & 1) == 0) {
                  goto LABEL_97;
                }
                int v41 = 42281;
                goto LABEL_99;
              }
              OSNumberPtr v20 = v19;
              OSDictionary::setObject(v4, v6, v19);
              ((void (*)(const OSObject *))v6->release)(v6);
              ((void (*)(OSNumberPtr))v20->release)(v20);
              OSStringPtr v21 = OSString::withCString("Slice0Ant0TxDC50To60");
              if (v21)
              {
                __int16 v6 = v21;
                OSNumberPtr v22 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[397].init, 0x40uLL);
                if (!v22)
                {
                  if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                    goto LABEL_97;
                  }
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  if ((CCLogStream::shouldLog() & 1) == 0) {
                    goto LABEL_97;
                  }
                  int v41 = 42289;
                  goto LABEL_99;
                }
                OSNumberPtr v23 = v22;
                OSDictionary::setObject(v4, v6, v22);
                ((void (*)(const OSObject *))v6->release)(v6);
                ((void (*)(OSNumberPtr))v23->release)(v23);
                OSStringPtr v24 = OSString::withCString("Slice0Ant0TxDC60To70");
                if (v24)
                {
                  __int16 v6 = v24;
                  OSNumberPtr v25 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[397].free, 0x40uLL);
                  if (!v25)
                  {
                    if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                      goto LABEL_97;
                    }
                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    if ((CCLogStream::shouldLog() & 1) == 0) {
                      goto LABEL_97;
                    }
                    int v41 = 42297;
                    goto LABEL_99;
                  }
                  OSNumberPtr v26 = v25;
                  OSDictionary::setObject(v4, v6, v25);
                  ((void (*)(const OSObject *))v6->release)(v6);
                  ((void (*)(OSNumberPtr))v26->release)(v26);
                  OSStringPtr v27 = OSString::withCString("Slice0Ant0TxDC70To80");
                  if (v27)
                  {
                    __int16 v6 = v27;
                    OSNumberPtr v28 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[398].init, 0x40uLL);
                    if (!v28)
                    {
                      if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                        goto LABEL_97;
                      }
                      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                      if ((CCLogStream::shouldLog() & 1) == 0) {
                        goto LABEL_97;
                      }
                      int v41 = 42305;
                      goto LABEL_99;
                    }
                    OSNumberPtr v29 = v28;
                    OSDictionary::setObject(v4, v6, v28);
                    ((void (*)(const OSObject *))v6->release)(v6);
                    ((void (*)(OSNumberPtr))v29->release)(v29);
                    OSStringPtr v30 = OSString::withCString("Slice0Ant0TxDC80To90");
                    if (v30)
                    {
                      __int16 v6 = v30;
                      OSNumberPtr v31 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[398].free, 0x40uLL);
                      if (!v31)
                      {
                        if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                          goto LABEL_97;
                        }
                        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                        if ((CCLogStream::shouldLog() & 1) == 0) {
                          goto LABEL_97;
                        }
                        int v41 = 42313;
LABEL_99:
                        uint64_t v47 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                        CCLogStream::logAlert(v47, "[dk] %s@%d:Fail to allocate numValue\n", "sendTxDCSlice0Ant0StatsCoreAnalytics", v41);
LABEL_97:
                        ((void (*)(const OSObject *))v6->release)(v6);
                        goto LABEL_27;
                      }
                      OSNumberPtr v32 = v31;
                      OSDictionary::setObject(v4, v6, v31);
                      ((void (*)(const OSObject *))v6->release)(v6);
                      ((void (*)(OSNumberPtr))v32->release)(v32);
                      OSStringPtr v33 = OSString::withCString("Slice0Ant0TxDC90To100");
                      if (v33)
                      {
                        __int16 v6 = v33;
                        OSNumberPtr v34 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[399].init, 0x40uLL);
                        if (v34)
                        {
                          OSNumberPtr v35 = v34;
                          OSDictionary::setObject(v4, v6, v34);
                          ((void (*)(const OSObject *))v6->release)(v6);
                          ((void (*)(OSNumberPtr))v35->release)(v35);
                          uint64_t v36 = IOService::CoreAnalyticsSendEvent(this, 0, v3, v4, 0);
                          if (v36)
                          {
                            uint64_t v37 = v36;
                            if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                            {
                              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                              if (CCLogStream::shouldLog())
                              {
                                int v43 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                CStringNoCopy = OSString::getCStringNoCopy(v3);
                                uint64_t v45 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v37);
                                CCLogStream::logEmergency(v43, "[dk] %s@%d:Failed to send CoreAnalytics for event %s : %s\n", "sendTxDCSlice0Ant0StatsCoreAnalytics", 42329, CStringNoCopy, v45);
                              }
                            }
                          }
                          goto LABEL_27;
                        }
                        if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                          goto LABEL_97;
                        }
                        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                        if ((CCLogStream::shouldLog() & 1) == 0) {
                          goto LABEL_97;
                        }
                        int v41 = 42321;
                        goto LABEL_99;
                      }
                      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                      {
                        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                        if (CCLogStream::shouldLog())
                        {
LABEL_94:
                          uint64_t v42 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                          CCLogStream::logAlert(v42, "[dk] %s@%d:Fail to allocate keyString\n");
                        }
                      }
                    }
                    else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                    {
                      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                      if (CCLogStream::shouldLog()) {
                        goto LABEL_94;
                      }
                    }
                  }
                  else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                  {
                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    if (CCLogStream::shouldLog()) {
                      goto LABEL_94;
                    }
                  }
                }
                else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                {
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  if (CCLogStream::shouldLog()) {
                    goto LABEL_94;
                  }
                }
              }
              else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
              {
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if (CCLogStream::shouldLog()) {
                  goto LABEL_94;
                }
              }
            }
            else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog()) {
                goto LABEL_94;
              }
            }
          }
          else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog()) {
              goto LABEL_94;
            }
          }
        }
        else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
        {
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (CCLogStream::shouldLog()) {
            goto LABEL_94;
          }
        }
      }
      else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog()) {
          goto LABEL_94;
        }
      }
    }
    else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog()) {
        goto LABEL_94;
      }
    }
LABEL_27:
    uint64_t result = ((uint64_t (*)(OSString *))v3->release)(v3);
    if (v4)
    {
      release = v4->release;
      return ((uint64_t (*)(OSDictionary *))release)(v4);
    }
    return result;
  }
  uint64_t result = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
  if (result)
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      unsigned __int8 v46 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      return CCLogStream::logAlert(v46, "[dk] %s@%d:Fail to allocate eventName\n", "sendTxDCSlice0Ant0StatsCoreAnalytics", 42242);
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::sendTxDCSlice1Ant0StatsCoreAnalytics(IOService *this)
{
  OSStringPtr v2 = OSString::withCString("com.apple.wifi.TxDCStatsSlice1Ant0");
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = OSDictionary::withCapacity(0xAu);
    if (!v4)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v40 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v40, "[dk] %s@%d:Fail to allocate eventPayload\n");
        }
      }
      goto LABEL_27;
    }
    OSStringPtr v5 = OSString::withCString("Slice1Ant0TxDC0To10");
    if (v5)
    {
      __int16 v6 = v5;
      OSNumberPtr v7 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[400].init, 0x40uLL);
      if (!v7)
      {
        if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
          goto LABEL_97;
        }
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if ((CCLogStream::shouldLog() & 1) == 0) {
          goto LABEL_97;
        }
        int v41 = 42357;
        goto LABEL_99;
      }
      OSNumberPtr v8 = v7;
      OSDictionary::setObject(v4, v6, v7);
      ((void (*)(const OSObject *))v6->release)(v6);
      ((void (*)(OSNumberPtr))v8->release)(v8);
      OSStringPtr v9 = OSString::withCString("Slice1Ant0TxDC10To20");
      if (v9)
      {
        __int16 v6 = v9;
        OSNumberPtr v10 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[400].free, 0x40uLL);
        if (!v10)
        {
          if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
            goto LABEL_97;
          }
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if ((CCLogStream::shouldLog() & 1) == 0) {
            goto LABEL_97;
          }
          int v41 = 42365;
          goto LABEL_99;
        }
        OSNumberPtr v11 = v10;
        OSDictionary::setObject(v4, v6, v10);
        ((void (*)(const OSObject *))v6->release)(v6);
        ((void (*)(OSNumberPtr))v11->release)(v11);
        OSStringPtr v12 = OSString::withCString("Slice1Ant0TxDC20To30");
        if (v12)
        {
          __int16 v6 = v12;
          OSNumberPtr v13 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[401].init, 0x40uLL);
          if (!v13)
          {
            if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
              goto LABEL_97;
            }
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if ((CCLogStream::shouldLog() & 1) == 0) {
              goto LABEL_97;
            }
            int v41 = 42373;
            goto LABEL_99;
          }
          OSNumberPtr v14 = v13;
          OSDictionary::setObject(v4, v6, v13);
          ((void (*)(const OSObject *))v6->release)(v6);
          ((void (*)(OSNumberPtr))v14->release)(v14);
          OSStringPtr v15 = OSString::withCString("Slice1Ant0TxDC30To40");
          if (v15)
          {
            __int16 v6 = v15;
            OSNumberPtr v16 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[401].free, 0x40uLL);
            if (!v16)
            {
              if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                goto LABEL_97;
              }
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if ((CCLogStream::shouldLog() & 1) == 0) {
                goto LABEL_97;
              }
              int v41 = 42381;
              goto LABEL_99;
            }
            OSNumberPtr v17 = v16;
            OSDictionary::setObject(v4, v6, v16);
            ((void (*)(const OSObject *))v6->release)(v6);
            ((void (*)(OSNumberPtr))v17->release)(v17);
            OSStringPtr v18 = OSString::withCString("Slice1Ant0TxDC40To50");
            if (v18)
            {
              __int16 v6 = v18;
              OSNumberPtr v19 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[402].init, 0x40uLL);
              if (!v19)
              {
                if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                  goto LABEL_97;
                }
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if ((CCLogStream::shouldLog() & 1) == 0) {
                  goto LABEL_97;
                }
                int v41 = 42389;
                goto LABEL_99;
              }
              OSNumberPtr v20 = v19;
              OSDictionary::setObject(v4, v6, v19);
              ((void (*)(const OSObject *))v6->release)(v6);
              ((void (*)(OSNumberPtr))v20->release)(v20);
              OSStringPtr v21 = OSString::withCString("Slice1Ant0TxDC50To60");
              if (v21)
              {
                __int16 v6 = v21;
                OSNumberPtr v22 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[402].free, 0x40uLL);
                if (!v22)
                {
                  if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                    goto LABEL_97;
                  }
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  if ((CCLogStream::shouldLog() & 1) == 0) {
                    goto LABEL_97;
                  }
                  int v41 = 42397;
                  goto LABEL_99;
                }
                OSNumberPtr v23 = v22;
                OSDictionary::setObject(v4, v6, v22);
                ((void (*)(const OSObject *))v6->release)(v6);
                ((void (*)(OSNumberPtr))v23->release)(v23);
                OSStringPtr v24 = OSString::withCString("Slice1Ant0TxDC60To70");
                if (v24)
                {
                  __int16 v6 = v24;
                  OSNumberPtr v25 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[403].init, 0x40uLL);
                  if (!v25)
                  {
                    if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                      goto LABEL_97;
                    }
                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    if ((CCLogStream::shouldLog() & 1) == 0) {
                      goto LABEL_97;
                    }
                    int v41 = 42405;
                    goto LABEL_99;
                  }
                  OSNumberPtr v26 = v25;
                  OSDictionary::setObject(v4, v6, v25);
                  ((void (*)(const OSObject *))v6->release)(v6);
                  ((void (*)(OSNumberPtr))v26->release)(v26);
                  OSStringPtr v27 = OSString::withCString("Slice1Ant0TxDC70To80");
                  if (v27)
                  {
                    __int16 v6 = v27;
                    OSNumberPtr v28 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[403].free, 0x40uLL);
                    if (!v28)
                    {
                      if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                        goto LABEL_97;
                      }
                      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                      if ((CCLogStream::shouldLog() & 1) == 0) {
                        goto LABEL_97;
                      }
                      int v41 = 42413;
                      goto LABEL_99;
                    }
                    OSNumberPtr v29 = v28;
                    OSDictionary::setObject(v4, v6, v28);
                    ((void (*)(const OSObject *))v6->release)(v6);
                    ((void (*)(OSNumberPtr))v29->release)(v29);
                    OSStringPtr v30 = OSString::withCString("Slice1Ant0TxDC80To90");
                    if (v30)
                    {
                      __int16 v6 = v30;
                      OSNumberPtr v31 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[404].init, 0x40uLL);
                      if (!v31)
                      {
                        if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                          goto LABEL_97;
                        }
                        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                        if ((CCLogStream::shouldLog() & 1) == 0) {
                          goto LABEL_97;
                        }
                        int v41 = 42421;
LABEL_99:
                        uint64_t v47 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                        CCLogStream::logAlert(v47, "[dk] %s@%d:Fail to allocate numValue\n", "sendTxDCSlice1Ant0StatsCoreAnalytics", v41);
LABEL_97:
                        ((void (*)(const OSObject *))v6->release)(v6);
                        goto LABEL_27;
                      }
                      OSNumberPtr v32 = v31;
                      OSDictionary::setObject(v4, v6, v31);
                      ((void (*)(const OSObject *))v6->release)(v6);
                      ((void (*)(OSNumberPtr))v32->release)(v32);
                      OSStringPtr v33 = OSString::withCString("Slice1Ant0TxDC90To100");
                      if (v33)
                      {
                        __int16 v6 = v33;
                        OSNumberPtr v34 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[404].free, 0x40uLL);
                        if (v34)
                        {
                          OSNumberPtr v35 = v34;
                          OSDictionary::setObject(v4, v6, v34);
                          ((void (*)(const OSObject *))v6->release)(v6);
                          ((void (*)(OSNumberPtr))v35->release)(v35);
                          uint64_t v36 = IOService::CoreAnalyticsSendEvent(this, 0, v3, v4, 0);
                          if (v36)
                          {
                            uint64_t v37 = v36;
                            if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                            {
                              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                              if (CCLogStream::shouldLog())
                              {
                                int v43 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                CStringNoCopy = OSString::getCStringNoCopy(v3);
                                uint64_t v45 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v37);
                                CCLogStream::logEmergency(v43, "[dk] %s@%d:Failed to send CoreAnalytics for event %s : %s\n", "sendTxDCSlice1Ant0StatsCoreAnalytics", 42437, CStringNoCopy, v45);
                              }
                            }
                          }
                          goto LABEL_27;
                        }
                        if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                          goto LABEL_97;
                        }
                        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                        if ((CCLogStream::shouldLog() & 1) == 0) {
                          goto LABEL_97;
                        }
                        int v41 = 42429;
                        goto LABEL_99;
                      }
                      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                      {
                        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                        if (CCLogStream::shouldLog())
                        {
LABEL_94:
                          uint64_t v42 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                          CCLogStream::logAlert(v42, "[dk] %s@%d:Fail to allocate keyString\n");
                        }
                      }
                    }
                    else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                    {
                      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                      if (CCLogStream::shouldLog()) {
                        goto LABEL_94;
                      }
                    }
                  }
                  else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                  {
                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    if (CCLogStream::shouldLog()) {
                      goto LABEL_94;
                    }
                  }
                }
                else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                {
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  if (CCLogStream::shouldLog()) {
                    goto LABEL_94;
                  }
                }
              }
              else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
              {
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if (CCLogStream::shouldLog()) {
                  goto LABEL_94;
                }
              }
            }
            else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog()) {
                goto LABEL_94;
              }
            }
          }
          else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog()) {
              goto LABEL_94;
            }
          }
        }
        else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
        {
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (CCLogStream::shouldLog()) {
            goto LABEL_94;
          }
        }
      }
      else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog()) {
          goto LABEL_94;
        }
      }
    }
    else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog()) {
        goto LABEL_94;
      }
    }
LABEL_27:
    uint64_t result = ((uint64_t (*)(OSString *))v3->release)(v3);
    if (v4)
    {
      release = v4->release;
      return ((uint64_t (*)(OSDictionary *))release)(v4);
    }
    return result;
  }
  uint64_t result = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
  if (result)
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      unsigned __int8 v46 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      return CCLogStream::logAlert(v46, "[dk] %s@%d:Fail to allocate eventName\n", "sendTxDCSlice1Ant0StatsCoreAnalytics", 42350);
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::sendDynSARPerSliceStatsCoreAnalytics(IOService *this, unsigned int a2)
{
  if (a2) {
    uint64_t v4 = "com.apple.wifi.dsaSimpleStats.slice1";
  }
  else {
    uint64_t v4 = "com.apple.wifi.dsaSimpleStats.slice0";
  }
  OSStringPtr v5 = OSString::withCString(v4);
  if (v5)
  {
    __int16 v6 = v5;
    OSNumberPtr v7 = OSDictionary::withCapacity(8u);
    if (!v7)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v38 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v38, "[dk] %s@%d:Fail to allocate eventPayload\n");
        }
      }
      goto LABEL_26;
    }
    OSStringPtr v8 = OSString::withCString("NoOptDuration");
    if (v8)
    {
      OSStringPtr v9 = v8;
      uint64_t v10 = a2;
      OSNumberPtr v11 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[4 * (unint64_t)a2 + 281].free, 0x40uLL);
      if (!v11)
      {
        if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
          goto LABEL_84;
        }
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if ((CCLogStream::shouldLog() & 1) == 0) {
          goto LABEL_84;
        }
        int v39 = 42469;
        goto LABEL_86;
      }
      OSNumberPtr v12 = v11;
      OSDictionary::setObject(v7, v9, v11);
      ((void (*)(const OSObject *))v9->release)(v9);
      ((void (*)(OSNumberPtr))v12->release)(v12);
      OSStringPtr v13 = OSString::withCString("PwrOptDuration");
      if (v13)
      {
        OSStringPtr v9 = v13;
        OSNumberPtr v14 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[4 * v10 + 282].init, 0x40uLL);
        if (!v14)
        {
          if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
            goto LABEL_84;
          }
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if ((CCLogStream::shouldLog() & 1) == 0) {
            goto LABEL_84;
          }
          int v39 = 42477;
          goto LABEL_86;
        }
        OSNumberPtr v15 = v14;
        OSDictionary::setObject(v7, v9, v14);
        ((void (*)(const OSObject *))v9->release)(v9);
        ((void (*)(OSNumberPtr))v15->release)(v15);
        OSStringPtr v16 = OSString::withCString("FailSafeDuration");
        if (v16)
        {
          OSStringPtr v9 = v16;
          OSNumberPtr v17 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[4 * v10 + 282].free, 0x40uLL);
          if (!v17)
          {
            if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
              goto LABEL_84;
            }
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if ((CCLogStream::shouldLog() & 1) == 0) {
              goto LABEL_84;
            }
            int v39 = 42485;
            goto LABEL_86;
          }
          OSNumberPtr v18 = v17;
          OSDictionary::setObject(v7, v9, v17);
          ((void (*)(const OSObject *))v9->release)(v9);
          ((void (*)(OSNumberPtr))v18->release)(v18);
          OSStringPtr v19 = OSString::withCString("NoMuteDuration");
          if (v19)
          {
            OSStringPtr v9 = v19;
            OSNumberPtr v20 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[4 * v10 + 283].init, 0x40uLL);
            if (!v20)
            {
              if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                goto LABEL_84;
              }
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if ((CCLogStream::shouldLog() & 1) == 0) {
                goto LABEL_84;
              }
              int v39 = 42493;
              goto LABEL_86;
            }
            OSNumberPtr v21 = v20;
            OSDictionary::setObject(v7, v9, v20);
            ((void (*)(const OSObject *))v9->release)(v9);
            ((void (*)(OSNumberPtr))v21->release)(v21);
            OSStringPtr v22 = OSString::withCString("HybridDuration");
            if (v22)
            {
              OSStringPtr v9 = v22;
              OSNumberPtr v23 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[4 * v10 + 283].free, 0x40uLL);
              if (!v23)
              {
                if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                  goto LABEL_84;
                }
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if ((CCLogStream::shouldLog() & 1) == 0) {
                  goto LABEL_84;
                }
                int v39 = 42501;
                goto LABEL_86;
              }
              OSNumberPtr v24 = v23;
              OSDictionary::setObject(v7, v9, v23);
              ((void (*)(const OSObject *))v9->release)(v9);
              ((void (*)(OSNumberPtr))v24->release)(v24);
              OSStringPtr v25 = OSString::withCString("TxDCThrottleDuration");
              if (v25)
              {
                OSStringPtr v9 = v25;
                OSNumberPtr v26 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[4 * v10 + 284].init, 0x40uLL);
                if (!v26)
                {
                  if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                    goto LABEL_84;
                  }
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  if ((CCLogStream::shouldLog() & 1) == 0) {
                    goto LABEL_84;
                  }
                  int v39 = 42509;
                  goto LABEL_86;
                }
                OSNumberPtr v27 = v26;
                OSDictionary::setObject(v7, v9, v26);
                ((void (*)(const OSObject *))v9->release)(v9);
                ((void (*)(OSNumberPtr))v27->release)(v27);
                OSStringPtr v28 = OSString::withCString("PwrOptTxDCThrottleDuration");
                if (v28)
                {
                  OSStringPtr v9 = v28;
                  OSNumberPtr v29 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[4 * v10 + 284].free, 0x40uLL);
                  if (!v29)
                  {
                    if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                      goto LABEL_84;
                    }
                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    if ((CCLogStream::shouldLog() & 1) == 0) {
                      goto LABEL_84;
                    }
                    int v39 = 42517;
LABEL_86:
                    uint64_t v45 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    CCLogStream::logAlert(v45, "[dk] %s@%d:Fail to allocate numValue\n", "sendDynSARPerSliceStatsCoreAnalytics", v39);
LABEL_84:
                    ((void (*)(const OSObject *))v9->release)(v9);
                    goto LABEL_26;
                  }
                  OSNumberPtr v30 = v29;
                  OSDictionary::setObject(v7, v9, v29);
                  ((void (*)(const OSObject *))v9->release)(v9);
                  ((void (*)(OSNumberPtr))v30->release)(v30);
                  OSStringPtr v31 = OSString::withCString("UpdatesPerSession");
                  if (v31)
                  {
                    OSStringPtr v9 = v31;
                    OSNumberPtr v32 = OSNumber::withNumber(LODWORD(this[1].OSObject::OSObjectInterface::__vftable[4 * v10 + 285].init), 0x20uLL);
                    if (v32)
                    {
                      OSNumberPtr v33 = v32;
                      OSDictionary::setObject(v7, v9, v32);
                      ((void (*)(const OSObject *))v9->release)(v9);
                      ((void (*)(OSNumberPtr))v33->release)(v33);
                      uint64_t v34 = IOService::CoreAnalyticsSendEvent(this, 0, v6, v7, 0);
                      if (v34)
                      {
                        uint64_t v35 = v34;
                        if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                        {
                          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                          if (CCLogStream::shouldLog())
                          {
                            int v41 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                            CStringNoCopy = OSString::getCStringNoCopy(v6);
                            int v43 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v35);
                            CCLogStream::logEmergency(v41, "[dk] %s@%d:Failed to send CoreAnalytics for event %s : %s\n", "sendDynSARPerSliceStatsCoreAnalytics", 42533, CStringNoCopy, v43);
                          }
                        }
                      }
                      goto LABEL_26;
                    }
                    if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                      goto LABEL_84;
                    }
                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    if ((CCLogStream::shouldLog() & 1) == 0) {
                      goto LABEL_84;
                    }
                    int v39 = 42525;
                    goto LABEL_86;
                  }
                  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                  {
                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    if (CCLogStream::shouldLog())
                    {
LABEL_81:
                      uint64_t v40 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                      CCLogStream::logAlert(v40, "[dk] %s@%d:Fail to allocate keyString\n");
                    }
                  }
                }
                else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                {
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  if (CCLogStream::shouldLog()) {
                    goto LABEL_81;
                  }
                }
              }
              else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
              {
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if (CCLogStream::shouldLog()) {
                  goto LABEL_81;
                }
              }
            }
            else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog()) {
                goto LABEL_81;
              }
            }
          }
          else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog()) {
              goto LABEL_81;
            }
          }
        }
        else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
        {
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (CCLogStream::shouldLog()) {
            goto LABEL_81;
          }
        }
      }
      else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog()) {
          goto LABEL_81;
        }
      }
    }
    else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog()) {
        goto LABEL_81;
      }
    }
LABEL_26:
    uint64_t result = ((uint64_t (*)(OSString *))v6->release)(v6);
    if (v7)
    {
      release = v7->release;
      return ((uint64_t (*)(OSDictionary *))release)(v7);
    }
    return result;
  }
  uint64_t result = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
  if (result)
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v44 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      return CCLogStream::logAlert(v44, "[dk] %s@%d:Fail to allocate eventName\n", "sendDynSARPerSliceStatsCoreAnalytics", 42462);
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::sendHostScanStatsCoreAnalytics(AppleBCMWLANCore *this)
{
  OSStringPtr v2 = OSString::withCString("com.apple.wifi.hostScanStats");
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = OSDictionary::withCapacity(0x19u);
    if (v4)
    {
      AppleBCMWLANCore::prepareScanMotionStatsForCA(this, v4);
      AppleBCMWLANCore::prepareScanRoamStatsForCA(this, v4);
      AppleBCMWLANCore::prepareScanRejectStatsForCA(this, v4);
      uint64_t v5 = IOService::CoreAnalyticsSendEvent((IOService *)this, 0, v3, v4, 0);
      if (v5)
      {
        uint64_t v6 = v5;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CStringNoCopy = OSString::getCStringNoCopy(v3);
            OSNumberPtr v12 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
            CCLogStream::logEmergency(v10, "[dk] %s@%d:Failed to send CoreAnalytics for event %s : %s\n", "sendHostScanStatsCoreAnalytics", 42736, CStringNoCopy, v12);
          }
        }
      }
    }
    else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        OSStringPtr v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v9, "[dk] %s@%d:Scan stats are empty, won't send to CoreAnalytics\n", "sendHostScanStatsCoreAnalytics", 42726);
      }
    }
    uint64_t result = ((uint64_t (*)(OSString *))v3->release)(v3);
    if (v4)
    {
      release = v4->release;
      return ((uint64_t (*)(OSDictionary *))release)(v4);
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        OSStringPtr v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        return CCLogStream::logAlert(v13, "[dk] %s@%d:Fail to allocate eventName\n", "sendHostScanStatsCoreAnalytics", 42723);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::prepareScanMotionStatsForCA(AppleBCMWLANCore *this, OSDictionary *a2)
{
  if (*((void *)this + 9))
  {
    mach_continuous_time();
    absolutetime_to_nanoseconds();
    if (a2)
    {
      OSStringPtr v4 = OSString::withCString("SessionDur");
      if (v4)
      {
        uint64_t v5 = v4;
        OSNumberPtr v6 = OSNumber::withNumber(-*(void *)(*((void *)this + 9) + 18960), 0x40uLL);
        OSNumberPtr v52 = v6;
        __int16 v53 = v5;
        if (v6)
        {
          OSDictionary::setObject(a2, v5, v6);
          OSStringPtr v7 = OSString::withCString("NumNormalPrioMov");
          if (v7)
          {
            OSStringPtr v8 = v7;
            OSNumberPtr v9 = OSNumber::withNumber(*(unsigned int *)(*((void *)this + 9) + 18992), 0x20uLL);
            uint64_t v51 = v8;
            if (v9)
            {
              OSNumberPtr v50 = v9;
              OSDictionary::setObject(a2, v8, v9);
              OSStringPtr v10 = OSString::withCString("NumNormalPrioStat");
              if (v10)
              {
                OSNumberPtr v11 = v10;
                OSNumberPtr v12 = OSNumber::withNumber(*(unsigned int *)(*((void *)this + 9) + 18996), 0x20uLL);
                uint64_t v49 = v11;
                if (v12)
                {
                  OSNumberPtr v13 = v12;
                  OSDictionary::setObject(a2, v11, v12);
                  OSStringPtr v14 = OSString::withCString("NumLowPrioMov");
                  if (v14)
                  {
                    OSNumberPtr v15 = v14;
                    OSNumberPtr v16 = OSNumber::withNumber(*(unsigned int *)(*((void *)this + 9) + 19000), 0x20uLL);
                    uint64_t v48 = (uint64_t)v15;
                    if (v16)
                    {
                      OSNumberPtr v17 = v16;
                      OSDictionary::setObject(a2, v15, v16);
                      OSStringPtr v18 = OSString::withCString("NumLowPrioStat");
                      if (v18)
                      {
                        OSStringPtr v19 = v18;
                        OSNumberPtr v20 = OSNumber::withNumber(*(unsigned int *)(*((void *)this + 9) + 19004), 0x20uLL);
                        if (v20)
                        {
                          OSNumberPtr v21 = v20;
                          OSDictionary::setObject(a2, v19, v20);
                          OSStringPtr v22 = OSString::withCString("NumHostScanReqMov");
                          if (v22)
                          {
                            OSNumberPtr v23 = v22;
                            OSNumberPtr v24 = OSNumber::withNumber(*(unsigned int *)(*((void *)this + 9) + 19008), 0x20uLL);
                            if (v24)
                            {
                              OSNumberPtr v25 = v24;
                              OSDictionary::setObject(a2, v23, v24);
                              OSStringPtr v26 = OSString::withCString("NumHostScanRejectedMov");
                              if (v26)
                              {
                                OSNumberPtr v27 = v26;
                                OSNumberPtr v28 = OSNumber::withNumber(*(unsigned int *)(*((void *)this + 9) + 19012), 0x20uLL);
                                if (v28)
                                {
                                  OSNumberPtr v29 = v28;
                                  OSDictionary::setObject(a2, v27, v28);
                                  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                                  {
                                    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                                    if (CCLogStream::shouldLog())
                                    {
                                      uint64_t v37 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                                      CCLogStream::logInfo(v37, "[dk] %s@%d:Prepared Scan Motion Stats event to CA\n", "prepareScanMotionStatsForCA", 42801);
                                    }
                                  }
                                  goto LABEL_20;
                                }
                                if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                                {
                                  (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                                  if (CCLogStream::shouldLog())
                                  {
                                    uint64_t v36 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                                    CCLogStream::logAlert(v36, "[dk] %s@%d:Fail to allocate valueHostRejWhileMov\n", "prepareScanMotionStatsForCA", 42798);
                                  }
                                }
                              }
                              else
                              {
                                if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                                {
                                  (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                                  if (CCLogStream::shouldLog())
                                  {
                                    uint64_t v47 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                                    CCLogStream::logAlert(v47, "[dk] %s@%d:Fail to allocate keyHostRejWhileMov\n", "prepareScanMotionStatsForCA", 42796);
                                  }
                                }
                                OSNumberPtr v27 = 0;
                              }
LABEL_92:
                              OSNumberPtr v29 = 0;
LABEL_20:
                              ((void (*)(const OSObject *))v53->release)(v53);
                              if (v52) {
                                ((void (*)(OSNumberPtr))v52->release)(v52);
                              }
                              if (v51) {
                                ((void (*)(const OSObject *))v51->release)(v51);
                              }
                              if (v50) {
                                ((void (*)(OSNumberPtr))v50->release)(v50);
                              }
                              if (v49) {
                                ((void (*)(const OSObject *))v49->release)(v49);
                              }
                              if (v13) {
                                ((void (*)(OSNumberPtr))v13->release)(v13);
                              }
                              uint64_t result = v48;
                              if (v48) {
                                uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 16))(v48);
                              }
                              if (v17) {
                                uint64_t result = ((uint64_t (*)(OSNumberPtr))v17->release)(v17);
                              }
                              if (v19) {
                                uint64_t result = ((uint64_t (*)(const OSObject *))v19->release)(v19);
                              }
                              if (v21) {
                                uint64_t result = ((uint64_t (*)(OSNumberPtr))v21->release)(v21);
                              }
                              if (v23) {
                                uint64_t result = ((uint64_t (*)(const OSObject *))v23->release)(v23);
                              }
                              if (v25) {
                                uint64_t result = ((uint64_t (*)(OSNumberPtr))v25->release)(v25);
                              }
                              if (v27) {
                                uint64_t result = ((uint64_t (*)(const OSObject *))v27->release)(v27);
                              }
                              if (v29) {
                                return ((uint64_t (*)(OSNumberPtr))v29->release)(v29);
                              }
                              return result;
                            }
                            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                            {
                              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                              if (CCLogStream::shouldLog())
                              {
                                unsigned __int8 v46 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                                CCLogStream::logAlert(v46, "[dk] %s@%d:Fail to allocate valueHostWhileMov\n", "prepareScanMotionStatsForCA", 42792);
                              }
                            }
                          }
                          else
                          {
                            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                            {
                              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                              if (CCLogStream::shouldLog())
                              {
                                uint64_t v45 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                                CCLogStream::logAlert(v45, "[dk] %s@%d:Fail to allocate keyHostWhileMov\n", "prepareScanMotionStatsForCA", 42790);
                              }
                            }
                            OSNumberPtr v23 = 0;
                          }
                          OSNumberPtr v27 = 0;
LABEL_91:
                          OSNumberPtr v25 = 0;
                          goto LABEL_92;
                        }
                        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                        {
                          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                          if (CCLogStream::shouldLog())
                          {
                            uint64_t v35 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                            CCLogStream::logAlert(v35, "[dk] %s@%d:Fail to allocate valueLowPrioWhileStat\n", "prepareScanMotionStatsForCA", 42786);
                          }
                        }
                        goto LABEL_89;
                      }
                      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                      {
                        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                        if (CCLogStream::shouldLog())
                        {
                          uint64_t v44 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                          CCLogStream::logAlert(v44, "[dk] %s@%d:Fail to allocate keyLowPrioWhileStat\n", "prepareScanMotionStatsForCA", 42784);
                        }
                      }
LABEL_88:
                      OSStringPtr v19 = 0;
LABEL_89:
                      OSNumberPtr v23 = 0;
                      OSNumberPtr v27 = 0;
                      goto LABEL_90;
                    }
                    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                    {
                      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                      if (CCLogStream::shouldLog())
                      {
                        int v43 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                        CCLogStream::logAlert(v43, "[dk] %s@%d:Fail to allocate valueLowPrioWhileMov\n", "prepareScanMotionStatsForCA", 42780);
                      }
                    }
                  }
                  else
                  {
                    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                    {
                      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                      if (CCLogStream::shouldLog())
                      {
                        uint64_t v42 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                        CCLogStream::logAlert(v42, "[dk] %s@%d:Fail to allocate keyLowPrioWhileMov\n", "prepareScanMotionStatsForCA", 42778);
                      }
                    }
                    uint64_t v48 = 0;
                  }
                  OSNumberPtr v17 = 0;
                  goto LABEL_88;
                }
                if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                {
                  (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                  if (CCLogStream::shouldLog())
                  {
                    int v41 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                    CCLogStream::logAlert(v41, "[dk] %s@%d:Fail to allocate valueNormPrioWhileStat\n", "prepareScanMotionStatsForCA", 42774);
                  }
                }
                uint64_t v48 = 0;
                OSNumberPtr v17 = 0;
LABEL_72:
                OSStringPtr v19 = 0;
                OSNumberPtr v23 = 0;
                OSNumberPtr v27 = 0;
                OSNumberPtr v13 = 0;
LABEL_90:
                OSNumberPtr v21 = 0;
                goto LABEL_91;
              }
              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
              {
                (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v40 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                  CCLogStream::logAlert(v40, "[dk] %s@%d:Fail to allocate keyNormPrioWhileStat\n", "prepareScanMotionStatsForCA", 42772);
                }
              }
              uint64_t v48 = 0;
LABEL_71:
              OSNumberPtr v17 = 0;
              uint64_t v49 = 0;
              goto LABEL_72;
            }
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (CCLogStream::shouldLog())
              {
                int v39 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                CCLogStream::logAlert(v39, "[dk] %s@%d:Fail to allocate valueNormPrioWhileMov\n", "prepareScanMotionStatsForCA", 42768);
              }
            }
LABEL_66:
            uint64_t v48 = 0;
            OSNumberPtr v50 = 0;
            goto LABEL_71;
          }
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v38 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v38, "[dk] %s@%d:Fail to allocate keyNormPrioWhileMov\n");
            }
          }
        }
        else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v34 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v34, "[dk] %s@%d:Fail to allocate valueSessionDur\n");
          }
        }
        uint64_t v51 = 0;
        goto LABEL_66;
      }
      uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (result)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          OSNumberPtr v33 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          return CCLogStream::logAlert(v33, "[dk] %s@%d:Fail to allocate keySessionDur\n");
        }
      }
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (result)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          OSNumberPtr v32 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          return CCLogStream::logAlert(v32, "[dk] %s@%d:Fail to allocate eventPayload\n");
        }
      }
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *, OSDictionary *))(*(void *)this + 1848))(this, a2);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        OSStringPtr v31 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        return CCLogStream::logCrit(v31, "[dk] %s@%d:Failed to allocate AppleBCMWLANRoamManager_IVars\n", "prepareScanMotionStatsForCA", 42753);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::prepareScanRoamStatsForCA(AppleBCMWLANCore *this, OSDictionary *a2)
{
  if (*((void *)this + 9))
  {
    OSStringPtr v4 = OSString::withCString("RoamWithinX");
    if (v4)
    {
      uint64_t v5 = v4;
      OSNumberPtr v6 = OSNumber::withNumber(*(unsigned int *)(*((void *)this + 9) + 18912), 0x20uLL);
      OSNumberPtr v73 = v6;
      __int16 v74 = v5;
      if (v6)
      {
        OSDictionary::setObject(a2, v5, v6);
        OSStringPtr v7 = OSString::withCString("LocScanWithinRoam");
        if (v7)
        {
          OSStringPtr v8 = v7;
          OSNumberPtr v9 = OSNumber::withNumber(*(unsigned int *)(*((void *)this + 9) + 18916), 0x20uLL);
          __int16 v72 = v8;
          if (v9)
          {
            OSNumberPtr v71 = v9;
            OSDictionary::setObject(a2, v8, v9);
            OSStringPtr v10 = OSString::withCString("NumHostScanReq");
            if (v10)
            {
              OSNumberPtr v11 = v10;
              OSNumberPtr v12 = OSNumber::withNumber(*(unsigned int *)(*((void *)this + 9) + 18920), 0x20uLL);
              unint64_t v70 = v11;
              if (v12)
              {
                OSNumberPtr v68 = v12;
                OSDictionary::setObject(a2, v11, v12);
                OSStringPtr v13 = OSString::withCString("NumHostScanRejected");
                OSNumberPtr v61 = OSNumber::withNumber(*(unsigned int *)(*((void *)this + 9) + 18924), 0x20uLL);
                OSStringPtr v62 = v13;
                OSDictionary::setObject(a2, v13, v61);
                OSStringPtr v14 = OSString::withCString("NumHostScanComp");
                OSNumberPtr v15 = OSNumber::withNumber(*(unsigned int *)(*((void *)this + 9) + 18928), 0x20uLL);
                OSStringPtr v69 = v14;
                if (v15)
                {
                  OSNumberPtr v67 = v15;
                  OSDictionary::setObject(a2, v14, v15);
                  OSStringPtr v16 = OSString::withCString("NumHostScanLowPrio");
                  if (v16)
                  {
                    OSNumberPtr v17 = v16;
                    OSNumberPtr v18 = OSNumber::withNumber(*(unsigned int *)(*((void *)this + 9) + 18932), 0x20uLL);
                    uint64_t v66 = v17;
                    if (v18)
                    {
                      OSNumberPtr v65 = v18;
                      OSDictionary::setObject(a2, v17, v18);
                      OSStringPtr v19 = OSString::withCString("NumHostScanLowLatency");
                      if (v19)
                      {
                        OSNumberPtr v20 = v19;
                        OSNumberPtr v21 = OSNumber::withNumber(*(unsigned int *)(*((void *)this + 9) + 18936), 0x20uLL);
                        __int16 v64 = v20;
                        if (v21)
                        {
                          uint64_t v63 = (uint64_t)v21;
                          OSDictionary::setObject(a2, v20, v21);
                          OSStringPtr v22 = OSString::withCString("NumHostScanLowPrioOR");
                          if (v22)
                          {
                            OSNumberPtr v23 = v22;
                            OSNumberPtr v24 = OSNumber::withNumber(*(unsigned int *)(*((void *)this + 9) + 18940), 0x20uLL);
                            if (v24)
                            {
                              OSNumberPtr v25 = v24;
                              OSDictionary::setObject(a2, v23, v24);
                              OSStringPtr v26 = OSString::withCString("CntB2BHostScan");
                              if (v26)
                              {
                                OSNumberPtr v27 = v26;
                                OSNumberPtr v28 = OSNumber::withNumber(*(unsigned int *)(*((void *)this + 9) + 18944), 0x20uLL);
                                if (v28)
                                {
                                  OSNumberPtr v29 = v28;
                                  OSDictionary::setObject(a2, v27, v28);
                                  OSStringPtr v30 = OSString::withCString("CntB2BHostScanLow");
                                  if (v30)
                                  {
                                    OSStringPtr v31 = v30;
                                    OSNumberPtr v32 = OSNumber::withNumber(*(unsigned int *)(*((void *)this + 9) + 18952), 0x20uLL);
                                    if (v32)
                                    {
                                      OSNumberPtr v33 = v32;
                                      OSDictionary::setObject(a2, v31, v32);
                                      OSStringPtr v34 = OSString::withCString("CntB2BHostScanHigh");
                                      OSNumberPtr v35 = OSNumber::withNumber(*(unsigned int *)(*((void *)this + 9) + 18948), 0x20uLL);
                                      if (v35)
                                      {
                                        OSNumberPtr v36 = v35;
                                        OSDictionary::setObject(a2, v34, v35);
                                        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                                        {
                                          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                                          OSStringPtr v37 = v62;
                                          if (CCLogStream::shouldLog())
                                          {
                                            uint64_t v38 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                                            CCLogStream::logInfo(v38, "[dk] %s@%d:Prepared Scan/Roam event to CA\n", "prepareScanRoamStatsForCA", 42898);
                                          }
                                          goto LABEL_109;
                                        }
                                        goto LABEL_108;
                                      }
                                      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                                      {
                                        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                                        OSStringPtr v37 = v62;
                                        if (CCLogStream::shouldLog())
                                        {
                                          uint64_t v49 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                                          CCLogStream::logAlert(v49, "[dk] %s@%d:Fail to allocate valueNumBkToBkScanReqHigh\n", "prepareScanRoamStatsForCA", 42895);
                                        }
                                        goto LABEL_70;
                                      }
LABEL_107:
                                      OSNumberPtr v36 = 0;
LABEL_108:
                                      OSStringPtr v37 = v62;
                                      goto LABEL_109;
                                    }
                                    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                                    {
                                      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                                      OSStringPtr v37 = v62;
                                      if (CCLogStream::shouldLog())
                                      {
                                        long long v60 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                                        CCLogStream::logAlert(v60, "[dk] %s@%d:Fail to allocate valueNumBkToBkScanReqLow\n", "prepareScanRoamStatsForCA", 42889);
                                      }
LABEL_94:
                                      OSStringPtr v34 = 0;
                                      goto LABEL_69;
                                    }
                                  }
                                  else
                                  {
                                    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                                    {
                                      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                                      OSStringPtr v37 = v62;
                                      if (CCLogStream::shouldLog())
                                      {
                                        char v59 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                                        CCLogStream::logAlert(v59, "[dk] %s@%d:Fail to allocate keyNumBkToBkScanReqLow\n", "prepareScanRoamStatsForCA", 42887);
                                      }
                                      OSStringPtr v31 = 0;
                                      goto LABEL_94;
                                    }
                                    OSStringPtr v31 = 0;
                                  }
                                  OSStringPtr v34 = 0;
LABEL_106:
                                  OSNumberPtr v33 = 0;
                                  goto LABEL_107;
                                }
                                if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                                {
                                  (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                                  OSStringPtr v37 = v62;
                                  if (CCLogStream::shouldLog())
                                  {
                                    uint64_t v48 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                                    CCLogStream::logAlert(v48, "[dk] %s@%d:Fail to allocate valueNumBkToBkScanReq\n", "prepareScanRoamStatsForCA", 42883);
                                  }
                                  goto LABEL_68;
                                }
LABEL_105:
                                OSStringPtr v31 = 0;
                                OSStringPtr v34 = 0;
                                OSNumberPtr v29 = 0;
                                goto LABEL_106;
                              }
                              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                              {
                                (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                                OSStringPtr v37 = v62;
                                if (CCLogStream::shouldLog())
                                {
                                  uint64_t v47 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                                  CCLogStream::logAlert(v47, "[dk] %s@%d:Fail to allocate keyNumBkToBkScanReq\n", "prepareScanRoamStatsForCA", 42881);
                                }
                                goto LABEL_67;
                              }
LABEL_104:
                              OSNumberPtr v27 = 0;
                              goto LABEL_105;
                            }
                            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                            {
                              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                              OSStringPtr v37 = v62;
                              if (CCLogStream::shouldLog())
                              {
                                unsigned __int8 v46 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                                CCLogStream::logAlert(v46, "[dk] %s@%d:Fail to allocate valueNumHostScanLowPrioOR\n", "prepareScanRoamStatsForCA", 42877);
                              }
                              goto LABEL_66;
                            }
                          }
                          else
                          {
                            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                            {
                              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                              OSStringPtr v37 = v13;
                              if (CCLogStream::shouldLog())
                              {
                                uint64_t v58 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                                CCLogStream::logAlert(v58, "[dk] %s@%d:Fail to allocate keyNumHostScanLowPrioOR\n", "prepareScanRoamStatsForCA", 42875);
                              }
                              OSNumberPtr v23 = 0;
                              goto LABEL_66;
                            }
                            OSNumberPtr v23 = 0;
                          }
LABEL_103:
                          OSNumberPtr v25 = 0;
                          goto LABEL_104;
                        }
                        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                        {
                          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                          OSStringPtr v37 = v13;
                          if (CCLogStream::shouldLog())
                          {
                            uint64_t v45 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                            CCLogStream::logAlert(v45, "[dk] %s@%d:Fail to allocate valueNumHostScanLowLat\n", "prepareScanRoamStatsForCA", 42871);
                          }
                          goto LABEL_65;
                        }
LABEL_102:
                        OSNumberPtr v23 = 0;
                        uint64_t v63 = 0;
                        goto LABEL_103;
                      }
                      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                      {
                        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                        OSStringPtr v37 = v13;
                        if (CCLogStream::shouldLog())
                        {
                          int v57 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                          CCLogStream::logAlert(v57, "[dk] %s@%d:Fail to allocate keyNumHostScanLowLat\n", "prepareScanRoamStatsForCA", 42869);
                        }
                        goto LABEL_64;
                      }
LABEL_101:
                      __int16 v64 = 0;
                      goto LABEL_102;
                    }
                    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                    {
                      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                      OSStringPtr v37 = v13;
                      if (CCLogStream::shouldLog())
                      {
                        int v56 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                        CCLogStream::logAlert(v56, "[dk] %s@%d:Fail to allocate valNumHostScanLowPrio\n", "prepareScanRoamStatsForCA", 42865);
                      }
LABEL_60:
                      OSNumberPtr v65 = 0;
LABEL_64:
                      __int16 v64 = 0;
LABEL_65:
                      OSNumberPtr v23 = 0;
                      uint64_t v63 = 0;
LABEL_66:
                      OSNumberPtr v25 = 0;
LABEL_67:
                      OSNumberPtr v27 = 0;
LABEL_68:
                      OSStringPtr v31 = 0;
                      OSStringPtr v34 = 0;
                      OSNumberPtr v29 = 0;
LABEL_69:
                      OSNumberPtr v33 = 0;
LABEL_70:
                      OSNumberPtr v36 = 0;
LABEL_109:
                      OSNumberPtr v43 = v61;
                      goto LABEL_110;
                    }
                  }
                  else
                  {
                    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                    {
                      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                      OSStringPtr v37 = v13;
                      if (CCLogStream::shouldLog())
                      {
                        uint64_t v55 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                        CCLogStream::logAlert(v55, "[dk] %s@%d:Fail to allocate keyNumHostScanLowPrio\n", "prepareScanRoamStatsForCA", 42863);
                      }
                      uint64_t v66 = 0;
                      goto LABEL_60;
                    }
                    uint64_t v66 = 0;
                  }
                }
                else
                {
                  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                  {
                    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                    OSStringPtr v37 = v13;
                    if (CCLogStream::shouldLog())
                    {
                      char v54 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                      CCLogStream::logAlert(v54, "[dk] %s@%d:Fail to allocate valueNumHostScanComp\n", "prepareScanRoamStatsForCA", 42859);
                    }
                    uint64_t v66 = 0;
                    OSNumberPtr v67 = 0;
                    goto LABEL_60;
                  }
                  uint64_t v66 = 0;
                  OSNumberPtr v67 = 0;
                }
                OSNumberPtr v65 = 0;
                goto LABEL_101;
              }
              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
              {
                (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                if (CCLogStream::shouldLog())
                {
                  __int16 v53 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                  CCLogStream::logAlert(v53, "[dk] %s@%d:Fail to allocate valueNumHostScanReq\n", "prepareScanRoamStatsForCA", 42847);
                }
              }
              OSStringPtr v37 = 0;
              OSStringPtr v69 = 0;
LABEL_41:
              uint64_t v66 = 0;
              OSNumberPtr v67 = 0;
              OSNumberPtr v43 = 0;
              OSNumberPtr v65 = 0;
              uint64_t v63 = 0;
              __int16 v64 = 0;
              OSNumberPtr v23 = 0;
              OSNumberPtr v68 = 0;
              OSNumberPtr v25 = 0;
              OSNumberPtr v27 = 0;
              OSStringPtr v31 = 0;
              OSStringPtr v34 = 0;
              OSNumberPtr v29 = 0;
              OSNumberPtr v33 = 0;
              OSNumberPtr v36 = 0;
LABEL_110:
              ((void (*)(const OSObject *))v74->release)(v74);
              if (v73) {
                ((void (*)(OSNumberPtr))v73->release)(v73);
              }
              if (v72) {
                ((void (*)(const OSObject *))v72->release)(v72);
              }
              if (v71) {
                ((void (*)(OSNumberPtr))v71->release)(v71);
              }
              if (v70) {
                ((void (*)(const OSObject *))v70->release)(v70);
              }
              if (v68) {
                ((void (*)(OSNumberPtr))v68->release)(v68);
              }
              if (v37) {
                ((void (*)(OSStringPtr))v37->release)(v37);
              }
              if (v43) {
                ((void (*)(OSNumberPtr))v43->release)(v43);
              }
              if (v69) {
                ((void (*)(OSStringPtr))v69->release)(v69);
              }
              if (v67) {
                ((void (*)(OSNumberPtr))v67->release)(v67);
              }
              if (v66) {
                ((void (*)(const OSObject *))v66->release)(v66);
              }
              if (v65) {
                ((void (*)(OSNumberPtr))v65->release)(v65);
              }
              if (v64) {
                ((void (*)(const OSObject *))v64->release)(v64);
              }
              uint64_t result = v63;
              if (v63) {
                uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v63 + 16))(v63);
              }
              if (v23) {
                uint64_t result = ((uint64_t (*)(const OSObject *))v23->release)(v23);
              }
              if (v25) {
                uint64_t result = ((uint64_t (*)(OSNumberPtr))v25->release)(v25);
              }
              if (v27) {
                uint64_t result = ((uint64_t (*)(const OSObject *))v27->release)(v27);
              }
              if (v29) {
                uint64_t result = ((uint64_t (*)(OSNumberPtr))v29->release)(v29);
              }
              if (v31) {
                uint64_t result = ((uint64_t (*)(const OSObject *))v31->release)(v31);
              }
              if (v33) {
                uint64_t result = ((uint64_t (*)(OSNumberPtr))v33->release)(v33);
              }
              if (v34) {
                uint64_t result = ((uint64_t (*)(OSStringPtr))v34->release)(v34);
              }
              if (v36)
              {
                release = v36->release;
                return ((uint64_t (*)(OSNumberPtr))release)(v36);
              }
              return result;
            }
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (CCLogStream::shouldLog())
              {
                uint64_t v44 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                CCLogStream::logAlert(v44, "[dk] %s@%d:Fail to allocate keyNumHostScanReq\n", "prepareScanRoamStatsForCA", 42845);
              }
            }
LABEL_40:
            OSStringPtr v37 = 0;
            OSStringPtr v69 = 0;
            unint64_t v70 = 0;
            goto LABEL_41;
          }
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              OSNumberPtr v52 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v52, "[dk] %s@%d:Fail to allocate valueLocWithinXSecRoam\n", "prepareScanRoamStatsForCA", 42841);
            }
          }
LABEL_39:
          OSNumberPtr v71 = 0;
          goto LABEL_40;
        }
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v51 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v51, "[dk] %s@%d:Fail to allocate keyLocWithinXSecRoam\n");
          }
        }
      }
      else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v42 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v42, "[dk] %s@%d:Fail to allocate valueRoamWithinXsec\n");
        }
      }
      __int16 v72 = 0;
      goto LABEL_39;
    }
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v41 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        return CCLogStream::logAlert(v41, "[dk] %s@%d:Fail to allocate keyRoamWithinXsec\n", "prepareScanRoamStatsForCA", 42833);
      }
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *, OSDictionary *))(*(void *)this + 1848))(this, a2);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v40 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        return CCLogStream::logCrit(v40, "[dk] %s@%d:Failed to allocate AppleBCMWLANRoamManager_IVars\n", "prepareScanRoamStatsForCA", 42831);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::prepareScanRejectStatsForCA(AppleBCMWLANCore *this, OSDictionary *a2)
{
  if (*((void *)this + 9))
  {
    OSStringPtr v4 = OSString::withCString("NumRejLowPrio");
    if (v4)
    {
      uint64_t v5 = v4;
      OSNumberPtr v6 = OSNumber::withNumber(*(unsigned int *)(*((void *)this + 9) + 35784), 0x20uLL);
      OSNumberPtr v51 = v6;
      OSNumberPtr v52 = v5;
      if (v6)
      {
        OSDictionary::setObject(a2, v5, v6);
        OSStringPtr v7 = OSString::withCString("NumRejJoin");
        if (v7)
        {
          OSStringPtr v8 = v7;
          OSNumberPtr v9 = OSNumber::withNumber(*(unsigned int *)(*((void *)this + 9) + 35788), 0x20uLL);
          OSNumberPtr v50 = v8;
          if (v9)
          {
            OSNumberPtr v49 = v9;
            OSDictionary::setObject(a2, v8, v9);
            OSStringPtr v10 = OSString::withCString("NumRejBusy");
            if (v10)
            {
              OSNumberPtr v11 = v10;
              OSNumberPtr v12 = OSNumber::withNumber(*(unsigned int *)(*((void *)this + 9) + 35792), 0x20uLL);
              uint64_t v48 = v11;
              if (v12)
              {
                uint64_t v47 = (uint64_t)v12;
                OSDictionary::setObject(a2, v11, v12);
                OSStringPtr v13 = OSString::withCString("NumRejIPRes");
                if (v13)
                {
                  OSStringPtr v14 = v13;
                  OSNumberPtr v15 = OSNumber::withNumber(*(unsigned int *)(*((void *)this + 9) + 35796), 0x20uLL);
                  if (v15)
                  {
                    OSNumberPtr v16 = v15;
                    OSDictionary::setObject(a2, v14, v15);
                    OSStringPtr v17 = OSString::withCString("NumRejRssi");
                    if (v17)
                    {
                      OSNumberPtr v18 = v17;
                      OSNumberPtr v19 = OSNumber::withNumber(*(unsigned int *)(*((void *)this + 9) + 35800), 0x20uLL);
                      if (v19)
                      {
                        OSNumberPtr v20 = v19;
                        OSDictionary::setObject(a2, v18, v19);
                        OSStringPtr v21 = OSString::withCString("NumRejLLS");
                        if (v21)
                        {
                          OSStringPtr v22 = v21;
                          OSNumberPtr v23 = OSNumber::withNumber(*(unsigned int *)(*((void *)this + 9) + 35804), 0x20uLL);
                          if (v23)
                          {
                            OSNumberPtr v24 = v23;
                            OSDictionary::setObject(a2, v22, v23);
                            OSStringPtr v25 = OSString::withCString("NumRejScanBlock");
                            if (v25)
                            {
                              OSStringPtr v26 = v25;
                              OSNumberPtr v27 = OSNumber::withNumber(*(unsigned int *)(*((void *)this + 9) + 35808), 0x20uLL);
                              if (v27)
                              {
                                OSNumberPtr v28 = v27;
                                OSDictionary::setObject(a2, v26, v27);
                                if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                                {
                                  (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                                  if (CCLogStream::shouldLog())
                                  {
                                    OSNumberPtr v33 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                                    CCLogStream::logInfo(v33, "[dk] %s@%d:Prepared Scan Reject Stats event to CA\n", "prepareScanRejectStatsForCA", 42974);
                                  }
                                }
                                goto LABEL_19;
                              }
                              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                              {
                                (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                                if (CCLogStream::shouldLog())
                                {
                                  unsigned __int8 v46 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                                  CCLogStream::logAlert(v46, "[dk] %s@%d:Fail to allocate valueRejBlocked\n", "prepareScanRejectStatsForCA", 42971);
                                }
                              }
                            }
                            else
                            {
                              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                              {
                                (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                                if (CCLogStream::shouldLog())
                                {
                                  uint64_t v45 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                                  CCLogStream::logAlert(v45, "[dk] %s@%d:Fail to allocate keyRejBlocked\n", "prepareScanRejectStatsForCA", 42969);
                                }
                              }
                              OSStringPtr v26 = 0;
                            }
                            OSNumberPtr v28 = 0;
LABEL_19:
                            ((void (*)(const OSObject *))v52->release)(v52);
                            if (v51) {
                              ((void (*)(OSNumberPtr))v51->release)(v51);
                            }
                            if (v50) {
                              ((void (*)(const OSObject *))v50->release)(v50);
                            }
                            if (v49) {
                              ((void (*)(OSNumberPtr))v49->release)(v49);
                            }
                            if (v48) {
                              ((void (*)(const OSObject *))v48->release)(v48);
                            }
                            uint64_t result = v47;
                            if (v47) {
                              uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v47 + 16))(v47);
                            }
                            if (v14) {
                              uint64_t result = ((uint64_t (*)(const OSObject *))v14->release)(v14);
                            }
                            if (v16) {
                              uint64_t result = ((uint64_t (*)(OSNumberPtr))v16->release)(v16);
                            }
                            if (v18) {
                              uint64_t result = ((uint64_t (*)(const OSObject *))v18->release)(v18);
                            }
                            if (v20) {
                              uint64_t result = ((uint64_t (*)(OSNumberPtr))v20->release)(v20);
                            }
                            if (v22) {
                              uint64_t result = ((uint64_t (*)(const OSObject *))v22->release)(v22);
                            }
                            if (v24) {
                              uint64_t result = ((uint64_t (*)(OSNumberPtr))v24->release)(v24);
                            }
                            if (v26) {
                              uint64_t result = ((uint64_t (*)(const OSObject *))v26->release)(v26);
                            }
                            if (v28)
                            {
                              release = v28->release;
                              return ((uint64_t (*)(OSNumberPtr))release)(v28);
                            }
                            return result;
                          }
                          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                          {
                            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                            if (CCLogStream::shouldLog())
                            {
                              uint64_t v44 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this
                                                                                                 + 1848))(this);
                              CCLogStream::logAlert(v44, "[dk] %s@%d:Fail to allocate valueRejLLSupp\n", "prepareScanRejectStatsForCA", 42965);
                            }
                          }
                          OSStringPtr v26 = 0;
                          OSNumberPtr v28 = 0;
                        }
                        else
                        {
                          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                          {
                            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                            if (CCLogStream::shouldLog())
                            {
                              OSNumberPtr v43 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this
                                                                                                 + 1848))(this);
                              CCLogStream::logAlert(v43, "[dk] %s@%d:Fail to allocate keyRejLLSupp\n", "prepareScanRejectStatsForCA", 42963);
                            }
                          }
                          OSStringPtr v26 = 0;
                          OSNumberPtr v28 = 0;
                          OSStringPtr v22 = 0;
                        }
LABEL_95:
                        OSNumberPtr v24 = 0;
                        goto LABEL_19;
                      }
                      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                      {
                        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                        if (CCLogStream::shouldLog())
                        {
                          uint64_t v42 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                          CCLogStream::logAlert(v42, "[dk] %s@%d:Fail to allocate valueRejLowRssiRoam\n", "prepareScanRejectStatsForCA", 42959);
                        }
                      }
                      OSStringPtr v26 = 0;
                      OSNumberPtr v28 = 0;
                    }
                    else
                    {
                      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                      {
                        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                        if (CCLogStream::shouldLog())
                        {
                          int v41 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                          CCLogStream::logAlert(v41, "[dk] %s@%d:Fail to allocate keyRejLowRssiRoam\n", "prepareScanRejectStatsForCA", 42957);
                        }
                      }
                      OSStringPtr v26 = 0;
                      OSNumberPtr v28 = 0;
                      OSNumberPtr v18 = 0;
                    }
                    OSStringPtr v22 = 0;
LABEL_94:
                    OSNumberPtr v20 = 0;
                    goto LABEL_95;
                  }
                  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                  {
                    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                    if (CCLogStream::shouldLog())
                    {
                      uint64_t v40 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                      CCLogStream::logAlert(v40, "[dk] %s@%d:Fail to allocate valueRejIPRes\n", "prepareScanRejectStatsForCA", 42953);
                    }
                  }
                  OSStringPtr v26 = 0;
                  OSNumberPtr v28 = 0;
                }
                else
                {
                  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
                  {
                    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                    if (CCLogStream::shouldLog())
                    {
                      int v39 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                      CCLogStream::logAlert(v39, "[dk] %s@%d:Fail to allocate keyRejIPRes\n", "prepareScanRejectStatsForCA", 42951);
                    }
                  }
                  OSStringPtr v26 = 0;
                  OSNumberPtr v28 = 0;
                  OSStringPtr v14 = 0;
                }
                OSNumberPtr v18 = 0;
                OSStringPtr v22 = 0;
LABEL_84:
                OSNumberPtr v16 = 0;
                goto LABEL_94;
              }
              if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
              {
                (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v38 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                  CCLogStream::logAlert(v38, "[dk] %s@%d:Fail to allocate valueRejBusy\n", "prepareScanRejectStatsForCA", 42947);
                }
              }
              OSStringPtr v26 = 0;
              OSNumberPtr v28 = 0;
LABEL_70:
              OSStringPtr v14 = 0;
              OSNumberPtr v18 = 0;
              OSStringPtr v22 = 0;
              uint64_t v47 = 0;
              goto LABEL_84;
            }
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              if (CCLogStream::shouldLog())
              {
                OSStringPtr v37 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
                CCLogStream::logAlert(v37, "[dk] %s@%d:Fail to allocate keyRejBusy\n", "prepareScanRejectStatsForCA", 42945);
              }
            }
            OSStringPtr v26 = 0;
LABEL_69:
            OSNumberPtr v28 = 0;
            uint64_t v48 = 0;
            goto LABEL_70;
          }
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              OSNumberPtr v36 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              CCLogStream::logAlert(v36, "[dk] %s@%d:Fail to allocate valueRejJoin\n", "prepareScanRejectStatsForCA", 42941);
            }
          }
LABEL_64:
          OSStringPtr v26 = 0;
          OSNumberPtr v49 = 0;
          goto LABEL_69;
        }
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            OSNumberPtr v35 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v35, "[dk] %s@%d:Fail to allocate keyRejJoin\n");
          }
        }
      }
      else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          OSNumberPtr v32 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v32, "[dk] %s@%d:Fail to allocate valueRejLowPrio\n");
        }
      }
      OSNumberPtr v50 = 0;
      goto LABEL_64;
    }
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        OSStringPtr v34 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        return CCLogStream::logAlert(v34, "[dk] %s@%d:Fail to allocate keyRejLowPrio\n", "prepareScanRejectStatsForCA", 42933);
      }
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *, OSDictionary *))(*(void *)this + 1848))(this, a2);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        OSStringPtr v31 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        return CCLogStream::logCrit(v31, "[dk] %s@%d:Failed to allocate AppleBCMWLANRoamManager_IVars\n", "prepareScanRejectStatsForCA", 42931);
      }
    }
  }
  return result;
}

double AppleBCMWLANCore::resetSlicesScanModeStats(AppleBCMWLANCore *this)
{
  uint64_t v1 = *((void *)this + 9) + 19508;
  *(_DWORD *)(v1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  return result;
}

uint64_t AppleBCMWLANCore::SendSlicesScanStatsCoreAnalytics(IOService *this)
{
  memset(v71, 170, 22);
  *(void *)__str = 0xAAAAAAAAAAAAAAAALL;
  OSStringPtr v2 = OSString::withCString("com.apple.wifi.slicesScanStats");
  if (!v2)
  {
    uint64_t result = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (result)
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v66 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        return CCLogStream::logAlert(v66, "[dk] %s@%d:Fail to allocate eventName\n", "SendSlicesScanStatsCoreAnalytics", 43332);
      }
    }
    return result;
  }
  uint64_t v3 = v2;
  OSStringPtr v4 = OSDictionary::withCapacity(0x36u);
  if (!v4)
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        OSNumberPtr v67 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v67, "[dk] %s@%d:Fail to allocate eventPayload\n");
      }
    }
    goto LABEL_45;
  }
  OSStringPtr v69 = v3;
  uint64_t v5 = 0;
  uint64_t v6 = 19508;
  while (2)
  {
    uint64_t v7 = 0;
    OSStringPtr v8 = kSliceIdKeys[v5];
    do
    {
      snprintf(__str, 0x1EuLL, "%s_%s", v8, kScanModeReportKeys[v7]);
      OSStringPtr v9 = OSString::withCString(__str);
      if (!v9)
      {
        if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
          goto LABEL_137;
        }
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t v3 = v69;
        if (!CCLogStream::shouldLog()) {
          goto LABEL_45;
        }
LABEL_153:
        OSNumberPtr v68 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v68, "[dk] %s@%d:Fail to allocate keyString\n");
        goto LABEL_45;
      }
      OSStringPtr v10 = v9;
      OSNumberPtr v11 = OSNumber::withNumber(*(unsigned int *)((char *)&this[1].init + 4 * v7 + v6), 0x20uLL);
      if (!v11)
      {
        if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
        {
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          uint64_t v3 = v69;
          if (!CCLogStream::shouldLog()) {
            goto LABEL_139;
          }
          uint64_t v63 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          int v64 = 43341;
          goto LABEL_49;
        }
        goto LABEL_138;
      }
      OSNumberPtr v12 = v11;
      OSDictionary::setObject(v4, v10, v11);
      ((void (*)(const OSObject *))v10->release)(v10);
      ((void (*)(OSNumberPtr))v12->release)(v12);
      ++v7;
    }
    while (v7 != 3);
    snprintf(__str, 0x1EuLL, "%s_%s", v8, "UserScanCnt");
    OSStringPtr v13 = OSString::withCString(__str);
    if (!v13)
    {
      if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
        goto LABEL_137;
      }
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      uint64_t v3 = v69;
      if (!CCLogStream::shouldLog()) {
        goto LABEL_45;
      }
      goto LABEL_153;
    }
    OSStringPtr v10 = v13;
    OSNumberPtr v14 = OSNumber::withNumber((LODWORD(this[1].OSObject::OSObjectInterface::__vftable[9 * v5 + 1188].free)- *((_DWORD *)&this[1].OSObject::OSObjectInterface::__vftable[1215].free + 5 * v5)), 0x20uLL);
    if (!v14)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t v3 = v69;
        if (!CCLogStream::shouldLog()) {
          goto LABEL_139;
        }
        uint64_t v63 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        int v64 = 43353;
        goto LABEL_49;
      }
      goto LABEL_138;
    }
    OSNumberPtr v15 = v14;
    OSDictionary::setObject(v4, v10, v14);
    ((void (*)(const OSObject *))v10->release)(v10);
    ((void (*)(OSNumberPtr))v15->release)(v15);
    snprintf(__str, 0x1EuLL, "%s_%s", v8, "AssocScanCnt");
    OSStringPtr v16 = OSString::withCString(__str);
    if (!v16)
    {
      if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
        goto LABEL_137;
      }
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      uint64_t v3 = v69;
      if (!CCLogStream::shouldLog()) {
        goto LABEL_45;
      }
      goto LABEL_153;
    }
    OSStringPtr v10 = v16;
    OSNumberPtr v17 = OSNumber::withNumber((HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[9 * v5 + 1188].free)- *((_DWORD *)&this[1].OSObject::OSObjectInterface::__vftable[1215].free + 5 * v5 + 1)), 0x20uLL);
    if (!v17)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t v3 = v69;
        if (!CCLogStream::shouldLog()) {
          goto LABEL_139;
        }
        uint64_t v63 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        int v64 = 43363;
        goto LABEL_49;
      }
      goto LABEL_138;
    }
    OSNumberPtr v18 = v17;
    OSDictionary::setObject(v4, v10, v17);
    ((void (*)(const OSObject *))v10->release)(v10);
    ((void (*)(OSNumberPtr))v18->release)(v18);
    snprintf(__str, 0x1EuLL, "%s_%s", v8, "RoamScanCnt");
    OSStringPtr v19 = OSString::withCString(__str);
    if (!v19)
    {
      if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
        goto LABEL_137;
      }
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      uint64_t v3 = v69;
      if (!CCLogStream::shouldLog()) {
        goto LABEL_45;
      }
      goto LABEL_153;
    }
    OSStringPtr v10 = v19;
    OSNumberPtr v20 = OSNumber::withNumber((LODWORD(this[1].OSObject::OSObjectInterface::__vftable[9 * v5 + 1189].init)- *((_DWORD *)&this[1].OSObject::OSObjectInterface::__vftable[1216].init + 5 * v5)), 0x20uLL);
    if (!v20)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t v3 = v69;
        if (!CCLogStream::shouldLog()) {
          goto LABEL_139;
        }
        uint64_t v63 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        int v64 = 43373;
        goto LABEL_49;
      }
      goto LABEL_138;
    }
    OSNumberPtr v21 = v20;
    OSDictionary::setObject(v4, v10, v20);
    ((void (*)(const OSObject *))v10->release)(v10);
    ((void (*)(OSNumberPtr))v21->release)(v21);
    snprintf(__str, 0x1EuLL, "%s_%s", v8, "PNOScanCnt");
    OSStringPtr v22 = OSString::withCString(__str);
    if (!v22)
    {
      if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
        goto LABEL_137;
      }
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      uint64_t v3 = v69;
      if (!CCLogStream::shouldLog()) {
        goto LABEL_45;
      }
      goto LABEL_153;
    }
    OSStringPtr v10 = v22;
    OSNumberPtr v23 = OSNumber::withNumber((HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[9 * v5 + 1189].init)- *((_DWORD *)&this[1].OSObject::OSObjectInterface::__vftable[1216].init + 5 * v5 + 1)), 0x20uLL);
    if (!v23)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t v3 = v69;
        if (!CCLogStream::shouldLog()) {
          goto LABEL_139;
        }
        uint64_t v63 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        int v64 = 43383;
        goto LABEL_49;
      }
      goto LABEL_138;
    }
    OSNumberPtr v24 = v23;
    OSDictionary::setObject(v4, v10, v23);
    ((void (*)(const OSObject *))v10->release)(v10);
    ((void (*)(OSNumberPtr))v24->release)(v24);
    snprintf(__str, 0x1EuLL, "%s_%s", v8, "OtherScanCnt");
    OSStringPtr v25 = OSString::withCString(__str);
    if (!v25)
    {
      if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
        goto LABEL_137;
      }
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      uint64_t v3 = v69;
      if (!CCLogStream::shouldLog()) {
        goto LABEL_45;
      }
      goto LABEL_153;
    }
    OSStringPtr v10 = v25;
    OSNumberPtr v26 = OSNumber::withNumber((LODWORD(this[1].OSObject::OSObjectInterface::__vftable[9 * v5 + 1189].free)- *((_DWORD *)&this[1].OSObject::OSObjectInterface::__vftable[1216].free + 5 * v5)), 0x20uLL);
    if (!v26)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t v3 = v69;
        if (!CCLogStream::shouldLog()) {
          goto LABEL_139;
        }
        uint64_t v63 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        int v64 = 43393;
        goto LABEL_49;
      }
      goto LABEL_138;
    }
    OSNumberPtr v27 = v26;
    OSDictionary::setObject(v4, v10, v26);
    ((void (*)(const OSObject *))v10->release)(v10);
    ((void (*)(OSNumberPtr))v27->release)(v27);
    snprintf(__str, 0x1EuLL, "%s_%s", v8, "UserScanDur");
    OSStringPtr v28 = OSString::withCString(__str);
    if (!v28)
    {
      if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
        goto LABEL_137;
      }
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      uint64_t v3 = v69;
      if (!CCLogStream::shouldLog()) {
        goto LABEL_45;
      }
      goto LABEL_153;
    }
    OSStringPtr v10 = v28;
    OSNumberPtr v29 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[9 * v5 + 1191].init, 0x40uLL);
    if (!v29)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t v3 = v69;
        if (!CCLogStream::shouldLog()) {
          goto LABEL_139;
        }
        uint64_t v63 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        int v64 = 43404;
        goto LABEL_49;
      }
      goto LABEL_138;
    }
    OSNumberPtr v30 = v29;
    OSDictionary::setObject(v4, v10, v29);
    ((void (*)(const OSObject *))v10->release)(v10);
    ((void (*)(OSNumberPtr))v30->release)(v30);
    snprintf(__str, 0x1EuLL, "%s_%s", v8, "AssocScanDur");
    OSStringPtr v31 = OSString::withCString(__str);
    if (!v31)
    {
      if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
        goto LABEL_137;
      }
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      uint64_t v3 = v69;
      if (!CCLogStream::shouldLog()) {
        goto LABEL_45;
      }
      goto LABEL_153;
    }
    OSStringPtr v10 = v31;
    OSNumberPtr v32 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[9 * v5 + 1191].free, 0x40uLL);
    if (!v32)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t v3 = v69;
        if (!CCLogStream::shouldLog()) {
          goto LABEL_139;
        }
        uint64_t v63 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        int v64 = 43414;
        goto LABEL_49;
      }
      goto LABEL_138;
    }
    OSNumberPtr v33 = v32;
    OSDictionary::setObject(v4, v10, v32);
    ((void (*)(const OSObject *))v10->release)(v10);
    ((void (*)(OSNumberPtr))v33->release)(v33);
    snprintf(__str, 0x1EuLL, "%s_%s", v8, "RoamScanDur");
    OSStringPtr v34 = OSString::withCString(__str);
    if (!v34)
    {
      if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
        goto LABEL_137;
      }
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      uint64_t v3 = v69;
      if (!CCLogStream::shouldLog()) {
        goto LABEL_45;
      }
      goto LABEL_153;
    }
    OSStringPtr v10 = v34;
    OSNumberPtr v35 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[9 * v5 + 1192].init, 0x40uLL);
    if (!v35)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t v3 = v69;
        if (!CCLogStream::shouldLog()) {
          goto LABEL_139;
        }
        uint64_t v63 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        int v64 = 43424;
        goto LABEL_49;
      }
      goto LABEL_138;
    }
    OSNumberPtr v36 = v35;
    OSDictionary::setObject(v4, v10, v35);
    ((void (*)(const OSObject *))v10->release)(v10);
    ((void (*)(OSNumberPtr))v36->release)(v36);
    snprintf(__str, 0x1EuLL, "%s_%s", v8, "PNOScanDur");
    OSStringPtr v37 = OSString::withCString(__str);
    if (!v37)
    {
      if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
        goto LABEL_137;
      }
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      uint64_t v3 = v69;
      if (!CCLogStream::shouldLog()) {
        goto LABEL_45;
      }
      goto LABEL_153;
    }
    OSStringPtr v10 = v37;
    OSNumberPtr v38 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[9 * v5 + 1192].free, 0x40uLL);
    if (!v38)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t v3 = v69;
        if (!CCLogStream::shouldLog()) {
          goto LABEL_139;
        }
        uint64_t v63 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        int v64 = 43434;
        goto LABEL_49;
      }
      goto LABEL_138;
    }
    OSNumberPtr v39 = v38;
    OSDictionary::setObject(v4, v10, v38);
    ((void (*)(const OSObject *))v10->release)(v10);
    ((void (*)(OSNumberPtr))v39->release)(v39);
    snprintf(__str, 0x1EuLL, "%s_%s", v8, "OtherScanDur");
    OSStringPtr v40 = OSString::withCString(__str);
    if (!v40)
    {
      if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
        goto LABEL_137;
      }
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      uint64_t v3 = v69;
      if (!CCLogStream::shouldLog()) {
        goto LABEL_45;
      }
      goto LABEL_153;
    }
    OSStringPtr v10 = v40;
    OSNumberPtr v41 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[9 * v5 + 1193].init, 0x40uLL);
    if (!v41)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t v3 = v69;
        if (!CCLogStream::shouldLog()) {
          goto LABEL_139;
        }
        uint64_t v63 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        int v64 = 43444;
        goto LABEL_49;
      }
      goto LABEL_138;
    }
    OSNumberPtr v42 = v41;
    OSDictionary::setObject(v4, v10, v41);
    ((void (*)(const OSObject *))v10->release)(v10);
    ((void (*)(OSNumberPtr))v42->release)(v42);
    snprintf(__str, 0x1EuLL, "%s_%s", v8, "UserScanOffChDur");
    OSStringPtr v43 = OSString::withCString(__str);
    if (!v43)
    {
      if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
        goto LABEL_137;
      }
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      uint64_t v3 = v69;
      if (!CCLogStream::shouldLog()) {
        goto LABEL_45;
      }
      goto LABEL_153;
    }
    OSStringPtr v10 = v43;
    OSNumberPtr v44 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[9 * v5 + 1195].init, 0x40uLL);
    if (!v44)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t v3 = v69;
        if (!CCLogStream::shouldLog()) {
          goto LABEL_139;
        }
        uint64_t v63 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        int v64 = 43457;
        goto LABEL_49;
      }
      goto LABEL_138;
    }
    OSNumberPtr v45 = v44;
    OSDictionary::setObject(v4, v10, v44);
    ((void (*)(const OSObject *))v10->release)(v10);
    ((void (*)(OSNumberPtr))v45->release)(v45);
    snprintf(__str, 0x1EuLL, "%s_%s", v8, "AssocScanOffChDur");
    OSStringPtr v46 = OSString::withCString(__str);
    if (!v46)
    {
      if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
        goto LABEL_137;
      }
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      uint64_t v3 = v69;
      if (!CCLogStream::shouldLog()) {
        goto LABEL_45;
      }
      goto LABEL_153;
    }
    OSStringPtr v10 = v46;
    OSNumberPtr v47 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[9 * v5 + 1195].free, 0x40uLL);
    if (!v47)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t v3 = v69;
        if (!CCLogStream::shouldLog()) {
          goto LABEL_139;
        }
        uint64_t v63 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        int v64 = 43467;
        goto LABEL_49;
      }
      goto LABEL_138;
    }
    OSNumberPtr v48 = v47;
    OSDictionary::setObject(v4, v10, v47);
    ((void (*)(const OSObject *))v10->release)(v10);
    ((void (*)(OSNumberPtr))v48->release)(v48);
    snprintf(__str, 0x1EuLL, "%s_%s", v8, "RoamScanOffChDur");
    OSStringPtr v49 = OSString::withCString(__str);
    if (!v49)
    {
      if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
        goto LABEL_137;
      }
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      uint64_t v3 = v69;
      if (!CCLogStream::shouldLog()) {
        goto LABEL_45;
      }
      goto LABEL_153;
    }
    OSStringPtr v10 = v49;
    OSNumberPtr v50 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[9 * v5 + 1196].init, 0x40uLL);
    if (!v50)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t v3 = v69;
        if (!CCLogStream::shouldLog()) {
          goto LABEL_139;
        }
        uint64_t v63 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        int v64 = 43477;
        goto LABEL_49;
      }
      goto LABEL_138;
    }
    OSNumberPtr v51 = v50;
    OSDictionary::setObject(v4, v10, v50);
    ((void (*)(const OSObject *))v10->release)(v10);
    ((void (*)(OSNumberPtr))v51->release)(v51);
    snprintf(__str, 0x1EuLL, "%s_%s", v8, "PNOScanOffChDur");
    OSStringPtr v52 = OSString::withCString(__str);
    if (!v52)
    {
      if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
        goto LABEL_137;
      }
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      uint64_t v3 = v69;
      if (!CCLogStream::shouldLog()) {
        goto LABEL_45;
      }
      goto LABEL_153;
    }
    OSStringPtr v10 = v52;
    OSNumberPtr v53 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[9 * v5 + 1196].free, 0x40uLL);
    if (!v53)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t v3 = v69;
        if (!CCLogStream::shouldLog()) {
          goto LABEL_139;
        }
        uint64_t v63 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        int v64 = 43487;
        goto LABEL_49;
      }
LABEL_138:
      uint64_t v3 = v69;
      goto LABEL_139;
    }
    OSNumberPtr v54 = v53;
    OSDictionary::setObject(v4, v10, v53);
    ((void (*)(const OSObject *))v10->release)(v10);
    ((void (*)(OSNumberPtr))v54->release)(v54);
    snprintf(__str, 0x1EuLL, "%s_%s", v8, "OtherScanOffChDur");
    OSStringPtr v55 = OSString::withCString(__str);
    if (!v55)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t v3 = v69;
        if (!CCLogStream::shouldLog()) {
          goto LABEL_45;
        }
        goto LABEL_153;
      }
LABEL_137:
      OSStringPtr v10 = 0;
      goto LABEL_138;
    }
    OSStringPtr v10 = v55;
    OSNumberPtr v56 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[9 * v5 + 1197].init, 0x40uLL);
    if (!v56)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t v3 = v69;
        if (!CCLogStream::shouldLog()) {
          goto LABEL_139;
        }
        uint64_t v63 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        int v64 = 43497;
LABEL_49:
        CCLogStream::logAlert(v63, "[dk] %s@%d:Fail to allocate numValue\n", "SendSlicesScanStatsCoreAnalytics", v64);
        goto LABEL_139;
      }
      goto LABEL_138;
    }
    OSNumberPtr v57 = v56;
    OSDictionary::setObject(v4, v10, v56);
    ((void (*)(const OSObject *))v10->release)(v10);
    ((void (*)(OSNumberPtr))v57->release)(v57);
    ++v5;
    v6 += 12;
    if (v5 != 3) {
      continue;
    }
    break;
  }
  uint64_t v3 = v69;
  uint64_t v58 = IOService::CoreAnalyticsSendEvent(this, 0, v69, v4, 0);
  if (v58)
  {
    uint64_t v59 = v58;
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        long long v60 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CStringNoCopy = OSString::getCStringNoCopy(v69);
        OSStringPtr v62 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v59);
        CCLogStream::logEmergency(v60, "[dk] %s@%d:Failed to send CoreAnalytics for event %s : %s\n", "SendSlicesScanStatsCoreAnalytics", 43508, CStringNoCopy, v62);
      }
    }
  }
LABEL_45:
  OSStringPtr v10 = 0;
LABEL_139:
  uint64_t result = ((uint64_t (*)(OSString *))v3->release)(v3);
  if (v4) {
    uint64_t result = ((uint64_t (*)(OSDictionary *))v4->release)(v4);
  }
  if (v10) {
    return ((uint64_t (*)(const OSObject *))v10->release)(v10);
  }
  return result;
}

uint64_t AppleBCMWLANCore::sendePNOEventsCoreAnalytics(IOService *this, int a2)
{
  switch(a2)
  {
    case 0:
      OSStringPtr v4 = OSString::withCString("com.apple.wifi.ePNOFoundEventLegacy");
      if (v4)
      {
        uint64_t v5 = v4;
        OSDictionaryPtr v6 = OSDictionary::withCapacity(1u);
        if (v6)
        {
          uint64_t v7 = v6;
          OSStringPtr v8 = "NetFoundLegacyEvent";
          goto LABEL_21;
        }
        if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
        {
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (CCLogStream::shouldLog())
          {
            OSNumberPtr v29 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            int v30 = 43534;
            goto LABEL_66;
          }
        }
        goto LABEL_62;
      }
      uint64_t result = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (result)
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          OSNumberPtr v27 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          int v28 = 43532;
          goto LABEL_64;
        }
      }
      break;
    case 1:
      OSStringPtr v10 = OSString::withCString("com.apple.wifi.ePNOFoundEventLpsc");
      if (v10)
      {
        uint64_t v5 = v10;
        OSDictionaryPtr v11 = OSDictionary::withCapacity(1u);
        if (v11)
        {
          uint64_t v7 = v11;
          OSStringPtr v8 = "NetFoundLPSCEvent";
          goto LABEL_21;
        }
        if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
        {
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (CCLogStream::shouldLog())
          {
            OSNumberPtr v29 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            int v30 = 43543;
            goto LABEL_66;
          }
        }
        goto LABEL_62;
      }
      uint64_t result = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (result)
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          OSNumberPtr v27 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          int v28 = 43541;
          goto LABEL_64;
        }
      }
      break;
    case 2:
      OSStringPtr v12 = OSString::withCString("com.apple.wifi.ePNOLostEventLegacy");
      if (v12)
      {
        uint64_t v5 = v12;
        OSDictionaryPtr v13 = OSDictionary::withCapacity(1u);
        if (v13)
        {
          uint64_t v7 = v13;
          OSStringPtr v8 = "NetLostLegacyEvent";
          goto LABEL_21;
        }
        if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
        {
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (CCLogStream::shouldLog())
          {
            OSNumberPtr v29 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            int v30 = 43552;
            goto LABEL_66;
          }
        }
        goto LABEL_62;
      }
      uint64_t result = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (result)
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          OSNumberPtr v27 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          int v28 = 43550;
          goto LABEL_64;
        }
      }
      break;
    case 3:
      OSStringPtr v14 = OSString::withCString("com.apple.wifi.ePNOLostEventLpsc");
      if (v14)
      {
        uint64_t v5 = v14;
        OSDictionaryPtr v15 = OSDictionary::withCapacity(1u);
        if (!v15)
        {
          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              OSNumberPtr v29 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              int v30 = 43561;
LABEL_66:
              CCLogStream::logAlert(v29, "[dk] %s@%d:Fail to allocate eventPayload\n", "sendePNOEventsCoreAnalytics", v30);
            }
          }
LABEL_62:
          uint64_t v7 = 0;
          goto LABEL_32;
        }
        uint64_t v7 = v15;
        OSStringPtr v8 = "NetLostLPSCEvent";
LABEL_21:
        OSStringPtr v16 = OSString::withCString(v8);
        if (v16)
        {
          OSNumberPtr v17 = v16;
          OSNumberPtr v18 = OSNumber::withNumber(1uLL, 0x20uLL);
          if (v18)
          {
            OSDictionary::setObject(v7, v17, v18);
            uint64_t v19 = IOService::CoreAnalyticsSendEvent(this, 0, v5, v7, 0);
            if (v19)
            {
              uint64_t v20 = v19;
              if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
              {
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if (CCLogStream::shouldLog())
                {
                  OSNumberPtr v21 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  CStringNoCopy = OSString::getCStringNoCopy(v5);
                  OSNumberPtr v23 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v20);
                  CCLogStream::logEmergency(v21, "[dk] %s@%d:Failed to send CoreAnalytics for event %s : %s\n", "sendePNOEventsCoreAnalytics", 43574, CStringNoCopy, v23);
                }
              }
            }
            if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog())
              {
                OSNumberPtr v26 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                CCLogStream::logInfo(v26, "[dk] %s@%d:Submitted ePNO event type %d to CA\n", "sendePNOEventsCoreAnalytics", 43578, a2);
              }
            }
          }
          else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              OSStringPtr v25 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              CCLogStream::logAlert(v25, "[dk] %s@%d:Fail to allocate valueePNOevent\n", "sendePNOEventsCoreAnalytics", 43568);
            }
          }
          ((void (*)(const OSObject *))v17->release)(v17);
          if (v18) {
            ((void (*)(OSNumberPtr))v18->release)(v18);
          }
          goto LABEL_32;
        }
        goto LABEL_6;
      }
      uint64_t result = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (result)
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          OSNumberPtr v27 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          int v28 = 43559;
LABEL_64:
          uint64_t result = CCLogStream::logAlert(v27, "[dk] %s@%d:Fail to allocate eventName\n", "sendePNOEventsCoreAnalytics", v28);
        }
      }
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v5 = 0;
LABEL_6:
      uint64_t result = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (result)
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          OSStringPtr v31 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          uint64_t result = CCLogStream::logAlert(v31, "[dk] %s@%d:Fail to allocate keyePNOevent\n", "sendePNOEventsCoreAnalytics", 43566);
        }
      }
      if (v5)
      {
LABEL_32:
        uint64_t result = ((uint64_t (*)(OSString *))v5->release)(v5);
        if (!v7) {
          return result;
        }
      }
      else if (!v7)
      {
        return result;
      }
      release = v7->release;
      uint64_t result = ((uint64_t (*)(OSDictionary *))release)(v7);
      break;
  }
  return result;
}

uint64_t AppleBCMWLANCore::sendSCTxBlankingStatsEventCoreAnalytics(IOService *this)
{
  OSStringPtr v2 = OSString::withCString("com.apple.wifi.SCTxBlankingStats");
  if (v2)
  {
    uint64_t v3 = v2;
    OSStringPtr v4 = OSDictionary::withCapacity(0x11u);
    if (!v4)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          OSNumberPtr v61 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v61, "[dk] %s@%d:Fail to allocate eventPayload\n");
        }
      }
      goto LABEL_41;
    }
    OSStringPtr v5 = OSString::withCString("NoBlkChannelCnt");
    if (v5)
    {
      OSDictionaryPtr v6 = v5;
      OSNumberPtr v7 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[1120].init, 0x40uLL);
      if (!v7)
      {
        if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
          goto LABEL_153;
        }
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if ((CCLogStream::shouldLog() & 1) == 0) {
          goto LABEL_153;
        }
        int v62 = 43630;
        goto LABEL_155;
      }
      OSNumberPtr v8 = v7;
      OSDictionary::setObject(v4, v6, v7);
      ((void (*)(const OSObject *))v6->release)(v6);
      ((void (*)(OSNumberPtr))v8->release)(v8);
      OSStringPtr v9 = OSString::withCString("UppBoundBin1");
      if (v9)
      {
        OSDictionaryPtr v6 = v9;
        OSNumberPtr v10 = OSNumber::withNumber(LODWORD(this[1].OSObject::OSObjectInterface::__vftable[1112].init), 0x20uLL);
        if (!v10)
        {
          if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
            goto LABEL_153;
          }
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if ((CCLogStream::shouldLog() & 1) == 0) {
            goto LABEL_153;
          }
          int v62 = 43638;
          goto LABEL_155;
        }
        OSNumberPtr v11 = v10;
        OSDictionary::setObject(v4, v6, v10);
        ((void (*)(const OSObject *))v6->release)(v6);
        ((void (*)(OSNumberPtr))v11->release)(v11);
        OSStringPtr v12 = OSString::withCString("CntAcBtTxBin1");
        if (v12)
        {
          OSDictionaryPtr v6 = v12;
          OSNumberPtr v13 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[1112].free, 0x40uLL);
          if (!v13)
          {
            if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
              goto LABEL_153;
            }
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if ((CCLogStream::shouldLog() & 1) == 0) {
              goto LABEL_153;
            }
            int v62 = 43646;
            goto LABEL_155;
          }
          OSNumberPtr v14 = v13;
          OSDictionary::setObject(v4, v6, v13);
          ((void (*)(const OSObject *))v6->release)(v6);
          ((void (*)(OSNumberPtr))v14->release)(v14);
          OSStringPtr v15 = OSString::withCString("CntMcTxBin1");
          if (v15)
          {
            OSDictionaryPtr v6 = v15;
            OSNumberPtr v16 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[1113].init, 0x40uLL);
            if (!v16)
            {
              if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                goto LABEL_153;
              }
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if ((CCLogStream::shouldLog() & 1) == 0) {
                goto LABEL_153;
              }
              int v62 = 43654;
              goto LABEL_155;
            }
            OSNumberPtr v17 = v16;
            OSDictionary::setObject(v4, v6, v16);
            ((void (*)(const OSObject *))v6->release)(v6);
            ((void (*)(OSNumberPtr))v17->release)(v17);
            OSStringPtr v18 = OSString::withCString("CntTotalBin1");
            if (v18)
            {
              OSDictionaryPtr v6 = v18;
              OSNumberPtr v19 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[1113].free, 0x40uLL);
              if (!v19)
              {
                if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                  goto LABEL_153;
                }
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if ((CCLogStream::shouldLog() & 1) == 0) {
                  goto LABEL_153;
                }
                int v62 = 43662;
                goto LABEL_155;
              }
              OSNumberPtr v20 = v19;
              OSDictionary::setObject(v4, v6, v19);
              ((void (*)(const OSObject *))v6->release)(v6);
              ((void (*)(OSNumberPtr))v20->release)(v20);
              OSStringPtr v21 = OSString::withCString("UppBoundBin2");
              if (v21)
              {
                OSDictionaryPtr v6 = v21;
                OSNumberPtr v22 = OSNumber::withNumber(LODWORD(this[1].OSObject::OSObjectInterface::__vftable[1114].init), 0x20uLL);
                if (!v22)
                {
                  if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                    goto LABEL_153;
                  }
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  if ((CCLogStream::shouldLog() & 1) == 0) {
                    goto LABEL_153;
                  }
                  int v62 = 43670;
                  goto LABEL_155;
                }
                OSNumberPtr v23 = v22;
                OSDictionary::setObject(v4, v6, v22);
                ((void (*)(const OSObject *))v6->release)(v6);
                ((void (*)(OSNumberPtr))v23->release)(v23);
                OSStringPtr v24 = OSString::withCString("CntAcBtTxBin2");
                if (v24)
                {
                  OSDictionaryPtr v6 = v24;
                  OSNumberPtr v25 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[1114].free, 0x40uLL);
                  if (!v25)
                  {
                    if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                      goto LABEL_153;
                    }
                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    if ((CCLogStream::shouldLog() & 1) == 0) {
                      goto LABEL_153;
                    }
                    int v62 = 43678;
                    goto LABEL_155;
                  }
                  OSNumberPtr v26 = v25;
                  OSDictionary::setObject(v4, v6, v25);
                  ((void (*)(const OSObject *))v6->release)(v6);
                  ((void (*)(OSNumberPtr))v26->release)(v26);
                  OSStringPtr v27 = OSString::withCString("CntMcTxBin2");
                  if (v27)
                  {
                    OSDictionaryPtr v6 = v27;
                    OSNumberPtr v28 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[1115].init, 0x40uLL);
                    if (!v28)
                    {
                      if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                        goto LABEL_153;
                      }
                      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                      if ((CCLogStream::shouldLog() & 1) == 0) {
                        goto LABEL_153;
                      }
                      int v62 = 43686;
                      goto LABEL_155;
                    }
                    OSNumberPtr v29 = v28;
                    OSDictionary::setObject(v4, v6, v28);
                    ((void (*)(const OSObject *))v6->release)(v6);
                    ((void (*)(OSNumberPtr))v29->release)(v29);
                    OSStringPtr v30 = OSString::withCString("CntTotalBin2");
                    if (v30)
                    {
                      OSDictionaryPtr v6 = v30;
                      OSNumberPtr v31 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[1115].free, 0x40uLL);
                      if (!v31)
                      {
                        if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                          goto LABEL_153;
                        }
                        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                        if ((CCLogStream::shouldLog() & 1) == 0) {
                          goto LABEL_153;
                        }
                        int v62 = 43694;
                        goto LABEL_155;
                      }
                      OSNumberPtr v32 = v31;
                      OSDictionary::setObject(v4, v6, v31);
                      ((void (*)(const OSObject *))v6->release)(v6);
                      ((void (*)(OSNumberPtr))v32->release)(v32);
                      OSStringPtr v33 = OSString::withCString("UppBoundBin3");
                      if (v33)
                      {
                        OSDictionaryPtr v6 = v33;
                        OSNumberPtr v34 = OSNumber::withNumber(LODWORD(this[1].OSObject::OSObjectInterface::__vftable[1116].init), 0x20uLL);
                        if (!v34)
                        {
                          if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                            goto LABEL_153;
                          }
                          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                          if ((CCLogStream::shouldLog() & 1) == 0) {
                            goto LABEL_153;
                          }
                          int v62 = 43702;
                          goto LABEL_155;
                        }
                        OSNumberPtr v35 = v34;
                        OSDictionary::setObject(v4, v6, v34);
                        ((void (*)(const OSObject *))v6->release)(v6);
                        ((void (*)(OSNumberPtr))v35->release)(v35);
                        OSStringPtr v36 = OSString::withCString("CntAcBtTxBin3");
                        if (v36)
                        {
                          OSDictionaryPtr v6 = v36;
                          OSNumberPtr v37 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[1116].free, 0x40uLL);
                          if (!v37)
                          {
                            if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                              goto LABEL_153;
                            }
                            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                            if ((CCLogStream::shouldLog() & 1) == 0) {
                              goto LABEL_153;
                            }
                            int v62 = 43710;
                            goto LABEL_155;
                          }
                          OSNumberPtr v38 = v37;
                          OSDictionary::setObject(v4, v6, v37);
                          ((void (*)(const OSObject *))v6->release)(v6);
                          ((void (*)(OSNumberPtr))v38->release)(v38);
                          OSStringPtr v39 = OSString::withCString("CntMcTxBin3");
                          if (v39)
                          {
                            OSDictionaryPtr v6 = v39;
                            OSNumberPtr v40 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[1117].init, 0x40uLL);
                            if (!v40)
                            {
                              if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                                goto LABEL_153;
                              }
                              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                              if ((CCLogStream::shouldLog() & 1) == 0) {
                                goto LABEL_153;
                              }
                              int v62 = 43718;
                              goto LABEL_155;
                            }
                            OSNumberPtr v41 = v40;
                            OSDictionary::setObject(v4, v6, v40);
                            ((void (*)(const OSObject *))v6->release)(v6);
                            ((void (*)(OSNumberPtr))v41->release)(v41);
                            OSStringPtr v42 = OSString::withCString("CntTotalBin3");
                            if (v42)
                            {
                              OSDictionaryPtr v6 = v42;
                              OSNumberPtr v43 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[1117].free, 0x40uLL);
                              if (!v43)
                              {
                                if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                                  goto LABEL_153;
                                }
                                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                if ((CCLogStream::shouldLog() & 1) == 0) {
                                  goto LABEL_153;
                                }
                                int v62 = 43726;
                                goto LABEL_155;
                              }
                              OSNumberPtr v44 = v43;
                              OSDictionary::setObject(v4, v6, v43);
                              ((void (*)(const OSObject *))v6->release)(v6);
                              ((void (*)(OSNumberPtr))v44->release)(v44);
                              OSStringPtr v45 = OSString::withCString("UppBoundBin4");
                              if (v45)
                              {
                                OSDictionaryPtr v6 = v45;
                                OSNumberPtr v46 = OSNumber::withNumber(LODWORD(this[1].OSObject::OSObjectInterface::__vftable[1118].init), 0x20uLL);
                                if (!v46)
                                {
                                  if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                                    goto LABEL_153;
                                  }
                                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                  if ((CCLogStream::shouldLog() & 1) == 0) {
                                    goto LABEL_153;
                                  }
                                  int v62 = 43734;
                                  goto LABEL_155;
                                }
                                OSNumberPtr v47 = v46;
                                OSDictionary::setObject(v4, v6, v46);
                                ((void (*)(const OSObject *))v6->release)(v6);
                                ((void (*)(OSNumberPtr))v47->release)(v47);
                                OSStringPtr v48 = OSString::withCString("CntAcBtTxBin4");
                                if (v48)
                                {
                                  OSDictionaryPtr v6 = v48;
                                  OSNumberPtr v49 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[1118].free, 0x40uLL);
                                  if (!v49)
                                  {
                                    if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                                      goto LABEL_153;
                                    }
                                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                    if ((CCLogStream::shouldLog() & 1) == 0) {
                                      goto LABEL_153;
                                    }
                                    int v62 = 43742;
                                    goto LABEL_155;
                                  }
                                  OSNumberPtr v50 = v49;
                                  OSDictionary::setObject(v4, v6, v49);
                                  ((void (*)(const OSObject *))v6->release)(v6);
                                  ((void (*)(OSNumberPtr))v50->release)(v50);
                                  OSStringPtr v51 = OSString::withCString("CntMcTxBin4");
                                  if (v51)
                                  {
                                    OSDictionaryPtr v6 = v51;
                                    OSNumberPtr v52 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[1119].init, 0x40uLL);
                                    if (!v52)
                                    {
                                      if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                                        goto LABEL_153;
                                      }
                                      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                      if ((CCLogStream::shouldLog() & 1) == 0) {
                                        goto LABEL_153;
                                      }
                                      int v62 = 43750;
LABEL_155:
                                      OSNumberPtr v68 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                      CCLogStream::logAlert(v68, "[dk] %s@%d:Fail to allocate numValue\n", "sendSCTxBlankingStatsEventCoreAnalytics", v62);
LABEL_153:
                                      ((void (*)(const OSObject *))v6->release)(v6);
                                      goto LABEL_41;
                                    }
                                    OSNumberPtr v53 = v52;
                                    OSDictionary::setObject(v4, v6, v52);
                                    ((void (*)(const OSObject *))v6->release)(v6);
                                    ((void (*)(OSNumberPtr))v53->release)(v53);
                                    OSStringPtr v54 = OSString::withCString("CntTotalBin4");
                                    if (v54)
                                    {
                                      OSDictionaryPtr v6 = v54;
                                      OSNumberPtr v55 = OSNumber::withNumber((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[1119].free, 0x40uLL);
                                      if (v55)
                                      {
                                        OSNumberPtr v56 = v55;
                                        OSDictionary::setObject(v4, v6, v55);
                                        ((void (*)(const OSObject *))v6->release)(v6);
                                        ((void (*)(OSNumberPtr))v56->release)(v56);
                                        uint64_t v57 = IOService::CoreAnalyticsSendEvent(this, 0, v3, v4, 0);
                                        if (v57)
                                        {
                                          uint64_t v58 = v57;
                                          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                                          {
                                            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                            if (CCLogStream::shouldLog())
                                            {
                                              int v64 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                              CStringNoCopy = OSString::getCStringNoCopy(v3);
                                              uint64_t v66 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v58);
                                              CCLogStream::logEmergency(v64, "[dk] %s@%d:Failed to send CoreAnalytics for event %s : %s\n", "sendSCTxBlankingStatsEventCoreAnalytics", 43766, CStringNoCopy, v66);
                                            }
                                          }
                                        }
                                        goto LABEL_41;
                                      }
                                      if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
                                        goto LABEL_153;
                                      }
                                      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                      if ((CCLogStream::shouldLog() & 1) == 0) {
                                        goto LABEL_153;
                                      }
                                      int v62 = 43758;
                                      goto LABEL_155;
                                    }
                                    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                                    {
                                      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                      if (CCLogStream::shouldLog())
                                      {
LABEL_150:
                                        uint64_t v63 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                        CCLogStream::logAlert(v63, "[dk] %s@%d:Fail to allocate keyString\n");
                                      }
                                    }
                                  }
                                  else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                                  {
                                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                    if (CCLogStream::shouldLog()) {
                                      goto LABEL_150;
                                    }
                                  }
                                }
                                else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                                {
                                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                  if (CCLogStream::shouldLog()) {
                                    goto LABEL_150;
                                  }
                                }
                              }
                              else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                              {
                                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                                if (CCLogStream::shouldLog()) {
                                  goto LABEL_150;
                                }
                              }
                            }
                            else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                            {
                              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                              if (CCLogStream::shouldLog()) {
                                goto LABEL_150;
                              }
                            }
                          }
                          else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                          {
                            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                            if (CCLogStream::shouldLog()) {
                              goto LABEL_150;
                            }
                          }
                        }
                        else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                        {
                          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                          if (CCLogStream::shouldLog()) {
                            goto LABEL_150;
                          }
                        }
                      }
                      else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                      {
                        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                        if (CCLogStream::shouldLog()) {
                          goto LABEL_150;
                        }
                      }
                    }
                    else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                    {
                      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                      if (CCLogStream::shouldLog()) {
                        goto LABEL_150;
                      }
                    }
                  }
                  else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                  {
                    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                    if (CCLogStream::shouldLog()) {
                      goto LABEL_150;
                    }
                  }
                }
                else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
                {
                  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  if (CCLogStream::shouldLog()) {
                    goto LABEL_150;
                  }
                }
              }
              else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
              {
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if (CCLogStream::shouldLog()) {
                  goto LABEL_150;
                }
              }
            }
            else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog()) {
                goto LABEL_150;
              }
            }
          }
          else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog()) {
              goto LABEL_150;
            }
          }
        }
        else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
        {
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (CCLogStream::shouldLog()) {
            goto LABEL_150;
          }
        }
      }
      else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog()) {
          goto LABEL_150;
        }
      }
    }
    else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog()) {
        goto LABEL_150;
      }
    }
LABEL_41:
    uint64_t result = ((uint64_t (*)(OSString *))v3->release)(v3);
    if (v4)
    {
      release = v4->release;
      return ((uint64_t (*)(OSDictionary *))release)(v4);
    }
    return result;
  }
  uint64_t result = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
  if (result)
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      OSNumberPtr v67 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      return CCLogStream::logAlert(v67, "[dk] %s@%d:Fail to allocate eventName\n", "sendSCTxBlankingStatsEventCoreAnalytics", 43623);
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::updateDynSARSimpleReport(AppleBCMWLANCore *this, unsigned int a2)
{
  uint64_t v3 = *((void *)this + 9);
  uint64_t v4 = a2;
  OSStringPtr v5 = (void *)(v3 + ((unint64_t)a2 << 6));
  unint64_t v6 = v5[595];
  unint64_t v7 = v5[579];
  BOOL v8 = v6 >= v7;
  unint64_t v9 = v6 - v7;
  char v10 = !v8;
  unint64_t v11 = v5[596];
  unint64_t v12 = v5[580];
  BOOL v8 = v11 >= v12;
  unint64_t v13 = v11 - v12;
  char v14 = !v8;
  unint64_t v15 = v5[597];
  unint64_t v16 = v5[581];
  BOOL v8 = v15 >= v16;
  unint64_t v17 = v15 - v16;
  char v18 = !v8;
  unint64_t v19 = v5[598];
  unint64_t v20 = v5[582];
  BOOL v8 = v19 >= v20;
  unint64_t v21 = v19 - v20;
  uint64_t result = !v8;
  unint64_t v23 = v5[599];
  unint64_t v24 = v5[583];
  BOOL v8 = v23 >= v24;
  unint64_t v25 = v23 - v24;
  uint64_t v26 = !v8;
  unint64_t v27 = v5[600];
  unint64_t v28 = v5[584];
  BOOL v8 = v27 >= v28;
  unint64_t v29 = v27 - v28;
  uint64_t v30 = !v8;
  unint64_t v31 = v5[601];
  unint64_t v32 = v5[585];
  BOOL v8 = v31 >= v32;
  unint64_t v33 = v31 - v32;
  uint64_t v34 = !v8;
  if ((v10 & 1) != 0
    || (v14 & 1) != 0
    || (v18 & 1) != 0
    || (result & 1) != 0
    || (v26 & 1) != 0
    || (v30 & 1) != 0
    || v34)
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *, uint64_t, uint64_t, uint64_t))(*(void *)this + 1848))(this, v26, v30, v34);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        OSNumberPtr v35 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        OSStringPtr v36 = (void *)(*((void *)this + 9) + (v4 << 6));
        return CCLogStream::logEmergency(v35, "[dk] %s@%d: Overflow detected: non_opt_dur[%llu] pwr_opt_dur[%llu] fail_safe_dur[%llu] no_mute_dur[%llu] hybrid_dur[%llu] txdc_throttle_dur[%llu] pwr_opt_txdc_throttle_dur[%llu]\n", "updateDynSARSimpleReport", 43803, v36[595], v36[596], v36[597], v36[598], v36[599], v36[600], v36[601]);
      }
    }
  }
  else
  {
    *(void *)(v3 + (v4 << 6) + 4504) = v9;
    *(void *)(*((void *)this + 9) + (v4 << 6) + 4512) = v13;
    *(void *)(*((void *)this + 9) + (v4 << 6) + 4520) = v17;
    *(void *)(*((void *)this + 9) + (v4 << 6) + 4528) = v21;
    *(void *)(*((void *)this + 9) + (v4 << 6) + 4536) = v25;
    *(void *)(*((void *)this + 9) + (v4 << 6) + 4544) = v29;
    *(void *)(*((void *)this + 9) + (v4 << 6) + 4552) = v33;
    *(_DWORD *)(*((void *)this + 9) + (v4 << 6) + 4560) = *(_DWORD *)(*((void *)this + 9) + (v4 << 6) + 4816);
  }
  return result;
}

double AppleBCMWLANCore::collectDynSARPerSliceSummary(AppleBCMWLANCore *this, unsigned int a2)
{
  uint64_t v2 = a2;
  if (*(_DWORD *)(*((void *)this + 9) + ((unint64_t)a2 << 6) + 4816))
  {
    AppleBCMWLANCore::updateDynSARSimpleReport(this, a2);
    AppleBCMWLANCore::sendDynSARPerSliceStatsCoreAnalytics((IOService *)this, a2);
    OSStringPtr v5 = (_OWORD *)(*((void *)this + 9) + (v2 << 6));
    unint64_t v6 = (_OWORD *)((char *)v5 + 4632);
    OSStringPtr v5 = (_OWORD *)((char *)v5 + 4760);
    long long v7 = v5[1];
    *unint64_t v6 = *v5;
    v6[1] = v7;
    long long v8 = v5[3];
    void v6[2] = v5[2];
    void v6[3] = v8;
    unint64_t v9 = (_OWORD *)(*((void *)this + 9) + (v2 << 6) + 4504);
    double result = 0.0;
    _OWORD *v9 = 0u;
    v9[1] = 0u;
    void v9[2] = 0u;
    v9[3] = 0u;
    unint64_t v11 = (_OWORD *)(*((void *)this + 9) + (v2 << 6) + 4760);
    void v11[2] = 0u;
    void v11[3] = 0u;
    _OWORD *v11 = 0u;
    v11[1] = 0u;
  }
  return result;
}

double AppleBCMWLANCore::collectTxDCSlice0Ant0Summary(IOService *this)
{
  uint64_t v2 = this[1].OSObject::OSObjectInterface::__vftable;
  free = (AppleBCMWLANIOReporting *)v2[344].free;
  if (free && LODWORD(v2[394].init))
  {
    AppleBCMWLANIOReportingCore::reportTxDCSlice0Ant0(free, (uint64_t *)&v2[394]);
    uint64_t v2 = this[1].OSObject::OSObjectInterface::__vftable;
  }
  if (LODWORD(v2[394].init))
  {
    AppleBCMWLANCore::sendTxDCSlice0Ant0StatsCoreAnalytics(this);
    uint64_t v2 = this[1].OSObject::OSObjectInterface::__vftable;
  }
  v2[399].init = 0;
  double result = 0.0;
  v2[398] = 0u;
  v2[397] = 0u;
  v2[396] = 0u;
  v2[395] = 0u;
  v2[394] = 0u;
  return result;
}

double AppleBCMWLANCore::collectTxDCSlice1Ant0Summary(IOService *this)
{
  uint64_t v2 = this[1].OSObject::OSObjectInterface::__vftable;
  free = (AppleBCMWLANIOReporting *)v2[344].free;
  if (free && LODWORD(v2[399].free))
  {
    AppleBCMWLANIOReportingCore::reportTxDCSlice1Ant0(free, (uint64_t *)&v2[399].free);
    uint64_t v2 = this[1].OSObject::OSObjectInterface::__vftable;
  }
  if (LODWORD(v2[399].free))
  {
    AppleBCMWLANCore::sendTxDCSlice1Ant0StatsCoreAnalytics(this);
    uint64_t v2 = this[1].OSObject::OSObjectInterface::__vftable;
  }
  v2[404].free = 0;
  double result = 0.0;
  *(_OWORD *)&v2[402].free = 0u;
  *(_OWORD *)&v2[403].free = 0u;
  *(_OWORD *)&v2[400].free = 0u;
  *(_OWORD *)&v2[401].free = 0u;
  *(_OWORD *)&v2[399].free = 0u;
  return result;
}

double AppleBCMWLANCore::collectSCTxBlankingSummary(IOService *this)
{
  uint64_t v2 = this[1].OSObject::OSObjectInterface::__vftable;
  free = (AppleBCMWLANBssManager *)v2[344].free;
  if (free) {
    AppleBCMWLANIOReportingCore::reportSCTxBlankingStats(free, (unsigned int *)&v2[1112]);
  }
  AppleBCMWLANCore::sendSCTxBlankingStatsEventCoreAnalytics(this);
  uint64_t v4 = this[1].OSObject::OSObjectInterface::__vftable;
  v4[1120].init = 0;
  double result = 0.0;
  v4[1119] = 0u;
  v4[1118] = 0u;
  v4[1117] = 0u;
  v4[1116] = 0u;
  v4[1115] = 0u;
  v4[1114] = 0u;
  v4[1113] = 0u;
  v4[1112] = 0u;
  unint64_t v6 = this[1].OSObject::OSObjectInterface::__vftable;
  v6[1120].init = 0;
  v6[1119] = 0u;
  v6[1118] = 0u;
  v6[1117] = 0u;
  v6[1116] = 0u;
  v6[1115] = 0u;
  v6[1114] = 0u;
  v6[1113] = 0u;
  v6[1112] = 0u;
  LODWORD(this[1].OSObject::OSObjectInterface::__vftable[1112].init) = 25;
  LODWORD(this[1].OSObject::OSObjectInterface::__vftable[1114].init) = 40;
  LODWORD(this[1].OSObject::OSObjectInterface::__vftable[1116].init) = 70;
  LODWORD(this[1].OSObject::OSObjectInterface::__vftable[1118].init) = 100;
  return result;
}

uint64_t AppleBCMWLANCore::configureLPASEntry(AppleBCMWLANCore *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      long long v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v8, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "configureLPASEntry", 44266, "configureLPASEntry");
    }
  }
  uint64_t v2 = AppleBCMWLANCore::configureLPASMode(this, 1);
  if (v2)
  {
    uint64_t v3 = v2;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v4, "[dk] %s@%d:Failed to enable LPAS mode in F/W\n");
      }
    }
  }
  else
  {
    uint64_t v5 = AppleBCMWLANCore::configurePktFilters((IOService *)this);
    if (v5)
    {
      uint64_t v3 = v5;
      AppleBCMWLANCore::unConfigurePktFilters((IOService *)this);
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v6, "[dk] %s@%d:Failed to Configure LPAS Packet Filters\n");
        }
      }
    }
    else
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logNoticeIf(v9, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "configureLPASEntry", 44368, "configureLPASEntry");
        }
      }
      return 0;
    }
  }
  return v3;
}

uint64_t AppleBCMWLANCore::configureWoWEntry(IOService *this)
{
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      long long v7 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logNoticeIf(v7, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "configureWoWEntry", 44390, "configureWoWEntry");
    }
  }
  int v2 = AppleBCMWLANKeepAliveOffload::configureKeepAlives((AppleBCMWLANKeepAliveOffload *)this[1].OSObject::OSObjectInterface::__vftable[347].init);
  if (v2)
  {
    if (v2 == -536870201)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v3 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v3, "[dk] %s@%d:Configuring NAT/CarPlay/VPN Keep-Alives Not Supported\n");
        }
      }
    }
    else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v9 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v9, "[dk] %s@%d:Failed to configure NAT/CarPlay/VPN Keep Alives\n");
      }
    }
  }
  uint64_t v4 = AppleBCMWLANCore::configurePktFilters(this);
  if (v4)
  {
    AppleBCMWLANCore::unConfigurePktFilters(this);
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v5, "[dk] %s@%d:Failed to Configure Pkt Filters\n", "configureWoWEntry", 44435);
      }
    }
  }
  else if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      long long v8 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logNoticeIf(v8, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "configureWoWEntry", 44489, "configureWoWEntry");
    }
  }
  return v4;
}

uint64_t AppleBCMWLANCore::isMIMOPowerSaveEnabled(AppleBCMWLANCore *this)
{
  uint64_t result = AppleBCMWLANCore::featureFlagIsBitSet(this, 44);
  if (result)
  {
    uint64_t v3 = *(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472);
    return AppleBCMWLANConfigManager::isMIMOPSSupported(v3);
  }
  return result;
}

uint64_t AppleBCMWLANCore::configureAssociatedSleepEntryParams(AppleBCMWLANCore *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      long long v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v8, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "configureAssociatedSleepEntryParams", 44497, "configureAssociatedSleepEntryParams");
    }
  }
  int v19 = 1;
  int v2 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  unint64_t v17 = &v19;
  uint64_t v18 = 4;
  uint64_t v3 = AppleBCMWLANCommander::runIOVarSet(v2, (uint64_t)"nolinkup", (uint64_t)&v17, 0, 0);
  if (v3)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        unint64_t v12 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v3);
        CCLogStream::logAlert(v11, "[dk] %s@%d: Unable to turn on Link Up filtering: %s\n", "configureAssociatedSleepEntryParams", 44504, v12);
      }
    }
  }
  AppleBCMWLANCore::configureAvgRssiParamsForAssociatedSleepEntry(this);
  AppleBCMWLANCore::configureEventBitMaskForAssociatedSleep(this);
  AppleBCMWLANCore::resetClockDrifts((uint64_t)this);
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 39))
  {
    int v16 = 0;
    uint64_t v4 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    unint64_t v17 = &v16;
    uint64_t v18 = 4;
    uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"lq_max_bcn_thresh", (uint64_t)&v17, 0, 0);
    uint64_t v3 = v5;
    if (v5 != -469794537 && v5 != 0)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          int v14 = v16;
          unint64_t v15 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v3);
          CCLogStream::logAlert(v13, "[dk] %s@%d:Unable to set lq_max_bcn_thresh to %d: %s\n", "configureAssociatedSleepEntryParams", 44564, v14, v15);
        }
      }
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      unint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v9, "[dk] %s@%d: rval[0x%08x], fAssociatedbeforeSleep[%u] -> true, fPowerSaveMode[%u]\n", "configureAssociatedSleepEntryParams", 44580, v3, *(unsigned __int8 *)(*((void *)this + 9) + 776), *(_DWORD *)(*((void *)this + 9) + 6732));
    }
  }
  *(unsigned char *)(*((void *)this + 9) + 776) = 1;
  *(unsigned char *)(*((void *)this + 9) + 778) = 1;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      char v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v10, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "configureAssociatedSleepEntryParams", 44585, "configureAssociatedSleepEntryParams");
    }
  }
  return 0;
}

uint64_t AppleBCMWLANCore::configureLPASMode(AppleBCMWLANCore *this, int a2)
{
  int v24 = a2;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      unint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v12, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "configureLPASMode", 51185, "configureLPASMode");
    }
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 26)
    && (!AppleBCMWLANCore::featureFlagIsBitSet(this, 70)
     || (*(unsigned char *)(*((void *)this + 9) + 19657) & 4) == 0))
  {
    uint64_t v4 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 136))(v4))
    {
      uint64_t v5 = (_DWORD *)IOMallocZeroTyped();
      if (!v5)
      {
        uint64_t v7 = 0;
        goto LABEL_29;
      }
      unint64_t v6 = v5;
      *uint64_t v5 = a2;
      unint64_t v21 = this;
      uint64_t v22 = (uint64_t)AppleBCMWLANCore::handleSetLpasAsyncCallBack;
      unint64_t v23 = v5;
      uint64_t v7 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"lpas");
      if (v7) {
        IOFree(v6, 4uLL);
      }
    }
    else
    {
      long long v8 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
      unint64_t v21 = (AppleBCMWLANCore *)&v24;
      uint64_t v22 = 4;
      uint64_t v7 = AppleBCMWLANCommander::runIOVarSet(v8, (uint64_t)"lpas", (uint64_t)&v21, 0, 0);
    }
    uint64_t v9 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (v7)
    {
      if (v9)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unint64_t v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          uint64_t v18 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v7);
          CCLogStream::logAlert(v17, "[dk] %s@%d: Failure to configure LPAS in FW: %s\n", "configureLPASMode", 51214, v18);
        }
      }
      uint64_t v10 = *((void *)this + 9);
      goto LABEL_28;
    }
    if (v9)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        unint64_t v20 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, void))(*(void *)this + 112))(this, 0);
        CCLogStream::logAlert(v19, "[dk] %s@%d: LPAS request in FW: %s %d \n", "configureLPASMode", 51217, v20, v24);
      }
    }
    uint64_t v10 = *((void *)this + 9);
    if (v24 != 1)
    {
      uint64_t v7 = 0;
LABEL_28:
      atomic_fetch_and((atomic_uint *volatile)(v10 + 10388), 0xFF7FFFFF);
      goto LABEL_29;
    }
    uint64_t v7 = 0;
    atomic_fetch_or((atomic_uint *volatile)(v10 + 10388), 0x800000u);
LABEL_29:
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logNoticeIf(v16, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "configureLPASMode", 51225, "configureLPASMode");
      }
    }
    return v7;
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      unint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      int IsBitSet = AppleBCMWLANCore::featureFlagIsBitSet(this, 26);
      int v15 = AppleBCMWLANCore::featureFlagIsBitSet(this, 70);
      CCLogStream::logAlert(v13, "[dk] %s@%d: rval[0x%08x], supported[%u] concurrency[%u] softAP[%u] fLPASEnabledBeforeSleep[%u] fPowerSaveMode[%u]\n", "configureLPASMode", 51190, 0, IsBitSet, v15, (*(unsigned __int8 *)(*((void *)this + 9) + 19657) >> 2) & 1, *(unsigned __int8 *)(*((void *)this + 9) + 777), *(_DWORD *)(*((void *)this + 9) + 6732));
    }
  }
  return 0;
}

uint64_t AppleBCMWLANCore::configurePktFilters(IOService *this)
{
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      OSNumberPtr v55 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logNoticeIf(v55, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "configurePktFilters", 50800, "configurePktFilters");
    }
  }
  if (IO80211BssManager::isAssociated((IO80211BssManager *)this[1].OSObject::OSObjectInterface::__vftable[340].init))
  {
    int v2 = (_DWORD *)IOMallocZeroData();
    if (!v2)
    {
      uint64_t v4 = 3758097085;
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v57 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v57, "[dk] %s@%d:Failed to allocate packet filter buffer\n", "configurePktFilters", 50810);
        }
      }
      goto LABEL_17;
    }
    uint64_t PacketFilterData = IO80211InfraInterface::getPacketFilterData();
    if (PacketFilterData)
    {
      uint64_t v4 = PacketFilterData;
      if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
        goto LABEL_17;
      }
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (!CCLogStream::shouldLog()) {
        goto LABEL_17;
      }
      OSNumberPtr v37 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      uint64_t v79 = 50823;
      OSNumberPtr v35 = "[dk] %s@%d:Failed to get packet filter data\n";
      goto LABEL_157;
    }
    int v6 = v2[1];
    LODWORD(this[1].OSObject::OSObjectInterface::__vftable[593].free) = *v2;
    HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[593].free) = 0;
    LODWORD(this[1].OSObject::OSObjectInterface::__vftable[628].init) = v6;
    uint64_t v7 = this[1].OSObject::OSObjectInterface::__vftable;
    if (LODWORD(v7[628].init))
    {
      unint64_t v8 = 0;
      unint64_t v9 = 0;
      do
      {
        v7[v8 / 4 + 596] = *(OSObjectInterface_vtbl *)&v2[v8 + 2];
        ++v9;
        uint64_t v7 = this[1].OSObject::OSObjectInterface::__vftable;
        v8 += 4;
      }
      while (v9 < LODWORD(v7[628].init));
    }
    v7[627] = 0u;
    v7[626] = 0u;
    v7[625] = 0u;
    v7[624] = 0u;
    v7[623] = 0u;
    v7[622] = 0u;
    v7[621] = 0u;
    v7[620] = 0u;
    v7[619] = 0u;
    v7[618] = 0u;
    v7[617] = 0u;
    v7[616] = 0u;
    v7[615] = 0u;
    v7[614] = 0u;
    v7[613] = 0u;
    v7[612] = 0u;
    uint64_t v10 = this[1].OSObject::OSObjectInterface::__vftable;
    unsigned int free = v10[593].free;
    unsigned int free_high = HIDWORD(v10[593].free);
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v83 = HIBYTE(free);
        unint64_t v84 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t v58 = this[1].OSObject::OSObjectInterface::__vftable;
        init = (AppleBCMWLANConfigManager *)v58[342].init;
        if (init)
        {
          int v82 = AppleBCMWLANConfigManager::wompEnabled(init);
          uint64_t v58 = this[1].OSObject::OSObjectInterface::__vftable;
        }
        else
        {
          int v82 = 0;
        }
        int v60 = BYTE2(v58[645].init);
        int v61 = free;
        int v62 = BYTE1(free);
        int v63 = BYTE2(free);
        int v64 = (int)v58[628].init;
        int isIPv6AlreadyProgrammed = AppleBCMWLANCore::isIPv6AlreadyProgrammed((AppleBCMWLANCore *)this);
        CCLogStream::logAlert(v84, "[dk] %s@%d: WOMP:[%u], configured[%u], wow ipv4[%u.%u.%u.%u], prog ipv4[%u.%u.%u.%u], fWoWIPv6AddressCount[%u] isIPv6AlreadyProgrammed[%u]\n", "configurePktFilters", 50839, v82, v60, v61, v62, v63, v83, free_high, BYTE1(free_high), BYTE2(free_high), HIBYTE(free_high), v64, isIPv6AlreadyProgrammed);
      }
    }
    int IsBitSet = AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 31);
    int v14 = this[1].OSObject::OSObjectInterface::__vftable;
    if (IsBitSet)
    {
      if (AppleBCMWLANConfigManager::wompEnabled((AppleBCMWLANConfigManager *)v14[342].init)) {
        goto LABEL_53;
      }
      if (LODWORD(this[1].OSObject::OSObjectInterface::__vftable[593].free) == HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[593].free))
      {
        int v15 = 0;
      }
      else
      {
        AppleBCMWLANCore::deleteIPv4PktFilters((AppleBCMWLANCore *)this);
        uint64_t v18 = AppleBCMWLANCore::configureComplexFilters((AppleBCMWLANCore *)this, 0x66u, 0);
        if (v18)
        {
          uint64_t v4 = v18;
          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              int v19 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              CCLogStream::logAlert(v19, "[dk] %s@%d:Failed to Configure IPv4 Pkt Filter ID %d\n");
            }
          }
          goto LABEL_17;
        }
        int v15 = 1;
      }
      if (!AppleBCMWLANCore::isIPv6AlreadyProgrammed((AppleBCMWLANCore *)this))
      {
        AppleBCMWLANCore::deleteIPv6PktFilters((AppleBCMWLANCore *)this);
        if (AppleBCMWLANCore::configureMaxPktFilter((AppleBCMWLANCore *)this))
        {
          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              OSNumberPtr v73 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              CCLogStream::logAlert(v73, "[dk] %s@%d: Failed to Configure Max Num of Pkt Filters\n", "configurePktFilters", 50862);
            }
          }
        }
        if (LODWORD(this[1].OSObject::OSObjectInterface::__vftable[628].init))
        {
          int v20 = 0;
          while (1)
          {
            uint64_t v21 = AppleBCMWLANCore::configureComplexFilters((AppleBCMWLANCore *)this, 0x6Bu, v20);
            if (v21) {
              break;
            }
            if (LODWORD(this[1].OSObject::OSObjectInterface::__vftable[628].init) <= ++v20) {
              goto LABEL_49;
            }
          }
          uint64_t v4 = v21;
          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              OSStringPtr v54 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              CCLogStream::logAlert(v54, "[dk] %s@%d:Failed to Configure IPv6 Pkt Filter %d\n");
            }
          }
          goto LABEL_17;
        }
LABEL_49:
        v15 |= 2u;
      }
      AppleBCMWLANCore::deleteEapolFilter((AppleBCMWLANCore *)this);
      AppleBCMWLANCore::configureEapolFilter((AppleBCMWLANCore *)this);
      if (!v15)
      {
LABEL_53:
        int v22 = AppleBCMWLANConfigManager::wompEnabled((AppleBCMWLANConfigManager *)this[1].OSObject::OSObjectInterface::__vftable[342].init);
        unint64_t v23 = this[1].OSObject::OSObjectInterface::__vftable;
        if (v22 && !BYTE2(v23[645].init))
        {
          AppleBCMWLANCore::deleteMagicPktFilters((AppleBCMWLANCore *)this);
          uint64_t v30 = AppleBCMWLANCore::configureMagicPktFilter(this, v29, 0, 14);
          if (v30)
          {
            uint64_t v4 = v30;
            if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog())
              {
                unint64_t v31 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                CCLogStream::logAlert(v31, "[dk] %s@%d:Failed to Configure Magic Packet Filter %d at offset %d\n");
              }
            }
            goto LABEL_17;
          }
          BYTE2(this[1].OSObject::OSObjectInterface::__vftable[645].init) = 1;
          unint64_t v23 = this[1].OSObject::OSObjectInterface::__vftable;
        }
        if (!BYTE2(v23[645].init))
        {
          AppleBCMWLANCore::deleteMagicPktFilters((AppleBCMWLANCore *)this);
          unint64_t v25 = this[1].OSObject::OSObjectInterface::__vftable;
          if (SLODWORD(v25[1231].free) >= -1)
          {
            int v26 = 104;
            while (1)
            {
              int v27 = v26 - 104;
              uint64_t v28 = AppleBCMWLANCore::configureMagicPktFilter(this, v24, v26 - 104, 0);
              if (v28) {
                break;
              }
              unint64_t v25 = this[1].OSObject::OSObjectInterface::__vftable;
              ++v26;
              if (v27 > SLODWORD(v25[1231].free)) {
                goto LABEL_60;
              }
            }
            uint64_t v4 = v28;
            if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog())
              {
                OSNumberPtr v46 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                CCLogStream::logAlert(v46, "[dk] %s@%d:Failed to configure Magic Packet Filter %d\n");
              }
            }
            goto LABEL_17;
          }
LABEL_60:
          BYTE2(v25[645].init) = 1;
        }
        if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 31))
        {
          if (BYTE1(this[1].OSObject::OSObjectInterface::__vftable[48].free))
          {
            AppleBCMWLANCore::ignoreUnicastPackets((AppleBCMWLANCore *)this);
          }
          else
          {
            if (!AppleBCMWLANCore::getActivePortsFromNetworkStack((AppleBCMWLANCore *)this)
              && AppleBCMWLANCore::configureActivePortsInToChip(this, 286326785))
            {
              if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
              {
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v75 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  CCLogStream::logAlert(v75, "[dk] %s@%d:Failed to configure Active Ports, Disable Port Filtering and rely on IP Filtering\n", "configurePktFilters", 50943);
                }
              }
              LOWORD(this[1].OSObject::OSObjectInterface::__vftable[644].free) = 0;
            }
            if (!LOWORD(this[1].OSObject::OSObjectInterface::__vftable[644].free)) {
              AppleBCMWLANCore::configureActivePortsInToChip(this, 286326786);
            }
          }
        }
        if (AppleBCMWLANConfigManager::wompEnabled((AppleBCMWLANConfigManager *)this[1].OSObject::OSObjectInterface::__vftable[342].init))
        {
          uint64_t v4 = AppleBCMWLANCore::enablePacketFilters((AppleBCMWLANCore *)this, 104);
          uint64_t v32 = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (v4)
          {
            if (!v32) {
              goto LABEL_17;
            }
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (!CCLogStream::shouldLog()) {
              goto LABEL_17;
            }
            uint64_t v33 = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            uint64_t v80 = ((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v4);
            uint64_t v34 = 51039;
            goto LABEL_81;
          }
          if (v32)
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              OSStringPtr v69 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              CCLogStream::logAlert(v69, "[dk] %s@%d: WOMP Magic Packet filter enabled (ID=%d)  \n", "configurePktFilters", 51042, 104);
            }
          }
        }
        else
        {
          if (BYTE5(this[1].OSObject::OSObjectInterface::__vftable[628].init))
          {
            uint64_t v4 = AppleBCMWLANCore::enablePacketFilters((AppleBCMWLANCore *)this, 102);
            uint64_t v36 = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (v4)
            {
              if (!v36) {
                goto LABEL_17;
              }
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (!CCLogStream::shouldLog()) {
                goto LABEL_17;
              }
              uint64_t v33 = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              uint64_t v79 = 50961;
              uint64_t v80 = ((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v4);
              OSNumberPtr v35 = "[dk] %s@%d: Unable to turn on IP packet filter: %s\n";
              goto LABEL_87;
            }
            if (v36)
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog())
              {
                unint64_t v70 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                CCLogStream::logAlert(v70, "[dk] %s@%d: Unicast IPv4 filter enabled (ID=%d)\n", "configurePktFilters", 50964, 102);
              }
            }
          }
          uint64_t v4 = AppleBCMWLANCore::configureARPOffload((AppleBCMWLANCore *)this, 1);
          uint64_t v39 = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (v4)
          {
            if (v39)
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog())
              {
                OSNumberPtr v40 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                CCLogStream::logAlert(v40, "[dk] %s@%d: Unable to turn on ARP Offload\n");
              }
            }
            goto LABEL_17;
          }
          if (v39)
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              OSNumberPtr v71 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              CCLogStream::logAlert(v71, "[dk] %s@%d: ARP Offload enabled\n", "configurePktFilters", 50974);
            }
          }
          if (!AppleBCMWLANCore::configureICMP((AppleBCMWLANCore *)this, 1))
          {
            if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog())
              {
                uint64_t v76 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                CCLogStream::logAlert(v76, "[dk] %s@%d: Enabled the 'ICMP' packet filter\n", "configurePktFilters", 50993);
              }
            }
          }
          uint64_t v4 = AppleBCMWLANCore::configureNeighbourDiscovery((AppleBCMWLANCore *)this, 1);
          if (!v4)
          {
            if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog())
              {
                uint64_t v77 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                CCLogStream::logAlert(v77, "[dk] %s@%d: Neighbor Discovery Offload Enabled in F/W\n", "configurePktFilters", 51000);
              }
            }
          }
          if (BYTE4(this[1].OSObject::OSObjectInterface::__vftable[628].init))
          {
            if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog())
              {
                __int16 v72 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                CCLogStream::logAlert(v72, "[dk] %s@%d:Enabled IPv6 Pkt Filters\n", "configurePktFilters", 51004);
              }
            }
          }
          OSNumberPtr v41 = this[1].OSObject::OSObjectInterface::__vftable;
          if (BYTE4(v41[628].init))
          {
            int v42 = 107;
            while (1)
            {
              uint64_t v4 = AppleBCMWLANCore::enablePacketFilters((AppleBCMWLANCore *)this, v42);
              uint64_t v43 = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (v4) {
                break;
              }
              if (v43)
              {
                ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                if (CCLogStream::shouldLog())
                {
                  OSStringPtr v45 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                  CCLogStream::logNotice(v45, "(ID=%d) \n", v42);
                }
              }
              OSNumberPtr v41 = this[1].OSObject::OSObjectInterface::__vftable;
              unsigned int v44 = v42 - 106;
              ++v42;
              if (v44 >= BYTE4(v41[628].init))
              {
                uint64_t v4 = 0;
                goto LABEL_132;
              }
            }
            if (!v43) {
              goto LABEL_17;
            }
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (!CCLogStream::shouldLog()) {
              goto LABEL_17;
            }
            uint64_t v33 = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            uint64_t v79 = 51009;
            uint64_t v80 = ((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v4);
            OSNumberPtr v35 = "[dk] %s@%d: Unable to turn on IPv6 packet filter: %s\n";
            goto LABEL_87;
          }
LABEL_132:
          if (SLODWORD(v41[1231].free) >= -1)
          {
            int v47 = -1;
            while (1)
            {
              uint64_t v48 = AppleBCMWLANCore::enablePacketFilters((AppleBCMWLANCore *)this, v47 + 105);
              if (v48) {
                break;
              }
              if (++v47 > SLODWORD(this[1].OSObject::OSObjectInterface::__vftable[1231].free))
              {
                uint64_t v4 = 0;
                goto LABEL_137;
              }
            }
            uint64_t v4 = v48;
            if (!((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
              goto LABEL_17;
            }
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (!CCLogStream::shouldLog()) {
              goto LABEL_17;
            }
            uint64_t v33 = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            uint64_t v80 = ((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v4);
            uint64_t v34 = 51020;
LABEL_81:
            uint64_t v79 = v34;
            OSNumberPtr v35 = "[dk] %s@%d: Unable to turn on Magic packet filter: %s\n";
LABEL_87:
            OSNumberPtr v37 = (CCLogStream *)v33;
LABEL_157:
            CCLogStream::logAlert(v37, v35, "configurePktFilters", v79, v80, v81);
            goto LABEL_17;
          }
LABEL_137:
          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              __int16 v74 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              CCLogStream::logAlert(v74, "[dk] %s@%d:Enabled WOMP filter  (ID=%d) (ID=%d)\n", "configurePktFilters", 51024, 104, 105);
            }
          }
          OSNumberPtr v49 = this[1].OSObject::OSObjectInterface::__vftable;
          if (!LODWORD(v49[1227].free) || !HIBYTE(v49[628].init))
          {
LABEL_92:
            if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              if (CCLogStream::shouldLog())
              {
                OSNumberPtr v38 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
                CCLogStream::logNoticeIf(v38, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "configurePktFilters", 51045, "configurePktFilters");
              }
            }
            goto LABEL_17;
          }
          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v78 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              CCLogStream::logAlert(v78, "[dk] %s@%d:%s: Enable WoWEapolFilter\n", "configurePktFilters", 51028, "configurePktFilters");
            }
          }
          int v50 = AppleBCMWLANCore::enablePacketFilters((AppleBCMWLANCore *)this, 101);
          BOOL v51 = v50 != 0;
          if (v50)
          {
            if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
            {
              ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              uint64_t v4 = 1;
              if (!CCLogStream::shouldLog()) {
                goto LABEL_17;
              }
              OSNumberPtr v52 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              OSNumberPtr v53 = (const char *)((uint64_t (*)(IOService *, BOOL))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v51);
              CCLogStream::logAlert(v52, "[dk] %s@%d: Unable to turn on EAPOL filter: %s\n", "configurePktFilters", 51030, v53);
            }
            uint64_t v4 = 1;
LABEL_17:
            IOFreeData();
            return v4;
          }
        }
        uint64_t v4 = 0;
        goto LABEL_92;
      }
    }
    else
    {
      if (LODWORD(v14[593].free) == HIDWORD(v14[593].free)
        || (AppleBCMWLANConfigManager::wompEnabled((AppleBCMWLANConfigManager *)v14[342].init) & 1) != 0)
      {
        goto LABEL_53;
      }
      AppleBCMWLANCore::deleteIPv4PktFilters((AppleBCMWLANCore *)this);
      uint64_t v16 = AppleBCMWLANCore::configureLegacyFilters((AppleBCMWLANCore *)this);
      if (v16)
      {
        uint64_t v4 = v16;
        if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
        {
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (CCLogStream::shouldLog())
          {
            unint64_t v17 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            CCLogStream::logAlert(v17, "[dk] %s@%d:Failed to Configure Legacy Unicast Filter\n");
          }
        }
        goto LABEL_17;
      }
      HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[593].free) = this[1].OSObject::OSObjectInterface::__vftable[593].free;
      int v15 = 1;
    }
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v66 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        OSNumberPtr v67 = "IPv6";
        if (v15 == 1) {
          OSNumberPtr v67 = "IPv4";
        }
        if (v15 == 3) {
          OSNumberPtr v68 = "IPv4 & IPv6";
        }
        else {
          OSNumberPtr v68 = v67;
        }
        CCLogStream::logAlert(v66, "[dk] %s@%d:Added %s Filters\n", "configurePktFilters", 50898, v68);
      }
    }
    goto LABEL_53;
  }
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      OSNumberPtr v56 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logAlert(v56, "[dk] %s@%d:Lost Link while configuring Packet Filters\n", "configurePktFilters", 50803);
    }
  }
  return 3758096385;
}

uint64_t AppleBCMWLANCore::unConfigurePktFilters(IOService *this)
{
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v16 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logNoticeIf(v16, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "unConfigurePktFilters", 51053, "unConfigurePktFilters");
    }
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 31))
  {
    LOWORD(this[1].OSObject::OSObjectInterface::__vftable[644].free) = 0;
    uint64_t active = AppleBCMWLANCore::configureActivePortsInToChip(this, 572653569);
    if (active)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v3 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v3, "[dk] %s@%d:Failed to configure Active Ports\n", "unConfigurePktFilters", 51060);
        }
      }
    }
  }
  else
  {
    uint64_t active = 0;
  }
  if (AppleBCMWLANConfigManager::wompEnabled((AppleBCMWLANConfigManager *)this[1].OSObject::OSObjectInterface::__vftable[342].init))
  {
    if (BYTE6(this[1].OSObject::OSObjectInterface::__vftable[628].init))
    {
      uint64_t active = AppleBCMWLANCore::disablePacketFilters((AppleBCMWLANCore *)this, 104);
      if (active)
      {
        if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
        {
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v21 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            int v22 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, active);
            CCLogStream::logAlert(v21, "[dk] %s@%d: Unable to turn off magic packet filter: %s\n", "unConfigurePktFilters", 51116, v22);
          }
        }
      }
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          int v4 = 51118;
LABEL_61:
          int v19 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logInfo(v19, "[dk] %s@%d: Disabled Magic packet filter\n", "unConfigurePktFilters", v4);
        }
      }
    }
  }
  else
  {
    if (BYTE5(this[1].OSObject::OSObjectInterface::__vftable[628].init))
    {
      uint64_t v5 = AppleBCMWLANCore::disablePacketFilters((AppleBCMWLANCore *)this, 102);
      if (v5)
      {
        uint64_t v6 = v5;
        if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
        {
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (CCLogStream::shouldLog())
          {
            unint64_t v23 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            unsigned int v24 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v6);
            CCLogStream::logAlert(v23, "[dk] %s@%d: Unable to turn off IPv4 packet filter: %s\n", "unConfigurePktFilters", 51068, v24);
          }
        }
      }
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          int v20 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logInfo(v20, "[dk] %s@%d: Disabled IPv4 packet filter\n", "unConfigurePktFilters", 51070);
        }
      }
    }
    AppleBCMWLANCore::configureARPOffload((AppleBCMWLANCore *)this, 0);
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v18 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logInfo(v18, "[dk] %s@%d: Disabled ARP Offload:\n", "unConfigurePktFilters", 51077);
      }
    }
    uint64_t active = AppleBCMWLANCore::configureICMP((AppleBCMWLANCore *)this, 0);
    if (!active)
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          int v26 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logInfo(v26, "[dk] %s@%d: Disabled the 'ICMP' packet filter\n", "unConfigurePktFilters", 51082);
        }
      }
    }
    uint64_t v7 = this[1].OSObject::OSObjectInterface::__vftable;
    if (BYTE4(v7[628].init))
    {
      int v8 = 107;
      do
      {
        uint64_t active = AppleBCMWLANCore::disablePacketFilters((AppleBCMWLANCore *)this, v8);
        if (active)
        {
          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v10 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              unint64_t v11 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, active);
              CCLogStream::logAlert(v10, "[dk] %s@%d: Unable to turn off IPv6 packet filter: %s\n", "unConfigurePktFilters", 51088, v11);
            }
          }
        }
        uint64_t v7 = this[1].OSObject::OSObjectInterface::__vftable;
        unsigned int v9 = v8 - 106;
        ++v8;
      }
      while (v9 < BYTE4(v7[628].init));
    }
    if (LODWORD(v7[1227].free) && HIBYTE(v7[628].init))
    {
      if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          unint64_t v25 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logAlert(v25, "[dk] %s@%d:Disabling WoWEapolFiter\n", "unConfigurePktFilters", 51093);
        }
      }
      AppleBCMWLANCore::disablePacketFilters((AppleBCMWLANCore *)this, 101);
    }
    AppleBCMWLANCore::getNeighbourDiscoveryStats((AppleBCMWLANCore *)this);
    AppleBCMWLANCore::configureNeighbourDiscovery((AppleBCMWLANCore *)this, 0);
    if (BYTE6(this[1].OSObject::OSObjectInterface::__vftable[628].init))
    {
      unsigned int v12 = 0;
      do
      {
        uint64_t active = AppleBCMWLANCore::disablePacketFilters((AppleBCMWLANCore *)this, v12 + 104);
        if (active)
        {
          if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
          {
            ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (CCLogStream::shouldLog())
            {
              unint64_t v13 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
              int v14 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, active);
              CCLogStream::logAlert(v13, "[dk] %s@%d: Unable to turn off magic packet filter(%d): %s\n", "unConfigurePktFilters", 51108, v12 + 104, v14);
            }
          }
        }
        ++v12;
      }
      while (v12 < BYTE6(this[1].OSObject::OSObjectInterface::__vftable[628].init));
    }
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        int v4 = 51111;
        goto LABEL_61;
      }
    }
  }
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      unint64_t v17 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logNoticeIf(v17, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "unConfigurePktFilters", 51122, "unConfigurePktFilters");
    }
  }
  return active;
}

AppleBCMWLANCore ***AppleBCMWLANCore::initialize6GCapabilities(AppleBCMWLANCore *this)
{
  uint64_t result = *(AppleBCMWLANCore ****)(*((void *)this + 9) + 5472);
  if (result)
  {
    int v3 = AppleBCMWLANConfigManager::determine6GConfiguration(result);
    uint64_t result = (AppleBCMWLANCore ***)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (v3)
    {
      if (result)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t result = (AppleBCMWLANCore ***)CCLogStream::shouldLog();
        if (result)
        {
          int v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          return (AppleBCMWLANCore ***)CCLogStream::logAlertIf(v4, 0x4000uLL, "[dk] %s@%d:%s WiFiRoam : 6GHz configuration IS allowed\n");
        }
      }
    }
    else if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t result = (AppleBCMWLANCore ***)CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        return (AppleBCMWLANCore ***)CCLogStream::logAlertIf(v5, 0x4000uLL, "[dk] %s@%d:%s WiFiRoam : 6GHz configuration not allowed\n");
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::configureAvgRssiParamsForAssociatedSleepEntry(AppleBCMWLANCore *this)
{
  if (IO80211BssManager::isAssociatedToAdhoc(*(IO80211BssManager **)(*((void *)this + 9) + 5440)))
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logNotice(v8, "[dk] %s@%d:Associated to IBSS, Bailout\n", "configureAvgRssiParamsForAssociatedSleepEntry", 56505);
      }
    }
    return 0;
  }
  else
  {
    int v15 = 516;
    uint64_t v3 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 136))(v3))
    {
      unsigned int v12 = (int *)this;
      uint64_t v13 = (uint64_t)AppleBCMWLANCore::handleConfigureAvgRssiParamsAsyncCallback;
      uint64_t v14 = 0;
      uint64_t v4 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"rssi_win");
    }
    else
    {
      uint64_t v5 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
      unsigned int v12 = &v15;
      uint64_t v13 = 4;
      uint64_t v4 = AppleBCMWLANCommander::runIOVarSet(v5, (uint64_t)"rssi_win", (uint64_t)&v12, 0, 0);
    }
    uint64_t v2 = v4;
    if (v4 != -469794537 && v4 != 0)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          int v10 = v15;
          unint64_t v11 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v2);
          CCLogStream::logAlert(v9, "[dk] %s@%d:Unable to set rssi window to %d: %s\n", "configureAvgRssiParamsForAssociatedSleepEntry", 56522, v10, v11);
        }
      }
    }
  }
  return v2;
}

uint64_t AppleBCMWLANCore::configureEventBitMaskForAssociatedSleep(AppleBCMWLANCore *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      long long v94 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v94, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "configureEventBitMaskForAssociatedSleep", 51734, "configureEventBitMaskForAssociatedSleep");
    }
  }
  IOLockLock(*(IOLock **)(*((void *)this + 9) + 1200));
  uint64_t v2 = (_OWORD *)*((void *)this + 9);
  uint64_t v3 = (_OWORD *)((char *)v2 + 1139);
  uint64_t v2 = (_OWORD *)((char *)v2 + 1112);
  _OWORD *v3 = *v2;
  *(_OWORD *)((char *)v3 + 11) = *(_OWORD *)((char *)v2 + 11);
  IOLockUnlock(*(IOLock **)(*((void *)this + 9) + 1200));
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 34))
  {
    uint64_t v4 = *((void *)this + 9);
    uint64_t v5 = *(IOLock **)(v4 + 1200);
    IOLockLock(v5);
    *(unsigned char *)(v4 + 1134) &= ~0x10u;
    IOLockUnlock(v5);
    uint64_t v6 = *((void *)this + 9);
    uint64_t v7 = *(IOLock **)(v6 + 1200);
    IOLockLock(v7);
    *(unsigned char *)(v6 + 1133) &= ~0x10u;
    IOLockUnlock(v7);
  }
  uint64_t v8 = *((void *)this + 9);
  unsigned int v9 = *(IOLock **)(v8 + 1200);
  IOLockLock(v9);
  *(unsigned char *)(v8 + 1118) &= ~0x10u;
  IOLockUnlock(v9);
  uint64_t v10 = *((void *)this + 9);
  unint64_t v11 = *(IOLock **)(v10 + 1200);
  IOLockLock(v11);
  *(unsigned char *)(v10 + 1133) &= ~8u;
  IOLockUnlock(v11);
  uint64_t v12 = *((void *)this + 9);
  uint64_t v13 = *(IOLock **)(v12 + 1200);
  IOLockLock(v13);
  *(unsigned char *)(v12 + 1112) &= ~8u;
  IOLockUnlock(v13);
  uint64_t v14 = *((void *)this + 9);
  int v15 = *(IOLock **)(v14 + 1200);
  IOLockLock(v15);
  *(unsigned char *)(v14 + 1119) &= ~1u;
  IOLockUnlock(v15);
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 71))
  {
    uint64_t v16 = *((void *)this + 9);
    unint64_t v17 = *(IOLock **)(v16 + 1200);
    IOLockLock(v17);
    *(unsigned char *)(v16 + 1135) &= ~1u;
    IOLockUnlock(v17);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 79))
  {
    uint64_t v18 = *((void *)this + 9);
    int v19 = *(IOLock **)(v18 + 1200);
    IOLockLock(v19);
    *(unsigned char *)(v18 + 1135) &= ~0x40u;
    IOLockUnlock(v19);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 92))
  {
    uint64_t v20 = *((void *)this + 9);
    uint64_t v21 = *(IOLock **)(v20 + 1200);
    IOLockLock(v21);
    *(unsigned char *)(v20 + 1136) &= ~0x80u;
    IOLockUnlock(v21);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 33))
  {
    uint64_t v22 = *((void *)this + 9);
    unint64_t v23 = *(IOLock **)(v22 + 1200);
    IOLockLock(v23);
    *(unsigned char *)(v22 + 1127) &= ~0x10u;
    IOLockUnlock(v23);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 34)
    && AppleBCMWLANCore::featureFlagIsBitSet(this, 76))
  {
    uint64_t v24 = *((void *)this + 9);
    unint64_t v25 = *(IOLock **)(v24 + 1200);
    IOLockLock(v25);
    *(unsigned char *)(v24 + 1135) &= ~0x20u;
    IOLockUnlock(v25);
  }
  uint64_t v26 = *((void *)this + 9);
  int v27 = *(IOLock **)(v26 + 1200);
  IOLockLock(v27);
  *(unsigned char *)(v26 + 1118) &= ~2u;
  IOLockUnlock(v27);
  uint64_t v28 = *((void *)this + 9);
  unsigned int v29 = *(IOLock **)(v28 + 1200);
  IOLockLock(v29);
  *(unsigned char *)(v28 + 1117) &= ~0x40u;
  IOLockUnlock(v29);
  uint64_t v30 = *((void *)this + 9);
  unint64_t v31 = *(IOLock **)(v30 + 1200);
  IOLockLock(v31);
  *(unsigned char *)(v30 + 1138) &= ~2u;
  IOLockUnlock(v31);
  uint64_t v32 = *((void *)this + 9);
  uint64_t v33 = *(IOLock **)(v32 + 1200);
  IOLockLock(v33);
  *(unsigned char *)(v32 + 1138) &= ~0x10u;
  IOLockUnlock(v33);
  uint64_t v34 = *((void *)this + 9);
  OSNumberPtr v35 = *(IOLock **)(v34 + 1200);
  IOLockLock(v35);
  *(unsigned char *)(v34 + 1117) &= ~0x40u;
  IOLockUnlock(v35);
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 115))
  {
    uint64_t v36 = *((void *)this + 9);
    OSNumberPtr v37 = *(IOLock **)(v36 + 1200);
    IOLockLock(v37);
    *(unsigned char *)(v36 + 1137) &= ~8u;
    IOLockUnlock(v37);
  }
  uint64_t v38 = *((void *)this + 9);
  uint64_t v39 = *(IOLock **)(v38 + 1200);
  IOLockLock(v39);
  *(unsigned char *)(v38 + 1116) &= ~0x20u;
  IOLockUnlock(v39);
  unsigned int v40 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 5400) + 368))() - 4377;
  if (v40 <= 0x16 && ((1 << v40) & 0x400C03) != 0)
  {
    uint64_t v41 = *((void *)this + 9);
    int v42 = *(IOLock **)(v41 + 1200);
    IOLockLock(v42);
    *(unsigned char *)(v41 + 1136) &= ~0x20u;
    IOLockUnlock(v42);
  }
  uint64_t v43 = *((void *)this + 9);
  unsigned int v44 = *(IOLock **)(v43 + 1200);
  IOLockLock(v44);
  *(unsigned char *)(v43 + 1116) &= ~1u;
  IOLockUnlock(v44);
  uint64_t v45 = *((void *)this + 9);
  OSNumberPtr v46 = *(IOLock **)(v45 + 1200);
  IOLockLock(v46);
  *(unsigned char *)(v45 + 1114) &= ~8u;
  IOLockUnlock(v46);
  uint64_t v47 = *((void *)this + 9);
  uint64_t v48 = *(IOLock **)(v47 + 1200);
  IOLockLock(v48);
  *(unsigned char *)(v47 + 1113) &= ~2u;
  IOLockUnlock(v48);
  uint64_t v49 = *((void *)this + 9);
  int v50 = *(IOLock **)(v49 + 1200);
  IOLockLock(v50);
  *(unsigned char *)(v49 + 1114) &= ~0x80u;
  IOLockUnlock(v50);
  uint64_t v51 = *((void *)this + 9);
  OSNumberPtr v52 = *(IOLock **)(v51 + 1200);
  IOLockLock(v52);
  *(unsigned char *)(v51 + 1130) &= ~0x40u;
  IOLockUnlock(v52);
  uint64_t v53 = *((void *)this + 9);
  OSStringPtr v54 = *(IOLock **)(v53 + 1200);
  IOLockLock(v54);
  *(unsigned char *)(v53 + 1125) &= ~0x20u;
  IOLockUnlock(v54);
  uint64_t v55 = *((void *)this + 9);
  OSNumberPtr v56 = *(IOLock **)(v55 + 1200);
  IOLockLock(v56);
  *(unsigned char *)(v55 + 1113) &= ~0x20u;
  IOLockUnlock(v56);
  uint64_t v57 = *((void *)this + 9);
  uint64_t v58 = *(IOLock **)(v57 + 1200);
  IOLockLock(v58);
  *(unsigned char *)(v57 + 1113) &= ~0x40u;
  IOLockUnlock(v58);
  uint64_t v59 = *((void *)this + 9);
  int v60 = *(IOLock **)(v59 + 1200);
  IOLockLock(v60);
  *(unsigned char *)(v59 + 1122) &= ~1u;
  IOLockUnlock(v60);
  uint64_t v61 = *((void *)this + 9);
  int v62 = *(IOLock **)(v61 + 1200);
  IOLockLock(v62);
  *(unsigned char *)(v61 + 1131) &= ~1u;
  IOLockUnlock(v62);
  uint64_t v63 = *((void *)this + 9);
  int v64 = *(IOLock **)(v63 + 1200);
  IOLockLock(v64);
  *(unsigned char *)(v63 + 1121) &= ~8u;
  IOLockUnlock(v64);
  uint64_t v65 = *((void *)this + 9);
  uint64_t v66 = *(IOLock **)(v65 + 1200);
  IOLockLock(v66);
  *(unsigned char *)(v65 + 1118) &= ~0x40u;
  IOLockUnlock(v66);
  uint64_t v67 = *((void *)this + 9);
  OSNumberPtr v68 = *(IOLock **)(v67 + 1200);
  IOLockLock(v68);
  *(unsigned char *)(v67 + 1127) &= ~0x40u;
  IOLockUnlock(v68);
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 34))
  {
    uint64_t v69 = *((void *)this + 9);
    unint64_t v70 = *(IOLock **)(v69 + 1200);
    IOLockLock(v70);
    *(unsigned char *)(v69 + 1135) &= ~0x80u;
    IOLockUnlock(v70);
  }
  AppleBCMWLANCore::addEventBit(this, 0x51u);
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 34)
    && AppleBCMWLANCore::featureFlagIsBitSet(this, 82))
  {
    uint64_t v71 = *((void *)this + 9);
    __int16 v72 = *(IOLock **)(v71 + 1200);
    IOLockLock(v72);
    *(unsigned char *)(v71 + 1135) &= ~0x10u;
    IOLockUnlock(v72);
  }
  if (AppleBCMWLANBGScanAdapter::isBGScanCacheRollOverEnabled(*(AppleBCMWLANBGScanAdapter **)(*((void *)this + 9)
                                                                                             + 5504)))
  {
    uint64_t v73 = *((void *)this + 9);
    __int16 v74 = *(IOLock **)(v73 + 1200);
    IOLockLock(v74);
    *(unsigned char *)(v73 + 1119) &= ~2u;
    IOLockUnlock(v74);
  }
  else
  {
    AppleBCMWLANCore::addEventBit(this, 0x39u);
  }
  unsigned int v75 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 5400) + 368))(*(void *)(*((void *)this + 9) + 5400))
      - 4357;
  if (v75 <= 0x2A && ((1 << v75) & 0x400C0300001) != 0)
  {
    uint64_t v76 = *((void *)this + 9);
    uint64_t v77 = *(IOLock **)(v76 + 1200);
    IOLockLock(v77);
    *(unsigned char *)(v76 + 1134) &= ~0x80u;
    IOLockUnlock(v77);
  }
  uint64_t v78 = *((void *)this + 9);
  uint64_t v79 = *(IOLock **)(v78 + 1200);
  IOLockLock(v79);
  *(unsigned char *)(v78 + 1120) &= ~0x20u;
  IOLockUnlock(v79);
  uint64_t v80 = *((void *)this + 9);
  uint64_t v81 = *(IOLock **)(v80 + 1200);
  IOLockLock(v81);
  *(unsigned char *)(v80 + 1115) &= ~4u;
  IOLockUnlock(v81);
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 95))
  {
    uint64_t v82 = *((void *)this + 9);
    unsigned int v83 = *(IOLock **)(v82 + 1200);
    IOLockLock(v83);
    *(unsigned char *)(v82 + 1137) &= ~1u;
    IOLockUnlock(v83);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 93))
  {
    uint64_t v84 = *((void *)this + 9);
    long long v85 = *(IOLock **)(v84 + 1200);
    IOLockLock(v85);
    *(unsigned char *)(v84 + 1137) &= ~0x80u;
    IOLockUnlock(v85);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 101))
  {
    uint64_t v86 = *((void *)this + 9);
    long long v87 = *(IOLock **)(v86 + 1200);
    IOLockLock(v87);
    *(unsigned char *)(v86 + 1135) &= ~8u;
    IOLockUnlock(v87);
  }
  IOLockLock(*(IOLock **)(*((void *)this + 9) + 1200));
  long long v88 = (_OWORD *)*((void *)this + 9);
  long long v89 = (_OWORD *)((char *)v88 + 1166);
  long long v88 = (_OWORD *)((char *)v88 + 1112);
  _OWORD *v89 = *v88;
  *(_OWORD *)((char *)v89 + 11) = *(_OWORD *)((char *)v88 + 11);
  IOLockUnlock(*(IOLock **)(*((void *)this + 9) + 1200));
  uint64_t v90 = AppleBCMWLANCore::writeEventBitField(this);
  if (v90)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v91 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        long long v92 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v90);
        CCLogStream::logAlert(v91, "[dk] %s@%d:Failure to clear events from the event mask, %s\n", "configureEventBitMaskForAssociatedSleep", 51855, v92);
      }
    }
  }
  else
  {
    if (AppleBCMWLANCore::checkForTCPKAOffloadSupport(this)) {
      AppleBCMWLANCore::setExtendedEventBit(this, 0x97u);
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v95 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logNoticeIf(v95, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "configureEventBitMaskForAssociatedSleep", 51864, "configureEventBitMaskForAssociatedSleep");
      }
    }
  }
  return v90;
}

uint64_t AppleBCMWLANCore::resetClockDrifts(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 72);
  if (*(unsigned char *)(v1 + 777))
  {
    uint64_t v2 = this;
    this = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(v1 + 5416), (uint64_t)"drift_stats_reset", (uint64_t)&kNoTxPayload, 0, 0);
    if (this)
    {
      this = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 1848))(v2);
      if (this)
      {
        (*(void (**)(uint64_t))(*(void *)v2 + 1848))(v2);
        this = CCLogStream::shouldLog();
        if (this)
        {
          uint64_t v3 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 1848))(v2);
          return CCLogStream::logAlert(v3, "[dk] %s@%d: Failed to reset drift stats\n", "resetClockDrifts", 45232);
        }
      }
    }
  }
  return this;
}

AppleBCMWLANIOReportingCore *AppleBCMWLANCore::updateInactivityAndSleepCounters(void *a1, int a2)
{
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  if (a2 == 1)
  {
    uint64_t v8 = a1[9];
    uint64_t v9 = *(void *)(v8 + 17544);
    if (!v9) {
      goto LABEL_14;
    }
    *(void *)(v8 + 17560) -= v9;
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logInfo(v13, "[dk] %s@%d:Most recent traffic inactivity duratiouint64_t n = %llu, Accumulated = %llu \n", "updateInactivityAndSleepCounters", 56342, -*(void *)(a1[9] + 17544), *(void *)(a1[9] + 17560));
      }
    }
    uint64_t v6 = a1[9];
    uint64_t v7 = 17544;
  }
  else
  {
    if (a2) {
      goto LABEL_14;
    }
    uint64_t v4 = a1[9];
    uint64_t v5 = *(void *)(v4 + 17552);
    if (!v5) {
      goto LABEL_14;
    }
    *(void *)(v4 + 17568) -= v5;
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v12, "[dk] %s@%d:Most recent LPAS/WoW duratiouint64_t n = %llu Accumulated = %llu \n", "updateInactivityAndSleepCounters", 56336, -*(void *)(a1[9] + 17552), *(void *)(a1[9] + 17568));
      }
    }
    uint64_t v6 = a1[9];
    uint64_t v7 = 17552;
  }
  *(void *)(v6 + v7) = 0;
LABEL_14:
  uint64_t v10 = (void *)a1[9];
  uint64_t result = (AppleBCMWLANIOReportingCore *)v10[689];
  if (result) {
    return (AppleBCMWLANIOReportingCore *)AppleBCMWLANIOReportingCore::updateInactivitySleepStats(result, -v10[2449], v10[2195], v10[2196]);
  }
  return result;
}

uint64_t AppleBCMWLANCore::configureAvgRssiParamsForAssociatedSleepExit(AppleBCMWLANCore *this)
{
  if (IO80211BssManager::isAssociatedToAdhoc(*(IO80211BssManager **)(*((void *)this + 9) + 5440)))
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logNotice(v8, "[dk] %s@%d:Associated to IBSS, Bailout\n", "configureAvgRssiParamsForAssociatedSleepExit", 56534);
      }
    }
    return 0;
  }
  else
  {
    int v15 = 520;
    uint64_t v3 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 136))(v3))
    {
      uint64_t v12 = (int *)this;
      uint64_t v13 = (uint64_t)AppleBCMWLANCore::handleConfigureAvgRssiParamsAsyncCallback;
      uint64_t v14 = 0;
      uint64_t v4 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"rssi_win");
    }
    else
    {
      uint64_t v5 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
      uint64_t v12 = &v15;
      uint64_t v13 = 4;
      uint64_t v4 = AppleBCMWLANCommander::runIOVarSet(v5, (uint64_t)"rssi_win", (uint64_t)&v12, 0, 0);
    }
    uint64_t v2 = v4;
    if (v4 != -469794537 && v4 != 0)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          int v10 = v15;
          unint64_t v11 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v2);
          CCLogStream::logAlert(v9, "[dk] %s@%d:Unable to set rssi window to %d: %s\n", "configureAvgRssiParamsForAssociatedSleepExit", 56551, v10, v11);
        }
      }
    }
  }
  return v2;
}

uint64_t AppleBCMWLANCore::configureLPASExit(AppleBCMWLANCore *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v4, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "configureLPASExit", 44710, "configureLPASExit");
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      int IsBitSet = AppleBCMWLANCore::featureFlagIsBitSet(this, 26);
      CCLogStream::logAlert(v5, "[dk] %s@%d: LPAS supported[%u]\n", "configureLPASExit", 44714, IsBitSet);
    }
  }
  if (AppleBCMWLANCore::configureLPASMode(this, 0))
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v8, "[dk] %s@%d:Failed to disable LPAS mode in F/W\n", "configureLPASExit", 44731);
      }
    }
  }
  uint64_t v2 = AppleBCMWLANCore::unConfigurePktFilters((IOService *)this);
  if (v2)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v9, "[dk] %s@%d:Failed to UnConfigure Pkt Filters\n", "configureLPASExit", 44742);
      }
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v7, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "configureLPASExit", 44757, "configureLPASExit");
    }
  }
  return v2;
}

uint64_t AppleBCMWLANCore::configureWoWExit(IOService *this)
{
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v4 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logNoticeIf(v4, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "configureWoWExit", 44815, "configureWoWExit");
    }
  }
  if (AppleBCMWLANKeepAliveOffload::unConfigureKeepAlives((AppleBCMWLANKeepAliveOffload *)this[1].OSObject::OSObjectInterface::__vftable[347].init))
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v6, "[dk] %s@%d:Failed to UnConfigure Keep-Alives\n", "configureWoWExit", 44833);
      }
    }
  }
  uint64_t v2 = AppleBCMWLANCore::unConfigurePktFilters(this);
  if (v2)
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:Failed to UnConfigure Pkt Filters\n", "configureWoWExit", 44846);
      }
    }
  }
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logNoticeIf(v5, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "configureWoWExit", 44871, "configureWoWExit");
    }
  }
  return v2;
}

uint64_t AppleBCMWLANCore::configureAssociatedSleepExitParams(AppleBCMWLANCore *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      int v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v10, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "configureAssociatedSleepExitParams", 44878, "configureAssociatedSleepExitParams");
    }
  }
  int v22 = 0;
  uint64_t v2 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  uint64_t v20 = &v22;
  uint64_t v21 = 4;
  uint64_t v3 = AppleBCMWLANCommander::runIOVarSet(v2, (uint64_t)"nolinkup", (uint64_t)&v20, 0, 0);
  if (v3)
  {
    uint64_t v4 = v3;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v14 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v4);
        CCLogStream::logAlert(v13, "[dk] %s@%d: Unable to turn off Link Up filtering %s\n", "configureAssociatedSleepExitParams", 44907, v14);
      }
    }
  }
  uint64_t v5 = AppleBCMWLANCore::unconfigureEventBitMaskForAssociatedSleep(this);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v15, "[dk] %s@%d:Failed to release Events\n", "configureAssociatedSleepExitParams", 44912);
      }
    }
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 39))
  {
    int v19 = 0;
    uint64_t v6 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    uint64_t v20 = &v19;
    uint64_t v21 = 4;
    uint64_t v7 = AppleBCMWLANCommander::runIOVarSet(v6, (uint64_t)"lq_max_bcn_thresh", (uint64_t)&v20, 0, 0);
    uint64_t v5 = v7;
    if (v7 != -469794537 && v7 != 0)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          int v17 = v19;
          uint64_t v18 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
          CCLogStream::logAlert(v16, "[dk] %s@%d:Unable to set lq_max_bcn_thresh to %d: %s\n", "configureAssociatedSleepExitParams", 44941, v17, v18);
        }
      }
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      unint64_t v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v11, "[dk] %s@%d: rval[0x%08x], fAssociatedbeforeSleep[%u] -> false, fPowerSaveMode[%u]\n", "configureAssociatedSleepExitParams", 44945, v5, *(unsigned __int8 *)(*((void *)this + 9) + 776), *(_DWORD *)(*((void *)this + 9) + 6732));
    }
  }
  *(unsigned char *)(*((void *)this + 9) + 776) = 0;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v12, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "configureAssociatedSleepExitParams", 44961, "configureAssociatedSleepExitParams");
    }
  }
  return v5;
}

uint64_t AppleBCMWLANCore::unconfigureEventBitMaskForAssociatedSleep(AppleBCMWLANCore *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v13, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "unconfigureEventBitMaskForAssociatedSleep", 51871, "unconfigureEventBitMaskForAssociatedSleep");
    }
  }
  if (AppleBCMWLANCore::checkForTCPKAOffloadSupport(this)) {
    AppleBCMWLANCore::resetExtendedEventBit(this, 0x97u);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 34)) {
    AppleBCMWLANCore::addEventBit(this, 0xB4u);
  }
  AppleBCMWLANCore::addEventBit(this, 3u);
  AppleBCMWLANCore::addEventBit(this, 0x38u);
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 71)) {
    AppleBCMWLANCore::addEventBit(this, 0xB8u);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 79)) {
    AppleBCMWLANCore::addEventBit(this, 0xBEu);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 92)) {
    AppleBCMWLANCore::addEventBit(this, 0xC7u);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 33)) {
    AppleBCMWLANCore::addEventBit(this, 0x7Cu);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 34)
    && AppleBCMWLANCore::featureFlagIsBitSet(this, 76))
  {
    AppleBCMWLANCore::addEventBit(this, 0xBDu);
  }
  AppleBCMWLANCore::addEventBit(this, 0x17u);
  uint64_t v2 = *((void *)this + 9);
  uint64_t v3 = *(IOLock **)(v2 + 1200);
  IOLockLock(v3);
  *(unsigned char *)(v2 + 1122) &= ~2u;
  IOLockUnlock(v3);
  uint64_t v4 = *((void *)this + 9);
  uint64_t v5 = *(IOLock **)(v4 + 1200);
  IOLockLock(v5);
  *(unsigned char *)(v4 + 1119) &= ~2u;
  IOLockUnlock(v5);
  AppleBCMWLANCore::addEventBit(this, 0x50u);
  AppleBCMWLANCore::addEventBit(this, 0x4Bu);
  AppleBCMWLANCore::addEventBit(this, 0x36u);
  AppleBCMWLANCore::addEventBit(this, 0x7Eu);
  AppleBCMWLANCore::addEventBit(this, 0x2Eu);
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 97)) {
    AppleBCMWLANCore::addEventBit(this, 0xD1u);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 119)) {
    AppleBCMWLANCore::addEventBit(this, 0xD4u);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 115)) {
    AppleBCMWLANCore::addEventBit(this, 0xCBu);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 46)) {
    AppleBCMWLANCore::addEventBit(this, 0x98u);
  }
  if (AppleBCMWLANCore::isCachedEventBitFieldSet(this, 0x34u)) {
    AppleBCMWLANCore::addEventBit(this, 0x34u);
  }
  if (AppleBCMWLANCore::isCachedEventBitFieldSet(this, 0xABu)) {
    AppleBCMWLANCore::addEventBit(this, 0xABu);
  }
  if (AppleBCMWLANCore::isCachedEventBitFieldSet(this, 0xACu)) {
    AppleBCMWLANCore::addEventBit(this, 0xACu);
  }
  if (AppleBCMWLANCore::isCachedEventBitFieldSet(this, 0x25u)) {
    AppleBCMWLANCore::addEventBit(this, 0x25u);
  }
  if (AppleBCMWLANCore::isCachedEventBitFieldSet(this, 0xC5u)) {
    AppleBCMWLANCore::addEventBit(this, 0xC5u);
  }
  if (AppleBCMWLANCore::isCachedEventBitFieldSet(this, 0x13u)) {
    AppleBCMWLANCore::addEventBit(this, 0x13u);
  }
  if (AppleBCMWLANCore::isCachedEventBitFieldSet(this, 0x20u)) {
    AppleBCMWLANCore::addEventBit(this, 0x20u);
  }
  if (AppleBCMWLANCore::isCachedEventBitFieldSet(this, 9u)) {
    AppleBCMWLANCore::addEventBit(this, 9u);
  }
  if (AppleBCMWLANCore::isCachedEventBitFieldSet(this, 0x31u)) {
    AppleBCMWLANCore::addEventBit(this, 0x31u);
  }
  if (AppleBCMWLANCore::isCachedEventBitFieldSet(this, 0xDu)) {
    AppleBCMWLANCore::addEventBit(this, 0xDu);
  }
  if (AppleBCMWLANCore::isCachedEventBitFieldSet(this, 0xEu)) {
    AppleBCMWLANCore::addEventBit(this, 0xEu);
  }
  if (AppleBCMWLANCore::isCachedEventBitFieldSet(this, 0x96u)) {
    AppleBCMWLANCore::addEventBit(this, 0x96u);
  }
  if (AppleBCMWLANCore::isCachedEventBitFieldSet(this, 0x6Du)) {
    AppleBCMWLANCore::addEventBit(this, 0x6Du);
  }
  if (AppleBCMWLANCore::isCachedEventBitFieldSet(this, 0xB7u)) {
    AppleBCMWLANCore::addEventBit(this, 0xB7u);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 34)
    && AppleBCMWLANCore::featureFlagIsBitSet(this, 82))
  {
    AppleBCMWLANCore::addEventBit(this, 0xBCu);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 34)) {
    AppleBCMWLANCore::addEventBit(this, 0xBFu);
  }
  AppleBCMWLANCore::addEventBit(this, 0x45u);
  uint64_t v6 = *((void *)this + 9);
  uint64_t v7 = *(IOLock **)(v6 + 1200);
  IOLockLock(v7);
  *(unsigned char *)(v6 + 1115) &= ~4u;
  IOLockUnlock(v7);
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 95)) {
    AppleBCMWLANCore::addEventBit(this, 0xC8u);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 93)) {
    AppleBCMWLANCore::addEventBit(this, 0xCFu);
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 101)) {
    AppleBCMWLANCore::addEventBit(this, 0xBBu);
  }
  uint64_t v8 = AppleBCMWLANCore::writeEventBitField(this);
  uint64_t v9 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (v8)
  {
    if (v9)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        unint64_t v11 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v8);
        CCLogStream::logAlert(v10, "[dk] %s@%d:Failure to clear events from the event mask, %s\n", "unconfigureEventBitMaskForAssociatedSleep", 52012, v11);
      }
    }
  }
  else if (v9)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v14, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "unconfigureEventBitMaskForAssociatedSleep", 52016, "unconfigureEventBitMaskForAssociatedSleep");
    }
  }
  return v8;
}

uint64_t AppleBCMWLANCore::timeSinceLastActivity_abs(AppleBCMWLANCore *this, unint64_t *a2)
{
  uint64_t v4 = mach_continuous_time();
  if (a2)
  {
    unint64_t v5 = *(void *)(*((void *)this + 9) + 6544);
    uint64_t result = *a2 - v5;
    if (*a2 < v5)
    {
      uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (result)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          int v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logEmergency(v10, "[dk] %s@%d: Overflow detected, now_abs[%llu] ivars->fLastLinkActivity_abs[%llu]\n", "timeSinceLastActivity_abs", 45389, *a2, *(void *)(*((void *)this + 9) + 6544));
        }
        return 0;
      }
    }
  }
  else
  {
    uint64_t v7 = *(void *)(*((void *)this + 9) + 6544);
    BOOL v8 = v4 >= v7;
    uint64_t v9 = v4 - v7;
    if (v8) {
      return v9;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::resetInterfacesBegin(AppleBCMWLANCore *this)
{
  int v9 = 0;
  uint64_t v2 = (void *)*((void *)this + 9);
  uint64_t v3 = (IO80211SkywalkInterface *)v2[1413];
  if (v3)
  {
    IO80211Controller::postMessage(this, v3, 0x31u, &v9, 4uLL, 1);
    uint64_t v2 = (void *)*((void *)this + 9);
  }
  uint64_t v4 = (IO80211SkywalkInterface *)v2[1414];
  if (v4)
  {
    IO80211Controller::postMessage(this, v4, 0x31u, &v9, 4uLL, 1);
    uint64_t v2 = (void *)*((void *)this + 9);
  }
  unint64_t v5 = (IO80211SkywalkInterface *)v2[3725];
  if (v5)
  {
    IO80211Controller::postMessage(this, v5, 0x31u, &v9, 4uLL, 1);
    uint64_t v2 = (void *)*((void *)this + 9);
  }
  uint64_t v6 = (IO80211SkywalkInterface *)v2[3726];
  if (v6)
  {
    IO80211Controller::postMessage(this, v6, 0x31u, &v9, 4uLL, 1);
    uint64_t v2 = (void *)*((void *)this + 9);
  }
  uint64_t v7 = (IO80211SkywalkInterface *)v2[1415];
  if (v7) {
    IO80211Controller::postMessage(this, v7, 0x31u, &v9, 4uLL, 1);
  }
  return 0;
}

uint64_t AppleBCMWLANCore::captureRequestCallback(void *a1, const char *a2, _OWORD *a3)
{
  int isBusy = CCFaultReporter::isBusy(*(CCFaultReporter **)(a1[9] + 5544));
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 1848))(a1);
  if (isBusy)
  {
    if (result)
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        BOOL v8 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logInfo(v8, "[dk] %s@%d:Faulter Reporter is busy!\n", "captureRequestCallback", 46003);
        return 0;
      }
    }
  }
  else
  {
    if (result)
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v10 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v10, "[dk] %s@%d:Problem reported from corecapture: %s \n", "captureRequestCallback", 46007, a2);
      }
    }
    *(_OWORD *)(a1[9] + 18280) = *a3;
    uint64_t v9 = (*(uint64_t (**)(void *))(*a1 + 88))(a1);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 0x40000000;
    void v11[2] = ___ZN16AppleBCMWLANCore22captureRequestCallbackEPKcPK11CCTimestamp_block_invoke;
    void v11[3] = &__block_descriptor_tmp_2635;
    _OWORD v11[4] = a1;
    v11[5] = a2;
    return (*(uint64_t (**)(uint64_t, void *))(*(void *)v9 + 112))(v9, v11);
  }
  return result;
}

uint64_t ___ZN16AppleBCMWLANCore22captureRequestCallbackEPKcPK11CCTimestamp_block_invoke(uint64_t a1)
{
  return CCFaultReporter::reportFault(*(CCFaultReporter **)(*(void *)(*(void *)(a1 + 32) + 72) + 5544), 0x14u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0xB3BFu, "captureRequestCallback_block_invoke", 0, -469793519, "%s", *(const char **)(a1 + 40));
}

uint64_t AppleBCMWLANCore::setLogFlagsCallback(AppleBCMWLANCore *this, unint64_t a2)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      unint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v5, "[dk] %s@%d:Setting loggerstream flags to 0x%llX\n", "setLogFlagsCallback", 46026, a2);
    }
  }
  (*(void (**)(void, unint64_t))(**(void **)(*((void *)this + 9) + 5400) + 264))(*(void *)(*((void *)this + 9) + 5400), (a2 >> 13) & 1);
  return 0;
}

uint64_t AppleBCMWLANCore::captureDeviceInfo(IOService *this, OSDictionary **a2)
{
  uint64_t v4 = OSDictionary::withCapacity(4u);
  unint64_t v25 = 0;
  property = 0;
  values = OSString::withCString("compatible");
  unint64_t v5 = OSArray::withObjects((const OSObject **)&values, 1u, 0);
  if (!IOService::CopyProviderProperties(this, v5, &v25, 0) && v25)
  {
    int v6 = ((uint64_t (*)(OSArray *))v25->getCount)(v25);
    Object = OSArray::getObject(v25, v6 - 1);
    BOOL v8 = (const OSDictionary *)OSMetaClassBase::safeMetaCast(Object, gOSDictionaryMetaClass);
    OSStringPtr v9 = OSString::withCString("compatible");
    int v10 = OSDictionary::getObject(v8, v9);
    unint64_t v11 = (const OSData *)OSMetaClassBase::safeMetaCast(v10, gOSDataMetaClass);
    if (v11) {
      BytesNoCopy = (const char *)OSData::getBytesNoCopy(v11);
    }
    else {
      BytesNoCopy = "UNKNOWN";
    }
    OSStringPtr v13 = OSString::withCString(BytesNoCopy);
    OSDictionary::setObject(v4, "Platform", v13);
    if (v13) {
      ((void (*)(OSStringPtr))v13->release)(v13);
    }
    if (v25)
    {
      ((void (*)(OSArray *))v25->release)(v25);
      unint64_t v25 = 0;
    }
    if (v9) {
      ((void (*)(OSStringPtr))v9->release)(v9);
    }
  }
  if (values)
  {
    ((void (*)(OSObject *))values->release)(values);
    values = 0;
  }
  if (v5) {
    ((void (*)(OSArray *))v5->release)(v5);
  }
  if (!IOService::SearchProperty(this, "IOPlatformSerialNumber", "IOService", 1uLL, &property, 0))
  {
    uint64_t v14 = OSMetaClassBase::safeMetaCast(property, gOSStringMetaClass);
    if (v14) {
      OSDictionary::setObject(v4, "Serial", v14);
    }
    if (property)
    {
      ((void (*)(OSContainer *))property->release)(property);
      property = 0;
    }
  }
  if (!IOService::SearchProperty(this, "ModuleInfo", "IOService", 1uLL, &property, 0))
  {
    int v15 = OSMetaClassBase::safeMetaCast(property, gOSStringMetaClass);
    if (v15) {
      OSDictionary::setObject(v4, "Module", v15);
    }
    if (property)
    {
      ((void (*)(OSContainer *))property->release)(property);
      property = 0;
    }
  }
  OSStringPtr v16 = OSString::withCString((const char *)&this[1].OSObject::OSObjectInterface::__vftable[156].free);
  OSDictionary::setObject(v4, "Module Instance", v16);
  if (v16) {
    ((void (*)(OSStringPtr))v16->release)(v16);
  }
  if (!IOService::SearchProperty(this, "vendor-id", "IOService", 1uLL, &property, 0))
  {
    int v17 = OSMetaClassBase::safeMetaCast(property, gOSStringMetaClass);
    if (v17) {
      OSDictionary::setObject(v4, "Vendor", v17);
    }
    if (property)
    {
      ((void (*)(OSContainer *))property->release)(property);
      property = 0;
    }
  }
  if (!IOService::SearchProperty(this, "FirmwareVersion", "IOService", 1uLL, &property, 0))
  {
    uint64_t v18 = OSMetaClassBase::safeMetaCast(property, gOSStringMetaClass);
    if (v18) {
      OSDictionary::setObject(v4, "Firmware Version", v18);
    }
    if (property)
    {
      ((void (*)(OSContainer *))property->release)(property);
      property = 0;
    }
  }
  if (!IOService::SearchProperty(this, "OS Build Version", "IOService", 1uLL, &property, 0))
  {
    int v19 = OSMetaClassBase::safeMetaCast(property, gOSStringMetaClass);
    if (v19) {
      OSDictionary::setObject(v4, "OS Build", v19);
    }
    if (property)
    {
      ((void (*)(OSContainer *))property->release)(property);
      property = 0;
    }
  }
  if (kAppleBCMWLANBuildTag[0])
  {
    OSStringPtr v20 = OSString::withCString(kAppleBCMWLANBuildTag[0]);
    OSDictionary::setObject(v4, "Build Tag", v20);
    if (v20) {
      ((void (*)(OSStringPtr))v20->release)(v20);
    }
  }
  else
  {
    OSDictionary::setObject(v4, "Build Tag", 0);
  }
  OSStringPtr v21 = OSString::withCString("\"AppleBCMWLANV3_driverkit-1430.34\"");
  OSDictionary::setObject(v4, "Git Tag", v21);
  if (v21) {
    ((void (*)(OSStringPtr))v21->release)(v21);
  }
  if (kAppleBCMWLANBuildDate[0])
  {
    OSStringPtr v22 = OSString::withCString(kAppleBCMWLANBuildDate[0]);
    OSDictionary::setObject(v4, "Build Date", v22);
    if (v22) {
      ((void (*)(OSStringPtr))v22->release)(v22);
    }
  }
  else
  {
    OSDictionary::setObject(v4, "Build Date", 0);
  }
  OSStringPtr v23 = OSString::withCString("release");
  uint64_t result = OSDictionary::setObject(v4, "Build Type", v23);
  if (v23) {
    uint64_t result = ((uint64_t (*)(OSStringPtr))v23->release)(v23);
  }
  *a2 = v4;
  return result;
}

uint64_t AppleBCMWLANCore::captureDriverState(IOService *this, uint64_t a2, char *a3)
{
  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
  ((void (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, a2);
  uint64_t v6 = IO80211Print();
  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
  uint64_t v7 = IO80211Print() + v6;
  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
  uint64_t v8 = IO80211Print();
  properties = 0;
  property = 0;
  values = OSString::withCString("compatible");
  OSStringPtr v9 = 0;
  if (!IOService::SearchProperty(this, "FirmwareVersion", "IOService", 1uLL, &property, 0))
  {
    if (OSMetaClassBase::safeMetaCast(property, gOSStringMetaClass))
    {
      int v10 = (const OSString *)OSMetaClassBase::safeMetaCast(property, gOSStringMetaClass);
      OSStringPtr v9 = OSString::withString(v10);
    }
    else
    {
      OSStringPtr v9 = 0;
    }
    if (property)
    {
      ((void (*)(OSContainer *))property->release)(property);
      property = 0;
    }
  }
  int v42 = 0;
  if (!IOService::SearchProperty(this, "vendor-id", "IOService", 1uLL, &property, 0))
  {
    if (OSMetaClassBase::safeMetaCast(property, gOSStringMetaClass))
    {
      unint64_t v11 = (const OSString *)OSMetaClassBase::safeMetaCast(property, gOSStringMetaClass);
      int v42 = OSString::withString(v11);
    }
    else
    {
      int v42 = 0;
    }
    if (property)
    {
      ((void (*)(OSContainer *))property->release)(property);
      property = 0;
    }
  }
  uint64_t v12 = 0;
  if (!IOService::SearchProperty(this, "ModuleInfo", "IOService", 1uLL, &property, 0))
  {
    if (OSMetaClassBase::safeMetaCast(property, gOSStringMetaClass))
    {
      OSStringPtr v13 = (const OSString *)OSMetaClassBase::safeMetaCast(property, gOSStringMetaClass);
      uint64_t v12 = OSString::withString(v13);
    }
    else
    {
      uint64_t v12 = 0;
    }
    if (property)
    {
      ((void (*)(OSContainer *))property->release)(property);
      property = 0;
    }
  }
  uint64_t v41 = 0;
  if (!IOService::SearchProperty(this, "OS Build Version", "IOService", 1uLL, &property, 0))
  {
    if (OSMetaClassBase::safeMetaCast(property, gOSStringMetaClass))
    {
      uint64_t v14 = (const OSString *)OSMetaClassBase::safeMetaCast(property, gOSStringMetaClass);
      uint64_t v41 = OSString::withString(v14);
    }
    else
    {
      uint64_t v41 = 0;
    }
    if (property)
    {
      ((void (*)(OSContainer *))property->release)(property);
      property = 0;
    }
  }
  uint64_t v15 = v8 + v7;
  unsigned int v40 = 0;
  if (!IOService::SearchProperty(this, "IOPlatformSerialNumber", "IOService", 1uLL, &property, 0))
  {
    if (OSMetaClassBase::safeMetaCast(property, gOSStringMetaClass))
    {
      OSStringPtr v16 = (const OSString *)OSMetaClassBase::safeMetaCast(property, gOSStringMetaClass);
      unsigned int v40 = OSString::withString(v16);
    }
    else
    {
      unsigned int v40 = 0;
    }
    if (property)
    {
      ((void (*)(OSContainer *))property->release)(property);
      property = 0;
    }
  }
  uint64_t v39 = OSArray::withObjects((const OSObject **)&values, 1u, 0);
  int v17 = 0;
  if (!IOService::CopyProviderProperties(this, v39, &properties, 0))
  {
    if (properties)
    {
      int v18 = ((uint64_t (*)(OSArray *))properties->getCount)(properties);
      Object = OSArray::getObject(properties, v18 - 1);
      OSStringPtr v20 = (const OSDictionary *)OSMetaClassBase::safeMetaCast(Object, gOSDictionaryMetaClass);
      OSStringPtr v21 = OSString::withCString("compatible");
      OSStringPtr v22 = OSDictionary::getObject(v20, v21);
      int v17 = OSMetaClassBase::safeMetaCast(v22, gOSDataMetaClass);
      if (v21) {
        ((void (*)(OSStringPtr))v21->release)(v21);
      }
    }
  }
  uint64_t v38 = (OSData *)v17;
  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
  uint64_t v23 = IO80211Print() + v15;
  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
  uint64_t v24 = 0;
  LODWORD(v17) = IO80211Print() + v23;
  do
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    int v17 = (OSMetaClassBase *)(IO80211Print() + v17);
    ++v24;
  }
  while (v24 != 16);
  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
  unint64_t v25 = (char *)v17 + IO80211Print();
  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
  AppleBCMWLAN_isVerboseDebugLoggingAllowed();
  AppleBCMWLAN_isSoCRAMCaptureAllowed();
  AppleBCMWLAN_isDebugCommandActionAllowed();
  uint64_t v26 = &v25[IO80211Print()];
  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
  if (v12) {
    OSString::getCStringNoCopy(v12);
  }
  if (v9) {
    OSString::getCStringNoCopy(v9);
  }
  if (v42) {
    OSString::getCStringNoCopy(v42);
  }
  int v27 = &v26[IO80211Print()];
  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
  if (v38) {
    OSData::getBytesNoCopy(v38);
  }
  if (v41) {
    OSString::getCStringNoCopy(v41);
  }
  if (v40) {
    OSString::getCStringNoCopy(v40);
  }
  uint64_t v28 = &v27[IO80211Print()];
  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
  int v29 = IO80211Print();
  if (v9) {
    ((void (*)(const OSString *))v9->release)(v9);
  }
  if (v42) {
    ((void (*)(const OSString *))v42->release)(v42);
  }
  if (v12) {
    ((void (*)(const OSString *))v12->release)(v12);
  }
  if (v41) {
    ((void (*)(OSString *))v41->release)(v41);
  }
  if (v40) {
    ((void (*)(OSString *))v40->release)(v40);
  }
  if (properties)
  {
    ((void (*)(OSArray *))properties->release)(properties);
    properties = 0;
  }
  int v30 = v29 + v28;
  if (values)
  {
    ((void (*)(OSObject *))values->release)(values);
    values = 0;
  }
  if (v39) {
    ((void (*)(OSArray *))v39->release)(v39);
  }
  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
  int v31 = IO80211Print() + v30;
  int v32 = AppleBCMWLANCore::printDataPathDebug((AppleBCMWLANCore *)this, a3) + v31;
  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
  unsigned int v33 = 0;
  int v34 = v32 + IO80211Print();
  do
  {
    if ((*((unsigned __int8 *)&this[1].OSObject::OSObjectInterface::__vftable[69].free + ((unint64_t)v33 >> 3)) >> (v33 & 7)))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      convertEventToString(v33, 0, 0);
      v34 += IO80211Print();
    }
    ++v33;
  }
  while (v33 != 215);
  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
  unsigned int v35 = 0;
  uint64_t v36 = v34 + IO80211Print();
  do
  {
    if (((*((unsigned __int8 *)&this[1].OSObject::OSObjectInterface::__vftable[72].free
           + ((unint64_t)v35 >> 3)
           + 6) >> (v35 & 7)) & 1) != 0)
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      convertEventToString(v35, 0, 0);
      uint64_t v36 = v36 + IO80211Print();
    }
    ++v35;
  }
  while (v35 != 215);
  return v36;
}

uint64_t AppleBCMWLANCore::stringFromReturn(AppleBCMWLANCore *this, unsigned int a2)
{
  if (a2 >> 14 == 229896) {
    return IO80211Controller::stringFromReturn(this, a2);
  }
  else {
    return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 5400) + 104))();
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::stringFromReturn(AppleBCMWLANCore *this, unsigned int a2)
{
  return AppleBCMWLANCore::stringFromReturn((AppleBCMWLANCore *)((char *)this - 48), a2);
}

uint64_t AppleBCMWLANCore::errnoFromReturn(AppleBCMWLANCore *this, unsigned int a2)
{
  if (a2 >> 14 == 229896) {
    return IO80211Controller::errnoFromReturn(this, a2);
  }
  else {
    return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 5400) + 112))();
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::errnoFromReturn(AppleBCMWLANCore *this, unsigned int a2)
{
  return AppleBCMWLANCore::errnoFromReturn((AppleBCMWLANCore *)((char *)this - 48), a2);
}

uint64_t AppleBCMWLANCore::isWNMSupportedAndEnabled(AppleBCMWLANCore *this)
{
  int IsBitSet = AppleBCMWLANCore::featureFlagIsBitSet(this, 25);
  uint64_t v3 = *(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472);
  if (v3) {
    LODWORD(v3) = AppleBCMWLANConfigManager::isWnmSupportEnabled(v3);
  }
  return IsBitSet & v3;
}

uint64_t AppleBCMWLANCore::isFWTimeSyncCapable(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 52);
}

uint64_t AppleBCMWLANCore::getFeatures(OSObject *this)
{
  ivars = this[1].ivars;
  int v3 = *((_DWORD *)ivars + 8942);
  if (v3 == 1) {
    goto LABEL_9;
  }
  if (v3 == 2)
  {
    uint64_t v4 = 0x2000000;
    goto LABEL_10;
  }
  int v5 = *((_DWORD *)ivars + 7486);
  if ((v5 - 2) < 2)
  {
    uint64_t v4 = 0x1000000;
    goto LABEL_10;
  }
  if (v5 != 1)
  {
LABEL_9:
    uint64_t v4 = 0;
  }
  else
  {
    char v12 = -86;
    char v11 = -86;
    if ((*(unsigned int (**)(void, char *, char *))(**((void **)ivars + 675) + 456))(*((void *)ivars + 675), &v12, &v11))
    {
      uint64_t v4 = 0;
    }
    else
    {
      unsigned __int8 IsBitSet = AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 52);
      if ((IsBitSet & (v12 != 0)) != 0) {
        unsigned int v10 = 0x1000000;
      }
      else {
        unsigned int v10 = 0;
      }
      if (v11) {
        uint64_t v4 = v10 | 0x2000000;
      }
      else {
        uint64_t v4 = v10;
      }
    }
    ivars = this[1].ivars;
  }
LABEL_10:
  if (*((void *)ivars + 1770))
  {
    if (((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logInfoIf(v6, 0x80uLL, "[dk] %s@%d:[WiFiTimeSync] ptmMode = %d supported features = 0x%x\n", "getFeatures", 46473, *((_DWORD *)this[1].ivars + 7486), v4);
      }
    }
  }
  else
  {
    uint64_t ClassNameHelper = (const char *)getClassNameHelper(this);
    IOLog("[WiFiTimeSync] %s::%s() ptmMode = %d supported features = 0x%x\n", ClassNameHelper, "getFeatures", *((_DWORD *)this[1].ivars + 7486), v4);
  }
  return v4;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getFeatures(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::getFeatures((OSObject *)((char *)this - 48));
}

uint64_t AppleBCMWLANCore::getHT_CAPABILITY(AppleBCMWLANCore *a1, uint64_t a2)
{
  AppleBCMWLANCore::updateHTAndVHTCapBasedOnHWSupport(a1);
  long long v4 = *(_OWORD *)(*((void *)a1 + 9) + 1052);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(*((void *)a1 + 9) + 1064);
  *(_OWORD *)(a2 + 4) = v4;
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getHT_CAPABILITY(uint64_t a1, uint64_t a2)
{
  AppleBCMWLANCore::updateHTAndVHTCapBasedOnHWSupport((AppleBCMWLANCore *)(a1 - 64));
  long long v4 = *(_OWORD *)(*(void *)(a1 + 8) + 1052);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(*(void *)(a1 + 8) + 1064);
  *(_OWORD *)(a2 + 4) = v4;
  return 0;
}

uint64_t AppleBCMWLANCore::getVHT_CAPABILITY(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if (*(int *)(v2 + 1040) < 128) {
    return 45;
  }
  uint64_t result = 0;
  uint64_t v4 = v2 + 1080;
  uint64_t v5 = *(void *)(v2 + 1080);
  *(void *)(a2 + 10) = *(void *)(v4 + 6);
  *(void *)(a2 + 4) = v5;
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getVHT_CAPABILITY(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(int *)(v2 + 1040) < 128) {
    return 45;
  }
  uint64_t result = 0;
  uint64_t v4 = v2 + 1080;
  uint64_t v5 = *(void *)(v2 + 1080);
  *(void *)(a2 + 10) = *(void *)(v4 + 6);
  *(void *)(a2 + 4) = v5;
  return result;
}

uint64_t AppleBCMWLANCore::getAWDL_RSDB_CAPS(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 4) = *(void *)(*(void *)(a1 + 72) + 1094);
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getAWDL_RSDB_CAPS(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 4) = *(void *)(*(void *)(a1 + 8) + 1094);
  return 0;
}

uint64_t AppleBCMWLANCore::getEXTENDED_STATS(uint64_t a1, uint64_t a2)
{
  int v6 = 0;
  if (!a2) {
    return 22;
  }
  if (!IO80211BssManager::isAssociated(*(IO80211BssManager **)(*(void *)(a1 + 72) + 5440))) {
    return 3766625283;
  }
  uint64_t CurrentRSSI = IO80211BssManager::getCurrentRSSI(*(IO80211BssManager **)(*(void *)(a1 + 72) + 5440), &v6);
  *(_DWORD *)(a2 + 28) = v6;
  *(_DWORD *)(a2 + 4) = AppleBCMWLANNetAdapter::isRealTimeTrafficSettingEnabled(*(AppleBCMWLANNetAdapter **)(*(void *)(a1 + 72) + 5600));
  return CurrentRSSI;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getEXTENDED_STATS(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getEXTENDED_STATS(a1 - 64, a2);
}

uint64_t AppleBCMWLANCore::getCOUNTRY_CODE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 72);
  char v4 = *(unsigned char *)(v3 + 6754);
  LOWORD(v3) = *(_WORD *)(v3 + 6752);
  *(unsigned char *)(a3 + 6) = v4;
  *(_WORD *)(a3 + 4) = v3;
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getCOUNTRY_CODE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 24);
  char v4 = *(unsigned char *)(v3 + 6754);
  LOWORD(v3) = *(_WORD *)(v3 + 6752);
  *(unsigned char *)(a3 + 6) = v4;
  *(_WORD *)(a3 + 4) = v3;
  return 0;
}

uint64_t AppleBCMWLANCore::getCHANNELS_INFO(AppleBCMWLANCore *a1, void *a2)
{
  char v4 = (const char *)*((void *)a1 + 9);
  int v5 = strncmp(v4 + 6756, v4 + 6752, 4uLL);
  memcpy(a2, v4 + 19760, 0x2720uLL);
  if (v5 || (uint64_t v6 = *((void *)a1 + 9), *(unsigned char *)(v6 + 6752) != 88) && !*(_WORD *)(v6 + 19772))
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v8, "[dk] %s@%d:Querying FW as number of chanspecs is %d, current CC %s\n", "getCHANNELS_INFO", 46572, *(unsigned __int16 *)(*((void *)a1 + 9) + 19772), (const char *)(*((void *)a1 + 9) + 6752));
      }
    }
    AppleBCMWLANCore::handleCountryCodeChangeToRepopulateChannels(a1);
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getCHANNELS_INFO(uint64_t a1, void *a2)
{
  return 0;
}

uint64_t AppleBCMWLANCore::getWCL_LOW_LATENCY_INFO(uint64_t a1, _WORD *a2)
{
  if (!a2) {
    return 3758097084;
  }
  char v4 = *(AppleBCMWLANProximityInterface **)(*(void *)(a1 + 72) + 11312);
  if (v4) {
    LOWORD(v4) = AppleBCMWLANProximityInterface::isLowLatencyTrafficOngoing(v4);
  }
  *a2 = (_WORD)v4;
  int v5 = *(AppleBCMWLANProximityInterface **)(*(void *)(a1 + 72) + 11312);
  if (v5) {
    __int16 DesiredChannel = AppleBCMWLANProximityInterface::getDesiredChannel(v5);
  }
  else {
    __int16 DesiredChannel = 0;
  }
  uint64_t result = 0;
  a2[1] = DesiredChannel;
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getWCL_LOW_LATENCY_INFO(uint64_t a1, _WORD *a2)
{
  return AppleBCMWLANCore::getWCL_LOW_LATENCY_INFO(a1 - 64, a2);
}

uint64_t AppleBCMWLANCore::getWCL_TRAFFIC_COUNTERS(AppleBCMWLANCore *a1, void *a2)
{
  if (!a2) {
    return 3758097084;
  }
  *a2 = AppleBCMWLANCore::getRealTimeTrafficClassTxCounter(a1);
  a2[1] = *(void *)(*((void *)a1 + 9) + 10808) + *(void *)(*((void *)a1 + 9) + 10800);
  a2[2] = AppleBCMWLANCore::getTxPktCounter(a1);
  a2[3] = vaddvq_s64(vaddq_s64(*(int64x2_t *)(*((void *)a1 + 9) + 10800), *(int64x2_t *)(*((void *)a1 + 9)
                                                                                           + 10784)));
  a2[4] = AppleBCMWLANCore::getRealTimeAwdlTxPktCounter(a1);
  a2[5] = AppleBCMWLANCore::getRealTimeNANTxPktCounter(a1);
  uint64_t mach_continuous_nanoseconds = AppleBCMWLANUtil::get_mach_continuous_nanoseconds(0, v4);
  uint64_t result = 0;
  a2[6] = mach_continuous_nanoseconds;
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getWCL_TRAFFIC_COUNTERS(uint64_t a1, void *a2)
{
  return AppleBCMWLANCore::getWCL_TRAFFIC_COUNTERS((AppleBCMWLANCore *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::getWCL_BSS_INFO(uint64_t a1, uint64_t a2)
{
  v6[0] = 0;
  v6[1] = v6;
  void v6[2] = 0x2000000000;
  void v6[3] = a2;
  if (a2)
  {
    uint64_t v2 = *(void *)(*(void *)(a1 + 72) + 5600);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 1107296256;
    v5[2] = ___ZN16AppleBCMWLANCore15getWCL_BSS_INFOEP21apple80211_beacon_msg_block_invoke;
    void v5[3] = &__block_descriptor_tmp_2671;
    v5[4] = v6;
    uint64_t BssInfo = AppleBCMWLANNetAdapter::getBssInfo(v2, (uint64_t)v5);
  }
  else
  {
    uint64_t BssInfo = 3758097084;
  }
  _Block_object_dispose(v6, 8);
  return BssInfo;
}

uint64_t ___ZN16AppleBCMWLANCore15getWCL_BSS_INFOEP21apple80211_beacon_msg_block_invoke(uint64_t a1, uint64_t a2, __int16 *a3)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (AppleBCMWLANBSSBeacon::getBeaconMsgFromWLBSSInfo(v3, (void *)(v3 + 64), a2, *a3, *(unsigned int *)(a2 + 4)))return 0; {
  else
  }
    return 3758097084;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getWCL_BSS_INFO(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getWCL_BSS_INFO(a1 - 64, a2);
}

uint64_t AppleBCMWLANCore::getWCL_EXTENDED_BSS_INFO(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return AppleBCMWLANNetAdapter::getExtendedBssInfo(*(AppleBCMWLANCore ****)(*(void *)(a1 + 72) + 5600), a2);
  }
  else {
    return 3758097084;
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getWCL_EXTENDED_BSS_INFO(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return AppleBCMWLANNetAdapter::getExtendedBssInfo(*(AppleBCMWLANCore ****)(*(void *)(a1 + 8) + 5600), a2);
  }
  else {
    return 3758097084;
  }
}

uint64_t AppleBCMWLANCore::getCOUNTRY_BAND_SUPPORT(AppleBCMWLANCore *a1, uint64_t a2)
{
  uint64_t v3 = *((void *)a1 + 9);
  if (*(unsigned char *)(v3 + 6764) && AppleBCMWLANCore::is6ESupportedInCountry(a1, (const char *)(v3 + 6744)))
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logInfo(v7, "[dk] %s@%d: %s WiFiMC : Country supports 6GHz\n", "getCOUNTRY_BAND_SUPPORT", 46665, "getCOUNTRY_BAND_SUPPORT");
      }
    }
    int v5 = 7;
  }
  else
  {
    int v5 = 3;
  }
  *(_DWORD *)(a2 + 4) = v5;
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getCOUNTRY_BAND_SUPPORT(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t AppleBCMWLANCore::handleGetChanSpecs(AppleBCMWLANCore *a1, uint64_t a2, uint64_t a3, unsigned int **a4)
{
  if (a3)
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        uint64_t v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)a1 + 112))(a1, a3);
        return CCLogStream::logAlert(v7, "[dk] %s@%d:Error: cannot get chanspecs: %s\n", "handleGetChanSpecs", 46700, v8);
      }
    }
    return result;
  }
  OSStringPtr v9 = *a4;
  unsigned int v10 = **a4;
  if (v10 >= 0x17C) {
    uint64_t v11 = 380;
  }
  else {
    uint64_t v11 = v10;
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)
    && ((*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1), CCLogStream::shouldLog()))
  {
    int v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    CCLogStream::logNoticeIf(v18, 0x4000000400uLL, "[dk] %s@%d:Num chanspecs in response: %d, Saved: %d\n", "handleGetChanSpecs", 46712, *v9, v11);
    if (!v11) {
      goto LABEL_13;
    }
  }
  else if (!v11)
  {
    goto LABEL_13;
  }
  char v12 = (int *)(v9 + 1);
  uint64_t v13 = 19774;
  uint64_t v14 = v11;
  do
  {
    int v15 = *v12++;
    *(_WORD *)(*((void *)a1 + 9) + v13) = v15;
    v13 += 2;
    --v14;
  }
  while (v14);
LABEL_13:
  *(_WORD *)(*((void *)a1 + 9) + 19772) = v11;
  uint64_t result = AppleBCMWLANCore::adjustBeaconListPerNewCountryCode(a1);
  uint64_t v16 = *((void *)a1 + 9);
  if (*(_DWORD *)(v16 + 6760))
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 6760), 1u, memory_order_relaxed);
  }
  else
  {
    strlcpy((char *)(v16 + 6756), (const char *)(v16 + 6752), 4uLL);
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v19, "[dk] %s@%d:WiFiCC : Writing current FW country code [%s] to fChanListQueriedForCountryCode\n", "handleGetChanSpecs", 46733, (const char *)(*((void *)a1 + 9) + 6752));
      }
    }
    int v17 = *(uint64_t (**)(void))(**(void **)(*((void *)a1 + 9) + 6240) + 120);
    return v17();
  }
  return result;
}

uint64_t AppleBCMWLANCore::get6GTxPowerFromFW(AppleBCMWLANCore *this, __int16 a2, unsigned int a3)
{
  if (a3 < 2)
  {
    int v14 = 786433;
    uint64_t v15 = 1;
    WORD2(v15) = a2;
    uint64_t v6 = &txPowerLPIBuffer;
    HIBYTE(v15) = a3;
    if (a3 == 1) {
      uint64_t v6 = &txPowerVLPBuffer;
    }
    v13[0] = v6;
    v13[1] = 0x10C000C010CLL;
    uint64_t v7 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    v12[0] = &v14;
    v12[1] = 12;
    uint64_t result = AppleBCMWLANCommander::runIOVarGet(v7, (uint64_t)"chanspec_txpwr_max", (uint64_t)v12, (uint64_t)v13, 0);
    if (result)
    {
      uint64_t v8 = result;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          uint64_t v11 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v8);
          CCLogStream::logCrit(v10, "[dk] %s@%d: chanspec_txpwr_max (mode %d) failed, error %s\n", "get6GTxPowerFromFW", 46779, a3, v11);
        }
      }
      return 4294967294;
    }
  }
  else
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        OSStringPtr v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v9, "[dk] %s@%d:Invalid power mode %d\n", "get6GTxPowerFromFW", 46759, a3);
      }
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

void *AppleBCMWLANCore::handleGetCountryListAsyncCallBack(void *result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char v4 = result;
  if (a3)
  {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 1848))(result);
    if (result)
    {
      (*(void (**)(void *))(*v4 + 1848))(v4);
      uint64_t result = (void *)CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(void *))(*v4 + 1848))(v4);
        uint64_t v7 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*v4 + 112))(v4, a3);
        return (void *)CCLogStream::logAlert(v6, "[dk] %s@%d: Failed to retrieve country code list from firmware: %s\n", "handleGetCountryListAsyncCallBack", 47095, v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *a4;
    if (*a4)
    {
      unsigned int v9 = *(_DWORD *)(v8 + 12);
      if (v9 >= 0x100) {
        unsigned int v9 = 256;
      }
      *(_DWORD *)(result[9] + 6768) = v9;
      if (v9)
      {
        int v10 = 0;
        uint64_t v11 = (int *)(v8 + 16);
        do
        {
          int v12 = *v11++;
          *(_DWORD *)(result[9] + 4 * v10++ + 6772) = v12;
        }
        while (v9 > v10);
      }
    }
    else
    {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 1848))(result);
      if (result)
      {
        (*(void (**)(void *))(*v4 + 1848))(v4);
        uint64_t result = (void *)CCLogStream::shouldLog();
        if (result)
        {
          uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(void *))(*v4 + 1848))(v4);
          return (void *)CCLogStream::logNotice(v13, "[dk] %s@%d:No valid data\n", "handleGetCountryListAsyncCallBack", 47100);
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleGet6ECountryListAsyncCallBack(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3)
  {
    uint64_t result = (*(uint64_t (**)(void *))(*a1 + 1848))(a1);
    if (result)
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v16 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        int v17 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 112))(a1, a3);
        return CCLogStream::logAlert(v16, "[dk] %s@%d: Failed to retrieve country code list from firmware: %s\n", "handleGet6ECountryListAsyncCallBack", 47126, v17);
      }
    }
  }
  else
  {
    uint64_t v7 = *a4;
    if (*a4)
    {
      if (*(_DWORD *)(v7 + 12) >= 0x100u) {
        unsigned int v8 = 256;
      }
      else {
        unsigned int v8 = *(_DWORD *)(v7 + 12);
      }
      uint64_t result = (*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      if (result)
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          int v18 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          uint64_t result = CCLogStream::logAlert(v18, "[dk] %s@%d:WiFiCC : Total # of 6E supported countries in CLM: %d\n", "handleGet6ECountryListAsyncCallBack", 47136, *(_DWORD *)(v7 + 12));
        }
      }
      *(_DWORD *)(a1[9] + 7796) = v8;
      if (v8)
      {
        int v9 = 0;
        for (i = 0; i < v8; int v9 = ++i)
        {
          uint64_t v11 = v7 + (4 * v9);
          int v13 = *(_DWORD *)(v11 + 16);
          int v12 = (const char *)(v11 + 16);
          *(_DWORD *)(a1[9] + 4 * i + 7800) = v13;
          uint64_t result = (*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          if (result)
          {
            (*(void (**)(void *))(*a1 + 1848))(a1);
            uint64_t result = CCLogStream::shouldLog();
            if (result)
            {
              int v14 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
              uint64_t result = CCLogStream::logAlert(v14, "[dk] %s@%d:WiFiCC : Country %3d %s\n", "handleGet6ECountryListAsyncCallBack", 47141, v9, v12);
            }
          }
        }
      }
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      if (result)
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          uint64_t v15 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          return CCLogStream::logNotice(v15, "[dk] %s@%d:No valid data\n", "handleGet6ECountryListAsyncCallBack", 47131);
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::getUCMCoexProfileV1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a2 = *(_WORD *)a3;
  *(unsigned char *)(a2 + 2) = *(unsigned char *)(a3 + 6);
  *(unsigned char *)(a2 + 3) = *(unsigned char *)(a3 + 7);
  *(unsigned char *)(a2 + 4) = *(unsigned char *)(a3 + 8);
  *(unsigned char *)(a2 + 5) = *(unsigned char *)(a3 + 9);
  *(unsigned char *)(a2 + 6) = *(unsigned char *)(a3 + 10);
  *(unsigned char *)(a2 + 7) = *(unsigned char *)(a3 + 11);
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(a3 + 12);
  *(unsigned char *)(a2 + 9) = *(unsigned char *)(a3 + 13);
  *(unsigned char *)(a2 + 10) = *(unsigned char *)(a3 + 14);
  *(unsigned char *)(a2 + 11) = *(unsigned char *)(a3 + 15);
  *(unsigned char *)(a2 + 12) = *(unsigned char *)(a3 + 16);
  *(unsigned char *)(a2 + 13) = *(unsigned char *)(a3 + 17);
  *(unsigned char *)(a2 + 14) = *(unsigned char *)(a3 + 18);
  *(unsigned char *)(a2 + 15) = *(unsigned char *)(a3 + 19);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a3 + 20);
  *(unsigned char *)(a2 + 17) = *(unsigned char *)(a3 + 21);
  *(unsigned char *)(a2 + 18) = *(unsigned char *)(a3 + 22);
  if (*(unsigned char *)(a3 + 7))
  {
    unint64_t v3 = 0;
    uint64_t v4 = a2 + 20;
    int v5 = (_DWORD *)(a3 + 27);
    do
    {
      *(void *)uint64_t v4 = 0;
      *(unsigned char *)uint64_t v4 = *((unsigned char *)v5 - 1);
      int v6 = *v5;
      v5 += 2;
      *(_DWORD *)(v4 + 3) = v6;
      ++v3;
      v4 += 7;
    }
    while (v3 < *(unsigned __int8 *)(a3 + 7));
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getUCMCoexProfileV1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

uint64_t AppleBCMWLANCore::getUCMCoexProfileV2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a2 = *(_WORD *)a3;
  *(unsigned char *)(a2 + 2) = *(unsigned char *)(a3 + 6);
  *(unsigned char *)(a2 + 3) = *(unsigned char *)(a3 + 7);
  *(unsigned char *)(a2 + 4) = *(unsigned char *)(a3 + 8);
  *(unsigned char *)(a2 + 5) = *(unsigned char *)(a3 + 9);
  *(unsigned char *)(a2 + 6) = *(unsigned char *)(a3 + 10);
  *(unsigned char *)(a2 + 7) = *(unsigned char *)(a3 + 11);
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(a3 + 12);
  *(unsigned char *)(a2 + 9) = *(unsigned char *)(a3 + 13);
  *(unsigned char *)(a2 + 10) = *(unsigned char *)(a3 + 14);
  *(unsigned char *)(a2 + 11) = *(unsigned char *)(a3 + 15);
  *(unsigned char *)(a2 + 12) = *(unsigned char *)(a3 + 16);
  *(unsigned char *)(a2 + 13) = *(unsigned char *)(a3 + 17);
  *(unsigned char *)(a2 + 14) = *(unsigned char *)(a3 + 18);
  *(unsigned char *)(a2 + 15) = *(unsigned char *)(a3 + 19);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a3 + 20);
  *(unsigned char *)(a2 + 17) = *(unsigned char *)(a3 + 21);
  *(unsigned char *)(a2 + 18) = *(unsigned char *)(a3 + 22);
  *(unsigned char *)(a2 + 19) = *(unsigned char *)(a3 + 23);
  if (*(unsigned char *)(a3 + 7))
  {
    unint64_t v3 = 0;
    uint64_t v4 = a2 + 20;
    int v5 = (_DWORD *)(a3 + 27);
    do
    {
      *(void *)uint64_t v4 = 0;
      *(unsigned char *)uint64_t v4 = *((unsigned char *)v5 - 1);
      int v6 = *v5;
      v5 += 2;
      *(_DWORD *)(v4 + 3) = v6;
      ++v3;
      v4 += 7;
    }
    while (v3 < *(unsigned __int8 *)(a3 + 7));
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getUCMCoexProfileV2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

uint64_t AppleBCMWLANCore::getUCMCoexProfileV3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a2 = *(_WORD *)a3;
  *(unsigned char *)(a2 + 2) = *(unsigned char *)(a3 + 6);
  *(unsigned char *)(a2 + 3) = *(unsigned char *)(a3 + 7);
  *(unsigned char *)(a2 + 4) = *(unsigned char *)(a3 + 8);
  *(unsigned char *)(a2 + 5) = *(unsigned char *)(a3 + 9);
  *(unsigned char *)(a2 + 6) = *(unsigned char *)(a3 + 10);
  *(unsigned char *)(a2 + 7) = *(unsigned char *)(a3 + 11);
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(a3 + 12);
  *(unsigned char *)(a2 + 9) = *(unsigned char *)(a3 + 13);
  *(unsigned char *)(a2 + 10) = *(unsigned char *)(a3 + 14);
  *(unsigned char *)(a2 + 11) = *(unsigned char *)(a3 + 15);
  *(unsigned char *)(a2 + 12) = *(unsigned char *)(a3 + 16);
  *(unsigned char *)(a2 + 13) = *(unsigned char *)(a3 + 17);
  *(unsigned char *)(a2 + 14) = *(unsigned char *)(a3 + 18);
  *(unsigned char *)(a2 + 15) = *(unsigned char *)(a3 + 19);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a3 + 20);
  *(unsigned char *)(a2 + 17) = *(unsigned char *)(a3 + 21);
  *(unsigned char *)(a2 + 18) = *(unsigned char *)(a3 + 22);
  *(unsigned char *)(a2 + 19) = *(unsigned char *)(a3 + 23);
  if (*(unsigned char *)(a3 + 7))
  {
    unint64_t v3 = 0;
    uint64_t v4 = a2 + 26;
    uint64_t v5 = a3 + 31;
    do
    {
      *(void *)(v4 - 6) = 0;
      *(_DWORD *)(v4 - 5) = *(_DWORD *)(v5 - 5);
      *(_WORD *)(v4 - 1) = *(_WORD *)(v5 - 1);
      ++v3;
      v4 += 7;
      v5 += 8;
    }
    while (v3 < *(unsigned __int8 *)(a3 + 7));
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getUCMCoexProfileV3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

uint64_t AppleBCMWLANCore::getBTCOEX_PROFILE(void *a1, uint64_t a2)
{
  uint64_t v2 = 3758097090;
  if (!a2) {
    return 3758097090;
  }
  AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(a1[9] + 5416));
  uint64_t v5 = (unsigned __int16 *)IOMallocZeroData();
  unsigned __int16 MaxCmdRxPayload = AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(a1[9] + 5416));
  unsigned __int16 v7 = AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(a1[9] + 5416));
  BOOL v8 = v5 != 0;
  BOOL v9 = MaxCmdRxPayload != 0;
  BOOL v10 = !v8 || !v9;
  if (v8 && v9) {
    unint64_t v11 = ((unint64_t)v7 << 32) | MaxCmdRxPayload;
  }
  else {
    unint64_t v11 = 0;
  }
  if (v10) {
    int v12 = 0;
  }
  else {
    int v12 = v5;
  }
  v22[0] = v12;
  v22[1] = v11;
  int v21 = *(unsigned __int8 *)(a2 + 4);
  v20[0] = &v21;
  v20[1] = 4;
  uint64_t v13 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(a1[9] + 5416), (uint64_t)"btc_profile", (uint64_t)v20, (uint64_t)v22, 0);
  uint64_t v14 = v13;
  if (v13 == -536870173 || v13 == 0)
  {
    int v16 = *v5;
    switch(v16)
    {
      case 3:
        (*(void (**)(void *, uint64_t, unsigned __int16 *))(*a1 + 824))(a1, a2, v5);
        break;
      case 2:
        (*(void (**)(void *, uint64_t, unsigned __int16 *))(*a1 + 816))(a1, a2, v5);
        break;
      case 1:
        (*(void (**)(void *, uint64_t, unsigned __int16 *))(*a1 + 808))(a1, a2, v5);
        break;
      default:
LABEL_25:
        uint64_t v14 = v2;
LABEL_26:
        IOFreeData();
        return v14;
    }
    uint64_t v2 = v14;
    goto LABEL_25;
  }
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      int v18 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      int v19 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 112))(a1, v14);
      CCLogStream::logCrit(v18, "[dk] %s@%d:btc_profile failed, error %s\n", "getBTCOEX_PROFILE", 47480, v19);
    }
  }
  if (v5) {
    goto LABEL_26;
  }
  return v14;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getBTCOEX_PROFILE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getBTCOEX_PROFILE((void *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::getBTCOEX_PROFILE_ACTIVE(void *a1, uint64_t a2)
{
  uint64_t v11 = 0;
  if (!a2) {
    return 3758097090;
  }
  v10[0] = (char *)&v11 + 4;
  v10[1] = 0x400040004;
  uint64_t v4 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(a1[9] + 5416), (uint64_t)"btc_profile_active", (uint64_t)&kNoTxPayload, (uint64_t)v10, 0);
  uint64_t v5 = v4;
  if (v4 == -536870173 || v4 == 0)
  {
    *(_DWORD *)(a2 + 4) = HIDWORD(v11);
  }
  else if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      BOOL v8 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      BOOL v9 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 112))(a1, v5);
      CCLogStream::logCrit(v8, "[dk] %s@%d:btc_profile_active failed, error %s\n", "getBTCOEX_PROFILE_ACTIVE", 47518, v9);
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getBTCOEX_PROFILE_ACTIVE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getBTCOEX_PROFILE_ACTIVE((void *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::getMCS(void *a1, uint64_t a2)
{
  int v13 = 0;
  if (!a2) {
    return 3758097090;
  }
  v12[0] = &v13;
  v12[1] = 0x400040004;
  uint64_t v4 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(a1[9] + 5416), (uint64_t)"nrate", (uint64_t)&kNoTxPayload, (uint64_t)v12, 0);
  uint64_t v5 = v4;
  if (v4 == -536870173 || v4 == 0)
  {
    int v7 = v13 & 0x7000000;
    if ((v13 & 0x7000000) == 0x1000000)
    {
      int v8 = v13;
    }
    else
    {
      if (v7 != 0x2000000 && v7 != 50331648) {
        return v5;
      }
      int v8 = v13 & 0xF;
    }
    *(_DWORD *)(a2 + 4) = v8;
    return v5;
  }
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      BOOL v9 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      BOOL v10 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 112))(a1, v5);
      CCLogStream::logCrit(v9, "[dk] %s@%d:nrate failed, error %s\n", "getMCS", 47542, v10);
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getMCS(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getMCS((void *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::getMCS_VHT(void *a1, _DWORD *a2)
{
  int v14 = 0;
  if (!a2) {
    return 3758097090;
  }
  v13[0] = &v14;
  v13[1] = 0x400040004;
  uint64_t v4 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(a1[9] + 5416), (uint64_t)"nrate", (uint64_t)&kNoTxPayload, (uint64_t)v13, 0);
  uint64_t v5 = v4;
  if (v4 == -536870173 || v4 == 0)
  {
    int v7 = v14;
    if ((v14 & 0x7000000) == 0x2000000)
    {
      a2[1] = v14 & 0xF;
      a2[2] = v7 >> 4;
      if ((v7 & 0x800000) != 0) {
        int v8 = 400;
      }
      else {
        int v8 = 800;
      }
      a2[4] = v8;
      switch(((v7 & 0x70000u) - 0x10000) >> 16)
      {
        case 0u:
          int v9 = 20;
          goto LABEL_19;
        case 1u:
          int v9 = 40;
          goto LABEL_19;
        case 2u:
          int v9 = 80;
          goto LABEL_19;
        case 3u:
          int v9 = 160;
LABEL_19:
          a2[3] = v9;
          break;
        default:
          return v5;
      }
    }
  }
  else if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      BOOL v10 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      uint64_t v11 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 112))(a1, v5);
      CCLogStream::logCrit(v10, "[dk] %s@%d:nrate failed, error %s\n", "getMCS_VHT", 47573, v11);
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getMCS_VHT(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANCore::getMCS_VHT((void *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::getGUARD_INTERVAL(void *a1, uint64_t a2)
{
  unsigned int v12 = 0;
  if (!a2) {
    return 3758097090;
  }
  v11[0] = &v12;
  v11[1] = 0x400040004;
  uint64_t v4 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(a1[9] + 5416), (uint64_t)"nrate", (uint64_t)&kNoTxPayload, (uint64_t)v11, 0);
  uint64_t v5 = v4;
  if (v4 == -536870173 || v4 == 0)
  {
    if ((v12 & 0x7000000) == 0x2000000)
    {
      if ((v12 & 0x800000) != 0) {
        int v7 = 400;
      }
      else {
        int v7 = 800;
      }
    }
    else if ((v12 & 0x7000000) == 0x3000000)
    {
      switch((v12 >> 10) & 3)
      {
        case 2u:
          int v7 = 1600;
          break;
        case 3u:
          int v7 = 3200;
          break;
        default:
          goto LABEL_10;
      }
    }
    else
    {
LABEL_10:
      int v7 = 800;
    }
    *(_DWORD *)(a2 + 4) = v7;
  }
  else if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      int v8 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      int v9 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 112))(a1, v5);
      CCLogStream::logCrit(v8, "[dk] %s@%d:nrate failed, error %s\n", "getGUARD_INTERVAL", 47620, v9);
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getGUARD_INTERVAL(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getGUARD_INTERVAL((void *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::getNSS(void *a1, uint64_t a2)
{
  int v16 = 0;
  if (!a2) {
    return 3758097090;
  }
  v15[0] = &v16;
  v15[1] = 0x400040004;
  uint64_t v4 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(a1[9] + 5416), (uint64_t)"nrate", (uint64_t)&kNoTxPayload, (uint64_t)v15, 0);
  uint64_t v5 = v4;
  if (v4 != -536870173 && v4 != 0)
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v9 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        BOOL v10 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 112))(a1, v5);
        CCLogStream::logCrit(v9, "[dk] %s@%d:nrate failed, error %s\n", "getNSS", 47687, v10);
      }
    }
    return v5;
  }
  *(_DWORD *)(a2 + 4) = 0;
  unsigned int v7 = ((v16 & 0x7000000u) - 0x1000000) >> 24;
  if (v7 - 1 < 3)
  {
    int v8 = v16 >> 4;
    *(_DWORD *)(a2 + 4) = v8;
    if (v8) {
      return v5;
    }
    goto LABEL_23;
  }
  if (!v7)
  {
    unsigned int v11 = v16 & 0x7F;
    if (v11 <= 7)
    {
      int v12 = 1;
LABEL_22:
      *(_DWORD *)(a2 + 4) = v12;
      return v5;
    }
    if (v11 <= 0xF)
    {
      int v12 = 2;
      goto LABEL_22;
    }
    if (v11 <= 0x17)
    {
      int v12 = 3;
      goto LABEL_22;
    }
    if (v11 <= 0x1F)
    {
      int v12 = 4;
      goto LABEL_22;
    }
  }
LABEL_23:
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      int v14 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v14, "[dk] %s@%d: Zero NSS streams, rspec[0x%08x]\n", "getNSS", 47716, v16);
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getNSS(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getNSS((void *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::getRADIO_INFO(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 3758097090;
  }
  uint64_t result = 0;
  *(_DWORD *)(a2 + 4) = 1;
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getRADIO_INFO(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 3758097090;
  }
  uint64_t result = 0;
  *(_DWORD *)(a2 + 4) = 1;
  return result;
}

uint64_t AppleBCMWLANCore::getMAX_NSS_FOR_AP(void *a1, uint64_t a2)
{
  uint64_t v11 = 0;
  if (!a2) {
    return 3758097090;
  }
  v10[0] = (char *)&v11 + 4;
  v10[1] = 0x400040004;
  uint64_t v4 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(a1[9] + 5416), (uint64_t)"btc_nss", (uint64_t)&kNoTxPayload, (uint64_t)v10, 0);
  uint64_t v5 = v4;
  if (v4 == -536870173 || v4 == 0)
  {
    *(_DWORD *)(a2 + 4) = HIDWORD(v11);
  }
  else if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      int v8 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      int v9 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 112))(a1, v5);
      CCLogStream::logCrit(v8, "[dk] %s@%d:btc_nss failed, error %s\n", "getMAX_NSS_FOR_AP", 47751, v9);
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getMAX_NSS_FOR_AP(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getMAX_NSS_FOR_AP((void *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::getBTCOEX_2G_CHAIN_DISABLE(void *a1, uint64_t a2)
{
  if (!a2) {
    return 3758097090;
  }
  AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(a1[9] + 5416));
  uint64_t v4 = IOMallocZeroData();
  unsigned __int16 MaxCmdRxPayload = AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(a1[9] + 5416));
  unsigned __int16 v6 = AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(a1[9] + 5416));
  BOOL v7 = v4 != 0;
  BOOL v8 = MaxCmdRxPayload != 0;
  BOOL v9 = !v7 || !v8;
  if (v7 && v8) {
    unint64_t v10 = ((unint64_t)v6 << 32) | MaxCmdRxPayload;
  }
  else {
    unint64_t v10 = 0;
  }
  if (v9) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v4;
  }
  v18[0] = v11;
  v18[1] = v10;
  uint64_t v12 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(a1[9] + 5416), (uint64_t)"btc_2g_shchain_disable", (uint64_t)&kNoTxPayload, (uint64_t)v18, 0);
  uint64_t v13 = v12;
  if (v12 == -536870173 || v12 == 0)
  {
    *(_WORD *)(a2 + 4) = *(_WORD *)(v4 + 4);
LABEL_18:
    IOFreeData();
    return v13;
  }
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      int v16 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      int v17 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 112))(a1, v13);
      CCLogStream::logCrit(v16, "[dk] %s@%d:btc_2g_schain_disable failed, error %s\n", "getBTCOEX_2G_CHAIN_DISABLE", 47776, v17);
    }
  }
  if (v4) {
    goto LABEL_18;
  }
  return v13;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getBTCOEX_2G_CHAIN_DISABLE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::getBTCOEX_2G_CHAIN_DISABLE((void *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::getChanSpec(uint64_t a1, int a2, int a3, int *a4)
{
  if (a2 && (uint64_t v6 = *(void *)(a1 + 72), v7 = *(unsigned __int16 *)(v6 + 19772), *(_WORD *)(v6 + 19772)))
  {
    while (1)
    {
      unsigned int AppleChannelSpec = AppleBCMWLANChanSpec::getAppleChannelSpec(*(int ***)(*(void *)(a1 + 72) + 17576), *(unsigned __int16 *)(*(void *)(a1 + 72) + 2 * v7 + 19772));
      if (a3 == (unsigned __int16)(AppleChannelSpec & 0xC000) >> 14)
      {
        unsigned int v11 = AppleChannelSpec;
        if (ChanSpecGetPrimaryChannel() == a2)
        {
          int v12 = (v11 >> 11) & 7;
          if (*a4 >= v12) {
            break;
          }
        }
      }
      if (v7-- <= 1) {
        goto LABEL_7;
      }
    }
    *a4 = v12;
    return *(unsigned __int16 *)(*(void *)(a1 + 72) + 2 * v7 + 19772);
  }
  else
  {
LABEL_7:
    uint64_t result = 0;
    *a4 = 1;
  }
  return result;
}

uint64_t AppleBCMWLANCore::getPOWER_DEBUG_INFO(AppleBCMWLANCore *a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 4) = 0;
  *(_DWORD *)(a2 + 8) = 0;
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v25[0] = v4;
  v25[1] = v4;
  if (!AppleBCMWLANCore::isRejectingCommands(a1))
  {
    BYTE4(v25[0]) = 0;
    LODWORD(v25[0]) = 13;
    if (AppleBCMWLANCore::getPowerStats(a1, (_DWORD *)a2, (int *)v25))
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v23 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logNotice(v23, "[dk] %s@%d: Failed to get PM/MPC Duration Values, retrieving Cached Values \n", "getPOWER_DEBUG_INFO", 48029);
        }
      }
    }
  }
  memcpy((void *)(a2 + 624), (const void *)(*((void *)a1 + 9) + 11360), 0x270uLL);
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 76) && !*(unsigned char *)(*((void *)a1 + 9) + 18340))
  {
    memset(__b, 170, sizeof(__b));
    LODWORD(v25[0]) = 32;
    AppleBCMWLANCore::getPowerStats(a1, __b, (int *)v25);
    int v5 = __b[7];
    int v6 = HIDWORD(__b[50]);
    int v7 = __b[60];
    *(_DWORD *)(a2 + 1248) = __b[0];
    *(_DWORD *)(a2 + 1252) = v5;
    long long v8 = *(_OWORD *)((char *)&__b[11] + 4);
    *(_OWORD *)(a2 + 1256) = *(_OWORD *)((char *)&__b[9] + 4);
    *(_OWORD *)(a2 + 1272) = v8;
    *(_OWORD *)(a2 + 1288) = *(_OWORD *)((char *)&__b[13] + 4);
    *(void *)(a2 + 1304) = __b[42];
    *(void *)(a2 + 1316) = __b[59];
    *(_DWORD *)(a2 + 1324) = v7;
    *(_DWORD *)(a2 + 1312) = v6;
    BOOL v9 = (_OWORD *)*((void *)a1 + 9);
    long long v10 = v9[753];
    long long v11 = v9[752];
    long long v12 = v9[751];
    *(_OWORD *)(a2 + 1344) = v9[750];
    *(_OWORD *)(a2 + 1360) = v12;
    *(_OWORD *)(a2 + 1376) = v11;
    *(_OWORD *)(a2 + 1392) = v10;
    *(_OWORD *)(a2 + 1328) = v9[749];
  }
  AppleBCMWLANCore::getInactivityPowerStats(a1, (_DWORD *)(a2 + 1408));
  uint64_t v13 = (_OWORD *)*((void *)a1 + 9);
  long long v14 = v13[2228];
  long long v15 = v13[2229];
  *(_OWORD *)(a2 + 1480) = *(_OWORD *)((char *)v13 + 35676);
  *(_OWORD *)(a2 + 1452) = v14;
  *(_OWORD *)(a2 + 1468) = v15;
  long long v16 = *(_OWORD *)(*((void *)a1 + 9) + 35736);
  long long v18 = *(_OWORD *)(*((void *)a1 + 9) + 35708);
  long long v17 = *(_OWORD *)(*((void *)a1 + 9) + 35724);
  *(_OWORD *)(a2 + 1496) = *(_OWORD *)(*((void *)a1 + 9) + 35692);
  *(_OWORD *)(a2 + 1512) = v18;
  *(_OWORD *)(a2 + 1528) = v17;
  *(_OWORD *)(a2 + 1540) = v16;
  long long v19 = *(_OWORD *)(*((void *)a1 + 9) + 35880);
  long long v21 = *(_OWORD *)(*((void *)a1 + 9) + 35896);
  long long v20 = *(_OWORD *)(*((void *)a1 + 9) + 35912);
  *(_OWORD *)(a2 + 1556) = *(_OWORD *)(*((void *)a1 + 9) + 35864);
  *(_OWORD *)(a2 + 1572) = v19;
  *(_OWORD *)(a2 + 1588) = v21;
  *(_OWORD *)(a2 + 1604) = v20;
  return 0;
}

void *AppleBCMWLANCore::getInactivityPowerStats(void *this, _DWORD *a2)
{
  uint64_t v2 = *(void *)(this[9] + 18032);
  if (v2)
  {
    long long v4 = this;
    *a2 = v2;
    uint64_t v5 = this[9];
    int v6 = *(_DWORD *)(v5 + 18040);
    int v7 = v6 ? *(_DWORD *)(v5 + 18032) - v6 : 0;
    a2[1] = v7;
    a2[4] = *(_DWORD *)(this[9] + 18044);
    a2[3] = *(_DWORD *)(this[9] + 18048);
    a2[5] = *(_DWORD *)(this[9] + 18056) - *(_DWORD *)(this[9] + 18044);
    a2[2] = *(_DWORD *)(this[9] + 18056);
    this = (void *)AppleBCMWLANCore::featureFlagIsBitSet((AppleBCMWLANCore *)this, 76);
    if (this)
    {
      uint64_t v8 = v4[9];
      int v9 = *(_DWORD *)(v8 + 18060);
      if (v9) {
        int v10 = *(_DWORD *)(v8 + 18032) - v9;
      }
      else {
        int v10 = 0;
      }
      a2[6] = v10;
      a2[9] = *(_DWORD *)(v4[9] + 18076) - *(_DWORD *)(v4[9] + 18072);
      a2[8] = *(_DWORD *)(v4[9] + 18068);
      a2[10] = *(_DWORD *)(v4[9] + 18072);
      a2[7] = *(_DWORD *)(v4[9] + 18076);
    }
  }
  return this;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getPOWER_DEBUG_INFO(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t AppleBCMWLANCore::collectOPSEBTStatus(AppleBCMWLANCore *this)
{
  if (AppleBCMWLANCore::checkForOppPowerSaveSupport(this))
  {
    long long v17 = xmmword_100370DAC;
    long long v18 = unk_100370DBC;
    long long v19 = xmmword_100370DCC;
    long long v20 = unk_100370DDC;
    long long v15 = xmmword_100370D8C;
    long long v16 = *(_OWORD *)algn_100370D9C;
    uint64_t OPSStatus = AppleBCMWLANPowerManager::getOPSStatus(*(void *)(*((void *)this + 9) + 5528), (unsigned __int16 *)&v15);
    if (OPSStatus)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unint64_t v3 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v3, "[dk] %s@%d:Failed to Collect OPS Stats\n", "collectOPSEBTStatus", 48640);
        }
      }
    }
    else
    {
      uint64_t v4 = *((void *)this + 9);
      long long v5 = v18;
      long long v7 = v19;
      long long v6 = v20;
      *(_OWORD *)(v4 + 88) = v17;
      *(_OWORD *)(v4 + 104) = v5;
      *(_OWORD *)(v4 + 120) = v7;
      *(_OWORD *)(v4 + 136) = v6;
      long long v8 = v16;
      *(_OWORD *)(v4 + 56) = v15;
      *(_OWORD *)(v4 + 72) = v8;
    }
  }
  else
  {
    uint64_t OPSStatus = 0;
  }
  if (AppleBCMWLANCore::checkForEarlyBeconTerminationSupport(this))
  {
    AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416));
    uint64_t v9 = IOMallocZeroData();
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t OPSStatus = AppleBCMWLANPowerManager::getEBTStatus(*(void *)(*((void *)this + 9) + 5528), v9);
      if (OPSStatus)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            long long v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v11, "[dk] %s@%d:Failed to Collect EBT Status\n", "collectOPSEBTStatus", 48658);
          }
        }
      }
      else
      {
        uint64_t v12 = *((void *)this + 9);
        uint64_t v13 = *(void *)(v10 + 16);
        *(_WORD *)(v12 + 176) = *(_WORD *)(v10 + 24);
        *(void *)(v12 + 168) = v13;
      }
      IOFreeData();
    }
    else
    {
      return 3758097085;
    }
  }
  return OPSStatus;
}

uint64_t AppleBCMWLANCore::getPowerStatsPerSliceIndex(AppleBCMWLANCore *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 46)) {
    long long v7 = "wlc:pwrstats";
  }
  else {
    long long v7 = "pwrstats";
  }
  int IsBitSet = AppleBCMWLANCore::featureFlagIsBitSet(a1, 76);
  if (a4 == 2 && IsBitSet && !*(unsigned char *)(*((void *)a1 + 9) + 18340)) {
    long long v7 = "sc:pwrstats";
  }
  if (!a2) {
    return 22;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 24)) {
    return 0;
  }
  int v67 = 0;
  uint64_t v68 = a4;
  AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(*((void *)a1 + 9) + 5416));
  uint64_t v10 = IOMallocZeroData();
  if (!v10) {
    return 3758097085;
  }
  long long v11 = (unsigned __int16 *)v10;
  int v12 = AppleBCMWLANCore::featureFlagIsBitSet(a1, 76);
  if (a4 == 2 && v12 && !*(unsigned char *)(*((void *)a1 + 9) + 18340)) {
    LODWORD(v68) = 0;
  }
  int v13 = AppleBCMWLANCore::featureFlagIsBitSet(a1, 46);
  long long v14 = (uint64_t *)&v67;
  if (v13) {
    long long v14 = &v68;
  }
  uint64_t v15 = 4;
  if (v13) {
    uint64_t v15 = 8;
  }
  v66[0] = v14;
  v66[1] = v15;
  uint64_t MaxCmdRxPayload = AppleBCMWLANCommander::getMaxCmdRxPayload(*(AppleBCMWLANCommander **)(*((void *)a1 + 9) + 5416));
  unint64_t v17 = MaxCmdRxPayload + ~strlen(v7);
  unint64_t v18 = (unsigned __int16)v17 | ((unint64_t)(unsigned __int16)v17 << 32) | 0x40000;
  if ((_WORD)v17)
  {
    long long v19 = v11;
  }
  else
  {
    unint64_t v18 = 0;
    long long v19 = 0;
  }
  v65[0] = v19;
  v65[1] = v18;
  uint64_t v20 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*((void *)a1 + 9) + 5416), (uint64_t)v7, (uint64_t)v66, (uint64_t)v65, 0);
  if (v20 == -469794537) {
    goto LABEL_26;
  }
  uint64_t v9 = v20;
  if (v20)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v61 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        int v62 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)a1 + 112))(a1, v9);
        CCLogStream::logInfo(v61, "[dk] %s@%d:pwrstats failed, error %s\n", "getPowerStatsPerSliceIndex", 48189, v62);
      }
    }
    goto LABEL_31;
  }
  if (*v11 <= 1u)
  {
LABEL_26:
    AppleBCMWLANCore::featureFlagSetBit(a1, 24);
    uint64_t v9 = 3825172759;
LABEL_31:
    IOFreeData();
    return v9;
  }
  if (v17 >= v11[1]) {
    unint64_t v22 = v11[1];
  }
  else {
    unint64_t v22 = v17;
  }
  if (v22 >= 9)
  {
    int v23 = 4;
    unint64_t v24 = 4;
    while (1)
    {
      unint64_t v25 = (unsigned __int16 *)((char *)v11 + v24);
      uint64_t v26 = *(unsigned __int16 *)((char *)v11 + v24 + 2);
      if (!*(unsigned __int16 *)((char *)v11 + v24 + 2)) {
        break;
      }
      int v27 = (unsigned __int16)*v25;
      switch(*v25)
      {
        case 0:
          *(_DWORD *)&__dst[8] = 0;
          *(void *)__dst = 0;
          if (v26 >= 8) {
            int v28 = 8;
          }
          else {
            int v28 = v26;
          }
          memcpy(__dst, v25, (v28 + 4));
          int v29 = *(_DWORD *)&__dst[8];
          *(_DWORD *)(a2 + 48) += *(_DWORD *)&__dst[4];
          *(_DWORD *)(a2 + 56) += v29;
          if (AppleBCMWLANCore::is4387C2Up((OSDictionary *)a1)) {
            AppleBCMWLANLQM::updateInfraMuticastBroadcastDuration(*(void *)(*((void *)a1 + 9) + 5608), (__n128 *)a2);
          }
          goto LABEL_114;
        case 1:
          memset(v70, 0, 20);
          memset(&__dst[16], 0, 64);
          if (v26 >= 0x60) {
            int v30 = 96;
          }
          else {
            int v30 = v26;
          }
          *(_OWORD *)__dst = 0uLL;
          memcpy(__dst, v25, (v30 + 4));
          *(int32x4_t *)(a2 + 76) = vaddq_s32(*(int32x4_t *)&__dst[4], *(int32x4_t *)(a2 + 76));
          *(int32x4_t *)(a2 + 92) = vaddq_s32(*(int32x4_t *)&__dst[20], *(int32x4_t *)(a2 + 92));
          v31.i64[0] = *(void *)&__dst[36];
          v31.i64[1] = *(void *)((char *)&v70[1] + 4);
          *(int32x4_t *)(a2 + 108) = vaddq_s32(v31, *(int32x4_t *)(a2 + 108));
          goto LABEL_114;
        case 3:
          long long v86 = 0u;
          memset(v87, 0, sizeof(v87));
          long long v84 = 0u;
          long long v85 = 0u;
          long long v82 = 0u;
          long long v83 = 0u;
          long long v80 = 0u;
          long long v81 = 0u;
          long long v78 = 0u;
          long long v79 = 0u;
          long long v76 = 0u;
          long long v77 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v72 = 0u;
          long long v73 = 0u;
          long long v71 = 0u;
          memset(v70, 0, sizeof(v70));
          memset(&__dst[16], 0, 64);
          if (v26 >= 0x1A1) {
            int v32 = 417;
          }
          else {
            int v32 = v26;
          }
          *(_OWORD *)__dst = 0uLL;
          memcpy(__dst, v25, (v32 + 4));
          v33.i64[0] = __PAIR64__(*(unsigned int *)&__dst[16], *(unsigned int *)&__dst[4]);
          v33.i64[1] = *(void *)&__dst[20];
          *(int32x4_t *)a2 = vaddq_s32(v33, *(int32x4_t *)a2);
          *(int32x2_t *)(a2 + 16) = vrev64_s32(vadd_s32(*(int32x2_t *)&__dst[32], *(int32x2_t *)(a2 + 20)));
          *(int32x2_t *)(a2 + 28) = vadd_s32(*(int32x2_t *)&v87[9], *(int32x2_t *)(a2 + 28));
          *(_DWORD *)(a2 + 36) += *(_DWORD *)&v87[17];
          goto LABEL_114;
        case 4:
          *(_DWORD *)&__dst[8] = 0;
          *(void *)__dst = 0;
          if (v26 >= 8) {
            int v34 = 8;
          }
          else {
            int v34 = v26;
          }
          memcpy(__dst, v25, (v34 + 4));
          *(int32x2_t *)(a2 + 40) = vadd_s32(*(int32x2_t *)&__dst[4], *(int32x2_t *)(a2 + 40));
          goto LABEL_114;
        case 5:
          memset(__dst, 0, 20);
          if (v26 >= 0x10) {
            int v35 = 16;
          }
          else {
            int v35 = v26;
          }
          memcpy(__dst, v25, (v35 + 4));
          *(int32x4_t *)(a2 + 224) = vaddq_s32(*(int32x4_t *)&__dst[4], *(int32x4_t *)(a2 + 224));
          goto LABEL_114;
        case 6:
          memset(v70, 0, 52);
          memset(&__dst[16], 0, 64);
          if (v26 >= 0x80) {
            int v36 = 128;
          }
          else {
            int v36 = v26;
          }
          *(_OWORD *)__dst = 0uLL;
          memcpy(__dst, v25, (v36 + 4));
          OSNumberPtr v37 = *(AppleBCMWLANBssManager **)(*((void *)a1 + 9) + 5512);
          if (v37) {
            AppleBCMWLANIOReportingCore::report(v37, (unsigned int *)__dst);
          }
          long long v38 = *(_OWORD *)&__dst[20];
          *(_OWORD *)(a2 + 240) = *(_OWORD *)&__dst[4];
          *(_OWORD *)(a2 + 256) = v38;
          long long v39 = *(_OWORD *)&__dst[52];
          *(_OWORD *)(a2 + 272) = *(_OWORD *)&__dst[36];
          *(_OWORD *)(a2 + 288) = v39;
          *(_DWORD *)(a2 + 304) = *(_DWORD *)&__dst[68];
          *(_OWORD *)(a2 + 308) = *(_OWORD *)((char *)&v70[3] + 4);
          *(void *)(a2 + 324) = *(void *)((char *)&v70[5] + 4);
          goto LABEL_114;
        case 7:
          memset(__dst, 0, 64);
          if (v26 >= 0x3C) {
            int v40 = 60;
          }
          else {
            int v40 = v26;
          }
          memcpy(__dst, v25, (v40 + 4));
          v41.i64[0] = __PAIR64__(*(unsigned int *)&__dst[16], *(unsigned int *)&__dst[4]);
          v42.i64[0] = *(void *)&__dst[28];
          v41.i64[1] = *(void *)&__dst[20];
          v42.i64[1] = __PAIR64__(*(unsigned int *)&__dst[48], *(unsigned int *)&__dst[36]);
          int32x4_t v43 = vaddq_s32(v42, *(int32x4_t *)(a2 + 16));
          *(int32x4_t *)a2 = vaddq_s32(v41, *(int32x4_t *)a2);
          *(int32x4_t *)(a2 + 16) = v43;
          *(int32x2_t *)(a2 + 32) = vadd_s32(*(int32x2_t *)&__dst[56], *(int32x2_t *)(a2 + 32));
          int v44 = AppleBCMWLANCore::featureFlagIsBitSet(a1, 76);
          if (a4 == 2 && v44 && !*(unsigned char *)(*((void *)a1 + 9) + 18340)) {
            *(void *)(a2 + 472) = *(void *)&__dst[16];
          }
          goto LABEL_114;
        case 9:
          memset(__dst, 0, 48);
          if (v26 >= 0x2C) {
            int v45 = 44;
          }
          else {
            int v45 = v26;
          }
          memcpy(__dst, v25, (v45 + 4));
          *(int32x4_t *)(a2 + 332) = vaddq_s32(*(int32x4_t *)&__dst[4], *(int32x4_t *)(a2 + 332));
          *(int32x2_t *)(a2 + 348) = vadd_s32(*(int32x2_t *)&__dst[20], *(int32x2_t *)(a2 + 348));
          *(_DWORD *)(a2 + 356) += *(_DWORD *)&__dst[28];
          if (AppleBCMWLANCore::isOCLEnabled(a1)) {
            *(int32x2_t *)(a2 + 360) = vadd_s32(*(int32x2_t *)&__dst[32], *(int32x2_t *)(a2 + 360));
          }
          if (!AppleBCMWLANCore::checkForOppPowerSaveSupport(a1)) {
            goto LABEL_112;
          }
          uint64_t v46 = *((void *)a1 + 9);
          int v47 = *(unsigned __int16 *)(v46 + 56);
          if (v47 == 2)
          {
            *(_DWORD *)(a2 + 388) = *(_DWORD *)(v46 + 80);
            *(_DWORD *)(a2 + 384) = *(_DWORD *)(*((void *)a1 + 9) + 76);
            *(_DWORD *)(a2 + 392) = *(_DWORD *)(*((void *)a1 + 9) + 140);
            *(_DWORD *)(a2 + 396) = *(_DWORD *)(*((void *)a1 + 9) + 144);
            uint64_t v48 = (_DWORD *)(*((void *)a1 + 9) + 148);
            uint64_t v49 = (_DWORD *)(a2 + 400);
          }
          else
          {
            if (v47 != 1) {
              goto LABEL_112;
            }
            *(_DWORD *)(a2 + 388) = *(_DWORD *)(v46 + 80);
            uint64_t v48 = (_DWORD *)(*((void *)a1 + 9) + 76);
            uint64_t v49 = (_DWORD *)(a2 + 384);
          }
          *uint64_t v49 = *v48;
LABEL_112:
          if (AppleBCMWLANCore::checkForEarlyBeconTerminationSupport(a1))
          {
            *(_DWORD *)(a2 + 368) = *(_DWORD *)(*((void *)a1 + 9) + 168);
            *(_DWORD *)(a2 + 376) = *(_DWORD *)(*((void *)a1 + 9) + 172);
            *(_DWORD *)(a2 + 372) = *(_DWORD *)(*((void *)a1 + 9) + 176);
            *(_DWORD *)(a2 + 380) = *(_DWORD *)(*((void *)a1 + 9) + 192);
          }
LABEL_114:
          unint64_t v64 = 0;
          if (AppleBCMWLANCore::safe_align_up(a1, v24 + v26, 4uLL, &v64))
          {
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              if (CCLogStream::shouldLog())
              {
                int v60 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                CCLogStream::logAlert(v60, "[dk] %s@%d:safe_align_up failed\n");
              }
            }
            goto LABEL_124;
          }
          unint64_t v24 = v64;
          if (v64 >= 0xFFFF)
          {
            if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
            {
              (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              if (CCLogStream::shouldLog())
              {
                uint64_t v63 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
                CCLogStream::logAlert(v63, "[dk] %s@%d:UINT16_MAX overflow nextAlignedIndex\n");
              }
            }
LABEL_124:
            IOFreeData();
            return 22;
          }
          int v23 = v64;
          if (v64 + 4 >= v22) {
            goto LABEL_117;
          }
          break;
        case 0xA:
          *(void *)__dst = 0;
          if (v26 >= 4) {
            int v50 = 4;
          }
          else {
            int v50 = v26;
          }
          memcpy(__dst, v25, (v50 + 4));
          goto LABEL_114;
        case 0xB:
          *(void *)__dst = 0;
          if (v26 >= 4) {
            int v51 = 4;
          }
          else {
            int v51 = v26;
          }
          memcpy(__dst, v25, (v51 + 4));
          *(_DWORD *)(a2 + 416) = *(_DWORD *)&__dst[4];
          goto LABEL_114;
        case 0xC:
        case 0xD:
          goto LABEL_114;
        case 0xE:
          *(void *)__dst = 0;
          if (v26 >= 4) {
            int v52 = 4;
          }
          else {
            int v52 = v26;
          }
          memcpy(__dst, v25, (v52 + 4));
          *(_DWORD *)(a2 + 404) = *(_DWORD *)&__dst[4];
          goto LABEL_114;
        case 0xF:
          *(_OWORD *)__dst = 0uLL;
          if (v26 >= 0xC) {
            int v53 = 12;
          }
          else {
            int v53 = v26;
          }
          memcpy(__dst, v25, (v53 + 4));
          *(_DWORD *)(a2 + 408) += *(_DWORD *)&__dst[8];
          goto LABEL_114;
        case 0x11:
          memset(__dst, 0, 24);
          if (v26 >= 0x14) {
            int v54 = 20;
          }
          else {
            int v54 = v26;
          }
          memcpy(__dst, v25, (v54 + 4));
          *(int32x4_t *)(a2 + 484) = vaddq_s32(*(int32x4_t *)&__dst[4], *(int32x4_t *)(a2 + 484));
          *(_DWORD *)(a2 + 500) += *(_DWORD *)&__dst[20];
          goto LABEL_114;
        case 0x12:
          LODWORD(v71) = 0;
          memset(v70, 0, sizeof(v70));
          memset(&__dst[16], 0, 64);
          if (v26 >= 0x90) {
            int v55 = 144;
          }
          else {
            int v55 = v26;
          }
          *(_OWORD *)__dst = 0uLL;
          memcpy(__dst, v25, (v55 + 4));
          *(_DWORD *)(a2 + 552) += *(_DWORD *)&__dst[12];
          *(_DWORD *)(a2 + 556) += *(_DWORD *)&__dst[24];
          *(_DWORD *)(a2 + 560) += *(_DWORD *)&__dst[36];
          *(_DWORD *)(a2 + 564) += *(_DWORD *)&__dst[48];
          int v56 = v71;
          int v57 = *(_DWORD *)&__dst[60] + *(_DWORD *)(a2 + 568);
          v58.i64[0] = *(void *)&__dst[4];
          v58.i64[1] = *(void *)&__dst[16];
          *(int32x4_t *)(a2 + 76) = vaddq_s32(v58, *(int32x4_t *)(a2 + 76));
          v58.i64[0] = *(void *)&__dst[28];
          v58.i64[1] = *(void *)&__dst[40];
          *(int32x4_t *)(a2 + 92) = vaddq_s32(v58, *(int32x4_t *)(a2 + 92));
          v58.i64[0] = *(void *)&__dst[52];
          *(_DWORD *)(a2 + 568) = v57;
          v58.i64[1] = v70[7];
          *(int32x4_t *)(a2 + 108) = vaddq_s32(v58, *(int32x4_t *)(a2 + 108));
          *(_DWORD *)(a2 + 572) += v56;
          *(_DWORD *)(a2 + 516) |= 4u;
          goto LABEL_114;
        default:
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              uint64_t v59 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              CCLogStream::logAlert(v59, "[dk] %s@%d:Unknown TLV with pwrstats command. i=%d total_len=%d type=%d len=%d\n", "getPowerStatsPerSliceIndex", 48608, v23, v11[1], v27, v26);
            }
          }
          goto LABEL_114;
      }
    }
  }
LABEL_117:
  IOFreeData();
  return 0;
}

uint64_t AppleBCMWLANCore::checkForOppPowerSaveSupport(AppleBCMWLANCore *this)
{
  uint64_t result = AppleBCMWLANCore::featureFlagIsBitSet(this, 56);
  if (result)
  {
    unint64_t v3 = *(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472);
    return AppleBCMWLANConfigManager::isOPSSupportedInDriver(v3);
  }
  return result;
}

uint64_t AppleBCMWLANCore::getActivePortsFromNetworkStack(AppleBCMWLANCore *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      unint64_t v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v18, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "getActivePortsFromNetworkStack", 48938, "getActivePortsFromNetworkStack");
    }
  }
  if (*(void *)(*((void *)this + 9) + 11304))
  {
    if (IOMallocZeroData())
    {
      uint64_t v2 = (_OWORD *)(*((void *)this + 9) + 10056);
      v2[14] = 0u;
      v2[15] = 0u;
      v2[12] = 0u;
      v2[13] = 0u;
      v2[10] = 0u;
      v2[11] = 0u;
      v2[8] = 0u;
      v2[9] = 0u;
      v2[6] = 0u;
      v2[7] = 0u;
      v2[4] = 0u;
      v2[5] = 0u;
      v2[2] = 0u;
      v2[3] = 0u;
      *uint64_t v2 = 0u;
      v2[1] = 0u;
      *(_WORD *)(*((void *)this + 9) + 10312) = 0;
      uint64_t v3 = IOMallocZeroData();
      if (!v3)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          uint64_t v5 = 3758097085;
          if (CCLogStream::shouldLog())
          {
            unint64_t v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v22, "[dk] %s@%d:Failed to allocate packet filter buffer\n", "getActivePortsFromNetworkStack", 49015);
          }
        }
        else
        {
          uint64_t v5 = 3758097085;
        }
        goto LABEL_57;
      }
      uint64_t PacketFilterData = IO80211InfraInterface::getPacketFilterData();
      if (PacketFilterData)
      {
        uint64_t v5 = PacketFilterData;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            long long v21 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v21, "[dk] %s@%d:Failed to get packet filter data\n", "getActivePortsFromNetworkStack", 49028);
          }
        }
        goto LABEL_57;
      }
      unsigned int v8 = *(unsigned __int16 *)(v3 + 264);
      if (v8 >= 0x80) {
        LOWORD(v8) = 128;
      }
      *(_WORD *)(*((void *)this + 9) + 10312) = v8;
      uint64_t v9 = *((void *)this + 9);
      if (*(_WORD *)(v9 + 10312))
      {
        unint64_t v10 = 0;
        do
        {
          *(_WORD *)(v9 + 2 * v10 + 10056) = *(_WORD *)(v3 + 266 + 2 * v10);
          ++v10;
          uint64_t v9 = *((void *)this + 9);
        }
        while (v10 < *(unsigned __int16 *)(v9 + 10312));
      }
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          int v23 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v23, "[dk] %s@%d:%s: Number of active ports - %d networking %d arr size %lu \n", "getActivePortsFromNetworkStack", 49037, "getActivePortsFromNetworkStack", *(unsigned __int16 *)(*((void *)this + 9) + 10312), *(unsigned __int16 *)(v3 + 264), 128);
        }
      }
      if (!*(_WORD *)(*((void *)this + 9) + 10312)) {
        goto LABEL_61;
      }
      int v11 = 0;
      unsigned __int16 v12 = 0;
      do
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            int v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            uint64_t v14 = *((void *)this + 9) + 10056;
            CCLogStream::logAlert(v13, "[dk] %s@%d:%s: Active port - %d, %d, %d, %d, %d, %d, %d, %d\n", "getActivePortsFromNetworkStack", 49042, "getActivePortsFromNetworkStack", *(unsigned __int16 *)(v14 + 2 * v12), *(unsigned __int16 *)(v14 + 2 * (v11 | 1u)), *(unsigned __int16 *)(v14 + 2 * (v11 | 2u)), *(unsigned __int16 *)(v14 + 2 * (v11 | 3u)), *(unsigned __int16 *)(v14 + 2 * (v11 | 4u)), *(unsigned __int16 *)(v14 + 2 * (v11 | 5u)), *(unsigned __int16 *)(v14 + 2 * (v11 | 6u)), *(unsigned __int16 *)(v14 + 2 * (v11 | 7u)));
          }
        }
        v12 += 8;
        int v11 = v12;
      }
      while (v12 < *(unsigned __int16 *)(*((void *)this + 9) + 10312));
      if (*(_WORD *)(*((void *)this + 9) + 10312))
      {
        if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          uint64_t v5 = 0;
          goto LABEL_57;
        }
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v5 = 0;
        if ((CCLogStream::shouldLog() & 1) == 0)
        {
LABEL_57:
          IOFreeData();
          IOFreeData();
          return v5;
        }
        int v15 = 49052;
      }
      else
      {
LABEL_61:
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            unint64_t v24 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v24, "[dk] %s@%d: is enabled but there are no active ports in the system, falling back to legacy WoW \n", "getActivePortsFromNetworkStack", 49047);
          }
        }
        uint64_t v5 = 3758097084;
        if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
          goto LABEL_57;
        }
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if ((CCLogStream::shouldLog() & 1) == 0) {
          goto LABEL_57;
        }
        int v15 = 49048;
      }
      long long v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v16, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "getActivePortsFromNetworkStack", v15, "getActivePortsFromNetworkStack");
      goto LABEL_57;
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v20 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v20, "[dk] %s@%d:Active port allocation failure\n", "getActivePortsFromNetworkStack", 48949);
      }
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t v5 = 3758097085;
      if (CCLogStream::shouldLog())
      {
        long long v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logNoticeIf(v7, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "getActivePortsFromNetworkStack", 48950, "getActivePortsFromNetworkStack");
      }
    }
    else
    {
      return 3758097085;
    }
  }
  else
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v19, "[dk] %s@%d:ivars->fInfraSkywalkInterface is null\n", "getActivePortsFromNetworkStack", 48941);
      }
    }
    uint64_t v5 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logNoticeIf(v6, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "getActivePortsFromNetworkStack", 48942, "getActivePortsFromNetworkStack");
      }
    }
  }
  return v5;
}

uint64_t AppleBCMWLANCore::configureActivePortsInToChip(IOService *this, int a2)
{
  unsigned __int8 v46 = 1;
  unsigned __int8 v45 = 0;
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      OSNumberPtr v37 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logNoticeIf(v37, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "configureActivePortsInToChip", 49072, "configureActivePortsInToChip");
    }
  }
  IOParseBootArgNumber("wlan.enable.wol-ports", &v46, 1);
  IOParseBootArgNumber("wlan.enable.wol-prune", &v45, 1);
  uint64_t v4 = (unsigned __int8 *)IOMallocZeroData();
  if (!v4) {
    return 3758097085;
  }
  uint64_t v5 = v4;
  int v41 = a2;
  *(_WORD *)uint64_t v4 = 0;
  long long v6 = (char *)IOMallocZeroData();
  long long v7 = v6;
  if (v6)
  {
    strcpy(v6, "Active Ports:");
    unsigned int v8 = 13;
  }
  else
  {
    unsigned int v8 = 0;
  }
  unint64_t v10 = this[1].OSObject::OSObjectInterface::__vftable;
  if (!LOWORD(v10[644].free))
  {
    unsigned __int16 v12 = 0;
    if (!v6) {
      goto LABEL_36;
    }
    goto LABEL_34;
  }
  unint64_t v11 = 0;
  unsigned __int16 v12 = 0;
  do
  {
    int v13 = *((unsigned __int16 *)&v10[628].free + v11);
    if (v45)
    {
      switch(v13)
      {
        case 0:
          goto LABEL_30;
        case 7:
          unsigned int v14 = 0;
          if (!v7 || v8 > 0x3FE) {
            goto LABEL_28;
          }
          int v15 = &v7[v8];
          int v16 = 1024;
          size_t v17 = 1024 - v8;
          int v18 = 7;
          goto LABEL_27;
        case 9:
          unsigned int v14 = 0;
          if (!v7 || v8 > 0x3FE) {
            goto LABEL_28;
          }
          int v15 = &v7[v8];
          int v16 = 1024;
          size_t v17 = 1024 - v8;
          int v18 = 9;
LABEL_27:
          unsigned int v14 = snprintf(v15, v17, "(*%u) ", v18);
          if (v14 > 0x3FF)
          {
LABEL_29:
            v8 += v16;
            goto LABEL_30;
          }
LABEL_28:
          int v16 = v14;
          goto LABEL_29;
      }
    }
    else if (!v13)
    {
      goto LABEL_30;
    }
    unsigned int v19 = 0;
    *(_WORD *)&v5[2 * v12 + 4] = v13;
    if (!v7 || v8 > 0x3FE || (v20 = 1024, unsigned int v19 = snprintf(&v7[v8], 1024 - v8, "%u ", v13), v19 <= 0x3FF)) {
      int v20 = v19;
    }
    v8 += v20;
    ++v12;
LABEL_30:
    ++v11;
    unint64_t v10 = this[1].OSObject::OSObjectInterface::__vftable;
  }
  while (v11 < LOWORD(v10[644].free));
  if (v7)
  {
LABEL_34:
    if (v8 > 0x3FE) {
      goto LABEL_36;
    }
    snprintf(&v7[v8], 1024 - v8, "\n");
    unint64_t v10 = this[1].OSObject::OSObjectInterface::__vftable;
LABEL_37:
    if (v10[885].init && CCLogStream::shouldLog()) {
      CCLogStream::log();
    }
    *long long v7 = 0;
    if (LOWORD(this[1].OSObject::OSObjectInterface::__vftable[644].free)) {
      BOOL v21 = v46 == 0;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_61;
    }
    if (!v7) {
      goto LABEL_52;
    }
    strcpy(v7, " Additional WoL packet filter UDP/TCP ports: ");
    unsigned __int16 v22 = v12 + 1;
    *(_WORD *)&v5[2 * v12 + 4] = 7;
    unsigned int v23 = snprintf(v7 + 45, 0x3D3uLL, "%u ", 7);
    if (v23 >= 0x400)
    {
      unsigned int v25 = 0;
      v12 += 2;
      *(_WORD *)&v5[2 * v22 + 4] = 9;
      unsigned int v24 = 1069;
    }
    else
    {
      unsigned int v24 = v23 + 45;
      v12 += 2;
      *(_WORD *)&v5[2 * v22 + 4] = 9;
      if (v23 <= 0x3D1)
      {
        unsigned int v25 = snprintf(&v7[v24], 979 - v23, "%u ", 9);
        if (v25 > 0x3FF)
        {
LABEL_57:
          if (this[1].OSObject::OSObjectInterface::__vftable[885].init && CCLogStream::shouldLog()) {
            CCLogStream::log();
          }
          *long long v7 = 0;
          goto LABEL_61;
        }
      }
      else
      {
        unsigned int v25 = 0;
      }
    }
    if (v25 + v24 <= 0x3FE) {
      snprintf(&v7[v25 + v24], 1024 - (v25 + v24), "\n");
    }
    goto LABEL_57;
  }
LABEL_36:
  if (v7) {
    goto LABEL_37;
  }
  if (LOWORD(v10[644].free)) {
    BOOL v26 = v46 == 0;
  }
  else {
    BOOL v26 = 1;
  }
  if (!v26)
  {
LABEL_52:
    *(_WORD *)&v5[2 * v12 + 4] = 7;
    unsigned __int16 v27 = v12 + 1;
    v12 += 2;
    *(_WORD *)&v5[2 * v27 + 4] = 9;
  }
LABEL_61:
  *((_WORD *)v5 + 1) = v12;
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      long long v38 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logAlert(v38, "[dk] %s@%d: tag[0x%08x] version[%u] enableWoLPorts[%u] pruneWoLPorts[%u], fActivePortCnt[%u] count[%u] portListlen[%u]\n", "configureActivePortsInToChip", 49139, v41, *v5, v46, v45, LOWORD(this[1].OSObject::OSObjectInterface::__vftable[644].free), v12, (unsigned __int16)(2 * v12 + 4));
    }
  }
  if (LOWORD(this[1].OSObject::OSObjectInterface::__vftable[644].free))
  {
    if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        long long v39 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v39, "[dk] %s@%d: Setting last valid packet filter ports: tag[0x%08x] version[%u] enableWoLPorts[%u] pruneWoLPorts[%u], fActivePortCnt[%u] count[%u] portListlen[%u]\n", "configureActivePortsInToChip", 49150, v41, *v5, v46, v45, LOWORD(this[1].OSObject::OSObjectInterface::__vftable[644].free), v12, (unsigned __int16)(2 * v12 + 4));
      }
    }
    removePropertyHelper(this, "Last valid: pkt_filter_ports");
    OSDataPtr v28 = OSData::withBytes(v5, (unsigned __int16)(2 * v12 + 4));
    setPropertyHelper(this, "Last valid: pkt_filter_ports", v28);
    if (v28) {
      ((void (*)(OSDataPtr))v28->release)(v28);
    }
  }
  uint64_t v29 = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[1].Dispatch)(this);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v29 + 136))(v29))
  {
    int32x4_t v42 = this;
    int32x4_t v43 = AppleBCMWLANCore::handlePktFilterPortsAsyncCallBack;
    uint64_t v44 = 0;
    uint64_t v30 = AppleBCMWLANCommander::sendIOVarSet((AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free, (uint64_t)"pkt_filter_ports");
  }
  else
  {
    unsigned int free = (AppleBCMWLANCommander *)this[1].OSObject::OSObjectInterface::__vftable[338].free;
    if (2 * v12 == 0xFFFC) {
      int v32 = 0;
    }
    else {
      int v32 = v5;
    }
    int32x4_t v42 = (IOService *)v32;
    int32x4_t v43 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(unsigned __int16)(2 * v12 + 4);
    uint64_t v30 = AppleBCMWLANCommander::runIOVarSet(free, (uint64_t)"pkt_filter_ports", (uint64_t)&v42, 0, 0);
  }
  uint64_t v9 = v30;
  uint64_t v33 = ((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
  if (v9)
  {
    if (v33)
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        int v34 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
        int v35 = (const char *)((uint64_t (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[2].getMetaClass)(this, v9);
        CCLogStream::logAlert(v34, "[dk] %s@%d:Failed to configure Packet Port List : %s\n", "configureActivePortsInToChip", 49170, v35);
        if (!v7) {
          goto LABEL_85;
        }
LABEL_84:
        IOFreeData();
        goto LABEL_85;
      }
    }
LABEL_83:
    if (!v7) {
      goto LABEL_85;
    }
    goto LABEL_84;
  }
  if (!v33) {
    goto LABEL_83;
  }
  ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
  if (!CCLogStream::shouldLog()) {
    goto LABEL_83;
  }
  int v40 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
  CCLogStream::logNoticeIf(v40, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "configureActivePortsInToChip", 49174, "configureActivePortsInToChip");
  if (v7) {
    goto LABEL_84;
  }
LABEL_85:
  IOFreeData();
  return v9;
}

uint64_t AppleBCMWLANCore::configureMaxPktFilter(AppleBCMWLANCore *this)
{
  int v8 = 16;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v5, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "configureMaxPktFilter", 49188, "configureMaxPktFilter");
    }
  }
  uint64_t v2 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  v7[0] = &v8;
  v7[1] = 4;
  uint64_t v3 = AppleBCMWLANCommander::runIOVarSet(v2, (uint64_t)"pkt_filter_max", (uint64_t)v7, 0, 0);
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      long long v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v6, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "configureMaxPktFilter", 49192, "configureMaxPktFilter");
    }
  }
  return v3;
}

uint64_t AppleBCMWLANCore::configureComplexFilters(AppleBCMWLANCore *this, unsigned int a2, unsigned int a3)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      unsigned int v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v19, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "configureComplexFilters", 49209, "configureComplexFilters");
    }
  }
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  memset(v32, 0, sizeof(v32));
  long long v30 = 0u;
  long long v31 = 0u;
  if (a2 == 107)
  {
    LODWORD(v30) = a3 + 107;
    DWORD1(v30) = 2;
    LODWORD(v31) = 655384;
    WORD2(v31) = 16;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        BOOL v21 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        unsigned __int16 v22 = (const char *)my_ip6_sprintf((const unsigned __int8 *)(*((void *)this + 9) + 16 * a3 + 9536));
        CCLogStream::logInfo(v21, "[dk] %s@%d:IPv6 address %s\n", "configureComplexFilters", 49300, v22);
      }
    }
    long long v8 = *(_OWORD *)(*((void *)this + 9) + 16 * a3 + 9536);
    *((void *)&v31 + 1) = -1;
    *(void *)&v32[0] = -1;
    *(_OWORD *)((char *)v32 + 8) = v8;
    *((void *)&v32[1] + 1) = 0x10001000A0006;
    LOWORD(v33) = 15103;
    uint64_t v7 = 66;
    __int16 v6 = 54;
    goto LABEL_11;
  }
  if (a2 == 102)
  {
    *(void *)&long long v30 = 0x200000066;
    LODWORD(v31) = 524304;
    WORD2(v31) = 4;
    *((void *)&v31 + 1) = ((unint64_t)*(unsigned int *)(*((void *)this + 9) + 9496) << 32) | 0xFFFFFFFF;
    *(void *)&v32[0] = 0x1000100080009;
    WORD4(v32[0]) = 511;
    __int16 v6 = 30;
    uint64_t v7 = 42;
LABEL_11:
    HIWORD(v30) = v6;
    WORD6(v30) = 2;
    uint64_t v9 = (char *)this + 72;
    unint64_t v10 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    unint64_t v11 = &v30;
    goto LABEL_13;
  }
  uint64_t v7 = 0;
  unint64_t v11 = 0;
  uint64_t v9 = (char *)this + 72;
  unint64_t v10 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
LABEL_13:
  v29[0] = v11;
  v29[1] = v7;
  uint64_t v12 = AppleBCMWLANCommander::runIOVarSet(v10, (uint64_t)"pkt_filter_add", (uint64_t)v29, 0, 0);
  if (v12)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        unsigned int v14 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v12);
        CCLogStream::logAlert(v13, "[dk] %s@%d: Failed to set packet filter ID = %lu: %s\n", "configureComplexFilters", 49352, a2, v14);
      }
    }
  }
  else
  {
    if (a2 == 107)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v24 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          uint64_t v25 = *((void *)this + 9);
          int v26 = *(unsigned __int8 *)(v25 + 10052);
          unsigned __int16 v27 = (const char *)my_ip6_sprintf((const unsigned __int8 *)(v25 + 16 * a3 + 9536));
          CCLogStream::logAlert(v24, "[dk] %s@%d: Added complex filter: ipv6 filterType[%u] index[%u], addr count[%u] '%s'\n", "configureComplexFilters", 49370, 107, a3, v26, v27);
        }
      }
      ++*(unsigned char *)(*(void *)v9 + 10052);
      *(_OWORD *)(*(void *)v9 + 16 * a3 + 9792) = *(_OWORD *)(*(void *)v9 + 16 * a3 + 9536);
    }
    else if (a2 == 102)
    {
      uint64_t v15 = *((void *)this + 9);
      unsigned int v16 = *(_DWORD *)(v15 + 9496);
      unsigned int v17 = *(_DWORD *)(v15 + 9500);
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v23 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v23, "[dk] %s@%d: Added complex filter: ipv4 filterType[%u] index[%u], addr count[%u], wow ipv4[%u.%u.%u.%u], prog ipv4[%u.%u.%u.%u]\n", "configureComplexFilters", 49363, 102, a3, *(unsigned __int8 *)(*((void *)this + 9) + 10053), v16, BYTE1(v16), BYTE2(v16), HIBYTE(v16), v17, BYTE1(v17), BYTE2(v17), HIBYTE(v17));
        }
      }
      *(_DWORD *)(*(void *)v9 + 9500) = *(_DWORD *)(*(void *)v9 + 9496);
      ++*(unsigned char *)(*(void *)v9 + 10053);
    }
    else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        OSDataPtr v28 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v28, "[dk] %s@%d: Added complex filter: Unknown filterType[%u] index[%u]\n", "configureComplexFilters", 49378, a2, a3);
      }
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v20 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logNoticeIf(v20, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "configureComplexFilters", 49383, "configureComplexFilters");
      }
    }
  }
  return v12;
}

uint64_t AppleBCMWLANCore::configureEapolFilter(AppleBCMWLANCore *this)
{
  memset(bytes, 170, sizeof(bytes));
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v9, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "configureEapolFilter", 49392, "configureEapolFilter");
    }
  }
  if (*(_DWORD *)(*((void *)this + 9) + 19640))
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v10, "[dk] %s@%d:%s: Configuring WoWEapolFilter\n", "configureEapolFilter", 49395, "configureEapolFilter");
      }
    }
    *(void *)&bytes[16] = 0x8E88FFFF00000002;
    *(_OWORD *)bytes = xmmword_10036E9E0;
    uint64_t v2 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    keys[0] = (OSObject *)bytes;
    keys[1] = (OSObject *)24;
    uint64_t v3 = AppleBCMWLANCommander::runIOVarSet(v2, (uint64_t)"pkt_filter_add", (uint64_t)keys, 0, 0);
    if (v3)
    {
      uint64_t v4 = v3;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          int v13 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v4);
          CCLogStream::logAlert(v12, "[dk] %s@%d: pkt_filter_add failed to set packet filter: %s\n", "configureEapolFilter", 49412, v13);
        }
      }
      keys[0] = OSString::withCString("wl_pkt_filter_t.bin");
      values = OSData::withBytes(bytes, 0x38uLL);
      uint64_t v5 = *(CCFaultReporter **)(*((void *)this + 9) + 5544);
      __int16 v6 = OSDictionary::withObjects((const OSObject **)&values, (const OSObject **)keys, 1u, 0);
      uint64_t v7 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v4);
      CCFaultReporter::reportFault(v5, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0xC10Eu, "configureEapolFilter", v6, -469792765, "status=%s", v7);
      AppleBCMWLANUtil::releaseOSObjectArray(keys, (const OSString **)&values, (const OSObject **)1);
      return v4;
    }
    ++*(unsigned char *)(*((void *)this + 9) + 10055);
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      unint64_t v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v11, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "configureEapolFilter", 49430, "configureEapolFilter");
    }
  }
  return 0;
}

uint64_t AppleBCMWLANCore::configureMagicPktFilter(OSObject *this, unsigned int a2, unsigned int a3, int a4)
{
  if (((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      unsigned int v24 = (CCLogStream *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logNoticeIf(v24, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "configureMagicPktFilter", 49439, "configureMagicPktFilter");
    }
  }
  int v32 = -1431655766;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  void v31[3] = v7;
  v31[4] = v7;
  v31[1] = v7;
  v31[2] = v7;
  v31[0] = v7;
  uint64_t MagicPatternData = IO80211InfraInterface::getMagicPatternData();
  if (MagicPatternData)
  {
    uint64_t v9 = MagicPatternData;
    if (((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v10 = (CCLogStream *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logAlert(v10, "[dk] %s@%d:%s: Failed to get magic pattern data (%d)\n", "configureMagicPktFilter", 49445, "configureMagicPktFilter", v9);
      }
    }
    return v9;
  }
  memset(v35, 0, sizeof(v35));
  int v34 = 0;
  uint64_t bytes = a3 + 104;
  if (((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v25 = (CCLogStream *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logAlert(v25, "[dk] %s@%d:Magic pattern(%d) length - %d\n", "configureMagicPktFilter", 49461, a3, *((unsigned __int8 *)v31 + 42 * a3 + 4));
    }
  }
  unint64_t v11 = (char *)v31 + 42 * a3;
  size_t v12 = v11[4];
  v35[1] = v11[4];
  int v13 = v11 + 5;
  memcpy(&v35[2], v11 + 23, v12);
  memcpy((char *)&v35[2] + v12, v13, v12);
  if (a4)
  {
    int v14 = 14;
  }
  else if (a3 > 1)
  {
    if (a3 > 7 || (ivars = this[1].ivars, *((int *)ivars + 4926) < 1))
    {
      if (((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          unsigned __int16 v22 = (CCLogStream *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
          uint64_t ClassNameHelper = (const char *)getClassNameHelper(this);
          CCLogStream::logAlert(v22, "[dk] %s@%d:%s::%s():invalid parameters %d %u\n", "configureMagicPktFilter", 49482, ClassNameHelper, "configureMagicPktFilter", *((_DWORD *)this[1].ivars + 4926), a3);
        }
      }
      goto LABEL_16;
    }
    int v14 = *((_DWORD *)ivars + a3 + 2579);
  }
  else
  {
    int v14 = *((__int16 *)v31 + 21 * a3 + 1);
  }
  v35[0] = v14;
LABEL_16:
  uint64_t v15 = (AppleBCMWLANCommander *)*((void *)this[1].ivars + 677);
  keys[0] = (OSObject *)&bytes;
  keys[1] = (OSObject *)56;
  uint64_t v16 = AppleBCMWLANCommander::runIOVarSet(v15, (uint64_t)"pkt_filter_add", (uint64_t)keys, 0, 0);
  if (v16)
  {
    uint64_t v9 = v16;
    if (((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        int v26 = (CCLogStream *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
        unsigned __int16 v27 = (const char *)((uint64_t (*)(OSObject *, uint64_t))this->OSMetaClassBase::__vftable[2].getMetaClass)(this, v9);
        CCLogStream::logAlert(v26, "[dk] %s@%d: pkt_filter_add failed to set packet filter: %s\n", "configureMagicPktFilter", 49488, v27);
      }
    }
    keys[0] = OSString::withCString("wl_pkt_filter_t.bin");
    values = OSData::withBytes(&bytes, 0x38uLL);
    unsigned int v17 = (CCFaultReporter *)*((void *)this[1].ivars + 693);
    int v18 = OSDictionary::withObjects((const OSObject **)&values, (const OSObject **)keys, 1u, 0);
    unsigned int v19 = (const char *)((uint64_t (*)(OSObject *, uint64_t))this->OSMetaClassBase::__vftable[2].getMetaClass)(this, v9);
    CCFaultReporter::reportFault(v17, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0xC15Au, "configureMagicPktFilter", v18, -469792765, "status=%s", v19);
    AppleBCMWLANUtil::releaseOSObjectArray(keys, (const OSString **)&values, (const OSObject **)1);
  }
  else
  {
    ++*((unsigned char *)this[1].ivars + 10054);
    if (((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        OSDataPtr v28 = (CCLogStream *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logNoticeIf(v28, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "configureMagicPktFilter", 49505, "configureMagicPktFilter");
      }
    }
    return 0;
  }
  return v9;
}

uint64_t AppleBCMWLANCore::configureLegacyFilters(AppleBCMWLANCore *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      long long v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v8, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "configureLegacyFilters", 49513, "configureLegacyFilters");
    }
  }
  int v15 = -1431655766;
  long long v12 = xmmword_10036E9F0;
  int v13 = 4;
  uint64_t v2 = *((void *)this + 9);
  unint64_t v14 = ((unint64_t)*(unsigned int *)(v2 + 9496) << 32) | 0xFFFFFFFF;
  uint64_t v3 = *(AppleBCMWLANCommander **)(v2 + 5416);
  v11[0] = &v12;
  v11[1] = 28;
  uint64_t v4 = AppleBCMWLANCommander::runIOVarSet(v3, (uint64_t)"pkt_filter_add", (uint64_t)v11, 0, 0);
  if (v4)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        __int16 v6 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v4);
        CCLogStream::logAlert(v5, "[dk] %s@%d: Unable to set IP address packet filter: %s\n", "configureLegacyFilters", 49533, v6);
      }
    }
  }
  else
  {
    ++*(unsigned char *)(*((void *)this + 9) + 10053);
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v9, "[dk] %s@%d: Added Unicast IP filter \n", "configureLegacyFilters", 49538);
      }
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logNoticeIf(v10, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "configureLegacyFilters", 49539, "configureLegacyFilters");
      }
    }
  }
  return v4;
}

uint64_t AppleBCMWLANCore::enablePacketFilters(AppleBCMWLANCore *this, int a2)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      long long v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v8, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "enablePacketFilters", 49550, "enablePacketFilters");
    }
  }
  if (IO80211BssManager::isAssociated(*(IO80211BssManager **)(*((void *)this + 9) + 5440)))
  {
    v11[0] = a2;
    v11[1] = 1;
    uint64_t v4 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    v10[0] = v11;
    v10[1] = 8;
    uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"pkt_filter_enable", (uint64_t)v10, 0, 0);
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        __int16 v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logNoticeIf(v6, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "enablePacketFilters", 49562, "enablePacketFilters");
      }
    }
  }
  else
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v9, "[dk] %s@%d:Lost Link while enabling Packet Filters\n", "enablePacketFilters", 49553);
      }
    }
    return 3758096385;
  }
  return v5;
}

uint64_t AppleBCMWLANCore::disablePacketFilters(AppleBCMWLANCore *this, int a2)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      long long v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v7, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "disablePacketFilters", 49571, "disablePacketFilters");
    }
  }
  v10[0] = a2;
  v10[1] = 0;
  uint64_t v4 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  v9[0] = v10;
  v9[1] = 8;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"pkt_filter_enable", (uint64_t)v9, 0, 0);
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      long long v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v8, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "disablePacketFilters", 49578, "disablePacketFilters");
    }
  }
  return v5;
}

uint64_t AppleBCMWLANCore::deleteIPv6PktFilters(AppleBCMWLANCore *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      long long v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v8, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "deleteIPv6PktFilters", 49587, "deleteIPv6PktFilters");
    }
  }
  uint64_t v2 = *((void *)this + 9);
  if (*(_DWORD *)(v2 + 10048))
  {
    int v3 = 0;
    while (1)
    {
      uint64_t v4 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(v2 + 5416), (uint64_t)"pkt_filter_delete");
      if (v4) {
        break;
      }
      ++v3;
      uint64_t v2 = *((void *)this + 9);
      if (*(_DWORD *)(v2 + 10048) <= v3) {
        goto LABEL_8;
      }
    }
    uint64_t v7 = v4;
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        unint64_t v10 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v7);
        return CCLogStream::logAlert(v9, "[dk] %s@%d: Unable to delete Unicast IPv6 address packet filter: %s\n", "deleteIPv6PktFilters", 49600, v10);
      }
    }
  }
  else
  {
LABEL_8:
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        __int16 v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        return CCLogStream::logNoticeIf(v6, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "deleteIPv6PktFilters", 49605, "deleteIPv6PktFilters");
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::deleteIPv4PktFilters(AppleBCMWLANCore *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v5, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "deleteIPv4PktFilters", 49612, "deleteIPv4PktFilters");
    }
  }
  int v2 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"pkt_filter_delete");
  if (v2)
  {
    int v3 = v2;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d: Failed SET IOCTL, cret[0x%08x]\n", "deleteIPv4PktFilters", 49622, v3);
      }
    }
  }
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      __int16 v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      return CCLogStream::logNoticeIf(v6, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "deleteIPv4PktFilters", 49625, "deleteIPv4PktFilters");
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::deleteEapolFilter(AppleBCMWLANCore *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v5, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "deleteEapolFilter", 49631, "deleteEapolFilter");
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      __int16 v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v6, "[dk] %s@%d:%s: deleting WoWEapolFilter\n", "deleteEapolFilter", 49633, "deleteEapolFilter");
    }
  }
  int v2 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"pkt_filter_delete");
  if (v2)
  {
    int v3 = v2;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v8, "[dk] %s@%d: Failed SET IOCTL, cret[0x%08x]\n", "deleteEapolFilter", 49644, v3);
      }
    }
  }
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      return CCLogStream::logNoticeIf(v7, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "deleteEapolFilter", 49647, "deleteEapolFilter");
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::deleteMagicPktFilters(AppleBCMWLANCore *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      long long v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v12, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "deleteMagicPktFilters", 49653, "deleteMagicPktFilters");
    }
  }
  char v2 = AppleBCMWLANConfigManager::wompEnabled(*(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472));
  uint64_t v3 = *((void *)this + 9);
  if (v2)
  {
    if (AppleBCMWLANConfigManager::wompEnabled(*(AppleBCMWLANConfigManager **)(v3 + 5472)))
    {
      int v4 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"pkt_filter_delete");
      if (v4)
      {
        int v5 = v4;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            __int16 v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v6, "[dk] %s@%d: Failed SET IOCTL, cret[0x%08x]\n", "deleteMagicPktFilters", 49676, v5);
          }
        }
      }
    }
  }
  else if (*(_DWORD *)(v3 + 19704) != -2)
  {
    unsigned int v8 = 0;
    do
    {
      int v9 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(v3 + 5416), (uint64_t)"pkt_filter_delete");
      if (v9)
      {
        int v10 = v9;
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            unint64_t v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v11, "[dk] %s@%d: Failed SET IOCTL, cret[0x%08x]\n", "deleteMagicPktFilters", 49669, v10);
          }
        }
      }
      ++v8;
      uint64_t v3 = *((void *)this + 9);
    }
    while (v8 < *(_DWORD *)(v3 + 19704) + 2);
  }
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      int v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      return CCLogStream::logNoticeIf(v13, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "deleteMagicPktFilters", 49681, "deleteMagicPktFilters");
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::resetWoWConfig(AppleBCMWLANCore *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      __int16 v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v6, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "resetWoWConfig", 49687, "resetWoWConfig");
    }
  }
  AppleBCMWLANCore::configureAvgRssiParamsForAssociatedSleepExit(this);
  AppleBCMWLANKeepAliveOffload::unConfigureKeepAlives(*(AppleBCMWLANKeepAliveOffload **)(*((void *)this + 9) + 5552));
  AppleBCMWLANCore::deleteIPv4PktFilters(this);
  AppleBCMWLANCore::deleteMagicPktFilters(this);
  AppleBCMWLANCore::deleteEapolFilter(this);
  AppleBCMWLANCore::deleteIPv6PktFilters(this);
  AppleBCMWLANCore::resetPorts((IOService *)this);
  AppleBCMWLANCore::resetOffloads(this);
  AppleBCMWLANCore::configureICMP(this, 0);
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 43))
  {
    int v2 = 50000;
    int v3 = 15000;
  }
  else
  {
    int v2 = 0xFFFF;
    int v3 = 30000;
  }
  AppleBCMWLANPowerStateAdapter::configureMulticastBroadcastWaitPeriod(*(AppleBCMWLANPowerStateAdapter **)(*((void *)this + 9) + 35848), v2, v3);
  AppleBCMWLANCore::configureLPASMode(this, 0);
  AppleBCMWLANCore::resetPktFilterParams(this);
  AppleBCMWLANCore::allowLinkup(this);
  if (AppleBCMWLANCore::checkForEarlyBeconTerminationSupport(this)
    && AppleBCMWLANPowerManager::configureEarlyBeaconTermination(*(AppleBCMWLANPowerManager **)(*((void *)this + 9) + 5528), 1))
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        return CCLogStream::logAlert(v5, "[dk] %s@%d:Failed to enable EBT in F/W\n", "resetWoWConfig", 49751);
      }
    }
  }
  else
  {
    *(unsigned char *)(*((void *)this + 9) + 6600) = 0;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logInfo(v7, "[dk] %s@%d: Deleted IPv4/IPv6 and Magic packet filters\n", "resetWoWConfig", 49757);
      }
    }
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        unsigned int v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        return CCLogStream::logNoticeIf(v8, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "resetWoWConfig", 49758, "resetWoWConfig");
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::resetOffloads(AppleBCMWLANCore *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      int v3 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v3, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "resetOffloads", 51129, "resetOffloads");
    }
  }
  AppleBCMWLANCore::configureARPOffload(this, 0);
  AppleBCMWLANCore::configureNeighbourDiscovery(this, 0);
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      int v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v4, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "resetOffloads", 51138, "resetOffloads");
    }
  }
  return 0;
}

uint64_t AppleBCMWLANCore::configureICMP(AppleBCMWLANCore *this, int a2)
{
  int v16 = a2;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      unsigned int v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v8, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "configureICMP", 49878, "configureICMP");
    }
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 31)) {
    return 3758097095;
  }
  uint64_t v4 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 136))(v4))
  {
    int v13 = this;
    uint64_t v14 = (uint64_t)AppleBCMWLANCore::handleSetICMPAsyncCallBack;
    uint64_t v15 = 0;
    uint64_t v5 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"pkt_filter_icmp");
  }
  else
  {
    __int16 v6 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    int v13 = (AppleBCMWLANCore *)&v16;
    uint64_t v14 = 4;
    uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v6, (uint64_t)"pkt_filter_icmp", (uint64_t)&v13, 0, 0);
  }
  uint64_t v3 = v5;
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (v16) {
          unint64_t v11 = "Enable";
        }
        else {
          unint64_t v11 = "Disable";
        }
        long long v12 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v3);
        CCLogStream::logAlert(v10, "[dk] %s@%d: Unable to %s 'ICMP' packet filter ioVar: %s\n", "configureICMP", 49977, v11, v12);
      }
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      int v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v9, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "configureICMP", 49982, "configureICMP");
    }
  }
  return v3;
}

uint64_t AppleBCMWLANCore::isIPv6AlreadyProgrammed(AppleBCMWLANCore *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v7, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "isIPv6AlreadyProgrammed", 49765, "isIPv6AlreadyProgrammed");
    }
  }
  uint64_t v2 = *((void *)this + 9);
  uint64_t v3 = *(unsigned int *)(v2 + 10048);
  if (v3)
  {
    uint64_t v4 = (void *)(v2 + 9792);
    while (*v4 == *(v4 - 32) && v4[1] == *(v4 - 31))
    {
      v4 += 2;
      if (!--v3) {
        goto LABEL_12;
      }
    }
    return 0;
  }
  else
  {
LABEL_12:
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logNoticeIf(v8, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "isIPv6AlreadyProgrammed", 49773, "isIPv6AlreadyProgrammed");
      }
    }
    return 1;
  }
}

uint64_t AppleBCMWLANCore::configureARPOffload(AppleBCMWLANCore *this, int a2)
{
  int v33 = a2;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      BOOL v21 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v21, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "configureARPOffload", 49818, "configureARPOffload");
    }
  }
  uint64_t v3 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 136))(v3))
  {
    __b[0] = this;
    __b[1] = AppleBCMWLANCore::handleSetARPOffloadAsyncCallBack;
    __b[2] = 0;
    uint64_t v4 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    long long v31 = &v33;
    uint64_t v32 = 4;
    uint64_t v5 = AppleBCMWLANCommander::sendIOVarSet(v4, (uint64_t)"arpoe");
  }
  else
  {
    __int16 v6 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    __b[0] = &v33;
    __b[1] = 4;
    uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v6, (uint64_t)"arpoe", (uint64_t)__b, 0, 0);
  }
  uint64_t v7 = v5;
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (v33) {
          int v9 = "Enable";
        }
        else {
          int v9 = "Disable";
        }
        uint64_t v27 = (uint64_t)v9;
        uint64_t v28 = (*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v7);
        uint64_t v26 = 49831;
        int v10 = "[dk] %s@%d: Unable to %s ARP filtering: %s\n";
        goto LABEL_14;
      }
    }
  }
  else
  {
    if (!v33) {
      goto LABEL_39;
    }
    int v30 = 9;
    unint64_t v11 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    __b[0] = &v30;
    __b[1] = 4;
    uint64_t v12 = AppleBCMWLANCommander::runIOVarSet(v11, (uint64_t)"arp_ol", (uint64_t)__b, 0, 0);
    if (v12)
    {
      uint64_t v13 = v12;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v23 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          unsigned int v24 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v13);
          CCLogStream::logAlert(v23, "[dk] %s@%d: Error: Unable to turn on ARP monitoring: %s\n", "configureARPOffload", 49842, v24);
        }
      }
    }
    int v14 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"arp_hostip_clear", (uint64_t)&kNoTxPayload, 0, 0);
    if (v14)
    {
      int v15 = v14;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v25 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v25, "[dk] %s@%d: Failed SET IOCTL, cret[0x%08x]\n", "configureARPOffload", 49847, v15);
        }
      }
    }
    memset(__b, 170, sizeof(__b));
    uint64_t ProtocolOffloadData = IO80211InfraInterface::getProtocolOffloadData();
    if (ProtocolOffloadData)
    {
      uint64_t v7 = ProtocolOffloadData;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v17, "[dk] %s@%d:%s: Failed to get protocol offload data (%d)\n");
        }
      }
      return v7;
    }
    int v29 = __b[0];
    int v18 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    long long v31 = &v29;
    uint64_t v32 = 4;
    uint64_t v19 = AppleBCMWLANCommander::runIOVarSet(v18, (uint64_t)"arp_hostip", (uint64_t)&v31, 0, 0);
    if (v19)
    {
      uint64_t v7 = v19;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          uint64_t v26 = 49862;
          uint64_t v27 = (*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v7);
          int v10 = "[dk] %s@%d: Unable to program IP address for ARP filtering: %s\n";
LABEL_14:
          CCLogStream::logAlert(v8, v10, "configureARPOffload", v26, v27, v28);
        }
      }
    }
    else
    {
LABEL_39:
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unsigned __int16 v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logNoticeIf(v22, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "configureARPOffload", 49867, "configureARPOffload");
        }
      }
      return 0;
    }
  }
  return v7;
}

uint64_t AppleBCMWLANCore::configureNeighbourDiscovery(AppleBCMWLANCore *this, int a2)
{
  int v17 = a2;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      unsigned int v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v8, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "configureNeighbourDiscovery", 50026, "configureNeighbourDiscovery");
    }
  }
  if (!AppleBCMWLANCore::featureFlagIsBitSet(this, 30)) {
    return 3758097084;
  }
  AppleBCMWLANCore::clearHostIPv6TableForNeighbourDiscovery(this);
  uint64_t v3 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 136))(v3))
  {
    int v14 = this;
    uint64_t v15 = (uint64_t)AppleBCMWLANCore::handleSetNDOffloadAsyncCallBack;
    uint64_t v16 = 0;
    uint64_t v4 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"ndoe");
  }
  else
  {
    __int16 v6 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    int v14 = (AppleBCMWLANCore *)&v17;
    uint64_t v15 = 4;
    uint64_t v4 = AppleBCMWLANCommander::runIOVarSet(v6, (uint64_t)"ndoe", (uint64_t)&v14, 0, 0);
  }
  uint64_t v5 = v4;
  if (v4)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (v17) {
          unint64_t v11 = "Enable";
        }
        else {
          unint64_t v11 = "Disable";
        }
        uint64_t v12 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
        CCLogStream::logAlert(v10, "[dk] %s@%d: Failure to %s Neighbour Discovery: %s\n", "configureNeighbourDiscovery", 50045, v11, v12);
      }
    }
  }
  if (v17)
  {
    uint64_t v5 = AppleBCMWLANCore::configureHostIPsForNeighbourDiscovery(this);
    if (v5)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v13, "[dk] %s@%d: Failed to configure HOST IPs for Neighbor Discovery\n", "configureNeighbourDiscovery", 50052);
        }
      }
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      int v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v9, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "configureNeighbourDiscovery", 50056, "configureNeighbourDiscovery");
    }
  }
  return v5;
}

uint64_t AppleBCMWLANCore::clearHostIPv6TableForNeighbourDiscovery(AppleBCMWLANCore *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      int v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v9, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "clearHostIPv6TableForNeighbourDiscovery", 50095, "clearHostIPv6TableForNeighbourDiscovery");
    }
  }
  uint64_t v2 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 136))(v2)) {
    uint64_t v3 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"nd_hostip_clear");
  }
  else {
    uint64_t v3 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"nd_hostip_clear", (uint64_t)&kNoTxPayload, 0, 0);
  }
  uint64_t v4 = v3;
  uint64_t v5 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (v4)
  {
    if (v5)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        __int16 v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v7 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v4);
        CCLogStream::logAlert(v6, "[dk] %s@%d: Failed to Clear IPV6 addresses from to IPV6 Table %s\n", "clearHostIPv6TableForNeighbourDiscovery", 50108, v7);
      }
    }
  }
  else if (v5)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      int v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v10, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "clearHostIPv6TableForNeighbourDiscovery", 50111, "clearHostIPv6TableForNeighbourDiscovery");
    }
  }
  return v4;
}

uint64_t AppleBCMWLANCore::configureHostIPsForNeighbourDiscovery(AppleBCMWLANCore *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      int v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v9, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "configureHostIPsForNeighbourDiscovery", 50065, "configureHostIPsForNeighbourDiscovery");
    }
  }
  memset(__b, 170, sizeof(__b));
  uint64_t ProtocolOffloadData = IO80211InfraInterface::getProtocolOffloadData();
  if (ProtocolOffloadData)
  {
    uint64_t v3 = ProtocolOffloadData;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v4, "[dk] %s@%d:%s: Failed to get protocol offload data (%d)\n");
      }
    }
  }
  else if (DWORD1(__b[0]))
  {
    unsigned __int16 v5 = 0;
    while (1)
    {
      __int16 v6 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
      v12[0] = (char *)&__b[v5] + 8;
      v12[1] = 16;
      uint64_t v7 = AppleBCMWLANCommander::runIOVarSet(v6, (uint64_t)"nd_hostip", (uint64_t)v12, 0, 0);
      if (v7) {
        break;
      }
      if (DWORD1(__b[0]) <= ++v5) {
        goto LABEL_12;
      }
    }
    uint64_t v3 = v7;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v3);
        CCLogStream::logAlert(v11, "[dk] %s@%d: Failed to add IPV6 address in to IPV6 Table %s\n");
      }
    }
  }
  else
  {
LABEL_12:
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logNoticeIf(v10, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "configureHostIPsForNeighbourDiscovery", 50087, "configureHostIPsForNeighbourDiscovery");
      }
    }
    return 0;
  }
  return v3;
}

uint64_t AppleBCMWLANCore::getNeighbourDiscoveryStats(AppleBCMWLANCore *this)
{
  memset(v15, 170, sizeof(v15));
  int v14 = 0;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v7, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "getNeighbourDiscoveryStats", 50121, "getNeighbourDiscoveryStats");
    }
  }
  if (!AppleBCMWLANCore::featureFlagIsBitSet(this, 30)) {
    return 3758097084;
  }
  uint64_t v12 = &v14;
  uint64_t v13 = 0x400040004;
  uint64_t v2 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"ndoe", (uint64_t)&kNoTxPayload, (uint64_t)&v12, 0);
  if (v2)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int v9 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v2);
        CCLogStream::logAlert(v8, "[dk] %s@%d: Failure to get Neighbour Discovery status: %s\n", "getNeighbourDiscoveryStats", 50131, v9);
      }
    }
  }
  if (v14)
  {
    uint64_t v12 = (int *)v15;
    uint64_t v13 = 0x1800180018;
    uint64_t v2 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"nd_status", (uint64_t)&kNoTxPayload, (uint64_t)&v12, 0);
    uint64_t v3 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (v2)
    {
      if (v3)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          unsigned __int16 v5 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v2);
          CCLogStream::logAlert(v4, "[dk] %s@%d: Failed collect Neighbor Discovery Stats %s\n", "getNeighbourDiscoveryStats", 50141, v5);
        }
      }
      return v2;
    }
    if (v3)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logInfo(v11, "[dk] %s@%d: Neighbor Discovery Status: \thost_ip_entries %u \thost_ip_overflow %u \n\tpeer_request %u \t\tpeer_request_drop %u \n\tpeer_reply_drop %u \tpeer_service %u \n", "getNeighbourDiscoveryStats", 50145, LODWORD(v15[0]), HIDWORD(v15[0]), LODWORD(v15[1]), HIDWORD(v15[1]), LODWORD(v15[2]), HIDWORD(v15[2]));
      }
    }
    uint64_t v2 = 0;
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      int v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v10, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "getNeighbourDiscoveryStats", 50148, "getNeighbourDiscoveryStats");
    }
  }
  return v2;
}

const char *pmReasonStr(int a1)
{
  if (a1 <= 255)
  {
    if (a1 <= 15)
    {
      switch(a1)
      {
        case 1:
          return "WLC_PMD_WAKE_SET";
        case 2:
          return "WLC_PMD_PM_AWAKE_BCN";
        case 8:
          return "WLC_PMD_SCAN_IN_PROGRESS";
      }
    }
    else if (a1 > 63)
    {
      if (a1 == 64) {
        return "WLC_PMD_PM_PEND";
      }
      if (a1 == 128) {
        return "WLC_PMD_PS_POLL";
      }
    }
    else
    {
      if (a1 == 16) {
        return "WLC_PMD_RM_IN_PROGRESS";
      }
      if (a1 == 32) {
        return "WLC_PMD_AS_IN_PROGRESS";
      }
    }
  }
  else if (a1 > 4095)
  {
    if (a1 >= 0x4000)
    {
      if (a1 == 0x4000) {
        return "WLC_PMD_NON_PRIM_STA_UP";
      }
      if (a1 == 0x8000) {
        return "WLC_PMD_AP_UP";
      }
    }
    else
    {
      if (a1 == 4096) {
        return "WLC_PMD_AWDL_AWAKE";
      }
      if (a1 == 0x2000) {
        return "WLC_PMD_PM2_RADIO_SOFF_PEND";
      }
    }
  }
  else if (a1 > 1023)
  {
    if (a1 == 1024) {
      return "WLC_PMD_TX_PEND_WAR";
    }
    if (a1 == 2048) {
      return "WLC_PMD_GPTIMER_STAY_AWAKE";
    }
  }
  else
  {
    if (a1 == 256) {
      return "WLC_PMD_CHK_UNALIGN_TBTT";
    }
    if (a1 == 512) {
      return "WLC_PMD_APSD_STA_UP";
    }
  }
  return "UNKNOWN";
}

uint64_t AppleBCMWLANCore::ignoreUnicastPackets(AppleBCMWLANCore *this)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      unsigned int v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNoticeIf(v8, 0x8000000uLL, "[dk] %s@%d:Enter %s \n", "ignoreUnicastPackets", 51706, "ignoreUnicastPackets");
    }
  }
  unsigned __int16 v13 = 0;
  read_random();
  int v14 = 0x10000;
  __int16 v15 = -16384;
  uint64_t v2 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  v12[0] = &v14;
  v12[1] = 6;
  uint64_t v3 = AppleBCMWLANCommander::runIOVarSet(v2, (uint64_t)"pkt_filter_ports", (uint64_t)v12, 0, 0);
  uint64_t v4 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (v3)
  {
    if (v4)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unsigned __int16 v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        __int16 v6 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v3);
        CCLogStream::logAlert(v5, "[dk] %s@%d:Failed to configure Packet Port  0 : %s\n", "ignoreUnicastPackets", 51722, v6);
      }
    }
  }
  else
  {
    if (v4)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int v10 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, void))(*(void *)this + 112))(this, 0);
        CCLogStream::logAlert(v9, "[dk] %s@%d:LPAS:Ignore Unicast Packets %s, entropy value[0x%04x], port[%u]\n", "ignoreUnicastPackets", 51725, v10, v13, 0);
      }
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logNoticeIf(v11, 0x8000000uLL, "[dk] %s@%d:Leave %s \n", "ignoreUnicastPackets", 51727, "ignoreUnicastPackets");
      }
    }
  }
  return v3;
}

BOOL AppleBCMWLANCore::isConcurrencyOpModeSet(uint64_t a1, char a2)
{
  return (*(unsigned char *)(*(void *)(a1 + 72) + 19657) & a2) != 0;
}

void *AppleBCMWLANCore::calculateAvailableRoamTime(void *this, int a2, int a3, int *a4)
{
  uint64_t v5 = this[9];
  uint64_t v6 = 6616;
  if (a2 == 2) {
    uint64_t v6 = 6652;
  }
  int v7 = *(_DWORD *)(v5 + v6);
  if (*(_DWORD *)(v5 + 35384))
  {
    *a4 = v7;
  }
  else
  {
    uint64_t v10 = (uint64_t)this;
    int v11 = *a4 - a3;
    if (*a4 <= a3) {
      int v11 = 0;
    }
    if (v11 < v7) {
      int v7 = v11;
    }
    *a4 = v7;
    this = (void *)(*(uint64_t (**)(void *))(*this + 1848))(this);
    if (this)
    {
      (*(void (**)(uint64_t))(*(void *)v10 + 1848))(v10);
      this = (void *)CCLogStream::shouldLog();
      if (this)
      {
        uint64_t v12 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 1848))(v10);
        if (a2 == 1) {
          unsigned __int16 v13 = "WoW";
        }
        else {
          unsigned __int16 v13 = "LPAS";
        }
        return (void *)CCLogStream::logAlert(v12, "[dk] %s@%d:available roam time for %s is %d msecs, consumedRoamTime[%d msec]\n", "calculateAvailableRoamTime", 52225, v13, *a4, a3);
      }
    }
  }
  return this;
}

uint64_t AppleBCMWLANCore::setGAS_REQ(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return AppleBCMWLANGASAdapter::setGAS_REQ(*(void *)(*(void *)(a1 + 72) + 5480), a2, a3);
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setGAS_REQ(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return AppleBCMWLANGASAdapter::setGAS_REQ(*(void *)(*(void *)(a1 + 8) + 5480), a2, a3);
}

AppleBCMWLANCore *AppleBCMWLANCore::setGAS_ABORT(AppleBCMWLANCore *this, void *a2)
{
  return AppleBCMWLANGASAdapter::setGAS_ABORT(*(AppleBCMWLANGASAdapter **)(*((void *)this + 9) + 5480));
}

AppleBCMWLANCore *non-virtual thunk to'AppleBCMWLANCore::setGAS_ABORT(AppleBCMWLANCore *this, void *a2)
{
  return AppleBCMWLANGASAdapter::setGAS_ABORT(*(AppleBCMWLANGASAdapter **)(*((void *)this + 1) + 5480));
}

uint64_t AppleBCMWLANCore::isGASQueryAllowed(AppleBCMWLANCore *this, uint64_t a2, unint64_t a3)
{
  memset(v5, 0, sizeof(v5));
  if (IO80211ThreadProcessInfo::getProcessName((IO80211ThreadProcessInfo *)v5, (char *)0x80, a3)) {
    IO80211Controller::getProcessName(this, (char *)v5, 0x80uLL);
  }
  return 0;
}

uint64_t AppleBCMWLANCore::disableECounters(AppleBCMWLANCore *this)
{
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 53)) {
    uint64_t v6 = AppleBCMWLANCore::disableECountersV2(this, v2, v3, v4, v5);
  }
  else {
    uint64_t v6 = AppleBCMWLANCore::disableECountersV1(this);
  }
  uint64_t v7 = v6;
  uint64_t v8 = *((void *)this + 9);
  if (v6)
  {
    *(_DWORD *)(v8 + 976) = 0;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v9, "[dk] %s@%d:setEcountersEnableStateSync fail =(0x%x) from disableECounters\n", "disableECounters", 53343, v7);
      }
    }
  }
  else
  {
    *(_DWORD *)(v8 + 976) = 2;
  }
  return v7;
}

uint64_t AppleBCMWLANCore::enableECounters(AppleBCMWLANCore *this)
{
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 53)) {
    uint64_t v2 = AppleBCMWLANCore::enableECountersV2(this);
  }
  else {
    uint64_t v2 = AppleBCMWLANCore::enableECountersV1(this);
  }
  uint64_t v3 = v2;
  uint64_t v4 = *((void *)this + 9);
  if (v2)
  {
    *(_DWORD *)(v4 + 976) = 0;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v5, "[dk] %s@%d:setEcountersEnableStateSync fail =(0x%x) from enableECounters\n", "enableECounters", 52665, v3);
      }
    }
  }
  else
  {
    *(_DWORD *)(v4 + 976) = 3;
  }
  return v3;
}

uint64_t AppleBCMWLANCore::enableECountersV2(AppleBCMWLANCore *this)
{
  __int16 v28 = -21846;
  uint64_t v2 = IOMallocZeroData();
  if (!v2) {
    return 12;
  }
  uint64_t v4 = v2;
  __uint64_t n = -21846;
  int __n_2 = 2;
  __int16 __n_6 = 5;
  uint64_t v5 = *((void *)this + 9);
  __int16 v26 = *(_DWORD *)(v5 + 17604);
  __int16 v27 = 0;
  uint64_t v6 = AppleBCMWLANCommandWithXTLV::withLengthAndHeader((AppleBCMWLANCommandWithXTLV *)0x400, &__n_2, (void *)0xC, *(CCLogStream **)(v5 + 14160), v3);
  if (!v6)
  {
    uint64_t v18 = 3758097085;
    goto LABEL_29;
  }
  uint64_t v7 = (AppleBCMWLANCommandWithXTLV *)v6;
  uint64_t EcountersConfigInfraContainer = AppleBCMWLANCore::getEcountersConfigInfraContainer(this, (unsigned __int8 *)v4, 0x80u, &__n);
  if (EcountersConfigInfraContainer) {
    goto LABEL_32;
  }
  AppleBCMWLANCommandWithXTLV::addXTLV(v7, 1, __n, (const void *)v4);
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 104))
  {
    uint64_t EcountersConfigInfraContainer = AppleBCMWLANCore::getEcountersConfigPeerStatsContainer(this, (unsigned __int8 *)v4, 0x80u, &__n, 2);
    if (EcountersConfigInfraContainer) {
      goto LABEL_32;
    }
    AppleBCMWLANCommandWithXTLV::addXTLV(v7, 1, __n, (const void *)v4);
  }
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  uint64_t EcountersConfigInfraContainer = AppleBCMWLANCore::getEcountersConfigSoftAPContainer(this, (unsigned __int8 *)v4, 0x80u, &__n);
  if (EcountersConfigInfraContainer) {
    goto LABEL_32;
  }
  AppleBCMWLANCommandWithXTLV::addXTLV(v7, 1, __n, (const void *)v4);
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  uint64_t EcountersConfigInfraContainer = AppleBCMWLANCore::getEcountersConfigGlobalContainer(this, (unsigned __int8 *)v4, 0x80u, &__n);
  if (EcountersConfigInfraContainer) {
    goto LABEL_32;
  }
  AppleBCMWLANCommandWithXTLV::addXTLV(v7, 1, __n, (const void *)v4);
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  uint64_t EcountersConfigInfraContainer = AppleBCMWLANCore::getEcountersConfigSlice0Container(this, (unsigned __int8 *)v4, 0x80u, &__n);
  if (EcountersConfigInfraContainer) {
    goto LABEL_32;
  }
  AppleBCMWLANCommandWithXTLV::addXTLV(v7, 1, __n, (const void *)v4);
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  uint64_t EcountersConfigInfraContainer = AppleBCMWLANCore::getEcountersConfigSlice1Container(this, (unsigned __int8 *)v4, 0x80u, &__n);
  if (EcountersConfigInfraContainer) {
    goto LABEL_32;
  }
  AppleBCMWLANCommandWithXTLV::addXTLV(v7, 1, __n, (const void *)v4);
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 76))
  {
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)uint64_t v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    uint64_t EcountersConfigInfraContainer = AppleBCMWLANCore::getEcountersConfigSlice2Container(this, (unsigned __int8 *)v4, 0x80u, &__n);
    if (EcountersConfigInfraContainer) {
      goto LABEL_32;
    }
    AppleBCMWLANCommandWithXTLV::addXTLV(v7, 1, __n, (const void *)v4);
  }
  if (!AppleBCMWLANCore::featureFlagIsBitSet(this, 122))
  {
LABEL_17:
    AppleBCMWLANConfigManager::setupFirmwareWithDTDefaults(v7);
    AppleBCMWLANCommandWithXTLV::complete(v7);
    int v9 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    uint64_t CompletionRingPtr = AppleBCMWLANDynamicRingOperationContext::getCompletionRingPtr(v7);
    Commandsize_t Length = AppleBCMWLANCommandWithXTLV::getCommandLength(v7);
    BOOL v12 = CompletionRingPtr != 0;
    BOOL v13 = CommandLength != 0;
    BOOL v14 = !v12 || !v13;
    if (v12 && v13) {
      uint64_t v15 = CommandLength;
    }
    else {
      uint64_t v15 = 0;
    }
    if (v14) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = CompletionRingPtr;
    }
    v22[0] = v16;
    v22[1] = v15;
    uint64_t v17 = AppleBCMWLANCommander::runIOVarSet(v9, (uint64_t)"ecounters", (uint64_t)v22, 0, 0);
    uint64_t v18 = v17;
    if (v17 != -469794537)
    {
      if (v17)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            int v20 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            BOOL v21 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v18);
            CCLogStream::logAlert(v20, "[dk] %s@%d: Error: Unable to set ecounters V2: %s\n", "enableECountersV2", 53277, v21);
          }
        }
      }
    }
    goto LABEL_28;
  }
  uint64_t EcountersConfigInfraContainer = AppleBCMWLANCore::getEcountersConfigPeerStatsContainer(this, (unsigned __int8 *)v4, 0x80u, &__n, 1);
  if (!EcountersConfigInfraContainer)
  {
    AppleBCMWLANCommandWithXTLV::addXTLV(v7, 1, __n, (const void *)v4);
    goto LABEL_17;
  }
LABEL_32:
  uint64_t v18 = EcountersConfigInfraContainer;
LABEL_28:
  (*(void (**)(AppleBCMWLANCommandWithXTLV *))(*(void *)v7 + 16))(v7);
LABEL_29:
  IOFreeData();
  return v18;
}

uint64_t AppleBCMWLANCore::enableECountersV1(AppleBCMWLANCore *this)
{
  uint64_t v2 = IOMallocZeroData();
  if (!v2) {
    return 12;
  }
  uint64_t v3 = v2;
  *(_DWORD *)uint64_t v2 = 327681;
  if (*(_DWORD *)(*((void *)this + 9) + 780) <= 4u) {
    __int16 v4 = 1400;
  }
  else {
    __int16 v4 = 1648;
  }
  *(_WORD *)(v2 + 4) = v4;
  *(_WORD *)(v2 + 6) = *(_DWORD *)(*((void *)this + 9) + 17604);
  *(void *)(v2 + 8) = 0x5F004500030000;
  *(_WORD *)(v2 + 16) = 83;
  uint64_t v5 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  v12[0] = v3;
  v12[1] = 18;
  uint64_t v6 = AppleBCMWLANCommander::runIOVarSet(v5, (uint64_t)"ecounters", (uint64_t)v12, 0, 0);
  uint64_t v7 = v6;
  if (v6 != -469794537 && v6 != 0)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int v11 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v7);
        CCLogStream::logAlert(v10, "[dk] %s@%d: Error: Unable to set ecounters: %s\n", "enableECountersV1", 52705, v11);
      }
    }
  }
  IOFreeData();
  return v7;
}

uint64_t AppleBCMWLANCore::getEcountersConfigSlice0Container(AppleBCMWLANCore *this, unsigned __int8 *a2, unsigned int a3, unsigned __int16 *a4)
{
  uint64_t v4 = 3758097084;
  if (!a2 || !a4) {
    return v4;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 120)) {
    unint64_t v9 = 16;
  }
  else {
    unint64_t v9 = 12;
  }
  if (v9 > a3)
  {
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
      return v4;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (!CCLogStream::shouldLog()) {
      return v4;
    }
    BOOL v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    int v13 = 52735;
    goto LABEL_65;
  }
  *(_DWORD *)a2 = 1;
  *((_WORD *)a2 + 2) = 1;
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 120))
  {
    *((void *)a2 + 1) = 0x30600000304;
    uint64_t v10 = a2 + 16;
  }
  else
  {
    *((_DWORD *)a2 + 2) = 774;
    uint64_t v10 = a2 + 12;
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 59))
  {
    v9 += 4;
    if (v9 <= a3)
    {
      *(_DWORD *)uint64_t v10 = 779;
      v10 += 4;
      goto LABEL_13;
    }
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
      return v4;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (!CCLogStream::shouldLog()) {
      return v4;
    }
    BOOL v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    int v13 = 52757;
LABEL_65:
    CCLogStream::logAlert(v12, "[dk] %s@%d:Error cannot create EcountersConfigSlice0Container buffer too short\n", "getEcountersConfigSlice0Container", v13);
    return v4;
  }
LABEL_13:
  if (!AppleBCMWLANCore::featureFlagIsBitSet(this, 4)) {
    goto LABEL_16;
  }
  v9 += 4;
  if (v9 > a3)
  {
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
      return v4;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (!CCLogStream::shouldLog()) {
      return v4;
    }
    BOOL v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    int v13 = 52765;
    goto LABEL_65;
  }
  *(_DWORD *)uint64_t v10 = 780;
  v10 += 4;
LABEL_16:
  if (!AppleBCMWLANCore::featureFlagIsBitSet(this, 69)) {
    goto LABEL_19;
  }
  v9 += 8;
  if (v9 > a3)
  {
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
      return v4;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (!CCLogStream::shouldLog()) {
      return v4;
    }
    BOOL v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    int v13 = 52773;
    goto LABEL_65;
  }
  *(void *)uint64_t v10 = 0x31100000310;
  v10 += 8;
LABEL_19:
  if (!AppleBCMWLANCore::featureFlagIsBitSet(this, 74)) {
    goto LABEL_22;
  }
  v9 += 4;
  if (v9 > a3)
  {
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
      return v4;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (!CCLogStream::shouldLog()) {
      return v4;
    }
    BOOL v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    int v13 = 52781;
    goto LABEL_65;
  }
  *(_DWORD *)uint64_t v10 = 776;
  v10 += 4;
LABEL_22:
  if (!AppleBCMWLANCore::featureFlagIsBitSet(this, 93)) {
    goto LABEL_25;
  }
  v9 += 4;
  if (v9 > a3)
  {
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
      return v4;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (!CCLogStream::shouldLog()) {
      return v4;
    }
    BOOL v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    int v13 = 52790;
    goto LABEL_65;
  }
  *(_DWORD *)uint64_t v10 = 798;
  v10 += 4;
LABEL_25:
  if (!AppleBCMWLANCore::featureFlagIsBitSet(this, 85)) {
    goto LABEL_28;
  }
  v9 += 4;
  if (v9 > a3)
  {
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
      return v4;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (!CCLogStream::shouldLog()) {
      return v4;
    }
    BOOL v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    int v13 = 52798;
    goto LABEL_65;
  }
  *(_DWORD *)uint64_t v10 = 789;
  v10 += 4;
LABEL_28:
  if (!AppleBCMWLANCore::featureFlagIsBitSet(this, 89))
  {
LABEL_33:
    uint64_t v4 = 0;
    *a4 = v9;
    return v4;
  }
  if (v9 + 4 > a3)
  {
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
      return v4;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (!CCLogStream::shouldLog()) {
      return v4;
    }
    BOOL v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    int v13 = 52806;
    goto LABEL_65;
  }
  *(_DWORD *)uint64_t v10 = 794;
  if (v9 + 8 > a3)
  {
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
      return v4;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (!CCLogStream::shouldLog()) {
      return v4;
    }
    BOOL v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    int v13 = 52811;
    goto LABEL_65;
  }
  *((_DWORD *)v10 + 1) = 795;
  v9 += 12;
  if (v9 <= a3)
  {
    *((_DWORD *)v10 + 2) = 796;
    goto LABEL_33;
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      BOOL v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      int v13 = 52816;
      goto LABEL_65;
    }
  }
  return v4;
}

uint64_t AppleBCMWLANCore::checkForTVPMSupport(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 59);
}

uint64_t AppleBCMWLANCore::getEcountersConfigSlice1Container(AppleBCMWLANCore *this, unsigned __int8 *a2, unsigned int a3, unsigned __int16 *a4)
{
  uint64_t v4 = 3758097084;
  if (!a2 || !a4) {
    return v4;
  }
  if (a3 <= 0xF)
  {
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
      return v4;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (!CCLogStream::shouldLog()) {
      return v4;
    }
    goto LABEL_62;
  }
  *(_DWORD *)a2 = 1;
  *((_WORD *)a2 + 2) = 2;
  *((void *)a2 + 1) = 0x30600000304;
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 73))
  {
    if (a3 > 0x13)
    {
      *((_DWORD *)a2 + 4) = 778;
      unint64_t v9 = a2 + 20;
      unint64_t v10 = 20;
      goto LABEL_8;
    }
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
      return v4;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (!CCLogStream::shouldLog()) {
      return v4;
    }
LABEL_62:
    BOOL v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    CCLogStream::logAlert(v12, "[dk] %s@%d:Error cannot create EcountersConfigSlice1Container buffer too short\n");
    return v4;
  }
  unint64_t v9 = a2 + 16;
  unint64_t v10 = 16;
LABEL_8:
  if (!AppleBCMWLANCore::featureFlagIsBitSet(this, 59)) {
    goto LABEL_11;
  }
  if (v10 + 4 > a3)
  {
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
      return v4;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (!CCLogStream::shouldLog()) {
      return v4;
    }
    goto LABEL_62;
  }
  *(_DWORD *)&a2[v10] = 779;
  v9 += 4;
  v10 += 4;
LABEL_11:
  if (!AppleBCMWLANCore::featureFlagIsBitSet(this, 4)) {
    goto LABEL_14;
  }
  v10 += 4;
  if (v10 > a3)
  {
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
      return v4;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (!CCLogStream::shouldLog()) {
      return v4;
    }
    goto LABEL_62;
  }
  *(_DWORD *)unint64_t v9 = 780;
  v9 += 4;
LABEL_14:
  if (!AppleBCMWLANCore::featureFlagIsBitSet(this, 69)) {
    goto LABEL_17;
  }
  v10 += 8;
  if (v10 > a3)
  {
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
      return v4;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (!CCLogStream::shouldLog()) {
      return v4;
    }
    goto LABEL_62;
  }
  *(void *)unint64_t v9 = 0x31100000310;
  v9 += 8;
LABEL_17:
  if (!AppleBCMWLANCore::featureFlagIsBitSet(this, 74)) {
    goto LABEL_20;
  }
  v10 += 4;
  if (v10 > a3)
  {
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
      return v4;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (!CCLogStream::shouldLog()) {
      return v4;
    }
    goto LABEL_62;
  }
  *(_DWORD *)unint64_t v9 = 776;
  v9 += 4;
LABEL_20:
  if (!AppleBCMWLANCore::featureFlagIsBitSet(this, 93)) {
    goto LABEL_23;
  }
  v10 += 4;
  if (v10 > a3)
  {
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
      return v4;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (!CCLogStream::shouldLog()) {
      return v4;
    }
    goto LABEL_62;
  }
  *(_DWORD *)unint64_t v9 = 798;
  v9 += 4;
LABEL_23:
  if (!AppleBCMWLANCore::featureFlagIsBitSet(this, 84)) {
    goto LABEL_26;
  }
  v10 += 4;
  if (v10 > a3)
  {
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
      return v4;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (!CCLogStream::shouldLog()) {
      return v4;
    }
    goto LABEL_62;
  }
  *(_DWORD *)unint64_t v9 = 793;
  v9 += 4;
LABEL_26:
  if (!AppleBCMWLANCore::featureFlagIsBitSet(this, 111)) {
    goto LABEL_29;
  }
  v10 += 4;
  if (v10 > a3)
  {
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
      return v4;
    }
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (!CCLogStream::shouldLog()) {
      return v4;
    }
    goto LABEL_62;
  }
  *(_DWORD *)unint64_t v9 = 793;
  v9 += 4;
LABEL_29:
  if (!AppleBCMWLANCore::featureFlagIsBitSet(this, 89))
  {
LABEL_34:
    uint64_t v4 = 0;
    *a4 = v10;
    return v4;
  }
  if (v10 + 4 > a3)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog()) {
        goto LABEL_71;
      }
    }
  }
  else
  {
    *(_DWORD *)unint64_t v9 = 794;
    if (v10 + 8 > a3)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog()) {
          goto LABEL_71;
        }
      }
    }
    else
    {
      *((_DWORD *)v9 + 1) = 795;
      v10 += 12;
      if (v10 <= a3)
      {
        *((_DWORD *)v9 + 2) = 796;
        goto LABEL_34;
      }
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
LABEL_71:
          int v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v13, "[dk] %s@%d:Error cannot create EcountersConfigSlice0Container buffer too short\n");
        }
      }
    }
  }
  return v4;
}

uint64_t AppleBCMWLANCore::getEcountersConfigSlice2Container(AppleBCMWLANCore *this, unsigned __int8 *a2, unsigned int a3, unsigned __int16 *a4)
{
  uint64_t v4 = 3758097084;
  if (a2 && a4)
  {
    if (AppleBCMWLANCore::featureFlagIsBitSet(this, 120)) {
      unint64_t v9 = 16;
    }
    else {
      unint64_t v9 = 12;
    }
    if (v9 > a3)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          BOOL v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          int v13 = 52979;
LABEL_21:
          CCLogStream::logAlert(v12, "[dk] %s@%d:Error cannot create EcountersConfigSlice2Container buffer too short\n", "getEcountersConfigSlice2Container", v13);
        }
      }
    }
    else
    {
      *(_DWORD *)a2 = 1;
      *((_WORD *)a2 + 2) = 4;
      if (AppleBCMWLANCore::featureFlagIsBitSet(this, 120))
      {
        *((void *)a2 + 1) = 0x30600000304;
        unint64_t v10 = a2 + 16;
      }
      else
      {
        *((_DWORD *)a2 + 2) = 774;
        unint64_t v10 = a2 + 12;
      }
      if (!AppleBCMWLANCore::featureFlagIsBitSet(this, 74)) {
        goto LABEL_13;
      }
      v9 += 4;
      if (v9 <= a3)
      {
        *(_DWORD *)unint64_t v10 = 776;
LABEL_13:
        uint64_t v4 = 0;
        *a4 = v9;
        return v4;
      }
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          BOOL v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          int v13 = 53001;
          goto LABEL_21;
        }
      }
    }
  }
  return v4;
}

uint64_t AppleBCMWLANCore::getEcountersConfigInfraContainer(AppleBCMWLANCore *this, unsigned __int8 *a2, unsigned int a3, unsigned __int16 *a4)
{
  uint64_t v4 = 3758097084;
  if (!a2 || !a4) {
    return v4;
  }
  if (a3 <= 0x13)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int v9 = 53026;
LABEL_7:
        CCLogStream::logAlert(v8, "[dk] %s@%d:Error cannot create EcountersConfigInfraContainer buffer too short\n", "getEcountersConfigInfraContainer", v9);
        return v4;
      }
    }
    return v4;
  }
  *(_DWORD *)a2 = 2;
  *((_WORD *)a2 + 2) = 0;
  *((void *)a2 + 1) = 0x50300000502;
  *((_DWORD *)a2 + 4) = 1284;
  unsigned __int16 v11 = 20;
  *a4 = 20;
  if (!AppleBCMWLANCore::featureFlagIsBitSet(this, 67))
  {
LABEL_11:
    uint64_t v4 = 0;
    *a4 = v11;
    return v4;
  }
  if (a3 > 0x17)
  {
    *((_DWORD *)a2 + 5) = 1291;
    unsigned __int16 v11 = 24;
    goto LABEL_11;
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      int v9 = 53046;
      goto LABEL_7;
    }
  }
  return v4;
}

uint64_t AppleBCMWLANCore::getEcountersConfigPeerStatsContainer(AppleBCMWLANCore *this, unsigned __int8 *a2, unsigned int a3, unsigned __int16 *a4, __int16 a5)
{
  uint64_t v5 = 3758097084;
  if (a2 && a4)
  {
    if (a3 > 0xB)
    {
      uint64_t v5 = 0;
      *(_WORD *)a2 = 2;
      *((_WORD *)a2 + 1) = a5;
      *((_WORD *)a2 + 2) = 0;
      *((_DWORD *)a2 + 2) = 1294;
      *a4 = 12;
    }
    else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:Error cannot create EcountersConfigInfraContainer buffer too short\n", "getEcountersConfigPeerStatsContainer", 53073);
      }
    }
  }
  return v5;
}

uint64_t AppleBCMWLANCore::getEcountersConfigSoftAPContainer(AppleBCMWLANCore *this, unsigned __int8 *a2, unsigned int a3, unsigned __int16 *a4)
{
  uint64_t v4 = 3758097084;
  if (a2 && a4)
  {
    if (a3 > 0xF)
    {
      uint64_t v4 = 0;
      *(_DWORD *)a2 = 65538;
      *((_WORD *)a2 + 2) = 0;
      *((void *)a2 + 1) = 0x50400000502;
      *a4 = 16;
    }
    else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v6, "[dk] %s@%d:Error cannot create EcountersConfigInfraContainer buffer too short\n", "getEcountersConfigSoftAPContainer", 53105);
      }
    }
  }
  return v4;
}

uint64_t AppleBCMWLANCore::getEcountersConfigGlobalContainer(AppleBCMWLANCore *this, unsigned __int8 *a2, unsigned int a3, unsigned __int16 *a4)
{
  uint64_t v4 = 3758097084;
  if (!a2 || !a4) {
    return v4;
  }
  if (a3 <= 0xF)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int v9 = 53138;
LABEL_7:
        CCLogStream::logAlert(v8, "[dk] %s@%d:Error cannot create EcountersConfigGlobalContainer buffer too short\n", "getEcountersConfigGlobalContainer", v9);
        return v4;
      }
    }
    return v4;
  }
  *(_DWORD *)a2 = 4;
  *((_WORD *)a2 + 2) = 0;
  *((void *)a2 + 1) = 0x10200000101;
  if (!AppleBCMWLANCore::featureFlagIsBitSet(this, 69))
  {
    unsigned __int16 v11 = a2 + 16;
    unint64_t v12 = 16;
LABEL_12:
    if (AppleBCMWLANCore::featureFlagIsBitSet(this, 90))
    {
      if ((v12 | 4) > a3)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            int v9 = 53162;
            goto LABEL_7;
          }
        }
        return v4;
      }
      *(_DWORD *)&a2[v12] = 267;
      v11 += 4;
      v12 |= 4uLL;
    }
    if (AppleBCMWLANCore::featureFlagIsBitSet(this, 99))
    {
      v12 += 4;
      if (v12 > a3)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            int v9 = 53169;
            goto LABEL_7;
          }
        }
        return v4;
      }
      *(_DWORD *)unsigned __int16 v11 = 268;
      v11 += 4;
    }
    if (AppleBCMWLANCore::featureFlagIsBitSet(this, 103))
    {
      v12 += 4;
      if (v12 > a3)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            int v9 = 53176;
            goto LABEL_7;
          }
        }
        return v4;
      }
      *(_DWORD *)unsigned __int16 v11 = 261;
      v11 += 4;
    }
    if (AppleBCMWLANCore::featureFlagIsBitSet(this, 110))
    {
      v12 += 4;
      if (v12 > a3)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            int v9 = 53182;
            goto LABEL_7;
          }
        }
        return v4;
      }
      *(_DWORD *)unsigned __int16 v11 = 269;
    }
    uint64_t v4 = 0;
    *a4 = v12;
    return v4;
  }
  if (a3 > 0x17)
  {
    *((void *)a2 + 2) = 0x700000006;
    unsigned __int16 v11 = a2 + 24;
    unint64_t v12 = 24;
    goto LABEL_12;
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      int v9 = 53155;
      goto LABEL_7;
    }
  }
  return v4;
}

uint64_t AppleBCMWLANCore::disableECountersV2(AppleBCMWLANCore *this, uint64_t a2, uint64_t a3, uint64_t a4, CCLogStream *a5)
{
  __int16 v25 = -21846;
  __int16 v23 = 2;
  uint64_t v24 = 0;
  uint64_t v6 = (AppleBCMWLANConfigManager *)AppleBCMWLANCommandWithXTLV::withLengthAndHeader((AppleBCMWLANCommandWithXTLV *)0xC, &v23, (void *)0xC, *(CCLogStream **)(*((void *)this + 9) + 14160), a5);
  if (!v6) {
    return 3758097085;
  }
  uint64_t v7 = v6;
  AppleBCMWLANConfigManager::setupFirmwareWithDTDefaults(v6);
  AppleBCMWLANCommandWithXTLV::complete(v7);
  uint64_t v8 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  uint64_t CompletionRingPtr = AppleBCMWLANDynamicRingOperationContext::getCompletionRingPtr(v7);
  Commandsize_t Length = AppleBCMWLANCommandWithXTLV::getCommandLength(v7);
  BOOL v11 = CompletionRingPtr != 0;
  BOOL v12 = CommandLength != 0;
  BOOL v13 = !v11 || !v12;
  if (v11 && v12) {
    uint64_t v14 = CommandLength;
  }
  else {
    uint64_t v14 = 0;
  }
  if (v13) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = CompletionRingPtr;
  }
  v22[0] = v15;
  v22[1] = v14;
  uint64_t v16 = AppleBCMWLANCommander::runIOVarSet(v8, (uint64_t)"ecounters", (uint64_t)v22, 0, 0);
  uint64_t v17 = v16;
  if (v16 != -469794537 && v16 != 0)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v20 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        BOOL v21 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v17);
        CCLogStream::logAlert(v20, "[dk] %s@%d: Error: Unable to set ecounters V2: %s\n", "disableECountersV2", 53403, v21);
      }
    }
  }
  (*(void (**)(AppleBCMWLANCommandWithXTLV *))(*(void *)v7 + 16))(v7);
  return v17;
}

uint64_t AppleBCMWLANCore::disableECountersV1(AppleBCMWLANCore *this)
{
  uint64_t v2 = IOMallocZeroData();
  if (!v2) {
    return 12;
  }
  uint64_t v3 = v2;
  *(_WORD *)uint64_t v2 = 1;
  *(void *)(v2 + 2) = 0;
  *(_DWORD *)(v2 + 10) = 0;
  uint64_t v4 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  v11[0] = v3;
  v11[1] = 14;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"ecounters", (uint64_t)v11, 0, 0);
  uint64_t v6 = v5;
  if (v5 != -469794537 && v5 != 0)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        unint64_t v10 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
        CCLogStream::logAlert(v9, "[dk] %s@%d: Error: Unable to set ecounters: %s\n", "disableECountersV1", 53375, v10);
      }
    }
  }
  IOFreeData();
  return v6;
}

uint64_t AppleBCMWLANCore::configureEventLogShrinkStats(AppleBCMWLANCore *this, char a2)
{
  uint64_t v13 = 2863311530;
  LOBYTE(v13) = a2;
  uint64_t v3 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  v12[0] = &v13;
  v12[1] = 8;
  uint64_t v4 = AppleBCMWLANCommander::runIOVarSet(v3, (uint64_t)"event_log_set_shrink", (uint64_t)v12, 0, 0);
  if (!v4) {
    goto LABEL_6;
  }
  uint64_t v5 = v4;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      int v9 = v13;
      int v10 = HIDWORD(v13);
      BOOL v11 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
      CCLogStream::logInfo(v8, "[dk] %s@%d: Error: Unable to deallocate event_log_set_init set %d, size %d: %s\n", "configureEventLogShrinkStats", 53421, v9, v10, v11);
    }
  }
  uint64_t result = 3825172759;
  if (v5 != -469794537)
  {
LABEL_6:
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logInfo(v7, "[dk] %s@%d:Event Log Configuration failed\n", "configureEventLogShrinkStats", 53427);
        return 0;
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::configureEventLogStats(AppleBCMWLANCore *this, char a2, unsigned __int16 a3)
{
  int v19 = -1431655766;
  int v20 = a3;
  LOBYTE(v19) = a2;
  uint64_t v4 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  uint64_t v17 = &v19;
  uint64_t v18 = 8;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"event_log_set_init", (uint64_t)&v17, 0, 0);
  if (v5)
  {
    uint64_t v6 = v5;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int v8 = v19;
        int v9 = v20;
        int v10 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
        CCLogStream::logInfo(v7, "[dk] %s@%d: Error: Unable to set event_log_set_init set %d, size %d: %s\n", "configureEventLogStats", 53443, v8, v9, v10);
      }
    }
  }
  else
  {
    BOOL v11 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    uint64_t v17 = &v19;
    uint64_t v18 = 8;
    uint64_t v6 = AppleBCMWLANCommander::runIOVarSet(v11, (uint64_t)"event_log_set_expand", (uint64_t)&v17, 0, 0);
    if (v6)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          int v14 = v19;
          int v15 = v20;
          uint64_t v16 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
          CCLogStream::logAlert(v13, "[dk] %s@%d: Error: Unable to set event_log_set_init set %d, size %d: %s\n", "configureEventLogStats", 53449, v14, v15, v16);
        }
      }
    }
  }
  return v6;
}

uint64_t AppleBCMWLANCore::handleEventLogGetAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    if (!(*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result)
      || ((*(void (**)(uint64_t))(*(void *)v4 + 1848))(v4), (CCLogStream::shouldLogConsole() & 1) == 0))
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 112))(v4, a3);
        *(_DWORD *)buf = 67109890;
        int v9 = 78;
        __int16 v10 = 2080;
        BOOL v11 = "handleEventLogGetAsyncCallback";
        __int16 v12 = 1024;
        int v13 = 53686;
        __int16 v14 = 2080;
        uint64_t v15 = v5;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: LQM-WiFi-Roam: fail to dump roam target evaluation - %s\n", buf, 0x22u);
      }
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 1848))(v4);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 1848))(v4);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 1848))(v4);
        uint64_t v7 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 112))(v4, a3);
        return CCLogStream::logNotice(v6, "[dk] %s@%d:LQM-WiFi-Roam: fail to dump roam target evaluation - %s\n", "handleEventLogGetAsyncCallback", 53686, v7);
      }
    }
  }
  return result;
}

BOOL AppleBCMWLANCore::isFourRowPowerTableSupported(AppleBCMWLANCore *this)
{
  uint64_t TxPowerCapConfig = AppleBCMWLANConfigManager::getTxPowerCapConfig(*(AppleBCMWLANConfigManager **)(*((void *)this + 9)
                                                                                                  + 5472));
  unint64_t v2 = *(unsigned __int8 *)(TxPowerCapConfig + 11);
  if (!*(unsigned char *)(TxPowerCapConfig + 11)) {
    return 0;
  }
  if (*(unsigned char *)(TxPowerCapConfig + 1) == 2) {
    return 1;
  }
  uint64_t v4 = 0;
  do
  {
    uint64_t v5 = v4;
    if (v2 - 1 == v4) {
      break;
    }
    int v6 = *(unsigned __int8 *)(TxPowerCapConfig + 2 + v4++);
  }
  while (v6 != 2);
  return v5 + 1 < v2;
}

uint64_t AppleBCMWLANCore::configTxPowerCapControl(AppleBCMWLANCore *this)
{
  uint64_t result = AppleBCMWLANConfigManager::getTxPowerCapConfig(*(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472));
  int v3 = *(_DWORD *)(result + 12);
  switch(v3)
  {
    case 4:
      char v8 = *(unsigned char *)(result + 1);
      *(_WORD *)__int16 v12 = 772;
      void v12[2] = v8;
      int v6 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
      uint64_t v7 = 3;
      break;
    case 3:
      *(void *)&v12[1] = 0xAAAAAAAAAAAAAAAALL;
      __int16 v13 = -21846;
      v12[0] = 3;
      unint64_t v9 = *(unsigned __int8 *)(result + 11);
      if (*(unsigned char *)(result + 11))
      {
        unint64_t v10 = 0;
        do
        {
          v12[v10 + 1] = *(unsigned char *)(result + 1 + v10);
          ++v10;
        }
        while (v10 < v9);
      }
      int v6 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
      uint64_t v7 = 11;
      break;
    case 2:
      v12[5] = -86;
      *(_DWORD *)&v12[1] = -1431655766;
      v12[0] = 2;
      unint64_t v4 = *(unsigned __int8 *)(result + 11);
      if (*(unsigned char *)(result + 11))
      {
        unint64_t v5 = 0;
        do
        {
          v12[v5 + 1] = *(unsigned char *)(result + 1 + v5);
          ++v5;
        }
        while (v5 < v4);
      }
      int v6 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
      uint64_t v7 = 6;
      break;
    default:
      return result;
  }
  v11[0] = v12;
  v11[1] = v7;
  uint64_t result = AppleBCMWLANCommander::runIOVarSet(v6, (uint64_t)"txcapconfig", (uint64_t)v11, 0, 0);
  if (result) {
    return CCFaultReporter::reportFault(*(CCFaultReporter **)(*((void *)this + 9) + 5544), 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0xD299u, "configTxPowerCapControl", 0, result, "txcapconfig failed");
  }
  return result;
}

uint64_t AppleBCMWLANCore::setTxPowerCapState(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 72);
  if (*(unsigned char *)(v1 + 10388))
  {
    unint64_t v2 = (int *)(v1 + 19628);
    if (v2[20] == 1) {
      return AppleBCMWLANCore::sendTxPowerCapValueToFirmware(this, v2[1], *v2);
    }
  }
  return this;
}

uint64_t AppleBCMWLANCore::setTxHighCapTimeout(AppleBCMWLANCore *this, int a2)
{
  int v3 = *(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472);
  if (v3 && AppleBCMWLANConfigManager::isDualPowerModeSupported(v3))
  {
    int v10 = a2;
    unint64_t v5 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
    v9[0] = &v10;
    v9[1] = 4;
    uint64_t result = AppleBCMWLANCommander::runIOVarSet(v5, (uint64_t)"txcaphighcapto", (uint64_t)v9, 0, 0);
    if (result != -469793788 && result != 0) {
      return CCFaultReporter::reportFault(*(CCFaultReporter **)(*((void *)this + 9) + 5544), 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0xD3F1u, "setTxHighCapTimeout", 0, result, "txcaphighcapto failed");
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        char v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        return CCLogStream::logAlert(v8, "[dk] %s@%d: txcap high power timeout is not supported!\n", "setTxHighCapTimeout", 54262);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::sendTxPowerCapBypassToFirmware(AppleBCMWLANCore *this)
{
  uint64_t v2 = *((void *)this + 9);
  int v9 = *(unsigned __int8 *)(v2 + 19637);
  if (*(_DWORD *)(v2 + 19628) == -1 || *(_DWORD *)(v2 + 19632) == -1)
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        return CCLogStream::logAlert(v7, "[dk] %s@%d:builtInReceiverState is %s and cellularTxState is %s. Skipping setting txcapbypass iovar\n");
      }
    }
  }
  else
  {
    int v3 = *(AppleBCMWLANCommander **)(v2 + 5416);
    v8[0] = &v9;
    v8[1] = 4;
    uint64_t result = AppleBCMWLANCommander::runIOVarSet(v3, (uint64_t)"txcapbypass", (uint64_t)v8, 0, 0);
    if (result)
    {
      uint64_t v5 = result;
      uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (result)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          int v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
          return CCLogStream::logAlert(v6, "[dk] %s@%d: Unable to set txcapbypass: %s\n");
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::heartBeatHandler(AppleBCMWLANCore *this)
{
  mach_continuous_time();
  uint64_t result = absolutetime_to_nanoseconds();
  *(void *)(*((void *)this + 9) + 19648) = 0;
  uint64_t v3 = *((void *)this + 9);
  if (*(unsigned char *)(v3 + 10388))
  {
    unint64_t v4 = (int *)(v3 + 19628);
    if (v4[20] == 1) {
      return AppleBCMWLANCore::sendTxPowerCapValueToFirmware((uint64_t)this, v4[1], *v4);
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::getTxPowerCapState(void *a1, uint64_t a2)
{
  uint64_t v3 = *(AppleBCMWLANConfigManager **)(a1[9] + 5472);
  if (v3 && AppleBCMWLANConfigManager::isDualPowerModeSupported(v3))
  {
    *(_WORD *)(a2 + 4) = 0;
    *(_DWORD *)a2 = 0;
    uint64_t v5 = 0x600060006;
    if (!a2) {
      uint64_t v5 = 0;
    }
    v10[0] = a2;
    v10[1] = v5;
    uint64_t v6 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(a1[9] + 5416), (uint64_t)"txcapstate", (uint64_t)&kNoTxPayload, (uint64_t)v10, 0);
    if (v6)
    {
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          (*(void (**)(void *, uint64_t))(*a1 + 112))(a1, v6);
          CCLogStream::logAlert(v7, "[dk] %s@%d: Unable to retrive txcap state: ret  %s\n");
        }
      }
    }
  }
  else
  {
    uint64_t v6 = 3758097095;
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v9 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v9, "[dk] %s@%d: txcap state is not supported!\n");
      }
    }
  }
  return v6;
}

uint64_t AppleBCMWLANCore::getTxPowerCapStateV3(void *a1, uint64_t a2)
{
  uint64_t v3 = *(AppleBCMWLANConfigManager **)(a1[9] + 5472);
  if (v3 && AppleBCMWLANConfigManager::isDualPowerModeSupported(v3))
  {
    *(_DWORD *)(a2 + 7) = 0;
    *(void *)a2 = 0;
    uint64_t v5 = 0xB000B000BLL;
    if (!a2) {
      uint64_t v5 = 0;
    }
    v10[0] = a2;
    v10[1] = v5;
    uint64_t v6 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(a1[9] + 5416), (uint64_t)"txcapstate", (uint64_t)&kNoTxPayload, (uint64_t)v10, 0);
    if (v6)
    {
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          (*(void (**)(void *, uint64_t))(*a1 + 112))(a1, v6);
          CCLogStream::logAlert(v7, "[dk] %s@%d: Unable to retrive txcap state: ret  %s\n");
        }
      }
    }
  }
  else
  {
    uint64_t v6 = 3758097095;
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v9 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v9, "[dk] %s@%d: txcap state is not supported!\n");
      }
    }
  }
  return v6;
}

uint64_t AppleBCMWLANCore::getTxPowerCapStateV4(void *a1, uint64_t a2)
{
  uint64_t v3 = *(AppleBCMWLANConfigManager **)(a1[9] + 5472);
  if (v3 && AppleBCMWLANConfigManager::isDualPowerModeSupported(v3))
  {
    *(unsigned char *)(a2 + 2) = 0;
    *(_WORD *)a2 = 0;
    uint64_t v5 = 0x300030003;
    if (!a2) {
      uint64_t v5 = 0;
    }
    v10[0] = a2;
    v10[1] = v5;
    uint64_t v6 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(a1[9] + 5416), (uint64_t)"txcapstate", (uint64_t)&kNoTxPayload, (uint64_t)v10, 0);
    if (v6)
    {
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          (*(void (**)(void *, uint64_t))(*a1 + 112))(a1, v6);
          CCLogStream::logAlert(v7, "[dk] %s@%d: Unable to retrive txcap state: ret  %s\n");
        }
      }
    }
  }
  else
  {
    uint64_t v6 = 3758097095;
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v9 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v9, "[dk] %s@%d: txcap state is not supported!\n");
      }
    }
  }
  return v6;
}

uint64_t AppleBCMWLANCore::getTxPowerCapDebugInfoV3(void *a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 352) = 0;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v3 = *(AppleBCMWLANConfigManager **)(a1[9] + 5472);
  if (v3 && AppleBCMWLANConfigManager::isDualPowerModeSupported(v3))
  {
    v9[0] = a2;
    v9[1] = 0x16401640164;
    uint64_t v5 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(a1[9] + 5416), (uint64_t)"txcapdump", (uint64_t)&kNoTxPayload, (uint64_t)v9, 0);
    if (v5)
    {
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          (*(void (**)(void *, uint64_t))(*a1 + 112))(a1, v5);
          CCLogStream::logAlert(v6, "[dk] %s@%d: Unable to retrive txcap state: ret  %s\n");
        }
      }
    }
  }
  else
  {
    uint64_t v5 = 3758097095;
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        char v8 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v8, "[dk] %s@%d: txcap dump is not supported!\n");
      }
    }
  }
  return v5;
}

uint64_t AppleBCMWLANCore::getTxPowerCapDebugInfoV5(AppleBCMWLANCore *this, unsigned __int8 *a2, unsigned __int16 a3)
{
  unint64_t v4 = *(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472);
  if (v4 && AppleBCMWLANConfigManager::isDualPowerModeSupported(v4))
  {
    BOOL v7 = a2 != 0;
    BOOL v8 = a3 != 0;
    BOOL v9 = !v7 || !v8;
    if (v7 && v8) {
      unint64_t v10 = a3 | ((unint64_t)a3 << 32) | 0xE0000;
    }
    else {
      unint64_t v10 = 0;
    }
    if (v9) {
      BOOL v11 = 0;
    }
    else {
      BOOL v11 = a2;
    }
    v16[0] = v11;
    v16[1] = v10;
    uint64_t v12 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"txcapdump", (uint64_t)&kNoTxPayload, (uint64_t)v16, 0);
    if (v12)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          __int16 v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v12);
          CCLogStream::logAlert(v13, "[dk] %s@%d: Unable to retrive txcap state: ret  %s\n");
        }
      }
    }
  }
  else
  {
    uint64_t v12 = 3758097095;
    if ((*(uint64_t (**)(AppleBCMWLANCore *, unsigned __int8 *))(*(void *)this + 1848))(this, a2))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v15, "[dk] %s@%d: txcap dump is not supported!\n");
      }
    }
  }
  return v12;
}

uint64_t AppleBCMWLANCore::getTxPowerCapDebugInfoV7(AppleBCMWLANCore *this, unsigned __int8 *a2, unsigned __int16 a3)
{
  unint64_t v4 = *(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472);
  if (v4 && AppleBCMWLANConfigManager::isDualPowerModeSupported(v4))
  {
    BOOL v7 = a2 != 0;
    BOOL v8 = a3 != 0;
    BOOL v9 = !v7 || !v8;
    if (v7 && v8) {
      unint64_t v10 = a3 | ((unint64_t)a3 << 32) | 0x260000;
    }
    else {
      unint64_t v10 = 0;
    }
    if (v9) {
      BOOL v11 = 0;
    }
    else {
      BOOL v11 = a2;
    }
    v16[0] = v11;
    v16[1] = v10;
    uint64_t v12 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"txcapdump", (uint64_t)&kNoTxPayload, (uint64_t)v16, 0);
    if (v12)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          __int16 v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          (*(void (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v12);
          CCLogStream::logAlert(v13, "[dk] %s@%d: Unable to retrive txcap state: ret  %s\n");
        }
      }
    }
  }
  else
  {
    uint64_t v12 = 3758097095;
    if ((*(uint64_t (**)(AppleBCMWLANCore *, unsigned __int8 *))(*(void *)this + 1848))(this, a2))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v15, "[dk] %s@%d: txcap dump is not supported!\n");
      }
    }
  }
  return v12;
}

uint64_t AppleBCMWLANCore::getTxHighCapTimeout(AppleBCMWLANCore *this, unsigned int *a2)
{
  uint64_t v3 = *(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472);
  if (v3 && AppleBCMWLANConfigManager::isDualPowerModeSupported(v3))
  {
    uint64_t v5 = 0x400040004;
    if (!a2) {
      uint64_t v5 = 0;
    }
    v9[0] = a2;
    v9[1] = v5;
    uint64_t v6 = AppleBCMWLANCommander::runIOVarGet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"txcaphighcapto", (uint64_t)&kNoTxPayload, (uint64_t)v9, 0);
    if (v6) {
      CCFaultReporter::reportFault(*(CCFaultReporter **)(*((void *)this + 9) + 5544), 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0xD41Eu, "getTxHighCapTimeout", 0, v6, "txcaphighcapto failed");
    }
  }
  else
  {
    uint64_t v6 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *, unsigned int *))(*(void *)this + 1848))(this, a2))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        BOOL v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v8, "[dk] %s@%d: txcap high power timeout is not supported!\n", "getTxHighCapTimeout", 54308);
      }
    }
  }
  return v6;
}

uint64_t AppleBCMWLANCore::selfDiagnosticsReport(AppleBCMWLANCore *this, int a2, const char *a3, char a4)
{
  if (!a2 && !a3) {
    return 3758097090;
  }
  uint64_t result = AppleBCMWLANCore::isRejectingCommands(this);
  if (!result)
  {
    switch(a2)
    {
      case -528340986:
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            __int16 v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v14, "[dk] %s@%d:SlowWiFiRecovery due to %s. Attempting to trap.\n", "selfDiagnosticsReport", 54351, a3);
          }
        }
        (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 9) + 5400) + 216))(*(void *)(*((void *)this + 9) + 5400), 4);
        unint64_t v10 = *(void (**)(void))(**(void **)(*((void *)this + 9) + 5400) + 200);
        break;
      case -528340987:
        char v16 = 1;
        IOParseBootArgNumber("wlan.debug.postmessage-error-capture", &v16, 1);
        if (v16)
        {
          BOOL v11 = (const char *)&unk_10029A2CA;
          if (a3) {
            BOOL v11 = a3;
          }
          CCFaultReporter::reportFault(*(CCFaultReporter **)(*((void *)this + 9) + 5544), 8u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0xD463u, "selfDiagnosticsReport", 0, -528340987, "%s", v11);
        }
        else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            __int16 v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v13, "[dk] %s@%d: kIO80211ReturnPostMessageError Reported. Skipping capture ...\n", "selfDiagnosticsReport", 54363);
          }
        }
        return 0;
      case -528340988:
        if ((a4 & 1) == 0)
        {
          BOOL v9 = (const char *)&unk_10029A2CA;
          if (a3) {
            BOOL v9 = a3;
          }
          CCFaultReporter::reportFault(*(CCFaultReporter **)(*((void *)this + 9) + 5544), 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0xD448u, "selfDiagnosticsReport", 0, -528340988, "%s", v9);
          return 0;
        }
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v15 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v15, "[dk] %s@%d:SlowDPS Reported. Attempting to trap.\n", "selfDiagnosticsReport", 54334);
          }
        }
        (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 9) + 5400) + 216))(*(void *)(*((void *)this + 9) + 5400), 1);
        unint64_t v10 = *(void (**)(void))(**(void **)(*((void *)this + 9) + 5400) + 200);
        break;
      default:
        uint64_t v12 = (const char *)&unk_10029A2CA;
        if (a3) {
          uint64_t v12 = a3;
        }
        CCFaultReporter::reportFault(*(CCFaultReporter **)(*((void *)this + 9) + 5544), a4 & 1 | 4, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", 0xD46Fu, "selfDiagnosticsReport", 0, a2, "%s", v12);
        return 0;
    }
    v10();
    return 0;
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::selfDiagnosticsReport(AppleBCMWLANCore *this, int a2, const char *a3, char a4)
{
  return AppleBCMWLANCore::selfDiagnosticsReport((AppleBCMWLANCore *)((char *)this - 48), a2, a3, a4);
}

uint64_t AppleBCMWLANCore::getFaultReporter(AppleBCMWLANCore *this)
{
  return *(void *)(*((void *)this + 9) + 5544);
}

uint64_t AppleBCMWLANCore::configureReportGated(OSObject *this, OSCollection **a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  if (a2)
  {
    uint64_t v6 = *a2;
    if (*a2)
    {
      BOOL v7 = (unsigned int *)a2[2];
      if (v7)
      {
        BOOL v8 = (OSData *)*((unsigned int *)a2 + 2);
        ivars = this[1].ivars;
        unint64_t v10 = (OSObject *)*((void *)ivars + 689);
        if (v10)
        {
          if (AppleBCMWLANIOReporting::configureReport(v10, *a2, v8, v7, a5))
          {
            uint64_t v17 = 3758097084;
            if (!((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
              return v17;
            }
            ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (!CCLogStream::shouldLog()) {
              return v17;
            }
            unsigned __int16 v22 = (CCLogStream *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
            uint64_t v26 = 54652;
            uint64_t v24 = 54652;
            uint64_t ClassNameHelper = getClassNameHelper(this);
            __int16 v23 = "[dk] %s@%d:DKReporter::%s::%s(%d) getIOReporterCore()->configureReport failed";
            goto LABEL_50;
          }
          ivars = this[1].ivars;
        }
        BOOL v11 = (AppleBCMWLANIOReportingPerSlice *)*((void *)ivars + 690);
        if (v11)
        {
          if (AppleBCMWLANIOReportingPerSlice::configureReport(v11, v6, v8, v7))
          {
            uint64_t v17 = 3758097084;
            if (!((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
              return v17;
            }
            ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (!CCLogStream::shouldLog()) {
              return v17;
            }
            unsigned __int16 v22 = (CCLogStream *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
            uint64_t v26 = 54658;
            uint64_t v24 = 54658;
            uint64_t ClassNameHelper = getClassNameHelper(this);
            __int16 v23 = "[dk] %s@%d:DKReporter::%s::%s(%d) getIOReporterPerSlice()->configureReport failed";
            goto LABEL_50;
          }
          ivars = this[1].ivars;
        }
        uint64_t v12 = (OSObject *)*((void *)ivars + 3723);
        if (v12)
        {
          if (AppleBCMWLANAudioProtector::configureReport(v12, v6, v8, v7, a5))
          {
            uint64_t v17 = 3758097084;
            if (!((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
              return v17;
            }
            ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (!CCLogStream::shouldLog()) {
              return v17;
            }
            unsigned __int16 v22 = (CCLogStream *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
            uint64_t v26 = 54665;
            uint64_t v24 = 54665;
            uint64_t ClassNameHelper = getClassNameHelper(this);
            __int16 v23 = "[dk] %s@%d:DKReporter::%s::%s(%d) fAudioProtector->configureReport failed";
            goto LABEL_50;
          }
          ivars = this[1].ivars;
        }
        __int16 v13 = (OSObject *)*((void *)ivars + 677);
        if (v13)
        {
          if (AppleBCMWLANCommander::configureReport(v13, v6, v8, v7, a5))
          {
            uint64_t v17 = 3758097084;
            if (!((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
              return v17;
            }
            ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
            if (!CCLogStream::shouldLog()) {
              return v17;
            }
            unsigned __int16 v22 = (CCLogStream *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
            uint64_t v26 = 54672;
            uint64_t v24 = 54672;
            uint64_t ClassNameHelper = getClassNameHelper(this);
            __int16 v23 = "[dk] %s@%d:DKReporter::%s::%s(%d) fCommander->configureReport failed";
            goto LABEL_50;
          }
          ivars = this[1].ivars;
        }
        uint64_t v14 = *((void *)ivars + 1415);
        if (v14
          && (*(unsigned int (**)(uint64_t, OSCollection *, OSData *, unsigned int *))(*(void *)v14 + 648))(v14, v6, v8, v7))
        {
          uint64_t v17 = 3758097084;
          if (!((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
            return v17;
          }
          ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (!CCLogStream::shouldLog()) {
            return v17;
          }
          unsigned __int16 v22 = (CCLogStream *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
          uint64_t v26 = 54680;
          uint64_t v24 = 54680;
          uint64_t ClassNameHelper = getClassNameHelper(this);
          __int16 v23 = "[dk] %s@%d:DKReporter::%s::%s(%d) fApStaInterface->configureReport failed";
        }
        else
        {
          if (!IO80211Controller::configureReport((IO80211Controller *)this, (OSData *)v6, v8, v7))
          {
            char v16 = (AppleBCMWLANIOReportingCore *)*((void *)this[1].ivars + 689);
            if (v16) {
              AppleBCMWLANIOReportingCore::accountingForConfigureReport(v16, 0, v15);
            }
            return 0;
          }
          uint64_t v17 = 3758097084;
          if (!((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this)) {
            return v17;
          }
          ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
          if (!CCLogStream::shouldLog()) {
            return v17;
          }
          unsigned __int16 v22 = (CCLogStream *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
          uint64_t v26 = 54685;
          uint64_t v24 = 54685;
          uint64_t ClassNameHelper = getClassNameHelper(this);
          __int16 v23 = "[dk] %s@%d:DKReporter::%s::%s(%d) super::configureReport(channels, action, sumCount) failed";
        }
LABEL_50:
        CCLogStream::logEmergency(v22, v23, "configureReportGated", v24, ClassNameHelper, "configureReportGated", v26);
        return v17;
      }
      uint64_t v17 = 3758097084;
      if (((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          BOOL v21 = (CCLogStream *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logEmergency(v21, "[dk] %s@%d:outCount pointer invalid\n");
        }
      }
    }
    else
    {
      uint64_t v17 = 3758097084;
      if (((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this))
      {
        ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
        if (CCLogStream::shouldLog())
        {
          int v20 = (CCLogStream *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
          CCLogStream::logEmergency(v20, "[dk] %s@%d:channels pointer invalid\n");
        }
      }
    }
  }
  else
  {
    uint64_t v17 = 3758097084;
    if (((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this))
    {
      ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
      if (CCLogStream::shouldLog())
      {
        int v19 = (CCLogStream *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
        CCLogStream::logEmergency(v19, "[dk] %s@%d:No valid vars given to configureReportGated\n");
      }
    }
  }
  return v17;
}

uint64_t AppleBCMWLANCore::configureReport(OSObject *this, OSCollection *a2, uint64_t a3, unsigned int *a4)
{
  if (*((unsigned char *)this[1].ivars + 984))
  {
    uint64_t result = ((uint64_t (*)(OSObject *, OSCollection *, uint64_t, unsigned int *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this, a2, a3, a4);
    if (result)
    {
      ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v6 = (CCLogStream *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t ClassNameHelper = (const char *)getClassNameHelper(this);
        CCLogStream::logAlert(v6, "[dk] %s@%d:DKReporter::%s::%s(%d) \n", "configureReport", 54709, ClassNameHelper, "configureReport", 54709);
        return 0;
      }
    }
  }
  else
  {
    *a4 = 0;
    uint64_t v12 = a2;
    int v14 = -1431655766;
    int v13 = a3;
    unint64_t v15 = a4;
    if ((*(unsigned int (**)(void))(**((void **)this[1].ivars + 3865) + 144))(*((void *)this[1].ivars
                                                                                                + 3865)))
    {
      return AppleBCMWLANCore::configureReportGated(this, &v12, v8, v9, v10);
    }
    else
    {
      uint64_t v11 = ((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[1].free)(this);
      return (*(uint64_t (**)(uint64_t, uint64_t (*)(OSObject *, OSCollection **, uint64_t, uint64_t, unsigned int *), OSCollection **, void, void, void))(*(void *)v11 + 56))(v11, AppleBCMWLANCore::configureReportGated, &v12, 0, 0, 0);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::configureReport(AppleBCMWLANCore *this, OSCollection *a2, uint64_t a3, unsigned int *a4)
{
  return AppleBCMWLANCore::configureReport((OSObject *)((char *)this - 48), a2, a3, a4);
}

uint64_t AppleBCMWLANCore::updateReportGated(AppleBCMWLANCore *this, OSCollection **a2)
{
  unint64_t v41 = 0;
  unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
  memset(__b, 170, sizeof(__b));
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v39 = 0xAAAAAAAAAAAAAAAALL;
  v38[0] = v4;
  v38[1] = v4;
  BYTE4(v38[0]) = 0;
  LODWORD(v38[0]) = 20;
  if (!a2)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        __int16 v27 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logEmergency(v27, "[dk] %s@%d:No valid vars given to updateReportGated\n");
      }
    }
    goto LABEL_34;
  }
  uint64_t v5 = *a2;
  uint64_t v6 = (OSData *)*((unsigned int *)a2 + 2);
  uint64_t v8 = (unsigned int *)a2[2];
  unint64_t v7 = (unint64_t)a2[3];
  unint64_t v41 = (unint64_t)a2[4];
  unint64_t v42 = v7;
  if (!v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        __int16 v28 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logEmergency(v28, "[dk] %s@%d:channels pointer invalid\n");
      }
    }
    goto LABEL_38;
  }
  if (!v8)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v36 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logEmergency(v36, "[dk] %s@%d:count pointer invalid\n");
      }
    }
LABEL_34:
    uint64_t v24 = 0;
    goto LABEL_39;
  }
  uint64_t v9 = (IOMemoryDescriptor *)a2[5];
  if (!v9)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v37 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logEmergency(v37, "[dk] %s@%d:buffer pointer invalid\n");
      }
    }
LABEL_38:
    uint64_t v24 = 0;
    goto LABEL_39;
  }
  if (!AppleBCMWLANCore::isRejectingCommands(this))
  {
    uint64_t v10 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 104))(this);
    (*(void (**)(uint64_t, uint64_t (*)(AppleBCMWLANCore *, _DWORD *, int *), unsigned char *, _OWORD *, void, void))(*(void *)v10 + 56))(v10, AppleBCMWLANCore::getPowerStats, __b, v38, 0, 0);
    uint64_t v44 = 0;
    memset(v43, 0, sizeof(v43));
    uint64_t v11 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 104))(this);
    (*(void (**)(uint64_t, uint64_t (*)(AppleBCMWLANCore *, uint64_t, int *), _OWORD *, _OWORD *, void, void))(*(void *)v11 + 56))(v11, AppleBCMWLANCore::getDiags, v43, v38, 0, 0);
  }
  uint64_t v12 = (void *)*((void *)this + 9);
  int v13 = (OSObject *)v12[689];
  if (v13)
  {
    uint64_t updated = AppleBCMWLANIOReporting::updateReport(v13, v5, v6, v8, &v42, &v41, v9);
    if (updated)
    {
      uint64_t v24 = updated;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          long long v31 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          getClassNameHelper((OSObject *)this);
          CCLogStream::logEmergency(v31, "[dk] %s@%d:DKReporter::%s::%s(%d) getIOReporterCore()->updateReport failed count %u offset %llu capacity %llu", "updateReportGated", 54787);
        }
      }
      goto LABEL_39;
    }
    uint64_t v12 = (void *)*((void *)this + 9);
  }
  unint64_t v15 = (AppleBCMWLANIOReportingPerSlice *)v12[690];
  if (v15)
  {
    uint64_t v16 = AppleBCMWLANIOReportingPerSlice::updateReport(v15, v5, v6, v8, &v42, &v41, v9);
    if (v16)
    {
      uint64_t v24 = v16;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v32 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          getClassNameHelper((OSObject *)this);
          CCLogStream::logEmergency(v32, "[dk] %s@%d:DKReporter::%s::%s(%d) getIOReporterPerSlice()->updateReport failed count %u offset %llu capacity %llu", "updateReportGated", 54793);
        }
      }
      goto LABEL_39;
    }
    uint64_t v12 = (void *)*((void *)this + 9);
  }
  uint64_t v17 = (OSObject *)v12[3723];
  if (v17)
  {
    uint64_t v18 = AppleBCMWLANAudioProtector::updateReport(v17, v5, v6, v8, &v42, &v41, v9);
    if (v18)
    {
      uint64_t v24 = v18;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          int v33 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          getClassNameHelper((OSObject *)this);
          CCLogStream::logEmergency(v33, "[dk] %s@%d:DKReporter::%s::%s(%d) ivars->fAudioProtector->updateReport failed count %u offset %llu capacity %llu", "updateReportGated", 54800);
        }
      }
      goto LABEL_39;
    }
    uint64_t v12 = (void *)*((void *)this + 9);
  }
  int v19 = (OSObject *)v12[677];
  if (v19)
  {
    uint64_t v20 = AppleBCMWLANCommander::updateReport(v19, v5, v6, v8, &v42, &v41, v9);
    if (v20)
    {
      uint64_t v24 = v20;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          int v34 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          getClassNameHelper((OSObject *)this);
          CCLogStream::logEmergency(v34, "[dk] %s@%d:DKReporter::%s::%s(%d) ivars->fCommander->updateReport failed count %u offset %llu capacity %llu", "updateReportGated", 54807);
        }
      }
      goto LABEL_39;
    }
    uint64_t v12 = (void *)*((void *)this + 9);
  }
  uint64_t v21 = v12[1415];
  if (!v21
    || (uint64_t v22 = (*(uint64_t (**)(uint64_t, OSCollection *, OSData *, unsigned int *, unint64_t *, unint64_t *, IOMemoryDescriptor *))(*(void *)v21 + 656))(v21, v5, v6, v8, &v42, &v41, v9), !v22))
  {
    uint64_t v24 = IO80211Controller::updateReport(this, (OSData *)v5, v6, v8, v42, v41, v9);
    if (v24)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          int v30 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          getClassNameHelper((OSObject *)this);
          CCLogStream::logEmergency(v30, "[dk] %s@%d:DKReporter::%s::%s(%d) super::updateReport failed count %u offset %llu capacity %llu", "updateReportGated", 54818);
        }
      }
    }
    goto LABEL_22;
  }
  uint64_t v24 = v22;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      long long v35 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      getClassNameHelper((OSObject *)this);
      CCLogStream::logEmergency(v35, "[dk] %s@%d:DKReporter::%s::%s(%d) ivars->fApStaInterface->updateReport failed count %u offset %llu capacity %llu", "updateReportGated", 54813);
    }
  }
LABEL_39:
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      int v29 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      getClassNameHelper((OSObject *)this);
      CCLogStream::logEmergency(v29, "[dk] %s@%d:DKReporter::%s::%s(%d) FAILED outElementCount %u capacity %llu", "updateReportGated");
    }
  }
LABEL_22:
  __int16 v25 = *(AppleBCMWLANIOReportingCore **)(*((void *)this + 9) + 5512);
  if (v25) {
    AppleBCMWLANIOReportingCore::accountingForUpdateReport(v25, v24, v23);
  }
  return v24;
}

uint64_t AppleBCMWLANCore::updateReport(OSObject *this, OSCollection *a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, IOMemoryDescriptor *a7)
{
  ivars = this[1].ivars;
  if (*((unsigned char *)ivars + 984))
  {
    uint64_t result = ((uint64_t (*)(OSObject *, OSCollection *, uint64_t, unsigned int *, uint64_t, uint64_t, IOMemoryDescriptor *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this, a2, a3, a4, a5, a6, a7);
    if (result)
    {
      ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v10 = (CCLogStream *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
        uint64_t ClassNameHelper = (const char *)getClassNameHelper(this);
        CCLogStream::logAlert(v10, "[dk] %s@%d:DKReporter::%s::%s(%d) \n", "updateReport", 54848, ClassNameHelper, "updateReport", 54848);
        return 0;
      }
    }
  }
  else
  {
    int v16 = a3;
    int v18 = (*(uint64_t (**)(void))(**((void **)ivars + 3865) + 144))(*((void *)ivars + 3865));
    uint64_t v20 = a2;
    int v22 = -1431655766;
    int v21 = v16;
    unint64_t v23 = a4;
    uint64_t v24 = a5;
    uint64_t v25 = a6;
    uint64_t v26 = a7;
    *a4 = 0;
    if (v18)
    {
      return AppleBCMWLANCore::updateReportGated((AppleBCMWLANCore *)this, &v20);
    }
    else
    {
      uint64_t v19 = ((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[1].free)(this);
      return (*(uint64_t (**)(uint64_t, uint64_t (*)(AppleBCMWLANCore *, OSCollection **), OSCollection **, void, void, void))(*(void *)v19 + 56))(v19, AppleBCMWLANCore::updateReportGated, &v20, 0, 0, 0);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::updateReport(AppleBCMWLANCore *this, OSCollection *a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, IOMemoryDescriptor *a7)
{
  return AppleBCMWLANCore::updateReport((OSObject *)((char *)this - 48), a2, a3, a4, a5, a6, a7);
}

uint64_t AppleBCMWLANCore::configureManagementFrameProtection(AppleBCMWLANCore *this, int a2)
{
  int v16 = 0;
  int v17 = a2;
  if (!IOParseBootArgNumber("bcom.feature.mfp", &v16, 4)) {
    goto LABEL_12;
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      int v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v13, "[dk] %s@%d:MFP boot-arg override: %d\n", "configureManagementFrameProtection", 55066, v16);
    }
  }
  if (v16)
  {
    AppleBCMWLANCore::featureFlagSetBit(this, 38);
LABEL_12:
    if (AppleBCMWLANCore::featureFlagIsBitSet(this, 38))
    {
      uint64_t v6 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
      v15[0] = &v17;
      v15[1] = 4;
      uint64_t v7 = AppleBCMWLANCommander::runIOVarSet(v6, (uint64_t)"mfp", (uint64_t)v15, 0, 0);
      uint64_t v8 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (v7)
      {
        if (v8)
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            int v10 = v17;
            uint64_t v11 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v7);
            CCLogStream::logAlert(v9, "[dk] %s@%d:cannot set MFP Support to %d : ret %x: %s  -> continue with initialization\n", "configureManagementFrameProtection", 55085, v10, v7, v11);
          }
        }
      }
      else if (v8)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          int v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logNoticeIf(v14, 0x80uLL, "[dk] %s@%d:MFP is %d(0 -- Disabled, 1 -- Enabled, 2 -- Required)\n", "configureManagementFrameProtection", 55087, v17);
        }
      }
    }
    return 0;
  }
  if (a2 != 2)
  {
    AppleBCMWLANCore::featureFlagClearBit(this, 38);
    int v17 = 0;
    goto LABEL_12;
  }
  uint64_t v4 = 3758097095;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v5, "[dk] %s@%d:%s: MFP boot-arg disable mfp but it is required\n", "configureManagementFrameProtection", 55071, "configureManagementFrameProtection");
    }
  }
  return v4;
}

uint64_t AppleBCMWLANCore::setMIMOPowerSaveProperties(AppleBCMWLANCore *a1)
{
  uint64_t result = AppleBCMWLANCore::featureFlagIsBitSet(a1, 44);
  if (result)
  {
    uint64_t v3 = *(void *)(*((void *)a1 + 9) + 5528);
    return AppleBCMWLANPowerManager::setMIMOPowerSaveProperties(v3);
  }
  return result;
}

uint64_t AppleBCMWLANCore::setWiFiCallPolicies(AppleBCMWLANCore *a1)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v3 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      CCLogStream::logNoticeIf(v3, 0x20uLL, "[dk] %s@%d:MIMO_PS: Enter %s \n", "setWiFiCallPolicies", 55140, "setWiFiCallPolicies");
    }
  }
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 44)) {
    AppleBCMWLANPowerManager::setWiFiCallPowerPolicy(*(void *)(*((void *)a1 + 9) + 5528));
  }
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
  if (result)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      return CCLogStream::logNoticeIf(v4, 0x20uLL, "[dk] %s@%d:MIMO_PS: Leave %s \n", "setWiFiCallPolicies", 55148, "setWiFiCallPolicies");
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::setReatimeAppPoliciesInternal(AppleBCMWLANCore *this, int a2)
{
  *(_DWORD *)(*((void *)this + 9) + 30828) = a2;
  if (a2)
  {
    if (*(_DWORD *)(*((void *)this + 9) + 29944) == 1)
    {
      if (AppleBCMWLANCore::featureFlagIsBitSet(this, 89)) {
        AppleBCMWLANCore::setRxLatPrioEnabBitmap(this, 127);
      }
    }
    return io80211_os_log();
  }
  else
  {
    uint64_t result = AppleBCMWLANCore::featureFlagIsBitSet(this, 89);
    if (result)
    {
      return AppleBCMWLANCore::setRxLatPrioEnabBitmap(this, 0);
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::setBatterySaveModeConfiguration(AppleBCMWLANCore *a1, _DWORD *a2)
{
  uint64_t result = AppleBCMWLANCore::isMIMOPowerSaveEnabled(a1);
  if (result)
  {
    uint64_t result = AppleBCMWLANPowerManager::setBatterySaveModeConfiguration(*(AppleBCMWLANCore ****)(*((void *)a1 + 9) + 5528), a2);
    *(_DWORD *)(*((void *)a1 + 9) + 16180) = *a2;
  }
  return result;
}

uint64_t AppleBCMWLANCore::getRouterMacAddress(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 3758097090;
  }
  uint64_t result = 0;
  uint64_t v4 = *(void *)(a1 + 72);
  __int16 v5 = *(_WORD *)(v4 + 9512);
  LODWORD(v4) = *(_DWORD *)(v4 + 9508);
  *(_WORD *)(a2 + 4) = v5;
  *(_DWORD *)a2 = v4;
  return result;
}

uint64_t AppleBCMWLANCore::enablePacketTimestamping(OSObject *this)
{
  if (((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v4 = (CCLogStream *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
      uint64_t ClassNameHelper = (const char *)getClassNameHelper(this);
      CCLogStream::logAlert(v4, "[dk] %s@%d:[WiFiTimeSync] %s::%s\n", "enablePacketTimestamping", 55304, ClassNameHelper, "enablePacketTimestamping");
    }
  }
  IO80211Controller::enablePacketTimestamping((IO80211Controller *)this);
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[1].free)(this)
                           + 56);
  return v2();
}

uint64_t AppleBCMWLANCore::enablePacketTimestampingGated(AppleBCMWLANCore *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 5400) + 472))();
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::enablePacketTimestamping(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::enablePacketTimestamping((OSObject *)((char *)this - 48));
}

uint64_t AppleBCMWLANCore::disablePacketTimestamping(OSObject *this)
{
  if (((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v4 = (CCLogStream *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[33].getMetaClass)(this);
      uint64_t ClassNameHelper = (const char *)getClassNameHelper(this);
      CCLogStream::logAlert(v4, "[dk] %s@%d:[WiFiTimeSync] %s::%s\n", "disablePacketTimestamping", 55312, ClassNameHelper, "disablePacketTimestamping");
    }
  }
  IO80211Controller::disablePacketTimestamping((IO80211Controller *)this);
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[1].free)(this)
                           + 56);
  return v2();
}

uint64_t AppleBCMWLANCore::disablePacketTimestampingGated(AppleBCMWLANCore *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 5400) + 480))();
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::disablePacketTimestamping(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::disablePacketTimestamping((OSObject *)((char *)this - 48));
}

uint64_t AppleBCMWLANCore::getTIMESYNC_INFO(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 72) + 5400) + 520))();
}

uint64_t AppleBCMWLANCore::getLQM_SUMMARY(uint64_t a1, uint64_t a2)
{
  memcpy((void *)(a2 + 160), (const void *)(*(void *)(a1 + 72) + 31037), 0x1000uLL);
  for (uint64_t i = 0; i != 4096; i += 256)
    *(unsigned char *)(*(void *)(a1 + 72) + i + 31037) = 0;
  return 0;
}

OSStringPtr AppleBCMWLANCore::newVendorString(AppleBCMWLANCore *this)
{
  OSDictionaryPtr v2 = OSDictionary::withCapacity(6u);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  if ((*(unsigned int (**)(void))(*(void *)(*(void *)(*((void *)this + 9) + 5400) + 48) + 408))()
    || (Object = OSDictionary::getObject(v3, "subsystem-vendor-id"),
        (__int16 v5 = (const OSNumber *)OSMetaClassBase::safeMetaCast(Object, gOSNumberMetaClass)) == 0))
  {
    OSStringPtr v7 = 0;
  }
  else
  {
    if (OSNumber::unsigned16BitValue(v5) == 4203) {
      uint64_t v6 = "Apple";
    }
    else {
      uint64_t v6 = "Unknown";
    }
    OSStringPtr v7 = OSString::withCString(v6);
  }
  ((void (*)(const OSDictionary *))v3->release)(v3);
  return v7;
}

OSStringPtr non-virtual thunk to'AppleBCMWLANCore::newVendorString(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::newVendorString((AppleBCMWLANCore *)((char *)this - 48));
}

OSStringPtr AppleBCMWLANCore::newModelString(AppleBCMWLANCore *this)
{
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  *(_OWORD *)__str = 0u;
  long long v7 = 0u;
  memset(__dst, 0, sizeof(__dst));
  uint64_t v1 = *(void *)(*((void *)this + 9) + 5400);
  if (v1)
  {
    int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 368))(v1);
    strcpy(__dst, "802.11 a/b/g/n/ac");
    if (v2 == 4378 || v2 == 4368) {
      strlcat(__dst, "/ax", 0x20uLL);
    }
  }
  else
  {
    strcpy(__dst, "802.11 a/b/g/n/ac");
  }
  snprintf(__str, 0x100uLL, "Wireless Network Adapter (%s)", __dst);
  return OSString::withCString(__str);
}

OSStringPtr non-virtual thunk to'AppleBCMWLANCore::newModelString(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::newModelString((AppleBCMWLANCore *)((char *)this - 48));
}

uint64_t AppleBCMWLANCore::setLMTPCCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 1848))(v4);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        __int16 v5 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 1848))(v4);
        uint64_t v6 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 112))(v4, a3);
        return CCLogStream::logAlert(v5, "[dk] %s@%d:Setting lpc failed: %s\n", "setLMTPCCallback", 55518, v6);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::setConcurrencyState(void *a1, char a2, int a3)
{
  uint64_t v4 = a1[9];
  char v5 = *(unsigned char *)(v4 + 19657);
  char v6 = v5 | a2;
  char v7 = v5 & ~a2;
  if (a3) {
    char v7 = v6;
  }
  *(unsigned char *)(v4 + 19657) = v7;
  uint64_t result = (*(uint64_t (**)(void))(*a1 + 1848))();
  if (result)
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      long long v9 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      return CCLogStream::logAlert(v9, "[dk] %s@%d:%s: concurrent state %d\n", "setConcurrencyState", 55582, "setConcurrencyState", *(unsigned __int8 *)(a1[9] + 19657));
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::isOpModeAllowed(AppleBCMWLANCore *a1, unsigned int a2)
{
  if ((*(unsigned char *)(*((void *)a1 + 9) + 19657) & a2) != 0) {
    return 1;
  }
  char IsBitSet = AppleBCMWLANCore::featureFlagIsBitSet(a1, 70);
  int v6 = *(unsigned __int8 *)(*((void *)a1 + 9) + 19657);
  if (IsBitSet)
  {
    uint64_t v2 = 1;
    switch(v6 & 0xFFFFFFEF)
    {
      case 0u:
        break;
      case 1u:
        BOOL v9 = ((a2 - 2) & 0xFFFFFFFD) == 0;
        goto LABEL_16;
      case 2u:
        BOOL v9 = a2 == 4 || a2 == 1;
        goto LABEL_16;
      case 4u:
        uint64_t v2 = a2 - 1 < 2;
        break;
      case 5u:
      case 0xDu:
        if (a2 != 2) {
          goto LABEL_11;
        }
        (*(void (**)(AppleBCMWLANCore *, void))(*(void *)a1 + 1104))(a1, 0);
        break;
      case 8u:
        if (a2 >= 5) {
          uint64_t v2 = 0;
        }
        else {
          uint64_t v2 = (0x16u >> a2) & 1;
        }
        break;
      case 9u:
      case 0xCu:
        BOOL v9 = a2 == 2;
LABEL_16:
        uint64_t v2 = v9;
        break;
      default:
LABEL_11:
        uint64_t v2 = 0;
        break;
    }
  }
  else
  {
    BOOL v7 = v6 == 0;
    BOOL v8 = (v6 & 4) == 0;
    if (a2 == 2) {
      uint64_t v2 = v8;
    }
    else {
      uint64_t v2 = v7;
    }
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      long long v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      CCLogStream::logAlert(v11, "[dk] %s@%d:%s: OpMode current state:%d  requested %d status %d", "isOpModeAllowed", 55688, "isOpModeAllowed", *(unsigned __int8 *)(*((void *)a1 + 9) + 19657), a2, v2);
    }
  }
  return v2;
}

uint64_t AppleBCMWLANCore::createSkywalkInterface(IOService *a1, IOService **a2, uint64_t a3, IO80211VirtualInterface *a4)
{
  if (!a3)
  {
    if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
    {
      ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
      if (CCLogStream::shouldLog())
      {
        long long v17 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        CCLogStream::logAlert(v17, "[dk] %s@%d:ERROR: Skywalk interface creation failed, invalid sifParams\n");
      }
    }
    return 3758096385;
  }
  if (*(_DWORD *)(a3 + 16) >= 0xCu)
  {
    if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
    {
      ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
      if (CCLogStream::shouldLog())
      {
        int v6 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
        CCLogStream::logAlert(v6, "[dk] %s@%d:ERROR: Skywalk interface %s%d creation failed, invalid interface id %d\n");
      }
    }
    return 3758096385;
  }
  if (*(_DWORD *)(a3 + 24) != 2)
  {
    long long v14 = 0;
    goto LABEL_23;
  }
  if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
  {
    ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
    if (CCLogStream::shouldLog())
    {
      long long v18 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
      CCLogStream::logAlert(v18, "[dk] %s@%d:Creating low latency skywalk interface %s%d id:%d role:%d\n", "createSkywalkInterface", 55746, *(const char **)a3, *(_DWORD *)(a3 + 20), *(_DWORD *)(a3 + 16), *(_DWORD *)(a3 + 24));
    }
  }
  if (!AppleBCMWLANConfigManager::isLowLatencyWiFiEnabled((AppleBCMWLANConfigManager *)a1[1].OSObject::OSObjectInterface::__vftable[342].init)) {
    return 3758096385;
  }
  uint64_t v7 = 3758097090;
  if (!a4) {
    return v7;
  }
  LOBYTE(a1[1].OSObject::OSObjectInterface::__vftable[2214].free) = 1;
  HIDWORD(a1[1].OSObject::OSObjectInterface::__vftable[2214].free) = *(_DWORD *)(a3 + 16);
  LODWORD(a1[1].OSObject::OSObjectInterface::__vftable[2215].init) = 2;
  a1[1].OSObject::OSObjectInterface::__vftable[2215].unsigned int free = (void (__cdecl *)(OSObjectInterface *__hidden))a4;
  uint64_t p_free = (uint64_t)&a1[1].OSObject::OSObjectInterface::__vftable[2214].free;
  int v11 = *(_DWORD *)(a3 + 8);
  *(_WORD *)(p_free + 28) = *(_WORD *)(a3 + 12);
  *(_DWORD *)(p_free + 24) = v11;
  uint64_t result = 0;
  if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
  {
    ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
    if (CCLogStream::shouldLog())
    {
      long long v19 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
      CCLogStream::logAlert(v19, "[dk] %s@%d:Creating low latency skywalk, ifid %d, %02X:%02X:%02X:%02X:%02X:%02X\n", "createSkywalkInterface", 55759, *(_DWORD *)(a3 + 16), LOBYTE(a1[1].OSObject::OSObjectInterface::__vftable[2216].init), BYTE1(a1[1].OSObject::OSObjectInterface::__vftable[2216].init), BYTE2(a1[1].OSObject::OSObjectInterface::__vftable[2216].init), BYTE3(a1[1].OSObject::OSObjectInterface::__vftable[2216].init), BYTE4(a1[1].OSObject::OSObjectInterface::__vftable[2216].init), BYTE5(a1[1].OSObject::OSObjectInterface::__vftable[2216].init));
    }
  }
  long long v12 = a1[1].OSObject::OSObjectInterface::__vftable;
  if ((IO80211VirtualInterface *)v12[707].init == a4)
  {
    long long v13 = "DriverKit_IO80211AWDLLLW";
    goto LABEL_25;
  }
  if ((IO80211VirtualInterface *)v12[1862].free == a4)
  {
    long long v13 = "DriverKit_IO80211NANLLW";
LABEL_25:
    uint64_t v7 = IOService::Create(a1, a1, v13, &result, 0);
    if (v7) {
      goto LABEL_26;
    }
    if (!result) {
      return 3758096385;
    }
    *a2 = result;
    *((void *)&a1[1].OSObject::OSObjectInterface::__vftable[700].free + *(unsigned int *)(a3 + 16)) = a2;
    IO80211SkywalkInterface::setInterfaceRole((IO80211SkywalkInterface *)result, 2u);
    ((void (*)(IOService *, IOService *, IOService *))a1->OSObject::OSMetaClassBase::__vftable[6].Dispatch)(a1, result, a1);
    IO80211SkywalkInterface::setParentInterface((IO80211SkywalkInterface *)result, a4);
    IO80211VirtualInterface::setCompanionLowLatencySkywalkInterface(a4, (IO80211SkywalkInterface *)result);
    ((void (*)(void))result->OSObject::OSMetaClassBase::__vftable[8].init)();
    long long v14 = result;
    long long v16 = a1[1].OSObject::OSObjectInterface::__vftable;
    if ((IO80211VirtualInterface *)v16[707].init == a4) {
      v16[708].init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))result;
    }
LABEL_23:
    uint64_t v7 = 0;
    *a2 = v14;
    return v7;
  }
LABEL_26:
  if (((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1))
  {
    ((void (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
    if (CCLogStream::shouldLog())
    {
      long long v20 = (CCLogStream *)((uint64_t (*)(IOService *))a1->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(a1);
      long long v21 = (const char *)(*(uint64_t (**)(IO80211VirtualInterface *))(*(void *)a4 + 160))(a4);
      CCLogStream::logAlert(v20, "[dk] %s@%d:ERROR: Could not create skywalk interface with primary %s (%d)", "createSkywalkInterface", 55769, v21, v7);
    }
  }
  return v7;
}

uint64_t AppleBCMWLANCore::isLowLatencyWiFiEnabled(AppleBCMWLANCore *this)
{
  return AppleBCMWLANConfigManager::isLowLatencyWiFiEnabled(*(AppleBCMWLANConfigManager **)(*((void *)this + 9)
                                                                                          + 5472));
}

uint64_t AppleBCMWLANCore::destroySkywalkInterface(AppleBCMWLANCore *this, unsigned int a2)
{
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1888))(this);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        char v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        return CCLogStream::logAlert(v5, "[dk] %s@%d:AppleBCMWLANCore::destroySkywalkInterface ifid:%d %p\n", "destroySkywalkInterface", 55872, a2, **(const void ***)(*((void *)this + 9) + 8 * a2 + 11208));
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::setWCL_JOIN_ABORT(AppleBCMWLANCore *this, void *a2)
{
  return AppleBCMWLANJoinAdapter::abortFirmwareJoinSync(*(AppleBCMWLANJoinAdapter **)(*((void *)this + 9) + 5424));
}

uint64_t AppleBCMWLANCore::setWCL_TRIGGER_CC(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 8);
  if (v2 == 1) {
    return AppleBCMWLANJoinAdapter::triggerCC(*(AppleBCMWLANJoinAdapter **)(*(void *)(a1 + 72) + 5424), a2);
  }
  if (v2) {
    return 3758097084;
  }
  return AppleBCMWLANScanAdapter::triggerCC(*(void *)(*(void *)(a1 + 72) + 5432), (long long *)a2);
}

uint64_t AppleBCMWLANCore::setWCL_SET_SCAN_HOME_AWAY_TIME(uint64_t a1, int *a2)
{
  return AppleBCMWLANScanAdapter::setScanHomeAwayTime(*(AppleBCMWLANScanAdapter **)(*(void *)(a1 + 72) + 5432), *a2);
}

uint64_t AppleBCMWLANCore::setRADIO_CHANSEQ_CONTROL(void *a1, unsigned char *a2)
{
  if (*a2)
  {
    if (!*(void *)(a1[9] + 11312))
    {
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          BOOL v9 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logCrit(v9, "[dk] %s@%d:Bad Parameter,no AWDL interface but AWDL channel sequence is specified \n");
        }
      }
      return 6;
    }
    uint64_t v4 = a2 + 4;
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v5 = a1[9];
  if (a2[1])
  {
    if (!*(void *)(v5 + 29800))
    {
      if ((*(uint64_t (**)(void *, unsigned char *))(*a1 + 1848))(a1, v4))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          int v11 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logCrit(v11, "[dk] %s@%d:Bad Parameter, no NAN interface but NAN channel sequence is specified \n");
        }
      }
      return 6;
    }
    uint64_t v6 = (uint64_t)(a2 + 404);
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(AppleBCMWLANProximityInterface **)(v5 + 11312);
  if (!v7)
  {
    if ((*(uint64_t (**)(void *, unsigned char *, uint64_t))(*a1 + 1848))(a1, v4, v6))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        long long v10 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logCrit(v10, "[dk] %s@%d:No AWDL Interface present \n");
      }
    }
    return 6;
  }
  return AppleBCMWLANProximityInterface::buildChanSequenceCommand(v7, v4, v6);
}

uint64_t AppleBCMWLANCore::setRC2CoexMode(AppleBCMWLANCore *this, int *a2)
{
  uint64_t v3 = IOMallocZeroData();
  if (v3)
  {
    *(_DWORD *)uint64_t v3 = 16875520;
    *(_WORD *)(v3 + 4) = 1;
    *(_DWORD *)(v3 + 8) = 1;
    *(unsigned char *)(v3 + 12) = *(_DWORD *)(*((void *)this + 9) + 10724) != 0;
    *(_WORD *)(v3 + 6) = 8;
    v14[0] = v3;
    v14[1] = 16;
    uint64_t v4 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 136))(v4)) {
      uint64_t v5 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"rc2cx");
    }
    else {
      uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"rc2cx", (uint64_t)v14, 0, 0);
    }
    uint64_t v6 = v5;
    uint64_t v8 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (v6)
    {
      if (v8)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          BOOL v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          long long v10 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
          CCLogStream::logCrit(v9, "[dk] %s@%d:rc2cx setting coexmode failed, error %s\n", "setRC2CoexMode", 56151, v10);
        }
      }
    }
    else if (v8)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        long long v13 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, void))(*(void *)this + 112))(this, 0);
        CCLogStream::logAlert(v12, "[dk] %s@%d:Configured RC2 Coex mode to %s, 0x%x\n", "setRC2CoexMode", 56147, v13, *(_DWORD *)(*((void *)this + 9) + 10724));
      }
    }
    IOFreeData();
  }
  else
  {
    uint64_t v6 = 3758097085;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:rc2cx cmd alloc fail\n", "setRC2CoexMode", 56107);
      }
    }
  }
  return v6;
}

uint64_t AppleBCMWLANCore::handleRC2CoexModeAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (a3)
  {
    uint64_t v7 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 1848))(v7);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 1848))(v7);
        BOOL v9 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 112))(v7, a3);
        return CCLogStream::logAlert(v8, "[dk] %s@%d:Error: Failed to set RC2 coex mode iovar - %s : %s\n", "handleRC2CoexModeAsyncCallback", 56592, a5, v9);
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setRC2CoexMode(AppleBCMWLANCore *this, int *a2)
{
  return AppleBCMWLANCore::setRC2CoexMode((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setRC2CoexPMProtectionMode(AppleBCMWLANCore *this, int *a2)
{
  uint64_t v3 = IOMallocZeroData();
  if (v3)
  {
    *(_DWORD *)uint64_t v3 = 16875520;
    *(_WORD *)(v3 + 4) = 2;
    *(_DWORD *)(v3 + 8) = 1;
    *(unsigned char *)(v3 + 12) = *(_DWORD *)(*((void *)this + 9) + 10728) != 0;
    *(_WORD *)(v3 + 6) = 8;
    v11[0] = v3;
    v11[1] = 16;
    uint64_t v4 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 136))(v4)) {
      uint64_t v5 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"rc2cx");
    }
    else {
      uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"rc2cx", (uint64_t)v11, 0, 0);
    }
    uint64_t v6 = v5;
    if (v5)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          BOOL v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          long long v10 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
          CCLogStream::logCrit(v9, "[dk] %s@%d:rc2cx setting PM Protection mode failed, error %s\n", "setRC2CoexPMProtectionMode", 56220, v10);
        }
      }
    }
    IOFreeData();
  }
  else
  {
    uint64_t v6 = 3758097085;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:rc2cx cmd alloc fail\n", "setRC2CoexPMProtectionMode", 56176);
      }
    }
  }
  return v6;
}

uint64_t AppleBCMWLANCore::handleRC2PMProtectionModeAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (a3)
  {
    uint64_t v7 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 1848))(v7);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 1848))(v7);
        BOOL v9 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 112))(v7, a3);
        return CCLogStream::logAlert(v8, "[dk] %s@%d: Error: Failed to set PM Protection mode iovar - %s : %s\n", "handleRC2PMProtectionModeAsyncCallback", 56604, a5, v9);
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setRC2CoexPMProtectionMode(AppleBCMWLANCore *this, int *a2)
{
  return AppleBCMWLANCore::setRC2CoexPMProtectionMode((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setRC2CoexCTS2Sconfig(AppleBCMWLANCore *this, int *a2)
{
  uint64_t v3 = IOMallocZeroData();
  if (v3)
  {
    *(_DWORD *)uint64_t v3 = 16875520;
    *(_WORD *)(v3 + 4) = 3;
    *(_DWORD *)(v3 + 8) = 1;
    *(unsigned char *)(v3 + 12) = *(unsigned char *)(*((void *)this + 9) + 10734);
    *(unsigned char *)(v3 + 13) = *(unsigned char *)(*((void *)this + 9) + 10735);
    *(unsigned char *)(v3 + 14) = *(unsigned char *)(*((void *)this + 9) + 10736);
    *(_WORD *)(v3 + 6) = 8;
    v11[0] = v3;
    v11[1] = 16;
    uint64_t v4 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 88))(this);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 136))(v4)) {
      uint64_t v5 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"rc2cx");
    }
    else {
      uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"rc2cx", (uint64_t)v11, 0, 0);
    }
    uint64_t v6 = v5;
    if (v5)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          BOOL v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          long long v10 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v6);
          CCLogStream::logCrit(v9, "[dk] %s@%d:rc2cx setting CTS2S config mode failed, error %s\n", "setRC2CoexCTS2Sconfig", 56291, v10);
        }
      }
    }
    IOFreeData();
  }
  else
  {
    uint64_t v6 = 3758097085;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:rc2cx cmd alloc fail\n", "setRC2CoexCTS2Sconfig", 56245);
      }
    }
  }
  return v6;
}

uint64_t AppleBCMWLANCore::handleRC2CoexCTS2SconfigAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (a3)
  {
    uint64_t v7 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 1848))(v7);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 1848))(v7);
        BOOL v9 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 112))(v7, a3);
        return CCLogStream::logAlert(v8, "[dk] %s@%d: Error: Failed to set RC2 CTS2S cfg iovar - %s : %s\n", "handleRC2CoexCTS2SconfigAsyncCallback", 56614, a5, v9);
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setRC2CoexCTS2Sconfig(AppleBCMWLANCore *this, int *a2)
{
  return AppleBCMWLANCore::setRC2CoexCTS2Sconfig((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::setRC1CoexMode(AppleBCMWLANCore *this, int *a2)
{
  uint64_t v3 = *((void *)this + 9);
  int v10 = *(_DWORD *)(v3 + 10716);
  uint64_t v4 = *(AppleBCMWLANCommander **)(v3 + 5416);
  v9[0] = &v10;
  v9[1] = 4;
  uint64_t v5 = AppleBCMWLANCommander::runIOVarSet(v4, (uint64_t)"rc1coex_mode", (uint64_t)v9, 0, 0);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v8 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
        CCLogStream::logCrit(v7, "[dk] %s@%d:rc1coex_mode failed, error %s\n", "setRC1CoexMode", 56306, v8);
      }
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setRC1CoexMode(AppleBCMWLANCore *this, int *a2)
{
  return AppleBCMWLANCore::setRC1CoexMode((AppleBCMWLANCore *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANCore::updateDataPathActivityTimestamp(AppleBCMWLANCore *this, unint64_t a2)
{
  unint64_t v5 = a2;
  uint64_t result = IO80211BssManager::isAssociated(*(IO80211BssManager **)(*((void *)this + 9) + 5440));
  uint64_t v4 = *((void *)this + 9);
  if (result)
  {
    if (*(void *)(v4 + 6232))
    {
      uint64_t result = AppleBCMWLANCore::timeSinceLastActivity_abs(this, &v5);
      uint64_t v4 = *((void *)this + 9);
      if (result >= *(void *)(v4 + 6560))
      {
        uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v4 + 6232) + 120))(*(void *)(v4 + 6232), 2000);
        uint64_t v4 = *((void *)this + 9);
      }
    }
  }
  *(void *)(v4 + 6544) = v5;
  return result;
}

uint64_t AppleBCMWLANCore::handleDataPathActivity(OSDictionary *this)
{
  uint64_t result = (uint64_t)AppleBCMWLANCore::updateInactivityAndSleepCounters(this, 1);
  uint64_t v3 = this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable;
  if (HIDWORD(v3[64].getCount) && BYTE2(v3[7].free) && HIDWORD(v3[189].init) && !LODWORD(v3[64].iterateObjects))
  {
    uint64_t v4 = AppleBCMWLANPowerManager::configureBeaconBasedChannelWidthSwitch((AppleBCMWLANCore ***)v3[53].release, 0);
    if (v4 != -536870201 && v4 != 0)
    {
      uint64_t v6 = v4;
      if (((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this))
      {
        ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
        if (CCLogStream::shouldLog())
        {
          BOOL v9 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
          int v10 = (const char *)((uint64_t (*)(OSDictionary *, uint64_t))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[1].retain)(this, v6);
          CCLogStream::logAlertIf(v9, 0x20uLL, "[dk] %s@%d: Error: cannot configure beacon based Channel Width : %s\n", "handleDataPathActivity", 56395, v10);
        }
      }
    }
    uint64_t result = IO80211BssManager::isAssociatedToAdhoc((IO80211BssManager *)this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[52].Dispatch);
    if ((result & 1) == 0)
    {
      uint64_t result = AppleBCMWLANConfigManager::setupBeaconOffload((AppleBCMWLANCore ***)this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[52].copyCollection, 0, 0, LOBYTE(this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[2].getMetaClass), 0);
      if (result)
      {
        uint64_t v7 = result;
        uint64_t result = ((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
        if (result)
        {
          ((void (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            int v11 = (CCLogStream *)((uint64_t (*)(OSDictionary *))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[17].getCapacity)(this);
            long long v12 = (const char *)((uint64_t (*)(OSDictionary *, uint64_t))this->OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[1].retain)(this, v7);
            uint64_t result = CCLogStream::logAlert(v11, "[dk] %s@%d: Error: cannot set beacon offload Error: %s\n", "handleDataPathActivity", 56402, v12);
          }
        }
      }
    }
    BYTE2(this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[7].free) = 0;
    uint64_t v8 = (char *)&this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[173].Dispatch + 3;
    if (*v8)
    {
      unsigned char *v8 = 0;
      BYTE4(this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[189].flushCollection) = 1;
      BYTE5(this[1].OSCollection::OSContainer::OSObject::OSMetaClassBase::__vftable[189].flushCollection) = 1;
      return AppleBCMWLANCore::setTrafficInactivityStats(this);
    }
  }
  return result;
}

AppleBCMWLANIO80211APSTAInterface *AppleBCMWLANCore::setSoftAPPowerState(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result = *(AppleBCMWLANIO80211APSTAInterface **)(*(void *)(a1 + 72) + 11320);
  if (result) {
    return (AppleBCMWLANIO80211APSTAInterface *)AppleBCMWLANIO80211APSTAInterface::setPowerSaveState(result, a2, a3);
  }
  return result;
}

uint64_t AppleBCMWLANCore::requestBlockScan(AppleBCMWLANCore *this, int a2, uint64_t a3)
{
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      int v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logNotice(v10, "[dk] %s@%d: %s: Requesting for Scan Block: %d %llu\n", "requestBlockScan", 56441, "requestBlockScan", a2, a3);
    }
  }
  unint64_t v6 = a3 + ((unint64_t)((0 * (unsigned __int128)0x431BDE82D7B634DBuLL) >> 64) >> 18);
  mach_continuous_time();
  uint64_t result = absolutetime_to_nanoseconds();
  uint64_t v8 = *((void *)this + 9);
  unint64_t v9 = *(void *)(v8 + 19664);
  if (!v9)
  {
    *(void *)(v8 + 19664) = 0;
    *(unsigned char *)(*((void *)this + 9) + 19672) = 0;
    uint64_t v8 = *((void *)this + 9);
    unint64_t v9 = *(void *)(v8 + 19664);
  }
  if (v9 < v6)
  {
    *(void *)(v8 + 19664) = v6;
    *(unsigned char *)(*((void *)this + 9) + 19672) |= 1 << a2;
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleConfigureAvgRssiParamsAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 1848))(v4);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        unint64_t v5 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 1848))(v4);
        unint64_t v6 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 112))(v4, a3);
        return CCLogStream::logAlert(v5, "[dk] %s@%d: Error: cannot Configure RSSI Window: %s\n", "handleConfigureAvgRssiParamsAsyncCallback", 56495, v6);
      }
    }
  }
  return result;
}

void *AppleBCMWLANCore::handleGetDtimParam(void *result, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = result;
  if (a3)
  {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 1848))(result);
    if (result)
    {
      (*(void (**)(void *))(*v4 + 1848))(v4);
      uint64_t result = (void *)CCLogStream::shouldLog();
      if (result)
      {
        unint64_t v6 = (CCLogStream *)(*(uint64_t (**)(void *))(*v4 + 1848))(v4);
        uint64_t v7 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*v4 + 112))(v4, a3);
        return (void *)CCLogStream::logAlert(v6, "[dk] %s@%d:Error: cannot get DTIM param: %s\n", "handleGetDtimParam", 56577, v7);
      }
    }
  }
  else if (*a4)
  {
    *(_DWORD *)(result[9] + 10376) = *(unsigned __int8 *)*a4;
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 1848))(result);
    if (result)
    {
      (*(void (**)(void *))(*v4 + 1848))(v4);
      uint64_t result = (void *)CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(void *))(*v4 + 1848))(v4);
        return (void *)CCLogStream::logInfo(v8, "[dk] %s@%d:AP DTIM = %d\n", "handleGetDtimParam", 56585, *(_DWORD *)(v4[9] + 10376));
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::setHp2pCtrlCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    if (*(void *)(a2 + 8)) {
      unint64_t v5 = *(const char **)(a2 + 8);
    }
    else {
      unint64_t v5 = "(null)";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 1848))(v4);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        unint64_t v6 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 1848))(v4);
        uint64_t v7 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 112))(v4, a3);
        return CCLogStream::logAlert(v6, "[dk] %s@%d: Error: Cannot set HP2P Ctrl (%s): %s\n", "setHp2pCtrlCallback", 56726, v5, v7);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::setHP2P_CTRL(void *a1, uint64_t a2)
{
  memset(v17, 170, sizeof(v17));
  uint64_t v4 = IOMallocZeroData();
  if (((*(uint64_t (**)(void))(**(void **)(a1[9] + 5400) + 800))() & 1) == 0)
  {
    uint64_t v10 = 3758097095;
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        long long v12 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v12, "[dk] %s@%d:FW does not support llw", "setHP2P_CTRL", 56748);
        uint64_t v10 = 3758097095;
        if (!v4) {
          return v10;
        }
        goto LABEL_8;
      }
    }
    goto LABEL_16;
  }
  if (!a2)
  {
    uint64_t v10 = 3758097090;
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        long long v15 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v15, "[dk] %s@%d:bad argument\n", "setHP2P_CTRL", 56749);
        uint64_t v10 = 3758097090;
        if (!v4) {
          return v10;
        }
        goto LABEL_8;
      }
    }
LABEL_16:
    if (!v4) {
      return v10;
    }
    goto LABEL_8;
  }
  if (v4)
  {
    *(_DWORD *)uint64_t v4 = 16875520;
    *(_WORD *)(v4 + 4) = 8;
    *(_DWORD *)(v4 + 8) = 1;
    *(_WORD *)(v4 + 12) = 1;
    *(_WORD *)(v4 + 16) = 8;
    if (*(unsigned char *)(a1[9] + 221))
    {
      *(_WORD *)(v4 + 18) = 4;
      *(_DWORD *)(v4 + 20) = *(_DWORD *)(a2 + 4);
      unsigned int v5 = 24;
    }
    else
    {
      unsigned int v5 = 16;
    }
    *(_WORD *)(v4 + 6) = v5 - 8;
    v17[0] = a1;
    v17[1] = AppleBCMWLANCore::setHp2pCtrlCallback;
    void v17[2] = 0;
    v17[3] = v4;
    v17[4] = v5;
    uint64_t v6 = a1[9];
    uint64_t v7 = *(AppleBCMWLANCommander **)(v6 + 5416);
    unsigned __int8 InterfaceId = IO80211SkywalkInterface::getInterfaceId(*(IO80211SkywalkInterface **)(v6 + 11312));
    uint64_t v9 = AppleBCMWLANCommander::sendVirtualIOVarSet(v7, InterfaceId, "hp2p", (uint64_t)&v17[3], kNoRxExpected, (uint64_t)v17, 0);
    uint64_t v10 = 0;
    if (v9)
    {
      uint64_t v14 = v9;
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          long long v16 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logAlert(v16, "[dk] %s@%d:hp2p set iovar failed\n", "setHP2P_CTRL", 56786);
        }
      }
      uint64_t v10 = v14;
    }
LABEL_8:
    IOFreeData();
    return v10;
  }
  uint64_t v10 = 3758097085;
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      long long v13 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v13, "[dk] %s@%d:hp2p cmd alloc fail\n", "setHP2P_CTRL", 56750);
    }
  }
  return v10;
}

uint64_t AppleBCMWLANCore::isRllwEnabled(AppleBCMWLANCore *this)
{
  return *(unsigned __int8 *)(*((void *)this + 9) + 221);
}

uint64_t AppleBCMWLANCore::setBSS_BLACKLIST(AppleBCMWLANCore *a1, long long *a2)
{
  if (a2)
  {
    uint64_t v3 = (_OWORD *)(*((void *)a1 + 9) + 17690);
    *(_OWORD *)((char *)v3 + 27) = 0u;
    _OWORD *v3 = 0u;
    v3[1] = 0u;
    uint64_t v4 = (_OWORD *)(*((void *)a1 + 9) + 17690);
    long long v5 = *a2;
    long long v6 = a2[1];
    *(_OWORD *)((char *)v4 + 27) = *(long long *)((char *)a2 + 27);
    *uint64_t v4 = v5;
    v4[1] = v6;
    int v7 = *(unsigned __int8 *)(*((void *)a1 + 9) + 17690);
    uint64_t v8 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    if (v7)
    {
      if (v8)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          long long v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logAlert(v18, "[dk] %s@%d:BSS Blacklist configured - bssCount:%d\n", "setBSS_BLACKLIST", 56933, *(unsigned __int8 *)(*((void *)a1 + 9) + 17690));
        }
      }
      if (*(unsigned char *)(*((void *)a1 + 9) + 17690))
      {
        unint64_t v9 = 0;
        uint64_t v10 = 17696;
        do
        {
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              int v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
              long long v12 = (unsigned __int8 *)(*((void *)a1 + 9) + v10);
              CCLogStream::logAlert(v11, "[dk] %s@%d:(%d) BSSID = %02x:%02x:%02x:%02x:%02x:%02x\n", "setBSS_BLACKLIST", 56935, v9, *(v12 - 5), *(v12 - 4), *(v12 - 3), *(v12 - 2), *(v12 - 1), *v12);
            }
          }
          ++v9;
          v10 += 6;
        }
        while (v9 < *(unsigned __int8 *)(*((void *)a1 + 9) + 17690));
      }
      long long v13 = a1;
      int v14 = 3;
    }
    else
    {
      if (v8)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          long long v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logAlert(v19, "[dk] %s@%d:BSS Blacklist cleared!\n", "setBSS_BLACKLIST", 56944);
        }
      }
      long long v13 = a1;
      int v14 = 0;
    }
    AppleBCMWLANCore::setBssBlacklistMode(v13, v14);
    AppleBCMWLANCore::getBssBlacklistModeAsync(a1);
    AppleBCMWLANCore::setBssBlacklist(a1, (unsigned char *)(*((void *)a1 + 9) + 17690));
    AppleBCMWLANCore::getBssBlacklistAsyncGated(a1);
    return 0;
  }
  else
  {
    uint64_t v15 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        long long v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v16, "[dk] %s@%d:Bad argument for BSS Blacklist!\n", "setBSS_BLACKLIST", 56954);
      }
    }
  }
  return v15;
}

uint64_t AppleBCMWLANCore::setBssBlacklistMode(AppleBCMWLANCore *this, int a2)
{
  int v12 = a2;
  v11[0] = this;
  v11[1] = AppleBCMWLANCore::setBssBlacklistModeAsyncCallback;
  void v11[2] = 0;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      int v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v7, "[dk] %s@%d:Configuring FW with BSS Blacklist mode:%d\n", "setBssBlacklistMode", 57117, a2);
    }
  }
  uint64_t v4 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  v10[0] = &v12;
  v10[1] = 4;
  uint64_t v5 = AppleBCMWLANCommander::sendIOCtlSet(v4, 106, (uint64_t)v10, kNoRxExpected, (uint64_t)v11, 0);
  if (v5)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        unint64_t v9 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v5);
        CCLogStream::logAlert(v8, "[dk] %s@%d: Error: cannot set macmode: ret %x: %s\n", "setBssBlacklistMode", 57122, v5, v9);
      }
    }
  }
  return v5;
}

uint64_t AppleBCMWLANCore::getBssBlacklistModeAsync(AppleBCMWLANCore *this)
{
  v8[0] = this;
  v8[1] = AppleBCMWLANCore::getBssBlacklistModeAsyncCallback;
  void v8[2] = 0;
  int v2 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  int v7 = 262148;
  uint64_t v3 = AppleBCMWLANCommander::sendIOCtlGet(v2, 105, (uint64_t)&kNoTxPayload, (unsigned __int16 *)&v7, (uint64_t)v8, 0);
  if (v3)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        long long v6 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v3);
        CCLogStream::logAlert(v5, "[dk] %s@%d: Error: cannot get macmode: ret %x: %s\n", "getBssBlacklistModeAsync", 57147, v3, v6);
      }
    }
  }
  return v3;
}

uint64_t AppleBCMWLANCore::setBssBlacklist(void *a1, unsigned char *a2)
{
  v27[0] = a1;
  v27[1] = AppleBCMWLANCore::setBssBlacklistAsyncCallback;
  signed __int8 v27[2] = 0;
  if (*a2 < 8u)
  {
    if (*a2)
    {
      uint64_t v6 = 6 * *a2 + 4;
      int v7 = (unsigned int *)IOMallocZeroData();
      if (v7)
      {
        uint64_t v8 = v7;
        unsigned int v9 = *a2;
        *int v7 = v9;
        if (v9)
        {
          uint64_t v10 = 0;
          unint64_t v11 = 0;
          do
          {
            int v12 = (char *)v7 + v10;
            int v13 = *(_DWORD *)&a2[v10 + 1];
            *((_WORD *)v12 + 4) = *(_WORD *)&a2[v10 + 5];
            *((_DWORD *)v12 + 1) = v13;
            ++v11;
            v10 += 6;
          }
          while (v11 < *a2);
          if (*v7)
          {
            if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
            {
              (*(void (**)(void *))(*a1 + 1848))(a1);
              if (CCLogStream::shouldLog())
              {
                uint64_t v24 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                CCLogStream::logAlert(v24, "[dk] %s@%d:Configuring FW with BSS Blacklist - bssCount:%d\n", "setBssBlacklist", 57021, *v8);
              }
            }
            if (*v8)
            {
              unint64_t v14 = 0;
              uint64_t v15 = (unsigned __int8 *)v8 + 9;
              do
              {
                if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
                {
                  (*(void (**)(void *))(*a1 + 1848))(a1);
                  if (CCLogStream::shouldLog())
                  {
                    long long v16 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
                    CCLogStream::logAlert(v16, "[dk] %s@%d:(%d) BSSID =%02x:%02x:%02x:%02x:%02x:%02x\n", "setBssBlacklist", 57023, v14, *(v15 - 5), *(v15 - 4), *(v15 - 3), *(v15 - 2), *(v15 - 1), *v15);
                  }
                }
                ++v14;
                v15 += 6;
              }
              while (v14 < *v8);
            }
          }
        }
        long long v17 = *(AppleBCMWLANCommander **)(a1[9] + 5416);
        uint64_t v25 = v8;
        uint64_t v26 = v6;
        uint64_t v4 = AppleBCMWLANCommander::sendIOCtlSet(v17, 70, (uint64_t)&v25, kNoRxExpected, (uint64_t)v27, 0);
        if (v4)
        {
          if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
          {
            (*(void (**)(void *))(*a1 + 1848))(a1);
            if (CCLogStream::shouldLog())
            {
              int v22 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
              unint64_t v23 = (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 112))(a1, v4);
              CCLogStream::logAlert(v22, "[dk] %s@%d: Error: cannot set maclist: ret %x: %s\n", "setBssBlacklist", 57029, v4, v23);
            }
          }
        }
        IOFreeData();
      }
      else
      {
        return 12;
      }
    }
    else
    {
      if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
      {
        (*(void (**)(void *))(*a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          long long v21 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
          CCLogStream::logAlert(v21, "[dk] %s@%d:Clearing FW BSS Blacklist\n", "setBssBlacklist", 57032);
        }
      }
      int v29 = 0;
      uint64_t v28 = 0;
      long long v18 = *(AppleBCMWLANCommander **)(a1[9] + 5416);
      uint64_t v25 = (unsigned int *)&v28;
      uint64_t v26 = 12;
      uint64_t v4 = AppleBCMWLANCommander::sendIOCtlSet(v18, 70, (uint64_t)&v25, kNoRxExpected, (uint64_t)v27, 0);
      if (v4)
      {
        if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
        {
          (*(void (**)(void *))(*a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            long long v19 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
            (*(void (**)(void *, uint64_t))(*a1 + 112))(a1, v4);
            CCLogStream::logAlert(v19, "[dk] %s@%d: Error: cannot set maclist: ret %x: %s\n");
          }
        }
      }
    }
  }
  else
  {
    uint64_t v4 = 3758097090;
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:Exceeded BSSID count %u > %u\n");
      }
    }
  }
  return v4;
}

uint64_t AppleBCMWLANCore::getBssBlacklistAsyncGated(AppleBCMWLANCore *this)
{
  v8[0] = this;
  v8[1] = AppleBCMWLANCore::getBssBlacklistAsyncCallback;
  void v8[2] = 0;
  int v2 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
  int v7 = 67108876;
  uint64_t v3 = AppleBCMWLANCommander::sendIOCtlGet(v2, 69, (uint64_t)&kNoTxPayload, (unsigned __int16 *)&v7, (uint64_t)v8, 0);
  if (v3)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v6 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v3);
        CCLogStream::logAlert(v5, "[dk] %s@%d: Error: cannot get maclist: ret %x: %s\n", "getBssBlacklistAsyncGated", 57095, v3, v6);
      }
    }
  }
  return v3;
}

uint64_t AppleBCMWLANCore::setBssBlacklistAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 1848))(v4);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 1848))(v4);
        uint64_t v6 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 112))(v4, a3);
        return CCLogStream::logAlert(v5, "[dk] %s@%d: setting maclist failure, error %s\n", "setBssBlacklistAsyncCallback", 56979, v6);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::getBssBlacklistAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3, unsigned int **a4)
{
  uint64_t v4 = (IO80211Controller *)result;
  if (a3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(IO80211Controller *))(*(void *)v4 + 1848))(v4);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v4 + 1848))(v4);
        int v7 = (const char *)(*(uint64_t (**)(IO80211Controller *, uint64_t))(*(void *)v4 + 112))(v4, a3);
        return CCLogStream::logAlert(v6, "[dk] %s@%d: getting maclist failure, error %s\n", "getBssBlacklistAsyncCallback", 57053, v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *a4;
    if (*a4)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
      if (result)
      {
        (*(void (**)(IO80211Controller *))(*(void *)v4 + 1848))(v4);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          unint64_t v14 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v4 + 1848))(v4);
          uint64_t result = CCLogStream::logAlert(v14, "[dk] %s@%d:FW BSS Blacklist - bssCount:%d\n", "getBssBlacklistAsyncCallback", 57064, *v8);
        }
      }
      if (*v8)
      {
        unint64_t v9 = 0;
        uint64_t v10 = (unsigned __int8 *)v8 + 9;
        do
        {
          uint64_t result = (*(uint64_t (**)(IO80211Controller *))(*(void *)v4 + 1848))(v4);
          if (result)
          {
            (*(void (**)(IO80211Controller *))(*(void *)v4 + 1848))(v4);
            uint64_t result = CCLogStream::shouldLog();
            if (result)
            {
              int v12 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v4 + 1848))(v4);
              uint64_t result = CCLogStream::logAlert(v12, "[dk] %s@%d:(%d) BSSID =%02x:%02x:%02x:%02x:%02x:%02x\n", "getBssBlacklistAsyncCallback", 57067, v9, *(v10 - 5), *(v10 - 4), *(v10 - 3), *(v10 - 2), *(v10 - 1), *v10);
            }
          }
          ++v9;
          unint64_t v11 = *v8;
          v10 += 6;
        }
        while (v9 < v11);
        if (v11)
        {
          int v13 = *(IO80211SkywalkInterface **)(*((void *)v4 + 9) + 11304);
          return IO80211Controller::postMessage(v4, v13, 0xA3u, v8, 6 * (v11 - 1) + 12, 1);
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::getBSS_BLACKLIST(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) + 56);
  return v1();
}

uint64_t AppleBCMWLANCore::setBssBlacklistModeAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 1848))(v4);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 1848))(v4);
        uint64_t v6 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 112))(v4, a3);
        return CCLogStream::logAlert(v5, "[dk] %s@%d: setting maclist failure, error %s\n", "setBssBlacklistModeAsyncCallback", 57105, v6);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::getBssBlacklistModeAsyncCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1);
  if (a3)
  {
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 1848))(a1);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 112))(a1, a3);
        return CCLogStream::logAlert(v6, "[dk] %s@%d: getting maclist failure, error %s\n");
      }
    }
  }
  else if (result)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 1848))(a1);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      int v7 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1848))(a1);
      return CCLogStream::logAlert(v7, "[dk] %s@%d:Mode = %d\n");
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleSetEntropyForRNGAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 1848))(v4);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 1848))(v4);
        uint64_t v6 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 112))(v4, a3);
        return CCLogStream::logAlert(v5, "[dk] %s@%d: Error: cannot set entroy for RNG: %s\n", "handleSetEntropyForRNGAsyncCallback", 57156, v6);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::isP2pAirplayActive(AppleBCMWLANCore *this)
{
  uint64_t v2 = *((void *)this + 9);
  uint64_t v3 = *(AppleBCMWLANProximityInterface **)(v2 + 11312);
  if (v3)
  {
    return AppleBCMWLANProximityInterface::isAirplayActive(v3);
  }
  else
  {
    HIDWORD(v5) = 652835029 * *(_DWORD *)(v2 + 30916);
    LODWORD(v5) = HIDWORD(v5);
    if ((v5 >> 3) <= 0x418937)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v6, "[dk] %s@%d: Null proximity interface! \n", "isP2pAirplayActive", 57244);
        }
      }
    }
    ++*(_DWORD *)(*((void *)this + 9) + 30916);
    return 0;
  }
}

BOOL AppleBCMWLANCore::mapLowLatencyLowPriority(AppleBCMWLANCore *this)
{
  uint64_t v2 = *((void *)this + 9);
  uint64_t v3 = *(AppleBCMWLANProximityInterface **)(v2 + 11312);
  if (v3)
  {
    return AppleBCMWLANProximityInterface::isAirplayLlwMapToLowPriority(v3);
  }
  else
  {
    HIDWORD(v5) = 652835029 * *(_DWORD *)(v2 + 30916);
    LODWORD(v5) = HIDWORD(v5);
    if ((v5 >> 3) <= 0x418937)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v6, "[dk] %s@%d: Null proximity interface! \n", "mapLowLatencyLowPriority", 57265);
        }
      }
    }
    ++*(_DWORD *)(*((void *)this + 9) + 30916);
    return 0;
  }
}

BOOL AppleBCMWLANCore::isLlwRequeueEnabled(AppleBCMWLANCore *this)
{
  uint64_t v2 = *((void *)this + 9);
  uint64_t v3 = *(AppleBCMWLANProximityInterface **)(v2 + 11312);
  if (v3)
  {
    return AppleBCMWLANProximityInterface::isLlwRequeueEnabled(v3);
  }
  else
  {
    HIDWORD(v5) = 652835029 * *(_DWORD *)(v2 + 30916);
    LODWORD(v5) = HIDWORD(v5);
    if ((v5 >> 3) <= 0x418937)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v6, "[dk] %s@%d: Null proximity interface! \n", "isLlwRequeueEnabled", 57280);
        }
      }
    }
    ++*(_DWORD *)(*((void *)this + 9) + 30916);
    return 0;
  }
}

uint64_t AppleBCMWLANCore::getCUR_PMK(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 3758097095;
  if (AppleBCMWLAN_isDevFusedOrCSRInternal())
  {
    if ((allowWiFiDebug(void)::checked & 1) == 0)
    {
      allowWiFiDebug(void)::checked = 1;
      IOParseBootArgNumber("wlan.debug.enable", &allowWiFiDebug(void)::debugEnasbled, 4);
    }
    if (allowWiFiDebug(void)::debugEnasbled)
    {
      if (IO80211BssManager::isAssociated(*(IO80211BssManager **)(*(void *)(a1 + 72) + 5440)))
      {
        uint64_t v5 = *(void *)(a1 + 72);
        size_t v6 = *(unsigned int *)(v5 + 288);
        if ((v6 - 1) > 0x3F)
        {
          return 3758097084;
        }
        else
        {
          memcpy((void *)(a2 + 8), (const void *)(v5 + 223), v6);
          uint64_t v4 = 0;
          *(_DWORD *)(a2 + 4) = *(_DWORD *)(*(void *)(a1 + 72) + 288);
          *(_OWORD *)(a2 + 76) = *(_OWORD *)(*(void *)(a1 + 72) + 292);
          *(_DWORD *)(a2 + 72) = 16;
        }
      }
      else
      {
        return 3758097136;
      }
    }
  }
  return v4;
}

double AppleBCMWLANCore::clearPmk(AppleBCMWLANCore *this)
{
  *(_DWORD *)(*((void *)this + 9) + 288) = 0;
  uint64_t v1 = (_OWORD *)*((void *)this + 9);
  double result = 0.0;
  *(_OWORD *)((char *)v1 + 223) = 0u;
  uint64_t v1 = (_OWORD *)((char *)v1 + 223);
  v1[2] = 0u;
  v1[3] = 0u;
  v1[1] = 0u;
  return result;
}

uint64_t AppleBCMWLANCore::setApStaSkywalkInterface(uint64_t result, unsigned int a2)
{
  *(void *)(*(void *)(result + 72) + 8 * a2 + 11208) = *(void *)(result + 72) + 11320;
  return result;
}

uint64_t AppleBCMWLANCore::setProxSkywalkInterface(uint64_t result, unsigned int a2)
{
  *(void *)(*(void *)(result + 72) + 8 * a2 + 11208) = *(void *)(result + 72) + 11312;
  return result;
}

uint64_t AppleBCMWLANCore::setNanMgtSkywalkInterface(uint64_t result, unsigned int a2)
{
  *(void *)(*(void *)(result + 72) + 8 * a2 + 11208) = *(void *)(result + 72) + 29800;
  return result;
}

uint64_t AppleBCMWLANCore::setNanDataSkywalkInterface(uint64_t result, unsigned int a2)
{
  *(void *)(*(void *)(result + 72) + 8 * a2 + 11208) = *(void *)(result + 72) + 29808;
  return result;
}

uint64_t AppleBCMWLANCore::checkForDigitalNapSupport(AppleBCMWLANCore *this)
{
  uint64_t v1 = *((void *)this + 9);
  if (*(unsigned char *)(v1 + 10381)) {
    return AppleBCMWLANConfigManager::isDigitalNapSupportedInDriver(*(AppleBCMWLANConfigManager **)(v1 + 5472));
  }
  else {
    return 0;
  }
}

uint64_t AppleBCMWLANCore::isControllerRegisteredAndPoweredOn(AppleBCMWLANCore *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 9) + 30920);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000;
  v3[2] = ___ZN16AppleBCMWLANCore34isControllerRegisteredAndPoweredOnEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_3143;
  v3[4] = this;
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v1 + 112))(v1, v3);
}

uint64_t ___ZN16AppleBCMWLANCore34isControllerRegisteredAndPoweredOnEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = (unsigned char *)(*(void *)(*(void *)(a1 + 32) + 72) + 29868);
  char v2 = *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 72) + 29869) ^ 1;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 72) + 29869)) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = 3758097112;
  }
  *uint64_t v1 = v2;
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::isControllerRegisteredAndPoweredOn(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::isControllerRegisteredAndPoweredOn((AppleBCMWLANCore *)((char *)this - 64));
}

BOOL AppleBCMWLANCore::isPowerChangeInProgress(AppleBCMWLANCore *this)
{
  return (*(_DWORD *)(*((void *)this + 9) + 10388) & 0x10001000) != 0;
}

BOOL AppleBCMWLANCore::isSendingFWCommandPermitted(AppleBCMWLANCore *this)
{
  return (*(_DWORD *)(*((void *)this + 9) + 10388) & 0x100000B0) == 0;
}

uint64_t AppleBCMWLANCore::isShutdownPending(AppleBCMWLANCore *this)
{
  return (*(unsigned __int8 *)(*((void *)this + 9) + 10389) >> 5) & 1;
}

uint64_t AppleBCMWLANCore::setTXQueueEnabled(uint64_t this, int a2)
{
  if (a2) {
    int v2 = 0x10000;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(*(void *)(this + 72) + 10388) = *(_DWORD *)(*(void *)(this + 72) + 10388) & 0xFFFEFFFF | v2;
  return this;
}

uint64_t AppleBCMWLANCore::isWatchdogFailed(AppleBCMWLANCore *this)
{
  return *(unsigned __int8 *)(*((void *)this + 9) + 10389) >> 7;
}

uint64_t AppleBCMWLANCore::setMinFreeCreditsToSpend(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 72) + 14100) = a2;
  return this;
}

uint64_t AppleBCMWLANCore::getMinFreeCreditsToSpend(AppleBCMWLANCore *this)
{
  return *(unsigned int *)(*((void *)this + 9) + 14100);
}

uint64_t AppleBCMWLANCore::wasDynSARInFailSafeMode(AppleBCMWLANCore *this)
{
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v3 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logInfo(v3, "[dk] %s@%d:DynSAR: wasDynSARInFailSafeMode, %d\n", "wasDynSARInFailSafeMode", 57646, 0);
    }
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::wasDynSARInFailSafeMode(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::wasDynSARInFailSafeMode((AppleBCMWLANCore *)((char *)this - 48));
}

uint64_t AppleBCMWLANCore::qosSetIOVar(AppleBCMWLANCore *this, const char *a2, __int16 a3, void *a4, unsigned int a5)
{
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 95) && *(unsigned char *)(*((void *)this + 9) + 29937))
  {
    uint64_t v10 = (_WORD *)IOMallocZeroData();
    if (v10)
    {
      unint64_t v11 = v10;
      _WORD *v10 = 1;
      v10[1] = a5;
      void v10[2] = a3;
      memcpy(v10 + 3, a4, a5);
      int v12 = *(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416);
      if ((_WORD)a5 == 0xFFFA) {
        int v13 = 0;
      }
      else {
        int v13 = v11;
      }
      *(void *)buf = v13;
      *(void *)long long v20 = (unsigned __int16)(a5 + 6);
      uint64_t v14 = AppleBCMWLANCommander::runIOVarSet(v12, (uint64_t)"qos_mgmt", (uint64_t)buf, 0, 0);
      if (v14)
      {
        if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
          || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
              (CCLogStream::shouldLogConsole() & 1) == 0))
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67110146;
            *(_DWORD *)&uint8_t buf[4] = 65;
            *(_WORD *)long long v20 = 2080;
            *(void *)&void v20[2] = "qosSetIOVar";
            __int16 v21 = 1024;
            int v22 = 58795;
            __int16 v23 = 2080;
            uint64_t v24 = a2;
            __int16 v25 = 1024;
            int v26 = v14;
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: WiFi-QoS: Failed to runIOVarSet(\"qos_mgmt\", %s) = 0x%x\n", buf, 0x28u);
          }
        }
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            long long v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v18, "[dk] %s@%d:WiFi-QoS: Failed to runIOVarSet(\"qos_mgmt\", %s) = 0x%x\n", "qosSetIOVar", 58795, a2, v14);
          }
        }
      }
      IOFreeData();
    }
    else
    {
      uint64_t v14 = 3758097085;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          long long v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v17, "[dk] %s@%d:Failed to allocate qos_iov_buf for %s\n", "qosSetIOVar", 58784, a2);
        }
      }
    }
  }
  else
  {
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
      || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
          (CCLogStream::shouldLogConsole() & 1) == 0))
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = 65;
        *(_WORD *)long long v20 = 2080;
        *(void *)&void v20[2] = "qosSetIOVar";
        __int16 v21 = 1024;
        int v22 = 58778;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: WiFi-QoS: QoS Management is disabled\n", buf, 0x18u);
      }
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v16, "[dk] %s@%d:WiFi-QoS: QoS Management is disabled\n", "qosSetIOVar", 58778);
      }
    }
    return 0;
  }
  return v14;
}

uint64_t AppleBCMWLANCore::checkForQoSMgmtSupport(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 95);
}

uint64_t AppleBCMWLANCore::enableQoSMgmtMSCS(AppleBCMWLANCore *this, int a2)
{
  __int16 v7 = a2;
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 95) && *(unsigned char *)(*((void *)this + 9) + 29937))
  {
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
      || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
          (CCLogStream::shouldLogConsole() & 1) == 0))
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109890;
        int v9 = 65;
        __int16 v10 = 2080;
        unint64_t v11 = "enableQoSMgmtMSCS";
        __int16 v12 = 1024;
        int v13 = 58817;
        __int16 v14 = 1024;
        int v15 = a2;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: WiFi-QoS: QoS Management enableFlags = %u\n", buf, 0x1Eu);
      }
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        size_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v6, "[dk] %s@%d:WiFi-QoS: QoS Management enableFlags = %u\n", "enableQoSMgmtMSCS", 58817, a2);
      }
    }
    return AppleBCMWLANCore::qosSetIOVar(this, "WL_QOS_CMD_ENABLE", 1, &v7, 2u);
  }
  else
  {
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
      || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
          (CCLogStream::shouldLogConsole() & 1) == 0))
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109634;
        int v9 = 65;
        __int16 v10 = 2080;
        unint64_t v11 = "enableQoSMgmtMSCS";
        __int16 v12 = 1024;
        int v13 = 58813;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: WiFi-QoS: QoS Management is disabled\n", buf, 0x18u);
      }
    }
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v5, "[dk] %s@%d:WiFi-QoS: QoS Management is disabled\n", "enableQoSMgmtMSCS", 58813);
        return 0;
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::confiQoSMgmtMSCS(AppleBCMWLANCore *this, int a2, int a3)
{
  int v13 = 0;
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 95) && *(unsigned char *)(*((void *)this + 9) + 29937))
  {
    uint64_t v9 = 0xEA6000100001;
    __int16 v10 = 2032;
    char v11 = 4;
    char v12 = a2;
    LOBYTE(v13) = a3;
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
      || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
          (CCLogStream::shouldLogConsole() & 1) == 0))
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67110146;
        int v15 = 65;
        __int16 v16 = 2080;
        long long v17 = "confiQoSMgmtMSCS";
        __int16 v18 = 1024;
        int v19 = 58847;
        __int16 v20 = 1024;
        int v21 = a3;
        __int16 v22 = 1024;
        int v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: WiFi-QoS: qosReqType=%d qosFCMask=0x%x\n", buf, 0x24u);
      }
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v8, "[dk] %s@%d:WiFi-QoS: qosReqType=%d qosFCMask=0x%x\n", "confiQoSMgmtMSCS", 58847, a3, a2);
      }
    }
    return AppleBCMWLANCore::qosSetIOVar(this, "WL_QOS_CMD_RAV_MSCS", 2, &v9, 0x10u);
  }
  else
  {
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
      || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
          (CCLogStream::shouldLogConsole() & 1) == 0))
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109634;
        int v15 = 65;
        __int16 v16 = 2080;
        long long v17 = "confiQoSMgmtMSCS";
        __int16 v18 = 1024;
        int v19 = 58834;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: WiFi-QoS: QoS Management is disabled\n", buf, 0x18u);
      }
    }
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        __int16 v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:WiFi-QoS: QoS Management is disabled\n", "confiQoSMgmtMSCS", 58834);
        return 0;
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::initQoSMgmtMSCS(AppleBCMWLANCore *this)
{
  uint64_t result = AppleBCMWLANCore::featureFlagIsBitSet(this, 95);
  if (result)
  {
    if (*(unsigned char *)(*((void *)this + 9) + 29937))
    {
      int v7 = -1431655766;
      if (IOParseBootArgNumber("wlan.qos.enableFlags", &v7, 4))
      {
        int v3 = (unsigned __int16)v7;
        if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
          || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
              (CCLogStream::shouldLogConsole() & 1) == 0))
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109890;
            int v9 = 65;
            __int16 v10 = 2080;
            char v11 = "initQoSMgmtMSCS";
            __int16 v12 = 1024;
            int v13 = 58874;
            __int16 v14 = 1024;
            int v15 = v3;
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: WiFi-QoS: boot-arg wlan.qos.enableFlags=%d\n", buf, 0x1Eu);
          }
        }
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v4, "[dk] %s@%d:WiFi-QoS: boot-arg wlan.qos.enableFlags=%d\n", "initQoSMgmtMSCS", 58874, v3);
          }
        }
      }
      else
      {
        int v3 = 1;
      }
      AppleBCMWLANCore::enableQoSMgmtMSCS(this, v3);
      if (IOParseBootArgNumber("wlan.qos.FCMask", &v7, 4))
      {
        int v5 = v7;
        if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
          || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
              (CCLogStream::shouldLogConsole() & 1) == 0))
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109890;
            int v9 = 65;
            __int16 v10 = 2080;
            char v11 = "initQoSMgmtMSCS";
            __int16 v12 = 1024;
            int v13 = 58881;
            __int16 v14 = 1024;
            int v15 = v5;
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: WiFi-QoS: boot-arg wlan.qos.FCMask=0x%x\n", buf, 0x1Eu);
          }
        }
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            size_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v6, "[dk] %s@%d:WiFi-QoS: boot-arg wlan.qos.FCMask=0x%x\n", "initQoSMgmtMSCS", 58881, v5);
          }
        }
      }
      else
      {
        int v5 = 95;
      }
      *(unsigned char *)(*((void *)this + 9) + 29940) = v5;
      uint64_t result = IO80211BssManager::isAssociated(*(IO80211BssManager **)(*((void *)this + 9) + 5440));
      if ((result & 1) == 0) {
        uint64_t result = AppleBCMWLANCore::confiQoSMgmtMSCS(this, v5, 0);
      }
    }
    else
    {
      uint64_t result = AppleBCMWLANCore::enableQoSMgmtMSCS(this, 0);
    }
    *(unsigned char *)(*((void *)this + 9) + 29938) = 0;
  }
  return result;
}

uint64_t AppleBCMWLANCore::sendQoSMgmtMSCSReq(AppleBCMWLANCore *this, int a2)
{
  uint64_t v4 = *((void *)this + 9);
  int v5 = *(unsigned __int8 *)(v4 + 29940);
  uint64_t CurrentBSS = AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(v4 + 5440));
  if (AppleBCMWLANCore::featureFlagIsBitSet(this, 95) && *(unsigned char *)(*((void *)this + 9) + 29937))
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)CurrentBSS + 672))(CurrentBSS))
    {
      if (a2 && *(unsigned char *)(*((void *)this + 9) + 29938))
      {
        if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
          || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
              (CCLogStream::shouldLogConsole() & 1) == 0))
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109634;
            int v13 = 65;
            __int16 v14 = 2080;
            int v15 = "sendQoSMgmtMSCSReq";
            __int16 v16 = 1024;
            int v17 = 58912;
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: WiFi-QoS: QoS MSCS is already active\n", buf, 0x18u);
          }
        }
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            int v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v7, "[dk] %s@%d:WiFi-QoS: QoS MSCS is already active\n");
          }
        }
      }
      else if (a2 || *(unsigned char *)(*((void *)this + 9) + 29938))
      {
        AppleBCMWLANCore::confiQoSMgmtMSCS(this, v5, a2 == 0);
      }
      else
      {
        if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
          || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
              (CCLogStream::shouldLogConsole() & 1) == 0))
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109634;
            int v13 = 65;
            __int16 v14 = 2080;
            int v15 = "sendQoSMgmtMSCSReq";
            __int16 v16 = 1024;
            int v17 = 58916;
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: WiFi-QoS: QoS MSCS is already terminated\n", buf, 0x18u);
          }
        }
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            __int16 v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v10, "[dk] %s@%d:WiFi-QoS: QoS MSCS is already terminated\n");
          }
        }
      }
    }
    else
    {
      if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
        || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
            (CCLogStream::shouldLogConsole() & 1) == 0))
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109634;
          int v13 = 65;
          __int16 v14 = 2080;
          int v15 = "sendQoSMgmtMSCSReq";
          __int16 v16 = 1024;
          int v17 = 58907;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: WiFi-QoS: AP does not support QoS MSCS\n", buf, 0x18u);
        }
      }
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          int v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v9, "[dk] %s@%d:WiFi-QoS: AP does not support QoS MSCS\n");
        }
      }
    }
  }
  else
  {
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
      || ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
          (CCLogStream::shouldLogConsole() & 1) == 0))
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109634;
        int v13 = 65;
        __int16 v14 = 2080;
        int v15 = "sendQoSMgmtMSCSReq";
        __int16 v16 = 1024;
        int v17 = 58902;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: WiFi-QoS: QoS Management is disabled\n", buf, 0x18u);
      }
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        char v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v11, "[dk] %s@%d:WiFi-QoS: QoS Management is disabled\n");
      }
    }
  }
  return 0;
}

uint64_t AppleBCMWLANCore::setREALTIME_QOS_MSCS(AppleBCMWLANCore *a1, uint64_t a2)
{
  uint64_t CurrentBSS = AppleBCMWLANBssManager::getCurrentBSS(*(AppleBCMWLANBssManager **)(*((void *)a1 + 9) + 5440));
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 95) && *(unsigned char *)(*((void *)a1 + 9) + 29937))
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)CurrentBSS + 672))(CurrentBSS))
    {
      if (a2)
      {
        int v5 = *(_DWORD *)(a2 + 4);
        *(unsigned char *)(*((void *)a1 + 9) + 29939) = v5 != 0;
        AppleBCMWLANCore::sendQoSMgmtMSCSReq(a1, v5);
        return 0;
      }
      return 22;
    }
    else
    {
      if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)
        || ((*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1),
            (CCLogStream::shouldLogConsole() & 1) == 0))
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109634;
          int v10 = 65;
          __int16 v11 = 2080;
          __int16 v12 = "setREALTIME_QOS_MSCS";
          __int16 v13 = 1024;
          int v14 = 58939;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: WiFi-QoS: AP does not support QoS MSCS\n", buf, 0x18u);
        }
      }
      uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (result)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          int v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logAlert(v7, "[dk] %s@%d:WiFi-QoS: AP does not support QoS MSCS\n");
          return 0;
        }
      }
    }
  }
  else
  {
    if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1)
      || ((*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1),
          (CCLogStream::shouldLogConsole() & 1) == 0))
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109634;
        int v10 = 65;
        __int16 v11 = 2080;
        __int16 v12 = "setREALTIME_QOS_MSCS";
        __int16 v13 = 1024;
        int v14 = 58934;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "%c [dk] %s@%d: WiFi-QoS: QoS Management is disabled\n", buf, 0x18u);
      }
    }
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v8, "[dk] %s@%d:WiFi-QoS: QoS Management is disabled\n");
        return 0;
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setREALTIME_QOS_MSCS(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANCore::setREALTIME_QOS_MSCS((AppleBCMWLANCore *)(a1 - 64), a2);
}

uint64_t AppleBCMWLANCore::getQoSRealTimeAppActiveStatus(AppleBCMWLANCore *this)
{
  return *(unsigned __int8 *)(*((void *)this + 9) + 29939);
}

uint64_t AppleBCMWLANCore::getQoSMSCSFeatureFlag(AppleBCMWLANCore *this)
{
  return *(unsigned __int8 *)(*((void *)this + 9) + 29937);
}

uint64_t AppleBCMWLANCore::collectRealTimeAppCongestionState(AppleBCMWLANCore *this)
{
  if (*(unsigned char *)(*((void *)this + 9) + 29948))
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v4 = 35200;
    uint64_t v5 = 5;
    do
    {
      uint64_t v6 = *(void *)(*((void *)this + 9) + v4 - 40);
      BOOL v7 = __CFADD__(v3, v6);
      v3 += v6;
      if (v7)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            int v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logInfo(v9, "[dk] %s@%d:Trigger check overflows on RT packet count\n", "collectRealTimeAppCongestionState", 58974);
          }
        }
      }
      uint64_t v8 = *(void *)(*((void *)this + 9) + v4);
      BOOL v7 = __CFADD__(v2, v8);
      v2 += v8;
      if (v7)
      {
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            int v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logInfo(v10, "[dk] %s@%d:Trigger check overflows on NRT packet count\n", "collectRealTimeAppCongestionState", 58979);
          }
        }
      }
      v4 += 8;
      --v5;
    }
    while (v5);
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        __int16 v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (*(unsigned char *)(*((void *)this + 9) + 35146)) {
          __int16 v13 = "Congested";
        }
        else {
          __int16 v13 = "Not Congested";
        }
        CCLogStream::logInfo(v12, "[dk] %s@%d:[Traffic Engineering]: Real Time Application is %s\n", "collectRealTimeAppCongestionState", 58983, v13);
      }
    }
    return *(unsigned char *)(*((void *)this + 9) + 35146) != 0;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (result)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logInfo(v14, "[dk] %s@%d:Traffic Monitoring not supported \n", "collectRealTimeAppCongestionState", 58965);
        return 0;
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::trafficMonitorCallback(const OSMetaClassBase *this, OSObject *a2, void *a3, unsigned int a4, unsigned int a5)
{
  int v7 = (int)a3;
  uint64_t result = (uint64_t)OSMetaClassBase::safeMetaCast(this, (const OSMetaClass *)gAppleBCMWLANCoreMetaClass);
  if (!result) {
    return result;
  }
  int v9 = (IO80211Controller *)result;
  __int16 v29 = -21846;
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  if ((*(uint64_t (**)(IO80211Controller *))(*(void *)v9 + 1848))(v9))
  {
    (*(void (**)(IO80211Controller *))(*(void *)v9 + 1848))(v9);
    if (CCLogStream::shouldLog())
    {
      int v23 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v9 + 1848))(v9);
      CCLogStream::logAlert(v23, "[dk] %s@%d:Now:%llu elapsedMS:%u rtPacketCount:%u bgPacketCount:%u\n", "trafficMonitorCallback", 58997, 0, v7, a4, a5);
    }
  }
  int v10 = (void *)(*((void *)v9 + 9) + 35136);
  if (*(_DWORD *)(*((void *)v9 + 9) + 35148) >= a4)
  {
    LOBYTE(v29) = 0;
    goto LABEL_10;
  }
  uint64_t v30 = 0;
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  int v10 = (void *)(*((void *)v9 + 9) + 35136);
  if (!*v10)
  {
    void *v10 = 0;
    goto LABEL_12;
  }
  if (-*v10 >= 0x13uLL)
  {
    LOBYTE(v29) = 1;
LABEL_10:
    void *v10 = 0;
  }
LABEL_12:
  uint64_t v11 = *((void *)v9 + 9);
  int v12 = *(_DWORD *)(v11 + 35152) < a5;
  HIBYTE(v29) = *(_DWORD *)(v11 + 35152) < a5;
  if (v29 != *(unsigned __int8 *)(v11 + 35144) || *(unsigned __int8 *)(v11 + 35145) != v12)
  {
    AppleBCMWLANCore::handleAppTrafficIndication(v9, &v29);
    uint64_t v11 = *((void *)v9 + 9);
  }
  unsigned int v13 = *(unsigned __int8 *)(v11 + 35240) % 5u;
  if (*(unsigned char *)(v11 + 35240)) {
    BOOL v14 = v13 == 0;
  }
  else {
    BOOL v14 = 0;
  }
  if (!v14)
  {
    *(void *)(v11 + 8 * v13 + 35160) = a4;
    *(void *)(*((void *)v9 + 9) + 8 * (*(unsigned char *)(*((void *)v9 + 9) + 35240) % 5u) + 35200) = a5;
    uint64_t v15 = *((void *)v9 + 9);
    __int16 v16 = (*(unsigned char *)(v15 + 35240))++ + 1;
    if ((v16 & 0x100) != 0) {
      *(unsigned char *)(*((void *)v9 + 9) + 35240) = 0;
    }
    uint64_t result = AppleBCMWLANCore::collectRealTimeAppCongestionState(v9);
    if ((result & 1) == 0)
    {
      uint64_t result = *(void *)(*((void *)v9 + 9) + 11304);
      if (result)
      {
        uint64_t result = IO80211InfraInterface::getWMMBWReset((IO80211InfraInterface *)result);
        if (result)
        {
          IO80211InfraInterface::setWMMBWReset(*(IO80211InfraInterface **)(*((void *)v9 + 9) + 11304), 0);
          uint64_t result = (*(uint64_t (**)(IO80211Controller *))(*(void *)v9 + 1848))(v9);
          if (result)
          {
            (*(void (**)(IO80211Controller *))(*(void *)v9 + 1848))(v9);
            uint64_t result = CCLogStream::shouldLog();
            if (result)
            {
              uint64_t v28 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v9 + 1848))(v9);
              uint64_t result = CCLogStream::logAlert(v28, "[dk] %s@%d:Provider for Skywalk interface set WMMBWReset false for dqeue mechanism", "trafficMonitorCallback", 59093);
            }
          }
        }
      }
      *(unsigned char *)(*((void *)v9 + 9) + 35241) = 0;
    }
    return result;
  }
  int v17 = AppleBCMWLANCore::collectRealTimeAppCongestionState(v9);
  uint64_t v18 = *((void *)v9 + 9);
  if (v17)
  {
    if (!*(unsigned char *)(v18 + 35241)
      || (IO80211InfraInterface::getWMMBWReset(*(IO80211InfraInterface **)(v18 + 11304)) & 1) == 0)
    {
      if ((*(uint64_t (**)(IO80211Controller *))(*(void *)v9 + 1848))(v9))
      {
        (*(void (**)(IO80211Controller *))(*(void *)v9 + 1848))(v9);
        if (CCLogStream::shouldLog())
        {
          int v26 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v9 + 1848))(v9);
          CCLogStream::logAlert(v26, "[dk] %s@%d:Enabling trigger for dqeue mechanism for @ now:%llu elapsedMS:%u for tid %d tid %d\n", "trafficMonitorCallback", 59034, 0, v7, 1, 2);
        }
      }
      int v19 = *(IO80211InfraInterface **)(*((void *)v9 + 9) + 11304);
      if (v19)
      {
        char v20 = 1;
        IO80211InfraInterface::setWMMBWReset(v19, 1);
        if ((*(uint64_t (**)(IO80211Controller *))(*(void *)v9 + 1848))(v9))
        {
          (*(void (**)(IO80211Controller *))(*(void *)v9 + 1848))(v9);
          if (CCLogStream::shouldLog())
          {
            int v21 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v9 + 1848))(v9);
            CCLogStream::logAlert(v21, "[dk] %s@%d:Provider for Skywalk interface set WMMBWReset true for dqeue mechanism", "trafficMonitorCallback", 59040);
          }
        }
      }
      else
      {
        char v20 = 1;
      }
LABEL_49:
      *(unsigned char *)(*((void *)v9 + 9) + 35241) = v20;
    }
  }
  else if (*(unsigned char *)(v18 + 35241) {
         || IO80211InfraInterface::getWMMBWReset(*(IO80211InfraInterface **)(v18 + 11304)))
  }
  {
    if ((*(uint64_t (**)(IO80211Controller *))(*(void *)v9 + 1848))(v9))
    {
      (*(void (**)(IO80211Controller *))(*(void *)v9 + 1848))(v9);
      if (CCLogStream::shouldLog())
      {
        __int16 v25 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v9 + 1848))(v9);
        CCLogStream::logAlert(v25, "[dk] %s@%d:Disabling trigger for dqeue mechanism for @ now:%llu elapsedMS:%u for tid %d tid %d\n", "trafficMonitorCallback", 59058, 0, v7, 1, 2);
      }
    }
    __int16 v22 = *(IO80211InfraInterface **)(*((void *)v9 + 9) + 11304);
    if (v22)
    {
      IO80211InfraInterface::setWMMBWReset(v22, 0);
      if ((*(uint64_t (**)(IO80211Controller *))(*(void *)v9 + 1848))(v9))
      {
        (*(void (**)(IO80211Controller *))(*(void *)v9 + 1848))(v9);
        if (CCLogStream::shouldLog())
        {
          __int16 v27 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v9 + 1848))(v9);
          CCLogStream::logAlert(v27, "[dk] %s@%d:Provider for Skywalk interface set WMMBWReset false for dqeue mechanism", "trafficMonitorCallback", 59064);
        }
      }
    }
    char v20 = 0;
    goto LABEL_49;
  }
  *(void *)(*((void *)v9 + 9)
            + 8
            * (unsigned __int16)(*(unsigned __int8 *)(*((void *)v9 + 9) + 35240)
                               + 1
                               - 5
                               * ((13108 * (*(unsigned __int8 *)(*((void *)v9 + 9) + 35240) + 1)) >> 16))
            + 35160) = a4;
  *(void *)(*((void *)v9 + 9)
            + 8
            * (unsigned __int16)(*(unsigned __int8 *)(*((void *)v9 + 9) + 35240)
                               + 1
                               - 5
                               * ((13108 * (*(unsigned __int8 *)(*((void *)v9 + 9) + 35240) + 1)) >> 16))
            + 35200) = a5;
  uint64_t result = (*(uint64_t (**)(IO80211Controller *))(*(void *)v9 + 1848))(v9);
  if (result)
  {
    (*(void (**)(IO80211Controller *))(*(void *)v9 + 1848))(v9);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v24 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v9 + 1848))(v9);
      return CCLogStream::logAlert(v24, "[dk] %s@%d:Collecting sample modulo size now:%llu elapsedMS:%u @ window %d\n", "trafficMonitorCallback", 59079, 0, v7, *(unsigned __int8 *)(*((void *)v9 + 9) + 35240));
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::handleAppTrafficIndication(IO80211Controller *a1, unsigned char *a2)
{
  if (*a2)
  {
    if (a2[1])
    {
      if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logInfo(v4, "[dk] %s@%d:[TrafficEngineering]:RealTime/Non-Real Time Application are running, Inform TrafficEng Module\n");
        }
      }
    }
    else
    {
      int v8 = *(unsigned __int8 *)(*((void *)a1 + 9) + 35145);
      uint64_t v9 = (*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      if (v8)
      {
        if (v9)
        {
          (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            int v10 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
            CCLogStream::logInfo(v10, "[dk] %s@%d:[TrafficEngineering]:Non Real Time Application Exited, Real Time application Running\n");
          }
        }
      }
      else if (v9)
      {
        (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          BOOL v14 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logInfo(v14, "[dk] %s@%d:[TrafficEngineering]:Real Time Application launched, Inform TrafficEng Module\n");
        }
      }
    }
  }
  else if (a2[1])
  {
    int v5 = *(unsigned __int8 *)(*((void *)a1 + 9) + 35145);
    uint64_t v6 = (*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
    if (v5)
    {
      if (v6)
      {
        (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          int v7 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logInfo(v7, "[dk] %s@%d:[TrafficEngineering]:Real Time Application Exited, Non Real Time application Running\n");
        }
      }
    }
    else if (v6)
    {
      (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        int v12 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logInfo(v12, "[dk] %s@%d:[TrafficEngineering]:Non-Real Time Application launched, Inform TrafficEng Module\n");
      }
    }
  }
  else if ((*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1))
  {
    (*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      CCLogStream::logInfo(v11, "[dk] %s@%d:[TrafficEngineering]:No application is using significant bandwidth, Inform TrafficEng Module\n");
    }
  }
  uint64_t result = IO80211Controller::postMessage(a1, *(IO80211SkywalkInterface **)(*((void *)a1 + 9) + 11304), 0xBDu, a2, 2uLL, 1);
  *(unsigned char *)(*((void *)a1 + 9) + 35144) = *a2;
  *(unsigned char *)(*((void *)a1 + 9) + 35145) = a2[1];
  return result;
}

uint64_t AppleBCMWLANCore::getPrimaryInterface(AppleBCMWLANCore *this)
{
  return *(void *)(*((void *)this + 9) + 11304);
}

void *AppleBCMWLANCore::changeAggregationPerEDCATID(void *this, unsigned int a2, int a3)
{
  if (a2 <= 7)
  {
    int v5 = this;
    v18[0] = a2;
    v18[1] = a3;
    uint64_t v6 = *(AppleBCMWLANCommander **)(this[9] + 5416);
    __int16 v16 = v18;
    uint64_t v17 = 2;
    int v7 = AppleBCMWLANCommander::runIOVarSet(v6, (uint64_t)"ampdu_tid", (uint64_t)&v16, 0, 0);
    this = (void *)(*(uint64_t (**)(void *))(*v5 + 1848))(v5);
    if (v7)
    {
      if (this)
      {
        (*(void (**)(void *))(*v5 + 1848))(v5);
        this = (void *)CCLogStream::shouldLog();
        if (this)
        {
          int v8 = (CCLogStream *)(*(uint64_t (**)(void *))(*v5 + 1848))(v5);
          return (void *)CCLogStream::logAlert(v8, "[dk] %s@%d: Error: cannot set Block Ack Policy on TID %d", "changeAggregationPerEDCATID", 59171, v18[0]);
        }
      }
    }
    else
    {
      if (this)
      {
        (*(void (**)(void *))(*v5 + 1848))(v5);
        if (CCLogStream::shouldLog())
        {
          uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(void *))(*v5 + 1848))(v5);
          int v12 = "disabled";
          if (a3) {
            int v12 = "enabled";
          }
          CCLogStream::logInfo(v11, "[dk] %s@%d:Block ACK %s for TID %d", "changeAggregationPerEDCATID", 59175, v12, a2);
        }
      }
      uint64_t v19 = 0;
      BYTE6(v19) = a2;
      HIBYTE(v19) = a3 ^ 1;
      this = (void *)IO80211BssManager::getCurrentBSSID(*(IO80211BssManager **)(v5[9] + 5440), (ether_addr *)&v19);
      if (this)
      {
        uint64_t v9 = *(AppleBCMWLANCommander **)(v5[9] + 5416);
        if (a3) {
          int v10 = "ampdu_send_addba";
        }
        else {
          int v10 = "ampdu_send_delba";
        }
        __int16 v16 = v18;
        uint64_t v17 = 8;
        if (AppleBCMWLANCommander::runIOVarSet(v9, (uint64_t)v10, (uint64_t)&v16, 0, 0))
        {
          if ((*(uint64_t (**)(void *))(*v5 + 1848))(v5))
          {
            (*(void (**)(void *))(*v5 + 1848))(v5);
            if (CCLogStream::shouldLog())
            {
              BOOL v14 = (CCLogStream *)(*(uint64_t (**)(void *))(*v5 + 1848))(v5);
              uint64_t v15 = "deletion";
              if (a3) {
                uint64_t v15 = "establishment";
              }
              CCLogStream::logAlert(v14, "[dk] %s@%d: Error: BA session %s failed for TID %d", "changeAggregationPerEDCATID", 59189, v15, BYTE6(v19));
            }
          }
        }
        this = (void *)(*(uint64_t (**)(void *))(*v5 + 1848))(v5);
        if (this)
        {
          (*(void (**)(void *))(*v5 + 1848))(v5);
          this = (void *)CCLogStream::shouldLog();
          if (this)
          {
            unsigned int v13 = (CCLogStream *)(*(uint64_t (**)(void *))(*v5 + 1848))(v5);
            return (void *)CCLogStream::logInfo(v13, "[dk] %s@%d:INFO: BA session change executed successfully", "changeAggregationPerEDCATID", 59192);
          }
        }
      }
    }
  }
  return this;
}

void *non-virtual thunk to'AppleBCMWLANCore::changeAggregationPerEDCATID(AppleBCMWLANCore *this, unsigned int a2, int a3)
{
  return AppleBCMWLANCore::changeAggregationPerEDCATID((void *)this - 8, a2, a3);
}

uint64_t AppleBCMWLANCore::getBcnLossCCState(AppleBCMWLANCore *this)
{
  return *(unsigned __int8 *)(*((void *)this + 9) + 18025);
}

uint64_t AppleBCMWLANCore::dbgConfigureBcnlossCoreCapture(AppleBCMWLANCore *this, unsigned int a2)
{
  uint64_t v4 = (unsigned char *)(*((void *)this + 9) + 18025);
  if (a2)
  {
    *uint64_t v4 = 1;
    *(void *)(*((void *)this + 9) + 18008) = a2;
  }
  else
  {
    *uint64_t v4 = 0;
  }
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      return CCLogStream::logInfo(v6, "[dk] %s@%d:Beacon loss CC will trigger after %d link downs due to beacon loss \n", "dbgConfigureBcnlossCoreCapture", 59211, a2);
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::init(AppleBCMWLANCore *this)
{
  uint64_t result = IO80211Controller::init(this);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *, void))(*(void *)this + 56))(this, 0);
    if (result)
    {
      if (*((void *)this + 9))
      {
        io80211_os_log();
        mach_continuous_time();
        absolutetime_to_nanoseconds();
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::init(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::init((AppleBCMWLANCore *)((char *)this - 24));
}

uint64_t AppleBCMWLANCore::Start_Impl(AppleBCMWLANCore *this, IOService *a2)
{
  setPropertyHelper((IOService *)this, "DriverKitDriver", kOSBooleanTrue);
  OSStringPtr v4 = OSString::withCString("iOS");
  setPropertyHelper((IOService *)this, "DriverKitDriverPlatformType", v4);
  if (v4) {
    ((void (*)(OSStringPtr))v4->release)(v4);
  }
  *(void *)(*((void *)this + 9) + 5400) = OSMetaClassBase::safeMetaCast(a2, (const OSMetaClass *)gAppleBCMWLANBusInterfaceMetaClass);
  uint64_t v47 = *(void *)(*((void *)this + 9) + 5400);
  io80211_os_log();
  uint64_t v5 = *(void *)(*((void *)this + 9) + 5400);
  if (!v5)
  {
    io80211_os_log();
    uint64_t v8 = 3758097090;
LABEL_78:
    io80211_os_log();
    return v8;
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(*((void *)this + 9) + 5400)
                                                                             + 48)
                                                                 + 200))(*(void *)(*((void *)this + 9) + 5400) + 48, v6, v7))
  {
    IOLog("AppleBCMWLANCore instantiated before Bus powered on, deferring\n", this, a2, v47);
    return 3758097112;
  }
  getClassNameHelper(a2);
  io80211_os_log();
  AppleBCMWLANBusInterface::sendBootCheckPointToCoreAnalytics(*(AppleBCMWLANBusInterface **)(*((void *)this + 9) + 5400), 0, 4u, *(void *)(*((void *)this + 9) + 35760));
  AppleBCMWLANBusInterface::sendBootCheckPointToCoreAnalytics(*(AppleBCMWLANBusInterface **)(*((void *)this + 9) + 5400), 0, 5u);
  *(void *)(*((void *)this + 9) + 14160) = AppleBCMWLANBusInterface::getLogger(*(AppleBCMWLANBusInterface **)(*((void *)this + 9) + 5400));
  uint64_t v9 = *(void *)(*((void *)this + 9) + 14160);
  if (!v9)
  {
    uint64_t v8 = 3758097084;
    io80211_os_log();
    goto LABEL_78;
  }
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  uint64_t v8 = IOService::Start((IOService *)this, a2, (OSDispatchMethod)&IO80211Controller::_Dispatch);
  uint64_t v10 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (v8)
  {
    if (v10)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v32 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v32, "[dk] %s@%d:core driverkit framework start fail 0x%x\n");
      }
    }
    goto LABEL_78;
  }
  if (v10)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      long long v37 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v37, "[dk] %s@%d:Start done", "Start_Impl", 59383);
    }
  }
  uint64_t v8 = IOService::Create((IOService *)this, (IOService *)this, "ReporterProxy", (IOService **)(*((void *)this + 9) + 14216), 0);
  uint64_t v11 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (v8)
  {
    if (v11)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unsigned __int8 v45 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v45, "[dk] %s@%d:Failed to create ReporterProxy 0x%x\n");
      }
    }
    goto LABEL_78;
  }
  if (v11)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      long long v38 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v38, "[dk] %s@%d:ReporterProxy Create Successful\n", "Start_Impl", 59388);
    }
  }
  char v12 = (*(uint64_t (**)(AppleBCMWLANCore *, void))(*(void *)this + 64))(this, *(void *)(*((void *)this + 9) + 5400));
  unsigned int v13 = (unsigned char *)(*((void *)this + 9) + 18271);
  int v14 = *v13;
  if (*v13)
  {
    int v15 = *(_DWORD *)(*((void *)this + 9) + 18272);
    int v16 = *(_DWORD *)(*((void *)this + 9) + 18276);
  }
  else
  {
    int v16 = 0;
    int v15 = 0xFFFF;
  }
  uint64_t v17 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if ((v12 & 1) == 0)
  {
    uint64_t v8 = 3758097084;
    if (v17)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v33 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v33, "[dk] %s@%d:wlan core start failed, reason[%u] line[%u], init failed[%u]\n");
      }
    }
    goto LABEL_78;
  }
  if (v17)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      unint64_t v39 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v39, "[dk] %s@%d:Started provider[%p]\n", "Start_Impl", 59394, a2);
    }
  }
  uint64_t v18 = (IODispatchQueue *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 30920) + 168))(*(void *)(*((void *)this + 9) + 30920));
  if (!v18)
  {
    uint64_t v8 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v34 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v34, "[dk] %s@%d:invalid dispatch queue\n");
      }
    }
    goto LABEL_78;
  }
  uint64_t v19 = (OSArray *)v18;
  uint64_t v20 = OSObject::SetDispatchQueue((OSObject *)this, "WLANMainDispatchQueue", v18, 0);
  if (v20)
  {
    uint64_t v8 = v20;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v35 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v35, "[dk] %s@%d:Failed to setup the Deispatch Queue 0x%x\n");
      }
    }
    goto LABEL_78;
  }
  uint64_t v8 = IOService::CopySystemStateNotificationService((IOService *)this, (IOService **)(*((void *)this + 9) + 35392), 0);
  uint64_t v21 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (v8)
  {
    if (v21)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        long long v36 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v36, "[dk] %s@%d:Failed to create System State Notification Service 0x%x");
      }
    }
    goto LABEL_78;
  }
  if (v21)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      long long v40 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v40, "[dk] %s@%d:Successfully created System State Notification Service\n", "Start_Impl", 59404);
    }
  }
  if (*(void *)(*((void *)this + 9) + 29784))
  {
    __int16 v22 = OSArray::withCapacity(4u);
    OSStringPtr v23 = OSString::withCString("kAudioMessage_MicState");
    OSStringPtr v24 = OSString::withCString("kAudioMessage_ReceiverState");
    OSArray::setObject(v22, v23);
    OSArray::setObject(v22, v24);
    uint64_t v8 = IOServiceStateNotificationDispatchSource::Create(*(IOServiceStateNotificationDispatchSource **)(*((void *)this + 9) + 35392), (IOService *)v22, v19, (IODispatchQueue *)(*((void *)this + 9) + 35400), v25);
    if (v22) {
      ((void (*)(OSArray *))v22->release)(v22);
    }
    if (v23) {
      ((void (*)(OSStringPtr))v23->release)(v23);
    }
    if (v24) {
      ((void (*)(OSStringPtr))v24->release)(v24);
    }
    if (v8)
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unint64_t v41 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v41, "[dk] %s@%d:Failed to create System State Notification 0x%x");
        }
      }
      goto LABEL_78;
    }
    uint64_t ActionSystemStateNotificationReady = AppleBCMWLANCore::CreateActionSystemStateNotificationReady((OSObject *)this, 0, (OSAction **)(*((void *)this + 9) + 35408));
    if (ActionSystemStateNotificationReady)
    {
      uint64_t v8 = ActionSystemStateNotificationReady;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unsigned __int8 v46 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v46, "[dk] %s@%d:Failed to create System State Notification Action 0x%x");
        }
      }
      goto LABEL_78;
    }
    uint64_t v27 = IOServiceStateNotificationDispatchSource::SetHandler(*(IOServiceStateNotificationDispatchSource **)(*((void *)this + 9) + 35400), *(OSAction **)(*((void *)this + 9) + 35408), 0);
    if (v27)
    {
      uint64_t v8 = v27;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          __int16 v29 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v29, "[dk] %s@%d:Failed to Set System State Notification Action 0x%x");
        }
      }
      goto LABEL_78;
    }
  }
  else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v44 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v44, "[dk] %s@%d:Skipping setting up listeners for Audio Notifications! No Audio Protector created\n", "Start_Impl", 59434);
    }
  }
  uint64_t v30 = *(void *)(*((void *)this + 9) + 5400);
  v48[0] = _NSConcreteStackBlock;
  v48[1] = 0x40000000;
  v48[2] = ___ZN16AppleBCMWLANCore10Start_ImplEP9IOService_block_invoke;
  v48[3] = &__block_descriptor_tmp_3228;
  v48[4] = this;
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v30 + 824))(v30, v48, v28);
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      unint64_t v42 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v42, "[dk] %s@%d:wlan core start done 0x%x\n", "Start_Impl", 59446, 0);
    }
  }
  *(unsigned char *)(*((void *)this + 9) + 18269) = 0;
  _DebugStateSaveObject(this);
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      long long v43 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v43, "[dk] %s@%d:done: succcess: ret[0x%08x], this[%p] provider[%p], fProvider[%p], reason[%u] line[%u], init failed[%u]\n", "Start_Impl", 59452, 0, this, a2, *(const void **)(*((void *)this + 9) + 5400), v15, v16, v14);
    }
  }
  return 0;
}

uint64_t ___ZN16AppleBCMWLANCore10Start_ImplEP9IOService_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if ((*(unsigned char *)(v1[9] + 10388) & 0x40) != 0)
  {
    if ((*(uint64_t (**)(void))(*v1 + 1848))(*(void *)(a1 + 32)))
    {
      (*(void (**)(void *))(*v1 + 1848))(v1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v3 = (CCLogStream *)(*(uint64_t (**)(void *))(*v1 + 1848))(v1);
        CCLogStream::logAlert(v3, "[dk] %s@%d:Firmware not initialized\n", "Start_Impl_block_invoke", 59441);
      }
    }
  }
  else
  {
    AppleBCMWLANCore::HandleShutdownGated(*(IOService **)(a1 + 32));
  }
  return 0;
}

OSDictionary *AppleBCMWLANCore::SystemStateNotificationReady_Impl(AppleBCMWLANCore *this, OSAction *a2)
{
  uint64_t v3 = OSString::withCString("kAudioMessage_MicState");
  OSStringPtr v4 = OSString::withCString("kAudioMessage_ReceiverState");
  int v14 = (OSDictionary *)0xAAAAAAAAAAAAAAAALL;
  IOServiceStateNotificationDispatchSource::StateNotificationBegin(*(IOServiceStateNotificationDispatchSource **)(*((void *)this + 9) + 35400), 0);
  if (!IOService::StateNotificationItemCopy(*(IOService **)(*((void *)this + 9) + 35392), v3, &v14, 0))
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        char v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logCrit(v12, "[dk] %s@%d:Successfully received Mic State notification\n", "SystemStateNotificationReady_Impl", 59509);
      }
    }
    uint64_t v5 = *(AppleBCMWLANAudioProtector **)(*((void *)this + 9) + 29784);
    Object = OSDictionary::getObject(v14, "kAudioMessage_MicOn");
    BOOL v7 = OSMetaClassBase::safeMetaCast(Object, gOSBooleanMetaClass) == kOSBooleanTrue;
    AppleBCMWLANAudioProtector::setLDOOnRequest(v5, v7);
    if (v14)
    {
      ((void (*)(OSDictionary *))v14->release)(v14);
      int v14 = 0;
    }
  }
  uint64_t result = (OSDictionary *)IOService::StateNotificationItemCopy(*(IOService **)(*((void *)this + 9) + 35392), v4, &v14, 0);
  if (!result)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logCrit(v13, "[dk] %s@%d:Successfully received Receiver State notification\n", "SystemStateNotificationReady_Impl", 59517);
      }
    }
    uint64_t v9 = *(AppleBCMWLANAudioProtector **)(*((void *)this + 9) + 29784);
    uint64_t v10 = OSDictionary::getObject(v14, "kAudioMessage_ReceiverOn");
    BOOL v11 = OSMetaClassBase::safeMetaCast(v10, gOSBooleanMetaClass) == kOSBooleanTrue;
    AppleBCMWLANAudioProtector::setLDOOnRequest(v9, v11);
    uint64_t result = v14;
    if (v14)
    {
      uint64_t result = (OSDictionary *)((uint64_t (*)(OSDictionary *))v14->release)(v14);
      int v14 = 0;
    }
  }
  if (v3) {
    uint64_t result = (OSDictionary *)((uint64_t (*)(OSString *))v3->release)(v3);
  }
  if (v4) {
    return (OSDictionary *)((uint64_t (*)(OSString *))v4->release)(v4);
  }
  return result;
}

uint64_t AppleBCMWLANCore::Stop_Impl(AppleBCMWLANCore *this, IOService *a2)
{
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v6, "[dk] %s@%d:::Stop_Impl[%u] stop( %p) this[%p]\n", "Stop_Impl", 59535, 59535, a2, this);
    }
  }
  if (AppleBCMWLANBusInterface::hasRegisteredDriver(*(AppleBCMWLANBusInterface **)(*((void *)this + 9)
                                                                                                + 5400)))
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        BOOL v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:::Stop_Impl[%u] stop( %p) this[%p] unregisterDriver\n", "Stop_Impl", 59541, 59541, a2, this);
      }
    }
    (*(void (**)(void, AppleBCMWLANCore *, void))(**(void **)(*((void *)this + 9) + 5400) + 128))(*(void *)(*((void *)this + 9) + 5400), this, *(void *)(*((void *)this + 9) + 5568));
  }
  AppleBCMWLANCore::stopResources(this);
  uint64_t v4 = *(void *)(*((void *)this + 9) + 35392);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
    *(void *)(*((void *)this + 9) + 35392) = 0;
  }
  return IOService::Stop((IOService *)this, a2, (OSDispatchMethod)&IO80211Controller::_Dispatch);
}

uint64_t AppleBCMWLANCore::newUserClientGated(AppleBCMWLANCore *this, int a2, IOUserClient **a3)
{
  uint64_t result = (IOService *)0xAAAAAAAAAAAAAAAALL;
  int v11 = 0;
  IOParseBootArgNumber("wlan.factory", &v11, 4);
  if (v11)
  {
    if (a2 == 1466517097) {
      goto LABEL_4;
    }
  }
  else
  {
    BOOL isFdrCal = AppleBCMWLANCore::isFdrCal(this);
    if (a2 == 1466517097 && isFdrCal)
    {
LABEL_4:
      io80211_os_log();
      if (IOService::Create((IOService *)this, (IOService *)this, "AppleBCMWLANUserClientProperties", &result, 0)
        || (uint64_t v9 = (IOUserClient *)OSMetaClassBase::safeMetaCast(result, (const OSMetaClass *)gAppleBCMWLANUserClientMetaClass)) == 0)
      {
        io80211_os_log();
        return 3758097084;
      }
      else
      {
        *a3 = v9;
        io80211_os_log();
        return 0;
      }
    }
  }
  uint64_t v7 = 3758097095;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logEmergency(v8, "[dk] %s@%d:wifiFirmwareLoader logic is not supported\n", "newUserClientGated", 59569);
    }
  }
  return v7;
}

uint64_t AppleBCMWLANCore::NewUserClient_Impl(AppleBCMWLANCore *this, int a2, IOUserClient **a3)
{
  if ((*(unsigned int (**)(void))(**(void **)(*((void *)this + 9) + 30920) + 144))(*(void *)(*((void *)this + 9) + 30920)))
  {
    return AppleBCMWLANCore::newUserClientGated(this, a2, a3);
  }
  else
  {
    uint64_t v7 = *(void *)(*((void *)this + 9) + 30920);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 0x40000000;
    void v8[2] = ___ZN16AppleBCMWLANCore18NewUserClient_ImplEjPP12IOUserClient_block_invoke;
    void v8[3] = &__block_descriptor_tmp_3244;
    unsigned __int16 v8[4] = this;
    int v9 = a2;
    v8[5] = a3;
    return (*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 112))(v7, v8);
  }
}

uint64_t ___ZN16AppleBCMWLANCore18NewUserClient_ImplEjPP12IOUserClient_block_invoke(uint64_t a1)
{
  return AppleBCMWLANCore::newUserClientGated(*(AppleBCMWLANCore **)(a1 + 32), *(_DWORD *)(a1 + 48), *(IOUserClient ***)(a1 + 40));
}

void AppleBCMWLANCore::setAndBootInfraInterface(AppleBCMWLANCore *this, uint64_t a2, AppleBCMWLANSkywalkInterface *a3)
{
  if (a2)
  {
    int v4 = a2;
    if ((*(uint64_t (**)(AppleBCMWLANCore *, uint64_t, AppleBCMWLANSkywalkInterface *))(*(void *)this
                                                                                                + 1848))(this, a2, a3))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logEmergency(v5, "[dk] %s@%d:%s:%s: interfaceId (%d) is not kAPPLE80211InterfaceIdSTA\n", "setAndBootInfraInterface", 59622, "AppleBCMWLANCore", "setAndBootInfraInterface", v4);
      }
    }
  }
  else
  {
    *(void *)(*((void *)this + 9) + 11304) = a3;
    *(void *)(*((void *)this + 9) + 11208) = *((void *)this + 9) + 11304;
    (*(void (**)(AppleBCMWLANCore *, AppleBCMWLANSkywalkInterface *, AppleBCMWLANCore *))(*(void *)this + 368))(this, a3, this);
    uint64_t v17 = 0;
    uint64_t v18 = &v17;
    uint64_t v19 = 0x2000000000;
    int v20 = -536870212;
    uint64_t v6 = *((void *)this + 9);
    uint64_t v7 = *(void *)(v6 + 30920);
    if (*(unsigned char *)(v6 + 35528))
    {
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 0x40000000;
      void v16[2] = ___ZN16AppleBCMWLANCore24setAndBootInfraInterfaceEjP28AppleBCMWLANSkywalkInterface_block_invoke;
      v16[3] = &__block_descriptor_tmp_3246;
      v16[4] = this;
      int v8 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 112))(v7, v16);
      *((_DWORD *)v18 + 6) = v8;
      uint64_t v9 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (v8)
      {
        if (v9)
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            char v12 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logEmergency(v12, "[dk] %s@%d:%s:%s: interfaceId %d failed to boot. trying wifiFirmwareLoader.\n", "setAndBootInfraInterface", 59644, "AppleBCMWLANCore", "setAndBootInfraInterface", 0);
          }
        }
        uint64_t v10 = *(void *)(*((void *)this + 9) + 30920);
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 0x40000000;
        void v15[2] = ___ZN16AppleBCMWLANCore24setAndBootInfraInterfaceEjP28AppleBCMWLANSkywalkInterface_block_invoke_2;
        void v15[3] = &__block_descriptor_tmp_3249;
        v15[4] = this;
        (*(void (**)(uint64_t, void *))(*(void *)v10 + 112))(v10, v15);
      }
      else if (v9)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logInfo(v13, "[dk] %s@%d:%s:%s: interfaceId %d booted\n", "setAndBootInfraInterface", 59639, "AppleBCMWLANCore", "setAndBootInfraInterface", 0);
        }
      }
    }
    else
    {
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 1107296256;
      void v14[2] = ___ZN16AppleBCMWLANCore24setAndBootInfraInterfaceEjP28AppleBCMWLANSkywalkInterface_block_invoke_3;
      v14[4] = &v17;
      void v14[5] = this;
      v14[3] = &__block_descriptor_tmp_3255;
      int v11 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 112))(v7, v14);
      *((_DWORD *)v18 + 6) = v11;
    }
    _Block_object_dispose(&v17, 8);
  }
}

uint64_t ___ZN16AppleBCMWLANCore24setAndBootInfraInterfaceEjP28AppleBCMWLANSkywalkInterface_block_invoke(uint64_t a1)
{
  return AppleBCMWLANCore::driverKitChipBoot(*(IOService **)(a1 + 32));
}

uint64_t ___ZN16AppleBCMWLANCore24setAndBootInfraInterfaceEjP28AppleBCMWLANSkywalkInterface_block_invoke_2(uint64_t a1)
{
  return 0;
}

uint64_t ___ZN16AppleBCMWLANCore24setAndBootInfraInterfaceEjP28AppleBCMWLANSkywalkInterface_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(IOService **)(a1 + 40);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = IOService::Create(v2, v2, "FirmwareLoader", (IOService **)&v2[1].OSObject::OSObjectInterface::__vftable[886].free, 0);
  int v3 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  uint64_t v4 = ((uint64_t (*)(IOService *))v2->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(v2);
  if (v3)
  {
    if (v4)
    {
      ((void (*)(IOService *))v2->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(v2);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)((uint64_t (*)(IOService *))v2->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(v2);
        CCLogStream::logEmergency(v6, "[dk] %s@%d:core driverkit framework create firmwareLoader fail 0x%x\n", "setAndBootInfraInterface_block_invoke_3", 59665, *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
      }
    }
  }
  else
  {
    if (v4)
    {
      ((void (*)(IOService *))v2->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(v2);
      if (CCLogStream::shouldLog())
      {
        uint64_t v10 = (CCLogStream *)((uint64_t (*)(IOService *))v2->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(v2);
        CCLogStream::logEmergency(v10, "[dk] %s@%d:Using legacy wifiFirmwareLoader\n", "setAndBootInfraInterface_block_invoke_3", 59660);
      }
    }
    uint64_t mach_continuous_nanoseconds = AppleBCMWLANUtil::get_mach_continuous_nanoseconds(0, v5);
    int v8 = v2[1].OSObject::OSObjectInterface::__vftable;
    if (v8) {
      v8[887].init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))mach_continuous_nanoseconds;
    }
  }
  return *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
}

uint64_t AppleBCMWLANCore::downloadFdr(AppleBCMWLANCore *this)
{
  uint64_t v19 = 0;
  if (!checkAcquireDataPropertyNotEmpty(*(IOService **)(*((void *)this + 9) + 5400), "wifi-calibration-fdr", &v19, 0, 1uLL, "IOService"))
  {
    uint64_t v3 = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v15 = 59697;
        uint64_t v16 = (uint64_t)"wifi-calibration-fdr";
        uint64_t v6 = "[dk] %s@%d:%s unavailable in ioreg\n";
        goto LABEL_29;
      }
    }
    goto LABEL_22;
  }
  BOOL BCMInterfaceState = AppleBCMWLANCore::getBCMInterfaceState(this);
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v9, "[dk] %s@%d: %s, bcmInterfaceState[%u]\n", "downloadFdr", 59680, "wifi-calibration-fdr", BCMInterfaceState);
    }
  }
  uint64_t v3 = AppleBCMWLANCommander::runIOCtlSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), 3, (uint64_t)&kNoTxPayload, 0, 0);
  uint64_t v4 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (!v3)
  {
    if (v4)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v10, "[dk] %s@%d: downloadCal, calling ...\n", "downloadFdr", 59686);
      }
    }
    uint64_t v3 = AppleBCMWLANCore::downloadCal(this, v19, 0);
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
      && ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
          CCLogStream::shouldLog()))
    {
      int v11 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      char v12 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v3);
      CCLogStream::logAlert(v11, "[dk] %s@%d: downloadCal, called ..., isGeneric[%u], rv[0x%08x]/'%s'\n", "downloadFdr", 59688, 0, v3, v12);
      if (!v3) {
        goto LABEL_15;
      }
    }
    else if (!v3)
    {
      goto LABEL_15;
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        int v14 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v3);
        CCLogStream::logAlert(v13, "[dk] %s@%d:Failed to download %s, rv 0x%x %s\n", "downloadFdr", 59690, "wifi-calibration-fdr", v3, v14);
      }
    }
LABEL_15:
    if (BCMInterfaceState)
    {
      uint64_t v3 = AppleBCMWLANCore::bringupBCM(this);
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v5 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          uint64_t v17 = v3;
          uint64_t v18 = (*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v3);
          uint64_t v16 = 1;
          uint64_t v15 = 59694;
          uint64_t v6 = "[dk] %s@%d: bcmInterfaceState[%u], restored rv[0x%08x]/'%s'\n";
LABEL_19:
          uint64_t v7 = (CCLogStream *)v5;
LABEL_29:
          CCLogStream::logAlert(v7, v6, "downloadFdr", v15, v16, v17, v18);
          goto LABEL_22;
        }
      }
    }
    goto LABEL_22;
  }
  if (v4)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      uint64_t v16 = v3;
      uint64_t v17 = (*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v3);
      uint64_t v15 = 59683;
      uint64_t v6 = "[dk] %s@%d:Failed WLC_DOWN, rv 0x%x/'%s'\n";
      goto LABEL_19;
    }
  }
LABEL_22:
  if (v19) {
    ((void (*)(OSData *))v19->release)(v19);
  }
  return v3;
}

uint64_t AppleBCMWLANCore::createGenericPath(AppleBCMWLANCore *this, char *__dst, const char *a3)
{
  strcpy(__source, "Firmware/");
  strlcpy(__dst, __source, 0xFFuLL);
  strlcat(__dst, (const char *)(*((void *)this + 9) + 1480), 0xFFuLL);
  strlcat(__dst, "_gen.", 0xFFuLL);
  strlcat(__dst, a3, 0xFFuLL);
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (result)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      return CCLogStream::logAlert(v7, "[dk] %s@%d:%s %s from FW path %s\n", "createGenericPath", 59717, "createGenericPath", __dst, (const char *)(*((void *)this + 9) + 1480));
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::downloadGenericCalibrationData(AppleBCMWLANCore *this)
{
  long long v81 = 0u;
  long long v82 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  *(_OWORD *)__dst = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  *(_OWORD *)int v51 = 0u;
  long long v52 = 0u;
  uint64_t v49 = 0;
  int v50 = 0;
  shouldLog = (OSBundle *)(*(uint64_t (**)(void))(*(void *)this + 1848))();
  if (shouldLog)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    shouldLog = (OSBundle *)CCLogStream::shouldLog();
    if (shouldLog)
    {
      uint64_t v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      shouldLog = (OSBundle *)CCLogStream::logAlert(v19, "[dk] %s@%d:OSBundle\n", "downloadGenericCalibrationData", 59731);
    }
  }
  uint64_t v3 = (OSBundle *)OSBundle::mainBundle(shouldLog);
  if (v3)
  {
    AppleBCMWLANCore::createGenericPath(this, __dst, "cal");
    uint64_t v4 = OSBundle::loadResource(v3, __dst, 0, 10 * IOVMPageSize, &v50);
    if (v50)
    {
      BOOL BCMInterfaceState = AppleBCMWLANCore::getBCMInterfaceState(this);
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          int v20 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v20, "[dk] %s@%d: Checked bcmInterfaceState[%u], down firmware sending ...\n", "downloadGenericCalibrationData", 59743, BCMInterfaceState);
        }
      }
      uint64_t RegTableStatus = AppleBCMWLANCommander::runIOCtlSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), 3, (uint64_t)&kNoTxPayload, 0, 0);
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v21 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          __int16 v22 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, RegTableStatus);
          CCLogStream::logAlert(v21, "[dk] %s@%d: Checked bcmInterfaceState[%u], down firmware ... sent, rv[0x%08x]/'%s'\n", "downloadGenericCalibrationData", 59745, BCMInterfaceState, RegTableStatus, v22);
        }
      }
      uint64_t v7 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (!RegTableStatus)
      {
        if (v7)
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            OSStringPtr v23 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            uint64_t v24 = OSMappedFile::size(v50);
            CCLogStream::logAlert(v23, "[dk] %s@%d: calload calling ..., %s: size[%zu]\n", "downloadGenericCalibrationData", 59749, __dst, v24);
          }
        }
        int v8 = (const char *)OSMappedFile::data(v50);
        unint64_t v9 = OSMappedFile::size(v50);
        uint64_t CalMSFStatus = AppleBCMWLANCore::downloadBlob(this, "calload", v8, v9);
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
          && ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
              CCLogStream::shouldLog()))
        {
          __int16 v25 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          uint64_t v26 = OSMappedFile::size(v50);
          uint64_t v27 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, CalMSFStatus);
          CCLogStream::logAlert(v25, "[dk] %s@%d: calload ... called, %s: size[%zu], rv 0x%x %s\n", "downloadGenericCalibrationData", 59751, __dst, v26, CalMSFStatus, v27);
          if (CalMSFStatus)
          {
LABEL_19:
            if (CalMSFStatus != -469794559) {
              goto LABEL_26;
            }
          }
        }
        else if (CalMSFStatus)
        {
          goto LABEL_19;
        }
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            long long v37 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v37, "[dk] %s@%d: retrieveCalMSFStatus calling ..., isGeneric[%u]\n", "downloadGenericCalibrationData", 59754, 1);
          }
        }
        uint64_t CalMSFStatus = AppleBCMWLANCore::retrieveCalMSFStatus((IOService *)this, 1);
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
          && ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
              CCLogStream::shouldLog()))
        {
          long long v38 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          unint64_t v39 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, CalMSFStatus);
          CCLogStream::logAlert(v38, "[dk] %s@%d: retrieveCalMSFStatus ... called, rv[0x%08x]/'%s'\n", "downloadGenericCalibrationData", 59756, CalMSFStatus, v39);
          if (!CalMSFStatus) {
            goto LABEL_29;
          }
        }
        else if (!CalMSFStatus)
        {
          goto LABEL_29;
        }
LABEL_26:
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            int v33 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            int v34 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, CalMSFStatus);
            CCLogStream::logAlert(v33, "[dk] %s@%d:retrieveCalMSFStatus error, rv 0x%x %s\n", "downloadGenericCalibrationData", 59759, CalMSFStatus, v34);
          }
        }
LABEL_29:
        AppleBCMWLANCore::createGenericPath(this, v51, "clmb");
        uint64_t v11 = OSBundle::loadResource(v3, v51, 0, 10 * IOVMPageSize, &v49);
        if (!v49)
        {
          uint64_t v12 = v11;
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              long long v43 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              uint64_t v44 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v12);
              CCLogStream::logAlert(v43, "[dk] %s@%d:Invalid FW genClmb: '%s', rv 0x%x %s\n", "downloadGenericCalibrationData", 59765, v51, v12, v44);
            }
          }
        }
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v28 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            uint64_t v29 = OSMappedFile::size(v49);
            CCLogStream::logAlert(v28, "[dk] %s@%d: clmload calling ..., %s: size[%zu]\n", "downloadGenericCalibrationData", 59768, v51, v29);
          }
        }
        unsigned int v13 = (const char *)OSMappedFile::data(v49);
        unint64_t v14 = OSMappedFile::size(v49);
        uint64_t RegTableStatus = AppleBCMWLANCore::downloadBlob(this, "clmload", v13, v14);
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
          && ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
              CCLogStream::shouldLog()))
        {
          uint64_t v30 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          uint64_t v31 = OSMappedFile::size(v49);
          uint64_t v32 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, RegTableStatus);
          CCLogStream::logAlert(v30, "[dk] %s@%d: clmload ... called, %s: size[%zu], rv 0x%x %s\n", "downloadGenericCalibrationData", 59770, v51, v31, RegTableStatus, v32);
          if (!RegTableStatus) {
            goto LABEL_40;
          }
        }
        else if (!RegTableStatus)
        {
          goto LABEL_40;
        }
        if (RegTableStatus != -469794559)
        {
LABEL_46:
          if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
          {
            (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            if (CCLogStream::shouldLog())
            {
              long long v35 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
              long long v36 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, RegTableStatus);
              CCLogStream::logAlert(v35, "[dk] %s@%d:retrieveRegTableStatus error, rv %s 0x%x\n", "downloadGenericCalibrationData", 59778, v36, RegTableStatus);
            }
          }
          goto LABEL_49;
        }
LABEL_40:
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
        {
          (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          if (CCLogStream::shouldLog())
          {
            long long v40 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
            CCLogStream::logAlert(v40, "[dk] %s@%d: retrieveRegTableStatus calling ...\n", "downloadGenericCalibrationData", 59773);
          }
        }
        uint64_t RegTableStatus = AppleBCMWLANCore::retrieveRegTableStatus(this);
        if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)
          && ((*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this),
              CCLogStream::shouldLog()))
        {
          unint64_t v41 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          unint64_t v42 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, RegTableStatus);
          CCLogStream::logAlert(v41, "[dk] %s@%d: retrieveRegTableStatus ... called, rv[0x%08x]/'%s'\n", "downloadGenericCalibrationData", 59775, RegTableStatus, v42);
          if (RegTableStatus) {
            goto LABEL_46;
          }
        }
        else if (RegTableStatus)
        {
          goto LABEL_46;
        }
LABEL_49:
        if (!BCMInterfaceState) {
          goto LABEL_52;
        }
        uint64_t RegTableStatus = AppleBCMWLANCore::bringupBCM(this);
        if (!(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this)) {
          goto LABEL_52;
        }
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (!CCLogStream::shouldLog()) {
          goto LABEL_52;
        }
        uint64_t v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v47 = RegTableStatus;
        uint64_t v48 = (*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, RegTableStatus);
        uint64_t v46 = 1;
        uint64_t v45 = 59783;
        uint64_t v18 = "[dk] %s@%d: bcmInterfaceState[%u], restored rv[0x%08x]/'%s'\n";
LABEL_77:
        CCLogStream::logAlert(v17, v18, "downloadGenericCalibrationData", v45, v46, v47, v48);
        goto LABEL_52;
      }
      if (v7)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          uint64_t v46 = RegTableStatus;
          uint64_t v47 = (*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, RegTableStatus);
          uint64_t v45 = 59747;
          uint64_t v18 = "[dk] %s@%d:Failed WLC_DOWN, rv 0x%x %s\n";
          goto LABEL_77;
        }
      }
    }
    else
    {
      uint64_t RegTableStatus = v4;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v17 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          uint64_t v47 = RegTableStatus;
          uint64_t v48 = (*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, RegTableStatus);
          uint64_t v46 = (uint64_t)__dst;
          uint64_t v45 = 59740;
          uint64_t v18 = "[dk] %s@%d:Invalid FW genCal: '%s', rv 0x%x %s\n";
          goto LABEL_77;
        }
      }
    }
  }
  else
  {
    uint64_t RegTableStatus = 3758097084;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v16, "[dk] %s@%d:Invalid OSBundle\n");
      }
    }
  }
LABEL_52:
  if (v50)
  {
    (*(void (**)(OSMappedFile *))(*(void *)v50 + 16))(v50);
    int v50 = 0;
  }
  if (v49)
  {
    (*(void (**)(OSMappedFile *))(*(void *)v49 + 16))(v49);
    uint64_t v49 = 0;
  }
  if (v3) {
    (*(void (**)(OSBundle *))(*(void *)v3 + 16))(v3);
  }
  return RegTableStatus;
}

BOOL AppleBCMWLANCore::isHWIdentifiersLate(IOService *this)
{
  uint64_t v5 = 0;
  if (acquireProperty<OSBoolean>(this, "HWIdentifiersLate", &v5, 0, "IOService"))
  {
    BOOL v2 = v5 == kOSBooleanTrue;
    if (v5)
    {
      ((void (*)(void))v5->release)();
      uint64_t v5 = 0;
    }
  }
  else
  {
    BOOL v2 = 0;
  }
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this))
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v4 = (CCLogStream *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[33].getMetaClass)(this);
      CCLogStream::logAlert(v4, "[dk] %s@%d:isHWIdentifiersLate %d\n", "isHWIdentifiersLate", 59804, v2);
    }
  }
  return v2;
}

uint64_t AppleBCMWLANCore::handleFdr(AppleBCMWLANCore *this, const char *a2)
{
  BOOL isFdrCal = AppleBCMWLANCore::isFdrCal(this);
  uint64_t v5 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
  if (isFdrCal)
  {
    if (v5)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v13 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v13, "[dk] %s@%d: FDR platform\n", "handleFdr", 59818);
      }
    }
    if (!strncmp(a2, "fdr", 3uLL))
    {
      uint64_t v6 = AppleBCMWLANCore::downloadFdr(this);
    }
    else
    {
      if (strncmp(a2, "genCal", 6uLL))
      {
        uint64_t v6 = 3758097084;
LABEL_8:
        AppleBCMWLANCore::isHWIdentifiersLate((IOService *)this);
LABEL_9:
        if (AppleBCMWLANCore::isHWIdentifiersLate((IOService *)this))
        {
          unsigned int v7 = 59838;
          int v8 = -469792989;
        }
        else
        {
          unsigned int v7 = 59840;
          int v8 = v6;
        }
        CCFaultReporter::reportFault(*(CCFaultReporter **)(*((void *)this + 9) + 5544), 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/AppleBCMWLANCore.cpp", v7, "handleFdr", 0, v8, 0);
        return v6;
      }
      uint64_t v6 = AppleBCMWLANCore::downloadGenericCalibrationData(this);
      if (v6)
      {
        OSStringPtr v10 = OSString::withCString("unavailable");
        if (v10)
        {
          uint64_t v11 = v10;
          uint64_t v12 = (IOService *)(*(uint64_t (**)(void))(*(void *)(*(void *)(*((void *)this + 9) + 5400) + 48)
                                                  + 288))();
          setPropertyHelper(v12, "wlan.msf.source", v11);
          ((void (*)(const OSObject *))v11->release)(v11);
        }
        goto LABEL_8;
      }
    }
    if (!AppleBCMWLANCore::isHWIdentifiersLate((IOService *)this) && !v6) {
      return v6;
    }
    goto LABEL_9;
  }
  if (v5)
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      unint64_t v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v14, "[dk] %s@%d:platform does not need FDR.\n", "handleFdr", 59814);
    }
  }
  return 0;
}

uint64_t AppleBCMWLANCore::userSetPropertiesGated(AppleBCMWLANCore *this, OSContainer *anObject)
{
  uint64_t v4 = 3758097084;
  uint64_t v5 = (const OSDictionary *)OSMetaClassBase::safeMetaCast(anObject, gOSDictionaryMetaClass);
  if (!v5) {
    return v4;
  }
  uint64_t v6 = v5;
  Object = OSDictionary::getObject(v5, "PlatformConfig");
  if (Object)
  {
    int v8 = (OSDictionary *)OSMetaClassBase::safeMetaCast(Object, gOSDictionaryMetaClass);
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v21 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v21, "[dk] %s@%d: Calling setPlatformConfigProperties: [%p]\n", "userSetPropertiesGated", 59863, this);
      }
    }
    uint64_t v4 = AppleBCMWLANCore::setPlatformConfigProperties(this, v8);
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        __int16 v22 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v22, "[dk] %s@%d: Calling setPlatformConfigProperties: [%p] ... done\n", "userSetPropertiesGated", 59865, this);
      }
    }
  }
  unint64_t v9 = OSDictionary::getObject(v6, "WiFiFdrCal");
  if (v9)
  {
    OSStringPtr v10 = (const OSObject *)OSMetaClassBase::safeMetaCast(v9, gOSDataMetaClass);
    uint64_t v11 = (*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (v10)
    {
      if (v11)
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          OSStringPtr v23 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v23, "[dk] %s@%d:Write %s to ioreg\n", "userSetPropertiesGated", 59872, "wifi-calibration-fdr");
        }
      }
      uint64_t v12 = (IOService *)(*(uint64_t (**)(void))(*(void *)(*(void *)(*((void *)this + 9) + 5400) + 48) + 288))();
      setPropertyHelper(v12, "wifi-calibration-fdr", v10);
      uint64_t v4 = 0;
    }
    else if (v11)
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        __int16 v25 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v25, "[dk] %s@%d:failed to get %s\n", "userSetPropertiesGated", 59876, "wifi-calibration-fdr");
      }
    }
  }
  unsigned int v13 = OSDictionary::getObject(v6, "WiFiMSFSource");
  if (v13)
  {
    unint64_t v14 = v13;
    if (OSMetaClassBase::safeMetaCast(v13, gOSStringMetaClass)
      && (uint64_t v15 = (const OSString *)OSMetaClassBase::safeMetaCast(v14, gOSStringMetaClass),
          (OSStringPtr v16 = OSString::withString(v15)) != 0))
    {
      uint64_t v17 = v16;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v26 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v26, "[dk] %s@%d:Write %s to ioreg\n", "userSetPropertiesGated", 59884, "wlan.msf.source");
        }
      }
      uint64_t v18 = (IOService *)(*(uint64_t (**)(void))(*(void *)(*(void *)(*((void *)this + 9) + 5400) + 48) + 288))();
      setPropertyHelper(v18, "wlan.msf.source", v17);
      CStringNoCopy = OSString::getCStringNoCopy(v17);
      uint64_t v4 = AppleBCMWLANCore::handleFdr(this, CStringNoCopy);
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v27 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          BOOL isFdrCal = AppleBCMWLANCore::isFdrCal(this);
          uint64_t v29 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v4);
          CCLogStream::logAlert(v27, "[dk] %s@%d: handleFdr, isFdrCal[%u], retval[0x%08x]/'%s'\n", "userSetPropertiesGated", 59887, isFdrCal, v4, v29);
        }
      }
      ((void (*)(const OSString *))v17->release)(v17);
    }
    else if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v24 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v24, "[dk] %s@%d:failed to get %s\n", "userSetPropertiesGated", 59890, "wlan.msf.source");
      }
    }
  }
  if (OSDictionary::getObject(v6, "HWIdentifiersLate")) {
    setPropertyHelper((IOService *)this, "HWIdentifiersLate", kOSBooleanTrue);
  }
  if (v4) {
    return v4;
  }
  return IOService::UserSetProperties((IOService *)this, anObject, (int (*)(OSMetaClassBase *, IORPC *__struct_ptr))&IO80211Controller::_Dispatch);
}

uint64_t AppleBCMWLANCore::UserSetProperties_Impl(AppleBCMWLANCore *this, OSContainer *a2)
{
  if ((*(unsigned int (**)(void))(**(void **)(*((void *)this + 9) + 30920) + 144))(*(void *)(*((void *)this + 9) + 30920)))
  {
    return AppleBCMWLANCore::userSetPropertiesGated(this, a2);
  }
  else
  {
    uint64_t v5 = *(void *)(*((void *)this + 9) + 30920);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 0x40000000;
    void v6[2] = ___ZN16AppleBCMWLANCore22UserSetProperties_ImplEP11OSContainer_block_invoke;
    void v6[3] = &__block_descriptor_tmp_3293;
    void v6[4] = this;
    v6[5] = a2;
    return (*(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 112))(v5, v6);
  }
}

uint64_t ___ZN16AppleBCMWLANCore22UserSetProperties_ImplEP11OSContainer_block_invoke(uint64_t a1)
{
  return AppleBCMWLANCore::userSetPropertiesGated(*(AppleBCMWLANCore **)(a1 + 32), *(OSContainer **)(a1 + 40));
}

uint64_t AppleBCMWLANCore::getLogPipes(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t result = *(void *)(*(void *)(a1 + 72) + 5400);
  if (result) {
    return AppleBCMWLANBusInterface::getLogPipesAndStreams(result, a2, a3, a4, 0, 0);
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getLogPipes(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t result = *(void *)(*(void *)(a1 + 24) + 5400);
  if (result) {
    return AppleBCMWLANBusInterface::getLogPipesAndStreams(result, a2, a3, a4, 0, 0);
  }
  return result;
}

uint64_t AppleBCMWLANCore::forceAwdlAmpdu(AppleBCMWLANCore *this)
{
  return *(unsigned int *)(*((void *)this + 9) + 14088);
}

uint64_t AppleBCMWLANCore::setForceAwdlAmpdu(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 72) + 14088) = a2;
  return this;
}

uint64_t AppleBCMWLANCore::forceDisableAwdlAmpdu(AppleBCMWLANCore *this)
{
  return *(unsigned int *)(*((void *)this + 9) + 14084);
}

uint64_t AppleBCMWLANCore::setForceDisableAwdlAmpdu(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 72) + 14084) = a2;
  return this;
}

uint64_t AppleBCMWLANCore::getProximityInterface(AppleBCMWLANCore *this)
{
  return *(void *)(*((void *)this + 9) + 11312);
}

uint64_t AppleBCMWLANCore::getP2PNANDataInterface(AppleBCMWLANCore *this)
{
  return *(void *)(*((void *)this + 9) + 29808);
}

uint64_t AppleBCMWLANCore::isSplitTxStatusEnabled(AppleBCMWLANCore *this)
{
  return *(unsigned __int8 *)(*((void *)this + 9) + 220);
}

uint64_t AppleBCMWLANCore::getDataQueueDepth(AppleBCMWLANCore *this, OSObject *a2)
{
  return 512;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getDataQueueDepth(AppleBCMWLANCore *this, OSObject *a2)
{
  return 512;
}

uint64_t AppleBCMWLANCore::isOCLAWDLSupported(AppleBCMWLANCore *this)
{
  uint64_t result = AppleBCMWLANCore::isOCLEnabled(this);
  if (result)
  {
    uint64_t v3 = *(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472);
    return AppleBCMWLANConfigManager::isOCLAWDLSupportedInDriver(v3);
  }
  return result;
}

uint64_t AppleBCMWLANCore::isBcnCWSwitchEnabled(AppleBCMWLANCore *this)
{
  uint64_t result = AppleBCMWLANCore::featureFlagIsBitSet(this, 3);
  if (result)
  {
    uint64_t v3 = *(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472);
    return AppleBCMWLANConfigManager::isBcnCWSwitchSupportedInDriver(v3);
  }
  return result;
}

uint64_t AppleBCMWLANCore::isAntennaInEfficiencyMitigationSupported(AppleBCMWLANCore *this)
{
  return AppleBCMWLANConfigManager::isAntennaInEfficiencyMitigationSupported(*(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472));
}

uint64_t AppleBCMWLANCore::isLPSCDebugEnabled(AppleBCMWLANCore *this)
{
  return *(unsigned __int8 *)(*((void *)this + 9) + 18341);
}

uint64_t AppleBCMWLANCore::isStaInfoIoVarSupported(AppleBCMWLANCore *this)
{
  return *(unsigned __int8 *)(*((void *)this + 9) + 14224);
}

uint64_t AppleBCMWLANCore::getActionFrameProgress(AppleBCMWLANCore *this)
{
  return *(unsigned __int8 *)(*((void *)this + 9) + 17360);
}

uint64_t AppleBCMWLANCore::getSkywalkInterface(AppleBCMWLANCore *this, unsigned int a2)
{
  if (a2 <= 0xB && (uint64_t v2 = *(void *)(*((void *)this + 9) + 8 * a2 + 11208)) != 0) {
    return *(void *)v2;
  }
  else {
    return 0;
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getSkywalkInterface(AppleBCMWLANCore *this, unsigned int a2)
{
  if (a2 <= 0xB && (uint64_t v2 = *(void *)(*((void *)this + 1) + 8 * a2 + 11208)) != 0) {
    return *(void *)v2;
  }
  else {
    return 0;
  }
}

uint64_t AppleBCMWLANCore::updateSkywalkRxCounter(uint64_t this, uint64_t a2)
{
  *(void *)(*(void *)(this + 72) + 10784) += a2;
  return this;
}

uint64_t AppleBCMWLANCore::getWmeParams(AppleBCMWLANCore *this, unsigned int a2)
{
  return *((void *)this + 9) + 4 * a2 + 19609;
}

uint64_t AppleBCMWLANCore::getLooseSnapHeader(AppleBCMWLANCore *this)
{
  return *(unsigned int *)(*((void *)this + 9) + 18156);
}

uint64_t AppleBCMWLANCore::setLooseSnapHeader(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 72) + 18156) = a2;
  return this;
}

uint64_t AppleBCMWLANCore::getExtendedDTIM(AppleBCMWLANCore *this)
{
  return *(unsigned int *)(*((void *)this + 9) + 19692);
}

uint64_t AppleBCMWLANCore::setExtendedDTIM(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 72) + 19692) = a2;
  return this;
}

uint64_t AppleBCMWLANCore::getDbgExtDtimInSleep(AppleBCMWLANCore *this)
{
  return *(unsigned int *)(*((void *)this + 9) + 6712);
}

uint64_t AppleBCMWLANCore::setDbgExtDtimInSleep(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 72) + 6712) = a2;
  return this;
}

uint64_t AppleBCMWLANCore::getCurrentExtendedDTIM(AppleBCMWLANCore *this)
{
  return *(unsigned int *)(*((void *)this + 9) + 19696);
}

uint64_t AppleBCMWLANCore::setCurrentExtendedDTIM(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 72) + 19696) = a2;
  return this;
}

uint64_t AppleBCMWLANCore::getMPOffetsCount(AppleBCMWLANCore *this)
{
  return *(unsigned int *)(*((void *)this + 9) + 19704);
}

uint64_t AppleBCMWLANCore::setMPOffetsCount(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 72) + 19704) = a2;
  return this;
}

uint64_t AppleBCMWLANCore::getWOMPFilterConfigured(AppleBCMWLANCore *this)
{
  return *(unsigned __int8 *)(*((void *)this + 9) + 10322);
}

uint64_t AppleBCMWLANCore::setWOMPFilterConfigured(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)(this + 72) + 10322) = a2;
  return this;
}

uint64_t AppleBCMWLANCore::getWCL_GET_TX_BLANKING_STATUS(AppleBCMWLANCore *this, unsigned int *a2)
{
  if (a2) {
    *a2 = *(unsigned __int8 *)(*((void *)this + 9) + 19544);
  }
  return 0;
}

uint64_t AppleBCMWLANCore::setTxBlankingHappened(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)(this + 72) + 19544) = a2;
  return this;
}

uint64_t AppleBCMWLANCore::addCumulativePkts(uint64_t this, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(this + 72) + 8 * a2;
  *(void *)(v3 + 18184) += a3;
  return this;
}

uint64_t AppleBCMWLANCore::getReliableL3CtrlTxProfileActive(AppleBCMWLANCore *this)
{
  return *(unsigned int *)(*((void *)this + 9) + 18332);
}

uint64_t AppleBCMWLANCore::isEnhancedPNOEnabled(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 27);
}

uint64_t AppleBCMWLANCore::isPrivateMacEnabled(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 51);
}

uint64_t AppleBCMWLANCore::checkForWNMSupport(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 25);
}

uint64_t AppleBCMWLANCore::checkForFBTOverDSSUpport(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 32);
}

uint64_t AppleBCMWLANCore::checkForSaePKSupport(AppleBCMWLANCore *this)
{
  uint64_t result = AppleBCMWLANCore::featureFlagIsBitSet(this, 109);
  if (result) {
    return (*(unsigned __int8 *)(*((void *)this + 9) + 17354) >> 6) & 1;
  }
  return result;
}

uint64_t AppleBCMWLANCore::checkForOprChValidationSupport(AppleBCMWLANCore *this)
{
  uint64_t result = AppleBCMWLANCore::featureFlagIsBitSet(this, 107);
  if (result) {
    return (*(unsigned __int8 *)(*((void *)this + 9) + 17354) >> 4) & 1;
  }
  return result;
}

uint64_t AppleBCMWLANCore::checkForRoamCacheSupport(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 58);
}

uint64_t AppleBCMWLANCore::checkForAWDDataInfoSupport(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 35);
}

uint64_t AppleBCMWLANCore::checkForOWESupport(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 96);
}

uint64_t AppleBCMWLANCore::isApStaSDBMode(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 63);
}

uint64_t AppleBCMWLANCore::isSaeH2eEnabled(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 100);
}

uint64_t AppleBCMWLANCore::isCcaStatsExtSupported(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 72);
}

uint64_t AppleBCMWLANCore::checkFor4WayHSProtectionSupport(AppleBCMWLANCore *this)
{
  return AppleBCMWLANCore::featureFlagIsBitSet(this, 15);
}

uint64_t AppleBCMWLANCore::isDynTxSDBEnabled(AppleBCMWLANCore *this)
{
  return AppleBCMWLANConfigManager::isDynTxSDBEnabled(*(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472));
}

BOOL AppleBCMWLANCore::is6GChanSpec(AppleBCMWLANCore *this, uint64_t a2)
{
  return (AppleBCMWLANChanSpec::getAppleChannelSpec(*(int ***)(*((void *)this + 9) + 17576), a2) & 0xC000) == 0x4000;
}

uint64_t AppleBCMWLANCore::getTxSDBFeatureFlag(AppleBCMWLANCore *this)
{
  return *(unsigned __int8 *)(*((void *)this + 9) + 30912);
}

uint64_t AppleBCMWLANCore::getDynSARFeatureFlag(AppleBCMWLANCore *this)
{
  return *(unsigned __int8 *)(*((void *)this + 9) + 30913);
}

uint64_t AppleBCMWLANCore::getRxMpduLostNonBa(AppleBCMWLANCore *this, unsigned int a2)
{
  return *((void *)this + 9) + 68 * a2 + 30268;
}

uint64_t AppleBCMWLANCore::getRxMpduLostBa(AppleBCMWLANCore *this, unsigned int a2)
{
  return *((void *)this + 9) + 68 * a2 + 30236;
}

uint64_t AppleBCMWLANCore::getRxWmeStats(AppleBCMWLANCore *this, unsigned int a2)
{
  return *((void *)this + 9) + 36 * a2 + 30444;
}

uint64_t AppleBCMWLANCore::setRxPer(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 72) + 30512) = a2;
  return this;
}

uint64_t AppleBCMWLANCore::getDeltaTxWmeStats(AppleBCMWLANCore *this, unsigned int a2)
{
  return *((void *)this + 9) + 36 * a2 + 30372;
}

uint64_t AppleBCMWLANCore::setDeltaTxFail(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 72) + 30776) = a2;
  return this;
}

uint64_t AppleBCMWLANCore::getTxPer(AppleBCMWLANCore *this)
{
  return *(unsigned int *)(*((void *)this + 9) + 30516);
}

uint64_t AppleBCMWLANCore::setTxPer(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 72) + 30516) = a2;
  return this;
}

BOOL AppleBCMWLANCoreFirmwareLoader::init(IOService *this)
{
  BOOL result = IOService::init(this);
  if (result)
  {
    uint64_t v3 = IOMallocZeroTyped();
    this[1].OSObject::OSMetaClassBase::__vftable = (IOService_vtbl *)v3;
    if (v3)
    {
      return 1;
    }
    else
    {
      IOLog("Failed to allocate AppleBCMWLANCoreFirmwareLoader_IVars\n");
      return 0;
    }
  }
  return result;
}

BOOL non-virtual thunk to'AppleBCMWLANCoreFirmwareLoader::init(AppleBCMWLANCoreFirmwareLoader *this)
{
  return AppleBCMWLANCoreFirmwareLoader::init((IOService *)((char *)this - 24));
}

uint64_t AppleBCMWLANCoreFirmwareLoader::Start_Impl(IOService *this, IOService *a2)
{
  uint64_t v4 = IOService::Start(this, a2, (OSDispatchMethod)&IO80211Controller::_Dispatch);
  ((void (*)(IOService *))a2->retain)(a2);
  this[1].getMetaClass = (const OSMetaClass *(__cdecl *)(const OSMetaClassBase *__hidden))a2;
  if (v4)
  {
    IOLog("AppleBCMWLANCoreFirmwareLoader service registration failure\n");
  }
  else
  {
    IOService::RegisterService(this, 0);
    IOLog("AppleBCMWLANCoreFirmwareLoader service registration success\n");
  }
  return v4;
}

uint64_t AppleBCMWLANCoreFirmwareLoader::Stop_Impl(IOService *this, IOService *a2)
{
  return IOService::Stop(this, a2, (OSDispatchMethod)&IO80211Controller::_Dispatch);
}

void AppleBCMWLANCoreFirmwareLoader::free(IOService *this)
{
  uint64_t v2 = this[1].OSObject::OSMetaClassBase::__vftable;
  if (v2)
  {
    if (v2->getMetaClass)
    {
      (*(void (**)(const OSMetaClass *(__cdecl *)(const OSMetaClassBase *__hidden)))(*(void *)v2->getMetaClass
                                                                                              + 16))(v2->getMetaClass);
      this[1].getMetaClass = 0;
      uint64_t v2 = this[1].OSObject::OSMetaClassBase::__vftable;
    }
    memset_s(v2, 8uLL, 0, 8uLL);
    uint64_t v3 = this[1].OSObject::OSMetaClassBase::__vftable;
    if (v3)
    {
      IOFree(v3, 8uLL);
      this[1].OSObject::OSMetaClassBase::__vftable = 0;
    }
  }
  IOService::free(this);
}

void non-virtual thunk to'AppleBCMWLANCoreFirmwareLoader::free(AppleBCMWLANCoreFirmwareLoader *this)
{
}

uint64_t AppleBCMWLANCore::configureDynamicRssiWindow(AppleBCMWLANCore *this, int a2)
{
  if ((a2 - 17) > 0xFFFFFFF0)
  {
    uint64_t v5 = *(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 5472);
    return AppleBCMWLANConfigManager::configureDynamicRssiWindow(v5, a2);
  }
  else
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v6 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v6, "[dk] %s@%d:InCorrect RSSI Window Size %u\n", "configureDynamicRssiWindow", 61194, a2);
      }
    }
    return 3758097090;
  }
}

uint64_t AppleBCMWLANCore::triggerTTR(IO80211Controller *a1, int a2)
{
  uint64_t v4 = IOMallocZeroData();
  uint64_t v5 = (void *)v4;
  if (a2)
  {
    uint64_t result = (*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
    if (result
      && ((*(void (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1),
          uint64_t result = CCLogStream::shouldLog(),
          result))
    {
      unsigned int v7 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)a1 + 1848))(a1);
      uint64_t result = CCLogStream::logAlert(v7, "[dk] %s@%d:Unrecognised TTR reason %d", "triggerTTR", 61216, a2);
      if (!v5) {
        return result;
      }
    }
    else if (!v5)
    {
      return result;
    }
  }
  else
  {
    *(_DWORD *)uint64_t v4 = 0;
    strlcpy((char *)(v4 + 4), kAppleBCMWLANCommanderOutboundQueueStall[0], 0x100uLL);
    IO80211Controller::postMessage(a1, *(IO80211SkywalkInterface **)(*((void *)a1 + 9) + 11304), 0xC4u, v5, 0x104uLL, 1);
  }
  return IOFreeData();
}

uint64_t AppleBCMWLANCore::is6ESupportedInCurrentCountry(AppleBCMWLANCore *this)
{
  uint64_t v2 = *((void *)this + 9);
  uint64_t v3 = (const char *)(v2 + 6752);
  if (*(unsigned char *)(v2 + 6764))
  {
    if (strncmp((const char *)(v2 + 6744), v3, 4uLL))
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v4, "[dk] %s@%d:WiFiCC : Host country code [%s] does not match FW country code[%s].\n", "is6ESupportedInCurrentCountry", 61243, (const char *)(*((void *)this + 9) + 6744), (const char *)(*((void *)this + 9) + 6752));
        }
      }
LABEL_19:
      *(unsigned char *)(*((void *)this + 9) + 35752) = 0;
      return *(unsigned __int8 *)(*((void *)this + 9) + 35752);
    }
    if (strncmp((const char *)(v2 + 6756), (const char *)(v2 + 6744), 4uLL))
    {
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unint64_t v9 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          CCLogStream::logAlert(v9, "[dk] %s@%d:WiFiCC : Current Host country code [%s] does not match the country for channels last queried [%s] \n", "is6ESupportedInCurrentCountry", 61247, (const char *)(*((void *)this + 9) + 6744), (const char *)(*((void *)this + 9) + 6756));
        }
      }
      if (AppleBCMWLANCore::handleCountryCodeChangeToRepopulateChannels(this)) {
        goto LABEL_19;
      }
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v7 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
          uint64_t v11 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, void))(*(void *)this + 112))(this, 0);
          CCLogStream::logAlert(v7, "[dk] %s@%d: fw queried again for chanspecs : %s\n", "is6ESupportedInCurrentCountry", 61251, v11);
        }
      }
    }
  }
  else if (strncmp((const char *)(v2 + 6756), v3, 4uLL))
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        int v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        CCLogStream::logAlert(v8, "[dk] %s@%d:WiFiCC : Current FW country code [%s] does not match the country for channels last queried [%s]\n", "is6ESupportedInCurrentCountry", 61260, (const char *)(*((void *)this + 9) + 6752), (const char *)(*((void *)this + 9) + 6756));
      }
    }
    if (AppleBCMWLANCore::handleCountryCodeChangeToRepopulateChannels(this)) {
      goto LABEL_19;
    }
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        OSStringPtr v10 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, void))(*(void *)this + 112))(this, 0);
        CCLogStream::logAlert(v5, "[dk] %s@%d: fw queried again for chanspecs : %s\n", "is6ESupportedInCurrentCountry", 61264, v10);
      }
    }
  }
  return *(unsigned __int8 *)(*((void *)this + 9) + 35752);
}

uint64_t AppleBCMWLANCore::setWCL_REAL_TIME_MODE(uint64_t a1, unsigned char *a2)
{
  if (!a2) {
    return 3758097084;
  }
  uint64_t v2 = *(AppleBCMWLANNetAdapter **)(*(void *)(a1 + 72) + 5600);
  if (*a2) {
    return AppleBCMWLANNetAdapter::setRealTimeMode(v2);
  }
  else {
    return AppleBCMWLANNetAdapter::setDefaultMode(v2);
  }
}

uint64_t AppleBCMWLANCore::setWCL_ARP_MODE(AppleBCMWLANCore *this, uint64_t a2)
{
  uint64_t result = 3758097084;
  if (a2)
  {
    int v5 = *(_DWORD *)(a2 + 8);
    if (v5)
    {
      if (v5 == 1)
      {
        uint64_t v6 = *(AppleBCMWLANKeepAliveOffload **)(*((void *)this + 9) + 5552);
        if (*(unsigned char *)(a2 + 16)) {
          uint64_t result = AppleBCMWLANKeepAliveOffload::programGARP(v6, *(_DWORD *)(a2 + 12));
        }
        else {
          uint64_t result = AppleBCMWLANKeepAliveOffload::stopGARP(v6);
        }
      }
    }
    else if (*(unsigned char *)(a2 + 16))
    {
      uint64_t result = AppleBCMWLANCore::programARPKeepAlive(this, *(_DWORD *)(a2 + 12));
    }
    else
    {
      uint64_t result = AppleBCMWLANCore::stopARPKeepAlive(this);
    }
    if (*(unsigned char *)(a2 + 4) && *(unsigned char *)(a2 + 5))
    {
      unsigned int v7 = *(AppleBCMWLANCore ****)(*((void *)this + 9) + 5560);
      unsigned __int16 v8 = *(_WORD *)a2;
      unsigned __int16 v9 = *(_WORD *)(a2 + 2);
      return AppleBCMWLANWnmAdapter::configureWNMKeepAlives(v7, v8, v9);
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::setWCL_QOS_PARAMS(AppleBCMWLANCore *a1, uint64_t a2)
{
  if (!a2) {
    return 3758097084;
  }
  uint64_t v4 = AppleBCMWLANNetAdapter::setQosParams(*(AppleBCMWLANNetAdapter **)(*((void *)a1 + 9) + 5600), (_DWORD *)a2);
  if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 115))
  {
    int v5 = *(AppleBCMWLANCore ****)(*((void *)a1 + 9) + 5592);
    if (v5)
    {
      if ((*(unsigned char *)(a2 + 22) & 0x40) != 0) {
        AppleBCMWLAN11beAdapter::configureMloFeatures(v5, *(unsigned char *)(a2 + 21) != 0);
      }
    }
  }
  if ((*(unsigned char *)(a2 + 22) & 0x20) != 0) {
    AppleBCMWLANCore::setReatimeAppPoliciesInternal(a1, *(unsigned __int8 *)(a2 + 20));
  }
  return v4;
}

uint64_t AppleBCMWLANCore::setWCL_LINK_UP_DONE(AppleBCMWLANCore *this, void *a2)
{
  return 0;
}

uint64_t AppleBCMWLANCore::setWCL_LINK_STATE_UPDATE(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 3758097084;
  }
  uint64_t v2 = *(AppleBCMWLANCore ****)(*(void *)(a1 + 72) + 5600);
  if (*(unsigned char *)(a2 + 6)) {
    return AppleBCMWLANNetAdapter::setLinkUp(v2, (ether_addr *)a2, *(unsigned char *)(a2 + 7) != 0, *(unsigned char *)(a2 + 8) != 0);
  }
  else {
    return AppleBCMWLANNetAdapter::setLinkDown((AppleBCMWLANNetAdapter *)v2, *(_DWORD *)(a2 + 12) != 0, *(_DWORD *)(a2 + 12));
  }
}

uint64_t AppleBCMWLANCore::getJoinAdapter(AppleBCMWLANCore *this)
{
  return *(void *)(*((void *)this + 9) + 5424);
}

uint64_t AppleBCMWLANCore::getScanAdapter(AppleBCMWLANCore *this)
{
  return *(void *)(*((void *)this + 9) + 5432);
}

uint64_t AppleBCMWLANCore::getNDDAdapter(AppleBCMWLANCore *this)
{
  return *(void *)(*((void *)this + 9) + 35856);
}

uint64_t AppleBCMWLANCore::getWCL_CHANNELS_INFO(AppleBCMWLANCore *a1, uint64_t a2)
{
  *(_DWORD *)a2 = *(_DWORD *)(*((void *)a1 + 9) + 19760);
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(*((void *)a1 + 9) + 19764);
  *(_WORD *)(a2 + 12) = *(_WORD *)(*((void *)a1 + 9) + 19772);
  __int16 v4 = *(_WORD *)(*((void *)a1 + 9) + 19768);
  *(unsigned char *)(a2 + 10) = *(unsigned char *)(*((void *)a1 + 9) + 19770);
  *(_WORD *)(a2 + 8) = v4;
  memcpy((void *)(a2 + 814), (const void *)(*((void *)a1 + 9) + 20574), 0x190uLL);
  memcpy((void *)(a2 + 1214), (const void *)(*((void *)a1 + 9) + 20974), 0x190uLL);
  memcpy((void *)(a2 + 1614), (const void *)(*((void *)a1 + 9) + 21374), 0x190uLL);
  memcpy((void *)(a2 + 2014), (const void *)(*((void *)a1 + 9) + 21774), 0x190uLL);
  memcpy((void *)(a2 + 2416), (const void *)(*((void *)a1 + 9) + 22976), 0x640uLL);
  memcpy((void *)(a2 + 4016), (const void *)(*((void *)a1 + 9) + 24576), 0x640uLL);
  memcpy((void *)(a2 + 5616), (const void *)(*((void *)a1 + 9) + 26976), 0x190uLL);
  memcpy((void *)(a2 + 6016), (const void *)(*((void *)a1 + 9) + 27376), 0x190uLL);
  memcpy((void *)(a2 + 6416), (const void *)(*((void *)a1 + 9) + 27776), 0x190uLL);
  memcpy((void *)(a2 + 6816), (const void *)(*((void *)a1 + 9) + 28176), 0x190uLL);
  memcpy((void *)(a2 + 7216), (const void *)(*((void *)a1 + 9) + 28576), 0x190uLL);
  memcpy((void *)(a2 + 7616), (const void *)(*((void *)a1 + 9) + 28976), 0x190uLL);
  memcpy((void *)(a2 + 8016), (const void *)(*((void *)a1 + 9) + 29376), 0x190uLL);
  *(unsigned char *)(a2 + 8416) = AppleBCMWLANCore::is6ESupportedInCurrentCountry(a1);
  uint64_t v5 = *((void *)a1 + 9);
  if (*(_WORD *)(v5 + 19772))
  {
    unint64_t v6 = 0;
    uint64_t v7 = a2 + 14;
    do
    {
      *(_WORD *)(v7 + 2 * v6) = AppleBCMWLANChanSpec::getAppleChannelSpec(*(int ***)(v5 + 17576), *(unsigned __int16 *)(v5 + 2 * v6 + 19774));
      ++v6;
      uint64_t v5 = *((void *)a1 + 9);
    }
    while (v6 < *(unsigned __int16 *)(v5 + 19772));
  }
  return 0;
}

uint64_t AppleBCMWLANCore::getBEACON_PERIOD(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(IO80211BssManager **)(*(void *)(a1 + 72) + 5440);
  if (v2) {
    return IO80211BssManager::getCurrentBeaconPeriod(v2, (unsigned int *)(a2 + 4));
  }
  else {
    return 3758097084;
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getBEACON_PERIOD(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(IO80211BssManager **)(*(void *)(a1 + 8) + 5440);
  if (v2) {
    return IO80211BssManager::getCurrentBeaconPeriod(v2, (unsigned int *)(a2 + 4));
  }
  else {
    return 3758097084;
  }
}

uint64_t AppleBCMWLANCore::getTKO_PARAMS(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 72) + 5552);
  if (v2) {
    return AppleBCMWLANKeepAliveOffload::getTCPAliveOffloadParams(v2, a2);
  }
  else {
    return 3758097084;
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getTKO_PARAMS(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 5552);
  if (v2) {
    return AppleBCMWLANKeepAliveOffload::getTCPAliveOffloadParams(v2, a2);
  }
  else {
    return 3758097084;
  }
}

uint64_t AppleBCMWLANCore::getTKO_DUMP(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 72) + 5552);
  if (v2) {
    return AppleBCMWLANKeepAliveOffload::getTCPAliveOffloadDump(v2, a2);
  }
  else {
    return 3758097084;
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getTKO_DUMP(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 5552);
  if (v2) {
    return AppleBCMWLANKeepAliveOffload::getTCPAliveOffloadDump(v2, a2);
  }
  else {
    return 3758097084;
  }
}

uint64_t AppleBCMWLANCore::getROAM_PROFILE(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANRoamAdapter::getROAM_PROFILE(*(void *)(*(void *)(a1 + 72) + 5576), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getROAM_PROFILE(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANRoamAdapter::getROAM_PROFILE(*(void *)(*(void *)(a1 + 8) + 5576), a2);
}

uint64_t AppleBCMWLANCore::getDTIM_INT(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(IO80211BssManager **)(*(void *)(a1 + 72) + 5440);
  if (v2) {
    return IO80211BssManager::getCurrentDTIMPeriod(v2, (unsigned int *)(a2 + 4));
  }
  else {
    return 3758097084;
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getDTIM_INT(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(IO80211BssManager **)(*(void *)(a1 + 8) + 5440);
  if (v2) {
    return IO80211BssManager::getCurrentDTIMPeriod(v2, (unsigned int *)(a2 + 4));
  }
  else {
    return 3758097084;
  }
}

uint64_t AppleBCMWLANCore::getWCL_FW_HOT_CHANNELS(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANNetAdapter::getFWHotChannels(*(void *)(*(void *)(a1 + 72) + 5600), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getWCL_FW_HOT_CHANNELS(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANNetAdapter::getFWHotChannels(*(void *)(*(void *)(a1 + 8) + 5600), a2);
}

uint64_t AppleBCMWLANCore::setGET_DEBUG_INFO(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3 || *(_DWORD *)(a3 + 245192) != 1 || *(void *)(a3 + 1464) > 0x1000000uLL) {
    return 22;
  }
  if (*(void *)(*(void *)(a1 + 72) + 14176))
  {
    uint64_t result = IO80211CoreDbg::handleDebugCmd();
    if (!a2) {
      return result;
    }
  }
  else
  {
    uint64_t result = 19;
    if (!a2) {
      return result;
    }
  }
  if (result == 19)
  {
    return IO80211SkywalkInterface::handleDebugCmd(a2, a3);
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setGET_DEBUG_INFO(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AppleBCMWLANCore::setGET_DEBUG_INFO(a1 - 48, a2, a3);
}

uint64_t AppleBCMWLANCore::setTKO_PARAMS(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 72) + 5552);
  if (v2) {
    return AppleBCMWLANKeepAliveOffload::setTCPAliveOffloadParams(v2, a2);
  }
  else {
    return 3758097084;
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setTKO_PARAMS(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 5552);
  if (v2) {
    return AppleBCMWLANKeepAliveOffload::setTCPAliveOffloadParams(v2, a2);
  }
  else {
    return 3758097084;
  }
}

uint64_t AppleBCMWLANCore::setLE_SCAN_PARAM(void *a1, _DWORD *a2)
{
  int v3 = *(unsigned __int8 *)a2;
  int v5 = a2[1];
  int v4 = a2[2];
  uint64_t v6 = a2[3];
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v11 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v11, "[dk] %s@%d:Receiving BT LE SCAN notification: enable %d, peauint64_t k = %u, total = %u, dc = %d\n", "setLE_SCAN_PARAM", 61690, v3, v5, v4, v6);
    }
  }
  if (v3)
  {
    ++*(_DWORD *)(a1[9] + 30780);
    *(_DWORD *)(a1[9] + 30788) += v5;
    uint64_t v7 = (_DWORD *)(a1[9] + 30792);
  }
  else
  {
    uint64_t v7 = (_DWORD *)(a1[9] + 30784);
    int v4 = 1;
  }
  *v7 += v4;
  if (v6 <= 6) {
    ++*(_DWORD *)(a1[9] + 4 * v6 + 30796);
  }
  uint64_t v8 = a1[9];
  unsigned __int16 v9 = *(AppleBCMWLANBssManager **)(v8 + 5520);
  if (v9) {
    AppleBCMWLANIOReportingPerSlice::reportBTLECnxStats(v9, (unsigned int *)(v8 + 30780));
  }
  return 0;
}

uint64_t AppleBCMWLANCore::setMWS_WIFI_TYPE_7_BITMAP_WIFI_ENH(void *a1, _DWORD *a2)
{
  if (!a2) {
    return 3758097084;
  }
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v7, "[dk] %s@%d:Got APPLE80211_IOC_MWS_WIFI_TYPE_7_BITMAP_WIFI_ENH indication\n", "setMWS_WIFI_TYPE_7_BITMAP_WIFI_ENH", 61717);
    }
  }
  *(_DWORD *)(a1[9] + 10628) = *a2;
  *(_DWORD *)(a1[9] + 10632) = a2[1];
  *(_DWORD *)(a1[9] + 10636) = a2[2];
  *(_DWORD *)(a1[9] + 10640) = a2[3];
  *(_DWORD *)(a1[9] + 10644) = a2[4];
  *(_DWORD *)(a1[9] + 10648) = a2[5];
  *(_DWORD *)(a1[9] + 10652) = a2[6];
  *(_DWORD *)(a1[9] + 10656) = a2[7];
  *(_DWORD *)(a1[9] + 10660) = a2[8];
  uint64_t v4 = a1[9] + 10628;
  int v5 = *(uint64_t (**)(void *, uint64_t))(*a1 + 1464);
  return v5(a1, v4);
}

uint64_t AppleBCMWLANCore::setMWS_COEX_BITMAP_WIFI_ENH(void *a1, _DWORD *a2)
{
  if (!a2) {
    return 3758097084;
  }
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v7, "[dk] %s@%d:Got APPLE80211_IOC_MWS_COEX_BITMAP_WIFI_ENH indication\n", "setMWS_COEX_BITMAP_WIFI_ENH", 61739);
    }
  }
  *(_DWORD *)(a1[9] + 10552) = *a2;
  *(_DWORD *)(a1[9] + 10556) = a2[1];
  *(_DWORD *)(a1[9] + 10560) = a2[2];
  *(_DWORD *)(a1[9] + 10564) = a2[3];
  *(_DWORD *)(a1[9] + 10568) = a2[4];
  *(_DWORD *)(a1[9] + 10572) = a2[5];
  *(_DWORD *)(a1[9] + 10576) = a2[6];
  *(_DWORD *)(a1[9] + 10580) = a2[7];
  *(_DWORD *)(a1[9] + 10584) = a2[8];
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v8, "[dk] %s@%d:APPLE80211_IOC_MWS_COEX_BITMAP_WIFI_ENH 2g_bitmap=0x%X, 5g_bitmap_low=0x%X, 5g_bitmap_mid=0x%X, 5g_bitmap_high=0x%X\n", "setMWS_COEX_BITMAP_WIFI_ENH", 61751, *a2, a2[1], a2[2], a2[3]);
    }
  }
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      unsigned __int16 v9 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v9, "[dk] %s@%d:APPLE80211_IOC_MWS_COEX_BITMAP_WIFI_ENH unii5_bitmap_low=0x%X, unii5_bitmap_high=0x%X, unii6_bitmap=0x%X, unii7_bitmap=0x%X, unii8_bitmap=0x%X\n", "setMWS_COEX_BITMAP_WIFI_ENH", 61753, a2[4], a2[5], a2[6], a2[7], a2[8]);
    }
  }
  uint64_t v4 = a1[9] + 10552;
  int v5 = *(uint64_t (**)(void *, uint64_t))(*a1 + 1448);
  return v5(a1, v4);
}

uint64_t AppleBCMWLANCore::setMWS_DISABLE_OCL_BITMAP_WIFI_ENH(void *a1, _DWORD *a2)
{
  if (!a2) {
    return 3758097084;
  }
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v7, "[dk] %s@%d:Got APPLE80211_IOC_MWS_DisableOCL_BITMAP_WiFiEnh indication\n", "setMWS_DISABLE_OCL_BITMAP_WIFI_ENH", 61766);
    }
  }
  *(_DWORD *)(a1[9] + 10592) = *a2;
  *(_DWORD *)(a1[9] + 10596) = a2[1];
  *(_DWORD *)(a1[9] + 10600) = a2[2];
  *(_DWORD *)(a1[9] + 10604) = a2[3];
  *(_DWORD *)(a1[9] + 10608) = a2[4];
  *(_DWORD *)(a1[9] + 10612) = a2[5];
  *(_DWORD *)(a1[9] + 10616) = a2[6];
  *(_DWORD *)(a1[9] + 10620) = a2[7];
  *(_DWORD *)(a1[9] + 10624) = a2[8];
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v8, "[dk] %s@%d:APPLE80211_IOC_MWS_DISABLE_OCL_BITMAP_WIFI_ENH 2g_bitmap=0x%X, 5g_bitmap_low=0x%X, 5g_bitmap_mid=0x%X, 5g_bitmap_high=0x%X\n", "setMWS_DISABLE_OCL_BITMAP_WIFI_ENH", 61778, *a2, a2[1], a2[2], a2[3]);
    }
  }
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      unsigned __int16 v9 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v9, "[dk] %s@%d:APPLE80211_IOC_MWS_DISABLE_OCL_BITMAP_WIFI_ENH unii5_bitmap_low=0x%X, unii5_bitmap_high=0x%X, unii6_bitmap=0x%X, unii7_bitmap=0x%X, unii8_bitmap=0x%X\n", "setMWS_DISABLE_OCL_BITMAP_WIFI_ENH", 61780, a2[4], a2[5], a2[6], a2[7], a2[8]);
    }
  }
  uint64_t v4 = a1[9] + 10592;
  int v5 = *(uint64_t (**)(void *, uint64_t))(*a1 + 1456);
  return v5(a1, v4);
}

uint64_t AppleBCMWLANCore::setMWS_RFEM_CONFIG_WIFI_ENH(void *a1, _DWORD *a2)
{
  if (!a2) {
    return 3758097084;
  }
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v7, "[dk] %s@%d:Got APPLE80211_IOC_MWS_RFEM_CONFIG_WIFI_ENH indication\n", "setMWS_RFEM_CONFIG_WIFI_ENH", 61793);
    }
  }
  *(_DWORD *)(a1[9] + 10588) = a2[9];
  *(_DWORD *)(a1[9] + 10552) = *a2;
  *(_DWORD *)(a1[9] + 10556) = a2[1];
  *(_DWORD *)(a1[9] + 10560) = a2[2];
  *(_DWORD *)(a1[9] + 10564) = a2[3];
  *(_DWORD *)(a1[9] + 10568) = a2[4];
  *(_DWORD *)(a1[9] + 10572) = a2[5];
  *(_DWORD *)(a1[9] + 10576) = a2[6];
  *(_DWORD *)(a1[9] + 10580) = a2[7];
  *(_DWORD *)(a1[9] + 10584) = a2[8];
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v8, "[dk] %s@%d:APPLE80211_IOC_MWS_RFEM_CONFIG_WIFI_ENH wifiBandBitmak=0x%X, 2g_bitmap=0x%X, 5g_bitmap_low=0x%X, 5g_bitmap_mid=0x%X, 5g_bitmap_high=0x%X\n", "setMWS_RFEM_CONFIG_WIFI_ENH", 61806, a2[9], *a2, a2[1], a2[2], a2[3]);
    }
  }
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      unsigned __int16 v9 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v9, "[dk] %s@%d:APPLE80211_IOC_MWS_RFEM_CONFIG_WIFI_ENH unii5_bitmap_low=0x%X, unii5_bitmap_high=0x%X, unii6_bitmap=0x%X, unii7_bitmap=0x%X, unii8_bitmap=0x%X\n", "setMWS_RFEM_CONFIG_WIFI_ENH", 61808, a2[4], a2[5], a2[6], a2[7], a2[8]);
    }
  }
  uint64_t v4 = a1[9] + 10552;
  int v5 = *(uint64_t (**)(void *, uint64_t))(*a1 + 1496);
  return v5(a1, v4);
}

uint64_t AppleBCMWLANCore::setMWS_ASSOC_PROTECTION_BITMAP_WIFI_ENH(void *a1, _DWORD *a2)
{
  if (!a2) {
    return 3758097084;
  }
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v7, "[dk] %s@%d:Got APPLE80211_IOC_MWS_ASSOC_PROTECTION_BITMAP_WIFI_ENH indication\n", "setMWS_ASSOC_PROTECTION_BITMAP_WIFI_ENH", 61821);
    }
  }
  *(_DWORD *)(a1[9] + 10552) = *a2;
  *(_DWORD *)(a1[9] + 10556) = a2[1];
  *(_DWORD *)(a1[9] + 10560) = a2[2];
  *(_DWORD *)(a1[9] + 10564) = a2[3];
  *(_DWORD *)(a1[9] + 10568) = a2[4];
  *(_DWORD *)(a1[9] + 10572) = a2[5];
  *(_DWORD *)(a1[9] + 10576) = a2[6];
  *(_DWORD *)(a1[9] + 10580) = a2[7];
  *(_DWORD *)(a1[9] + 10584) = a2[8];
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v8, "[dk] %s@%d:APPLE80211_IOC_MWS_ASSOC_PROTECTION_BITMAP_WIFI_ENH 2g_bitmap=0x%X, 5g_bitmap_low=0x%X, 5g_bitmap_mid=0x%X, 5g_bitmap_high=0x%X\n", "setMWS_ASSOC_PROTECTION_BITMAP_WIFI_ENH", 61833, *a2, a2[1], a2[2], a2[3]);
    }
  }
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      unsigned __int16 v9 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v9, "[dk] %s@%d:APPLE80211_IOC_MWS_ASSOC_PROTECTION_BITMAP_WIFI_ENH unii5_bitmap_low=0x%X, unii5_bitmap_high=0x%X, unii6_bitmap=0x%X, unii7_bitmap=0x%X, unii8_bitmap=0x%X\n", "setMWS_ASSOC_PROTECTION_BITMAP_WIFI_ENH", 61835, a2[4], a2[5], a2[6], a2[7], a2[8]);
    }
  }
  uint64_t v4 = a1[9] + 10552;
  int v5 = *(uint64_t (**)(void *, uint64_t))(*a1 + 1504);
  return v5(a1, v4);
}

uint64_t AppleBCMWLANCore::setMWS_SCAN_FREQ_WIFI_ENH(void *a1, _DWORD *a2)
{
  if (!a2) {
    return 3758097084;
  }
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v7, "[dk] %s@%d:Got APPLE80211_IOC_MWS_SCAN_FREQ_WIFI_ENH indication\n", "setMWS_SCAN_FREQ_WIFI_ENH", 61848);
    }
  }
  *(_DWORD *)(a1[9] + 10664) = a2[9];
  *(_DWORD *)(a1[9] + 10668) = *a2;
  *(_DWORD *)(a1[9] + 10672) = a2[1];
  *(_DWORD *)(a1[9] + 10676) = a2[2];
  *(_DWORD *)(a1[9] + 10680) = a2[3];
  *(_DWORD *)(a1[9] + 10684) = a2[4];
  *(_DWORD *)(a1[9] + 10688) = a2[5];
  *(_DWORD *)(a1[9] + 10692) = a2[6];
  *(_DWORD *)(a1[9] + 10696) = a2[7];
  *(_DWORD *)(a1[9] + 10700) = a2[8];
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v8, "[dk] %s@%d:APPLE80211_IOC_MWS_SCAN_FREQ_WIFI_ENH freqIndex = %d, 2g_bitmap=0x%X, 5g_bitmap_low=0x%X, 5g_bitmap_mid=0x%X, 5g_bitmap_high=0x%X\n", "setMWS_SCAN_FREQ_WIFI_ENH", 61861, a2[9], *a2, a2[1], a2[2], a2[3]);
    }
  }
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      unsigned __int16 v9 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v9, "[dk] %s@%d:APPLE80211_IOC_MWS_SCAN_FREQ_WIFI_ENH unii5_bitmap_low=0x%X, unii5_bitmap_high=0x%X, unii6_bitmap=0x%X, unii7_bitmap=0x%X, unii8_bitmap=0x%X\n", "setMWS_SCAN_FREQ_WIFI_ENH", 61863, a2[4], a2[5], a2[6], a2[7], a2[8]);
    }
  }
  uint64_t v4 = a1[9] + 10664;
  int v5 = *(uint64_t (**)(void *, uint64_t))(*a1 + 1472);
  return v5(a1, v4);
}

uint64_t AppleBCMWLANCore::setMWS_SCAN_FREQ_MODE_WIFI_ENH(void *a1, _DWORD *a2)
{
  if (!a2) {
    return 3758097084;
  }
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v7, "[dk] %s@%d:Got APPLE80211_IOC_MWS_SCAN_FREQ_MODE_WIFI_ENH indication\n", "setMWS_SCAN_FREQ_MODE_WIFI_ENH", 61879);
    }
  }
  *(_DWORD *)(a1[9] + 10664) = a2[9];
  *(_DWORD *)(a1[9] + 10668) = a2[1];
  *(_DWORD *)(a1[9] + 10672) = a2[2];
  *(_DWORD *)(a1[9] + 10676) = a2[3];
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v8, "[dk] %s@%d:APPLE80211_IOC_MWS_SCAN_FREQ_MODE_WIFI_ENH freqIndex = %d, 5g_bitmap_low=0x%X, 5g_bitmap_mid=0x%X, 5g_bitmap_high=0x%X\n", "setMWS_SCAN_FREQ_MODE_WIFI_ENH", 61887, a2[9], a2[1], a2[2], a2[3]);
    }
  }
  uint64_t v4 = a1[9] + 10664;
  int v5 = *(uint64_t (**)(void *, uint64_t))(*a1 + 1480);
  return v5(a1, v4);
}

uint64_t AppleBCMWLANCore::setMWS_CONDITION_ID_BITMAP_WIFI_ENH(void *a1, uint64_t a2)
{
  if (!a2) {
    return 3758097084;
  }
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v7, "[dk] %s@%d:Got APPLE80211_IOC_MWS_CONDITION_ID_BITMAP_WIFI_ENH indication\n", "setMWS_CONDITION_ID_BITMAP_WIFI_ENH", 61902);
    }
  }
  *(unsigned char *)(a1[9] + 10704) = *(unsigned char *)(a2 + 36);
  *(_DWORD *)(a1[9] + 10552) = *(_DWORD *)a2;
  *(_DWORD *)(a1[9] + 10556) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1[9] + 10560) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1[9] + 10564) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1[9] + 10568) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1[9] + 10572) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1[9] + 10576) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1[9] + 10580) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1[9] + 10584) = *(_DWORD *)(a2 + 32);
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v8, "[dk] %s@%d:APPLE80211_IOC_MWS_CONDITION_ID_BITMAP_WIFI_ENH conditionId = %d, 2g_bitmap=0x%X, 5g_bitmap_low=0x%X, 5g_bitmap_mid=0x%X, 5g_bitmap_high=0x%X\n", "setMWS_CONDITION_ID_BITMAP_WIFI_ENH", 61915, *(unsigned __int8 *)(a2 + 36), *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 12));
    }
  }
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      unsigned __int16 v9 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v9, "[dk] %s@%d:APPLE80211_IOC_MWS_CONDITION_ID_BITMAP_WIFI_ENH unii5_bitmap_low=0x%X, unii5_bitmap_high=0x%X, unii6_bitmap=0x%X, unii7_bitmap=0x%X, unii8_bitmap=0x%X\n", "setMWS_CONDITION_ID_BITMAP_WIFI_ENH", 61917, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 32));
    }
  }
  uint64_t v4 = a1[9] + 10552;
  int v5 = *(uint64_t (**)(void *, uint64_t))(*a1 + 1488);
  return v5(a1, v4);
}

uint64_t AppleBCMWLANCore::setMWS_ANTENNA_SELECTION_WIFI_ENH(void *a1, unsigned __int16 *a2)
{
  if (!a2) {
    return 3758097084;
  }
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v8, "[dk] %s@%d:Got APPLE80211_IOC_MWS_ANTENNA_SELECTION_WIFI_ENH indication\n", "setMWS_ANTENNA_SELECTION_WIFI_ENH", 61932);
    }
  }
  uint64_t v4 = 0;
  *(_WORD *)(a1[9] + 10480) = *((_DWORD *)a2 + 4);
  do
  {
    *(_WORD *)(a1[9] + v4 * 2 + 10482) = a2[v4];
    ++v4;
  }
  while (v4 != 8);
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      unsigned __int16 v9 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v9, "[dk] %s@%d:APPLE80211_IOC_MWS_ANTENNA_SELECTION_WIFI_ENH wifiBand = %d, AntSel[0]=0x%X, AntSel[1]=0x%X, AntSel[2]=0x%X, AntSel[3]=0x%X\n", "setMWS_ANTENNA_SELECTION_WIFI_ENH", 61942, *((_DWORD *)a2 + 4), *a2, a2[1], a2[2], a2[3]);
    }
  }
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      OSStringPtr v10 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v10, "[dk] %s@%d:APPLE80211_IOC_MWS_ANTENNA_SELECTION_WIFI_ENH AntSel[4]=0x%X, AntSel[5]=0x%X, AntSel[6]=0x%X, AntSel[7]=0x%X\n", "setMWS_ANTENNA_SELECTION_WIFI_ENH", 61944, a2[4], a2[5], a2[6], a2[7]);
    }
  }
  uint64_t v5 = a1[9] + 10480;
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t))(*a1 + 1312);
  return v6(a1, v5);
}

uint64_t AppleBCMWLANCore::setWCL_REASSOC(uint64_t a1, unsigned __int16 *a2)
{
  return AppleBCMWLANNetAdapter::sendReassocCommand(*(AppleBCMWLANCore ****)(*(void *)(a1 + 72) + 5600), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setWCL_REASSOC(uint64_t a1, unsigned __int16 *a2)
{
  return AppleBCMWLANNetAdapter::sendReassocCommand(*(AppleBCMWLANCore ****)(*(void *)(a1 + 8) + 5600), a2);
}

uint64_t AppleBCMWLANCore::setWCL_LEGACY_ROAM_PROFILE_CONFIG(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANRoamAdapter::setLEGACY_ROAM_PROFILE_CONFIG(*(void *)(*(void *)(a1 + 72) + 5576), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setWCL_LEGACY_ROAM_PROFILE_CONFIG(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANRoamAdapter::setLEGACY_ROAM_PROFILE_CONFIG(*(void *)(*(void *)(a1 + 8) + 5576), a2);
}

uint64_t AppleBCMWLANCore::setWCL_ROAM_PROFILE_CONFIG(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANRoamAdapter::setROAM_PROFILE_CONFIG(*(void *)(*(void *)(a1 + 72) + 5576), a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setWCL_ROAM_PROFILE_CONFIG(uint64_t a1, _DWORD *a2)
{
  return AppleBCMWLANRoamAdapter::setROAM_PROFILE_CONFIG(*(void *)(*(void *)(a1 + 8) + 5576), a2);
}

uint64_t AppleBCMWLANCore::setWCL_SCAN_ABORT(AppleBCMWLANCore *this, void *a2)
{
  return AppleBCMWLANScanAdapter::abortEventScan(*(AppleBCMWLANScanAdapter **)(*((void *)this + 9) + 5432));
}

uint64_t AppleBCMWLANCore::setWCL_ROAM_USER_CACHE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANRoamAdapter::cmdROAM_USER_CACHE(*(void *)(*(void *)(a1 + 72) + 5576), a2, 0);
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setWCL_ROAM_USER_CACHE(uint64_t a1, uint64_t a2)
{
  return AppleBCMWLANRoamAdapter::cmdROAM_USER_CACHE(*(void *)(*(void *)(a1 + 8) + 5576), a2, 0);
}

uint64_t AppleBCMWLANCore::setWCL_ULOFDMA_STATE(uint64_t a1, int *a2)
{
  if (a2) {
    return AppleBCMWLAN11axAdapter::configureUpLinkOFDMA(*(AppleBCMWLANCore ****)(*(void *)(a1 + 72) + 5584), *a2);
  }
  else {
    return 3758097084;
  }
}

uint64_t AppleBCMWLANCore::setWCL_ACTION_FRAME(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 3758097084;
  }
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v4 = *(AppleBCMWLANNetAdapter **)(v3 + 5600);
  uint64_t v5 = (ether_addr *)(a2 + 8);
  uint64_t v6 = (unsigned __int8 *)(a2 + 16);
  unsigned int v7 = *(unsigned __int16 *)(a2 + 14);
  int v8 = *(_DWORD *)(a2 + 4);
  int v9 = *(_DWORD *)a2;
  if (*(_DWORD *)(v3 + 780) > 0x14u) {
    return AppleBCMWLANNetAdapter::sendActionFrameV2(v4, v5, 0, 0, v6, v7, v8, v9);
  }
  else {
    return AppleBCMWLANNetAdapter::sendActionFrame(v4, v5, 0, 0, v6, v7, v8, v9);
  }
}

uint64_t AppleBCMWLANCore::getWCL_LOW_LATENCY_INFO_STATS(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 3758097084;
  }
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(a1 + 72) + 208);
  uint64_t v5 = (_DWORD *)(a2 + 16);
  for (uint64_t i = 2273; i != 2277; ++i)
  {
    *uint64_t v5 = (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 72) + 11304) + 592))(*(void *)(*(void *)(a1 + 72) + 11304), (i + 31));
    *(v5 - 4) = *(void *)(*(void *)(a1 + 72) + 8 * i);
    ++v5;
  }
  int v7 = 0;
  *(_DWORD *)(a2 + 52) = 0;
  uint64_t v8 = 68 * v4 + 30268;
  uint64_t v9 = 8;
  do
  {
    v7 += *(_DWORD *)(*(void *)(a1 + 72) + v8) + *(_DWORD *)(*(void *)(a1 + 72) + v8 - 32);
    *(_DWORD *)(a2 + 52) = v7;
    v8 += 4;
    --v9;
  }
  while (v9);
  uint64_t result = 0;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(*(void *)(a1 + 72) + 8 * v4 + 29816);
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(*(void *)(a1 + 72) + 8 * v4 + 29820);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(*(void *)(a1 + 72) + 30512);
  *(_DWORD *)(a2 + 44) = *(_DWORD *)(*(void *)(a1 + 72) + 30516);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(*(void *)(a1 + 72) + 30776);
  unsigned int v11 = *(unsigned __int16 *)(*(void *)(a1 + 72) + 30826);
  if (v11 >= 0x65) {
    LOWORD(v11) = 0;
  }
  *(_WORD *)(a2 + 56) = v11;
  long long v12 = *(_OWORD *)(*(void *)(a1 + 72) + 30836);
  long long v13 = *(_OWORD *)(*(void *)(a1 + 72) + 30852);
  long long v14 = *(_OWORD *)(*(void *)(a1 + 72) + 30868);
  *(_OWORD *)(a2 + 108) = *(_OWORD *)(*(void *)(a1 + 72) + 30884);
  *(_OWORD *)(a2 + 92) = v14;
  *(_OWORD *)(a2 + 76) = v13;
  *(_OWORD *)(a2 + 60) = v12;
  return result;
}

uint64_t AppleBCMWLANCore::setOS_FEATURE_FLAGS(AppleBCMWLANCore *a1, void *a2)
{
  uint64_t v2 = 3758097112;
  if (!a2) {
    return 3758097084;
  }
  if (!AppleBCMWLANCore::isRejectingCommands(a1))
  {
    *(void *)(*((void *)a1 + 9) + 17352) = *a2;
    if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 80))
    {
      uint64_t v6 = *((void *)a1 + 9);
      if (*(unsigned char *)(v6 + 17352)) {
        int v7 = *(_DWORD *)(v6 + 1108);
      }
      else {
        int v7 = 0;
      }
      *(_DWORD *)(v6 + 1104) = v7;
      if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
      {
        (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (CCLogStream::shouldLog())
        {
          __int16 v25 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
          CCLogStream::logAlert(v25, "[dk] %s@%d:LBT Feature flag: 0x%llx\n", "setOS_FEATURE_FLAGS", 62095, *(void *)(*((void *)a1 + 9) + 17352));
        }
      }
      AppleBCMWLANCore::setLteCoexLBTMode(a1);
    }
    *(unsigned char *)(*((void *)a1 + 9) + 29920) = (*(unsigned char *)(*((void *)a1 + 9) + 17352) & 2) != 0;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        long long v14 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (*(unsigned char *)(*((void *)a1 + 9) + 29920)) {
          uint64_t v15 = "Enabled";
        }
        else {
          uint64_t v15 = "Disabled";
        }
        CCLogStream::logAlert(v14, "[dk] %s@%d:WiFi LQM CrashTracer Feature flag %s\n", "setOS_FEATURE_FLAGS", 62100, v15);
      }
    }
    AppleBCMWLANCore::reportLQMCrashTracerFeatureFlag(a1);
    *(unsigned char *)(*((void *)a1 + 9) + 29925) = *(unsigned char *)(*((void *)a1 + 9) + 17353) & 1;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        OSStringPtr v16 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (*(unsigned char *)(*((void *)a1 + 9) + 29925)) {
          uint64_t v17 = "Enabled";
        }
        else {
          uint64_t v17 = "Disabled";
        }
        CCLogStream::logAlert(v16, "[dk] %s@%d:WiFi ViVODatapath Tuning Feature flag %s\n\n", "setOS_FEATURE_FLAGS", 62105, v17);
      }
    }
    if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 89)
      && (IO80211BssManager::isAssociated(*(IO80211BssManager **)(*((void *)a1 + 9) + 5440)) & 1) == 0)
    {
      AppleBCMWLANCore::cfgAmpduWindowSize(a1);
    }
    *(_DWORD *)(*((void *)a1 + 9) + 31032) = (*(_DWORD *)(*((void *)a1 + 9) + 17352) >> 23) & 1;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v18 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        CCLogStream::logAlert(v18, "[dk] %s@%d:Dynamic RTS Algorithm Setting: enable %u, p95-latency-th = %u, tx-per-th = %u\n", "setOS_FEATURE_FLAGS", 62112, *(_DWORD *)(*((void *)a1 + 9) + 31032), *(_DWORD *)(*((void *)a1 + 9) + 31028), *(_DWORD *)(*((void *)a1 + 9) + 31024));
      }
    }
    int IsBitSet = AppleBCMWLANCore::featureFlagIsBitSet(a1, 101);
    uint64_t v9 = *((void *)a1 + 9);
    if (IsBitSet)
    {
      int v10 = (*(void *)(v9 + 17352) & 0x1000000) != 0 ? 1 : 2;
      if (*(unsigned __int8 *)(v9 + 31036) != v10)
      {
        *(unsigned char *)(v9 + 31036) = v10;
        AppleBCMWLANCore::enableObssMitigation(a1, *(unsigned __int8 *)(*((void *)a1 + 9) + 31036));
        uint64_t v9 = *((void *)a1 + 9);
      }
    }
    *(unsigned char *)(v9 + 29926) = (*(_DWORD *)(v9 + 17352) & 0x200) != 0;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v19 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (*(unsigned char *)(*((void *)a1 + 9) + 29926)) {
          int v20 = "enabled";
        }
        else {
          int v20 = "disabled";
        }
        CCLogStream::logAlert(v19, "[dk] %s@%d:DNS symptoms feature flag %s\n", "setOS_FEATURE_FLAGS", 62124, v20);
      }
    }
    *(unsigned char *)(*((void *)a1 + 9) + 29927) = 1;
    *(unsigned char *)(*((void *)a1 + 9) + 29922) = (*(_DWORD *)(*((void *)a1 + 9) + 17352) & 0x80000) != 0;
    *(unsigned char *)(*((void *)a1 + 9) + 29937) = (*(_DWORD *)(*((void *)a1 + 9) + 17352) & 0x2000) != 0;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v21 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (*(unsigned char *)(*((void *)a1 + 9) + 29937)) {
          __int16 v22 = "Enabled";
        }
        else {
          __int16 v22 = "Disabled";
        }
        CCLogStream::logAlert(v21, "[dk] %s@%d:WiFi-QoS: Feature flag %s\n", "setOS_FEATURE_FLAGS", 62136, v22);
      }
    }
    if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 95)) {
      AppleBCMWLANCore::initQoSMgmtMSCS(a1);
    }
    *(unsigned char *)(*((void *)a1 + 9) + 29928) = (*(_DWORD *)(*((void *)a1 + 9) + 17352) & 0x1000) != 0;
    AppleBCMWLANCore::initialize6GCapabilities(a1);
    *(unsigned char *)(*((void *)a1 + 9) + 29936) = (*(_DWORD *)(*((void *)a1 + 9) + 17352) & 0x8000) != 0;
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        OSStringPtr v23 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
        if (*(unsigned char *)(*((void *)a1 + 9) + 29936)) {
          uint64_t v24 = "Enabled";
        }
        else {
          uint64_t v24 = "Disabled";
        }
        CCLogStream::logAlert(v23, "[dk] %s@%d:P2P Optimization For Ultra Low Latency Realtime Infra Feature flag %s\n", "setOS_FEATURE_FLAGS", 62145, v24);
      }
    }
    AppleBCMWLANCore::reportP2PForULLRTInfraFeatureFlag(a1);
    *(unsigned char *)(*((void *)a1 + 9) + 29942) = *(unsigned char *)(*((void *)a1 + 9) + 17354) & 1;
    *(unsigned char *)(*((void *)a1 + 9) + 29941) = (*(_DWORD *)(*((void *)a1 + 9) + 17352) & 0x4000) != 0;
    if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 117)
      && (*(unsigned char *)(*((void *)a1 + 9) + 17355) & 2) != 0)
    {
      AppleBCMWLANCore::configureScanForwardToAOP(a1, 1);
    }
    if (AppleBCMWLANCore::featureFlagIsBitSet(a1, 120)
      && (*(unsigned char *)(*((void *)a1 + 9) + 17355) & 4) != 0)
    {
      unsigned int v11 = a1;
      int v12 = 1;
    }
    else
    {
      if (!AppleBCMWLANCore::featureFlagIsBitSet(a1, 120)) {
        return 0;
      }
      unsigned int v11 = a1;
      int v12 = 0;
    }
    AppleBCMWLANCore::configureFigaro5GTDDSupport(v11, v12);
    return 0;
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      CCLogStream::logAlert(v5, "[dk] %s@%d: rejecting OS_FEATURE_FLAGS\n", "setOS_FEATURE_FLAGS", 62085);
    }
  }
  return v2;
}

uint64_t AppleBCMWLANCore::setDHCP_RENEWAL_DATA(void *a1, unsigned char *a2)
{
  if (!a2) {
    return 3758097084;
  }
  *(unsigned char *)(a1[9] + 6738) = *a2 != 0;
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 1848))(a1);
  if (result)
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      if (*(unsigned char *)(a1[9] + 6738)) {
        uint64_t v5 = "true";
      }
      else {
        uint64_t v5 = "false";
      }
      CCLogStream::logAlert(v4, "[dk] %s@%d:Active during sleep supported (%s)\n", "setDHCP_RENEWAL_DATA", 62172, v5);
      return 0;
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::setBATTERY_POWERSAVE_CONFIG(AppleBCMWLANCore *a1, int *a2)
{
  if (!a2) {
    return 3758097084;
  }
  int v3 = *a2;
  int v7 = *a2;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (v3 == 1) {
        uint64_t v6 = "Enabled";
      }
      else {
        uint64_t v6 = "Disabled";
      }
      CCLogStream::logNoticeIf(v5, 0x20uLL, "[dk] %s@%d:MIMO_PS: Battery Save Mode = %s  \n", "setBATTERY_POWERSAVE_CONFIG", 62210, v6);
    }
  }
  AppleBCMWLANCore::setBatterySaveModeConfiguration(a1, &v7);
  return 0;
}

uint64_t AppleBCMWLANCore::setMIMO_CONFIG(AppleBCMWLANCore *a1, int *a2)
{
  if (!a2) {
    return 3758097084;
  }
  int v3 = *a2;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (v3) {
        uint64_t v6 = "UnLocked, Can Switch to MIMO";
      }
      else {
        uint64_t v6 = "LOCKED, Can Switch to SISO";
      }
      CCLogStream::logNoticeIf(v5, 0x20uLL, "[dk] %s@%d:MIMO_PS: Device %s  Mode\n", "setMIMO_CONFIG", 62227, v6);
    }
  }
  AppleBCMWLANCore::setMIMOPowerSaveProperties(a1);
  return 0;
}

uint64_t AppleBCMWLANCore::getBGScanAdapter(AppleBCMWLANCore *this)
{
  return *(void *)(*((void *)this + 9) + 5504);
}

uint64_t AppleBCMWLANCore::setPOWER_PROFILE(void *a1, _DWORD *a2)
{
  if (!a2) {
    return 3758097084;
  }
  *(_DWORD *)(a1[9] + 10740) = *a2;
  return (*(uint64_t (**)(void))(*a1 + 1272))();
}

uint64_t AppleBCMWLANCore::setHEARTBEAT(AppleBCMWLANCore *this, void *a2)
{
  if ((*(unsigned char *)(*((void *)this + 9) + 10385) & 2) != 0) {
    return 3758097084;
  }
  AppleBCMWLANCore::heartBeatHandler(this);
  return 0;
}

uint64_t AppleBCMWLANCore::setINTERFACE_SETTING(uint64_t a1, unsigned char *a2)
{
  if (!a2) {
    return 3758097084;
  }
  uint64_t result = 0;
  *(unsigned char *)(*(void *)(a1 + 72) + 6739) = *a2 != 0;
  return result;
}

uint64_t AppleBCMWLANCore::setBYPASS_TX_POWER_CAP(AppleBCMWLANCore *a1, unsigned char *a2)
{
  if (!a2) {
    return 3758097084;
  }
  *(unsigned char *)(*((void *)a1 + 9) + 19637) = *a2 != 0;
  AppleBCMWLANCore::sendTxPowerCapBypassToFirmware(a1);
  return 0;
}

uint64_t AppleBCMWLANCore::setFACETIME_WIFICALLING_PARAMS(AppleBCMWLANCore *a1, int *a2)
{
  if (!a2) {
    return 3758097084;
  }
  int v3 = *a2;
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      if (v3 == 1) {
        uint64_t v6 = "Started";
      }
      else {
        uint64_t v6 = "Terminated";
      }
      CCLogStream::logInfo(v5, "[dk] %s@%d:FaceTime/WiFi Call = %s\n", "setFACETIME_WIFICALLING_PARAMS", 62340, v6);
    }
  }
  AppleBCMWLANCore::setWiFiCallPolicies(a1);
  return 0;
}

uint64_t AppleBCMWLANCore::setIPV4_PARAMS(AppleBCMWLANCore *this, int *a2)
{
  if (!a2) {
    return 3758097084;
  }
  uint64_t v4 = *((void *)this + 9);
  if (*(void *)(v4 + 11304))
  {
    IO80211InfraInterface::setIPv4Params();
    uint64_t v4 = *((void *)this + 9);
  }
  int v5 = *a2;
  *(_DWORD *)(v4 + 9504) = a2[1];
  *(_DWORD *)(*((void *)this + 9) + 9496) = v5;
  *(_DWORD *)(*((void *)this + 9) + 9500) = 0;
  AppleBCMWLANCore::handleIPv4AddressNotificationGated(this, a2);
  uint64_t v7 = *((void *)this + 9);
  uint64_t v8 = *(void *)(v7 + 11312);
  if (v8)
  {
    AppleBCMWLANProximityInterface::setIPv4Addr(v8, *(_DWORD *)(v7 + 9496));
    uint64_t v7 = *((void *)this + 9);
  }
  __int16 v9 = *((_WORD *)a2 + 6);
  *(_DWORD *)(v7 + 9508) = a2[2];
  *(_WORD *)(v7 + 9512) = v9;
  uint64_t v10 = *((void *)this + 9);
  if (*(_DWORD *)(v10 + 9504))
  {
    if (*(_DWORD *)(v10 + 9496)) {
      AppleBCMWLANCore::handleKeepaliveDataNotificationGated(this, v6);
    }
  }
  return 0;
}

uint64_t AppleBCMWLANCore::setWCL_LIMITED_AGGREGATION(uint64_t a1, int *a2)
{
  if (a2) {
    return AppleBCMWLANNetAdapter::setLimitedAggregation(*(AppleBCMWLANCore ****)(*(void *)(a1 + 72) + 5600), *a2);
  }
  else {
    return 3758097084;
  }
}

uint64_t AppleBCMWLANCore::setWCL_BCN_MUTE_CONFIG(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return AppleBCMWLANNetAdapter::configureBeaconMitigationParams(*(AppleBCMWLANCore ****)(*(void *)(a1 + 72) + 5600), *(_WORD *)a2, *(unsigned char *)(a2 + 2), *(unsigned char *)(a2 + 3));
  }
  else {
    return 3758097084;
  }
}

uint64_t AppleBCMWLANCore::setDUAL_POWER_MODE(AppleBCMWLANCore *this, _DWORD *a2)
{
  if (!a2) {
    return 3758097084;
  }
  int v3 = a2[1];
  *(_DWORD *)(*((void *)this + 9) + 19628) = *a2;
  *(_DWORD *)(*((void *)this + 9) + 19632) = v3;
  if (*(_DWORD *)(*((void *)this + 9) + 19628) != -1
    && *(_DWORD *)(*((void *)this + 9) + 19632) != -1
    && AppleBCMWLANCore::isFourRowPowerTableSupported(this))
  {
    *(unsigned char *)(*((void *)this + 9) + 19636) = 1;
    AppleBCMWLANCore::setTxHighCapTimeout(this, 35);
  }
  AppleBCMWLANCore::setTxPowerCapState((uint64_t)this);
  return 0;
}

uint64_t AppleBCMWLANCore::setEAP_FILTER_CONFIG(void *a1, _DWORD *a2)
{
  if (!a2) {
    return 3758097084;
  }
  *(_DWORD *)(a1[9] + 19640) = *a2;
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 1848))(a1);
  if (result)
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v4 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      if (*(_DWORD *)(a1[9] + 19640)) {
        int v5 = "enabled";
      }
      else {
        int v5 = "disabled";
      }
      CCLogStream::logAlert(v4, "[dk] %s@%d:WoWEapolFilterEnable is %s\n", "setEAP_FILTER_CONFIG", 62496, v5);
      return 0;
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::setWCL_WNM_OPS(uint64_t a1, unsigned char *a2)
{
  if (a2) {
    return AppleBCMWLANWnmAdapter::configureWnmFeatures(*(AppleBCMWLANWnmAdapter **)(*(void *)(a1 + 72) + 5560), a2);
  }
  else {
    return 3758097084;
  }
}

uint64_t AppleBCMWLANCore::setWCL_WNM_OFFLOAD(uint64_t a1, unsigned char *a2)
{
  if (a2) {
    return AppleBCMWLANWnmAdapter::configureWnmOffloadFeatures(*(AppleBCMWLANWnmAdapter **)(*(void *)(a1 + 72) + 5560), a2);
  }
  else {
    return 3758097084;
  }
}

uint64_t AppleBCMWLANCore::setCONGESTION_CTRL_IND(void *a1, unsigned char *a2)
{
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      int v5 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      if (*a2) {
        uint64_t v6 = "true";
      }
      else {
        uint64_t v6 = "false";
      }
      CCLogStream::logInfo(v5, "[dk] %s@%d:[Traffic Engineering]: Congestion Control State = (%s)\n", "setCONGESTION_CTRL_IND", 62575, v6);
    }
  }
  *(unsigned char *)(a1[9] + 35146) = *a2 != 0;
  return 0;
}

uint64_t AppleBCMWLANCore::setIPV6_PARAMS(void *a1, unsigned int *a2)
{
  if (a2 && *(void *)(a1[9] + 11304)) {
    IO80211InfraInterface::setIPv6Params();
  }
  unsigned int v4 = *a2;
  if (*a2 >= 0xA) {
    unsigned int v4 = 10;
  }
  if (v4)
  {
    uint64_t v5 = 0;
    do
    {
      *(_DWORD *)(a1[9] + v5 * 4 + 9536) = a2[v5 + 1];
      v5 += 4;
    }
    while (4 * v4 != v5);
  }
  uint64_t v6 = -160;
  do
  {
    *(_OWORD *)(a1[9] + v6 + 9952) = 0uLL;
    v6 += 16;
  }
  while (v6);
  *(_DWORD *)(a1[9] + 10048) = v4;
  *(unsigned char *)(a1[9] + 9520) = -2;
  *(unsigned char *)(a1[9] + 9521) = 0x80;
  uint64_t v7 = a1[9] + 9520;
  *(_WORD *)(v7 + 6) = 0;
  *(_DWORD *)(v7 + 2) = 0;
  *(void *)(a1[9] + 9528) = *(void *)(a1[9] + 9544);
  uint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 104))(a1);
  (*(void (**)(uint64_t, uint64_t (*)(AppleBCMWLANCore *, void *), uint64_t, void, void, void))(*(void *)v8 + 56))(v8, AppleBCMWLANCore::handleIPv6AddressNotificationGated, a1[9] + 9536, 0, 0, 0);
  return 0;
}

uint64_t AppleBCMWLANCore::setWCL_CONFIG_BG_MOTIONPROFILE(uint64_t a1, unsigned char *a2)
{
  if (a2) {
    return AppleBCMWLANBGScanAdapter::setWCL_CONFIG_BG_MOTIONPROFILE(*(AppleBCMWLANBGScanAdapter **)(*(void *)(a1 + 72) + 5504), a2);
  }
  else {
    return 3758097084;
  }
}

uint64_t AppleBCMWLANCore::setWCL_CONFIG_BG_NETWORK(uint64_t a1, unsigned __int8 *a2)
{
  if (a2) {
    return AppleBCMWLANBGScanAdapter::setWCL_CONFIG_BG_NETWORK(*(AppleBCMWLANCore ****)(*(void *)(a1 + 72) + 5504), a2);
  }
  else {
    return 3758097084;
  }
}

uint64_t AppleBCMWLANCore::setWCL_CONFIG_BGSCAN(uint64_t a1, unsigned char *a2)
{
  if (a2) {
    return AppleBCMWLANBGScanAdapter::setWCL_CONFIG_BGSCAN(*(AppleBCMWLANBGScanAdapter **)(*(void *)(a1 + 72) + 5504), a2);
  }
  else {
    return 3758097084;
  }
}

uint64_t AppleBCMWLANCore::setWCL_CONFIG_BG_PARAMS(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return AppleBCMWLANBGScanAdapter::setWCL_CONFIG_BG_PARAMS(*(AppleBCMWLANBGScanAdapter **)(*(void *)(a1 + 72) + 5504), a2);
  }
  else {
    return 3758097084;
  }
}

uint64_t AppleBCMWLANCore::getWCL_BGSCAN_CACHE_RESULT(uint64_t a1, unsigned int *a2)
{
  if (a2) {
    return AppleBCMWLANBGScanAdapter::getWCL_BGSCAN_CACHE_RESULT(*(void *)(*(void *)(a1 + 72) + 5504), a2);
  }
  else {
    return 3758097084;
  }
}

uint64_t AppleBCMWLANCore::setINFRA_ENUMERATED(uint64_t a1, unsigned char *a2)
{
  if (!a2) {
    return 3758097084;
  }
  if (*a2) {
    AppleBCMWLANCommander::deviceBootStationaryNotification(*(AppleBCMWLANCommander **)(*(void *)(a1 + 72) + 5416));
  }
  return 0;
}

uint64_t AppleBCMWLANCore::setLMTPC_CONFIG(AppleBCMWLANCore *a1, unsigned __int8 *a2)
{
  if (!a2) {
    return 3758097084;
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)a1 + 1848))(a1);
      CCLogStream::logAlert(v5, "[dk] %s@%d:Got APPLE80211_IOC_LMTPC_CONFIG indication\n", "setLMTPC_CONFIG", 62690);
    }
  }
  *(_DWORD *)(*((void *)a1 + 9) + 17644) = *a2;
  AppleBCMWLANCore::setLMTPC(a1);
  return 0;
}

uint64_t AppleBCMWLANCore::setTRAFFIC_ENG_PARAMS(uint64_t a1, uint64_t a2)
{
  uint64_t result = 3758097084;
  if (a2)
  {
    if (*(unsigned char *)(*(void *)(a1 + 72) + 29948)) {
      return 0;
    }
    else {
      return 3758097095;
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::setBTMRejectionAsyncCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 1848))(v4);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 1848))(v4);
        uint64_t v6 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 112))(v4, a3);
        return CCLogStream::logAlert(v5, "[dk] %s@%d:Setting wnm_bsstrans_rej callback failed: %s(%d)\n", "setBTMRejectionAsyncCallback", 62711, v6, a3);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANCore::setBTMRejection(AppleBCMWLANCore *this, int a2)
{
  BOOL v2 = a2 != 0;
  if (*(_DWORD *)(*((void *)this + 9) + 780) < 0xCu) {
    return 0;
  }
  if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
  {
    (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      CCLogStream::logAlert(v8, "[dk] %s@%d: Issuing wnm_bsstrans_rej (%d) to FW\n", "setBTMRejection", 62722, v2);
    }
  }
  uint64_t v4 = AppleBCMWLANCommander::sendIOVarSet(*(AppleBCMWLANCommander **)(*((void *)this + 9) + 5416), (uint64_t)"wnm_bsstrans_rej");
  if (v4)
  {
    if ((*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this))
    {
      (*(void (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(AppleBCMWLANCore *))(*(void *)this + 1848))(this);
        uint64_t v6 = (const char *)(*(uint64_t (**)(AppleBCMWLANCore *, uint64_t))(*(void *)this + 112))(this, v4);
        CCLogStream::logAlert(v5, "[dk] %s@%d: Error: cannot async set wnm_bsstrans_rej : ret %x: %s\n", "setBTMRejection", 62729, v4, v6);
      }
    }
  }
  return v4;
}

uint64_t AppleBCMWLANCore::setWCL_ASSOCIATED_SLEEP(void *a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)a2;
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logAlert(v7, "[dk] %s@%d:Enters for %d state\n", "setWCL_ASSOCIATED_SLEEP", 62748, v4);
    }
  }
  *(unsigned char *)(a1[9] + 8840) = 0;
  if (v4 > 1)
  {
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v10 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v10, "[dk] %s@%d:Exiting associated sleep\n");
      }
    }
  }
  else
  {
    *(unsigned char *)(a1[9] + 8840) = 1;
    *(unsigned char *)(a1[9] + 6736) = v4 == 1;
    if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v5, "[dk] %s@%d:Entering associated sleep for %s...\n");
      }
    }
  }
  *(_DWORD *)(a1[9] + 19640) = *(unsigned __int8 *)(a2 + 50);
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      if (*(_DWORD *)(a1[9] + 19640)) {
        __int16 v9 = "enabled";
      }
      else {
        __int16 v9 = "disabled";
      }
      CCLogStream::logAlert(v8, "[dk] %s@%d:Eapol filter - %s", "setWCL_ASSOCIATED_SLEEP", 62760, v9);
    }
  }
  AppleBCMWLANPowerStateAdapter::configureBeaconSOI(*(AppleBCMWLANPowerStateAdapter **)(a1[9] + 35848), (int *)(a2 + 4));
  AppleBCMWLANPowerStateAdapter::configureDataSOI(*(AppleBCMWLANPowerStateAdapter **)(a1[9] + 35848), (_DWORD *)(a2 + 32));
  AppleBCMWLANPowerStateAdapter::configureExcessPMAlert(*(AppleBCMWLANPowerStateAdapter **)(a1[9] + 35848), a2 + 80);
  AppleBCMWLANPowerStateAdapter::configureRoamScanForAssociatedSleep(*(AppleBCMWLANPowerStateAdapter **)(a1[9] + 35848), a2 + 68, *(unsigned __int8 *)(a1[9] + 8840));
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setWCL_ASSOCIATED_SLEEP(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t AppleBCMWLANCore::setWCL_SOI_CONFIG(uint64_t a1, int *a2)
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::setWCL_SOI_CONFIG(uint64_t a1, int *a2)
{
  return 0;
}

uint64_t AppleBCMWLANCore::getPLATFORM_CONFIG(void *a1, uint64_t a2, unsigned __int8 *a3)
{
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      int v12 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logNotice(v12, "[dk] %s@%d:Enter: \n", "getPLATFORM_CONFIG", 62785);
    }
  }
  *(_DWORD *)(a3 + 3) = 0;
  *(_DWORD *)a3 = 0;
  uint64_t v5 = a1[9];
  uint64_t v6 = *(AppleBCMWLANConfigManager **)(v5 + 5472);
  if (v6)
  {
    *a3 = AppleBCMWLANConfigManager::is6GSupportedByPlatform(v6);
    a3[1] = AppleBCMWLANConfigManager::isAntennaInEfficiencyMitigationSupported(*(AppleBCMWLANConfigManager **)(a1[9] + 5472));
    a3[2] = AppleBCMWLANConfigManager::isExternallyPoweredPlatform(*(AppleBCMWLANConfigManager **)(a1[9] + 5472));
    a3[3] = AppleBCMWLANConfigManager::isAdaptiveRoamingSupported(*(AppleBCMWLANConfigManager **)(a1[9] + 5472));
    a3[4] = AppleBCMWLANConfigManager::isDFRTSEnabled(*(AppleBCMWLANConfigManager **)(a1[9] + 5472));
    a3[6] = AppleBCMWLANConfigManager::isMIMOPSSupported(*(AppleBCMWLANConfigManager **)(a1[9] + 5472));
  }
  else
  {
    uint64_t v18 = 0;
    if (acquireProperty<OSBoolean>(*(IOService **)(v5 + 5400), "wlan.6GHz.supported", &v18, 1uLL, "IOService"))
    {
      if (v18 == kOSBooleanTrue)
      {
        *a3 = 1;
        if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
        {
          (*(void (**)(void *))(*a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            long long v14 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
            CCLogStream::logAlert(v14, "[dk] %s@%d:WiFiRoam : 6GHz supported for this platform, %d\n");
          }
        }
      }
      else if (v18 == kOSBooleanFalse)
      {
        *a3 = 0;
        if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
        {
          (*(void (**)(void *))(*a1 + 1848))(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t v7 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
            CCLogStream::logAlert(v7, "[dk] %s@%d:WiFiRoam : 6GHz support explicitly disabled via platform config, %d\n");
          }
        }
      }
      if (v18)
      {
        ((void (*)(OSMetaClassBase *))v18->release)(v18);
        uint64_t v18 = 0;
      }
    }
    else if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
    {
      (*(void (**)(void *))(*a1 + 1848))(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
        CCLogStream::logAlert(v8, "[dk] %s@%d:WiFiRoam : 6GHz support defaults to disable for platform, %d\n", "getPLATFORM_CONFIG", 62812, *a3);
      }
    }
    uint64_t v17 = 0;
    if (acquireProperty<OSBoolean>(*(IOService **)(a1[9] + 5400), "wlan.ant-inefficiency-mitigation.enabled", &v17, 1uLL, "IOService"))
    {
      __int16 v9 = v17;
      if (v17 == kOSBooleanTrue) {
        a3[1] = 1;
      }
      if (v9)
      {
        ((void (*)(OSMetaClassBase *))v9->release)(v9);
        uint64_t v17 = 0;
      }
    }
    OSStringPtr v16 = 0;
    if (checkAcquireDataPropertyNotEmpty(*(IOService **)(a1[9] + 5400), "wlan.externallypowered", &v16, 0, 1uLL, "IOService"))
    {
      a3[2] = 1;
      if (v16)
      {
        ((void (*)(OSData *))v16->release)(v16);
        OSStringPtr v16 = 0;
      }
    }
    uint64_t v15 = 0;
    if (acquireProperty<OSBoolean>(*(IOService **)(a1[9] + 5400), "wlan.adaptiveroaming.enabled", &v15, 1uLL, "IOService"))
    {
      uint64_t v10 = v15;
      if (v15 == kOSBooleanTrue) {
        a3[3] = 1;
      }
      if (v10)
      {
        ((void (*)(OSMetaClassBase *))v10->release)(v10);
        uint64_t v15 = 0;
      }
    }
    if (checkAcquireDataPropertyNotEmpty(*(IOService **)(a1[9] + 5400), "wlan.dfrts", &v16, 8uLL, 1uLL, "IOService"))
    {
      OSData::getBytesNoCopy(v16, 0, 8uLL);
      a3[4] = 1;
      if (v16)
      {
        ((void (*)(OSData *))v16->release)(v16);
        OSStringPtr v16 = 0;
      }
    }
    if (checkPropertyExists(*(IOService **)(a1[9] + 5400), "wlan.mimo_ps.enabled", 1uLL, "IOService")) {
      a3[6] = 1;
    }
  }
  LODWORD(v18) = AppleBCMWLANUtil::getDTParameter32(*(IOService **)(a1[9] + 5400), (IOService *)"IOService", "wlan.ignore.mcast", 0);
  IOParseBootArgNumber("bcom.feature.pmmcast", &v18, 4);
  a3[5] = v18 != 0;
  if ((*(uint64_t (**)(void *))(*a1 + 1848))(a1))
  {
    (*(void (**)(void *))(*a1 + 1848))(a1);
    if (CCLogStream::shouldLog())
    {
      long long v13 = (CCLogStream *)(*(uint64_t (**)(void *))(*a1 + 1848))(a1);
      CCLogStream::logNotice(v13, "[dk] %s@%d:Exit: \n", "getPLATFORM_CONFIG", 62857);
    }
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANCore::getPLATFORM_CONFIG(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  return 0;
}

uint64_t AppleBCMWLANCore::getMDNS_OFFLOAD_CONFIG()
{
  return 3758097095;
}

uint64_t AppleBCMWLANCore::getPowerStateAdapter(AppleBCMWLANCore *this)
{
  return *(void *)(*((void *)this + 9) + 35848);
}

uint64_t AppleBCMWLANCore::setDYNAMIC_RSSI_WINDOW_CONFIG(AppleBCMWLANCore *a1, int *a2)
{
  if (a2) {
    return AppleBCMWLANCore::configureDynamicRssiWindow(a1, *a2);
  }
  else {
    return 3758097084;
  }
}

IO80211Controller *AppleBCMWLANCore::processScanForwardStats(IO80211Controller *result, uint64_t a2)
{
  BOOL v2 = result;
  if (a2)
  {
    if (*(_WORD *)(a2 + 4) == 6)
    {
      if (*(_WORD *)(a2 + 8) == 76)
      {
        unsigned int v4 = *(_DWORD *)(a2 + 26);
        unsigned int v5 = *(_DWORD *)(*((void *)result + 9) + 35864);
        BOOL v6 = v4 >= v5;
        unsigned int v7 = v4 - v5;
        if (!v6)
        {
          uint64_t result = (IO80211Controller *)(*(uint64_t (**)(IO80211Controller *))(*(void *)result + 1848))(result);
          if (result)
          {
            (*(void (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
            uint64_t result = (IO80211Controller *)CCLogStream::shouldLog();
            if (result)
            {
              long long v59 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
              uint64_t result = (IO80211Controller *)CCLogStream::logAlert(v59, "[dk] %s@%d:Overflow occurred in scan metric\n", "processScanForwardStats", 63019);
            }
          }
          unsigned int v7 = 0;
        }
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v78[12] = v8;
        long long v77 = v8;
        *(_OWORD *)long long v78 = v8;
        long long v76 = v8;
        unsigned int v75 = v7;
        unsigned int v9 = *(_DWORD *)(a2 + 30);
        uint64_t v10 = (_DWORD *)*((void *)v2 + 9);
        unsigned int v11 = v10[8967];
        BOOL v6 = v9 >= v11;
        unsigned int v12 = v9 - v11;
        if (v6)
        {
          LODWORD(v76) = v12;
        }
        else
        {
          uint64_t result = (IO80211Controller *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
          if (result)
          {
            (*(void (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
            uint64_t result = (IO80211Controller *)CCLogStream::shouldLog();
            if (result)
            {
              long long v60 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
              uint64_t result = (IO80211Controller *)CCLogStream::logAlert(v60, "[dk] %s@%d:Overflow occurred in scan metric\n", "processScanForwardStats", 63020);
            }
          }
          LODWORD(v76) = 0;
          uint64_t v10 = (_DWORD *)*((void *)v2 + 9);
        }
        unsigned int v13 = *(_DWORD *)(a2 + 34);
        unsigned int v14 = v10[8968];
        BOOL v6 = v13 >= v14;
        unsigned int v15 = v13 - v14;
        if (v6)
        {
          DWORD1(v76) = v15;
        }
        else
        {
          uint64_t result = (IO80211Controller *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
          if (result)
          {
            (*(void (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
            uint64_t result = (IO80211Controller *)CCLogStream::shouldLog();
            if (result)
            {
              long long v61 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
              uint64_t result = (IO80211Controller *)CCLogStream::logAlert(v61, "[dk] %s@%d:Overflow occurred in scan metric\n", "processScanForwardStats", 63021);
            }
          }
          DWORD1(v76) = 0;
          uint64_t v10 = (_DWORD *)*((void *)v2 + 9);
        }
        unsigned int v16 = *(_DWORD *)(a2 + 38);
        unsigned int v17 = v10[8969];
        BOOL v6 = v16 >= v17;
        unsigned int v18 = v16 - v17;
        if (v6)
        {
          DWORD2(v76) = v18;
        }
        else
        {
          uint64_t result = (IO80211Controller *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
          if (result)
          {
            (*(void (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
            uint64_t result = (IO80211Controller *)CCLogStream::shouldLog();
            if (result)
            {
              long long v62 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
              uint64_t result = (IO80211Controller *)CCLogStream::logAlert(v62, "[dk] %s@%d:Overflow occurred in scan metric\n", "processScanForwardStats", 63022);
            }
          }
          DWORD2(v76) = 0;
          uint64_t v10 = (_DWORD *)*((void *)v2 + 9);
        }
        unsigned int v19 = *(_DWORD *)(a2 + 42);
        unsigned int v20 = v10[8970];
        BOOL v6 = v19 >= v20;
        unsigned int v21 = v19 - v20;
        if (v6)
        {
          HIDWORD(v76) = v21;
        }
        else
        {
          uint64_t result = (IO80211Controller *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
          if (result)
          {
            (*(void (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
            uint64_t result = (IO80211Controller *)CCLogStream::shouldLog();
            if (result)
            {
              long long v63 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
              uint64_t result = (IO80211Controller *)CCLogStream::logAlert(v63, "[dk] %s@%d:Overflow occurred in scan metric\n", "processScanForwardStats", 63023);
            }
          }
          HIDWORD(v76) = 0;
          uint64_t v10 = (_DWORD *)*((void *)v2 + 9);
        }
        unsigned int v22 = *(_DWORD *)(a2 + 78);
        unsigned int v23 = v10[8971];
        BOOL v6 = v22 >= v23;
        unsigned int v24 = v22 - v23;
        if (v6)
        {
          LODWORD(v77) = v24;
        }
        else
        {
          uint64_t result = (IO80211Controller *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
          if (result)
          {
            (*(void (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
            uint64_t result = (IO80211Controller *)CCLogStream::shouldLog();
            if (result)
            {
              long long v64 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
              uint64_t result = (IO80211Controller *)CCLogStream::logAlert(v64, "[dk] %s@%d:Overflow occurred in scan metric\n", "processScanForwardStats", 63024);
            }
          }
          LODWORD(v77) = 0;
          uint64_t v10 = (_DWORD *)*((void *)v2 + 9);
        }
        unsigned int v25 = *(_DWORD *)(a2 + 46);
        unsigned int v26 = v10[8972];
        BOOL v6 = v25 >= v26;
        unsigned int v27 = v25 - v26;
        if (v6)
        {
          DWORD1(v77) = v27;
        }
        else
        {
          uint64_t result = (IO80211Controller *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
          if (result)
          {
            (*(void (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
            uint64_t result = (IO80211Controller *)CCLogStream::shouldLog();
            if (result)
            {
              long long v65 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
              uint64_t result = (IO80211Controller *)CCLogStream::logAlert(v65, "[dk] %s@%d:Overflow occurred in scan metric\n", "processScanForwardStats", 63025);
            }
          }
          DWORD1(v77) = 0;
          uint64_t v10 = (_DWORD *)*((void *)v2 + 9);
        }
        unsigned int v28 = *(_DWORD *)(a2 + 50);
        unsigned int v29 = v10[8973];
        BOOL v6 = v28 >= v29;
        unsigned int v30 = v28 - v29;
        if (v6)
        {
          DWORD2(v77) = v30;
        }
        else
        {
          uint64_t result = (IO80211Controller *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
          if (result)
          {
            (*(void (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
            uint64_t result = (IO80211Controller *)CCLogStream::shouldLog();
            if (result)
            {
              long long v66 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
              uint64_t result = (IO80211Controller *)CCLogStream::logAlert(v66, "[dk] %s@%d:Overflow occurred in scan metric\n", "processScanForwardStats", 63026);
            }
          }
          DWORD2(v77) = 0;
          uint64_t v10 = (_DWORD *)*((void *)v2 + 9);
        }
        unsigned int v31 = *(_DWORD *)(a2 + 54);
        unsigned int v32 = v10[8974];
        BOOL v6 = v31 >= v32;
        unsigned int v33 = v31 - v32;
        if (v6)
        {
          HIDWORD(v77) = v33;
        }
        else
        {
          uint64_t result = (IO80211Controller *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
          if (result)
          {
            (*(void (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
            uint64_t result = (IO80211Controller *)CCLogStream::shouldLog();
            if (result)
            {
              int v67 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
              uint64_t result = (IO80211Controller *)CCLogStream::logAlert(v67, "[dk] %s@%d:Overflow occurred in scan metric\n", "processScanForwardStats", 63027);
            }
          }
          HIDWORD(v77) = 0;
          uint64_t v10 = (_DWORD *)*((void *)v2 + 9);
        }
        unsigned int v34 = *(_DWORD *)(a2 + 58);
        unsigned int v35 = v10[8975];
        BOOL v6 = v34 >= v35;
        unsigned int v36 = v34 - v35;
        if (v6)
        {
          *(_DWORD *)long long v78 = v36;
        }
        else
        {
          uint64_t result = (IO80211Controller *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
          if (result)
          {
            (*(void (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
            uint64_t result = (IO80211Controller *)CCLogStream::shouldLog();
            if (result)
            {
              long long v68 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
              uint64_t result = (IO80211Controller *)CCLogStream::logAlert(v68, "[dk] %s@%d:Overflow occurred in scan metric\n", "processScanForwardStats", 63028);
            }
          }
          *(_DWORD *)long long v78 = 0;
          uint64_t v10 = (_DWORD *)*((void *)v2 + 9);
        }
        unsigned int v37 = *(_DWORD *)(a2 + 62);
        unsigned int v38 = v10[8976];
        BOOL v6 = v37 >= v38;
        unsigned int v39 = v37 - v38;
        if (v6)
        {
          *(_DWORD *)&v78[4] = v39;
        }
        else
        {
          uint64_t result = (IO80211Controller *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
          if (result)
          {
            (*(void (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
            uint64_t result = (IO80211Controller *)CCLogStream::shouldLog();
            if (result)
            {
              long long v69 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
              uint64_t result = (IO80211Controller *)CCLogStream::logAlert(v69, "[dk] %s@%d:Overflow occurred in scan metric\n", "processScanForwardStats", 63029);
            }
          }
          *(_DWORD *)&v78[4] = 0;
          uint64_t v10 = (_DWORD *)*((void *)v2 + 9);
        }
        unsigned int v40 = *(_DWORD *)(a2 + 66);
        unsigned int v41 = v10[8977];
        BOOL v6 = v40 >= v41;
        unsigned int v42 = v40 - v41;
        if (v6)
        {
          *(_DWORD *)&v78[8] = v42;
        }
        else
        {
          uint64_t result = (IO80211Controller *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
          if (result)
          {
            (*(void (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
            uint64_t result = (IO80211Controller *)CCLogStream::shouldLog();
            if (result)
            {
              long long v70 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
              uint64_t result = (IO80211Controller *)CCLogStream::logAlert(v70, "[dk] %s@%d:Overflow occurred in scan metric\n", "processScanForwardStats", 63030);
            }
          }
          *(_DWORD *)&v78[8] = 0;
          uint64_t v10 = (_DWORD *)*((void *)v2 + 9);
        }
        unsigned int v43 = *(_DWORD *)(a2 + 70);
        unsigned int v44 = v10[8978];
        BOOL v6 = v43 >= v44;
        unsigned int v45 = v43 - v44;
        if (v6)
        {
          *(_DWORD *)&v78[12] = v45;
        }
        else
        {
          uint64_t result = (IO80211Controller *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
          if (result)
          {
            (*(void (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
            uint64_t result = (IO80211Controller *)CCLogStream::shouldLog();
            if (result)
            {
              long long v71 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
              uint64_t result = (IO80211Controller *)CCLogStream::logAlert(v71, "[dk] %s@%d:Overflow occurred in scan metric\n", "processScanForwardStats", 63031);
            }
          }
          *(_DWORD *)&v78[12] = 0;
          uint64_t v10 = (_DWORD *)*((void *)v2 + 9);
        }
        unsigned int v46 = *(_DWORD *)(a2 + 74);
        unsigned int v47 = v10[8979];
        BOOL v6 = v46 >= v47;
        unsigned int v48 = v46 - v47;
        if (v6)
        {
          *(_DWORD *)&v78[16] = v48;
        }
        else
        {
          uint64_t result = (IO80211Controller *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
          if (result)
          {
            (*(void (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
            uint64_t result = (IO80211Controller *)CCLogStream::shouldLog();
            if (result)
            {
              long long v72 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
              uint64_t result = (IO80211Controller *)CCLogStream::logAlert(v72, "[dk] %s@%d:Overflow occurred in scan metric\n", "processScanForwardStats", 63032);
            }
          }
          *(_DWORD *)&v78[16] = 0;
          uint64_t v10 = (_DWORD *)*((void *)v2 + 9);
        }
        unsigned int v49 = *(_DWORD *)(a2 + 18);
        unsigned int v50 = v10[8980];
        BOOL v6 = v49 >= v50;
        unsigned int v51 = v49 - v50;
        if (v6)
        {
          *(_DWORD *)&v78[20] = v51;
        }
        else
        {
          uint64_t result = (IO80211Controller *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
          if (result)
          {
            (*(void (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
            uint64_t result = (IO80211Controller *)CCLogStream::shouldLog();
            if (result)
            {
              long long v73 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
              uint64_t result = (IO80211Controller *)CCLogStream::logAlert(v73, "[dk] %s@%d:Overflow occurred in scan metric\n", "processScanForwardStats", 63033);
            }
          }
          *(_DWORD *)&v78[20] = 0;
          uint64_t v10 = (_DWORD *)*((void *)v2 + 9);
        }
        unsigned int v52 = *(_DWORD *)(a2 + 22);
        unsigned int v53 = v10[8981];
        BOOL v6 = v52 >= v53;
        unsigned int v54 = v52 - v53;
        if (v6)
        {
          *(_DWORD *)&v78[24] = v54;
        }
        else
        {
          uint64_t result = (IO80211Controller *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
          if (result)
          {
            (*(void (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
            uint64_t result = (IO80211Controller *)CCLogStream::shouldLog();
            if (result)
            {
              long long v74 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
              uint64_t result = (IO80211Controller *)CCLogStream::logAlert(v74, "[dk] %s@%d:Overflow occurred in scan metric\n", "processScanForwardStats", 63034);
            }
          }
          *(_DWORD *)&v78[24] = 0;
          uint64_t v10 = (_DWORD *)*((void *)v2 + 9);
          unsigned int v52 = *(_DWORD *)(a2 + 22);
        }
        v10[8966] = *(_DWORD *)(a2 + 26);
        *(_DWORD *)(*((void *)v2 + 9) + 35868) = *(_DWORD *)(a2 + 30);
        *(_DWORD *)(*((void *)v2 + 9) + 35872) = *(_DWORD *)(a2 + 34);
        *(_DWORD *)(*((void *)v2 + 9) + 35876) = *(_DWORD *)(a2 + 38);
        *(_DWORD *)(*((void *)v2 + 9) + 35880) = *(_DWORD *)(a2 + 42);
        *(_DWORD *)(*((void *)v2 + 9) + 35884) = *(_DWORD *)(a2 + 78);
        *(_DWORD *)(*((void *)v2 + 9) + 35888) = *(_DWORD *)(a2 + 46);
        *(_DWORD *)(*((void *)v2 + 9) + 35892) = *(_DWORD *)(a2 + 50);
        *(_DWORD *)(*((void *)v2 + 9) + 35896) = *(_DWORD *)(a2 + 54);
        *(_DWORD *)(*((void *)v2 + 9) + 35900) = *(_DWORD *)(a2 + 58);
        *(_DWORD *)(*((void *)v2 + 9) + 35904) = *(_DWORD *)(a2 + 62);
        *(_DWORD *)(*((void *)v2 + 9) + 35908) = *(_DWORD *)(a2 + 66);
        *(_DWORD *)(*((void *)v2 + 9) + 35912) = *(_DWORD *)(a2 + 70);
        *(_DWORD *)(*((void *)v2 + 9) + 35916) = *(_DWORD *)(a2 + 74);
        *(_DWORD *)(*((void *)v2 + 9) + 35920) = *(_DWORD *)(a2 + 18);
        *(_DWORD *)(*((void *)v2 + 9) + 35924) = v52;
        if (*(void *)(*((void *)v2 + 9) + 11304))
        {
          if ((*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2))
          {
            (*(void (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
            if (CCLogStream::shouldLog())
            {
              long long v58 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
              CCLogStream::logInfo(v58, "[dk] %s@%d:Submitting new scan forward metrics\n", "processScanForwardStats", 63053);
            }
          }
          return (IO80211Controller *)IO80211Controller::postMessage(v2, *(IO80211SkywalkInterface **)(*((void *)v2 + 9) + 11304), 0xF0u, &v75, 0x40uLL, 1);
        }
      }
      else
      {
        uint64_t result = (IO80211Controller *)(*(uint64_t (**)(IO80211Controller *))(*(void *)result + 1848))(result);
        if (result)
        {
          (*(void (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
          uint64_t result = (IO80211Controller *)CCLogStream::shouldLog();
          if (result)
          {
            long long v57 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
            return (IO80211Controller *)CCLogStream::logAlert(v57, "[dk] %s@%d:Incorrect data in scan metrics received length %u expected %lu\n");
          }
        }
      }
    }
    else
    {
      uint64_t result = (IO80211Controller *)(*(uint64_t (**)(IO80211Controller *))(*(void *)result + 1848))(result);
      if (result)
      {
        (*(void (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
        uint64_t result = (IO80211Controller *)CCLogStream::shouldLog();
        if (result)
        {
          long long v56 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
          return (IO80211Controller *)CCLogStream::logAlert(v56, "[dk] %s@%d:Incorrect ID in scan metrics %u\n");
        }
      }
    }
  }
  else
  {
    uint64_t result = (IO80211Controller *)(*(uint64_t (**)(IO80211Controller *))(*(void *)result + 1848))(result);
    if (result)
    {
      (*(void (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
      uint64_t result = (IO80211Controller *)CCLogStream::shouldLog();
      if (result)
      {
        long long v55 = (CCLogStream *)(*(uint64_t (**)(IO80211Controller *))(*(void *)v2 + 1848))(v2);
        return (IO80211Controller *)CCLogStream::logAlert(v55, "[dk] %s@%d:NULL data in scan metrics\n");
      }
    }
  }
  return result;
}

IO80211Controller *AppleBCMWLANCore::scanForwardStatsAsyncCallBack(IO80211Controller *result, uint64_t a2, int a3, uint64_t *a4)
{
  if (!a3) {
    return AppleBCMWLANCore::processScanForwardStats(result, *a4);
  }
  return result;
}

AppleBCMWLANTimeTrace **AppleBCMWLANUtil::AutoreleasedTimeTrace::AutoreleasedTimeTrace(AppleBCMWLANTimeTrace **this, AppleBCMWLANTimeTrace *a2, int a3, int a4)
{
  BOOL v6 = (AppleBCMWLANTimeTrace *)AppleBCMWLANTimeTrace::withSize(a2, a3, a4);
  *this = v6;
  if (v6)
  {
    AppleBCMWLANTimeTrace::enable(v6, a4);
    AppleBCMWLANTimeTrace::reset(*this);
  }
  return this;
}

uint64_t IO80211BufferCursor::_asType<wl_roam_11kvr_bcn_rpt_req_v1>(uint64_t *a1, uint64_t a2, const char *a3)
{
  int v3 = &a3[a2];
  if (__CFADD__(a2, a3)) {
    return 0;
  }
  if ((unint64_t)a3 < 0x28) {
    return 0;
  }
  unint64_t v5 = a1[1];
  uint64_t result = 0;
  if ((unint64_t)v3 <= v5)
  {
    uint64_t v7 = *a1;
    uint64_t result = v7 + a2;
    if ((unint64_t)&v3[v7] < v7 + a2 || (unint64_t)a3 >> 32) {
      os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"The range of valid memory is too large to be represented by this type, or [begin, end) is not a well-formed range", a3);
    }
  }
  return result;
}

uint64_t IO80211BufferCursor::_asType<wl_roam_11kvr_bcn_rpt_resp_v1>(uint64_t *a1, uint64_t a2, const char *a3)
{
  int v3 = &a3[a2];
  if (__CFADD__(a2, a3)) {
    return 0;
  }
  if ((unint64_t)a3 < 0x2C) {
    return 0;
  }
  unint64_t v5 = a1[1];
  uint64_t result = 0;
  if ((unint64_t)v3 <= v5)
  {
    uint64_t v7 = *a1;
    uint64_t result = v7 + a2;
    if ((unint64_t)&v3[v7] < v7 + a2 || (unint64_t)a3 >> 32) {
      os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"The range of valid memory is too large to be represented by this type, or [begin, end) is not a well-formed range", a3);
    }
  }
  return result;
}

uint64_t IO80211BufferCursor::_asType<wl_roam_11kvr_nbr_rpt_req_v1>(uint64_t *a1, uint64_t a2, const char *a3)
{
  int v3 = &a3[a2];
  if (__CFADD__(a2, a3)) {
    return 0;
  }
  if ((unint64_t)a3 < 0xC) {
    return 0;
  }
  unint64_t v5 = a1[1];
  uint64_t result = 0;
  if ((unint64_t)v3 <= v5)
  {
    uint64_t v7 = *a1;
    uint64_t result = v7 + a2;
    if ((unint64_t)&v3[v7] < v7 + a2 || (unint64_t)a3 >> 32) {
      os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"The range of valid memory is too large to be represented by this type, or [begin, end) is not a well-formed range", a3);
    }
  }
  return result;
}

uint64_t IO80211BufferCursor::_asType<wl_roam_11kvr_nbr_rpt_resp_v1>(uint64_t *a1, uint64_t a2, const char *a3)
{
  int v3 = &a3[a2];
  if (__CFADD__(a2, a3)) {
    return 0;
  }
  if ((unint64_t)a3 < 0x10) {
    return 0;
  }
  unint64_t v5 = a1[1];
  uint64_t result = 0;
  if ((unint64_t)v3 <= v5)
  {
    uint64_t v7 = *a1;
    uint64_t result = v7 + a2;
    if ((unint64_t)&v3[v7] < v7 + a2 || (unint64_t)a3 >> 32) {
      os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"The range of valid memory is too large to be represented by this type, or [begin, end) is not a well-formed range", a3);
    }
  }
  return result;
}

uint64_t IO80211BufferCursor::_asType<unsigned short>(uint64_t *a1, uint64_t a2, const char *a3)
{
  int v3 = &a3[a2];
  if (__CFADD__(a2, a3)) {
    return 0;
  }
  if ((unint64_t)a3 < 2) {
    return 0;
  }
  unint64_t v5 = a1[1];
  uint64_t result = 0;
  if ((unint64_t)v3 <= v5)
  {
    uint64_t v7 = *a1;
    uint64_t result = v7 + a2;
    if ((unint64_t)&v3[v7] < v7 + a2 || (unint64_t)a3 >> 32) {
      os_detail::panic_trapping_policy::trap((os_detail::panic_trapping_policy *)"The range of valid memory is too large to be represented by this type, or [begin, end) is not a well-formed range", a3);
    }
  }
  return result;
}

void _GLOBAL__sub_I_AppleBCMWLANCore_cpp()
{
  kNullRange = 0;
}

BOOL AppleBCMWLANBusInterfacePCIe::init(AppleBCMWLANBusInterfacePCIe *this, OSDictionary *a2)
{
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  uint64_t v3 = IOMallocZeroTyped();
  uint64_t v4 = v3;
  *((void *)this + 9) = v3;
  if (v3)
  {
    atomic_store(0, (unint64_t *)(v3 + 5384));
    *(void *)(*((void *)this + 9) + 1504) = *((void *)this + 9) + 1504;
    *(void *)(*((void *)this + 9) + 1512) = *((void *)this + 9) + 1504;
  }
  else
  {
    stringFromBootCheckPoint(1u);
    io80211_os_log();
  }
  return v4 != 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::start(IOService *this, IOService *a2)
{
  LODWORD(ms) = 1;
  BYTE2(this[1].OSObject::OSObjectInterface::__vftable[324].free) = 1;
  BYTE4(this[1].OSObject::OSObjectInterface::__vftable[202].init) = 1;
  if (IOParseBootArgNumber("wlan.pcie.useOLYHALDriver", &ms, 4))
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logInfo(Logger, "[dk] %s@%d:wlan.pcie.useOLYHALDriver %d\n", "start", 1681, ms);
      }
    }
  }
  BYTE4(this[1].OSObject::OSObjectInterface::__vftable[202].init) = ms == 1;
  if (IOParseBootArgNumber("wlan.startdelay", &ms, 4))
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v26 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(v26, "[dk] %s@%d:wlan.startdelay %d s\n", "start", 1690, ms);
      }
    }
    IOSleep((1000 * ms));
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v27 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(v27, "[dk] %s@%d:wlan.startdelay %d s complete\n", "start", 1692, ms);
      }
    }
  }
  BYTE1(this[1].OSObject::OSObjectInterface::__vftable[256].init) = 0;
  if (IOParseBootArgNumber("wlan.wdt.disableLogging", &ms, 4))
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v28 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logInfo(v28, "[dk] %s@%d: wlan.wdt.disableLogging %d\n", "start", 1718, ms);
      }
    }
    BYTE1(this[1].OSObject::OSObjectInterface::__vftable[256].init) = ms != 0;
  }
  if (IOParseBootArgNumber("wlan.pcie.enableDeepSleepSupport", &ms, 4))
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v29 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logInfo(v29, "[dk] %s@%d: wlan.pcie.enableDeepSleep %d\n", "start", 1724, ms);
      }
    }
    HIBYTE(this[1].OSObject::OSObjectInterface::__vftable[232].init) = ms != 0;
  }
  if (IOParseBootArgNumber("wlan.pcie.debugworkQueuetimeout_ms", &ms, 4))
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v30 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logInfo(v30, "[dk] %s@%d: wlan.pcie.debugworkQueuetimeout_ms %d\n", "start", 1729, ms);
      }
    }
    HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[256].init) = ms;
  }
  if (IOParseBootArgNumber("wlan.pcie.delaystart_ms", &ms, 4))
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v31 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(v31, "[dk] %s@%d:Starting WiFi driver after %d ms\n", "start", 1734, ms);
      }
    }
    IOSleep(ms);
  }
  if (IOParseBootArgNumber("wlan.pcie.paniconaer", &ms, 4)) {
    LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[236].init) = 1;
  }
  if (IOParseBootArgNumber("wlan.pcie.paniconcommitrings", &ms, 4)) {
    BYTE1(this[1].OSObject::OSObjectInterface::__vftable[236].init) = 1;
  }
  BYTE4(this[1].OSObject::OSObjectInterface::__vftable[231].free) = 0;
  if (IOParseBootArgNumber("wlan.pcie.disablebootmsi", &ms, 4)) {
    BYTE4(this[1].OSObject::OSObjectInterface::__vftable[231].free) = ms != 0;
  }
  BYTE5(this[1].OSObject::OSObjectInterface::__vftable[231].free) = 0;
  if (IOParseBootArgNumber("wlan.pcie.nolinkdownlogs", &ms, 4)) {
    BYTE5(this[1].OSObject::OSObjectInterface::__vftable[231].free) = 1;
  }
  this[1].OSObject::OSObjectInterface::__vftable[252].init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))mach_continuous_time();
  IOLog("%s(%d): fLastTimePowerOnTicks=%lld\n", "start", 1757, this[1].OSObject::OSObjectInterface::__vftable[252].init);
  BYTE6(this[1].OSObject::OSObjectInterface::__vftable[231].free) = 1;
  if (IOParseBootArgNumber("wlan.pcie.enableptmsupport", &ms, 4))
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v32 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logInfo(v32, "[dk] %s@%d: wlan.pcie.enableptmsupport %d\n", "start", 1764, ms);
      }
    }
    BYTE6(this[1].OSObject::OSObjectInterface::__vftable[231].free) = ms != 0;
  }
  HIBYTE(this[1].OSObject::OSObjectInterface::__vftable[231].free) = 0;
  if (IOParseBootArgNumber("wlan.pcie.disablefatalerrorindication", &ms, 4))
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v33 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logInfo(v33, "[dk] %s@%d: wlan.pcie.disablefatalerrorindication %d\n", "start", 1770, ms);
      }
    }
    HIBYTE(this[1].OSObject::OSObjectInterface::__vftable[231].free) = ms != 0;
  }
  LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[232].init) = 0;
  if (IOParseBootArgNumber("wlan.pcie.disableCoexCPUDumpSupport", &ms, 4))
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v34 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logInfo(v34, "[dk] %s@%d: wlan.pcie.disableCoexCPUDumpSupport %d\n", "start", 1776, ms);
      }
    }
    LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[232].init) = ms != 0;
  }
  BYTE1(this[1].OSObject::OSObjectInterface::__vftable[232].init) = 0;
  if (IOParseBootArgNumber("wlan.pcie.disableDSExitTimeoutWA", &ms, 4))
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v35 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logInfo(v35, "[dk] %s@%d: wlan.pcie.disableDSExitTimeoutWA %d\n", "start", 1781, ms);
      }
    }
    BYTE1(this[1].OSObject::OSObjectInterface::__vftable[232].init) = ms != 0;
  }
  BYTE6(this[1].OSObject::OSObjectInterface::__vftable[232].init) = 0;
  if (IOParseBootArgNumber("wlan.pcie.paniconhostpollfwtrap", &ms, 4)) {
    BYTE6(this[1].OSObject::OSObjectInterface::__vftable[232].init) = 1;
  }
  BYTE5(this[1].OSObject::OSObjectInterface::__vftable[232].init) = 0;
  if (IOParseBootArgNumber("wlan.pcie.disablehostinitiatedfwtrap", &ms, 4)) {
    BYTE5(this[1].OSObject::OSObjectInterface::__vftable[232].init) = 1;
  }
  this[1].OSObject::OSObjectInterface::__vftable[235].unsigned int free = (void (__cdecl *)(OSObjectInterface *__hidden))-1;
  if (IOParseBootArgNumber("wlan.pcie.iokitmatch_ms", &ms, 4))
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v36 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logInfo(v36, "[dk] %s@%d: wlan.pcie.iokitmatch_ms %d\n", "start", 1801, ms);
      }
    }
    this[1].OSObject::OSObjectInterface::__vftable[235].unsigned int free = (void (__cdecl *)(OSObjectInterface *__hidden))(1000 * (1000 * ms));
  }
  BYTE4(this[1].OSObject::OSObjectInterface::__vftable[179].init) = 1;
  LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[232].free) = 1;
  if (IOParseBootArgNumber("wlan.pcie.DSdisabled", &ms, 4))
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v37 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(v37, "[dk] %s@%d:wlan.pcie.DSdisabled %d\n", "start", 1820, ms);
      }
    }
    BYTE4(this[1].OSObject::OSObjectInterface::__vftable[179].init) = ms != 1;
  }
  if (IOParseBootArgNumber("wlan.factory", &ms, 4) && (ms & 0x80) != 0)
  {
    uint64_t v4 = this[1].OSObject::OSObjectInterface::__vftable;
    if (BYTE4(v4[179].init)) {
      BYTE4(v4[179].init) = 0;
    }
  }
  if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
  {
    AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
    if (CCLogStream::shouldLog())
    {
      unsigned int v22 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (BYTE4(this[1].OSObject::OSObjectInterface::__vftable[179].init)) {
        unsigned int v23 = "ENABLED";
      }
      else {
        unsigned int v23 = "DISABLED";
      }
      CCLogStream::logAlert(v22, "[dk] %s@%d:Deep Sleep is %s\n", "start", 1828, v23);
    }
  }
  if ((setPropertyHelper(this, "wlan.pcie.DSState", BYTE4(this[1].OSObject::OSObjectInterface::__vftable[179].init)) & 1) == 0)
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v38 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(v38, "[dk] %s@%d:Failed to set wlan.pcie.DSState Property - %u\n", "start", 1831, BYTE4(this[1].OSObject::OSObjectInterface::__vftable[179].init));
      }
    }
  }
  if (IOParseBootArgNumber("wlan.pcie.D0AckLogsdisabled", &ms, 4))
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v39 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(v39, "[dk] %s@%d:wlan.pcie.D0AckLogsdisabled %d\n", "start", 1835, ms);
      }
    }
    LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[232].free) = ms != 1;
  }
  if (IOParseBootArgNumber("wlan.pcie.reset_ms", &this[1].OSObject::OSObjectInterface::__vftable[178], 4))
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v5 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(v5, "[dk] %s@%d: Setting WLAN_REG_ON reset duration to %lu milliseconds\n", "start", 1840, LODWORD(this[1].OSObject::OSObjectInterface::__vftable[178].init));
      }
    }
  }
  else
  {
    LODWORD(this[1].OSObject::OSObjectInterface::__vftable[178].init) = 100;
  }
  LODWORD(this[1].OSObject::OSObjectInterface::__vftable[180].init) = 256;
  if (IOParseBootArgNumber("wlan.pcie.txdeq", &ms, 4))
  {
    int v6 = ms;
    if (ms >= 0xFF) {
      int v6 = 255;
    }
    LODWORD(ms) = v6;
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v40 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logInfo(v40, "[dk] %s@%d: wlan.pcie.txdeq %d\n", "start", 1848, ms);
      }
    }
    LODWORD(this[1].OSObject::OSObjectInterface::__vftable[180].init) = ms;
  }
  HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[180].init) = 1024;
  if (IOParseBootArgNumber("wlan.pcie.bounce", &ms, 4))
  {
    HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[180].init) = ms;
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v41 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logInfo(v41, "[dk] %s@%d: wlan.pcie.bounce %d\n", "start", 1855, ms);
      }
    }
  }
  WORD2(this[1].OSObject::OSObjectInterface::__vftable[279].init) = 384;
  HIWORD(this[1].OSObject::OSObjectInterface::__vftable[279].init) = 64;
  if (IOParseBootArgNumber("wlan.pcie.badrequest_readSocRAM", &ms, 4)) {
    BYTE2(this[1].OSObject::OSObjectInterface::__vftable[236].init) = 1;
  }
  BYTE2(this[1].OSObject::OSObjectInterface::__vftable[236].init) = 1;
  LODWORD(this[1].OSObject::OSObjectInterface::__vftable[283].init) = 2000;
  if (IOParseBootArgNumber("wlan.pcie.sleepBeforePanic", &ms, 4)) {
    LODWORD(this[1].OSObject::OSObjectInterface::__vftable[283].init) = ms;
  }
  HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[283].init) = 10;
  if (IOParseBootArgNumber("wlan.pcie.deviceWakeWaitBeforePanic", &ms, 4)) {
    HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[283].init) = ms;
  }
  BYTE3(this[1].OSObject::OSObjectInterface::__vftable[286].init) = 0;
  if (IOParseBootArgNumber("wifibt.pcie.disableASPMWorkaround", &ms, 4))
  {
    BYTE3(this[1].OSObject::OSObjectInterface::__vftable[286].init) = ms != 0;
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v42 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logCrit(v42, "[dk] %s@%d:Disable MultiFunction ASPM Workaround override: %u\n", "start", 1880, BYTE3(this[1].OSObject::OSObjectInterface::__vftable[286].init));
      }
    }
  }
  BYTE2(this[1].OSObject::OSObjectInterface::__vftable[286].init) = 0;
  if (IOParseBootArgNumber("wlan.pcie.enableMFD3AckSoCRAM", &ms, 4))
  {
    BYTE2(this[1].OSObject::OSObjectInterface::__vftable[286].init) = ms != 0;
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v43 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logCrit(v43, "[dk] %s@%d:Enable MultiFunction D3 collection override: %u\n", "start", 1886, BYTE2(this[1].OSObject::OSObjectInterface::__vftable[286].init));
      }
    }
  }
  BYTE6(this[1].OSObject::OSObjectInterface::__vftable[285].free) = 0;
  if (IOParseBootArgNumber("wlan.pcie.logCollectionOverride", &ms, 4))
  {
    BYTE6(this[1].OSObject::OSObjectInterface::__vftable[285].free) = ms != 0;
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v44 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(v44, "[dk] %s@%d:Enable log collection when upgrade to full reset: %u\n", "start", 1891, BYTE6(this[1].OSObject::OSObjectInterface::__vftable[285].free));
      }
    }
  }
  HIBYTE(this[1].OSObject::OSObjectInterface::__vftable[285].free) = 0;
  if (IOParseBootArgNumber("wlan.pcie.logCollectWLAPB", &ms, 4))
  {
    HIBYTE(this[1].OSObject::OSObjectInterface::__vftable[285].free) = ms != 0;
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v45 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(v45, "[dk] %s@%d:Enable log collection of WLAN APB registers : %u\n", "start", 1897, HIBYTE(this[1].OSObject::OSObjectInterface::__vftable[285].free));
      }
    }
  }
  LODWORD(ms) = 0;
  BYTE4(this[1].OSObject::OSObjectInterface::__vftable[232].init) = 0;
  if (IOParseBootArgNumber("wlan.pcie.tcmAccessWithTrapTimeout", &ms, 4))
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v46 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logInfo(v46, "[dk] %s@%d: wlan.pcie.tcmAccessWithTrapTimeout %d\n", "start", 1903, ms);
      }
    }
    BYTE4(this[1].OSObject::OSObjectInterface::__vftable[232].init) = ms != 0;
  }
  BYTE1(this[1].OSObject::OSObjectInterface::__vftable[286].init) = 0;
  if (IOParseBootArgNumber("wifibt.pcie.panicOnPendingBackplaneErrors", &ms, 4))
  {
    BYTE1(this[1].OSObject::OSObjectInterface::__vftable[286].init) = ms != 0;
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v47 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logCrit(v47, "[dk] %s@%d:Panic on Pending Backplane Errors override: %u\n", "start", 1910, BYTE1(this[1].OSObject::OSObjectInterface::__vftable[286].init));
      }
    }
  }
  LODWORD(this[1].OSObject::OSObjectInterface::__vftable[283].free) = 0;
  if (IOParseBootArgNumber("wlan.pcie.hmap-window-limit", &ms, 4))
  {
    LODWORD(this[1].OSObject::OSObjectInterface::__vftable[283].free) = ms;
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v48 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(v48, "[dk] %s@%d:PCIe HMAP window limit from boot config: %uMB\n", "start", 1917, LODWORD(this[1].OSObject::OSObjectInterface::__vftable[283].free));
      }
    }
  }
  HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[283].free) = 0;
  if (IOParseBootArgNumber("wlan.pcie.tcmAccessWithInactiveCore", &ms, 4)) {
    HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[283].free) = ms;
  }
  uint64_t v7 = this[1].OSObject::OSObjectInterface::__vftable;
  if (!LODWORD(v7[283].free))
  {
    long long v64 = 0;
    long long v8 = (IOService *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[17].Dispatch)(this);
    if (checkAcquireDataPropertyNotEmpty(v8, "wlan.pcie.hmap-window-limit", &v64, 4uLL, 1uLL, "IOService"))
    {
      unsigned int v9 = this[1].OSObject::OSObjectInterface::__vftable;
      LODWORD(v9[283].free) = *(_DWORD *)OSData::getBytesNoCopy(v64, 0, 4uLL);
      if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
      {
        AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        if (CCLogStream::shouldLog())
        {
          long long v59 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          CCLogStream::logAlert(v59, "[dk] %s@%d:PCIe HMAP window limit from device tree:%uMB\n", "start", 1931, LODWORD(this[1].OSObject::OSObjectInterface::__vftable[283].free));
        }
      }
      if (v64) {
        ((void (*)(OSData *))v64->release)(v64);
      }
    }
    uint64_t v7 = this[1].OSObject::OSObjectInterface::__vftable;
  }
  LODWORD(v7[289].free) = 100;
  BYTE1(this[1].OSObject::OSObjectInterface::__vftable[195].free) = 1;
  BYTE2(this[1].OSObject::OSObjectInterface::__vftable[195].free) = 0;
  BYTE1(this[1].OSObject::OSObjectInterface::__vftable[231].free) = 0;
  long long v64 = 0;
  uint64_t v10 = (IOService *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[17].Dispatch)(this);
  if (checkAcquireDataPropertyNotEmpty(v10, "default-options", &v64, 4uLL, 0, "IOService"))
  {
    int v11 = *(_DWORD *)OSData::getBytesNoCopy(v64);
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v49 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(v49, "[dk] %s@%d:Default options property found with value %d\n", "start", 1948, v11);
      }
    }
    BYTE1(this[1].OSObject::OSObjectInterface::__vftable[195].free) = (v11 & 4) == 0;
    BYTE2(this[1].OSObject::OSObjectInterface::__vftable[195].free) = (v11 & 8) != 0;
    BYTE1(this[1].OSObject::OSObjectInterface::__vftable[231].free) = v11 & 1;
    if (v64)
    {
      ((void (*)(OSData *))v64->release)(v64);
      long long v64 = 0;
    }
  }
  if (!AppleBCMWLAN_isDevFusedOrCSRInternal()) {
    BYTE1(this[1].OSObject::OSObjectInterface::__vftable[195].free) = 1;
  }
  if (!BYTE1(this[1].OSObject::OSObjectInterface::__vftable[195].free))
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        long long v56 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logCrit(v56, "[dk] %s@%d:Opt-out port enable retry for new HW\n", "start", 1962);
      }
    }
  }
  unsigned int v12 = this[1].OSObject::OSObjectInterface::__vftable;
  if (BYTE2(v12[195].free)) {
    LODWORD(v12[289].free) += 100;
  }
  if (IOParseBootArgNumber("wlan.pcie.portenableretry", &ms, 4))
  {
    BYTE1(this[1].OSObject::OSObjectInterface::__vftable[195].free) = ms != 0;
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v50 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logCrit(v50, "[dk] %s@%d:port enable retry override: %u\n", "start", 1972, BYTE1(this[1].OSObject::OSObjectInterface::__vftable[195].free));
      }
    }
  }
  if (IOParseBootArgNumber("wlan.pcie.paniconlinkdown", &ms, 4)) {
    BYTE1(this[1].OSObject::OSObjectInterface::__vftable[231].free) = 1;
  }
  if (IOParseBootArgNumber("wlan.pcie.perstdelay_ms", &ms, 4))
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v51 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logInfo(v51, "[dk] %s@%d: wlan.pcie.perstdelay_ms %d\n", "start", 1984, ms);
      }
    }
    LODWORD(this[1].OSObject::OSObjectInterface::__vftable[289].free) = ms;
  }
  BYTE6(this[1].OSObject::OSObjectInterface::__vftable[275].free) = 0;
  if (IOParseBootArgNumber("wlan.pcie.dumplogbtreset", &ms, 4))
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v52 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logInfo(v52, "[dk] %s@%d: wlan.pcie.dumplogbtreset %d\n", "start", 1990, ms);
      }
    }
    BYTE6(this[1].OSObject::OSObjectInterface::__vftable[275].free) = ms != 0;
  }
  LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[176].free) = 1;
  if (IOParseBootArgNumber("wlan.pcie.detectsabotage", &ms, 4))
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v53 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logInfo(v53, "[dk] %s@%d: wlan.pcie.detectsabotage %d\n", "start", 1996, ms);
      }
    }
    LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[176].free) = ms != 0;
  }
  int v63 = 1000;
  if (IOParseBootArgNumber("wlan.pcie.commitcoalesce", &v63, 4))
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v54 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logCrit(v54, "[dk] %s@%d:Commit Coalescing time %dus\n", "start", 2002, v63);
      }
    }
  }
  LODWORD(ms) = 0;
  BYTE6(this[1].OSObject::OSObjectInterface::__vftable[289].init) = 0;
  if (IOParseBootArgNumber("wlan.secureboot.darcheck", &ms, 4))
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        long long v55 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logCrit(v55, "[dk] %s@%d: wlan.secureboot.darcheck %d\n", "start", 2008, ms);
      }
    }
    BYTE6(this[1].OSObject::OSObjectInterface::__vftable[289].init) = ms != 0;
  }
  AppleBCMWLANBusInterfacePCIe::initExitDurationLimits((uint64_t)this);
  AppleBCMWLANBusInterfacePCIe::initInterruptBins((AppleBCMWLANBusInterfacePCIe *)this);
  if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
  {
    AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
    if (CCLogStream::shouldLog())
    {
      unsigned int v24 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      CCLogStream::logAlert(v24, "[dk] %s@%d:Starting PCIe \n", "start", 2017);
    }
  }
  this[1].OSObject::OSObjectInterface::__vftable[217].init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))IO80211CommandGate::allocWithParams();
  unsigned int v13 = this[1].OSObject::OSObjectInterface::__vftable;
  if (!v13[217].init)
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        long long v57 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logCrit(v57, "[dk] %s@%d:Failed to create command gate\n", "start", 2047);
      }
    }
    unsigned int v17 = (AppleBCMWLANBusInterfacePCIe *)this;
    unsigned int v18 = a2;
    int v19 = 2048;
    goto LABEL_213;
  }
  v13[94].init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))&v13[94];
  this[1].OSObject::OSObjectInterface::__vftable[94].unsigned int free = (void (__cdecl *)(OSObjectInterface *__hidden))&this[1].OSObject::OSObjectInterface::__vftable[94];
  this[1].OSObject::OSObjectInterface::__vftable[176].init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))IOLockAlloc();
  if (!this[1].OSObject::OSObjectInterface::__vftable[176].init)
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        long long v58 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logCrit(v58, "[dk] %s@%d:Failed to allocate pcie error handling lock\n", "start", 2055);
      }
    }
    unsigned int v17 = (AppleBCMWLANBusInterfacePCIe *)this;
    unsigned int v18 = a2;
    int v19 = 2056;
    goto LABEL_213;
  }
  inited = (IO80211FlowQueueDatabase *)AppleBCMWLANBusInterfacePCIe::initMRUFlowIdList((uint64_t)this);
  this[1].OSObject::OSObjectInterface::__vftable[82].init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))IO80211FlowQueueDatabase::initialize(inited);
  if (!this[1].OSObject::OSObjectInterface::__vftable[82].init)
  {
    unsigned int v17 = (AppleBCMWLANBusInterfacePCIe *)this;
    unsigned int v18 = a2;
    int v19 = 2083;
    goto LABEL_213;
  }
  if (!((unsigned int (*)(IOService *, IOService *))this->OSObject::OSMetaClassBase::__vftable[21].isEqualTo)(this, a2))
  {
    if (((unsigned int (*)(IOService *, IOService *))this->OSObject::OSMetaClassBase::__vftable[21].retain)(this, a2))
    {
      AppleBCMWLANBusInterface::reportInitFailure((uint64_t)this, a2, 1uLL, 2094);
      uint64_t result = AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (!result) {
        return result;
      }
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      uint64_t result = CCLogStream::shouldLog();
      if (!result) {
        return result;
      }
      goto LABEL_223;
    }
    if (((unsigned int (*)(IOService *, IOService *))this->OSObject::OSMetaClassBase::__vftable[21].release)(this, a2))
    {
      AppleBCMWLANBusInterface::reportInitFailure((uint64_t)this, a2, 1uLL, 2100);
      uint64_t result = AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (!result) {
        return result;
      }
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      uint64_t result = CCLogStream::shouldLog();
      if (!result) {
        return result;
      }
LABEL_223:
      unsigned int v20 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      CCLogStream::logAlert(v20, "[dk] %s@%d: Failed to allocate IPC pools!");
      return 0;
    }
    uint64_t result = AppleBCMWLANBusInterfacePCIe::createDestroyRequestTracker((AppleBCMWLANBusInterfacePCIe *)this, a2);
    if (!result) {
      return result;
    }
    if (AppleBCMWLANBusInterfacePCIe::createReporters(this, v21))
    {
      AppleBCMWLANBusInterfacePCIe::initPCIeDatapathStreams((AppleBCMWLANBusInterfacePCIe *)this);
      BYTE1(this[1].OSObject::OSObjectInterface::__vftable[324].free) = 0;
      unsigned int v62 = 0;
      LODWORD(this[1].OSObject::OSObjectInterface::__vftable[240].free) = 1;
      IOService::AdjustBusy(this, 1, 0);
      IOService::GetBusyState(this, &v62, 0);
      if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
      {
        AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        if (CCLogStream::shouldLog())
        {
          long long v60 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          CCLogStream::logAlert(v60, "[dk] %s@%d:Raised AdjustBusy(+1), GetBusyState() -> %u\n", "start", 2150, v62);
        }
      }
      io80211_os_log();
      return 1;
    }
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        long long v61 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logCrit(v61, "[dk] %s@%d: Failed to create IOReporters\n", "start", 2110);
      }
    }
    unsigned int v17 = (AppleBCMWLANBusInterfacePCIe *)this;
    unsigned int v18 = a2;
    int v19 = 2111;
LABEL_213:
    AppleBCMWLANBusInterface::reportInitFailure((uint64_t)v17, v18, 1uLL, v19);
    return 0;
  }
  AppleBCMWLANBusInterface::reportInitFailure((uint64_t)this, a2, 1uLL, 2088);
  uint64_t result = AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
  if (result)
  {
    AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      unsigned int v16 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      CCLogStream::logAlert(v16, "[dk] %s@%d: Failed to allocate IPC Descriptor queues!");
      return 0;
    }
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::initExitDurationLimits(uint64_t this)
{
  *(void *)(*(void *)(this + 72) + 1632) = 1;
  *(void *)(*(void *)(this + 72) + 1640) = 5;
  *(void *)(*(void *)(this + 72) + 1648) = 10;
  *(void *)(*(void *)(this + 72) + 1656) = 25;
  *(void *)(*(void *)(this + 72) + 1664) = 50;
  *(void *)(*(void *)(this + 72) + 1672) = 100;
  *(void *)(*(void *)(this + 72) + 1680) = 200;
  *(void *)(*(void *)(this + 72) + 1688) = 300;
  *(void *)(*(void *)(this + 72) + 1696) = 400;
  *(void *)(*(void *)(this + 72) + 1704) = 500;
  *(void *)(*(void *)(this + 72) + 1712) = 750;
  *(void *)(*(void *)(this + 72) + 1720) = 1000;
  *(void *)(*(void *)(this + 72) + 1728) = -1;
  return this;
}

AppleBCMWLANHistogram *AppleBCMWLANBusInterfacePCIe::initInterruptBins(AppleBCMWLANBusInterfacePCIe *this)
{
  *(_DWORD *)(*((void *)this + 9) + 3208) = 1;
  *(_DWORD *)(*((void *)this + 9) + 3212) = 8;
  *(_DWORD *)(*((void *)this + 9) + 3216) = 16;
  *(_DWORD *)(*((void *)this + 9) + 3220) = 32;
  *(_DWORD *)(*((void *)this + 9) + 3224) = 48;
  *(_DWORD *)(*((void *)this + 9) + 3228) = 64;
  *(_DWORD *)(*((void *)this + 9) + 3232) = 640;
  *(_DWORD *)(*((void *)this + 9) + 3724) = 1000;
  *(_DWORD *)(*((void *)this + 9) + 3728) = 1000;
  uint64_t result = AppleBCMWLANHistogram::withBinCountAndQuantizer((AppleBCMWLANHistogram *)AppleBCMWLANHistogram::log2Quantize, (unsigned int (*))0x20, 1);
  *(void *)(*((void *)this + 9) + 3096) = result;
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::initMRUFlowIdList(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 72);
  uint64_t v2 = *(unsigned __int16 *)(v1 + 376);
  v1 += 1864;
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  if (v2)
  {
    uint64_t v3 = 0;
    char v4 = 0;
    char v5 = v2 - 1;
    uint64_t v6 = 4 * v2;
    do
    {
      char v7 = v4 - 1;
      if (!v3) {
        char v7 = v5;
      }
      *(unsigned char *)(*(void *)(this + 72) + v3 + 1865) = v7;
      if (v6 - 4 == v3) {
        char v8 = 0;
      }
      else {
        char v8 = v4 + 1;
      }
      *(unsigned char *)(*(void *)(this + 72) + v3 + 1864) = v8;
      *(_WORD *)(*(void *)(this + 72) + v3 + 1866) = 0;
      ++v4;
      v3 += 4;
    }
    while (v6 != v3);
  }
  uint64_t v9 = *(void *)(this + 72);
  if (*(_DWORD *)(v9 + 372))
  {
    int v10 = 0;
    do
    {
      *(unsigned char *)(v9 + 1864 + 4 * *(unsigned __int8 *)(v9 + 1864 + 4 * (unsigned __int16)v10 + 1)) = *(unsigned char *)(v9 + 1864 + 4 * (unsigned __int16)v10);
      *(unsigned char *)(*(void *)(this + 72)
               + 1864
               + 4 * *(unsigned __int8 *)(*(void *)(this + 72) + 1864 + 4 * (unsigned __int16)v10)
               + 1) = *(unsigned char *)(*(void *)(this + 72) + 1864 + 4 * (unsigned __int16)v10 + 1);
      *(unsigned char *)(*(void *)(this + 72) + 4 * (unsigned __int16)v10 + 1865) = v10;
      *(unsigned char *)(*(void *)(this + 72) + 4 * (unsigned __int16)v10 + 1864) = v10;
      ++v10;
      uint64_t v9 = *(void *)(this + 72);
      unsigned int v11 = *(_DWORD *)(v9 + 372);
    }
    while (v11 > (unsigned __int16)v10);
  }
  else
  {
    LOBYTE(v11) = 0;
  }
  *(unsigned char *)(v9 + 2040) = v11;
  return this;
}

uint64_t AppleBCMWLANBusInterfacePCIe::createDestroyRequestTracker(AppleBCMWLANBusInterfacePCIe *this, IOService *a2)
{
  *(void *)(*((void *)this + 9) + 1088) = AppleBCMWLANHashtable::withCapacity((AppleBCMWLANHashtable *)0x40);
  if (*(void *)(*((void *)this + 9) + 1088))
  {
    *(void *)(*((void *)this + 9) + 1096) = AppleBCMWLANHashtable::withCapacity((AppleBCMWLANHashtable *)0x40);
    if (*(void *)(*((void *)this + 9) + 1096))
    {
      *(void *)(*((void *)this + 9) + 1112) = AppleBCMWLANHashtable::withCapacity((AppleBCMWLANHashtable *)4);
      if (*(void *)(*((void *)this + 9) + 1112))
      {
        *(void *)(*((void *)this + 9) + 1120) = AppleBCMWLANHashtable::withCapacity((AppleBCMWLANHashtable *)4);
        if (*(void *)(*((void *)this + 9) + 1120))
        {
          *(void *)(*((void *)this + 9) + 1128) = AppleBCMWLANHashtable::withCapacity((AppleBCMWLANHashtable *)4);
          if (*(void *)(*((void *)this + 9) + 1128))
          {
            *(void *)(*((void *)this + 9) + 1136) = AppleBCMWLANHashtable::withCapacity((AppleBCMWLANHashtable *)4);
            if (*(void *)(*((void *)this + 9) + 1136))
            {
              *(void *)(*((void *)this + 9) + 3552) = AppleBCMWLANHashtable::withCapacity((AppleBCMWLANHashtable *)0x10);
              if (*(void *)(*((void *)this + 9) + 3552))
              {
                *(void *)(*((void *)this + 9) + 3560) = AppleBCMWLANHashtable::withCapacity((AppleBCMWLANHashtable *)0x80);
                if (*(void *)(*((void *)this + 9) + 3560))
                {
                  Pow2 = (AppleBCMWLANHashtable *)AppleBCMWLANHashtable::alignNextPow2((AppleBCMWLANHashtable *)0x280);
                  *(void *)(*((void *)this + 9) + 3568) = AppleBCMWLANHashtable::withCapacity(Pow2);
                  uint64_t v5 = *((void *)this + 9);
                  if (*(void *)(v5 + 3568))
                  {
                    uint64_t v6 = (AppleBCMWLANHashtable *)AppleBCMWLANHashtable::alignNextPow2((AppleBCMWLANHashtable *)*(unsigned int *)(v5 + 2884));
                    *(void *)(*((void *)this + 9) + 3576) = AppleBCMWLANHashtable::withCapacity(v6);
                    if (*(void *)(*((void *)this + 9) + 3576))
                    {
                      *(void *)(*((void *)this + 9) + 3584) = AppleBCMWLANHashtable::withCapacity((AppleBCMWLANHashtable *)0x10);
                      if (*(void *)(*((void *)this + 9) + 3584)) {
                        return 1;
                      }
                      if (AppleBCMWLANBusInterface::getLogger(this))
                      {
                        AppleBCMWLANBusInterface::getLogger(this);
                        if (CCLogStream::shouldLog())
                        {
                          Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                          CCLogStream::logCrit(Logger, "[dk] %s@%d: Unable to allocate debug IO Rx tracker\n", "createDestroyRequestTracker", 2233);
                        }
                      }
                      int v8 = 2234;
                    }
                    else
                    {
                      if (AppleBCMWLANBusInterface::getLogger(this))
                      {
                        AppleBCMWLANBusInterface::getLogger(this);
                        if (CCLogStream::shouldLog())
                        {
                          unsigned int v17 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                          CCLogStream::logCrit(v17, "[dk] %s@%d: Unable to allocate Tx data IO tracker\n", "createDestroyRequestTracker", 2226);
                        }
                      }
                      int v8 = 2227;
                    }
                  }
                  else
                  {
                    if (AppleBCMWLANBusInterface::getLogger(this))
                    {
                      AppleBCMWLANBusInterface::getLogger(this);
                      if (CCLogStream::shouldLog())
                      {
                        unsigned int v16 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                        CCLogStream::logCrit(v16, "[dk] %s@%d: Unable to allocate Rx data IO tracker\n", "createDestroyRequestTracker", 2219);
                      }
                    }
                    int v8 = 2220;
                  }
                }
                else
                {
                  if (AppleBCMWLANBusInterface::getLogger(this))
                  {
                    AppleBCMWLANBusInterface::getLogger(this);
                    if (CCLogStream::shouldLog())
                    {
                      unsigned int v15 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                      CCLogStream::logCrit(v15, "[dk] %s@%d: Unable to allocate control IO Rx tracker\n", "createDestroyRequestTracker", 2212);
                    }
                  }
                  int v8 = 2213;
                }
              }
              else
              {
                int v8 = 2206;
              }
            }
            else
            {
              if (AppleBCMWLANBusInterface::getLogger(this))
              {
                AppleBCMWLANBusInterface::getLogger(this);
                if (CCLogStream::shouldLog())
                {
                  unsigned int v14 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                  CCLogStream::logCrit(v14, "[dk] %s@%d: Unable to allocate D2H ring destroy tracker\n", "createDestroyRequestTracker", 2199);
                }
              }
              int v8 = 2200;
            }
          }
          else
          {
            if (AppleBCMWLANBusInterface::getLogger(this))
            {
              AppleBCMWLANBusInterface::getLogger(this);
              if (CCLogStream::shouldLog())
              {
                unsigned int v13 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                CCLogStream::logCrit(v13, "[dk] %s@%d: Unable to allocate D2H ring create tracker\n", "createDestroyRequestTracker", 2192);
              }
            }
            int v8 = 2193;
          }
        }
        else
        {
          if (AppleBCMWLANBusInterface::getLogger(this))
          {
            AppleBCMWLANBusInterface::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              unsigned int v12 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
              CCLogStream::logCrit(v12, "[dk] %s@%d: Unable to allocate H2D ring destroy tracker\n", "createDestroyRequestTracker", 2185);
            }
          }
          int v8 = 2186;
        }
      }
      else
      {
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            unsigned int v11 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logCrit(v11, "[dk] %s@%d: Unable to allocate H2D ring create tracker\n", "createDestroyRequestTracker", 2178);
          }
        }
        int v8 = 2179;
      }
    }
    else
    {
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          int v10 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logCrit(v10, "[dk] %s@%d: Unable to allocate flow destroy tracker\n", "createDestroyRequestTracker", 2171);
        }
      }
      int v8 = 2172;
    }
  }
  else
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v9 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logCrit(v9, "[dk] %s@%d: Unable to allocate flow create tracker\n", "createDestroyRequestTracker", 2164);
      }
    }
    int v8 = 2165;
  }
  AppleBCMWLANBusInterface::reportInitFailure((uint64_t)this, a2, 1uLL, v8);
  return 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::createReporters(IOService *this, unsigned int a2)
{
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  _OWORD v43[2] = v3;
  v43[3] = v3;
  v43[0] = v3;
  v43[1] = v3;
  long long v41 = v3;
  long long v42 = v3;
  *(_OWORD *)__str = v3;
  *(_OWORD *)&char __str[16] = v3;
  v44.val[0] = (float32x4_t)vuzp1q_s32((int32x4_t)this[1].OSObject::OSObjectInterface::__vftable[102], (int32x4_t)this[1].OSObject::OSObjectInterface::__vftable[103]);
  v44.val[1] = 0uLL;
  v44.val[2] = (float32x4_t)xmmword_100371260;
  v44.val[3].i64[0] = 0x100000001;
  v44.val[3].i64[1] = 0x100000001;
  char v4 = (float *)v43;
  vst4q_f32(v4, v44);
  this[1].OSObject::OSObjectInterface::__vftable[197].init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))OSSet::withCapacity((OSSet *)0xA, a2);
  if (!this[1].OSObject::OSObjectInterface::__vftable[197].init) {
    goto LABEL_24;
  }
  this[1].OSObject::OSObjectInterface::__vftable[199].init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))IOHistogramReporter::with();
  uint64_t v5 = this[1].OSObject::OSObjectInterface::__vftable;
  init = (const OSMetaClassBase *)v5[199].init;
  if (!init) {
    goto LABEL_24;
  }
  int v7 = OSSet::setObject((OSSet *)v5[197].init, init);
  (*(void (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[199].init
                                                                        + 16))(this[1].OSObject::OSObjectInterface::__vftable[199].init);
  if (!v7) {
    goto LABEL_24;
  }
  this[1].OSObject::OSObjectInterface::__vftable[198].unsigned int free = (void (__cdecl *)(OSObjectInterface *__hidden))IOStateReporter::with((IOStateReporter *)this, (IOService *)2, 0xEu, 0, v8);
  uint64_t v9 = this[1].OSObject::OSObjectInterface::__vftable;
  unsigned int free = (const OSMetaClassBase *)v9[198].free;
  if (!free) {
    goto LABEL_24;
  }
  int v11 = OSSet::setObject((OSSet *)v9[197].init, free);
  (*(void (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[198].free
                                                                        + 16))(this[1].OSObject::OSObjectInterface::__vftable[198].free);
  if (!v11) {
    goto LABEL_24;
  }
  this[1].OSObject::OSObjectInterface::__vftable[197].unsigned int free = (void (__cdecl *)(OSObjectInterface *__hidden))IOSimpleReporter::with((IOSimpleReporter *)this, (IOService *)0x8000, 0, v12);
  unsigned int v13 = this[1].OSObject::OSObjectInterface::__vftable;
  unsigned int v14 = (const OSMetaClassBase *)v13[197].free;
  if (!v14) {
    goto LABEL_24;
  }
  int v15 = OSSet::setObject((OSSet *)v13[197].init, v14);
  (*(void (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[197].free
                                                                        + 16))(this[1].OSObject::OSObjectInterface::__vftable[197].free);
  if (!v15) {
    goto LABEL_24;
  }
  this[1].OSObject::OSObjectInterface::__vftable[199].unsigned int free = (void (__cdecl *)(OSObjectInterface *__hidden))IOStateReporter::with((IOStateReporter *)this, (IOService *)0x8010, 8u, 0, v16);
  unsigned int v17 = this[1].OSObject::OSObjectInterface::__vftable;
  unsigned int v18 = (const OSMetaClassBase *)v17[199].free;
  if (!v18) {
    goto LABEL_24;
  }
  int v19 = OSSet::setObject((OSSet *)v17[197].init, v18);
  (*(void (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[199].free
                                                                        + 16))(this[1].OSObject::OSObjectInterface::__vftable[199].free);
  if (v19
    && (this[1].OSObject::OSObjectInterface::__vftable[200].init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))IOSimpleReporter::with((IOSimpleReporter *)this, (IOService *)0x8000, 0, v20),
        unsigned int v21 = this[1].OSObject::OSObjectInterface::__vftable,
        (unsigned int v22 = (const OSMetaClassBase *)v21[200].init) != 0)
    && (int v23 = OSSet::setObject((OSSet *)v21[197].init, v22),
        (*(void (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[200].init
                                                                              + 16))(this[1].OSObject::OSObjectInterface::__vftable[200].init),
        v23))
  {
    strcpy(__str, "Rx Buffer Submit Fill Level");
    IOReporter::addChannel((IOReporter *)this[1].OSObject::OSObjectInterface::__vftable[199].free, 0x5278427546696CuLL, __str);
    uint64_t v24 = 0;
    unsigned int v25 = (unint64_t *)&kFillLevelStates;
    do
    {
      unint64_t v26 = *v25;
      v25 += 2;
      IOStateReporter::setStateID((IOStateReporter *)this[1].OSObject::OSObjectInterface::__vftable[199].free, 0x5278427546696CuLL, v24++, v26);
    }
    while (v24 != 8);
    strcpy(__str, "Power States");
    IOReporter::addChannel((IOReporter *)this[1].OSObject::OSObjectInterface::__vftable[198].free, 0x507772537465uLL, __str);
    for (uint64_t i = 0; i != 14; ++i)
      IOStateReporter::setStateID((IOStateReporter *)this[1].OSObject::OSObjectInterface::__vftable[198].free, 0x507772537465uLL, i, gPowerStateIDs[i]);
    IOStateReporter::setChannelState((IOStateReporter *)this[1].OSObject::OSObjectInterface::__vftable[198].free, 0x507772537465uLL, gPowerStateIDs[SLODWORD(this[1].OSObject::OSObjectInterface::__vftable[76].free)]);
    uint64_t v28 = 0;
    uint64_t v29 = 805306368;
    do
    {
      snprintf(__str, 0x40uLL, "%s", eventChannels[v28]);
      IOReporter::addChannel((IOReporter *)this[1].OSObject::OSObjectInterface::__vftable[197].free, v29 | 0x45763000507274, __str);
      v29 += 0x1000000;
      ++v28;
    }
    while (v28 != 9);
    uint64_t v30 = 0;
    unsigned int v31 = (char *)&kReportTxCompleteStatusChannel;
    do
    {
      for (uint64_t j = 0; j != 112; j += 16)
      {
        IOReporter::addChannel((IOReporter *)this[1].OSObject::OSObjectInterface::__vftable[200].init, *(void *)&v31[j], *(const char **)&v31[j + 8]);
        IOReporter::addChannel((IOReporter *)this[1].OSObject::OSObjectInterface::__vftable[200].init, *(void *)&v31[j + 112], *(const char **)&v31[j + 120]);
      }
      ++v30;
      v31 += 224;
    }
    while (v30 != 4);
    IOReportLegend::addReporterLegend((IOReportLegend *)this, (IOService *)this[1].OSObject::OSObjectInterface::__vftable[198].free, (IOReporter *)"AppleBCMWLANBusInterfacePCIe", "Power States", v33);
    IOReportLegend::addReporterLegend((IOReportLegend *)this, (IOService *)this[1].OSObject::OSObjectInterface::__vftable[199].init, (IOReporter *)"AppleBCMWLANBusInterfacePCIe", "DS Exit Delay", v34);
    IOReportLegend::addReporterLegend((IOReportLegend *)this, (IOService *)this[1].OSObject::OSObjectInterface::__vftable[197].free, (IOReporter *)"AppleBCMWLANBusInterfacePCIe", "Bus Events", v35);
    IOReportLegend::addReporterLegend((IOReportLegend *)this, (IOService *)this[1].OSObject::OSObjectInterface::__vftable[199].free, (IOReporter *)"AppleBCMWLANBusInterfacePCIe", "Queue Fill", v36);
    IOReportLegend::addReporterLegend((IOReportLegend *)this, (IOService *)this[1].OSObject::OSObjectInterface::__vftable[200].init, (IOReporter *)"AppleBCMWLANBusInterfacePCIe", "Tx Complete Status", v37);
    IOReportLegend::addReporterLegend((IOReportLegend *)this, (IOService *)this[1].OSObject::OSObjectInterface::__vftable[198].init, (IOReporter *)"Backplane Accesses", "Accesses", v38);
    return 1;
  }
  else
  {
LABEL_24:
    AppleBCMWLANBusInterfacePCIe::destroyReporters(this);
    return 0;
  }
}

uint64_t AppleBCMWLANBusInterfacePCIe::initPCIeDatapathStreams(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t v10 = 0;
  AppleBCMWLANBusInterface::getLogPipesAndStreams((uint64_t)this, 0, &v10, 0, 0, 0);
  if (!v10) {
    return 0;
  }
  uint64_t v2 = IOMallocZeroTyped();
  if (!v2)
  {
    uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
    if (!result) {
      return result;
    }
    AppleBCMWLANBusInterface::getLogger(this);
    uint64_t result = CCLogStream::shouldLog();
    if (!result) {
      return result;
    }
    Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
    CCLogStream::logCrit(Logger, "[dk] %s@%d:Failed to allocate memory\n", "initPCIeDatapathStreams", 16281);
    return 0;
  }
  uint64_t v3 = v2;
  *(_DWORD *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = -1;
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(unsigned char *)(v2 + 88) = 0;
  *(void *)(v2 + 48) = this;
  *(void *)(v2 + 56) = 0;
  *(_WORD *)(v2 + 336) = 150;
  if (AppleBCMWLAN_isVerboseDebugLoggingAllowed())
  {
    *(_DWORD *)(v3 + 8) = 127;
    *(void *)(v3 + 24) = 7;
  }
  unint64_t bytes = 0xA5A5000000000008;
  *(void *)(v3 + 328) = OSData::withBytes(&bytes, 8uLL);
  char v4 = (const OSMetaClassBase *)CCStream::withPipeAndName();
  *(void *)(*((void *)this + 9) + 4584) = OSMetaClassBase::safeMetaCast(v4, gCCLogStreamMetaClass);
  (*(void (**)(void))(**(void **)(v3 + 328) + 16))(*(void *)(v3 + 328));
  if (AppleBCMWLAN_isVerboseDebugLoggingAllowed())
  {
    *(_DWORD *)(v3 + 8) = 127;
    *(void *)(v3 + 24) = 3;
  }
  unint64_t bytes = 0xA5A500000000000DLL;
  *(void *)(v3 + 328) = OSData::withBytes(&bytes, 8uLL);
  uint64_t v5 = (const OSMetaClassBase *)CCStream::withPipeAndName();
  *(void *)(*((void *)this + 9) + 4592) = OSMetaClassBase::safeMetaCast(v5, gCCLogStreamMetaClass);
  (*(void (**)(void))(**(void **)(v3 + 328) + 16))(*(void *)(v3 + 328));
  if (AppleBCMWLAN_isVerboseDebugLoggingAllowed())
  {
    *(_DWORD *)(v3 + 8) = 127;
    *(void *)(v3 + 24) = 8195;
  }
  unint64_t bytes = 0xA5A5000000000007;
  *(void *)(v3 + 328) = OSData::withBytes(&bytes, 8uLL);
  uint64_t v6 = (const OSMetaClassBase *)CCStream::withPipeAndName();
  *(void *)(*((void *)this + 9) + 4600) = OSMetaClassBase::safeMetaCast(v6, gCCLogStreamMetaClass);
  (*(void (**)(void))(**(void **)(v3 + 328) + 16))(*(void *)(v3 + 328));
  IOFree((void *)v3, 0x358uLL);
  return 1;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::start(AppleBCMWLANBusInterfacePCIe *this, IOService *a2)
{
  return AppleBCMWLANBusInterfacePCIe::start((IOService *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANBusInterfacePCIe::allocateIPCTimers(OSObject *this, IOService *a2)
{
  uint64_t v4 = ((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[1].isEqualTo)(this);
  *((void *)this[1].ivars + 455) = AppleBCMWLANPCIeDoorbell::withCallbacks((uint64_t)this, (uint64_t)AppleBCMWLANBusInterfacePCIe::commitRings, v4);
  if (*((void *)this[1].ivars + 455))
  {
    *((void *)this[1].ivars + 405) = AppleBCMWLANCallbackEventSource::withCallbacks(this, (OSObject *)AppleBCMWLANBusInterfacePCIe::reportCompleted, v5);
    ivars = this[1].ivars;
    if (*((void *)ivars + 405))
    {
      (*(void (**)(void))(**((void **)ivars + 433) + 64))(*((void *)ivars + 433));
      (*(void (**)(void))(**((void **)this[1].ivars + 405) + 64))(*((void *)this[1].ivars + 405));
      ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[1].isEqualTo)(this);
      *((void *)this[1].ivars + 449) = IO80211TimerSource::allocWithParams();
      if (*((void *)this[1].ivars + 449))
      {
        ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[1].isEqualTo)(this);
        *((void *)this[1].ivars + 450) = IO80211TimerSource::allocWithParams();
        if (*((void *)this[1].ivars + 450))
        {
          ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[1].isEqualTo)(this);
          *((void *)this[1].ivars + 451) = IO80211TimerSource::allocWithParams();
          if (*((void *)this[1].ivars + 451))
          {
            ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[1].isEqualTo)(this);
            *((void *)this[1].ivars + 138) = IO80211TimerSource::allocWithParams();
            if (*((void *)this[1].ivars + 138))
            {
              ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[1].isEqualTo)(this);
              *((void *)this[1].ivars + 479) = IO80211TimerSource::allocWithParams();
              if (*((void *)this[1].ivars + 479))
              {
                ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[1].isEqualTo)(this);
                *((void *)this[1].ivars + 480) = IO80211TimerSource::allocWithParams();
                if (*((void *)this[1].ivars + 480)) {
                  return 0;
                }
                if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
                {
                  AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
                  if (CCLogStream::shouldLog())
                  {
                    Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
                    CCLogStream::logCrit(Logger, "[dk] %s@%d: Unable to create adjust busy timer\n", "allocateIPCTimers", 2306);
                  }
                }
                int v8 = 2307;
              }
              else
              {
                if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
                {
                  AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
                  if (CCLogStream::shouldLog())
                  {
                    int v15 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
                    CCLogStream::logCrit(v15, "[dk] %s@%d: Unable to create debug ring create timer\n", "allocateIPCTimers", 2297);
                  }
                }
                int v8 = 2298;
              }
            }
            else
            {
              if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
              {
                AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
                if (CCLogStream::shouldLog())
                {
                  unsigned int v14 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
                  CCLogStream::logCrit(v14, "[dk] %s@%d: Unable to create flow ring create timer\n", "allocateIPCTimers", 2289);
                }
              }
              int v8 = 2290;
            }
          }
          else
          {
            if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
            {
              AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
              if (CCLogStream::shouldLog())
              {
                unsigned int v13 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
                CCLogStream::logCrit(v13, "[dk] %s@%d: Unable to create attach D0 ack timer\n", "allocateIPCTimers", 2281);
              }
            }
            int v8 = 2282;
          }
        }
        else
        {
          if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
          {
            AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
            if (CCLogStream::shouldLog())
            {
              unint64_t v12 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
              CCLogStream::logCrit(v12, "[dk] %s@%d: Unable to create attach bus timer\n", "allocateIPCTimers", 2273);
            }
          }
          int v8 = 2274;
        }
      }
      else
      {
        if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
        {
          AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          if (CCLogStream::shouldLog())
          {
            int v11 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
            CCLogStream::logCrit(v11, "[dk] %s@%d: Unable to create delete flow timer\n", "allocateIPCTimers", 2265);
          }
        }
        int v8 = 2266;
      }
    }
    else
    {
      if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
      {
        AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v10 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          CCLogStream::logAlert(v10, "[dk] %s@%d:Failed to create link change signal handler!\n", "allocateIPCTimers", 2253);
        }
      }
      int v8 = 2254;
    }
  }
  else
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v9 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(v9, "[dk] %s@%d:Failed to creat doorbell ringer object!\n", "allocateIPCTimers", 2245);
      }
    }
    int v8 = 2246;
  }
  AppleBCMWLANBusInterface::reportInitFailure((uint64_t)this, a2, 1uLL, v8);
  return 3758097086;
}

uint64_t AppleBCMWLANBusInterfacePCIe::commitRings(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t v1 = *((void *)this + 9);
  if (*(unsigned char *)(v1 + 1304) || !*(void *)(v1 + 3248) || *(unsigned char *)(v1 + 3722)) {
    return 0;
  }
  if (*(unsigned char *)(v1 + 3706))
  {
    uint64_t v2 = 3758097112;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:link down detected. Bailing out\n");
      }
    }
    return v2;
  }
  AppleBCMWLANBusInterfacePCIe::updateRxBufFillState(this);
  uint64_t v6 = (_DWORD *)*((void *)this + 9);
  BOOL v7 = v6[711] != 2 || (v6[306] - 9) < 0xFFFFFFFE;
  int v8 = v6[1122];
  if (v8) {
    goto LABEL_46;
  }
  uint64_t v9 = AppleBCMWLANBusInterfacePCIe::retainCTS(this, 16884, 2);
  uint64_t v10 = *((void *)this + 9);
  if (*(unsigned char *)(v10 + 3706))
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v20 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v20, "[dk] %s@%d:link down detected. Bailing out\n", "commitRings", 16889);
      }
    }
    int v11 = this;
    __int16 v12 = 16890;
LABEL_24:
    AppleBCMWLANBusInterfacePCIe::releaseCTS(v11, v12);
    return 0;
  }
  if (*(unsigned char *)(v10 + 1304) || !*(void *)(v10 + 3248) || *(unsigned char *)(v10 + 3722))
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v21 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v21, "[dk] %s@%d:bus state changed: halted %u, device exists %u, in D3 %u\n", "commitRings", 16895, *(unsigned __int8 *)(*((void *)this + 9) + 1304), *(void *)(*((void *)this + 9) + 3248) != 0, *(unsigned __int8 *)(*((void *)this + 9) + 3722));
      }
    }
    int v11 = this;
    __int16 v12 = 16896;
    goto LABEL_24;
  }
  uint64_t v13 = v9;
  if (!v9)
  {
LABEL_46:
    OSSynchronizeIO();
    if (v7)
    {
      AppleBCMWLANBusInterfacePCIe::hitDoorbell(this, v17);
      uint64_t v2 = 0;
    }
    else
    {
      uint64_t v2 = 3758097112;
    }
    if ((v8 & 1) == 0) {
      AppleBCMWLANBusInterfacePCIe::releaseCTS(this, 16943);
    }
  }
  else
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v22 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        int v23 = (const char *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *, uint64_t))(*(void *)this + 104))(this, v13);
        CCLogStream::logAlert(v22, "[dk] %s@%d:retainCTS Not kIOReturnSuccess(%s)n", "commitRings", 16904, v23);
      }
    }
    if (v13 == -469794030)
    {
      FaultReporter = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(this);
      CCFaultReporter::reportFault(FaultReporter, 6u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANBusInterfacePCIe.cpp", 0x421Cu, "commitRings", 0, -469794030, 0);
    }
    else if (v13 == -536870186)
    {
      uint64_t v14 = *((void *)this + 9);
      if (*(unsigned char *)(v14 + 3777))
      {
        int v15 = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(this);
        CCFaultReporter::reportFault(v15, 6u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANBusInterfacePCIe.cpp", 0x420Cu, "commitRings", 0, -469794019, 0);
        uint64_t v14 = *((void *)this + 9);
      }
      if (*(_DWORD *)(v14 + 3312) == 4399 && !*(unsigned char *)(v14 + 3713))
      {
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            unsigned int v25 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v25, "[dk] %s@%d:Enabling WA for Deep exit timeout to Full powercycle instead of FLR and to not collect logs", "commitRings", 16912);
          }
        }
        *(unsigned char *)(*((void *)this + 9) + 3706) = 1;
        *(unsigned char *)(*((void *)this + 9) + 4573) = 1;
      }
      unint64_t v16 = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(this);
      CCFaultReporter::reportFault(v16, 5u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANBusInterfacePCIe.cpp", 0x4215u, "commitRings", 0, -469794019, 0);
      if (!*(_DWORD *)(*((void *)this + 9) + 3728))
      {
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v24 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v24, "[dk] %s@%d:Deep sleep unit test crash commit rings\n", "commitRings", 16920);
          }
        }
        *(_DWORD *)(*((void *)this + 9) + 3728) = 1000;
      }
    }
    uint64_t v2 = 3758097112;
    AppleBCMWLANBusInterfacePCIe::releaseCTS(this, 16927);
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        int v19 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v19, "[dk] %s@%d:commitRings: failed to acquire CTS\n");
      }
    }
  }
  return v2;
}

uint64_t AppleBCMWLANBusInterfacePCIe::reportCompleted(AppleBCMWLANBusInterfacePCIe *this, OSObject *a2, IO80211WorkSource *a3)
{
  *(void *)(*((void *)this + 9) + 4792) = *(void *)(*((void *)this + 9) + 4784);
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  AppleBCMWLANBusInterface::getTxCompletionDescriptorCommandQueueSize(this);
  AppleBCMWLANBusInterface::getRxDescriptorCommandQueueSize(this);
  AppleBCMWLANBusInterface::getRxDescriptorEventQueueSize(this);
  kdebug_trace();
  if (AppleBCMWLANBusInterface::getTxCompletionDescriptorCommandQueueSize(this))
  {
    memset(v6, 170, sizeof(v6));
    AppleBCMWLANBusInterface::getTxCompletionDescriptor(this, (__n128 *)v6);
    AppleBCMWLANBusInterface::reportCompletedTxIOs((uint64_t)this);
  }
  if (AppleBCMWLANBusInterface::getRxDescriptorCommandQueueSize(this)
    || AppleBCMWLANBusInterface::getRxDescriptorEventQueueSize(this))
  {
    *(void *)uint64_t v6 = AppleBCMWLANBusInterface::getRxDescriptor(this);
    *(void *)&v6[8] = v4;
    AppleBCMWLANBusInterface::enqueueRxIOs((uint64_t)this);
  }
  kdebug_trace();
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  return 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::deleteFlowTimeout(AppleBCMWLANBusInterfacePCIe *this)
{
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:Timed out waiting for ring (%d) to delete, epoch=%llu\n", "deleteFlowTimeout", 9321, *(_DWORD *)(*((void *)this + 9) + 3008), *(void *)(*((void *)this + 9) + 8 * *(unsigned int *)(*((void *)this + 9) + 3008) + 736));
    }
  }
  uint64_t v2 = *((void *)this + 9) + 8 * *(unsigned int *)(*((void *)this + 9) + 3008);
  if (*(void *)(v2 + 736)
    || !(*(unsigned int (**)(AppleBCMWLANBusInterfacePCIe *, uint64_t))(*(void *)this + 600))(this, v2 + 736))
  {
    FaultReporter = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(this);
    uint64_t result = CCFaultReporter::reportFault(FaultReporter, 5u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANBusInterfacePCIe.cpp", 0x2471u, "deleteFlowTimeout", 0, -469794017, "LastRingDelete=%d", *(_DWORD *)(*((void *)this + 9) + 3008));
    *(void *)(*((void *)this + 9) + 8 * *(unsigned int *)(*((void *)this + 9) + 3008) + 736) = 0;
  }
  else
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        BOOL v7 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logCrit(v7, "[dk] %s@%d:Delaying Ring deletion Failure due to pending work epoch %llu\n", "deleteFlowTimeout", 9324, *(void *)(*((void *)this + 9) + 8 * *(unsigned int *)(*((void *)this + 9) + 3008) + 736));
      }
    }
    uint64_t v3 = *(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 3592) + 120);
    return v3();
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::attachBusTimeout(AppleBCMWLANBusInterface *a1)
{
  if (AppleBCMWLANBusInterface::getLogger(a1))
  {
    AppleBCMWLANBusInterface::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:Timed out waiting for bus to attach\n", "attachBusTimeout", 4229);
    }
  }
  if (AppleBCMWLANBusInterface::getFaultReporter(a1))
  {
    FaultReporter = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(a1);
    return CCFaultReporter::reportFault(FaultReporter, 5u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANBusInterfacePCIe.cpp", 0x1089u, "attachBusTimeout", 0, -469794016, 0);
  }
  else
  {
    uint64_t result = AppleBCMWLANBusInterface::getLogger(a1);
    if (result)
    {
      AppleBCMWLANBusInterface::getLogger(a1);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v5 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
        return CCLogStream::logAlert(v5, "[dk] %s@%d:getFaultReporter() is null!\n", "attachBusTimeout", 4235);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::d0AckTimeout(AppleBCMWLANBusInterface *a1)
{
  if (AppleBCMWLANBusInterface::getLogger(a1))
  {
    AppleBCMWLANBusInterface::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:Timed out waiting for D0 ack\n", "d0AckTimeout", 4242);
    }
  }
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  IOInterruptDispatchSource::GetLastInterrupt(*(IOInterruptDispatchSource **)(*((void *)a1 + 9) + 3264), &v10, &v9, 0);
  uint64_t v2 = *((void *)a1 + 9);
  if (*(void *)(v2 + 4760) >= v9 || *(unsigned char *)(v2 + 3624))
  {
    if (*(unsigned char *)(v2 + 3720)) {
      unsigned int v3 = 5;
    }
    else {
      unsigned int v3 = 1;
    }
    FaultReporter = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(a1);
    if (AppleOLYHALPlatformFunction::getLowPowerDetectedDK(*(AppleOLYHALPlatformFunction **)(*((void *)a1 + 9) + 5176), 0))int v5 = -469794008; {
    else
    }
      int v5 = -469794013;
    return CCFaultReporter::reportFault(FaultReporter, v3, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANBusInterfacePCIe.cpp", 0x10ABu, "d0AckTimeout", 0, v5, 0);
  }
  else
  {
    if (AppleBCMWLANBusInterface::getLogger(a1))
    {
      AppleBCMWLANBusInterface::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        int v8 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
        CCLogStream::logAlert(v8, "[dk] %s@%d:Waiting again for D0 ack due to pending (primary) interrupt\n", "d0AckTimeout", 4256);
      }
    }
    *(unsigned char *)(*((void *)a1 + 9) + 3624) = 1;
    return (*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)a1 + 9) + 3608) + 120))(*(void *)(*((void *)a1 + 9) + 3608), 1000);
  }
}

uint64_t AppleBCMWLANBusInterfacePCIe::createFlowRingTimeout(AppleBCMWLANBusInterfacePCIe *this)
{
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:Timed out waiting for ring create, epoch=%llu\n", "createFlowRingTimeout", 12185, *(void *)(*((void *)this + 9) + 8 * *(unsigned int *)(*((void *)this + 9) + 3012) + 384));
    }
  }
  uint64_t v2 = *((void *)this + 9);
  uint64_t v3 = *(unsigned int *)(v2 + 3012);
  uint64_t v4 = v2 + 8 * v3;
  if (!*(void *)(v4 + 384))
  {
    if ((*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *, uint64_t))(*(void *)this + 600))(this, v4 + 384))
    {
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          int v11 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logCrit(v11, "[dk] %s@%d:Delaying Ring creation Failure due to pending work epoch %llu\n", "createFlowRingTimeout", 12188, *(void *)(*((void *)this + 9) + 8 * *(unsigned int *)(*((void *)this + 9) + 3012) + 384));
        }
      }
      int v5 = *(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 1104) + 120);
      return v5();
    }
    uint64_t v2 = *((void *)this + 9);
    uint64_t v3 = *(unsigned int *)(v2 + 3012);
  }
  *(void *)(v2 + 8 * v3 + 384) = 0;
  FaultReporter = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(this);
  uint64_t result = CCFaultReporter::reportFault(FaultReporter, 5u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANBusInterfacePCIe.cpp", 0x2FA2u, "createFlowRingTimeout", 0, -469794007, 0);
  if (result)
  {
    int v8 = result;
    uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
    if (result)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        unint64_t v10 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        return CCLogStream::logCrit(v10, "[dk] %s@%d:Failed to report fault with 0x%x\n", "createFlowRingTimeout", 12196, v8);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::createDebugRingTimeout(AppleBCMWLANBusInterface *a1)
{
  if (AppleBCMWLANBusInterface::getLogger(a1))
  {
    AppleBCMWLANBusInterface::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:Timed out waiting for debug ring create\n", "createDebugRingTimeout", 20295);
    }
  }
  FaultReporter = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(a1);
  uint64_t result = CCFaultReporter::reportFault(FaultReporter, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANBusInterfacePCIe.cpp", 0x4F49u, "createDebugRingTimeout", 0, -469794022, 0);
  if (result)
  {
    int v4 = result;
    uint64_t result = AppleBCMWLANBusInterface::getLogger(a1);
    if (result)
    {
      AppleBCMWLANBusInterface::getLogger(a1);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v6 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
        return CCLogStream::logCrit(v6, "[dk] %s@%d:Failed to report fault with 0x%x\n", "createDebugRingTimeout", 20299, v4);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::handleAdjustBusy(IOService *this)
{
  int v2 = 1;
  atomic_compare_exchange_strong((atomic_uint *volatile)&this[1].OSObject::OSObjectInterface::__vftable[240].free, (unsigned int *)&v2, 0);
  if (v2 == 1)
  {
    IOService::AdjustBusy(this, -1, 0);
    unsigned int v6 = 0;
    IOService::GetBusyState(this, &v6, 0);
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:AdjustBusy(-1) timeout in %u ms! busystate %u, fAdjustBusyCnt %u\n", "handleAdjustBusy", 22179, 30000, v6, LODWORD(this[1].OSObject::OSObjectInterface::__vftable[240].free));
      }
    }
  }
  else
  {
    unsigned int v6 = 0;
    IOService::GetBusyState(this, &v6, 0);
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        int v5 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(v5, "[dk] %s@%d:AdjustBusy timeout in %u ms! busystate %u, Not adjusting: fAdjustBusyCnt %u\n", "handleAdjustBusy", 22186, 30000, v6, LODWORD(this[1].OSObject::OSObjectInterface::__vftable[240].free));
      }
    }
  }
  return io80211_os_log();
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::allocateIPCTimers(AppleBCMWLANBusInterfacePCIe *this, IOService *a2)
{
  return AppleBCMWLANBusInterfacePCIe::allocateIPCTimers((OSObject *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANBusInterfacePCIe::allocateIPCDescriptorQueues(AppleBCMWLANBusInterfacePCIe *this, IOService *a2)
{
  int v4 = AppleBCMWLANCommandQueue::withCapacity((AppleBCMWLANCommandQueue *)0x80);
  AppleBCMWLANBusInterface::setTxDescriptorCommandQueue((uint64_t)this, (uint64_t)v4);
  AppleBCMWLANBusInterface::getTxDescriptor(this, &v15);
  if (v15.n128_u64[1])
  {
    int v5 = AppleBCMWLANCommandQueue::withCapacity((AppleBCMWLANCommandQueue *)0x80);
    AppleBCMWLANBusInterface::setTxCompletionDescriptorCommandQueue((uint64_t)this, (uint64_t)v5);
    AppleBCMWLANBusInterface::getTxCompletionDescriptor(this, &v15);
    if (v15.n128_u64[1])
    {
      AppleBCMWLANBusInterface::setTxDescriptorPacketactiveDataACs((uint64_t)this, 0xFFFF);
      unsigned int v6 = AppleBCMWLANCommandQueue::withCapacity((AppleBCMWLANCommandQueue *)0x80);
      AppleBCMWLANBusInterface::setTxCommittedCommandDescriptorQueue((uint64_t)this, (uint64_t)v6);
      AppleBCMWLANBusInterface::getTxCommittedCommandDescriptor(this);
      if (v7)
      {
        int v8 = (AppleBCMWLANObjectQueue *)AppleBCMWLANObjectQueue::withCapacity((AppleBCMWLANObjectQueue *)0x200);
        AppleBCMWLANBusInterface::setRxDescriptorEventQueue((uint64_t)this, v8);
        if (AppleBCMWLANBusInterface::getRxDescriptor(this))
        {
          unint64_t v9 = (AppleBCMWLANObjectQueue *)AppleBCMWLANObjectQueue::withCapacity((AppleBCMWLANObjectQueue *)0x200);
          AppleBCMWLANBusInterface::setRxDescriptorCommandQueue((uint64_t)this, v9);
          AppleBCMWLANBusInterface::getRxDescriptor(this);
          if (v10) {
            return 0;
          }
          if (AppleBCMWLANBusInterface::getLogger(this))
          {
            AppleBCMWLANBusInterface::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
              CCLogStream::logCrit(Logger, "[dk] %s@%d: Unable to allocate command input queue\n", "allocateIPCDescriptorQueues", 2345);
            }
          }
          int v12 = 2346;
        }
        else
        {
          if (AppleBCMWLANBusInterface::getLogger(this))
          {
            AppleBCMWLANBusInterface::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v13 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
              CCLogStream::logCrit(v13, "[dk] %s@%d: Unable to allocate event input queue\n", "allocateIPCDescriptorQueues", 2338);
            }
          }
          int v12 = 2339;
        }
      }
      else
      {
        int v12 = 2332;
      }
    }
    else
    {
      int v12 = 2325;
    }
  }
  else
  {
    int v12 = 2319;
  }
  AppleBCMWLANBusInterface::reportInitFailure((uint64_t)this, a2, 1uLL, v12);
  return 3758097086;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::allocateIPCDescriptorQueues(AppleBCMWLANBusInterfacePCIe *this, IOService *a2)
{
  return AppleBCMWLANBusInterfacePCIe::allocateIPCDescriptorQueues((AppleBCMWLANBusInterfacePCIe *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANBusInterfacePCIe::allocateIPCPools(AppleBCMWLANBusInterfacePCIe *this, IOService *a2)
{
  uint64_t v3 = (IOCommandPool *)(*(uint64_t (**)(void, IOService *))(**(void **)(*((void *)this + 9) + 3464)
                                                                       + 168))(*(void *)(*((void *)this + 9) + 3464), a2);
  *(void *)(*((void *)this + 9) + 3512) = IOCommandPool::withQueue(v3, v4);
  uint64_t v5 = *((void *)this + 9);
  if (*(void *)(v5 + 3512))
  {
    unsigned int v6 = (IOCommandPool *)(*(uint64_t (**)(void))(**(void **)(v5 + 3464) + 168))(*(void *)(v5 + 3464));
    *(void *)(*((void *)this + 9) + 3520) = IOCommandPool::withQueue(v6, v7);
    uint64_t v8 = *((void *)this + 9);
    if (*(void *)(v8 + 3520))
    {
      unint64_t v9 = (IOCommandPool *)(*(uint64_t (**)(void))(**(void **)(v8 + 3464) + 168))(*(void *)(v8 + 3464));
      *(void *)(*((void *)this + 9) + 3528) = IOCommandPool::withQueue(v9, v10);
      uint64_t v11 = *((void *)this + 9);
      if (*(void *)(v11 + 3528))
      {
        int v12 = (IOCommandPool *)(*(uint64_t (**)(void))(**(void **)(v11 + 3464) + 168))(*(void *)(v11 + 3464));
        *(void *)(*((void *)this + 9) + 3536) = IOCommandPool::withQueue(v12, v13);
        uint64_t v14 = *((void *)this + 9);
        if (*(void *)(v14 + 3536))
        {
          __n128 v15 = (IOCommandPool *)(*(uint64_t (**)(void))(**(void **)(v14 + 3464) + 168))(*(void *)(v14 + 3464));
          *(void *)(*((void *)this + 9) + 3544) = IOCommandPool::withQueue(v15, v16);
          if (*(void *)(*((void *)this + 9) + 3544))
          {
            AppleBCMWLANBusInterface::getIO80211FaultReporter(this);
            *(void *)(*((void *)this + 9) + 1328) = IO80211BufferPool::withOptions();
            if (*(void *)(*((void *)this + 9) + 1328))
            {
              AppleBCMWLANBusInterface::getIO80211FaultReporter(this);
              *(void *)(*((void *)this + 9) + 1336) = IO80211BufferPool::withOptions();
              if (*(void *)(*((void *)this + 9) + 1336))
              {
                return 0;
              }
              else
              {
                uint64_t v17 = 3758097086;
                if (AppleBCMWLANBusInterface::getLogger(this))
                {
                  AppleBCMWLANBusInterface::getLogger(this);
                  if (CCLogStream::shouldLog())
                  {
                    Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                    CCLogStream::logCrit(Logger, "[dk] %s@%d: Unable to allocate debug buffer pool\n");
                  }
                }
              }
            }
            else
            {
              uint64_t v17 = 3758097086;
              if (AppleBCMWLANBusInterface::getLogger(this))
              {
                AppleBCMWLANBusInterface::getLogger(this);
                if (CCLogStream::shouldLog())
                {
                  int v23 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                  CCLogStream::logCrit(v23, "[dk] %s@%d: Unable to allocate control RX Buffer pool\n");
                }
              }
            }
          }
          else
          {
            uint64_t v17 = 3758097086;
            if (AppleBCMWLANBusInterface::getLogger(this))
            {
              AppleBCMWLANBusInterface::getLogger(this);
              if (CCLogStream::shouldLog())
              {
                unsigned int v22 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                CCLogStream::logCrit(v22, "[dk] %s@%d: Unable to allocate debug Rx IO pool\n");
              }
            }
          }
        }
        else
        {
          uint64_t v17 = 3758097086;
          if (AppleBCMWLANBusInterface::getLogger(this))
          {
            AppleBCMWLANBusInterface::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              unsigned int v21 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
              CCLogStream::logCrit(v21, "[dk] %s@%d: Unable to allocate data Rx IO pool\n");
            }
          }
        }
      }
      else
      {
        uint64_t v17 = 3758097086;
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            unint64_t v20 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logCrit(v20, "[dk] %s@%d: Unable to allocate data Tx IO pool\n");
          }
        }
      }
    }
    else
    {
      uint64_t v17 = 3758097086;
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          int v19 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logCrit(v19, "[dk] %s@%d: Unable to allocate control Rx IO pool\n");
        }
      }
    }
  }
  else
  {
    uint64_t v17 = 3758097086;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v18 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logCrit(v18, "[dk] %s@%d: Unable to allocate control Tx IO pool\n");
      }
    }
  }
  return v17;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::allocateIPCPools(AppleBCMWLANBusInterfacePCIe *this, IOService *a2)
{
  return AppleBCMWLANBusInterfacePCIe::allocateIPCPools((AppleBCMWLANBusInterfacePCIe *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANBusInterfacePCIe::setupBootMSI(AppleBCMWLANBusInterfacePCIe *this)
{
  if (*(void *)(*((void *)this + 9) + 3480)) {
    return 0;
  }
  if (IO80211WorkQueue::Create())
  {
    uint64_t v1 = 3758097086;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logCrit(Logger, "[dk] %s@%d:Unable to allocate work queue for boot msi\n", "setupBootMSI", 2475);
      }
    }
  }
  else
  {
    *(void *)(*((void *)this + 9) + 3488) = IO80211CommandGate::allocWithParams();
    if (*(void *)(*((void *)this + 9) + 3488)) {
      return 0;
    }
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v6 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logCrit(v6, "[dk] %s@%d:Unable to allocate command gate for boot msi\n", "setupBootMSI", 2482);
      }
    }
    uint64_t v1 = 3758097086;
    uint64_t v5 = *(void *)(*((void *)this + 9) + 3480);
    if (v5)
    {
      (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
      *(void *)(*((void *)this + 9) + 3480) = 0;
    }
  }
  return v1;
}

uint64_t AppleBCMWLANBusInterfacePCIe::deferredStart(IOService *this)
{
  Provider = (IOService *)IOService::GetProvider(this);
  uint64_t v67 = 0;
  long long v65 = 0u;
  long long v66 = 0u;
  if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
  {
    AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:enter, this[%p] fPCIeBus[%p]\n", "deferredStart", 2556, this, this[1].OSObject::OSObjectInterface::__vftable[203].init);
    }
  }
  uint64_t v3 = 3758097084;
  uint64_t started = 3758097084;
  if (BYTE2(this[1].OSObject::OSObjectInterface::__vftable[324].free))
  {
    uint64_t started = AppleBCMWLANBusInterfacePCIe::startOLYHAL((AppleBCMWLANBusInterfacePCIe *)this);
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v47 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logInfo(v47, "[dk] %s@%d:startOLYHAL finished with status 0x%x\n", "deferredStart", 2585, started);
      }
    }
  }
  uint64_t v5 = this[1].OSObject::OSObjectInterface::__vftable;
  if (!v5[323].free)
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v50 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(v50, "[dk] %s@%d:Failed to find platform function\n", "deferredStart", 2590);
      }
    }
    unsigned int v32 = (AppleBCMWLANBusInterfacePCIe *)this;
    unsigned int v33 = Provider;
    uint64_t v34 = 9;
    int v35 = 2591;
    goto LABEL_52;
  }
  init = (AppleOLYHALPortInterfacePCIe *)v5[324].init;
  if (!init)
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v53 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(v53, "[dk] %s@%d:Failed to find function-pcieport_on function\n", "deferredStart", 2601);
      }
    }
    unsigned int v32 = (AppleBCMWLANBusInterfacePCIe *)this;
    unsigned int v33 = Provider;
    uint64_t v34 = 1;
    int v35 = 2602;
LABEL_52:
    AppleBCMWLANBusInterface::reportInitFailure((uint64_t)v32, v33, v34, v35);
    IOService::Stop(this, Provider, 0);
    goto LABEL_94;
  }
  if (AppleOLYHALPortInterfacePCIe::isPortControlAMFMManagedDK(init, 0))
  {
    BYTE5(this[1].OSObject::OSObjectInterface::__vftable[231].free) = 1;
    LODWORD(this[1].OSObject::OSObjectInterface::__vftable[178].init) = 0;
    LODWORD(this[1].OSObject::OSObjectInterface::__vftable[289].free) = 0;
  }
  uint64_t v7 = this[1].OSObject::OSObjectInterface::__vftable;
  uint64_t v8 = (AppleOLYHALPortInterfacePCIe *)v7[324].init;
  if (v8)
  {
    AppleOLYHALPortInterfacePCIe::enableDumpLogBTResetDK(v8, BYTE6(v7[275].free), 0);
    uint64_t v8 = (AppleOLYHALPortInterfacePCIe *)this[1].OSObject::OSObjectInterface::__vftable[324].init;
  }
  if (AppleOLYHALPortInterfacePCIe::isPortControlAMFMManagedDK(v8, 0))
  {
    setPropertyHelper(this, "IOPMResetPowerStateOnWake", kOSBooleanTrue);
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v54 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(v54, "[dk] %s@%d:Opt-in manual S2R port control\n", "deferredStart", 2633);
      }
    }
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[1].isEqualTo)(this);
    this[1].OSObject::OSObjectInterface::__vftable[227].init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))IO80211TimerSource::allocWithParams();
    if (!this[1].OSObject::OSObjectInterface::__vftable[227].init)
    {
      if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
      {
        AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        if (CCLogStream::shouldLog())
        {
          long long v58 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          CCLogStream::logAlert(v58, "[dk] %s@%d:Failed to create external reset timer\n", "deferredStart", 2640);
        }
      }
    }
  }
  unint64_t v9 = this[1].OSObject::OSObjectInterface::__vftable;
  if (HIDWORD(v9[177].free) != 2)
  {
    LOBYTE(v9[77].init) = 1;
    AppleOLYHALPortInterfacePCIe::setDeviceWakeDK((AppleOLYHALPortInterfacePCIe *)this[1].OSObject::OSObjectInterface::__vftable[324].init, 1, 0);
  }
  if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
  {
    uint64_t v10 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
    if (CCLogStream::shouldLog(v10, 0x2000uLL))
    {
      if (!this[1].OSObject::OSObjectInterface::__vftable[196].free)
      {
        uint64_t v11 = (AppleBCMWLANPCIeMMIOHistory *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        this[1].OSObject::OSObjectInterface::__vftable[196].unsigned int free = (void (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANPCIeMMIOHistory::withLogger(v11, v12);
      }
    }
  }
  LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[195].free) = AppleBCMWLAN_isDevFusedOrCSRInternal();
  uint64_t v13 = this[1].OSObject::OSObjectInterface::__vftable;
  if (!BYTE4(v13[202].init))
  {
    LODWORD(v64[0]) = 10000;
    (*(void (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden), AppleBCMWLANBusInterface *(*)(AppleBCMWLANBusInterface *, unsigned int *), OSData **, void, void, void))(*(void *)v13[217].init + 56))(v13[217].init, AppleBCMWLANBusInterfacePCIe::waitForBusAttachWithTimeoutGated, v64, 0, 0, 0);
  }
  __n128 CCLogs = AppleBCMWLANBusInterface::getCCLogs((AppleBCMWLANBusInterface *)this, (uint64_t)v64);
  __n128 v15 = (IOService *)v64[4];
  uint64_t v16 = ((uint64_t (*)(IOService *, __n128))this->OSObject::OSMetaClassBase::__vftable[1].isEqualTo)(this, CCLogs);
  uint64_t v17 = (CCDataStream *)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 168))(v16);
  uint64_t v19 = CCFaultReporter::withStreamDispatchQueue((CCFaultReporter *)this, v15, v17, v18);
  ((void (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[6].free)(this, v19);
  *(void *)&long long v65 = AppleBCMWLANBusInterfacePCIe::prepareFRCallback;
  *((void *)&v65 + 1) = AppleBCMWLANBusInterfacePCIe::collectImmediateFaultDataCallback;
  *(void *)&long long v66 = AppleBCMWLANBusInterfacePCIe::collectDeferredFaultDataCallback;
  *((void *)&v66 + 1) = AppleBCMWLANBusInterfacePCIe::completeFaultReportCallback;
  uint64_t v67 = 0;
  FaultReporter = (IO80211FaultReporter *)AppleBCMWLANBusInterface::getFaultReporter((AppleBCMWLANBusInterface *)this);
  uint64_t v22 = IO80211FaultReporter::allocWithParams(FaultReporter, v21);
  ((void (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[7].getMetaClass)(this, v22);
  AppleBCMWLANBusInterface::getFaultReporter((AppleBCMWLANBusInterface *)this);
  getClassNameHelper(this);
  CCFaultReporter::registerCallbacks();
  int v23 = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter((AppleBCMWLANBusInterface *)this);
  CCPipeOwner = (const char *)AppleBCMWLANBusInterface::getCCPipeOwner((AppleBCMWLANBusInterface *)this);
  CCFaultReporter::addOwner(v23, CCPipeOwner);
  unsigned int v25 = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter((AppleBCMWLANBusInterface *)this);
  CCFaultReporter::addOwner(v25, "com.apple.iokit.IO80211Family");
  unint64_t v26 = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter((AppleBCMWLANBusInterface *)this);
  CCFaultReporter::addOwner(v26, "com.apple.driver.AppleMultiFunctionManager");
  unsigned int v27 = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter((AppleBCMWLANBusInterface *)this);
  CCFaultReporter::addOwner(v27, "com.apple.driver.AppleOLYHAL");
  this[1].OSObject::OSObjectInterface::__vftable[261].init = 0;
  LODWORD(this[1].OSObject::OSObjectInterface::__vftable[261].free) = 0;
  if (BYTE4(this[1].OSObject::OSObjectInterface::__vftable[179].init)) {
    int v29 = 1;
  }
  else {
    int v29 = 3;
  }
  AppleBCMWLANBusInterfacePCIe::changeDeepSleepStateSetClear((uint64_t)this, v28, v29, 255);
  unsigned int v63 = -1431655766;
  AppleBCMWLANChipConfigSpace::readReg32((AppleBCMWLANChipConfigSpace *)this[1].OSObject::OSObjectInterface::__vftable[209].free, 4u, &v63);
  if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
  {
    AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
    if (CCLogStream::shouldLog())
    {
      unsigned int v48 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      CCLogStream::logInfo(v48, "[dk] %s@%d:deferredStart: kIOPCIConfigurationOffsetCommand before: %#x \n", "deferredStart", 2841, v63);
    }
  }
  if ((v63 & 4) == 0)
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        long long v55 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logInfo(v55, "[dk] %s@%d:deferredStart: kIOPCIConfigurationOffsetCommand : enable BME\n", "deferredStart", 2844);
      }
    }
    AppleBCMWLANChipConfigSpace::writeReg32((AppleBCMWLANChipConfigSpace *)this[1].OSObject::OSObjectInterface::__vftable[209].free, 4u, v63 | 4);
    BYTE3(this[1].OSObject::OSObjectInterface::__vftable[81].free) = 1;
  }
  LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[242].init) = 1;
  BYTE1(this[1].OSObject::OSObjectInterface::__vftable[242].init) = 0;
  uint64_t v30 = this[1].OSObject::OSObjectInterface::__vftable;
  unsigned int v31 = (AppleBCMWLANChipManagerPCIe *)v30[205].init;
  if (!v31) {
    goto LABEL_54;
  }
  if ((AppleBCMWLANChipManagerPCIe::needsASPMWorkaround(v31) & 1) == 0)
  {
    uint64_t v30 = this[1].OSObject::OSObjectInterface::__vftable;
LABEL_54:
    IOPCIDevice::SaveDeviceState((IOPCIDevice *)v30[203].init, 0x80000000, 0);
    goto LABEL_55;
  }
  AppleBCMWLANBusInterfacePCIe::modifyASPM((AppleBCMWLANBusInterface *)this, 1u);
  IOPCIDevice::SaveDeviceState((IOPCIDevice *)this[1].OSObject::OSObjectInterface::__vftable[203].init, 0x80000000, 0);
  AppleBCMWLANBusInterfacePCIe::modifyASPM((AppleBCMWLANBusInterface *)this, 3u);
  BYTE4(this[1].OSObject::OSObjectInterface::__vftable[286].init) = 1;
LABEL_55:
  if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
  {
    AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
    if (CCLogStream::shouldLog())
    {
      unsigned int v49 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      CCLogStream::logAlert(v49, "[dk] %s@%d: Registering service\n", "deferredStart", 2885);
    }
  }
  IOService::RegisterService(this, 0);
  BYTE5(this[1].OSObject::OSObjectInterface::__vftable[202].init) = 1;
  if (AppleBCMWLANBusInterfacePCIe::createFirmwareLogger((AppleBCMWLANBusInterfacePCIe *)this))
  {
    if (AppleBCMWLANBusInterfacePCIe::createCrashTracerLogger((AppleBCMWLANBusInterfacePCIe *)this))
    {
      ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[1].isEqualTo)(this);
      this[1].OSObject::OSObjectInterface::__vftable[255].unsigned int free = (void (__cdecl *)(OSObjectInterface *__hidden))IO80211TimerSource::allocWithParams();
      unsigned int v36 = this[1].OSObject::OSObjectInterface::__vftable;
      if (v36[255].free)
      {
        LOBYTE(v36[300].init) = 0;
        v64[0] = 0;
        unsigned int v37 = (IOService *)((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[17].Dispatch)(this);
        if (checkAcquireDataPropertyNotEmpty(v37, "pcie-throttle-firmware-load", v64, 4uLL, 1uLL, "IOService"))
        {
          LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[300].init) = *(_DWORD *)OSData::getBytesNoCopy(v64[0], 0, 4uLL) != 0;
          if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
          {
            AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
            if (CCLogStream::shouldLog())
            {
              long long v60 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
              CCLogStream::logAlert(v60, "[dk] %s@%d:Setting wifi firmware download throttle %u\n", "deferredStart", 2937, LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[300].init));
            }
          }
          if (v64[0])
          {
            ((void (*)(OSData *))v64[0]->release)(v64[0]);
            v64[0] = 0;
          }
        }
        unsigned int v38 = (AppleOLYHALPortInterfacePCIe *)this[1].OSObject::OSObjectInterface::__vftable[324].init;
        if (v38 && AppleOLYHALPortInterfacePCIe::isPortControlAMFMManagedDK(v38, 0))
        {
          unsigned int v39 = this[1].OSObject::OSObjectInterface::__vftable;
          if (!BYTE4(v39[202].init))
          {
            AppleOLYHALPortInterfacePCIe::checkBuiltInPropertyDK((AppleOLYHALPortInterfacePCIe *)v39[324].init, 0);
            unsigned int v39 = this[1].OSObject::OSObjectInterface::__vftable;
          }
          HIBYTE(this[1].OSObject::OSObjectInterface::__vftable[249].free) = AppleOLYHALPortInterfacePCIe::bridgePTMPropertyEnabledDK((AppleOLYHALPortInterfacePCIe *)v39[324].init, 0);
          unsigned int v40 = this[1].OSObject::OSObjectInterface::__vftable;
          if (!HIBYTE(v40[249].free)) {
            goto LABEL_77;
          }
          BYTE1(this[1].OSObject::OSObjectInterface::__vftable[250].init) = AppleOLYHALPortInterfacePCIe::isPTMWorkaroundNeededDK((AppleOLYHALPortInterfacePCIe *)v40[324].init, 0);
          unsigned int v40 = this[1].OSObject::OSObjectInterface::__vftable;
          if (!BYTE1(v40[250].init)) {
            goto LABEL_77;
          }
          if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
          {
            AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
            if (CCLogStream::shouldLog())
            {
              long long v61 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
              CCLogStream::logAlert(v61, "[dk] %s@%d:This platform needs PTM Workaround\n", "deferredStart", 2949);
            }
          }
          ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[1].isEqualTo)(this);
          this[1].OSObject::OSObjectInterface::__vftable[226].init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))IO80211TimerSource::allocWithParams();
          unsigned int v40 = this[1].OSObject::OSObjectInterface::__vftable;
          if (!v40[226].init)
          {
            if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
            {
              AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
              if (CCLogStream::shouldLog())
              {
                unsigned int v62 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
                CCLogStream::logCrit(v62, "[dk] %s@%d: Unable to create attach PTM ack timer\n", "deferredStart", 2952);
              }
            }
            AppleBCMWLANBusInterface::reportInitFailure((uint64_t)this, Provider, 1uLL, 2953);
            IOService::Stop(this, Provider, 0);
            unsigned int v40 = this[1].OSObject::OSObjectInterface::__vftable;
          }
          else
          {
LABEL_77:
            uint64_t v3 = 0;
          }
          LOBYTE(this[1].OSObject::OSObjectInterface::__vftable[250].init) = AppleOLYHALPortInterfacePCIe::isLPEMWorkaroundNeededDK((AppleOLYHALPortInterfacePCIe *)v40[324].init, 0);
        }
        else
        {
          uint64_t v3 = 0;
        }
        goto LABEL_93;
      }
      if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
      {
        AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        if (CCLogStream::shouldLog())
        {
          long long v59 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          CCLogStream::logAlert(v59, "[dk] %s@%d:Unable to create trap crashtracer mini dump buffer free timer\n", "deferredStart", 2920);
        }
      }
      long long v41 = (AppleBCMWLANBusInterfacePCIe *)this;
      long long v42 = Provider;
      int v43 = 2921;
    }
    else
    {
      if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
      {
        AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        if (CCLogStream::shouldLog())
        {
          long long v57 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          CCLogStream::logAlert(v57, "[dk] %s@%d:Failed to create crash tacer logger\n", "deferredStart", 2906);
        }
      }
      long long v41 = (AppleBCMWLANBusInterfacePCIe *)this;
      long long v42 = Provider;
      int v43 = 2907;
    }
  }
  else
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        long long v56 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(v56, "[dk] %s@%d:Failed to create firmware logger\n", "deferredStart", 2894);
      }
    }
    long long v41 = (AppleBCMWLANBusInterfacePCIe *)this;
    long long v42 = Provider;
    int v43 = 2895;
  }
  AppleBCMWLANBusInterface::reportInitFailure((uint64_t)v41, v42, 1uLL, v43);
  IOService::Stop(this, Provider, 0);
LABEL_93:
  uint64_t started = v3;
LABEL_94:
  if (((uint64_t (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[19].init)(this))
  {
    int v44 = 1;
    atomic_compare_exchange_strong((atomic_uint *volatile)&this[1].OSObject::OSObjectInterface::__vftable[240].free, (unsigned int *)&v44, 0);
    if (v44 == 1)
    {
      IOService::AdjustBusy(this, -1, 0);
      LODWORD(v64[0]) = 0;
      IOService::GetBusyState(this, (unsigned int *)v64, 0);
      if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
      {
        AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v52 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          CCLogStream::logAlert(v52, "[dk] %s@%d:Lowered AdjustBusy(-1), GetBusyState() -> %u\n", "deferredStart", 2979, LODWORD(v64[0]));
        }
      }
      io80211_os_log();
    }
  }
  else
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v51 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(v51, "[dk] %s@%d:deferd setting adjust busy timer, will stop when core register or timeout %u\n", "deferredStart", 2985, 30000);
      }
    }
    io80211_os_log();
    (*(void (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden), uint64_t))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[240].init
                                                                                   + 120))(this[1].OSObject::OSObjectInterface::__vftable[240].init, 30000);
  }
  return started;
}

uint64_t AppleBCMWLANBusInterfacePCIe::startOLYHAL(AppleBCMWLANBusInterfacePCIe *this)
{
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logInfo(Logger, "[dk] %s@%d:Create platform function\n", "startOLYHAL", 22033);
    }
  }
  uint64_t PlatformFunctionInterfaceDK = AppleOLYHAL::createPlatformFunctionInterfaceDK((AppleOLYHAL *)(*((void *)this + 9) + 5176), v2);
  uint64_t v4 = AppleBCMWLANBusInterface::getLogger(this);
  if (PlatformFunctionInterfaceDK)
  {
    if (v4)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v5, "[dk] %s@%d:createPlatformFunctionInterfaceDK failed with error 0x%x\n");
      }
    }
  }
  else
  {
    if (v4)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v25 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logInfo(v25, "[dk] %s@%d:Platform interface %p\n", "startOLYHAL", 22039, *(const void **)(*((void *)this + 9) + 5176));
      }
    }
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v26 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logInfo(v26, "[dk] %s@%d:Create PERST# port\n", "startOLYHAL", 22041);
      }
    }
    uint64_t PlatformFunctionInterfaceDK = AppleOLYHAL::createPortInterfacePCIeDK((AppleOLYHAL *)"function-pcie_port_control", (const char *)(*((void *)this + 9) + 5184), v6);
    uint64_t v7 = AppleBCMWLANBusInterface::getLogger(this);
    if (PlatformFunctionInterfaceDK)
    {
      if (v7)
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v8 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v8, "[dk] %s@%d:createPortInterfaceDK failed with error 0x%x\n");
        }
      }
    }
    else
    {
      if (v7)
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v27 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logInfo(v27, "[dk] %s@%d:Port interface %p\n", "startOLYHAL", 22047, *(const void **)(*((void *)this + 9) + 5184));
        }
      }
      properties = 0;
      uint64_t v9 = AppleOLYHALPlatformFunction::copyWLANPropertiesDK(*(AppleOLYHALPlatformFunction **)(*((void *)this + 9) + 5176), &properties, 0);
      if (v9)
      {
        uint64_t PlatformFunctionInterfaceDK = v9;
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            unsigned int v28 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v28, "[dk] %s@%d:copyWLANPropertiesDK failed with error 0x%x\n");
          }
        }
      }
      else
      {
        if (!properties) {
          goto LABEL_33;
        }
        OSDictionary::removeObject(properties, "vendor-id");
        uint64_t PlatformFunctionInterfaceDK = IOService::SetProperties((IOService *)this, properties, 0);
        if (properties)
        {
          ((void (*)(OSDictionary *))properties->release)(properties);
          properties = 0;
        }
        if (PlatformFunctionInterfaceDK)
        {
          if (AppleBCMWLANBusInterface::getLogger(this))
          {
            AppleBCMWLANBusInterface::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v11 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
              CCLogStream::logAlert(v11, "[dk] %s@%d:SetProperties failed with error 0x%x\n");
            }
          }
        }
        else
        {
LABEL_33:
          uint64_t v12 = IODispatchQueue::Create("OLYHALKextToDextQueue", 0, 0, (IODispatchQueue **)(*((void *)this + 9) + 5288));
          if (v12)
          {
            uint64_t PlatformFunctionInterfaceDK = v12;
            if (AppleBCMWLANBusInterface::getLogger(this))
            {
              AppleBCMWLANBusInterface::getLogger(this);
              if (CCLogStream::shouldLog())
              {
                uint64_t v13 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                CCLogStream::logAlert(v13, "[dk] %s@%d:IODispatchQueue::Create failed with error 0x%x\n");
              }
            }
          }
          else
          {
            uint64_t PlatformFunctionInterfaceDK = OSObject::SetDispatchQueue((OSObject *)this, "OLYHALKextToDextQueue", *(IODispatchQueue **)(*((void *)this + 9) + 5288), 0);
            uint64_t v14 = AppleBCMWLANBusInterface::getLogger(this);
            if (PlatformFunctionInterfaceDK)
            {
              if (v14)
              {
                AppleBCMWLANBusInterface::getLogger(this);
                if (CCLogStream::shouldLog())
                {
                  __n128 v15 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                  CCLogStream::logAlert(v15, "[dk] %s@%d:SetDispatchQueue failed with error 0x%x\n");
                }
              }
            }
            else
            {
              if (v14)
              {
                AppleBCMWLANBusInterface::getLogger(this);
                if (CCLogStream::shouldLog())
                {
                  int v29 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                  CCLogStream::logInfo(v29, "[dk] %s@%d:%s %p\n", "startOLYHAL", 22078, "OLYHALKextToDextQueue", *(const void **)(*((void *)this + 9) + 5288));
                }
              }
              uint64_t ActionPortErrorMsgHandler = AppleBCMWLANBusInterfacePCIe::CreateActionPortErrorMsgHandler((OSObject *)this, 0, (OSAction **)(*((void *)this + 9) + 5280));
              if (ActionPortErrorMsgHandler)
              {
                uint64_t PlatformFunctionInterfaceDK = ActionPortErrorMsgHandler;
                if (AppleBCMWLANBusInterface::getLogger(this))
                {
                  AppleBCMWLANBusInterface::getLogger(this);
                  if (CCLogStream::shouldLog())
                  {
                    uint64_t v17 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                    CCLogStream::logAlert(v17, "[dk] %s@%d:CreateActionPortErrorMsgHandler failed with error 0x%x\n");
                  }
                }
              }
              else
              {
                uint64_t PlatformFunctionInterfaceDK = AppleOLYHALPortInterfacePCIe::setPortErrorMsgHandler(*(AppleOLYHALPortInterfacePCIe **)(*((void *)this + 9) + 5184), *(OSAction **)(*((void *)this + 9) + 5280), 0);
                uint64_t v18 = AppleBCMWLANBusInterface::getLogger(this);
                if (PlatformFunctionInterfaceDK)
                {
                  if (v18)
                  {
                    AppleBCMWLANBusInterface::getLogger(this);
                    if (CCLogStream::shouldLog())
                    {
                      uint64_t v19 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                      CCLogStream::logAlert(v19, "[dk] %s@%d:setPortErrorMsgHandler failed with error 0x%x\n");
                    }
                  }
                }
                else
                {
                  if (v18)
                  {
                    AppleBCMWLANBusInterface::getLogger(this);
                    if (CCLogStream::shouldLog())
                    {
                      uint64_t v30 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                      CCLogStream::logInfo(v30, "[dk] %s@%d:CreateActionPortErrorMsgHandler action %p\n", "startOLYHAL", 22091, *(const void **)(*((void *)this + 9) + 5280));
                    }
                  }
                  uint64_t ActionPortEventMsgHandler = AppleBCMWLANBusInterfacePCIe::CreateActionPortEventMsgHandler((OSObject *)this, 0, (OSAction **)(*((void *)this + 9) + 5272));
                  if (ActionPortEventMsgHandler)
                  {
                    uint64_t PlatformFunctionInterfaceDK = ActionPortEventMsgHandler;
                    if (AppleBCMWLANBusInterface::getLogger(this))
                    {
                      AppleBCMWLANBusInterface::getLogger(this);
                      if (CCLogStream::shouldLog())
                      {
                        unsigned int v21 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                        CCLogStream::logAlert(v21, "[dk] %s@%d:CreateActionPortEventMsgHandler failed with error 0x%x\n");
                      }
                    }
                  }
                  else
                  {
                    uint64_t PlatformFunctionInterfaceDK = AppleOLYHALPortInterfacePCIe::setPortEventMsgHandler(*(AppleOLYHALPortInterfacePCIe **)(*((void *)this + 9) + 5184), *(OSAction **)(*((void *)this + 9) + 5272), 0);
                    uint64_t v23 = AppleBCMWLANBusInterface::getLogger(this);
                    if (PlatformFunctionInterfaceDK)
                    {
                      if (v23)
                      {
                        AppleBCMWLANBusInterface::getLogger(this);
                        if (CCLogStream::shouldLog())
                        {
                          uint64_t v24 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                          CCLogStream::logAlert(v24, "[dk] %s@%d:setPortEventMsgHandler failed with error 0x%x\n");
                        }
                      }
                    }
                    else
                    {
                      if (v23)
                      {
                        AppleBCMWLANBusInterface::getLogger(this);
                        if (CCLogStream::shouldLog())
                        {
                          unsigned int v31 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                          CCLogStream::logInfo(v31, "[dk] %s@%d:CreateActionPortEventMsgHandler action %p\n", "startOLYHAL", 22104, *(const void **)(*((void *)this + 9) + 5272));
                        }
                      }
                      return 0;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return PlatformFunctionInterfaceDK;
}

uint64_t AppleBCMWLANBusInterfacePCIe::prepareFRCallback(AppleBCMWLANBusInterfacePCIe *this, const CCFaultReport *a2)
{
  (*(void (**)(AppleBCMWLANBusInterfacePCIe *, const char *, uint64_t))(*(void *)this + 1208))(this, "prepareFRCallback", 19129);
  uint64_t v4 = *((void *)this + 9);
  if (!*(void *)(v4 + 3368))
  {
    char v5 = (*(uint64_t (**)(const CCFaultReport *))(*(void *)a2 + 112))(a2);
    uint64_t v4 = *((void *)this + 9);
    if ((v5 & 1) == 0 && !*(unsigned char *)(v4 + 3706))
    {
      uint64_t v9 = *(IOMemoryMap **)(v4 + 3280);
      if (v9)
      {
        *(void *)(*((void *)this + 9) + 3368) = AppleBCMWLANChipMemory::withMap(0, v9, *(AppleBCMWLANChipManagerPCIe **)(v4 + 3144), v6);
        uint64_t v4 = *((void *)this + 9);
        if (!*(void *)(v4 + 3368))
        {
          uint64_t v8 = 3758097085;
          if (AppleBCMWLANBusInterface::getLogger(this))
          {
            AppleBCMWLANBusInterface::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
              CCLogStream::logCrit(Logger, "[dk] %s@%d:Failed to create memory access.\n", "prepareFRCallback", 19148);
            }
          }
          return v8;
        }
      }
    }
  }
  *(unsigned char *)(v4 + 4553) = 1;
  if (!(*(unsigned int (**)(const CCFaultReport *))(*(void *)a2 + 88))(a2)
    || !AppleBCMWLANBusInterfacePCIe::checkBusAccessibility(this))
  {
    return 0;
  }
  uint64_t v7 = *(AppleBCMWLANChipManagerPCIe **)(*((void *)this + 9) + 3280);
  if (v7
    && AppleBCMWLANChipManagerPCIe::isSplitArchitecture(v7)
    && !*(unsigned char *)(*((void *)this + 9) + 4552)
    && (AppleBCMWLANBusInterfacePCIe::checkAPBAccessibility(this, 0, 0) & 1) == 0)
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v13 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        if (*(unsigned char *)(*((void *)this + 9) + 4556)) {
          uint64_t v14 = "No";
        }
        else {
          uint64_t v14 = "Yes";
        }
        CCLogStream::logAlert(v13, "[dk] %s@%d:APB is not accessible, upgrading to full reset ? %s\n", "prepareFRCallback", 19159, v14);
      }
    }
    if (!*(unsigned char *)(*((void *)this + 9) + 4556))
    {
      uint64_t v8 = 0;
      *(unsigned char *)(*((void *)this + 9) + 4573) = 1;
      return v8;
    }
    return 0;
  }
  if (!AppleBCMWLANBusInterfacePCIe::trapDevice(this, 0xDEAD0002)) {
    return 0;
  }
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v12 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(v12, "[dk] %s@%d:Host initiated trap timed out\n", "prepareFRCallback", 19167);
    }
  }
  uint64_t v8 = 0;
  *(unsigned char *)(*((void *)this + 9) + 1305) = 1;
  return v8;
}

uint64_t AppleBCMWLANBusInterfacePCIe::collectImmediateFaultDataCallback(AppleBCMWLANBusInterfacePCIe *this, CCFaultReport *a2)
{
  if (AppleBCMWLAN_isVerboseDebugLoggingAllowed())
  {
    int shouldLog = 1;
  }
  else
  {
    char v5 = *(CCLogStream **)(*((void *)this + 9) + 4600);
    if (v5) {
      int shouldLog = CCLogStream::shouldLog(v5, 1uLL);
    }
    else {
      int shouldLog = 0;
    }
  }
  (*(void (**)(AppleBCMWLANBusInterfacePCIe *, const char *, uint64_t))(*(void *)this + 1208))(this, "collectImmediateFaultDataCallback", 19181);
  if (*(unsigned char *)(*((void *)this + 9) + 4097))
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:Skip WDT logging\n");
      }
    }
    return 0;
  }
  if (*(unsigned char *)(*((void *)this + 9) + 4552))
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:ResetInLowPower. No longer safe to collect logs\n");
      }
    }
    return 0;
  }
  if ((*(unsigned int (**)(CCFaultReport *))(*(void *)a2 + 112))(a2))
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logCrit(v8, "[dk] %s@%d:Minimum log capture we don't collect bus interface\n", "collectImmediateFaultDataCallback", 19193);
      }
    }
    return 0;
  }
  if ((*(unsigned int (**)(CCFaultReport *))(*(void *)a2 + 128))(a2) == -469794303
    || (*(unsigned int (**)(CCFaultReport *))(*(void *)a2 + 128))(a2) == -469794295)
  {
    CCFaultReport::setLinkRegiser(a2, *(unsigned int *)(*((void *)this + 9) + 4060));
    CCFaultReport::setProgamCounter(a2, *(unsigned int *)(*((void *)this + 9) + 4056));
  }
  if (shouldLog)
  {
    if (*(unsigned char *)(*((void *)this + 9) + 1306))
    {
      OSStringPtr v9 = OSString::withCString("ControlSubmission.bin");
      uint64_t v10 = (const void *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 312) + 264))(*(void *)(*((void *)this + 9) + 312));
      unsigned int v11 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 312) + 272))();
      OSDataPtr v12 = OSData::withBytes(v10, v11);
      (*(void (**)(CCFaultReport *, OSStringPtr, OSDataPtr))(*(void *)a2 + 192))(a2, v9, v12);
      OSStringPtr v13 = OSString::withCString("ControlCompletion.bin");
      uint64_t v14 = (const void *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 320) + 264))();
      unsigned int v15 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 320) + 272))();
      OSDataPtr v16 = OSData::withBytes(v14, v15);
      (*(void (**)(CCFaultReport *, OSStringPtr, OSDataPtr))(*(void *)a2 + 192))(a2, v13, v16);
      OSStringPtr v17 = OSString::withCString("RxSubmission.bin");
      uint64_t v18 = (const void *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 344) + 264))();
      unsigned int v19 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 344) + 272))();
      OSDataPtr v20 = OSData::withBytes(v18, v19);
      (*(void (**)(CCFaultReport *, OSStringPtr, OSDataPtr))(*(void *)a2 + 192))(a2, v17, v20);
      OSStringPtr v21 = OSString::withCString("RxCompletion.bin");
      uint64_t v22 = (const void *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 352) + 264))();
      unsigned int v23 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 352) + 272))();
      OSDataPtr v24 = OSData::withBytes(v22, v23);
      (*(void (**)(CCFaultReport *, OSStringPtr, OSDataPtr))(*(void *)a2 + 192))(a2, v21, v24);
      OSStringPtr v25 = OSString::withCString("TxCompletion.bin");
      unint64_t v26 = (const void *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 360) + 264))();
      unsigned int v27 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 360) + 272))();
      OSDataPtr v28 = OSData::withBytes(v26, v27);
      (*(void (**)(CCFaultReport *, OSStringPtr, OSDataPtr))(*(void *)a2 + 192))(a2, v25, v28);
      uint64_t v29 = *((void *)this + 9);
      if (*(void *)(v29 + 328))
      {
        OSStringPtr v30 = OSString::withCString("DebugSubmission.bin");
        unsigned int v31 = (const void *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 328) + 264))(*(void *)(*((void *)this + 9) + 328));
        unsigned int v32 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 328) + 272))();
        OSDataPtr v33 = OSData::withBytes(v31, v32);
        (*(void (**)(CCFaultReport *, OSStringPtr, OSDataPtr))(*(void *)a2 + 192))(a2, v30, v33);
        uint64_t v29 = *((void *)this + 9);
      }
      if (*(void *)(v29 + 336))
      {
        OSStringPtr v34 = OSString::withCString("DebugCompletion.bin");
        int v35 = (const void *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 336) + 264))(*(void *)(*((void *)this + 9) + 336));
        unsigned int v36 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 336) + 272))();
        OSDataPtr v37 = OSData::withBytes(v35, v36);
        (*(void (**)(CCFaultReport *, OSStringPtr, OSDataPtr))(*(void *)a2 + 192))(a2, v34, v37);
        uint64_t v29 = *((void *)this + 9);
      }
      uint64_t v38 = *(unsigned int *)(v29 + 372);
      if (v38 <= 0x2B && v38 < *(_DWORD *)(v29 + 376))
      {
        uint64_t v39 = v38 + 601;
        do
        {
          if (*(void *)(v29 + 8 * v39))
          {
            *(void *)&long long v40 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
            *(_OWORD *)__str = v40;
            long long v118 = v40;
            snprintf(__str, 0x20uLL, "TxFlowRing%d.bin", v39 - 601);
            OSStringPtr v41 = OSString::withCString(__str);
            long long v42 = (const void *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 8 * v39) + 264))();
            unsigned int v43 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 8 * v39) + 272))();
            OSDataPtr v44 = OSData::withBytes(v42, v43);
            (*(void (**)(CCFaultReport *, OSStringPtr, OSDataPtr))(*(void *)a2 + 192))(a2, v41, v44);
            uint64_t v29 = *((void *)this + 9);
          }
          if ((unint64_t)(v39 - 601) > 0x2A) {
            break;
          }
          unint64_t v45 = v39 - 600;
          ++v39;
        }
        while (v45 < *(unsigned int *)(v29 + 376));
      }
      char v46 = (*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 208))(this);
      uint64_t v47 = *((void *)this + 9);
      if ((v46 & 1) != 0 && *(unsigned char *)(v47 + 4077))
      {
        OSStringPtr v48 = OSString::withCString("trapinfo.bin");
        uint64_t v49 = *((void *)this + 9);
        if (*(unsigned char *)(v49 + 4077)) {
          size_t v50 = 516;
        }
        else {
          size_t v50 = 0;
        }
        OSDataPtr v51 = OSData::withBytes(*(const void **)(v49 + 4064), v50);
        (*(void (**)(CCFaultReport *, OSStringPtr, OSDataPtr))(*(void *)a2 + 192))(a2, v48, v51);
        uint64_t v47 = *((void *)this + 9);
      }
      if (*(void *)(v47 + 4472))
      {
        unsigned int v52 = (AppleBCMWLANCore *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 608))(this);
        if (AppleBCMWLANCore::isLowLatencyWiFiEnabled(v52))
        {
          if (AppleBCMWLANPCIeSkywalk::getLowLatencyTxCompRing(*(AppleBCMWLANPCIeSkywalk **)(*((void *)this + 9)
                                                                                            + 4472)))
          {
            OSStringPtr v53 = OSString::withCString("LowLatencyTxCompRing");
            uint64_t v54 = *(void *)AppleBCMWLANPCIeSkywalk::getLowLatencyTxCompRing(*(AppleBCMWLANPCIeSkywalk **)(*((void *)this + 9) + 4472));
            long long v55 = (const void *)(*(uint64_t (**)(void))(v54 + 264))();
            uint64_t v56 = *(void *)AppleBCMWLANPCIeSkywalk::getLowLatencyTxCompRing(*(AppleBCMWLANPCIeSkywalk **)(*((void *)this + 9) + 4472));
            unsigned int v57 = (*(uint64_t (**)(void))(v56 + 272))();
            OSDataPtr v58 = OSData::withBytes(v55, v57);
            (*(void (**)(CCFaultReport *, OSStringPtr, OSDataPtr))(*(void *)a2 + 192))(a2, v53, v58);
          }
          if (AppleBCMWLANPCIeSkywalk::getLowLatencyRxCompRing(*(AppleBCMWLANPCIeSkywalk **)(*((void *)this + 9)
                                                                                            + 4472)))
          {
            OSStringPtr v59 = OSString::withCString("LowLatencyRxCompRing");
            uint64_t v60 = *(void *)AppleBCMWLANPCIeSkywalk::getLowLatencyRxCompRing(*(AppleBCMWLANPCIeSkywalk **)(*((void *)this + 9) + 4472));
            long long v61 = (const void *)(*(uint64_t (**)(void))(v60 + 264))();
            uint64_t v62 = *(void *)AppleBCMWLANPCIeSkywalk::getLowLatencyRxCompRing(*(AppleBCMWLANPCIeSkywalk **)(*((void *)this + 9) + 4472));
            unsigned int v63 = (*(uint64_t (**)(void))(v62 + 272))();
            OSDataPtr v64 = OSData::withBytes(v61, v63);
            (*(void (**)(CCFaultReport *, OSStringPtr, OSDataPtr))(*(void *)a2 + 192))(a2, v59, v64);
          }
        }
      }
    }
    else
    {
      long long v65 = OSString::withCString("IPCRingFiles");
      long long v66 = OSString::withCString("IPC not created");
      AppleBCMWLANBusInterface::sendCCMissingFileInfoToCoreAnalytics(this, v65, v66);
    }
    if (*(void *)(*((void *)this + 9) + 3144))
    {
      uint64_t v67 = (char *)IOMallocZeroData();
      if (v67)
      {
        long long v68 = v67;
        AppleBCMWLANPCIeMMIOHistory::dumpMMIOlogToBuffer(*(AppleBCMWLANPCIeMMIOHistory **)(*((void *)this + 9) + 3144), v67, 0x1FFFFLL);
        OSStringPtr v69 = OSString::withCString("MMIO_Log.txt");
        OSStringPtr v70 = OSString::withCString(v68);
        (*(void (**)(CCFaultReport *, OSStringPtr, OSStringPtr))(*(void *)a2 + 192))(a2, v69, v70);
        IOFreeData();
      }
    }
    else
    {
      long long v71 = OSString::withCString("MIMO_Log");
      long long v72 = OSString::withCString("Memory mapping is not yet done");
      AppleBCMWLANBusInterface::sendCCMissingFileInfoToCoreAnalytics(this, v71, v72);
    }
  }
  if (AppleBCMWLANBusInterfacePCIe::checkBusAccessibility(this)) {
    uint64_t isAPBAccessible = AppleBCMWLANBusInterfacePCIe::isAPBAccessible(this, 0, 0);
  }
  else {
    uint64_t isAPBAccessible = 0;
  }
  if (*(unsigned char *)(*((void *)this + 9) + 4573) && !*(unsigned char *)(*((void *)this + 9) + 4574))
  {
    if (AppleBCMWLANBusInterface::getLogger(this)
      && (AppleBCMWLANBusInterface::getLogger(this), CCLogStream::shouldLog()))
    {
      v107 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(v107, "[dk] %s@%d:Upgrade to full reset. No longer safe to collect register dump\n", "collectImmediateFaultDataCallback", 19280);
      if (!shouldLog) {
        return 0;
      }
    }
    else if (!shouldLog)
    {
      return 0;
    }
    uint64_t v79 = IOMallocZeroData();
    if (v79)
    {
      long long v80 = (const char *)v79;
      (*(void (**)(AppleBCMWLANBusInterfacePCIe *, uint64_t, void, uint64_t, uint64_t))(*(void *)this + 256))(this, v79, 0, 0x3FFFLL, isAPBAccessible);
      OSStringPtr v81 = OSString::withCString("BusState.txt");
      OSStringPtr v82 = OSString::withCString(v80);
      (*(void (**)(CCFaultReport *, OSStringPtr, OSStringPtr))(*(void *)a2 + 192))(a2, v81, v82);
      IOFreeData();
      return 0;
    }
    uint64_t v90 = OSString::withCString("BusState");
    long long v91 = "Memory allocation failed";
LABEL_93:
    long long v92 = OSString::withCString(v91);
    AppleBCMWLANBusInterface::sendCCMissingFileInfoToCoreAnalytics(this, v90, v92);
    return 0;
  }
  if (!isAPBAccessible)
  {
LABEL_60:
    if (shouldLog) {
      goto LABEL_61;
    }
    goto LABEL_69;
  }
  if (!(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 80))(this)
    || (uint64_t v74 = (*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 80))(this),
        ((*(uint64_t (**)(uint64_t))(*(void *)v74 + 136))(v74) & 1) != 0))
  {
LABEL_59:
    uint64_t isAPBAccessible = 1;
    AppleBCMWLANChipBackplane::forcePower(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 1, 0);
    goto LABEL_60;
  }
  if (((*(uint64_t (**)(CCFaultReport *))(*(void *)a2 + 88))(a2) & 1) != 0
    || ((*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 208))(this) & 1) != 0
    || (*(unsigned char *)(*((void *)this + 9) + 4488) & 1) != 0)
  {
    int v104 = 0;
    int v102 = 0;
    int v103 = 1;
  }
  else
  {
    int v102 = AppleBCMWLANBusInterfacePCIe::retainCTS(this, 19299, 2);
    if (v102)
    {
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          int v116 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v116, "[dk] %s@%d:retainCTS failed : 0x%x\n", "collectImmediateFaultDataCallback", 19301, v102);
        }
      }
    }
    int v103 = AppleBCMWLANBusInterfacePCIe::checkBusAccessibility(this);
    int v104 = 1;
  }
  if (v103 && !v102) {
    int v103 = AppleBCMWLANBusInterfacePCIe::isAPBAccessible(this, 0, 0);
  }
  if (v104)
  {
    AppleBCMWLANBusInterfacePCIe::releaseCTS(this, 19312);
    if (v103) {
      goto LABEL_59;
    }
  }
  else if (v103)
  {
    goto LABEL_59;
  }
  uint64_t isAPBAccessible = 0;
  if (shouldLog)
  {
LABEL_61:
    uint64_t v75 = IOMallocZeroData();
    if (v75)
    {
      long long v76 = (const char *)v75;
      (*(void (**)(AppleBCMWLANBusInterfacePCIe *, uint64_t, void, uint64_t, uint64_t))(*(void *)this + 256))(this, v75, 0, 0x3FFFLL, isAPBAccessible);
      OSStringPtr v77 = OSString::withCString("BusState.txt");
      OSStringPtr v78 = OSString::withCString(v76);
      (*(void (**)(CCFaultReport *, OSStringPtr, OSStringPtr))(*(void *)a2 + 192))(a2, v77, v78);
      IOFreeData();
    }
    else
    {
      long long v83 = OSString::withCString("BusState");
      long long v84 = OSString::withCString("Memory allocation failed");
      AppleBCMWLANBusInterface::sendCCMissingFileInfoToCoreAnalytics(this, v83, v84);
    }
  }
LABEL_69:
  if (((*(unsigned int (**)(CCFaultReport *))(*(void *)a2 + 128))(a2) == -469794303
     || (*(unsigned int (**)(CCFaultReport *))(*(void *)a2 + 128))(a2) == -469794295)
    && *(unsigned char *)(*((void *)this + 9) + 4084))
  {
    AppleBCMWLANBusInterfacePCIe::createTrapMiniDumpLog(this, a2);
  }
  if (*(unsigned char *)(*((void *)this + 9) + 3722))
  {
    int v85 = (*(uint64_t (**)(CCFaultReport *))(*(void *)a2 + 128))(a2);
    if (AppleBCMWLANBusInterfacePCIe::shouldDeferError(this, v85))
    {
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          long long v86 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v86, "[dk] %s@%d:fInD3 is true\n");
        }
      }
      return 0;
    }
  }
  if ((isAPBAccessible & 1) == 0)
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        int v105 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v105, "[dk] %s@%d:Bus is not accessible ivars->fBackplane %u fInD3 %u ivars->fChipHalted %u fLinkDownFailure %u\n", "collectImmediateFaultDataCallback", 19352, *(void *)(*((void *)this + 9) + 3360) != 0, *(unsigned __int8 *)(*((void *)this + 9) + 3722), *(unsigned __int8 *)(*((void *)this + 9) + 1304), *(unsigned __int8 *)(*((void *)this + 9) + 3706));
      }
    }
    uint64_t v90 = OSString::withCString("SoC_RAM");
    long long v91 = "Bus not accessable";
    goto LABEL_93;
  }
  int isTCMAccessible = AppleBCMWLANBusInterfacePCIe::isTCMAccessible(this);
  uint64_t v88 = AppleBCMWLANBusInterface::getLogger(this);
  if (isTCMAccessible)
  {
    if (v88)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v108 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        int v109 = (*(uint64_t (**)(CCFaultReport *))(*(void *)a2 + 80))(a2);
        int v110 = (*(uint64_t (**)(CCFaultReport *))(*(void *)a2 + 128))(a2);
        BOOL shouldDeferError = AppleBCMWLANBusInterfacePCIe::shouldDeferError(this, v110);
        int v112 = (*(uint64_t (**)(CCFaultReport *))(*(void *)a2 + 128))(a2);
        CCLogStream::logCrit(v108, "[dk] %s@%d:SoCRAM dump: needsFullCapture=%d, shouldDeferError=%d, Code=%x\n", "collectImmediateFaultDataCallback", 19369, v109, shouldDeferError, v112);
      }
    }
    if ((*(unsigned int (**)(CCFaultReport *))(*(void *)a2 + 80))(a2))
    {
      int v89 = (*(uint64_t (**)(CCFaultReport *))(*(void *)a2 + 128))(a2);
      if (!AppleBCMWLANBusInterfacePCIe::shouldDeferError(this, v89))
      {
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            int v115 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logInfo(v115, "[dk] %s@%d:Going to attach SoCRAM immediate CB\n", "collectImmediateFaultDataCallback", 19372);
          }
        }
        AppleBCMWLANBusInterfacePCIe::attachSoCRAMFile(this, a2);
      }
    }
  }
  else
  {
    if (v88)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        int v113 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v113, "[dk] %s@%d:Skipped reading SoCRAM. TCM memory is not accessible. \n", "collectImmediateFaultDataCallback", 19376);
      }
    }
    long long v93 = OSString::withCString("SoC_RAM");
    long long v94 = OSString::withCString("TCM not accessible");
    AppleBCMWLANBusInterface::sendCCMissingFileInfoToCoreAnalytics(this, v93, v94);
  }
  if (shouldLog)
  {
    *(void *)__str = 0;
    int v95 = (*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *, char *))(*(void *)this + 1032))(this, __str);
    if (v95)
    {
      int v96 = v95;
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          int v114 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v114, "[dk] %s@%d:The %s file may not exist because of error 0x%x\n", "collectImmediateFaultDataCallback", 19385, "SoC_Registers.xml", v96);
        }
      }
    }
    OSStringPtr v97 = OSString::withCString("SoC_Registers.xml");
    (*(void (**)(CCFaultReport *, OSStringPtr, void))(*(void *)a2 + 192))(a2, v97, *(void *)__str);
  }
  AppleBCMWLANChipBackplane::forcePower(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0, 0);
  if (((*(uint64_t (**)(CCFaultReport *))(*(void *)a2 + 88))(a2) & 1) == 0)
  {
    int v98 = (*(uint64_t (**)(CCFaultReport *))(*(void *)a2 + 128))(a2);
    if (!AppleBCMWLANBusInterfacePCIe::shouldDeferError(this, v98))
    {
      uint64_t v99 = *((void *)this + 9);
      uint64_t v100 = *(void *)(v99 + 3368);
      if (v100)
      {
        (*(void (**)(uint64_t))(*(void *)v100 + 16))(v100);
        *(void *)(*((void *)this + 9) + 3368) = 0;
        uint64_t v99 = *((void *)this + 9);
      }
      *(void *)(v99 + 3392) = 0;
      *(_OWORD *)(v99 + 3376) = 0u;
    }
  }
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      __int16 v106 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logInfo(v106, "[dk] %s@%d:fTimestampingMode:0x%x, fPacketTimestampingEnabled:%u fLastTimePowerOnTicks:%llu fLastConvertedTicks:%llu fPTMConvertedErrors:%zu\n", "collectImmediateFaultDataCallback", 19401, *(_DWORD *)(*((void *)this + 9) + 3984), *(_DWORD *)(*((void *)this + 9) + 3988), *(void *)(*((void *)this + 9) + 4032), *(void *)(*((void *)this + 9) + 4040), *(void *)(*((void *)this + 9) + 4048));
    }
  }
  return 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::collectDeferredFaultDataCallback(AppleBCMWLANBusInterfacePCIe *this, CCFaultReport *a2)
{
  (*(void (**)(AppleBCMWLANBusInterfacePCIe *, const char *, uint64_t))(*(void *)this + 1208))(this, "collectDeferredFaultDataCallback", 19976);
  if (*(unsigned char *)(*((void *)this + 9) + 4097))
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:Skip WDT logging\n");
      }
    }
  }
  else if (*(unsigned char *)(*((void *)this + 9) + 4552))
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        char v5 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v5, "[dk] %s@%d:ResetInLowPower. No longer safe to collect logs\n");
      }
    }
  }
  else if ((*(unsigned int (**)(CCFaultReport *))(*(void *)a2 + 112))(a2))
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v6 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logCrit(v6, "[dk] %s@%d:Minimum log capture we don't collect bus interface\n", "collectDeferredFaultDataCallback", 19989);
      }
    }
  }
  else
  {
    uint64_t v7 = *((void *)this + 9);
    if (*(unsigned char *)(v7 + 1304)
      || (OSStringPtr v9 = *(AppleBCMWLANChipBackplane **)(v7 + 3360)) == 0
      || *(unsigned char *)(v7 + 3722)
      || *(unsigned char *)(v7 + 3706) && *(unsigned char *)(v7 + 3709)
      || (uint64_t v10 = (unsigned char *)(v7 + 4573), v10[228]))
    {
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v18 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v18, "[dk] %s@%d:Bus is not accessible\n");
        }
      }
    }
    else if (*v10 && !v10[1])
    {
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          OSStringPtr v17 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v17, "[dk] %s@%d:Upgrade to full reset. No longer safe to collect register dump\n");
        }
      }
    }
    else if (AppleBCMWLANChipBackplane::getAPBAccessibilityState(v9) == 1)
    {
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v11 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v11, "[dk] %s@%d:APB is not accessible\n");
        }
      }
    }
    else
    {
      OSDataPtr v12 = *(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360);
      if (v12 && (AppleBCMWLANChipBackplane::getPowerControlRegReadStatus(v12) & 1) != 0)
      {
        AppleBCMWLANChipBackplane::forcePower(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 1, 0);
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            OSDataPtr v20 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            int v21 = (*(uint64_t (**)(CCFaultReport *))(*(void *)a2 + 80))(a2);
            int v22 = (*(uint64_t (**)(CCFaultReport *))(*(void *)a2 + 128))(a2);
            BOOL shouldDeferError = AppleBCMWLANBusInterfacePCIe::shouldDeferError(this, v22);
            int v24 = (*(uint64_t (**)(CCFaultReport *))(*(void *)a2 + 128))(a2);
            CCLogStream::logCrit(v20, "[dk] %s@%d:SoCRAM dump(Deferred CB): needsFullCapture=%d, shouldDeferError=%d, Code=%x\n", "collectDeferredFaultDataCallback", 20022, v21, shouldDeferError, v24);
          }
        }
        if ((*(unsigned int (**)(CCFaultReport *))(*(void *)a2 + 80))(a2))
        {
          int v13 = (*(uint64_t (**)(CCFaultReport *))(*(void *)a2 + 128))(a2);
          if (AppleBCMWLANBusInterfacePCIe::shouldDeferError(this, v13)) {
            AppleBCMWLANBusInterfacePCIe::attachSoCRAMFile(this, a2);
          }
        }
        if (((*(uint64_t (**)(CCFaultReport *))(*(void *)a2 + 88))(a2) & 1) == 0)
        {
          uint64_t v14 = *((void *)this + 9);
          uint64_t v15 = *(void *)(v14 + 3368);
          if (v15)
          {
            (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
            *(void *)(*((void *)this + 9) + 3368) = 0;
            uint64_t v14 = *((void *)this + 9);
          }
          *(void *)(v14 + 3392) = 0;
          *(_OWORD *)(v14 + 3376) = 0u;
        }
        AppleBCMWLANChipBackplane::forcePower(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0, 0);
      }
      else
      {
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            unsigned int v19 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v19, "[dk] %s@%d:Power control register access failed; no longer safe to collect SoCRAM dump\n",
              "collectDeferredFaultDataCallback",
              20010);
          }
        }
        if (*(unsigned char *)(*((void *)this + 9) + 4556))
        {
          if (AppleBCMWLANBusInterface::getLogger(this))
          {
            AppleBCMWLANBusInterface::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              OSDataPtr v16 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
              CCLogStream::logAlert(v16, "[dk] %s@%d:external reset request pending\n");
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::completeFaultReportCallback(AppleBCMWLANBusInterfacePCIe *this, const CCFaultReport *a2)
{
  *(unsigned char *)(*((void *)this + 9) + 4553) = 0;
  (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 9) + 3472) + 88))(*(void *)(*((void *)this + 9) + 3472), *((void *)this + 9) + 4553);
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      int WatchdogResult = CCFaultReport::getWatchdogResult(a2);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:watchdog result %#x\n", "completeFaultReportCallback", 20044, WatchdogResult);
    }
  }
  if (CCFaultReport::getWatchdogResult(a2))
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v8, "[dk] %s@%d:Core layer watchdog did not succeed; cancel external reset request timer\n",
          "completeFaultReportCallback",
          20047);
      }
    }
    uint64_t v4 = *(void *)(*((void *)this + 9) + 3632);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 136))(v4);
    }
  }
  if (CCFaultReport::getWatchdogResult(a2) == -528336892)
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        OSStringPtr v9 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v9, "[dk] %s@%d:Core layer aborted watchdog!", "completeFaultReportCallback", 20055);
      }
    }
    if (AppleBCMWLANChipManagerPCIe::isTrapBeforeFLRSupported(*(AppleBCMWLANChipManagerPCIe **)(*((void *)this + 9)
                                                                                               + 3280)))
    {
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v10 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v10, "[dk] %s@%d:Set PreS2R reason string to handle the eventual setPowerState and recovery\n", "completeFaultReportCallback", 20063);
        }
      }
      (*(void (**)(AppleBCMWLANBusInterfacePCIe *, uint64_t, const char *))(*(void *)this + 1152))(this, 3825173288, "Core Triggered WD in Low Power <- Refer to previous CC");
    }
  }
  return 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::changeDeepSleepStateSetClear(uint64_t this, unsigned int a2, int a3, int a4)
{
  char v4 = a3;
  uint64_t v5 = this;
  uint64_t v6 = *(void *)(this + 72);
  if (a3 == 3 || *(unsigned char *)(v6 + 2868))
  {
    int v7 = *(_DWORD *)(v6 + 4488);
    *(_DWORD *)(v6 + 4488) = v7 & ~a4 | a3;
    if ((a3 & 2) != 0 && (*(unsigned char *)(*(void *)(this + 72) + 4488) & 1) == 0)
    {
      mach_continuous_time();
      this = absolutetime_to_nanoseconds();
    }
    if (v4)
    {
      if ((v7 & 1) == 0)
      {
        mach_continuous_time();
        this = absolutetime_to_nanoseconds();
        *(void *)(*(void *)(v5 + 72) + 4512) = 0;
      }
      uint64_t v8 = *(void *)(v5 + 72);
      if (*(_DWORD *)(v8 + 4500)) {
        return (*(uint64_t (**)(void, uint64_t))(**(void **)(v8 + 3472) + 88))(*(void *)(v8 + 3472), v8 + 4500);
      }
    }
  }
  return this;
}

void AppleBCMWLANBusInterfacePCIe::modifyASPM(AppleBCMWLANBusInterface *a1, unsigned int a2)
{
  uint64_t foundCapabilityOffset = 0;
  uint16_t readData = 0;
  (*(void (**)(AppleBCMWLANBusInterface *, const char *, uint64_t))(*(void *)a1 + 1208))(a1, "modifyASPM", 6425);
  if (*(unsigned char *)(*((void *)a1 + 9) + 4579))
  {
    if (AppleBCMWLANBusInterface::getLogger(a1))
    {
      AppleBCMWLANBusInterface::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
        CCLogStream::logCrit(Logger, "[dk] %s@%d:MultiFunction ASPM Workaround disabled \n");
      }
    }
    return;
  }
  if (a2 == 3 && AppleBCMWLANBusInterfacePCIe::modifyASPM(kAppleBCMWLANPCIeASPMCommands)::aspmSaved != 1) {
    return;
  }
  if (AppleBCMWLANBusInterface::getLogger(a1))
  {
    AppleBCMWLANBusInterface::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v10 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
      CCLogStream::logAlert(v10, "[dk] %s@%d:Command %d\n", "modifyASPM", 6436, a2);
    }
  }
  char v4 = *(IOPCIDevice **)(*((void *)a1 + 9) + 3248);
  if (v4)
  {
    if (IOPCIDevice::FindPCICapability(v4, 0x10u, 0, &foundCapabilityOffset, 0))
    {
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v5 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logAlert(v5, "[dk] %s@%d:endpoint pcie capability not found\n");
        }
      }
      return;
    }
    if (a2 <= 1)
    {
      IOPCIDevice::ConfigurationRead16(*(IOPCIDevice **)(*((void *)a1 + 9) + 3248), foundCapabilityOffset + 16, (uint16_t *)(*((void *)a1 + 9) + 4582));
      AppleBCMWLANBusInterfacePCIe::modifyASPM(kAppleBCMWLANPCIeASPMCommands)::aspmSaved = 1;
      if (!a2) {
        return;
      }
      goto LABEL_22;
    }
    if (a2 == 2)
    {
LABEL_22:
      IOPCIDevice::ConfigurationRead16(*(IOPCIDevice **)(*((void *)a1 + 9) + 3248), foundCapabilityOffset + 16, &readData);
      readData &= 0xFFFCu;
      IOPCIDevice::ConfigurationWrite16(*(IOPCIDevice **)(*((void *)a1 + 9) + 3248), foundCapabilityOffset + 16, readData);
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          int v7 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v7, "[dk] %s@%d:disabled endpoint ASPM 0x%0x\n");
        }
      }
      return;
    }
    if (a2 == 3)
    {
      IOPCIDevice::ConfigurationWrite16(*(IOPCIDevice **)(*((void *)a1 + 9) + 3248), foundCapabilityOffset + 16, *(_WORD *)(*((void *)a1 + 9) + 4582));
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v8 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v8, "[dk] %s@%d:restored endpoint ASPM 0x%0x\n");
        }
      }
    }
  }
  else if (AppleBCMWLANBusInterface::getLogger(a1))
  {
    AppleBCMWLANBusInterface::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v6 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
      CCLogStream::logAlert(v6, "[dk] %s@%d:wlan IOPCIDevice not found\n");
    }
  }
}

uint64_t AppleBCMWLANBusInterfacePCIe::createFirmwareLogger(AppleBCMWLANBusInterfacePCIe *this)
{
  int v2 = (void *)IOMallocZeroTyped();
  if (v2)
  {
    uint64_t v3 = v2;
    *int v2 = 0;
    v2[1] = 0;
    v2[2] = 0x8000;
    unint64_t bytes = 0;
    char v4 = (IOService *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 984))(this);
    if (checkAcquireDataPropertyNotEmpty(v4, "wlan.ccpipe.size", &bytes, 8uLL, 1uLL, "IOService"))
    {
      int v5 = *(_DWORD *)OSData::getBytesNoCopy(bytes, 0, 8uLL);
      v3[2] = (v5 << 10);
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(Logger, "[dk] %s@%d:WiFiFirmwareBusLogs Size configure from device tree: %uKB\n", "createFirmwareLogger", 16393, v5);
        }
      }
      if (bytes)
      {
        ((void (*)(OSData *))bytes->release)(bytes);
        unint64_t bytes = 0;
      }
    }
    int v21 = 0;
    if (IOParseBootArgNumber("wlan.ccpipe.FWBusLogs.size", &v21, 4))
    {
      unint64_t v6 = (v21 << 10);
      if (v3[2] > v6) {
        unint64_t v6 = v3[2];
      }
      if (v6 >= 0x80000) {
        unint64_t v6 = 0x80000;
      }
      v3[2] = v6;
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v19 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v19, "[dk] %s@%d:WiFiFirmwareBusLogs Size configure from boot-args: %u (Max=512KB)\n", "createFirmwareLogger", 16401, v3[2]);
        }
      }
    }
    v3[3] = (unint64_t)((2 * ((5 * v3[2]) & 0x1FFFFFFFFFFFFFFFuLL) * (unsigned __int128)0x28F5C28F5C28F5C3uLL) >> 64) >> 2;
    *((_DWORD *)v3 + 8) = 1000;
    int ModuleInstanceId = AppleBCMWLANBusInterface::getModuleInstanceId(this);
    snprintf((char *)v3 + 292, 0x100uLL, "brcm%x", ModuleInstanceId);
    strcpy((char *)v3 + 36, "FirmwareBusLogs");
    strcpy((char *)v3 + 580, "WiFi");
    *(void *)((char *)v3 + 548) = 0x200200000;
    v3[71] = 0;
    OSMetaClassBase::safeMetaCast((const OSMetaClassBase *)this, (const OSMetaClass *)gAppleBCMWLANBusInterfacePCIeMetaClass);
    AppleBCMWLANBusInterface::getCCPipeOwner(this);
    uint64_t v8 = (*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 80))(this);
    (*(void (**)(uint64_t))(*(void *)v8 + 168))(v8);
    OSStringPtr v9 = (const OSMetaClassBase *)CCPipe::withOwnerNameCapacity();
    *(void *)(*((void *)this + 9) + 3792) = OSMetaClassBase::safeMetaCast(v9, gCCLogPipeMetaClass);
    IOFree(v3, 0x350uLL);
    if (!*(void *)(*((void *)this + 9) + 3792)) {
      return 0;
    }
    uint64_t v10 = IOMallocZeroTyped();
    if (v10)
    {
      uint64_t v11 = v10;
      *(_DWORD *)uint64_t v10 = 0;
      *(void *)(v10 + 8) = -1;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0;
      if (AppleBCMWLAN_isVerboseDebugLoggingAllowed())
      {
        *(_DWORD *)(v11 + 8) = 127;
        *(void *)(v11 + 24) = 0x80000000000;
      }
      *(unsigned char *)(v11 + 88) = 0;
      *(void *)(v11 + 48) = this;
      *(void *)(v11 + 56) = busSetLogLevelCallback;
      *(void *)(v11 + 72) = 0;
      *(void *)(v11 + 80) = 0;
      *(void *)(v11 + 64) = busSetLogFlagsCallback;
      unint64_t bytes = (OSData *)0xA5A500000000000DLL;
      OSDataPtr v12 = OSData::withBytes(&bytes, 8uLL);
      *(void *)(v11 + 328) = v12;
      *(_WORD *)(v11 + 336) = 150;
      if (*(void *)(*((void *)this + 9) + 3792))
      {
        int v13 = (const OSMetaClassBase *)CCStream::withPipeAndName();
        *(void *)(*((void *)this + 9) + 3784) = OSMetaClassBase::safeMetaCast(v13, gCCLogStreamMetaClass);
        OSDataPtr v12 = *(OSDataPtr *)(v11 + 328);
      }
      ((void (*)(OSDataPtr))v12->release)(v12);
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          OSDataPtr v20 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v20, "[dk] %s@%d: CCFlags: 0x%llx, CCLevel: %d ConsoleFlags: 0x%llx, ConsoleLevel: %d\n", "createFirmwareLogger", 16464, *(void *)(v11 + 24), *(_DWORD *)(v11 + 8), *(void *)(v11 + 32), *(_DWORD *)(v11 + 12));
        }
      }
      IOFree((void *)v11, 0x358uLL);
      uint64_t v14 = *((void *)this + 9);
      if (*(void *)(v14 + 3784))
      {
        (*(void (**)(void))(**(void **)(v14 + 3792) + 72))(*(void *)(v14 + 3792));
        return 1;
      }
      return 0;
    }
    uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
    if (result)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        OSDataPtr v16 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        int v17 = 16429;
        goto LABEL_33;
      }
    }
  }
  else
  {
    uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
    if (result)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        OSDataPtr v16 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        int v17 = 16371;
LABEL_33:
        CCLogStream::logCrit(v16, "[dk] %s@%d:Failed to allocate memory\n", "createFirmwareLogger", v17);
        return 0;
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::createCrashTracerLogger(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t v2 = IOMallocZeroTyped();
  if (v2)
  {
    uint64_t v3 = v2;
    *(_OWORD *)uint64_t v2 = xmmword_100371290;
    strcpy((char *)(v2 + 36), "CrashTracerLog");
    char v4 = (char *)(v2 + 292);
    int ModuleInstanceId = AppleBCMWLANBusInterface::getModuleInstanceId(this);
    snprintf(v4, 0x100uLL, "brcm%x", ModuleInstanceId);
    strcpy((char *)(v3 + 580), "WiFi");
    *(void *)(v3 + 16) = 64;
    *(void *)(v3 + 560) = OSMetaClassBase::safeMetaCast((const OSMetaClassBase *)this, (const OSMetaClass *)gAppleBCMWLANBusInterfacePCIeMetaClass);
    *(void *)(v3 + 568) = 0;
    OSMetaClassBase::safeMetaCast((const OSMetaClassBase *)this, (const OSMetaClass *)gAppleBCMWLANBusInterfacePCIeMetaClass);
    AppleBCMWLANBusInterface::getCCPipeOwner(this);
    uint64_t v6 = (*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 80))(this);
    (*(void (**)(uint64_t))(*(void *)v6 + 168))(v6);
    int v7 = (const OSMetaClassBase *)CCPipe::withOwnerNameCapacity();
    *(void *)(*((void *)this + 9) + 3808) = OSMetaClassBase::safeMetaCast(v7, gCCDataPipeMetaClass);
    IOFree((void *)v3, 0x350uLL);
    if (!*(void *)(*((void *)this + 9) + 3808)) {
      return 0;
    }
    uint64_t v8 = IOMallocZeroTyped();
    if (v8)
    {
      OSStringPtr v9 = (void *)v8;
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = -1;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 0;
      *(void *)(v8 + 56) = 0;
      *(void *)(v8 + 64) = 0;
      *(void *)(v8 + 48) = 0;
      if (*(void *)(*((void *)this + 9) + 3808))
      {
        uint64_t v10 = (const OSMetaClassBase *)CCStream::withPipeAndName();
        *(void *)(*((void *)this + 9) + 3800) = OSMetaClassBase::safeMetaCast(v10, gCCDataStreamMetaClass);
      }
      IOFree(v9, 0x358uLL);
      uint64_t v11 = *((void *)this + 9);
      if (*(void *)(v11 + 3800))
      {
        (*(void (**)(void))(**(void **)(v11 + 3808) + 72))(*(void *)(v11 + 3808));
        return 1;
      }
      return 0;
    }
    uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
    if (result)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        int v14 = 16515;
        goto LABEL_14;
      }
    }
  }
  else
  {
    uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
    if (result)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        int v14 = 16483;
LABEL_14:
        CCLogStream::logCrit(Logger, "[dk] %s@%d:Failed to allocate memory\n", "createCrashTracerLogger", v14);
        return 0;
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::freeTrapMiniDumpBufferTimeout(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 72);
  if (*(unsigned char *)(v1 + 4084))
  {
    uint64_t v2 = (AppleBCMWLANBusInterface *)result;
    uint64_t result = *(void *)(v1 + 1520);
    if (result)
    {
      IOFreeData();
      *(void *)(*((void *)v2 + 9) + 1520) = 0;
      uint64_t result = AppleBCMWLANBusInterface::getLogger(v2);
      if (result)
      {
        AppleBCMWLANBusInterface::getLogger(v2);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(v2);
          return CCLogStream::logInfo(Logger, "[dk] %s@%d:Free fTrapMiniDumpBuffer\n", "freeTrapMiniDumpBufferTimeout", 19024);
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::ptmAckTimeout(AppleBCMWLANBusInterface *a1)
{
  if (AppleBCMWLANBusInterface::getLogger(a1))
  {
    AppleBCMWLANBusInterface::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:Timed out waiting for PTM ack\n", "ptmAckTimeout", 4273);
    }
  }
  AppleBCMWLANBusInterfacePCIe::configurePTM(a1, 0);
  IOPCIDevice::SetASPMState(*(IOPCIDevice **)(*((void *)a1 + 9) + 3248), 2u, 0);
  uint64_t result = AppleBCMWLANBusInterface::getFaultReporter(a1);
  if (result)
  {
    FaultReporter = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(a1);
    return CCFaultReporter::reportFault(FaultReporter, 5u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANBusInterfacePCIe.cpp", 0x10B6u, "ptmAckTimeout", 0, -469794005, 0);
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::deferredStart(AppleBCMWLANBusInterfacePCIe *this)
{
  return AppleBCMWLANBusInterfacePCIe::deferredStart((IOService *)((char *)this - 64));
}

AppleBCMWLANBusInterface *AppleBCMWLANBusInterfacePCIe::waitForBusAttachWithTimeoutGated(AppleBCMWLANBusInterface *this, unsigned int *a2)
{
  if (!*(void *)(*((void *)this + 9) + 3248))
  {
    uint64_t v2 = this;
    if (a2) {
      int v3 = *a2;
    }
    else {
      int v3 = 100;
    }
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(v2);
      if (CCLogStream::shouldLog())
      {
        Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(v2);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:enter, this[%p] ... waiting for [%u ms] \n", "waitForBusAttachWithTimeoutGated", 3011, v2, v3);
      }
    }
    clock_interval_to_deadline();
    (*(void (**)(void, uint64_t, unint64_t))(**(void **)(*((void *)v2 + 9) + 3472) + 80))(*(void *)(*((void *)v2 + 9) + 3472), *((void *)v2 + 9) + 3248, 0xAAAAAAAAAAAAAAAALL);
    this = (AppleBCMWLANBusInterface *)AppleBCMWLANBusInterface::getLogger(v2);
    if (this)
    {
      AppleBCMWLANBusInterface::getLogger(v2);
      this = (AppleBCMWLANBusInterface *)CCLogStream::shouldLog();
      if (this)
      {
        int v5 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(v2);
        return (AppleBCMWLANBusInterface *)CCLogStream::logAlert(v5, "[dk] %s@%d:exit, this[%p] fPCIeBus[%p]\n", "waitForBusAttachWithTimeoutGated", 3019, v2, *(const void **)(*((void *)v2 + 9) + 3248));
      }
    }
  }
  return this;
}

uint64_t AppleBCMWLANBusInterfacePCIe::setShutdownActionBlock(uint64_t a1, void *aBlock)
{
  *(void *)(*(void *)(a1 + 72) + 5216) = _Block_copy(aBlock);
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::setShutdownActionBlock(uint64_t a1, void *aBlock)
{
  *(void *)(*(void *)(a1 + 24) + 5216) = _Block_copy(aBlock);
  return 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::handleShutdownAtTermination(AppleBCMWLANBusInterfacePCIe *this)
{
  unsigned int v32 = 0;
  uint64_t v2 = OSString::withCString("com.apple.iokit.pm.haltdescription");
  uint64_t v3 = IOService::StateNotificationItemCopy(*(IOService **)(*((void *)this + 9) + 5208), v2, &v32, 0);
  int v30 = 0;
  int v31 = 1;
  IOParseBootArgNumber("wlan.dk.shutdown-panic", &v31, 4);
  IOParseBootArgNumber("wlan.dk.shutdown-killDext", &v30, 4);
  if (v32
    && (Object = OSDictionary::getObject(v32, "com.apple.iokit.pm.haltstate"),
        (int v5 = (const OSNumber *)OSMetaClassBase::safeMetaCast(Object, gOSNumberMetaClass)) != 0))
  {
    uint64_t v6 = OSNumber::unsigned64BitValue(v5);
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:BusInterfacePCIe: ret[0x%08x], state value[0x%016llx] this[%p] panic[%u] killDext[%u]", "handleShutdownAtTermination", 3059, v3, v6, this, v31, v30);
    }
  }
  if (v3 == -536870160)
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v11 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v11, "[dk] %s@%d:BusInterfacePCIe: userspace reboot, state value[0x%016llx]\n");
        goto LABEL_46;
      }
    }
    goto LABEL_34;
  }
  if (v3)
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        OSDataPtr v12 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        (*(void (**)(AppleBCMWLANBusInterfacePCIe *, uint64_t))(*(void *)this + 104))(this, v3);
        CCLogStream::logAlert(v12, "[dk] %s@%d:BusInterfacePCIe: could not retrieve system state; ret=%s, state value[0x%016llx]\n");
        goto LABEL_46;
      }
    }
LABEL_34:
    if (!v2) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  int v7 = OSDictionary::getObject(v32, "com.apple.iokit.pm.haltstate");
  uint64_t v8 = (const OSNumber *)OSMetaClassBase::safeMetaCast(v7, gOSNumberMetaClass);
  if (!v8 || (OSNumber::unsigned64BitValue(v8) & 3) == 0)
  {
    if (!AppleBCMWLANBusInterface::getLogger(this)) {
      goto LABEL_34;
    }
    AppleBCMWLANBusInterface::getLogger(this);
    if (!CCLogStream::shouldLog()) {
      goto LABEL_34;
    }
    int v21 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
    CCLogStream::logAlert(v21, "[dk] %s@%d:Tearing down, state value[0x%016llx]\n");
LABEL_46:
    if (!v2) {
      goto LABEL_36;
    }
LABEL_35:
    ((void (*)(OSString *))v2->release)(v2);
    goto LABEL_36;
  }
  uint64_t v26 = 0;
  unsigned int v27 = &v26;
  uint64_t v28 = 0x2000000000;
  int v29 = 0;
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      int v22 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(v22, "[dk] %s@%d:BusInterfacePCIe: system shutdown/restart, state value[0x%016llx]", "handleShutdownAtTermination", 3067, v6);
    }
  }
  uint64_t v9 = *((void *)this + 9);
  if (*(void *)(v9 + 5216))
  {
    uint64_t v10 = (IODispatchQueue *)(*(uint64_t (**)(void))(**(void **)(v9 + 3464) + 168))(*(void *)(v9 + 3464));
    block[0] = _NSConcreteStackBlock;
    block[1] = 1107296256;
    block[2] = ___ZN28AppleBCMWLANBusInterfacePCIe27handleShutdownAtTerminationEv_block_invoke;
    block[3] = &__block_descriptor_tmp_6;
    block[4] = &v26;
    block[5] = this;
    IODispatchQueue::DispatchSync(v10, block);
    _Block_release(*(const void **)(*((void *)this + 9) + 5216));
    *(void *)(*((void *)this + 9) + 5216) = 0;
  }
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      unsigned int v23 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(v23, "[dk] %s@%d:Shutdown handling complete, rval[0x%08x]\n", "handleShutdownAtTermination", 3077, *((_DWORD *)v27 + 6));
    }
  }
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      int v24 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(v24, "[dk] %s@%d:WiFi doesn't terminate cleanly because we're lazy, 'wlan.dk.shutdown-panic'[0x%08x]\n", "handleShutdownAtTermination", 3079, v31);
    }
  }
  if (v31) {
    AppleBCMWLANBusInterfacePCIe::handleShutdownAtTermination();
  }
  _Block_object_dispose(&v26, 8);
  if (v2) {
    goto LABEL_35;
  }
LABEL_36:
  if (v32)
  {
    ((void (*)(OSDictionary *))v32->release)(v32);
    unsigned int v32 = 0;
  }
  uint64_t v13 = *((void *)this + 9);
  int v14 = *(const void **)(v13 + 5216);
  if (v14)
  {
    _Block_release(v14);
    uint64_t v13 = *((void *)this + 9);
  }
  uint64_t v15 = *(void *)(v13 + 5208);
  if (v15)
  {
    (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
    *(void *)(*((void *)this + 9) + 5208) = 0;
  }
  if (v30)
  {
    IOLog("BusInterfacePCIe: this[%p], killDext[%u], ...\n", this, v30);
    int v17 = AppleOLYHAL::killDextDK((AppleOLYHAL *)"Force termination", v16);
    IOLog("BusInterfacePCIe: this[%p], killDext[%u], halret[0x%08x] ...\n", this, v30, v17);
  }
  uint64_t v18 = (const char *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *, uint64_t))(*(void *)this + 104))(this, v3);
  return IOLog("handleShutdownAtTermination::BusInterfacePCIe: ... done, ret=%s, state value[0x%016llx]\n", v18, v6);
}

uint64_t ___ZN28AppleBCMWLANBusInterfacePCIe27handleShutdownAtTerminationEv_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(*(void *)(*(void *)(a1 + 40) + 72) + 5216) + 16))();
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::Stop_Impl(AppleBCMWLANBusInterfacePCIe *this, IOService *a2)
{
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      int v29 = *(const void **)(*((void *)this + 9) + 3248);
      int v30 = "valid";
      if (!v29) {
        int v30 = "NULL";
      }
      CCLogStream::logAlert(Logger, "[dk] %s@%d:::Stop_Impl: fPCIeBus %s, fPCIeBus[%p] stop( %p) this[%p]\n", "Stop_Impl", 3146, v30, v29, a2, this);
    }
  }
  char v4 = (void *)*((void *)this + 9);
  if (v4[406])
  {
    AppleBCMWLANBusInterfacePCIe::handleShutdownAtTermination(this);
    char v4 = (void *)*((void *)this + 9);
  }
  uint64_t v5 = v4[474];
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 80))(v5);
    char v4 = (void *)*((void *)this + 9);
  }
  uint64_t v6 = v4[473];
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    *(void *)(*((void *)this + 9) + 3784) = 0;
    char v4 = (void *)*((void *)this + 9);
  }
  uint64_t v7 = v4[474];
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    *(void *)(*((void *)this + 9) + 3792) = 0;
    char v4 = (void *)*((void *)this + 9);
  }
  uint64_t v8 = v4[476];
  if (v8)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 80))(v8);
    char v4 = (void *)*((void *)this + 9);
  }
  uint64_t v9 = v4[475];
  if (v9)
  {
    (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
    *(void *)(*((void *)this + 9) + 3800) = 0;
    char v4 = (void *)*((void *)this + 9);
  }
  uint64_t v10 = v4[476];
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
    *(void *)(*((void *)this + 9) + 3808) = 0;
    char v4 = (void *)*((void *)this + 9);
  }
  uint64_t v11 = v4[553];
  if (v11)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 80))(v11);
    char v4 = (void *)*((void *)this + 9);
  }
  uint64_t v12 = v4[552];
  if (v12)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
    *(void *)(*((void *)this + 9) + 4416) = 0;
    char v4 = (void *)*((void *)this + 9);
  }
  uint64_t v13 = v4[553];
  if (v13)
  {
    (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
    *(void *)(*((void *)this + 9) + 4424) = 0;
    char v4 = (void *)*((void *)this + 9);
  }
  uint64_t v14 = v4[555];
  if (v14)
  {
    (*(void (**)(uint64_t))(*(void *)v14 + 80))(v14);
    char v4 = (void *)*((void *)this + 9);
  }
  uint64_t v15 = v4[554];
  if (v15)
  {
    (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
    *(void *)(*((void *)this + 9) + 4432) = 0;
    char v4 = (void *)*((void *)this + 9);
  }
  uint64_t v16 = v4[555];
  if (v16)
  {
    (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
    *(void *)(*((void *)this + 9) + 4440) = 0;
    char v4 = (void *)*((void *)this + 9);
  }
  uint64_t v17 = v4[478];
  if (v17)
  {
    (*(void (**)(uint64_t))(*(void *)v17 + 80))(v17);
    char v4 = (void *)*((void *)this + 9);
  }
  uint64_t v18 = v4[477];
  if (v18)
  {
    (*(void (**)(uint64_t))(*(void *)v18 + 16))(v18);
    *(void *)(*((void *)this + 9) + 3816) = 0;
    char v4 = (void *)*((void *)this + 9);
  }
  uint64_t v19 = v4[478];
  if (v19)
  {
    (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
    *(void *)(*((void *)this + 9) + 3824) = 0;
    char v4 = (void *)*((void *)this + 9);
  }
  uint64_t v20 = v4[573];
  if (v20)
  {
    (*(void (**)(uint64_t))(*(void *)v20 + 16))(v20);
    *(void *)(*((void *)this + 9) + 4584) = 0;
    char v4 = (void *)*((void *)this + 9);
  }
  uint64_t v21 = v4[574];
  if (v21)
  {
    (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
    *(void *)(*((void *)this + 9) + 4592) = 0;
    char v4 = (void *)*((void *)this + 9);
  }
  uint64_t v22 = v4[575];
  if (v22)
  {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
    *(void *)(*((void *)this + 9) + 4600) = 0;
  }
  if (AppleBCMWLANBusInterface::getIO80211FaultReporter(this))
  {
    uint64_t IO80211FaultReporter = AppleBCMWLANBusInterface::getIO80211FaultReporter(this);
    if (IO80211FaultReporter) {
      (*(void (**)(uint64_t))(*(void *)IO80211FaultReporter + 16))(IO80211FaultReporter);
    }
  }
  if (AppleBCMWLANBusInterface::getFaultReporter(this))
  {
    FaultReporter = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(this);
    CCFaultReporter::unregisterCallbacks(FaultReporter, (OSObject *)this);
    if (FaultReporter) {
      (*(void (**)(CCFaultReporter *))(*(void *)FaultReporter + 16))(FaultReporter);
    }
  }
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      int v31 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(v31, "[dk] %s@%d:fPCIeBus Closing(), [%p]\n", "Stop_Impl", 3206, *(const void **)(*((void *)this + 9) + 3248));
    }
  }
  OSStringPtr v25 = *(IOPCIDevice **)(*((void *)this + 9) + 3248);
  if (v25) {
    IOPCIDevice::Close(v25, (IOService *)this, 0);
  }
  uint64_t v26 = IOService::Stop((IOService *)this, a2, (OSDispatchMethod)AppleBCMWLANBusInterface::_Dispatch);
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      unsigned int v32 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(v32, "[dk] %s@%d:fPCIeBus Closed/Stopped, [%p], kret[0x%08x]\n", "Stop_Impl", 3212, *(const void **)(*((void *)this + 9) + 3248), v26);
    }
  }
  return v26;
}

void AppleBCMWLANBusInterfacePCIe::free(IOService *this)
{
  if (this[1].OSObject::OSObjectInterface::__vftable)
  {
    ((void (*)(IOService *))this->OSObject::OSMetaClassBase::__vftable[13].retain)(this);
    AppleBCMWLANBusInterfacePCIe::stopOLYHAL((AppleBCMWLANBusInterfacePCIe *)this);
    memset_s(this[1].OSObject::OSObjectInterface::__vftable, 0x1510uLL, 0, 0x1510uLL);
    uint64_t v2 = this[1].OSObject::OSObjectInterface::__vftable;
    if (v2)
    {
      IOFree(v2, 0x1510uLL);
      this[1].OSObject::OSObjectInterface::__vftable = 0;
    }
  }
  AppleBCMWLANBusInterface::free(this);
}

uint64_t AppleBCMWLANBusInterfacePCIe::stopOLYHAL(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t v2 = (void *)*((void *)this + 9);
  uint64_t v3 = v2[659];
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    *(void *)(*((void *)this + 9) + 5272) = 0;
    uint64_t v2 = (void *)*((void *)this + 9);
  }
  uint64_t v4 = v2[660];
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
    *(void *)(*((void *)this + 9) + 5280) = 0;
    uint64_t v2 = (void *)*((void *)this + 9);
  }
  uint64_t v5 = v2[647];
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    *(void *)(*((void *)this + 9) + 5176) = 0;
    uint64_t v2 = (void *)*((void *)this + 9);
  }
  uint64_t v6 = v2[648];
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    *(void *)(*((void *)this + 9) + 5184) = 0;
  }
  return 0;
}

void non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::free(AppleBCMWLANBusInterfacePCIe *this)
{
}

void AppleBCMWLANBusInterfacePCIe::freeResources(OSObject *this)
{
  ivars = this[1].ivars;
  if (*((void *)ivars + 508))
  {
    IOFreeData();
    *((void *)this[1].ivars + 508) = 0;
    ivars = this[1].ivars;
  }
  uint64_t v3 = *((void *)ivars + 511);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 72))(v3);
    ivars = this[1].ivars;
    uint64_t v4 = *((void *)ivars + 511);
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
      *((void *)this[1].ivars + 511) = 0;
      ivars = this[1].ivars;
    }
  }
  if (*((void *)ivars + 190))
  {
    IOFreeData();
    *((void *)this[1].ivars + 190) = 0;
  }
  AppleBCMWLANBusInterfacePCIe::destroyFirmwareIPCTrackers(this);
  AppleBCMWLANBusInterfacePCIe::destroyFirmwarePCIeIPC((AppleBCMWLANBusInterfacePCIe *)this);
  uint64_t v5 = this[1].ivars;
  uint64_t v6 = *((void *)v5 + 559);
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    *((void *)this[1].ivars + 559) = 0;
    uint64_t v5 = this[1].ivars;
  }
  uint64_t v7 = *((void *)v5 + 393);
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    *((void *)this[1].ivars + 393) = 0;
    uint64_t v5 = this[1].ivars;
  }
  uint64_t v8 = *((void *)v5 + 647);
  if (v8)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
    *((void *)this[1].ivars + 647) = 0;
    uint64_t v5 = this[1].ivars;
  }
  uint64_t v9 = *((void *)v5 + 648);
  if (!v9) {
    goto LABEL_17;
  }
  (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  *((void *)this[1].ivars + 648) = 0;
  while (1)
  {
    uint64_t v5 = this[1].ivars;
LABEL_17:
    uint64_t v10 = (void *)((char *)v5 + 1504);
    uint64_t v11 = (uint64_t *)*((void *)v5 + 188);
    if ((uint64_t *)((char *)v5 + 1504) == v11) {
      break;
    }
    if (*(uint64_t **)v11[1] != v11 || (uint64_t v12 = *v11, *(uint64_t **)(*v11 + 8) != v11))
    {
      __break(1u);
      return;
    }
    *(void *)(v12 + 8) = v10;
    void *v10 = v12;
    uint64_t *v11 = 0;
    v11[1] = 0;
    uint64_t v13 = v11 - 2;
    uint64_t v14 = *(v11 - 1);
    if (v14)
    {
      (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
      v13[1] = 0;
    }
    IOFree(v13, 0x20uLL);
  }
  uint64_t v15 = (IOLock *)*((void *)v5 + 352);
  if (v15)
  {
    IOLockFree(v15);
    *((void *)this[1].ivars + 352) = 0;
    uint64_t v5 = this[1].ivars;
  }
  uint64_t v16 = *((void *)v5 + 455);
  if (v16)
  {
    (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
    *((void *)this[1].ivars + 455) = 0;
    uint64_t v5 = this[1].ivars;
  }
  uint64_t v17 = *((void *)v5 + 405);
  if (v17)
  {
    (*(void (**)(uint64_t))(*(void *)v17 + 72))(v17);
    (*(void (**)(void, void))(**((void **)this[1].ivars + 433) + 72))(*((void *)this[1].ivars + 433), *((void *)this[1].ivars + 405));
    uint64_t v5 = this[1].ivars;
    uint64_t v18 = *((void *)v5 + 405);
    if (v18)
    {
      (*(void (**)(uint64_t))(*(void *)v18 + 16))(v18);
      *((void *)this[1].ivars + 405) = 0;
      uint64_t v5 = this[1].ivars;
    }
  }
  uint64_t v19 = *((void *)v5 + 449);
  if (v19)
  {
    (*(void (**)(uint64_t))(*(void *)v19 + 72))(v19);
    uint64_t v5 = this[1].ivars;
    uint64_t v20 = *((void *)v5 + 449);
    if (v20)
    {
      (*(void (**)(uint64_t))(*(void *)v20 + 16))(v20);
      *((void *)this[1].ivars + 449) = 0;
      uint64_t v5 = this[1].ivars;
    }
  }
  uint64_t v21 = *((void *)v5 + 450);
  if (v21)
  {
    (*(void (**)(uint64_t))(*(void *)v21 + 72))(v21);
    uint64_t v5 = this[1].ivars;
    uint64_t v22 = *((void *)v5 + 450);
    if (v22)
    {
      (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
      *((void *)this[1].ivars + 450) = 0;
      uint64_t v5 = this[1].ivars;
    }
  }
  uint64_t v23 = *((void *)v5 + 451);
  if (v23)
  {
    (*(void (**)(uint64_t))(*(void *)v23 + 72))(v23);
    uint64_t v5 = this[1].ivars;
    uint64_t v24 = *((void *)v5 + 451);
    if (v24)
    {
      (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
      *((void *)this[1].ivars + 451) = 0;
      uint64_t v5 = this[1].ivars;
    }
  }
  uint64_t v25 = *((void *)v5 + 452);
  if (v25)
  {
    (*(void (**)(uint64_t))(*(void *)v25 + 72))(v25);
    uint64_t v5 = this[1].ivars;
    uint64_t v26 = *((void *)v5 + 452);
    if (v26)
    {
      (*(void (**)(uint64_t))(*(void *)v26 + 16))(v26);
      *((void *)this[1].ivars + 452) = 0;
      uint64_t v5 = this[1].ivars;
    }
  }
  uint64_t v27 = *((void *)v5 + 454);
  if (v27)
  {
    (*(void (**)(uint64_t))(*(void *)v27 + 72))(v27);
    uint64_t v5 = this[1].ivars;
    uint64_t v28 = *((void *)v5 + 454);
    if (v28)
    {
      (*(void (**)(uint64_t))(*(void *)v28 + 16))(v28);
      *((void *)this[1].ivars + 454) = 0;
      uint64_t v5 = this[1].ivars;
    }
  }
  uint64_t v29 = *((void *)v5 + 138);
  if (v29)
  {
    (*(void (**)(uint64_t))(*(void *)v29 + 72))(v29);
    uint64_t v5 = this[1].ivars;
    uint64_t v30 = *((void *)v5 + 138);
    if (v30)
    {
      (*(void (**)(uint64_t))(*(void *)v30 + 16))(v30);
      *((void *)this[1].ivars + 138) = 0;
      uint64_t v5 = this[1].ivars;
    }
  }
  uint64_t v31 = *((void *)v5 + 479);
  if (v31)
  {
    (*(void (**)(uint64_t))(*(void *)v31 + 72))(v31);
    uint64_t v5 = this[1].ivars;
    uint64_t v32 = *((void *)v5 + 479);
    if (v32)
    {
      (*(void (**)(uint64_t))(*(void *)v32 + 16))(v32);
      *((void *)this[1].ivars + 479) = 0;
      uint64_t v5 = this[1].ivars;
    }
  }
  uint64_t v33 = *((void *)v5 + 480);
  if (v33)
  {
    (*(void (**)(uint64_t))(*(void *)v33 + 72))(v33);
    uint64_t v5 = this[1].ivars;
    uint64_t v34 = *((void *)v5 + 480);
    if (v34)
    {
      (*(void (**)(uint64_t))(*(void *)v34 + 16))(v34);
      *((void *)this[1].ivars + 480) = 0;
      uint64_t v5 = this[1].ivars;
    }
  }
  uint64_t v35 = *((void *)v5 + 568);
  if (v35)
  {
    (*(void (**)(uint64_t))(*(void *)v35 + 16))(v35);
    *((void *)this[1].ivars + 568) = 0;
    uint64_t v5 = this[1].ivars;
  }
  uint64_t v36 = *((void *)v5 + 447);
  if (v36)
  {
    (*(void (**)(uint64_t))(*(void *)v36 + 16))(v36);
    *((void *)this[1].ivars + 447) = 0;
    uint64_t v5 = this[1].ivars;
  }
  uint64_t v37 = *((void *)v5 + 446);
  if (v37)
  {
    (*(void (**)(uint64_t))(*(void *)v37 + 16))(v37);
    *((void *)this[1].ivars + 446) = 0;
    uint64_t v5 = this[1].ivars;
  }
  uint64_t v38 = *((void *)v5 + 444);
  if (v38)
  {
    (*(void (**)(uint64_t))(*(void *)v38 + 16))(v38);
    *((void *)this[1].ivars + 444) = 0;
    uint64_t v5 = this[1].ivars;
  }
  uint64_t v39 = *((void *)v5 + 166);
  if (v39)
  {
    (*(void (**)(uint64_t))(*(void *)v39 + 72))(v39);
    uint64_t v5 = this[1].ivars;
    uint64_t v40 = *((void *)v5 + 166);
    if (v40)
    {
      (*(void (**)(uint64_t))(*(void *)v40 + 16))(v40);
      *((void *)this[1].ivars + 166) = 0;
      uint64_t v5 = this[1].ivars;
    }
  }
  uint64_t v41 = *((void *)v5 + 445);
  if (v41)
  {
    (*(void (**)(uint64_t))(*(void *)v41 + 16))(v41);
    *((void *)this[1].ivars + 445) = 0;
    uint64_t v5 = this[1].ivars;
  }
  uint64_t v42 = *((void *)v5 + 167);
  if (v42)
  {
    (*(void (**)(uint64_t))(*(void *)v42 + 72))(v42);
    uint64_t v5 = this[1].ivars;
    uint64_t v43 = *((void *)v5 + 167);
    if (v43)
    {
      (*(void (**)(uint64_t))(*(void *)v43 + 16))(v43);
      *((void *)this[1].ivars + 167) = 0;
      uint64_t v5 = this[1].ivars;
    }
  }
  uint64_t v44 = *((void *)v5 + 448);
  if (v44)
  {
    (*(void (**)(uint64_t))(*(void *)v44 + 16))(v44);
    *((void *)this[1].ivars + 448) = 0;
    uint64_t v5 = this[1].ivars;
  }
  uint64_t v45 = *((void *)v5 + 136);
  if (v45)
  {
    (*(void (**)(uint64_t))(*(void *)v45 + 16))(v45);
    *((void *)this[1].ivars + 136) = 0;
    uint64_t v5 = this[1].ivars;
  }
  uint64_t v46 = *((void *)v5 + 137);
  if (v46)
  {
    (*(void (**)(uint64_t))(*(void *)v46 + 16))(v46);
    *((void *)this[1].ivars + 137) = 0;
    uint64_t v5 = this[1].ivars;
  }
  uint64_t v47 = *((void *)v5 + 139);
  if (v47)
  {
    (*(void (**)(uint64_t))(*(void *)v47 + 16))(v47);
    *((void *)this[1].ivars + 139) = 0;
    uint64_t v5 = this[1].ivars;
  }
  uint64_t v48 = *((void *)v5 + 140);
  if (v48)
  {
    (*(void (**)(uint64_t))(*(void *)v48 + 16))(v48);
    *((void *)this[1].ivars + 140) = 0;
    uint64_t v5 = this[1].ivars;
  }
  uint64_t v49 = *((void *)v5 + 141);
  if (v49)
  {
    (*(void (**)(uint64_t))(*(void *)v49 + 16))(v49);
    *((void *)this[1].ivars + 141) = 0;
    uint64_t v5 = this[1].ivars;
  }
  uint64_t v50 = *((void *)v5 + 142);
  if (v50)
  {
    (*(void (**)(uint64_t))(*(void *)v50 + 16))(v50);
    *((void *)this[1].ivars + 142) = 0;
    uint64_t v5 = this[1].ivars;
  }
  uint64_t v51 = *((void *)v5 + 442);
  if (v51)
  {
    (*(void (**)(uint64_t))(*(void *)v51 + 16))(v51);
    *((void *)this[1].ivars + 442) = 0;
    uint64_t v5 = this[1].ivars;
  }
  uint64_t v52 = *((void *)v5 + 441);
  if (v52)
  {
    (*(void (**)(uint64_t))(*(void *)v52 + 16))(v52);
    *((void *)this[1].ivars + 441) = 0;
    uint64_t v5 = this[1].ivars;
  }
  uint64_t v53 = *((void *)v5 + 440);
  if (v53)
  {
    (*(void (**)(uint64_t))(*(void *)v53 + 16))(v53);
    *((void *)this[1].ivars + 440) = 0;
    uint64_t v5 = this[1].ivars;
  }
  uint64_t v54 = *((void *)v5 + 439);
  if (v54)
  {
    (*(void (**)(uint64_t))(*(void *)v54 + 16))(v54);
    *((void *)this[1].ivars + 439) = 0;
    uint64_t v5 = this[1].ivars;
  }
  uint64_t v55 = *((void *)v5 + 443);
  if (v55)
  {
    (*(void (**)(uint64_t))(*(void *)v55 + 16))(v55);
    *((void *)this[1].ivars + 443) = 0;
  }
  uint64_t RxDescriptorEventQueue = AppleBCMWLANBusInterface::getRxDescriptorEventQueue((AppleBCMWLANBusInterface *)this);
  if (RxDescriptorEventQueue) {
    (*(void (**)(uint64_t))(*(void *)RxDescriptorEventQueue + 16))(RxDescriptorEventQueue);
  }
  uint64_t RxDescriptorCommandQueue = AppleBCMWLANBusInterface::getRxDescriptorCommandQueue((AppleBCMWLANBusInterface *)this);
  if (RxDescriptorCommandQueue) {
    (*(void (**)(uint64_t))(*(void *)RxDescriptorCommandQueue + 16))(RxDescriptorCommandQueue);
  }
  uint64_t TxDescriptorCommandQueue = AppleBCMWLANBusInterface::getTxDescriptorCommandQueue((AppleBCMWLANBusInterface *)this);
  if (TxDescriptorCommandQueue) {
    (*(void (**)(uint64_t))(*(void *)TxDescriptorCommandQueue + 16))(TxDescriptorCommandQueue);
  }
  uint64_t TxCommittedCommandDescriptorQueue = AppleBCMWLANBusInterface::getTxCommittedCommandDescriptorQueue((AppleBCMWLANBusInterface *)this);
  if (TxCommittedCommandDescriptorQueue) {
    (*(void (**)(uint64_t))(*(void *)TxCommittedCommandDescriptorQueue + 16))(TxCommittedCommandDescriptorQueue);
  }
  uint64_t v60 = this[1].ivars;
  uint64_t v61 = *((void *)v60 + 415);
  if (v61)
  {
    (*(void (**)(uint64_t))(*(void *)v61 + 16))(v61);
    *((void *)this[1].ivars + 415) = 0;
    uint64_t v60 = this[1].ivars;
  }
  uint64_t v62 = *((void *)v60 + 409);
  if (v62)
  {
    (*(void (**)(uint64_t))(*(void *)v62 + 16))(v62);
    *((void *)this[1].ivars + 409) = 0;
    uint64_t v60 = this[1].ivars;
  }
  uint64_t v63 = *((void *)v60 + 436);
  if (v63)
  {
    (*(void (**)(uint64_t))(*(void *)v63 + 16))(v63);
    *((void *)this[1].ivars + 436) = 0;
    uint64_t v60 = this[1].ivars;
  }
  uint64_t v64 = *((void *)v60 + 435);
  if (v64)
  {
    (*(void (**)(uint64_t))(*(void *)v64 + 16))(v64);
    *((void *)this[1].ivars + 435) = 0;
    uint64_t v60 = this[1].ivars;
  }
  uint64_t v65 = *((void *)v60 + 434);
  if (v65)
  {
    (*(void (**)(uint64_t))(*(void *)v65 + 16))(v65);
    *((void *)this[1].ivars + 434) = 0;
    uint64_t v60 = this[1].ivars;
  }
  uint64_t v66 = *((void *)v60 + 433);
  if (v66)
  {
    (*(void (**)(uint64_t))(*(void *)v66 + 16))(v66);
    *((void *)this[1].ivars + 433) = 0;
  }
  AppleBCMWLANBusInterface::freeResources(this);
}

void *AppleBCMWLANBusInterfacePCIe::destroyFirmwareIPCTrackers(OSObject *this)
{
  *((unsigned char *)this[1].ivars + 1308) = 1;
  ivars = this[1].ivars;
  uint64_t v3 = (void *)*((void *)ivars + 444);
  if (v3)
  {
    AppleBCMWLANHashtable::flush(v3, this, (void (*)(OSObject *, __int16, OSObject *, void *))AppleBCMWLANBusInterfacePCIe::flushTrackedControlIO, 0);
    ivars = this[1].ivars;
  }
  uint64_t v4 = (void *)*((void *)ivars + 445);
  if (v4)
  {
    AppleBCMWLANHashtable::flush(v4, this, (void (*)(OSObject *, __int16, OSObject *, void *))AppleBCMWLANBusInterfacePCIe::flushTrackedControlIO, 0);
    ivars = this[1].ivars;
  }
  uint64_t v5 = *((void *)ivars + 166);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 80))(v5);
    ivars = this[1].ivars;
  }
  uint64_t v6 = (void *)*((void *)ivars + 446);
  if (v6)
  {
    AppleBCMWLANHashtable::flush(v6, this, (void (*)(OSObject *, __int16, OSObject *, void *))AppleBCMWLANBusInterfacePCIe::flushTrackedRxDataIO, 0);
    ivars = this[1].ivars;
  }
  uint64_t v7 = (void *)*((void *)ivars + 447);
  if (v7)
  {
    AppleBCMWLANHashtable::flush(v7, this, (void (*)(OSObject *, __int16, OSObject *, void *))AppleBCMWLANBusInterfacePCIe::flushTrackedTxDataIO, 0);
    ivars = this[1].ivars;
  }
  uint64_t v8 = (void *)*((void *)ivars + 136);
  if (v8)
  {
    AppleBCMWLANHashtable::flush(v8, this, (void (*)(OSObject *, __int16, OSObject *, void *))AppleBCMWLANBusInterfacePCIe::flushTrackedFlowCreationRequest, 0);
    ivars = this[1].ivars;
  }
  uint64_t v9 = (void *)*((void *)ivars + 137);
  if (v9)
  {
    AppleBCMWLANHashtable::flush(v9, this, (void (*)(OSObject *, __int16, OSObject *, void *))AppleBCMWLANBusInterfacePCIe::flushTrackedFlowDeleteRequest, 0);
    ivars = this[1].ivars;
  }
  uint64_t v10 = (void *)*((void *)ivars + 139);
  if (v10)
  {
    AppleBCMWLANHashtable::flush(v10, this, (void (*)(OSObject *, __int16, OSObject *, void *))AppleBCMWLANBusInterfacePCIe::flushTrackedH2DRingCreationRequest, 0);
    ivars = this[1].ivars;
  }
  uint64_t v11 = (void *)*((void *)ivars + 140);
  if (v11)
  {
    AppleBCMWLANHashtable::flush(v11, this, (void (*)(OSObject *, __int16, OSObject *, void *))AppleBCMWLANBusInterfacePCIe::flushTrackedH2DRingDeleteRequest, 0);
    ivars = this[1].ivars;
  }
  uint64_t v12 = (void *)*((void *)ivars + 141);
  if (v12)
  {
    AppleBCMWLANHashtable::flush(v12, this, (void (*)(OSObject *, __int16, OSObject *, void *))AppleBCMWLANBusInterfacePCIe::flushTrackedD2HRingCreationRequest, 0);
    ivars = this[1].ivars;
  }
  uint64_t v13 = (void *)*((void *)ivars + 142);
  if (v13)
  {
    AppleBCMWLANHashtable::flush(v13, this, (void (*)(OSObject *, __int16, OSObject *, void *))AppleBCMWLANBusInterfacePCIe::flushTrackedD2HRingDeleteRequest, 0);
    ivars = this[1].ivars;
  }
  uint64_t result = (void *)*((void *)ivars + 448);
  if (result)
  {
    uint64_t result = AppleBCMWLANHashtable::flush(result, this, (void (*)(OSObject *, __int16, OSObject *, void *))AppleBCMWLANBusInterfacePCIe::flushTrackedRxDebugIO, 0);
    ivars = this[1].ivars;
  }
  *((unsigned char *)ivars + 1308) = 0;
  return result;
}

void *AppleBCMWLANBusInterfacePCIe::destroyFirmwarePCIeIPC(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t result = (void *)AppleBCMWLANBusInterface::getLogger(this);
  if (result)
  {
    AppleBCMWLANBusInterface::getLogger(this);
    uint64_t result = (void *)CCLogStream::shouldLog();
    if (result)
    {
      Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      uint64_t result = (void *)CCLogStream::logAlert(Logger, "[dk] %s@%d:destroy ipc: this[%p] fIPCCreated[%u]\n", "destroyFirmwarePCIeIPC", 10404, this, *(unsigned __int8 *)(*((void *)this + 9) + 1306));
    }
  }
  uint64_t v3 = *((void *)this + 9);
  if (*(unsigned char *)(v3 + 1306))
  {
    *(unsigned char *)(v3 + 1306) = 0;
    uint64_t v4 = *((void *)this + 9);
    uint64_t v5 = *(void *)(v4 + 1336);
    uint64_t v6 = v4;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(void *)v5 + 80))(v5);
      uint64_t v6 = *((void *)this + 9);
    }
    uint64_t v7 = *(AppleBCMWLANPCIeSkywalk **)(v6 + 4472);
    if (v7)
    {
      AppleBCMWLANPCIeSkywalk::detachRxSubmFwQueue(v7);
      uint64_t v8 = *((void *)this + 9);
      if (*(_DWORD *)(v8 + 376))
      {
        uint64_t v9 = 601;
        do
        {
          uint64_t v10 = *(void *)(v8 + 8 * v9);
          if (v10)
          {
            uint64_t v11 = *(AppleBCMWLANPCIeSkywalk **)(v8 + 4472);
            uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 392))(v10);
            unsigned __int8 v13 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 8 * v9) + 368))();
            uint64_t v14 = *(void *)(*((void *)this + 9) + 8 * v9);
            unsigned int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 208))(v14);
            int isLowLatencyRing = AppleBCMWLANPCIeTransmitFlowRing::isLowLatencyRing(*(AppleBCMWLANPCIeTransmitFlowRing **)(*((void *)this + 9) + 8 * v9));
            AppleBCMWLANPCIeSkywalk::detachTxSubmFwQueue(v11, v12, v13, v15, isLowLatencyRing);
            uint64_t v8 = *((void *)this + 9);
          }
          if ((unint64_t)(v9 - 601) > 0x2A) {
            break;
          }
          unsigned int v17 = v9++ - 600;
        }
        while (*(_DWORD *)(v8 + 376) > v17);
      }
      if (*(unsigned char *)(v8 + 4526))
      {
        AppleBCMWLANPCIeSkywalk::destroyLowLatencyCompRing(*(void **)(v8 + 4472), 1u);
        AppleBCMWLANPCIeSkywalk::destroyLowLatencyCompRing(*(void **)(*((void *)this + 9) + 4472), 0);
        uint64_t v8 = *((void *)this + 9);
      }
      AppleBCMWLANPCIeSkywalk::detachRxCompFwQueue(*(AppleBCMWLANPCIeSkywalk **)(v8 + 4472));
      AppleBCMWLANPCIeSkywalk::detachTxCompFwQueue(*(AppleBCMWLANPCIeSkywalk **)(*((void *)this + 9) + 4472));
    }
    AppleBCMWLANBusInterfacePCIe::flushPendingTxIOs(this);
    (*(void (**)(void))(**(void **)(*((void *)this + 9) + 3592) + 136))(*(void *)(*((void *)this + 9) + 3592));
    *(unsigned char *)(*((void *)this + 9) + 3981) = 0;
    uint64_t v18 = *((void *)this + 9);
    *(void *)(v18 + 1192) = 0;
    *(_OWORD *)(v18 + 1160) = 0u;
    *(_OWORD *)(v18 + 1176) = 0u;
    *(_OWORD *)(v18 + 1144) = 0u;
    uint64_t v19 = *((void *)this + 9);
    *(void *)(v19 + 3456) = 0;
    *(_OWORD *)(v19 + 3440) = 0u;
    *(_OWORD *)(v19 + 3424) = 0u;
    *(_OWORD *)(v19 + 3408) = 0u;
    *(_OWORD *)(v19 + 3392) = 0u;
    *(_OWORD *)(v19 + 3376) = 0u;
    uint64_t v20 = *((void *)this + 9);
    uint64_t v21 = *(void *)(v20 + 3640);
    if (v21)
    {
      AppleBCMWLANPCIeDoorbell::cancelRing(v21);
      uint64_t v20 = *((void *)this + 9);
    }
    uint64_t v22 = (void *)(v20 + 4112);
    uint64_t result = *(void **)(v20 + 4112);
    if ((void *)(v20 + 4112) != result)
    {
      while (*(void **)result[1] == result)
      {
        uint64_t v23 = *result;
        if (*(void **)(*result + 8) != result) {
          break;
        }
        *(void *)(v23 + 8) = v22;
        void *v22 = v23;
        *uint64_t result = 0;
        result[1] = 0;
        ContextFromLinuint64_t k = (AppleBCMWLANDynamicRingOperationContext *)AppleBCMWLANDynamicRingOperationContext::getContextFromLink((uint64_t)result);
        uint64_t RingOperationCompletionPtr = AppleBCMWLANDynamicRingOperationContext::getRingOperationCompletionPtr(ContextFromLink);
        uint64_t SubmissionRingPtr = AppleBCMWLANDynamicRingOperationContext::getSubmissionRingPtr(ContextFromLink);
        if (SubmissionRingPtr) {
          (*(void (**)(uint64_t))(*(void *)SubmissionRingPtr + 16))(SubmissionRingPtr);
        }
        (*(void (**)(void, void, uint64_t, void))(RingOperationCompletionPtr + 8))(*(void *)RingOperationCompletionPtr, 0, 3758097131, *(void *)(RingOperationCompletionPtr + 16));
        if (ContextFromLink) {
          (*(void (**)(AppleBCMWLANDynamicRingOperationContext *))(*(void *)ContextFromLink + 16))(ContextFromLink);
        }
        uint64_t v20 = *((void *)this + 9);
        uint64_t v22 = (void *)(v20 + 4112);
        uint64_t result = *(void **)(v20 + 4112);
        if ((void *)(v20 + 4112) == result) {
          goto LABEL_27;
        }
      }
      goto LABEL_77;
    }
LABEL_27:
    uint64_t v27 = (void *)(v20 + 4128);
    uint64_t result = *(void **)(v20 + 4128);
    if ((void *)(v20 + 4128) != result)
    {
      while (*(void **)result[1] == result)
      {
        uint64_t v28 = *result;
        if (*(void **)(*result + 8) != result) {
          break;
        }
        *(void *)(v28 + 8) = v27;
        *uint64_t v27 = v28;
        *uint64_t result = 0;
        result[1] = 0;
        uint64_t v29 = (AppleBCMWLANDynamicRingOperationContext *)AppleBCMWLANDynamicRingOperationContext::getContextFromLink((uint64_t)result);
        uint64_t v30 = AppleBCMWLANDynamicRingOperationContext::getRingOperationCompletionPtr(v29);
        uint64_t CompletionRingPtr = AppleBCMWLANDynamicRingOperationContext::getCompletionRingPtr(v29);
        if (CompletionRingPtr) {
          (*(void (**)(uint64_t))(*(void *)CompletionRingPtr + 16))(CompletionRingPtr);
        }
        (*(void (**)(void, void, uint64_t, void))(v30 + 8))(*(void *)v30, 0, 3758097131, *(void *)(v30 + 16));
        if (v29) {
          (*(void (**)(AppleBCMWLANDynamicRingOperationContext *))(*(void *)v29 + 16))(v29);
        }
        uint64_t v20 = *((void *)this + 9);
        uint64_t v27 = (void *)(v20 + 4128);
        uint64_t result = *(void **)(v20 + 4128);
        if ((void *)(v20 + 4128) == result) {
          goto LABEL_35;
        }
      }
      goto LABEL_77;
    }
LABEL_35:
    uint64_t v32 = (void *)(v20 + 4144);
    uint64_t result = *(void **)(v20 + 4144);
    if ((void *)(v20 + 4144) != result)
    {
      while (*(void **)result[1] == result)
      {
        uint64_t v33 = *result;
        if (*(void **)(*result + 8) != result) {
          break;
        }
        *(void *)(v33 + 8) = v32;
        *uint64_t v32 = v33;
        *uint64_t result = 0;
        result[1] = 0;
        uint64_t v34 = (AppleBCMWLANDynamicRingOperationContext *)AppleBCMWLANDynamicRingOperationContext::getContextFromLink((uint64_t)result);
        uint64_t v35 = AppleBCMWLANDynamicRingOperationContext::getRingOperationCompletionPtr(v34);
        uint64_t v36 = AppleBCMWLANDynamicRingOperationContext::getSubmissionRingPtr(v34);
        (*(void (**)(void, uint64_t, void, void))(v35 + 8))(*(void *)v35, v36, 0, *(void *)(v35 + 16));
        if (v34) {
          (*(void (**)(AppleBCMWLANDynamicRingOperationContext *))(*(void *)v34 + 16))(v34);
        }
        uint64_t v20 = *((void *)this + 9);
        uint64_t v32 = (void *)(v20 + 4144);
        uint64_t result = *(void **)(v20 + 4144);
        if ((void *)(v20 + 4144) == result) {
          goto LABEL_41;
        }
      }
      goto LABEL_77;
    }
LABEL_41:
    uint64_t v37 = (void *)(v20 + 4160);
    uint64_t result = *(void **)(v20 + 4160);
    if ((void *)(v20 + 4160) != result)
    {
      while (*(void **)result[1] == result)
      {
        uint64_t v38 = *result;
        if (*(void **)(*result + 8) != result) {
          break;
        }
        *(void *)(v38 + 8) = v37;
        *uint64_t v37 = v38;
        *uint64_t result = 0;
        result[1] = 0;
        uint64_t v39 = (AppleBCMWLANDynamicRingOperationContext *)AppleBCMWLANDynamicRingOperationContext::getContextFromLink((uint64_t)result);
        uint64_t v40 = AppleBCMWLANDynamicRingOperationContext::getRingOperationCompletionPtr(v39);
        uint64_t v41 = AppleBCMWLANDynamicRingOperationContext::getCompletionRingPtr(v39);
        (*(void (**)(void, uint64_t, void, void))(v40 + 8))(*(void *)v40, v41, 0, *(void *)(v40 + 16));
        if (v39) {
          (*(void (**)(AppleBCMWLANDynamicRingOperationContext *))(*(void *)v39 + 16))(v39);
        }
        uint64_t v20 = *((void *)this + 9);
        uint64_t v37 = (void *)(v20 + 4160);
        uint64_t result = *(void **)(v20 + 4160);
        if ((void *)(v20 + 4160) == result) {
          goto LABEL_47;
        }
      }
LABEL_77:
      __break(1u);
      return result;
    }
LABEL_47:
    (*(void (**)(void, uint64_t (*)(uint64_t, uint64_t, uint64_t), void, void, void, void))(**(void **)(v20 + 3472) + 56))(*(void *)(v20 + 3472), AppleBCMWLANBusInterfacePCIe::disableSubmissionRingGated, *(void *)(v20 + 328), *(void *)(v20 + 3464), 0, 0);
    (*(void (**)(void, uint64_t (*)(uint64_t, uint64_t, uint64_t), void, void, void, void))(**(void **)(*((void *)this + 9) + 3472) + 56))(*(void *)(*((void *)this + 9) + 3472), AppleBCMWLANBusInterfacePCIe::disableCompletionRingGated, *(void *)(*((void *)this + 9) + 336), *(void *)(*((void *)this + 9) + 3464), 0, 0);
    (*(void (**)(void, uint64_t (*)(uint64_t, uint64_t, uint64_t), void, void, void, void))(**(void **)(*((void *)this + 9) + 3472) + 56))(*(void *)(*((void *)this + 9) + 3472), AppleBCMWLANBusInterfacePCIe::disableCompletionRingGated, *(void *)(*((void *)this + 9) + 360), *(void *)(*((void *)this + 9) + 3464), 0, 0);
    (*(void (**)(void, uint64_t (*)(uint64_t, uint64_t, uint64_t), void, void, void, void))(**(void **)(*((void *)this + 9) + 3472) + 56))(*(void *)(*((void *)this + 9) + 3472), AppleBCMWLANBusInterfacePCIe::disableCompletionRingGated, *(void *)(*((void *)this + 9) + 352), *(void *)(*((void *)this + 9) + 3464), 0, 0);
    (*(void (**)(void, uint64_t (*)(uint64_t, uint64_t, uint64_t), void, void, void, void))(**(void **)(*((void *)this + 9) + 3472) + 56))(*(void *)(*((void *)this + 9) + 3472), AppleBCMWLANBusInterfacePCIe::disableCompletionRingGated, *(void *)(*((void *)this + 9) + 320), *(void *)(*((void *)this + 9) + 3464), 0, 0);
    (*(void (**)(void, uint64_t (*)(uint64_t, uint64_t, uint64_t), void, void, void, void))(**(void **)(*((void *)this + 9) + 3472) + 56))(*(void *)(*((void *)this + 9) + 3472), AppleBCMWLANBusInterfacePCIe::disableSubmissionRingGated, *(void *)(*((void *)this + 9) + 344), *(void *)(*((void *)this + 9) + 3464), 0, 0);
    (*(void (**)(void, uint64_t (*)(uint64_t, uint64_t, uint64_t), void, void, void, void))(**(void **)(*((void *)this + 9) + 3472) + 56))(*(void *)(*((void *)this + 9) + 3472), AppleBCMWLANBusInterfacePCIe::disableSubmissionRingGated, *(void *)(*((void *)this + 9) + 312), *(void *)(*((void *)this + 9) + 3464), 0, 0);
    uint64_t v42 = *((void *)this + 9);
    uint64_t v43 = *(void *)(v42 + 328);
    if (v43)
    {
      (*(void (**)(uint64_t))(*(void *)v43 + 16))(v43);
      *(void *)(*((void *)this + 9) + 328) = 0;
      uint64_t v42 = *((void *)this + 9);
    }
    uint64_t v44 = *(void *)(v42 + 336);
    if (v44)
    {
      (*(void (**)(uint64_t))(*(void *)v44 + 16))(v44);
      *(void *)(*((void *)this + 9) + 336) = 0;
      uint64_t v42 = *((void *)this + 9);
    }
    uint64_t v45 = *(void *)(v42 + 360);
    if (v45)
    {
      (*(void (**)(uint64_t))(*(void *)v45 + 16))(v45);
      *(void *)(*((void *)this + 9) + 360) = 0;
      uint64_t v42 = *((void *)this + 9);
    }
    uint64_t v46 = *(void *)(v42 + 352);
    if (v46)
    {
      (*(void (**)(uint64_t))(*(void *)v46 + 16))(v46);
      *(void *)(*((void *)this + 9) + 352) = 0;
      uint64_t v42 = *((void *)this + 9);
    }
    uint64_t v47 = *(void *)(v42 + 320);
    if (v47)
    {
      (*(void (**)(uint64_t))(*(void *)v47 + 16))(v47);
      *(void *)(*((void *)this + 9) + 320) = 0;
      uint64_t v42 = *((void *)this + 9);
    }
    uint64_t v48 = *(void *)(v42 + 344);
    if (v48)
    {
      (*(void (**)(uint64_t))(*(void *)v48 + 16))(v48);
      *(void *)(*((void *)this + 9) + 344) = 0;
      uint64_t v42 = *((void *)this + 9);
    }
    uint64_t v49 = *(void *)(v42 + 312);
    if (v49)
    {
      (*(void (**)(uint64_t))(*(void *)v49 + 16))(v49);
      *(void *)(*((void *)this + 9) + 312) = 0;
      uint64_t v42 = *((void *)this + 9);
    }
    if (*(_DWORD *)(v42 + 376))
    {
      uint64_t v50 = 601;
      do
      {
        unint64_t v51 = v50 - 601;
        if (*(void *)(v42 + 8 * v50))
        {
          AppleBCMWLANBusInterfacePCIe::invalidateFlowId(this, v51);
          uint64_t v52 = *(void *)(*((void *)this + 9) + 8 * v50);
          (*(void (**)(uint64_t))(*(void *)v52 + 72))(v52);
          (*(void (**)(void, void))(**(void **)(*((void *)this + 9) + 3464) + 72))(*(void *)(*((void *)this + 9) + 3464), *(void *)(*((void *)this + 9) + 8 * v50));
          AppleBCMWLANCallbackEventSource::signalCallbackNeeded(*(AppleBCMWLANCallbackEventSource **)(*((void *)this + 9) + 3240));
          uint64_t v42 = *((void *)this + 9);
          uint64_t v53 = *(void *)(v42 + 8 * v50);
          if (v53)
          {
            (*(void (**)(uint64_t))(*(void *)v53 + 16))(v53);
            *(void *)(*((void *)this + 9) + 8 * v50) = 0;
            uint64_t v42 = *((void *)this + 9);
          }
        }
        if (v51 > 0x2A) {
          break;
        }
        unsigned int v54 = v50++ - 600;
      }
      while (*(_DWORD *)(v42 + 376) > v54);
    }
    *(_DWORD *)(v42 + 4612) = 0;
    AppleBCMWLANBusInterfacePCIe::removeDARTMappings(this);
    *(void *)(*((void *)this + 9) + 2832) = 0;
    uint64_t v55 = *(void *)(*((void *)this + 9) + 3504);
    if (v55)
    {
      (*(void (**)(uint64_t))(*(void *)v55 + 16))(v55);
      *(void *)(*((void *)this + 9) + 3504) = 0;
    }
    unsigned int v56 = 0;
    *(void *)(v4 + 3376) = 0;
    do
    {
      unint64_t v57 = *((void *)this + 9) + ((unint64_t)v56 >> 3);
      *(unsigned char *)(v57 + 5160) &= ~(1 << (v56 & 7));
      unint64_t v58 = *((void *)this + 9) + ((unint64_t)v56 >> 3);
      *(unsigned char *)(v58 + 5166) &= ~(1 << (v56 & 7));
    }
    while (v56++ < 0x2B);
    uint64_t result = (void *)AppleBCMWLANBusInterface::getLogger(this);
    if (result)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      uint64_t result = (void *)CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v61 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        return (void *)CCLogStream::logAlert(v61, "[dk] %s@%d:destroy ipc: this[%p] ... destroyed\n", "destroyFirmwarePCIeIPC", 10538, this);
      }
    }
  }
  return result;
}

void non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::freeResources(AppleBCMWLANBusInterfacePCIe *this)
{
}

uint64_t AppleBCMWLANBusInterfacePCIe::getWorkQueue(AppleBCMWLANBusInterfacePCIe *this)
{
  return *(void *)(*((void *)this + 9) + 3464);
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::getWorkQueue(AppleBCMWLANBusInterfacePCIe *this)
{
  return *(void *)(*((void *)this + 3) + 3464);
}

OSObject *AppleBCMWLANBusInterfacePCIe::newTxBuffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 912))(a1) + a2;
  return AppleBCMWLANTxBuffer::withOptions(a1, v5, a3);
}

OSObject *non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::newTxBuffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 - 48;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 - 48) + 912))(a1 - 48) + a2;
  return AppleBCMWLANTxBuffer::withOptions(v4, v5, a3);
}

uint64_t AppleBCMWLANBusInterfacePCIe::validateWorkQueue(AppleBCMWLANBusInterfacePCIe *this, const char *a2, int a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 3464) + 144))(*(void *)(*((void *)this + 9) + 3464));
  if ((result & 1) == 0)
  {
    IOLog("BusInterfacePCIe: thread not on main dispatch queue: function %s line %u", a2, a3);
    panic("AppleBCMWLANBusInterfacePCIe: validateWorkQueue failed %s:%u\n", a2, a3);
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::validateWorkQueue(AppleBCMWLANBusInterfacePCIe *this, const char *a2, int a3)
{
  return AppleBCMWLANBusInterfacePCIe::validateWorkQueue((AppleBCMWLANBusInterfacePCIe *)((char *)this - 64), a2, a3);
}

uint64_t AppleBCMWLANBusInterfacePCIe::attachPCIeBusGated(AppleBCMWLANBusInterfacePCIe *this, IOPCIDevice *a2)
{
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:enter, this[%p] pcie[%p] fPCIeBus[%p]\n", "attachPCIeBusGated", 3653, this, a2, *(const void **)(*((void *)this + 9) + 3248));
      if (a2) {
        goto LABEL_4;
      }
LABEL_64:
      uint64_t v10 = 3758097088;
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v33 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logCrit(v33, "[dk] %s@%d:Invalid pcie device passed\n", "attachPCIeBusGated", 3657);
          return 3758097088;
        }
      }
      return v10;
    }
  }
  if (!a2) {
    goto LABEL_64;
  }
LABEL_4:
  (*(void (**)(AppleBCMWLANBusInterfacePCIe *, const char *, uint64_t))(*(void *)this + 1208))(this, "attachPCIeBusGated", 3661);
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v41 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(v41, "[dk] %s@%d:From %p to add bus %p was %p\n", "attachPCIeBusGated", 3754, v2, a2, *(const void **)(*((void *)this + 9) + 3248));
    }
  }
  uint64_t v5 = *((void *)this + 9);
  if (*(IOPCIDevice **)(v5 + 3248) == a2) {
    return 0;
  }
  *(void *)(v5 + 3248) = a2;
  (*(void (**)(void))(**(void **)(*((void *)this + 9) + 3248) + 8))(*(void *)(*((void *)this + 9) + 3248));
  uint64_t v6 = *((void *)this + 9);
  if (!*(unsigned char *)(v6 + 3236))
  {
    (*(void (**)(void, uint64_t))(**(void **)(v6 + 3472) + 88))(*(void *)(v6 + 3472), v6 + 3248);
    uint64_t v6 = *((void *)this + 9);
  }
  (*(void (**)(void))(**(void **)(v6 + 3600) + 136))(*(void *)(v6 + 3600));
  uint64_t v7 = (_OWORD *)(*((void *)this + 9) + 1252);
  v7[1] = 0u;
  void v7[2] = 0u;
  *uint64_t v7 = 0u;
  *(_DWORD *)(*((void *)this + 9) + 4484) = 0;
  AppleBCMWLANBusInterfacePCIe::startPM(this, *(IOService **)(*((void *)this + 9) + 3248));
  *(void *)(*((void *)this + 9) + 3352) = AppleBCMWLANChipConfigSpace::withPCIDevice((AppleBCMWLANChipConfigSpace *)a2, *(IOPCIDevice **)(*((void *)this + 9) + 3144), v8);
  if (!*(void *)(*((void *)this + 9) + 3352))
  {
    uint64_t v10 = 3758097085;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        unsigned __int8 v13 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        uint64_t v66 = 3801;
        uint64_t v12 = "[dk] %s@%d:Failed to create config space wrapper\n";
        goto LABEL_19;
      }
    }
    return v10;
  }
  AppleBCMWLANBusInterfacePCIe::identifyDevice(this);
  uint64_t v9 = AppleBCMWLANBusInterfacePCIe::configureDevice(this);
  if (v9)
  {
    uint64_t v10 = v9;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v11 = AppleBCMWLANBusInterface::getLogger(this);
        uint64_t v66 = 3814;
        uint64_t v67 = (*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *, uint64_t))(*(void *)this + 104))(this, v10);
        uint64_t v12 = "[dk] %s@%d:Failed to configure, %s\n";
LABEL_15:
        unsigned __int8 v13 = (CCLogStream *)v11;
LABEL_19:
        CCLogStream::logCrit(v13, v12, "attachPCIeBusGated", v66, v67);
        return v10;
      }
    }
    return v10;
  }
  uint64_t v14 = *((void *)this + 9);
  *(_DWORD *)(v14 + 3312) = chipNumberFromDeviceID(*(unsigned __int16 *)(v14 + 3334));
  *(void *)(*((void *)this + 9) + 3280) = AppleBCMWLANChipManagerPCIe::withChip((AppleBCMWLANChipManagerPCIe *)*(unsigned int *)(*((void *)this + 9)+ 3312), *(unsigned __int8 *)(*((void *)this + 9) + 3336));
  unsigned int v15 = *(AppleBCMWLANChipManagerPCIe **)(*((void *)this + 9) + 3280);
  if (!v15)
  {
    uint64_t v10 = 3758097126;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v19 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logCrit(v19, "[dk] %s@%d:Failed to create chip manager for chip %u.\n", "attachPCIeBusGated", 3824, *(_DWORD *)(*((void *)this + 9) + 3312));
        return 3758097126;
      }
    }
    return v10;
  }
  *(_DWORD *)(*((void *)this + 9) + 4480) = AppleBCMWLANChipManagerPCIe::getMailboxIntMaskRegisterOffset(v15);
  *(_DWORD *)(*((void *)this + 9) + 4484) = AppleBCMWLANChipManagerPCIe::getMailboxIntStatusRegisterOffset(*(AppleBCMWLANChipManagerPCIe **)(*((void *)this + 9) + 3280));
  if ((*(unsigned int (**)(void))(**(void **)(*((void *)this + 9) + 3280) + 136))(*(void *)(*((void *)this + 9) + 3280))) {
    __int16 v16 = 640;
  }
  else {
    __int16 v16 = 384;
  }
  *(_WORD *)(*((void *)this + 9) + 4468) = v16;
  uint64_t v17 = *((void *)this + 9);
  if (*(unsigned char *)(v17 + 2824))
  {
    uint64_t v18 = AppleBCMWLANBusInterfacePCIe::detectSabotage(this);
    if (v18)
    {
      uint64_t v10 = v18;
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v11 = AppleBCMWLANBusInterface::getLogger(this);
          uint64_t v66 = 3841;
          uint64_t v67 = (*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *, uint64_t))(*(void *)this + 104))(this, v10);
          uint64_t v12 = "[dk] %s@%d:WiFi chip environment compromised, %s\n";
          goto LABEL_15;
        }
      }
      return v10;
    }
    uint64_t v17 = *((void *)this + 9);
  }
  long long v72 = 0;
  if (acquireProperty<OSNumber>(*(IOService **)(v17 + 3248), "IOPCIDeviceMapperPageSize", &v72, 1uLL, "IOService"))
  {
    *(void *)(*((void *)this + 9) + 3256) = OSNumber::unsigned64BitValue(v72);
    if (v72)
    {
      ((void (*)(OSNumber *))v72->release)(v72);
      long long v72 = 0;
    }
  }
  else if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      unint64_t v57 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logCrit(v57, "[dk] %s@%d:kIOPCIDeviceMapperPageSize property not found\n", "attachPCIeBusGated", 3868);
    }
  }
  uint64_t v21 = *((void *)this + 9);
  if (!*(void *)(v21 + 3256))
  {
    uint64_t v10 = 3758097097;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v24 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logCrit(v24, "[dk] %s@%d:Failed to get DART page size\n", "attachPCIeBusGated", 3871);
        return 3758097097;
      }
    }
    return v10;
  }
  *(void *)(*((void *)this + 9) + 3360) = AppleBCMWLANChipBackplane::withConfigAndMap(*(AppleBCMWLANChipBackplane **)(v21 + 3352), 0, *(IOMemoryMap **)(v21 + 3280), *(AppleBCMWLANChipManagerPCIe **)(v21 + 3144), v20);
  uint64_t v23 = *((void *)this + 9);
  if (!*(void *)(v23 + 3360))
  {
    uint64_t v10 = 3758097085;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v25 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logCrit(v25, "[dk] %s@%d:Failed to create backplane access.\n");
      }
    }
    return v10;
  }
  *(void *)(*((void *)this + 9) + 3368) = AppleBCMWLANChipMemory::withMap(0, *(IOMemoryMap **)(v23 + 3280), *(AppleBCMWLANChipManagerPCIe **)(v23 + 3144), v22);
  if (!*(void *)(*((void *)this + 9) + 3368))
  {
    uint64_t v10 = 3758097085;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v26 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logCrit(v26, "[dk] %s@%d:Failed to create memory access.\n");
      }
    }
    return v10;
  }
  AppleBCMWLANBusInterfacePCIe::checkErrors(this);
  if (AppleBCMWLANBusInterfacePCIe::readOTP((IOService *)this)) {
    return 3758097102;
  }
  uint64_t v27 = (*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *, AppleBCMWLANBusInterfacePCIe *, void, void))(*(void *)this + 904))(this, this, *(void *)(*(void *)this + 144), 0);
  if (v27)
  {
    uint64_t v10 = v27;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v28 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        (*(void (**)(AppleBCMWLANBusInterfacePCIe *, uint64_t))(*(void *)this + 104))(this, v10);
        CCLogStream::logAlert(v28, "[dk] %s@%d:Failed to Parse OTP %s\n");
      }
    }
    return v10;
  }
  uint64_t v29 = AppleBCMWLANBusInterfacePCIe::publishHWIdentifiers(this);
  if (v29)
  {
    uint64_t v10 = v29;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v30 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        (*(void (**)(AppleBCMWLANBusInterfacePCIe *, uint64_t))(*(void *)this + 104))(this, v10);
        CCLogStream::logAlert(v30, "[dk] %s@%d:Failed to publish HW identifiers %s\n");
      }
    }
    return v10;
  }
  if ((*(unsigned int (**)(AppleBCMWLANBusInterfacePCIe *, const char *, const char *, void))(*(void *)this + 680))(this, "M", "TPHN", 0))
  {
    int v31 = (*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *, const char *, const char *, void))(*(void *)this + 680))(this, "m", "1.7", 0);
  }
  else
  {
    int v31 = 0;
  }
  char v71 = 1;
  char v70 = 0;
  IOParseBootArgNumber("wlan.debug.check-hwlimits", &v71, 1);
  IOParseBootArgNumber("wlan.debug.check-hwlimits-forced", &v70, 1);
  if (v71)
  {
    int v35 = v70 ? 1 : v31;
    if (v35 == 1)
    {
      AppleBCMWLANChipManagerPCIe::setAWDLSupported(*(AppleBCMWLANChipManagerPCIe **)(*((void *)this + 9) + 3280), 0);
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v63 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v63, "[dk] %s@%d: Limiting HW platform, disabling: Publishing AWDL\n", "attachPCIeBusGated", 4051);
        }
      }
    }
  }
  if ((AppleBCMWLANUtil::getHwFeatureFlags((IOService *)this, (IOService *)"IOService", v34) & 2) != 0) {
    AppleBCMWLANChipManagerPCIe::setRangingSupport(*(AppleBCMWLANChipManagerPCIe **)(*((void *)this + 9) + 3280), 0);
  }
  *(void *)(*((void *)this + 9) + 3344) = OSDictionary::withCapacity(3u);
  uint64_t v36 = *((void *)this + 9);
  if (*(void *)(v36 + 3344))
  {
    if (AppleBCMWLANChipManagerPCIe::isAWDLSupported(*(AppleBCMWLANChipManagerPCIe **)(v36 + 3280))) {
      OSDictionary::setObject(*(OSDictionary **)(*((void *)this + 9) + 3344), "awdl", kOSBooleanTrue);
    }
    if (AppleBCMWLANChipManagerPCIe::isRangingSupported(*(AppleBCMWLANChipManagerPCIe **)(*((void *)this + 9) + 3280))) {
      OSDictionary::setObject(*(OSDictionary **)(*((void *)this + 9) + 3344), "ranging", kOSBooleanTrue);
    }
    uint64_t v37 = (IOService *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 984))(this);
    setPropertyHelper(v37, "WiFiCapability", *(const OSObject **)(*((void *)this + 9) + 3344));
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v40 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        AppleBCMWLANChipManagerPCIe::isAWDLSupported(*(AppleBCMWLANChipManagerPCIe **)(*((void *)this + 9) + 3280));
        AppleBCMWLANChipManagerPCIe::isRangingSupported(*(AppleBCMWLANChipManagerPCIe **)(*((void *)this + 9) + 3280));
        CCLogStream::logAlert(v40, "[dk] %s@%d: Published '%s': [awdl:%d, ranging:%d]\n");
      }
    }
  }
  else if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v62 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(v62, "[dk] %s@%d:failed to create wifi cap Dict\n");
    }
  }
  uint64_t v10 = AppleBCMWLANBusInterfacePCIe::fillIOPool(this, *(IOCommandPool **)(*((void *)this + 9) + 3512), (AppleBCMWLANDMASlab *)0x10, 2048, 2, v38, v39);
  if (!v10)
  {
    uint64_t v10 = AppleBCMWLANBusInterfacePCIe::fillIOPool(this, *(IOCommandPool **)(*((void *)this + 9) + 3520), (AppleBCMWLANDMASlab *)0x80, 2048, 1, v42, v43);
    if (!v10)
    {
      *(_DWORD *)(*((void *)this + 9) + 2840) = 0;
      uint64_t v46 = *((void *)this + 9);
      uint64_t v47 = (AppleBCMWLANDMASlab *)*(unsigned int *)(v46 + 2884);
      *(_DWORD *)(v46 + 2840) = v47;
      uint64_t v10 = AppleBCMWLANBusInterfacePCIe::fillIOPool(this, *(IOCommandPool **)(*((void *)this + 9) + 3528), v47, 2048, 2, v44, v45);
      if (!v10)
      {
        uint64_t v10 = AppleBCMWLANBusInterfacePCIe::fillIOPool(this, *(IOCommandPool **)(*((void *)this + 9) + 3544), (AppleBCMWLANDMASlab *)0x10, 2048, 1, v48, v49);
        if (!v10)
        {
          if (AppleBCMWLANBusInterfacePCIe::attachPCIeBusGated(IOPCIDevice *)::getInterruptAttempts >= 3) {
            AppleBCMWLANBusInterfacePCIe::attachPCIeBusGated((OSObject *)this);
          }
          uint64_t v50 = *((void *)this + 9);
          if (*(void *)(v50 + 3264))
          {
            if (AppleBCMWLANBusInterface::getLogger(this))
            {
              AppleBCMWLANBusInterface::getLogger(this);
              if (CCLogStream::shouldLog())
              {
                uint64_t v64 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                CCLogStream::logAlert(v64, "[dk] %s@%d:Skipping Interrupt DispatchSource creation\n", "attachPCIeBusGated", 4176);
              }
            }
          }
          else
          {
            actiouint64_t n = (OSAction *)0xAAAAAAAAAAAAAAAALL;
            uint64_t interruptType = 0;
            *(void *)(*((void *)this + 9) + 3496) = (*(uint64_t (**)(void))(**(void **)(v50 + 3464)
                                                                                            + 240))(*(void *)(v50 + 3464));
            if (!IOInterruptDispatchSource::GetInterruptType(*(IOService **)(*((void *)this + 9) + 3248), 0, &interruptType))
            {
              uint32_t v58 = 0;
              while (1)
              {
                uint64_t v59 = *((void *)this + 9);
                uint64_t v60 = *(IOService **)(v59 + 3248);
                if ((interruptType & 0x10000) != 0) {
                  break;
                }
                if (IOInterruptDispatchSource::GetInterruptType(v60, ++v58, &interruptType)) {
                  goto LABEL_119;
                }
              }
              uint64_t v61 = IOInterruptDispatchSource::Create(v60, v58, *(IODispatchQueue **)(v59 + 3496), (IOInterruptDispatchSource **)(v59 + 3264));
              if (v61)
              {
                uint64_t v10 = v61;
                ++AppleBCMWLANBusInterfacePCIe::attachPCIeBusGated(IOPCIDevice *)::getInterruptAttempts;
                return v10;
              }
            }
LABEL_119:
            uint64_t v10 = AppleBCMWLANBusInterfacePCIe::CreateActionInterruptOccurred((OSObject *)this, 8uLL, &action);
            if (v10) {
              return v10;
            }
            uint64_t v10 = IOInterruptDispatchSource::SetHandler(*(IOInterruptDispatchSource **)(*((void *)this + 9) + 3264), action, 0);
            if (v10) {
              return v10;
            }
          }
          AppleBCMWLANChipBackplane::writePCIeCoreReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), *(_DWORD *)(*((void *)this + 9) + 4480), 0);
          AppleBCMWLANChipBackplane::writePCIeCoreReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), *(_DWORD *)(*((void *)this + 9) + 4484), 0xFFu);
          BOOL isBootMSISupported = AppleBCMWLANChipManagerPCIe::isBootMSISupported(*(AppleBCMWLANChipManagerPCIe **)(*((void *)this + 9) + 3280));
          uint64_t v52 = *((void *)this + 9);
          if (isBootMSISupported && !*(unsigned char *)(v52 + 3708))
          {
            AppleBCMWLANChipConfigSpace::writeReg32(*(AppleBCMWLANChipConfigSpace **)(v52 + 3352), 0x94u, 0);
            uint64_t v52 = *((void *)this + 9);
          }
          AppleBCMWLANChipBackplane::writePCIeCoreReg32(*(AppleBCMWLANChipBackplane **)(v52 + 3360), 0x120u, 0x814u);
          AppleBCMWLANChipBackplane::writePCIeCoreReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x124u, 0xFFFFFFFF);
          uint64_t v53 = *((void *)this + 9);
          if (!*(void *)(v53 + 3264))
          {
            if (AppleBCMWLANBusInterface::getLogger(this))
            {
              AppleBCMWLANBusInterface::getLogger(this);
              if (CCLogStream::shouldLog())
              {
                uint64_t v65 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                CCLogStream::logAlert(v65, "[dk] %s@%d:No interrupt, bail\n", "attachPCIeBusGated", 4193);
              }
            }
            ++AppleBCMWLANBusInterfacePCIe::attachPCIeBusGated(IOPCIDevice *)::getInterruptAttempts;
            return 3758097119;
          }
          AppleBCMWLANBusInterfacePCIe::logPowerStateTransition(this, *(_DWORD *)(v53 + 1224), 3, 0);
          AppleBCMWLANBusInterfacePCIe::configurePTM(this, 1);
          *(unsigned char *)(*((void *)this + 9) + 4628) = 0;
          *(unsigned char *)(*((void *)this + 9) + 3722) = 0;
          *(unsigned char *)(*((void *)this + 9) + 3721) = 0;
          *(unsigned char *)(*((void *)this + 9) + 3760) = 0;
          AppleBCMWLANBusInterfacePCIe::attachPCIeBusGated(IOPCIDevice *)::getInterruptAttempts = 0;
          *(unsigned char *)(*((void *)this + 9) + 4572) = 0;
          *(unsigned char *)(*((void *)this + 9) + 3998) = 0;
          uint64_t v54 = *((void *)this + 9);
          uint64_t v55 = *(void *)(v54 + 3656);
          if (v55)
          {
            (*(void (**)(uint64_t))(*(void *)v55 + 16))(v55);
            *(void *)(*((void *)this + 9) + 3656) = 0;
            uint64_t v54 = *((void *)this + 9);
          }
          if (*(unsigned char *)(v54 + 3236))
          {
            *(unsigned char *)(v54 + 3706) = 0;
            AppleBCMWLANChipBackplane::setPCIeLinkState(*(void *)(*((void *)this + 9) + 3360), 0);
          }
          return 0;
        }
      }
    }
  }
  return v10;
}

uint64_t AppleBCMWLANBusInterfacePCIe::startPM(AppleBCMWLANBusInterfacePCIe *this, IOService *anObject)
{
  uint64_t v3 = (IOPCIDevice *)OSMetaClassBase::safeMetaCast(anObject, gIOPCIDeviceMetaClass);
  if (AppleOLYHALPortInterfacePCIe::isPortControlAMFMManagedDK(*(AppleOLYHALPortInterfacePCIe **)(*((void *)this + 9) + 5184), 0))uint64_t v4 = 131075; {
  else
  }
    uint64_t v4 = 3;
  return IOPCIDevice::EnablePCIPowerManagement(v3, v4, 0);
}

uint64_t AppleBCMWLANBusInterfacePCIe::identifyDevice(AppleBCMWLANBusInterfacePCIe *this)
{
  fBDF_0 = AppleBCMWLANChipConfigSpace::getBus(*(IOPCIDevice ****)(*((void *)this + 9) + 3352));
  fBDF_1 = AppleBCMWLANChipConfigSpace::getDevice(*(IOPCIDevice ****)(*((void *)this + 9) + 3352));
  fBDF_2 = AppleBCMWLANChipConfigSpace::getFunction(*(IOPCIDevice ****)(*((void *)this + 9) + 3352));
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:%u:%u:%u - Bus %u, Device %u, Function %u\n", "identifyDevice", 4594, fBDF_0, fBDF_1, fBDF_2, fBDF_0, fBDF_1, fBDF_2);
    }
  }
  int Capability = AppleBCMWLANChipConfigSpace::findCapability(*(IOPCIDevice ****)(*((void *)this + 9) + 3352), 0x10u, 0);
  unsigned __int16 v9 = 0;
  AppleBCMWLANChipConfigSpace::readReg16(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), Capability + 18, &v9);
  unsigned __int16 v8 = 0;
  AppleBCMWLANChipConfigSpace::readReg16(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), Capability + 16, &v8);
  AppleBCMWLANChipConfigSpace::readReg16(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), 0, (unsigned __int16 *)(*((void *)this + 9) + 3332));
  AppleBCMWLANChipConfigSpace::readReg16(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), 2u, (unsigned __int16 *)(*((void *)this + 9) + 3334));
  AppleBCMWLANChipConfigSpace::readReg8(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), 8u, (unsigned __int8 *)(*((void *)this + 9) + 3336));
  AppleBCMWLANChipConfigSpace::readReg8(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), 9u, (unsigned __int8 *)(*((void *)this + 9) + 3337));
  AppleBCMWLANChipConfigSpace::readReg16(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), 0x2Cu, (unsigned __int16 *)(*((void *)this + 9) + 3338));
  AppleBCMWLANChipConfigSpace::readReg16(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), 0x2Eu, (unsigned __int16 *)(*((void *)this + 9) + 3340));
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v5 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(v5, "[dk] %s@%d:ID: vendor %#x, device %#x, revision %#X\n", "identifyDevice", 4629, *(unsigned __int16 *)(*((void *)this + 9) + 3332), *(unsigned __int16 *)(*((void *)this + 9) + 3334), *(unsigned __int8 *)(*((void *)this + 9) + 3336));
    }
  }
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v6 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(v6, "[dk] %s@%d:ID: class %#x, subsystemVendor %#x, subsystem %#X\n", "identifyDevice", 4630, *(unsigned __int8 *)(*((void *)this + 9) + 3337), *(unsigned __int16 *)(*((void *)this + 9) + 3338), *(unsigned __int16 *)(*((void *)this + 9) + 3340));
    }
  }
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v7 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logCritIf(v7, 0x80uLL, "[dk] %s@%d:Driver: %p\n", "identifyDevice", 4631, this);
    }
  }
  return 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::configureDevice(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t result = AppleBCMWLANChipConfigSpace::modifyReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), 4u, 0, 2, 0);
  if (!result)
  {
    return AppleBCMWLANBusInterfacePCIe::enableL1CPM(this);
  }
  return result;
}

uint64_t chipNumberFromDeviceID(int a1)
{
  if (a1 > 17458)
  {
    if (a1 <= 17507)
    {
      switch(a1)
      {
        case 17459:
          return 4387;
        case 17460:
          return 4388;
        case 17489:
          return 4399;
      }
      return 0;
    }
    if (a1 <= 17543)
    {
      if (a1 == 17508) {
        return 4364;
      }
      if (a1 == 17536) {
        return 4377;
      }
      return 0;
    }
    if (a1 != 17544)
    {
      if (a1 == 18347) {
        return 43452;
      }
      return 0;
    }
    return 276347;
  }
  if (a1 <= 17371)
  {
    if (a1 != 17257)
    {
      if (a1 == 17315) {
        return 4350;
      }
      if (a1 == 17323) {
        return 4345;
      }
      return 0;
    }
    return 276347;
  }
  switch(a1)
  {
    case 17372:
      return 4355;
    case 17418:
      return 4357;
    case 17445:
      return 4378;
  }
  return 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::detectSabotage(AppleBCMWLANBusInterfacePCIe *this)
{
  unsigned int MemoryRAMAddress = AppleBCMWLANChipManagerPCIe::getMemoryRAMAddress(*(AppleBCMWLANChipManagerPCIe **)(*((void *)this + 9) + 3280));
  if (MemoryRAMAddress)
  {
    unsigned int v3 = MemoryRAMAddress;
    unsigned int v15 = -1431655766;
    AppleBCMWLANChipConfigSpace::readReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), 0x6Cu, &v15);
    if (v15 >= 0x19u) {
      unsigned int v4 = 152;
    }
    else {
      unsigned int v4 = 160;
    }
    unsigned int v13 = -1431655766;
    unsigned int v14 = -1431655766;
    unsigned int v11 = -1431655766;
    unsigned int v12 = -1431655766;
    AppleBCMWLANChipConfigSpace::readReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), 0x88u, &v14);
    AppleBCMWLANChipConfigSpace::readReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), 0x80u, &v13);
    AppleBCMWLANChipConfigSpace::readReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), v4, &v12);
    AppleBCMWLANChipConfigSpace::modifyReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), 0x88u, 0, 64, 0);
    int v5 = 0;
    if (AppleBCMWLANChipManagerPCIe::isPowerControlRequired(*(AppleBCMWLANChipManagerPCIe **)(*((void *)this + 9) + 3280)))
    {
      AppleBCMWLANChipConfigSpace::writeReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), 0x80u, 0x18001000u);
      AppleBCMWLANChipConfigSpace::writeReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), v4, 0x1E8u);
      AppleBCMWLANChipConfigSpace::readReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), v4 | 4, &v15);
      unsigned int v6 = v15;
      if ((~v15 & 0x300) != 0)
      {
        v15 |= 0x300u;
        AppleBCMWLANChipConfigSpace::writeReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), v4 | 4, v6 | 0x300);
        IOSleep(0xFuLL);
        int v5 = 1;
      }
      else
      {
        int v5 = 0;
      }
    }
    int v9 = AppleBCMWLANChipManagerPCIe::sysmemEnabled(*(AppleBCMWLANChipManagerPCIe **)(*((void *)this + 9) + 3280));
    uint64_t v10 = *((void *)this + 9);
    if (v9 && *(_DWORD *)(v10 + 3312) != 4399)
    {
      AppleBCMWLANChipConfigSpace::writeReg32(*(AppleBCMWLANChipConfigSpace **)(v10 + 3352), 0x80u, 0x18124000u);
      AppleBCMWLANChipConfigSpace::writeReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), v4, 0x800u);
      AppleBCMWLANChipConfigSpace::writeReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), v4 | 4, 1u);
      IODelay(0x64uLL);
      AppleBCMWLANChipConfigSpace::writeReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), v4, 0x408u);
      AppleBCMWLANChipConfigSpace::writeReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), v4 | 4, 3u);
      IODelay(0x64uLL);
      AppleBCMWLANChipConfigSpace::writeReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), v4, 0x800u);
      AppleBCMWLANChipConfigSpace::writeReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), v4 | 4, 0);
      IODelay(0x64uLL);
      AppleBCMWLANChipConfigSpace::writeReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), v4, 0x408u);
      AppleBCMWLANChipConfigSpace::writeReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), v4 | 4, 1u);
      IODelay(0x64uLL);
      uint64_t v10 = *((void *)this + 9);
    }
    AppleBCMWLANChipConfigSpace::writeReg32(*(AppleBCMWLANChipConfigSpace **)(v10 + 3352), 0x80u, v3);
    AppleBCMWLANChipConfigSpace::writeReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), v4, 0);
    AppleBCMWLANChipConfigSpace::writeReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), v4 | 4, 0);
    AppleBCMWLANChipConfigSpace::readReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), v4 | 4, &v11);
    if (v5)
    {
      AppleBCMWLANChipConfigSpace::writeReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), 0x80u, 0x18001000u);
      AppleBCMWLANChipConfigSpace::writeReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), v4, 0x1E8u);
      AppleBCMWLANChipConfigSpace::readReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), v4 | 4, &v15);
      v15 &= 0xFFFFFCFF;
      AppleBCMWLANChipConfigSpace::writeReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), v4 | 4, v15);
      IOSleep(0xFuLL);
    }
    AppleBCMWLANChipConfigSpace::writeReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), 0x88u, v14);
    AppleBCMWLANChipConfigSpace::writeReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), 0x80u, v13);
    AppleBCMWLANChipConfigSpace::writeReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), v4, v12);
    if (v11 == -1) {
      return 3758097129;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
    if (result)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:failed to obtain TCM address for chip %d\n", "detectSabotage", 21234, *(_DWORD *)(*((void *)this + 9) + 3312));
        return 0;
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::checkErrors(AppleBCMWLANBusInterfacePCIe *this)
{
  unsigned __int16 v20 = 0;
  AppleBCMWLANChipConfigSpace::modifyReg16(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), 6u, 0, 61440, &v20);
  __int16 v2 = v20 & 0xF000;
  if ((v20 & 0xF000) != 0)
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        if (v2 < 0) {
          unsigned __int16 v8 = "DataParity";
        }
        else {
          unsigned __int16 v8 = (const char *)&unk_10029A2CA;
        }
        int v9 = "SystemErr";
        if ((v2 & 0x4000) == 0) {
          int v9 = (const char *)&unk_10029A2CA;
        }
        uint64_t v10 = "MasterAbort";
        if ((v2 & 0x2000) == 0) {
          uint64_t v10 = (const char *)&unk_10029A2CA;
        }
        unsigned int v11 = "TargetAbort";
        if ((v2 & 0x1000) == 0) {
          unsigned int v11 = (const char *)&unk_10029A2CA;
        }
        CCLogStream::logNotice(Logger, "[dk] %s@%d:PCI Errors: %s %s %s %s %s\n", "checkErrors", 5108, v8, v9, v10, v11, (const char *)&unk_10029A2CA);
      }
    }
  }
  int Capability = AppleBCMWLANChipConfigSpace::findCapability(*(IOPCIDevice ****)(*((void *)this + 9) + 3352), 0x10u, 0);
  if (Capability)
  {
    int v4 = Capability;
    unsigned __int16 v19 = 0;
    AppleBCMWLANChipConfigSpace::modifyReg16(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), Capability + 10, 0, 15, &v19);
    unsigned int v5 = v19 & 0xF;
    if (v5)
    {
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v12 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          unsigned int v13 = "Correctable";
          unsigned int v14 = (const char *)&unk_10029A2CA;
          if ((v5 & 1) == 0) {
            unsigned int v13 = (const char *)&unk_10029A2CA;
          }
          unsigned int v15 = "Nonfatal";
          if ((v5 & 2) == 0) {
            unsigned int v15 = (const char *)&unk_10029A2CA;
          }
          __int16 v16 = "Fatal";
          if ((v5 & 4) == 0) {
            __int16 v16 = (const char *)&unk_10029A2CA;
          }
          if (v5 >= 8) {
            unsigned int v14 = "UnsupportedRequest";
          }
          CCLogStream::logNotice(v12, "[dk] %s@%d:PCIe Errors: %s %s %s %s\n", "checkErrors", 5140, v13, v15, v16, v14);
        }
      }
    }
    unsigned __int16 v18 = 0;
    AppleBCMWLANChipConfigSpace::readReg16(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), v4 + 18, &v18);
    if ((v18 & 0x400) != 0)
    {
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v17 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logNotice(v17, "[dk] %s@%d:PCIe Link Error: %s\n", "checkErrors", 5150, (const char *)&unk_10029A2CA);
        }
      }
    }
  }
  return 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::readOTP(IOService *this)
{
  ((void (*)(IOService *, const char *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[21].Dispatch)(this, "readOTP", 5232);
  __int16 v2 = this[1].OSObject::OSObjectInterface::__vftable;
  if (v2[205].free) {
    return 0;
  }
  UserOTPRange = (unsigned int *)AppleBCMWLANChipManagerPCIe::getUserOTPRange((AppleBCMWLANChipManagerPCIe *)v2[205].init);
  unsigned int v6 = (IO80211Buffer *)IO80211Buffer::allocBufferSingle();
  if (!v6)
  {
    uint64_t v3 = 3758097085;
    if (!AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this)) {
      return v3;
    }
    AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
    if (!CCLogStream::shouldLog()) {
      return v3;
    }
    Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
    int v22 = 5242;
LABEL_22:
    CCLogStream::logAlert(Logger, "[dk] %s@%d:Failed to create OTP buffer\n", "readOTP", v22);
    return v3;
  }
  uint64_t v7 = v6;
  AppleBCMWLANChipBackplane::copyOTPReg16((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[210].init, UserOTPRange, v6);
  BytesNoCopy = (const void *)IO80211Buffer::getBytesNoCopy(v7);
  unsigned int Length = IO80211Buffer::getLength(v7);
  this[1].OSObject::OSObjectInterface::__vftable[205].unsigned int free = (void (__cdecl *)(OSObjectInterface *__hidden))OSData::withBytes(BytesNoCopy, Length);
  uint64_t v10 = this[1].OSObject::OSObjectInterface::__vftable;
  unsigned int free = (const OSObject *)v10[205].free;
  if (free)
  {
    setPropertyHelper(this, "OTP", free);
    uint64_t v10 = this[1].OSObject::OSObjectInterface::__vftable;
  }
  if (LODWORD(v10[207].init) == 4377)
  {
    unsigned int v12 = (const void *)(IO80211Buffer::getBytesNoCopy(v7) + 4);
    int v13 = IO80211Buffer::getLength(v7);
    this[1].OSObject::OSObjectInterface::__vftable[206].init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))OSData::withBytes(v12, (v13 - 4));
    init = (const OSObject *)this[1].OSObject::OSObjectInterface::__vftable[206].init;
    if (init) {
      setPropertyHelper(this, "OTP2", init);
    }
  }
  IO80211Buffer::returnBuffer(v7);
  (*(void (**)(void))(MEMORY[0] + 72))(0);
  uint64_t v3 = 3758097085;
  ChipOTPRange = (unsigned int *)AppleBCMWLANChipManagerPCIe::getChipOTPRange((AppleBCMWLANChipManagerPCIe *)this[1].OSObject::OSObjectInterface::__vftable[205].init);
  __int16 v16 = (IO80211Buffer *)IO80211Buffer::allocBufferSingle();
  if (!v16)
  {
    if (!AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this)) {
      return v3;
    }
    AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
    if (!CCLogStream::shouldLog()) {
      return v3;
    }
    Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
    int v22 = 5273;
    goto LABEL_22;
  }
  uint64_t v17 = v16;
  AppleBCMWLANChipBackplane::copyOTPReg16((uint64_t)this[1].OSObject::OSObjectInterface::__vftable[210].init, ChipOTPRange, v16);
  unsigned __int16 v18 = (const void *)IO80211Buffer::getBytesNoCopy(v17);
  unsigned int v19 = IO80211Buffer::getLength(v17);
  this[1].OSObject::OSObjectInterface::__vftable[206].unsigned int free = (void (__cdecl *)(OSObjectInterface *__hidden))OSData::withBytes(v18, v19);
  unsigned __int16 v20 = (const OSObject *)this[1].OSObject::OSObjectInterface::__vftable[206].free;
  if (v20) {
    setPropertyHelper(this, "ChipOTP", v20);
  }
  IO80211Buffer::returnBuffer(v17);
  (*(void (**)(void))(MEMORY[0] + 72))(0);
  if (this[1].OSObject::OSObjectInterface::__vftable[205].free) {
    return 0;
  }
  else {
    return 3758097084;
  }
}

uint64_t AppleBCMWLANBusInterfacePCIe::publishHWIdentifiers(AppleBCMWLANBusInterfacePCIe *this)
{
  anObject = 0;
  if (!AppleBCMWLANPCIeSkywalk::getPacketPool(this))
  {
    uint64_t v2 = 3758097090;
    if (!AppleBCMWLANBusInterface::getLogger(this)) {
      return v2;
    }
    AppleBCMWLANBusInterface::getLogger(this);
    if (!CCLogStream::shouldLog()) {
      return v2;
    }
    Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
    int v41 = 5665;
LABEL_75:
    CCLogStream::logAlert(Logger, "[dk] %s@%d: Bad argument\n", "publishHWIdentifiers", v41);
    return v2;
  }
  if (!AppleBCMWLANBusInterface::getProduct(this))
  {
    uint64_t v2 = 3758097090;
    if (!AppleBCMWLANBusInterface::getLogger(this)) {
      return v2;
    }
    AppleBCMWLANBusInterface::getLogger(this);
    if (!CCLogStream::shouldLog()) {
      return v2;
    }
    Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
    int v41 = 5666;
    goto LABEL_75;
  }
  uint64_t v2 = 3758097090;
  if (!AppleBCMWLANBusInterface::getProductInfo0(this))
  {
    if (!AppleBCMWLANBusInterface::getLogger(this)) {
      return v2;
    }
    AppleBCMWLANBusInterface::getLogger(this);
    if (!CCLogStream::shouldLog()) {
      return v2;
    }
    Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
    int v41 = 5667;
    goto LABEL_75;
  }
  if (!AppleBCMWLANBusInterface::getProductInfo1(this))
  {
    if (!AppleBCMWLANBusInterface::getLogger(this)) {
      return v2;
    }
    AppleBCMWLANBusInterface::getLogger(this);
    if (!CCLogStream::shouldLog()) {
      return v2;
    }
    Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
    int v41 = 5668;
    goto LABEL_75;
  }
  OSDictionaryPtr v3 = OSDictionary::withCapacity(0x10u);
  if (!v3) {
    return 3758097085;
  }
  int v4 = v3;
  PacketPool = (const OSString *)AppleBCMWLANPCIeSkywalk::getPacketPool(this);
  uint64_t appended = AppleBCMWLANUtil::appendParsedKeyValuePairsToDictionary(v4, PacketPool, (const OSString *)0x200);
  if (appended
    || (Product = (const OSString *)AppleBCMWLANBusInterface::getProduct(this),
        uint64_t appended = AppleBCMWLANUtil::appendParsedKeyValuePairsToDictionary(v4, Product, (const OSString *)0x200),
        appended)
    || (ProductInfo0 = (const OSString *)AppleBCMWLANBusInterface::getProductInfo0(this),
        uint64_t appended = AppleBCMWLANUtil::appendParsedKeyValuePairsToDictionary(v4, ProductInfo0, (const OSString *)0x200),
        appended)
    || (ProductInfo1 = (const OSString *)AppleBCMWLANBusInterface::getProductInfo1(this),
        uint64_t appended = AppleBCMWLANUtil::appendParsedKeyValuePairsToDictionary(v4, ProductInfo1, (const OSString *)0x200),
        appended))
  {
    uint64_t v2 = appended;
    goto LABEL_60;
  }
  OSNumberPtr v10 = OSNumber::withNumber(*(unsigned int *)(*((void *)this + 9) + 3312), 0x20uLL);
  if (!v10)
  {
    uint64_t v2 = 3758097085;
    goto LABEL_60;
  }
  OSNumberPtr v11 = v10;
  if (!OSDictionary::setObject(v4, "C", v10)) {
    goto LABEL_62;
  }
  unsigned int v12 = (IOService *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 984))(this);
  unsigned int v14 = AppleBCMWLANUtil::copyDTParameterString(v12, (IOService *)"IOService", "module-instance", 0, v13);
  if (!v14)
  {
    uint64_t v24 = (IOService *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 984))(this);
    acquireProperty<OSObject>(v24, "module-instance", &anObject, 0, "IOService");
    if (!anObject) {
      goto LABEL_14;
    }
    if (OSMetaClassBase::safeMetaCast(anObject, gOSDataMetaClass)
      && (uint64_t v25 = (const OSData *)OSMetaClassBase::safeMetaCast(anObject, gOSDataMetaClass), OSData::getBytesNoCopy(v25)))
    {
      uint64_t v26 = (const OSData *)OSMetaClassBase::safeMetaCast(anObject, gOSDataMetaClass);
      if (!OSData::getBytesNoCopy(v26)) {
        goto LABEL_58;
      }
      uint64_t v27 = (const OSData *)OSMetaClassBase::safeMetaCast(anObject, gOSDataMetaClass);
      BytesNoCopy = (const char *)OSData::getBytesNoCopy(v27);
    }
    else
    {
      if (!anObject) {
        goto LABEL_14;
      }
      if (!OSMetaClassBase::safeMetaCast(anObject, gOSStringMetaClass)) {
        goto LABEL_56;
      }
      int v35 = (const OSString *)OSMetaClassBase::safeMetaCast(anObject, gOSStringMetaClass);
      if (!OSString::getCStringNoCopy(v35)) {
        goto LABEL_56;
      }
      uint64_t v36 = (const OSString *)OSMetaClassBase::safeMetaCast(anObject, gOSStringMetaClass);
      if (!OSString::getCStringNoCopy(v36)) {
        goto LABEL_58;
      }
      uint64_t v37 = (const OSString *)OSMetaClassBase::safeMetaCast(anObject, gOSStringMetaClass);
      BytesNoCopy = OSString::getCStringNoCopy(v37);
    }
    OSStringPtr v38 = OSString::withCString(BytesNoCopy);
    if (v38)
    {
      BOOL v39 = OSDictionary::setObject(v4, "P", v38);
      ((void (*)(OSStringPtr))v38->release)(v38);
      if (v39)
      {
LABEL_56:
        if (anObject)
        {
          ((void (*)(OSMetaClassBase *))anObject->release)(anObject);
          anObject = 0;
        }
        goto LABEL_14;
      }
LABEL_62:
      uint64_t v2 = 3758097086;
      goto LABEL_59;
    }
LABEL_58:
    uint64_t v2 = 3758097085;
    goto LABEL_59;
  }
  if (!OSDictionary::setObject(v4, "P", (const OSMetaClassBase *)v14))
  {
    uint64_t v2 = 3758097086;
    goto LABEL_88;
  }
LABEL_14:
  Object = OSDictionary::getObject(v4, "M");
  __int16 v16 = (const OSString *)OSMetaClassBase::safeMetaCast(Object, gOSStringMetaClass);
  if (v16)
  {
    *(_OWORD *)__str = 0u;
    long long v51 = 0u;
    CStringNoCopy = OSString::getCStringNoCopy(v16);
    if (snprintf(__str, 0x20uLL, "module-instance_M-%s", CStringNoCopy) > 31)
    {
      uint64_t v2 = 3758097128;
      goto LABEL_87;
    }
    unsigned int v19 = (IOService *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 984))(this);
    uint64_t v21 = (const OSString *)AppleBCMWLANUtil::copyDTParameterString(v19, (IOService *)"IOService", __str, 0, v20);
    if (v21)
    {
      if (!OSDictionary::setObject(v4, "P", v21)) {
        goto LABEL_85;
      }
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          int v22 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          uint64_t v23 = OSString::getCStringNoCopy(v21);
          CCLogStream::logAlert(v22, "[dk] %s@%d:Platform overriden via Device Tree \"%s=%s\"\n", "publishHWIdentifiers", 5747, __str, v23);
        }
      }
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
  uint64_t v29 = (const OSString *)AppleBCMWLANUtil::copyDTParameterString((IOService *)this, (IOService *)"IOService", "wlan.debug.module-instance", 0, v17);
  if (v29)
  {
    if (!OSDictionary::setObject(v4, "P", v29)) {
      goto LABEL_84;
    }
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v43 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        uint64_t v44 = OSString::getCStringNoCopy(v29);
        CCLogStream::logAlert(v43, "[dk] %s@%d:Platform overriden via boot-arg \"%s=%s\"\n", "publishHWIdentifiers", 5756, "wlan.debug.module-instance", v44);
      }
    }
  }
  uint64_t v30 = OSDictionary::getObject(v4, "P");
  int v31 = (const OSObject *)OSMetaClassBase::safeMetaCast(v30, gOSStringMetaClass);
  if (v31)
  {
    uint64_t v32 = (const OSString *)v31;
    if (!setPropertyHelper((IOService *)this, "module-instance", v31)) {
      goto LABEL_83;
    }
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v45 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        uint64_t v46 = OSString::getCStringNoCopy(v32);
        CCLogStream::logAlert(v45, "[dk] %s@%d:Platform set to \"%s=%s\"\n", "publishHWIdentifiers", 5764, "module-instance", v46);
      }
    }
  }
  uint64_t v33 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
  if (CCLogStream::shouldLog(v33, 0x80uLL))
  {
    *(void *)__str = 0;
    *(void *)&char __str[8] = __str;
    long long v51 = 0x2000000000uLL;
    v48[0] = _NSConcreteStackBlock;
    v48[1] = 1107296256;
    v48[2] = ___ZN28AppleBCMWLANBusInterfacePCIe20publishHWIdentifiersEv_block_invoke;
    v48[3] = &__block_descriptor_tmp_261;
    v48[4] = __str;
    void v48[5] = this;
    v48[6] = v4;
    ((void (*)(OSDictionary *, void *))v4->iterateObjects)(v4, v48);
    _Block_object_dispose(__str, 8);
  }
  removePropertyHelper((IOService *)this, "HWIdentifiers");
  if (((*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *, const char *, OSDictionary *))(*(void *)this
                                                                                                + 1056))(this, "HWIdentifiers", v4) & 1) == 0)
  {
    if (!AppleBCMWLANBusInterface::getLogger(this)
      || (AppleBCMWLANBusInterface::getLogger(this), !CCLogStream::shouldLog()))
    {
LABEL_83:
      if (!v29) {
        goto LABEL_85;
      }
      goto LABEL_84;
    }
    uint64_t v42 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
    CCLogStream::logAlert(v42, "[dk] %s@%d: Unable to setProperty() on OLYHAL\n");
    goto LABEL_92;
  }
  if ((setPropertyHelper((IOService *)this, "HWIdentifiers", v4) & 1) == 0)
  {
    if (!AppleBCMWLANBusInterface::getLogger(this)) {
      goto LABEL_83;
    }
    AppleBCMWLANBusInterface::getLogger(this);
    if (!CCLogStream::shouldLog()) {
      goto LABEL_83;
    }
    uint64_t v47 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
    CCLogStream::logAlert(v47, "[dk] %s@%d: Unable to setProperty()\n");
LABEL_92:
    if (!v29)
    {
LABEL_85:
      uint64_t v2 = 3758097086;
      if (v21) {
        ((void (*)(const OSString *))v21->release)(v21);
      }
LABEL_87:
      if (v14) {
LABEL_88:
      }
        (*(void (**)(const char *))(*(void *)v14 + 16))(v14);
LABEL_59:
      ((void (*)(OSNumberPtr))v11->release)(v11);
LABEL_60:
      ((void (*)(OSDictionary *))v4->release)(v4);
      return v2;
    }
LABEL_84:
    ((void (*)(const OSString *))v29->release)(v29);
    goto LABEL_85;
  }
  if (v29) {
    ((void (*)(const OSString *))v29->release)(v29);
  }
  if (v21) {
    ((void (*)(const OSString *))v21->release)(v21);
  }
  if (v14) {
    (*(void (**)(const char *))(*(void *)v14 + 16))(v14);
  }
  ((void (*)(OSNumberPtr))v11->release)(v11);
  ((void (*)(OSDictionary *))v4->release)(v4);
  return 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::fillIOPool(AppleBCMWLANBusInterfacePCIe *this, IOCommandPool *a2, AppleBCMWLANDMASlab *a3, uint64_t a4, uint64_t a5, uint64_t a6, IOService *a7)
{
  uint64_t v8 = 3758097085;
  int v9 = (AppleBCMWLANDMASlab *)AppleBCMWLANDMASlab::withOptions(a3, a4, *(void *)(*((void *)this + 9) + 3256), a5, 64, *(void *)(*((void *)this + 9) + 3248), a7);
  if (v9)
  {
    OSNumberPtr v10 = v9;
    if (AppleBCMWLANDMASlab::getItemCount(v9))
    {
      OSNumberPtr v11 = 0;
      while (1)
      {
        unsigned int v12 = AppleBCMWLANPCIeIO::withSlab(v10, v11);
        if (!v12) {
          break;
        }
        (*(void (**)(IOCommandPool *, OSObject *))(*(void *)a2 + 72))(a2, v12);
        OSNumberPtr v11 = (AppleBCMWLANDMASlab *)(v11 + 1);
        if (v11 >= AppleBCMWLANDMASlab::getItemCount(v10)) {
          goto LABEL_6;
        }
      }
    }
    else
    {
LABEL_6:
      uint64_t v8 = 0;
    }
    (*(void (**)(AppleBCMWLANPCIeIO *))(*(void *)v10 + 16))(v10);
  }
  return v8;
}

CCLogStream *AppleBCMWLANBusInterfacePCIe::logPowerStateTransition(AppleBCMWLANBusInterface *a1, int a2, int a3, __int16 a4)
{
  __int16 v5 = a3;
  if (a3 == 1) {
    IOStateReporter::setChannelState(*(IOStateReporter **)(*((void *)a1 + 9) + 3176), 0x507772537465uLL, gPowerStateIDs[a2]);
  }
  uint64_t v8 = *((void *)a1 + 9);
  uint64_t v9 = *(void *)(v8 + 3088);
  *(void *)(v8 + 3088) = v9 + 1;
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  *(_DWORD *)(*((void *)a1 + 9) + 2048 + 24 * (v9 & 0x1F) + 8) = *(_DWORD *)(*((void *)a1 + 9)
                                                                               + 2048
                                                                               + 24 * (((_BYTE)v9 - 1) & 0x1F)
                                                                               + 12);
  *(_DWORD *)(*((void *)a1 + 9) + 24 * (v9 & 0x1F) + 2060) = a2;
  *(_WORD *)(*((void *)a1 + 9) + 24 * (v9 & 0x1F) + 2066) = v5;
  *(_WORD *)(*((void *)a1 + 9) + 24 * (v9 & 0x1F) + 2064) = a4;
  uint64_t result = *(CCLogStream **)(*((void *)a1 + 9) + 4600);
  if (result)
  {
    uint64_t result = (CCLogStream *)CCLogStream::shouldLog(result, 2uLL);
    if (result)
    {
      long long v13 = 0u;
      __int16 v14 = 0;
      memset(v12, 0, sizeof(v12));
      __int16 v11 = 23553;
      WORD6(v13) = 516;
      AppleBCMWLANBusInterfacePCIe::pcapFillBusState(a1, (uint64_t)v12);
      BYTE14(v13) = v5;
      HIBYTE(v13) = a2;
      return (CCLogStream *)CCLogStream::logHeaderAndBufIf(*(CCLogStream **)(*((void *)a1 + 9) + 4600), 2uLL, 0, 0, 0, 0, &v11, 0x64uLL);
    }
  }
  return result;
}

AppleBCMWLANChipManagerPCIe *AppleBCMWLANBusInterfacePCIe::configurePTM(AppleBCMWLANBusInterfacePCIe *this, __int16 a2)
{
  uint16_t readData = 0;
  uint64_t result = (AppleBCMWLANChipManagerPCIe *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *, const char *, uint64_t))(*(void *)this + 1208))(this, "configurePTM", 6383);
  uint64_t v5 = *((void *)this + 9);
  if (*(unsigned char *)(v5 + 3710))
  {
    if (*(unsigned char *)(v5 + 3999))
    {
      uint64_t result = *(AppleBCMWLANChipManagerPCIe **)(v5 + 3280);
      if (result)
      {
        uint64_t result = (AppleBCMWLANChipManagerPCIe *)AppleBCMWLANChipManagerPCIe::isPTMSupported(result);
        if (result)
        {
          IOPCIDevice::ConfigurationRead16(*(IOPCIDevice **)(*((void *)this + 9) + 3248), 0x208uLL, &readData);
          uint16_t readData = readData & 0xFFFE | a2;
          IOPCIDevice::ConfigurationWrite16(*(IOPCIDevice **)(*((void *)this + 9) + 3248), 0x208uLL, readData);
          uint64_t result = (AppleBCMWLANChipManagerPCIe *)AppleBCMWLANBusInterface::getLogger(this);
          if (result)
          {
            AppleBCMWLANBusInterface::getLogger(this);
            uint64_t result = (AppleBCMWLANChipManagerPCIe *)CCLogStream::shouldLog();
            if (result)
            {
              Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
              return (AppleBCMWLANChipManagerPCIe *)CCLogStream::logAlert(Logger, "[dk] %s@%d:Configured PTM 0x%0x\n", "configurePTM", 6410, readData);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::drainIOPool(uint64_t a1, uint64_t a2)
{
  for (uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 64))(a2, 0);
        result;
        uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 64))(a2, 0))
  {
    (*(void (**)(uint64_t))(*(void *)result + 16))(result);
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::detachPCIeBusGated(AppleBCMWLANBusInterfacePCIe *this, IOPCIDevice *a2, char a3)
{
  uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
  if (result)
  {
    AppleBCMWLANBusInterface::getLogger(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      uint64_t result = CCLogStream::logAlert(Logger, "[dk] %s@%d:From %p to remove bus %p was %p\n", "detachPCIeBusGated", 4325, v3, a2, *(const void **)(*((void *)this + 9) + 3248));
    }
  }
  uint64_t v8 = *((void *)this + 9);
  uint64_t v9 = *(IOPCIDevice **)(v8 + 3248);
  if (v9) {
    BOOL v10 = v9 == a2;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v11 = AppleBCMWLANBusInterfacePCIe::drainIOPool(result, *(void *)(v8 + 3536));
    uint64_t v12 = AppleBCMWLANBusInterfacePCIe::drainIOPool(v11, *(void *)(*((void *)this + 9) + 3528));
    uint64_t v13 = AppleBCMWLANBusInterfacePCIe::drainIOPool(v12, *(void *)(*((void *)this + 9) + 3520));
    uint64_t v14 = AppleBCMWLANBusInterfacePCIe::drainIOPool(v13, *(void *)(*((void *)this + 9) + 3512));
    AppleBCMWLANBusInterfacePCIe::drainIOPool(v14, *(void *)(*((void *)this + 9) + 3544));
    uint64_t v15 = *((void *)this + 9);
    if (*(void *)(v15 + 3264))
    {
      __int16 v16 = *(IODispatchQueue **)(v15 + 3496);
      block[0] = _NSConcreteStackBlock;
      block[1] = 0x40000000;
      block[2] = ___ZN28AppleBCMWLANBusInterfacePCIe18detachPCIeBusGatedEP11IOPCIDeviceb_block_invoke;
      block[3] = &__block_descriptor_tmp_210;
      block[4] = this;
      IODispatchQueue::DispatchAsync(v16, block);
    }
    AppleBCMWLANBusInterfacePCIe::disableRingEventSources(this);
    uint64_t v17 = (void *)*((void *)this + 9);
    uint64_t v18 = v17[457];
    if (v18)
    {
      (*(void (**)(uint64_t))(*(void *)v18 + 16))(v18);
      *(void *)(*((void *)this + 9) + 3656) = 0;
      uint64_t v17 = (void *)*((void *)this + 9);
    }
    uint64_t v19 = v17[459];
    if (v19)
    {
      (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
      *(void *)(*((void *)this + 9) + 3672) = 0;
      uint64_t v17 = (void *)*((void *)this + 9);
    }
    uint64_t v20 = v17[461];
    if (v20)
    {
      (*(void (**)(uint64_t))(*(void *)v20 + 16))(v20);
      *(void *)(*((void *)this + 9) + 3688) = 0;
      uint64_t v17 = (void *)*((void *)this + 9);
    }
    uint64_t v21 = v17[468];
    if (v21)
    {
      (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
      *(void *)(*((void *)this + 9) + 3744) = 0;
      uint64_t v17 = (void *)*((void *)this + 9);
    }
    uint64_t v22 = v17[411];
    if (v22)
    {
      (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
      *(void *)(*((void *)this + 9) + 3288) = 0;
      uint64_t v17 = (void *)*((void *)this + 9);
    }
    uint64_t v23 = v17[412];
    if (v23)
    {
      (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
      *(void *)(*((void *)this + 9) + 3296) = 0;
      uint64_t v17 = (void *)*((void *)this + 9);
    }
    uint64_t v24 = v17[413];
    if (v24)
    {
      (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
      *(void *)(*((void *)this + 9) + 3304) = 0;
    }
    uint64_t v25 = (IOService *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 984))(this);
    removePropertyHelper(v25, "WiFiCapability");
    uint64_t v26 = *((void *)this + 9);
    uint64_t v27 = *(void *)(v26 + 3344);
    if (v27)
    {
      (*(void (**)(uint64_t))(*(void *)v27 + 16))(v27);
      *(void *)(*((void *)this + 9) + 3344) = 0;
      uint64_t v26 = *((void *)this + 9);
    }
    uint64_t v28 = *(void *)(v26 + 3368);
    if (v28)
    {
      (*(void (**)(uint64_t))(*(void *)v28 + 16))(v28);
      *(void *)(*((void *)this + 9) + 3368) = 0;
      uint64_t v26 = *((void *)this + 9);
    }
    *(void *)(v26 + 3392) = 0;
    *(_OWORD *)(v26 + 3376) = 0u;
    uint64_t v29 = (void *)*((void *)this + 9);
    uint64_t v30 = v29[420];
    if (v30)
    {
      (*(void (**)(uint64_t))(*(void *)v30 + 16))(v30);
      *(void *)(*((void *)this + 9) + 3360) = 0;
      uint64_t v29 = (void *)*((void *)this + 9);
    }
    uint64_t v31 = v29[410];
    if (v31)
    {
      (*(void (**)(uint64_t))(*(void *)v31 + 16))(v31);
      *(void *)(*((void *)this + 9) + 3280) = 0;
      uint64_t v29 = (void *)*((void *)this + 9);
    }
    uint64_t v32 = v29[419];
    if (v32)
    {
      (*(void (**)(uint64_t))(*(void *)v32 + 16))(v32);
      *(void *)(*((void *)this + 9) + 3352) = 0;
      uint64_t v29 = (void *)*((void *)this + 9);
    }
    uint64_t result = v29[406];
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      *(void *)(*((void *)this + 9) + 3248) = 0;
    }
    if ((a3 & 1) == 0) {
      return (*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)this + 9) + 3600) + 120))(*(void *)(*((void *)this + 9) + 3600), 5000);
    }
  }
  return result;
}

uint64_t ___ZN28AppleBCMWLANBusInterfacePCIe18detachPCIeBusGatedEP11IOPCIDeviceb_block_invoke(uint64_t a1)
{
  return IODispatchSource::SetEnable(*(IODispatchSource **)(*(void *)(*(void *)(a1 + 32) + 72) + 3264), 0, 0);
}

void *AppleBCMWLANBusInterfacePCIe::disableRingEventSources(void *this)
{
  uint64_t v1 = this[9];
  if (*(unsigned char *)(v1 + 1306))
  {
    uint64_t v2 = this;
    this = (void *)AppleBCMWLANPCIeSkywalk::disableAllSubmissionQueue(*(AppleBCMWLANPCIeSkywalk **)(v1 + 4472));
    uint64_t v3 = v2[9];
    int v4 = (void *)(v3 + 280);
    uint64_t v5 = *(void **)(v3 + 280);
    while (v5 != v4)
    {
      RingFromChaiuint64_t n = AppleBCMWLANPCIeSubmissionRing::getRingFromChain((uint64_t)v5);
      this = (void *)(*(uint64_t (**)(uint64_t))(*(void *)RingFromChain + 72))(RingFromChain);
      uint64_t v5 = (void *)*v5;
      uint64_t v3 = v2[9];
      int v4 = (void *)(v3 + 280);
    }
    if (*(_DWORD *)(v3 + 376))
    {
      uint64_t v7 = 601;
      do
      {
        this = *(void **)(v3 + 8 * v7);
        if (this)
        {
          this = (void *)(*(uint64_t (**)(void *))(*this + 72))(this);
          uint64_t v3 = v2[9];
        }
        if ((unint64_t)(v7 - 601) > 0x2A) {
          break;
        }
        unsigned int v8 = v7++ - 600;
      }
      while (*(_DWORD *)(v3 + 376) > v8);
    }
  }
  return this;
}

uint64_t AppleBCMWLANBusInterfacePCIe::nanoPowerCycleGated(OSObject *this)
{
  AppleOLYHALPortInterfacePCIe::enableDK();
  *((unsigned char *)this[1].ivars + 4556) = 0;
  AppleOLYHALPlatformFunction::setPowerEnableDK(*((AppleOLYHALPlatformFunction **)this[1].ivars + 647), 0, 0);
  IOSleep(*((unsigned int *)this[1].ivars + 712));
  AppleOLYHALPlatformFunction::setPowerEnableDK(*((AppleOLYHALPlatformFunction **)this[1].ivars + 647), 1, 0);
  IOSleep(*((unsigned int *)this[1].ivars + 1158));
  uint64_t v2 = AppleOLYHALPortInterfacePCIe::enableDK();
  uint64_t v3 = v2;
  if (*((unsigned char *)this[1].ivars + 3129)) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:Failed to enable port, reset and retrying\n", "nanoPowerCycleGated", 4500);
      }
    }
    AppleOLYHALPlatformFunction::setPowerEnableDK(*((AppleOLYHALPlatformFunction **)this[1].ivars + 647), 0, 0);
    IOSleep(*((unsigned int *)this[1].ivars + 712));
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v7 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:Turning power back on\n", "nanoPowerCycleGated", 4505);
      }
    }
    AppleOLYHALPlatformFunction::setPowerEnableDK(*((AppleOLYHALPlatformFunction **)this[1].ivars + 647), 1, 0);
    IOSleep(*((unsigned int *)this[1].ivars + 1158));
    uint64_t v3 = AppleOLYHALPortInterfacePCIe::enableDK();
    if (v3 && *((unsigned char *)this[1].ivars + 3128)) {
      AppleBCMWLANBusInterfacePCIe::nanoPowerCycleGated(this, v3);
    }
  }
  return v3;
}

uint64_t AppleBCMWLANBusInterfacePCIe::enableL1CPM(AppleBCMWLANBusInterfacePCIe *this)
{
  int Capability = AppleBCMWLANChipConfigSpace::findCapability(*(IOPCIDevice ****)(*((void *)this + 9) + 3352), 0x10u, 0);
  if (!Capability) {
    return 3758097136;
  }
  uint64_t v3 = AppleBCMWLANChipConfigSpace::modifyReg16(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), Capability + 16, 0, 256, 0);
  if (v3)
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logCrit(Logger, "[dk] %s@%d:Failed to enable L1 CPM\n", "enableL1CPM", 5073);
      }
    }
  }
  return v3;
}

uint64_t AppleBCMWLANBusInterfacePCIe::performBPReset(AppleBCMWLANBusInterfacePCIe *this)
{
  unsigned __int16 v11 = 0;
  unsigned int v9 = 0;
  unsigned int v10 = 0;
  (*(void (**)(AppleBCMWLANBusInterfacePCIe *, const char *, uint64_t))(*(void *)this + 1208))(this, "performBPReset", 4666);
  uint64_t v2 = 0;
  int v3 = *(_DWORD *)(*((void *)this + 9) + 3312);
  if (((v3 - 4345) > 0x36 || ((1 << (v3 + 7)) & 0x400C0300000001) == 0)
    && v3 != 43452
    && v3 != 276347)
  {
    read_random();
    AppleBCMWLANChipBackplane::writeCommonCoreReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0xD0u, v10);
    uint64_t v8 = AppleBCMWLANChipConfigSpace::readReg16(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), 0x88u, &v11);
    if (v8) {
      return v8;
    }
    AppleBCMWLANChipBackplane::writeCommonCoreReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x80u, 1u);
    IOSleep(4uLL);
    uint64_t v8 = AppleBCMWLANChipBackplane::readCommonCoreReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0xD0u, &v9);
    if (v8)
    {
      return v8;
    }
    else
    {
      uint64_t v2 = 3758097084;
      if (v10 != v9
        && AppleBCMWLANChipBackplane::validateCores(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9)
                                                                                                + 3360))
        && (AppleBCMWLANChipBackplane::validateWrappers(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360)) & 1) != 0)
      {
        return 0;
      }
    }
  }
  return v2;
}

uint64_t AppleBCMWLANBusInterfacePCIe::prepareHardware(AppleBCMWLANBusInterfacePCIe *this)
{
  *(void *)uint64_t v29 = 0;
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v30[6] = v2;
  v30[7] = v2;
  v30[4] = v2;
  v30[5] = v2;
  void v30[2] = v2;
  v30[3] = v2;
  v30[0] = v2;
  v30[1] = v2;
  char v28 = 0;
  (*(void (**)(void))(*(void *)this + 1208))();
  if (AppleBCMWLAN_isDevFusedOrCSRInternal()) {
    IOParseBootArgNumber("wlan.debug.jtag", &v28, 1);
  }
  uint64_t v3 = 3758097098;
  BOOL v4 = (void *)*((void *)this + 9);
  uint64_t v5 = (AppleBCMWLANChipMemory *)v4[421];
  if (!v5 || !v4[410] || !v4[419] || !v4[420]) {
    return 3758097090;
  }
  if (AppleBCMWLANChipMemory::getFLOPSize(v5) < 0x20) {
    return 3758097115;
  }
  if ((AppleBCMWLANChipMemory::getFLOPSize(*(AppleBCMWLANChipMemory **)(*((void *)this + 9) + 3368)) & 3) != 0) {
    return 3758097090;
  }
  if (!AppleBCMWLANChipConfigSpace::findCapability(*(IOPCIDevice ****)(*((void *)this + 9) + 3352), 0x10u, 0))return 3758097136; {
  if (!AppleBCMWLANChipConfigSpace::modifyReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), 4u, 4, 0, 0))
  }
  {
    *(unsigned char *)(*((void *)this + 9) + 1307) = 0;
    int v6 = *(_DWORD *)(*((void *)this + 9) + 3312);
    if (v6 != 4388 && v6 != 4399)
    {
      read_random();
      if (AppleBCMWLANChipMemory::getFLOPSize(*(AppleBCMWLANChipMemory **)(*((void *)this + 9) + 3368)) >= 4)
      {
        uint64_t v7 = 0;
        unint64_t v8 = 0;
        do
        {
          uint32_t v9 = *(_DWORD *)((char *)v30 + v7) | 0xF0000000;
          *(_DWORD *)((char *)v30 + v7) = v9;
          AppleBCMWLANChipMemory::writeFLOP32(*(AppleBCMWLANChipMemory **)(*((void *)this + 9) + 3368), v7, v9);
          ++v8;
          v7 += 4;
        }
        while (v8 < AppleBCMWLANChipMemory::getFLOPSize(*(AppleBCMWLANChipMemory **)(*((void *)this + 9)
                                                                                                  + 3368)) >> 2);
      }
    }
    if (!(*(unsigned int (**)(void, void, void))(**(void **)(*((void *)this + 9) + 3280) + 88))(*(void *)(*((void *)this + 9) + 3280), *(void *)(*((void *)this + 9) + 3352), *(void *)(*((void *)this + 9) + 3360)))
    {
      uint64_t v10 = AppleBCMWLANBusInterfacePCIe::performBPReset(this);
      if (v10) {
        return v10;
      }
      uint64_t v11 = *((void *)this + 9);
      if (*(_DWORD *)(v11 + 3312) == 4399) {
        goto LABEL_23;
      }
      AppleBCMWLANChipBackplane::writeARMMasterWrapperReg32(*(AppleBCMWLANChipBackplane **)(v11 + 3360), 0x800u, 1u);
      if (AppleBCMWLANChipBackplane::waitARMMasterWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x804u, 0, 1, 1000))return 3758097110; {
      AppleBCMWLANChipBackplane::writeARMMasterWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x408u, 0x23u);
      }
      if (!AppleBCMWLANChipBackplane::readARMMasterWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x408u, &v29[1])&& (~v29[1] & 0x23) == 0)
      {
        uint64_t v11 = *((void *)this + 9);
        if (*(_DWORD *)(v11 + 3312) != 4399)
        {
LABEL_32:
          if (AppleBCMWLANChipBackplane::readCommonCoreReg32(*(AppleBCMWLANChipBackplane **)(v11 + 3360), 0x80u, &v29[1])|| !AppleBCMWLANChipBackplane::isCoreMapped(*(void *)(*((void *)this + 9) + 3360), 0))
          {
            return v3;
          }
          uint64_t v12 = *((void *)this + 9);
          int v13 = *(_DWORD *)(v12 + 3312);
          if (v13 != 4388 && v13 != 4399)
          {
            if (AppleBCMWLANChipBackplane::readARMCoreReg32(*(AppleBCMWLANChipBackplane **)(v12 + 3360), 0, &v29[1])|| !AppleBCMWLANChipBackplane::isCoreMapped(*(void *)(*((void *)this + 9) + 3360), 2u))
            {
              return v3;
            }
            uint64_t v12 = *((void *)this + 9);
          }
          if (AppleBCMWLANChipBackplane::readCommonMasterWrapperReg32(*(AppleBCMWLANChipBackplane **)(v12 + 3360), 0x80u, &v29[1])|| !AppleBCMWLANChipBackplane::isWrapperMapped(*(void *)(*((void *)this + 9) + 3360), 0)|| AppleBCMWLANChipBackplane::readARMMasterWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0, &v29[1])|| !AppleBCMWLANChipBackplane::isWrapperMapped(*(void *)(*((void *)this + 9) + 3360), 2u))
          {
            return v3;
          }
          int v14 = 0;
LABEL_44:
          read_random();
          unsigned int v15 = 0;
          while (1)
          {
            unsigned int v16 = v15 % 3;
            if (v15 % 3 == 2)
            {
              uint64_t v19 = *((void *)this + 9);
              int v20 = *(_DWORD *)(v19 + 3312);
              if (v20 != 4388 && v20 != 4399)
              {
                unsigned int FLOPSize = AppleBCMWLANChipMemory::getFLOPSize(*(AppleBCMWLANChipMemory **)(v19 + 3368));
                if (LODWORD(v30[0]) <= FLOPSize)
                {
                  uint64_t v23 = 0;
                  unint64_t v24 = 0;
                  while (1)
                  {
                    AppleBCMWLANChipMemory::readFLOP32(*(AppleBCMWLANChipMemory **)(*((void *)this + 9) + 3368), v23, v29);
                    if (*(_DWORD *)((char *)v30 + v23) != v29[0]) {
                      return 3758097098;
                    }
                    ++v24;
                    unsigned int v25 = AppleBCMWLANChipMemory::getFLOPSize(*(AppleBCMWLANChipMemory **)(*((void *)this + 9) + 3368));
                    v23 += 4;
                    if (v24 >= v25 / LODWORD(v30[0])) {
                      goto LABEL_76;
                    }
                  }
                }
              }
              goto LABEL_76;
            }
            if (v16 == 1) {
              break;
            }
            if (!v16)
            {
              if (!AppleBCMWLANChipBackplane::validateCores(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360))
                || !AppleBCMWLANChipBackplane::validateWrappers(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360))
                || (*(unsigned int (**)(void, void, void))(**(void **)(*((void *)this + 9) + 3280)
                                                                          + 96))(*(void *)(*((void *)this + 9) + 3280), *(void *)(*((void *)this + 9) + 3352), *(void *)(*((void *)this + 9) + 3360)))
              {
                return 3758097098;
              }
LABEL_74:
              if (!AppleBCMWLANChipBackplane::validateCores(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360))
                || (AppleBCMWLANChipBackplane::validateWrappers(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9)
                                                                                              + 3360)) & 1) == 0)
              {
                return 3758097098;
              }
            }
LABEL_76:
            if (++v15 == 3)
            {
              IOSleep(1uLL);
              if (++v14 != 4) {
                goto LABEL_44;
              }
              return 0;
            }
          }
          if (!AppleBCMWLANChipBackplane::validateCores(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360))
            || !AppleBCMWLANChipBackplane::validateWrappers(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360)))
          {
            return 3758097098;
          }
          uint64_t v17 = *((void *)this + 9);
          if (*(_DWORD *)(v17 + 3312) == 4399) {
            goto LABEL_76;
          }
          if (AppleBCMWLANChipBackplane::readARMMasterWrapperReg32(*(AppleBCMWLANChipBackplane **)(v17 + 3360), 0x800u, &v29[1])|| (v29[1] & 1) == 0)
          {
            return 3758097098;
          }
          int v18 = AppleBCMWLANChipBackplane::validateCores(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360))
              ? AppleBCMWLANChipBackplane::validateWrappers(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9)
                                                                                          + 3360))
              : 0;
          if (AppleBCMWLANChipBackplane::readARMMasterWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x408u, &v29[1]))return 3758097098; {
          int v26 = (~v29[1] & 0x23) != 0 ? 0 : v18;
          }
          if (v26 != 1) {
            return 3758097098;
          }
          goto LABEL_74;
        }
LABEL_23:
        if AppleBCMWLANChipBackplane::readOOBRouterWrapperReg32(*(AppleBCMWLANChipBackplane **)(v11 + 3360), 0x248u, &v29[1])|| (~v29[1] & 0x21) != 0|| AppleBCMWLANChipBackplane::readSysmemSlaveWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x140u, &v29[1])|| (v29[1] & 1) != 0|| AppleBCMWLANChipBackplane::readOOBRouterWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x4C8u, &v29[1])|| (v29[1] & 1) == 0|| AppleBCMWLANChipBackplane::readARMMasterWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x140u, &v29[1])|| (v29[1])
        {
          return v3;
        }
        uint64_t v11 = *((void *)this + 9);
        goto LABEL_32;
      }
    }
  }
  return v3;
}

uint64_t AppleBCMWLANBusInterfacePCIe::registerDriver(AppleBCMWLANBusInterface *a1, const void *a2, uint64_t a3)
{
  if (AppleBCMWLANBusInterface::getLogger(a1))
  {
    AppleBCMWLANBusInterface::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:enter, this[%p] driver[%p] fPCIeBus[%p]\n", "registerDriver", 5171, a1, a2, *(const void **)(*((void *)a1 + 9) + 3248));
    }
  }
  int v6 = 1;
  atomic_compare_exchange_strong((atomic_uint *volatile)(*((void *)a1 + 9) + 3848), (unsigned int *)&v6, 0);
  if (v6 == 1)
  {
    IOService::AdjustBusy((IOService *)a1, -1, 0);
    unsigned int v10 = 0;
    IOService::GetBusyState((IOService *)a1, &v10, 0);
    if (AppleBCMWLANBusInterface::getLogger(a1))
    {
      AppleBCMWLANBusInterface::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint32_t v9 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
        CCLogStream::logAlert(v9, "[dk] %s@%d:registerDriver AdjustBusy(-1) busystate %u, fAdjustBusyCnt %u\n", "registerDriver", 5179, v10, *(_DWORD *)(*((void *)a1 + 9) + 3848));
      }
    }
    io80211_os_log();
    (*(void (**)(void))(**(void **)(*((void *)a1 + 9) + 3840) + 136))(*(void *)(*((void *)a1 + 9) + 3840));
  }
  return AppleBCMWLANBusInterface::registerDriver(a1, (uint64_t)a2, a3);
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::registerDriver(uint64_t a1, const void *a2, uint64_t a3)
{
  return AppleBCMWLANBusInterfacePCIe::registerDriver((AppleBCMWLANBusInterface *)(a1 - 48), a2, a3);
}

uint64_t AppleBCMWLANBusInterfacePCIe::unregisterDriver(AppleBCMWLANBusInterface *a1, const void *a2)
{
  if (AppleBCMWLANBusInterface::getLogger(a1))
  {
    AppleBCMWLANBusInterface::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:enter, this[%p] driver[%p] fPCIeBus[%p]\n", "unregisterDriver", 5196, a1, a2, *(const void **)(*((void *)a1 + 9) + 3248));
    }
  }
  return AppleBCMWLANBusInterface::unregisterDriver(a1, a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::unregisterDriver(uint64_t a1, const void *a2)
{
  return AppleBCMWLANBusInterfacePCIe::unregisterDriver((AppleBCMWLANBusInterface *)(a1 - 48), a2);
}

uint64_t AppleBCMWLANBusInterfacePCIe::notifyDriverFail(IOService *this)
{
  unsigned int v6 = 0;
  IOService::GetBusyState(this, &v6, 0);
  if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
  {
    AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:busystate %u, fAdjustBusyCnt %u\n", "notifyDriverFail", 5207, v6, LODWORD(this[1].OSObject::OSObjectInterface::__vftable[240].free));
    }
  }
  uint64_t result = io80211_os_log();
  int v3 = 1;
  atomic_compare_exchange_strong((atomic_uint *volatile)&this[1].OSObject::OSObjectInterface::__vftable[240].free, (unsigned int *)&v3, 0);
  if (v3 == 1)
  {
    IOService::AdjustBusy(this, -1, 0);
    IOService::GetBusyState(this, &v6, 0);
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(v5, "[dk] %s@%d:AdjustBusy(-1), busystate %u, fAdjustBusyCnt %u\n", "notifyDriverFail", 5213, v6, LODWORD(this[1].OSObject::OSObjectInterface::__vftable[240].free));
      }
    }
    io80211_os_log();
    return (*(uint64_t (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[240].init
                                                                                    + 136))(this[1].OSObject::OSObjectInterface::__vftable[240].init);
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::notifyDriverFail(IOService *this)
{
  return AppleBCMWLANBusInterfacePCIe::notifyDriverFail(this - 1);
}

uint64_t AppleBCMWLANBusInterfacePCIe::parseOTP(AppleBCMWLANBusInterfacePCIe *this, OSObject *a2, int (*a3)(OSObject *, unsigned __int8, unsigned __int8, const void *, void *), void *a4)
{
  uint64_t v8 = AppleBCMWLANBusInterface::parseOTPData(this, *(const OSData **)(*((void *)this + 9) + 3288), a2, a3, a4);
  if (!v8) {
    goto LABEL_7;
  }
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      int v14 = (const char *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *, uint64_t))(*(void *)this + 104))(this, v8);
      CCLogStream::logAlert(Logger, "[dk] %s@%d: Error parsing OTP, %s. Using default provisioning data\n", "parseOTP", 5392, v14);
    }
  }
  uint64_t v9 = *((void *)this + 9);
  uint64_t v10 = *(void *)(v9 + 3288);
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
    *(void *)(*((void *)this + 9) + 3288) = 0;
LABEL_7:
    uint64_t v9 = *((void *)this + 9);
  }
  if (*(_DWORD *)(v9 + 3312) != 4377) {
    return 0;
  }
  if (!AppleBCMWLANPCIeSkywalk::getPacketPool(this))
  {
    uint64_t v8 = AppleBCMWLANBusInterface::parseOTPData(this, *(const OSData **)(*((void *)this + 9) + 3296), a2, a3, a4);
    if (v8)
    {
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v15 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          unsigned int v16 = (const char *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *, uint64_t))(*(void *)this
                                                                                                 + 104))(this, v8);
          CCLogStream::logAlert(v15, "[dk] %s@%d: Error parsing OTP Data 2, %s\n", "parseOTP", 5402, v16);
        }
      }
      uint64_t v11 = *(void *)(*((void *)this + 9) + 3296);
      if (v11)
      {
        (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
        *(void *)(*((void *)this + 9) + 3296) = 0;
      }
    }
  }
  return v8;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::parseOTP(AppleBCMWLANBusInterfacePCIe *this, OSObject *a2, int (*a3)(OSObject *, unsigned __int8, unsigned __int8, const void *, void *), void *a4)
{
  return AppleBCMWLANBusInterfacePCIe::parseOTP((AppleBCMWLANBusInterfacePCIe *)((char *)this - 48), a2, a3, a4);
}

OSMetaClassBase *AppleBCMWLANBusInterfacePCIe::getProvisioningRoot(const OSMetaClassBase *this)
{
  return OSMetaClassBase::safeMetaCast(this, gIOServiceMetaClass);
}

OSMetaClassBase *non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::getProvisioningRoot(const OSMetaClassBase *this)
{
  return OSMetaClassBase::safeMetaCast(this - 2, gIOServiceMetaClass);
}

OSStringPtr AppleBCMWLANBusInterfacePCIe::parseVersion1Tuple(AppleBCMWLANBusInterface *a1, uint64_t a2, int a3, uint64_t a4)
{
  v19[0] = AppleBCMWLANBusInterface::getProductInfo0Addr(a1);
  v19[1] = AppleBCMWLANBusInterface::getProductInfo1Addr(a1);
  v19[2] = AppleBCMWLANBusInterface::getManufacturerAddr(a1);
  void v19[3] = AppleBCMWLANBusInterface::getProductAddr(a1);
  memset(v18, 0, sizeof(v18));
  uint64_t ProductInfo0 = AppleBCMWLANBusInterface::getProductInfo0(a1);
  if (ProductInfo0) {
    (*(void (**)(uint64_t))(*(void *)ProductInfo0 + 16))(ProductInfo0);
  }
  uint64_t ProductInfo1 = AppleBCMWLANBusInterface::getProductInfo1(a1);
  if (ProductInfo1) {
    (*(void (**)(uint64_t))(*(void *)ProductInfo1 + 16))(ProductInfo1);
  }
  unsigned int v9 = a3 - 3;
  uint64_t PacketPool = AppleBCMWLANPCIeSkywalk::getPacketPool(a1);
  if (PacketPool) {
    (*(void (**)(uint64_t))(*(void *)PacketPool + 16))(PacketPool);
  }
  OSStringPtr result = (OSStringPtr)AppleBCMWLANBusInterface::getProduct(a1);
  if (result) {
    OSStringPtr result = (OSStringPtr)((uint64_t (*)(OSStringPtr))result->release)(result);
  }
  unint64_t v12 = 0;
  if (!v9) {
    goto LABEL_17;
  }
  unsigned int v13 = 0;
  do
  {
    uint64_t v14 = a4 + v13;
    int v16 = *(unsigned __int8 *)(v14 + 2);
    unsigned int v15 = (const char *)(v14 + 2);
    if (v16 == 255 || v12 > 3) {
      break;
    }
    v13 += strlcpy((char *)v18, v15, 0x100uLL) + 1;
    OSStringPtr result = OSString::withCString((const char *)v18);
    *(void *)v19[v12++] = result;
  }
  while (v13 < v9);
  if ((v12 & 0xFFFFFFFC) == 0)
  {
LABEL_17:
    unint64_t v12 = v12;
    do
    {
      OSStringPtr result = OSString::withCString((const char *)&unk_10029A2CA);
      *(void *)v19[v12++] = result;
    }
    while (v12 != 4);
  }
  return result;
}

OSStringPtr non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::parseVersion1Tuple(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return AppleBCMWLANBusInterfacePCIe::parseVersion1Tuple((AppleBCMWLANBusInterface *)(a1 - 48), 0, a3, a4);
}

uint64_t ___ZN28AppleBCMWLANBusInterfacePCIe20publishHWIdentifiersEv_block_invoke(uint64_t a1, OSMetaClassBase *anObject)
{
  int v3 = *(AppleBCMWLANBusInterface **)(a1 + 40);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = OSMetaClassBase::safeMetaCast(anObject, gOSStringMetaClass);
  BOOL v4 = *(const OSObject **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v4)
  {
    Object = OSDictionary::getObject(*(const OSDictionary **)(a1 + 48), v4);
    unsigned int v6 = OSMetaClassBase::safeMetaCast(Object, gOSStringMetaClass);
    if (v6)
    {
      uint64_t v7 = (const OSString *)v6;
      if (AppleBCMWLANBusInterface::getLogger(v3))
      {
        AppleBCMWLANBusInterface::getLogger(v3);
        if (CCLogStream::shouldLog())
        {
          Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(v3);
          CStringNoCopy = OSString::getCStringNoCopy(*(const OSString **)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
          uint64_t v11 = OSString::getCStringNoCopy(v7);
          CCLogStream::logAlert(Logger, "[dk] %s@%d: \"%s\" = \"%s\"\n", "publishHWIdentifiers_block_invoke", 5797, CStringNoCopy, v11);
        }
      }
    }
  }
  return 0;
}

const OSString *AppleBCMWLANBusInterfacePCIe::doesHWIdentifiersKeyContainString(AppleBCMWLANBusInterfacePCIe *this, OSDictionary *a2, const char *a3, const char *a4)
{
  BOOL v4 = 0;
  anObject = 0;
  if (a2 && a3)
  {
    uint64_t v8 = (IOService *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 984))(this);
    if (acquireProperty<OSString>(v8, "HWIdentifiers", &anObject, 0, "IOService"))
    {
      unsigned int v9 = (const OSDictionary *)OSMetaClassBase::safeMetaCast(anObject, gOSDictionaryMetaClass);
      BOOL v4 = AppleBCMWLANUtil::doesDictionaryKeyContainString(v9, a2, a3, a4);
      if (anObject) {
        ((void (*)(OSMetaClassBase *))anObject->release)(anObject);
      }
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

const OSString *non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::doesHWIdentifiersKeyContainString(AppleBCMWLANBusInterfacePCIe *this, OSDictionary *a2, const char *a3, const char *a4)
{
  return AppleBCMWLANBusInterfacePCIe::doesHWIdentifiersKeyContainString((AppleBCMWLANBusInterfacePCIe *)((char *)this - 48), a2, a3, a4);
}

const OSString *AppleBCMWLANBusInterfacePCIe::doesHWIdentifiersKeyEqualString(AppleBCMWLANBusInterfacePCIe *this, OSDictionary *a2, const char *a3, const char *a4)
{
  BOOL v4 = 0;
  anObject = 0;
  if (a2 && a3)
  {
    uint64_t v8 = (IOService *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 984))(this);
    if (acquireProperty<OSString>(v8, "HWIdentifiers", &anObject, 0, "IOService"))
    {
      unsigned int v9 = (const OSDictionary *)OSMetaClassBase::safeMetaCast(anObject, gOSDictionaryMetaClass);
      BOOL v4 = AppleBCMWLANUtil::doesDictionaryKeyEqualString(v9, a2, a3, a4);
      if (anObject) {
        ((void (*)(OSMetaClassBase *))anObject->release)(anObject);
      }
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

const OSString *non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::doesHWIdentifiersKeyEqualString(AppleBCMWLANBusInterfacePCIe *this, OSDictionary *a2, const char *a3, const char *a4)
{
  return AppleBCMWLANBusInterfacePCIe::doesHWIdentifiersKeyEqualString((AppleBCMWLANBusInterfacePCIe *)((char *)this - 48), a2, a3, a4);
}

uint64_t AppleBCMWLANBusInterfacePCIe::setVendorIdProperty(AppleBCMWLANBusInterfacePCIe *this, OSString *a2)
{
  uint64_t v2 = 3758097084;
  if (!a2) {
    return 3758097090;
  }
  size_t Length = OSString::getLength(a2);
  CStringNoCopy = OSString::getCStringNoCopy(a2);
  if (strnstr(CStringNoCopy, "V=m", Length))
  {
    uint64_t v7 = "Murata";
    goto LABEL_19;
  }
  uint64_t v8 = OSString::getCStringNoCopy(a2);
  if (strnstr(v8, "V=u", Length))
  {
    uint64_t v7 = "USI";
    goto LABEL_19;
  }
  unsigned int v9 = OSString::getCStringNoCopy(a2);
  if (strnstr(v9, "V=i", Length))
  {
    uint64_t v7 = "Mitsumi";
    goto LABEL_19;
  }
  uint64_t v10 = OSString::getCStringNoCopy(a2);
  if (strnstr(v10, "V=s", Length))
  {
    uint64_t v7 = "Semco";
    goto LABEL_19;
  }
  uint64_t v11 = OSString::getCStringNoCopy(a2);
  if (strnstr(v11, "V=t", Length))
  {
    uint64_t v7 = "TDK";
    goto LABEL_19;
  }
  unint64_t v12 = OSString::getCStringNoCopy(a2);
  if (strnstr(v12, "V=a", Length))
  {
    uint64_t v7 = "Amkor";
    goto LABEL_19;
  }
  unsigned int v13 = OSString::getCStringNoCopy(a2);
  if (strnstr(v13, "V=y", Length))
  {
    uint64_t v7 = "Taiyo";
    goto LABEL_19;
  }
  uint64_t v14 = OSString::getCStringNoCopy(a2);
  if (strnstr(v14, "V=g", Length))
  {
    uint64_t v7 = "STATS";
LABEL_19:
    unsigned int v15 = OSString::withCString(v7);
    if (v15)
    {
      int v16 = v15;
      if (OSString::getCStringNoCopy(v15))
      {
        uint64_t v17 = (IOService *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 984))(this);
        int v18 = OSString::getCStringNoCopy(v16);
        if (setPropertyHelper(v17, "vendor-id", v18))
        {
          uint64_t v2 = 0;
        }
        else if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logNoticeIf(Logger, 0x80uLL, "[dk] %s@%d: Failed to set vendor-id property\n", "setVendorIdProperty", 5919);
          }
        }
      }
      ((void (*)(const OSString *))v16->release)(v16);
    }
    return v2;
  }
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      int v20 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logNoticeIf(v20, 0x80uLL, "[dk] %s@%d: Matching moduleInfo not found\n", "setVendorIdProperty", 5909);
    }
  }
  return v2;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::setVendorIdProperty(AppleBCMWLANBusInterfacePCIe *this, OSString *a2)
{
  return AppleBCMWLANBusInterfacePCIe::setVendorIdProperty((AppleBCMWLANBusInterfacePCIe *)((char *)this - 48), a2);
}

uint64_t AppleBCMWLANBusInterfacePCIe::setOLYHALPropertyHelper(AppleBCMWLANBusInterfacePCIe *this, const char *cString, OSObject *a3)
{
  unsigned int v6 = (AppleOLYHAL *)OSString::withCString(cString);
  uint64_t v7 = (OSString *)OSMetaClassBase::safeMetaCast(a3, gOSStringMetaClass);
  if (v7)
  {
    uint64_t v9 = AppleOLYHAL::setStringPropertyHelperDK(v6, v7, v8);
  }
  else
  {
    uint64_t v10 = (OSString *)OSMetaClassBase::safeMetaCast(a3, gOSDictionaryMetaClass);
    if (v10)
    {
      uint64_t v9 = AppleOLYHAL::setDictPropertyHelperDK(v6, v10, v11);
    }
    else
    {
      unint64_t v12 = (OSString *)OSMetaClassBase::safeMetaCast(a3, gOSBooleanMetaClass);
      if (!v12)
      {
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(Logger, "[dk] %s@%d:No matching property type for key %s\n", "setOLYHALPropertyHelper", 5953, cString);
          }
        }
        uint64_t v14 = 0;
        if (v6) {
          goto LABEL_8;
        }
        return v14;
      }
      uint64_t v9 = AppleOLYHAL::setBoolPropertyHelperDK(v6, v12, v13);
    }
  }
  uint64_t v14 = v9;
  if (v6) {
LABEL_8:
  }
    (*(void (**)(AppleOLYHAL *))(*(void *)v6 + 16))(v6);
  return v14;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::setOLYHALPropertyHelper(AppleBCMWLANBusInterfacePCIe *this, const char *a2, OSObject *a3)
{
  return AppleBCMWLANBusInterfacePCIe::setOLYHALPropertyHelper((AppleBCMWLANBusInterfacePCIe *)((char *)this - 48), a2, a3);
}

uint64_t AppleBCMWLANBusInterfacePCIe::getModuleInfo(IOService *this, OSDictionary *a2, OSString **a3)
{
  if (!this[1].OSObject::OSObjectInterface::__vftable[205].free) {
    return 3758097088;
  }
  if (!AppleBCMWLANPCIeSkywalk::getPacketPool((AppleBCMWLANPCIeSkywalk *)this)
    || !AppleBCMWLANBusInterface::getProduct((AppleBCMWLANBusInterface *)this))
  {
    ((void (*)(IOService *, IOService *, kern_return_t (__cdecl *)(IOService *__hidden, const IORPC *__struct_ptr), void))this->OSObject::OSMetaClassBase::__vftable[16].retain)(this, this, this->OSObject::OSMetaClassBase::__vftable[2].Dispatch, 0);
    if (AppleBCMWLANPCIeSkywalk::getPacketPool((AppleBCMWLANPCIeSkywalk *)this))
    {
      if (AppleBCMWLANBusInterface::getProduct((AppleBCMWLANBusInterface *)this))
      {
        if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
        {
          AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          if (CCLogStream::shouldLog())
          {
            Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
            uint64_t PacketPool = (const OSString *)AppleBCMWLANPCIeSkywalk::getPacketPool((AppleBCMWLANPCIeSkywalk *)this);
            CStringNoCopy = OSString::getCStringNoCopy(PacketPool);
            Product = (const OSString *)AppleBCMWLANBusInterface::getProduct((AppleBCMWLANBusInterface *)this);
            int v26 = OSString::getCStringNoCopy(Product);
            CCLogStream::logAlert(Logger, "[dk] %s@%d:fMan %s fProd %s\n", "getModuleInfo", 5978, CStringNoCopy, v26);
          }
        }
      }
    }
  }
  if (AppleBCMWLANPCIeSkywalk::getPacketPool((AppleBCMWLANPCIeSkywalk *)this)
    && AppleBCMWLANBusInterface::getProduct((AppleBCMWLANBusInterface *)this))
  {
    OSNumberPtr v6 = OSNumber::withNumber(WORD2(this[1].OSObject::OSObjectInterface::__vftable[208].init), 0x10uLL);
    OSNumberPtr v7 = OSNumber::withNumber(HIWORD(this[1].OSObject::OSObjectInterface::__vftable[208].init), 0x10uLL);
    OSNumberPtr v8 = OSNumber::withNumber(WORD1(this[1].OSObject::OSObjectInterface::__vftable[208].free), 0x10uLL);
    OSDictionary::setObject(a2, "ManufacturerID", v6);
    OSDictionary::setObject(a2, "ProductID", v7);
    uint64_t v9 = (const OSMetaClassBase *)AppleBCMWLANPCIeSkywalk::getPacketPool((AppleBCMWLANPCIeSkywalk *)this);
    OSDictionary::setObject(a2, "ChipInfo", v9);
    uint64_t v10 = (const OSMetaClassBase *)AppleBCMWLANBusInterface::getProduct((AppleBCMWLANBusInterface *)this);
    OSDictionary::setObject(a2, "ModuleInfo", v10);
    OSDictionary::setObject(a2, "subsystem-vendor-id", v8);
    if (a3)
    {
      uint64_t v11 = (char *)&this[1].OSObject::OSObjectInterface::__vftable[289].free + 4;
      unint64_t v12 = (const OSString *)AppleBCMWLANPCIeSkywalk::getPacketPool((AppleBCMWLANPCIeSkywalk *)this);
      unsigned int v13 = OSString::getCStringNoCopy(v12);
      uint64_t v14 = (const OSString *)AppleBCMWLANBusInterface::getProduct((AppleBCMWLANBusInterface *)this);
      unsigned int v15 = OSString::getCStringNoCopy(v14);
      int v16 = OSNumber::unsigned16BitValue(v7);
      int v17 = OSNumber::unsigned16BitValue(v6);
      snprintf(v11, 0x78uLL, "chip='%s' module='%s' prod='%u' manuf='%u'", v13, v15, v16, v17);
      *a3 = OSString::withCString((const char *)&this[1].OSObject::OSObjectInterface::__vftable[289].free + 4);
    }
    ((void (*)(OSNumberPtr))v6->release)(v6);
    ((void (*)(OSNumberPtr))v7->release)(v7);
    ((void (*)(OSNumberPtr))v8->release)(v8);
    if ((checkPropertyExists(this, "vendor-id", 0, "IOService") & 1) == 0)
    {
      uint64_t v18 = AppleBCMWLANBusInterface::getProduct((AppleBCMWLANBusInterface *)this);
      if (((unsigned int (*)(IOService *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[13].release)(this, v18))
      {
        if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
        {
          AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v27 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
            CCLogStream::logNoticeIf(v27, 0x80uLL, "[dk] %s@%d: Failed to set vendor-id", "getModuleInfo", 6011);
          }
        }
      }
    }
    return 0;
  }
  else
  {
    uint64_t v19 = 3825175809;
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        int v20 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(v20, "[dk] %s@%d:Can not extract ChipInfo and/or ModuleInfo\n", "getModuleInfo", 5984);
      }
    }
  }
  return v19;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::getModuleInfo(IOService *this, OSDictionary *a2, OSString **a3)
{
  return AppleBCMWLANBusInterfacePCIe::getModuleInfo(this - 1, a2, a3);
}

OSMetaClassBase *AppleBCMWLANBusInterfacePCIe::getFilesDB(IOService *this)
{
  uint64_t v2 = 0;
  acquireProperty<OSDictionary>(this, "FilesDB", &v2, 0, "IOService");
  return v2;
}

OSMetaClassBase *non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::getFilesDB(IOService *this)
{
  uint64_t v2 = 0;
  acquireProperty<OSDictionary>(this - 1, "FilesDB", &v2, 0, "IOService");
  return v2;
}

uint64_t AppleBCMWLANBusInterfacePCIe::shouldGenerateFileName(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t result = *(void *)(*((void *)this + 9) + 3280);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 128))();
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::shouldGenerateFileName(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t result = *(void *)(*((void *)this + 3) + 3280);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 128))();
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::getChipNumber(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t v1 = *((void *)this + 9);
  uint64_t v2 = *(AppleBCMWLANChipManagerPCIe **)(v1 + 3280);
  if (v2) {
    return AppleBCMWLANChipManagerPCIe::getChipNumber(v2);
  }
  else {
    return *(unsigned int *)(v1 + 3312);
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::getChipNumber(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t v1 = *((void *)this + 3);
  uint64_t v2 = *(AppleBCMWLANChipManagerPCIe **)(v1 + 3280);
  if (v2) {
    return AppleBCMWLANChipManagerPCIe::getChipNumber(v2);
  }
  else {
    return *(unsigned int *)(v1 + 3312);
  }
}

uint64_t AppleBCMWLANBusInterfacePCIe::PortEventMsgHandler_Impl(AppleBCMWLANBusInterfacePCIe *this, OSAction *a2, OSNumber *a3, OSNumber *a4, OSNumber *a5, OSData *a6)
{
  uint32_t v10 = OSNumber::unsigned32BitValue(a4);
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      uint32_t v25 = OSNumber::unsigned32BitValue(a3);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:message number = %u, event type = %u, errorType = %p errorData = %p\n", "PortEventMsgHandler_Impl", 6071, v25, v10, a5, a6);
    }
  }
  switch(v10)
  {
    case 1u:
    case 6u:
    case 8u:
    case 9u:
      if (AppleBCMWLANBusInterface::getFaultReporter(this)
        && (FaultReporter = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(this),
            (CCFaultReporter::isBusy(FaultReporter) & 1) != 0)
        || !(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 608))(this))
      {
        if (!a5)
        {
LABEL_16:
          int v15 = (*(uint64_t (**)(void, void, void, OSNumber *, OSData *, void))(**(void **)(*((void *)this + 9) + 3472)
                                                                                                + 56))(*(void *)(*((void *)this + 9) + 3472), *(void *)(*(void *)this + 1168), v10, a5, a6, 0);
          goto LABEL_18;
        }
      }
      else
      {
        unsigned int v13 = (AppleBCMWLANCore *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 608))(this);
        char isWatchdogRunning = AppleBCMWLANCore::isWatchdogRunning(v13);
        if (!a5 || (isWatchdogRunning & 1) == 0) {
          goto LABEL_16;
        }
      }
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          int v26 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          uint64_t v27 = (const void *)AppleBCMWLANBusInterface::getFaultReporter(this);
          char v28 = (const void *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 608))(this);
          uint32_t v29 = OSNumber::unsigned32BitValue(a5);
          CCLogStream::logAlert(v26, "[dk] %s@%d:fault reporter %p core driver %p type %u errorType %u\n", "PortEventMsgHandler_Impl", 6155, v27, v28, v10, v29);
        }
      }
      if (OSNumber::unsigned32BitValue(a5) <= 5) {
        goto LABEL_16;
      }
LABEL_44:
      LODWORD(a6) = 0;
LABEL_45:
      uint64_t v22 = *(AppleOLYHALPortInterfacePCIe **)(*((void *)this + 9) + 5184);
      uint32_t v23 = OSNumber::unsigned32BitValue(a3);
      return AppleOLYHALPortInterfacePCIe::completePortEventMsg(v22, v23, v10, (int)a6, 0);
    case 2u:
      int v15 = (*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 1136))(this);
LABEL_18:
      LODWORD(a6) = v15;
      goto LABEL_45;
    case 4u:
      int v32 = 0;
      if ((*(unsigned int (**)(AppleBCMWLANBusInterfacePCIe *, int *))(*(void *)this + 56))(this, &v32)) {
        BOOL v17 = v32 == 2;
      }
      else {
        BOOL v17 = 0;
      }
      if (v17) {
        *(unsigned char *)(*((void *)this + 9) + 4552) = 1;
      }
      int v18 = *(unsigned __int8 *)(*((void *)this + 9) + 4552);
      uint64_t v19 = AppleBCMWLANBusInterface::getLogger(this);
      if (v18)
      {
        LODWORD(a6) = -536870167;
        if (v19)
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            int v20 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v20, "[dk] %s@%d:Reset happened during low power, skipping port on\n", "PortEventMsgHandler_Impl", 6092);
          }
        }
        goto LABEL_45;
      }
      if (v19)
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v31 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logInfo(v31, "[dk] %s@%d:The previous low power transition seems to be clean\n", "PortEventMsgHandler_Impl", 6088);
        }
      }
      goto LABEL_44;
    case 5u:
      if (a6)
      {
        LODWORD(a6) = *(_DWORD *)OSData::getBytesNoCopy(a6);
        if (a6)
        {
          if (AppleBCMWLANBusInterface::getLogger(this))
          {
            AppleBCMWLANBusInterface::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v30 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
              CCLogStream::logAlert(v30, "[dk] %s@%d:set fResetInLowPower %d, ret %x\n", "PortEventMsgHandler_Impl", 6113, 6113, a6);
            }
          }
          LODWORD(a6) = 0;
          *(unsigned char *)(*((void *)this + 9) + 4552) = 1;
          __dmb(0xBu);
          *(unsigned char *)(*((void *)this + 9) + 4554) = 1;
          __dmb(0xBu);
        }
      }
      goto LABEL_45;
    case 7u:
      return AppleBCMWLANBusInterfacePCIe::PortErrorMsgHandler_Impl(this, v11, a3, a5, a6);
    default:
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          int v16 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v16, "[dk] %s@%d:Unrecognized platform action %u\n", "PortEventMsgHandler_Impl", 6165, v10);
        }
      }
      goto LABEL_44;
  }
}

uint64_t AppleBCMWLANBusInterfacePCIe::PortErrorMsgHandler_Impl(AppleBCMWLANBusInterfacePCIe *this, OSAction *a2, OSNumber *a3, OSNumber *a4, OSData *a5)
{
  void block[5] = 0xAAAAAAAAAAAAAAAALL;
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  uint32_t v9 = OSNumber::unsigned32BitValue(a4);
  IOLog("[%06llu.%06llu] AppleBCMWLANBusInterfacePCIe::pciePortErrorHandlerCallback Link Problem (%d)\n", 0x2DD01FC06, 473034, v9);
  switch(v9)
  {
    case 1u:
      uint32_t v10 = (char *)this + 72;
      *(unsigned char *)(*((void *)this + 9) + 3706) = 1;
      AppleBCMWLANChipBackplane::setPCIeLinkState(*(void *)(*((void *)this + 9) + 3360), 1);
      if (AppleOLYHALPortInterfacePCIe::isPortControlAMFMManagedDK(*(AppleOLYHALPortInterfacePCIe **)(*((void *)this + 9) + 5184), 0))goto LABEL_11; {
      uint64_t v11 = IOMallocZeroTyped();
      }
      if (!v11)
      {
        uint32_t v29 = *(AppleOLYHALPortInterfacePCIe **)(*(void *)v10 + 5184);
        uint32_t v22 = OSNumber::unsigned32BitValue(a3);
        uint32_t v23 = v29;
        unsigned int v24 = 1;
        goto LABEL_13;
      }
      uint64_t v12 = v11;
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = a5;
      if (a5) {
        ((void (*)(OSData *))a5->retain)(a5);
      }
      IOLockLock(*(IOLock **)(*(void *)v10 + 2816));
      uint64_t v13 = *(void *)v10;
      uint64_t v14 = *(void *)v10 + 1504;
      int v15 = *(uint64_t **)(*(void *)v10 + 1512);
      if (*v15 != v14)
      {
        __break(1u);
        JUMPOUT(0x100226110);
      }
      *(void *)(v12 + 16) = v14;
      *(void *)(v12 + 24) = v15;
      uint64_t v16 = v12 + 16;
      *int v15 = v16;
      *(void *)(v13 + 1512) = v16;
      IOLockUnlock(*(IOLock **)(*((void *)this + 9) + 2816));
      BOOL v17 = (IODispatchQueue *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 3464) + 168))(*(void *)(*((void *)this + 9) + 3464));
      block[0] = _NSConcreteStackBlock;
      block[1] = 0x40000000;
      block[2] = ___ZN28AppleBCMWLANBusInterfacePCIe24PortErrorMsgHandler_ImplEP8OSActionP8OSNumberS3_P6OSData_block_invoke;
      block[3] = &__block_descriptor_tmp_850;
      block[4] = this;
      IODispatchQueue::DispatchAsync(v17, block);
      int v18 = 0;
      goto LABEL_23;
    case 3u:
      if (!AppleBCMWLAN_isVerboseDebugLoggingAllowed()) {
        goto LABEL_12;
      }
      uint32_t v10 = (char *)this + 72;
      uint64_t v19 = *((void *)this + 9);
      if (!*(unsigned char *)(v19 + 3778)) {
        goto LABEL_12;
      }
      if (AppleOLYHALPortInterfacePCIe::isPortControlAMFMManagedDK(*(AppleOLYHALPortInterfacePCIe **)(v19 + 5184), 0))
      {
LABEL_11:
        uint64_t v20 = *(void *)v10;
LABEL_19:
        uint64_t v27 = *(AppleOLYHALPortInterfacePCIe **)(v20 + 5184);
        uint32_t v22 = OSNumber::unsigned32BitValue(a3);
        uint32_t v23 = v27;
        unsigned int v24 = v9;
        int v25 = 0;
      }
      else
      {
        int v18 = (*(uint64_t (**)(void, void, uint64_t, OSData *, void, void))(**(void **)(*((void *)this + 9) + 3472)
                                                                                           + 56))(*(void *)(*((void *)this + 9) + 3472), *(void *)(*(void *)this + 1176), 3, a5, 0, 0);
LABEL_23:
        uint64_t v30 = *(AppleOLYHALPortInterfacePCIe **)(*(void *)v10 + 5184);
        uint32_t v22 = OSNumber::unsigned32BitValue(a3);
        uint32_t v23 = v30;
        unsigned int v24 = v9;
        int v25 = v18;
      }
      return AppleOLYHALPortInterfacePCIe::completePortErrorMsg(v23, v22, v24, v25, 0);
    case 6u:
      goto LABEL_15;
    case 7u:
      *(unsigned char *)(*((void *)this + 9) + 3706) = 1;
      AppleBCMWLANChipBackplane::setPCIeLinkState(*(void *)(*((void *)this + 9) + 3360), 1);
      *(unsigned char *)(*((void *)this + 9) + 3707) = 1;
LABEL_15:
      if (AppleBCMWLAN_isVerboseDebugLoggingAllowed() && !*(unsigned char *)(*((void *)this + 9) + 3706)) {
        AppleBCMWLANBusInterfacePCIe::gatherEPConfigRegSpace(this, v26);
      }
      uint64_t v20 = *((void *)this + 9);
      goto LABEL_19;
    default:
LABEL_12:
      uint64_t v21 = *(AppleOLYHALPortInterfacePCIe **)(*((void *)this + 9) + 5184);
      uint32_t v22 = OSNumber::unsigned32BitValue(a3);
      uint32_t v23 = v21;
      unsigned int v24 = v9;
LABEL_13:
      int v25 = -536870212;
      return AppleOLYHALPortInterfacePCIe::completePortErrorMsg(v23, v22, v24, v25, 0);
  }
}

uint64_t AppleBCMWLANBusInterfacePCIe::PortEventMsgHandlerGated(AppleBCMWLANBusInterfacePCIe *this, int a2, OSNumber *a3, OSData *a4)
{
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:event type = %u\n", "PortEventMsgHandlerGated", 6183, a2);
    }
  }
  switch(a2)
  {
    case 1:
      if (AppleBCMWLANBusInterface::hasRegisteredDriver(this))
      {
        if (*(unsigned char *)(*((void *)this + 9) + 5296))
        {
          if (AppleBCMWLANBusInterface::getLogger(this))
          {
            AppleBCMWLANBusInterface::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              OSNumberPtr v8 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
              CCLogStream::logAlert(v8, "[dk] %s@%d:OLYHAL powered off; no need to handle this message.\n");
            }
          }
          return 0;
        }
        while (1)
        {
          FaultReporter = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(this);
          if ((CCFaultReporter::isBusy(FaultReporter) & 1) == 0)
          {
            uint64_t v19 = (AppleBCMWLANCore *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 608))(this);
            if (!AppleBCMWLANCore::isWatchdogRunning(v19)) {
              break;
            }
          }
          unint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
          clock_interval_to_deadline();
          (*(void (**)(void, unint64_t *, unint64_t))(**(void **)(*((void *)this + 9)
                                                                                             + 3472)
                                                                               + 80))(*(void *)(*((void *)this + 9) + 3472), &v40, v40);
        }
        *(unsigned char *)(*((void *)this + 9) + 4556) = 1;
        uint64_t v20 = *((void *)this + 9);
        uint64_t v21 = (unsigned char *)(v20 + 4554);
        if (*(unsigned char *)(v20 + 3722))
        {
          if (*v21) {
            unsigned int v22 = 9;
          }
          else {
            unsigned int v22 = 8;
          }
        }
        else
        {
          unsigned int v22 = 5;
        }
        if (*v21 && *(unsigned char *)(v20 + 4557))
        {
          unsigned int v24 = *(const char **)(v20 + 4560);
          int v25 = *(_DWORD *)(v20 + 4568);
          int v26 = 1;
        }
        else
        {
          int v26 = 0;
          unsigned int v24 = "External reset request";
          int v25 = -469794011;
        }
        if (*(unsigned char *)(v20 + 3706)) {
          int v27 = -469794028;
        }
        else {
          int v27 = v25;
        }
        if (*(unsigned char *)(v20 + 3707))
        {
          *(unsigned char *)(v20 + 3707) = 0;
          char v28 = "unexpected port error";
          int v27 = -469794028;
        }
        else
        {
          if (*(unsigned char *)(v20 + 3706)) {
            char v28 = "unexpected link down";
          }
          else {
            char v28 = v24;
          }
          if (!v28)
          {
            uint64_t v34 = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(this);
            CCFaultReporter::reportFault(v34, v22, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANBusInterfacePCIe.cpp", 0x1864u, "PortEventMsgHandlerGated", 0, v27, 0, v39);
            goto LABEL_57;
          }
        }
        uint32_t v29 = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(this);
        CCFaultReporter::reportFault(v29, v22, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANBusInterfacePCIe.cpp", 0x1860u, "PortEventMsgHandlerGated", 0, v27, "%s", v28);
LABEL_57:
        if (v26) {
          (*(void (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 1144))(this);
        }
        uint64_t v30 = *((void *)this + 9);
        uint64_t v31 = *(void *)(v30 + 3632);
        if (v31)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 120))(v31, 10000);
          uint64_t v30 = *((void *)this + 9);
        }
        if (*(unsigned char *)(v30 + 3722) && !*(unsigned char *)(v30 + 4554))
        {
          if (AppleBCMWLANBusInterface::getLogger(this))
          {
            AppleBCMWLANBusInterface::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              OSStringPtr v38 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
              CCLogStream::logAlert(v38, "[dk] %s@%d:forced power cycle while in low power\n", "PortEventMsgHandlerGated", 6258);
            }
          }
          AppleBCMWLANBusInterfacePCIe::nanoPowerCycleGated((OSObject *)this);
          *(unsigned char *)(*((void *)this + 9) + 4552) = 1;
          uint64_t v32 = *(void *)(*((void *)this + 9) + 3632);
          if (v32) {
            (*(void (**)(uint64_t))(*(void *)v32 + 136))(v32);
          }
        }
        return 0;
      }
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v36 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v36, "[dk] %s@%d:reset request before driver is registered\n", "PortEventMsgHandlerGated", 6188);
        }
      }
      AppleBCMWLANBusInterfacePCIe::nanoPowerCycleGated((OSObject *)this);
      return 0;
    case 6:
      IOService::ChangePowerState((IOService *)this, 2u, 0);
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v11 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logInfo(v11, "[dk] %s@%d:IOPCIDevice powered on\n", "PortEventMsgHandlerGated", 6284);
        }
      }
      return 0;
    case 8:
      uint64_t v12 = OSNumber::unsigned32BitValue(a3);
      if ((*(unsigned int (**)(AppleBCMWLANBusInterfacePCIe *, uint64_t, OSData *))(*(void *)this + 1176))(this, v12, a4))
      {
        AppleBCMWLANBusInterfacePCIe::PortEventMsgHandlerGated((OSObject *)this, a3);
      }
      return 0;
    case 9:
      if (*(unsigned char *)(*((void *)this + 9) + 4414))
      {
        char hasRegisteredDriver = AppleBCMWLANBusInterface::hasRegisteredDriver(this);
        uint64_t v14 = AppleBCMWLANBusInterface::getLogger(this);
        if (hasRegisteredDriver)
        {
          if (v14)
          {
            AppleBCMWLANBusInterface::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v37 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
              CCLogStream::logInfo(v37, "[dk] %s@%d:Triggering Wifi Log dump on BT flr\n", "PortEventMsgHandlerGated", 6321);
            }
          }
          int v15 = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(this);
          if (CCFaultReporter::isBusy(v15))
          {
            if (AppleBCMWLANBusInterface::getLogger(this))
            {
              AppleBCMWLANBusInterface::getLogger(this);
              if (CCLogStream::shouldLog())
              {
                uint64_t v16 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                CCLogStream::logAlert(v16, "[dk] %s@%d:Fault reporter busy\n");
              }
            }
          }
          else
          {
            uint32_t v23 = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(this);
            CCFaultReporter::reportFault(v23, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANBusInterfacePCIe.cpp", 0x18BAu, "PortEventMsgHandlerGated", 0, -469794011, "WiFi Dump on BT FLR");
          }
        }
        else if (v14)
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            BOOL v17 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v17, "[dk] %s@%d:Dump Log requested before driver is registered\n");
          }
        }
      }
      return 0;
    default:
      uint64_t v9 = 3758097095;
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint32_t v10 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v10, "[dk] %s@%d:Unrecognized platform action %u\n", "PortEventMsgHandlerGated", 6334, a2);
        }
      }
      return v9;
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::PortEventMsgHandlerGated(AppleBCMWLANBusInterfacePCIe *this, int a2, OSNumber *a3, OSData *a4)
{
  return AppleBCMWLANBusInterfacePCIe::PortEventMsgHandlerGated((AppleBCMWLANBusInterfacePCIe *)((char *)this - 64), a2, a3, a4);
}

uint64_t AppleBCMWLANBusInterfacePCIe::setChipUnrecoverable(AppleBCMWLANBusInterfacePCIe *this)
{
  *(unsigned char *)(*((void *)this + 9) + 5192) = 1;
  uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
  if (result)
  {
    AppleBCMWLANBusInterface::getLogger(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      return CCLogStream::logAlert(Logger, "[dk] %s@%d:Core Layer failed to setup FW.\n", "setChipUnrecoverable", 6345);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::setChipUnrecoverable(AppleBCMWLANBusInterfacePCIe *this)
{
  return AppleBCMWLANBusInterfacePCIe::setChipUnrecoverable((AppleBCMWLANBusInterfacePCIe *)((char *)this - 48));
}

uint64_t AppleBCMWLANBusInterfacePCIe::clearPreS2RResetReason(uint64_t this)
{
  uint64_t v1 = (unsigned char *)(*(void *)(this + 72) + 4557);
  if (*v1)
  {
    *uint64_t v1 = 0;
    *(_DWORD *)(*(void *)(this + 72) + 4568) = 0;
    *(void *)(*(void *)(this + 72) + 4560) = 0;
  }
  return this;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::clearPreS2RResetReason(uint64_t this)
{
  uint64_t v1 = (unsigned char *)(*(void *)(this + 8) + 4557);
  if (*v1)
  {
    *uint64_t v1 = 0;
    *(_DWORD *)(*(void *)(this + 8) + 4568) = 0;
    *(void *)(*(void *)(this + 8) + 4560) = 0;
  }
  return this;
}

uint64_t AppleBCMWLANBusInterfacePCIe::setPreS2RResetReason(void *a1, int a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 1144))(a1);
  *(void *)(a1[9] + 4560) = a3;
  *(_DWORD *)(a1[9] + 4568) = a2;
  *(unsigned char *)(a1[9] + 4557) = 1;
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::setPreS2RResetReason(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = a1 - 64;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(a1 - 64) + 1144))(a1 - 64);
  *(void *)(*(void *)(v5 + 72) + 4560) = a3;
  *(_DWORD *)(*(void *)(v5 + 72) + 4568) = a2;
  *(unsigned char *)(*(void *)(v5 + 72) + 4557) = 1;
  return result;
}

void AppleBCMWLANBusInterfacePCIe::externalResetTimeout(AppleBCMWLANBusInterface *a1)
{
  if (AppleBCMWLANBusInterface::getLogger(a1))
  {
    AppleBCMWLANBusInterface::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:halt did not happen in %u ms\n", "externalResetTimeout", 6374, 10000);
    }
  }
  uint64_t ClassNameHelper = (const char *)getClassNameHelper((OSObject *)a1);
  panic("%s::%s(): External reset request timed out", ClassNameHelper, "externalResetTimeout");
}

void non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::externalResetTimeout(uint64_t a1)
{
}

uint64_t AppleBCMWLANBusInterfacePCIe::isEPTransactionPending(AppleBCMWLANBusInterfacePCIe *this, BOOL *a2)
{
  uint64_t foundCapabilityOffset = 0;
  if (IOPCIDevice::FindPCICapability(*(IOPCIDevice **)(*((void *)this + 9) + 3248), 0x10u, 0, &foundCapabilityOffset, 0))
  {
    uint64_t v4 = 3758097136;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:PCIE capability not found\n", "isEPTransactionPending", 6511);
      }
    }
  }
  else
  {
    uint32_t readData = 0;
    IOPCIDevice::ConfigurationRead32(*(IOPCIDevice **)(*((void *)this + 9) + 3248), foundCapabilityOffset + 8, &readData);
    uint64_t v4 = 0;
    *a2 = (readData & 0x200000) != 0;
  }
  return v4;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::isEPTransactionPending(AppleBCMWLANBusInterfacePCIe *this, BOOL *a2)
{
  return AppleBCMWLANBusInterfacePCIe::isEPTransactionPending((AppleBCMWLANBusInterfacePCIe *)((char *)this - 64), a2);
}

void AppleBCMWLANBusInterfacePCIe::checkTransactionPending(AppleBCMWLANBusInterfacePCIe *this)
{
  if (((*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 208))(this) & 1) == 0
    && *(unsigned char *)(*((void *)this + 9) + 1306))
  {
    unsigned int v2 = 0;
    unsigned __int8 v10 = 1;
    while (1)
    {
      int v3 = (*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *, unsigned __int8 *))(*(void *)this + 1120))(this, &v10);
      if (v3) {
        break;
      }
      if (!v10)
      {
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logCrit(Logger, "[dk] %s@%d:Transaction Pending bit cleared with count: %u\n", "checkTransactionPending", 6546, v2);
          }
        }
        goto LABEL_16;
      }
      IOSleep(0xAuLL);
      int v4 = v10;
      if (v10)
      {
        if (v2++ < 9) {
          continue;
        }
      }
      goto LABEL_17;
    }
    int v6 = v3;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        OSNumberPtr v7 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:Failed to get Transaction Pending bit, ret: 0x%x\n", "checkTransactionPending", 6541, v6);
      }
    }
LABEL_16:
    int v4 = v10;
LABEL_17:
    if (v4 && AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        OSNumberPtr v8 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v8, "[dk] %s@%d:Transaction Pending bit poll timed out\n", "checkTransactionPending", 6554);
      }
    }
  }
}

void non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::checkTransactionPending(AppleBCMWLANBusInterfacePCIe *this)
{
}

uint64_t AppleBCMWLANBusInterfacePCIe::flr(OSObject *this)
{
  unsigned int v2 = (AppleBCMWLANChipManagerPCIe *)*((void *)this[1].ivars + 410);
  if (!v2) {
    return 3758097088;
  }
  if (!AppleBCMWLANChipManagerPCIe::isMultiFunctionChip(v2)) {
    return 3758097095;
  }
  uint64_t v3 = AppleOLYHALPlatformFunction::flrHoldDK(*((AppleOLYHALPlatformFunction **)this[1].ivars + 647), 0);
  if (v3)
  {
    uint64_t v4 = v3;
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        ((void (*)(OSObject *, uint64_t))this->OSMetaClassBase::__vftable[1].free)(this, v4);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:fPlatform->flrHold() failed with error %s\n");
      }
    }
  }
  else
  {
    uint64_t v7 = AppleOLYHALPlatformFunction::flrReleaseDK(*((AppleOLYHALPlatformFunction **)this[1].ivars + 647), 0);
    if (v7)
    {
      uint64_t v4 = v7;
      if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
      {
        AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        if (CCLogStream::shouldLog())
        {
          OSNumberPtr v8 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          ((void (*)(OSObject *, uint64_t))this->OSMetaClassBase::__vftable[1].free)(this, v4);
          CCLogStream::logAlert(v8, "[dk] %s@%d:fPlatform->flrRelease() failed with error %s\n");
        }
      }
    }
    else if (AppleBCMWLANChipManagerPCIe::isSplitArchitecture(*((AppleBCMWLANChipManagerPCIe **)this[1].ivars + 410)))
    {
      *((unsigned char *)this[1].ivars + 4576) = 1;
      IOPCIDevice::RestoreDeviceState(*((IOPCIDevice **)this[1].ivars + 406), 0, 0);
      uint64_t v4 = 0;
      if ((AppleBCMWLANBusInterfacePCIe::isAPBAccessible((AppleBCMWLANBusInterfacePCIe *)this, 0, 1) & 1) == 0)
      {
        if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
        {
          AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v9 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
            CCLogStream::logCrit(v9, "[dk] %s@%d:Pending errors on Backplane after an FLR. Considering the FLR to be a failure.", "flr", 6588);
          }
        }
        *((unsigned char *)this[1].ivars + 4576) = 0;
        IOPCIDevice::SaveDeviceState(*((IOPCIDevice **)this[1].ivars + 406), 0, 0);
        if (*((unsigned char *)this[1].ivars + 4577)) {
          AppleBCMWLANBusInterfacePCIe::flr(this);
        }
        return 3758097131;
      }
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

uint64_t AppleBCMWLANBusInterfacePCIe::isAPBAccessible(AppleBCMWLANBusInterfacePCIe *this, int a2, int a3)
{
  int APBAccessibilityState = AppleBCMWLANChipBackplane::getAPBAccessibilityState(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360));
  uint64_t v7 = *((void *)this + 9);
  if (APBAccessibilityState == 1)
  {
    if (((*(uint64_t (**)(void))(**(void **)(v7 + 3280) + 240))(*(void *)(v7 + 3280)) & 1) == 0) {
      AppleBCMWLANBusInterfacePCIe::dumpAPBRegisters(this);
    }
    return 0;
  }
  int v9 = *(unsigned __int8 *)(v7 + 2869);
  if (a2) {
    (*(void (**)(AppleBCMWLANBusInterfacePCIe *, const char *, uint64_t))(*(void *)this + 1208))(this, "isAPBAccessible", 19583);
  }
  if (v9) {
    AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 0);
  }
  if (a3) {
    AppleBCMWLANChipBackplane::forcePower(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 1, 0);
  }
  uint64_t v8 = AppleBCMWLANBusInterfacePCIe::checkAPBAccessibility(this, a2, a3);
  if ((v8 & 1) == 0)
  {
    BOOL v10 = *(unsigned char *)(*((void *)this + 9) + 4576) != 0;
    if (!a3) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  BOOL v10 = 0;
  if (a3) {
LABEL_15:
  }
    AppleBCMWLANChipBackplane::forcePower(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0, v10);
LABEL_16:
  if (v9) {
    AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 1);
  }
  return v8;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::flr(AppleBCMWLANBusInterfacePCIe *this)
{
  return AppleBCMWLANBusInterfacePCIe::flr((OSObject *)((char *)this - 64));
}

uint64_t AppleBCMWLANBusInterfacePCIe::halt(AppleBCMWLANBusInterfacePCIe *this, char a2)
{
  unsigned int v60 = 0;
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlertIf(Logger, 0x80uLL, "[dk] %s@%d:\n", "halt", 6612);
    }
  }
  unint64_t v61 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = *((void *)this + 9);
  uint64_t v5 = *(void *)(v4 + 3632);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 136))(v5);
    uint64_t v4 = *((void *)this + 9);
  }
  if (*(unsigned char *)(v4 + 3704))
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        int v6 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v6, "[dk] %s@%d:Port enable has failed, bailing from halt\n", "halt", 6619);
      }
    }
    return 0;
  }
  if (*(unsigned char *)(v4 + 1304))
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v45 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logInfo(v45, "[dk] %s@%d:chip is already halted\n", "halt", 6628);
      }
    }
    return 0;
  }
  AppleBCMWLANBusInterfacePCIe::disableRingEventSources(this);
  uint64_t v9 = *((void *)this + 9);
  if (*(void *)(v9 + 3264))
  {
    BOOL v10 = *(IODispatchQueue **)(v9 + 3496);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = ___ZN28AppleBCMWLANBusInterfacePCIe4haltEb_block_invoke;
    block[3] = &__block_descriptor_tmp_335;
    block[4] = this;
    IODispatchQueue::DispatchAsync(v10, block);
  }
  if ((a2 & 1) != 0
    || !AppleOLYHALPlatformFunction::deviceCheckLPEMDK(*(AppleOLYHALPlatformFunction **)(*((void *)this + 9) + 5176), 0))
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v46 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v46, "[dk] %s@%d:Trap Before flr with UpgradeToFullReset %d\n", "halt", 6673, *(unsigned __int8 *)(*((void *)this + 9) + 4573));
      }
    }
    if (!*(unsigned char *)(*((void *)this + 9) + 4573))
    {
      if (AppleBCMWLANBusInterfacePCIe::trapDevice(this, 0xDEAD0002))
      {
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            int v25 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v25, "[dk] %s@%d:Failed to issue device trap\n", "halt", 6675);
          }
        }
      }
    }
    goto LABEL_32;
  }
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      long long v51 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(v51, "[dk] %s@%d:Issuing LPEM Trap\n", "halt", 6654);
    }
  }
  *(unsigned char *)(*((void *)this + 9) + 5193) = 1;
  int v11 = AppleBCMWLANBusInterfacePCIe::trapDevice(this, 0xDEAD0003);
  uint64_t v12 = AppleBCMWLANBusInterface::getLogger(this);
  if (v11)
  {
    if (v12)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v52 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v52, "[dk] %s@%d:Failed to issue device trap\n", "halt", 6657);
      }
    }
    *(unsigned char *)(*((void *)this + 9) + 5193) = 0;
    goto LABEL_32;
  }
  if (v12)
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v53 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(v53, "[dk] %s@%d:Starting MemKill sequence\n", "halt", 6661);
    }
  }
  uint64_t v35 = *((void *)this + 9);
  int v36 = *(_DWORD *)(v35 + 3312);
  if (v36 == 4387)
  {
    AppleBCMWLANChipBackplane::writePMUCoreReg32(*(AppleBCMWLANChipBackplane **)(v35 + 3360), 0x650u, 0xDu);
    AppleBCMWLANChipBackplane::readPMUCoreReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x654u, &v60);
    uint64_t v37 = *(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360);
    unsigned int v38 = v60;
    int v39 = 1092;
    goto LABEL_140;
  }
  if (v36 == 4378)
  {
    AppleBCMWLANChipBackplane::writePMUCoreReg32(*(AppleBCMWLANChipBackplane **)(v35 + 3360), 0x650u, 0xDu);
    AppleBCMWLANChipBackplane::readPMUCoreReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x654u, &v60);
    uint64_t v37 = *(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360);
    unsigned int v38 = v60;
    int v39 = 307;
LABEL_140:
    AppleBCMWLANChipBackplane::writePMUCoreReg32(v37, 0x654u, v38 | v39);
  }
LABEL_32:
  *(unsigned char *)(*((void *)this + 9) + 1304) = 1;
  *(unsigned char *)(*((void *)this + 9) + 4576) = 0;
  AppleOLYHALPlatformFunction::setLowPowerDetectedDK(*(AppleOLYHALPlatformFunction **)(*((void *)this + 9) + 5176), 0, 0);
  uint64_t v13 = *((void *)this + 9);
  if (*(_DWORD *)(v13 + 1236))
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v47 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logInfo(v47, "[dk] %s@%d:Halt while entering DS\n", "halt", 6686);
      }
    }
    int v62 = 1;
    (*(void (**)(void, uint64_t (*)(AppleBCMWLANBusInterface *, unsigned int *), int *, void, void, void))(**(void **)(*((void *)this + 9) + 3472) + 56))(*(void *)(*((void *)this + 9) + 3472), AppleBCMWLANBusInterfacePCIe::signalDriverEventGated, &v62, 0, 0, 0);
    uint64_t v13 = *((void *)this + 9);
  }
  if (*(_DWORD *)(v13 + 1240))
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v48 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logInfo(v48, "[dk] %s@%d:Halt while entering D3, not sure how this is to be handled!\n", "halt", 6690);
      }
    }
    int v62 = 0;
    (*(void (**)(void, uint64_t (*)(AppleBCMWLANBusInterface *, unsigned int *), int *, void, void, void))(**(void **)(*((void *)this + 9) + 3472) + 56))(*(void *)(*((void *)this + 9) + 3472), AppleBCMWLANBusInterfacePCIe::signalDriverEventGated, &v62, 0, 0, 0);
    mach_continuous_time();
    absolutetime_to_nanoseconds();
    uint64_t v13 = *((void *)this + 9);
  }
  if (*(_DWORD *)(v13 + 2844) == 2)
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v50 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logInfo(v50, "[dk] %s@%d:Halt while exiting D3\n", "halt", 6695);
      }
    }
    (*(void (**)(void))(**(void **)(*((void *)this + 9) + 3608) + 136))(*(void *)(*((void *)this + 9) + 3608));
    uint64_t v13 = *((void *)this + 9);
  }
  if (!*(void *)(v13 + 3248)) {
    goto LABEL_57;
  }
  if (*(unsigned char *)(v13 + 2869))
  {
    if (*(_DWORD *)(v13 + 2844) != 2)
    {
      *(unsigned char *)(v13 + 1232) = 1;
      AppleOLYHALPortInterfacePCIe::setDeviceWakeDK(*(AppleOLYHALPortInterfacePCIe **)(*((void *)this + 9) + 5184), 1, 0);
    }
    AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 0);
    uint64_t v13 = *((void *)this + 9);
  }
  if (*(unsigned char *)(v13 + 4554) || *(unsigned char *)(v13 + 3722))
  {
    *(unsigned char *)(v13 + 4555) = 1;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v49 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v49, "[dk] %s@%d:Skip device state save\n");
      }
    }
    goto LABEL_57;
  }
  if (*(unsigned char *)(v13 + 4580))
  {
    AppleBCMWLANBusInterfacePCIe::modifyASPM(this, 2u);
    uint64_t v13 = *((void *)this + 9);
  }
  if (!*(unsigned char *)(v13 + 3872))
  {
    uint64_t v42 = *(AppleOLYHALPortInterfacePCIe **)(v13 + 5184);
    if (v42)
    {
      if (AppleOLYHALPortInterfacePCIe::isPortControlAMFMManagedDK(v42, 0))
      {
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v43 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v43, "[dk] %s@%d:halt before saving shadow permanent device state\n");
          }
        }
        goto LABEL_57;
      }
      uint64_t v13 = *((void *)this + 9);
    }
  }
  unint64_t v40 = *(AppleBCMWLANChipManagerPCIe **)(v13 + 3280);
  if (v40 && AppleBCMWLANChipManagerPCIe::isBMEDisableSupported(v40))
  {
    AppleBCMWLANChipConfigSpace::modifyReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), 4u, 4, 0, 0);
    *(unsigned char *)(*((void *)this + 9) + 1307) = 0;
  }
  (*(void (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 1128))(this);
  uint64_t v41 = IOPCIDevice::SaveDeviceState(*(IOPCIDevice **)(*((void *)this + 9) + 3248), 0, 0);
  if (!v41)
  {
LABEL_57:
    uint64_t v14 = *((void *)this + 9);
    if (*(unsigned char *)(v14 + 3706))
    {
      if (AppleOLYHALPortInterfacePCIe::isPortControlAMFMManagedDK(*(AppleOLYHALPortInterfacePCIe **)(v14 + 5184), 0))
      {
        uint64_t v15 = *((void *)this + 9);
        if (*(void *)(v15 + 3352))
        {
          if (!*(unsigned char *)(v15 + 3236))
          {
            if (AppleBCMWLANBusInterface::getLogger(this))
            {
              AppleBCMWLANBusInterface::getLogger(this);
              if (CCLogStream::shouldLog())
              {
                uint64_t v55 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                CCLogStream::logCrit(v55, "[dk] %s@%d:Sleeping to allow the detach event source to run!", "halt", 6759);
              }
            }
            clock_interval_to_deadline();
            if ((*(unsigned int (**)(void, uint64_t, unint64_t))(**(void **)(*((void *)this + 9)
                                                                                                 + 3472)
                                                                                   + 80))(*(void *)(*((void *)this + 9) + 3472), *((void *)this + 9) + 3706, v61) == -536870186)AppleBCMWLANBusInterfacePCIe::halt((OSObject *)this);
            if (AppleBCMWLANBusInterface::getLogger(this))
            {
              AppleBCMWLANBusInterface::getLogger(this);
              if (CCLogStream::shouldLog())
              {
                unsigned int v56 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                CCLogStream::logCrit(v56, "[dk] %s@%d:Detach is complete!\n", "halt", 6767);
              }
            }
          }
        }
      }
    }
    uint64_t v16 = *((void *)this + 9);
    if (*(unsigned char *)(v16 + 5193))
    {
      uint64_t v17 = AppleOLYHALPlatformFunction::flrHoldDK(*(AppleOLYHALPlatformFunction **)(v16 + 5176), 0);
      if (v17)
      {
        uint64_t v7 = v17;
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v18 = AppleBCMWLANBusInterface::getLogger(this);
            uint64_t v57 = 6774;
            uint64_t v58 = (*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *, uint64_t))(*(void *)this + 104))(this, v7);
            uint64_t v19 = "[dk] %s@%d:fPlatform->flrHold() failed with error %s\n";
LABEL_73:
            uint64_t v20 = (CCLogStream *)v18;
LABEL_133:
            CCLogStream::logAlert(v20, v19, "halt", v57, v58);
            return v7;
          }
        }
        return v7;
      }
      uint64_t v26 = *((void *)this + 9);
      if (*(unsigned char *)(v26 + 4000))
      {
        AppleBCMWLANBusInterfacePCIe::modifyASPM(this, 2u);
        uint64_t v26 = *((void *)this + 9);
      }
      if (*(void *)(v26 + 5184))
      {
        uint64_t v7 = AppleOLYHALPortInterfacePCIe::enableDK();
        if (!v7)
        {
LABEL_97:
          if ((a2 & 1) == 0) {
            *(unsigned char *)(*((void *)this + 9) + 5296) = 1;
          }
          uint64_t RxDescriptor = AppleBCMWLANBusInterface::getRxDescriptor(this);
          if ((*(unsigned int (**)(uint64_t))(*(void *)RxDescriptor + 56))(RxDescriptor))
          {
            do
            {
              char v28 = (AppleBCMWLANObjectQueue *)AppleBCMWLANBusInterface::getRxDescriptor(this);
              uint32_t v29 = (const OSMetaClassBase *)AppleBCMWLANObjectQueue::dequeue(v28);
              uint64_t v30 = OSMetaClassBase::safeMetaCast(v29, gIO80211BufferMetaClass);
              if (v30)
              {
                IO80211Buffer::returnBuffer((IO80211Buffer *)v30);
              }
              else if (AppleBCMWLANBusInterface::getLogger(this))
              {
                AppleBCMWLANBusInterface::getLogger(this);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v32 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                  CCLogStream::logCrit(v32, "[dk] %s@%d: Invalid responseMemory\n", "halt", 6830);
                }
              }
              uint64_t v31 = AppleBCMWLANBusInterface::getRxDescriptor(this);
            }
            while ((*(unsigned int (**)(uint64_t))(*(void *)v31 + 56))(v31));
          }
          AppleBCMWLANBusInterfacePCIe::destroyFirmwareIPCTrackers((OSObject *)this);
          AppleBCMWLANBusInterfacePCIe::destroyFirmwarePCIeIPC(this);
          AppleBCMWLANBusInterfacePCIe::resetMRUFlowIdList(this);
          uint64_t v33 = *(unsigned int *)(*((void *)this + 9) + 2848);
          if (v33) {
            IOSleep(v33);
          }
          return v7;
        }
      }
      else
      {
        uint64_t v7 = 3758097086;
      }
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v20 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          uint64_t v57 = 6785;
          uint64_t v19 = "[dk] %s@%d:Failed to disable and power off port\n";
          goto LABEL_133;
        }
      }
      return v7;
    }
    if (*(unsigned char *)(v16 + 3723) || *(unsigned char *)(v16 + 4554) || *(unsigned char *)(v16 + 4573))
    {
      *(unsigned char *)(v16 + 3723) = 0;
      *(unsigned char *)(*((void *)this + 9) + 4573) = 0;
      uint64_t v16 = *((void *)this + 9);
    }
    if (*(void *)(v16 + 5184))
    {
      uint64_t v7 = AppleOLYHALPortInterfacePCIe::enableDK();
      if (!v7)
      {
        *(unsigned char *)(*((void *)this + 9) + 4556) = 0;
        uint64_t v21 = *((void *)this + 9);
        if (*(void *)(v21 + 3360))
        {
          unsigned int v22 = (_OWORD *)(v21 + 5300);
          v22[1] = 0u;
          void v22[2] = 0u;
          _OWORD *v22 = 0u;
          uint32_t v23 = (_OWORD *)(*((void *)this + 9) + 5348);
          _OWORD *v23 = 0u;
          v23[1] = 0u;
          AppleBCMWLANChipBackplane::setAPBAccessibilityState(*(void *)(*((void *)this + 9) + 3360), 0);
        }
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v54 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlertIf(v54, 0x80uLL, "[dk] %s@%d: Line:%d, setPowerEnable(false)\n", "halt", 6814, 6814);
          }
        }
        uint64_t v7 = AppleOLYHALPlatformFunction::setPowerEnableDK(*(AppleOLYHALPlatformFunction **)(*((void *)this + 9) + 5176), 0, 0);
        if (v7)
        {
          if (AppleBCMWLANBusInterface::getLogger(this))
          {
            AppleBCMWLANBusInterface::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              unsigned int v24 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
              CCLogStream::logAlert(v24, "[dk] %s@%d:Failed to toggle RegON -> OFF 0x%08x\n", "halt", 6817, v7);
            }
          }
        }
        goto LABEL_97;
      }
    }
    else
    {
      uint64_t v7 = 3758097086;
    }
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v34 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logCrit(v34, "[dk] %s@%d:Failed to enable port\n", "halt", 6802);
      }
    }
    return v7;
  }
  uint64_t v7 = v41;
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v18 = AppleBCMWLANBusInterface::getLogger(this);
      uint64_t v57 = 6745;
      uint64_t v58 = (*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *, uint64_t))(*(void *)this + 104))(this, v7);
      uint64_t v19 = "[dk] %s@%d:halt failed because saveDeviceState returned %s\n";
      goto LABEL_73;
    }
  }
  return v7;
}

uint64_t ___ZN28AppleBCMWLANBusInterfacePCIe4haltEb_block_invoke(uint64_t a1)
{
  return IODispatchSource::SetEnable(*(IODispatchSource **)(*(void *)(*(void *)(a1 + 32) + 72) + 3264), 0, 0);
}

uint64_t AppleBCMWLANBusInterfacePCIe::trapDevice(AppleBCMWLANBusInterfacePCIe *this, uint32_t a2)
{
  (*(void (**)(AppleBCMWLANBusInterfacePCIe *, const char *, uint64_t))(*(void *)this + 1208))(this, "trapDevice", 19030);
  if (((*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 208))(this) & 1) != 0
    || !*(unsigned char *)(*((void *)this + 9) + 1306))
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:Chip already trapped or chip not yet booted\n", "trapDevice", 19033);
      }
    }
    return 0;
  }
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      unsigned int v22 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(v22, "[dk] %s@%d:Issuing Chip Trap\n", "trapDevice", 19038);
    }
  }
  if (!AppleBCMWLANBusInterfacePCIe::checkBusAccessibility(this))
  {
    uint64_t v10 = 3758097084;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog()) {
        goto LABEL_28;
      }
    }
    return v10;
  }
  uint64_t v4 = *(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360);
  if (!v4 || (AppleBCMWLANChipBackplane::getPowerControlRegReadStatus(v4) & 1) == 0)
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint32_t v23 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v23, "[dk] %s@%d:Power control register access failed; no longer safe to trap device\n",
          "trapDevice",
          19049);
      }
    }
    uint64_t v10 = 3758097084;
    if (*(unsigned char *)(*((void *)this + 9) + 4556))
    {
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v13 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v13, "[dk] %s@%d:external reset request pending\n");
        }
      }
    }
    return v10;
  }
  uint64_t v5 = *((void *)this + 9);
  int v6 = *(AppleBCMWLANChipManagerPCIe **)(v5 + 3280);
  if (v6)
  {
    BOOL isTrapBeforeFLRSupported = AppleBCMWLANChipManagerPCIe::isTrapBeforeFLRSupported(v6);
    uint64_t v5 = *((void *)this + 9);
    if (!isTrapBeforeFLRSupported && !*(unsigned char *)(v5 + 4552) && !*(unsigned char *)(v5 + 3717))
    {
      AppleBCMWLANBusInterfacePCIe::writeH2DMailbox(this, 0x20000000);
      *(unsigned char *)(*((void *)this + 9) + 4521) = 1;
      int v14 = -500;
      while (((*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 208))(this) & 1) == 0)
      {
        IOSleep(0xAuLL);
        v14 += 10;
        if (!v14)
        {
          if (AppleBCMWLANBusInterface::getLogger(this))
          {
            AppleBCMWLANBusInterface::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              unsigned int v24 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
              CCLogStream::logAlert(v24, "[dk] %s@%d:Mailbox Trap timeout\n", "trapDevice", 19069);
            }
          }
          goto LABEL_42;
        }
      }
      return 0;
    }
  }
  uint64_t v8 = *(AppleBCMWLANChipManagerPCIe **)(v5 + 3280);
  if (v8
    && AppleBCMWLANChipManagerPCIe::isTrapBeforeFLRSupported(v8)
    && (uint64_t v9 = *((void *)this + 9), *(unsigned char *)(v9 + 4523))
    && !*(unsigned char *)(v9 + 3717)
    && !*(unsigned char *)(v9 + 4552))
  {
    if (AppleBCMWLANChipBackplane::getAPBAccessibilityState(*(AppleBCMWLANChipBackplane **)(v9 + 3360)) == 1)
    {
      uint64_t v10 = 3758097084;
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v15 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v15, "[dk] %s@%d:APB is not accessible\n");
        }
      }
    }
    else
    {
      AppleBCMWLANChipBackplane::forcePower(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 1, 0);
      AppleBCMWLANChipBackplane::writePCIeCoreReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x174u, a2);
      if (a2 != -559087613) {
        AppleBCMWLANChipBackplane::forcePower(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0, 0);
      }
      *(unsigned char *)(*((void *)this + 9) + 4521) = 1;
      int v16 = -500;
      do
      {
        char v17 = (*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 208))(this);
        uint64_t v18 = *((void *)this + 9);
        if ((v17 & 1) != 0 || (uint64_t v19 = *(_DWORD **)(v18 + 2832)) != 0 && (*v19 & 0x80000000) != 0)
        {
          IOPCIDevice::ConfigurationWrite32(*(IOPCIDevice **)(v18 + 3248), 0x98uLL, 0);
          return 0;
        }
        IOSleep(0xAuLL);
        v16 += 10;
      }
      while (v16);
      uint64_t v20 = AppleBCMWLANBusInterface::getLogger(this);
      if (a2 == -559087613)
      {
        if (v20)
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            int v25 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v25, "[dk] %s@%d:Host Initiated Trap timeout\n", "trapDevice", 19108);
          }
        }
        AppleBCMWLANChipBackplane::forcePower(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0, 0);
      }
      else
      {
        if (v20)
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v26 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v26, "[dk] %s@%d:Host Initiated Trap timeout, upgrading to a full reset\n", "trapDevice", 19111);
          }
        }
        *(unsigned char *)(*((void *)this + 9) + 4573) = 1;
      }
LABEL_42:
      *(unsigned char *)(*((void *)this + 9) + 4521) = 0;
      return 3758097110;
    }
  }
  else
  {
    uint64_t v10 = 3758097084;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
LABEL_28:
        uint64_t v12 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v12, "[dk] %s@%d:Cannot issue chip trap\n");
      }
    }
  }
  return v10;
}

AppleBCMWLANBusInterface *AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(AppleBCMWLANBusInterface *this, int a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)this + 9);
  if (*(unsigned __int8 *)(v4 + 2869) == a2)
  {
    this = (AppleBCMWLANBusInterface *)AppleBCMWLANBusInterface::getLogger(this);
    if (this)
    {
      AppleBCMWLANBusInterface::getLogger(v3);
      this = (AppleBCMWLANBusInterface *)CCLogStream::shouldLog();
      if (this)
      {
        Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(v3);
        return (AppleBCMWLANBusInterface *)CCLogStream::logAlert(Logger, "[dk] %s@%d:redundant port deep sleep operation: %u\n", "setDeviceInDeepSleep", 15536, a2);
      }
    }
  }
  else
  {
    *(unsigned char *)(v4 + 2869) = a2;
    uint64_t v6 = *((void *)this + 9);
    if (*(unsigned char *)(v6 + 3719))
    {
      uint64_t v7 = *(AppleOLYHALPortInterfacePCIe **)(v6 + 5184);
      return (AppleBCMWLANBusInterface *)AppleOLYHALPortInterfacePCIe::setDeviceInDeepSleepDK(v7, a2, 0);
    }
  }
  return this;
}

uint64_t AppleBCMWLANBusInterfacePCIe::resetMRUFlowIdList(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t v2 = *((void *)this + 9);
  unsigned int v3 = *(unsigned __int16 *)(v2 + 376);
  unsigned int v4 = *(unsigned __int16 *)(v2 + 372);
  if (v3 > v4)
  {
    do
    {
      uint64_t v5 = (unsigned __int16)v4;
      if (*(_WORD *)(*((void *)this + 9) + 4 * (unsigned __int16)v4 + 1866))
      {
        AppleBCMWLANBusInterfacePCIe::invalidateFlowId(this, v4);
        *(_WORD *)(*((void *)this + 9) + 4 * v5 + 1866) &= ~1u;
      }
      LOWORD(v4) = v5 + 1;
    }
    while (v3 > (unsigned __int16)(v5 + 1));
  }
  return AppleBCMWLANBusInterfacePCIe::initMRUFlowIdList((uint64_t)this);
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::halt(AppleBCMWLANBusInterfacePCIe *this, char a2)
{
  return AppleBCMWLANBusInterfacePCIe::halt((AppleBCMWLANBusInterfacePCIe *)((char *)this - 48), a2);
}

uint64_t AppleBCMWLANBusInterfacePCIe::reset(OSObject *this)
{
  uint64_t v2 = *((void *)this[1].ivars + 406);
  if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
  {
    AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      uint64_t v38 = 0;
      ivars = this[1].ivars;
      unint64_t v40 = (const void *)*((void *)ivars + 406);
      int v41 = *((_DWORD *)ivars + 306);
      uint64_t v42 = "UNKNOWN";
      while (kPowerStateMapping[v38] != v41)
      {
        v38 += 4;
        if (v38 == 56) {
          goto LABEL_127;
        }
      }
      uint64_t v42 = *(const char **)&kPowerStateMapping[v38 + 2];
LABEL_127:
      CCLogStream::logAlert(Logger, "[dk] %s@%d:fPcieBus=%p pwr=%s\n", "reset", 6864, v40, v42);
    }
  }
  unsigned int v3 = this[1].ivars;
  if (*((unsigned char *)v3 + 3704))
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v43 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(v43, "[dk] %s@%d:Port enable has failed, bailing from reset\n", "reset", 6867);
      }
    }
    return 0;
  }
  if (*((unsigned char *)v3 + 1304))
  {
    uint64_t v6 = (unsigned __int8 *)v3 + 4554;
    int v7 = v6[1];
    int v8 = *v6;
    if (v7) {
      BOOL v9 = 1;
    }
    else {
      BOOL v9 = v8 == 0;
    }
    if (!v9)
    {
      if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
      {
        AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v49 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          CCLogStream::logAlert(v49, "[dk] %s@%d:halt invoked before S2R without full reset\n", "reset", 6878);
        }
      }
      AppleBCMWLANBusInterfacePCIe::nanoPowerCycleGated(this);
    }
  }
  else if (((unsigned int (*)(OSObject *, uint64_t))this->OSMetaClassBase::__vftable[17].isEqualTo)(this, 1))
  {
    uint64_t v4 = 3758097097;
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v10 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(v10, "[dk] %s@%d:Failed to halt\n");
      }
    }
    return v4;
  }
  *((unsigned char *)this[1].ivars + 4555) = 0;
  int v11 = this[1].ivars;
  if (*((unsigned char *)v11 + 3722) && !*((unsigned char *)v11 + 4554))
  {
    uint64_t v4 = 3758097097;
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v24 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(v24, "[dk] %s@%d:Host powered off, no reset continue. \n");
      }
    }
  }
  else
  {
    *((unsigned char *)v11 + 1305) = 0;
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v44 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(v44, "[dk] %s@%d: Line:%d, setPowerEnable(true)\n", "reset", 6890, 6890);
      }
    }
    int v12 = AppleOLYHALPlatformFunction::setPowerEnableDK(*((AppleOLYHALPlatformFunction **)this[1].ivars + 647), 1, 0);
    if (v12)
    {
      int v13 = v12;
      if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
      {
        AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v46 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          CCLogStream::logAlert(v46, "[dk] %s@%d:Failed to toggle RegON -> ON 0x%08x\n", "reset", 6893, v13);
        }
      }
    }
    int v14 = this[1].ivars;
    uint64_t v15 = *((unsigned int *)v14 + 1158);
    if (v15)
    {
      IOSleep(v15);
      int v14 = this[1].ivars;
    }
    if (*((unsigned char *)v14 + 3722) && !*((unsigned char *)v14 + 4554))
    {
      if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
      {
        AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        if (CCLogStream::shouldLog())
        {
          long long v51 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          CCLogStream::logAlert(v51, "[dk] %s@%d:Host powered off, no reset continue. \n", "reset", 6916);
        }
      }
      uint64_t v4 = 3758097097;
      int v25 = this[1].ivars;
      goto LABEL_86;
    }
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v45 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(v45, "[dk] %s@%d:%d: portStatus = fPCIEPort->enable(true) \n", "reset", 6921, 6921);
      }
    }
    uint64_t v16 = AppleOLYHALPortInterfacePCIe::enableDK();
    uint64_t v4 = v16;
    char v17 = this[1].ivars;
    if (*((unsigned char *)v17 + 3129) && v16)
    {
      if (AppleOLYHALPortInterfacePCIe::isPortControlAMFMManagedDK(*((AppleOLYHALPortInterfacePCIe **)v17 + 648), 0)) {
        goto LABEL_60;
      }
      if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
      {
        AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v52 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          CCLogStream::logAlert(v52, "[dk] %s@%d:Failed to enable port, reset and retrying\n", "reset", 6926);
        }
      }
      int v18 = AppleOLYHALPlatformFunction::setPowerEnableDK(*((AppleOLYHALPlatformFunction **)this[1].ivars + 647), 0, 0);
      if (v18)
      {
        int v19 = v18;
        if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
        {
          AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v55 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
            CCLogStream::logAlert(v55, "[dk] %s@%d:Failed to toggle RegON -> OFF 0x%08x\n", "reset", 6929, v19);
          }
        }
      }
      IOSleep(*((unsigned int *)this[1].ivars + 712));
      if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
      {
        AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v53 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          CCLogStream::logAlert(v53, "[dk] %s@%d:Turning power back on\n", "reset", 6934);
        }
      }
      int v20 = AppleOLYHALPlatformFunction::setPowerEnableDK(*((AppleOLYHALPlatformFunction **)this[1].ivars + 647), 1, 0);
      if (v20)
      {
        int v21 = v20;
        if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
        {
          AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          if (CCLogStream::shouldLog())
          {
            unsigned int v56 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
            CCLogStream::logAlert(v56, "[dk] %s@%d:Failed to toggle RegON -> ON 0x%08x\n", "reset", 6937, v21);
          }
        }
      }
      IOSleep(*((unsigned int *)this[1].ivars + 1158));
      if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
      {
        AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v54 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          CCLogStream::logAlert(v54, "[dk] %s@%d:Enabling port\n", "reset", 6941);
        }
      }
      uint64_t v4 = AppleOLYHALPortInterfacePCIe::enableDK();
    }
    if (v4)
    {
LABEL_60:
      if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
      {
        AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v47 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          uint64_t v48 = (const char *)((uint64_t (*)(OSObject *, uint64_t))this->OSMetaClassBase::__vftable[1].free)(this, v4);
          CCLogStream::logAlert(v47, "[dk] %s@%d:Failed to enable port (%s)\n", "reset", 6947, v48);
        }
      }
      int v22 = AppleOLYHALPlatformFunction::setPowerEnableDK(*((AppleOLYHALPlatformFunction **)this[1].ivars + 647), 0, 0);
      if (v22)
      {
        int v23 = v22;
        if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
        {
          AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v50 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
            CCLogStream::logAlert(v50, "[dk] %s@%d:Failed to toggle RegON -> OFF 0x%08x\n", "reset", 6951, v23);
          }
        }
      }
      *((unsigned char *)this[1].ivars + 3704) = 1;
      AppleBCMWLANBusInterfacePCIe::destroyFirmwareIPCTrackers(this);
      AppleBCMWLANBusInterfacePCIe::destroyFirmwarePCIeIPC((AppleBCMWLANBusInterfacePCIe *)this);
      (*(void (**)(void, uint64_t (*)(AppleBCMWLANBusInterfacePCIe *, IOPCIDevice *, char), void, uint64_t, void, void))(**((void **)this[1].ivars + 434) + 56))(*((void *)this[1].ivars + 434), AppleBCMWLANBusInterfacePCIe::detachPCIeBusGated, *((void *)this[1].ivars + 406), 1, 0, 0);
      return v4;
    }
    int v25 = this[1].ivars;
    if (*((unsigned char *)v25 + 4616))
    {
      clock_interval_to_deadline();
      (*(void (**)(void, uint64_t, unint64_t))(**((void **)this[1].ivars + 434) + 80))(*((void *)this[1].ivars + 434), (uint64_t)this[1].ivars + 1304, 0xAAAAAAAAAAAAAAAALL);
      *((unsigned char *)this[1].ivars + 4616) = 0;
      int v25 = this[1].ivars;
    }
    if (*((unsigned char *)v25 + 4552))
    {
      (*(void (**)(void))(**((void **)v25 + 434) + 80))(*((void *)v25 + 434));
      int v25 = this[1].ivars;
    }
    uint64_t v26 = (IOPCIDevice *)*((void *)v25 + 406);
    if (!v26)
    {
      uint64_t v4 = 3758097097;
      goto LABEL_86;
    }
    if (*((unsigned char *)v25 + 1304) && *((unsigned char *)v25 + 3872))
    {
      if (*((unsigned char *)v25 + 3873))
      {
        uint64_t v27 = IOPCIDevice::SaveDeviceState(v26, 0, 0);
        *((unsigned char *)this[1].ivars + 3873) = 0;
        int v25 = this[1].ivars;
        if (v27)
        {
          uint64_t v4 = v27;
LABEL_86:
          *((unsigned char *)v25 + 1304) = 0;
          return v4;
        }
      }
      if (*((unsigned char *)v25 + 4554) || *((unsigned char *)v25 + 4576))
      {
        if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
        {
          AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v59 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
            CCLogStream::logAlert(v59, "[dk] %s@%d:Skip device state restore\n", "reset", 7000);
          }
        }
        *((unsigned char *)this[1].ivars + 4554) = 0;
      }
      else
      {
        IOPCIDevice::RestoreDeviceState(*((IOPCIDevice **)v25 + 406), 0, 0);
      }
    }
    *((unsigned char *)this[1].ivars + 4576) = 0;
    if (v2 != *((void *)this[1].ivars + 406)) {
      goto LABEL_94;
    }
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v58 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(v58, "[dk] %s@%d:detach/attach PCIe\n", "reset", 7014);
      }
    }
    (*(void (**)(void, uint64_t (*)(AppleBCMWLANBusInterfacePCIe *, IOPCIDevice *, char), void, void, void, void))(**((void **)this[1].ivars + 434) + 56))(*((void *)this[1].ivars + 434), AppleBCMWLANBusInterfacePCIe::detachPCIeBusGated, *((void *)this[1].ivars + 406), 0, 0, 0);
    int v29 = (*(uint64_t (**)(void, uint64_t (*)(AppleBCMWLANBusInterfacePCIe *, IOPCIDevice *), uint64_t, void, void, void))(**((void **)this[1].ivars + 434) + 56))(*((void *)this[1].ivars + 434), AppleBCMWLANBusInterfacePCIe::attachPCIeBusGated, v2, 0, 0, 0);
    if (v29)
    {
      int v30 = v29;
      if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
      {
        AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v60 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          CCLogStream::logAlert(v60, "[dk] %s@%d:attach failed. attachStatus = 0x%x\n", "reset", 7019, v30);
        }
      }
      uint64_t v31 = this[1].ivars;
      if (*((void *)v31 + 406) && *((unsigned char *)v31 + 4580))
      {
        AppleBCMWLANBusInterfacePCIe::modifyASPM((AppleBCMWLANBusInterface *)this, 3u);
        uint64_t v31 = this[1].ivars;
      }
      (*(void (**)(void, uint64_t (*)(AppleBCMWLANBusInterfacePCIe *, IOPCIDevice *, char), uint64_t, uint64_t, void, void))(**((void **)v31 + 434) + 56))(*((void *)v31 + 434), AppleBCMWLANBusInterfacePCIe::detachPCIeBusGated, v2, 1, 0, 0);
      if (v2)
      {
        uint64_t v32 = this[1].ivars;
        if (v30 != -536870208 || !*((unsigned char *)v32 + 3706))
        {
          *((void *)v32 + 406) = v2;
          (*(void (**)(void))(**((void **)this[1].ivars + 406) + 8))(*((void *)this[1].ivars + 406));
        }
      }
      char v28 = 0;
    }
    else
    {
LABEL_94:
      char v28 = 1;
    }
    *((unsigned char *)this[1].ivars + 1304) = 0;
    *((unsigned char *)this[1].ivars + 4521) = 0;
    uint64_t v33 = this[1].ivars;
    if (*((unsigned char *)v33 + 5192))
    {
      if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
      {
        AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v57 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          CCLogStream::logAlert(v57, "[dk] %s@%d:Chip has been reset after unsuccessful FW setup. Deregistering from OLYHAL\n", "reset", 7044);
        }
      }
      ((void (*)(OSObject *, void))this->OSMetaClassBase::__vftable[17].isEqualTo)(this, 0);
      (*(void (**)(void, uint64_t (*)(AppleBCMWLANBusInterfacePCIe *, IOPCIDevice *, char), void, uint64_t, void, void))(**((void **)this[1].ivars + 434) + 56))(*((void *)this[1].ivars + 434), AppleBCMWLANBusInterfacePCIe::detachPCIeBusGated, *((void *)this[1].ivars + 406), 1, 0, 0);
      uint64_t v34 = this[1].ivars;
      uint64_t v35 = *((void *)v34 + 647);
      if (v35)
      {
        (*(void (**)(uint64_t))(*(void *)v35 + 16))(v35);
        *((void *)this[1].ivars + 647) = 0;
        uint64_t v34 = this[1].ivars;
      }
      uint64_t v36 = *((void *)v34 + 648);
      if (v36)
      {
        (*(void (**)(uint64_t))(*(void *)v36 + 16))(v36);
        uint64_t v4 = 0;
        *((void *)this[1].ivars + 648) = 0;
        return v4;
      }
      return 0;
    }
    if ((v28 & (*((void *)v33 + 406) != 0)) != 0) {
      return 0;
    }
    else {
      return 3758097097;
    }
  }
  return v4;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::reset(AppleBCMWLANBusInterfacePCIe *this)
{
  return AppleBCMWLANBusInterfacePCIe::reset((OSObject *)((char *)this - 48));
}

AppleBCMWLANChipManagerPCIe *AppleBCMWLANBusInterfacePCIe::allocChipImage(AppleBCMWLANBusInterfacePCIe *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = *(AppleBCMWLANChipManagerPCIe **)(*((void *)this + 9) + 3280);
  if (result)
  {
    uint64_t v15 = a3 + 16;
    unint64_t RAMSize = AppleBCMWLANChipManagerPCIe::getRAMSize(result);
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logNoticeIf(Logger, 0x80uLL, "[dk] %s@%d: fw size %lu, nv size %lu, adjust nv size %lu, signature size %lu platcfg size %lu\n", "allocChipImage", 7172, a2, a3, v15, a6, a7);
      }
    }
    v21[0] = 0;
    v21[1] = a2;
    unint64_t v22 = (a2 + 127) & 0xFFFFFFFFFFFFFF80;
    uint64_t v23 = 1024;
    unint64_t v24 = v22 + 1024;
    uint64_t v25 = v15;
    unint64_t v17 = v22 + 1024 + v15;
    if ((v15 & 0x7F) != 0) {
      unint64_t v17 = (v17 & 0xFFFFFFFFFFFFFF80) + 128;
    }
    unint64_t v26 = v17;
    uint64_t v27 = a6;
    unint64_t v30 = v17 + a6;
    uint64_t v31 = a4;
    uint64_t v32 = v17 + a6 + a4;
    uint64_t v33 = a5;
    uint64_t v28 = v32 + a5;
    uint64_t v29 = a7;
    if (v17 + a6 <= RAMSize)
    {
      uint64_t v18 = AppleBCMWLANBusInterface::getLogger(this);
      return (AppleBCMWLANChipManagerPCIe *)AppleBCMWLANChipImage::withRange(v32 + a5 + a7, v21, v18, 128);
    }
    else
    {
      uint64_t result = (AppleBCMWLANChipManagerPCIe *)AppleBCMWLANBusInterface::getLogger(this);
      if (result)
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          int v20 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v20, "[dk] %s@%d: Image too large: fw size %llu, adjust nv size %llu, signature size %llu, maxImageSize %llu\n", "allocChipImage", 7201, a2, v15, a6, RAMSize);
        }
        return 0;
      }
    }
  }
  return result;
}

AppleBCMWLANChipManagerPCIe *non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::allocChipImage(AppleBCMWLANBusInterfacePCIe *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return AppleBCMWLANBusInterfacePCIe::allocChipImage((AppleBCMWLANBusInterfacePCIe *)((char *)this - 48), a2, a3, a4, a5, a6, a7);
}

uint64_t AppleBCMWLANBusInterfacePCIe::generateChipImage(AppleBCMWLANBusInterfacePCIe *this, AppleBCMWLANChipImage *a2)
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::generateChipImage(AppleBCMWLANBusInterfacePCIe *this, AppleBCMWLANChipImage *a2)
{
  return 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::completeChipImage(AppleBCMWLANBusInterfacePCIe *this, AppleBCMWLANChipImage *a2)
{
  return (*(uint64_t (**)(AppleBCMWLANChipImage *, AppleBCMWLANBusInterfacePCIe *, uint64_t (*)(), void))(*(void *)a2 + 144))(a2, this, AppleBCMWLANBusInterfacePCIe::editImage, 0);
}

uint64_t AppleBCMWLANBusInterfacePCIe::editImage()
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::completeChipImage(AppleBCMWLANBusInterfacePCIe *this, AppleBCMWLANChipImage *a2)
{
  return (*(uint64_t (**)(AppleBCMWLANChipImage *, char *, uint64_t (*)(), void))(*(void *)a2 + 144))(a2, (char *)this - 48, AppleBCMWLANBusInterfacePCIe::editImage, 0);
}

uint64_t AppleBCMWLANBusInterfacePCIe::deassertDeviceWake(AppleBCMWLANBusInterfacePCIe *this)
{
  if (AppleOLYHALPortInterfacePCIe::deviceWakeGPIOAvailableDK(*(AppleOLYHALPortInterfacePCIe **)(*((void *)this + 9) + 5184), 0))
  {
    *(unsigned char *)(*((void *)this + 9) + 1232) = 0;
    uint64_t v2 = *((void *)this + 9);
    if (*(_DWORD *)(v2 + 2844) != 2)
    {
      *(unsigned char *)(v2 + 1232) = 0;
      AppleOLYHALPortInterfacePCIe::setDeviceWakeDK(*(AppleOLYHALPortInterfacePCIe **)(*((void *)this + 9) + 5184), 0, 0);
    }
  }
  uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
  if (result)
  {
    AppleBCMWLANBusInterface::getLogger(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      return CCLogStream::logAlert(Logger, "[dk] %s@%d:deassertDeviceWake failed", "deassertDeviceWake", 7284);
    }
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::dumpRegistersFWDebug(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t v2 = IOMallocZeroData();
  if (v2)
  {
    uint64_t v3 = v2;
    if (AppleBCMWLANBusInterfacePCIe::isBusAccessible(this, 1)
      && (AppleBCMWLANBusInterfacePCIe::isAPBAccessible(this, 1, 0) & 1) != 0)
    {
      uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 3280) + 160))(*(void *)(*((void *)this + 9) + 3280));
      unint64_t v5 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 3280) + 168))(*(void *)(*((void *)this + 9) + 3280));
      if (!AppleBCMWLANChipBackplane::dumpARMCoreEnumerationRegistersFWDebug(*(void *)(*((void *)this + 9) + 3360), (void *)v3, 0x4000uLL, v4, v5))
      {
        *(unsigned char *)(v3 + 0x3FFF) = 0;
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(Logger, "[dk] %s@%d:%s", "dumpRegistersFWDebug", 7311, (const char *)v3);
          }
        }
      }
      uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 3280) + 176))(*(void *)(*((void *)this + 9) + 3280));
      unint64_t v7 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 3280) + 184))(*(void *)(*((void *)this + 9) + 3280));
      if (!AppleBCMWLANChipBackplane::dumpCommonCoreEnumerationRegistersFWDebug(*(void *)(*((void *)this + 9) + 3360), (void *)v3, 0x4000uLL, v6, v7))
      {
        *(unsigned char *)(v3 + 0x3FFF) = 0;
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            unint64_t v17 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v17, "[dk] %s@%d:%s", "dumpRegistersFWDebug", 7319, (const char *)v3);
          }
        }
      }
      uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 3280) + 192))(*(void *)(*((void *)this + 9) + 3280));
      unint64_t v9 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 3280) + 200))(*(void *)(*((void *)this + 9) + 3280));
      if (!AppleBCMWLANChipBackplane::dumpPMUCoreEnumerationRegistersFWDebug(*(void *)(*((void *)this + 9) + 3360), (void *)v3, 0x4000uLL, v8, v9))
      {
        *(unsigned char *)(v3 + 0x3FFF) = 0;
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v18 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v18, "[dk] %s@%d:%s", "dumpRegistersFWDebug", 7327, (const char *)v3);
          }
        }
      }
      uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 3280) + 208))(*(void *)(*((void *)this + 9) + 3280));
      unint64_t v11 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 3280) + 216))(*(void *)(*((void *)this + 9) + 3280));
      uint64_t v12 = AppleBCMWLANChipBackplane::dumpPCIEFunc0CoreEnumerationRegistersFWDebug(*(void *)(*((void *)this + 9) + 3360), (void *)v3, 0x4000uLL, v10, v11);
      if (!v12)
      {
        *(unsigned char *)(v3 + 0x3FFF) = 0;
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            int v19 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v19, "[dk] %s@%d:%s", "dumpRegistersFWDebug", 7335, (const char *)v3);
          }
        }
        uint64_t v12 = 0;
      }
    }
    else
    {
      uint64_t v12 = 3758097097;
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          int v14 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v14, "[dk] %s@%d:Either bus or backplane is not accessible , so skipping register dump\n", "dumpRegistersFWDebug", 7298);
          uint64_t v12 = 3758097097;
        }
      }
    }
    IOFreeData();
  }
  else
  {
    uint64_t v12 = 3758097085;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v15 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v15, "[dk] %s@%d: Failed to allocate buffer for register dump\n", "dumpRegistersFWDebug", 7294);
      }
    }
  }
  return v12;
}

BOOL AppleBCMWLANBusInterfacePCIe::isBusAccessible(AppleBCMWLANBusInterfacePCIe *this, int a2)
{
  (*(void (**)(AppleBCMWLANBusInterfacePCIe *, const char *, uint64_t))(*(void *)this + 1208))(this, "isBusAccessible", 16777);
  uint64_t v4 = *((void *)this + 9);
  if (*(unsigned char *)(v4 + 1304)) {
    return 0;
  }
  uint64_t v6 = *(IOPCIDevice **)(v4 + 3248);
  if (!v6 || (*(unsigned char *)(v4 + 4488) & 1) == 0) {
    return 0;
  }
  int v7 = *(unsigned __int8 *)(v4 + 3722);
  BOOL result = v7 == 0;
  if (v7) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = a2 == 0;
  }
  if (!v8)
  {
    uint16_t readData = -21846;
    IOPCIDevice::ConfigurationRead16(v6, 2uLL, &readData);
    if (chipNumberFromDeviceID(readData)) {
      return 1;
    }
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:Unexpected device ID (0x%x) \n", "isBusAccessible", 16793, readData);
      }
    }
    return 0;
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::loadChipImage(AppleBCMWLANBusInterfacePCIe *this, const AppleBCMWLANChipImage *a2)
{
  int v74 = 0;
  (*(void (**)(AppleBCMWLANBusInterfacePCIe *, const char *, uint64_t))(*(void *)this + 1208))(this, "loadChipImage", 7346);
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:Loading loadChipImage\n", "loadChipImage", 7348);
    }
  }
  AppleBCMWLANBusInterfacePCIe::disableRingEventSources(this);
  if (*(unsigned char *)(*((void *)this + 9) + 3722))
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v45 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v45, "[dk] %s@%d:WARNING: ivars->fInD3 set while loading FW.\n", "loadChipImage", 7356);
      }
    }
  }
  AppleBCMWLANBusInterfacePCIe::changeDeepSleepStateSetClear((uint64_t)this, v4, 1, 255);
  *(unsigned char *)(*((void *)this + 9) + 3723) = 1;
  uint64_t v5 = (*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 960))(this);
  if (v5)
  {
    uint64_t v6 = v5;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        int v7 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:Unable to reset chip. Bailing\n");
      }
    }
    return v6;
  }
  uint64_t v8 = *((void *)this + 9);
  if (!*(void *)(v8 + 3360))
  {
    uint64_t v6 = 3758097097;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v9 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v9, "[dk] %s@%d:No backplane object!!\n");
      }
    }
    return v6;
  }
  if (*(unsigned char *)(v8 + 1304) || !*(void *)(v8 + 3248))
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v49 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v49, "[dk] %s@%d:Bus is not accessable\n", "loadChipImage", 7380);
      }
    }
    uint64_t v6 = 3758097097;
    (*(void (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 1016))(this);
    return v6;
  }
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v53 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logEmergency(v53, "[dk] %s@%d:Begin chip boot", "loadChipImage", 7385);
    }
  }
  AppleBCMWLANChipBackplane::forcePower(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 1, 0);
  uint64_t v10 = AppleBCMWLANBusInterfacePCIe::prepareHardware(this);
  uint64_t v11 = *((void *)this + 9);
  if (v10)
  {
    uint64_t v6 = v10;
LABEL_47:
    AppleBCMWLANChipBackplane::forcePower(*(AppleBCMWLANChipBackplane **)(v11 + 3360), 0, 0);
    goto LABEL_48;
  }
  AppleBCMWLANChipConfigSpace::writeReg32(*(AppleBCMWLANChipConfigSpace **)(v11 + 3352), 0x110u, 0x31C1u);
  uint64_t v12 = *((void *)this + 9);
  if (*(_DWORD *)(v12 + 3312) != 4399)
  {
    unsigned int v73 = 0;
    uint64_t v13 = AppleBCMWLANChipBackplane::readARMMasterWrapperReg32(*(AppleBCMWLANChipBackplane **)(v12 + 3360), 0x800u, &v73);
    if (v13) {
      goto LABEL_45;
    }
    if ((v73 & 1) == 0)
    {
      uint64_t v17 = AppleBCMWLANChipBackplane::waitARMMasterWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x804u, 0, -1, 1000);
      if (v17)
      {
        uint64_t v6 = v17;
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v18 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logCrit(v18, "[dk] %s@%d:ARM failed to get ready\n");
          }
        }
        goto LABEL_46;
      }
      AppleBCMWLANChipBackplane::writeARMMasterWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x800u, 1u);
      uint64_t v35 = AppleBCMWLANChipBackplane::waitARMMasterWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x804u, 0, 1, 1000);
      if (v35)
      {
        uint64_t v6 = v35;
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v36 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logCrit(v36, "[dk] %s@%d:ARM failed to reset\n");
          }
        }
        goto LABEL_46;
      }
    }
    AppleBCMWLANChipBackplane::writeARMMasterWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x408u, 0x23u);
    AppleBCMWLANChipBackplane::writeARMMasterWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x800u, 0);
    AppleBCMWLANChipBackplane::writeARMMasterWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x408u, 0x21u);
    AppleBCMWLANChipBackplane::sysmemReset(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 1u);
    AppleBCMWLANChipBackplane::sysmemReset(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0);
    uint64_t v12 = *((void *)this + 9);
  }
  uint64_t v13 = (*(uint64_t (**)(const AppleBCMWLANChipImage *, AppleBCMWLANBusInterfacePCIe *, void, void))(*(void *)a2 + 152))(a2, this, AppleBCMWLANBusInterfacePCIe::loadImage, *(void *)(v12 + 3368));
  if (v13)
  {
LABEL_45:
    uint64_t v6 = v13;
LABEL_46:
    uint64_t v11 = *((void *)this + 9);
    goto LABEL_47;
  }
  if (IOParseBootArgNumber("wlan.debug.dump-socram.load", &v74, 4) && v74)
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v54 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v54, "[dk] %s@%d:Dump SOCRAM - On '%s'\n", "loadChipImage", 7492, "load");
      }
    }
    AppleBCMWLANBusInterfacePCIe::dumpSocRAMToRegistry(this, "load");
  }
  if (*(_DWORD *)(*((void *)this + 9) + 3312) == 4399)
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v55 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v55, "[dk] %s@%d:Enabling BusLead\n", "loadChipImage", 7497);
      }
    }
    int v14 = AppleBCMWLANChipConfigSpace::modifyReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), 4u, 0, 4, 0);
    BOOL v15 = v14 != 0;
    if (v14)
    {
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v56 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          uint64_t v57 = (const char *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *, BOOL))(*(void *)this + 104))(this, v15);
          CCLogStream::logAlert(v56, "[dk] %s@%d:Failed to enable BusLead %s\n", "loadChipImage", 7501, v57);
        }
      }
LABEL_43:
      AppleBCMWLANChipBackplane::forcePower(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0, 0);
      return 1;
    }
    *(unsigned char *)(*((void *)this + 9) + 1307) = 1;
  }
  AppleBCMWLANBusInterfacePCIe::retainCTS(this, 7509, 0);
  BOOL isBootMSISupported = AppleBCMWLANChipManagerPCIe::isBootMSISupported(*(AppleBCMWLANChipManagerPCIe **)(*((void *)this + 9) + 3280));
  uint64_t v20 = *((void *)this + 9);
  if (isBootMSISupported && !*(unsigned char *)(v20 + 3708))
  {
    uint64_t v37 = AppleBCMWLANBusInterfacePCIe::setupBootMSI(this);
    uint64_t v38 = *((void *)this + 9);
    if (v37)
    {
      uint64_t v6 = v37;
      AppleBCMWLANChipBackplane::forcePower(*(AppleBCMWLANChipBackplane **)(v38 + 3360), 0, 0);
      uint64_t v33 = this;
      __int16 v34 = 7515;
LABEL_122:
      AppleBCMWLANBusInterfacePCIe::releaseCTS(v33, v34);
LABEL_48:
      if (*(unsigned char *)(*((void *)this + 9) + 4580)) {
        AppleBCMWLANBusInterfacePCIe::modifyASPM(this, 3u);
      }
      return v6;
    }
    *(unsigned char *)(v38 + 4801) = 1;
    uint64_t v44 = *(IODispatchQueue **)(*((void *)this + 9) + 3496);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = ___ZN28AppleBCMWLANBusInterfacePCIe13loadChipImageEPK21AppleBCMWLANChipImage_block_invoke;
    block[3] = &__block_descriptor_tmp_387;
    block[4] = this;
    IODispatchQueue::DispatchAsync(v44, block);
    uint64_t v20 = *((void *)this + 9);
  }
  int v21 = *(AppleBCMWLANChipBackplane **)(v20 + 3360);
  if (*(_DWORD *)(v20 + 3312) == 4399)
  {
    AppleBCMWLANChipBackplane::writeOOBRouterWrapperReg32(v21, 0x248u, 3u);
    AppleBCMWLANChipBackplane::writeOOBRouterWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x248u, 1u);
  }
  else
  {
    AppleBCMWLANChipBackplane::writeARMMasterWrapperReg32(v21, 0x408u, 3u);
    AppleBCMWLANChipBackplane::writeARMMasterWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x800u, 0);
    AppleBCMWLANChipBackplane::writeARMMasterWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x408u, 1u);
  }
  __dmb(0xBu);
  unsigned int v73 = -1;
  unsigned int v22 = AppleBCMWLANChipMemory::unwrapRAMOffset(*(AppleBCMWLANChipMemory **)(*((void *)this + 9) + 3368), 4294967292);
  *(_DWORD *)(*((void *)this + 9) + 3732) = v22;
  if (AppleBCMWLANChipManagerPCIe::isBootMSISupported(*(AppleBCMWLANChipManagerPCIe **)(*((void *)this + 9) + 3280)))
  {
    uint64_t v23 = *((void *)this + 9);
    if (!*(unsigned char *)(v23 + 3708))
    {
      uint64_t v24 = *(void *)(v23 + 3488);
      v71[0] = _NSConcreteStackBlock;
      v71[1] = 0x40000000;
      v71[2] = ___ZN28AppleBCMWLANBusInterfacePCIe13loadChipImageEPK21AppleBCMWLANChipImage_block_invoke_2;
      void v71[3] = &__block_descriptor_tmp_389;
      v71[4] = this;
      (*(void (**)(uint64_t, void *))(*(void *)v24 + 72))(v24, v71);
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v58 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          if (*(unsigned char *)(*((void *)this + 9) + 4801)) {
            uint64_t v59 = "Timed out waiting for Boot MSI";
          }
          else {
            uint64_t v59 = "Boot MSI Received";
          }
          CCLogStream::logAlert(v58, "[dk] %s@%d:%s\n", "loadChipImage", 7567, v59);
        }
      }
      AppleBCMWLANChipMemory::readRAM32(*(AppleBCMWLANChipMemory **)(*((void *)this + 9) + 3368), v22, &v73);
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v60 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logNotice(v60, "[dk] %s@%d:READ after: nvramPointerOffset[0x%08x] 0x%X\n", "loadChipImage", 7569, v22, v73);
        }
      }
      *(unsigned char *)(*((void *)this + 9) + 4801) = v73 == *(_DWORD *)(*((void *)this + 9) + 2852);
    }
  }
  BOOL v25 = AppleBCMWLANChipManagerPCIe::isBootMSISupported(*(AppleBCMWLANChipManagerPCIe **)(*((void *)this + 9) + 3280));
  uint64_t v26 = *((void *)this + 9);
  if (v25 && !*(unsigned char *)(v26 + 4801) && !*(unsigned char *)(v26 + 3708)) {
    goto LABEL_76;
  }
  unsigned int PCIeBootMinPollingDelay = AppleBCMWLANChipManagerPCIe::getPCIeBootMinPollingDelay(*(AppleBCMWLANChipManagerPCIe **)(v26 + 3280));
  unsigned int PCIeBootPollingInterval = AppleBCMWLANChipManagerPCIe::getPCIeBootPollingInterval(*(AppleBCMWLANChipManagerPCIe **)(*((void *)this + 9) + 3280));
  uint64_t v29 = (unsigned char *)(*((void *)this + 9) + 4801);
  if (*v29)
  {
    *uint64_t v29 = 0;
    unsigned int v30 = 4000;
    goto LABEL_106;
  }
  IOSleep(PCIeBootMinPollingDelay);
  if (PCIeBootMinPollingDelay != 5000)
  {
    unsigned int v30 = 5000 - PCIeBootMinPollingDelay;
LABEL_106:
    unsigned int v40 = 0;
    do
    {
      if (v73 != -1 && v73 != *(_DWORD *)(*((void *)this + 9) + 2852)) {
        break;
      }
      IOSleep(PCIeBootPollingInterval);
      AppleBCMWLANChipMemory::readRAM32(*(AppleBCMWLANChipMemory **)(*((void *)this + 9) + 3368), v22, &v73);
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v42 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v42, "[dk] %s@%d:READ after: nvramPointerOffset[0x%08x] 0x%X\n", "loadChipImage", 7612, v22, v73);
        }
      }
      v40 += PCIeBootPollingInterval;
    }
    while (v40 < v30);
  }
LABEL_76:
  uint64_t v6 = 3825174283;
  uint64_t v31 = *((void *)this + 9);
  if (*(unsigned char *)(v31 + 4801)) {
    return v6;
  }
  unsigned int v32 = v73;
  *(_DWORD *)(v31 + 3736) = v73;
  if (v32 == *(_DWORD *)(*((void *)this + 9) + 2852))
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v61 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v61, "[dk] %s@%d:last 4 bytes in WiFi chip RAM does not change after init!\n", "loadChipImage", 7626);
      }
    }
    AppleBCMWLANBusInterfacePCIe::dumpRegistersFWDebug(this);
    AppleBCMWLANBusInterfacePCIe::dumpSocRAMToRegistry(this, 0);
    if ((*(unsigned int (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 1064))(this)) {
      AppleBCMWLANBusInterfacePCIe::printVStatus(this);
    }
    AppleBCMWLANChipBackplane::forcePower(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0, 0);
    uint64_t v33 = this;
    __int16 v34 = 7638;
    goto LABEL_122;
  }
  if (v32 == -1)
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v64 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v64, "[dk] %s@%d:last 4 bytes in WiFi chip RAM is 0xffffffff\n", "loadChipImage", 7645);
      }
    }
    AppleBCMWLANBusInterfacePCIe::dumpSocRAMToRegistry(this, 0);
    AppleBCMWLANChipBackplane::forcePower(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0, 0);
    uint64_t v33 = this;
    __int16 v34 = 7649;
    goto LABEL_122;
  }
  if (IOParseBootArgNumber("wlan.debug.dump-socram.boot", &v74, 4) && v74)
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v65 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v65, "[dk] %s@%d:Dump SOCRAM - On '%s'\n", "loadChipImage", 7659, "boot");
      }
    }
    AppleBCMWLANBusInterfacePCIe::dumpSocRAMToRegistry(this, 0);
  }
  if (*(unsigned char *)(*((void *)this + 9) + 4580)) {
    AppleBCMWLANBusInterfacePCIe::modifyASPM(this, 3u);
  }
  AppleBCMWLANBusInterfacePCIe::destroyFirmwareIPCTrackers((OSObject *)this);
  AppleBCMWLANBusInterfacePCIe::destroyFirmwarePCIeIPC(this);
  uint64_t FirmwarePCIeIPC = AppleBCMWLANBusInterfacePCIe::createFirmwarePCIeIPC((OSObject *)this, *(AppleBCMWLANChipMemory **)(*((void *)this + 9) + 3368));
  if (FirmwarePCIeIPC)
  {
    uint64_t v6 = FirmwarePCIeIPC;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        int v62 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        uint64_t v63 = (const char *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *, uint64_t))(*(void *)this + 104))(this, v6);
        CCLogStream::logAlert(v62, "[dk] %s@%d:Failed to create firmware IPC, %s\n", "loadChipImage", 7678, v63);
      }
    }
    AppleBCMWLANBusInterfacePCIe::releaseCTS(this, 7679);
    AppleBCMWLANChipBackplane::forcePower(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0, 0);
  }
  else
  {
    uint64_t v46 = *((void *)this + 9);
    if (*(_DWORD *)(v46 + 3312) != 4399)
    {
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          long long v68 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v68, "[dk] %s@%d:Enabling BusLead\n", "loadChipImage", 7687);
        }
      }
      int v47 = AppleBCMWLANChipConfigSpace::modifyReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), 4u, 0, 4, 0);
      BOOL v48 = v47 != 0;
      if (v47)
      {
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            OSStringPtr v69 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            char v70 = (const char *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *, BOOL))(*(void *)this
                                                                                                  + 104))(this, v48);
            CCLogStream::logAlert(v69, "[dk] %s@%d:Failed to enable BusLead %s\n", "loadChipImage", 7691, v70);
          }
        }
        AppleBCMWLANBusInterfacePCIe::releaseCTS(this, 7692);
        goto LABEL_43;
      }
      *(unsigned char *)(*((void *)this + 9) + 1307) = 1;
      uint64_t v46 = *((void *)this + 9);
    }
    AppleBCMWLANChipBackplane::forcePower(*(AppleBCMWLANChipBackplane **)(v46 + 3360), 0, 0);
    AppleBCMWLANBusInterfacePCIe::enableRingEventSources(this);
    AppleBCMWLANBusInterfacePCIe::releaseCTS(this, 7704);
    uint64_t v50 = *((void *)this + 9);
    if (*(_DWORD *)(v50 + 2844) == 2
      && AppleOLYHALPortInterfacePCIe::deviceWakeGPIOAvailableDK(*(AppleOLYHALPortInterfacePCIe **)(v50 + 5184), 0))
    {
      AppleBCMWLANBusInterfacePCIe::deassertDeviceWake(this);
    }
    uint64_t v51 = *((void *)this + 9);
    uint64_t v52 = *(void *)(v51 + 3368);
    if (v52)
    {
      (*(void (**)(uint64_t))(*(void *)v52 + 16))(v52);
      *(void *)(*((void *)this + 9) + 3368) = 0;
      uint64_t v51 = *((void *)this + 9);
    }
    *(void *)(v51 + 3392) = 0;
    *(_OWORD *)(v51 + 3376) = 0u;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v66 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v66, "[dk] %s@%d:BusLead enabled; ring doorbell immediately\n", "loadChipImage", 7715);
      }
    }
    AppleBCMWLANPCIeDoorbell::ringNow(*(AppleBCMWLANPCIeDoorbell **)(*((void *)this + 9) + 3640));
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v67 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v67, "[dk] %s@%d:loadChipImage complete\n", "loadChipImage", 7718);
      }
    }
    return 0;
  }
  return v6;
}

uint64_t AppleBCMWLANBusInterfacePCIe::loadImage(AppleBCMWLANBusInterface *this, const IO80211Buffer *a2, uint64_t a3, AppleBCMWLANChipMemory *a4)
{
  if (a4)
  {
    uint64_t v8 = *(void *)(a3 + 40) + *(void *)(a3 + 24);
    int v9 = *(_DWORD *)(a3 + 40) + *(_DWORD *)(a3 + 24) + 4;
    unsigned int v10 = (*(_DWORD *)(a3 + 8) + 7) & 0xFFFFFFF8;
    if ((v9 & 7) != 0) {
      unsigned int v11 = v8 - (v9 & 7) + 12;
    }
    else {
      unsigned int v11 = *(_DWORD *)(a3 + 40) + *(_DWORD *)(a3 + 24) + 4;
    }
    unsigned int v12 = *(_DWORD *)(a3 + 16);
    unsigned int v13 = AppleBCMWLANChipMemory::unwrapRAMOffset(a4, -v11);
    unsigned int v14 = AppleBCMWLANChipMemory::unwrapRAMOffset(a4, 4294967292);
    *(_DWORD *)(*((void *)this + 9) + 2852) = (unsigned __int16)((v11 >> 2) - 1) - (v11 >> 2 << 16);
    unsigned int v62 = v13;
    unsigned int v15 = v13 - v10;
    unsigned int v16 = v13 - v10 - 264;
    if (v15 <= 0x108)
    {
      uint64_t v17 = 3758097105;
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(Logger, "[dk] %s@%d:Not enough free RAM space for randomized bytes\n");
        }
      }
      return v17;
    }
    unsigned int v20 = v14;
    unsigned int v61 = v11;
    uint64_t v21 = IOMallocZeroData();
    if (v21)
    {
      uint64_t v22 = v21;
      read_random();
      *(void *)(v22 + 256) = 0xFEEDC0DE00000100;
      unsigned int v59 = v20;
      unsigned int v60 = a2;
      unsigned int v58 = v12;
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v56 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          uint64_t v37 = " pad |";
          uint64_t v39 = *(void *)a3;
          uint64_t v38 = *(void *)(a3 + 8);
          int v53 = v38;
          if (!*(void *)a3) {
            uint64_t v37 = (const char *)&unk_10029A2CA;
          }
          uint64_t v54 = v37;
          int v52 = v38 + v39;
          uint64_t v51 = *(void *)(a3 + 16);
          uint64_t v50 = *(void *)(a3 + 24);
          uint64_t v41 = *(void *)(a3 + 32);
          uint64_t v40 = *(void *)(a3 + 40);
          int v49 = v40 + v41;
          int Length = IO80211Buffer::getLength(v60);
          int v48 = v40;
          a2 = v60;
          CCLogStream::logAlert(v56, "[dk] %s@%d:Image: 0 [%s %u< FIRMWARE{%u} >%u |  pad  | %u< NVRAM_PROVISIONED{%u} >%u | %u< NVRAM{%u} >%u | pad ] %u\n", "loadImage", 8164, v54, v39, v53, v52, v51, v50, v50 + v51, v41, v48, v49, Length);
        }
      }
      unsigned int v23 = v62 - 264;
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v43 = AppleBCMWLANBusInterface::getLogger(this);
          uint64_t v55 = *(void *)(a3 + 8);
          uint64_t v57 = (CCLogStream *)v43;
          int v44 = *(_DWORD *)(*((void *)this + 9) + 2852);
          int v45 = AppleBCMWLANChipMemory::unwrapRAMOffset(a4, 0xFFFFFFFFLL);
          a2 = v60;
          CCLogStream::logAlert(v57, "[dk] %s@%d:Chip RAM: 0 [ %u< firmware{%u} >%u | %u ~ %u< free{%u} >%u | %u< nvram{%u} >%u | %u ~ pad | %u @%#x ] %u\n", "loadImage", 8185, 0, v55, v55, v10, v10, v16, v23, v62, v8, v62 + v8, v62 + v61, v59, v44, v45 + 1);
        }
      }
      uint64_t v24 = *((void *)this + 9);
      if (*(unsigned char *)(v24 + 4800))
      {
        AppleBCMWLANChipMemory::setFlushPerWritesFactor((uint64_t)a4, 32);
        uint64_t v24 = *((void *)this + 9);
      }
      BOOL v25 = *(AppleBCMWLANPCIeMMIOHistory **)(v24 + 3144);
      if (v25)
      {
        int RecordingStatus = AppleBCMWLANPCIeMMIOHistory::getRecordingStatus(v25);
        AppleBCMWLANPCIeMMIOHistory::disableRecording(*(void *)(*((void *)this + 9) + 3144));
        AppleBCMWLANChipMemory::writeRAM(a4, 0, v10, a2, *(_DWORD *)a3);
        AppleBCMWLANChipMemory::clearRAM(a4, v10, v16);
        if (RecordingStatus)
        {
          uint64_t v27 = *(void *)(*((void *)this + 9) + 3144);
          if (v27) {
            AppleBCMWLANPCIeMMIOHistory::enableRecording(v27);
          }
        }
      }
      else
      {
        AppleBCMWLANChipMemory::writeRAM(a4, 0, v10, a2, *(_DWORD *)a3);
        AppleBCMWLANChipMemory::clearRAM(a4, v10, v16);
      }
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v46 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v46, "[dk] %s@%d:Chip RAM: Randomized bytes @ %u< RANDOMIZED{%u} >%u\n", "loadImage", 8219, v23, 264, v62);
        }
      }
      for (uint64_t i = 0; i != 264; ++i)
      {
        unsigned int v30 = *(unsigned __int8 *)(v22 + i);
        AppleBCMWLANChipMemory::writeRAM8(a4, v23 + i, v30);
        if ((i & 0x1F) == 0)
        {
          if (i)
          {
            if (*(unsigned char *)(*((void *)this + 9) + 4800))
            {
              unsigned __int8 v64 = -86;
              AppleBCMWLANChipMemory::readRAM8(a4, v23 + i, &v64);
              if (v64 != v30)
              {
                if (AppleBCMWLANBusInterface::getLogger(this))
                {
                  AppleBCMWLANBusInterface::getLogger(this);
                  if (CCLogStream::shouldLog())
                  {
                    uint64_t v31 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                    CCLogStream::logAlert(v31, "[dk] %s@%d:Randomized write failure: write value 0x%x, read value 0x%x\n", "loadImage", 8235, v30, v64);
                  }
                }
              }
            }
          }
        }
      }
      AppleBCMWLANChipMemory::writeRAM(a4, v62, v61, v60, v58);
      AppleBCMWLANChipMemory::writeRAM32(a4, v59, *(_DWORD *)(*((void *)this + 9) + 2852));
      if ((*(uint64_t (**)(AppleBCMWLANBusInterface *))(*(void *)this + 1064))(this))
      {
        *(_DWORD *)(*((void *)this + 9) + 2864) = v23;
        AppleBCMWLANBusInterfacePCIe::writeSignatureRTLV(this, a4, v60, a3);
        if (AppleBCMWLANBusInterfacePCIe::writeVStatusRTLV(this, a4))
        {
          uint64_t v17 = 3758097098;
          if (AppleBCMWLANBusInterface::getLogger(this))
          {
            AppleBCMWLANBusInterface::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              unsigned int v32 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
              CCLogStream::logAlert(v32, "[dk] %s@%d:Failed to write VStatus RTLV\n");
            }
          }
          goto LABEL_60;
        }
        if (AppleBCMWLANBusInterfacePCIe::writeMemoryMapRTLV(this, a4, a3))
        {
          uint64_t v17 = 3758097098;
          if (AppleBCMWLANBusInterface::getLogger(this))
          {
            AppleBCMWLANBusInterface::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v35 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
              CCLogStream::logAlert(v35, "[dk] %s@%d:Failed to write memoryMap RTLV\n");
            }
          }
          goto LABEL_60;
        }
        AppleBCMWLANBusInterfacePCIe::writeRTLV(this, a4, 0, 0, 0xFEED0E2D);
      }
      else
      {
        BytesNoCopy = (uint32_t *)IO80211Buffer::getBytesNoCopy(v60, *(void *)a3, 4uLL);
        if (!BytesNoCopy)
        {
          uint64_t v17 = 3758097090;
LABEL_60:
          IOFreeData();
          return v17;
        }
        AppleBCMWLANChipMemory::writeFLOP32(a4, 0, *BytesNoCopy);
      }
      unsigned int v63 = 0;
      AppleBCMWLANChipMemory::readRAM32(a4, v59, &v63);
      uint64_t v17 = 0;
      if (v63 != *(_DWORD *)(*((void *)this + 9) + 2852))
      {
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            int v47 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v47, "[dk] %s@%d:NVRAM Location Mismatch @ %u: host 0x%X, chip 0x%X\n", "loadImage", 8340, v59, *(_DWORD *)(*((void *)this + 9) + 2852), v63);
          }
        }
        uint64_t v17 = 3758097105;
      }
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          __int16 v34 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logNotice(v34, "[dk] %s@%d:READ before: nvramSizeChipRAMOffset[0x%08x] 0x%X, chip[0x%08x]\n", "loadImage", 8343, v59, *(_DWORD *)(*((void *)this + 9) + 2852), v63);
        }
      }
      goto LABEL_60;
    }
    uint64_t v17 = 3758097105;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v28 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v28, "[dk] %s@%d:Invalid allocation of randomized bytes\n");
      }
    }
  }
  else
  {
    uint64_t v17 = 3758097105;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        int v19 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v19, "[dk] %s@%d:Invalid chip memory\n");
      }
    }
  }
  return v17;
}

uint64_t AppleBCMWLANBusInterfacePCIe::dumpSocRAMToRegistry(AppleBCMWLANBusInterfacePCIe *this, const char *a2)
{
  unsigned int v4 = *(AppleBCMWLANChipMemory **)(*((void *)this + 9) + 3368);
  if (v4) {
    unsigned int v5 = AppleBCMWLANChipMemory::unwrapRAMOffset(v4, 0xFFFFFFFFLL) + 1;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a2) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = "boot";
  }
  (*(void (**)(AppleBCMWLANBusInterfacePCIe *, const char *, uint64_t))(*(void *)this + 1208))(this, "dumpSocRAMToRegistry", 7835);
  uint64_t Logger = AppleBCMWLANBusInterface::getLogger(this);
  if (!v5)
  {
    if (Logger)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v20 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v20, "[dk] %s@%d:No/invalid RAM size. Skipping dumping of SocRAM");
      }
    }
    goto LABEL_27;
  }
  if (Logger)
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      unsigned int v16 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(v16, "[dk] %s@%d:SOCRAM: propName['%s']   Memdump: %u\n", "dumpSocRAMToRegistry", 7839, v6, v5);
    }
  }
  if (AppleBCMWLANBusInterfacePCIe::isTCMAccessible(this))
  {
    if (AppleBCMWLANBusInterfacePCIe::isBusAccessible(this, 1)
      && (AppleBCMWLANBusInterfacePCIe::isAPBAccessible(this, 1, 0) & 1) != 0)
    {
      uint64_t v8 = (IO80211Buffer *)IO80211Buffer::allocBufferSingle();
      if (v8)
      {
        int v9 = v8;
        AppleBCMWLANChipMemory::readRAM(*(AppleBCMWLANChipMemory **)(*((void *)this + 9) + 3368), 0, v5, v8, 0);
        BytesNoCopy = (const void *)IO80211Buffer::getBytesNoCopy(v9);
        OSDataPtr v11 = OSData::withBytes(BytesNoCopy, v5);
        if (v11)
        {
          unsigned int v12 = v11;
          unsigned int v13 = (IOService *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 984))(this);
          setPropertyHelper(v13, v6, v12);
          ((void (*)(const OSObject *))v12->release)(v12);
        }
        else if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            int v19 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v19, "[dk] %s@%d:Data not allocated. Skipping dumping of SocRAM", "dumpSocRAMToRegistry", 7858);
          }
        }
        goto LABEL_17;
      }
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v18 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v18, "[dk] %s@%d:MD not allocated. Skipping dumping of SocRAM");
        }
      }
LABEL_27:
      int v9 = 0;
LABEL_17:
      IO80211Buffer::returnBuffer(v9);
      (*(void (**)(void))(MEMORY[0] + 72))(0);
      return 0;
    }
    uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
    if (result)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v17 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        return CCLogStream::logAlert(v17, "[dk] %s@%d:Either bus or backplane is not accessible , so skipping socram dump\n");
      }
    }
  }
  else
  {
    uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
    if (result)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        unsigned int v15 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        return CCLogStream::logAlert(v15, "[dk] %s@%d:TCM Not accessible. Skipping dumping of SocRAM\n");
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::retainCTS(AppleBCMWLANBusInterfacePCIe *this, __int16 a2, int a3)
{
  uint64_t v5 = *((void *)this + 9);
  if (*(_DWORD *)(v5 + 2844) == 2)
  {
    AppleBCMWLANBusInterfacePCIe::retainCTSInbandDS(this);
  }
  else
  {
    if (!AppleOLYHALPortInterfacePCIe::deviceWakeGPIOAvailableDK(*(AppleOLYHALPortInterfacePCIe **)(v5 + 5184), 0))
    {
      uint64_t v9 = 0;
      ++*(_DWORD *)(*((void *)this + 9) + 4496);
      return v9;
    }
    AppleBCMWLANBusInterfacePCIe::retainCTSOOBDW(this, a2);
  }
  uint64_t v7 = *((void *)this + 9);
  if (a3 & 2) == 0 || (*(unsigned char *)(v7 + 4488)) {
    goto LABEL_32;
  }
  int v8 = 0;
  uint64_t v9 = 3758097110;
  ++*(_DWORD *)(v7 + 4500);
  uint64_t v10 = *((void *)this + 9);
  int v11 = *(_DWORD *)(v10 + 4504) | a3;
  uint64_t v24 = 0;
  *(_DWORD *)(v10 + 4504) = v11;
  while (1)
  {
    memset(v23, 170, sizeof(v23));
    clock_interval_to_deadline();
    mach_continuous_time();
    absolutetime_to_nanoseconds();
    unsigned int v12 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(*((void *)this + 9) + 3472) + 80))(*(void *)(*((void *)this + 9) + 3472), *((void *)this + 9) + 4500, v23[0]);
    mach_continuous_time();
    absolutetime_to_nanoseconds();
    uint64_t v13 = 0;
    uint64_t v14 = *((void *)this + 9);
    uint64_t v15 = v14 + 1528;
    uint64_t v16 = v14 + 1632;
    do
    {
      if (*(void *)(v16 + 8 * v13) > (v23[2] - v23[1]) / 0xF4240uLL) {
        break;
      }
      ++v13;
    }
    while (v13 != 12);
    ++*(void *)(v15 + 8 * v13);
    IOHistogramReporter::tallyValue(*(IOHistogramReporter **)(*((void *)this + 9) + 3184), (v23[2] - v23[1]) / 0xF4240uLL);
    uint64_t v17 = *((void *)this + 9);
    uint64_t v18 = (*(unsigned char *)(v17 + 4488) & 1) != 0 ? 0 : v12;
    if (v18 != -536870186) {
      break;
    }
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(Logger, "[dk] %s@%d: Timeout on waiting for Deep Sleep exit notification\n", "retainCTS", 14325);
      }
    }
    if (!(*(unsigned int (**)(AppleBCMWLANBusInterfacePCIe *, uint64_t *))(*(void *)this + 600))(this, &v24))goto LABEL_30; {
    if (AppleBCMWLANBusInterface::getLogger(this))
    }
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v20 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v20, "[dk] %s@%d:DK: rearming DS exit timer\n", "retainCTS", 14328);
      }
    }
    if (v8 == 3)
    {
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v22 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v22, "[dk] %s@%d:DK: failed to trigger DS exit after 3 attempts", "retainCTS", 14332);
        }
      }
      goto LABEL_30;
    }
    ++v8;
  }
  if (*(unsigned char *)(v17 + 1304) || !*(void *)(v17 + 3248) || *(unsigned char *)(v17 + 3722)) {
    uint64_t v9 = 3758097129;
  }
  else {
    uint64_t v9 = v18;
  }
LABEL_30:
  *(_DWORD *)(*((void *)this + 9) + 4504) &= ~a3;
  --*(_DWORD *)(*((void *)this + 9) + 4500);
  if (!v9)
  {
    uint64_t v7 = *((void *)this + 9);
LABEL_32:
    if (*(unsigned char *)(v7 + 4488)) {
      return 0;
    }
    else {
      return 3825173266;
    }
  }
  return v9;
}

AppleBCMWLANBusInterface *AppleBCMWLANBusInterfacePCIe::releaseCTS(AppleBCMWLANBusInterfacePCIe *this, __int16 a2)
{
  uint64_t v3 = *((void *)this + 9);
  if (*(_DWORD *)(v3 + 2844) == 2)
  {
    return AppleBCMWLANBusInterfacePCIe::releaseCTSInbandDS(this);
  }
  else
  {
    uint64_t result = (AppleBCMWLANBusInterface *)AppleOLYHALPortInterfacePCIe::deviceWakeGPIOAvailableDK(*(AppleOLYHALPortInterfacePCIe **)(v3 + 5184), 0);
    if (result)
    {
      return AppleBCMWLANBusInterfacePCIe::releaseCTSOOBDW(this, a2);
    }
    else
    {
      --*(_DWORD *)(*((void *)this + 9) + 4496);
      uint64_t v6 = *((void *)this + 9);
      if (*(unsigned char *)(v6 + 2868)) {
        *(_DWORD *)(v6 + 4488) &= ~2u;
      }
    }
  }
  return result;
}

uint64_t ___ZN28AppleBCMWLANBusInterfacePCIe13loadChipImageEPK21AppleBCMWLANChipImage_block_invoke(uint64_t a1)
{
  return IODispatchSource::SetEnable(*(IODispatchSource **)(*(void *)(*(void *)(a1 + 32) + 72) + 3264), 1, 0);
}

uint64_t ___ZN28AppleBCMWLANBusInterfacePCIe13loadChipImageEPK21AppleBCMWLANChipImage_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(*(void *)(v1 + 72) + 4801))
  {
    clock_interval_to_deadline();
    (*(void (**)(void, uint64_t, unint64_t))(**(void **)(*(void *)(v1 + 72) + 3488) + 80))(*(void *)(*(void *)(v1 + 72) + 3488), *(void *)(v1 + 72) + 4801, 0xAAAAAAAAAAAAAAAALL);
  }
  return 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::printVStatus(AppleBCMWLANBusInterfacePCIe *this)
{
  (*(void (**)(AppleBCMWLANBusInterfacePCIe *, const char *, uint64_t))(*(void *)this + 1208))(this, "printVStatus", 7873);
  uint64_t v2 = (IO80211Buffer *)IO80211Buffer::allocBufferSingle();
  if (v2)
  {
    uint64_t v3 = v2;
    if (AppleBCMWLANChipMemory::readChipRAMDK(*(AppleBCMWLANChipMemory **)(*((void *)this + 9) + 3368), *(_DWORD *)(*((void *)this + 9) + 2856), 40, v2, 0))
    {
      BytesNoCopy = (unsigned int *)IO80211Buffer::getBytesNoCopy(v3);
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(Logger, "[dk] %s@%d:status: %#x, state: %u, allocFailSize: %u, allocBytes: %u, maxAllocBytes: %u, totalAllocBytes: %u, totalFreedBytes: %u, numAllocs: %u, maxAllocs: %u, maxAllocSize: %u allocFailures: %u\n", "printVStatus", 7899, *BytesNoCopy, *((unsigned __int16 *)BytesNoCopy + 2));
        }
      }
    }
    else if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        int v8 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v8, "[dk] %s@%d:printVStatus: failed to read buffer from device mem\n");
      }
    }
    IO80211Buffer::returnBuffer(v3);
    (*(void (**)(void))(MEMORY[0] + 72))(0);
    return 0;
  }
  else
  {
    uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
    if (result)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v7 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        return CCLogStream::logAlert(v7, "[dk] %s@%d:MD not allocated. Skipping dumping of vstatus", "printVStatus", 7891);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::createFirmwarePCIeIPC(OSObject *this, AppleBCMWLANChipMemory *a2)
{
  ((void (*)(OSObject *, const char *, uint64_t))this->OSMetaClassBase::__vftable[21].Dispatch)(this, "createFirmwarePCIeIPC", 9841);
  *((_DWORD *)this[1].ivars + 711) = 0;
  unsigned int v4 = AppleBCMWLANChipMemory::unwrapRAMOffset(a2, 4294967292);
  unsigned int v95 = 0;
  AppleBCMWLANChipMemory::readRAM32(a2, v4, &v95);
  if (v95 == -1)
  {
    uint64_t BusAddr64 = 3825173258;
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:Failed to read shared memory address @ %#X, %#X\n");
      }
    }
    return BusAddr64;
  }
  unsigned int v94 = -1431655766;
  uint64_t BusAddr64 = AppleBCMWLANChipMemory::translateRAMBackplaneAddr(a2, v95, &v94);
  if (BusAddr64) {
    return BusAddr64;
  }
  AppleBCMWLANChipMemory::setSharedMemoryOffset((uint64_t)a2, v94);
  int Flags = AppleBCMWLANChipMemory::readFlags((unsigned int **)a2);
  int v7 = Flags;
  if ((Flags & 0xFE) != 6)
  {
    uint64_t BusAddr64 = 3758097096;
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v14 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(v14, "[dk] %s@%d:Host requires version %u, firmware supports %u\n", "createFirmwarePCIeIPC", 9897, 7, v7);
        return 3758097096;
      }
    }
    return BusAddr64;
  }
  int v8 = Flags;
  *((unsigned char *)this[1].ivars + 4805) = 1;
  int v93 = 0;
  if (IOParseBootArgNumber("wlan.pcie.disablephasebitcheck", &v93, 4))
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v18 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(v18, "[dk] %s@%d:Disabled phase bit checking in FW\n", "createFirmwarePCIeIPC", 9904);
      }
    }
    *((unsigned char *)this[1].ivars + 4805) = 0;
  }
  *((_DWORD *)this[1].ivars + 300) = v7;
  if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
  {
    AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v17 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      CCLogStream::logAlert(v17, "[dk] %s@%d:FW supports IPC protocol V%d, Host supports V%d\n", "createFirmwarePCIeIPC", 9909, v7, 7);
    }
  }
  ivars = this[1].ivars;
  unsigned int v10 = *((_DWORD *)ivars + 300);
  if (v10 < 7)
  {
    *((_DWORD *)ivars + 711) = 1;
    goto LABEL_121;
  }
  int Flags2 = AppleBCMWLANChipMemory::readFlags2(a2);
  if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this)
    && (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this), CCLogStream::shouldLog()))
  {
    int v19 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
    CCLogStream::logAlert(v19, "[dk] %s@%d:deviceSharedint Flags2 = 0x%x\n", "createFirmwarePCIeIPC", 9919, Flags2);
    if ((Flags2 & 1) == 0) {
      goto LABEL_18;
    }
  }
  else if ((Flags2 & 1) == 0)
  {
    goto LABEL_18;
  }
  v10 |= 0x20000u;
  *((unsigned char *)this[1].ivars + 4077) = 1;
  if (!*((void *)this[1].ivars + 508))
  {
    *((void *)this[1].ivars + 508) = IOMallocZeroData();
    if (!*((void *)this[1].ivars + 508))
    {
      uint64_t BusAddr64 = 3758097085;
      if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
      {
        AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v16 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          CCLogStream::logAlert(v16, "[dk] %s@%d:Failed to allocate trap info buffer\n");
        }
      }
      return BusAddr64;
    }
  }
LABEL_18:
  if ((Flags2 & 0x200) != 0)
  {
    v10 |= 0x4000000u;
    *((unsigned char *)this[1].ivars + 4084) = 1;
  }
  if ((v8 & 0x10000000) != 0)
  {
    v10 |= 0x400u;
    *((unsigned char *)this[1].ivars + 4076) = 1;
  }
  LODWORD(v89.address) = 0;
  if (IOParseBootArgNumber("wlan.pcie.oobdw", &v89, 4))
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v20 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(v20, "[dk] %s@%d:Forcing out-of-band device wake\n", "createFirmwarePCIeIPC", 9944);
      }
    }
    LODWORD(v89.address) = 1;
  }
  uint64_t v12 = AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
  if ((v8 & 0x60000000) == 0x20000000)
  {
    if (v12)
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v21 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logCrit(v21, "[dk] %s@%d:device does not support oob or inband device wake, bailing");
      }
    }
    return 3758097097;
  }
  if (v12
    && (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this), CCLogStream::shouldLog()))
  {
    uint64_t v22 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
    unsigned int v23 = "No";
    if ((v8 & 0x20000000) == 0) {
      unsigned int v23 = "Has";
    }
    uint64_t v24 = "has";
    if ((v8 & 0x40000000) == 0) {
      uint64_t v24 = "no";
    }
    CCLogStream::logCrit(v22, "[dk] %s@%d:device wake flags: %s OOB DW, %s inband DS\n", "createFirmwarePCIeIPC", 9963, v23, v24);
    if ((v8 & 0x40000000) == 0) {
      goto LABEL_54;
    }
  }
  else if ((v8 & 0x40000000) == 0)
  {
    goto LABEL_54;
  }
  if (!LODWORD(v89.address))
  {
    v10 |= 0x3000u;
    int v15 = 2;
    goto LABEL_56;
  }
LABEL_54:
  if ((AppleOLYHALPortInterfacePCIe::deviceWakeGPIOAvailableDK(*((AppleOLYHALPortInterfacePCIe **)this[1].ivars + 648), 0) & 1) == 0)
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v54 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logCrit(v54, "[dk] %s@%d:device wake GPIO not available, and inband device wake not supported by endpoint, bailing");
      }
    }
    return 3758097097;
  }
  int v15 = 1;
LABEL_56:
  *((_DWORD *)this[1].ivars + 711) = v15;
  *((unsigned char *)this[1].ivars + 4522) = BYTE1(Flags2) & 1;
  if (*((unsigned char *)this[1].ivars + 4522))
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v73 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logCrit(v73, "[dk] %s@%d:Enabling Extended TX Status support\n", "createFirmwarePCIeIPC", 9977);
      }
    }
    v10 |= 0x400000u;
  }
  int address = 1;
  if (IOParseBootArgNumber("wlan.lowlatency.fw", &address, 4))
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        int v74 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        if (address) {
          uint64_t v75 = "enable";
        }
        else {
          uint64_t v75 = "disable";
        }
        CCLogStream::logAlert(v74, "[dk] %s@%d:Force %s FW low latency features\n", "createFirmwarePCIeIPC", 9983, v75);
      }
    }
  }
  if (address)
  {
    if ((v8 & 0x8000000) != 0)
    {
      BOOL v25 = (AppleBCMWLANCore *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[10].free)(this);
      if (AppleBCMWLANCore::isLowLatencyWiFiEnabled(v25))
      {
        if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
        {
          AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          if (CCLogStream::shouldLog())
          {
            long long v80 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
            CCLogStream::logAlert(v80, "[dk] %s@%d:Enabling DB0 doorbell timestamp support\n", "createFirmwarePCIeIPC", 9987);
          }
        }
        v10 |= 0x800u;
      }
    }
    *((unsigned char *)this[1].ivars + 4525) = 0;
    if ((Flags2 & 0x8000) != 0)
    {
      uint64_t v26 = (AppleBCMWLANCore *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[10].free)(this);
      if (AppleBCMWLANCore::isLowLatencyWiFiEnabled(v26))
      {
        if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
        {
          AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          if (CCLogStream::shouldLog())
          {
            OSStringPtr v81 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
            CCLogStream::logAlert(v81, "[dk] %s@%d:Enabling packet timestamp support\n", "createFirmwarePCIeIPC", 9993);
          }
        }
        v10 |= 0x20000000u;
        *((unsigned char *)this[1].ivars + 4525) = 1;
      }
    }
    *((unsigned char *)this[1].ivars + 4526) = 0;
    if ((Flags2 & 0x10000) != 0)
    {
      uint64_t v27 = (AppleBCMWLANCore *)((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[10].free)(this);
      if (AppleBCMWLANCore::isLowLatencyWiFiEnabled(v27))
      {
        if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
        {
          AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          if (CCLogStream::shouldLog())
          {
            OSStringPtr v82 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
            CCLogStream::logAlert(v82, "[dk] %s@%d:Enabling low latency FW support\n", "createFirmwarePCIeIPC", 10000);
          }
        }
        v10 |= 0x40000000u;
        *((unsigned char *)this[1].ivars + 4526) = 1;
      }
    }
  }
  *((unsigned char *)this[1].ivars + 4523) = (Flags2 & 0x40000) != 0;
  uint64_t v28 = this[1].ivars;
  if (*((unsigned char *)v28 + 4001))
  {
    *((unsigned char *)v28 + 4002) = 0;
    uint64_t v28 = this[1].ivars;
    uint32_t v29 = -1431655766;
  }
  else
  {
    uint32_t v29 = -1431655510;
  }
  *((unsigned char *)v28 + 4524) = HIBYTE(Flags2) & 1;
  unsigned int v30 = this[1].ivars;
  if (!*((unsigned char *)v30 + 4524)
    || !*((unsigned char *)v30 + 3710)
    || !*((unsigned char *)v30 + 3999)
    || (AppleBCMWLANChipManagerPCIe::isPTMSupported(*((AppleBCMWLANChipManagerPCIe **)v30 + 410)) & 1) == 0)
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        long long v72 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(v72, "[dk] %s@%d:PTM is not to be enabled on this platform\n", "createFirmwarePCIeIPC", 10025);
      }
    }
    *((unsigned char *)this[1].ivars + 4001) = 0;
    uint32_t v29 = -1431655766;
  }
  uint64_t v31 = this[1].ivars;
  if (!*((unsigned char *)v31 + 3711)
    && AppleBCMWLANChipManagerPCIe::isFatalErrorIndicationSupported(*((AppleBCMWLANChipManagerPCIe **)v31
                                                                                  + 410))
    && AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this)
    && (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this), CCLogStream::shouldLog()))
  {
    uint64_t v79 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
    CCLogStream::logAlert(v79, "[dk] %s@%d:Setting up host Capability for fatal error indication \n", "createFirmwarePCIeIPC", 10031);
    if ((Flags2 & 0x100000) != 0)
    {
LABEL_99:
      unsigned int v90 = 0;
      unsigned int address_high = 2;
      if (IOParseBootArgNumber("wlan.txchipdelay.scale", &address_high, 4))
      {
        if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
        {
          AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          if (CCLogStream::shouldLog())
          {
            OSStringPtr v77 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
            CCLogStream::logAlert(v77, "[dk] %s@%d:Forcing FW tx latency scale = %d\n", "createFirmwarePCIeIPC", 10046, address_high);
          }
        }
      }
      int v32 = address_high;
      if (address_high >= 7) {
        int v32 = 7;
      }
      unsigned int address_high = v32;
      if (IOParseBootArgNumber("wlan.rxchipdelay.scale", &v90, 4))
      {
        if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
        {
          AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          if (CCLogStream::shouldLog())
          {
            OSStringPtr v78 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
            CCLogStream::logAlert(v78, "[dk] %s@%d:Forcing FW Rx latency scale = %d\n", "createFirmwarePCIeIPC", 10051, v90);
          }
        }
      }
      unsigned int v33 = v90;
      if (v90 >= 7) {
        unsigned int v33 = 7;
      }
      unsigned int v90 = v33;
      uint32_t v29 = v29 & 0xFFFFFFC0 | address_high & 7 | (8 * v33);
      *((_DWORD *)this[1].ivars + 1155) = 32 << address_high;
      *((_DWORD *)this[1].ivars + 1156) = 32 << v33;
      if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
      {
        AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        if (CCLogStream::shouldLog())
        {
          long long v76 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          CCLogStream::logAlert(v76, "[dk] %s@%d:Using txChipDelayToUsecMultiplier=%d rxChipDelayToUsecMultiplier=%d\n", "createFirmwarePCIeIPC", 10065, *((_DWORD *)this[1].ivars + 1155), *((_DWORD *)this[1].ivars + 1156));
        }
      }
    }
  }
  else if ((Flags2 & 0x100000) != 0)
  {
    goto LABEL_99;
  }
  if ((Flags2 & 0x2000) != 0)
  {
    *((unsigned char *)this[1].ivars + 4096) = 1;
    if (!*((void *)this[1].ivars + 478)
      && (AppleBCMWLANBusInterfacePCIe::createFirmwareEcounterLogger((AppleBCMWLANBusInterfacePCIe *)this) & 1) == 0)
    {
      *((unsigned char *)this[1].ivars + 4096) = 0;
      if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
      {
        AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        if (CCLogStream::shouldLog())
        {
          int v85 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          CCLogStream::logAlert(v85, "[dk] %s@%d:Fails to create DSDebug Logger\n", "createFirmwarePCIeIPC", 10073);
        }
      }
    }
  }
  AppleBCMWLANChipMemory::writeHostCaps2((uint64_t)a2, v29);
LABEL_121:
  if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
  {
    AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v66 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (*((_DWORD *)this[1].ivars + 711) == 1) {
        uint64_t v67 = "GPIO";
      }
      else {
        uint64_t v67 = "inband";
      }
      CCLogStream::logAlert(v66, "[dk] %s@%d:DW negotiation result: %s\n", "createFirmwarePCIeIPC", 10084, v67);
    }
  }
  if (*((unsigned char *)this[1].ivars + 4805)) {
    uint32_t v34 = v10 | 0x300;
  }
  else {
    uint32_t v34 = v10;
  }
  AppleBCMWLANChipMemory::writeHostCaps(a2, v34);
  uint64_t v36 = this[1].ivars;
  if (*((unsigned char *)v36 + 4084))
  {
    int v37 = *((_DWORD *)v36 + 828);
    if ((v37 - 4387) >= 2) {
      unsigned int v38 = 0x10000;
    }
    else {
      unsigned int v38 = 98304;
    }
    if (v37 == 4399) {
      uint64_t v39 = v38 + 0x8000;
    }
    else {
      uint64_t v39 = v38;
    }
  }
  else if (*((unsigned char *)v36 + 4077))
  {
    uint64_t v39 = 520;
  }
  else
  {
    uint64_t v39 = 4;
  }
  *((void *)this[1].ivars + 438) = AppleBCMWLANDMASlab::withOptions((AppleBCMWLANDMASlab *)1, v39, IOVMPageSize, 1, 64, *((void *)v36 + 406), v35);
  uint64_t v40 = (AppleBCMWLANDMASlab *)*((void *)this[1].ivars + 438);
  if (v40)
  {
    AppleBCMWLANDMASlab::zero(v40, 0);
    v89.int address = 0;
    v89.length = 0;
    uint64_t BusAddr64 = AppleBCMWLANDMASlab::getBusAddr64(*((AppleBCMWLANDMASlab **)this[1].ivars + 438), 0, &v89);
    uint64_t v41 = AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
    if (BusAddr64)
    {
      if (v41)
      {
        AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v42 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          CCLogStream::logAlert(v42, "[dk] %s@%d:Failed to map DART memory\n");
        }
      }
      return BusAddr64;
    }
    if (v41)
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        long long v68 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        BytesNoCopy = (const void *)AppleBCMWLANDMASlab::getBytesNoCopy(*((AppleBCMWLANDMASlab **)this[1].ivars + 438), 0);
        CCLogStream::logAlert(v68, "[dk] %s@%d:Segments: %p\n", "createFirmwarePCIeIPC", 10159, BytesNoCopy);
      }
    }
    unsigned int address_high = HIDWORD(v89.address);
    int address = v89.address;
    AppleBCMWLANChipMemory::writeD2hHealthCheck((uint64_t)a2, v89.address);
    int v44 = this[1].ivars;
    if (*((unsigned char *)v44 + 4084))
    {
      unsigned int ItemSize = AppleBCMWLANDMASlab::getItemSize(*((AppleBCMWLANDMASlab **)v44 + 438));
      AppleBCMWLANChipMemory::writeDeviceHealthCheckBufLenWd(a2, (unsigned __int16)(ItemSize >> 2));
      int v44 = this[1].ivars;
    }
    *((void *)this[1].ivars + 354) = AppleBCMWLANDMASlab::getBytesNoCopy(*((AppleBCMWLANDMASlab **)v44 + 438), 0);
    **((_DWORD **)this[1].ivars + 354) = 0;
    int v46 = ((uint64_t (*)(OSObject *))this->OSMetaClassBase::__vftable[20].init)(this);
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        char v70 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        char v71 = "not configured";
        if (!v46) {
          char v71 = "configured";
        }
        CCLogStream::logCrit(v70, "[dk] %s@%d:HMAP %s : 0x%x\n", "createFirmwarePCIeIPC", 10181, v71, v46);
      }
    }
    unsigned int v90 = -1431655766;
    unsigned int RingInfoAddr = AppleBCMWLANChipMemory::readRingInfoAddr(a2);
    uint64_t BusAddr64 = AppleBCMWLANChipMemory::translateRAMBackplaneAddr(a2, RingInfoAddr, &v90);
    if (!BusAddr64)
    {
      AppleBCMWLANChipMemory::setRingInfo((uint64_t)a2, v90);
      unsigned int v88 = -1431655766;
      unsigned int CommonRingMemoryAddr = AppleBCMWLANChipMemory::readCommonRingMemoryAddr(a2);
      uint64_t BusAddr64 = AppleBCMWLANChipMemory::translateRAMBackplaneAddr(a2, CommonRingMemoryAddr, &v88);
      if (!BusAddr64)
      {
        AppleBCMWLANChipMemory::setCommonRingOffset((uint64_t)a2, v88);
        if ((~AppleBCMWLANChipMemory::readFlags2(a2) & 0xC0) != 0
          && (AppleBCMWLANChipMemory::readFlags2(a2) & 0xC0) != 0x80)
        {
          AppleBCMWLANChipMemory::readFlags2(a2);
          if ((~AppleBCMWLANChipMemory::readFlags2(a2) & 0xC0) != 0)
          {
            int v49 = AppleBCMWLANChipMemory::readFlags2(a2) & 0xC0;
            if (v49 != 128)
            {
              if ((AppleBCMWLANChipMemory::readFlags2(a2) & 0xC0) == 0x40) {
                LOWORD(v49) = 64;
              }
              else {
                LOWORD(v49) = 32;
              }
            }
          }
          else
          {
            LOWORD(v49) = 256;
          }
        }
        else
        {
          LOWORD(v49) = 64;
        }
        *((_WORD *)this[1].ivars + 1444) = v49;
        uint64_t v50 = this[1].ivars;
        int v51 = *((unsigned __int16 *)v50 + 1444);
        __int16 v52 = 128;
        if (v51 != 32 && v51 != 64)
        {
          if (v51 == 128) {
            __int16 v52 = 256;
          }
          else {
            __int16 v52 = 512;
          }
        }
        *((_WORD *)v50 + 1445) = v52;
        *((_WORD *)this[1].ivars + 1446) = *((_WORD *)this[1].ivars + 1445);
        if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
        {
          AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          if (CCLogStream::shouldLog())
          {
            long long v83 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
            CCLogStream::logAlertIf(v83, 0x80uLL, "[dk] %s@%d:EventBuffers : %d, Control sub/cpl ring items: %d\n", "createFirmwarePCIeIPC", 10254, *((unsigned __int16 *)this[1].ivars + 1444), *((unsigned __int16 *)this[1].ivars + 1445));
          }
        }
        uint64_t BusAddr64 = AppleBCMWLANBusInterfacePCIe::createDARTMappings((AppleBCMWLANBusInterfacePCIe *)this, a2);
        if (BusAddr64) {
          goto LABEL_165;
        }
        if ((v8 & 0x10000) == 0)
        {
          uint64_t BusAddr64 = 3758097095;
          if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
          {
            AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v55 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
              CCLogStream::logAlert(v55, "[dk] %s@%d:Driver only supports FW with bi-directional ring index DMA.\n", "createFirmwarePCIeIPC", 10261);
              uint64_t BusAddr64 = 3758097095;
            }
          }
LABEL_165:
          if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
          {
            AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
            if (CCLogStream::shouldLog())
            {
              long long v84 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
              CCLogStream::logAlert(v84, "[dk] %s@%d:createFirmwareIPC failed; retval=0x%08x\n",
                "createFirmwarePCIeIPC",
                10356,
                BusAddr64);
            }
          }
          AppleBCMWLANBusInterfacePCIe::removeDARTMappings((AppleBCMWLANBusInterfacePCIe *)this);
          return BusAddr64;
        }
        AppleBCMWLANBusInterfacePCIe::initRingInfo((AppleBCMWLANBusInterfacePCIe *)this);
        uint64_t v56 = 0;
        *((void *)this[1].ivars + 514) = (char *)this[1].ivars + 4112;
        *((void *)this[1].ivars + 515) = (char *)this[1].ivars + 4112;
        *((void *)this[1].ivars + 516) = (char *)this[1].ivars + 4128;
        *((void *)this[1].ivars + 517) = (char *)this[1].ivars + 4128;
        *((void *)this[1].ivars + 518) = (char *)this[1].ivars + 4144;
        *((void *)this[1].ivars + 519) = (char *)this[1].ivars + 4144;
        *((void *)this[1].ivars + 520) = (char *)this[1].ivars + 4160;
        *((void *)this[1].ivars + 521) = (char *)this[1].ivars + 4160;
        *((void *)this[1].ivars + 35) = (char *)this[1].ivars + 280;
        *((void *)this[1].ivars + 36) = (char *)this[1].ivars + 280;
        *((void *)this[1].ivars + 37) = (char *)this[1].ivars + 296;
        *((void *)this[1].ivars + 38) = (char *)this[1].ivars + 296;
        do
        {
          int v57 = 1 << (v56 & 7);
          uint64_t v58 = (unsigned __int16)v56 >> 3;
          *((unsigned char *)this[1].ivars + v58 + 5160) &= ~(_BYTE)v57;
          *((unsigned char *)this[1].ivars + v58 + 5166) &= ~(_BYTE)v57;
          *((void *)this[1].ivars + v56 + 48) = 0;
          *((void *)this[1].ivars + v56++ + 92) = 0;
        }
        while (v56 != 44);
        ((void (*)(OSObject *))this->OSMetaClassBase::__vftable[7].retain)(this);
        uint64_t StaticRings = AppleBCMWLANBusInterfacePCIe::createStaticRings((AppleBCMWLANBusInterfacePCIe *)this);
        if (StaticRings)
        {
          uint64_t BusAddr64 = StaticRings;
          if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
          {
            AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
            if (CCLogStream::shouldLog())
            {
              unsigned int v60 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
              CCLogStream::logCrit(v60, "[dk] %s@%d:Failed to create static rings, retval[0x%08x]\n", "createFirmwarePCIeIPC", 10313, BusAddr64);
            }
          }
          goto LABEL_165;
        }
        AppleBCMWLANBusInterfacePCIe::initTransmitFlows(this);
        AppleBCMWLANBusInterfacePCIe::initMRUFlowIdList((uint64_t)this);
        AppleBCMWLANChipBackplane::writePCIeCoreReg32(*((AppleBCMWLANChipBackplane **)this[1].ivars + 420), *((_DWORD *)this[1].ivars + 1120), 0x10100u);
        AppleBCMWLANChipBackplane::writePCIeCoreReg32(*((AppleBCMWLANChipBackplane **)this[1].ivars + 420), *((_DWORD *)this[1].ivars + 1121), 0xFFFFFFFF);
        BOOL isBootMSISupported = AppleBCMWLANChipManagerPCIe::isBootMSISupported(*((AppleBCMWLANChipManagerPCIe **)this[1].ivars
                                                                             + 410));
        unsigned int v63 = this[1].ivars;
        if (!isBootMSISupported || *((unsigned char *)v63 + 3708))
        {
          unsigned __int8 v64 = (IODispatchQueue *)*((void *)v63 + 437);
          block[0] = _NSConcreteStackBlock;
          block[1] = 0x40000000;
          block[2] = ___ZN28AppleBCMWLANBusInterfacePCIe21createFirmwarePCIeIPCEP22AppleBCMWLANChipMemory_block_invoke;
          block[3] = &__block_descriptor_tmp_534;
          block[4] = this;
          IODispatchQueue::DispatchAsync(v64, block);
          unsigned int v63 = this[1].ivars;
        }
        *((void *)v63 + 522) = 0;
        *((_DWORD *)this[1].ivars + 1046) = 0;
        *((unsigned char *)this[1].ivars + 1306) = 1;
        uint64_t v65 = this[1].ivars;
        if (*((_DWORD *)v65 + 711) == 2)
        {
          *((_DWORD *)v65 + 306) = 5;
          AppleBCMWLANBusInterfacePCIe::changeDeepSleepStateSetClear((uint64_t)this, v62, 1, 255);
        }
        uint64_t BusAddr64 = AppleBCMWLANBusInterfacePCIe::createDynamicRings((AppleBCMWLANBusInterfacePCIe *)this);
        if (BusAddr64) {
          goto LABEL_165;
        }
        if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
        {
          AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          if (CCLogStream::shouldLog())
          {
            long long v86 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
            CCLogStream::logAlert(v86, "[dk] %s@%d:createFirmwareIPC successful\n", "createFirmwarePCIeIPC", 10352);
          }
        }
        return 0;
      }
    }
  }
  else
  {
    uint64_t BusAddr64 = 3758097085;
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v43 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(v43, "[dk] %s@%d:Fail to allocate DART memory for trap dump\n");
      }
    }
  }
  return BusAddr64;
}

void *AppleBCMWLANBusInterfacePCIe::enableRingEventSources(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[9];
  uint64_t v3 = (void *)(v2 + 280);
  unsigned int v4 = *(void **)(v2 + 280);
  while (v4 != v3)
  {
    RingFromChaiuint64_t n = AppleBCMWLANPCIeSubmissionRing::getRingFromChain((uint64_t)v4);
    this = (void *)(*(uint64_t (**)(uint64_t))(*(void *)RingFromChain + 64))(RingFromChain);
    unsigned int v4 = (void *)*v4;
    uint64_t v2 = v1[9];
    uint64_t v3 = (void *)(v2 + 280);
  }
  uint64_t v6 = (void *)(v2 + 296);
  int v7 = *(void **)(v2 + 296);
  while (v7 != v6)
  {
    uint64_t v8 = AppleBCMWLANPCIeCompletionRing::getRingFromChain((uint64_t)v7);
    this = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 64))(v8);
    int v7 = (void *)*v7;
    uint64_t v2 = v1[9];
    uint64_t v6 = (void *)(v2 + 296);
  }
  if (*(_DWORD *)(v2 + 376))
  {
    uint64_t v9 = 601;
    do
    {
      this = *(void **)(v2 + 8 * v9);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 312))(this);
        uint64_t v2 = v1[9];
        if (this == 3)
        {
          this = (void *)(*(uint64_t (**)(void))(**(void **)(v2 + 8 * v9) + 64))(*(void *)(v2 + 8 * v9));
          uint64_t v2 = v1[9];
        }
      }
      if ((unint64_t)(v9 - 601) > 0x2A) {
        break;
      }
      unsigned int v10 = v9++ - 600;
    }
    while (*(_DWORD *)(v2 + 376) > v10);
  }
  if (!*(unsigned char *)(v2 + 3723))
  {
    int v11 = *(AppleBCMWLANPCIeSkywalk **)(v2 + 4472);
    return (void *)AppleBCMWLANPCIeSkywalk::enableAllSubmissionQueue(v11);
  }
  return this;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::loadChipImage(AppleBCMWLANBusInterfacePCIe *this, const AppleBCMWLANChipImage *a2)
{
  return AppleBCMWLANBusInterfacePCIe::loadChipImage((AppleBCMWLANBusInterfacePCIe *)((char *)this - 48), a2);
}

uint64_t AppleBCMWLANBusInterfacePCIe::isTCMAccessible(AppleBCMWLANBusInterfacePCIe *this)
{
  if (*(unsigned char *)(*((void *)this + 9) + 2869))
  {
    AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 0);
    uint64_t v2 = AppleBCMWLANBusInterfacePCIe::checkTCMAccessibility(this);
    AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 1);
    return v2;
  }
  else
  {
    return AppleBCMWLANBusInterfacePCIe::checkTCMAccessibility(this);
  }
}

void *AppleBCMWLANBusInterfacePCIe::writeRTLV(AppleBCMWLANBusInterfacePCIe *this, AppleBCMWLANChipMemory *a2, unsigned __int8 *a3, unsigned int a4, uint32_t a5)
{
  unsigned __int16 v6 = a4;
  uint64_t v8 = *((void *)this + 9);
  int v9 = *(_DWORD *)(v8 + 2864);
  unsigned int v10 = v9 - a4 - 8;
  *(_DWORD *)(v8 + 2864) = v10;
  if (a3 && a4)
  {
    int v11 = a3;
    uint64_t v12 = a4;
    do
    {
      unsigned int v13 = *v11++;
      AppleBCMWLANChipMemory::writeRAM8(a2, v10++, v13);
      --v12;
    }
    while (v12);
  }
  AppleBCMWLANChipMemory::writeRAM32(a2, v9 - 8, v6 | ((unsigned __int16)~v6 << 16));
  return AppleBCMWLANChipMemory::writeRAM32(a2, v9 - 4, a5);
}

uint64_t AppleBCMWLANBusInterfacePCIe::writeSignatureRTLV(AppleBCMWLANBusInterface *a1, AppleBCMWLANChipMemory *a2, IO80211Buffer *a3, uint64_t a4)
{
  if (AppleBCMWLANBusInterface::getLogger(a1))
  {
    AppleBCMWLANBusInterface::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:Downloading Signature RTLV to RAM\n", "writeSignatureRTLV", 7958);
    }
  }
  unint64_t v8 = *(unsigned int *)(a4 + 48);
  uint64_t v9 = *(void *)(a4 + 56);
  BytesNoCopy = (unsigned __int8 *)IO80211Buffer::getBytesNoCopy(a3, v8, v9);
  AppleBCMWLANBusInterfacePCIe::writeRTLV(a1, a2, BytesNoCopy, v9, 0xFEEDFE51);
  *(_DWORD *)(*((void *)a1 + 9) + 2860) = *(_DWORD *)(*((void *)a1 + 9) + 2864);
  return 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::writeVStatusRTLV(AppleBCMWLANBusInterfacePCIe *this, AppleBCMWLANChipMemory *a2)
{
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:Downloading VStatus RTLV to RAM\n", "writeVStatusRTLV", 7971);
    }
  }
  unsigned int v4 = (unsigned __int8 *)IOMallocZeroData();
  if (v4)
  {
    AppleBCMWLANBusInterfacePCIe::writeRTLV(this, a2, v4, 0x28u, 0xFEEDFE54);
    *(_DWORD *)(*((void *)this + 9) + 2856) = *(_DWORD *)(*((void *)this + 9) + 2864);
    IOFreeData();
    return 0;
  }
  else
  {
    uint64_t v5 = 3758097098;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v8 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v8, "[dk] %s@%d:Invalid allocation of vStatus RTLV buffer\n", "writeVStatusRTLV", 7974);
      }
    }
  }
  return v5;
}

uint64_t AppleBCMWLANBusInterfacePCIe::writeMemoryMapRTLV(AppleBCMWLANBusInterface *a1, AppleBCMWLANChipMemory *a2, uint64_t a3)
{
  if (AppleBCMWLANBusInterface::getLogger(a1))
  {
    AppleBCMWLANBusInterface::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:Downloading MemoryMap RTLV to RAM\n", "writeMemoryMapRTLV", 7986);
    }
  }
  uint64_t v6 = *(void *)(a3 + 8);
  uint64_t v7 = *(void *)(a3 + 56);
  __int32 MemoryRAMAddress = AppleBCMWLANChipManagerPCIe::getMemoryRAMAddress(*(AppleBCMWLANChipManagerPCIe **)(*((void *)a1 + 9) + 3280));
  uint64_t v9 = (int32x2_t *)IOMallocZeroData();
  if (v9)
  {
    unsigned int v10 = v9;
    __int32 v11 = MemoryRAMAddress + *(_DWORD *)(a3 + 8);
    v9[5].i32[0] = MemoryRAMAddress;
    v9[5].i32[1] = v11;
    v9[7] = vadd_s32(vdup_n_s32(MemoryRAMAddress + ((v6 + 7) & 0xFFFFFFF8)), (int32x2_t)0x1100000001000);
    __int32 v12 = *(_DWORD *)(*((void *)a1 + 9) + 2860) + MemoryRAMAddress;
    v9[6].i32[0] = v12;
    v9[6].i32[1] = v7 + v12 + 8;
    __int32 v13 = *(_DWORD *)(*((void *)a1 + 9) + 2856) + MemoryRAMAddress;
    v9[4].i32[0] = v13;
    v9[4].i32[1] = v13 + 48;
    if (AppleBCMWLANBusInterface::getLogger(a1))
    {
      AppleBCMWLANBusInterface::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v17 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
        CCLogStream::logAlert(v17, "[dk] %s@%d:FW Start: %u, FW End: %u, NVRAM Start: %u, NVRAM End: %u, heap start: %u, heap end: %u\n", "writeMemoryMapRTLV", 8007, v10[5].i32[0], v10[5].i32[1], v10[10].i32[0], v10[10].i32[1], v10[7].i32[0], v10[7].i32[1]);
      }
    }
    if (AppleBCMWLANBusInterface::getLogger(a1))
    {
      AppleBCMWLANBusInterface::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v18 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
        CCLogStream::logAlert(v18, "[dk] %s@%d:Signature Start: %u, Signature End: %u, vStatus Start: %u, vStatus End: %u\n", "writeMemoryMapRTLV", 8009, v10[6].i32[0], v10[6].i32[1], v10[4].i32[0], v10[4].i32[1]);
      }
    }
    AppleBCMWLANBusInterfacePCIe::writeRTLV(a1, a2, (unsigned __int8 *)v10, 0x58u, 0xFEEDFE53);
    IOFreeData();
    return 0;
  }
  else
  {
    uint64_t v14 = 3758097098;
    if (AppleBCMWLANBusInterface::getLogger(a1))
    {
      AppleBCMWLANBusInterface::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        int v19 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
        CCLogStream::logAlert(v19, "[dk] %s@%d:Invalid allocation of memMap buffer\n", "writeMemoryMapRTLV", 7994);
      }
    }
  }
  return v14;
}

uint64_t AppleBCMWLANBusInterfacePCIe::isSecureBootEnabled(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 9) + 3280);
  if (!v2)
  {
    uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
    if (!result) {
      return result;
    }
    AppleBCMWLANBusInterface::getLogger(this);
    uint64_t result = CCLogStream::shouldLog();
    if (!result) {
      return result;
    }
    uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
    CCLogStream::logAlert(Logger, "[dk] %s@%d:Invalid Chip Manager\n");
    return 0;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)v2 + 232))(v2) & 1) == 0)
  {
    uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
    if (!result) {
      return result;
    }
    AppleBCMWLANBusInterface::getLogger(this);
    uint64_t result = CCLogStream::shouldLog();
    if (!result) {
      return result;
    }
    uint64_t v5 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
    CCLogStream::logAlert(v5, "[dk] %s@%d:Secure Boot is not supported\n");
    return 0;
  }
  if (!*(unsigned char *)(*((void *)this + 9) + 4630)) {
    return 1;
  }
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v6 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(v6, "[dk] %s@%d:Checking DAR Register to determine secure boot status\n", "isSecureBootEnabled", 8032);
    }
  }
  if (AppleBCMWLANBusInterfacePCIe::checkBusAccessibility(this)) {
    return ((*(unsigned int (**)(void, void))(**(void **)(*((void *)this + 9) + 3280) + 224))(*(void *)(*((void *)this + 9) + 3280), *(void *)(*((void *)this + 9) + 3360)) >> 1) & 1;
  }
  uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
  if (result)
  {
    AppleBCMWLANBusInterface::getLogger(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v7 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(v7, "[dk] %s@%d:Cannot access DAR security register\n");
      return 0;
    }
  }
  return result;
}

BOOL AppleBCMWLANBusInterfacePCIe::checkBusAccessibility(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t v1 = *((void *)this + 9);
  return *(void *)(v1 + 3360)
      && !*(unsigned char *)(v1 + 3722)
      && !*(unsigned char *)(v1 + 1304)
      && (!*(unsigned char *)(v1 + 3706) || !*(unsigned char *)(v1 + 3709))
      && *(unsigned char *)(v1 + 4801) == 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::isSecureBootEnabled(AppleBCMWLANBusInterfacePCIe *this)
{
  return AppleBCMWLANBusInterfacePCIe::isSecureBootEnabled((AppleBCMWLANBusInterfacePCIe *)((char *)this - 48));
}

uint64_t AppleBCMWLANBusInterfacePCIe::createStaticRings(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t v2 = 3758097086;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v3 = *((void *)this + 9);
  uint64_t v4 = *(void *)(v3 + 3640);
  *((void *)&v23 + 1) = this;
  *(void *)&long long v24 = v4;
  LOWORD(v21) = 0;
  int v5 = *(unsigned __int16 *)(v3 + 2890);
  DWORD1(v21) = 40;
  DWORD2(v21) = v5;
  *(void *)&long long v22 = AppleBCMWLANBusInterfacePCIe::workPendingForControl;
  *((void *)&v22 + 1) = this;
  *(void *)&long long v23 = AppleBCMWLANBusInterfacePCIe::prepareForRingSubmission;
  if (!(*(unsigned int (**)(AppleBCMWLANBusInterfacePCIe *, uint64_t, long long *, AppleBCMWLANBusInterfacePCIe *, void, uint64_t (*)(AppleBCMWLANBusInterfacePCIe *, AppleBCMWLANTxItemRing *, uint64_t), uint64_t (*)(AppleBCMWLANBusInterfacePCIe *, AppleBCMWLANByteRing *, int, void *)))(*(void *)this + 1080))(this, v3 + 312, &v21, this, *(void *)(v3 + 3464), AppleBCMWLANBusInterfacePCIe::fillControlSubmitRing, AppleBCMWLANBusInterfacePCIe::ringErrorAction))
  {
    AppleBCMWLANBusInterfacePCIe::fillRingEndpointMemory(this, *(AppleBCMWLANPCIeSubmissionRing **)(*((void *)this + 9) + 312), 0);
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    LOWORD(v21) = 1;
    BYTE2(v21) = 2;
    int v7 = *(_DWORD *)(*((void *)this + 9) + 4456);
    if (!v7) {
      int v7 = 256;
    }
    DWORD1(v21) = 32;
    DWORD2(v21) = v7;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:Creating Rx submission ring ringID %d, ringType %d, itemSize %d, itemCount %d", "createStaticRings", 8386, (unsigned __int16)v21, BYTE2(v21), DWORD1(v21), DWORD2(v21));
      }
    }
    uint64_t v8 = *((void *)this + 9);
    uint64_t v9 = *(AppleBCMWLANPCIeSubmissionRing **)(v8 + 4472);
    if (v9)
    {
      uint64_t v9 = AppleBCMWLANPCIeSkywalk::attachRxSubmRing((uint64_t)v9, (uint64_t)&v21);
      uint64_t v8 = *((void *)this + 9);
    }
    *(void *)(v8 + 344) = v9;
    unsigned int v10 = *(AppleBCMWLANPCIeSubmissionRing **)(*((void *)this + 9) + 344);
    if (v10)
    {
      AppleBCMWLANBusInterfacePCIe::fillRingEndpointMemory(this, v10, 1);
      long long v21 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      BYTE2(v21) = 1;
      uint64_t v11 = *((void *)this + 9);
      int v12 = *(unsigned __int16 *)(v11 + 2892);
      DWORD1(v21) = 24;
      DWORD2(v21) = v12;
      if (!(*(unsigned int (**)(AppleBCMWLANBusInterfacePCIe *, uint64_t, long long *, AppleBCMWLANBusInterfacePCIe *, void, uint64_t (*)(AppleBCMWLANBusInterfacePCIe *, AppleBCMWLANRxItemRing *, void *), uint64_t (*)(AppleBCMWLANBusInterfacePCIe *, AppleBCMWLANByteRing *, int, void *)))(*(void *)this + 1088))(this, v11 + 320, &v21, this, *(void *)(v11 + 3464), AppleBCMWLANBusInterfacePCIe::drainControlCompleteRing, AppleBCMWLANBusInterfacePCIe::ringErrorAction))
      {
        AppleBCMWLANBusInterfacePCIe::fillRingEndpointMemory(this, *(AppleBCMWLANPCIeCompletionRing **)(*((void *)this + 9) + 320), 2);
        long long v21 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        LOWORD(v21) = 2;
        BYTE2(v21) = 3;
        uint64_t v13 = *((void *)this + 9);
        if (*(_DWORD *)(v13 + 1200) <= 6u) {
          int v14 = 32;
        }
        else {
          int v14 = 40;
        }
        int v15 = *(_DWORD *)(v13 + 4456);
        if (!v15) {
          int v15 = 256;
        }
        *(void *)((char *)&v21 + 4) = __PAIR64__(v15, v14);
        *(void *)(*((void *)this + 9) + 352) = AppleBCMWLANPCIeSkywalk::attachDefaultRxCompRing(*(void *)(v13 + 4472), (uint64_t)&v21);
        AppleBCMWLANBusInterfacePCIe::fillRingEndpointMemory(this, *(AppleBCMWLANPCIeCompletionRing **)(*((void *)this + 9) + 352), 4);
        long long v21 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        LOWORD(v21) = 1;
        BYTE2(v21) = 4;
        uint64_t v16 = *((void *)this + 9);
        if (*(_DWORD *)(v16 + 1200) <= 6u) {
          int v17 = 16;
        }
        else {
          int v17 = 24;
        }
        int v18 = *(_DWORD *)(v16 + 4452);
        if (!v18) {
          int v18 = 256;
        }
        *(void *)((char *)&v21 + 4) = __PAIR64__(v18, v17);
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            unsigned int v20 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v20, "[dk] %s@%d:Creating Tx completion ring ringID %d, ringType %d, itemSize %d, itemCount %d", "createStaticRings", 8439, (unsigned __int16)v21, BYTE2(v21), DWORD1(v21), DWORD2(v21));
          }
        }
        *(void *)(*((void *)this + 9) + 360) = AppleBCMWLANPCIeSkywalk::attachDefaultTxCompRing(*(void *)(*((void *)this + 9) + 4472), (uint64_t)&v21);
        AppleBCMWLANBusInterfacePCIe::fillRingEndpointMemory(this, *(AppleBCMWLANPCIeCompletionRing **)(*((void *)this + 9) + 360), 3);
        return 0;
      }
    }
  }
  return v2;
}

uint64_t AppleBCMWLANBusInterfacePCIe::workPendingForControl(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t v2 = *((void *)this + 9);
  int v3 = *(unsigned __int8 *)(v2 + 5196);
  unsigned int v4 = 1 - *(_DWORD *)(v2 + 1176);
  unsigned int v5 = (*(uint64_t (**)(void))(**(void **)(v2 + 1088) + 72))(*(void *)(v2 + 1088));
  uint64_t v6 = *((void *)this + 9);
  if (v4 >= v5)
  {
    int v7 = (*(uint64_t (**)(void))(**(void **)(v6 + 1088) + 72))(*(void *)(v6 + 1088));
    uint64_t v6 = *((void *)this + 9);
  }
  else
  {
    int v7 = 1 - *(_DWORD *)(v6 + 1176);
  }
  unsigned int v8 = 1 - *(_DWORD *)(v6 + 1180);
  unsigned int v9 = (*(uint64_t (**)(void))(**(void **)(v6 + 1096) + 72))(*(void *)(v6 + 1096));
  uint64_t v10 = *((void *)this + 9);
  if (v8 >= v9)
  {
    int v11 = (*(uint64_t (**)(void))(**(void **)(v10 + 1096) + 72))(*(void *)(v10 + 1096));
    uint64_t v10 = *((void *)this + 9);
  }
  else
  {
    int v11 = 1 - *(_DWORD *)(v10 + 1180);
  }
  unsigned int v12 = 1 - (*(uint64_t (**)(void))(**(void **)(v10 + 1112) + 72))(*(void *)(v10 + 1112));
  uint64_t v13 = *((void *)this + 9);
  unsigned int v14 = v13 + 4112 != *(void *)(v13 + 4112);
  if (v12 < v14)
  {
    unsigned int v14 = 1 - (*(uint64_t (**)(void))(**(void **)(v13 + 1112) + 72))(*(void *)(v13 + 1112));
    uint64_t v13 = *((void *)this + 9);
  }
  unsigned int v15 = 1 - (*(uint64_t (**)(void))(**(void **)(v13 + 1120) + 72))(*(void *)(v13 + 1120));
  uint64_t v16 = *((void *)this + 9);
  unsigned int v17 = v16 + 4144 != *(void *)(v16 + 4144);
  if (v15 < v17)
  {
    unsigned int v17 = 1 - (*(uint64_t (**)(void))(**(void **)(v16 + 1120) + 72))(*(void *)(v16 + 1120));
    uint64_t v16 = *((void *)this + 9);
  }
  unsigned int v18 = 1 - (*(uint64_t (**)(void))(**(void **)(v16 + 1128) + 72))(*(void *)(v16 + 1128));
  uint64_t v19 = *((void *)this + 9);
  unsigned int v20 = v19 + 4128 != *(void *)(v19 + 4128);
  if (v18 < v20)
  {
    unsigned int v20 = 1 - (*(uint64_t (**)(void))(**(void **)(v19 + 1128) + 72))(*(void *)(v19 + 1128));
    uint64_t v19 = *((void *)this + 9);
  }
  unsigned int v21 = 1 - (*(uint64_t (**)(void))(**(void **)(v19 + 1136) + 72))(*(void *)(v19 + 1136));
  uint64_t v22 = *((void *)this + 9);
  unsigned int v23 = v22 + 4160 != *(void *)(v22 + 4160);
  if (v21 < v23)
  {
    unsigned int v23 = 1 - (*(uint64_t (**)(void))(**(void **)(v22 + 1136) + 72))(*(void *)(v22 + 1136));
    uint64_t v22 = *((void *)this + 9);
  }
  int v24 = v3
      + v7
      + v11
      + v14
      + v17
      + v20
      + v23
      - *(_DWORD *)(v22 + 1152)
      - *(_DWORD *)(v22 + 1156)
      + *(unsigned __int16 *)(v22 + 2888)
      + 1;
  if (*(_DWORD *)(v22 + 3984) == 2) {
    int v24 = v24 - *(_DWORD *)(v22 + 1188) + 8;
  }
  return AppleBCMWLANBusInterface::getTxDescriptorCommandQueueSize(this) + v24;
}

void *AppleBCMWLANBusInterfacePCIe::prepareForRingSubmission(void *this)
{
  uint64_t v1 = this[9];
  if (*(_DWORD *)(v1 + 2844) == 2 && *(unsigned char *)(v1 + 1306) && *(_DWORD *)(v1 + 1224) == 7)
  {
    uint64_t v2 = this;
    char v3 = *(unsigned char *)(v1 + 5196);
    int v4 = *(_DWORD *)(v1 + 5200);
    *(_DWORD *)(v1 + 5200) = 64;
    *(unsigned char *)(this[9] + 5196) = 1;
    AppleBCMWLANBusInterfacePCIe::changeSleepState((AppleBCMWLANBusInterface *)this, 8, 11190);
    (*(void (**)(void, uint64_t, void))(**(void **)(v2[9] + 312) + 192))(*(void *)(v2[9] + 312), 1, 0);
    this = (void *)AppleBCMWLANPCIeDoorbell::cancelRing(*(void *)(v2[9] + 3640));
    *(unsigned char *)(v2[9] + 5196) = v3;
    *(_DWORD *)(v2[9] + 5200) = v4;
  }
  return this;
}

uint64_t AppleBCMWLANBusInterfacePCIe::fillControlSubmitRing(AppleBCMWLANBusInterfacePCIe *this, AppleBCMWLANTxItemRing *a2, uint64_t a3)
{
  uint64_t v3 = *((void *)this + 9);
  if (!*(unsigned char *)(v3 + 1306)) {
    return 0;
  }
  if (*(unsigned char *)(v3 + 5196))
  {
    AppleBCMWLANBusInterfacePCIe::submitH2DMailboxMsg((uint64_t)this, (uint64_t)a2, a3);
    return 1;
  }
  if (*(unsigned char *)(v3 + 3722))
  {
    AppleBCMWLANBusInterfacePCIe::flushPendingTxIOs(this);
    return 0;
  }
  int v8 = (*(uint64_t (**)(void))(**(void **)(v3 + 1112) + 72))(*(void *)(v3 + 1112));
  uint64_t v9 = *((void *)this + 9);
  if (v8 || v9 + 4112 == *(void *)(v9 + 4112))
  {
    int v10 = (*(uint64_t (**)(void))(**(void **)(v9 + 1120) + 72))(*(void *)(v9 + 1120));
    uint64_t v11 = *((void *)this + 9);
    if (v10 || v11 + 4144 == *(void *)(v11 + 4144))
    {
      int v12 = (*(uint64_t (**)(void))(**(void **)(v11 + 1128) + 72))(*(void *)(v11 + 1128));
      uint64_t v13 = *((void *)this + 9);
      if (v12 || v13 + 4128 == *(void *)(v13 + 4128))
      {
        int v14 = (*(uint64_t (**)(void))(**(void **)(v13 + 1136) + 72))(*(void *)(v13 + 1136));
        uint64_t v15 = *((void *)this + 9);
        if (v14 || v15 + 4160 == *(void *)(v15 + 4160))
        {
          if (*(int *)(v15 + 1180) <= 0)
          {
            if ((*(unsigned int (**)(void))(**(void **)(v15 + 1096) + 72))(*(void *)(v15 + 1096)))
            {
              AppleBCMWLANBusInterfacePCIe::submitDeleteFlowRequestMsg(this, (uint64_t)a2, a3);
              ++*(_DWORD *)(*((void *)this + 9) + 1180);
              return 1;
            }
            uint64_t v15 = *((void *)this + 9);
          }
          if (*(int *)(v15 + 1176) <= 0)
          {
            if ((*(unsigned int (**)(void))(**(void **)(v15 + 1088) + 72))(*(void *)(v15 + 1088)))
            {
              AppleBCMWLANBusInterfacePCIe::submitCreateFlowRequestMsg((uint64_t)this, (uint64_t)a2, a3);
              ++*(_DWORD *)(*((void *)this + 9) + 1176);
              return 1;
            }
            uint64_t v15 = *((void *)this + 9);
          }
          if (*(_DWORD *)(v15 + 3984) == 2 && *(int *)(v15 + 1188) <= 7)
          {
            uint64_t result = AppleBCMWLANBusInterfacePCIe::submitControlBufferMsg(this, (uint64_t)a2, a3, 37);
            *(_DWORD *)(*((void *)this + 9) + 1188) += result;
          }
          else if (*(int *)(v15 + 1152) <= 0)
          {
            uint64_t result = AppleBCMWLANBusInterfacePCIe::submitControlBufferMsg(this, (uint64_t)a2, a3, 11);
            *(_DWORD *)(*((void *)this + 9) + 1152) += result;
          }
          else if (*(_DWORD *)(v15 + 1156) >= (int)*(unsigned __int16 *)(v15 + 2888))
          {
            uint64_t result = AppleBCMWLANBusInterface::getTxDescriptorCommandQueueSize(this);
            if (result)
            {
              return AppleBCMWLANBusInterfacePCIe::submitIOCtlRequestMsg(this, (uint64_t)a2, a3);
            }
          }
          else
          {
            uint64_t result = AppleBCMWLANBusInterfacePCIe::submitControlBufferMsg(this, (uint64_t)a2, a3, 13);
            *(_DWORD *)(*((void *)this + 9) + 1156) += result;
          }
        }
        else
        {
          return AppleBCMWLANBusInterfacePCIe::submitD2HRingDeleteMsg(this, (uint64_t)a2, a3);
        }
      }
      else
      {
        return AppleBCMWLANBusInterfacePCIe::submitD2HRingCreateMsg(this, (uint64_t)a2, a3);
      }
    }
    else
    {
      return AppleBCMWLANBusInterfacePCIe::submitH2DRingDeleteMsg(this, (uint64_t)a2, a3);
    }
  }
  else
  {
    return AppleBCMWLANBusInterfacePCIe::submitH2DRingCreateMsg(this, (uint64_t)a2, a3);
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::ringErrorAction(AppleBCMWLANBusInterfacePCIe *this, AppleBCMWLANByteRing *a2, int a3, void *a4)
{
  uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
  if (a3 == -469794025)
  {
    if (result)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:Corrupted ring index of (%p), triggered trap\n", "ringErrorAction", 17866, a2);
      }
    }
    IOSleep(0x64uLL);
    uint64_t v8 = *((void *)this + 9);
    return AppleBCMWLANBusInterfacePCIe::forcedSoCRAMRead(this, (const OSData **)(v8 + 3744), (const void **)(v8 + 3752));
  }
  else if (result)
  {
    AppleBCMWLANBusInterface::getLogger(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      int v10 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      return CCLogStream::logCrit(v10, "[dk] %s@%d:Unexpected ring error action (%d)\n", "ringErrorAction", 17872, a3);
    }
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::fillRingEndpointMemory(AppleBCMWLANBusInterfacePCIe *this, AppleBCMWLANPCIeSubmissionRing *a2, int a3)
{
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  LOWORD(v7) = (*(uint64_t (**)(AppleBCMWLANPCIeSubmissionRing *))(*(void *)a2 + 208))(a2);
  BYTE2(v7) = (*(uint64_t (**)(AppleBCMWLANPCIeSubmissionRing *))(*(void *)a2 + 216))(a2);
  WORD2(v7) = AppleBCMWLANItemRing::getItemCount(a2);
  HIWORD(v7) = AppleBCMWLANItemRing::getItemSize(a2);
  (*(void (**)(AppleBCMWLANPCIeSubmissionRing *, unint64_t *))(*(void *)a2 + 240))(a2, &v8);
  AppleBCMWLANChipMemory::writeCommonRingMemory(*(AppleBCMWLANBusInterfacePCIe **)(*((void *)this + 9) + 3368), a3, (uint8_t *)&v7);
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  AppleBCMWLANChipMemory::readCommonRingMemory(*(AppleBCMWLANBusInterfacePCIe **)(*((void *)this + 9) + 3368), a3, (uint8_t *)&v7);
  return 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::drainControlCompleteRing(AppleBCMWLANBusInterfacePCIe *this, AppleBCMWLANRxItemRing *a2, void *a3)
{
  kdebug_trace();
  *(void *)(*((void *)this + 9) + 4776) = *(void *)(*((void *)this + 9) + 4768);
  if (*(unsigned char *)(*((void *)this + 9) + 1306))
  {
    mach_continuous_time();
    absolutetime_to_nanoseconds();
    long long bytes = *(_OWORD *)a3;
    uint64_t v26 = a3[2];
    int v7 = BYTE2(bytes) >> 7;
    if (v7 != (*(unsigned int (**)(AppleBCMWLANRxItemRing *))(*(void *)a2 + 248))(a2))
    {
      if ((*(unsigned int (**)(AppleBCMWLANRxItemRing *))(*(void *)a2 + 248))(a2) != BYTE2(bytes) >> 7)
      {
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            int v19 = (*(uint64_t (**)(AppleBCMWLANRxItemRing *))(*(void *)a2 + 248))(a2);
            int v20 = (*(uint64_t (**)(AppleBCMWLANRxItemRing *))(*(void *)a2 + 224))(a2);
            int v21 = (*(uint64_t (**)(AppleBCMWLANRxItemRing *))(*(void *)a2 + 232))(a2);
            CCLogStream::logCrit(Logger, "[dk] %s@%d:Unexpected phaseBit on control completion ring. got=%d expect=%d. At {%d %d}\n", "drainControlCompleteRing", 12564, v7, v19, v20, v21);
          }
        }
      }
      FaultReporter = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(this);
      int v9 = (*(uint64_t (**)(AppleBCMWLANRxItemRing *))(*(void *)a2 + 248))(a2);
      int v10 = (*(uint64_t (**)(AppleBCMWLANRxItemRing *))(*(void *)a2 + 224))(a2);
      int v11 = (*(uint64_t (**)(AppleBCMWLANRxItemRing *))(*(void *)a2 + 232))(a2);
      CCFaultReporter::reportFault(FaultReporter, 5u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANBusInterfacePCIe.cpp", 0x3115u, "drainControlCompleteRing", 0, -469794021, "phase=%u,expect=%u,r=%u,w=%u", v7, v9, v10, v11);
    }
    if (bytes <= 0x1Cu)
    {
      switch((char)bytes)
      {
        case 1:
          AppleBCMWLANBusInterfacePCIe::completeIOCtlGeneralResponseMsg(this, v6, (unsigned __int16 *)&bytes);
          break;
        case 2:
          AppleBCMWLANBusInterfacePCIe::completeIOCtlRingStatusMsg(this, v6, (unsigned __int16 *)&bytes);
          break;
        case 4:
          AppleBCMWLANBusInterfacePCIe::completeFlowRingCreateResponseMsg(this, v6, (uint64_t)&bytes);
          break;
        case 6:
          AppleBCMWLANBusInterfacePCIe::completeFlowRingDeleteResponseMsg(this, v6, (uint64_t)&bytes);
          break;
        case 10:
          AppleBCMWLANBusInterfacePCIe::completeIOCtlRequestMsg(this, v6, (uint64_t)&bytes);
          break;
        case 12:
          AppleBCMWLANBusInterfacePCIe::completeIOCtlResponseMsg(this, v6, (uint64_t)&bytes);
          break;
        case 14:
          AppleBCMWLANBusInterfacePCIe::completeRxEventMsg(this, (uint64_t)a2, (uint64_t)&bytes);
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(*((void *)this + 9) + 312) + 192))(*(void *)(*((void *)this + 9) + 312), 1, 1);
          break;
        case 20:
          if (AppleBCMWLANBusInterface::getLogger(this))
          {
            AppleBCMWLANBusInterface::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v13 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
              CCLogStream::logCrit(v13, "[dk] %s@%d:Received kBCOMIPCDMATransferComplete (%d) message on ring %p\n", "drainControlCompleteRing", 12608, 20, a2);
            }
          }
          break;
        default:
          goto LABEL_32;
      }
      goto LABEL_36;
    }
    if (bytes <= 0x23u)
    {
      if (bytes == 29)
      {
        AppleBCMWLANBusInterfacePCIe::completeH2DRingCreate(this, v6, (uint64_t)&bytes);
        goto LABEL_36;
      }
      if (bytes == 30)
      {
        AppleBCMWLANBusInterfacePCIe::completeD2HRingCreate(this, v6, (uint64_t)&bytes);
        goto LABEL_36;
      }
    }
    else
    {
      switch(bytes)
      {
        case '$':
          AppleBCMWLANBusInterfacePCIe::handleMBData(this, HIDWORD(bytes));
          goto LABEL_36;
        case '-':
          AppleBCMWLANBusInterfacePCIe::completeH2DRingDelete(this, v6, (uint64_t)&bytes);
          goto LABEL_36;
        case '.':
          AppleBCMWLANBusInterfacePCIe::completeD2HRingDelete(this, v6, (uint64_t)&bytes);
LABEL_36:
          uint64_t v12 = 1;
          kdebug_trace();
          return v12;
      }
    }
LABEL_32:
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v22 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logCrit(v22, "[dk] %s@%d:Received %#X (%d) message on ring %p @ %p\n", "drainControlCompleteRing", 12650, bytes, bytes, a2, a3);
      }
    }
    AppleBCMWLANBusInterface::getLogger(this);
    AppleBCMWLANItemRing::getItemSize(a2);
    IO80211Hexdump();
    (*(void (**)(AppleBCMWLANRxItemRing *, const char *, uint64_t))(*(void *)a2 + 152))(a2, "ring", 1);
    keys = OSString::withCString("CmplRingMsg.bin");
    unsigned int ItemSize = AppleBCMWLANItemRing::getItemSize(a2);
    values = OSData::withBytes(&bytes, ItemSize);
    uint64_t v15 = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(this);
    uint64_t v16 = OSDictionary::withObjects((const OSObject **)&values, (const OSObject **)&keys, 1u, 0);
    CCFaultReporter::reportFault(v15, 5u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANBusInterfacePCIe.cpp", 0x3177u, "drainControlCompleteRing", v16, -469794037, "msgType=%u", bytes);
    AppleBCMWLANUtil::releaseOSObjectArray(&keys, (const OSString **)&values, (const OSObject **)1);
    goto LABEL_36;
  }
  return 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::fillRingEndpointMemory(AppleBCMWLANBusInterfacePCIe *this, AppleBCMWLANPCIeCompletionRing *a2, int a3)
{
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  LOWORD(v7) = (*(uint64_t (**)(AppleBCMWLANPCIeCompletionRing *))(*(void *)a2 + 208))(a2);
  BYTE2(v7) = (*(uint64_t (**)(AppleBCMWLANPCIeCompletionRing *))(*(void *)a2 + 216))(a2);
  WORD2(v7) = AppleBCMWLANItemRing::getItemCount(a2);
  HIWORD(v7) = AppleBCMWLANItemRing::getItemSize(a2);
  (*(void (**)(AppleBCMWLANPCIeCompletionRing *, unint64_t *))(*(void *)a2 + 240))(a2, &v8);
  AppleBCMWLANChipMemory::writeCommonRingMemory(*(AppleBCMWLANBusInterfacePCIe **)(*((void *)this + 9) + 3368), a3, (uint8_t *)&v7);
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  AppleBCMWLANChipMemory::readCommonRingMemory(*(AppleBCMWLANBusInterfacePCIe **)(*((void *)this + 9) + 3368), a3, (uint8_t *)&v7);
  return 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::createDynamicRings(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t v2 = 3758097086;
  v6[0] = this;
  v6[1] = AppleBCMWLANBusInterfacePCIe::D2HDebugRingCreateComplete;
  void v6[2] = 0;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  LOWORD(v7) = 3;
  BYTE2(v7) = 4;
  *(void *)((char *)&v7 + 4) = 0x4000000018;
  if (!AppleBCMWLANBusInterfacePCIe::createDynamicCompletionRing((uint64_t)this, (uint64_t)&v7, (uint64_t)v6, (uint64_t)AppleBCMWLANBusInterfacePCIe::drainDebugCompleteRing, (uint64_t)AppleBCMWLANBusInterfacePCIe::ringErrorAction))
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:Create debug buffer completion ring\n", "createDynamicRings", 8473);
      }
    }
    (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 9) + 3832) + 120))(*(void *)(*((void *)this + 9) + 3832), 5000);
    uint64_t v3 = *((void *)this + 9);
    if (!*(unsigned char *)(v3 + 4526)) {
      return 0;
    }
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    LOWORD(v7) = 4;
    BYTE2(v7) = 8;
    *(void *)((char *)&v7 + 4) = 0x10000000018;
    if (!AppleBCMWLANPCIeSkywalk::createLowLatencyCompRing(*(void *)(v3 + 4472), (uint64_t)&v7, 0))
    {
      long long v9 = 0u;
      long long v10 = 0u;
      long long v7 = 0u;
      long long v8 = 0u;
      LOWORD(v7) = 5;
      BYTE2(v7) = 9;
      *(void *)((char *)&v7 + 4) = 0x10000000028;
      if (!AppleBCMWLANPCIeSkywalk::createLowLatencyCompRing(*(void *)(*((void *)this + 9) + 4472), (uint64_t)&v7, 1u))return 0; {
    }
      }
  }
  return v2;
}

uint64_t AppleBCMWLANBusInterfacePCIe::D2HDebugRingCreateComplete(AppleBCMWLANBusInterfacePCIe *this, AppleBCMWLANPCIeCompletionRing *a2, uint64_t a3, void *a4)
{
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      uint64_t v13 = (const char *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *, uint64_t))(*(void *)this + 104))(this, a3);
      CCLogStream::logCrit(Logger, "[dk] %s@%d:%s\n", "D2HDebugRingCreateComplete", 20333, v13);
    }
  }
  *(void *)(*((void *)this + 9) + 336) = a2;
  if (!a3)
  {
    v20[0] = this;
    v20[1] = AppleBCMWLANBusInterfacePCIe::H2DDebugRingCreateComplete;
    void v20[2] = 0;
    long long v15 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    LOWORD(v15) = 2;
    BYTE2(v15) = 5;
    *(void *)((char *)&v15 + 4) = 0x4000000028;
    uint64_t v16 = AppleBCMWLANBusInterfacePCIe::workPendingForDebug;
    unsigned int v17 = this;
    uint64_t result = AppleBCMWLANBusInterfacePCIe::createDynamicSubmissionRing((uint64_t)this, *(void *)(*((void *)this + 9) + 336), (uint64_t)&v15, (uint64_t)v20, (uint64_t)AppleBCMWLANBusInterfacePCIe::fillDebugSubmitRing, (uint64_t)AppleBCMWLANBusInterfacePCIe::ringErrorAction);
    if (!result) {
      return result;
    }
    int v9 = result;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        long long v10 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logCrit(v10, "[dk] %s@%d:createDynamicSubmissionRing() failed with 0x%x\n", "D2HDebugRingCreateComplete", 20362, v9);
      }
    }
  }
  (*(void (**)(void))(**(void **)(*((void *)this + 9) + 3832) + 72))(*(void *)(*((void *)this + 9) + 3832));
  if (*(unsigned char *)(*((void *)this + 9) + 1308))
  {
    uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
    if (result)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        long long v8 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        return CCLogStream::logCrit(v8, "[dk] %s@%d:Trackers being flushed; skip triggering fault-reporter\n");
      }
    }
  }
  else
  {
    FaultReporter = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(this);
    uint64_t result = CCFaultReporter::reportFault(FaultReporter, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANBusInterfacePCIe.cpp", 0x4F94u, "D2HDebugRingCreateComplete", 0, -469794022, 0);
    if (result)
    {
      uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
      if (result)
      {
        AppleBCMWLANBusInterface::getLogger(this);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          int v14 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          return CCLogStream::logCrit(v14, "[dk] %s@%d:Failed to report fault with 0x%x\n");
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::createDynamicCompletionRing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = 3758097090;
  if (!a2 || !a3 || !*(void *)a3 || !*(void *)(a3 + 8)) {
    return v5;
  }
  long long v10 = AppleBCMWLANDynamicRingOperationContext::withCompletion((long long *)a3);
  if (!v10) {
    return 3758097085;
  }
  int v11 = v10;
  if (a4)
  {
    uint64_t v12 = a4;
    if (a5)
    {
LABEL_8:
      uint64_t v13 = a5;
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v12 = 0;
    if (a5) {
      goto LABEL_8;
    }
  }
  uint64_t v13 = 0;
LABEL_12:
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t (*)(void *, AppleBCMWLANDynamicRingOperationContext *, uint64_t, uint64_t, uint64_t), OSObject *, uint64_t, uint64_t, uint64_t))(**(void **)(*(void *)(a1 + 72) + 3472) + 56))(*(void *)(*(void *)(a1 + 72) + 3472), AppleBCMWLANBusInterfacePCIe::createDynamicCompletionRingGated, v10, a2, v12, v13);
  if (v5) {
    ((void (*)(OSObject *))v11->release)(v11);
  }
  return v5;
}

uint64_t AppleBCMWLANBusInterfacePCIe::drainDebugCompleteRing(AppleBCMWLANBusInterfacePCIe *this, AppleBCMWLANRxItemRing *a2, void *a3)
{
  if (!*(unsigned char *)(*((void *)this + 9) + 1306)) {
    return 0;
  }
  long long bytes = *(_OWORD *)a3;
  uint64_t v30 = a3[2];
  int v6 = BYTE2(bytes) >> 7;
  if (v6 != (*(unsigned int (**)(AppleBCMWLANRxItemRing *))(*(void *)a2 + 248))(a2))
  {
    if ((*(unsigned int (**)(AppleBCMWLANRxItemRing *))(*(void *)a2 + 248))(a2) != BYTE2(bytes) >> 7)
    {
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          int v24 = (*(uint64_t (**)(AppleBCMWLANRxItemRing *))(*(void *)a2 + 248))(a2);
          int v25 = (*(uint64_t (**)(AppleBCMWLANRxItemRing *))(*(void *)a2 + 224))(a2);
          int v26 = (*(uint64_t (**)(AppleBCMWLANRxItemRing *))(*(void *)a2 + 232))(a2);
          CCLogStream::logCrit(Logger, "[dk] %s@%d:Unexpected phaseBit on control completion ring. got=%d expect=%d. At {%d %d}\n", "drainDebugCompleteRing", 12351, v6, v24, v25, v26);
        }
      }
    }
    keys = OSString::withCString("DebugCmplRingMsg.bin");
    unsigned int ItemSize = AppleBCMWLANItemRing::getItemSize(a2);
    values = OSData::withBytes(&bytes, ItemSize);
    FaultReporter = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(this);
    int v9 = OSDictionary::withObjects((const OSObject **)&values, (const OSObject **)&keys, 1u, 0);
    int v10 = BYTE2(bytes) >> 7;
    int v11 = (*(uint64_t (**)(AppleBCMWLANRxItemRing *))(*(void *)a2 + 248))(a2);
    int v12 = (*(uint64_t (**)(AppleBCMWLANRxItemRing *))(*(void *)a2 + 224))(a2);
    int v13 = (*(uint64_t (**)(AppleBCMWLANRxItemRing *))(*(void *)a2 + 232))(a2);
    CCFaultReporter::reportFault(FaultReporter, 5u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANBusInterfacePCIe.cpp", 0x304Au, "drainDebugCompleteRing", v9, -469794021, "phase=%u,expect=%u,r=%u,w=%u", v10, v11, v12, v13);
    AppleBCMWLANUtil::releaseOSObjectArray(&keys, (const OSString **)&values, (const OSObject **)1);
  }
  int v14 = bytes;
  uint64_t v15 = AppleBCMWLANBusInterface::getLogger(this);
  if (v14 == 26)
  {
    if (v15)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        int v21 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlertIf(v21, 0x1000000uLL, "[dk] %s@%d:Received kBCOMIPCDMADbgBuffercomplete message\n", "drainDebugCompleteRing", 12369);
      }
    }
    AppleBCMWLANBusInterfacePCIe::completeDebugBufferCompletetMsg(this, v16, (uint64_t)a3);
  }
  else
  {
    if (v15)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v22 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logCrit(v22, "[dk] %s@%d:Received %#X (%d) message on ring %p @ %p\n", "drainDebugCompleteRing", 12374, bytes, bytes, a2, a3);
      }
    }
    AppleBCMWLANBusInterface::getLogger(this);
    AppleBCMWLANItemRing::getItemSize(a2);
    IO80211Hexdump();
    (*(void (**)(AppleBCMWLANRxItemRing *, const char *, uint64_t))(*(void *)a2 + 152))(a2, "ring", 1);
    keys = OSString::withCString("DebugCmplRingMsg.bin");
    unsigned int v18 = AppleBCMWLANItemRing::getItemSize(a2);
    values = OSData::withBytes(&bytes, v18);
    long long v19 = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(this);
    int v20 = OSDictionary::withObjects((const OSObject **)&values, (const OSObject **)&keys, 1u, 0);
    CCFaultReporter::reportFault(v19, 5u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANBusInterfacePCIe.cpp", 0x3064u, "drainDebugCompleteRing", v20, -469794037, "msgType=%u", bytes);
    AppleBCMWLANUtil::releaseOSObjectArray(&keys, (const OSString **)&values, (const OSObject **)1);
  }
  return 1;
}

uint64_t AppleBCMWLANBusInterfacePCIe::createDynamicSubmissionRing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = 3758097090;
  if (!a2 || !a3 || !a4 || !*(void *)a4 || !*(void *)(a4 + 8)) {
    return v6;
  }
  int v12 = AppleBCMWLANDynamicRingOperationContext::withCompletion((long long *)a4);
  if (!v12) {
    return 3758097085;
  }
  int v13 = v12;
  AppleBCMWLANDynamicRingOperationContext::setCompletionRingPtr((uint64_t)v12, a2);
  if (a5)
  {
    uint64_t v14 = a5;
    if (a6)
    {
LABEL_9:
      uint64_t v15 = a6;
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v14 = 0;
    if (a6) {
      goto LABEL_9;
    }
  }
  uint64_t v15 = 0;
LABEL_13:
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t (*)(void *, AppleBCMWLANDynamicRingOperationContext *, uint64_t, uint64_t, uint64_t), OSObject *, uint64_t, uint64_t, uint64_t))(**(void **)(*(void *)(a1 + 72) + 3472) + 56))(*(void *)(*(void *)(a1 + 72) + 3472), AppleBCMWLANBusInterfacePCIe::createDynamicSubmissionRingGated, v13, a3, v14, v15);
  if (v6) {
    ((void (*)(OSObject *))v13->release)(v13);
  }
  return v6;
}

uint64_t AppleBCMWLANBusInterfacePCIe::createDynamicSubmissionRingGated(void *a1, AppleBCMWLANDynamicRingOperationContext *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!*(unsigned char *)(a1[9] + 1306)) {
    return 3758097112;
  }
  if (a4)
  {
    uint64_t v8 = a4;
    if (a5)
    {
LABEL_4:
      uint64_t v9 = a5;
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v8 = 0;
    if (a5) {
      goto LABEL_4;
    }
  }
  uint64_t v9 = 0;
LABEL_8:
  uint64_t v15 = 0;
  uint64_t RingOperationCompletionPtr = (void *)AppleBCMWLANDynamicRingOperationContext::getRingOperationCompletionPtr(this);
  uint64_t v10 = (*(uint64_t (**)(void *, uint64_t *, uint64_t, void, void, uint64_t, uint64_t))(*a1 + 1080))(a1, &v15, a3, *RingOperationCompletionPtr, 0, v8, v9);
  AppleBCMWLANDynamicRingOperationContext::setSubmissionRingPtr((uint64_t)this, v15);
  if (v10) {
    return v10;
  }
  uint64_t v12 = a1[9];
  uint64_t result = AppleBCMWLANDynamicRingOperationContext::getChain(this);
  uint64_t v14 = *(void **)(v12 + 4120);
  if (*v14 == v12 + 4112)
  {
    *(void *)uint64_t result = v12 + 4112;
    *(void *)(result + 8) = v14;
    *uint64_t v14 = result;
    *(void *)(v12 + 4120) = result;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1[9] + 312) + 192))(*(void *)(a1[9] + 312), 1, 1);
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::createSubmissionRing(AppleBCMWLANBusInterface *this, OSObject **a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = 3758097090;
  if (a2 && a3 && a4)
  {
    uint64_t v29 = 0;
    long long v14 = a3[1];
    v23[0] = *a3;
    v23[1] = v14;
    long long v15 = a3[3];
    _OWORD v23[2] = a3[2];
    long long v24 = v15;
    uint64_t v16 = (void *)*((void *)this + 9);
    if (!(void)v15)
    {
      *(void *)&long long v24 = v16[455];
      DWORD2(v24) = 1000;
    }
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v17 = v16[19];
    uint64_t v27 = v16[12];
    uint64_t v28 = v17;
    uint64_t v18 = v16[406];
    uint64_t v19 = v16[407];
    uint64_t v30 = 0;
    uint64_t v31 = v19;
    uint64_t v32 = v18;
    uint64_t Logger = AppleBCMWLANBusInterface::getLogger(this);
    int v21 = AppleBCMWLANPCIeSubmissionRing::withOptions(a4, a6, a7, (uint64_t)v23, Logger);
    if (v21)
    {
      uint64_t v22 = v21;
      AppleBCMWLANItemRing::setMMIORecorder((uint64_t)v21, *(AppleBCMWLANPCIeMMIOHistory **)(*((void *)this + 9) + 3144));
      if (a5) {
        (*(void (**)(void, void *(*)(uint64_t, AppleBCMWLANPCIeSubmissionRing *, uint64_t), OSObject *, uint64_t, void, void))(**(void **)(*((void *)this + 9) + 3472) + 56))(*(void *)(*((void *)this + 9) + 3472), AppleBCMWLANBusInterfacePCIe::enableSubmissionRingGated, v22, a5, 0, 0);
      }
      uint64_t result = 0;
      *a2 = v22;
    }
    else
    {
      return 3758097086;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::createSubmissionRing(uint64_t a1, OSObject **a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return AppleBCMWLANBusInterfacePCIe::createSubmissionRing((AppleBCMWLANBusInterface *)(a1 - 64), a2, a3, a4, a5, a6, a7);
}

void *AppleBCMWLANBusInterfacePCIe::enableSubmissionRingGated(uint64_t a1, AppleBCMWLANPCIeSubmissionRing *a2, uint64_t a3)
{
  (*(void (**)(uint64_t))(*(void *)a3 + 64))(a3);
  (*(void (**)(AppleBCMWLANPCIeSubmissionRing *))(*(void *)a2 + 64))(a2);
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t result = (void *)AppleBCMWLANPCIeSubmissionRing::getChain(a2);
  long long v7 = *(void **)(v5 + 288);
  if (*v7 == v5 + 280)
  {
    *uint64_t result = v5 + 280;
    result[1] = v7;
    *long long v7 = result;
    *(void *)(v5 + 288) = result;
    return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::createDynamicCompletionRingGated(void *a1, AppleBCMWLANDynamicRingOperationContext *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!*(unsigned char *)(a1[9] + 1306)) {
    return 3758097112;
  }
  if (a4)
  {
    uint64_t v8 = a4;
    if (a5)
    {
LABEL_4:
      uint64_t v9 = a5;
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v8 = 0;
    if (a5) {
      goto LABEL_4;
    }
  }
  uint64_t v9 = 0;
LABEL_8:
  uint64_t v15 = 0;
  uint64_t RingOperationCompletionPtr = (void *)AppleBCMWLANDynamicRingOperationContext::getRingOperationCompletionPtr(this);
  uint64_t v10 = (*(uint64_t (**)(void *, uint64_t *, uint64_t, void, void, uint64_t, uint64_t))(*a1 + 1088))(a1, &v15, a3, *RingOperationCompletionPtr, 0, v8, v9);
  AppleBCMWLANDynamicRingOperationContext::setCompletionRingPtr((uint64_t)this, v15);
  if (v10) {
    return v10;
  }
  uint64_t v12 = a1[9];
  uint64_t result = AppleBCMWLANDynamicRingOperationContext::getChain(this);
  long long v14 = *(void **)(v12 + 4136);
  if (*v14 == v12 + 4128)
  {
    *(void *)uint64_t result = v12 + 4128;
    *(void *)(result + 8) = v14;
    *long long v14 = result;
    *(void *)(v12 + 4136) = result;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1[9] + 312) + 192))(*(void *)(a1[9] + 312), 1, 1);
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::createCompletionRing(AppleBCMWLANBusInterface *this, OSObject **a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = 3758097090;
  if (a2 && a3 && a4)
  {
    uint64_t v29 = 0;
    long long v14 = a3[1];
    v23[0] = *a3;
    v23[1] = v14;
    long long v15 = a3[3];
    _OWORD v23[2] = a3[2];
    long long v24 = v15;
    uint64_t v16 = (void *)*((void *)this + 9);
    if (!(void)v15)
    {
      *(void *)&long long v24 = v16[455];
      DWORD2(v24) = 1000;
    }
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v17 = v16[33];
    uint64_t v27 = v16[26];
    uint64_t v28 = v17;
    uint64_t v18 = v16[406];
    uint64_t v19 = v16[407];
    uint64_t v30 = 0;
    uint64_t v31 = v19;
    uint64_t v32 = v18;
    uint64_t Logger = AppleBCMWLANBusInterface::getLogger(this);
    int v21 = AppleBCMWLANPCIeCompletionRing::withOptions(a4, a6, a7, (uint64_t)v23, Logger);
    if (v21)
    {
      uint64_t v22 = v21;
      AppleBCMWLANItemRing::setMMIORecorder((uint64_t)v21, *(AppleBCMWLANPCIeMMIOHistory **)(*((void *)this + 9) + 3144));
      if (a5) {
        (*(void (**)(void, void *(*)(uint64_t, AppleBCMWLANPCIeCompletionRing *, uint64_t), OSObject *, uint64_t, void, void))(**(void **)(*((void *)this + 9) + 3472) + 56))(*(void *)(*((void *)this + 9) + 3472), AppleBCMWLANBusInterfacePCIe::enableCompletionRingGated, v22, a5, 0, 0);
      }
      uint64_t result = 0;
      *a2 = v22;
    }
    else
    {
      return 3758097086;
    }
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::enableCompletionRing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, void *(*)(uint64_t, AppleBCMWLANPCIeCompletionRing *, uint64_t), uint64_t, uint64_t, void, void))(**(void **)(*(void *)(a1 + 72) + 3472) + 56))(*(void *)(*(void *)(a1 + 72) + 3472), AppleBCMWLANBusInterfacePCIe::enableCompletionRingGated, a2, a3, 0, 0);
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::createCompletionRing(uint64_t a1, OSObject **a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return AppleBCMWLANBusInterfacePCIe::createCompletionRing((AppleBCMWLANBusInterface *)(a1 - 64), a2, a3, a4, a5, a6, a7);
}

void *AppleBCMWLANBusInterfacePCIe::enableCompletionRingGated(uint64_t a1, AppleBCMWLANPCIeCompletionRing *a2, uint64_t a3)
{
  (*(void (**)(uint64_t))(*(void *)a3 + 64))(a3);
  (*(void (**)(AppleBCMWLANPCIeCompletionRing *))(*(void *)a2 + 64))(a2);
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t result = (void *)AppleBCMWLANPCIeCompletionRing::getChain(a2);
  long long v7 = *(void **)(v5 + 304);
  if (*v7 == v5 + 296)
  {
    *uint64_t result = v5 + 296;
    result[1] = v7;
    *long long v7 = result;
    *(void *)(v5 + 304) = result;
    return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::disableSubmissionRingGated(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 && (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2))
  {
    uint64_t v6 = *(void **)(*(void *)(a1 + 72) + 280);
    while (v6 != (void *)(*(void *)(a1 + 72) + 280))
    {
      long long v7 = v6;
      uint64_t v6 = (void *)*v6;
      uint64_t result = AppleBCMWLANPCIeSubmissionRing::getRingFromChain((uint64_t)v7);
      if (result == a2)
      {
        uint64_t v9 = (void *)v7[1];
        if ((void *)*v9 == v7)
        {
          uint64_t v10 = *v7;
          if (*(void **)(*v7 + 8) == v7)
          {
            *(void *)(v10 + 8) = v9;
            void *v9 = v10;
            *long long v7 = 0;
            v7[1] = 0;
            (*(void (**)(uint64_t))(*(void *)a2 + 72))(a2);
            (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 72))(a3, a2);
            return 0;
          }
        }
        __break(1u);
        return result;
      }
    }
  }
  return 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::destroyDynamicCompletionRing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 3758097090;
  if (a2 && a3 && *(void *)a3 && *(void *)(a3 + 8))
  {
    uint64_t v6 = AppleBCMWLANDynamicRingOperationContext::withCompletion((long long *)a3);
    if (v6)
    {
      long long v7 = v6;
      AppleBCMWLANDynamicRingOperationContext::setCompletionRingPtr((uint64_t)v6, a2);
      uint64_t v3 = (*(uint64_t (**)(void, uint64_t (*)(AppleBCMWLANBusInterfacePCIe *, AppleBCMWLANDynamicRingOperationContext *), OSObject *, void, void, void))(**(void **)(*(void *)(a1 + 72) + 3472) + 56))(*(void *)(*(void *)(a1 + 72) + 3472), AppleBCMWLANBusInterfacePCIe::destroyDynamicCompletionRingGated, v7, 0, 0, 0);
      if (v3 == -536870166)
      {
        ((void (*)(OSObject *))v7->release)(v7);
        return 3758097130;
      }
    }
    else
    {
      return 3758097085;
    }
  }
  return v3;
}

uint64_t AppleBCMWLANBusInterfacePCIe::destroyDynamicCompletionRingGated(AppleBCMWLANBusInterfacePCIe *this, AppleBCMWLANDynamicRingOperationContext *a2)
{
  uint64_t v2 = *((void *)this + 9);
  if (!*(unsigned char *)(v2 + 1306)) {
    return 3758097130;
  }
  uint64_t result = AppleBCMWLANDynamicRingOperationContext::getChain(a2);
  uint64_t v5 = *(void **)(v2 + 4168);
  if (*v5 == v2 + 4160)
  {
    *(void *)uint64_t result = v2 + 4160;
    *(void *)(result + 8) = v5;
    *uint64_t v5 = result;
    *(void *)(v2 + 4168) = result;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(*((void *)this + 9) + 312) + 192))(*(void *)(*((void *)this + 9) + 312), 1, 1);
    return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::disableCompletionRing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, void, void))(**(void **)(*(void *)(a1 + 72) + 3472) + 56))(*(void *)(*(void *)(a1 + 72) + 3472), AppleBCMWLANBusInterfacePCIe::disableCompletionRingGated, a2, a3, 0, 0);
}

uint64_t AppleBCMWLANBusInterfacePCIe::disableCompletionRingGated(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 && (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2))
  {
    uint64_t v6 = *(void **)(*(void *)(a1 + 72) + 296);
    while (v6 != (void *)(*(void *)(a1 + 72) + 296))
    {
      long long v7 = v6;
      uint64_t v6 = (void *)*v6;
      uint64_t result = AppleBCMWLANPCIeCompletionRing::getRingFromChain((uint64_t)v7);
      if (result == a2)
      {
        uint64_t v9 = (void *)v7[1];
        if ((void *)*v9 == v7)
        {
          uint64_t v10 = *v7;
          if (*(void **)(*v7 + 8) == v7)
          {
            *(void *)(v10 + 8) = v9;
            void *v9 = v10;
            *long long v7 = 0;
            v7[1] = 0;
            (*(void (**)(uint64_t))(*(void *)a2 + 72))(a2);
            (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 72))(a3, a2);
            return 0;
          }
        }
        __break(1u);
        return result;
      }
    }
  }
  return 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::createTransmitFlowRing(AppleBCMWLANBusInterface *this, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, __int16 a9)
{
  __int16 v32 = -1;
  uint64_t v10 = *((void *)this + 9);
  if (*(unsigned char *)(v10 + 1306))
  {
    if (!*(void *)(a3 + 48))
    {
      *(void *)(a3 + 48) = *(void *)(v10 + 3640);
      *(_DWORD *)(a3 + 56) = 1000;
      uint64_t v10 = *((void *)this + 9);
    }
    *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)unsigned int v33 = v15;
    *(_OWORD *)&v33[16] = v15;
    *(_OWORD *)&v33[32] = v15;
    *(_OWORD *)&v33[48] = v15;
    *(_OWORD *)&v37[16] = v15;
    *(_OWORD *)&v37[32] = v15;
    *(_OWORD *)int v37 = v15;
    long long v35 = v15;
    long long v36 = v15;
    *(_OWORD *)&v33[64] = v15;
    long long v34 = v15;
    long long v16 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&v33[8] = *(_OWORD *)a3;
    *(_OWORD *)&v33[24] = v16;
    long long v17 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)&v33[40] = *(_OWORD *)(a3 + 32);
    *(_OWORD *)&v33[56] = v17;
    *(void *)int v37 = *(void *)(v10 + 3248);
    *((void *)&v36 + 1) = *(void *)(v10 + 3256);
    uint64_t v18 = *(void *)(v10 + 96);
    long long v19 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)&v37[8] = *(_OWORD *)a5;
    uint64_t v20 = *(void *)(v10 + 152);
    *((void *)&v34 + 1) = v18;
    *(void *)&long long v35 = v20;
    *(_OWORD *)&v37[24] = v19;
    v37[40] = a8;
    *(_WORD *)&v37[41] = 0;
    v37[43] = 0;
    *(_WORD *)unsigned int v33 = a9;
    uint64_t v38 = *(void *)(a5 + 24);
    uint64_t Logger = AppleBCMWLANBusInterface::getLogger(this);
    uint64_t v22 = AppleBCMWLANPCIeTransmitFlowRing::withOptions(a4, a6, a7, (uint64_t)v33, Logger);
    if (v22)
    {
      uint64_t v23 = (uint64_t)v22;
      uint64_t v24 = AppleBCMWLANHashtable::add(*(AppleBCMWLANHashtable **)(*((void *)this + 9) + 1088), v22, (unsigned __int16 *)&v32);
      if (v24)
      {
        uint64_t v25 = v24;
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v31 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logCrit(v31, "[dk] %s@%d:Failed to add flow to tracker\n", "createTransmitFlowRing", 9034);
          }
        }
        (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
      }
      else
      {
        (*(void (**)(uint64_t))(*(void *)v23 + 72))(v23);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 320))(v23, 1);
        int v27 = 1 << ((*(uint64_t (**)(uint64_t))(*(void *)v23 + 208))(v23) & 7);
        uint64_t v28 = *((void *)this + 9);
        unsigned int v29 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 208))(v23);
        *(unsigned char *)(v28 + ((unint64_t)v29 >> 3) + 5160) |= v27;
        (*(void (**)(uint64_t, void))(*(void *)v23 + 336))(v23, v32);
        AppleBCMWLANItemRing::setMMIORecorder(v23, *(AppleBCMWLANPCIeMMIOHistory **)(*((void *)this + 9) + 3144));
        uint64_t v25 = 0;
        *a2 = v23;
      }
    }
    else
    {
      return 3758097086;
    }
  }
  else
  {
    uint64_t v25 = 3758097112;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v26 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logCrit(v26, "[dk] %s@%d:createTransmitFlowRing: IPC not created\n", "createTransmitFlowRing", 8986);
      }
    }
  }
  return v25;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::createTransmitFlowRing(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, __int16 a9)
{
  return AppleBCMWLANBusInterfacePCIe::createTransmitFlowRing((AppleBCMWLANBusInterface *)(a1 - 64), a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t AppleBCMWLANBusInterfacePCIe::createFlow(AppleBCMWLANBusInterface *this, unsigned int a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v16 = *(CCLogStream **)(*((void *)this + 9) + 4600);
  if (v16 && CCLogStream::shouldLog(v16, 1uLL))
  {
    long long v30 = 0u;
    uint64_t v32 = 0;
    long long v31 = 0u;
    memset(&v29[2], 0, 80);
    *(_WORD *)unsigned int v29 = 23553;
    WORD6(v30) = 6149;
    AppleBCMWLANBusInterfacePCIe::pcapFillBusState(this, (uint64_t)&v29[2]);
    BYTE14(v30) = 0;
    LOWORD(v31) = a2;
    int v27 = *a3;
    HIBYTE(v30) = a3[13];
    *(_DWORD *)((char *)&v32 + 2) = 0;
    HIDWORD(v31) = *(_DWORD *)(a3 + 1);
    LOWORD(v32) = *(_WORD *)(a3 + 5);
    int v28 = *(_DWORD *)(a3 + 7);
    *(_DWORD *)((char *)&v31 + 2) = v27;
    *(_DWORD *)((char *)&v31 + 6) = v28;
    WORD5(v31) = *(_WORD *)(a3 + 11);
    CCLogStream::logHeaderAndBufIf(*(CCLogStream **)(*((void *)this + 9) + 4600), 1uLL, 0, 0, 0, 0, v29, 0x7AuLL);
  }
  if (a2 == 0xFFFF)
  {
    uint64_t v18 = 3758097086;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog()) {
        goto LABEL_11;
      }
    }
  }
  else
  {
    uint64_t v17 = *((void *)this + 9);
    if (*(void *)(v17 + 8 * a2 + 4808))
    {
      uint64_t v18 = 3758097086;
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
LABEL_11:
          uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logCrit(Logger, "[dk] %s@%d:[%d]Failed to create flow \n");
        }
      }
    }
    else
    {
      if (*(_DWORD *)(v17 + 372) <= a2 && *(_DWORD *)(v17 + 376) > a2)
      {
        *(void *)(v17 + 8 * a2 + 384) = 0;
        uint64_t v17 = *((void *)this + 9);
      }
      memset(v29, 0, 64);
      *(void *)&v29[48] = *(void *)(v17 + 3640);
      *(_DWORD *)&v29[56] = 1000;
      *(_WORD *)unsigned int v29 = a2;
      unsigned int v29[2] = 5;
      int v20 = *(_DWORD *)(v17 + 4452);
      if (!v20) {
        int v20 = 256;
      }
      *(_DWORD *)&v29[4] = 48;
      *(_DWORD *)&v29[8] = v20;
      *(void *)&v29[16] = a5;
      *(void *)&v29[24] = a4;
      int v21 = (*(uint64_t (**)(AppleBCMWLANBusInterface *, uint64_t, unsigned char *, uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t, _WORD))(*(void *)this + 1096))(this, v17 + 8 * a2 + 4808, v29, a4, a3, a6, a7, a8, a2);
      uint64_t v22 = *((void *)this + 9);
      if (v21)
      {
        uint64_t v18 = 3758097086;
        *(void *)(v22 + 8 * a2 + 4808) = 0;
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v23 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logCrit(v23, "[dk] %s@%d:Failed to create flow \n");
          }
        }
      }
      else
      {
        (*(void (**)(void, void))(**(void **)(v22 + 3464) + 64))(*(void *)(v22 + 3464), *(void *)(v22 + 8 * a2 + 4808));
        uint64_t v18 = 0;
        ++*(_DWORD *)(*((void *)this + 9) + 4612);
        uint64_t v24 = *((void *)this + 9);
        unsigned int v25 = *(_DWORD *)(v24 + 4608);
        if (v25 <= *(_DWORD *)(v24 + 4612)) {
          unsigned int v25 = *(_DWORD *)(v24 + 4612);
        }
        *(_DWORD *)(v24 + 4608) = v25;
      }
    }
  }
  return v18;
}

uint64_t AppleBCMWLANBusInterfacePCIe::pcapFillBusState(AppleBCMWLANBusInterface *a1, uint64_t a2)
{
  *(_DWORD *)a2 = *(_DWORD *)(*((void *)a1 + 9) + 1148);
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(*((void *)a1 + 9) + 1152);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(*((void *)a1 + 9) + 1160);
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(*((void *)a1 + 9) + 1156);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(*((void *)a1 + 9) + 1176);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(*((void *)a1 + 9) + 2840);
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(*((void *)a1 + 9) + 1180);
  *(unsigned char *)(a2 + 28) = *(unsigned char *)(*((void *)a1 + 9) + 1306);
  *(unsigned char *)(a2 + 29) = *(unsigned char *)(*((void *)a1 + 9) + 1304);
  *(unsigned char *)(a2 + 42) = (*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 9) + 3552) + 72))(*(void *)(*((void *)a1 + 9) + 3552));
  *(unsigned char *)(a2 + 40) = (*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 9) + 3560) + 72))(*(void *)(*((void *)a1 + 9) + 3560));
  *(unsigned char *)(a2 + 43) = (*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 9) + 3576) + 72))(*(void *)(*((void *)a1 + 9) + 3576));
  *(unsigned char *)(a2 + 41) = (*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 9) + 3568) + 72))(*(void *)(*((void *)a1 + 9) + 3568));
  *(unsigned char *)(a2 + 35) = (*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 9) + 1088) + 72))(*(void *)(*((void *)a1 + 9) + 1088));
  *(unsigned char *)(a2 + 36) = (*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 9) + 1096) + 72))(*(void *)(*((void *)a1 + 9) + 1096));
  *(unsigned char *)(a2 + 88) = (*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 9) + 1112) + 72))(*(void *)(*((void *)a1 + 9) + 1112));
  *(unsigned char *)(a2 + 89) = (*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 9) + 1120) + 72))(*(void *)(*((void *)a1 + 9) + 1120));
  *(unsigned char *)(a2 + 90) = (*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 9) + 1128) + 72))(*(void *)(*((void *)a1 + 9) + 1128));
  *(unsigned char *)(a2 + 91) = (*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 9) + 1136) + 72))(*(void *)(*((void *)a1 + 9) + 1136));
  *(_WORD *)(a2 + 52) = AppleBCMWLANBusInterface::getTxDescriptorCommandQueueSize(a1);
  *(_WORD *)(a2 + 54) = 0;
  *(_WORD *)(a2 + 48) = AppleBCMWLANBusInterface::getTxCompletionDescriptorCommandQueueSize(a1);
  uint64_t result = AppleBCMWLANBusInterface::getRxDescriptorCommandQueueSize(a1);
  *(_WORD *)(a2 + 44) = result;
  *(unsigned char *)(a2 + 30) = *(_DWORD *)(*((void *)a1 + 9) + 1224);
  *(unsigned char *)(a2 + 31) = *(_DWORD *)(*((void *)a1 + 9) + 1228);
  *(unsigned char *)(a2 + 32) = *(_WORD *)(*((void *)a1 + 9) + 1234);
  *(unsigned char *)(a2 + 33) = *(unsigned char *)(*((void *)a1 + 9) + 1232);
  *(unsigned char *)(a2 + 34) = *(unsigned char *)(*((void *)a1 + 9) + 2869);
  *(_DWORD *)(a2 + 56) = *(void *)(*((void *)a1 + 9) + 3016);
  *(_DWORD *)(a2 + 60) = *(void *)(*((void *)a1 + 9) + 3024);
  *(unsigned char *)(a2 + 39) = *(_DWORD *)(*((void *)a1 + 9) + 1236);
  *(unsigned char *)(a2 + 38) = *(_DWORD *)(*((void *)a1 + 9) + 1240);
  *(unsigned char *)(a2 + 37) = *(_DWORD *)(*((void *)a1 + 9) + 1208);
  *(_DWORD *)(a2 + 84) = *(_DWORD *)(*((void *)a1 + 9) + 1296);
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(*((void *)a1 + 9) + 1256);
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(*((void *)a1 + 9) + 1268);
  *(_DWORD *)(a2 + 76) = *(_DWORD *)(*((void *)a1 + 9) + 1272);
  *(_DWORD *)(a2 + 80) = *(_DWORD *)(*((void *)a1 + 9) + 1276);
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(*((void *)a1 + 9) + 1284);
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::createFlowCallback(AppleBCMWLANBusInterfacePCIe *this, int a2, unsigned int a3)
{
  uint64_t v6 = a3;
  long long v7 = *(AppleBCMWLANPCIeTransmitFlowRing **)(*((void *)this + 9) + 8 * a3 + 4808);
  if (!AppleBCMWLANBusInterface::getLogger(this)
    || (AppleBCMWLANBusInterface::getLogger(this), !CCLogStream::shouldLog()))
  {
    if (v7) {
      goto LABEL_4;
    }
LABEL_44:
    uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
    if (result)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        return CCLogStream::logCrit(Logger, "[dk] %s@%d:Unexpected flow create callback\n", "createFlowCallback", 9128);
      }
    }
    return result;
  }
  long long v31 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
  CCLogStream::logAlert(v31, "[dk] %s@%d:status: %d, flowID: %d\n", "createFlowCallback", 9125, a2, v6);
  if (!v7) {
    goto LABEL_44;
  }
LABEL_4:
  if ((*(unsigned int (**)(AppleBCMWLANPCIeTransmitFlowRing *))(*(void *)v7 + 312))(v7) == 2)
  {
    uint64_t v8 = *((void *)this + 9);
    if (*(_DWORD *)(v8 + 372) <= a3 && *(_DWORD *)(v8 + 376) > a3) {
      *(void *)(v8 + 8 * v6 + 384) = 0;
    }
    if (!AppleBCMWLANPCIeTransmitFlowRing::isSkywalkFlow(v7))
    {
      uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
      if (result && (AppleBCMWLANBusInterface::getLogger(this), uint64_t result = CCLogStream::shouldLog(), result))
      {
        long long v34 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        uint64_t result = CCLogStream::logAlert(v34, "[dk] %s@%d:Flow is not skywalk\n", "createFlowCallback", 9205);
        if (!a2) {
          return result;
        }
      }
      else if (!a2)
      {
        return result;
      }
      goto LABEL_25;
    }
    if (a2)
    {
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          long long v35 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v35, "[dk] %s@%d:Create Flow Queue Failure with status: 0x%x (flowID %d)\n", "createFlowCallback", 9148, a2, a3);
        }
      }
      uint64_t v9 = *(AppleBCMWLANPCIeSkywalk **)(*((void *)this + 9) + 4472);
      int v10 = (*(uint64_t (**)(AppleBCMWLANPCIeTransmitFlowRing *))(*(void *)v7 + 392))(v7);
      unsigned __int8 v11 = (*(uint64_t (**)(AppleBCMWLANPCIeTransmitFlowRing *))(*(void *)v7 + 368))(v7);
      int v12 = AppleBCMWLANPCIeSkywalk::clearFlowIdInFlowQ(v9, v10, v11, a3);
      if (v12)
      {
        int v13 = v12;
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            long long v36 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            int v37 = (*(uint64_t (**)(AppleBCMWLANPCIeTransmitFlowRing *))(*(void *)v7 + 392))(v7);
            uint64_t v38 = "kIOReturnError";
            if (v13 == -536870198) {
              uint64_t v38 = "kIOReturnIOError";
            }
            CCLogStream::logAlert(v36, "[dk] %s@%d:Failed to unassign FlowId from flowQ - IfId:%d Error:%s\n", "createFlowCallback", 9155, v37, v38);
          }
        }
      }
      if (((*(uint64_t (**)(AppleBCMWLANPCIeTransmitFlowRing *))(*(void *)v7 + 392))(v7) & 0xFE) == 2)
      {
        char v14 = (*(uint64_t (**)(AppleBCMWLANPCIeTransmitFlowRing *))(*(void *)v7 + 368))(v7);
        LOBYTE(v40) = (*(uint64_t (**)(AppleBCMWLANPCIeTransmitFlowRing *))(*(void *)v7 + 392))(v7);
        BYTE1(v40) = v14;
        *(_DWORD *)((char *)&v40 + 2) = 0;
        HIWORD(v40) = 0;
        (*(void (**)(AppleBCMWLANPCIeTransmitFlowRing *, char *))(*(void *)v7 + 400))(v7, (char *)&v40 + 2);
        long long v15 = (const OSMetaClassBase *)IO80211FlowQueueDatabase::find(*(IO80211FlowQueueDatabase **)(*((void *)this + 9) + 1312), v40);
        long long v16 = OSMetaClassBase::safeMetaCast(v15, (const OSMetaClass *)gAppleBCMWLANPCIeFlowQueueMetaClass);
        if (v16)
        {
          AppleBCMWLANPCIeFlowQueue::clearFlowId((uint64_t)v16);
        }
        else if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v39 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v39, "[dk] %s@%d:Failed to map FlowID %d to FlowQueue\n", "createFlowCallback", 9170, a3);
          }
        }
        if (*(unsigned char *)(*((void *)this + 9) + 1308))
        {
          if (AppleBCMWLANBusInterface::getLogger(this))
          {
            AppleBCMWLANBusInterface::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v26 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
              CCLogStream::logCrit(v26, "[dk] %s@%d:Trackers being flushed; skip triggering fault-reporter\n",
                "createFlowCallback",
                9178);
            }
          }
        }
        else
        {
          FaultReporter = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(this);
          int v28 = CCFaultReporter::reportFault(FaultReporter, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANBusInterfacePCIe.cpp", 0x23D6u, "createFlowCallback", 0, -469794006, 0);
          if (v28)
          {
            int v29 = v28;
            if (AppleBCMWLANBusInterface::getLogger(this))
            {
              AppleBCMWLANBusInterface::getLogger(this);
              if (CCLogStream::shouldLog())
              {
                long long v30 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                CCLogStream::logAlert(v30, "[dk] %s@%d:Failed to report fault with status: 0x%x\n", "createFlowCallback", 9176, v29);
              }
            }
          }
        }
      }
LABEL_25:
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v33 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v33, "[dk] %s@%d:Failed to assign flow 0x%x\n", "createFlowCallback", 9212, a3);
        }
      }
      return AppleBCMWLANBusInterfacePCIe::deleteFlowCallback(this, 0, a3);
    }
    int v19 = 1 << ((*(uint64_t (**)(AppleBCMWLANPCIeTransmitFlowRing *))(*(void *)v7 + 208))(v7) & 7);
    uint64_t v20 = *((void *)this + 9);
    unsigned int v21 = (*(uint64_t (**)(AppleBCMWLANPCIeTransmitFlowRing *))(*(void *)v7 + 208))(v7);
    *(unsigned char *)(v20 + ((unint64_t)v21 >> 3) + 5160) &= ~(_BYTE)v19;
    uint64_t v22 = *(AppleBCMWLANPCIeSkywalk **)(*((void *)this + 9) + 4472);
    int v23 = (*(uint64_t (**)(AppleBCMWLANPCIeTransmitFlowRing *))(*(void *)v7 + 392))(v7);
    unsigned __int8 v24 = (*(uint64_t (**)(AppleBCMWLANPCIeTransmitFlowRing *))(*(void *)v7 + 368))(v7);
    AppleBCMWLANPCIeSkywalk::attachTxSubmRing(v22, v7, v23, v24, a3);
    (*(void (**)(AppleBCMWLANPCIeTransmitFlowRing *, uint64_t))(*(void *)v7 + 320))(v7, 3);
    unsigned int v25 = *(uint64_t (**)(AppleBCMWLANPCIeTransmitFlowRing *))(*(void *)v7 + 64);
    return v25(v7);
  }
  else
  {
    uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
    if (result)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v18 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        return CCLogStream::logAlert(v18, "[dk] %s@%d:State changed while creating\n", "createFlowCallback", 9133);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::deleteFlowCallback(AppleBCMWLANBusInterfacePCIe *this, int a2, unsigned int a3)
{
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:status: %#x, flowID: %d\n", "deleteFlowCallback", 9286, a2, a3);
    }
  }
  (*(void (**)(void))(**(void **)(*((void *)this + 9) + 3592) + 136))(*(void *)(*((void *)this + 9) + 3592));
  uint64_t v6 = *(void *)(*((void *)this + 9) + 8 * a3 + 4808);
  if (v6)
  {
    AppleBCMWLANBusInterfacePCIe::invalidateFlowId(this, a3);
    AppleBCMWLANPCIeSubmissionRing::resetSharedPointers(v6);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 320))(v6, 6);
    unint64_t v7 = *((void *)this + 9) + ((unint64_t)a3 >> 3);
    *(unsigned char *)(v7 + 5166) &= ~(1 << (a3 & 7));
    if (a2)
    {
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          unsigned __int8 v11 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v11, "[dk] %s@%d:Failed to unassign flow\n", "deleteFlowCallback", 9302);
        }
      }
    }
    uint64_t v8 = *((void *)this + 9);
    if (*(_DWORD *)(v8 + 372) <= a3 && *(_DWORD *)(v8 + 376) > a3)
    {
      *(void *)(v8 + 8 * a3 + 736) = 0;
      uint64_t v8 = *((void *)this + 9);
    }
    uint64_t result = *(void *)(v8 + 8 * a3 + 4808);
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      *(void *)(*((void *)this + 9) + 8 * a3 + 4808) = 0;
    }
  }
  else
  {
    uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
    if (result)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v12 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        return CCLogStream::logCrit(v12, "[dk] %s@%d:Unexpected flow deletion callback\n", "deleteFlowCallback", 9291);
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::deleteFlow(AppleBCMWLANBusInterfacePCIe *this, unsigned int a2, int a3)
{
  __int16 v27 = -1;
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(Logger, "[dk] %s@%d: Flow ID: %d, Reason: %d\n", "deleteFlow", 9224, a2, a3);
    }
  }
  uint64_t v6 = *((void *)this + 9) + 4 * a2;
  *(_WORD *)(v6 + 1866) &= ~1u;
  uint64_t v7 = *((void *)this + 9);
  if (*(void *)(v7 + 8 * a2 + 4808))
  {
    if (*(_DWORD *)(v7 + 372) <= a2 && *(_DWORD *)(v7 + 376) > a2)
    {
      *(void *)(v7 + 8 * a2 + 736) = 0;
      uint64_t v7 = *((void *)this + 9);
    }
    uint64_t v8 = *(CCLogStream **)(v7 + 4600);
    if (v8 && CCLogStream::shouldLog(v8, 1uLL))
    {
      long long v32 = 0u;
      uint64_t v34 = 0;
      long long v33 = 0u;
      memset(v31, 0, sizeof(v31));
      __int16 v30 = 23553;
      WORD6(v32) = 6149;
      AppleBCMWLANBusInterfacePCIe::pcapFillBusState(this, (uint64_t)v31);
      long long v28 = 0u;
      long long v29 = 0u;
      LOBYTE(v28) = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 8 * a2 + 4808) + 392))();
      BYTE13(v28) = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 8 * a2 + 4808) + 344))();
      (*(void (**)(void))(**(void **)(*((void *)this + 9) + 8 * a2 + 4808) + 400))();
      (*(void (**)(void))(**(void **)(*((void *)this + 9) + 8 * a2 + 4808) + 408))();
      BYTE14(v32) = 1;
      LOWORD(v33) = a2;
      HIBYTE(v32) = BYTE13(v28);
      *(_DWORD *)((char *)&v34 + 2) = a3;
      HIDWORD(v33) = 0;
      LOWORD(v34) = 0;
      *(_DWORD *)((char *)&v33 + 2) = v28;
      *(_DWORD *)((char *)&v33 + 6) = 0;
      WORD5(v33) = 0;
      CCLogStream::logHeaderAndBufIf(*(CCLogStream **)(*((void *)this + 9) + 4600), 1uLL, 0, 0, 0, 0, &v30, 0x7AuLL);
    }
    uint64_t v9 = *((void *)this + 9);
    int v10 = *(_DWORD *)(v9 + 4612);
    if (v10)
    {
      *(_DWORD *)(v9 + 4612) = v10 - 1;
      uint64_t v9 = *((void *)this + 9);
    }
    *(_DWORD *)(v9 + 4612) = v10;
    uint64_t v11 = *(void *)(*((void *)this + 9) + 8 * a2 + 4808);
    (*(void (**)(uint64_t))(*(void *)v11 + 72))(v11);
    (*(void (**)(void, void))(**(void **)(*((void *)this + 9) + 3464) + 72))(*(void *)(*((void *)this + 9) + 3464), *(void *)(*((void *)this + 9) + 8 * a2 + 4808));
    AppleBCMWLANCallbackEventSource::signalCallbackNeeded(*(AppleBCMWLANCallbackEventSource **)(*((void *)this + 9)
                                                                                              + 3240));
    if ((*(unsigned int (**)(void))(**(void **)(*((void *)this + 9) + 8 * a2 + 4808) + 312))() == 1)
    {
      uint64_t v12 = *((void *)this + 9);
      int v13 = *(AppleBCMWLANHashtable **)(v12 + 1088);
      uint64_t v14 = *(void *)(v12 + 8 * a2 + 4808);
      int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 328))(v14);
      AppleBCMWLANHashtable::remove(v13, v15);
    }
    uint64_t v16 = *(void *)(*((void *)this + 9) + 8 * a2 + 4808);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v16 + 312))(v16) == 2
      || (uint64_t v17 = *(void *)(*((void *)this + 9) + 8 * a2 + 4808),
          (*(unsigned int (**)(uint64_t))(*(void *)v17 + 312))(v17) == 3))
    {
      uint64_t v18 = AppleBCMWLANHashtable::add(*(AppleBCMWLANHashtable **)(*((void *)this + 9) + 1096), *(OSObject **)(*((void *)this + 9) + 8 * a2 + 4808), (unsigned __int16 *)&v27);
      if (v18)
      {
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            int v19 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logCrit(v19, "[dk] %s@%d:Failed to add flow to tracker\n", "deleteFlow", 9269);
          }
        }
      }
      else
      {
        uint64_t v20 = *(void *)(*((void *)this + 9) + 8 * a2 + 4808);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 320))(v20, 4);
        (*(void (**)(void))(**(void **)(*((void *)this + 9) + 8 * a2 + 4808) + 336))();
        unint64_t v21 = *((void *)this + 9) + ((unint64_t)a2 >> 3);
        *(unsigned char *)(v21 + 5166) |= 1 << (a2 & 7);
      }
    }
    else
    {
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v25 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          int v26 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 8 * a2 + 4808) + 312))();
          CCLogStream::logAlert(v25, "[dk] %s@%d:Tried to delete non-created ring %d. State: %d.\n", "deleteFlow", 9277, a2, v26);
        }
      }
      return 0;
    }
  }
  else
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        unsigned __int8 v24 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logCrit(v24, "[dk] %s@%d:Unexpected flow deletion\n", "deleteFlow", 9230);
      }
    }
    return 3758096385;
  }
  return v18;
}

uint64_t AppleBCMWLANBusInterfacePCIe::invalidateFlowId(AppleBCMWLANBusInterfacePCIe *this, __int16 a2)
{
  __int16 v6 = a2;
  uint64_t v3 = (const OSMetaClassBase *)IO80211FlowQueueDatabase::find(*(IO80211FlowQueueDatabase **)(*((void *)this + 9) + 1312), (BOOL (*)(IO80211FlowQueue *, void *))_compareQueueByFlowId, &v6);
  int v4 = OSMetaClassBase::safeMetaCast(v3, (const OSMetaClass *)gAppleBCMWLANPCIeFlowQueueMetaClass);
  if (!v4) {
    return 3758097084;
  }
  AppleBCMWLANPCIeFlowQueue::unassignFlowRing((uint64_t)v4);
  uint64_t result = 0;
  ++*(_DWORD *)(*((void *)this + 9) + 1320);
  return result;
}

BOOL AppleBCMWLANBusInterfacePCIe::workPendingForEpoch(AppleBCMWLANBusInterfacePCIe *this, unint64_t *a2)
{
  int v4 = (void *)*((void *)this + 9);
  BOOL v5 = v4[597] != v4[596] || v4[598] != v4[599];
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:work pending %u Epochs -> ControlRingSignal : %llu, ControlRingService: %llu, ReportCompleteSignal: %llu, ReportCompleteService : %llu, transactionID %u\n", "workPendingForEpoch", 9348, v5, *(void *)(*((void *)this + 9) + 4768), *(void *)(*((void *)this + 9) + 4776), *(void *)(*((void *)this + 9) + 4784), *(void *)(*((void *)this + 9) + 4792), *(_DWORD *)(*((void *)this + 9) + 3004));
    }
  }
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v12 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(v12, "[dk] %s@%d:MSIEpoch %llu, PendingEpoch %llu\n", "workPendingForEpoch", 9353, *(void *)(*((void *)this + 9) + 4760), *a2);
    }
  }
  unint64_t v6 = *a2;
  if (!*a2)
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
    IOInterruptDispatchSource::GetLastInterrupt(*(IOInterruptDispatchSource **)(*((void *)this + 9) + 3264), &v14, &v13, 0);
    unint64_t v10 = *(void *)(*((void *)this + 9) + 4760);
    if (v10 >= v13)
    {
      if (!v5) {
        return 0;
      }
    }
    else
    {
      ++v10;
    }
    *a2 = v10;
    return 1;
  }
  uint64_t v7 = (void *)*((void *)this + 9);
  unint64_t v8 = v7[595];
  BOOL result = v8 < v6;
  if (v8 >= v6 && v5) {
    return ((uint64_t)(v7[596] - v6) < 0 || (uint64_t)(v7[597] - v6) < 0 || v7[598] != v7[599])
  }
        && ((uint64_t)(v7[598] - v6) < 0 || (uint64_t)(v7[599] - v6) < 0);
  return result;
}

BOOL non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::workPendingForEpoch(AppleBCMWLANBusInterfacePCIe *this, unint64_t *a2)
{
  return AppleBCMWLANBusInterfacePCIe::workPendingForEpoch((AppleBCMWLANBusInterfacePCIe *)((char *)this - 48), a2);
}

uint64_t AppleBCMWLANBusInterfacePCIe::configHMAP(AppleBCMWLANBusInterfacePCIe *this)
{
  (*(void (**)(AppleBCMWLANBusInterfacePCIe *, const char *, uint64_t))(*(void *)this + 1208))(this, "configHMAP", 9411);
  uint64_t v2 = *(AppleBCMWLANChipManagerPCIe **)(*((void *)this + 9) + 3280);
  if (v2)
  {
    if (AppleBCMWLANChipManagerPCIe::isHMAPSupported(v2))
    {
      uint64_t v3 = *((void *)this + 9);
      if (*(unsigned char *)(v3 + 3980))
      {
LABEL_4:
        LODWORD(v28) = 0;
        unsigned int HMAPBaseAddress = AppleBCMWLANChipManagerPCIe::getHMAPBaseAddress(*(AppleBCMWLANChipManagerPCIe **)(v3 + 3280));
        unsigned int v5 = HMAPBaseAddress + 144;
        uint64_t PCIeCoreReg32 = AppleBCMWLANChipBackplane::readPCIeCoreReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), HMAPBaseAddress + 144, (unsigned int *)&v28);
        if (PCIeCoreReg32)
        {
          uint64_t v7 = PCIeCoreReg32;
          if (AppleBCMWLANBusInterface::getLogger(this))
          {
            AppleBCMWLANBusInterface::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
              CCLogStream::logAlert(Logger, "[dk] %s@%d:Failed to read HMAP window config reg: 0x%x\n", "configHMAP", 9509, v7);
            }
          }
        }
        else
        {
          int v14 = v28;
          uint64_t v15 = *((void *)this + 9);
          int v16 = *(_DWORD *)(v15 + 3976);
          if (v16)
          {
            unint64_t v17 = 0;
            do
            {
              AppleBCMWLANChipBackplane::writePCIeCoreReg32(*(AppleBCMWLANChipBackplane **)(v15 + 3360), HMAPBaseAddress, *(_DWORD *)(v15 + 8 * v17 + 3880));
              AppleBCMWLANChipBackplane::writePCIeCoreReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), HMAPBaseAddress + 4, *(_DWORD *)(*((void *)this + 9) + 8 * v17 + 3884));
              AppleBCMWLANChipBackplane::writePCIeCoreReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), HMAPBaseAddress + 8, *(_DWORD *)(*((void *)this + 9) + 4 * v17++ + 3944));
              uint64_t v15 = *((void *)this + 9);
              HMAPBaseAddress += 16;
            }
            while (v17 < *(unsigned int *)(v15 + 3976));
            int v16 = *(_DWORD *)(v15 + 3976) << 8;
          }
          LODWORD(v28) = v16 | v14;
          AppleBCMWLANChipBackplane::writePCIeCoreReg32(*(AppleBCMWLANChipBackplane **)(v15 + 3360), v5, v16 | v14);
          uint64_t v7 = 0;
          *(unsigned char *)(*((void *)this + 9) + 3981) = 1;
        }
        return v7;
      }
      int v11 = *(_DWORD *)(v3 + 4536);
      if (v11) {
        unint64_t v12 = (v11 << 20);
      }
      else {
        unint64_t v12 = 0x2000000;
      }
      __int16 v27 = 0;
      long long v28 = 0;
      if (acquireProperty<OSNumber>(*(IOService **)(v3 + 3248), "IOPCIDeviceMemoryMapBase", &v28, 1uLL, "IOService"))
      {
        uint64_t v13 = OSNumber::unsigned64BitValue(v28);
        ((void (*)(OSNumber *))v28->release)(v28);
      }
      else
      {
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            unsigned __int8 v24 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v24, "[dk] %s@%d:kIOPCIDeviceMemoryMapBase property not found\n", "configHMAP", 9466);
          }
        }
        uint64_t v13 = 0;
      }
      if (acquireProperty<OSNumber>(*(IOService **)(*((void *)this + 9) + 3248), "IOPCIDeviceMemoryMapSize", &v27, 1uLL, "IOService"))
      {
        uint64_t v18 = OSNumber::unsigned64BitValue(v27);
        ((void (*)(OSNumber *))v27->release)(v27);
        if (v13 && v18)
        {
          uint64_t v19 = *(void *)(*((void *)this + 9) + 3256);
          uint64_t v20 = v19 * (v13 - 1);
          if (v19 * v18 >= v12) {
            unint64_t v21 = v12;
          }
          else {
            unint64_t v21 = v19 * v18;
          }
          if (AppleBCMWLANBusInterface::getLogger(this))
          {
            AppleBCMWLANBusInterface::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              int v26 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
              CCLogStream::logAlert(v26, "[dk] %s@%d:HMAP window limit:%llu %lluMB\n", "configHMAP", 9490, v21, v21 >> 20);
            }
          }
          *(_DWORD *)(*((void *)this + 9) + 3976) = 1;
          *(void *)(*((void *)this + 9) + 3880) = v20;
          *(_DWORD *)(*((void *)this + 9) + 3944) = v21;
          *(unsigned char *)(*((void *)this + 9) + 3980) = 1;
          uint64_t v3 = *((void *)this + 9);
          goto LABEL_4;
        }
      }
      else
      {
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            unsigned int v25 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v25, "[dk] %s@%d:kIOPCIDeviceMemoryMapSize property not found\n", "configHMAP", 9473);
          }
        }
        uint64_t v18 = 0;
      }
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          int v23 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v23, "[dk] %s@%d:Invalid VM limits: 0x%llx + 0x%llx\n", "configHMAP", 9481, v13, v18);
        }
      }
      return 3758097097;
    }
    else
    {
      uint64_t v7 = 3758097095;
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          unint64_t v10 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logCrit(v10, "[dk] %s@%d:HMAP is not supported on this device\n", "configHMAP", 9419);
        }
      }
    }
  }
  else
  {
    uint64_t v7 = 3758097112;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v9 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v9, "[dk] %s@%d:Chip Manager Unavailable\n", "configHMAP", 9414);
        return 3758097112;
      }
    }
  }
  return v7;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::configHMAP(AppleBCMWLANBusInterfacePCIe *this)
{
  return AppleBCMWLANBusInterfacePCIe::configHMAP((AppleBCMWLANBusInterfacePCIe *)((char *)this - 64));
}

uint64_t AppleBCMWLANBusInterfacePCIe::initRingInfo(AppleBCMWLANBusInterfacePCIe *this)
{
  (*(void (**)(AppleBCMWLANBusInterfacePCIe *, const char *, uint64_t))(*(void *)this + 1208))(this, "initRingInfo", 9562);
  AppleBCMWLANChipMemory::writeSubmissionWriteIndexArrayHostAddr(*(void **)(*((void *)this + 9) + 3368), *(void *)(*((void *)this + 9) + 160));
  AppleBCMWLANChipMemory::writeCompletionReadIndexArrayHostAddr(*(void **)(*((void *)this + 9) + 3368), *(void *)(*((void *)this + 9) + 216));
  AppleBCMWLANChipMemory::writeSubmissionReadIndexArrayHostAddr(*(void **)(*((void *)this + 9) + 3368), *(void *)(*((void *)this + 9) + 104));
  AppleBCMWLANChipMemory::writeCompletionWriteIndexArrayHostAddr(*(void **)(*((void *)this + 9) + 3368), *(void *)(*((void *)this + 9) + 272));
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlertIf(Logger, 0x80uLL, "[dk] %s@%d: ring_info initialization \n", "initRingInfo", 9606);
    }
  }
  unint64_t IndexArrayHostAddr = AppleBCMWLANChipMemory::readSubmissionReadIndexArrayHostAddr(*(AppleBCMWLANChipMemory **)(*((void *)this + 9) + 3368));
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      int v4 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlertIf(v4, 0x80uLL, "[dk] %s@%d: submission ring read index baseAddressLow : 0x%x, baseAddressHigh: 0x%x \n", "initRingInfo", 9611, IndexArrayHostAddr, HIDWORD(IndexArrayHostAddr));
    }
  }
  unint64_t v9 = AppleBCMWLANChipMemory::readSubmissionWriteIndexArrayHostAddr(*(AppleBCMWLANChipMemory **)(*((void *)this + 9)
                                                                                                + 3368));
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      unsigned int v5 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlertIf(v5, 0x80uLL, "[dk] %s@%d: submission ring write index baseAddressLow : 0x%x, baseAddressHigh: 0x%x \n", "initRingInfo", 9617, v9, HIDWORD(v9));
    }
  }
  unint64_t v10 = AppleBCMWLANChipMemory::readCompletionReadIndexArrayHostAddr(*(AppleBCMWLANChipMemory **)(*((void *)this + 9)
                                                                                                + 3368));
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      unint64_t v6 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlertIf(v6, 0x80uLL, "[dk] %s@%d: completion ring read index baseAddressLow : 0x%x, baseAddressHigh: 0x%x \n", "initRingInfo", 9623, v10, HIDWORD(v10));
    }
  }
  unint64_t v11 = AppleBCMWLANChipMemory::readCompletionWriteIndexArrayHostAddr(*(AppleBCMWLANChipMemory **)(*((void *)this + 9)
                                                                                                 + 3368));
  uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
  if (result)
  {
    AppleBCMWLANBusInterface::getLogger(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v7 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      return CCLogStream::logAlertIf(v7, 0x80uLL, "[dk] %s@%d: completion ring write index baseAddressLow : 0x%x, baseAddressHigh: 0x%x \n", "initRingInfo", 9629, v11, HIDWORD(v11));
    }
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::initTransmitFlows(OSObject *this)
{
  ((void (*)(OSObject *, const char *, uint64_t))this->OSMetaClassBase::__vftable[21].Dispatch)(this, "initTransmitFlows", 9636);
  unsigned int MaxTxFlowRings = AppleBCMWLANChipMemory::readMaxTxFlowRings(*((AppleBCMWLANChipMemory **)this[1].ivars + 421));
  unsigned int MaxDynamicSubmissionRings = AppleBCMWLANChipMemory::readMaxDynamicSubmissionRings(*((AppleBCMWLANChipMemory **)this[1].ivars
                                                                                    + 421));
  unsigned int Flags2 = AppleBCMWLANChipMemory::readFlags2(*((AppleBCMWLANChipMemory **)this[1].ivars + 421));
  if (MaxDynamicSubmissionRings <= MaxTxFlowRings)
  {
    uint64_t ClassNameHelper = (const char *)getClassNameHelper(this);
    panic("%s::%s(): maxNbrOfDynamicSubmissionRings %u <= maxNbrOfTxFlowRings %u", ClassNameHelper, "initTransmitFlows", MaxDynamicSubmissionRings, MaxTxFlowRings);
  }
  if (MaxTxFlowRings >= 0x28) {
    int v5 = 40;
  }
  else {
    int v5 = MaxTxFlowRings;
  }
  *((_DWORD *)this[1].ivars + 92) = v5;
  int v6 = (Flags2 >> 4) & 1;
  int v7 = MaxDynamicSubmissionRings - MaxTxFlowRings + v6;
  if (v7 >= 4) {
    int v7 = 4;
  }
  *((_DWORD *)this[1].ivars + 93) = v7;
  *((_DWORD *)this[1].ivars + 94) = *((_DWORD *)this[1].ivars + 93) + *((_DWORD *)this[1].ivars + 92);
  uint64_t result = AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
  if (result)
  {
    AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      return CCLogStream::logAlert(Logger, "[dk] %s@%d:Flows: max=%u reserved=%u maxId=%u fwmax=%u fwmaxsub=%u fwbtlognomaxqincrease=%u\n", "initTransmitFlows", 9662, *((_DWORD *)this[1].ivars + 92), *((_DWORD *)this[1].ivars + 93), *((_DWORD *)this[1].ivars + 94), MaxTxFlowRings, MaxDynamicSubmissionRings, v6);
    }
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::createDARTMappings(AppleBCMWLANBusInterfacePCIe *this, AppleBCMWLANChipMemory *a2)
{
  *(void *)(*((void *)this + 9) + 32) = *(void *)(*((void *)this + 9) + 3256);
  if (AppleBCMWLANPCIeAllocateDartMappedMemory(*((void *)this + 9), *(void *)(*((void *)this + 9) + 3256), 1, *(IOService **)(*((void *)this + 9) + 3248)))
  {
    uint64_t v4 = *((void *)this + 9);
    uint64_t v14 = *(void *)(v4 + 48);
    AppleBCMWLANChipMemory::writeScratchMemorySize(a2, *(_DWORD *)(v4 + 3256));
    AppleBCMWLANChipMemory::writeScratchMemoryAddr((uint64_t)a2, v14);
    int ScratchMemorySize = AppleBCMWLANChipMemory::readScratchMemorySize(a2);
    unint64_t ScratchMemoryAddr = AppleBCMWLANChipMemory::readScratchMemoryAddr(a2);
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlertIf(Logger, 0x80uLL, "[dk] %s@%d:Scratch Buffer: size : %d, baseAddressLow : 0x%x, baseAddressHigh: 0x%x \n", "createDARTMappings", 9730, ScratchMemorySize, ScratchMemoryAddr, HIDWORD(ScratchMemoryAddr));
      }
    }
    *(void *)(*((void *)this + 9) + 88) = 2048;
    if (AppleBCMWLANPCIeAllocateDartMappedMemory(*((void *)this + 9) + 56, *(void *)(*((void *)this + 9) + 3256), 3, *(IOService **)(*((void *)this + 9) + 3248)))
    {
      *(void *)(*((void *)this + 9) + 144) = 2048;
      if (AppleBCMWLANPCIeAllocateDartMappedMemory(*((void *)this + 9) + 112, *(void *)(*((void *)this + 9) + 3256), 2, *(IOService **)(*((void *)this + 9) + 3248)))
      {
        *(void *)(*((void *)this + 9) + 200) = 24;
        if (AppleBCMWLANPCIeAllocateDartMappedMemory(*((void *)this + 9) + 168, *(void *)(*((void *)this + 9) + 3256), 3, *(IOService **)(*((void *)this + 9) + 3248)))
        {
          *(void *)(*((void *)this + 9) + 256) = 24;
          if (AppleBCMWLANPCIeAllocateDartMappedMemory(*((void *)this + 9) + 224, *(void *)(*((void *)this + 9) + 3256), 1, *(IOService **)(*((void *)this + 9) + 3248)))
          {
            return 0;
          }
          else
          {
            uint64_t v6 = 3758097096;
            if (AppleBCMWLANBusInterface::getLogger(this))
            {
              AppleBCMWLANBusInterface::getLogger(this);
              if (CCLogStream::shouldLog())
              {
                uint64_t v13 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                CCLogStream::logAlert(v13, "[dk] %s@%d:Failed to allocate host completion ring write index array\n");
              }
            }
          }
        }
        else
        {
          uint64_t v6 = 3758097096;
          if (AppleBCMWLANBusInterface::getLogger(this))
          {
            AppleBCMWLANBusInterface::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              unint64_t v10 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
              CCLogStream::logAlert(v10, "[dk] %s@%d:Failed to allocate host completion ring read index array\n");
            }
          }
        }
      }
      else
      {
        uint64_t v6 = 3758097096;
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            unint64_t v9 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v9, "[dk] %s@%d:Failed to allocate host submission ring write index array\n");
          }
        }
      }
    }
    else
    {
      uint64_t v6 = 3758097096;
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          unint64_t v8 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v8, "[dk] %s@%d:Failed to allocate host submission ring read index array\n");
        }
      }
    }
  }
  else
  {
    uint64_t v6 = 3758097096;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        int v7 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:Failed to allocate scratch memory, direction[%u] size[0x%08llx] bufferSize[0x%08llx]\n");
      }
    }
  }
  return v6;
}

void *AppleBCMWLANBusInterfacePCIe::removeDARTMappings(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t result = (void *)*((void *)this + 9);
  if (result[5])
  {
    AppleBCMWLANPCIeFreeDartMappedMemory((uint64_t)result);
    uint64_t result = (void *)*((void *)this + 9);
  }
  if (result[12])
  {
    AppleBCMWLANPCIeFreeDartMappedMemory((uint64_t)(result + 7));
    uint64_t result = (void *)*((void *)this + 9);
  }
  if (result[19])
  {
    AppleBCMWLANPCIeFreeDartMappedMemory((uint64_t)(result + 14));
    uint64_t result = (void *)*((void *)this + 9);
  }
  if (result[26])
  {
    AppleBCMWLANPCIeFreeDartMappedMemory((uint64_t)(result + 21));
    uint64_t result = (void *)*((void *)this + 9);
  }
  if (result[33])
  {
    uint64_t v3 = (uint64_t)(result + 28);
    return (void *)AppleBCMWLANPCIeFreeDartMappedMemory(v3);
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::createFirmwareEcounterLogger(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t v2 = (void *)IOMallocZeroTyped();
  if (v2)
  {
    uint64_t v3 = v2;
    *uint64_t v2 = 0;
    v2[1] = 0;
    v2[2] = 0x8000;
    long long bytes = 0;
    uint64_t v4 = (IOService *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 984))(this);
    if (checkAcquireDataPropertyNotEmpty(v4, "wlan.ccpipe.size", &bytes, 8uLL, 1uLL, "IOService"))
    {
      int v5 = *((_DWORD *)OSData::getBytesNoCopy(bytes, 0, 8uLL) + 1);
      v3[2] = (v5 << 10);
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(Logger, "[dk] %s@%d:WiFiFirmwareEcounterLogs Size configure from device tree: %uKB\n", "createFirmwareEcounterLogger", 16572, v5);
        }
      }
      if (bytes)
      {
        ((void (*)(OSData *))bytes->release)(bytes);
        long long bytes = 0;
      }
    }
    int v21 = 0;
    if (IOParseBootArgNumber("wlan.ccpipe.FWEcounterLogs.size", &v21, 4))
    {
      unint64_t v6 = (v21 << 10);
      if (v3[2] > v6) {
        unint64_t v6 = v3[2];
      }
      if (v6 >= 0x80000) {
        unint64_t v6 = 0x80000;
      }
      v3[2] = v6;
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v19 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v19, "[dk] %s@%d:WiFiFirmwareEcounterLogs Size configure from boot-args: %u (Max=512KB)\n", "createFirmwareEcounterLogger", 16580, v3[2]);
        }
      }
    }
    v3[3] = (unint64_t)((2 * ((5 * v3[2]) & 0x1FFFFFFFFFFFFFFFuLL) * (unsigned __int128)0x28F5C28F5C28F5C3uLL) >> 64) >> 2;
    *((_DWORD *)v3 + 8) = 1000;
    int ModuleInstanceId = AppleBCMWLANBusInterface::getModuleInstanceId(this);
    snprintf((char *)v3 + 292, 0x100uLL, "brcm%x", ModuleInstanceId);
    strcpy((char *)v3 + 36, "FirmwareEcounterLogs");
    strcpy((char *)v3 + 580, "WiFi");
    *(void *)((char *)v3 + 548) = 0x200200000;
    v3[71] = 0;
    OSMetaClassBase::safeMetaCast((const OSMetaClassBase *)this, (const OSMetaClass *)gAppleBCMWLANBusInterfacePCIeMetaClass);
    AppleBCMWLANBusInterface::getCCPipeOwner(this);
    uint64_t v8 = (*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 80))(this);
    (*(void (**)(uint64_t))(*(void *)v8 + 168))(v8);
    unint64_t v9 = (const OSMetaClassBase *)CCPipe::withOwnerNameCapacity();
    *(void *)(*((void *)this + 9) + 3824) = OSMetaClassBase::safeMetaCast(v9, gCCLogPipeMetaClass);
    IOFree(v3, 0x350uLL);
    if (!*(void *)(*((void *)this + 9) + 3824)) {
      return 0;
    }
    uint64_t v10 = IOMallocZeroTyped();
    if (v10)
    {
      uint64_t v11 = v10;
      *(_DWORD *)uint64_t v10 = 0;
      *(void *)(v10 + 8) = -1;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0;
      if (AppleBCMWLAN_isVerboseDebugLoggingAllowed())
      {
        *(_DWORD *)(v11 + 8) = 127;
        *(void *)(v11 + 24) = 0x80000000000;
      }
      *(unsigned char *)(v11 + 88) = 0;
      *(void *)(v11 + 48) = this;
      *(void *)(v11 + 56) = busSetLogLevelCallback;
      *(void *)(v11 + 72) = 0;
      *(void *)(v11 + 80) = 0;
      *(void *)(v11 + 64) = busSetLogFlagsCallback;
      long long bytes = (OSData *)0xA5A500000000000DLL;
      OSDataPtr v12 = OSData::withBytes(&bytes, 8uLL);
      *(void *)(v11 + 328) = v12;
      *(_WORD *)(v11 + 336) = 150;
      if (*(void *)(*((void *)this + 9) + 3824))
      {
        uint64_t v13 = (const OSMetaClassBase *)CCStream::withPipeAndName();
        *(void *)(*((void *)this + 9) + 3816) = OSMetaClassBase::safeMetaCast(v13, gCCLogStreamMetaClass);
        OSDataPtr v12 = *(OSDataPtr *)(v11 + 328);
      }
      ((void (*)(OSDataPtr))v12->release)(v12);
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v20 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v20, "[dk] %s@%d: CCFlags: 0x%llx, CCLevel: %d ConsoleFlags: 0x%llx, ConsoleLevel: %d\n", "createFirmwareEcounterLogger", 16642, *(void *)(v11 + 24), *(_DWORD *)(v11 + 8), *(void *)(v11 + 32), *(_DWORD *)(v11 + 12));
        }
      }
      IOFree((void *)v11, 0x358uLL);
      uint64_t v14 = *((void *)this + 9);
      if (*(void *)(v14 + 3816))
      {
        (*(void (**)(void))(**(void **)(v14 + 3824) + 72))(*(void *)(v14 + 3824));
        return 1;
      }
      return 0;
    }
    uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
    if (result)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v16 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        int v17 = 16607;
        goto LABEL_33;
      }
    }
  }
  else
  {
    uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
    if (result)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v16 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        int v17 = 16554;
LABEL_33:
        CCLogStream::logCrit(v16, "[dk] %s@%d:Failed to allocate memory\n", "createFirmwareEcounterLogger", v17);
        return 0;
      }
    }
  }
  return result;
}

uint64_t ___ZN28AppleBCMWLANBusInterfacePCIe21createFirmwarePCIeIPCEP22AppleBCMWLANChipMemory_block_invoke(uint64_t a1)
{
  return IODispatchSource::SetEnable(*(IODispatchSource **)(*(void *)(*(void *)(a1 + 32) + 72) + 3264), 1, 0);
}

uint64_t AppleBCMWLANBusInterfacePCIe::flushTrackedControlIO(AppleBCMWLANBusInterfacePCIe *this, __int16 a2, OSObject *a3, void *a4)
{
  FaultReporter = (OSObject *)AppleBCMWLANBusInterface::getFaultReporter((AppleBCMWLANBusInterface *)a3);
  AppleBCMWLANPCIeIO::setCompanionIO((uint64_t)a3, 0);
  if (FaultReporter)
  {
    AppleBCMWLANPCIeIO::setCompanionIO((uint64_t)FaultReporter, 0);
    AppleBCMWLANBusInterfacePCIe::flushTrackedControlIO(this, 0, FaultReporter, a4);
  }
  if (AppleBCMWLANPCIeIO::getDirection((AppleBCMWLANDMASlab ***)a3) == 1)
  {
    uint64_t v11 = (IO80211Buffer *)0xAAAAAAAAAAAAAAAALL;
    AppleBCMWLANPCIeIO::complete((AppleBCMWLANPCIeIO *)a3, &v11);
    if (v11) {
      IO80211Buffer::returnBuffer(v11);
    }
  }
  AppleBCMWLANPCIeIO::reset((uint64_t)a3);
  Directiouint64_t n = AppleBCMWLANPCIeIO::getDirection((AppleBCMWLANDMASlab ***)a3);
  if (Direction == 2)
  {
    unint64_t v9 = (void *)(*((void *)this + 9) + 3512);
  }
  else
  {
    if (Direction != 1) {
      AppleBCMWLANBusInterfacePCIe::flushTrackedControlIO((OSObject *)this, (AppleBCMWLANDMASlab ***)a3);
    }
    unint64_t v9 = (void *)(*((void *)this + 9) + 3520);
  }
  return (*(uint64_t (**)(void, OSObject *))(*(void *)*v9 + 72))(*v9, a3);
}

uint64_t AppleBCMWLANBusInterfacePCIe::flushTrackedRxDataIO(AppleBCMWLANBusInterfacePCIe *this, __int16 a2, OSObject *a3, void *a4)
{
  uint64_t FaultReporter = AppleBCMWLANBusInterface::getFaultReporter((AppleBCMWLANBusInterface *)a3);
  AppleBCMWLANPCIeIO::reset((uint64_t)a3);
  uint64_t result = (*(uint64_t (**)(void, OSObject *))(**(void **)(*((void *)this + 9) + 3536) + 72))(*(void *)(*((void *)this + 9) + 3536), a3);
  if (FaultReporter)
  {
    AppleBCMWLANPCIeIO::reset(FaultReporter);
    uint64_t v8 = *(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 3536) + 72);
    return v8();
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::flushTrackedTxDataIO(AppleBCMWLANBusInterfacePCIe *this, __int16 a2, OSObject *a3, void *a4)
{
  uint64_t FaultReporter = AppleBCMWLANBusInterface::getFaultReporter((AppleBCMWLANBusInterface *)a3);
  AppleBCMWLANPCIeIO::reset((uint64_t)a3);
  ++*(_DWORD *)(*((void *)this + 9) + 2840);
  uint64_t result = (*(uint64_t (**)(void, OSObject *))(**(void **)(*((void *)this + 9) + 3528) + 72))(*(void *)(*((void *)this + 9) + 3528), a3);
  if (FaultReporter)
  {
    AppleBCMWLANPCIeIO::reset(FaultReporter);
    uint64_t v8 = *(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 3528) + 72);
    return v8();
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::flushTrackedFlowCreationRequest(AppleBCMWLANBusInterfacePCIe *this, __int16 a2, OSObject *a3, void *a4)
{
  unsigned int v5 = ((uint64_t (*)(OSObject *))a3->OSMetaClassBase::__vftable[3].init)(a3);
  AppleBCMWLANBusInterfacePCIe::createFlowCallback(this, -536870199, v5);
  uint64_t result = *(void *)(*((void *)this + 9) + 8 * v5 + 4808);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    *(void *)(*((void *)this + 9) + 8 * v5 + 4808) = 0;
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::flushTrackedFlowDeleteRequest(AppleBCMWLANBusInterfacePCIe *this, __int16 a2, OSObject *a3, void *a4)
{
  unsigned int v5 = ((uint64_t (*)(OSObject *))a3->OSMetaClassBase::__vftable[3].init)(a3);
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      int v8 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 1096) + 72))(*(void *)(*((void *)this + 9) + 1096));
      CCLogStream::logInfo(Logger, "[dk] %s@%d:Trigger deleteFlowCallback for ring %u, tracker count %u\n", "flushTrackedFlowDeleteRequest", 10666, v5, v8);
    }
  }
  return AppleBCMWLANBusInterfacePCIe::deleteFlowCallback(this, -536870199, v5);
}

uint64_t AppleBCMWLANBusInterfacePCIe::flushTrackedH2DRingCreationRequest(AppleBCMWLANBusInterfacePCIe *this, __int16 a2, OSObject *anObject, void *a4)
{
  uint64_t v4 = OSMetaClassBase::safeMetaCast(anObject, (const OSMetaClass *)gAppleBCMWLANDynamicRingOperationContextMetaClass);
  uint64_t RingOperationCompletionPtr = AppleBCMWLANDynamicRingOperationContext::getRingOperationCompletionPtr((AppleBCMWLANDynamicRingOperationContext *)v4);
  uint64_t SubmissionRingPtr = AppleBCMWLANDynamicRingOperationContext::getSubmissionRingPtr((AppleBCMWLANDynamicRingOperationContext *)v4);
  if (SubmissionRingPtr) {
    (*(void (**)(uint64_t))(*(void *)SubmissionRingPtr + 16))(SubmissionRingPtr);
  }
  uint64_t result = (*(uint64_t (**)(void, void, uint64_t, void))(RingOperationCompletionPtr + 8))(*(void *)RingOperationCompletionPtr, 0, 3758097131, *(void *)(RingOperationCompletionPtr + 16));
  if (v4)
  {
    release = v4->release;
    return ((uint64_t (*)(OSMetaClassBase *))release)(v4);
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::flushTrackedH2DRingDeleteRequest(AppleBCMWLANBusInterfacePCIe *this, __int16 a2, OSObject *anObject, void *a4)
{
  uint64_t v4 = OSMetaClassBase::safeMetaCast(anObject, (const OSMetaClass *)gAppleBCMWLANDynamicRingOperationContextMetaClass);
  uint64_t SubmissionRingPtr = AppleBCMWLANDynamicRingOperationContext::getSubmissionRingPtr((AppleBCMWLANDynamicRingOperationContext *)v4);
  uint64_t RingOperationCompletionPtr = AppleBCMWLANDynamicRingOperationContext::getRingOperationCompletionPtr((AppleBCMWLANDynamicRingOperationContext *)v4);
  uint64_t result = (*(uint64_t (**)(void, uint64_t, void, void))(RingOperationCompletionPtr + 8))(*(void *)RingOperationCompletionPtr, SubmissionRingPtr, 0, *(void *)(RingOperationCompletionPtr + 16));
  if (v4)
  {
    release = v4->release;
    return ((uint64_t (*)(OSMetaClassBase *))release)(v4);
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::flushTrackedD2HRingCreationRequest(AppleBCMWLANBusInterfacePCIe *this, __int16 a2, OSObject *anObject, void *a4)
{
  uint64_t v4 = OSMetaClassBase::safeMetaCast(anObject, (const OSMetaClass *)gAppleBCMWLANDynamicRingOperationContextMetaClass);
  uint64_t CompletionRingPtr = AppleBCMWLANDynamicRingOperationContext::getCompletionRingPtr((AppleBCMWLANDynamicRingOperationContext *)v4);
  uint64_t RingOperationCompletionPtr = AppleBCMWLANDynamicRingOperationContext::getRingOperationCompletionPtr((AppleBCMWLANDynamicRingOperationContext *)v4);
  if (CompletionRingPtr) {
    (*(void (**)(uint64_t))(*(void *)CompletionRingPtr + 16))(CompletionRingPtr);
  }
  uint64_t result = (*(uint64_t (**)(void, void, uint64_t, void))(RingOperationCompletionPtr + 8))(*(void *)RingOperationCompletionPtr, 0, 3758097131, *(void *)(RingOperationCompletionPtr + 16));
  if (v4)
  {
    release = v4->release;
    return ((uint64_t (*)(OSMetaClassBase *))release)(v4);
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::flushTrackedD2HRingDeleteRequest(AppleBCMWLANBusInterfacePCIe *this, __int16 a2, OSObject *anObject, void *a4)
{
  uint64_t v4 = OSMetaClassBase::safeMetaCast(anObject, (const OSMetaClass *)gAppleBCMWLANDynamicRingOperationContextMetaClass);
  uint64_t RingOperationCompletionPtr = AppleBCMWLANDynamicRingOperationContext::getRingOperationCompletionPtr((AppleBCMWLANDynamicRingOperationContext *)v4);
  uint64_t CompletionRingPtr = AppleBCMWLANDynamicRingOperationContext::getCompletionRingPtr((AppleBCMWLANDynamicRingOperationContext *)v4);
  uint64_t result = (*(uint64_t (**)(void, uint64_t, void, void))(RingOperationCompletionPtr + 8))(*(void *)RingOperationCompletionPtr, CompletionRingPtr, 0, *(void *)(RingOperationCompletionPtr + 16));
  if (v4)
  {
    release = v4->release;
    return ((uint64_t (*)(OSMetaClassBase *))release)(v4);
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::flushTrackedRxDebugIO(AppleBCMWLANBusInterfacePCIe *this, __int16 a2, OSObject *a3, void *a4)
{
  int v7 = 0;
  AppleBCMWLANPCIeIO::complete((AppleBCMWLANPCIeIO *)a3, &v7);
  if (v7) {
    IO80211Buffer::returnBuffer(v7);
  }
  AppleBCMWLANPCIeIO::reset((uint64_t)a3);
  return (*(uint64_t (**)(void, OSObject *))(**(void **)(*((void *)this + 9) + 3544) + 72))(*(void *)(*((void *)this + 9) + 3544), a3);
}

uint64_t AppleBCMWLANBusInterfacePCIe::flushPendingTxIOs(AppleBCMWLANBusInterfacePCIe *this)
{
  AppleBCMWLANBusInterface::getTxDescriptor(this, &v4);
  uint64_t result = AppleBCMWLANCommandQueue::getSize((AppleBCMWLANCommandQueue *)v4.n128_u64[1]);
  if (result)
  {
    do
    {
      AppleBCMWLANBusInterface::getTxDescriptor(this, &v4);
      uint64_t v3 = (IOCommand *)AppleBCMWLANCommandQueue::dequeue((AppleBCMWLANCommandQueue *)v4.n128_u64[1]);
      AppleBCMWLANTxBuffer::setStatus((uint64_t)v3, -536870199);
      AppleBCMWLANBusInterface::getTxCompletionDescriptor(this, &v4);
      AppleBCMWLANCommandQueue::enqueue((AppleBCMWLANCommandQueue *)v4.n128_u64[1], v3);
      AppleBCMWLANBusInterface::getTxDescriptor(this, &v4);
    }
    while (AppleBCMWLANCommandQueue::getSize((AppleBCMWLANCommandQueue *)v4.n128_u64[1]));
    return AppleBCMWLANCallbackEventSource::signalCallbackNeeded(*(AppleBCMWLANCallbackEventSource **)(*((void *)this + 9) + 3240));
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::getMaxControlFrameHeaders(AppleBCMWLANBusInterfacePCIe *this)
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::getMaxControlFrameHeaders(AppleBCMWLANBusInterfacePCIe *this)
{
  return 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::getMaxRxControlFramePayload(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t v2 = -(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 912))(this) & 3;
  uint64_t v3 = (*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 912))(this);
  if (v2) {
    return 2024
  }
         - v3
         - (-(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 912))(this) & 3);
  else {
    return 2020 - v3;
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::getMaxRxControlFramePayload(AppleBCMWLANBusInterfacePCIe *this)
{
  return AppleBCMWLANBusInterfacePCIe::getMaxRxControlFramePayload((AppleBCMWLANBusInterfacePCIe *)((char *)this - 48));
}

uint64_t AppleBCMWLANBusInterfacePCIe::getMaxTxControlFramePayload(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t v2 = (3 - (*(unsigned __int8 (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 912))(this)) & 3;
  uint64_t v3 = (*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 912))(this);
  if (v2) {
    return 1883
  }
         - v3
         - ((3 - (*(unsigned __int8 (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 912))(this)) & 3);
  else {
    return 1879 - v3;
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::getMaxTxControlFramePayload(AppleBCMWLANBusInterfacePCIe *this)
{
  return AppleBCMWLANBusInterfacePCIe::getMaxTxControlFramePayload((AppleBCMWLANBusInterfacePCIe *)((char *)this - 48));
}

uint64_t AppleBCMWLANBusInterfacePCIe::getMaxOutstandingTxDataFrames(AppleBCMWLANBusInterfacePCIe *this)
{
  return (*(_DWORD *)(*((void *)this + 9) + 368) * *(_DWORD *)(*((void *)this + 9) + 2880));
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::getMaxOutstandingTxDataFrames(AppleBCMWLANBusInterfacePCIe *this)
{
  return (*(_DWORD *)(*((void *)this + 3) + 368) * *(_DWORD *)(*((void *)this + 3) + 2880));
}

uint64_t AppleBCMWLANBusInterfacePCIe::getMaxActiveCommandCount(AppleBCMWLANBusInterfacePCIe *this)
{
  return 1;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::getMaxActiveCommandCount(AppleBCMWLANBusInterfacePCIe *this)
{
  return 1;
}

AppleBCMWLANBusInterfacePCIe *AppleBCMWLANBusInterfacePCIe::releaseFlowQueue(AppleBCMWLANBusInterfacePCIe *this, OSMetaClassBase *anObject)
{
  if (anObject)
  {
    uint64_t v2 = this;
    uint64_t v3 = OSMetaClassBase::safeMetaCast(anObject, (const OSMetaClass *)gAppleBCMWLANPCIeFlowQueueMetaClass);
    __n128 v4 = (AppleBCMWLANPCIeFlowQueue *)v3;
    unsigned int v5 = *(IO80211FlowQueueDatabase **)(*((void *)v2 + 9) + 1312);
    if (v5)
    {
      unint64_t Hash = IO80211FlowQueue::getHash((IO80211FlowQueue *)v3);
      IO80211FlowQueueDatabase::remove(v5, Hash);
    }
    unsigned int AssignedFlowRingID = AppleBCMWLANPCIeFlowQueue::getAssignedFlowRingID(v4);
    if (AssignedFlowRingID != 0xFFFF)
    {
      AppleBCMWLANBusInterfacePCIe::deleteFlow(v2, AssignedFlowRingID, 10957);
      AppleBCMWLANPCIeFlowQueue::unassignFlowRing((uint64_t)v4);
    }
    int v8 = *(uint64_t (**)(AppleBCMWLANPCIeFlowQueue *))(*(void *)v4 + 16);
    return (AppleBCMWLANBusInterfacePCIe *)v8(v4);
  }
  return this;
}

uint64_t AppleBCMWLANBusInterfacePCIe::releaseFlowId(AppleBCMWLANBusInterfacePCIe *this, unsigned int a2)
{
  return 0;
}

AppleBCMWLANBusInterfacePCIe *non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::releaseFlowQueue(AppleBCMWLANBusInterfacePCIe *this, OSMetaClassBase *a2)
{
  return AppleBCMWLANBusInterfacePCIe::releaseFlowQueue((AppleBCMWLANBusInterfacePCIe *)((char *)this - 48), a2);
}

IO80211FlowQueue *AppleBCMWLANBusInterfacePCIe::requestFlowQueue(AppleBCMWLANBusInterfacePCIe *this, const ether_addr *a2, const ether_addr *a3, uint64_t a4, unsigned __int8 a5)
{
  if (!(*(_DWORD *)a3->octet | *(unsigned __int16 *)&a3->octet[4]) || !*(unsigned char *)(*((void *)this + 9) + 1306)) {
    return 0;
  }
  uint64_t v9 = (*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *, const ether_addr *))(*(void *)this + 1104))(this, a2);
  if (!(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 1888))(v9, a4))
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:ERROR ! Invalid Interface for IFID %d \n", "requestFlowQueue", 10820, a4);
      }
    }
    return 0;
  }
  unint64_t v10 = *(unsigned int *)a3->octet | ((unint64_t)*(unsigned __int16 *)&a3->octet[4] << 32);
  uint64_t v11 = *(void *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 1104))(this);
  OSDataPtr v12 = (IO80211SkywalkInterface *)(*(uint64_t (**)(void))(v11 + 1888))();
  uint64_t v13 = (BOOL (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANBusInterface::getLogger(this);
  uint64_t FaultReporter = (void (__cdecl *)(OSObjectInterface *__hidden))AppleBCMWLANBusInterface::getFaultReporter(this);
  uint64_t v15 = (IO80211FlowQueue *)AppleBCMWLANPCIeFlowQueue::withProviderAndQueueInfo(this, v10, a5, v12, v13, FaultReporter);
  IO80211FlowQueueDatabase::insert(*(IO80211FlowQueueDatabase **)(*((void *)this + 9) + 1312), v15);
  ++*(_DWORD *)(*((void *)this + 9) + 1320);
  return v15;
}

IO80211FlowQueue *non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::requestFlowQueue(AppleBCMWLANBusInterfacePCIe *this, const ether_addr *a2, const ether_addr *a3, uint64_t a4, unsigned __int8 a5)
{
  return AppleBCMWLANBusInterfacePCIe::requestFlowQueue((AppleBCMWLANBusInterfacePCIe *)((char *)this - 48), a2, a3, a4, a5);
}

BOOL _compareQueueByFlowId(const OSMetaClassBase *a1, unsigned __int16 *a2)
{
  uint64_t v3 = OSMetaClassBase::safeMetaCast(a1, (const OSMetaClass *)gAppleBCMWLANPCIeFlowQueueMetaClass);
  return AppleBCMWLANPCIeFlowQueue::getAssignedFlowRingID((AppleBCMWLANPCIeFlowQueue *)v3) == *a2;
}

uint64_t AppleBCMWLANBusInterfacePCIe::requestFlowId(AppleBCMWLANBusInterfacePCIe *this, uint64_t a2, uint64_t a3, int a4, int a5, int a6, unsigned __int16 *a7, _DWORD *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  uint64_t result = 3758097090;
  if (a7 && a8)
  {
    *a8 = *(_DWORD *)(*((void *)this + 9) + 2880);
    unsigned int LRUFlowId = AppleBCMWLANBusInterfacePCIe::findLRUFlowId(this);
    *a7 = LRUFlowId;
    if (LRUFlowId >= 0x2C)
    {
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(Logger, "[dk] %s@%d:flowId out of range! %u >= %lu\n", "requestFlowId", 10894, *a7, 44);
        }
      }
LABEL_24:
      uint64_t result = 0;
      *a7 = -1;
      return result;
    }
    uint64_t v25 = *((void *)this + 9);
    __int16 v26 = *(_WORD *)(v25 + 4 * LRUFlowId + 1866);
    uint64_t v27 = *(void *)(v25 + 8 * LRUFlowId + 4808);
    if (v26)
    {
      if (!v27
        || (*(unsigned int (**)(uint64_t))(*(void *)v27 + 312))(v27) == 3
        && !AppleBCMWLANItemRing::getReadableItemCount(*(AppleBCMWLANItemRing **)(*((void *)this + 9)
                                                                                              + 8 * *a7
                                                                                              + 4808))
        && !AppleBCMWLANPCIeTransmitFlowRing::packetsWaitingForRingCount(*(AppleBCMWLANPCIeTransmitFlowRing **)(*((void *)this + 9) + 8 * *a7 + 4808), 2))
      {
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            int v37 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v37, "[dk] %s@%d:Invalidating previous flowId: %d. Flows: max_possible=%d max_seen=%d current=%d\n", "requestFlowId", 10908, *a7, *(_DWORD *)(*((void *)this + 9) + 368), *(_DWORD *)(*((void *)this + 9) + 4608), *(_DWORD *)(*((void *)this + 9) + 4612));
          }
        }
        if (!AppleBCMWLANBusInterfacePCIe::invalidateFlowId(this, *a7)) {
          AppleBCMWLANBusInterfacePCIe::deleteFlow(this, *a7, 10916);
        }
      }
      goto LABEL_24;
    }
    if (v27) {
      *a7 = -1;
    }
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v29 = AppleBCMWLANBusInterface::getLogger(this);
        int v41 = *a7;
        uint64_t v42 = (CCLogStream *)v29;
        int v30 = IO80211_io80211isDebuggable();
        int v31 = a3;
        if (!v30) {
          int v31 = 0;
        }
        int v40 = v31;
        if (IO80211_io80211isDebuggable()) {
          int v32 = BYTE1(a3);
        }
        else {
          int v32 = 0;
        }
        int v39 = v32;
        if (IO80211_io80211isDebuggable()) {
          int v33 = BYTE2(a3);
        }
        else {
          int v33 = 0;
        }
        int v38 = v33;
        if (IO80211_io80211isDebuggable()) {
          int v34 = BYTE3(a3);
        }
        else {
          int v34 = 0;
        }
        if (IO80211_io80211isDebuggable()) {
          int v35 = BYTE4(a3);
        }
        else {
          int v35 = 0;
        }
        if (IO80211_io80211isDebuggable()) {
          int v36 = BYTE5(a3);
        }
        else {
          int v36 = 0;
        }
        CCLogStream::logAlert(v42, "[dk] %s@%d:Assigning FlowID %d. tid=%d sa=%02x:%02x:%02x:%02x:%02x:%02x da=%02x:%02x:%02x:%02x:%02x:%02x ifid=%d maxpkt=%d\n", "requestFlowId", 10932, v41, a5, a2, BYTE1(a2), BYTE2(a2), BYTE3(a2), BYTE4(a2), BYTE5(a2), v40, v39, v38, v34, v35, v36, a4,
          *a8);
      }
    }
    uint64_t v28 = *a7;
    if (v28 != 0xFFFF)
    {
      *(_WORD *)(*((void *)this + 9) + 4 * v28 + 1866) |= 1u;
      __int16 v55 = -21846;
      int v57 = -1431655766;
      uint64_t v58 = a9;
      unsigned __int8 v43 = a4;
      __int16 v44 = a3;
      char v45 = BYTE2(a3);
      char v46 = BYTE3(a3);
      char v47 = BYTE4(a3);
      char v48 = BYTE5(a3);
      __int16 v49 = a2;
      char v50 = BYTE2(a2);
      char v51 = BYTE3(a2);
      char v52 = BYTE4(a2);
      char v53 = BYTE5(a2);
      char v54 = a5;
      int v56 = a6;
      AppleBCMWLANBusInterfacePCIe::createFlow(this, *a7, &v43, a10, a11, a12, a13, a14);
    }
    return 0;
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::findLRUFlowId(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t v1 = *((void *)this + 9);
  int v2 = *(unsigned __int16 *)(v1 + 368);
  uint64_t v3 = *(unsigned __int8 *)(v1 + 2040);
  if (*(_WORD *)(v1 + 368))
  {
    do
    {
      uint64_t v4 = v1 + 4 * v3;
      if ((*(_WORD *)(v4 + 1866) & 1) == 0 && !*(void *)(v1 + 8 * v3 + 4808)) {
        break;
      }
      uint64_t v3 = *(unsigned __int8 *)(v4 + 1864);
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t AppleBCMWLANBusInterfacePCIe::printMRUFlowIdList(AppleBCMWLANBusInterfacePCIe *this, char *a2)
{
  uint64_t v3 = *((void *)this + 9);
  int v4 = *(unsigned __int16 *)(v3 + 368);
  if (*(_WORD *)(v3 + 368))
  {
    int v5 = 0;
    int v6 = 0;
    int v7 = (unsigned __int8 *)(v3 + 2040);
    do
    {
      uint64_t v8 = *v7;
      AppleBCMWLANBusInterface::getLogger(this);
      v6 += IO80211Print();
      int v7 = (unsigned __int8 *)(*((void *)this + 9) + 4 * v8 + 1864);
      ++v5;
    }
    while (v4 != v5);
  }
  else
  {
    int v6 = 0;
  }
  AppleBCMWLANBusInterface::getLogger(this);
  return v6 + IO80211Print();
}

uint64_t AppleBCMWLANBusInterfacePCIe::requestIOTx(AppleBCMWLANBusInterface *a1, int a2)
{
  int v6 = a2;
  kdebug_trace();
  if ((*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 9) + 3464) + 144))(*(void *)(*((void *)a1 + 9) + 3464))) {
    uint64_t v3 = AppleBCMWLANBusInterfacePCIe::requestIOTxGated(a1, &v6);
  }
  else {
    uint64_t v3 = (*(uint64_t (**)(void, uint64_t (*)(AppleBCMWLANBusInterface *, _DWORD *), int *, void, void, void))(**(void **)(*((void *)a1 + 9) + 3472) + 56))(*(void *)(*((void *)a1 + 9) + 3472), AppleBCMWLANBusInterfacePCIe::requestIOTxGated, &v6, 0, 0, 0);
  }
  uint64_t v4 = v3;
  kdebug_trace();
  return v4;
}

uint64_t AppleBCMWLANBusInterfacePCIe::requestIOTxGated(AppleBCMWLANBusInterface *a1, _DWORD *a2)
{
  kdebug_trace();
  uint64_t v4 = *((void *)a1 + 9);
  if (!*(unsigned char *)(v4 + 1304) && *(void *)(v4 + 3248) && *(unsigned char *)(v4 + 1306))
  {
    mach_continuous_time();
    absolutetime_to_nanoseconds();
    uint64_t v5 = *((void *)a1 + 9);
    int v6 = *(unsigned __int16 *)(v5 + 2840);
    if (*a2)
    {
      unsigned int WritableItemCount = AppleBCMWLANItemRing::getWritableItemCount(*(AppleBCMWLANItemRing **)(v5 + 312));
      int v9 = *(_DWORD *)(*((void *)a1 + 9) + 1148);
      AppleBCMWLANBusInterface::getTxDescriptor(a1, v21);
      int Size = AppleBCMWLANCommandQueue::getSize((AppleBCMWLANCommandQueue *)v21[0].n128_u64[1]);
      uint64_t v11 = *((void *)a1 + 9);
      if (WritableItemCount >= 1 - Size - v9)
      {
        int v12 = *(_DWORD *)(v11 + 1148);
        AppleBCMWLANBusInterface::getTxDescriptor(a1, &v22);
        int v7 = 1 - AppleBCMWLANCommandQueue::getSize((AppleBCMWLANCommandQueue *)v22.n128_u64[1]) - v12;
      }
      else
      {
        LOWORD(v7) = AppleBCMWLANItemRing::getWritableItemCount(*(AppleBCMWLANItemRing **)(v11 + 312));
      }
    }
    else
    {
      LOWORD(v7) = 0;
    }
    if ((unsigned __int16)v7 >= (*a2 & 1u)) {
      int v13 = *a2 & 1;
    }
    else {
      LOWORD(v13) = v7;
    }
    kdebug_trace();
    if ((unsigned __int16)v13 | (unsigned __int16)v6)
    {
      AppleBCMWLANBusInterfacePCIe::getWorkFromUpperLayers(a1, v6, (unsigned __int16)v13);
      uint64_t v14 = *(CCLogStream **)(*((void *)a1 + 9) + 4600);
      if (v14 && CCLogStream::shouldLog(v14, 1uLL)) {
        AppleBCMWLANBusInterfacePCIe::pcapFillBusState(a1, (uint64_t)v21[0].n128_i64 + 2);
      }
      (*(void (**)(void))(**(void **)(*((void *)a1 + 9) + 312) + 208))(*(void *)(*((void *)a1 + 9) + 312));
      uint64_t v15 = AppleBCMWLANBusInterfacePCIe::workPendingForControl(a1);
      kdebug_trace();
      if (v15) {
        LODWORD(v15) = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(*((void *)a1 + 9) + 312)
      }
                                                                           + 192))(*(void *)(*((void *)a1 + 9) + 312), v15, 1);
      if (AppleBCMWLANBusInterface::getTxDescriptorCommandQueueSize(a1))
      {
        if (AppleBCMWLANBusInterface::getLogger(a1))
        {
          AppleBCMWLANBusInterface::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
            TxDescriptorCommandint QueueSize = AppleBCMWLANBusInterface::getTxDescriptorCommandQueueSize(a1);
            CCLogStream::logCrit(Logger, "[dk] %s@%d:Ring overflow: control (submit=%u, remain=%u)\n", "requestIOTxGated", 11165, v15, TxDescriptorCommandQueueSize);
          }
        }
      }
    }
    kdebug_trace();
    return 0;
  }
  else
  {
    uint64_t v16 = 3758097123;
    kdebug_trace();
    if (AppleBCMWLANBusInterface::getLogger(a1))
    {
      AppleBCMWLANBusInterface::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v18 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
        CCLogStream::logCrit(v18, "[dk] %s@%d:requestIOTxGated: transport not ready, chipHalted %u, fPCIeBus %p, IPC %u", "requestIOTxGated", 11110, *(unsigned __int8 *)(*((void *)a1 + 9) + 1304), *(const void **)(*((void *)a1 + 9) + 3248), *(unsigned __int8 *)(*((void *)a1 + 9) + 1306));
      }
    }
  }
  return v16;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::requestIOTx(uint64_t a1, int a2)
{
  return AppleBCMWLANBusInterfacePCIe::requestIOTx((AppleBCMWLANBusInterface *)(a1 - 48), a2);
}

uint64_t AppleBCMWLANBusInterfacePCIe::getWorkFromUpperLayers(AppleBCMWLANBusInterfacePCIe *this, int a2, int a3)
{
  kdebug_trace();
  if (a3 | a2)
  {
    AppleBCMWLANBusInterface::setTxDescriptorCommandioCount((uint64_t)this, a3);
    AppleBCMWLANBusInterface::setTxDescriptorPacketactiveDataACs((uint64_t)this, 255);
    AppleBCMWLANBusInterface::setTxDescriptorPacketioCount((uint64_t)this, a2);
    memset(v7, 170, sizeof(v7));
    AppleBCMWLANBusInterface::getTxDescriptor(this, (__n128 *)v7);
    AppleBCMWLANBusInterface::dequeueTxIOs((uint64_t)this);
    return kdebug_trace();
  }
  else
  {
    return kdebug_trace();
  }
}

uint64_t AppleBCMWLANBusInterfacePCIe::changeSleepState(AppleBCMWLANBusInterface *this, int a2, __int16 a3)
{
  switch(a2)
  {
    case 5:
      uint64_t v5 = *((void *)this + 9);
      int v6 = *(_DWORD *)(v5 + 1224);
      if (v6 == 10 || v6 == 13) {
        goto LABEL_7;
      }
      goto LABEL_9;
    case 6:
      uint64_t v5 = *((void *)this + 9);
      if (((*(_DWORD *)(v5 + 1224) - 5) & 0xFFFFFFF7) != 0) {
        goto LABEL_9;
      }
      goto LABEL_7;
    case 7:
      uint64_t v5 = *((void *)this + 9);
      if (*(_DWORD *)(v5 + 1224) != 6) {
        goto LABEL_9;
      }
      goto LABEL_7;
    case 8:
      uint64_t v5 = *((void *)this + 9);
      if (*(_DWORD *)(v5 + 1224) != 7) {
        goto LABEL_9;
      }
      goto LABEL_7;
    case 9:
      uint64_t v5 = *((void *)this + 9);
      if ((*(_DWORD *)(v5 + 1224) - 7) >= 2) {
        goto LABEL_9;
      }
      goto LABEL_7;
    case 10:
      uint64_t v5 = *((void *)this + 9);
      if ((*(_DWORD *)(v5 + 1224) - 7) >= 3) {
        goto LABEL_9;
      }
      goto LABEL_7;
    case 11:
      uint64_t v5 = *((void *)this + 9);
      if ((*(_DWORD *)(v5 + 1224) - 5) > 1) {
        goto LABEL_9;
      }
      goto LABEL_7;
    case 12:
      uint64_t v5 = *((void *)this + 9);
      if (*(_DWORD *)(v5 + 1224) != 11) {
        goto LABEL_9;
      }
      goto LABEL_7;
    case 13:
      uint64_t v5 = *((void *)this + 9);
      int v12 = *(_DWORD *)(v5 + 1224);
      if (v12 == 5)
      {
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          unsigned int v9 = 1;
          if (CCLogStream::shouldLog())
          {
            uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(Logger, "[dk] %s@%d:IPC re-created during HostSleep; skip full corecapture",
              "changeSleepState",
              14253);
          }
        }
        else
        {
          unsigned int v9 = 1;
        }
      }
      else
      {
        if (v12 == 12)
        {
LABEL_7:
          *(_DWORD *)(v5 + 1224) = a2;
          uint64_t v8 = 1;
          AppleBCMWLANBusInterfacePCIe::logPowerStateTransition(this, a2, 1, a3);
          return v8;
        }
LABEL_9:
        unsigned int v9 = 5;
      }
      uint64_t FaultReporter = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(this);
      CCFaultReporter::reportFault(FaultReporter, v9, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANBusInterfacePCIe.cpp", 0x37B4u, "changeSleepState", 0, -469794014, "old state %d, new state %d\n", *(_DWORD *)(*((void *)this + 9) + 1224), a2);
      return 0;
    default:
      goto LABEL_9;
  }
}

uint64_t AppleBCMWLANBusInterfacePCIe::writeH2DMailbox(AppleBCMWLANBusInterfacePCIe *this, int a2)
{
  uint64_t v2 = *((void *)this + 9);
  if (*(unsigned char *)(v2 + 1306))
  {
    *(_DWORD *)(v2 + 5200) = a2;
    *(unsigned char *)(*((void *)this + 9) + 5196) = 1;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(*((void *)this + 9) + 312) + 192))(*(void *)(*((void *)this + 9) + 312), 1, 1);
    AppleBCMWLANPCIeDoorbell::cancelRing(*(void *)(*((void *)this + 9) + 3640));
    AppleBCMWLANBusInterfacePCIe::hitDoorbell(this, v4);
  }
  return 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::hitDoorbell(AppleBCMWLANBusInterfacePCIe *this, const char *a2)
{
  uint64_t result = (*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *, const char *, uint64_t))(*(void *)this + 1208))(this, "hitDoorbell", 16806);
  uint64_t v4 = *((void *)this + 9);
  if (!*(unsigned char *)(v4 + 3706) && *(unsigned char *)(v4 + 1306))
  {
    kdebug_trace();
    uint64_t v5 = *((void *)this + 9);
    if (*(_DWORD *)(v5 + 2844) == 2
      && *(_DWORD *)(v5 + 1224) == 8
      && !AppleBCMWLANBusInterfacePCIe::changeSleepState(this, 9, 16825))
    {
      uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
      if (result)
      {
        AppleBCMWLANBusInterface::getLogger(this);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          return CCLogStream::logCrit(Logger, "[dk] %s@%d:hitDoorbell: failed to change SleepState\n", "hitDoorbell", 16857);
        }
      }
    }
    else
    {
      mach_continuous_time();
      absolutetime_to_nanoseconds();
      AppleBCMWLANChipBackplane::writePCIeDoorbell(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x140u, *(void *)(*((void *)this + 9) + 2936) / 0x3E8uLL);
      ++*(_DWORD *)(*((void *)this + 9) + 1296);
      AppleBCMWLANBusInterface::getTxCommittedCommandDescriptor(this);
      if (AppleBCMWLANCommandQueue::getSize(v6)) {
        AppleBCMWLANBusInterface::reportCommittedTxCommands((uint64_t)this);
      }
      return kdebug_trace();
    }
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::workPendingForDebug(AppleBCMWLANBusInterfacePCIe *this)
{
  return (16 - *(_DWORD *)(*((void *)this + 9) + 1184));
}

uint64_t AppleBCMWLANBusInterfacePCIe::fillDebugSubmitRing(AppleBCMWLANBusInterfacePCIe *this, AppleBCMWLANTxItemRing *a2, uint64_t a3)
{
  uint64_t v3 = *((void *)this + 9);
  if (!*(unsigned char *)(v3 + 1306) || *(int *)(v3 + 1184) > 15) {
    return 0;
  }
  uint64_t result = AppleBCMWLANBusInterfacePCIe::submitDebugBufferMsg(this, (uint64_t)a2, a3);
  *(_DWORD *)(*((void *)this + 9) + 1184) += result;
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::submitDebugBufferMsg(AppleBCMWLANBusInterface *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 3758097085;
  __int16 v22 = -1;
  *(void *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_WORD *)a3 = -231;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 248))(a2)) {
    char v7 = -127;
  }
  else {
    char v7 = 1;
  }
  *(unsigned char *)(a3 + 2) = v7;
  uint64_t v8 = (AppleBCMWLANPCIeIO *)(*(uint64_t (**)(void, void))(**(void **)(*((void *)a1 + 9) + 3544)
                                                                       + 64))(*(void *)(*((void *)a1 + 9) + 3544), 0);
  if (v8)
  {
    unsigned int v9 = (IO80211Buffer *)(*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 9) + 1336) + 56))(*(void *)(*((void *)a1 + 9) + 1336));
    unint64_t v10 = v9;
    if (v9)
    {
      unsigned int v11 = IO80211Buffer::getLength(v9) - 68;
      uint64_t BusAddr64 = AppleBCMWLANPCIeIO::prepare(v8, v10, 68, v11);
      if (!BusAddr64)
      {
        uint64_t BusAddr64 = AppleBCMWLANHashtable::add(*(AppleBCMWLANHashtable **)(*((void *)a1 + 9) + 3584), (OSObject *)v8, (unsigned __int16 *)&v22);
        if (!BusAddr64)
        {
          v21.uint64_t address = 0;
          v21.__int16 length = 0;
          uint64_t BusAddr64 = AppleBCMWLANPCIeIO::getBusAddr64((AppleBCMWLANDMASlab ***)v8, &v21);
          if (!BusAddr64)
          {
            uint64_t address = v21.address;
            __int16 length = v21.length;
            if (v21.length >= v11) {
              __int16 length = v11;
            }
            *(_WORD *)(a3 + 8) = length;
            *(void *)(a3 + 16) = address;
            *(_WORD *)(a3 + 4) = v22;
            *(_WORD *)(a3 + 6) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 296))(a2);
            return 1;
          }
        }
      }
      uint64_t v6 = BusAddr64;
    }
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v6 = 3758097086;
  }
  if (AppleBCMWLANBusInterface::getLogger(a1))
  {
    AppleBCMWLANBusInterface::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
      uint64_t v17 = *((void *)a1 + 9);
      int v18 = *(_DWORD *)(v17 + 1184);
      int v19 = (*(uint64_t (**)(void))(**(void **)(v17 + 3584) + 72))(*(void *)(v17 + 3584));
      uint64_t v20 = (const char *)(*(uint64_t (**)(AppleBCMWLANBusInterface *, uint64_t))(*(void *)a1 + 104))(a1, v6);
      CCLogStream::logCrit(Logger, "[dk] %s@%d:Failed to submit debug buffer (active %u, tracked %u), %s\n", "submitDebugBufferMsg", 11332, v18, v19, v20);
    }
  }
  if ((unsigned __int16)v22 != 0xFFFF) {
    AppleBCMWLANHashtable::remove(*(AppleBCMWLANHashtable **)(*((void *)a1 + 9) + 3584), v22);
  }
  if (v8)
  {
    v21.uint64_t address = 0xAAAAAAAAAAAAAAAALL;
    AppleBCMWLANPCIeIO::complete(v8, (IO80211Buffer **)&v21);
    AppleBCMWLANPCIeIO::setCompanionIO((uint64_t)v8, 0);
    (*(void (**)(void, AppleBCMWLANPCIeIO *))(**(void **)(*((void *)a1 + 9) + 3544) + 72))(*(void *)(*((void *)a1 + 9) + 3544), v8);
  }
  if (v10) {
    IO80211Buffer::returnBuffer(v10);
  }
  return 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::printWorkPendingForIPCStats(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t v2 = *((void *)this + 9);
  if (*(unsigned char *)(v2 + 1306))
  {
    (*(void (**)(void, const char *))(**(void **)(v2 + 312) + 288))(*(void *)(v2 + 312), "ivars->fPCIeControlSubmissionRing");
    (*(void (**)(void))(**(void **)(*((void *)this + 9) + 320) + 288))();
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:IPC RequestIOTx ts=%llu\n", "printWorkPendingForIPCStats", 11392, *(void *)(*((void *)this + 9) + 5224));
      }
    }
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        char v7 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:IPC ivars->fH2DMailboxPending.pending %u\n", "printWorkPendingForIPCStats", 11393, *(unsigned __int8 *)(*((void *)this + 9) + 5196));
      }
    }
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        uint64_t v9 = *((void *)this + 9);
        unsigned int v10 = 1 - *(_DWORD *)(v9 + 1176);
        unsigned int v11 = (*(uint64_t (**)(void))(**(void **)(v9 + 1088) + 72))(*(void *)(v9 + 1088));
        uint64_t v12 = *((void *)this + 9);
        if (v10 >= v11) {
          int v13 = (*(uint64_t (**)(void))(**(void **)(v12 + 1088) + 72))(*(void *)(v12 + 1088));
        }
        else {
          int v13 = 1 - *(_DWORD *)(v12 + 1176);
        }
        CCLogStream::logAlert(v8, "[dk] %s@%d:IPC flow create %u\n", "printWorkPendingForIPCStats", 11394, v13);
      }
    }
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v14 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        uint64_t v15 = *((void *)this + 9);
        unsigned int v16 = 1 - *(_DWORD *)(v15 + 1180);
        unsigned int v17 = (*(uint64_t (**)(void))(**(void **)(v15 + 1096) + 72))(*(void *)(v15 + 1096));
        uint64_t v18 = *((void *)this + 9);
        if (v16 >= v17) {
          int v19 = (*(uint64_t (**)(void))(**(void **)(v18 + 1096) + 72))(*(void *)(v18 + 1096));
        }
        else {
          int v19 = 1 - *(_DWORD *)(v18 + 1180);
        }
        CCLogStream::logAlert(v14, "[dk] %s@%d:IPC flow destroy %u\n", "printWorkPendingForIPCStats", 11395, v19);
      }
    }
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v20 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        unsigned int v21 = 1
            - (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 1112) + 72))(*(void *)(*((void *)this + 9) + 1112));
        uint64_t v22 = *((void *)this + 9);
        unsigned int v23 = v22 + 4112 != *(void *)(v22 + 4112);
        if (v21 < v23) {
          unsigned int v23 = 1 - (*(uint64_t (**)(void))(**(void **)(v22 + 1112) + 72))(*(void *)(v22 + 1112));
        }
        CCLogStream::logAlert(v20, "[dk] %s@%d:IPC H2D ring create %u\n", "printWorkPendingForIPCStats", 11396, v23);
      }
    }
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        unsigned __int8 v24 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        unsigned int v25 = 1
            - (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 1120) + 72))(*(void *)(*((void *)this + 9) + 1120));
        uint64_t v26 = *((void *)this + 9);
        unsigned int v27 = v26 + 4144 != *(void *)(v26 + 4144);
        if (v25 < v27) {
          unsigned int v27 = 1 - (*(uint64_t (**)(void))(**(void **)(v26 + 1120) + 72))(*(void *)(v26 + 1120));
        }
        CCLogStream::logAlert(v24, "[dk] %s@%d:IPC H2D ring destroy %u\n", "printWorkPendingForIPCStats", 11397, v27);
      }
    }
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v28 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        unsigned int v29 = 1
            - (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 1128) + 72))(*(void *)(*((void *)this + 9) + 1128));
        uint64_t v30 = *((void *)this + 9);
        unsigned int v31 = v30 + 4128 != *(void *)(v30 + 4128);
        if (v29 < v31) {
          unsigned int v31 = 1 - (*(uint64_t (**)(void))(**(void **)(v30 + 1128) + 72))(*(void *)(v30 + 1128));
        }
        CCLogStream::logAlert(v28, "[dk] %s@%d:IPC D2H ring create %u\n", "printWorkPendingForIPCStats", 11398, v31);
      }
    }
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        int v32 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        unsigned int v33 = 1
            - (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 1136) + 72))(*(void *)(*((void *)this + 9) + 1136));
        uint64_t v34 = *((void *)this + 9);
        unsigned int v35 = v34 + 4160 != *(void *)(v34 + 4160);
        if (v33 < v35) {
          unsigned int v35 = 1 - (*(uint64_t (**)(void))(**(void **)(v34 + 1136) + 72))(*(void *)(v34 + 1136));
        }
        CCLogStream::logAlert(v32, "[dk] %s@%d:IPC D2H ring destroy %u\n", "printWorkPendingForIPCStats", 11399, v35);
      }
    }
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        int v36 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v36, "[dk] %s@%d:IPC active command %u\n", "printWorkPendingForIPCStats", 11400, 1 - *(_DWORD *)(*((void *)this + 9) + 1152));
      }
    }
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        int v37 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v37, "[dk] %s@%d:IPC active event %u\n", "printWorkPendingForIPCStats", 11401, *(unsigned __int16 *)(*((void *)this + 9) + 2888) - *(_DWORD *)(*((void *)this + 9) + 1156));
      }
    }
    if (*(_DWORD *)(*((void *)this + 9) + 3984) == 2)
    {
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          int v41 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v41, "[dk] %s@%d:IPC timestamp buffer %u\n", "printWorkPendingForIPCStats", 11404, 8 - *(_DWORD *)(*((void *)this + 9) + 1188));
        }
      }
    }
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        int v38 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        TxDescriptorCommandint QueueSize = AppleBCMWLANBusInterface::getTxDescriptorCommandQueueSize(this);
        CCLogStream::logAlert(v38, "[dk] %s@%d:IPC txDescr command queue %u\n", "printWorkPendingForIPCStats", 11406, TxDescriptorCommandQueueSize);
      }
    }
    uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
    if (result)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v4 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        uint64_t v5 = *((void *)this + 9);
        return CCLogStream::logAlert(v4, "[dk] %s@%d:MSI: Last: %06llu.%06llu to %06llu.%06llu; LAST H2D DB: at=%06llu.%06llu. CtrlCompl@lastMSI:"
                 " {%d,%d}, ringDrain=%06llu.%06llu, cbReportStart=%06llu.%06llu, cbReportComplete=%06llu.%06llu\n",
                 "printWorkPendingForIPCStats",
                 11415,
                 *(void *)(v5 + 2904) / 0x3B9ACA00uLL,
                 *(void *)(v5 + 2904) % 0x3B9ACA00uLL / 0x3E8,
                 *(void *)(v5 + 2928) / 0x3B9ACA00uLL,
                 *(void *)(v5 + 2928) % 0x3B9ACA00uLL / 0x3E8,
                 *(void *)(v5 + 2936) / 0x3B9ACA00uLL,
                 *(void *)(v5 + 2936) % 0x3B9ACA00uLL / 0x3E8,
                 *(unsigned int *)(v5 + 3852));
      }
    }
  }
  else
  {
    uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
    if (result)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v40 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        return CCLogStream::logAlert(v40, "[dk] %s@%d:IPC not available\n");
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::printWorkPendingForIPCStats(AppleBCMWLANBusInterfacePCIe *this)
{
  return AppleBCMWLANBusInterfacePCIe::printWorkPendingForIPCStats((AppleBCMWLANBusInterfacePCIe *)((char *)this - 48));
}

uint64_t AppleBCMWLANBusInterfacePCIe::submitH2DMailboxMsg(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a3 = -221;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 248))(a2)) {
    char v6 = -127;
  }
  else {
    char v6 = 1;
  }
  *(unsigned char *)(a3 + 2) = v6;
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(*(void *)(a1 + 72) + 5200);
  *(_WORD *)(a3 + 4) = 0;
  *(_WORD *)(a3 + 6) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 296))(a2);
  *(unsigned char *)(*(void *)(a1 + 72) + 5196) = 0;
  return 1;
}

uint64_t AppleBCMWLANBusInterfacePCIe::submitH2DRingCreateMsg(AppleBCMWLANBusInterface *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t **)(*((void *)this + 9) + 4112);
  uint64_t v5 = *v4;
  if (v4 == (uint64_t **)*v4)
  {
    uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
    if (result)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logCrit(Logger, "[dk] %s@%d:no requests\n", "submitH2DRingCreateMsg", 11558);
        return 0;
      }
    }
  }
  else
  {
    __int16 v20 = -1;
    if (*(uint64_t **)v5[1] != v5 || (char v6 = (uint64_t *)*v5, *(uint64_t **)(*v5 + 8) != v5)) {
      __break(1u);
    }
    v6[1] = (uint64_t)v4;
    *uint64_t v4 = v6;
    *uint64_t v5 = 0;
    v5[1] = 0;
    ContextFromLinuint64_t k = (AppleBCMWLANDynamicRingOperationContext *)AppleBCMWLANDynamicRingOperationContext::getContextFromLink((uint64_t)v5);
    *(_OWORD *)a3 = 0u;
    *(void *)(a3 + 32) = 0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_WORD *)a3 = -229;
    if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 248))(a2)) {
      char v10 = -127;
    }
    else {
      char v10 = 1;
    }
    *(unsigned char *)(a3 + 2) = v10;
    uint64_t RingOperationCompletionPtr = AppleBCMWLANDynamicRingOperationContext::getRingOperationCompletionPtr(ContextFromLink);
    uint64_t CompletionRingPtr = AppleBCMWLANDynamicRingOperationContext::getCompletionRingPtr(ContextFromLink);
    uint64_t SubmissionRingPtr = (AppleBCMWLANItemRing *)AppleBCMWLANDynamicRingOperationContext::getSubmissionRingPtr(ContextFromLink);
    *(_WORD *)(a3 + 8) = (*(uint64_t (**)(AppleBCMWLANItemRing *))(*(void *)SubmissionRingPtr + 208))(SubmissionRingPtr);
    *(unsigned char *)(a3 + 10) = (*(uint64_t (**)(AppleBCMWLANItemRing *))(*(void *)SubmissionRingPtr + 216))(SubmissionRingPtr);
    *(unsigned char *)(a3 + 11) = 1;
    *(_DWORD *)(a3 + 12) = 0;
    *(_WORD *)(a3 + 24) = AppleBCMWLANItemRing::getItemCount(SubmissionRingPtr);
    *(_WORD *)(a3 + 26) = AppleBCMWLANItemRing::getItemSize(SubmissionRingPtr);
    (*(void (**)(AppleBCMWLANItemRing *, uint64_t))(*(void *)SubmissionRingPtr + 240))(SubmissionRingPtr, a3 + 16);
    *(_WORD *)(a3 + 28) = (*(uint64_t (**)(uint64_t))(*(void *)CompletionRingPtr + 208))(CompletionRingPtr);
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v18 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logCrit(v18, "[dk] %s@%d:type %u, id %u\n", "submitH2DRingCreateMsg", 11595, *(unsigned __int8 *)(a3 + 10), *(unsigned __int16 *)(a3 + 8));
      }
    }
    uint64_t v14 = AppleBCMWLANHashtable::add(*(AppleBCMWLANHashtable **)(*((void *)this + 9) + 1112), (OSObject *)ContextFromLink, (unsigned __int16 *)&v20);
    if (v14)
    {
      uint64_t v15 = v14;
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          int v19 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logCrit(v19, "[dk] %s@%d:failed to add to tracker: 0x%x\n", "submitH2DRingCreateMsg", 11600, v15);
        }
      }
      (*(void (**)(AppleBCMWLANItemRing *))(*(void *)SubmissionRingPtr + 16))(SubmissionRingPtr);
      (*(void (**)(void, void, uint64_t, void))(RingOperationCompletionPtr + 8))(*(void *)RingOperationCompletionPtr, 0, v15, *(void *)(RingOperationCompletionPtr + 16));
      if (ContextFromLink) {
        (*(void (**)(AppleBCMWLANDynamicRingOperationContext *))(*(void *)ContextFromLink + 16))(ContextFromLink);
      }
      return 0;
    }
    *(_WORD *)(a3 + 4) = v20;
    *(_WORD *)(a3 + 6) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 296))(a2);
    AppleBCMWLANDynamicRingOperationContext::setRingOperationResourceID((uint64_t)ContextFromLink, *(_DWORD *)(a3 + 4));
    return 1;
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::submitH2DRingDeleteMsg(AppleBCMWLANBusInterface *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *((void *)this + 9);
  if (v4 + 4144 == *(void *)(v4 + 4144))
  {
    uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
    if (result)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logCrit(Logger, "[dk] %s@%d:no requests\n", "submitH2DRingDeleteMsg", 11685);
        return 0;
      }
    }
  }
  else
  {
    __int16 v19 = -1;
    char v7 = (void *)(v4 + 4160);
    uint64_t result = *(void *)(v4 + 4160);
    if (result == v4 + 4160)
    {
      uint64_t result = 0;
    }
    else
    {
      if (**(void **)(result + 8) != result
        || (uint64_t v9 = *(void *)result, *(void *)(*(void *)result + 8) != result))
      {
        __break(1u);
        return result;
      }
      *(void *)(v9 + 8) = v7;
      *char v7 = v9;
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
    }
    ContextFromLinuint64_t k = (AppleBCMWLANDynamicRingOperationContext *)AppleBCMWLANDynamicRingOperationContext::getContextFromLink(result);
    *(void *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_WORD *)a3 = -213;
    if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 248))(a2)) {
      char v12 = -127;
    }
    else {
      char v12 = 1;
    }
    *(unsigned char *)(a3 + 2) = v12;
    uint64_t RingOperationCompletionPtr = AppleBCMWLANDynamicRingOperationContext::getRingOperationCompletionPtr(ContextFromLink);
    uint64_t SubmissionRingPtr = AppleBCMWLANDynamicRingOperationContext::getSubmissionRingPtr(ContextFromLink);
    *(_WORD *)(a3 + 8) = (*(uint64_t (**)(uint64_t))(*(void *)SubmissionRingPtr + 208))(SubmissionRingPtr);
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v17 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logCrit(v17, "[dk] %s@%d:id %u\n", "submitH2DRingDeleteMsg", 11714, *(unsigned __int16 *)(a3 + 8));
      }
    }
    uint64_t v15 = AppleBCMWLANHashtable::add(*(AppleBCMWLANHashtable **)(*((void *)this + 9) + 1120), (OSObject *)ContextFromLink, (unsigned __int16 *)&v19);
    if (v15)
    {
      uint64_t v16 = v15;
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v18 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logCrit(v18, "[dk] %s@%d:failed to add to tracker: 0x%x\n", "submitH2DRingDeleteMsg", 11719, v16);
        }
      }
      (*(void (**)(void, uint64_t, uint64_t, void))(RingOperationCompletionPtr + 8))(*(void *)RingOperationCompletionPtr, SubmissionRingPtr, v16, *(void *)(RingOperationCompletionPtr + 16));
      if (ContextFromLink) {
        (*(void (**)(AppleBCMWLANDynamicRingOperationContext *))(*(void *)ContextFromLink + 16))(ContextFromLink);
      }
      return 0;
    }
    *(_WORD *)(a3 + 4) = v19;
    *(_WORD *)(a3 + 6) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 296))(a2);
    AppleBCMWLANDynamicRingOperationContext::setRingOperationResourceID((uint64_t)ContextFromLink, *(_DWORD *)(a3 + 4));
    return 1;
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::submitD2HRingCreateMsg(AppleBCMWLANBusInterface *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t **)(*((void *)this + 9) + 4128);
  uint64_t v5 = *v4;
  if (v4 == (uint64_t **)*v4)
  {
    uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
    if (result)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logCrit(Logger, "[dk] %s@%d:no requests\n", "submitD2HRingCreateMsg", 11494);
        return 0;
      }
    }
  }
  else
  {
    __int16 v19 = -1;
    if (*(uint64_t **)v5[1] != v5 || (char v6 = (uint64_t *)*v5, *(uint64_t **)(*v5 + 8) != v5)) {
      __break(1u);
    }
    v6[1] = (uint64_t)v4;
    *uint64_t v4 = v6;
    *uint64_t v5 = 0;
    v5[1] = 0;
    ContextFromLinuint64_t k = (AppleBCMWLANDynamicRingOperationContext *)AppleBCMWLANDynamicRingOperationContext::getContextFromLink((uint64_t)v5);
    *(_OWORD *)a3 = 0u;
    *(void *)(a3 + 32) = 0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_WORD *)a3 = -228;
    if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 248))(a2)) {
      char v10 = -127;
    }
    else {
      char v10 = 1;
    }
    *(unsigned char *)(a3 + 2) = v10;
    uint64_t RingOperationCompletionPtr = AppleBCMWLANDynamicRingOperationContext::getRingOperationCompletionPtr(ContextFromLink);
    uint64_t CompletionRingPtr = (AppleBCMWLANItemRing *)AppleBCMWLANDynamicRingOperationContext::getCompletionRingPtr(ContextFromLink);
    *(_WORD *)(a3 + 8) = (*(uint64_t (**)(AppleBCMWLANItemRing *))(*(void *)CompletionRingPtr + 208))(CompletionRingPtr);
    *(_WORD *)(a3 + 10) = (*(uint64_t (**)(AppleBCMWLANItemRing *))(*(void *)CompletionRingPtr + 216))(CompletionRingPtr);
    *(_DWORD *)(a3 + 12) = 0;
    *(_WORD *)(a3 + 24) = AppleBCMWLANItemRing::getItemCount(CompletionRingPtr);
    *(_WORD *)(a3 + 26) = AppleBCMWLANItemRing::getItemSize(CompletionRingPtr);
    (*(void (**)(AppleBCMWLANItemRing *, uint64_t))(*(void *)CompletionRingPtr + 240))(CompletionRingPtr, a3 + 16);
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v17 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logCrit(v17, "[dk] %s@%d:type %u, id %u\n", "submitD2HRingCreateMsg", 11528, *(unsigned __int16 *)(a3 + 10), *(unsigned __int16 *)(a3 + 8));
      }
    }
    uint64_t v13 = AppleBCMWLANHashtable::add(*(AppleBCMWLANHashtable **)(*((void *)this + 9) + 1128), (OSObject *)ContextFromLink, (unsigned __int16 *)&v19);
    if (v13)
    {
      uint64_t v14 = v13;
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v18 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logCrit(v18, "[dk] %s@%d:failed to add to tracker: 0x%x\n", "submitD2HRingCreateMsg", 11533, v14);
        }
      }
      (*(void (**)(AppleBCMWLANItemRing *))(*(void *)CompletionRingPtr + 16))(CompletionRingPtr);
      (*(void (**)(void, void, uint64_t, void))(RingOperationCompletionPtr + 8))(*(void *)RingOperationCompletionPtr, 0, v14, *(void *)(RingOperationCompletionPtr + 16));
      if (ContextFromLink) {
        (*(void (**)(AppleBCMWLANDynamicRingOperationContext *))(*(void *)ContextFromLink + 16))(ContextFromLink);
      }
      return 0;
    }
    *(_WORD *)(a3 + 4) = v19;
    *(_WORD *)(a3 + 6) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 296))(a2);
    AppleBCMWLANDynamicRingOperationContext::setRingOperationResourceID((uint64_t)ContextFromLink, *(_DWORD *)(a3 + 4));
    return 1;
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::submitD2HRingDeleteMsg(AppleBCMWLANBusInterface *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t **)(*((void *)this + 9) + 4160);
  uint64_t v5 = *v4;
  if (v4 == (uint64_t **)*v4)
  {
    uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
    if (result)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logCrit(Logger, "[dk] %s@%d:no requests\n", "submitD2HRingDeleteMsg", 11626);
        return 0;
      }
    }
  }
  else
  {
    __int16 v19 = -1;
    if (*(uint64_t **)v5[1] != v5 || (char v6 = (uint64_t *)*v5, *(uint64_t **)(*v5 + 8) != v5)) {
      __break(1u);
    }
    v6[1] = (uint64_t)v4;
    *uint64_t v4 = v6;
    *uint64_t v5 = 0;
    v5[1] = 0;
    ContextFromLinuint64_t k = (AppleBCMWLANDynamicRingOperationContext *)AppleBCMWLANDynamicRingOperationContext::getContextFromLink((uint64_t)v5);
    *(void *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_WORD *)a3 = -212;
    if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 248))(a2)) {
      char v10 = -127;
    }
    else {
      char v10 = 1;
    }
    *(unsigned char *)(a3 + 2) = v10;
    uint64_t RingOperationCompletionPtr = AppleBCMWLANDynamicRingOperationContext::getRingOperationCompletionPtr(ContextFromLink);
    uint64_t CompletionRingPtr = AppleBCMWLANDynamicRingOperationContext::getCompletionRingPtr(ContextFromLink);
    *(_WORD *)(a3 + 8) = (*(uint64_t (**)(uint64_t))(*(void *)CompletionRingPtr + 208))(CompletionRingPtr);
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v17 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logCrit(v17, "[dk] %s@%d:id %u\n", "submitD2HRingDeleteMsg", 11655, *(unsigned __int16 *)(a3 + 8));
      }
    }
    uint64_t v13 = AppleBCMWLANHashtable::add(*(AppleBCMWLANHashtable **)(*((void *)this + 9) + 1136), (OSObject *)ContextFromLink, (unsigned __int16 *)&v19);
    if (v13)
    {
      uint64_t v14 = v13;
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v18 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logCrit(v18, "[dk] %s@%d:failed to add to tracker: 0x%x\n", "submitD2HRingDeleteMsg", 11660, v14);
        }
      }
      (*(void (**)(void, uint64_t, uint64_t, void))(RingOperationCompletionPtr + 8))(*(void *)RingOperationCompletionPtr, CompletionRingPtr, v14, *(void *)(RingOperationCompletionPtr + 16));
      if (ContextFromLink) {
        (*(void (**)(AppleBCMWLANDynamicRingOperationContext *))(*(void *)ContextFromLink + 16))(ContextFromLink);
      }
      return 0;
    }
    *(_WORD *)(a3 + 4) = v19;
    *(_WORD *)(a3 + 6) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 296))(a2);
    AppleBCMWLANDynamicRingOperationContext::setRingOperationResourceID((uint64_t)ContextFromLink, *(_DWORD *)(a3 + 4));
    return 1;
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::submitDeleteFlowRequestMsg(AppleBCMWLANBusInterface *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2000000000;
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = *(void *)(*((void *)a1 + 9) + 1096);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  void v13[2] = ___ZN28AppleBCMWLANBusInterfacePCIe26submitDeleteFlowRequestMsgEP22AppleBCMWLANTxItemRingP35BCOMIPCDeleteFlowRingRequestMessage_block_invoke;
  v13[3] = &__block_descriptor_tmp_584;
  v13[4] = &v14;
  (*(void (**)(uint64_t, void *))(*(void *)v6 + 56))(v6, v13);
  if (AppleBCMWLANBusInterface::getLogger(a1))
  {
    AppleBCMWLANBusInterface::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
      int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v15[3] + 208))(v15[3]);
      CCLogStream::logInfo(Logger, "[dk] %s@%d:Deleting flow: %u\n", "submitDeleteFlowRequestMsg", 12231, v12);
    }
  }
  char v7 = *(AppleBCMWLANHashtable **)(*((void *)a1 + 9) + 1096);
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v15[3] + 328))(v15[3]);
  AppleBCMWLANHashtable::remove(v7, v8);
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(void *)(a3 + 32) = 0;
  *(unsigned char *)a3 = 5;
  *(unsigned char *)(a3 + 1) = (*(uint64_t (**)(void))(*(void *)v15[3] + 392))();
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 248))(a2)) {
    char v9 = -127;
  }
  else {
    char v9 = 1;
  }
  *(unsigned char *)(a3 + 2) = v9;
  *(_WORD *)(a3 + 8) = (*(uint64_t (**)(uint64_t))(*(void *)v15[3] + 208))(v15[3]);
  *(_WORD *)(a3 + 10) = (*(uint64_t (**)(void))(*(void *)v15[3] + 416))();
  *(_DWORD *)(*((void *)a1 + 9) + 3008) = *(unsigned __int16 *)(a3 + 8);
  (*(void (**)(void, uint64_t))(**(void **)(*((void *)a1 + 9) + 3592) + 120))(*(void *)(*((void *)a1 + 9) + 3592), 5000);
  *(_WORD *)(a3 + 4) = -1;
  *(_WORD *)(a3 + 6) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 296))(a2);
  _Block_object_dispose(&v14, 8);
  return 1;
}

uint64_t AppleBCMWLANBusInterfacePCIe::submitCreateFlowRequestMsg(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2000000000;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = *(void *)(*(void *)(a1 + 72) + 1088);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  void v11[2] = ___ZN28AppleBCMWLANBusInterfacePCIe26submitCreateFlowRequestMsgEP22AppleBCMWLANTxItemRingP35BCOMIPCCreateFlowRingRequestMessage_block_invoke;
  void v11[3] = &__block_descriptor_tmp_577;
  _OWORD v11[4] = &v12;
  (*(void (**)(uint64_t, void *))(*(void *)v6 + 56))(v6, v11);
  char v7 = *(AppleBCMWLANHashtable **)(*(void *)(a1 + 72) + 1088);
  int v8 = (*(uint64_t (**)(void))(*(void *)v13[3] + 328))();
  AppleBCMWLANHashtable::remove(v7, v8);
  (*(void (**)(void))(*(void *)v13[3] + 320))();
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(void *)(a3 + 32) = 0;
  *(unsigned char *)a3 = 3;
  *(unsigned char *)(a3 + 1) = (*(uint64_t (**)(void))(*(void *)v13[3] + 392))();
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 248))(a2)) {
    char v9 = -127;
  }
  else {
    char v9 = 1;
  }
  *(unsigned char *)(a3 + 2) = v9;
  (*(void (**)(void))(*(void *)v13[3] + 400))();
  (*(void (**)(void))(*(void *)v13[3] + 408))();
  *(unsigned char *)(a3 + 20) = (*(uint64_t (**)(void))(*(void *)v13[3] + 344))();
  *(unsigned char *)(a3 + 21) = (*(uint64_t (**)(void))(*(void *)v13[3] + 352))();
  *(_WORD *)(a3 + 22) = (*(uint64_t (**)(uint64_t))(*(void *)v13[3] + 208))(v13[3]);
  *(unsigned char *)(a3 + 24) = (*(uint64_t (**)(void))(*(void *)v13[3] + 360))();
  *(unsigned char *)(a3 + 25) = (*(uint64_t (**)(void))(*(void *)v13[3] + 376))();
  *(_WORD *)(a3 + 26) = (*(uint64_t (**)(void))(*(void *)v13[3] + 384))();
  *(_WORD *)(a3 + 28) = AppleBCMWLANItemRing::getItemCount((AppleBCMWLANItemRing *)v13[3]);
  *(_WORD *)(a3 + 30) = AppleBCMWLANItemRing::getItemSize((AppleBCMWLANItemRing *)v13[3]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v13[3] + 240))(v13[3], a3 + 32);
  *(_DWORD *)(*(void *)(a1 + 72) + 3012) = *(unsigned __int16 *)(a3 + 22);
  *(_WORD *)(a3 + 4) = -1;
  *(_WORD *)(a3 + 6) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 296))(a2);
  (*(void (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 72) + 1104) + 120))(*(void *)(*(void *)(a1 + 72) + 1104), 5000);
  _Block_object_dispose(&v12, 8);
  return 1;
}

uint64_t AppleBCMWLANBusInterfacePCIe::submitControlBufferMsg(AppleBCMWLANBusInterface *this, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 11 || a4 == 13) {
    goto LABEL_6;
  }
  if (a4 == 37)
  {
    if (*(unsigned char *)(*((void *)this + 9) + 3998)) {
      return 0;
    }
LABEL_6:
    uint64_t v9 = 3758097085;
    __int16 v26 = -1;
    if (a4 == 11) {
      int v10 = 16;
    }
    else {
      int v10 = 4 * (a4 == 13);
    }
    *(void *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(unsigned char *)a3 = a4;
    *(unsigned char *)(a3 + 1) = -1;
    if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 248))(a2)) {
      char v11 = -127;
    }
    else {
      char v11 = 1;
    }
    *(unsigned char *)(a3 + 2) = v11;
    uint64_t v12 = (AppleBCMWLANPCIeIO *)(*(uint64_t (**)(void, void))(**(void **)(*((void *)this + 9) + 3520)
                                                                          + 64))(*(void *)(*((void *)this + 9) + 3520), 0);
    if (v12)
    {
      uint64_t v13 = (IO80211Buffer *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 1328) + 56))(*(void *)(*((void *)this + 9) + 1328));
      uint64_t v14 = v13;
      if (v13)
      {
        unsigned int v15 = IO80211Buffer::getLength(v13) - v10;
        uint64_t BusAddr64 = AppleBCMWLANPCIeIO::prepare(v12, v14, v10, v15);
        if (!BusAddr64)
        {
          uint64_t BusAddr64 = AppleBCMWLANHashtable::add(*(AppleBCMWLANHashtable **)(*((void *)this + 9) + 3560), (OSObject *)v12, (unsigned __int16 *)&v26);
          if (!BusAddr64)
          {
            v25.uint64_t address = 0;
            v25.__int16 length = 0;
            uint64_t BusAddr64 = AppleBCMWLANPCIeIO::getBusAddr64((AppleBCMWLANDMASlab ***)v12, &v25);
            if (!BusAddr64)
            {
              uint64_t address = v25.address;
              __int16 length = v25.length;
              if (v25.length >= v15) {
                __int16 length = v15;
              }
              *(_WORD *)(a3 + 8) = length;
              *(void *)(a3 + 16) = address;
              *(_WORD *)(a3 + 4) = v26;
              *(_WORD *)(a3 + 6) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 296))(a2);
              return 1;
            }
          }
        }
        uint64_t v9 = BusAddr64;
      }
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v9 = 3758097086;
    }
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        uint64_t v21 = *((void *)this + 9);
        int v22 = *(_DWORD *)(v21 + 1152);
        int v23 = (*(uint64_t (**)(void))(**(void **)(v21 + 3560) + 72))(*(void *)(v21 + 3560));
        unsigned __int8 v24 = (const char *)(*(uint64_t (**)(AppleBCMWLANBusInterface *, uint64_t))(*(void *)this + 104))(this, v9);
        CCLogStream::logCrit(Logger, "[dk] %s@%d:Failed to submit Rx buffer (active %u, tracked %u), %s\n", "submitControlBufferMsg", 12010, v22, v23, v24);
      }
    }
    if ((unsigned __int16)v26 != 0xFFFF) {
      AppleBCMWLANHashtable::remove(*(AppleBCMWLANHashtable **)(*((void *)this + 9) + 3560), v26);
    }
    if (v12)
    {
      v25.uint64_t address = 0xAAAAAAAAAAAAAAAALL;
      AppleBCMWLANPCIeIO::complete(v12, (IO80211Buffer **)&v25);
      AppleBCMWLANPCIeIO::setCompanionIO((uint64_t)v12, 0);
      (*(void (**)(void, AppleBCMWLANPCIeIO *))(**(void **)(*((void *)this + 9) + 3520) + 72))(*(void *)(*((void *)this + 9) + 3520), v12);
    }
    if (v14) {
      IO80211Buffer::returnBuffer(v14);
    }
    return 0;
  }
  uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
  if (result)
  {
    AppleBCMWLANBusInterface::getLogger(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      __int16 v19 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logCrit(v19, "[dk] %s@%d:Unexpected message type (%d)\n", "submitControlBufferMsg", 11913, a4);
      return 0;
    }
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::submitIOCtlRequestMsg(AppleBCMWLANBusInterface *a1, uint64_t a2, uint64_t a3)
{
  int v6 = -536870210;
  __int16 v27 = -1;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(void *)(a3 + 32) = 0;
  AppleBCMWLANBusInterface::getTxDescriptor(a1, (__n128 *)&v26);
  char v7 = (AppleBCMWLANTxBuffer *)AppleBCMWLANCommandQueue::dequeue((AppleBCMWLANCommandQueue *)v26.length);
  if (v7)
  {
    int v8 = (AppleBCMWLANPCIeIO *)(*(uint64_t (**)(void, void))(**(void **)(*((void *)a1 + 9) + 3512)
                                                                         + 64))(*(void *)(*((void *)a1 + 9) + 3512), 0);
    if (v8)
    {
      uint64_t Payload = AppleBCMWLANTxBuffer::getPayload(v7, 0);
      if (Payload)
      {
        uint64_t v10 = Payload;
        Payloadint Length = AppleBCMWLANTxBuffer::getPayloadLength(v7);
        unsigned __int16 v12 = PayloadLength - 16;
        if ((PayloadLength & 3) != 0) {
          unsigned __int16 v13 = ((PayloadLength - 16) & 0xFFFC) + 4;
        }
        else {
          unsigned __int16 v13 = PayloadLength - 16;
        }
        if (AppleBCMWLANPCIeIO::getMaxMemorySize(v8) < v13)
        {
          int v6 = -536870168;
        }
        else
        {
          int v14 = v13;
          int v15 = *(_DWORD *)(v10 + 4);
          int v16 = *(_DWORD *)(v10 + 8);
          if ((v15 & 3) != 0) {
            unsigned __int16 v17 = (v15 & 0xFFFC) + 4;
          }
          else {
            unsigned __int16 v17 = *(_DWORD *)(v10 + 4);
          }
          if (v17 >= v12) {
            unsigned __int16 v18 = v17;
          }
          else {
            unsigned __int16 v18 = v12;
          }
          if ((v16 & 2) != 0) {
            unsigned __int16 v19 = v18;
          }
          else {
            unsigned __int16 v19 = v17;
          }
          *(unsigned char *)a3 = 9;
          *(unsigned char *)(a3 + 1) = (unsigned __int16)v16 >> 12;
          if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 248))(a2)) {
            char v20 = -127;
          }
          else {
            char v20 = 1;
          }
          *(unsigned char *)(a3 + 2) = v20;
          *(_DWORD *)(a3 + 8) = *(_DWORD *)v10;
          *(_WORD *)(a3 + 12) = *(_WORD *)(v10 + 10);
          *(_WORD *)(a3 + 14) = v12;
          *(_WORD *)(a3 + 16) = v19;
          v26.uint64_t address = AppleBCMWLANBusInterface::getFaultReporter(v7);
          int v21 = AppleBCMWLANPCIeIO::prepare(v8, (IO80211Buffer *)v26.address, 16, v14);
          if (v21)
          {
            int v6 = v21;
            AppleBCMWLANPCIeIO::complete(v8, (IO80211Buffer **)&v26);
          }
          else
          {
            v26.uint64_t address = 0;
            v26.__int16 length = 0;
            int BusAddr64 = AppleBCMWLANPCIeIO::getBusAddr64((AppleBCMWLANDMASlab ***)v8, &v26);
            if (!BusAddr64)
            {
              *(void *)(a3 + 24) = v26.address;
              int BusAddr64 = AppleBCMWLANHashtable::add(*(AppleBCMWLANHashtable **)(*((void *)a1 + 9) + 3552), (OSObject *)v8, (unsigned __int16 *)&v27);
              if (!BusAddr64)
              {
                AppleBCMWLANPCIeIO::setCompanionKey((uint64_t)v8, v7);
                mach_continuous_time();
                absolutetime_to_nanoseconds();
                *(_DWORD *)(*((void *)a1 + 9) + 2952) = *(_DWORD *)(a3 + 8);
                *(_WORD *)(a3 + 4) = v27;
                *(_WORD *)(a3 + 6) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 296))(a2);
                ++*(_DWORD *)(*((void *)a1 + 9) + 1148);
                AppleBCMWLANBusInterface::getTxCommittedCommandDescriptor(a1);
                AppleBCMWLANCommandQueue::enqueue(v23, v7);
                return 1;
              }
            }
            int v6 = BusAddr64;
          }
        }
      }
    }
  }
  else
  {
    int v8 = 0;
    int v6 = -536870176;
  }
  if (AppleBCMWLANBusInterface::getLogger(a1))
  {
    AppleBCMWLANBusInterface::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
      CCLogStream::logCrit(Logger, "[dk] %s@%d: Failed to submit IOCTL, status %#x\n", "submitIOCtlRequestMsg", 11890, v6);
      if (!v7) {
        goto LABEL_32;
      }
      goto LABEL_31;
    }
  }
  if (v7)
  {
LABEL_31:
    AppleBCMWLANTxBuffer::setStatus((uint64_t)v7, v6);
    AppleBCMWLANBusInterface::getTxCompletionDescriptor(a1, (__n128 *)&v26);
    AppleBCMWLANCommandQueue::enqueue((AppleBCMWLANCommandQueue *)v26.length, v7);
    AppleBCMWLANCallbackEventSource::signalCallbackNeeded(*(AppleBCMWLANCallbackEventSource **)(*((void *)a1 + 9)
                                                                                              + 3240));
  }
LABEL_32:
  if (v8) {
    (*(void (**)(void, AppleBCMWLANPCIeIO *))(**(void **)(*((void *)a1 + 9) + 3512) + 72))(*(void *)(*((void *)a1 + 9) + 3512), v8);
  }
  return 0;
}

uint64_t ___ZN28AppleBCMWLANBusInterfacePCIe26submitCreateFlowRequestMsgEP22AppleBCMWLANTxItemRingP35BCOMIPCCreateFlowRingRequestMessage_block_invoke(uint64_t a1, OSMetaClassBase *anObject)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = OSMetaClassBase::safeMetaCast(anObject, (const OSMetaClass *)gAppleBCMWLANPCIeTransmitFlowRingMetaClass);
  return 0;
}

AppleBCMWLANPCIeSkywalk *AppleBCMWLANBusInterfacePCIe::cancelRingMgmtTimers(AppleBCMWLANBusInterfacePCIe *this)
{
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:cancel ring mgmt timers\n", "cancelRingMgmtTimers", 12150);
    }
  }
  uint64_t v2 = (void *)*((void *)this + 9);
  uint64_t v3 = v2[449];
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 72))(v3);
    uint64_t v2 = (void *)*((void *)this + 9);
  }
  uint64_t v4 = v2[451];
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 72))(v4);
    uint64_t v2 = (void *)*((void *)this + 9);
  }
  uint64_t v5 = v2[452];
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 72))(v5);
    uint64_t v2 = (void *)*((void *)this + 9);
  }
  uint64_t v6 = v2[138];
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 72))(v6);
    uint64_t v2 = (void *)*((void *)this + 9);
  }
  uint64_t v7 = v2[479];
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 72))(v7);
    uint64_t v2 = (void *)*((void *)this + 9);
  }
  uint64_t result = (AppleBCMWLANPCIeSkywalk *)v2[559];
  if (result)
  {
    return (AppleBCMWLANPCIeSkywalk *)AppleBCMWLANPCIeSkywalk::cancelRingMgmtTimers(result);
  }
  return result;
}

AppleBCMWLANPCIeSkywalk *non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::cancelRingMgmtTimers(AppleBCMWLANBusInterfacePCIe *this)
{
  return AppleBCMWLANBusInterfacePCIe::cancelRingMgmtTimers((AppleBCMWLANBusInterfacePCIe *)((char *)this - 48));
}

uint64_t ___ZN28AppleBCMWLANBusInterfacePCIe26submitDeleteFlowRequestMsgEP22AppleBCMWLANTxItemRingP35BCOMIPCDeleteFlowRingRequestMessage_block_invoke(uint64_t a1, OSMetaClassBase *anObject)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = OSMetaClassBase::safeMetaCast(anObject, (const OSMetaClass *)gAppleBCMWLANPCIeTransmitFlowRingMetaClass);
  return 0;
}

AppleBCMWLANPCIeTransmitFlowRing *AppleBCMWLANBusInterfacePCIe::workPendingForFlow(AppleBCMWLANBusInterfacePCIe *this, unsigned int a2)
{
  uint64_t v3 = *((void *)this + 9);
  uint64_t result = *(AppleBCMWLANPCIeTransmitFlowRing **)(v3 + 8 * a2 + 4808);
  if (result)
  {
    LODWORD(result) = AppleBCMWLANPCIeTransmitFlowRing::packetsWaitingForRingCount(result, (*(unsigned char *)(v3 + 1244) == 0) | 2u);
    uint64_t v3 = *((void *)this + 9);
  }
  unsigned int v5 = *(_DWORD *)(v3 + 2840);
  if (result >= v5) {
    return (AppleBCMWLANPCIeTransmitFlowRing *)v5;
  }
  else {
    return (AppleBCMWLANPCIeTransmitFlowRing *)result;
  }
}

uint64_t AppleBCMWLANBusInterfacePCIe::pollRxIOs(AppleBCMWLANBusInterfacePCIe *this)
{
  return 3758097095;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::pollRxIOs(AppleBCMWLANBusInterfacePCIe *this)
{
  return 3758097095;
}

uint64_t AppleBCMWLANBusInterfacePCIe::completeDebugBufferCompletetMsg(AppleBCMWLANBusInterface *a1, uint64_t a2, uint64_t a3)
{
  int v36 = 0;
  unsigned int v35 = 0;
  --*(_DWORD *)(*((void *)a1 + 9) + 1184);
  unsigned int v5 = (AppleBCMWLANPCIeIO *)AppleBCMWLANHashtable::remove(*(AppleBCMWLANHashtable **)(*((void *)a1 + 9) + 3584), *(__int16 *)(a3 + 4));
  uint64_t v6 = (uint64_t)v5;
  if (!v5)
  {
    uint64_t v16 = 3758097094;
    goto LABEL_23;
  }
  uint64_t v7 = AppleBCMWLANPCIeIO::complete(v5, (IO80211Buffer **)&v35);
  if (v7)
  {
    uint64_t v16 = v7;
LABEL_43:
    AppleBCMWLANPCIeIO::setCompanionIO(v6, 0);
    (*(void (**)(void, uint64_t))(**(void **)(*((void *)a1 + 9) + 3544) + 72))(*(void *)(*((void *)a1 + 9) + 3544), v6);
    return v16;
  }
  if (!v35)
  {
    uint64_t v16 = 3758097136;
    goto LABEL_43;
  }
  if (AppleBCMWLANBusInterface::getLogger(a1))
  {
    AppleBCMWLANBusInterface::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
      CCLogStream::logNoticeIf(Logger, 0x1000000uLL, "[dk] %s@%d:Received debug message Seq Num:%d, Len: %d\n", "completeDebugBufferCompletetMsg", 12433, *(unsigned __int16 *)(a3 + 14), *(unsigned __int16 *)(a3 + 12));
    }
  }
  uint64_t BytesNoCopy = IO80211Buffer::getBytesNoCopy((IO80211Buffer *)v35);
  uint64_t v9 = (unsigned __int8 *)(BytesNoCopy + 68);
  if (*(_DWORD *)(BytesNoCopy + 68) != 1)
  {
    if (AppleBCMWLANBusInterface::getLogger(a1))
    {
      AppleBCMWLANBusInterface::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        int v15 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
        CCLogStream::logCrit(v15, "[dk] %s@%d:Unsupported PCI Info Buffer Version (%d)\n");
      }
    }
    goto LABEL_22;
  }
  uint64_t v10 = BytesNoCopy;
  if (*(_WORD *)(BytesNoCopy + 72) != 2)
  {
    if (AppleBCMWLANBusInterface::getLogger(a1))
    {
      AppleBCMWLANBusInterface::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        unsigned int v33 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
        CCLogStream::logCrit(v33, "[dk] %s@%d:Unsupported PCI Info Message Type (%d)\n");
      }
    }
LABEL_22:
    uint64_t v16 = 3758097095;
    goto LABEL_23;
  }
  uint64_t v11 = *(unsigned __int16 *)(a3 + 12);
  if (*(unsigned __int16 *)(BytesNoCopy + 74) + 8 != v11)
  {
    uint64_t v16 = 3758097121;
    if (AppleBCMWLANBusInterface::getLogger(a1))
    {
      AppleBCMWLANBusInterface::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        IOAddressSegment v26 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
        CCLogStream::logCrit(v26, "[dk] %s@%d:Unexpected message(%d) length vs debug buffer length (%d)\n", "completeDebugBufferCompletetMsg", 12449, *(unsigned __int16 *)(v10 + 74), *(unsigned __int16 *)(a3 + 12));
        uint64_t v16 = 3758097121;
      }
    }
    goto LABEL_23;
  }
  if (v11 + 68 > (unint64_t)IO80211Buffer::getLength((IO80211Buffer *)v35))
  {
    uint64_t v16 = 3758097128;
    goto LABEL_23;
  }
  uint64_t v12 = *((void *)a1 + 9);
  if (*(unsigned char *)(v12 + 4096) && *(unsigned char *)(a3 + 16) == 1)
  {
    unsigned __int16 v13 = *(CCLogStream **)(v12 + 3816);
    if (!v13 || !CCLogStream::shouldLog(v13, 0x80000000000uLL)) {
      goto LABEL_38;
    }
    int v14 = *(CCLogStream **)(*((void *)a1 + 9) + 3816);
  }
  else
  {
    __int16 v27 = *(CCLogStream **)(v12 + 3784);
    if (!v27 || !CCLogStream::shouldLog(v27, 0x80000000000uLL)) {
      goto LABEL_38;
    }
    int v14 = *(CCLogStream **)(*((void *)a1 + 9) + 3784);
  }
  CCLogStream::logHeaderAndBuf(v14, v9, 0, *(unsigned __int16 *)(a3 + 12), *(unsigned __int16 *)(a3 + 12), &v36, 4uLL);
LABEL_38:
  unsigned int v28 = *(unsigned __int16 *)(a3 + 12) - 8;
  uint64_t v29 = IO80211Buffer::getBytesNoCopy((IO80211Buffer *)v35);
  *(_OWORD *)(v29 + 20) = 0u;
  *(_OWORD *)(v29 + 36) = 0u;
  *(_OWORD *)(v29 + 52) = 0u;
  *(_OWORD *)(v29 + 4) = 0u;
  *(void *)(v29 + 68) = 0;
  *(unsigned char *)(v29 + 25) = 24;
  *(_WORD *)(v29 + 23) = 4096;
  *(_DWORD *)(v29 + 26) = 33554688;
  *(_DWORD *)(v29 + 48) = bswap32(v28);
  *(_DWORD *)(v29 + 32) = 872415232;
  strcpy((char *)(v29 + 58), "wl0.0");
  uint64_t RxDescriptor = (AppleBCMWLANObjectQueue *)AppleBCMWLANBusInterface::getRxDescriptor(a1);
  if (!AppleBCMWLANObjectQueue::enqueue(RxDescriptor, v35))
  {
    unsigned int v35 = 0;
    AppleBCMWLANCallbackEventSource::signalCallbackNeeded(*(AppleBCMWLANCallbackEventSource **)(*((void *)a1 + 9)
                                                                                              + 3240));
    uint64_t v16 = 0;
    goto LABEL_40;
  }
  uint64_t v16 = 3758097115;
LABEL_23:
  if (*(_DWORD *)(*((void *)a1 + 9) + 2896) <= 4u)
  {
    IO80211Buffer::getLength((IO80211Buffer *)v35);
    uint64_t v17 = IOMallocZeroData();
    if (v17)
    {
      unsigned __int16 v18 = (void *)v17;
      unsigned __int16 v19 = (IO80211Buffer *)v35;
      IO80211Buffer::getLength((IO80211Buffer *)v35);
      IO80211Buffer::readBytes(v19, 0, v18);
      keys = OSString::withCString("BadDebugBuffer.bin");
      unsigned int Length = IO80211Buffer::getLength((IO80211Buffer *)v35);
      values = OSData::withBytes(v18, Length);
      uint64_t FaultReporter = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(a1);
      int v22 = OSDictionary::withObjects((const OSObject **)&values, (const OSObject **)&keys, 1u, 0);
      int v23 = (const char *)(*(uint64_t (**)(AppleBCMWLANBusInterface *, uint64_t))(*(void *)a1 + 104))(a1, v16);
      CCFaultReporter::reportFault(FaultReporter, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANBusInterfacePCIe.cpp", 0x30DAu, "completeDebugBufferCompletetMsg", v22, -469794037, "status=%s", v23);
      AppleBCMWLANUtil::releaseOSObjectArray(&keys, (const OSString **)&values, (const OSObject **)1);
      ++*(_DWORD *)(*((void *)a1 + 9) + 2896);
      IO80211Buffer::getLength((IO80211Buffer *)v35);
      IOFreeData();
    }
    else
    {
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v34 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v34, "[dk] %s@%d:Failed to alloc buffer of bad data\n", "completeDebugBufferCompletetMsg", 12514);
        }
      }
      unsigned __int8 v24 = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(a1);
      IOAddressSegment v25 = (const char *)(*(uint64_t (**)(AppleBCMWLANBusInterface *, uint64_t))(*(void *)a1 + 104))(a1, v16);
      CCFaultReporter::reportFault(v24, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANBusInterfacePCIe.cpp", 0x30E3u, "completeDebugBufferCompletetMsg", 0, -469794037, "status=%s", v25);
    }
    ++*(_DWORD *)(*((void *)a1 + 9) + 2896);
  }
LABEL_40:
  if (v35)
  {
    IO80211Buffer::returnBuffer((IO80211Buffer *)v35);
    unsigned int v35 = 0;
  }
  if (v6) {
    goto LABEL_43;
  }
  return v16;
}

uint64_t AppleBCMWLANBusInterfacePCIe::completeIOCtlRequestMsg(AppleBCMWLANBusInterface *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int16 v4 = *(_WORD *)(a3 + 4);
  unsigned int v5 = (AppleBCMWLANPCIeIO *)AppleBCMWLANHashtable::remove(*(AppleBCMWLANHashtable **)(*((void *)a1 + 9) + 3552), (__int16)v4);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v17 = (IO80211Buffer *)0xAAAAAAAAAAAAAAAALL;
    AppleBCMWLANPCIeIO::complete(v5, &v17);
    uint64_t IO80211FaultReporter = (IOCommand *)AppleBCMWLANBusInterface::getIO80211FaultReporter(v6);
    AppleBCMWLANTxBuffer::setStatus((uint64_t)IO80211FaultReporter, 0);
    mach_continuous_time();
    absolutetime_to_nanoseconds();
    AppleBCMWLANBusInterface::getTxCommittedCommandDescriptor(a1);
    AppleBCMWLANCommandQueue::remove(v8, IO80211FaultReporter);
    AppleBCMWLANBusInterface::getTxCompletionDescriptor(a1, &v16);
    AppleBCMWLANCommandQueue::enqueue((AppleBCMWLANCommandQueue *)v16.n128_u64[1], IO80211FaultReporter);
    *(void *)(*((void *)a1 + 9) + 4784) = *(void *)(*((void *)a1 + 9) + 4776);
    AppleBCMWLANCallbackEventSource::signalCallbackNeeded(*(AppleBCMWLANCallbackEventSource **)(*((void *)a1 + 9)
                                                                                              + 3240));
    AppleBCMWLANPCIeIO::setCompanionIO((uint64_t)v6, 0);
    (*(void (**)(void, AppleBCMWLANBusInterface *))(**(void **)(*((void *)a1 + 9) + 3512) + 72))(*(void *)(*((void *)a1 + 9) + 3512), v6);
    return 0;
  }
  else
  {
    uint64_t v9 = 3758097094;
    if (AppleBCMWLANBusInterface::getLogger(a1))
    {
      AppleBCMWLANBusInterface::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        int v13 = v4;
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
        int v15 = (const char *)(*(uint64_t (**)(AppleBCMWLANBusInterface *, uint64_t))(*(void *)a1 + 104))(a1, 3758097094);
        CCLogStream::logCrit(Logger, "[dk] %s@%d:Tx IO not found for resourceID %x, %s\n", "completeIOCtlRequestMsg", 12723, v13, v15);
      }
    }
    if (AppleBCMWLANBusInterface::getLogger(a1))
    {
      AppleBCMWLANBusInterface::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v11 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
        uint64_t v12 = (const char *)(*(uint64_t (**)(AppleBCMWLANBusInterface *, uint64_t))(*(void *)a1 + 104))(a1, 3758097094);
        CCLogStream::logCrit(v11, "[dk] %s@%d:Error during drain: %s\n", "completeIOCtlRequestMsg", 12727, v12);
      }
    }
  }
  return v9;
}

uint64_t AppleBCMWLANBusInterfacePCIe::completeIOCtlResponseMsg(AppleBCMWLANBusInterface *this, uint64_t a2, uint64_t a3)
{
  int v21 = 0;
  --*(_DWORD *)(*((void *)this + 9) + 1148);
  --*(_DWORD *)(*((void *)this + 9) + 1152);
  uint64_t v5 = *((void *)this + 9);
  if ((*(_DWORD *)(v5 + 1148) & 0x80000000) != 0)
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:Command IPC out of bounds, %d\n", "completeIOCtlResponseMsg", 12754, *(_DWORD *)(*((void *)this + 9) + 1148));
      }
    }
    *(_DWORD *)(*((void *)this + 9) + 1148) = 0;
    uint64_t v5 = *((void *)this + 9);
  }
  int v6 = -536870212;
  unsigned __int16 v7 = *(_WORD *)(a3 + 4);
  int v8 = (AppleBCMWLANPCIeIO *)AppleBCMWLANHashtable::remove(*(AppleBCMWLANHashtable **)(v5 + 3560), (__int16)v7);
  if (!v8)
  {
    uint64_t v11 = 3758097094;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        __n128 v16 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        uint64_t v11 = 3758097094;
        uint64_t v17 = (const char *)(*(uint64_t (**)(AppleBCMWLANBusInterface *, uint64_t))(*(void *)this + 104))(this, 3758097094);
        CCLogStream::logCrit(v16, "[dk] %s@%d:Rx IO not found for resourceID %x, %s\n", "completeIOCtlResponseMsg", 12826, v7, v17);
      }
    }
    goto LABEL_16;
  }
  uint64_t v9 = v8;
  uint64_t v10 = AppleBCMWLANPCIeIO::complete(v8, (IO80211Buffer **)&v21);
  if (v10)
  {
    uint64_t v11 = v10;
    goto LABEL_13;
  }
  if (v21)
  {
    uint64_t v11 = 3758097128;
    if ((unint64_t)IO80211Buffer::getLength((IO80211Buffer *)v21) <= 0x800)
    {
      uint64_t BytesNoCopy = (_DWORD *)IO80211Buffer::getBytesNoCopy((IO80211Buffer *)v21);
      _DWORD *BytesNoCopy = *(_DWORD *)(a3 + 16);
      BytesNoCopy[2] = (*(unsigned __int8 *)(a3 + 1) << 12) | (*(unsigned __int16 *)(a3 + 14) << 16);
      uint64_t v13 = *(unsigned __int16 *)(a3 + 12);
      if (IO80211Buffer::getLength((IO80211Buffer *)v21) >= (unint64_t)(v13 + 16))
      {
        IO80211Buffer::setLength((IO80211Buffer *)v21, v13 + 16);
        BytesNoCopy[1] = v13;
        BytesNoCopy[3] = *(__int16 *)(a3 + 8);
        mach_continuous_time();
        absolutetime_to_nanoseconds();
        *(_DWORD *)(*((void *)this + 9) + 3000) = *(_DWORD *)(a3 + 16);
        *(_DWORD *)(*((void *)this + 9) + 3004) = *(unsigned __int16 *)(a3 + 14);
        AppleBCMWLANBusInterface::getRxDescriptor(this);
        if (AppleBCMWLANObjectQueue::enqueue(v14, v21))
        {
          uint64_t v11 = 3758097115;
        }
        else
        {
          *(void *)(*((void *)this + 9) + 4784) = *(void *)(*((void *)this + 9) + 4776);
          AppleBCMWLANCallbackEventSource::signalCallbackNeeded(*(AppleBCMWLANCallbackEventSource **)(*((void *)this + 9) + 3240));
          int v6 = 0;
          uint64_t v11 = 0;
        }
      }
    }
LABEL_13:
    if (v21) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  uint64_t v11 = 3758097136;
LABEL_14:
  AppleBCMWLANPCIeIO::complete(v9, (IO80211Buffer **)&v21);
LABEL_15:
  AppleBCMWLANPCIeIO::setCompanionIO((uint64_t)v9, 0);
  (*(void (**)(void, AppleBCMWLANPCIeIO *))(**(void **)(*((void *)this + 9) + 3520) + 72))(*(void *)(*((void *)this + 9) + 3520), v9);
  if (!v11) {
    goto LABEL_18;
  }
LABEL_16:
  if (!AppleBCMWLANBusInterface::getLogger(this)
    || (AppleBCMWLANBusInterface::getLogger(this), !CCLogStream::shouldLog()))
  {
LABEL_18:
    if (!v6) {
      return v11;
    }
    goto LABEL_19;
  }
  unsigned __int16 v18 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
  unsigned __int16 v19 = (const char *)(*(uint64_t (**)(AppleBCMWLANBusInterface *, uint64_t))(*(void *)this + 104))(this, v11);
  CCLogStream::logCrit(v18, "[dk] %s@%d:Error during drain: %s\n", "completeIOCtlResponseMsg", 12829, v19);
  if (!v6) {
    return v11;
  }
LABEL_19:
  if (v21) {
    IO80211Buffer::returnBuffer((IO80211Buffer *)v21);
  }
  return v11;
}

uint64_t AppleBCMWLANBusInterfacePCIe::completeRxEventMsg(AppleBCMWLANBusInterface *this, uint64_t a2, uint64_t a3)
{
  __int16 v27 = 0;
  if ((*(unsigned char *)(a3 + 2) & 8) != 0)
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        int v19 = *(unsigned __int8 *)(a3 + 2);
        int v20 = *(unsigned __int8 *)(a3 + 1);
        int v21 = *(unsigned __int16 *)(a3 + 10);
        int v22 = *(unsigned __int16 *)(a3 + 12);
        int v23 = *(unsigned __int16 *)(a3 + 14);
        int v24 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 224))(a2);
        int v25 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 232))(a2);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:Rx event, wake packet bit, header flags %d ifId %d flowid %d, length %d, SN %d @ {%d %d}, type:0x%08x\n", "completeRxEventMsg", 13046, v19, v20, v21, v22, v23, v24, v25, 16);
      }
    }
  }
  if ((*(unsigned char *)(a3 + 2) & 8) != 0
    && (*(uint64_t (**)(AppleBCMWLANBusInterface *))(*(void *)this + 1104))(this))
  {
    int v15 = (AppleBCMWLANCore *)(*(uint64_t (**)(AppleBCMWLANBusInterface *))(*(void *)this + 1104))(this);
    AppleBCMWLANCore::setWiFiWakeType(v15, 16);
  }
  uint64_t v6 = 3758097128;
  int v7 = *(unsigned __int16 *)(a3 + 4);
  int v8 = (AppleBCMWLANPCIeIO *)AppleBCMWLANHashtable::remove(*(AppleBCMWLANHashtable **)(*((void *)this + 9) + 3560), (__int16)v7);
  kdebug_trace();
  if (v8)
  {
    uint64_t v9 = AppleBCMWLANPCIeIO::complete(v8, (IO80211Buffer **)&v27);
    if (v9)
    {
      uint64_t v6 = v9;
    }
    else if (v27)
    {
      if ((unint64_t)IO80211Buffer::getLength((IO80211Buffer *)v27) <= 0x800)
      {
        uint64_t v10 = *(unsigned __int16 *)(a3 + 12);
        IO80211Buffer::getLength((IO80211Buffer *)v27);
        kdebug_trace();
        if ((--*(_DWORD *)(*((void *)this + 9) + 1156) & 0x80000000) != 0)
        {
          if (AppleBCMWLANBusInterface::getLogger(this))
          {
            AppleBCMWLANBusInterface::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              IOAddressSegment v26 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
              CCLogStream::logAlert(v26, "[dk] %s@%d:Rx Buffer IPC out of bounds, %d\n", "completeRxEventMsg", 13078, *(_DWORD *)(*((void *)this + 9) + 1156));
            }
          }
          *(_DWORD *)(*((void *)this + 9) + 1156) = 0;
        }
        unint64_t v11 = v10 + 12;
        if (v11 <= IO80211Buffer::getLength((IO80211Buffer *)v27))
        {
          IO80211Buffer::setLength((IO80211Buffer *)v27, v11);
          uint64_t BytesNoCopy = IO80211Buffer::getBytesNoCopy((IO80211Buffer *)v27);
          if (BytesNoCopy)
          {
            *(_DWORD *)uint64_t BytesNoCopy = 32;
            *(unsigned char *)(BytesNoCopy + 2) = *(unsigned char *)(a3 + 1);
            uint64_t RxDescriptor = (AppleBCMWLANObjectQueue *)AppleBCMWLANBusInterface::getRxDescriptor(this);
            if (!AppleBCMWLANObjectQueue::enqueue(RxDescriptor, v27))
            {
              __int16 v27 = 0;
              AppleBCMWLANCallbackEventSource::signalCallbackNeeded(*(AppleBCMWLANCallbackEventSource **)(*((void *)this + 9) + 3240));
              uint64_t v6 = 0;
              goto LABEL_19;
            }
            uint64_t v6 = 3758097115;
          }
          else
          {
            uint64_t v6 = 3758097124;
          }
        }
      }
    }
    else
    {
      uint64_t v6 = 3758097136;
    }
  }
  else
  {
    uint64_t v6 = 3758097094;
  }
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      __n128 v16 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      uint64_t v17 = (const char *)(*(uint64_t (**)(AppleBCMWLANBusInterface *, uint64_t))(*(void *)this + 104))(this, v6);
      CCLogStream::logAlert(v16, "[dk] %s@%d:Event (resourceID %#X) failed, %s\n", "completeRxEventMsg", 13114, v7, v17);
    }
  }
LABEL_19:
  if (v27)
  {
    IO80211Buffer::returnBuffer((IO80211Buffer *)v27);
    __int16 v27 = 0;
  }
  if (v8)
  {
    AppleBCMWLANPCIeIO::setCompanionIO((uint64_t)v8, 0);
    (*(void (**)(void, AppleBCMWLANPCIeIO *))(**(void **)(*((void *)this + 9) + 3520) + 72))(*(void *)(*((void *)this + 9) + 3520), v8);
  }
  kdebug_trace();
  return v6;
}

uint64_t AppleBCMWLANBusInterfacePCIe::completeIOCtlGeneralResponseMsg(AppleBCMWLANBusInterface *a1, uint64_t a2, unsigned __int16 *a3)
{
  if (AppleBCMWLANBusInterface::getLogger(a1))
  {
    AppleBCMWLANBusInterface::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
      CCLogStream::logCrit(Logger, "[dk] %s@%d:status=%x ring=%d resourceID=%d sequenceNumber=%d\n", "completeIOCtlGeneralResponseMsg", 12929, a3[4], a3[5], a3[2], a3[3]);
    }
  }
  switch(a3[4])
  {
    case 1u:
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v5 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v5, "[dk] %s@%d:No proper resource found\n");
        }
      }
      break;
    case 2u:
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v6 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v6, "[dk] %s@%d:Memory failure\n");
        }
      }
      break;
    case 3u:
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          int v7 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v7, "[dk] %s@%d: Request at bad state\n");
        }
      }
      break;
    case 4u:
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          int v8 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v8, "[dk] %s@%d:Ring Index is in use\n");
        }
      }
      break;
    case 5u:
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v9 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v9, "[dk] %s@%d:Invalid ring ID\n");
        }
      }
      break;
    case 6u:
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v10 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v10, "[dk] %s@%d:Packet is returned because of flow ring flush or delete\n");
        }
      }
      break;
    case 7u:
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          unint64_t v11 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v11, "[dk] %s@%d:Out of event buffers\n");
        }
      }
      break;
    case 8u:
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v12 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v12, "[dk] %s@%d:Out of receive buffers\n");
        }
      }
      break;
    case 9u:
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v13 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v13, "[dk] %s@%d:Out of IOCTL response buffers\n");
        }
      }
      break;
    case 0xAu:
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          int v14 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v14, "[dk] %s@%d:Exceeding Max IOCTL response buffers\n");
        }
      }
      break;
    case 0xBu:
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          int v15 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v15, "[dk] %s@%d:Exceeding Max Event buffers\n");
        }
      }
      break;
    case 0xCu:
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          int v20 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v20, "[dk] %s@%d:Phase bit out of sync. Ring=%d\n", "completeIOCtlGeneralResponseMsg", 12983, a3[5]);
        }
      }
      uint64_t FaultReporter = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(a1);
      CCFaultReporter::reportFault(FaultReporter, 5u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANBusInterfacePCIe.cpp", 0x32B9u, "completeIOCtlGeneralResponseMsg", 0, -469794021, 0);
      break;
    case 0x11u:
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          int v21 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v21, "[dk] %s@%d:Out of BT debug log buffers\n");
        }
      }
      break;
    default:
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v17 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v17, "[dk] %s@%d:Unexpected status code is received, status: %d\n");
        }
      }
      break;
  }
  return 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::completeIOCtlRingStatusMsg(AppleBCMWLANBusInterface *a1, uint64_t a2, unsigned __int16 *a3)
{
  if (AppleBCMWLANBusInterface::getLogger(a1))
  {
    AppleBCMWLANBusInterface::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
      CCLogStream::logCrit(Logger, "[dk] %s@%d:status=%x ring=%d index=%d resourceID=%d sequenceNumber=%d\n", "completeIOCtlRingStatusMsg", 12849, a3[4], a3[5], a3[6], a3[2], a3[3]);
    }
  }
  switch(a3[4])
  {
    case 1u:
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v5 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v5, "[dk] %s@%d:No proper resource found\n");
        }
      }
      break;
    case 2u:
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          int v7 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v7, "[dk] %s@%d:Memory failure\n");
        }
      }
      break;
    case 3u:
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          int v8 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v8, "[dk] %s@%d: Request at bad state\n");
        }
      }
      break;
    case 4u:
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v9 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v9, "[dk] %s@%d:Ring Index is in use\n");
        }
      }
      break;
    case 5u:
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v10 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v10, "[dk] %s@%d:Invalid ring ID\n");
        }
      }
      break;
    case 6u:
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          unint64_t v11 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v11, "[dk] %s@%d:Packet is returned because of flow ring flush or delete\n");
        }
      }
      break;
    case 7u:
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v12 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v12, "[dk] %s@%d:Out of event buffers\n");
        }
      }
      break;
    case 8u:
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v13 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v13, "[dk] %s@%d:Out of receive buffers\n");
        }
      }
      break;
    case 9u:
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          int v14 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v14, "[dk] %s@%d:Out of IOCTL response buffers\n");
        }
      }
      break;
    case 0xAu:
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          int v15 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v15, "[dk] %s@%d:Exceeding Max IOCTL response buffers\n");
        }
      }
      break;
    case 0xBu:
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          __n128 v16 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v16, "[dk] %s@%d:Exceeding Max Event buffers\n");
        }
      }
      break;
    case 0xCu:
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          int v20 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v20, "[dk] %s@%d:Phase bit out of sync. Expected=0x%x\n", "completeIOCtlRingStatusMsg", 12903, a3[7]);
        }
      }
      uint64_t FaultReporter = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(a1);
      CCFaultReporter::reportFault(FaultReporter, 5u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANBusInterfacePCIe.cpp", 0x3269u, "completeIOCtlRingStatusMsg", 0, -469794021, 0);
      break;
    case 0xDu:
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          int v21 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v21, "[dk] %s@%d:Invalid Completion Ring ID\n");
        }
      }
      break;
    default:
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v6 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v6, "[dk] %s@%d:Unexpected status code is received, status: %d\n");
        }
      }
      break;
  }
  return 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::completeFlowRingCreateResponseMsg(AppleBCMWLANBusInterface *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(**(void **)(*((void *)a1 + 9) + 1104) + 72))(*(void *)(*((void *)a1 + 9)
                                                                                                  + 1104));
  unint64_t v5 = *(unsigned __int16 *)(a3 + 10);
  uint64_t v6 = *((void *)a1 + 9);
  if (*(_DWORD *)(v6 + 372) > v5 || *(_DWORD *)(v6 + 376) <= v5)
  {
    uint64_t v9 = 3758097084;
    if (AppleBCMWLANBusInterface::getLogger(a1))
    {
      AppleBCMWLANBusInterface::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
        CCLogStream::logEmergency(Logger, "[dk] %s@%d:Bad Flow ID: %d\n", "completeFlowRingCreateResponseMsg", 13155, v5);
      }
    }
  }
  else
  {
    int v7 = *(IO80211WorkSource **)(v6 + 8 * v5 + 4808);
    if (v7)
    {
      if (((*(unsigned __int8 *)(v6 + (v5 >> 3) + 5160) >> (v5 & 7)) & 1) == 0)
      {
        if (AppleBCMWLANBusInterface::getLogger(a1))
        {
          AppleBCMWLANBusInterface::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            int v14 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
            int isEnabled = IO80211WorkSource::isEnabled(v7);
            int v16 = (*(uint64_t (**)(IO80211WorkSource *))(*(void *)v7 + 312))(v7);
            int v17 = (*(uint64_t (**)(IO80211WorkSource *))(*(void *)v7 + 392))(v7);
            int v18 = (*(uint64_t (**)(IO80211WorkSource *))(*(void *)v7 + 344))(v7);
            CCLogStream::logAlert(v14, "[dk] %s@%d:Unexpected ring create response for ID: %d IsEnabled: %u State: %x IfIndex: %d Tid: %d\n", "completeFlowRingCreateResponseMsg", 13168, v5, isEnabled, v16, v17, v18);
          }
        }
        uint64_t FaultReporter = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(a1);
        CCFaultReporter::reportFault(FaultReporter, 5u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANBusInterfacePCIe.cpp", 0x3371u, "completeFlowRingCreateResponseMsg", 0, -469794037, "Unexpected Ring Creation confirmation received from FW");
      }
      AppleBCMWLANBusInterfacePCIe::createFlowCallback(a1, *(unsigned __int16 *)(a3 + 8), v5);
      uint64_t v9 = 0;
      --*(_DWORD *)(*((void *)a1 + 9) + 1176);
    }
    else
    {
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v13 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logAlert(v13, "[dk] %s@%d:Ring missing for ID: %d\n", "completeFlowRingCreateResponseMsg", 13162, v5);
        }
      }
      uint64_t v9 = 3825173281;
      unint64_t v11 = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(a1);
      CCFaultReporter::reportFault(v11, 5u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANBusInterfacePCIe.cpp", 0x336Bu, "completeFlowRingCreateResponseMsg", 0, -469794015, 0);
    }
  }
  return v9;
}

uint64_t AppleBCMWLANBusInterfacePCIe::completeFlowRingDeleteResponseMsg(AppleBCMWLANBusInterface *this, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *((void *)this + 9);
  unint64_t v6 = *(unsigned __int16 *)(a3 + 10);
  if (*(_DWORD *)(v5 + 372) > v6 || *(_DWORD *)(v5 + 376) <= v6)
  {
    uint64_t v9 = 3758097084;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logEmergency(Logger, "[dk] %s@%d:Bad Flow ID: %d\n", "completeFlowRingDeleteResponseMsg", 13189, *(unsigned __int16 *)(a3 + 10));
      }
    }
  }
  else
  {
    int v7 = *(IO80211WorkSource **)(v5 + 8 * *(unsigned __int16 *)(a3 + 10) + 4808);
    if (v7)
    {
      if (((*(unsigned __int8 *)(v5 + (v6 >> 3) + 5166) >> (v6 & 7)) & 1) == 0)
      {
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            int v17 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            int v18 = *(unsigned __int16 *)(a3 + 10);
            int isEnabled = IO80211WorkSource::isEnabled(v7);
            int v20 = (*(uint64_t (**)(IO80211WorkSource *))(*(void *)v7 + 312))(v7);
            int v21 = (*(uint64_t (**)(IO80211WorkSource *))(*(void *)v7 + 392))(v7);
            int v22 = (*(uint64_t (**)(IO80211WorkSource *))(*(void *)v7 + 344))(v7);
            CCLogStream::logAlert(v17, "[dk] %s@%d:Unexpected ring delete response for Ring ID: %d IsEnabled: %u State: %x IfIndex: %d Tid: %d \n", "completeFlowRingDeleteResponseMsg", 13199, v18, isEnabled, v20, v21, v22);
          }
        }
        uint64_t FaultReporter = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(this);
        CCFaultReporter::reportFault(FaultReporter, 5u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANBusInterfacePCIe.cpp", 0x3390u, "completeFlowRingDeleteResponseMsg", 0, -469794037, "Unexpected Ring Deletion confirmation received from FW");
      }
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v13 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          int v14 = *(unsigned __int16 *)(a3 + 10);
          int v15 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 1096) + 72))(*(void *)(*((void *)this + 9) + 1096));
          CCLogStream::logInfo(v13, "[dk] %s@%d:Trigger deleteFlowCallback for ring %u, tracker count %u\n", "completeFlowRingDeleteResponseMsg", 13204, v14, v15);
        }
      }
      AppleBCMWLANBusInterfacePCIe::deleteFlowCallback(this, *(unsigned __int16 *)(a3 + 8), *(unsigned __int16 *)(a3 + 10));
      --*(_DWORD *)(*((void *)this + 9) + 1180);
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          int v16 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logInfo(v16, "[dk] %s@%d:%s: activeFlowDestroy %d\n", "completeFlowRingDeleteResponseMsg", 13209, "completeFlowRingDeleteResponseMsg", *(_DWORD *)(*((void *)this + 9) + 1180));
        }
      }
      return 0;
    }
    else
    {
      uint64_t v9 = 3758097084;
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          unint64_t v11 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v11, "[dk] %s@%d:Ring %d already gone\n", "completeFlowRingDeleteResponseMsg", 13195, *(unsigned __int16 *)(a3 + 10));
        }
      }
    }
  }
  return v9;
}

uint64_t AppleBCMWLANBusInterfacePCIe::completeH2DRingCreate(AppleBCMWLANBusInterface *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (const OSMetaClassBase *)AppleBCMWLANHashtable::remove(*(AppleBCMWLANHashtable **)(*((void *)a1 + 9) + 1112), *(__int16 *)(a3 + 4));
  unint64_t v6 = OSMetaClassBase::safeMetaCast(v5, (const OSMetaClass *)gAppleBCMWLANDynamicRingOperationContextMetaClass);
  if (v6)
  {
    int v7 = (AppleBCMWLANDynamicRingOperationContext *)v6;
    uint64_t RingOperationCompletionPtr = AppleBCMWLANDynamicRingOperationContext::getRingOperationCompletionPtr((AppleBCMWLANDynamicRingOperationContext *)v6);
    uint64_t SubmissionRingPtr = AppleBCMWLANDynamicRingOperationContext::getSubmissionRingPtr(v7);
    if (AppleBCMWLANDynamicRingOperationContext::getRingOperationResourceID(v7) == *(_DWORD *)(a3 + 4))
    {
      if (*(_WORD *)(a3 + 8))
      {
        if (AppleBCMWLANBusInterface::getLogger(a1))
        {
          AppleBCMWLANBusInterface::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
            CCLogStream::logCrit(Logger, "[dk] %s@%d:error creating H2D ring: 0x%x\n", "completeH2DRingCreate", 20166, *(unsigned __int16 *)(a3 + 8));
          }
        }
        uint64_t v10 = 3758097084;
        if (SubmissionRingPtr)
        {
          (*(void (**)(uint64_t))(*(void *)SubmissionRingPtr + 16))(SubmissionRingPtr);
          uint64_t SubmissionRingPtr = 0;
        }
      }
      else
      {
        uint64_t v10 = 0;
      }
      (*(void (**)(void, uint64_t, uint64_t, void))(RingOperationCompletionPtr + 8))(*(void *)RingOperationCompletionPtr, SubmissionRingPtr, v10, *(void *)(RingOperationCompletionPtr + 16));
      (*(void (**)(AppleBCMWLANDynamicRingOperationContext *))(*(void *)v7 + 16))(v7);
    }
    else
    {
      uint64_t v10 = 3758097136;
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v12 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v12, "[dk] %s@%d:resource ID mismatch: %u, %u\n");
        }
      }
    }
  }
  else
  {
    uint64_t v10 = 3758097136;
    if (AppleBCMWLANBusInterface::getLogger(a1))
    {
      AppleBCMWLANBusInterface::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        unint64_t v11 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
        CCLogStream::logCrit(v11, "[dk] %s@%d:bad resource ID\n");
      }
    }
  }
  return v10;
}

uint64_t AppleBCMWLANBusInterfacePCIe::completeD2HRingCreate(AppleBCMWLANBusInterface *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (const OSMetaClassBase *)AppleBCMWLANHashtable::remove(*(AppleBCMWLANHashtable **)(*((void *)a1 + 9) + 1128), *(__int16 *)(a3 + 4));
  unint64_t v6 = OSMetaClassBase::safeMetaCast(v5, (const OSMetaClass *)gAppleBCMWLANDynamicRingOperationContextMetaClass);
  if (v6)
  {
    int v7 = (AppleBCMWLANDynamicRingOperationContext *)v6;
    uint64_t RingOperationCompletionPtr = AppleBCMWLANDynamicRingOperationContext::getRingOperationCompletionPtr((AppleBCMWLANDynamicRingOperationContext *)v6);
    uint64_t CompletionRingPtr = AppleBCMWLANDynamicRingOperationContext::getCompletionRingPtr(v7);
    if (AppleBCMWLANDynamicRingOperationContext::getRingOperationResourceID(v7) == *(_DWORD *)(a3 + 4))
    {
      if (*(_WORD *)(a3 + 8))
      {
        if (AppleBCMWLANBusInterface::getLogger(a1))
        {
          AppleBCMWLANBusInterface::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
            CCLogStream::logCrit(Logger, "[dk] %s@%d:error creating H2D ring: 0x%x\n", "completeD2HRingCreate", 20204, *(unsigned __int16 *)(a3 + 8));
          }
        }
        uint64_t v10 = 3758097084;
        if (CompletionRingPtr)
        {
          (*(void (**)(uint64_t))(*(void *)CompletionRingPtr + 16))(CompletionRingPtr);
          uint64_t CompletionRingPtr = 0;
        }
      }
      else
      {
        uint64_t v10 = 0;
      }
      (*(void (**)(void, uint64_t, uint64_t, void))(RingOperationCompletionPtr + 8))(*(void *)RingOperationCompletionPtr, CompletionRingPtr, v10, *(void *)(RingOperationCompletionPtr + 16));
      (*(void (**)(AppleBCMWLANDynamicRingOperationContext *))(*(void *)v7 + 16))(v7);
    }
    else
    {
      uint64_t v10 = 3758097136;
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v12 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v12, "[dk] %s@%d:resource ID mismatch: %u, %u\n");
        }
      }
    }
  }
  else
  {
    uint64_t v10 = 3758097136;
    if (AppleBCMWLANBusInterface::getLogger(a1))
    {
      AppleBCMWLANBusInterface::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        unint64_t v11 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
        CCLogStream::logCrit(v11, "[dk] %s@%d:bad resource ID\n");
      }
    }
  }
  return v10;
}

uint64_t AppleBCMWLANBusInterfacePCIe::completeH2DRingDelete(AppleBCMWLANBusInterface *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (const OSMetaClassBase *)AppleBCMWLANHashtable::remove(*(AppleBCMWLANHashtable **)(*((void *)a1 + 9) + 1120), *(__int16 *)(a3 + 4));
  unint64_t v6 = OSMetaClassBase::safeMetaCast(v5, (const OSMetaClass *)gAppleBCMWLANDynamicRingOperationContextMetaClass);
  if (v6)
  {
    int v7 = (AppleBCMWLANDynamicRingOperationContext *)v6;
    uint64_t SubmissionRingPtr = AppleBCMWLANDynamicRingOperationContext::getSubmissionRingPtr((AppleBCMWLANDynamicRingOperationContext *)v6);
    uint64_t RingOperationCompletionPtr = AppleBCMWLANDynamicRingOperationContext::getRingOperationCompletionPtr(v7);
    if (AppleBCMWLANDynamicRingOperationContext::getRingOperationResourceID(v7) == *(_DWORD *)(a3 + 4))
    {
      if (*(_WORD *)(a3 + 8))
      {
        uint64_t v10 = 3758097084;
        if (AppleBCMWLANBusInterface::getLogger(a1))
        {
          AppleBCMWLANBusInterface::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
            CCLogStream::logCrit(Logger, "[dk] %s@%d:error deleting H2D ring: 0x%x\n", "completeH2DRingDelete", 20242, *(unsigned __int16 *)(a3 + 8));
          }
        }
      }
      else
      {
        uint64_t v10 = 0;
      }
      (*(void (**)(void, uint64_t, uint64_t, void))(RingOperationCompletionPtr + 8))(*(void *)RingOperationCompletionPtr, SubmissionRingPtr, v10, *(void *)(RingOperationCompletionPtr + 16));
      (*(void (**)(AppleBCMWLANDynamicRingOperationContext *))(*(void *)v7 + 16))(v7);
    }
    else
    {
      uint64_t v10 = 3758097136;
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v13 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v13, "[dk] %s@%d:resource ID mismatch: %u, %u\n");
        }
      }
    }
  }
  else
  {
    uint64_t v10 = 3758097136;
    if (AppleBCMWLANBusInterface::getLogger(a1))
    {
      AppleBCMWLANBusInterface::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v12 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
        CCLogStream::logCrit(v12, "[dk] %s@%d:bad resource ID\n");
      }
    }
  }
  return v10;
}

uint64_t AppleBCMWLANBusInterfacePCIe::completeD2HRingDelete(AppleBCMWLANBusInterface *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (const OSMetaClassBase *)AppleBCMWLANHashtable::remove(*(AppleBCMWLANHashtable **)(*((void *)a1 + 9) + 1136), *(__int16 *)(a3 + 4));
  unint64_t v6 = OSMetaClassBase::safeMetaCast(v5, (const OSMetaClass *)gAppleBCMWLANDynamicRingOperationContextMetaClass);
  if (v6)
  {
    int v7 = (AppleBCMWLANDynamicRingOperationContext *)v6;
    uint64_t CompletionRingPtr = AppleBCMWLANDynamicRingOperationContext::getCompletionRingPtr((AppleBCMWLANDynamicRingOperationContext *)v6);
    uint64_t RingOperationCompletionPtr = AppleBCMWLANDynamicRingOperationContext::getRingOperationCompletionPtr(v7);
    if (AppleBCMWLANDynamicRingOperationContext::getRingOperationResourceID(v7) == *(_DWORD *)(a3 + 4))
    {
      if (*(_WORD *)(a3 + 8))
      {
        uint64_t v10 = 3758097084;
        if (AppleBCMWLANBusInterface::getLogger(a1))
        {
          AppleBCMWLANBusInterface::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
            CCLogStream::logCrit(Logger, "[dk] %s@%d:error deleting H2D ring: 0x%x\n", "completeD2HRingDelete", 20280, *(unsigned __int16 *)(a3 + 8));
          }
        }
      }
      else
      {
        uint64_t v10 = 0;
      }
      (*(void (**)(void, uint64_t, uint64_t, void))(RingOperationCompletionPtr + 8))(*(void *)RingOperationCompletionPtr, CompletionRingPtr, v10, *(void *)(RingOperationCompletionPtr + 16));
      (*(void (**)(AppleBCMWLANDynamicRingOperationContext *))(*(void *)v7 + 16))(v7);
    }
    else
    {
      uint64_t v10 = 3758097136;
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t v13 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logCrit(v13, "[dk] %s@%d:resource ID mismatch: %u, %u\n");
        }
      }
    }
  }
  else
  {
    uint64_t v10 = 3758097136;
    if (AppleBCMWLANBusInterface::getLogger(a1))
    {
      AppleBCMWLANBusInterface::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v12 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
        CCLogStream::logCrit(v12, "[dk] %s@%d:bad resource ID\n");
      }
    }
  }
  return v10;
}

uint64_t AppleBCMWLANBusInterfacePCIe::handleMBData(AppleBCMWLANBusInterfacePCIe *this, unsigned int a2)
{
  if (*(_DWORD *)(*((void *)this + 9) + 2844) == 2)
  {
    return AppleBCMWLANBusInterfacePCIe::handleMBDataInbandDS(this, a2);
  }
  else
  {
    AppleBCMWLANBusInterfacePCIe::handleMBDataOOBDW(this, a2);
    return 0;
  }
}

uint64_t AppleBCMWLANBusInterfacePCIe::handleMBDataInbandDS(AppleBCMWLANBusInterfacePCIe *this, unsigned int a2)
{
  *(_DWORD *)(*((void *)this + 9) + 1268) += a2 & 1;
  unsigned int v3 = a2 & 2;
  *(_DWORD *)(*((void *)this + 9) + 1272) += v3 >> 1;
  unsigned int v4 = a2 & 4;
  *(_DWORD *)(*((void *)this + 9) + 1276) += v4 >> 2;
  *(_DWORD *)(*((void *)this + 9) + 1280) += (a2 & 8) >> 3;
  if ((a2 & 0x10000000) != 0)
  {
    AppleBCMWLANBusInterfacePCIe::handleFWTrap(this);
    return 0;
  }
  if (a2)
  {
    if (AppleBCMWLANBusInterfacePCIe::changeSleepState(this, 12, 13338))
    {
      int v16 = 0;
      (*(void (**)(void, uint64_t (*)(AppleBCMWLANBusInterface *, unsigned int *), int *, void, void, void))(**(void **)(*((void *)this + 9) + 3472) + 56))(*(void *)(*((void *)this + 9) + 3472), AppleBCMWLANBusInterfacePCIe::signalDriverEventGated, &v16, 0, 0, 0);
      mach_continuous_time();
      absolutetime_to_nanoseconds();
      return 0;
    }
    return 3758097129;
  }
  if ((a2 & 8) == 0) {
    goto LABEL_11;
  }
  if (!AppleBCMWLANBusInterfacePCIe::changeSleepState(this, 5, 13347)) {
    return 3758097129;
  }
  (*(void (**)(void))(**(void **)(*((void *)this + 9) + 3608) + 136))(*(void *)(*((void *)this + 9) + 3608));
  if (AppleOLYHALPlatformFunction::getLowPowerDetectedDK(*(AppleOLYHALPlatformFunction **)(*((void *)this + 9) + 5176), 0))
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logCrit(Logger, "[dk] %s@%d:Chip seems to have recovered after a low power sleep\n", "handleMBDataInbandDS", 13350);
      }
    }
    AppleOLYHALPlatformFunction::setLowPowerDetectedDK(*(AppleOLYHALPlatformFunction **)(*((void *)this + 9) + 5176), 0, 0);
  }
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  *(void *)(*((void *)this + 9) + 3064) = *(void *)(*((void *)this + 9) + 3048);
LABEL_11:
  if (v4)
  {
    uint64_t v6 = *((void *)this + 9);
    if (*(unsigned char *)(v6 + 2871))
    {
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          unint64_t v11 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v11, "[dk] %s@%d:Crash Test, Ignored deep sleep exit message\n", "handleMBDataInbandDS", 13362);
        }
      }
    }
    else
    {
      if ((*(unsigned char *)(v6 + 4488) & 1) == 0) {
        AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 0);
      }
      AppleBCMWLANBusInterfacePCIe::changeDeepSleepStateSetClear((uint64_t)this, a2, 1, 0);
      ++*(void *)(*((void *)this + 9) + 3024);
      mach_continuous_time();
      absolutetime_to_nanoseconds();
      *(void *)(*((void *)this + 9) + 3056) = *(void *)(*((void *)this + 9) + 3048);
      if ((*(_DWORD *)(*((void *)this + 9) + 1224) - 7) <= 2) {
        AppleBCMWLANBusInterfacePCIe::changeSleepState(this, 10, 13376);
      }
      if (!AppleBCMWLANBusInterfacePCIe::changeSleepState(this, 5, 13378)) {
        return 3758097129;
      }
      AppleBCMWLANBusInterfacePCIe::writeH2DMailbox(this, 32);
    }
  }
  int v7 = a2 & 0x6000000;
  if ((a2 & 0x6000000) != 0)
  {
    if (v7 == 0x2000000)
    {
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v13 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v13, "[dk] %s@%d:PTM Enabled\n", "handleMBDataInbandDS", 13392);
        }
      }
      *(unsigned char *)(*((void *)this + 9) + 4002) = 1;
    }
    else if (v7 == 0x4000000)
    {
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v12 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v12, "[dk] %s@%d:PTM Disabled\n", "handleMBDataInbandDS", 13389);
        }
      }
      *(unsigned char *)(*((void *)this + 9) + 4002) = 0;
    }
    else if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        int v14 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v14, "[dk] %s@%d:Invalid PTM Response\n", "handleMBDataInbandDS", 13395);
      }
    }
    (*(void (**)(void))(**(void **)(*((void *)this + 9) + 3616) + 136))(*(void *)(*((void *)this + 9) + 3616));
    AppleBCMWLANBusInterfacePCIe::configurePTM(this, 0);
    IOPCIDevice::SetASPMState(*(IOPCIDevice **)(*((void *)this + 9) + 3248), 2u, 0);
  }
  uint64_t result = 0;
  if (!v3) {
    return result;
  }
  uint64_t v9 = *((void *)this + 9);
  if (!*(unsigned char *)(v9 + 2868)) {
    return result;
  }
  ++*(void *)(v9 + 3016);
  mach_continuous_time();
  absolutetime_to_nanoseconds();
  if (*(unsigned char *)(*((void *)this + 9) + 3722)) {
    return 0;
  }
  if (!AppleBCMWLANBusInterfacePCIe::changeSleepState(this, 6, 13406)) {
    return 3758097129;
  }
  uint64_t v10 = *((void *)this + 9);
  if ((*(unsigned char *)(v10 + 4488) & 2) == 0)
  {
    AppleBCMWLANBusInterfacePCIe::ackDSRequest(this);
    return 0;
  }
  uint64_t result = 0;
  *(unsigned char *)(v10 + 4520) = 1;
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::handleMBDataOOBDW(AppleBCMWLANBusInterfacePCIe *this, unsigned int a2)
{
  *(_DWORD *)(*((void *)this + 9) + 1268) += a2 & 1;
  unsigned int v4 = a2 & 2;
  *(_DWORD *)(*((void *)this + 9) + 1272) += v4 >> 1;
  unsigned int v5 = a2 & 4;
  *(_DWORD *)(*((void *)this + 9) + 1276) += v5 >> 2;
  if ((a2 & 0x10000000) != 0)
  {
    AppleBCMWLANBusInterfacePCIe::handleFWTrap(this);
    if ((a2 & 0x8000000) != 0 && *(unsigned char *)(*((void *)this + 9) + 3718)) {
      AppleBCMWLANBusInterfacePCIe::handleMBDataOOBDW();
    }
  }
  else
  {
    if (a2)
    {
      int v17 = 0;
      (*(void (**)(void, uint64_t (*)(AppleBCMWLANBusInterface *, unsigned int *), int *, void, void, void))(**(void **)(*((void *)this + 9) + 3472) + 56))(*(void *)(*((void *)this + 9) + 3472), AppleBCMWLANBusInterfacePCIe::signalDriverEventGated, &v17, 0, 0, 0);
      mach_continuous_time();
      absolutetime_to_nanoseconds();
      return 0;
    }
    if ((a2 & 4) != 0)
    {
      uint64_t v6 = *((void *)this + 9);
      if (*(unsigned char *)(v6 + 2871))
      {
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(Logger, "[dk] %s@%d:Crash Test, Ignored deep sleep exit message\n", "handleMBDataOOBDW", 13264);
          }
        }
      }
      else
      {
        if ((*(unsigned char *)(v6 + 4488) & 1) == 0) {
          AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 0);
        }
        AppleBCMWLANBusInterfacePCIe::changeDeepSleepStateSetClear((uint64_t)this, a2, 1, 0);
        AppleBCMWLANBusInterfacePCIe::logPowerStateTransition(this, 3, 1, 13271);
        ++*(void *)(*((void *)this + 9) + 3024);
        mach_continuous_time();
        absolutetime_to_nanoseconds();
        *(void *)(*((void *)this + 9) + 3056) = *(void *)(*((void *)this + 9) + 3048);
      }
    }
    int v7 = a2 & 0x6000000;
    if ((a2 & 0x6000000) != 0)
    {
      if (v7 == 0x2000000)
      {
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            int v14 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v14, "[dk] %s@%d:PTM Enabled\n", "handleMBDataOOBDW", 13284);
          }
        }
        *(unsigned char *)(*((void *)this + 9) + 4002) = 1;
      }
      else if (v7 == 0x4000000)
      {
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v13 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v13, "[dk] %s@%d:PTM Disabled\n", "handleMBDataOOBDW", 13281);
          }
        }
        *(unsigned char *)(*((void *)this + 9) + 4002) = 0;
      }
      else if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          int v15 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v15, "[dk] %s@%d:Invalid PTM Response\n", "handleMBDataOOBDW", 13287);
        }
      }
      (*(void (**)(void))(**(void **)(*((void *)this + 9) + 3616) + 136))(*(void *)(*((void *)this + 9) + 3616));
      AppleBCMWLANBusInterfacePCIe::configurePTM(this, 0);
      IOPCIDevice::SetASPMState(*(IOPCIDevice **)(*((void *)this + 9) + 3248), 2u, 0);
    }
    uint64_t v8 = *((void *)this + 9);
    if (*(_DWORD *)(v8 + 4488) & 1 | v5) {
      goto LABEL_30;
    }
    if (!*(unsigned char *)(v8 + 2871))
    {
      AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 0);
      AppleBCMWLANBusInterfacePCIe::changeDeepSleepStateSetClear((uint64_t)this, v9, 1, 0);
      AppleBCMWLANBusInterfacePCIe::logPowerStateTransition(this, 3, 1, 13302);
      mach_continuous_time();
      absolutetime_to_nanoseconds();
      *(void *)(*((void *)this + 9) + 3064) = *(void *)(*((void *)this + 9) + 3048);
LABEL_30:
      if (!v4) {
        return 0;
      }
      goto LABEL_31;
    }
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        int v16 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v16, "[dk] %s@%d:Crash Test, Ignored deep sleep exit message\n", "handleMBDataOOBDW", 13296);
      }
    }
    *(unsigned char *)(*((void *)this + 9) + 2871) = 0;
    if (v4)
    {
LABEL_31:
      uint64_t v10 = *((void *)this + 9);
      if (*(unsigned char *)(v10 + 2868) && (*(unsigned char *)(v10 + 4488) & 2) == 0)
      {
        ++*(void *)(v10 + 3016);
        mach_continuous_time();
        absolutetime_to_nanoseconds();
        AppleBCMWLANBusInterfacePCIe::ackDSRequest(this);
      }
    }
  }
  return 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::handleFWTrap(AppleBCMWLANBusInterfacePCIe *this)
{
  unsigned int v62 = 0;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v64 = 0u;
  memset(__str, 0, sizeof(__str));
  *(void *)unsigned int v60 = 0;
  int v59 = 0;
  (*(void (**)(void))(*(void *)this + 1208))();
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:AppleBCMWLANBusInterfacePCIe::handleFWTrap\n", "handleFWTrap", 13496);
    }
  }
  uint64_t v2 = *(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360);
  if (v2) {
    AppleBCMWLANChipBackplane::forcePower(v2, 1, 0);
  }
  unint64_t v61 = 0xAAAAAAAAAAAAAAAALL;
  if (AppleBCMWLANBusInterfacePCIe::isTCMAccessible(this))
  {
    uint64_t v4 = *((void *)this + 9);
    unsigned int v5 = *(AppleBCMWLANChipMemory **)(v4 + 3368);
    if (v5
      || (*(void *)(*((void *)this + 9) + 3368) = AppleBCMWLANChipMemory::withMap(0, *(IOMemoryMap **)(v4 + 3280), *(AppleBCMWLANChipManagerPCIe **)(v4 + 3144), v3), (unsigned int v5 = *(AppleBCMWLANChipMemory **)(*((void *)this + 9) + 3368)) != 0))
    {
      unsigned int v6 = AppleBCMWLANChipMemory::unwrapRAMOffset(v5, 4294967292);
      AppleBCMWLANChipMemory::readRAM32(*(AppleBCMWLANChipMemory **)(*((void *)this + 9) + 3368), v6, v60);
      if (v60[0] + 1 > 1)
      {
        if (AppleBCMWLANChipMemory::translateRAMBackplaneAddr(*(AppleBCMWLANChipMemory **)(*((void *)this + 9) + 3368), v60[0], &v60[1]))
        {
          int ChipRAMDK = 0;
          strcpy(__str, "Failed to translate shared backplane address");
        }
        else
        {
          AppleBCMWLANChipMemory::setSharedMemoryOffset(*(void *)(*((void *)this + 9) + 3368), v60[1]);
          unsigned int TrapAddr = AppleBCMWLANChipMemory::readTrapAddr(*(AppleBCMWLANChipMemory **)(*((void *)this + 9) + 3368));
          if (TrapAddr)
          {
            unsigned int v9 = TrapAddr;
            if (AppleBCMWLANChipMemory::translateRAMBackplaneAddr(*(AppleBCMWLANChipMemory **)(*((void *)this + 9) + 3368), TrapAddr, &v62))
            {
              if (AppleBCMWLANBusInterface::getLogger(this))
              {
                AppleBCMWLANBusInterface::getLogger(this);
                if (CCLogStream::shouldLog())
                {
                  unsigned int v33 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                  CCLogStream::logAlert(v33, "[dk] %s@%d:Failed to translate trap addr %#X\n", "handleFWTrap", 13570, v9);
                }
              }
              snprintf(__str, 0x80uLL, "Invalid trap addr %#X", v9);
              int ChipRAMDK = 0;
            }
            else
            {
              int v22 = (IO80211Buffer *)IO80211Buffer::allocBufferSingle();
              if (v22)
              {
                int v23 = v22;
                int ChipRAMDK = AppleBCMWLANChipMemory::readChipRAMDK(*(AppleBCMWLANChipMemory **)(*((void *)this + 9) + 3368), v62, 80, v22, 0);
                if (ChipRAMDK)
                {
                  uint64_t BytesNoCopy = (int *)IO80211Buffer::getBytesNoCopy(v23);
                  int v25 = *BytesNoCopy;
                  int v58 = BytesNoCopy[1];
                  *(_DWORD *)(*((void *)this + 9) + 4056) = BytesNoCopy[19];
                  *(_DWORD *)(*((void *)this + 9) + 4060) = BytesNoCopy[18];
                  int v42 = BytesNoCopy[17];
                  int v57 = BytesNoCopy[2];
                  int v56 = BytesNoCopy[3];
                  int v55 = BytesNoCopy[4];
                  int v54 = BytesNoCopy[5];
                  int v53 = BytesNoCopy[6];
                  int v52 = BytesNoCopy[7];
                  int v51 = BytesNoCopy[8];
                  int v50 = BytesNoCopy[9];
                  int v49 = BytesNoCopy[10];
                  int v48 = BytesNoCopy[11];
                  int v47 = BytesNoCopy[12];
                  int v46 = BytesNoCopy[13];
                  int v45 = BytesNoCopy[14];
                  int v44 = BytesNoCopy[15];
                  int v43 = BytesNoCopy[16];
                  if (AppleBCMWLANBusInterface::getLogger(this))
                  {
                    AppleBCMWLANBusInterface::getLogger(this);
                    if (CCLogStream::shouldLog())
                    {
                      int v36 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                      CCLogStream::logAlert(v36, "[dk] %s@%d:FW TRAP %d\n", "handleFWTrap", 13623, v25);
                    }
                  }
                  if (AppleBCMWLANBusInterface::getLogger(this))
                  {
                    AppleBCMWLANBusInterface::getLogger(this);
                    if (CCLogStream::shouldLog())
                    {
                      int v37 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                      CCLogStream::logAlert(v37, "[dk] %s@%d:FW TRAP %d (%x): epc %x, pc %x, lr %x, sp %x, cpsr %x, spsr %x\n", "handleFWTrap", 13625, v25, v9, v58, *(_DWORD *)(*((void *)this + 9) + 4056), *(_DWORD *)(*((void *)this + 9) + 4060), v42, v57, v56);
                    }
                  }
                  if (AppleBCMWLANBusInterface::getLogger(this))
                  {
                    AppleBCMWLANBusInterface::getLogger(this);
                    if (CCLogStream::shouldLog())
                    {
                      int v38 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                      CCLogStream::logAlert(v38, "[dk] %s@%d:r0 %x, r1 %x, r2 %x, r3 %x, r4 %x, r5 %x, r6 %x\n", "handleFWTrap", 13627, v55, v54, v53, v52, v51, v50, v49);
                    }
                  }
                  if (AppleBCMWLANBusInterface::getLogger(this))
                  {
                    AppleBCMWLANBusInterface::getLogger(this);
                    if (CCLogStream::shouldLog())
                    {
                      int v39 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                      CCLogStream::logAlert(v39, "[dk] %s@%d:r7 %x, r8 %x, r9 %x, r10 %x, r11 %x, r12 %x\n", "handleFWTrap", 13629, v48, v47, v46, v45, v44, v43);
                    }
                  }
                  if (IOParseBootArgNumber("wlan.debug.dump-socram.fwtrap", &v59, 4) && v59)
                  {
                    if (AppleBCMWLANBusInterface::getLogger(this))
                    {
                      AppleBCMWLANBusInterface::getLogger(this);
                      if (CCLogStream::shouldLog())
                      {
                        int v41 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                        CCLogStream::logAlert(v41, "[dk] %s@%d:Dump SOCRAM - On '%s'\n", "handleFWTrap", 13633, "fwtrap");
                      }
                    }
                    AppleBCMWLANBusInterfacePCIe::dumpSocRAMToRegistry(this, 0);
                  }
                }
                else
                {
                  if (AppleBCMWLANBusInterface::getLogger(this))
                  {
                    AppleBCMWLANBusInterface::getLogger(this);
                    if (CCLogStream::shouldLog())
                    {
                      int v40 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                      CCLogStream::logAlert(v40, "[dk] %s@%d:Fail to access trap buffer\n", "handleFWTrap", 13593);
                    }
                  }
                  strcpy(__str, "Fail to access trap buffer");
                }
                IO80211Buffer::returnBuffer(v23);
                (*(void (**)(void))(MEMORY[0] + 72))(0);
              }
              else
              {
                if (AppleBCMWLANBusInterface::getLogger(this))
                {
                  AppleBCMWLANBusInterface::getLogger(this);
                  if (CCLogStream::shouldLog())
                  {
                    unsigned int v35 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                    CCLogStream::logAlert(v35, "[dk] %s@%d:Fail to allocate Memory\n", "handleFWTrap", 13587);
                  }
                }
                int ChipRAMDK = 0;
                strcpy(__str, "fail to allocate Memory for trap buffer");
              }
            }
          }
          else
          {
            if (AppleBCMWLANBusInterface::getLogger(this))
            {
              AppleBCMWLANBusInterface::getLogger(this);
              if (CCLogStream::shouldLog())
              {
                uint64_t v34 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                CCLogStream::logAlert(v34, "[dk] %s@%d:Trap Address is 0\n", "handleFWTrap", 13563);
              }
            }
            int ChipRAMDK = 0;
            strcpy(__str, "Trap Addr is 0");
          }
        }
      }
      else
      {
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            unsigned int v31 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v31, "[dk] %s@%d:Failed to read shared memory address @ %#X, %#X\n", "handleFWTrap", 13535, v6, v60[0]);
          }
        }
        int ChipRAMDK = 0;
        strcpy(__str, "Failed to read shared memory address");
      }
    }
    else
    {
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          int v32 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logCrit(v32, "[dk] %s@%d:PCIe: Failed to map resources Read/Write\n", "handleFWTrap", 13524);
        }
      }
      int ChipRAMDK = 0;
      strcpy(__str, "PCIe: Failed to map resources Read/Write");
    }
  }
  else
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        __int16 v27 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v27, "[dk] %s@%d:TCM is not accessible. Skipping collecting trap Information\n", "handleFWTrap", 13503);
      }
    }
    int ChipRAMDK = 0;
    strcpy(__str, "TCM not accessible");
  }
  ++*(_DWORD *)(*((void *)this + 9) + 4080);
  uint64_t v10 = *((void *)this + 9);
  if (*(unsigned char *)(v10 + 4077))
  {
    unint64_t v11 = *(void **)(v10 + 4064);
    uint64_t v12 = (const void *)(AppleBCMWLANDMASlab::getBytesNoCopy(*(AppleBCMWLANDMASlab **)(v10 + 3504), 0) + 4);
    if (*(unsigned char *)(*((void *)this + 9) + 4077)) {
      size_t v13 = 516;
    }
    else {
      size_t v13 = 0;
    }
    memcpy(v11, v12, v13);
  }
  if (ChipRAMDK)
  {
    mach_continuous_time();
    absolutetime_to_nanoseconds();
    uint64_t v14 = *((void *)this + 9);
    if (*(_DWORD *)(v14 + 4184))
    {
      unint64_t v15 = v61;
      uint64_t v16 = *(void *)(v14 + 4176);
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          unint64_t v28 = (v15 - v16) / 0xF4240;
          uint64_t v29 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          ForcedFwTrapReasonString = getForcedFwTrapReasonString(*(_DWORD *)(*((void *)this + 9) + 4184));
          CCLogStream::logAlert(v29, "[dk] %s@%d:ForcedTrapReason :%s: trap seen in %llu ms since ForcedTrap setup\n", "handleFWTrap", 13658, ForcedFwTrapReasonString, v28);
        }
      }
      getForcedFwTrapReasonString(*(_DWORD *)(*((void *)this + 9) + 4184));
      snprintf(__str, 0x80uLL, "%s");
    }
    else
    {
      snprintf(__str, 0x80uLL, "Type=%u,PC=0x%X,LR=0x%X");
    }
    *(void *)(*((void *)this + 9) + 4176) = 0;
    *(_DWORD *)(*((void *)this + 9) + 4184) = 0;
  }
  uint64_t v17 = *((void *)this + 9);
  int v18 = *(AppleBCMWLANChipBackplane **)(v17 + 3360);
  if (v18)
  {
    AppleBCMWLANChipBackplane::forcePower(v18, 0, 0);
    uint64_t v17 = *((void *)this + 9);
  }
  int v19 = *(unsigned __int8 *)(v17 + 3714);
  uint64_t FaultReporter = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(this);
  if (v19) {
    CCFaultReporter::reportFault(FaultReporter, 5u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANBusInterfacePCIe.cpp", 0x356Au, "handleFWTrap", 0, -469794295, "%s", __str);
  }
  else {
    CCFaultReporter::reportFault(FaultReporter, 5u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANBusInterfacePCIe.cpp", 0x3571u, "handleFWTrap", 0, -469794303, "%s", __str);
  }
  return 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::isCTS(AppleBCMWLANBusInterfacePCIe *this)
{
  return *(_DWORD *)(*((void *)this + 9) + 4488) & 1;
}

AppleBCMWLANBusInterface *AppleBCMWLANBusInterfacePCIe::ackDSRequest(AppleBCMWLANBusInterface *this)
{
  if (*(_DWORD *)(*((void *)this + 9) + 2844) == 2) {
    return AppleBCMWLANBusInterfacePCIe::ackDSRequestInbandDS(this);
  }
  else {
    return AppleBCMWLANBusInterfacePCIe::ackDSRequestOOBDW(this);
  }
}

uint64_t AppleBCMWLANBusInterfacePCIe::trap(AppleBCMWLANBusInterfacePCIe *this, int a2)
{
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:trap reason=%u\n", "trap", 13449, a2);
    }
  }
  uint64_t v4 = AppleBCMWLANBusInterfacePCIe::retainCTS(this, 13451, 2);
  if (v4)
  {
    uint64_t v5 = v4;
    __int16 v6 = 13453;
  }
  else if (AppleBCMWLANBusInterfacePCIe::isBusAccessible(this, 0))
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v9 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v9, "[dk] %s@%d:Triggering TRAP via mailbox\n", "trap", 13462);
      }
    }
    AppleBCMWLANBusInterfacePCIe::writeH2DMailbox(this, 0x20000000);
    uint64_t v5 = 0;
    __int16 v6 = 13467;
  }
  else
  {
    uint64_t v5 = 3758097088;
    __int16 v6 = 13458;
  }
  AppleBCMWLANBusInterfacePCIe::releaseCTS(this, v6);
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::trap(AppleBCMWLANBusInterfacePCIe *this, int a2)
{
  return AppleBCMWLANBusInterfacePCIe::trap((AppleBCMWLANBusInterfacePCIe *)((char *)this - 48), a2);
}

uint64_t AppleBCMWLANBusInterfacePCIe::setupForcedTrap(AppleBCMWLANBusInterface *this, int a2)
{
  if (*(_DWORD *)(*((void *)this + 9) + 4184))
  {
    uint64_t v4 = 3758097109;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        ForcedFwTrapReasonString = getForcedFwTrapReasonString(*(_DWORD *)(*((void *)this + 9) + 4184));
        int v7 = getForcedFwTrapReasonString(a2);
        CCLogStream::logInfo(Logger, "[dk] %s@%d:Forced trap %s already in progress, ignoring %s\n", "setupForcedTrap", 13690, ForcedFwTrapReasonString, v7);
      }
    }
  }
  else
  {
    mach_continuous_time();
    absolutetime_to_nanoseconds();
    uint64_t v4 = 0;
    *(_DWORD *)(*((void *)this + 9) + 4184) = a2;
  }
  return v4;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::setupForcedTrap(uint64_t a1, int a2)
{
  return AppleBCMWLANBusInterfacePCIe::setupForcedTrap((AppleBCMWLANBusInterface *)(a1 - 48), a2);
}

uint64_t AppleBCMWLANBusInterfacePCIe::readSoCRAM(AppleBCMWLANBusInterfacePCIe *this, unsigned int a2, OSData *a3, unint64_t a4)
{
  uint64_t v7 = 3758097088;
  (*(void (**)(AppleBCMWLANBusInterfacePCIe *, const char *, uint64_t))(*(void *)this + 1208))(this, "readSoCRAM", 13875);
  uint64_t v8 = *((void *)this + 9);
  if (!*(void *)(v8 + 3368)) {
    return v7;
  }
  if (*(unsigned char *)(v8 + 1304) || !*(void *)(v8 + 3248))
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:Bus is NOT accessible ivars->fChipHalted:%s, ivars->fPCIeBus:%s\n");
      }
    }
  }
  else
  {
    uint64_t v10 = *(AppleBCMWLANChipManagerPCIe **)(v8 + 3280);
    if (v10)
    {
      if (AppleBCMWLANChipManagerPCIe::needsCacheCoherency(v10))
      {
        unint64_t v11 = *(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352);
        if (v11)
        {
          v27[0] = 0;
          AppleBCMWLANChipConfigSpace::readReg32(v11, 0x88u, v27);
          unsigned int v12 = v27[0];
          if ((v27[0] & 0x200) == 0)
          {
            v27[0] |= 0x200u;
            AppleBCMWLANChipConfigSpace::writeReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), 0x88u, v12 | 0x200);
          }
        }
      }
    }
    *(void *)__int16 v27 = 0;
    uint64_t v13 = IO80211Buffer::allocBufferSingle();
    if (v13)
    {
      uint64_t v14 = (IO80211Buffer *)v13;
      uint64_t v15 = *((void *)this + 9);
      if ((*(unsigned char *)(v15 + 4488) & 1) == 0)
      {
        AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 0);
        uint64_t v15 = *((void *)this + 9);
      }
      uint64_t v16 = *(AppleBCMWLANPCIeMMIOHistory **)(v15 + 3144);
      if (v16)
      {
        int RecordingStatus = AppleBCMWLANPCIeMMIOHistory::getRecordingStatus(v16);
        AppleBCMWLANPCIeMMIOHistory::disableRecording(*(void *)(*((void *)this + 9) + 3144));
        if (!a4)
        {
LABEL_28:
          uint64_t v24 = *((void *)this + 9);
          if (RecordingStatus)
          {
            uint64_t v25 = *(void *)(v24 + 3144);
            if (v25)
            {
              AppleBCMWLANPCIeMMIOHistory::enableRecording(v25);
              uint64_t v24 = *((void *)this + 9);
            }
          }
          if ((*(unsigned char *)(v24 + 4488) & 1) == 0) {
            AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 1);
          }
          IO80211Buffer::returnBuffer(v14);
          (*(void (**)(void))(**(void **)v27 + 72))(*(void *)v27);
          if (*(void *)v27) {
            (*(void (**)(void))(**(void **)v27 + 16))(*(void *)v27);
          }
          return 0;
        }
      }
      else
      {
        int RecordingStatus = 0;
        if (!a4) {
          goto LABEL_28;
        }
      }
      if (a4 < 0x401)
      {
        unsigned int v19 = 0;
      }
      else
      {
        unsigned int v19 = 0;
        do
        {
          AppleBCMWLANChipMemory::readRAM(*(AppleBCMWLANChipMemory **)(*((void *)this + 9) + 3368), v19, 0x400u, v14, 0);
          uint64_t BytesNoCopy = (const void *)IO80211Buffer::getBytesNoCopy(v14);
          OSData::appendBytes(a3, BytesNoCopy, 0x400uLL);
          unint64_t v21 = v19 + 2048;
          v19 += 1024;
        }
        while (v21 < a4);
      }
      size_t v22 = a4 - v19;
      AppleBCMWLANChipMemory::readRAM(*(AppleBCMWLANChipMemory **)(*((void *)this + 9) + 3368), v19, v22, v14, 0);
      int v23 = (const void *)IO80211Buffer::getBytesNoCopy(v14);
      OSData::appendBytes(a3, v23, v22);
      goto LABEL_28;
    }
    uint64_t v7 = 3758097085;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        int v18 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v18, "[dk] %s@%d:Fail to allocate Memory\n");
      }
    }
  }
  return v7;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::readSoCRAM(AppleBCMWLANBusInterfacePCIe *this, unsigned int a2, OSData *a3, unint64_t a4)
{
  return AppleBCMWLANBusInterfacePCIe::readSoCRAM((AppleBCMWLANBusInterfacePCIe *)((char *)this - 64), a2, a3, a4);
}

uint64_t AppleBCMWLANBusInterfacePCIe::readcoexSoCRAM(AppleBCMWLANBusInterfacePCIe *this, unsigned int a2, OSData *a3, unint64_t *a4)
{
  uint64_t v7 = 3758097088;
  (*(void (**)(AppleBCMWLANBusInterfacePCIe *, const char *, uint64_t))(*(void *)this + 1208))(this, "readcoexSoCRAM", 13953);
  uint64_t v8 = *((void *)this + 9);
  if (*(void *)(v8 + 3368))
  {
    if (*(unsigned char *)(v8 + 1304) || !*(void *)(v8 + 3248))
    {
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(Logger, "[dk] %s@%d:Bus is NOT accessible ivars->fChipHalted:%s, ivars->fPCIeBus:%s\n");
        }
      }
    }
    else
    {
      uint64_t v10 = *(AppleBCMWLANChipManagerPCIe **)(v8 + 3280);
      if (v10)
      {
        if (AppleBCMWLANChipManagerPCIe::needsCacheCoherency(v10))
        {
          unint64_t v11 = *(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352);
          if (v11)
          {
            v22[0] = 0;
            AppleBCMWLANChipConfigSpace::readReg32(v11, 0x88u, v22);
            unsigned int v12 = v22[0];
            if ((v22[0] & 0x200) == 0)
            {
              v22[0] |= 0x200u;
              AppleBCMWLANChipConfigSpace::writeReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), 0x88u, v12 | 0x200);
            }
          }
        }
      }
      *(void *)size_t v22 = 0;
      uint64_t v13 = IO80211Buffer::allocBufferSingle();
      if (v13)
      {
        uint64_t v14 = (IO80211Buffer *)v13;
        uint64_t v15 = *((void *)this + 9);
        if ((*(unsigned char *)(v15 + 4488) & 1) == 0)
        {
          AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 0);
          uint64_t v15 = *((void *)this + 9);
        }
        uint64_t v16 = *(AppleBCMWLANPCIeMMIOHistory **)(v15 + 3144);
        if (v16)
        {
          int RecordingStatus = AppleBCMWLANPCIeMMIOHistory::getRecordingStatus(v16);
          AppleBCMWLANPCIeMMIOHistory::disableRecording(*(void *)(*((void *)this + 9) + 3144));
          AppleBCMWLANChipMemory::readCoexRAM(*(AppleBCMWLANChipMemory **)(*((void *)this + 9) + 3368), 0, *(_DWORD *)a4, v14, 0);
          if (RecordingStatus)
          {
            uint64_t v18 = *(void *)(*((void *)this + 9) + 3144);
            if (v18) {
              AppleBCMWLANPCIeMMIOHistory::enableRecording(v18);
            }
          }
        }
        else
        {
          AppleBCMWLANChipMemory::readCoexRAM(*(AppleBCMWLANChipMemory **)(v15 + 3368), 0, *(_DWORD *)a4, v14, 0);
        }
        if ((*(unsigned char *)(*((void *)this + 9) + 4488) & 1) == 0) {
          AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 1);
        }
        uint64_t BytesNoCopy = (const void *)IO80211Buffer::getBytesNoCopy(v14);
        OSData::appendBytes(a3, BytesNoCopy, *(unsigned int *)a4);
        IO80211Buffer::returnBuffer(v14);
        (*(void (**)(void))(**(void **)v22 + 72))(*(void *)v22);
        if (*(void *)v22) {
          (*(void (**)(void))(**(void **)v22 + 16))(*(void *)v22);
        }
        return 0;
      }
      else
      {
        uint64_t v7 = 3758097085;
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            unsigned int v19 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v19, "[dk] %s@%d:Fail to allocate Memory\n");
          }
        }
      }
    }
  }
  return v7;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::readcoexSoCRAM(AppleBCMWLANBusInterfacePCIe *this, unsigned int a2, OSData *a3, unint64_t *a4)
{
  return AppleBCMWLANBusInterfacePCIe::readcoexSoCRAM((AppleBCMWLANBusInterfacePCIe *)((char *)this - 64), a2, a3, a4);
}

uint64_t AppleBCMWLANBusInterfacePCIe::getSoCRAMSize(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t v1 = *((void *)this + 9);
  if (*(void *)(v1 + 3248))
  {
    uint64_t v2 = *(AppleBCMWLANChipManagerPCIe **)(v1 + 3280);
    return AppleBCMWLANChipManagerPCIe::getRAMSize(v2);
  }
  else
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:Bail out SoCRAM dump: Failed to attach PCIe Bus\n", "getSoCRAMSize", 14020);
      }
    }
    return 0;
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::getSoCRAMSize(AppleBCMWLANBusInterfacePCIe *this)
{
  return AppleBCMWLANBusInterfacePCIe::getSoCRAMSize((AppleBCMWLANBusInterfacePCIe *)((char *)this - 48));
}

uint64_t AppleBCMWLANBusInterfacePCIe::readUCodeRAM(AppleBCMWLANBusInterfacePCIe *this, unsigned int a2, OSData *a3, uint64_t a4)
{
  uint64_t v8 = 3758097088;
  (*(void (**)(AppleBCMWLANBusInterfacePCIe *, const char *, uint64_t))(*(void *)this + 1208))(this, "readUCodeRAM", 14029);
  if (a2 > 1) {
    return 3758097090;
  }
  uint64_t v9 = *((void *)this + 9);
  if (*(void *)(v9 + 3360))
  {
    if (*(unsigned char *)(v9 + 1304) || !*(void *)(v9 + 3248))
    {
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          uint64_t v17 = *((void *)this + 9);
          uint64_t v18 = "TRUE";
          if (!*(unsigned char *)(v17 + 1304)) {
            uint64_t v18 = "FALSE";
          }
          if (*(void *)(v17 + 3248)) {
            unsigned int v19 = "Not NULL";
          }
          else {
            unsigned int v19 = "NULL";
          }
          CCLogStream::logAlert(Logger, "[dk] %s@%d:Bus is NOT accessible ivars->fChipHalted:%s, ivars->fPCIeBus:%s\n", "readUCodeRAM", 14040, v18, v19);
        }
      }
    }
    else
    {
      unint64_t v11 = *(unsigned int **)(v9 + 2832);
      if (v11)
      {
        unsigned int v12 = *v11;
        if ((v12 >> AppleBCMWLANChipManagerPCIe::getCoreID(*(AppleBCMWLANChipManagerPCIe **)(v9 + 3280), 1u)))
        {
          uint64_t v13 = IOMallocZeroData();
          if (v13)
          {
            uint64_t v14 = (char *)v13;
            if ((*(unsigned char *)(*((void *)this + 9) + 4488) & 1) == 0) {
              AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 0);
            }
            uint64_t v15 = *(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360);
            if (a2) {
              AppleBCMWLANChipBackplane::readUCodeSHMRAM(v15, v14, a4);
            }
            else {
              AppleBCMWLANChipBackplane::readUCodeSCRRAM(v15, v14, a4);
            }
            if ((*(unsigned char *)(*((void *)this + 9) + 4488) & 1) == 0) {
              AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 1);
            }
            OSData::appendBytes(a3, v14, a4);
            IOFreeData();
            return 0;
          }
          else
          {
            return 3758097085;
          }
        }
      }
    }
  }
  return v8;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::readUCodeRAM(AppleBCMWLANBusInterfacePCIe *this, unsigned int a2, OSData *a3, uint64_t a4)
{
  return AppleBCMWLANBusInterfacePCIe::readUCodeRAM((AppleBCMWLANBusInterfacePCIe *)((char *)this - 48), a2, a3, a4);
}

uint64_t AppleBCMWLANBusInterfacePCIe::getUCodeSCRSize(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t v1 = *((void *)this + 9);
  if (*(void *)(v1 + 3248)) {
    return AppleBCMWLANChipManagerPCIe::getUCodeSCRSize(*(AppleBCMWLANChipManagerPCIe **)(v1 + 3280));
  }
  else {
    return 0;
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::getUCodeSCRSize(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (*(void *)(v1 + 3248)) {
    return AppleBCMWLANChipManagerPCIe::getUCodeSCRSize(*(AppleBCMWLANChipManagerPCIe **)(v1 + 3280));
  }
  else {
    return 0;
  }
}

uint64_t AppleBCMWLANBusInterfacePCIe::getUCodeSHMSize(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t v1 = *((void *)this + 9);
  if (*(void *)(v1 + 3248)) {
    return AppleBCMWLANChipManagerPCIe::getUCodeSHMSize(*(AppleBCMWLANChipManagerPCIe **)(v1 + 3280));
  }
  else {
    return 0;
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::getUCodeSHMSize(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (*(void *)(v1 + 3248)) {
    return AppleBCMWLANChipManagerPCIe::getUCodeSHMSize(*(AppleBCMWLANChipManagerPCIe **)(v1 + 3280));
  }
  else {
    return 0;
  }
}

uint64_t AppleBCMWLANBusInterfacePCIe::signalDriverEventGated(AppleBCMWLANBusInterface *a1, unsigned int *a2)
{
  if (AppleBCMWLANBusInterface::getLogger(a1))
  {
    AppleBCMWLANBusInterface::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
      CCLogStream::logNoticeIf(Logger, 0x200000uLL, "[dk] %s@%d: Signaling (%s) event\n", "signalDriverEventGated", 14110, AppleBCMWPCIeEventToString[*a2]);
    }
  }
  (*(void (**)(void, uint64_t))(**(void **)(*((void *)a1 + 9) + 3472) + 88))(*(void *)(*((void *)a1 + 9) + 3472), *((void *)a1 + 9) + 4 * *a2 + 1736);
  return 0;
}

AppleBCMWLANBusInterface *AppleBCMWLANBusInterfacePCIe::ackDSRequestInbandDS(AppleBCMWLANBusInterface *this)
{
  uint64_t v1 = *((void *)this + 9);
  if (*(int *)(v1 + 4496) <= 0 && !*(unsigned char *)(v1 + 3722))
  {
    uint64_t v2 = this;
    mach_continuous_time();
    absolutetime_to_nanoseconds();
    this = (AppleBCMWLANBusInterface *)AppleBCMWLANBusInterfacePCIe::changeSleepState(v2, 7, 14162);
    if (this)
    {
      uint64_t v3 = *((void *)v2 + 9);
      if (*(unsigned char *)(v3 + 5196)) {
        AppleBCMWLANBusInterfacePCIe::ackDSRequestInbandDS();
      }
      *(_DWORD *)(v3 + 5200) = 2;
      *(unsigned char *)(*((void *)v2 + 9) + 5196) = 1;
      (*(void (**)(void, uint64_t, void))(**(void **)(*((void *)v2 + 9) + 312) + 192))(*(void *)(*((void *)v2 + 9) + 312), 1, 0);
      AppleBCMWLANPCIeDoorbell::cancelRing(*(void *)(*((void *)v2 + 9) + 3640));
      AppleBCMWLANBusInterfacePCIe::hitDoorbell(v2, v4);
      this = AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(v2, 1);
      uint64_t v5 = *((void *)v2 + 9);
      if (*(unsigned char *)(v5 + 2868))
      {
        *(_DWORD *)(v5 + 4488) = *(_DWORD *)(v5 + 4488) & 0xFFFFFFFA | 4;
        uint64_t v5 = *((void *)v2 + 9);
      }
      *(_DWORD *)(v5 + 1292) = *(_DWORD *)(v5 + 1256);
    }
  }
  return this;
}

AppleBCMWLANBusInterface *AppleBCMWLANBusInterfacePCIe::ackDSRequestOOBDW(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t v2 = *((void *)this + 9);
  if (*(int *)(v2 + 4496) > 0 || *(unsigned char *)(v2 + 3722))
  {
    return (AppleBCMWLANBusInterface *)AppleBCMWLANBusInterfacePCIe::writeH2DMailbox(this, 4);
  }
  else
  {
    mach_continuous_time();
    absolutetime_to_nanoseconds();
    AppleBCMWLANBusInterfacePCIe::writeH2DMailbox(this, 2);
    AppleBCMWLANBusInterfacePCIe::logPowerStateTransition(this, 4, 1, 14143);
    uint64_t result = AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 1);
    uint64_t v4 = *((void *)this + 9);
    if (*(unsigned char *)(v4 + 2868))
    {
      *(_DWORD *)(v4 + 4488) = *(_DWORD *)(v4 + 4488) & 0xFFFFFFFA | 4;
      uint64_t v4 = *((void *)this + 9);
    }
    *(_DWORD *)(v4 + 1292) = *(_DWORD *)(v4 + 1256);
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::retainCTSInbandDS(AppleBCMWLANBusInterfacePCIe *this)
{
  (*(void (**)(AppleBCMWLANBusInterfacePCIe *, const char *, uint64_t))(*(void *)this + 1208))(this, "retainCTSInbandDS", 14383);
  uint64_t v3 = *((void *)this + 9);
  if (*(unsigned char *)(v3 + 2868))
  {
    if (*(_DWORD *)(v3 + 2844) == 2 && !*(unsigned char *)(v3 + 1306))
    {
      uint64_t v7 = (_DWORD *)(v3 + 4496);
      int v4 = *(_DWORD *)(v3 + 4496);
      goto LABEL_12;
    }
    int v4 = *(_DWORD *)(v3 + 4496);
    if (v4)
    {
LABEL_11:
      uint64_t v7 = (_DWORD *)(v3 + 4496);
LABEL_12:
      *uint64_t v7 = v4 + 1;
      return 0;
    }
    int v5 = *(_DWORD *)(v3 + 1224);
    if (v5 != 8)
    {
      if (v5 != 7)
      {
LABEL_10:
        AppleBCMWLANBusInterfacePCIe::changeDeepSleepStateSetClear((uint64_t)this, v2, 2, 0);
        uint64_t v3 = *((void *)this + 9);
        int v4 = *(_DWORD *)(v3 + 4496);
        goto LABEL_11;
      }
      AppleBCMWLANBusInterfacePCIe::changeSleepState(this, 9, 14402);
      uint64_t v6 = *((void *)this + 9);
      if (*(unsigned char *)(v6 + 5196)) {
        AppleBCMWLANBusInterfacePCIe::ackDSRequestInbandDS();
      }
      *(_DWORD *)(v6 + 5200) = 64;
      *(unsigned char *)(*((void *)this + 9) + 5196) = 1;
      (*(void (**)(void, uint64_t, void))(**(void **)(*((void *)this + 9) + 312) + 192))(*(void *)(*((void *)this + 9) + 312), 1, 0);
      AppleBCMWLANPCIeDoorbell::cancelRing(*(void *)(*((void *)this + 9) + 3640));
    }
    AppleBCMWLANBusInterfacePCIe::hitDoorbell(this, v2);
    goto LABEL_10;
  }
  return 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::retainCTSOOBDW(AppleBCMWLANBusInterfacePCIe *this, __int16 a2)
{
  (*(void (**)(AppleBCMWLANBusInterfacePCIe *, const char *, uint64_t))(*(void *)this + 1208))(this, "retainCTSOOBDW", 14357);
  uint64_t v4 = *((void *)this + 9);
  if (*(unsigned char *)(v4 + 2868))
  {
    int v5 = *(_DWORD *)(v4 + 4496);
    if (!v5)
    {
      AppleBCMWLANBusInterfacePCIe::logPowerStateTransition(this, 2, 1, a2);
      uint64_t v7 = *((void *)this + 9);
      if (*(_DWORD *)(v7 + 2844) != 2)
      {
        *(unsigned char *)(v7 + 1232) = 1;
        AppleOLYHALPortInterfacePCIe::setDeviceWakeDK(*(AppleOLYHALPortInterfacePCIe **)(*((void *)this + 9) + 5184), 1, 0);
      }
      AppleBCMWLANBusInterfacePCIe::changeDeepSleepStateSetClear((uint64_t)this, v6, 2, 0);
      uint64_t v4 = *((void *)this + 9);
      int v5 = *(_DWORD *)(v4 + 4496);
    }
    *(_DWORD *)(v4 + 4496) = v5 + 1;
  }
  return 0;
}

AppleBCMWLANBusInterface *AppleBCMWLANBusInterfacePCIe::releaseCTSInbandDS(AppleBCMWLANBusInterface *this)
{
  uint64_t v1 = *((void *)this + 9);
  if (*(unsigned char *)(v1 + 2868))
  {
    uint64_t v2 = this;
    --*(_DWORD *)(v1 + 4496);
    uint64_t v3 = *((void *)this + 9);
    if (*(unsigned char *)(v3 + 1306))
    {
      if (*(int *)(v3 + 4496) <= 0)
      {
        if (*(unsigned char *)(v3 + 4520))
        {
          *(unsigned char *)(v3 + 4520) = 0;
          uint64_t v3 = *((void *)this + 9);
          if (!*(unsigned char *)(v3 + 3722))
          {
            this = AppleBCMWLANBusInterfacePCIe::ackDSRequest(this);
            uint64_t v3 = *((void *)v2 + 9);
          }
        }
        if (*(unsigned char *)(v3 + 2868)) {
          *(_DWORD *)(v3 + 4488) &= ~2u;
        }
      }
    }
  }
  return this;
}

CCLogStream *AppleBCMWLANBusInterfacePCIe::releaseCTSOOBDW(CCLogStream *this, __int16 a2)
{
  uint64_t v2 = *((void *)this + 9);
  if (*(unsigned char *)(v2 + 2868))
  {
    uint64_t v3 = this;
    --*(_DWORD *)(v2 + 4496);
    if (*(int *)(*((void *)this + 9) + 4496) <= 0)
    {
      this = AppleBCMWLANBusInterfacePCIe::logPowerStateTransition(this, 3, 1, a2);
      uint64_t v4 = *((void *)v3 + 9);
      if (*(_DWORD *)(v4 + 2844) != 2)
      {
        *(unsigned char *)(v4 + 1232) = 0;
        this = (CCLogStream *)AppleOLYHALPortInterfacePCIe::setDeviceWakeDK(*(AppleOLYHALPortInterfacePCIe **)(*((void *)v3 + 9) + 5184), 0, 0);
        uint64_t v4 = *((void *)v3 + 9);
      }
      if (*(unsigned char *)(v4 + 2868)) {
        *(_DWORD *)(v4 + 4488) &= ~2u;
      }
    }
  }
  return this;
}

uint64_t AppleBCMWLANBusInterfacePCIe::SetPowerState_Impl(AppleBCMWLANBusInterfacePCIe *this, uint32_t a2)
{
  kern_return_t v9;
  AppleBCMWLANCore *v10;
  uint64_t v11;
  CCLogStream *v13;
  CCLogStream *v14;
  CCLogStream *Logger;
  CCLogStream *v16;
  CCLogStream *v17;
  void v18[5];
  uint32_t v19;
  void block[6];
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;

  size_t v22 = 0;
  int v23 = &v22;
  uint64_t v24 = 0x2000000000;
  uint64_t v25 = -536870212;
  if ((*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 608))(this))
  {
    uint64_t v4 = (AppleBCMWLANCore *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 608))(this);
    AppleBCMWLANCore::reportSystemPowerState(v4, (unint64_t *)1, a2 == 2, 1);
  }
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:DK: SetPowerState BusInterfacePCIe  %u", "SetPowerState_Impl", 14734, a2);
    }
  }
  if (*(unsigned char *)(*((void *)this + 9) + 5192))
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v13 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v13, "[dk] %s@%d:DK: SetPowerState: chip unrecoverable\n");
      }
    }
  }
  else
  {
    if (a2 == 2) {
      int v5 = 1;
    }
    else {
      int v5 = -1;
    }
    if (a2) {
      int v6 = v5;
    }
    else {
      int v6 = 0;
    }
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v17 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logInfo(v17, "[dk] %s@%d:DK: powerState %u appleBcmWLANPowerState %d", "SetPowerState_Impl", 14739, a2, v6);
      }
    }
    if (v6 == -1)
    {
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v14 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v14, "[dk] %s@%d:DK: SetPowerState: invalid powerstate change request \n");
        }
      }
    }
    else
    {
      uint64_t v7 = (IODispatchQueue *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 3464) + 168))(*(void *)(*((void *)this + 9) + 3464));
      block[0] = _NSConcreteStackBlock;
      block[1] = 1107296256;
      block[2] = ___ZN28AppleBCMWLANBusInterfacePCIe18SetPowerState_ImplEj_block_invoke;
      block[3] = &__block_descriptor_tmp_687;
      block[4] = &v22;
      void block[5] = this;
      unint64_t v21 = v6;
      IODispatchQueue::DispatchSync(v7, block);
    }
  }
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v16 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(v16, "[dk] %s@%d:DK: SetPowerState BusInterfacePCIe %u complete", "SetPowerState_Impl", 14754, a2);
    }
  }
  uint64_t v8 = *(void *)(*((void *)this + 9) + 3464);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 0x40000000;
  unsigned char v18[2] = ___ZN28AppleBCMWLANBusInterfacePCIe18SetPowerState_ImplEj_block_invoke_689;
  v18[3] = &__block_descriptor_tmp_692;
  v18[4] = this;
  unsigned int v19 = a2;
  (*(void (**)(uint64_t, void *))(*(void *)v8 + 112))(v8, v18);
  uint64_t v9 = IOService::SetPowerState((IOService *)this, a2, (OSDispatchMethod)AppleBCMWLANBusInterface::_Dispatch);
  *((_DWORD *)v23 + 6) = v9;
  if ((*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 608))(this))
  {
    uint64_t v10 = (AppleBCMWLANCore *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 608))(this);
    AppleBCMWLANCore::reportSystemPowerState(v10, (unint64_t *)1, a2 == 2, 0);
  }
  unint64_t v11 = *((unsigned int *)v23 + 6);
  _Block_object_dispose(&v22, 8);
  return v11;
}

uint64_t ___ZN28AppleBCMWLANBusInterfacePCIe18SetPowerState_ImplEj_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(OSMetaClassBase **)(a1 + 40);
  int isPortControlAMFMManagedDK = AppleOLYHALPortInterfacePCIe::isPortControlAMFMManagedDK((AppleOLYHALPortInterfacePCIe *)v2[3].__vftable[129].isEqualTo, 0);
  unsigned int v4 = *(_DWORD *)(a1 + 48);
  if (isPortControlAMFMManagedDK) {
    uint64_t result = AppleBCMWLANBusInterfacePCIe::SetPowerStateGatedAMFM(v2, v4, 0);
  }
  else {
    uint64_t result = AppleBCMWLANBusInterfacePCIe::SetPowerStateGated(v2, v4, 0);
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t ___ZN28AppleBCMWLANBusInterfacePCIe18SetPowerState_ImplEj_block_invoke_689(uint64_t a1)
{
  uint64_t v1 = *(AppleBCMWLANBusInterface **)(a1 + 32);
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    if (v2 == 2)
    {
      AppleBCMWLANBusInterfacePCIe::updateContinuousTimeOffset(*(AppleBCMWLANBusInterfacePCIe **)(a1 + 32));
      AppleBCMWLANBusInterface::setBusStateFlags((uint64_t)v1, 4u);
      if ((*(uint64_t (**)(AppleBCMWLANBusInterface *))(*(void *)v1 + 608))(v1))
      {
        if (AppleBCMWLANBusInterface::getLogger(v1))
        {
          AppleBCMWLANBusInterface::getLogger(v1);
          if (CCLogStream::shouldLog())
          {
            uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(v1);
            CCLogStream::logAlert(Logger, "[dk] %s@%d:Trigger BCMCore's ChangePowerState\n", "SetPowerState_Impl_block_invoke", 14762);
          }
        }
        uint64_t v3 = (IOService *)(*(uint64_t (**)(AppleBCMWLANBusInterface *))(*(void *)v1 + 608))(v1);
        IOService::ChangePowerState(v3, 2u, 0);
      }
      else if (*(unsigned char *)(*((void *)v1 + 9) + 3238))
      {
        if (AppleBCMWLANBusInterface::getLogger(v1))
        {
          AppleBCMWLANBusInterface::getLogger(v1);
          if (CCLogStream::shouldLog())
          {
            int v6 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(v1);
            CCLogStream::logAlert(v6, "[dk] %s@%d:Reregistering Bus Driver\n", "SetPowerState_Impl_block_invoke", 14765);
          }
        }
        IOService::RegisterService((IOService *)v1, 0);
      }
    }
  }
  else
  {
    AppleBCMWLANBusInterface::clearBusStateFlags(*(void *)(a1 + 32), 4);
  }
  return 0;
}

OSDictionary *AppleBCMWLANBusInterfacePCIe::updateContinuousTimeOffset(AppleBCMWLANBusInterfacePCIe *this)
{
  int v6 = 0;
  int v2 = OSString::withCString("com.apple.iokit.pm.wakedescription");
  IOService::StateNotificationItemCopy(*(IOService **)(*((void *)this + 9) + 5208), v2, &v6, 0);
  if (v2) {
    ((void (*)(OSString *))v2->release)(v2);
  }
  Object = OSDictionary::getObject(v6, "com.apple.iokit.pm.wakedescription.continuous-time-offset");
  unsigned int v4 = (const OSNumber *)OSMetaClassBase::safeMetaCast(Object, gOSNumberMetaClass);
  atomic_store(OSNumber::unsigned64BitValue(v4), (unint64_t *)(*((void *)this + 9) + 5384));
  uint64_t result = v6;
  if (v6) {
    return (OSDictionary *)((uint64_t (*)(OSDictionary *))v6->release)(v6);
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::SetPowerStateGatedAMFM_Impl(AppleBCMWLANBusInterface *a1, int a2)
{
  kdebug_trace();
  if (AppleBCMWLANBusInterface::getLogger(a1))
  {
    AppleBCMWLANBusInterface::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
      CCLogStream::logCrit(Logger, "[dk] %s@%d:SetPowerStateGatedAMFM state %u\n", "SetPowerStateGatedAMFM_Impl", 14800, a2);
    }
  }
  if (a2 == 1)
  {
    *(void *)(*((void *)a1 + 9) + 4032) = mach_continuous_time();
    IOLog("%s(%d): fLastTimePowerOnTicks=%lld\n", "SetPowerStateGatedAMFM_Impl", 14953, *(void *)(*((void *)a1 + 9) + 4032));
    uint64_t v6 = *((void *)a1 + 9);
    if (*(unsigned char *)(v6 + 4580))
    {
      AppleBCMWLANBusInterfacePCIe::modifyASPM(a1, 3u);
      uint64_t v6 = *((void *)a1 + 9);
    }
    if (*(unsigned char *)(v6 + 4552))
    {
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          unint64_t v21 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logAlert(v21, "[dk] %s@%d:Power on after an unclean low power transition\n", "SetPowerStateGatedAMFM_Impl", 14960);
        }
      }
      *(unsigned char *)(*((void *)a1 + 9) + 4552) = 0;
      (*(void (**)(void, uint64_t))(**(void **)(*((void *)a1 + 9) + 3472) + 88))(*(void *)(*((void *)a1 + 9) + 3472), *((void *)a1 + 9) + 4552);
      *(unsigned char *)(*((void *)a1 + 9) + 3722) = 0;
      *(unsigned char *)(*((void *)a1 + 9) + 4572) = 0;
      AppleBCMWLANBusInterfacePCIe::SetPowerStateGatedAMFM_Impl(PowerState)::firstPowerOnAfterStart = 1;
    }
    else if (*(unsigned char *)(v6 + 1306) {
           && !*(unsigned char *)(v6 + 1304)
    }
           && (AppleBCMWLANBusInterfacePCIe::SetPowerStateGatedAMFM_Impl(PowerState)::firstPowerOnAfterStart & 1) != 0)
    {
      AppleBCMWLANChipBackplane::restoreDeviceState(*(AppleBCMWLANChipBackplane **)(v6 + 3360));
      AppleBCMWLANBusInterfacePCIe::configurePTM(a1, 1);
      *(unsigned char *)(*((void *)a1 + 9) + 3722) = 0;
      *(unsigned char *)(*((void *)a1 + 9) + 4572) = 0;
      uint64_t v9 = *(IODispatchQueue **)(*((void *)a1 + 9) + 3496);
      v32[0] = _NSConcreteStackBlock;
      v32[1] = 0x40000000;
      _OWORD v32[2] = ___ZN28AppleBCMWLANBusInterfacePCIe27SetPowerStateGatedAMFM_ImplE10PowerState_block_invoke_2;
      v32[3] = &__block_descriptor_tmp_711;
      v32[4] = a1;
      IODispatchQueue::DispatchAsync(v9, v32);
      AppleBCMWLANBusInterfacePCIe::enableRingEventSources(a1);
      AppleBCMWLANBusInterfacePCIe::InterruptOccurred_Impl(a1, v10, 0, -1);
      if (AppleBCMWLANBusInterfacePCIe::changeSleepState(a1, 13, 15012))
      {
        *(_DWORD *)(*((void *)a1 + 9) + 4072) = mach_continuous_time();
        *(_DWORD *)(*((void *)a1 + 9) + 5200) = 16;
        *(unsigned char *)(*((void *)a1 + 9) + 5196) = 1;
        (*(void (**)(void, uint64_t, void))(**(void **)(*((void *)a1 + 9) + 312) + 192))(*(void *)(*((void *)a1 + 9) + 312), 1, 0);
        AppleBCMWLANPCIeDoorbell::cancelRing(*(void *)(*((void *)a1 + 9) + 3640));
        AppleBCMWLANChipBackplane::writePCIeDoorbell(*(AppleBCMWLANChipBackplane **)(*((void *)a1 + 9) + 3360), 0x144u, *(_DWORD *)(*((void *)a1 + 9) + 4072));
        *(unsigned char *)(*((void *)a1 + 9) + 3624) = 0;
        (*(void (**)(void, uint64_t))(**(void **)(*((void *)a1 + 9) + 3608) + 120))(*(void *)(*((void *)a1 + 9) + 3608), 1000);
        getClassNameHelper((OSObject *)a1);
        io80211_os_log();
        (*(void (**)(AppleBCMWLANBusInterface *, uint64_t))(*(void *)a1 + 488))(a1, 1);
      }
      AppleOLYHALPortInterfacePCIe::deviceTurnedOnDK(*(AppleOLYHALPortInterfacePCIe **)(*((void *)a1 + 9) + 5184), 0);
    }
    else
    {
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          size_t v22 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          uint64_t v23 = *((void *)a1 + 9);
          uint64_t v24 = "before init";
          if (*(unsigned char *)(v23 + 1306) && !*(unsigned char *)(v23 + 1304)) {
            uint64_t v24 = "after chip start";
          }
          CCLogStream::logCrit(v22, "[dk] %s@%d:Power transition %s\n", "SetPowerStateGatedAMFM_Impl", 14973, v24);
        }
      }
      kdebug_trace();
      *(unsigned char *)(*((void *)a1 + 9) + 3722) = 0;
      *(unsigned char *)(*((void *)a1 + 9) + 4572) = 0;
      AppleBCMWLANBusInterfacePCIe::SetPowerStateGatedAMFM_Impl(PowerState)::firstPowerOnAfterStart = 1;
    }
  }
  else if (a2)
  {
    if (AppleBCMWLANBusInterface::getLogger(a1))
    {
      AppleBCMWLANBusInterface::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        unsigned int v19 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
        CCLogStream::logAlert(v19, "[dk] %s@%d:Bad power state %d\n", "SetPowerStateGatedAMFM_Impl", 15043, a2);
      }
    }
    kdebug_trace();
  }
  else
  {
    *(unsigned char *)(*((void *)a1 + 9) + 4572) = 1;
    for (uint64_t i = *((void *)a1 + 9); *(unsigned char *)(i + 4553); uint64_t i = *((void *)a1 + 9))
      (*(void (**)(void))(**(void **)(i + 3472) + 80))(*(void *)(i + 3472));
    *(unsigned char *)(i + 3722) = 1;
    *(unsigned char *)(*((void *)a1 + 9) + 4554) = 0;
    int v5 = (unsigned char *)*((void *)a1 + 9);
    if (v5[4556])
    {
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          int v20 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logAlert(v20, "[dk] %s@%d:Acking a pending external reset request\n", "SetPowerStateGatedAMFM_Impl", 14817);
        }
      }
      AppleBCMWLANBusInterfacePCIe::nanoPowerCycleGated((OSObject *)a1);
      *(unsigned char *)(*((void *)a1 + 9) + 4552) = 1;
    }
    else if (v5[1306] && !v5[1304])
    {
      if ((*(unsigned int (**)(AppleBCMWLANBusInterface *))(*(void *)a1 + 208))(a1))
      {
        if (AppleBCMWLANBusInterface::getLogger(a1))
        {
          AppleBCMWLANBusInterface::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            IOAddressSegment v26 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
            CCLogStream::logAlert(v26, "[dk] %s@%d:Skip Power off handshake since FW is already trapped.\n", "SetPowerStateGatedAMFM_Impl", 14834);
          }
        }
        *(unsigned char *)(*((void *)a1 + 9) + 4552) = 1;
      }
      else
      {
        if (AppleBCMWLANBusInterfacePCIe::retainCTS(a1, 14842, 2) == -536870186)
        {
          uint64_t v12 = *((void *)a1 + 9);
          if (!*(_DWORD *)(v12 + 3724))
          {
            *(unsigned char *)(v12 + 2871) = 1;
            if (AppleBCMWLANBusInterface::getLogger(a1))
            {
              AppleBCMWLANBusInterface::getLogger(a1);
              if (CCLogStream::shouldLog())
              {
                uint64_t v29 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
                CCLogStream::logAlert(v29, "[dk] %s@%d:Deep Sleep crash power off Unit test\n", "SetPowerStateGatedAMFM_Impl", 14849);
              }
            }
            *(_DWORD *)(*((void *)a1 + 9) + 3724) = 1000;
            uint64_t v12 = *((void *)a1 + 9);
          }
          if (*(unsigned char *)(v12 + 2869))
          {
            if (AppleBCMWLANBusInterface::getLogger(a1))
            {
              AppleBCMWLANBusInterface::getLogger(a1);
              if (CCLogStream::shouldLog())
              {
                unint64_t v28 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
                CCLogStream::logAlert(v28, "[dk] %s@%d:FW Failed to respond with DS Exit - hit doorbell\n", "SetPowerStateGatedAMFM_Impl", 14855);
              }
            }
            AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(a1, 0);
            AppleBCMWLANBusInterfacePCIe::changeDeepSleepStateSetClear((uint64_t)a1, v13, 1, 0);
            AppleBCMWLANBusInterfacePCIe::hitDoorbell(a1, v14);
            uint64_t v12 = *((void *)a1 + 9);
          }
          *(unsigned char *)(v12 + 4552) = 1;
          (*(void (**)(AppleBCMWLANBusInterface *, uint64_t, const char *))(*(void *)a1 + 1152))(a1, 3825173276, "DS exit timed out");
          if (AppleBCMWLANBusInterface::getLogger(a1))
          {
            AppleBCMWLANBusInterface::getLogger(a1);
            if (CCLogStream::shouldLog())
            {
              __int16 v27 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
              CCLogStream::logCrit(v27, "[dk] %s@%d:Failed to get RTS\n", "SetPowerStateGatedAMFM_Impl", 14864);
            }
          }
          getClassNameHelper((OSObject *)a1);
          io80211_os_log();
          (*(void (**)(AppleBCMWLANBusInterface *))(*(void *)a1 + 496))(a1);
        }
        else
        {
          getClassNameHelper((OSObject *)a1);
          io80211_os_log();
          (*(void (**)(AppleBCMWLANBusInterface *))(*(void *)a1 + 496))(a1);
          if (AppleBCMWLANBusInterfacePCIe::changeSleepState(a1, 11, 14874))
          {
            AppleBCMWLANBusInterfacePCIe::writeH2DMailbox(a1, 1);
            *(unsigned char *)(*((void *)a1 + 9) + 3721) = 1;
            ++*(_DWORD *)(*((void *)a1 + 9) + 1240);
            void block[5] = 0xAAAAAAAAAAAAAAAALL;
            clock_interval_to_deadline();
            (*(void (**)(void, uint64_t, unint64_t))(**(void **)(*((void *)a1 + 9) + 3472)
                                                                      + 80))(*(void *)(*((void *)a1 + 9) + 3472), *((void *)a1 + 9) + 1736, 0xAAAAAAAAAAAAAAAALL);
            --*(_DWORD *)(*((void *)a1 + 9) + 1240);
            *(unsigned char *)(*((void *)a1 + 9) + 3721) = 0;
            *(unsigned char *)(*((void *)a1 + 9) + 1244) = 0;
            if (*(_DWORD *)(*((void *)a1 + 9) + 1224) != 12)
            {
              if (AppleBCMWLANBusInterface::getLogger(a1))
              {
                AppleBCMWLANBusInterface::getLogger(a1);
                if (CCLogStream::shouldLog())
                {
                  uint64_t v30 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
                  CCLogStream::logCrit(v30, "[dk] %s@%d:Power state did not change to host sleep within time limit\n", "SetPowerStateGatedAMFM_Impl", 14901);
                }
              }
              (*(void (**)(AppleBCMWLANBusInterface *, uint64_t, const char *))(*(void *)a1 + 1152))(a1, 3825173273, "D3 ack timed out");
              uint64_t v15 = (unsigned char *)*((void *)a1 + 9);
              if (v15[4578])
              {
                v15[4552] = 0;
                *(unsigned char *)(*((void *)a1 + 9) + 3722) = 0;
                *(unsigned char *)(*((void *)a1 + 9) + 4572) = 0;
                if (AppleBCMWLANBusInterface::getLogger(a1))
                {
                  AppleBCMWLANBusInterface::getLogger(a1);
                  if (CCLogStream::shouldLog())
                  {
                    unsigned int v31 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
                    CCLogStream::logAlert(v31, "[dk] %s@%d:Force a SoCRAM Collection\n", "SetPowerStateGatedAMFM_Impl", 14907);
                  }
                }
                uint64_t FaultReporter = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(a1);
                CCFaultReporter::reportFault(FaultReporter, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANBusInterfacePCIe.cpp", 0x3A3Eu, "SetPowerStateGatedAMFM_Impl", 0, *(_DWORD *)(*((void *)a1 + 9) + 4568), "%s", *(const char **)(*((void *)a1 + 9) + 4560));
                (*(void (**)(AppleBCMWLANBusInterface *, uint64_t, const char *))(*(void *)a1 + 1152))(a1, 3825173273, "D3 ack timed out -> refer to previous capture for SoCRAM");
                uint64_t v15 = (unsigned char *)*((void *)a1 + 9);
              }
              v15[3722] = 1;
              *(unsigned char *)(*((void *)a1 + 9) + 4552) = 1;
              *(unsigned char *)(*((void *)a1 + 9) + 4572) = 1;
            }
          }
          else
          {
            *(unsigned char *)(*((void *)a1 + 9) + 4552) = 1;
          }
        }
        AppleBCMWLANChipBackplane::saveDeviceState(*(AppleBCMWLANChipBackplane **)(*((void *)a1 + 9) + 3360));
        AppleBCMWLANBusInterfacePCIe::releaseCTS(a1, 14922);
      }
    }
    else if (AppleBCMWLANBusInterface::getLogger(a1))
    {
      AppleBCMWLANBusInterface::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t v25 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
        CCLogStream::logCrit(v25, "[dk] %s@%d:Power transition before init\n", "SetPowerStateGatedAMFM_Impl", 14826);
      }
    }
    AppleBCMWLANBusInterfacePCIe::disableRingEventSources(a1);
    uint64_t v7 = *((void *)a1 + 9);
    if (*(void *)(v7 + 3264))
    {
      uint64_t v8 = *(IODispatchQueue **)(v7 + 3496);
      block[0] = _NSConcreteStackBlock;
      block[1] = 0x40000000;
      block[2] = ___ZN28AppleBCMWLANBusInterfacePCIe27SetPowerStateGatedAMFM_ImplE10PowerState_block_invoke;
      block[3] = &__block_descriptor_tmp_706;
      block[4] = a1;
      IODispatchQueue::DispatchAsync(v8, block);
      uint64_t v7 = *((void *)a1 + 9);
    }
    *(_DWORD *)(v7 + 1224) = 12;
    (*(void (**)(void, uint64_t))(**(void **)(*((void *)a1 + 9) + 3472) + 88))(*(void *)(*((void *)a1 + 9) + 3472), *((void *)a1 + 9) + 4552);
  }
  if (AppleBCMWLANBusInterface::getLogger(a1))
  {
    AppleBCMWLANBusInterface::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      uint64_t v18 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
      CCLogStream::logCrit(v18, "[dk] %s@%d:SetPowerStateGatedAMFM complete\n", "SetPowerStateGatedAMFM_Impl", 15053);
    }
  }
  kdebug_trace();
  return 0;
}

uint64_t ___ZN28AppleBCMWLANBusInterfacePCIe27SetPowerStateGatedAMFM_ImplE10PowerState_block_invoke(uint64_t a1)
{
  return IODispatchSource::SetEnable(*(IODispatchSource **)(*(void *)(*(void *)(a1 + 32) + 72) + 3264), 0, 0);
}

uint64_t ___ZN28AppleBCMWLANBusInterfacePCIe27SetPowerStateGatedAMFM_ImplE10PowerState_block_invoke_2(uint64_t a1)
{
  return IODispatchSource::SetEnable(*(IODispatchSource **)(*(void *)(*(void *)(a1 + 32) + 72) + 3264), 1, 0);
}

uint64_t AppleBCMWLANBusInterfacePCIe::InterruptOccurred_Impl(AppleBCMWLANBusInterfacePCIe *this, OSAction *a2, uint64_t a3, uint64_t a4)
{
  kdebug_trace();
  AppleBCMWLANBusInterface::updateInterruptStats(this, a4, a3);
  uint64_t v7 = *((void *)this + 9);
  if (*(unsigned char *)(v7 + 4801)) {
    uint64_t v8 = *(void (**)(void))(**(void **)(v7 + 3488) + 72);
  }
  else {
    uint64_t v8 = *(void (**)(void))(**(void **)(v7 + 3472) + 72);
  }
  v8();
  return kdebug_trace();
}

uint64_t AppleBCMWLANBusInterfacePCIe::SetPowerStateGated_Impl(AppleBCMWLANBusInterface *a1, int a2)
{
  kdebug_trace();
  uint64_t v4 = *((void *)a1 + 9);
  if (*(_DWORD *)(v4 + 2844) == 2)
  {
    if (!*(unsigned char *)(v4 + 1306)
      || *(unsigned char *)(v4 + 1304)
      || a2 == 1 && (AppleBCMWLANBusInterfacePCIe::SetPowerStateGated_Impl(PowerState)::firstPowerOnAfterStart & 1) == 0)
    {
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          uint64_t v37 = *((void *)a1 + 9);
          int v38 = "before init";
          if (*(unsigned char *)(v37 + 1306) && !*(unsigned char *)(v37 + 1304)) {
            int v38 = "after chip start";
          }
          CCLogStream::logCrit(Logger, "[dk] %s@%d:Power transition %s\n", "SetPowerStateGated_Impl", 15110, v38);
        }
      }
      if (a2 == 1)
      {
        *(unsigned char *)(*((void *)a1 + 9) + 3873) = 1;
        *(unsigned char *)(*((void *)a1 + 9) + 3722) = 0;
        AppleBCMWLANBusInterfacePCIe::SetPowerStateGated_Impl(PowerState)::firstPowerOnAfterStart = 1;
      }
      goto LABEL_49;
    }
LABEL_23:
    if (a2 != 1)
    {
      if (a2)
      {
        kdebug_trace();
        goto LABEL_46;
      }
      *(unsigned char *)(*((void *)a1 + 9) + 4572) = 1;
      for (uint64_t i = *((void *)a1 + 9); *(unsigned char *)(i + 4553); uint64_t i = *((void *)a1 + 9))
        (*(void (**)(void))(**(void **)(i + 3472) + 80))(*(void *)(i + 3472));
      *(unsigned char *)(i + 3722) = 1;
      int v7 = AppleBCMWLANBusInterfacePCIe::retainCTS(a1, 15139, 2);
      uint64_t v8 = *((void *)a1 + 9);
      if (*(unsigned char *)(v8 + 4803) || *(unsigned char *)(v8 + 3706))
      {
        if (AppleBCMWLANBusInterface::getLogger(a1))
        {
          AppleBCMWLANBusInterface::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            int v52 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
            CCLogStream::logAlert(v52, "[dk] %s@%d:handling of link down pending\n", "SetPowerStateGated_Impl", 15143);
          }
        }
        uint64_t v9 = *((void *)a1 + 9);
        if (*(_DWORD *)(v9 + 2844) == 2)
        {
LABEL_33:
          *(_DWORD *)(v9 + 1224) = 12;
          goto LABEL_46;
        }
        uint64_t v12 = a1;
        __int16 v13 = 15148;
        goto LABEL_40;
      }
      if (v7 == -536870186)
      {
        if (!*(_DWORD *)(v8 + 3724))
        {
          *(unsigned char *)(v8 + 2871) = 1;
          if (AppleBCMWLANBusInterface::getLogger(a1))
          {
            AppleBCMWLANBusInterface::getLogger(a1);
            if (CCLogStream::shouldLog())
            {
              int v57 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
              CCLogStream::logAlert(v57, "[dk] %s@%d:Deep Sleep crash power off Unit test\n", "SetPowerStateGated_Impl", 15160);
            }
          }
          *(_DWORD *)(*((void *)a1 + 9) + 3724) = 1000;
          uint64_t v8 = *((void *)a1 + 9);
        }
        if (*(unsigned char *)(v8 + 2869))
        {
          if (AppleBCMWLANBusInterface::getLogger(a1))
          {
            AppleBCMWLANBusInterface::getLogger(a1);
            if (CCLogStream::shouldLog())
            {
              int v55 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
              CCLogStream::logAlert(v55, "[dk] %s@%d:FW Failed to respond with DS Exit - hit doorbell\n", "SetPowerStateGated_Impl", 15165);
            }
          }
          AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(a1, 0);
          AppleBCMWLANBusInterfacePCIe::changeDeepSleepStateSetClear((uint64_t)a1, v17, 1, 0);
          AppleBCMWLANBusInterfacePCIe::hitDoorbell(a1, v18);
        }
        getClassNameHelper((OSObject *)a1);
        io80211_os_log();
        (*(void (**)(AppleBCMWLANBusInterface *))(*(void *)a1 + 496))(a1);
        AppleBCMWLANBusInterfacePCIe::disableRingEventSources(a1);
        unsigned int v19 = *(IODispatchQueue **)(*((void *)a1 + 9) + 3496);
        block[0] = _NSConcreteStackBlock;
        block[1] = 0x40000000;
        block[2] = ___ZN28AppleBCMWLANBusInterfacePCIe23SetPowerStateGated_ImplE10PowerState_block_invoke;
        block[3] = &__block_descriptor_tmp_718;
        block[4] = a1;
        IODispatchQueue::DispatchAsync(v19, block);
        AppleBCMWLANBusInterfacePCIe::releaseCTS(a1, 15184);
        uint64_t v20 = *((void *)a1 + 9);
        if (*(_DWORD *)(v20 + 2844) == 2) {
          *(_DWORD *)(v20 + 1224) = 12;
        }
        else {
          AppleBCMWLANBusInterfacePCIe::logPowerStateTransition(a1, 0, 1, 15186);
        }
        if (AppleBCMWLANBusInterface::getLogger(a1))
        {
          AppleBCMWLANBusInterface::getLogger(a1);
          if (CCLogStream::shouldLog())
          {
            int v54 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
            CCLogStream::logCrit(v54, "[dk] %s@%d:Failed to get RTS", "SetPowerStateGated_Impl", 15192);
          }
        }
        if ((*(unsigned int (**)(AppleBCMWLANBusInterface *))(*(void *)a1 + 208))(a1))
        {
          if (AppleBCMWLANBusInterface::getLogger(a1))
          {
            AppleBCMWLANBusInterface::getLogger(a1);
            if (CCLogStream::shouldLog())
            {
              int v56 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
              CCLogStream::logAlert(v56, "[dk] %s@%d:FW is trapped, skipping S2R handshake\n", "SetPowerStateGated_Impl", 15196);
            }
          }
          AppleBCMWLANChipBackplane::saveDeviceState(*(AppleBCMWLANChipBackplane **)(*((void *)a1 + 9) + 3360));
          goto LABEL_46;
        }
      }
      else
      {
        getClassNameHelper((OSObject *)a1);
        io80211_os_log();
        (*(void (**)(AppleBCMWLANBusInterface *))(*(void *)a1 + 496))(a1);
        if (*(_DWORD *)(*((void *)a1 + 9) + 2844) != 2
          || (AppleBCMWLANBusInterfacePCIe::changeSleepState(a1, 11, 15215) & 1) != 0)
        {
          AppleBCMWLANBusInterfacePCIe::writeH2DMailbox(a1, 1);
          *(unsigned char *)(*((void *)a1 + 9) + 3721) = 1;
          ++*(_DWORD *)(*((void *)a1 + 9) + 1240);
          v61[5] = 0xAAAAAAAAAAAAAAAALL;
          clock_interval_to_deadline();
          int v22 = (*(uint64_t (**)(void, uint64_t, unint64_t))(**(void **)(*((void *)a1 + 9) + 3472)
                                                                             + 80))(*(void *)(*((void *)a1 + 9) + 3472), *((void *)a1 + 9) + 1736, 0xAAAAAAAAAAAAAAAALL);
          --*(_DWORD *)(*((void *)a1 + 9) + 1240);
          *(unsigned char *)(*((void *)a1 + 9) + 3721) = 0;
          *(unsigned char *)(*((void *)a1 + 9) + 1244) = 0;
          AppleBCMWLANBusInterfacePCIe::disableRingEventSources(a1);
          uint64_t v23 = *(IODispatchQueue **)(*((void *)a1 + 9) + 3496);
          v61[0] = _NSConcreteStackBlock;
          v61[1] = 0x40000000;
          v61[2] = ___ZN28AppleBCMWLANBusInterfacePCIe23SetPowerStateGated_ImplE10PowerState_block_invoke_3;
          v61[3] = &__block_descriptor_tmp_722;
          v61[4] = a1;
          IODispatchQueue::DispatchAsync(v23, v61);
          uint64_t v24 = *((void *)a1 + 9);
          if (!*(unsigned char *)(v24 + 4803))
          {
            if (v22)
            {
              if (v22 == -536870186)
              {
                if ((*(uint64_t (**)(AppleBCMWLANBusInterface *))(*(void *)a1 + 208))(a1))
                {
                  if (AppleBCMWLANBusInterface::getLogger(a1))
                  {
                    AppleBCMWLANBusInterface::getLogger(a1);
                    if (CCLogStream::shouldLog())
                    {
                      uint64_t v25 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
                      CCLogStream::logAlert(v25, "[dk] %s@%d:Device trapped\n");
                    }
                  }
                }
                else
                {
                  AppleBCMWLANBusInterfacePCIe::nanoPowerCycleGated((OSObject *)a1);
                  *(unsigned char *)(*((void *)a1 + 9) + 4804) = 1;
                  if (AppleBCMWLANBusInterface::getLogger(a1))
                  {
                    AppleBCMWLANBusInterface::getLogger(a1);
                    if (CCLogStream::shouldLog())
                    {
                      int v59 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
                      CCLogStream::logAlert(v59, "[dk] %s@%d:D3 inform timed out\n");
                    }
                  }
                }
              }
              else if (AppleBCMWLANBusInterface::getLogger(a1))
              {
                AppleBCMWLANBusInterface::getLogger(a1);
                if (CCLogStream::shouldLog())
                {
                  int v32 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
                  CCLogStream::logCrit(v32, "[dk] %s@%d: Line#: %d  Unexpected error (0x%x) from commandSleep\n", "SetPowerStateGated_Impl", 15281, 15281, v22);
                }
              }
            }
            AppleBCMWLANBusInterfacePCIe::releaseCTS(a1, 15284);
            AppleBCMWLANChipBackplane::saveDeviceState(*(AppleBCMWLANChipBackplane **)(*((void *)a1 + 9) + 3360));
            uint64_t v24 = *((void *)a1 + 9);
          }
          if (*(_DWORD *)(v24 + 2844) == 2)
          {
            if (*(_DWORD *)(v24 + 1224) == 12) {
              goto LABEL_46;
            }
            if (AppleBCMWLANBusInterface::getLogger(a1))
            {
              AppleBCMWLANBusInterface::getLogger(a1);
              if (CCLogStream::shouldLog())
              {
                int v58 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
                CCLogStream::logAlert(v58, "[dk] %s@%d:sleep state was not moved to host sleep\n", "SetPowerStateGated_Impl", 15292);
              }
            }
            uint64_t v9 = *((void *)a1 + 9);
            goto LABEL_33;
          }
          uint64_t v12 = a1;
          __int16 v13 = 15296;
LABEL_40:
          AppleBCMWLANBusInterfacePCIe::logPowerStateTransition(v12, 0, 1, v13);
          goto LABEL_46;
        }
        getClassNameHelper((OSObject *)a1);
        io80211_os_log();
        (*(void (**)(AppleBCMWLANBusInterface *))(*(void *)a1 + 496))(a1);
        AppleBCMWLANBusInterfacePCIe::disableRingEventSources(a1);
        unsigned int v31 = *(IODispatchQueue **)(*((void *)a1 + 9) + 3496);
        v62[0] = _NSConcreteStackBlock;
        v62[1] = 0x40000000;
        v62[2] = ___ZN28AppleBCMWLANBusInterfacePCIe23SetPowerStateGated_ImplE10PowerState_block_invoke_2;
        v62[3] = &__block_descriptor_tmp_721;
        v62[4] = a1;
        IODispatchQueue::DispatchAsync(v31, v62);
        AppleBCMWLANBusInterfacePCIe::releaseCTS(a1, 15231);
        AppleBCMWLANChipBackplane::saveDeviceState(*(AppleBCMWLANChipBackplane **)(*((void *)a1 + 9) + 3360));
        if ((*(uint64_t (**)(AppleBCMWLANBusInterface *))(*(void *)a1 + 208))(a1)) {
          goto LABEL_46;
        }
      }
      AppleBCMWLANBusInterfacePCIe::nanoPowerCycleGated((OSObject *)a1);
      *(unsigned char *)(*((void *)a1 + 9) + 4804) = 1;
      goto LABEL_46;
    }
    *(void *)(*((void *)a1 + 9) + 4032) = mach_continuous_time();
    IOLog("%s(%d): fLastTimePowerOnTicks=%lld\n", "SetPowerStateGated_Impl", 15308, *(void *)(*((void *)a1 + 9) + 4032));
    *(unsigned char *)(*((void *)a1 + 9) + 4572) = 0;
    uint64_t v10 = *((void *)a1 + 9);
    if (*(unsigned char *)(v10 + 4803))
    {
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          unint64_t v11 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logAlert(v11, "[dk] %s@%d:link up pending, skipping power on\n");
        }
      }
    }
    else if (*(unsigned char *)(v10 + 4804))
    {
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          int v53 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logAlert(v53, "[dk] %s@%d:D3 inform missing before S2R, skipping power on\n", "SetPowerStateGated_Impl", 15316);
        }
      }
      *(unsigned char *)(*((void *)a1 + 9) + 4804) = 0;
      *(unsigned char *)(*((void *)a1 + 9) + 3722) = 0;
      uint64_t FaultReporter = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(a1);
      CCFaultReporter::reportFault(FaultReporter, 9u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANBusInterfacePCIe.cpp", 0x3BDAu, "SetPowerStateGated_Impl", 0, -469794036, 0);
    }
    else
    {
      if (!*(unsigned char *)(v10 + 4076))
      {
        AppleBCMWLANBusInterfacePCIe::retainCTS(a1, 15327, 0);
        uint64_t v10 = *((void *)a1 + 9);
      }
      if (!*(unsigned char *)(v10 + 3706))
      {
        AppleBCMWLANChipBackplane::restoreDeviceState(*(AppleBCMWLANChipBackplane **)(v10 + 3360));
        *(unsigned char *)(*((void *)a1 + 9) + 3722) = 0;
        IOAddressSegment v26 = *(IODispatchQueue **)(*((void *)a1 + 9) + 3496);
        v60[0] = _NSConcreteStackBlock;
        v60[1] = 0x40000000;
        unsigned int v60[2] = ___ZN28AppleBCMWLANBusInterfacePCIe23SetPowerStateGated_ImplE10PowerState_block_invoke_4;
        v60[3] = &__block_descriptor_tmp_730;
        v60[4] = a1;
        IODispatchQueue::DispatchAsync(v26, v60);
        AppleBCMWLANBusInterfacePCIe::enableRingEventSources(a1);
        AppleBCMWLANBusInterfacePCIe::InterruptOccurred_Impl(a1, v27, 0, -1);
        uint64_t v28 = *((void *)a1 + 9);
        if (*(_DWORD *)(v28 + 2844) == 2)
        {
          if (!AppleBCMWLANBusInterfacePCIe::changeSleepState(a1, 13, 15358)) {
            goto LABEL_46;
          }
          *(_DWORD *)(*((void *)a1 + 9) + 4072) = mach_continuous_time();
          *(_DWORD *)(*((void *)a1 + 9) + 5200) = 16;
          *(unsigned char *)(*((void *)a1 + 9) + 5196) = 1;
          (*(void (**)(void, uint64_t, void))(**(void **)(*((void *)a1 + 9) + 312) + 192))(*(void *)(*((void *)a1 + 9) + 312), 1, 0);
          AppleBCMWLANPCIeDoorbell::cancelRing(*(void *)(*((void *)a1 + 9) + 3640));
          AppleBCMWLANChipBackplane::writePCIeDoorbell(*(AppleBCMWLANChipBackplane **)(*((void *)a1 + 9) + 3360), 0x144u, *(_DWORD *)(*((void *)a1 + 9) + 4072));
          *(unsigned char *)(*((void *)a1 + 9) + 3624) = 0;
          (*(void (**)(void, uint64_t))(**(void **)(*((void *)a1 + 9) + 3608) + 120))(*(void *)(*((void *)a1 + 9) + 3608), 1000);
        }
        else
        {
          if (*(unsigned char *)(v28 + 4076))
          {
            AppleBCMWLANBusInterfacePCIe::logPowerStateTransition(a1, 3, 1, 15385);
            uint64_t v30 = *((void *)a1 + 9);
            if (*(_DWORD *)(v30 + 2844) != 2)
            {
              *(unsigned char *)(v30 + 1232) = 0;
              AppleOLYHALPortInterfacePCIe::setDeviceWakeDK(*(AppleOLYHALPortInterfacePCIe **)(*((void *)a1 + 9) + 5184), 0, 0);
            }
          }
          else
          {
            AppleBCMWLANBusInterfacePCIe::releaseCTS(a1, 15381);
          }
          AppleBCMWLANBusInterfacePCIe::changeDeepSleepStateSetClear((uint64_t)a1, v29, 1, 0);
          if (*(unsigned char *)(*((void *)a1 + 9) + 4076))
          {
            *(_DWORD *)(*((void *)a1 + 9) + 4072) = mach_continuous_time();
            AppleBCMWLANChipBackplane::writePCIeDoorbell(*(AppleBCMWLANChipBackplane **)(*((void *)a1 + 9) + 3360), 0x144u, *(_DWORD *)(*((void *)a1 + 9) + 4072));
          }
        }
        getClassNameHelper((OSObject *)a1);
        io80211_os_log();
        (*(void (**)(AppleBCMWLANBusInterface *, uint64_t))(*(void *)a1 + 488))(a1, 1);
        goto LABEL_46;
      }
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          unint64_t v21 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          CCLogStream::logAlert(v21, "[dk] %s@%d:link down detected, skipping power on\n");
        }
      }
    }
LABEL_46:
    uint64_t v15 = *((void *)a1 + 9);
    if (*(_DWORD *)(v15 + 2844) != 2)
    {
      *(_DWORD *)(v15 + 1224) = a2;
      IOStateReporter::setChannelState(*(IOStateReporter **)(*((void *)a1 + 9) + 3176), 0x507772537465uLL, gPowerStateIDs[*(int *)(*((void *)a1 + 9) + 1224)]);
      if (AppleBCMWLANBusInterface::getLogger(a1))
      {
        AppleBCMWLANBusInterface::getLogger(a1);
        if (CCLogStream::shouldLog())
        {
          int v49 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
          uint64_t v50 = 0;
          int v51 = "UNKNOWN";
          while (kPowerStateMapping[v50] != *(_DWORD *)(*((void *)a1 + 9) + 1224))
          {
            v50 += 4;
            if (v50 == 56) {
              goto LABEL_147;
            }
          }
          int v51 = *(const char **)&kPowerStateMapping[v50 + 2];
LABEL_147:
          CCLogStream::logCritIf(v49, 2uLL, "[dk] %s@%d:Completed, now: %s\n", "SetPowerStateGated_Impl", 15428, v51);
        }
      }
    }
    goto LABEL_49;
  }
  if (AppleBCMWLANBusInterface::getLogger(a1))
  {
    AppleBCMWLANBusInterface::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      unsigned int v33 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
      uint64_t v34 = 0;
      unsigned int v35 = "UNKNOWN";
      while (kPowerStateMapping[v34] != *(_DWORD *)(*((void *)a1 + 9) + 1224))
      {
        v34 += 4;
        if (v34 == 56) {
          goto LABEL_129;
        }
      }
      unsigned int v35 = *(const char **)&kPowerStateMapping[v34 + 2];
LABEL_129:
      uint64_t v45 = 0;
      int v46 = "UNKNOWN";
      while (kPowerStateMapping[v45] != a2)
      {
        v45 += 4;
        if (v45 == 56) {
          goto LABEL_134;
        }
      }
      int v46 = *(const char **)&kPowerStateMapping[v45 + 2];
LABEL_134:
      CCLogStream::logCritIf(v33, 2uLL, "[dk] %s@%d:Current: %s Prev This Transition: %s\n", "SetPowerStateGated_Impl", 15080, v35, v46);
    }
  }
  uint64_t v5 = *((void *)a1 + 9);
  if (*(unsigned char *)(v5 + 1306)
    && !*(unsigned char *)(v5 + 1304)
    && (a2 != 1 || (AppleBCMWLANBusInterfacePCIe::SetPowerStateGated_Impl(PowerState)::firstPowerOnAfterStart & 1) != 0))
  {
    AppleBCMWLANBusInterfacePCIe::logPowerStateTransition(a1, a2, 1, 15106);
    goto LABEL_23;
  }
  if (AppleBCMWLANBusInterface::getLogger(a1))
  {
    AppleBCMWLANBusInterface::getLogger(a1);
    if (CCLogStream::shouldLog())
    {
      int v39 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
      uint64_t v40 = *((void *)a1 + 9);
      int v41 = "before init";
      if (*(unsigned char *)(v40 + 1306) && !*(unsigned char *)(v40 + 1304)) {
        int v41 = "after chip start";
      }
      uint64_t v42 = 0;
      int v43 = *(_DWORD *)(v40 + 1224);
      int v44 = "UNKNOWN";
      while (kPowerStateMapping[v42] != v43)
      {
        v42 += 4;
        if (v42 == 56) {
          goto LABEL_136;
        }
      }
      int v44 = *(const char **)&kPowerStateMapping[v42 + 2];
LABEL_136:
      uint64_t v47 = 0;
      int v48 = "UNKNOWN";
      while (kPowerStateMapping[v47] != a2)
      {
        v47 += 4;
        if (v47 == 56) {
          goto LABEL_141;
        }
      }
      int v48 = *(const char **)&kPowerStateMapping[v47 + 2];
LABEL_141:
      CCLogStream::logCrit(v39, "[dk] %s@%d:Power transition %s (%s --> %s)\n", "SetPowerStateGated_Impl", 15088, v41, v44, v48);
    }
  }
  *(_DWORD *)(*((void *)a1 + 9) + 1224) = a2;
  if (a2 == 1)
  {
    *(unsigned char *)(*((void *)a1 + 9) + 3873) = 1;
    *(unsigned char *)(*((void *)a1 + 9) + 3722) = 0;
    AppleBCMWLANBusInterfacePCIe::SetPowerStateGated_Impl(PowerState)::firstPowerOnAfterStart = 1;
  }
LABEL_49:
  kdebug_trace();
  return 0;
}

uint64_t ___ZN28AppleBCMWLANBusInterfacePCIe23SetPowerStateGated_ImplE10PowerState_block_invoke(uint64_t a1)
{
  return IODispatchSource::SetEnable(*(IODispatchSource **)(*(void *)(*(void *)(a1 + 32) + 72) + 3264), 0, 0);
}

uint64_t ___ZN28AppleBCMWLANBusInterfacePCIe23SetPowerStateGated_ImplE10PowerState_block_invoke_2(uint64_t a1)
{
  return IODispatchSource::SetEnable(*(IODispatchSource **)(*(void *)(*(void *)(a1 + 32) + 72) + 3264), 0, 0);
}

uint64_t ___ZN28AppleBCMWLANBusInterfacePCIe23SetPowerStateGated_ImplE10PowerState_block_invoke_3(uint64_t a1)
{
  return IODispatchSource::SetEnable(*(IODispatchSource **)(*(void *)(*(void *)(a1 + 32) + 72) + 3264), 0, 0);
}

uint64_t ___ZN28AppleBCMWLANBusInterfacePCIe23SetPowerStateGated_ImplE10PowerState_block_invoke_4(uint64_t a1)
{
  return IODispatchSource::SetEnable(*(IODispatchSource **)(*(void *)(*(void *)(a1 + 32) + 72) + 3264), 1, 0);
}

uint64_t AppleBCMWLANBusInterfacePCIe::FWSetupDone(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t result = AppleBCMWLANPCIeSkywalk::enableAllSubmissionQueue(*(AppleBCMWLANPCIeSkywalk **)(*((void *)this + 9) + 4472));
  *(unsigned char *)(*((void *)this + 9) + 3723) = 0;
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::FWSetupDone(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t result = AppleBCMWLANPCIeSkywalk::enableAllSubmissionQueue(*(AppleBCMWLANPCIeSkywalk **)(*((void *)this + 3) + 4472));
  *(unsigned char *)(*((void *)this + 3) + 3723) = 0;
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::watchdogPowerCheckBypass(AppleBCMWLANBusInterfacePCIe *this)
{
  return *(unsigned __int8 *)(*((void *)this + 9) + 4554);
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::watchdogPowerCheckBypass(AppleBCMWLANBusInterfacePCIe *this)
{
  return *(unsigned __int8 *)(*((void *)this + 3) + 4554);
}

BOOL AppleBCMWLANBusInterfacePCIe::isPowerOn(AppleBCMWLANBusInterfacePCIe *this)
{
  int v2 = *(AppleOLYHALPortInterfacePCIe **)(*((void *)this + 9) + 5184);
  if (v2 && AppleOLYHALPortInterfacePCIe::isPortControlAMFMManagedDK(v2, 0)) {
    return *(unsigned char *)(*((void *)this + 9) + 3722) == 0;
  }
  else {
    return (AppleBCMWLANBusInterface::getBusState(this) >> 2) & 1;
  }
}

BOOL non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::isPowerOn(AppleBCMWLANBusInterfacePCIe *this)
{
  return AppleBCMWLANBusInterfacePCIe::isPowerOn((AppleBCMWLANBusInterfacePCIe *)((char *)this - 48));
}

uint64_t AppleBCMWLANBusInterfacePCIe::isBusRegisteredAndPoweredOn(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 9) + 3472);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000;
  v3[2] = ___ZN28AppleBCMWLANBusInterfacePCIe27isBusRegisteredAndPoweredOnEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_732;
  v3[4] = this;
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v1 + 72))(v1, v3);
}

uint64_t ___ZN28AppleBCMWLANBusInterfacePCIe27isBusRegisteredAndPoweredOnEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 72);
  if (*(unsigned char *)(v2 + 3237)
    && (char BusState = AppleBCMWLANBusInterface::getBusState(*(AppleBCMWLANBusInterface **)(a1 + 32)),
        uint64_t v2 = *(void *)(v1 + 72),
        (BusState & 4) != 0))
  {
    char v5 = 0;
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = 3758097112;
    char v5 = 1;
  }
  *(unsigned char *)(v2 + 3238) = v5;
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::isBusRegisteredAndPoweredOn(AppleBCMWLANBusInterfacePCIe *this)
{
  return AppleBCMWLANBusInterfacePCIe::isBusRegisteredAndPoweredOn((AppleBCMWLANBusInterfacePCIe *)((char *)this - 48));
}

uint64_t AppleBCMWLANBusInterfacePCIe::dumpRegisters(AppleBCMWLANBusInterfacePCIe *this)
{
  (*(void (**)(AppleBCMWLANBusInterfacePCIe *, const char *, uint64_t))(*(void *)this + 1208))(this, "dumpRegisters", 15614);
  if (AppleBCMWLANBusInterfacePCIe::isBusAccessible(this, 1))
  {
    uint64_t v2 = (char *)IOMallocZeroData();
    if (v2)
    {
      uint64_t v3 = v2;
      unsigned int v29 = -1431655766;
      int v4 = AppleBCMWLANChipConfigSpace::dumpConfigSpaceRegisters(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), v2, 0x4000uLL);
      uint64_t Logger = AppleBCMWLANBusInterface::getLogger(this);
      if (v4)
      {
        if (Logger)
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v6 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v6, "[dk] %s@%d:dumpConfigSpaceRegisters return %x\n");
          }
        }
      }
      else if (Logger)
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v25 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v25, "\n%s");
        }
      }
      int v15 = AppleBCMWLANChipBackplane::dumpPCIeCoreEnumerationRegisters(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), v3, 0x4000uLL);
      uint64_t v16 = AppleBCMWLANBusInterface::getLogger(this);
      if (v15)
      {
        if (v16)
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            unsigned int v17 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v17, "[dk] %s@%d:dumpPCIeCoreRegisters returned %x\n");
          }
        }
      }
      else if (v16)
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          IOAddressSegment v26 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v26, "\n%s");
        }
      }
      uint64_t v7 = AppleBCMWLANChipBackplane::readMACMasterWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x800u, &v29);
      if (!v7)
      {
        if (v29)
        {
          if (AppleBCMWLANBusInterface::getLogger(this))
          {
            AppleBCMWLANBusInterface::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              int v22 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
              CCLogStream::logAlert(v22, "[dk] %s@%d:MAC Core in reset!\n");
            }
          }
        }
        else
        {
          int v19 = AppleBCMWLANChipBackplane::dumpD11CoreEnumerationRegisters(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), v3, 0x4000uLL);
          uint64_t v20 = AppleBCMWLANBusInterface::getLogger(this);
          if (v19)
          {
            if (v20)
            {
              AppleBCMWLANBusInterface::getLogger(this);
              if (CCLogStream::shouldLog())
              {
                unint64_t v21 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                CCLogStream::logAlert(v21, "[dk] %s@%d:dumpD11CoreEnumerationRegisters\ndumpstatus %x\n");
              }
            }
          }
          else if (v20)
          {
            AppleBCMWLANBusInterface::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v28 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
              CCLogStream::logAlert(v28, "%s");
            }
          }
        }
        uint64_t v7 = AppleBCMWLANChipBackplane::dumpDMPWrapperRegisters(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), v3, 0x4000uLL);
        uint64_t v23 = AppleBCMWLANBusInterface::getLogger(this);
        if (v7)
        {
          if (v23)
          {
            AppleBCMWLANBusInterface::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              uint64_t v24 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
              CCLogStream::logAlert(v24, "[dk] %s@%d:dumpDMPWrapperRegisters returned %x\n", "dumpRegisters", 15664, v7);
            }
          }
        }
        else
        {
          if (v23)
          {
            AppleBCMWLANBusInterface::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              __int16 v27 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
              CCLogStream::logAlert(v27, "\n%s", v3);
            }
          }
          uint64_t v7 = 0;
        }
      }
      IOFreeData();
    }
    else
    {
      return 12;
    }
  }
  else
  {
    uint64_t v7 = 3758097097;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v8 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        uint64_t v9 = 0;
        uint64_t v10 = *((void *)this + 9);
        if (*(unsigned char *)(v10 + 1304)) {
          unint64_t v11 = "TRUE";
        }
        else {
          unint64_t v11 = "FALSE";
        }
        if (*(void *)(v10 + 3248)) {
          uint64_t v12 = "Not NULL";
        }
        else {
          uint64_t v12 = "NULL";
        }
        int v13 = *(_DWORD *)(v10 + 1224);
        uint64_t v14 = "UNKNOWN";
        while (kPowerStateMapping[v9] != v13)
        {
          v9 += 4;
          if (v9 == 56) {
            goto LABEL_53;
          }
        }
        uint64_t v14 = *(const char **)&kPowerStateMapping[v9 + 2];
LABEL_53:
        CCLogStream::logAlert(v8, "[dk] %s@%d:Bus is not accessable. ivars->fChipHalted:%s, ivars->fPCIeBus:%s, power state:%s\n", "dumpRegisters", 15617, v11, v12, v14);
      }
    }
  }
  return v7;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::dumpRegisters(AppleBCMWLANBusInterfacePCIe *this)
{
  return AppleBCMWLANBusInterfacePCIe::dumpRegisters((AppleBCMWLANBusInterfacePCIe *)((char *)this - 64));
}

uint64_t AppleBCMWLANBusInterfacePCIe::dumpDebugInfo(AppleBCMWLANBusInterfacePCIe *this, OSDictionary **a2)
{
  *a2 = 0;
  uint64_t v3 = *((void *)this + 9);
  if (*(unsigned char *)(v3 + 1304) || !*(void *)(v3 + 3248) || *(unsigned char *)(v3 + 3706) && *(unsigned char *)(v3 + 3709))
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        uint64_t v35 = *((void *)this + 9);
        int v36 = "TRUE";
        if (!*(unsigned char *)(v35 + 1304)) {
          int v36 = "FALSE";
        }
        if (*(void *)(v35 + 3248)) {
          uint64_t v37 = "Not NULL";
        }
        else {
          uint64_t v37 = "NULL";
        }
        CCLogStream::logAlert(Logger, "[dk] %s@%d:Bus is NOT accessible ivars->fChipHalted:%s, ivars->fPCIeBus:%s\n", "dumpDebugInfo", 15689, v36, v37);
      }
    }
    int v4 = OSString::withCString("SoC_register");
    char v5 = OSString::withCString("Bus not accessible");
    AppleBCMWLANBusInterface::sendCCMissingFileInfoToCoreAnalytics(this, v4, v5);
    return 3758097088;
  }
  else
  {
    uint64_t v9 = IOMallocZeroData();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      uint64_t v6 = 3758097085;
      OSDictionaryPtr v11 = OSDictionary::withCapacity(4u);
      if (!v11)
      {
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            __int16 v27 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v27, "[dk] %s@%d: Failed to create Dict for register dump\n", "dumpDebugInfo", 15702);
          }
        }
        goto LABEL_60;
      }
      uint64_t v12 = v11;
      uint64_t v13 = *((void *)this + 9);
      if ((*(unsigned char *)(v13 + 4488) & 1) == 0)
      {
        AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 0);
        uint64_t v13 = *((void *)this + 9);
      }
      if (!AppleBCMWLANChipConfigSpace::dumpConfigSpaceRegisters(*(AppleBCMWLANChipConfigSpace **)(v13 + 3352), v10, 0x8000uLL))addKeyAndDump((OSStringPtr)"Config Space", v10, v12); {
      if ((AppleBCMWLANBusInterfacePCIe::checkAPBAccessibility(this, 1, 0) & 1) == 0)
      }
      {
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v28 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logInfo(v28, "[dk] %s@%d:APB not accessible\n", "dumpDebugInfo", 15719);
          }
        }
        goto LABEL_55;
      }
      if (!AppleBCMWLANBusInterfacePCIe::checkTCMAccessibility(this))
      {
LABEL_55:
        *a2 = v12;
        if ((*(unsigned char *)(*((void *)this + 9) + 4488) & 1) == 0)
        {
          AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 1);
          uint64_t v12 = *a2;
        }
        if (((unsigned int (*)(OSDictionary *))v12->getCount)(v12)) {
          uint64_t v6 = 0;
        }
        else {
          uint64_t v6 = 3758097136;
        }
LABEL_60:
        IOFreeData();
        return v6;
      }
      uint64_t v14 = *((void *)this + 9);
      int v15 = *(_DWORD *)(v14 + 3312);
      uint64_t v16 = (v15 - 4357);
      if (v16 > 0x2A) {
        goto LABEL_70;
      }
      if (((1 << (v15 - 5)) & 0xC0300001) != 0)
      {
LABEL_19:
        int v17 = AppleBCMWLANChipBackplane::dumpDMPWrapperRegisters43x7(*(AppleBCMWLANChipBackplane **)(v14 + 3360), v10, 0x8000uLL);
        goto LABEL_20;
      }
      if (v16 == 42)
      {
        int v17 = AppleBCMWLANChipBackplane::dumpMNIIDMRegisters(*(AppleBCMWLANChipBackplane **)(v14 + 3360), v10, 0x8000uLL);
      }
      else
      {
LABEL_70:
        if (v15 == 276347) {
          goto LABEL_19;
        }
        int v17 = AppleBCMWLANChipBackplane::dumpDMPWrapperRegisters(*(AppleBCMWLANChipBackplane **)(v14 + 3360), v10, 0x8000uLL);
      }
LABEL_20:
      if (!v17) {
        addKeyAndDump((OSStringPtr)"DMP Wrapper", v10, v12);
      }
      uint64_t v18 = *((void *)this + 9);
      if (*(_DWORD *)(v18 + 3312) == 4387
        && !AppleBCMWLANChipBackplane::dumpAPBBridge0SlaveWrapperRegisters(*(AppleBCMWLANChipBackplane **)(v18 + 3360), v10, 0x8000uLL))
      {
        addKeyAndDump((OSStringPtr)"APB Bridge0 Wrapper Slave", v10, v12);
      }
      uint64_t v19 = *((void *)this + 9);
      if (*(_DWORD *)(v19 + 3312) == 4388
        && !AppleBCMWLANChipBackplane::dumpAPBBridge0SlaveWrapperRegisters(*(AppleBCMWLANChipBackplane **)(v19 + 3360), v10, 0x8000uLL))
      {
        addKeyAndDump((OSStringPtr)"APB Bridge0 Wrapper Slave", v10, v12);
      }
      uint64_t v20 = *((void *)this + 9);
      if (*(_DWORD *)(v20 + 3312) == 4399
        && !AppleBCMWLANChipBackplane::dumpOOBConfigStatusRegisters(*(AppleBCMWLANChipBackplane **)(v20 + 3360), v10, 0x8000uLL))
      {
        addKeyAndDump((OSStringPtr)"OOB config and status", v10, v12);
      }
      uint64_t v21 = *((void *)this + 9);
      int v22 = *(_DWORD *)(v21 + 3312);
      if ((v22 - 4357) <= 0x2A && ((1 << (v22 - 5)) & 0x400C0300001) != 0
        || v22 == 276347)
      {
        if (!AppleBCMWLANChipBackplane::dumpPMUCoreEnumerationRegisters(*(AppleBCMWLANChipBackplane **)(v21 + 3360), v10, 0x8000uLL))addKeyAndDump((OSStringPtr)"PMU Core Enumeration", v10, v12); {
        if (AppleBCMWLANBusInterface::getLogger(this))
        }
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            int v38 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logInfo(v38, "[dk] %s@%d:Reading PMU registers\n", "dumpDebugInfo", 15800);
          }
        }
      }
      else
      {
        if (!AppleBCMWLANChipBackplane::dumpCommonCoreEnumerationRegisters(*(AppleBCMWLANChipBackplane **)(v21 + 3360), v10, 0x8000uLL))addKeyAndDump((OSStringPtr)"Common Core Enumeration", v10, v12); {
        uint64_t v31 = *((void *)this + 9);
        }
        int v32 = *(unsigned int **)(v31 + 2832);
        if (v32)
        {
          unsigned int v33 = *v32;
          if (((v33 >> AppleBCMWLANChipManagerPCIe::getCoreID(*(AppleBCMWLANChipManagerPCIe **)(v31 + 3280), 1u)) & 1) != 0
            && !AppleBCMWLANChipBackplane::dumpD11CoreEnumerationRegisters(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), v10, 0x8000uLL))
          {
            addKeyAndDump((OSStringPtr)"D11 Core Enumeration", v10, v12);
          }
        }
      }
      int v23 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 3280) + 240))(*(void *)(*((void *)this + 9) + 3280));
      uint64_t v24 = *((void *)this + 9);
      if (v23)
      {
        if (AppleBCMWLANChipBackplane::dumpCoreRegisterRegionswithMNIInterface(*(AppleBCMWLANChipBackplane **)(v24 + 3360), v10, 0x8000uLL))goto LABEL_53; {
        uint64_t v25 = "Core Register Regions with MNI interface";
        }
      }
      else
      {
        uint64_t v29 = (*(uint64_t (**)(void))(**(void **)(v24 + 3280) + 144))(*(void *)(v24 + 3280));
        unint64_t v30 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 3280) + 152))(*(void *)(*((void *)this + 9) + 3280));
        if (AppleBCMWLANChipBackplane::dumpARMCoreEnumerationRegisters(*(void *)(*((void *)this + 9) + 3360), v10, 0x8000uLL, v29, v30))goto LABEL_53; {
        uint64_t v25 = "ARM Core Enumeration";
        }
      }
      addKeyAndDump((OSStringPtr)v25, v10, v12);
LABEL_53:
      if (!AppleBCMWLANChipBackplane::dumpPCIeCoreEnumerationRegisters(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), v10, 0x8000uLL))addKeyAndDump((OSStringPtr)"PCIe Core Enumeration", v10, v12); {
      goto LABEL_55;
      }
    }
    uint64_t v6 = 3758097085;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        IOAddressSegment v26 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v26, "[dk] %s@%d: Failed to allocate buffer for register dump\n", "dumpDebugInfo", 15695);
      }
    }
  }
  return v6;
}

OSStringPtr addKeyAndDump(OSStringPtr result, char *cString, OSDictionary *a3)
{
  if (cString)
  {
    int v4 = (const char *)result;
    uint64_t result = OSString::withCString(cString);
    if (result)
    {
      OSStringPtr v5 = result;
      OSDictionary::setObject(a3, v4, result);
      release = v5->release;
      return (OSStringPtr)((uint64_t (*)(OSStringPtr))release)(v5);
    }
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::checkAPBAccessibility(AppleBCMWLANBusInterfacePCIe *this, int a2, int a3)
{
  if (AppleBCMWLANChipBackplane::getAPBAccessibilityState(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360)) == 1)
  {
    if (((*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 3280) + 240))(*(void *)(*((void *)this + 9) + 3280)) & 1) == 0) {
      AppleBCMWLANBusInterfacePCIe::dumpAPBRegisters(this);
    }
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:APB not accessible\n", "checkAPBAccessibility", 19621);
      }
    }
    return 0;
  }
  if (a2) {
    (*(void (**)(AppleBCMWLANBusInterfacePCIe *, const char *, uint64_t))(*(void *)this + 1208))(this, "checkAPBAccessibility", 19628);
  }
  uint64_t v7 = *((void *)this + 9);
  if (*(unsigned char *)(v7 + 3706) && *(unsigned char *)(v7 + 3709)) {
    return 0;
  }
  if (!(*(unsigned int (**)(void))(**(void **)(v7 + 3280) + 240))(*(void *)(v7 + 3280)))
  {
    if (AppleBCMWLANBusInterfacePCIe::checkMSAPB(this, a3)) {
      goto LABEL_14;
    }
LABEL_16:
    AppleBCMWLANChipBackplane::setAPBAccessibilityState(*(void *)(*((void *)this + 9) + 3360), 1);
    uint64_t v8 = 0;
    goto LABEL_17;
  }
  if ((AppleBCMWLANBusInterfacePCIe::checkPMNIAPB(this) & 1) == 0) {
    goto LABEL_16;
  }
LABEL_14:
  uint64_t v8 = 1;
LABEL_17:
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v10 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(v10, "[dk] %s@%d:APB accessible: %x\n", "checkAPBAccessibility", 19649, v8);
    }
  }
  return v8;
}

uint64_t AppleBCMWLANBusInterfacePCIe::checkTCMAccessibility(AppleBCMWLANBusInterfacePCIe *this)
{
  (*(void (**)(AppleBCMWLANBusInterfacePCIe *, const char *, uint64_t))(*(void *)this + 1208))(this, "checkTCMAccessibility", 19411);
  *(void *)uint64_t v31 = 0;
  uint64_t v2 = *((void *)this + 9);
  if (*(unsigned char *)(v2 + 3706) && *(unsigned char *)(v2 + 3709))
  {
    uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
    if (result)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:LinkDownFailure: logs collection disabled\n");
        return 0;
      }
    }
    return result;
  }
  int v5 = AppleBCMWLANBusInterfacePCIe::skipTCMAccess(this);
  uint64_t v6 = *((void *)this + 9);
  if (v5 && !*(unsigned char *)(v6 + 3716))
  {
    uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
    if (result)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v15 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v15, "[dk] %s@%d:skipping TCM access\n");
        return 0;
      }
    }
    return result;
  }
  if (*(unsigned char *)(v6 + 1305) && !*(unsigned char *)(v6 + 3716))
  {
    uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
    if (result)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v14 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v14, "[dk] %s@%d:Host trap timed out; skip peripheral access\n");
        return 0;
      }
    }
    return result;
  }
  char isAPBAccessible = AppleBCMWLANBusInterfacePCIe::isAPBAccessible(this, 0, 0);
  uint64_t v8 = *((void *)this + 9);
  if ((isAPBAccessible & 1) == 0 && !*(unsigned char *)(v8 + 4574))
  {
    uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
    if (result)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        uint64_t v16 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v16, "[dk] %s@%d: APB is not accessible; skip peripheral access\n");
        return 0;
      }
    }
    return result;
  }
  uint64_t v9 = *(void *)(v8 + 3352);
  uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
  if (!v9)
  {
    if (result)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        int v23 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v23, "[dk] %s@%d: No configuration space, bailng");
        return 0;
      }
    }
    return result;
  }
  if (result)
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v24 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logCrit(v24, "[dk] %s@%d:configSpace accessible\n", "checkTCMAccessibility", 19445);
    }
  }
  unsigned __int16 v32 = -21846;
  AppleBCMWLANChipConfigSpace::readReg16(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), 2u, &v32);
  uint64_t v10 = *((void *)this + 9);
  if (*(unsigned __int16 *)(v10 + 3334) == v32)
  {
    OSDictionaryPtr v11 = *(AppleBCMWLANChipBackplane **)(v10 + 3360);
    if (!v11)
    {
      uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
      if (result)
      {
        AppleBCMWLANBusInterface::getLogger(this);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          __int16 v27 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v27, "[dk] %s@%d: No backplane, bailng");
          return 0;
        }
      }
      return result;
    }
    if (*(_DWORD *)(v10 + 3312) == 4399)
    {
      *(void *)unint64_t v30 = 0;
      unsigned int v28 = 0;
      unsigned int v29 = 0;
      if (AppleBCMWLANChipBackplane::readARMMasterWrapperReg32(v11, 0x140u, &v30[1]))
      {
        uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
        if (!result) {
          return result;
        }
        AppleBCMWLANBusInterface::getLogger(this);
        uint64_t result = CCLogStream::shouldLog();
        if (!result) {
          return result;
        }
        uint64_t v12 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        goto LABEL_36;
      }
      if (AppleBCMWLANChipBackplane::readSysmemSlaveWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x140u, v30))
      {
        uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
        if (result)
        {
          AppleBCMWLANBusInterface::getLogger(this);
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            int v17 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v17, "[dk] %s@%d:Failed to read Sysmem slave wrapper reset ctrl register (0x%x) , 0x%x \n");
            return 0;
          }
        }
        return result;
      }
      if (AppleBCMWLANChipBackplane::readOOBRouterWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x248u, &v29))
      {
        uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
        if (result)
        {
          AppleBCMWLANBusInterface::getLogger(this);
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            uint64_t v19 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v19, "[dk] %s@%d:Failed to read ARM CA7 DMP ctrl register (0x%x) , 0x%x \n");
            return 0;
          }
        }
        return result;
      }
      if (AppleBCMWLANChipBackplane::readOOBRouterWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x4C8u, &v28))
      {
        uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
        if (result)
        {
          AppleBCMWLANBusInterface::getLogger(this);
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            uint64_t v21 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v21, "[dk] %s@%d:Failed to read Sysmem DMP ctrl register (0x%x) , 0x%x \n");
            return 0;
          }
        }
        return result;
      }
      if ((v30[1] & 1) != 0 || (v30[0] & 1) != 0 || (v29 & 1) == 0 || (v28 & 1) == 0)
      {
        uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
        if (result)
        {
          AppleBCMWLANBusInterface::getLogger(this);
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            int v22 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v22, "[dk] %s@%d:TCM memory is not accessible. reset ctrl:0x%x 0x%x DMP ctrl:0x%x 0x%x\n");
            return 0;
          }
        }
        return result;
      }
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        int shouldLog = CCLogStream::shouldLog();
        uint64_t result = 1;
        if (!shouldLog) {
          return result;
        }
        IOAddressSegment v26 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v26, "[dk] %s@%d:TCM memory is accessible. reset ctrl:0x%x 0x%x DMP ctrl:0x%x 0x%x\n", "checkTCMAccessibility", 19508, v30[1], v30[0], v29, v28);
      }
    }
    else
    {
      if (AppleBCMWLANChipBackplane::readARMMasterWrapperReg32(v11, 0x800u, &v31[1]))
      {
        uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
        if (!result) {
          return result;
        }
        AppleBCMWLANBusInterface::getLogger(this);
        uint64_t result = CCLogStream::shouldLog();
        if (!result) {
          return result;
        }
        uint64_t v12 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
LABEL_36:
        CCLogStream::logAlert(v12, "[dk] %s@%d:Failed to read ARM Wrapper Reset Ctrl Register (0x%x) , 0x%x \n");
        return 0;
      }
      if (AppleBCMWLANChipBackplane::readARMMasterWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x408u, v31))
      {
        uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
        if (result)
        {
          AppleBCMWLANBusInterface::getLogger(this);
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            uint64_t v18 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v18, "[dk] %s@%d:Failed to read ARM Wrapper IO Ctrl Register (0x%x) , 0x%x \n");
            return 0;
          }
        }
        return result;
      }
      if ((v31[1] & 1) != 0 || (v31[0] & 3) != 1)
      {
        uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
        if (result)
        {
          AppleBCMWLANBusInterface::getLogger(this);
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            uint64_t v20 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v20, "[dk] %s@%d:TCM memory is not accessible. ARM Wrapper Reset Ctrl : 0x%x, IO Ctrl : 0x %x\n");
            return 0;
          }
        }
        return result;
      }
    }
    return 1;
  }
  uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
  if (result)
  {
    AppleBCMWLANBusInterface::getLogger(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v13 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(v13, "[dk] %s@%d:Unexpected device ID. Read: 0x%x, Expected: 0x%x\n");
      return 0;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::dumpDebugInfo(AppleBCMWLANBusInterfacePCIe *this, OSDictionary **a2)
{
  return AppleBCMWLANBusInterfacePCIe::dumpDebugInfo((AppleBCMWLANBusInterfacePCIe *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANBusInterfacePCIe::dumpUCodeRegistersDebugInfo(AppleBCMWLANBusInterfacePCIe *this, OSDictionary **a2)
{
  uint64_t v3 = 3758097085;
  *a2 = 0;
  uint64_t v4 = *((void *)this + 9);
  if (*(unsigned char *)(v4 + 1304) || !*(void *)(v4 + 3248))
  {
    uint64_t v5 = 3758097088;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        uint64_t v7 = *((void *)this + 9);
        uint64_t v8 = "TRUE";
        if (!*(unsigned char *)(v7 + 1304)) {
          uint64_t v8 = "FALSE";
        }
        if (*(void *)(v7 + 3248)) {
          uint64_t v9 = "Not NULL";
        }
        else {
          uint64_t v9 = "NULL";
        }
        CCLogStream::logAlert(Logger, "[dk] %s@%d:Bus is NOT accessible ivars->fChipHalted:%s, ivars->fPCIeBus:%s\n", "dumpUCodeRegistersDebugInfo", 15859, v8, v9);
        return 3758097088;
      }
    }
  }
  else
  {
    uint64_t v11 = IOMallocZeroData();
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      OSDictionaryPtr v13 = OSDictionary::withCapacity(4u);
      if (v13)
      {
        uint64_t v14 = v13;
        uint64_t v15 = *((void *)this + 9);
        if ((*(unsigned char *)(v15 + 4488) & 1) == 0)
        {
          AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 0);
          uint64_t v15 = *((void *)this + 9);
        }
        uint64_t v16 = *(unsigned int **)(v15 + 2832);
        if (v16
          && (unsigned int v17 = *v16,
              ((v17 >> AppleBCMWLANChipManagerPCIe::getCoreID(*(AppleBCMWLANChipManagerPCIe **)(v15 + 3280), 1u)) & 1) != 0))
        {
          uint64_t v3 = AppleBCMWLANChipBackplane::dumpUCodeRegisters(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), v12, 0x1000uLL);
          if (!v3) {
            addKeyAndDump((OSStringPtr)"UCode Registers", v12, v14);
          }
        }
        else
        {
          uint64_t v3 = 0;
        }
        *a2 = v14;
        if ((*(unsigned char *)(*((void *)this + 9) + 4488) & 1) == 0) {
          AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 1);
        }
      }
      else if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v19 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v19, "[dk] %s@%d: Failed to create Dict for register dump\n", "dumpUCodeRegistersDebugInfo", 15871);
        }
      }
      IOFreeData();
      return v3;
    }
    else
    {
      return 3758097085;
    }
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::dumpUCodeRegistersDebugInfo(AppleBCMWLANBusInterfacePCIe *this, OSDictionary **a2)
{
  return AppleBCMWLANBusInterfacePCIe::dumpUCodeRegistersDebugInfo((AppleBCMWLANBusInterfacePCIe *)((char *)this - 64), a2);
}

uint64_t AppleBCMWLANBusInterfacePCIe::toggleDeviceWake(AppleBCMWLANBusInterfacePCIe *this, BOOL *a2)
{
  uint64_t v4 = *((void *)this + 9);
  if (*(_DWORD *)(v4 + 2844) != 2)
  {
    *(unsigned char *)(v4 + 1232) = 1;
    AppleOLYHALPortInterfacePCIe::setDeviceWakeDK(*(AppleOLYHALPortInterfacePCIe **)(*((void *)this + 9) + 5184), 1, 0);
  }
  IOSleep(0x64uLL);
  uint64_t v5 = *((void *)this + 9);
  if (*(_DWORD *)(v5 + 2844) != 2)
  {
    *(unsigned char *)(v5 + 1232) = 0;
    AppleOLYHALPortInterfacePCIe::setDeviceWakeDK(*(AppleOLYHALPortInterfacePCIe **)(*((void *)this + 9) + 5184), 0, 0);
  }
  *a2 = 0;
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::toggleDeviceWake(AppleBCMWLANBusInterfacePCIe *this, BOOL *a2)
{
  return 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::lowerWlanRegOn(AppleBCMWLANBusInterfacePCIe *this)
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::lowerWlanRegOn(AppleBCMWLANBusInterfacePCIe *this)
{
  return 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::dsEnableDisable(AppleBCMWLANBusInterfacePCIe *this)
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::dsEnableDisable(AppleBCMWLANBusInterfacePCIe *this)
{
  return 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::setMMIOLogState(AppleBCMWLANBusInterfacePCIe *this, int a2)
{
  uint64_t result = *(void *)(*((void *)this + 9) + 3144);
  if (result)
  {
    if (a2) {
      return AppleBCMWLANPCIeMMIOHistory::enableRecording(result);
    }
    else {
      return AppleBCMWLANPCIeMMIOHistory::disableRecording(result);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::setMMIOLogState(AppleBCMWLANBusInterfacePCIe *this, int a2)
{
  return AppleBCMWLANBusInterfacePCIe::setMMIOLogState((AppleBCMWLANBusInterfacePCIe *)((char *)this - 48), a2);
}

uint64_t AppleBCMWLANBusInterfacePCIe::logState(AppleBCMWLANBusInterfacePCIe *this)
{
  (*(void (**)(AppleBCMWLANBusInterfacePCIe *, const char *, uint64_t))(*(void *)this + 1208))(this, "logState", 15947);
  uint64_t v2 = *((void *)this + 9);
  uint64_t v3 = *(AppleBCMWLANChipBackplane **)(v2 + 3360);
  if (!v3 || *(unsigned char *)(v2 + 3722) || *(unsigned char *)(v2 + 1304) || *(unsigned char *)(v2 + 3706) && *(unsigned char *)(v2 + 3709))
  {
    (*(void (**)(AppleBCMWLANBusInterfacePCIe *, void, void, void, void))(*(void *)this + 256))(this, 0, 0, 0, 0);
  }
  else
  {
    AppleBCMWLANChipBackplane::forcePower(v3, 1, 0);
    (*(void (**)(AppleBCMWLANBusInterfacePCIe *, void, void, void, uint64_t))(*(void *)this + 256))(this, 0, 0, 0, 1);
    AppleBCMWLANChipBackplane::forcePower(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0, 0);
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::logState(AppleBCMWLANBusInterfacePCIe *this)
{
  return 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::dumpState(AppleBCMWLANBusInterfacePCIe *this, char *a2, unsigned int a3, unsigned int a4, int a5)
{
  AppleBCMWLANBusInterface::getLogger(this);
  unint64_t v77 = __PAIR64__(a3, a4);
  OSStringPtr v78 = a2;
  uint64_t v9 = IO80211Print();
  int v10 = *(_DWORD *)(*((void *)this + 9) + 3088) & 0x1F;
  for (int i = (*(_DWORD *)(*((void *)this + 9) + 3088) + 1) & 0x1F; v10 != i; int i = ((unsigned __int16)i + 1) & 0x1F)
  {
    AppleBCMWLANBusInterface::getLogger(this);
    uint64_t v12 = 0;
    uint64_t v13 = *((void *)this + 9);
    do
    {
      if (kPowerStateMapping[v12] == *(_DWORD *)(v13 + 24 * (unsigned __int16)i + 2056)) {
        break;
      }
      v12 += 4;
    }
    while (v12 != 56);
    for (uint64_t j = 0; j != 56; j += 4)
    {
      if (kPowerStateMapping[j] == *(_DWORD *)(v13 + 24 * (unsigned __int16)i + 2060)) {
        break;
      }
    }
    uint64_t v9 = IO80211Print() + v9;
  }
  AppleBCMWLANBusInterface::getLogger(this);
  uint64_t v15 = IO80211Print() + v9;
  AppleBCMWLANBusInterface::getLogger(this);
  uint64_t v16 = IO80211Print() + v15;
  AppleBCMWLANBusInterface::getLogger(this);
  uint64_t v17 = 0;
  uint64_t v18 = *((void *)this + 9);
  do
  {
    if (kPowerStateMapping[v17] == *(_DWORD *)(v18 + 1224)) {
      break;
    }
    v17 += 4;
  }
  while (v17 != 56);
  for (uint64_t k = 0; k != 56; k += 4)
  {
    if (kPowerStateMapping[k] == *(_DWORD *)(v18 + 1228)) {
      break;
    }
  }
  AppleBCMWLANBusInterface::getBusState(this);
  uint64_t v20 = IO80211Print() + v16;
  AppleBCMWLANBusInterface::getLogger(this);
  uint64_t v21 = IO80211Print() + v20;
  AppleBCMWLANBusInterface::getLogger(this);
  uint64_t v22 = IO80211Print() + v21;
  AppleBCMWLANBusInterface::getLogger(this);
  uint64_t v23 = IO80211Print() + v22;
  AppleBCMWLANBusInterface::getLogger(this);
  uint64_t v24 = IO80211Print() + v23;
  AppleBCMWLANBusInterface::getLogger(this);
  uint64_t v25 = IO80211Print() + v24;
  AppleBCMWLANBusInterface::getLogger(this);
  uint64_t v26 = IO80211Print() + v25;
  AppleBCMWLANBusInterface::getLogger(this);
  uint64_t v27 = IO80211Print() + v26;
  AppleBCMWLANBusInterface::getLogger(this);
  (*(void (**)(void))(**(void **)(*((void *)this + 9) + 3552) + 72))(*(void *)(*((void *)this + 9) + 3552));
  (*(void (**)(void))(**(void **)(*((void *)this + 9) + 3560) + 72))(*(void *)(*((void *)this + 9) + 3560));
  (*(void (**)(void))(**(void **)(*((void *)this + 9) + 3576) + 72))(*(void *)(*((void *)this + 9) + 3576));
  (*(void (**)(void))(**(void **)(*((void *)this + 9) + 3568) + 72))(*(void *)(*((void *)this + 9) + 3568));
  uint64_t v74 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 1088) + 72))(*(void *)(*((void *)this + 9) + 1088));
  uint64_t v73 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 1096) + 72))(*(void *)(*((void *)this + 9) + 1096));
  (*(void (**)(void))(**(void **)(*((void *)this + 9) + 1112) + 72))(*(void *)(*((void *)this + 9) + 1112));
  (*(void (**)(void))(**(void **)(*((void *)this + 9) + 1120) + 72))(*(void *)(*((void *)this + 9) + 1120));
  (*(void (**)(void))(**(void **)(*((void *)this + 9) + 1128) + 72))(*(void *)(*((void *)this + 9) + 1128));
  (*(void (**)(void))(**(void **)(*((void *)this + 9) + 1136) + 72))(*(void *)(*((void *)this + 9) + 1136));
  AppleBCMWLANBusInterface::getTxDescriptorCommandQueueSize(this);
  AppleBCMWLANBusInterface::getTxCompletionDescriptorCommandQueueSize(this);
  AppleBCMWLANBusInterface::getRxDescriptorCommandQueueSize(this);
  AppleBCMWLANBusInterface::getRxDescriptorEventQueueSize(this);
  uint64_t v28 = IO80211Print() + v27;
  AppleBCMWLANBusInterface::getLogger(this);
  uint64_t v29 = IO80211Print() + v28;
  AppleBCMWLANBusInterface::getLogger(this);
  unint64_t v30 = (void *)*((void *)this + 9);
  uint64_t v71 = v30[598];
  uint64_t v72 = v30[599];
  uint64_t v70 = v30[597];
  int v31 = IO80211Print() + v29;
  AppleBCMWLANBusInterface::getLogger(this);
  uint64_t v69 = *(void *)(*((void *)this + 9) + 5224);
  int v32 = IO80211Print();
  uint64_t v33 = *((void *)this + 9);
  if (a5)
  {
    int v34 = v77;
    if (*(unsigned char *)(v33 + 2869))
    {
      uint64_t v35 = 0;
    }
    else
    {
      uint64_t v35 = AppleBCMWLANBusInterfacePCIe::checkTCMAccessibility(this);
      uint64_t v33 = *((void *)this + 9);
    }
  }
  else
  {
    uint64_t v35 = 0;
    int v34 = v77;
  }
  int v36 = v32 + v31;
  if (*(unsigned char *)(v33 + 1306))
  {
    int v37 = (*(uint64_t (**)(void, const char *, char *, void, void, uint64_t))(**(void **)(v33 + 344)
                                                                                           + 280))(*(void *)(v33 + 344), "ivars->fPCIeRxBufferPostRing", v78, v36 + a3, (v34 - v36), v35)+ v36;
    int v40 = (*(uint64_t (**)(void, const char *, char *, void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(*((void *)this + 9) + 312) + 280))(*(void *)(*((void *)this + 9) + 312), "ivars->fPCIeControlSubmissionRing", v78, v37 + a3, (v34 - v37), v35, v38, v39, v69, v70, v71, v72, v74, v73)+ v37;
    int v41 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 320) + 280))() + v40;
    int v42 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 360) + 280))() + v41;
    int v43 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 352) + 280))() + v42;
    uint64_t v44 = *((void *)this + 9);
    uint64_t v45 = *(AppleBCMWLANPCIeSkywalk **)(v44 + 4472);
    if (v45)
    {
      uint64_t LowLatencyTxCompRing = AppleBCMWLANPCIeSkywalk::getLowLatencyTxCompRing(v45);
      uint64_t v44 = *((void *)this + 9);
      if (LowLatencyTxCompRing)
      {
        uint64_t v47 = AppleBCMWLANPCIeSkywalk::getLowLatencyTxCompRing(*(AppleBCMWLANPCIeSkywalk **)(v44 + 4472));
        v43 += (*(uint64_t (**)(uint64_t, const char *, char *, void, void, uint64_t))(*(void *)v47 + 280))(v47, "LowLatencyTxCompRing", v78, v43 + a3, (v34 - v43), v35);
        uint64_t v44 = *((void *)this + 9);
      }
    }
    int v48 = *(AppleBCMWLANPCIeSkywalk **)(v44 + 4472);
    if (v48 && AppleBCMWLANPCIeSkywalk::getLowLatencyRxCompRing(v48))
    {
      uint64_t LowLatencyRxCompRing = AppleBCMWLANPCIeSkywalk::getLowLatencyRxCompRing(*(AppleBCMWLANPCIeSkywalk **)(*((void *)this + 9) + 4472));
      v43 += (*(uint64_t (**)(uint64_t, const char *, char *, void, void, uint64_t))(*(void *)LowLatencyRxCompRing
                                                                                               + 280))(LowLatencyRxCompRing, "LowLatencyRxCompRing", v78, v43 + a3, (v34 - v43), v35);
    }
    AppleBCMWLANBusInterface::getLogger(this);
    int v36 = v43 + IO80211Print();
    uint64_t v50 = *((void *)this + 9);
    uint64_t v51 = *(unsigned int *)(v50 + 372);
    if (v51 <= 0x2B && v51 < *(_DWORD *)(v50 + 376))
    {
      uint64_t v52 = v51 + 601;
      do
      {
        uint64_t v53 = *(void *)(v50 + 8 * v52);
        if (v53)
        {
          int v54 = (*(uint64_t (**)(uint64_t, const char *, char *, void, void, uint64_t))(*(void *)v53
                                                                                                  + 280))(v53, "FlowRing", v78, (v36 + HIDWORD(v77)), (v34 - v36), v35)+ v36;
          AppleBCMWLANBusInterface::getLogger(this);
          uint64_t v55 = *(void *)(*((void *)this + 9) + 8 * v52);
          unsigned int v56 = (*(uint64_t (**)(uint64_t))(*(void *)v55 + 208))(v55);
          AppleBCMWLANBusInterfacePCIe::workPendingForFlow(this, v56);
          int v36 = v54 + IO80211Print();
          uint64_t v50 = *((void *)this + 9);
        }
        if ((unint64_t)(v52 - 601) > 0x2A) {
          break;
        }
        unint64_t v57 = v52 - 600;
        ++v52;
      }
      while (v57 < *(unsigned int *)(v50 + 376));
    }
  }
  int v58 = (char *)IOMallocZeroData();
  long long v76 = v58;
  if (v58)
  {
    AppleBCMWLANHistogram::dump(*(AppleBCMWLANHistogram **)(*((void *)this + 9) + 3096), "ivars->fMSIDeltaTimeUS", v58, 1023, 0);
    AppleBCMWLANBusInterface::getLogger(this);
    v36 += IO80211Print();
  }
  long long v83 = 0u;
  memset(v84, 0, sizeof(v84));
  long long v81 = 0u;
  long long v82 = 0u;
  long long __dst = 0u;
  long long v80 = 0u;
  int v59 = v84;
  AppleBCMWLANPCIeDoorbell::getDebugInfo(*(void **)(*((void *)this + 9) + 3640), &__dst);
  AppleBCMWLANBusInterface::getLogger(this);
  int v60 = v36 + IO80211Print();
  AppleBCMWLANBusInterface::getLogger(this);
  uint64_t v61 = 0;
  int v62 = v60 + IO80211Print();
  do
  {
    AppleBCMWLANBusInterface::getLogger(this);
    v62 += IO80211Print();
    ++v61;
    int v59 = (_OWORD *)((char *)v59 + 24);
  }
  while (v61 != 16);
  AppleBCMWLANBusInterface::getLogger(this);
  AppleBCMWLANConfigManager::wompEnabled(*(AppleBCMWLANConfigManager **)(*((void *)this + 9) + 3640));
  AppleBCMWLANTxPowerManager::getDynSARMode(*(AppleBCMWLANTxPowerManager **)(*((void *)this + 9) + 3640));
  AppleBCMWLANIOReporting::getAddReporterCallback(*(AppleBCMWLANIOReporting **)(*((void *)this + 9) + 3640));
  AppleBCMWLANIOReporting::getAddReporterCallback(*(AppleBCMWLANIOReporting **)(*((void *)this + 9) + 3640));
  AppleBCMWLANIOReporting::getTarget(*(AppleBCMWLANIOReporting **)(*((void *)this + 9) + 3640));
  unsigned int v63 = v78;
  AppleBCMWLANIOReporting::getTarget(*(AppleBCMWLANIOReporting **)(*((void *)this + 9) + 3640));
  int v64 = v62 + IO80211Print();
  uint64_t v65 = *((void *)this + 9);
  if (*(void *)(v65 + 5176))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    *(void *)&long long __dst = 0;
    AppleOLYHALPlatformFunction::getLastChipsetPowerOffDK(*(AppleOLYHALPlatformFunction **)(*((void *)this + 9) + 5176), (unint64_t *)&__dst, 0);
    *(void *)&long long __dst = 0;
    AppleOLYHALPlatformFunction::getLastChipsetPowerOffDK(*(AppleOLYHALPlatformFunction **)(*((void *)this + 9) + 5176), (unint64_t *)&__dst, 0);
    *(void *)&long long __dst = 0;
    AppleOLYHALPlatformFunction::getLastChipsetPowerOnDK(*(AppleOLYHALPlatformFunction **)(*((void *)this + 9) + 5176), (unint64_t *)&__dst, 0);
    *(void *)&long long __dst = 0;
    AppleOLYHALPlatformFunction::getLastChipsetPowerOnDK(*(AppleOLYHALPlatformFunction **)(*((void *)this + 9) + 5176), (unint64_t *)&__dst, 0);
    unsigned int v63 = v78;
    v64 += IO80211Print();
    uint64_t v65 = *((void *)this + 9);
  }
  *(void *)&v84[0] = 0;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v81 = 0u;
  long long __dst = 0u;
  *((void *)&v80 + AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 1) = v77;
  LODWORD(v8AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 1) = v64;
  *(void *)&long long v80 = v63;
  int v66 = IO80211FlowQueueDatabase::print(*(IO80211FlowQueueDatabase **)(v65 + 1312), &__dst) + v64;
  int v67 = AppleBCMWLANBusInterfacePCIe::printMRUFlowIdList(this, v63);
  if (v76) {
    IOFreeData();
  }
  return (v67 + v66);
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::dumpState(AppleBCMWLANBusInterfacePCIe *this, char *a2, unsigned int a3, unsigned int a4, int a5)
{
  return AppleBCMWLANBusInterfacePCIe::dumpState((AppleBCMWLANBusInterfacePCIe *)((char *)this - 48), a2, a3, a4, a5);
}

uint64_t AppleBCMWLANBusInterfacePCIe::setLogLevel(AppleBCMWLANBusInterface *a1, int a2)
{
  uint64_t result = AppleBCMWLANBusInterface::getLogger(a1);
  if (result)
  {
    AppleBCMWLANBusInterface::getLogger(a1);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
      return CCLogStream::logAlert(Logger, "[dk] %s@%d:Setting log level to 0x%llx\n", "setLogLevel", 16355, a2);
    }
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::setLogFlags(AppleBCMWLANBusInterfacePCIe *this, uint64_t a2)
{
  uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
  if (result)
  {
    AppleBCMWLANBusInterface::getLogger(this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      return CCLogStream::logAlert(Logger, "[dk] %s@%d:Setting log flags to 0x%llx\n", "setLogFlags", 16361, a2);
    }
  }
  return result;
}

uint64_t busSetLogLevelCallback(const OSMetaClassBase *a1, int a2)
{
  uint64_t v3 = OSMetaClassBase::safeMetaCast(a1, (const OSMetaClass *)gAppleBCMWLANBusInterfacePCIeMetaClass);
  return AppleBCMWLANBusInterfacePCIe::setLogLevel((AppleBCMWLANBusInterface *)v3, a2);
}

uint64_t busSetLogFlagsCallback(const OSObject *a1, uint64_t a2)
{
  uint64_t v3 = OSMetaClassBase::safeMetaCast(a1, (const OSMetaClass *)gAppleBCMWLANBusInterfacePCIeMetaClass);
  return AppleBCMWLANBusInterfacePCIe::setLogFlags((AppleBCMWLANBusInterfacePCIe *)v3, a2);
}

OSMetaClassBase *AppleBCMWLANBusInterfacePCIe::createTimestampLogPipe(AppleBCMWLANBusInterfacePCIe *this, const char *a2, const char *a3)
{
  uint64_t v5 = IOMallocZeroTyped();
  if (v5)
  {
    uint64_t v6 = v5;
    *(_OWORD *)uint64_t v5 = xmmword_1003712A0;
    *(_OWORD *)(v5 + 16) = xmmword_1003712B0;
    *(_DWORD *)(v5 + 32) = 1000;
    strlcpy((char *)(v5 + 36), a3, 0x100uLL);
    int ModuleInstanceId = AppleBCMWLANBusInterface::getModuleInstanceId(this);
    snprintf((char *)(v6 + 292), 0xF0uLL, "wlan%u", ModuleInstanceId);
    strcpy((char *)(v6 + 580), "WiFi");
    *(void *)(v6 + 548) = 0x106400000;
    *(_OWORD *)(v6 + 56AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 0) = 0u;
    OSMetaClassBase::safeMetaCast((const OSMetaClassBase *)this, (const OSMetaClass *)gAppleBCMWLANBusInterfacePCIeMetaClass);
    AppleBCMWLANBusInterface::getCCPipeOwner(this);
    uint64_t v8 = (*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 80))(this);
    (*(void (**)(uint64_t))(*(void *)v8 + 168))(v8);
    uint64_t v9 = (const OSMetaClassBase *)CCPipe::withOwnerNameCapacity();
    int v10 = OSMetaClassBase::safeMetaCast(v9, gCCLogPipeMetaClass);
    IOFree((void *)v6, 0x350uLL);
    return v10;
  }
  else
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logCrit(Logger, "[dk] %s@%d:Failed to allocate memory\n", "createTimestampLogPipe", 16662);
      }
    }
    return 0;
  }
}

OSMetaClassBase *AppleBCMWLANBusInterfacePCIe::createTimestampLogStream(AppleBCMWLANBusInterface *a1)
{
  uint64_t v2 = IOMallocZeroTyped();
  if (v2)
  {
    uint64_t v3 = v2;
    *(_DWORD *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = -1;
    *(void *)(v2 + 24) = 0;
    *(void *)(v2 + 32) = 0;
    if (AppleBCMWLAN_isVerboseDebugLoggingAllowed()) {
      *(_DWORD *)(v3 + 8) = 127;
    }
    *(void *)(v3 + 56) = 0;
    *(void *)(v3 + 64) = 0;
    *(void *)(v3 + 48) = a1;
    int ModuleInstanceId = AppleBCMWLANBusInterface::getModuleInstanceId(a1);
    snprintf((char *)(v3 + 88), 0xF0uLL, "wlan%u", ModuleInstanceId);
    uint64_t v5 = (const OSMetaClassBase *)CCStream::withPipeAndName();
    uint64_t v6 = OSMetaClassBase::safeMetaCast(v5, gCCLogStreamMetaClass);
    IOFree((void *)v3, 0x358uLL);
    return v6;
  }
  else
  {
    if (AppleBCMWLANBusInterface::getLogger(a1))
    {
      AppleBCMWLANBusInterface::getLogger(a1);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(a1);
        CCLogStream::logCrit(Logger, "[dk] %s@%d:Failed to allocate memory\n", "createTimestampLogStream", 16702);
      }
    }
    return 0;
  }
}

BOOL AppleBCMWLANBusInterfacePCIe::createTimestampLoggers(AppleBCMWLANBusInterfacePCIe *this)
{
  BOOL result = 1;
  if (*(unsigned char *)(*((void *)this + 9) + 4412))
  {
    *(void *)(*((void *)this + 9) + 4424) = AppleBCMWLANBusInterfacePCIe::createTimestampLogPipe(this, "TimestampTxLog", "TimestampTxLog");
    if (!*(void *)(*((void *)this + 9) + 4424)) {
      return 0;
    }
    *(void *)(*((void *)this + 9) + 444AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 0) = AppleBCMWLANBusInterfacePCIe::createTimestampLogPipe(this, "TimestampRxLog", "TimestampRxLog");
    uint64_t v2 = *((void *)this + 9);
    if (!*(void *)(v2 + 4440)) {
      return 0;
    }
    (*(void (**)(void))(**(void **)(v2 + 4424) + 72))(*(void *)(v2 + 4424));
    (*(void (**)(void))(**(void **)(*((void *)this + 9) + 4440) + 72))(*(void *)(*((void *)this + 9) + 4440));
    *(void *)(*((void *)this + 9) + 4416) = AppleBCMWLANBusInterfacePCIe::createTimestampLogStream(this);
    if (!*(void *)(*((void *)this + 9) + 4416)) {
      return 0;
    }
    *(void *)(*((void *)this + 9) + 4432) = AppleBCMWLANBusInterfacePCIe::createTimestampLogStream(this);
    if (!*(void *)(*((void *)this + 9) + 4432)) {
      return 0;
    }
  }
  return result;
}

const char *non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::stringFromReturn(IOService *this, IOService *a2)
{
  return AppleBCMWLANBusInterface::stringFromReturn(this - 1, a2);
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::errnoFromReturn(AppleBCMWLANBusInterfacePCIe *this, uint64_t a2)
{
  return AppleBCMWLANBusInterface::errnoFromReturn((AppleBCMWLANBusInterfacePCIe *)((char *)this - 48), a2);
}

IOStateReporter *AppleBCMWLANBusInterfacePCIe::updateRxBufFillState(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t v2 = *((void *)this + 9);
  BOOL result = *(IOStateReporter **)(v2 + 3192);
  if (result)
  {
    uint64_t v4 = *(void *)(v2 + 344);
    if (v4)
    {
      unsigned int ReadableItemCount = AppleBCMWLANItemRing::getReadableItemCount((AppleBCMWLANItemRing *)v4);
      BOOL result = *(IOStateReporter **)(*((void *)this + 9) + 3192);
      if (ReadableItemCount)
      {
        if (ReadableItemCount >= 9)
        {
          if (ReadableItemCount >= 0x10)
          {
            if (ReadableItemCount >= 0x41)
            {
              if (ReadableItemCount >= 0x81)
              {
                BOOL v6 = ReadableItemCount >= 0x101;
                uint64_t v4 = 5;
                if (v6) {
                  uint64_t v4 = 0;
                }
              }
              else
              {
                uint64_t v4 = 4;
              }
            }
            else
            {
              uint64_t v4 = 3;
            }
          }
          else
          {
            uint64_t v4 = 2;
          }
        }
        else
        {
          uint64_t v4 = 1;
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
    }
    unint64_t v7 = kFillLevelStates[2 * v4];
    return (IOStateReporter *)IOStateReporter::setChannelState(result, 0x5278427546696CuLL, v7);
  }
  return result;
}

BOOL (__cdecl *AppleBCMWLANBusInterfacePCIe::destroyReporters(IOService *this))(OSObjectInterface *__hidden this)
{
  removePropertyHelper(this, "IOReportLegendPublic");
  removePropertyHelper(this, "IOReportLegend");
  this[1].OSObject::OSObjectInterface::__vftable[199].unsigned int free = 0;
  this[1].OSObject::OSObjectInterface::__vftable[197].unsigned int free = 0;
  this[1].OSObject::OSObjectInterface::__vftable[198].unsigned int free = 0;
  this[1].OSObject::OSObjectInterface::__vftable[199].init = 0;
  this[1].OSObject::OSObjectInterface::__vftable[198].init = 0;
  this[1].OSObject::OSObjectInterface::__vftable[200].init = 0;
  BOOL result = this[1].OSObject::OSObjectInterface::__vftable[197].init;
  if (result)
  {
    BOOL result = (BOOL (__cdecl *)(OSObjectInterface *__hidden))(*(uint64_t (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)result + 16))(result);
    this[1].OSObject::OSObjectInterface::__vftable[197].init = 0;
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::configureReportGated(AppleBCMWLANBusInterfacePCIe *this, OSCollection *a2, OSData *a3, unsigned int *a4, unsigned int *a5)
{
  *a4 = 0;
  uint64_t v7 = IOReporter::configureAllReports(*(IOReporter **)(*((void *)this + 9) + 3152), a2, a3, a4, a5);
  uint64_t v8 = v7;
  if (*a4) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9)
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logEmergency(Logger, "[dk] %s@%d:outCount is %d ret is %d", "configureReportGated", 17260, *a4, v8);
      }
    }
  }
  return v8;
}

uint64_t AppleBCMWLANBusInterfacePCIe::updateReportGated(IOService *this, OSCollection *a2, OSData *a3, unsigned int *a4, unsigned int *a5, unint64_t a6, IOMemoryDescriptor *a7)
{
  AppleBCMWLANBusInterfacePCIe::updateAllReports(this);
  uint64_t updated = IOReporter::updateAllReports((IOReporter *)this[1].OSObject::OSObjectInterface::__vftable[197].init, a2, a3, a4, a5, a6, (unint64_t)a7, v14);
  uint64_t v16 = updated;
  if (*a4) {
    BOOL v17 = updated == 0;
  }
  else {
    BOOL v17 = 0;
  }
  if (!v17)
  {
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logEmergency(Logger, "[dk] %s@%d:outElementCount is %d ret is %d", "updateReportGated", 17272, *a4, v16);
      }
    }
  }
  return v16;
}

uint64_t AppleBCMWLANBusInterfacePCIe::updateAllReports(IOService *this)
{
  ((void (*)(IOService *, const char *, uint64_t))this->OSObject::OSMetaClassBase::__vftable[21].Dispatch)(this, "updateAllReports", 17342);
  IOSimpleReporter::setValue((IOSimpleReporter *)this[1].OSObject::OSObjectInterface::__vftable[197].free, 0x45763030507274uLL, LODWORD(this[1].OSObject::OSObjectInterface::__vftable[81].init));
  IOSimpleReporter::setValue((IOSimpleReporter *)this[1].OSObject::OSObjectInterface::__vftable[197].free, 0x45763031507274uLL, LODWORD(this[1].OSObject::OSObjectInterface::__vftable[78].free));
  IOSimpleReporter::setValue((IOSimpleReporter *)this[1].OSObject::OSObjectInterface::__vftable[197].free, 0x45763032507274uLL, HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[78].free));
  IOSimpleReporter::setValue((IOSimpleReporter *)this[1].OSObject::OSObjectInterface::__vftable[197].free, 0x45763033507274uLL, LODWORD(this[1].OSObject::OSObjectInterface::__vftable[79].init));
  IOSimpleReporter::setValue((IOSimpleReporter *)this[1].OSObject::OSObjectInterface::__vftable[197].free, 0x45763034507274uLL, HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[79].init));
  IOSimpleReporter::setValue((IOSimpleReporter *)this[1].OSObject::OSObjectInterface::__vftable[197].free, 0x45763035507274uLL, LODWORD(this[1].OSObject::OSObjectInterface::__vftable[79].free));
  IOSimpleReporter::setValue((IOSimpleReporter *)this[1].OSObject::OSObjectInterface::__vftable[197].free, 0x45763036507274uLL, HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[79].free));
  IOSimpleReporter::setValue((IOSimpleReporter *)this[1].OSObject::OSObjectInterface::__vftable[197].free, 0x45763037507274uLL, HIDWORD(this[1].OSObject::OSObjectInterface::__vftable[80].init));
  IOSimpleReporter::setValue((IOSimpleReporter *)this[1].OSObject::OSObjectInterface::__vftable[197].free, 0x45763038507274uLL, LODWORD(this[1].OSObject::OSObjectInterface::__vftable[80].free));
  AppleBCMWLANBusInterfacePCIe::updateRxBufFillState((AppleBCMWLANBusInterfacePCIe *)this);
  uint64_t v2 = 0;
  uint64_t v3 = (char *)&kReportTxCompleteStatusChannel;
  uint64_t v4 = 4192;
  do
  {
    uint64_t v5 = 0;
    uint64_t v6 = v4;
    do
    {
      IOSimpleReporter::setValue((IOSimpleReporter *)this[1].OSObject::OSObjectInterface::__vftable[200].init, *(void *)&v3[v5], *(unsigned int *)((char *)this[1].OSObject::OSObjectInterface::__vftable + v6 - 4));
      IOSimpleReporter::setValue((IOSimpleReporter *)this[1].OSObject::OSObjectInterface::__vftable[200].init, *(void *)&v3[v5 + 112], *(unsigned int *)((char *)&this[1].init + v6));
      v6 += 32;
      v5 += 16;
    }
    while (v5 != 112);
    ++v2;
    v4 += 8;
    v3 += 224;
  }
  while (v2 != 4);
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v67 = v8;
  long long v68 = v8;
  *(_OWORD *)__str = v8;
  long long v66 = v8;
  BOOL v9 = this[1].OSObject::OSObjectInterface::__vftable;
  if (!v9[197].init) {
    return 0;
  }
  if (!v9[198].init)
  {
    this[1].OSObject::OSObjectInterface::__vftable[198].init = (BOOL (__cdecl *)(OSObjectInterface *__hidden))IOSimpleReporter::with((IOSimpleReporter *)this, (IOService *)0x10, 0, v7);
    int v10 = this[1].OSObject::OSObjectInterface::__vftable;
    init = (const OSMetaClassBase *)v10[198].init;
    if (!init) {
      return 0;
    }
    OSSet::setObject((OSSet *)v10[197].init, init);
    (*(void (**)(BOOL (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[198].init
                                                                          + 16))(this[1].OSObject::OSObjectInterface::__vftable[198].init);
  }
  uint64_t v12 = 0;
  if (!AppleBCMWLANBusInterfacePCIe::isBusAccessible((AppleBCMWLANBusInterfacePCIe *)this, 0)) {
    return v12;
  }
  if (!this[1].OSObject::OSObjectInterface::__vftable[210].init) {
    return 0;
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  char v15 = 0;
  uint64_t v12 = 0;
  do
  {
    uint64_t v16 = v14;
    uint64_t v17 = 0;
    int v18 = 0;
    unint64_t v19 = 0;
    uint64_t v64 = v16;
    uint64_t v20 = (v16 << 32) | 0x3000000000;
    do
    {
      uint64_t v21 = v13 + v17;
      if (*(_DWORD *)(AppleBCMWLANChipBackplane::getRegionAccessCounters((AppleBCMWLANChipBackplane *)this[1].OSObject::OSObjectInterface::__vftable[210].init)
                     + v13
                     + v17
                     + 408))
      {
        uint64_t v22 = 805306368;
        if (v19 > 9) {
          uint64_t v22 = 822083584;
        }
        int v23 = v18 - 655360;
        if (v19 < 0xA) {
          int v23 = v18;
        }
        unint64_t v24 = v22 | v20 | 0x4231300000003030 | v23 | 0x300000u;
        uint64_t v25 = this[1].OSObject::OSObjectInterface::__vftable;
        uint64_t v26 = (IOSimpleReporter *)v25[198].init;
        uint64_t RegionAccessCounters = AppleBCMWLANChipBackplane::getRegionAccessCounters((AppleBCMWLANChipBackplane *)v25[210].init);
        if (IOSimpleReporter::setValue(v26, v24, *(unsigned int *)(RegionAccessCounters + v21 + 408)))
        {
          snprintf(__str, 0x40uLL, "%s%s%s", region[v64], core[v19], "Read ");
          IOReporter::addChannel((IOReporter *)this[1].OSObject::OSObjectInterface::__vftable[198].init, v24, __str);
          uint64_t v28 = this[1].OSObject::OSObjectInterface::__vftable;
          uint64_t v29 = (IOSimpleReporter *)v28[198].init;
          uint64_t v30 = *(unsigned int *)(AppleBCMWLANChipBackplane::getRegionAccessCounters((AppleBCMWLANChipBackplane *)v28[210].init)
                                + v13
                                + v17
                                + 408);
LABEL_34:
          uint64_t v12 = IOSimpleReporter::setValue(v29, v24, v30);
          char v15 = 1;
          goto LABEL_36;
        }
      }
      else if (*(_DWORD *)(AppleBCMWLANChipBackplane::getRegionAccessCounters((AppleBCMWLANChipBackplane *)this[1].OSObject::OSObjectInterface::__vftable[210].init) {
                          + v21
      }
                          + 412))
      {
        uint64_t v31 = 805306368;
        if (v19 > 9) {
          uint64_t v31 = 822083584;
        }
        int v32 = v18 - 655360;
        if (v19 < 0xA) {
          int v32 = v18;
        }
        unint64_t v24 = v31 | v20 | 0x4231300000003031 | v32 | 0x300000u;
        uint64_t v33 = this[1].OSObject::OSObjectInterface::__vftable;
        int v34 = (IOSimpleReporter *)v33[198].init;
        uint64_t v35 = AppleBCMWLANChipBackplane::getRegionAccessCounters((AppleBCMWLANChipBackplane *)v33[210].init);
        if (IOSimpleReporter::setValue(v34, v24, *(unsigned int *)(v35 + v13 + v17 + 412)))
        {
          snprintf(__str, 0x40uLL, "%s%s%s", region[v64], core[v19], "Write");
          IOReporter::addChannel((IOReporter *)this[1].OSObject::OSObjectInterface::__vftable[198].init, v24, __str);
          int v36 = this[1].OSObject::OSObjectInterface::__vftable;
          uint64_t v29 = (IOSimpleReporter *)v36[198].init;
          uint64_t v30 = *(unsigned int *)(AppleBCMWLANChipBackplane::getRegionAccessCounters((AppleBCMWLANChipBackplane *)v36[210].init)
                                + v13
                                + v17
                                + 412);
          goto LABEL_34;
        }
      }
      else
      {
        if (!*(_DWORD *)(AppleBCMWLANChipBackplane::getRegionAccessCounters((AppleBCMWLANChipBackplane *)this[1].OSObject::OSObjectInterface::__vftable[210].init)
                        + v13
                        + v17
                        + 416))
          goto LABEL_36;
        uint64_t v37 = 805306368;
        if (v19 > 9) {
          uint64_t v37 = 822083584;
        }
        int v38 = v18 - 655360;
        if (v19 < 0xA) {
          int v38 = v18;
        }
        unint64_t v24 = v37 | v20 | 0x4231300000003032 | v38 | 0x300000u;
        uint64_t v39 = this[1].OSObject::OSObjectInterface::__vftable;
        int v40 = (IOSimpleReporter *)v39[198].init;
        uint64_t v41 = AppleBCMWLANChipBackplane::getRegionAccessCounters((AppleBCMWLANChipBackplane *)v39[210].init);
        if (IOSimpleReporter::setValue(v40, v24, *(unsigned int *)(v41 + v13 + v17 + 416)))
        {
          snprintf(__str, 0x40uLL, "%s%s%s", region[v64], core[v19], "Wait ");
          IOReporter::addChannel((IOReporter *)this[1].OSObject::OSObjectInterface::__vftable[198].init, v24, __str);
          int v42 = this[1].OSObject::OSObjectInterface::__vftable;
          uint64_t v29 = (IOSimpleReporter *)v42[198].init;
          uint64_t v30 = *(unsigned int *)(AppleBCMWLANChipBackplane::getRegionAccessCounters((AppleBCMWLANChipBackplane *)v42[210].init)
                                + v13
                                + v17
                                + 416);
          goto LABEL_34;
        }
      }
      uint64_t v12 = 0;
LABEL_36:
      v17 += 12;
      ++v19;
      v18 += 0x10000;
    }
    while (v17 != 132);
    uint64_t v43 = 0;
    uint64_t v44 = -408;
    do
    {
      uint64_t v45 = v13 + v44;
      if (*(_DWORD *)(AppleBCMWLANChipBackplane::getRegionAccessCounters((AppleBCMWLANChipBackplane *)this[1].OSObject::OSObjectInterface::__vftable[210].init)
                     + v13
                     + v44
                     + 408))
      {
        unint64_t v46 = ((unint64_t)(v43 % 0xAu) << 16) | ((unint64_t)(v43 / 0xAu
                                                                                          + 48) << 24) | v20 | 0x4230300000303030;
        uint64_t v47 = this[1].OSObject::OSObjectInterface::__vftable;
        int v48 = (IOSimpleReporter *)v47[198].init;
        uint64_t v49 = AppleBCMWLANChipBackplane::getRegionAccessCounters((AppleBCMWLANChipBackplane *)v47[210].init);
        if (IOSimpleReporter::setValue(v48, v46, *(unsigned int *)(v49 + v45 + 408)))
        {
          snprintf(__str, 0x40uLL, "%s%s%s", region[v64], wrapper[v43], "Read ");
          IOReporter::addChannel((IOReporter *)this[1].OSObject::OSObjectInterface::__vftable[198].init, ((unint64_t)(v43 % 0xAu) << 16) | ((unint64_t)(v43 / 0xAu+ 48) << 24) | v20 | 0x4230300000303030, __str);
          uint64_t v51 = this[1].OSObject::OSObjectInterface::__vftable;
          uint64_t v52 = (IOSimpleReporter *)v51[198].init;
          uint64_t v53 = *(unsigned int *)(AppleBCMWLANChipBackplane::getRegionAccessCounters((AppleBCMWLANChipBackplane *)v51[210].init)
                                + v13
                                + v44
                                + 408);
LABEL_47:
          uint64_t v12 = IOSimpleReporter::setValue(v52, v46, v53);
          char v15 = 1;
          goto LABEL_49;
        }
      }
      else if (*(_DWORD *)(AppleBCMWLANChipBackplane::getRegionAccessCounters((AppleBCMWLANChipBackplane *)this[1].OSObject::OSObjectInterface::__vftable[210].init) {
                          + v45
      }
                          + 412))
      {
        unint64_t v46 = ((unint64_t)(v43 % 0xAu) << 16) | ((unint64_t)(v43 / 0xAu
                                                                                          + 48) << 24) | v20 | 0x4230300000303031;
        int v54 = this[1].OSObject::OSObjectInterface::__vftable;
        uint64_t v55 = (IOSimpleReporter *)v54[198].init;
        uint64_t v56 = AppleBCMWLANChipBackplane::getRegionAccessCounters((AppleBCMWLANChipBackplane *)v54[210].init);
        if (IOSimpleReporter::setValue(v55, v46, *(unsigned int *)(v56 + v13 + v44 + 412)))
        {
          snprintf(__str, 0x40uLL, "%s%s%s", region[v64], wrapper[v43], "Write");
          IOReporter::addChannel((IOReporter *)this[1].OSObject::OSObjectInterface::__vftable[198].init, ((unint64_t)(v43 % 0xAu) << 16) | ((unint64_t)(v43 / 0xAu+ 48) << 24) | v20 | 0x4230300000303031, __str);
          unint64_t v57 = this[1].OSObject::OSObjectInterface::__vftable;
          uint64_t v52 = (IOSimpleReporter *)v57[198].init;
          uint64_t v53 = *(unsigned int *)(AppleBCMWLANChipBackplane::getRegionAccessCounters((AppleBCMWLANChipBackplane *)v57[210].init)
                                + v13
                                + v44
                                + 412);
          goto LABEL_47;
        }
      }
      else
      {
        if (!*(_DWORD *)(AppleBCMWLANChipBackplane::getRegionAccessCounters((AppleBCMWLANChipBackplane *)this[1].OSObject::OSObjectInterface::__vftable[210].init)
                        + v13
                        + v44
                        + 416))
          goto LABEL_49;
        unint64_t v46 = ((unint64_t)(v43 % 0xAu) << 16) | ((unint64_t)(v43 / 0xAu
                                                                                          + 48) << 24) | v20 | 0x4230300000303032;
        int v58 = this[1].OSObject::OSObjectInterface::__vftable;
        int v59 = (IOSimpleReporter *)v58[198].init;
        uint64_t v60 = AppleBCMWLANChipBackplane::getRegionAccessCounters((AppleBCMWLANChipBackplane *)v58[210].init);
        if (IOSimpleReporter::setValue(v59, v46, *(unsigned int *)(v60 + v13 + v44 + 416)))
        {
          snprintf(__str, 0x40uLL, "%s%s%s", region[v64], wrapper[v43], "Wait ");
          IOReporter::addChannel((IOReporter *)this[1].OSObject::OSObjectInterface::__vftable[198].init, ((unint64_t)(v43 % 0xAu) << 16) | ((unint64_t)(v43 / 0xAu+ 48) << 24) | v20 | 0x4230300000303032, __str);
          uint64_t v61 = this[1].OSObject::OSObjectInterface::__vftable;
          uint64_t v52 = (IOSimpleReporter *)v61[198].init;
          uint64_t v53 = *(unsigned int *)(AppleBCMWLANChipBackplane::getRegionAccessCounters((AppleBCMWLANChipBackplane *)v61[210].init)
                                + v13
                                + v44
                                + 416);
          goto LABEL_47;
        }
      }
      uint64_t v12 = 0;
LABEL_49:
      ++v43;
      v44 += 12;
    }
    while (v44);
    uint64_t v14 = v64 + 1;
    v13 += 540;
  }
  while (v64 != 2);
  if (v15)
  {
    AppleBCMWLANUtil::removeReporterFromLegend(this, 0, (IOReporter *)"Backplane Accesses", "Accesses", v50);
    IOReportLegend::addReporterLegend((IOReportLegend *)this, (IOService *)this[1].OSObject::OSObjectInterface::__vftable[198].init, (IOReporter *)"Backplane Accesses", "Accesses", v62);
  }
  return v12;
}

uint64_t AppleBCMWLANBusInterfacePCIe::ConfigureReport_Impl(AppleBCMWLANBusInterfacePCIe *this, OSCollection *a2, OSData *a3, unsigned int *a4)
{
  if ((*(unsigned int (**)(void))(**(void **)(*((void *)this + 9) + 3464) + 144))(*(void *)(*((void *)this + 9) + 3464)))
  {
    return AppleBCMWLANBusInterfacePCIe::configureReportGated(this, a2, a3, a4, v8);
  }
  else
  {
    uint64_t v10 = *(void *)(*((void *)this + 9) + 3464);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 0x40000000;
    void v11[2] = ___ZN28AppleBCMWLANBusInterfacePCIe20ConfigureReport_ImplEP6OSDatajPj_block_invoke;
    void v11[3] = &__block_descriptor_tmp_840;
    _OWORD v11[4] = this;
    int v12 = (int)a3;
    void v11[5] = a2;
    void v11[6] = a4;
    return (*(uint64_t (**)(uint64_t, void *))(*(void *)v10 + 112))(v10, v11);
  }
}

uint64_t ___ZN28AppleBCMWLANBusInterfacePCIe20ConfigureReport_ImplEP6OSDatajPj_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  return AppleBCMWLANBusInterfacePCIe::configureReportGated(*(AppleBCMWLANBusInterfacePCIe **)(a1 + 32), *(OSCollection **)(a1 + 40), (OSData *)*(unsigned int *)(a1 + 56), *(unsigned int **)(a1 + 48), a5);
}

uint64_t AppleBCMWLANBusInterfacePCIe::UpdateReport_Impl(IOService *this, OSCollection *a2, OSData *a3, unsigned int *a4, unsigned int *a5, unint64_t a6, IOMemoryDescriptor *a7)
{
  if ((*(unsigned int (**)(void (__cdecl *)(OSObjectInterface *__hidden)))(*(void *)this[1].OSObject::OSObjectInterface::__vftable[216].free
                                                                                     + 144))(this[1].OSObject::OSObjectInterface::__vftable[216].free))
  {
    return AppleBCMWLANBusInterfacePCIe::updateReportGated(this, a2, a3, a4, a5, a6, a7);
  }
  else
  {
    unsigned int free = this[1].OSObject::OSObjectInterface::__vftable[216].free;
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 0x40000000;
    void v16[2] = ___ZN28AppleBCMWLANBusInterfacePCIe17UpdateReport_ImplEP6OSDatajPjyyP18IOMemoryDescriptor_block_invoke;
    v16[3] = &__block_descriptor_tmp_841;
    v16[4] = this;
    int v17 = (int)a3;
    void v16[5] = a2;
    v16[6] = a4;
    v16[7] = a5;
    v16[8] = a6;
    _DWORD v16[9] = a7;
    return (*(uint64_t (**)(void (__cdecl *)(OSObjectInterface *__hidden), void *))(*(void *)free + 112))(free, v16);
  }
}

uint64_t ___ZN28AppleBCMWLANBusInterfacePCIe17UpdateReport_ImplEP6OSDatajPjyyP18IOMemoryDescriptor_block_invoke(uint64_t a1)
{
  return AppleBCMWLANBusInterfacePCIe::updateReportGated(*(IOService **)(a1 + 32), *(OSCollection **)(a1 + 40), (OSData *)*(unsigned int *)(a1 + 80), *(unsigned int **)(a1 + 48), *(unsigned int **)(a1 + 56), *(void *)(a1 + 64), *(IOMemoryDescriptor **)(a1 + 72));
}

unint64_t AppleBCMWLANBusInterfacePCIe::getContinuousTimeOffset(AppleBCMWLANBusInterfacePCIe *this)
{
  return atomic_load((unint64_t *)(*((void *)this + 9) + 5384));
}

void AppleBCMWLANBusInterfacePCIe::gatherEPConfigRegSpace(AppleBCMWLANBusInterfacePCIe *this, void *a2)
{
  uint64_t foundCapabilityOffset = 0;
  uint64_t v2 = *((void *)this + 9);
  uint64_t v3 = *(IOPCIDevice **)(v2 + 3248);
  uint64_t Logger = AppleBCMWLANBusInterface::getLogger(this);
  uint64_t v5 = (CCLogStream *)Logger;
  if (v3)
  {
    for (uint64_t i = 0; i != 64; i += 4)
      IOPCIDevice::ConfigurationRead32(v3, i, (uint32_t *)(v2 + 1344 + i));
    if (IOPCIDevice::FindPCICapability(v3, 0x10u, 0, &foundCapabilityOffset, 0))
    {
      if (v5 && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(v5, "[dk] %s@%d:No PCIe Express Capability Register on the EP\n");
      }
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v8 = foundCapabilityOffset;
      do
      {
        IOPCIDevice::ConfigurationRead32(v3, v8 + v7, (uint32_t *)(v2 + 1464 + v7));
        v7 += 4;
      }
      while (v7 != 36);
      if (v5 && CCLogStream::shouldLog()) {
        CCLogStream::logAlert(v5, "[dk] %s@%d:DeviceCtl 0x%08x DeviceStatus 0x%08x LinkStatus 0x%08x\n");
      }
    }
    uint64_t foundCapabilityOffset = 0;
    if (IOPCIDevice::FindPCICapability(v3, 0xFFFFFFFF, 0, &foundCapabilityOffset, 0))
    {
      if (v5)
      {
        if (CCLogStream::shouldLog()) {
          CCLogStream::logAlert(v5, "[dk] %s@%d:No AER Capability on the EP\n");
        }
      }
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = foundCapabilityOffset;
      do
      {
        IOPCIDevice::ConfigurationRead32(v3, v10 + v9, (uint32_t *)(v2 + 1408 + v9));
        v9 += 4;
      }
      while (v9 != 56);
      if (v5)
      {
        if (CCLogStream::shouldLog()) {
          CCLogStream::logAlert(v5, "[dk] %s@%d:Received AER, Config Reg Space Dump : UnCorErrStat 0x%08x CorrErrStat 0x%08x AERCapCtl 0x%08x\n", "gatherEPConfigRegSpace", 17525, *(_DWORD *)(v2 + 1412), *(_DWORD *)(v2 + 1424), *(_DWORD *)(v2 + 1432));
        }
        if (CCLogStream::shouldLog()) {
          CCLogStream::logAlert(v5, "[dk] %s@%d:HeaderLog 0 to 3 0x%08x 0x%08x 0x%x 0x%08x\n");
        }
      }
    }
  }
  else if (Logger && CCLogStream::shouldLog())
  {
    CCLogStream::logAlert(v5, "[dk] %s@%d:No wlan IOPCIDevice nub found\n");
  }
}

void ___ZN28AppleBCMWLANBusInterfacePCIe24PortErrorMsgHandler_ImplEP8OSActionP8OSNumberS3_P6OSData_block_invoke(uint64_t a1)
{
}

void AppleBCMWLANBusInterfacePCIe::pciePortErrorDispatch(OSObject *a1)
{
  uint64_t v11 = &v11;
  int v12 = &v11;
  IOLockLock(*((IOLock **)a1[1].ivars + 352));
  ivars = a1[1].ivars;
  uint64_t v3 = (char *)ivars + 1504;
  uint64_t v4 = (void *)*((void *)ivars + 189);
  if ((OSObject_IVars *)*v4 != (OSObject_IVars *)((char *)ivars + 1504)
    || (uint64_t v5 = *(void *)v3, *(char **)(*(void *)v3 + 8) != v3))
  {
    __break(1u);
  }
  if ((char *)v5 == v3)
  {
    uint64_t v11 = &v11;
    int v12 = &v11;
  }
  else
  {
    uint64_t v11 = *(void **)v3;
    int v12 = (void **)v4;
    *(void *)(v5 + 8) = &v11;
    *uint64_t v4 = &v11;
    *((void *)ivars + 188) = (char *)ivars + 1504;
    *((void *)ivars + 189) = v3;
    ivars = a1[1].ivars;
  }
  IOLockUnlock(*((IOLock **)ivars + 352));
  uint64_t v6 = (void **)v11;
  if (v11 != &v11)
  {
    do
    {
      uint64_t v7 = v6 - 2;
      uint64_t v8 = *v6;
      if (((unsigned int (*)(OSObject *, void, void))a1->OSMetaClassBase::__vftable[21].getMetaClass)(a1, *((unsigned int *)v6 - 4), *(v6 - 1)))
      {
        uint64_t ClassNameHelper = (const char *)getClassNameHelper(a1);
        panic("%s::%s(): PCIe port error type %u not handled", ClassNameHelper, "pciePortErrorDispatch", *(_DWORD *)v7);
      }
      uint64_t v9 = v7[1];
      if (v9)
      {
        (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
        v7[1] = 0;
      }
      IOFree(v7, 0x20uLL);
      uint64_t v6 = (void **)v8;
    }
    while (v8 != &v11);
  }
}

uint64_t AppleBCMWLANBusInterfacePCIe::PortErrorMsgHandlerGated(AppleBCMWLANBusInterfacePCIe *this, int a2, OSData *a3)
{
  (*(void (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 184))(this);
  uint64_t v6 = *(void *)(*((void *)this + 9) + 4544);
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    *(void *)(*((void *)this + 9) + 4544) = 0;
  }
  if (a3) {
    *(void *)(*((void *)this + 9) + 4544) = OSData::withData(a3);
  }
  if (a2 == 3)
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logEmergency(Logger, "[dk] %s@%d:Bad request received from endpoint\n", "PortErrorMsgHandlerGated", 17732);
      }
    }
    uint64_t v10 = 3758097084;
    AppleBCMWLANBusInterfacePCIe::forcedSoCRAMRead(this, (const OSData **)(*((void *)this + 9) + 3688), (const void **)(*((void *)this + 9) + 3696));
    goto LABEL_23;
  }
  if (a2 == 2) {
    goto LABEL_22;
  }
  if (a2 != 1)
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      uint64_t v10 = 0;
      if (!CCLogStream::shouldLog()) {
        goto LABEL_23;
      }
      uint64_t v11 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logEmergency(v11, "[dk] %s@%d:Unexpected error reported %d\n", "PortErrorMsgHandlerGated", 17738, a2);
    }
LABEL_22:
    uint64_t v10 = 0;
    goto LABEL_23;
  }
  int isPortControlAMFMManagedDK = AppleOLYHALPortInterfacePCIe::isPortControlAMFMManagedDK(*(AppleOLYHALPortInterfacePCIe **)(*((void *)this + 9) + 5184), 0);
  uint64_t v8 = *((void *)this + 9);
  if (isPortControlAMFMManagedDK && !*(unsigned char *)(v8 + 3706)) {
    return 0;
  }
  if ((AppleOLYHALPortInterfacePCIe::isPortControlAMFMManagedDK(*(AppleOLYHALPortInterfacePCIe **)(v8 + 5184), 0) & 1) == 0)
  {
    uint64_t FaultReporter = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(this);
    CCFaultReporter::reportFault(FaultReporter, 5u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANBusInterfacePCIe.cpp", 0x453Au, "PortErrorMsgHandlerGated", 0, -469794028, "unexpected link down");
  }
  if (*(unsigned char *)(*((void *)this + 9) + 3705)) {
    uint64_t v10 = 3758097084;
  }
  else {
    uint64_t v10 = 0;
  }
LABEL_23:
  uint64_t v12 = *((void *)this + 9);
  if (*(unsigned char *)(v12 + 3705)) {
    uint64_t v13 = *(unsigned int *)(v12 + 4528);
  }
  else {
    uint64_t v13 = 1000;
  }
  IOSleep(v13);
  uint64_t v14 = *((void *)this + 9);
  if (*(_DWORD *)(v14 + 2844) != 2) {
    AppleOLYHALPortInterfacePCIe::setDeviceWakeDK(*(AppleOLYHALPortInterfacePCIe **)(v14 + 5184), *(unsigned char *)(v14 + 1232), 0);
  }
  return v10;
}

uint64_t AppleBCMWLANBusInterfacePCIe::forcedSoCRAMRead(AppleBCMWLANBusInterfacePCIe *this, const OSData **a2, const void **a3)
{
  (*(void (**)(AppleBCMWLANBusInterfacePCIe *, const char *, uint64_t))(*(void *)this + 1208))(this, "forcedSoCRAMRead", 17772);
  AppleBCMWLANChipBackplane::forcePower(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 1, 0);
  if ((AppleBCMWLANBusInterfacePCIe::checkTCMAccessibility(this) & 1) == 0)
  {
    AppleBCMWLANChipBackplane::forcePower(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0, 0);
    return 0;
  }
  unsigned int v6 = (*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 1008))(this);
  if (!v6)
  {
    AppleBCMWLANChipBackplane::forcePower(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0, 0);
    return 3758096385;
  }
  size_t v7 = v6;
  if (*a2)
  {
    ((void (*)(const OSData *))(*a2)->release)(*a2);
    *a2 = 0;
  }
  *a3 = 0;
  *a2 = OSData::withCapacity(v7);
  uint64_t v8 = IO80211Buffer::allocBufferSingle();
  uint64_t v10 = *((void *)this + 9);
  if (!v8)
  {
    AppleBCMWLANChipBackplane::forcePower(*(AppleBCMWLANChipBackplane **)(v10 + 3360), 0, 0);
    return 3758097085;
  }
  uint64_t v11 = (IO80211Buffer *)v8;
  uint64_t v12 = *(AppleBCMWLANChipMemory **)(v10 + 3368);
  if (v12
    || (*(void *)(*((void *)this + 9) + 3368) = AppleBCMWLANChipMemory::withMap(0, *(IOMemoryMap **)(v10 + 3280), *(AppleBCMWLANChipManagerPCIe **)(v10 + 3144), v9), (uint64_t v12 = *(AppleBCMWLANChipMemory **)(*((void *)this + 9) + 3368)) != 0))
  {
    AppleBCMWLANChipMemory::readRAM(v12, 0, v7, v11, 0);
    uint64_t v13 = (OSData *)*a2;
    uint64_t BytesNoCopy = (const void *)IO80211Buffer::getBytesNoCopy(v11);
    OSData::appendBytes(v13, BytesNoCopy, v7);
    *a3 = OSData::getBytesNoCopy(*a2);
    AppleBCMWLANChipBackplane::forcePower(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0, 0);
    uint64_t v15 = *((void *)this + 9);
    uint64_t v16 = *(void *)(v15 + 3368);
    if (v16)
    {
      (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
      *(void *)(*((void *)this + 9) + 3368) = 0;
      uint64_t v15 = *((void *)this + 9);
    }
    *(void *)(v15 + 3392) = 0;
    *(_OWORD *)(v15 + 3376) = 0u;
    IO80211Buffer::returnBuffer(v11);
    (*(void (**)(void))(MEMORY[0] + 72))(0);
    return 0;
  }
  uint64_t v17 = 3758097086;
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logCrit(Logger, "[dk] %s@%d:PCIe: Failed to map resources Read/Write\n", "forcedSoCRAMRead", 17814);
    }
  }
  return v17;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::PortErrorMsgHandlerGated(AppleBCMWLANBusInterfacePCIe *this, int a2, OSData *a3)
{
  return AppleBCMWLANBusInterfacePCIe::PortErrorMsgHandlerGated((AppleBCMWLANBusInterfacePCIe *)((char *)this - 64), a2, a3);
}

uint64_t AppleBCMWLANBusInterfacePCIe::wake(AppleBCMWLANBusInterfacePCIe *this)
{
  int v2 = 5;
  do
  {
    uint64_t v3 = *((void *)this + 9);
    if (*(_DWORD *)(v3 + 2844) != 2)
    {
      *(unsigned char *)(v3 + 1232) = 0;
      AppleOLYHALPortInterfacePCIe::setDeviceWakeDK(*(AppleOLYHALPortInterfacePCIe **)(*((void *)this + 9) + 5184), 0, 0);
      uint64_t v3 = *((void *)this + 9);
    }
    IOSleep(*(unsigned int *)(v3 + 4532));
    uint64_t v4 = *((void *)this + 9);
    if (*(_DWORD *)(v4 + 2844) != 2)
    {
      *(unsigned char *)(v4 + 1232) = 1;
      AppleOLYHALPortInterfacePCIe::setDeviceWakeDK(*(AppleOLYHALPortInterfacePCIe **)(*((void *)this + 9) + 5184), 1, 0);
      uint64_t v4 = *((void *)this + 9);
    }
    IOSleep(*(unsigned int *)(v4 + 4532));
    --v2;
  }
  while (v2);
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::wake(AppleBCMWLANBusInterfacePCIe *this)
{
  return 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::wakeupHost(AppleBCMWLANBusInterfacePCIe *this)
{
  int v2 = *(AppleBCMWLANChipManagerPCIe **)(*((void *)this + 9) + 3280);
  if (v2)
  {
    if (AppleBCMWLANChipManagerPCIe::hostWakeToggleNotConfigured(v2))
    {
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logInfo(Logger, "[dk] %s@%d:Attempting to trigger immediate host wake with trap\n", "wakeupHost", 17892);
        }
      }
      (*(void (**)(AppleBCMWLANBusInterfacePCIe *, uint64_t))(*(void *)this + 216))(this, 3);
      uint64_t v3 = (*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *, uint64_t))(*(void *)this + 200))(this, 17894);
      if (v3)
      {
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            size_t v7 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v7, "[dk] %s@%d:Forced Host wake Trap failed\n", "wakeupHost", 17897);
          }
        }
        *(_DWORD *)(*((void *)this + 9) + 4184) = 0;
      }
    }
    else
    {
      AppleBCMWLANBusInterfacePCIe::setHostWakeLevel(this, 1);
      return 0;
    }
  }
  else
  {
    uint64_t v3 = 3758097131;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v4 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v4, "[dk] %s@%d:Skipping Forced Host wake on account of Link Down\n", "wakeupHost", 17883);
      }
    }
  }
  return v3;
}

AppleBCMWLANBusInterface *AppleBCMWLANBusInterfacePCIe::setHostWakeLevel(AppleBCMWLANBusInterfacePCIe *this, int a2)
{
  BOOL result = (AppleBCMWLANBusInterface *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *, const char *, uint64_t))(*(void *)this + 1208))(this, "setHostWakeLevel", 17908);
  uint64_t v5 = *((void *)this + 9);
  if (!*(unsigned char *)(v5 + 1304) && *(void *)(v5 + 3248) && !*(unsigned char *)(v5 + 3706))
  {
    int v6 = *(unsigned __int8 *)(v5 + 2869);
    if (*(unsigned char *)(v5 + 2869))
    {
      AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 0);
      uint64_t v5 = *((void *)this + 9);
    }
    AppleBCMWLANChipBackplane::writeCommonCoreReg32(*(AppleBCMWLANChipBackplane **)(v5 + 3360), 0xC40u, 0);
    AppleBCMWLANChipBackplane::writeCommonCoreReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0xE00u, 1u);
    AppleBCMWLANChipBackplane::writeCommonCoreReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x6Cu, 0);
    AppleBCMWLANChipBackplane::writeCommonCoreReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x68u, 1u);
    uint32_t v7 = a2 == 1;
    BOOL result = (AppleBCMWLANBusInterface *)AppleBCMWLANChipBackplane::writeCommonCoreReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x64u, v7);
    *(unsigned char *)(*((void *)this + 9) + 376AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 0) = v7;
    if (v6)
    {
      return AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 1);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::wakeupHost(AppleBCMWLANBusInterfacePCIe *this)
{
  return AppleBCMWLANBusInterfacePCIe::wakeupHost((AppleBCMWLANBusInterfacePCIe *)((char *)this - 48));
}

uint64_t AppleBCMWLANBusInterfacePCIe::getTimestampingCapabilities(AppleBCMWLANBusInterfacePCIe *this, BOOL *a2, BOOL *a3)
{
  int v3 = *(_DWORD *)(*((void *)this + 9) + 3984);
  if (!v3) {
    return 3758097095;
  }
  uint64_t result = 0;
  *a2 = v3 == 2;
  *a3 = *(_DWORD *)(*((void *)this + 9) + 3984) == 3;
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::getTimestampingCapabilities(AppleBCMWLANBusInterfacePCIe *this, BOOL *a2, BOOL *a3)
{
  int v3 = *(_DWORD *)(*((void *)this + 3) + 3984);
  if (!v3) {
    return 3758097095;
  }
  uint64_t result = 0;
  *a2 = v3 == 2;
  *a3 = *(_DWORD *)(*((void *)this + 3) + 3984) == 3;
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::enableTimeSyncEngine(AppleBCMWLANBusInterfacePCIe *this, int a2)
{
  if (!AppleBCMWLANBusInterface::getLogger(this)
    || (AppleBCMWLANBusInterface::getLogger(this), !CCLogStream::shouldLog()))
  {
    if (!a2) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
  uint64_t ClassNameHelper = (const char *)getClassNameHelper((OSObject *)this);
  CCLogStream::logAlert(Logger, "[dk] %s@%d:[WiFiTimeSync] %s::%s fTimestampingMode = %d\n", "enableTimeSyncEngine", 17958, ClassNameHelper, "enableTimeSyncEngine", *(_DWORD *)(*((void *)this + 9) + 3984));
  if (a2) {
LABEL_4:
  }
    (*(void (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 536))(this);
LABEL_5:
  if (((*(_DWORD *)(*((void *)this + 9) + 3984) - 1) & 0xFFFFFFFD) != 0) {
    return 3758097095;
  }
  else {
    return 0;
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::enableTimeSyncEngine(AppleBCMWLANBusInterfacePCIe *this, int a2)
{
  return AppleBCMWLANBusInterfacePCIe::enableTimeSyncEngine((AppleBCMWLANBusInterfacePCIe *)((char *)this - 48), a2);
}

uint64_t AppleBCMWLANBusInterfacePCIe::disableTimeSyncEngine(AppleBCMWLANBusInterfacePCIe *this)
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::disableTimeSyncEngine(AppleBCMWLANBusInterfacePCIe *this)
{
  return 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::getPacketTSCounter(AppleBCMWLANBusInterfacePCIe *this, unsigned int *a2)
{
  unsigned int v2 = *(_DWORD *)(*((void *)this + 9) + 3988);
  *a2 = v2;
  IOLog("[WiFiTimeSync] %s::%s, ivars->fPacketTimestampingEnabled = %d\n", "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANBusInterfacePCIe.cpp", "getPacketTSCounter", v2);
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::getPacketTSCounter(AppleBCMWLANBusInterfacePCIe *this, unsigned int *a2)
{
  unsigned int v2 = *(_DWORD *)(*((void *)this + 3) + 3988);
  *a2 = v2;
  IOLog("[WiFiTimeSync] %s::%s, ivars->fPacketTimestampingEnabled = %d\n", "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANBusInterfacePCIe.cpp", "getPacketTSCounter", v2);
  return 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::enablePacketTimestamping(AppleBCMWLANBusInterfacePCIe *this)
{
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      uint64_t ClassNameHelper = (const char *)getClassNameHelper((OSObject *)this);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:[WiFiTimeSync] %s::%s fPacketTimestampingEnabled:%d\n", "enablePacketTimestamping", 18005, ClassNameHelper, "enablePacketTimestamping", *(_DWORD *)(*((void *)this + 9) + 3988));
    }
  }
  uint64_t result = 3758097084;
  uint64_t v3 = *((void *)this + 9);
  int v4 = *(_DWORD *)(v3 + 3988);
  if (v4 != -1)
  {
    if (v4)
    {
      int v5 = v4 + 1;
    }
    else
    {
      if ((*(_DWORD *)(v3 + 3984) | 2) != 3) {
        return 3758097095;
      }
      int v5 = 1;
    }
    uint64_t result = 0;
    *(_DWORD *)(v3 + 3988) = v5;
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::enablePacketTimestamping(AppleBCMWLANBusInterfacePCIe *this)
{
  return AppleBCMWLANBusInterfacePCIe::enablePacketTimestamping((AppleBCMWLANBusInterfacePCIe *)((char *)this - 48));
}

uint64_t AppleBCMWLANBusInterfacePCIe::disablePacketTimestamping(AppleBCMWLANBusInterfacePCIe *this)
{
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      uint64_t ClassNameHelper = (const char *)getClassNameHelper((OSObject *)this);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:[WiFiTimeSync] %s::%s fPacketTimestampingEnabled:%d\n", "disablePacketTimestamping", 18044, ClassNameHelper, "disablePacketTimestamping", *(_DWORD *)(*((void *)this + 9) + 3988));
    }
  }
  uint64_t v2 = *((void *)this + 9);
  int v3 = *(_DWORD *)(v2 + 3988);
  if (v3)
  {
    *(_DWORD *)(v2 + 3988) = v3 - 1;
  }
  else if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint32_t v7 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(v7, "[dk] %s@%d:PacketTimeStamping is already disabled\n", "disablePacketTimestamping", 18048);
    }
  }
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::disablePacketTimestamping(AppleBCMWLANBusInterfacePCIe *this)
{
  return 0;
}

BOOL AppleBCMWLANBusInterfacePCIe::isPacketTimestampingEnabledGated(AppleBCMWLANBusInterfacePCIe *this)
{
  return *(_DWORD *)(*((void *)this + 9) + 3988) != 0;
}

BOOL non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::isPacketTimestampingEnabledGated(AppleBCMWLANBusInterfacePCIe *this)
{
  return *(_DWORD *)(*((void *)this + 3) + 3988) != 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::dumpTimeSyncInfo(AppleBCMWLANBusInterfacePCIe *this, char *a2)
{
  AppleBCMWLANBusInterface::getLogger(this);
  IO80211Print();
  if (*(_DWORD *)(*((void *)this + 9) + 3984) != 1)
  {
    int v3 = (AppleBCMWLANCore *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 608))(this);
    AppleBCMWLANCore::isFWTimeSyncCapable(v3);
  }
  AppleBCMWLANBusInterface::getLogger(this);
  IO80211Print();
  AppleBCMWLANBusInterface::getLogger(this);
  IO80211Print();
  AppleBCMWLANBusInterface::getLogger(this);
  IO80211Print();
  AppleBCMWLANBusInterface::getLogger(this);
  IO80211Print();
  AppleBCMWLANBusInterface::getLogger(this);
  IO80211Print();
  AppleBCMWLANBusInterface::getLogger(this);
  IO80211Print();
  AppleBCMWLANBusInterface::getLogger(this);
  IO80211Print();
  AppleBCMWLANBusInterface::getLogger(this);
  IO80211Print();
  AppleBCMWLANBusInterface::getLogger(this);
  IO80211Print();
  AppleBCMWLANBusInterface::getLogger(this);
  IO80211Print();
  AppleBCMWLANBusInterface::getLogger(this);
  IO80211Print();
  AppleBCMWLANBusInterface::getLogger(this);
  IO80211Print();
  AppleBCMWLANBusInterface::getLogger(this);
  IO80211Print();
  AppleBCMWLANBusInterface::getLogger(this);
  IO80211Print();
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::dumpTimeSyncInfo(AppleBCMWLANBusInterfacePCIe *this, char *a2)
{
  return 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::configureTimeSyncCapability(OSObject *this, int a2, int a3)
{
  int v17 = -1431655766;
  if (a3 == 2)
  {
    ivars = this[1].ivars;
    int v5 = 3;
LABEL_7:
    *((_DWORD *)ivars + 996) = v5;
    goto LABEL_8;
  }
  if (a3 == 1)
  {
    *((_DWORD *)this[1].ivars + 996) = 0;
    goto LABEL_8;
  }
  ivars = this[1].ivars;
  if (a2)
  {
    int v5 = 1;
    goto LABEL_7;
  }
  if ((*((_DWORD *)ivars + 996) - 1) >= 2)
  {
    char v16 = 0;
    if (IOParseBootArgNumber("wlan.sw.ts", &v16, 1))
    {
      if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
      {
        AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        if (CCLogStream::shouldLog())
        {
          uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
          if (v16) {
            uint64_t v15 = "enable";
          }
          else {
            uint64_t v15 = "disable";
          }
          CCLogStream::logAlert(Logger, "[dk] %s@%d:[WiFiTimeSync] Force WiFi software timestamping %s\n", "configureTimeSyncCapability", 18442, v15);
        }
      }
    }
    if (v16) {
      int v9 = 3;
    }
    else {
      int v9 = 0;
    }
    *((_DWORD *)this[1].ivars + 996) = v9;
  }
LABEL_8:
  if (IOParseBootArgNumber("wlan.pcie.tslogingenabled", &v17, 4)) {
    *((unsigned char *)this[1].ivars + 4412) = v17 != 0;
  }
  int v6 = this[1].ivars;
  if (*((unsigned char *)v6 + 4412))
  {
    BOOL v7 = IOParseBootArgNumber("wlan.pcie.tsicmpv6logingenabled", &v17, 4);
    int v6 = this[1].ivars;
    if (v7)
    {
      *((unsigned char *)v6 + 4413) = v17 != 0;
      int v6 = this[1].ivars;
    }
  }
  if (*((unsigned char *)v6 + 4412))
  {
    AppleBCMWLANBusInterfacePCIe::createTimestampLoggers((AppleBCMWLANBusInterfacePCIe *)this);
    int v6 = this[1].ivars;
  }
  *((_DWORD *)v6 + 998) = 1;
  if (IOParseBootArgNumber("wlan.ts.ignore.ifbmap", &v17, 4))
  {
    *((_DWORD *)this[1].ivars + 998) = v17;
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v12 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(v12, "[dk] %s@%d:[WiFiTimeSync] fIgnoreTimeStampingIfBitmap : 0x%x\n", "configureTimeSyncCapability", 18468, *((_DWORD *)this[1].ivars + 998));
      }
    }
  }
  *((unsigned char *)this[1].ivars + 3996) = 0;
  if (IOParseBootArgNumber("wlan.debug.tweak.ts", &v17, 4))
  {
    *((unsigned char *)this[1].ivars + 3996) = v17 != 0;
    if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
    {
      AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v13 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
        CCLogStream::logAlert(v13, "[dk] %s@%d:[WiFiTimeSync] fTweakAllTxAsTS : %d\n", "configureTimeSyncCapability", 18475, *((_DWORD *)this[1].ivars + 998));
      }
    }
  }
  *((unsigned char *)this[1].ivars + 3997) = 39;
  if (IOParseBootArgNumber("wlan.ts.rts", &v17, 4) && !v17) {
    *((unsigned char *)this[1].ivars + 3997) &= ~0x20u;
  }
  if (IOParseBootArgNumber("wlan.ts.retry", &v17, 4) && v17) {
    *((unsigned char *)this[1].ivars + 3997) &= ~1u;
  }
  if (IOParseBootArgNumber("wlan.ts.aggr", &v17, 4) && v17) {
    *((unsigned char *)this[1].ivars + 3997) &= ~2u;
  }
  if (IOParseBootArgNumber("wlan.ts.fixed_rate", &v17, 4) && !v17) {
    *((unsigned char *)this[1].ivars + 3997) &= ~4u;
  }
  if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
  {
    AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v10 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      CCLogStream::logAlert(v10, "[dk] %s@%d:[WiFiTimeSync] fTSTxExtendedFlags : 0x%x\n", "configureTimeSyncCapability", 18500, *((unsigned __int8 *)this[1].ivars + 3997));
    }
  }
  if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
  {
    AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v11 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      CCLogStream::logAlert(v11, "[dk] %s@%d:[WiFiTimeSync] host fHWTimestampingCapable=%d, host fSWTimestampingCapable=%d\n", "configureTimeSyncCapability", 18504, *((_DWORD *)this[1].ivars + 996) == 2, *((_DWORD *)this[1].ivars + 996) == 3);
    }
  }
  getClassNameHelper(this);
  io80211_os_log();
  ((void (*)(OSObject *, void))this->OSMetaClassBase::__vftable[8].init)(this, 0);
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::configureTimeSyncCapability(AppleBCMWLANBusInterfacePCIe *this, int a2, int a3)
{
  return 0;
}

AppleBCMWLANBusInterfacePCIe *AppleBCMWLANBusInterfacePCIe::workaroundPTMIfNeeded(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t v1 = *((void *)this + 9);
  if (*(unsigned char *)(v1 + 4001) && *(unsigned char *)(v1 + 1306))
  {
    uint64_t v2 = this;
    IOPCIDevice::SetASPMState(*(IOPCIDevice **)(v1 + 3248), 0, 0);
    AppleBCMWLANBusInterfacePCIe::configurePTM(v2, 1);
    if (AppleBCMWLANBusInterface::getLogger(v2))
    {
      AppleBCMWLANBusInterface::getLogger(v2);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(v2);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:[WiFiTimeSync] Starting PTM Dialog\n", "workaroundPTMIfNeeded", 18517);
      }
    }
    AppleBCMWLANBusInterfacePCIe::writeH2DMailbox(v2, 0x1000000);
    int v3 = *(uint64_t (**)(void))(**(void **)(*((void *)v2 + 9) + 3616) + 120);
    return (AppleBCMWLANBusInterfacePCIe *)v3();
  }
  return this;
}

AppleBCMWLANBusInterfacePCIe *non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::workaroundPTMIfNeeded(AppleBCMWLANBusInterfacePCIe *this)
{
  return AppleBCMWLANBusInterfacePCIe::workaroundPTMIfNeeded((AppleBCMWLANBusInterfacePCIe *)((char *)this - 48));
}

uint64_t AppleBCMWLANBusInterfacePCIe::getTimeSyncInfo(void *a1, char *__dst)
{
  if (*(_DWORD *)(a1[9] + 3984) == 1)
  {
    strcpy(__dst, "TimeSync Capability:\n\tFirmware: PTM Timestamping \n\tHost: ");
  }
  else
  {
    int v4 = (AppleBCMWLANCore *)(*(uint64_t (**)(void *))(*a1 + 608))(a1);
    if (AppleBCMWLANCore::isFWTimeSyncCapable(v4))
    {
      int v5 = "TimeSync Capability:\n\tFirmware: Legacy HW Timestamping \n\tHost: ";
    }
    else
    {
      *((_DWORD *)__dst + 16) = 2112116;
      int v5 = "TimeSync Capability:\n\tFirmware: HW Timestamping Not capable\n\tHost: ";
    }
    long long v6 = *((_OWORD *)v5 + 1);
    *(_OWORD *)long long __dst = *(_OWORD *)v5;
    *((_OWORD *)__dst + AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 1) = v6;
    long long v7 = *((_OWORD *)v5 + 3);
    *((_OWORD *)__dst + 2) = *((_OWORD *)v5 + 2);
    *((_OWORD *)__dst + 3) = v7;
  }
  unsigned int v8 = *(_DWORD *)(a1[9] + 3984) - 1;
  if (v8 > 2) {
    int v9 = "Timestamping NOT capable\n";
  }
  else {
    int v9 = off_10038D850[v8];
  }
  strlcat(__dst, v9, 0x100uLL);
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::getTimeSyncInfo(uint64_t a1, char *a2)
{
  return 0;
}

BOOL AppleBCMWLANBusInterfacePCIe::shouldDeferError(AppleBCMWLANBusInterfacePCIe *this, int a2)
{
  BOOL result = 0;
  if (a2 <= -469793000)
  {
    switch(a2)
    {
      case -469794036:
        return result;
      case -469794023:
        uint64_t v4 = *((void *)this + 9);
        uint64_t v5 = 4578;
        return *(unsigned __int8 *)(v4 + v5) == 0;
      case -469794020:
        return result;
    }
    return 1;
  }
  if ((a2 + 469792999) > 9 || ((1 << (a2 - 25)) & 0x207) == 0)
  {
    if (a2 == -469790715)
    {
      uint64_t v4 = *((void *)this + 9);
      uint64_t v5 = 4574;
      return *(unsigned __int8 *)(v4 + v5) == 0;
    }
    return 1;
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::attachSoCRAMFile(AppleBCMWLANBusInterfacePCIe *this, CCFaultReport *a2)
{
  AppleBCMWLANBusInterface::getCCLogs(this, (uint64_t)v31);
  if ((CCDataStream::hasProfileLoaded(v32) & 1) == 0
    && !AppleBCMWLAN_isSoCRAMCaptureAllowed()
    && (AppleBCMWLANChipManagerPCIe::isSafeToCaptureSoCRAM(*(AppleBCMWLANChipManagerPCIe **)(*((void *)this + 9)
                                                                                           + 3280)) & 1) == 0)
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        AppleBCMWLANBusInterface::getCCLogs(this, (uint64_t)v31);
        int hasProfileLoaded = CCDataStream::hasProfileLoaded(v32);
        BOOL isSoCRAMCaptureAllowed = AppleBCMWLAN_isSoCRAMCaptureAllowed();
        int isSafeToCaptureSoCRAM = AppleBCMWLANChipManagerPCIe::isSafeToCaptureSoCRAM(*(AppleBCMWLANChipManagerPCIe **)(*((void *)this + 9) + 3280));
        CCLogStream::logAlert(Logger, "[dk] %s@%d:Bail out SoCRAM dump: hasProfileLoaded()=%d, AppleBCMWLAN_isSoCRAMCaptureAllowed()=%d, isSafeToCaptureSoCRAM()=%d\n", "attachSoCRAMFile", 18660, hasProfileLoaded, isSoCRAMCaptureAllowed, isSafeToCaptureSoCRAM);
      }
    }
    char v16 = OSString::withCString("SoC_RAM");
    int v17 = OSString::withCString("Logging profile not enabled or device not debuggable");
    AppleBCMWLANBusInterface::sendCCMissingFileInfoToCoreAnalytics(this, v16, v17);
    uint64_t v9 = 0;
    goto LABEL_28;
  }
  uint32_t v4 = (*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 1008))(this);
  if (!v4)
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v22 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v22, "[dk] %s@%d:Bail out SoCRAM dump: SoCRAM size is 0\n", "attachSoCRAMFile", 18633);
      }
    }
    uint64_t v14 = OSString::withCString("SoC_RAM");
    uint64_t v15 = OSString::withCString("RAM size read is 0");
    AppleBCMWLANBusInterface::sendCCMissingFileInfoToCoreAnalytics(this, v14, v15);
    return 3758096385;
  }
  if (!a2) {
    return 3758096385;
  }
  uint32_t v5 = v4;
  if (AppleBCMWLANBusInterfacePCIe::isTCMAccessible(this))
  {
    uint64_t v6 = v5;
    OSDataPtr v7 = OSData::withCapacity(v5);
    if (v7)
    {
      OSDataPtr v8 = v7;
      uint64_t v9 = (*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *, void, OSDataPtr, void, void))(*(void *)this + 992))(this, 0, v7, v5, 0);
      if (v9)
      {
        uint64_t v10 = OSString::withCString("SoC_RAM");
        uint64_t v11 = OSString::withCString("Failed to read from memory mapped segment");
        AppleBCMWLANBusInterface::sendCCMissingFileInfoToCoreAnalytics(this, v10, v11);
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v29 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v29, "[dk] %s@%d:Fail to read SoCRAM dump, rv=%x\n", "attachSoCRAMFile", 18654, v9);
          }
        }
      }
      OSStringPtr v12 = OSString::withCString("SoC_RAM.bin");
      (*(void (**)(CCFaultReport *, OSStringPtr, OSDataPtr))(*(void *)a2 + 192))(a2, v12, v8);
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v13 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logCrit(v13, "[dk] %s@%d:SoCRAM dump collected, size = %llu\n", "attachSoCRAMFile", 18657, v6);
        }
      }
LABEL_28:
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          int v23 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v23, "[dk] %s@%d:Coex SoCRAM ivars->fCoexCPUTrapped  %d  ivars->fCoexCPUTrapRequested %d\n", "attachSoCRAMFile", 18664, *(unsigned __int8 *)(*((void *)this + 9) + 3714), *(unsigned __int8 *)(*((void *)this + 9) + 3715));
        }
      }
      uint64_t v18 = *((void *)this + 9);
      if (*(unsigned char *)(v18 + 3714) || *(unsigned char *)(v18 + 3715))
      {
        AppleBCMWLANBusInterfacePCIe::attachCoexSoCRAMFile(this, a2);
        *(unsigned char *)(*((void *)this + 9) + 3714) = 0;
        *(unsigned char *)(*((void *)this + 9) + 3715) = 0;
      }
      if (AppleBCMWLANBusInterface::getCCLogDebugFlags(this))
      {
        unint64_t v19 = OSString::withCString("SoC_RAM");
        uint64_t v20 = OSString::withCString("Logging profile not enabled or device not debuggable");
        AppleBCMWLANBusInterface::sendCCMissingFileInfoToCoreAnalytics(this, v19, v20);
      }
      return v9;
    }
    uint64_t v9 = 3758097085;
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v30 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v30, "[dk] %s@%d:Bail out SoCRAM dump: No Memory\n", "attachSoCRAMFile", 18648);
      }
    }
  }
  else
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v24 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v24, "[dk] %s@%d:Bail out SoCRAM dump: TCM Not accessible.\n", "attachSoCRAMFile", 18642);
      }
    }
    return 0;
  }
  return v9;
}

uint64_t AppleBCMWLANBusInterfacePCIe::attachCoexSoCRAMFile(AppleBCMWLANBusInterfacePCIe *this, CCFaultReport *a2)
{
  if (AppleBCMWLANBusInterfacePCIe::isTCMAccessible(this))
  {
    if (!a2) {
      return 3758096385;
    }
    uint64_t v20 = 122880;
    OSDataPtr v4 = OSData::withCapacity(0x1E000u);
    if (v4)
    {
      uint32_t v5 = v4;
      AppleBCMWLANChipConfigSpace::writeReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), 0x84u, 0x1A000000u);
      uint64_t v6 = (*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *, void, const OSData *, uint64_t *, void))(*(void *)this + 1000))(this, 0, v5, &v20, 0);
      AppleBCMWLANChipConfigSpace::writeReg32(*(AppleBCMWLANChipConfigSpace **)(*((void *)this + 9) + 3352), 0x84u, 0);
      if (v6)
      {
LABEL_10:
        ((void (*)(const OSData *))v5->release)(v5);
        return v6;
      }
      OSDataPtr v7 = OSData::withCapacity((int)v20 + 128);
      OSDataPtr v8 = v7;
      *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v9 + AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v22 = v9;
      long long v23 = v9;
      unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t bytes = 0x1504D4443;
      uint64_t v10 = v20 + 8;
      uint64_t v11 = v10 << 31 >> 31;
      uint64_t v12 = (v20 + 8) + 8;
      uint64_t v13 = v12 << 31 >> 31;
      LODWORD(v22) = v20 + 16;
      if (v11 == v10 && (v11 & 0x8000000000000000) == 0 && v13 == v12 && (v13 & 0x8000000000000000) == 0)
      {
        *((void *)&v22 + AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 1) = 0x1800000000000;
        *((void *)&v23 + AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 1) = 0x600000000001;
        OSData::appendBytes(v7, &bytes, 4uLL);
        OSData::appendBytes(v8, (char *)&bytes + 4, 2uLL);
        OSData::appendBytes(v8, (char *)&bytes + 6, 2uLL);
        OSData::appendBytes(v8, &v22, 4uLL);
        OSData::appendBytes(v8, (char *)&v22 + 8, 4uLL);
        OSData::appendBytes(v8, (char *)&v22 + 12, 4uLL);
        uint64_t BytesNoCopy = OSData::getBytesNoCopy(v5, 0, 0x18000uLL);
        OSData::appendBytes(v8, BytesNoCopy, 0x18000uLL);
        OSData::appendBytes(v8, (char *)&v23 + 8, 4uLL);
        OSData::appendBytes(v8, (char *)&v23 + 12, 4uLL);
        uint64_t v15 = OSData::getBytesNoCopy(v5, 0x18000uLL, 0x6000uLL);
        OSData::appendBytes(v8, v15, 0x6000uLL);
        OSStringPtr v16 = OSString::withCString("coex_SoC_RAM.bin");
        (*(void (**)(CCFaultReport *, OSStringPtr, OSData *))(*(void *)a2 + 192))(a2, v16, v8);
        goto LABEL_10;
      }
      if (v7) {
        ((void (*)(OSData *))v7->release)(v7);
      }
      ((void (*)(const OSData *))v5->release)(v5);
      return 3758097084;
    }
    else
    {
      uint64_t v6 = 3758097085;
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(Logger, "[dk] %s@%d:Bail out Coex SoCRAM dump: No Memory\n", "attachCoexSoCRAMFile", 18710);
        }
      }
    }
  }
  else
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        unint64_t v19 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v19, "[dk] %s@%d:Bail out Coex SoCRAM dump: TCM Not accessible.\n", "attachCoexSoCRAMFile", 18686);
      }
    }
    return 0;
  }
  return v6;
}

uint64_t AppleBCMWLANBusInterfacePCIe::parseTrapMiniDump(AppleBCMWLANBusInterface *this, _DWORD *a2, uint64_t a3)
{
  uint64_t v3 = 3758097084;
  uint64_t v4 = *((void *)this + 9);
  if (!*(unsigned char *)(v4 + 4084)) {
    return v3;
  }
  uint64_t v7 = *(void *)(v4 + 2832);
  if (v7)
  {
    if ((*(unsigned char *)(v7 + 3) & 0x40) != 0) {
      return v3;
    }
  }
  unsigned int v8 = *(unsigned __int16 *)(a3 + 6);
  if (v8 >= 0x1FD)
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:Error: Trap Info Hearder Length is %d, larger than %d\n");
      }
    }
    return v3;
  }
  a2[36] = -1;
  if (v8 < 3) {
    return 0;
  }
  uint64_t v10 = (unsigned __int8 *)(a3 + 8);
  while (1)
  {
    size_t v11 = v10[1];
    if ((unint64_t)(unsigned __int16)v8 - 2 < v11) {
      break;
    }
    int v12 = *v10;
    uint64_t v13 = a2;
    if (v12 != 1)
    {
      if (v12 == 21)
      {
        uint64_t v13 = a2 + 36;
      }
      else
      {
        uint64_t v13 = a2 + 20;
        if (v12 != 2) {
          goto LABEL_17;
        }
      }
    }
    memcpy(v13, v10 + 2, v11);
LABEL_17:
    uint64_t v14 = v10[1] + 2;
    v10 += v14;
    LOWORD(v8) = v8 - v14;
    if ((unsigned __int16)v8 <= 2u) {
      return 0;
    }
  }
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      OSStringPtr v16 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(v16, "[dk] %s@%d:Error: Wrong Trap Info TLV header length\n");
    }
  }
  return v3;
}

uint64_t AppleBCMWLANBusInterfacePCIe::createTrapMiniDumpLog(AppleBCMWLANBusInterfacePCIe *this, CCFaultReport *a2)
{
  uint64_t v2 = 3758097084;
  uint64_t v3 = *((void *)this + 9);
  if (!*(unsigned char *)(v3 + 1306)) {
    return 3758097112;
  }
  if (a2 && *(unsigned char *)(v3 + 4084))
  {
    uint64_t v128 = 0;
    uint64_t v6 = (IOService *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 608))(this);
    if (acquireProperty<OSString>(v6, "ModuleInfo", &v128, 0, "IOService")) {
      CStringNoCopy = OSString::getCStringNoCopy(v128);
    }
    else {
      CStringNoCopy = "UNKNOWN";
    }
    v127 = 0;
    unsigned int v8 = (IOService *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 608))(this);
    if (acquireProperty<OSString>(v8, "FirmwareVersion", &v127, 0, "IOService")) {
      long long v9 = OSString::getCStringNoCopy(v127);
    }
    else {
      long long v9 = "UNKNOWN";
    }
    strcpy(__dst, "00000000000000000000000000000000");
    size_t v10 = strlen(v9);
    size_t v11 = strnstr(v9, "-", v10);
    if (v11)
    {
      strlcpy(__dst, v11 + 1, 9uLL);
      while (strlcat(__dst, "0", 0x21uLL) < 0x21)
        ;
    }
    else if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:Unexpected fw_ver = %s\n", "createTrapMiniDumpLog", 18851, v9);
      }
    }
    memset(out, 170, sizeof(out));
    *(void *)&__s1[29] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v12 + AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)uuid_string_t __s1 = v12;
    *(_OWORD *)&__s1[16] = v12;
    uuid_generate(out);
    uuid_unparse(out, __s1);
    size_t v13 = strnlen(__s1, 0x25uLL);
    int v135 = 0;
    memset(v134, 0, sizeof(v134));
    long long v132 = 0u;
    long long v133 = 0u;
    long long v130 = 0u;
    long long v131 = 0u;
    long long v129 = 0u;
    uint64_t v14 = *((void *)this + 9);
    if (*(unsigned char *)(v14 + 4084)) {
      AppleBCMWLANDMASlab::getItemSize(*(AppleBCMWLANDMASlab **)(v14 + 3504));
    }
    uint64_t v15 = IOMallocZeroData();
    if (v15)
    {
      OSStringPtr v16 = (void *)v15;
      uint64_t v17 = *((void *)this + 9);
      if (*(unsigned char *)(v17 + 4084))
      {
        uint64_t BytesNoCopy = (const void *)AppleBCMWLANDMASlab::getBytesNoCopy(*(AppleBCMWLANDMASlab **)(v17 + 3504), 0);
        uint64_t v19 = *((void *)this + 9);
        if (*(unsigned char *)(v19 + 4084))
        {
          unsigned int ItemSize = AppleBCMWLANDMASlab::getItemSize(*(AppleBCMWLANDMASlab **)(v19 + 3504));
LABEL_27:
          memcpy(v16, BytesNoCopy, ItemSize);
          uint64_t v21 = *(void *)(*((void *)this + 9) + 2832);
          if (!v21 || (*(unsigned char *)(v21 + 3) & 0x40) == 0) {
            AppleBCMWLANBusInterfacePCIe::parseTrapMiniDump(this, &v129, (uint64_t)v16);
          }
          int v125 = a2;
          long long v22 = (char *)IOMallocZeroData();
          long long v23 = v22;
          if (v22)
          {
            char *v22 = 0;
            unsigned int v24 = snprintf(v22, 0xFC8uLL, "\nException Type: %d\n", v129);
            if (v24 > 0xFC7)
            {
              LODWORD(v22) = 0;
              int v25 = 4040;
            }
            else
            {
              int v25 = v24;
              if (v24 == 4039)
              {
                LODWORD(v22) = 0;
              }
              else
              {
                LODWORD(v22) = snprintf(&v23[v24], 4040 - v24, "Exception Subtype: NA\n");
                int v26 = 4040;
                if (v22 > 0xFC7)
                {
LABEL_38:
                  unsigned int v27 = 0;
                  unsigned int v28 = v26 + v25;
                  if (!v23
                    || v28 > 0xFC6
                    || (int v29 = 4040,
                        unsigned int v27 = snprintf(&v23[v28], 4040 - v28, "Exception Note: trap type code is %d\n", v135),
                        v27 <= 0xFC7))
                  {
                    int v29 = v27;
                  }
                  unsigned int v30 = 0;
                  unsigned int v31 = v29 + v28;
                  if (!v23
                    || v31 > 0xFC6
                    || (v32 = 4040, unsigned int v30 = snprintf(&v23[v31], 4040 - v31, "Triggered by Thread: 0\n"), v30 <= 0xFC7))
                  {
                    int v32 = v30;
                  }
                  unsigned int v33 = 0;
                  unsigned int v34 = v32 + v31;
                  if (!v23
                    || v34 > 0xFC6
                    || (int v35 = 4040,
                        unsigned int v33 = snprintf(&v23[v34], 4040 - v34, "\nApplication Specific Information:\n"),
                        v33 <= 0xFC7))
                  {
                    int v35 = v33;
                  }
                  unsigned int v36 = 0;
                  unsigned int v37 = v35 + v34;
                  if (!v23
                    || v37 > 0xFC6
                    || (int v38 = 4040,
                        unsigned int v36 = snprintf(&v23[v37], 4040 - v37, "WiFi Module:\"%s\"\n", CStringNoCopy),
                        v36 <= 0xFC7))
                  {
                    int v38 = v36;
                  }
                  unsigned int v39 = 0;
                  unsigned int v40 = v38 + v37;
                  if (!v23
                    || v40 > 0xFC6
                    || (v41 = 4040, unsigned int v39 = snprintf(&v23[v40], 4040 - v40, "WiFi FW Version:\"%s\"\n", v9), v39 <= 0xFC7))
                  {
                    int v41 = v39;
                  }
                  __uint64_t n = v13;
                  unsigned int v42 = 0;
                  unsigned int v43 = v41 + v40;
                  if (!v23
                    || v43 > 0xFC6
                    || (int v44 = 4040,
                        uint64_t v45 = (const OSString *)(*(uint64_t (**)(CCFaultReport *))(*(void *)v125 + 56))(v125),
                        unint64_t v46 = OSString::getCStringNoCopy(v45),
                        unsigned int v42 = snprintf(&v23[v43], 4040 - v43, "WiFi Trap Summary: %s\n", v46),
                        v42 <= 0xFC7))
                  {
                    int v44 = v42;
                  }
                  unsigned int v47 = 0;
                  unsigned int v48 = v44 + v43;
                  if (!v23
                    || v48 > 0xFC6
                    || (int v49 = 4040,
                        uint64_t v50 = v16,
                        unint64_t v51 = (*(uint64_t (**)(CCFaultReport *))(*(void *)v125 + 72))(v125)
                            / 0x3B9ACA00uLL,
                        unint64_t v52 = (*(uint64_t (**)(CCFaultReport *))(*(void *)v125 + 72))(v125),
                        unint64_t v123 = v51,
                        OSStringPtr v16 = v50,
                        unsigned int v47 = snprintf(&v23[v48], 4040 - v48, "WiFi CoreCapture FaultReporter TimeStamp: %llu.%llu\n", v123, (274877907 * (v52 % 0x3B9ACA00)) >> 38), v47 <= 0xFC7))
                  {
                    int v49 = v47;
                  }
                  unsigned int v53 = 0;
                  unsigned int v54 = v49 + v48;
                  if (!v23
                    || v54 > 0xFC6
                    || (v55 = 4040, unsigned int v53 = snprintf(&v23[v54], 4040 - v54, "Log UUID: %s\n", __s1), v53 <= 0xFC7))
                  {
                    int v55 = v53;
                  }
                  unsigned int v56 = 0;
                  unsigned int v57 = v55 + v54;
                  if (!v23
                    || v57 > 0xFC6
                    || (int v58 = 4040,
                        unsigned int v56 = snprintf(&v23[v57], 4040 - v57, "\nWiFi FW Trap Type Code: %d\n", v135),
                        v56 <= 0xFC7))
                  {
                    int v58 = v56;
                  }
                  unsigned int v59 = 0;
                  unsigned int v60 = v58 + v57;
                  if (v23 && v60 <= 0xFC6)
                  {
                    uint64_t v61 = *(void *)(*((void *)this + 9) + 2832);
                    if (v61) {
                      LODWORD(v6AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 1) = (*(unsigned __int8 *)(v61 + 3) >> 6) & 1;
                    }
                    unsigned int v59 = snprintf(&v23[v60], 4040 - v60, "Nested FW Trap: %d\n", v61);
                    if (v59 > 0xFC7) {
                      unsigned int v59 = 4040;
                    }
                  }
                  unsigned int v62 = 0;
                  unsigned int v63 = v59 + v60;
                  if (!v23
                    || v63 > 0xFC6
                    || (int v64 = 4040, v62 = snprintf(&v23[v63], 4040 - v63, "\nFiltered syslog:\nNA\n"), v62 <= 0xFC7))
                  {
                    int v64 = v62;
                  }
                  unsigned int v65 = 0;
                  unsigned int v66 = v64 + v63;
                  if (!v23
                    || v66 > 0xFC6
                    || (v67 = 4040, unsigned int v65 = snprintf(&v23[v66], 4040 - v66, "\nThread 0 Crashed:\n"), v65 <= 0xFC7))
                  {
                    int v67 = v65;
                  }
                  uint64_t v68 = 0;
                  unsigned int v69 = v67 + v66;
                  do
                  {
                    unsigned int v70 = 0;
                    if (!v23
                      || v69 > 0xFC6
                      || (int v71 = 4040,
                          unsigned int v70 = snprintf(&v23[v69], 4040 - v69, "%d   WiFiFWThread            0x%010x\n", v68, *((_DWORD *)v134 + v68)), v70 <= 0xFC7))
                    {
                      int v71 = v70;
                    }
                    v69 += v71;
                    ++v68;
                  }
                  while (v68 != 16);
                  unsigned int v72 = 0;
                  if (!v23
                    || v69 > 0xFC6
                    || (int v73 = 4040,
                        unsigned int v72 = snprintf(&v23[v69], 4040 - v69, "\nThread 0 Crashed with ARM Thread State (32-bit):\n"),
                        v72 <= 0xFC7))
                  {
                    int v73 = v72;
                  }
                  unsigned int v74 = 0;
                  unsigned int v75 = v73 + v69;
                  if (!v23
                    || v75 > 0xFC6
                    || (int v76 = 4040,
                        unsigned int v74 = snprintf(&v23[v75], 4040 - v75, "    r0: 0x%08x   r1: 0x%08x   r2: 0x%08x   r3: 0x%08x\n    r4: 0x%08x   r5: 0x%08x   r6: 0x%08x   r7: 0x%08x\n    r8: 0x%08x   r9: 0x%08x  r10: 0x%08x  r11: 0x%08x\n   r12: 0x%08x  r13: 0x%08x  r14: 0x%08x  r15: 0x%08x\n  type: 0x%08x  epc: 0x%08x cpsr: 0x%08x spsr: 0x%08x\n", v130, DWORD1(v130), DWORD2(v130), HIDWORD(v130), v131, DWORD1(v131), DWORD2(v131), HIDWORD(v131), v132, DWORD1(v132), DWORD2(v132), HIDWORD(v132),
                                v133,
                                DWORD1(v133),
                                DWORD2(v133),
                                HIDWORD(v133),
                                v129,
                                DWORD1(v129),
                                DWORD2(v129),
                                HIDWORD(v129)),
                        v74 <= 0xFC7))
                  {
                    int v76 = v74;
                  }
                  unsigned int v77 = 0;
                  unsigned int v78 = v76 + v75;
                  if (!v23
                    || v78 > 0xFC6
                    || (v79 = 4040, unsigned int v77 = snprintf(&v23[v78], 4040 - v78, "\nBinary Images:\n"), v77 <= 0xFC7))
                  {
                    int v79 = v77;
                  }
                  unsigned int v80 = 0;
                  unsigned int v81 = v79 + v78;
                  if (!v23
                    || v81 > 0xFC6
                    || (int v82 = 4040,
                        unsigned int v80 = snprintf(&v23[v81], 4040 - v81, "0x00000000 - 0xffffffff WiFiFirmware arm32  <%s> /usr/share/firmware/wifi/\n", __dst), v80 <= 0xFC7))
                  {
                    int v82 = v80;
                  }
                  unsigned int v83 = 0;
                  unsigned int v84 = v82 + v81;
                  if (!v23
                    || v84 > 0xFC6
                    || (v85 = 4040, unsigned int v83 = snprintf(&v23[v84], 4040 - v84, "\nEOF\n\n"), v83 <= 0xFC7))
                  {
                    int v85 = v83;
                  }
                  if (v128)
                  {
                    ((void (*)(OSString *))v128->release)(v128);
                    uint64_t v128 = 0;
                  }
                  if (v127)
                  {
                    ((void (*)(OSString *))v127->release)(v127);
                    v127 = 0;
                  }
                  int v86 = *(unsigned __int8 *)(*((void *)this + 9) + 4084);
                  long long v87 = (char *)IOMallocZeroData();
                  if (!v87)
                  {
                    uint64_t v2 = 3758097085;
                    if (!v23) {
                      goto LABEL_139;
                    }
                    goto LABEL_138;
                  }
                  unsigned int v88 = v87;
                  if (!v86)
                  {
                    if (AppleBCMWLANBusInterface::getLogger(this))
                    {
                      AppleBCMWLANBusInterface::getLogger(this);
                      uint64_t v2 = 3758097084;
                      if (!CCLogStream::shouldLog()) {
                        goto LABEL_137;
                      }
                      goto LABEL_128;
                    }
                    goto LABEL_136;
                  }
                  size_t v89 = v85 + v84;
                  *(_DWORD *)long long v87 = 0;
                  *((_DWORD *)v87 + AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 1) = v89;
                  if (v89 > 0x18FF8)
                  {
                    if (AppleBCMWLANBusInterface::getLogger(this))
                    {
                      AppleBCMWLANBusInterface::getLogger(this);
                      uint64_t v2 = 3758097084;
                      if (!CCLogStream::shouldLog()) {
                        goto LABEL_137;
                      }
LABEL_128:
                      unsigned int v90 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                      CCLogStream::logAlert(v90, "[dk] %s@%d:Error: Invalid buf_ss pointer");
                      goto LABEL_137;
                    }
                    goto LABEL_136;
                  }
                  memcpy(v87 + 8, v23, v89);
                  unsigned int v91 = v89 + 8;
                  uint64_t v92 = *((void *)this + 9);
                  if (*(unsigned char *)(v92 + 4084)) {
                    int v93 = AppleBCMWLANDMASlab::getItemSize(*(AppleBCMWLANDMASlab **)(v92 + 3504));
                  }
                  else {
                    int v93 = 0;
                  }
                  if (v91 > 0x18FF8)
                  {
                    if (AppleBCMWLANBusInterface::getLogger(this))
                    {
                      AppleBCMWLANBusInterface::getLogger(this);
                      uint64_t v2 = 3758097084;
                      if (CCLogStream::shouldLog())
                      {
                        unsigned int v94 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                        CCLogStream::logAlert(v94, "[dk] %s@%d:Error: Invalid buf_ss header pointer");
                      }
                      goto LABEL_137;
                    }
LABEL_136:
                    uint64_t v2 = 3758097084;
                    goto LABEL_137;
                  }
                  int v96 = &v88[v91];
                  *(_DWORD *)int v96 = 1;
                  *((_DWORD *)v96 + AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 1) = __n + v93 + 4;
                  uint64_t v97 = (v89 + 16);
                  if (__n + v97 <= 0x19000)
                  {
                    memcpy(&v88[v97], __s1, __n);
                    int v99 = v97 + __n;
                    if ((v97 + __n) <= 0x18FFC)
                    {
                      *(_DWORD *)&v88[v99] = 1347241043;
                      uint64_t v101 = (v99 + 4);
                      uint64_t v102 = *((void *)this + 9);
                      if (*(unsigned char *)(v102 + 4084)) {
                        uint64_t v103 = AppleBCMWLANDMASlab::getItemSize(*(AppleBCMWLANDMASlab **)(v102 + 3504));
                      }
                      else {
                        uint64_t v103 = 0;
                      }
                      if ((unint64_t)(v103 + v101) <= 0x19000)
                      {
                        uint64_t v105 = *((void *)this + 9);
                        if (*(unsigned char *)(v105 + 4084)) {
                          size_t v106 = AppleBCMWLANDMASlab::getItemSize(*(AppleBCMWLANDMASlab **)(v105 + 3504));
                        }
                        else {
                          size_t v106 = 0;
                        }
                        memcpy(&v88[v101], v16, v106);
                        uint64_t v107 = *((void *)this + 9);
                        if (*(unsigned char *)(v107 + 4084))
                        {
                          int v108 = AppleBCMWLANDMASlab::getItemSize(*(AppleBCMWLANDMASlab **)(v107 + 3504));
                          if (*(unsigned char *)(*((void *)this + 9) + 4084)) {
                            unsigned int v109 = 102400;
                          }
                          else {
                            unsigned int v109 = 0;
                          }
                        }
                        else
                        {
                          unsigned int v109 = 0;
                          int v108 = 0;
                        }
                        size_t v110 = (v108 + v101);
                        if (v110 <= v109)
                        {
                          int v112 = (const OSString *)(*(uint64_t (**)(CCFaultReport *))(*(void *)v125 + 56))(v125);
                          int v113 = *(CCDataStream **)(*((void *)this + 9) + 3800);
                          int v114 = OSString::getCStringNoCopy(v112);
                          if (CCDataStream::openSession(v113, v114))
                          {
                            v126[0] = 0xAAAAAAAAAAAAAAAALL;
                            v126[1] = 0xAAAAAAAAAAAAAAAALL;
                            (*(void (**)(CCFaultReport *, void *))(*(void *)v125 + 64))(v125, v126);
                            CCDataSession::setTimestamp();
                          }
                          if (*(unsigned char *)(*((void *)this + 9) + 4084)) {
                            uint32_t v115 = 102400;
                          }
                          else {
                            uint32_t v115 = 0;
                          }
                          int v116 = OSData::withCapacity(v115);
                          OSData::appendBytes(v116, v88, v110);
                          CCDataStream::saveData();
                          if (v116) {
                            ((void (*)(OSData *))v116->release)(v116);
                          }
                          CCDataStream::closeSession();
                          if (*(void *)(*((void *)this + 9) + 1520))
                          {
                            if (AppleBCMWLANBusInterface::getLogger(this))
                            {
                              AppleBCMWLANBusInterface::getLogger(this);
                              if (CCLogStream::shouldLog())
                              {
                                BOOL v117 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                                CCLogStream::logAlert(v117, "[dk] %s@%d:Preview trap crashtracer mini dump is in process.\n");
                              }
                            }
                          }
                          else
                          {
                            *(void *)(*((void *)this + 9) + 152AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 0) = IOMallocZeroData();
                            uint64_t v118 = *((void *)this + 9);
                            int v119 = *(void **)(v118 + 1520);
                            if (v119)
                            {
                              if (*(unsigned char *)(v118 + 4084)) {
                                size_t v120 = 102400;
                              }
                              else {
                                size_t v120 = 0;
                              }
                              memcpy(v119, v88, v120);
                              (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 9) + 4088)
                                                                      + 120))(*(void *)(*((void *)this + 9) + 4088), 20000);
                            }
                            else if (AppleBCMWLANBusInterface::getLogger(this))
                            {
                              AppleBCMWLANBusInterface::getLogger(this);
                              if (CCLogStream::shouldLog())
                              {
                                int v122 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                                CCLogStream::logAlert(v122, "[dk] %s@%d:Failed to allocate trap crashtracer mini dump buffer\n");
                              }
                            }
                          }
                          uint64_t v2 = 0;
                        }
                        else
                        {
                          if (!AppleBCMWLANBusInterface::getLogger(this)) {
                            goto LABEL_136;
                          }
                          AppleBCMWLANBusInterface::getLogger(this);
                          uint64_t v2 = 3758097084;
                          if (CCLogStream::shouldLog())
                          {
                            int v111 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                            CCLogStream::logAlert(v111, "[dk] %s@%d:Error: size of trap Crashtracer mini dump blob is %d. larger than %d\n");
                          }
                        }
                      }
                      else
                      {
                        if (!AppleBCMWLANBusInterface::getLogger(this)) {
                          goto LABEL_136;
                        }
                        AppleBCMWLANBusInterface::getLogger(this);
                        uint64_t v2 = 3758097084;
                        if (CCLogStream::shouldLog())
                        {
                          int v104 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                          CCLogStream::logAlert(v104, "[dk] %s@%d:Error: Invalid buf_ss FWMiniDumpBuffer pointer");
                        }
                      }
                    }
                    else
                    {
                      uint64_t v2 = 3758097084;
                      if (AppleBCMWLANBusInterface::getLogger(this))
                      {
                        AppleBCMWLANBusInterface::getLogger(this);
                        if (CCLogStream::shouldLog())
                        {
                          uint64_t v100 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                          CCLogStream::logAlert(v100, "[dk] %s@%d:Error: Invalid buf_ss marker_sdmp pointer");
                        }
                      }
                    }
                  }
                  else
                  {
                    uint64_t v2 = 3758097084;
                    if (AppleBCMWLANBusInterface::getLogger(this))
                    {
                      AppleBCMWLANBusInterface::getLogger(this);
                      if (CCLogStream::shouldLog())
                      {
                        int v98 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
                        CCLogStream::logAlert(v98, "[dk] %s@%d:Error: Invalid buf_ss uuid_buf pointer");
                      }
                    }
                  }
LABEL_137:
                  IOFreeData();
                  if (!v23)
                  {
LABEL_139:
                    IOFreeData();
                    return v2;
                  }
LABEL_138:
                  IOFreeData();
                  goto LABEL_139;
                }
              }
            }
          }
          else
          {
            int v25 = 0;
          }
          int v26 = (int)v22;
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t BytesNoCopy = 0;
      }
      unsigned int ItemSize = 0;
      goto LABEL_27;
    }
    return 3758097085;
  }
  return v2;
}

uint64_t AppleBCMWLANBusInterfacePCIe::skipTCMAccess(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t v1 = *((void *)this + 9);
  uint64_t v2 = *(_DWORD **)(v1 + 2832);
  if (!v2) {
    return 0;
  }
  if (*v2 == 0x10000000) {
    return 1;
  }
  uint64_t result = AppleBCMWLANChipManagerPCIe::isMultiFunctionChip(*(AppleBCMWLANChipManagerPCIe **)(v1 + 3280));
  if (result)
  {
    uint64_t v5 = *((void *)this + 9);
    int v6 = **(_DWORD **)(v5 + 2832);
    if (v6) {
      BOOL v7 = (unsigned __int16)**(_DWORD **)(v5 + 2832) == 0;
    }
    else {
      BOOL v7 = 0;
    }
    if (!v7) {
      return 0;
    }
    int v8 = *(_DWORD *)(v5 + 4540);
    if (v8 == 2) {
      panic("TCM access with inactive device core. ivars->fFWHealthCheck 0x%x\n", v6);
    }
    return v8 == 0;
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::dumpAPBRegisters(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t v2 = -16;
  do
  {
    int v3 = *(_DWORD *)(*((void *)this + 9) + v2 + 5316);
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:CB0 Wrapper Register Offset 0x%x Value 0x%x\n", "dumpAPBRegisters", 19930, v2 + 2064, v3);
      }
    }
    v2 += 4;
  }
  while (v2);
  uint64_t v5 = -32;
  do
  {
    int v6 = *(_DWORD *)(*((void *)this + 9) + v5 + 5348);
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        BOOL v7 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:CB0 Wrapper Register Offset 0x%x Value 0x%x\n", "dumpAPBRegisters", 19936, v5 + 2336, v6);
      }
    }
    v5 += 4;
  }
  while (v5);
  uint64_t v8 = -32;
  do
  {
    int v9 = *(_DWORD *)(*((void *)this + 9) + v8 + 5380);
    uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
    if (result)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        size_t v11 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        uint64_t result = CCLogStream::logAlert(v11, "[dk] %s@%d:CB1 Wrapper Register Offset 0x%x Value 0x%x\n", "dumpAPBRegisters", 19943, (int)v8 + 2336, v9);
      }
    }
    v8 += 4;
  }
  while (v8);
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::checkPMNIAPB(AppleBCMWLANBusInterfacePCIe *this)
{
  unsigned int v17 = -1431655766;
  unsigned int v16 = -1431655766;
  if (AppleBCMWLANChipBackplane::readPMNICBAPBWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x140u, &v17))
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:Failed to read PMNI CB APB wrapper resetctl: 0x%x\n");
      }
    }
    goto LABEL_13;
  }
  if (v17)
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        long long v12 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v12, "[dk] %s@%d:PMNI CB APB resetctl wrapper reg non-zero: 0x%x\n");
      }
    }
    goto LABEL_13;
  }
  if (AppleBCMWLANChipBackplane::readPMNICBAPBWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x110u, &v17))
  {
    if (!AppleBCMWLANBusInterface::getLogger(this)) {
      goto LABEL_13;
    }
    AppleBCMWLANBusInterface::getLogger(this);
    if (!CCLogStream::shouldLog()) {
      goto LABEL_13;
    }
    int v3 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
    goto LABEL_21;
  }
  if (AppleBCMWLANChipBackplane::readPMNICBAPBWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x160u, &v16))
  {
    if (!AppleBCMWLANBusInterface::getLogger(this)) {
      goto LABEL_13;
    }
    AppleBCMWLANBusInterface::getLogger(this);
    if (!CCLogStream::shouldLog()) {
      goto LABEL_13;
    }
    int v3 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
LABEL_21:
    CCLogStream::logAlert(v3, "[dk] %s@%d:Failed to read PMNI CB APB wrapper errorlogstatus: 0x%x\n");
    goto LABEL_13;
  }
  if (((v17 & 0x40000000) != 0 || (v16 & 0x40000000) != 0) && ((_BYTE)v17 || (_BYTE)v16))
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v5, "[dk] %s@%d:PMNI CB APB errorlogstatus wrapper reg non-zero: data1: 0x%x data2: 0x%x\n");
      }
    }
    goto LABEL_13;
  }
  if (AppleBCMWLANChipBackplane::readPMNIAONPBWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x140u, &v17))
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        int v6 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v6, "[dk] %s@%d:Failed to read PMNI AON APB wrapper resetctl: 0x%x\n");
      }
    }
    goto LABEL_13;
  }
  if (v17)
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        BOOL v7 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v7, "[dk] %s@%d:PMNI AON APB resetctl wrapper reg non-zero: 0x%x\n");
      }
    }
    goto LABEL_13;
  }
  if (AppleBCMWLANChipBackplane::readPMNIAONPBWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x110u, &v17))
  {
    if (!AppleBCMWLANBusInterface::getLogger(this)) {
      goto LABEL_13;
    }
    AppleBCMWLANBusInterface::getLogger(this);
    if (!CCLogStream::shouldLog()) {
      goto LABEL_13;
    }
    goto LABEL_44;
  }
  if (AppleBCMWLANChipBackplane::readPMNIAONPBWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x160u, &v16))
  {
    if (!AppleBCMWLANBusInterface::getLogger(this)) {
      goto LABEL_13;
    }
    AppleBCMWLANBusInterface::getLogger(this);
    if (!CCLogStream::shouldLog()) {
      goto LABEL_13;
    }
LABEL_44:
    uint64_t v8 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
    CCLogStream::logAlert(v8, "[dk] %s@%d:Failed to read PMNI AON APB wrapper errorlogstatus: 0x%x\n");
    goto LABEL_13;
  }
  if (((v17 & 0x40000000) != 0 || (v16 & 0x40000000) != 0) && ((_BYTE)v17 || (_BYTE)v16))
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        size_t v10 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v10, "[dk] %s@%d:PMNI AON APB errorlogstatus wrapper reg non-zero: data1: 0x%x data2: 0x%x\n");
      }
    }
    goto LABEL_13;
  }
  if (AppleBCMWLANChipBackplane::readPMNIWLAPBWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x140u, &v17))
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        size_t v11 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v11, "[dk] %s@%d:Failed to read PMNI WL APB wrapper resetctl: 0x%x\n");
      }
    }
    goto LABEL_13;
  }
  if (v17)
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        size_t v13 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v13, "[dk] %s@%d:PMNI WL APB resetctl wrapper reg non-zero: 0x%x\n");
      }
    }
    goto LABEL_13;
  }
  if (AppleBCMWLANChipBackplane::readPMNIWLAPBWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x110u, &v17))
  {
    if (!AppleBCMWLANBusInterface::getLogger(this)) {
      goto LABEL_13;
    }
    AppleBCMWLANBusInterface::getLogger(this);
    if (!CCLogStream::shouldLog()) {
      goto LABEL_13;
    }
    goto LABEL_67;
  }
  if (AppleBCMWLANChipBackplane::readPMNIWLAPBWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x160u, &v16))
  {
    if (!AppleBCMWLANBusInterface::getLogger(this)) {
      goto LABEL_13;
    }
    AppleBCMWLANBusInterface::getLogger(this);
    if (!CCLogStream::shouldLog()) {
      goto LABEL_13;
    }
LABEL_67:
    uint64_t v14 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
    CCLogStream::logAlert(v14, "[dk] %s@%d:Failed to read PMNI WL APB wrapper errorlogstatus: 0x%x\n");
    goto LABEL_13;
  }
  if ((v17 & 0x40000000) == 0 && (v16 & 0x40000000) == 0 || !(_BYTE)v17 && !(_BYTE)v16) {
    return 1;
  }
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t v15 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(v15, "[dk] %s@%d:PMNI WL APB errorlogstatus wrapper reg non-zero: data1: 0x%x data2: 0x%x\n");
    }
  }
LABEL_13:
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      int v9 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(v9, "[dk] %s@%d:Dump the PMNI Wrapper registers for debug \n", "checkPMNIAPB", 19835);
    }
  }
  AppleBCMWLANBusInterfacePCIe::dumpPMNIRegisters(this);
  return 0;
}

BOOL AppleBCMWLANBusInterfacePCIe::checkMSAPB(AppleBCMWLANBusInterfacePCIe *this, int a2)
{
  unsigned int v32 = -1431655766;
  if (AppleBCMWLANChipBackplane::readAPBBridge0SlaveWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x800u, &v32, a2))
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:Failed to read APB wrapper resetctl: 0x%x\n");
      }
    }
  }
  else if (v32)
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v5 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v5, "[dk] %s@%d:APB resetctl wrapper reg non-zero: 0x%x\n");
      }
    }
  }
  else if (AppleBCMWLANChipBackplane::readAPBBridge0SlaveWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x908u, &v32, a2))
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        int v6 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v6, "[dk] %s@%d:Failed to read APB wrapper errorlogstatus: 0x%x\n");
      }
    }
  }
  else
  {
    if (!v32)
    {
      if (AppleBCMWLANChipManagerPCIe::isSplitArchitecture(*(AppleBCMWLANChipManagerPCIe **)(*((void *)this + 9)
                                                                                            + 3280)))
      {
        if (AppleBCMWLANChipBackplane::readAPBBridge1SlaveWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), 0x908u, &v32, a2))
        {
          if (AppleBCMWLANBusInterface::getLogger(this))
          {
            AppleBCMWLANBusInterface::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              int v29 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
              CCLogStream::logAlert(v29, "[dk] %s@%d:Failed to read CB1 APB wrapper errorlogstatus: 0x%x\n");
            }
          }
          goto LABEL_17;
        }
        if (v32)
        {
          if (AppleBCMWLANBusInterface::getLogger(this))
          {
            AppleBCMWLANBusInterface::getLogger(this);
            if (CCLogStream::shouldLog())
            {
              unsigned int v30 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
              CCLogStream::logAlert(v30, "[dk] %s@%d:CB1 APB errorlogstatus wrapper reg non-zero: 0x%x\n");
            }
          }
          goto LABEL_17;
        }
      }
      return 1;
    }
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        unsigned int v31 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v31, "[dk] %s@%d:APB errorlogstatus wrapper reg non-zero: 0x%x\n");
      }
    }
  }
LABEL_17:
  uint64_t v7 = -16;
  do
  {
    unsigned int v8 = AppleBCMWLANChipBackplane::readAPBBridge0SlaveWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), (int)v7 + 2064, &v32, a2);
    unsigned int v9 = v8;
    unsigned int v10 = v32;
    if (v8) {
      unsigned int v10 = v8;
    }
    *(_DWORD *)(*((void *)this + 9) + v7 + 5316) = v10;
    uint64_t v11 = AppleBCMWLANBusInterface::getLogger(this);
    if (v9)
    {
      if (v11)
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          long long v12 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logCrit(v12, "[dk] %s@%d:Failed to read CB0 APB wrapper offset 0x%x errorlogstatus: 0x%x\n");
        }
      }
    }
    else if (v11)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        size_t v13 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logCrit(v13, "[dk] %s@%d:CB0 Wrapper Register Offset 0x%x Value 0x%x\n");
      }
    }
    v7 += 4;
  }
  while (v7);
  uint64_t v14 = -32;
  do
  {
    unsigned int v15 = AppleBCMWLANChipBackplane::readAPBBridge0SlaveWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), (int)v14 + 2336, &v32, a2);
    unsigned int v16 = v15;
    unsigned int v17 = v32;
    if (v15) {
      unsigned int v17 = v15;
    }
    *(_DWORD *)(*((void *)this + 9) + v14 + 5348) = v17;
    uint64_t v18 = AppleBCMWLANBusInterface::getLogger(this);
    if (v16)
    {
      if (v18)
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v19 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logCrit(v19, "[dk] %s@%d:Failed to read CB0 APB wrapper offset 0x%x errorlogstatus: 0x%x\n");
        }
      }
    }
    else if (v18)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v20 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logCrit(v20, "[dk] %s@%d:CB0 Wrapper Register Offset 0x%x Value 0x%x\n");
      }
    }
    v14 += 4;
  }
  while (v14);
  BOOL result = AppleBCMWLANChipManagerPCIe::isSplitArchitecture(*(AppleBCMWLANChipManagerPCIe **)(*((void *)this + 9)
                                                                                            + 3280));
  if (result)
  {
    uint64_t v22 = -32;
    do
    {
      unsigned int v23 = AppleBCMWLANChipBackplane::readAPBBridge1SlaveWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), (int)v22 + 2336, &v32, a2);
      unsigned int v24 = v23;
      unsigned int v25 = v32;
      if (v23) {
        unsigned int v25 = v23;
      }
      *(_DWORD *)(*((void *)this + 9) + v22 + 538AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 0) = v25;
      uint64_t v26 = AppleBCMWLANBusInterface::getLogger(this);
      if (v24)
      {
        if (v26)
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            unsigned int v27 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logCrit(v27, "[dk] %s@%d:Failed to read CB1 APB wrapper offset 0x%x errorlogstatus: 0x%x\n");
          }
        }
      }
      else if (v26)
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          unsigned int v28 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logCrit(v28, "[dk] %s@%d:CB1 Wrapper Register Offset 0x%x Value 0x%x\n");
        }
      }
      v22 += 4;
    }
    while (v22);
    return 0;
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::dumpPMNIRegisters(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t v2 = 0;
  unsigned int v22 = 0;
  do
  {
    unsigned int v3 = AppleBCMWLANBusInterfacePCIe::dumpPMNIRegisters(void)const::dmpMNIRegs[v2];
    int v4 = AppleBCMWLANChipBackplane::readPMNICBAPBWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), v3, &v22);
    if (v4)
    {
      int v5 = v4;
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(Logger, "[dk] %s@%d:Failed to read PMNI CB APB wrapper offset : 0x%x ret : 0x%x\n", "dumpPMNIRegisters", 19892, v3, v5);
        }
      }
    }
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        int v6 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v6, "[dk] %s@%d:Debug data PMNI CB APB wrapper offset : 0x%x data : 0x%x\n", "dumpPMNIRegisters", 19894, v3, v22);
      }
    }
    v2 += 4;
  }
  while (v2 != 136);
  for (uint64_t i = 0; i != 136; i += 4)
  {
    unsigned int v9 = AppleBCMWLANBusInterfacePCIe::dumpPMNIRegisters(void)const::dmpMNIRegs[i];
    int v10 = AppleBCMWLANChipBackplane::readPMNIAONPBWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), v9, &v22);
    if (v10)
    {
      int v11 = v10;
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          uint64_t v14 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v14, "[dk] %s@%d:Failed to read PMNI AON APB wrapper offset : 0x%x ret : 0x%x\n", "dumpPMNIRegisters", 19901, v9, v11);
        }
      }
    }
    uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
    if (result)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      uint64_t result = CCLogStream::shouldLog();
      if (result)
      {
        size_t v13 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        uint64_t result = CCLogStream::logAlert(v13, "[dk] %s@%d:Debug data PMNI AON APB wrapper offset : 0x%x data : 0x%x\n", "dumpPMNIRegisters", 19903, v9, v22);
      }
    }
  }
  if (*(unsigned char *)(*((void *)this + 9) + 4575))
  {
    if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t v21 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(v21, "[dk] %s@%d:Start dumping WLAN APB registers\n", "dumpPMNIRegisters", 19911);
      }
    }
    for (uint64_t j = 0; j != 136; j += 4)
    {
      unsigned int v16 = AppleBCMWLANBusInterfacePCIe::dumpPMNIRegisters(void)const::dmpMNIRegs[j];
      int v17 = AppleBCMWLANChipBackplane::readPMNIWLAPBWrapperReg32(*(AppleBCMWLANChipBackplane **)(*((void *)this + 9) + 3360), v16, &v22);
      if (v17)
      {
        int v18 = v17;
        if (AppleBCMWLANBusInterface::getLogger(this))
        {
          AppleBCMWLANBusInterface::getLogger(this);
          if (CCLogStream::shouldLog())
          {
            uint64_t v20 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            CCLogStream::logAlert(v20, "[dk] %s@%d:Failed to read PMNI WL APB wrapperoffset : 0x%x ret : 0x%x\n", "dumpPMNIRegisters", 19915, v16, v18);
          }
        }
      }
      uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
      if (result)
      {
        AppleBCMWLANBusInterface::getLogger(this);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          uint64_t v19 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          uint64_t result = CCLogStream::logAlert(v19, "[dk] %s@%d:Debug data PMNI WL APB wrapper offset : 0x%x data : 0x%x\n", "dumpPMNIRegisters", 19917, v16, v22);
        }
      }
    }
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::busSupportsTrapInfo(AppleBCMWLANBusInterfacePCIe *this)
{
  return *(unsigned __int8 *)(*((void *)this + 9) + 4077);
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::busSupportsTrapInfo(AppleBCMWLANBusInterfacePCIe *this)
{
  return *(unsigned __int8 *)(*((void *)this + 3) + 4077);
}

uint64_t AppleBCMWLANBusInterfacePCIe::isPortEnableFailure(AppleBCMWLANBusInterfacePCIe *this)
{
  return *(unsigned __int8 *)(*((void *)this + 9) + 3704);
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::isPortEnableFailure(AppleBCMWLANBusInterfacePCIe *this)
{
  return *(unsigned __int8 *)(*((void *)this + 3) + 3704);
}

uint64_t AppleBCMWLANBusInterfacePCIe::getTrapInfoSequenceNum(AppleBCMWLANBusInterfacePCIe *this)
{
  if ((*(unsigned int (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 560))(this)) {
    return *(unsigned int *)(*((void *)this + 9) + 4080);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::getTrapInfoSequenceNum(AppleBCMWLANBusInterfacePCIe *this)
{
  if ((*(unsigned int (**)(void))(*((void *)this - 6) + 560))()) {
    return *(unsigned int *)(*((void *)this + 3) + 4080);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t AppleBCMWLANBusInterfacePCIe::copyTrapInfoBlob(AppleBCMWLANBusInterfacePCIe *this, unsigned __int8 *a2, size_t a3)
{
  uint64_t v6 = 3758097084;
  if (!(*(unsigned int (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 560))(this)) {
    return 3758097095;
  }
  uint64_t v7 = *((void *)this + 9);
  unint64_t v8 = 516;
  if (!*(unsigned char *)(v7 + 4077)) {
    unint64_t v8 = 0;
  }
  if (v8 >= a3)
  {
    memcpy(a2, *(const void **)(v7 + 4064), a3);
    return 0;
  }
  return v6;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::copyTrapInfoBlob(AppleBCMWLANBusInterfacePCIe *this, unsigned __int8 *a2, size_t a3)
{
  uint64_t v6 = 3758097084;
  if (!(*(unsigned int (**)(void))(*((void *)this - 6) + 560))()) {
    return 3758097095;
  }
  uint64_t v7 = *((void *)this + 3);
  unint64_t v8 = 516;
  if (!*(unsigned char *)(v7 + 4077)) {
    unint64_t v8 = 0;
  }
  if (v8 >= a3)
  {
    memcpy(a2, *(const void **)(v7 + 4064), a3);
    return 0;
  }
  return v6;
}

uint64_t AppleBCMWLANBusInterfacePCIe::busSupportsCrashTracerTrapMiniDump(AppleBCMWLANBusInterfacePCIe *this)
{
  return *(unsigned __int8 *)(*((void *)this + 9) + 4084);
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::busSupportsCrashTracerTrapMiniDump(AppleBCMWLANBusInterfacePCIe *this)
{
  return *(unsigned __int8 *)(*((void *)this + 3) + 4084);
}

uint64_t AppleBCMWLANBusInterfacePCIe::copyCrashTracerTrapMiniDump(AppleBCMWLANBusInterfacePCIe *this, unsigned __int8 *a2, size_t a3)
{
  uint64_t v3 = 3758097084;
  uint64_t v4 = *((void *)this + 9);
  if (!*(unsigned char *)(v4 + 4084)) {
    return 3758097095;
  }
  (*(void (**)(void))(**(void **)(v4 + 4088) + 136))(*(void *)(v4 + 4088));
  uint64_t v8 = *((void *)this + 9);
  unsigned int v9 = *(const void **)(v8 + 1520);
  if (v9)
  {
    if (*(unsigned char *)(v8 + 4084)) {
      unint64_t v10 = 102400;
    }
    else {
      unint64_t v10 = 0;
    }
    if (v10 >= a3)
    {
      memcpy(a2, v9, a3);
      IOFreeData();
      uint64_t v3 = 0;
      *(void *)(*((void *)this + 9) + 152AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 0) = 0;
    }
    else if (AppleBCMWLANBusInterface::getLogger(this))
    {
      AppleBCMWLANBusInterface::getLogger(this);
      if (CCLogStream::shouldLog())
      {
        uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        CCLogStream::logAlert(Logger, "[dk] %s@%d:blob_size is %zu, larger than %u\n");
      }
    }
  }
  else if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      long long v12 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(v12, "[dk] %s@%d:fTrapMiniDumpBuffer does not exist\n");
    }
  }
  return v3;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::copyCrashTracerTrapMiniDump(AppleBCMWLANBusInterfacePCIe *this, unsigned __int8 *a2, size_t a3)
{
  return AppleBCMWLANBusInterfacePCIe::copyCrashTracerTrapMiniDump((AppleBCMWLANBusInterfacePCIe *)((char *)this - 48), a2, a3);
}

uint64_t AppleBCMWLANBusInterfacePCIe::H2DDebugRingCreateComplete(AppleBCMWLANBusInterfacePCIe *this, AppleBCMWLANPCIeSubmissionRing *a2, uint64_t a3, void *a4)
{
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      size_t v13 = (const char *)(*(uint64_t (**)(AppleBCMWLANBusInterfacePCIe *, uint64_t))(*(void *)this + 104))(this, a3);
      CCLogStream::logCrit(Logger, "[dk] %s@%d:%s\n", "H2DDebugRingCreateComplete", 20307, v13);
    }
  }
  *(void *)(*((void *)this + 9) + 328) = a2;
  (*(void (**)(void))(**(void **)(*((void *)this + 9) + 3832) + 72))(*(void *)(*((void *)this + 9) + 3832));
  uint64_t v7 = *((void *)this + 9);
  if (a3)
  {
    if (*(unsigned char *)(v7 + 1308))
    {
      uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
      if (result)
      {
        AppleBCMWLANBusInterface::getLogger(this);
        uint64_t result = CCLogStream::shouldLog();
        if (result)
        {
          unsigned int v9 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          return CCLogStream::logCrit(v9, "[dk] %s@%d:Trackers being flushed; skip triggering fault-reporter\n");
        }
      }
    }
    else
    {
      uint64_t FaultReporter = (CCFaultReporter *)AppleBCMWLANBusInterface::getFaultReporter(this);
      uint64_t result = CCFaultReporter::reportFault(FaultReporter, 4u, "/Library/Caches/com.apple.xbs/Sources/AppleBCMWLANV3_driverkit/Busses/PCIe/AppleBCMWLANBusInterfacePCIe.cpp", 0x4F61u, "H2DDebugRingCreateComplete", 0, -469794022, 0);
      if (result)
      {
        uint64_t result = AppleBCMWLANBusInterface::getLogger(this);
        if (result)
        {
          AppleBCMWLANBusInterface::getLogger(this);
          uint64_t result = CCLogStream::shouldLog();
          if (result)
          {
            uint64_t v14 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
            return CCLogStream::logCrit(v14, "[dk] %s@%d:Failed to report fault with 0x%x\n");
          }
        }
      }
    }
  }
  else
  {
    (*(void (**)(void, void *(*)(uint64_t, AppleBCMWLANPCIeCompletionRing *, uint64_t), void, void, void, void))(**(void **)(v7 + 3472) + 56))(*(void *)(v7 + 3472), AppleBCMWLANBusInterfacePCIe::enableCompletionRingGated, *(void *)(v7 + 336), *(void *)(v7 + 3464), 0, 0);
    unint64_t v10 = *(uint64_t (**)(void))(**(void **)(*((void *)this + 9) + 3472) + 56);
    return v10();
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::handleRxTimeSync(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(*(void *)(result + 72) + 3984) == 3)
  {
    uint64_t v4 = mach_absolute_time();
    absolutetime_to_nanoseconds();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 304))(a3, v4);
  }
  return result;
}

uint64_t AppleBCMWLANBusInterfacePCIe::readHostSWTimestamp(AppleBCMWLANBusInterfacePCIe *this, const char *a2)
{
  uint64_t v2 = mach_absolute_time();
  absolutetime_to_nanoseconds();
  return v2;
}

uint64_t AppleBCMWLANBusInterfacePCIe::handleTxTimeSync(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(result + 72);
  if (*(_DWORD *)(v4 + 3984) != 3) {
    return result;
  }
  if (*(unsigned char *)(v4 + 4413))
  {
    char v7 = 1;
    if (!a4) {
      goto LABEL_9;
    }
LABEL_7:
    if (v7) {
      (*(void (**)(uint64_t, void))(*(void *)a3 + 304))(a3, 0);
    }
    goto LABEL_9;
  }
  char v7 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 328))(a3);
  if (a4) {
    goto LABEL_7;
  }
LABEL_9:
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 528);
  return v8(a3, 1);
}

uint64_t AppleBCMWLANBusInterfacePCIe::isTSICMPV6LoggingEnabled(AppleBCMWLANBusInterfacePCIe *this)
{
  return *(unsigned __int8 *)(*((void *)this + 9) + 4413);
}

uint64_t AppleBCMWLANBusInterfacePCIe::isTSLoggingEnabled(AppleBCMWLANBusInterfacePCIe *this)
{
  return *(unsigned __int8 *)(*((void *)this + 9) + 4412);
}

uint64_t AppleBCMWLANBusInterfacePCIe::getIgnoreTSIfBitmap(AppleBCMWLANBusInterfacePCIe *this)
{
  return *(unsigned int *)(*((void *)this + 9) + 3992);
}

uint64_t AppleBCMWLANBusInterfacePCIe::getTweakAllTxAsTS(AppleBCMWLANBusInterfacePCIe *this)
{
  return *(unsigned __int8 *)(*((void *)this + 9) + 3996);
}

uint64_t AppleBCMWLANBusInterfacePCIe::getTSTxExtendedFlags(AppleBCMWLANBusInterfacePCIe *this)
{
  return *(unsigned __int8 *)(*((void *)this + 9) + 3997);
}

uint64_t AppleBCMWLANBusInterfacePCIe::getTimestampingMode(AppleBCMWLANBusInterfacePCIe *this)
{
  return *(unsigned int *)(*((void *)this + 9) + 3984);
}

uint64_t AppleBCMWLANBusInterfacePCIe::convertPTMToAbsolute(AppleBCMWLANBusInterfacePCIe *this, unint64_t a2)
{
  if (!(*(unsigned int (**)(AppleBCMWLANBusInterfacePCIe *))(*(void *)this + 944))(this)
    || *(void *)(*((void *)this + 9) + 4032) > a2
    || (uint64_t result = continuoustime_to_absolutetime()) == 0)
  {
    uint64_t result = 0;
    ++*(void *)(*((void *)this + 9) + 4048);
  }
  *(void *)(*((void *)this + 9) + 404AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 0) = result;
  return result;
}

AppleBCMWLANPCIeTransmitFlowRing *AppleBCMWLANBusInterfacePCIe::findAndReleaseFlowQueue(AppleBCMWLANBusInterface *this, unsigned __int8 *a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(*((void *)this + 9) + 4472);
    if (v3)
    {
      uint64_t result = (AppleBCMWLANPCIeTransmitFlowRing *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 120))(v3);
      uint64_t v6 = *((void *)this + 9);
      if (*(_DWORD *)(v6 + 372) <= result)
      {
        unsigned int v7 = result;
        if (*(_DWORD *)(v6 + 376) > result)
        {
          uint64_t result = *(AppleBCMWLANPCIeTransmitFlowRing **)(v6 + 8 * result + 4808);
          if (result)
          {
            uint64_t v8 = *(AppleBCMWLANPCIeSkywalk **)(v6 + 4472);
            uint64_t v9 = *a2;
            uint64_t v10 = a2[1];
            int isLowLatencyRing = AppleBCMWLANPCIeTransmitFlowRing::isLowLatencyRing(result);
            return (AppleBCMWLANPCIeTransmitFlowRing *)AppleBCMWLANPCIeSkywalk::detachTxSubmFwQueue(v8, v9, v10, v7, isLowLatencyRing);
          }
        }
      }
    }
    else
    {
      uint64_t result = (AppleBCMWLANPCIeTransmitFlowRing *)AppleBCMWLANBusInterface::getLogger(this);
      if (result)
      {
        AppleBCMWLANBusInterface::getLogger(this);
        uint64_t result = (AppleBCMWLANPCIeTransmitFlowRing *)CCLogStream::shouldLog();
        if (result)
        {
          uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          return (AppleBCMWLANPCIeTransmitFlowRing *)CCLogStream::logAlert(Logger, "[dk] %s@%d:find and release flow queue, invalid skywalk instance\n");
        }
      }
    }
  }
  else
  {
    uint64_t result = (AppleBCMWLANPCIeTransmitFlowRing *)AppleBCMWLANBusInterface::getLogger(this);
    if (result)
    {
      AppleBCMWLANBusInterface::getLogger(this);
      uint64_t result = (AppleBCMWLANPCIeTransmitFlowRing *)CCLogStream::shouldLog();
      if (result)
      {
        long long v12 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
        return (AppleBCMWLANPCIeTransmitFlowRing *)CCLogStream::logAlert(v12, "[dk] %s@%d:find and release flow queue, invalid hash\n");
      }
    }
  }
  return result;
}

AppleBCMWLANPCIeTransmitFlowRing *non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::findAndReleaseFlowQueue(uint64_t a1, unsigned __int8 *a2)
{
  return AppleBCMWLANBusInterfacePCIe::findAndReleaseFlowQueue((AppleBCMWLANBusInterface *)(a1 - 48), a2);
}

AppleBCMWLANBusInterface *AppleBCMWLANBusInterfacePCIe::findAndReleaseFlowQueueWithFlowId(AppleBCMWLANBusInterface *this, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v3 = this;
  if (a2)
  {
    uint64_t v4 = *((void *)this + 9);
    int v5 = *(AppleBCMWLANPCIeSkywalk **)(v4 + 4472);
    if (v5)
    {
      if (*(_DWORD *)(v4 + 372) <= a3 && *(_DWORD *)(v4 + 376) > a3)
      {
        this = *(AppleBCMWLANBusInterface **)(v4 + 8 * a3 + 4808);
        if (this)
        {
          uint64_t v7 = *a2;
          uint64_t v8 = a2[1];
          int isLowLatencyRing = AppleBCMWLANPCIeTransmitFlowRing::isLowLatencyRing(this);
          return (AppleBCMWLANBusInterface *)AppleBCMWLANPCIeSkywalk::detachTxSubmFwQueue(v5, v7, v8, a3, isLowLatencyRing);
        }
      }
    }
    else
    {
      this = (AppleBCMWLANBusInterface *)AppleBCMWLANBusInterface::getLogger(this);
      if (this)
      {
        AppleBCMWLANBusInterface::getLogger(v3);
        this = (AppleBCMWLANBusInterface *)CCLogStream::shouldLog();
        if (this)
        {
          uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(v3);
          return (AppleBCMWLANBusInterface *)CCLogStream::logAlert(Logger, "[dk] %s@%d:find and release flow queue, invalid skywalk instance\n");
        }
      }
    }
  }
  else
  {
    this = (AppleBCMWLANBusInterface *)AppleBCMWLANBusInterface::getLogger(this);
    if (this)
    {
      AppleBCMWLANBusInterface::getLogger(v3);
      this = (AppleBCMWLANBusInterface *)CCLogStream::shouldLog();
      if (this)
      {
        uint64_t v10 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(v3);
        return (AppleBCMWLANBusInterface *)CCLogStream::logAlert(v10, "[dk] %s@%d:find and release flow queue, invalid hash\n");
      }
    }
  }
  return this;
}

AppleBCMWLANBusInterface *non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::findAndReleaseFlowQueueWithFlowId(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  return AppleBCMWLANBusInterfacePCIe::findAndReleaseFlowQueueWithFlowId((AppleBCMWLANBusInterface *)(a1 - 48), a2, a3);
}

OSMetaClassBase *AppleBCMWLANBusInterfacePCIe::getBusSkywalk(AppleBCMWLANBusInterfacePCIe *this)
{
  return OSMetaClassBase::safeMetaCast(*(const OSMetaClassBase **)(*((void *)this + 9) + 4472), gOSObjectMetaClass);
}

OSMetaClassBase *non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::getBusSkywalk(AppleBCMWLANBusInterfacePCIe *this)
{
  return OSMetaClassBase::safeMetaCast(*(const OSMetaClassBase **)(*((void *)this + 3) + 4472), gOSObjectMetaClass);
}

uint64_t AppleBCMWLANBusInterfacePCIe::allocateSkywalkBusResource(OSObject *this)
{
  ivars = this[1].ivars;
  if (*((void *)ivars + 559)) {
    return 1;
  }
  uint64_t v3 = *((unsigned int *)ivars + 1115);
  uint64_t v4 = v3;
  if (!v3)
  {
    int v5 = *((_DWORD *)ivars + 1113);
    if (v5) {
      uint64_t v4 = (v5 + 256);
    }
    else {
      uint64_t v4 = 512;
    }
  }
  int v6 = *((_DWORD *)ivars + 1112);
  if (v6) {
    int v7 = v6 + 256;
  }
  else {
    int v7 = 512;
  }
  int v8 = *((_DWORD *)ivars + 1114);
  if (v8) {
    int v9 = 4 * v8;
  }
  else {
    int v9 = 1024;
  }
  int v10 = *((_DWORD *)ivars + 1116);
  int v11 = 4 * v4 + v7 + 2 * v9;
  int v12 = v11 + 256;
  int v13 = v11 + 512;
  if (v3) {
    int v14 = v13;
  }
  else {
    int v14 = v12;
  }
  if (v10) {
    int v15 = v10;
  }
  else {
    int v15 = v14;
  }
  int v16 = 2 * v7;
  if (AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this))
  {
    AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      CCLogStream::logAlert(Logger, "[dk] %s@%d:Skywalk resources txLlwQueueSize %d txQueueSize %d rxQueueSize %d skywalkPacketPoolSize %d\n", "allocateSkywalkBusResource", 20852, v16, v4, v9, v15);
    }
  }
  int v17 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
  uint64_t FaultReporter = (CCLogStream *)AppleBCMWLANBusInterface::getFaultReporter((AppleBCMWLANBusInterface *)this);
  *((void *)this[1].ivars + 559) = AppleBCMWLANPCIeSkywalk::withProviderAndCapacity(this, (AppleBCMWLANBusInterfacePCIe *)v4, v16, v9, v15, 2048, v17, FaultReporter, v22);
  if (*((void *)this[1].ivars + 559)) {
    return 1;
  }
  uint64_t result = AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
  if (result)
  {
    AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
    uint64_t result = CCLogStream::shouldLog();
    if (result)
    {
      uint64_t v20 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger((AppleBCMWLANBusInterface *)this);
      CCLogStream::logCrit(v20, "[dk] %s@%d:Skywalk Init Fail\n", "allocateSkywalkBusResource", 20858);
      return 0;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::allocateSkywalkBusResource(AppleBCMWLANBusInterfacePCIe *this)
{
  return AppleBCMWLANBusInterfacePCIe::allocateSkywalkBusResource((OSObject *)((char *)this - 48));
}

uint64_t AppleBCMWLANBusInterfacePCIe::getActiveRxBufferCount(AppleBCMWLANBusInterfacePCIe *this)
{
  return *(unsigned int *)(*((void *)this + 9) + 1160);
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::getActiveRxBufferCount(AppleBCMWLANBusInterfacePCIe *this)
{
  return *(unsigned int *)(*((void *)this + 3) + 1160);
}

uint64_t AppleBCMWLANBusInterfacePCIe::getActiveTxPacketCount(AppleBCMWLANBusInterfacePCIe *this)
{
  return *(unsigned int *)(*((void *)this + 9) + 1164);
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::getActiveTxPacketCount(AppleBCMWLANBusInterfacePCIe *this)
{
  return *(unsigned int *)(*((void *)this + 3) + 1164);
}

uint64_t AppleBCMWLANBusInterfacePCIe::getTotalTxPacketCount(AppleBCMWLANBusInterfacePCIe *this)
{
  return *(void *)(*((void *)this + 9) + 1168);
}

uint64_t AppleBCMWLANBusInterfacePCIe::isSystemWokenByWiFi(AppleBCMWLANBusInterfacePCIe *this, char *a2, const char *a3, unint64_t a4)
{
  return AppleOLYHALPlatformFunction::isSystemWokenByWiFiDK(*(AppleOLYHALPlatformFunction **)(*((void *)this + 9) + 5176), a2, a3, a4, 0);
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::isSystemWokenByWiFi(AppleBCMWLANBusInterfacePCIe *this, char *a2, const char *a3, unint64_t a4)
{
  return AppleOLYHALPlatformFunction::isSystemWokenByWiFiDK(*(AppleOLYHALPlatformFunction **)(*((void *)this + 3) + 5176), a2, a3, a4, 0);
}

uint64_t AppleBCMWLANBusInterfacePCIe::getLastTimePowerOnTicks(AppleBCMWLANBusInterfacePCIe *this)
{
  return *(void *)(*((void *)this + 9) + 4032);
}

uint64_t AppleBCMWLANBusInterfacePCIe::setAMFMPropertyHelper(AppleBCMWLANBusInterfacePCIe *this, OSString *a2, OSString *a3)
{
  return AppleOLYHALPortInterfacePCIe::setAMFMPropertyHelperDK(*(AppleOLYHALPortInterfacePCIe **)(*((void *)this + 9) + 5184), a2, a3, 0);
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::setAMFMPropertyHelper(AppleBCMWLANBusInterfacePCIe *this, OSString *a2, OSString *a3)
{
  return AppleOLYHALPortInterfacePCIe::setAMFMPropertyHelperDK(*(AppleOLYHALPortInterfacePCIe **)(*((void *)this + 3) + 5184), a2, a3, 0);
}

uint64_t AppleBCMWLANBusInterfacePCIe::isSystemHibernating(AppleBCMWLANBusInterfacePCIe *this, unsigned int *a2)
{
  int v13 = (OSDictionary *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = OSString::withCString("com.apple.iokit.pm.sleepdescription");
  if (IOService::StateNotificationItemCopy(*(IOService **)(*((void *)this + 9) + 5208), v4, &v13, 0))
  {
    uint64_t v5 = 1;
    goto LABEL_20;
  }
  if (!v13) {
    goto LABEL_13;
  }
  Object = OSDictionary::getObject(v13, "com.apple.iokit.pm.hibernatestate");
  int v7 = (const OSData *)OSMetaClassBase::safeMetaCast(Object, gOSDataMetaClass);
  uint64_t v5 = (uint64_t)v7;
  if (!v7)
  {
LABEL_14:
    unsigned int v8 = 0;
    goto LABEL_15;
  }
  if (!OSData::getBytesNoCopy(v7))
  {
LABEL_13:
    uint64_t v5 = 0;
    goto LABEL_14;
  }
  unsigned int v8 = *(_DWORD *)OSData::getBytesNoCopy((const OSData *)v5);
  if ((v8 & 3) != 0)
  {
    *a2 = v8;
    if (v8 == 2)
    {
      (*(void (**)(AppleBCMWLANBusInterfacePCIe *, uint64_t, void))(*(void *)this + 1152))(this, 3825173288, 0);
      AppleBCMWLANBusInterfacePCIe::isSystemHibernating(unsigned int &)::hasHibernateStarted = 0;
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        uint64_t v5 = 1;
        if (CCLogStream::shouldLog())
        {
          uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(Logger, "[dk] %s@%d:System waking up from Hibernation %u\n", "isSystemHibernating", 21357, AppleBCMWLANBusInterfacePCIe::isSystemHibernating(unsigned int &)::hasHibernateStarted);
        }
        unsigned int v8 = 2;
        goto LABEL_15;
      }
      unsigned int v8 = 2;
    }
    else if (v8 == 1)
    {
      uint64_t v5 = 1;
      AppleBCMWLANBusInterfacePCIe::isSystemHibernating(unsigned int &)::hasHibernateStarted = 1;
      if (AppleBCMWLANBusInterface::getLogger(this))
      {
        AppleBCMWLANBusInterface::getLogger(this);
        if (CCLogStream::shouldLog())
        {
          int v11 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
          CCLogStream::logAlert(v11, "[dk] %s@%d:System entering Hibernation %u\n", "isSystemHibernating", 21352, AppleBCMWLANBusInterfacePCIe::isSystemHibernating(unsigned int &)::hasHibernateStarted);
        }
      }
      unsigned int v8 = 1;
      goto LABEL_15;
    }
    uint64_t v5 = 1;
  }
  else if (AppleBCMWLANBusInterfacePCIe::isSystemHibernating(unsigned int &)::hasHibernateStarted == 1)
  {
    (*(void (**)(AppleBCMWLANBusInterfacePCIe *, uint64_t, void))(*(void *)this + 1152))(this, 3825173288, 0);
    uint64_t v5 = 0;
    *(unsigned char *)(*((void *)this + 9) + 4552) = 1;
    AppleBCMWLANBusInterfacePCIe::isSystemHibernating(unsigned int &)::hasHibernateStarted = 0;
  }
  else
  {
    uint64_t v5 = 0;
  }
LABEL_15:
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      int v10 = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logAlert(v10, "[dk] %s@%d:BusInterfacePCIe: hibernating[0x%08x], statevalue[0x%08x], state[0x%08x] this[%p]", "isSystemHibernating", 21366, v5, v8, *a2, this);
    }
  }
  if (v13)
  {
    ((void (*)(OSDictionary *))v13->release)(v13);
    int v13 = 0;
  }
LABEL_20:
  if (v4) {
    ((void (*)(OSString *))v4->release)(v4);
  }
  return v5;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::isSystemHibernating(AppleBCMWLANBusInterfacePCIe *this, unsigned int *a2)
{
  return AppleBCMWLANBusInterfacePCIe::isSystemHibernating((AppleBCMWLANBusInterfacePCIe *)((char *)this - 48), a2);
}

uint64_t AppleBCMWLANBusInterfacePCIe::isWatchdogBlocked(AppleBCMWLANBusInterfacePCIe *this)
{
  return *(unsigned __int8 *)(*((void *)this + 9) + 4572);
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::isWatchdogBlocked(AppleBCMWLANBusInterfacePCIe *this)
{
  return *(unsigned __int8 *)(*((void *)this + 3) + 4572);
}

uint64_t AppleBCMWLANBusInterfacePCIe::busSupportsACFlowControl(AppleBCMWLANBusInterfacePCIe *this)
{
  return 1;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::busSupportsACFlowControl(AppleBCMWLANBusInterfacePCIe *this)
{
  return 1;
}

uint64_t AppleBCMWLANBusInterfacePCIe::busSupportsFlowId(AppleBCMWLANBusInterfacePCIe *this)
{
  return 1;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::busSupportsFlowId(AppleBCMWLANBusInterfacePCIe *this)
{
  return 1;
}

uint64_t AppleBCMWLANBusInterfacePCIe::isFWPacketTimestampEnabled(AppleBCMWLANBusInterfacePCIe *this)
{
  return *(unsigned __int8 *)(*((void *)this + 9) + 4525);
}

uint64_t AppleBCMWLANBusInterfacePCIe::isFWLowLatencySupportEnabled(AppleBCMWLANBusInterfacePCIe *this)
{
  return *(unsigned __int8 *)(*((void *)this + 9) + 4526);
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::isFWLowLatencySupportEnabled(AppleBCMWLANBusInterfacePCIe *this)
{
  return *(unsigned __int8 *)(*((void *)this + 3) + 4526);
}

uint64_t AppleBCMWLANBusInterfacePCIe::getTxChipDelayToUsecMultiplier(AppleBCMWLANBusInterfacePCIe *this)
{
  return *(unsigned int *)(*((void *)this + 9) + 4620);
}

uint64_t AppleBCMWLANBusInterfacePCIe::getRxChipDelayToUsecMultiplier(AppleBCMWLANBusInterfacePCIe *this)
{
  return *(unsigned int *)(*((void *)this + 9) + 4624);
}

uint64_t AppleBCMWLANBusInterfacePCIe::prepareForWoW(AppleBCMWLANBusInterfacePCIe *this)
{
  return 0;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::prepareForWoW(AppleBCMWLANBusInterfacePCIe *this)
{
  return 0;
}

BOOL AppleBCMWLANBusInterfacePCIe::isFWTrap(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t v1 = *(_DWORD **)(*((void *)this + 9) + 2832);
  return v1 && *v1 != 0;
}

BOOL non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::isFWTrap(AppleBCMWLANBusInterfacePCIe *this)
{
  uint64_t v1 = *(_DWORD **)(*((void *)this + 3) + 2832);
  return v1 && *v1 != 0;
}

uint64_t AppleBCMWLANBusInterfacePCIe::performDebugAction(AppleBCMWLANBusInterfacePCIe *this, int a2, unsigned int a3, void *a4, unint64_t *a5)
{
  return 3758097095;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::performDebugAction(AppleBCMWLANBusInterfacePCIe *this, int a2, unsigned int a3, void *a4, unint64_t *a5)
{
  return 3758097095;
}

uint64_t AppleBCMWLANBusInterfacePCIe::crashRetainCTSWaitPowerOffTimeout(uint64_t this)
{
  *(_DWORD *)(*(void *)(this + 72) + 3724) = 0;
  return this;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::crashRetainCTSWaitPowerOffTimeout(uint64_t this)
{
  *(_DWORD *)(*(void *)(this + 24) + 3724) = 0;
  return this;
}

uint64_t AppleBCMWLANBusInterfacePCIe::crashRetainCTSWaitCommitRingsTimeout(uint64_t this)
{
  *(_DWORD *)(*(void *)(this + 72) + 3728) = 0;
  return this;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::crashRetainCTSWaitCommitRingsTimeout(uint64_t this)
{
  *(_DWORD *)(*(void *)(this + 24) + 3728) = 0;
  return this;
}

uint64_t AppleBCMWLANBusInterfacePCIe::setLlwTxRingSize(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 72) + 4448) = a2;
  return this;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::setLlwTxRingSize(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 24) + 4448) = a2;
  return this;
}

uint64_t AppleBCMWLANBusInterfacePCIe::setTxRingSize(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 72) + 4452) = a2;
  return this;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::setTxRingSize(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 24) + 4452) = a2;
  return this;
}

uint64_t AppleBCMWLANBusInterfacePCIe::setRxRingSize(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 72) + 4456) = a2;
  return this;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::setRxRingSize(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 24) + 4456) = a2;
  return this;
}

uint64_t AppleBCMWLANBusInterfacePCIe::setTxSubmissionQueueSize(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 72) + 446AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 0) = a2;
  return this;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::setTxSubmissionQueueSize(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 24) + 446AppleBCMWLANBusInterfacePCIe::setDeviceInDeepSleep(this, 0) = a2;
  return this;
}

uint64_t AppleBCMWLANBusInterfacePCIe::setSkywalkPacketPoolSize(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 72) + 4464) = a2;
  return this;
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::setSkywalkPacketPoolSize(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 24) + 4464) = a2;
  return this;
}

BOOL AppleBCMWLANBusInterfacePCIe::isValidFlowId(AppleBCMWLANBusInterfacePCIe *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 9);
  return *(_DWORD *)(v2 + 372) <= a2 && *(_DWORD *)(v2 + 376) > a2;
}

uint64_t AppleBCMWLANBusInterfacePCIe::getDriver(AppleBCMWLANBusInterfacePCIe *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 608))();
}

uint64_t non-virtual thunk to'AppleBCMWLANBusInterfacePCIe::getDriver(AppleBCMWLANBusInterfacePCIe *this)
{
  return (*(uint64_t (**)(void))(*((void *)this - 8) + 608))();
}

uint64_t AppleBCMWLANBusInterfacePCIe::isBusLeadEnabled(AppleBCMWLANBusInterfacePCIe *this)
{
  return *(unsigned __int8 *)(*((void *)this + 9) + 1307);
}

uint64_t AppleBCMWLANBusInterfacePCIe::updateActiveRxBufferCount(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 72) + 1160) += a2;
  return this;
}

uint64_t AppleBCMWLANBusInterfacePCIe::updateActiveTxPacketCount(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 72) + 1164) += a2;
  if (a2 >= 1) {
    *(void *)(*(void *)(this + 72) + 1168) += a2;
  }
  return this;
}

uint64_t AppleBCMWLANBusInterfacePCIe::getTransmitFlowRing(AppleBCMWLANBusInterfacePCIe *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 9);
  if (*(_DWORD *)(v2 + 372) > a2 || *(_DWORD *)(v2 + 376) <= a2) {
    return 0;
  }
  if (AppleBCMWLANBusInterface::getLogger(this))
  {
    AppleBCMWLANBusInterface::getLogger(this);
    if (CCLogStream::shouldLog())
    {
      uint64_t Logger = (CCLogStream *)AppleBCMWLANBusInterface::getLogger(this);
      CCLogStream::logInfo(Logger, "[dk] %s@%d:%s %d id %d ring %p\n", "getTransmitFlowRing", 21563, "AppleBCMWLANPCIeTransmitFlowRing *AppleBCMWLANBusInterfacePCIe::getTransmitFlowRing(FlowID)", 21563, a2, *(const void **)(*((void *)this + 9) + 8 * a2 + 4808));
    }
  }
  return *(void *)(*((void *)this + 9) + 8 * a2 + 4808);
}