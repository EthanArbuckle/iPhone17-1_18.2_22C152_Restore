void sub_100005678(id a1)
{
  uint64_t vars8;

  qword_1000A4628 = objc_alloc_init(PMSmartPowerNapService);

  _objc_release_x1();
}

void sub_1000058E0(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setAmbient_state:", *(unsigned __int8 *)(a1 + 40));
  id v2 = [*(id *)(a1 + 32) predictor];
  [v2 updateAmbientState:*(unsigned __int8 *)(a1 + 40)];
}

id sub_100005A08(uint64_t a1, int token)
{
  uint64_t state64 = 0;
  notify_get_state(token, &state64);
  v3 = qword_1000A34F0;
  if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    uint64_t v7 = state64;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "SmartPowerNap: SB Lock State %llu", buf, 0xCu);
  }
  return [*(id *)(a1 + 32) updateLockState:state64];
}

id sub_100005BE4(uint64_t a1)
{
  v1 = *(void **)(a1 + 32);
  uint64_t v2 = IOPSDrawingUnlimitedPower();

  return [v1 updatePluginState:v2];
}

void sub_100005D20(uint64_t a1)
{
  uint64_t v2 = +[BLSBacklight sharedBacklight];
  [v2 addObserver:*(void *)(a1 + 32)];

  v3 = qword_1000A34F0;
  if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "registered for backlight updates", v4, 2u);
  }
}

void sub_100005F58(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) predictor];
  [v2 updateBacklightState:*(unsigned __int8 *)(a1 + 40)];
}

void sub_100006044(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) predictor];
  [v2 updateAODEnabledStatus:*(unsigned __int8 *)(a1 + 40)];
}

void sub_1000062AC(uint64_t a1)
{
  id v2 = qword_1000A34F0;
  if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v14 = 138412290;
    uint64_t v15 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SPN: received registration from %@", (uint8_t *)&v14, 0xCu);
  }
  v4 = [[PMSmartPowerNapClient alloc] initWithConnection:*(void *)(a1 + 40)];
  if (v4)
  {
    v5 = [*(id *)(a1 + 48) clients];
    [v5 setObject:v4 forKeyedSubscript:*(void *)(a1 + 32)];

    v6 = [(PMSmartPowerNapClient *)v4 connection];

    uint64_t v7 = qword_1000A34F0;
    if (v6)
    {
      if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        v8 = *(void **)(a1 + 40);
        v10 = v7;
        LODWORD(v8) = [v8 processIdentifier];
        unsigned int v11 = objc_msgSend(*(id *)(a1 + 48), "current_state");
        int v14 = 138412802;
        uint64_t v15 = v9;
        __int16 v16 = 1024;
        int v17 = (int)v8;
        __int16 v18 = 1024;
        unsigned int v19 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "SPN: Initial update state for client %@ with pid %d to %d", (uint8_t *)&v14, 0x18u);
      }
      v12 = [(PMSmartPowerNapClient *)v4 connection];
      v13 = [v12 remoteObjectProxyWithErrorHandler:&stru_100091228];
      objc_msgSend(v13, "updateState:", objc_msgSend(*(id *)(a1 + 48), "current_state"));
    }
    else if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_ERROR))
    {
      sub_10006334C((uint64_t *)(a1 + 32), v7);
    }
  }
}

void sub_10000649C(id a1, NSError *a2)
{
  id v2 = a2;
  uint64_t v3 = qword_1000A34F0;
  if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Error updating state %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1000065F8(uint64_t a1)
{
  id v2 = qword_1000A34F0;
  if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SPN: received unregister from %@", (uint8_t *)&v5, 0xCu);
  }
  int v4 = [*(id *)(a1 + 40) clients];
  [v4 removeObjectForKey:*(void *)(a1 + 32)];
}

void sub_1000068EC(id a1, NSError *a2)
{
  id v2 = a2;
  uint64_t v3 = qword_1000A34F0;
  if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    int v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Error updating state %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_100006A3C(uint64_t a1)
{
  id v2 = qword_1000A34F0;
  if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 40);
    v8[0] = 67109120;
    v8[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SmartPowerNap: set state to %d", (uint8_t *)v8, 8u);
  }
  int v4 = *(unsigned __int8 *)(a1 + 40);
  if (v4 != objc_msgSend(*(id *)(a1 + 32), "current_state"))
  {
    if (*(unsigned char *)(a1 + 40))
    {
      if (*(unsigned char *)(a1 + 40) != 1) {
        return;
      }
      [*(id *)(a1 + 32) enterSmartPowerNap];
      int v5 = [*(id *)(a1 + 32) predictor];
      uint64_t v6 = v5;
      uint64_t v7 = 1;
    }
    else
    {
      [*(id *)(a1 + 32) exitSmartPowerNap];
      int v5 = [*(id *)(a1 + 32) predictor];
      uint64_t v6 = v5;
      uint64_t v7 = 0;
    }
    [v5 updateSmartPowerNapState:v7];
  }
}

uint64_t sub_100006BFC(uint64_t a1)
{
  id v2 = (void *)qword_1000A34F0;
  if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(void **)(a1 + 32);
    int v4 = v2;
    v6[0] = 67109120;
    v6[1] = objc_msgSend(v3, "current_state");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "SmartPowerNap: syncState %u", (uint8_t *)v6, 8u);
  }
  return (*(uint64_t (**)(void, id))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), objc_msgSend(*(id *)(a1 + 32), "current_state"));
}

void sub_100006E9C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) predictor];
  [v2 updateReentryCoolOffPeriod:*(unsigned int *)(a1 + 40)];
}

void sub_100007004(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) predictor];
  [v2 updateReentryDelaySeconds:*(unsigned int *)(a1 + 40)];
}

void sub_10000716C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) predictor];
  [v2 updateRequeryDelta:*(unsigned int *)(a1 + 40)];
}

void sub_1000072D4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) predictor];
  [v2 updateMotionAlarmThreshold:*(unsigned int *)(a1 + 40)];
}

void sub_10000743C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) predictor];
  [v2 updateMotionAlarmStartThreshold:*(unsigned int *)(a1 + 40)];
}

void sub_100007718(id a1)
{
  qword_1000A4638 = objc_alloc_init(PMSmartPowerNapPredictor);

  _objc_release_x1();
}

id sub_100007C80()
{
  uint64_t v4 = 0;
  int v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)qword_1000A4660;
  uint64_t v7 = qword_1000A4660;
  if (!qword_1000A4660)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10000F340;
    v3[3] = &unk_100091458;
    v3[4] = &v4;
    sub_10000F340((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_100007D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100007D64(uint64_t a1)
{
  return [*(id *)(a1 + 32) restoreState];
}

void sub_100007D6C(uint64_t a1)
{
  id v2 = qword_1000A34F0;
  if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SmartPowerNap: Received first unlock notification. Initializing predictor", buf, 2u);
  }
  dispatch_time_t v3 = dispatch_time(0xFFFFFFFFFFFFFFFELL, 2000000000);
  uint64_t v4 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100007E70;
  block[3] = &unk_1000911E8;
  id v6 = *(id *)(a1 + 32);
  dispatch_after(v3, v4, block);
}

void sub_100007E70(uint64_t a1)
{
  sub_100007C80();
  if (objc_opt_class())
  {
    id v2 = objc_alloc_init((Class)sub_100007C80());
    objc_msgSend(*(id *)(a1 + 32), "setInactivity_predictor:", v2);

    dispatch_time_t v3 = (void *)qword_1000A34F0;
    if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void **)(a1 + 32);
      int v5 = v3;
      int v9 = 134217984;
      id v10 = objc_msgSend(v4, "lock_state");
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "SmartPowerNap: Initialized predictor. Evaluate SPN %llu", (uint8_t *)&v9, 0xCu);
    }
    objc_msgSend(*(id *)(a1 + 32), "evaluateSmartPowerNap:", objc_msgSend(*(id *)(a1 + 32), "lock_state") == 0);
    if (_os_feature_enabled_impl())
    {
      id v6 = [PMSmartPowerNapLocationMonitor alloc];
      uint64_t v7 = [*(id *)(a1 + 32) queue];
      v8 = [(PMSmartPowerNapLocationMonitor *)v6 initWithQueue:v7];
      objc_msgSend(*(id *)(a1 + 32), "setLocation_monitor:", v8);
    }
  }
}

id sub_100007FD4(uint64_t a1)
{
  return [*(id *)(a1 + 32) initializeTrialClient];
}

void sub_100007FDC(uint64_t a1)
{
  id v2 = +[BLSBacklight sharedBacklight];
  objc_msgSend(*(id *)(a1 + 32), "setIs_aod_enabled:", objc_msgSend(v2, "isAlwaysOnEnabled"));
}

void sub_1000083DC(uint64_t a1)
{
  if (objc_msgSend(*(id *)(a1 + 32), "in_smartpowernap"))
  {
    id v2 = *(void **)(a1 + 32);
    [v2 exitSmartPowerNapWithReason:@"PredictedEndOfSession"];
  }
  else
  {
    dispatch_time_t v3 = qword_1000A34F0;
    if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "SmartPowerNap: Not in SmartPowerNap at end of predicted inactivity", v4, 2u);
    }
  }
}

id sub_100008480(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setEnd_session_timer:", 0);
}

id sub_10000848C(uint64_t a1)
{
  id result = objc_msgSend(*(id *)(a1 + 32), "in_smartpowernap");
  if (result)
  {
    dispatch_time_t v3 = *(void **)(a1 + 32);
    return [v3 enterSmartPowerNap];
  }
  return result;
}

id sub_10000956C(uint64_t a1)
{
  return [*(id *)(a1 + 32) reenterSmartPowerNap];
}

void sub_1000098B4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setLast_requery_delta:", 10);
  if ((objc_msgSend(*(id *)(a1 + 32), "in_smartpowernap") & 1) == 0)
  {
    if (objc_msgSend(*(id *)(a1 + 32), "lock_state") == (id)1
      && (objc_msgSend(*(id *)(a1 + 32), "backlight_state") & 1) == 0
      && [*(id *)(a1 + 32) isSleepSuppressionSupported])
    {
      id v2 = qword_1000A34F0;
      if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SmartPowerNap: evaluating model", buf, 2u);
      }
      [*(id *)(a1 + 32) queryModelAndEngage];
    }
    else
    {
      dispatch_time_t v3 = qword_1000A34F0;
      if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v4 = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "SmartPowerNap: conditions don't match to evaluate model", v4, 2u);
      }
    }
  }
}

id sub_1000099B0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setEvaluation_timer:", 0);
}

void sub_100009C48(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_ERROR)) {
      sub_100063648();
    }
    goto LABEL_25;
  }
  objc_msgSend(*(id *)(a1 + 32), "setPredictor_output:", v5);
  uint64_t v7 = objc_msgSend(*(id *)(a1 + 32), "predictor_output");

  if (!v7) {
    goto LABEL_25;
  }
  v8 = (void *)qword_1000A34F0;
  if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = *(void **)(a1 + 32);
    id v10 = v8;
    unsigned int v11 = objc_msgSend(v9, "predictor_output");
    id v12 = [v11 confidenceLevel];
    v13 = objc_msgSend(*(id *)(a1 + 32), "predictor_output");
    [v13 confidenceValue];
    uint64_t v15 = v14;
    __int16 v16 = objc_msgSend(*(id *)(a1 + 32), "predictor_output");
    [v16 predictedDuration];
    __int16 v18 = v17;
    unsigned int v19 = objc_msgSend(*(id *)(a1 + 32), "predictor_output");
    *(_DWORD *)buf = 134218752;
    id v56 = v12;
    __int16 v57 = 2048;
    v58 = v15;
    __int16 v59 = 2048;
    v60 = v18;
    __int16 v61 = 1024;
    unsigned int v62 = [v19 outputReason];
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "SmartPowerNap: predictor_output confidencelevel: %ld, confidenceValue: %f, predictedDuration: %f, reason: %d", buf, 0x26u);
  }
  v20 = objc_msgSend(*(id *)(a1 + 32), "predictor_output");
  [v20 predictedDuration];
  double v22 = v21;

  v23 = objc_msgSend(*(id *)(a1 + 32), "predictor_output");
  if ([v23 confidenceLevel] != (id)2 || (uint64_t v24 = (uint64_t)(v22 * 60.0 * 60.0), v24 < 1))
  {

    goto LABEL_13;
  }
  int v25 = *(unsigned __int8 *)(a1 + 40);

  if (!v25)
  {
LABEL_13:
    objc_msgSend(*(id *)(a1 + 32), "scheduleModelRequeryWithOutputReason:", objc_msgSend(v5, "outputReason"));
    goto LABEL_25;
  }
  v26 = +[NSDate date];
  objc_msgSend(*(id *)(a1 + 32), "setFull_session_start_time:", v26);

  v27 = objc_msgSend(*(id *)(a1 + 32), "full_session_start_time");
  v28 = [v27 dateByAddingTimeInterval:(double)v24];
  objc_msgSend(*(id *)(a1 + 32), "setPredicted_end_time:", v28);

  objc_msgSend(*(id *)(a1 + 32), "setCurrent_interruption:", 0);
  v29 = [*(id *)(a1 + 32) interruptions];
  [v29 removeAllObjects];

  v30 = +[NSDate date];
  objc_msgSend(*(id *)(a1 + 32), "setCumulative_interruption_session_start:", v30);

  objc_msgSend(*(id *)(a1 + 32), "setCumulative_interruption_session_duration:", (double)v24);
  v31 = objc_msgSend(*(id *)(a1 + 32), "trial_client");
  v32 = [v31 levelForFactor:@"exitSPNOnModelOutput" withNamespaceName:@"COREOS_PREDICTION_INACTIVITY"];

  id v33 = [v32 BOOLeanValue];
  BOOL v34 = (v33 & 1) == 0 && [v5 outputReason] == (id)1;
  [*(id *)(a1 + 32) setSkipEndOfSessionTimer:v34];
  [*(id *)(a1 + 32) enterSmartPowerNap];
  unsigned int v35 = [*(id *)(a1 + 32) skipEndOfSessionTimer];
  v36 = (void *)qword_1000A34F0;
  BOOL v37 = os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_DEFAULT);
  if (v35)
  {
    if (v37)
    {
      v38 = v36;
      v39 = +[NSNumber numberWithLong:(uint64_t)(v22 * 60.0 * 60.0)];
      *(_DWORD *)buf = 138412290;
      id v56 = v39;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "SmartPowerNap: Not setting timer for duration %@", buf, 0xCu);
    }
  }
  else
  {
    if (v37)
    {
      v40 = v36;
      v41 = +[NSNumber numberWithLong:(uint64_t)(v22 * 60.0 * 60.0)];
      v42 = +[NSNumber numberWithBool:v33];
      v43 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v5 outputReason]);
      *(_DWORD *)buf = 138412802;
      id v56 = v41;
      __int16 v57 = 2112;
      v58 = v42;
      __int16 v59 = 2112;
      v60 = v43;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "SmartPowerNap: Setting timer for duration %@, trial exitSPNOnModelOutput: %@, output reason: %@", buf, 0x20u);
    }
    v44 = objc_msgSend(*(id *)(a1 + 32), "end_session_timer");

    v45 = *(void **)(a1 + 32);
    if (v44)
    {
      v46 = objc_msgSend(v45, "end_session_timer");
      dispatch_suspend(v46);
    }
    else
    {
      v47 = [v45 queue];
      dispatch_source_t v48 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v47);
      objc_msgSend(*(id *)(a1 + 32), "setEnd_session_timer:", v48);

      v49 = objc_msgSend(*(id *)(a1 + 32), "end_session_timer");
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_10000A274;
      handler[3] = &unk_1000911E8;
      handler[4] = *(void *)(a1 + 32);
      dispatch_source_set_event_handler(v49, handler);

      v46 = objc_msgSend(*(id *)(a1 + 32), "end_session_timer");
      v53[0] = _NSConcreteStackBlock;
      v53[1] = 3221225472;
      v53[2] = sub_10000A318;
      v53[3] = &unk_1000911E8;
      v53[4] = *(void *)(a1 + 32);
      dispatch_source_set_cancel_handler(v46, v53);
    }

    v50 = objc_msgSend(*(id *)(a1 + 32), "end_session_timer");
    dispatch_time_t v51 = dispatch_walltime(0, 1000000000 * v24);
    dispatch_source_set_timer(v50, v51, 0xFFFFFFFFFFFFFFFFLL, 0);

    v52 = objc_msgSend(*(id *)(a1 + 32), "end_session_timer");
    dispatch_resume(v52);
  }
LABEL_25:
}

void sub_10000A274(uint64_t a1)
{
  if (objc_msgSend(*(id *)(a1 + 32), "in_smartpowernap"))
  {
    id v2 = *(void **)(a1 + 32);
    [v2 exitSmartPowerNapWithReason:@"PredictedEndOfSession"];
  }
  else
  {
    dispatch_time_t v3 = qword_1000A34F0;
    if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "SmartPowerNap: Not in SmartPowerNap at end of predicted inactivity", v4, 2u);
    }
  }
}

id sub_10000A318(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setEnd_session_timer:", 0);
}

id sub_10000A5A4(uint64_t a1)
{
  id result = objc_msgSend(*(id *)(a1 + 32), "in_smartpowernap");
  if (result)
  {
    id result = objc_msgSend(*(id *)(a1 + 32), "motion_alarm_set");
    if ((result & 1) == 0)
    {
      dispatch_time_t v3 = qword_1000A34F0;
      if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v4 = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Registering motion alarm", v4, 2u);
      }
      return [*(id *)(a1 + 32) registerMotionAlarm];
    }
  }
  return result;
}

void sub_10000AAC4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_ERROR)) {
      sub_100063790();
    }
  }
  else
  {
    id v7 = [v5 confidenceLevel];
    v8 = qword_1000A34F0;
    BOOL v9 = os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_DEFAULT);
    if (v7 == (id)2)
    {
      if (v9)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "SmartPowerNap: re-entering SmartPowerNap after user interruption", buf, 2u);
      }
      [*(id *)(a1 + 32) enterSmartPowerNap];
    }
    else if (v9)
    {
      *(_WORD *)id v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "SmartPowerNap: sleep signals are not met for re-entry", v10, 2u);
    }
  }
}

id sub_10000AEF0(uint64_t a1)
{
  id result = objc_msgSend(*(id *)(a1 + 32), "lock_state");
  if (result)
  {
    id result = objc_msgSend(*(id *)(a1 + 32), "backlight_state");
    if ((result & 1) == 0)
    {
      id result = [*(id *)(a1 + 32) isSleepSuppressionSupported];
      if (result)
      {
        dispatch_time_t v3 = *(void **)(a1 + 32);
        return [v3 queryModelAndEngage];
      }
    }
  }
  return result;
}

id sub_10000AF54(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setRequery_timer:", 0);
}

void sub_10000B7BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_10000B7E4()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)qword_1000A4680;
  uint64_t v7 = qword_1000A4680;
  if (!qword_1000A4680)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10000F520;
    v3[3] = &unk_100091458;
    v3[4] = &v4;
    sub_10000F520((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_10000B8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10000B8C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = 0;
  int v14 = &v13;
  uint64_t v15 = 0x2050000000;
  v8 = (void *)qword_1000A4690;
  uint64_t v16 = qword_1000A4690;
  if (!qword_1000A4690)
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10000F6E8;
    v12[3] = &unk_100091458;
    v12[4] = &v13;
    sub_10000F6E8((uint64_t)v12, a2, a3, a4, a5, a6, a7, a8, v11);
    v8 = (void *)v14[3];
  }
  id v9 = v8;
  _Block_object_dispose(&v13, 8);

  return v9;
}

void sub_10000B994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000B9AC(id a1, BPSCompletion *a2)
{
  if ([(BPSCompletion *)a2 state])
  {
    if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_ERROR)) {
      sub_10006382C();
    }
  }
}

void sub_10000B9FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_copyWeak(&to, (id *)(a1 + 40));
  id v4 = objc_loadWeakRetained(&to);

  if (v4)
  {
    id v5 = qword_1000A34F0;
    if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "MobileTimer alarm fired!", buf, 2u);
    }
    id v6 = objc_loadWeakRetained(&to);
    unsigned int v7 = objc_msgSend(v6, "in_smartpowernap");

    if (v7)
    {
      [*(id *)(a1 + 32) exitSmartPowerNapWithReason:@"MobileTimerFired"];
    }
    else
    {
      v8 = qword_1000A34F0;
      if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "smart power nap not engaging when alarm fired", v9, 2u);
      }
    }
  }
  objc_destroyWeak(&to);
}

void sub_10000BB18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id location)
{
}

void sub_10000C2FC(uint64_t a1)
{
  if ((objc_msgSend(*(id *)(a1 + 32), "in_smartpowernap") & 1) == 0
    && (objc_msgSend(*(id *)(a1 + 32), "session_logged") & 1) == 0)
  {
    id v2 = objc_msgSend(*(id *)(a1 + 32), "current_interruption");
    id v3 = [v2 end];

    if (!v3)
    {
      id v4 = qword_1000A34F0;
      if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)unsigned int v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Metrics: SmartPowerNap: logging a breaking interruption", v7, 2u);
      }
      id v5 = *(void **)(a1 + 32);
      id v6 = objc_msgSend(v5, "session_end_reason");
      [v5 logEndOfSessionWithReason:v6];

      [*(id *)(a1 + 32) logTransientInterruptions];
      objc_msgSend(*(id *)(a1 + 32), "setSession_logged:", 1);
      objc_msgSend(*(id *)(a1 + 32), "setSession_end_reason:", 0);
    }
  }
}

id sub_10000C69C(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_10000C8C0(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_10000CBF8(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_10000E374(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_10000E390(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_copyWeak(&to, (id *)(a1 + 32));
  id v4 = objc_loadWeakRetained(&to);

  if (v4)
  {
    id v5 = objc_loadWeakRetained(&to);
    [v5 updateTrialFactors];
  }
  objc_destroyWeak(&to);
}

void sub_10000E400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

void sub_10000F060(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v4)
  {
    xpc_object_t reply = xpc_dictionary_create_reply(v4);
    if (reply)
    {
      if (sub_10005D5C0(v3, @"com.apple.powerd.smartpowernap.tester", 1))
      {
        uint64_t uint64 = xpc_dictionary_get_uint64(v5, "setSPNRequeryDelta");
        if (uint64 - 0x100000000 > 0xFFFFFFFF00000000)
        {
          dword_1000A2CC0 = uint64;
          id v9 = qword_1000A34F0;
          if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_DEFAULT))
          {
            v10[0] = 67109120;
            v10[1] = dword_1000A2CC0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Updated Smart Power Nap re-query delta to %u\n", (uint8_t *)v10, 8u);
          }
          uint64_t v8 = 0;
        }
        else
        {
          uint64_t v8 = -536870206;
          if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_ERROR)) {
            sub_100063B34();
          }
        }
      }
      else
      {
        uint64_t v8 = -536870207;
        if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_ERROR)) {
          sub_100063B9C();
        }
      }
      xpc_dictionary_set_uint64(reply, "returnCode", v8);
      xpc_connection_send_message(v3, reply);
    }
    else if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_ERROR))
    {
      sub_100063B00();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_ERROR))
  {
    sub_100063ACC();
  }
}

void sub_10000F268(id a1)
{
  if (!dlopen_preflight("/System/Library/PrivateFrameworks/OSIntelligence.framework/OSIntelligence"))
  {
    if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_ERROR)) {
      sub_100063C38();
    }
    byte_1000A4650 = 1;
  }
  if (!dlopen_preflight("/System/Library/PrivateFrameworks/BiomeStreams.framework/BiomeStreams"))
  {
    if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_ERROR)) {
      sub_100063C04();
    }
    byte_1000A4650 = 1;
  }
  if (!dlopen_preflight("/System/Library/PrivateFrameworks/BiomeLibrary.framework/BiomeLibrary"))
  {
    if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_ERROR)) {
      sub_100063BD0();
    }
    byte_1000A4650 = 1;
  }
}

Class sub_10000F340(uint64_t a1)
{
  v4[0] = 0;
  if (!qword_1000A4668)
  {
    v4[1] = _NSConcreteStackBlock;
    v4[2] = 3221225472;
    v4[3] = sub_10000F484;
    v4[4] = &unk_100091490;
    v4[5] = v4;
    long long v5 = off_100091478;
    uint64_t v6 = 0;
    qword_1000A4668 = _sl_dlopen();
    uint64_t v2 = (void *)v4[0];
    if (!qword_1000A4668)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("_OSInactivityPredictionClient");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    uint64_t v2 = (void *)sub_100063C6C();
LABEL_8:
    free(v2);
  }
  qword_1000A4660 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_10000F484()
{
  uint64_t result = _sl_dlopen();
  qword_1000A4668 = result;
  return result;
}

void sub_10000F4F8(id a1)
{
  byte_1000A4670 = MGGetBoolAnswer();
}

void sub_10000F520(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("BMStreams");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1000A4680 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_100063C94();
    sub_10000F578();
  }
}

void sub_10000F578()
{
  v1[0] = 0;
  if (!qword_1000A4688)
  {
    v1[1] = _NSConcreteStackBlock;
    v1[2] = 3221225472;
    v1[3] = sub_10000F674;
    v1[4] = &unk_100091490;
    v1[5] = v1;
    long long v2 = off_1000914D0;
    uint64_t v3 = 0;
    qword_1000A4688 = _sl_dlopen();
  }
  v0 = (void *)v1[0];
  if (!qword_1000A4688)
  {
    v0 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v1[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t sub_10000F674()
{
  uint64_t result = _sl_dlopen();
  qword_1000A4688 = result;
  return result;
}

void sub_10000F6E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  sub_10000F578();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("BMBiomeScheduler");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1000A4690 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v10 = (void *)sub_100063CBC();
    sub_10000F740(v10, v11, v12, v13, v14, v15, v16, v17, a9);
  }
}

void sub_10000F740(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_10000F768(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_10000F784(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_10000F7A0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void sub_10000F834(id a1)
{
  qword_1000A46A0 = objc_alloc_init(PMLowPowerModeService);

  _objc_release_x1();
}

void sub_10000FAB8(uint64_t a1)
{
  long long v2 = qword_1000A4698;
  if (os_log_type_enabled((os_log_t)qword_1000A4698, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "LPM: Deferred Init timer fired\n", buf, 2u);
  }
  if (notify_register_check((const char *)[@"com.apple.system.lowpowermode" UTF8String], &dword_1000A46B0)&& os_log_type_enabled((os_log_t)qword_1000A4698, OS_LOG_TYPE_ERROR))
  {
    sub_100064018();
  }
  *(void *)buf = 0;
  if (notify_get_state(dword_1000A46B0, (uint64_t *)buf)
    && os_log_type_enabled((os_log_t)qword_1000A4698, OS_LOG_TYPE_ERROR))
  {
    sub_100063FA4();
  }
  [*(id *)(a1 + 32) setEnabled:*(void *)buf != 0];
  if (notify_register_check((const char *)[@"com.apple.system.lowpowermode.auto_disabled" UTF8String], &dword_1000A46B4)&& os_log_type_enabled((os_log_t)qword_1000A4698, OS_LOG_TYPE_ERROR))
  {
    sub_100063F30();
  }
  uint64_t v3 = (const char *)[@"com.apple.powerd.lowpowermode.prefs" UTF8String];
  id v4 = [*(id *)(a1 + 32) mainQueue];
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1000100B0;
  handler[3] = &unk_1000911C0;
  id v34 = *(id *)(a1 + 32);
  LODWORD(v3) = notify_register_dispatch(v3, &dword_1000A46B8, v4, handler);

  if (v3 && os_log_type_enabled((os_log_t)qword_1000A4698, OS_LOG_TYPE_ERROR)) {
    sub_100063EBC();
  }
  if (objc_opt_class())
  {
    uint64_t v5 = kLostModeChangedNotification;
    uint64_t v6 = (const char *)[kLostModeChangedNotification UTF8String];
    unsigned int v7 = [*(id *)(a1 + 32) mainQueue];
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_1000100B8;
    v31[3] = &unk_1000911C0;
    id v32 = *(id *)(a1 + 32);
    uint64_t v8 = notify_register_dispatch(v6, &dword_1000A46BC, v7, v31);

    if (v8)
    {
      uint64_t v9 = qword_1000A4698;
      if (os_log_type_enabled((os_log_t)qword_1000A4698, OS_LOG_TYPE_ERROR)) {
        sub_100063E44(v5, v8, v9);
      }
    }
  }
  else
  {
    id v10 = qword_1000A4698;
    if (os_log_type_enabled((os_log_t)qword_1000A4698, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "LPM: FMD is not available. Skipping lostModeChangedNotification registration\n", v36, 2u);
    }
  }
  [*(id *)(a1 + 32) setPluggedIn:IOPSDrawingUnlimitedPower()];
  uint8_t v11 = (void *)qword_1000A4698;
  if (os_log_type_enabled((os_log_t)qword_1000A4698, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(void **)(a1 + 32);
    uint64_t v13 = v11;
    unsigned int v14 = [v12 pluggedIn];
    *(_DWORD *)v36 = 67109120;
    int v37 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "LPM: Pluggedin=%d at init\n", v36, 8u);
  }
  int v30 = 0;
  int v15 = IOPSGetPercentRemaining();
  if (v15)
  {
    int v16 = v15;
    uint64_t v17 = qword_1000A4698;
    if (os_log_type_enabled((os_log_t)qword_1000A4698, OS_LOG_TYPE_ERROR)) {
      sub_100063DCC(v16, v17);
    }
  }
  else
  {
    [*(id *)(a1 + 32) setBatteryPercentage:(double)v30];
    __int16 v18 = (void *)qword_1000A4698;
    if (os_log_type_enabled((os_log_t)qword_1000A4698, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v19 = *(void **)(a1 + 32);
      v20 = v18;
      [v19 batteryPercentage];
      *(_DWORD *)v36 = 67109120;
      int v37 = (int)v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "LPM: Battery Percentage=%d%% at init\n", v36, 8u);
    }
  }
  double v22 = [*(id *)(a1 + 32) mainQueue];
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  v28[2] = sub_1000100C0;
  v28[3] = &unk_1000911C0;
  id v29 = *(id *)(a1 + 32);
  uint32_t v23 = notify_register_dispatch("com.apple.system.powersources.percent", &dword_1000A46C0, v22, v28);

  if (v23 && os_log_type_enabled((os_log_t)qword_1000A4698, OS_LOG_TYPE_ERROR)) {
    sub_100063D58();
  }
  uint64_t v24 = [*(id *)(a1 + 32) mainQueue];
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_1000100CC;
  v26[3] = &unk_1000911C0;
  id v27 = *(id *)(a1 + 32);
  uint32_t v25 = notify_register_dispatch("com.apple.system.powersources.source", &dword_1000A46C4, v24, v26);

  if (v25 && os_log_type_enabled((os_log_t)qword_1000A4698, OS_LOG_TYPE_ERROR)) {
    sub_100063CE4();
  }
  [*(id *)(a1 + 32) readPreferences];
  [*(id *)(a1 + 32) autoEnableCheck];
  [*(id *)(a1 + 32) lostModeCheck];
  [*(id *)(a1 + 32) initAnalyticsTimers];
  [*(id *)(a1 + 32) resume];
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 40));
}

id sub_1000100B0(uint64_t a1)
{
  return [*(id *)(a1 + 32) readPreferences];
}

id sub_1000100B8(uint64_t a1)
{
  return [*(id *)(a1 + 32) lostModeCheck];
}

id sub_1000100C0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) batteryPercentageNotificationHandler:a2];
}

id sub_1000100CC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) pluggedInNotificationHandler:a2];
}

void sub_100010200(uint64_t a1)
{
  long long v2 = qword_1000A4698;
  if (os_log_type_enabled((os_log_t)qword_1000A4698, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "LPM: Reporting daily analytics\n", v9, 2u);
  }
  uint64_t v3 = *(unsigned char **)(a1 + 32);
  if (v3[8])
  {
    BOOL v4 = 1;
  }
  else
  {
    uint64_t v5 = [v3 readDateFromDefaults];
    uint64_t v6 = +[NSDate date];
    if (v5 && [v5 compare:v6] == (id)-1)
    {
      [v6 timeIntervalSinceDate:v5];
      BOOL v4 = v7 >> 7 < 0x2A3;
    }
    else
    {
      BOOL v4 = 0;
    }
  }
  uint64_t v8 = +[NSNumber numberWithBool:v4];
  +[PMPowerModeAnalytics sendAnalyticsDaily:v8 forStream:@"com.apple.powerd.lowpowermode.daily"];
}

void sub_100011DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100011DC8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64);
  if (*(unsigned char *)(*(void *)(a1 + 32) + 8) == (v1 == 1))
  {
    long long v2 = qword_1000A4698;
    if (os_log_type_enabled((os_log_t)qword_1000A4698, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v3 = @"OFF";
      if (v1 == 1) {
        CFStringRef v3 = @"ON";
      }
      int v10 = 138412290;
      CFStringRef v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "LPM: setPowerMode: state is already set to %@", (uint8_t *)&v10, 0xCu);
    }
  }
  else
  {
    uint64_t v5 = +[NSDate date];
    unsigned int v6 = [*(id *)(a1 + 32) toggleState:v1 == 1 withDate:v5 withBatteryLevel:*(void *)(a1 + 40) fromSource:*(void *)(a1 + 48) withParams:*(double *)(*(void *)(a1 + 32) + 32)];
    double v7 = qword_1000A4698;
    if (v6)
    {
      if (os_log_type_enabled((os_log_t)qword_1000A4698, OS_LOG_TYPE_ERROR)) {
        sub_1000643C8();
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
    }
    else if (os_log_type_enabled((os_log_t)qword_1000A4698, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v8 = *(const __CFString **)(a1 + 64);
      uint64_t v9 = *(void *)(a1 + 40);
      int v10 = 134218242;
      CFStringRef v11 = v8;
      __int16 v12 = 2114;
      uint64_t v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "LPM: Set Power Mode: %ld, Source: %{public}@", (uint8_t *)&v10, 0x16u);
    }
  }
}

void sub_100012820(id a1)
{
  byte_1000A46C8 = MGGetBoolAnswer();
}

void sub_100012A74(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void sub_100012AA4(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x12u);
}

id sub_100013A18(uint64_t a1)
{
  return [*(id *)(a1 + 32) triggerBatteryReauthentication];
}

void sub_100014318(void *a1, io_iterator_t a2)
{
  id v5 = a1;
  uint64_t v3 = IOIteratorNext(a2);
  if (v3)
  {
    uint64_t v4 = v3;
    do
    {
      [v5 handleServiceAdded:v4];
      IOObjectRelease(v4);
      uint64_t v4 = IOIteratorNext(a2);
    }
    while (v4);
  }
}

id sub_1000144C4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return [a1 handleDataFromService:a2 messageType:a3 messageArgument:a4];
}

id sub_100014744()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x3032000000;
  double v7 = sub_10001486C;
  CFStringRef v8 = sub_10001487C;
  id v9 = 0;
  if (qword_1000A46E0)
  {
    v0 = [(id)qword_1000A46E0 queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100014884;
    block[3] = &unk_100091458;
    void block[4] = &v4;
    dispatch_sync(v0, block);

    id v1 = (id)v5[5];
  }
  else
  {
    id v1 = 0;
  }
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_100014854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001486C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10001487C(uint64_t a1)
{
}

uint64_t sub_100014884(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = [(id)qword_1000A46E0 trustedDataShared];

  return _objc_release_x1();
}

void sub_1000148D4()
{
  os_log_t v1 = os_log_create("com.apple.powerd", "batteryTrustedData");
  long long v2 = (void *)qword_1000A46D8;
  qword_1000A46D8 = (uint64_t)v1;

  uint64_t v3 = qword_1000A46D8;
  if (os_log_type_enabled((os_log_t)qword_1000A46D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)double v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Battery Trusted Data init", v7, 2u);
  }
  uint64_t v4 = [[BatteryTrustedData alloc] initWithIdentifer:@"0"];
  id v5 = (void *)qword_1000A46E0;
  qword_1000A46E0 = (uint64_t)v4;

  if (qword_1000A46E0)
  {
    uint64_t v6 = [(id)qword_1000A46E0 queue];
    dispatch_async(v6, &stru_100091580);
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A46D8, OS_LOG_TYPE_ERROR))
  {
    sub_100064AB8();
  }
}

void sub_1000149E0(id a1)
{
}

uint64_t sub_1000149EC()
{
  if (!qword_1000A46E8) {
    qword_1000A46E8 = _sl_dlopen();
  }
  return qword_1000A46E8;
}

uint64_t sub_100014ABC()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = qword_1000A46F0;
  uint64_t v6 = qword_1000A46F0;
  if (!qword_1000A46F0)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_100014BFC;
    v2[3] = &unk_100091458;
    v2[4] = &v3;
    sub_100014BFC((uint64_t)v2);
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100014B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100014B88()
{
  uint64_t result = _sl_dlopen();
  qword_1000A46E8 = result;
  return result;
}

void *sub_100014BFC(uint64_t a1)
{
  long long v2 = (void *)sub_1000149EC();
  if (!v2)
  {
    uint64_t v4 = (void *)abort_report_np();
    free(v4);
  }
  uint64_t result = dlsym(v2, "reauthenticateBattery");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1000A46F0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_100014C88(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void sub_100014FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100015180(id a1, BPSCompletion *a2)
{
  if ([(BPSCompletion *)a2 state])
  {
    if (os_log_type_enabled((os_log_t)qword_1000A36C8, OS_LOG_TYPE_ERROR)) {
      sub_10006382C();
    }
  }
}

void sub_1000151D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)qword_1000A36C8;
  if (os_log_type_enabled((os_log_t)qword_1000A36C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void **)(a1 + 32);
    uint64_t v6 = v4;
    double v7 = [v3 eventBody];
    CFStringRef v8 = objc_msgSend(v5, "placeToString:", objc_msgSend(v7, "userSpecificPlaceType"));
    uint64_t v9 = [v3 eventBody];
    int v10 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v9 placeType]);
    CFStringRef v11 = [v3 eventBody];
    __int16 v12 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v11 isStarting]);
    int v15 = 134218498;
    int v16 = v8;
    __int16 v17 = 2112;
    __int16 v18 = v10;
    __int16 v19 = 2112;
    v20 = v12;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Local location change to %lu, PlaceType %@, starting %@", (uint8_t *)&v15, 0x20u);
  }
  uint64_t v13 = [v3 eventBody];
  unsigned int v14 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v13 userSpecificPlaceType]);
  [*(id *)(a1 + 32) setLocalLOI:v14];
}

void sub_1000154F0(id a1, BPSCompletion *a2)
{
  if ([(BPSCompletion *)a2 state])
  {
    if (os_log_type_enabled((os_log_t)qword_1000A36C8, OS_LOG_TYPE_ERROR)) {
      sub_10006382C();
    }
  }
}

void sub_100015540(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)qword_1000A36C8;
  if (os_log_type_enabled((os_log_t)qword_1000A36C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void **)(a1 + 32);
    uint64_t v6 = v4;
    double v7 = [v3 eventBody];
    CFStringRef v8 = objc_msgSend(v5, "placeToString:", objc_msgSend(v7, "userSpecificPlaceType"));
    uint64_t v24 = a1;
    uint64_t v9 = [v3 eventBody];
    int v10 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v9 placeType]);
    CFStringRef v11 = [v3 eventBody];
    __int16 v12 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v11 starting]);
    uint64_t v13 = [v3 eventBody];
    unsigned int v14 = [v13 deviceUUID];
    *(_DWORD *)buf = 138413058;
    v26 = v8;
    __int16 v27 = 2112;
    v28 = v10;
    __int16 v29 = 2112;
    int v30 = v12;
    __int16 v31 = 2112;
    id v32 = v14;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Remote location change to %@, PlaceType %@, starting %@, from device %@", buf, 0x2Au);

    a1 = v24;
  }
  int v15 = [v3 eventBody];
  int v16 = [v15 deviceUUID];

  __int16 v17 = [v3 eventBody];
  __int16 v18 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v17 userSpecificPlaceType]);

  if (v16 && v18)
  {
    __int16 v19 = [*(id *)(a1 + 32) remoteLOIs];
    uint64_t v20 = [v19 objectForKeyedSubscript:v16];
    if ((void *)v20 == v18)
    {
    }
    else
    {
      double v21 = (void *)v20;
      double v22 = [*(id *)(a1 + 32) localLOI];

      if (v18 != v22)
      {
LABEL_10:
        uint32_t v23 = [*(id *)(a1 + 32) remoteLOIs];
        [v23 setObject:v18 forKeyedSubscript:v16];

        goto LABEL_11;
      }
      __int16 v19 = +[PMCoreSmartPowerNapPredictor sharedInstance];
      [v19 handleRemoteDeviceIsNear];
    }

    goto LABEL_10;
  }
LABEL_11:
}

void sub_1000158A8(uint64_t a1)
{
  id v2 = *(id *)(a1 + 40);
  if (v2 != [*(id *)(a1 + 32) syncing])
  {
    id v3 = +[BMStreams semanticLocationStream];
    uint64_t v4 = *(void **)(a1 + 32);
    uint64_t v5 = [v3 publisher];
    uint64_t v6 = [v4 addCSPNFiltersToBMDSL:v5];

    uint64_t v7 = *(void *)(a1 + 40);
    if (v7)
    {
      if (v7 == 2)
      {
        __int16 v17 = qword_1000A36C8;
        if (os_log_type_enabled((os_log_t)qword_1000A36C8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Sync Remote Location With Wake", buf, 2u);
        }
        uint64_t v9 = [*(id *)(a1 + 32) contextSyncClient];
        __int16 v19 = 0;
        unsigned __int8 v10 = [v9 registerForUpdates:v6 withIdentifier:@"com.apple.powerd.biomeRemoteLOI" shouldWake:1 forDeviceTypes:1 withError:&v19];
        CFStringRef v11 = v19;
      }
      else
      {
        if (v7 != 1) {
          goto LABEL_14;
        }
        CFStringRef v8 = qword_1000A36C8;
        if (os_log_type_enabled((os_log_t)qword_1000A36C8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sync Remote Location Without Wake", buf, 2u);
        }
        uint64_t v9 = [*(id *)(a1 + 32) contextSyncClient];
        uint64_t v20 = 0;
        unsigned __int8 v10 = [v9 registerForUpdates:v6 withIdentifier:@"com.apple.powerd.biomeRemoteLOI" shouldWake:0 forDeviceTypes:1 withError:&v20];
        CFStringRef v11 = v20;
      }
      id v15 = v11;

      if (v10)
      {
LABEL_20:
        [*(id *)(a1 + 32) setSyncing:*(void *)(a1 + 40)];
LABEL_21:

LABEL_22:
        return;
      }
    }
    else
    {
      __int16 v12 = qword_1000A36C8;
      if (os_log_type_enabled((os_log_t)qword_1000A36C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Not Syncing Remote Location", buf, 2u);
      }
      uint64_t v13 = [*(id *)(a1 + 32) contextSyncClient];
      id v18 = 0;
      unsigned int v14 = [v13 unregisterForUpdates:v6 withIdentifier:@"com.apple.powerd.biomeRemoteLOI" forDeviceTypes:1 withError:&v18];
      id v15 = v18;

      if (v14) {
        goto LABEL_20;
      }
    }
    if (v15)
    {
      int v16 = qword_1000A36C8;
      if (os_log_type_enabled((os_log_t)qword_1000A36C8, OS_LOG_TYPE_ERROR)) {
        sub_100064B20((uint64_t)v15, v16);
      }
      goto LABEL_21;
    }
LABEL_14:
    if (os_log_type_enabled((os_log_t)qword_1000A36C8, OS_LOG_TYPE_ERROR)) {
      sub_100064AEC();
    }
    goto LABEL_22;
  }
}

void sub_100015D8C(id a1)
{
  if (!dlopen_preflight("/System/Library/PrivateFrameworks/ContextSync.framework/ContextSync"))
  {
    if (os_log_type_enabled((os_log_t)qword_1000A36C8, OS_LOG_TYPE_ERROR)) {
      sub_100064B98();
    }
    byte_1000A46F8 = 1;
  }
}

Class sub_100015DEC(uint64_t a1)
{
  v4[0] = 0;
  if (!qword_1000A4710)
  {
    v4[1] = _NSConcreteStackBlock;
    v4[2] = 3221225472;
    v4[3] = sub_100015F30;
    v4[4] = &unk_100091490;
    v4[5] = v4;
    long long v5 = off_100091668;
    uint64_t v6 = 0;
    qword_1000A4710 = _sl_dlopen();
    id v2 = (void *)v4[0];
    if (!qword_1000A4710)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("ContextSyncClient");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    id v2 = (void *)sub_100064BCC();
LABEL_8:
    free(v2);
  }
  qword_1000A4708 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_100015F30()
{
  uint64_t result = _sl_dlopen();
  qword_1000A4710 = result;
  return result;
}

uint64_t sub_100015FA4(const __CFDictionary *a1, int a2)
{
  value = 0;
  int valuePtr = -1;
  uint64_t result = CFDictionaryGetValueIfPresent(a1, @"Format Version", (const void **)&value);
  if (result)
  {
    uint64_t v4 = value;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (v4 && CFGetTypeID(v4) == TypeID)
    {
      CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr);
      int v6 = valuePtr;
    }
    else
    {
      int v6 = -1;
    }
    return v6 >= a2;
  }
  return result;
}

const void *sub_100016038(const void *a1)
{
  CFTypeID TypeID = CFNumberGetTypeID();
  if (!a1) {
    return 0;
  }
  if (CFGetTypeID(a1) == TypeID) {
    return a1;
  }
  return 0;
}

BOOL sub_10001607C(const __CFDictionary *a1)
{
  if (!a1)
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    sub_100064BF4();
    return 0;
  }
  value = 0;
  if (!CFDictionaryGetValueIfPresent(a1, @"Serial", (const void **)&value))
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    sub_100064C28();
    return 0;
  }
  CFStringRef v1 = (const __CFString *)sub_10002E9B8();
  if (CFStringCompare(v1, (CFStringRef)value, 0))
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    sub_100064C5C();
    return 0;
  }
  return 1;
}

CFMutableDictionaryRef sub_100016150()
{
  int valuePtr = 3;
  CFDictionaryRef v0 = (const __CFDictionary *)_CFPreferencesCopyMultipleWithContainer();
  if (v0)
  {
    CFDictionaryRef v1 = v0;
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v0);
    CFRelease(v1);
  }
  else
  {
    CFMutableDictionaryRef MutableCopy = 0;
  }
  if (!sub_10001607C(MutableCopy) || (sub_100015FA4(MutableCopy, 3) & 1) == 0)
  {
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
    CFDictionaryRef v3 = CFPreferencesCopyMultiple(0, @"com.apple.batterydata.cyclecount", kCFPreferencesAnyUser, kCFPreferencesCurrentHost);
    if (v3)
    {
      CFDictionaryRef v4 = v3;
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v3);
      CFRelease(v4);
      sub_100016698(MutableCopy, @"com.apple.batterydata.cyclecount");
      CFIndex Count = CFDictionaryGetCount(MutableCopy);
      if (Count)
      {
        CFIndex v6 = Count;
        uint64_t v7 = (const void **)malloc_type_malloc(8 * Count, 0x6004044C4A2DFuLL);
        if (v7)
        {
          CFStringRef v8 = v7;
          CFDictionaryGetKeysAndValues(MutableCopy, v7, 0);
          Mutable = CFArrayCreateMutable(0, v6, &kCFTypeArrayCallBacks);
          if (v6 >= 1)
          {
            unsigned __int8 v10 = v8;
            do
            {
              CFStringRef v11 = *v10++;
              CFArrayAppendValue(Mutable, v11);
              --v6;
            }
            while (v6);
          }
          free(v8);
          if (Mutable)
          {
            CFPreferencesSetMultiple(0, Mutable, @"com.apple.batterydata.cyclecount", kCFPreferencesAnyUser, kCFPreferencesCurrentHost);
            CFRelease(Mutable);
          }
        }
      }
    }
    if (!sub_10001607C(MutableCopy) || (sub_100015FA4(MutableCopy, 3) & 1) == 0)
    {
      CFIndex v13 = CFDictionaryGetCount(MutableCopy);
      if (v13)
      {
        CFIndex v14 = v13;
        id v15 = (const void **)malloc_type_malloc(8 * v13, 0x6004044C4A2DFuLL);
        if (v15)
        {
          int v16 = v15;
          CFDictionaryGetKeysAndValues(MutableCopy, v15, 0);
          __int16 v17 = CFArrayCreateMutable(0, v14, &kCFTypeArrayCallBacks);
          if (v14 >= 1)
          {
            id v18 = v16;
            do
            {
              __int16 v19 = *v18++;
              CFArrayAppendValue(v17, v19);
              --v14;
            }
            while (v14);
          }
          free(v16);
          if (v17)
          {
            if (CFArrayGetCount(v17))
            {
              unint64_t v20 = 0;
              do
              {
                CFArrayGetValueAtIndex(v17, v20);
                _CFPreferencesSetValueWithContainer();
                ++v20;
              }
              while (v20 < CFArrayGetCount(v17));
            }
            CFRelease(v17);
          }
        }
      }
      __int16 v12 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      double v21 = (const void *)sub_10002E9B8();
      CFDictionarySetValue(v12, @"Serial", v21);
      CFNumberRef v22 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFDictionarySetValue(v12, @"Format Version", v22);
      CFRelease(v22);
      if (sub_10001607C(MutableCopy) && sub_100015FA4(MutableCopy, 2))
      {
        if (MutableCopy)
        {
          if (v12)
          {
            value = 0;
            CFDictionaryGetValueIfPresent(MutableCopy, @"Index", (const void **)&value);
            uint32_t v23 = value;
            CFTypeID TypeID = CFArrayGetTypeID();
            if (v23)
            {
              if (CFGetTypeID(v23) == TypeID)
              {
                CFArrayRef theArray = 0;
                CFDictionaryGetValueIfPresent(MutableCopy, @"Cycles", (const void **)&theArray);
                CFArrayRef v25 = theArray;
                CFTypeID v26 = CFArrayGetTypeID();
                if (v25)
                {
                  if (CFGetTypeID(v25) == v26)
                  {
                    CFMutableArrayRef v27 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
                    if (v27)
                    {
                      v28 = v27;
                      if (CFArrayGetCount(theArray))
                      {
                        unint64_t v29 = 0;
                        do
                        {
                          CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(theArray, v29);
                          CFTypeID v31 = CFArrayGetTypeID();
                          if (ValueAtIndex)
                          {
                            if (CFGetTypeID(ValueAtIndex) == v31)
                            {
                              CFMutableDictionaryRef v32 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                              if (v32)
                              {
                                id v33 = v32;
                                if (CFArrayGetCount(ValueAtIndex))
                                {
                                  unint64_t v34 = 0;
                                  do
                                  {
                                    unsigned int v35 = CFArrayGetValueAtIndex((CFArrayRef)value, v34);
                                    v36 = CFArrayGetValueAtIndex(ValueAtIndex, v34);
                                    CFDictionarySetValue(v33, v35, v36);
                                    ++v34;
                                  }
                                  while (v34 < CFArrayGetCount(ValueAtIndex));
                                }
                                CFArrayAppendValue(v28, v33);
                                CFRelease(v33);
                              }
                            }
                          }
                          ++v29;
                        }
                        while (v29 < CFArrayGetCount(theArray));
                      }
                      CFDictionarySetValue(v12, @"Cycles", v28);
                      CFRelease(v28);
                      sub_100016698(v12, @"com.apple.batterydata.cyclecount");
                      goto LABEL_51;
                    }
                  }
                }
              }
            }
          }
        }
        if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR))
        {
          sub_100064C90();
          if (!MutableCopy) {
            return v12;
          }
          goto LABEL_51;
        }
      }
      if (!MutableCopy) {
        return v12;
      }
LABEL_51:
      CFRelease(MutableCopy);
      return v12;
    }
  }
  return MutableCopy;
}

void sub_100016698(const __CFDictionary *a1, void *context)
{
  CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)sub_100018D38, context);
  int v3 = _CFPreferencesSynchronizeWithContainer();
  CFDictionaryRef v4 = qword_1000A36A0;
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEBUG)) {
      sub_100064D3C();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR))
  {
    sub_100064CC4((uint64_t)context, v4);
  }
}

__CFDictionary *sub_100016758(const __CFDictionary *a1)
{
  CFDictionaryRef v25 = 0;
  CFDictionaryRef theDict = 0;
  Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    value = 0;
    CFStringRef v3 = @"CycleCount";
    CFDictionaryRef v4 = off_1000916A8;
    do
    {
      if (CFDictionaryGetValueIfPresent(a1, v3, (const void **)&value))
      {
        CFDictionarySetValue(Mutable, *v4, value);
      }
      else
      {
        long long v5 = qword_1000A36A0;
        if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR))
        {
          uint64_t v7 = *v4;
          *(_DWORD *)buf = 138412290;
          unint64_t v29 = v7;
          _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Failed to read data for key %@\n", buf, 0xCu);
        }
      }
      CFStringRef v6 = v4[1];
      ++v4;
      CFStringRef v3 = v6;
    }
    while (v6);
    if (CFDictionaryGetValueIfPresent(a1, @"BatteryData", (const void **)&theDict)
      && (CFDictionaryRef v8 = theDict, TypeID = CFDictionaryGetTypeID(), v8)
      && CFGetTypeID(v8) == TypeID)
    {
      CFDictionaryRef v10 = theDict;
      value = 0;
      CFStringRef v11 = @"Flags";
      __int16 v12 = off_1000916C8;
      do
      {
        if (CFDictionaryGetValueIfPresent(v10, v11, (const void **)&value))
        {
          CFDictionarySetValue(Mutable, *v12, value);
        }
        else
        {
          CFIndex v13 = qword_1000A36A0;
          if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR))
          {
            id v15 = *v12;
            *(_DWORD *)buf = 138412290;
            unint64_t v29 = v15;
            _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Failed to read data for key %@\n", buf, 0xCu);
          }
        }
        CFStringRef v14 = v12[1];
        ++v12;
        CFStringRef v11 = v14;
      }
      while (v14);
    }
    else if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR))
    {
      sub_100064E1C();
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"LifetimeData", (const void **)&v25)
      && (CFDictionaryRef v16 = v25, v17 = CFDictionaryGetTypeID(), v16)
      && CFGetTypeID(v16) == v17)
    {
      CFDictionaryRef v18 = v25;
      value = 0;
      CFStringRef v19 = @"MaximumTemperature";
      unint64_t v20 = off_100091768;
      do
      {
        if (CFDictionaryGetValueIfPresent(v18, v19, (const void **)&value))
        {
          CFDictionarySetValue(Mutable, *v20, value);
        }
        else
        {
          double v21 = qword_1000A36A0;
          if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR))
          {
            uint32_t v23 = *v20;
            *(_DWORD *)buf = 138412290;
            unint64_t v29 = v23;
            _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Failed to read data for key %@\n", buf, 0xCu);
          }
        }
        CFStringRef v22 = v20[1];
        ++v20;
        CFStringRef v19 = v22;
      }
      while (v22);
    }
    else if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR))
    {
      sub_100064DE8();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR))
  {
    sub_100064DB4();
  }
  return Mutable;
}

void sub_100016AAC()
{
  value = 0;
  int valuePtr = 1800;
  qword_1000A4718 = (uint64_t)dispatch_queue_create("com.apple.powerManagement.batteryDataQ", 0);
  dispatch_sync((dispatch_queue_t)qword_1000A4718, &stru_100091800);
  CFDictionaryRef v0 = (const __CFDictionary *)IOPMCopySystemPowerSettings();
  if (v0)
  {
    CFDictionaryRef v1 = v0;
    int v2 = 108000;
    if (CFDictionaryGetValueIfPresent(v0, @"HeatMapInterval", (const void **)&value))
    {
      CFStringRef v3 = value;
      CFTypeID TypeID = CFNumberGetTypeID();
      if (v3)
      {
        if (CFGetTypeID(v3) == TypeID)
        {
          CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr);
          int v2 = 60 * valuePtr;
        }
      }
    }
    int valuePtr = v2;
    CFRelease(v1);
  }
  long long v5 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)qword_1000A4718);
  qword_1000A4720 = (uint64_t)v5;
  dispatch_time_t v6 = dispatch_walltime(0, 0);
  dispatch_source_set_timer(v5, v6, 1000000000 * valuePtr, 0);
  dispatch_source_set_event_handler((dispatch_source_t)qword_1000A4720, &stru_100091840);
  dispatch_resume((dispatch_object_t)qword_1000A4720);
  if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEBUG)) {
    sub_100064E50();
  }
}

void sub_100016C10(id a1)
{
  char v11 = 1;
  int v1 = sub_10005E498(1112036428, &v11, 1u);
  int v2 = qword_1000A36A0;
  if (v1)
  {
    int v3 = v1;
    if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
      sub_100064EFC(v3, v2);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEBUG))
  {
    sub_100064E84(v2, v4, v5, v6, v7, v8, v9, v10);
  }
}

void sub_100016CA4()
{
  unsigned __int8 v58 = 25;
  value = 0;
  values = 0;
  CFDictionaryRef v0 = (const void *)sub_10002E9B8();
  CFTypeID TypeID = CFStringGetTypeID();
  if (v0 && CFGetTypeID(v0) == TypeID)
  {
    CFStringRef v54 = sub_100018D5C(dword_1000A2DF8);
    int v2 = dword_1000A2DF8;
    int valuePtr = 4;
    CFDictionaryRef v3 = sub_10001888C(dword_1000A2DF8);
    if (!sub_10001607C(v3) || (sub_100015FA4(v3, 4) & 1) == 0)
    {
      if (!sub_100015FA4(v3, 3) || !sub_10001607C(v3))
      {
        CFStringRef v4 = sub_100018D5C(dword_1000A2DF8);
        CFIndex Count = CFDictionaryGetCount(v3);
        if (Count)
        {
          CFIndex v6 = Count;
          uint64_t v7 = (const void **)malloc_type_malloc(8 * Count, 0x6004044C4A2DFuLL);
          if (v7)
          {
            uint64_t v8 = v7;
            CFDictionaryGetKeysAndValues(v3, v7, 0);
            Mutable = CFArrayCreateMutable(0, v6, &kCFTypeArrayCallBacks);
            if (v6 >= 1)
            {
              uint64_t v10 = v8;
              do
              {
                char v11 = *v10++;
                CFArrayAppendValue(Mutable, v11);
                --v6;
              }
              while (v6);
            }
            free(v8);
            if (Mutable)
            {
              CFPreferencesSetMultiple(0, Mutable, v4, kCFPreferencesAnyUser, kCFPreferencesCurrentHost);
              CFRelease(Mutable);
            }
          }
        }
        if (v3) {
          CFRelease(v3);
        }
        __int16 v12 = qword_1000A36A0;
        if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          int v65 = v2;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Creating a new heat map for state %d\n", buf, 8u);
        }
        CFDictionaryRef v3 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      }
      CFIndex v13 = (const void *)sub_10002E9B8();
      CFDictionarySetValue(v3, @"Serial", v13);
      CFNumberRef v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
      if (v14)
      {
        CFNumberRef v15 = v14;
        CFDictionarySetValue(v3, @"Format Version", v14);
        CFRelease(v15);
      }
      char v60 = 0;
      char v59 = 1;
      *(_DWORD *)buf = 0;
      int v16 = sub_10005EBEC(1111905072, &v60);
      CFTypeID v17 = qword_1000A36A0;
      if (v16 && os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v55 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "failed to read battery feature flags\n", v55, 2u);
        CFTypeID v17 = qword_1000A36A0;
      }
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
        sub_1000650CC((uint64_t)&v60, v17, v18, v19, v20, v21, v22, v23);
      }
      if (v60)
      {
        *(_DWORD *)buf = 0;
      }
      else if ((v60 & 2) != 0)
      {
        *(_DWORD *)buf = 1;
      }
      CFNumberRef v24 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, buf);
      if (v24)
      {
        CFNumberRef v25 = v24;
        CFDictionarySetValue(v3, @"HeatMapType", v24);
        CFRelease(v25);
      }
    }
    __memset_chk();
    if (off_1000A2D90[0])
    {
      unint64_t v26 = 0;
      CFMutableArrayRef v27 = off_1000A2D90;
      while (1)
      {
        unsigned __int8 v28 = v26;
        if (v26 >= 0xA)
        {
          if (v26 > 0xF)
          {
            if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
              sub_100065098();
            }
            return;
          }
          unsigned __int8 v28 = v26 + 7;
        }
        int v29 = v28 + 1112036400;
        int v30 = sub_10005EBEC(v29, buf);
        if (!v30) {
          break;
        }
        int v31 = v30;
        uint64_t v32 = qword_1000A36A0;
        if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR))
        {
          int valuePtr = 67109376;
          *(_DWORD *)unsigned int v62 = v26;
          *(_WORD *)&v62[4] = 1024;
          *(_DWORD *)&v62[6] = v31;
          id v33 = v32;
          unint64_t v34 = "Failed to read Heatmap at index %d.(rc:0x%x)\n";
LABEL_44:
          _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, v34, (uint8_t *)&valuePtr, 0xEu);
        }
LABEL_72:
        CFMutableArrayRef v27 = &off_1000A2D90[++v26];
        if (!*v27) {
          goto LABEL_75;
        }
      }
      if (v58)
      {
        uint64_t v35 = 0;
        while (!buf[v35])
        {
          if (v58 == ++v35) {
            goto LABEL_52;
          }
        }
      }
      else
      {
        LODWORD(v35) = 0;
      }
      if (v35 == v58)
      {
LABEL_52:
        v36 = qword_1000A36A0;
        if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEBUG))
        {
          int valuePtr = 67109120;
          *(_DWORD *)unsigned int v62 = v26;
          _os_log_debug_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "Avoid saving data from index %d", (uint8_t *)&valuePtr, 8u);
        }
        goto LABEL_72;
      }
      int v37 = *v27;
      value = 0;
      values = v37;
      if (CFDictionaryGetValueIfPresent(v3, v37, (const void **)&value))
      {
        value = CFArrayCreateMutableCopy(0, 25, (CFArrayRef)value);
      }
      else
      {
        value = CFArrayCreateMutable(0, 25, &kCFTypeArrayCallBacks);
        int valuePtr = 0;
        CFNumberRef v38 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        for (CFIndex i = 0; i != 25; ++i)
          CFArraySetValueAtIndex((CFMutableArrayRef)value, i, v38);
        CFRelease(v38);
      }
      for (CFIndex j = 0; j != 25; ++j)
      {
        *(_DWORD *)v55 = 0;
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)value, j);
        CFTypeID v42 = CFNumberGetTypeID();
        if (ValueAtIndex && CFGetTypeID(ValueAtIndex) == v42)
        {
          CFNumberGetValue(ValueAtIndex, kCFNumberIntType, v55);
        }
        else
        {
          v43 = qword_1000A36A0;
          if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR))
          {
            int valuePtr = 67109120;
            *(_DWORD *)unsigned int v62 = j;
            _os_log_error_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "Unexpected data type in the row at index %d\n", (uint8_t *)&valuePtr, 8u);
          }
        }
        *(_DWORD *)v55 += buf[j];
        CFNumberRef v44 = CFNumberCreate(0, kCFNumberIntType, v55);
        CFArraySetValueAtIndex((CFMutableArrayRef)value, j, v44);
        CFRelease(v44);
      }
      CFArrayRef v45 = CFArrayCreate(0, (const void **)&values, 1, &kCFTypeArrayCallBacks);
      if (v45)
      {
        CFArrayRef v46 = v45;
        CFPreferencesSetMultiple(0, v45, v54, kCFPreferencesAnyUser, kCFPreferencesCurrentHost);
        CFRelease(v46);
      }
      CFDictionarySetValue(v3, values, value);
      CFRelease(value);
      v47 = qword_1000A36A0;
      if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEBUG))
      {
        int valuePtr = 138412546;
        *(void *)unsigned int v62 = v54;
        *(_WORD *)&v62[8] = 2112;
        v63 = values;
        _os_log_debug_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "Updated values for path %@. key:%@\n", (uint8_t *)&valuePtr, 0x16u);
      }
      unsigned int v48 = v58;
      __memset_chk();
      int v49 = sub_10005E498(v29, buf, v48);
      if (!v49) {
        goto LABEL_72;
      }
      int v50 = v49;
      uint64_t v51 = qword_1000A36A0;
      if (!os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
        goto LABEL_72;
      }
      int valuePtr = 67109376;
      *(_DWORD *)unsigned int v62 = v26;
      *(_WORD *)&v62[4] = 1024;
      *(_DWORD *)&v62[6] = v50;
      id v33 = v51;
      unint64_t v34 = "Failed to clear Heatmap at index %d.(rc:0x%x\n)";
      goto LABEL_44;
    }
LABEL_75:
    CFPreferencesSetMultiple(v3, 0, v54, kCFPreferencesAnyUser, kCFPreferencesCurrentHost);
    int v52 = CFPreferencesSynchronize(v54, kCFPreferencesAnyUser, kCFPreferencesCurrentHost);
    v53 = qword_1000A36A0;
    if (v52)
    {
      if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEBUG))
      {
        sub_100065020((uint64_t)v54, v53);
        if (!v3) {
          return;
        }
LABEL_81:
        CFRelease(v3);
        return;
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR))
    {
      sub_100064FA8((uint64_t)v54, v53);
      if (!v3) {
        return;
      }
      goto LABEL_81;
    }
    if (!v3) {
      return;
    }
    goto LABEL_81;
  }
  if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
    sub_100064F74();
  }
}

void sub_1000174FC(CFDictionaryRef theDict)
{
  if (qword_1000A4718)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = sub_1000175BC;
    block[3] = &unk_100091860;
    void block[4] = CFDictionaryCreateCopy(0, theDict);
    dispatch_async((dispatch_queue_t)qword_1000A4718, block);
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEBUG))
  {
    sub_10006513C();
  }
}

void sub_1000175BC(uint64_t a1)
{
  if (dword_1000A2DF8 == 3) {
    dword_1000A2DF8 = sub_100018484(*(const __CFDictionary **)(a1 + 32));
  }
  int v2 = (const void *)sub_10002E9B8();
  CFTypeID TypeID = CFStringGetTypeID();
  if (!v2 || CFGetTypeID(v2) != TypeID)
  {
    if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
      sub_100064F74();
    }
    goto LABEL_13;
  }
  int v4 = sub_100018484(*(const __CFDictionary **)(a1 + 32));
  if (v4 != dword_1000A2DF8)
  {
    int v5 = v4;
    sub_100016CA4();
    dword_1000A2DF8 = v5;
  }
  CFArrayRef v6 = 0;
  CFDictionaryRef v7 = 0;
  CFDictionaryRef v8 = *(const __CFDictionary **)(a1 + 32);
  LODWORD(valuePtr) = -1;
  number[0] = 0;
  if (dword_1000A2DFC == -1)
  {
    CFDictionaryRef v7 = sub_100016150();
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v7, @"Cycles");
    CFTypeID v19 = CFArrayGetTypeID();
    if (Value && CFGetTypeID(Value) == v19) {
      CFArrayRef MutableCopy = CFArrayCreateMutableCopy(0, 0, Value);
    }
    else {
      CFArrayRef MutableCopy = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    }
    CFArrayRef v6 = MutableCopy;
    CFIndex Count = CFArrayGetCount(MutableCopy);
    if (Count >= 1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, Count - 1);
      CFTypeID v23 = CFDictionaryGetTypeID();
      if (ValueAtIndex)
      {
        if (CFGetTypeID(ValueAtIndex) == v23)
        {
          CFDictionaryGetValueIfPresent(ValueAtIndex, @"CycleCount", (const void **)number);
          CFNumberRef v24 = number[0];
          CFTypeID v25 = CFNumberGetTypeID();
          if (v24)
          {
            if (CFGetTypeID(v24) == v25) {
              CFNumberGetValue(number[0], kCFNumberIntType, &dword_1000A2DFC);
            }
          }
        }
      }
    }
  }
  CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(v8, @"CycleCount");
  number[0] = v9;
  CFTypeID v10 = CFNumberGetTypeID();
  if (v9 && CFGetTypeID(v9) == v10)
  {
    CFNumberGetValue(number[0], kCFNumberIntType, &valuePtr);
    int v11 = (int)valuePtr;
  }
  else
  {
    int v11 = -1;
  }
  int v12 = dword_1000A2DFC;
  if (dword_1000A2DFC != -1 && dword_1000A2DFC / 10 == v11 / 10)
  {
    CFIndex v13 = qword_1000A36A0;
    if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEBUG)) {
      sub_100065278(v11, v12, v13);
    }
    CFNumberRef v14 = 0;
    if (!v7) {
      goto LABEL_41;
    }
LABEL_40:
    CFRelease(v7);
    goto LABEL_41;
  }
  dword_1000A2DFC = v11;
  if (!v7)
  {
    if (v6) {
      CFRelease(v6);
    }
    CFDictionaryRef v7 = sub_100016150();
    CFArrayRef v15 = (const __CFArray *)CFDictionaryGetValue(v7, @"Cycles");
    CFTypeID v16 = CFArrayGetTypeID();
    if (v15 && CFGetTypeID(v15) == v16) {
      CFMutableArrayRef Mutable = CFArrayCreateMutableCopy(0, 0, v15);
    }
    else {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    }
    CFArrayRef v6 = Mutable;
  }
  CFNumberRef v14 = sub_100016758(v8);
  CFArrayAppendValue(v6, v14);
  CFDictionarySetValue(v7, @"Cycles", v6);
  sub_100016698(v7, @"com.apple.batterydata.cyclecount");
  if (v7) {
    goto LABEL_40;
  }
LABEL_41:
  if (v14) {
    CFRelease(v14);
  }
  if (v6) {
    CFRelease(v6);
  }
  CFDictionaryRef v26 = *(const __CFDictionary **)(a1 + 32);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDictionaryRef v27 = (const __CFDictionary *)CFDictionaryGetValue(v26, @"KioskMode");
  CFTypeID v28 = CFDictionaryGetTypeID();
  if (v27 && CFGetTypeID(v27) == v28)
  {
    CFNumberRef v29 = (const __CFNumber *)CFDictionaryGetValue(v27, @"KioskModeMode");
    if (v29)
    {
      unsigned int v101 = 0;
      CFNumberGetValue(v29, kCFNumberIntType, &v101);
      if (!qword_1000A4728)
      {
        CFDictionaryRef v30 = (const __CFDictionary *)_CFPreferencesCopyMultipleWithContainer();
        qword_1000A4728 = (uint64_t)CFDictionaryCreateMutableCopy(0, 0, v30);
        CFRelease(v30);
        if (!sub_100015FA4((const __CFDictionary *)qword_1000A4728, 1)
          || !sub_10001607C((const __CFDictionary *)qword_1000A4728))
        {
          int v31 = (const void *)qword_1000A4728;
          CFTypeID v32 = CFDictionaryGetTypeID();
          if (v31 && CFGetTypeID(v31) == v32) {
            CFRelease((CFTypeRef)qword_1000A4728);
          }
          CFDictionaryRef v33 = CFPreferencesCopyMultiple(0, @"com.apple.batterydata.kioskmode", kCFPreferencesAnyUser, kCFPreferencesCurrentHost);
          qword_1000A4728 = (uint64_t)CFDictionaryCreateMutableCopy(0, 0, v33);
          CFRelease(v33);
          CFIndex v34 = CFDictionaryGetCount((CFDictionaryRef)qword_1000A4728);
          if (qword_1000A4728)
          {
            if (v34)
            {
              sub_100016698((const __CFDictionary *)qword_1000A4728, @"com.apple.batterydata.kioskmode");
              uint64_t v35 = (const void **)malloc_type_malloc(8 * v34, 0xC0040B8AA526DuLL);
              if (v35)
              {
                v36 = v35;
                CFDictionaryGetKeysAndValues((CFDictionaryRef)qword_1000A4728, v35, 0);
                for (uint64_t i = 0; i != v34; ++i)
                  CFPreferencesSetValue((CFStringRef)v36[i], 0, @"com.apple.batterydata.kioskmode", kCFPreferencesAnyUser, kCFPreferencesCurrentHost);
                free(v36);
              }
            }
          }
        }
        if (sub_100015FA4((const __CFDictionary *)qword_1000A4728, 1)
          && sub_10001607C((const __CFDictionary *)qword_1000A4728))
        {
          number[0] = 0;
          if (CFDictionaryGetValueIfPresent((CFDictionaryRef)qword_1000A4728, @"KioskModeMode", (const void **)number))
          {
            CFNumberRef v38 = number[0];
            CFTypeID v39 = CFNumberGetTypeID();
            if (v38)
            {
              if (CFGetTypeID(v38) == v39) {
                CFNumberGetValue(number[0], kCFNumberIntType, &dword_1000A2E00);
              }
            }
          }
          number[0] = 0;
          if (CFDictionaryGetValueIfPresent((CFDictionaryRef)qword_1000A4728, @"lastUpdateTs", (const void **)number))
          {
            CFNumberRef v40 = number[0];
            CFTypeID v41 = CFNumberGetTypeID();
            if (v40)
            {
              if (CFGetTypeID(v40) == v41) {
                CFNumberGetValue(number[0], kCFNumberDoubleType, &qword_1000A4730);
              }
            }
          }
        }
        else
        {
          CFTypeID v42 = (__CFDictionary *)qword_1000A4728;
          v43 = (const void *)sub_10002E9B8();
          CFDictionarySetValue(v42, @"Serial", v43);
          LODWORD(number[0]) = 1;
          CFNumberRef v44 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, number);
          if (v44)
          {
            CFNumberRef v45 = v44;
            CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4728, @"Format Version", v44);
            CFRelease(v45);
          }
          CFNumberRef v46 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v101);
          if (v46)
          {
            CFNumberRef v47 = v46;
            CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4728, @"KioskModeMode", v46);
            CFRelease(v47);
          }
          LODWORD(valuePtr) = 0;
          CFNumberRef v48 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
          CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4728, @"KioskModeResidency0", v48);
          CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4728, @"KioskModeResidency1", v48);
          CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4728, @"KioskModeResidency2", v48);
          CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4728, @"KioskModeResidency3", v48);
          CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4728, @"KioskModeHighSocResidency0", v48);
          CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4728, @"KioskModeHighSocResidency1", v48);
          CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4728, @"KioskModeHighSocResidency2", v48);
          CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4728, @"KioskModeHighSocResidency3", v48);
          CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4728, @"KioskModeEntries", v48);
          CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4728, @"KioskModeExits", v48);
          CFRelease(v48);
          CFNumberRef v49 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &Current);
          if (v49)
          {
            CFNumberRef v50 = v49;
            CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4728, @"lastUpdateTs", v49);
            CFRelease(v50);
          }
        }
      }
      uint64_t v51 = qword_1000A36A0;
      if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEBUG)) {
        sub_1000651D8((int *)&v101, v51);
      }
      unsigned int v52 = v101;
      if (dword_1000A2E00 <= 1 && v101 < 2) {
        goto LABEL_140;
      }
      if (dword_1000A2E00 > 1 || v101 < 2)
      {
        if (dword_1000A2E00 >= 2 && v101 <= 1)
        {
          LODWORD(valuePtr) = 0;
          number[0] = 0;
          if (CFDictionaryGetValueIfPresent((CFDictionaryRef)qword_1000A4728, @"KioskModeExits", (const void **)number))
          {
            CFNumberRef v58 = number[0];
            CFTypeID v59 = CFNumberGetTypeID();
            if (v58)
            {
              if (CFGetTypeID(v58) == v59) {
                CFNumberGetValue(number[0], kCFNumberIntType, &valuePtr);
              }
            }
          }
          if (valuePtr != -1) {
            LODWORD(valuePtr) = valuePtr + 1;
          }
          CFNumberRef v60 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
          if (v60)
          {
            CFNumberRef v61 = v60;
            CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4728, @"KioskModeExits", v60);
            CFRelease(v61);
          }
          unsigned int v52 = v101;
        }
        double v62 = *(double *)&qword_1000A4730;
        if (*(double *)&qword_1000A4730 == 0.0 || v52 < 2) {
          goto LABEL_140;
        }
        double v63 = Current;
        unsigned int v100 = 2000;
        number[0] = 0;
        if (CFDictionaryGetValueIfPresent(v26, @"Temperature", (const void **)number))
        {
          CFNumberRef v64 = number[0];
          CFTypeID v65 = CFNumberGetTypeID();
          if (v64)
          {
            if (CFGetTypeID(v64) == v65) {
              CFNumberGetValue(number[0], kCFNumberIntType, &v100);
            }
          }
        }
        int v98 = 0;
        int v99 = 100;
        number[0] = 0;
        if (CFDictionaryGetValueIfPresent(v26, @"AppleRawMaxCapacity", (const void **)number))
        {
          CFNumberRef v66 = number[0];
          CFTypeID v67 = CFNumberGetTypeID();
          if (v66)
          {
            if (CFGetTypeID(v66) == v67) {
              CFNumberGetValue(number[0], kCFNumberIntType, &v99);
            }
          }
        }
        number[0] = 0;
        if (CFDictionaryGetValueIfPresent(v26, @"AppleRawCurrentCapacity", (const void **)number))
        {
          CFNumberRef v68 = number[0];
          CFTypeID v69 = CFNumberGetTypeID();
          if (v68)
          {
            if (CFGetTypeID(v68) == v69) {
              CFNumberGetValue(number[0], kCFNumberIntType, &v98);
            }
          }
        }
        if ((int)v100 >= 2500)
        {
          if (v100 >= 0xDAC)
          {
            if (v100 >= 0xFA0) {
              CFStringRef v70 = @"KioskModeResidency3";
            }
            else {
              CFStringRef v70 = @"KioskModeResidency2";
            }
            CFStringRef v71 = @"KioskModeHighSocResidency3";
            if (v100 < 0xFA0) {
              CFStringRef v71 = @"KioskModeHighSocResidency2";
            }
            CFStringRef key = v71;
          }
          else
          {
            CFStringRef key = @"KioskModeHighSocResidency1";
            CFStringRef v70 = @"KioskModeResidency1";
          }
        }
        else
        {
          CFStringRef key = @"KioskModeHighSocResidency0";
          CFStringRef v70 = @"KioskModeResidency0";
        }
        int v72 = 100 * v98;
        int v73 = v99;
        double v74 = v63 - v62;
        CFNumberRef valuePtr = 0;
        number[0] = 0;
        if (CFDictionaryGetValueIfPresent((CFDictionaryRef)qword_1000A4728, v70, (const void **)&valuePtr))
        {
          CFNumberRef v75 = valuePtr;
          CFTypeID v76 = CFNumberGetTypeID();
          if (v75)
          {
            if (CFGetTypeID(v75) == v76) {
              CFNumberGetValue(valuePtr, kCFNumberDoubleType, number);
            }
          }
        }
        int v77 = v72 / v73;
        *(double *)number = v74 + *(double *)number;
        CFNumberRef v78 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, number);
        if (v78)
        {
          CFNumberRef v79 = v78;
          CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4728, v70, v78);
          CFRelease(v79);
        }
        if (v77 < 95) {
          goto LABEL_140;
        }
        CFNumberRef valuePtr = 0;
        number[0] = 0;
        if (CFDictionaryGetValueIfPresent((CFDictionaryRef)qword_1000A4728, key, (const void **)&valuePtr)
          && sub_100016038(valuePtr))
        {
          CFNumberGetValue(valuePtr, kCFNumberDoubleType, number);
        }
        *(double *)number = v74 + *(double *)number;
        CFNumberRef v80 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, number);
        if (!v80) {
          goto LABEL_140;
        }
        CFNumberRef v81 = v80;
        CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4728, key, v80);
        CFNumberRef v57 = v81;
      }
      else
      {
        qword_1000A4730 = *(void *)&Current;
        LODWORD(valuePtr) = 0;
        number[0] = 0;
        if (CFDictionaryGetValueIfPresent((CFDictionaryRef)qword_1000A4728, @"KioskModeEntries", (const void **)number))
        {
          CFNumberRef v53 = number[0];
          CFTypeID v54 = CFNumberGetTypeID();
          if (v53)
          {
            if (CFGetTypeID(v53) == v54) {
              CFNumberGetValue(number[0], kCFNumberIntType, &valuePtr);
            }
          }
        }
        if (valuePtr != -1) {
          LODWORD(valuePtr) = valuePtr + 1;
        }
        CFNumberRef v55 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
        if (!v55) {
          goto LABEL_140;
        }
        CFNumberRef v56 = v55;
        CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4728, @"KioskModeEntries", v55);
        CFNumberRef v57 = v56;
      }
      CFRelease(v57);
LABEL_140:
      if (v101 != dword_1000A2E00)
      {
        CFNumberRef v82 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v101);
        if (v82)
        {
          CFNumberRef v83 = v82;
          CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4728, @"KioskModeMode", v82);
          CFRelease(v83);
        }
      }
      qword_1000A4730 = *(void *)&Current;
      CFNumberRef v84 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &qword_1000A4730);
      if (v84)
      {
        CFNumberRef v85 = v84;
        CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4728, @"lastUpdateTs", v84);
        CFRelease(v85);
      }
      sub_100016698((const __CFDictionary *)qword_1000A4728, @"com.apple.batterydata.kioskmode");
      CFDictionaryRef v86 = (const __CFDictionary *)qword_1000A4728;
      *(_OWORD *)number = 0u;
      long long v105 = 0u;
      CFNumberRef valuePtr = 0;
      if (CFDictionaryGetValueIfPresent((CFDictionaryRef)qword_1000A4728, @"KioskModeHighSocResidency0", (const void **)&valuePtr))
      {
        CFNumberRef v87 = valuePtr;
        CFTypeID v88 = CFNumberGetTypeID();
        if (v87)
        {
          if (CFGetTypeID(v87) == v88) {
            CFNumberGetValue(valuePtr, kCFNumberDoubleType, number);
          }
        }
      }
      CFNumberRef valuePtr = 0;
      if (CFDictionaryGetValueIfPresent(v86, @"KioskModeHighSocResidency1", (const void **)&valuePtr))
      {
        CFNumberRef v89 = valuePtr;
        CFTypeID v90 = CFNumberGetTypeID();
        if (v89)
        {
          if (CFGetTypeID(v89) == v90) {
            CFNumberGetValue(valuePtr, kCFNumberDoubleType, &number[1]);
          }
        }
      }
      CFNumberRef valuePtr = 0;
      if (CFDictionaryGetValueIfPresent(v86, @"KioskModeHighSocResidency2", (const void **)&valuePtr))
      {
        CFNumberRef v91 = valuePtr;
        CFTypeID v92 = CFNumberGetTypeID();
        if (v91)
        {
          if (CFGetTypeID(v91) == v92) {
            CFNumberGetValue(valuePtr, kCFNumberDoubleType, &v105);
          }
        }
      }
      CFNumberRef valuePtr = 0;
      if (CFDictionaryGetValueIfPresent(v86, @"KioskModeHighSocResidency3", (const void **)&valuePtr))
      {
        CFNumberRef v93 = valuePtr;
        CFTypeID v94 = CFNumberGetTypeID();
        if (v93)
        {
          if (CFGetTypeID(v93) == v94) {
            CFNumberGetValue(valuePtr, kCFNumberDoubleType, (char *)&v105 + 8);
          }
        }
      }
      for (uint64_t j = 0; j != 4; ++j)
      {
        double v96 = *(double *)&number[j] / 3600.0;
        if (v96 >= 65535.0) {
          double v96 = 65535.0;
        }
        *((_WORD *)&number[-1] + j) = (int)v96;
      }
      if (sub_10005E498(1128811336, &valuePtr, 8u)
        && os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR))
      {
        sub_1000651A4();
      }
      dword_1000A2E00 = v101;
      goto LABEL_13;
    }
    if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
      sub_100065170();
    }
  }
LABEL_13:
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t sub_100018484(const __CFDictionary *a1)
{
  int valuePtr = 0;
  if (CFDictionaryGetValue(a1, @"ExternalConnected") == kCFBooleanFalse)
  {
    uint64_t v5 = 2;
    if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEBUG)) {
      sub_100065300();
    }
  }
  else
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, @"AdapterDetails");
    if (Value)
    {
      CFNumberRef v3 = (const __CFNumber *)CFDictionaryGetValue(Value, @"FamilyCode");
      CFTypeID TypeID = CFNumberGetTypeID();
      if (v3 && CFGetTypeID(v3) == TypeID)
      {
        CFNumberGetValue(v3, kCFNumberIntType, &valuePtr);
        return (valuePtr + 536723453) < 2;
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
          sub_100065368();
        }
        return 0;
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
        sub_100065334();
      }
      return 2;
    }
  }
  return v5;
}

void sub_1000185C8(xpc_object_t object, void *a2)
{
  if (object && a2)
  {
    if (qword_1000A4718)
    {
      xpc_retain(object);
      xpc_retain(a2);
      if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEBUG)) {
        sub_1000653D0();
      }
      v4[0] = _NSConcreteStackBlock;
      v4[1] = 0x40000000;
      v4[2] = sub_1000187D4;
      v4[3] = &unk_100091880;
      v4[4] = a2;
      v4[5] = object;
      dispatch_async((dispatch_queue_t)qword_1000A4718, v4);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEBUG)) {
        sub_10006539C();
      }
      sub_100018710((_xpc_connection_s *)object, a2, "batteryHeatMapData", 0);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR))
  {
    sub_100065404();
  }
}

void sub_100018710(_xpc_connection_s *a1, xpc_object_t original, const char *a3, void *a4)
{
  xpc_object_t reply = xpc_dictionary_create_reply(original);
  if (reply)
  {
    CFDictionaryRef v8 = reply;
    if (a4) {
      a4 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    }
    xpc_dictionary_set_value(v8, a3, a4);
    xpc_connection_send_message(a1, v8);
    if (a4) {
      xpc_release(a4);
    }
    xpc_release(v8);
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR))
  {
    sub_10006546C();
  }
}

void sub_1000187D4(uint64_t a1)
{
  uint64_t uint64 = xpc_dictionary_get_uint64(*(xpc_object_t *)(a1 + 32), "batteryHeatMapData");
  uint64_t v3 = uint64;
  if (uint64 > 2) {
    CFDictionaryRef v4 = 0;
  }
  else {
    CFDictionaryRef v4 = sub_10001888C(uint64);
  }
  sub_100018710(*(_xpc_connection_s **)(a1 + 40), *(xpc_object_t *)(a1 + 32), "batteryHeatMapData", v4);
  uint64_t v5 = qword_1000A36A0;
  if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEBUG))
  {
    sub_1000654A0(v3, v5, v6, v7, v8, v9, v10, v11);
    if (!v4) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v4) {
LABEL_6:
  }
    CFRelease(v4);
LABEL_7:
  xpc_release(*(xpc_object_t *)(a1 + 40));
  xpc_release(*(xpc_object_t *)(a1 + 32));
}

CFDictionaryRef sub_10001888C(unsigned int a1)
{
  CFStringRef v1 = sub_100018D5C(a1);
  CFDictionaryRef result = CFPreferencesCopyMultiple(0, v1, kCFPreferencesAnyUser, kCFPreferencesCurrentHost);
  if (result)
  {
    CFDictionaryRef v3 = result;
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, result);
    CFRelease(v3);
    return MutableCopy;
  }
  return result;
}

void sub_1000188F8(xpc_object_t object, void *a2)
{
  if (object && a2)
  {
    if (qword_1000A4718)
    {
      xpc_retain(object);
      xpc_retain(a2);
      if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEBUG)) {
        sub_10006550C();
      }
      v4[0] = _NSConcreteStackBlock;
      v4[1] = 0x40000000;
      v4[2] = sub_100018A40;
      v4[3] = &unk_1000918A0;
      v4[4] = object;
      v4[5] = a2;
      dispatch_async((dispatch_queue_t)qword_1000A4718, v4);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEBUG)) {
        sub_10006539C();
      }
      sub_100018710((_xpc_connection_s *)object, a2, "batteryCycleCountData", 0);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR))
  {
    sub_100065404();
  }
}

void sub_100018A40(uint64_t a1)
{
  int v2 = (void *)_CFPreferencesCopyMultipleWithContainer();
  sub_100018710(*(_xpc_connection_s **)(a1 + 32), *(xpc_object_t *)(a1 + 40), "batteryCycleCountData", v2);
  if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEBUG))
  {
    sub_100065540();
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (v2) {
LABEL_3:
  }
    CFRelease(v2);
LABEL_4:
  xpc_release(*(xpc_object_t *)(a1 + 40));
  xpc_release(*(xpc_object_t *)(a1 + 32));
}

void sub_100018AF8(xpc_connection_t connection, void *a2)
{
  if (connection && a2)
  {
    if (qword_1000A4718)
    {
      if (sub_10005D5C0(connection, @"com.apple.private.iokit.batterydata", 0))
      {
        xpc_retain(connection);
        xpc_retain(a2);
        if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEBUG)) {
          sub_100065574();
        }
        v4[0] = _NSConcreteStackBlock;
        v4[1] = 0x40000000;
        v4[2] = sub_100018C80;
        v4[3] = &unk_1000918C0;
        v4[4] = connection;
        v4[5] = a2;
        dispatch_async((dispatch_queue_t)qword_1000A4718, v4);
        return;
      }
      if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEBUG)) {
        sub_1000655A8();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEBUG))
    {
      sub_10006539C();
    }
    sub_100018710(connection, a2, "batteryKioskModeData", 0);
    return;
  }
  if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
    sub_100065404();
  }
}

void sub_100018C80(uint64_t a1)
{
  int v2 = (void *)_CFPreferencesCopyMultipleWithContainer();
  sub_100018710(*(_xpc_connection_s **)(a1 + 32), *(xpc_object_t *)(a1 + 40), "batteryKioskModeData", v2);
  if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEBUG))
  {
    sub_1000655DC();
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (v2) {
LABEL_3:
  }
    CFRelease(v2);
LABEL_4:
  xpc_release(*(xpc_object_t *)(a1 + 40));
  xpc_release(*(xpc_object_t *)(a1 + 32));
}

uint64_t sub_100018D38()
{
  return _CFPreferencesSetValueWithContainer();
}

CFStringRef sub_100018D5C(unsigned int a1)
{
  if (a1 >= 3)
  {
    int v2 = qword_1000A36A0;
    if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
      sub_100065610(v2);
    }
  }
  CFStringRef v3 = @"com.apple.batterydata.discharging";
  if (a1 == 1) {
    CFStringRef v3 = @"com.apple.batterydata.wireless";
  }
  if (a1) {
    return v3;
  }
  else {
    return @"com.apple.batterydata.wired";
  }
}

void sub_100018DEC(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void sub_100018E0C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 8u);
}

id sub_100019228()
{
  size_t size = 0;
  if (sysctlbyname("kern.bootsessionuuid", 0, &size, 0, 0))
  {
    if (os_log_type_enabled((os_log_t)qword_1000A34F8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_6;
    }
    goto LABEL_7;
  }
  CFDictionaryRef v0 = malloc_type_malloc(size, 0x3E7695DFuLL);
  if (sysctlbyname("kern.bootsessionuuid", v0, &size, 0, 0))
  {
    if (os_log_type_enabled((os_log_t)qword_1000A34F8, OS_LOG_TYPE_ERROR)) {
LABEL_6:
    }
      sub_100065708();
LABEL_7:
    CFStringRef v1 = 0;
    goto LABEL_8;
  }
  CFStringRef v1 = +[NSString stringWithUTF8String:v0];
  free(v0);
  CFStringRef v3 = qword_1000A34F8;
  if (os_log_type_enabled((os_log_t)qword_1000A34F8, OS_LOG_TYPE_DEBUG)) {
    sub_100065690((uint64_t)v1, v3);
  }
LABEL_8:

  return v1;
}

void sub_10001935C(char a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000193D4;
  block[3] = &unk_1000918E0;
  char v2 = a1;
  dispatch_async((dispatch_queue_t)qword_1000A4738, block);
}

void sub_1000193D4(uint64_t a1)
{
  char v2 = qword_1000A34F8;
  if (os_log_type_enabled((os_log_t)qword_1000A34F8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 32);
    v4[0] = 67109120;
    v4[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "chargeControl charge to full requested:%d\n", (uint8_t *)v4, 8u);
  }
  byte_1000A4740 = *(unsigned char *)(a1 + 32);
  sub_100019490(0, 0);
}

void sub_100019490(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4738);
  if (![(id)qword_1000A4748 count] || !objc_msgSend((id)qword_1000A4748, "count")) {
    goto LABEL_15;
  }
  unsigned __int8 v5 = 0;
  unsigned __int8 v6 = 0;
  unint64_t v7 = 0;
  unint64_t v8 = 100;
  do
  {
    uint64_t v9 = [(id)qword_1000A4748 objectAtIndex:v7];
    if ((unint64_t)[v9 socLimit] > 0x63) {
      goto LABEL_12;
    }
    id v10 = [v9 socLimit];
    if (v8 >= (unint64_t)v10) {
      unint64_t v8 = (unint64_t)v10;
    }
    if (v5)
    {
      unsigned __int8 v5 = 1;
      if ((v6 & 1) == 0) {
        goto LABEL_9;
      }
    }
    else
    {
      unsigned __int8 v5 = [v9 drain];
      if ((v6 & 1) == 0)
      {
LABEL_9:
        unsigned __int8 v6 = [v9 noChargeToFull];
        goto LABEL_12;
      }
    }
    unsigned __int8 v6 = 1;
LABEL_12:

    ++v7;
  }
  while (v7 < (unint64_t)[(id)qword_1000A4748 count]);
  if (v8 >= 0x64)
  {
LABEL_15:
    uint64_t v11 = 0;
    goto LABEL_16;
  }
  uint64_t v11 = [[ChargeCtrlPolicy alloc] initWithSocLimit:v8 andDrain:v5 & 1 andNoChargeToFull:v6 & 1 andOwner:0];
LABEL_16:
  int v12 = qword_1000A4738;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10001A008;
  block[3] = &unk_100091250;
  CFTypeID v17 = v11;
  id v18 = v3;
  id v19 = v4;
  id v13 = v4;
  id v14 = v3;
  CFArrayRef v15 = v11;
  dispatch_barrier_async(v12, block);
}

void sub_100019664(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  unsigned __int8 v5 = v4;
  if (v3)
  {
    if (v4)
    {
      unsigned __int8 v6 = qword_1000A4738;
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_100019778;
      v7[3] = &unk_100091278;
      id v8 = v3;
      id v9 = v5;
      dispatch_async(v6, v7);
    }
    else if (os_log_type_enabled((os_log_t)qword_1000A34F8, OS_LOG_TYPE_ERROR))
    {
      sub_1000657A4();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A34F8, OS_LOG_TYPE_ERROR))
  {
    sub_100065770();
  }
}

void sub_100019778(uint64_t a1)
{
  CFStringRef v1 = *(void **)(a1 + 40);
  char v2 = (_xpc_connection_s *)*(id *)(a1 + 32);
  id v3 = v1;
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4738);
  if (qword_1000A4778 != -1) {
    dispatch_once(&qword_1000A4778, &stru_1000919C8);
  }
  xpc_object_t reply = xpc_dictionary_create_reply(v3);
  if (reply)
  {
    int v5 = -536870206;
    if (sub_10005D5C0(v2, @"com.apple.private.iokit.soc-limit", 0))
    {
      if (byte_1000A4770)
      {
        if (byte_1000A4750 == 1)
        {
          uint64_t v6 = xpc_dictionary_get_dictionary(v3, "chargeSocLimit");
          if (v6)
          {
            unint64_t v7 = (void *)v6;
            uint64_t v8 = _CFXPCCreateCFObjectFromXPCObject();
            if (v8)
            {
              id v9 = (id)v8;
              pid_t pid = xpc_connection_get_pid(v2);
              uint64_t v11 = [v9 objectForKeyedSubscript:@"chargeSocLimitAction"];
              unsigned int v12 = [v11 unsignedIntValue];

              id v13 = qword_1000A34F8;
              if (os_log_type_enabled((os_log_t)qword_1000A34F8, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(v18) = 67109378;
                HIDWORD(v18) = pid;
                LOWORD(v19) = 2112;
                *(void *)((char *)&v19 + 2) = v9;
                _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "received SOC limit from %d: %@\n", (uint8_t *)&v18, 0x12u);
              }
              switch(v12)
              {
                case 1u:
                  id v14 = qword_1000A4738;
                  id v18 = _NSConcreteStackBlock;
                  *(void *)&long long v19 = 3221225472;
                  *((void *)&v19 + 1) = sub_10001A63C;
                  uint64_t v20 = &unk_1000919A8;
                  LODWORD(v23) = pid;
                  uint64_t v21 = v2;
                  uint64_t v22 = reply;
                  dispatch_barrier_async(v14, &v18);
                  break;
                case 2u:
                  CFArrayRef v15 = qword_1000A4738;
                  id v18 = _NSConcreteStackBlock;
                  *(void *)&long long v19 = 3221225472;
                  CFTypeID v16 = sub_10001A760;
                  goto LABEL_29;
                case 3u:
                  CFArrayRef v15 = qword_1000A4738;
                  id v18 = _NSConcreteStackBlock;
                  *(void *)&long long v19 = 3221225472;
                  CFTypeID v16 = sub_10001A8F8;
LABEL_29:
                  *((void *)&v19 + 1) = v16;
                  uint64_t v20 = &unk_1000919F0;
                  pid_t v24 = pid;
                  uint64_t v21 = (_xpc_connection_s *)v9;
                  uint64_t v22 = v2;
                  id v23 = reply;
                  id v9 = v9;
                  dispatch_async(v15, &v18);

                  break;
                case 4u:
                  CFTypeID v17 = qword_1000A4738;
                  id v18 = _NSConcreteStackBlock;
                  *(void *)&long long v19 = 3221225472;
                  *((void *)&v19 + 1) = sub_10001AB28;
                  uint64_t v20 = &unk_100091278;
                  uint64_t v21 = v2;
                  uint64_t v22 = reply;
                  dispatch_async(v17, &v18);
                  break;
                default:
                  goto LABEL_24;
              }

              goto LABEL_25;
            }
            if (os_log_type_enabled((os_log_t)qword_1000A34F8, OS_LOG_TYPE_ERROR)) {
              sub_100065840();
            }
          }
          else
          {
            if (os_log_type_enabled((os_log_t)qword_1000A34F8, OS_LOG_TYPE_ERROR)) {
              sub_10006580C();
            }
            unint64_t v7 = 0;
          }
          id v9 = 0;
        }
        else
        {
          unint64_t v7 = 0;
          id v9 = 0;
          int v5 = -536870187;
        }
      }
      else
      {
        unint64_t v7 = 0;
        id v9 = 0;
        int v5 = -536870201;
      }
    }
    else
    {
      unint64_t v7 = 0;
      id v9 = 0;
      int v5 = -536870207;
    }
LABEL_24:
    sub_10001A398(v2, reply, v5);
LABEL_25:

    goto LABEL_26;
  }
  if (os_log_type_enabled((os_log_t)qword_1000A34F8, OS_LOG_TYPE_ERROR)) {
    sub_1000657D8();
  }
LABEL_26:
}

void sub_100019BE0()
{
  os_log_t v0 = os_log_create("com.apple.powerd", "charging");
  CFStringRef v1 = (void *)qword_1000A34F8;
  qword_1000A34F8 = (uint64_t)v0;

  dispatch_queue_t v2 = dispatch_queue_create("com.apple.private.powerd.chargeCtrlQ", 0);
  id v3 = (void *)qword_1000A4738;
  qword_1000A4738 = (uint64_t)v2;

  id v4 = qword_1000A4738;

  dispatch_async(v4, &stru_100091900);
}

void sub_100019C5C(id a1)
{
  notify_register_dispatch("com.apple.system.powersources.source", &dword_1000A4744, (dispatch_queue_t)qword_1000A4738, &stru_100091940);
  CFDictionaryRef v1 = CFPreferencesCopyMultiple(0, @"com.apple.powerd.charging", kCFPreferencesAnyUser, kCFPreferencesCurrentHost);
  if (v1)
  {
    dispatch_queue_t v2 = sub_100019228();
    id v3 = [(__CFDictionary *)v1 objectForKeyedSubscript:@"bootSessionUUID"];
    id v4 = [v2 caseInsensitiveCompare:v3];

    if (!v4)
    {
      int v5 = qword_1000A34F8;
      if (os_log_type_enabled((os_log_t)qword_1000A34F8, OS_LOG_TYPE_DEBUG)) {
        sub_100065874((uint64_t)v1, v5);
      }
      uint64_t v6 = [(__CFDictionary *)v1 objectForKeyedSubscript:@"policies"];
      uint64_t v7 = +[NSKeyedUnarchiver unarchiveObjectWithData:v6];
      uint64_t v8 = (void *)qword_1000A4748;
      qword_1000A4748 = v7;

      sub_100019490(0, 0);
      if ([(id)qword_1000A4748 count])
      {
        unint64_t v9 = 0;
        do
        {
          id v10 = [(id)qword_1000A4748 objectAtIndex:v9];
          if (([v10 terminated] & 1) == 0) {
            sub_100019F04((int)[v10 owner]);
          }

          ++v9;
        }
        while (v9 < (unint64_t)[(id)qword_1000A4748 count]);
      }
    }
  }
  byte_1000A4750 = 1;
}

void sub_100019DEC(id a1, int a2)
{
  if (IOPSDrawingUnlimitedPower())
  {
    dispatch_queue_t v2 = qword_1000A4738;
    dispatch_barrier_async(v2, &stru_100091960);
  }
}

void sub_100019E30(id a1)
{
  dispatch_assert_queue_barrier((dispatch_queue_t)qword_1000A4738);
  CFDictionaryRef v1 = (char *)[(id)qword_1000A4748 count];
  if (v1)
  {
    dispatch_queue_t v2 = v1;
    char v3 = 0;
LABEL_3:
    --v2;
    do
    {
      id v4 = [(id)qword_1000A4748 objectAtIndex:v2];
      if ([v4 terminated])
      {
        [(id)qword_1000A4748 removeObject:v4];

        char v3 = 1;
        if (v2) {
          goto LABEL_3;
        }
        goto LABEL_10;
      }

      --v2;
    }
    while (v2 != (char *)-1);
    if ((v3 & 1) == 0) {
      return;
    }
LABEL_10:
    int v5 = qword_1000A4738;
    dispatch_async(v5, &stru_100091A60);
  }
}

void sub_100019F04(int a1)
{
  dispatch_queue_t v2 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_proc, a1, 0x80000000uLL, (dispatch_queue_t)qword_1000A4738);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_10001B280;
  handler[3] = &unk_100091A80;
  int v7 = a1;
  dispatch_source_set_cancel_handler(v2, handler);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_10001B40C;
  v4[3] = &unk_1000911E8;
  int v5 = v2;
  char v3 = v2;
  dispatch_source_set_event_handler(v3, v4);
  dispatch_activate(v3);
}

void sub_10001A008(uint64_t a1)
{
  CFDictionaryRef v1 = *(void **)(a1 + 40);
  dispatch_queue_t v2 = *(void **)(a1 + 48);
  id v3 = *(id *)(a1 + 32);
  id v4 = v1;
  id v5 = v2;
  dispatch_assert_queue_barrier((dispatch_queue_t)qword_1000A4738);
  uint64_t v6 = (void *)qword_1000A4758;
  qword_1000A4758 = (uint64_t)v3;
  id v7 = v3;

  uint64_t v8 = qword_1000A4738;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10001A104;
  v11[3] = &unk_100091278;
  id v12 = v4;
  id v13 = v5;
  id v9 = v4;
  id v10 = v5;
  dispatch_async(v8, v11);
}

void sub_10001A104(uint64_t a1)
{
  CFDictionaryRef v1 = *(void **)(a1 + 40);
  id v2 = *(id *)(a1 + 32);
  id v3 = v1;
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4738);
  __int16 v17 = 0;
  id v4 = (void *)qword_1000A4758;
  if (!byte_1000A4740)
  {
    if (qword_1000A4758) {
      goto LABEL_7;
    }
    unsigned int v7 = 0;
LABEL_14:
    uint64_t v15 = qword_1000A34F8;
    if (!os_log_type_enabled((os_log_t)qword_1000A34F8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_17;
    }
    *(_WORD *)buf = 0;
    uint64_t v8 = "SOC limit disabled\n";
    id v9 = v15;
    uint32_t v10 = 2;
    goto LABEL_16;
  }
  unsigned int v5 = [(id)qword_1000A4758 noChargeToFull];
  id v4 = (void *)qword_1000A4758;
  if (!qword_1000A4758)
  {
    unsigned int v7 = v5 ^ 1;
    goto LABEL_14;
  }
  if ((v5 & 1) == 0)
  {
    uint64_t v6 = qword_1000A34F8;
    unsigned int v7 = 1;
    if (!os_log_type_enabled((os_log_t)qword_1000A34F8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_17;
    }
    *(_DWORD *)buf = 67109120;
    LODWORD(v19) = 1;
    uint64_t v8 = "SOC limit policy suspend due to mitigation active:%d\n";
    id v9 = v6;
    uint32_t v10 = 8;
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v8, buf, v10);
    goto LABEL_17;
  }
LABEL_7:
  unsigned __int8 v11 = [v4 socLimit];
  unsigned __int8 v12 = [(id)qword_1000A4758 drain];
  LOBYTE(v17) = v11;
  if ([(id)qword_1000A4758 noChargeToFull]) {
    char v13 = 2;
  }
  else {
    char v13 = 0;
  }
  HIBYTE(v17) = v13 | v12;
  id v14 = qword_1000A34F8;
  unsigned int v7 = 0;
  if (os_log_type_enabled((os_log_t)qword_1000A34F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v19 = qword_1000A4758;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "SOC limit policy:%@\n", buf, 0xCu);
    unsigned int v7 = 0;
  }
LABEL_17:
  if (byte_1000A4760 != v7)
  {
    byte_1000A4760 = v7;
    if (qword_1000A4768 != -1) {
      dispatch_once(&qword_1000A4768, &stru_100091980);
    }
    notify_set_state(dword_1000A2E68, v7);
    notify_post("com.apple.system.powersources.gaugingmitigation");
  }
  int v16 = sub_10005E498(1128811603, &v17, 2u);
  if (v16 && os_log_type_enabled((os_log_t)qword_1000A34F8, OS_LOG_TYPE_ERROR)) {
    sub_1000658EC();
  }
  sub_10001A398(v2, v3, v16);
}

void sub_10001A398(void *a1, void *a2, int a3)
{
  id v5 = a1;
  id v6 = a2;
  if (qword_1000A4748)
  {
    unsigned int v7 = +[NSKeyedArchiver archivedDataWithRootObject:](NSKeyedArchiver, "archivedDataWithRootObject:");
    v15[0] = @"bootSessionUUID";
    uint64_t v8 = sub_100019228();
    v15[1] = @"policies";
    v16[0] = v8;
    v16[1] = v7;
    CFDictionaryRef v9 = +[NSDictionary dictionaryWithObjects:v16 forKeys:v15 count:2];

    CFPreferencesSetMultiple(v9, 0, @"com.apple.powerd.charging", kCFPreferencesAnyUser, kCFPreferencesCurrentHost);
  }
  if (v5 && v6)
  {
    uint32_t v10 = qword_1000A4738;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10001A59C;
    v11[3] = &unk_1000919A8;
    id v12 = v6;
    int v14 = a3;
    id v13 = v5;
    dispatch_barrier_async(v10, v11);
  }
}

void sub_10001A53C(id a1)
{
  if (notify_register_check("com.apple.system.powersources.gaugingmitigation", &dword_1000A2E68))
  {
    if (os_log_type_enabled((os_log_t)qword_1000A34F8, OS_LOG_TYPE_ERROR)) {
      sub_100065954();
    }
  }
}

void sub_10001A59C(uint64_t a1)
{
  xpc_dictionary_set_uint64(*(xpc_object_t *)(a1 + 32), "returnCode", *(int *)(a1 + 48));
  id v3 = *(void **)(a1 + 32);
  id v2 = *(_xpc_connection_s **)(a1 + 40);

  xpc_connection_send_message(v2, v3);
}

void sub_10001A5E4(id a1)
{
  __int16 v1 = 0;
  byte_1000A4770 = sub_10005EBEC(1128811603, &v1) != -536870160;
}

void sub_10001A63C(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 48);
  id v2 = *(void **)(a1 + 32);
  id v3 = qword_1000A4738;
  id v4 = *(id *)(a1 + 40);
  id v5 = v2;
  dispatch_assert_queue_barrier(v3);
  if (!qword_1000A4748)
  {
    id v6 = [objc_alloc((Class)NSMutableArray) initWithCapacity:1];
    unsigned int v7 = (void *)qword_1000A4748;
    qword_1000A4748 = (uint64_t)v6;
  }
  uint32_t v10 = [[ChargeCtrlPolicy alloc] initWithSocLimit:101 andDrain:0 andNoChargeToFull:0 andOwner:v1];
  [(id)qword_1000A4748 addObject:v10];
  sub_100019F04(v1);
  uint64_t v8 = [(ChargeCtrlPolicy *)v10 token];
  id v9 = [v8 UUIDString];
  xpc_dictionary_set_string(v4, "chargeSocLimitToken", (const char *)[v9 UTF8String]);

  sub_10001A398(v5, v4, 0);
}

void sub_10001A760(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 56);
  id v2 = *(void **)(a1 + 32);
  id v3 = *(void **)(a1 + 48);
  id v4 = *(id *)(a1 + 40);
  id v5 = v3;
  id v6 = qword_1000A4738;
  id v7 = v2;
  dispatch_assert_queue_V2(v6);
  id v8 = objc_alloc((Class)NSUUID);
  id v9 = [v7 objectForKeyedSubscript:@"chargeSocLimitToken"];

  id v10 = [v8 initWithUUIDString:v9];
  if (v10)
  {
    id v11 = [(id)qword_1000A4748 count];
    id v12 = qword_1000A4738;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10001ACF4;
    block[3] = &unk_100091A18;
    id v17 = v11;
    id v14 = v10;
    int v18 = v1;
    id v15 = v4;
    id v16 = v5;
    dispatch_barrier_async(v12, block);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1000A34F8, OS_LOG_TYPE_ERROR)) {
      sub_1000659BC();
    }
    sub_10001A398(v4, v5, -536870206);
  }
}

void sub_10001A8F8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 56);
  id v2 = *(void **)(a1 + 40);
  id v3 = *(void **)(a1 + 48);
  id v4 = *(id *)(a1 + 32);
  id v5 = v2;
  id v6 = v3;
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4738);
  id v7 = objc_alloc((Class)NSUUID);
  id v8 = [v4 objectForKeyedSubscript:@"chargeSocLimitToken"];
  id v9 = [v7 initWithUUIDString:v8];

  if (v9)
  {
    id v10 = [v4 objectForKeyedSubscript:@"chargeSocLimitSoc"];
    unsigned int v11 = [v10 unsignedIntValue];

    id v12 = [v4 objectForKeyedSubscript:@"chargeSocLimitDrain"];
    LOBYTE(v10) = [v12 BOOLValue];

    id v13 = [v4 objectForKeyedSubscript:@"chargeSocLimitNoChargeToFull"];
    unsigned __int8 v14 = [v13 BOOLValue];

    id v15 = [v4 objectForKeyedSubscript:@"chargeSocLimitReason"];
    id v16 = qword_1000A4738;
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_10001AE60;
    v18[3] = &unk_100091A40;
    id v19 = v9;
    int v23 = v1;
    id v20 = v5;
    unsigned int v24 = v11;
    char v25 = (char)v10;
    unsigned __int8 v26 = v14;
    id v21 = v6;
    id v22 = v15;
    id v17 = v15;
    dispatch_barrier_async(v16, v18);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1000A34F8, OS_LOG_TYPE_ERROR)) {
      sub_1000659BC();
    }
    sub_10001A398(v5, v6, -536870206);
  }
}

void sub_10001AB28(uint64_t a1)
{
  int v1 = *(void **)(a1 + 40);
  id v2 = *(id *)(a1 + 32);
  id v3 = v1;
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4738);
  id v4 = objc_alloc((Class)NSMutableArray);
  id v5 = objc_msgSend(v4, "initWithCapacity:", (char *)objc_msgSend((id)qword_1000A4748, "count") + 1);
  if ([(id)qword_1000A4748 count])
  {
    unint64_t v6 = 0;
    do
    {
      id v7 = [(id)qword_1000A4748 objectAtIndex:v6];
      id v8 = sub_10001B03C(v7);
      [v5 addObject:v8];

      ++v6;
    }
    while (v6 < (unint64_t)[(id)qword_1000A4748 count]);
  }
  if (qword_1000A4758)
  {
    id v9 = sub_10001B03C((void *)qword_1000A4758);
    [v5 addObject:v9];
  }
  id v10 = qword_1000A34F8;
  if (os_log_type_enabled((os_log_t)qword_1000A34F8, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 138412290;
    id v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "sending current policies:%@\n", (uint8_t *)&v12, 0xCu);
  }
  if ([v5 count])
  {
    unsigned int v11 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    xpc_dictionary_set_value(v3, "chargeSocLimit", v11);
  }
  sub_10001A398(v2, v3, 0);
}

void sub_10001ACF4(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    goto LABEL_12;
  }
  unint64_t v2 = 0;
  do
  {
    id v3 = [(id)qword_1000A4748 objectAtIndex:v2];
    id v4 = [v3 token];
    id v5 = [v4 compare:*(void *)(a1 + 32)];

    unint64_t v6 = *(void *)(a1 + 56);
    if (!v5) {
      break;
    }
    ++v2;
  }
  while (v2 < v6);
  if (v6 != v2)
  {
    [(id)qword_1000A4748 removeObjectAtIndex:v2];
    id v7 = qword_1000A4738;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    _DWORD v8[2] = sub_10001AE54;
    v8[3] = &unk_100091278;
    id v9 = *(id *)(a1 + 40);
    id v10 = *(id *)(a1 + 48);
    dispatch_async(v7, v8);
  }
  else
  {
LABEL_12:
    if (os_log_type_enabled((os_log_t)qword_1000A34F8, OS_LOG_TYPE_ERROR)) {
      sub_100065A24();
    }
    sub_10001A398(*(void **)(a1 + 40), *(void **)(a1 + 48), -536870206);
  }
}

void sub_10001AE54(uint64_t a1)
{
}

void sub_10001AE60(uint64_t a1)
{
  if ([(id)qword_1000A4748 count])
  {
    uint64_t v2 = 0;
    while (1)
    {
      id v3 = [(id)qword_1000A4748 objectAtIndex:v2];
      id v4 = [v3 token];
      id v5 = [v4 compare:*(void *)(a1 + 32)];

      if (!v5) {
        break;
      }

      if (++v2 >= (unint64_t)[(id)qword_1000A4748 count]) {
        goto LABEL_12;
      }
    }
    if (v3)
    {
      [v3 setSocLimit:*(unsigned int *)(a1 + 68)];
      [v3 setDrain:*(unsigned __int8 *)(a1 + 72)];
      [v3 setNoChargeToFull:*(unsigned __int8 *)(a1 + 73)];
      [v3 setReason:*(void *)(a1 + 56)];
      id v6 = [v3 owner];
      id v7 = (id)*(int *)(a1 + 64);
      if (v6 == v7)
      {
        if (![v3 terminated])
        {
LABEL_11:
          id v8 = qword_1000A4738;
          v9[0] = _NSConcreteStackBlock;
          v9[1] = 3221225472;
          v9[2] = sub_10001B030;
          v9[3] = &unk_100091278;
          id v10 = *(id *)(a1 + 40);
          id v11 = *(id *)(a1 + 48);
          dispatch_async(v8, v9);

          return;
        }
        id v7 = (id)*(int *)(a1 + 64);
      }
      [v3 setOwner:v7];
      [v3 setTerminated:0];
      sub_100019F04(*(_DWORD *)(a1 + 64));
      goto LABEL_11;
    }
  }
LABEL_12:
  if (os_log_type_enabled((os_log_t)qword_1000A34F8, OS_LOG_TYPE_ERROR)) {
    sub_100065A24();
  }
  sub_10001A398(*(void **)(a1 + 40), *(void **)(a1 + 48), -536870206);
}

void sub_10001B030(uint64_t a1)
{
}

id sub_10001B03C(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    id v2 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:6];
    id v3 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v1 owner]);
    [v2 setObject:v3 forKeyedSubscript:@"Owner"];

    id v4 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v1 socLimit]);
    [v2 setObject:v4 forKeyedSubscript:@"chargeSocLimitSoc"];

    id v5 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v1 drain]);
    [v2 setObject:v5 forKeyedSubscript:@"chargeSocLimitDrain"];

    id v6 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v1 noChargeToFull]);
    [v2 setObject:v6 forKeyedSubscript:@"chargeSocLimitNoChargeToFull"];

    id v7 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v1 terminated]);
    [v2 setObject:v7 forKeyedSubscript:@"Terminated"];

    id v8 = [v1 reason];
    [v2 setObject:v8 forKeyedSubscript:@"chargeSocLimitReason"];

    id v9 = qword_1000A34F8;
    if (os_log_type_enabled((os_log_t)qword_1000A34F8, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 138412546;
      id v12 = v1;
      __int16 v13 = 2112;
      id v14 = v2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "converted policy:%@ to dict:%@\n", (uint8_t *)&v11, 0x16u);
    }
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

void sub_10001B274(id a1)
{
}

void sub_10001B280(uint64_t a1)
{
  id v2 = qword_1000A34F8;
  if (os_log_type_enabled((os_log_t)qword_1000A34F8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)buf = 67109120;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Mark %u as terminated\n", buf, 8u);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10001B380;
  block[3] = &unk_100091A80;
  int v5 = *(_DWORD *)(a1 + 32);
  dispatch_barrier_async((dispatch_queue_t)qword_1000A4738, block);
}

id sub_10001B380(uint64_t a1)
{
  id v1 = (id)*(int *)(a1 + 32);
  dispatch_assert_queue_barrier((dispatch_queue_t)qword_1000A4738);
  id result = [(id)qword_1000A4748 count];
  if (result)
  {
    for (unint64_t i = 0; i < (unint64_t)result; ++i)
    {
      id v4 = [(id)qword_1000A4748 objectAtIndex:i];
      if ([v4 owner] == v1) {
        [v4 setTerminated:1];
      }

      id result = [(id)qword_1000A4748 count];
    }
  }
  return result;
}

void sub_10001B40C(uint64_t a1)
{
}

BOOL sub_10001B438(mach_port_t *a1)
{
  *(void *)special_port = 0;
  if (!a1)
  {
    if (!task_get_special_port(mach_task_self_, 4, special_port))
    {
      mach_port_t v2 = special_port[0];
      return bootstrap_look_up(v2, "com.apple.IOUPSPlugInServer", &special_port[1]) == 0;
    }
    return 0;
  }
  mach_port_t v2 = *a1;
  if (!v2)
  {
    if (!task_get_special_port(mach_task_self_, 4, special_port))
    {
      mach_port_t v2 = special_port[0];
      *a1 = special_port[0];
      return bootstrap_look_up(v2, "com.apple.IOUPSPlugInServer", &special_port[1]) == 0;
    }
    return 0;
  }
  special_port[0] = v2;
  return bootstrap_look_up(v2, "com.apple.IOUPSPlugInServer", &special_port[1]) == 0;
}

uint64_t sub_10001B4E0(mach_port_t a1, int a2, CFTypeRef object)
{
  uint64_t result = 3758097090;
  if (a1 && object)
  {
    CFDataRef v6 = IOCFSerialize(object, 0);
    if (v6)
    {
      CFDataRef v7 = v6;
      BytePtr = CFDataGetBytePtr(v6);
      int Length = CFDataGetLength(v7);
      uint64_t v10 = sub_100060D64(a1, a2, (uint64_t)BytePtr, Length);
      CFRelease(v7);
      return v10;
    }
    else
    {
      return 3758097084;
    }
  }
  return result;
}

uint64_t sub_10001B574(mach_port_t a1, int a2, CFTypeRef *a3)
{
  buffer = 0;
  uint64_t v3 = 3758097090;
  if (a1)
  {
    if (a3)
    {
      vm_size_t v6 = 0;
      uint64_t v3 = sub_100060EDC(a1, a2, &buffer, &v6);
      if (!v3)
      {
        *a3 = IOCFUnserialize(buffer, kCFAllocatorDefault, 0, 0);
        vm_deallocate(mach_task_self_, (vm_address_t)buffer, v6);
        return 0;
      }
    }
  }
  return v3;
}

uint64_t sub_10001B604(mach_port_t a1, int a2, CFTypeRef *a3)
{
  buffer = 0;
  uint64_t v3 = 3758097090;
  if (a1)
  {
    if (a3)
    {
      vm_size_t v6 = 0;
      uint64_t v3 = sub_1000610B8(a1, a2, &buffer, &v6);
      if (!v3)
      {
        *a3 = IOCFUnserialize(buffer, kCFAllocatorDefault, 0, 0);
        vm_deallocate(mach_task_self_, (vm_address_t)buffer, v6);
        return 0;
      }
    }
  }
  return v3;
}

void sub_10001B810(id a1)
{
  qword_1000A4780 = objc_alloc_init(PMCoreSmartPowerNapPredictor);

  _objc_release_x1();
}

id sub_10001BC38(uint64_t a1)
{
  return [*(id *)(a1 + 32) restoreState];
}

void sub_10001BC40(uint64_t a1)
{
  mach_port_t v2 = qword_1000A36C8;
  if (os_log_type_enabled((os_log_t)qword_1000A36C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CoreSmartPowerNap: Received first unlock notification. Initializing predictor", buf, 2u);
  }
  dispatch_time_t v3 = dispatch_time(0xFFFFFFFFFFFFFFFELL, 2000000000);
  id v4 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10001BD44;
  block[3] = &unk_1000911E8;
  id v6 = *(id *)(a1 + 32);
  dispatch_after(v3, v4, block);
}

id sub_10001BD44(uint64_t a1)
{
  return [*(id *)(a1 + 32) initializePredictor];
}

id sub_10001BD4C(uint64_t a1)
{
  return [*(id *)(a1 + 32) initializeTrialClient];
}

id sub_10001BE20()
{
  uint64_t v4 = 0;
  int v5 = &v4;
  uint64_t v6 = 0x2050000000;
  os_log_t v0 = (void *)qword_1000A47A0;
  uint64_t v7 = qword_1000A47A0;
  if (!qword_1000A47A0)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100020B44;
    v3[3] = &unk_100091458;
    v3[4] = &v4;
    sub_100020B44((uint64_t)v3);
    os_log_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_10001BEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10001C280(uint64_t a1)
{
  return [*(id *)(a1 + 32) handlePredictedEndTimer];
}

id sub_10001C288(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setEnd_session_timer:", 0);
}

id sub_10001C294(uint64_t a1)
{
  id result = objc_msgSend(*(id *)(a1 + 32), "in_coresmartpowernap");
  if (result)
  {
    dispatch_time_t v3 = *(void **)(a1 + 32);
    return [v3 enterCoreSmartPowerNap];
  }
  return result;
}

void sub_10001CB60(uint64_t a1)
{
  if ((objc_msgSend(*(id *)(a1 + 32), "in_coresmartpowernap") & 1) == 0)
  {
    id v2 = objc_msgSend(*(id *)(a1 + 32), "user_inactive");
    dispatch_time_t v3 = qword_1000A36C8;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_1000A36C8, OS_LOG_TYPE_DEFAULT);
    if (v2 == (id)1)
    {
      if (v4)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CoreSmartPowerNap: evaluating model", buf, 2u);
      }
      [*(id *)(a1 + 32) queryModelAndEngage];
      objc_msgSend(*(id *)(a1 + 32), "setRequery_delta:", 450);
    }
    else if (v4)
    {
      *(_WORD *)int v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CoreSmartPowerNap: conditions don't match to evaluate model", v5, 2u);
    }
  }
}

id sub_10001CC38(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setEvaluation_timer:", 0);
}

void sub_10001CE9C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)qword_1000A36C8, OS_LOG_TYPE_ERROR)) {
      sub_100065C54();
    }
    goto LABEL_20;
  }
  objc_msgSend(*(id *)(a1 + 32), "setPredictor_output:", v5);
  uint64_t v7 = objc_msgSend(*(id *)(a1 + 32), "predictor_output");

  if (!v7) {
    goto LABEL_20;
  }
  id v8 = (void *)qword_1000A36C8;
  if (os_log_type_enabled((os_log_t)qword_1000A36C8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = *(void **)(a1 + 32);
    uint64_t v10 = v8;
    int v11 = objc_msgSend(v9, "predictor_output");
    id v12 = [v11 confidenceLevel];
    __int16 v13 = objc_msgSend(*(id *)(a1 + 32), "predictor_output");
    [v13 confidenceValue];
    id v15 = v14;
    id v16 = objc_msgSend(*(id *)(a1 + 32), "predictor_output");
    [v16 predictedDuration];
    uint64_t v18 = v17;
    id v19 = objc_msgSend(*(id *)(a1 + 32), "predictor_output");
    *(_DWORD *)buf = 134218752;
    id v46 = v12;
    __int16 v47 = 2048;
    CFNumberRef v48 = v15;
    __int16 v49 = 2048;
    uint64_t v50 = v18;
    __int16 v51 = 1024;
    unsigned int v52 = [v19 outputReason];
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CoreSmartPowerNap: predictor_output confidencelevel: %ld, confidenceValue: %f, predictedDuration: %f, reason: %d", buf, 0x26u);
  }
  id v20 = objc_msgSend(*(id *)(a1 + 32), "predictor_output");
  [v20 predictedDuration];
  double v22 = v21;

  int v23 = objc_msgSend(*(id *)(a1 + 32), "predictor_output");
  if ([v23 confidenceLevel] != (id)2 || (uint64_t v24 = (uint64_t)(v22 * 60.0 * 60.0), v24 < 7201))
  {

    goto LABEL_17;
  }
  int v25 = *(unsigned __int8 *)(a1 + 40);

  if (!v25)
  {
LABEL_17:
    objc_msgSend(*(id *)(a1 + 32), "scheduleModelRequeryWithOutputReason:", objc_msgSend(v5, "outputReason"));
    goto LABEL_20;
  }
  unsigned __int8 v26 = objc_msgSend(*(id *)(a1 + 32), "full_session_start_time");
  double v27 = (double)v24;
  CFTypeID v28 = [v26 dateByAddingTimeInterval:(double)v24];
  objc_msgSend(*(id *)(a1 + 32), "setPredicted_end_time:", v28);

  if ((objc_msgSend(*(id *)(a1 + 32), "in_coresmartpowernap") & 1) == 0)
  {
    CFNumberRef v29 = +[NSDate date];
    objc_msgSend(*(id *)(a1 + 32), "setFull_session_start_time:", v29);

    [*(id *)(a1 + 32) enterCoreSmartPowerNap];
  }
  CFDictionaryRef v30 = (void *)qword_1000A36C8;
  if (os_log_type_enabled((os_log_t)qword_1000A36C8, OS_LOG_TYPE_DEFAULT))
  {
    int v31 = v30;
    CFTypeID v32 = +[NSNumber numberWithLong:v24];
    CFDictionaryRef v33 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v5 outputReason]);
    *(_DWORD *)buf = 138412546;
    id v46 = v32;
    __int16 v47 = 2112;
    CFNumberRef v48 = v33;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "CoreSmartPowerNap: Setting timer for duration %@, output reason: %@", buf, 0x16u);
  }
  CFIndex v34 = objc_msgSend(*(id *)(a1 + 32), "end_session_timer");

  uint64_t v35 = *(void **)(a1 + 32);
  if (v34)
  {
    v36 = objc_msgSend(v35, "end_session_timer");
    dispatch_suspend(v36);
  }
  else
  {
    int v37 = [v35 queue];
    dispatch_source_t v38 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v37);
    objc_msgSend(*(id *)(a1 + 32), "setEnd_session_timer:", v38);

    CFTypeID v39 = objc_msgSend(*(id *)(a1 + 32), "end_session_timer");
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10001D398;
    handler[3] = &unk_1000911E8;
    void handler[4] = *(void *)(a1 + 32);
    dispatch_source_set_event_handler(v39, handler);

    v36 = objc_msgSend(*(id *)(a1 + 32), "end_session_timer");
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472;
    v43[2] = sub_10001D3A0;
    v43[3] = &unk_1000911E8;
    v43[4] = *(void *)(a1 + 32);
    dispatch_source_set_cancel_handler(v36, v43);
  }

  CFNumberRef v40 = objc_msgSend(*(id *)(a1 + 32), "end_session_timer");
  dispatch_time_t v41 = dispatch_walltime(0, 1000000000 * v24);
  dispatch_source_set_timer(v40, v41, 0xFFFFFFFFFFFFFFFFLL, 0);

  CFTypeID v42 = objc_msgSend(*(id *)(a1 + 32), "end_session_timer");
  dispatch_resume(v42);

  [*(id *)(a1 + 32) updateNextFireTime:v27];
LABEL_20:
}

id sub_10001D398(uint64_t a1)
{
  return [*(id *)(a1 + 32) handlePredictedEndTimer];
}

id sub_10001D3A0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setEnd_session_timer:", 0);
}

id sub_10001D62C(uint64_t a1)
{
  id result = objc_msgSend(*(id *)(a1 + 32), "in_coresmartpowernap");
  if (result)
  {
    id result = objc_msgSend(*(id *)(a1 + 32), "motion_alarm_set");
    if ((result & 1) == 0)
    {
      dispatch_time_t v3 = qword_1000A36C8;
      if (os_log_type_enabled((os_log_t)qword_1000A36C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)BOOL v4 = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Registering motion alarm", v4, 2u);
      }
      return [*(id *)(a1 + 32) registerMotionAlarm];
    }
  }
  return result;
}

id sub_10001DD78(uint64_t a1)
{
  id result = objc_msgSend(*(id *)(a1 + 32), "user_inactive");
  if (result)
  {
    dispatch_time_t v3 = *(void **)(a1 + 32);
    return [v3 queryModelAndEngage];
  }
  return result;
}

id sub_10001DDC4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setRequery_timer:", 0);
}

void sub_10001E27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_10001E2A4()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  os_log_t v0 = (void *)qword_1000A47B0;
  uint64_t v7 = qword_1000A47B0;
  if (!qword_1000A47B0)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100020CFC;
    v3[3] = &unk_100091458;
    v3[4] = &v4;
    sub_100020CFC((uint64_t)v3);
    os_log_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_10001E370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10001E388()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  os_log_t v0 = (void *)qword_1000A47C0;
  uint64_t v7 = qword_1000A47C0;
  if (!qword_1000A47C0)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100020EC4;
    v3[3] = &unk_100091458;
    v3[4] = &v4;
    sub_100020EC4((uint64_t)v3);
    os_log_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_10001E454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001E46C(id a1, BPSCompletion *a2)
{
  if ([(BPSCompletion *)a2 state])
  {
    if (os_log_type_enabled((os_log_t)qword_1000A36C8, OS_LOG_TYPE_ERROR)) {
      sub_10006382C();
    }
  }
}

void sub_10001E4BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_copyWeak(&to, (id *)(a1 + 40));
  id v4 = objc_loadWeakRetained(&to);

  if (v4)
  {
    id v5 = qword_1000A36C8;
    if (os_log_type_enabled((os_log_t)qword_1000A36C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "MobileTimer alarm fired!", buf, 2u);
    }
    id v6 = objc_loadWeakRetained(&to);
    unsigned int v7 = objc_msgSend(v6, "in_coresmartpowernap");

    if (v7)
    {
      [*(id *)(a1 + 32) exitCoreSmartPowerNapWithReason:@"MobileTimerFired"];
    }
    else
    {
      id v8 = qword_1000A36C8;
      if (os_log_type_enabled((os_log_t)qword_1000A36C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "core smart power nap not engaging when alarm fired", v9, 2u);
      }
    }
  }
  objc_destroyWeak(&to);
}

void sub_10001E5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id location)
{
}

id sub_10001EED0(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_10001F0F4(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1000201CC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1000201E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_copyWeak(&to, (id *)(a1 + 32));
  id v4 = objc_loadWeakRetained(&to);

  if (v4)
  {
    id v5 = objc_loadWeakRetained(&to);
    [v5 updateTrialFactors];
  }
  objc_destroyWeak(&to);
}

void sub_100020258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

void sub_100020944(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v4)
  {
    xpc_object_t reply = xpc_dictionary_create_reply(v4);
    if (reply)
    {
      if (sub_10005D5C0(v3, @"com.apple.powerd.coresmartpowernap.tester", 1))
      {
        uint64_t v7 = -536870201;
        id v8 = reply;
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_1000A36C8, OS_LOG_TYPE_ERROR)) {
          sub_100066294();
        }
        id v8 = reply;
        uint64_t v7 = -536870207;
      }
      xpc_dictionary_set_uint64(v8, "returnCode", v7);
      xpc_connection_send_message(v3, reply);
    }
    else if (os_log_type_enabled((os_log_t)qword_1000A36C8, OS_LOG_TYPE_ERROR))
    {
      sub_1000657D8();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A36C8, OS_LOG_TYPE_ERROR))
  {
    sub_1000657A4();
  }
}

void sub_100020A6C(id a1)
{
  if (!dlopen_preflight("/System/Library/PrivateFrameworks/OSIntelligence.framework/OSIntelligence"))
  {
    if (os_log_type_enabled((os_log_t)qword_1000A36C8, OS_LOG_TYPE_ERROR)) {
      sub_100066330();
    }
    byte_1000A4794 = 1;
  }
  if (!dlopen_preflight("/System/Library/PrivateFrameworks/BiomeStreams.framework/BiomeStreams"))
  {
    if (os_log_type_enabled((os_log_t)qword_1000A36C8, OS_LOG_TYPE_ERROR)) {
      sub_1000662FC();
    }
    byte_1000A4794 = 1;
  }
  if (!dlopen_preflight("/System/Library/PrivateFrameworks/BiomeLibrary.framework/BiomeLibrary"))
  {
    if (os_log_type_enabled((os_log_t)qword_1000A36C8, OS_LOG_TYPE_ERROR)) {
      sub_1000662C8();
    }
    byte_1000A4794 = 1;
  }
}

Class sub_100020B44(uint64_t a1)
{
  v4[0] = 0;
  if (!qword_1000A47A8)
  {
    v4[1] = _NSConcreteStackBlock;
    _DWORD v4[2] = 3221225472;
    v4[3] = sub_100020C88;
    void v4[4] = &unk_100091490;
    v4[5] = v4;
    long long v5 = off_100091B00;
    uint64_t v6 = 0;
    qword_1000A47A8 = _sl_dlopen();
    uint64_t v2 = (void *)v4[0];
    if (!qword_1000A47A8)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("_OSInactivityPredictionClient");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    uint64_t v2 = (void *)sub_100063C6C();
LABEL_8:
    free(v2);
  }
  qword_1000A47A0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_100020C88()
{
  uint64_t result = _sl_dlopen();
  qword_1000A47A8 = result;
  return result;
}

void sub_100020CFC(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("BMStreams");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1000A47B0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_100063C94();
    sub_100020D54();
  }
}

void sub_100020D54()
{
  v1[0] = 0;
  if (!qword_1000A47B8)
  {
    v1[1] = _NSConcreteStackBlock;
    v1[2] = 3221225472;
    v1[3] = sub_100020E50;
    v1[4] = &unk_100091490;
    v1[5] = v1;
    long long v2 = off_100091B18;
    uint64_t v3 = 0;
    qword_1000A47B8 = _sl_dlopen();
  }
  os_log_t v0 = (void *)v1[0];
  if (!qword_1000A47B8)
  {
    os_log_t v0 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v1[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t sub_100020E50()
{
  uint64_t result = _sl_dlopen();
  qword_1000A47B8 = result;
  return result;
}

void sub_100020EC4(uint64_t a1)
{
  sub_100020D54();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("BMBiomeScheduler");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1000A47C0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    long long v2 = (void *)sub_100063CBC();
    sub_100020F1C(v2, v3, v4, v5, v6);
  }
}

void sub_100020F1C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

id sub_100021064(uint64_t a1)
{
  v5[0] = @"state";
  v5[1] = @"batteryLevel";
  uint64_t v1 = *(void *)(a1 + 40);
  v6[0] = *(void *)(a1 + 32);
  v6[1] = v1;
  long long v2 = *(_OWORD *)(a1 + 48);
  v5[2] = @"source";
  v5[3] = @"pluggedIn";
  long long v7 = v2;
  v5[4] = @"durationInMinutes";
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v3 = +[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:5];

  return v3;
}

id sub_1000211C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  CFStringRef v4 = @"wasEnabledToday";
  uint64_t v5 = v1;
  long long v2 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];

  return v2;
}

const char *sub_100021248()
{
  return "OK";
}

const char *sub_100021254(unsigned int a1)
{
  if (a1 > 0x32) {
    return "";
  }
  else {
    return (&off_100091B58)[(char)a1];
  }
}

double sub_10002127C(uint64_t a1)
{
  return (double)a1 / 1000.0 + (double)HIDWORD(a1) - kCFAbsoluteTimeIntervalSince1970;
}

uint64_t sub_1000212AC()
{
  uint64_t result = dword_1000A47C8;
  if (!dword_1000A47C8)
  {
    uint64_t result = IORegistryEntryFromPath(kIOMainPortDefault, "IOPower:/IOPowerConnection/IOPMrootDomain");
    dword_1000A47C8 = result;
  }
  return result;
}

uint64_t sub_1000212F0()
{
  uint64_t result = dword_1000A47CC;
  if (!dword_1000A47CC)
  {
    CFDictionaryRef v1 = IOServiceMatching("IOPMPowerSource");
    uint64_t result = IOServiceGetMatchingService(kIOMainPortDefault, v1);
    dword_1000A47CC = result;
  }
  return result;
}

uint64_t sub_100021340()
{
  uint64_t result = dword_1000A47D0;
  if (!dword_1000A47D0)
  {
    CFDictionaryRef v1 = IOServiceMatching("AppleSmartBattery");
    uint64_t result = IOServiceGetMatchingService(kIOMainPortDefault, v1);
    dword_1000A47D0 = result;
  }
  return result;
}

CFCalendarRef sub_100021390()
{
  CFCalendarRef result = (CFCalendarRef)qword_1000A47D8;
  if (!qword_1000A47D8)
  {
    CFCalendarRef result = CFCalendarCreateWithIdentifier(0, kCFGregorianCalendar);
    qword_1000A47D8 = (uint64_t)result;
  }
  return result;
}

__asl_object_s *sub_1000213CC(const char *a1)
{
  if (!a1) {
    return 0;
  }
  asl_object_t v2 = asl_new(2u);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  size_t last = 0;
  CFStringRef v4 = asl_new(1u);
  uint64_t v5 = v4;
  if (v4)
  {
    asl_set_query(v4, "Facility", "com.apple.iokit.power", 1u);
    asl_append(v3, v5);
    asl_release(v5);
    uint64_t v6 = asl_open_path(a1, 0);
    long long v7 = v6;
    if (v6) {
      uint64_t v5 = asl_match(v6, v3, &last, 0, 0, 0, 1);
    }
    else {
      uint64_t v5 = 0;
    }
    asl_release(v7);
  }
  asl_release(v3);
  return v5;
}

uint64_t sub_1000214B0(double a1)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v7 = 0;
  int times = mach_get_times();
  if (times)
  {
    int v3 = times;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100066364(v3);
    }
    return 0;
  }
  else
  {
    double v5 = (double)v7 - kCFAbsoluteTimeIntervalSince1970 + (double)v8 / 1000000000.0 - a1;
    mach_timebase_info v6 = 0;
    mach_timebase_info(&v6);
    return v9 - (unint64_t)(v5 * 1000000000.0 * (double)(v6.denom / v6.numer));
  }
}

unint64_t sub_100021584(uint64_t a1, uint64_t a2)
{
  mach_timebase_info info = 0;
  mach_timebase_info(&info);
  return (a2 - a1) * (unint64_t)info.numer / info.denom;
}

const char *sub_1000215CC(int a1)
{
  uint64_t v2 = 0;
  CFCalendarRef result = "";
  while (LODWORD((&off_1000A2E78)[v2 + 1]) != a1)
  {
    v2 += 2;
    if (v2 == 16) {
      return result;
    }
  }
  return (&off_1000A2E78)[v2];
}

const char *sub_10002160C(__int16 a1)
{
  CFDictionaryRef v1 = "CPU";
  if ((a1 & 1) == 0) {
    CFDictionaryRef v1 = "";
  }
  if ((a1 & 4) != 0) {
    CFDictionaryRef v1 = "USB";
  }
  if ((a1 & 8) != 0) {
    CFDictionaryRef v1 = "BT-HID";
  }
  if ((a1 & 0x10) != 0) {
    CFDictionaryRef v1 = "MEDIA";
  }
  if ((a1 & 0x20) != 0) {
    CFDictionaryRef v1 = "THNDR";
  }
  if ((a1 & 0x40) != 0) {
    CFDictionaryRef v1 = "DSPLY";
  }
  if ((a1 & 0x80) != 0) {
    CFDictionaryRef v1 = "STORAGE";
  }
  if ((a1 & 0x100) != 0) {
    CFDictionaryRef v1 = "MAGICWAKE";
  }
  if ((a1 & 0x200) != 0) {
    return "NETWORK";
  }
  else {
    return v1;
  }
}

void sub_1000216A8()
{
  io_iterator_t notification = 0;
  qword_1000A47E0 = (uint64_t)os_log_create("com.apple.powerd", "batteryAuth");
  qword_1000A3500 = (uint64_t)dispatch_queue_create("Battery Auth", 0);
  if (!qword_1000A3500) {
    sub_1000663E4();
  }
  IONotificationPortRef v0 = IONotificationPortCreate(kIOMainPortDefault);
  if (!v0) {
    sub_100066410();
  }
  CFDictionaryRef v1 = v0;
  char v2 = MGGetBoolAnswer();
  int v3 = qword_1000A47E0;
  BOOL v4 = os_log_type_enabled((os_log_t)qword_1000A47E0, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)int v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "supported", v11, 2u);
    }
    CFMutableDictionaryRef v5 = IOServiceMatching("IOPMPowerSource");
    mach_timebase_info v6 = IOServiceMatching("AppleAuthCPRelay");
    CFDictionaryRef v7 = v6;
    if (v5 && v6)
    {
      CFDictionarySetValue(v6, @"IOParentMatch", v5);
      if (IOServiceAddMatchingNotification(v1, "IOServicePublish", v7, (IOServiceMatchingCallback)sub_1000218A8, v1, &notification))
      {
        uint64_t v8 = qword_1000A47E0;
        if (os_log_type_enabled((os_log_t)qword_1000A47E0, OS_LOG_TYPE_ERROR)) {
          sub_10006643C(v8);
        }
      }
      else
      {
        sub_1000218A8(0, notification);
        IONotificationPortSetDispatchQueue(v1, (dispatch_queue_t)qword_1000A3500);
      }
      CFMutableDictionaryRef v10 = v5;
LABEL_21:
      CFRelease(v10);
      return;
    }
    uint64_t v9 = qword_1000A47E0;
    if (os_log_type_enabled((os_log_t)qword_1000A47E0, OS_LOG_TYPE_ERROR))
    {
      sub_100066480(v9);
      if (!v5) {
        goto LABEL_17;
      }
    }
    else if (!v5)
    {
LABEL_17:
      if (!v7) {
        return;
      }
      CFMutableDictionaryRef v10 = v7;
      goto LABEL_21;
    }
    CFRelease(v5);
    goto LABEL_17;
  }
  if (v4)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "not supported", buf, 2u);
  }
  dword_1000A2EF8 = 2;
}

uint64_t sub_1000218A8(int a1, io_iterator_t iterator)
{
  uint64_t result = IOIteratorNext(iterator);
  if (result)
  {
    io_registry_entry_t v4 = result;
    do
    {
      CFBooleanRef CFProperty = (const __CFBoolean *)IORegistryEntryCreateCFProperty(v4, @"isTrustedForUI", kCFAllocatorDefault, 0);
      if (CFProperty)
      {
        CFBooleanRef v6 = CFProperty;
        CFTypeID TypeID = CFBooleanGetTypeID();
        CFTypeID v8 = CFGetTypeID(v6);
        uint64_t v9 = qword_1000A47E0;
        if (v8 == TypeID)
        {
          if (os_log_type_enabled((os_log_t)qword_1000A47E0, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109120;
            BOOL v13 = v6 == kCFBooleanTrue;
            _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "isTrustedForUI: %d", buf, 8u);
          }
          dword_1000A2EF8 = v6 != kCFBooleanFalse;
          CFRelease(v6);
          IOObjectRelease(v4);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)qword_1000A47E0, OS_LOG_TYPE_ERROR)) {
            sub_1000664C4(&v10, v11, v9);
          }
          CFRelease(v6);
        }
      }
      uint64_t result = IOIteratorNext(iterator);
      io_registry_entry_t v4 = result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_100021A64()
{
  uint64_t v3 = 0;
  io_registry_entry_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  int v6 = -1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100021B14;
  block[3] = &unk_100091458;
  void block[4] = &v3;
  dispatch_sync((dispatch_queue_t)qword_1000A3500, block);
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t sub_100021B14(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = dword_1000A2EF8;
  return result;
}

id sub_100021B2C()
{
  id v0 = objc_alloc_init((Class)NSDateFormatter);
  [v0 setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
  objc_msgSend(v0, "setTimeZone:", +[NSTimeZone timeZoneWithAbbreviation:](NSTimeZone, "timeZoneWithAbbreviation:", @"GMT"));
  id v1 = [v0 stringFromDate:sub_100021BA0()];

  return v1;
}

NSDate *sub_100021BA0()
{
  id v0 = +[NSDate now];
  if (qword_1000A47F8) {
    BOOL v1 = off_1000A4800 == 0;
  }
  else {
    BOOL v1 = 1;
  }
  if (!v1)
  {
    [(id)qword_1000A47E8 doubleForKey:@"ReferenceRTCTicks"];
    double v3 = v2;
    id v4 = [(id)qword_1000A47E8 objectForKey:@"ReferenceWalltime"];
    [(id)qword_1000A47E8 doubleForKey:@"RTCTicksDelta"];
    double v6 = v5;
    objc_opt_class();
    if (objc_opt_isKindOfClass() & 1) != 0 && (objc_opt_respondsToSelector())
    {
      sub_1000255B8();
      double v8 = v7;
      double v9 = v7 - v3;
      double v10 = v6 + v9;
      if (v6 + v9 >= 0.0)
      {
        id v0 = (NSDate *)[v4 dateByAddingTimeInterval:v6 + v9];
        int v11 = (void *)qword_1000A47E8;
        objc_sync_enter((id)qword_1000A47E8);
        [(id)qword_1000A47E8 setDouble:@"LastKnownRTCTicks" forKey:v8];
        if (([(id)qword_1000A47E8 BOOLForKey:@"NeedSystemTimeUpdate"] & 1) == 0)
        {
          int v23 = +[NSDate now];
          [(id)qword_1000A47E8 setObject:v23 forKey:@"LastKnownWalltime"];
        }
      }
      else
      {
        int v11 = (void *)qword_1000A47E8;
        objc_sync_enter((id)qword_1000A47E8);
        unsigned int v12 = [(id)qword_1000A47E8 BOOLForKey:@"NeedSystemTimeUpdate"];
        BOOL v13 = qword_1000A3508;
        BOOL v14 = os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR);
        if (v12)
        {
          if (v14) {
            sub_100066504(v13, v15, v16, v17, v18, v19, v20, v21);
          }
        }
        else
        {
          if (v14)
          {
            int v25 = 134218752;
            double v26 = v8;
            __int16 v27 = 2048;
            double v28 = v3;
            __int16 v29 = 2048;
            double v30 = v10;
            __int16 v31 = 2048;
            double v32 = v6;
            _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Unhandled RTC reset detected. Resetting timeline and falling back to system wall time.                                 Current ticks %lf saved ticks %lf total delta %lf saved delta %lf", (uint8_t *)&v25, 0x2Au);
          }
          [(id)qword_1000A47E8 setDouble:@"ReferenceRTCTicks" forKey:v8];
          [(id)qword_1000A47E8 setDouble:@"LastKnownRTCTicks" forKey:v8];
          [(id)qword_1000A47E8 setObject:v0 forKey:@"ReferenceWalltime"];
          [(id)qword_1000A47E8 setObject:v0 forKey:@"LastKnownWalltime"];
          [(id)qword_1000A47E8 setDouble:@"RTCTicksDelta" forKey:0.0];
        }
      }
      objc_sync_exit(v11);
    }
    else
    {
      double v22 = (objc_class *)objc_opt_class();
      NSStringFromClass(v22);
      if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
        sub_10006657C();
      }
    }
  }
  return v0;
}

void sub_100021E6C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

_xpc_connection_s *sub_100021E90(const char *a1, NSObject *a2)
{
  mach_service = xpc_connection_create_mach_service(a1, a2, 0);
  id v4 = mach_service;
  if (mach_service)
  {
    xpc_connection_set_target_queue(mach_service, a2);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_100021F34;
    handler[3] = &unk_100091CF8;
    void handler[4] = v4;
    xpc_connection_set_event_handler(v4, handler);
    xpc_connection_activate(v4);
  }
  return v4;
}

void sub_100021F34(int a1, xpc_object_t object)
{
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_error)
  {
    double v3 = xpc_copy_description(object);
    if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
      sub_10006664C();
    }
    free(v3);
    id v4 = (void *)xpc_connection_copy_invalidation_reason();
    if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
      sub_1000665E4();
    }
    free(v4);
  }
}

NSNull *sub_100023DD4(uint64_t a1, unsigned int a2)
{
  if (a2 == 3) {
    id v2 = [(id)qword_1000A4820 objectForKeyedSubscript:a1];
  }
  else {
    id v2 = objc_msgSend(objc_msgSend((id)qword_1000A4818, "objectForKeyedSubscript:", a1), "objectAtIndexedSubscript:", a2);
  }
  double v3 = v2;
  id v4 = [v2 objectAtIndex:0];
  if (objc_msgSend(v4, "isEqual:", +[NSNull null](NSNull, "null")))
  {
    return +[NSNull null];
  }
  else
  {
    uint64_t result = (NSNull *)[(id)qword_1000A47E8 objectForKey:v4];
    if (!result)
    {
      return (NSNull *)[v3 objectAtIndex:1];
    }
  }
  return result;
}

void sub_100023EB8(id a1)
{
  uint64_t v3 = 0;
  BOOL v1 = +[NSFileManager defaultManager];
  if ([(NSFileManager *)v1 fileExistsAtPath:@"/var/MobileSoftwareUpdate/Hardware/Battery/BDC"]&& ![(NSFileManager *)v1 removeItemAtPath:@"/var/MobileSoftwareUpdate/Hardware/Battery/BDC" error:&v3])
  {
    id v2 = qword_1000A3508;
    if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
      sub_1000668BC(&v3, v2);
    }
  }
}

void sub_100023F40(id a1, int a2)
{
  notify_cancel(a2);
  NSURLResourceKey v22 = NSURLFileProtectionKey;
  id v2 = [+[NSFileManager defaultManager](NSFileManager, "defaultManager") enumeratorAtURL:+[NSURL fileURLWithPath:isDirectory:](NSURL, "fileURLWithPath:isDirectory:", sub_100023DD4(@"BDC_Data_Storage_Path", 3u), 1) includingPropertiesForKeys:+[NSArray arrayWithObjects:&v22 count:1] options:5 errorHandler:0];
  if (!v2 && os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
    sub_10006694C();
  }
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = [(NSDirectoryEnumerator *)v2 countByEnumeratingWithState:&v13 objects:v21 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v14;
    do
    {
      double v6 = 0;
      do
      {
        if (*(void *)v14 != v5) {
          objc_enumerationMutation(v2);
        }
        double v7 = *(void **)(*((void *)&v13 + 1) + 8 * (void)v6);
        int v11 = NSFileProtectionNone;
        uint64_t v12 = 0;
        [v7 getResourceValue:&v11 forKey:NSURLFileProtectionKey error:0];
        if (NSURLFileProtectionCompleteUntilFirstUserAuthentication != v11
          && ([v7 setResourceValue:NSURLFileProtectionCompleteUntilFirstUserAuthentication forKey:NSURLFileProtectionKey error:&v12] & 1) == 0)
        {
          double v9 = qword_1000A3508;
          if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR))
          {
            id v10 = [v7 path];
            *(_DWORD *)buf = 138412546;
            id v18 = v10;
            __int16 v19 = 2112;
            uint64_t v20 = v12;
            _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to encrypt file %@ error %@", buf, 0x16u);
          }
        }
        double v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [(NSDirectoryEnumerator *)v2 countByEnumeratingWithState:&v13 objects:v21 count:16];
    }
    while (v4);
  }
}

void sub_1000241AC(uint64_t a1)
{
  id v2 = +[NSFileManager defaultManager];
  if (!v2)
  {
    if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
      sub_100066980();
    }
    return;
  }
  id v3 = v2;
  id v4 = sub_100023DD4(@"BDC_Data_Storage_Path", 3u);
  NSURLResourceKey v71 = NSURLFileSizeKey;
  uint64_t v5 = [(NSFileManager *)v3 enumeratorAtURL:+[NSURL fileURLWithPath:isDirectory:](NSURL, "fileURLWithPath:isDirectory:", v4, 1) includingPropertiesForKeys:+[NSArray arrayWithObjects:&v71 count:1] options:5 errorHandler:0];
  if (!v5)
  {
    if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
      sub_1000669B4();
    }
    goto LABEL_52;
  }
  double v6 = v5;
  CFTypeID v42 = v4;
  unsigned int v7 = [(NSNull *)sub_100023DD4(@"TotalDataSizeUpperBound", 3u) unsignedIntValue];
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  id v8 = [(NSDirectoryEnumerator *)v6 countByEnumeratingWithState:&v59 objects:v70 count:16];
  if (!v8)
  {
    int v16 = 0;
    float v11 = 0.0;
    goto LABEL_27;
  }
  id v9 = v8;
  uint64_t v10 = *(void *)v60;
  float v11 = 0.0;
  uint64_t v43 = a1;
  while (2)
  {
    for (unint64_t i = 0; i != v9; unint64_t i = (char *)i + 1)
    {
      if (*(void *)v60 != v10) {
        objc_enumerationMutation(v6);
      }
      long long v13 = *(void **)(*((void *)&v59 + 1) + 8 * i);
      id v57 = 0;
      uint64_t v58 = 0;
      if ([v13 getResourceValue:&v57 forKey:NSURLFileSizeKey error:&v58]) {
        BOOL v15 = v58 == 0;
      }
      else {
        BOOL v15 = 0;
      }
      if (!v15)
      {
        [v13 path];
        if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
          sub_100066AEC();
        }
LABEL_26:
        int v16 = 1;
        a1 = v43;
        goto LABEL_27;
      }
      float v11 = v11 + (float)((float)[v57 unsignedIntValue] * 0.00097656);
      if (v11 >= (float)v7)
      {
        id v18 = qword_1000A3508;
        if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218240;
          double v67 = v11;
          __int16 v68 = 1024;
          unsigned int v69 = v7;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Cumulative file size %f kB >= high water mark %u kB", buf, 0x12u);
        }
        goto LABEL_26;
      }
    }
    id v9 = [(NSDirectoryEnumerator *)v6 countByEnumeratingWithState:&v59 objects:v70 count:16];
    int v16 = 0;
    a1 = v43;
    if (v9) {
      continue;
    }
    break;
  }
LABEL_27:
  __int16 v19 = qword_1000A3508;
  if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    double v67 = v11;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Cumulative data file size %f kB", buf, 0xCu);
  }
  if (!v16)
  {
LABEL_52:
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    uint64_t v35 = *(void **)(*(void *)(a1 + 32) + 8);
    id v36 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v45, v63, 16, v42);
    if (v36)
    {
      id v37 = v36;
      uint64_t v38 = *(void *)v46;
      do
      {
        for (uint64_t j = 0; j != v37; uint64_t j = (char *)j + 1)
        {
          if (*(void *)v46 != v38) {
            objc_enumerationMutation(v35);
          }
          CFNumberRef v40 = *(void **)(*((void *)&v45 + 1) + 8 * (void)j);
          if (([v40 neverPrune] & 1) == 0)
          {
            dispatch_time_t v41 = [v40 collectionQueue];
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_100024860;
            block[3] = &unk_100091DA0;
            void block[4] = v40;
            void block[5] = v3;
            dispatch_async(v41, block);
          }
        }
        id v37 = [v35 countByEnumeratingWithState:&v45 objects:v63 count:16];
      }
      while (v37);
    }
    return;
  }
  uint64_t v58 = 0;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  uint64_t v20 = *(void **)(*(void *)(a1 + 32) + 8);
  id v21 = [v20 countByEnumeratingWithState:&v53 objects:v65 count:16];
  if (v21)
  {
    id v22 = v21;
    uint64_t v23 = *(void *)v54;
    do
    {
      for (k = 0; k != v22; k = (char *)k + 1)
      {
        if (*(void *)v54 != v23) {
          objc_enumerationMutation(v20);
        }
        objc_msgSend(*(id *)(*((void *)&v53 + 1) + 8 * (void)k), "stop", v42);
      }
      id v22 = [v20 countByEnumeratingWithState:&v53 objects:v65 count:16];
    }
    while (v22);
  }
  double v25 = *(double *)&v42;
  unsigned __int8 v26 = [(NSFileManager *)v3 removeItemAtURL:+[NSURL fileURLWithPath:isDirectory:](NSURL, "fileURLWithPath:isDirectory:", v42, 1, v42) error:&v58];
  __int16 v27 = qword_1000A3508;
  if (v58 || (v26 & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
      sub_100066A84();
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      double v67 = v25;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Removed dir %@", buf, 0xCu);
    }
    unsigned int v28 = [(NSFileManager *)v3 createDirectoryAtPath:*(void *)&v25 withIntermediateDirectories:1 attributes:0 error:&v58];
    __int16 v29 = qword_1000A3508;
    if (v28 && !v58)
    {
      if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        double v67 = v25;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "BDC data path recreated %@", buf, 0xCu);
      }
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      double v30 = *(void **)(*(void *)(a1 + 32) + 8);
      id v31 = [v30 countByEnumeratingWithState:&v49 objects:v64 count:16];
      if (v31)
      {
        id v32 = v31;
        uint64_t v33 = *(void *)v50;
        do
        {
          for (m = 0; m != v32; m = (char *)m + 1)
          {
            if (*(void *)v50 != v33) {
              objc_enumerationMutation(v30);
            }
            [*(id *)(*((void *)&v49 + 1) + 8 * (void)m) start];
          }
          id v32 = [v30 countByEnumeratingWithState:&v49 objects:v64 count:16];
        }
        while (v32);
      }
      goto LABEL_52;
    }
    if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
      sub_100066A1C();
    }
  }
  if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
    sub_1000669E8();
  }
}

void sub_100024860(uint64_t a1)
{
  double v42 = 0.0;
  id v2 = +[NSURL fileURLWithPath:isDirectory:](NSURL, "fileURLWithPath:isDirectory:", [*(id *)(a1 + 32) dirPath], 1);
  id v3 = *(void **)(a1 + 40);
  NSURLResourceKey v52 = NSURLCreationDateKey;
  id v4 = objc_msgSend(v3, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:", v2, +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v52, 1), 5, &stru_100091D78);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v36 = a1;
    double v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@%@", [*(id *)(a1 + 32) dataGroupName], @"_");
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    id v7 = [v5 countByEnumeratingWithState:&v38 objects:v51 count:16];
    if (!v7) {
      goto LABEL_37;
    }
    id v8 = v7;
    uint64_t v9 = *(void *)v39;
    while (1)
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v39 != v9) {
          objc_enumerationMutation(v5);
        }
        float v11 = *(void **)(*((void *)&v38 + 1) + 8 * (void)v10);
        if (objc_msgSend(objc_msgSend(v11, "lastPathComponent"), "containsString:", v6))
        {
          long long v13 = v5;
          id v14 = [v11 path];
          id v37 = 0;
          unsigned int v15 = [v11 getResourceValue:&v37 forKey:NSURLCreationDateKey error:&v42];
          if (v37) {
            unsigned int v16 = v15;
          }
          else {
            unsigned int v16 = 0;
          }
          if ((v16 & 1) == 0)
          {
            char v17 = v15;
            uint64_t v18 = qword_1000A3508;
            BOOL v19 = os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR);
            if (v17)
            {
              if (v19)
              {
                *(_DWORD *)buf = 138412290;
                id v44 = v14;
                uint64_t v20 = v18;
                id v21 = "Creation time not available for file %@";
                uint32_t v22 = 12;
                goto LABEL_32;
              }
            }
            else if (v19)
            {
              *(_DWORD *)buf = 138412546;
              id v44 = v14;
              __int16 v45 = 2112;
              double v46 = v42;
              uint64_t v20 = v18;
              id v21 = "getResourceValue call for file %@ failed. Error %@";
              uint32_t v22 = 22;
LABEL_32:
              _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, v21, buf, v22);
            }
            id v37 = +[NSDate distantPast];
          }
          uint64_t v23 = +[NSDate now];
          [(NSDate *)v23 timeIntervalSinceDate:v37];
          double v25 = v24;
          unsigned int v26 = objc_msgSend(objc_msgSend(*(id *)(v36 + 32), "collationPeriod"), "unsignedIntValue");
          double v27 = (double)(objc_msgSend(objc_msgSend(*(id *)(v36 + 32), "retentionPeriod"), "unsignedIntValue")+ v26);
          unsigned int v28 = qword_1000A3508;
          if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v29 = objc_msgSend(objc_msgSend(*(id *)(v36 + 32), "retentionPeriod"), "unsignedIntValue");
            *(_DWORD *)buf = 138413058;
            id v44 = v14;
            __int16 v45 = 2048;
            double v46 = v25;
            __int16 v47 = 1024;
            unsigned int v48 = v29;
            __int16 v49 = 2048;
            double v50 = v27;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "File %@. Seconds elapsed %lf. Retention period %u s adjusted %lf s", buf, 0x26u);
          }
          if (v25 < v27) {
            char v30 = v16;
          }
          else {
            char v30 = 0;
          }
          if ((v30 & 1) == 0)
          {
            id v31 = qword_1000A3508;
            if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412546;
              id v44 = v14;
              __int16 v45 = 1024;
              LODWORD(v46) = v16 ^ 1;
              _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Pruning file %@. Force delete %u", buf, 0x12u);
            }
            [+[NSFileManager defaultManager] removeItemAtPath:v14 error:&v42];
            double v32 = v42;
            if (v42 != 0.0)
            {
              uint64_t v33 = qword_1000A3508;
              if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412546;
                id v44 = v14;
                __int16 v45 = 2112;
                double v46 = v32;
                _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "Failed to delete file %@ with error %@", buf, 0x16u);
              }
            }
          }
          uint64_t v5 = v13;
        }
        uint64_t v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v34 = [v5 countByEnumeratingWithState:&v38 objects:v51 count:16];
      id v8 = v34;
      if (!v34) {
        goto LABEL_37;
      }
    }
  }
  if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
    sub_100066B54();
  }
LABEL_37:
}

BOOL sub_100024D04(id a1, NSURL *a2, NSError *a3)
{
  uint64_t v5 = qword_1000A3508;
  if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
    sub_100066BBC(a2, (uint64_t)a3, v5);
  }
  return 1;
}

void sub_100024EA4(uint64_t a1)
{
  dispatch_resume(*(dispatch_object_t *)(*(void *)(a1 + 32) + 16));
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = *(void **)(*(void *)(a1 + 32) + 8);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      double v6 = 0;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v9 + 1) + 8 * (void)v6) start];
        double v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }
  id v7 = qword_1000A3508;
  if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Started bdcm", v8, 2u);
  }
}

void sub_100025050(uint64_t a1)
{
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v2 = *(void **)(*(void *)(a1 + 32) + 8);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      for (unint64_t i = 0; i != v4; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v9 + 1) + 8 * i) stop];
      }
      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }
  dispatch_suspend(*(dispatch_object_t *)(*(void *)(a1 + 32) + 16));
  id v7 = qword_1000A3508;
  if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Stopped bdcm", v8, 2u);
  }
}

void sub_10002558C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000255B8()
{
  if (off_1000A4800)
  {
    id v0 = [(id)qword_1000A47E8 objectForKey:@"CurrentRTCTicksOverride"];
    if (v0)
    {
      [v0 doubleValue];
      BOOL v1 = qword_1000A3508;
      if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
        sub_100066DC4(v1, v2, v3, v4, v5, v6, v7, v8);
      }
    }
    else
    {
      long long v9 = (void (*)(void))off_1000A4800;
      v9();
    }
  }
}

void sub_100025CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100025D38(uint64_t a1)
{
  uint64_t v3 = +[NSFileManager defaultManager];
  uint64_t v40 = os_transaction_create();
  uint64_t v4 = (id *)(a1 + 40);
  if ([objc_loadWeak((id *)(a1 + 40)) collectAtSBC])
  {
    int v5 = sub_10002F3F0();
    uint64_t v6 = qword_1000A3508;
    if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = dword_1000A2EFC;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Battery percentage last %d now %d", buf, 0xEu);
    }
    if (dword_1000A2EFC == v5) {
      goto LABEL_89;
    }
    dword_1000A2EFC = v5;
  }
  uint64_t v7 = (uint64_t (**)(id, NSDictionary *))[objc_loadWeak((id *)(a1 + 40)) createDataDictCollectionBlock];
  CFStringRef v43 = @"DataColumnNames";
  id v44 = [objc_loadWeak((id *)(a1 + 40)) columnNames];
  uint64_t v8 = v7[2](v7, +[NSDictionary dictionaryWithObjects:&v44 forKeys:&v43 count:1]);
  if (!v8)
  {
    if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
      sub_100066F40();
    }
LABEL_89:
    id v26 = 0;
    long long v9 = 0;
    id v31 = 0;
    long long v10 = 0;
    char v30 = (void *)v40;
    goto LABEL_55;
  }
  long long v9 = (void *)v8;
  long long v39 = v2;
  if ([*(id *)(a1 + 32) skipCSVAndUsePowerlog])
  {
    id v37 = 0;
    long long v10 = 0;
    goto LABEL_40;
  }
  long long v11 = (NSString *)objc_msgSend((id)qword_1000A47E8, "stringForKey:", objc_msgSend(objc_loadWeak((id *)(a1 + 40)), "getLastUsedDataFileNameDefaultsKey"));
  if ([(NSFileManager *)v3 fileExistsAtPath:v11])
  {
    unsigned int v12 = -[NSString containsString:](v11, "containsString:", +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"version%@", [objc_loadWeak((id *)(a1 + 40)) formatVersion]));
    if ([objc_loadWeak((id *)(a1 + 40)) collectOnce])
    {
      BOOL v13 = 0;
      BOOL v14 = 0;
      if (!v12)
      {
LABEL_12:
        unsigned int v15 = 1;
        goto LABEL_24;
      }
    }
    else
    {
      unsigned int v16 = [(NSFileManager *)v3 attributesOfItemAtPath:v11 error:0];
      [+[NSDate now] timeIntervalSinceDate:[(NSDictionary *)v16 objectForKeyedSubscript:NSFileCreationDate]];
      unsigned int v38 = v17;
      uint64_t v18 = [(NSDictionary *)v16 objectForKeyedSubscript:NSFileProtectionKey];
      if (NSFileProtectionCompleteUntilFirstUserAuthentication == v18 || NSFileProtectionNone == v18)
      {
        BOOL v14 = NSFileProtectionCompleteUntilFirstUserAuthentication == [(NSDictionary *)v16 objectForKeyedSubscript:NSFileProtectionKey]&& MKBDeviceUnlockedSinceBoot() == 0;
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
          sub_10006717C();
        }
        BOOL v14 = 1;
      }
      BOOL v13 = objc_msgSend(objc_msgSend(objc_loadWeak((id *)(a1 + 40)), "collationPeriod"), "unsignedIntValue") <= v38;
      if (!v12) {
        goto LABEL_12;
      }
    }
    unsigned int v15 = [objc_loadWeak((id *)(a1 + 40)) batteryChanged] | (v13 || v14);
  }
  else
  {
    unsigned int v15 = 1;
  }
LABEL_24:
  if (![objc_loadWeak((id *)(a1 + 40)) collectOnce] || (v15 & 1) != 0)
  {
    if (v15)
    {
      uint64_t v36 = a1;
      id v19 = objc_alloc_init((Class)NSDateFormatter);
      [v19 setDateFormat:@"yyyy-MM-dd_HH:mm:ss"];
      objc_msgSend(v19, "setTimeZone:", +[NSTimeZone timeZoneWithAbbreviation:](NSTimeZone, "timeZoneWithAbbreviation:", @"GMT"));
      id v20 = [objc_loadWeak(v4) dirPath];
      id v21 = [objc_loadWeak(v4) dataGroupName];
      id v22 = [objc_loadWeak(v4) formatVersion];
      id v37 = v19;
      long long v11 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@/%@_version%@_%@.csv", v20, v21, v22, [v19 stringFromDate:sub_100021BA0()]);
      uint64_t v23 = qword_1000A3508;
      if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_DEFAULT))
      {
        id v24 = [objc_loadWeak(v4) dataGroupName];
        *(_DWORD *)buf = 138412546;
        *(void *)&uint8_t buf[4] = v24;
        *(_WORD *)&uint8_t buf[12] = 2112;
        *(void *)&buf[14] = v11;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%@ Rolling over to new file %@", buf, 0x16u);
      }
      a1 = v36;
    }
    else
    {
      id v37 = 0;
    }
    if ([(NSFileManager *)v3 fileExistsAtPath:v11]) {
      goto LABEL_35;
    }
    *(void *)buf = 0;
    if ([(NSFileManager *)v3 createDirectoryAtPath:sub_100023DD4(@"BDC_Data_Storage_Path", 3u) withIntermediateDirectories:1 attributes:0 error:buf])
    {
      if ([(NSFileManager *)v3 createFileAtPath:v11 contents:0 attributes:0])
      {
        objc_msgSend((id)qword_1000A47E8, "setObject:forKey:", v11, objc_msgSend(objc_loadWeak(v4), "getLastUsedDataFileNameDefaultsKey"));
        -[NSString writeToFile:atomically:encoding:error:](+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@%@", objc_msgSend(objc_msgSend(v9, "objectForKeyedSubscript:", @"OrderedKeys"), "componentsJoinedByString:", @","), @"\n"), "writeToFile:atomically:encoding:error:", v11, 1, 4, 0);
LABEL_35:
        long long v10 = +[NSFileHandle fileHandleForWritingAtPath:v11];
        [(NSFileHandle *)v10 seekToEndOfFile];
        double v25 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@%@", objc_msgSend(objc_msgSend(v9, "objectsForKeys:notFoundMarker:", objc_msgSend(v9, "objectForKeyedSubscript:", @"OrderedKeys"), &stru_100093D08), "componentsJoinedByString:", @","), @"\n");
        *(void *)buf = 0;
        if ([(NSFileHandle *)v10 writeData:[(NSString *)v25 dataUsingEncoding:4] error:buf])
        {
          if (v15)
          {
            NSFileAttributeKey v41 = NSFileProtectionKey;
            NSFileProtectionType v42 = NSFileProtectionCompleteUntilFirstUserAuthentication;
            if (![(NSFileManager *)v3 setAttributes:+[NSDictionary dictionaryWithObjects:&v42 forKeys:&v41 count:1] ofItemAtPath:v11 error:buf]&& os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR))
            {
              sub_1000670AC();
            }
          }
LABEL_40:
          id v26 = [v9 mutableCopy];
          [v26 removeObjectForKey:@"OrderedKeys"];
          [v26 removeObjectForKey:@"TimeStamp"];
          id v27 = [objc_loadWeak(v4) dataGroupName];
          unsigned int v28 = [objc_loadWeak(v4) collectionQueue];
          if (!sub_1000295BC())
          {
            if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
              sub_100066F74();
            }
            goto LABEL_52;
          }
          if (!sub_1000295BC() || !sub_100029700() || !sub_1000295BC() || !sub_10002989C())
          {
            if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
              sub_100066FA8();
            }
            goto LABEL_52;
          }
          if ([v27 isEqualToString:@"BDC_Once"])
          {
            uint64_t v29 = qword_1000A4830;
            if (!qword_1000A4830)
            {
              uint64_t v29 = sub_1000294B4(@"BDC_Once");
              qword_1000A4830 = v29;
              goto LABEL_76;
            }
LABEL_80:
            double v32 = qword_1000A3508;
            if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              *(void *)&uint8_t buf[4] = v27;
              _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Sending data to powerlog for group %@", buf, 0xCu);
            }
            if ([v27 isEqualToString:@"BDC_Once"])
            {
              dispatch_time_t v33 = dispatch_time(0, 600000000000);
              *(void *)buf = _NSConcreteStackBlock;
              *(void *)&uint8_t buf[8] = 3221225472;
              *(void *)&uint8_t buf[16] = sub_100029500;
              double v46 = &unk_100091FD8;
              id v47 = v26;
              uint64_t v48 = v29;
              dispatch_after(v33, v28, buf);
            }
            else
            {
              sub_100029570(v29, (uint64_t)v26);
            }
LABEL_52:
            objc_msgSend((id)qword_1000A47E8, "setObject:forKey:", sub_100021BA0(), objc_msgSend(*(id *)(a1 + 32), "getLastDataLoggedTimestampDefaultsKey"));
            uint64_t v2 = v39;
            if ([objc_loadWeak(v4) batteryChanged]) {
              [objc_loadWeak(v4) setBatteryChanged:0];
            }
            goto LABEL_54;
          }
          if ([v27 isEqualToString:@"BDC_Daily"])
          {
            uint64_t v29 = qword_1000A4838;
            if (qword_1000A4838) {
              goto LABEL_80;
            }
            uint64_t v29 = sub_1000294B4(@"BDC_Daily");
            qword_1000A4838 = v29;
          }
          else if ([v27 isEqualToString:@"BDC_Weekly"])
          {
            uint64_t v29 = qword_1000A4840;
            if (qword_1000A4840) {
              goto LABEL_80;
            }
            uint64_t v29 = sub_1000294B4(@"BDC_Weekly");
            qword_1000A4840 = v29;
          }
          else if ([v27 isEqualToString:@"BDC_SBC"])
          {
            uint64_t v29 = qword_1000A4848;
            if (qword_1000A4848) {
              goto LABEL_80;
            }
            uint64_t v29 = sub_1000294B4(@"BDC_SBC");
            qword_1000A4848 = v29;
          }
          else if ([v27 isEqualToString:@"BDC_OBC"])
          {
            uint64_t v29 = qword_1000A4850;
            if (qword_1000A4850) {
              goto LABEL_80;
            }
            uint64_t v29 = sub_1000294B4(@"BDC_OBC");
            qword_1000A4850 = v29;
          }
          else if ([v27 isEqualToString:@"BDC_AMA"])
          {
            uint64_t v29 = qword_1000A4858;
            if (qword_1000A4858) {
              goto LABEL_80;
            }
            uint64_t v29 = sub_1000294B4(@"BDC_AMA");
            qword_1000A4858 = v29;
          }
          else
          {
            if (![v27 isEqualToString:@"BDC_SmartCharging"])
            {
              if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
                sub_100067044();
              }
              goto LABEL_52;
            }
            uint64_t v29 = qword_1000A4860;
            if (qword_1000A4860) {
              goto LABEL_80;
            }
            uint64_t v29 = sub_1000294B4(@"BDC_SmartCharging");
            qword_1000A4860 = v29;
          }
LABEL_76:
          if (!v29)
          {
            if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
              sub_100066FDC();
            }
            uint64_t v29 = 0;
          }
          goto LABEL_80;
        }
        if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
          sub_100067114();
        }
        id v26 = 0;
LABEL_101:
        uint64_t v2 = v39;
LABEL_54:
        char v30 = (void *)v40;
        id v31 = v37;
        goto LABEL_55;
      }
      if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
        sub_100066C58();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR))
    {
      sub_100066750();
    }
    id v26 = 0;
    long long v10 = 0;
    goto LABEL_101;
  }
  id v34 = qword_1000A3508;
  if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_DEFAULT))
  {
    id v35 = [objc_loadWeak((id *)(a1 + 40)) dataGroupName];
    *(_DWORD *)buf = 138412290;
    *(void *)&uint8_t buf[4] = v35;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Data already collected for %@", buf, 0xCu);
  }
  id v26 = 0;
  id v31 = 0;
  long long v10 = 0;
  uint64_t v2 = v39;
  char v30 = (void *)v40;
LABEL_55:

  [(NSFileHandle *)v10 closeFile];
  if (v30) {
}
  }

void sub_100027078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1000270B0(id a1, unint64_t a2)
{
  uint64_t state64 = 0;
  int out_token = 0;
  notify_register_check("com.apple.system.powersources.timeremaining", &out_token);
  if (notify_is_valid_token(out_token))
  {
    notify_get_state(out_token, &state64);
    uint64_t v3 = qword_1000A3508;
    if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v9 = state64;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "kIOPSNotifyTimeRemaining state %llu", buf, 0xCu);
    }
    notify_cancel(out_token);
    uint64_t v4 = state64;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
      sub_100067484();
    }
    uint64_t v4 = 0;
  }
  return (v4 & a2) != 0;
}

uint64_t sub_1000271C4(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16))()) {
    int v2 = 2;
  }
  else {
    int v2 = 0;
  }
  return v2 | (*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16))();
}

BOOL sub_10002721C(id a1, unsigned __int8 a2)
{
  return a2 == 2;
}

void sub_100027228(uint64_t a1, uint64_t a2)
{
}

void sub_100027238(uint64_t a1)
{
}

void sub_100027244(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setEventRegistrationToken:a2];
  int v3 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v4 = +[NSDate now];
  [(NSDate *)v4 timeIntervalSinceDate:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  double v6 = v5;
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 48) + 16))())
  {
    uint64_t v7 = qword_1000A3508;
    if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 67109120;
      int v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Ignoring connection state %u", (uint8_t *)&v11, 8u);
    }
  }
  else if (v3 != *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) && v6 > 2.0)
  {

    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 4sub_100019490(0, 0) = v4;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v3;
    uint64_t v9 = qword_1000A3508;
    if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
      int v11 = 67109120;
      int v12 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Connected state changed to %u", (uint8_t *)&v11, 8u);
    }
    objc_msgSend((id)qword_1000A47E8, "setObject:forKey:", +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24)), @"LastConnectedState");
    (*((void (**)(void))[*(id *)(a1 + 32) collectionEventHandler] + 2))();
  }
}

void sub_10002743C(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setEventRegistrationToken:a2];
  int v3 = qword_1000A3508;
  if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v7 = "com.apple.smartcharging.charging";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received notification for %s.", buf, 0xCu);
  }
  uint64_t v4 = [*(id *)(a1 + 32) collectionQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10002754C;
  block[3] = &unk_100091DC8;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async(v4, block);
}

uint64_t sub_10002754C(uint64_t a1)
{
  BOOL v1 = (uint64_t (*)(void))*((void *)[*(id *)(a1 + 32) collectionEventHandler] + 2);

  return v1();
}

const void *sub_100027580(const __CFString *a1, uint64_t a2)
{
  CFDictionaryRef v4 = IOServiceMatching("AppleBTM");
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v4);
  if (MatchingService)
  {
    io_object_t v6 = MatchingService;
    if (a1)
    {
      CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(MatchingService, a1, kCFAllocatorDefault, 0);
      uint64_t v8 = CFProperty;
      if (CFProperty && CFGetTypeID(CFProperty) == a2) {
        goto LABEL_9;
      }
      if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR))
      {
        sub_1000674EC();
        if (!v8) {
          goto LABEL_9;
        }
      }
      else if (!v8)
      {
LABEL_9:
        IOObjectRelease(v6);
        return v8;
      }
      CFRelease(v8);
    }
    else if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR))
    {
      sub_1000674B8();
    }
    uint64_t v8 = 0;
    goto LABEL_9;
  }
  if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
    sub_1000673E8();
  }
  return 0;
}

void sub_100027AA0()
{
  qword_1000A3508 = (uint64_t)os_log_create("com.apple.powerd", "BDC");
  CFDictionaryRef v0 = IOServiceMatching("AppleSMC");
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v0);
  if (MatchingService)
  {
    IOObjectRelease(MatchingService);
    CFStringRef v2 = (const __CFString *)sub_10002E9B8();
    if (v2 && CFStringGetLength(v2))
    {
      qword_1000A47F0 = objc_alloc_init(BatteryDataCollectionManager);
      [(id)qword_1000A47F0 start];
      uint64_t v3 = qword_1000A3508;
      if (!os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      if (qword_1000A47F0) {
        CFDictionaryRef v4 = "started";
      }
      else {
        CFDictionaryRef v4 = "not started";
      }
      int v9 = 136315138;
      int v10 = v4;
      double v5 = "BDC %s";
      io_object_t v6 = v3;
      uint32_t v7 = 12;
      goto LABEL_14;
    }
    uint64_t v8 = qword_1000A3508;
    if (!os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(v9) = 0;
    double v5 = "No battery serial number. Can't start BDC";
  }
  else
  {
    uint64_t v8 = qword_1000A3508;
    if (!os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(v9) = 0;
    double v5 = "No match for SMC IOService. Can't start BDC";
  }
  io_object_t v6 = v8;
  uint32_t v7 = 2;
LABEL_14:
  _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v9, v7);
}

void sub_100027C28(_xpc_connection_s *a1, void *a2)
{
  if (a1 && a2)
  {
    xpc_object_t reply = xpc_dictionary_create_reply(a2);
    if (reply)
    {
      io_object_t v6 = reply;
      if (sub_10005D5C0(a1, @"com.apple.private.bdc.tasking", 0))
      {
        if (qword_1000A47F0 && qword_1000A47E8)
        {
          id v7 = objc_msgSend(objc_msgSend((id)qword_1000A47E8, "dictionaryRepresentation"), "mutableCopy");
          if (v7)
          {
            uint64_t v8 = v7;
            [v7 removeObjectForKey:@"BatterySerialNumber"];
            uint64_t v9 = _CFXPCCreateXPCObjectFromCFObject();
            if (v9)
            {
              int v10 = (void *)v9;
              xpc_dictionary_set_int64(v6, "returnCode", 0);
              xpc_dictionary_set_value(v6, "BDCXPCCopyDefaults", v10);
              xpc_release(v10);
            }
            else
            {
              xpc_dictionary_set_int64(v6, "returnCode", -536870212);
              if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
                sub_1000675C8();
              }
            }
          }
          else
          {
            xpc_dictionary_set_int64(v6, "returnCode", -536870160);
          }
        }
        else if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR))
        {
          sub_100067594();
        }
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
          sub_1000675FC();
        }
        xpc_dictionary_set_uint64(v6, "returnCode", 0xFFFFFFFFE00002C1);
      }
      xpc_connection_send_message(a1, v6);
      xpc_release(v6);
    }
    else if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR))
    {
      sub_100067560();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR))
  {
    sub_100067630();
  }
}

NSDictionary *__cdecl sub_100027E40(id a1, NSDictionary *a2)
{
  CFTypeID TypeID = CFArrayGetTypeID();
  obuint64_t j = (id)sub_100027580(@"BatteryData", TypeID);
  if (!obj)
  {
    double v17 = qword_1000A3508;
    if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
      sub_100067698(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    goto LABEL_19;
  }
  uint64_t v3 = (NSDictionary *)objc_alloc_init((Class)NSMutableDictionary);
  CFDictionaryRef v4 = qword_1000A3508;
  if (!v3)
  {
    if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
      sub_100067710();
    }
LABEL_19:
    double v5 = 0;
    goto LABEL_14;
  }
  double v5 = v3;
  if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_DEBUG)) {
    sub_100067744(obj, v4);
  }
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v6 = [obj countByEnumeratingWithState:&v26 objects:v30 count:16];
  if (v6)
  {
    id v7 = v6;
    id v8 = 0;
    uint64_t v9 = *(void *)v27;
    char v10 = 1;
    do
    {
      for (unint64_t i = 0; i != v7; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v27 != v9) {
          objc_enumerationMutation(obj);
        }
        int v12 = *(void **)(*((void *)&v26 + 1) + 8 * i);
        if (v10)
        {
          id v8 = [*(id *)(*((void *)&v26 + 1) + 8 * i) objectForKeyedSubscript:@"Timestamp"];
          [(NSDictionary *)v5 setObject:v8 forKeyedSubscript:@"StartTimestamp"];
        }
        BOOL v13 = objc_msgSend(objc_msgSend(v12, "objectForKeyedSubscript:", @"Timestamp"), "unsignedLongLongValue");
        unint64_t v14 = (v13 - (unsigned char *)[v8 unsignedLongLongValue]) / 0xF4240uLL;
        id v15 = [v12 mutableCopy];
        [v15 removeObjectForKey:@"Timestamp"];
        [(NSDictionary *)v5 setObject:v15 forKeyedSubscript:+[NSNumber numberWithUnsignedLongLong:v14]];

        char v10 = 0;
      }
      id v7 = [obj countByEnumeratingWithState:&v26 objects:v30 count:16];
      char v10 = 0;
    }
    while (v7);
  }
LABEL_14:

  return v5;
}

NSDictionary *__cdecl sub_100028088(id a1, NSDictionary *a2)
{
  uint64_t v30 = 0;
  id v31 = &v30;
  uint64_t v32 = 0x3052000000;
  dispatch_time_t v33 = sub_100027228;
  id v34 = sub_100027238;
  uint64_t v35 = 0;
  uint64_t v3 = dispatch_semaphore_create(0);
  CFDictionaryRef v4 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  double v5 = dispatch_queue_create("smartChargingQueue", v4);
  if (!v5)
  {
    if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
      sub_1000677CC();
    }
    goto LABEL_37;
  }
  id v6 = sub_100021E90("com.apple.powerui.bdcdata", v5);
  if (!v6)
  {
    if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
      sub_100067800();
    }
LABEL_37:
    int v12 = 0;
    id v8 = 0;
    id v6 = 0;
    goto LABEL_22;
  }
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  id v8 = v7;
  if (v7)
  {
    xpc_dictionary_set_BOOL(v7, "currentSmartChargingStateRequest", 1);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_100028540;
    handler[3] = &unk_100091F70;
    void handler[4] = v3;
    void handler[5] = &v30;
    xpc_connection_send_message_with_reply(v6, v8, v5, handler);
    dispatch_time_t v9 = dispatch_time(0x8000000000000000, 10000000000);
    dispatch_semaphore_wait(v3, v9);
    char v10 = (void *)v31[5];
    if (!v10)
    {
      if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
        sub_100067868();
      }
      goto LABEL_9;
    }
    if (xpc_get_type(v10) != (xpc_type_t)&_xpc_type_dictionary)
    {
      int v11 = xpc_copy_description((xpc_object_t)v31[5]);
      if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
        sub_10006664C();
      }
      free(v11);
LABEL_9:
      int v12 = 0;
      goto LABEL_22;
    }
    id v13 = [(NSDictionary *)a2 objectForKeyedSubscript:@"DataColumnNames"];
    id v14 = objc_alloc_init((Class)NSMutableArray);
    id v15 = (void *)_CFXPCCreateCFObjectFromXPCObject();
    if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_DEBUG)) {
      sub_10006789C();
    }
    int v12 = (NSDictionary *)objc_alloc_init((Class)NSMutableDictionary);
    [(NSDictionary *)v12 setObject:sub_100021B2C() forKeyedSubscript:@"TimeStamp"];
    [v14 addObject:@"TimeStamp"];
    uint64_t v23 = v6;
    uint64_t v24 = v3;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    id v16 = [v13 countByEnumeratingWithState:&v25 objects:v36 count:16];
    if (v16)
    {
      uint64_t v17 = *(void *)v26;
      do
      {
        for (unint64_t i = 0; i != v16; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v26 != v17) {
            objc_enumerationMutation(v13);
          }
          uint64_t v19 = *(void *)(*((void *)&v25 + 1) + 8 * i);
          uint64_t v20 = (NSNull *)[v15 objectForKeyedSubscript:v19];
          if (!v20) {
            uint64_t v20 = +[NSNull null];
          }
          [(NSDictionary *)v12 setObject:v20 forKeyedSubscript:v19];
          [v14 addObject:v19];
        }
        id v16 = [v13 countByEnumeratingWithState:&v25 objects:v36 count:16];
      }
      while (v16);
    }
    [(NSDictionary *)v12 setObject:v14 forKeyedSubscript:@"OrderedKeys"];
    uint64_t v3 = v24;
    id v6 = v23;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
      sub_100067834();
    }
    int v12 = 0;
    id v8 = 0;
  }
LABEL_22:
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v21 = (void *)v31[5];
  if (v21) {
    xpc_release(v21);
  }
  if (v8) {
    xpc_release(v8);
  }
  if (v6)
  {
    xpc_connection_cancel(v6);
    xpc_release(v6);
  }
  if (v5) {
    dispatch_release(v5);
  }
  _Block_object_dispose(&v30, 8);
  return v12;
}

void sub_100028500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

intptr_t sub_100028540(uint64_t a1, xpc_object_t object)
{
  if (object)
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 4sub_100019490(0, 0) = xpc_copy(object);
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR))
  {
    sub_100067910();
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

NSDictionary *__cdecl sub_1000285A8(id a1, NSDictionary *a2)
{
  uint64_t v3 = (void *)sub_10002E808();
  if (!v3)
  {
    if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
      sub_100067944();
    }
    goto LABEL_106;
  }
  long long v60 = (NSDictionary *)objc_opt_new();
  if (!v60)
  {
    if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
      sub_100067978();
    }
LABEL_106:
    long long v60 = 0;
    goto LABEL_101;
  }
  id v4 = +[NSMutableArray array];
  id v5 = [(NSDictionary *)a2 objectForKeyedSubscript:@"DataColumnNames"];
  if ([v5 count])
  {
    [(NSDictionary *)v60 setObject:sub_100021B2C() forKeyedSubscript:@"TimeStamp"];
    [v4 addObject:@"TimeStamp"];
  }
  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  id v6 = [v5 countByEnumeratingWithState:&v67 objects:v79 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v68;
    id v56 = v5;
    id v57 = v3;
    uint64_t v58 = *(void *)v68;
    do
    {
      dispatch_time_t v9 = 0;
      id v59 = v7;
      do
      {
        if (*(void *)v68 != v8) {
          objc_enumerationMutation(v5);
        }
        char v10 = *(NSNumber **)(*((void *)&v67 + 1) + 8 * (void)v9);
        if (([(NSNumber *)v10 isEqualToString:@"EEEE"] & 1) != 0
          || [(NSNumber *)v10 isEqualToString:@"YWW"])
        {
          id v11 = sub_1000290D8(v3, @"Serial", 0);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            uint64_t v17 = qword_1000A3508;
            if (!os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
              goto LABEL_65;
            }
            *(_DWORD *)buf = 138412290;
            CFNumberRef v75 = v10;
            id v14 = v17;
            id v15 = "Value for key %@ is not of string type";
            uint32_t v16 = 12;
            goto LABEL_18;
          }
          unsigned int v12 = [v11 length];
          if (v12 - 19 <= 0xFFFFFFFD)
          {
            uint64_t v13 = qword_1000A3508;
            if (!os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
              goto LABEL_65;
            }
            *(_DWORD *)buf = 67109120;
            LODWORD(v75) = v12;
            id v14 = v13;
            id v15 = "Unexpected battery serial length %u";
            uint32_t v16 = 8;
LABEL_18:
            _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, v15, buf, v16);
            goto LABEL_65;
          }
          if ([(NSNumber *)v10 isEqualToString:@"YWW"])
          {
            CFTypeRef cf = 0;
            if (IOPSGetYearAndWeekOfManufactureFromBatterySerial())
            {
              uint64_t v22 = (NSNumber *)[(id)cf copy];
              CFRelease(cf);
              uint64_t v23 = qword_1000A3508;
              if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 138412290;
                CFNumberRef v75 = v22;
                _os_log_debug_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "Fetched yww from IOKit: %@", buf, 0xCu);
              }
              goto LABEL_63;
            }
            uint64_t v30 = qword_1000A3508;
            if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
              sub_1000679AC(&v71, v72, v30);
            }
LABEL_42:
            uint64_t v22 = 0;
            goto LABEL_63;
          }
          if (![(NSNumber *)v10 isEqualToString:@"EEEE"])
          {
            long long v28 = qword_1000A3508;
            if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              CFNumberRef v75 = v10;
              _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "Unsupported key %@", buf, 0xCu);
            }
            goto LABEL_42;
          }
          if ([v11 length] == (id)17)
          {
            uint64_t v27 = 4;
            goto LABEL_55;
          }
          if ([v11 length] == (id)18)
          {
            uint64_t v27 = 7;
LABEL_55:
            uint64_t v22 = (NSNumber *)objc_msgSend(v11, "substringWithRange:", 11, v27);
          }
          else
          {
            uint64_t v22 = 0;
          }
          uint64_t v36 = qword_1000A3508;
          if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            CFNumberRef v75 = v22;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Extracted engineering code %@", buf, 0xCu);
          }
LABEL_63:
          [v4 addObject:v10];
          uint64_t v21 = v60;
          uint64_t v20 = v22;
LABEL_64:
          [(NSDictionary *)v21 setObject:v20 forKeyedSubscript:v10];
          goto LABEL_65;
        }
        if ([(NSNumber *)v10 isEqualToString:@"BatteryAuth"])
        {
          uint64_t v18 = sub_100021A64();
          uint64_t v19 = qword_1000A3508;
          if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            LODWORD(v75) = v18;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Read battery auth state %d", buf, 8u);
          }
          [v4 addObject:v10];
          uint64_t v20 = +[NSNumber numberWithInt:v18];
          uint64_t v21 = v60;
          goto LABEL_64;
        }
        if (([(NSNumber *)v10 isEqualToString:@"BHServiceFlags"] & 1) == 0
          && ([(NSNumber *)v10 isEqualToString:@"BHCalibrationFlags"] & 1) == 0
          && ![(NSNumber *)v10 isEqualToString:@"MaxCapacityPercent"])
        {
          CFTypeRef cf = 0;
          id v32 = sub_1000290D8(v3, (uint64_t)v10, (NSError **)&cf);
          if (!v32 && cf)
          {
            uint64_t v33 = qword_1000A3508;
            if (!os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
              goto LABEL_98;
            }
            *(_DWORD *)buf = 138412290;
            CFNumberRef v75 = v10;
            id v34 = v33;
            uint64_t v35 = "Nil value for key %@";
            goto LABEL_90;
          }
          if ([(id)qword_1000A4810 containsObject:v10])
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              long long v63 = 0u;
              long long v64 = 0u;
              long long v61 = 0u;
              long long v62 = 0u;
              id v37 = [v32 countByEnumeratingWithState:&v61 objects:v78 count:16];
              if (!v37) {
                goto LABEL_98;
              }
              id v38 = v37;
              uint64_t v39 = 0;
              uint64_t v40 = *(void *)v62;
              while (1)
              {
                for (unint64_t i = 0; i != v38; unint64_t i = (char *)i + 1)
                {
                  if (*(void *)v62 != v40) {
                    objc_enumerationMutation(v32);
                  }
                  NSFileProtectionType v42 = *(NSMutableString **)(*((void *)&v61 + 1) + 8 * i);
                  id v43 = [(NSNumber *)v10 stringByAppendingFormat:@"%d", (char *)i + v39];
                  objc_opt_class();
                  if ((objc_opt_isKindOfClass() & 1) == 0) {
                    goto LABEL_77;
                  }
                  uint64_t v44 = (uint64_t)[(NSNumber *)v10 isEqualToString:@"RaTableRaw"];
                  if (v44)
                  {
                    NSFileProtectionType v42 = sub_100029030(v44, v42);
LABEL_77:
                    [(NSDictionary *)v60 setObject:v42 forKeyedSubscript:v43];
                    [v4 addObject:v43];
                    continue;
                  }
                  __int16 v45 = qword_1000A3508;
                  if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 138412290;
                    CFNumberRef v75 = v10;
                    _os_log_error_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "Unhandled NSData for key %@", buf, 0xCu);
                  }
                }
                id v38 = [v32 countByEnumeratingWithState:&v61 objects:v78 count:16];
                uint64_t v39 = (v39 + i);
                if (!v38)
                {
LABEL_98:
                  id v5 = v56;
                  uint64_t v3 = v57;
                  goto LABEL_52;
                }
              }
            }
            uint64_t v48 = qword_1000A3508;
            if (!os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
              goto LABEL_98;
            }
            *(_DWORD *)buf = 138412290;
            CFNumberRef v75 = v10;
            id v34 = v48;
            uint64_t v35 = "Value for key %@ is not an array type";
LABEL_90:
            uint32_t v49 = 12;
LABEL_91:
            _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, v35, buf, v49);
            goto LABEL_98;
          }
          if (([(NSNumber *)v10 isEqualToString:@"TimeAtHighSoc"] & 1) != 0
            || [(NSNumber *)v10 isEqualToString:@"LowVoltageResidencyCounters"])
          {
            objc_opt_class();
            uint64_t isKindOfClass = objc_opt_isKindOfClass();
            if ((isKindOfClass & 1) == 0)
            {
              double v50 = (objc_class *)objc_opt_class();
              long long v51 = NSStringFromClass(v50);
              uint64_t v52 = qword_1000A3508;
              if (!os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
                goto LABEL_98;
              }
              *(_DWORD *)buf = 138412546;
              CFNumberRef v75 = (NSNumber *)v51;
              __int16 v76 = 2112;
              int v77 = v10;
              id v34 = v52;
              uint64_t v35 = "Unexpected class type %@ for key %@. Expected NSData";
              uint32_t v49 = 22;
              goto LABEL_91;
            }
            id v47 = sub_100029030(isKindOfClass, v32);
LABEL_87:
            id v32 = v47;
          }
          else if ([(NSNumber *)v10 isEqualToString:@"WeightedRa"])
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              id v47 = (NSMutableString *)[v32 firstObject];
              goto LABEL_87;
            }
          }
          [(NSDictionary *)v60 setObject:v32 forKeyedSubscript:v10];
          [v4 addObject:v10];
          goto LABEL_98;
        }
        uint64_t v24 = sub_100032134();
        if (v24)
        {
          long long v25 = (void *)v24;
          if ([(NSNumber *)v10 isEqualToString:@"BHServiceFlags"]) {
            long long v26 = (_UNKNOWN **)[v25 objectForKeyedSubscript:@"Battery Service Flags"];
          }
          else {
            long long v26 = 0;
          }
          if ([(NSNumber *)v10 isEqualToString:@"BHCalibrationFlags"]) {
            long long v26 = (_UNKNOWN **)objc_msgSend(objc_msgSend(v25, "objectForKeyedSubscript:", @"calibration0"), "objectForKeyedSubscript:", @"calibrationFlags");
          }
          if ([(NSNumber *)v10 isEqualToString:@"MaxCapacityPercent"]) {
            long long v26 = (_UNKNOWN **)[v25 objectForKeyedSubscript:@"Maximum Capacity Percent"];
          }
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            id v31 = qword_1000A3508;
            long long v26 = &off_10009A6B0;
            if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              CFNumberRef v75 = v10;
              _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "%@ object is not NSNumber", buf, 0xCu);
            }
          }
          [(NSDictionary *)v60 setObject:v26 forKeyedSubscript:v10];
          [v4 addObject:v10];

LABEL_52:
          uint64_t v8 = v58;
          id v7 = v59;
        }
        else
        {
          long long v29 = qword_1000A3508;
          if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
            sub_1000679EC(&v65, v66, v29);
          }
        }
LABEL_65:
        dispatch_time_t v9 = (char *)v9 + 1;
      }
      while (v9 != v7);
      id v53 = [v5 countByEnumeratingWithState:&v67 objects:v79 count:16];
      id v7 = v53;
    }
    while (v53);
  }
  [(NSDictionary *)v60 setObject:v4 forKeyedSubscript:@"OrderedKeys"];
LABEL_101:

  return v60;
}

NSMutableString *sub_100029030(uint64_t a1, void *a2)
{
  uint64_t v3 = +[NSMutableString stringWithCapacity:](NSMutableString, "stringWithCapacity:", 2 * (void)[a2 length]);
  id v4 = (unsigned __int8 *)[a2 bytes];
  if ([a2 length])
  {
    unint64_t v5 = 0;
    do
      [(NSMutableString *)v3 appendFormat:@"%02x", v4[v5++]];
    while ((unint64_t)[a2 length] > v5);
  }
  return v3;
}

id sub_1000290D8(void *a1, uint64_t a2, NSError **a3)
{
  if (a1 && a2)
  {
    id v5 = a1;
    id v6 = [(id)qword_1000A4808 objectForKeyedSubscript:a2];
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v7 = [v6 countByEnumeratingWithState:&v13 objects:v19 count:16];
    if (!v7) {
      return [v5 objectForKeyedSubscript:a2];
    }
    id v8 = v7;
    uint64_t v9 = *(void *)v14;
    do
    {
      for (unint64_t i = 0; i != v8; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v9) {
          objc_enumerationMutation(v6);
        }
        id v5 = [v5 objectForKeyedSubscript:*(void *)(*((void *)&v13 + 1) + 8 * i)];
      }
      id v8 = [v6 countByEnumeratingWithState:&v13 objects:v19 count:16];
    }
    while (v8);
    if (v5) {
      return [v5 objectForKeyedSubscript:a2];
    }
  }
  if (!a3) {
    return 0;
  }
  NSErrorUserInfoKey v17 = NSUnderlyingErrorKey;
  CFStringRef v18 = @"key not found";
  unsigned int v12 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 14, +[NSDictionary dictionaryWithObjects:&v18 forKeys:&v17 count:1]);
  id result = 0;
  *a3 = v12;
  return result;
}

void sub_100029270(uint64_t a1, int token)
{
  uint64_t state64 = 0;
  notify_get_state(token, &state64);
  uint64_t v3 = qword_1000A3508;
  if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    long long v14 = "com.apple.powerd.bdc.get_current_time";
    __int16 v15 = 2048;
    uint64_t v16 = state64;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received notification for %s. Value set to %lld\n", buf, 0x16u);
  }
  id v7 = _NSConcreteStackBlock;
  uint64_t v8 = 3221225472;
  uint64_t v9 = sub_100029454;
  char v10 = &unk_100091A80;
  LODWORD(v11) = *(_DWORD *)(a1 + 32);
  if (qword_1000A4828 != -1) {
    dispatch_once(&qword_1000A4828, &v7);
  }
  if (notify_is_valid_token(dword_1000A2F00))
  {
    [(NSDate *)sub_100021BA0() timeIntervalSince1970];
    unint64_t v5 = (unint64_t)v4;
    notify_set_state(dword_1000A2F00, (unint64_t)v4);
    notify_post("com.apple.powerd.bdc.current_time");
    id v6 = qword_1000A3508;
    if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      long long v14 = (const char *)v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sent current time notification %llu", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR))
  {
    sub_100067A2C();
  }
}

void sub_100029454(uint64_t a1)
{
  if (notify_register_check("com.apple.powerd.bdc.current_time", &dword_1000A2F00))
  {
    CFStringRef v2 = qword_1000A3508;
    if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_ERROR)) {
      sub_100067A60(a1, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

uint64_t sub_1000294B4(uint64_t a1)
{
  CFStringRef v2 = (uint64_t (*)(const __CFString *, uint64_t))sub_10002989C();
  if (v2)
  {
    return v2(@"BatteryDataCollection", a1);
  }
  else
  {
    uint64_t v4 = sub_1000647BC();
    return sub_100029500(v4);
  }
}

uint64_t sub_100029500(uint64_t a1)
{
  CFStringRef v2 = qword_1000A3508;
  if (os_log_type_enabled((os_log_t)qword_1000A3508, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Send BDC_Once payload to PPT", v4, 2u);
  }
  return sub_100029570(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_100029570(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))sub_100029700();
  if (v4)
  {
    return v4(a1, a2);
  }
  else
  {
    sub_1000647BC();
    return sub_1000295BC();
  }
}

uint64_t sub_1000295BC()
{
  if (!qword_1000A4868) {
    qword_1000A4868 = _sl_dlopen();
  }
  return qword_1000A4868;
}

uint64_t sub_10002968C()
{
  uint64_t result = _sl_dlopen();
  qword_1000A4868 = result;
  return result;
}

uint64_t sub_100029700()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = qword_1000A4870;
  uint64_t v6 = qword_1000A4870;
  if (!qword_1000A4870)
  {
    BOOL v1 = (void *)sub_100029840();
    v4[3] = (uint64_t)dlsym(v1, "PerfPowerTelemetrySendEvent");
    qword_1000A4870 = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1000297D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1000297F0(uint64_t a1)
{
  CFStringRef v2 = (void *)sub_100029840();
  uint64_t result = dlsym(v2, "PerfPowerTelemetrySendEvent");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1000A4870 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_100029840()
{
  uint64_t v0 = sub_1000295BC();
  if (!v0)
  {
    CFStringRef v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

uint64_t sub_10002989C()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = qword_1000A4878;
  uint64_t v6 = qword_1000A4878;
  if (!qword_1000A4878)
  {
    BOOL v1 = (void *)sub_100029840();
    v4[3] = (uint64_t)dlsym(v1, "PerfPowerTelemetryCreateIdentifier");
    qword_1000A4878 = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100029974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_10002998C(uint64_t a1)
{
  CFStringRef v2 = (void *)sub_100029840();
  uint64_t result = dlsym(v2, "PerfPowerTelemetryCreateIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1000A4878 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1000299F4(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

uint64_t sub_100029A00()
{
  values = 0;
  keys = 0;
  uint64_t v0 = qword_1000A4880;
  if (!qword_1000A4880)
  {
    uint64_t v0 = os_log_create("com.apple.powerd", "prefs");
    qword_1000A4880 = (uint64_t)v0;
  }
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Looking for MDM prefs\n", buf, 2u);
  }
  uint64_t v1 = 3758097088;
  CFStringRef v2 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@/%@.plist", @"/Library/Managed Preferences/mobile", @"com.apple.powerd.managed");
  if (v2)
  {
    CFStringRef v3 = v2;
    CFDictionaryRef v4 = (const __CFDictionary *)[objc_alloc((Class)NSDictionary) initWithContentsOfFile:v2];
    if (!v4)
    {
      __int16 v15 = qword_1000A4880;
      if (os_log_type_enabled((os_log_t)qword_1000A4880, OS_LOG_TYPE_ERROR)) {
        sub_100067AD0(v15, v16, v17, v18, v19, v20, v21, v22);
      }
      uint64_t v23 = v3;
      goto LABEL_39;
    }
    CFDictionaryRef v5 = v4;
    if (CFDictionaryContainsKey(v4, @"CriticalAcOverride"))
    {
      int valuePtr = -1;
      *(void *)buf = 0;
      if (CFDictionaryGetValueIfPresent(v5, @"CriticalAcOverride", (const void **)buf))
      {
        CFNumberRef v6 = *(CFNumberRef *)buf;
        CFTypeID TypeID = CFNumberGetTypeID();
        if (v6)
        {
          if (CFGetTypeID(v6) == TypeID) {
            CFNumberGetValue(*(CFNumberRef *)buf, kCFNumberIntType, &valuePtr);
          }
        }
      }
      uint64_t v8 = qword_1000A4880;
      if (os_log_type_enabled((os_log_t)qword_1000A4880, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = valuePtr;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CriticalAcOverrideKey found %d in prefs\n", buf, 8u);
      }
      keys = (void *)CFStringCreateWithCString(kCFAllocatorDefault, "CriticalAcOverride", 0x8000100u);
      if (valuePtr >= 1) {
        uint64_t v9 = (void **)&kCFBooleanTrue;
      }
      else {
        uint64_t v9 = (void **)&kCFBooleanFalse;
      }
      values = *v9;
      CFDictionaryRef v10 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)&keys, (const void **)&values, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (v10)
      {
        CFDictionaryRef v11 = v10;
        io_registry_entry_t v12 = sub_1000212F0();
        if (v12)
        {
          uint64_t v1 = IORegistryEntrySetCFProperties(v12, v11);
          if (v1)
          {
            long long v13 = qword_1000A4880;
            if (os_log_type_enabled((os_log_t)qword_1000A4880, OS_LOG_TYPE_ERROR)) {
              sub_100067B78(v1, v13);
            }
          }
        }
        else
        {
          id v32 = qword_1000A4880;
          if (os_log_type_enabled((os_log_t)qword_1000A4880, OS_LOG_TYPE_ERROR)) {
            sub_100067B40(v32, v33, v34, v35, v36, v37, v38, v39);
          }
        }
      }
      else
      {
        uint64_t v24 = qword_1000A4880;
        uint64_t v1 = 3758097085;
        if (os_log_type_enabled((os_log_t)qword_1000A4880, OS_LOG_TYPE_ERROR)) {
          sub_100067B08(v24, v25, v26, v27, v28, v29, v30, v31);
        }
        CFDictionaryRef v11 = 0;
      }
    }
    else
    {
      CFDictionaryRef v11 = 0;
      uint64_t v1 = 3758097095;
    }
    CFRelease(v3);
    CFRelease(v5);
    if (keys) {
      CFRelease(keys);
    }
    if (values) {
      CFRelease(values);
    }
    if (v11)
    {
      uint64_t v23 = v11;
LABEL_39:
      CFRelease(v23);
    }
  }
  else
  {
    long long v14 = qword_1000A4880;
    uint64_t v1 = 3758097095;
    if (os_log_type_enabled((os_log_t)qword_1000A4880, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "No managed preferences found\n", buf, 2u);
    }
  }
  return v1;
}

__CFDictionary *sub_100029D80(const void *a1)
{
  CFAbsoluteTime at = 0.0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  if (CFEqual(a1, @"sleep") || CFEqual(a1, @"shutdown") || CFEqual(a1, @"restart"))
  {
    CFStringRef v2 = &qword_1000A4888;
  }
  else
  {
    if (!CFEqual(a1, @"poweron") && !CFEqual(a1, @"wake")) {
      return 0;
    }
    CFStringRef v2 = &qword_1000A4890;
  }
  CFDictionaryRef v3 = (const __CFDictionary *)*v2;
  CFStringRef v4 = sub_10002A140((const __CFDictionary *)*v2);
  if (!CFEqual(a1, v4)
    && (!CFEqual(v4, @"wakepoweron") || !CFEqual(a1, @"poweron") && !CFEqual(a1, @"wake")))
  {
    return 0;
  }
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v3);
  if (MutableCopy)
  {
    CFNumberRef v6 = sub_100021390();
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    CFCalendarDecomposeAbsoluteTime(v6, Current, "E", &v29);
    if (v29 == 1) {
      int v8 = 7;
    }
    else {
      int v8 = v29 - 1;
    }
    LODWORD(v29) = v8;
    LODWORD(valuePtr) = 0;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v3, @"weekdays");
    CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
    unsigned int v10 = LODWORD(valuePtr);
    if (LODWORD(valuePtr))
    {
      if (!v3) {
        goto LABEL_14;
      }
      LODWORD(valuePtr) = 0;
      CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(v3, @"weekdays");
      CFNumberGetValue(v11, kCFNumberIntType, &valuePtr);
      if (((LODWORD(valuePtr) >> (v8 - 1)) & 1) == 0) {
        goto LABEL_14;
      }
      uint64_t v33 = 0;
      io_registry_entry_t v12 = sub_100021390();
      CFAbsoluteTime v13 = CFAbsoluteTimeGetCurrent();
      CFCalendarDecomposeAbsoluteTime(v12, v13, "Hm", (char *)&v33 + 4, &v33);
      int v14 = v33 + 60 * HIDWORD(v33);
      LODWORD(valuePtr) = 0;
      CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue(v3, @"time");
      CFNumberGetValue(v15, kCFNumberIntType, &valuePtr);
      uint64_t v16 = 0;
      if (60 * LODWORD(valuePtr) < (60 * v14 + 5))
      {
LABEL_14:
        int v17 = v8;
        do
        {
          int v18 = v17 % 7;
          int v17 = v17 % 7 + 1;
        }
        while (((v10 >> v18) & 1) == 0);
        unsigned int v19 = (v18 - v8 + 8) % 7;
        if (v19) {
          uint64_t v16 = v19;
        }
        else {
          uint64_t v16 = 7;
        }
      }
    }
    else
    {
      uint64_t v16 = 0xFFFFFFFFLL;
    }
    CFAbsoluteTime valuePtr = CFAbsoluteTimeGetCurrent();
    uint64_t v20 = sub_100021390();
    CFCalendarAddComponents(v20, &valuePtr, 0, "d", v16);
    uint64_t v21 = sub_100021390();
    CFCalendarDecomposeAbsoluteTime(v21, valuePtr, "yMd", (char *)&v30 + 4, &v30, (char *)&v29 + 4);
    HIDWORD(v33) = 0;
    CFNumberRef v22 = (const __CFNumber *)CFDictionaryGetValue(v3, @"time");
    CFNumberGetValue(v22, kCFNumberIntType, (char *)&v33 + 4);
    uint64_t v23 = (SHIDWORD(v33) / 60);
    uint64_t v24 = (SHIDWORD(v33) % 60);
    uint64_t v25 = sub_100021390();
    CFCalendarComposeAbsoluteTime(v25, &at, "yMdHms", HIDWORD(v30), v30, HIDWORD(v29), v23, v24, 0);
    CFDateRef v26 = CFDateCreate(0, at);
    if (v26)
    {
      CFDateRef v27 = v26;
      CFDictionarySetValue(MutableCopy, @"time", v26);
      CFDictionarySetValue(MutableCopy, @"scheduledby", @"Repeating");
      CFRelease(v27);
    }
  }
  return MutableCopy;
}

CFStringRef sub_10002A140(const __CFDictionary *a1)
{
  CFStringRef v1 = &stru_100093D08;
  if (a1)
  {
    CFNumberRef Value = CFDictionaryGetValue(a1, @"eventtype");
    CFTypeID TypeID = CFStringGetTypeID();
    if (Value)
    {
      if (CFGetTypeID(Value) == TypeID) {
        CFStringRef v4 = Value;
      }
      else {
        CFStringRef v4 = 0;
      }
    }
    else
    {
      CFStringRef v4 = 0;
    }
    if (v4) {
      return (const __CFString *)v4;
    }
  }
  return v1;
}

void sub_10002A1B0()
{
  SCPreferencesRef v0 = SCPreferencesCreate(0, @"PM-configd-AutoWake", @"com.apple.AutoWake.xml");
  if (v0)
  {
    CFStringRef v1 = v0;
    if (qword_1000A4888) {
      CFRelease((CFTypeRef)qword_1000A4888);
    }
    if (qword_1000A4890) {
      CFRelease((CFTypeRef)qword_1000A4890);
    }
    CFDictionaryRef Value = (const __CFDictionary *)SCPreferencesGetValue(v1, @"RepeatingPowerOff");
    if (Value)
    {
      CFDictionaryRef v3 = Value;
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (CFGetTypeID(v3) == TypeID) {
        qword_1000A4888 = (uint64_t)CFDictionaryCreateMutableCopy(0, 0, v3);
      }
    }
    CFDictionaryRef v5 = (const __CFDictionary *)SCPreferencesGetValue(v1, @"RepeatingPowerOn");
    if (v5)
    {
      CFDictionaryRef v6 = v5;
      CFTypeID v7 = CFDictionaryGetTypeID();
      if (CFGetTypeID(v6) == v7) {
        qword_1000A4890 = (uint64_t)CFDictionaryCreateMutableCopy(0, 0, v6);
      }
    }
    CFRelease(v1);
  }
}

uint64_t sub_10002A2CC(uint64_t a1, _OWORD *a2, const UInt8 *a3, unsigned int a4, uint64_t a5, _DWORD *a6)
{
  uid_t euidp = 0;
  SCPreferencesRef prefs = 0;
  *a6 = 0;
  long long v9 = a2[1];
  *(_OWORD *)atoken.val = *a2;
  *(_OWORD *)&atoken.val[4] = v9;
  audit_token_to_au32(&atoken, 0, &euidp, 0, 0, 0, 0, 0, 0);
  CFDataRef v10 = CFDataCreate(0, a3, a4);
  if (v10)
  {
    CFDataRef v11 = v10;
    CFDictionaryRef v12 = (const __CFDictionary *)CFPropertyListCreateWithData(0, v10, 0, 0, 0);
    if (v12)
    {
      CFDictionaryRef v13 = v12;
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v12, @"RepeatingPowerOff");
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (Value)
      {
        if (CFGetTypeID(Value) == TypeID) {
          CFDictionaryRef v16 = Value;
        }
        else {
          CFDictionaryRef v16 = 0;
        }
      }
      else
      {
        CFDictionaryRef v16 = 0;
      }
      CFDictionaryRef v17 = (const __CFDictionary *)CFDictionaryGetValue(v13, @"RepeatingPowerOn");
      CFTypeID v18 = CFDictionaryGetTypeID();
      if (v17)
      {
        if (CFGetTypeID(v17) == v18) {
          CFDictionaryRef v19 = v17;
        }
        else {
          CFDictionaryRef v19 = 0;
        }
      }
      else
      {
        CFDictionaryRef v19 = 0;
      }
      if sub_10002A5F4(v16) && (sub_10002A5F4(v19))
      {
        int v20 = sub_10002CEA8();
        *a6 = v20;
        if (!v20)
        {
          CFStringRef cf = sub_10002A140((const __CFDictionary *)qword_1000A4888);
          CFRetain(cf);
          CFStringRef v21 = sub_10002A140((const __CFDictionary *)qword_1000A4890);
          CFRetain(v21);
          CFNumberRef v22 = (const void *)qword_1000A4888;
          if (qword_1000A4888)
          {
            CFTypeID v23 = CFDictionaryGetTypeID();
            if (CFGetTypeID(v22) == v23) {
              CFRelease((CFTypeRef)qword_1000A4888);
            }
          }
          uint64_t v24 = (const void *)qword_1000A4890;
          if (qword_1000A4890)
          {
            CFTypeID v25 = CFDictionaryGetTypeID();
            if (CFGetTypeID(v24) == v25) {
              CFRelease((CFTypeRef)qword_1000A4890);
            }
          }
          qword_1000A4890 = 0;
          qword_1000A4888 = 0;
          if (v16) {
            qword_1000A4888 = (uint64_t)CFDictionaryCreateMutableCopy(0, 0, v16);
          }
          if (v19) {
            qword_1000A4890 = (uint64_t)CFDictionaryCreateMutableCopy(0, 0, v19);
          }
          int v26 = sub_10002A758(prefs);
          *a6 = v26;
          if (!v26)
          {
            CFStringRef v27 = sub_10002A140((const __CFDictionary *)qword_1000A4888);
            CFStringRef v28 = sub_10002A140((const __CFDictionary *)qword_1000A4890);
            sub_10002C908(cf);
            sub_10002C908(v21);
            if (!CFEqual(cf, v27)) {
              sub_10002C908(v27);
            }
            if (!CFEqual(v21, v28)) {
              sub_10002C908(v28);
            }
          }
          CFRelease(cf);
          CFRelease(v21);
        }
      }
      else
      {
        syslog(6, "PMCFGD: Invalid formatted repeating power event dictionary\n");
        *a6 = -536870206;
      }
      CFRelease(v11);
      CFRelease(v13);
      CFDataRef v10 = prefs;
    }
    else
    {
      *a6 = -536870206;
      CFRelease(v11);
      CFDataRef v10 = 0;
    }
  }
  else
  {
    *a6 = -536870206;
  }
  nullsub_4(v10, 1);
  vm_deallocate(mach_task_self_, (vm_address_t)a3, a4);
  return 0;
}

uint64_t sub_10002A5F4(const void *a1)
{
  if (!a1) {
    return 1;
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (CFGetTypeID(a1) != TypeID) {
    return 0;
  }
  CFDictionaryRef Value = CFDictionaryGetValue((CFDictionaryRef)a1, @"time");
  CFTypeID v4 = CFNumberGetTypeID();
  if (!Value) {
    return 0;
  }
  if (CFGetTypeID(Value) != v4) {
    return 0;
  }
  CFDictionaryRef v5 = CFDictionaryGetValue((CFDictionaryRef)a1, @"weekdays");
  CFTypeID v6 = CFNumberGetTypeID();
  if (!v5) {
    return 0;
  }
  if (CFGetTypeID(v5) != v6) {
    return 0;
  }
  CFTypeID v7 = CFDictionaryGetValue((CFDictionaryRef)a1, @"eventtype");
  CFTypeID v8 = CFStringGetTypeID();
  if (!v7 || CFGetTypeID(v7) != v8) {
    return 0;
  }
  if (CFEqual(v7, @"sleep")) {
    return 1;
  }
  if (CFEqual(v7, @"shutdown")) {
    return 1;
  }
  if (CFEqual(v7, @"wakepoweron")) {
    return 1;
  }
  if (CFEqual(v7, @"poweron")) {
    return 1;
  }
  if (CFEqual(v7, @"wake")) {
    return 1;
  }
  uint64_t result = CFEqual(v7, @"restart");
  if (result) {
    return 1;
  }
  return result;
}

uint64_t sub_10002A758(SCPreferencesRef prefs)
{
  uint64_t v2 = 3758097084;
  if (qword_1000A4890)
  {
    if (!SCPreferencesSetValue(prefs, @"RepeatingPowerOn", (CFPropertyListRef)qword_1000A4890)) {
      return v2;
    }
  }
  else
  {
    SCPreferencesRemoveValue(prefs, @"RepeatingPowerOn");
  }
  if (qword_1000A4888)
  {
    if (!SCPreferencesSetValue(prefs, @"RepeatingPowerOff", (CFPropertyListRef)qword_1000A4888)) {
      return v2;
    }
  }
  else
  {
    SCPreferencesRemoveValue(prefs, @"RepeatingPowerOff");
  }
  if (SCPreferencesCommitChanges(prefs)) {
    return 0;
  }
  else {
    return 3758097084;
  }
}

uint64_t sub_10002A7FC(uint64_t a1, _OWORD *a2, _DWORD *a3)
{
  SCPreferencesRef prefs = 0;
  uid_t euidp = 0;
  *a3 = 0;
  long long v4 = a2[1];
  *(_OWORD *)atoken.val = *a2;
  *(_OWORD *)&atoken.val[4] = v4;
  audit_token_to_au32(&atoken, 0, &euidp, 0, 0, 0, 0, 0, 0);
  int v5 = sub_10002CEA8();
  *a3 = v5;
  if (!v5)
  {
    CFStringRef v6 = sub_10002A140((const __CFDictionary *)qword_1000A4888);
    CFRetain(v6);
    CFStringRef v7 = sub_10002A140((const __CFDictionary *)qword_1000A4890);
    CFRetain(v7);
    CFTypeID v8 = (const void *)qword_1000A4888;
    if (qword_1000A4888)
    {
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (CFGetTypeID(v8) == TypeID) {
        CFRelease((CFTypeRef)qword_1000A4888);
      }
    }
    CFDataRef v10 = (const void *)qword_1000A4890;
    if (qword_1000A4890)
    {
      CFTypeID v11 = CFDictionaryGetTypeID();
      if (CFGetTypeID(v10) == v11) {
        CFRelease((CFTypeRef)qword_1000A4890);
      }
    }
    qword_1000A4890 = 0;
    qword_1000A4888 = 0;
    int v12 = sub_10002A758(prefs);
    *a3 = v12;
    if (!v12)
    {
      sub_10002C908(v6);
      sub_10002C908(v7);
    }
    CFRelease(v6);
    CFRelease(v7);
  }
  nullsub_4(prefs, 1);
  return 0;
}

__CFDictionary *sub_10002A950()
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFStringRef v1 = (const void *)qword_1000A4890;
  if (qword_1000A4890)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(v1) == TypeID) {
      CFDictionaryAddValue(Mutable, @"RepeatingPowerOn", (const void *)qword_1000A4890);
    }
  }
  CFDictionaryRef v3 = (const void *)qword_1000A4888;
  if (qword_1000A4888)
  {
    CFTypeID v4 = CFDictionaryGetTypeID();
    if (CFGetTypeID(v3) == v4) {
      CFDictionaryAddValue(Mutable, @"RepeatingPowerOff", (const void *)qword_1000A4888);
    }
  }
  return Mutable;
}

void sub_10002AC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002ADBC(id a1, BPSCompletion *a2)
{
  if ([(BPSCompletion *)a2 state])
  {
    if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_ERROR)) {
      sub_10006382C();
    }
  }
}

void sub_10002AE0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  CFTypeID v4 = (void *)qword_1000A34F0;
  if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(void **)(a1 + 32);
    CFStringRef v6 = v4;
    CFStringRef v7 = [v3 eventBody];
    CFTypeID v8 = objc_msgSend(v5, "placeToString:", objc_msgSend(v7, "userSpecificPlaceType"));
    long long v9 = [v3 eventBody];
    CFDataRef v10 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v9 placeType]);
    CFTypeID v11 = [v3 eventBody];
    int v12 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v11 isStarting]);
    int v15 = 134218498;
    CFDictionaryRef v16 = v8;
    __int16 v17 = 2112;
    CFTypeID v18 = v10;
    __int16 v19 = 2112;
    int v20 = v12;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Local location change to %lu, PlaceType %@, starting %@", (uint8_t *)&v15, 0x20u);
  }
  CFDictionaryRef v13 = [v3 eventBody];
  int v14 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v13 userSpecificPlaceType]);
  [*(id *)(a1 + 32) setLocalLOI:v14];
}

void sub_10002B12C(id a1, BPSCompletion *a2)
{
  if ([(BPSCompletion *)a2 state])
  {
    if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_ERROR)) {
      sub_10006382C();
    }
  }
}

void sub_10002B17C(uint64_t a1, void *a2)
{
  id v3 = a2;
  CFTypeID v4 = (void *)qword_1000A34F0;
  if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(void **)(a1 + 32);
    CFStringRef v6 = v4;
    CFStringRef v7 = [v3 eventBody];
    CFTypeID v8 = objc_msgSend(v5, "placeToString:", objc_msgSend(v7, "userSpecificPlaceType"));
    uint64_t v24 = a1;
    long long v9 = [v3 eventBody];
    CFDataRef v10 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v9 placeType]);
    CFTypeID v11 = [v3 eventBody];
    int v12 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v11 starting]);
    CFDictionaryRef v13 = [v3 eventBody];
    int v14 = [v13 deviceUUID];
    *(_DWORD *)buf = 138413058;
    int v26 = v8;
    __int16 v27 = 2112;
    CFStringRef v28 = v10;
    __int16 v29 = 2112;
    uint64_t v30 = v12;
    __int16 v31 = 2112;
    id v32 = v14;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Remote location change to %@, PlaceType %@, starting %@, from device %@", buf, 0x2Au);

    a1 = v24;
  }
  int v15 = [v3 eventBody];
  CFDictionaryRef v16 = [v15 deviceUUID];

  __int16 v17 = [v3 eventBody];
  CFTypeID v18 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v17 userSpecificPlaceType]);

  if (v16 && v18)
  {
    __int16 v19 = [*(id *)(a1 + 32) remoteLOIs];
    uint64_t v20 = [v19 objectForKeyedSubscript:v16];
    if ((void *)v20 == v18)
    {
    }
    else
    {
      CFStringRef v21 = (void *)v20;
      CFNumberRef v22 = [*(id *)(a1 + 32) localLOI];

      if (v18 != v22)
      {
LABEL_10:
        CFTypeID v23 = [*(id *)(a1 + 32) remoteLOIs];
        [v23 setObject:v18 forKeyedSubscript:v16];

        goto LABEL_11;
      }
      __int16 v19 = +[PMSmartPowerNapPredictor sharedInstance];
      [v19 handleRemoteDeviceIsNear];
    }

    goto LABEL_10;
  }
LABEL_11:
}

void sub_10002B4E4(uint64_t a1)
{
  id v2 = *(id *)(a1 + 40);
  if (v2 != [*(id *)(a1 + 32) syncing])
  {
    id v3 = +[BMStreams semanticLocationStream];
    CFTypeID v4 = *(void **)(a1 + 32);
    int v5 = [v3 publisher];
    CFStringRef v6 = [v4 addSPNFiltersToBMDSL:v5];

    uint64_t v7 = *(void *)(a1 + 40);
    if (v7)
    {
      if (v7 == 2)
      {
        __int16 v17 = qword_1000A34F0;
        if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Sync Remote Location With Wake", buf, 2u);
        }
        long long v9 = [*(id *)(a1 + 32) contextSyncClient];
        __int16 v19 = 0;
        unsigned __int8 v10 = [v9 registerForUpdates:v6 withIdentifier:@"com.apple.powerd.biomeRemoteLOI" shouldWake:1 forDeviceTypes:1 withError:&v19];
        CFTypeID v11 = v19;
      }
      else
      {
        if (v7 != 1) {
          goto LABEL_14;
        }
        CFTypeID v8 = qword_1000A34F0;
        if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sync Remote Location Without Wake", buf, 2u);
        }
        long long v9 = [*(id *)(a1 + 32) contextSyncClient];
        uint64_t v20 = 0;
        unsigned __int8 v10 = [v9 registerForUpdates:v6 withIdentifier:@"com.apple.powerd.biomeRemoteLOI" shouldWake:0 forDeviceTypes:1 withError:&v20];
        CFTypeID v11 = v20;
      }
      id v15 = v11;

      if (v10)
      {
LABEL_20:
        [*(id *)(a1 + 32) setSyncing:*(void *)(a1 + 40)];
LABEL_21:

LABEL_22:
        return;
      }
    }
    else
    {
      int v12 = qword_1000A34F0;
      if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Not Syncing Remote Location", buf, 2u);
      }
      CFDictionaryRef v13 = [*(id *)(a1 + 32) contextSyncClient];
      id v18 = 0;
      unsigned int v14 = [v13 unregisterForUpdates:v6 withIdentifier:@"com.apple.powerd.biomeRemoteLOI" forDeviceTypes:1 withError:&v18];
      id v15 = v18;

      if (v14) {
        goto LABEL_20;
      }
    }
    if (v15)
    {
      CFDictionaryRef v16 = qword_1000A34F0;
      if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_ERROR)) {
        sub_100064B20((uint64_t)v15, v16);
      }
      goto LABEL_21;
    }
LABEL_14:
    if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_ERROR)) {
      sub_100067BF0();
    }
    goto LABEL_22;
  }
}

void sub_10002B9C8(id a1)
{
  if (!dlopen_preflight("/System/Library/PrivateFrameworks/ContextSync.framework/ContextSync"))
  {
    if (os_log_type_enabled((os_log_t)qword_1000A34F0, OS_LOG_TYPE_ERROR)) {
      sub_100067C24();
    }
    byte_1000A4898 = 1;
  }
}

Class sub_10002BA28(uint64_t a1)
{
  v4[0] = 0;
  if (!qword_1000A48B0)
  {
    v4[1] = _NSConcreteStackBlock;
    _DWORD v4[2] = 3221225472;
    v4[3] = sub_10002BB6C;
    void v4[4] = &unk_100091490;
    v4[5] = v4;
    long long v5 = off_100092070;
    uint64_t v6 = 0;
    qword_1000A48B0 = _sl_dlopen();
    id v2 = (void *)v4[0];
    if (!qword_1000A48B0)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("ContextSyncClient");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    id v2 = (void *)sub_100064BCC();
LABEL_8:
    free(v2);
  }
  qword_1000A48A8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_10002BB6C()
{
  uint64_t result = _sl_dlopen();
  qword_1000A48B0 = result;
  return result;
}

uint64_t sub_10002BBE0()
{
  if (!qword_1000A48B8)
  {
    uint64_t v1 = MGCopyAnswer();
    qword_1000A48B8 = v1;
    if (v1)
    {
      uint64_t v2 = v1;
      if (os_log_type_enabled(0, OS_LOG_TYPE_DEFAULT))
      {
        int v3 = 138412290;
        uint64_t v4 = v2;
        _os_log_impl((void *)&_mh_execute_header, 0, OS_LOG_TYPE_DEFAULT, "Device class: %@", (uint8_t *)&v3, 0xCu);
      }
    }
    else if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      sub_100067C58();
    }
  }
  return qword_1000A48B8;
}

uint64_t sub_10002BCB8()
{
  uint64_t result = sub_10002BBE0();
  if (result)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10002BD58;
    block[3] = &unk_100091DC8;
    void block[4] = result;
    if (qword_1000A48C0 != -1) {
      dispatch_once(&qword_1000A48C0, block);
    }
    return byte_1000A48C8 != 0;
  }
  return result;
}

id sub_10002BD58(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isEqualToString:@"iPhone"];
  byte_1000A48C8 = (char)result;
  return result;
}

uint64_t sub_10002BD84()
{
  uint64_t result = sub_10002BBE0();
  if (result)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10002BE24;
    block[3] = &unk_100091DC8;
    void block[4] = result;
    if (qword_1000A48D0 != -1) {
      dispatch_once(&qword_1000A48D0, block);
    }
    return byte_1000A48D8 != 0;
  }
  return result;
}

id sub_10002BE24(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isEqualToString:@"iPad"];
  byte_1000A48D8 = (char)result;
  return result;
}

uint64_t sub_10002BE50()
{
  uint64_t result = sub_10002BBE0();
  if (result)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10002BEF0;
    block[3] = &unk_100091DC8;
    void block[4] = result;
    if (qword_1000A48E0 != -1) {
      dispatch_once(&qword_1000A48E0, block);
    }
    return byte_1000A48E8 != 0;
  }
  return result;
}

id sub_10002BEF0(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isEqualToString:@"Watch"];
  byte_1000A48E8 = (char)result;
  return result;
}

uint64_t sub_10002BF1C()
{
  os_log_t v0 = os_log_create("com.apple.powerd", "wakeRequests");
  uint64_t v1 = 0;
  qword_1000A3510 = (uint64_t)v0;
  do
  {
    uint64_t v2 = *(_UNKNOWN **)((char *)&off_1000A2F08 + v1);
    v2[2] = 0uLL;
    v2[3] = 0uLL;
    *uint64_t v2 = 0uLL;
    v2[1] = 0uLL;
    v1 += 8;
  }
  while (v1 != 48);
  qword_1000A35F0 = @"wake";
  qword_1000A3630 = @"poweron";
  qword_1000A3670 = @"wakepoweron";
  qword_1000A3530 = @"sleep";
  qword_1000A3570 = @"shutdown";
  qword_1000A35B0 = @"restart";
  qword_1000A35F8 = (uint64_t)&unk_1000A3658;
  unk_1000A3600 = nullsub_3;
  qword_1000A3540 = (uint64_t)sub_10002C188;
  qword_1000A3580 = (uint64_t)j_nullsub_4;
  qword_1000A35C0 = (uint64_t)j_nullsub_4_0;
  qword_1000A3648 = (uint64_t)sub_10002C2E4;
  unk_1000A3650 = sub_10002C2E4;
  qword_1000A3638 = (uint64_t)&unk_1000A3658;
  sub_10002A1B0();
  for (uint64_t i = 0; i != 6; ++i)
  {
    uint64_t v4 = (uint64_t)*(&off_1000A2F08 + i);
    if (v4)
    {
      sub_10002C31C((uint64_t *)*(&off_1000A2F08 + i));
      if (*(void *)v4)
      {
        CFIndex Count = CFArrayGetCount(*(CFArrayRef *)v4);
        if (Count >= 1)
        {
          unint64_t v6 = Count + 1;
          do
          {
            CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)v4, v6 - 2);
            CFDictionaryRef Value = CFDictionaryGetValue(ValueAtIndex, @"scheduledby");
            if (CFEqual(Value, @"Repeating"))
            {
              long long v9 = *(const void **)(v4 + 8);
              if (v9 && CFEqual(ValueAtIndex, v9))
              {
                CFRelease(*(CFTypeRef *)(v4 + 8));
                *(void *)(v4 + 8) = 0;
              }
              CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)v4, v6 - 2);
              --dword_1000A48F0;
            }
            --v6;
          }
          while (v6 > 1);
        }
      }
      if (!CFEqual(*(CFTypeRef *)(v4 + 24), @"wakepoweron")) {
        sub_10002C4A4(v4);
      }
    }
  }
  int v11 = 0;
  uint64_t result = sub_10005EBF0("pm-min-schedule-time", &v11);
  if (!result && (v11 & 0x80000000) == 0 && (double)v11 / 10.0 < *(double *)&qword_1000A2F38) {
    *(double *)&qword_1000A2F38 = (double)v11 / 10.0;
  }
  return result;
}

void sub_10002C188(const __CFDictionary *a1)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v3 = CFDateCreate(0, Current);
  CFDateRef v4 = (const __CFDate *)sub_10002CE58(a1);
  CFAbsoluteTime AbsoluteTime = CFDateGetAbsoluteTime(v4);
  CFDateRef v6 = CFDateCreate(0, AbsoluteTime + 5.0);
  if (CFDateCompare(v6, v3, 0) == kCFCompareLessThan)
  {
    long long v9 = qword_1000A3510;
    if (os_log_type_enabled((os_log_t)qword_1000A3510, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138412546;
      CFDateRef v11 = v6;
      __int16 v12 = 2112;
      CFDateRef v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "timer fired for an event which is on %@. Time now is %@.", (uint8_t *)&v10, 0x16u);
    }
    CFRelease(v3);
    CFRelease(v6);
  }
  else
  {
    CFRelease(v3);
    CFRelease(v6);
    nullsub_4(v7, v8);
  }
}

uint64_t sub_10002C2E4(const __CFDictionary *a1)
{
  if (a1)
  {
    a1 = (const __CFDictionary *)sub_10002CE58(a1);
    uint64_t v1 = vars8;
  }
  return IOPMSchedulePowerEvent(a1, 0, @"PowerOnImmediate");
}

void sub_10002C31C(uint64_t *a1)
{
  if (a1)
  {
    if (((a1 == &qword_1000A35D8) & byte_1000A4900) == 0)
    {
      if (a1[3])
      {
        CFArrayRef v2 = (const __CFArray *)*a1;
        if (*a1)
        {
          if (CFArrayGetCount(v2))
          {
            CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
            CFDateRef v4 = CFDateCreate(0, Current);
            if (CFArrayGetCount((CFArrayRef)*a1) >= 1)
            {
              do
              {
                CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)*a1, 0);
                if (sub_10002D9E8(ValueAtIndex, v4)) {
                  break;
                }
                CFDateRef v6 = CFArrayGetValueAtIndex((CFArrayRef)*a1, 0);
                uint64_t v7 = qword_1000A3510;
                if (os_log_type_enabled((os_log_t)qword_1000A3510, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 138543362;
                  long long v9 = v6;
                  _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Purged past event: %{public}@\n", buf, 0xCu);
                }
                CFArrayRemoveValueAtIndex((CFMutableArrayRef)*a1, 0);
                --dword_1000A48F0;
              }
              while (CFArrayGetCount((CFArrayRef)*a1) > 0);
            }
            CFRelease(v4);
          }
        }
      }
    }
  }
}

void sub_10002C4A4(uint64_t a1)
{
  CFArrayRef v2 = *(NSObject **)(a1 + 16);
  if (v2)
  {
    dispatch_release(v2);
    *(void *)(a1 + 16) = 0;
  }
  CFDateRef v3 = *(CFArrayRef **)(a1 + 32);
  if (v3)
  {
    CFDateRef v4 = sub_10002CD48((const __CFArray **)a1, v3);
    if (!v4) {
      goto LABEL_13;
    }
  }
  else
  {
    CFDateRef v4 = *(__CFArray **)a1;
    if (!*(void *)a1)
    {
LABEL_13:
      CFDateRef v11 = 0;
      goto LABEL_14;
    }
  }
  CFIndex Count = CFArrayGetCount(v4);
  if (!Count) {
    goto LABEL_13;
  }
  uint64_t v6 = Count;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v8 = CFDateCreate(0, Current + *(double *)&qword_1000A2F38);
  if (v6 < 1)
  {
LABEL_12:
    CFRelease(v8);
    goto LABEL_13;
  }
  CFIndex v9 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v4, v9);
    if (sub_10002D9E8(ValueAtIndex, v8)) {
      break;
    }
    if (v6 == ++v9) {
      goto LABEL_12;
    }
  }
  CFRelease(v8);
  CFDateRef v11 = CFArrayGetValueAtIndex(v4, v9);
  CFRetain(v11);
LABEL_14:
  __int16 v12 = sub_100029D80(*(const void **)(a1 + 24));
  if (!v12)
  {
    CFDictionaryRef v13 = (const __CFDictionary *)v11;
    goto LABEL_19;
  }
  CFDictionaryRef v13 = v12;
  if ((unint64_t)(sub_10002DA84(v12, v11) + 1) > 1)
  {
    CFDictionaryRef v14 = v13;
    CFDictionaryRef v13 = (const __CFDictionary *)v11;
  }
  else
  {
    CFDictionaryRef v14 = (const __CFDictionary *)v11;
    if (!v11)
    {
LABEL_19:
      if (!v4) {
        goto LABEL_25;
      }
      goto LABEL_23;
    }
  }
  CFRelease(v14);
  if (!v4) {
    goto LABEL_25;
  }
LABEL_23:
  if (*(void *)(a1 + 32)) {
    CFRelease(v4);
  }
LABEL_25:
  if (v13)
  {
    id v15 = *(void (**)(const __CFDictionary *))(a1 + 48);
    if (v15) {
      v15(v13);
    }
    __int16 v17 = (uint64_t *)(a1 + 8);
    CFDictionaryRef v16 = *(const void **)(a1 + 8);
    if (v16) {
      CFRelease(v16);
    }
    *__int16 v17 = (uint64_t)v13;
    CFDateRef v18 = (const __CFDate *)sub_10002CE58(v13);
    if (v18)
    {
      CFDateRef v19 = v18;
      CFAbsoluteTime v20 = CFAbsoluteTimeGetCurrent();
      CFDateRef v21 = CFDateCreate(0, v20);
      if (v21)
      {
        CFDateRef v22 = v21;
        double TimeIntervalSinceDate = CFDateGetTimeIntervalSinceDate(v19, v21);
        if (TimeIntervalSinceDate <= 0.001 || TimeIntervalSinceDate >= 9223372040.0)
        {
          uint64_t v37 = qword_1000A3510;
          if (os_log_type_enabled((os_log_t)qword_1000A3510, OS_LOG_TYPE_ERROR)) {
            sub_100067D0C(v17, v37);
          }
        }
        else
        {
          uint64_t v24 = sub_10005C968();
          CFTypeID v25 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v24);
          *(void *)(a1 + 16) = v25;
          handler[0] = _NSConcreteStackBlock;
          handler[1] = 0x40000000;
          handler[2] = sub_10002D8F8;
          handler[3] = &unk_1000920B0;
          void handler[4] = a1;
          dispatch_source_set_event_handler(v25, handler);
          int v26 = *(NSObject **)(a1 + 16);
          if (v26)
          {
            dispatch_resume(v26);
            __int16 v27 = *(NSObject **)(a1 + 16);
            dispatch_time_t v28 = dispatch_time(0xFFFFFFFFFFFFFFFELL, (uint64_t)(TimeIntervalSinceDate * 1000000000.0));
            dispatch_source_set_timer(v27, v28, 0xFFFFFFFFFFFFFFFFLL, 0);
            __int16 v29 = qword_1000A3510;
            if (os_log_type_enabled((os_log_t)qword_1000A3510, OS_LOG_TYPE_DEBUG)) {
              sub_100067C9C((uint64_t)v17, v29, v30, v31, v32, v33, v34, v35);
            }
          }
        }
        CFRelease(v22);
      }
    }
  }
  else
  {
    uint64_t v36 = *(void (**)(void))(a1 + 56);
    if (v36)
    {
      v36(0);
    }
  }
}

void sub_10002C7B4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  if (v1 & 2) != 0 && (*(unsigned char *)(a1 + 16) & 1) == 0 && (*(unsigned char *)(a1 + 20))
  {
    CFDateRef v3 = qword_1000A3510;
    if (os_log_type_enabled((os_log_t)qword_1000A3510, OS_LOG_TYPE_DEBUG)) {
      sub_100067DCC(v3);
    }
    for (uint64_t i = 0; i != 48; i += 8)
    {
      long long v5 = *(uint64_t **)((char *)&off_1000A2F08 + i);
      if (v5)
      {
        sub_10002C31C(v5);
        if (!CFEqual((*(CFTypeRef **)((char *)&off_1000A2F08 + i))[3], @"wakepoweron")) {
          sub_10002C4A4(*(uint64_t *)((char *)&off_1000A2F08 + i));
        }
      }
    }
  }
  else if ((v1 & 1) != 0 && (*(unsigned char *)(a1 + 16) & 1) != 0 && (*(unsigned char *)(a1 + 20) & 1) == 0)
  {
    CFArrayRef v2 = qword_1000A3510;
    if (os_log_type_enabled((os_log_t)qword_1000A3510, OS_LOG_TYPE_DEBUG)) {
      sub_100067D88(v2);
    }
    sub_10002C4A4((uint64_t)&qword_1000A35D8);
  }
}

void sub_10002C8A4()
{
  for (uint64_t i = 0; i != 48; i += 8)
  {
    uint64_t v1 = *(uint64_t *)((char *)&off_1000A2F08 + i);
    if (v1)
    {
      if (!CFEqual(*(CFTypeRef *)(v1 + 24), @"wakepoweron")) {
        sub_10002C4A4(v1);
      }
    }
  }
}

void sub_10002C908(const void *a1)
{
  if (CFEqual(a1, @"wakepoweron"))
  {
    sub_10002C4A4((uint64_t)&qword_1000A35D8);
    CFArrayRef v2 = &unk_1000A3618;
  }
  else
  {
    uint64_t v3 = 0;
    while (!CFEqual(a1, (*(CFTypeRef **)((char *)&off_1000A2F08 + v3))[3]))
    {
      v3 += 8;
      if (v3 == 48) {
        return;
      }
    }
    CFArrayRef v2 = *(_UNKNOWN **)((char *)&off_1000A2F08 + v3);
  }

  sub_10002C4A4((uint64_t)v2);
}

double sub_10002C9A8(const __CFDictionary *a1)
{
  int valuePtr = 0;
  CFDateRef Value = (const __CFDate *)CFDictionaryGetValue(a1, @"time");
  CFTypeID TypeID = CFDateGetTypeID();
  double v4 = 0.0;
  if (Value && CFGetTypeID(Value) == TypeID)
  {
    double AbsoluteTime = CFDateGetAbsoluteTime(Value);
    CFNumberRef v6 = (const __CFNumber *)CFDictionaryGetValue(a1, @"leeway");
    CFTypeID v7 = CFNumberGetTypeID();
    double v8 = 0.0;
    if (v6 && CFGetTypeID(v6) == v7)
    {
      CFNumberGetValue(v6, kCFNumberIntType, &valuePtr);
      double v8 = (double)(valuePtr & ~(valuePtr >> 31));
    }
    return AbsoluteTime + v8;
  }
  return v4;
}

CFDictionaryRef sub_10002CA78()
{
  CFDictionaryRef v0 = sub_10002CB0C((uint64_t)&unk_1000A3558);
  CFDictionaryRef v1 = sub_10002CB0C((uint64_t)&unk_1000A3598);
  CFDictionaryRef v2 = v1;
  if (v0) {
    BOOL v3 = v1 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    if (!v0) {
      return v1;
    }
  }
  else
  {
    double v4 = sub_10002C9A8(v0);
    if (v4 >= sub_10002C9A8(v2))
    {
      CFRelease(v0);
      return v2;
    }
    else
    {
      CFRelease(v2);
    }
  }
  return v0;
}

CFDictionaryRef sub_10002CB0C(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  BOOL v3 = *(CFArrayRef **)(a1 + 32);
  if (v3) {
    double v4 = sub_10002CD48((const __CFArray **)a1, v3);
  }
  else {
    double v4 = *(__CFArray **)a1;
  }
  CFTypeID TypeID = CFArrayGetTypeID();
  if (!v4) {
    return 0;
  }
  if (CFGetTypeID(v4) == TypeID && (CFIndex Count = CFArrayGetCount(v4), Count >= 1))
  {
    CFIndex v7 = Count;
    CFDictionaryRef Copy = 0;
    CFIndex v9 = 0;
    double v10 = 0.0;
    do
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v4, v9);
      CFTypeID v12 = CFDictionaryGetTypeID();
      if (ValueAtIndex && CFGetTypeID(ValueAtIndex) == v12)
      {
        CFDictionaryRef v13 = qword_1000A3510;
        if (os_log_type_enabled((os_log_t)qword_1000A3510, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138543362;
          CFDictionaryRef v19 = ValueAtIndex;
          _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Active wake request: %{public}@\n", buf, 0xCu);
        }
        double v14 = sub_10002C9A8(ValueAtIndex);
        if (v14 != 0.0 && v14 >= Current + *(double *)&qword_1000A2F38)
        {
          BOOL v15 = v10 == 0.0;
          if (v14 < v10) {
            BOOL v15 = 1;
          }
          if (v15)
          {
            CFDictionaryRef Copy = ValueAtIndex;
            double v10 = v14;
          }
        }
      }
      ++v9;
    }
    while (v7 != v9);
    if (Copy)
    {
      CFDictionaryRef Copy = CFDictionaryCreateCopy(0, Copy);
      __int16 v17 = qword_1000A3510;
      if (os_log_type_enabled((os_log_t)qword_1000A3510, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543362;
        CFDictionaryRef v19 = Copy;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Selected RTC wake request: %{public}@\n", buf, 0xCu);
      }
    }
  }
  else
  {
    CFDictionaryRef Copy = 0;
  }
  if (*(void *)(a1 + 32)) {
    CFRelease(v4);
  }
  return Copy;
}

CFDictionaryRef sub_10002CD3C()
{
  return sub_10002CB0C((uint64_t)&qword_1000A35D8);
}

__CFArray *sub_10002CD48(const __CFArray **a1, CFArrayRef *a2)
{
  if (!a1) {
    return 0;
  }
  CFArrayRef v3 = *a1;
  CFArrayRef v4 = *a2;
  if (!v3)
  {
    if (v4) {
      goto LABEL_9;
    }
    return 0;
  }
  if (v4)
  {
    CFMutableDictionaryRef MutableCopy = CFArrayCreateMutableCopy(0, 0, v3);
    v9.length = CFArrayGetCount(*a2);
    v9.location = 0;
    CFArrayAppendArray(MutableCopy, *a2, v9);
    v8.length = CFArrayGetCount(MutableCopy);
    v8.location = 0;
    CFArraySortValues(MutableCopy, v8, (CFComparatorFunction)sub_10002DA84, 0);
    return MutableCopy;
  }
  CFArrayRef v4 = v3;
LABEL_9:

  return (__CFArray *)CFRetain(v4);
}

void sub_10002CE04()
{
  CFDictionaryRef v0 = sub_10002CB0C((uint64_t)&qword_1000A35D8);
  if (v0)
  {
    CFDictionaryRef v1 = v0;
    sub_10002C9A8(v0);
    CFRelease(v1);
  }
}

const void *sub_10002CE58(const __CFDictionary *a1)
{
  CFDateRef Value = CFDictionaryGetValue(a1, @"time");
  CFTypeID TypeID = CFDateGetTypeID();
  if (!Value) {
    return 0;
  }
  if (CFGetTypeID(Value) == TypeID) {
    return Value;
  }
  return 0;
}

uint64_t sub_10002CEA8()
{
  return 0;
}

uint64_t sub_10002CEB4(uint64_t a1, _OWORD *a2, const UInt8 *a3, unsigned int a4, int a5, int *a6)
{
  pid_t pidp = 0;
  uid_t euidp = 0;
  *a6 = 0;
  long long v11 = a2[1];
  *(_OWORD *)atoken.val = *a2;
  *(_OWORD *)&atoken.val[4] = v11;
  audit_token_to_au32(&atoken, 0, &euidp, 0, 0, 0, &pidp, 0, 0);
  long long v12 = a2[1];
  *(_OWORD *)atoken.val = *a2;
  *(_OWORD *)&atoken.val[4] = v12;
  if (sub_10005C9D0(&atoken, @"com.apple.iokit.wakerequest")) {
    uid_t euidp = 0;
  }
  if (dword_1000A48F0 >= 0x3E8)
  {
    *a6 = -536870181;
    goto LABEL_37;
  }
  if (a5 != 2)
  {
    CFDataRef v20 = CFDataCreate(0, a3, a4);
    if (v20 && (CFDictionaryRef v21 = (const __CFDictionary *)CFPropertyListCreateWithData(0, v20, 1uLL, 0, 0)) != 0)
    {
      CFDateRef v22 = v21;
      CFDateRef Value = CFDictionaryGetValue(v21, @"scheduledby");
      if (!Value
        || (uint64_t v24 = Value, TypeID = CFStringGetTypeID(), CFGetTypeID(v24) != TypeID)
        || CFEqual(v24, &stru_100093D08))
      {
        if (proc_name(pidp, &atoken, 0x400u))
        {
          CFStringRef v26 = CFStringCreateWithCString(0, (const char *)&atoken, 0);
          if (v26)
          {
            CFStringRef v27 = v26;
            CFDictionarySetValue(v22, @"scheduledby", v26);
            CFRelease(v27);
          }
        }
      }
      CFNumberRef v28 = CFNumberCreate(0, kCFNumberIntType, &pidp);
      if (v28)
      {
        CFNumberRef v29 = v28;
        CFDictionarySetValue(v22, @"appPID", v28);
        CFRelease(v29);
      }
      uint64_t v30 = CFDictionaryGetValue(v22, @"eventtype");
      if (!v30)
      {
        *a6 = -536870206;
        goto LABEL_52;
      }
      uint64_t v31 = v30;
      uint64_t v32 = 0;
      while (!CFEqual(v31, (*(CFTypeRef **)((char *)&off_1000A2F08 + v32))[3]))
      {
        v32 += 8;
        if (v32 == 48) {
          goto LABEL_33;
        }
      }
      *a6 = 0;
      if (a5)
      {
        if (a5 == 1)
        {
          sub_10002D378(*(uint64_t **)((char *)&off_1000A2F08 + v32), v22);
          *a6 = 0;
          uint64_t v35 = qword_1000A3510;
          if (os_log_type_enabled((os_log_t)qword_1000A3510, OS_LOG_TYPE_DEBUG)) {
            sub_100067E10((uint64_t)v22, v35, v36, v37, v38, v39, v40, v41);
          }
          if (CFDictionaryGetValue(v22, @"UserVisible") == kCFBooleanTrue) {
            notify_post("com.apple.system.powermanagement.uservisiblepowerevent");
          }
        }
        goto LABEL_48;
      }
      if (sub_10002D43C(*(CFArrayRef **)((char *)&off_1000A2F08 + v32), v22))
      {
        NSFileProtectionType v42 = qword_1000A3510;
        if (os_log_type_enabled((os_log_t)qword_1000A3510, OS_LOG_TYPE_DEBUG)) {
          sub_100067E7C((uint64_t)v22, v42, v43, v44, v45, v46, v47, v48);
        }
LABEL_48:
        if (CFEqual(v31, @"wakepoweron"))
        {
          sub_10002C4A4((uint64_t)&qword_1000A35D8);
          uint32_t v49 = &unk_1000A3618;
        }
        else
        {
          uint32_t v49 = *(_UNKNOWN **)((char *)&off_1000A2F08 + v32);
        }
        sub_10002C4A4((uint64_t)v49);
        if (v20)
        {
LABEL_52:
          CFRelease(v20);
          if (!v22) {
            goto LABEL_37;
          }
          goto LABEL_36;
        }
LABEL_35:
        if (!v22) {
          goto LABEL_37;
        }
LABEL_36:
        CFRelease(v22);
        goto LABEL_37;
      }
      int v33 = -536870160;
    }
    else
    {
      CFDateRef v22 = 0;
LABEL_33:
      int v33 = -536870206;
    }
    *a6 = v33;
    if (v20) {
      goto LABEL_52;
    }
    goto LABEL_35;
  }
  long long v13 = a2[1];
  *(_OWORD *)atoken.val = *a2;
  *(_OWORD *)&atoken.val[4] = v13;
  uid_t v52 = 0;
  audit_token_to_au32(&atoken, 0, &v52, 0, 0, 0, 0, 0, 0);
  for (uint64_t i = 0; i != 48; i += 8)
  {
    uint64_t v15 = *(uint64_t *)((char *)&off_1000A2F08 + i);
    CFDictionaryRef v16 = *(__CFArray **)v15;
    if (*(void *)v15)
    {
      __int16 v17 = *(const void **)(v15 + 8);
      if (v17)
      {
        CFRelease(v17);
        (*(void **)((char *)&off_1000A2F08 + i))[1] = 0;
        CFDictionaryRef v16 = **(__CFArray ***)((char *)&off_1000A2F08 + i);
      }
      CFArrayRemoveAllValues(v16);
      **(void **)((char *)&off_1000A2F08 + i) = 0;
      if (CFEqual((*(CFTypeRef **)((char *)&off_1000A2F08 + i))[3], @"wakepoweron"))
      {
        sub_10002C4A4((uint64_t)&qword_1000A35D8);
        CFDateRef v18 = &unk_1000A3618;
      }
      else
      {
        CFDateRef v18 = *(_UNKNOWN **)((char *)&off_1000A2F08 + i);
      }
      sub_10002C4A4((uint64_t)v18);
    }
  }
  dword_1000A48F0 = 0;
  *a6 = 0;
  CFDictionaryRef v19 = qword_1000A3510;
  if (os_log_type_enabled((os_log_t)qword_1000A3510, OS_LOG_TYPE_DEFAULT))
  {
    atoken.val[0] = 67109120;
    atoken.val[1] = pidp;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Removed all wake request based on request from pid %d\n", (uint8_t *)&atoken, 8u);
  }
LABEL_37:
  vm_deallocate(mach_task_self_, (vm_address_t)a3, a4);
  return 0;
}

void sub_10002D378(uint64_t *a1, const void *a2)
{
  CFArrayRef v4 = (const void *)*a1;
  CFTypeID TypeID = CFArrayGetTypeID();
  if (v4 && CFGetTypeID(v4) == TypeID)
  {
    sub_10002C31C(a1);
    CFArrayAppendValue((CFMutableArrayRef)*a1, a2);
    CFNumberRef v6 = (__CFArray *)*a1;
    v8.length = CFArrayGetCount((CFArrayRef)*a1);
    v8.location = 0;
    CFArraySortValues(v6, v8, (CFComparatorFunction)sub_10002DA84, 0);
  }
  else
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    *a1 = (uint64_t)Mutable;
    CFArrayAppendValue(Mutable, a2);
  }
  ++dword_1000A48F0;
}

uint64_t sub_10002D43C(CFArrayRef *a1, const void *a2)
{
  CFArrayRef v2 = *a1;
  if (!*a1) {
    return 0;
  }
  CFTypeID TypeID = CFArrayGetTypeID();
  if (CFGetTypeID(v2) != TypeID) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(*a1);
  if (Count < 1) {
    return 0;
  }
  CFIndex v7 = Count;
  CFIndex v8 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*a1, v8);
    CFComparisonResult v10 = sub_10002DA84(a2, ValueAtIndex);
    if (v10)
    {
      if (v10 == kCFCompareLessThan) {
        return 0;
      }
      goto LABEL_9;
    }
    CFDateRef Value = CFDictionaryGetValue((CFDictionaryRef)a2, @"scheduledby");
    long long v12 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"scheduledby");
    if (CFEqual(Value, v12)) {
      break;
    }
LABEL_9:
    if (v7 == ++v8) {
      return 0;
    }
  }
  for (uint64_t i = 0; i != 48; i += 8)
  {
    uint64_t v15 = (const void *)(*(void **)((char *)&off_1000A2F08 + i))[1];
    if (v15 && CFEqual(ValueAtIndex, v15))
    {
      CFRelease((*(CFTypeRef **)((char *)&off_1000A2F08 + i))[1]);
      (*(void **)((char *)&off_1000A2F08 + i))[1] = 0;
    }
  }
  if (CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"UserVisible") == kCFBooleanTrue) {
    notify_post("com.apple.system.powermanagement.uservisiblepowerevent");
  }
  CFArrayRemoveValueAtIndex(*a1, v8);
  --dword_1000A48F0;
  return 1;
}

__CFArray *sub_10002D5B8()
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  for (uint64_t i = 0; i != 48; i += 8)
  {
    CFArrayRef v2 = *(CFArrayRef **)((char *)&off_1000A2F08 + i);
    CFArrayRef v3 = *v2;
    if (*v2)
    {
      CFTypeID TypeID = CFArrayGetTypeID();
      if (CFGetTypeID(v3) == TypeID)
      {
        v6.length = CFArrayGetCount(*v2);
        v6.location = 0;
        CFArrayAppendArray(Mutable, *v2, v6);
      }
    }
  }
  return Mutable;
}

uint64_t sub_10002D658(unsigned int a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if ((a1 & 4) != 0)
  {
    sub_10002C31C(&qword_1000A35D8);
    byte_1000A4900 = 1;
    qword_1000A48F8 = *(void *)&Current;
    double v3 = Current;
  }
  else
  {
    double v3 = *(double *)&qword_1000A48F8;
  }
  int v28 = 0;
  if (a1) {
    double v4 = Current + 15.0;
  }
  else {
    double v4 = Current;
  }
  if (((v3 != 0.0) & (a1 >> 1)) != 0) {
    double v5 = v3;
  }
  else {
    double v5 = Current;
  }
  if (v4 == v5) {
    goto LABEL_23;
  }
  CFDateRef v6 = (CFDateRef)qword_1000A35D8;
  CFTypeID TypeID = CFArrayGetTypeID();
  if (!v6) {
    goto LABEL_26;
  }
  if (CFGetTypeID(v6) != TypeID || (CFIndex Count = CFArrayGetCount((CFArrayRef)qword_1000A35D8), Count < 1))
  {
LABEL_23:
    uint64_t v15 = 0;
    CFDateRef v6 = 0;
    if ((a1 & 8) == 0) {
      goto LABEL_28;
    }
LABEL_27:
    byte_1000A4900 = 0;
    qword_1000A48F8 = 0;
    sub_10002C31C(&qword_1000A35D8);
    goto LABEL_28;
  }
  CFIndex v9 = Count;
  CFIndex v10 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000A35D8, v10);
    CFTypeID v12 = CFDictionaryGetTypeID();
    if (ValueAtIndex)
    {
      if (CFGetTypeID(ValueAtIndex) == v12)
      {
        double v13 = sub_10002C9A8(ValueAtIndex);
        if (v13 != 0.0 && v13 >= v5) {
          break;
        }
      }
    }
    if (v9 == ++v10) {
      goto LABEL_23;
    }
  }
  double v16 = v13;
  CFDateRef v6 = CFDateCreate(0, v13);
  if (v16 > v4)
  {
LABEL_26:
    uint64_t v15 = 0;
    if ((a1 & 8) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  CFTypeID v18 = CFDictionaryGetTypeID();
  if (CFGetTypeID(ValueAtIndex) == v18)
  {
    CFTypeID v19 = CFDateGetTypeID();
    if (v6)
    {
      if (CFGetTypeID(v6) == v19)
      {
        CFDateRef Value = CFDictionaryGetValue(ValueAtIndex, @"scheduledby");
        CFTypeID v21 = CFStringGetTypeID();
        if (Value)
        {
          if (CFGetTypeID(Value) == v21) {
            CFDateRef v22 = Value;
          }
          else {
            CFDateRef v22 = 0;
          }
        }
        else
        {
          CFDateRef v22 = 0;
        }
        CFTypeID v23 = CFDateFormatterCreate(0, 0, kCFDateFormatterShortStyle, kCFDateFormatterMediumStyle);
        CFStringRef StringWithDate = CFDateFormatterCreateStringWithDate(0, v23, v6);
        CFStringRef v25 = CFStringCreateWithFormat(0, 0, @"Delay sleep for wake request \"%@\" at \"%@\"", v22, StringWithDate);
        unsigned int v26 = vcvtpd_s64_f64(v16 - Current);
        if (v16 - Current <= 1.0) {
          int v27 = 1;
        }
        else {
          int v27 = v26;
        }
        sub_10004A0C8(@"PreventUserIdleSystemSleep", v25, v27, &v28);
        if (v23) {
          CFRelease(v23);
        }
        if (StringWithDate) {
          CFRelease(StringWithDate);
        }
        if (v25) {
          CFRelease(v25);
        }
      }
    }
  }
  uint64_t v15 = 1;
  if ((a1 & 8) != 0) {
    goto LABEL_27;
  }
LABEL_28:
  if (v6) {
    CFRelease(v6);
  }
  return v15;
}

uint64_t sub_10002D8F8(uint64_t result)
{
  CFDictionaryRef v1 = *(void **)(result + 32);
  if (v1)
  {
    CFArrayRef v2 = v1[2];
    if (v2)
    {
      dispatch_release(v2);
      v1[2] = 0;
    }
    double v3 = (void (*)(void))v1[5];
    if (v3) {
      v3(v1[1]);
    }
    double v4 = (const void *)v1[1];
    if (v4)
    {
      double v5 = qword_1000A3510;
      if (os_log_type_enabled((os_log_t)qword_1000A3510, OS_LOG_TYPE_DEBUG))
      {
        int v6 = 138543362;
        CFIndex v7 = v4;
        _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "AutoWakeScheduler: Handled timer expiration for: %{public}@\n", (uint8_t *)&v6, 0xCu);
        double v4 = (const void *)v1[1];
      }
      CFRelease(v4);
    }
    v1[1] = 0;
    return sub_10002C4A4(v1);
  }
  return result;
}

BOOL sub_10002D9E8(const __CFDictionary *a1, const __CFDate *a2)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  BOOL result = 0;
  if (a1)
  {
    if (CFGetTypeID(a1) == TypeID)
    {
      CFDateRef Value = CFDictionaryGetValue(a1, @"time");
      CFTypeID v6 = CFDateGetTypeID();
      if (Value)
      {
        if (CFGetTypeID(Value) == v6 && CFDateCompare((CFDateRef)Value, a2, 0) != kCFCompareLessThan) {
          return 1;
        }
      }
    }
  }
  return result;
}

CFComparisonResult sub_10002DA84(const void *Value, const void *a2)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) != TypeID) {
      CFDateRef Value = 0;
    }
    CFTypeID v5 = CFDictionaryGetTypeID();
    if (!a2) {
      goto LABEL_25;
    }
    CFTypeID v6 = v5;
  }
  else
  {
    CFTypeID v7 = CFDictionaryGetTypeID();
    if (!a2) {
      return 1;
    }
    CFTypeID v6 = v7;
    CFDateRef Value = 0;
  }
  if (CFGetTypeID(a2) != v6) {
    a2 = 0;
  }
  if (!Value) {
    return 1;
  }
  if (!a2) {
    return -1;
  }
  CFDateRef Value = CFDictionaryGetValue((CFDictionaryRef)Value, @"time");
  CFTypeID v8 = CFDateGetTypeID();
  if (Value && CFGetTypeID(Value) != v8) {
    CFDateRef Value = 0;
  }
  CFDateRef v9 = (const __CFDate *)CFDictionaryGetValue((CFDictionaryRef)a2, @"time");
  CFTypeID v10 = CFDateGetTypeID();
  if (!v9)
  {
LABEL_25:
    if (Value) {
      return -1;
    }
    else {
      return 1;
    }
  }
  if (CFGetTypeID(v9) == v10) {
    CFDateRef v11 = v9;
  }
  else {
    CFDateRef v11 = 0;
  }
  if (!Value) {
    return 1;
  }
  if (!v11) {
    return -1;
  }

  return CFDateCompare((CFDateRef)Value, v11, 0);
}

uint64_t sub_10002E0AC()
{
  if (!qword_1000A4C18) {
    return 0;
  }
  uint64_t v0 = IOPSLimitBatteryLevelCancel();
  CFDictionaryRef v1 = qword_1000A36A0;
  if (v0)
  {
    uint64_t v2 = v0;
    if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
      sub_10006806C();
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEFAULT))
    {
      v4[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Wombat: Cleared battery level limit\n", (uint8_t *)v4, 2u);
    }
    uint64_t v2 = 0;
    qword_1000A4C18 = 0;
  }
  return v2;
}

void sub_10002E254(id a1, BOOL a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10002E2C8;
  block[3] = &unk_1000918E0;
  BOOL v3 = a2;
  dispatch_async((dispatch_queue_t)qword_1000A4920, block);
}

void sub_10002E2C8(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEBUG)) {
    sub_100068274();
  }
  if (byte_1000A4928 != *(unsigned char *)(a1 + 32))
  {
    uint64_t v2 = qword_1000A36A0;
    if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = *(unsigned __int8 *)(a1 + 32);
      v6[0] = 67109120;
      v6[1] = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Wombat change:%u\n", (uint8_t *)v6, 8u);
    }
    byte_1000A4928 = *(unsigned char *)(a1 + 32);
    if (byte_1000A4928)
    {
      if (!qword_1000A4C18 && IOPSLimitBatteryLevelRegister())
      {
        if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
          sub_10006820C();
        }
LABEL_18:
        if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
          sub_10006813C();
        }
        return;
      }
      int v4 = IOPSLimitBatteryLevel();
      CFTypeID v5 = qword_1000A36A0;
      if (v4)
      {
        if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
          sub_1000681A4();
        }
        sub_10002E0AC();
        goto LABEL_18;
      }
      if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v6[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Wombat: Set battery level limit\n", (uint8_t *)v6, 2u);
      }
    }
    else if (sub_10002E0AC() && os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR))
    {
      sub_1000680D4();
    }
  }
}

id sub_10002E4DC()
{
  return (id)qword_1000A4930;
}

void sub_10002E4E8(uint64_t a1)
{
  if (a1)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10002E568;
    block[3] = &unk_100091490;
    void block[4] = a1;
    dispatch_barrier_sync((dispatch_queue_t)qword_1000A4930, block);
  }
}

void sub_10002E568(uint64_t a1)
{
  if (qword_1000A4938) {
    CFRelease((CFTypeRef)qword_1000A4938);
  }
  uint64_t v2 = qword_1000A36A0;
  if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "System updated to use custom battery properties\n", v3, 2u);
  }
  sub_10002E600(1);
  qword_1000A4938 = (uint64_t)CFRetain(*(CFTypeRef *)(a1 + 32));
  sub_10002E680();
}

void sub_10002E600(int a1)
{
  if (byte_1000A4BEC != a1)
  {
    byte_1000A4BEC = a1;
    if (a1) {
      sub_10002F500(0);
    }
    else {
      sub_10002EE90(1);
    }
    if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
      sub_1000682E0();
    }
  }
}

void sub_10002E680()
{
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
  uint64_t v0 = qword_1000A4948;
  io_iterator_t existing = 0;
  if (qword_1000A4948 && *(void *)qword_1000A4948)
  {
    CFDictionaryRef v1 = IOServiceMatching("IOPMPowerSource");
    if (IOServiceGetMatchingServices(kIOMainPortDefault, v1, &existing)) {
      BOOL v2 = 1;
    }
    else {
      BOOL v2 = existing == 0;
    }
    if (v2)
    {
      if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
        sub_100068360();
      }
    }
    else
    {
      v3[0] = _NSConcreteStackBlock;
      v3[1] = 3221225472;
      v3[2] = sub_10003B7EC;
      v3[3] = &unk_100092470;
      io_iterator_t v4 = existing;
      v3[4] = v0;
      dispatch_async((dispatch_queue_t)qword_1000A4930, v3);
    }
  }
}

void sub_10002E78C()
{
  if (qword_1000A4938) {
    dispatch_async((dispatch_queue_t)qword_1000A4930, &stru_100092110);
  }
}

void sub_10002E7B0(id a1)
{
  if (qword_1000A4940)
  {
    CFRelease((CFTypeRef)qword_1000A4940);
    qword_1000A4940 = 0;
  }
  CFRelease((CFTypeRef)qword_1000A4938);
  qword_1000A4938 = 0;
  sub_10002E600(0);

  sub_10002E680();
}

uint64_t sub_10002E808()
{
  uint64_t v3 = 0;
  io_iterator_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v6 = 0;
  dispatch_assert_queue_not_V2((dispatch_queue_t)qword_1000A4930);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10002E904;
  block[3] = &unk_100091458;
  void block[4] = &v3;
  dispatch_sync((dispatch_queue_t)qword_1000A4930, block);
  uint64_t v0 = v4[3];
  if (!v0)
  {
    if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
      sub_100068394();
    }
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_10002E8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002E904(uint64_t a1)
{
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
  uint64_t v2 = qword_1000A4948;
  if (qword_1000A4948)
  {
    if (*(void *)qword_1000A4948)
    {
      uint64_t v3 = *(const void **)(*(void *)qword_1000A4948 + 8);
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (v3)
      {
        if (CFGetTypeID(v3) == TypeID) {
          *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFDictionaryCreateCopy(kCFAllocatorDefault, *(CFDictionaryRef *)(*(void *)v2 + 8));
        }
      }
    }
  }
}

uint64_t sub_10002E990()
{
  return qword_1000A4948;
}

uint64_t sub_10002E9B8()
{
  return qword_1000A4940;
}

void sub_10002E9C4()
{
  os_log_t v0 = os_log_create("com.apple.powerd", "battery");
  CFDictionaryRef v1 = (void *)qword_1000A36A0;
  qword_1000A36A0 = (uint64_t)v0;

  os_log_t v2 = os_log_create("com.apple.powerd", "batteryhealth");
  uint64_t v3 = (void *)qword_1000A3698;
  qword_1000A3698 = (uint64_t)v2;

  bzero(&qword_1000A4950, 0x280uLL);
  qword_1000A4BF0 = 0;
  xmmword_1000A4BD0 = 0u;
  *(_OWORD *)&word_1000A4BE0 = 0u;
  dispatch_queue_t v4 = dispatch_queue_create("com.apple.private.powerd.batteryTimeRemainingQ", 0);
  uint64_t v5 = (void *)qword_1000A4930;
  qword_1000A4930 = (uint64_t)v4;

  if (qword_1000A4930)
  {
    notify_register_check("com.apple.system.powersources.timeremaining", &dword_1000A4BE4);
    notify_register_check("com.apple.system.powersources.percent", &dword_1000A4BE8);
    xpc_activity_unregister("com.apple.powerd.dofu-monitor");
    sub_10002EB80(1);
    dispatch_sync((dispatch_queue_t)qword_1000A4930, &stru_100092130);
    dispatch_async((dispatch_queue_t)qword_1000A4930, &stru_100092170);
    if (objc_opt_class())
    {
      dispatch_queue_t v6 = dispatch_queue_create("com.apple.private.powerd.wombat", 0);
      CFTypeID v7 = (void *)qword_1000A4920;
      qword_1000A4920 = (uint64_t)v6;

      CFTypeID v8 = qword_1000A4920;
      if (qword_1000A4920)
      {
        dispatch_async(v8, &stru_100092450);
      }
    }
    else
    {
      CFDateRef v9 = qword_1000A36A0;
      if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)CFTypeID v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "AVSC not supported\n", v10, 2u);
      }
    }
  }
}

void sub_10002EB80(int a1)
{
  os_log_t v2 = sub_10005C968();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100036154;
  block[3] = &unk_1000922A8;
  int v4 = a1;
  char v5 = 0;
  dispatch_async(v2, block);
}

void sub_10002EC0C(id a1)
{
  CFDictionaryRef v1 = IONotificationPortCreate(0);
  if (v1)
  {
    os_log_t v2 = v1;
    IONotificationPortSetDispatchQueue(v1, (dispatch_queue_t)qword_1000A4930);
    io_iterator_t notification = 0;
    CFDictionaryRef v3 = IOServiceMatching("IOPMPowerSource");
    if (IOServiceAddMatchingNotification(v2, "IOServiceFirstMatch", v3, (IOServiceMatchingCallback)sub_100036164, v2, &notification))
    {
      if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
        sub_1000683C8();
      }
    }
    else
    {
      sub_100036164(v2, notification);
    }
    io_iterator_t v13 = 0;
    int v4 = IONotificationPortCreate(kIOMainPortDefault);
    IONotificationPortSetDispatchQueue(v4, (dispatch_queue_t)qword_1000A4930);
    CFDictionaryRef v5 = IOServiceMatching("AppleSMC");
    if (!IOServiceAddMatchingNotification(v4, "IOServiceFirstMatch", v5, (IOServiceMatchingCallback)sub_1000364E8, v4, &v13))sub_1000364E8(0, v13); {
    io_iterator_t iterator = 0;
    }
    dispatch_queue_t v6 = IONotificationPortCreate(kIOMainPortDefault);
    IONotificationPortSetDispatchQueue(v6, (dispatch_queue_t)qword_1000A4930);
    CFDictionaryRef v7 = IOServiceMatching("AppleARMPMUPowerSource");
    if (!IOServiceAddMatchingNotification(v6, "IOServiceFirstMatch", v7, (IOServiceMatchingCallback)sub_1000365B4, v6, &iterator))sub_1000365B4(0, iterator); {
  }
    }
  dispatch_source_t v8 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)qword_1000A4930);
  CFDateRef v9 = (void *)qword_1000A4918;
  qword_1000A4918 = (uint64_t)v8;

  CFTypeID v10 = qword_1000A4918;
  dispatch_time_t v11 = dispatch_walltime(0, 0);
  dispatch_source_set_timer(v10, v11, 0x1A3185C5000uLL, 0);
  dispatch_source_set_event_handler((dispatch_source_t)qword_1000A4918, &stru_100092150);
  dispatch_resume((dispatch_object_t)qword_1000A4918);
}

void sub_10002EDFC(id a1)
{
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
  uint64_t v1 = qword_1000A4948;
  if (qword_1000A4948)
  {
    if (*(void *)qword_1000A4948)
    {
      os_log_t v2 = *(const void **)(*(void *)qword_1000A4948 + 8);
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (v2)
      {
        if (CFGetTypeID(v2) == TypeID)
        {
          CFDictionaryRef v4 = *(const __CFDictionary **)(*(void *)v1 + 8);
          sub_1000174FC(v4);
        }
      }
    }
  }
}

void sub_10002EE88(id a1)
{
}

void sub_10002EE90(int a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
  if (!qword_1000A4948)
  {
    if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
      sub_100068430();
    }
    return;
  }
  if (byte_1000A4BEC)
  {
    if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
      sub_1000684CC();
    }
    return;
  }
  if (!qword_1000A4BF8)
  {
    dispatch_source_t v3 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)qword_1000A4930);
    CFDictionaryRef v4 = (void *)qword_1000A4BF8;
    qword_1000A4BF8 = (uint64_t)v3;

    dispatch_source_set_event_handler((dispatch_source_t)qword_1000A4BF8, &stru_100092490);
    dispatch_resume((dispatch_object_t)qword_1000A4BF8);
  }
  if (a1 == 1) {
    goto LABEL_44;
  }
  double v5 = sub_10003B850(@"BootPathUpdated");
  if (v5 >= Current) {
    double v6 = 0.0;
  }
  else {
    double v6 = v5;
  }
  double v7 = sub_10003B850(@"FullPathUpdated");
  if (v7 >= Current) {
    double v8 = 0.0;
  }
  else {
    double v8 = v7;
  }
  double v9 = sub_10003B850(@"UserVisiblePathUpdated");
  if (v9 >= Current) {
    double v9 = 0.0;
  }
  if (v6 < v8 || (v6 != 0.0 ? (BOOL v10 = v6 < v9) : (BOOL v10 = 1), v10))
  {
    if (v8 < v6 || (v8 != 0.0 ? (BOOL v11 = v8 < v9) : (BOOL v11 = 1), v12 = v8, v11)) {
      double v12 = v9;
    }
    double v13 = Current - v12;
    BOOL v14 = Current - v12 > 15.0;
    double v15 = -kCFAbsoluteTimeIntervalSince1970;
    if (v6 < v8) {
      goto LABEL_37;
    }
  }
  else
  {
    double v13 = Current - v6;
    BOOL v14 = Current - v6 > 15.0;
    double v15 = -kCFAbsoluteTimeIntervalSince1970;
  }
  if (v6 == 0.0 || v6 < v15)
  {
LABEL_37:
    if (v8 >= v6 && v8 != 0.0 && v8 >= v15) {
      double v15 = v8;
    }
    goto LABEL_43;
  }
  double v15 = v6;
LABEL_43:
  if (Current - v15 > 595.0)
  {
LABEL_44:
    if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEBUG)) {
      sub_100068464();
    }
LABEL_46:
    IOPSRequestBatteryUpdate();
    CFTypeID v18 = qword_1000A4BF8;
    dispatch_time_t v19 = dispatch_time(0, 20000000000);
    dispatch_source_set_timer(v18, v19, 0x4A817C800uLL, 0);
    return;
  }
  if (v14)
  {
    if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEBUG)) {
      sub_100068498();
    }
    goto LABEL_46;
  }
  double v20 = v13 * -1000000000.0 + 2.0e10;
  if ((unint64_t)v20 >= 0x4A817C800) {
    int64_t v21 = 20000000000;
  }
  else {
    int64_t v21 = (unint64_t)v20;
  }
  CFDateRef v22 = qword_1000A4BF8;
  dispatch_time_t v23 = dispatch_time(0, v21);

  dispatch_source_set_timer(v22, v23, 0x4A817C800uLL, 0);
}

void sub_10002F198()
{
}

void sub_10002F1B0()
{
}

void sub_10002F1C4(id a1)
{
  word_1000A4BE0 = 257;
  sub_10002F1D8(1);
}

void sub_10002F1D8(char a1)
{
  dispatch_assert_queue_barrier((dispatch_queue_t)qword_1000A4930);
  if (qword_1000A36A8) {
    *(void *)qword_1000A36A8 = 0;
  }
  *(void *)&xmmword_1000A4BD0 = CFAbsoluteTimeGetCurrent();
  BYTE8(xmmword_1000A4BDsub_100019490(0, 0) = a1;

  sub_10002EE90(1);
}

uint64_t sub_10002F23C()
{
  uint64_t v3 = 0;
  CFDictionaryRef v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v6 = 0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10002F2E8;
  block[3] = &unk_100091458;
  void block[4] = &v3;
  dispatch_sync((dispatch_queue_t)qword_1000A4930, block);
  uint64_t v0 = v4[3];
  _Block_object_dispose(&v3, 8);
  return v0;
}

CFTypeRef sub_10002F2E8(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sub_10002F344();
  CFTypeRef result = *(CFTypeRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (result)
  {
    return CFRetain(result);
  }
  return result;
}

uint64_t sub_10002F344()
{
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
  uint64_t v0 = &dword_100000018;
  while (1)
  {
    CFDictionaryRef v1 = *(const __CFDictionary **)((char *)&qword_1000A4950 + v0);
    if (v1)
    {
      CFDateRef Value = CFDictionaryGetValue(v1, @"Transport Type");
      CFTypeID TypeID = CFStringGetTypeID();
      if (Value)
      {
        if (CFGetTypeID(Value) == TypeID && CFEqual(Value, @"Internal")) {
          break;
        }
      }
    }
    v0 += 40;
    if (v0 == 664) {
      return 0;
    }
  }
  return *(uint64_t *)((char *)&qword_1000A4950 + v0);
}

uint64_t sub_10002F3F0()
{
  return dword_1000A4C00;
}

uint64_t sub_10002F3FC()
{
  uint64_t v3 = 0;
  CFDictionaryRef v4 = &v3;
  uint64_t v5 = 0x2020000000;
  char v6 = 0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10002F4A8;
  block[3] = &unk_100091458;
  void block[4] = &v3;
  dispatch_sync((dispatch_queue_t)qword_1000A4930, block);
  uint64_t v0 = *((unsigned __int8 *)v4 + 24);
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_10002F4A8(uint64_t a1)
{
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
  if (qword_1000A4948 && *(void *)qword_1000A4948)
  {
    __int16 v2 = *(_WORD *)(*(void *)qword_1000A4948 + 16);
    if ((v2 & 0x40) != 0) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (v2 & 0x800) != 0;
    }
  }
}

void sub_10002F500(uint64_t a1)
{
  dispatch_assert_queue_barrier((dispatch_queue_t)qword_1000A4930);
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
  uint64_t v2 = qword_1000A4948;
  sub_10002EE90(0);
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
  if (!qword_1000A4C30) {
    return;
  }
  if (a1 || (a1 = *(void *)v2) != 0)
  {
    if (*(void *)(a1 + 8))
    {
      unsigned int v3 = *(unsigned __int16 *)(a1 + 16);
      int v4 = v3 & 1;
      int v5 = (v3 >> 1) & 1;
      if (dword_1000A2F48 != v4) {
        byte_1000A4BED = 1;
      }
      if (dword_1000A2F4C != v5 || dword_1000A2F54 != ((*(unsigned __int16 *)(a1 + 16) >> 3) & 1)) {
        sub_10002F1D8(dword_1000A2F4C != v5);
      }
      int v6 = *(_WORD *)(a1 + 16) & 1;
      double v7 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), @"AdapterDetails");
      sub_100030C5C(v6, v7);
      dispatch_assert_queue_barrier((dispatch_queue_t)qword_1000A4930);
      dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
      if ((int)qword_1000A4C30 >= 1)
      {
        uint64_t v8 = qword_1000A4C30;
        uint64_t v9 = v2;
        do
        {
          uint64_t v10 = *(void *)v9;
          unsigned int v11 = *(_DWORD *)(*(void *)v9 + 96);
          if ((v11 & 0x80000000) == 0 && (*(_WORD *)(v10 + 16) & 0x40) != 0)
          {
            if (v11 < 0x4B1) {
              goto LABEL_16;
            }
            int v12 = 1200;
          }
          else
          {
            int v12 = -1;
          }
          *(_DWORD *)(v10 + 96) = v12;
LABEL_16:
          v9 += 8;
          --v8;
        }
        while (v8);
      }
      *(_WORD *)(*(void *)v2 + 16) = *(_WORD *)(*(void *)v2 + 16) & 0xFEFF | ((*(_DWORD *)(*(void *)v2 + 96) == -1) << 8);
      int v13 = *(_DWORD *)(a1 + 36);
      if (v13)
      {
        int v13 = llround((double)(100 * *(_DWORD *)(a1 + 32)) / (double)v13);
        if (v13 >= 100) {
          int v13 = 100;
        }
      }
      if (v13 <= 1) {
        int v14 = 1;
      }
      else {
        int v14 = v13;
      }
      if (v5 || BYTE8(xmmword_1000A4BD0) || dword_1000A2F4C || (int v15 = dword_1000A2F50, v14 <= dword_1000A2F50))
      {
        if (CFAbsoluteTimeGetCurrent() >= *(double *)&xmmword_1000A4BD0 + 60.0) {
          BYTE8(xmmword_1000A4BDsub_100019490(0, 0) = 0;
        }
        int v15 = v14;
      }
      *(_DWORD *)(a1 + 10sub_100019490(0, 0) = v15;
      dword_1000A2F50 = v15;
      dword_1000A2F48 = v4;
      dword_1000A2F4C = v5;
      dword_1000A2F54 = (*(unsigned __int16 *)(a1 + 16) >> 3) & 1;
      uint64_t v16 = qword_1000A4BF0;
      if (!qword_1000A4BF0
        || (dispatch_assert_queue_barrier((dispatch_queue_t)qword_1000A4930),
            (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks)) == 0))
      {
LABEL_148:
        dispatch_assert_queue_barrier((dispatch_queue_t)qword_1000A4930);
        dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
        uint64_t v89 = qword_1000A4948;
        int v90 = dword_1000A4C00;
        HIDWORD(v184) = -1;
        LODWORD(v185) = -1;
        dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
        uint64_t v91 = sub_10003B8F4(@"UPS");
        dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
        if (qword_1000A4C30)
        {
          if (((kCFAbsoluteTimeIntervalSince1970 != 0.0) & (*(unsigned __int16 *)(*(void *)v89 + 16) >> 6)) != 0) {
            uint64_t v92 = *(void *)v89;
          }
          else {
            uint64_t v92 = 0;
          }
        }
        else
        {
          uint64_t v92 = 0;
        }
        if (!(v92 | v91)) {
          return;
        }
        int v175 = v90;
        dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
        if ((int)qword_1000A4C30 < 1)
        {
          uint64_t v94 = 0;
        }
        else
        {
          uint64_t v93 = 0;
          uint64_t v94 = 0;
          do
          {
            uint64_t v95 = *(void *)(v89 + 8 * v93);
            if ((*(_WORD *)(v95 + 16) & 0x40) != 0) {
              uint64_t v94 = (*(_DWORD *)(v95 + 96) + v94);
            }
            ++v93;
            dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
          }
          while (v93 < (int)qword_1000A4C30);
        }
        CFDictionaryRef v96 = (const __CFDictionary *)sub_10003B8F4(@"Battery Case");
        CFDictionaryRef v97 = v96;
        if (v96)
        {
          HIDWORD(v185) = 0;
          *(_DWORD *)value = 0;
          CFNumberRef v98 = (const __CFNumber *)CFDictionaryGetValue(v96, @"Current Capacity");
          CFNumberRef v99 = (const __CFNumber *)CFDictionaryGetValue(v97, @"Max Capacity");
          int v100 = 0;
          if (v98)
          {
            CFNumberRef v101 = v99;
            if (v99)
            {
              CFNumberGetValue(v98, kCFNumberIntType, value);
              CFNumberGetValue(v101, kCFNumberIntType, (char *)&v185 + 4);
              if (HIDWORD(v185)) {
                int v100 = 100 * *(_DWORD *)value / SHIDWORD(v185);
              }
              else {
                int v100 = 0;
              }
            }
          }
          CFDictionaryGetValueIfPresent(v97, @"Is Charging", (const void **)((char *)&v184 + 4));
          if (dword_1000A4C64) {
            int v111 = 100 * dword_1000A4C60 / dword_1000A4C64;
          }
          else {
            int v111 = 0;
          }
          if (HIDWORD(v184) != dword_1000A3338 || v100 != v111 || (LODWORD(v97) = 0, !dword_1000A4C64) && HIDWORD(v185)) {
            LODWORD(v97) = 1;
          }
          dword_1000A3338 = HIDWORD(v184);
          dword_1000A4C64 = HIDWORD(v185);
          dword_1000A4C60 = *(_DWORD *)value;
          if (v91) {
            goto LABEL_188;
          }
        }
        else
        {
          dword_1000A3338 = -1;
          dword_1000A4C64 = 0;
          dword_1000A4C60 = 0;
          if (v91)
          {
LABEL_188:
            CFNumberRef v112 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v91, @"Time to Empty");
            if (v112)
            {
              CFNumberGetValue(v112, kCFNumberIntType, &v185);
              int v113 = v185;
              if (v185 == -1) {
                int v113 = 0;
              }
              uint64_t v94 = (v113 + v94);
            }
            CFStringRef v114 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v91, @"Power Source State");
            if (v114) {
              int v102 = CFEqual(v114, @"AC Power");
            }
            else {
              int v102 = 0;
            }
            if (dword_1000A3334 != v102)
            {
              byte_1000A4BED = 1;
              dword_1000A3334 = v102;
            }
LABEL_197:
            int v173 = (int)v97;
            if (v92)
            {
              unsigned int v115 = *(unsigned __int16 *)(v92 + 16);
              HIDWORD(v17sub_100019490(0, 0) = (v115 >> 8) & 1;
              int v116 = (v115 >> 3) & 1;
              int v117 = *(_DWORD *)(v92 + 100);
              int v118 = *(_DWORD *)(v92 + 36);
              if (v118) {
                char v171 = *(unsigned char *)(v92 + 24) | ((100 * *(_DWORD *)(v92 + 32) / v118) > 0x63);
              }
              else {
                char v171 = 0;
              }
              if (v91) {
                int v131 = (v102 != 0) & v115;
              }
              else {
                int v131 = v115 & 1;
              }
              int v124 = (v115 >> 1) & 1;
              int v127 = (v115 >> 4) & 1;
              int v125 = (v115 >> 5) & 1;
              BOOL v126 = *(_DWORD *)(v92 + 20) != 0;
            }
            else
            {
              HIDWORD(v185) = 0;
              *(_DWORD *)value = 0;
              BOOL v177 = v102 != 0;
              BOOL v119 = v185 != -1 || v102 != 0;
              HIDWORD(v17sub_100019490(0, 0) = v119;
              CFBooleanRef v120 = (CFBooleanRef)CFDictionaryGetValue((CFDictionaryRef)v91, @"Is Charging");
              CFNumberRef v121 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v91, @"Current Capacity");
              if (v121) {
                CFNumberGetValue(v121, kCFNumberIntType, (char *)&v185 + 4);
              }
              CFNumberRef v122 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v91, @"Max Capacity");
              if (v122) {
                CFNumberGetValue(v122, kCFNumberIntType, value);
              }
              int v123 = 0;
              if (HIDWORD(v185) && *(_DWORD *)value) {
                int v123 = 100 * HIDWORD(v185) / *(_DWORD *)value;
              }
              int v124 = 0;
              int v125 = 0;
              BOOL v126 = 0;
              BOOL v42 = v102 == 0;
              int v127 = 0;
              int v117 = v123;
              char v130 = !v42 && v123 > 94 && v120 != kCFBooleanTrue;
              char v171 = v130;
              int v116 = v120 == kCFBooleanTrue;
              int v131 = v177;
            }
            dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
            uint64_t v132 = (unsigned __int16)v94 | 0x80000u;
            int v178 = v131;
            if (v131) {
              uint64_t v132 = (unsigned __int16)v94 | 0x90000;
            }
            if (v124) {
              v132 |= 0x4000000uLL;
            }
            LODWORD(v17sub_100019490(0, 0) = v127;
            if (v127) {
              v132 |= 0x8000000uLL;
            }
            if (v125) {
              v132 |= 0x10000000uLL;
            }
            if (HIDWORD(v170)) {
              v132 |= 0x40000uLL;
            }
            if (v116) {
              v132 |= 0x20000uLL;
            }
            if (byte_1000A4BEC) {
              v132 |= 0x100000uLL;
            }
            if (v126) {
              uint64_t v133 = v132 | 0x20000000;
            }
            else {
              uint64_t v133 = v132;
            }
            if (sub_10002F344()) {
              v133 |= 0x400000uLL;
            }
            dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
            if (sub_10003B8F4(@"UPS")) {
              v133 |= 0x800000uLL;
            }
            uint64_t v134 = v133 | (sub_100033B58() << 56);
            uint64_t v135 = qword_1000A4C68;
            unsigned int v136 = v117;
            if (qword_1000A4C68 != v134)
            {
              qword_1000A4C68 = v134;
              notify_set_state(dword_1000A4BE4, v134);
              uint32_t v137 = notify_post("com.apple.system.powersources.timeremaining");
              v138 = qword_1000A36A0;
              if (v137)
              {
                if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
                  sub_100068534();
                }
              }
              else if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEFAULT))
              {
                v139 = "Batt";
                *(_DWORD *)value = 134218498;
                *(void *)&value[4] = v134;
                if (v178) {
                  v139 = "AC";
                }
                *(_WORD *)&value[12] = 1024;
                unsigned int v187 = v94;
                __int16 v188 = 2082;
                v189 = v139;
                _os_log_impl((void *)&_mh_execute_header, v138, OS_LOG_TYPE_DEFAULT, "Battery time remaining posted(0x%llx) Time:%d Source:%{public}s\n", value, 0x1Cu);
              }
            }
            if (!v92) {
              goto LABEL_273;
            }
            HIDWORD(v185) = 1;
            dispatch_assert_queue_barrier((dispatch_queue_t)qword_1000A4930);
            if (_BYTE)word_1000A4BE0 || (*(_WORD *)(v92 + 16))
            {
              LOBYTE(word_1000A4BEsub_100019490(0, 0) = 0;
              int v140 = 1;
              if (HIDWORD(xmmword_1000A4BD0) == 1) {
                goto LABEL_262;
              }
              HIDWORD(xmmword_1000A4BDsub_100019490(0, 0) = 0;
            }
            else
            {
              if (BYTE8(xmmword_1000A4BD0))
              {
LABEL_258:
                int v140 = 1;
                goto LABEL_262;
              }
              if (v117 > 2)
              {
                if (v117 > 0xA) {
                  goto LABEL_258;
                }
                int v140 = 2;
              }
              else
              {
                int v140 = 3;
              }
            }
            HIDWORD(v185) = v140;
LABEL_262:
            if (v140 > SHIDWORD(xmmword_1000A4BD0))
            {
              CFNumberRef v141 = CFNumberCreate(0, kCFNumberIntType, (char *)&v185 + 4);
              if (v141)
              {
                CFNumberRef v142 = v141;
                CFStringRef v143 = (const __CFString *)qword_1000A4C70;
                if (qword_1000A4C70
                  || (CFStringRef v143 = SCDynamicStoreKeyCreate(kCFAllocatorDefault, @"%@%@", kSCDynamicStoreDomainState, @"/IOKit/LowBatteryWarning", v170), (qword_1000A4C70 = (uint64_t)v143) != 0))
                {
                  sub_10005C834(v143, v142);
                }
                else if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR))
                {
                  sub_100068500();
                }
                CFRelease(v142);
                sub_100034204("com.apple.system.powersources.lowbattery");
                uint64_t v144 = HIDWORD(v185);
                if (HIDWORD(v185) != dword_1000A333C)
                {
                  v145 = qword_1000A36A0;
                  if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)value = 67109376;
                    *(_DWORD *)&value[4] = v144;
                    *(_WORD *)&value[8] = 1024;
                    *(_DWORD *)&value[10] = v136;
                    _os_log_impl((void *)&_mh_execute_header, v145, OS_LOG_TYPE_DEFAULT, "Warning level: %d cap: %d\n", value, 0xEu);
                    uint64_t v144 = HIDWORD(v185);
                  }
                  nullsub_4(v144, v94);
                  LODWORD(v144) = HIDWORD(v185);
                  dword_1000A333C = HIDWORD(v185);
                }
              }
              else
              {
                LODWORD(v144) = HIDWORD(v185);
              }
              HIDWORD(xmmword_1000A4BDsub_100019490(0, 0) = v144;
            }
LABEL_273:
            dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
            LODWORD(v146) = v136 | 0x80000;
            if (v136 >= 0x65) {
              uint64_t v146 = 0x80000;
            }
            else {
              uint64_t v146 = v146;
            }
            if (v178) {
              v146 |= 0x10000uLL;
            }
            if (v116) {
              v146 |= 0x20000uLL;
            }
            if (v171) {
              uint64_t v147 = v146 | 0x200000;
            }
            else {
              uint64_t v147 = v146;
            }
            if (v92) {
              v147 |= (unint64_t)(*(_WORD *)(v92 + 16) & 0x200) << 15;
            }
            uint64_t v148 = qword_1000A4C78 ^ v147;
            if (qword_1000A4C78 != v147)
            {
              qword_1000A4C78 = v147;
              notify_set_state(dword_1000A4BE8, v147);
              if ((v148 & 0xFFFFFFFFFEDDFFFFLL) != 0)
              {
                notify_post("com.apple.system.powersources.percent");
                v149 = qword_1000A36A0;
                if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEFAULT))
                {
                  v150 = "Batt";
                  *(_DWORD *)value = 134218498;
                  *(void *)&value[4] = v147;
                  if (v178) {
                    v150 = "AC";
                  }
                  *(_WORD *)&value[12] = 1024;
                  unsigned int v187 = v136;
                  __int16 v188 = 2082;
                  v189 = v150;
                  _os_log_impl((void *)&_mh_execute_header, v149, OS_LOG_TYPE_DEFAULT, "Battery capacity change posted(0x%llx). Capacity:%d Source:%{public}s\n", value, 0x1Cu);
                }
              }
              if ((v148 & 0x1000000) != 0) {
                sub_100034204("com.apple.system.powersources.criticallevel");
              }
            }
            if (((v136 == v175) & ~v173) == 0 && v135 == v134) {
              sub_100034204("com.apple.system.powersources.timeremaining");
            }
            dword_1000A4C00 = v136;
            sub_100056608();
            if (byte_1000A4BED)
            {
              byte_1000A4BED = 0;
              sub_10002EB80(2);
              v151 = qword_1000A36A0;
              if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEFAULT))
              {
                v152 = "Batt";
                if (v178) {
                  v152 = "AC";
                }
                *(_DWORD *)value = 136446210;
                *(void *)&value[4] = v152;
                _os_log_impl((void *)&_mh_execute_header, v151, OS_LOG_TYPE_DEFAULT, "Power Source change. Source:%{public}s", value, 0xCu);
              }
              notify_post("com.apple.system.powersources.source");
              kdebug_trace();
            }
            notify_post("com.apple.system.powersources");
            sub_10002EB80(32);
            return;
          }
        }
        int v102 = 0;
        goto LABEL_197;
      }
      CFTypeID v18 = Mutable;
      v184 = 0;
      uint64_t v185 = 0;
      int v183 = 0;
      id v19 = objc_alloc_init((Class)NSMutableDictionary);
      if (!v19)
      {
LABEL_147:

        goto LABEL_148;
      }
      CFBooleanRef v20 = kCFBooleanTrue;
      CFDictionarySetValue(v18, @"Battery Provides Time Remaining", kCFBooleanTrue);
      int64_t v21 = *(const void **)(a1 + 128);
      if (v21) {
        CFDictionarySetValue(v18, @"Failure", v21);
      }
      v176 = (unsigned __int16 *)v16;
      CFDateRef v22 = *(const void **)(a1 + 152);
      if (v22) {
        CFDictionarySetValue(v18, @"ChargeStatus", v22);
      }
      CFDictionarySetValue(v18, @"Transport Type", @"Internal");
      CFDictionarySetValue(v18, @"Type", @"InternalBattery");
      if (*(_WORD *)(a1 + 16)) {
        CFStringRef v23 = @"AC Power";
      }
      else {
        CFStringRef v23 = @"Battery Power";
      }
      CFDictionarySetValue(v18, @"Power Source State", v23);
      CFBooleanRef v24 = kCFBooleanFalse;
      if ((*(_WORD *)(a1 + 16) & 0x800) != 0) {
        CFBooleanRef v25 = kCFBooleanTrue;
      }
      else {
        CFBooleanRef v25 = kCFBooleanFalse;
      }
      CFDictionarySetValue(v18, @"Optimized Battery Charging Engaged", v25);
      unsigned int v26 = +[NSProcessInfo processInfo];
      if ([v26 isLowPowerModeEnabled]) {
        CFBooleanRef v27 = kCFBooleanTrue;
      }
      else {
        CFBooleanRef v27 = kCFBooleanFalse;
      }
      CFDictionarySetValue(v18, @"LPM Active", v27);

      if ((*(_WORD *)(a1 + 16) & 2) != 0) {
        CFBooleanRef v28 = kCFBooleanTrue;
      }
      else {
        CFBooleanRef v28 = kCFBooleanFalse;
      }
      CFDictionarySetValue(v18, @"Raw External Connected", v28);
      CFDictionaryRef v29 = (const __CFDictionary *)sub_10003B8F4(@"Battery Case");
      CFDictionaryRef v30 = v29;
      if (!v29)
      {
        BOOL v36 = 0;
        int v37 = 0;
        goto LABEL_89;
      }
      id v172 = v19;
      int valuePtr = 0;
      *(void *)value = 0;
      if (CFDictionaryGetValueIfPresent(v29, @"Current Capacity", (const void **)value))
      {
        uint64_t v31 = *(const void **)value;
        CFTypeID TypeID = CFNumberGetTypeID();
        if (v31)
        {
          if (CFGetTypeID(v31) == TypeID) {
            CFNumberGetValue(*(CFNumberRef *)value, kCFNumberIntType, &valuePtr);
          }
        }
      }
      int v181 = 0;
      *(void *)value = 0;
      if (CFDictionaryGetValueIfPresent(v30, @"Max Capacity", (const void **)value))
      {
        int v33 = *(const void **)value;
        CFTypeID v34 = CFNumberGetTypeID();
        if (v33)
        {
          if (CFGetTypeID(v33) == v34) {
            CFNumberGetValue(*(CFNumberRef *)value, kCFNumberIntType, &v181);
          }
        }
      }
      BOOL v174 = v181 && v181 >= valuePtr && 100 * valuePtr / v181 != 0;
      int v179 = 0;
      int v180 = 0;
      *(void *)value = 0;
      if (CFDictionaryGetValueIfPresent(v30, @"Vendor ID", (const void **)value))
      {
        uint64_t v38 = *(const void **)value;
        CFTypeID v39 = CFNumberGetTypeID();
        if (v38)
        {
          if (CFGetTypeID(v38) == v39) {
            CFNumberGetValue(*(CFNumberRef *)value, kCFNumberIntType, &v180);
          }
        }
      }
      *(void *)value = 0;
      if (CFDictionaryGetValueIfPresent(v30, @"Product ID", (const void **)value))
      {
        uint64_t v40 = *(const void **)value;
        CFTypeID v41 = CFNumberGetTypeID();
        if (v40)
        {
          if (CFGetTypeID(v40) == v41) {
            CFNumberGetValue(*(CFNumberRef *)value, kCFNumberIntType, &v179);
          }
        }
      }
      BOOL v42 = v180 == 10522 && v179 == 405;
      int v37 = v42;
      CFDictionaryRef v30 = *(const __CFDictionary **)(a1 + 8);
      CFTypeID v43 = CFDictionaryGetTypeID();
      if (v30)
      {
        if (CFGetTypeID(v30) != v43) {
          goto LABEL_87;
        }
        CFDictionaryRef v30 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), @"AdapterDetails");
        CFTypeID v44 = CFDictionaryGetTypeID();
        if (v30)
        {
          if (CFGetTypeID(v30) == v44)
          {
            LODWORD(v3sub_100019490(0, 0) = CFDictionaryGetValue(v30, @"IsWireless") == kCFBooleanTrue;
            goto LABEL_88;
          }
LABEL_87:
          LODWORD(v3sub_100019490(0, 0) = 0;
        }
      }
LABEL_88:
      id v19 = v172;
      BOOL v36 = v174;
LABEL_89:
      __int16 v45 = *(_WORD *)(a1 + 16);
      if (v36 | ((v45 & 2) >> 1)) {
        __int16 v46 = 16;
      }
      else {
        __int16 v46 = 0;
      }
      *(_WORD *)(a1 + 16) = v46 | v45 & 0xFFEF;
      if (v36 | ((v45 & 2) >> 1)) {
        CFBooleanRef v47 = kCFBooleanTrue;
      }
      else {
        CFBooleanRef v47 = kCFBooleanFalse;
      }
      CFDictionarySetValue(v18, @"Show Charging UI", v47);
      __int16 v48 = *(_WORD *)(a1 + 16);
      if ((v48 & 1) != 0 || (v37 | v30) == 1)
      {
        __int16 v49 = v48 | 0x20;
        CFBooleanRef v50 = kCFBooleanTrue;
      }
      else
      {
        __int16 v49 = v48 & 0xFFDF;
        CFBooleanRef v50 = kCFBooleanFalse;
      }
      *(_WORD *)(a1 + 16) = v49;
      CFDictionarySetValue(v18, @"Play Charging Chime", v50);
      unsigned int v51 = *(_DWORD *)(a1 + 36);
      if (v51)
      {
        unsigned int v51 = *(_DWORD *)(a1 + 100);
        int v52 = 100;
      }
      else
      {
        int v52 = 0;
      }
      v184 = (void *)__PAIR64__(v52, v51);
      CFNumberRef v53 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (char *)&v184 + 4);
      if (v53)
      {
        CFNumberRef v54 = v53;
        CFDictionarySetValue(v18, @"Max Capacity", v53);
        CFRelease(v54);
      }
      CFNumberRef v55 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v184);
      if (v55)
      {
        CFNumberRef v56 = v55;
        CFDictionarySetValue(v18, @"Current Capacity", v55);
        CFRelease(v56);
      }
      if ((*(_WORD *)(a1 + 16) & 0x40) != 0) {
        CFBooleanRef v57 = kCFBooleanTrue;
      }
      else {
        CFBooleanRef v57 = kCFBooleanFalse;
      }
      CFDictionarySetValue(v18, @"Is Present", v57);
      uint64_t v185 = *(unsigned int *)(a1 + 96);
      CFNumberRef v58 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (char *)&v185 + 4);
      __int16 v59 = *(_WORD *)(a1 + 16);
      if ((v59 & 0x40) != 0)
      {
        if ((v59 & 8) == 0)
        {
          CFDictionarySetValue(v18, @"Is Charging", kCFBooleanFalse);
          if (*(_WORD *)(a1 + 16))
          {
            CFDictionarySetValue(v18, @"Time to Full Charge", v58);
            CFDictionarySetValue(v18, @"Time to Empty", v58);
            int v153 = *(_DWORD *)(a1 + 36);
            if (v153 && *(unsigned char *)(a1 + 24) & 1 | ((100 * *(_DWORD *)(a1 + 32) / v153) > 0x63)) {
              CFBooleanRef v24 = kCFBooleanTrue;
            }
            CFStringRef v62 = @"Is Charged";
            CFNumberRef v66 = v18;
            CFBooleanRef v67 = v24;
LABEL_123:
            CFDictionarySetValue(v66, v62, v67);
            CFRelease(v58);
            if (*(_DWORD *)(a1 + 60) != dword_1000A3340)
            {
              CFMutableDictionaryRef v68 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
              if (v68)
              {
                CFMutableDictionaryRef v69 = v68;
                sub_100037784(v68, a1);
                CFRelease(v69);
                dword_1000A3340 = *(_DWORD *)(a1 + 60);
              }
            }
            if (*(void *)(a1 + 136)) {
              CFStringRef v70 = *(const __CFString **)(a1 + 136);
            }
            else {
              CFStringRef v70 = @"Unnamed";
            }
            CFDictionarySetValue(v18, @"Name", v70);
            uint8_t v71 = (id *)v176;
            if (*((_DWORD *)v176 + 1) != 2)
            {
              int v183 = *v176 | (*((_DWORD *)v176 + 2) << 16);
              CFNumberRef v72 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v183);
              if (v72)
              {
                CFNumberRef v73 = v72;
                CFDictionarySetValue(v18, @"Power Source ID", v72);
                CFRelease(v73);
              }
            }
            double v74 = sub_100014744();
            CFNumberRef v75 = v19;
            [v19 setObject:v74 forKeyedSubscript:@"Trusted Battery Data"];
            __int16 v76 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 60)];
            id v77 = v74;
            id v78 = v76;
            if (v77)
            {
              uint64_t v79 = [v77 objectForKeyedSubscript:@"Trusted Data Enabled"];
              if (v79)
              {
                CFNumberRef v80 = (void *)v79;
                CFNumberRef v81 = [v77 objectForKeyedSubscript:@"Trusted Data Enabled"];
                if ([v81 intValue])
                {
                  CFNumberRef v82 = [v77 objectForKeyedSubscript:@"Trusted Cycle Count"];

                  uint8_t v71 = (id *)v176;
                  if (v82)
                  {
                    id v83 = [v77 objectForKeyedSubscript:@"Trusted Cycle Count"];
LABEL_139:
                    CFNumberRef v84 = v83;

                    id v19 = v75;
                    [v75 setObject:v84 forKeyedSubscript:@"Cycle count"];

                    unint64_t v85 = *(void *)(a1 + 80);
                    if (v85)
                    {
                      CFDictionaryRef v86 = +[NSDate dateWithTimeIntervalSinceReferenceDate:(double)v85];
                      [v75 setObject:v86 forKeyedSubscript:@"Date of first use"];
                    }
                    if (qword_1000A4C80)
                    {
                      id v87 = (id)qword_1000A4C80;
LABEL_143:
                      [v19 setObject:v87 forKeyedSubscript:@"Date of manufacture"];
LABEL_144:
                      objc_storeStrong(v71 + 4, v19);
                      id v88 = v71[3];
                      if (v88) {
                        CFRelease(v88);
                      }
                      v71[3] = v18;

                      goto LABEL_147;
                    }
                    id v103 = (id)qword_1000A4940;
                    if (!v103)
                    {
                      id v87 = 0;
                      goto LABEL_144;
                    }
                    v104 = v103;
                    if ([v103 length] != (id)18)
                    {
                      if ([v104 length] == (id)17)
                      {
                        id v154 = v104;
                        id v155 = [v154 uppercaseString];
                        unsigned int v156 = *((char *)[v155 UTF8String] + 3);

                        id v157 = [v154 uppercaseString];
                        int v158 = *((char *)[v157 UTF8String] + 6);

                        value[2] = 0;
                        v159 = [v154 uppercaseString];

                        id v160 = v159;
                        *(_WORD *)value = *((_WORD *)[v160 UTF8String] + 2);

                        if ((v158 - 56) >= 0xFFFFFFF9 && v156 - 58 >= 0xFFFFFFF6)
                        {
                          unint64_t v162 = strtoul(value, 0, 10);
                          v110 = 0;
                          if (v162 - 54 >= 0xFFFFFFFFFFFFFFCBLL)
                          {
                            unint64_t v163 = v162;
                            uint64_t v164 = (v158 - 48);
                            if (v156 >= 0x32) {
                              int v165 = 1972;
                            }
                            else {
                              int v165 = 1982;
                            }
                            uint64_t v166 = v165 + v156;
                            id v167 = objc_alloc_init((Class)NSDateComponents);
                            [v167 setWeekday:v164];
                            [v167 setWeekOfYear:v163];
                            [v167 setYearForWeekOfYear:v166];
                            id v168 = [objc_alloc((Class)NSCalendar) initWithCalendarIdentifier:NSCalendarIdentifierGregorian];
                            v169 = +[NSTimeZone timeZoneWithAbbreviation:@"UTC"];
                            [v168 setTimeZone:v169];

                            v110 = [v168 dateFromComponents:v167];
                          }
                        }
                        else
                        {
                          v110 = 0;
                        }
                        uint8_t v71 = (id *)v176;
                        id v19 = v75;
LABEL_314:
                        v161 = (void *)qword_1000A4C80;
                        qword_1000A4C80 = (uint64_t)v110;
                      }
                      id v87 = (id)qword_1000A4C80;

                      if (!v87) {
                        goto LABEL_144;
                      }
                      goto LABEL_143;
                    }
                    *(_DWORD *)value = 0;
                    id v105 = [v104 uppercaseString];
                    v106 = (char *)[v105 UTF8String];
                    *(_WORD *)value = *(_WORD *)(v106 + 3);
                    value[2] = v106[5];

                    uint64_t v107 = 0;
                    while (1)
                    {
                      int v108 = (char)value[v107];
                      if (v108 > 79) {
                        break;
                      }
                      if (v108 >= 74)
                      {
                        char v109 = -1;
                        goto LABEL_175;
                      }
LABEL_176:
                      if (++v107 == 3)
                      {
                        v110 = +[NSDate dateWithTimeIntervalSince1970:(double)(86400 * strtoull(value, 0, 34))];
                        goto LABEL_314;
                      }
                    }
                    char v109 = -2;
LABEL_175:
                    value[v107] = v109 + v108;
                    goto LABEL_176;
                  }
                }
                else
                {

                  uint8_t v71 = (id *)v176;
                }
              }
            }
            id v83 = v78;
            goto LABEL_139;
          }
          CFNumberRef v60 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v185);
          if (v60)
          {
            CFNumberRef v61 = v60;
            CFDictionarySetValue(v18, @"Time to Empty", v60);
            CFRelease(v61);
          }
          CFStringRef v62 = @"Time to Full Charge";
LABEL_122:
          CFNumberRef v66 = v18;
          CFBooleanRef v67 = v58;
          goto LABEL_123;
        }
        CFDictionarySetValue(v18, @"Is Charging", kCFBooleanTrue);
        int v63 = *(_DWORD *)(a1 + 36);
        if (!v63 || 100 * *(_DWORD *)(a1 + 32) / v63 <= 98) {
          CFBooleanRef v20 = kCFBooleanFalse;
        }
        CFDictionarySetValue(v18, @"Is Finishing Charge", v20);
        CFNumberRef v64 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v185);
        if (v64)
        {
          CFNumberRef v65 = v64;
          CFDictionarySetValue(v18, @"Time to Full Charge", v64);
          CFRelease(v65);
        }
      }
      else
      {
        CFDictionarySetValue(v18, @"Is Charging", kCFBooleanFalse);
        CFDictionarySetValue(v18, @"Time to Full Charge", v58);
      }
      CFStringRef v62 = @"Time to Empty";
      goto LABEL_122;
    }
  }
  uint64_t v35 = qword_1000A36A0;
  if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)value = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "No batteries found yet..\n", value, 2u);
  }
}

uint64_t sub_100030C5C(int a1, void *a2)
{
  obuint64_t j = a2;
  dispatch_assert_queue_barrier((dispatch_queue_t)qword_1000A4930);
  unsigned int v3 = (void *)qword_1000A4908;
  if ((a1 & 1) != 0 || qword_1000A4908)
  {
    if (HIBYTE(word_1000A4BE0))
    {
      HIBYTE(word_1000A4BEsub_100019490(0, 0) = 0;
      if (qword_1000A4908)
      {
        qword_1000A4908 = 0;
      }
    }
    if (a1)
    {
      if (!obj) {
        goto LABEL_20;
      }
      unsigned __int8 v4 = [obj isEqual:qword_1000A4908];
      int v5 = obj;
      if (v4) {
        goto LABEL_20;
      }
    }
    else
    {

      int v5 = 0;
    }
    int v6 = (void *)qword_1000A4908;
    id obja = v5;
    if (qword_1000A4908)
    {
      qword_1000A4908 = 0;

      int v5 = obja;
    }
    if (v5) {
      objc_storeStrong((id *)&qword_1000A4908, v5);
    }
    sub_100034204("com.apple.system.powermanagement.poweradapter");
    dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
    uint64_t v7 = qword_1000A4948;
    if (qword_1000A4948)
    {
      if (*(void *)qword_1000A4948)
      {
        uint64_t v8 = *(const void **)(*(void *)qword_1000A4948 + 8);
        CFTypeID TypeID = CFDictionaryGetTypeID();
        if (v8)
        {
          if (CFGetTypeID(v8) == TypeID) {
            sub_1000174FC(*(CFDictionaryRef *)(*(void *)v7 + 8));
          }
        }
      }
    }
  }
LABEL_20:

  return _objc_release_x1();
}

void sub_100030D90(void *a1, CFDictionaryRef theDict, unsigned int a3)
{
  unsigned int v57 = a3;
  int v55 = -1;
  uint64_t valuePtr = 0;
  *(void *)value = 0;
  if (CFDictionaryGetValueIfPresent(theDict, @"Battery Service Flags", (const void **)value))
  {
    unsigned __int8 v4 = *(const void **)value;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (v4)
    {
      if (CFGetTypeID(v4) == TypeID) {
        CFNumberGetValue(*(CFNumberRef *)value, kCFNumberIntType, (char *)&valuePtr + 4);
      }
    }
  }
  *(void *)value = 0;
  if (CFDictionaryGetValueIfPresent(theDict, @"Battery Service State", (const void **)value))
  {
    int v6 = *(const void **)value;
    CFTypeID v7 = CFNumberGetTypeID();
    if (v6)
    {
      if (CFGetTypeID(v6) == v7) {
        CFNumberGetValue(*(CFNumberRef *)value, kCFNumberIntType, &v55);
      }
    }
  }
  unsigned int v8 = v57;
  uint64_t v9 = &unk_1000A3000;
  if ((v57 & 0x80000000) != 0)
  {
    int v14 = qword_1000A3698;
    if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)value = 67109120;
      *(_DWORD *)&value[4] = v57;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "calib: calculating svc option from 0x%x", value, 8u);
    }
    int v15 = qword_1000A3698;
    if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)value = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "calib: clearing bits", value, 2u);
    }
    unsigned int v10 = v57;
    if ((v57 & 0x400) == 0)
    {
LABEL_11:
      if ((v10 & 0x2A280000) != 0)
      {
        unsigned int v11 = 5;
        LODWORD(valuePtr) = 5;
        int v12 = qword_1000A3698;
        if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)value = 67109376;
          *(_DWORD *)&value[4] = v57;
          *(_WORD *)&value[8] = 1024;
          *(_DWORD *)&value[10] = 5;
          int v13 = "Unable to determine Battery Health Service state. Service Flags:0x%x Service State:%d\n";
LABEL_30:
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v13, value, 0xEu);
        }
      }
      else if ((v10 & 0x20000) != 0)
      {
        unsigned int v11 = 11;
        LODWORD(valuePtr) = 11;
        int v12 = qword_1000A3698;
        if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)value = 67109376;
          *(_DWORD *)&value[4] = v57;
          *(_WORD *)&value[8] = 1024;
          *(_DWORD *)&value[10] = 11;
          int v13 = "Calibration failed. Service Flags:0x%x Service State:%d";
          goto LABEL_30;
        }
      }
      else
      {
        if (qword_1000A36B0 == 5850451) {
          int v16 = (~v10 & 0x1040000) == 0;
        }
        else {
          int v16 = HIBYTE(v10) & 1;
        }
        if ((v10 & 0x40000000) != 0)
        {
          unsigned int v11 = 8;
        }
        else if ((v10 & 0x4000000) != 0)
        {
          unsigned int v11 = 6;
        }
        else if ((v16 & (v10 >> 20)) == 1)
        {
          unsigned int v11 = 3;
        }
        else if (v16)
        {
          unsigned int v11 = 2;
        }
        else if ((v10 & 0x100000) != 0)
        {
          unsigned int v11 = 1;
        }
        else
        {
          if (![(id)qword_1000A4910 BOOLValue]
            || !sub_10003D8C4((uint64_t)&v57))
          {
            if (v55 == 5 || v55 == -1)
            {
              unsigned int v11 = 0;
              LODWORD(valuePtr) = 0;
            }
            else
            {
              unsigned int v11 = 0;
            }
            goto LABEL_41;
          }
          unsigned int v11 = -1;
        }
        LODWORD(valuePtr) = v11;
      }
LABEL_41:
      unsigned int v10 = v57;
      goto LABEL_42;
    }
  }
  else
  {
    unsigned int v10 = HIDWORD(valuePtr) & 0x5164000 | v57;
    unsigned int v57 = v10;
    if ((v8 & 0x400) == 0) {
      goto LABEL_11;
    }
  }
  unsigned int v11 = -1;
  LODWORD(valuePtr) = -1;
LABEL_42:
  int v17 = v55;
  int v18 = HIDWORD(valuePtr);
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
  if (!sub_100039650()) {
    goto LABEL_84;
  }
  CFDictionaryRef v19 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"calibration0");
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v19);
  if (!MutableCopy) {
    goto LABEL_84;
  }
  CFDictionaryRef v21 = MutableCopy;
  CFDateRef v22 = qword_1000A3698;
  if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)value = 67109888;
    *(_DWORD *)&value[4] = v17;
    *(_WORD *)&value[8] = 1024;
    *(_DWORD *)&value[10] = v18;
    LOWORD(v61) = 1024;
    *(_DWORD *)((char *)&v61 + 2) = v11;
    HIWORD(v61) = 1024;
    unsigned int v62 = v10;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "calib0: updating calibraiton flags using psvc%d psvcflag0x%x -> svc%d svcflag0x%x", value, 0x1Au);
  }
  uint64_t v59 = 0;
  *(void *)value = 0;
  if (CFDictionaryGetValueIfPresent(v21, @"calibrationFlags", (const void **)value))
  {
    CFStringRef v23 = *(const void **)value;
    CFTypeID v24 = CFNumberGetTypeID();
    if (v23)
    {
      if (CFGetTypeID(v23) == v24) {
        CFNumberGetValue(*(CFNumberRef *)value, kCFNumberSInt64Type, &v59);
      }
    }
  }
  CFBooleanRef v25 = objc_msgSend(a1, "objectForKeyedSubscript:", @"BatteryData", v59);
  CFNumberRef v54 = [v25 objectForKeyedSubscript:@"LifetimeData"];
  BOOL v27 = v11 != 6 && v11 - 4 < 0xFFFFFFFD;
  if ((v10 & 0x80000000) == 0)
  {
    uint64_t v9 = &unk_1000A3000;
    if (v18 < 0)
    {
      CFBooleanRef v28 = [v54 objectForKeyedSubscript:@"TotalOperatingTime"];
      unsigned int v29 = [v28 intValue];

      unsigned int v58 = v29;
      CFNumberRef v30 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v58);
      if (v30)
      {
        CFNumberRef v31 = v30;
        CFDictionarySetValue(v21, @"exitTotalOperatingTime", v30);
        CFRelease(v31);
      }
      uint64_t v32 = qword_1000A3698;
      if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)value = 67109120;
        *(_DWORD *)&value[4] = v58;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "calib0: just finished recalibrating, ToT:%d", value, 8u);
      }
      if (v11 <= 6 && ((1 << v11) & 0x4E) != 0) {
        v59 |= 8uLL;
      }
      uint64_t v9 = &unk_1000A3000;
    }
    goto LABEL_79;
  }
  if (v11 <= 6 && ((1 << v11) & 0x4E) != 0)
  {
    v59 |= 2uLL;
    if (v17 != 9) {
      BOOL v27 = 1;
    }
    uint64_t v9 = &unk_1000A3000;
    if (v27) {
      goto LABEL_79;
    }
    if (!CFDictionaryContainsKey(v21, @"svcTotalOperatingTime"))
    {
      int v33 = [v54 objectForKeyedSubscript:@"TotalOperatingTime"];
      unsigned int v34 = [v33 intValue];

      unsigned int v58 = v34;
      CFNumberRef v35 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v58);
      if (v35)
      {
        CFNumberRef v36 = v35;
        CFDictionarySetValue(v21, @"svcTotalOperatingTime", v35);
        CFRelease(v36);
      }
      int v37 = qword_1000A3698;
      if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)value = 136315394;
        *(void *)&value[4] = "svcTotalOperatingTime";
        *(_WORD *)&value[12] = 1024;
        LODWORD(v61) = v58;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "calib0: captured %s=%d", value, 0x12u);
      }
      uint64_t v9 = &unk_1000A3000;
    }
    uint64_t v38 = v59 | 4;
  }
  else
  {
    uint64_t v9 = &unk_1000A3000;
    if (v11 == 6 || v17 != 10) {
      goto LABEL_79;
    }
    uint64_t v38 = v59 | 0x10;
  }
  uint64_t v59 = v38;
LABEL_79:
  CFNumberRef v39 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, &v59);
  if (v39)
  {
    CFNumberRef v40 = v39;
    CFDictionarySetValue(v21, @"calibrationFlags", v39);
    CFRelease(v40);
  }
  CFDictionarySetValue(theDict, @"calibration0", v21);
  CFTypeID v41 = *((void *)v9 + 211);
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)value = 134218240;
    *(void *)&value[4] = v52;
    *(_WORD *)&value[12] = 2048;
    uint64_t v61 = v59;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "calib0: updated calibration flags 0x%lx -> 0x%lx", value, 0x16u);
  }

  CFRelease(v21);
LABEL_84:
  if (v11 == 5 || v11 == -1)
  {
    BOOL v42 = *((void *)v9 + 211);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)value = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "calib: skipping due to precedence", value, 2u);
    }
  }
  else if ((v8 & 0x80000000) != 0)
  {
    LODWORD(valuePtr) = 9;
    uint64_t v59 = 0;
    CFDictionaryRef v47 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"calibration0");
    if (v47)
    {
      *(void *)value = 0;
      if (CFDictionaryGetValueIfPresent(v47, @"calibrationFlags", (const void **)value)
        && (__int16 v48 = *(const void **)value, v49 = CFNumberGetTypeID(), v48)
        && CFGetTypeID(v48) == v49)
      {
        CFNumberGetValue(*(CFNumberRef *)value, kCFNumberSInt64Type, &v59);
        uint64_t v50 = v59;
      }
      else
      {
        uint64_t v50 = 0;
      }
      unsigned int v51 = *((void *)v9 + 211);
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)value = 134217984;
        *(void *)&value[4] = v50;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "calib: read current calibration flags 0x%lx", value, 0xCu);
        LOBYTE(v5sub_100019490(0, 0) = v59;
      }
      if (v50) {
        LODWORD(valuePtr) = 10;
      }
    }
  }
  CFNumberRef v43 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v57);
  if (v43)
  {
    CFNumberRef v44 = v43;
    CFDictionarySetValue(theDict, @"Battery Service Flags", v43);
    CFRelease(v44);
  }
  CFNumberRef v45 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  if (v45)
  {
    CFNumberRef v46 = v45;
    CFDictionarySetValue(theDict, @"Battery Service State", v45);
    CFRelease(v46);
  }
}

void sub_1000316A4(void *a1, void *a2)
{
  unsigned int v3 = a1;
  id v4 = a2;
  int v5 = v4;
  if (v4)
  {
    xpc_object_t reply = xpc_dictionary_create_reply(v4);
    if (reply)
    {
      if (sub_10005D5C0(v3, @"com.apple.private.iokit.batteryTester", 1))
      {
        int64_t int64 = xpc_dictionary_get_int64(v5, "setBHUpdateTimeDelta");
        if ((unint64_t)(int64 - 0x100000000) > 0xFFFFFFFF00000000)
        {
          dword_1000A2F40 = int64;
          uint64_t v9 = qword_1000A3698;
          if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
          {
            v10[0] = 67109120;
            v10[1] = dword_1000A2F40;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Changed NCC update time delta to %u\n", (uint8_t *)v10, 8u);
          }
          uint64_t v8 = 0;
        }
        else
        {
          uint64_t v8 = -536870206;
          if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR)) {
            sub_10006859C();
          }
        }
      }
      else
      {
        uint64_t v8 = -536870207;
        if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR)) {
          sub_100068604();
        }
      }
      xpc_dictionary_set_uint64(reply, "returnCode", v8);
      xpc_connection_send_message(v3, reply);
    }
    else if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR))
    {
      sub_1000657D8();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR))
  {
    sub_1000657A4();
  }
}

void sub_100031898(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  int v5 = v4;
  if (v3 && v4)
  {
    xpc_object_t reply = xpc_dictionary_create_reply(v4);
    if (reply)
    {
      CFTypeID v7 = qword_1000A4930;
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      _DWORD v8[2] = sub_1000319C8;
      v8[3] = &unk_100091278;
      id v9 = v3;
      id v10 = reply;
      dispatch_async(v7, v8);
    }
    else if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR))
    {
      sub_100068638();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR))
  {
    sub_10006866C();
  }
}

void sub_1000319C8(uint64_t a1)
{
  uint64_t v2 = -536870211;
  unsigned int v17 = 3;
  if (sub_10005D5C0(*(xpc_connection_t *)(a1 + 32), @"com.apple.private.iokit.batteryhealthstate", 0))
  {
    dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
    CFMutableDictionaryRef v3 = sub_10003224C();
    CFMutableDictionaryRef v4 = v3;
    if (v3
      && ([(__CFDictionary *)v3 objectForKeyedSubscript:@"Battery Service State"],
          int v5 = objc_claimAutoreleasedReturnValue(),
          v5,
          v5))
    {
      int v6 = [(__CFDictionary *)v4 objectForKeyedSubscript:@"Battery Service State"];
      id v7 = [v6 unsignedIntValue];

      uint64_t v8 = [(__CFDictionary *)v4 objectForKeyedSubscript:@"Battery Service Flags"];
      unsigned int v17 = [v8 unsignedIntValue];

      if ((v17 & 0x400000) != 0)
      {
        uint64_t v9 = 4;
      }
      else if ((int)v7 <= 0)
      {
        uint64_t v9 = (uint64_t)v7;
        if (v7)
        {
          if (v7 == -1) {
            uint64_t v9 = sub_10003D8C4((uint64_t)&v17) - 1;
          }
          else {
            uint64_t v9 = 0xFFFFFFFFLL;
          }
        }
      }
      else
      {
        uint64_t v9 = 3;
      }
      if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEBUG)) {
        sub_100068808();
      }
      id v10 = objc_alloc((Class)NSMutableDictionary);
      unsigned int v11 = +[NSNumber numberWithInt:v7];
      int v12 = +[NSNumber numberWithInt:v9];
      id v13 = objc_msgSend(v10, "initWithObjectsAndKeys:", v11, @"IOPSBatteryHealthServiceState", v12, @"IOPSBatteryHealthState", 0);

      int v14 = (void *)qword_1000A3698;
      if (v13)
      {
        if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEBUG)) {
          sub_10006873C(v14, (uint64_t)v13);
        }
        int v15 = (void *)_CFXPCCreateXPCObjectFromCFObject();
        if (v15)
        {
          int v16 = v15;
          xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 40), "IOPSPrivateBatteryHealthState", v15);

          uint64_t v2 = 0;
        }
        else
        {
          if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR)) {
            sub_100068708();
          }
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR))
      {
        sub_1000686D4();
      }
    }
    else
    {

      uint64_t v2 = -536870184;
    }
  }
  else
  {
    uint64_t v2 = -536870207;
  }
  xpc_dictionary_set_uint64(*(xpc_object_t *)(a1 + 40), "returnCode", v2);
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 32), *(xpc_object_t *)(a1 + 40));
}

uint64_t sub_100031C58(const __CFDictionary *a1)
{
  CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)sub_100031CBC, 0);

  return _CFPreferencesSynchronizeWithContainer();
}

uint64_t sub_100031CBC()
{
  return _CFPreferencesSetValueWithContainer();
}

uint64_t sub_100031CE8()
{
  _CFPreferencesSetValueWithContainer();

  return _CFPreferencesSynchronizeWithContainer();
}

CFDictionaryRef sub_100031D6C()
{
  CFDictionaryRef v0 = (const __CFDictionary *)_CFPreferencesCopyMultipleWithContainer();
  CFDictionaryRef v1 = v0;
  if (!v0 || !CFDictionaryGetCount(v0))
  {
    uint64_t v2 = qword_1000A3698;
    if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Failed to read battery health data from custom container location\n", buf, 2u);
    }
    if (v1) {
      CFRelease(v1);
    }
    CFDictionaryRef v3 = CFPreferencesCopyMultiple(0, @"com.apple.batteryhealthdata", kCFPreferencesAnyUser, kCFPreferencesCurrentHost);
    CFDictionaryRef v1 = v3;
    if (v3 && (CFIndex Count = CFDictionaryGetCount(v3)) != 0)
    {
      uint64_t v5 = Count;
      int v6 = qword_1000A3698;
      if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Battery data read from default prefs\n", buf, 2u);
      }
      CFDictionaryApplyFunction(v1, (CFDictionaryApplierFunction)sub_100031CBC, 0);
      _CFPreferencesSynchronizeWithContainer();
      id v7 = (const void **)malloc_type_malloc(8 * v5, 0xC0040B8AA526DuLL);
      if (v7)
      {
        id v13 = v7;
        CFDictionaryGetKeysAndValues(v1, v7, 0);
        if (v5 >= 1)
        {
          uint64_t v8 = (CFStringRef *)v13;
          do
          {
            CFPreferencesSetValue(*v8, 0, @"com.apple.batteryhealthdata", kCFPreferencesAnyUser, kCFPreferencesCurrentHost);
            uint64_t v9 = qword_1000A3698;
            if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
            {
              CFStringRef v10 = *v8;
              *(_DWORD *)buf = 138412290;
              CFStringRef v15 = v10;
              _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Deleting key %@ from old store\n", buf, 0xCu);
            }
            ++v8;
            --v5;
          }
          while (v5);
        }
        free(v13);
      }
      else if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR))
      {
        sub_1000688B0();
      }
    }
    else
    {
      unsigned int v11 = qword_1000A3698;
      if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Failed to read battery data from default prefs\n", buf, 2u);
      }
    }
  }
  return v1;
}

uint64_t sub_10003205C()
{
  CFDictionaryRef v0 = (const char *)container_system_group_path_for_identifier();
  if (!v0)
  {
    if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR)) {
      sub_1000688E4();
    }
    return 0;
  }
  CFDictionaryRef v1 = (char *)v0;
  CFStringRef v2 = CFStringCreateWithCString(0, v0, 0x8000100u);
  free(v1);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = _CFPreferencesCopyMultipleWithContainer();
  CFRelease(v2);
  return v3;
}

uint64_t sub_100032134()
{
  uint64_t v3 = 0;
  CFMutableDictionaryRef v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v6 = 0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000321E0;
  block[3] = &unk_100091458;
  void block[4] = &v3;
  dispatch_sync((dispatch_queue_t)qword_1000A4930, block);
  uint64_t v0 = v4[3];
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1000321E0(uint64_t a1)
{
  CFDictionaryRef v2 = sub_10003224C();
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFDictionaryCreateCopy(kCFAllocatorDefault, v2);
    CFRelease(v3);
  }
}

CFMutableDictionaryRef sub_10003224C()
{
  uint64_t valuePtr = 0;
  value = 0;
  CFNumberRef v40 = 0;
  if (sub_10002BCB8())
  {
    int v0 = sub_100021A64();
    if ((v0 - 1) >= 2)
    {
      char v1 = 0;
      if (v0)
      {
        HIDWORD(valuePtr) = 0x800000;
        int v2 = -1;
      }
      else
      {
        HIDWORD(valuePtr) = 0x400000;
        int v2 = 12;
      }
      LODWORD(valuePtr) = v2;
    }
    else
    {
      char v1 = 1;
    }
  }
  else
  {
    char v1 = 1;
  }
  if (!os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEBUG))
  {
    if (v1) {
      goto LABEL_11;
    }
LABEL_47:
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (Mutable)
    {
      CFMutableDictionaryRef v5 = Mutable;
      BOOL v27 = +[NSNumber numberWithUnsignedInt:HIDWORD(valuePtr) | 3u];
      [(__CFDictionary *)v5 setObject:v27 forKeyedSubscript:@"Battery Service Flags"];

      CFBooleanRef v28 = +[NSNumber numberWithInt:valuePtr];
      [(__CFDictionary *)v5 setObject:v28 forKeyedSubscript:@"Battery Service State"];

      return v5;
    }
    if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR)) {
      goto LABEL_52;
    }
    return 0;
  }
  sub_100068B08();
  if ((v1 & 1) == 0) {
    goto LABEL_47;
  }
LABEL_11:
  CFDictionaryRef v3 = sub_100031D6C();
  if (v3)
  {
    CFDictionaryRef v4 = v3;
    if (CFDictionaryGetCount(v3))
    {
      CFMutableDictionaryRef v5 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v4);
      uint64_t v6 = [(__CFDictionary *)v5 objectForKeyedSubscript:@"Battery Service Flags"];
      int v7 = [v6 intValue];

      if ((v7 & 0xC00000) != 0)
      {
        uint64_t v8 = qword_1000A3698;
        if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR)) {
          sub_100068A88(v7, v8, v9);
        }
        CFStringRef v10 = +[NSNumber numberWithUnsignedInt:v7 & 0xFF3FFFFF];
        [(__CFDictionary *)v5 setObject:v10 forKeyedSubscript:@"Battery Service Flags"];

        unsigned int v11 = (void *)qword_1000A3698;
        if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
        {
          int v12 = v11;
          id v13 = [(__CFDictionary *)v5 objectForKeyedSubscript:@"Battery Service Flags"];
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = [v13 intValue];
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Invalid auth condition: recoveredflags:0x%x", buf, 8u);
        }
      }
      CFRelease(v4);

      return v5;
    }
    CFRelease(v4);
  }
  if (MKBDeviceUnlockedSinceBoot() != 1)
  {
    if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR)) {
      sub_100068A54();
    }
    return 0;
  }
  CFMutableDictionaryRef v14 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!v14)
  {
    if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR)) {
LABEL_52:
    }
      sub_100068950();
    return 0;
  }
  CFMutableDictionaryRef v5 = v14;
  CFDictionaryRef v15 = (const __CFDictionary *)sub_10003205C();
  CFDictionaryRef v16 = v15;
  if (v15)
  {
    CFDictionaryGetValueIfPresent(v15, @"BatterySerial", (const void **)&value);
    CFDictionaryGetValueIfPresent(v16, @"MaximumCapacityPercent", (const void **)&v40);
    *(void *)buf = 0;
    if (CFDictionaryGetValueIfPresent(v16, @"batteryServiceFlags", (const void **)buf))
    {
      CFNumberRef v17 = *(CFNumberRef *)buf;
      CFTypeID TypeID = CFNumberGetTypeID();
      if (v17)
      {
        if (CFGetTypeID(v17) == TypeID) {
          CFNumberGetValue(*(CFNumberRef *)buf, kCFNumberIntType, (char *)&valuePtr + 4);
        }
      }
    }
    *(void *)buf = 0;
    if (CFDictionaryGetValueIfPresent(v16, @"batteryServiceRecommended", (const void **)buf))
    {
      CFNumberRef v19 = *(CFNumberRef *)buf;
      CFTypeID v20 = CFNumberGetTypeID();
      if (v19)
      {
        if (CFGetTypeID(v19) == v20) {
          CFNumberGetValue(*(CFNumberRef *)buf, kCFNumberIntType, &valuePtr);
        }
      }
    }
  }
  CFDictionaryRef v21 = qword_1000A3698;
  if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&uint8_t buf[4] = HIDWORD(valuePtr);
    __int16 v44 = 1024;
    int v45 = valuePtr;
    __int16 v46 = 2114;
    CFDictionaryRef v47 = v40;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Battery Health data from powerlog's prefs. SvcFlags:0x%x SvcState:%d MaxCapacity:%{public}@\n", buf, 0x18u);
  }
  CFDateRef v22 = value;
  CFTypeID v23 = CFStringGetTypeID();
  if (v22 && CFGetTypeID(v22) == v23)
  {
    CFDictionarySetValue(v5, @"Battery Serial", value);
  }
  else
  {
    CFTypeID v24 = qword_1000A3698;
    if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "No battery serial number found powerlog's battery health state.\n", buf, 2u);
    }
  }
  if ((BYTE4(valuePtr) & 0x1F) == 1)
  {
    int v30 = HIDWORD(valuePtr) & 0x5140000 | 3;
  }
  else
  {
    if ((valuePtr & 0x1F00000000) != 0)
    {
      if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR)) {
        sub_100068984();
      }
    }
    else
    {
      int v25 = valuePtr + 1;
      if (valuePtr + 1) < 8 && ((0xDFu >> v25))
      {
        int v30 = dword_100075EF4[v25];
        goto LABEL_59;
      }
      if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR)) {
        sub_1000689EC();
      }
    }
    int v30 = 3;
  }
LABEL_59:
  int v39 = v30;
  CFNumberRef v31 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v39);
  if (v31)
  {
    CFNumberRef v32 = v31;
    CFDictionarySetValue(v5, @"Battery Service Flags", v31);
    CFRelease(v32);
  }
  int v33 = qword_1000A3698;
  if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v39;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Battery service flags after migration: 0x%x\n", buf, 8u);
  }
  CFNumberRef v34 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  if (v34)
  {
    CFNumberRef v35 = v34;
    CFDictionarySetValue(v5, @"Battery Service State", v34);
    CFRelease(v35);
  }
  CFNumberRef v36 = v40;
  CFTypeID v37 = CFNumberGetTypeID();
  if (v36 && CFGetTypeID(v36) == v37)
  {
    CFDictionarySetValue(v5, @"Maximum Capacity Percent", v40);
  }
  else
  {
    uint64_t v38 = qword_1000A3698;
    if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "No MaxBatteryCapacity found in powerlog's battery health state\n", buf, 2u);
    }
  }
  if (v16) {
    CFRelease(v16);
  }
  return v5;
}

void sub_100032954(void *a1, CFMutableDictionaryRef theDict, unsigned int *a3)
{
  int v69 = -1;
  int v70 = 0;
  if (a3)
  {
    unsigned int v6 = *a3;
    if (theDict)
    {
      if ((v6 & 0x80000000) == 0) {
        goto LABEL_4;
      }
    }
    else
    {
      v6 |= 0x200000u;
      *a3 = v6;
      if ((v6 & 0x80000000) == 0)
      {
LABEL_4:
        if (sub_100033684(theDict)) {
          goto LABEL_15;
        }
        unsigned int valuePtr = -1;
        value = 0;
        if (!CFDictionaryGetValueIfPresent(theDict, @"Battery Service State", (const void **)&value)
          || (int v7 = value, v8 = CFNumberGetTypeID(), !v7)
          || CFGetTypeID(v7) != v8
          || (CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr), valuePtr - 9 > 1)
          || (CFDictionaryRemoveValue(theDict, @"CycleCount"),
              CFDictionaryRemoveValue(theDict, @"Maximum Capacity Percent"),
              uint64_t v9 = qword_1000A3698,
              !os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT)))
        {
LABEL_15:
          id v11 = a1;
          int v12 = theDict;
          unsigned int valuePtr = 0;
          id v13 = [(__CFDictionary *)v12 objectForKeyedSubscript:@"Battery Service Flags"];
          unsigned int v14 = [v13 intValue];

          unsigned int valuePtr = v14;
          if (sub_10003D8B4()) {
            sub_10003D8D0(v11, v12, a3, (int *)&valuePtr);
          }
          CFDictionaryRef v15 = sub_100014744();
          if (sub_10002BCB8())
          {
            if (v15)
            {
              uint64_t v16 = [v15 objectForKeyedSubscript:@"Trusted Data Enabled"];
              if (v16)
              {
                CFNumberRef v17 = (void *)v16;
                int v18 = [v15 objectForKeyedSubscript:@"Trusted Data Enabled"];
                unsigned int v19 = [v18 intValue];

                if (v12)
                {
                  if (v19)
                  {
                    id v20 = v15;
                    CFDictionaryRef v21 = v12;
                    CFDateRef v22 = [(__CFDictionary *)v21 objectForKeyedSubscript:@"Maximum Capacity Percent"];

                    if (v22)
                    {
                      CFTypeID v23 = [(__CFDictionary *)v21 objectForKeyedSubscript:@"Maximum Capacity Percent"];
                      int v24 = [v23 intValue];
                    }
                    else
                    {
                      int v24 = -1;
                    }
                    int v45 = [v20 objectForKeyedSubscript:@"Trusted Maximum Capacity"];

                    if (v45)
                    {
                      if (v24 != -1)
                      {
                        __int16 v46 = [v20 objectForKeyedSubscript:@"Trusted Maximum Capacity"];
                        signed int v47 = [v46 intValue];

                        if (v47 > v24)
                        {
                          __int16 v48 = (void *)qword_1000A3698;
                          if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR)) {
                            sub_100068DF4(v48, v20, v24);
                          }
LABEL_90:

                          int v70 = v24;
                          id v50 = v20;
                          unsigned int v51 = v21;
                          uint64_t v52 = [(__CFDictionary *)v51 objectForKeyedSubscript:@"CycleCount"];

                          if (v52)
                          {
                            CFNumberRef v53 = [(__CFDictionary *)v51 objectForKeyedSubscript:@"CycleCount"];
                            uint64_t v54 = (uint64_t)[v53 intValue];
                          }
                          else
                          {
                            uint64_t v54 = 0xFFFFFFFFLL;
                          }
                          int v55 = [v50 objectForKeyedSubscript:@"Trusted Cycle Count"];

                          if (v55)
                          {
                            CFNumberRef v56 = [v50 objectForKeyedSubscript:@"Trusted Cycle Count"];
                            int v57 = [v56 intValue];

                            if (v57 > (int)v54)
                            {
                              unsigned int v58 = [v50 objectForKeyedSubscript:@"Trusted Cycle Count"];
                              uint64_t v54 = (uint64_t)[v58 intValue];
                            }
                          }
                          else if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR))
                          {
                            sub_100068D24();
                          }
                          if (v54 == -1)
                          {
                            *a3 |= 0x200000u;
                            if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR)) {
                              sub_100068CBC();
                            }
                          }

                          uint64_t v59 = +[NSNumber numberWithInt:v54];
                          [(__CFDictionary *)v51 setObject:v59 forKeyedSubscript:@"CycleCount"];

                          int v28 = 0;
                          int v26 = 0;
LABEL_115:
                          if (v24 <= 79)
                          {
                            *a3 |= 0x100000u;
                            int v63 = qword_1000A3698;
                            if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
                            {
                              LODWORD(value) = 67109376;
                              HIDWORD(value) = v24;
                              __int16 v73 = 1024;
                              int v74 = 80;
                              _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "Nominal Capacity percentage(%d) is less than the threshold(%d)\n", (uint8_t *)&value, 0xEu);
                            }
                          }
                          CFNumberRef v64 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v70);
                          if (v64)
                          {
                            CFNumberRef v65 = v64;
                            CFDictionarySetValue(v12, @"Maximum Capacity Percent", v64);
                            CFRelease(v65);
                          }
                          CFNumberRef v66 = qword_1000A3698;
                          if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEBUG))
                          {
                            LODWORD(value) = 67109632;
                            HIDWORD(value) = v26;
                            __int16 v73 = 1024;
                            int v74 = v28;
                            __int16 v75 = 1024;
                            *(_DWORD *)__int16 v76 = v70;
                            _os_log_debug_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "Battery NominalCapacity:%d DesignCapacity:%d NCC:%d\n", (uint8_t *)&value, 0x14u);
                          }
                          goto LABEL_122;
                        }
                      }
                      CFTypeID v49 = [v20 objectForKeyedSubscript:@"Trusted Maximum Capacity"];
                      int v24 = [v49 intValue];
                    }
                    else if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR))
                    {
                      sub_100068DC0();
                    }
                    if (v24 == -1)
                    {
                      *a3 |= 0x200000u;
                      if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR)) {
                        sub_100068D58();
                      }
                      int v24 = -1;
                    }
                    goto LABEL_90;
                  }
                }
              }
            }
          }
          int v25 = [v11 objectForKeyedSubscript:@"NominalChargeCapacity"];
          int v26 = [v25 intValue];

          BOOL v27 = [v11 objectForKeyedSubscript:@"DesignCapacity"];
          int v28 = [v27 intValue];

          if (v26 < 1 || v28 <= 0)
          {
            if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR)) {
              sub_100068B80();
            }
          }
          else
          {
            int v24 = vcvtpd_s64_f64((double)v26 / (double)v28 * 100.0);
            int v70 = v24;
            if ((v24 - 1) >= 0x96)
            {
              if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR)) {
                sub_100068C54();
              }
            }
            else
            {
              value = 0;
              if (CFDictionaryGetValueIfPresent(v12, @"Maximum Capacity Percent", (const void **)&value))
              {
                unsigned int v29 = value;
                CFTypeID TypeID = CFNumberGetTypeID();
                if (v29)
                {
                  if (CFGetTypeID(v29) == TypeID) {
                    CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &v69);
                  }
                }
              }
              if (!byte_1000A2F44)
              {
                unint64_t v39 = sub_10005E248();
                unint64_t v40 = v39 - qword_1000A4C08;
                CFDictionaryRemoveValue(v12, @"CycleCount");
                sub_100031CE8();
                int v41 = v69;
                if (v69 == -1)
                {
                  int v69 = v24;
                  qword_1000A4C08 = v39;
                  BOOL v42 = qword_1000A3698;
                  if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(value) = 67109120;
                    HIDWORD(value) = v24;
                    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "Previous NCCP data not available. Reset to %d.\n", (uint8_t *)&value, 8u);
                  }
                  int v41 = v69;
                }
                CFNumberRef v43 = qword_1000A3698;
                if (v41 > v24 && v40 >= dword_1000A2F40)
                {
                  if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(value) = 67110144;
                    HIDWORD(value) = v69;
                    __int16 v73 = 1024;
                    int v74 = v24;
                    __int16 v75 = 2048;
                    *(void *)__int16 v76 = v40;
                    *(_WORD *)&v76[8] = 1024;
                    *(_DWORD *)id v77 = v26;
                    *(_WORD *)&v77[4] = 1024;
                    v78[0] = v28;
                    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Changing NCCP from %d -> %d after %llu secs. NCC:%d DesignCap:%d\n", (uint8_t *)&value, 0x24u);
                  }
                  qword_1000A4C08 = v39;
                }
                else
                {
                  if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEBUG)) {
                    sub_100068BE8();
                  }
                  int v24 = v69;
                  int v70 = v69;
                }
                goto LABEL_115;
              }
              int v67 = -1;
              int v68 = -1;
              value = 0;
              if (CFDictionaryGetValueIfPresent(v12, @"CycleCount", (const void **)&value))
              {
                CFNumberRef v31 = value;
                CFTypeID v32 = CFNumberGetTypeID();
                if (v31)
                {
                  if (CFGetTypeID(v31) == v32) {
                    CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &v67);
                  }
                }
              }
              value = 0;
              if (CFDictionaryGetValueIfPresent((CFDictionaryRef)v11, @"CycleCount", (const void **)&value))
              {
                int v33 = value;
                CFTypeID v34 = CFNumberGetTypeID();
                if (v33)
                {
                  if (CFGetTypeID(v33) == v34) {
                    CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &v68);
                  }
                }
              }
              if (v68 != -1)
              {
                if (v67 == -1)
                {
                  int v67 = v68;
                  CFNumberRef v35 = qword_1000A3698;
                  if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(value) = 67109120;
                    HIDWORD(value) = v68;
                    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Previous cycle count data is not available. Reset to %d\n", (uint8_t *)&value, 8u);
                  }
                }
                if (v69 == -1)
                {
                  if ((v6 & 0x80000000) == 0 && v68 <= 20)
                  {
                    int v24 = 104;
                    int v70 = 104;
                  }
                  int v69 = v24;
                  CFNumberRef v36 = qword_1000A3698;
                  if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(value) = 67109376;
                    HIDWORD(value) = v24;
                    __int16 v73 = 1024;
                    int v74 = v68;
                    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Previous NCCP data not available. Reset to %d. Cycle Count: %d\n", (uint8_t *)&value, 0xEu);
                  }
                }
                if (sub_10003D8B4()
                  && [(id)qword_1000A4910 BOOLValue]
                  && ((sub_10003D8B8((uint64_t)a3) & 1) != 0 || sub_10003D8C4((uint64_t)a3)))
                {
                  int v24 = v69;
                  int v70 = v69;
                  CFTypeID v37 = qword_1000A3698;
                  if (!os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_113;
                  }
                  LODWORD(value) = 67110400;
                  HIDWORD(value) = v69;
                  __int16 v73 = 1024;
                  int v74 = v24;
                  __int16 v75 = 1024;
                  *(_DWORD *)__int16 v76 = v67;
                  *(_WORD *)&v76[4] = 1024;
                  *(_DWORD *)&v76[6] = v68;
                  *(_WORD *)id v77 = 1024;
                  *(_DWORD *)&v77[2] = v26;
                  LOWORD(v78[0]) = 1024;
                  *(_DWORD *)((char *)v78 + 2) = v28;
                  uint64_t v38 = "Changing NCCP from %d -> %d (freeze), cycle count change(%d->%d). NCC:%d DesignCap:%d\n";
                }
                else if (sub_100033728((uint64_t)&valuePtr, (uint64_t)a3))
                {
                  if (v24 >= v69) {
                    int v24 = v69;
                  }
                  int v70 = v24;
                  CFTypeID v37 = qword_1000A3698;
                  if (!os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_113;
                  }
                  LODWORD(value) = 67110400;
                  HIDWORD(value) = v69;
                  __int16 v73 = 1024;
                  int v74 = v24;
                  __int16 v75 = 1024;
                  *(_DWORD *)__int16 v76 = v67;
                  *(_WORD *)&v76[4] = 1024;
                  *(_DWORD *)&v76[6] = v68;
                  *(_WORD *)id v77 = 1024;
                  *(_DWORD *)&v77[2] = v26;
                  LOWORD(v78[0]) = 1024;
                  *(_DWORD *)((char *)v78 + 2) = v28;
                  uint64_t v38 = "Changing NCCP from %d -> %d (reset), cycle count change(%d->%d). NCC:%d DesignCap:%d\n";
                }
                else
                {
                  if (v68 - v67 < 5 || v69 <= v24)
                  {
                    int v70 = v69;
                    int v68 = v67;
                    int v24 = v69;
LABEL_113:
                    CFNumberRef v61 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v68);
                    if (v61)
                    {
                      CFNumberRef v62 = v61;
                      CFDictionarySetValue(v12, @"CycleCount", v61);
                      CFRelease(v62);
                    }
                    goto LABEL_115;
                  }
                  int v24 = v69 - 1;
                  int v70 = v69 - 1;
                  CFTypeID v37 = qword_1000A3698;
                  if (!os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_113;
                  }
                  LODWORD(value) = 67110400;
                  HIDWORD(value) = v69;
                  __int16 v73 = 1024;
                  int v74 = v24;
                  __int16 v75 = 1024;
                  *(_DWORD *)__int16 v76 = v67;
                  *(_WORD *)&v76[4] = 1024;
                  *(_DWORD *)&v76[6] = v68;
                  *(_WORD *)id v77 = 1024;
                  *(_DWORD *)&v77[2] = v26;
                  LOWORD(v78[0]) = 1024;
                  *(_DWORD *)((char *)v78 + 2) = v28;
                  uint64_t v38 = "Changing NCCP from %d -> %d after cycle count change(%d->%d). NCC:%d DesignCap:%d\n";
                }
                _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, v38, (uint8_t *)&value, 0x26u);
                goto LABEL_113;
              }
              CFNumberRef v60 = qword_1000A3698;
              if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR))
              {
                LODWORD(value) = 67109632;
                HIDWORD(value) = v26;
                __int16 v73 = 1024;
                int v74 = v28;
                __int16 v75 = 1024;
                *(_DWORD *)__int16 v76 = v68;
                _os_log_error_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "Failed to calculate Nominal Capacity percentage. NominalCapacity:%d DesignCapacity:%d CycleCount:%d\n", (uint8_t *)&value, 0x14u);
              }
            }
          }
          *a3 |= 0x200000u;
LABEL_122:

          return;
        }
        LOWORD(value) = 0;
        CFStringRef v10 = "calib: resetting NCC";
LABEL_14:
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&value, 2u);
        goto LABEL_15;
      }
    }
    CFDictionaryRemoveValue(theDict, @"CycleCount");
    CFDictionaryRemoveValue(theDict, @"Maximum Capacity Percent");
    uint64_t v9 = qword_1000A3698;
    if (!os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_15;
    }
    LOWORD(value) = 0;
    CFStringRef v10 = "calib: floating NCC";
    goto LABEL_14;
  }
}

CFDictionaryRef sub_100033684(const __CFDictionary *a1)
{
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
  CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(a1, @"calibration0");
  if (result)
  {
    CFNumberRef number = 0;
    uint64_t valuePtr = 0;
    if (CFDictionaryGetValueIfPresent(result, @"calibrationFlags", (const void **)&number)
      && (CFNumberRef v3 = number, TypeID = CFNumberGetTypeID(), v3)
      && CFGetTypeID(v3) == TypeID)
    {
      CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr);
      return (const __CFDictionary *)((valuePtr & 0x400) == 0);
    }
    else
    {
      return (const __CFDictionary *)1;
    }
  }
  return result;
}

id sub_100033728(uint64_t a1, uint64_t a2)
{
  id result = (id)sub_10003D8B4();
  if (result)
  {
    id result = [(id)qword_1000A4910 BOOLValue];
    if (result)
    {
      id result = (id)sub_10003D8C4(a1);
      if (result) {
        return (id)(sub_10003D8C4(a2) ^ 1);
      }
    }
  }
  return result;
}

uint64_t sub_10003377C(uint64_t a1)
{
  if (a1)
  {
    int v1 = *(_DWORD *)(a1 + 36);
    if (v1) {
      LOBYTE(v1) = *(unsigned char *)(a1 + 24) | ((100 * *(_DWORD *)(a1 + 32) / v1) > 0x63);
    }
  }
  else
  {
    LOBYTE(v1) = 0;
  }
  return v1 & 1;
}

void sub_1000337B8(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  CFMutableDictionaryRef v5 = v4;
  if (v3 && v4)
  {
    xpc_object_t reply = xpc_dictionary_create_reply(v4);
    int v7 = reply;
    if (reply)
    {
      CFTypeID v8 = qword_1000A4930;
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      v9[2] = sub_1000338E8;
      v9[3] = &unk_100091278;
      id v10 = reply;
      id v11 = v3;
      dispatch_sync(v8, v9);
    }
    else if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR))
    {
      sub_100068638();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR))
  {
    sub_100065404();
  }
}

void sub_1000338E8(uint64_t a1)
{
  int v2 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 32), "adapterDetails", v2);
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 40), *(xpc_object_t *)(a1 + 32));
  if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEBUG)) {
    sub_100068EB8();
  }
}

uint64_t sub_10003395C()
{
  uint64_t v3 = 0;
  id v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v6 = 0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100033A08;
  block[3] = &unk_100091458;
  void block[4] = &v3;
  dispatch_sync((dispatch_queue_t)qword_1000A4930, block);
  uint64_t v0 = v4[3];
  _Block_object_dispose(&v3, 8);
  return v0;
}

CFTypeRef sub_100033A08(uint64_t a1)
{
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sub_10003B8F4(@"UPS");
  CFTypeRef result = *(CFTypeRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (result)
  {
    return CFRetain(result);
  }
  return result;
}

uint64_t sub_100033A78()
{
  uint64_t v3 = 0;
  id v4 = &v3;
  uint64_t v5 = 0x2020000000;
  int v6 = 1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100033B28;
  block[3] = &unk_100091458;
  void block[4] = &v3;
  dispatch_sync((dispatch_queue_t)qword_1000A4930, block);
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t sub_100033B28(uint64_t a1)
{
  uint64_t result = sub_100033B58();
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_100033B58()
{
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
  CFDictionaryRef v0 = (const __CFDictionary *)sub_10002F344();
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
  CFDictionaryRef v1 = (const __CFDictionary *)sub_10003B8F4(@"UPS");
  CFDictionaryRef v2 = v1;
  if (v0)
  {
    CFDateRef Value = CFDictionaryGetValue(v0, @"Power Source State");
    if (Value && CFEqual(Value, @"Battery Power")) {
      return 2;
    }
    if (v2)
    {
      uint64_t v5 = CFDictionaryGetValue(v2, @"Power Source State");
      if (v5)
      {
        int v6 = v5;
        if (CFEqual(v5, @"Battery Power")) {
          return 3;
        }
        CFEqual(v6, @"AC Power");
      }
    }
    return 1;
  }
  if (!v1) {
    return 1;
  }
  int v7 = CFDictionaryGetValue(v1, @"Power Source State");
  if (!v7) {
    return 1;
  }
  CFTypeID v8 = v7;
  if (CFEqual(v7, @"AC Power")) {
    return 1;
  }
  if (CFEqual(v8, @"Battery Power")) {
    return 3;
  }
  else {
    return 1;
  }
}

uint64_t sub_100033C64(uint64_t a1, _OWORD *a2, uint64_t a3, _DWORD *a4)
{
  pid_t pidp = 0;
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x2020000000;
  v11[3] = 0;
  long long v6 = a2[1];
  *(_OWORD *)atoken.val = *a2;
  *(_OWORD *)&atoken.val[4] = v6;
  audit_token_to_au32(&atoken, 0, 0, 0, 0, 0, &pidp, 0, 0);
  *a4 = -536870212;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100033D7C;
  block[3] = &unk_1000921D8;
  pid_t v9 = pidp;
  void block[4] = v11;
  void block[5] = a4;
  void block[6] = a3;
  dispatch_barrier_sync((dispatch_queue_t)qword_1000A4930, block);
  _Block_object_dispose(v11, 8);
  return 0;
}

void sub_100033D64(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 72), 8);
  _Unwind_Resume(a1);
}

void sub_100033D7C(uint64_t a1)
{
  int v2 = dword_1000A2F58;
  if (dword_1000A2F58 == 0x7FFFFFFF)
  {
    int v2 = 5000;
    dword_1000A2F58 = 5000;
  }
  int v3 = *(_DWORD *)(a1 + 56);
  dispatch_assert_queue_barrier((dispatch_queue_t)qword_1000A4930);
  if (v2 == 99)
  {
    uint64_t v4 = 0;
  }
  else
  {
    long long v6 = &dword_1000A4978;
    uint64_t v4 = 1;
    while (1)
    {
      int v7 = *v6;
      v6 += 10;
      if (!v7) {
        break;
      }
      if (++v4 == 16)
      {
        uint64_t v5 = 0;
        goto LABEL_10;
      }
    }
  }
  uint64_t v5 = &qword_1000A4950[5 * v4];
  v5[4] = 0;
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  *((_DWORD *)v5 + 2) = v3;
  *(_DWORD *)uint64_t v5 = v2;
LABEL_10:
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v5;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    int v8 = dword_1000A2F58++;
    **(_DWORD **)(a1 + 48) = v8;
    dispatch_source_t v9 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_proc, *(int *)(a1 + 56), 0x80000000uLL, (dispatch_queue_t)qword_1000A4930);
    uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    id v11 = *(void **)(v10 + 16);
    *(void *)(v10 + 16) = v9;

    uint64_t v12 = *(void *)(a1 + 32);
    id v13 = *(NSObject **)(*(void *)(*(void *)(v12 + 8) + 24) + 16);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1000340BC;
    handler[3] = &unk_100091458;
    void handler[4] = v12;
    dispatch_source_set_cancel_handler(v13, handler);
    uint64_t v14 = *(void *)(a1 + 32);
    CFDictionaryRef v15 = *(NSObject **)(*(void *)(*(void *)(v14 + 8) + 24) + 16);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_1000342DC;
    v25[3] = &unk_100091458;
    v25[4] = v14;
    dispatch_source_set_event_handler(v15, v25);
    dispatch_resume(*(dispatch_object_t *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 16));
    **(_DWORD **)(a1 + 4sub_100019490(0, 0) = 0;
    uint64_t v16 = qword_1000A36A0;
    if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = **(_DWORD **)(a1 + 48);
      int v18 = *(_DWORD *)(a1 + 56);
      *(_DWORD *)buf = 67109376;
      int v28 = v17;
      __int16 v29 = 1024;
      int v30 = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Created new power source id %d for pid %d\n", buf, 0xEu);
    }
  }
  else
  {
    uint64_t v19 = 0;
    **(_DWORD **)(a1 + 4sub_100019490(0, 0) = -536870181;
    id v20 = qword_1000A36A0;
    do
    {
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        int v22 = HIDWORD(qword_1000A4950[v19]);
        int v21 = qword_1000A4950[v19 + 1];
        int v23 = qword_1000A4950[v19];
        uint64_t v24 = qword_1000A4950[v19 + 3];
        *(_DWORD *)buf = 67109890;
        int v28 = v23;
        __int16 v29 = 1024;
        int v30 = v21;
        __int16 v31 = 1024;
        int v32 = v22;
        __int16 v33 = 2112;
        uint64_t v34 = v24;
        _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "id:%d pid:%d type:%d desc:%@\n", buf, 0x1Eu);
        id v20 = qword_1000A36A0;
      }
      v19 += 5;
    }
    while (v19 != 80);
  }
}

void sub_1000340BC(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 4);
  if (v2 == 3) {
    int v3 = "com.apple.system.accpowersources.timeremaining";
  }
  else {
    int v3 = "com.apple.system.powersources.timeremaining";
  }
  if (v2 == 3) {
    uint64_t v4 = "com.apple.system.accpowersources.attach";
  }
  else {
    uint64_t v4 = "com.apple.system.powersources.attach";
  }
  sub_100034204(v3);
  sub_100034204(v4);
  uint64_t v5 = qword_1000A36A0;
  if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = **(_DWORD **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v11[0] = 67109120;
    v11[1] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Posted notifications for loss of power source id %d\n", (uint8_t *)v11, 8u);
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  int v8 = *(void **)(v7 + 16);
  *(void *)(v7 + 16) = 0;

  uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  uint64_t v10 = *(const void **)(v9 + 24);
  if (v10)
  {
    CFRelease(v10);
    uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  *(void *)(v9 + 32) = 0;
  *(_OWORD *)uint64_t v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  sub_10002F500(0);
}

void sub_100034204(const char *a1)
{
  uint32_t v2 = notify_post(a1);
  int v3 = qword_1000A36A0;
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
      sub_100068F2C();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    uint64_t v5 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "posted '%s'\n", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1000342DC(uint64_t a1)
{
}

uint64_t sub_1000342F0(uint64_t a1, long long *a2, int a3, uint64_t a4, int a5, uint64_t a6)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100034378;
  block[3] = &unk_100092218;
  long long v6 = a2[1];
  long long v9 = *a2;
  long long v10 = v6;
  void block[4] = a6;
  void block[5] = a4;
  int v11 = a3;
  int v12 = a5;
  dispatch_sync((dispatch_queue_t)qword_1000A4930, block);
  return 0;
}

uint64_t sub_100034378(uint64_t a1)
{
  int v2 = -536870206;
  *(void *)pid_t pidp = 0;
  long long v3 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)atoken.val = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&atoken.val[4] = v3;
  audit_token_to_au32(&atoken, 0, 0, 0, 0, 0, &pidp[1], 0, 0);
  **(_DWORD **)(a1 + 32) = -536870212;
  int v4 = (void *)IOCFUnserialize(*(const char **)(a1 + 40), 0, 0, 0);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!v4) {
    goto LABEL_126;
  }
  if (CFGetTypeID(v4) != TypeID)
  {
    **(_DWORD **)(a1 + 32) = -536870206;
    goto LABEL_27;
  }
  long long v6 = (unsigned int *)(a1 + 80);
  uint64_t v7 = sub_100034E64(pidp[1], *(_DWORD *)(a1 + 80));
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
      sub_100068FB0();
    }
    **(_DWORD **)(a1 + 32) = -536870160;
    goto LABEL_27;
  }
  int v8 = v7;
  long long v9 = CFDictionaryGetValue((CFDictionaryRef)v4, @"Power Source ID");
  CFTypeID v10 = CFNumberGetTypeID();
  if (!v9 || CFGetTypeID(v9) != v10)
  {
    LOWORD(pidp[0]) = *(_WORD *)v8;
    HIWORD(pidp[0]) = *((_WORD *)v8 + 4);
    CFNumberRef v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, pidp);
    if (v11)
    {
      CFNumberRef v12 = v11;
      CFDictionarySetValue((CFMutableDictionaryRef)v4, @"Power Source ID", v11);
      CFRelease(v12);
    }
  }
  if (!*((_DWORD *)v8 + 1))
  {
    CFStringRef v27 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v4, @"Type");
    CFTypeID v28 = CFStringGetTypeID();
    if (v27)
    {
      if (CFGetTypeID(v27) == v28)
      {
        if (CFStringCompare(v27, @"Accessory Source", 0))
        {
          if (CFStringCompare(v27, @"UPS", 0) && CFStringCompare(v27, @"Battery Case", 0))
          {
            if (CFStringCompare(v27, @"InternalBattery", 0)) {
              goto LABEL_9;
            }
            int v29 = 1;
          }
          else
          {
            int v29 = 2;
          }
        }
        else
        {
          int v29 = 3;
        }
        *((_DWORD *)v8 + 1) = v29;
      }
    }
  }
LABEL_9:
  unsigned int v13 = *v6;
  unsigned int v14 = pidp[1];
  CFDictionaryRef v15 = CFDictionaryGetValue((CFDictionaryRef)v4, @"Debug Information");
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, (CFDictionaryRef)v4);
  [(__CFDictionary *)MutableCopy removeObjectForKey:@"Debug Information"];
  int v17 = qword_1000A36A0;
  if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEFAULT))
  {
    atoken.val[0] = 67109634;
    atoken.val[1] = v13;
    LOWORD(atoken.val[2]) = 1024;
    *(unsigned int *)((char *)&atoken.val[2] + 2) = v14;
    HIWORD(atoken.val[3]) = 2112;
    *(void *)&atoken.val[4] = MutableCopy;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Received power source(psid:%d) update from pid %d: %@\n", (uint8_t *)&atoken, 0x18u);
  }
  if (v15)
  {
    int v18 = qword_1000A36A0;
    if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEBUG))
    {
      atoken.val[0] = 67109634;
      atoken.val[1] = v13;
      LOWORD(atoken.val[2]) = 1024;
      *(unsigned int *)((char *)&atoken.val[2] + 2) = v14;
      HIWORD(atoken.val[3]) = 2112;
      *(void *)&atoken.val[4] = v15;
      _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Received power source(psid:%d) update from pid %d: %@\n", (uint8_t *)&atoken, 0x18u);
    }
  }

  uint64_t v19 = v8;
  int v20 = *((_DWORD *)v8 + 1);
  if ((v20 - 1) >= 2)
  {
    if (v20 == 3)
    {
      value = 0;
      uint64_t valuePtr = 0;
      id v88 = 0;
      uint64_t v89 = 0;
      id v87 = 0;
      CFStringRef v22 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v4, @"Power Source State");
      CFNumberRef v23 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v4, @"Current Capacity");
      if (!v23 || (CFNumberGetValue(v23, kCFNumberIntType, &valuePtr), !v22))
      {
        if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
          sub_100069020();
        }
        CFRelease(v4);
        goto LABEL_126;
      }
      CFDictionaryRef v24 = (const __CFDictionary *)v8[3];
      if (!v24)
      {
        sub_100034204("com.apple.system.accpowersources.attach");
        sub_100034204("com.apple.system.accpowersources.timeremaining");
        int v32 = qword_1000A36A0;
        if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v33 = *(_DWORD *)v8;
          atoken.val[0] = 67109120;
          atoken.val[1] = v33;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Posted notifications for new power source id %d\n", (uint8_t *)&atoken, 8u);
        }
        goto LABEL_125;
      }
      CFStringRef v25 = (const __CFString *)CFDictionaryGetValue(v24, @"Power Source State");
      if (v25) {
        BOOL v26 = CFStringCompare(v22, v25, 0) != kCFCompareEqualTo;
      }
      else {
        BOOL v26 = 0;
      }
      CFNumberRef v34 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v19[3], @"Current Capacity");
      if (v34) {
        CFNumberGetValue(v34, kCFNumberIntType, (char *)&valuePtr + 4);
      }
      int v35 = valuePtr;
      int v36 = HIDWORD(valuePtr);
      uint64_t v86 = 0;
      CFNumberRef v37 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v19[3], @"Is Charging");
      if (v37) {
        CFNumberGetValue(v37, kCFNumberIntType, (char *)&v86 + 4);
      }
      CFNumberRef v38 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v4, @"Is Charging");
      if (v38) {
        CFNumberGetValue(v38, kCFNumberIntType, &v86);
      }
      int v39 = HIDWORD(v86) != v86 || v26;
      uint64_t v89 = 0;
      value = 0;
      BOOL v40 = CFDictionaryGetValueIfPresent((CFDictionaryRef)v19[3], @"Name", (const void **)&value) == 0;
      if (v40 == (CFDictionaryGetValueIfPresent((CFDictionaryRef)v4, @"Name", (const void **)&v89) != 0)
        || (v41 = value, CFTypeID v42 = CFStringGetTypeID(), v41)
        && CFGetTypeID(v41) == v42
        && (v43 = v89, CFTypeID v44 = CFStringGetTypeID(), v43)
        && CFGetTypeID(v43) == v44
        && !CFEqual(value, v89))
      {
        int v39 = 1;
      }
      id v87 = 0;
      id v88 = 0;
      BOOL v45 = CFDictionaryGetValueIfPresent((CFDictionaryRef)v19[3], @"Part Name", (const void **)&v88) == 0;
      if (v45 == (CFDictionaryGetValueIfPresent((CFDictionaryRef)v4, @"Part Name", (const void **)&v87) != 0)
        || (__int16 v46 = v88, v47 = CFStringGetTypeID(), v46)
        && CFGetTypeID(v46) == v47
        && (__int16 v48 = v87, v49 = CFStringGetTypeID(), v48)
        && CFGetTypeID(v48) == v49
        && !CFEqual(v88, v87))
      {
        int v39 = 1;
      }
      CFArrayRef v50 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v19[3], @"LEDs");
      CFArrayRef v51 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v4, @"LEDs");
      if ((unint64_t)v50 | (unint64_t)v51)
      {
        CFArrayRef v52 = v51;
        if ((v50 != 0) == (v51 != 0))
        {
          CFIndex Count = CFArrayGetCount(v50);
          CFIndex v54 = CFArrayGetCount(v52);
          if (!(Count | v54)) {
            goto LABEL_89;
          }
          if (Count == v54)
          {
            if (Count)
            {
              int v82 = v35;
              int v83 = v36;
              CFIndex v55 = 0;
              int v84 = v39;
              while (1)
              {
                CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v50, v55);
                CFDictionaryRef v57 = (const __CFDictionary *)CFArrayGetValueAtIndex(v52, v55);
                unsigned int v58 = CFDictionaryGetValue(ValueAtIndex, @"State");
                uint64_t v59 = CFDictionaryGetValue(v57, @"State");
                if ((v58 != 0) != (v59 != 0) || v58 && v59 && !CFEqual(v58, v59)) {
                  break;
                }
                CFNumberRef v60 = CFDictionaryGetValue(ValueAtIndex, @"Color");
                CFNumberRef v61 = CFDictionaryGetValue(v57, @"Color");
                if ((v60 != 0) != (v61 != 0)) {
                  break;
                }
                int v39 = v84;
                if (v60)
                {
                  if (v61 && !CFEqual(v60, v61)) {
                    break;
                  }
                }
                if (Count == ++v55) {
                  goto LABEL_88;
                }
              }
              int v39 = 1;
LABEL_88:
              int v35 = v82;
              int v36 = v83;
            }
            goto LABEL_89;
          }
        }
        int v39 = 1;
      }
LABEL_89:
      CFDictionaryRef v62 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v19[3], @"AdapterDetails");
      CFDictionaryRef v63 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v4, @"AdapterDetails");
      if ((unint64_t)v62 | (unint64_t)v63)
      {
        CFDictionaryRef v64 = v63;
        if ((v62 != 0) != (v63 != 0))
        {
          int v39 = 1;
        }
        else
        {
          uint64_t v92 = 0;
          *(void *)atoken.val = 0;
          if (CFDictionaryGetValueIfPresent(v62, @"FamilyCode", (const void **)&atoken))
          {
            CFNumberRef v65 = *(const void **)atoken.val;
            CFTypeID v66 = CFNumberGetTypeID();
            if (v65)
            {
              if (CFGetTypeID(v65) == v66) {
                CFNumberGetValue(*(CFNumberRef *)atoken.val, kCFNumberIntType, (char *)&v92 + 4);
              }
            }
          }
          *(void *)atoken.val = 0;
          if (CFDictionaryGetValueIfPresent(v64, @"FamilyCode", (const void **)&atoken)
            && (int v67 = *(const void **)atoken.val, v68 = CFNumberGetTypeID(), v67)
            && CFGetTypeID(v67) == v68)
          {
            CFNumberGetValue(*(CFNumberRef *)atoken.val, kCFNumberIntType, &v92);
            int v69 = v92;
          }
          else
          {
            int v69 = 0;
          }
          if (HIDWORD(v92) != v69) {
            int v39 = 1;
          }
        }
      }
      CFBooleanRef v70 = (CFBooleanRef)CFDictionaryGetValue((CFDictionaryRef)v19[3], @"LPM Active");
      if (v70) {
        BOOL v71 = v70 == kCFBooleanTrue;
      }
      else {
        BOOL v71 = 0;
      }
      int v72 = v71;
      CFBooleanRef v73 = (CFBooleanRef)CFDictionaryGetValue((CFDictionaryRef)v4, @"LPM Active");
      if (v73) {
        BOOL v74 = v73 == kCFBooleanTrue;
      }
      else {
        BOOL v74 = 0;
      }
      int v75 = v74;
      if (v72 != v75 || v39 != 0)
      {
        sub_100034204("com.apple.system.accpowersources.source");
        id v77 = qword_1000A36A0;
        if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v78 = *(_DWORD *)v19;
          atoken.val[0] = 136315394;
          *(void *)&atoken.val[1] = "com.apple.system.accpowersources.source";
          LOWORD(atoken.val[3]) = 1024;
          *(unsigned int *)((char *)&atoken.val[3] + 2) = v78;
          _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "Posted \"%s\" for power source id %d\n", (uint8_t *)&atoken, 0x12u);
        }
      }
      if (v35 != v36)
      {
        sub_100034204("com.apple.system.accpowersources.timeremaining");
        uint64_t v79 = qword_1000A36A0;
        if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v80 = *(_DWORD *)v19;
          atoken.val[0] = 136315394;
          *(void *)&atoken.val[1] = "com.apple.system.accpowersources.timeremaining";
          LOWORD(atoken.val[3]) = 1024;
          *(unsigned int *)((char *)&atoken.val[3] + 2) = v80;
          _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "Posted \"%s\" for power source id %d\n", (uint8_t *)&atoken, 0x12u);
        }
      }
      CFRelease((CFTypeRef)v19[3]);
LABEL_125:
      int v2 = 0;
      v19[3] = (uint64_t)v4;
LABEL_126:
      **(_DWORD **)(a1 + 32) = v2;
      return vm_deallocate(mach_task_self_, *(void *)(a1 + 40), *(unsigned int *)(a1 + 84));
    }
LABEL_27:
    CFRelease(v4);
    return vm_deallocate(mach_task_self_, *(void *)(a1 + 40), *(unsigned int *)(a1 + 84));
  }
  int v21 = (const void *)v8[3];
  if (v21)
  {
    CFRelease(v21);
  }
  else
  {
    sub_100034204("com.apple.system.powersources.attach");
    int v30 = qword_1000A36A0;
    if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v31 = *v6;
      atoken.val[0] = 136315394;
      *(void *)&atoken.val[1] = "com.apple.system.powersources.attach";
      LOWORD(atoken.val[3]) = 1024;
      *(unsigned int *)((char *)&atoken.val[3] + 2) = v31;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Posted \"%s\" for new power source id %d\n", (uint8_t *)&atoken, 0x12u);
    }
  }
  v8[3] = (uint64_t)v4;
  dispatch_async((dispatch_queue_t)qword_1000A4930, &stru_1000921F8);
  **(_DWORD **)(a1 + 32) = 0;
  return vm_deallocate(mach_task_self_, *(void *)(a1 + 40), *(unsigned int *)(a1 + 84));
}

uint64_t *sub_100034E64(int a1, int a2)
{
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
  uint64_t v4 = 0;
  while (1)
  {
    if (LODWORD(qword_1000A4950[v4]) == a2)
    {
      uint64_t result = &qword_1000A4950[v4];
      if (LODWORD(qword_1000A4950[v4 + 1]) == a1) {
        break;
      }
    }
    v4 += 5;
    if (v4 == 80) {
      return 0;
    }
  }
  return result;
}

void sub_100034ECC(id a1)
{
}

uint64_t sub_100034ED4(uint64_t a1, _OWORD *a2, int a3)
{
  pid_t pidp = 0;
  long long v4 = a2[1];
  *(_OWORD *)atoken.val = *a2;
  *(_OWORD *)&atoken.val[4] = v4;
  audit_token_to_au32(&atoken, 0, 0, 0, 0, 0, &pidp, 0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100034F90;
  block[3] = &unk_100091490;
  int v7 = a3;
  pid_t v8 = pidp;
  dispatch_async((dispatch_queue_t)qword_1000A4930, block);
  return 0;
}

void sub_100034F90(uint64_t a1)
{
  int v2 = qword_1000A36A0;
  if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 32);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Releasing power source id = %d\n", (uint8_t *)v5, 8u);
  }
  long long v4 = sub_100034E64(*(_DWORD *)(a1 + 36), *(_DWORD *)(a1 + 32));
  if (v4) {
    dispatch_source_cancel((dispatch_source_t)v4[2]);
  }
}

void sub_100035048(void *a1, void *a2)
{
  int v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  long long v14 = 0u;
  long long v15 = 0u;
  if (v4)
  {
    xpc_object_t reply = xpc_dictionary_create_reply(v4);
    if (reply)
    {
      if (sub_10005D5C0(v3, @"com.apple.private.iokit.batterydataprecise", 0))
      {
        xpc_connection_get_audit_token();
        int v7 = qword_1000A4930;
        v9[0] = _NSConcreteStackBlock;
        v9[1] = 3221225472;
        v9[2] = sub_100035200;
        v9[3] = &unk_100092240;
        id v10 = v5;
        long long v12 = v14;
        long long v13 = v15;
        id v8 = reply;
        id v11 = v8;
        dispatch_sync(v7, v9);
        xpc_connection_send_message(v3, v8);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
          sub_100069054();
        }
        xpc_dictionary_set_uint64(reply, "returnCode", 0xFFFFFFFFE00002C1);
        xpc_connection_send_message(v3, reply);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR))
    {
      sub_1000657D8();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR))
  {
    sub_1000657A4();
  }
}

void sub_100035200(uint64_t a1)
{
  int uint64 = xpc_dictionary_get_uint64(*(xpc_object_t *)(a1 + 32), "powerInfoPrecise");
  long long v3 = *(_OWORD *)(a1 + 64);
  v6[0] = *(_OWORD *)(a1 + 48);
  v6[1] = v3;
  id v4 = sub_1000352E0(v6, uint64, 1);
  if (v4)
  {
    uint64_t v5 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 40), "powerInfoPrecise", v5);
    xpc_dictionary_set_uint64(*(xpc_object_t *)(a1 + 40), "returnCode", 0);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
      sub_100069088();
    }
    xpc_dictionary_set_uint64(*(xpc_object_t *)(a1 + 40), "returnCode", 0xFFFFFFFFE00002BCLL);
  }
}

id sub_1000352E0(_OWORD *a1, int a2, uint64_t a3)
{
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
  uint64_t v6 = 0;
  int v7 = 0;
  id v8 = 0;
  BOOL v26 = v29;
  CFStringRef v27 = a1;
  do
  {
    long long v9 = &qword_1000A4950[v6];
    id v10 = (id)qword_1000A4950[v6 + 3];
    switch(a2)
    {
      case 0:
        goto LABEL_10;
      case 1:
        if (HIDWORD(qword_1000A4950[v6]) != 1) {
          break;
        }
        goto LABEL_10;
      case 2:
        if (HIDWORD(qword_1000A4950[v6]) != 2) {
          break;
        }
        goto LABEL_10;
      case 3:
        if ((HIDWORD(qword_1000A4950[v6]) - 1) >= 2) {
          break;
        }
        goto LABEL_10;
      case 4:
        if (HIDWORD(qword_1000A4950[v6]) == 3)
        {
LABEL_10:
          if (!v8)
          {
            id v8 = objc_alloc_init((Class)NSMutableArray);
            id v10 = (id)v9[3];
          }
          if (HIDWORD(qword_1000A4950[v6]) == 1 && v10 != 0)
          {
            id v10 = [objc_alloc((Class)NSMutableDictionary) initWithDictionary:v9[3]];

            if (a3)
            {
              [v10 addEntriesFromDictionary:*(void *)(qword_1000A4BF0 + 32)];
            }
            else
            {
              uint64_t v12 = a3;
              id v13 = v10;
              dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
              if (_os_feature_enabled_impl())
              {
                long long v14 = [v13 objectForKeyedSubscript:@"Current Capacity"];
                long long v15 = v14;
                if (v14)
                {
                  signed int v16 = [v14 intValue];
                  int v17 = 5 * (v16 / 5);
                  unsigned int v18 = v16 % 5;
                  if (v16 % 5 < 0) {
                    unsigned int v18 = -v18;
                  }
                  int v19 = v17 + 5 - v16;
                  if (v19 < 0) {
                    int v19 = v16 - (v17 + 5);
                  }
                  if (v18 >= v19) {
                    v17 += 5;
                  }
                  if (v17 <= 1) {
                    int v17 = 1;
                  }
                  if (v17 >= 0x64) {
                    uint64_t v20 = 100;
                  }
                  else {
                    uint64_t v20 = v17;
                  }
                  int v21 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v20, v26);
                  [v13 setObject:v21 forKeyedSubscript:@"Current Capacity"];
                }
              }

              a3 = v12;
              a1 = v27;
            }
            long long v22 = a1[1];
            long long v31 = *a1;
            long long v32 = v22;
            dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
            v30[0] = v31;
            v30[1] = v32;
            BOOL v23 = sub_10005C9D0(v30, @"com.apple.private.iokit.batterydata");
            if (v10 && v23)
            {
              dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
              if (qword_1000A4948 && *(void *)qword_1000A4948)
              {
                sub_100037784(v10, *(void *)qword_1000A4948);
              }
              else
              {
                CFDictionaryRef v24 = qword_1000A36A0;
                if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
                  sub_1000690BC(&buf, v26, v24);
                }
              }
            }
            int v7 = v10;
          }
          objc_msgSend(v8, "addObject:", v10, v26);
        }
        break;
      default:
        break;
    }
    v6 += 5;
  }
  while (v6 != 80);

  return v8;
}

void sub_10003562C(void *a1, void *a2)
{
  long long v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (v3 && v4)
  {
    xpc_object_t reply = xpc_dictionary_create_reply(v4);
    if (!reply)
    {
      if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
        sub_100068638();
      }
      goto LABEL_18;
    }
    uint64_t v7 = -536870212;
    int v8 = pthread_mutex_trylock(&stru_1000A2F60);
    if (v8 > 21)
    {
      if (v8 == 22)
      {
        uint64_t v7 = -536870206;
        goto LABEL_17;
      }
      if (v8 != 35)
      {
LABEL_17:
        xpc_dictionary_set_uint64(reply, "returnCode", v7);
        xpc_connection_send_message(v3, reply);
        goto LABEL_18;
      }
    }
    else
    {
      if (!v8)
      {
        long long v9 = qword_1000A4930;
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1000357D4;
        block[3] = &unk_100091250;
        id v11 = v3;
        id v12 = v5;
        id v13 = reply;
        dispatch_async(v9, block);

LABEL_18:
        goto LABEL_19;
      }
      if (v8 != 16) {
        goto LABEL_17;
      }
    }
    uint64_t v7 = -536870187;
    goto LABEL_17;
  }
  if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
    sub_10006866C();
  }
LABEL_19:
}

void sub_1000357D4(uint64_t a1)
{
  uint64_t v2 = -536870207;
  if (sub_10005D5C0(*(xpc_connection_t *)(a1 + 32), @"com.apple.private.iokit.batterydateoffirstuse", 0))
  {
    long long v3 = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), "setBatteryDofu");
    id v4 = (void *)_CFXPCCreateCFObjectFromXPCObject();
    if (v4)
    {
      uint64_t v5 = qword_1000A36A0;
      if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = 138412290;
        uint64_t v7 = v4;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Request set battery DOFU: %@\n", (uint8_t *)&v6, 0xCu);
      }
      uint64_t v2 = (int)sub_100035914(v4);
    }
    else
    {
      uint64_t v2 = -536870206;
    }
  }
  else
  {
    id v4 = 0;
    long long v3 = 0;
  }
  xpc_dictionary_set_uint64(*(xpc_object_t *)(a1 + 48), "returnCode", v2);
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 32), *(xpc_object_t *)(a1 + 48));
  pthread_mutex_unlock(&stru_1000A2F60);
}

uint64_t sub_100035914(void *a1)
{
  uint64_t v1 = 3758097090;
  id v2 = a1;
  if (v2)
  {
    dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
    if (qword_1000A4948 && *(void *)qword_1000A4948 && *(void *)(*(void *)qword_1000A4948 + 80))
    {
      uint64_t v1 = 0;
      goto LABEL_20;
    }
    id v3 = [objc_alloc((Class)NSCalendar) initWithCalendarIdentifier:NSCalendarIdentifierGregorian];
    id v4 = [v3 components:252 fromDate:v2];
    uint64_t v5 = +[NSTimeZone timeZoneWithAbbreviation:@"UTC"];
    [v3 setTimeZone:v5];

    int v6 = [v3 dateFromComponents:v4];
    if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEBUG)) {
      sub_1000691CC();
    }
    [v6 timeIntervalSinceReferenceDate];
    if (!(unint64_t)v7)
    {
LABEL_19:

      goto LABEL_20;
    }
    id v8 = [objc_alloc((Class)NSNumber) initWithUnsignedLongLong:(unint64_t)v7];
    long long v9 = v8;
    if (v8)
    {
      id v10 = v8;
      io_registry_entry_t v11 = sub_100021340();
      if (v11)
      {
        if (!IORegistryEntrySetCFProperty(v11, @"DateOfFirstUse", v10))
        {

          id v13 = qword_1000A36A0;
          uint64_t v1 = 0;
          if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEFAULT))
          {
            int v14 = 138412290;
            id v15 = v10;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Set battery DOFU: %@\n", (uint8_t *)&v14, 0xCu);
            uint64_t v1 = 0;
          }
          goto LABEL_18;
        }
        uint64_t v1 = 3758097097;
        if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
          sub_100069164();
        }
      }
      else
      {
        uint64_t v1 = 3758097112;
      }

      if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
        sub_1000690FC();
      }
    }
    else
    {
      uint64_t v1 = 3758097085;
    }
LABEL_18:

    goto LABEL_19;
  }
LABEL_20:

  return v1;
}

uint64_t sub_100035B84(uint64_t a1, long long *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  long long v6 = a2[1];
  long long v9 = *a2;
  _DWORD v8[2] = sub_100035C10;
  v8[3] = &unk_100092260;
  long long v10 = v6;
  int v11 = a3;
  void v8[4] = a4;
  v8[5] = a5;
  v8[6] = a6;
  dispatch_sync((dispatch_queue_t)qword_1000A4930, v8);
  return 0;
}

uint64_t sub_100035C10(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 88);
  long long v3 = *(_OWORD *)(a1 + 72);
  v9[0] = *(_OWORD *)(a1 + 56);
  v9[1] = v3;
  sub_1000352E0(v9, v2, 0);
  id v4 = (const void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    CFDataRef Data = CFPropertyListCreateData(0, v4, kCFPropertyListBinaryFormat_v1_0, 0, 0);
    CFDataRef v6 = Data;
    if (Data)
    {
      unsigned int v7 = [(__CFData *)Data length];
      **(_DWORD **)(a1 + 4sub_100019490(0, 0) = v7;
      vm_allocate(mach_task_self_, *(vm_address_t **)(a1 + 32), v7, 1);
      memcpy(**(void ***)(a1 + 32), [(__CFData *)v6 bytes], **(unsigned int **)(a1 + 40));
    }
  }
  else
  {
    **(void **)(a1 + 32) = 0;
    **(_DWORD **)(a1 + 4sub_100019490(0, 0) = 0;
  }
  **(_DWORD **)(a1 + 48) = 0;

  return _objc_release_x1();
}

uint64_t sub_100035D14()
{
  uint64_t v3 = 0;
  id v4 = &v3;
  uint64_t v5 = 0x2020000000;
  int v6 = 0;
  dispatch_assert_queue_not_V2((dispatch_queue_t)qword_1000A4930);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100035DE0;
  block[3] = &unk_100091458;
  void block[4] = &v3;
  dispatch_sync((dispatch_queue_t)qword_1000A4930, block);
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100035DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100035DE0(uint64_t a1)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = qword_1000A4C30;
}

BOOL sub_100035E20(_DWORD *a1, uint64_t a2)
{
  uint64_t v7 = 0;
  id v8 = &v7;
  uint64_t v9 = 0x2020000000;
  char v10 = 0;
  if (qword_1000A4930)
  {
    dispatch_assert_queue_not_V2((dispatch_queue_t)qword_1000A4930);
    *a1 = 1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100035F20;
    block[3] = &unk_100092288;
    void block[4] = &v7;
    void block[5] = a1;
    void block[6] = a2;
    dispatch_sync((dispatch_queue_t)qword_1000A4930, block);
    BOOL v4 = *((unsigned char *)v8 + 24) != 0;
  }
  else
  {
    BOOL v4 = 0;
  }
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_100035F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100035F20(void *a1)
{
  int v2 = (int *)a1[5];
  uint64_t v3 = (_DWORD *)a1[6];
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
  if ((int)qword_1000A4C30 < 1) {
    goto LABEL_9;
  }
  uint64_t v4 = qword_1000A4C30;
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
  uint64_t v5 = 0;
  int v6 = 0;
  int v7 = 0;
  do
  {
    uint64_t v8 = *(void *)(qword_1000A4948 + v5);
    if ((*(_WORD *)(v8 + 16) & 0x40) != 0)
    {
      ++v7;
      int v9 = *(_DWORD *)(v8 + 36);
      if (v9) {
        v6 += 100 * *(_DWORD *)(v8 + 32) / v9;
      }
    }
    v5 += 8;
  }
  while (8 * v4 != v5);
  if (v7)
  {
    *int v2 = *(_WORD *)(*(void *)qword_1000A4948 + 16) & 1;
    _DWORD *v3 = v6;
    char v10 = 1;
  }
  else
  {
LABEL_9:
    char v10 = 0;
  }
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = v10;
}

uint64_t sub_100036004()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  int v6 = 0;
  dispatch_assert_queue_not_V2((dispatch_queue_t)qword_1000A4930);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000360D0;
  block[3] = &unk_100091458;
  void block[4] = &v3;
  dispatch_sync((dispatch_queue_t)qword_1000A4930, block);
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1000360B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000360D0(uint64_t a1)
{
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
  BOOL v2 = 1;
  if (qword_1000A4C30)
  {
    dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
    if (qword_1000A4948)
    {
      if ((*(_WORD *)(*(void *)qword_1000A4948 + 16) & 0x41) == 0x40) {
        BOOL v2 = 0;
      }
    }
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v2;
}

uint64_t sub_100036154(uint64_t a1)
{
  return nullsub_4(*(unsigned int *)(a1 + 32), *(unsigned __int8 *)(a1 + 36));
}

void sub_100036164(IONotificationPort *a1, io_iterator_t a2)
{
  io_object_t notification = 0;
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
  io_object_t v4 = IOIteratorNext(a2);
  if (v4)
  {
    io_object_t v5 = v4;
    do
    {
      dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
      int v6 = malloc_type_calloc(1uLL, 0xB0uLL, 0x106004017E7BDBAuLL);
      _DWORD *v6 = v5;
      *((void *)v6 + 17) = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"InternalBattery-%d", dword_1000A4C20);
      int v7 = ++dword_1000A4C20;
      uint64_t v8 = qword_1000A36A0;
      if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint8_t buf = 67109120;
        int v24 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Found battery: %d", buf, 8u);
      }
      CFMutableDictionaryRef Mutable = (__CFSet *)qword_1000A4C28;
      if (!qword_1000A4C28)
      {
        CFMutableDictionaryRef Mutable = CFSetCreateMutable(0, 1, 0);
        qword_1000A4C28 = (uint64_t)Mutable;
      }
      CFSetAddValue(Mutable, v6);
      size_t Count = CFSetGetCount((CFSetRef)qword_1000A4C28);
      qword_1000A4C30 = Count;
      if (qword_1000A4948)
      {
        free((void *)qword_1000A4948);
        qword_1000A4948 = 0;
      }
      qword_1000A4948 = (uint64_t)malloc_type_calloc(Count, 8uLL, 0x2004093837F09uLL);
      CFSetGetValues((CFSetRef)qword_1000A4C28, (const void **)qword_1000A4948);
      IOServiceAddInterestNotification(a1, v5, "IOGeneralInterest", (IOServiceInterestCallback)sub_100036608, v6, &notification);
      v6[1] = notification;
      sub_100036698(v6, v5);
      IOObjectRelease(v5);
      io_object_t v5 = IOIteratorNext(a2);
    }
    while (v5);
  }
  sub_100049C9C();
  sub_10003FDA0();
  dispatch_async((dispatch_queue_t)qword_1000A4930, &stru_1000922C8);
  uint64_t v11 = MGCopyAnswer();
  id v12 = (void *)qword_1000A4910;
  qword_1000A4910 = v11;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    id v13 = qword_1000A36A0;
    if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
      sub_100069234(v13, v14, v15, v16, v17, v18, v19, v20);
    }
  }
  if ([(id)qword_1000A4910 BOOLValue] && _os_feature_enabled_impl())
  {
    if (qword_1000A4C58 != -1) {
      dispatch_once(&qword_1000A4C58, &stru_100092430);
    }
    if (!byte_1000A4C50)
    {
      xpc_object_t v21 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_uint64(v21, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_1_HOUR);
      xpc_dictionary_set_string(v21, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
      xpc_dictionary_set_BOOL(v21, XPC_ACTIVITY_REQUIRES_BUDDY_COMPLETE, 1);
      xpc_activity_register("com.apple.powerd.dofu-monitor", v21, &stru_100092308);
    }
  }
}

uint64_t sub_1000364E8(int a1, io_iterator_t iterator)
{
  char v4 = 0;
  uint64_t result = IOIteratorNext(iterator);
  if (result)
  {
    sub_100016AAC();
    byte_1000A36B8 = 1;
    if (sub_10005EBEC(1111905072, &v4)
      && os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR))
    {
      sub_100069320();
    }
    byte_1000A2F44 = (v4 & 4) != 0;
    if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEBUG)) {
      sub_1000692AC();
    }
    return IOObjectRelease(iterator);
  }
  return result;
}

void sub_1000365B4(int a1, io_iterator_t iterator)
{
  if (IOIteratorNext(iterator))
  {
    byte_1000A2F44 = 0;
    if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEBUG)) {
      sub_100069354();
    }
  }
}

void sub_100036608(_DWORD *a1, int a2, int a3)
{
  dispatch_assert_queue_barrier((dispatch_queue_t)qword_1000A4930);
  if (a3 == -536723200)
  {
    kdebug_trace();
    sub_100036698(a1, a2);
  }
}

void sub_100036698(_DWORD *a1, int a2)
{
  if (!a1) {
    return;
  }
  dispatch_assert_queue_barrier((dispatch_queue_t)qword_1000A4930);
  *a1 = a2;
  CFMutableDictionaryRef properties = 0;
  CFBooleanRef v54 = kCFBooleanFalse;
  value = kCFBooleanFalse;
  dispatch_assert_queue_barrier((dispatch_queue_t)qword_1000A4930);
  uint64_t v4 = *((void *)a1 + 1);
  if (v4)
  {
    CFRelease(*((CFTypeRef *)a1 + 1));
    *((void *)a1 + 1) = 0;
  }
  io_object_t v5 = (const void *)qword_1000A4938;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (v5 && CFGetTypeID(v5) == TypeID)
  {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, (CFDictionaryRef)qword_1000A4938);
    CFMutableDictionaryRef properties = MutableCopy;
    goto LABEL_11;
  }
  if (!IORegistryEntryCreateCFProperties(*a1, &properties, kCFAllocatorDefault, 0))
  {
    CFMutableDictionaryRef MutableCopy = properties;
LABEL_11:
    if (!CFDictionaryGetValueIfPresent(MutableCopy, @"BatteryInstalled", (const void **)&v54)
      || (CFBooleanRef v9 = v54, v54 != kCFBooleanTrue))
    {
      number[0] = 0;
      if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEBUG)) {
        sub_100069388();
      }
      CFDictionaryGetValueIfPresent(properties, @"ExternalConnected", (const void **)&value);
      CFDictionaryGetValueIfPresent(properties, @"AdapterDetails", (const void **)number);
      CFNumberRef v10 = number[0];
      CFTypeID v11 = CFDictionaryGetTypeID();
      if (v10)
      {
        if (CFGetTypeID(v10) == v11) {
          sub_100030C5C(value == kCFBooleanTrue, number[0]);
        }
      }
LABEL_49:
      CFRelease(properties);
      *((void *)a1 + 1) = 0;
      return;
    }
    if (!CFDictionaryGetValue(properties, @"CurrentCapacity")
      || !CFDictionaryGetValue(properties, @"MaxCapacity"))
    {
      if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
        sub_1000693BC();
      }
      goto LABEL_49;
    }
    CFDictionaryRef v12 = properties;
    CFTypeID v13 = CFDictionaryGetTypeID();
    if (v12 && CFGetTypeID(v12) == v13)
    {
      *((_WORD *)a1 + 8) = a1[4] & 0xFFFE | (v9 == CFDictionaryGetValue(v12, @"ExternalConnected"));
      *((_WORD *)a1 + 8) = a1[4] & 0xFFFB | (4 * (v9 == CFDictionaryGetValue(v12, @"ExternalChargeCapable")));
      *((_WORD *)a1 + 8) = a1[4] & 0xFFBF | ((v9 == CFDictionaryGetValue(v12, @"BatteryInstalled")) << 6);
      *((_WORD *)a1 + 8) = a1[4] & 0xFFF7 | (8 * (v9 == CFDictionaryGetValue(v12, @"IsCharging")));
      *((_WORD *)a1 + 8) = a1[4] & 0xFFFD | (2 * (v9 == CFDictionaryGetValue(v12, @"AppleRawExternalConnected")));
      *((unsigned char *)a1 + 24) = a1[6] & 0xFE | (v9 == CFDictionaryGetValue(v12, @"FullyCharged"));
      *((_WORD *)a1 + 8) = a1[4] & 0xFDFF | ((v9 == CFDictionaryGetValue(v12, @"AtCriticalLevel")) << 9);
      *((void *)a1 + 16) = CFDictionaryGetValue(v12, @"ErrorCondition");
      *((void *)a1 + 14) = CFDictionaryGetValue(v12, @"Serial");
      *((void *)a1 + 19) = CFDictionaryGetValue(v12, @"ChargeStatus");
      CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(v12, @"Voltage");
      if (v14) {
        CFNumberGetValue(v14, kCFNumberIntType, a1 + 11);
      }
      CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue(v12, @"CurrentCapacity");
      if (v15)
      {
        CFNumberGetValue(v15, kCFNumberIntType, a1 + 8);
        *((_WORD *)a1 + 8) &= ~0x400u;
      }
      CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue(v12, @"MaxCapacity");
      if (v16) {
        CFNumberGetValue(v16, kCFNumberIntType, a1 + 9);
      }
      CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(v12, @"DesignCapacity");
      if (v17) {
        CFNumberGetValue(v17, kCFNumberIntType, a1 + 10);
      }
      CFNumberRef v18 = (const __CFNumber *)CFDictionaryGetValue(v12, @"TimeRemaining");
      if (v18) {
        CFNumberGetValue(v18, kCFNumberIntType, a1 + 23);
      }
      CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue(v12, @"InstantAmperage");
      if (v19) {
        CFNumberGetValue(v19, kCFNumberIntType, a1 + 13);
      }
      CFNumberRef v20 = (const __CFNumber *)CFDictionaryGetValue(v12, @"Amperage");
      if (v20) {
        CFNumberGetValue(v20, kCFNumberIntType, a1 + 12);
      }
      CFNumberRef v21 = (const __CFNumber *)CFDictionaryGetValue(v12, @"MaxErr");
      if (v21) {
        CFNumberGetValue(v21, kCFNumberIntType, a1 + 14);
      }
      CFNumberRef v22 = (const __CFNumber *)CFDictionaryGetValue(v12, @"CycleCount");
      if (v22) {
        CFNumberGetValue(v22, kCFNumberIntType, a1 + 15);
      }
      CFNumberRef v23 = (const __CFNumber *)CFDictionaryGetValue(v12, @"DesignCycleCount70");
      if (v23) {
        CFNumberGetValue(v23, kCFNumberIntType, a1 + 16);
      }
      CFNumberRef v24 = (const __CFNumber *)CFDictionaryGetValue(v12, @"DesignCycleCount9C");
      if (v24) {
        CFNumberGetValue(v24, kCFNumberIntType, a1 + 17);
      }
      io_registry_entry_t v25 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/");
      CFDataRef CFProperty = (const __CFData *)IORegistryEntryCreateCFProperty(v25, @"board-id", 0, 0);
      *(_OWORD *)CFNumberRef number = 0u;
      long long v59 = 0u;
      if (CFProperty)
      {
        CFDataRef v27 = CFProperty;
        CFDataGetBytePtr(CFProperty);
        if ((unint64_t)CFDataGetLength(v27) <= 0x20) {
          CFDataGetLength(v27);
        }
        __strlcpy_chk();
        CFRelease(v27);
      }
      IOObjectRelease(v25);
      size_t v28 = strlen((const char *)number);
      for (uint64_t i = 0; i != 756; i += 36)
      {
        if (!strncmp((const char *)number, &aMacF425bec8[i], v28))
        {
          uint64_t v30 = 0;
          long long v31 = &word_1000A2FC0;
          while (1)
          {
            int v32 = (unsigned __int16)*v31;
            v31 += 18;
            if (a1[10] == v32) {
              goto LABEL_67;
            }
            if (++v30 == 25) {
              goto LABEL_60;
            }
          }
        }
      }
LABEL_60:
      int v33 = a1[16];
      if (v33 != 500 && v33 != 1000)
      {
        int v33 = a1[17];
        if (!v33)
        {
          uint64_t v30 = 0;
          CFNumberRef v34 = &word_1000A2FC0;
          while (1)
          {
            int v35 = (unsigned __int16)*v34;
            v34 += 18;
            if (a1[10] == v35) {
              break;
            }
            if (++v30 == 25)
            {
              int v33 = 300;
              goto LABEL_68;
            }
          }
LABEL_67:
          int v33 = *(unsigned __int16 *)&aMacF425bec8[36 * v30 + 34];
        }
      }
LABEL_68:
      a1[18] = v33;
      CFDictionaryRef v36 = (const __CFDictionary *)CFDictionaryGetValue(v12, @"AdapterDetails");
      a1[5] = 0;
      if (v36)
      {
        LODWORD(valuePtr) = 0;
        number[0] = 0;
        if (CFDictionaryGetValueIfPresent(v36, @"FamilyCode", (const void **)number)
          && (CFNumberRef v37 = number[0], v38 = CFNumberGetTypeID(), v37)
          && CFGetTypeID(v37) == v38)
        {
          CFNumberGetValue(number[0], kCFNumberIntType, &valuePtr);
          BOOL v39 = valuePtr == -536870201;
        }
        else
        {
          BOOL v39 = 0;
        }
        a1[5] = v39;
      }
      CFNumberRef valuePtr = 0;
      number[0] = 0;
      if (CFDictionaryGetValueIfPresent(v12, @"ChargingOverride", (const void **)&valuePtr)
        && (CFNumberRef v40 = valuePtr, v41 = CFNumberGetTypeID(), v40)
        && CFGetTypeID(v40) == v41)
      {
        CFNumberGetValue(valuePtr, kCFNumberSInt64Type, number);
        __int16 v42 = (LOWORD(number[0]) << 10) & 0x800;
      }
      else
      {
        __int16 v42 = 0;
      }
      *((_WORD *)a1 + 8) = a1[4] & 0xF7FF | v42;
      CFNumberRef v43 = CFDictionaryGetValue(v12, @"BatteryData");
      CFTypeID v44 = [v43 objectForKeyedSubscript:@"DateOfFirstUse"];
      *((void *)a1 + 1sub_100019490(0, 0) = [v44 unsignedLongLongValue];
      CFNumberRef v45 = (const __CFNumber *)CFDictionaryGetValue(v12, @"Location");
      if (v45) {
        CFNumberGetValue(v45, kCFNumberIntType, a1 + 22);
      }
      CFNumberRef v46 = (const __CFNumber *)CFDictionaryGetValue(v12, @"BatteryInvalidWakeSeconds");
      CFTypeID v47 = a1 + 26;
      if (v46) {
        CFNumberGetValue(v46, kCFNumberIntType, v47);
      }
      else {
        _DWORD *v47 = 16;
      }
      CFNumberRef v48 = (const __CFNumber *)CFDictionaryGetValue(v12, @"PermanentFailureStatus");
      CFTypeID v49 = a1 + 7;
      if (v48) {
        CFNumberGetValue(v48, kCFNumberIntType, v49);
      }
      else {
        _DWORD *v49 = 0;
      }
    }
    if (!qword_1000A4940)
    {
      CFArrayRef v52 = (const void *)*((void *)a1 + 14);
      CFTypeID v53 = CFStringGetTypeID();
      if (v52)
      {
        if (CFGetTypeID(v52) == v53)
        {
          qword_1000A4940 = *((void *)a1 + 14);
          CFRetain((CFTypeRef)qword_1000A4940);
          dispatch_async((dispatch_queue_t)qword_1000A4930, &stru_100092348);
        }
      }
    }
    if (qword_1000A4938)
    {
      if (qword_1000A4940) {
        CFRelease((CFTypeRef)qword_1000A4940);
      }
      CFArrayRef v50 = (const void *)*((void *)a1 + 14);
      qword_1000A4940 = (uint64_t)v50;
      if (v50) {
        CFRetain(v50);
      }
    }
    if (!v4)
    {
      dispatch_assert_queue_barrier((dispatch_queue_t)qword_1000A4930);
      dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
      if (qword_1000A4C30)
      {
        if (!qword_1000A4BF0)
        {
          pid_t v51 = getpid();
          dispatch_assert_queue_barrier((dispatch_queue_t)qword_1000A4930);
          *(_OWORD *)&dword_1000A4958 = 0u;
          *(_OWORD *)&qword_1000A4968 = 0u;
          dword_1000A4958 = v51;
          qword_1000A4BF0 = (uint64_t)&qword_1000A4950;
          qword_1000A4950 = 0x100000063;
          *(void *)&xmmword_1000A4BD0 = CFAbsoluteTimeGetCurrent();
          sub_100034204("com.apple.system.powersources.attach");
          dispatch_async((dispatch_queue_t)qword_1000A4930, &stru_100092368);
        }
      }
    }
  }
  CFMutableDictionaryRef v8 = properties;
  *((void *)a1 + 1) = properties;
  if (v8)
  {
    sub_10002F500((uint64_t)a1);
    dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
    sub_10005B3E8(qword_1000A4C30);
    sub_100049C9C();
    sub_10003FDA0();
  }
}

void sub_100036FCC(id a1)
{
}

void sub_100036FD4(id a1, OS_xpc_object *a2)
{
  if (!pthread_mutex_trylock(&stru_1000A2F60))
  {
    BOOL v2 = qword_1000A4930;
    dispatch_async(v2, &stru_100092328);
  }
}

void sub_100037020(id a1)
{
  if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEBUG)) {
    sub_1000694F4();
  }
  if (qword_1000A4C58 != -1) {
    dispatch_once(&qword_1000A4C58, &stru_100092430);
  }
  if (byte_1000A4C50) {
    goto LABEL_6;
  }
  uint64_t v3 = (void *)MAEGetActivationStateWithError();
  id v4 = 0;
  if (v3)
  {
    if ([v3 isEqualToString:kMAActivationStateActivated])
    {

LABEL_6:
      int v1 = TMGetReferenceTime();
      BOOL v2 = qword_1000A36A0;
      if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint8_t buf = 134218752;
        uint64_t v6 = 0;
        __int16 v7 = 2048;
        uint64_t v8 = 0;
        __int16 v9 = 1024;
        int v10 = 0;
        __int16 v11 = 1024;
        BOOL v12 = v1 != 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "DOFU-monitor: time:%f uncertainty:%f reliability:%d ret:%u\n", buf, 0x22u);
      }
      if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_DEBUG)) {
        sub_100069458();
      }
      goto LABEL_21;
    }
    if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
      sub_10006948C();
    }

    xpc_activity_unregister("com.apple.powerd.dofu-monitor");
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
      sub_1000693F0();
    }
  }
LABEL_21:
  pthread_mutex_unlock(&stru_1000A2F60);
}

void sub_100037280()
{
  dispatch_assert_queue_barrier((dispatch_queue_t)qword_1000A4930);
  if (qword_1000A4C38 != -1)
  {
    dispatch_once(&qword_1000A4C38, &stru_100092388);
  }
}

void sub_1000372D8(id a1)
{
  int v9 = 0;
  dispatch_assert_queue_barrier((dispatch_queue_t)qword_1000A4930);
  dispatch_assert_queue_barrier((dispatch_queue_t)qword_1000A4930);
  if (sub_10002BCB8())
  {
    int out_token = 0;
    if (notify_register_dispatch("com.apple.system.batteryHealth.p0Threshold", &out_token, (dispatch_queue_t)qword_1000A4930, &stru_1000923C8))
    {
      if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR)) {
        sub_1000695F8();
      }
    }
    else
    {
      notify_get_state(out_token, (uint64_t *)&qword_1000A36C0);
      BOOL v2 = qword_1000A3698;
      if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint8_t buf = 134217984;
        uint64_t v12 = qword_1000A36C0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "batteryHealthP0Threshold set to %lld\n", buf, 0xCu);
      }
    }
    byte_1000A4C40 = 1;
  }
  else if ((sub_10002BD84() & 1) != 0 || sub_10002BE50())
  {
    qword_1000A36C0 = 0x7FFFFFFFFFFFFFFFLL;
    int v1 = qword_1000A3698;
    if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint8_t buf = 134217984;
      uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "batteryHealthP0Threshold set to %lld\n", buf, 0xCu);
    }
  }
  dispatch_assert_queue_barrier((dispatch_queue_t)qword_1000A4930);
  if (sub_10002BCB8())
  {
    int out_token = 0;
    if (notify_register_dispatch("com.apple.system.batteryHealth.UPOAware", &out_token, (dispatch_queue_t)qword_1000A4930, &stru_1000923E8))
    {
      if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR)) {
        sub_100069590();
      }
    }
    else
    {
      notify_get_state(out_token, (uint64_t *)&qword_1000A36B0);
      uint64_t v3 = qword_1000A3698;
      if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint8_t buf = 134217984;
        uint64_t v12 = qword_1000A36B0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "batteryHealthUPOAware set to %lld\n", buf, 0xCu);
      }
    }
  }
  if ((sub_10002BD84() & 1) != 0 || sub_10002BE50())
  {
    qword_1000A36B0 = 20047;
    id v4 = qword_1000A3698;
    if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint8_t buf = 134217984;
      uint64_t v12 = 20047;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "batteryHealthUPOAware set to %lld\n", buf, 0xCu);
    }
  }
  dispatch_assert_queue_barrier((dispatch_queue_t)qword_1000A4930);
  if (sub_10002BD84()) {
    int v5 = 0;
  }
  else {
    int v5 = sub_10002BE50() ^ 1;
  }
  byte_1000A4C41 = v5;
  uint64_t v6 = qword_1000A3698;
  if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint8_t buf = 67109120;
    LODWORD(v12) = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "batteryHealthServiceBCDC support: %d", buf, 8u);
  }
  CFDictionaryRef v7 = sub_100031D6C();
  CFDictionaryRef v8 = v7;
  if (!v7 || !CFDictionaryGetCount(v7))
  {
    if (notify_register_dispatch("com.apple.mobile.keybagd.first_unlock", &v9, (dispatch_queue_t)qword_1000A4930, &stru_1000923A8)&& os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR))
    {
      sub_100069528();
      if (!v8) {
        return;
      }
    }
    else if (!v8)
    {
      return;
    }
  }
  CFRelease(v8);
}

void sub_100037678(id a1, int a2)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  uint64_t v3 = qword_1000A3698;
  if (Mutable)
  {
    CFMutableDictionaryRef v4 = Mutable;
    if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Triggering battery health data migration from powerlog\n", v5, 2u);
    }
    dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
    if (qword_1000A4948 && *(void *)qword_1000A4948)
    {
      sub_100037784(v4, *(void *)qword_1000A4948);
    }
    else if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR))
    {
      sub_100069694();
    }
    CFRelease(v4);
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR))
  {
    sub_100069660();
  }
}

void sub_100037784(void *a1, uint64_t a2)
{
  int v190 = 0;
  unsigned int valuePtr = 3;
  uint64_t v3 = *(void **)(a2 + 8);
  sub_100037280();
  CFMutableDictionaryRef v4 = sub_10003224C();
  if (v4)
  {
    int v5 = v4;
    uint64_t v6 = [(__CFDictionary *)v5 objectForKeyedSubscript:@"Battery Service Flags"];
    unsigned int v7 = [v6 intValue] & 0xC00000;

    if (v7)
    {
      id v8 = v3;
      id v9 = a1;
      int v10 = [v8 objectForKeyedSubscript:@"NominalChargeCapacity"];
      int v11 = [v10 intValue];

      uint64_t v12 = [v8 objectForKeyedSubscript:@"DesignCapacity"];

      int v13 = [v12 intValue];
      if (v11 && v13)
      {
        if (v13 < 1)
        {
          id v8 = 0;
        }
        else
        {
          LODWORD(v8) = vcvtpd_s64_f64((double)v11 / (double)v13 * 100.0);
          if ((v8 - 1) < 0x96) {
            goto LABEL_34;
          }
        }
        if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR)) {
          sub_100069E08();
        }
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR)) {
          sub_100069DA0();
        }
        id v8 = 0;
      }
      valuePtr |= 0x200000u;
LABEL_34:
      CFNumberRef v22 = [(__CFDictionary *)v5 objectForKeyedSubscript:@"Battery Service State"];
      [v9 setObject:v22 forKeyedSubscript:@"Battery Service State"];

      CFNumberRef v23 = [(__CFDictionary *)v5 objectForKeyedSubscript:@"Battery Service Flags"];
      CFNumberRef v24 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", valuePtr | [v23 intValue]);
      [v9 setObject:v24 forKeyedSubscript:@"Battery Service Flags"];

      io_registry_entry_t v25 = +[NSNumber numberWithInt:v8];
      [v9 setObject:v25 forKeyedSubscript:@"Maximum Capacity Percent"];

      if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEBUG)) {
        sub_100069D34();
      }
      BOOL v26 = v5;
LABEL_279:
      CFRelease(v26);

      return;
    }
    CFStringRef v18 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v3, @"Serial");
    CFStringRef v19 = (const __CFString *)CFDictionaryGetValue(v5, @"Battery Serial");
    if (v19) {
      BOOL v20 = v18 == 0;
    }
    else {
      BOOL v20 = 1;
    }
    int v21 = !v20;
    if (!v20 || v19 == v18)
    {
      if (!v21)
      {
        unsigned int v27 = 3;
        goto LABEL_44;
      }
      if (CFEqual(v19, v18))
      {
        unsigned int valuePtr = 3;
LABEL_45:
        if (CFStringGetLength(v18)) {
          goto LABEL_56;
        }
LABEL_46:
        long long v31 = (id)qword_1000A3698;
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
          sub_100069CCC();
        }

        if (v18)
        {
          if (CFStringGetLength(v18))
          {
LABEL_53:
            int v33 = (id)qword_1000A3698;
            if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
              sub_100069C4C((int *)&valuePtr, v33, v34);
            }

LABEL_56:
            v186 = 0;
            unsigned int v187 = 0;
            __int16 v188 = 0;
            value = 0;
            CFDictionaryGetValueIfPresent(v5, @"Battery Service Flags", (const void **)&value);
            CFDictionaryGetValueIfPresent(v5, @"Battery Service State", (const void **)&v188);
            CFDictionaryGetValueIfPresent(v5, @"Maximum Capacity Percent", (const void **)&v187);
            CFDictionaryGetValueIfPresent(v5, @"CycleCount", (const void **)&v186);
            int v35 = (id)qword_1000A3698;
            if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)uint8_t buf = 138544130;
              *(void *)&uint8_t buf[4] = value;
              *(_WORD *)&uint8_t buf[12] = 2114;
              *(void *)&buf[14] = v188;
              *(_WORD *)&buf[22] = 2114;
              *(void *)&unsigned char buf[24] = v187;
              __int16 v198 = 2114;
              v199 = v186;
              _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Previous Battery Health: Flags:%{public}@ State:%{public}@ MaxCapacity:%{public}@ CycleCount:%{public}@\n", buf, 0x2Au);
            }

            CFDictionaryRef v36 = (id)qword_1000A3698;
            CFNumberRef v37 = &off_100075000;
            if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)uint8_t buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = valuePtr;
              _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "calib: svcFlags pre: 0x%x", buf, 8u);
            }

            dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
            if (sub_100039650())
            {
              if (sub_1000398A4(v3, v5, &valuePtr))
              {
                CFTypeID v38 = qword_1000A3698;
                if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)uint8_t buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "calibration running", buf, 2u);
                }
                unsigned int v39 = valuePtr | 0x80000000;
                goto LABEL_65;
              }
              valuePtr &= ~0x80000000;
              dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
              CFDictionaryRef v45 = (const __CFDictionary *)CFDictionaryGetValue(v5, @"calibration0");
              if (v45)
              {
                *(void *)uint8_t buf = 0;
                CFNumberRef number = 0;
                if (CFDictionaryGetValueIfPresent(v45, @"calibrationFlags", (const void **)&number))
                {
                  CFNumberRef v46 = number;
                  CFTypeID TypeID = CFNumberGetTypeID();
                  if (v46)
                  {
                    if (CFGetTypeID(v46) == TypeID)
                    {
                      CFNumberGetValue(number, kCFNumberSInt64Type, buf);
                      if ((*(_WORD *)buf & 0x200) != 0)
                      {
                        unsigned int v39 = valuePtr | 0x20000;
LABEL_65:
                        unsigned int valuePtr = v39;
                        goto LABEL_69;
                      }
                    }
                  }
                }
              }
              if (sub_100033684(v5))
              {
                dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
                CFDictionaryRef v48 = (const __CFDictionary *)CFDictionaryGetValue(v5, @"calibration0");
                if (!v48
                  || (*(void *)uint8_t buf = 0,
                      CFNumberRef number = 0,
                      !CFDictionaryGetValueIfPresent(v48, @"calibrationFlags", (const void **)&number))
                  || (CFNumberRef v49 = number, v50 = CFNumberGetTypeID(), !v49)
                  || CFGetTypeID(v49) != v50
                  || (CFNumberGetValue(number, kCFNumberSInt64Type, buf), (*(_WORD *)buf & 0x800) == 0))
                {
                  uint64_t v193 = 0;
                  uint64_t v194 = 0;
                  CFNumberRef number = 0;
                  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
                  pid_t v51 = (void *)CFDictionaryGetValue(v5, @"calibration0");
                  if (v51)
                  {
                    CFArrayRef v52 = v51;
                    uint64_t v53 = +[NSMutableDictionary dictionary];
                    if (v53)
                    {
                      CFBooleanRef v54 = (void *)v53;
                      id v55 = v52;
                      uint64_t v56 = [v55 objectForKeyedSubscript:@"snapshots"];
                      int v183 = v54;
                      v184 = v55;
                      v182 = (void *)v56;
                      if (v56)
                      {
                        CFDictionaryRef v57 = (void *)v56;
                        id v58 = v55;
                        long long v59 = [v58 objectForKeyedSubscript:@"calibrationFlags"];
                        unsigned __int16 v60 = (unsigned __int16)[v59 unsignedLongValue];

                        if ((v60 & 0x80) != 0) {
                          int v61 = 0;
                        }
                        else {
                          int v61 = 10;
                        }
                        if ((v60 & 0x100) != 0) {
                          int v62 = 20;
                        }
                        else {
                          int v62 = v61;
                        }
                        CFDictionaryRef v63 = [v58 objectForKeyedSubscript:@"baseline"];

                        if (v63)
                        {
                          CFDictionaryRef v64 = [v63 objectForKeyedSubscript:@"CycleCount"];

                          if (v64)
                          {
                            CFNumberRef v65 = [v63 objectForKeyedSubscript:@"CycleCount"];
                            unsigned int v66 = [v65 intValue];

                            uint64_t v67 = v66 + v62;
                            if (v67 == -1)
                            {
                              uint64_t v86 = 0;
                              uint64_t v87 = 0;
                              CFTypeID v68 = 0;
                            }
                            else
                            {
                              CFTypeID v68 = [v57 keyEnumerator];
                              uint64_t v69 = [v68 nextObject];
                              if (v69)
                              {
                                uint64_t v70 = v69;
                                unsigned int v180 = 0;
                                signed int v181 = v67;
                                uint64_t v71 = 0;
                                int v178 = v196;
                                int v179 = 104;
                                do
                                {
                                  int v72 = (void *)v70;
                                  while (1)
                                  {
                                    CFBooleanRef v73 = objc_msgSend(v57, "objectForKeyedSubscript:", v72, v178);
                                    objc_opt_class();
                                    char isKindOfClass = objc_opt_isKindOfClass();

                                    if (isKindOfClass) {
                                      break;
                                    }
                                    int v75 = qword_1000A3698;
                                    if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR)) {
                                      sub_100069C0C(&v195, v178, v75);
                                    }
                                    uint64_t v76 = [v68 nextObject];

                                    int v72 = (void *)v76;
                                    if (!v76) {
                                      goto LABEL_119;
                                    }
                                  }
                                  id v77 = [v57 objectForKeyedSubscript:v72];
                                  unsigned int v78 = [v77 objectForKeyedSubscript:@"CycleCount"];
                                  signed int v79 = [v78 intValue];

                                  if (v79 > v181)
                                  {
                                    unsigned int v80 = [v77 objectForKeyedSubscript:@"Maximum Capacity Percent"];
                                    int v81 = [v80 intValue];

                                    int v82 = v179;
                                    if (v179 >= v81) {
                                      int v83 = v81;
                                    }
                                    else {
                                      int v83 = v179;
                                    }
                                    if (v81 > 0) {
                                      int v82 = v83;
                                    }
                                    int v179 = v82;
                                    int v84 = [v77 objectForKeyedSubscript:@"Battery Service Flags"];
                                    unsigned int v85 = [v84 intValue];

                                    uint64_t v71 = v85 & 0x5164000 | v71;
                                    ++v180;
                                  }

                                  uint64_t v70 = [v68 nextObject];
                                }
                                while (v70);
LABEL_119:
                                uint64_t v86 = v180;
                                uint64_t v67 = v181;
                                uint64_t v87 = v71;
                                uint64_t v88 = v179;
                                goto LABEL_169;
                              }
                              uint64_t v86 = 0;
                              uint64_t v87 = 0;
                            }
                            uint64_t v88 = 104;
LABEL_169:
                            v110 = +[NSNumber numberWithInt:v88];
                            [v183 setObject:v110 forKeyedSubscript:@"Maximum Capacity Percent"];

                            int v111 = +[NSNumber numberWithUnsignedInt:v87];
                            [v183 setObject:v111 forKeyedSubscript:@"Battery Service Flags"];

                            CFNumberRef v112 = +[NSNumber numberWithInt:v67];
                            [v183 setObject:v112 forKeyedSubscript:@"CycleCount"];

                            int v113 = +[NSNumber numberWithInt:v86];
                            [v183 setObject:v113 forKeyedSubscript:@"nSamples"];

                            CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, (CFDictionaryRef)v184);
                            if (MutableCopy)
                            {
                              CFDictionaryRef v115 = MutableCopy;
                              *(void *)uint8_t buf = 0;
                              if (CFDictionaryGetValueIfPresent(v5, @"Battery Service Flags", (const void **)buf))
                              {
                                int v116 = *(const void **)buf;
                                CFTypeID v117 = CFNumberGetTypeID();
                                if (v116)
                                {
                                  if (CFGetTypeID(v116) == v117) {
                                    CFNumberGetValue(*(CFNumberRef *)buf, kCFNumberIntType, (char *)&v194 + 4);
                                  }
                                }
                              }
                              *(void *)uint8_t buf = 0;
                              if (CFDictionaryGetValueIfPresent(v5, @"Maximum Capacity Percent", (const void **)buf))
                              {
                                int v118 = *(const void **)buf;
                                CFTypeID v119 = CFNumberGetTypeID();
                                if (v118)
                                {
                                  if (CFGetTypeID(v118) == v119) {
                                    CFNumberGetValue(*(CFNumberRef *)buf, kCFNumberIntType, (char *)&v193 + 4);
                                  }
                                }
                              }
                              *(void *)uint8_t buf = 0;
                              if (CFDictionaryGetValueIfPresent((CFDictionaryRef)v183, @"Battery Service Flags", (const void **)buf))
                              {
                                CFBooleanRef v120 = *(const void **)buf;
                                CFTypeID v121 = CFNumberGetTypeID();
                                if (v120)
                                {
                                  if (CFGetTypeID(v120) == v121) {
                                    CFNumberGetValue(*(CFNumberRef *)buf, kCFNumberIntType, &v194);
                                  }
                                }
                              }
                              *(void *)uint8_t buf = 0;
                              if (CFDictionaryGetValueIfPresent((CFDictionaryRef)v183, @"Maximum Capacity Percent", (const void **)buf))
                              {
                                CFNumberRef v122 = *(const void **)buf;
                                CFTypeID v123 = CFNumberGetTypeID();
                                if (v122)
                                {
                                  if (CFGetTypeID(v122) == v123) {
                                    CFNumberGetValue(*(CFNumberRef *)buf, kCFNumberIntType, &v193);
                                  }
                                }
                              }
                              int v124 = qword_1000A3698;
                              BOOL v125 = os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT);
                              int v126 = v193;
                              if (v125)
                              {
                                *(_DWORD *)uint8_t buf = 67109888;
                                *(_DWORD *)&uint8_t buf[4] = v193;
                                *(_WORD *)&uint8_t buf[8] = 1024;
                                *(_DWORD *)&buf[10] = HIDWORD(v193);
                                *(_WORD *)&buf[14] = 1024;
                                *(_DWORD *)&uint8_t buf[16] = v194;
                                *(_WORD *)&buf[20] = 1024;
                                *(_DWORD *)&buf[22] = HIDWORD(v194);
                                _os_log_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_DEFAULT, "calib1/current: ncc %d/%d svcFlags %d/%d", buf, 0x1Au);
                                int v126 = v193;
                                int v124 = qword_1000A3698;
                              }
                              if (v126 >= SHIDWORD(v193)) {
                                int v127 = HIDWORD(v193);
                              }
                              else {
                                int v127 = v126;
                              }
                              LODWORD(v193) = v127;
                              int v128 = v194 | HIDWORD(v194);
                              LODWORD(v194) = v194 | HIDWORD(v194);
                              if (os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT))
                              {
                                *(_DWORD *)uint8_t buf = 67109376;
                                *(_DWORD *)&uint8_t buf[4] = v127;
                                *(_WORD *)&uint8_t buf[8] = 1024;
                                *(_DWORD *)&buf[10] = v128;
                                _os_log_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_DEFAULT, "calib1: ncc %d svcFlags %d", buf, 0xEu);
                              }
                              CFNumberRef v129 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v194);
                              if (v129)
                              {
                                CFNumberRef v130 = v129;
                                CFDictionarySetValue(v5, @"Battery Service Flags", v129);
                                CFRelease(v130);
                              }
                              CFNumberRef v131 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v193);
                              if (v131)
                              {
                                CFNumberRef v132 = v131;
                                CFDictionarySetValue(v5, @"Maximum Capacity Percent", v131);
                                CFRelease(v132);
                              }
                              *(void *)uint8_t buf = 0;
                              if (CFDictionaryGetValueIfPresent(v115, @"calibrationFlags", (const void **)buf))
                              {
                                uint64_t v133 = *(const void **)buf;
                                CFTypeID v134 = CFNumberGetTypeID();
                                if (v133)
                                {
                                  if (CFGetTypeID(v133) == v134) {
                                    CFNumberGetValue(*(CFNumberRef *)buf, kCFNumberSInt64Type, &number);
                                  }
                                }
                              }
                              CFNumberRef number = (CFNumberRef)((unint64_t)number | 0x800);
                              CFNumberRef v135 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, &number);
                              if (v135)
                              {
                                CFNumberRef v136 = v135;
                                CFDictionarySetValue(v115, @"calibrationFlags", v135);
                                CFRelease(v136);
                              }
                              CFDictionarySetValue(v115, @"calibration1", v183);
                              CFDictionarySetValue(v5, @"calibration0", v115);
                              CFRelease(v115);
                              CFRelease(v183);
                            }
                            else
                            {
                              if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR)) {
                                sub_100069B70();
                              }
                              CFRelease(v183);
                            }
                            CFNumberRef v37 = &off_100075000;
                            goto LABEL_69;
                          }
                        }
                        if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR)) {
                          sub_100069BD8();
                        }
                      }
                      else if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR))
                      {
                        sub_100069BA4();
                      }
                      uint64_t v86 = 0;
                      uint64_t v87 = 0;
                      CFTypeID v68 = 0;
                      uint64_t v88 = 104;
                      uint64_t v67 = 0xFFFFFFFFLL;
                      goto LABEL_169;
                    }
                    char v109 = qword_1000A3698;
                    if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)uint8_t buf = 0;
                      _os_log_error_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_ERROR, "Out of memory for calibration1", buf, 2u);
                      char v109 = qword_1000A3698;
                    }
                    if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR)) {
                      sub_100069B3C();
                    }
                  }
                  else if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR))
                  {
                    sub_100069B08();
                  }
LABEL_69:
                  __int16 v42 = (id)qword_1000A3698;
                  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)uint8_t buf = *((void *)v37 + 391);
                    *(_DWORD *)&uint8_t buf[4] = valuePtr;
                    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "calib: svcFlags post: 0x%x", buf, 8u);
                  }

                  sub_100032954(v3, v5, &valuePtr);
                  if (qword_1000A36B0 != 20047)
                  {
                    if (qword_1000A36B0)
                    {
                      CFNumberRef v43 = (const __CFNumber *)CFPreferencesCopyValue(@"mitigatedUPOCount", @"com.apple.thermalmonitor.upostepper.metrics", kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
                      CFTypeID v44 = CFNumberGetTypeID();
                      if (v43)
                      {
                        if (CFGetTypeID(v43) == v44)
                        {
                          CFNumberGetValue(v43, kCFNumberIntType, &dword_1000A4C44);
                          if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEBUG)) {
                            sub_1000699C8();
                          }
                        }
                        else
                        {
                          uint64_t v89 = (void *)qword_1000A3698;
                          if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR)) {
                            sub_100069A3C(v89, v43);
                          }
                        }
                      }
                      else if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEBUG))
                      {
                        sub_100069994();
                      }
                      int v90 = dword_1000A4C44;
                      if (dword_1000A4C44 >= 1)
                      {
                        valuePtr |= 0x40000u;
                        uint64_t v91 = qword_1000A3698;
                        if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)uint8_t buf = 67109376;
                          *(_DWORD *)&uint8_t buf[4] = v90;
                          *(_WORD *)&uint8_t buf[8] = 1024;
                          *(_DWORD *)&buf[10] = 0;
                          _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEFAULT, "Mitigated UPO count(%d) is greater than the threshold(%d)\n", buf, 0xEu);
                        }
                      }
                      if (v43) {
                        CFRelease(v43);
                      }
                    }
                    else
                    {
                      if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR)) {
                        sub_100069AD4();
                      }
                      valuePtr |= 0x80000u;
                    }
                  }
                  uint64_t v92 = v5;
                  unint64_t v93 = sub_10005E248();
                  uint64_t v94 = qword_1000A4C48;
                  dispatch_assert_queue_barrier((dispatch_queue_t)qword_1000A4930);
                  if (byte_1000A4C40 != 1) {
                    goto LABEL_225;
                  }
                  if (qword_1000A36C0 == -1)
                  {
                    if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR)) {
                      sub_100069960();
                    }
                    int v95 = valuePtr | 0x20000000;
                  }
                  else
                  {
                    if (qword_1000A36C0)
                    {
                      CFDictionaryRef v96 = sub_100014744();
                      uint64_t v185 = v96;
                      if (!sub_10002BCB8()) {
                        goto LABEL_148;
                      }
                      if (!v96) {
                        goto LABEL_148;
                      }
                      uint64_t v97 = [v96 objectForKeyedSubscript:@"Trusted Data Enabled"];
                      if (!v97) {
                        goto LABEL_148;
                      }
                      CFNumberRef v98 = (void *)v97;
                      CFNumberRef v99 = [v96 objectForKeyedSubscript:@"Trusted Data Enabled"];
                      unsigned int v100 = [v99 intValue];

                      if (v100)
                      {
                        id v101 = v185;
                        int v102 = v92;
                        id v103 = [(__CFDictionary *)v102 objectForKeyedSubscript:@"Trusted LifeTime Max WRdc"];

                        if (v103)
                        {
                          v104 = [(__CFDictionary *)v102 objectForKeyedSubscript:@"Trusted LifeTime Max WRdc"];
                          uint64_t v105 = (uint64_t)[v104 intValue];
                        }
                        else
                        {
                          uint64_t v105 = 0xFFFFFFFFLL;
                        }
                        uint32_t v137 = [v101 objectForKeyedSubscript:@"Trusted LifeTime Max WRdc"];

                        if (v137)
                        {
                          v138 = [v101 objectForKeyedSubscript:@"Trusted LifeTime Max WRdc"];
                          int v139 = [v138 intValue];

                          if (v139 > (int)v105)
                          {
                            int v140 = [v101 objectForKeyedSubscript:@"Trusted LifeTime Max WRdc"];
                            uint64_t v105 = (uint64_t)[v140 intValue];

                            if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEBUG)) {
                              sub_1000698C4();
                            }
                          }
                        }
                        else if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR))
                        {
                          sub_100069890();
                        }

                        dword_1000A3330 = v105;
                        CFNumberRef v141 = +[NSNumber numberWithInt:v105];
                        [(__CFDictionary *)v102 setObject:v141 forKeyedSubscript:@"Trusted LifeTime Max WRdc"];
                      }
                      else
                      {
LABEL_148:
                        if (dword_1000A3330 < 1 || v93 - v94 >= dword_1000A2F40)
                        {
                          dword_1000A3330 = -1;
                          v106 = (void *)CFDictionaryGetValue((CFDictionaryRef)v3, @"BatteryData");
                          uint64_t v107 = sub_10003B464(v106);
                          int v108 = v107;
                          if (v107) {
                            dword_1000A3330 = [v107 intValue];
                          }
                          if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEBUG)) {
                            sub_100069808();
                          }
                          qword_1000A4C48 = v93;
                        }
                        else if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEBUG))
                        {
                          sub_1000697A0();
                        }
                      }
                      int v142 = dword_1000A3330;
                      if (dword_1000A3330 <= 0)
                      {
                        if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR)) {
                          sub_10006976C();
                        }
                        valuePtr |= 0x2000000u;
                      }
                      else
                      {
                        uint64_t v143 = qword_1000A36C0;
                        if (qword_1000A36C0 <= (unint64_t)dword_1000A3330)
                        {
                          valuePtr |= 0x1000000u;
                          uint64_t v144 = qword_1000A3698;
                          if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
                          {
                            *(_DWORD *)uint8_t buf = 67109376;
                            *(_DWORD *)&uint8_t buf[4] = v142;
                            *(_WORD *)&uint8_t buf[8] = 2048;
                            *(void *)&buf[10] = v143;
                            _os_log_impl((void *)&_mh_execute_header, v144, OS_LOG_TYPE_DEFAULT, "WeightedRa(%d) is >= threshold(%llu)\n", buf, 0x12u);
                          }
                        }
                      }

                      goto LABEL_225;
                    }
                    if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR)) {
                      sub_10006992C();
                    }
                    int v95 = valuePtr | 0x2000000;
                  }
                  unsigned int valuePtr = v95;
LABEL_225:

                  LODWORD(number) = -1;
                  dispatch_assert_queue_barrier((dispatch_queue_t)qword_1000A4930);
                  if (byte_1000A4C41 == 1 && byte_1000A36B8)
                  {
                    *(void *)uint8_t buf = 0;
                    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)v3, @"BatteryCellDisconnectCount", (const void **)buf)&& (v145 = *(const void **)buf, CFTypeID v146 = CFNumberGetTypeID(), v145)&& CFGetTypeID(v145) == v146&& (CFNumberGetValue(*(CFNumberRef *)buf, kCFNumberIntType, &number), v147 = (int)number, (number & 0x80000000) == 0))
                    {
                      if (number >= 0xA)
                      {
                        valuePtr |= 0x4000000u;
                        uint64_t v148 = qword_1000A3698;
                        if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)uint8_t buf = 67109376;
                          *(_DWORD *)&uint8_t buf[4] = v147;
                          *(_WORD *)&uint8_t buf[8] = 1024;
                          *(_DWORD *)&buf[10] = 10;
                          _os_log_impl((void *)&_mh_execute_header, v148, OS_LOG_TYPE_DEFAULT, "BCDC(%d) is greater than the threshold(%d)\n", buf, 0xEu);
                        }
                      }
                    }
                    else
                    {
                      if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR)) {
                        sub_100069738();
                      }
                      valuePtr |= 0x8000000u;
                    }
                  }
                  sub_100030D90(v3, v92, valuePtr);
                  CFDictionaryApplyFunction(v92, (CFDictionaryApplierFunction)sub_100031CBC, 0);
                  _CFPreferencesSynchronizeWithContainer();
                  if ((valuePtr & 0x80000000) != 0)
                  {
                    v149 = CFDictionaryGetValue(v92, @"calibration0");
                    v150 = [v149 objectForKeyedSubscript:@"baseline"];
                    LODWORD(number) = 0;
                    v151 = [v150 objectForKeyedSubscript:@"Maximum Capacity Percent"];
                    unsigned int v152 = [v151 intValue];

                    LODWORD(number) = v152;
                    HIDWORD(v194) = -1;
                    *(void *)uint8_t buf = 0;
                    if (CFDictionaryGetValueIfPresent(v92, @"Maximum Capacity Percent", (const void **)buf))
                    {
                      int v153 = *(const void **)buf;
                      CFTypeID v154 = CFNumberGetTypeID();
                      if (v153)
                      {
                        if (CFGetTypeID(v153) == v154) {
                          CFNumberGetValue(*(CFNumberRef *)buf, kCFNumberIntType, (char *)&v194 + 4);
                        }
                      }
                    }
                    CFNumberRef v155 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &number);
                    if (v155)
                    {
                      CFNumberRef v156 = v155;
                      CFDictionarySetValue(v92, @"Maximum Capacity Percent", v155);
                      CFRelease(v156);
                    }
                    CFNumberRef v157 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (char *)&v194 + 4);
                    if (v157)
                    {
                      CFNumberRef v158 = v157;
                      CFDictionarySetValue((CFMutableDictionaryRef)a1, @"currentMaxCap", v157);
                      CFRelease(v158);
                    }
                    v159 = (id)qword_1000A3698;
                    if (os_log_type_enabled(v159, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)uint8_t buf = 136315650;
                      *(void *)&uint8_t buf[4] = "Maximum Capacity Percent";
                      *(_WORD *)&uint8_t buf[12] = 1024;
                      *(_DWORD *)&buf[14] = number;
                      *(_WORD *)&buf[18] = 1024;
                      *(_DWORD *)&buf[20] = HIDWORD(v194);
                      _os_log_impl((void *)&_mh_execute_header, v159, OS_LOG_TYPE_DEFAULT, "reporting %s as %d (from %d)", buf, 0x18u);
                    }
                  }
                  v186 = 0;
                  unsigned int v187 = 0;
                  __int16 v188 = 0;
                  value = 0;
                  id v160 = (void *)CFDictionaryGetValue(v92, @"Battery Service Flags");
                  value = v160;
                  CFTypeID v161 = CFNumberGetTypeID();
                  if (v160 && CFGetTypeID(v160) == v161)
                  {
                    CFDictionarySetValue((CFMutableDictionaryRef)a1, @"Battery Service Flags", value);
                    unint64_t v162 = (id)qword_1000A3698;
                    if (os_log_type_enabled(v162, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)uint8_t buf = 138543362;
                      *(void *)&uint8_t buf[4] = value;
                      _os_log_impl((void *)&_mh_execute_header, v162, OS_LOG_TYPE_DEFAULT, "Updated Battery Health: Flags:%{public}@\n", buf, 0xCu);
                    }
                  }
                  unint64_t v163 = (void *)CFDictionaryGetValue(v92, @"Battery Service State");
                  __int16 v188 = v163;
                  CFTypeID v164 = CFNumberGetTypeID();
                  if (v163 && CFGetTypeID(v163) == v164)
                  {
                    CFDictionarySetValue((CFMutableDictionaryRef)a1, @"Battery Service State", v188);
                    int v165 = (id)qword_1000A3698;
                    if (os_log_type_enabled(v165, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)uint8_t buf = 138543362;
                      *(void *)&uint8_t buf[4] = v188;
                      _os_log_impl((void *)&_mh_execute_header, v165, OS_LOG_TYPE_DEFAULT, "Updated Battery Health: State:%{public}@\n", buf, 0xCu);
                    }
                  }
                  uint64_t v166 = (void *)CFDictionaryGetValue(v92, @"Maximum Capacity Percent");
                  unsigned int v187 = v166;
                  CFTypeID v167 = CFNumberGetTypeID();
                  if (v166 && CFGetTypeID(v166) == v167)
                  {
                    CFDictionarySetValue((CFMutableDictionaryRef)a1, @"Maximum Capacity Percent", v187);
                    id v168 = (id)qword_1000A3698;
                    if (os_log_type_enabled(v168, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)uint8_t buf = 138543362;
                      *(void *)&uint8_t buf[4] = v187;
                      _os_log_impl((void *)&_mh_execute_header, v168, OS_LOG_TYPE_DEFAULT, "Updated Battery Health: MaxCapacity:%{public}@\n", buf, 0xCu);
                    }
                  }
                  CFDictionaryGetValueIfPresent(v92, @"CycleCount", (const void **)&v186);
                  v169 = v186;
                  CFTypeID v170 = CFNumberGetTypeID();
                  if (v169 && CFGetTypeID(v169) == v170)
                  {
                    char v171 = (id)qword_1000A3698;
                    if (os_log_type_enabled(v171, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)uint8_t buf = 138543362;
                      *(void *)&uint8_t buf[4] = v186;
                      _os_log_impl((void *)&_mh_execute_header, v171, OS_LOG_TYPE_DEFAULT, "Updated Battery Health: CycleCount:%{public}@\n", buf, 0xCu);
                    }
                  }
                  id v172 = CFDictionaryGetValue(v92, @"calibration0");
                  CFTypeID v173 = CFDictionaryGetTypeID();
                  if (v172 && CFGetTypeID(v172) == v173) {
                    CFDictionarySetValue((CFMutableDictionaryRef)a1, @"calibration0", v172);
                  }
                  BOOL v174 = CFDictionaryGetValue(v92, @"ncc");
                  CFTypeID v175 = CFNumberGetTypeID();
                  if (v174 && CFGetTypeID(v174) == v175) {
                    CFDictionarySetValue((CFMutableDictionaryRef)a1, @"ncc", v174);
                  }
                  v176 = CFDictionaryGetValue(v92, @"nccAlt");
                  CFTypeID v177 = CFNumberGetTypeID();
                  if (v176 && CFGetTypeID(v176) == v177) {
                    CFDictionarySetValue((CFMutableDictionaryRef)a1, @"nccAlt", v176);
                  }
                  BOOL v26 = v92;
                  goto LABEL_279;
                }
              }
              CFNumberRef v40 = qword_1000A3698;
              if (!os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_69;
              }
              *(_WORD *)uint8_t buf = 0;
              CFTypeID v41 = "Calib0 success, calib1 not needed";
            }
            else
            {
              CFNumberRef v40 = qword_1000A3698;
              if (!os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_69;
              }
              *(_WORD *)uint8_t buf = 0;
              CFTypeID v41 = "calib0: device not relevant";
            }
            _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, v41, buf, 2u);
            goto LABEL_69;
          }
          int v32 = valuePtr | 0x800;
        }
        else
        {
          int v32 = valuePtr | 0x400;
        }
        unsigned int valuePtr = v32;
        goto LABEL_53;
      }
    }
    unsigned int valuePtr = 515;
    CFDictionaryRemoveValue(v5, @"Maximum Capacity Percent");
    CFDictionaryRemoveValue(v5, @"CycleCount");
    CFDictionaryRemoveValue(v5, @"Battery Service State");
    CFDictionaryRemoveValue(v5, @"calibration0");
    CFDictionaryRemoveValue(v5, @"Trusted LifeTime Max WRdc");
    sub_100031CE8();
    sub_100031CE8();
    sub_100031CE8();
    sub_100031CE8();
    sub_100031CE8();
    if (v18)
    {
      CFDictionarySetValue(v5, @"Battery Serial", v18);
    }
    else
    {
      CFDictionaryRemoveValue(v5, @"Battery Serial");
      sub_100031CE8();
    }
    CFNumberRef v28 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
    if (v28)
    {
      CFNumberRef v29 = v28;
      CFDictionarySetValue(v5, @"Battery Service Flags", v28);
      CFRelease(v29);
    }
    CFDictionaryApplyFunction(v5, (CFDictionaryApplierFunction)sub_100031CBC, 0);
    _CFPreferencesSynchronizeWithContainer();
    uint64_t v30 = (id)qword_1000A3698;
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint8_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Battery serial number changed.\n", buf, 2u);
    }

    unsigned int v27 = valuePtr;
LABEL_44:
    unsigned int valuePtr = v27 & 0xFFFFF3FF;
    if (!v18) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  int v190 = 7;
  unsigned int valuePtr = 35;
  CFNumberRef v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  if (v14)
  {
    CFNumberRef v15 = v14;
    CFDictionarySetValue((CFMutableDictionaryRef)a1, @"Battery Service Flags", v14);
    CFRelease(v15);
  }
  CFNumberRef v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v190);
  if (v16)
  {
    CFNumberRef v17 = v16;
    CFDictionarySetValue((CFMutableDictionaryRef)a1, @"Battery Service State", v16);
    CFRelease(v17);
  }
  if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR)) {
    sub_1000696C8();
  }
}

void sub_1000394E8(id a1, int a2)
{
  notify_get_state(a2, (uint64_t *)&qword_1000A36C0);
  BOOL v2 = qword_1000A3698;
  if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 134217984;
    uint64_t v4 = qword_1000A36C0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received notification for batteryHealthP0Threshold. Value set to %lld\n", (uint8_t *)&v3, 0xCu);
  }
}

void sub_10003959C(id a1, int a2)
{
  notify_get_state(a2, (uint64_t *)&qword_1000A36B0);
  BOOL v2 = qword_1000A3698;
  if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 134217984;
    uint64_t v4 = qword_1000A36B0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received notification for batteryHealthUPOAware. Value set to %lld\n", (uint8_t *)&v3, 0xCu);
  }
}

uint64_t sub_100039650()
{
  return MGIsDeviceOneOfType();
}

uint64_t sub_1000398A4(void *a1, void *a2, _DWORD *a3)
{
  uint64_t v6 = (dispatch_queue_t *)&unk_1000A4000;
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
  unsigned int v7 = &unk_1000A3000;
  if (!CFDictionaryContainsKey((CFDictionaryRef)a2, @"calibration0"))
  {
    int v179 = a3;
    id v8 = (id)qword_1000A3698;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint8_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "calib0: starting", buf, 2u);
    }

    dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
    BOOL v174 = +[NSMutableDictionary dictionary];
    id v9 = +[NSMutableDictionary dictionary];
    CFTypeID v173 = +[NSMutableDictionary dictionary];
    v176 = a1;
    id v10 = a1;
    CFDictionaryRef v11 = a2;
    uint64_t v12 = [v10 objectForKeyedSubscript:@"BatteryData"];
    int v13 = [v12 objectForKeyedSubscript:@"LifetimeData"];
    LODWORD(valuePtr) = 0;
    *(void *)uint8_t buf = 0;
    if (CFDictionaryGetValueIfPresent(v11, @"Battery Service Flags", (const void **)buf))
    {
      CFNumberRef v14 = *(const void **)buf;
      CFTypeID TypeID = CFNumberGetTypeID();
      if (v14)
      {
        if (CFGetTypeID(v14) == TypeID) {
          CFNumberGetValue(*(CFNumberRef *)buf, kCFNumberIntType, &valuePtr);
        }
      }
    }
    uint64_t v16 = 0xFFFFFFFFLL;
    unsigned int v183 = -1;
    *(void *)uint8_t buf = 0;
    if (CFDictionaryGetValueIfPresent(v11, @"Battery Service State", (const void **)buf))
    {
      CFNumberRef v17 = *(const void **)buf;
      CFTypeID v18 = CFNumberGetTypeID();
      if (v17)
      {
        if (CFGetTypeID(v17) == v18) {
          CFNumberGetValue(*(CFNumberRef *)buf, kCFNumberIntType, &v183);
        }
      }
    }
    unsigned int v182 = -1;
    *(void *)uint8_t buf = 0;
    CFDictionaryRef v171 = v11;
    if (CFDictionaryGetValueIfPresent(v11, @"Maximum Capacity Percent", (const void **)buf))
    {
      CFStringRef v19 = *(const void **)buf;
      CFTypeID v20 = CFNumberGetTypeID();
      if (v19 && CFGetTypeID(v19) == v20)
      {
        CFNumberGetValue(*(CFNumberRef *)buf, kCFNumberIntType, &v182);
        uint64_t v16 = v182;
      }
      else
      {
        uint64_t v16 = 0xFFFFFFFFLL;
      }
    }
    int v21 = +[NSNumber numberWithInt:v16];
    [v9 setObject:v21 forKeyedSubscript:@"Maximum Capacity Percent"];

    CFNumberRef v22 = +[NSNumber numberWithUnsignedInt:valuePtr];
    [v9 setObject:v22 forKeyedSubscript:@"Battery Service Flags"];

    CFNumberRef v23 = +[NSNumber numberWithInt:v183];
    [v9 setObject:v23 forKeyedSubscript:@"Battery Service State"];

    CFNumberRef v24 = [v10 objectForKeyedSubscript:@"Serial"];
    [v9 setObject:v24 forKeyedSubscript:@"Battery Serial"];

    io_registry_entry_t v25 = [v10 objectForKeyedSubscript:@"CycleCount"];
    [v9 setObject:v25 forKeyedSubscript:@"CycleCount"];

    BOOL v26 = [v10 objectForKeyedSubscript:@"GasGaugeFirmwareVersion"];
    [v9 setObject:v26 forKeyedSubscript:@"GasGaugeFirmwareVersion"];

    unsigned int v27 = [v12 objectForKeyedSubscript:@"AlgoChemID"];
    [v9 setObject:v27 forKeyedSubscript:@"AlgoChemID"];

    CFNumberRef v28 = sub_10003B464(v12);
    [v9 setObject:v28 forKeyedSubscript:@"WeightedRa"];

    *(void *)uint8_t buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472;
    *(void *)&uint8_t buf[16] = sub_10003B51C;
    *(void *)&unsigned char buf[24] = &unk_100092410;
    id v29 = v9;
    id v186 = v29;
    id v30 = v12;
    id v187 = v30;
    [&off_10009ADC0 enumerateObjectsUsingBlock:buf];
    long long v31 = [v13 objectForKeyedSubscript:@"TotalOperatingTime"];
    [v29 setObject:v31 forKeyedSubscript:@"TotalOperatingTime"];

    int v32 = [v10 objectForKeyedSubscript:@"NominalChargeCapacity"];
    [v29 setObject:v32 forKeyedSubscript:@"NominalChargeCapacity"];

    int v33 = [v13 objectForKeyedSubscript:@"NCCMin"];
    [v29 setObject:v33 forKeyedSubscript:@"NCCMin"];

    uint64_t v34 = [v13 objectForKeyedSubscript:@"NCCMax"];
    [v29 setObject:v34 forKeyedSubscript:@"NCCMax"];

    int v35 = [v10 objectForKeyedSubscript:@"AppleRawMaxCapacity"];
    [v29 setObject:v35 forKeyedSubscript:@"AppleRawMaxCapacity"];

    CFDictionaryRef v36 = [v13 objectForKeyedSubscript:@"MinimumFCC"];
    [v29 setObject:v36 forKeyedSubscript:@"MinimumFCC"];

    CFNumberRef v37 = [v13 objectForKeyedSubscript:@"MaximumFCC"];
    [v29 setObject:v37 forKeyedSubscript:@"MaximumFCC"];

    v169 = [v30 objectForKeyedSubscript:@"Qmax"];
    CFTypeID v38 = [v169 firstObject];
    [v29 setObject:v38 forKeyedSubscript:@"Qmax"];

    unsigned int v39 = [v13 objectForKeyedSubscript:@"MaximumQmax"];
    [v29 setObject:v39 forKeyedSubscript:@"MaximumQmax"];

    CFNumberRef v40 = [v13 objectForKeyedSubscript:@"MinimumQmax"];
    [v29 setObject:v40 forKeyedSubscript:@"MinimumQmax"];

    CFTypeID v41 = [v13 objectForKeyedSubscript:@"TimeAtHighSoc"];
    __int16 v42 = v41;
    if (v41)
    {
      CFNumberRef v43 = +[NSMutableString stringWithCapacity:](NSMutableString, "stringWithCapacity:", 2 * (void)[v41 length]);
      id v44 = v42;
      CFDictionaryRef v45 = (unsigned __int8 *)[v44 bytes];
      if ([v44 length])
      {
        unint64_t v46 = 0;
        do
          objc_msgSend(v43, "appendFormat:", @"%02x", v45[v46++]);
        while (v46 < (unint64_t)[v44 length]);
      }
      CFTypeID v47 = qword_1000A3698;
      if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v184 = 138412546;
        *(void *)&v184[4] = v44;
        *(_WORD *)&v184[12] = 2112;
        *(void *)&v184[14] = v43;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "calib0: baseline TAHSoC %@ -> %@", v184, 0x16u);
      }
      [v29 setObject:v43 forKeyedSubscript:@"TimeAtHighSoc"];
    }
    CFDictionaryRef v48 = +[NSNumber numberWithInt:sub_10003B594()];
    [v29 setObject:v48 forKeyedSubscript:@"LifetimeUPOCount"];

    *(void *)v184 = 0;
    *(void *)&v184[8] = 0;
    clock_gettime(_CLOCK_REALTIME, (timespec *)v184);
    CFNumberRef v49 = +[NSNumber numberWithUnsignedLongLong:*(void *)v184];
    [v29 setObject:v49 forKeyedSubscript:@"epoch"];

    CFTypeID v50 = qword_1000A3698;
    if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v184 = 138412290;
      *(void *)&v184[4] = v29;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "calib0: baseline data %@", v184, 0xCu);
    }
    uint64_t v52 = v183 == 6 || v183 - 1 < 3;
    a3 = v179;
    if ((*v179 & 0x200) != 0) {
      v52 |= 0xA0uLL;
    }
    uint64_t v53 = v52 | 0x400;
    CFBooleanRef v54 = +[NSNumber numberWithUnsignedLong:v52 | 0x400];
    [v174 setObject:v54 forKeyedSubscript:@"calibrationFlags"];

    id v55 = qword_1000A3698;
    if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v184 = 134217984;
      *(void *)&v184[4] = v53;
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "calib0: baseline calibration flags 0x%lx", v184, 0xCu);
    }
    [v174 setObject:v173 forKeyedSubscript:@"snapshots"];
    [v174 setObject:v29 forKeyedSubscript:@"baseline"];
    [(__CFDictionary *)v171 setObject:v174 forKeyedSubscript:@"calibration0"];

    unsigned int v7 = &unk_1000A3000;
    uint64_t v6 = (dispatch_queue_t *)&unk_1000A4000;
    a1 = v176;
  }
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
  id v56 = a1;
  id v57 = a2;
  id v58 = [v57 objectForKeyedSubscript:@"calibration0"];
  id v59 = [v58 mutableCopy];

  if (!v59)
  {
    unsigned __int16 v60 = (id)qword_1000A3698;
    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR)) {
      sub_100069FF4();
    }
  }
  int v61 = [v59 objectForKeyedSubscript:@"calibrationFlags"];
  unint64_t v62 = (unint64_t)[v61 unsignedLongValue];

  CFDictionaryRef v63 = (id)qword_1000A3698;
  if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint8_t buf = 134217984;
    *(void *)&uint8_t buf[4] = v62;
    _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "calib0: checking flags 0x%lx", buf, 0xCu);
  }

  if ((v62 & 0x20) == 0)
  {
    unsigned int v180 = a3;
    CFDictionaryRef v64 = [v59 objectForKeyedSubscript:@"baseline"];
    if (!v64)
    {
      CFNumberRef v65 = (id)qword_1000A3698;
      if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR)) {
        sub_100069BD8();
      }
    }
    id v175 = v59;
    unsigned int v66 = [v64 objectForKeyedSubscript:@"WeightedRa"];
    signed int v67 = [v66 intValue];

    CFTypeID v68 = [v64 objectForKeyedSubscript:@"WeightedRa"];

    id v172 = v57;
    CFTypeID v177 = v64;
    if (!v68)
    {
      uint64_t v69 = (id)qword_1000A3698;
      if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR)) {
        sub_100069FC0();
      }

      signed int v67 = -1;
    }
    uint64_t v70 = [v56 objectForKeyedSubscript:@"CycleCount"];
    unsigned int v71 = [v70 intValue];

    int v72 = [v56 objectForKeyedSubscript:@"CycleCount"];

    if (!v72)
    {
      CFBooleanRef v73 = (id)qword_1000A3698;
      if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR)) {
        sub_100069EA4();
      }

      unsigned int v71 = -1;
    }
    BOOL v74 = [v177 objectForKeyedSubscript:@"CycleCount"];
    unsigned int v75 = [v74 intValue];

    uint64_t v76 = [v177 objectForKeyedSubscript:@"CycleCount"];

    if (!v76)
    {
      id v77 = (id)qword_1000A3698;
      if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR)) {
        sub_100069F8C();
      }

      unsigned int v75 = -1;
    }
    unsigned int v78 = (id)qword_1000A3698;
    if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint8_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "calib0: checking exit criteria", buf, 2u);
    }

    signed int v79 = [v56 objectForKeyedSubscript:@"BatteryData"];
    unsigned int v80 = [v79 objectForKeyedSubscript:@"AlgoChemID"];

    if (v80)
    {
      int v81 = [v79 objectForKeyedSubscript:@"AlgoChemID"];
      int v82 = [v81 intValue];

      if (v82 <= 1006582719)
      {
        switch(v82)
        {
          case 1005792710:
            char v83 = 0;
            int v84 = 190;
            break;
          case 1005802730:
            char v83 = 0;
            int v84 = 205;
            break;
          case 1006542710:
            char v83 = 0;
            int v84 = 175;
            break;
          default:
            goto LABEL_73;
        }
LABEL_74:

        uint64_t v86 = (id)qword_1000A3698;
        if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint8_t buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = v67;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = v84;
          _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "calib0: initial wRDC:%d threshold:%d", buf, 0xEu);
        }

        if ((v83 & 1) != 0 || (int v87 = 20, v88 = 256, v67 != -1) && v67 <= v84)
        {
          int v87 = 10;
          uint64_t v88 = 64;
        }
        unint64_t v89 = v88 | v62;
        unsigned int v7 = &unk_1000A3000;
        int v90 = (id)qword_1000A3698;
        if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint8_t buf = 67109632;
          *(_DWORD *)&uint8_t buf[4] = v75;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = v71;
          *(_WORD *)&buf[14] = 1024;
          *(_DWORD *)&uint8_t buf[16] = v87;
          _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEFAULT, "calib0: initial:%d current:%d threshold:%d", buf, 0x14u);
        }

        int v91 = v71 - v75;
        uint64_t v92 = v89;
        unint64_t v93 = v172;
        uint64_t v94 = v175;
        if (v91 <= v87)
        {
LABEL_167:
          if (!v94) {
            goto LABEL_169;
          }
          goto LABEL_168;
        }
        uint64_t v170 = v89 | 0x420;
        int v95 = (id)qword_1000A3698;
        unint64_t v96 = v89;
        if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint8_t buf = 134217984;
          *(void *)&uint8_t buf[4] = v89 | 0x420;
          _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, "calib0: exit criteria met: 0x%lx", buf, 0xCu);
        }

        dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
        unint64_t v97 = qword_1000A36C0;
        if (qword_1000A36C0)
        {
LABEL_126:
          int v167 = v87;
          double v102 = (double)v97 * 0.7;
          id v103 = qword_1000A3698;
          if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint8_t buf = 134217984;
            *(double *)&uint8_t buf[4] = (double)v97 * 0.7;
            _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEFAULT, "calib0: checking for calibration failure with threshold %f", buf, 0xCu);
          }
          id v104 = v56;
          uint64_t v105 = [v104 objectForKeyedSubscript:@"CycleCount"];
          uint64_t v106 = (uint64_t)[v105 intValue];

          int v165 = v104;
          uint64_t v107 = [v104 objectForKeyedSubscript:@"CycleCount"];

          id v168 = v56;
          int v166 = v91;
          unint64_t v163 = v96;
          if (!v107)
          {
            if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR)) {
              sub_100069EA4();
            }
            uint64_t v106 = 0xFFFFFFFFLL;
          }
          CFTypeID v164 = [v172 objectForKeyedSubscript:@"calibration0"];
          int v108 = [v164 objectForKeyedSubscript:@"snapshots"];
          id v109 = [v108 count];
          if ((int)v106 < 1)
          {
            int v111 = 0;
            int v112 = 0;
            CFTypeID v123 = v180;
            goto LABEL_160;
          }
          id v110 = v109;
          int v111 = 0;
          int v112 = 0;
          int v113 = 0;
          while (1)
          {
            CFStringRef v114 = *((void *)v7 + 211);
            if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)uint8_t buf = 67109888;
              *(_DWORD *)&uint8_t buf[4] = v106;
              *(_WORD *)&uint8_t buf[8] = 1024;
              *(_DWORD *)&buf[10] = v112;
              *(_WORD *)&buf[14] = 1024;
              *(_DWORD *)&uint8_t buf[16] = v113;
              *(_WORD *)&buf[20] = 2048;
              *(void *)&buf[22] = v110;
              _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_DEFAULT, "calib0: loop: checking for target cycle %d, found %d (%d / %zu)", buf, 0x1Eu);
            }
            CFDictionaryRef v115 = +[NSString stringWithFormat:@"%d", v106];
            int v116 = [v108 objectForKeyedSubscript:v115];
            CFTypeID v117 = *((void *)v7 + 211);
            BOOL v118 = os_log_type_enabled(v117, OS_LOG_TYPE_DEFAULT);
            if (v116)
            {
              if (v118)
              {
                *(_DWORD *)uint8_t buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = v106;
                _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_DEFAULT, "calib0: loop: snapshot found for %d", buf, 8u);
              }
              CFTypeID v119 = [v116 objectForKeyedSubscript:@"WeightedRa"];
              int v120 = [v119 intValue];

              if (v120 > 0)
              {
                ++v112;
                CFTypeID v121 = qword_1000A3698;
                if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)uint8_t buf = 67109376;
                  *(_DWORD *)&uint8_t buf[4] = v112;
                  *(_WORD *)&uint8_t buf[8] = 1024;
                  *(_DWORD *)&buf[10] = v120;
                  _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_DEFAULT, "calib0: loop: adding sample #%d with wRDC %d", buf, 0xEu);
                }
                v111 += v120;
                if (v112 == 5)
                {
                  unsigned int v7 = &unk_1000A3000;
                  BOOL v125 = qword_1000A3698;
                  if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)uint8_t buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v125, OS_LOG_TYPE_DEFAULT, "calib0: loop: exiting, found enough", buf, 2u);
                  }
                  int v112 = 5;
LABEL_156:

LABEL_157:
                  if (v112 == 5)
                  {
                    CFTypeID v123 = v180;
                    unint64_t v93 = v172;
                    uint64_t v94 = v175;
                    int v91 = v166;
                    int v87 = v167;
                    goto LABEL_163;
                  }
                  CFTypeID v123 = v180;
                  unint64_t v93 = v172;
LABEL_160:
                  uint64_t v94 = v175;
                  int v91 = v166;
                  int v87 = v167;
                  int v126 = *((void *)v7 + 211);
                  if (os_log_type_enabled(v126, OS_LOG_TYPE_ERROR)) {
                    sub_100069ED8(v112, v126, v127);
                  }
                  if (v112 > 0)
                  {
LABEL_163:
                    double v128 = (double)v111 / (double)v112;

                    uint64_t v6 = (dispatch_queue_t *)&unk_1000A4000;
                    id v56 = v168;
                    uint64_t v92 = v170;
                    if (v128 > v102)
                    {
                      CFNumberRef v129 = *((id *)v7 + 211);
                      if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_WORD *)uint8_t buf = 0;
                        _os_log_impl((void *)&_mh_execute_header, v129, OS_LOG_TYPE_DEFAULT, "calib0: calibration failed", buf, 2u);
                      }

                      *v123 |= 0x20000u;
                      uint64_t v92 = v163 | 0x620;
                    }
                    goto LABEL_167;
                  }

                  uint64_t v6 = (dispatch_queue_t *)&unk_1000A4000;
                  id v56 = v168;
                  uint64_t v92 = v170;
                  if (!v175)
                  {
LABEL_169:

                    if (v91 > v87) {
                      goto LABEL_170;
                    }
                    dispatch_assert_queue_V2(v6[294]);
                    CFNumberRef v131 = v56;
                    id v133 = v93;
                    CFTypeID v134 = [v133 objectForKeyedSubscript:@"calibration0"];
                    id v135 = [v134 mutableCopy];

                    if (v135)
                    {
                      CFNumberRef v136 = [v135 objectForKeyedSubscript:@"snapshots"];
                      id v137 = [v136 mutableCopy];

                      *(_DWORD *)v184 = 0;
                      *(void *)uint8_t buf = 0;
                      if (CFDictionaryGetValueIfPresent((CFDictionaryRef)v133, @"Battery Service Flags", (const void **)buf))
                      {
                        v138 = *(const void **)buf;
                        CFTypeID v139 = CFNumberGetTypeID();
                        if (v138)
                        {
                          if (CFGetTypeID(v138) == v139) {
                            CFNumberGetValue(*(CFNumberRef *)buf, kCFNumberIntType, v184);
                          }
                        }
                      }
                      LODWORD(valuePtr) = -1;
                      *(void *)uint8_t buf = 0;
                      if (CFDictionaryGetValueIfPresent((CFDictionaryRef)v133, @"Battery Service State", (const void **)buf))
                      {
                        int v140 = *(const void **)buf;
                        CFTypeID v141 = CFNumberGetTypeID();
                        if (v140)
                        {
                          if (CFGetTypeID(v140) == v141) {
                            CFNumberGetValue(*(CFNumberRef *)buf, kCFNumberIntType, &valuePtr);
                          }
                        }
                      }
                      unsigned int v183 = -1;
                      *(void *)uint8_t buf = 0;
                      if (CFDictionaryGetValueIfPresent((CFDictionaryRef)v133, @"Maximum Capacity Percent", (const void **)buf))
                      {
                        int v142 = *(const void **)buf;
                        CFTypeID v143 = CFNumberGetTypeID();
                        if (v142)
                        {
                          if (CFGetTypeID(v142) == v143) {
                            CFNumberGetValue(*(CFNumberRef *)buf, kCFNumberIntType, &v183);
                          }
                        }
                      }
                      uint64_t v144 = [v131 objectForKeyedSubscript:@"CycleCount"];
                      uint64_t v145 = (uint64_t)[v144 intValue];

                      CFTypeID v146 = [v131 objectForKeyedSubscript:@"CycleCount"];

                      if (!v146)
                      {
                        if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR)) {
                          sub_100069EA4();
                        }
                        uint64_t v145 = 0xFFFFFFFFLL;
                      }
                      int v147 = +[NSString stringWithFormat:@"%d", v145];
                      uint64_t v148 = [v137 objectForKeyedSubscript:v147];

                      v149 = qword_1000A3698;
                      BOOL v150 = os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT);
                      if (v148)
                      {
                        if (v150)
                        {
                          *(_DWORD *)uint8_t buf = 67109120;
                          *(_DWORD *)&uint8_t buf[4] = v145;
                          _os_log_impl((void *)&_mh_execute_header, v149, OS_LOG_TYPE_DEFAULT, "calib0: %d already snapshotted", buf, 8u);
                        }
                      }
                      else
                      {
                        if (v150)
                        {
                          *(_DWORD *)uint8_t buf = 67109120;
                          *(_DWORD *)&uint8_t buf[4] = v145;
                          _os_log_impl((void *)&_mh_execute_header, v149, OS_LOG_TYPE_DEFAULT, "calib0: creating snapshot for %d", buf, 8u);
                        }
                        v151 = [v131 objectForKeyedSubscript:@"BatteryData"];
                        signed int v181 = [v151 objectForKeyedSubscript:@"LifetimeData"];
                        unsigned int v152 = +[NSMutableDictionary dictionary];
                        int v153 = +[NSNumber numberWithInt:v183];
                        [v152 setObject:v153 forKeyedSubscript:@"Maximum Capacity Percent"];

                        CFTypeID v154 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)v184];
                        [v152 setObject:v154 forKeyedSubscript:@"Battery Service Flags"];

                        CFNumberRef v155 = +[NSNumber numberWithInt:valuePtr];
                        [v152 setObject:v155 forKeyedSubscript:@"Battery Service State"];

                        CFNumberRef v156 = +[NSNumber numberWithInt:v145];
                        [v152 setObject:v156 forKeyedSubscript:@"CycleCount"];

                        int v178 = v151;
                        CFNumberRef v157 = sub_10003B464(v151);
                        [v152 setObject:v157 forKeyedSubscript:@"WeightedRa"];

                        CFNumberRef v158 = [v131 objectForKeyedSubscript:@"NominalChargeCapacity"];
                        [v152 setObject:v158 forKeyedSubscript:@"NominalChargeCapacity"];

                        v159 = [v181 objectForKeyedSubscript:@"TotalOperatingTime"];
                        [v152 setObject:v159 forKeyedSubscript:@"TotalOperatingTime"];

                        id v160 = +[NSNumber numberWithInt:sub_10003B594()];
                        [v152 setObject:v160 forKeyedSubscript:@"LifetimeUPOCount"];

                        CFTypeID v161 = qword_1000A3698;
                        if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)uint8_t buf = 67109378;
                          *(_DWORD *)&uint8_t buf[4] = v145;
                          *(_WORD *)&uint8_t buf[8] = 2112;
                          *(void *)&buf[10] = v152;
                          _os_log_impl((void *)&_mh_execute_header, v161, OS_LOG_TYPE_DEFAULT, "calib0: created snapshot for %d %@", buf, 0x12u);
                        }
                        [v137 setObject:v152 forKeyedSubscript:v147];
                      }
                      [v135 setObject:v137 forKeyedSubscript:@"snapshots"];
                      [v133 setObject:v135 forKeyedSubscript:@"calibration0"];
                    }
                    else if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR))
                    {
                      sub_100069E70();
                    }

                    uint64_t v132 = 1;
                    goto LABEL_204;
                  }
LABEL_168:
                  CFNumberRef v130 = +[NSNumber numberWithUnsignedLong:v92];
                  [v94 setObject:v130 forKeyedSubscript:@"calibrationFlags"];

                  [v93 setObject:v94 forKeyedSubscript:@"calibration0"];
                  goto LABEL_169;
                }
              }
              ++v113;
              unsigned int v7 = &unk_1000A3000;
            }
            else if (v118)
            {
              *(_DWORD *)uint8_t buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v106;
              _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_DEFAULT, "calib0: loop: no snapshot found for %d", buf, 8u);
            }
            if (v110 == (id)v113)
            {
              int v124 = *((void *)v7 + 211);
              if (os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)uint8_t buf = 134217984;
                *(void *)&uint8_t buf[4] = v110;
                _os_log_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_DEFAULT, "calib0: loop: ran through all %zu samples", buf, 0xCu);
              }
              goto LABEL_156;
            }

            BOOL v122 = __OFSUB__(v106, 1);
            uint64_t v106 = (v106 - 1);
            if (((int)v106 < 0) ^ v122 | (v106 == 0)) {
              goto LABEL_157;
            }
          }
        }
        CFNumberRef v98 = [v56 objectForKeyedSubscript:@"BatteryData"];
        CFNumberRef v99 = [v98 objectForKeyedSubscript:@"AlgoChemID"];

        if (v99)
        {
          unsigned int v100 = [v98 objectForKeyedSubscript:@"AlgoChemID"];
          int v101 = [v100 intValue];
        }
        else
        {
          if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR)) {
            sub_100069F58();
          }
          int v101 = -1;
        }
        *(_DWORD *)&uint8_t buf[16] = -61007701;
        *(_OWORD *)uint8_t buf = xmmword_100075EB8;
        if (MGIsDeviceOfType())
        {
          if (v101 <= 1006581019)
          {
            if (v101 != 1006540910)
            {
              if (v101 == 1006542710)
              {
                unint64_t v97 = 508;
                goto LABEL_106;
              }
              goto LABEL_105;
            }
            unint64_t v97 = 405;
LABEL_106:
            *(_DWORD *)&v184[16] = -235416490;
            *(_OWORD *)v184 = xmmword_100075ECC;
            if (MGIsDeviceOfType())
            {
              if (v101 == 1006672720)
              {
                unint64_t v97 = 521;
              }
              else if (v101 == 1006670920)
              {
                unint64_t v97 = 483;
              }
              else
              {
                unint64_t v97 = 577;
              }
            }
            int v189 = -820493242;
            long long valuePtr = xmmword_100075EE0;
            if (!MGIsDeviceOfType()) {
              goto LABEL_125;
            }
            if (v101 <= 1005801231)
            {
              if (v101 == 1005791210)
              {
                unint64_t v97 = 366;
                goto LABEL_125;
              }
            }
            else
            {
              switch(v101)
              {
                case 1005801232:
                  unint64_t v97 = 390;
                  goto LABEL_125;
                case 1005802730:
                  unint64_t v97 = 533;
                  goto LABEL_125;
                case 1005811242:
                  unint64_t v97 = 321;
LABEL_125:

                  goto LABEL_126;
              }
            }
            unint64_t v97 = 538;
            goto LABEL_125;
          }
          if (v101 == 1006581020)
          {
            unint64_t v97 = 609;
            goto LABEL_106;
          }
        }
LABEL_105:
        unint64_t v97 = 660;
        goto LABEL_106;
      }
      switch(v82)
      {
        case 1006582720:
          char v83 = 0;
          int v84 = 218;
          goto LABEL_74;
        case 1006660910:
          char v83 = 0;
          int v84 = 138;
          goto LABEL_74;
        case 1006672720:
          char v83 = 0;
          int v84 = 160;
          goto LABEL_74;
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_ERROR))
    {
      sub_100069F58();
    }
LABEL_73:
    int v84 = -1;
    char v83 = 1;
    goto LABEL_74;
  }
  unsigned int v85 = qword_1000A3698;
  if (os_log_type_enabled((os_log_t)qword_1000A3698, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint8_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEFAULT, "calib0: calibration complete", buf, 2u);
  }

LABEL_170:
  CFNumberRef v131 = *((id *)v7 + 211);
  if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint8_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v131, OS_LOG_TYPE_DEFAULT, "calib0: exiting", buf, 2u);
  }
  uint64_t v132 = 0;
LABEL_204:

  return v132;
}

id sub_10003B464(void *a1)
{
  id v1 = a1;
  BOOL v2 = v1;
  if (!v1) {
    goto LABEL_6;
  }
  int v3 = [v1 objectForKeyedSubscript:@"WeightedRa"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v4 = [v3 firstObject];

    int v3 = (void *)v4;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {

LABEL_6:
    int v3 = 0;
  }

  return v3;
}

void sub_10003B51C(uint64_t a1, void *a2)
{
  int v3 = *(void **)(a1 + 40);
  id v4 = a2;
  id v5 = [v3 objectForKeyedSubscript:v4];
  [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:v4];
}

uint64_t sub_10003B594()
{
  CFMutableDictionaryRef v0 = IOServiceMatching("IOService");
  if (!v0) {
    return 0xFFFFFFFFLL;
  }
  CFMutableDictionaryRef v1 = v0;
  int valuePtr = 0;
  values = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  CFDictionaryRef v2 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)&off_1000A3328, (const void **)&values, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!v2)
  {
    CFRelease(v1);
    return 0xFFFFFFFFLL;
  }
  CFDictionaryRef v3 = v2;
  CFDictionarySetValue(v1, @"IOPropertyMatch", v2);
  CFRelease(v3);
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v1);
  if (!MatchingService) {
    return 0xFFFFFFFFLL;
  }
  io_object_t v5 = MatchingService;
  CFMutableDictionaryRef properties = 0;
  IORegistryEntryCreateCFProperties(MatchingService, &properties, 0, 0);
  CFMutableDictionaryRef v6 = properties;
  if (properties
    && ([(__CFDictionary *)properties objectForKeyedSubscript:@"IOPMUBootUPOCounter"],
        unsigned int v7 = objc_claimAutoreleasedReturnValue(),
        v7,
        v7))
  {
    id v8 = [(__CFDictionary *)v6 objectForKeyedSubscript:@"IOPMUBootUPOCounter"];
    uint64_t v9 = (uint64_t)[v8 intValue];
  }
  else
  {
    uint64_t v9 = 0xFFFFFFFFLL;
  }
  IOObjectRelease(v5);

  return v9;
}

void sub_10003B6E8(id a1)
{
  CFMutableDictionaryRef v1 = (void *)MGCopyAnswer();
  if (v1)
  {
    id v4 = v1;
    id v2 = v1;
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();

    CFMutableDictionaryRef v1 = v4;
    if (isKindOfClass)
    {
      byte_1000A4C50 = [v2 BOOLValue];
      CFMutableDictionaryRef v1 = v4;
    }
  }
}

void sub_10003B77C(id a1)
{
  CFMutableDictionaryRef v1 = [[AVSystemControllerMonitor alloc] initWithBlock:&stru_1000920F0];
  id v2 = (void *)qword_1000A4C10;
  qword_1000A4C10 = (uint64_t)v1;

  if (!qword_1000A4C10 && os_log_type_enabled((os_log_t)qword_1000A36A0, OS_LOG_TYPE_ERROR)) {
    sub_10006A028();
  }
}

uint64_t sub_10003B7EC(uint64_t a1)
{
  io_object_t v2 = IOIteratorNext(*(_DWORD *)(a1 + 40));
  if (v2)
  {
    io_object_t v3 = v2;
    sub_100036698(**(_DWORD ***)(a1 + 32), v2);
    IOObjectRelease(v3);
  }
  io_object_t v4 = *(_DWORD *)(a1 + 40);

  return IOObjectRelease(v4);
}

void sub_10003B848(id a1)
{
}

double sub_10003B850(const void *a1)
{
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
  int valuePtr = 0;
  double result = 0.0;
  if (qword_1000A4948)
  {
    if (*(void *)qword_1000A4948)
    {
      CFDictionaryRef v3 = *(const __CFDictionary **)(*(void *)qword_1000A4948 + 8);
      if (v3)
      {
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v3, a1);
        if (Value)
        {
          CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
          LODWORD(v5) = valuePtr;
          return (double)v5 - kCFAbsoluteTimeIntervalSince1970;
        }
        else
        {
          return -kCFAbsoluteTimeIntervalSince1970;
        }
      }
    }
  }
  return result;
}

uint64_t sub_10003B8F4(const void *a1)
{
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4930);
  uint64_t v2 = &dword_100000018;
  while (1)
  {
    CFDictionaryRef v3 = *(const void **)((char *)&qword_1000A4950 + v2);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (v3)
    {
      if (CFGetTypeID(v3) == TypeID)
      {
        CFNumberRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)((char *)&qword_1000A4950 + v2), @"Type");
        CFTypeID v6 = CFStringGetTypeID();
        if (Value)
        {
          if (CFGetTypeID(Value) == v6 && CFEqual(Value, a1)) {
            break;
          }
        }
      }
    }
    v2 += 40;
    if (v2 == 664) {
      return 0;
    }
  }
  return *(uint64_t *)((char *)&qword_1000A4950 + v2);
}

void sub_10003B9D0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0xEu);
}

void sub_10003B9F0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xEu);
}

void sub_10003BA8C(id a1)
{
  qword_1000A4C88 = objc_alloc_init(PMCoreSmartPowerNapService);

  _objc_release_x1();
}

id sub_10003BD24(uint64_t a1, int token)
{
  uint64_t state64 = 0;
  notify_get_state(token, &state64);
  CFDictionaryRef v3 = qword_1000A36C8;
  if (os_log_type_enabled((os_log_t)qword_1000A36C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint8_t buf = 134217984;
    uint64_t v7 = state64;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CoreSmartPowerNap: SB Lock State %llu", buf, 0xCu);
  }
  return [*(id *)(a1 + 32) updateLockState:state64];
}

void sub_10003C04C(uint64_t a1)
{
  uint64_t v2 = qword_1000A36C8;
  if (os_log_type_enabled((os_log_t)qword_1000A36C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v14 = 138412290;
    uint64_t v15 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CSPN: received registration from %@", (uint8_t *)&v14, 0xCu);
  }
  uint64_t v4 = [[PMCoreSmartPowerNapClient alloc] initWithConnection:*(void *)(a1 + 40)];
  if (v4)
  {
    uint64_t v5 = [*(id *)(a1 + 48) clients];
    [v5 setObject:v4 forKeyedSubscript:*(void *)(a1 + 32)];

    CFTypeID v6 = [(PMCoreSmartPowerNapClient *)v4 connection];

    uint64_t v7 = qword_1000A36C8;
    if (v6)
    {
      if (os_log_type_enabled((os_log_t)qword_1000A36C8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        id v8 = *(void **)(a1 + 40);
        id v10 = v7;
        LODWORD(v8) = [v8 processIdentifier];
        unsigned int v11 = objc_msgSend(*(id *)(a1 + 48), "current_state");
        int v14 = 138412802;
        uint64_t v15 = v9;
        __int16 v16 = 1024;
        int v17 = (int)v8;
        __int16 v18 = 1024;
        unsigned int v19 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CSPN: Initial update state for client %@ with pid %d to %d", (uint8_t *)&v14, 0x18u);
      }
      uint64_t v12 = [(PMCoreSmartPowerNapClient *)v4 connection];
      int v13 = [v12 remoteObjectProxyWithErrorHandler:&stru_1000924D0];
      objc_msgSend(v13, "updateState:", objc_msgSend(*(id *)(a1 + 48), "current_state"));
    }
    else if (os_log_type_enabled((os_log_t)qword_1000A36C8, OS_LOG_TYPE_ERROR))
    {
      sub_10006334C((uint64_t *)(a1 + 32), v7);
    }
  }
}

void sub_10003C23C(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = qword_1000A36C8;
  if (os_log_type_enabled((os_log_t)qword_1000A36C8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    uint64_t v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Error updating state %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_10003C398(uint64_t a1)
{
  uint64_t v2 = qword_1000A36C8;
  if (os_log_type_enabled((os_log_t)qword_1000A36C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CSPN: received unregister from %@", (uint8_t *)&v5, 0xCu);
  }
  int v4 = [*(id *)(a1 + 40) clients];
  [v4 removeObjectForKey:*(void *)(a1 + 32)];
}

void sub_10003C68C(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = qword_1000A36C8;
  if (os_log_type_enabled((os_log_t)qword_1000A36C8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    int v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Error updating state %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_10003C7DC(uint64_t a1)
{
  uint64_t v2 = qword_1000A36C8;
  if (os_log_type_enabled((os_log_t)qword_1000A36C8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 40);
    v8[0] = 67109120;
    v8[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CoreSmartPowerNap: set state to %d", (uint8_t *)v8, 8u);
  }
  int v4 = *(unsigned __int8 *)(a1 + 40);
  if (v4 != objc_msgSend(*(id *)(a1 + 32), "current_state"))
  {
    if (*(unsigned char *)(a1 + 40))
    {
      if (*(unsigned char *)(a1 + 40) != 1) {
        return;
      }
      [*(id *)(a1 + 32) enterCoreSmartPowerNap];
      int v5 = [*(id *)(a1 + 32) predictor];
      uint64_t v6 = v5;
      uint64_t v7 = 1;
    }
    else
    {
      [*(id *)(a1 + 32) exitCoreSmartPowerNap];
      int v5 = [*(id *)(a1 + 32) predictor];
      uint64_t v6 = v5;
      uint64_t v7 = 0;
    }
    [v5 updateCoreSmartPowerNapState:v7];
  }
}

uint64_t sub_10003C99C(uint64_t a1)
{
  uint64_t v2 = (void *)qword_1000A36C8;
  if (os_log_type_enabled((os_log_t)qword_1000A36C8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(void **)(a1 + 32);
    int v4 = v2;
    v6[0] = 67109120;
    v6[1] = objc_msgSend(v3, "current_state");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CoreSmartPowerNap: syncState %u", (uint8_t *)v6, 8u);
  }
  return (*(uint64_t (**)(void, id))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), objc_msgSend(*(id *)(a1 + 32), "current_state"));
}

void sub_10003CE84(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) predictor];
  [v2 updateQueryDelta:*(unsigned int *)(a1 + 40)];
}

void sub_10003CFEC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) predictor];
  [v2 updateRequeryDelta:*(unsigned int *)(a1 + 40)];
}

void sub_10003D158(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) predictor];
  [v2 updateMotionAlarmThreshold:*(unsigned int *)(a1 + 40)];
}

void sub_10003D2C0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) predictor];
  [v2 updateMotionAlarmStartThreshold:*(unsigned int *)(a1 + 40)];
}

uint64_t sub_10003D45C(uint64_t a1, _OWORD *a2, int a3, BOOL *a4)
{
  double Current = CFAbsoluteTimeGetCurrent();
  BOOL v8 = a3 || (sub_10003F9CC() & 1) == 0;
  *a4 = v8;
  if (qword_1000A4CA0 || (qword_1000A4CA0 = (uint64_t)CFArrayCreateMutable(0, 1, &kCFTypeArrayCallBacks)) != 0)
  {
    long long v9 = a2[1];
    *(_OWORD *)atoken.val = *a2;
    *(_OWORD *)&atoken.val[4] = v9;
    *(void *)pid_t pidp = 0;
    audit_token_to_au32(&atoken, 0, 0, 0, 0, 0, &pidp[1], 0, 0);
    CFIndex Count = CFArrayGetCount((CFArrayRef)qword_1000A4CA0);
    if (Count >= 1)
    {
      CFIndex v11 = Count;
      for (CFIndex i = 0; v11 != i; ++i)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000A4CA0, i);
        if (!ValueAtIndex) {
          break;
        }
        CFMutableDictionaryRef Mutable = ValueAtIndex;
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"AppPID");
        if (Value)
        {
          CFNumberGetValue(Value, kCFNumberIntType, pidp);
          if (pidp[1] == pidp[0]) {
            goto LABEL_21;
          }
        }
      }
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 3, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFArrayAppendValue((CFMutableArrayRef)qword_1000A4CA0, Mutable);
    CFRelease(Mutable);
    if (CFArrayGetCount((CFArrayRef)qword_1000A4CA0) >= 11) {
      CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_1000A4CA0, 0);
    }
    CFNumberRef v16 = CFNumberCreate(0, kCFNumberIntType, &pidp[1]);
    if (v16)
    {
      CFNumberRef v17 = v16;
      CFDictionarySetValue(Mutable, @"AppPID", v16);
      CFRelease(v17);
    }
    if (proc_name(pidp[1], &atoken, 0x400u))
    {
      CFStringRef v18 = CFStringCreateWithCString(0, (const char *)&atoken, 0);
      if (v18)
      {
        CFStringRef v19 = v18;
        CFDictionarySetValue(Mutable, @"AppPathString", v18);
        CFRelease(v19);
      }
    }
    if (Mutable)
    {
LABEL_21:
      CFTypeID v20 = (__CFArray *)CFDictionaryGetValue(Mutable, @"HIDHistoryArray");
      if (v20
        || (CFTypeID v20 = CFArrayCreateMutable(0, 1, &kCFTypeArrayCallBacks),
            CFDictionarySetValue(Mutable, @"HIDHistoryArray", v20),
            CFRelease(v20),
            v20))
      {
        if (CFArrayGetCount(v20) >= 1
          && (CFDataRef v21 = (const __CFData *)CFArrayGetValueAtIndex(v20, 0)) != 0
          && (BytePtr = CFDataGetBytePtr(v21), Current < *(double *)BytePtr + 300.0))
        {
          if (a3) {
            ++*((_DWORD *)BytePtr + 2);
          }
          else {
            ++*((_DWORD *)BytePtr + 3);
          }
        }
        else
        {
          *(double *)atoken.val = (double)((int)Current / 300) * 300.0;
          *(void *)&atoken.val[2] = 0;
          if (a3) {
            atoken.val[2] = 1;
          }
          else {
            atoken.val[3] = 1;
          }
          CFDataRef v23 = CFDataCreate(0, (const UInt8 *)&atoken, 16);
          if (v23)
          {
            CFDataRef v24 = v23;
            CFArrayInsertValueAtIndex(v20, 0, v23);
            CFRelease(v24);
          }
          if (CFArrayGetCount(v20) >= 13)
          {
            do
            {
              CFIndex v25 = CFArrayGetCount(v20);
              CFArrayRemoveValueAtIndex(v20, v25 - 1);
            }
            while (CFArrayGetCount(v20) > 12);
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_10003D7E0(uint64_t a1, vm_address_t *a2, unsigned int *a3, int *a4)
{
  *a2 = 0;
  *a3 = 0;
  CFDataRef Data = CFPropertyListCreateData(0, (CFPropertyListRef)qword_1000A4CA0, kCFPropertyListXMLFormat_v1_0, 0, 0);
  if (Data)
  {
    CFDataRef v8 = Data;
    *a2 = (vm_address_t)CFDataGetBytePtr(Data);
    unsigned int Length = CFDataGetLength(v8);
    *a3 = Length;
    vm_allocate(mach_task_self_, a2, Length, 1);
    id v10 = (void *)*a2;
    if (v10)
    {
      BytePtr = CFDataGetBytePtr(v8);
      memcpy(v10, BytePtr, *a3);
      *a4 = 0;
    }
    CFRelease(v8);
    int v12 = 0;
  }
  else
  {
    int v12 = -536870212;
  }
  *a4 = v12;
  return 0;
}

uint64_t sub_10003D8B8(uint64_t a1)
{
  return *(unsigned char *)(a1 + 2) & 1;
}

uint64_t sub_10003D8C4(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 1) >> 5) & 1;
}

void sub_10003D8D0(void *a1, void *a2, unsigned int *a3, int *a4)
{
  if (qword_1000A4CA8 == -1)
  {
    if (!a1) {
      return;
    }
  }
  else
  {
    dispatch_once(&qword_1000A4CA8, &stru_100092510);
    if (!a1) {
      return;
    }
  }
  if (a2 && a3 && a4 && sub_10002BD84())
  {
    id v8 = [a1 objectForKeyedSubscript:@"KioskMode"];
    if (v8)
    {
      long long v9 = v8;
      if ([v8 objectForKeyedSubscript:@"KioskModeMode"])
      {
        BOOL v10 = objc_msgSend(objc_msgSend(v9, "objectForKeyedSubscript:", @"KioskModeMode"), "intValue") == 2|| objc_msgSend(objc_msgSend(v9, "objectForKeyedSubscript:", @"KioskModeMode"), "intValue") == 3;
        int v11 = *a4;
        int v12 = (*a4 >> 13) & 1;
        if (!sub_10002BD84()) {
          goto LABEL_50;
        }
        id v13 = [a1 objectForKeyedSubscript:@"BatteryData"];
        if (v13)
        {
          int v14 = v13;
          id v15 = [v13 objectForKeyedSubscript:@"Qmax"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            id v15 = [v15 firstObject];
          }
          else
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              if (os_log_type_enabled((os_log_t)qword_1000A4CB0, OS_LOG_TYPE_ERROR)) {
                sub_10006A170();
              }
              return;
            }
          }
          id v16 = [v15 intValue];
          id v17 = [v14 objectForKeyedSubscript:@"LifetimeData"];
          if (v17)
          {
            unsigned int v18 = v11 & 0x2000;
            CFStringRef v19 = objc_msgSend(objc_msgSend(v17, "objectForKeyedSubscript:", @"TotalOperatingTime"), "unsignedLongLongValue");
            CFTypeID v20 = qword_1000A4CB0;
            if (os_log_type_enabled((os_log_t)qword_1000A4CB0, OS_LOG_TYPE_DEFAULT))
            {
              unsigned int v21 = objc_msgSend(objc_msgSend(v9, "objectForKeyedSubscript:", @"KioskModeMode"), "intValue");
              int v22 = *a4;
              *(_DWORD *)uint8_t buf = 67110400;
              int v46 = v21;
              __int16 v47 = 1024;
              BOOL v48 = v22;
              __int16 v49 = 1024;
              *(_DWORD *)CFTypeID v50 = v10;
              *(_WORD *)&v50[4] = 1024;
              *(_DWORD *)&v50[6] = v18 >> 13;
              *(_WORD *)&v50[10] = 1024;
              *(_DWORD *)&v50[12] = v16;
              *(_WORD *)&v50[16] = 2048;
              v51[0] = v19;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[ENTER] kiosk mode: %d flags: 0x%x K/Q:%d/%d qmax:%d currentTime:%llu", buf, 0x2Au);
            }
            if ([a2 objectForKeyedSubscript:@"lastGoodQmax"])
            {
              objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", @"lastGoodQmax"), "intValue");
            }
            else
            {
              CFDataRef v23 = qword_1000A4CB0;
              if (os_log_type_enabled((os_log_t)qword_1000A4CB0, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)uint8_t buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "No previous Qmax state found, storing first Good Qmax update", buf, 2u);
              }
              sub_10003E270(a2, (uint64_t)v16, (uint64_t)v19, @"lastGoodQmax", @"lastGoodQmaxTimeStamp");
            }
            if (v18) {
              char v24 = 1;
            }
            else {
              char v24 = v10;
            }
            if (v24)
            {
              char v25 = !v10;
              if (v10 && !v18)
              {
                BOOL v26 = objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", @"lastGoodQmaxTimeStamp"), "unsignedLongLongValue");
                uint64_t v44 = (uint64_t)v19;
                unint64_t v27 = v19 - v26;
                int v12 = v27 >> 7 > 0x2C;
                CFNumberRef v28 = qword_1000A4CB0;
                BOOL v29 = os_log_type_enabled((os_log_t)qword_1000A4CB0, OS_LOG_TYPE_DEFAULT);
                if (v27 >> 7 < 0x2D)
                {
                  if (v29)
                  {
                    *(_DWORD *)uint8_t buf = 67110144;
                    int v46 = 1;
                    __int16 v47 = 1024;
                    BOOL v48 = 0;
                    __int16 v49 = 2048;
                    *(void *)CFTypeID v50 = v44;
                    *(_WORD *)&v50[8] = 2048;
                    *(void *)&v50[10] = v26;
                    LOWORD(v51[0]) = 2048;
                    *(void *)((char *)v51 + 2) = v27;
                    id v30 = "K/Q:%d/%d [UPDATE] timeNow: (%llu) timeStored: (%llu) timediff: (%llu)";
                    goto LABEL_72;
                  }
                }
                else if (v29)
                {
                  *(_DWORD *)uint8_t buf = 67110144;
                  int v46 = 1;
                  __int16 v47 = 1024;
                  BOOL v48 = 0;
                  __int16 v49 = 2048;
                  *(void *)CFTypeID v50 = v44;
                  *(_WORD *)&v50[8] = 2048;
                  *(void *)&v50[10] = v26;
                  LOWORD(v51[0]) = 2048;
                  *(void *)((char *)v51 + 2) = v27;
                  id v30 = "K/Q:%d/%d [EXIT] timeNow: (%llu) timeStored: (%llu) timediff: (%llu)";
LABEL_72:
                  _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, v30, buf, 0x2Cu);
                }
                if (sub_10003E2F4(a2, (int)v16))
                {
                  sub_10003E270(a2, (uint64_t)v16, v44, @"lastKioskQmax", @"lastKioskQmaxTimeStamp");
                  __int16 v42 = qword_1000A4CB0;
                  if (os_log_type_enabled((os_log_t)qword_1000A4CB0, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)uint8_t buf = 67109888;
                    int v46 = 1;
                    __int16 v47 = 1024;
                    BOOL v48 = v27 >> 7 > 0x2C;
                    __int16 v49 = 1024;
                    *(_DWORD *)CFTypeID v50 = v16;
                    *(_WORD *)&v50[4] = 2048;
                    *(void *)&v50[6] = v44;
LABEL_81:
                    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "K/Q:%d/%d [UPDATE] kioskQmax: %d kioskQmaxTime: %llu", buf, 0x1Eu);
                    goto LABEL_50;
                  }
                }
                goto LABEL_50;
              }
              if (!v18) {
                char v25 = 1;
              }
              if ((v25 & 1) == 0)
              {
                CFNumberRef v43 = qword_1000A4CB0;
                if (os_log_type_enabled((os_log_t)qword_1000A4CB0, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)uint8_t buf = 67109376;
                  int v46 = 1;
                  __int16 v47 = 1024;
                  BOOL v48 = 1;
                  _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "K/Q:%d/%d [UPDATE]", buf, 0xEu);
                }
                if (!sub_10003E2F4(a2, (int)v16)) {
                  goto LABEL_50;
                }
                sub_10003E270(a2, (uint64_t)v16, (uint64_t)v19, @"lastKioskQmax", @"lastKioskQmaxTimeStamp");
                __int16 v42 = qword_1000A4CB0;
                if (!os_log_type_enabled((os_log_t)qword_1000A4CB0, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_50;
                }
                *(_DWORD *)uint8_t buf = 67109888;
                int v46 = 1;
                __int16 v47 = 1024;
                BOOL v48 = 1;
                __int16 v49 = 1024;
                *(_DWORD *)CFTypeID v50 = v16;
                *(_WORD *)&v50[4] = 2048;
                *(void *)&v50[6] = v19;
                goto LABEL_81;
              }
              if (v10 || v18 == 0)
              {
LABEL_50:
                if (v10) {
                  int v33 = 0x10000;
                }
                else {
                  int v33 = 0;
                }
                unsigned int v34 = *a3 & 0xFFFEDFFF | v33;
                if (v12) {
                  int v35 = 0x2000;
                }
                else {
                  int v35 = 0;
                }
                *a3 = v34 | v35;
                CFDictionaryRef v36 = qword_1000A4CB0;
                if (os_log_type_enabled((os_log_t)qword_1000A4CB0, OS_LOG_TYPE_DEFAULT))
                {
                  unsigned int v37 = objc_msgSend(objc_msgSend(v9, "objectForKeyedSubscript:", @"KioskModeMode"), "intValue");
                  unsigned int v38 = *a3;
                  *(_DWORD *)uint8_t buf = 67109888;
                  int v46 = v37;
                  __int16 v47 = 1024;
                  BOOL v48 = v38;
                  __int16 v49 = 1024;
                  *(_DWORD *)CFTypeID v50 = v10;
                  *(_WORD *)&v50[4] = 1024;
                  *(_DWORD *)&v50[6] = v12;
                  _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "[EXIT] kiosk mode: %d flags: 0x%x K/Q:%d/%d", buf, 0x1Au);
                }
                return;
              }
              if (![a2 objectForKeyedSubscript:@"lastBadQmax"]
                || ![a2 objectForKeyedSubscript:@"lastBadQmaxTimeStamp"]
                || (id v39 = objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", @"lastBadQmaxTimeStamp"), "unsignedLongLongValue"), v39 < objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", @"lastGoodQmaxTimeStamp"), "unsignedLongLongValue")))
              {
                CFNumberRef v40 = qword_1000A4CB0;
                if (!os_log_type_enabled((os_log_t)qword_1000A4CB0, OS_LOG_TYPE_DEFAULT))
                {
LABEL_69:
                  sub_10003E270(a2, (uint64_t)v16, (uint64_t)v19, @"lastBadQmax", @"lastBadQmaxTimeStamp");
                  goto LABEL_50;
                }
                *(_DWORD *)uint8_t buf = 67109376;
                int v46 = 0;
                __int16 v47 = 1024;
                BOOL v48 = 1;
                CFTypeID v41 = "K/Q:%d/%d [ENTER]";
LABEL_68:
                _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, v41, buf, 0xEu);
                goto LABEL_69;
              }
              if ((int)v16 <= (int)objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", @"lastBadQmax"), "intValue"))
              {
                if ((int)v16 >= (int)objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", @"lastBadQmax"), "intValue"))goto LABEL_50; {
                CFNumberRef v40 = qword_1000A4CB0;
                }
                if (!os_log_type_enabled((os_log_t)qword_1000A4CB0, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_69;
                }
                *(_DWORD *)uint8_t buf = 67109376;
                int v46 = 0;
                __int16 v47 = 1024;
                BOOL v48 = 1;
                CFTypeID v41 = "K/Q:%d/%d [UPDATE]";
                goto LABEL_68;
              }
              long long v31 = qword_1000A4CB0;
              if (!os_log_type_enabled((os_log_t)qword_1000A4CB0, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_48;
              }
              *(_DWORD *)uint8_t buf = 67109376;
              int v46 = 0;
              __int16 v47 = 1024;
              BOOL v48 = 1;
              int v32 = "K/Q:%d/%d [EXIT]";
            }
            else
            {
              if (!sub_10003E2F4(a2, (int)v16))
              {
LABEL_49:
                int v12 = 0;
                goto LABEL_50;
              }
              long long v31 = qword_1000A4CB0;
              if (!os_log_type_enabled((os_log_t)qword_1000A4CB0, OS_LOG_TYPE_DEFAULT))
              {
LABEL_48:
                sub_10003E270(a2, (uint64_t)v16, (uint64_t)v19, @"lastGoodQmax", @"lastGoodQmaxTimeStamp");
                goto LABEL_49;
              }
              *(_DWORD *)uint8_t buf = 67109376;
              int v46 = 0;
              __int16 v47 = 1024;
              BOOL v48 = 0;
              int v32 = "K/Q:%d/%d [UPDATE]";
            }
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, v32, buf, 0xEu);
            goto LABEL_48;
          }
          if (os_log_type_enabled((os_log_t)qword_1000A4CB0, OS_LOG_TYPE_ERROR)) {
            sub_10006A13C();
          }
        }
        else if (os_log_type_enabled((os_log_t)qword_1000A4CB0, OS_LOG_TYPE_ERROR))
        {
          sub_10006A108();
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_1000A4CB0, OS_LOG_TYPE_ERROR))
      {
        sub_10006A0D4();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1000A4CB0, OS_LOG_TYPE_ERROR))
    {
      sub_10006A0A0();
    }
  }
}

void sub_10003E240(id a1)
{
  qword_1000A4CB0 = (uint64_t)os_log_create("com.apple.powerd", "batteryCapacityMonitor");
}

id sub_10003E270(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend(a1, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2), a4);
  id v8 = +[NSNumber numberWithUnsignedLongLong:a3];

  return [a1 setObject:v8 forKeyedSubscript:a5];
}

BOOL sub_10003E2F4(void *a1, int a2)
{
  CFStringRef v4 = @"lastGoodQmax";
  if ([a1 objectForKeyedSubscript:@"lastKioskQmaxTimeStamp"])
  {
    id v5 = objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", @"lastGoodQmaxTimeStamp"), "unsignedLongLongValue");
    if (v5 <= objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", @"lastKioskQmaxTimeStamp"), "unsignedLongLongValue"))CFStringRef v4 = @"lastKioskQmax"; {
  }
    }
  return objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", v4), "intValue") != a2;
}

void sub_10003E38C()
{
  io_object_t notification = 0;
  CFMutableDictionaryRef properties = 0;
  qword_1000A36D0 = (uint64_t)os_log_create("com.apple.powerd", "sleepWake");
  qword_1000A3700 = 0;
  unk_1000A3708 = 0;
  qword_1000A36F8 = 0;
  dword_1000A3710 = 257;
  qword_1000A4CB8 = (uint64_t)CFArrayCreateMutable(kCFAllocatorDefault, 100, (const CFArrayCallBacks *)&unk_1000A3418);
  io_service_t v0 = sub_1000212AC();
  dword_1000A4CC0 = v0;
  if (!v0)
  {
    CFMutableDictionaryRef v1 = "Could not find IOPMrootDomain";
    goto LABEL_5;
  }
  if (IOServiceOpen(v0, mach_task_self_, 0, (io_connect_t *)&dword_1000A4CC4))
  {
    CFMutableDictionaryRef v1 = "Could not open IOPMrootDomain";
LABEL_5:
    asl_log(0, 0, 3, "PowerManagement: unable to register with kernel power management. %s %s", "Reason = : ", v1);
    return;
  }
  id v2 = IONotificationPortCreate(0);
  if (!v2)
  {
    CFMutableDictionaryRef v1 = "Could not create IONotificationPort";
    goto LABEL_5;
  }
  int v3 = v2;
  if (IOServiceAddInterestNotification(v2, dword_1000A4CC0, "IOPMSystemCapabilityInterest", (IOServiceInterestCallback)sub_10003E59C, 0, &notification))
  {
    CFMutableDictionaryRef v1 = "Could not add interest notification kIOPMAppPowerStateInterest";
    goto LABEL_5;
  }
  CFStringRef v4 = sub_10005C968();
  IONotificationPortSetDispatchQueue(v3, v4);
  id v5 = sub_10005C968();
  dispatch_async(v5, &stru_100092530);
  IORegistryEntryCreateCFProperties(dword_1000A4CC0, &properties, 0, 0);
  CFMutableDictionaryRef v6 = properties;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (v6)
  {
    if (CFGetTypeID(v6) == TypeID)
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(properties, @"System Capabilities");
      CFTypeID v9 = CFNumberGetTypeID();
      if (Value)
      {
        if (CFGetTypeID(Value) == v9)
        {
          int valuePtr = 0;
          CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
          if (valuePtr) {
            int v10 = 2;
          }
          else {
            int v10 = 1;
          }
          if ((valuePtr & 6) != 0) {
            int v11 = 64;
          }
          else {
            int v11 = v10;
          }
          dword_1000A4CC8 = v11;
        }
      }
    }
  }
  if (properties) {
    CFRelease(properties);
  }
}

void sub_10003E59C(uint64_t a1, uint64_t a2, int a3, unsigned int *a4)
{
  uint64_t v6 = sub_10005CD98();
  CFStringRef theString = &stru_100093D08;
  CFStringRef v49 = &stru_100093D08;
  switch(a3)
  {
    case -536870288:
      CFStringRef v10 = sub_10005CD04();
      if (CFEqual(v10, @"Low Power Sleep")
        || CFEqual(v10, @"Thermal Emergency Sleep")
        || sub_10005AC24() && sub_10005AC24() != 255)
      {
        byte_1000A36EB = 1;
      }
      if (CFEqual(v10, @"Idle Sleep"))
      {
        int v11 = (dword_1000A4CC8 & 2) != 0 ? 1 : sub_10002D658(5u) ^ 1;
        int v15 = sub_10004DBC8(0xCu);
        if (!v11 || v15)
        {
LABEL_22:
          io_connect_t v14 = dword_1000A4CC4;
          IOCancelPowerChange(v14, (intptr_t)a4);
          return;
        }
      }
      qword_1000A36E0 = mach_absolute_time();
      byte_1000A3414 = 0;
      io_connect_t v16 = dword_1000A4CC4;
      intptr_t v17 = (intptr_t)a4;
      goto LABEL_30;
    case -536870256:
      byte_1000A3414 = 1;
      sub_10002D658(8u);
      byte_1000A36EB = 0;
      return;
    case -536656880:
      CFStringRef v7 = (const __CFString *)v6;
      uint64_t v8 = sub_10004DBC8(0xCu);
      if (CFStringCompare(v7, @"Idle Sleep", 0)) {
        int v9 = 0;
      }
      else {
        int v9 = sub_10002D658(0xBu);
      }
      if ((v8 | v9) != 1)
      {
        IOAllowPowerChange(dword_1000A4CC4, (intptr_t)a4);
        byte_1000A3414 = 0;
        qword_1000A36E0 = mach_absolute_time();
        return;
      }
      nullsub_4(0, v8);
      goto LABEL_22;
  }
  if ((a3 & 0xFFFFFFEF) == 0xE0034420)
  {
    int v12 = sub_10005C968();
    v46[0] = _NSConcreteStackBlock;
    v46[1] = 3221225472;
    v46[2] = sub_100041BB8;
    v46[3] = &unk_100092470;
    int v47 = a3;
    v46[4] = a4;
    dispatch_async(v12, v46);
    return;
  }
  if (a3 != -536870080)
  {
    if (a3 == -536656800)
    {
      id v13 = qword_1000A36D0;
      if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint8_t buf = 136315138;
        *(void *)&uint8_t buf[4] = a4;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Request user active from kernel driver %s", buf, 0xCu);
      }
    }
    else
    {
      CFDataRef v23 = qword_1000A36D0;
      if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_ERROR)) {
        sub_10006A1A4(a3, v23);
      }
    }
    return;
  }
  sub_10002C7B4((uint64_t)a4);
  sub_10005F630(a4[4], a4[5], a4[2]);
  unsigned int v18 = sub_1000557DC(a4);
  unsigned int v20 = a4[4];
  unsigned int v21 = a4[5];
  if ((v20 & 7) == 1 && (a4[5] & 7) != 1)
  {
    nullsub_4(v18, v19);
    unsigned int v20 = a4[4];
    unsigned int v21 = a4[5];
  }
  unsigned int v22 = a4[2];
  if ((v21 ^ v20) & 1) != 0 && (v21 & 1) == 0 && (v22)
  {
    byte_1000A36E8 = 0;
    byte_1000A36E9 = 0;
    qword_1000A4CE8 = 0;
    qword_1000A4CE0 = 0;
    byte_1000A36EA = 0;
    qword_1000A4CD8 = 0;
    sub_100041CE4(0);
    notify_post("com.apple.powermanagement.systempowerstate");
    sub_10005CDA4();
    dword_1000A4CC8 = dword_1000A4CC8 & 0xFFFFFF08 | 1;
    sub_10005DAE0("success", 0, 0, 3);
    byte_1000A4D08 = 1;
    nullsub_4(64, 0);
    nullsub_4(4, 0);
    sub_1000406FC();
    if (!sub_100041D78(*a4))
    {
      sub_100040E9C(0);
      IOAllowPowerChange(dword_1000A4CC4, *a4);
    }
    sub_10005C9A8();
    sub_1000400CC();
    return;
  }
  if (v21 ^ v20) == 6 && (v21 & 6) == 0 && (v22)
  {
    byte_1000A36E8 = 0;
    byte_1000A36E9 = 0;
    qword_1000A4CE8 = 0;
    qword_1000A4CE0 = 0;
    byte_1000A36EA = 0;
    qword_1000A4CD8 = 0;
    dword_1000A4CC8 = dword_1000A4CC8 & 0xFFFFFF3D | 2;
LABEL_63:
    intptr_t v17 = *a4;
    if (!v17) {
      return;
    }
    io_connect_t v16 = dword_1000A4CC4;
LABEL_30:
    IOAllowPowerChange(v16, v17);
    return;
  }
  if ((v22 & 2) == 0)
  {
    int v24 = v21 & 1;
    goto LABEL_56;
  }
  int v24 = v21 & 1;
  if (((v20 & 1) != 0 || (v21 & 1) == 0) && ((v20 & 2) != 0 || (v21 & 2) == 0))
  {
LABEL_56:
    if ((v20 & 1) == 0 && (v24 & v22) != 0)
    {
      byte_1000A36EB = 0;
      byte_1000A3414 = 1;
      dword_1000A4CC8 = 2;
      char v25 = sub_10005C968();
      dispatch_async(v25, &stru_100092610);
      uint64_t v26 = 32793;
      if ((a4[4] & 2) == 0)
      {
        if ((a4[5] & 2) != 0) {
          uint64_t v26 = 32799;
        }
        else {
          uint64_t v26 = 32793;
        }
      }
      sub_1000420FC(v26);
    }
    goto LABEL_63;
  }
  sub_10005CE58(&theString, &v49);
  uint64_t v27 = mach_absolute_time();
  sub_100040024(v27);
  if (CFStringFind(theString, @"RTC", 0).location != -1)
  {
    if (!qword_1000A3790) {
      goto LABEL_84;
    }
    goto LABEL_74;
  }
  CFIndex location = CFStringFind(theString, @"rtc", 0).location;
  BOOL v29 = (const void *)qword_1000A3790;
  if (location != -1 && qword_1000A3790)
  {
LABEL_74:
    double Current = CFAbsoluteTimeGetCurrent();
    CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)qword_1000A3790, @"time");
    CFNumberRef v32 = (const __CFNumber *)sub_100016038(Value);
    *(void *)uint8_t buf = 0;
    CFNumberGetValue(v32, kCFNumberDoubleType, buf);
    double v33 = *(double *)buf;
    if (*(double *)buf > Current && *(double *)buf - Current >= *(double *)&qword_1000A3408)
    {
      CFDictionaryRef v36 = qword_1000A36D0;
      if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_DEBUG)) {
        sub_10006A21C(v36, v33, Current);
      }
    }
    else if (!qword_1000A3788)
    {
      qword_1000A3788 = (uint64_t)CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)qword_1000A3790);
      unsigned int v34 = (const void *)IOPMSleepWakeCopyUUID();
      if (v34)
      {
        int v35 = v34;
        CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A3788, @"SleepWakeUUID", v34);
        CFRelease(v35);
      }
    }
    BOOL v29 = (const void *)qword_1000A3790;
  }
  if (v29)
  {
    CFRelease(v29);
    qword_1000A3790 = 0;
  }
LABEL_84:
  sub_1000406FC();
  byte_1000A3414 = 1;
  sub_10002F1B0();
  unsigned int v38 = a4[4];
  if ((v38 & 2) == 0 && (a4[5] & 2) != 0)
  {
    dword_1000A4CC8 = dword_1000A4CC8 & 0xFFFFFF08 | 0x40;
    if ((v38 & 1) == 0)
    {
      if (byte_1000A4D08) {
        sub_10005DD64("success", 0, 0, 31, 0);
      }
      nullsub_4(0, v37);
      goto LABEL_105;
    }
    if (byte_1000A4D08)
    {
      int v42 = 0;
    }
    else
    {
      if (byte_1000A4D09 != 1)
      {
LABEL_105:
        nullsub_4(8, (v38 & 1) == 0);
        byte_1000A4D09 = 0;
        byte_1000A4D08 = 0;
        uint64_t v39 = 31;
LABEL_106:
        byte_1000A36EA = 1;
        qword_1000A4CD8 = 0;
        sub_10003FDFC();
        goto LABEL_107;
      }
      byte_1000A36E9 = 1;
      int v42 = 2;
    }
    sub_10005DD64("success", 0, 0, 31, v42);
    goto LABEL_105;
  }
  if (v38 & 1) == 0 && (a4[5])
  {
    byte_1000A36E8 = 1;
    dword_1000A4CC8 = dword_1000A4CC8 & 0xFFFFFF08 | 2;
    nullsub_4(a4, v37);
    double v41 = CFAbsoluteTimeGetCurrent();
    if (qword_1000A4CD0 && *(double *)&qword_1000A36D8 != 0.0 && v41 > *(double *)&qword_1000A36D8)
    {
      dispatch_suspend((dispatch_object_t)qword_1000A4CD0);
      dispatch_source_set_timer((dispatch_source_t)qword_1000A4CD0, 0, 0xFFFFFFFFFFFFFFFFLL, 0);
      dispatch_resume((dispatch_object_t)qword_1000A4CD0);
    }
    if (byte_1000A4D08 == 1)
    {
      sub_10005DD64("success", 0, 0, 25, 1);
      byte_1000A4D09 = 1;
      byte_1000A4D08 = 0;
    }
    nullsub_4(1, v40);
    nullsub_4(16, 1);
    uint64_t v39 = 25;
    goto LABEL_106;
  }
  uint64_t v39 = 0;
LABEL_107:
  sub_100041CE4(v39);
  notify_post("com.apple.powermanagement.systempowerstate");
  dword_1000A3440 = v39;
  sub_1000420FC(v39);
  intptr_t v43 = *a4;
  if (v43) {
    IOAllowPowerChange(dword_1000A4CC4, v43);
  }
  CFTypeRef v44 = sub_10005CC54(@"AppStatistics");
  if (v44)
  {
    CFDictionaryRef v45 = v44;
    nullsub_4(v44, "KernelClientStats");
    sub_1000401AC(v45);
    CFRelease(v45);
  }
}

void sub_10003EEF8(id a1)
{
  sub_10003EF28(0);

  sub_10003EF28(1);
}

uint64_t sub_10003EF28(int a1)
{
  if (a1) {
    CFMutableDictionaryRef v1 = "com.apple.powermanagement.systemsleeppreventers";
  }
  else {
    CFMutableDictionaryRef v1 = "com.apple.powermanagement.idlesleeppreventers";
  }
  if (a1) {
    id v2 = &dword_1000A4D04;
  }
  else {
    id v2 = &dword_1000A4D00;
  }
  if (*v2 || (uint64_t result = notify_register_check(v1, v2), !result) && *v2)
  {
    uint64_t result = IOPMCopySleepPreventersList();
    if (!result)
    {
      CFArrayGetTypeID();
      notify_set_state(*v2, 0);
      return notify_post(v1);
    }
  }
  else
  {
    *id v2 = 0;
  }
  return result;
}

uint64_t sub_10003F010(uint64_t a1, _OWORD *a2, const char *a3, int a4, _DWORD *a5, int *a6)
{
  *a5 = 0;
  if (dword_1000A4D40 <= 0x3B9ACA00
    && (int v11 = malloc_type_calloc(1uLL, 0x38uLL, 0x10E0040CE5ED568uLL)) != 0)
  {
    int v12 = v11;
    int v13 = dword_1000A4D40++;
    v11[6] = v13 + 1000;
    CFArrayAppendValue((CFMutableArrayRef)qword_1000A4CB8, v11);
    long long v14 = a2[1];
    *(_OWORD *)atoken.val = *a2;
    *(_OWORD *)&atoken.val[4] = v14;
    audit_token_to_au32(&atoken, 0, 0, 0, 0, 0, v12 + 7, 0, 0);
    if (a3 && *a3) {
      *((void *)v12 + 2) = CFStringCreateWithCString(0, a3, 0x8000100u);
    }
    int v15 = 0;
    v12[8] = a4;
    *a5 = v12[6];
  }
  else
  {
    int v15 = -536870212;
  }
  *a6 = v15;
  return 0;
}

uint64_t sub_10003F13C(uint64_t a1, _OWORD *a2, int a3, mach_port_name_t a4, int a5, _DWORD *a6)
{
  pid_t pidp = -1;
  if (a4 && a6)
  {
    uint64_t v10 = 3758097136;
    *a6 = -536870212;
    long long v11 = a2[1];
    *(_OWORD *)atoken.val = *a2;
    *(_OWORD *)&atoken.val[4] = v11;
    audit_token_to_au32(&atoken, 0, 0, 0, 0, 0, &pidp, 0, 0);
    int v12 = sub_10003F418(a3);
    if (v12)
    {
      int v13 = v12;
      unsigned int v14 = v12[7];
      pid_t v15 = pidp;
      if (v14 == pidp)
      {
        *((unsigned char *)v12 + 36) = a5 == 0;
        if (a5 || *v12)
        {
          mach_port_deallocate(mach_task_self_, a4);
        }
        else
        {
          _DWORD *v12 = a4;
          uintptr_t v18 = pidp;
          uint64_t v19 = sub_10005C968();
          unsigned int v20 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_proc, v18, 0x80000000uLL, v19);
          if (v20)
          {
            unsigned int v21 = v20;
            handler[0] = _NSConcreteStackBlock;
            handler[1] = 3221225472;
            handler[2] = sub_10003F490;
            handler[3] = &unk_100091A80;
            int v24 = a3;
            dispatch_source_set_event_handler(v20, handler);
            v22[0] = _NSConcreteStackBlock;
            v22[1] = 3221225472;
            v22[2] = sub_10003F4C8;
            v22[3] = &unk_100091DC8;
            v22[4] = v21;
            dispatch_source_set_cancel_handler(v21, v22);
            dispatch_resume(v21);
            *((void *)v13 + 6) = v21;
          }
          else if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_ERROR))
          {
            sub_10006A310();
          }
        }
        uint64_t v10 = 0;
        *a6 = 0;
      }
      else
      {
        io_connect_t v16 = qword_1000A36D0;
        if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_ERROR))
        {
          atoken.val[0] = 67109632;
          atoken.val[1] = v15;
          LOWORD(atoken.val[2]) = 1024;
          *(unsigned int *)((char *)&atoken.val[2] + 2) = a3;
          HIWORD(atoken.val[3]) = 1024;
          atoken.val[4] = v14;
          _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Notification schedule request from unexepcted pid %d for connection %d. Expected pid:%d\n", (uint8_t *)&atoken, 0x14u);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_ERROR))
    {
      sub_10006A2A4();
    }
  }
  else
  {
    uint64_t v10 = 0;
    if (a6) {
      *a6 = -536870206;
    }
  }
  return v10;
}

const void *sub_10003F418(int a1)
{
  v8.length = CFArrayGetCount((CFArrayRef)qword_1000A4CB8);
  uint64_t v7 = 0;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v4 = 0u;
  DWORD2(v5) = a1;
  v8.CFIndex location = 0;
  FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue((CFArrayRef)qword_1000A4CB8, v8, &v4);
  if (FirstIndexOfValue == -1) {
    return 0;
  }
  else {
    return CFArrayGetValueAtIndex((CFArrayRef)qword_1000A4CB8, FirstIndexOfValue);
  }
}

void sub_10003F490(uint64_t a1)
{
  CFMutableDictionaryRef v1 = sub_10003F418(*(_DWORD *)(a1 + 32));
  if (v1)
  {
    sub_10003F520((uint64_t)v1);
  }
}

void sub_10003F4C8(uint64_t a1)
{
}

uint64_t sub_10003F4D0(uint64_t a1, int a2, int *a3)
{
  long long v4 = sub_10003F418(a2);
  if (v4)
  {
    sub_10003F520((uint64_t)v4);
    if (a3)
    {
      int v5 = 0;
LABEL_6:
      *a3 = v5;
    }
  }
  else if (a3)
  {
    int v5 = -536870160;
    goto LABEL_6;
  }
  return 0;
}

void sub_10003F520(uint64_t a1)
{
  CFIndex Count = CFArrayGetCount((CFArrayRef)qword_1000A4CB8);
  if (*(_DWORD *)a1)
  {
    mach_port_deallocate(mach_task_self_, *(_DWORD *)a1);
    *(_DWORD *)a1 = 0;
  }
  int v3 = *(NSObject **)(a1 + 48);
  if (v3) {
    dispatch_source_cancel(v3);
  }
  long long v4 = *(const void **)(a1 + 16);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 16) = 0;
  }
  int v5 = *(CFArrayRef **)(a1 + 8);
  if (v5 && *v5)
  {
    CFIndex v6 = CFArrayGetCount(*v5);
    if (v6 >= 1)
    {
      CFIndex v7 = v6;
      CFIndex v8 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*v5, v8);
        if (ValueAtIndex)
        {
          if (*(void *)ValueAtIndex == a1) {
            break;
          }
        }
        if (v7 == ++v8) {
          goto LABEL_16;
        }
      }
      *(void *)CFDictionaryRef ValueAtIndex = 0;
      ValueAtIndex[48] = 257;
    }
LABEL_16:
    sub_100040D34((uint64_t)v5);
  }
  v12.CFIndex location = 0;
  v12.length = Count;
  FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue((CFArrayRef)qword_1000A4CB8, v12, (const void *)a1);
  if (FirstIndexOfValue != -1) {
    CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_1000A4CB8, FirstIndexOfValue);
  }

  free((void *)a1);
}

uint64_t sub_10003F638()
{
  return 5;
}

uint64_t sub_10003F640(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  *a3 = dword_1000A3440;
  *a4 = 0;
  return 0;
}

uint64_t sub_10003F658(uint64_t a1, _OWORD *a2, int a3, int a4, _DWORD *a5, int *a6)
{
  uid_t ruidp = -1;
  pid_t pidp = -1;
  gid_t rgidp = -1;
  long long v10 = a2[1];
  *(_OWORD *)atoken.val = *a2;
  *(_OWORD *)&atoken.val[4] = v10;
  audit_token_to_au32(&atoken, 0, 0, 0, &ruidp, &rgidp, &pidp, 0, 0);
  *a5 = 0;
  if (!sub_10005D678(ruidp) && !sub_10005E308(ruidp))
  {
    int v11 = -536870207;
    goto LABEL_11;
  }
  *a5 = dword_1000A3410;
  if (a4 != 2)
  {
    if (a4 == 1)
    {
      a3 = dword_1000A3410 & ~a3;
    }
    else
    {
      if (a4)
      {
        int v11 = 0;
        goto LABEL_11;
      }
      a3 |= dword_1000A3410;
    }
  }
  int v11 = 0;
  dword_1000A3410 = a3;
LABEL_11:
  *a6 = v11;
  return 0;
}

uint64_t sub_10003F744(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  *a4 = 0;
  *a5 = 0;
  return 0;
}

uint64_t sub_10003F754(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *a4 = -536870201;
  return 0;
}

uint64_t sub_10003F768(int a1, int a2, char *buffer, int *a4)
{
  if (a2 == 1001 && qword_1000A3700 && CFStringGetCString((CFStringRef)qword_1000A3700, buffer, 1024, 0x8000100u))
  {
    int v6 = 0;
  }
  else
  {
    char *buffer = 0;
    int v6 = -536870160;
  }
  *a4 = v6;
  return 0;
}

uint64_t sub_10003F7D4(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *a4 = 0;
  return 0;
}

void sub_10003F7E0(int a1)
{
  if ((dword_1000A4CC8 & 8) != 0)
  {
    dword_1000A4CC8 &= ~8u;
    sub_100048D14(10, 0);
    sub_100048D14(18, 0);
    id v2 = sub_10005D9C4();
    asl_set(v2, "com.apple.iokit.domain", "com.apple.sleepservices.sessionTerminated");
    if (sub_10005CC9C(value, 100)) {
      asl_set(v2, "uuid", value);
    }
    if (qword_1000A3700 && CFStringGetCString((CFStringRef)qword_1000A3700, buffer, 100, 0x8000100u)) {
      asl_set(v2, "uuid2", buffer);
    }
    snprintf(__str, 0x1EuLL, "%d", a1);
    asl_set(v2, "value", __str);
    asl_set(v2, "Message", "SleepService: window has terminated.");
    if (a1) {
      int v3 = "com.apple.sleepserviced.ExitTimeOutAssertions";
    }
    else {
      int v3 = "com.apple.sleepserviced.ExitCleanAssertions";
    }
    asl_set(v2, "signature", v3);
    asl_send(0, v2);
    asl_release(v2);
  }
}

uint64_t sub_10003F960()
{
  return dword_1000A4CC8 & 1;
}

uint64_t sub_10003F970()
{
  return (dword_1000A4CC8 >> 1) & 1;
}

uint64_t sub_10003F980()
{
  return (dword_1000A4CC8 >> 2) & 1;
}

void sub_10003F990()
{
  dword_1000A4CC8 |= 8u;
}

void sub_10003F9A4()
{
  dword_1000A4CC8 |= 0x80u;
}

void sub_10003F9B8()
{
  dword_1000A4CC8 &= ~0x80u;
}

uint64_t sub_10003F9CC()
{
  return dword_1000A4CC8 >> 7;
}

uint64_t sub_10003F9DC()
{
  return (dword_1000A4CC8 >> 3) & 1;
}

uint64_t sub_10003F9EC()
{
  return (dword_1000A4CC8 >> 6) & 1;
}

uint64_t sub_10003F9FC()
{
  return byte_1000A36EA;
}

uint64_t sub_10003FA08(_DWORD *a1, _DWORD *a2)
{
  uint32_t outputCnt = 2;
  size_t v5 = 0;
  uint64_t result = IOConnectCallMethod(dword_1000A4CC4, 0xBu, 0, 0, 0, 0, &output, &outputCnt, 0, &v5);
  if (!result)
  {
    if (a1) {
      *a1 = output;
    }
    if (a2) {
      *a2 = v8;
    }
  }
  return result;
}

void sub_10003FAB8()
{
  if (qword_1000A4CD0) {
    dispatch_source_cancel((dispatch_source_t)qword_1000A4CD0);
  }
}

void sub_10003FACC(char a1, double a2)
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  if (sub_100054EA8(@"AutoPowerOff Enabled", &v16)) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v16 == 1;
  }
  if (!v4)
  {
    if ((dword_1000A3410 & 4) != 0) {
      asl_log(0, 0, 3, "Failed to get APO enabled key\n");
    }
LABEL_10:
    qword_1000A36D8 = 0;
    return;
  }
  if (sub_100054EA8(@"AutoPowerOff Delay", &v15))
  {
    if ((dword_1000A3410 & 4) != 0) {
      asl_log(0, 0, 3, "Failed to get APO delay timer \n");
    }
    goto LABEL_10;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  double v6 = (double)v15;
  if (Current >= a2) {
    double v7 = Current;
  }
  else {
    double v7 = a2;
  }
  double v8 = v7 + v6;
  qword_1000A36D8 = *(void *)&v8;
  if (v15 < 1)
  {
    if (a1)
    {
      sub_10003FC88();
      return;
    }
    BOOL v10 = Current < a2;
    double v11 = v8 - Current - v6;
    if (v10) {
      uint64_t v9 = (uint64_t)v11;
    }
    else {
      uint64_t v9 = v15;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t)(v8 - Current);
  }
  if (qword_1000A4CD0)
  {
    dispatch_suspend((dispatch_object_t)qword_1000A4CD0);
  }
  else
  {
    CFRange v12 = sub_10005C968();
    qword_1000A4CD0 = (uint64_t)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v12);
    dispatch_source_set_event_handler((dispatch_source_t)qword_1000A4CD0, &stru_100092550);
    dispatch_source_set_cancel_handler((dispatch_source_t)qword_1000A4CD0, &stru_100092570);
  }
  if ((dword_1000A3410 & 4) != 0) {
    asl_log(0, 0, 3, "Set auto power off timer to fire in %lld secs\n", v9);
  }
  int v13 = qword_1000A4CD0;
  dispatch_time_t v14 = dispatch_walltime(0, 1000000000 * v9);
  dispatch_source_set_timer(v13, v14, 0xFFFFFFFFFFFFFFFFLL, 0);
  dispatch_resume((dispatch_object_t)qword_1000A4CD0);
}

void sub_10003FC88()
{
  int v1 = 0;
  if ((dword_1000A4CC8 & 1) == 0)
  {
    sub_10003FA08(&v1, 0);
    sub_10002CE04();
    if (v1 == 6 && v0 == 0.0)
    {
      if ((dword_1000A3410 & 4) != 0) {
        asl_log(0, 0, 3, "Cancelling assertions for AutoPower Off\n");
      }
      if (qword_1000A4CD0) {
        dispatch_source_cancel((dispatch_source_t)qword_1000A4CD0);
      }
    }
    else
    {
      if ((dword_1000A3410 & 4) != 0) {
        asl_log(0, 0, 3, "Resetting APO timer. sleepType:%d nextAutoWake:%f\n", v1, v0);
      }
      sub_10003FACC(0, 0.0);
    }
  }
}

void sub_10003FD44(id a1)
{
  if (qword_1000A4CD0)
  {
    dispatch_release((dispatch_object_t)qword_1000A4CD0);
    qword_1000A4CD0 = 0;
  }
}

uint64_t sub_10003FD74()
{
  uint64_t result = sub_100036004();
  if (result != dword_1000A3444) {
    dword_1000A3444 = result;
  }
  return result;
}

void sub_10003FDA0()
{
  double v0 = sub_10005C968();

  dispatch_async(v0, &stru_100092590);
}

void sub_10003FDD0(id a1)
{
  int v1 = sub_100036004();
  if (v1 != dword_1000A3444) {
    dword_1000A3444 = v1;
  }
}

void sub_10003FDFC()
{
  if (byte_1000A36EA)
  {
    if (byte_1000A36E9) {
      BOOL v0 = qword_1000A4CD8 == 0;
    }
    else {
      BOOL v0 = 0;
    }
    if (v0)
    {
      CFTypeRef cf1 = 0;
      sub_10005D0A8(0, &cf1);
      if (!cf1 || !CFEqual(cf1, @"Notification"))
      {
        size_t v4 = 8;
        uint64_t v5 = 0;
        sysctlbyname("kern.useractive_abs_time", &v5, &v4, 0, 0);
        id v2 = qword_1000A36D0;
        if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_DEBUG)) {
          sub_10006A3B0(&v5, v2);
        }
        qword_1000A4CD8 = sub_100021584(v5, qword_1000A4CE0);
        sub_10005E0A4(qword_1000A4CD8);
      }
    }
    else
    {
      if (qword_1000A4CE8) {
        BOOL v1 = qword_1000A4CD8 == 0;
      }
      else {
        BOOL v1 = 0;
      }
      if (v1)
      {
        uint64_t v3 = sub_100021584(qword_1000A4CE8, qword_1000A4CE0);
        qword_1000A4CD8 = v3;
        sub_10005E0A4(v3);
      }
      else if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_DEBUG))
      {
        sub_10006A42C();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_DEBUG))
  {
    sub_10006A37C();
  }
}

void sub_10003FF7C(uint64_t a1)
{
  id v2 = qword_1000A36D0;
  if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 134217984;
    uint64_t v4 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Updating wake start timestamp to %llu\n", (uint8_t *)&v3, 0xCu);
  }
  qword_1000A4CE8 = a1;
}

void sub_100040024(uint64_t a1)
{
  id v2 = qword_1000A36D0;
  if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 134217984;
    uint64_t v4 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Updating wake end timestamp to %llu\n", (uint8_t *)&v3, 0xCu);
  }
  qword_1000A4CE0 = a1;
}

uint64_t sub_1000400CC()
{
  uint64_t result = IOPMGetLastWakeTime();
  if (!result)
  {
    CFAbsoluteTimeGetCurrent();
    return analytics_send_event_lazy();
  }
  return result;
}

xpc_object_t sub_100040164(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_uint64(v2, "WakeTime", *(void *)(a1 + 32));
  return v2;
}

uint64_t sub_1000401AC(const void *a1)
{
  uint64_t result = CFArrayGetTypeID();
  if (!a1) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t result = CFGetTypeID(a1);
  if (result != v3) {
    return result;
  }
  uint64_t result = CFArrayGetCount((CFArrayRef)a1);
  if (result < 1) {
    return result;
  }
  uint64_t v4 = result;
  CFIndex v5 = 0;
  CFIndex v6 = -1;
  int valuePtr = 0;
  signed int v7 = 0x80000000;
  do
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a1, v5);
    uint64_t result = CFDictionaryGetTypeID();
    if (ValueAtIndex)
    {
      uint64_t v9 = result;
      uint64_t result = CFGetTypeID(ValueAtIndex);
      if (result == v9)
      {
        CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"TransitionType");
        uint64_t result = CFStringGetTypeID();
        if (Value)
        {
          uint64_t v11 = result;
          uint64_t result = CFGetTypeID(Value);
          if (result == v11)
          {
            uint64_t result = CFEqual(Value, @"Sleep");
            if (result)
            {
              CFRange v12 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"ResponseType");
              uint64_t result = CFStringGetTypeID();
              if (v12)
              {
                uint64_t v13 = result;
                uint64_t result = CFGetTypeID(v12);
                if (result == v13)
                {
                  if (CFEqual(v12, @"ResponseSlow")
                    || (uint64_t result = CFEqual(v12, @"ResponseTimedOut"), result))
                  {
                    uint64_t result = CFEqual(v12, @"ResponseTimedOut");
                    if (result)
                    {
                      int v14 = 30000;
                      int valuePtr = 30000;
                    }
                    else
                    {
                      uint64_t v15 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"TimeMS");
                      uint64_t result = CFNumberGetTypeID();
                      if (!v15) {
                        goto LABEL_18;
                      }
                      uint64_t v16 = result;
                      uint64_t result = CFGetTypeID(v15);
                      if (result != v16) {
                        goto LABEL_18;
                      }
                      uint64_t result = CFNumberGetValue((CFNumberRef)v15, kCFNumberIntType, &valuePtr);
                      if (!result) {
                        goto LABEL_18;
                      }
                      int v14 = valuePtr;
                    }
                    if (v14 > v7)
                    {
                      CFIndex v6 = v5;
                      signed int v7 = v14;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_18:
    ++v5;
  }
  while (v4 != v5);
  if (v6 != -1)
  {
    CFDictionaryRef v17 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)a1, v6);
    CFStringRef v18 = (const __CFString *)CFDictionaryGetValue(v17, @"Name");
    CFTypeID TypeID = CFStringGetTypeID();
    if (v18)
    {
      if (CFGetTypeID(v18) == TypeID) {
        CFStringGetCString(v18, buffer, 128, 0x8000100u);
      }
    }
    return analytics_send_event_lazy();
  }
  return result;
}

xpc_object_t sub_10004047C(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_uint64(v2, "delay_time", *(int *)(a1 + 40));
  uint64_t v3 = *(const char **)(a1 + 32);
  if (v3 && *v3) {
    xpc_dictionary_set_string(v2, "last_responder", v3);
  }
  return v2;
}

uint64_t sub_1000404E4()
{
  return byte_1000A36EB;
}

BOOL sub_1000404F0(int a1, double a2)
{
  if (a2 == 0.0) {
    return 0;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  if (Current <= a2) {
    return 1;
  }
  double v6 = Current;
  signed int v7 = qword_1000A36D0;
  BOOL result = os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v8[0] = 67109376;
    v8[1] = a1;
    __int16 v9 = 2048;
    double v10 = a2 - v6;
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Process %d scheduled a wake in the past %f\n", (uint8_t *)v8, 0x12u);
    return 0;
  }
  return result;
}

uint64_t sub_1000405D8()
{
  if (!dword_1000A36EC) {
    return 0;
  }
  uint64_t v0 = 3758097097;
  if (!sub_10002CEA8()) {
    return 3758097095;
  }
  int valuePtr = 0;
  if (sub_10002CEA8() != 1)
  {
    uint64_t v0 = 0;
    unk_1000A3714 = 0;
    ++BYTE2(dword_1000A3710);
    dword_1000A36EC = 0;
    return v0;
  }
  CFNumberRef v1 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (v1)
  {
    CFNumberRef v2 = v1;
    if (!dword_1000A4CC0)
    {
      CFRelease(v1);
      return v0;
    }
    IORegistryEntrySetCFProperty(dword_1000A4CC0, @"SilentRunning", v1);
    dword_1000A36EC = 0;
    CFRelease(v2);
    return 0;
  }
  return v0;
}

uint64_t sub_1000406B0(unsigned int a1)
{
  unk_1000A3714 = (float)a1;
  ++BYTE2(dword_1000A3710);
  return 0;
}

BOOL sub_1000406D4()
{
  return dword_1000A36EC == 1;
}

BOOL sub_1000406E8()
{
  return dword_1000A36F0 == 1;
}

uint64_t sub_1000406FC()
{
  if (dword_1000A36EC == 1) {
    return 0;
  }
  if (!sub_10002CEA8()) {
    return 3758097095;
  }
  dword_1000A36EC = 1;
  if (sub_10002CEA8() == 1) {
    return 0;
  }
  uint64_t result = 0;
  unk_1000A3714 = 1065353216;
  ++BYTE2(dword_1000A3710);
  return result;
}

uint64_t sub_100040778(int a1)
{
  CFNumberRef v2 = qword_1000A36D0;
  if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = "Restricted";
    if (dword_1000A36F0) {
      uint64_t v4 = "Restricted";
    }
    else {
      uint64_t v4 = "Unrestricted";
    }
    if (!a1) {
      uint64_t v3 = "Unrestricted";
    }
    int v6 = 136315394;
    signed int v7 = v4;
    __int16 v8 = 2080;
    __int16 v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Current PerfMode: %s, Target PerfMode: %s\n", (uint8_t *)&v6, 0x16u);
  }
  if ((dword_1000A36F0 == 1) != a1) {
    dword_1000A36F0 = a1;
  }
  return 0;
}

uint64_t sub_100040870()
{
  if (sub_10004DC6C())
  {
    if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_DEBUG)) {
      sub_10006A460();
    }
  }
  else
  {
    char v0 = sub_10005A614();
    if (v0)
    {
      if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_DEBUG)) {
        sub_10006A4C8();
      }
    }
    else
    {
      if ((v0 & 2) == 0) {
        return 0;
      }
      if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_DEBUG)) {
        sub_10006A494();
      }
    }
  }
  return 1;
}

uint64_t sub_100040918()
{
  char v0 = sub_10005A614();
  unsigned int v1 = ((v0 & 1) == 0) & ~sub_10004DC6C();
  if ((v0 & 2) != 0) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = v1;
  }
  if (v2 == 1 && os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_DEBUG)) {
    sub_10006A4FC();
  }
  return v2;
}

void sub_100040984()
{
  char v0 = sub_10005C968();

  dispatch_async(v0, &stru_1000925F0);
}

void sub_1000409B4(id a1)
{
  int v1 = dword_1000A36F0;
  if (dword_1000A36F0 == 1)
  {
    if ((sub_100040870() & 1) == 0) {
      return;
    }
  }
  else if (!sub_100040918())
  {
    return;
  }

  sub_100040778(v1 != 1);
}

uint64_t sub_100040A14(uint64_t result)
{
  byte_1000A3414 = result;
  return result;
}

BOOL sub_100040A20()
{
  size_t v3 = 8;
  unint64_t v4 = 0;
  int v0 = sysctlbyname("kern.wake_abs_time", &v4, &v3, 0, 0);
  int v1 = qword_1000A36D0;
  if (v0)
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_10006A530();
      return 0;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint8_t buf = 134218240;
      unint64_t v6 = v4;
      __int16 v7 = 2048;
      uint64_t v8 = qword_1000A36E0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "wake_ts:0x%llx lastcall_ts:0x%llx\n", buf, 0x16u);
    }
    return v4 > qword_1000A36E0;
  }
  return result;
}

BOOL sub_100040B2C()
{
  if (byte_1000A3414) {
    BOOL v0 = 1;
  }
  else {
    BOOL v0 = sub_100040A20();
  }
  int v1 = qword_1000A36D0;
  if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = v0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Sleep revert state: %d\n", (uint8_t *)v3, 8u);
  }
  return v0;
}

uint64_t sub_100040BE8()
{
  return dword_1000A4CC4;
}

void sub_100040BF4(_xpc_connection_s *a1, xpc_object_t original)
{
  if (a1 && original)
  {
    xpc_object_t reply = xpc_dictionary_create_reply(original);
    if (reply)
    {
      CFIndex v5 = reply;
      if (qword_1000A3788)
      {
        xpc_dictionary_set_int64(reply, "returnCode", 0);
        unint64_t v6 = (void *)_CFXPCCreateXPCObjectFromCFObject();
        xpc_dictionary_set_value(v5, "wakeData", v6);
        if (v6) {
          xpc_release(v6);
        }
      }
      else
      {
        xpc_dictionary_set_int64(reply, "returnCode", -536870212);
      }
      xpc_connection_send_message(a1, v5);
      xpc_release(v5);
    }
    else if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_ERROR))
    {
      sub_10006A570();
    }
  }
  else
  {
    __int16 v7 = qword_1000A36D0;
    if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_ERROR)) {
      sub_10006A5B0((uint64_t)a1, (uint64_t)original, v7);
    }
  }
}

BOOL sub_100040D20(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
}

void sub_100040D34(uint64_t a1)
{
  if (sub_100040E9C(a1))
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      nullsub_4(v2, "PMClientStats");
      CFRelease(*(CFTypeRef *)(a1 + 8));
      *(void *)(a1 + 8) = 0;
    }
    size_t v3 = *(NSObject **)(a1 + 16);
    if (v3)
    {
      dispatch_source_cancel(v3);
      dispatch_release(*(dispatch_object_t *)(a1 + 16));
      *(void *)(a1 + 16) = 0;
    }
    intptr_t v4 = *(void *)(a1 + 32);
    if (v4) {
      IOAllowPowerChange(dword_1000A4CC4, v4);
    }
    if (qword_1000A4CB8)
    {
      CFIndex Count = CFArrayGetCount((CFArrayRef)qword_1000A4CB8);
      if (Count >= 1)
      {
        CFIndex v6 = Count;
        for (CFIndex i = 0; i != v6; ++i)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)qword_1000A4CB8, i);
          if (ValueAtIndex[1] == a1) {
            ValueAtIndex[1] = 0;
          }
        }
      }
      if (*(void *)a1)
      {
        CFIndex v9 = CFArrayGetCount(*(CFArrayRef *)a1);
        if (v9 >= 1)
        {
          CFIndex v10 = v9;
          for (CFIndex j = 0; j != v10; ++j)
          {
            CFRange v12 = CFArrayGetValueAtIndex(*(CFArrayRef *)a1, j);
            uint64_t v13 = (const void *)v12[8];
            if (v13) {
              CFRelease(v13);
            }
            int v14 = (const void *)v12[9];
            if (v14) {
              CFRelease(v14);
            }
            uint64_t v15 = (const void *)v12[10];
            if (v15) {
              CFRelease(v15);
            }
            free(v12);
          }
        }
        CFRelease(*(CFTypeRef *)a1);
      }
      if (qword_1000A4CF8 == a1) {
        qword_1000A4CF8 = 0;
      }
      free((void *)a1);
    }
  }
}

BOOL sub_100040E9C(uint64_t a1)
{
  double v80 = kCFAbsoluteTimeIntervalSince1904;
  pid_t valuePtr = getpid();
  if (a1) {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)a1);
  }
  else {
    CFIndex Count = 0;
  }
  if (!qword_1000A3790) {
    qword_1000A3790 = (uint64_t)CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  }
  if (Count < 1)
  {
    __int16 v7 = 0;
    LODWORD(v6) = 0;
    char v77 = 0;
    CFIndex v5 = 0;
    int v8 = 4;
    LODWORD(v9) = -1;
    if (!a1) {
      goto LABEL_70;
    }
  }
  else
  {
    CFDictionaryRef ValueAtIndex = (const __CFString **)CFArrayGetValueAtIndex(*(CFArrayRef *)a1, 0);
    if (!*((unsigned char *)ValueAtIndex + 96))
    {
      CFIndex v5 = 0;
      BOOL v33 = 0;
      goto LABEL_80;
    }
    intptr_t v4 = ValueAtIndex;
    CFIndex v5 = 0;
    char v77 = 0;
    uint64_t v6 = 0;
    __int16 v7 = 0;
    int v8 = 4;
    uint64_t v9 = 0xFFFFFFFFLL;
    double v10 = v80;
    CFIndex v11 = 1;
    double v12 = kCFAbsoluteTimeIntervalSince1904;
    CFIndex v78 = Count;
    while (1)
    {
      if ((*(unsigned char *)(a1 + 40) & 1) == 0 && *v4)
      {
        if (sub_1000404F0(HIDWORD((*v4)->length), *((double *)v4 + 5)))
        {
          CFIndex v5 = sub_100041928(v5, HIDWORD((*v4)->length), "Maintenance", v4[8], *((CFAbsoluteTime *)v4 + 5));
          double v13 = *((double *)v4 + 5);
          BOOL v14 = v13 < v12;
          if (v13 >= v12)
          {
            uint64_t v9 = v9;
          }
          else
          {
            double v10 = *((double *)v4 + 5);
            double v12 = v10;
            uint64_t v9 = v6;
          }
          if (v14) {
            int v8 = 1;
          }
          if (v14) {
            __int16 v7 = v4;
          }
          uint64_t v15 = (v6 + 1);
        }
        else
        {
          uint64_t v15 = v6;
        }
        uint64_t v16 = v9;
        if (sub_1000404F0(HIDWORD((*v4)->length), *((double *)v4 + 7)))
        {
          CFDictionaryRef v17 = v5;
          CFStringRef v18 = v4[10];
          CFTypeID TypeID = CFStringGetTypeID();
          if (v18 && CFGetTypeID(v18) == TypeID)
          {
            int length_high = HIDWORD((*v4)->length);
            CFAbsoluteTime v21 = *((double *)v4 + 7);
            CFStringRef v22 = v4[10];
          }
          else
          {
            int length_high = HIDWORD((*v4)->length);
            CFAbsoluteTime v21 = *((double *)v4 + 7);
            CFStringRef v22 = v4[8];
          }
          CFDataRef v23 = sub_100041928(v17, length_high, "SleepService", v22, v21);
          double v24 = *((double *)v4 + 7);
          BOOL v25 = v24 < v12;
          if (v24 >= v12)
          {
            uint64_t v16 = v16;
          }
          else
          {
            double v10 = *((double *)v4 + 7);
            uint64_t v16 = v15;
          }
          if (v24 < v12) {
            double v12 = *((double *)v4 + 7);
          }
          if (v25) {
            int v8 = 2;
          }
          if (v25) {
            __int16 v7 = v4;
          }
          uint64_t v15 = (v15 + 1);
          char v77 = 1;
          CFIndex Count = v78;
        }
        else
        {
          CFDataRef v23 = v5;
        }
        if (sub_1000404F0(HIDWORD((*v4)->length), *((double *)v4 + 6)))
        {
          CFStringRef v26 = v4[9];
          CFTypeID v27 = CFStringGetTypeID();
          if (v26 && CFGetTypeID(v26) == v27)
          {
            int v28 = HIDWORD((*v4)->length);
            CFAbsoluteTime v29 = *((double *)v4 + 6);
            CFStringRef v30 = v4[9];
          }
          else
          {
            int v28 = HIDWORD((*v4)->length);
            CFAbsoluteTime v29 = *((double *)v4 + 6);
            CFStringRef v30 = v4[8];
          }
          CFIndex v5 = sub_100041928(v23, v28, "TimerPlugin", v30, v29);
          double v31 = *((double *)v4 + 6);
          BOOL v32 = v31 < v12;
          if (v31 >= v12)
          {
            uint64_t v9 = v16;
          }
          else
          {
            double v10 = *((double *)v4 + 6);
            double v12 = v10;
            uint64_t v9 = v15;
          }
          if (v32) {
            int v8 = 3;
          }
          if (v32) {
            __int16 v7 = v4;
          }
          uint64_t v6 = (v15 + 1);
          CFIndex Count = v78;
        }
        else
        {
          CFIndex v5 = v23;
          uint64_t v9 = v16;
          uint64_t v6 = v15;
        }
      }
      if (Count == v11) {
        break;
      }
      intptr_t v4 = (const __CFString **)CFArrayGetValueAtIndex(*(CFArrayRef *)a1, v11++);
      if (!*((unsigned char *)v4 + 96))
      {
        double v80 = v10;
        BOOL v33 = v11 - 1 >= Count;
        goto LABEL_80;
      }
    }
    double v80 = v10;
  }
  if ((*(unsigned char *)(a1 + 40) & 1) == 0)
  {
    if (v7)
    {
      CFStringRef v34 = *v7;
      pid_t valuePtr = HIDWORD((*v7)->length);
      CFStringGetCString((CFStringRef)v34->data, buffer, 128, 0x8000100u);
      CFStringRef v35 = v7[8];
      if (v35 || (CFStringRef v35 = v7[9]) != 0 || (CFStringRef v35 = v7[10]) != 0) {
        CFStringGetCString(v35, cStr, 128, 0x8000100u);
      }
    }
LABEL_70:
    CFDictionaryRef v36 = v5;
    if (v80 < CFAbsoluteTimeGetCurrent() + 60.0) {
      double v80 = CFAbsoluteTimeGetCurrent() + 60.0;
    }
    CFDictionaryRef v37 = sub_10002CD3C();
    if (!v37)
    {
      LOBYTE(v41) = 0;
      CFStringRef v48 = 0;
      goto LABEL_99;
    }
    CFDictionaryRef v38 = v37;
    double v39 = sub_10002C9A8(v37);
    pid_t v40 = getpid();
    BOOL v41 = sub_1000404F0(v40, v39);
    if (!v41)
    {
      CFStringRef v48 = 0;
LABEL_98:
      CFRelease(v38);
LABEL_99:
      CFDictionaryRef v50 = sub_10002CA78();
      if (v50)
      {
        CFDictionaryRef v51 = v50;
        double v52 = sub_10002C9A8(v50);
        pid_t v53 = getpid();
        if (sub_1000404F0(v53, v52))
        {
          CFNumberRef Value = CFDictionaryGetValue(v51, @"scheduledby");
          id v55 = CFDictionaryGetValue(v51, @"appPID");
          CFTypeID v56 = CFStringGetTypeID();
          if (Value && CFGetTypeID(Value) == v56 && (CFTypeID v57 = CFNumberGetTypeID(), v55) && CFGetTypeID(v55) == v57)
          {
            CFMutableStringRef Mutable = CFStringCreateMutable(0, 1024);
            CFStringAppendFormat(Mutable, 0, @"%@,%@", Value, v55);
          }
          else
          {
            CFMutableStringRef Mutable = 0;
          }
          if (v52 <= v80)
          {
            double v80 = v52;
            pid_t v59 = getpid();
            CFDictionaryRef v36 = sub_100041928(v36, v59, "Shutdown/Restart", Mutable, v52);
            pid_t valuePtr = getpid();
            strcpy(buffer, "powerd");
            if (Mutable) {
              CFStringGetCString(Mutable, cStr, 128, 0x8000100u);
            }
            CFStringRef v48 = (const __CFString *)CFDictionaryGetValue(v51, @"eventtype");
            int v8 = 1;
          }
          else
          {
            LODWORD(v6) = v9;
          }
          CFIndex v5 = v36;
          if (Mutable) {
            CFRelease(Mutable);
          }
          LOBYTE(v41) = 1;
        }
        else
        {
          LODWORD(v6) = v9;
          CFIndex v5 = v36;
        }
        CFRelease(v51);
        LODWORD(v9) = v6;
      }
      else
      {
        CFIndex v5 = v36;
      }
      if (*(double *)&qword_1000A36D8 != 0.0)
      {
        if ((v41 | v77)) {
          CFBooleanRef v60 = kCFBooleanTrue;
        }
        else {
          CFBooleanRef v60 = kCFBooleanFalse;
        }
        sub_10005CC14(@"UserWakeAlarmScheduled", v60);
      }
      if (v5)
      {
        snprintf(__str, 5uLL, "%d", v9);
        asl_set(v5, "WakeRequestChosen", __str);
        asl_send(0, v5);
      }
      if (v80 == kCFAbsoluteTimeIntervalSince1904)
      {
        if (qword_1000A3790)
        {
          CFRelease((CFTypeRef)qword_1000A3790);
          qword_1000A3790 = 0;
        }
      }
      else
      {
        CFNumberRef v61 = CFNumberCreate(0, kCFNumberDoubleType, &v80);
        CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A3790, @"time", v61);
        CFNumberRef v62 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A3790, @"appPID", v62);
        CFStringRef v63 = CFStringCreateWithCString(0, buffer, 0x8000100u);
        if (v63)
        {
          CFStringRef v64 = v63;
          CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A3790, @"scheduledby", v63);
          CFRelease(v64);
        }
        if (v48) {
          CFStringRef v65 = v48;
        }
        else {
          CFStringRef v65 = @"wake";
        }
        CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A3790, @"eventtype", v65);
        CFStringRef v66 = CFStringCreateWithCString(0, cStr, 0x8000100u);
        if (v66)
        {
          CFStringRef v67 = v66;
          CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A3790, @"wakeInfo", v66);
          CFRelease(v67);
        }
        if (v61) {
          CFRelease(v61);
        }
        if (v62) {
          CFRelease(v62);
        }
      }
      if (qword_1000A3788)
      {
        CFRelease((CFTypeRef)qword_1000A3788);
        qword_1000A3788 = 0;
      }
      *(void *)__str = -1;
      int v81 = 0;
      if (v80 == 0.0) {
        double v68 = kCFAbsoluteTimeIntervalSince1904;
      }
      else {
        double v68 = v80;
      }
      if (*(double *)&qword_1000A36D8 != 0.0)
      {
        if (*(double *)&qword_1000A36D8 >= v68 + 0.0)
        {
          BOOL v69 = 0;
        }
        else
        {
          sub_10003FA08(&v81, 0);
          BOOL v69 = v81 == 6;
        }
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        unint64_t v71 = (unint64_t)(*(double *)&qword_1000A36D8 - Current);
        if (Current >= *(double *)&qword_1000A36D8) {
          unint64_t v71 = 0;
        }
        *(void *)__str = v71;
        CFNumberRef v72 = CFNumberCreate(0, kCFNumberLongType, __str);
        if (v72)
        {
          CFNumberRef v73 = v72;
          sub_10005CC14(@"AutoPowerOff Timer", v72);
          CFRelease(v73);
        }
        if (v69)
        {
          if ((dword_1000A3410 & 4) != 0) {
            asl_log(0, 0, 3, "Not scheduling other wakes to allow AutoPower off. APO timer:%lld\n", *(void *)__str);
          }
          goto LABEL_158;
        }
        if ((dword_1000A3410 & 4) != 0) {
          asl_log(0, 0, 3, "sleepType:%d APO timer:%lld secs\n", v81, *(void *)__str);
        }
      }
      if (v68 == kCFAbsoluteTimeIntervalSince1904) {
        goto LABEL_158;
      }
      if ((v8 & 0xFFFFFFFD) == 1)
      {
        CFStringRef v74 = @"MaintenanceImmediate";
      }
      else if (v8)
      {
        if (v8 != 2) {
          goto LABEL_158;
        }
        CFStringRef v74 = @"SleepServiceImmediate";
      }
      else
      {
        CFStringRef v74 = @"WakeImmediate";
      }
      if (v68 != 0.0)
      {
        CFDateRef v75 = CFDateCreate(0, v68);
        if (v75)
        {
          CFDateRef v76 = v75;
          IOPMSchedulePowerEvent(v75, 0, v74);
          CFRelease(v76);
        }
      }
LABEL_158:
      BOOL v33 = 1;
      if (!v5) {
        return v33;
      }
      goto LABEL_83;
    }
    CFStringRef v42 = (const __CFString *)CFDictionaryGetValue(v38, @"scheduledby");
    intptr_t v43 = CFDictionaryGetValue(v38, @"appPID");
    CFTypeID v44 = CFStringGetTypeID();
    if (v42 && CFGetTypeID(v42) == v44 && (CFTypeID v45 = CFNumberGetTypeID(), v43) && CFGetTypeID(v43) == v45)
    {
      CFMutableStringRef v46 = CFStringCreateMutable(0, 1024);
      CFStringAppendFormat(v46, 0, @"%@,%@", v42, v43);
    }
    else
    {
      CFMutableStringRef v46 = 0;
    }
    pid_t v49 = getpid();
    CFDictionaryRef v36 = sub_100041928(v5, v49, "UserWake", v46, v39);
    if (v39 > v80)
    {
      CFStringRef v48 = 0;
      if (!v46) {
        goto LABEL_97;
      }
      goto LABEL_96;
    }
    double v80 = v39;
    if (v43)
    {
      CFNumberGetValue((CFNumberRef)v43, kCFNumberIntType, &valuePtr);
      if (v42) {
        goto LABEL_93;
      }
    }
    else
    {
      pid_t valuePtr = getpid();
      if (v42)
      {
LABEL_93:
        CFStringGetCString(v42, buffer, 128, 0x8000100u);
        if (!v46) {
          goto LABEL_95;
        }
        goto LABEL_94;
      }
    }
    strcpy(buffer, "powerd");
    if (!v46)
    {
LABEL_95:
      CFStringRef v48 = (const __CFString *)CFDictionaryGetValue(v38, @"eventtype");
      int v8 = 0;
      LODWORD(v9) = v6;
      if (!v46)
      {
LABEL_97:
        LODWORD(v6) = v6 + 1;
        goto LABEL_98;
      }
LABEL_96:
      CFRelease(v46);
      goto LABEL_97;
    }
LABEL_94:
    CFStringGetCString(v46, cStr, 128, 0x8000100u);
    goto LABEL_95;
  }
  BOOL v33 = 1;
LABEL_80:
  if (qword_1000A3790)
  {
    CFRelease((CFTypeRef)qword_1000A3790);
    qword_1000A3790 = 0;
  }
  if (v5) {
LABEL_83:
  }
    asl_release(v5);
  return v33;
}

__asl_object_s *sub_100041928(__asl_object_s *a1, int pid, const char *a3, const __CFString *a4, CFAbsoluteTime a5)
{
  uint64_t v9 = a1;
  if (!a1)
  {
    uint64_t v9 = sub_10005D9C4();
    asl_set(v9, "com.apple.iokit.domain", "ClientWakeRequests");
    dword_1000A4CF0 = 0;
  }
  int v17 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  int v14 = 0;
  buffer[0] = 0;
  __str[0] = 0;
  proc_name(pid, buffer, 0x200u);
  snprintf(__str, 0x32uLL, "%s%d", "WakeAppName", dword_1000A4CF0);
  asl_set(v9, __str, buffer);
  snprintf(__str, 0x32uLL, "%s%d", "WakeType", dword_1000A4CF0);
  asl_set(v9, __str, a3);
  snprintf(__str, 0x32uLL, "%s%d", "WakeTimeDelta", dword_1000A4CF0);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  snprintf(buffer, 0x200uLL, "%.0f", a5 - Current);
  asl_set(v9, __str, buffer);
  CFIndex v11 = sub_100021390();
  CFCalendarDecomposeAbsoluteTime(v11, a5, "yMdHms", &v17, (char *)&v16 + 4, &v16, (char *)&v15 + 4, &v15, &v14);
  snprintf(__str, 0x32uLL, "%s%d", "WakeTime", dword_1000A4CF0);
  snprintf(buffer, 0x200uLL, "%d-%02d-%02d %02d:%02d:%02d", v17, HIDWORD(v16), v16, HIDWORD(v15), v15, v14);
  asl_set(v9, __str, buffer);
  CFTypeID TypeID = CFStringGetTypeID();
  if (a4 && CFGetTypeID(a4) == TypeID && CFStringGetCString(a4, buffer, 512, 0x8000100u))
  {
    snprintf(__str, 0x32uLL, "%s%d", "WakeClientInfo", dword_1000A4CF0);
    asl_set(v9, __str, buffer);
  }
  ++dword_1000A4CF0;
  return v9;
}

void sub_100041BB8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v1 == -536656848)
  {
    BOOL v4 = 0;
    BOOL v3 = dword_1000A4D10 != v2;
    dword_1000A4D10 = *(void *)(a1 + 32);
    CFIndex v5 = &dword_1000A4D04;
    uint64_t v6 = "com.apple.powermanagement.systemsleeppreventers";
  }
  else
  {
    if (v1 != -536656864) {
      return;
    }
    BOOL v3 = 0;
    BOOL v4 = dword_1000A4D0C != v2;
    dword_1000A4D0C = *(void *)(a1 + 32);
    CFIndex v5 = &dword_1000A4D00;
    uint64_t v6 = "com.apple.powermanagement.idlesleeppreventers";
  }
  int v7 = *v5;
  if (!*v5)
  {
    if (notify_register_check(v6, v5))
    {
      int *v5 = 0;
      goto LABEL_10;
    }
    int v7 = *v5;
    if (!*v5) {
      goto LABEL_10;
    }
  }
  notify_set_state(v7, v2);
  notify_post(v6);
LABEL_10:
  if (v4)
  {
    nullsub_4(0, v8);
    sub_10004F234(0);
  }
  if (v3)
  {
    nullsub_4(1, v8);
    sub_10004F234(1);
  }
}

void sub_100041CE4(int a1)
{
  int valuePtr = a1;
  if (sub_10005C958())
  {
    CFStringRef v1 = SCDynamicStoreKeyCreate(0, @"%@%@", kSCDynamicStoreDomainState, @"/IOKit/SystemPowerCapabilities");
    if (v1)
    {
      CFStringRef v2 = v1;
      CFNumberRef v3 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      if (v3)
      {
        CFNumberRef v4 = v3;
        sub_10005C834(v2, v3);
        CFRelease(v4);
      }
      CFRelease(v2);
    }
  }
}

uint64_t sub_100041D78(uint64_t a1)
{
  if (qword_1000A4CF8) {
    sub_100042230(qword_1000A4CF8, 0);
  }
  if (((word_1000A4D14 + 1) & 0xFFFE) != 0) {
    int v2 = (unsigned __int16)(word_1000A4D14 + 1);
  }
  else {
    int v2 = 1;
  }
  word_1000A4D14 = v2;
  CFNumberRef v3 = qword_1000A36D0;
  if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint8_t buf = 67109376;
    int v26 = 0;
    __int16 v27 = 1024;
    int v28 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "connectionFireNotification: 0x%x gen 0x%x\n", buf, 0xEu);
  }
  int v4 = dword_1000A3440;
  dword_1000A3440 = 0;
  if (!v4) {
    return 0;
  }
  CFMutableStringRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, (const CFArrayCallBacks *)&unk_1000A3418);
  CFIndex Count = CFArrayGetCount((CFArrayRef)qword_1000A4CB8);
  if (Count >= 1)
  {
    CFIndex v7 = Count;
    for (CFIndex i = 0; i != v7; ++i)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)qword_1000A4CB8, i);
      if ((ValueAtIndex[8] & v4) != 0) {
        CFArrayAppendValue(Mutable, ValueAtIndex);
      }
    }
  }
  if (!Mutable) {
    return 0;
  }
  int v10 = CFArrayGetCount(Mutable);
  if (!v10 || (CFIndex v11 = malloc_type_calloc(1uLL, 0x38uLL, 0x10A0040A50A18F7uLL)) == 0)
  {
    CFRelease(Mutable);
    return 0;
  }
  uint64_t v12 = (uint64_t)v11;
  v11[10] = 0;
  v11[12] = 28;
  *((void *)v11 + 4) = a1;
  *((_WORD *)v11 + 26) = word_1000A4D14;
  *(void *)CFIndex v11 = CFArrayCreateMutable(kCFAllocatorDefault, v10, &stru_1000A4D18);
  *(_DWORD *)(v12 + 44) = v10;
  *(void *)(v12 + 8) = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (v10 >= 1)
  {
    CFIndex v13 = 0;
    uint64_t v14 = v10;
    do
    {
      uint64_t v15 = (mach_port_t *)CFArrayGetValueAtIndex(Mutable, v13);
      mach_port_t v16 = *v15;
      if (*v15 && *((unsigned char *)v15 + 36))
      {
        int v17 = (unsigned __int16)(v13 + 1) | (*(unsigned __int16 *)(v12 + 52) << 16);
        *((void *)v15 + 1) = v12;
        sub_1000424EC(v16, 0, v17);
        CFStringRef v18 = malloc_type_calloc(1uLL, 0x68uLL, 0x10600408B1B9D36uLL);
        if (!v18) {
          goto LABEL_26;
        }
        uint64_t v19 = v18;
        *((_DWORD *)v18 + 4) = v17;
        *((_DWORD *)v18 + 23) = 0;
        *CFStringRef v18 = v15;
        v18[1] = v12;
        *((CFAbsoluteTime *)v18 + 4) = CFAbsoluteTimeGetCurrent();
        CFArrayAppendValue(*(CFMutableArrayRef *)v12, v19);
        if ((dword_1000A3410 & 4) != 0) {
          nullsub_4(*(void *)(*(void *)v19 + 16), 0);
        }
      }
      ++v13;
    }
    while (v14 != v13);
  }
  unsigned int v20 = sub_10005C968();
  CFAbsoluteTime v21 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v20);
  dispatch_time_t v22 = dispatch_time(0, 1000000000 * *(int *)(v12 + 48));
  dispatch_source_set_timer(v21, v22, 0xFFFFFFFFFFFFFFFFLL, 0);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_10004255C;
  handler[3] = &unk_100091490;
  void handler[4] = v12;
  dispatch_source_set_event_handler(v21, handler);
  *(void *)(v12 + 16) = v21;
  dispatch_activate(v21);
LABEL_26:
  CFRelease(Mutable);
  qword_1000A4CF8 = v12;
  return v12;
}

void sub_1000420FC(uint64_t a1)
{
  int v2 = qword_1000A36D0;
  if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_DEFAULT))
  {
    v9[0] = 67109120;
    v9[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "sendNoRespNotification: 0x%x\n", (uint8_t *)v9, 8u);
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)qword_1000A4CB8);
  if (Count >= 1)
  {
    CFIndex v4 = Count;
    for (CFIndex i = 0; i != v4; ++i)
    {
      CFDictionaryRef ValueAtIndex = (mach_port_t *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000A4CB8, i);
      if ((ValueAtIndex[8] & a1) != 0)
      {
        CFIndex v7 = ValueAtIndex;
        mach_port_t v8 = *ValueAtIndex;
        if (v8)
        {
          if (*((unsigned char *)v7 + 36))
          {
            sub_1000424EC(v8, a1, 0);
            if ((dword_1000A3410 & 4) != 0) {
              nullsub_4(*((void *)v7 + 2), a1);
            }
          }
        }
      }
    }
  }
}

void sub_100042224(id a1)
{
}

void sub_100042230(uint64_t a1, int a2)
{
  if (a1)
  {
    CFIndex v4 = qword_1000A36D0;
    if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(unsigned __int16 *)(a1 + 52);
      v22[0] = 67109376;
      v22[1] = v5;
      __int16 v23 = 1024;
      int v24 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "cleanClientResponses: gen 0x%x timeout %d\n", (uint8_t *)v22, 0xEu);
    }
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 16));
    dispatch_release(*(dispatch_object_t *)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)a1);
    if (Count >= 1)
    {
      CFIndex v7 = Count;
      for (CFIndex i = 0; i != v7; ++i)
      {
        CFDictionaryRef ValueAtIndex = (double *)CFArrayGetValueAtIndex(*(CFArrayRef *)a1, i);
        if (ValueAtIndex)
        {
          int v10 = ValueAtIndex;
          if (!*((unsigned char *)ValueAtIndex + 96))
          {
            *((unsigned char *)ValueAtIndex + 96) = 1;
            *((unsigned char *)ValueAtIndex + 97) = a2;
            double Current = CFAbsoluteTimeGetCurrent();
            v10[3] = Current;
            uint64_t v12 = *((void *)v10 + 1);
            if (*(void *)(v12 + 8))
            {
              unsigned int v13 = ((Current - v10[4]) * 1000.0);
              v22[0] = v13;
              CFStringRef v14 = @"ResponseTimedOut";
              if (*((unsigned char *)v10 + 97)
                || (CFStringRef v14 = @"ResponseSlow", v13 > 0xFA)
                || (CFStringRef v14 = @"ResponsePrompt", (dword_1000A3410 & 4) != 0))
              {
                CFMutableStringRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                if (Mutable)
                {
                  mach_port_t v16 = Mutable;
                  CFDictionarySetValue(Mutable, @"ResponseType", v14);
                  CFDictionarySetValue(v16, @"Name", *(const void **)(*(void *)v10 + 16));
                  CFNumberRef v17 = CFNumberCreate(0, kCFNumberIntType, (char *)v10 + 92);
                  if (v17)
                  {
                    CFNumberRef v18 = v17;
                    CFDictionarySetValue(v16, @"PowerCaps", v17);
                    CFRelease(v18);
                  }
                  CFNumberRef v19 = CFNumberCreate(0, kCFNumberIntType, v22);
                  if (v19)
                  {
                    CFNumberRef v20 = v19;
                    CFDictionarySetValue(v16, @"TimeMS", v19);
                    CFRelease(v20);
                  }
                  CFStringRef v21 = @"Sleep";
                  if ((dword_1000A4CC8 & 1) != 0
                    || (CFStringRef v21 = @"DarkWake", (dword_1000A4CC8 & 2) != 0)
                    || (CFStringRef v21 = @"Wake", (dword_1000A4CC8 & 0x40) != 0))
                  {
                    CFDictionarySetValue(v16, @"TransitionType", v21);
                  }
                  CFArrayAppendValue(*(CFMutableArrayRef *)(v12 + 8), v16);
                  CFRelease(v16);
                }
              }
            }
          }
        }
      }
    }
    sub_100040D34(a1);
  }
}

void sub_1000424EC(mach_port_t a1, int a2, int a3)
{
  *(void *)&msg.msgh_bits = 0x2400000013;
  *(void *)&msg.msgh_voucher_port = 0;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = 0;
  int v4 = 0;
  int v5 = a2;
  int v6 = a3;
  if (mach_msg(&msg, 17, 0x24u, 0, 0, 0, 0) == 268435460) {
    mach_msg_destroy(&msg);
  }
}

void sub_10004255C(uint64_t a1)
{
}

uint64_t sub_100042580()
{
  return analytics_send_event_lazy();
}

xpc_object_t sub_1000425F4(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_BOOL(v2, "DisplayOn", *(unsigned char *)(a1 + 32));
  xpc_dictionary_set_uint64(v2, "NumAssertions", qword_1000A3798);
  qword_1000A3798 = 0;
  return v2;
}

uint64_t sub_100042658(unsigned int a1)
{
  return sub_10004AB94((uint64_t)&unk_1000A3870 + 160 * a1, 3u, (uint64_t)&stru_100092670);
}

void sub_100042678(id a1, assertion *a2)
{
}

void sub_100042680(int a1, uint64_t a2)
{
  char v4 = dword_1000A3410;
  if ((dword_1000A3410 & 0x41) != 0)
  {
    __str[0] = 0;
    v44[0] = 0;
    v48[0] = 0;
    v42[0] = 0;
    v46[0] = 0;
    buffer[0] = 0;
    int v5 = *(_DWORD *)(a2 + 24);
    if ((v5 & 0x20) == 0)
    {
      if ((dword_1000A3410 & 2) != 0)
      {
LABEL_13:
        mach_port_t v8 = "Created";
        switch(a1)
        {
          case 0:
            goto LABEL_29;
          case 2:
            mach_port_t v8 = "Released";
            goto LABEL_29;
          case 3:
            mach_port_t v8 = "ClientDied";
            goto LABEL_29;
          case 4:
            mach_port_t v8 = "TimedOut";
            goto LABEL_29;
          case 5:
            goto LABEL_15;
          case 6:
            goto LABEL_16;
          case 7:
            mach_port_t v8 = "TurnedOff";
            goto LABEL_29;
          case 8:
            mach_port_t v8 = "TurnedOn";
            goto LABEL_29;
          case 9:
            char v4 = dword_1000A3410;
            goto LABEL_25;
          case 10:
            goto LABEL_17;
          case 11:
            goto LABEL_18;
          case 12:
            goto LABEL_19;
          case 13:
            mach_port_t v8 = "SessionStarted";
            goto LABEL_29;
          case 14:
            mach_port_t v8 = "SessionEnded";
            goto LABEL_29;
          default:
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 0:
          case 8:
          case 13:
            if ((*((unsigned char *)&unk_1000A3870 + 160 * *(unsigned int *)(a2 + 48)) & 0x20) != 0)
            {
              *(_DWORD *)(a2 + 24) = v5 | 0x40;
              goto LABEL_13;
            }
            break;
          case 2:
          case 3:
          case 4:
          case 7:
          case 14:
            int v6 = sub_10005F7DC();
            if ((*(unsigned char *)(a2 + 24) & 0x40) != 0) {
              goto LABEL_13;
            }
            unint64_t v7 = v6 ? 5 : 10;
            if (sub_10005E2A8() - *(void *)(a2 + 32) >= v7) {
              goto LABEL_13;
            }
            break;
          case 5:
LABEL_15:
            mach_port_t v8 = "CapExpired";
            goto LABEL_29;
          case 6:
LABEL_16:
            mach_port_t v8 = "Summary";
            goto LABEL_29;
          case 9:
LABEL_25:
            if ((v4 & 0x80) == 0) {
              break;
            }
            mach_port_t v8 = "NameChange";
LABEL_29:
            CFDictionaryRef v9 = *(const __CFDictionary **)(a2 + 16);
            if (v9)
            {
              CFStringRef Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 16), @"AssertType");
              CFStringRef v11 = Value;
              if (Value) {
                CFStringGetCString(Value, buffer, 200, 0x8000100u);
              }
              CFStringRef v12 = (const __CFString *)CFDictionaryGetValue(v9, @"AssertName");
              CFStringRef v13 = v12;
              if (v12) {
                CFStringGetCString(v12, v46, 200, 0x8000100u);
              }
              CFDateRef v14 = (const __CFDate *)CFDictionaryGetValue(v9, @"AssertStartWhen");
              if (v14)
              {
                double AbsoluteTime = CFDateGetAbsoluteTime(v14);
                CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
                snprintf(__str, 0xAuLL, "%02d:%02d:%02d ", (int)(Current - AbsoluteTime) / 3600, (int)(Current - AbsoluteTime) / 60 % 60, (int)(Current - AbsoluteTime) % 60);
              }
              CFStringRef v17 = (const __CFString *)CFDictionaryGetValue(v9, @"Process Name");
              CFDictionaryRef v9 = (const __CFDictionary *)v17;
              if (v17) {
                CFStringGetCString(v17, v48, 64, 0x8000100u);
              }
            }
            else
            {
              CFStringRef v13 = 0;
              CFStringRef v11 = 0;
            }
            char v18 = sub_10004CE28();
            sub_100042EBC(v43, 0xC8uLL, v18);
            snprintf(v44, 0xC8uLL, "%s", v43);
            snprintf(v42, 0xC8uLL, "0x%llx", *(unsigned int *)(a2 + 52) | ((unint64_t)*(unsigned int *)(a2 + 48) << 32));
            v41[0] = 0;
            __int16 v19 = *(_WORD *)(a2 + 104);
            if ((v19 & 0x3FE) == 0) {
              goto LABEL_51;
            }
            strcpy(v41, "[Qualifiers:");
            if ((v19 & 2) != 0)
            {
              __strlcat_chk();
              __int16 v19 = *(_WORD *)(a2 + 104);
              if ((v19 & 4) == 0)
              {
LABEL_42:
                if ((v19 & 8) == 0) {
                  goto LABEL_43;
                }
                goto LABEL_59;
              }
            }
            else if ((v19 & 4) == 0)
            {
              goto LABEL_42;
            }
            __strlcat_chk();
            __int16 v19 = *(_WORD *)(a2 + 104);
            if ((v19 & 8) == 0)
            {
LABEL_43:
              if ((v19 & 0x10) == 0) {
                goto LABEL_44;
              }
              goto LABEL_60;
            }
LABEL_59:
            __strlcat_chk();
            __int16 v19 = *(_WORD *)(a2 + 104);
            if ((v19 & 0x10) == 0)
            {
LABEL_44:
              if ((v19 & 0x20) == 0) {
                goto LABEL_45;
              }
              goto LABEL_61;
            }
LABEL_60:
            __strlcat_chk();
            __int16 v19 = *(_WORD *)(a2 + 104);
            if ((v19 & 0x20) == 0)
            {
LABEL_45:
              if ((v19 & 0x80) == 0) {
                goto LABEL_46;
              }
              goto LABEL_62;
            }
LABEL_61:
            __strlcat_chk();
            __int16 v19 = *(_WORD *)(a2 + 104);
            if ((v19 & 0x80) == 0)
            {
LABEL_46:
              if ((v19 & 0x100) == 0) {
                goto LABEL_47;
              }
              goto LABEL_63;
            }
LABEL_62:
            __strlcat_chk();
            __int16 v19 = *(_WORD *)(a2 + 104);
            if ((v19 & 0x100) == 0)
            {
LABEL_47:
              if ((v19 & 0x40) == 0) {
                goto LABEL_48;
              }
              goto LABEL_64;
            }
LABEL_63:
            __strlcat_chk();
            __int16 v19 = *(_WORD *)(a2 + 104);
            if ((v19 & 0x40) == 0)
            {
LABEL_48:
              if ((v19 & 0x200) == 0) {
                goto LABEL_50;
              }
              goto LABEL_49;
            }
LABEL_64:
            __strlcat_chk();
            if ((*(_WORD *)(a2 + 104) & 0x200) != 0) {
LABEL_49:
            }
              __strlcat_chk();
LABEL_50:
            __strlcat_chk();
LABEL_51:
            if ((dword_1000A3410 & 0x40) != 0)
            {
              CFNumberRef v20 = qword_1000A37D8;
              if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
              {
                int v21 = *(_DWORD *)(*(void *)(a2 + 72) + 96);
                unint64_t v22 = *(unsigned int *)(a2 + 52) | ((unint64_t)*(unsigned int *)(a2 + 48) << 32);
                *(_DWORD *)uint8_t buf = 138545410;
                CFDictionaryRef v24 = v9;
                __int16 v25 = 1024;
                int v26 = v21;
                __int16 v27 = 2082;
                int v28 = v8;
                __int16 v29 = 2114;
                CFStringRef v30 = v11;
                __int16 v31 = 2114;
                CFStringRef v32 = v13;
                __int16 v33 = 2082;
                CFStringRef v34 = __str;
                __int16 v35 = 2048;
                unint64_t v36 = v22;
                __int16 v37 = 2082;
                CFDictionaryRef v38 = v43;
                __int16 v39 = 2082;
                pid_t v40 = v41;
                _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Process %{public}@.%d %{public}s %{public}@ \"%{public}@\" age:%{public}s id:%lld %{public}s %{public}s", buf, 0x58u);
              }
            }
            if (sub_10002CEA8()) {
              syslog(118, "Assertion %s. Type:%s Name:'%s' Id:%s Process:%s %s\n", v8, buffer, v46, v42, v48, v44);
            }
            break;
          case 10:
LABEL_17:
            mach_port_t v8 = "Suspended";
            goto LABEL_29;
          case 11:
LABEL_18:
            mach_port_t v8 = "Resumed";
            goto LABEL_29;
          case 12:
LABEL_19:
            mach_port_t v8 = "SystemTimeOutExpired";
            goto LABEL_29;
          default:
            break;
        }
      }
    }
  }
  sub_100043240(a1, (void *)a2);
}

void sub_100042D28()
{
  int v6 = 0;
  int v7 = 1;
  BOOL v0 = sub_100035E20(&v7, (uint64_t)&v6);
  int v1 = sub_100036004();
  int v7 = v1;
  if (dword_1000A3448 == v1)
  {
    int v2 = dword_1000A4D48;
    if (v2 == sub_10004CE28()) {
      return;
    }
    int v1 = v7;
  }
  dword_1000A3448 = v1;
  dword_1000A4D48 = sub_10004CE28();
  char v3 = sub_10004CE28();
  sub_100042EBC(v11, 0x64uLL, v3);
  if (v0) {
    snprintf(__str, 0x40uLL, "(Charge: %d)", v6);
  }
  else {
    __str[0] = 0;
  }
  if (v7) {
    char v4 = "AC";
  }
  else {
    char v4 = "Batt";
  }
  snprintf(v12, 0x64uLL, "Summary- %s Using %s%s", v11, v4, __str);
  if ((dword_1000A3410 & 0x40) != 0)
  {
    int v5 = qword_1000A37D8;
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint8_t buf = 136446210;
      CFDictionaryRef v9 = v11;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Summary- %{public}s\n", buf, 0xCu);
    }
  }
}

size_t sub_100042EBC(char *a1, size_t a2, char a3)
{
  snprintf(a1, a2, "[System:");
  if (sub_10004CDE8(1)) {
    size_t v6 = strlcat(a1, " PrevIdle", a2);
  }
  else {
    size_t v6 = 0;
  }
  if (sub_10004CDE8(5)) {
    v6 += strlcat(a1, " PrevDisp", a2);
  }
  if (sub_10004CDE8(7)) {
    v6 += strlcat(a1, " PrevSleep", a2);
  }
  if (sub_10004CDE8(9)) {
    v6 += strlcat(a1, " DeclUser", a2);
  }
  if (sub_10004CDE8(10)) {
    v6 += strlcat(a1, " PushSrvc", a2);
  }
  if (sub_10004CDE8(11)) {
    v6 += strlcat(a1, " BGTask", a2);
  }
  if (sub_10004CDE8(12)) {
    v6 += strlcat(a1, " SysAct", a2);
  }
  if (sub_10004CDE8(13)) {
    v6 += strlcat(a1, " SRPrevSleep", a2);
  }
  if (sub_10004CDE8(14)) {
    v6 += strlcat(a1, " DispWake", a2);
  }
  if (sub_10004CDE8(16)) {
    v6 += strlcat(a1, " IntPrevDisp", a2);
  }
  if (sub_10004CDE8(17)) {
    v6 += strlcat(a1, " NetAcc", a2);
  }
  if (sub_10004CDE8(18)) {
    v6 += strlcat(a1, " IPushSrvc", a2);
  }
  if ((a3 & 1) == 0)
  {
    if ((a3 & 0x40) == 0) {
      goto LABEL_28;
    }
LABEL_33:
    if (strlcat(a1, " kDisp", a2) + v6) {
      goto LABEL_29;
    }
    goto LABEL_34;
  }
  v6 += strlcat(a1, " kCPU", a2);
  if ((a3 & 0x40) != 0) {
    goto LABEL_33;
  }
LABEL_28:
  if (v6) {
    goto LABEL_29;
  }
LABEL_34:
  strlcat(a1, " No Assertions", a2);
LABEL_29:

  return strlcat(a1, "]", a2);
}

void sub_10004312C()
{
  if (!qword_1000A4D50)
  {
    BOOL v0 = sub_10005C968();
    qword_1000A4D50 = (uint64_t)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v0);
    dispatch_source_set_event_handler((dispatch_source_t)qword_1000A4D50, &stru_100092690);
    int v1 = qword_1000A4D50;
    dispatch_time_t v2 = dispatch_time(0, 900000000000);
    dispatch_source_set_timer(v1, v2, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_resume((dispatch_object_t)qword_1000A4D50);
  }
  uint64_t segname = stru_100000020.segname;
  do
  {
    if (segname != 1000) {
      sub_10004AB94((uint64_t)&unk_1000A3870 + 160 * *(unsigned int *)((char *)&unk_1000A3870 + segname), 3u, (uint64_t)&stru_100092670);
    }
    segname += 160;
  }
  while (segname != 3240);
  char v4 = qword_1000A4D50;
  dispatch_time_t v5 = dispatch_time(0, 900000000000);

  dispatch_source_set_timer(v4, v5, 0xFFFFFFFFFFFFFFFFLL, 0);
}

void sub_100043240(int a1, void *a2)
{
  CFDictionaryRef v3 = (const __CFDictionary *)a2[2];
  int v4 = 1;
  CFStringRef v5 = @"Retain";
  switch(a1)
  {
    case 0:
      ++qword_1000A3798;
      CFStringRef v5 = @"Created";
      goto LABEL_15;
    case 1:
      goto LABEL_15;
    case 2:
      int v4 = 0;
      CFStringRef v5 = @"Released";
      goto LABEL_15;
    case 3:
      int v4 = 0;
      CFStringRef v5 = @"ClientDied";
      goto LABEL_15;
    case 4:
      int v4 = 0;
      CFStringRef v5 = @"TimedOut";
      goto LABEL_15;
    case 7:
      int v4 = 0;
      CFStringRef v5 = @"TurnedOff";
      goto LABEL_15;
    case 8:
      CFStringRef v5 = @"TurnedOn";
      goto LABEL_15;
    case 9:
      if ((dword_1000A3410 & 0x80) == 0) {
        return;
      }
      int v4 = 0;
      CFStringRef v5 = @"NameChange";
LABEL_15:
      if (qword_1000A37B8) {
        goto LABEL_16;
      }
      qword_1000A37B8 = (uint64_t)CFArrayCreateMutable(0, 512, &kCFTypeArrayCallBacks);
      if (!qword_1000A37B8) {
        return;
      }
      dword_1000A37C0 = -1;
      notify_post("com.apple.powermanagement.assertions.logHighWM");
      int v10 = qword_1000A37D8;
      if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint8_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Assertion bufffer initialized. Sending high water mark notification", buf, 2u);
      }
LABEL_16:
      CFIndex Count = CFArrayGetCount((CFArrayRef)qword_1000A37B8);
      CFIndex v7 = dword_1000A37B0 & 0x1FF;
      if (Count <= v7)
      {
        CFMutableStringRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 16, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        if (!Mutable) {
          return;
        }
      }
      else
      {
        CFMutableStringRef Mutable = (void *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000A37B8, v7);
        CFRetain(Mutable);
        CFDictionaryRemoveAllValues((CFMutableDictionaryRef)Mutable);
        if (!Mutable) {
          return;
        }
      }
      CFStringRef Value = CFDictionaryGetValue(v3, @"ActivityTime");
      if (Value)
      {
        CFDictionarySetValue((CFMutableDictionaryRef)Mutable, @"ActivityTime", Value);
      }
      else
      {
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        CFDateRef v12 = CFDateCreate(0, Current);
        if (!v12)
        {
          CFRelease(Mutable);
          return;
        }
        CFDateRef v13 = v12;
        CFDictionarySetValue((CFMutableDictionaryRef)Mutable, @"ActivityTime", v12);
        CFRelease(v13);
      }
      CFDateRef v14 = CFDictionaryGetValue(v3, @"AssertStartWhen");
      if (v14) {
        CFDictionarySetValue((CFMutableDictionaryRef)Mutable, @"AssertStartWhen", v14);
      }
      uint64_t v15 = CFDictionaryGetValue(v3, @"AssertType");
      if (v15) {
        CFDictionarySetValue((CFMutableDictionaryRef)Mutable, @"AssertType", v15);
      }
      mach_port_t v16 = CFDictionaryGetValue(v3, @"AssertName");
      if (v16) {
        CFDictionarySetValue((CFMutableDictionaryRef)Mutable, @"AssertName", v16);
      }
      CFDictionarySetValue((CFMutableDictionaryRef)Mutable, @"Action", v5);
      uint64_t v17 = a2[9];
      if (v17)
      {
        CFNumberRef v18 = CFNumberCreate(0, kCFNumberIntType, (const void *)(v17 + 96));
        if (v18)
        {
          CFNumberRef v19 = v18;
          CFDictionarySetValue((CFMutableDictionaryRef)Mutable, @"AssertPID", v18);
          CFRelease(v19);
        }
        CFNumberRef v20 = CFDictionaryGetValue(v3, @"Process Name");
        if (v20) {
          CFDictionarySetValue((CFMutableDictionaryRef)Mutable, @"AssertProcess", v20);
        }
      }
      CFNumberRef v21 = CFNumberCreate(0, kCFNumberIntType, (char *)a2 + 60);
      if (v21)
      {
        CFNumberRef v22 = v21;
        CFDictionarySetValue((CFMutableDictionaryRef)Mutable, @"RetainCount", v21);
        CFRelease(v22);
      }
      __int16 v23 = CFDictionaryGetValue(v3, @"GlobalUniqueID");
      if (v23) {
        CFDictionarySetValue((CFMutableDictionaryRef)Mutable, @"GlobalUniqueID", v23);
      }
      CFDictionaryRef v24 = CFDictionaryGetValue(v3, @"AssertionOnBehalfOfPID");
      if (v24) {
        CFDictionarySetValue((CFMutableDictionaryRef)Mutable, @"AssertionOnBehalfOfPID", v24);
      }
      __int16 v25 = CFDictionaryGetValue(v3, @"AssertionOnBehalfOfPIDReason");
      if (v25) {
        CFDictionarySetValue((CFMutableDictionaryRef)Mutable, @"AssertionOnBehalfOfPIDReason", v25);
      }
      int v26 = CFDictionaryGetValue(v3, @"AssertionOnBehalfOfBundleID");
      if (v26) {
        CFDictionarySetValue((CFMutableDictionaryRef)Mutable, @"AssertionOnBehalfOfBundleID", v26);
      }
      __int16 v27 = CFDictionaryGetValue(v3, @"FrameworkBundleID");
      if (v27) {
        CFDictionarySetValue((CFMutableDictionaryRef)Mutable, @"FrameworkBundleID", v27);
      }
      int v28 = CFDictionaryGetValue(v3, @"InstanceMetadata");
      if (v28) {
        CFDictionarySetValue((CFMutableDictionaryRef)Mutable, @"InstanceMetadata", v28);
      }
      __int16 v29 = CFDictionaryGetValue(v3, @"Category");
      if (v29) {
        CFDictionarySetValue((CFMutableDictionaryRef)Mutable, @"Category", v29);
      }
      CFStringRef v30 = CFDictionaryGetValue(v3, @"IsCoalesced");
      if (v30) {
        CFDictionarySetValue((CFMutableDictionaryRef)Mutable, @"IsCoalesced", v30);
      }
      if (v4)
      {
        __int16 v31 = CFDictionaryGetValue(v3, @"CreatorBacktrace");
        if (v31) {
          CFDictionarySetValue((CFMutableDictionaryRef)Mutable, @"CreatorBacktrace", v31);
        }
      }
      CFArraySetValueAtIndex((CFMutableArrayRef)qword_1000A37B8, dword_1000A37B0 & 0x1FF, Mutable);
      ++dword_1000A37B0;
      CFRelease(Mutable);
      unsigned int v32 = dword_1000A37C0;
      if (dword_1000A37C0 != -1)
      {
        ++dword_1000A37C0;
        if (v32 >= 0x1CC)
        {
          notify_post("com.apple.powermanagement.assertions.logHighWM");
          dword_1000A37C0 = -1;
          __int16 v33 = qword_1000A37D8;
          if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)CFStringRef v34 = 0;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Assertion bufffer has reached capacity. Sending high water mark notification", v34, 2u);
          }
        }
      }
      return;
    case 10:
      int v4 = 0;
      CFStringRef v5 = @"Suspended";
      goto LABEL_15;
    case 11:
      int v4 = 0;
      CFStringRef v5 = @"Resumed";
      goto LABEL_15;
    case 12:
      int v4 = 0;
      CFStringRef v5 = @"SystemTimeOutExpired";
      goto LABEL_15;
    case 13:
      int v4 = 0;
      ++qword_1000A3798;
      CFStringRef v5 = @"SessionStarted";
      goto LABEL_15;
    case 14:
      int v4 = 0;
      CFStringRef v5 = @"SessionEnded";
      goto LABEL_15;
    default:
      return;
  }
}

void sub_100043868(uint64_t a1, const __CFArray *a2)
{
  int v4 = malloc_type_calloc(1uLL, 0x70uLL, 0x10A0040FFA61E1BuLL);
  int Count = CFArrayGetCount(a2);
  if (Count >= 1)
  {
    CFIndex v6 = 0;
    uint64_t v7 = Count;
    do
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v6);
      _DWORD v4[2] = ValueAtIndex;
      v4[9] = a1;
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"Action");
      if (!Value)
      {
        CFDateRef v13 = qword_1000A37D8;
        if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
          sub_10006A638(&v14, v15, v13);
        }
        goto LABEL_20;
      }
      CFStringRef v10 = Value;
      CFComparisonResult v11 = CFStringCompare(Value, @"Created", 0);
      if (v11)
      {
        if (CFStringCompare(v10, @"Released", 0))
        {
          if (CFStringCompare(v10, @"TurnedOn", 0))
          {
            if (CFStringCompare(v10, @"TurnedOff", 0))
            {
              if (CFStringCompare(v10, @"TimedOut", 0))
              {
                if (CFStringCompare(v10, @"NameChange", 0))
                {
                  CFDateRef v12 = qword_1000A37D8;
                  if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)uint8_t buf = 138412290;
                    CFStringRef v17 = v10;
                    _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Unexpected value encountered for key kPMAsyncAssertionActionNameChange: %@.", buf, 0xCu);
                  }
                  goto LABEL_20;
                }
                LODWORD(v11) = 9;
              }
              else
              {
                LODWORD(v11) = 4;
              }
            }
            else
            {
              LODWORD(v11) = 7;
            }
          }
          else
          {
            LODWORD(v11) = 8;
          }
        }
        else
        {
          LODWORD(v11) = 2;
        }
      }
      sub_100043240(v11, v4);
LABEL_20:
      ++v6;
    }
    while (v7 != v6);
  }
  free(v4);
}

__CFArray *sub_100043AA4(unsigned int *a1, _DWORD *a2, int a3)
{
  unsigned int v6 = *a1;
  unsigned int v7 = dword_1000A37B0;
  *a2 = 0;
  int Count = (char *)qword_1000A37B8;
  CFTypeID TypeID = CFArrayGetTypeID();
  if (!Count)
  {
LABEL_4:
    if (!a3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (CFGetTypeID(Count) == TypeID)
  {
    int Count = (char *)CFArrayGetCount((CFArrayRef)qword_1000A37B8);
    goto LABEL_4;
  }
  int Count = 0;
  if (a3)
  {
LABEL_5:
    *a2 = 1;
    unsigned int v6 = -1;
    *a1 = -1;
  }
LABEL_6:
  if (v6 == v7 || Count == 0) {
    return 0;
  }
  if ((uint64_t)Count <= (v6 & 0x1FF))
  {
    *a2 = 1;
    asl_log(0, 0, 3, "Unexpected readFromIdx %d. arrCnt=%ld\n", v6, Count);
    unsigned int v6 = -1;
    *a1 = -1;
  }
  if (v6 == -1 && v7 <= 0x200)
  {
    CFComparisonResult v11 = (__CFArray *)qword_1000A37B8;
    CFTypeID v12 = CFArrayGetTypeID();
    if (!v11) {
      return v11;
    }
    if (CFGetTypeID(v11) == v12)
    {
      CFIndex v13 = 0;
      CFIndex v14 = (CFIndex)(Count - 1);
      goto LABEL_27;
    }
    return 0;
  }
  CFIndex v14 = (v7 - 1) & 0x1FF;
  if (v7 < v6 || v7 > v6 + 512)
  {
    *a2 = 1;
    if ((uint64_t)Count <= (v7 & 0x1FF)) {
      CFIndex v13 = 0;
    }
    else {
      CFIndex v13 = v7 & 0x1FF;
    }
  }
  else
  {
    CFIndex v13 = v6 & 0x1FF;
  }
LABEL_27:
  CFMutableStringRef Mutable = CFArrayCreateMutable(0, 512, &kCFTypeArrayCallBacks);
  CFComparisonResult v11 = Mutable;
  if (Mutable)
  {
    if (v13 > v14)
    {
      if (Count == (char *)512)
      {
        v17.length = 512 - v13;
        v17.CFIndex location = v13;
        CFArrayAppendArray(Mutable, (CFArrayRef)qword_1000A37B8, v17);
        CFIndex v13 = 0;
      }
      else
      {
        asl_log(0, 0, 3, "arrCnt is %ld. expected %d\n", Count, 512);
        asl_log(0, 0, 3, "startIdx: %ld endIdx: %ld refCnt: 0x%x readFromIdx: 0x%x writeToIdx: 0x%x\n", v13, v14, *a1, v6, v7);
        CFIndex v13 = 0;
        *a2 = 1;
      }
    }
    if ((uint64_t)Count <= v14)
    {
      asl_log(0, 0, 3, "final: arrCnt is %ld. expected >= %ld\n", Count, v14 + 1);
      *a2 = 1;
    }
    else
    {
      v18.length = v14 + 1 - v13;
      v18.CFIndex location = v13;
      CFArrayAppendArray(v11, (CFArrayRef)qword_1000A37B8, v18);
    }
    *a1 = dword_1000A37B0;
  }
  return v11;
}

uint64_t sub_100043D10(uint64_t a1, _OWORD *a2, vm_address_t *a3, unsigned int *a4, unsigned int *a5, _DWORD *a6, int *a7)
{
  if (!a3 || !a6)
  {
    int v14 = -536870206;
LABEL_12:
    *a7 = v14;
    return 0;
  }
  *a7 = -536870160;
  *a3 = 0;
  *a4 = 0;
  *a6 = 0;
  long long v12 = a2[1];
  v22[0] = *a2;
  v22[1] = v12;
  if (!sub_10005C9D0(v22, @"com.apple.private.iokit.powerlogging"))
  {
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
      sub_10006A678();
    }
    int v14 = -536870174;
    goto LABEL_12;
  }
  dword_1000A37C0 = 0;
  if ((byte_1000A4D58 & 1) == 0) {
    byte_1000A4D58 = 1;
  }
  if (qword_1000A37B8)
  {
    char v13 = 0;
  }
  else
  {
    qword_1000A37B8 = (uint64_t)CFArrayCreateMutable(0, 512, &kCFTypeArrayCallBacks);
    if (!qword_1000A37B8)
    {
      *a7 = -536870211;
      return 0;
    }
    char v13 = byte_1000A4D58 ^ 1;
  }
  mach_port_t v16 = sub_100043AA4(a5, a6, v13 & 1);
  CFDataRef Data = CFPropertyListCreateData(0, v16, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  if (Data)
  {
    CFDataRef v18 = Data;
    unsigned int Length = CFDataGetLength(Data);
    *a4 = Length;
    vm_allocate(mach_task_self_, a3, Length, 1);
    CFNumberRef v20 = (void *)*a3;
    if (v20)
    {
      BytePtr = CFDataGetBytePtr(v18);
      memcpy(v20, BytePtr, *a4);
      *a7 = 0;
      *a5 = dword_1000A37B0;
    }
    CFRelease(v18);
  }
  if (v16) {
    CFRelease(v16);
  }
  return 0;
}

void sub_100043EDC(void *a1, int a2)
{
  int value_4 = 0;
  dword_1000A37C0 = 0;
  if ((byte_1000A4D59 & 1) == 0) {
    byte_1000A4D59 = 1;
  }
  if (qword_1000A37A8) {
    BOOL v4 = qword_1000A37A0 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    unsigned int value = xpc_dictionary_get_uint64((xpc_object_t)qword_1000A37A8, "assertionActivityUpdateRefCnt");
    CFStringRef v5 = sub_100043AA4(&value, &value_4, (byte_1000A4D59 & 1) == 0);
    if (a2)
    {
      unsigned int v6 = qword_1000A37D8;
      if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint8_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "_sendAssertionActivityUpdate: Overflow from a client", buf, 2u);
      }
      int value_4 = 1;
    }
    xpc_object_t reply = xpc_dictionary_create_reply((xpc_object_t)qword_1000A37A8);
    if (!reply)
    {
      if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
        sub_10006A6AC();
      }
      goto LABEL_31;
    }
    mach_port_t v8 = reply;
    if (v5)
    {
      CFDictionaryRef v9 = (void *)_CFXPCCreateXPCObjectFromCFObject();
      if (!a1)
      {
LABEL_18:
        unsigned int v10 = value;
        xpc_dictionary_set_uint64(v8, "assertionActivityUpdateRefCnt", value);
        int v11 = value_4;
        xpc_dictionary_set_BOOL(v8, "assertionActivityUpdateOverflow", value_4 != 0);
        xpc_dictionary_set_value(v8, "assertionActivityUpdateData", v9);
        xpc_dictionary_set_value(v8, "assertionActivityUpdateProcessList", a1);
        xpc_dictionary_set_uint64(v8, "returnCode", 0);
        xpc_connection_send_message((xpc_connection_t)qword_1000A37A0, v8);
        xpc_release(v8);
        if (v5) {
          int Count = CFArrayGetCount(v5);
        }
        else {
          int Count = 0;
        }
        char v13 = qword_1000A37D8;
        if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint8_t buf = 67109632;
          int v17 = Count;
          __int16 v18 = 1024;
          unsigned int v19 = v10;
          __int16 v20 = 1024;
          int v21 = v11;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Assertion Activity Update: logged %d entries. New refCnt %d, overflow %d", buf, 0x14u);
        }
        if (v9) {
          xpc_release(v9);
        }
        if (a1) {
          xpc_release(a1);
        }
LABEL_31:
        if (v5) {
          CFRelease(v5);
        }
        goto LABEL_33;
      }
    }
    else
    {
      CFDictionaryRef v9 = 0;
      if (!a1) {
        goto LABEL_18;
      }
    }
    a1 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    goto LABEL_18;
  }
  if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
    sub_10006A6E0();
  }
LABEL_33:
  if (qword_1000A37A8)
  {
    xpc_release((xpc_object_t)qword_1000A37A8);
    qword_1000A37A8 = 0;
  }
  if (qword_1000A37A0)
  {
    xpc_release((xpc_object_t)qword_1000A37A0);
    qword_1000A37A0 = 0;
  }
}

void sub_1000441CC(_xpc_connection_s *a1, void *a2)
{
  if (a1 && a2)
  {
    int v4 = 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
      sub_10006A77C();
    }
    int v4 = -536870206;
  }
  if (!sub_10005CA7C(a1, @"com.apple.private.iokit.powerlogging"))
  {
    int v4 = -536870174;
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
      sub_10006A748();
    }
  }
  if (sub_100047724())
  {
    int v4 = -536870187;
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
      sub_10006A714();
    }
  }
  else if (!v4)
  {
    qword_1000A37A0 = (uint64_t)xpc_retain(a1);
    qword_1000A37A8 = (uint64_t)xpc_retain(a2);
    sub_100047750(0);
    return;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(a1);
  if (reply)
  {
    unsigned int v6 = reply;
    xpc_dictionary_set_uint64(reply, "returnCode", v4);
    xpc_connection_send_message(a1, v6);
    xpc_release(v6);
  }
}

void sub_100044318(void *a1)
{
  if (qword_1000A37A8) {
    BOOL v2 = qword_1000A37A0 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
      sub_10006A7E4();
    }
  }
  else
  {
    xpc_object_t reply = xpc_dictionary_create_reply((xpc_object_t)qword_1000A37A8);
    if (reply)
    {
      int v4 = reply;
      if (a1) {
        a1 = (void *)_CFXPCCreateXPCObjectFromCFObject();
      }
      xpc_dictionary_set_value(v4, "assertionActiveAsyncByProcess", a1);
      xpc_dictionary_set_uint64(v4, "returnCode", 0);
      xpc_connection_send_message((xpc_connection_t)qword_1000A37A0, v4);
      xpc_release(v4);
      if (a1)
      {
        xpc_release(a1);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR))
    {
      sub_10006A6AC();
    }
  }
}

void sub_10004442C(_xpc_connection_s *a1, void *a2)
{
  if (a1 && a2)
  {
    int v4 = 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
      sub_10006A77C();
    }
    int v4 = -536870206;
  }
  if (!sub_10005CA7C(a1, @"com.apple.private.iokit.powerlogging"))
  {
    int v4 = -536870174;
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
      sub_10006A748();
    }
  }
  if (sub_100047724())
  {
    int v4 = -536870187;
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
      sub_10006A714();
    }
  }
  else if (!v4)
  {
    qword_1000A37A0 = (uint64_t)xpc_retain(a1);
    qword_1000A37A8 = (uint64_t)xpc_retain(a2);
    sub_100047750(1);
    return;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(a1);
  if (reply)
  {
    unsigned int v6 = reply;
    xpc_dictionary_set_uint64(reply, "returnCode", v4);
    xpc_connection_send_message(a1, v6);
    xpc_release(v6);
  }
}

void sub_100044578(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 64))
  {
    if (*(void *)a2 || (CFMutableDataRef Mutable = CFDataCreateMutable(0, 0), (*(void *)a2 = Mutable) != 0))
    {
      if (qword_1000A4D60 || (qword_1000A4D60 = IOReportCopyCurrentProcessName()) != 0)
      {
        if (!qword_1000A4D68)
        {
          uint64_t valuePtr = 0x100000000000000;
          qword_1000A4D68 = (uint64_t)CFDictionaryCreateMutable(0, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          if (!qword_1000A4D68) {
            return;
          }
          CFNumberRef v5 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
          if (!v5) {
            return;
          }
          CFNumberRef v6 = v5;
          CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4D68, @"IOReportChannelUnit", v5);
          CFRelease(v6);
        }
        if (*(void *)(a2 + 24) || (uint64_t Aggregate = IOReportCreateAggregate(), (*(void *)(a2 + 24) = Aggregate) != 0))
        {
          getpid();
          if (!IOReportAddChannelDescription())
          {
            mach_port_t v8 = (void *)(a1 + 8);
            for (uint64_t i = 32; i != 64; i += 8)
            {
              if (*((_DWORD *)v8 - 2))
              {
                uint64_t v10 = *(void *)(a1 + 64);
                if (*(_WORD *)(v10 + 20))
                {
                  uint64_t v11 = *(void *)(a2 + 16) - *v8;
                  uint64_t v12 = *(void *)(v10 + i);
                  BOOL v13 = __CFADD__(v12, v11);
                  unint64_t v14 = v12 + v11;
                  if (v13) {
                    uint64_t v15 = (v12 >> 63) + 1;
                  }
                  else {
                    uint64_t v15 = v12 >> 63;
                  }
                  if ((v15 & 1) != v14 >> 63 || v15 << 63 >> 63 != v15) {
                    unint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  *(void *)(v10 + i) = v14;
                }
              }
              void *v8 = *(void *)(a2 + 16);
              v8 += 2;
            }
            CFDataAppendBytes(*(CFMutableDataRef *)a2, *(const UInt8 **)(a1 + 64), (unint64_t)*(unsigned __int16 *)(*(void *)(a1 + 64) + 20) << 6);
          }
        }
      }
    }
  }
}

uint64_t sub_100044738(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(*(void *)a1 + 100);
  unsigned int v3 = *(_DWORD *)(*(void *)a2 + 100);
  BOOL v4 = v2 >= v3;
  BOOL v5 = v2 != v3;
  if (v4) {
    return v5;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_100044758(uint64_t *a1)
{
  uint64_t v1 = 3758097085;
  long long v11 = 0u;
  long long v12 = 0u;
  if (dword_1000A37F8)
  {
    *(void *)&long long v12 = sub_10005E2A8();
    int64_t Count = CFDictionaryGetCount((CFDictionaryRef)qword_1000A37E0);
    BOOL v4 = (const void **)malloc_type_malloc(8 * Count, 0xAB0C7594uLL);
    if (v4)
    {
      BOOL v5 = v4;
      bzero(v4, 8 * Count);
      CFDictionaryGetKeysAndValues((CFDictionaryRef)qword_1000A37E0, 0, v5);
      qsort(v5, Count, 8uLL, (int (__cdecl *)(const void *, const void *))sub_100044738);
      if (Count < 1)
      {
        mach_port_t v8 = 0;
        unsigned int v7 = 0;
      }
      else
      {
        CFNumberRef v6 = (uint64_t *)v5;
        do
        {
          if (!*v6) {
            break;
          }
          sub_100044578(*v6++, (uint64_t)&v11);
          --Count;
        }
        while (Count);
        unsigned int v7 = (const void *)*((void *)&v12 + 1);
        mach_port_t v8 = (const void *)v11;
      }
      uint64_t SamplesRaw = IOReportCreateSamplesRaw();
      free(v5);
      *a1 = SamplesRaw;
      if (v7) {
        CFRelease(v7);
      }
      if (v8) {
        CFRelease(v8);
      }
      return 0;
    }
  }
  else
  {
    asl_log(0, 0, 3, "gActivityAggCnt = 0; IOPMCopyAssertionActivityAggregate() called without w/o IOPMSetAssertionActivityAggregate(true)?!\n");
    return 3758097101;
  }
  return v1;
}

uint64_t sub_1000448BC(uint64_t a1, _OWORD *a2, vm_address_t *a3, unsigned int *a4, _DWORD *a5)
{
  CFPropertyListRef propertyList = 0;
  *a4 = 0;
  int v9 = sub_100044758((uint64_t *)&propertyList);
  *a5 = v9;
  CFPropertyListRef v10 = propertyList;
  if (v9)
  {
    if (!propertyList) {
      return 0;
    }
    goto LABEL_10;
  }
  if (propertyList)
  {
    CFDataRef Data = CFPropertyListCreateData(0, propertyList, kCFPropertyListBinaryFormat_v1_0, 0, 0);
    if (Data)
    {
      CFDataRef v12 = Data;
      unsigned int Length = CFDataGetLength(Data);
      *a4 = Length;
      vm_allocate(mach_task_self_, a3, Length, 1);
      unint64_t v14 = (void *)*a3;
      BytePtr = CFDataGetBytePtr(v12);
      memcpy(v14, BytePtr, *a4);
      long long v16 = a2[1];
      v18[0] = *a2;
      v18[1] = v16;
      if (sub_10005C9D0(v18, @"com.apple.private.iokit.powerlogging")) {
        sub_10004C30C();
      }
      CFRelease(v10);
      CFPropertyListRef v10 = v12;
    }
    else
    {
      *a5 = -536870199;
    }
LABEL_10:
    CFRelease(v10);
  }
  return 0;
}

void sub_1000449D4(_xpc_connection_s *a1, xpc_object_t xdict)
{
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t value = 0xFFFFFFFF00000000;
  uint64_t v22 = 0;
  int valuePtr = 0;
  if (xpc_dictionary_get_value(xdict, "assertionCreate"))
  {
    CFDictionaryRef v4 = (const __CFDictionary *)_CFXPCCreateCFObjectFromXPCMessage();
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (v4 && CFGetTypeID(v4) == TypeID)
    {
      xpc_connection_get_audit_token();
      uint64_t pid = xpc_connection_get_pid(a1);
      uid_t euid = xpc_connection_get_euid(a1);
      xpc_connection_get_egid(a1);
      CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v4);
      CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(MutableCopy, @"AsyncClientAssertionId");
      CFTypeID v10 = CFNumberGetTypeID();
      if (v9 && CFGetTypeID(v9) == v10) {
        CFNumberGetValue(v9, kCFNumberSInt32Type, &valuePtr);
      }
      *(_OWORD *)uint8_t buf = v24;
      long long v27 = v25;
      if (!sub_100044DCC(buf, MutableCopy))
      {
        int v11 = -536870207;
        if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
          sub_10006A928();
        }
        goto LABEL_29;
      }
      if (sub_100044FD8(MutableCopy) && !sub_10005D678(euid) && !sub_10005E308(euid))
      {
        int v11 = -536870207;
LABEL_29:
        CFRelease(v4);
        if (!MutableCopy) {
          goto LABEL_32;
        }
        CFDictionaryRef v18 = MutableCopy;
        goto LABEL_31;
      }
      int v11 = sub_100045028(pid, MutableCopy, &value, &v22, (_DWORD *)&value + 1);
      if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEBUG))
      {
        sub_10006A8B4();
        if (a1)
        {
LABEL_13:
          if (v22)
          {
            xpc_object_t v12 = xpc_retain(a1);
            *(void *)(v22 + 12sub_100048D14(0x12u, 0) = v12;
          }
        }
      }
      else if (a1)
      {
        goto LABEL_13;
      }
      BOOL v13 = qword_1000A37D8;
      if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint8_t buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = value;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = valuePtr;
        *(_WORD *)&buf[14] = 1024;
        LODWORD(v27) = pid;
        _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Created assertion with id 0x%x for remote id 0x%x from pid %d\n", buf, 0x14u);
      }
      xpc_object_t v14 = xpc_dictionary_get_value(xdict, "assertionActivityLog");
      if (v14)
      {
        if (xpc_get_type(v14) == (xpc_type_t)&_xpc_type_array)
        {
          uint64_t v15 = _CFXPCCreateCFObjectFromXPCObject();
          if (v15)
          {
            CFArrayRef v16 = (const __CFArray *)v15;
            int v17 = CFDictionaryGetValue((CFDictionaryRef)qword_1000A37E0, (const void *)(int)pid);
            sub_100043868((uint64_t)v17, v16);
            CFRelease(v16);
          }
        }
      }
      goto LABEL_29;
    }
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
      sub_10006A880();
    }
    int v11 = -536870206;
    if (v4)
    {
      CFDictionaryRef v18 = v4;
LABEL_31:
      CFRelease(v18);
    }
  }
  else
  {
    int v11 = -536870206;
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
      sub_10006A84C();
    }
  }
LABEL_32:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    __int16 v20 = reply;
    xpc_dictionary_set_uint64(reply, "returnCode", v11);
    xpc_dictionary_set_uint64(v20, "assertionId", value);
    xpc_dictionary_set_uint64(v20, "EnTrIntensity", SHIDWORD(value));
    xpc_connection_send_message(a1, v20);
    xpc_release(v20);
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR))
  {
    sub_10006A818();
  }
}

BOOL sub_100044DCC(_OWORD *a1, const __CFDictionary *a2)
{
  pid_t pidp = -1;
  long long v4 = a1[1];
  *(_OWORD *)atoken.val = *a1;
  *(_OWORD *)&atoken.val[4] = v4;
  audit_token_to_au32(&atoken, 0, 0, 0, 0, 0, &pidp, 0, 0);
  CFStringRef Value = CFDictionaryGetValue(a2, @"AssertType");
  unsigned int v6 = sub_100048944(Value);
  if ((v6 & 0x80000000) == 0)
  {
    CFStringRef v7 = (const __CFString *)*((void *)&unk_1000A3870 + 20 * v6 + 8);
    if (v7)
    {
      long long v8 = a1[1];
      *(_OWORD *)atoken.val = *a1;
      *(_OWORD *)&atoken.val[4] = v8;
      if (!sub_10005C9D0(&atoken, v7))
      {
        BOOL result = os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        sub_10006AA88();
        return 0;
      }
    }
  }
  CFBooleanRef v9 = (const __CFBoolean *)CFDictionaryGetValue(a2, @"AppliesToLimitedPower");
  CFTypeID TypeID = CFBooleanGetTypeID();
  if (v9)
  {
    CFBooleanRef v11 = kCFBooleanTrue;
    if (CFGetTypeID(v9) == TypeID && v9 == kCFBooleanTrue)
    {
      long long v12 = a1[1];
      *(_OWORD *)atoken.val = *a1;
      *(_OWORD *)&atoken.val[4] = v12;
      CFBooleanRef v11 = v9;
      if (!sub_10005C9D0(&atoken, @"com.apple.private.iokit.assertonbattery"))
      {
        BOOL result = os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        sub_10006AA14();
        return 0;
      }
    }
  }
  else
  {
    CFBooleanRef v11 = kCFBooleanTrue;
  }
  CFBooleanRef v14 = (CFBooleanRef)CFDictionaryGetValue(a2, @"AppliesOnLidClose");
  CFTypeID v15 = CFBooleanGetTypeID();
  if (!v14) {
    return 1;
  }
  CFTypeID v16 = v15;
  CFTypeID v17 = CFGetTypeID(v14);
  BOOL result = 1;
  if (v17 == v16 && v14 == v11)
  {
    long long v18 = a1[1];
    *(_OWORD *)atoken.val = *a1;
    *(_OWORD *)&atoken.val[4] = v18;
    if (!sub_10005C9D0(&atoken, @"com.apple.private.iokit.assertonlidclose"))
    {
      BOOL result = os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      sub_10006A9A0();
      return 0;
    }
    return 1;
  }
  return result;
}

BOOL sub_100044FD8(const __CFDictionary *a1)
{
  return CFDictionaryGetValue(a1, @"DisableInflow") || CFDictionaryGetValue(a1, @"ChargeInhibit") != 0;
}

uint64_t sub_100045028(uint64_t a1, const void *a2, _DWORD *a3, uint64_t *a4, _DWORD *a5)
{
  uint64_t value = 0;
  *a3 = 0;
  CFTypeID v10 = sub_100045D68(a1);
  if (!v10)
  {
    uint64_t v18 = 3758097085;
    uint64_t v19 = sub_100045DA8(a1);
    if (!v19) {
      return v18;
    }
    CFTypeID v10 = (_DWORD *)v19;
    if ((*(unsigned char *)(v19 + 136) & 0x20) != 0) {
      return v18;
    }
    if (a4) {
      *a4 = v19;
    }
  }
  if ((char)v10[34] < 0)
  {
    uint64_t v18 = 3758097097;
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
      sub_10006AB5C();
    }
  }
  else
  {
    int v11 = dword_1000A4EE8;
    while (1)
    {
      long long v12 = (const void *)v11;
      if (CFDictionaryGetValueIfPresent((CFDictionaryRef)qword_1000A4E18, (const void *)v11, (const void **)&value) != 1) {
        break;
      }
      int v11 = (v11 + 1) % 10240;
      if (v11 == dword_1000A4EE8)
      {
        long long v12 = (const void *)v11;
        break;
      }
    }
    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)qword_1000A4E18, v12, (const void **)&value) == 1
      || (BOOL v13 = malloc_type_calloc(1uLL, 0x70uLL, 0x10A0040FFA61E1BuLL)) == 0)
    {
      uint64_t v18 = 3758097085;
      sub_100046048(a1);
    }
    else
    {
      uint64_t v14 = (uint64_t)v13;
      v13[2] = a2;
      CFRetain(a2);
      *(_DWORD *)(v14 + 6sub_100048D14(0x12u, 0) = 1;
      *(void *)(v14 + 72) = v10;
      int v15 = *(_DWORD *)(v14 + 80);
      if (v15)
      {
        CFTypeID v16 = sub_100045D68(v15);
        if (v16 || (CFTypeID v16 = (_DWORD *)sub_100045DA8(*(unsigned int *)(v14 + 80))) != 0) {
          *(void *)(v14 + 88) = v16;
        }
      }
      *(_DWORD *)(v14 + 52) = v11 & 0x7FFF | 0x8000;
      CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4E18, v12, (const void *)v14);
      dword_1000A4EE8 = (v11 + 1) % 10240;
      uint64_t v17 = sub_1000524C0(v14);
      if (v17)
      {
        uint64_t v18 = v17;
        sub_100046048(a1);
        CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_1000A4E18, v12);
        CFRelease(*(CFTypeRef *)(v14 + 16));
        free((void *)v14);
        if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
          sub_10006AAF4();
        }
      }
      else
      {
        unsigned int v21 = *(_DWORD *)(v14 + 48);
        if ((*(unsigned char *)(v14 + 24) & 2) == 0)
        {
          if (CFDictionaryGetValue(*(CFDictionaryRef *)(v14 + 16), @"AsyncClientAssertionId")) {
            int v22 = 13;
          }
          else {
            int v22 = 0;
          }
          sub_100042680(v22, v14);
        }
        if (dword_1000A4DE4) {
          notify_post("com.apple.system.powermanagement.assertions.anychange");
        }
        *a3 = *(_DWORD *)(v14 + 52);
        uint64_t v18 = 0;
        if (a5) {
          *a5 = *((_DWORD *)&unk_1000A3870 + 40 * v21 + 39);
        }
      }
    }
  }
  return v18;
}

void sub_100045308(_xpc_connection_s *a1, xpc_object_t xdict)
{
  int v11 = 0;
  CFTypeID v10 = 0;
  int uint64 = xpc_dictionary_get_uint64(xdict, "assertionRelease");
  xpc_dictionary_get_value(xdict, "assertionActivityLog");
  CFArrayRef v5 = (const __CFArray *)_CFXPCCreateCFObjectFromXPCObject();
  BOOL v6 = xpc_dictionary_get_BOOL(xdict, "assertionWasCoalesced");
  pid_t pid = xpc_connection_get_pid(a1);
  if (v5)
  {
    CFStringRef Value = CFDictionaryGetValue((CFDictionaryRef)qword_1000A37E0, (const void *)pid);
    if (Value)
    {
      sub_100043868((uint64_t)Value, v5);
    }
    else if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR))
    {
      sub_10006AC94();
    }
    CFRelease(v5);
  }
  if (sub_1000454A8(pid, uint64, (void **)&v10))
  {
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
      sub_10006AC2C();
    }
  }
  else
  {
    if (v6) {
      CFBooleanRef v9 = (const void **)&kCFBooleanTrue;
    }
    else {
      CFBooleanRef v9 = (const void **)&kCFBooleanFalse;
    }
    CFDictionarySetValue(v10[2], @"IsCoalesced", *v9);
  }
  if (sub_100045534(pid, uint64, &v11))
  {
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
      sub_10006ABC4();
    }
  }
}

uint64_t sub_1000454A8(int a1, int a2, void **a3)
{
  uint64_t v3 = 3758097090;
  long long v4 = (const void *)(a2 & 0xFFFF7FFF);
  uint64_t value = 0;
  if (v4 >> 11 <= 4
    && CFDictionaryGetValueIfPresent((CFDictionaryRef)qword_1000A4E18, v4, (const void **)&value))
  {
    if (*(_DWORD *)(*((void *)value + 9) + 96) == a1)
    {
      uint64_t v3 = 0;
      *a3 = value;
    }
    else
    {
      return 3758097122;
    }
  }
  return v3;
}

uint64_t sub_100045534(int a1, int a2, _DWORD *a3)
{
  CFBooleanRef v9 = 0;
  uint64_t v4 = sub_1000454A8(a1, a2, (void **)&v9);
  if (!v4)
  {
    CFArrayRef v5 = v9;
    int v6 = v9[15];
    if (v6) {
      v9[15] = --v6;
    }
    if (a3)
    {
      *a3 = v6;
      int v6 = v5[15];
    }
    if (!v6)
    {
      sub_100051F60((uint64_t)v5, 1);
      uint64_t v7 = *((void *)v5 + 9);
      if (*(void *)(v7 + 144)) {
        *(void *)(v7 + 144) = 0;
      }
      sub_100051E54(v5, 2);
      if (dword_1000A4DE4) {
        notify_post("com.apple.system.powermanagement.assertions.anychange");
      }
    }
  }
  return v4;
}

void sub_1000455E0(_xpc_connection_s *a1, xpc_object_t xdict)
{
  int valuePtr = 0;
  int v12 = -1;
  if (!xpc_dictionary_get_value(xdict, "assertionProperties"))
  {
    int v5 = -536870206;
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
      sub_10006ACFC();
    }
    goto LABEL_21;
  }
  uint64_t v3 = (const void *)_CFXPCCreateCFObjectFromXPCMessage();
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!v3 || CFGetTypeID(v3) != TypeID)
  {
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
      sub_10006A880();
    }
    int v5 = -536870206;
    if (!v3) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  int v5 = -536870206;
  xpc_connection_get_audit_token();
  *(_OWORD *)uint8_t buf = 0u;
  long long v14 = 0u;
  if (!sub_100044DCC(buf, (const __CFDictionary *)v3))
  {
    int v5 = -536870207;
LABEL_20:
    CFRelease(v3);
LABEL_21:
    pid_t pid = -1;
LABEL_22:
    CFTypeID v10 = qword_1000A37D8;
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint8_t buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = valuePtr;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v5;
      *(_WORD *)&buf[14] = 1024;
      LODWORD(v14) = pid;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to change properties for assertion id 0x%x (rc:0x%x) for pid %d\n", buf, 0x14u);
    }
    return;
  }
  CFStringRef Value = CFDictionaryGetValue((CFDictionaryRef)v3, @"AsyncRemoteAssertionId");
  CFTypeID v7 = CFNumberGetTypeID();
  if (!Value || CFGetTypeID(Value) != v7)
  {
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
      sub_10006AD30();
    }
    goto LABEL_20;
  }
  CFNumberGetValue((CFNumberRef)Value, kCFNumberIntType, &valuePtr);
  pid_t pid = xpc_connection_get_pid(a1);
  int v5 = sub_10004587C(pid, valuePtr, (const __CFDictionary *)v3, &v12);
  CFBooleanRef v9 = qword_1000A37D8;
  if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint8_t buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = valuePtr;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v5;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Updated properties for assertion id 0x%x(rc:0x%x)\n", buf, 0xEu);
  }
  CFRelease(v3);
  if (v5) {
    goto LABEL_22;
  }
}

uint64_t sub_10004587C(int a1, int a2, const __CFDictionary *a3, _DWORD *a4)
{
  unint64_t v36 = 0;
  uint64_t v7 = sub_1000454A8(a1, a2, (void **)&v36);
  if (!v7)
  {
    uint64_t v7 = 3758097122;
    CFStringRef Value = (char *)CFDictionaryGetValue((CFDictionaryRef)qword_1000A37E0, (const void *)a1);
    if (!Value) {
      return 3758097090;
    }
    if ((Value[136] & 0x80000000) == 0)
    {
      CFTypeID v10 = v36;
      int v11 = (char *)CFDictionaryGetValue((CFDictionaryRef)qword_1000A37E0, (const void *)v36[20]);
      if (!v11 || (v11[136] & 0x80000000) == 0)
      {
        *((_DWORD *)v10 + 14) = 0;
        unsigned int v12 = *((_DWORD *)v10 + 12);
        int v13 = *((_DWORD *)v10 + 6);
        CFDictionaryApplyFunction(a3, (CFDictionaryApplierFunction)sub_1000520E8, v10);
        if (a4) {
          *a4 = *((_DWORD *)&unk_1000A3870 + 40 * v12 + 39);
        }
        int v14 = *((_DWORD *)v10 + 14);
        if ((v14 & 0x20) != 0)
        {
          sub_100042680(9, (uint64_t)v10);
          int v14 = *((_DWORD *)v10 + 14);
        }
        int v15 = *((_DWORD *)v10 + 6);
        if ((v14 & 2) != 0)
        {
          if ((v15 & 2) != 0)
          {
            uint64_t v19 = (char *)&unk_1000A3870 + 160 * v12;
            if (v13) {
              sub_10004D338((uint64_t)v10, (uint64_t)v19, 1, 1);
            }
            else {
              sub_10004CF1C((uint64_t)v10, (uint64_t)v19, 1);
            }
            __int16 v20 = (char *)&unk_1000A3870 + 160 * v12;
            uint64_t v23 = *((void *)v20 + 3);
            unsigned int v21 = v20 + 24;
            uint64_t v22 = v23;
            void *v10 = v23;
            if (v23) {
              *(void *)(v22 + 8) = v10;
            }
            *unsigned int v21 = v10;
            v10[1] = v21;
            *((_DWORD *)v10 + 6) = v10[3] & 0xFFFFFFFC | 2;
            if (*((_DWORD *)v10 + 12) == 5)
            {
              int v24 = *(_DWORD *)(v10[9] + 96);
              if (v24 != getpid()) {
                sub_10004A25C();
              }
            }
            long long v25 = (void (*)(char *, uint64_t))*((void *)&unk_1000A3870 + 20 * v12 + 16);
            if (v25) {
              v25((char *)&unk_1000A3870 + 160 * v12, 1);
            }
            int v18 = 7;
          }
          else
          {
            uint64_t v17 = *v10;
            if (*v10) {
              *(void *)(v17 + 8) = v10[1];
            }
            *(void *)v10[1] = v17;
            *((_DWORD *)v10 + 6) = v15 & 0xFFFFFFFD;
            CFDictionaryRemoveValue((CFMutableDictionaryRef)v10[2], @"AssertTimedOutWhen");
            CFDictionaryRemoveValue((CFMutableDictionaryRef)v10[2], @"AssertStartWhen");
            sub_1000524C0((uint64_t)v10);
            int v18 = 8;
          }
          sub_100042680(v18, (uint64_t)v10);
        }
        else
        {
          if ((v15 & 2) != 0) {
            return 0;
          }
          if (v14)
          {
            CFTypeID v16 = (char *)&unk_1000A3870 + 160 * v12;
            if (v13) {
              sub_10004D338((uint64_t)v10, (uint64_t)v16, 1, 0);
            }
            else {
              sub_10004CF1C((uint64_t)v10, (uint64_t)v16, 0);
            }
            v10[4] = sub_10005E2A8();
            CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
            CFDateRef v27 = CFDateCreate(0, Current);
            if (v27)
            {
              CFDateRef v28 = v27;
              CFDictionarySetValue((CFMutableDictionaryRef)v10[2], @"AssertStartWhen", v27);
              CFRelease(v28);
            }
            if (v10[5]) {
              sub_10004D5CC((uint64_t)v10, (uint64_t)&unk_1000A3870 + 160 * v12, 1, 0);
            }
            else {
              sub_10004CE88(v10, (char *)&unk_1000A3870 + 160 * v12, 0);
            }
            if (*((_DWORD *)v10 + 12) == 9)
            {
              char v29 = sub_10005A620();
              (*((void (**)(char *, void))&unk_1000A3870 + 20 * v12 + 16))((char *)&unk_1000A3870 + 160 * v12, 0);
              if ((v29 & 1) == 0) {
                sub_100042680(8, (uint64_t)v10);
              }
            }
            CFStringRef v30 = (void (*)(char *, uint64_t))*((void *)&unk_1000A3870 + 20 * v12 + 16);
            if (v30) {
              v30((char *)&unk_1000A3870 + 160 * v12, 2);
            }
          }
          if ((v10[7] & 8) != 0)
          {
            __int16 v31 = (void (*)(char *, BOOL))*((void *)&unk_1000A3870 + 20 * v12 + 16);
            if (v31)
            {
              BOOL v32 = ((*((_DWORD *)v10 + 6) >> 2) & 1) == 0;
              v31((char *)&unk_1000A3870 + 160 * v12, v32);
              sub_10004B528(v10, v32);
            }
          }
          if ((v10[7] & 0x10) != 0)
          {
            __int16 v33 = (void (*)(char *, BOOL))*((void *)&unk_1000A3870 + 20 * v12 + 16);
            if (v33) {
              v33((char *)&unk_1000A3870 + 160 * v12, ((*((_DWORD *)v10 + 6) >> 3) & 1) == 0);
            }
          }
          int v34 = *((_DWORD *)v10 + 14);
          if ((v34 & 0x80) != 0)
          {
            __int16 v35 = (void (*)(char *, uint64_t))*((void *)&unk_1000A3870 + 20 * v12 + 16);
            if (v35)
            {
              v35((char *)&unk_1000A3870 + 160 * v12, 2);
              int v34 = *((_DWORD *)v10 + 14);
            }
          }
          if ((v34 & 0x40) != 0) {
            sub_10004AC68((uint64_t)v10, 2);
          }
        }
        if (dword_1000A4DE4) {
          notify_post("com.apple.system.powermanagement.assertions.anychange");
        }
        return 0;
      }
    }
  }
  return v7;
}

void sub_100045C30(uint64_t a1, xpc_object_t xdict)
{
  if (xpc_dictionary_get_value(xdict, "assertionActivityLog"))
  {
    uint64_t v3 = _CFXPCCreateCFObjectFromXPCObject();
    if (v3)
    {
      CFArrayRef v4 = (const __CFArray *)v3;
      int v5 = qword_1000A37D8;
      if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEBUG)) {
        sub_10006AE00(v4, a1, v5);
      }
      sub_100043868(a1, v4);
      CFRelease(v4);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEBUG))
  {
    sub_10006AD98();
  }
}

void sub_100045CE8(_xpc_connection_s *a1, void *a2)
{
  uint64_t pid = xpc_connection_get_pid(a1);
  CFArrayRef v4 = sub_100045D68(pid);
  if (v4)
  {
    sub_100045C30((uint64_t)v4, a2);
  }
  else
  {
    int v5 = sub_100045DA8(pid);
    sub_100045C30((uint64_t)v5, a2);
    if (!v5) {
      return;
    }
  }

  sub_100046048(pid);
}

_DWORD *sub_100045D68(int a1)
{
  BOOL result = CFDictionaryGetValue((CFDictionaryRef)qword_1000A37E0, (const void *)a1);
  if (result)
  {
    int v2 = result[18];
    if (v2 != -1) {
      result[18] = v2 + 1;
    }
  }
  return result;
}

void *sub_100045DA8(uint64_t a1)
{
  if (!proc_name(a1, buffer, 0x40u))
  {
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
      sub_10006AEB4();
    }
    return 0;
  }
  int v2 = malloc_type_calloc(1uLL, 0x98uLL, 0x10E0040F719877AuLL);
  if (!v2)
  {
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
      sub_10006AF1C();
    }
    return 0;
  }
  uint64_t v3 = v2;
  if (!a1) {
    goto LABEL_6;
  }
  CFArrayRef v4 = sub_10005C968();
  int v5 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_proc, (int)a1, 0x80000000uLL, v4);
  *((void *)v3 + 11) = v5;
  if (!v5)
  {
    free(v3);
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
      sub_10006AFFC();
    }
    return 0;
  }
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1000514F8;
  handler[3] = &unk_100092470;
  int v14 = a1;
  void handler[4] = 30;
  dispatch_source_set_event_handler(v5, handler);
  int v6 = *((void *)v3 + 11);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1000515AC;
  v12[3] = &unk_100091490;
  v12[4] = v3;
  dispatch_source_set_cancel_handler(v6, v12);
  dispatch_resume(*((dispatch_object_t *)v3 + 11));
LABEL_6:
  CFStringRef v7 = CFStringCreateWithCString(0, buffer, 0x8000100u);
  *((void *)v3 + 1sub_100048D14(0x12u, 0) = v7;
  CFTypeID TypeID = CFStringGetTypeID();
  if (!v7 || CFGetTypeID(v7) != TypeID)
  {
    CFBooleanRef v9 = qword_1000A37D8;
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
      sub_10006AF84((uint64_t)buffer, a1, v9);
    }
  }
  ++*((_DWORD *)v3 + 18);
  int v10 = dword_1000A4EC0++;
  *((_DWORD *)v3 + 24) = a1;
  *((_DWORD *)v3 + 25) = v10;
  CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A37E0, (const void *)(int)a1, v3);
  sub_10004CB10((const void **)v3);
  return v3;
}

void sub_100046048(int a1)
{
  CFStringRef Value = (NSObject **)CFDictionaryGetValue((CFDictionaryRef)qword_1000A37E0, (const void *)a1);
  if (Value)
  {
    uint64_t v3 = Value;
    if (*((_DWORD *)Value + 18) == 1)
    {
      CFArrayRef v4 = Value[11];
      if (v4) {
        dispatch_release(v4);
      }
      int v5 = v3[10];
      if (v5) {
        CFRelease(v5);
      }
      int v6 = v3[13];
      if (v6) {
        CFRelease(v6);
      }
      CFStringRef v7 = v3[14];
      if (v7) {
        CFRelease(v7);
      }
      long long v8 = (_xpc_connection_s *)v3[15];
      if (v8)
      {
        CFBooleanRef v9 = qword_1000A37D8;
        if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR))
        {
          v10[0] = 67109120;
          v10[1] = a1;
          _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Cancelling xpc connection for pid %d", (uint8_t *)v10, 8u);
          long long v8 = (_xpc_connection_s *)v3[15];
        }
        xpc_connection_cancel(v8);
        xpc_release(v3[15]);
        v3[15] = 0;
      }
      CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_1000A37E0, (const void *)a1);
      v3[18] = 0;
      *((_OWORD *)v3 + 7) = 0u;
      *((_OWORD *)v3 + 8) = 0u;
      *((_OWORD *)v3 + 5) = 0u;
      *((_OWORD *)v3 + 6) = 0u;
      *((_OWORD *)v3 + 3) = 0u;
      *((_OWORD *)v3 + 4) = 0u;
      *((_OWORD *)v3 + 1) = 0u;
      *((_OWORD *)v3 + 2) = 0u;
      *(_OWORD *)uint64_t v3 = 0u;
      free(v3);
    }
    else
    {
      --*((_DWORD *)Value + 18);
    }
  }
}

void sub_1000461AC(_xpc_connection_s *a1)
{
  uint64_t pid = xpc_connection_get_pid(a1);
  uint64_t v3 = qword_1000A37D8;
  if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = pid;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Aysnc Assertion: received initial connection from %d", (uint8_t *)v5, 8u);
  }
  CFArrayRef v4 = sub_100045D68(pid);
  if (v4 || (CFArrayRef v4 = sub_100045DA8(pid)) != 0)
  {
    v4[15] = xpc_retain(a1);
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR))
  {
    sub_10006B064();
  }
}

void sub_1000462AC(_xpc_connection_s *a1, void *a2)
{
  xpc_connection_get_pid(a1);
  if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEBUG)) {
    sub_10006B0CC();
  }
  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    int v5 = reply;
    xpc_dictionary_set_BOOL(reply, "assertionFeatureSupported", byte_1000A3478);
    xpc_connection_send_message(a1, v5);
    xpc_release(v5);
  }
}

void sub_100046340(_xpc_connection_s *a1, void *a2)
{
  long long v10 = 0u;
  long long v11 = 0u;
  xpc_connection_get_audit_token();
  memset(&v9, 0, sizeof(v9));
  CFArrayRef v4 = SecTaskCreateWithAuditToken(kCFAllocatorDefault, &v9);
  int v5 = v4;
  if (v4)
  {
    int v6 = (__SecTask *)SecTaskCopyValueForEntitlement(v4, @"com.apple.private.iokit.assertion-suspendresume", 0);
    if (v6)
    {
      CFStringRef v7 = v6;
      int uint64 = xpc_dictionary_get_uint64(a2, "pid");
      if (xpc_dictionary_get_uint64(a2, "assertionSetState") == 1) {
        sub_100046440(uint64);
      }
      else {
        sub_1000465B0(uint64);
      }
      CFRelease(v5);
      int v5 = v7;
LABEL_11:
      CFRelease(v5);
      return;
    }
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    sub_10006B134(a1);
  }
  if (v5) {
    goto LABEL_11;
  }
}

void sub_100046440(int a1)
{
  CFStringRef Value = (char *)CFDictionaryGetValue((CFDictionaryRef)qword_1000A37E0, (const void *)a1);
  if (Value)
  {
    uint64_t v3 = Value;
    if (Value[136] < 0)
    {
      if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
        sub_10006B22C();
      }
    }
    else
    {
      for (uint64_t i = 0; i != 3200; i += 160)
      {
        v6[0] = _NSConcreteStackBlock;
        v6[1] = 3221225472;
        _DWORD v6[2] = sub_10004D788;
        v6[3] = &unk_1000928B8;
        int v7 = a1;
        sub_10004AB94((uint64_t)&byte_1000A3870[i], 7u, (uint64_t)v6);
        int v5 = *(void (**)(char *, uint64_t))&byte_1000A3870[i + 128];
        if (v5) {
          v5(&byte_1000A3870[i], 2);
        }
      }
      v3[136] |= 0x80u;
      if (dword_1000A4DE4) {
        notify_post("com.apple.system.powermanagement.assertions.anychange");
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR))
  {
    sub_10006B1C4();
  }
}

void sub_1000465B0(int a1)
{
  CFStringRef Value = (char *)CFDictionaryGetValue((CFDictionaryRef)qword_1000A37E0, (const void *)a1);
  if (Value && (uint64_t v3 = Value, Value[136] < 0))
  {
    for (uint64_t i = 0; i != 3200; i += 160)
    {
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      _DWORD v6[2] = sub_10004D890;
      v6[3] = &unk_1000928B8;
      int v7 = a1;
      sub_10004AB94((uint64_t)&byte_1000A3870[i], 8u, (uint64_t)v6);
      int v5 = *(void (**)(char *, uint64_t))&byte_1000A3870[i + 128];
      if (v5) {
        v5(&byte_1000A3870[i], 2);
      }
    }
    v3[136] &= ~0x80u;
    if (dword_1000A4DE4) {
      notify_post("com.apple.system.powermanagement.assertions.anychange");
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR))
  {
    sub_10006B294();
  }
}

void sub_1000466F8(_xpc_connection_s *a1)
{
  uint64_t pid = xpc_connection_get_pid(a1);
  if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEBUG)) {
    sub_10006B2FC();
  }
  CFStringRef Value = CFDictionaryGetValue((CFDictionaryRef)qword_1000A37E0, (const void *)(int)pid);
  if (Value)
  {
    if (Value[15]) {
      sub_100046768(pid);
    }
  }
}

void sub_100046768(uint64_t a1)
{
  uint64_t v12 = 0;
  int v13 = &v12;
  uint64_t v14 = 0x2810000000;
  int v15 = &unk_10008DCC2;
  uint64_t v16 = 0;
  CFStringRef Value = CFDictionaryGetValue((CFDictionaryRef)qword_1000A37E0, (const void *)(int)a1);
  uint64_t v3 = Value;
  if (Value)
  {
    Value[136] |= 0x20u;
    CFArrayRef v4 = (void *)*((void *)Value + 15);
    if (v4)
    {
      xpc_release(v4);
      *((void *)v3 + 15) = 0;
    }
  }
  sub_10004C0C8(a1, "com.apple.system.powermanagement.assertions.anychange", 2);
  sub_10004C0C8(a1, "com.apple.system.powermanagement.assertions.timeout", 2);
  sub_10004C0C8(a1, "com.apple.system.powermanagement.assertions", 2);
  sub_10004C450(a1, 0);
  for (uint64_t i = 0; i != 20; ++i)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    _DWORD v10[2] = sub_100052064;
    v10[3] = &unk_100092C20;
    int v11 = a1;
    v10[4] = &v12;
    sub_10004AB94((uint64_t)&unk_1000A3870 + 160 * i, 0xFu, (uint64_t)v10);
    int v6 = (void (*)(char *, uint64_t))*((void *)&unk_1000A3870 + 20 * i + 16);
    if (v6) {
      v6((char *)&unk_1000A3870 + 160 * i, 1);
    }
    for (CFIndex j = (uint64_t *)v13[4]; j; CFIndex j = v9)
    {
      entr_act_end();
      uint64_t v8 = *j;
      if (*j) {
        *(void *)(v8 + 8) = j[1];
      }
      *(void *)j[1] = v8;
      audit_token_t v9 = (uint64_t *)v13[4];
      sub_100051E54(j, 3);
    }
  }
  if (dword_1000A4DE4) {
    notify_post("com.apple.system.powermanagement.assertions.anychange");
  }
  _Block_object_dispose(&v12, 8);
}

void sub_100046970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100046990(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 72);
  int valuePtr = 0;
  if (*(void *)(v1 + 120))
  {
    xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
    if (v3)
    {
      CFArrayRef v4 = v3;
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"AsyncClientAssertionId");
      CFTypeID TypeID = CFNumberGetTypeID();
      if (Value && CFGetTypeID(Value) == TypeID)
      {
        CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
        xpc_dictionary_set_uint64(v4, "assertionTimeout", *(unsigned int *)(a1 + 52));
        int v7 = qword_1000A37D8;
        if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
        {
          int v8 = *(_DWORD *)(a1 + 52);
          int v9 = *(_DWORD *)(*(void *)(a1 + 72) + 96);
          *(_DWORD *)uint8_t buf = 67109632;
          int v13 = v8;
          __int16 v14 = 1024;
          int v15 = v9;
          __int16 v16 = 1024;
          int v17 = valuePtr;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Sending assertion timeout message for id 0x%x to %d for 0x%x\n", buf, 0x14u);
        }
        xpc_connection_send_message(*(xpc_connection_t *)(v1 + 120), v4);
        uint64_t v10 = *(void *)(a1 + 72);
        if (*(void *)(v10 + 144)) {
          *(void *)(v10 + 144) = 0;
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR))
      {
        sub_10006B3D4();
      }
      xpc_release(v4);
    }
    else if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR))
    {
      sub_10006B364();
    }
  }
}

void sub_100046B60(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 136) & 0x20) == 0 && os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
    sub_10006B440();
  }
  sub_100046048(*(_DWORD *)(a1 + 96));
}

void sub_100046BB8(uint64_t a1, void *a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  int v5 = qword_1000A37D8;
  if (v4)
  {
    int v6 = v4;
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(a1 + 96);
      v10[0] = 67109120;
      v10[1] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Sending assertion check message to pid %d\n", (uint8_t *)v10, 8u);
    }
    xpc_dictionary_set_uint64(v6, "assertionCheck", 0);
    xpc_dictionary_set_uint64(v6, "assertionCheckToken", qword_1000A4D70);
    int v8 = *(_xpc_connection_s **)(a1 + 120);
    int v9 = sub_10005C968();
    xpc_connection_send_message_with_reply(v8, v6, v9, a2);
    xpc_release(v6);
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR))
  {
    sub_10006B4A8();
  }
}

void sub_100046CF4(void *a1, int a2)
{
  uint64_t uint64 = xpc_dictionary_get_uint64(a1, "assertionCheckToken");
  int v5 = xpc_dictionary_get_uint64(a1, "assertionCheckCount");
  uint64_t v6 = qword_1000A4D70;
  if (uint64 == qword_1000A4D70)
  {
    if (a2)
    {
      int v7 = v5;
      CFNumberRef Value = (int *)CFDictionaryGetValue((CFDictionaryRef)qword_1000A37E0, (const void *)a2);
      if (Value)
      {
        int v9 = Value;
        if (CFSetContainsValue((CFSetRef)qword_1000A4D78, Value))
        {
          dword_1000A4D80 += v7;
          uint64_t v10 = qword_1000A37D8;
          if (v7)
          {
            if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
            {
              int v13 = 67109376;
              int v14 = a2;
              __int16 v15 = 1024;
              LODWORD(v16) = v7;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received active assertion from %d:%d blocking sleep", (uint8_t *)&v13, 0xEu);
            }
          }
          else if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEBUG))
          {
            sub_10006B62C();
          }
          CFSetRemoveValue((CFMutableSetRef)qword_1000A4D78, v9);
          sub_100046048(v9[24]);
          if (CFSetGetCount((CFSetRef)qword_1000A4D78))
          {
            if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEBUG)) {
              sub_10006B5B8();
            }
          }
          else
          {
            sub_10005F730(qword_1000A4D70, dword_1000A4D80 == 0);
            qword_1000A4D70 = 0;
            dword_1000A4D80 = 0;
          }
        }
        else
        {
          uint64_t v12 = qword_1000A37D8;
          if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
          {
            int v13 = 67109120;
            int v14 = a2;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Reply from pid:%d no longer considered pending. Reply likely came after timeout.\n", (uint8_t *)&v13, 8u);
          }
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR))
      {
        sub_10006B544();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR))
    {
      sub_10006B510();
    }
  }
  else
  {
    int v11 = qword_1000A37D8;
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR))
    {
      int v13 = 67109632;
      int v14 = a2;
      __int16 v15 = 2048;
      uint64_t v16 = uint64;
      __int16 v17 = 2048;
      uint64_t v18 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Unexpected assertion check response from pid %d. token: %ld expected: %ld\n", (uint8_t *)&v13, 0x1Cu);
    }
  }
}

void sub_100046FBC(intptr_t a1)
{
  int v2 = qword_1000A37D8;
  if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint8_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Check for async assertions", buf, 2u);
  }
  CFSetRef Mutable = (const __CFSet *)qword_1000A4D78;
  if (!qword_1000A4D78)
  {
    CFSetRef Mutable = CFSetCreateMutable(0, 0, 0);
    qword_1000A4D78 = (uint64_t)Mutable;
    if (!Mutable)
    {
      if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
        sub_10006B694();
      }
      goto LABEL_9;
    }
  }
  if (qword_1000A4D70 || CFSetGetCount(Mutable))
  {
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
      sub_10006B730();
    }
LABEL_9:
    sub_10005F730(a1, 1);
    return;
  }
  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)qword_1000A37E0);
  int v5 = (const void **)malloc_type_malloc(8 * Count, 0x74F296DCuLL);
  if (!v5)
  {
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
      sub_10006B6C8();
    }
    goto LABEL_9;
  }
  uint64_t v6 = (uint64_t *)v5;
  qword_1000A4D70 = a1;
  dword_1000A4D80 = 0;
  CFDictionaryGetKeysAndValues((CFDictionaryRef)qword_1000A37E0, 0, v5);
  if (Count >= 1)
  {
    int v7 = v6;
    do
    {
      uint64_t v8 = *v7;
      if (!*v7) {
        break;
      }
      if (*(void *)(v8 + 120) && (*(unsigned char *)(v8 + 136) & 0xA0) == 0)
      {
        sub_100045D68(*(_DWORD *)(v8 + 96));
        CFSetAddValue((CFMutableSetRef)qword_1000A4D78, (const void *)v8);
        int v9 = *(_DWORD *)(v8 + 96);
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 3221225472;
        void v15[2] = sub_1000472D0;
        v15[3] = &unk_1000926B0;
        int v16 = v9;
        sub_100046BB8(v8, v15);
      }
      ++v7;
      --Count;
    }
    while (Count);
  }
  if (!CFSetGetCount((CFSetRef)qword_1000A4D78))
  {
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
      sub_10006B6FC();
    }
    sub_10005F730(a1, 1);
    qword_1000A4D70 = 0;
    dword_1000A4D80 = 0;
  }
  uint64_t v10 = qword_1000A4D88;
  if (!qword_1000A4D88)
  {
    int v11 = sub_10005C968();
    qword_1000A4D88 = (uint64_t)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v11);
    dispatch_source_set_event_handler((dispatch_source_t)qword_1000A4D88, &stru_1000926D0);
    dispatch_source_set_cancel_handler((dispatch_source_t)qword_1000A4D88, &stru_1000926F0);
    uint64_t v12 = qword_1000A4D88;
    dispatch_time_t v13 = dispatch_time(0, 5000000000);
    dispatch_source_set_timer(v12, v13, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_resume((dispatch_object_t)qword_1000A4D88);
    uint64_t v10 = qword_1000A4D88;
  }
  dispatch_time_t v14 = dispatch_time(0, 5000000000);
  dispatch_source_set_timer(v10, v14, 0xFFFFFFFFFFFFFFFFLL, 0);
  free(v6);
}

void sub_1000472D0(uint64_t a1, void *a2)
{
}

void sub_1000472E0(id a1)
{
  if (CFSetGetCount((CFSetRef)qword_1000A4D78))
  {
    CFSetApplyFunction((CFSetRef)qword_1000A4D78, (CFSetApplierFunction)sub_100046B60, 0);
    CFSetRemoveAllValues((CFMutableSetRef)qword_1000A4D78);
    sub_10005F730(qword_1000A4D70, dword_1000A4D80 == 0);
    qword_1000A4D70 = 0;
    dword_1000A4D80 = 0;
  }
}

void sub_100047354(id a1)
{
  qword_1000A4D88 = 0;
}

void sub_100047380(uint64_t a1, int a2, void *a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6)
  {
    int v7 = v6;
    if (a2) {
      uint64_t v8 = "assertionUpdateActives";
    }
    else {
      uint64_t v8 = "assertionUpdateActivity";
    }
    xpc_dictionary_set_uint64(v6, v8, 1uLL);
    xpc_dictionary_set_uint64(v7, "assertionCheckToken", dword_1000A4D90);
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEBUG)) {
      sub_10006B7CC();
    }
    int v9 = *(_xpc_connection_s **)(a1 + 120);
    uint64_t v10 = sub_10005C968();
    xpc_connection_send_message_with_reply(v9, v7, v10, a3);
    xpc_release(v7);
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR))
  {
    sub_10006B764();
  }
}

void sub_100047478(void *a1, uint64_t a2, int a3)
{
  if (xpc_get_type(a1) != (xpc_type_t)&_xpc_type_dictionary)
  {
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
      sub_10006B984();
    }
    return;
  }
  int uint64 = xpc_dictionary_get_uint64(a1, "assertionCheckToken");
  int v7 = dword_1000A4D90;
  if (dword_1000A4D90 == uint64)
  {
    CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)qword_1000A37E0, (const void *)(int)a2);
    if (Value)
    {
      int v9 = Value;
      if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEBUG))
      {
        sub_10006B8B4();
        if (a3) {
          goto LABEL_9;
        }
      }
      else if (a3)
      {
LABEL_9:
        if (xpc_dictionary_get_value(a1, "assertionUpdateActives"))
        {
          uint64_t v10 = _CFXPCCreateCFObjectFromXPCObject();
          if (v10)
          {
            int v11 = (const void *)v10;
            CFStringRef v12 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%d", a2);
            CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4D98, v12, v11);
            CFRelease(v11);
            CFRelease(v12);
          }
        }
        goto LABEL_21;
      }
      sub_100045C30((uint64_t)v9, a1);
LABEL_21:
      if (xpc_dictionary_get_BOOL(a1, "assertionActivityUpdateOverflow")) {
        byte_1000A4DA0 = 1;
      }
      CFSetRemoveValue((CFMutableSetRef)qword_1000A4DA8, v9);
      sub_100046048(a2);
      if (!CFSetGetCount((CFSetRef)qword_1000A4DA8))
      {
        if (a3)
        {
          sub_100044318((void *)qword_1000A4D98);
          if (qword_1000A4D98) {
            CFRelease((CFTypeRef)qword_1000A4D98);
          }
        }
        else
        {
          sub_100043EDC(0, byte_1000A4DA0);
        }
        dword_1000A4D90 = 0;
      }
      return;
    }
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
      sub_10006B84C();
    }
  }
  else
  {
    dispatch_time_t v13 = qword_1000A37D8;
    BOOL v14 = os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR);
    if (v7)
    {
      if (v14)
      {
        *(_DWORD *)uint8_t buf = 67109632;
        int v16 = a2;
        __int16 v17 = 1024;
        int v18 = uint64;
        __int16 v19 = 1024;
        int v20 = v7;
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "processAssertionActivityUpdateResp: Unexpected response from pid %d. token: %u expected: %u\n", buf, 0x14u);
      }
    }
    else if (v14)
    {
      sub_10006B91C();
    }
  }
}

BOOL sub_100047724()
{
  return dword_1000A4D90 != 0;
}

uint64_t sub_100047738()
{
  if (dword_1000A4DB0 == -1) {
    uint64_t result = 1;
  }
  else {
    uint64_t result = (dword_1000A4DB0 + 1);
  }
  dword_1000A4DB0 = result;
  return result;
}

void sub_100047750(int a1)
{
  int v2 = qword_1000A37D8;
  if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint8_t buf = 67109120;
    int v22 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Check assertion activity update from clients %d", buf, 8u);
  }
  byte_1000A4DA0 = 0;
  byte_1000A4DC0 = a1;
  if (a1) {
    qword_1000A4D98 = (uint64_t)CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  }
  int v3 = dword_1000A4DB0 + 1;
  if (dword_1000A4DB0 == -1) {
    int v3 = 1;
  }
  dword_1000A4DB0 = v3;
  dword_1000A4D90 = v3;
  if (!qword_1000A4DA8)
  {
    qword_1000A4DA8 = (uint64_t)CFSetCreateMutable(0, 0, 0);
    if (!qword_1000A4DA8)
    {
      if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
        sub_10006B694();
      }
      goto LABEL_35;
    }
  }
  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)qword_1000A37E0);
  int v5 = (const void **)malloc_type_malloc(8 * Count, 0x6D923CA2uLL);
  if (!v5)
  {
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEBUG)) {
      sub_10006B9EC();
    }
LABEL_35:
    if (a1) {
      sub_100044318(0);
    }
    else {
      sub_100043EDC(0, 0);
    }
    dword_1000A4D90 = 0;
    return;
  }
  xpc_object_t v6 = (uint64_t *)v5;
  CFDictionaryGetKeysAndValues((CFDictionaryRef)qword_1000A37E0, 0, v5);
  if (Count >= 1)
  {
    int v7 = v6;
    do
    {
      uint64_t v8 = *v7;
      if (!*v7) {
        break;
      }
      if (*(void *)(v8 + 120) && (*(unsigned char *)(v8 + 136) & 0xA0) == 0)
      {
        sub_100045D68(*(_DWORD *)(v8 + 96));
        CFSetAddValue((CFMutableSetRef)qword_1000A4DA8, (const void *)v8);
        int v11 = *(_DWORD *)(v8 + 96);
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 3221225472;
        v19[2] = sub_100047BD0;
        v19[3] = &unk_1000926B0;
        int v20 = v11;
        sub_100047380(v8, byte_1000A4DC0, v19);
      }
      else
      {
        int v9 = qword_1000A37D8;
        if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEBUG))
        {
          int v10 = *(_DWORD *)(v8 + 96);
          *(_DWORD *)uint8_t buf = 67109120;
          int v22 = v10;
          _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "checkForAsyncAssertionLogging: No remoteConnection for %d", buf, 8u);
        }
      }
      ++v7;
      --Count;
    }
    while (Count);
  }
  if (CFSetGetCount((CFSetRef)qword_1000A4DA8))
  {
    if (!qword_1000A4DB8)
    {
      CFStringRef v12 = sub_10005C968();
      qword_1000A4DB8 = (uint64_t)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v12);
      dispatch_source_set_event_handler((dispatch_source_t)qword_1000A4DB8, &stru_100092710);
      dispatch_source_set_cancel_handler((dispatch_source_t)qword_1000A4DB8, &stru_100092730);
      dispatch_time_t v13 = qword_1000A37D8;
      if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint8_t buf = 67109120;
        int v22 = 5;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "checkForAssertionActivityUpdates : setting timer to fire in %d secs", buf, 8u);
      }
      BOOL v14 = qword_1000A4DB8;
      dispatch_time_t v15 = dispatch_time(0, 5000000000);
      dispatch_source_set_timer(v14, v15, 0xFFFFFFFFFFFFFFFFLL, 0);
      dispatch_resume((dispatch_object_t)qword_1000A4DB8);
    }
    int v16 = qword_1000A37D8;
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint8_t buf = 67109120;
      int v22 = 5;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "checkForAssertionActivityUpdates : setting timer to fire in %d secs", buf, 8u);
    }
    __int16 v17 = qword_1000A4DB8;
    dispatch_time_t v18 = dispatch_time(0, 5000000000);
    dispatch_source_set_timer(v17, v18, 0xFFFFFFFFFFFFFFFFLL, 0);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
      sub_10006BA20();
    }
    if (a1) {
      sub_100044318(0);
    }
    else {
      sub_100043EDC(0, 0);
    }
    dword_1000A4D90 = 0;
  }
  free(v6);
}

void sub_100047BD0(uint64_t a1, void *a2)
{
}

void sub_100047BE8(id a1)
{
  if (!CFSetGetCount((CFSetRef)qword_1000A4DA8)) {
    return;
  }
  uint64_t v1 = qword_1000A37D8;
  if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67109120;
    v8[1] = byte_1000A4DC0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "_sendAssertionActivityUpdate: Timer fired with actives only %d", (uint8_t *)v8, 8u);
  }
  CFSetRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  size_t Count = CFSetGetCount((CFSetRef)qword_1000A4DA8);
  LODWORD(v4) = Count;
  int v5 = (const void **)malloc_type_calloc(Count, 8uLL, 0x2004093837F09uLL);
  CFSetGetValues((CFSetRef)qword_1000A4DA8, v5);
  if ((int)v4 >= 1)
  {
    uint64_t v4 = v4;
    xpc_object_t v6 = v5;
    do
    {
      int v7 = (const void *)*((void *)*v6 + 10);
      if (v7) {
        CFArrayAppendValue(Mutable, v7);
      }
      ++v6;
      --v4;
    }
    while (v4);
  }
  CFSetApplyFunction((CFSetRef)qword_1000A4DA8, (CFSetApplierFunction)sub_100046B60, 0);
  if (byte_1000A4DC0)
  {
    sub_100044318((void *)qword_1000A4D98);
    if (qword_1000A4D98) {
      CFRelease((CFTypeRef)qword_1000A4D98);
    }
    if (!v5) {
      goto LABEL_14;
    }
  }
  else
  {
    sub_100043EDC(Mutable, byte_1000A4DA0);
    if (!v5) {
      goto LABEL_14;
    }
  }
  free(v5);
LABEL_14:
  if (Mutable) {
    CFRelease(Mutable);
  }
  dword_1000A4D90 = 0;
  CFSetRemoveAllValues((CFMutableSetRef)qword_1000A4DA8);
}

void sub_100047DAC(id a1)
{
  qword_1000A4DB8 = 0;
}

uint64_t sub_100047DD8(uint64_t a1, _OWORD *a2, const UInt8 *a3, unsigned int a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, int *a8)
{
  pid_t pidp = -1;
  gid_t rgidp = -1;
  uid_t ruidp = -1;
  uint64_t v24 = 0;
  long long v15 = a2[1];
  *(_OWORD *)atoken.val = *a2;
  *(_OWORD *)&atoken.val[4] = v15;
  audit_token_to_au32(&atoken, 0, 0, 0, &ruidp, &rgidp, &pidp, 0, 0);
  *a5 = 0;
  *a6 = 0;
  *a7 = 0;
  vm_size_t v16 = a4;
  CFDataRef v17 = CFDataCreateWithBytesNoCopy(0, a3, a4, kCFAllocatorNull);
  if (v17 && (CFDataRef v18 = v17, v19 = CFPropertyListCreateWithData(0, v17, 1uLL, 0, 0), CFRelease(v18), v19))
  {
    long long v20 = a2[1];
    *(_OWORD *)atoken.val = *a2;
    *(_OWORD *)&atoken.val[4] = v20;
    if (sub_100044DCC(&atoken, (const __CFDictionary *)v19))
    {
      if (!sub_100044FD8((const __CFDictionary *)v19) || sub_10005D678(ruidp) || sub_10005E308(ruidp))
      {
        int v21 = sub_100045028(pidp, v19, a5, &v24, a7);
      }
      else
      {
        int v21 = -536870207;
        if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
          sub_10006BABC();
        }
      }
    }
    else
    {
      int v21 = -536870207;
      if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
        sub_10006BB24();
      }
    }
    *a8 = v21;
    CFRelease(v19);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
      sub_10006BA54();
    }
    *a8 = -536870206;
  }
  vm_deallocate(mach_task_self_, (vm_address_t)a3, v16);
  return 0;
}

uint64_t sub_100047FEC(int a1, _OWORD *a2, int a3, const UInt8 *a4, unsigned int a5, _DWORD *a6, _DWORD *a7, _DWORD *a8, int *a9)
{
  pid_t pidp = -1;
  long long v16 = a2[1];
  int v17 = -536870207;
  *(_OWORD *)atoken.val = *a2;
  *(_OWORD *)&atoken.val[4] = v16;
  audit_token_to_au32(&atoken, 0, 0, 0, 0, 0, &pidp, 0, 0);
  *a6 = 0;
  *a7 = 0;
  *a8 = 0;
  vm_size_t v18 = a5;
  CFDataRef v19 = CFDataCreateWithBytesNoCopy(0, a4, a5, kCFAllocatorNull);
  if (v19
    && (CFDataRef v20 = v19,
        CFDictionaryRef v21 = (const __CFDictionary *)CFPropertyListCreateWithData(0, v19, 0, 0, 0),
        CFRelease(v20),
        v21))
  {
    long long v22 = a2[1];
    *(_OWORD *)atoken.val = *a2;
    *(_OWORD *)&atoken.val[4] = v22;
    if (sub_100044DCC(&atoken, v21)) {
      int v17 = sub_10004587C(pidp, a3, v21, a8);
    }
    *a9 = v17;
    CFRelease(v21);
  }
  else
  {
    *a9 = -536870206;
  }
  vm_deallocate(mach_task_self_, (vm_address_t)a4, v18);
  return 0;
}

uint64_t sub_100048150(uint64_t a1, _OWORD *a2, int a3, int a4, int *a5, _DWORD *a6, _DWORD *a7, _DWORD *a8)
{
  pid_t pidp = -1;
  long long v14 = a2[1];
  *(_OWORD *)atoken.val = *a2;
  *(_OWORD *)&atoken.val[4] = v14;
  audit_token_to_au32(&atoken, 0, 0, 0, 0, 0, &pidp, 0, 0);
  *a6 = 0;
  *a7 = 0;
  *a5 = 0;
  if (a4 == 1)
  {
    *(void *)atoken.val = 0;
    int v15 = sub_1000454A8(pidp, a3, (void **)&atoken);
    if (!v15)
    {
      int v16 = *(_DWORD *)(*(void *)atoken.val + 60) + 1;
      *(_DWORD *)(*(void *)atoken.val + 6sub_100048D14(0x12u, 0) = v16;
      *a5 = v16;
      if (dword_1000A4DE4) {
        notify_post("com.apple.system.powermanagement.assertions.anychange");
      }
    }
  }
  else
  {
    int v15 = sub_100045534(pidp, a3, a5);
  }
  *a8 = v15;
  return 0;
}

uint64_t sub_10004824C(int a1, _OWORD *a2, int a3, int a4, const UInt8 *address, vm_size_t size, vm_address_t *a7, unsigned int *a8, int *a9)
{
  unsigned int v11 = size;
  pid_t pidp = -1;
  *a8 = 0;
  *a7 = 0;
  *a9 = -536870160;
  switch(a4)
  {
    case 1:
      long long v14 = a2[1];
      *(_OWORD *)atoken.val = *a2;
      *(_OWORD *)&atoken.val[4] = v14;
      audit_token_to_au32(&atoken, 0, 0, 0, 0, 0, &pidp, 0, 0);
      *(void *)atoken.val = 0;
      if (sub_1000454A8(pidp, a3, (void **)&atoken))
      {
        CFDictionaryRef v15 = 0;
        int v16 = -536870160;
      }
      else
      {
        __int16 v31 = (CFDictionaryRef *)(*(void *)atoken.val + 16);
        CFRetain(*(CFTypeRef *)(*(void *)atoken.val + 16));
        int v16 = 0;
        CFDictionaryRef v15 = *v31;
      }
      *a9 = v16;
      if (v15) {
        goto LABEL_25;
      }
      goto LABEL_17;
    case 2:
      int v17 = 0;
      goto LABEL_15;
    case 3:
      uint64_t v18 = 0;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      memset(&atoken, 0, sizeof(atoken));
      do
      {
        LODWORD(valuePtr) = (dword_1000A4DEC >> v18) & 1;
        *(void *)&atoken.val[2 * v18++] = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      }
      while (v18 != 20);
      CFDictionaryRef v15 = CFDictionaryCreate(0, (const void **)qword_1000A4E20, (const void **)&atoken, 20, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      for (uint64_t i = 0; i != 40; i += 2)
        CFRelease(*(CFTypeRef *)&atoken.val[i]);
      goto LABEL_24;
    case 4:
      CFDataRef v20 = sub_10002D5B8();
      goto LABEL_16;
    case 5:
      CFDataRef v20 = sub_10002A950();
      goto LABEL_16;
    case 6:
      CFDataRef v21 = CFDataCreateWithBytesNoCopy(0, address, size, kCFAllocatorNull);
      if (v21)
      {
        CFDataRef v22 = v21;
        CFPropertyListRef v23 = CFPropertyListCreateWithData(0, v21, 0, 0, 0);
        CFRelease(v22);
      }
      else
      {
        CFPropertyListRef v23 = 0;
      }
      uint64_t valuePtr = 0;
      p_uint64_t valuePtr = &valuePtr;
      uint64_t v35 = 0x2020000000;
      uint64_t v36 = 0;
      int v25 = sub_100048944(v23);
      if (v25 == -1)
      {
        CFDictionaryRef v15 = 0;
      }
      else
      {
        *(void *)atoken.val = _NSConcreteStackBlock;
        *(void *)&atoken.val[2] = 3221225472;
        *(void *)&atoken.val[4] = sub_100052A98;
        *(void *)&atoken.val[6] = &unk_100092778;
        *(void *)&long long v38 = &valuePtr;
        sub_10004AB94((uint64_t)&byte_1000A3870[160 * v25], 3u, (uint64_t)&atoken);
        CFDictionaryRef v15 = (CFDictionaryRef)p_valuePtr[3];
      }
      _Block_object_dispose(&valuePtr, 8);
      if (v23) {
        CFRelease(v23);
      }
LABEL_24:
      if (v15) {
        goto LABEL_25;
      }
      goto LABEL_17;
    case 7:
      int v17 = 1;
LABEL_15:
      CFDataRef v20 = sub_100048664(v17);
LABEL_16:
      CFDictionaryRef v15 = v20;
      if (!v20) {
        goto LABEL_17;
      }
LABEL_25:
      CFDataRef Data = CFPropertyListCreateData(0, v15, kCFPropertyListBinaryFormat_v1_0, 0, 0);
      CFRelease(v15);
      if (Data)
      {
        unsigned int Length = CFDataGetLength(Data);
        *a8 = Length;
        vm_allocate(mach_task_self_, a7, Length, 1);
        CFDateRef v28 = (void *)*a7;
        BytePtr = CFDataGetBytePtr(Data);
        memcpy(v28, BytePtr, *a8);
        CFRelease(Data);
        int v24 = 0;
      }
      else
      {
        int v24 = -536870199;
      }
      break;
    default:
LABEL_17:
      int v24 = 0;
      *a8 = 0;
      *a7 = 0;
      break;
  }
  *a9 = v24;
  if (address && v11) {
    vm_deallocate(mach_task_self_, (vm_address_t)address, v11);
  }
  return 0;
}

void sub_100048628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__CFArray *sub_100048664(int a1)
{
  CFDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  for (uint64_t i = 0; i != 3200; i += 160)
  {
    if (i != 960)
    {
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      _DWORD v11[2] = sub_100052B34;
      v11[3] = &unk_100092C40;
      int v12 = a1;
      void v11[4] = Mutable;
      sub_10004AB94((uint64_t)&byte_1000A3870[i], 0xFu, (uint64_t)v11);
    }
  }
  CFIndex Count = CFDictionaryGetCount(Mutable);
  int v5 = (const void **)malloc_type_malloc(8 * Count, 0x6004044C4A2DFuLL);
  if (!v5)
  {
    int v7 = 0;
    if (!Mutable) {
      return v7;
    }
    goto LABEL_10;
  }
  xpc_object_t v6 = v5;
  CFDictionaryGetKeysAndValues(Mutable, 0, v5);
  int v7 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  if (Count >= 1)
  {
    uint64_t v8 = v6;
    do
    {
      int v9 = *v8++;
      CFArrayAppendValue(v7, v9);
      --Count;
    }
    while (Count);
  }
  free(v6);
  if (Mutable) {
LABEL_10:
  }
    CFRelease(Mutable);
  return v7;
}

uint64_t sub_1000487E8(uint64_t a1, _OWORD *a2, const char *a3, int a4, _DWORD *a5)
{
  uid_t euidp = 0;
  *a5 = -536870212;
  long long v8 = a2[1];
  *(_OWORD *)atoken.val = *a2;
  *(_OWORD *)&atoken.val[4] = v8;
  audit_token_to_au32(&atoken, 0, &euidp, 0, 0, 0, 0, 0, 0);
  if (euidp)
  {
    *a5 = -536870207;
    return 0;
  }
  if (!a3 || !*a3)
  {
    CFStringGetTypeID();
    return 0;
  }
  CFStringRef v9 = CFStringCreateWithCString(0, a3, 0x8000100u);
  CFTypeID TypeID = CFStringGetTypeID();
  if (v9)
  {
    if (CFGetTypeID(v9) == TypeID)
    {
      unsigned int v11 = sub_100048944(v9);
      if ((v11 & 0x80000000) == 0)
      {
        *a5 = 0;
        if (a4 == 2)
        {
          int v12 = &byte_1000A3870[160 * v11];
          int v15 = *((_DWORD *)v12 + 34);
          dispatch_time_t v13 = v12 + 136;
          int v14 = v15;
          if (v15) {
            _DWORD *v13 = v14 - 1;
          }
          goto LABEL_15;
        }
        if (a4 == 1)
        {
          ++*(_DWORD *)&byte_1000A3870[160 * v11 + 136];
LABEL_15:
          sub_100048D14(v11, 0);
          goto LABEL_16;
        }
      }
      *a5 = -536870206;
    }
LABEL_16:
    CFRelease(v9);
  }
  return 0;
}

uint64_t sub_100048944(const void *a1)
{
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFTypeID TypeID = CFStringGetTypeID();
  if (a1)
  {
    if (CFGetTypeID(a1) == TypeID)
    {
      CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)qword_1000A4DF8, a1);
      CFTypeID v5 = CFNumberGetTypeID();
      if (!Value) {
        return 0xFFFFFFFFLL;
      }
      if (CFGetTypeID(Value) != v5) {
        return 0xFFFFFFFFLL;
      }
      CFNumberGetValue((CFNumberRef)Value, kCFNumberIntType, &valuePtr);
      uint64_t v2 = valuePtr;
      if (valuePtr >= 0x14) {
        return 0xFFFFFFFFLL;
      }
    }
  }
  return v2;
}

void sub_1000489EC(unsigned int a1)
{
}

void sub_100048A10(unsigned int a1)
{
  uint64_t v1 = (char *)&unk_1000A3870 + 160 * a1;
  int v4 = *((_DWORD *)v1 + 34);
  uint64_t v2 = v1 + 136;
  int v3 = v4;
  if (v4) {
    *uint64_t v2 = v3 - 1;
  }
  sub_100048D14(a1, 0);
}

uint64_t sub_100048A38()
{
  return dword_1000A4DC4;
}

void sub_100048A44()
{
  uint64_t input = 1;
  int v0 = dword_1000A4DC4;
  if (dword_1000A4DC4)
  {
LABEL_6:
    dword_1000A4DC4 = v0 | 0x100;
    return;
  }
  mach_port_t v1 = sub_100040BE8();
  uint64_t v2 = qword_1000A37D8;
  if (v1)
  {
    mach_port_t v3 = v1;
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint8_t buf = 134217984;
      uint64_t v6 = 1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Setting ClamshellSleepState to %lld\n", buf, 0xCu);
    }
    IOConnectCallMethod(v3, 0xCu, &input, 1u, 0, 0, 0, 0, 0, 0);
    int v0 = dword_1000A4DC4;
    goto LABEL_6;
  }
  if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
    sub_10006BB8C();
  }
}

void sub_100048B5C()
{
  unint64_t v0 = sub_10005E2A8();
  nullsub_4(1, v1);
  if (v0 - qword_1000A4DC8 > 0x1D || (sub_10005F7DC() & 1) != 0 || !sub_10005A620())
  {
    if ((sub_10005F7DC() & 1) == 0 && (sub_10005A620() & 1) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEBUG)) {
        sub_10006BC90();
      }
      sub_10005AC4C(1);
    }
    mach_port_t v3 = sub_100040BE8();
    if (v3)
    {
      if (IOConnectCallMethod(v3, 0xAu, 0, 0, 0, 0, 0, 0, 0, 0))
      {
        if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
          sub_10006BC28();
        }
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEBUG)) {
          sub_10006BBF4();
        }
        qword_1000A4DC8 = v0;
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR))
    {
      sub_10006BBC0();
    }
  }
  else
  {
    uint64_t v2 = qword_1000A37D8;
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEBUG)) {
      sub_10006BCC4(v0, v2);
    }
  }
}

void sub_100048CC0()
{
  unsigned int v0 = sub_100054DEC(@"DarkWakeBackgroundTasks");
  if (dword_1000A347C != v0)
  {
    dword_1000A347C = v0;
    sub_100048D14(0xBu, 0);
  }
}

void sub_100048D14(unsigned int a1, int a2)
{
  unsigned int valuePtr = a1;
  if (qword_1000A4DF8)
  {
    int v4 = (int *)((char *)&unk_1000A3870 + 160 * a1);
    if (a2)
    {
      CFTypeID v5 = 0;
      int v6 = 0;
      int v7 = 0;
    }
    else
    {
      long long v8 = (char *)&unk_1000A3870 + 160 * a1;
      CFTypeID v5 = (void (*)(int *, uint64_t))*((void *)v8 + 16);
      int v6 = *v4;
      int v7 = *((_DWORD *)v8 + 26);
    }
    int v63 = 0;
    *((_DWORD *)&unk_1000A3870 + 40 * a1 + 1sub_100048D14(0x12u, 0) = a1;
    switch(a1)
    {
      case 0u:
        CFNumberRef v9 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4DF8, @"CPUBoundAssertion", v9);
        int v10 = (char *)&unk_1000A3870 + 160 * a1;
        *((void *)v10 + 16) = sub_10004EB3C;
        *((_DWORD *)v10 + 39) = 0;
        int v11 = 8;
        goto LABEL_53;
      case 1u:
        CFNumberRef v9 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4DF8, @"PreventUserIdleSystemSleep", v9);
        CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4DF8, @"NoIdleSleepAssertion", v9);
        int v12 = (char *)&unk_1000A3870 + 160 * a1;
        *((void *)v12 + 16) = sub_10004EB3C;
        *((_DWORD *)v12 + 39) = 0x10000;
        int v13 = *v4 | 8;
        goto LABEL_25;
      case 2u:
        int v11 = 9;
        CFNumberRef v9 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4DF8, @"DisableInflow", v9);
        int v14 = (char *)&unk_1000A3870 + 160 * a1;
        int v15 = sub_10004DDB8;
        goto LABEL_41;
      case 3u:
        CFNumberRef v9 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4DF8, @"ChargeInhibit", v9);
        int v16 = (char *)&unk_1000A3870 + 160 * a1;
        *((void *)v16 + 16) = sub_10004DDB8;
        *((_DWORD *)v16 + 39) = 0;
        int v11 = 10;
        goto LABEL_53;
      case 4u:
        CFNumberRef v9 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4DF8, @"DisableLowPowerBatteryWarnings", v9);
        int v17 = (char *)&unk_1000A3870 + 160 * a1;
        *((void *)v17 + 16) = sub_10004DDB8;
        *((_DWORD *)v17 + 39) = 0;
        int v11 = 11;
        goto LABEL_53;
      case 5u:
        CFNumberRef v9 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4DF8, @"PreventUserIdleDisplaySleep", v9);
        CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4DF8, @"NoDisplaySleepAssertion", v9);
        int v11 = 0;
        uint64_t v18 = (char *)&unk_1000A3870 + 160 * a1;
        *((void *)v18 + 16) = sub_10004DF98;
        *((_DWORD *)v18 + 39) = 0x20000;
        *v4 |= 0x28u;
        goto LABEL_53;
      case 6u:
        CFNumberRef v9 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4DF8, @"EnableIdleSleep", v9);
        CFDataRef v19 = (char *)&unk_1000A3870 + 160 * a1;
        *((void *)v19 + 16) = sub_10004ECC4;
        *((_DWORD *)v19 + 39) = 0;
        int v11 = 7;
        goto LABEL_53;
      case 7u:
        CFNumberRef v9 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4DF8, @"PreventSystemSleep", v9);
        CFDataRef v20 = (__CFDictionary *)qword_1000A4DF8;
        CFStringRef v21 = @"DenySystemSleep";
        goto LABEL_27;
      case 8u:
        CFNumberRef v9 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4DF8, @"ExternalMedia", v9);
        CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4DF8, @"PreventStandby", v9);
        CFDataRef v22 = (char *)&unk_1000A3870 + 160 * a1;
        *((void *)v22 + 16) = sub_10004DF98;
        *((_DWORD *)v22 + 39) = 0;
        *v4 |= 0x20u;
        int v11 = 4;
        goto LABEL_53;
      case 9u:
        CFNumberRef v9 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4DF8, @"UserIsActive", v9);
        CFPropertyListRef v23 = (char *)&unk_1000A3870 + 160 * a1;
        *((void *)v23 + 16) = sub_10004DF98;
        *((_DWORD *)v23 + 39) = 131074;
        *v4 |= 0x28u;
        int v11 = 3;
        goto LABEL_53;
      case 0xAu:
        if sub_10003F9DC() && (sub_10002CEA8())
        {
          p_unsigned int valuePtr = (int *)&valuePtr;
        }
        else
        {
          int v63 = 11;
          p_unsigned int valuePtr = &v63;
        }
        CFNumberRef v9 = CFNumberCreate(0, kCFNumberIntType, p_valuePtr);
        CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4DF8, @"ApplePushServiceTask", v9);
        int v11 = 0;
        *v4 |= 0xAu;
        int v14 = (char *)&unk_1000A3870 + 160 * a1;
        int v15 = sub_10004DF98;
LABEL_41:
        *((void *)v14 + 16) = v15;
        goto LABEL_52;
      case 0xBu:
        CFNumberRef v9 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4DF8, @"BackgroundTask", v9);
        *v4 |= 9u;
        unsigned int v25 = sub_100055928();
        int v26 = (void (**)(uint64_t, int))((char *)&unk_1000A3870 + 160 * a1 + 128);
        if (v25)
        {
          const void *v26 = sub_10004DF98;
          char v27 = sub_10003F980();
          if (v27)
          {
            if (byte_1000A4DF5)
            {
              CFDateRef v28 = (char *)&unk_1000A3870 + 160 * a1;
              int v31 = *((_DWORD *)v28 + 34);
              char v29 = v28 + 136;
              int v30 = v31;
              if (v31) {
                _DWORD *v29 = v30 - 1;
              }
              goto LABEL_49;
            }
          }
          else if ((byte_1000A4DF5 & 1) == 0)
          {
            ++*((_DWORD *)&unk_1000A3870 + 40 * a1 + 34);
LABEL_49:
            byte_1000A4DF5 = v27 ^ 1;
          }
          *v4 &= ~0x20u;
          goto LABEL_51;
        }
        const void *v26 = sub_10004EB3C;
        if (byte_1000A4DF5 == 1)
        {
          long long v41 = (char *)&unk_1000A3870 + 160 * a1;
          int v44 = *((_DWORD *)v41 + 34);
          long long v42 = v41 + 136;
          int v43 = v44;
          if (v44) {
            _DWORD *v42 = v43 - 1;
          }
        }
LABEL_51:
        int v11 = 0;
        int v14 = (char *)&unk_1000A3870 + 160 * a1;
LABEL_52:
        *((_DWORD *)v14 + 39) = 0;
LABEL_53:
        if (v9) {
          CFRelease(v9);
        }
        if (*((_DWORD *)&unk_1000A3870 + 40 * a1 + 34)) {
          unsigned int v45 = 0;
        }
        else {
          unsigned int v45 = v11;
        }
        if (a2)
        {
          CFMutableStringRef v46 = (char *)&unk_1000A3870 + 160 * a1;
          int v47 = (int **)((char *)&unk_1000A4518 + 16 * v45);
          CFStringRef v48 = *v47;
          *((void *)v46 + 14) = *v47;
          pid_t v49 = v46 + 112;
          *((_DWORD *)v49 - 2) = v45;
          if (v48) {
            *((void *)v48 + 15) = v49;
          }
          NSObject *v47 = v4;
          *((void *)&unk_1000A3870 + 20 * a1 + 15) = v47;
        }
        else
        {
          CFDictionaryRef v50 = (char *)&unk_1000A3870 + 160 * a1;
          double v52 = (void (*)(int *, uint64_t))*((void *)v50 + 16);
          CFDictionaryRef v51 = (void (**)(int *, uint64_t))(v50 + 128);
          int v53 = *v4;
          if (v5 == v52 && v7 == v45)
          {
            if (v5 && v6 != v53) {
              v5(v4, 2);
            }
          }
          else
          {
            CFBooleanRef v54 = (char *)&unk_1000A3870 + 160 * a1;
            uint64_t v57 = *((void *)v54 + 14);
            CFTypeID v56 = (int **)(v54 + 112);
            uint64_t v55 = v57;
            if (v57) {
              *(void *)(v55 + 12sub_100048D14(0x12u, 0) = *((void *)&unk_1000A3870 + 20 * a1 + 15);
            }
            id v58 = (char *)&unk_1000A3870 + 160 * a1;
            CFBooleanRef v60 = (void *)*((void *)v58 + 15);
            pid_t v59 = (int ***)(v58 + 120);
            void *v60 = v55;
            v5(v4, 2);
            int *v4 = v53;
            if (dword_1000A37F8 && v7 != v45) {
              sub_10004AB94((uint64_t)v4, 3u, (uint64_t)&stru_1000928F8);
            }
            *((_DWORD *)&unk_1000A3870 + 40 * a1 + 26) = v45;
            CFNumberRef v61 = (int **)((char *)&unk_1000A4518 + 16 * v45);
            CFNumberRef v62 = *v61;
            *CFTypeID v56 = *v61;
            if (v62) {
              *((void *)v62 + 15) = v56;
            }
            *CFNumberRef v61 = v4;
            *pid_t v59 = v61;
            if (v45) {
              (*v51)(v4, 2);
            }
            if (dword_1000A37F8 && v7 != v45) {
              sub_10004AB94((uint64_t)v4, 3u, (uint64_t)&stru_100092918);
            }
          }
        }
        break;
      case 0xCu:
        CFNumberRef v9 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4DF8, @"SystemIsActive", v9);
        BOOL v32 = (char *)&unk_1000A3870 + 160 * a1;
        *((void *)v32 + 16) = sub_10004EB3C;
        *((_DWORD *)v32 + 39) = 0x10000;
        int v13 = *v4 | 0x28;
LABEL_25:
        int *v4 = v13;
        int v11 = 1;
        goto LABEL_53;
      case 0xDu:
        CFNumberRef v9 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4DF8, @"InternalPreventSleep", v9);
        CFDataRef v20 = (__CFDictionary *)qword_1000A4DF8;
        CFStringRef v21 = @"MaintenanceWake";
LABEL_27:
        CFDictionarySetValue(v20, v21, v9);
        int v11 = 0;
        *v4 |= 0x29u;
        __int16 v33 = (char *)&unk_1000A3870 + 160 * a1;
        *((void *)v33 + 16) = sub_10004DF98;
        int v34 = 65537;
        goto LABEL_31;
      case 0xEu:
        int v63 = 5;
        CFNumberRef v9 = CFNumberCreate(0, kCFNumberIntType, &v63);
        goto LABEL_51;
      case 0xFu:
        CFNumberRef v9 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4DF8, @"PreventDiskIdle", v9);
        uint64_t v35 = (char *)&unk_1000A3870 + 160 * a1;
        *((void *)v35 + 16) = sub_10004EB3C;
        *((_DWORD *)v35 + 39) = 0;
        int v11 = 5;
        goto LABEL_53;
      case 0x10u:
        CFNumberRef v9 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4DF8, @"InternalPreventDisplaySleep", v9);
        CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4DF8, @"RequiresDisplayAudio", v9);
        int v11 = 0;
        __int16 v33 = (char *)&unk_1000A3870 + 160 * a1;
        *((void *)v33 + 16) = sub_10004DF98;
        *v4 |= 0x20u;
        int v34 = 0x20000;
LABEL_31:
        *((_DWORD *)v33 + 39) = v34;
        goto LABEL_53;
      case 0x11u:
        CFNumberRef v9 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4DF8, @"NetworkClientActive", v9);
        *v4 |= 0x28u;
        uint64_t v36 = (char *)&unk_1000A3870 + 160 * a1;
        *((_DWORD *)v36 + 39) = 65537;
        int v37 = sub_100036004();
        int v11 = 0;
        long long v38 = sub_10004EB3C;
        if (v37 == 1) {
          long long v38 = sub_10004DF98;
        }
        *((void *)v36 + 16) = v38;
        *((_DWORD *)v36 + 39) = 0;
        goto LABEL_53;
      case 0x12u:
        if sub_10003F9DC() && (sub_10002CEA8()) {
          int v39 = 10;
        }
        else {
          int v39 = 11;
        }
        int v63 = v39;
        CFNumberRef v9 = CFNumberCreate(0, kCFNumberIntType, &v63);
        CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4DF8, @"InteractivePushServiceTask", v9);
        int v11 = 0;
        int v14 = (char *)&unk_1000A3870 + 160 * a1;
        *((void *)v14 + 8) = @"com.apple.private.iokit.interactive-push";
        goto LABEL_52;
      case 0x13u:
        CFNumberRef v9 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4DF8, @"AwakeOnReservePower", v9);
        *v4 |= 8u;
        long long v40 = (char *)&unk_1000A3870 + 160 * a1;
        *((void *)v40 + 16) = sub_10004EB3C;
        *((void *)v40 + 8) = @"com.apple.private.iokit.reservepower-control";
        int v11 = 1;
        *((_DWORD *)v40 + 39) = 1;
        goto LABEL_53;
      default:
        return;
    }
  }
}

void sub_100049760()
{
  int v3 = 0;
  if (sub_10005EBF0("fmm-wipe-system-status", &v3)) {
    BOOL v0 = 1;
  }
  else {
    BOOL v0 = v3 < 1;
  }
  if (!v0)
  {
    uint64_t v1 = sub_100049814(@"PreventSystemSleep", @"com.apple.powermanagement.fmmdwipe", 0, @"Proxy Assertion during FMMD system wipe", 0, @"TimeoutActionRelease", 120.0);
    if (v1)
    {
      uint64_t v2 = v1;
      CFDictionarySetValue(v1, @"AppliesToLimitedPower", kCFBooleanTrue);
      sub_100049B2C(v2, 0, 0);
      CFRelease(v2);
    }
  }
}

__CFDictionary *sub_100049814(const void *a1, const void *a2, const void *a3, const void *a4, const void *a5, const void *a6, double a7)
{
  int v7 = 0;
  double v20 = a7;
  if (a1)
  {
    if (a2)
    {
      CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      int v7 = Mutable;
      if (Mutable)
      {
        CFDictionarySetValue(Mutable, @"AssertName", a2);
        int valuePtr = 255;
        CFNumberRef v16 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        CFDictionarySetValue(v7, @"AssertLevel", v16);
        CFRelease(v16);
        CFDictionarySetValue(v7, @"AssertType", a1);
        if (a3) {
          CFDictionarySetValue(v7, @"Details", a3);
        }
        if (a4) {
          CFDictionarySetValue(v7, @"HumanReadableReason", a4);
        }
        if (a5) {
          CFDictionarySetValue(v7, @"BundlePath", a5);
        }
        if (a7 != 0.0)
        {
          CFNumberRef v17 = CFNumberCreate(0, kCFNumberDoubleType, &v20);
          CFDictionarySetValue(v7, @"TimeoutSeconds", v17);
          CFRelease(v17);
        }
        if (a6) {
          CFDictionarySetValue(v7, @"TimeoutAction", a6);
        }
      }
    }
  }
  return v7;
}

uint64_t sub_1000499A4(const void *a1, uint64_t a2)
{
  return sub_100049B2C(a1, a2, 0);
}

uint64_t sub_1000499AC()
{
  if (dword_1000A4DD0) {
    return notify_post("com.apple.system.powermanagement.assertions");
  }
  return result;
}

uint64_t sub_1000499C8(const void *a1, int *a2)
{
  CFNumberRef v16 = 0;
  uint64_t v2 = 3758097090;
  if (a1 && a2)
  {
    int v4 = sub_100049814(@"UserIsActive", a1, 0, 0, 0, @"TimeoutActionRelease", 0.0);
    if (v4)
    {
      CFTypeID v5 = v4;
      double valuePtr = (double)(60 * dword_1000A37E8);
      CFNumberRef v6 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
      if (v6)
      {
        CFNumberRef v7 = v6;
        CFDictionarySetValue(v5, @"TimeoutSeconds", v6);
        CFRelease(v7);
      }
      pid_t v8 = getpid();
      if (!sub_1000454A8(v8, *a2, (void **)&v16) && (CFNumberRef v9 = v16) != 0 && *((_DWORD *)v16 + 12) == 9)
      {
        int v14 = 255;
        CFNumberRef v10 = CFNumberCreate(0, kCFNumberIntType, &v14);
        CFDictionarySetValue(v9[2], @"AssertLevel", v10);
        CFRelease(v10);
        pid_t v11 = getpid();
        uint64_t v12 = sub_10004587C(v11, *a2, v5, 0);
      }
      else
      {
        *a2 = 0;
        uint64_t v12 = sub_100049B2C(v5, (uint64_t)a2, 16);
      }
      uint64_t v2 = v12;
      CFRelease(v5);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t sub_100049B2C(const void *a1, uint64_t a2, int a3)
{
  if (!a1) {
    return 3758097090;
  }
  CFRetain(a1);
  CFNumberRef v6 = sub_10005C968();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000513F4;
  block[3] = &unk_100092A88;
  void block[4] = a2;
  void block[5] = a1;
  int v9 = a3;
  dispatch_async(v6, block);
  return 0;
}

void sub_100049BD8(uint64_t a1)
{
  uint64_t v2 = sub_10005C968();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100049C54;
  block[3] = &unk_100091490;
  void block[4] = a1;
  dispatch_async(v2, block);
}

uint64_t sub_100049C54(uint64_t result)
{
  uint64_t v1 = *(_DWORD **)(result + 32);
  if (*v1)
  {
    uint64_t v2 = result;
    pid_t v3 = getpid();
    uint64_t result = sub_100045534(v3, **(_DWORD **)(v2 + 32), 0);
    uint64_t v1 = *(_DWORD **)(v2 + 32);
  }
  _DWORD *v1 = 0;
  return result;
}

void sub_100049C9C()
{
  BOOL v0 = sub_10005C968();

  dispatch_async(v0, &stru_100092750);
}

void sub_100049CCC(id a1)
{
  int v1 = sub_100036004();
  if (v1 == dword_1000A3480) {
    return;
  }
  int v2 = v1;
  uint64_t v3 = 0;
  dword_1000A3480 = v1;
  do
  {
    int v4 = *(void (**)(void))((char *)&unk_1000A3870 + v3 + 128);
    if (v4) {
      v4();
    }
    v3 += 160;
  }
  while (v3 != 3200);
  sub_100048D14(0xBu, 0);
  sub_100048D14(0x11u, 0);
  sub_100048D14(0x12u, 0);
  sub_10004E7D0();
  nullsub_4(v5, v6);
  for (uint64_t i = 0; i != 3200; i += 160)
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    _DWORD v11[2] = sub_100052CAC;
    v11[3] = &unk_100092C40;
    int v12 = v2;
    void v11[4] = (char *)&unk_1000A3870 + i;
    sub_10004AB94((uint64_t)&unk_1000A3870 + i, 3u, (uint64_t)v11);
  }
  pid_t v8 = qword_1000A3808;
  if (qword_1000A3808)
  {
    if (v2)
    {
      if (qword_1000A3810)
      {
        CFRelease((CFTypeRef)qword_1000A3810);
        qword_1000A3810 = 0;
        pid_t v8 = qword_1000A3808;
      }
      dispatch_time_t v9 = dispatch_time(0xFFFFFFFFFFFFFFFFLL, 0);
      dispatch_source_set_timer(v8, v9, 0xFFFFFFFFFFFFFFFFLL, 0);
      goto LABEL_14;
    }
    dispatch_time_t v10 = dispatch_time(0, 0);
    dispatch_source_set_timer(v8, v10, qword_1000A3458, 0);
  }
  else if (v2)
  {
LABEL_14:
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEBUG)) {
      sub_10006BDC0();
    }
    if (byte_1000A3830)
    {
      if (qword_1000A3838) {
        dispatch_source_cancel((dispatch_source_t)qword_1000A3838);
      }
    }
    return;
  }
  if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEBUG)) {
    sub_10006BD8C();
  }
  sub_100050414();
}

void sub_100049ED0(int a1)
{
  char v1 = a1;
  if (a1)
  {
    int v2 = sub_10005C968();
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100049FC4;
    block[3] = &unk_1000918E0;
    char v8 = v1;
    dispatch_async(v2, block);
  }
  else
  {
    dispatch_time_t v3 = dispatch_time(0, qword_1000A3460);
    int v4 = sub_10005C968();
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    _DWORD v5[2] = sub_10004A0C0;
    v5[3] = &unk_1000918E0;
    char v6 = v1;
    dispatch_after(v3, v4, v5);
  }
}

uint64_t sub_100049FC4(uint64_t a1)
{
  return sub_100049FCC(*(unsigned char *)(a1 + 32));
}

uint64_t sub_100049FCC(char a1)
{
  uint64_t result = sub_10005F7DC();
  if (byte_1000A4EEC != result)
  {
    byte_1000A4EEC = result;
    if (result)
    {
      if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEBUG)) {
        sub_10006BDF4();
      }
      for (uint64_t i = 0; i != 3200; i += 160)
        uint64_t result = sub_10004AB94((uint64_t)&byte_1000A3870[i], 3u, (uint64_t)&stru_100092C60);
    }
    else if ((a1 & 1) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEBUG)) {
        sub_10006BE28();
      }
      for (uint64_t j = 0; j != 3200; j += 160)
        uint64_t result = sub_10004AB94((uint64_t)&byte_1000A3870[j], 3u, (uint64_t)&stru_100092C80);
    }
  }
  return result;
}

uint64_t sub_10004A0C0(uint64_t a1)
{
  return sub_100049FCC(*(unsigned char *)(a1 + 32));
}

uint64_t sub_10004A0C8(const void *a1, const void *a2, int a3, _DWORD *a4)
{
  uint64_t result = 3758097090;
  if (a1 && a2 && a4)
  {
    uint64_t result = (uint64_t)sub_100049814(a1, a2, 0, 0, 0, @"TimeoutActionRelease", (double)a3);
    if (result)
    {
      CFNumberRef v7 = (const void *)result;
      uint64_t v8 = getpid();
      sub_100045028(v8, v7, a4, 0, 0);
      CFRelease(v7);
      return 0;
    }
  }
  return result;
}

uint64_t sub_10004A150(int a1)
{
  if (!a1) {
    return 3758097084;
  }
  pid_t v2 = getpid();

  return sub_100045534(v2, a1, 0);
}

uint64_t sub_10004A19C(int a1, double a2)
{
  uint64_t v2 = 3758097084;
  double valuePtr = a2;
  if (!a1) {
    return 3758097090;
  }
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  if (v4)
  {
    CFNumberRef v5 = v4;
    CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (Mutable)
    {
      CFDictionaryRef v7 = Mutable;
      CFDictionarySetValue(Mutable, @"TimeoutSeconds", v5);
      pid_t v8 = getpid();
      uint64_t v2 = sub_10004587C(v8, a1, v7, 0);
      CFRelease(v7);
    }
    CFRelease(v5);
  }
  return v2;
}

void sub_10004A25C()
{
  int valuePtr = 255;
  if (dword_1000A37E8 >= 5) {
    unsigned int v0 = 5;
  }
  else {
    unsigned int v0 = dword_1000A37E8;
  }
  double v1 = (double)v0 * 60.0;
  if (!dword_1000A37E8) {
    double v1 = 300.0;
  }
  double v13 = v1;
  if (dword_1000A4DD4)
  {
    CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFNumberRef v3 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFNumberRef v4 = CFNumberCreate(0, kCFNumberDoubleType, &v13);
    CFNumberRef v5 = v4;
    if (Mutable) {
      BOOL v6 = v3 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6 || v4 == 0)
    {
      if (!Mutable) {
        goto LABEL_22;
      }
    }
    else
    {
      CFDictionarySetValue(Mutable, @"AssertLevel", v3);
      CFDictionarySetValue(Mutable, @"TimeoutSeconds", v5);
      pid_t v11 = getpid();
      sub_10004587C(v11, dword_1000A4DD4, Mutable, 0);
    }
    CFRelease(Mutable);
LABEL_22:
    if (v3) {
      CFRelease(v3);
    }
    if (v5) {
      CFRelease(v5);
    }
    return;
  }
  pid_t v8 = sub_100049814(@"InternalPreventDisplaySleep", @"com.apple.powermanagement.delayDisplayOff", 0, @"Proxy to delay display off", 0, @"TimeoutActionTurnOff", v1);
  if (v8)
  {
    dispatch_time_t v9 = v8;
    uint64_t v10 = getpid();
    sub_100045028(v10, v9, &dword_1000A4DD4, 0, 0);
    CFRelease(v9);
  }
}

void *sub_10004A408(int a1)
{
  uint64_t result = CFDictionaryGetValue((CFDictionaryRef)qword_1000A37E0, (const void *)a1);
  if (result) {
    return (void *)result[10];
  }
  return result;
}

void sub_10004A438(int a1, int a2)
{
  int v15 = 0;
  CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)qword_1000A37E0, (const void *)a1);
  if (Value)
  {
    uint64_t v5 = (uint64_t)Value;
    if ((Value[136] & 0x20) == 0)
    {
      sub_1000454A8(a1, a2, (void **)&v15);
      BOOL v6 = v15;
      if (v15)
      {
        int out_token = 0;
        if (!notify_register_check("com.apple.powermanagement.assertionexception", &out_token))
        {
          notify_set_state(out_token, a1 | (unint64_t)&_mh_execute_header);
          notify_post("com.apple.powermanagement.assertionexception");
          notify_cancel(out_token);
          CFDictionaryRef v7 = qword_1000A37D8;
          if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v8 = v6[2];
            *(_DWORD *)uint8_t buf = 67109378;
            int v17 = a1;
            __int16 v18 = 2112;
            uint64_t v19 = v8;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Single assertion exception on pid %d. Assertion details: %@\n", buf, 0x12u);
          }
        }
        dispatch_time_t v9 = *(const void **)(v5 + 104);
        if (v9)
        {
          CFTypeID TypeID = CFStringGetTypeID();
        }
        else
        {
          dispatch_time_t v9 = (const void *)sub_10004A614(1, v5);
          *(void *)(v5 + 104) = v9;
          CFTypeID TypeID = CFStringGetTypeID();
          if (!v9) {
            return;
          }
        }
        if (CFGetTypeID(v9) == TypeID)
        {
          CFTypeRef v11 = CFRetain(*(CFTypeRef *)(v5 + 104));
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_10004A950;
          block[3] = &unk_100092470;
          void block[4] = v11;
          int v13 = a1;
          dispatch_async((dispatch_queue_t)qword_1000A4DD8, block);
        }
      }
    }
  }
}

uint64_t sub_10004A614(int a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = &v35;
  uint64_t v37 = 0x2020000000;
  int v38 = 0;
  uint64_t v31 = 0;
  BOOL v32 = &v31;
  uint64_t v33 = 0x2020000000;
  int v34 = 0;
  unsigned int v25 = _NSConcreteStackBlock;
  uint64_t v26 = 3221225472;
  char v27 = sub_1000515B8;
  CFDateRef v28 = &unk_100092BB8;
  char v29 = &v35;
  int v30 = &v31;
  if (qword_1000A3800 && !qword_1000A4DD8)
  {
    qword_1000A4DD8 = (uint64_t)dispatch_queue_create("PM Stats offloader", 0);
    if (!qword_1000A4DD8)
    {
      if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
        sub_10006BE5C();
      }
LABEL_26:
      uint64_t v2 = 0;
      goto LABEL_27;
    }
    if (a1 != 1)
    {
      uint64_t v2 = qword_1000A4ED0;
      if (qword_1000A4ED0)
      {
        int v9 = dword_1000A4EDC;
        BOOL v6 = v36;
        int v10 = dword_1000A4EE4;
        CFTypeRef v11 = v32;
      }
      else
      {
        uint64_t v2 = (uint64_t)v27((uint64_t)&v25, 2);
        qword_1000A4ED0 = v2;
        BOOL v6 = v36;
        int v9 = *((_DWORD *)v36 + 6);
        dword_1000A4EDC = v9;
        CFTypeRef v11 = v32;
        int v10 = *((_DWORD *)v32 + 6);
        dword_1000A4EE4 = v10;
        if (!v2) {
          goto LABEL_27;
        }
      }
      *((_DWORD *)v6 + 6) = v9;
      *((_DWORD *)v11 + 6) = v10;
      int v12 = (unsigned int *)(a2 + 132);
      goto LABEL_15;
    }
    uint64_t v2 = qword_1000A4EC8;
    if (qword_1000A4EC8)
    {
      int v5 = dword_1000A4ED8;
      BOOL v6 = v36;
      int v7 = dword_1000A4EE0;
      uint64_t v8 = v32;
LABEL_12:
      *((_DWORD *)v6 + 6) = v5;
      *((_DWORD *)v8 + 6) = v7;
      int v12 = (unsigned int *)(a2 + 128);
LABEL_15:
      if (*((_DWORD *)v6 + 6))
      {
        unint64_t v13 = 0;
        int v14 = 0;
        uint64_t v15 = *v12;
        while (1)
        {
          CFStringRef v16 = *(CFStringRef *)v2;
          CFTypeID TypeID = CFStringGetTypeID();
          if (v16)
          {
            if (CFGetTypeID(v16) == TypeID)
            {
              __int16 v18 = *(const void **)(a2 + 80);
              CFTypeID v19 = CFStringGetTypeID();
              if (v18)
              {
                if (CFGetTypeID(v18) == v19
                  && CFEqual(*(CFStringRef *)v2, *(CFStringRef *)(a2 + 80)))
                {
                  break;
                }
              }
            }
          }
          uint64_t v20 = *(void *)(v2 + 8);
          if (v20)
          {
            if (v20 <= v15)
            {
              uint64_t v22 = (*((_DWORD *)v32 + 6) + ~v14);
              if (v22 == -1) {
                goto LABEL_26;
              }
              CFPropertyListRef v23 = "aggregateassertion";
              if (a1 == 1) {
                CFPropertyListRef v23 = "singleassertion";
              }
              CFStringRef v24 = CFStringCreateWithFormat(0, 0, @"com.apple.powerd.exception.%s.bucket%d", v23, v22, v25, v26);
              goto LABEL_32;
            }
            ++v14;
          }
          ++v13;
          v2 += 24;
          if (v13 >= *((unsigned int *)v36 + 6)) {
            goto LABEL_26;
          }
        }
        if (*(void *)v2)
        {
          CFStringRef v24 = sub_100051AD4(*(const __CFString **)v2, a1);
LABEL_32:
          uint64_t v2 = (uint64_t)v24;
          goto LABEL_27;
        }
      }
      goto LABEL_26;
    }
    uint64_t v2 = (uint64_t)v27((uint64_t)&v25, 1);
    qword_1000A4EC8 = v2;
    BOOL v6 = v36;
    int v5 = *((_DWORD *)v36 + 6);
    dword_1000A4ED8 = v5;
    uint64_t v8 = v32;
    int v7 = *((_DWORD *)v32 + 6);
    dword_1000A4EE0 = v7;
    if (v2) {
      goto LABEL_12;
    }
  }
LABEL_27:
  _Block_object_dispose(&v31, 8);
  _Block_object_dispose(&v35, 8);
  return v2;
}

void sub_10004A924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10004A950(uint64_t a1)
{
  ADClientAddValueForScalarKey();
  uint64_t v2 = qword_1000A37D8;
  if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(_DWORD *)(a1 + 40);
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 1024;
    int v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Add to aggd string %@ for pid %d\n", (uint8_t *)&v5, 0x12u);
  }
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void sub_10004AA18()
{
  uint64_t v0 = 0;
  uint64_t v8 = 0;
  int v9 = &v8;
  uint64_t v10 = 0x2020000000;
  int v11 = 0;
  char v1 = 1;
  do
  {
    char v2 = v1;
    int v3 = dword_100075F48[v0];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10004AC48;
    v7[3] = &unk_100092778;
    void v7[4] = &v8;
    sub_10004AB94((uint64_t)&unk_1000A3870 + 160 * v3, 3u, (uint64_t)v7);
    char v1 = 0;
    uint64_t v0 = 1;
  }
  while ((v2 & 1) != 0);
  if (!dword_1000A4DE0) {
    notify_register_check("com.apple.powermanagement.restartpreventers", &dword_1000A4DE0);
  }
  int v4 = *((_DWORD *)v9 + 6);
  if (v4) {
    BOOL v5 = dword_1000A4510 == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5 || (!v4 ? (BOOL v6 = dword_1000A4510 == 0) : (BOOL v6 = 1), !v6))
  {
    dword_1000A4510 = *((_DWORD *)v9 + 6);
    if (dword_1000A4DE0)
    {
      notify_set_state(dword_1000A4DE0, v4);
      notify_post("com.apple.powermanagement.restartpreventers");
    }
  }
  _Block_object_dispose(&v8, 8);
}

void sub_10004AB78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10004AB94(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = 0;
  long long v6 = *(_OWORD *)(result + 24);
  v9[0] = *(_OWORD *)(result + 8);
  v9[1] = v6;
  do
  {
    if ((a2 >> v5))
    {
      __int16 v7 = (void *)*((void *)v9 + v5);
      if (v7)
      {
        do
        {
          uint64_t v8 = (void *)*v7;
          uint64_t result = (*(uint64_t (**)(uint64_t))(a3 + 16))(a3);
          __int16 v7 = v8;
        }
        while (v8);
      }
    }
    ++v5;
  }
  while (v5 != 4);
  return result;
}

uint64_t sub_10004AC48(uint64_t result, uint64_t a2)
{
  if ((*(_WORD *)(a2 + 104) & 0x100) == 0) {
    ++*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24);
  }
  return result;
}

void sub_10004AC68(uint64_t a1, int a2)
{
  int v2 = dword_1000A44F0;
  int v3 = -dword_1000A44F4;
  int v5 = dword_1000A4504;
  int v4 = dword_1000A4508;
  void v11[4] = a1;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  uint64_t v13 = sub_10004AE28;
  uint64_t v14 = &unk_100091490;
  uint64_t v15 = a1;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  _DWORD v11[2] = sub_10004B0F0;
  v11[3] = &unk_100091490;
  switch(a2)
  {
    case 2:
      sub_10004B0F0((uint64_t)v11);
      v13((uint64_t)v12);
      break;
    case 1:
      sub_10004B0F0((uint64_t)v11);
      break;
    case 0:
      sub_10004AE28((uint64_t)v12);
      break;
  }
  BOOL v6 = v5 != 0;
  __int16 v7 = sub_10005C968();
  dispatch_async(v7, &stru_100092798);
  if ((v2 != v3) != (dword_1000A44F0 + dword_1000A44F4 != 0) || v6 != (dword_1000A4504 != 0))
  {
    uint64_t v8 = sub_10005C968();
    dispatch_async(v8, &stru_1000927B8);
  }
  if ((v4 != 0) != (dword_1000A4508 != 0))
  {
    int v9 = qword_1000A37D8;
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Evaluating new PerfMode on gSysQualifier change.\n", v10, 2u);
    }
    sub_100040984();
  }
}

uint64_t sub_10004AE28(uint64_t a1)
{
  uint64_t value = 0;
  CFArrayRef v2 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)(a1 + 32) + 16), @"ResourcesUsed");
  if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(*(void *)(a1 + 32) + 16), @"AllowsDeviceRestart", (const void **)&value)&& value == kCFBooleanTrue)
  {
    *(_WORD *)(*(void *)(a1 + 32) + 104) |= 0x100u;
  }
  CFTypeID TypeID = CFArrayGetTypeID();
  if (v2)
  {
    if (CFGetTypeID(v2) == TypeID)
    {
      CFIndex Count = CFArrayGetCount(v2);
      if (Count >= 1)
      {
        CFIndex v5 = Count;
        CFIndex v6 = 0;
        while (1)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v2, v6);
          CFTypeID v8 = CFStringGetTypeID();
          if (!ValueAtIndex || CFGetTypeID(ValueAtIndex) != v8) {
            goto LABEL_26;
          }
          if (CFEqual(ValueAtIndex, @"audio-in"))
          {
            uint64_t v9 = *(void *)(a1 + 32);
            if ((*(_WORD *)(v9 + 104) & 0x100) == 0) {
              break;
            }
          }
          if (CFEqual(ValueAtIndex, @"audio-out"))
          {
            *(_WORD *)(*(void *)(a1 + 32) + 104) |= 4u;
            uint64_t v10 = &dword_1000A44F4;
            goto LABEL_25;
          }
          if (CFEqual(ValueAtIndex, @"GPS"))
          {
            *(_WORD *)(*(void *)(a1 + 32) + 104) |= 8u;
            uint64_t v10 = &dword_1000A44F8;
            goto LABEL_25;
          }
          if (CFEqual(ValueAtIndex, @"baseband"))
          {
            *(_WORD *)(*(void *)(a1 + 32) + 104) |= 0x10u;
            uint64_t v10 = &dword_1000A44FC;
            goto LABEL_25;
          }
          if (CFEqual(ValueAtIndex, @"bluetooth"))
          {
            *(_WORD *)(*(void *)(a1 + 32) + 104) |= 0x20u;
            uint64_t v10 = &dword_1000A4500;
            goto LABEL_25;
          }
          if (CFEqual(ValueAtIndex, @"perf-unrestricted"))
          {
            *(_WORD *)(*(void *)(a1 + 32) + 104) |= 0x40u;
            uint64_t v10 = &dword_1000A4508;
            goto LABEL_25;
          }
          if (CFEqual(ValueAtIndex, @"Camera"))
          {
            *(_WORD *)(*(void *)(a1 + 32) + 104) |= 0x80u;
            uint64_t v10 = &dword_1000A4504;
            goto LABEL_25;
          }
LABEL_26:
          if (v5 == ++v6) {
            goto LABEL_27;
          }
        }
        *(_WORD *)(v9 + 104) |= 2u;
        uint64_t v10 = &dword_1000A44F0;
LABEL_25:
        ++*v10;
        goto LABEL_26;
      }
    }
  }
LABEL_27:
  uint64_t result = CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(*(void *)(a1 + 32) + 16), @"ActivityBudgeted", (const void **)&value);
  if (result)
  {
    if (value == kCFBooleanTrue)
    {
      *(_WORD *)(*(void *)(a1 + 32) + 104) |= 0x200u;
      ++dword_1000A450C;
    }
  }
  return result;
}

uint64_t sub_10004B0F0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  __int16 v2 = *(_WORD *)(v1 + 104);
  if ((v2 & 2) != 0)
  {
    *(_WORD *)(v1 + 104) = v2 & 0xFFFD;
    if (dword_1000A44F0) {
      --dword_1000A44F0;
    }
  }
  uint64_t v3 = *(void *)(result + 32);
  __int16 v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 4) != 0)
  {
    *(_WORD *)(v3 + 104) = v4 & 0xFFFB;
    if (dword_1000A44F4) {
      --dword_1000A44F4;
    }
  }
  uint64_t v5 = *(void *)(result + 32);
  __int16 v6 = *(_WORD *)(v5 + 104);
  if ((v6 & 8) != 0)
  {
    *(_WORD *)(v5 + 104) = v6 & 0xFFF7;
    if (dword_1000A44F8) {
      --dword_1000A44F8;
    }
  }
  uint64_t v7 = *(void *)(result + 32);
  __int16 v8 = *(_WORD *)(v7 + 104);
  if ((v8 & 0x10) != 0)
  {
    *(_WORD *)(v7 + 104) = v8 & 0xFFEF;
    if (dword_1000A44FC) {
      --dword_1000A44FC;
    }
  }
  uint64_t v9 = *(void *)(result + 32);
  __int16 v10 = *(_WORD *)(v9 + 104);
  if ((v10 & 0x20) != 0)
  {
    *(_WORD *)(v9 + 104) = v10 & 0xFFDF;
    if (dword_1000A4500) {
      --dword_1000A4500;
    }
  }
  uint64_t v11 = *(void *)(result + 32);
  __int16 v12 = *(_WORD *)(v11 + 104);
  if ((v12 & 0x40) != 0)
  {
    *(_WORD *)(v11 + 104) = v12 & 0xFFBF;
    if (dword_1000A4508) {
      --dword_1000A4508;
    }
  }
  uint64_t v13 = *(void *)(result + 32);
  __int16 v14 = *(_WORD *)(v13 + 104);
  if ((v14 & 0x80) != 0)
  {
    *(_WORD *)(v13 + 104) = v14 & 0xFF7F;
    if (dword_1000A4504) {
      --dword_1000A4504;
    }
  }
  uint64_t v15 = *(void *)(result + 32);
  __int16 v16 = *(_WORD *)(v15 + 104);
  if ((v16 & 0x100) != 0)
  {
    *(_WORD *)(v15 + 104) = v16 & 0xFEFF;
    uint64_t v15 = *(void *)(result + 32);
    __int16 v16 = *(_WORD *)(v15 + 104);
  }
  if ((v16 & 0x200) != 0)
  {
    *(_WORD *)(v15 + 104) = v16 & 0xFDFF;
    if (dword_1000A450C) {
      --dword_1000A450C;
    }
  }
  return result;
}

void sub_10004B250(uint64_t a1)
{
  __int16 v2 = *(NSObject **)(a1 + 96);
  if (v2)
  {
    if (*(unsigned char *)(a1 + 25))
    {
      dispatch_suspend(v2);
      *(_DWORD *)(a1 + 24) &= ~0x100u;
    }
  }
}

void sub_10004B290(int a1, int a2)
{
  __int16 v12 = 0;
  CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)qword_1000A37E0, (const void *)a1);
  if (Value)
  {
    uint64_t v5 = Value;
    if ((Value[34] & 0x20) == 0)
    {
      if (Value[32])
      {
        sub_1000454A8(a1, a2, (void **)&v12);
        uint64_t v6 = (uint64_t)v12;
        if (v12)
        {
          if (*((_DWORD *)&unk_1000A3870 + 40 * v12[12] + 26)
            && !sub_100036004()
            && sub_10005F7DC()
            && (!*(void *)(v6 + 40) || *(void *)(v6 + 40) - sub_10005E2A8() > v5[32]))
          {
            sub_10004B250(v6);
            uint64_t v7 = *(NSObject **)(v6 + 96);
            if (!v7)
            {
              __int16 v8 = sub_10005C968();
              uint64_t v7 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v8);
              handler[0] = _NSConcreteStackBlock;
              handler[1] = 3221225472;
              handler[2] = sub_10004B46C;
              handler[3] = &unk_1000927D8;
              void handler[4] = v5;
              void handler[5] = v6;
              dispatch_source_set_event_handler(v7, handler);
              v10[0] = _NSConcreteStackBlock;
              v10[1] = 3221225472;
              _DWORD v10[2] = sub_10004B47C;
              v10[3] = &unk_100091DC8;
              v10[4] = v7;
              dispatch_source_set_cancel_handler(v7, v10);
              *(void *)(v6 + 96) = v7;
            }
            dispatch_time_t v9 = dispatch_time(0, 1000000000 * v5[32]);
            dispatch_source_set_timer(v7, v9, 0xFFFFFFFFFFFFFFFFLL, 0);
            dispatch_resume(*(dispatch_object_t *)(v6 + 96));
            *(_DWORD *)(v6 + 24) |= 0x100u;
          }
        }
      }
    }
  }
}

void sub_10004B46C(uint64_t a1)
{
}

void sub_10004B47C(uint64_t a1)
{
}

void sub_10004B484(uint64_t a1)
{
  if (a1)
  {
    int v1 = *(_DWORD *)(a1 + 52);
    uint64_t v2 = *(void *)(a1 + 72);
    if (v2) {
      int v3 = *(_DWORD *)(v2 + 96);
    }
    else {
      int v3 = 0;
    }
    __int16 v4 = sub_10005C968();
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10004B51C;
    block[3] = &unk_100091490;
    int v6 = v3;
    int v7 = v1;
    dispatch_async(v4, block);
  }
}

void sub_10004B51C(uint64_t a1)
{
}

unint64_t sub_10004B528(unint64_t result, int a2)
{
  unint64_t v3 = result;
  unsigned int v4 = *(_DWORD *)(result + 48);
  if (dword_1000A37F8
    && (v5 = (char *)&unk_1000A3870 + 160 * v4, unsigned int v7 = *((_DWORD *)v5 + 26), v6 = (unsigned int *)(v5 + 104), v7 <= 3))
  {
    uint64_t result = *(unsigned int *)(result + 80);
    if (!result) {
      goto LABEL_8;
    }
    unint64_t v8 = *(void *)(v3 + 88);
    if (!v8)
    {
      uint64_t result = (unint64_t)sub_100045D68(result);
      unint64_t v8 = result;
      *(void *)(v3 + 88) = result;
      if (!result)
      {
        uint64_t result = (unint64_t)sub_100045DA8(*(unsigned int *)(v3 + 80));
        unint64_t v8 = result;
        *(void *)(v3 + 88) = result;
        if (!result)
        {
          uint64_t result = (unint64_t)sub_100045D68(*(_DWORD *)(*(void *)(v3 + 72) + 96));
          unint64_t v8 = result;
          *(void *)(v3 + 88) = result;
          if (!result) {
LABEL_8:
          }
            unint64_t v8 = *(void *)(v3 + 72);
        }
      }
    }
    if (*(void *)(v8 + 64) || (uint64_t result = (unint64_t)sub_10004B6F0((_DWORD *)v8), *(void *)(v8 + 64)))
    {
      unint64_t v9 = v8 + 16 * *v6;
      goto LABEL_14;
    }
  }
  else
  {
    unint64_t v8 = 0;
  }
  unint64_t v9 = 0;
LABEL_14:
  if (a2 == 1)
  {
    if (v9 && *(_DWORD *)v9 && (*(unsigned char *)(v3 + 24) & 0x80) != 0)
    {
      int v13 = *(_DWORD *)v9 - 1;
      *(_DWORD *)unint64_t v9 = v13;
      if (!v13)
      {
        uint64_t result = sub_10005E2A8();
        uint64_t v15 = *(void *)(v8 + 64);
        if (*((_DWORD *)&unk_1000A3870 + 40 * v4 + 26) >> 2 < *(unsigned __int16 *)(v15 + 20))
        {
          unint64_t v16 = result - *(void *)(v9 + 8);
          unint64_t v14 = *((unsigned int *)&unk_1000A3870 + 40 * v4 + 26);
          uint64_t v17 = v15 + (v14 >> 2 << 6) + 8 * (v14 & 3);
          uint64_t v18 = *(void *)(v17 + 32);
          uint64_t v19 = v18 >> 63;
          BOOL v20 = __CFADD__(v18, v16);
          unint64_t v21 = v18 + v16;
          if (v20) {
            ++v19;
          }
          if ((v19 & 1) != v21 >> 63 || v19 << 63 >> 63 != v19) {
            unint64_t v21 = 0x7FFFFFFFFFFFFFFFLL;
          }
          *(void *)(v17 + 32) = v21;
        }
      }
      unsigned int v12 = *(_DWORD *)(v3 + 24) & 0xFFFFFF7F;
      goto LABEL_38;
    }
  }
  else if (!a2)
  {
    if ((*((unsigned char *)&unk_1000A3870 + 160 * v4) & 1) == 0
      || (*(unsigned char *)(v3 + 24) & 4) != 0
      || (uint64_t result = sub_100036004(), result))
    {
      if (v9)
      {
        int v10 = *(_DWORD *)(v3 + 24);
        if ((v10 & 0x80) == 0)
        {
          if (!(*(_DWORD *)v9)++)
          {
            uint64_t result = sub_10005E2A8();
            *(void *)(v9 + 8) = result;
            int v10 = *(_DWORD *)(v3 + 24);
          }
          unsigned int v12 = v10 | 0x80;
LABEL_38:
          *(_DWORD *)(v3 + 24) = v12;
        }
      }
    }
  }
  return result;
}

_DWORD *sub_10004B6F0(_DWORD *result)
{
  if (dword_1000A37F8)
  {
    int v1 = result;
    if (!*((void *)result + 8))
    {
      uint64_t result = malloc_type_malloc(0x40uLL, 0x86B58EBBuLL);
      *((void *)v1 + 8) = result;
      if (result)
      {
        *(void *)&long long v2 = 0x2626262626262626;
        *((void *)&v2 + 1) = 0x2626262626262626;
        *((_OWORD *)result + 2) = v2;
        *((_OWORD *)result + 3) = v2;
        *(_OWORD *)uint64_t result = v2;
        *((_OWORD *)result + 1) = v2;
        uint64_t v3 = *((void *)v1 + 8);
        pid_t v4 = getpid();
        uint64_t v5 = 0;
        uint64_t v6 = v4;
        uint64_t v7 = (int)v1[24];
        *(void *)uint64_t v3 = v6;
        *(void *)(v3 + 8) = v7;
        *(_WORD *)(v3 + 16) = 4;
        *(_DWORD *)(v3 + 18) = 65538;
        *(_OWORD *)(v3 + 24) = xmmword_100075F50;
        *(_WORD *)(v3 + 22) = 0;
        *(int64x2_t *)(v3 + 4sub_100048D14(0x12u, 0) = vdupq_n_s64(0x8000000000000000);
        *(void *)(v3 + 56) = 0x8000000000000000;
        uint64_t v8 = *((void *)v1 + 8);
        int v9 = *(unsigned __int16 *)(v8 + 20);
        uint64_t v10 = v8 + 32;
        do
        {
          if (v9) {
            *(void *)(v10 + v5) = 0;
          }
          v5 += 8;
        }
        while (v5 != 32);
        *((_OWORD *)v1 + 2) = 0u;
        *((_OWORD *)v1 + 3) = 0u;
        *(_OWORD *)int v1 = 0u;
        *((_OWORD *)v1 + 1) = 0u;
        return sub_100045D68(v7);
      }
    }
  }
  return result;
}

uint64_t sub_10004B7DC(uint64_t a1, _OWORD *a2, int a3, _DWORD *a4, int *a5)
{
  uid_t ruidp = -1;
  pid_t pidp = -1;
  gid_t rgidp = -1;
  long long v8 = a2[1];
  *(_OWORD *)atoken.val = *a2;
  *(_OWORD *)&atoken.val[4] = v8;
  audit_token_to_au32(&atoken, 0, 0, 0, &ruidp, &rgidp, &pidp, 0, 0);
  *a4 = 0;
  if (sub_10005D678(ruidp))
  {
    int v9 = 0;
    *a4 = dword_1000A3450;
    dword_1000A3450 = a3;
  }
  else
  {
    int v9 = -536870207;
  }
  *a5 = v9;
  return 0;
}

uint64_t sub_10004B888(uint64_t a1, _OWORD *a2, _DWORD *a3, const UInt8 *a4, unsigned int a5, _DWORD *a6, int *a7)
{
  pid_t pidp = -1;
  long long v13 = a2[1];
  *(_OWORD *)atoken.val = *a2;
  *(_OWORD *)&atoken.val[4] = v13;
  audit_token_to_au32(&atoken, 0, 0, 0, 0, 0, &pidp, 0, 0);
  *a6 = 0;
  CFDataRef v14 = CFDataCreateWithBytesNoCopy(0, a4, a5, kCFAllocatorNull);
  if (v14)
  {
    CFDataRef v15 = v14;
    CFDictionaryRef v16 = (const __CFDictionary *)CFPropertyListCreateWithData(0, v14, 1uLL, 0, 0);
    CFRelease(v15);
    if (v16)
    {
      int v17 = -536870207;
      long long v18 = a2[1];
      *(_OWORD *)atoken.val = *a2;
      *(_OWORD *)&atoken.val[4] = v18;
      if (!sub_100044DCC(&atoken, v16)) {
        goto LABEL_16;
      }
      *a3 = 1;
      *a7 = 0;
      if (dword_1000A3450 != 1)
      {
        CFDictionarySetValue(v16, @"AssertType", @"PreventUserIdleSystemSleep");
LABEL_14:
        if (!sub_100045028(pidp, v16, a6, 0, 0))
        {
LABEL_17:
          CFRelease(v16);
          goto LABEL_18;
        }
        int v17 = -536870199;
LABEL_16:
        *a7 = v17;
        goto LABEL_17;
      }
      CFDictionarySetValue(v16, @"AssertType", @"SystemIsActive");
      uint32_t outputCnt = 1;
      size_t v27 = 0;
      mach_port_t v19 = sub_100040BE8();
      if (!v19) {
        goto LABEL_9;
      }
      if (IOConnectCallMethod(v19, 0x11u, 0, 0, 0, 0, &output, &outputCnt, 0, &v27))
      {
        if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
          sub_10006BE90();
        }
        goto LABEL_9;
      }
      uint64_t v23 = output;
      CFStringRef v24 = qword_1000A37D8;
      if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v25 = "true";
        if (!v23) {
          unsigned int v25 = "false";
        }
        atoken.val[0] = 136315138;
        *(void *)&atoken.val[1] = v25;
        _os_log_debug_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "IdleSleepRevertRequest Successful: %s", (uint8_t *)&atoken, 0xCu);
        if (!v23) {
          goto LABEL_9;
        }
      }
      else if (!v23)
      {
LABEL_9:
        unsigned int v20 = 0;
        goto LABEL_10;
      }
      *a3 = 0;
      unsigned int v20 = 1;
LABEL_10:
      unint64_t v21 = qword_1000A37D8;
      if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
      {
        atoken.val[0] = 67109120;
        atoken.val[1] = v20;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Sleep revert state: %d\n", (uint8_t *)&atoken, 8u);
      }
      goto LABEL_14;
    }
  }
  *a7 = -536870206;
LABEL_18:
  vm_deallocate(mach_task_self_, (vm_address_t)a4, a5);
  return 0;
}

uint64_t sub_10004BB90(uint64_t a1, _OWORD *a2, uint64_t a3, const UInt8 *a4, unsigned int a5, int *a6, _DWORD *a7, _DWORD *a8)
{
  CFDateRef v28 = 0;
  pid_t pidp = -1;
  double valuePtr = 0.0;
  long long v14 = a2[1];
  *(_OWORD *)atoken.val = *a2;
  *(_OWORD *)&atoken.val[4] = v14;
  audit_token_to_au32(&atoken, 0, 0, 0, 0, 0, &pidp, 0, 0);
  *a7 = 0;
  vm_size_t v15 = a5;
  CFDataRef v16 = CFDataCreateWithBytesNoCopy(0, a4, a5, kCFAllocatorNull);
  if (v16)
  {
    CFDataRef v17 = v16;
    long long v18 = (__CFDictionary *)CFPropertyListCreateWithData(0, v16, 1uLL, 0, 0);
    CFRelease(v17);
    if (a6 && v18)
    {
      long long v19 = a2[1];
      *(_OWORD *)atoken.val = *a2;
      *(_OWORD *)&atoken.val[4] = v19;
      if (sub_100044DCC(&atoken, v18))
      {
        double valuePtr = (double)(60 * dword_1000A37E8);
        CFNumberRef v20 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
        CFDictionarySetValue(v18, @"TimeoutSeconds", v20);
        CFRelease(v20);
        CFDictionarySetValue(v18, @"TimeoutAction", @"TimeoutActionRelease");
        if (*a6
          && !sub_1000454A8(pidp, *a6, (void **)&v28)
          && (unint64_t v21 = v28) != 0
          && *((_DWORD *)v28 + 12) == 9)
        {
          atoken.val[0] = 255;
          CFNumberRef v22 = CFNumberCreate(0, kCFNumberIntType, &atoken);
          CFDictionarySetValue(v21[2], @"AssertLevel", v22);
          CFRelease(v22);
          *a8 = sub_10004587C(pidp, *a6, v18, 0);
        }
        else
        {
          CFDictionarySetValue(v18, @"AssertType", @"UserIsActive");
          int v23 = sub_100045028(pidp, v18, a6, 0, 0);
          *a8 = v23;
          if (!v23 && !sub_1000454A8(pidp, *a6, (void **)&v28)) {
            *((_DWORD *)v28 + 6) |= 0x10u;
          }
        }
      }
      else
      {
        *a8 = -536870207;
      }
    }
    else
    {
      *a8 = -536870206;
      if (!v18) {
        goto LABEL_18;
      }
    }
    CFRelease(v18);
  }
  else
  {
    *a8 = -536870206;
  }
LABEL_18:
  vm_deallocate(mach_task_self_, (vm_address_t)a4, v15);
  return 0;
}

uint64_t sub_10004BE2C(uint64_t a1, _OWORD *a2, const UInt8 *a3, unsigned int a4, int *a5, _DWORD *a6, _DWORD *a7)
{
  pid_t pidp = -1;
  unsigned int v25 = 0;
  double valuePtr = 0.0;
  long long v13 = a2[1];
  *(_OWORD *)atoken.val = *a2;
  *(_OWORD *)&atoken.val[4] = v13;
  audit_token_to_au32(&atoken, 0, 0, 0, 0, 0, &pidp, 0, 0);
  *a6 = 0;
  vm_size_t v14 = a4;
  CFDataRef v15 = CFDataCreateWithBytesNoCopy(0, a3, a4, kCFAllocatorNull);
  if (v15)
  {
    CFDataRef v16 = v15;
    CFDataRef v17 = (__CFDictionary *)CFPropertyListCreateWithData(0, v15, 1uLL, 0, 0);
    CFRelease(v16);
    if (a5 && v17)
    {
      long long v18 = a2[1];
      *(_OWORD *)atoken.val = *a2;
      *(_OWORD *)&atoken.val[4] = v18;
      if (sub_100044DCC(&atoken, v17))
      {
        double valuePtr = (double)(unint64_t)(60 * qword_1000A37F0);
        if (60 * qword_1000A37F0)
        {
          CFNumberRef v19 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
          CFDictionarySetValue(v17, @"TimeoutSeconds", v19);
          CFRelease(v19);
          CFDictionarySetValue(v17, @"TimeoutAction", @"TimeoutActionRelease");
        }
        if (*a5
          && !sub_1000454A8(pidp, *a5, (void **)&v25)
          && (CFNumberRef v20 = v25) != 0
          && *((_DWORD *)v25 + 12) == 17)
        {
          atoken.val[0] = 255;
          CFNumberRef v21 = CFNumberCreate(0, kCFNumberIntType, &atoken);
          CFDictionarySetValue(v20[2], @"AssertLevel", v21);
          CFRelease(v21);
          *a7 = sub_10004587C(pidp, *a5, v17, 0);
        }
        else
        {
          CFDictionarySetValue(v17, @"AssertType", @"NetworkClientActive");
          int v22 = sub_100045028(pidp, v17, a5, 0, 0);
          *a7 = v22;
          if (!v22 && !sub_1000454A8(pidp, *a5, (void **)&v25)) {
            *((_DWORD *)v25 + 6) |= 0x10u;
          }
        }
      }
      else
      {
        *a7 = -536870207;
      }
    }
    else
    {
      *a7 = -536870206;
      if (!v17) {
        goto LABEL_20;
      }
    }
    CFRelease(v17);
  }
  else
  {
    *a7 = -536870206;
  }
LABEL_20:
  vm_deallocate(mach_task_self_, (vm_address_t)a3, v14);
  return 0;
}

uint64_t sub_10004C0C8(uint64_t a1, const char *a2, int a3)
{
  if (a3 != 1)
  {
    uint64_t v6 = 3758097090;
    CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)qword_1000A37E0, (const void *)(int)a1);
    if (!Value) {
      return v6;
    }
    int v9 = Value;
    if (!strncmp(a2, "com.apple.system.powermanagement.assertions.anychange", 0x36uLL))
    {
      if (a3 != 2 || (v9[136] & 1) == 0) {
        return 0;
      }
      v9[136] &= ~1u;
      --dword_1000A4DE4;
    }
    else if (!strncmp(a2, "com.apple.system.powermanagement.assertions", 0x2CuLL))
    {
      if (a3 != 2 || (v9[136] & 2) == 0) {
        return 0;
      }
      v9[136] &= ~2u;
      --dword_1000A4DD0;
    }
    else
    {
      if (strncmp(a2, "com.apple.system.powermanagement.assertions.timeout", 0x34uLL)) {
        return v6;
      }
      if (a3 != 2 || (v9[136] & 4) == 0) {
        return 0;
      }
      v9[136] &= ~4u;
      --dword_1000A4DE8;
    }
    sub_100046048(a1);
    return 0;
  }
  uint64_t v5 = sub_100045D68(a1);
  if (!v5)
  {
    uint64_t v5 = (_DWORD *)sub_100045DA8(a1);
    if (!v5) {
      return 3758097085;
    }
  }
  if (!strncmp(a2, "com.apple.system.powermanagement.assertions.anychange", 0x36uLL))
  {
    if (v5[34]) {
      goto LABEL_30;
    }
    uint64_t v6 = 0;
    *((unsigned char *)v5 + 136) |= 1u;
    ++dword_1000A4DE4;
  }
  else
  {
    if (strncmp(a2, "com.apple.system.powermanagement.assertions", 0x2CuLL))
    {
      if (strncmp(a2, "com.apple.system.powermanagement.assertions.timeout", 0x34uLL))
      {
        uint64_t v6 = 3758097090;
LABEL_31:
        sub_100046048(a1);
        return v6;
      }
      if ((v5[34] & 4) == 0)
      {
        uint64_t v6 = 0;
        *((unsigned char *)v5 + 136) |= 4u;
        ++dword_1000A4DE8;
        return v6;
      }
LABEL_30:
      uint64_t v6 = 0;
      goto LABEL_31;
    }
    if ((v5[34] & 2) != 0) {
      goto LABEL_30;
    }
    uint64_t v6 = 0;
    *((unsigned char *)v5 + 136) |= 2u;
    ++dword_1000A4DD0;
  }
  return v6;
}

void sub_10004C30C()
{
  uint64_t v0 = qword_1000A3818;
  if (qword_1000A3818)
  {
    dispatch_time_t v1 = dispatch_time(0, qword_1000A3468);
    dispatch_source_set_timer(v0, v1, 0xFFFFFFFFFFFFFFFFLL, 0);
  }
  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)qword_1000A37E0);
  uint64_t v3 = (const void **)malloc_type_malloc(8 * Count, 0x74347492uLL);
  if (v3)
  {
    pid_t v4 = v3;
    bzero(v3, 8 * Count);
    CFDictionaryGetKeysAndValues((CFDictionaryRef)qword_1000A37E0, 0, v4);
    if (Count >= 1)
    {
      uint64_t v5 = (uint64_t *)v4;
      do
      {
        uint64_t v6 = *v5;
        if (!*v5) {
          break;
        }
        if ((*(unsigned char *)(v6 + 136) & 0x20) != 0) {
          sub_10004C3F4(v6);
        }
        ++v5;
        --Count;
      }
      while (Count);
    }
    free(v4);
  }
}

void sub_10004C3F4(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    free(v2);
    *(void *)(a1 + 64) = 0;
    int v3 = *(_DWORD *)(a1 + 96);
    sub_100046048(v3);
  }
}

void sub_10004C450(uint64_t a1, int a2)
{
  if (a2)
  {
    int v3 = sub_100045D68(a1);
    if (!v3)
    {
      int v3 = (_DWORD *)sub_100045DA8(a1);
      if (!v3) {
        return;
      }
    }
    if ((v3[34] & 0x40) == 0)
    {
      if (dword_1000A37F8++)
      {
LABEL_6:
        *((unsigned char *)v3 + 136) |= 0x40u;
        return;
      }
      CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)qword_1000A37E0);
      long long v8 = (const void **)malloc_type_malloc(8 * Count, 0x73C480BBuLL);
      if (v8)
      {
        int v9 = v8;
        bzero(v8, 8 * Count);
        CFDictionaryGetKeysAndValues((CFDictionaryRef)qword_1000A37E0, 0, v9);
        if (Count >= 1)
        {
          uint64_t v10 = v9;
          do
          {
            if (!*v10) {
              break;
            }
            sub_10004B6F0(*v10++);
            --Count;
          }
          while (Count);
        }
        free(v9);
        for (uint64_t i = 0; i != 3200; i += 160)
        {
          if (*(_DWORD *)((char *)&unk_1000A3870 + i + 104) <= 3u) {
            sub_10004AB94((uint64_t)&unk_1000A3870 + i, 3u, (uint64_t)&stru_1000927F8);
          }
        }
        if (!qword_1000A3818)
        {
          unsigned int v12 = sub_10005C968();
          qword_1000A3818 = (uint64_t)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v12);
          dispatch_source_set_event_handler((dispatch_source_t)qword_1000A3818, &stru_100092818);
          dispatch_source_set_cancel_handler((dispatch_source_t)qword_1000A3818, &stru_100092838);
          long long v13 = qword_1000A3818;
          dispatch_time_t v14 = dispatch_time(0, qword_1000A3468);
          dispatch_source_set_timer(v13, v14, 0xFFFFFFFFFFFFFFFFLL, 0);
          dispatch_resume((dispatch_object_t)qword_1000A3818);
        }
        goto LABEL_6;
      }
    }
  }
  else
  {
    if (!dword_1000A37F8) {
      return;
    }
    CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)qword_1000A37E0, (const void *)(int)a1);
    if (!Value) {
      return;
    }
    uint64_t v6 = Value;
    if ((Value[136] & 0x40) == 0) {
      return;
    }
    if (!--dword_1000A37F8)
    {
      CFIndex v15 = CFDictionaryGetCount((CFDictionaryRef)qword_1000A37E0);
      CFDataRef v16 = (const void **)malloc_type_malloc(8 * v15, 0xD8F522A4uLL);
      if (!v16) {
        return;
      }
      CFDataRef v17 = v16;
      bzero(v16, 8 * v15);
      CFDictionaryGetKeysAndValues((CFDictionaryRef)qword_1000A37E0, 0, v17);
      if (v15 >= 1)
      {
        long long v18 = (uint64_t *)v17;
        do
        {
          if (!*v18) {
            break;
          }
          sub_10004C3F4(*v18++);
          --v15;
        }
        while (v15);
      }
      free(v17);
      for (uint64_t j = 0; j != 3200; j += 160)
      {
        if (*(_DWORD *)((char *)&unk_1000A3870 + j + 104) <= 3u) {
          sub_10004AB94((uint64_t)&unk_1000A3870 + j, 0xFu, (uint64_t)&stru_100092858);
        }
      }
      if (qword_1000A3818) {
        dispatch_source_cancel((dispatch_source_t)qword_1000A3818);
      }
    }
    v6[136] &= ~0x40u;
  }

  sub_100046048(a1);
}

void sub_10004C724(id a1, assertion *a2)
{
}

void sub_10004C734(id a1)
{
  qword_1000A3818 = 0;
}

void sub_10004C760(id a1, assertion *a2)
{
  a2->var2 &= ~0x80u;
}

uint64_t sub_10004C770(uint64_t a1, _OWORD *a2, const char *a3, int a4, int *a5)
{
  int v8 = -536870211;
  uid_t ruidp = -1;
  pid_t pidp = -1;
  gid_t rgidp = -1;
  *a5 = 0;
  long long v9 = a2[1];
  *(_OWORD *)atoken.val = *a2;
  *(_OWORD *)&atoken.val[4] = v9;
  audit_token_to_au32(&atoken, 0, 0, 0, &ruidp, &rgidp, &pidp, 0, 0);
  if (sub_10005D678(ruidp) || sub_10005E308(ruidp))
  {
    if ((a4 - 3) >= 0xFFFFFFFE) {
      int v8 = sub_10004C0C8(pidp, a3, a4);
    }
  }
  else
  {
    int v8 = -536870207;
  }
  *a5 = v8;
  return 0;
}

CFComparisonResult sub_10004C838(const __CFNumber *a1, const __CFNumber *a2)
{
  return CFNumberCompare(a1, a2, 0);
}

uint64_t sub_10004C840(uint64_t a1, _OWORD *a2, const UInt8 *a3, unsigned int a4, int *a5)
{
  long long v8 = a2[1];
  v30[0] = *a2;
  v30[1] = v8;
  if (!sub_10005C9D0(v30, @"com.apple.private.iokit.powerlogging"))
  {
    int v24 = -536870207;
LABEL_19:
    *a5 = v24;
    goto LABEL_20;
  }
  CFDataRef v9 = CFDataCreateWithBytesNoCopy(0, a3, a4, kCFAllocatorNull);
  if (!v9)
  {
    CFDictionaryGetTypeID();
    goto LABEL_18;
  }
  CFDataRef v10 = v9;
  CFPropertyListRef v11 = CFPropertyListCreateWithData(0, v9, 0, 0, 0);
  CFRelease(v10);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!v11)
  {
LABEL_18:
    int v24 = -536870206;
    goto LABEL_19;
  }
  if (CFGetTypeID(v11) != TypeID)
  {
    *a5 = -536870206;
    goto LABEL_22;
  }
  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)qword_1000A37E0);
  dispatch_time_t v14 = malloc_type_malloc(8 * Count, 0xD4E6DE9uLL);
  if (!v14)
  {
LABEL_22:
    CFRelease(v11);
    goto LABEL_20;
  }
  CFIndex v15 = v14;
  if (qword_1000A3800) {
    CFRelease((CFTypeRef)qword_1000A3800);
  }
  qword_1000A3800 = (uint64_t)v11;
  bzero(v15, 8 * Count);
  CFDictionaryGetKeysAndValues((CFDictionaryRef)qword_1000A37E0, 0, (const void **)v15);
  if (Count >= 1)
  {
    CFIndex v16 = Count;
    CFDataRef v17 = (const void ***)v15;
    do
    {
      if (!*v17) {
        break;
      }
      sub_10004CB10(*v17++);
      --v16;
    }
    while (v16);
  }
  if (CFDictionaryGetCount((CFDictionaryRef)qword_1000A3800))
  {
    if (!qword_1000A3808)
    {
      long long v18 = sub_10005C968();
      qword_1000A3808 = (uint64_t)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v18);
      dispatch_source_set_event_handler((dispatch_source_t)qword_1000A3808, &stru_100092878);
      dispatch_source_set_cancel_handler((dispatch_source_t)qword_1000A3808, &stru_100092898);
      int v19 = sub_100036004();
      uint64_t v20 = qword_1000A3808;
      if (v19)
      {
        dispatch_time_t v21 = dispatch_time(0xFFFFFFFFFFFFFFFFLL, 0);
        int v22 = v20;
        uint64_t v23 = -1;
      }
      else
      {
        dispatch_time_t v21 = dispatch_time(0, 0);
        uint64_t v23 = qword_1000A3458;
        int v22 = v20;
      }
      dispatch_source_set_timer(v22, v21, v23, 0);
      dispatch_resume((dispatch_object_t)qword_1000A3808);
      uint64_t v27 = getpid();
      sub_10004C450(v27, 1);
    }
    if (Count && *v15)
    {
      CFDateRef v28 = (const void *)sub_10004A614(1, *v15);
      if (v28) {
        CFRelease(v28);
      }
      char v29 = (const void *)sub_10004A614(2, *v15);
      if (v29) {
        CFRelease(v29);
      }
    }
  }
  else if (qword_1000A3808)
  {
    dispatch_source_cancel((dispatch_source_t)qword_1000A3808);
    uint64_t v26 = getpid();
    sub_10004C450(v26, 0);
    if (qword_1000A3810)
    {
      CFRelease((CFTypeRef)qword_1000A3810);
      qword_1000A3810 = 0;
    }
  }
  *a5 = 0;
  free(v15);
LABEL_20:
  vm_deallocate(mach_task_self_, (vm_address_t)a3, a4);
  return 0;
}

CFTypeID sub_10004CB10(const void **a1)
{
  long long v2 = (const void *)qword_1000A3800;
  CFTypeID result = CFDictionaryGetTypeID();
  if (v2)
  {
    CFTypeID v4 = result;
    CFTypeID result = CFGetTypeID(v2);
    if (result == v4)
    {
      uint64_t v5 = a1[10];
      CFTypeID result = CFStringGetTypeID();
      if (v5)
      {
        CFTypeID v6 = result;
        CFTypeID result = CFGetTypeID(v5);
        if (result == v6)
        {
          uint64_t valuePtr = 0;
          CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_1000A3800, @"Default Limits");
          CFTypeID TypeID = CFDictionaryGetTypeID();
          if (Value && CFGetTypeID(Value) == TypeID)
          {
            CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(Value, @"Asssertion Duration Limit");
            CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(Value, @"Aggregate Assertion Limit");
            CFTypeID v11 = CFNumberGetTypeID();
            if (v9 && CFGetTypeID(v9) == v11) {
              CFNumberGetValue(v9, kCFNumberIntType, (char *)&valuePtr + 4);
            }
            CFTypeID v12 = CFNumberGetTypeID();
            if (v10 && CFGetTypeID(v10) == v12) {
              CFNumberGetValue(v10, kCFNumberIntType, &valuePtr);
            }
          }
          CFDictionaryRef v13 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_1000A3800, a1[10]);
          CFTypeID result = CFDictionaryGetTypeID();
          if (v13 && (CFTypeID v14 = result, result = CFGetTypeID(v13), result == v14))
          {
            CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue(v13, @"Asssertion Duration Limit");
            CFIndex v16 = CFDictionaryGetValue(v13, @"Aggregate Assertion Limit");
            CFTypeID v17 = CFNumberGetTypeID();
            if (v15 && CFGetTypeID(v15) == v17) {
              CFNumberGetValue(v15, kCFNumberIntType, a1 + 16);
            }
            CFTypeID result = CFNumberGetTypeID();
            if (v16)
            {
              CFTypeID v18 = result;
              CFTypeID result = CFGetTypeID(v16);
              if (result == v18) {
                return CFNumberGetValue((CFNumberRef)v16, kCFNumberIntType, (char *)a1 + 132);
              }
            }
          }
          else
          {
            int v19 = valuePtr;
            *((_DWORD *)a1 + 32) = HIDWORD(valuePtr);
            *((_DWORD *)a1 + 33) = v19;
          }
        }
      }
    }
  }
  return result;
}

void sub_10004CCF8(id a1)
{
  uint64_t v2 = 0;
  if (!sub_100036004())
  {
    if (qword_1000A3810)
    {
      sub_100044758(&v2);
      if (v2)
      {
        SamplesDelta = (const void *)IOReportCreateSamplesDelta();
        if (SamplesDelta) {
          IOReportIterate();
        }
      }
      else
      {
        SamplesDelta = 0;
      }
      if (qword_1000A3810) {
        CFRelease((CFTypeRef)qword_1000A3810);
      }
      qword_1000A3810 = v2;
      if (SamplesDelta) {
        CFRelease(SamplesDelta);
      }
    }
    else
    {
      sub_100044758(&qword_1000A3810);
    }
  }
}

void sub_10004CDBC(id a1)
{
  qword_1000A3808 = 0;
}

uint64_t sub_10004CDE8(char a1)
{
  return (dword_1000A4DEC >> a1) & 1;
}

uint64_t sub_10004CDFC(uint64_t result, int a2)
{
  int v2 = 1 << result;
  if (a2) {
    int v3 = dword_1000A4DEC | v2;
  }
  else {
    int v3 = dword_1000A4DEC & ~v2;
  }
  dword_1000A4DEC = v3;
  return result;
}

uint64_t sub_10004CE28()
{
  return dword_1000A4DF0;
}

uint64_t sub_10004CE34(uint64_t result, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  int v2 = (void *)(a2 + 24);
  uint64_t v3 = v4;
  *(void *)CFTypeID result = v4;
  if (v4) {
    *(void *)(v3 + 8) = result;
  }
  *int v2 = result;
  *(void *)(result + 8) = v2;
  *(_DWORD *)(result + 24) = *(_DWORD *)(result + 24) & 0xFFFFFFFC | 2;
  return result;
}

uint64_t *sub_10004CE60(uint64_t *result)
{
  uint64_t v1 = *result;
  if (*result) {
    *(void *)(v1 + 8) = result[1];
  }
  *(void *)result[1] = v1;
  *((_DWORD *)result + 6) &= ~2u;
  return result;
}

void sub_10004CE88(unint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)a1 = v4;
  if (v4) {
    *(void *)(v4 + 8) = a1;
  }
  *(void *)(a2 + 16) = a1;
  *(void *)(a1 + 8) = a2 + 16;
  int v5 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v5 & 0xFFFFFFDC;
  if ((*(unsigned char *)a2 & 1) != 0 && (v5 & 4) != 0) {
    ++*(_DWORD *)(a2 + 152);
  }
  if (a3)
  {
    sub_10004B528(a1, 0);
    sub_10004AC68(a1, 0);
  }

  sub_10004B484(a1);
}

void sub_10004CF1C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1) {
    *(void *)(v4 + 8) = *(void *)(a1 + 8);
  }
  **(void **)(a1 + 8) = v4;
  if ((*(unsigned char *)(a1 + 24) & 4) != 0)
  {
    int v5 = *(_DWORD *)(a2 + 152);
    if (v5) {
      *(_DWORD *)(a2 + 152) = v5 - 1;
    }
  }
  if (a3)
  {
    sub_10004B528(a1, 1);
    sub_10004AC68(a1, 1);
  }

  sub_10004B250(a1);
}

void sub_10004CF9C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    unint64_t v3 = sub_10005E2A8();
    unint64_t v4 = *(void *)(v1 + 40);
    BOOL v5 = v4 > v3;
    unint64_t v6 = v4 - v3;
    if (v5)
    {
      uint64_t v7 = *(NSObject **)(a1 + 48);
      dispatch_time_t v8 = dispatch_time(0, 1000000000 * v6);
      dispatch_source_set_timer(v7, v8, 0xFFFFFFFFFFFFFFFFLL, 0);
    }
    else
    {
      CFNumberRef v9 = sub_10005C968();
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10004D078;
      block[3] = &unk_100091490;
      void block[4] = a1;
      dispatch_async(v9, block);
    }
  }
}

uint64_t sub_10004D078(uint64_t a1)
{
  return sub_10004D080(*(void *)(a1 + 32));
}

void sub_10004D080(uint64_t a1)
{
  unint64_t v2 = sub_10005E2A8();
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    unint64_t v4 = v2;
    char v5 = 0;
    int v6 = 0;
    uint64_t v7 = (uint64_t *)(a1 + 24);
    do
    {
      if (*(void *)(v3 + 40) > v4) {
        break;
      }
      uint64_t v8 = *(void *)v3;
      if (*(void *)v3) {
        *(void *)(v8 + 8) = *(void *)(v3 + 8);
      }
      **(void **)(v3 + 8) = v8;
      int v9 = *(_DWORD *)(v3 + 24);
      *(_DWORD *)(v3 + 24) = v9 & 0xFFFFFFFE;
      if ((v9 & 4) != 0)
      {
        int v10 = *(_DWORD *)(a1 + 152);
        if (v10) {
          *(_DWORD *)(a1 + 152) = v10 - 1;
        }
      }
      sub_10004B528(v3, 1);
      sub_10004B250(v3);
      sub_10004AC68(v3, 1);
      entr_act_end();
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      CFDateRef v12 = CFDateCreate(0, Current);
      if (v12)
      {
        CFDateRef v13 = v12;
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(v3 + 16), @"AssertTimedOutWhen", v12);
        CFRelease(v13);
      }
      if (*(_DWORD *)(v3 + 48) == 5)
      {
        int v14 = *(_DWORD *)(*(void *)(v3 + 72) + 96);
        v5 |= v14 != getpid();
      }
      CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 16), @"TimeoutAction");
      if (*(void *)(*(void *)(v3 + 72) + 120)) {
        sub_100046990(v3);
      }
      if ((CFTypeID v16 = CFStringGetTypeID(), Value)
        && CFGetTypeID(Value) == v16
        && CFEqual(@"TimeoutActionRelease", Value)
        || CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 16), @"AsyncClientAssertionId"))
      {
        sub_100051E54((void *)v3, 4);
      }
      else
      {
        sub_100042680(4, v3);
        int v17 = *(_DWORD *)(v3 + 24);
        uint64_t v18 = *v7;
        *(void *)uint64_t v3 = *v7;
        if (v18) {
          *(void *)(v18 + 8) = v3;
        }
        *uint64_t v7 = v3;
        *(void *)(v3 + 8) = v7;
        *(_DWORD *)(v3 + 24) = v17 & 0xFFFFFFDC | 0x22;
        CFTypeID TypeID = CFStringGetTypeID();
        if (Value && CFGetTypeID(Value) == TypeID && CFEqual(@"TimeoutActionKillProcess", Value)) {
          kill(*(_DWORD *)(*(void *)(v3 + 72) + 96), 15);
        }
      }
      uint64_t v3 = *(void *)(a1 + 8);
      ++v6;
    }
    while (v3);
    if (v6)
    {
      sub_10004CF9C(a1);
      if (v5) {
        sub_10004A25C();
      }
      uint64_t v20 = *(void (**)(uint64_t, uint64_t))(a1 + 128);
      if (v20) {
        v20(a1, 1);
      }
      if (dword_1000A4DE8) {
        notify_post("com.apple.system.powermanagement.assertions.timeout");
      }
      if (dword_1000A4DE4)
      {
        notify_post("com.apple.system.powermanagement.assertions.anychange");
      }
    }
  }
}

void sub_10004D338(uint64_t a1, uint64_t a2, int a3, int a4)
{
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 16), @"AssertTimeoutTimeLeft");
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v9 = *(void *)a1;
  if (*(void *)a1) {
    *(void *)(v9 + 8) = *(void *)(a1 + 8);
  }
  **(void **)(a1 + 8) = v9;
  int v10 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v10 & 0xFFFFFFFE;
  if ((v10 & 4) != 0)
  {
    int v11 = *(_DWORD *)(a2 + 152);
    if (v11) {
      *(_DWORD *)(a2 + 152) = v11 - 1;
    }
  }
  if (a4)
  {
    sub_10004B528(a1, 1);
    sub_10004AC68(a1, 1);
  }
  sub_10004B250(a1);
  if (v8 == a1 && a3)
  {
    sub_10004CF9C(a2);
  }
}

void sub_10004D418(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    if (!*(void *)(a1 + 48))
    {
      uint64_t v3 = sub_10005C968();
      unint64_t v4 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v3);
      *(void *)(a1 + 48) = v4;
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_10004D5B0;
      handler[3] = &unk_100091490;
      void handler[4] = a1;
      dispatch_source_set_event_handler(v4, handler);
      char v5 = *(NSObject **)(a1 + 48);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_10004D5B8;
      v14[3] = &unk_100091490;
      v14[4] = a1;
      dispatch_source_set_cancel_handler(v5, v14);
      dispatch_resume(*(dispatch_object_t *)(a1 + 48));
    }
    unint64_t v6 = sub_10005E2A8();
    unint64_t v7 = *(void *)(v1 + 40);
    BOOL v8 = v7 > v6;
    unint64_t v9 = v7 - v6;
    if (v8)
    {
      int v10 = *(NSObject **)(a1 + 48);
      dispatch_time_t v11 = dispatch_time(0, 1000000000 * v9);
      dispatch_source_set_timer(v10, v11, 0xFFFFFFFFFFFFFFFFLL, 0);
    }
    else
    {
      CFDateRef v12 = sub_10005C968();
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10004D5C4;
      block[3] = &unk_100091490;
      void block[4] = a1;
      dispatch_async(v12, block);
    }
  }
}

void sub_10004D5B0(uint64_t a1)
{
}

void sub_10004D5B8(uint64_t a1)
{
}

void sub_10004D5C4(uint64_t a1)
{
}

void sub_10004D5CC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  sub_10004D684(a1, a2);
  int v8 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v8 & 0xFFFFFFDE | 1;
  if ((*(unsigned char *)a2 & 1) != 0 && (v8 & 4) != 0) {
    ++*(_DWORD *)(a2 + 152);
  }
  if (a4)
  {
    sub_10004B528(a1, 0);
    sub_10004AC68(a1, 0);
  }
  sub_10004B484(a1);
  if (*(void *)(a2 + 8) == a1 && a3 != 0)
  {
    sub_10004D418(a2);
  }
}

void sub_10004D684(uint64_t a1, uint64_t a2)
{
  unint64_t valuePtr = 0;
  unint64_t v4 = sub_10005E2A8();
  unint64_t v5 = *(void *)(a1 + 40);
  BOOL v6 = v5 > v4;
  unint64_t v7 = v5 - v4;
  if (v6)
  {
    unint64_t valuePtr = v7;
    CFNumberRef v8 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
    if (v8)
    {
      CFNumberRef v9 = v8;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), @"AssertTimeoutTimeLeft", v8);
      CFRelease(v9);
    }
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    CFDateRef v11 = CFDateCreate(0, Current);
    if (v11)
    {
      CFDateRef v12 = v11;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), @"AssertTimeoutUpdateTime", v11);
      CFRelease(v12);
    }
  }
  CFNumberRef v15 = *(void **)(a2 + 8);
  int v14 = (void *)(a2 + 8);
  CFDateRef v13 = v15;
  if (v15)
  {
    while (1)
    {
      CFTypeID v16 = v13;
      if (v13[5] > *(void *)(a1 + 40)) {
        break;
      }
      CFDateRef v13 = (void *)*v13;
      if (!*v16)
      {
        *(void *)a1 = 0;
        *CFTypeID v16 = a1;
        *(void *)(a1 + 8) = v16;
        return;
      }
    }
    uint64_t v17 = v13[1];
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v17;
    *(void *)v13[1] = a1;
    v13[1] = a1;
  }
  else
  {
    *int v14 = a1;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v14;
  }
}

void sub_10004D788(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 32);
  if (*(_DWORD *)(*(void *)(a2 + 72) + 96) == v3 || *(_DWORD *)(a2 + 80) == v3)
  {
    unsigned int v4 = *(_DWORD *)(a2 + 48);
    if (*(void *)(a2 + 40))
    {
      unint64_t v5 = sub_10005E2A8();
      unint64_t v6 = *(void *)(a2 + 40);
      BOOL v7 = v6 > v5;
      unint64_t v8 = v6 - v5;
      if (v7)
      {
        unint64_t valuePtr = v8;
        CFNumberRef v9 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 16), @"_AssertTimeoutOnResume", v9);
        CFRelease(v9);
      }
    }
    sub_100051F60(a2, 0);
    *(_DWORD *)(a2 + 24) |= 0x400u;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 16), @"AssertionIsStateSuspended", kCFBooleanTrue);
    sub_100042680(10, a2);
    int v10 = (char *)&unk_1000A3870 + 160 * v4;
    uint64_t v13 = *((void *)v10 + 4);
    CFDateRef v11 = (uint64_t *)(v10 + 32);
    uint64_t v12 = v13;
    *(void *)a2 = v13;
    if (v13) {
      *(void *)(v12 + 8) = a2;
    }
    *CFDateRef v11 = a2;
    *(void *)(a2 + 8) = v11;
  }
}

void sub_10004D890(uint64_t a1, unint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 32);
  if (*(_DWORD *)(*(void *)(a2 + 72) + 96) == v3 || *(_DWORD *)(a2 + 80) == v3)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a2) {
      *(void *)(v4 + 8) = *(void *)(a2 + 8);
    }
    **(void **)(a2 + 8) = v4;
    *(_DWORD *)(a2 + 24) &= ~0x400u;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 16), @"AssertionIsStateSuspended", kCFBooleanFalse);
    unint64_t v5 = sub_10005E2A8();
    int v6 = *(_DWORD *)(a2 + 48);
    int valuePtr = 0;
    CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 16), @"AssertLevel");
    CFTypeID TypeID = CFNumberGetTypeID();
    if (Value
      && CFGetTypeID(Value) == TypeID
      && (CFNumberGetValue((CFNumberRef)Value, kCFNumberIntType, &valuePtr), !valuePtr))
    {
      uint64_t v12 = &byte_1000A3870[160 * v6];
      uint64_t v15 = *((void *)v12 + 3);
      uint64_t v13 = (unint64_t *)(v12 + 24);
      uint64_t v14 = v15;
      *(void *)a2 = v15;
      if (v15) {
        *(void *)(v14 + 8) = a2;
      }
      unint64_t *v13 = a2;
      *(void *)(a2 + 8) = v13;
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a2 + 24) & 0xFFFFFFFC | 2;
    }
    else
    {
      CFNumberRef v9 = &byte_1000A3870[160 * v6];
      double v16 = 0.0;
      int v10 = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 16), @"_AssertTimeoutOnResume");
      CFTypeID v11 = CFNumberGetTypeID();
      if (v10
        && CFGetTypeID(v10) == v11
        && (CFNumberGetValue((CFNumberRef)v10, kCFNumberDoubleType, &v16),
            CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a2 + 16), @"_AssertTimeoutOnResume"),
            v16 != 0.0))
      {
        *(void *)(a2 + 4sub_100048D14(0x12u, 0) = v5 + (unint64_t)v16;
        sub_10004D5CC(a2, (uint64_t)v9, 1, 0);
      }
      else
      {
        sub_10004CE88(a2, (uint64_t)v9, 0);
      }
      sub_100042680(11, a2);
    }
  }
}

uint64_t sub_10004DA64(uint64_t result)
{
  if (result)
  {
    for (uint64_t i = *((void *)&unk_1000A4518 + 2 * result); i; uint64_t i = *(void *)(i + 112))
    {
      if ((*(unsigned char *)i & 1) != 0 && !sub_100036004())
      {
        if (*(_DWORD *)(i + 152)) {
          return 1;
        }
      }
      else if (*(void *)(i + 16) || *(void *)(i + 8))
      {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_10004DADC(uint64_t a1, unsigned char *a2)
{
  if (a2) {
    *a2 = 0;
  }
  uint64_t v4 = *(unsigned int *)(a1 + 104);
  if (v4)
  {
    uint64_t v5 = *((void *)&unk_1000A4518 + 2 * v4);
    if (v5)
    {
      char v6 = 0;
      while (1)
      {
        if ((*(unsigned char *)v5 & 1) != 0 && !sub_100036004())
        {
          BOOL v8 = *(_DWORD *)(v5 + 152) == 0;
        }
        else
        {
          if (*(void *)(v5 + 16))
          {
            int v7 = 1;
            if (!a2) {
              goto LABEL_19;
            }
            goto LABEL_17;
          }
          BOOL v8 = *(void *)(v5 + 8) == 0;
        }
        int v7 = !v8;
        if (!a2) {
          goto LABEL_19;
        }
LABEL_17:
        if (v5 == a1 && v7)
        {
          char v6 = 1;
          *a2 = 1;
          return v6 & 1;
        }
LABEL_19:
        char v9 = v7 ^ 1;
        if (a2) {
          char v9 = 1;
        }
        if ((v9 & 1) == 0)
        {
          char v6 = 1;
          return v6 & 1;
        }
        v6 |= v7;
        uint64_t v5 = *(void *)(v5 + 112);
        if (!v5) {
          return v6 & 1;
        }
      }
    }
  }
  char v6 = 0;
  return v6 & 1;
}

uint64_t sub_10004DBB8()
{
  return sub_10004DADC((uint64_t)&unk_1000A3CD0, 0);
}

uint64_t sub_10004DBC8(unsigned int a1)
{
  unsigned __int8 v2 = 0;
  sub_10004DADC((uint64_t)&unk_1000A3870 + 160 * a1, &v2);
  return v2;
}

BOOL sub_10004DC04(unsigned int a1)
{
  return *((void *)&unk_1000A3870 + 20 * a1 + 2) || *((void *)&unk_1000A3870 + 20 * a1 + 1) != 0;
}

BOOL sub_10004DC40()
{
  return dword_1000A44F0 + dword_1000A44F4 != 0;
}

BOOL sub_10004DC58()
{
  return dword_1000A4504 != 0;
}

BOOL sub_10004DC6C()
{
  return dword_1000A4508 != 0;
}

uint64_t sub_10004DC80(int a1)
{
  if (a1)
  {
    if ((byte_1000A4DF4 & 1) == 0)
    {
      ++dword_1000A3998;
      sub_100048D14(1u, 0);
      ++dword_1000A4078;
      sub_100048D14(0xCu, 0);
      ++dword_1000A3FD8;
      sub_100048D14(0xBu, 0);
      int v2 = dword_1000A3F38 + 1;
      goto LABEL_13;
    }
  }
  else if (byte_1000A4DF4)
  {
    if (dword_1000A3998) {
      --dword_1000A3998;
    }
    sub_100048D14(1u, 0);
    if (dword_1000A4078) {
      --dword_1000A4078;
    }
    sub_100048D14(0xCu, 0);
    if (dword_1000A3FD8) {
      --dword_1000A3FD8;
    }
    sub_100048D14(0xBu, 0);
    if (!dword_1000A3F38) {
      goto LABEL_14;
    }
    int v2 = dword_1000A3F38 - 1;
LABEL_13:
    dword_1000A3F38 = v2;
LABEL_14:
    sub_100048D14(0xAu, 0);
    uint64_t result = 0;
    byte_1000A4DF4 = a1 != 0;
    return result;
  }
  return 3758097093;
}

uint64_t sub_10004DDB8(uint64_t result, int a2)
{
  if (a2 == 2) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t result = sub_10004DADC(result, 0);
  int v4 = *(_DWORD *)(v3 + 40);
  int v5 = 1 << v4;
  int v6 = dword_1000A4DEC & (1 << v4);
  if (a2)
  {
    if (v6) {
      char v7 = result;
    }
    else {
      char v7 = 1;
    }
    if (v7) {
      return result;
    }
    int v8 = dword_1000A4DEC & ~v5;
  }
  else
  {
    if (v6) {
      int v9 = 0;
    }
    else {
      int v9 = result;
    }
    if (v9 != 1) {
      return result;
    }
    int v8 = dword_1000A4DEC | v5;
  }
  dword_1000A4DEC = v8;
  if (v4 == 4)
  {
    uint64_t result = sub_10005CC14(@"BatteryWarningsDisabled", kCFBooleanTrue);
  }
  else
  {
    if (v4 == 3)
    {
      BOOL v10 = a2 == 0;
      int v11 = 1;
    }
    else
    {
      if (v4 != 2) {
        goto LABEL_20;
      }
      BOOL v10 = a2 == 0;
      int v11 = 0;
    }
    uint64_t result = sub_10004DEB4(v11, v10);
  }
LABEL_20:
  if (dword_1000A4DD0)
  {
    return notify_post("com.apple.system.powermanagement.assertions");
  }
  return result;
}

uint64_t sub_10004DEB4(int a1, int a2)
{
  kern_return_t MatchingServices;
  uint64_t result;
  BOOL v7;
  io_object_t v8;
  io_registry_entry_t v9;
  CFStringRef v10;
  const CFBooleanRef *v11;
  CFBooleanRef v12;
  io_iterator_t existing;

  io_iterator_t existing = 0;
  CFDictionaryRef v4 = IOServiceMatching("IOPMPowerSource");
  MatchingServices = IOServiceGetMatchingServices(kIOMainPortDefault, v4, &existing);
  uint64_t result = existing;
  if (MatchingServices) {
    char v7 = 1;
  }
  else {
    char v7 = existing == 0;
  }
  if (!v7)
  {
    int v8 = IOIteratorNext(existing);
    if (v8)
    {
      int v9 = v8;
      if (a1 == 1) {
        BOOL v10 = @"IsCharging";
      }
      else {
        BOOL v10 = @"ExternalConnected";
      }
      int v11 = &kCFBooleanTrue;
      if (a2) {
        int v11 = &kCFBooleanFalse;
      }
      uint64_t v12 = *v11;
      do
      {
        IORegistryEntrySetCFProperty(v9, v10, v12);
        IOObjectRelease(v9);
        int v9 = IOIteratorNext(existing);
      }
      while (v9);
    }
    return IOObjectRelease(existing);
  }
  return result;
}

void sub_10004DF98(uint64_t a1, int a2)
{
  if (!*(_DWORD *)(a1 + 104)) {
    return;
  }
  char v17 = 0;
  int v4 = sub_10004DADC(a1, &v17);
  unsigned int v5 = *(_DWORD *)(a1 + 40);
  int v6 = v4;
  int v7 = 1;
  switch(v5)
  {
    case 5u:
    case 9u:
    case 0x10u:
      int v7 = 64;
      goto LABEL_5;
    case 7u:
    case 0xBu:
    case 0xDu:
    case 0x11u:
    case 0x12u:
      goto LABEL_5;
    case 8u:
      int v7 = 16;
      unsigned int v5 = 8;
      goto LABEL_5;
    case 0xAu:
      int v8 = dword_1000A4DEC;
      if (v17)
      {
        unsigned int v5 = 10;
LABEL_6:
        int v9 = v8 | (1 << v5);
        goto LABEL_13;
      }
      if ((dword_1000A4DEC & 0x400) != 0)
      {
        sub_10003F7E0(*(_DWORD *)(a1 + 80));
        unsigned int v5 = *(_DWORD *)(a1 + 40);
      }
      else
      {
        unsigned int v5 = 10;
      }
LABEL_5:
      int v8 = dword_1000A4DEC;
      if (v17) {
        goto LABEL_6;
      }
      int v10 = 1 << v5;
      if ((dword_1000A4DEC & (1 << v5)) != 0)
      {
        if (*(void *)(a1 + 72))
        {
          if ((*(unsigned char *)a1 & 2) != 0)
          {
            *(void *)(a1 + 72) = 0;
            int v11 = *(NSObject **)(a1 + 56);
            if (v11)
            {
              dispatch_source_cancel(v11);
              unsigned int v5 = *(_DWORD *)(a1 + 40);
              int v8 = dword_1000A4DEC;
              int v10 = 1 << v5;
            }
          }
        }
      }
      int v9 = v8 & ~v10;
LABEL_13:
      dword_1000A4DEC = v9;
      if (v5 <= 0x11 && ((1 << v5) & 0x24220) != 0) {
        sub_10005A658();
      }
      if (a2 == 1)
      {
        int v12 = dword_1000A4DF0;
        if ((dword_1000A4DF0 & v7) != 0) {
          char v14 = v6;
        }
        else {
          char v14 = 1;
        }
        if (v14) {
          return;
        }
        goto LABEL_30;
      }
      if (a2)
      {
        int v12 = dword_1000A4DF0;
        int v15 = dword_1000A4DF0 & v7;
        if (!v6)
        {
          if (!v15) {
            return;
          }
          goto LABEL_36;
        }
        if (v15) {
          return;
        }
LABEL_34:
        unsigned int v16 = v12 | v7;
        goto LABEL_37;
      }
      if (*(_DWORD *)(a1 + 40) == 9 && v17)
      {
        sub_100048B5C();
        sub_1000405D8();
      }
      int v12 = dword_1000A4DF0;
      if ((dword_1000A4DF0 & v7) != 0) {
        char v13 = 0;
      }
      else {
        char v13 = v6;
      }
      if (v13)
      {
LABEL_30:
        if (!v6)
        {
LABEL_36:
          unsigned int v16 = v12 & ~v7;
LABEL_37:
          dword_1000A4DF0 = v16;
          sub_10004E1CC(v16);
          if (dword_1000A4DD0) {
            notify_post("com.apple.system.powermanagement.assertions");
          }
          return;
        }
        goto LABEL_34;
      }
      return;
    default:
      return;
  }
}

uint64_t sub_10004E1CC(unsigned int a1)
{
  uint64_t input = a1;
  uint64_t result = sub_100040BE8();
  if (result) {
    return IOConnectCallMethod(result, 9u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  return result;
}

void sub_10004E21C(uint64_t a1)
{
  if ((*(unsigned char *)a1 & 2) != 0)
  {
    *(_DWORD *)(a1 + 8sub_100048D14(0x12u, 0) = 0;
    for (uint64_t i = *(void *)(a1 + 16); i; uint64_t i = *(void *)(a1 + 16))
    {
      sub_10004CF1C(i, a1, 1);
      uint64_t v3 = *(void *)(a1 + 24);
      *(void *)uint64_t i = v3;
      if (v3) {
        *(void *)(v3 + 8) = i;
      }
      *(void *)(a1 + 24) = i;
      *(void *)(i + 8) = a1 + 24;
      *(_DWORD *)(i + 24) = *(_DWORD *)(i + 24) & 0xFFFFFFFC | 2;
      ++*(_DWORD *)(a1 + 80);
      sub_100042680(5, i);
      nullsub_4(3, i);
    }
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4)
    {
      unsigned int v5 = (uint64_t *)(a1 + 24);
      do
      {
        uint64_t v6 = *(void *)v4;
        if (*(void *)v4) {
          *(void *)(v6 + 8) = *(void *)(v4 + 8);
        }
        **(void **)(v4 + 8) = v6;
        *(_DWORD *)(v4 + 24) &= ~1u;
        sub_10004B528(v4, 1);
        sub_10004B250(v4);
        sub_10004AC68(v4, 1);
        uint64_t v7 = *v5;
        *(void *)unint64_t v4 = *v5;
        if (v7) {
          *(void *)(v7 + 8) = v4;
        }
        *(void *)(a1 + 24) = v4;
        *(void *)(v4 + 8) = v5;
        *(_DWORD *)(v4 + 24) = *(_DWORD *)(v4 + 24) & 0xFFFFFFFC | 2;
        ++*(_DWORD *)(a1 + 80);
        sub_100042680(5, v4);
        nullsub_4(3, v4);
        unint64_t v4 = *(void *)(a1 + 8);
      }
      while (v4);
    }
    sub_10004CF9C(a1);
    int v8 = *(void (**)(uint64_t, uint64_t))(a1 + 128);
    if (v8) {
      v8(a1, 1);
    }
    if (!*(_DWORD *)(a1 + 80))
    {
      sub_10003F7E0(0);
    }
  }
}

void sub_10004E3AC(int a1)
{
  unint64_t v2 = sub_10005E2A8();
  char v17 = 0;
  int v3 = a1 - dword_1000A37E8;
  if (a1 != dword_1000A37E8)
  {
    unint64_t v4 = v2;
    dword_1000A37E8 = a1;
    unsigned int v5 = (void *)qword_1000A3E18;
    if (qword_1000A3E18)
    {
      uint64_t v6 = 60 * v3;
      do
      {
        unint64_t v7 = (unint64_t)v5;
        unsigned int v5 = (void *)*v5;
        if ((*(unsigned char *)(v7 + 24) & 0x10) != 0)
        {
          if (dword_1000A37E8)
          {
            if (v5) {
              v5[1] = *(void *)(v7 + 8);
            }
            **(void **)(v7 + 8) = v5;
            unint64_t v8 = *(void *)(v7 + 40) + v6;
            if (v8 <= v4) {
              unint64_t v8 = v4;
            }
            *(void *)(v7 + 4sub_100048D14(0x12u, 0) = v8;
            int v9 = v17;
            *(void *)unint64_t v7 = v17;
            if (v9) {
              v9[1] = v7;
            }
            char v17 = (void *)v7;
            *(void *)(v7 + 8) = &v17;
          }
          else
          {
            sub_10004D338(v7, (uint64_t)&unk_1000A3E10, 0, 1);
            *(void *)(v7 + 4sub_100048D14(0x12u, 0) = 0;
            sub_10004CE88(v7, (uint64_t)&unk_1000A3E10, 1);
          }
        }
      }
      while (v5);
      for (uint64_t i = v17; v17; uint64_t i = v17)
      {
        uint64_t v11 = *i;
        if (*i) {
          *(void *)(v11 + 8) = i[1];
        }
        *(void *)i[1] = v11;
        sub_10004D684((uint64_t)i, (uint64_t)&unk_1000A3E10);
      }
    }
    uint64_t v12 = qword_1000A3E20;
    int v13 = dword_1000A37E8;
    if (qword_1000A3E20) {
      BOOL v14 = dword_1000A37E8 == 0;
    }
    else {
      BOOL v14 = 1;
    }
    if (!v14)
    {
      do
      {
        uint64_t v15 = *(void *)v12;
        if ((*(unsigned char *)(v12 + 24) & 0x10) != 0)
        {
          *(void *)(v12 + 4sub_100048D14(0x12u, 0) = v4 + (60 * v13);
          sub_10004CF1C(v12, (uint64_t)&unk_1000A3E10, 1);
          sub_10004D5CC(v12, (uint64_t)&unk_1000A3E10, 0, 1);
          int v13 = dword_1000A37E8;
        }
        if (v15) {
          BOOL v16 = v13 == 0;
        }
        else {
          BOOL v16 = 1;
        }
        uint64_t v12 = v15;
      }
      while (!v16);
    }
    sub_10004D418((uint64_t)&unk_1000A3E10);
    if (off_1000A3E90) {
      ((void (*)(void *, uint64_t))off_1000A3E90)(&unk_1000A3E10, 1);
    }
    if (dword_1000A4DE8) {
      notify_post("com.apple.system.powermanagement.assertions.timeout");
    }
    if (dword_1000A4DE4) {
      notify_post("com.apple.system.powermanagement.assertions.anychange");
    }
  }
}

void sub_10004E5BC()
{
  unint64_t v0 = sub_10005E2A8();
  BOOL v14 = 0;
  uint64_t v15 = qword_1000A37F0;
  sub_1000550C8(&v15);
  uint64_t v1 = v15 - qword_1000A37F0;
  uint64_t v2 = 60 * (v15 - qword_1000A37F0);
  qword_1000A37F0 = v15;
  if (60 * v1)
  {
    int v3 = (void *)qword_1000A4318;
    if (qword_1000A4318)
    {
      do
      {
        unint64_t v4 = (unint64_t)v3;
        int v3 = (void *)*v3;
        if ((*(unsigned char *)(v4 + 24) & 0x10) != 0)
        {
          if (qword_1000A37F0)
          {
            if (v3) {
              v3[1] = *(void *)(v4 + 8);
            }
            **(void **)(v4 + 8) = v3;
            unint64_t v5 = *(void *)(v4 + 40) + v2;
            if (v5 <= v0) {
              unint64_t v5 = v0;
            }
            *(void *)(v4 + 4sub_100048D14(0x12u, 0) = v5;
            uint64_t v6 = v14;
            *(void *)unint64_t v4 = v14;
            if (v6) {
              v6[1] = v4;
            }
            BOOL v14 = (void *)v4;
            *(void *)(v4 + 8) = &v14;
          }
          else
          {
            sub_10004D338(v4, (uint64_t)&unk_1000A4310, 0, 1);
            *(void *)(v4 + 4sub_100048D14(0x12u, 0) = 0;
            sub_10004CE88(v4, (uint64_t)&unk_1000A4310, 1);
          }
        }
      }
      while (v3);
      for (uint64_t i = v14; v14; uint64_t i = v14)
      {
        uint64_t v8 = *i;
        if (*i) {
          *(void *)(v8 + 8) = i[1];
        }
        *(void *)i[1] = v8;
        sub_10004D684((uint64_t)i, (uint64_t)&unk_1000A4310);
      }
    }
    uint64_t v9 = qword_1000A4320;
    uint64_t v10 = qword_1000A37F0;
    if (qword_1000A4320) {
      BOOL v11 = qword_1000A37F0 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11)
    {
      do
      {
        uint64_t v12 = *(void *)v9;
        if ((*(unsigned char *)(v9 + 24) & 0x10) != 0)
        {
          *(void *)(v9 + 4sub_100048D14(0x12u, 0) = v0 + 60 * v10;
          sub_10004CF1C(v9, (uint64_t)&unk_1000A4310, 1);
          sub_10004D5CC(v9, (uint64_t)&unk_1000A4310, 0, 1);
          uint64_t v10 = qword_1000A37F0;
        }
        if (v12) {
          BOOL v13 = v10 == 0;
        }
        else {
          BOOL v13 = 1;
        }
        uint64_t v9 = v12;
      }
      while (!v13);
    }
    sub_10004D418((uint64_t)&unk_1000A4310);
    if (off_1000A4390) {
      ((void (*)(void *, uint64_t))off_1000A4390)(&unk_1000A4310, 1);
    }
    if (dword_1000A4DE8) {
      notify_post("com.apple.system.powermanagement.assertions.timeout");
    }
    if (dword_1000A4DE4) {
      notify_post("com.apple.system.powermanagement.assertions.anychange");
    }
  }
}

void sub_10004E7D0()
{
  uint64_t v0 = qword_1000A4410;
  v1[0] = _NSConcreteStackBlock;
  v1[1] = 3221225472;
  v1[2] = sub_10004E898;
  v1[3] = &unk_1000928D8;
  v1[4] = sub_10005E2A8() + v0;
  v1[5] = &unk_1000A43B0;
  sub_10004AB94((uint64_t)&unk_1000A43B0, 3u, (uint64_t)v1);
  sub_10004D418((uint64_t)&unk_1000A43B0);
  if (dword_1000A4DE8) {
    notify_post("com.apple.system.powermanagement.assertions.timeout");
  }
  if (dword_1000A4DE4) {
    notify_post("com.apple.system.powermanagement.assertions.anychange");
  }
}

void sub_10004E898(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(a2 + 40) > v2)
  {
    *(void *)(a2 + 4sub_100048D14(0x12u, 0) = v2;
    CFNumberRef v4 = CFNumberCreate(0, kCFNumberLongType, (const void *)(*(void *)(a1 + 40) + 96));
    if (v4)
    {
      CFNumberRef v5 = v4;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 16), @"AssertTimeoutTimeLeft", v4);
      CFRelease(v5);
    }
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    CFDateRef v7 = CFDateCreate(0, Current);
    if (v7)
    {
      CFDateRef v8 = v7;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 16), @"AssertTimeoutUpdateTime", v7);
      CFRelease(v8);
    }
  }
}

void sub_10004E94C(unsigned int a1)
{
  if (a1 || qword_1000A3EF8)
  {
    if ((byte_1000A3EB0 & 2) == 0)
    {
LABEL_7:
      if (!a1)
      {
        unint64_t v2 = sub_10005C968();
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_10004EB34;
        block[3] = &unk_100091490;
        void block[4] = &byte_1000A3EB0;
        dispatch_async(v2, block);
      }
      return;
    }
    qword_1000A3EF8 = a1 / 0x3E8uLL;
    if (a1 <= 0x3E7)
    {
      if (qword_1000A3EE8) {
        dispatch_source_cancel((dispatch_source_t)qword_1000A3EE8);
      }
      goto LABEL_7;
    }
    if (qword_1000A3EE8)
    {
      dispatch_suspend((dispatch_object_t)qword_1000A3EE8);
    }
    else
    {
      int v3 = sub_10005C968();
      qword_1000A3EE8 = (uint64_t)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v3);
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_100052D50;
      handler[3] = &unk_100091490;
      void handler[4] = &byte_1000A3EB0;
      dispatch_source_set_event_handler((dispatch_source_t)qword_1000A3EE8, handler);
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_100052D58;
      v7[3] = &unk_100091490;
      void v7[4] = &byte_1000A3EB0;
      dispatch_source_set_cancel_handler((dispatch_source_t)qword_1000A3EE8, v7);
    }
    CFNumberRef v4 = qword_1000A3EE8;
    dispatch_time_t v5 = dispatch_time(0, 1000000000 * qword_1000A3EF8);
    dispatch_source_set_timer(v4, v5, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_resume((dispatch_object_t)qword_1000A3EE8);
  }
}

void sub_10004EB34(uint64_t a1)
{
}

void sub_10004EB3C(uint64_t a1, int a2)
{
  char v18 = 0;
  if (!*(_DWORD *)(a1 + 104)) {
    return;
  }
  int v4 = *(_DWORD *)(a1 + 40);
  int v5 = dword_1000A4DEC;
  int v6 = sub_10004DADC(a1, &v18);
  unsigned int v7 = *(_DWORD *)(a1 + 40);
  if (v18)
  {
    int v8 = dword_1000A4DEC | (1 << v7);
  }
  else
  {
    int v9 = dword_1000A4DEC;
    int v10 = 1 << v7;
    if ((dword_1000A4DEC & (1 << v7)) != 0)
    {
      if (*(void *)(a1 + 72))
      {
        if ((*(unsigned char *)a1 & 2) != 0)
        {
          *(void *)(a1 + 72) = 0;
          BOOL v11 = *(NSObject **)(a1 + 56);
          if (v11)
          {
            dispatch_source_cancel(v11);
            unsigned int v7 = *(_DWORD *)(a1 + 40);
            int v9 = dword_1000A4DEC;
            int v10 = 1 << v7;
          }
        }
      }
    }
    int v8 = v9 & ~v10;
  }
  int v12 = 1 << v4;
  dword_1000A4DEC = v8;
  if (v7 <= 0x11 && ((1 << v7) & 0x24220) != 0) {
    sub_10005A658();
  }
  int v13 = v5 & v12;
  if (a2 != 1)
  {
    if (!a2)
    {
      if (v13) {
        char v14 = 0;
      }
      else {
        char v14 = v6;
      }
      if ((v14 & 1) == 0) {
        return;
      }
      goto LABEL_27;
    }
    if (v6)
    {
      if (v13) {
        return;
      }
LABEL_27:
      int v16 = 1;
LABEL_30:
      uint64_t v17 = *(int *)(a1 + 40);
      if v17 <= 0x13 && ((0xE9803u >> v17))
      {
        sub_100054D5C(dword_100075F60[v17], v16);
        sub_100055328();
        if (dword_1000A4DD0) {
          notify_post("com.apple.system.powermanagement.assertions");
        }
      }
      return;
    }
    if (!v13) {
      return;
    }
LABEL_29:
    int v16 = 0;
    goto LABEL_30;
  }
  if (v13) {
    char v15 = v6;
  }
  else {
    char v15 = 1;
  }
  if ((v15 & 1) == 0) {
    goto LABEL_29;
  }
}

void sub_10004ECC4(uint64_t a1, int a2)
{
  if (a2 != 2 && *(_DWORD *)(a1 + 40) == 6)
  {
    int v4 = sub_10004DADC(a1, 0);
    if (a2)
    {
      if (v4) {
        return;
      }
      dword_1000A4DEC &= ~(1 << *(_DWORD *)(a1 + 40));
      int v5 = sub_100049814(@"PreventUserIdleSystemSleep", @"Waiting for springboard or equivalent process to start", 0, 0, 0, 0, 0.0);
      sub_100049B2C(v5, (uint64_t)&unk_1000A4EF0, 0);
      CFRelease(v5);
    }
    else
    {
      if (!v4) {
        return;
      }
      dword_1000A4DEC |= 1 << *(_DWORD *)(a1 + 40);
      sub_100049BD8((uint64_t)&unk_1000A4EF0);
    }
    if (dword_1000A4DD0)
    {
      notify_post("com.apple.system.powermanagement.assertions");
    }
  }
}

void sub_10004EDD0(id a1, assertion *a2)
{
}

void sub_10004EDDC(id a1, assertion *a2)
{
}

void *sub_10004EDE8(const __CFDictionary *a1)
{
  unint64_t v2 = malloc_type_calloc(1uLL, 0x70uLL, 0x10A0040FFA61E1BuLL);
  if (v2)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 5, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    *((void *)v2 + 2) = Mutable;
    if (Mutable && (CFNumberRef v4 = (const __CFNumber *)CFDictionaryGetValue(a1, @"ID")) != 0)
    {
      CFNumberRef v5 = v4;
      CFDictionarySetValue(*((CFMutableDictionaryRef *)v2 + 2), @"GlobalUniqueID", v4);
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, @"Assertions");
      if (Value)
      {
        *(_DWORD *)int valuePtr = 0;
        CFNumberGetValue(Value, kCFNumberSInt32Type, valuePtr);
        unsigned int v7 = sub_10002160C(valuePtr[0]);
        CFStringRef v8 = CFStringCreateWithCString(0, v7, 0x8000100u);
        if (v8)
        {
          CFStringRef v9 = v8;
          CFDictionarySetValue(*((CFMutableDictionaryRef *)v2 + 2), @"AssertName", v8);
          CFRelease(v9);
        }
      }
      CFDictionarySetValue(*((CFMutableDictionaryRef *)v2 + 2), @"AssertType", @"Kernel Assertion");
      int v10 = CFDictionaryGetValue(a1, @"ServicePtr");
      if (v10) {
        CFDictionarySetValue(*((CFMutableDictionaryRef *)v2 + 2), @"AssertionOnBehalfOfPID", v10);
      }
      BOOL v11 = CFDictionaryGetValue(a1, @"Owner");
      if (v11) {
        CFDictionarySetValue(*((CFMutableDictionaryRef *)v2 + 2), @"AssertionOnBehalfOfBundleID", v11);
      }
      CFDictionarySetValue(*((CFMutableDictionaryRef *)v2 + 2), @"Process Name", @"kernel_task");
      int v12 = CFDictionaryGetValue((CFDictionaryRef)qword_1000A37E0, 0);
      if (v12)
      {
        int v13 = v12[18];
        if (v13 != -1) {
          v12[18] = v13 + 1;
        }
      }
      else
      {
        *((void *)v2 + 9) = 0;
        int v12 = sub_100045DA8(0);
      }
      *((void *)v2 + 9) = v12;
      int v17 = 0;
      CFNumberGetValue(v5, kCFNumberIntType, &v17);
      CFStringRef v14 = (const __CFString *)CFDictionaryGetValue(a1, @"Owner");
      if (v14) {
        CFStringGetCString(v14, (char *)valuePtr, 100, 0x8000100u);
      }
      char v15 = qword_1000A37D8;
      if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint8_t buf = 67109378;
        int v19 = v17;
        __int16 v20 = 2080;
        dispatch_time_t v21 = valuePtr;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "inserted kernel assertion id %d %s \n", buf, 0x12u);
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void *sub_10004F07C(const void *a1, const void *a2, int a3)
{
  int v6 = malloc_type_calloc(1uLL, 0x70uLL, 0x10A0040FFA61E1BuLL);
  if (!v6)
  {
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
      sub_10006BEF8();
    }
    return 0;
  }
  unsigned int v7 = v6;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 4, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v7[2] = Mutable;
  if (!Mutable)
  {
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
      sub_10006BF2C();
    }
    free(v7);
    return 0;
  }
  CFDictionarySetValue(Mutable, @"GlobalUniqueID", a2);
  CFDictionarySetValue((CFMutableDictionaryRef)v7[2], @"AssertName", a1);
  if (a3) {
    CFStringRef v9 = @"System Sleep Preventer";
  }
  else {
    CFStringRef v9 = @"Idle Sleep Preventer";
  }
  CFDictionarySetValue((CFMutableDictionaryRef)v7[2], @"AssertType", v9);
  CFDictionarySetValue((CFMutableDictionaryRef)v7[2], @"Process Name", @"kernel_task");
  CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)qword_1000A37E0, 0);
  if (Value)
  {
    int v11 = Value[18];
    if (v11 != -1) {
      Value[18] = v11 + 1;
    }
  }
  else
  {
    v7[9] = 0;
    CFNumberRef Value = sub_100045DA8(0);
  }
  v7[9] = Value;
  if (a3)
  {
    uint64_t v12 = qword_1000A3828;
    *unsigned int v7 = qword_1000A3828;
    if (v12) {
      *(void *)(v12 + 8) = v7;
    }
    int v13 = &qword_1000A3828;
  }
  else
  {
    uint64_t v14 = qword_1000A3820;
    *unsigned int v7 = qword_1000A3820;
    if (v14) {
      *(void *)(v14 + 8) = v7;
    }
    int v13 = &qword_1000A3820;
  }
  uint64_t *v13 = (uint64_t)v7;
  v7[1] = v13;
  return v7;
}

void sub_10004F234(int a1)
{
  CFArrayRef theArray = 0;
  if (IOPMCopySleepPreventersListWithID())
  {
    unint64_t v2 = qword_1000A37D8;
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Could not read sleep preventers\n", v7, 2u);
    }
  }
  else
  {
    CFArrayGetTypeID();
    int v3 = &qword_1000A3820;
    if (a1) {
      int v3 = &qword_1000A3828;
    }
    uint64_t v4 = *v3;
    if (*v3)
    {
      do
      {
        CFDictionaryRef v5 = *(const __CFDictionary **)(v4 + 16);
        if (v5) {
          CFDictionaryGetValue(v5, @"GlobalUniqueID");
        }
        int v6 = *(void **)v4;
        if (*(void *)v4) {
          v6[1] = *(void *)(v4 + 8);
        }
        **(void **)(v4 + 8) = v6;
        sub_100042680(2, v4);
        CFRelease(*(CFTypeRef *)(v4 + 16));
        sub_100046048(0);
        free((void *)v4);
        uint64_t v4 = (uint64_t)v6;
      }
      while (v6);
    }
    if (theArray) {
      CFRelease(theArray);
    }
  }
}

void sub_10004F51C(const __CFNumber *a1, const __CFArray *a2)
{
  int valuePtr = 0;
  CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
  int v3 = valuePtr;
  int v4 = dword_1000A4E00;
  if (valuePtr != dword_1000A4E00)
  {
    CFDictionaryRef v5 = qword_1000A37D8;
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint8_t buf = 67109376;
      int v33 = v4;
      __int16 v34 = 1024;
      int v35 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Kernel driver assertions bit mask has changed old 0x%x new 0x%x\n", buf, 0xEu);
      int v3 = valuePtr;
    }
    dword_1000A4E00 = v3;
  }
  if (a2)
  {
    int64_t Count = CFArrayGetCount(a2);
    unsigned int v7 = (int *)malloc_type_calloc(Count, 4uLL, 0x100004052888210uLL);
    if (Count >= 1)
    {
      CFIndex v8 = 0;
      int v9 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a2, v8);
        CFTypeID TypeID = CFDictionaryGetTypeID();
        if (!ValueAtIndex || CFGetTypeID(ValueAtIndex) != TypeID) {
          goto LABEL_21;
        }
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"ID");
        int v30 = 0;
        CFNumberGetValue(Value, kCFNumberIntType, &v30);
        v7[v8] = v30;
        CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"Level");
        int v29 = 0;
        CFNumberGetValue(v13, kCFNumberSInt32Type, &v29);
        if (CFDictionaryContainsKey((CFDictionaryRef)qword_1000A4E08, Value) == 1)
        {
          if (!v29)
          {
            uint64_t v14 = qword_1000A37D8;
            if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)uint8_t buf = 67109120;
              int v33 = v30;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "assertion %d is turned off. Let's remove it\n", buf, 8u);
            }
            char v15 = (CFTypeRef *)CFDictionaryGetValue((CFDictionaryRef)qword_1000A4E08, Value);
            sub_100042680(2, (uint64_t)v15);
            CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_1000A4E08, Value);
            CFRelease(v15[2]);
            sub_100046048(0);
            free(v15);
LABEL_20:
            int v9 = 1;
          }
        }
        else if (v29)
        {
          int v16 = qword_1000A37D8;
          if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint8_t buf = 67109120;
            int v33 = v30;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "New kernel assertion %d\n", buf, 8u);
          }
          int v17 = sub_10004EDE8((const __CFDictionary *)ValueAtIndex);
          if (v17)
          {
            uint64_t v18 = (uint64_t)v17;
            CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4E08, Value, v17);
            sub_100042680(0, v18);
          }
          goto LABEL_20;
        }
LABEL_21:
        if (Count == ++v8) {
          goto LABEL_24;
        }
      }
    }
    int v9 = 0;
LABEL_24:
    int64_t v19 = CFDictionaryGetCount((CFDictionaryRef)qword_1000A4E08);
    __int16 v20 = (const void **)malloc_type_calloc(v19, 8uLL, 0x6004044C4A2DFuLL);
    CFDictionaryGetKeysAndValues((CFDictionaryRef)qword_1000A4E08, v20, 0);
    if (v19 >= 1)
    {
      for (uint64_t i = 0; i != v19; ++i)
      {
        int v30 = 0;
        CFNumberGetValue((CFNumberRef)v20[i], kCFNumberIntType, &v30);
        if (Count < 1) {
          goto LABEL_32;
        }
        int v22 = 1;
        int64_t v23 = Count;
        int v24 = v7;
        do
        {
          int v25 = *v24++;
          if (v25 == v30) {
            int v22 = 0;
          }
          --v23;
        }
        while (v23);
        if (v22 == 1)
        {
LABEL_32:
          uint64_t v26 = qword_1000A37D8;
          if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint8_t buf = 67109120;
            int v33 = v30;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Kernel assertion %d has been released\n", buf, 8u);
          }
          uint64_t v27 = (CFTypeRef *)CFDictionaryGetValue((CFDictionaryRef)qword_1000A4E08, v20[i]);
          sub_100042680(2, (uint64_t)v27);
          CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_1000A4E08, v20[i]);
          CFRelease(v27[2]);
          sub_100046048(0);
          free(v27);
          int v9 = 1;
        }
      }
    }
    free(v20);
    free(v7);
    if (v9)
    {
      CFDateRef v28 = qword_1000A37D8;
      if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint8_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Kernel assertions changed\n", buf, 2u);
      }
    }
  }
}

void sub_10004F9AC(const __CFNumber *a1, const __CFArray *a2)
{
  CFNumberGetValue(a1, kCFNumberIntType, &dword_1000A4E00);
  int v3 = qword_1000A37D8;
  if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint8_t buf = 67109120;
    int v17 = dword_1000A4E00;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Kernel assertions 0x%u\n", buf, 8u);
  }
  if (a2)
  {
    CFIndex Count = CFArrayGetCount(a2);
    if (Count >= 1)
    {
      CFIndex v5 = Count;
      for (CFIndex i = 0; i != v5; ++i)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, i);
        CFTypeID TypeID = CFDictionaryGetTypeID();
        if (ValueAtIndex)
        {
          if (CFGetTypeID(ValueAtIndex) == TypeID)
          {
            CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"ID");
            int valuePtr = 0;
            CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
            CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"Level");
            int v14 = 0;
            CFNumberGetValue(v10, kCFNumberSInt32Type, &v14);
            if (v14)
            {
              int v11 = sub_10004EDE8(ValueAtIndex);
              if (v11)
              {
                uint64_t v12 = v11;
                CFNumberRef v13 = qword_1000A37D8;
                if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)uint8_t buf = 67109120;
                  int v17 = valuePtr;
                  _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "inserting kernel assertion %d\n", buf, 8u);
                }
                CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A4E08, Value, v12);
                sub_100042680(0, (uint64_t)v12);
              }
            }
          }
        }
      }
    }
  }
}

void sub_10004FBB8(const __CFNumber *a1, const __CFArray *a2)
{
  if (qword_1000A4E08)
  {
    sub_10004F51C(a1, a2);
  }
  else
  {
    qword_1000A4E08 = (uint64_t)CFDictionaryCreateMutable(0, 10240, &kCFTypeDictionaryKeyCallBacks, 0);
    sub_10004F9AC(a1, a2);
  }
}

uint64_t sub_10004FC4C()
{
  return analytics_send_event_lazy();
}

xpc_object_t sub_10004FCC8(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_string(v2, "process", *(const char **)(a1 + 32));
  int v3 = *(const char **)(a1 + 40);
  if (*v3) {
    xpc_dictionary_set_string(v2, "caused_by_process", v3);
  }
  xpc_dictionary_set_string(v2, "assertion_name", *(const char **)(a1 + 48));
  xpc_dictionary_set_uint64(v2, "duration", *(int *)(a1 + 56));
  if (byte_1000A3850)
  {
    xpc_dictionary_set_string(v2, "experiment_id", (const char *)[(id)qword_1000A3858 UTF8String]);
    xpc_dictionary_set_string(v2, "treatment_id", (const char *)[(id)qword_1000A3860 UTF8String]);
  }
  return v2;
}

void sub_10004FDA0()
{
  if (byte_1000A3830)
  {
    uint64_t v0 = qword_1000A37D8;
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint8_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "System Assertion Timeout: timer fired", buf, 2u);
    }
    byte_1000A3831 = 0;
    *(void *)uint8_t buf = 0;
    int v3 = buf;
    uint64_t v4 = 0x2020000000;
    char v5 = 0;
    v1[0] = _NSConcreteStackBlock;
    v1[1] = 3221225472;
    v1[2] = sub_10004FEE0;
    v1[3] = &unk_100092778;
    v1[4] = buf;
    sub_10004AB94((uint64_t)&unk_1000A3910, 3u, (uint64_t)v1);
    if (v3[24])
    {
      if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEBUG)) {
        sub_10006BF60();
      }
      sub_100050414();
    }
    _Block_object_dispose(buf, 8);
  }
}

void sub_10004FEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004FEE0(uint64_t a1, uint64_t a2)
{
  CFStringRef v4 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 16), @"AssertName");
  CFStringRef v5 = *(const __CFString **)(*(void *)(a2 + 72) + 80);
  int v6 = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 16), @"FrameworkBundleID");
  int v30 = 0;
  v31[0] = 0;
  uint64_t v7 = *(void *)(a2 + 88);
  if (v7) {
    CFStringRef v8 = *(const __CFString **)(v7 + 80);
  }
  else {
    CFStringRef v8 = 0;
  }
  uint64_t value = 0;
  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)qword_1000A3840, v5, (const void **)&value)
    || v8 && CFDictionaryGetValueIfPresent((CFDictionaryRef)qword_1000A3840, v8, (const void **)&value)
    || v6 && CFDictionaryGetValueIfPresent((CFDictionaryRef)qword_1000A3840, v6, (const void **)&value))
  {
    int v9 = value;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (v9)
    {
      if (CFGetTypeID(v9) == TypeID)
      {
        valuePtr[0] = -1;
        CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, valuePtr);
        if (!valuePtr[0])
        {
LABEL_15:
          uint64_t v12 = qword_1000A37D8;
          if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
          {
            int v13 = *(_DWORD *)(a2 + 52);
            uint64_t v14 = *(void *)(a2 + 72);
            int v15 = *(_DWORD *)(v14 + 96);
            uint64_t v16 = *(void *)(v14 + 80);
            valuePtr[0] = 67110658;
            valuePtr[1] = v13;
            __int16 v34 = 2112;
            CFStringRef v35 = v4;
            __int16 v36 = 1024;
            int v37 = v15;
            __int16 v38 = 2112;
            uint64_t v39 = v16;
            __int16 v40 = 2112;
            CFStringRef v41 = v8;
            __int16 v42 = 2112;
            int v43 = v6;
            __int16 v44 = 2112;
            unsigned int v45 = v30;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "System Assertion Timeout: Allowing assertion %u:%@ for pid %d:%@(%@)(%@)(%@)", (uint8_t *)valuePtr, 0x40u);
          }
          return;
        }
      }
    }
  }
  else if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a2 + 16), @"Category", (const void **)v31))
  {
    CFStringRef v11 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@", v31[0]);
    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)qword_1000A3848, v11, (const void **)&v30)) {
      goto LABEL_15;
    }
  }
  unint64_t v17 = sub_10005E2A8() - *(void *)(a2 + 32);
  if (v17 >= dword_1000A3470)
  {
    uint64_t v18 = *(int *)(*(void *)(a2 + 72) + 96);
    int64_t v19 = +[NSString stringWithFormat:@" System Assertion Timeout: Device became inactive %d seconds ago.%@ is not on the allow list. Dropping assertion %lld:%@ for pid %d %@. age:%llu.", dword_1000A3470, v5, *(unsigned int *)(a2 + 52) | ((unint64_t)*(unsigned int *)(a2 + 48) << 32), v4, v18, v5, v17];
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
      sub_10006BF94();
    }
    int out_token = 0;
    if (!notify_register_check("com.apple.powermanagement.assertionexception", &out_token))
    {
      notify_set_state(out_token, v18 | 0x400000000);
      notify_post("com.apple.powermanagement.assertionexception");
      notify_cancel(out_token);
    }
    memset(buffer, 0, sizeof(buffer));
    memset(v46, 0, sizeof(v46));
    CFStringGetCString(v5, (char *)buffer, 64, 0x8000100u);
    if (v8) {
      CFStringGetCString(v8, (char *)v46, 64, 0x8000100u);
    }
    CFStringGetCString(v4, (char *)valuePtr, 256, 0x8000100u);
    v31[1] = _NSConcreteStackBlock;
    v31[2] = (void *)3221225472;
    v31[3] = sub_10004FCC8;
    void v31[4] = &unk_100092938;
    v31[5] = buffer;
    v31[6] = v46;
    v31[7] = valuePtr;
    int v32 = v17;
    analytics_send_event_lazy();
    sub_100051F60(a2, 1);
    uint64_t v20 = *(void *)(a2 + 72);
    if (*(void *)(v20 + 144)) {
      *(void *)(v20 + 144) = 0;
    }
    if (*(void *)(v20 + 120)) {
      sub_100046990(a2);
    }
    dispatch_time_t v21 = (char *)&unk_1000A3870 + 160 * *(unsigned int *)(a2 + 48);
    sub_10004CF1C(a2, (uint64_t)v21, 1);
    uint64_t v24 = *((void *)v21 + 3);
    int64_t v23 = (uint64_t *)(v21 + 24);
    uint64_t v22 = v24;
    *(void *)a2 = v24;
    if (v24) {
      *(void *)(v22 + 8) = a2;
    }
    uint64_t *v23 = a2;
    *(void *)(a2 + 8) = v23;
    *(_DWORD *)(a2 + 24) = *(_DWORD *)(a2 + 24) & 0xFFFFFFFC | 2;
    sub_100042680(12, a2);
    if (dword_1000A4DE4) {
      notify_post("com.apple.system.powermanagement.assertions.anychange");
    }
    global_queue = dispatch_get_global_queue(-32768, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000503B4;
    block[3] = &unk_100092960;
    int v27 = v18;
    void block[4] = v19;
    dispatch_async(global_queue, block);
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
}

void sub_1000503B4()
{
  if ((SimulateCrash() & 1) == 0 && os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
    sub_10006BFFC();
  }
}

void sub_100050414()
{
  if (byte_1000A3830)
  {
    if (sub_100050554())
    {
      if (qword_1000A3838)
      {
        dispatch_suspend((dispatch_object_t)qword_1000A3838);
        byte_1000A3831 = 0;
      }
      else
      {
        uint64_t v0 = sub_10005C968();
        qword_1000A3838 = (uint64_t)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v0);
        dispatch_source_set_event_handler((dispatch_source_t)qword_1000A3838, &stru_100092980);
        dispatch_source_set_cancel_handler((dispatch_source_t)qword_1000A3838, &stru_1000929A0);
      }
      uint64_t v1 = qword_1000A37D8;
      if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)CFStringRef v4 = 0;
        _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "System Assertion Timeout: Starting System Assertion Timer", v4, 2u);
      }
      xpc_object_t v2 = qword_1000A3838;
      dispatch_time_t v3 = dispatch_time(0, 1000000000 * dword_1000A3470);
      dispatch_source_set_timer(v2, v3, 0xFFFFFFFFFFFFFFFFLL, 0);
      dispatch_resume((dispatch_object_t)qword_1000A3838);
      byte_1000A3831 = 1;
    }
    else if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEBUG))
    {
      sub_10006C064();
    }
  }
}

uint64_t sub_100050554()
{
  if (!byte_1000A3830) {
    return 0;
  }
  int v0 = sub_100036004();
  uint64_t v1 = sub_10005A614();
  uint64_t result = 0;
  if (!v0 && !v1)
  {
    dispatch_time_t v3 = qword_1000A37D8;
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEBUG)) {
      sub_10006C098(v3);
    }
    return 1;
  }
  return result;
}

void sub_1000505CC(id a1)
{
  qword_1000A3838 = 0;
  byte_1000A3831 = 0;
}

void sub_100050600()
{
  if (byte_1000A3830) {
    BOOL v0 = qword_1000A3838 == 0;
  }
  else {
    BOOL v0 = 1;
  }
  if (!v0) {
    dispatch_source_cancel((dispatch_source_t)qword_1000A3838);
  }
}

void sub_100050624()
{
  if (!qword_1000A3840)
  {
    CFStringRef v0 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@/%@", @"/System/Library/CoreServices/powerd.bundle", @"com.apple.powerd.assertiontimeouts.plist");
    CFURLRef v1 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, v0, kCFURLPOSIXPathStyle, 0);
    xpc_object_t v2 = CFReadStreamCreateWithFile(kCFAllocatorDefault, v1);
    if (v2)
    {
      dispatch_time_t v3 = v2;
      CFReadStreamOpen(v2);
      CFPropertyListRef v4 = CFPropertyListCreateWithStream(kCFAllocatorDefault, v3, 0, 1uLL, 0, 0);
      qword_1000A3840 = (uint64_t)v4;
      if (v4)
      {
        CFPropertyListRef v5 = v4;
        int v6 = qword_1000A37D8;
        if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint8_t buf = 138412290;
          CFPropertyListRef v8 = v5;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "System Assertion Timer: assertion timeouts data: %@", buf, 0xCu);
        }
      }
      CFReadStreamClose(v3);
      CFRelease(v3);
    }
    if (v1) {
      CFRelease(v1);
    }
    if (v0) {
      CFRelease(v0);
    }
  }
}

void sub_100050794()
{
  if (!qword_1000A3848)
  {
    CFStringRef v0 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@/%@", @"/System/Library/CoreServices/powerd.bundle", @"com.apple.powerd.assertioncategories.plist");
    CFURLRef v1 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, v0, kCFURLPOSIXPathStyle, 0);
    xpc_object_t v2 = CFReadStreamCreateWithFile(kCFAllocatorDefault, v1);
    if (v2)
    {
      dispatch_time_t v3 = v2;
      CFReadStreamOpen(v2);
      CFPropertyListRef v4 = CFPropertyListCreateWithStream(kCFAllocatorDefault, v3, 0, 1uLL, 0, 0);
      qword_1000A3848 = (uint64_t)v4;
      if (v4)
      {
        CFPropertyListRef v5 = v4;
        int v6 = qword_1000A37D8;
        if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint8_t buf = 138412290;
          CFPropertyListRef v8 = v5;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "InitAssertionCategories: Categories Data: %@", buf, 0xCu);
        }
      }
      CFReadStreamClose(v3);
      CFRelease(v3);
    }
    if (v1) {
      CFRelease(v1);
    }
    if (v0) {
      CFRelease(v0);
    }
  }
}

void sub_100050904(void *a1)
{
  [a1 refresh];
  id v2 = [a1 experimentIdentifiersWithNamespaceName:@"COREOS_POWERD_ASSERTIONS"];
  if (v2)
  {
    dispatch_time_t v3 = v2;
    byte_1000A3850 = 1;
    qword_1000A3858 = (uint64_t)[v2 experimentId];
    id v4 = (id)qword_1000A3858;
    qword_1000A3860 = (uint64_t)[v3 treatmentId];
    id v5 = (id)qword_1000A3860;
    int v6 = qword_1000A37D8;
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138412546;
      uint64_t v8 = qword_1000A3858;
      __int16 v9 = 2112;
      uint64_t v10 = qword_1000A3860;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "System Assertion Timer: TrialExperimentId: %@, TrialTreatmentId: %@", (uint8_t *)&v7, 0x16u);
    }
  }
  else
  {
    byte_1000A3850 = 0;

    qword_1000A3858 = 0;
    qword_1000A3860 = 0;
  }
}

void sub_100050A38(void *a1)
{
  int v2 = _os_feature_enabled_impl();
  if (a1)
  {
    int v3 = v2;
    sub_100050904(a1);
    unsigned int v4 = objc_msgSend(objc_msgSend(a1, "levelForFactor:withNamespaceName:", @"FeatureEnabled", @"COREOS_POWERD_ASSERTIONS"), "BOOLeanValue");
    byte_1000A3830 = v4 & v3;
    id v5 = qword_1000A37D8;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT);
    if (v4 & v3)
    {
      if (v6)
      {
        int v10 = 67109376;
        int v11 = 1;
        __int16 v12 = 1024;
        int v13 = 1;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "System Assertion Timer: feature enabled, feature flag: %d, trial value: %d", (uint8_t *)&v10, 0xEu);
      }
      sub_100050624();
    }
    else
    {
      if (!v6) {
        return;
      }
      int v10 = 67109376;
      int v11 = v3;
      __int16 v12 = 1024;
      int v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "System Assertion Timer: feature disabled, feature flag: %d, trial value: %d", (uint8_t *)&v10, 0xEu);
    }
    if (byte_1000A3830)
    {
      unsigned int v8 = objc_msgSend(objc_msgSend(a1, "levelForFactor:withNamespaceName:", @"SystemAssertionTimeout", @"COREOS_POWERD_ASSERTIONS"), "longValue");
      dword_1000A3470 = v8;
      __int16 v9 = qword_1000A37D8;
      if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = 67109120;
        int v11 = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "System Assertion Timer: setting timeout value to %u", (uint8_t *)&v10, 8u);
      }
    }
  }
  else
  {
    int v7 = qword_1000A37D8;
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v1sub_100048D14(0x12u, 0) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "System Assertion Timer: feature disabled", (uint8_t *)&v10, 2u);
    }
    byte_1000A3830 = 0;
  }
}

void sub_100050C64()
{
  if (qword_1000A4E10 != -1) {
    dispatch_once(&qword_1000A4E10, &stru_1000929C0);
  }
}

void sub_100050C8C(id a1)
{
  uint64_t v3 = 0;
  unsigned int v4 = &v3;
  uint64_t v5 = 0x3052000000;
  BOOL v6 = sub_100050D90;
  int v7 = sub_100050DA0;
  unsigned int v8 = 0;
  unsigned int v8 = +[TRIClient clientWithIdentifier:223];
  CFURLRef v1 = (void *)v4[5];
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100050DAC;
  v2[3] = &unk_1000929E8;
  v2[4] = &v3;
  [v1 addUpdateHandlerForNamespaceName:@"COREOS_POWERD_ASSERTIONS" usingBlock:v2];
  sub_100050A38((void *)v4[5]);
  _Block_object_dispose(&v3, 8);
}

void sub_100050D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100050D90(uint64_t a1, uint64_t a2)
{
}

void sub_100050DA0(uint64_t a1)
{
}

void sub_100050DAC(uint64_t a1)
{
  int v2 = qword_1000A37D8;
  if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Trial value updates", v3, 2u);
  }
  sub_100050A38(*(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40));
}

void sub_100050E24()
{
  if (objc_opt_class())
  {
    CFStringRef v0 = sub_10005C968();
    qword_1000A3868 = (uint64_t)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v0);
    v6[0] = 0;
    v6[1] = v6;
    _DWORD v6[2] = 0x2020000000;
    char v7 = 0;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_100050F9C;
    handler[3] = &unk_100091458;
    void handler[4] = v6;
    dispatch_source_set_event_handler((dispatch_source_t)qword_1000A3868, handler);
    dispatch_source_set_cancel_handler((dispatch_source_t)qword_1000A3868, &stru_100092A08);
    CFURLRef v1 = qword_1000A37D8;
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Trial Initialization: Starting Timer", v4, 2u);
    }
    int v2 = qword_1000A3868;
    dispatch_time_t v3 = dispatch_time(0, 0);
    dispatch_source_set_timer(v2, v3, 1000000000 * dword_1000A3474, 0);
    dispatch_resume((dispatch_object_t)qword_1000A3868);
    _Block_object_dispose(v6, 8);
  }
  else
  {
    sub_100050A38(0);
  }
}

void sub_100050F9C(uint64_t a1)
{
  if (&_DMIsMigrationNeeded) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = DMIsMigrationNeeded();
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    int v2 = qword_1000A37D8;
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Trial Initialization: Deferred due to pending Data Migration.", v4, 2u);
    }
  }
  else
  {
    if (qword_1000A4E10 != -1) {
      dispatch_once(&qword_1000A4E10, &stru_1000929C0);
    }
    dispatch_time_t v3 = qword_1000A3868;
    dispatch_source_cancel(v3);
  }
}

void sub_100051080(id a1)
{
  qword_1000A3868 = 0;
}

void sub_1000510AC(uint64_t a1, xpc_object_t xdict)
{
  if (a1 && xdict)
  {
    int uint64 = xpc_dictionary_get_uint64(xdict, "systemAssertionTimeout");
    int v3 = uint64;
    if (uint64)
    {
      dword_1000A3470 = uint64;
      unsigned int v4 = qword_1000A37D8;
      if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
      {
        v5[0] = 67109120;
        v5[1] = v3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "System Assertion Timer: setting timeout value to %u", (uint8_t *)v5, 8u);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR))
  {
    sub_10006C120();
  }
}

void sub_10005119C()
{
  qword_1000A37D8 = (uint64_t)os_log_create("com.apple.powerd", "assertions");
  qword_1000A4E18 = (uint64_t)CFDictionaryCreateMutable(0, 10240, 0, 0);
  qword_1000A37E0 = (uint64_t)CFDictionaryCreateMutable(0, 0, 0, 0);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  uint64_t v1 = 0;
  qword_1000A4DF8 = (uint64_t)Mutable;
  qword_1000A4E20 = @"CPUBoundAssertion";
  *(void *)algn_1000A4E28 = @"PreventUserIdleSystemSleep";
  qword_1000A4E30 = @"DisableInflow";
  unk_1000A4E38 = @"ChargeInhibit";
  qword_1000A4E40 = @"DisableLowPowerBatteryWarnings";
  unk_1000A4E48 = @"PreventUserIdleDisplaySleep";
  qword_1000A4E50 = @"EnableIdleSleep";
  unk_1000A4E58 = @"PreventSystemSleep";
  qword_1000A4E60 = @"ExternalMedia";
  unk_1000A4E68 = @"UserIsActive";
  qword_1000A4E70 = @"ApplePushServiceTask";
  unk_1000A4E78 = @"BackgroundTask";
  qword_1000A4E80 = @"SystemIsActive";
  unk_1000A4E88 = @"InternalPreventSleep";
  qword_1000A4E90 = @"DisplayWake";
  unk_1000A4E98 = @"PreventDiskIdle";
  qword_1000A4EA0 = @"InternalPreventDisplaySleep";
  unk_1000A4EA8 = @"NetworkClientActive";
  qword_1000A4EB0 = @"InteractivePushServiceTask";
  unk_1000A4EB8 = @"AwakeOnReservePower";
  int v2 = &dword_1000A4520;
  do
  {
    *int v2 = v1;
    *((void *)v2 - 1) = 0;
    ++v1;
    v2 += 4;
  }
  while (v1 != 13);
  for (unsigned int i = 0; i != 20; ++i)
    sub_100048D14(i, 1);
  int out_token = 0;
  sub_100054F8C(&dword_1000A37E8);
  sub_1000550C8(&qword_1000A37F0);
  sub_10004E1CC(0);
  off_1000A3CB0(&unk_1000A3C30, 1);
  ++dword_1000A3FD8;
  sub_100048D14(0xBu, 0);
  unsigned int v4 = sub_10005C968();
  notify_register_dispatch("com.apple.powermanagement.collectbt", &out_token, v4, &stru_100092A28);
  sub_10005C968();
  os_state_add_handler();
  sub_100050E24();
  sub_100050794();
}

os_state_data_s *__cdecl sub_1000513D8(id a1, os_state_hints_s *a2)
{
  return 0;
}

void sub_1000513F4(uint64_t a1)
{
  uint64_t v2 = getpid();
  int v3 = v2;
  unsigned int v4 = *(_DWORD **)(a1 + 32);
  if (v4)
  {
    if (!*v4)
    {
      sub_100045028(v2, *(const void **)(a1 + 40), v4, 0, 0);
      if (*(_DWORD *)(a1 + 48))
      {
        char v7 = 0;
        if (!sub_1000454A8(v3, **(_DWORD **)(a1 + 32), (void **)&v7) && v7 != 0) {
          v7[6] |= 0x10u;
        }
      }
    }
  }
  else
  {
    sub_100045028(v2, *(const void **)(a1 + 40), &v8, 0, 0);
  }
  BOOL v6 = *(const void **)(a1 + 40);

  CFRelease(v6);
}

const void *sub_1000514B4(const void *a1)
{
  CFTypeID TypeID = CFBooleanGetTypeID();
  if (!a1) {
    return 0;
  }
  if (CFGetTypeID(a1) == TypeID) {
    return a1;
  }
  return 0;
}

void sub_1000514F8(uint64_t a1)
{
  sub_100046768(*(unsigned int *)(a1 + 40));
  dispatch_time_t v2 = dispatch_time(0, 1000000000 * *(void *)(a1 + 32));
  int v3 = sub_10005C968();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000515A4;
  block[3] = &unk_100091A80;
  int v5 = *(_DWORD *)(a1 + 40);
  dispatch_after(v2, v3, block);
}

void sub_1000515A4(uint64_t a1)
{
}

void sub_1000515AC(uint64_t a1)
{
}

void *sub_1000515B8(uint64_t a1, int a2)
{
  unsigned int v4 = (const void *)qword_1000A3800;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!v4) {
    return 0;
  }
  if (CFGetTypeID(v4) != TypeID) {
    return 0;
  }
  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)qword_1000A3800);
  if (!Count) {
    return 0;
  }
  uint64_t v7 = Count;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  if (!Mutable)
  {
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
      sub_10006C154();
    }
    return 0;
  }
  __int16 v9 = Mutable;
  int v10 = (const void **)malloc_type_calloc(v7, 8uLL, 0x6004044C4A2DFuLL);
  if (!v10)
  {
    uint64_t v39 = qword_1000A37D8;
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
      sub_10006C188(v7, v39, v40, v41, v42, v43, v44, v45);
    }
    return 0;
  }
  int v11 = v10;
  CFDictionaryGetKeysAndValues((CFDictionaryRef)qword_1000A3800, 0, v10);
  if (v7 >= 1)
  {
    if (a2 == 1) {
      CFStringRef v12 = @"Asssertion Duration Limit";
    }
    else {
      CFStringRef v12 = @"Aggregate Assertion Limit";
    }
    int v13 = (CFDictionaryRef *)v11;
    do
    {
      CFDictionaryRef v14 = *v13;
      CFTypeID v15 = CFDictionaryGetTypeID();
      if (v14 && CFGetTypeID(v14) == v15)
      {
        CFNumberRef Value = CFDictionaryGetValue(*v13, v12);
        CFArrayAppendValue(v9, Value);
      }
      ++v13;
      --v7;
    }
    while (v7);
  }
  v61.length = CFArrayGetCount(v9);
  v61.CFIndex location = 0;
  CFArraySortValues(v9, v61, (CFComparatorFunction)sub_10004C838, 0);
  uint64_t v17 = a1 + 32;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 38;
  uint64_t v18 = malloc_type_calloc(*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), 0x18uLL, 0x10600405D1B4BF9uLL);
  if (!v18)
  {
    CFMutableStringRef v46 = qword_1000A37D8;
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
      sub_10006C1F8(a1 + 32, v46, v47, v48, v49, v50, v51, v52);
    }
    CFRelease(v9);
    free(v11);
    return 0;
  }
  int64_t v19 = v18;
  unint64_t v20 = 0;
  dispatch_time_t v21 = v18;
  CFBooleanRef v54 = v11;
  do
  {
    if (v20 >= *(unsigned int *)(*(void *)(*(void *)v17 + 8) + 24)) {
      break;
    }
    *dispatch_time_t v21 = off_100092AA8[v20];
    v21 += 3;
    ++v20;
  }
  while (v20 != 33);
  CFIndex v22 = CFArrayGetCount(v9);
  if (v22 >= 1)
  {
    CFIndex v23 = v22;
    int v55 = 0;
    do
    {
      if (v20 >= *(_DWORD *)(*(void *)(*(void *)v17 + 8) + 24)) {
        break;
      }
      CFIndex v24 = v23--;
      int valuePtr = 0;
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v9, v23);
      CFTypeID v26 = CFNumberGetTypeID();
      if (ValueAtIndex)
      {
        if (CFGetTypeID(ValueAtIndex) == v26)
        {
          CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
          CFIndex v27 = CFArrayGetCount(v9);
          int v28 = valuePtr;
          if (v24 == v27 || valuePtr != v55)
          {
            v19[3 * (int)v20 + 1] = valuePtr;
            ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
            LODWORD(v2sub_100048D14(0x12u, 0) = v20 + 1;
            int v55 = v28;
          }
        }
      }
    }
    while ((unint64_t)(v23 + 1) > 1);
  }
  if (*(_DWORD *)(*(void *)(*(void *)v17 + 8) + 24))
  {
    unint64_t v29 = 0;
    int v30 = 0;
    uint64_t v31 = "aggregateassertion";
    if (a2 == 1) {
      uint64_t v31 = "singleassertion";
    }
    CFTypeID v56 = v31;
    int v32 = v19 + 1;
    while (1)
    {
      int v33 = (const void *)*(v32 - 1);
      CFTypeID v34 = CFStringGetTypeID();
      if (v33)
      {
        if (CFGetTypeID(v33) == v34) {
          break;
        }
      }
      if (*v32)
      {
        CFStringRef v35 = CFStringCreateWithFormat(0, 0, @"com.apple.powerd.exception.%s.bucket%d", v56, (*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + ~v30));
        int v37 = qword_1000A37D8;
        if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v38 = *v32;
          int valuePtr = 138412546;
          CFStringRef v58 = v35;
          __int16 v59 = 2048;
          uint64_t v60 = v38;
          _os_log_debug_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "Initialized the aggdKey %@ for limit %lld\n", (uint8_t *)&valuePtr, 0x16u);
        }
        ++v30;
        goto LABEL_40;
      }
LABEL_42:
      ++v29;
      v32 += 3;
      if (v29 >= *(unsigned int *)(*(void *)(*(void *)v17 + 8) + 24)) {
        goto LABEL_46;
      }
    }
    CFStringRef v35 = sub_100051AD4((const __CFString *)*(v32 - 1), a2);
    __int16 v36 = qword_1000A37D8;
    if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEBUG))
    {
      int valuePtr = 138412290;
      CFStringRef v58 = v35;
      _os_log_debug_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "Initialized the aggdKey %@\n", (uint8_t *)&valuePtr, 0xCu);
    }
LABEL_40:
    if (v35)
    {
      ADClientAddValueForScalarKey();
      CFRelease(v35);
    }
    goto LABEL_42;
  }
LABEL_46:
  free(v54);
  CFRelease(v9);
  return v19;
}

CFStringRef sub_100051AD4(const __CFString *a1, int a2)
{
  buffer[0] = 0;
  if (!CFStringGetCString(a1, buffer, 64, 0x8000100u)) {
    return 0;
  }
  if (a2 == 1) {
    int v3 = "singleassertion";
  }
  else {
    int v3 = "aggregateassertion";
  }
  if (strnstr(buffer, "com.apple.", 0xAuLL) == buffer) {
    uint64_t v4 = 10;
  }
  else {
    uint64_t v4 = 0;
  }
  return CFStringCreateWithFormat(0, 0, @"com.apple.powerd.exception.%s.%s", v3, &buffer[v4]);
}

int sub_100051BAC(id a1, __CFDictionary *a2)
{
  uint64_t ChannelID = IOReportChannelGetChannelID();
  uint64_t ValueAtIndex = IOReportArrayGetValueAtIndex();
  IOReportArrayGetValueAtIndex();
  IOReportArrayGetValueAtIndex();
  CFNumberRef Value = (unsigned int *)CFDictionaryGetValue((CFDictionaryRef)qword_1000A37E0, (const void *)(int)ChannelID);
  if (Value)
  {
    uint64_t v5 = (uint64_t)Value;
    uint64_t v6 = Value[33];
    if (v6 && ValueAtIndex >= v6)
    {
      int out_token = 0;
      if (!notify_register_check("com.apple.powermanagement.assertionexception", &out_token))
      {
        notify_set_state(out_token, ChannelID | 0x200000000);
        notify_post("com.apple.powermanagement.assertionexception");
        notify_cancel(out_token);
        int v8 = qword_1000A37D8;
        if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint8_t buf = 134217984;
          uint64_t v16 = ChannelID;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Aggregate assertion exception on pid %llu.\n", buf, 0xCu);
        }
      }
      __int16 v9 = *(const void **)(v5 + 112);
      if (v9)
      {
        CFTypeID TypeID = CFStringGetTypeID();
      }
      else
      {
        __int16 v9 = (const void *)sub_10004A614(2, v5);
        *(void *)(v5 + 112) = v9;
        CFTypeID TypeID = CFStringGetTypeID();
        if (!v9) {
          return 0;
        }
      }
      if (CFGetTypeID(v9) == TypeID)
      {
        CFTypeRef v11 = CFRetain(*(CFTypeRef *)(v5 + 112));
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100051D90;
        block[3] = &unk_1000927D8;
        void block[4] = v11;
        void block[5] = ChannelID;
        dispatch_async((dispatch_queue_t)qword_1000A4DD8, block);
      }
    }
  }
  return 0;
}

void sub_100051D90(uint64_t a1)
{
  ADClientAddValueForScalarKey();
  dispatch_time_t v2 = qword_1000A37D8;
  if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 2048;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Add to aggd string %@ for pid %llu\n", (uint8_t *)&v5, 0x16u);
  }
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void sub_100051E54(void *a1, int a2)
{
  dispatch_time_t v2 = (const void *)(*((_DWORD *)a1 + 13) & 0xFFFF7FFF);
  uint64_t value = 0;
  if (v2 >> 11 <= 4
    && CFDictionaryGetValueIfPresent((CFDictionaryRef)qword_1000A4E18, v2, (const void **)&value)
    && value == a1)
  {
    *((_DWORD *)a1 + 15) = 0;
    if (CFDictionaryGetValue(*((CFDictionaryRef *)a1 + 2), @"AsyncClientAssertionId")) {
      int v6 = 14;
    }
    else {
      int v6 = a2;
    }
    sub_100042680(v6, (uint64_t)a1);
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_1000A4E18, v2);
    __int16 v7 = (const void *)*((void *)a1 + 2);
    if (v7) {
      CFRelease(v7);
    }
    sub_100046048(*(_DWORD *)(*((void *)a1 + 9) + 96));
    uint64_t v8 = *((void *)a1 + 11);
    if (v8) {
      sub_100046048(*(_DWORD *)(v8 + 96));
    }
    __int16 v9 = *((void *)a1 + 12);
    if (v9)
    {
      int v10 = *((_DWORD *)a1 + 6);
      if ((v10 & 0x100) == 0)
      {
        *((_DWORD *)a1 + 6) = v10 | 0x100;
        dispatch_resume(v9);
        __int16 v9 = *((void *)a1 + 12);
      }
      dispatch_source_cancel(v9);
    }
    *((_OWORD *)a1 + 5) = 0u;
    *((_OWORD *)a1 + 6) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
    *((_OWORD *)a1 + 4) = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *(_OWORD *)a1 = 0u;
    free(a1);
  }
}

void sub_100051F60(uint64_t a1, int a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 48);
  int v5 = *(_DWORD *)(a1 + 24);
  if (v5)
  {
    sub_10004D338(a1, (uint64_t)&unk_1000A3870 + 160 * v4, 1, 1);
  }
  else
  {
    if ((v5 & 2) != 0)
    {
      uint64_t v8 = *(void *)a1;
      if (*(void *)a1) {
        *(void *)(v8 + 8) = *(void *)(a1 + 8);
      }
      **(void **)(a1 + 8) = v8;
      *(_DWORD *)(a1 + 24) = v5 & 0xFFFFFFFD;
      if (a2) {
        goto LABEL_9;
      }
      return;
    }
    sub_10004CF1C(a1, (uint64_t)&unk_1000A3870 + 160 * v4, 1);
  }
  if (*(_DWORD *)(a1 + 48) == 5)
  {
    int v6 = *(_DWORD *)(*(void *)(a1 + 72) + 96);
    if (v6 != getpid()) {
      sub_10004A25C();
    }
  }
  if (a2)
  {
LABEL_9:
    __int16 v7 = (void (*)(char *, uint64_t))*((void *)&unk_1000A3870 + 20 * v4 + 16);
    if (v7)
    {
      v7((char *)&unk_1000A3870 + 160 * v4, 1);
    }
  }
}

void sub_100052064(uint64_t a1, void *a2)
{
  if (*(_DWORD *)(a2[9] + 96) == *(_DWORD *)(a1 + 40))
  {
    sub_100051F60((uint64_t)a2, 0);
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 32);
    *a2 = v4;
    if (v4) {
      *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 32) + 8) = a2;
    }
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 32) = a2;
    a2[1] = *(void *)(*(void *)(a1 + 32) + 8) + 32;
  }
}

void sub_1000520E8(const void *a1, const __CFNumber *a2, uint64_t a3)
{
  double v32 = 0.0;
  CFTypeID TypeID = CFStringGetTypeID();
  if (a1 && CFGetTypeID(a1) == TypeID)
  {
    int valuePtr = 0;
    unsigned int v7 = *(_DWORD *)(a3 + 48);
    if (CFEqual(a1, @"AssertLevel"))
    {
      CFTypeID v8 = CFNumberGetTypeID();
      if (a2 && CFGetTypeID(a2) == v8)
      {
        CFNumberGetValue(a2, kCFNumberIntType, &valuePtr);
        int v9 = *(_DWORD *)(a3 + 24);
        if ((v9 & 2) == 0 || valuePtr != 255)
        {
          if (*(_DWORD *)(a3 + 24) & 2 | valuePtr)
          {
LABEL_38:
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a3 + 16), a1, a2);
            return;
          }
          unsigned int v10 = v9 | 2;
          goto LABEL_36;
        }
LABEL_35:
        unsigned int v10 = v9 & 0xFFFFFFFD;
LABEL_36:
        *(_DWORD *)(a3 + 24) = v10;
        int v23 = 2;
        goto LABEL_37;
      }
    }
    else
    {
      CFTypeRef v11 = (char *)&unk_1000A3870 + 160 * v7;
      if (CFEqual(a1, @"TimeoutSeconds"))
      {
        CFTypeID v12 = CFNumberGetTypeID();
        if (a2 && CFGetTypeID(a2) == v12)
        {
          CFNumberGetValue(a2, kCFNumberDoubleType, &v32);
          double v13 = v32;
          if ((*v11 & 0x10) != 0)
          {
            CFDictionaryRef v14 = (unint64_t *)((char *)&unk_1000A3870 + 160 * v7);
            double v15 = (double)v14[12];
            if (v32 == 0.0 || v32 > v15)
            {
              double v32 = (double)v14[12];
              double v13 = v15;
            }
          }
          if (v13 == 0.0) {
            unint64_t v16 = 0;
          }
          else {
            unint64_t v16 = sub_10005E2A8() + (unint64_t)v13;
          }
          *(void *)(a3 + 4sub_100048D14(0x12u, 0) = v16;
          int v9 = *(_DWORD *)(a3 + 24);
          if ((v9 & 2) == 0)
          {
            int v23 = 1;
LABEL_37:
            *(_DWORD *)(a3 + 56) |= v23;
            goto LABEL_38;
          }
          goto LABEL_35;
        }
      }
      else if (CFEqual(a1, @"AppliesToLimitedPower"))
      {
        CFTypeID v17 = CFBooleanGetTypeID();
        if (a2 && CFGetTypeID(a2) == v17 && (*v11 & 1) != 0)
        {
          if (kCFBooleanTrue != a2 || (int v18 = *(_DWORD *)(a3 + 24), (v18 & 4) != 0))
          {
            if (kCFBooleanFalse != a2) {
              goto LABEL_38;
            }
            int v25 = *(_DWORD *)(a3 + 24);
            if ((v25 & 4) == 0) {
              goto LABEL_38;
            }
            CFTypeID v26 = (char *)&unk_1000A3870 + 160 * v7;
            int v29 = *((_DWORD *)v26 + 38);
            CFIndex v27 = v26 + 152;
            int v28 = v29;
            if (v29) {
              _DWORD *v27 = v28 - 1;
            }
            unsigned int v19 = v25 & 0xFFFFFFFB;
          }
          else
          {
            ++*((_DWORD *)&unk_1000A3870 + 40 * v7 + 38);
            unsigned int v19 = v18 | 4;
          }
          *(_DWORD *)(a3 + 24) = v19;
          int v23 = 8;
          goto LABEL_37;
        }
      }
      else if (CFEqual(a1, @"AppliesOnLidClose"))
      {
        CFTypeID v20 = CFBooleanGetTypeID();
        if (a2 && CFGetTypeID(a2) == v20)
        {
          if (kCFBooleanTrue != a2 || (int v21 = *(_DWORD *)(a3 + 24), (v21 & 8) != 0))
          {
            if (kCFBooleanFalse != a2) {
              goto LABEL_38;
            }
            int v30 = *(_DWORD *)(a3 + 24);
            if ((v30 & 8) == 0) {
              goto LABEL_38;
            }
            unsigned int v22 = v30 & 0xFFFFFFF7;
          }
          else
          {
            unsigned int v22 = v21 | 8;
          }
          *(_DWORD *)(a3 + 24) = v22;
          int v23 = 16;
          goto LABEL_37;
        }
      }
      else if (CFEqual(a1, @"ExitSilentRunning"))
      {
        if (sub_1000514B4(a2))
        {
          if (kCFBooleanTrue != a2) {
            goto LABEL_38;
          }
          int v24 = *(_DWORD *)(a3 + 24);
          if ((v24 & 0x200) != 0) {
            goto LABEL_38;
          }
          *(_DWORD *)(a3 + 24) = v24 | 0x200;
          int v23 = 128;
          goto LABEL_37;
        }
      }
      else if (CFEqual(a1, @"AssertionOnBehalfOfPID"))
      {
        if (sub_100016038(a2))
        {
          int v23 = 256;
          goto LABEL_37;
        }
      }
      else if (!CFEqual(a1, @"AssertType"))
      {
        if (CFEqual(a1, @"AssertName"))
        {
          int v23 = 32;
        }
        else if (CFEqual(a1, @"ResourcesUsed") || CFEqual(a1, @"AllowsDeviceRestart"))
        {
          int v23 = 64;
        }
        else
        {
          if (!CFEqual(a1, @"FrameworkBundleID")) {
            goto LABEL_38;
          }
          int v23 = 512;
        }
        goto LABEL_37;
      }
    }
  }
}

uint64_t sub_1000524C0(uint64_t a1)
{
  uint64_t v2 = 3758097090;
  unint64_t v3 = sub_10005E2A8();
  int v51 = 0;
  double v49 = 0.0;
  uint64_t value = 0;
  uint64_t v4 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"AssertType");
  unsigned int v5 = sub_100048944(v4);
  if ((v5 & 0x80000000) != 0) {
    return v2;
  }
  unsigned int v6 = v5;
  int v52 = 0;
  unint64_t valuePtr = 0;
  *(_DWORD *)(a1 + 48) = v5;
  if (CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"AsyncClientAssertionId"))
  {
    CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"GlobalUniqueID");
    if (!v7)
    {
      if (os_log_type_enabled((os_log_t)qword_1000A37D8, OS_LOG_TYPE_ERROR)) {
        sub_10006C278();
      }
      return v2;
    }
    CFNumberGetValue(v7, kCFNumberSInt64Type, &valuePtr);
    *(void *)(*(void *)(a1 + 72) + 144) = valuePtr;
  }
  else
  {
    unint64_t valuePtr = (v6 << 16) | (v3 << 32) | *(unsigned __int16 *)(a1 + 52);
    CFNumberRef v8 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
    if (v8)
    {
      CFNumberRef v9 = v8;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), @"GlobalUniqueID", v8);
      CFRelease(v9);
    }
  }
  CFNumberRef v10 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a1 + 52));
  if (v10)
  {
    CFNumberRef v11 = v10;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), @"AssertionId", v10);
    CFRelease(v11);
  }
  uint64_t v12 = *(void *)(a1 + 72);
  double v13 = *(const void **)(v12 + 80);
  if (v13)
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), @"Process Name", v13);
    uint64_t v12 = *(void *)(a1 + 72);
  }
  CFNumberRef v14 = CFNumberCreate(0, kCFNumberIntType, (const void *)(v12 + 96));
  if (v14)
  {
    CFNumberRef v15 = v14;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), @"AssertPID", v14);
    CFRelease(v15);
  }
  *(void *)(a1 + 32) = 0;
  if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 16), @"AssertStartWhen", (const void **)&value)
    && (unint64_t v16 = value, TypeID = CFDateGetTypeID(), v16)
    && CFGetTypeID(v16) == TypeID
    && (Current = CFAbsoluteTimeGetCurrent(), double v19 = Current - CFDateGetAbsoluteTime((CFDateRef)value), v19 > 0.0))
  {
    unint64_t v20 = v3 - (unint64_t)v19;
    *(void *)(a1 + 32) = v20;
  }
  else
  {
    unint64_t v20 = *(void *)(a1 + 32);
  }
  unsigned int v21 = v6;
  if (!v20)
  {
    CFAbsoluteTime v22 = CFAbsoluteTimeGetCurrent();
    CFDateRef v23 = CFDateCreate(0, v22);
    uint64_t value = v23;
    if (v23)
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), @"AssertStartWhen", v23);
      CFRelease(value);
    }
    *(void *)(a1 + 32) = v3;
  }
  CFNumberRef v24 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"AssertLevel");
  CFTypeID v25 = CFNumberGetTypeID();
  if (v24 && CFGetTypeID(v24) == v25)
  {
    CFNumberGetValue(v24, kCFNumberIntType, &v52);
    if (!v52)
    {
      CFTypeID v26 = (char *)&unk_1000A3870 + 160 * v6;
      uint64_t v29 = *((void *)v26 + 3);
      CFIndex v27 = (uint64_t *)(v26 + 24);
      uint64_t v28 = v29;
      *(void *)a1 = v29;
      if (v29) {
        *(void *)(v28 + 8) = a1;
      }
      uint64_t v2 = 0;
      uint64_t *v27 = a1;
      *(void *)(a1 + 8) = v27;
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 24) & 0xFFFFFFFC | 2;
      return v2;
    }
  }
  else
  {
    int v51 = 255;
    CFNumberRef v30 = CFNumberCreate(0, kCFNumberIntType, &v51);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), @"AssertLevel", v30);
    CFRelease(v30);
  }
  uint64_t v31 = (char *)&unk_1000A3870 + 160 * v6;
  if (*v31)
  {
    CFBooleanRef v32 = (CFBooleanRef)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"AppliesToLimitedPower");
    CFTypeID v33 = CFBooleanGetTypeID();
    if (v32)
    {
      if (CFGetTypeID(v32) == v33 && v32 == kCFBooleanTrue) {
        *(_DWORD *)(a1 + 24) |= 4u;
      }
    }
  }
  if (*(_DWORD *)(a1 + 48) == 14)
  {
    uint64_t v47 = kCFBooleanFalse;
    if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 16), @"ExitSilentRunning", (const void **)&v47))
    {
      if (v47 == kCFBooleanTrue) {
        *(_DWORD *)(a1 + 24) |= 0x200u;
      }
    }
  }
  CFNumberRef v34 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"AssertionOnBehalfOfPID");
  CFTypeID v35 = CFNumberGetTypeID();
  if (v34 && CFGetTypeID(v34) == v35) {
    CFNumberGetValue(v34, kCFNumberIntType, (void *)(a1 + 80));
  }
  CFBooleanRef v36 = (CFBooleanRef)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"AppliesOnLidClose");
  CFTypeID v37 = CFBooleanGetTypeID();
  if (v36 && CFGetTypeID(v36) == v37 && v36 == kCFBooleanTrue) {
    *(_DWORD *)(a1 + 24) |= 8u;
  }
  CFNumberRef v38 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"TimeoutSeconds");
  CFTypeID v39 = CFNumberGetTypeID();
  if (v38 && CFGetTypeID(v38) == v39) {
    CFNumberGetValue(v38, kCFNumberDoubleType, &v49);
  }
  double v40 = v49;
  if ((*v31 & 0x10) != 0)
  {
    uint64_t v41 = (unint64_t *)((char *)&unk_1000A3870 + 160 * v6);
    double v42 = (double)v41[12];
    if (v49 == 0.0 || v49 > v42)
    {
      double v49 = (double)v41[12];
      double v40 = v42;
    }
  }
  if (v40 == 0.0)
  {
    sub_10004CE88(a1, (char *)&unk_1000A3870 + 160 * v6, 1);
  }
  else
  {
    *(void *)(a1 + 4sub_100048D14(0x12u, 0) = *(void *)(a1 + 32) + (unint64_t)v40;
    sub_10004D5CC(a1, (uint64_t)&unk_1000A3870 + 160 * v6, 1, 1);
  }
  if (v6 == 5)
  {
    uint64_t v43 = *(const void **)(*(void *)(a1 + 72) + 80);
    CFTypeID v44 = CFStringGetTypeID();
    if (v43)
    {
      if (CFGetTypeID(v43) == v44 && (CFEqual(v43, @"ME32ExporterHel") || CFEqual(v43, @"MRMovieServer"))) {
        sub_100048B5C();
      }
    }
  }
  uint64_t v45 = (void (*)(unsigned char *, void))*((void *)&unk_1000A3870 + 20 * v21 + 16);
  if (v45) {
    v45(v31, 0);
  }
  if (qword_1000A3840
    && !byte_1000A3831
    && !CFDictionaryContainsKey((CFDictionaryRef)qword_1000A3840, *(const void **)(*(void *)(a1 + 72) + 80)))
  {
    sub_100050414();
  }
  nullsub_4(0, a1);
  return 0;
}

void sub_100052A98(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  }
  uint64_t v4 = *(unsigned int *)(a2 + 48);
  if (v4 <= 0x13) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 16), @"AssertionTrueType", (const void *)qword_1000A4E20[v4]);
  }
  unsigned int v5 = *(__CFArray **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  unsigned int v6 = *(const void **)(a2 + 16);

  CFArrayAppendValue(v5, v6);
}

void sub_100052B34(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 40);
  if ((*(unsigned char *)(a2 + 24) & 2) != 0)
  {
    if (v3 != 1) {
      return;
    }
  }
  else if (v3)
  {
    return;
  }
  CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 32);
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, (const void *)(*(void *)(a2 + 72) + 96));
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v4, v5);
  CFNumberRef v7 = Value;
  if (Value)
  {
    CFMutableArrayRef Mutable = (void *)CFDictionaryGetValue(Value, @"PerTaskAssertions");
    CFNumberRef v9 = v7;
  }
  else
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    CFNumberRef v9 = CFDictionaryCreateMutable(kCFAllocatorDefault, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFDictionarySetValue(v9, @"PerTaskAssertions", Mutable);
    CFDictionarySetValue(v9, @"AssertPID", v5);
    CFDictionarySetValue(v4, v5, v9);
  }
  uint64_t v10 = *(unsigned int *)(a2 + 48);
  if (v10 <= 0x13) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 16), @"AssertionTrueType", (const void *)qword_1000A4E20[v10]);
  }
  CFArrayAppendValue((CFMutableArrayRef)Mutable, *(const void **)(a2 + 16));
  CFRelease(v5);
  if (!v7)
  {
    CFRelease(Mutable);
    CFRelease(v9);
  }
}

void sub_100052CAC(uint64_t a1, unint64_t a2)
{
  if (*(_DWORD *)(a1 + 40))
  {
    if (**(unsigned char **)(a1 + 32)) {
      sub_10004B528(a2, 0);
    }
    sub_10004B250(a2);
  }
  else
  {
    if (*(unsigned char *)(a2 + 24) & 4) == 0 && (**(unsigned char **)(a1 + 32)) {
      sub_10004B528(a2, 1);
    }
    sub_10004B484(a2);
  }
}

void sub_100052D40(id a1, assertion *a2)
{
}

void sub_100052D48(id a1, assertion *a2)
{
}

void sub_100052D50(uint64_t a1)
{
}

void sub_100052D58(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 56) = 0;
}

void sub_100052DA0(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_100052E18(id a1)
{
  qword_1000A4EF8 = objc_alloc_init(USBDeviceMode);

  _objc_release_x1();
}

id sub_100053188(uint64_t a1)
{
  [*(id *)(a1 + 32) setIsACPowered:IOPSDrawingUnlimitedPower()];
  uint64_t v2 = (void *)qword_1000A45E8;
  if (os_log_type_enabled((os_log_t)qword_1000A45E8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(void **)(a1 + 32);
    CFDictionaryRef v4 = v2;
    v6[0] = 67109120;
    v6[1] = [v3 isACPowered];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Power source update. AC powered %d", (uint8_t *)v6, 8u);
  }
  return [*(id *)(a1 + 32) evaluatePowerAssertion];
}

uint64_t sub_100053498(void *a1, io_iterator_t iterator)
{
  uint64_t result = IOIteratorNext(iterator);
  if (result)
  {
    uint64_t v5 = result;
    do
    {
      [a1 _handleServiceAdded:v5];
      IOObjectRelease(v5);
      uint64_t result = IOIteratorNext(iterator);
      uint64_t v5 = result;
    }
    while (result);
  }
  return result;
}

id sub_1000538F4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return [a1 _handleNotificationForService:a2 messageType:a3 messageArgument:a4];
}

void sub_100053E7C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) powerassertionID]
    || ([*(id *)(a1 + 32) powerassertion] & 1) != 0)
  {
    uint64_t v2 = qword_1000A45E8;
    if (os_log_type_enabled((os_log_t)qword_1000A45E8, OS_LOG_TYPE_DEBUG)) {
      sub_10006C4A4(v2);
    }
  }
  else
  {
    int v3 = sub_100049814(@"PreventUserIdleSystemSleep", @"Powerd - prevent sleep while in usb device mode", 0, 0, 0, 0, 0.0);
    CFDictionaryRef v4 = qword_1000A45E8;
    if (os_log_type_enabled((os_log_t)qword_1000A45E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Raising assertion for usb device mode", v6, 2u);
    }
    uint64_t v5 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    CFArrayAppendValue(v5, @"perf-unrestricted");
    CFDictionarySetValue(v3, @"ResourcesUsed", v5);
    CFDictionarySetValue(v3, @"AllowsDeviceRestart", kCFBooleanTrue);
    sub_1000499A4(v3, *(void *)(a1 + 32) + 16);
    [*(id *)(a1 + 32) setPowerassertion:1];
  }
}

id sub_1000540A8(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) powerassertionID];
  if (result)
  {
    int v3 = qword_1000A45E8;
    if (os_log_type_enabled((os_log_t)qword_1000A45E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CFDictionaryRef v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Releasing power assertion for usb device mode", v4, 2u);
    }
    sub_10004A150((int)[*(id *)(a1 + 32) powerassertionID]);
    [*(id *)(a1 + 32) setPowerassertionID:0];
    return [*(id *)(a1 + 32) setPowerassertion:0];
  }
  return result;
}

void sub_1000543EC()
{
  unsigned int valuePtr = -1;
  v45[0] = -1;
  io_registry_entry_t v0 = sub_1000212AC();
  CFDictionaryRef CFProperty = (const __CFDictionary *)IORegistryEntryCreateCFProperty(v0, @"Power Status", kCFAllocatorDefault, 0);
  if (!CFProperty) {
    return;
  }
  CFDictionaryRef v2 = CFProperty;
  CFIndex Count = CFDictionaryGetCount(CFProperty);
  if (!Count) {
    goto LABEL_15;
  }
  CFIndex v4 = Count;
  size_t v5 = 8 * Count;
  unsigned int v6 = (const void **)malloc_type_malloc(8 * Count, 0x6004044C4A2DFuLL);
  CFNumberRef v7 = (const void **)malloc_type_malloc(v5, 0x6004044C4A2DFuLL);
  CFNumberRef v8 = v7;
  if (v6) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    uint64_t v10 = 0;
    CFNumberRef v11 = 0;
    if (v6) {
      goto LABEL_70;
    }
    if (!v7) {
      goto LABEL_11;
    }
LABEL_10:
    free(v8);
    goto LABEL_11;
  }
  CFDictionaryGetKeysAndValues(v2, v6, v7);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, v4, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    uint64_t v10 = 0;
    CFNumberRef v11 = 0;
    goto LABEL_70;
  }
  uint64_t v41 = v6;
  CFDictionaryRef theDict = Mutable;
  if (v4 >= 1)
  {
    CFNumberRef v14 = v8;
    double v13 = v6;
    for (CFIndex i = v4; i; --i)
    {
      CFTypeRef v16 = *v13;
      int v17 = CFEqual(*v13, @"Thermal_Level_Warning");
      CFStringRef v18 = @"ThermalWarning";
      if (v17
        || (v19 = CFEqual(v16, @"CPU_Power_Limits"), CFStringRef v18 = @"CPUPower", v19)
        || (v20 = CFEqual(v16, @"Performance_Warning"), CFStringRef v18 = @"PerformanceWarning", v20))
      {
        CFStringRef v21 = SCDynamicStoreKeyCreate(kCFAllocatorDefault, @"%@%@/%@", kSCDynamicStoreDomainState, @"/IOKit/Power", v18);
        if (v21)
        {
          CFStringRef v22 = v21;
          CFDictionarySetValue(theDict, v21, *v14);
          CFRelease(v22);
        }
      }
      if (CFStringCompare((CFStringRef)*v13, @"Thermal_Level_Warning", 0))
      {
        if (CFStringCompare((CFStringRef)*v13, @"Performance_Warning", 0)) {
          goto LABEL_42;
        }
        CFDateRef v23 = *v14;
        CFTypeID TypeID = CFNumberGetTypeID();
        if (!v23) {
          goto LABEL_42;
        }
        if (CFGetTypeID(v23) != TypeID) {
          goto LABEL_42;
        }
        CFNumberGetValue((CFNumberRef)*v14, kCFNumberIntType, &valuePtr);
        uint64_t v26 = valuePtr;
        if (valuePtr == dword_1000A4F08) {
          goto LABEL_42;
        }
      }
      else
      {
        CFIndex v27 = *v14;
        CFTypeID v28 = CFNumberGetTypeID();
        if (!v27) {
          goto LABEL_42;
        }
        if (CFGetTypeID(v27) != v28) {
          goto LABEL_42;
        }
        CFNumberGetValue((CFNumberRef)*v14, kCFNumberIntType, v45);
        if (v45[0] == dword_1000A3484) {
          goto LABEL_42;
        }
        BOOL v29 = v45[0] == 100 || v45[0] == 110;
        int v30 = v29;
        sub_100054D5C(32, v30);
        sub_100055328();
        uint64_t v26 = v45[0];
        if (v45[0] == 255) {
          goto LABEL_42;
        }
      }
      nullsub_4(v26, v25);
LABEL_42:
      ++v14;
      ++v13;
    }
  }
  uint64_t v31 = SCDynamicStoreCreate(0, @"IOKit Power", 0, 0);
  uint64_t v10 = v31;
  if (!v31)
  {
LABEL_69:
    unsigned int v6 = v41;
    CFNumberRef v11 = theDict;
    goto LABEL_70;
  }
  CFNumberRef v11 = theDict;
  SCDynamicStoreSetMultiple(v31, theDict, 0, 0);
  if (v4 < 1) {
    goto LABEL_70;
  }
  int v32 = 0;
  CFTypeID v33 = (CFStringRef *)v41;
  do
  {
    if (CFStringCompare(*v33, @"Thermal_Level_Warning", 0))
    {
      if (CFEqual(*v33, @"Performance_Warning"))
      {
        if (valuePtr == dword_1000A4F08) {
          goto LABEL_59;
        }
        dword_1000A4F08 = valuePtr;
        if (valuePtr == 100) {
          int v32 = 1;
        }
      }
    }
    else
    {
      if (v45[0] == dword_1000A3484) {
        goto LABEL_59;
      }
      dword_1000A3484 = v45[0];
      if (v45[0] == 110 || v45[0] == 100) {
        int v32 = 1;
      }
    }
    CFStringRef v34 = *v33;
    int v35 = CFEqual(*v33, @"Thermal_Level_Warning");
    CFBooleanRef v36 = "com.apple.system.power.thermal_warning";
    if (v35
      || (int v37 = CFEqual(v34, @"CPU_Power_Limits"), v36 = "com.apple.system.power.CPU", v37)
      || (int v38 = CFEqual(v34, @"Performance_Warning"), v36 = "com.apple.system.power.performance_warning", v38))
    {
      notify_post(v36);
    }
LABEL_59:
    ++v33;
    --v4;
  }
  while (v4);
  if (!v32) {
    goto LABEL_69;
  }
  if (!mkdir("/private/var/run/thermal", 0x1FFu)) {
    lchmod("/private/var/run/thermal", 0x1FFu);
  }
  int v39 = open("/private/var/run/thermal/.thermalpressure", 536871426, 511);
  unsigned int v6 = v41;
  CFNumberRef v11 = theDict;
  if ((v39 & 0x80000000) == 0)
  {
    int v40 = v39;
    memset(&v43, 0, sizeof(v43));
    if (!fstat(v39, &v43) && v43.st_nlink == 1) {
      fchmod(v40, 0x1FFu);
    }
    close(v40);
  }
LABEL_70:
  free(v6);
  if (v8) {
    goto LABEL_10;
  }
LABEL_11:
  if (v11) {
    CFRelease(v11);
  }
  if (v10) {
    CFRelease(v10);
  }
LABEL_15:
  CFRelease(v2);
}

void sub_1000548E4()
{
  io_registry_entry_t v0 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INTERACTIVE, 0);
  qword_1000A4F10 = (uint64_t)dispatch_queue_create("com.apple.powerd.sleepwakeresource", v0);
  IONotificationPortRef thePortRef = 0;
  io_object_t notifier = 0;
  dword_1000A4F18 = IORegisterForSystemPower(0, &thePortRef, (IOServiceInterestCallback)sub_100054974, &notifier);
  if (dword_1000A4F18)
  {
    if (thePortRef) {
      IONotificationPortSetDispatchQueue(thePortRef, (dispatch_queue_t)qword_1000A4F10);
    }
  }
}

void sub_100054974(int a1, int a2, int a3, intptr_t notificationID)
{
  HIDWORD(v4) = a3;
  LODWORD(v4) = a3 + 536870288;
  switch((v4 >> 4))
  {
    case 0u:
      goto LABEL_3;
    case 1u:
      sub_100054A7C();
LABEL_3:
      io_connect_t v6 = dword_1000A4F18;
      IOAllowPowerChange(v6, notificationID);
      break;
    case 2u:
      sub_100054B14();
      break;
    case 9u:
      sub_100054C94();
      break;
    case 0xBu:
      sub_100054B9C();
      break;
    default:
      return;
  }
}

id sub_100054A7C()
{
  io_registry_entry_t v0 = qword_1000A4F20;
  if (os_log_type_enabled((os_log_t)qword_1000A4F20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CFDictionaryRef v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Taking a sleep in progress resource hint", v2, 2u);
  }
  if (qword_1000A45F0) {
    return [(id)qword_1000A45F0 updateState:1];
  }
  id result = [objc_alloc((Class)ResourceHint) initWithResourceType:0 andState:1];
  qword_1000A45F0 = (uint64_t)result;
  return result;
}

void sub_100054B14()
{
  io_registry_entry_t v0 = (void *)qword_1000A45F0;
  if (qword_1000A45F0)
  {
    uint64_t v1 = qword_1000A4F20;
    if (os_log_type_enabled((os_log_t)qword_1000A4F20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CFDictionaryRef v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Releasing a sleep in progress resource hint", v2, 2u);
      io_registry_entry_t v0 = (void *)qword_1000A45F0;
    }
    [v0 updateState:0];
  }
}

id sub_100054B9C()
{
  io_registry_entry_t v0 = qword_1000A4F20;
  if (os_log_type_enabled((os_log_t)qword_1000A4F20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint8_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Taking a wake in progress resource hint", buf, 2u);
  }
  if (qword_1000A45F8)
  {
    id result = [(id)qword_1000A45F8 updateState:1];
  }
  else
  {
    id result = [objc_alloc((Class)ResourceHint) initWithResourceType:1 andState:1];
    qword_1000A45F8 = (uint64_t)result;
  }
  CFDictionaryRef v2 = (void *)qword_1000A45F0;
  if (qword_1000A45F0)
  {
    int v3 = qword_1000A4F20;
    if (os_log_type_enabled((os_log_t)qword_1000A4F20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Releasing a sleep in progress resource hint", v4, 2u);
      CFDictionaryRef v2 = (void *)qword_1000A45F0;
    }
    return [v2 updateState:0];
  }
  return result;
}

void sub_100054C94()
{
  io_registry_entry_t v0 = (void *)qword_1000A45F8;
  if (qword_1000A45F8)
  {
    uint64_t v1 = qword_1000A4F20;
    if (os_log_type_enabled((os_log_t)qword_1000A4F20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CFDictionaryRef v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Releasing a wake in progress reosurce hint", v2, 2u);
      io_registry_entry_t v0 = (void *)qword_1000A45F8;
    }
    [v0 updateState:0];
  }
}

void sub_100054D1C()
{
  qword_1000A4F20 = (uint64_t)os_log_create("com.apple.powerd", "sleepWakeResource");

  sub_1000548E4();
}

uint64_t sub_100054D5C(uint64_t result, int a2)
{
  if (a2) {
    uint64_t v2 = qword_1000A4F28 | (int)result;
  }
  else {
    uint64_t v2 = qword_1000A4F28 & ~result;
  }
  qword_1000A4F28 = v2;
  return result;
}

BOOL sub_100054D8C(const void *a1)
{
  CFDictionaryRef v2 = (const __CFDictionary *)IOPMCopySystemPowerSettings();
  BOOL result = 0;
  if (a1)
  {
    if (v2)
    {
      CFBooleanRef Value = (CFBooleanRef)CFDictionaryGetValue(v2, a1);
      CFRelease(v2);
      return Value == kCFBooleanTrue;
    }
  }
  return result;
}

CFNumberRef sub_100054DEC(const void *a1)
{
  CFNumberRef result = 0;
  int valuePtr = 0;
  if (a1 && qword_1000A4F30)
  {
    if (sub_100036004()) {
      CFStringRef v3 = @"AC Power";
    }
    else {
      CFStringRef v3 = @"Battery Power";
    }
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_1000A4F30, v3);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (Value && CFGetTypeID(Value) == TypeID)
    {
      CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(Value, a1);
      if (result)
      {
        CFNumberGetValue(result, kCFNumberIntType, &valuePtr);
        return (const __CFNumber *)(valuePtr != 0);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100054EA8(const void *a1, void *a2)
{
  uint64_t result = 3758097090;
  if (a1 && qword_1000A4F30)
  {
    if (sub_100036004()) {
      CFStringRef v5 = @"AC Power";
    }
    else {
      CFStringRef v5 = @"Battery Power";
    }
    CFDictionaryRef Value = CFDictionaryGetValue((CFDictionaryRef)qword_1000A4F30, v5);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (Value
      && CFGetTypeID(Value) == TypeID
      && (v8 = CFDictionaryGetValue((CFDictionaryRef)Value, a1), CFTypeID v9 = CFNumberGetTypeID(), v8))
    {
      CFTypeID v10 = v9;
      CFTypeID v11 = CFGetTypeID(v8);
      uint64_t result = 3758097084;
      if (v11 == v10)
      {
        CFNumberGetValue((CFNumberRef)v8, kCFNumberSInt64Type, a2);
        return 0;
      }
    }
    else
    {
      return 3758097084;
    }
  }
  return result;
}

uint64_t sub_100054F8C(_DWORD *a1)
{
  uint64_t v1 = 3758097084;
  if (a1 && qword_1000A4F30)
  {
    CFDictionaryRef Value = CFDictionaryGetValue((CFDictionaryRef)qword_1000A4F30, (const void *)qword_1000A4F38);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (Value)
    {
      if (CFGetTypeID(Value) == TypeID) {
        uint64_t v5 = (uint64_t)Value;
      }
      else {
        uint64_t v5 = 0;
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
    if (sub_100055020(v5, @"Display Sleep Timer", kCFNumberSInt32Type, a1)) {
      return 0;
    }
    else {
      return 3758097084;
    }
  }
  return v1;
}

uint64_t sub_100055020(uint64_t result, const void *a2, CFNumberType a3, _DWORD *a4)
{
  if (result)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)result, a2);
    *a4 = 0;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (Value)
    {
      if (CFGetTypeID(Value) == TypeID)
      {
        CFNumberGetValue(Value, a3, a4);
        return 1;
      }
      CFTypeID v8 = CFBooleanGetTypeID();
      if (CFGetTypeID(Value) == v8)
      {
        *a4 = CFBooleanGetValue(Value);
        return 1;
      }
    }
    else
    {
      CFBooleanGetTypeID();
    }
    return 0;
  }
  return result;
}

uint64_t sub_1000550C8(_DWORD *a1)
{
  uint64_t v1 = 3758097084;
  if (a1 && qword_1000A4F30)
  {
    if (qword_1000A3488 == -1)
    {
      CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)qword_1000A4F30, (const void *)qword_1000A4F38);
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (Value)
      {
        if (CFGetTypeID(Value) == TypeID) {
          uint64_t v5 = (uint64_t)Value;
        }
        else {
          uint64_t v5 = 0;
        }
      }
      else
      {
        uint64_t v5 = 0;
      }
      if (sub_100055020(v5, @"System Sleep Timer", kCFNumberSInt32Type, a1)) {
        return 0;
      }
      else {
        return 3758097084;
      }
    }
    else
    {
      uint64_t v1 = 0;
      *(void *)a1 = qword_1000A3488;
    }
  }
  return v1;
}

void sub_100055178(io_connect_t a1, int a2)
{
  if (a1)
  {
    io_connect_t v3 = 0;
    goto LABEL_4;
  }
  a1 = IOPMFindPowerManagement(0);
  io_connect_t v3 = a1;
  if (a1)
  {
LABEL_4:
    IOPMSetAggressiveness(a1, 1uLL, (dword_1000A3490 * a2));
    if (v3)
    {
      IOServiceClose(v3);
    }
    return;
  }
  unint64_t v4 = qword_1000A4600;
  if (os_log_type_enabled((os_log_t)qword_1000A4600, OS_LOG_TYPE_ERROR)) {
    sub_10006C4E8(v4);
  }
}

void sub_10005520C(int a1)
{
  int v2 = 0;
  if (sub_100054F8C(&v2))
  {
    if (os_log_type_enabled((os_log_t)qword_1000A4600, OS_LOG_TYPE_ERROR)) {
      sub_10006C52C();
    }
  }
  else
  {
    dword_1000A3490 = a1;
    sub_100055178(0, v2);
  }
}

uint64_t sub_100055280(CFPropertyListRef value)
{
  CFPreferencesSetValue(@"AlarmData", value, @"com.apple.PowerManagement", kCFPreferencesAnyUser, kCFPreferencesCurrentHost);

  return CFPreferencesSynchronize(@"com.apple.PowerManagement", kCFPreferencesAnyUser, kCFPreferencesCurrentHost);
}

CFPropertyListRef sub_1000552FC()
{
  return CFPreferencesCopyValue(@"AlarmData", @"com.apple.PowerManagement", kCFPreferencesAnyUser, kCFPreferencesCurrentHost);
}

void sub_100055328()
{
  if (!qword_1000A4F30) {
    return;
  }
  uint64_t v0 = qword_1000A4F28;
  if (qword_1000A4F40 == qword_1000A4F28) {
    return;
  }
  uint64_t v1 = qword_1000A3488;
  if ((qword_1000A4F28 ^ qword_1000A4F40) == 4 && qword_1000A3488 != -1)
  {
    io_connect_t v3 = dword_1000A4F48;
    if (dword_1000A4F48)
    {
LABEL_11:
      if ((v0 & 4) != 0) {
        unint64_t v4 = 0;
      }
      else {
        unint64_t v4 = v1;
      }
      if (!IOPMSetAggressiveness(v3, 3uLL, v4))
      {
        qword_1000A4F40 = qword_1000A4F28;
        return;
      }
      dword_1000A4F48 = 0;
      uint64_t v0 = qword_1000A4F28;
      goto LABEL_16;
    }
    io_connect_t v3 = IOPMFindPowerManagement(0);
    dword_1000A4F48 = v3;
    uint64_t v0 = qword_1000A4F28;
    if (v3)
    {
      uint64_t v1 = qword_1000A3488;
      goto LABEL_11;
    }
  }
LABEL_16:
  qword_1000A4F40 = v0;
  CFDictionaryRef v5 = (const __CFDictionary *)qword_1000A4F30;
  CFStringRef v6 = (const __CFString *)qword_1000A4F38;

  sub_10005540C(v5, v6);
}

uint64_t sub_10005540C(const __CFDictionary *a1, const __CFString *a2)
{
  uint64_t v2 = 3758097084;
  uint64_t valuePtr = -1;
  uint64_t v25 = -1;
  int v22 = 0;
  int v23 = 1;
  if (!a1) {
    return 3758097090;
  }
  if (!a2) {
    a2 = @"AC Power";
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, a2);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID)
  {
    CFNumberRef v5 = (const __CFNumber *)CFDictionaryGetValue(Value, @"System Sleep Timer");
    CFTypeID v6 = CFNumberGetTypeID();
    if (v5 && CFGetTypeID(v5) == v6) {
      CFNumberGetValue(v5, kCFNumberLongType, &valuePtr);
    }
    CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(Value, @"Display Sleep Timer");
    CFTypeID v8 = CFNumberGetTypeID();
    if (v7 && CFGetTypeID(v7) == v8) {
      CFNumberGetValue(v7, kCFNumberLongType, &v25);
    }
    uint64_t v9 = qword_1000A3488;
    uint64_t v10 = valuePtr;
    if (qword_1000A3488 != valuePtr || qword_1000A3498 != v25)
    {
      CFTypeID v11 = qword_1000A4600;
      if (os_log_type_enabled((os_log_t)qword_1000A4600, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint8_t buf = 134218240;
        uint64_t v27 = v10;
        __int16 v28 = 2048;
        uint64_t v29 = v25;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Sleep timer %lu display timer %lu\n", buf, 0x16u);
        uint64_t v9 = valuePtr;
      }
      else
      {
        uint64_t v9 = v10;
      }
    }
    if (v9 != -1) {
      qword_1000A3488 = v9;
    }
    if (v25 != -1) {
      qword_1000A3498 = v25;
    }
    if (!qword_1000A4F28)
    {
      uint64_t v2 = sub_100055A24(Value, 1);
LABEL_49:
      int v19 = (const __SCDynamicStore *)sub_10005C958();
      CFPropertyListRef v20 = SCDynamicStoreCopyValue(v19, @"State:/IOKit/PowerManagement/CurrentSettings");
      CFTypeID v21 = CFDictionaryGetTypeID();
      if (v20)
      {
        if (CFGetTypeID(v20) != v21 || !CFEqual(v20, Value)) {
          sub_10005C834(@"State:/IOKit/PowerManagement/CurrentSettings", Value);
        }
        CFRelease(v20);
      }
      else
      {
        sub_10005C834(@"State:/IOKit/PowerManagement/CurrentSettings", Value);
      }
      return v2;
    }
    CFIndex Count = CFDictionaryGetCount(Value);
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, Count, Value);
    if (!MutableCopy) {
      return v2;
    }
    CFNumberRef v15 = MutableCopy;
    CFNumberRef v16 = CFNumberCreate(0, kCFNumberIntType, &v23);
    CFNumberRef v17 = CFNumberCreate(0, kCFNumberIntType, &v22);
    char v18 = qword_1000A4F28;
    if ((qword_1000A4F28 & 1) != 0 && v16)
    {
      CFDictionarySetValue(v15, @"Reduce Processor Speed", v16);
      char v18 = qword_1000A4F28;
    }
    if ((v18 & 2) != 0 && v17)
    {
      CFDictionarySetValue(v15, @"Reduce Processor Speed", v17);
      CFDictionarySetValue(v15, @"Dynamic Power Step", v17);
      char v18 = qword_1000A4F28;
    }
    if ((v18 & 4) != 0 && v17)
    {
      CFDictionarySetValue(v15, @"System Sleep Timer", v17);
      char v18 = qword_1000A4F28;
    }
    if ((v18 & 8) != 0 && v17)
    {
      CFDictionarySetValue(v15, @"Display Sleep Timer", v17);
      char v18 = qword_1000A4F28;
    }
    if ((v18 & 0x10) != 0 && v17)
    {
      CFDictionarySetValue(v15, @"Disk Sleep Timer", v17);
      char v18 = qword_1000A4F28;
    }
    if ((v18 & 0x20) != 0 && v17)
    {
      CFDictionarySetValue(v15, @"Wake On LAN", v17);
    }
    else if (!v17)
    {
LABEL_46:
      if (v16) {
        CFRelease(v16);
      }
      uint64_t v2 = sub_100055A24(v15, 1);
      CFRelease(v15);
      goto LABEL_49;
    }
    CFRelease(v17);
    goto LABEL_46;
  }
  return v2;
}

_DWORD *sub_1000557DC(_DWORD *result)
{
  int v1 = result[5];
  if ((v1 ^ result[4]))
  {
    int v2 = result[2];
    if (v1)
    {
      if ((v2 & 2) != 0)
      {
        byte_1000A4F50 = 0;
        if (byte_1000A4F58 == 1)
        {
          if (qword_1000A4F38)
          {
            if (CFEqual((CFTypeRef)qword_1000A4F38, @"AC Power")) {
              unint64_t v3 = 2;
            }
            else {
              unint64_t v3 = 1;
            }
          }
          else
          {
            unint64_t v3 = 1;
          }
          byte_1000A4F58 = 0;
          byte_1000A4F50 = 0;
          io_connect_t v4 = dword_1000A4F5C;
          return (_DWORD *)IOPMSetAggressiveness(v4, 6uLL, v3);
        }
      }
    }
    else if (v2)
    {
      byte_1000A4F50 = 1;
    }
  }
  return result;
}

CFDictionaryRef sub_100055898()
{
  CFDictionaryRef active = (const __CFDictionary *)IOPMCopyActivePMPreferences();
  if (!active) {
    return 0;
  }
  CFDictionaryRef v1 = active;
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(active, (const void *)qword_1000A4F38);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) == TypeID) {
      CFDictionaryRef Value = CFDictionaryCreateCopy(kCFAllocatorDefault, Value);
    }
    else {
      CFDictionaryRef Value = 0;
    }
  }
  CFRelease(v1);
  return Value;
}

CFNumberRef sub_100055928()
{
  int valuePtr = 0;
  CFNumberRef result = (const __CFNumber *)qword_1000A4F30;
  if (qword_1000A4F30)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_1000A4F30, @"AC Power");
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (Value && CFGetTypeID(Value) == TypeID)
    {
      CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(Value, @"DarkWakeBackgroundTasks");
      if (result)
      {
        CFNumberGetValue(result, kCFNumberIntType, &valuePtr);
        return (const __CFNumber *)(valuePtr != 0);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000559BC()
{
  if (byte_1000A4F60) {
    return 1;
  }
  uint64_t result = sub_1000212AC();
  if (result)
  {
    CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(result, @"SystemPowerProfileOverrideDict", kCFAllocatorDefault, 0);
    if (CFProperty)
    {
      byte_1000A4F60 = 1;
      CFRelease(CFProperty);
    }
    return byte_1000A4F60;
  }
  return result;
}

uint64_t sub_100055A24(const void *a1, int a2)
{
  uint64_t v4 = 3758097090;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID) {
    return v4;
  }
  long long v53 = 0u;
  long long v54 = 0u;
  *(_OWORD *)aggressiveness = 0u;
  long long v52 = 0u;
  sub_100055020((uint64_t)a1, @"Display Sleep Timer", kCFNumberSInt32Type, aggressiveness);
  sub_100055020((uint64_t)a1, @"Disk Sleep Timer", kCFNumberSInt32Type, (_DWORD *)aggressiveness + 1);
  sub_100055020((uint64_t)a1, @"System Sleep Timer", kCFNumberSInt32Type, &aggressiveness[1]);
  sub_100055020((uint64_t)a1, @"Wake On LAN", kCFNumberSInt32Type, (_DWORD *)((unint64_t)aggressiveness | 0xC));
  sub_100055020((uint64_t)a1, @"Wake On Modem Ring", kCFNumberSInt32Type, &v52);
  sub_100055020((uint64_t)a1, @"Automatic Restart On Power Loss", kCFNumberSInt32Type, (_DWORD *)&v52 + 1);
  sub_100055020((uint64_t)a1, @"Sleep On Power Button", kCFNumberSInt32Type, (_DWORD *)&v52 + 2);
  sub_100055020((uint64_t)a1, @"Wake On Clamshell Open", kCFNumberSInt32Type, (_DWORD *)&v52 + 3);
  sub_100055020((uint64_t)a1, @"Wake On AC Change", kCFNumberSInt32Type, &v53);
  sub_100055020((uint64_t)a1, @"Display Sleep Uses Dim", kCFNumberSInt32Type, (_DWORD *)&v53 + 1);
  sub_100055020((uint64_t)a1, @"Mobile Motion Module", kCFNumberSInt32Type, (_DWORD *)&v53 + 2);
  sub_100055020((uint64_t)a1, @"GPUSwitch", kCFNumberSInt32Type, (_DWORD *)&v53 + 3);
  sub_100055020((uint64_t)a1, @"Standby Enabled", kCFNumberSInt32Type, &v54);
  sub_100055020((uint64_t)a1, @"Standby Delay", kCFNumberSInt32Type, (_DWORD *)&v54 + 1);
  sub_100055020((uint64_t)a1, @"AutoPowerOff Enabled", kCFNumberSInt32Type, (_DWORD *)&v54 + 2);
  sub_100055020((uint64_t)a1, @"AutoPowerOff Delay", kCFNumberSInt32Type, (_DWORD *)&v54 + 3);
  io_registry_entry_t v6 = sub_1000212AC();
  int valuePtr = 1;
  CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  int valuePtr = 0;
  CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  CFNumberRef v9 = v8;
  if (v8 && v7)
  {
    io_connect_t v10 = IOPMFindPowerManagement(0);
    if (!v10)
    {
      CFTypeRef CFProperty = 0;
      goto LABEL_123;
    }
    sub_100033A78();
    CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v6, @"Supported Features", kCFAllocatorDefault, 0);
    IOPMSetAggressiveness(v10, 3uLL, LODWORD(aggressiveness[1]));
    IOPMSetAggressiveness(v10, 2uLL, HIDWORD(aggressiveness[0]));
    sub_100055178(v10, aggressiveness[0]);
    if (IOPMFeatureIsAvailableWithSupportedTable()) {
      unint64_t v12 = HIDWORD(aggressiveness[1]);
    }
    else {
      unint64_t v12 = 0;
    }
    IOPMSetAggressiveness(v10, 4uLL, v12);
    if (a2)
    {
      if (IOPMFeatureIsAvailableWithSupportedTable())
      {
        if (DWORD1(v53)) {
          CFNumberRef v13 = v7;
        }
        else {
          CFNumberRef v13 = v9;
        }
        IORegistryEntrySetCFProperty(v6, @"Display Sleep Uses Dim", v13);
      }
      if ((IOPMFeatureIsAvailableWithSupportedTable() & 1) == 0) {
        goto LABEL_52;
      }
    }
    else
    {
      if (DWORD1(v53)) {
        CFNumberRef v26 = v7;
      }
      else {
        CFNumberRef v26 = v9;
      }
      IORegistryEntrySetCFProperty(v6, @"Display Sleep Uses Dim", v26);
    }
    if (v52) {
      CFNumberRef v27 = v7;
    }
    else {
      CFNumberRef v27 = v9;
    }
    IORegistryEntrySetCFProperty(v6, @"Wake On Modem Ring", v27);
    if (!a2)
    {
      if (DWORD1(v52)) {
        CFNumberRef v29 = v7;
      }
      else {
        CFNumberRef v29 = v9;
      }
      IORegistryEntrySetCFProperty(v6, @"Automatic Restart On Power Loss", v29);
LABEL_63:
      if (v53) {
        CFNumberRef v30 = v7;
      }
      else {
        CFNumberRef v30 = v9;
      }
      IORegistryEntrySetCFProperty(v6, @"Wake On AC Change", v30);
      if (!a2)
      {
        int v32 = (CFTypeRef *)&kCFBooleanFalse;
        if (!DWORD2(v52)) {
          int v32 = (CFTypeRef *)&kCFBooleanTrue;
        }
        IORegistryEntrySetCFProperty(v6, @"Sleep On Power Button", *v32);
LABEL_76:
        if (HIDWORD(v52)) {
          CFNumberRef v33 = v7;
        }
        else {
          CFNumberRef v33 = v9;
        }
        IORegistryEntrySetCFProperty(v6, @"Wake On Clamshell Open", v33);
        if (!a2)
        {
          if (DWORD2(v53)) {
            CFNumberRef v35 = v7;
          }
          else {
            CFNumberRef v35 = v9;
          }
          IORegistryEntrySetCFProperty(v6, @"MobileMotionModule", v35);
LABEL_91:
          CFNumberRef v36 = CFNumberCreate(0, kCFNumberIntType, (char *)&v53 + 12);
          if (v36)
          {
            CFNumberRef v37 = v36;
            IORegistryEntrySetCFProperty(v6, @"GPUSwitch", v36);
            CFRelease(v37);
          }
          if (!a2)
          {
            int v39 = (CFTypeRef *)&kCFBooleanTrue;
            if (!v54) {
              int v39 = (CFTypeRef *)&kCFBooleanFalse;
            }
            IORegistryEntrySetCFProperty(v6, @"Standby Enabled", *v39);
LABEL_103:
            CFNumberRef v40 = CFNumberCreate(0, kCFNumberIntType, (char *)&v54 + 4);
            if (v40)
            {
              CFNumberRef v41 = v40;
              IORegistryEntrySetCFProperty(v6, @"Standby Delay", v40);
              CFRelease(v41);
            }
            if (!a2)
            {
              stat v43 = (CFTypeRef *)&kCFBooleanTrue;
              if (!DWORD2(v54)) {
                stat v43 = (CFTypeRef *)&kCFBooleanFalse;
              }
              IORegistryEntrySetCFProperty(v6, @"AutoPowerOff Enabled", *v43);
LABEL_115:
              CFNumberRef v44 = CFNumberCreate(0, kCFNumberIntType, (char *)&v54 + 12);
              if (v44)
              {
                CFNumberRef v45 = v44;
                IORegistryEntrySetCFProperty(v6, @"AutoPowerOff Delay", v44);
                CFRelease(v45);
              }
LABEL_117:
              if (!(byte_1000A4F61 | byte_1000A4F62))
              {
                char IsAvailableWithSupportedTable = IOPMFeatureIsAvailableWithSupportedTable();
                char v47 = IOPMFeatureIsAvailableWithSupportedTable();
                int v48 = IOPMFeatureIsAvailableWithSupportedTable();
                if ((v47 & 1) != 0 || (IsAvailableWithSupportedTable & 1) != 0 || v48)
                {
                  byte_1000A4F61 = v47;
                  byte_1000A4F62 = IsAvailableWithSupportedTable;
                  uint64_t v49 = sub_100048D14(11, 0);
                  nullsub_4(v49, v50);
                }
              }
              sub_100035D14();
LABEL_123:
              CFRelease(v9);
              CFNumberRef v14 = CFProperty;
              io_connect_t v15 = v10;
              if (!v7) {
                goto LABEL_20;
              }
              goto LABEL_19;
            }
LABEL_106:
            if (IOPMFeatureIsAvailableWithSupportedTable())
            {
              double v42 = (CFTypeRef *)&kCFBooleanTrue;
              if (!DWORD2(v54)) {
                double v42 = (CFTypeRef *)&kCFBooleanFalse;
              }
              IORegistryEntrySetCFProperty(v6, @"AutoPowerOff Enabled", *v42);
            }
            if ((IOPMFeatureIsAvailableWithSupportedTable() & 1) == 0) {
              goto LABEL_117;
            }
            goto LABEL_115;
          }
LABEL_94:
          if (IOPMFeatureIsAvailableWithSupportedTable())
          {
            int v38 = (CFTypeRef *)&kCFBooleanTrue;
            if (!v54) {
              int v38 = (CFTypeRef *)&kCFBooleanFalse;
            }
            IORegistryEntrySetCFProperty(v6, @"Standby Enabled", *v38);
          }
          if ((IOPMFeatureIsAvailableWithSupportedTable() & 1) == 0) {
            goto LABEL_106;
          }
          goto LABEL_103;
        }
LABEL_80:
        if (IOPMFeatureIsAvailableWithSupportedTable())
        {
          if (DWORD2(v53)) {
            CFNumberRef v34 = v7;
          }
          else {
            CFNumberRef v34 = v9;
          }
          IORegistryEntrySetCFProperty(v6, @"MobileMotionModule", v34);
        }
        if ((IOPMFeatureIsAvailableWithSupportedTable() & 1) == 0) {
          goto LABEL_94;
        }
        goto LABEL_91;
      }
LABEL_67:
      if (IOPMFeatureIsAvailableWithSupportedTable())
      {
        uint64_t v31 = (CFTypeRef *)&kCFBooleanFalse;
        if (!DWORD2(v52)) {
          uint64_t v31 = (CFTypeRef *)&kCFBooleanTrue;
        }
        IORegistryEntrySetCFProperty(v6, @"Sleep On Power Button", *v31);
      }
      if ((IOPMFeatureIsAvailableWithSupportedTable() & 1) == 0) {
        goto LABEL_80;
      }
      goto LABEL_76;
    }
LABEL_52:
    if (IOPMFeatureIsAvailableWithSupportedTable())
    {
      if (DWORD1(v52)) {
        CFNumberRef v28 = v7;
      }
      else {
        CFNumberRef v28 = v9;
      }
      IORegistryEntrySetCFProperty(v6, @"Automatic Restart On Power Loss", v28);
    }
    if ((IOPMFeatureIsAvailableWithSupportedTable() & 1) == 0) {
      goto LABEL_67;
    }
    goto LABEL_63;
  }
  CFTypeRef CFProperty = 0;
  io_connect_t v10 = 0;
  CFNumberRef v14 = 0;
  io_connect_t v15 = 0;
  if (v8) {
    goto LABEL_123;
  }
  if (v7) {
LABEL_19:
  }
    CFRelease(v7);
LABEL_20:
  if (v15) {
    IOServiceClose(v15);
  }
  if (v14) {
    CFRelease(v14);
  }
  io_registry_entry_t v16 = sub_1000212F0();
  if (v16)
  {
    io_registry_entry_t v17 = v16;
    CFTypeID v18 = CFDictionaryGetTypeID();
    if (CFGetTypeID(a1) == v18)
    {
      CFDictionaryRef Value = CFDictionaryGetValue((CFDictionaryRef)a1, @"Carrier Mode Low Voltage");
      CFTypeID v20 = CFNumberGetTypeID();
      if (Value
        && CFGetTypeID(Value) == v20
        && IORegistryEntrySetCFProperty(v17, @"CarrierModeLowVoltage", Value)
        && os_log_type_enabled((os_log_t)qword_1000A4600, OS_LOG_TYPE_ERROR))
      {
        sub_10006C594();
      }
      CFTypeID v21 = CFDictionaryGetValue((CFDictionaryRef)a1, @"Carrier Mode High Voltage");
      CFTypeID v22 = CFNumberGetTypeID();
      if (v21
        && CFGetTypeID(v21) == v22
        && IORegistryEntrySetCFProperty(v17, @"CarrierModeHighVoltage", v21)
        && os_log_type_enabled((os_log_t)qword_1000A4600, OS_LOG_TYPE_ERROR))
      {
        sub_10006C594();
      }
      int v23 = CFDictionaryGetValue((CFDictionaryRef)a1, @"Carrier Mode");
      CFTypeID v24 = CFNumberGetTypeID();
      if (v23
        && CFGetTypeID(v23) == v24
        && IORegistryEntrySetCFProperty(v17, @"CarrierModeStatus", v23)
        && os_log_type_enabled((os_log_t)qword_1000A4600, OS_LOG_TYPE_ERROR))
      {
        sub_10006C594();
      }
    }
  }
  sub_10004E3AC(aggressiveness[0]);
  sub_10004E5BC();
  return 0;
}

uint64_t sub_1000563B8()
{
  qword_1000A4600 = (uint64_t)os_log_create("com.apple.powerd", "pmSettings");
  uint64_t result = IOPMFindPowerManagement(0);
  dword_1000A4F5C = result;
  if (result)
  {
    sub_100056498();
    int v1 = sub_100033A78();
    CFStringRef v2 = @"AC Power";
    if (v1 == 2) {
      CFStringRef v2 = @"Battery Power";
    }
    if (v1 == 3) {
      CFStringRef v2 = @"UPS Power";
    }
    qword_1000A4F38 = (uint64_t)v2;
    CFDictionaryRef active = (const __CFDictionary *)IOPMCopyActivePMPreferences();
    qword_1000A4F30 = (uint64_t)active;
    if (active) {
      sub_10005540C(active, (const __CFString *)qword_1000A4F38);
    }
    if (CFEqual((CFTypeRef)qword_1000A4F38, @"AC Power")) {
      unint64_t v4 = 2;
    }
    else {
      unint64_t v4 = 1;
    }
    io_connect_t v5 = dword_1000A4F5C;
    return IOPMSetAggressiveness(v5, 6uLL, v4);
  }
  return result;
}

void sub_100056498()
{
  CFDictionaryRef v0 = (const __CFDictionary *)IOPMCopySystemPowerSettings();
  if (v0)
  {
    CFDictionaryRef v1 = v0;
    CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(v0, @"SleepDisabled");
    io_registry_entry_t v3 = sub_1000212AC();
    if (kCFBooleanTrue == Value) {
      CFBooleanRef v4 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v4 = kCFBooleanFalse;
    }
    IORegistryEntrySetCFProperty(v3, @"SleepDisabled", v4);
    CFRelease(v1);
  }
}

uint64_t sub_10005652C()
{
  return notify_post("com.apple.system.powermanagement.prefschange");
}

void sub_100056538()
{
  CFDictionaryRef v0 = qword_1000A4600;
  if (os_log_type_enabled((os_log_t)qword_1000A4600, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)io_registry_entry_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Energy Saver Prefs have changed", v3, 2u);
  }
  sub_100056498();
  if (qword_1000A4F30) {
    CFRelease((CFTypeRef)qword_1000A4F30);
  }
  CFDictionaryRef v1 = (const void *)IOPMCopyPMPreferences();
  qword_1000A4F30 = (uint64_t)v1;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (v1 && CFGetTypeID(v1) == TypeID)
  {
    sub_10005540C((const __CFDictionary *)qword_1000A4F30, (const __CFString *)qword_1000A4F38);
  }
  else
  {
    if (qword_1000A4F30) {
      CFRelease((CFTypeRef)qword_1000A4F30);
    }
    qword_1000A4F30 = 0;
  }
  sub_100048CC0();
}

void sub_100056608()
{
  CFDictionaryRef v0 = sub_10005C968();

  dispatch_async(v0, &stru_100092CC0);
}

void sub_100056638(id a1)
{
  int v1 = sub_100033A78();
  CFStringRef v2 = @"AC Power";
  if (v1 == 2) {
    CFStringRef v2 = @"Battery Power";
  }
  if (v1 == 3) {
    CFStringRef v3 = @"UPS Power";
  }
  else {
    CFStringRef v3 = v2;
  }
  if (!qword_1000A4F38 || !CFEqual((CFTypeRef)qword_1000A4F38, v3))
  {
    qword_1000A4F38 = (uint64_t)v3;
    if (byte_1000A4F50)
    {
      byte_1000A4F58 = 1;
    }
    else
    {
      if (CFEqual(@"AC Power", v3)) {
        unint64_t v4 = 2;
      }
      else {
        unint64_t v4 = 1;
      }
      IOPMSetAggressiveness(dword_1000A4F5C, 6uLL, v4);
    }
    if (qword_1000A4F30)
    {
      CFRelease((CFTypeRef)qword_1000A4F30);
      CFDictionaryRef v5 = (const __CFDictionary *)IOPMCopyPMPreferences();
      qword_1000A4F30 = (uint64_t)v5;
      io_registry_entry_t v6 = qword_1000A4600;
      if (os_log_type_enabled((os_log_t)qword_1000A4600, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 138412546;
        CFStringRef v8 = v3;
        __int16 v9 = 2114;
        CFDictionaryRef v10 = v5;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Settings change for power source change to %@ %{public}@", (uint8_t *)&v7, 0x16u);
        CFDictionaryRef v5 = (const __CFDictionary *)qword_1000A4F30;
      }
      sub_10005540C(v5, (const __CFString *)qword_1000A4F38);
    }
  }
}

uint64_t sub_1000567B4(const __CFDictionary *a1)
{
  return sub_10005540C(a1, (const __CFString *)qword_1000A4F38);
}

id sub_1000583E8(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_100059968(id a1)
{
  qword_1000A4F78 = [[BatteryGaugingAccuracyManager alloc] initBatteryGaugingAccuracyData];

  _objc_release_x1();
}

void sub_100059D04(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  CFDictionaryRef v5 = qword_1000A4608;
  if (os_log_type_enabled((os_log_t)qword_1000A4608, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint8_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "batteryGaugingMitigationEvent received\n", buf, 2u);
  }
  if (v3)
  {
    if (v4)
    {
      io_registry_entry_t v6 = qword_1000A4F68;
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_100059E50;
      v7[3] = &unk_100091278;
      id v8 = v3;
      id v9 = v4;
      dispatch_async(v6, v7);
    }
    else if (os_log_type_enabled((os_log_t)qword_1000A4608, OS_LOG_TYPE_ERROR))
    {
      sub_1000657A4();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A4608, OS_LOG_TYPE_ERROR))
  {
    sub_10006C5FC();
  }
}

void sub_100059E50(uint64_t a1)
{
  int v1 = *(void **)(a1 + 40);
  CFStringRef v2 = (_xpc_connection_s *)*(id *)(a1 + 32);
  id v3 = v1;
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4F68);
  xpc_object_t reply = xpc_dictionary_create_reply(v3);
  if (reply)
  {
    if (sub_10005D5C0(v2, @"com.apple.private.iokit.battery-gauging-mitigation", 0))
    {
      uint64_t v5 = xpc_dictionary_get_dictionary(v3, "batteryGaugingMitigation");
      if (v5)
      {
        io_registry_entry_t v6 = (void *)v5;
        int v7 = (void *)_CFXPCCreateCFObjectFromXPCObject();
        if (v7)
        {
          id v8 = v7;
          id v9 = [v7 objectForKeyedSubscript:@"batteryGaugingMitigationAction"];
          unsigned int v10 = [v9 unsignedIntValue];

          if (v10 == 1)
          {
            CFTypeID v11 = qword_1000A4F68;
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_10005A4AC;
            block[3] = &unk_1000911E8;
            id v19 = reply;
            dispatch_async(v11, block);

            int v12 = 0;
          }
          else
          {
            int v12 = -536870206;
            if (os_log_type_enabled((os_log_t)qword_1000A4608, OS_LOG_TYPE_ERROR)) {
              sub_10006C698();
            }
          }
          io_registry_entry_t v17 = qword_1000A4608;
          if (os_log_type_enabled((os_log_t)qword_1000A4608, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint8_t buf = 67109378;
            *(_DWORD *)&uint8_t buf[4] = v10;
            LOWORD(v21) = 2112;
            *(void *)((char *)&v21 + 2) = v8;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "received handleRequest %ud %@\n", buf, 0x12u);
          }

          goto LABEL_17;
        }
        if (os_log_type_enabled((os_log_t)qword_1000A4608, OS_LOG_TYPE_ERROR)) {
          sub_10006C664();
        }
        int v12 = -536870206;
      }
      else
      {
        int v12 = -536870206;
        if (os_log_type_enabled((os_log_t)qword_1000A4608, OS_LOG_TYPE_ERROR)) {
          sub_10006C630();
        }
      }
    }
    else
    {
      int v12 = -536870207;
      if (os_log_type_enabled((os_log_t)qword_1000A4608, OS_LOG_TYPE_ERROR)) {
        sub_10006C6CC();
      }
    }
    id v8 = 0;
LABEL_17:
    CFNumberRef v13 = v2;
    id v14 = reply;
    io_connect_t v15 = v14;
    if (v13)
    {
      io_registry_entry_t v16 = qword_1000A4F68;
      *(void *)uint8_t buf = _NSConcreteStackBlock;
      *(void *)&long long v21 = 3221225472;
      *((void *)&v21 + 1) = sub_10005A54C;
      CFTypeID v22 = &unk_1000919A8;
      id v23 = v14;
      int v25 = v12;
      CFTypeID v24 = v13;
      dispatch_barrier_async(v16, buf);
    }
    goto LABEL_20;
  }
  if (os_log_type_enabled((os_log_t)qword_1000A4608, OS_LOG_TYPE_ERROR)) {
    sub_1000657D8();
  }
LABEL_20:
}

void sub_10005A1A8()
{
  os_log_t v0 = os_log_create("com.apple.powerd", "batterygauging");
  int v1 = (void *)qword_1000A4608;
  qword_1000A4608 = (uint64_t)v0;

  dispatch_queue_t v2 = dispatch_queue_create("com.apple.private.powerd.batteryGaugingQ", 0);
  id v3 = (void *)qword_1000A4F68;
  qword_1000A4F68 = (uint64_t)v2;

  id v4 = qword_1000A4F68;
  if (qword_1000A4F68)
  {
    dispatch_async(v4, &stru_100092D00);
  }
}

void sub_10005A234(id a1)
{
  int v1 = qword_1000A4608;
  if (os_log_type_enabled((os_log_t)qword_1000A4608, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint8_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "batteryGaugingAccuracyManager_prime init\n", buf, 2u);
  }
  xpc_set_event_stream_handler("com.apple.alarm", 0, &stru_100092D20);
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4F68);
  int out_token = 0;
  uint32_t v2 = notify_register_dispatch("com.apple.system.powersources.source", &out_token, (dispatch_queue_t)qword_1000A4F68, &stru_100092D40);
  id v3 = qword_1000A4608;
  BOOL v4 = os_log_type_enabled((os_log_t)qword_1000A4608, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_DWORD *)uint8_t buf = 136315138;
      id v8 = "com.apple.system.powersources.source";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Could not get notification for %s. Exiting.\n", buf, 0xCu);
    }
  }
  else
  {
    if (v4)
    {
      *(_DWORD *)uint8_t buf = 136315138;
      id v8 = "com.apple.system.powersources.source";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Register notification for %s. good.\n", buf, 0xCu);
    }
    uint64_t v5 = +[BatteryGaugingAccuracyManager InstanceManager];
    [v5 handleBatteryStateDataUpdate];
  }
}

void sub_10005A3BC(id a1, OS_xpc_object *a2)
{
  uint32_t v2 = a2;
  id v3 = qword_1000A4F68;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10005A454;
  block[3] = &unk_1000911E8;
  io_registry_entry_t v6 = v2;
  BOOL v4 = v2;
  dispatch_async(v3, block);
}

void sub_10005A454(uint64_t a1)
{
  id v2 = +[BatteryGaugingAccuracyManager InstanceManager];
  [v2 handleAlarmEvent:*(void *)(a1 + 32)];
}

void sub_10005A4AC(uint64_t a1)
{
  int v1 = qword_1000A4F68;
  id v2 = *(id *)(a1 + 32);
  dispatch_assert_queue_V2(v1);
  id v3 = +[BatteryGaugingAccuracyManager InstanceManager];
  id v5 = [v3 gaugingAccuracyMetricGet];

  BOOL v4 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  xpc_dictionary_set_value(v2, "batteryGaugingMitigationState", v4);
}

void sub_10005A54C(uint64_t a1)
{
  xpc_dictionary_set_uint64(*(xpc_object_t *)(a1 + 32), "returnCode", *(int *)(a1 + 48));
  id v3 = *(void **)(a1 + 32);
  id v2 = *(_xpc_connection_s **)(a1 + 40);

  xpc_connection_send_message(v2, v3);
}

void sub_10005A594(id a1, int a2)
{
  id v2 = qword_1000A4608;
  if (os_log_type_enabled((os_log_t)qword_1000A4608, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "HandleBatteryDataUpdate AC change detected run action policy", v4, 2u);
  }
  id v3 = +[BatteryGaugingAccuracyManager InstanceManager];
  [v3 handleBatteryStateDataUpdate];
}

uint64_t sub_10005A614()
{
  return xmmword_1000A4FA8;
}

uint64_t sub_10005A620()
{
  return byte_1000A4F8F;
}

void sub_10005A62C()
{
  if (byte_1000A4F8F) {
    qword_1000A4FA0 = CFAbsoluteTimeGetCurrent();
  }
}

uint64_t sub_10005A65C()
{
  int v0 = sub_10004DBC8(5u);
  BOOL v1 = sub_10004DC40();
  BOOL v2 = sub_10004DC58();
  if (byte_1000A500C || (sub_10003F9CC() & 1) != 0)
  {
    if (v2) {
      uint64_t v3 = 6;
    }
    else {
      uint64_t v3 = 0;
    }
    if (!v2 && v1)
    {
      if (sub_10003F970()) {
        uint64_t v3 = 0;
      }
      else {
        uint64_t v3 = 10;
      }
    }
  }
  else if ((v1 | v0 | v2))
  {
    uint64_t v3 = 6;
  }
  else if (byte_1000A5019)
  {
    uint64_t v3 = 64;
  }
  else
  {
    uint64_t v3 = 0;
  }
  if (byte_1000A501A) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = v3;
  }
  if (byte_1000A4F8D) {
    BOOL v5 = byte_1000A500C == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = v4;
  }
  if (sub_10004DBC8(0x11u)) {
    v6 |= 0x10uLL;
  }
  if (sub_10004DBC8(0xEu)) {
    v6 |= 0x20uLL;
  }
  int v7 = qword_1000A4610;
  if (os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_DEBUG)) {
    sub_10006C768(v6, v7);
  }
  if (!dword_1000A5028) {
    notify_register_check("com.apple.system.powermanagement.useractivity2", &dword_1000A5028);
  }
  if ((void)xmmword_1000A4FA8 != v6)
  {
    notify_set_state(dword_1000A5028, v6);
    notify_post("com.apple.system.powermanagement.useractivity2");
    id v8 = qword_1000A4610;
    if (os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint8_t buf = 134218496;
      *(void *)&uint8_t buf[4] = xmmword_1000A4FA8;
      *(_WORD *)&uint8_t buf[12] = 2048;
      *(void *)&long long v35 = v6;
      WORD4(v35) = 1024;
      *(_DWORD *)((char *)&v35 + 1sub_100048D14(0x12u, 0) = byte_1000A4F8D;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Activity changes from 0x%llx to 0x%llx. UseActiveState:%d\n", buf, 0x1Cu);
      id v8 = qword_1000A4610;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = word_1000A4FE0;
      int v10 = byte_1000A500C;
      int v11 = HIBYTE(word_1000A4FE0);
      unint64_t v12 = sub_10005E248();
      *(_DWORD *)uint8_t buf = 67110400;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v10;
      LOWORD(v35) = 1024;
      *(_DWORD *)((char *)&v35 + 2) = v11;
      WORD3(v35) = 2048;
      *((void *)&v35 + 1) = v12;
      __int16 v36 = 2048;
      uint64_t v37 = qword_1000A4FD0;
      __int16 v38 = 2048;
      uint64_t v39 = qword_1000A4FD8;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "hidActive:%d displayOff:%d assertionActivityValid:%d now:0x%llx  hid_ts:0x%llx assertion_ts:0x%llx\n", buf, 0x32u);
    }
    if ((xmmword_1000A4FA8 & 0x20) == 0 && (v6 & 0x20) != 0)
    {
      *(void *)uint8_t buf = 0;
      int v13 = 10;
      do
      {
        notify_get_state(dword_1000A5028, (uint64_t *)buf);
        if (*(void *)buf == v6) {
          break;
        }
        usleep(0x3E8u);
        --v13;
      }
      while (v13);
    }
    *(void *)&xmmword_1000A4FA8 = v6;
    qword_1000A4F98 |= v6;
    BOOL v14 = os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      if (v14) {
        sub_10006C734();
      }
      sub_100050600();
    }
    else
    {
      if (v14) {
        sub_10006C700();
      }
      sub_100050414();
    }
    io_connect_t v15 = qword_1000A4610;
    if (os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint8_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Evaluating new PerfMode on UserActivity level change.\n", buf, 2u);
    }
    sub_100040984();
  }
  unsigned int v16 = sub_10005C51C();
  io_registry_entry_t v17 = (uint64_t *)*((void *)&xmmword_1000A4FA8 + 1);
  if (*((void *)&xmmword_1000A4FA8 + 1))
  {
    unsigned int v18 = v16;
    uint64_t v19 = 0;
    CFTypeID v20 = &qword_1000A5000;
    while (1)
    {
      if (*((unsigned char *)v20 + 12) || v18 >= *((_DWORD *)v17 + 6))
      {
        CFTypeID v22 = qword_1000A4610;
        uint64_t v21 = v3;
        if (os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_DEBUG))
        {
          pid_t pid = xpc_connection_get_pid((xpc_connection_t)v17[2]);
          *(_DWORD *)uint8_t buf = 134218240;
          *(void *)&uint8_t buf[4] = v3;
          *(_WORD *)&uint8_t buf[12] = 1024;
          LODWORD(v35) = pid;
          _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Setting level 0x%llx for pid %d", buf, 0x12u);
          uint64_t v21 = v3;
          if (v18)
          {
LABEL_57:
            unsigned int v23 = *((_DWORD *)v17 + 6);
            if (v19) {
              BOOL v24 = 1;
            }
            else {
              BOOL v24 = v18 >= v23;
            }
            if (v24) {
              uint64_t v19 = v19;
            }
            else {
              uint64_t v19 = v23;
            }
          }
        }
        else if (v18)
        {
          goto LABEL_57;
        }
      }
      else
      {
        uint64_t v21 = xmmword_1000A4FA8 & 0xFFFFFFFFFFFFFFF0 | 1;
        if (v18) {
          goto LABEL_57;
        }
      }
      if (v17[4] == v21)
      {
        int v25 = qword_1000A4610;
        if (os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_DEBUG))
        {
          CFNumberRef v26 = (_xpc_connection_s *)v17[2];
          pid_t v27 = xpc_connection_get_pid(v26);
          *(_DWORD *)uint8_t buf = 134218496;
          *(void *)&uint8_t buf[4] = v26;
          CFTypeID v20 = &qword_1000A5000;
          *(_WORD *)&uint8_t buf[12] = 1024;
          LODWORD(v35) = v27;
          WORD2(v35) = 2048;
          *(void *)((char *)&v35 + 6) = v21;
          _os_log_debug_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "Client %p(pid %d) activity level is already at 0x%llx\n", buf, 0x1Cu);
        }
      }
      else
      {
        xpc_object_t v28 = xpc_dictionary_create(0, 0, 0);
        CFNumberRef v29 = qword_1000A4610;
        if (os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v31 = (_xpc_connection_s *)v17[2];
          pid_t v32 = xpc_connection_get_pid(v31);
          *(_DWORD *)uint8_t buf = 134218496;
          *(void *)&uint8_t buf[4] = v21;
          *(_WORD *)&uint8_t buf[12] = 2048;
          *(void *)&long long v35 = v31;
          CFTypeID v20 = &qword_1000A5000;
          WORD4(v35) = 1024;
          *(_DWORD *)((char *)&v35 + 1sub_100048D14(0x12u, 0) = v32;
          _os_log_debug_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "Sending new activity levels(0x%llx) to client %p(pid %d)\n", buf, 0x1Cu);
        }
        xpc_dictionary_set_uint64(v28, "UserActivityLevels", v21);
        xpc_connection_send_message((xpc_connection_t)v17[2], v28);
        xpc_release(v28);
        v17[4] = v21;
      }
      io_registry_entry_t v17 = (uint64_t *)*v17;
      if (!v17) {
        return v19;
      }
    }
  }
  return 0;
}

void sub_10005AC10()
{
  byte_1000A4F90 = 0;
  qword_1000A4F98 = 0;
}

uint64_t sub_10005AC24()
{
  return dword_1000A4FE8;
}

uint64_t sub_10005AC30(void *a1)
{
  if (a1) {
    *a1 = qword_1000A4F98;
  }
  return byte_1000A4F90;
}

void sub_10005AC4C(int a1)
{
  uint64_t v1 = byte_1000A4F8F;
  if (byte_1000A4F8F == a1)
  {
    BOOL v2 = qword_1000A4610;
    if (os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_DEBUG)) {
      sub_10006C7E0(v1, v2, v3, v4, v5, v6, v7, v8);
    }
  }
  else
  {
    if (a1)
    {
      int v9 = 1;
      sub_1000405D8();
      sub_10003F9B8();
      nullsub_4(v10, v11);
      byte_1000A4F90 = 1;
    }
    else
    {
      int v9 = 0;
    }
    byte_1000A4F8F = v9;
    unint64_t v12 = qword_1000A4610;
    if (os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_DEFAULT))
    {
      v13[0] = 67109120;
      v13[1] = v9;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "rootDomain's user activity state:%d\n", (uint8_t *)v13, 8u);
    }
  }
}

double sub_10005AD54()
{
  return *(double *)&qword_1000A4FA0;
}

__CFDictionary *sub_10005AD60()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  int valuePtr = 0xFFFF;
  CFNumberRef v1 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  if (v1)
  {
    CFNumberRef v2 = v1;
    CFDictionaryAddValue(Mutable, @"DeviceUsage", v1);
    CFDictionaryAddValue(Mutable, @"DeviceUsagePage", v2);
    CFRelease(v2);
  }
  return Mutable;
}

uint64_t sub_10005AE04(const __CFString *a1)
{
  uint64_t v2 = -1;
  uint64_t valuePtr = -1;
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4FF0);
  if (qword_1000A4FB8)
  {
    CFNumberRef v3 = (const __CFNumber *)IOHIDEventSystemClientCopyProperty((IOHIDEventSystemClientRef)qword_1000A4FB8, a1);
    if (v3)
    {
      CFNumberRef v4 = v3;
      CFNumberGetValue(v3, kCFNumberSInt64Type, &valuePtr);
      CFRelease(v4);
      return valuePtr;
    }
  }
  return v2;
}

void sub_10005AE78(const __CFString *a1, uint64_t a2)
{
  uint64_t valuePtr = a2;
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4FF0);
  if (qword_1000A4FB8)
  {
    CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, &valuePtr);
    if (v3)
    {
      CFNumberRef v4 = v3;
      IOHIDEventSystemClientSetProperty((IOHIDEventSystemClientRef)qword_1000A4FB8, a1, v3);
      CFRelease(v4);
    }
  }
}

void sub_10005AEFC()
{
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000A4FF0);
  int v0 = sub_10005AE04(@"HIDActivityState");
  if (!os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_DEBUG))
  {
    if (v0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v3 = sub_10005AE04(@"LastActivityTimestamp");
    unint64_t v1 = sub_10005E1EC(v3);
    goto LABEL_8;
  }
  sub_10006C850();
  if (!v0) {
    goto LABEL_7;
  }
LABEL_3:
  if (v0 == 1)
  {
    unint64_t v1 = sub_10005E248();
LABEL_8:
    unint64_t v2 = v1;
    goto LABEL_9;
  }
  unint64_t v2 = 0;
LABEL_9:
  CFNumberRef v4 = sub_10005C968();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_10005AFEC;
  v5[3] = &unk_100092470;
  int v6 = v0;
  void v5[4] = v2;
  dispatch_async(v4, v5);
}

void sub_10005AFEC(uint64_t a1)
{
  LOBYTE(word_1000A4FEsub_100048D14(0x12u, 0) = *(_DWORD *)(a1 + 40) == 1;
  qword_1000A4FD0 = *(void *)(a1 + 32);
  sub_10005B010();
}

void sub_10005B010()
{
  unsigned int v0 = sub_10005C51C();
  if (os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_DEBUG)) {
    sub_10006C9A8();
  }
  int v1 = byte_1000A500C == 0 && v0 < 0x12C;
  if (byte_1000A500C == 0 && v0 < 0x12C) {
    unsigned int v2 = 300;
  }
  else {
    unsigned int v2 = 0;
  }
  byte_1000A4F8D = byte_1000A500C == 0 && v0 < 0x12C;
  if (!qword_1000A5030)
  {
    uint64_t v3 = sub_10005C968();
    qword_1000A5030 = (uint64_t)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v3);
    dispatch_source_set_event_handler((dispatch_source_t)qword_1000A5030, &stru_100092DA0);
    dispatch_source_set_cancel_handler((dispatch_source_t)qword_1000A5030, &stru_100092DC0);
  }
  unsigned int v4 = sub_10005A65C();
  if (os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_DEBUG)) {
    sub_10006C930();
  }
  if (((v4 == 0) & ~v1) != 0)
  {
    if (byte_1000A5038 == 1)
    {
      dispatch_suspend((dispatch_object_t)qword_1000A5030);
      byte_1000A5038 = 0;
    }
  }
  else
  {
    int v5 = v1 & (v4 > v2);
    if (!v4) {
      int v5 = 1;
    }
    if (!v5) {
      unsigned int v2 = v4;
    }
    if (v2 >= v0)
    {
      dispatch_time_t v6 = dispatch_time(0, 1000000000 * (v2 - v0));
      dispatch_source_set_timer((dispatch_source_t)qword_1000A5030, v6, 0xFFFFFFFFFFFFFFFFLL, 0);
      if ((byte_1000A5038 & 1) == 0)
      {
        dispatch_resume((dispatch_object_t)qword_1000A5030);
        byte_1000A5038 = 1;
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_ERROR))
    {
      sub_10006C8B8();
    }
  }
}

uint64_t sub_10005B1D8()
{
  int out_token = 0;
  qword_1000A4610 = (uint64_t)os_log_create("com.apple.powerd", "systemLoad");
  qword_1000A4FF0 = (uint64_t)dispatch_queue_create("com.apple.powermanagement.systemload", 0);
  *(_OWORD *)&dword_1000A4F88 = 0u;
  *(_OWORD *)&qword_1000A4F98 = 0u;
  xmmword_1000A4FA8 = 0u;
  *(_OWORD *)&qword_1000A4FB8 = 0u;
  *(_OWORD *)&dword_1000A4FC8 = 0u;
  *(_OWORD *)&qword_1000A4FD8 = 0u;
  *(void *)&xmmword_1000A4FA8 = 0xFFFFLL;
  sub_10005AC4C(1);
  byte_1000A4F8F = 1;
  qword_1000A4FF8 = (uint64_t)SCDynamicStoreKeyCreate(kCFAllocatorDefault, @"%@%@", kSCDynamicStoreDomainState, @"/IOKit/PowerManagement/SystemLoad");
  qword_1000A5000 = (uint64_t)SCDynamicStoreKeyCreate(kCFAllocatorDefault, @"%@%@", kSCDynamicStoreDomainState, @"/IOKit/PowerManagement/SystemLoad/Detailed");
  notify_register_check("com.apple.system.powermanagement.SystemLoadAdvisory", &dword_1000A5008);
  notify_register_check("com.apple.system.powermanagement.useractivity", &dword_1000A4F88);
  notify_set_state(dword_1000A4F88, 1uLL);
  int v0 = sub_100035D14();
  int v1 = sub_10002E4DC();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10005B3E0;
  block[3] = &unk_100091A80;
  int v8 = v0;
  dispatch_sync(v1, block);
  sub_10005B504();
  sub_10005B5DC(0);
  unsigned int v2 = IONotificationPortCreate(0);
  uint64_t v3 = sub_10005C968();
  IONotificationPortSetDispatchQueue(v2, v3);
  dword_1000A4FC8 = 300;
  unint64_t v4 = sub_10005E248();
  word_1000A4FE0 = 1;
  qword_1000A4FD0 = v4;
  qword_1000A4FD8 = 0;
  dispatch_async((dispatch_queue_t)qword_1000A4FF0, &stru_100092DE0);
  byte_1000A500C = sub_10005F7DC();
  int v5 = sub_10005C968();
  return notify_register_dispatch(kOSThermalNotificationPressureLevelName, &out_token, v5, &stru_100092D60);
}

void sub_10005B3E0(uint64_t a1)
{
}

void sub_10005B3E8(int a1)
{
  unsigned int v2 = sub_10002E4DC();
  dispatch_assert_queue_V2(v2);
  if (a1)
  {
    uint64_t v3 = (uint64_t *)sub_10002E990();
    if (a1 < 1)
    {
      LOBYTE(v4) = 0;
      BOOL v9 = 0;
      LOBYTE(a1) = 1;
    }
    else
    {
      __int16 v4 = 0;
      int v5 = 0;
      int v6 = 0;
      uint64_t v7 = a1;
      do
      {
        uint64_t v8 = *v3++;
        v4 |= *(_WORD *)(v8 + 16);
        v5 += *(_DWORD *)(v8 + 32);
        v6 += *(_DWORD *)(v8 + 36);
        --v7;
      }
      while (v7);
      LOBYTE(a1) = v4 ^ 1;
      if (v6) {
        BOOL v9 = 100 * v5 / v6 < 40;
      }
      else {
        BOOL v9 = 0;
      }
    }
  }
  else
  {
    BOOL v9 = 0;
    LOBYTE(v4) = 1;
  }
  uint64_t v10 = sub_10005C968();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10005BFB8;
  block[3] = &unk_100092D80;
  char v12 = v4 & 1;
  char v13 = a1 & 1;
  BOOL v14 = v9;
  dispatch_async(v10, block);
}

void sub_10005B504()
{
  int v0 = (const __SCDynamicStore *)sub_10005C958();
  CFDictionaryRef v1 = (const __CFDictionary *)SCDynamicStoreCopyValue(v0, @"State:/IOKit/PowerManagement/CurrentSettings");
  if (v1)
  {
    CFDictionaryRef v2 = v1;
    int valuePtr = 0;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v1, @"Display Sleep Timer");
    if (Value && (CFNumberGetValue(Value, kCFNumberIntType, &valuePtr), byte_1000A501B != (valuePtr != 0)))
    {
      char v4 = 0;
      byte_1000A501B = valuePtr != 0;
    }
    else
    {
      char v4 = 1;
    }
    CFBooleanRef v5 = (const __CFBoolean *)CFDictionaryGetValue(v2, @"DarkWakeBackgroundTasks");
    if (v5 && (int v6 = CFBooleanGetValue(v5) != 0, dword_1000A34A0 != v6))
    {
      dword_1000A34A0 = v6;
      CFRelease(v2);
    }
    else
    {
      CFRelease(v2);
      if (v4) {
        return;
      }
    }
    sub_10005B7C8();
  }
}

void sub_10005B5DC(const __CFDictionary *a1)
{
  CFDictionaryRef cpuPowerStatus = 0;
  int v10 = 100;
  int valuePtr = 100;
  int v2 = dword_1000A5020;
  if (!dword_1000A5020)
  {
    size_t v9 = 4;
    if (sysctlbyname("hw.ncpu", &dword_1000A5020, &v9, 0, 0) == -1)
    {
      int v2 = 0;
      dword_1000A5020 = 0;
    }
    else
    {
      int v2 = dword_1000A5020;
    }
  }
  LODWORD(v9) = v2;
  if (IOPMGetThermalWarningLevel((uint32_t *)&dword_1000A4FE8)) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = dword_1000A4FE8 == 0;
  }
  char v5 = !v3 && dword_1000A4FE8 != 255;
  byte_1000A5024 = v5;
  byte_1000A5025 = 0;
  byte_1000A5026 = 0;
  byte_1000A5027 = 0;
  if (a1)
  {
LABEL_15:
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, @"CPU_Speed_Limit");
    if (Value) {
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
    }
    CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(a1, @"CPU_Available_CPUs");
    if (v7) {
      CFNumberGetValue(v7, kCFNumberIntType, &v9);
    }
    CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue(a1, @"CPU_Scheduler_Limit");
    if (v8) {
      CFNumberGetValue(v8, kCFNumberIntType, &v10);
    }
    if (valuePtr <= 50) {
      byte_1000A5027 = 1;
    }
    if (dword_1000A5020 > (int)v9) {
      byte_1000A5025 = 1;
    }
    if (v10 != 100) {
      byte_1000A5026 = 1;
    }
    sub_10005B7C8();
    goto LABEL_29;
  }
  if (!IOPMCopyCPUPowerStatus(&cpuPowerStatus))
  {
    a1 = cpuPowerStatus;
    if (!cpuPowerStatus) {
      return;
    }
    goto LABEL_15;
  }
LABEL_29:
  if (cpuPowerStatus) {
    CFRelease(cpuPowerStatus);
  }
}

void sub_10005B788(id a1, int a2)
{
  notify_get_state(a2, (uint64_t *)&qword_1000A5010);
  byte_1000A5018 = 1;

  sub_10005B7C8();
}

void sub_10005B7C8()
{
  uint64_t valuePtr = 0;
  int v0 = 3;
  int v21 = 3;
  int v18 = 3;
  int v19 = 3;
  if (!byte_1000A501C)
  {
    if (byte_1000A501D) {
      int v0 = 1;
    }
    else {
      int v0 = 2;
    }
  }
  int v20 = v0;
  if (byte_1000A5018)
  {
    if (qword_1000A5010 == 20)
    {
      int v1 = 2;
      goto LABEL_17;
    }
    if (!qword_1000A5010)
    {
      int v1 = 3;
LABEL_17:
      int v19 = v1;
      goto LABEL_18;
    }
LABEL_15:
    int v1 = 1;
    goto LABEL_17;
  }
  if (byte_1000A5027 == 1)
  {
    int v1 = 2;
    int v19 = 2;
  }
  else
  {
    int v1 = 3;
  }
  if ((byte_1000A5025 & 1) != 0 || (byte_1000A5026 & 1) != 0 || byte_1000A5024 == 1) {
    goto LABEL_15;
  }
LABEL_18:
  if (byte_1000A4F8E)
  {
    if (byte_1000A500C && (!sub_100055928() || sub_10003F980())) {
      int v2 = 3;
    }
    else {
      int v2 = 2;
    }
    int v21 = v2;
  }
  else
  {
    int v2 = 3;
  }
  if (v0 >= v2) {
    int v3 = v2;
  }
  else {
    int v3 = v0;
  }
  if (v3 >= v1) {
    uint64_t v4 = v1;
  }
  else {
    uint64_t v4 = v3;
  }
  int v18 = v4;
  uint64_t v5 = (v2 << 8) | (v0 << 16) | (v1 << 24) | v4;
  uint64_t valuePtr = v5;
  if (qword_1000A5040 != v5)
  {
    qword_1000A5040 = v5;
    notify_set_state(dword_1000A5008, v4);
    CFNumberRef v6 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
    if (v6)
    {
      CFNumberRef v7 = v6;
      sub_10005C834((const __CFString *)qword_1000A4FF8, v6);
      CFRelease(v7);
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (Mutable)
    {
      size_t v9 = Mutable;
      CFNumberRef v10 = CFNumberCreate(0, kCFNumberIntType, &v21);
      if (v10)
      {
        CFNumberRef v11 = v10;
        CFDictionarySetValue(v9, @"UserLevel", v10);
        CFRelease(v11);
      }
      CFNumberRef v12 = CFNumberCreate(0, kCFNumberIntType, &v20);
      if (v12)
      {
        CFNumberRef v13 = v12;
        CFDictionarySetValue(v9, @"BatteryLevel", v12);
        CFRelease(v13);
      }
      CFNumberRef v14 = CFNumberCreate(0, kCFNumberIntType, &v19);
      if (v14)
      {
        CFNumberRef v15 = v14;
        CFDictionarySetValue(v9, @"ThermalLevel", v14);
        CFRelease(v15);
      }
      CFNumberRef v16 = CFNumberCreate(0, kCFNumberIntType, &v18);
      if (v16)
      {
        CFNumberRef v17 = v16;
        CFDictionarySetValue(v9, @"CombinedLevel", v16);
        CFRelease(v17);
      }
      sub_10005C834((const __CFString *)qword_1000A5000, v9);
      CFRelease(v9);
      notify_post("com.apple.system.powermanagement.SystemLoadAdvisory");
    }
  }
}

uint64_t sub_10005BA74(uint64_t result)
{
  if (byte_1000A500C == result) {
    return result;
  }
  int v1 = result;
  byte_1000A500C = result;
  if (result)
  {
    HIBYTE(word_1000A4FEsub_100048D14(0x12u, 0) = 0;
    int v2 = 0;
  }
  else
  {
    char v3 = sub_10003F9CC();
    BOOL v4 = os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_DEBUG);
    if (v3)
    {
      if (v4) {
        sub_10006CA30();
      }
      goto LABEL_11;
    }
    if (v4) {
      sub_10006CA64();
    }
    int v2 = 1;
  }
  sub_10005AC4C(v2);
LABEL_11:
  uint64_t v5 = qword_1000A4610;
  if (os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1000A500C) {
      CFNumberRef v6 = "Off";
    }
    else {
      CFNumberRef v6 = "On";
    }
    int v7 = 136315394;
    CFNumberRef v8 = v6;
    __int16 v9 = 1024;
    int v10 = sub_10003F9CC();
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Display state: %s NotificationWake : %d\n", (uint8_t *)&v7, 0x12u);
  }
  sub_10005B7C8();
  sub_10005B010();
  sub_100049ED0(v1);
  return sub_100042580();
}

void sub_10005BBD4(int a1)
{
  int v2 = qword_1000A4610;
  BOOL v3 = os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_DEFAULT);
  if (a1)
  {
    if (v3)
    {
      __int16 v7 = 0;
      BOOL v4 = "Entered Domino";
      uint64_t v5 = (uint8_t *)&v7;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, v4, v5, 2u);
    }
  }
  else if (v3)
  {
    __int16 v6 = 0;
    BOOL v4 = "Exited Domino";
    uint64_t v5 = (uint8_t *)&v6;
    goto LABEL_6;
  }
  byte_1000A5019 = a1;
  sub_10005B010();
  sub_100049ED0((byte_1000A5019 & 1) == 0);
}

void sub_10005BC7C(_xpc_connection_s *a1, void *a2)
{
  if (a1 && a2)
  {
    if (sub_10005CA7C(a1, @"com.apple.private.iokit.dominoservice"))
    {
      BOOL v3 = xpc_dictionary_get_BOOL(a2, "dominoState");
      BOOL v4 = xpc_dictionary_get_BOOL(a2, "dominoMainDisplay");
      uint64_t v5 = qword_1000A4610;
      if (os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_DEFAULT))
      {
        v6[0] = 67109376;
        v6[1] = v3;
        __int16 v7 = 1024;
        BOOL v8 = v4;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Domino set to %d on main display %d", (uint8_t *)v6, 0xEu);
      }
      sub_10005BBD4(v3);
      [+[PMSmartPowerNapService sharedInstance] updateAmbientState:v3];
    }
    else if (os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_ERROR))
    {
      sub_10006CA98();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_ERROR))
  {
    sub_10006CACC();
  }
}

void sub_10005BDE8(int a1)
{
  int v2 = qword_1000A4610;
  BOOL v3 = os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_DEFAULT);
  if (a1)
  {
    if (v3)
    {
      __int16 v7 = 0;
      BOOL v4 = "Oneness mode is on";
      uint64_t v5 = (uint8_t *)&v7;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, v4, v5, 2u);
    }
  }
  else if (v3)
  {
    __int16 v6 = 0;
    BOOL v4 = "Oneness mode is off";
    uint64_t v5 = (uint8_t *)&v6;
    goto LABEL_6;
  }
  byte_1000A501A = a1;
  sub_10005B010();
}

void sub_10005BE80(_xpc_connection_s *a1, void *a2)
{
  if (a1 && a2)
  {
    if (sub_10005CA7C(a1, @"com.apple.private.iokit.onenessservice"))
    {
      BOOL v3 = xpc_dictionary_get_BOOL(a2, "onenessState");
      BOOL v4 = qword_1000A4610;
      if (os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_DEFAULT))
      {
        v5[0] = 67109120;
        v5[1] = v3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Oneness mode set to %d", (uint8_t *)v5, 8u);
      }
      sub_10005BDE8(v3);
    }
    else if (os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_ERROR))
    {
      sub_10006CB34();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_ERROR))
  {
    sub_10006CB68();
  }
}

void sub_10005BFB8(uint64_t a1)
{
  byte_1000A501C = *(unsigned char *)(a1 + 32);
  byte_1000A501D = *(unsigned char *)(a1 + 34);
  sub_10005B7C8();
}

uint64_t sub_10005BFD4()
{
  return HIBYTE(word_1000A4FE0);
}

void sub_10005BFE0(void *a1, void *a2)
{
  if (a1 && a2)
  {
    BOOL v4 = malloc_type_calloc(1uLL, 0x28uLL, 0x10A0040D5C8FCC9uLL);
    if (v4)
    {
      uint64_t v5 = (uint64_t)v4;
      _DWORD v4[2] = xpc_retain(a1);
      *(_DWORD *)(v5 + 24) = xpc_dictionary_get_uint64(a2, "ActivityTimeout");
      __int16 v6 = (int *)(v5 + 24);
      sub_10005C0E0(v5);
      __int16 v7 = qword_1000A4610;
      if (os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_DEBUG)) {
        sub_10006CC04((_xpc_connection_s *)a1, v6, v7);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_ERROR))
    {
      sub_10006CBD0();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_ERROR))
  {
    sub_10006CCB8();
  }
}

void sub_10005C0E0(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 24);
  if (v2 <= 4)
  {
    if (os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_ERROR)) {
      sub_10006CD88();
    }
    unsigned int v2 = 5;
    *(_DWORD *)(a1 + 24) = 5;
  }
  if (v2 < dword_1000A4FC8)
  {
    dword_1000A4FC8 = v2;
    if (os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_DEBUG)) {
      sub_10006CD20();
    }
    dispatch_async((dispatch_queue_t)qword_1000A4FF0, &stru_100092E00);
    unint64_t v3 = sub_10005E248();
    uint64_t v4 = qword_1000A4FD8;
    if (qword_1000A4FD8)
    {
      unint64_t v5 = v3;
      if (!qword_1000A5048)
      {
        __int16 v6 = sub_10005C968();
        qword_1000A5048 = (uint64_t)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v6);
        dispatch_source_set_event_handler((dispatch_source_t)qword_1000A5048, &stru_100092E20);
        dispatch_source_set_cancel_handler((dispatch_source_t)qword_1000A5048, &stru_100092E40);
        uint64_t v4 = qword_1000A4FD8;
      }
      unint64_t v7 = v5 - v4;
      BOOL v8 = dword_1000A4FC8 >= v7;
      unint64_t v9 = dword_1000A4FC8 - v7;
      if (v9 != 0 && v8)
      {
        dispatch_time_t v10 = dispatch_time(0, 1000000000 * v9);
        dispatch_source_set_timer((dispatch_source_t)qword_1000A5048, v10, 0xFFFFFFFFFFFFFFFFLL, 0);
        if ((byte_1000A5050 & 1) == 0)
        {
          dispatch_resume((dispatch_object_t)qword_1000A5048);
          byte_1000A5050 = 1;
        }
      }
    }
  }
  CFNumberRef v11 = (uint64_t *)*((void *)&xmmword_1000A4FA8 + 1);
  if (*((void *)&xmmword_1000A4FA8 + 1))
  {
    while (1)
    {
      CFNumberRef v12 = v11;
      if (*((_DWORD *)v11 + 6) > *(_DWORD *)(a1 + 24)) {
        break;
      }
      CFNumberRef v11 = (uint64_t *)*v11;
      if (!*v12)
      {
        *(void *)a1 = 0;
        void *v12 = a1;
        goto LABEL_20;
      }
    }
    uint64_t v13 = v11[1];
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v13;
    *(void *)v11[1] = a1;
    v11[1] = a1;
  }
  else
  {
    CFNumberRef v12 = (void *)&xmmword_1000A4FA8 + 1;
    *((void *)&xmmword_1000A4FA8 + 1) = a1;
    *(void *)a1 = 0;
LABEL_20:
    *(void *)(a1 + 8) = v12;
  }
  *(void *)(a1 + 32) = -1;
  sub_10005B010();
}

void sub_10005C2B8(xpc_object_t object)
{
  if (object)
  {
    unsigned int v2 = (void *)*((void *)&xmmword_1000A4FA8 + 1);
    while (v2)
    {
      unint64_t v3 = v2;
      unsigned int v2 = (void *)*v2;
      if ((xpc_object_t)v3[2] == object)
      {
        if (v2) {
          v2[1] = v3[1];
        }
        *(void *)v3[1] = v2;
        xpc_release(object);
        free(v3);
        uint64_t v4 = qword_1000A4610;
        if (os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_DEBUG)) {
          sub_10006CE78((_xpc_connection_s *)object, v4);
        }
        return;
      }
    }
  }
  else
  {
    unint64_t v5 = qword_1000A4610;
    if (os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_ERROR)) {
      sub_10006CDFC(v5);
    }
  }
}

void sub_10005C36C(_xpc_connection_s *a1, xpc_object_t xdict)
{
  if (a1 && xdict)
  {
    unint64_t v3 = (void *)*((void *)&xmmword_1000A4FA8 + 1);
    while (v3)
    {
      uint64_t v4 = (uint64_t)v3;
      unint64_t v3 = (void *)*v3;
      if (*(_xpc_connection_s **)(v4 + 16) == a1)
      {
        if (v3) {
          v3[1] = *(void *)(v4 + 8);
        }
        **(void **)(v4 + 8) = v3;
        *(_DWORD *)(v4 + 24) = xpc_dictionary_get_uint64(xdict, "ActivityTimeout");
        sub_10005C0E0(v4);
        unint64_t v5 = qword_1000A4610;
        if (os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_DEBUG))
        {
          int v6 = *(_DWORD *)(v4 + 24);
          uint64_t v7 = *(void *)(v4 + 16);
          v9[0] = 67109632;
          v9[1] = v6;
          __int16 v10 = 2048;
          uint64_t v11 = v7;
          __int16 v12 = 1024;
          pid_t pid = xpc_connection_get_pid(a1);
          _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Updated idleTimeout to %d for  user inactivity client %p(pid %d)\n", (uint8_t *)v9, 0x18u);
        }
        return;
      }
    }
    BOOL v8 = qword_1000A4610;
    if (os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_ERROR)) {
      sub_10006CF04(a1, v8);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_ERROR))
  {
    sub_10006CF90();
  }
}

uint64_t sub_10005C4F0()
{
  unint64_t v0 = sub_10005E248();
  if (v0 <= qword_1000A4FD8) {
    return 0;
  }
  else {
    return (v0 - qword_1000A4FD8);
  }
}

unint64_t sub_10005C51C()
{
  unint64_t v0 = sub_10005E248();
  int v1 = qword_1000A4610;
  if (os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_DEBUG)) {
    sub_10006CFF8(v0, v1);
  }
  if (byte_1000A4F8F)
  {
    if ((_BYTE)word_1000A4FE0) {
      unint64_t v2 = 0;
    }
    else {
      unint64_t v2 = v0 - qword_1000A4FD0;
    }
  }
  else
  {
    unint64_t v2 = -1;
  }
  unint64_t v3 = v0 - qword_1000A4FD8;
  if (!HIBYTE(word_1000A4FE0)) {
    unint64_t v3 = -1;
  }
  if (v2 >= v3) {
    return v3;
  }
  else {
    return v2;
  }
}

void sub_10005C5C4(id a1)
{
  qword_1000A5030 = 0;
}

void sub_10005C5F0(id a1)
{
  qword_1000A4FB8 = IOHIDEventSystemClientCreateWithType();
  if (qword_1000A4FB8)
  {
    sub_10005AD60();
    IOHIDEventSystemClientSetMatching();
    IOHIDEventSystemClientRegisterPropertyChangedCallback();
    IOHIDEventSystemClientScheduleWithDispatchQueue();
    sub_10005AE78(@"IdleNotificationTime", dword_1000A4FC8);
    sub_10005AEFC();
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A4610, OS_LOG_TYPE_ERROR))
  {
    sub_10006D0BC();
  }
}

void sub_10005C6D0(id a1)
{
}

void sub_10005C6E8(id a1)
{
  qword_1000A5048 = 0;
}

uint64_t sub_10005C744()
{
  qword_1000A5058 = (uint64_t)CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  SCDynamicStoreRef v0 = SCDynamicStoreCreate(0, @"powerd", (SCDynamicStoreCallBack)sub_10005F7E8, 0);
  qword_1000A4618 = (uint64_t)v0;
  if (v0)
  {
    int v1 = v0;
    unint64_t v2 = sub_10005C968();
    SCDynamicStoreSetDispatchQueue(v1, v2);
    SCDynamicStoreRef v0 = (SCDynamicStoreRef)qword_1000A4618;
  }

  return _SCDynamicStoreSetDisconnectCallBack(v0, sub_10005C7EC);
}

uint64_t sub_10005C7EC(const __SCDynamicStore *a1)
{
  if ((const __SCDynamicStore *)qword_1000A4618 != a1) {
    sub_10006D0F0();
  }
  CFDictionaryRef v1 = (const __CFDictionary *)qword_1000A5058;

  return SCDynamicStoreSetMultiple(a1, v1, 0, 0);
}

BOOL sub_10005C834(const __CFString *a1, const void *a2)
{
  BOOL result = 0;
  if (a1 && a2 && qword_1000A5058)
  {
    CFTypeID TypeID = CFStringGetTypeID();
    if (CFGetTypeID(a1) == TypeID)
    {
      CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)qword_1000A5058, a1);
      if (Value && CFEqual(Value, a2))
      {
        return 1;
      }
      else
      {
        CFDictionarySetValue((CFMutableDictionaryRef)qword_1000A5058, a1, a2);
        return SCDynamicStoreSetValue((SCDynamicStoreRef)qword_1000A4618, a1, a2) != 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL sub_10005C8E8(BOOL result)
{
  if (result)
  {
    CFStringRef v1 = (const __CFString *)result;
    CFTypeID TypeID = CFStringGetTypeID();
    if (CFGetTypeID(v1) == TypeID)
    {
      CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_1000A5058, v1);
      return SCDynamicStoreRemoveValue((SCDynamicStoreRef)qword_1000A4618, v1) != 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10005C958()
{
  return qword_1000A4618;
}

dispatch_queue_t sub_10005C968()
{
  dispatch_queue_t result = (dispatch_queue_t)qword_1000A5060;
  if (!qword_1000A5060)
  {
    dispatch_queue_t result = dispatch_queue_create_with_target_V2("Power Management main queue", 0, 0);
    qword_1000A5060 = (uint64_t)result;
  }
  return result;
}

void sub_10005C9A8()
{
  ++dword_1000A5068;
  int v0 = dword_1000A34A8 + 1;
  if (dword_1000A34A8 == -1) {
    int v0 = 1;
  }
  dword_1000A34A8 = v0;
}

BOOL sub_10005C9D0(_OWORD *a1, const __CFString *a2)
{
  CFErrorRef error = 0;
  long long v3 = a1[1];
  *(_OWORD *)v9.val = *a1;
  *(_OWORD *)&v9.val[4] = v3;
  uint64_t v4 = SecTaskCreateWithAuditToken(kCFAllocatorDefault, &v9);
  if (!v4) {
    return 0;
  }
  unint64_t v5 = v4;
  CFBooleanRef v6 = (const __CFBoolean *)SecTaskCopyValueForEntitlement(v4, a2, &error);
  CFRelease(v5);
  BOOL v7 = kCFBooleanTrue == v6;
  if (v6) {
    CFRelease(v6);
  }
  if (error) {
    CFRelease(error);
  }
  return v7;
}

BOOL sub_10005CA7C(_xpc_connection_s *a1, const __CFString *a2)
{
  long long v12 = 0u;
  long long v13 = 0u;
  xpc_connection_get_audit_token();
  pid_t pid = xpc_connection_get_pid(a1);
  memset(&v11, 0, sizeof(v11));
  unint64_t v5 = SecTaskCreateWithAuditToken(kCFAllocatorDefault, &v11);
  if (v5)
  {
    CFBooleanRef v6 = v5;
    CFBooleanRef v7 = (const __CFBoolean *)SecTaskCopyValueForEntitlement(v5, a2, 0);
    CFBooleanRef v8 = v7;
    if (v7) {
      CFRelease(v7);
    }
    CFRelease(v6);
    if (kCFBooleanTrue == v8) {
      return 1;
    }
  }
  audit_token_t v9 = qword_1000A36D0;
  BOOL result = os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_10006D11C((uint64_t)a2, pid, v9);
    return 0;
  }
  return result;
}

BOOL sub_10005CB68(_OWORD *a1)
{
  CFErrorRef error = 0;
  long long v1 = a1[1];
  *(_OWORD *)v6.val = *a1;
  *(_OWORD *)&v6.val[4] = v1;
  unint64_t v2 = SecTaskCreateWithAuditToken(kCFAllocatorDefault, &v6);
  BOOL v3 = (BOOL)v2;
  if (v2)
  {
    CFTypeRef v4 = SecTaskCopyValueForEntitlement(v2, @"com.apple.private.xpc.launchd.job-manager", &error);
    CFRelease((CFTypeRef)v3);
    if (v4)
    {
      BOOL v3 = CFEqual(v4, @"com.apple.runningboard") != 0;
      CFRelease(v4);
    }
    else
    {
      BOOL v3 = 0;
    }
    if (error) {
      CFRelease(error);
    }
  }
  return v3;
}

uint64_t sub_10005CC14(const __CFString *a1, const void *a2)
{
  io_registry_entry_t v4 = sub_1000212AC();

  return IORegistryEntrySetCFProperty(v4, a1, a2);
}

CFTypeRef sub_10005CC54(const __CFString *a1)
{
  io_registry_entry_t v2 = sub_1000212AC();

  return IORegistryEntryCreateCFProperty(v2, a1, kCFAllocatorDefault, 0);
}

BOOL sub_10005CC9C(char *a1, int a2)
{
  CFStringRef v4 = (const __CFString *)IOPMSleepWakeCopyUUID();
  if (!v4) {
    return 0;
  }
  CFStringRef v5 = v4;
  BOOL v6 = CFStringGetCString(v4, a1, a2, 0x8000100u) != 0;
  CFRelease(v5);
  return v6;
}

CFStringRef sub_10005CD04()
{
  io_registry_entry_t v0 = sub_1000212AC();
  if (off_1000A34B0) {
    CFRelease(off_1000A34B0);
  }
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v0, @"Last Sleep Reason", kCFAllocatorDefault, 0);
  off_1000A34B0 = CFProperty;
  CFTypeID TypeID = CFStringGetTypeID();
  if (CFProperty && CFGetTypeID(CFProperty) == TypeID) {
    return (const __CFString *)off_1000A34B0;
  }
  CFStringRef result = &stru_100093D08;
  off_1000A34B0 = &stru_100093D08;
  return result;
}

uint64_t sub_10005CD98()
{
  return off_1000A34B0;
}

void sub_10005CDA4()
{
  if (off_1000A34B8) {
    CFRelease(off_1000A34B8);
  }
  if (off_1000A34C0) {
    CFRelease(off_1000A34C0);
  }
  if (qword_1000A5078) {
    CFRelease((CFTypeRef)qword_1000A5078);
  }
  io_registry_entry_t v0 = (const void *)qword_1000A5070;
  CFTypeID TypeID = CFArrayGetTypeID();
  if (v0 && CFGetTypeID(v0) == TypeID) {
    CFRelease((CFTypeRef)qword_1000A5070);
  }
  if (qword_1000A5088) {
    CFRelease((CFTypeRef)qword_1000A5088);
  }
  qword_1000A5078 = 0;
  qword_1000A5070 = 0;
  off_1000A34B8 = &stru_100093D08;
  off_1000A34C0 = &stru_100093D08;
  qword_1000A5088 = 0;
}

CFTypeID sub_10005CE58(void *a1, void *a2)
{
  if (off_1000A34B8)
  {
    CFRelease(off_1000A34B8);
    off_1000A34B8 = &stru_100093D08;
  }
  if (off_1000A34C0)
  {
    CFRelease(off_1000A34C0);
    off_1000A34C0 = &stru_100093D08;
  }
  if (qword_1000A5070)
  {
    CFRelease((CFTypeRef)qword_1000A5070);
    qword_1000A5070 = 0;
  }
  if (qword_1000A5078)
  {
    CFRelease((CFTypeRef)qword_1000A5078);
    qword_1000A5078 = 0;
  }
  io_registry_entry_t v4 = sub_1000212AC();
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v4, @"Wake Reason", kCFAllocatorDefault, 0);
  off_1000A34B8 = CFProperty;
  CFTypeID TypeID = CFStringGetTypeID();
  if (!CFProperty || CFGetTypeID(CFProperty) != TypeID) {
    off_1000A34B8 = &stru_100093D08;
  }
  io_registry_entry_t v7 = sub_1000212AC();
  CFTypeRef v8 = IORegistryEntryCreateCFProperty(v7, @"Wake Type", kCFAllocatorDefault, 0);
  off_1000A34C0 = v8;
  CFTypeID v9 = CFStringGetTypeID();
  if (!v8 || CFGetTypeID(v8) != v9) {
    off_1000A34C0 = &stru_100093D08;
  }
  io_registry_entry_t v10 = sub_1000212AC();
  CFArrayRef v11 = (const __CFArray *)IORegistryEntryCreateCFProperty(v10, @"IOPMDriverWakeEvents", kCFAllocatorDefault, 0);
  qword_1000A5070 = (uint64_t)v11;
  CFTypeID v12 = CFArrayGetTypeID();
  if (v11 && CFGetTypeID(v11) == v12 && (CFIndex Count = CFArrayGetCount(v11), Count >= 1))
  {
    CFIndex v14 = Count;
    CFIndex v15 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v11, v15);
      CFTypeID v17 = CFDictionaryGetTypeID();
      if (ValueAtIndex)
      {
        if (CFGetTypeID(ValueAtIndex) == v17)
        {
          CFStringRef Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"Reason");
          CFTypeID v19 = CFStringGetTypeID();
          if (Value)
          {
            if (CFGetTypeID(Value) == v19
              && (CFStringHasPrefix(Value, @"WiFi") || CFStringHasPrefix(Value, @"Enet")))
            {
              break;
            }
          }
        }
      }
      if (v14 == ++v15) {
        goto LABEL_26;
      }
    }
    CFTypeRef v20 = CFRetain(Value);
  }
  else
  {
LABEL_26:
    CFTypeRef v20 = 0;
  }
  qword_1000A5078 = (uint64_t)v20;
  uint64_t v21 = off_1000A34C0;
  if (v20) {
    uint64_t v21 = (uint64_t)v20;
  }
  qword_1000A5080 = v21;

  return sub_10005D0A8(a1, a2);
}

CFTypeID sub_10005D0A8(void *a1, void *a2)
{
  io_registry_entry_t v4 = (const void *)off_1000A34B8;
  CFTypeID TypeID = CFStringGetTypeID();
  if (!v4 || CFGetTypeID(v4) != TypeID) {
    off_1000A34B8 = &stru_100093D08;
  }
  BOOL v6 = (const void *)off_1000A34C0;
  CFTypeID result = CFStringGetTypeID();
  if (!v6 || (v8 = result, CFTypeID result = CFGetTypeID(v6), result != v8)) {
    off_1000A34C0 = &stru_100093D08;
  }
  if (a1) {
    *a1 = off_1000A34B8;
  }
  if (a2) {
    *a2 = off_1000A34C0;
  }
  return result;
}

uint64_t sub_10005D154(const __CFString *a1)
{
  io_registry_entry_t v2 = (const void *)qword_1000A5088;
  CFTypeID TypeID = CFArrayGetTypeID();
  if (!v2) {
    return 0;
  }
  if (CFGetTypeID(v2) != TypeID) {
    return 0;
  }
  CFTypeID v4 = CFStringGetTypeID();
  if (!a1) {
    return 0;
  }
  if (CFGetTypeID(a1) != v4) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)qword_1000A5088);
  if (Count < 1) {
    return 0;
  }
  CFIndex v6 = Count;
  CFIndex v7 = 0;
  while (1)
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000A5088, v7);
    CFTypeID v9 = CFStringGetTypeID();
    if (ValueAtIndex)
    {
      if (CFGetTypeID(ValueAtIndex) == v9 && CFEqual(a1, ValueAtIndex)) {
        break;
      }
    }
    if (v6 == ++v7) {
      return 0;
    }
  }
  return 1;
}

void sub_10005D234(_xpc_connection_s *a1, void *a2)
{
  if (!a1 || !a2) {
    return;
  }
  xpc_connection_get_audit_token();
  pid_t pid = xpc_connection_get_pid(a1);
  memset(&token, 0, sizeof(token));
  CFStringRef v5 = SecTaskCreateWithAuditToken(kCFAllocatorDefault, &token);
  CFStringRef v6 = (const __CFString *)v5;
  if (v5)
  {
    CFTypeRef v7 = SecTaskCopyValueForEntitlement(v5, @"com.apple.private.iokit.darkwake-control", 0);
    if (v7)
    {
      CFTypeID v8 = v7;
      string = xpc_dictionary_get_string(a2, "identity");
      io_registry_entry_t v10 = xpc_dictionary_get_string(a2, "reason");
      CFArrayRef v11 = v10;
      CFTypeID v12 = "--none--";
      if (string) {
        long long v13 = string;
      }
      else {
        long long v13 = "--none--";
      }
      if (v10) {
        CFTypeID v12 = v10;
      }
      snprintf((char *)&token, 0xFFuLL, "AppWoke:%s Reason:%s", v13, v12);
      CFIndex v14 = qword_1000A36D0;
      if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint8_t buf = 136446210;
        p_audit_token_t token = &token;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%{public}s\n", buf, 0xCu);
        CFIndex v14 = qword_1000A36D0;
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        token.val[0] = 136315394;
        *(void *)&token.val[1] = v11;
        LOWORD(token.val[3]) = 2080;
        *(void *)((char *)&token.val[3] + 2) = string;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Wake reason: \"%s\"  identity: \"%s\" \n", (uint8_t *)&token, 0x16u);
      }
      CFStringRef v15 = CFStringCreateWithCString(0, v11, 0x8000100u);
      if (v15)
      {
        CFMutableDictionaryRef Mutable = (__CFArray *)qword_1000A5088;
        if (qword_1000A5088
          || (CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks), (qword_1000A5088 = (uint64_t)Mutable) != 0))
        {
          CFArrayAppendValue(Mutable, v15);
        }
        else if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_ERROR))
        {
          sub_10006D250();
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_ERROR))
      {
        sub_10006D21C();
      }
      CFRelease(v6);
      CFRelease(v8);
      if (!v15) {
        return;
      }
LABEL_21:
      CFRelease(v15);
      return;
    }
  }
  CFTypeID v17 = qword_1000A36D0;
  if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_ERROR)) {
    sub_10006D1A4(pid, v17);
  }
  CFStringRef v15 = v6;
  if (v6) {
    goto LABEL_21;
  }
}

uint64_t sub_10005D4E8(_DWORD *a1)
{
  io_registry_entry_t v2 = sub_1000212AC();
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v2, @"IOHibernateState", kCFAllocatorDefault, 0);
  CFTypeID TypeID = CFDataGetTypeID();
  if (!CFProperty) {
    return 0;
  }
  if (CFGetTypeID(CFProperty) == TypeID
    && CFDataGetLength((CFDataRef)CFProperty) == 4
    && (BytePtr = CFDataGetBytePtr((CFDataRef)CFProperty)) != 0)
  {
    *a1 = *(_DWORD *)BytePtr;
    uint64_t v6 = 1;
  }
  else
  {
    uint64_t v6 = 0;
  }
  CFRelease(CFProperty);
  return v6;
}

const char *sub_10005D594(unsigned int a1)
{
  if (a1 > 7) {
    return "Unknown";
  }
  else {
    return (&off_100092EC0)[a1];
  }
}

uint64_t sub_10005D5B8()
{
  return 2;
}

BOOL sub_10005D5C0(xpc_connection_t connection, const __CFString *a2, int a3)
{
  if (a3 && xpc_connection_get_euid(connection)) {
    return 0;
  }
  long long v10 = 0u;
  long long v11 = 0u;
  xpc_connection_get_audit_token();
  memset(&v9, 0, sizeof(v9));
  CFTypeID v4 = SecTaskCreateWithAuditToken(kCFAllocatorDefault, &v9);
  if (!v4) {
    return 0;
  }
  CFStringRef v5 = v4;
  CFTypeRef v6 = SecTaskCopyValueForEntitlement(v4, a2, 0);
  BOOL v7 = v6 != 0;
  CFRelease(v5);
  if (v6)
  {
    CFRelease(v6);
    return 1;
  }
  return v7;
}

BOOL sub_10005D678(int a1)
{
  return a1 == 0;
}

void sub_10005D684(_xpc_connection_s *a1, xpc_object_t original)
{
  if (original)
  {
    xpc_object_t reply = xpc_dictionary_create_reply(original);
    if (reply)
    {
      CFStringRef v5 = reply;
      if (sub_10005D5C0(a1, @"com.apple.private.iokit.batteryTester", 1))
      {
        if (xpc_dictionary_get_value(original, "resetCustomBatteryProps"))
        {
          sub_10002E78C();
          xpc_dictionary_set_uint64(v5, "returnCode", 0);
          CFTypeRef v6 = qword_1000A36D0;
          if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)BOOL v7 = 0;
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "System reset to use default battery properties\n", v7, 2u);
          }
        }
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_ERROR)) {
          sub_10006D284();
        }
        xpc_dictionary_set_uint64(v5, "returnCode", 0xFFFFFFFFE00002C1);
      }
      xpc_connection_send_message(a1, v5);
      xpc_release(v5);
    }
    else if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_ERROR))
    {
      sub_1000657D8();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_ERROR))
  {
    sub_1000657A4();
  }
}

void sub_10005D7FC(_xpc_connection_s *a1, xpc_object_t original)
{
  if (original)
  {
    xpc_object_t reply = xpc_dictionary_create_reply(original);
    if (reply)
    {
      CFStringRef v5 = reply;
      if (!sub_10005D5C0(a1, @"com.apple.private.iokit.batteryTester", 1))
      {
        if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_ERROR)) {
          sub_10006D2EC();
        }
        xpc_dictionary_set_uint64(v5, "returnCode", 0xFFFFFFFFE00002C1);
        xpc_connection_send_message(a1, v5);
        goto LABEL_20;
      }
      if (xpc_dictionary_get_value(original, "customBatteryProps"))
      {
        CFTypeRef v6 = (const void *)_CFXPCCreateCFObjectFromXPCObject();
        CFTypeID TypeID = CFDictionaryGetTypeID();
        if (v6 && CFGetTypeID(v6) == TypeID)
        {
          sub_10002E4E8((uint64_t)v6);
          xpc_dictionary_set_uint64(v5, "returnCode", 0);
          xpc_connection_send_message(a1, v5);
LABEL_19:
          CFRelease(v6);
LABEL_20:
          xpc_release(v5);
          return;
        }
      }
      else
      {
        CFDictionaryGetTypeID();
        CFTypeRef v6 = 0;
      }
      if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_ERROR)) {
        sub_10006D2B8();
      }
      xpc_dictionary_set_uint64(v5, "returnCode", 0xFFFFFFFFE00002C2);
      xpc_connection_send_message(a1, v5);
      if (!v6) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
    if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_ERROR)) {
      sub_1000657D8();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_ERROR))
  {
    sub_1000657A4();
  }
}

__asl_object_s *sub_10005D9C4()
{
  io_registry_entry_t v0 = asl_new(0);
  asl_set(v0, "Level", "Notice");
  asl_set(v0, "Facility", "com.apple.iokit.power");
  return v0;
}

void sub_10005DA1C(int a1)
{
  io_registry_entry_t v2 = sub_1000215CC(a1);
  snprintf(__str, 0x78uLL, "SMC shutdown cause: %d: %s", a1, v2);
  BOOL v3 = qword_1000A36D0;
  if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint8_t buf = 136315138;
    CFStringRef v5 = __str;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%s\n", buf, 0xCu);
  }
}

void sub_10005DAE0(const char *a1, uint64_t a2, uint64_t a3, int a4)
{
  v15[0] = 0;
  __str[0] = 0;
  io_registry_entry_t v6 = sub_1000212AC();
  int valuePtr = -1;
  CFNumberRef CFProperty = (const __CFNumber *)IORegistryEntryCreateCFProperty(v6, @"SleepRequestedByPID", kCFAllocatorDefault, 0);
  if (CFProperty)
  {
    CFTypeID TypeID = CFNumberGetTypeID();
    if (CFGetTypeID(CFProperty) == TypeID) {
      CFNumberGetValue(CFProperty, kCFNumberIntType, &valuePtr);
    }
  }
  audit_token_t v9 = (const void *)off_1000A34B0;
  if (off_1000A34B0)
  {
    CFTypeID v10 = CFStringGetTypeID();
    if (CFGetTypeID(v9) == v10)
    {
      if (CFStringGetCString(off_1000A34B0, (char *)buffer, 50, 0x8000100u))
      {
        if (*(void *)buffer == 0x6572617774666F53 && *(void *)&buffer[6] == 0x7065656C53206572) {
          snprintf(__str, 0x64uLL, "'%s pid=%d'");
        }
        else {
          snprintf(__str, 0x64uLL, "'%s'");
        }
      }
    }
  }
  if (CFProperty) {
    CFRelease(CFProperty);
  }
  if (!strncmp(a1, "success", 8uLL))
  {
    if (a4 == 3) {
      strcpy(v15, "Entering Sleep state");
    }
    else {
      strcpy(v15, "Entering DarkWake state");
    }
    if (__str[0]) {
      snprintf(v15, 0xC8uLL, "%s due to %s");
    }
  }
  else
  {
    snprintf(v15, 0xC8uLL, "Failure during sleep: %s : %s");
  }
  CFTypeID v12 = qword_1000A36D0;
  if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buffer = 136446210;
    *(void *)&_OWORD buffer[4] = v15;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", buffer, 0xCu);
  }
}

void sub_10005DD64(const char *a1, uint64_t a2, const char *a3, char a4, int a5)
{
  if (sub_10005CC9C(__s1, 200) && strncmp(__s1, byte_1000A5094, 0x32uLL))
  {
    snprintf(byte_1000A5094, 0x32uLL, "%s", __s1);
    dword_1000A5090 = 0;
  }
  __s1[0] = 0;
  if (!strncmp(a1, "success", 8uLL))
  {
    buffer[0] = 0;
    v25[0] = 512;
    sysctlbyname("kern.wakereason", buffer, v25, 0, 0);
    if (a5 == 2)
    {
      io_registry_entry_t v11 = sub_1000212AC();
      CFStringRef CFProperty = (const __CFString *)IORegistryEntryCreateCFProperty(v11, @"Wake Type", kCFAllocatorDefault, 0);
      CFTypeID TypeID = CFStringGetTypeID();
      if (CFProperty)
      {
        if (CFGetTypeID(CFProperty) == TypeID) {
          CFStringGetCString(CFProperty, buffer, 512, 0x8000100u);
        }
        CFRelease(CFProperty);
      }
      strcpy(__s1, "DarkWake to FullWake");
    }
    else if (a5 == 1)
    {
      ++dword_1000A5090;
      strcpy(__s1, "DarkWake");
    }
    else
    {
      strcpy(__s1, "Wake");
    }
    CFIndex v14 = "C";
    if ((a4 & 1) == 0) {
      CFIndex v14 = "<off> ";
    }
    CFStringRef v15 = "D";
    if ((a4 & 0x10) == 0) {
      CFStringRef v15 = "";
    }
    CFNumberRef v16 = "N";
    if ((a4 & 8) == 0) {
      CFNumberRef v16 = "";
    }
    CFTypeID v17 = "V";
    if ((a4 & 2) == 0) {
      CFTypeID v17 = "";
    }
    int v18 = "A";
    if ((a4 & 4) == 0) {
      int v18 = "";
    }
    CFTypeID v19 = "P";
    if ((a4 & 0x20) == 0) {
      CFTypeID v19 = "";
    }
    if ((a4 & 0x40) != 0) {
      CFTypeRef v20 = "B";
    }
    else {
      CFTypeRef v20 = "";
    }
    snprintf((char *)v25, 0x32uLL, " [%s%s%s%s%s%s%s]", v14, v15, v16, v17, v18, v19, v20);
    strlen(__s1);
    __strncat_chk();
    CFTypeID v10 = buffer;
  }
  else
  {
    if (a1) {
      audit_token_t v9 = a1;
    }
    else {
      audit_token_t v9 = "";
    }
    snprintf(__s1, 0xC8uLL, "Failure during wake: %s : %s", a3, v9);
    CFTypeID v10 = 0;
  }
  uint64_t v21 = ": due to";
  if (!v10)
  {
    uint64_t v21 = "";
    CFTypeID v10 = "";
  }
  snprintf(__s1, 0xC8uLL, "%s %s %s\n", __s1, v21, v10);
  CFTypeID v22 = qword_1000A36D0;
  if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint8_t buf = 136446210;
    BOOL v24 = __s1;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%{public}s\n", buf, 0xCu);
  }
}

void sub_10005E0A4(unint64_t a1)
{
  snprintf(__str, 0x80uLL, "WakeTime: %2.3lf sec", (double)a1 / 1000000.0 / 1000.0);
  long long v1 = qword_1000A36D0;
  if (os_log_type_enabled((os_log_t)qword_1000A36D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint8_t buf = 136315138;
    BOOL v3 = __str;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "%s\n", buf, 0xCu);
  }
}

void sub_10005E17C()
{
  if (sub_10005F7DC())
  {
    io_registry_entry_t v0 = qword_1000A5060;
    if (!qword_1000A5060)
    {
      io_registry_entry_t v0 = dispatch_queue_create_with_target_V2("Power Management main queue", 0, 0);
      qword_1000A5060 = (uint64_t)v0;
    }
    dispatch_async(v0, &stru_100092E80);
  }
}

unint64_t sub_10005E1EC(uint64_t a1)
{
  unsigned int v2 = dword_1000A50CC;
  if (!dword_1000A50CC)
  {
    mach_timebase_info((mach_timebase_info_t)&dword_1000A50C8);
    unsigned int v2 = dword_1000A50CC;
  }
  return (unint64_t)dword_1000A50C8 * a1 / (1000000000 * (unint64_t)v2);
}

unint64_t sub_10005E248()
{
  uint64_t v0 = mach_continuous_time();
  unsigned int v1 = dword_1000A50CC;
  if (!dword_1000A50CC)
  {
    mach_timebase_info((mach_timebase_info_t)&dword_1000A50C8);
    unsigned int v1 = dword_1000A50CC;
  }
  return v0 * dword_1000A50C8 / (1000000000 * (unint64_t)v1);
}

unint64_t sub_10005E2A8()
{
  uint64_t v0 = mach_absolute_time();
  unsigned int v1 = dword_1000A50CC;
  if (!dword_1000A50CC)
  {
    mach_timebase_info((mach_timebase_info_t)&dword_1000A50C8);
    unsigned int v1 = dword_1000A50CC;
  }
  return v0 * dword_1000A50C8 / (1000000000 * (unint64_t)v1);
}

uint64_t sub_10005E308(uid_t a1)
{
  unsigned int v5 = 17;
  uint64_t result = (uint64_t)getpwuid(a1);
  if (result)
  {
    getgrouplist(*(const char **)result, *(_DWORD *)(result + 20), v6, (int *)&v5);
    uint64_t result = (uint64_t)getgrnam("admin");
    if (result)
    {
      uint64_t v2 = v5;
      if ((int)v5 < 1)
      {
        return 0;
      }
      else
      {
        BOOL v3 = v6;
        while (1)
        {
          int v4 = *v3++;
          if (v4 == *(_DWORD *)(result + 16)) {
            break;
          }
          if (!--v2) {
            return 0;
          }
        }
        return 1;
      }
    }
  }
  return result;
}

double sub_10005E3BC()
{
  unint64_t valuePtr = 0;
  io_service_t MatchingService = dword_1000A50D0;
  if (!dword_1000A50D0)
  {
    CFDictionaryRef v1 = IOServiceMatching("IOHIDSystem");
    io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v1);
    dword_1000A50D0 = MatchingService;
    if (!MatchingService) {
      return 0.0;
    }
  }
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(MatchingService, @"HIDIdleTime", 0, 0);
  CFTypeID TypeID = CFNumberGetTypeID();
  if (!CFProperty) {
    return 0.0;
  }
  double v4 = 0.0;
  if (CFGetTypeID(CFProperty) == TypeID && CFNumberGetValue((CFNumberRef)CFProperty, kCFNumberSInt64Type, &valuePtr)) {
    double v4 = (double)valuePtr / 1000000000.0;
  }
  CFRelease(CFProperty);
  return v4;
}

uint64_t sub_10005E498(int a1, const void *a2, unsigned int a3)
{
  if (!a1) {
    return 3758097118;
  }
  memset(v16, 0, sizeof(v16));
  long long v15 = 0u;
  long long v14 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  v16[6] = 9;
  int v13 = a1;
  uint64_t result = sub_10005E5CC(&v13, &v8);
  if (!result)
  {
    if (BYTE8(v10))
    {
      if (BYTE8(v10) == 132) {
        return 3758097136;
      }
      else {
        return 3758097097;
      }
    }
    else
    {
      v16[6] = 6;
      int v13 = a1;
      DWORD2(v15) = HIDWORD(v9);
      if (a3 >= 0x20) {
        size_t v7 = 32;
      }
      else {
        size_t v7 = a3;
      }
      if (a2 && v7) {
        memcpy(&v16[12], a2, v7);
      }
      long long v11 = 0u;
      long long v12 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      long long v8 = 0u;
      LODWORD(result) = sub_10005E5CC(&v13, &v8);
      if (BYTE8(v10)) {
        return 3758097097;
      }
      else {
        return result;
      }
    }
  }
  return result;
}

uint64_t sub_10005E5CC(const void *a1, void *a2)
{
  size_t outputStructCnt = 80;
  io_connect_t connect = 0;
  CFDictionaryRef v4 = IOServiceMatching("AppleSMC");
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v4);
  if (!MatchingService) {
    return 3758097084;
  }
  uint64_t v6 = IOServiceOpen(MatchingService, mach_task_self_, 1u, &connect);
  if (v6) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = connect == 0;
  }
  if (!v7)
  {
    uint64_t v6 = IOConnectCallMethod(connect, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    if (!v6) {
      uint64_t v6 = IOConnectCallStructMethod(connect, 2u, a1, 0x50uLL, a2, &outputStructCnt);
    }
    if (connect)
    {
      IOConnectCallMethod(connect, 1u, 0, 0, 0, 0, 0, 0, 0, 0);
      IOServiceClose(connect);
    }
  }
  return v6;
}

uint64_t sub_10005E6F0(int a1, const void *a2, unsigned int a3)
{
  if (!a1) {
    return 3758097118;
  }
  int v23 = 0;
  memset(v22, 0, sizeof(v22));
  long long v21 = 0u;
  long long v20 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v18 = 0;
  v22[6] = 9;
  int v19 = a1;
  uint64_t result = sub_10005E85C(&v19, &v8);
  if (!result)
  {
    if (BYTE8(v10))
    {
      if (BYTE8(v10) == 132) {
        return 3758097136;
      }
      else {
        return 3758097097;
      }
    }
    else
    {
      v22[6] = 6;
      int v19 = a1;
      DWORD2(v21) = HIDWORD(v9);
      if (a3 >= 0x78) {
        size_t v7 = 120;
      }
      else {
        size_t v7 = a3;
      }
      if (a2 && v7) {
        memcpy(&v22[12], a2, v7);
      }
      long long v11 = 0u;
      long long v12 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      long long v8 = 0u;
      LODWORD(result) = sub_10005E85C(&v19, &v8);
      if (BYTE8(v10)) {
        return 3758097097;
      }
      else {
        return result;
      }
    }
  }
  return result;
}

uint64_t sub_10005E85C(const void *a1, void *a2)
{
  size_t outputStructCnt = 168;
  io_connect_t connect = 0;
  CFDictionaryRef v4 = IOServiceMatching("AppleSMC");
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v4);
  if (!MatchingService) {
    return 3758097084;
  }
  uint64_t v6 = IOServiceOpen(MatchingService, mach_task_self_, 1u, &connect);
  if (v6) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = connect == 0;
  }
  if (!v7)
  {
    uint64_t v6 = IOConnectCallMethod(connect, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    if (!v6) {
      uint64_t v6 = IOConnectCallStructMethod(connect, 2u, a1, 0xA8uLL, a2, &outputStructCnt);
    }
    if (connect)
    {
      IOConnectCallMethod(connect, 1u, 0, 0, 0, 0, 0, 0, 0, 0);
      IOServiceClose(connect);
    }
  }
  return v6;
}

BOOL sub_10005E980(BOOL result)
{
  if (result)
  {
    int v22 = 0;
    long long v21 = 0u;
    long long v20 = 0u;
    long long v19 = 0u;
    long long v18 = 0u;
    long long v17 = 0u;
    long long v16 = 0u;
    long long v15 = 0u;
    long long v14 = 0u;
    long long v13 = 0u;
    long long v12 = 0u;
    memset(v1, 0, sizeof(v1));
    long long v2 = 0u;
    long long v3 = 0u;
    long long v4 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    uint64_t v10 = 0;
    BYTE6(v14) = 9;
    BOOL v11 = result;
    sub_10005E85C(&v11, v1);
    return BYTE8(v2) == 0;
  }
  return result;
}

uint64_t sub_10005EA44(int a1, void *a2, unsigned char *a3, unsigned int a4)
{
  uint64_t result = 3758097118;
  if (a1)
  {
    if (a2)
    {
      bzero(a2, *a3);
      long long v21 = 0u;
      memset(v22, 0, sizeof(v22));
      long long v20 = 0u;
      long long v19 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      BYTE6(v21) = 9;
      int v18 = a1;
      uint64_t result = sub_10005E5CC(&v18, &v13);
      if (!result)
      {
        if (BYTE8(v15))
        {
          if (BYTE8(v15) == 132) {
            return 3758097136;
          }
          else {
            return 3758097097;
          }
        }
        else
        {
          if (a4 > 1) {
            a4 = (BYTE4(v15) & 4) == 0;
          }
          BYTE6(v21) = 5;
          int v18 = a1;
          DWORD2(v2sub_100048D14(0x12u, 0) = HIDWORD(v14);
          long long v13 = 0u;
          long long v14 = 0u;
          long long v15 = 0u;
          long long v16 = 0u;
          long long v17 = 0u;
          uint64_t result = sub_10005E5CC(&v18, &v13);
          if (BYTE8(v15))
          {
            uint64_t result = 3758097136;
            if (BYTE8(v15) != 132) {
              return 3758097097;
            }
          }
          else
          {
            LODWORD(v9) = *a3;
            if (DWORD2(v20) < v9)
            {
              LODWORD(v9) = BYTE8(v20);
              *a3 = BYTE8(v20);
            }
            if (v9)
            {
              unint64_t v10 = 0;
              int v11 = -1;
              do
              {
                unint64_t v12 = v11 + (int)v9;
                if (!a4) {
                  unint64_t v12 = v10;
                }
                *((unsigned char *)a2 + v10++) = *((unsigned char *)&v16 + v12);
                unint64_t v9 = *a3;
                --v11;
              }
              while (v10 < v9);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_10005EBF0(const char *a1, _DWORD *a2)
{
  uint64_t v4 = 3758097084;
  CFMutableDictionaryRef properties = 0;
  io_registry_entry_t v5 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/options");
  if (v5)
  {
    io_object_t v6 = v5;
    if (!IORegistryEntryCreateCFProperties(v5, &properties, 0, 0))
    {
      CFStringRef v7 = CFStringCreateWithCStringNoCopy(0, a1, 0x8000100u, kCFAllocatorNull);
      CFTypeID TypeID = CFStringGetTypeID();
      if (v7)
      {
        if (CFGetTypeID(v7) == TypeID)
        {
          CFDataRef Value = (const __CFData *)CFDictionaryGetValue(properties, v7);
          if (Value)
          {
            uint64_t v4 = 0;
            *a2 = *(_DWORD *)CFDataGetBytePtr(Value);
          }
        }
        CFRelease(v7);
      }
    }
    if (properties) {
      CFRelease(properties);
    }
    IOObjectRelease(v6);
  }
  return v4;
}

uint64_t sub_10005ECEC(const char *a1, char *a2, CFIndex a3)
{
  uint64_t v6 = 3758097084;
  CFMutableDictionaryRef properties = 0;
  io_registry_entry_t v7 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/options");
  if (v7)
  {
    io_object_t v8 = v7;
    if (!IORegistryEntryCreateCFProperties(v7, &properties, 0, 0))
    {
      CFStringRef v9 = CFStringCreateWithCStringNoCopy(0, a1, 0x8000100u, kCFAllocatorNull);
      CFTypeID TypeID = CFStringGetTypeID();
      if (v9)
      {
        if (CFGetTypeID(v9) == TypeID)
        {
          CFStringRef Value = (const __CFString *)CFDictionaryGetValue(properties, v9);
          CFTypeID v12 = CFStringGetTypeID();
          if (Value)
          {
            if (CFGetTypeID(Value) == v12)
            {
              if (CFStringGetCString(Value, a2, a3, 0x8000100u)) {
                uint64_t v6 = 0;
              }
              else {
                uint64_t v6 = 3758097115;
              }
            }
          }
        }
        CFRelease(v9);
      }
    }
    if (properties) {
      CFRelease(properties);
    }
    IOObjectRelease(v8);
  }
  return v6;
}

uint64_t sub_10005EE24(const char *a1, char *const *a2, NSObject *a3, uint64_t a4)
{
  posix_spawn_file_actions_t v15 = 0;
  pid_t v14 = -1;
  posix_spawn_file_actions_init(&v15);
  posix_spawn_file_actions_addopen(&v15, 0, "/dev/null", 0, 0x1B6u);
  posix_spawn_file_actions_addopen(&v15, 1, "/dev/null", 1, 0x1B6u);
  posix_spawn_file_actions_addopen(&v15, 2, "/dev/null", 1, 0x1B6u);
  io_object_t v8 = _NSGetEnviron();
  LODWORD(a2) = posix_spawn(&v14, a1, &v15, 0, a2, *v8);
  int v9 = *__error();
  posix_spawn_file_actions_destroy(&v15);
  if (a2 == -1)
  {
    *__error() = v9;
    return 0xFFFFFFFFLL;
  }
  else
  {
    if (a4)
    {
      unint64_t v10 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_proc, v14, 0x80000000uLL, a3);
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 0x40000000;
      void v12[2] = sub_10005EF9C;
      v12[3] = &unk_100092EA0;
      pid_t v13 = v14;
      v12[4] = a4;
      void v12[5] = v10;
      dispatch_source_set_event_handler(v10, v12);
      dispatch_activate(v10);
    }
    return 0;
  }
}

void sub_10005EF9C(uint64_t a1)
{
  int v2 = 0;
  waitpid(*(_DWORD *)(a1 + 48), &v2, 0);
  (*(void (**)(void, void))(a1 + 32))(*(unsigned int *)(a1 + 48), v2);
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 40));
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
}

void start()
{
  uint64_t v0 = sub_10005C968();
  dispatch_sync_f(v0, 0, (dispatch_function_t)sub_10005F024);
  dispatch_main();
}

uint64_t sub_10005F024()
{
  kern_return_t v0;
  NSObject *v1;
  _xpc_connection_s *mach_service;
  NSObject *v3;
  IONotificationPort *v4;
  CFDictionaryRef v5;
  NSObject *v6;
  NSObject *v7;
  __CFNotificationCenter *DarwinNotifyCenter;
  mach_port_t v9;
  io_registry_entry_t v10;
  io_service_t v11;
  IONotificationPort *v12;
  IONotificationPort *v13;
  NSObject *v14;
  IONotificationPort *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  int out_token;
  io_iterator_t notification;
  uint64_t state64[2];

  uint64_t v0 = bootstrap_check_in(bootstrap_port, "com.apple.PowerManagement.control", (mach_port_t *)&dword_1000A5108);
  CFDictionaryRef v1 = sub_10005C968();
  mach_service = xpc_connection_create_mach_service("com.apple.iokit.powerdxpc", v1, 1uLL);
  long long v3 = sub_10005C968();
  xpc_connection_set_target_queue(mach_service, v3);
  xpc_connection_set_event_handler(mach_service, &stru_100092F00);
  xpc_connection_resume(mach_service);
  if (v0) {
    syslog(3, "PM configd: bootstrap_register \"%s\" CFErrorRef error = %d\n", "com.apple.PowerManagement.control", v0);
  }
  if (dword_1000A5108)
  {
    sub_10005C968();
    qword_1000A5110 = dispatch_mach_create_f();
    dispatch_mach_connect();
  }
  sub_10005C744();
  sub_100029A00();
  sub_10005C968();
  qword_1000A4620 = IOPMRegisterPrefsChangeNotification();
  io_object_t notification = 0;
  uint64_t v4 = IONotificationPortCreate(0);
  io_registry_entry_t v5 = IOServiceMatching("IODTNVRAM");
  if (!IOServiceAddMatchingNotification(v4, "IOServiceFirstMatch", v5, (IOServiceMatchingCallback)sub_10006040C, v4, &notification))sub_10006040C(v4, notification); {
  int out_token = 0;
  }
  state64[0] = 0;
  uint64_t v6 = sub_10005C968();
  notify_register_dispatch("com.apple.iokit.hid.displayStatus", &out_token, v6, &stru_100092F48);
  notify_get_state(out_token, state64);
  byte_1000A50F0 = state64[0] == 0;
  io_registry_entry_t v7 = sub_10005C968();
  IONotificationPortSetDispatchQueue(v4, v7);
  qword_1000A5130 = (uint64_t)CFStringCreateWithCString(kCFAllocatorDefault, "NSSystemTimeZoneDidChangeDistributedNotification", 0);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  if (DarwinNotifyCenter) {
    CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)sub_1000605BC, (CFStringRef)qword_1000A5130, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  }
  sub_10005F6AC();
  LODWORD(state64[0]) = 0;
  if (!mach_port_allocate(mach_task_self_, 1u, (mach_port_name_t *)state64))
  {
    int v9 = mach_host_self();
    if (!host_request_notification(v9, 0, state64[0]))
    {
      sub_10005C968();
      qword_1000A5138 = dispatch_mach_create_f();
      dispatch_mach_connect();
    }
  }
  LODWORD(state64[0]) = 0;
  sub_10005CC14(@"System Shutdown", kCFBooleanFalse);
  notify_register_mach_port("com.apple.system.power.CPU", (mach_port_t *)state64, 0, &dword_1000A5148);
  notify_register_mach_port("com.apple.system.loginwindow.shutdownInitiated", (mach_port_t *)state64, 1, &dword_1000A514C);
  notify_register_mach_port("com.apple.system.loginwindow.restartinitiated", (mach_port_t *)state64, 1, &dword_1000A5150);
  notify_register_mach_port("com.apple.system.loginwindow.logoutcancelled", (mach_port_t *)state64, 1, &dword_1000A5154);
  notify_register_mach_port("com.apple.system.loginwindow.logoutNoReturn", (mach_port_t *)state64, 1, &dword_1000A5158);
  notify_register_mach_port("com.apple.system.loginwindow.sulogoutinitiated", (mach_port_t *)state64, 1, &dword_1000A515C);
  sub_10005C968();
  qword_1000A5140 = dispatch_mach_create_f();
  dispatch_mach_connect();
  LODWORD(state64[0]) = 0;
  unint64_t v10 = IORegistryEntryFromPath(kIOMainPortDefault, "IOPower:/IOPowerConnection/IOPMrootDomain");
  if (v10)
  {
    int v11 = v10;
    CFTypeID v12 = IONotificationPortCreate(0);
    if (v12)
    {
      pid_t v13 = v12;
      if (!IOServiceAddInterestNotification(v12, v11, "IOGeneralInterest", (IOServiceInterestCallback)sub_100060900, 0, (io_object_t *)state64))
      {
        pid_t v14 = sub_10005C968();
        IONotificationPortSetDispatchQueue(v13, v14);
      }
    }
    IOObjectRelease(v11);
  }
  sub_1000216A8();
  sub_10003E38C();
  state64[0] = 0;
  io_object_t notification = 0;
  dword_1000A50EC = IORegisterForSystemPower(0, (IONotificationPortRef *)state64, (IOServiceInterestCallback)sub_100060AA8, &notification);
  if (dword_1000A50EC)
  {
    posix_spawn_file_actions_t v15 = (IONotificationPort *)state64[0];
    if (state64[0])
    {
      long long v16 = sub_10005C968();
      IONotificationPortSetDispatchQueue(v15, v16);
    }
  }
  sub_10005FB0C();
  sub_10002E9C4();
  sub_1000563B8();
  sub_10002BF1C();
  sub_10005119C();
  sub_1000543E8();
  sub_10005B1D8();
  sub_100019BE0();
  sub_10005A1A8();
  sub_1000148D4();
  long long v17 = sub_1000405D8();
  nullsub_4(v17, v18);
  pthread_set_qos_class_self_np(QOS_CLASS_USER_INITIATED, 0);
  pthread_set_fixedpriority_self();
  sub_10002F198();
  if (objc_opt_class())
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG)) {
      sub_10006D320();
    }
    qword_1000A5118 = +[PMLowPowerModeService sharedInstance];
  }
  if (objc_opt_class())
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(state64[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Initializing SmartPowerNap service", (uint8_t *)state64, 2u);
    }
    qword_1000A5120 = +[PMSmartPowerNapService sharedInstance];
  }
  if (objc_opt_class())
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(state64[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Initializing CoreSmartPowerNap service", (uint8_t *)state64, 2u);
    }
    qword_1000A5128 = +[PMCoreSmartPowerNapService sharedInstance];
  }
  if ([+[USBDeviceMode sharedInstance] start]
    && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(state64[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Initializing USBDeviceMode notifications", (uint8_t *)state64, 2u);
  }
  sub_100054D1C();
  return notify_post("com.apple.system.powermanagement.assertionresync");
}

void sub_10005F630(int a1, int a2, int a3)
{
  if (a1 & ~a2 & a3)
  {
    size_t v3 = 16;
    if (sysctlbyname("kern.sleeptime", &qword_1000A50D8, &v3, 0, 0))
    {
      qword_1000A50D8 = 0;
      dword_1000A50E0 = 0;
    }
    byte_1000A50E8 = 1;
    sub_10005F6AC();
  }
}

void sub_10005F6AC()
{
  CFTimeZoneResetSystem();
  CFTimeZoneRef v0 = CFTimeZoneCopySystem();
  if (v0)
  {
    CFTimeZoneRef v1 = v0;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    int valuePtr = (int)CFTimeZoneGetSecondsFromGMT(v1, Current);
    CFNumberRef v3 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v3)
    {
      CFTimeZoneRef v4 = v3;
      sub_10005CC14(@"TimeZoneOffsetSeconds", v3);
      CFRelease(v1);
      CFTimeZoneRef v1 = v4;
    }
    CFRelease(v1);
  }
}

uint64_t sub_10005F730(intptr_t type, int a2)
{
  if (a2)
  {
    io_connect_t v3 = dword_1000A50EC;
    return IOAllowPowerChange(v3, type);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)io_registry_entry_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Cancelling sleep due to async assertions\n", v5, 2u);
    }
    sub_100040A14(1);
    return IOCancelPowerChange(dword_1000A50EC, type);
  }
}

uint64_t sub_10005F7DC()
{
  return byte_1000A50F0;
}

CFIndex sub_10005F7E8(int a1, CFArrayRef theArray)
{
  return CFArrayGetCount(theArray);
}

uint64_t sub_10005F7F0(uint64_t a1, _OWORD *a2, int a3, uint64_t a4, _DWORD *a5)
{
  *(void *)pid_t pidp = 0;
  long long v9 = a2[1];
  *(_OWORD *)atoken.val = *a2;
  *(_OWORD *)&atoken.val[4] = v9;
  audit_token_to_au32(&atoken, 0, 0, 0, (uid_t *)&pidp[1], 0, pidp, 0, 0);
  *a5 = 0;
  switch(a3)
  {
    case 9:
      long long v11 = a2[1];
      *(_OWORD *)atoken.val = *a2;
      *(_OWORD *)&atoken.val[4] = v11;
      if (sub_10005C9D0(&atoken, @"com.apple.private.iokit.reservepower-control")) {
        *a5 = sub_10004DC80(a4);
      }
      else {
        *a5 = -536870207;
      }
      break;
    case 8:
      sub_10004C450(pidp[0], a4);
      break;
    case 7:
      nullsub_4(a4, v10);
      break;
  }
  return 0;
}

uint64_t sub_10005F8D4(uint64_t a1, _OWORD *a2, uint64_t a3, _DWORD *a4)
{
  uid_t ruidp = 0;
  long long v5 = a2[1];
  *(_OWORD *)atoken.val = *a2;
  *(_OWORD *)&atoken.val[4] = v5;
  audit_token_to_au32(&atoken, 0, 0, 0, &ruidp, 0, 0, 0, 0);
  *a4 = 0;
  return 0;
}

uint64_t sub_10005F938(uint64_t a1, _OWORD *a2, const char *a3, unsigned int a4, int *a5)
{
  uid_t euidp = 0;
  long long v8 = a2[1];
  *(_OWORD *)atoken.val = *a2;
  *(_OWORD *)&atoken.val[4] = v8;
  audit_token_to_au32(&atoken, 0, &euidp, 0, 0, 0, 0, 0, 0);
  if (euidp)
  {
    int v9 = -536870207;
LABEL_3:
    *a5 = v9;
    goto LABEL_10;
  }
  CFDictionaryRef v10 = (const __CFDictionary *)IOCFUnserialize(a3, 0, 0, 0);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!v10)
  {
    int v9 = -536870206;
    goto LABEL_3;
  }
  if (CFGetTypeID(v10) == TypeID) {
    int v12 = sub_1000567B4(v10);
  }
  else {
    int v12 = -536870206;
  }
  *a5 = v12;
  CFRelease(v10);
LABEL_10:
  vm_deallocate(mach_task_self_, (vm_address_t)a3, a4);
  return 0;
}

uint64_t sub_10005FA44(uint64_t a1, void *a2, _DWORD *a3, void *a4, _DWORD *a5, int *a6)
{
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  if (byte_1000A50E8)
  {
    int v6 = -536870184;
  }
  else
  {
    int v6 = 0;
    *a2 = qword_1000A50F8;
    *a3 = 8;
    *a4 = qword_1000A5100;
    *a5 = 8;
  }
  *a6 = v6;
  return 0;
}

void sub_10005FAA0(uint64_t a1, uint64_t a2)
{
  if (a2 == 2 && (dispatch_mach_mig_demux() & 1) == 0)
  {
    mach_msg_header_t msg = (mach_msg_header_t *)dispatch_mach_msg_get_msg();
    mach_msg_destroy(msg);
  }
}

const void *sub_10005FB0C()
{
  uint64_t result = (const void *)sub_1000212AC();
  if (result)
  {
    io_registry_entry_t v1 = result;
    memset(out, 0, sizeof(out));
    memset(v2, 0, sizeof(v2));
    uuid_generate(out);
    uuid_unparse_upper(out, v2);
    if (qword_1000A5170)
    {
      CFRelease((CFTypeRef)qword_1000A5170);
      qword_1000A5170 = 0;
    }
    uint64_t result = CFStringCreateWithCString(0, v2, 0x8000100u);
    qword_1000A5170 = (uint64_t)result;
    if (result) {
      return (const void *)IORegistryEntrySetCFProperty(v1, @"SleepWakeUUID", result);
    }
  }
  return result;
}

void sub_10005FBD0(id a1, OS_xpc_object *a2)
{
  if (xpc_get_type(a2) == (xpc_type_t)&_xpc_type_connection)
  {
    io_connect_t v3 = sub_10005C968();
    xpc_connection_set_target_queue(a2, v3);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10005FC7C;
    handler[3] = &unk_100091CF8;
    void handler[4] = a2;
    xpc_connection_set_event_handler(a2, handler);
    xpc_connection_resume(a2);
  }
}

void sub_10005FC7C(uint64_t a1, xpc_object_t object)
{
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t value = xpc_dictionary_get_value(object, "userActivityRegister");
    if (value)
    {
      long long v5 = value;
      int v6 = *(void **)(a1 + 32);
      sub_10005BFE0(v6, v5);
    }
    else
    {
      xpc_object_t v9 = xpc_dictionary_get_value(object, "userActivityTimeout");
      if (v9)
      {
        CFDictionaryRef v10 = v9;
        long long v11 = *(_xpc_connection_s **)(a1 + 32);
        sub_10005C36C(v11, v10);
      }
      else
      {
        xpc_object_t v12 = xpc_dictionary_get_value(object, "claimSystemWakeEvent");
        if (v12)
        {
          pid_t v13 = v12;
          pid_t v14 = *(_xpc_connection_s **)(a1 + 32);
          sub_10005D234(v14, v13);
        }
        else if (xpc_dictionary_get_value(object, "assertionCreate"))
        {
          posix_spawn_file_actions_t v15 = *(_xpc_connection_s **)(a1 + 32);
          sub_1000449D4(v15, object);
        }
        else if (xpc_dictionary_get_value(object, "assertionRelease"))
        {
          long long v16 = *(_xpc_connection_s **)(a1 + 32);
          sub_100045308(v16, object);
        }
        else if (xpc_dictionary_get_value(object, "assertionProperties"))
        {
          long long v17 = *(_xpc_connection_s **)(a1 + 32);
          sub_1000455E0(v17, object);
        }
        else if (xpc_dictionary_get_value(object, "assertionActivityLog"))
        {
          int v18 = *(_xpc_connection_s **)(a1 + 32);
          sub_100045CE8(v18, object);
        }
        else if (xpc_dictionary_get_value(object, "assertionInitialConnection"))
        {
          long long v19 = *(_xpc_connection_s **)(a1 + 32);
          sub_1000461AC(v19);
        }
        else if (xpc_dictionary_get_value(object, "assertionFeatureSupported"))
        {
          long long v20 = *(_xpc_connection_s **)(a1 + 32);
          sub_1000462AC(v20, object);
        }
        else if (xpc_dictionary_get_value(object, "assertionCopyActivityUpdate"))
        {
          long long v21 = *(_xpc_connection_s **)(a1 + 32);
          sub_1000441CC(v21, object);
        }
        else if (xpc_dictionary_get_value(object, "adapterDetails"))
        {
          int v22 = *(void **)(a1 + 32);
          sub_1000337B8(v22, object);
        }
        else if (xpc_dictionary_get_value(object, "powerInfoPrecise"))
        {
          int v23 = *(void **)(a1 + 32);
          sub_100035048(v23, object);
        }
        else if (xpc_dictionary_get_value(object, "chargeSocLimit"))
        {
          BOOL v24 = *(void **)(a1 + 32);
          sub_100019664(v24, object);
        }
        else if (xpc_dictionary_get_value(object, "setBatteryDofu"))
        {
          int v25 = *(void **)(a1 + 32);
          sub_10003562C(v25, object);
        }
        else if (xpc_dictionary_get_value(object, "batteryGaugingMitigation"))
        {
          CFNumberRef v26 = *(void **)(a1 + 32);
          sub_100059D04(v26, object);
        }
        else if (xpc_dictionary_get_value(object, "getBatteryHealthState"))
        {
          pid_t v27 = *(void **)(a1 + 32);
          sub_100031898(v27, object);
        }
        else if (xpc_dictionary_get_value(object, "customBatteryProps"))
        {
          xpc_object_t v28 = *(_xpc_connection_s **)(a1 + 32);
          sub_10005D7FC(v28, object);
        }
        else if (xpc_dictionary_get_value(object, "resetCustomBatteryProps"))
        {
          CFNumberRef v29 = *(_xpc_connection_s **)(a1 + 32);
          sub_10005D684(v29, object);
        }
        else if (xpc_dictionary_get_value(object, "assertionSetState"))
        {
          CFNumberRef v30 = *(_xpc_connection_s **)(a1 + 32);
          sub_100046340(v30, object);
        }
        else if (xpc_dictionary_get_value(object, "wakeData"))
        {
          uint64_t v31 = *(_xpc_connection_s **)(a1 + 32);
          sub_100040BF4(v31, object);
        }
        else if (xpc_dictionary_get_value(object, "batteryHeatMapData"))
        {
          pid_t v32 = *(void **)(a1 + 32);
          sub_1000185C8(v32, object);
        }
        else if (xpc_dictionary_get_value(object, "batteryCycleCountData"))
        {
          CFNumberRef v33 = *(void **)(a1 + 32);
          sub_1000188F8(v33, object);
        }
        else if (xpc_dictionary_get_value(object, "setBHUpdateTimeDelta"))
        {
          CFNumberRef v34 = *(void **)(a1 + 32);
          sub_1000316A4(v34, object);
        }
        else if (xpc_dictionary_get_value(object, "BDCXPCCopyDefaults"))
        {
          long long v35 = *(_xpc_connection_s **)(a1 + 32);
          sub_100027C28(v35, object);
        }
        else if (xpc_dictionary_get_value(object, "setSPNRequeryDelta"))
        {
          __int16 v36 = *(void **)(a1 + 32);
          sub_10000F060(v36, object);
        }
        else if (xpc_dictionary_get_value(object, "batteryKioskModeData"))
        {
          uint64_t v37 = *(_xpc_connection_s **)(a1 + 32);
          sub_100018AF8(v37, object);
        }
        else if (xpc_dictionary_get_value(object, "systemAssertionTimeout"))
        {
          uint64_t v38 = *(void *)(a1 + 32);
          sub_1000510AC(v38, object);
        }
        else if (xpc_dictionary_get_value(object, "assertionActiveAsyncByProcess"))
        {
          uint64_t v39 = *(_xpc_connection_s **)(a1 + 32);
          sub_10004442C(v39, object);
        }
        else if (xpc_dictionary_get_value(object, "dominoState"))
        {
          CFNumberRef v40 = *(_xpc_connection_s **)(a1 + 32);
          sub_10005BC7C(v40, object);
        }
        else if (xpc_dictionary_get_value(object, "onenessState"))
        {
          CFNumberRef v41 = *(_xpc_connection_s **)(a1 + 32);
          sub_10005BE80(v41, object);
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_10006D368();
        }
      }
    }
  }
  else if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_error)
  {
    io_registry_entry_t v7 = *(_xpc_connection_s **)(a1 + 32);
    string = xpc_dictionary_get_string(object, _xpc_error_key_description);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG)) {
      sub_10006D3B0((uint64_t)string, v7);
    }
    sub_10005C2B8(v7);
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_10006D460();
  }
}

void sub_1000603E0(id a1)
{
  sub_100056538();
  nullsub_4(v1, v2);

  sub_10005B504();
}

uint64_t sub_10006040C(IONotificationPort *a1, io_iterator_t iterator)
{
  io_iterator_t notification = 0;
  uint64_t result = IOIteratorNext(iterator);
  if (result)
  {
    CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(result, @"aapl,panic-info", kCFAllocatorDefault, 0);
    if (CFProperty) {
      CFRelease(CFProperty);
    }
    IOObjectRelease(iterator);
    CFDictionaryRef v6 = IOServiceMatching("AppleSMC");
    uint64_t result = IOServiceAddMatchingNotification(a1, "IOServiceFirstMatch", v6, (IOServiceMatchingCallback)sub_100060500, a1, &notification);
    if (!result) {
      return sub_100060500(0, notification);
    }
  }
  return result;
}

void sub_1000604B8(id a1, int a2)
{
  uint64_t state64 = 0;
  notify_get_state(a2, &state64);
  byte_1000A50F0 = state64 == 0;
  sub_10005BA74(state64 == 0);
  sub_10005E17C();
}

uint64_t sub_100060500(int a1, io_iterator_t iterator)
{
  uint64_t result = IOIteratorNext(iterator);
  if (result)
  {
    CFStringRef CFProperty = (const __CFString *)IORegistryEntryCreateCFProperty(result, @"ShutdownCause", kCFAllocatorDefault, 0);
    if (CFProperty)
    {
      CFStringRef v5 = CFProperty;
      if (CFStringGetCString(CFProperty, v7, 8, 0))
      {
        int v6 = strtol(v7, 0, 10);
        sub_10005DA1C(v6);
      }
      CFRelease(v5);
    }
    return IOObjectRelease(iterator);
  }
  return result;
}

void sub_1000605BC(int a1, int a2, CFTypeRef cf1)
{
  if (CFEqual(cf1, (CFTypeRef)qword_1000A5130))
  {
    sub_10005F6AC();
  }
}

void sub_1000605FC(uint64_t a1, uint64_t a2)
{
  if (a2 == 2)
  {
    uint64_t v16 = v5;
    uint64_t v17 = v4;
    uint64_t v18 = v2;
    uint64_t v19 = v3;
    mach_msg_header_t msg = (mach_msg_header_t *)dispatch_mach_msg_get_msg();
    if (msg->msgh_id == 950)
    {
      mach_port_t v7 = mach_host_self();
      host_request_notification(v7, 0, msg->msgh_local_port);
      size_t v13 = 16;
      double Current = CFAbsoluteTimeGetCurrent();
      if (byte_1000A50E8 == 1)
      {
        double v9 = Current;
        double v14 = 0.0;
        uint64_t v15 = 0;
        if (!sysctlbyname("kern.sleeptime", &v14, &v13, 0, 0)
          && (qword_1000A50D8 != *(void *)&v14 || dword_1000A50E0 != v15))
        {
          CFDictionaryRef v10 = (void *)qword_1000A5100;
          if (qword_1000A5100)
          {
            long long v11 = (double *)qword_1000A50F8;
            if (!qword_1000A50F8)
            {
LABEL_16:
              sub_10002C8A4();
              size_t v13 = 0;
              double v14 = 0.0;
              if (!IOPMGetLastWakeTime())
              {
                uint64_t v12 = sub_1000214B0(v14);
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG)) {
                  sub_10006D4A8();
                }
                sub_10003FF7C(v12);
                sub_10003FDFC();
              }
              goto LABEL_6;
            }
          }
          else
          {
            if (vm_allocate(mach_task_self_, (vm_address_t *)&qword_1000A50F8, 0x10uLL, 1)) {
              goto LABEL_16;
            }
            long long v11 = (double *)qword_1000A50F8;
            CFDictionaryRef v10 = (void *)(qword_1000A50F8 + 8);
            qword_1000A5100 = qword_1000A50F8 + 8;
          }
          *long long v11 = v9;
          void *v10 = 0;
          byte_1000A50E8 = 0;
          goto LABEL_16;
        }
      }
      sub_10002C8A4();
    }
LABEL_6:
    mach_msg_destroy(msg);
  }
}

void sub_10006078C(uint64_t a1, uint64_t a2)
{
  if (a2 != 2) {
    return;
  }
  mach_msg_header_t msg = (mach_msg_header_t *)dispatch_mach_msg_get_msg();
  mach_msg_id_t msgh_id = msg->msgh_id;
  if (msgh_id == dword_1000A5148)
  {
    sub_10005B5DC(0);
  }
  else
  {
    if (msgh_id == dword_1000A515C)
    {
      int v5 = 5;
    }
    else if (msgh_id == dword_1000A514C || msgh_id == dword_1000A5150)
    {
      byte_1000A5160 = 1;
      int v5 = 2;
    }
    else if (msgh_id == dword_1000A5154)
    {
      byte_1000A5160 = 0;
      int v5 = 1;
    }
    else
    {
      if (byte_1000A5160 != 1 || msgh_id != dword_1000A5158) {
        goto LABEL_11;
      }
      sub_10005CC14(@"System Shutdown", kCFBooleanTrue);
      int v5 = 4;
    }
    dword_1000A34E8 = v5;
  }
LABEL_11:
  if (dword_1000A5164 != dword_1000A34E8)
  {
    CFNumberRef v6 = CFNumberCreate(0, kCFNumberIntType, &dword_1000A34E8);
    if (v6)
    {
      CFNumberRef v7 = v6;
      sub_10005CC14(@"ConsoleShutdown", v6);
      CFRelease(v7);
    }
    dword_1000A5164 = dword_1000A34E8;
  }
  mach_msg_destroy(msg);
}

void sub_100060900(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  HIDWORD(v4) = a3;
  LODWORD(v4) = a3 + 536657648;
  switch((v4 >> 4))
  {
    case 0u:
      sub_10005652C();
      if (a3 == -536657600) {
        goto LABEL_15;
      }
      return;
    case 2u:
      sub_1000543EC();
      if (a3 == -536657600) {
        goto LABEL_15;
      }
      if (a3 == -536657648) {
        goto LABEL_21;
      }
      return;
    case 3u:
      goto LABEL_15;
    case 4u:
      int valuePtr = 0;
      io_registry_entry_t v7 = sub_1000212AC();
      CFNumberRef CFProperty = (const __CFNumber *)IORegistryEntryCreateCFProperty(v7, @"DriverPMAssertions", 0, 0);
      if (CFProperty)
      {
        CFNumberRef v9 = CFProperty;
        CFNumberGetValue(CFProperty, kCFNumberIntType, &valuePtr);
        sub_1000499AC();
        io_registry_entry_t v10 = sub_1000212AC();
        CFArrayRef v11 = (const __CFArray *)IORegistryEntryCreateCFProperty(v10, @"DriverPMAssertionsDetailed", 0, 0);
        if (v11)
        {
          CFArrayRef v12 = v11;
          sub_10004FBB8(v9, v11);
          CFRelease(v12);
        }
        CFRelease(v9);
      }
      switch(a3)
      {
        case -536657648:
LABEL_21:
          sub_10005652C();
          break;
        case -536657600:
LABEL_15:
          if (a4)
          {
            if (a4 != 1) {
              return;
            }
            qword_1000A5168 = IOPMSleepWakeCopyUUID();
          }
          else if (qword_1000A5168)
          {
            CFRelease((CFTypeRef)qword_1000A5168);
            qword_1000A5168 = 0;
          }
          sub_10005FB0C();
          break;
        case -536657616:
          sub_1000543EC();
          break;
      }
      return;
    default:
      return;
  }
}

void sub_100060AA8(uint64_t a1, uint64_t a2, int a3, intptr_t a4)
{
  CFNumberRef v6 = (const char *)IOPMSleepWakeCopyUUID();
  HIDWORD(v7) = a3;
  LODWORD(v7) = a3 + 536870288;
  switch((v7 >> 4))
  {
    case 0u:
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 138543362;
        io_registry_entry_t v10 = v6;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Received kIOMessageCanSystemSleep. UUID: %{public}@\n", (uint8_t *)&v9, 0xCu);
      }
      sub_100046FBC(a4);
      break;
    case 1u:
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 138543362;
        io_registry_entry_t v10 = v6;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Received kIOMessageSystemWillSleep. UUID: %{public}@\n", (uint8_t *)&v9, 0xCu);
      }
      if (sub_10005A620()) {
        sub_10005A62C();
      }
      IOAllowPowerChange(dword_1000A50EC, a4);
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v9) = 0;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Cancelling system assertion timer on sleep", (uint8_t *)&v9, 2u);
      }
      sub_100050600();
      break;
    case 2u:
    case 0xBu:
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        long long v8 = "kIOMessageSystemWillNotSleep";
        if (a3 == -536870112) {
          long long v8 = "kIOMessageSystemWillPowerOn";
        }
        int v9 = 136446466;
        io_registry_entry_t v10 = v8;
        __int16 v11 = 2114;
        CFArrayRef v12 = v6;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Received %{public}s. UUID: %{public}@\n", (uint8_t *)&v9, 0x16u);
      }
      sub_100040A14(1);
      sub_10002D658(8u);
      break;
    case 9u:
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 138543362;
        io_registry_entry_t v10 = v6;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Received kIOMessageSystemHasPoweredOn. UUID: %{public}@\n", (uint8_t *)&v9, 0xCu);
      }
      break;
    default:
      break;
  }
  if (v6) {
    CFRelease(v6);
  }
}

uint64_t sub_100060D64(mach_port_t a1, int a2, uint64_t a3, int a4)
{
  int v10 = 1;
  uint64_t v11 = a3;
  int v12 = 16777472;
  int v13 = a4;
  NDR_record_t v14 = NDR_record;
  int v15 = a2;
  int v16 = a4;
  mach_port_t reply_port = mig_get_reply_port();
  *(void *)&msg.msgh_bits = 2147489043;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  *(void *)&msg.msgh_voucher_port = 0xEA6000000000;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }
  uint64_t v6 = mach_msg(&msg, 3, 0x3Cu, 0x2Cu, reply_port, 0, 0);
  uint64_t v7 = v6;
  if ((v6 - 268435458) <= 0xE && ((1 << (v6 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
    return v7;
  }
  if (v6)
  {
    mig_dealloc_reply_port(msg.msgh_local_port);
    return v7;
  }
  if (msg.msgh_id == 71)
  {
    uint64_t v7 = 4294966988;
LABEL_17:
    mach_msg_destroy(&msg);
    return v7;
  }
  if (msg.msgh_id != 60100)
  {
    uint64_t v7 = 4294966995;
    goto LABEL_17;
  }
  uint64_t v7 = 4294966996;
  if ((msg.msgh_bits & 0x80000000) != 0) {
    goto LABEL_17;
  }
  if (msg.msgh_size != 36) {
    goto LABEL_17;
  }
  if (msg.msgh_remote_port) {
    goto LABEL_17;
  }
  uint64_t v7 = HIDWORD(v11);
  if (HIDWORD(v11)) {
    goto LABEL_17;
  }
  return v7;
}

uint64_t sub_100060EDC(mach_port_t a1, int a2, void *a3, _DWORD *a4)
{
  memset((char *)&v13[1] + 4, 0, 28);
  msg.msgh_size_t size = 0;
  v13[0] = NDR_record;
  LODWORD(v13[1]) = a2;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0xEA6100000000;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }
  uint64_t v8 = mach_msg(&msg, 3, 0x24u, 0x40u, reply_port, 0, 0);
  uint64_t v9 = v8;
  if ((v8 - 268435458) <= 0xE && ((1 << (v8 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }
  else
  {
    if (!v8)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v9 = 4294966988;
      }
      else if (msg.msgh_id == 60101)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          uint64_t v9 = 4294966996;
          if (LODWORD(v13[0]) == 1 && msg.msgh_size == 56 && !msg.msgh_remote_port && HIBYTE(v13[1]) == 1)
          {
            int v10 = v13[2];
            if (LODWORD(v13[2]) == HIDWORD(v13[3]))
            {
              uint64_t v9 = 0;
              *a3 = *(void *)((char *)v13 + 4);
              *a4 = v10;
              return v9;
            }
          }
        }
        else if (msg.msgh_size == 36)
        {
          uint64_t v9 = 4294966996;
          if (LODWORD(v13[1]))
          {
            if (msg.msgh_remote_port) {
              uint64_t v9 = 4294966996;
            }
            else {
              uint64_t v9 = LODWORD(v13[1]);
            }
          }
        }
        else
        {
          uint64_t v9 = 4294966996;
        }
      }
      else
      {
        uint64_t v9 = 4294966995;
      }
      mach_msg_destroy(&msg);
      return v9;
    }
    mig_dealloc_reply_port(msg.msgh_local_port);
  }
  return v9;
}

uint64_t sub_1000610B8(mach_port_t a1, int a2, void *a3, _DWORD *a4)
{
  memset((char *)&v13[1] + 4, 0, 28);
  msg.msgh_size_t size = 0;
  v13[0] = NDR_record;
  LODWORD(v13[1]) = a2;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0xEA6200000000;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }
  uint64_t v8 = mach_msg(&msg, 3, 0x24u, 0x40u, reply_port, 0, 0);
  uint64_t v9 = v8;
  if ((v8 - 268435458) <= 0xE && ((1 << (v8 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }
  else
  {
    if (!v8)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v9 = 4294966988;
      }
      else if (msg.msgh_id == 60102)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          uint64_t v9 = 4294966996;
          if (LODWORD(v13[0]) == 1 && msg.msgh_size == 56 && !msg.msgh_remote_port && HIBYTE(v13[1]) == 1)
          {
            int v10 = v13[2];
            if (LODWORD(v13[2]) == HIDWORD(v13[3]))
            {
              uint64_t v9 = 0;
              *a3 = *(void *)((char *)v13 + 4);
              *a4 = v10;
              return v9;
            }
          }
        }
        else if (msg.msgh_size == 36)
        {
          uint64_t v9 = 4294966996;
          if (LODWORD(v13[1]))
          {
            if (msg.msgh_remote_port) {
              uint64_t v9 = 4294966996;
            }
            else {
              uint64_t v9 = LODWORD(v13[1]);
            }
          }
        }
        else
        {
          uint64_t v9 = 4294966996;
        }
      }
      else
      {
        uint64_t v9 = 4294966995;
      }
      mach_msg_destroy(&msg);
      return v9;
    }
    mig_dealloc_reply_port(msg.msgh_local_port);
  }
  return v9;
}

uint64_t sub_100061294(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 73036) >= 0xFFFFFFDC) {
    return (uint64_t)*(&off_100092F68 + 5 * (v1 - 73000) + 5);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000612D4(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 36)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 36) || *(_DWORD *)(result + 40) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    NDR_record_t v4 = NDR_record;
    goto LABEL_8;
  }
  uint64_t v5 = *(unsigned int *)(result + 12);
  uint64_t v6 = *(unsigned int *)(result + 32);
  long long v7 = *(_OWORD *)(result + 72);
  v8[0] = *(_OWORD *)(result + 56);
  v8[1] = v7;
  uint64_t result = sub_10005F8D4(v5, v8, v6, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_8:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_100061390(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 40)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 40) || *(_DWORD *)(result + 44) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    NDR_record_t v4 = NDR_record;
    goto LABEL_8;
  }
  uint64_t v5 = *(unsigned int *)(result + 12);
  int v6 = *(_DWORD *)(result + 32);
  uint64_t v7 = *(unsigned int *)(result + 36);
  long long v8 = *(_OWORD *)(result + 76);
  v9[0] = *(_OWORD *)(result + 60);
  v9[1] = v8;
  uint64_t result = sub_10005F7F0(v5, v9, v6, v7, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_8:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_10006144C(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    int v4 = -304;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    int v4 = -300;
    goto LABEL_10;
  }
  if (*(_DWORD *)(result + 56) || *(_DWORD *)(result + 60) <= 0x1Fu)
  {
    int v4 = -309;
LABEL_10:
    *(_DWORD *)(a2 + 32) = v4;
    NDR_record_t v5 = NDR_record;
    goto LABEL_11;
  }
  uint64_t v6 = *(unsigned int *)(result + 12);
  uint64_t v7 = *(const char **)(result + 28);
  long long v8 = *(_OWORD *)(result + 92);
  v9[0] = *(_OWORD *)(result + 76);
  v9[1] = v8;
  uint64_t result = sub_10005F938(v6, v9, v7, v3, (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_11:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_100061538(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 60)
  {
    int v4 = -304;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    int v4 = -300;
    goto LABEL_10;
  }
  if (*(_DWORD *)(result + 60) || *(_DWORD *)(result + 64) <= 0x1Fu)
  {
    int v4 = -309;
LABEL_10:
    *(_DWORD *)(a2 + 32) = v4;
    NDR_record_t v5 = NDR_record;
    goto LABEL_11;
  }
  uint64_t v6 = *(unsigned int *)(result + 12);
  uint64_t v7 = *(const UInt8 **)(result + 28);
  int v8 = *(_DWORD *)(result + 56);
  long long v9 = *(_OWORD *)(result + 96);
  v10[0] = *(_OWORD *)(result + 80);
  v10[1] = v9;
  uint64_t result = sub_10002CEB4(v6, v10, v7, v3, v8, (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_11:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_100061628(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 60)
  {
    int v4 = -304;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    int v4 = -300;
    goto LABEL_10;
  }
  if (*(_DWORD *)(result + 60) || *(_DWORD *)(result + 64) <= 0x1Fu)
  {
    int v4 = -309;
LABEL_10:
    *(_DWORD *)(a2 + 32) = v4;
    NDR_record_t v5 = NDR_record;
    goto LABEL_11;
  }
  uint64_t v6 = *(unsigned int *)(result + 12);
  uint64_t v7 = *(const UInt8 **)(result + 28);
  uint64_t v8 = *(unsigned int *)(result + 56);
  long long v9 = *(_OWORD *)(result + 96);
  v10[0] = *(_OWORD *)(result + 80);
  v10[1] = v9;
  uint64_t result = sub_10002A2CC(v6, v10, v7, v3, v8, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_11:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

_DWORD *sub_100061718(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    int v4 = -304;
    goto LABEL_7;
  }
  unsigned int v3 = result + 6;
  if (result[6] || result[7] <= 0x1Fu)
  {
    int v4 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v4;
    NDR_record_t v5 = NDR_record;
    goto LABEL_8;
  }
  uint64_t v6 = result[3];
  long long v7 = *(_OWORD *)(v3 + 9);
  v8[0] = *(_OWORD *)(v3 + 5);
  v8[1] = v7;
  uint64_t result = (_DWORD *)sub_10002A7FC(v6, v8, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_8:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

_DWORD *sub_1000617CC(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777472;
  *(_DWORD *)(a2 + 52) = 16777472;
  uint64_t result = (_DWORD *)sub_10005FA44(result[3], (void *)(a2 + 28), (_DWORD *)(a2 + 68), (void *)(a2 + 44), (_DWORD *)(a2 + 72), (int *)(a2 + 76));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  int v3 = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 4sub_100048D14(0x12u, 0) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 56) = v3;
  *(NDR_record_t *)(a2 + 6sub_100048D14(0x12u, 0) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 80;
  *(_DWORD *)(a2 + 24) = 2;
  return result;
}

uint64_t sub_100061884(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    int v4 = -304;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    int v4 = -300;
    goto LABEL_10;
  }
  if (*(_DWORD *)(result + 56) || *(_DWORD *)(result + 60) <= 0x1Fu)
  {
    int v4 = -309;
LABEL_10:
    *(_DWORD *)(a2 + 32) = v4;
    NDR_record_t v5 = NDR_record;
    goto LABEL_11;
  }
  uint64_t v6 = *(unsigned int *)(result + 12);
  long long v7 = *(const UInt8 **)(result + 28);
  long long v8 = *(_OWORD *)(result + 92);
  v9[0] = *(_OWORD *)(result + 76);
  v9[1] = v8;
  uint64_t result = sub_100047DD8(v6, v9, v7, v3, (_DWORD *)(a2 + 36), (_DWORD *)(a2 + 40), (_DWORD *)(a2 + 44), (int *)(a2 + 48));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 52;
    return result;
  }
LABEL_11:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_10006197C(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 60)
  {
    int v4 = -304;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 56)))
  {
    int v4 = -300;
    goto LABEL_10;
  }
  if (*(_DWORD *)(result + 60) || *(_DWORD *)(result + 64) <= 0x1Fu)
  {
    int v4 = -309;
LABEL_10:
    *(_DWORD *)(a2 + 32) = v4;
    NDR_record_t v5 = NDR_record;
    goto LABEL_11;
  }
  int v6 = *(_DWORD *)(result + 12);
  int v7 = *(_DWORD *)(result + 52);
  long long v8 = *(const UInt8 **)(result + 28);
  long long v9 = *(_OWORD *)(result + 96);
  v10[0] = *(_OWORD *)(result + 80);
  v10[1] = v9;
  uint64_t result = sub_100047FEC(v6, v10, v7, v8, v3, (_DWORD *)(a2 + 36), (_DWORD *)(a2 + 40), (_DWORD *)(a2 + 44), (int *)(a2 + 48));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 52;
    return result;
  }
LABEL_11:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_100061A7C(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 40)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 40) || *(_DWORD *)(result + 44) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    NDR_record_t v4 = NDR_record;
    goto LABEL_8;
  }
  uint64_t v5 = *(unsigned int *)(result + 12);
  int v6 = *(_DWORD *)(result + 32);
  int v7 = *(_DWORD *)(result + 36);
  long long v8 = *(_OWORD *)(result + 76);
  v9[0] = *(_OWORD *)(result + 60);
  v9[1] = v8;
  uint64_t result = sub_100048150(v5, v9, v6, v7, (int *)(a2 + 36), (_DWORD *)(a2 + 40), (_DWORD *)(a2 + 44), (_DWORD *)(a2 + 48));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 52;
    return result;
  }
LABEL_8:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_100061B44(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 64)
  {
    int v3 = -304;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 60))
  {
    int v3 = -300;
    goto LABEL_10;
  }
  if (*(_DWORD *)(result + 64) || *(_DWORD *)(result + 68) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_10:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_11;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  int v4 = *(_DWORD *)(result + 12);
  int v5 = *(_DWORD *)(result + 52);
  int v6 = *(_DWORD *)(result + 56);
  int v7 = *(const UInt8 **)(result + 28);
  vm_size_t v8 = *(unsigned int *)(result + 40);
  long long v9 = *(_OWORD *)(result + 100);
  v10[0] = *(_OWORD *)(result + 84);
  v10[1] = v9;
  uint64_t result = sub_10004824C(v4, v10, v5, v6, v7, v8, (vm_address_t *)(a2 + 28), (unsigned int *)(a2 + 52), (int *)(a2 + 56));
  if (!result)
  {
    *(_DWORD *)(a2 + 4sub_100048D14(0x12u, 0) = *(_DWORD *)(a2 + 52);
    *(NDR_record_t *)(a2 + 44) = NDR_record;
    *(_DWORD *)a2 |= 0x80000000;
    *(_DWORD *)(a2 + 4) = 60;
    *(_DWORD *)(a2 + 24) = 1;
    return result;
  }
  *(_DWORD *)(a2 + 32) = result;
LABEL_11:
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_100061C6C(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 64)
  {
    int v4 = -304;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 56)))
  {
    int v4 = -300;
    goto LABEL_10;
  }
  if (*(_DWORD *)(result + 64) || *(_DWORD *)(result + 68) <= 0x1Fu)
  {
    int v4 = -309;
LABEL_10:
    *(_DWORD *)(a2 + 32) = v4;
    NDR_record_t v5 = NDR_record;
    goto LABEL_11;
  }
  uint64_t v6 = *(unsigned int *)(result + 12);
  int v7 = (_DWORD *)(result + 52);
  vm_size_t v8 = *(const UInt8 **)(result + 28);
  long long v9 = (_DWORD *)(result + 60);
  long long v10 = *(_OWORD *)(result + 100);
  v11[0] = *(_OWORD *)(result + 84);
  v11[1] = v10;
  uint64_t result = sub_10004B888(v6, v11, (_DWORD *)(result + 52), v8, v3, (_DWORD *)(result + 60), (int *)(a2 + 44));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 36) = *v7;
    *(_DWORD *)(a2 + 4sub_100048D14(0x12u, 0) = *v9;
    *(_DWORD *)(a2 + 4) = 48;
    return result;
  }
LABEL_11:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_100061D80(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 64)
  {
    int v4 = -304;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 56)))
  {
    int v4 = -300;
    goto LABEL_10;
  }
  if (*(_DWORD *)(result + 64) || *(_DWORD *)(result + 68) <= 0x1Fu)
  {
    int v4 = -309;
LABEL_10:
    *(_DWORD *)(a2 + 32) = v4;
    NDR_record_t v5 = NDR_record;
    goto LABEL_11;
  }
  uint64_t v6 = *(unsigned int *)(result + 12);
  uint64_t v7 = *(unsigned int *)(result + 52);
  vm_size_t v8 = *(const UInt8 **)(result + 28);
  long long v9 = (_DWORD *)(result + 60);
  long long v10 = *(_OWORD *)(result + 100);
  v11[0] = *(_OWORD *)(result + 84);
  v11[1] = v10;
  uint64_t result = sub_10004BB90(v6, v11, v7, v8, v3, (int *)(result + 60), (_DWORD *)(a2 + 40), (_DWORD *)(a2 + 44));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 36) = *v9;
    *(_DWORD *)(a2 + 4) = 48;
    return result;
  }
LABEL_11:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_100061E84(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 60)
  {
    int v4 = -304;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    int v4 = -300;
    goto LABEL_10;
  }
  if (*(_DWORD *)(result + 60) || *(_DWORD *)(result + 64) <= 0x1Fu)
  {
    int v4 = -309;
LABEL_10:
    *(_DWORD *)(a2 + 32) = v4;
    NDR_record_t v5 = NDR_record;
    goto LABEL_11;
  }
  uint64_t v6 = *(unsigned int *)(result + 12);
  uint64_t v7 = *(const UInt8 **)(result + 28);
  vm_size_t v8 = (_DWORD *)(result + 56);
  long long v9 = *(_OWORD *)(result + 96);
  v10[0] = *(_OWORD *)(result + 80);
  v10[1] = v9;
  uint64_t result = sub_10004BE2C(v6, v10, v7, v3, (int *)(result + 56), (_DWORD *)(a2 + 40), (_DWORD *)(a2 + 44));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 36) = *v8;
    *(_DWORD *)(a2 + 4) = 48;
    return result;
  }
LABEL_11:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

_DWORD *sub_100061F84(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    int v5 = 0;
    uint64_t result = (_DWORD *)sub_10003F768(result[3], result[8], (char *)(a2 + 44), &v5);
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      uint64_t result = (_DWORD *)strlen((const char *)(a2 + 44));
      if (!(((unint64_t)result + 1) >> 32))
      {
        *(_DWORD *)(a2 + 36) = 0;
        *(_DWORD *)(a2 + 4sub_100048D14(0x12u, 0) = result + 1;
        uint64_t v4 = (result + 4) & 0xFFFFFFFC;
        *(_DWORD *)(a2 + 4) = v4 + 48;
        *(_DWORD *)(a2 + v4 + 44) = v5;
        return result;
      }
      *(_DWORD *)(a2 + 32) = -304;
    }
    *(NDR_record_t *)(a2 + 24) = v3;
  }
  return result;
}

const char *sub_100062060(const char *result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0) {
    goto LABEL_16;
  }
  NDR_record_t v3 = result;
  uint64_t v4 = *((unsigned int *)result + 1);
  if (v4 < 0x2C) {
    goto LABEL_16;
  }
  if (v4 > 0x42C) {
    goto LABEL_16;
  }
  unsigned int v5 = *((_DWORD *)result + 9);
  if (v5 > 0x400) {
    goto LABEL_16;
  }
  unsigned int v6 = (v5 + 3) & 0xFFFFFFFC;
  if ((int)v4 - 44 < v5 || v4 != v6 + 44) {
    goto LABEL_16;
  }
  uint64_t v8 = 1064;
  if (*((unsigned int *)result + 1) < 0x428uLL) {
    uint64_t v8 = *((unsigned int *)result + 1);
  }
  uint64_t result = (const char *)memchr((void *)(result + 40), 0, v8 - 40);
  if (!result)
  {
LABEL_16:
    int v10 = -304;
    goto LABEL_17;
  }
  long long v9 = &v3[(v4 + 3) & 0x1FFFFFFFCLL];
  if (*(_DWORD *)v9 || *((_DWORD *)v9 + 1) <= 0x1Fu)
  {
    int v10 = -309;
LABEL_17:
    *(_DWORD *)(a2 + 32) = v10;
    NDR_record_t v11 = NDR_record;
    goto LABEL_18;
  }
  uint64_t v12 = *((unsigned int *)v3 + 3);
  int v13 = *(_DWORD *)&v3[v6 + 40];
  long long v14 = *(_OWORD *)(v9 + 36);
  v15[0] = *(_OWORD *)(v9 + 20);
  v15[1] = v14;
  uint64_t result = (const char *)sub_10003F010(v12, v15, v3 + 40, v13, (_DWORD *)(a2 + 36), (int *)(a2 + 40));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v11 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 44;
    return result;
  }
LABEL_18:
  *(NDR_record_t *)(a2 + 24) = v11;
  return result;
}

uint64_t sub_100062198(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    int v3 = -304;
    goto LABEL_9;
  }
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112)
  {
    int v3 = -300;
    goto LABEL_9;
  }
  if (*(_DWORD *)(result + 56) || *(_DWORD *)(result + 60) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v3;
    NDR_record_t v4 = NDR_record;
    goto LABEL_10;
  }
  uint64_t v5 = *(unsigned int *)(result + 12);
  mach_port_name_t v6 = *(_DWORD *)(result + 28);
  int v7 = *(_DWORD *)(result + 48);
  int v8 = *(_DWORD *)(result + 52);
  long long v9 = *(_OWORD *)(result + 92);
  v10[0] = *(_OWORD *)(result + 76);
  v10[1] = v9;
  uint64_t result = sub_10003F13C(v5, v10, v7, v6, v8, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

_DWORD *sub_10006227C(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    uint64_t result = (_DWORD *)sub_10003F4D0(result[3], result[8], (int *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

uint64_t sub_100062300(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 64)
  {
    int v3 = -304;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 60))
  {
    int v3 = -300;
    goto LABEL_10;
  }
  if (*(_DWORD *)(result + 64) || *(_DWORD *)(result + 68) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_10:
    *(_DWORD *)(a2 + 32) = v3;
    NDR_record_t v4 = NDR_record;
    goto LABEL_11;
  }
  uint64_t result = sub_10003F638();
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_11:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

_DWORD *sub_1000623F0(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    int v4 = -304;
    goto LABEL_7;
  }
  int v3 = result + 6;
  if (result[6] || result[7] <= 0x1Fu)
  {
    int v4 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v4;
    NDR_record_t v5 = NDR_record;
    goto LABEL_8;
  }
  uint64_t v6 = result[3];
  long long v7 = *(_OWORD *)(v3 + 9);
  v8[0] = *(_OWORD *)(v3 + 5);
  v8[1] = v7;
  uint64_t result = (_DWORD *)sub_100033C64(v6, v8, a2 + 36, (_DWORD *)(a2 + 40));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 44;
    return result;
  }
LABEL_8:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_1000624A8(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 60)
  {
    int v4 = -304;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || (int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 56)))
  {
    int v4 = -300;
    goto LABEL_10;
  }
  if (*(_DWORD *)(result + 60) || *(_DWORD *)(result + 64) <= 0x1Fu)
  {
    int v4 = -309;
LABEL_10:
    *(_DWORD *)(a2 + 32) = v4;
    NDR_record_t v5 = NDR_record;
    goto LABEL_11;
  }
  uint64_t v6 = *(unsigned int *)(result + 12);
  int v7 = *(_DWORD *)(result + 52);
  uint64_t v8 = *(void *)(result + 28);
  long long v9 = *(_OWORD *)(result + 96);
  v10[0] = *(_OWORD *)(result + 80);
  v10[1] = v9;
  uint64_t result = sub_1000342F0(v6, v10, v7, v8, v3, a2 + 36);
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_11:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_100062598(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 36)
  {
    int v3 = -304;
  }
  else
  {
    if (!*(_DWORD *)(result + 36) && *(_DWORD *)(result + 40) > 0x1Fu)
    {
      uint64_t v4 = *(unsigned int *)(result + 12);
      int v5 = *(_DWORD *)(result + 32);
      long long v6 = *(_OWORD *)(result + 72);
      v7[0] = *(_OWORD *)(result + 56);
      v7[1] = v6;
      uint64_t result = sub_100034ED4(v4, v7, v5);
      *(_DWORD *)(a2 + 32) = result;
      goto LABEL_8;
    }
    int v3 = -309;
  }
  *(_DWORD *)(a2 + 32) = v3;
LABEL_8:
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_100062634(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 36)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 36) || *(_DWORD *)(result + 40) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_8;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  uint64_t v4 = *(unsigned int *)(result + 12);
  int v5 = *(_DWORD *)(result + 32);
  long long v6 = *(_OWORD *)(result + 72);
  v7[0] = *(_OWORD *)(result + 56);
  v7[1] = v6;
  uint64_t result = sub_100035B84(v4, v7, v5, a2 + 28, a2 + 52, a2 + 56);
  if (!result)
  {
    *(_DWORD *)(a2 + 4sub_100048D14(0x12u, 0) = *(_DWORD *)(a2 + 52);
    *(NDR_record_t *)(a2 + 44) = NDR_record;
    *(_DWORD *)a2 |= 0x80000000;
    *(_DWORD *)(a2 + 4) = 60;
    *(_DWORD *)(a2 + 24) = 1;
    return result;
  }
  *(_DWORD *)(a2 + 32) = result;
LABEL_8:
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_100062720(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 36)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 36) || *(_DWORD *)(result + 40) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    NDR_record_t v4 = NDR_record;
    goto LABEL_8;
  }
  uint64_t v5 = *(unsigned int *)(result + 12);
  int v6 = *(_DWORD *)(result + 32);
  long long v7 = *(_OWORD *)(result + 72);
  v8[0] = *(_OWORD *)(result + 56);
  v8[1] = v7;
  uint64_t result = sub_10003D45C(v5, v8, v6, (BOOL *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_8:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

_DWORD *sub_1000627DC(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  uint64_t result = (_DWORD *)sub_10003D7E0(result[3], (vm_address_t *)(a2 + 28), (unsigned int *)(a2 + 52), (int *)(a2 + 56));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 4sub_100048D14(0x12u, 0) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 60;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_100062888(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 40)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 40) || *(_DWORD *)(result + 44) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    NDR_record_t v4 = NDR_record;
    goto LABEL_8;
  }
  uint64_t v5 = *(unsigned int *)(result + 12);
  int v6 = *(_DWORD *)(result + 32);
  int v7 = *(_DWORD *)(result + 36);
  long long v8 = *(_OWORD *)(result + 76);
  v9[0] = *(_OWORD *)(result + 60);
  v9[1] = v8;
  uint64_t result = sub_10003F658(v5, v9, v6, v7, (_DWORD *)(a2 + 36), (int *)(a2 + 40));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 44;
    return result;
  }
LABEL_8:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_100062948(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 36)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 36) || *(_DWORD *)(result + 40) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    NDR_record_t v4 = NDR_record;
    goto LABEL_8;
  }
  uint64_t v5 = *(unsigned int *)(result + 12);
  uint64_t v6 = *(unsigned int *)(result + 32);
  long long v7 = *(_OWORD *)(result + 72);
  v8[0] = *(_OWORD *)(result + 56);
  v8[1] = v7;
  uint64_t result = sub_10003F744(v5, (uint64_t)v8, v6, (_DWORD *)(a2 + 36), (_DWORD *)(a2 + 40));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 44;
    return result;
  }
LABEL_8:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_100062A08(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 36)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 36) || *(_DWORD *)(result + 40) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    NDR_record_t v4 = NDR_record;
    goto LABEL_8;
  }
  uint64_t v5 = *(unsigned int *)(result + 12);
  uint64_t v6 = *(unsigned int *)(result + 32);
  long long v7 = *(_OWORD *)(result + 72);
  v8[0] = *(_OWORD *)(result + 56);
  v8[1] = v7;
  uint64_t result = sub_10003F754(v5, (uint64_t)v8, v6, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_8:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_100062AC4(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 36)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 36) || *(_DWORD *)(result + 40) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    NDR_record_t v4 = NDR_record;
    goto LABEL_8;
  }
  uint64_t v5 = *(unsigned int *)(result + 12);
  int v6 = *(_DWORD *)(result + 32);
  long long v7 = *(_OWORD *)(result + 72);
  v8[0] = *(_OWORD *)(result + 56);
  v8[1] = v7;
  uint64_t result = sub_10004B7DC(v5, v8, v6, (_DWORD *)(a2 + 36), (int *)(a2 + 40));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 44;
    return result;
  }
LABEL_8:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_100062B84(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 36)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 36) || *(_DWORD *)(result + 40) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    NDR_record_t v4 = NDR_record;
    goto LABEL_8;
  }
  uint64_t v5 = *(unsigned int *)(result + 12);
  uint64_t v6 = *(unsigned int *)(result + 32);
  long long v7 = *(_OWORD *)(result + 72);
  v8[0] = *(_OWORD *)(result + 56);
  v8[1] = v7;
  uint64_t result = sub_10003F7D4(v5, (uint64_t)v8, v6, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_8:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

_DWORD *sub_100062C40(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    int v4 = -304;
    goto LABEL_7;
  }
  int v3 = result + 6;
  if (result[6] || result[7] <= 0x1Fu)
  {
    int v4 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v4;
    NDR_record_t v5 = NDR_record;
    goto LABEL_8;
  }
  uint64_t v6 = result[3];
  long long v7 = *(_OWORD *)(v3 + 9);
  v8[0] = *(_OWORD *)(v3 + 5);
  v8[1] = v7;
  uint64_t result = (_DWORD *)sub_10003F640(v6, (uint64_t)v8, (_DWORD *)(a2 + 36), (_DWORD *)(a2 + 40));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 44;
    return result;
  }
LABEL_8:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

const char *sub_100062CF8(const char *result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0) {
    goto LABEL_16;
  }
  int v3 = result;
  uint64_t v4 = *((unsigned int *)result + 1);
  if (v4 < 0x2C) {
    goto LABEL_16;
  }
  if (v4 > 0x42C) {
    goto LABEL_16;
  }
  unsigned int v5 = *((_DWORD *)result + 9);
  if (v5 > 0x400) {
    goto LABEL_16;
  }
  unsigned int v6 = (v5 + 3) & 0xFFFFFFFC;
  if ((int)v4 - 44 < v5 || v4 != v6 + 44) {
    goto LABEL_16;
  }
  uint64_t v8 = 1064;
  if (*((unsigned int *)result + 1) < 0x428uLL) {
    uint64_t v8 = *((unsigned int *)result + 1);
  }
  uint64_t result = (const char *)memchr((void *)(result + 40), 0, v8 - 40);
  if (!result)
  {
LABEL_16:
    int v10 = -304;
    goto LABEL_17;
  }
  long long v9 = &v3[(v4 + 3) & 0x1FFFFFFFCLL];
  if (*(_DWORD *)v9 || *((_DWORD *)v9 + 1) <= 0x1Fu)
  {
    int v10 = -309;
LABEL_17:
    *(_DWORD *)(a2 + 32) = v10;
    NDR_record_t v11 = NDR_record;
    goto LABEL_18;
  }
  uint64_t v12 = *((unsigned int *)v3 + 3);
  int v13 = *(_DWORD *)&v3[v6 + 40];
  long long v14 = *(_OWORD *)(v9 + 36);
  v15[0] = *(_OWORD *)(v9 + 20);
  v15[1] = v14;
  uint64_t result = (const char *)sub_1000487E8(v12, v15, v3 + 40, v13, (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v11 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_18:
  *(NDR_record_t *)(a2 + 24) = v11;
  return result;
}

const char *sub_100062E2C(const char *result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0) {
    goto LABEL_16;
  }
  int v3 = result;
  uint64_t v4 = *((unsigned int *)result + 1);
  if (v4 < 0x2C) {
    goto LABEL_16;
  }
  if (v4 > 0x42C) {
    goto LABEL_16;
  }
  unsigned int v5 = *((_DWORD *)result + 9);
  if (v5 > 0x400) {
    goto LABEL_16;
  }
  unsigned int v6 = (v5 + 3) & 0xFFFFFFFC;
  if ((int)v4 - 44 < v5 || v4 != v6 + 44) {
    goto LABEL_16;
  }
  uint64_t v8 = 1064;
  if (*((unsigned int *)result + 1) < 0x428uLL) {
    uint64_t v8 = *((unsigned int *)result + 1);
  }
  uint64_t result = (const char *)memchr((void *)(result + 40), 0, v8 - 40);
  if (!result)
  {
LABEL_16:
    int v10 = -304;
    goto LABEL_17;
  }
  long long v9 = &v3[(v4 + 3) & 0x1FFFFFFFCLL];
  if (*(_DWORD *)v9 || *((_DWORD *)v9 + 1) <= 0x1Fu)
  {
    int v10 = -309;
LABEL_17:
    *(_DWORD *)(a2 + 32) = v10;
    NDR_record_t v11 = NDR_record;
    goto LABEL_18;
  }
  uint64_t v12 = *((unsigned int *)v3 + 3);
  int v13 = *(_DWORD *)&v3[v6 + 40];
  long long v14 = *(_OWORD *)(v9 + 36);
  v15[0] = *(_OWORD *)(v9 + 20);
  v15[1] = v14;
  uint64_t result = (const char *)sub_10004C770(v12, v15, v3 + 40, v13, (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v11 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_18:
  *(NDR_record_t *)(a2 + 24) = v11;
  return result;
}

uint64_t sub_100062F60(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 36)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 36) || *(_DWORD *)(result + 40) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_8;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  uint64_t v4 = *(unsigned int *)(result + 12);
  unsigned int v5 = (_DWORD *)(result + 32);
  long long v6 = *(_OWORD *)(result + 72);
  v7[0] = *(_OWORD *)(result + 56);
  v7[1] = v6;
  uint64_t result = sub_100043D10(v4, v7, (vm_address_t *)(a2 + 28), (unsigned int *)(a2 + 52), (unsigned int *)(result + 32), (_DWORD *)(a2 + 60), (int *)(a2 + 64));
  if (!result)
  {
    *(_DWORD *)(a2 + 4sub_100048D14(0x12u, 0) = *(_DWORD *)(a2 + 52);
    *(NDR_record_t *)(a2 + 44) = NDR_record;
    *(_DWORD *)(a2 + 56) = *v5;
    *(_DWORD *)a2 |= 0x80000000;
    *(_DWORD *)(a2 + 4) = 68;
    *(_DWORD *)(a2 + 24) = 1;
    return result;
  }
  *(_DWORD *)(a2 + 32) = result;
LABEL_8:
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *sub_10006305C(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    int v4 = -304;
    goto LABEL_7;
  }
  int v3 = result + 6;
  if (result[6] || result[7] <= 0x1Fu)
  {
    int v4 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v4;
    goto LABEL_8;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  uint64_t v5 = result[3];
  long long v6 = *(_OWORD *)(v3 + 9);
  v7[0] = *(_OWORD *)(v3 + 5);
  v7[1] = v6;
  uint64_t result = (_DWORD *)sub_1000448BC(v5, v7, (vm_address_t *)(a2 + 28), (unsigned int *)(a2 + 52), (_DWORD *)(a2 + 56));
  if (!result)
  {
    *(_DWORD *)(a2 + 4sub_100048D14(0x12u, 0) = *(_DWORD *)(a2 + 52);
    *(NDR_record_t *)(a2 + 44) = NDR_record;
    *(_DWORD *)a2 |= 0x80000000;
    *(_DWORD *)(a2 + 4) = 60;
    *(_DWORD *)(a2 + 24) = 1;
    return result;
  }
  *(_DWORD *)(a2 + 32) = result;
LABEL_8:
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_100063140(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    int v4 = -304;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    int v4 = -300;
    goto LABEL_10;
  }
  if (*(_DWORD *)(result + 56) || *(_DWORD *)(result + 60) <= 0x1Fu)
  {
    int v4 = -309;
LABEL_10:
    *(_DWORD *)(a2 + 32) = v4;
    NDR_record_t v5 = NDR_record;
    goto LABEL_11;
  }
  uint64_t v6 = *(unsigned int *)(result + 12);
  long long v7 = *(const UInt8 **)(result + 28);
  long long v8 = *(_OWORD *)(result + 92);
  v9[0] = *(_OWORD *)(result + 76);
  v9[1] = v8;
  uint64_t result = sub_10004C840(v6, v9, v7, v3, (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_11:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_10006322C(_DWORD *a1, uint64_t a2)
{
  int v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  int v3 = a1[5] + 100;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 2sub_100048D14(0x12u, 0) = v3;
  int v4 = a1[5];
  if ((v4 - 73036) >= 0xFFFFFFDC
    && (NDR_record_t v5 = (void (*)(void))*(&off_100092F68 + 5 * (v4 - 73000) + 5)) != 0)
  {
    v5();
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 32) = -303;
  }
  return result;
}

void sub_1000632C4(os_log_t log)
{
  *(_WORD *)int v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "SmartPowerNap: Failed to register for sb lock state updates", v1, 2u);
}

void sub_100063308(os_log_t log)
{
  *(_WORD *)int v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "SmartPowerNap: Failed to register for plugin state changes", v1, 2u);
}

void sub_10006334C(uint64_t *a1, NSObject *a2)
{
  uint64_t v2 = *a1;
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Connection not present for client %@", (uint8_t *)&v3, 0xCu);
}

void sub_1000633C8()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "Resetting interruption session", v2, v3, v4, v5, v6);
}

void sub_1000633FC(void *a1, void *a2)
{
  uint64_t v3 = a1;
  objc_msgSend(a2, "delta_to_query");
  int v5 = 134218240;
  uint64_t v6 = v4;
  __int16 v7 = 1024;
  unsigned int v8 = objc_msgSend(a2, "plugin_state");
  _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "SmartPowerNap: setting timer to fire after %.2f seconds (PluggedIn=%u)", (uint8_t *)&v5, 0x12u);
}

void sub_1000634B8()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "SmartPowerNap: feature not enabled or predictor not initialized", v2, v3, v4, v5, v6);
}

void sub_1000634EC()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "SmartPowerNap: device isnt locked. Wait for lock", v2, v3, v4, v5, v6);
}

void sub_100063520()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "SmartPowerNap: already in smartpowernap. Skipping evaluation", v2, v3, v4, v5, v6);
}

void sub_100063554(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000635CC(char a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1 & 1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "SmartPowerNap: evaluateSmartPowerNap %d", (uint8_t *)v2, 8u);
}

void sub_100063648()
{
  sub_10000F7BC();
  sub_10000F768((void *)&_mh_execute_header, v0, v1, "SmartPowerNap: model returned error %@", v2, v3, v4, v5, v6);
}

void sub_1000636B0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100063728()
{
  sub_10000F7BC();
  sub_10000F784((void *)&_mh_execute_header, v0, v1, "SmartPowerNap: PL Log %@", v2, v3, v4, v5, v6);
}

void sub_100063790()
{
  sub_10000F7BC();
  sub_10000F768((void *)&_mh_execute_header, v0, v1, "SmartPowerNap: model query at re-entry returned error %@", v2, v3, v4, v5, v6);
}

void sub_1000637F8()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "did not link scheduler properly", v2, v3, v4, v5, v6);
}

void sub_10006382C()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Did not successfully set up sink", v2, v3, v4, v5, v6);
}

void sub_100063860()
{
  sub_10000F7BC();
  sub_10000F768((void *)&_mh_execute_header, v0, v1, "SmartPowerNap: error in registering motion alarm %@", v2, v3, v4, v5, v6);
}

void sub_1000638C8()
{
  sub_10000F7BC();
  sub_10000F768((void *)&_mh_execute_header, v0, v1, "SmartPowerNap: error in unregistering motion alarm %@", v2, v3, v4, v5, v6);
}

void sub_100063930()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "SmartPowerNap: cancelling evaluation_timer", v2, v3, v4, v5, v6);
}

void sub_100063964(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000639DC()
{
  sub_10000F7C8();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Inactivity duration (%.2f hours) < recommended wait time (%.2f hours)", v1, 0x16u);
}

void sub_100063A54()
{
  sub_10000F7C8();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Session forced to end but predicted duration (%.2f hours) < inactivity duration (%.2f hours)", v1, 0x16u);
}

void sub_100063ACC()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Invalid message\n", v2, v3, v4, v5, v6);
}

void sub_100063B00()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to create response message\n", v2, v3, v4, v5, v6);
}

void sub_100063B34()
{
  sub_10000F7BC();
  sub_10000F768((void *)&_mh_execute_header, v0, v1, "Received invalid re-query delta %lld\n", v2, v3, v4, v5, v6);
}

void sub_100063B9C()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Ignoring set re-query delta message from unprivileged sender\n", v2, v3, v4, v5, v6);
}

void sub_100063BD0()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "BiomeLibrary framework not found", v2, v3, v4, v5, v6);
}

void sub_100063C04()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "BiomeStreams framework not found", v2, v3, v4, v5, v6);
}

void sub_100063C38()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "OSIntelligence framework not found", v2, v3, v4, v5, v6);
}

uint64_t sub_100063C6C()
{
  uint64_t v0 = abort_report_np();
  return sub_100063C94(v0);
}

uint64_t sub_100063C94()
{
  uint64_t v0 = abort_report_np();
  return sub_100063CBC(v0);
}

uint64_t sub_100063CBC()
{
  uint64_t v0 = abort_report_np();
  return sub_100063CE4(v0);
}

void sub_100063CE4()
{
  sub_100012AC4();
  sub_100012A74((void *)&_mh_execute_header, v0, v1, "LPM: notify_register_dispatch for plugged in status failed (%d) for %s\n", v2, v3, v4, v5, v6);
}

void sub_100063D58()
{
  sub_100012AC4();
  sub_100012A74((void *)&_mh_execute_header, v0, v1, "LPM: notify_register_dispatch for battery percentage failed (%d) for %s\n", v2, v3, v4, v5, v6);
}

void sub_100063DCC(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "LPM: Unable to get current battery level. Percent Remaining returned %d", (uint8_t *)v2, 8u);
}

void sub_100063E44(uint64_t a1, uint64_t a2, NSObject *a3)
{
  LODWORD(v3) = 67109378;
  HIDWORD(v3) = a2;
  LOWORD(v4) = 2114;
  *(void *)((char *)&v4 + 2) = a1;
  sub_100012AA4((void *)&_mh_execute_header, a2, a3, "LPM: notify_register_dispatch failed (%d) for %{public}@\n", v3, (void)v4, WORD4(v4));
}

void sub_100063EBC()
{
  sub_100012A90();
  sub_100012A74((void *)&_mh_execute_header, v0, v1, "LPM: notify_register_dispatch failed (%d) for %{public}@\n", v2, v3, v4, v5, v6);
}

void sub_100063F30()
{
  sub_100012A90();
  sub_100012A74((void *)&_mh_execute_header, v0, v1, "LPM: notify_register_check failed (%d) for %{public}@\n", v2, v3, v4, v5, v6);
}

void sub_100063FA4()
{
  sub_100012A90();
  sub_100012A74((void *)&_mh_execute_header, v0, v1, "LPM: notify_get_state failed (%d) for %{public}@\n", v2, v3, v4, v5, v6);
}

void sub_100064018()
{
  sub_100012A90();
  sub_100012A74((void *)&_mh_execute_header, v0, v1, "LPM: notify_register_check failed (%d) for %{public}@\n", v2, v3, v4, v5, v6);
}

void sub_10006408C(void *a1, void *a2)
{
  uint64_t v3 = a1;
  v4[0] = 67109120;
  v4[1] = [a2 processIdentifier];
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "LPM: listener: rejected new connection from PID %d (no entitlement)\n", (uint8_t *)v4, 8u);
}

void sub_100064128()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "LPM: readStateFromDefaults did synchronize.", v2, v3, v4, v5, v6);
}

void sub_10006415C()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "LPM: State and date did synchronize.", v2, v3, v4, v5, v6);
}

void sub_100064190(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100064210(int a1, int a2, os_log_t log)
{
  v3[0] = 67109634;
  v3[1] = a1;
  __int16 v4 = 1024;
  int v5 = a2;
  __int16 v6 = 2114;
  CFStringRef v7 = @"com.apple.system.lowpowermode";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "LPM: notify_set_state(%d) failed (%d) for %{public}@\n", (uint8_t *)v3, 0x18u);
}

void sub_1000642AC(uint64_t a1, void *a2, NSObject *a3)
{
  LOWORD(v3) = 2048;
  *(void *)((char *)&v3 + 2) = *a2;
  sub_100012AA4((void *)&_mh_execute_header, (uint64_t)a2, a3, "LPM: inconsistent state (powerd:%d != notifyd:%llu), file a radar!\n", 67109376, (void)v3);
}

void sub_10006432C()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "LPM: Used before state did synchronize.", v2, v3, v4, v5, v6);
}

void sub_100064360()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "LPM: Failed to toggle state to auto-enable", v2, v3, v4, v5, v6);
}

void sub_100064394()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "LPM: Pre-LostMode state did synchronize.", v2, v3, v4, v5, v6);
}

void sub_1000643C8()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "LPM: setPowerMode: failed to toggle state", v2, v3, v4, v5, v6);
}

void sub_1000643FC(int a1, NSObject *a2)
{
  int v2 = 134218498;
  uint64_t v3 = 0;
  __int16 v4 = 1024;
  int v5 = a1;
  __int16 v6 = 2114;
  CFStringRef v7 = @"com.apple.system.lowpowermode.auto_disabled";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "LPM: notify_set_state(%ld) failed with (%d) for %{public}@\n", (uint8_t *)&v2, 0x1Cu);
}

void sub_100064494()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "LPM: autoDisableLowPowerMode failed to toggle state", v2, v3, v4, v5, v6);
}

void sub_1000644C8(uint64_t a1, uint64_t a2, NSObject *a3)
{
  LODWORD(v3) = 67109378;
  HIDWORD(v3) = a2;
  LOWORD(v4) = 2112;
  *(void *)((char *)&v4 + 2) = *(void *)(a1 + 24);
  sub_100012AA4((void *)&_mh_execute_header, a2, a3, "LPM: Invalid MinimumOnDays %d set by %@, ignoring", v3, (void)v4, WORD4(v4));
}

void sub_10006454C()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "LPM: Dipped below value did synchronize.", v2, v3, v4, v5, v6);
}

void sub_100064580()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Super init failed for BatteryTrustedData", v2, v3, v4, v5, v6);
}

void sub_1000645B4()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Need valid identifier", v2, v3, v4, v5, v6);
}

void sub_1000645E8(void *a1)
{
  uint64_t v1 = a1;
  int v2 = 136315138;
  id v3 = [@"com.apple.powerd.batterytrusteddata.dailytaskQueue" UTF8String];
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Failed to create queue %s", (uint8_t *)&v2, 0xCu);
}

void sub_100064684()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Trusted Data feature disabled, EXIT", v2, v3, v4, v5, v6);
}

void sub_1000646B8()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "AppleBatteryAuth indicates auth unknown/failure, still continue...", v2, v3, v4, v5, v6);
}

void sub_1000646EC()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "No CoreAccessories Framework to run, EXIT", v2, v3, v4, v5, v6);
}

void sub_100064720()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Nil payload. Nothing to send to PPS", v2, v3, v4, v5, v6);
}

void sub_100064754()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Could not create ppsId with subsystem BatteryTrustedData and Daily as BatteryTrustedData", v2, v3, v4, v5, v6);
}

void sub_100064788()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "PPS request object not found. Unable to send data to powerlog", v2, v3, v4, v5, v6);
}

uint64_t sub_1000647BC()
{
  dlerror();
  uint64_t v0 = abort_report_np();
  return sub_1000647E0(v0);
}

void sub_1000647E0()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "We have been told to bail out!", v2, v3, v4, v5, v6);
}

void sub_100064814()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Got Null data from AppleBatteryAuth.", v2, v3, v4, v5, v6);
}

void sub_100064848()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Trusted data path disabled.", v2, v3, v4, v5, v6);
}

void sub_10006487C()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Auth Failed", v2, v3, v4, v5, v6);
}

void sub_1000648B0()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "doNotRunAnymore is true, return and dont set any more timers", v2, v3, v4, v5, v6);
}

void sub_1000648E4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100064950(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000649C0(int a1, NSObject *a2)
{
  int v2 = 136315394;
  uint64_t v3 = "AppleBatteryAuth";
  __int16 v4 = 1024;
  int v5 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to register for kIOGeneralInterest notifications from %s. rc:0x%x", (uint8_t *)&v2, 0x12u);
}

void sub_100064A4C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100064AB8()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Unable to create instance for BatteryTrustedData", v2, v3, v4, v5, v6);
}

void sub_100064AEC()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Sync Remote Location Unknown Error", v2, v3, v4, v5, v6);
}

void sub_100064B20(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Sync Remote Location Error %@", (uint8_t *)&v2, 0xCu);
}

void sub_100064B98()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "ContextSync framework not found", v2, v3, v4, v5, v6);
}

uint64_t sub_100064BCC()
{
  uint64_t v0 = abort_report_np();
  return sub_100064BF4(v0);
}

void sub_100064BF4()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "No saved data to check serial number\n", v2, v3, v4, v5, v6);
}

void sub_100064C28()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Serial number is missing in the saved data\n", v2, v3, v4, v5, v6);
}

void sub_100064C5C()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Battery serial number mismatch.\n", v2, v3, v4, v5, v6);
}

void sub_100064C90()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "failed to migrate cycleCountData\n", v2, v3, v4, v5, v6);
}

void sub_100064CC4(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to synchronize %@ data\n", (uint8_t *)&v2, 0xCu);
}

void sub_100064D3C()
{
  sub_100018DD4();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Saved data to %@: %@\n", v1, 0x16u);
}

void sub_100064DB4()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to create cycle data dictionary\n", v2, v3, v4, v5, v6);
}

void sub_100064DE8()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to get lifetime data dictionary\n", v2, v3, v4, v5, v6);
}

void sub_100064E1C()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to get battery data from the power source dictionary\n", v2, v3, v4, v5, v6);
}

void sub_100064E50()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "Battery Data initialized\n", v2, v3, v4, v5, v6);
}

void sub_100064E84(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100064EFC(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to enable heatmap logging(rx:0x%x\n", (uint8_t *)v2, 8u);
}

void sub_100064F74()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Battery serial number is not yet saved\n", v2, v3, v4, v5, v6);
}

void sub_100064FA8(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to synchronize the battery data to path %@\n", (uint8_t *)&v2, 0xCu);
}

void sub_100065020(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Saved battery data to path %@\n", (uint8_t *)&v2, 0xCu);
}

void sub_100065098()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "BHT Range not supported\n", v2, v3, v4, v5, v6);
}

void sub_1000650CC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10006513C()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "Battery data queue is not yet initialized\n", v2, v3, v4, v5, v6);
}

void sub_100065170()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "No KioskModeMode not found in dictionary\n", v2, v3, v4, v5, v6);
}

void sub_1000651A4()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to synchronize Kiosk Mode data to SMC\n", v2, v3, v4, v5, v6);
}

void sub_1000651D8(int *a1, NSObject *a2)
{
  int v2 = *a1;
  int v3 = 136315650;
  uint64_t v4 = "updateKioskModeData";
  __int16 v5 = 1024;
  int v6 = dword_1000A2E00;
  __int16 v7 = 1024;
  int v8 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%s: prevMode:%u currMode:%u\n", (uint8_t *)&v3, 0x18u);
}

void sub_100065278(int a1, int a2, os_log_t log)
{
  v3[0] = 67109376;
  v3[1] = a1;
  __int16 v4 = 1024;
  int v5 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "New cycle count: %d. Previous cycle count at which data is saved: %d\n", (uint8_t *)v3, 0xEu);
}

void sub_100065300()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "Device is not connected to external source\n", v2, v3, v4, v5, v6);
}

void sub_100065334()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to get adapter details\n", v2, v3, v4, v5, v6);
}

void sub_100065368()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Unknown family code data type\n", v2, v3, v4, v5, v6);
}

void sub_10006539C()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "Queue handler is not yet initialized\n", v2, v3, v4, v5, v6);
}

void sub_1000653D0()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "Received request for battery heatmap data\n", v2, v3, v4, v5, v6);
}

void sub_100065404()
{
  sub_100018DD4();
  sub_100018DEC((void *)&_mh_execute_header, v0, v1, "Invalid parameters. remoteConnection:%@ msg:%@");
}

void sub_10006546C()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to create xpc object to send response\n", v2, v3, v4, v5, v6);
}

void sub_1000654A0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10006550C()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "Received request for cycle count data\n", v2, v3, v4, v5, v6);
}

void sub_100065540()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "Responded to request for cycle count data\n", v2, v3, v4, v5, v6);
}

void sub_100065574()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "Received request for Kiosk Mode data\n", v2, v3, v4, v5, v6);
}

void sub_1000655A8()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "Sender not entitled to read Kiosk Mode data\n", v2, v3, v4, v5, v6);
}

void sub_1000655DC()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "Responded to request for Kiosk Mode data\n", v2, v3, v4, v5, v6);
}

void sub_100065610(os_log_t log)
{
  v1[0] = 67109120;
  v1[1] = 3;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Unknown battery state %d\n", (uint8_t *)v1, 8u);
}

void sub_100065690(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Current boot session UUID: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100065708()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "Failed to read bootsessionuuid (%u)\n", v2, v3, v4, v5, v6);
}

void sub_100065770()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Invalid connection\n", v2, v3, v4, v5, v6);
}

void sub_1000657A4()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Invalid message\n", v2, v3, v4, v5, v6);
}

void sub_1000657D8()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to create response message\n", v2, v3, v4, v5, v6);
}

void sub_10006580C()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to get dictionary\n", v2, v3, v4, v5, v6);
}

void sub_100065840()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to create dictionary\n", v2, v3, v4, v5, v6);
}

void sub_100065874(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Restoring state from disk:%@\n", (uint8_t *)&v2, 0xCu);
}

void sub_1000658EC()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "Failed to activate SOC limit: %d\n", v2, v3, v4, v5, v6);
}

void sub_100065954()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "Failed to create token for gauging mitigation state change notification. status = %d\n", v2, v3, v4, v5, v6);
}

void sub_1000659BC()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "Invalid token from %u\n", v2, v3, v4, v5, v6);
}

void sub_100065A24()
{
  sub_10001B420();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "No policy found for token %@ from %u\n", v1, 0x12u);
}

void sub_100065AA0(void *a1, void *a2)
{
  uint64_t v3 = a1;
  objc_msgSend(a2, "delta_to_query");
  int v5 = 134217984;
  uint64_t v6 = v4;
  _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CoreSmartPowerNap: setting timer to fire after %.2f seconds", (uint8_t *)&v5, 0xCu);
}

void sub_100065B3C()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "CoreSmartPowerNap: feature not enabled or predictor not initialized", v2, v3, v4, v5, v6);
}

void sub_100065B70()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "CoreSmartPowerNap: device isnt locked/inactive. Wait for lock/inactive.", v2, v3, v4, v5, v6);
}

void sub_100065BA4()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "CoreSmartPowerNap: already in coresmartpowernap. Skipping evaluation", v2, v3, v4, v5, v6);
}

void sub_100065BD8(char a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1 & 1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "CoreSmartPowerNap: evaluateCoreSmartPowerNap %d", (uint8_t *)v2, 8u);
}

void sub_100065C54()
{
  sub_10000F7BC();
  sub_100020F1C((void *)&_mh_execute_header, v0, v1, "CoreSmartPowerNap: model returned error %@", v2);
}

void sub_100065CC0(os_log_t log)
{
  int v1 = 138412290;
  uint64_t v2 = &off_10009AA60;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "CoreSmartPowerNap: PL Log CSPN Start %@", (uint8_t *)&v1, 0xCu);
}

void sub_100065D44()
{
  sub_10000F7BC();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "CoreSmartPowerNap: PL Log CSPN End %@", v1, 0xCu);
}

void sub_100065DB8()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "CoreSmartPowerNap: Not session start time available to calculate duration, proceeding to exit CoreSmartPowerNap.", v2, v3, v4, v5, v6);
}

void sub_100065DEC()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "CoreSmartPowerNap: cancelling evaluation_timer", v2, v3, v4, v5, v6);
}

void sub_100065E20()
{
  sub_10000F7BC();
  sub_100020F1C((void *)&_mh_execute_header, v0, v1, "CoreSmartPowerNap: error in registering motion alarm %@", v2);
}

void sub_100065E8C()
{
  sub_10000F7BC();
  sub_100020F1C((void *)&_mh_execute_header, v0, v1, "CoreSmartPowerNap: error in unregistering motion alarm %@", v2);
}

void sub_100065EF8(void *a1, void *a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = [a2 objectForKeyedSubscript:@"predictedDurationHrFloat"];
  [v4 doubleValue];
  uint64_t v6 = v5;
  __int16 v7 = [a2 objectForKeyedSubscript:@"sessionDurationHrFloat"];
  [v7 doubleValue];
  int v9 = 134218240;
  uint64_t v10 = v6;
  __int16 v11 = 2048;
  uint64_t v12 = v8;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Session interrupted but predicted duration (%.2f hours) < session duration (%.2f hours)", (uint8_t *)&v9, 0x16u);
}

void sub_100065FEC(void *a1, void *a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = [a2 objectForKeyedSubscript:@"predictedDurationHrFloat"];
  [v4 doubleValue];
  int v7 = 134217984;
  uint64_t v8 = v5;
  sub_100020F1C((void *)&_mh_execute_header, v3, v6, "Abnormally long/short predicted duration: %.2f hours", (uint8_t *)&v7);
}

void sub_100066098(void *a1, void *a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = [a2 objectForKeyedSubscript:@"sessionDurationHrFloat"];
  [v4 doubleValue];
  int v7 = 134217984;
  uint64_t v8 = v5;
  sub_100020F1C((void *)&_mh_execute_header, v3, v6, "Abnormally long/short session duration: %.2f hours", (uint8_t *)&v7);
}

void sub_100066144()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Nil model metadata", v2, v3, v4, v5, v6);
}

void sub_100066178()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Model hesitant with failure to extract predictor type from metadata", v2, v3, v4, v5, v6);
}

void sub_1000661AC(void *a1, void *a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = [a2 objectForKeyedSubscript:@"entryConfidenceValueInt"];
  v5[0] = 67109120;
  v5[1] = [v4 intValue];
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Model hesitant with confidence value out-of-bounds: %d", (uint8_t *)v5, 8u);
}

void sub_100066260()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Model hesitant despite high confidence level", v2, v3, v4, v5, v6);
}

void sub_100066294()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Ignoring set re-query delta message from unprivileged sender\n", v2, v3, v4, v5, v6);
}

void sub_1000662C8()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "BiomeLibrary framework not found", v2, v3, v4, v5, v6);
}

void sub_1000662FC()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "BiomeStreams framework not found", v2, v3, v4, v5, v6);
}

void sub_100066330()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "OSIntelligence framework not found", v2, v3, v4, v5, v6);
}

void sub_100066364(int a1)
{
  v1[0] = 67109120;
  v1[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Unable to get times: %i", (uint8_t *)v1, 8u);
}

void sub_1000663E4()
{
}

void sub_100066410()
{
}

void sub_10006643C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to register", v1, 2u);
}

void sub_100066480(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to get matching dict handles\n", v1, 2u);
}

void sub_1000664C4(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *uint8_t buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Invalid type\n", buf, 2u);
}

void sub_100066504(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10006657C()
{
  sub_10000F7BC();
  sub_10000F768((void *)&_mh_execute_header, v0, v1, "Defaults returned %@ instead of NSDate", v2, v3, v4, v5, v6);
}

void sub_1000665E4()
{
  sub_10000F7BC();
  sub_10000F768((void *)&_mh_execute_header, v0, v1, "Invalidation reason: %s", v2, v3, v4, v5, v6);
}

void sub_10006664C()
{
  sub_10000F7BC();
  sub_10000F768((void *)&_mh_execute_header, v0, v1, "Connection event handler received error: %s", v2, v3, v4, v5, v6);
}

void sub_1000666B4()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Could not create pruning timer", v2, v3, v4, v5, v6);
}

void sub_1000666E8()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "Failed to register for BDC get current time notification. status = %d\n", v2, v3, v4, v5, v6);
}

void sub_100066750()
{
  sub_1000299F4(__stack_chk_guard);
  sub_1000299DC();
  sub_100018DEC((void *)&_mh_execute_header, v0, v1, "Could not create dir %@ error %@");
}

void sub_1000667B8()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Defaults returned unexpected type for battery serial num", v2, v3, v4, v5, v6);
}

void sub_1000667EC()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "CoreTime framework not found", v2, v3, v4, v5, v6);
}

void sub_100066820()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Symbol TMGetKernelMonotonicClock not found in CoreTime", v2, v3, v4, v5, v6);
}

void sub_100066854()
{
  sub_100018DD4();
  sub_100018DEC((void *)&_mh_execute_header, v0, v1, "System time reset detected: Previous %@, current %@. Awaiting system time update.");
}

void sub_1000668BC(uint64_t *a1, NSObject *a2)
{
  uint64_t v2 = *a1;
  int v3 = 138412546;
  CFStringRef v4 = @"/var/MobileSoftwareUpdate/Hardware/Battery/BDC";
  __int16 v5 = 2112;
  uint64_t v6 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to delete items at %@ error %@", (uint8_t *)&v3, 0x16u);
}

void sub_10006694C()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to enumerate files for encryption", v2, v3, v4, v5, v6);
}

void sub_100066980()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to get file manager object", v2, v3, v4, v5, v6);
}

void sub_1000669B4()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to enumerate data store path", v2, v3, v4, v5, v6);
}

void sub_1000669E8()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Not restarting collection agents", v2, v3, v4, v5, v6);
}

void sub_100066A1C()
{
  sub_100018DD4();
  sub_100018DEC((void *)&_mh_execute_header, v0, v1, "Could not create dir %@ error %@");
}

void sub_100066A84()
{
  sub_100018DD4();
  sub_100018DEC((void *)&_mh_execute_header, v0, v1, "Failed to delete dir %@. Error %@");
}

void sub_100066AEC()
{
  sub_1000299F4(__stack_chk_guard);
  sub_1000299DC();
  sub_100018DEC((void *)&_mh_execute_header, v0, v1, "Failed to get size for file %@. Error %@");
}

void sub_100066B54()
{
  sub_10000F7BC();
  sub_10000F768((void *)&_mh_execute_header, v0, v1, "enumeratorAtURL failed for %@", v2, v3, v4, v5, v6);
}

void sub_100066BBC(void *a1, uint64_t a2, NSObject *a3)
{
  int v5 = 138412546;
  id v6 = [a1 path];
  __int16 v7 = 2112;
  uint64_t v8 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Failed to read %@ with error %@", (uint8_t *)&v5, 0x16u);
}

void sub_100066C58()
{
  sub_10000F7BC();
  sub_10000F768((void *)&_mh_execute_header, v0, v1, "Could not create file %@", v2, v3, v4, v5, v6);
}

void sub_100066CC0()
{
  sub_1000299F4(__stack_chk_guard);
  sub_1000299DC();
  sub_100018DEC((void *)&_mh_execute_header, v0, v1, "Could not create file %@ error %@");
}

void sub_100066D28()
{
  sub_100018DD4();
  sub_100018DEC((void *)&_mh_execute_header, v0, v1, "New system time %@ less than current timestamp used %@");
}

void sub_100066D90()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "No reference time available", v2, v3, v4, v5, v6);
}

void sub_100066DC4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100066E34()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Super init failed", v2, v3, v4, v5, v6);
}

void sub_100066E68()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Retention period invalid", v2, v3, v4, v5, v6);
}

void sub_100066E9C(uint64_t a1, id *a2, NSObject *a3)
{
  uint64_t v4 = *(void *)(a1 + 24);
  unsigned int v5 = [*a2 intValue];
  int v6 = 138412546;
  uint64_t v7 = v4;
  __int16 v8 = 1024;
  unsigned int v9 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "%@ Collection period invalid : %d", (uint8_t *)&v6, 0x12u);
}

void sub_100066F40()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "nil returned by collection block", v2, v3, v4, v5, v6);
}

void sub_100066F74()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "PowerLog framework not available", v2, v3, v4, v5, v6);
}

void sub_100066FA8()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "PerfPowerTelemetry functions not available", v2, v3, v4, v5, v6);
}

void sub_100066FDC()
{
  sub_10000F7BC();
  sub_10000F768((void *)&_mh_execute_header, v0, v1, "Failed to retreive ppt ID for group name %@", v2, v3, v4, v5, v6);
}

void sub_100067044()
{
  sub_10000F7BC();
  sub_10000F768((void *)&_mh_execute_header, v0, v1, "Unknown data group name %@", v2, v3, v4, v5, v6);
}

void sub_1000670AC()
{
  sub_1000299F4(__stack_chk_guard);
  sub_1000299DC();
  sub_100018DEC((void *)&_mh_execute_header, v0, v1, "Failed to encrypt file %@ error %@");
}

void sub_100067114()
{
  sub_1000299F4(__stack_chk_guard);
  sub_1000299DC();
  sub_100018DEC((void *)&_mh_execute_header, v0, v1, "Failed to write data to file %@ with error %@");
}

void sub_10006717C()
{
  sub_100018DD4();
  sub_100018DEC((void *)&_mh_execute_header, v0, v1, "Unexpected encryption class %@ for file %@");
}

void sub_1000671E4()
{
  sub_10001B414();
  __int16 v2 = 2080;
  uint64_t v3 = "com.apple.system.powersources.source";
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Error %d registering for %s notification", v1, 0x12u);
}

void sub_10006726C()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "Failed to register for SmartCharging notification. status = %d\n", v2, v3, v4, v5, v6);
}

void sub_1000672D4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10006734C()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to allocated property dictionary", v2, v3, v4, v5, v6);
}

void sub_100067380()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "Failed to set config properties on BTM 0x%08x", v2, v3, v4, v5, v6);
}

void sub_1000673E8()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "No match for BTM IOService.", v2, v3, v4, v5, v6);
}

void sub_10006741C()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Battery Data Collection not ready in BTM", v2, v3, v4, v5, v6);
}

void sub_100067450()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "BDCAMA agent disabled by feature flag", v2, v3, v4, v5, v6);
}

void sub_100067484()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Invalid registration token for kIOPSNotifyTimeRemaining", v2, v3, v4, v5, v6);
}

void sub_1000674B8()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "NULL prop argument.", v2, v3, v4, v5, v6);
}

void sub_1000674EC()
{
  sub_10000F7BC();
  WORD2(v3) = 2048;
  HIWORD(v3) = v0;
  sub_100018DEC((void *)&_mh_execute_header, v0, v1, "Value of type %lu. Expected type %lu ", v2, v3);
}

void sub_100067560()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Cannot create reply dictionary", v2, v3, v4, v5, v6);
}

void sub_100067594()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "BDC is not initialized or defaults are unavailable.\n", v2, v3, v4, v5, v6);
}

void sub_1000675C8()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Could not convert defaults dictionary to XPC object", v2, v3, v4, v5, v6);
}

void sub_1000675FC()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Ignoring BDC plist-copy message from unprivileged sender\n", v2, v3, v4, v5, v6);
}

void sub_100067630()
{
  sub_100018DD4();
  sub_100018DEC((void *)&_mh_execute_header, v0, v1, "Invalid parameters. remoteConn: %@ msg: %@");
}

void sub_100067698(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100067710()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to allocate return dictionary", v2, v3, v4, v5, v6);
}

void sub_100067744(void *a1, NSObject *a2)
{
  [a1 count];
  sub_10000F7BC();
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "num elements in array %lu", v3, 0xCu);
}

void sub_1000677CC()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Could not create XPC queue", v2, v3, v4, v5, v6);
}

void sub_100067800()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Could not create XPC connection", v2, v3, v4, v5, v6);
}

void sub_100067834()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to create xpc dictionary to send message", v2, v3, v4, v5, v6);
}

void sub_100067868()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Timed out waiting for XPC response from SmartCharging daemon.", v2, v3, v4, v5, v6);
}

void sub_10006789C()
{
  sub_10000F7BC();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Response from PowerUI %@", v1, 0xCu);
}

void sub_100067910()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "NULL response from XPC connection", v2, v3, v4, v5, v6);
}

void sub_100067944()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "NULL asb dictionary", v2, v3, v4, v5, v6);
}

void sub_100067978()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "NULL return dictionationary", v2, v3, v4, v5, v6);
}

void sub_1000679AC(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *uint8_t buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Unable to get year and week from IOPSGetYearAndWeekOfManufactureFromBatterySerial", buf, 2u);
}

void sub_1000679EC(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *uint8_t buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "bhData not found", buf, 2u);
}

void sub_100067A2C()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Invalid token for BDC current time notification", v2, v3, v4, v5, v6);
}

void sub_100067A60(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100014C88((void *)&_mh_execute_header, a2, a3, "Failed to create token for BDC current time notification. status = %d\n", a5, a6, a7, a8, 0);
}

void sub_100067AD0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100067B08(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100067B40(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100067B78(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to send request to service: 0x%x", (uint8_t *)v2, 8u);
}

void sub_100067BF0()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Sync Remote Location Unknown Error", v2, v3, v4, v5, v6);
}

void sub_100067C24()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "ContextSync framework not found", v2, v3, v4, v5, v6);
}

void sub_100067C58()
{
  *(_WORD *)os_log_t v0 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, 0, OS_LOG_TYPE_ERROR, "Failed to find device class", v0, 2u);
}

void sub_100067C9C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100067D0C(uint64_t *a1, NSObject *a2)
{
  uint64_t v2 = *a1;
  int v3 = 138543362;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "AutoWakeScheduler: Not arming timer for a past or distant future event %{public}@\n", (uint8_t *)&v3, 0xCu);
}

void sub_100067D88(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "AutoWakeScheduler: Received Will-Sleep Notification", v1, 2u);
}

void sub_100067DCC(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "AutoWakeScheduler: Received Did-Wake Notification", v1, 2u);
}

void sub_100067E10(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100067E7C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100067EE8()
{
  sub_10000F7BC();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "notification misses userInfo dict:%@\n", v1, 0xCu);
}

void sub_100067F5C()
{
  sub_10000F7BC();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "userInfo misses feature status:%@\n", v1, 0xCu);
}

void sub_100067FD0()
{
  sub_10000F7BC();
  sub_10000F784((void *)&_mh_execute_header, v0, v1, "received notification: %@\n", v2, v3, v4, v5, v6);
}

void sub_100068038()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Could not get AVSC handle\n", v2, v3, v4, v5, v6);
}

void sub_10006806C()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "Wombat: Failed to clear battery level limit %#x\n", v2, v3, v4, v5, v6);
}

void sub_1000680D4()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "Wombat: Failed to clear Wombat Battery Limit: %#x\n", v2, v3, v4, v5, v6);
}

void sub_10006813C()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "Wombat: Failed to set Wombat Battery Limit: %#x\n", v2, v3, v4, v5, v6);
}

void sub_1000681A4()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "Wombat: Failed to set battery level limit: %#x\n", v2, v3, v4, v5, v6);
}

void sub_10006820C()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "Wombat: Failed to register battery limit token: %#x\n", v2, v3, v4, v5, v6);
}

void sub_100068274()
{
  sub_10003BA08();
  sub_100018E0C((void *)&_mh_execute_header, v0, v1, "WombatChangeHandler:%u\n", v2, v3, v4, v5, v6);
}

void sub_1000682E0()
{
  sub_10003BA2C();
  sub_10000F768((void *)&_mh_execute_header, v0, v1, "Battery polling is now %s\n", v2, v3, v4, v5, v6);
}

void sub_100068360()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to find IOPMPowerSource object\n", v2, v3, v4, v5, v6);
}

void sub_100068394()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "CFDictCreate returned nil", v2, v3, v4, v5, v6);
}

void sub_1000683C8()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "Failed to install notification for IOPMPS: %d", v2, v3, v4, v5, v6);
}

void sub_100068430()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "No Battery to poll.", v2, v3, v4, v5, v6);
}

void sub_100068464()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "Battery poll: full", v2, v3, v4, v5, v6);
}

void sub_100068498()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "Battery poll: UserVis", v2, v3, v4, v5, v6);
}

void sub_1000684CC()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Battery polling is disabled. powerd is skipping this battery udpate request.", v2, v3, v4, v5, v6);
}

void sub_100068500()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to create lowBatteryKey\n", v2, v3, v4, v5, v6);
}

void sub_100068534()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "Failed to post notification for time remaining. rc:0x%x\n", v2, v3, v4, v5, v6);
}

void sub_10006859C()
{
  sub_10000F7BC();
  sub_10000F768((void *)&_mh_execute_header, v0, v1, "Received invalid time delta %lld\n", v2, v3, v4, v5, v6);
}

void sub_100068604()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Ignoring custom battery properties message from unprivileged sender\n", v2, v3, v4, v5, v6);
}

void sub_100068638()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to create xpc object to send response\n", v2, v3, v4, v5, v6);
}

void sub_10006866C()
{
  sub_100018DD4();
  sub_100018DEC((void *)&_mh_execute_header, v0, v1, "Invalid parameters. connection:%@ msg:%@");
}

void sub_1000686D4()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to create response data\n", v2, v3, v4, v5, v6);
}

void sub_100068708()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to create XPC object\n", v2, v3, v4, v5, v6);
}

void sub_10006873C(void *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  id v4 = +[NSString stringWithFormat:@"%@", a2];
  *(_DWORD *)uint8_t buf = 136315138;
  id v6 = [v4 UTF8String];
  _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "%s\n", buf, 0xCu);
}

void sub_100068808()
{
  sub_10003BA2C();
  __int16 v4 = 1024;
  int v5 = v0;
  __int16 v6 = 2080;
  uint64_t v7 = "IOPSBatteryHealthServiceState";
  __int16 v8 = 1024;
  int v9 = v1;
  _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s: %d %s: %d", v3, 0x22u);
}

void sub_1000688B0()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to allocate memory to delete battery data from default prefs\n", v2, v3, v4, v5, v6);
}

void sub_1000688E4()
{
  sub_10003BA2C();
  sub_10000F768((void *)&_mh_execute_header, v0, v1, "Error fetching group container systemgroup.com.apple.powerlog : %llu", v2, v3, v4, v5, v6);
}

void sub_100068950()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to create dictionary to hold battery data\n", v2, v3, v4, v5, v6);
}

void sub_100068984()
{
  sub_10003B9B8();
  sub_10003B9D0((void *)&_mh_execute_header, v0, v1, "Powerlog Service Flags 0x%x with version 0x%x is unexpected\n", v2, v3);
}

void sub_1000689EC()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "Unexpected Service state %d\n", v2, v3, v4, v5, v6);
}

void sub_100068A54()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "powerlog's battery health data can't be migrated until first unlock\n", v2, v3, v4, v5, v6);
}

void sub_100068A88(int a1, NSObject *a2, uint64_t a3)
{
  v3[0] = 67109376;
  v3[1] = 1;
  __int16 v4 = 1024;
  int v5 = a1;
  sub_10003B9F0((void *)&_mh_execute_header, a2, a3, "Invalid auth flags detected: authOk:%d flags:0x%x", (uint8_t *)v3);
}

void sub_100068B08()
{
  sub_10003B9B8();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "battery auth state: %d flags: 0x%x", v1, 0xEu);
}

void sub_100068B80()
{
  sub_10003B9B8();
  sub_10003B9D0((void *)&_mh_execute_header, v0, v1, "Invalid inputs ncc: %d design capacity: %d", v2, v3);
}

void sub_100068BE8()
{
  sub_10003BA08();
  sub_100018E0C((void *)&_mh_execute_header, v0, v1, "Using previous NCCP value %d\n", v2, v3, v4, v5, v6);
}

void sub_100068C54()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "Invalid nccp: %d", v2, v3, v4, v5, v6);
}

void sub_100068CBC()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "Inconclusive cycleCount, svcFlags: 0x%x\n", v2, v3, v4, v5, v6);
}

void sub_100068D24()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "missing trusted cycle count\n", v2, v3, v4, v5, v6);
}

void sub_100068D58()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "Inconclusive maximumCapacity, svcFlags: 0x%x\n", v2, v3, v4, v5, v6);
}

void sub_100068DC0()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "missing trusted maximumCapacity\n", v2, v3, v4, v5, v6);
}

void sub_100068DF4(void *a1, void *a2, int a3)
{
  uint64_t v5 = a1;
  uint8_t v6 = [a2 objectForKeyedSubscript:@"Trusted Maximum Capacity"];
  v8[0] = 67109376;
  v8[1] = a3;
  __int16 v9 = 1024;
  unsigned int v10 = [v6 intValue];
  sub_10003B9F0((void *)&_mh_execute_header, v5, v7, "monotonicity interrupted saved (%d) incoming (%d)\n", (uint8_t *)v8);
}

void sub_100068EB8()
{
  sub_10003BA2C();
  sub_10000F784((void *)&_mh_execute_header, v0, v1, "Returned adapter details dictionary %{public}@\n", v2, v3, v4, v5, v6);
}

void sub_100068F2C()
{
  sub_10000F7BC();
  __int16 v3 = 1024;
  int v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "failed to post '%s'. rc:%#x\n", v2, 0x12u);
}

void sub_100068FB0()
{
  sub_10003BA14();
  sub_10003B9D0((void *)&_mh_execute_header, v0, v1, "Failed to find the power source for psid 0x%x from pid %d\n", v2, v3);
}

void sub_100069020()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "PS update is missing SourceState or Capacity\n", v2, v3, v4, v5, v6);
}

void sub_100069054()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Ignoring precise battery info message from unprivileged client.\n", v2, v3, v4, v5, v6);
}

void sub_100069088()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Invalid/no power source information received\n", v2, v3, v4, v5, v6);
}

void sub_1000690BC(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *uint8_t buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Battery Data not found", buf, 2u);
}

void sub_1000690FC()
{
  sub_10000F7BC();
  sub_10000F768((void *)&_mh_execute_header, v0, v1, "Failed to set battery DOFU: %@\n", v2, v3, v4, v5, v6);
}

void sub_100069164()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "Setting ASBM property failed (%u)\n", v2, v3, v4, v5, v6);
}

void sub_1000691CC()
{
  sub_10000F7BC();
  sub_10000F784((void *)&_mh_execute_header, v0, v1, "DOFU in UTC: %@\n", v2, v3, v4, v5, v6);
}

void sub_100069234(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000692AC()
{
  sub_10003BA08();
  sub_100018E0C((void *)&_mh_execute_header, v0, v1, "Setting NCCP cycle count based filtering to %d\n", v2, v3, v4, v5, v6);
}

void sub_100069320()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to read battery feature flags\n", v2, v3, v4, v5, v6);
}

void sub_100069354()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "Setting NCCP cycle count based filtering to false\n", v2, v3, v4, v5, v6);
}

void sub_100069388()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "Battery is not installed\n", v2, v3, v4, v5, v6);
}

void sub_1000693BC()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Battery does not report SOC", v2, v3, v4, v5, v6);
}

void sub_1000693F0()
{
  sub_10000F7BC();
  sub_10000F768((void *)&_mh_execute_header, v0, v1, "Failed to get activation state: %@\n.", v2, v3, v4, v5, v6);
}

void sub_100069458()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "DOFU-monitor: No reliable time\n", v2, v3, v4, v5, v6);
}

void sub_10006948C()
{
  sub_10000F7BC();
  sub_10000F768((void *)&_mh_execute_header, v0, v1, "Setting DOFU requires an activated device: %@.\n", v2, v3, v4, v5, v6);
}

void sub_1000694F4()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "DOFU-monitor triggered\n", v2, v3, v4, v5, v6);
}

void sub_100069528()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "Failed to register for first unlock notification. rc=%d\n", v2, v3, v4, v5, v6);
}

void sub_100069590()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "Failed to register for battery health UPO Aware notifications. rc=%d\n", v2, v3, v4, v5, v6);
}

void sub_1000695F8()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "Failed to register for P0 threshold notifications. rc=%d\n", v2, v3, v4, v5, v6);
}

void sub_100069660()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to create dictionary to trigger battery health data migration\n", v2, v3, v4, v5, v6);
}

void sub_100069694()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Battery Data not found", v2, v3, v4, v5, v6);
}

void sub_1000696C8()
{
  sub_10003BA14();
  sub_10003B9D0((void *)&_mh_execute_header, v0, v1, "Unable to get previous battery health state. Service Flags:0x%x Service State:%d\n", v2, v3);
}

void sub_100069738()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to read battery cell disconnect count\n", v2, v3, v4, v5, v6);
}

void sub_10006976C()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to read battery weightedRa\n", v2, v3, v4, v5, v6);
}

void sub_1000697A0()
{
  sub_10001B414();
  sub_100018E0C((void *)&_mh_execute_header, v0, v1, "Using previous wRA %d\n", v2, v3, v4, v5, v6);
}

void sub_100069808()
{
  sub_10003BA08();
  __int16 v3 = 2048;
  uint64_t v4 = v0;
  _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "Using updated wRA %d from battery properties after %llu secs\n", v2, 0x12u);
}

void sub_100069890()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "missing trusted lifetime wra\n", v2, v3, v4, v5, v6);
}

void sub_1000698C4()
{
  sub_10001B414();
  sub_100018E0C((void *)&_mh_execute_header, v0, v1, "Using updated (lifetime) wra %d from trusted battery data\n", v2, v3, v4, v5, v6);
}

void sub_10006992C()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Battery P0 threshold is not set\n", v2, v3, v4, v5, v6);
}

void sub_100069960()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to get Battery health P0 threshold value\n", v2, v3, v4, v5, v6);
}

void sub_100069994()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "Unable to read mitigatedUPOCnt. Considering it as 0\n", v2, v3, v4, v5, v6);
}

void sub_1000699C8()
{
  sub_10003BA08();
  sub_100018E0C((void *)&_mh_execute_header, v0, v1, "Mitigated UPO count:%d\n", v2, v3, v4, v5, v6);
}

void sub_100069A3C(void *a1, const void *a2)
{
  uint64_t v3 = a1;
  CFGetTypeID(a2);
  sub_10000F7BC();
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Unexpected data type for mitigatedUPOCnt(type:%lu)\n", v4, 0xCu);
}

void sub_100069AD4()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Battery health UPO Aware value not set\n", v2, v3, v4, v5, v6);
}

void sub_100069B08()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Calibration0 not found", v2, v3, v4, v5, v6);
}

void sub_100069B3C()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to initiate calibration1", v2, v3, v4, v5, v6);
}

void sub_100069B70()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Out of memory for calibration1", v2, v3, v4, v5, v6);
}

void sub_100069BA4()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "No snapshots found", v2, v3, v4, v5, v6);
}

void sub_100069BD8()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "calib0: error reading baseline data", v2, v3, v4, v5, v6);
}

void sub_100069C0C(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *uint8_t buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Not a class", buf, 2u);
}

void sub_100069C4C(int *a1, NSObject *a2, uint64_t a3)
{
  int v3 = *a1;
  v4[0] = 67109376;
  v4[1] = v3;
  __int16 v5 = 1024;
  int v6 = 0;
  sub_10003B9F0((void *)&_mh_execute_header, a2, a3, "Unable to get serial number of the battery. Service Flags:0x%x Service State:%d\n", (uint8_t *)v4);
}

void sub_100069CCC()
{
  sub_10000F7BC();
  sub_10000F768((void *)&_mh_execute_header, v0, v1, "Invalid battery serial number(%{public}@) in battery properties\n", v2, v3, v4, v5, v6);
}

void sub_100069D34()
{
  sub_10003BA08();
  sub_100018E0C((void *)&_mh_execute_header, v0, v1, "Skipping battery health loop due to missing auth [0x%x]", v2, v3, v4, v5, v6);
}

void sub_100069DA0()
{
  sub_10003B9B8();
  sub_10003B9D0((void *)&_mh_execute_header, v0, v1, "Invalid inputs. ncc: %d designCap: %d\n", v2, v3);
}

void sub_100069E08()
{
  sub_10003B9B8();
  sub_10003B9D0((void *)&_mh_execute_header, v0, v1, "Failed to calculate Nominal Capacity percentage. NominalCapacity:%d DesignCapacity:%d\n", v2, v3);
}

void sub_100069E70()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "calib0: error reading calibration data", v2, v3, v4, v5, v6);
}

void sub_100069EA4()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "calib0: error reading current cycle count", v2, v3, v4, v5, v6);
}

void sub_100069ED8(int a1, NSObject *a2, uint64_t a3)
{
  v3[0] = 67109376;
  v3[1] = a1;
  __int16 v4 = 1024;
  int v5 = 5;
  sub_10003B9F0((void *)&_mh_execute_header, a2, a3, "calib0: only found %d samples, need %d", (uint8_t *)v3);
}

void sub_100069F58()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "calib0: failed to read algoChemId", v2, v3, v4, v5, v6);
}

void sub_100069F8C()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "calib0: error reading initial cycle count", v2, v3, v4, v5, v6);
}

void sub_100069FC0()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "calib0: error reading initial wRDc", v2, v3, v4, v5, v6);
}

void sub_100069FF4()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "calib0: error reading existing calibration data", v2, v3, v4, v5, v6);
}

void sub_10006A028()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to create AVSCMonitor\n", v2, v3, v4, v5, v6);
}

void sub_10006A05C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "CoreSmartPowerNap: Failed to register for sb lock state updates", v1, 2u);
}

void sub_10006A0A0()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "kiosk mode dict missing", v2, v3, v4, v5, v6);
}

void sub_10006A0D4()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "kiosk mode value missing", v2, v3, v4, v5, v6);
}

void sub_10006A108()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "couldn't find battery data", v2, v3, v4, v5, v6);
}

void sub_10006A13C()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "couldn't find lifetime data", v2, v3, v4, v5, v6);
}

void sub_10006A170()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to read qmax", v2, v3, v4, v5, v6);
}

void sub_10006A1A4(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unhandled inMessageType (%x)\n", (uint8_t *)v2, 8u);
}

void sub_10006A21C(os_log_t log, double a2, double a3)
{
  int v3 = 134218240;
  double v4 = a2;
  __int16 v5 = 2048;
  double v6 = a3;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Not the current wake %f > now %f", (uint8_t *)&v3, 0x16u);
}

void sub_10006A2A4()
{
  sub_100042568();
  sub_10003B9D0((void *)&_mh_execute_header, v0, v1, "Failed to find the connection for ID %d from pid %d\n", v2, v3);
}

void sub_10006A310()
{
  sub_100042568();
  sub_10003B9D0((void *)&_mh_execute_header, v0, v1, "Failed to create dispatch src to cleanup connection %d from pid %d\n", v2, v3);
}

void sub_10006A37C()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "WakeTime: capabilityChange isn't done yet\n", v2, v3, v4, v5, v6);
}

void sub_10006A3B0(uint64_t *a1, NSObject *a2)
{
  uint64_t v2 = *a1;
  int v3 = 134217984;
  uint64_t v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "WakeTime: useractive %llu\n", (uint8_t *)&v3, 0xCu);
}

void sub_10006A42C()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "WakeTime: calendar hasn't resynced yet\n", v2, v3, v4, v5, v6);
}

void sub_10006A460()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "Exiting PerfRestricted mode due to new PerfUnrestricted assertion.\n", v2, v3, v4, v5, v6);
}

void sub_10006A494()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "Exiting PerfRestricted mode as UserActivityLevel shows UserPresentPassive.\n", v2, v3, v4, v5, v6);
}

void sub_10006A4C8()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "Exiting PerfRestricted mode as UserActivityLevel shows UserPresentActive.\n", v2, v3, v4, v5, v6);
}

void sub_10006A4FC()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "Entering PerfRestriced mode as no PerfUnrestricted assertions exist, and UserActivitLevel shows inactive.\n", v2, v3, v4, v5, v6);
}

void sub_10006A530()
{
  sub_10000F75C();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Failed to read sysctl 'kern.wake_abs_time'\n", v1, 2u);
}

void sub_10006A570()
{
  sub_10000F75C();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Cannot create reply dictionary", v1, 2u);
}

void sub_10006A5B0(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Invalid parameters. remote: %@ msg: %@", (uint8_t *)&v3, 0x16u);
}

void sub_10006A638(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *uint8_t buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "logAsyncAssertionActivity: No kIOPMAssertionActivityAction key present when trying to log.", buf, 2u);
}

void sub_10006A678()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Process is not entitled to copy assertion activity updates", v2, v3, v4, v5, v6);
}

void sub_10006A6AC()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Cannot create reply dictionary", v2, v3, v4, v5, v6);
}

void sub_10006A6E0()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "_sendAssertionActivityUpdate: No current msg or connection to send a reply", v2, v3, v4, v5, v6);
}

void sub_10006A714()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Assertion activity update requested before current one is complete", v2, v3, v4, v5, v6);
}

void sub_10006A748()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Client is not entitled to read assertion activity", v2, v3, v4, v5, v6);
}

void sub_10006A77C()
{
  sub_100018DD4();
  sub_100018DEC((void *)&_mh_execute_header, v0, v1, "Invalid parameters. remote: %@ msg: %@");
}

void sub_10006A7E4()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "_sendActiveAssertions: No current msg or connection to send a reply", v2, v3, v4, v5, v6);
}

void sub_10006A818()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to create the xpc object to send response\n", v2, v3, v4, v5, v6);
}

void sub_10006A84C()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to retrieve dictionary from Create  message\n", v2, v3, v4, v5, v6);
}

void sub_10006A880()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Received unexpected data type for assertion creation\n", v2, v3, v4, v5, v6);
}

void sub_10006A8B4()
{
  sub_10000F7BC();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Created async assertion with props %@", v1, 0xCu);
}

void sub_10006A928()
{
  sub_100052DA0(__stack_chk_guard);
  LOWORD(v3) = 1024;
  HIWORD(v3) = v0;
  sub_10003B9D0((void *)&_mh_execute_header, v1, v2, "Process %d is not entitled to create assertion(remoteId:0x%x)\n", 67109376, v3);
}

void sub_10006A9A0()
{
  sub_100052DA0(__stack_chk_guard);
  sub_100052D8C();
  sub_100012A74((void *)&_mh_execute_header, v0, v1, "Pid %d is not privileged to set property %@\n", v2, v3, v4, v5, v6);
}

void sub_10006AA14()
{
  sub_100052DA0(__stack_chk_guard);
  sub_100052D8C();
  sub_100012A74((void *)&_mh_execute_header, v0, v1, "Pid %d is not privileged to set property %@\n", v2, v3, v4, v5, v6);
}

void sub_10006AA88()
{
  sub_100052DA0(__stack_chk_guard);
  sub_100052D8C();
  sub_100012AA4((void *)&_mh_execute_header, v0, v1, "Pid %d is not privileged to create assertion type %@\n");
}

void sub_10006AAF4()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "doCreate: raiseAssertion failed for PID %d", v2, v3, v4, v5, v6);
}

void sub_10006AB5C()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "doCreate: PID %d is suspended", v2, v3, v4, v5, v6);
}

void sub_10006ABC4()
{
  sub_10003B9B8();
  sub_10003B9D0((void *)&_mh_execute_header, v0, v1, "Failed to release assertion id 0x%x (rc:0x%x)\n", v2, v3);
}

void sub_10006AC2C()
{
  sub_10003B9B8();
  sub_10003B9D0((void *)&_mh_execute_header, v0, v1, "Failed to lookup assertion id: 0x%x (rc:0x%x)\n", v2, v3);
}

void sub_10006AC94()
{
  sub_10003B9B8();
  sub_10003B9D0((void *)&_mh_execute_header, v0, v1, "No pinfo for pid %d while releasing assertion 0x%x", v2, v3);
}

void sub_10006ACFC()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to retrieve dictionary from Properties message\n", v2, v3, v4, v5, v6);
}

void sub_10006AD30()
{
  sub_10000F7BC();
  sub_10000F768((void *)&_mh_execute_header, v0, v1, "Failed to retrieve assertion Id from Properties message %@\n", v2, v3, v4, v5, v6);
}

void sub_10006AD98()
{
  sub_100052DB8();
  sub_10003BA08();
  sub_100018E0C((void *)&_mh_execute_header, v0, v1, "No logging data from %d", v2, v3, v4, v5, v6);
}

void sub_10006AE00(const __CFArray *a1, uint64_t a2, NSObject *a3)
{
  CFArrayGetCount(a1);
  sub_10000F7BC();
  __int16 v7 = 2112;
  CFArrayRef v8 = a1;
  __int16 v9 = 1024;
  int v10 = v5;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Only logging data : Received logging data of length %ld %@ for pid %d", v6, 0x1Cu);
}

void sub_10006AEB4()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "processInfoCreate: proc_name look-up unsuccessful for pid %d\n", v2, v3, v4, v5, v6);
}

void sub_10006AF1C()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "processInfoCreate: calloc failed to allocate ProcessInfo struct for pid %d\n", v2, v3, v4, v5, v6);
}

void sub_10006AF84(uint64_t a1, uint64_t a2, NSObject *a3)
{
  LOWORD(v3) = 2080;
  *(void *)((char *)&v3 + 2) = a1;
  sub_100012AA4((void *)&_mh_execute_header, a2, a3, "Failed to create cfstring for pid %d name: %s\n", 67109378, (const char *)v3);
}

void sub_10006AFFC()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "processInfoCreate: dispatch_source_create failed for pid %d\n", v2, v3, v4, v5, v6);
}

void sub_10006B064()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "Process lookup failed for %d", v2, v3, v4, v5, v6);
}

void sub_10006B0CC()
{
  sub_10001B414();
  sub_100018E0C((void *)&_mh_execute_header, v0, v1, "Assertion feature: request for state from %d", v2, v3, v4, v5, v6);
}

void sub_10006B134(_xpc_connection_s *a1)
{
  xpc_connection_get_pid(a1);
  sub_100012A74((void *)&_mh_execute_header, &_os_log_default, v1, "Assertion Suspend/Resume request from peer %p(pid %d) does not have appropriate entitlement\n", v2, v3, v4, v5, 0);
}

void sub_10006B1C4()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "handleAssertionSuspend: Process with pid %d not found.\n", v2, v3, v4, v5, v6);
}

void sub_10006B22C()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "handleAssertionSuspend: Process with pid %d is already Suspended.\n", v2, v3, v4, v5, v6);
}

void sub_10006B294()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "handleAssertionResume: Process with pid %d not found or not Suspended.\n", v2, v3, v4, v5, v6);
}

void sub_10006B2FC()
{
  sub_10001B414();
  sub_100018E0C((void *)&_mh_execute_header, v0, v1, "Clearing up assertions from pid %d\n", v2, v3, v4, v5, v6);
}

void sub_10006B364()
{
  sub_10003BA14();
  sub_10003B9D0((void *)&_mh_execute_header, v0, v1, "Failed to create xpc msg object for pid %d to notify assertion 0x%x timeout\n", v2, v3);
}

void sub_10006B3D4()
{
  sub_10003BA08();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "Async client id is not found for id 0x%x\n", v2, v3, v4, v5, v6);
}

void sub_10006B440()
{
  sub_100052DB8();
  sub_10003BA08();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "Timed out waiting for assertion check response from pid %d\n", v2, v3, v4, v5, v6);
}

void sub_10006B4A8()
{
  sub_100052DB8();
  sub_10003BA08();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "Failed to create xpc msg object for pid %d to check assertions\n", v2, v3, v4, v5, v6);
}

void sub_10006B510()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Process likely exited before this reply", v2, v3, v4, v5, v6);
}

void sub_10006B544()
{
  sub_10001B414();
  LOWORD(v3) = 2048;
  *(void *)((char *)&v3 + 2) = v0;
  sub_100012AA4((void *)&_mh_execute_header, v0, v1, "Process for pid %d not found. token: %ld\n", v2, (void)v3);
}

void sub_10006B5B8()
{
  sub_10000F7BC();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Still waiting for assertion check response from %ld procs\n", v1, 0xCu);
}

void sub_10006B62C()
{
  sub_10001B414();
  sub_100018E0C((void *)&_mh_execute_header, v0, v1, "Received no active assertion from %d", v2, v3, v4, v5, v6);
}

void sub_10006B694()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to create array for pending responses\n", v2, v3, v4, v5, v6);
}

void sub_10006B6C8()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "checkForAsync: No process info dicts", v2, v3, v4, v5, v6);
}

void sub_10006B6FC()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "checkForAsync: No processes with xpc connection", v2, v3, v4, v5, v6);
}

void sub_10006B730()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Call to check async assertions while previous check is not complete\n", v2, v3, v4, v5, v6);
}

void sub_10006B764()
{
  sub_100052DB8();
  sub_10003BA08();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "Failed to create xpc msg object for pid %d to check assertions activity\n", v2, v3, v4, v5, v6);
}

void sub_10006B7CC()
{
  sub_10003BA14();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "sendAssertionActivityUpdateMsg: Sending token: %u to pid: %d\n", v1, 0xEu);
}

void sub_10006B84C()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "Process for pid %d not found", v2, v3, v4, v5, v6);
}

void sub_10006B8B4()
{
  sub_10001B414();
  sub_100018E0C((void *)&_mh_execute_header, v0, v1, "Process %d replied to update assertion activity", v2, v3, v4, v5, v6);
}

void sub_10006B91C()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "processAssertionActivityUpdateResp: client %d responded after timeout", v2, v3, v4, v5, v6);
}

void sub_10006B984()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "processAssertionActivityUpdateResp: Reply type isn't XPC_TYPE_DICTIONARY from pid: %d\n", v2, v3, v4, v5, v6);
}

void sub_10006B9EC()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "checkForAsyncAssertionLogging: No process info dicts", v2, v3, v4, v5, v6);
}

void sub_10006BA20()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "checkForAsyncAssertionLogging: No processes with xpc connection", v2, v3, v4, v5, v6);
}

void sub_10006BA54()
{
  sub_100052DAC();
  sub_10003BA08();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "_io_pm_assertion_create: Could not create properties dictionary for PID %d", v2, v3, v4, v5, v6);
}

void sub_10006BABC()
{
  sub_100052DAC();
  sub_10003BA08();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "_io_pm_assertion_create: Assertion requires root but PID %d isn't", v2, v3, v4, v5, v6);
}

void sub_10006BB24()
{
  sub_100052DAC();
  sub_10003BA08();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "_io_pm_assertion_create: PID %d is not entitled", v2, v3, v4, v5, v6);
}

void sub_10006BB8C()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to open connection to RootDomain\n", v2, v3, v4, v5, v6);
}

void sub_10006BBC0()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to open connection to rootDomain\n", v2, v3, v4, v5, v6);
}

void sub_10006BBF4()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "Activity tickle\n", v2, v3, v4, v5, v6);
}

void sub_10006BC28()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "Activity tickle failed with error 0x%x\n", v2, v3, v4, v5, v6);
}

void sub_10006BC90()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "Activity tickle while in notification wake", v2, v3, v4, v5, v6);
}

void sub_10006BCC4(uint64_t a1, NSObject *a2)
{
  int v3 = 134218752;
  uint64_t v4 = a1;
  __int16 v5 = 2048;
  uint64_t v6 = qword_1000A4DC8;
  __int16 v7 = 1024;
  int v8 = sub_10005F7DC();
  __int16 v9 = 1024;
  int v10 = sub_10005A620();
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Avoiding display tickle. cTime:%lld lTime:%lld Display:%d rd:%d\n", (uint8_t *)&v3, 0x22u);
}

void sub_10006BD8C()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "System Assertion Timeout: Power source change to battery: Evaluating System Assertion Timer", v2, v3, v4, v5, v6);
}

void sub_10006BDC0()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "System Assertion Timeout: Power source change to AC: Cancelling System Assertion Timer", v2, v3, v4, v5, v6);
}

void sub_10006BDF4()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "Starting ProcTimer on display off.", v2, v3, v4, v5, v6);
}

void sub_10006BE28()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "Stopping ProcTimer on sustained display activity.", v2, v3, v4, v5, v6);
}

void sub_10006BE5C()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to create dispatch queue for offloading stats\n", v2, v3, v4, v5, v6);
}

void sub_10006BE90()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "IdleSleepRevert request queueing failed. rc:0x%x", v2, v3, v4, v5, v6);
}

void sub_10006BEF8()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Unable to calloc assertion struct\n", v2, v3, v4, v5, v6);
}

void sub_10006BF2C()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Unable to create assertion properties dictionary\n", v2, v3, v4, v5, v6);
}

void sub_10006BF60()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "System Assertion Timeout: Rearming timer", v2, v3, v4, v5, v6);
}

void sub_10006BF94()
{
  sub_10000F7BC();
  sub_10000F768((void *)&_mh_execute_header, v0, v1, "%@", v2, v3, v4, v5, v6);
}

void sub_10006BFFC()
{
  sub_100052DAC();
  sub_10003BA08();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "Failed to generate simulated crash for %d\n", v2, v3, v4, v5, v6);
}

void sub_10006C064()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "System Assertion Timeout: Not enforcing assertion timeout on AC power or user active", v2, v3, v4, v5, v6);
}

void sub_10006C098(os_log_t log)
{
  v1[0] = 67109376;
  v1[1] = 0;
  __int16 v2 = 2048;
  uint64_t v3 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "System Assertion Timeout: shouldStartSystemAssertionTimer power source %d activity level %llu\n", (uint8_t *)v1, 0x12u);
}

void sub_10006C120()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Invalid args to update system assertion timeout", v2, v3, v4, v5, v6);
}

void sub_10006C154()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to CFArray to hold limit values\n", v2, v3, v4, v5, v6);
}

void sub_10006C188(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10006C1F8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10006C278()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Async assertion with no kIOPMAssertionGlobalUniqueIDKey present.", v2, v3, v4, v5, v6);
}

void sub_10006C2AC(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to register for power source updates", v1, 2u);
}

void sub_10006C2F0()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "IOServiceAddMatchingNotification failed: %08x", v2, v3, v4, v5, v6);
}

void sub_10006C358()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "IOServiceAddInterestNotification failed: %08x", v2, v3, v4, v5, v6);
}

void sub_10006C3C0(uint64_t *a1, NSObject *a2)
{
  uint64_t v2 = *a1;
  int v3 = 134217984;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Port object already exists for service, ignoring... (registryEntryID: %llu)", (uint8_t *)&v3, 0xCu);
}

void sub_10006C43C()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "IORegistryEntryGetRegistryEntryID failed: %08x", v2, v3, v4, v5, v6);
}

void sub_10006C4A4(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Power assertion already exists", v1, 2u);
}

void sub_10006C4E8(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to open connection to rootDomain\n", v1, 2u);
}

void sub_10006C52C()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "Failed to get display sleep timer. rc:0x%x\n", v2, v3, v4, v5, v6);
}

void sub_10006C594()
{
  sub_10001B414();
  sub_100014C88((void *)&_mh_execute_header, v0, v1, "Setting IOPMPS proterty failed (%u)\n", v2, v3, v4, v5, v6);
}

void sub_10006C5FC()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Invalid connection\n", v2, v3, v4, v5, v6);
}

void sub_10006C630()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to get dictionary\n", v2, v3, v4, v5, v6);
}

void sub_10006C664()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to create dictionary\n", v2, v3, v4, v5, v6);
}

void sub_10006C698()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to parse kIOPSBatteryGaugingMitigationAction\n", v2, v3, v4, v5, v6);
}

void sub_10006C6CC()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to get entitlement\n", v2, v3, v4, v5, v6);
}

void sub_10006C700()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "UserActivity level : inactive. Starting System Assertion Timer", v2, v3, v4, v5, v6);
}

void sub_10006C734()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "UserActivity level : active. Cancelling System Assertion Timer", v2, v3, v4, v5, v6);
}

void sub_10006C768(uint64_t a1, NSObject *a2)
{
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Global levels set to 0x%llx\n", (uint8_t *)&v2, 0xCu);
}

void sub_10006C7E0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10006C850()
{
  sub_10001B414();
  sub_100018E0C((void *)&_mh_execute_header, v0, v1, "HID activity callback thru property callback. state:%d\n", v2, v3, v4, v5, v6);
}

void sub_10006C8B8()
{
  sub_10003B9B8();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Unexpected values. inactiveDuration:%d nextIdleTimeout:%d\n", v1, 0xEu);
}

void sub_10006C930()
{
  sub_10003B9B8();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "nextIdleTimeout: %d legacyNextIdleTimeout:%d\n", v1, 0xEu);
}

void sub_10006C9A8()
{
  sub_10001B414();
  __int16 v3 = 1024;
  int v4 = v0;
  _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "inactiveDuration:%d gUserActive.userActive:%d\n", v2, 0xEu);
}

void sub_10006CA30()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "Display is on: Is a notification wake", v2, v3, v4, v5, v6);
}

void sub_10006CA64()
{
  sub_10000F75C();
  sub_10000F7A0((void *)&_mh_execute_header, v0, v1, "Display is on: Not a notification wake. Updating user active rootdomain", v2, v3, v4, v5, v6);
}

void sub_10006CA98()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Not entitled to update domino mode", v2, v3, v4, v5, v6);
}

void sub_10006CACC()
{
  sub_10005C714();
  sub_100018DEC((void *)&_mh_execute_header, v0, v1, "Invalid args for updating domino state(%p, %p)", v2, v3);
}

void sub_10006CB34()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Not entitled to oneness mode", v2, v3, v4, v5, v6);
}

void sub_10006CB68()
{
  sub_10005C714();
  sub_100018DEC((void *)&_mh_execute_header, v0, v1, "Invalid args for updating oneness state(%p, %p)", v2, v3);
}

void sub_10006CBD0()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed allocate memory\n", v2, v3, v4, v5, v6);
}

void sub_10006CC04(_xpc_connection_s *a1, int *a2, NSObject *a3)
{
  pid_t pid = xpc_connection_get_pid(a1);
  int v7 = *a2;
  int v8 = 134218496;
  __int16 v9 = a1;
  __int16 v10 = 1024;
  pid_t v11 = pid;
  __int16 v12 = 1024;
  int v13 = v7;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Registered user inactivity client %p(pid %d) with timeout(%d)\n", (uint8_t *)&v8, 0x18u);
}

void sub_10006CCB8()
{
  sub_10005C714();
  sub_100018DEC((void *)&_mh_execute_header, v0, v1, "Invalid args for UserActivity client registration(%p, %p)\n", v2, v3);
}

void sub_10006CD20()
{
  sub_10001B414();
  sub_100018E0C((void *)&_mh_execute_header, v0, v1, "Changing idle activity timeout notification to %d secs\n", v2, v3, v4, v5, v6);
}

void sub_10006CD88()
{
  sub_10001B414();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Invalid idleTimeout value %d\n", v1, 8u);
}

void sub_10006CDFC(os_log_t log)
{
  int v1 = 134217984;
  uint64_t v2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Invalid args for UserActivity client deregistration(%p)\n", (uint8_t *)&v1, 0xCu);
}

void sub_10006CE78(_xpc_connection_s *a1, NSObject *a2)
{
  xpc_connection_get_pid(a1);
  sub_10005C72C();
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Deregistered user inactivity client %p(pid %d)\n", v3, 0x12u);
}

void sub_10006CF04(_xpc_connection_s *a1, NSObject *a2)
{
  xpc_connection_get_pid(a1);
  sub_10005C72C();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Update request from unexpected connection(%p)(pid:%d)\n", v3, 0x12u);
}

void sub_10006CF90()
{
  sub_10005C714();
  sub_100018DEC((void *)&_mh_execute_header, v0, v1, "Invalid args UserActivity client timeout update(%p, %p)\n", v2, v3);
}

void sub_10006CFF8(uint64_t a1, NSObject *a2)
{
  v2[0] = 67110400;
  v2[1] = byte_1000A4F8F;
  __int16 v3 = 1024;
  int v4 = word_1000A4FE0;
  __int16 v5 = 1024;
  int v6 = HIBYTE(word_1000A4FE0);
  __int16 v7 = 2048;
  uint64_t v8 = a1;
  __int16 v9 = 2048;
  uint64_t v10 = qword_1000A4FD0;
  __int16 v11 = 2048;
  uint64_t v12 = qword_1000A4FD8;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "getUserInactiveDuration: rdActive:%d hidActive:%d assertionActivityValid:%d now:0x%llx  hid_ts:0x%llx assertion_ts:0x%llx\n", (uint8_t *)v2, 0x32u);
}

void sub_10006D0BC()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to create hid client\n", v2, v3, v4, v5, v6);
}

void sub_10006D0F0()
{
  __assert_rtn("PMDynamicStoreDisconnectCallBack", "PMStore.c", 85, "store == gSCDynamicStore");
}

void sub_10006D11C(uint64_t a1, int a2, os_log_t log)
{
  v3[0] = 67109378;
  v3[1] = a2;
  __int16 v4 = 2112;
  uint64_t v5 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "PID %d doesnt have entitlement %@\n", (uint8_t *)v3, 0x12u);
}

void sub_10006D1A4(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "PID %d is not entitled to set wake reason\n", (uint8_t *)v2, 8u);
}

void sub_10006D21C()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to create string to hold app wake reason\n", v2, v3, v4, v5, v6);
}

void sub_10006D250()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Failed to create array to hold app wake reasons\n", v2, v3, v4, v5, v6);
}

void sub_10006D284()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Ignoring request to reset custom battery properties from unprivileged sender\n", v2, v3, v4, v5, v6);
}

void sub_10006D2B8()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Received invalid data thru custom battery properties message\n", v2, v3, v4, v5, v6);
}

void sub_10006D2EC()
{
  sub_10000F75C();
  sub_10000F740((void *)&_mh_execute_header, v0, v1, "Ignoring custom battery properties message from unprivileged sender\n", v2, v3, v4, v5, v6);
}

void sub_10006D320()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG, "Initializing PMLowPowerModeService\n", v0, 2u);
}

void sub_10006D368()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Unexpected xpc dictionary\n", v0, 2u);
}

void sub_10006D3B0(uint64_t a1, xpc_connection_t connection)
{
  int v2 = 136315650;
  uint64_t v3 = a1;
  __int16 v4 = 2048;
  xpc_connection_t v5 = connection;
  __int16 v6 = 1024;
  pid_t pid = xpc_connection_get_pid(connection);
  _os_log_debug_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG, "Received error \"%s\" on peer %p(pid %d)\n", (uint8_t *)&v2, 0x1Cu);
}

void sub_10006D460()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Unexpected xpc type\n", v0, 2u);
}

void sub_10006D4A8()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG, "WakeTime: Calendar resynced\n", v0, 2u);
}

uint64_t ADClientAddValueForScalarKey()
{
  return _ADClientAddValueForScalarKey();
}

uint64_t AnalyticsSendEventLazy()
{
  return _AnalyticsSendEventLazy();
}

uint64_t BiomeLibrary()
{
  return _BiomeLibrary();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  return _CFAbsoluteTimeGetCurrent();
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return _CFArrayCreate(allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return _CFArrayCreateMutable(allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return _CFArrayCreateMutableCopy(allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return _CFArrayGetCount(theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return _CFArrayGetFirstIndexOfValue(theArray, range, value);
}

CFTypeID CFArrayGetTypeID(void)
{
  return _CFArrayGetTypeID();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return _CFArrayGetValueAtIndex(theArray, idx);
}

void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

void CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context)
{
}

CFTypeID CFBooleanGetTypeID(void)
{
  return _CFBooleanGetTypeID();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return _CFBooleanGetValue(BOOLean);
}

Boolean CFCalendarAddComponents(CFCalendarRef calendar, CFAbsoluteTime *at, CFOptionFlags options, const char *componentDesc, ...)
{
  return _CFCalendarAddComponents(calendar, at, options, componentDesc);
}

Boolean CFCalendarComposeAbsoluteTime(CFCalendarRef calendar, CFAbsoluteTime *at, const char *componentDesc, ...)
{
  return _CFCalendarComposeAbsoluteTime(calendar, at, componentDesc);
}

CFCalendarRef CFCalendarCreateWithIdentifier(CFAllocatorRef allocator, CFCalendarIdentifier identifier)
{
  return _CFCalendarCreateWithIdentifier(allocator, identifier);
}

Boolean CFCalendarDecomposeAbsoluteTime(CFCalendarRef calendar, CFAbsoluteTime at, const char *componentDesc, ...)
{
  va_start(va, componentDesc);
  uint64_t v3 = va_arg(va, const char *);
  return _CFCalendarDecomposeAbsoluteTime(calendar, at, v3);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return _CFDataCreate(allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return _CFDataCreateMutable(allocator, capacity);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return _CFDataCreateWithBytesNoCopy(allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return _CFDataGetBytePtr(theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return _CFDataGetLength(theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return _CFDataGetTypeID();
}

CFComparisonResult CFDateCompare(CFDateRef theDate, CFDateRef otherDate, void *context)
{
  return _CFDateCompare(theDate, otherDate, context);
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return _CFDateCreate(allocator, at);
}

CFDateFormatterRef CFDateFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle)
{
  return _CFDateFormatterCreate(allocator, locale, dateStyle, timeStyle);
}

CFStringRef CFDateFormatterCreateStringWithDate(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFDateRef date)
{
  return _CFDateFormatterCreateStringWithDate(allocator, formatter, date);
}

CFAbsoluteTime CFDateGetAbsoluteTime(CFDateRef theDate)
{
  return _CFDateGetAbsoluteTime(theDate);
}

CFTimeInterval CFDateGetTimeIntervalSinceDate(CFDateRef theDate, CFDateRef otherDate)
{
  return _CFDateGetTimeIntervalSinceDate(theDate, otherDate);
}

CFTypeID CFDateGetTypeID(void)
{
  return _CFDateGetTypeID();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return _CFDictionaryContainsKey(theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return _CFDictionaryCreate(allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return _CFDictionaryCreateCopy(allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return _CFDictionaryCreateMutable(allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return _CFDictionaryCreateMutableCopy(allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return _CFDictionaryGetCount(theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return _CFDictionaryGetTypeID();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return _CFDictionaryGetValue(theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return _CFDictionaryGetValueIfPresent(theDict, key, value);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return _CFEqual(cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return _CFGetTypeID(cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return _CFNotificationCenterGetDarwinNotifyCenter();
}

CFComparisonResult CFNumberCompare(CFNumberRef number, CFNumberRef otherNumber, void *context)
{
  return _CFNumberCompare(number, otherNumber, context);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return _CFNumberCreate(allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return _CFNumberGetTypeID();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return _CFNumberGetValue(number, theType, valuePtr);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return _CFPreferencesAppSynchronize(applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return _CFPreferencesCopyAppValue(key, applicationID);
}

CFDictionaryRef CFPreferencesCopyMultiple(CFArrayRef keysToFetch, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return _CFPreferencesCopyMultiple(keysToFetch, applicationID, userName, hostName);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return _CFPreferencesCopyValue(key, applicationID, userName, hostName);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return _CFPreferencesGetAppBooleanValue(key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
}

void CFPreferencesSetMultiple(CFDictionaryRef keysToSet, CFArrayRef keysToRemove, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return _CFPreferencesSynchronize(applicationID, userName, hostName);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return _CFPropertyListCreateData(allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return _CFPropertyListCreateWithData(allocator, data, options, format, error);
}

CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return _CFPropertyListCreateWithStream(allocator, stream, streamLength, options, format, error);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return _CFReadStreamCreateWithFile(alloc, fileURL);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return _CFReadStreamOpen(stream);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return _CFRetain(cf);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
}

void CFSetApplyFunction(CFSetRef theSet, CFSetApplierFunction applier, void *context)
{
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return _CFSetContainsValue(theSet, value);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return _CFSetCreateMutable(allocator, capacity, callBacks);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return _CFSetGetCount(theSet);
}

void CFSetGetValues(CFSetRef theSet, const void **values)
{
}

void CFSetRemoveAllValues(CFMutableSetRef theSet)
{
}

void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
{
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return _CFStringCompare(theString1, theString2, compareOptions);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return _CFStringCreateMutable(alloc, maxLength);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return _CFStringCreateWithCString(alloc, cStr, encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return _CFStringCreateWithCStringNoCopy(alloc, cStr, encoding, contentsDeallocator);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return _CFStringCreateWithFormat(alloc, formatOptions, format);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFRange v5 = _CFStringFind(theString, stringToFind, compareOptions);
  CFIndex length = v5.length;
  CFIndex location = v5.location;
  result.CFIndex length = length;
  result.CFIndex location = location;
  return result;
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return _CFStringGetCString(theString, buffer, bufferSize, encoding);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return _CFStringGetLength(theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return _CFStringGetTypeID();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return _CFStringHasPrefix(theString, prefix);
}

CFTimeZoneRef CFTimeZoneCopySystem(void)
{
  return _CFTimeZoneCopySystem();
}

CFTimeInterval CFTimeZoneGetSecondsFromGMT(CFTimeZoneRef tz, CFAbsoluteTime at)
{
  return _CFTimeZoneGetSecondsFromGMT(tz, at);
}

void CFTimeZoneResetSystem(void)
{
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return _CFURLCreateWithFileSystemPath(allocator, filePath, pathStyle, isDirectory);
}

uint64_t DMIsMigrationNeeded()
{
  return _DMIsMigrationNeeded();
}

IOReturn IOAllowPowerChange(io_connect_t kernelPort, intptr_t notificationID)
{
  return _IOAllowPowerChange(kernelPort, notificationID);
}

CFDataRef IOCFSerialize(CFTypeRef object, CFOptionFlags options)
{
  return _IOCFSerialize(object, options);
}

CFTypeRef IOCFUnserialize(const char *buffer, CFAllocatorRef allocator, CFOptionFlags options, CFStringRef *errorString)
{
  return _IOCFUnserialize(buffer, allocator, options, errorString);
}

IOReturn IOCancelPowerChange(io_connect_t kernelPort, intptr_t notificationID)
{
  return _IOCancelPowerChange(kernelPort, notificationID);
}

kern_return_t IOConnectCallMethod(mach_port_t connection, uint32_t selector, const uint64_t *input, uint32_t inputCnt, const void *inputStruct, size_t inputStructCnt, uint64_t *output, uint32_t *outputCnt, void *outputStruct, size_t *outputStructCnt)
{
  return _IOConnectCallMethod(connection, selector, input, inputCnt, inputStruct, inputStructCnt, output, outputCnt, outputStruct, outputStructCnt);
}

kern_return_t IOConnectCallStructMethod(mach_port_t connection, uint32_t selector, const void *inputStruct, size_t inputStructCnt, void *outputStruct, size_t *outputStructCnt)
{
  return _IOConnectCallStructMethod(connection, selector, inputStruct, inputStructCnt, outputStruct, outputStructCnt);
}

CFTypeRef IOHIDEventSystemClientCopyProperty(IOHIDEventSystemClientRef client, CFStringRef key)
{
  return _IOHIDEventSystemClientCopyProperty(client, key);
}

uint64_t IOHIDEventSystemClientCreateWithType()
{
  return _IOHIDEventSystemClientCreateWithType();
}

uint64_t IOHIDEventSystemClientRegisterPropertyChangedCallback()
{
  return _IOHIDEventSystemClientRegisterPropertyChangedCallback();
}

uint64_t IOHIDEventSystemClientScheduleWithDispatchQueue()
{
  return _IOHIDEventSystemClientScheduleWithDispatchQueue();
}

uint64_t IOHIDEventSystemClientSetMatching()
{
  return _IOHIDEventSystemClientSetMatching();
}

Boolean IOHIDEventSystemClientSetProperty(IOHIDEventSystemClientRef client, CFStringRef key, CFTypeRef property)
{
  return _IOHIDEventSystemClientSetProperty(client, key, property);
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return _IOIteratorNext(iterator);
}

IONotificationPortRef IONotificationPortCreate(mach_port_t mainPort)
{
  return _IONotificationPortCreate(mainPort);
}

void IONotificationPortDestroy(IONotificationPortRef notify)
{
}

void IONotificationPortSetDispatchQueue(IONotificationPortRef notify, dispatch_queue_t queue)
{
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return _IOObjectRelease(object);
}

uint64_t IOPMCopyActivePMPreferences()
{
  return _IOPMCopyActivePMPreferences();
}

IOReturn IOPMCopyCPUPowerStatus(CFDictionaryRef *cpuPowerStatus)
{
  return _IOPMCopyCPUPowerStatus(cpuPowerStatus);
}

uint64_t IOPMCopyPMPreferences()
{
  return _IOPMCopyPMPreferences();
}

uint64_t IOPMCopySleepPreventersList()
{
  return _IOPMCopySleepPreventersList();
}

uint64_t IOPMCopySleepPreventersListWithID()
{
  return _IOPMCopySleepPreventersListWithID();
}

uint64_t IOPMCopySystemPowerSettings()
{
  return _IOPMCopySystemPowerSettings();
}

uint64_t IOPMFeatureIsAvailableWithSupportedTable()
{
  return _IOPMFeatureIsAvailableWithSupportedTable();
}

io_connect_t IOPMFindPowerManagement(mach_port_t master_device_port)
{
  return _IOPMFindPowerManagement(master_device_port);
}

uint64_t IOPMGetLastWakeTime()
{
  return _IOPMGetLastWakeTime();
}

IOReturn IOPMGetThermalWarningLevel(uint32_t *thermalLevel)
{
  return _IOPMGetThermalWarningLevel(thermalLevel);
}

uint64_t IOPMRegisterPrefsChangeNotification()
{
  return _IOPMRegisterPrefsChangeNotification();
}

IOReturn IOPMSchedulePowerEvent(CFDateRef time_to_wake, CFStringRef my_id, CFStringRef type)
{
  return _IOPMSchedulePowerEvent(time_to_wake, my_id, type);
}

IOReturn IOPMSetAggressiveness(io_connect_t fb, unint64_t type, unint64_t aggressiveness)
{
  return _IOPMSetAggressiveness(fb, type, aggressiveness);
}

uint64_t IOPMSleepWakeCopyUUID()
{
  return _IOPMSleepWakeCopyUUID();
}

uint64_t IOPSDrawingUnlimitedPower()
{
  return _IOPSDrawingUnlimitedPower();
}

uint64_t IOPSGetPercentRemaining()
{
  return _IOPSGetPercentRemaining();
}

uint64_t IOPSGetYearAndWeekOfManufactureFromBatterySerial()
{
  return _IOPSGetYearAndWeekOfManufactureFromBatterySerial();
}

uint64_t IOPSLimitBatteryLevel()
{
  return _IOPSLimitBatteryLevel();
}

uint64_t IOPSLimitBatteryLevelCancel()
{
  return _IOPSLimitBatteryLevelCancel();
}

uint64_t IOPSLimitBatteryLevelRegister()
{
  return _IOPSLimitBatteryLevelRegister();
}

uint64_t IOPSRequestBatteryUpdate()
{
  return _IOPSRequestBatteryUpdate();
}

io_connect_t IORegisterForSystemPower(void *refcon, IONotificationPortRef *thePortRef, IOServiceInterestCallback callback, io_object_t *notifier)
{
  return _IORegisterForSystemPower(refcon, thePortRef, callback, notifier);
}

kern_return_t IORegistryEntryCreateCFProperties(io_registry_entry_t entry, CFMutableDictionaryRef *properties, CFAllocatorRef allocator, IOOptionBits options)
{
  return _IORegistryEntryCreateCFProperties(entry, properties, allocator, options);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return _IORegistryEntryCreateCFProperty(entry, key, allocator, options);
}

io_registry_entry_t IORegistryEntryFromPath(mach_port_t mainPort, const io_string_t path)
{
  return _IORegistryEntryFromPath(mainPort, path);
}

kern_return_t IORegistryEntryGetRegistryEntryID(io_registry_entry_t entry, uint64_t *entryID)
{
  return _IORegistryEntryGetRegistryEntryID(entry, entryID);
}

kern_return_t IORegistryEntrySetCFProperties(io_registry_entry_t entry, CFTypeRef properties)
{
  return _IORegistryEntrySetCFProperties(entry, properties);
}

kern_return_t IORegistryEntrySetCFProperty(io_registry_entry_t entry, CFStringRef propertyName, CFTypeRef property)
{
  return _IORegistryEntrySetCFProperty(entry, propertyName, property);
}

uint64_t IOReportAddChannelDescription()
{
  return _IOReportAddChannelDescription();
}

uint64_t IOReportArrayGetValueAtIndex()
{
  return _IOReportArrayGetValueAtIndex();
}

uint64_t IOReportChannelGetChannelID()
{
  return _IOReportChannelGetChannelID();
}

uint64_t IOReportCopyCurrentProcessName()
{
  return _IOReportCopyCurrentProcessName();
}

uint64_t IOReportCreateAggregate()
{
  return _IOReportCreateAggregate();
}

uint64_t IOReportCreateSamplesDelta()
{
  return _IOReportCreateSamplesDelta();
}

uint64_t IOReportCreateSamplesRaw()
{
  return _IOReportCreateSamplesRaw();
}

uint64_t IOReportIterate()
{
  return _IOReportIterate();
}

kern_return_t IOServiceAddInterestNotification(IONotificationPortRef notifyPort, io_service_t service, const io_name_t interestType, IOServiceInterestCallback callback, void *refCon, io_object_t *notification)
{
  return _IOServiceAddInterestNotification(notifyPort, service, interestType, callback, refCon, notification);
}

kern_return_t IOServiceAddMatchingNotification(IONotificationPortRef notifyPort, const io_name_t notificationType, CFDictionaryRef matching, IOServiceMatchingCallback callback, void *refCon, io_iterator_t *notification)
{
  return _IOServiceAddMatchingNotification(notifyPort, notificationType, matching, callback, refCon, notification);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return _IOServiceClose(connect);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return _IOServiceGetMatchingService(mainPort, matching);
}

kern_return_t IOServiceGetMatchingServices(mach_port_t mainPort, CFDictionaryRef matching, io_iterator_t *existing)
{
  return _IOServiceGetMatchingServices(mainPort, matching, existing);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return _IOServiceMatching(name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return _IOServiceOpen(service, owningTask, type, connect);
}

uint64_t MAEGetActivationStateWithError()
{
  return _MAEGetActivationStateWithError();
}

uint64_t MGCopyAnswer()
{
  return _MGCopyAnswer();
}

uint64_t MGGetBoolAnswer()
{
  return _MGGetBoolAnswer();
}

uint64_t MGGetStringAnswer()
{
  return _MGGetStringAnswer();
}

uint64_t MGIsDeviceOfType()
{
  return _MGIsDeviceOfType();
}

uint64_t MGIsDeviceOneOfType()
{
  return _MGIsDeviceOneOfType();
}

uint64_t MKBDeviceUnlockedSinceBoot()
{
  return _MKBDeviceUnlockedSinceBoot();
}

uint64_t NSStringFromBLSBacklightChangeSourceEvent()
{
  return _NSStringFromBLSBacklightChangeSourceEvent();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

uint64_t PLLogRegisteredEvent()
{
  return _PLLogRegisteredEvent();
}

uint64_t PLLogTimeSensitiveRegisteredEvent()
{
  return _PLLogTimeSensitiveRegisteredEvent();
}

uint64_t PPSCreateTelemetryIdentifier()
{
  return _PPSCreateTelemetryIdentifier();
}

uint64_t PPSSendTelemetry()
{
  return _PPSSendTelemetry();
}

CFPropertyListRef SCDynamicStoreCopyValue(SCDynamicStoreRef store, CFStringRef key)
{
  return _SCDynamicStoreCopyValue(store, key);
}

SCDynamicStoreRef SCDynamicStoreCreate(CFAllocatorRef allocator, CFStringRef name, SCDynamicStoreCallBack callout, SCDynamicStoreContext *context)
{
  return _SCDynamicStoreCreate(allocator, name, callout, context);
}

CFStringRef SCDynamicStoreKeyCreate(CFAllocatorRef allocator, CFStringRef fmt, ...)
{
  return _SCDynamicStoreKeyCreate(allocator, fmt);
}

Boolean SCDynamicStoreRemoveValue(SCDynamicStoreRef store, CFStringRef key)
{
  return _SCDynamicStoreRemoveValue(store, key);
}

Boolean SCDynamicStoreSetDispatchQueue(SCDynamicStoreRef store, dispatch_queue_t queue)
{
  return _SCDynamicStoreSetDispatchQueue(store, queue);
}

Boolean SCDynamicStoreSetMultiple(SCDynamicStoreRef store, CFDictionaryRef keysToSet, CFArrayRef keysToRemove, CFArrayRef keysToNotify)
{
  return _SCDynamicStoreSetMultiple(store, keysToSet, keysToRemove, keysToNotify);
}

Boolean SCDynamicStoreSetValue(SCDynamicStoreRef store, CFStringRef key, CFPropertyListRef value)
{
  return _SCDynamicStoreSetValue(store, key, value);
}

Boolean SCPreferencesCommitChanges(SCPreferencesRef prefs)
{
  return _SCPreferencesCommitChanges(prefs);
}

SCPreferencesRef SCPreferencesCreate(CFAllocatorRef allocator, CFStringRef name, CFStringRef prefsID)
{
  return _SCPreferencesCreate(allocator, name, prefsID);
}

CFPropertyListRef SCPreferencesGetValue(SCPreferencesRef prefs, CFStringRef key)
{
  return _SCPreferencesGetValue(prefs, key);
}

Boolean SCPreferencesRemoveValue(SCPreferencesRef prefs, CFStringRef key)
{
  return _SCPreferencesRemoveValue(prefs, key);
}

Boolean SCPreferencesSetValue(SCPreferencesRef prefs, CFStringRef key, CFPropertyListRef value)
{
  return _SCPreferencesSetValue(prefs, key, value);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return _SecTaskCopyValueForEntitlement(task, entitlement, error);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return _SecTaskCreateWithAuditToken(allocator, token);
}

uint64_t SimulateCrash()
{
  return _SimulateCrash();
}

uint64_t TMGetReferenceTime()
{
  return _TMGetReferenceTime();
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

uint64_t _CFPreferencesCopyMultipleWithContainer()
{
  return __CFPreferencesCopyMultipleWithContainer();
}

uint64_t _CFPreferencesSetValueWithContainer()
{
  return __CFPreferencesSetValueWithContainer();
}

uint64_t _CFPreferencesSynchronizeWithContainer()
{
  return __CFPreferencesSynchronizeWithContainer();
}

uint64_t _CFXPCCreateCFObjectFromXPCMessage()
{
  return __CFXPCCreateCFObjectFromXPCMessage();
}

uint64_t _CFXPCCreateCFObjectFromXPCObject()
{
  return __CFXPCCreateCFObjectFromXPCObject();
}

uint64_t _CFXPCCreateXPCObjectFromCFObject()
{
  return __CFXPCCreateXPCObjectFromCFObject();
}

char ***_NSGetEnviron(void)
{
  return __NSGetEnviron();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

int *__error(void)
{
  return ___error();
}

uint64_t __memcpy_chk()
{
  return ___memcpy_chk();
}

uint64_t __memset_chk()
{
  return ___memset_chk();
}

uint64_t __strlcat_chk()
{
  return ___strlcat_chk();
}

uint64_t __strlcpy_chk()
{
  return ___strlcpy_chk();
}

uint64_t __strncat_chk()
{
  return ___strncat_chk();
}

uint64_t _os_feature_enabled_impl()
{
  return __os_feature_enabled_impl();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return __sl_dlopen();
}

uint64_t abort_report_np()
{
  return _abort_report_np();
}

uint64_t analytics_send_event_lazy()
{
  return _analytics_send_event_lazy();
}

void asl_append(asl_object_t obj, asl_object_t obj_to_add)
{
}

int asl_log(asl_object_t client, asl_object_t msg, int level, const char *format, ...)
{
  return _asl_log(client, msg, level, format);
}

asl_object_t asl_match(asl_object_t data, asl_object_t querylist, size_t *last, size_t start, size_t count, uint32_t duration, int32_t direction)
{
  return _asl_match(data, querylist, last, start, count, duration, direction);
}

asl_object_t asl_new(uint32_t type)
{
  return _asl_new(type);
}

asl_object_t asl_open_path(const char *path, uint32_t opts)
{
  return _asl_open_path(path, opts);
}

void asl_release(asl_object_t obj)
{
}

int asl_send(asl_object_t obj, asl_object_t msg)
{
  return _asl_send(obj, msg);
}

int asl_set(asl_object_t obj, const char *key, const char *value)
{
  return _asl_set(obj, key, value);
}

int asl_set_query(asl_object_t msg, const char *key, const char *value, uint32_t op)
{
  return _asl_set_query(msg, key, value, op);
}

void audit_token_to_au32(audit_token_t *atoken, uid_t *auidp, uid_t *euidp, gid_t *egidp, uid_t *ruidp, gid_t *rgidp, pid_t *pidp, au_asid_t *asidp, au_tid_t *tidp)
{
}

kern_return_t bootstrap_check_in(mach_port_t bp, const name_t service_name, mach_port_t *sp)
{
  return _bootstrap_check_in(bp, service_name, sp);
}

kern_return_t bootstrap_look_up(mach_port_t bp, const name_t service_name, mach_port_t *sp)
{
  return _bootstrap_look_up(bp, service_name, sp);
}

void bzero(void *a1, size_t a2)
{
}

int clock_gettime(clockid_t __clock_id, timespec *__tp)
{
  return _clock_gettime(__clock_id, __tp);
}

int close(int a1)
{
  return _close(a1);
}

uint64_t container_system_group_path_for_identifier()
{
  return _container_system_group_path_for_identifier();
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_assert_queue_barrier(dispatch_queue_t queue)
{
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return _dispatch_get_global_queue(identifier, flags);
}

uint64_t dispatch_mach_connect()
{
  return _dispatch_mach_connect();
}

uint64_t dispatch_mach_create_f()
{
  return _dispatch_mach_create_f();
}

uint64_t dispatch_mach_mig_demux()
{
  return _dispatch_mach_mig_demux();
}

uint64_t dispatch_mach_msg_get_msg()
{
  return _dispatch_mach_msg_get_msg();
}

void dispatch_main(void)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return _dispatch_queue_attr_make_with_autorelease_frequency(attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return _dispatch_queue_attr_make_with_qos_class(attr, qos_class, relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return _dispatch_queue_create_with_target_V2(label, attr, target);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return _dispatch_semaphore_signal(dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return _dispatch_semaphore_wait(dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return _dispatch_source_create(type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_sync_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

dispatch_time_t dispatch_walltime(const timespec *when, int64_t delta)
{
  return _dispatch_walltime(when, delta);
}

int dlclose(void *__handle)
{
  return _dlclose(__handle);
}

char *dlerror(void)
{
  return _dlerror();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return _dlopen(__path, __mode);
}

BOOL dlopen_preflight(const char *__path)
{
  return _dlopen_preflight(__path);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return _dlsym(__handle, __symbol);
}

uint64_t entr_act_end()
{
  return _entr_act_end();
}

int fchmod(int a1, mode_t a2)
{
  return _fchmod(a1, a2);
}

void free(void *a1)
{
}

int fstat(int a1, stat *a2)
{
  return _fstat(a1, a2);
}

group *__cdecl getgrnam(const char *a1)
{
  return _getgrnam(a1);
}

int getgrouplist(const char *a1, int a2, int *a3, int *a4)
{
  return _getgrouplist(a1, a2, a3, a4);
}

pid_t getpid(void)
{
  return _getpid();
}

passwd *__cdecl getpwuid(uid_t a1)
{
  return _getpwuid(a1);
}

kern_return_t host_request_notification(host_t host, host_flavor_t notify_type, mach_port_t notify_port)
{
  return _host_request_notification(host, notify_type, notify_port);
}

uint64_t kdebug_trace()
{
  return _kdebug_trace();
}

int kill(pid_t a1, int a2)
{
  return _kill(a1, a2);
}

int lchmod(const char *a1, mode_t a2)
{
  return _lchmod(a1, a2);
}

uint64_t mach_absolute_time(void)
{
  return _mach_absolute_time();
}

uint64_t mach_continuous_time(void)
{
  return _mach_continuous_time();
}

uint64_t mach_get_times()
{
  return _mach_get_times();
}

mach_port_t mach_host_self(void)
{
  return _mach_host_self();
}

mach_msg_return_t mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify)
{
  return _mach_msg(msg, option, send_size, rcv_size, rcv_name, timeout, notify);
}

void mach_msg_destroy(mach_msg_header_t *a1)
{
}

kern_return_t mach_port_allocate(ipc_space_t task, mach_port_right_t right, mach_port_name_t *name)
{
  return _mach_port_allocate(task, right, name);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return _mach_port_deallocate(task, name);
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return _mach_timebase_info(info);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_calloc(count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_malloc(size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return _memchr(__s, __c, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void mig_dealloc_reply_port(mach_port_t reply_port)
{
}

mach_port_t mig_get_reply_port(void)
{
  return _mig_get_reply_port();
}

void mig_put_reply_port(mach_port_t reply_port)
{
}

int mkdir(const char *a1, mode_t a2)
{
  return _mkdir(a1, a2);
}

uint32_t notify_cancel(int token)
{
  return _notify_cancel(token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return _notify_get_state(token, state64);
}

BOOL notify_is_valid_token(int val)
{
  return _notify_is_valid_token(val);
}

uint32_t notify_post(const char *name)
{
  return _notify_post(name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return _notify_register_check(name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return _notify_register_dispatch(name, out_token, queue, handler);
}

uint32_t notify_register_mach_port(const char *name, mach_port_t *notify_port, int flags, int *out_token)
{
  return _notify_register_mach_port(name, notify_port, flags, out_token);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return _notify_set_state(token, state64);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_enumerationMutation(id obj)
{
}

Class objc_getClass(const char *name)
{
  return _objc_getClass(name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return _objc_getProperty(self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return _objc_initWeak(location, val);
}

id objc_loadWeak(id *location)
{
  return _objc_loadWeak(location);
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return _objc_msgSendSuper2(a1, a2);
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_new()
{
  return _objc_opt_new();
}

uint64_t objc_opt_respondsToSelector()
{
  return _objc_opt_respondsToSelector();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

int objc_sync_enter(id obj)
{
  return _objc_sync_enter(obj);
}

int objc_sync_exit(id obj)
{
  return _objc_sync_exit(obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return _objc_unsafeClaimAutoreleasedReturnValue(a1);
}

int open(const char *a1, int a2, ...)
{
  return _open(a1, a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return _os_log_create(subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t os_parse_boot_arg_int()
{
  return _os_parse_boot_arg_int();
}

uint64_t os_state_add_handler()
{
  return _os_state_add_handler();
}

uint64_t os_transaction_create()
{
  return _os_transaction_create();
}

int posix_spawn(pid_t *a1, const char *a2, const posix_spawn_file_actions_t *a3, const posix_spawnattr_t *a4, char *const __argv[], char *const __envp[])
{
  return _posix_spawn(a1, a2, a3, a4, __argv, __envp);
}

int posix_spawn_file_actions_addopen(posix_spawn_file_actions_t *a1, int a2, const char *a3, int a4, mode_t a5)
{
  return _posix_spawn_file_actions_addopen(a1, a2, a3, a4, a5);
}

int posix_spawn_file_actions_destroy(posix_spawn_file_actions_t *a1)
{
  return _posix_spawn_file_actions_destroy(a1);
}

int posix_spawn_file_actions_init(posix_spawn_file_actions_t *a1)
{
  return _posix_spawn_file_actions_init(a1);
}

int proc_name(int pid, void *buffer, uint32_t buffersize)
{
  return _proc_name(pid, buffer, buffersize);
}

int pthread_mutex_trylock(pthread_mutex_t *a1)
{
  return _pthread_mutex_trylock(a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return _pthread_mutex_unlock(a1);
}

uint64_t pthread_set_fixedpriority_self()
{
  return _pthread_set_fixedpriority_self();
}

int pthread_set_qos_class_self_np(qos_class_t __qos_class, int __relative_priority)
{
  return _pthread_set_qos_class_self_np(__qos_class, __relative_priority);
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return _snprintf(__str, __size, __format);
}

size_t strlcat(char *__dst, const char *__source, size_t __size)
{
  return _strlcat(__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return _strlen(__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return _strncmp(__s1, __s2, __n);
}

char *__cdecl strnstr(const char *__big, const char *__little, size_t __len)
{
  return _strnstr(__big, __little, __len);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return _strtol(__str, __endptr, __base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return _strtoul(__str, __endptr, __base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return _strtoull(__str, __endptr, __base);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return _sysctlbyname(a1, a2, a3, a4, a5);
}

void syslog(int a1, const char *a2, ...)
{
}

kern_return_t task_get_special_port(task_inspect_t task, int which_port, mach_port_t *special_port)
{
  return _task_get_special_port(task, which_port, special_port);
}

time_t time(time_t *a1)
{
  return _time(a1);
}

int usleep(useconds_t a1)
{
  return _usleep(a1);
}

void uuid_generate(uuid_t out)
{
}

void uuid_unparse_upper(const uuid_t uu, uuid_string_t out)
{
}

kern_return_t vm_allocate(vm_map_t target_task, vm_address_t *address, vm_size_t size, int flags)
{
  return _vm_allocate(target_task, address, size, flags);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return _vm_deallocate(target_task, address, size);
}

BOOLean_t voucher_mach_msg_set(mach_msg_header_t *msg)
{
  return _voucher_mach_msg_set(msg);
}

pid_t waitpid(pid_t a1, int *a2, int a3)
{
  return _waitpid(a1, a2, a3);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
}

void xpc_activity_unregister(const char *identifier)
{
}

void xpc_connection_activate(xpc_connection_t connection)
{
}

void xpc_connection_cancel(xpc_connection_t connection)
{
}

uint64_t xpc_connection_copy_invalidation_reason()
{
  return _xpc_connection_copy_invalidation_reason();
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return _xpc_connection_create_mach_service(name, targetq, flags);
}

uint64_t xpc_connection_get_audit_token()
{
  return _xpc_connection_get_audit_token();
}

gid_t xpc_connection_get_egid(xpc_connection_t connection)
{
  return _xpc_connection_get_egid(connection);
}

uid_t xpc_connection_get_euid(xpc_connection_t connection)
{
  return _xpc_connection_get_euid(connection);
}

pid_t xpc_connection_get_pid(xpc_connection_t connection)
{
  return _xpc_connection_get_pid(connection);
}

void xpc_connection_resume(xpc_connection_t connection)
{
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
}

void xpc_connection_send_message_with_reply(xpc_connection_t connection, xpc_object_t message, dispatch_queue_t replyq, xpc_handler_t handler)
{
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

void xpc_connection_set_target_queue(xpc_connection_t connection, dispatch_queue_t targetq)
{
}

xpc_object_t xpc_copy(xpc_object_t object)
{
  return _xpc_copy(object);
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return _xpc_copy_description(object);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return _xpc_dictionary_create(keys, values, count);
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return _xpc_dictionary_create_reply(original);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_BOOL(xdict, key);
}

xpc_object_t xpc_dictionary_get_dictionary(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_dictionary(xdict, key);
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_int64(xdict, key);
}

xpc_connection_t xpc_dictionary_get_remote_connection(xpc_object_t xdict)
{
  return _xpc_dictionary_get_remote_connection(xdict);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_string(xdict, key);
}

uint64_t xpc_dictionary_get_uint64(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_uint64(xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_value(xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_date(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return _xpc_get_type(object);
}

void xpc_release(xpc_object_t object)
{
}

xpc_object_t xpc_retain(xpc_object_t object)
{
  return _xpc_retain(object);
}

uint64_t xpc_set_event()
{
  return _xpc_set_event();
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
}

id objc_msgSend_CAEventForInactivityTooShortToQueryModel(void *a1, const char *a2, ...)
{
  return [a1 CAEventForInactivityTooShortToQueryModel];
}

id objc_msgSend_CAEventForModelHesitancy(void *a1, const char *a2, ...)
{
  return [a1 CAEventForModelHesitancy];
}

id objc_msgSend_ContextSync(void *a1, const char *a2, ...)
{
  return [a1 ContextSync];
}

id objc_msgSend_DSLPublisher(void *a1, const char *a2, ...)
{
  return [a1 DSLPublisher];
}

id objc_msgSend_Device(void *a1, const char *a2, ...)
{
  return [a1 Device];
}

id objc_msgSend_EnergyMode(void *a1, const char *a2, ...)
{
  return [a1 EnergyMode];
}

id objc_msgSend_InstanceManager(void *a1, const char *a2, ...)
{
  return [a1 InstanceManager];
}

id objc_msgSend_LOI(void *a1, const char *a2, ...)
{
  return [a1 LOI];
}

id objc_msgSend_Power(void *a1, const char *a2, ...)
{
  return [a1 Power];
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return [a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return [a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return [a1 UUIDString];
}

id objc_msgSend_alarmStream(void *a1, const char *a2, ...)
{
  return [a1 alarmStream];
}

id objc_msgSend_areAllRemoteDevicesAway(void *a1, const char *a2, ...)
{
  return [a1 areAllRemoteDevicesAway];
}

id objc_msgSend_armQueryTimer(void *a1, const char *a2, ...)
{
  return [a1 armQueryTimer];
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return [a1 array];
}

id objc_msgSend_autoDisableCheck(void *a1, const char *a2, ...)
{
  return [a1 autoDisableCheck];
}

id objc_msgSend_autoDisableLowPowerMode(void *a1, const char *a2, ...)
{
  return [a1 autoDisableLowPowerMode];
}

id objc_msgSend_autoEnableCheck(void *a1, const char *a2, ...)
{
  return [a1 autoEnableCheck];
}

id objc_msgSend_batteryChanged(void *a1, const char *a2, ...)
{
  return [a1 batteryChanged];
}

id objc_msgSend_batteryPercentage(void *a1, const char *a2, ...)
{
  return [a1 batteryPercentage];
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return [a1 BOOLValue];
}

id objc_msgSend_BOOLeanValue(void *a1, const char *a2, ...)
{
  return [a1 BOOLeanValue];
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return [a1 bytes];
}

id objc_msgSend_cancelAlarm(void *a1, const char *a2, ...)
{
  return [a1 cancelAlarm];
}

id objc_msgSend_cancelModelQuery(void *a1, const char *a2, ...)
{
  return [a1 cancelModelQuery];
}

id objc_msgSend_cancelModelRequery(void *a1, const char *a2, ...)
{
  return [a1 cancelModelRequery];
}

id objc_msgSend_changeRequest(void *a1, const char *a2, ...)
{
  return [a1 changeRequest];
}

id objc_msgSend_clients(void *a1, const char *a2, ...)
{
  return [a1 clients];
}

id objc_msgSend_closeFile(void *a1, const char *a2, ...)
{
  return [a1 closeFile];
}

id objc_msgSend_collationPeriod(void *a1, const char *a2, ...)
{
  return [a1 collationPeriod];
}

id objc_msgSend_collectAtPowerSourceChange(void *a1, const char *a2, ...)
{
  return [a1 collectAtPowerSourceChange];
}

id objc_msgSend_collectAtSBC(void *a1, const char *a2, ...)
{
  return [a1 collectAtSBC];
}

id objc_msgSend_collectOnce(void *a1, const char *a2, ...)
{
  return [a1 collectOnce];
}

id objc_msgSend_collectionEventHandler(void *a1, const char *a2, ...)
{
  return [a1 collectionEventHandler];
}

id objc_msgSend_collectionPeriod(void *a1, const char *a2, ...)
{
  return [a1 collectionPeriod];
}

id objc_msgSend_collectionQueue(void *a1, const char *a2, ...)
{
  return [a1 collectionQueue];
}

id objc_msgSend_collectionTimer(void *a1, const char *a2, ...)
{
  return [a1 collectionTimer];
}

id objc_msgSend_columnNames(void *a1, const char *a2, ...)
{
  return [a1 columnNames];
}

id objc_msgSend_confidenceLevel(void *a1, const char *a2, ...)
{
  return [a1 confidenceLevel];
}

id objc_msgSend_confidenceThresholdStrict(void *a1, const char *a2, ...)
{
  return [a1 confidenceThresholdStrict];
}

id objc_msgSend_confidenceValue(void *a1, const char *a2, ...)
{
  return [a1 confidenceValue];
}

id objc_msgSend_connection(void *a1, const char *a2, ...)
{
  return [a1 connection];
}

id objc_msgSend_contextSyncClient(void *a1, const char *a2, ...)
{
  return [a1 contextSyncClient];
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return [a1 copy];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return [a1 count];
}

id objc_msgSend_createDataDictCollectionBlock(void *a1, const char *a2, ...)
{
  return [a1 createDataDictCollectionBlock];
}

id objc_msgSend_currentCalendar(void *a1, const char *a2, ...)
{
  return [a1 currentCalendar];
}

id objc_msgSend_currentConnection(void *a1, const char *a2, ...)
{
  return [a1 currentConnection];
}

id objc_msgSend_dataGroupName(void *a1, const char *a2, ...)
{
  return [a1 dataGroupName];
}

id objc_msgSend_dataRole(void *a1, const char *a2, ...)
{
  return [a1 dataRole];
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return [a1 date];
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return [a1 defaultCenter];
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return [a1 defaultManager];
}

id objc_msgSend_defaults(void *a1, const char *a2, ...)
{
  return [a1 defaults];
}

id objc_msgSend_deploymentId(void *a1, const char *a2, ...)
{
  return [a1 deploymentId];
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return [a1 description];
}

id objc_msgSend_deviceUUID(void *a1, const char *a2, ...)
{
  return [a1 deviceUUID];
}

id objc_msgSend_deviceUsageDiagnosis(void *a1, const char *a2, ...)
{
  return [a1 deviceUsageDiagnosis];
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return [a1 dictionary];
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return [a1 dictionaryRepresentation];
}

id objc_msgSend_dirPath(void *a1, const char *a2, ...)
{
  return [a1 dirPath];
}

id objc_msgSend_disableSocLimitPolicy(void *a1, const char *a2, ...)
{
  return [a1 disableSocLimitPolicy];
}

id objc_msgSend_distantPast(void *a1, const char *a2, ...)
{
  return [a1 distantPast];
}

id objc_msgSend_doNotRunAnymore(void *a1, const char *a2, ...)
{
  return [a1 doNotRunAnymore];
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return [a1 doubleValue];
}

id objc_msgSend_drain(void *a1, const char *a2, ...)
{
  return [a1 drain];
}

id objc_msgSend_end(void *a1, const char *a2, ...)
{
  return [a1 end];
}

id objc_msgSend_enterCoreSmartPowerNap(void *a1, const char *a2, ...)
{
  return [a1 enterCoreSmartPowerNap];
}

id objc_msgSend_enterSmartPowerNap(void *a1, const char *a2, ...)
{
  return [a1 enterSmartPowerNap];
}

id objc_msgSend_evaluatePowerAssertion(void *a1, const char *a2, ...)
{
  return [a1 evaluatePowerAssertion];
}

id objc_msgSend_eventBasedCollection(void *a1, const char *a2, ...)
{
  return [a1 eventBasedCollection];
}

id objc_msgSend_eventBody(void *a1, const char *a2, ...)
{
  return [a1 eventBody];
}

id objc_msgSend_eventRegistrationToken(void *a1, const char *a2, ...)
{
  return [a1 eventRegistrationToken];
}

id objc_msgSend_exitCoreSmartPowerNap(void *a1, const char *a2, ...)
{
  return [a1 exitCoreSmartPowerNap];
}

id objc_msgSend_exitSmartPowerNap(void *a1, const char *a2, ...)
{
  return [a1 exitSmartPowerNap];
}

id objc_msgSend_experimentId(void *a1, const char *a2, ...)
{
  return [a1 experimentId];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return [a1 firstObject];
}

id objc_msgSend_formatVersion(void *a1, const char *a2, ...)
{
  return [a1 formatVersion];
}

id objc_msgSend_gaugingAccuracyMetricGet(void *a1, const char *a2, ...)
{
  return [a1 gaugingAccuracyMetricGet];
}

id objc_msgSend_gaugingMitigationStatistics(void *a1, const char *a2, ...)
{
  return [a1 gaugingMitigationStatistics];
}

id objc_msgSend_getBatteryChargeWhenEnabled(void *a1, const char *a2, ...)
{
  return [a1 getBatteryChargeWhenEnabled];
}

id objc_msgSend_getBatteryProperties(void *a1, const char *a2, ...)
{
  return [a1 getBatteryProperties];
}

id objc_msgSend_getCollectionPeriod(void *a1, const char *a2, ...)
{
  return [a1 getCollectionPeriod];
}

id objc_msgSend_getDippedBelow(void *a1, const char *a2, ...)
{
  return [a1 getDippedBelow];
}

id objc_msgSend_getLastDataLoggedTimestampDefaultsKey(void *a1, const char *a2, ...)
{
  return [a1 getLastDataLoggedTimestampDefaultsKey];
}

id objc_msgSend_getLastUsedDataFileNameDefaultsKey(void *a1, const char *a2, ...)
{
  return [a1 getLastUsedDataFileNameDefaultsKey];
}

id objc_msgSend_handleBatteryStateDataUpdate(void *a1, const char *a2, ...)
{
  return [a1 handleBatteryStateDataUpdate];
}

id objc_msgSend_handlePredictedEndTimer(void *a1, const char *a2, ...)
{
  return [a1 handlePredictedEndTimer];
}

id objc_msgSend_handleRemoteDeviceIsNear(void *a1, const char *a2, ...)
{
  return [a1 handleRemoteDeviceIsNear];
}

id objc_msgSend_haveFrameworkToRun(void *a1, const char *a2, ...)
{
  return [a1 haveFrameworkToRun];
}

id objc_msgSend_hour(void *a1, const char *a2, ...)
{
  return [a1 hour];
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return [a1 init];
}

id objc_msgSend_initAnalyticsTimers(void *a1, const char *a2, ...)
{
  return [a1 initAnalyticsTimers];
}

id objc_msgSend_initBatteryGaugingAccuracyData(void *a1, const char *a2, ...)
{
  return [a1 initBatteryGaugingAccuracyData];
}

id objc_msgSend_initMobileTimerMonitor(void *a1, const char *a2, ...)
{
  return [a1 initMobileTimerMonitor];
}

id objc_msgSend_initMotionAlarm(void *a1, const char *a2, ...)
{
  return [a1 initMotionAlarm];
}

id objc_msgSend_initialData(void *a1, const char *a2, ...)
{
  return [a1 initialData];
}

id objc_msgSend_initializePredictor(void *a1, const char *a2, ...)
{
  return [a1 initializePredictor];
}

id objc_msgSend_initializeTrialClient(void *a1, const char *a2, ...)
{
  return [a1 initializeTrialClient];
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return [a1 intValue];
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return [a1 integerValue];
}

id objc_msgSend_interruptions(void *a1, const char *a2, ...)
{
  return [a1 interruptions];
}

id objc_msgSend_ioNotificationPort(void *a1, const char *a2, ...)
{
  return [a1 ioNotificationPort];
}

id objc_msgSend_ioServiceAddedIterator(void *a1, const char *a2, ...)
{
  return [a1 ioServiceAddedIterator];
}

id objc_msgSend_isACPowered(void *a1, const char *a2, ...)
{
  return [a1 isACPowered];
}

id objc_msgSend_isAlwaysOnEnabled(void *a1, const char *a2, ...)
{
  return [a1 isAlwaysOnEnabled];
}

id objc_msgSend_isDeviceMode(void *a1, const char *a2, ...)
{
  return [a1 isDeviceMode];
}

id objc_msgSend_isLostModeActive(void *a1, const char *a2, ...)
{
  return [a1 isLostModeActive];
}

id objc_msgSend_isLowPowerModeEnabled(void *a1, const char *a2, ...)
{
  return [a1 isLowPowerModeEnabled];
}

id objc_msgSend_isSleepSuppressionSupported(void *a1, const char *a2, ...)
{
  return [a1 isSleepSuppressionSupported];
}

id objc_msgSend_isStarting(void *a1, const char *a2, ...)
{
  return [a1 isStarting];
}

id objc_msgSend_keyEnumerator(void *a1, const char *a2, ...)
{
  return [a1 keyEnumerator];
}

id objc_msgSend_lastPathComponent(void *a1, const char *a2, ...)
{
  return [a1 lastPathComponent];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return [a1 length];
}

id objc_msgSend_localLOI(void *a1, const char *a2, ...)
{
  return [a1 localLOI];
}

id objc_msgSend_logNotEngaging(void *a1, const char *a2, ...)
{
  return [a1 logNotEngaging];
}

id objc_msgSend_logTransientInterruptions(void *a1, const char *a2, ...)
{
  return [a1 logTransientInterruptions];
}

id objc_msgSend_longThreshold(void *a1, const char *a2, ...)
{
  return [a1 longThreshold];
}

id objc_msgSend_longValue(void *a1, const char *a2, ...)
{
  return [a1 longValue];
}

id objc_msgSend_lostModeCheck(void *a1, const char *a2, ...)
{
  return [a1 lostModeCheck];
}

id objc_msgSend_mainQueue(void *a1, const char *a2, ...)
{
  return [a1 mainQueue];
}

id objc_msgSend_minute(void *a1, const char *a2, ...)
{
  return [a1 minute];
}

id objc_msgSend_modelMetadata(void *a1, const char *a2, ...)
{
  return [a1 modelMetadata];
}

id objc_msgSend_modelVersion(void *a1, const char *a2, ...)
{
  return [a1 modelVersion];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return [a1 mutableCopy];
}

id objc_msgSend_neverPrune(void *a1, const char *a2, ...)
{
  return [a1 neverPrune];
}

id objc_msgSend_nextObject(void *a1, const char *a2, ...)
{
  return [a1 nextObject];
}

id objc_msgSend_noChargeToFull(void *a1, const char *a2, ...)
{
  return [a1 noChargeToFull];
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return [a1 now];
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return [a1 null];
}

id objc_msgSend_outputReason(void *a1, const char *a2, ...)
{
  return [a1 outputReason];
}

id objc_msgSend_owner(void *a1, const char *a2, ...)
{
  return [a1 owner];
}

id objc_msgSend_parseDeviceUsageFrequencyFromDiagnosis(void *a1, const char *a2, ...)
{
  return [a1 parseDeviceUsageFrequencyFromDiagnosis];
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return [a1 path];
}

id objc_msgSend_periodicActions(void *a1, const char *a2, ...)
{
  return [a1 periodicActions];
}

id objc_msgSend_periodicChargeToFullCheck(void *a1, const char *a2, ...)
{
  return [a1 periodicChargeToFullCheck];
}

id objc_msgSend_perpetualMeadowEnabled(void *a1, const char *a2, ...)
{
  return [a1 perpetualMeadowEnabled];
}

id objc_msgSend_placeType(void *a1, const char *a2, ...)
{
  return [a1 placeType];
}

id objc_msgSend_pluggedIn(void *a1, const char *a2, ...)
{
  return [a1 pluggedIn];
}

id objc_msgSend_powerassertion(void *a1, const char *a2, ...)
{
  return [a1 powerassertion];
}

id objc_msgSend_powerassertionID(void *a1, const char *a2, ...)
{
  return [a1 powerassertionID];
}

id objc_msgSend_predictedDuration(void *a1, const char *a2, ...)
{
  return [a1 predictedDuration];
}

id objc_msgSend_predictor(void *a1, const char *a2, ...)
{
  return [a1 predictor];
}

id objc_msgSend_predictorType(void *a1, const char *a2, ...)
{
  return [a1 predictorType];
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return [a1 processIdentifier];
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return [a1 processInfo];
}

id objc_msgSend_publisher(void *a1, const char *a2, ...)
{
  return [a1 publisher];
}

id objc_msgSend_queryModelAndEngage(void *a1, const char *a2, ...)
{
  return [a1 queryModelAndEngage];
}

id objc_msgSend_queryingMechanism(void *a1, const char *a2, ...)
{
  return [a1 queryingMechanism];
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return [a1 queue];
}

id objc_msgSend_raiseAssertionForEvaluation(void *a1, const char *a2, ...)
{
  return [a1 raiseAssertionForEvaluation];
}

id objc_msgSend_readBootArgOverride(void *a1, const char *a2, ...)
{
  return [a1 readBootArgOverride];
}

id objc_msgSend_readDateFromDefaults(void *a1, const char *a2, ...)
{
  return [a1 readDateFromDefaults];
}

id objc_msgSend_readEndTimeFromDefaults(void *a1, const char *a2, ...)
{
  return [a1 readEndTimeFromDefaults];
}

id objc_msgSend_readOverrideTimeFromDefaults(void *a1, const char *a2, ...)
{
  return [a1 readOverrideTimeFromDefaults];
}

id objc_msgSend_readParamsFromDefaults(void *a1, const char *a2, ...)
{
  return [a1 readParamsFromDefaults];
}

id objc_msgSend_readPreferences(void *a1, const char *a2, ...)
{
  return [a1 readPreferences];
}

id objc_msgSend_readSkipEndOfSessionTimerFromDefaults(void *a1, const char *a2, ...)
{
  return [a1 readSkipEndOfSessionTimerFromDefaults];
}

id objc_msgSend_readSourceFromDefaults(void *a1, const char *a2, ...)
{
  return [a1 readSourceFromDefaults];
}

id objc_msgSend_readStartTimeFromDefaults(void *a1, const char *a2, ...)
{
  return [a1 readStartTimeFromDefaults];
}

id objc_msgSend_readStateFromDefaults(void *a1, const char *a2, ...)
{
  return [a1 readStateFromDefaults];
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return [a1 reason];
}

id objc_msgSend_refresh(void *a1, const char *a2, ...)
{
  return [a1 refresh];
}

id objc_msgSend_registerForBacklightUpdates(void *a1, const char *a2, ...)
{
  return [a1 registerForBacklightUpdates];
}

id objc_msgSend_registerForLocalLOISignals(void *a1, const char *a2, ...)
{
  return [a1 registerForLocalLOISignals];
}

id objc_msgSend_registerForLockStateUpdates(void *a1, const char *a2, ...)
{
  return [a1 registerForLockStateUpdates];
}

id objc_msgSend_registerForPluginStateUpdates(void *a1, const char *a2, ...)
{
  return [a1 registerForPluginStateUpdates];
}

id objc_msgSend_registerForPowerSourceUpdates(void *a1, const char *a2, ...)
{
  return [a1 registerForPowerSourceUpdates];
}

id objc_msgSend_registerForRemoteLOISignals(void *a1, const char *a2, ...)
{
  return [a1 registerForRemoteLOISignals];
}

id objc_msgSend_registerMotionAlarm(void *a1, const char *a2, ...)
{
  return [a1 registerMotionAlarm];
}

id objc_msgSend_releaseAssertion(void *a1, const char *a2, ...)
{
  return [a1 releaseAssertion];
}

id objc_msgSend_releasePowerAssertion(void *a1, const char *a2, ...)
{
  return [a1 releasePowerAssertion];
}

id objc_msgSend_remoteLOIs(void *a1, const char *a2, ...)
{
  return [a1 remoteLOIs];
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return [a1 removeAllObjects];
}

id objc_msgSend_reportMonthlyData(void *a1, const char *a2, ...)
{
  return [a1 reportMonthlyData];
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return [a1 resume];
}

id objc_msgSend_retentionPeriod(void *a1, const char *a2, ...)
{
  return [a1 retentionPeriod];
}

id objc_msgSend_saveInterruptions(void *a1, const char *a2, ...)
{
  return [a1 saveInterruptions];
}

id objc_msgSend_seekToEndOfFile(void *a1, const char *a2, ...)
{
  return [a1 seekToEndOfFile];
}

id objc_msgSend_semanticLocationStream(void *a1, const char *a2, ...)
{
  return [a1 semanticLocationStream];
}

id objc_msgSend_setupAVSystemController(void *a1, const char *a2, ...)
{
  return [a1 setupAVSystemController];
}

id objc_msgSend_sharedAVSystemController(void *a1, const char *a2, ...)
{
  return [a1 sharedAVSystemController];
}

id objc_msgSend_sharedBacklight(void *a1, const char *a2, ...)
{
  return [a1 sharedBacklight];
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return [a1 sharedInstance];
}

id objc_msgSend_shortDescription(void *a1, const char *a2, ...)
{
  return [a1 shortDescription];
}

id objc_msgSend_skipCSVAndUsePowerlog(void *a1, const char *a2, ...)
{
  return [a1 skipCSVAndUsePowerlog];
}

id objc_msgSend_skipEndOfSessionTimer(void *a1, const char *a2, ...)
{
  return [a1 skipEndOfSessionTimer];
}

id objc_msgSend_socLimit(void *a1, const char *a2, ...)
{
  return [a1 socLimit];
}

id objc_msgSend_source(void *a1, const char *a2, ...)
{
  return [a1 source];
}

id objc_msgSend_sourceEvent(void *a1, const char *a2, ...)
{
  return [a1 sourceEvent];
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return [a1 start];
}

id objc_msgSend_startMatchingNotifications(void *a1, const char *a2, ...)
{
  return [a1 startMatchingNotifications];
}

id objc_msgSend_starting(void *a1, const char *a2, ...)
{
  return [a1 starting];
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return [a1 state];
}

id objc_msgSend_stop(void *a1, const char *a2, ...)
{
  return [a1 stop];
}

id objc_msgSend_stopMatchingNotifications(void *a1, const char *a2, ...)
{
  return [a1 stopMatchingNotifications];
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return [a1 stringValue];
}

id objc_msgSend_synchronize(void *a1, const char *a2, ...)
{
  return [a1 synchronize];
}

id objc_msgSend_syncing(void *a1, const char *a2, ...)
{
  return [a1 syncing];
}

id objc_msgSend_terminated(void *a1, const char *a2, ...)
{
  return [a1 terminated];
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return [a1 timeIntervalSince1970];
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return [a1 timeIntervalSinceNow];
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return [a1 timeIntervalSinceReferenceDate];
}

id objc_msgSend_token(void *a1, const char *a2, ...)
{
  return [a1 token];
}

id objc_msgSend_transportNotifiers(void *a1, const char *a2, ...)
{
  return [a1 transportNotifiers];
}

id objc_msgSend_treatmentId(void *a1, const char *a2, ...)
{
  return [a1 treatmentId];
}

id objc_msgSend_trustedDataShared(void *a1, const char *a2, ...)
{
  return [a1 trustedDataShared];
}

id objc_msgSend_unregisterMotionAlarm(void *a1, const char *a2, ...)
{
  return [a1 unregisterMotionAlarm];
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return [a1 unsignedIntValue];
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return [a1 unsignedLongLongValue];
}

id objc_msgSend_unsignedLongValue(void *a1, const char *a2, ...)
{
  return [a1 unsignedLongValue];
}

id objc_msgSend_updateAnalyticsData(void *a1, const char *a2, ...)
{
  return [a1 updateAnalyticsData];
}

id objc_msgSend_updateInterruptionsFromDefaults(void *a1, const char *a2, ...)
{
  return [a1 updateInterruptionsFromDefaults];
}

id objc_msgSend_updateTrialFactors(void *a1, const char *a2, ...)
{
  return [a1 updateTrialFactors];
}

id objc_msgSend_uppercaseString(void *a1, const char *a2, ...)
{
  return [a1 uppercaseString];
}

id objc_msgSend_useBTMAsDataSource(void *a1, const char *a2, ...)
{
  return [a1 useBTMAsDataSource];
}

id objc_msgSend_useSmartChargingDataSource(void *a1, const char *a2, ...)
{
  return [a1 useSmartChargingDataSource];
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return [a1 userInfo];
}

id objc_msgSend_userSpecificPlaceType(void *a1, const char *a2, ...)
{
  return [a1 userSpecificPlaceType];
}

id objc_msgSend_weekday(void *a1, const char *a2, ...)
{
  return [a1 weekday];
}

id objc_msgSend_whitespaceAndNewlineCharacterSet(void *a1, const char *a2, ...)
{
  return [a1 whitespaceAndNewlineCharacterSet];
}

id objc_msgSend_wombatActive(void *a1, const char *a2, ...)
{
  return [a1 wombatActive];
}

id objc_msgSend_writeToFile_atomically_encoding_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeToFile:atomically:encoding:error:");
}